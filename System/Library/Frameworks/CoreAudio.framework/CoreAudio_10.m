void sub_1B5C4D670(_Unwind_Exception *exception_object, int a2)
{
  uint64_t v2;
  _QWORD *exception;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  if (a2 == 1)
  {
    __cxa_begin_catch(exception_object);
    exception = __cxa_allocate_exception(0x18uLL);
    v4 = *(_QWORD *)(v2 + 24);
    v5 = v4 != 0;
    v6 = v4 - 1;
    if (!v5)
      v6 = 0;
    *exception = &off_1E699B850;
    exception[1] = v6;
    *((_DWORD *)exception + 4) = 4;
  }
  _Unwind_Resume(exception_object);
}

void sub_1B5C4D6D8()
{
  __cxa_end_catch();
  JUMPOUT(0x1B5C4D6E0);
}

void minijson::detail::parse_value_helper<minijson::istream_context>(uint64_t a1, uint64_t a2, _BYTE *a3, _BYTE *a4)
{
  unsigned int v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  minijson::istream_context *v14;
  uint64_t v15;
  minijson::istream_context **v16;
  unsigned int v17;
  char *v18;
  double v19;
  uint64_t v20;
  char v21;
  char v22;
  int v23;
  _QWORD *exception;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;

  v6 = *a3;
  switch(v6)
  {
    case '"':
      v8 = operator new(0x28uLL);
      v8[3] = 0;
      v8[4] = 0;
      v10 = a2 + 32;
      v9 = *(_QWORD *)(a2 + 32);
      v8[1] = a2 + 32;
      v8[2] = 0;
      *v8 = v9;
      *(_QWORD *)(v9 + 8) = v8;
      *(_QWORD *)(a2 + 32) = v8;
      ++*(_QWORD *)(a2 + 48);
      minijson::detail::read_quoted_string<minijson::istream_context>((minijson::istream_context **)a2);
      if (*(_QWORD *)(*(_QWORD *)v10 + 16) == *(_QWORD *)(*(_QWORD *)v10 + 24))
        v11 = 0;
      else
        v11 = *(_QWORD *)(*(_QWORD *)v10 + 16);
      *(_DWORD *)a1 = 0;
      *(_WORD *)(a1 + 4) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 24) = 0;
      *(_QWORD *)(a1 + 8) = v11;
      return;
    case '[':
      *(_DWORD *)a1 = 4;
      *(_WORD *)(a1 + 4) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 24) = 0;
      *(_QWORD *)(a1 + 8) = "";
      v7 = 2;
      goto LABEL_6;
    case '{':
      *(_DWORD *)a1 = 3;
      *(_WORD *)(a1 + 4) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 24) = 0;
      *(_QWORD *)(a1 + 8) = "";
      v7 = 1;
LABEL_6:
      *(_DWORD *)a2 = v7;
      ++*(_QWORD *)(a2 + 8);
      return;
  }
  v14 = (minijson::istream_context *)operator new(0x28uLL);
  v16 = (minijson::istream_context **)(a2 + 32);
  v15 = *(_QWORD *)(a2 + 32);
  *((_QWORD *)v14 + 3) = 0;
  *((_QWORD *)v14 + 4) = 0;
  *((_QWORD *)v14 + 1) = a2 + 32;
  *((_QWORD *)v14 + 2) = 0;
  *(_QWORD *)v14 = v15;
  *(_QWORD *)(v15 + 8) = v14;
  *(_QWORD *)(a2 + 32) = v14;
  ++*(_QWORD *)(a2 + 48);
  if (!v6)
    goto LABEL_13;
  while (1)
  {
    minijson::istream_context::write(v14, v6);
LABEL_13:
    v17 = minijson::istream_context::read((minijson::istream_context *)a2);
    v6 = v17;
    if (v17 <= 0x5Cu)
    {
      if (v17 == 44)
        goto LABEL_24;
      if (!(_BYTE)v17)
        goto LABEL_36;
    }
    else if (v17 == 93 || v17 == 125)
    {
      goto LABEL_24;
    }
    if ((v17 & 0x80000000) != 0)
      break;
    if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v17 + 60) & 0x4000) != 0)
      goto LABEL_23;
LABEL_21:
    v14 = *v16;
  }
  if (!__maskrune(v17, 0x4000uLL))
    goto LABEL_21;
LABEL_23:
  if (!v6)
  {
LABEL_36:
    exception = __cxa_allocate_exception(0x18uLL);
    v25 = *(_QWORD *)(a2 + 24);
    v26 = v25 != 0;
    v27 = v25 - 1;
    if (!v26)
      v27 = 0;
    *exception = &off_1E699B850;
    exception[1] = v27;
    *((_DWORD *)exception + 4) = 7;
  }
LABEL_24:
  minijson::istream_context::write(*v16, 0);
  if (*((_QWORD *)*v16 + 2) == *((_QWORD *)*v16 + 3))
    v18 = 0;
  else
    v18 = (char *)*((_QWORD *)*v16 + 2);
  if (!strcmp(v18, "true"))
  {
    v23 = 2;
    v20 = 1;
    v19 = 1.0;
LABEL_33:
    v22 = 1;
    v21 = 1;
    goto LABEL_34;
  }
  v19 = 0.0;
  if (!strcmp(v18, "false"))
  {
    v20 = 0;
    v23 = 2;
    goto LABEL_33;
  }
  if (!strcmp(v18, "null"))
  {
    v20 = 0;
    v22 = 0;
    v21 = 0;
    v23 = 5;
  }
  else
  {
    v20 = minijson::detail::parse_long((minijson::detail *)v18, (const char *)0xA);
    v19 = (double)v20;
    v21 = 1;
    v22 = 1;
    v23 = 1;
  }
LABEL_34:
  *(_DWORD *)a1 = v23;
  *(_BYTE *)(a1 + 4) = v21;
  *(_BYTE *)(a1 + 5) = v22;
  *(_QWORD *)(a1 + 8) = v18;
  *(_QWORD *)(a1 + 16) = v20;
  *(double *)(a1 + 24) = v19;
  *a3 = v6;
  *a4 = 0;
}

void sub_1B5C4D9C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *a10)
{
  const char *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  int *v15;
  int v16;
  void *exception;

  if (a2 != 1)
    _Unwind_Resume(exception_object);
  __cxa_begin_catch(exception_object);
  if (v10)
  {
    v11 = *(unsigned __int8 *)v10;
    if (*v10)
    {
      v12 = 1;
      do
      {
        if ((v11 & 0x80) != 0 || (*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v11 + 60) & 0x400) == 0)
        {
          v13 = v11 - 43;
          if (v13 > 0x3A || ((1 << v13) & 0x40000000400000DLL) == 0)
            goto LABEL_13;
        }
        v11 = v10[v12++];
      }
      while (v11);
      v14 = *__error();
      *__error() = 0;
      a10 = 0;
      strtod(v10, &a10);
      v15 = __error();
      v16 = *v15;
      *v15 = v14;
      if (!*a10 && v16 != 34)
      {
        __cxa_end_catch();
        JUMPOUT(0x1B5C4D908);
      }
    }
  }
LABEL_13:
  exception = __cxa_allocate_exception(1uLL);
}

AMCP::Log::Scope_Registry *AMCP::require_type(AMCP::Log::Scope_Registry *result, int a2)
{
  NSObject *v2;
  _opaque_pthread_t *v3;
  mach_port_t v4;
  void *exception;
  __int128 v6;
  uint64_t v7;
  uint64_t (**v8)();
  __int128 v9;
  uint64_t v10;
  std::string v11;
  std::logic_error v12;
  std::logic_error v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char v19;
  uint8_t buf[8];
  __int16 v21;
  char *v22;
  __int16 v23;
  int v24;
  __int16 v25;
  _BYTE v26[14];
  const char *v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if ((_DWORD)result != a2)
  {
    AMCP::Log::Scope_Registry::get(result);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v2 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      v3 = pthread_self();
      v4 = pthread_mach_thread_np(v3);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v4;
      v21 = 2080;
      v22 = "Graph_Description.cpp";
      v23 = 1024;
      v24 = 482;
      v25 = 2080;
      *(_QWORD *)v26 = "not (value.type() == required_type)";
      _os_log_error_impl(&dword_1B57BA000, v2, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s value does not have expected type", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v19);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"value does not have expected type", (uint64_t)&v11);
    std::logic_error::logic_error(&v12, &v11);
    v12.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v13, &v12);
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = -1;
    v13.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v14 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v13);
    *(_QWORD *)&v26[6] = "void AMCP::require_type(const minijson::value &, minijson::value_type)";
    v27 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_Description.cpp";
    v28 = 482;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v6);
    v9 = v6;
    v10 = v7;
    v6 = 0uLL;
    v7 = 0;
    v8 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v8);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  return result;
}

void sub_1B5C4DD14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,void *a26,uint64_t a27)
{
  void *v27;
  int v28;
  uint64_t v29;
  uint64_t v31;

  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  *(_QWORD *)(v29 - 96) = &unk_1E69A2000;
  v31 = *(_QWORD *)(v29 - 88);
  if (v31 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 32))(v31))
    *(_QWORD *)(v29 - 88) = 0;
  MEMORY[0x1B5E500E8](v29 - 112);
  a26 = &unk_1E69A2000;
  if (a27 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a27 + 32))(a27))
    a27 = 0;
  MEMORY[0x1B5E500E8](&a24);
  MEMORY[0x1B5E500DC](&a22);
  if (a21 < 0)
    operator delete(a16);
  if (v28)
    __cxa_free_exception(v27);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v29 - 113));
  _Unwind_Resume(a1);
}

uint64_t minijson::detail::parse_long(minijson::detail *this, const char *a2)
{
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  int *v7;
  int v8;
  void *exception;
  char *__endptr;

  if (!this)
    goto LABEL_11;
  v3 = *(char *)this;
  if (!v3)
    goto LABEL_11;
  v4 = (int)a2;
  if ((v3 & 0x80000000) != 0)
  {
    if (__maskrune(v3, 0x4000uLL))
      goto LABEL_11;
  }
  else if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v3 + 60) & 0x4000) != 0)
  {
    goto LABEL_11;
  }
  v5 = *__error();
  *__error() = 0;
  __endptr = 0;
  v6 = strtol((const char *)this, &__endptr, v4);
  v7 = __error();
  v8 = *v7;
  *v7 = v5;
  if (*__endptr || v8 == 34 && (unint64_t)(v6 - 0x7FFFFFFFFFFFFFFFLL) <= 1)
  {
LABEL_11:
    exception = __cxa_allocate_exception(1uLL);
  }
  return v6;
}

void minijson::istream_context::write(minijson::istream_context *this, char a2)
{
  unint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  _BYTE *v12;
  char *v13;
  _BYTE *v14;
  char v15;

  v5 = (_BYTE *)*((_QWORD *)this + 3);
  v4 = *((_QWORD *)this + 4);
  if ((unint64_t)v5 >= v4)
  {
    v7 = *((_QWORD *)this + 2);
    v8 = &v5[-v7];
    v9 = (uint64_t)&v5[-v7 + 1];
    if (v9 < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v10 = v4 - v7;
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
      v12 = operator new(v11);
    else
      v12 = 0;
    v13 = &v12[v11];
    v8[(_QWORD)v12] = a2;
    v6 = (uint64_t)&v8[(_QWORD)v12 + 1];
    if (v5 == (_BYTE *)v7)
    {
      v12 = &v8[(_QWORD)v12];
    }
    else
    {
      v14 = &v5[~v7];
      do
      {
        v15 = *--v5;
        (v14--)[(_QWORD)v12] = v15;
      }
      while (v5 != (_BYTE *)v7);
      v5 = (_BYTE *)*((_QWORD *)this + 2);
    }
    *((_QWORD *)this + 2) = v12;
    *((_QWORD *)this + 3) = v6;
    *((_QWORD *)this + 4) = v13;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *v5 = a2;
    v6 = (uint64_t)(v5 + 1);
  }
  *((_QWORD *)this + 3) = v6;
}

void minijson::parse_error::~parse_error(std::exception *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x1B5E50688);
}

const char *minijson::parse_error::what(minijson::parse_error *this)
{
  uint64_t v1;

  v1 = *((unsigned int *)this + 4);
  if (v1 > 0xD)
    return "";
  else
    return off_1E699B888[v1];
}

void AMCP::parse_json<AMCP::Terminal_Description>(uint64_t a1, minijson::istream_context *this)
{
  unint64_t v4;
  unsigned int v5;
  unsigned int v6;
  char v7;
  int v8;
  char *v9;
  uint64_t v10;
  int v11;
  int v12;
  char v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  int v21;
  double end;
  const char *v23;
  int v24;
  int v25;
  char v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  char v33;
  int v34;
  int v35;
  int v36;
  char v37;
  char *size;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unsigned int v48;
  char v49;
  int v50;
  int v51;
  int v52;
  char v53;
  char *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  std::string *value;
  std::string::size_type v64;
  std::string *v65;
  std::string::size_type v66;
  int data;
  uint64_t v68;
  uint64_t v69;
  _QWORD *exception;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  int v74;
  int v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  NSObject *v79;
  _opaque_pthread_t *v80;
  mach_port_t v81;
  void *v82;
  std::runtime_error *v83;
  std::runtime_error *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  std::allocator<std::string> *v93;
  uint64_t v94;
  std::allocator<std::string> *v95;
  std::vector<std::string> *v96;
  std::vector<std::string> *v97;
  char *__s1;
  unsigned int v99;
  char *__s;
  uint64_t v101;
  unsigned __int8 v102;
  char v103;
  std::string __p;
  __int128 v105;
  uint64_t v106;
  uint64_t (**v107)();
  __int128 v108;
  uint64_t v109;
  std::string v110;
  std::logic_error v111;
  std::logic_error v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  char v118;
  std::__split_buffer<std::string> __v;
  std::__compressed_pair_elem<std::allocator<std::string> &, 1, false> *v120;
  std::__compressed_pair_elem<std::allocator<std::string> &, 1, false> *v121;
  std::string v122;
  __int16 v123;
  _BYTE v124[14];
  const char *v125;
  int v126;
  uint64_t v127;

  v127 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_QWORD *)(a1 + 88) = 1;
  *(_BYTE *)(a1 + 96) = 0;
  v4 = *((_QWORD *)this + 1);
  if (v4 >= 0x21)
    goto LABEL_229;
  LOBYTE(v5) = 0;
  v102 = 0;
  v6 = *(unsigned __int8 *)this;
  if (v6 <= 2)
  {
    v7 = 8 * v6;
    v5 = 0x5B7B00u >> v7;
    v102 = 1u >> v7;
  }
  v8 = 0;
  *(_DWORD *)this = 0;
  v9 = (char *)this + 32;
  v93 = (std::allocator<std::string> *)(a1 + 80);
  v96 = (std::vector<std::string> *)(a1 + 64);
  v97 = (std::vector<std::string> *)(a1 + 40);
  v95 = (std::allocator<std::string> *)(a1 + 56);
  v10 = MEMORY[0x1E0C80978];
  __s1 = "";
LABEL_5:
  if (v8 != 6)
  {
    v11 = v102;
    while (*((_QWORD *)this + 1) == v4)
    {
      if (v11)
        LOBYTE(v5) = minijson::istream_context::read(this);
      if ((v5 & 0x80) != 0)
        v12 = __maskrune((char)v5, 0x4000uLL);
      else
        v12 = *(_DWORD *)(v10 + 4 * (char)v5 + 60) & 0x4000;
      v11 = 1;
      if (!v12)
      {
        v102 = 1;
        v103 = v5;
        switch(v8)
        {
          case 0:
            if (v5 != 123)
            {
LABEL_211:
              exception = __cxa_allocate_exception(0x18uLL);
              *exception = &off_1E699B850;
              v85 = *((_QWORD *)this + 3);
              v72 = v85 != 0;
              v73 = v85 - 1;
              if (!v72)
                v73 = 0;
              v74 = 8;
              goto LABEL_203;
            }
            v8 = 1;
            v13 = 44;
            LOBYTE(v5) = 123;
LABEL_195:
            if (!v13)
            {
LABEL_167:
              v84 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v84, "This line should never be reached, please file a bug report");
              __cxa_throw(v84, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            goto LABEL_5;
          case 1:
            if (v5 == 34)
              goto LABEL_31;
            if (v5 == 125)
            {
              v8 = 6;
              v13 = 44;
              goto LABEL_195;
            }
LABEL_220:
            exception = __cxa_allocate_exception(0x18uLL);
            *exception = &off_1E699B850;
            v87 = *((_QWORD *)this + 3);
            v72 = v87 != 0;
            v73 = v87 - 1;
            if (!v72)
              v73 = 0;
            v74 = 1;
            goto LABEL_203;
          case 2:
            if (v5 != 34)
              goto LABEL_220;
LABEL_31:
            v14 = operator new(0x28uLL);
            v14[2] = 0;
            v14[3] = 0;
            v14[4] = 0;
            v15 = *((_QWORD *)this + 4);
            *v14 = v15;
            v14[1] = v9;
            *(_QWORD *)(v15 + 8) = v14;
            *((_QWORD *)this + 4) = v14;
            ++*((_QWORD *)this + 6);
            minijson::detail::read_quoted_string<minijson::istream_context>((minijson::istream_context **)this);
            if (*(_QWORD *)(*(_QWORD *)v9 + 16) == *(_QWORD *)(*(_QWORD *)v9 + 24))
              v16 = 0;
            else
              v16 = *(char **)(*(_QWORD *)v9 + 16);
            __s1 = v16;
            v8 = 3;
            goto LABEL_193;
          case 3:
            if (v5 == 58)
            {
              v8 = 4;
              v13 = 44;
              LOBYTE(v5) = 58;
              goto LABEL_195;
            }
            exception = __cxa_allocate_exception(0x18uLL);
            *exception = &off_1E699B850;
            v88 = *((_QWORD *)this + 3);
            v72 = v88 != 0;
            v73 = v88 - 1;
            if (!v72)
              v73 = 0;
            v74 = 9;
            goto LABEL_203;
          case 4:
            minijson::detail::parse_value_helper<minijson::istream_context>((uint64_t)&v99, (uint64_t)this, &v103, &v102);
            if (!strcmp(__s1, "Format"))
            {
              AMCP::require_type((AMCP::Log::Scope_Registry *)v99, 3);
              v17 = *((_QWORD *)this + 1);
              if (v17 >= 0x21)
              {
                v75 = 12;
                goto LABEL_205;
              }
              LOBYTE(v18) = 0;
              LOBYTE(v107) = 0;
              v19 = *(unsigned __int8 *)this;
              if (v19 <= 2)
              {
                v20 = 8 * v19;
                v18 = 0x5B7B00u >> v20;
                LOBYTE(v107) = 1u >> v20;
              }
              v94 = 0;
              v91 = 0;
              v92 = 0;
              v90 = 0;
              v21 = 0;
              *(_DWORD *)this = 0;
              end = 0.0;
              v23 = "";
              while (v21 != 6)
              {
                v24 = v107;
                do
                {
                  if (*((_QWORD *)this + 1) != v17)
                  {
                    v75 = 11;
                    goto LABEL_205;
                  }
                  if (v24)
                    LOBYTE(v18) = minijson::istream_context::read(this);
                  if ((v18 & 0x80) != 0)
                    v25 = __maskrune((char)v18, 0x4000uLL);
                  else
                    v25 = *(_DWORD *)(v10 + 4 * (char)v18 + 60) & 0x4000;
                  v24 = 1;
                }
                while (v25);
                LOBYTE(v107) = 1;
                v122.__r_.__value_.__s.__data_[0] = v18;
                switch(v21)
                {
                  case 0:
                    if (v18 == 123)
                    {
                      v21 = 1;
                      v26 = 44;
                      LOBYTE(v18) = 123;
                      goto LABEL_89;
                    }
                    v75 = 8;
                    goto LABEL_205;
                  case 1:
                    if (v18 == 34)
                      goto LABEL_71;
                    if (v18 == 125)
                    {
                      v21 = 6;
                      v26 = 44;
                      goto LABEL_89;
                    }
LABEL_214:
                    v75 = 1;
                    goto LABEL_205;
                  case 2:
                    if (v18 != 34)
                      goto LABEL_214;
LABEL_71:
                    v27 = operator new(0x28uLL);
                    v27[2] = 0;
                    v27[3] = 0;
                    v27[4] = 0;
                    v28 = *((_QWORD *)this + 4);
                    *v27 = v28;
                    v27[1] = v9;
                    *(_QWORD *)(v28 + 8) = v27;
                    *((_QWORD *)this + 4) = v27;
                    ++*((_QWORD *)this + 6);
                    minijson::detail::read_quoted_string<minijson::istream_context>((minijson::istream_context **)this);
                    if (*(_QWORD *)(*(_QWORD *)v9 + 16) == *(_QWORD *)(*(_QWORD *)v9 + 24))
                      v23 = 0;
                    else
                      v23 = *(const char **)(*(_QWORD *)v9 + 16);
                    v21 = 3;
                    goto LABEL_87;
                  case 3:
                    if (v18 == 58)
                    {
                      v21 = 4;
                      v26 = 44;
                      LOBYTE(v18) = 58;
                      goto LABEL_89;
                    }
                    v75 = 9;
                    goto LABEL_205;
                  case 4:
                    minijson::detail::parse_value_helper<minijson::istream_context>((uint64_t)&__v, (uint64_t)this, &v122, &v107);
                    if (!strcmp(v23, "SampleRate"))
                    {
                      AMCP::require_type((AMCP::Log::Scope_Registry *)LODWORD(__v.__first_), 1);
                      end = (double)(uint64_t)__v.__end_;
                    }
                    else if (!strcmp(v23, "FormatID"))
                    {
                      AMCP::require_type((AMCP::Log::Scope_Registry *)LODWORD(__v.__first_), 1);
                      HIDWORD(v94) = __v.__end_;
                    }
                    else if (!strcmp(v23, "FormatFlags"))
                    {
                      AMCP::require_type((AMCP::Log::Scope_Registry *)LODWORD(__v.__first_), 1);
                      LODWORD(v94) = __v.__end_;
                    }
                    else if (!strcmp(v23, "BytesPerPacket"))
                    {
                      AMCP::require_type((AMCP::Log::Scope_Registry *)LODWORD(__v.__first_), 1);
                      HIDWORD(v92) = __v.__end_;
                    }
                    else if (!strcmp(v23, "FramesPerPacket"))
                    {
                      AMCP::require_type((AMCP::Log::Scope_Registry *)LODWORD(__v.__first_), 1);
                      LODWORD(v92) = __v.__end_;
                    }
                    else if (!strcmp(v23, "BytesPerFrame"))
                    {
                      AMCP::require_type((AMCP::Log::Scope_Registry *)LODWORD(__v.__first_), 1);
                      HIDWORD(v91) = __v.__end_;
                    }
                    else if (!strcmp(v23, "ChannelsPerFrame"))
                    {
                      AMCP::require_type((AMCP::Log::Scope_Registry *)LODWORD(__v.__first_), 1);
                      LODWORD(v91) = __v.__end_;
                    }
                    else if (!strcmp(v23, "BitsPerChannel"))
                    {
                      AMCP::require_type((AMCP::Log::Scope_Registry *)LODWORD(__v.__first_), 1);
                      v90 = __v.__end_;
                    }
                    v21 = 5;
                    goto LABEL_87;
                  case 5:
                    if (v18 != 44)
                    {
                      if (v18 == 125)
                      {
                        v21 = 6;
                        v26 = 44;
                        LOBYTE(v18) = 125;
                        goto LABEL_89;
                      }
                      v75 = 10;
LABEL_205:
                      v76 = __cxa_allocate_exception(0x18uLL);
                      *v76 = &off_1E699B850;
                      v77 = *((_QWORD *)this + 3);
                      v72 = v77 != 0;
                      v78 = v77 - 1;
                      if (!v72)
                        v78 = 0;
                      v76[1] = v78;
                      *((_DWORD *)v76 + 4) = v75;
                    }
                    v21 = 2;
LABEL_88:
                    v26 = v18;
LABEL_89:
                    if (!v26)
                    {
                      v83 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                      std::runtime_error::runtime_error(v83, "This line should never be reached, please file a bug report");
                      __cxa_throw(v83, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                    }
                    return;
                  default:
LABEL_87:
                    LOBYTE(v18) = v122.__r_.__value_.__s.__data_[0];
                    goto LABEL_88;
                }
              }
              v29 = *((_QWORD *)this + 1);
              if (v29)
                *((_QWORD *)this + 1) = v29 - 1;
              *(double *)a1 = end;
              *(_DWORD *)(a1 + 8) = HIDWORD(v94);
              *(_DWORD *)(a1 + 12) = v94;
              *(_DWORD *)(a1 + 16) = HIDWORD(v92);
              *(_DWORD *)(a1 + 20) = v92;
              *(_DWORD *)(a1 + 24) = HIDWORD(v91);
              *(_DWORD *)(a1 + 28) = v91;
              v8 = 5;
              *(_QWORD *)(a1 + 32) = v90;
              goto LABEL_193;
            }
            if (!strcmp(__s1, "PublishTags"))
            {
              AMCP::require_type((AMCP::Log::Scope_Registry *)v99, 4);
              v30 = *((_QWORD *)this + 1);
              if (v30 < 0x21)
              {
                LOBYTE(v31) = 0;
                v110.__r_.__value_.__s.__data_[0] = 0;
                v32 = *(unsigned __int8 *)this;
                if (v32 <= 2)
                {
                  v33 = 8 * v32;
                  LODWORD(v31) = 0x5B7B00u >> v33;
                  v110.__r_.__value_.__s.__data_[0] = 1u >> v33;
                }
                v34 = 0;
                *(_DWORD *)this = 0;
                while (2)
                {
                  if (v34 != 4)
                  {
                    v35 = v110.__r_.__value_.__s.__data_[0];
                    do
                    {
                      if (*((_QWORD *)this + 1) != v30)
                        goto LABEL_200;
                      if (v35)
                        LOBYTE(v31) = minijson::istream_context::read(this);
                      if ((v31 & 0x80) != 0)
                        v36 = __maskrune((char)v31, 0x4000uLL);
                      else
                        v36 = *(_DWORD *)(v10 + 4 * (char)v31 + 60) & 0x4000;
                      v35 = 1;
                    }
                    while (v36);
                    v110.__r_.__value_.__s.__data_[0] = 1;
                    LOBYTE(v107) = v31;
                    switch(v34)
                    {
                      case 0:
                        if (v31 != 91)
                          goto LABEL_211;
                        v34 = 1;
                        v37 = 44;
                        LOBYTE(v31) = 91;
                        goto LABEL_129;
                      case 1:
                        if (v31 != 93)
                          goto LABEL_111;
                        goto LABEL_115;
                      case 2:
LABEL_111:
                        minijson::detail::parse_value_helper<minijson::istream_context>((uint64_t)&v122, (uint64_t)this, &v107, &v110);
                        AMCP::require_type((AMCP::Log::Scope_Registry *)LODWORD(v122.__r_.__value_.__l.__data_), 0);
                        size = (char *)v122.__r_.__value_.__l.__size_;
                        v40 = *(_QWORD *)(a1 + 48);
                        v39 = *(_QWORD *)(a1 + 56);
                        if (v40 >= v39)
                        {
                          v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v40 - (unint64_t)v97->__begin_) >> 3);
                          v42 = v41 + 1;
                          if (v41 + 1 > 0xAAAAAAAAAAAAAAALL)
                            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                          v43 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v39 - (unint64_t)v97->__begin_) >> 3);
                          if (2 * v43 > v42)
                            v42 = 2 * v43;
                          if (v43 >= 0x555555555555555)
                            v44 = 0xAAAAAAAAAAAAAAALL;
                          else
                            v44 = v42;
                          __v.__end_cap_.__value_ = v95;
                          if (v44)
                            v44 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v44);
                          else
                            v45 = 0;
                          __v.__first_ = (std::__split_buffer<std::string>::pointer)v44;
                          __v.__begin_ = (std::__split_buffer<std::string>::pointer)(v44 + 24 * v41);
                          __v.__end_ = __v.__begin_;
                          __v.__end_cap_.__value_ = (std::string *)(v44 + 24 * v45);
                          std::string::basic_string[abi:ne180100]<0>(__v.__begin_->__r_.__value_.__r.__words, size);
                          ++__v.__end_;
                          std::vector<std::string>::__swap_out_circular_buffer(v97, &__v);
                          v31 = *(_QWORD *)(a1 + 48);
                          std::__split_buffer<std::string>::~__split_buffer(&__v);
                        }
                        else
                        {
                          std::string::basic_string[abi:ne180100]<0>(*(_QWORD **)(a1 + 48), (char *)v122.__r_.__value_.__l.__size_);
                          v31 = v40 + 24;
                          *(_QWORD *)(a1 + 48) = v40 + 24;
                        }
                        *(_QWORD *)(a1 + 48) = v31;
                        v34 = 3;
                        LOBYTE(v31) = (_BYTE)v107;
                        goto LABEL_128;
                      case 3:
                        if (v31 == 44)
                        {
                          v34 = 2;
LABEL_128:
                          v37 = v31;
                        }
                        else
                        {
                          if (v31 != 93)
                            goto LABEL_215;
LABEL_115:
                          v34 = 4;
                          v37 = 44;
                          LOBYTE(v31) = 93;
                        }
LABEL_129:
                        if (!v37)
                          goto LABEL_167;
                        continue;
                      default:
                        goto LABEL_128;
                    }
                  }
                  goto LABEL_168;
                }
              }
            }
            else
            {
              if (strcmp(__s1, "SubscribeToTags"))
              {
                if (!strcmp(__s1, "SourceMixPolicy"))
                {
                  AMCP::require_type((AMCP::Log::Scope_Registry *)v99, 0);
                  std::string::basic_string[abi:ne180100]<0>(&__p, __s);
                  AMCP::get_enum_string_bimap<AMCP::Terminal_Source_Mix_Policy>();
                  __v.__begin_ = (std::__split_buffer<std::string>::pointer)&__v.__end_cap_.std::__compressed_pair_elem<std::allocator<std::string> &, 1, false>;
                  boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Terminal_Source_Mix_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Terminal_Source_Mix_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Terminal_Source_Mix_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container((uint64_t)&__v.__end_);
                  v120 = &__v.__end_cap_.std::__compressed_pair_elem<std::allocator<std::string> &, 1, false>;
                  v121 = &__v.__end_cap_.std::__compressed_pair_elem<std::allocator<std::string> &, 1, false>;
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                    std::string::__init_copy_ctor_external(&v122, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
                  else
                    v122 = __p;
                  value = __v.__end_cap_.__value_;
                  v64 = __v.__end_cap_.__value_[2].__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFFELL;
                  if (v64)
                  {
                    v65 = __v.__end_cap_.__value_;
                    do
                    {
                      while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(v64 - 48), &v122) & 0x80) != 0)
                      {
                        v64 = *(_QWORD *)(v64 + 16);
                        if (!v64)
                          goto LABEL_181;
                      }
                      v65 = (std::string *)(v64 - 56);
                      v64 = *(_QWORD *)(v64 + 8);
                    }
                    while (v64);
LABEL_181:
                    if (v65 != value
                      && (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v122, &v65->__r_.__value_.__l.__size_) & 0x80u) == 0)
                    {
                      value = v65;
                    }
                  }
                  if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v122.__r_.__value_.__l.__data_);
                  if ((std::string *)v121[-1].__value_ == value)
                  {
                    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)&__v.__end_cap_.std::__compressed_pair_elem<std::allocator<std::string> &, 1, false>);
                    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v122, "com.apple.coreaudio", "AMCP");
                    v79 = *(NSObject **)v122.__r_.__value_.__l.__data_;
                    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v122);
                    if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
                    {
                      v80 = pthread_self();
                      v81 = pthread_mach_thread_np(v80);
                      LODWORD(v122.__r_.__value_.__l.__data_) = 67109890;
                      HIDWORD(v122.__r_.__value_.__r.__words[0]) = v81;
                      LOWORD(v122.__r_.__value_.__r.__words[1]) = 2080;
                      *(std::string::size_type *)((char *)&v122.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Graph_Description_Internal.h";
                      WORD1(v122.__r_.__value_.__r.__words[2]) = 1024;
                      HIDWORD(v122.__r_.__value_.__r.__words[2]) = 53;
                      v123 = 2080;
                      *(_QWORD *)v124 = "not (found != map.right.end())";
                      _os_log_error_impl(&dword_1B57BA000, v79, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&v122, 0x22u);
                    }
                    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v118);
                    v82 = __cxa_allocate_exception(0x40uLL);
                    caulk::make_string((caulk *)"", (uint64_t)&v110);
                    std::logic_error::logic_error(&v111, &v110);
                    v111.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
                    std::logic_error::logic_error(&v112, &v111);
                    v114 = 0;
                    v115 = 0;
                    v116 = 0;
                    v117 = -1;
                    v112.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
                    v113 = &unk_1E69A1230;
                    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v122, (uint64_t)&v112);
                    *(_QWORD *)&v124[6] = "T AMCP::string_to_enum(const std::string &) [T = AMCP::Terminal_Source_Mix_Policy]";
                    v125 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_Description_Internal.h";
                    v126 = 53;
                    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v105);
                    v108 = v105;
                    v109 = v106;
                    v105 = 0uLL;
                    v106 = 0;
                    v107 = off_1E69A20A0;
                    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&v122, (uint64_t)&v107);
                    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v82, (uint64_t)&v122);
                  }
                  v66 = __v.__end_cap_.__value_[2].__r_.__value_.__l.__size_;
                  data = (int)value->__r_.__value_.__l.__data_;
                  if ((v66 & 0xFFFFFFFFFFFFFFFELL) != 0)
                    v68 = (v66 & 0xFFFFFFFFFFFFFFFELL) - 56;
                  else
                    v68 = 0;
                  boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>,std::string,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>::right>,std::less<std::string>,boost::multi_index::detail::nth_layer<1,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::right,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::delete_all_nodes((uint64_t)&__v.__end_cap_.std::__compressed_pair_elem<std::allocator<std::string> &, 1, false>, v68);
                  operator delete(__v.__end_cap_.__value_);
                  *(_DWORD *)(a1 + 88) = data;
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__p.__r_.__value_.__l.__data_);
                }
                else if (!strcmp(__s1, "LatencyAdjustment"))
                {
                  AMCP::require_type((AMCP::Log::Scope_Registry *)v99, 1);
                  *(_DWORD *)(a1 + 92) = v101;
                }
                else if (!strcmp(__s1, "EnableFileWriter"))
                {
                  AMCP::require_type((AMCP::Log::Scope_Registry *)v99, 2);
                  *(_BYTE *)(a1 + 96) = v101 != 0;
                }
                v8 = 5;
                goto LABEL_193;
              }
              AMCP::require_type((AMCP::Log::Scope_Registry *)v99, 4);
              v46 = *((_QWORD *)this + 1);
              if (v46 < 0x21)
              {
                LOBYTE(v47) = 0;
                v110.__r_.__value_.__s.__data_[0] = 0;
                v48 = *(unsigned __int8 *)this;
                if (v48 <= 2)
                {
                  v49 = 8 * v48;
                  LODWORD(v47) = 0x5B7B00u >> v49;
                  v110.__r_.__value_.__s.__data_[0] = 1u >> v49;
                }
                v50 = 0;
                *(_DWORD *)this = 0;
                while (2)
                {
                  if (v50 != 4)
                  {
                    v51 = v110.__r_.__value_.__s.__data_[0];
                    do
                    {
                      if (*((_QWORD *)this + 1) != v46)
                        goto LABEL_200;
                      if (v51)
                        LOBYTE(v47) = minijson::istream_context::read(this);
                      if ((v47 & 0x80) != 0)
                        v52 = __maskrune((char)v47, 0x4000uLL);
                      else
                        v52 = *(_DWORD *)(v10 + 4 * (char)v47 + 60) & 0x4000;
                      v51 = 1;
                    }
                    while (v52);
                    v110.__r_.__value_.__s.__data_[0] = 1;
                    LOBYTE(v107) = v47;
                    switch(v50)
                    {
                      case 0:
                        if (v47 != 91)
                          goto LABEL_211;
                        v50 = 1;
                        v53 = 44;
                        LOBYTE(v47) = 91;
                        goto LABEL_166;
                      case 1:
                        if (v47 != 93)
                          goto LABEL_148;
                        goto LABEL_152;
                      case 2:
LABEL_148:
                        minijson::detail::parse_value_helper<minijson::istream_context>((uint64_t)&v122, (uint64_t)this, &v107, &v110);
                        AMCP::require_type((AMCP::Log::Scope_Registry *)LODWORD(v122.__r_.__value_.__l.__data_), 0);
                        v54 = (char *)v122.__r_.__value_.__l.__size_;
                        v56 = *(_QWORD *)(a1 + 72);
                        v55 = *(_QWORD *)(a1 + 80);
                        if (v56 >= v55)
                        {
                          v57 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v56 - (unint64_t)v96->__begin_) >> 3);
                          v58 = v57 + 1;
                          if (v57 + 1 > 0xAAAAAAAAAAAAAAALL)
                            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                          v59 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v55 - (unint64_t)v96->__begin_) >> 3);
                          if (2 * v59 > v58)
                            v58 = 2 * v59;
                          if (v59 >= 0x555555555555555)
                            v60 = 0xAAAAAAAAAAAAAAALL;
                          else
                            v60 = v58;
                          __v.__end_cap_.__value_ = v93;
                          if (v60)
                            v60 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v60);
                          else
                            v61 = 0;
                          __v.__first_ = (std::__split_buffer<std::string>::pointer)v60;
                          __v.__begin_ = (std::__split_buffer<std::string>::pointer)(v60 + 24 * v57);
                          __v.__end_ = __v.__begin_;
                          __v.__end_cap_.__value_ = (std::string *)(v60 + 24 * v61);
                          std::string::basic_string[abi:ne180100]<0>(__v.__begin_->__r_.__value_.__r.__words, v54);
                          ++__v.__end_;
                          std::vector<std::string>::__swap_out_circular_buffer(v96, &__v);
                          v47 = *(_QWORD *)(a1 + 72);
                          std::__split_buffer<std::string>::~__split_buffer(&__v);
                        }
                        else
                        {
                          std::string::basic_string[abi:ne180100]<0>(*(_QWORD **)(a1 + 72), (char *)v122.__r_.__value_.__l.__size_);
                          v47 = v56 + 24;
                          *(_QWORD *)(a1 + 72) = v56 + 24;
                        }
                        *(_QWORD *)(a1 + 72) = v47;
                        v50 = 3;
                        LOBYTE(v47) = (_BYTE)v107;
                        goto LABEL_165;
                      case 3:
                        if (v47 == 44)
                        {
                          v50 = 2;
LABEL_165:
                          v53 = v47;
                        }
                        else
                        {
                          if (v47 != 93)
                            goto LABEL_215;
LABEL_152:
                          v50 = 4;
                          v53 = 44;
                          LOBYTE(v47) = 93;
                        }
LABEL_166:
                        if (!v53)
                          goto LABEL_167;
                        continue;
                      default:
                        goto LABEL_165;
                    }
                  }
                  break;
                }
LABEL_168:
                v62 = *((_QWORD *)this + 1);
                if (v62)
                  *((_QWORD *)this + 1) = v62 - 1;
                v8 = 5;
LABEL_193:
                LOBYTE(v5) = v103;
                goto LABEL_194;
              }
            }
            break;
          case 5:
            if (v5 == 44)
            {
              v8 = 2;
LABEL_194:
              v13 = v5;
              goto LABEL_195;
            }
            if (v5 == 125)
            {
              v8 = 6;
              v13 = 44;
              LOBYTE(v5) = 125;
              goto LABEL_195;
            }
LABEL_215:
            exception = __cxa_allocate_exception(0x18uLL);
            *exception = &off_1E699B850;
            v86 = *((_QWORD *)this + 3);
            v72 = v86 != 0;
            v73 = v86 - 1;
            if (!v72)
              v73 = 0;
            v74 = 10;
            goto LABEL_203;
          default:
            goto LABEL_193;
        }
LABEL_229:
        exception = __cxa_allocate_exception(0x18uLL);
        *exception = &off_1E699B850;
        v89 = *((_QWORD *)this + 3);
        v72 = v89 != 0;
        v73 = v89 - 1;
        if (!v72)
          v73 = 0;
        v74 = 12;
LABEL_203:
        exception[1] = v73;
        *((_DWORD *)exception + 4) = v74;
      }
    }
LABEL_200:
    exception = __cxa_allocate_exception(0x18uLL);
    *exception = &off_1E699B850;
    v71 = *((_QWORD *)this + 3);
    v72 = v71 != 0;
    v73 = v71 - 1;
    if (!v72)
      v73 = 0;
    v74 = 11;
    goto LABEL_203;
  }
  v69 = *((_QWORD *)this + 1);
  if (v69)
    *((_QWORD *)this + 1) = v69 - 1;
}

void sub_1B5C4F094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  uint64_t v57;
  uint64_t i;

  boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::~multi_index_container(a10);
  if (a31 < 0)
    operator delete(__p);
  for (i = 64; i != 16; i -= 24)
  {
    a47 = v57 + i;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a47);
  }
  _Unwind_Resume(a1);
}

std::vector<std::string>::pointer std::vector<std::string>::__emplace_back_slow_path<char const*>(std::vector<std::string> *a1, char **a2)
{
  unint64_t v2;
  unint64_t v3;
  std::allocator<std::string> *p_end_cap;
  unint64_t v7;
  uint64_t v8;
  std::vector<std::string>::pointer end;
  std::__split_buffer<std::string> __v;

  v2 = 0xAAAAAAAAAAAAAAABLL * (((char *)a1->__end_ - (char *)a1->__begin_) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  p_end_cap = (std::allocator<std::string> *)&a1->__end_cap_;
  if (0x5555555555555556 * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3) > v3)
    v3 = 0x5555555555555556 * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3) >= 0x555555555555555)
    v7 = 0xAAAAAAAAAAAAAAALL;
  else
    v7 = v3;
  __v.__end_cap_.__value_ = p_end_cap;
  if (v7)
    v7 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7);
  else
    v8 = 0;
  __v.__first_ = (std::__split_buffer<std::string>::pointer)v7;
  __v.__begin_ = (std::__split_buffer<std::string>::pointer)(v7 + 24 * v2);
  __v.__end_ = __v.__begin_;
  __v.__end_cap_.__value_ = (std::string *)(v7 + 24 * v8);
  std::string::basic_string[abi:ne180100]<0>(__v.__begin_->__r_.__value_.__r.__words, *a2);
  __v.__end_ = __v.__begin_ + 1;
  std::vector<std::string>::__swap_out_circular_buffer(a1, &__v);
  end = a1->__end_;
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return end;
}

void sub_1B5C4F330(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void AMCP::parse_json<AMCP::Terminal_Identifier>(uint64_t a1, minijson::istream_context *this)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;
  char v6;
  int v7;
  char *v8;
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  int *v18;
  unint64_t v19;
  int *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *exception;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  NSObject *v31;
  _opaque_pthread_t *v32;
  mach_port_t v33;
  void *v34;
  uint64_t v35;
  std::runtime_error *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *__s1;
  unsigned int v42;
  std::string::value_type *__s;
  uint64_t v44;
  __int16 v45;
  std::string __p;
  __int128 v47;
  uint64_t v48;
  uint64_t (**v49)();
  __int128 v50;
  uint64_t v51;
  std::string v52;
  std::logic_error v53;
  std::logic_error v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  char v60;
  _QWORD *v61;
  uint64_t v62;
  int *v63;
  _QWORD v64[3];
  _QWORD *v65;
  std::string v66;
  __int16 v67;
  _BYTE v68[14];
  const char *v69;
  int v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v3 = *((_QWORD *)this + 1);
  if (v3 >= 0x21)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *exception = &off_1E699B850;
    v39 = *((_QWORD *)this + 3);
    v27 = v39 != 0;
    v28 = v39 - 1;
    if (!v27)
      v28 = 0;
    v29 = 12;
LABEL_71:
    exception[1] = v28;
    *((_DWORD *)exception + 4) = v29;
  }
  LOBYTE(v4) = 0;
  v45 = 0;
  v5 = *(unsigned __int8 *)this;
  if (v5 <= 2)
  {
    v6 = 8 * v5;
    v4 = 0x5B7B00u >> v6;
    HIBYTE(v45) = 0x5B7B00u >> v6;
    LOBYTE(v45) = 1u >> v6;
  }
  v7 = 0;
  *(_DWORD *)this = 0;
  v8 = (char *)this + 32;
  __s1 = "";
  v9 = MEMORY[0x1E0C80978];
  v10 = v4;
  v11 = v4;
  v12 = v4;
  do
  {
LABEL_5:
    if (*((_QWORD *)this + 1) != v3)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *exception = &off_1E699B850;
      v35 = *((_QWORD *)this + 3);
      v27 = v35 != 0;
      v28 = v35 - 1;
      if (!v27)
        v28 = 0;
      v29 = 11;
      goto LABEL_71;
    }
    if ((_BYTE)v45)
    {
      LOBYTE(v4) = minijson::istream_context::read(this);
      HIBYTE(v45) = v4;
      v10 = v4;
      v11 = v4;
      v12 = v4;
    }
    LOBYTE(v45) = 1;
    if (v12 < 0)
      v13 = __maskrune(v12, 0x4000uLL);
    else
      v13 = *(_DWORD *)(v9 + 4 * v12 + 60) & 0x4000;
  }
  while (v13);
  switch(v7)
  {
    case 0:
      if (v4 != 123)
      {
        exception = __cxa_allocate_exception(0x18uLL);
        *exception = &off_1E699B850;
        v37 = *((_QWORD *)this + 3);
        v27 = v37 != 0;
        v28 = v37 - 1;
        if (!v27)
          v28 = 0;
        v29 = 8;
        goto LABEL_71;
      }
      v7 = 1;
      LOBYTE(v4) = 123;
      v10 = 123;
      v11 = 123;
      v12 = 123;
      goto LABEL_5;
    case 1:
      if (v4 == 34)
        goto LABEL_25;
      if (v4 == 125)
        goto LABEL_54;
LABEL_58:
      exception = __cxa_allocate_exception(0x18uLL);
      *exception = &off_1E699B850;
      v26 = *((_QWORD *)this + 3);
      v27 = v26 != 0;
      v28 = v26 - 1;
      if (!v27)
        v28 = 0;
      v29 = 1;
      goto LABEL_71;
    case 2:
      if (v4 != 34)
        goto LABEL_58;
LABEL_25:
      v15 = operator new(0x28uLL);
      v15[2] = 0;
      v15[3] = 0;
      v15[4] = 0;
      v16 = *((_QWORD *)this + 4);
      *v15 = v16;
      v15[1] = v8;
      *(_QWORD *)(v16 + 8) = v15;
      *((_QWORD *)this + 4) = v15;
      ++*((_QWORD *)this + 6);
      minijson::detail::read_quoted_string<minijson::istream_context>((minijson::istream_context **)this);
      if (*(_QWORD *)(*(_QWORD *)v8 + 16) == *(_QWORD *)(*(_QWORD *)v8 + 24))
        v17 = 0;
      else
        v17 = *(char **)(*(_QWORD *)v8 + 16);
      __s1 = v17;
      v7 = 3;
      goto LABEL_52;
    case 3:
      if (v10 != 58)
      {
        exception = __cxa_allocate_exception(0x18uLL);
        *exception = &off_1E699B850;
        v38 = *((_QWORD *)this + 3);
        v27 = v38 != 0;
        v28 = v38 - 1;
        if (!v27)
          v28 = 0;
        v29 = 9;
        goto LABEL_71;
      }
      v7 = 4;
      v10 = 58;
      v11 = 58;
      v12 = 58;
      goto LABEL_5;
    case 4:
      minijson::detail::parse_value_helper<minijson::istream_context>((uint64_t)&v42, (uint64_t)this, (_BYTE *)&v45 + 1, &v45);
      if (!strcmp(__s1, "node"))
      {
        AMCP::require_type((AMCP::Log::Scope_Registry *)v42, 0);
        std::string::__assign_external((std::string *)a1, __s);
        goto LABEL_51;
      }
      if (!strcmp(__s1, "terminal_index"))
      {
        AMCP::require_type((AMCP::Log::Scope_Registry *)v42, 1);
        *(_QWORD *)(a1 + 24) = v44;
        goto LABEL_51;
      }
      if (strcmp(__s1, "wire_direction"))
        goto LABEL_51;
      AMCP::require_type((AMCP::Log::Scope_Registry *)v42, 0);
      std::string::basic_string[abi:ne180100]<0>(&__p, __s);
      AMCP::get_enum_string_bimap<AMCP::Direction>();
      v61 = v64;
      v14 = boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container((uint64_t)&v62);
      v64[2] = v64;
      v65 = v64;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v66, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      else
        v66 = __p;
      v18 = v63;
      v19 = *((_QWORD *)v63 + 7) & 0xFFFFFFFFFFFFFFFELL;
      if (!v19)
        goto LABEL_43;
      v20 = v63;
      do
      {
        while (1)
        {
          v14 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(v19 - 48), &v66);
          if ((v14 & 0x80) == 0)
            break;
          v19 = *(_QWORD *)(v19 + 16);
          if (!v19)
            goto LABEL_40;
        }
        v20 = (int *)(v19 - 56);
        v19 = *(_QWORD *)(v19 + 8);
      }
      while (v19);
LABEL_40:
      if (v20 != v18)
      {
        v14 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v66, (_QWORD *)v20 + 1);
        if ((v14 & 0x80u) == 0)
          v18 = v20;
      }
LABEL_43:
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v66.__r_.__value_.__l.__data_);
      if ((int *)*(v65 - 1) == v18)
      {
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v14);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v66, "com.apple.coreaudio", "AMCP");
        v31 = *(NSObject **)v66.__r_.__value_.__l.__data_;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v66);
        if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
        {
          v32 = pthread_self();
          v33 = pthread_mach_thread_np(v32);
          LODWORD(v66.__r_.__value_.__l.__data_) = 67109890;
          HIDWORD(v66.__r_.__value_.__r.__words[0]) = v33;
          LOWORD(v66.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&v66.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Graph_Description_Internal.h";
          WORD1(v66.__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(v66.__r_.__value_.__r.__words[2]) = 53;
          v67 = 2080;
          *(_QWORD *)v68 = "not (found != map.right.end())";
          _os_log_error_impl(&dword_1B57BA000, v31, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&v66, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v60);
        v34 = __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"", (uint64_t)&v52);
        std::logic_error::logic_error(&v53, &v52);
        v53.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
        std::logic_error::logic_error(&v54, &v53);
        v56 = 0;
        v57 = 0;
        v58 = 0;
        v59 = -1;
        v54.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
        v55 = &unk_1E69A1230;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v66, (uint64_t)&v54);
        *(_QWORD *)&v68[6] = "T AMCP::string_to_enum(const std::string &) [T = AMCP::Direction]";
        v69 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_Description_Internal.h";
        v70 = 53;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v47);
        v50 = v47;
        v51 = v48;
        v47 = 0uLL;
        v48 = 0;
        v49 = off_1E69A20A0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&v66, (uint64_t)&v49);
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v34, (uint64_t)&v66);
      }
      v21 = *((_QWORD *)v63 + 7);
      v22 = *v18;
      if ((v21 & 0xFFFFFFFFFFFFFFFELL) != 0)
        v23 = (v21 & 0xFFFFFFFFFFFFFFFELL) - 56;
      else
        v23 = 0;
      boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>,std::string,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>::right>,std::less<std::string>,boost::multi_index::detail::nth_layer<1,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::right,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::delete_all_nodes((uint64_t)v64, v23);
      operator delete(v63);
      *(_DWORD *)(a1 + 32) = v22;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
LABEL_51:
      v7 = 5;
LABEL_52:
      LOBYTE(v4) = HIBYTE(v45);
      v10 = HIBYTE(v45);
      v11 = HIBYTE(v45);
      v12 = HIBYTE(v45);
      if (!HIBYTE(v45))
      {
        v36 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v36, "This line should never be reached, please file a bug report");
        __cxa_throw(v36, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      goto LABEL_5;
    case 5:
      if (v11 == 44)
      {
        v7 = 2;
        v12 = v11;
        goto LABEL_5;
      }
      if (v11 != 125)
      {
        exception = __cxa_allocate_exception(0x18uLL);
        *exception = &off_1E699B850;
        v30 = *((_QWORD *)this + 3);
        v27 = v30 != 0;
        v28 = v30 - 1;
        if (!v27)
          v28 = 0;
        v29 = 10;
        goto LABEL_71;
      }
LABEL_54:
      v24 = *((_QWORD *)this + 1);
      if (v24)
        *((_QWORD *)this + 1) = v24 - 1;
      return;
    default:
      goto LABEL_52;
  }
}

void sub_1B5C4FA58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::~multi_index_container(a9);
  if (a23 < 0)
    operator delete(__p);
  if (*(char *)(a11 + 23) < 0)
    operator delete(*(void **)a11);
  _Unwind_Resume(a1);
}

void AMCP::parse_json<AMCP::Wire_Description>(uint64_t a1, minijson::istream_context *a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  std::string::size_type v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  char v12;
  int v13;
  _QWORD *v14;
  const char *v15;
  uint64_t v16;
  int v17;
  int v18;
  char v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  int v24;
  int v25;
  int v26;
  char v27;
  std::string *v28;
  std::vector<std::string>::pointer v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  _DWORD *v35;
  unsigned int v36;
  char v37;
  int v38;
  int v39;
  int v40;
  char v41;
  int v42;
  unint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  BOOL v49;
  unint64_t v50;
  uint64_t v51;
  _DWORD *v52;
  int v53;
  unint64_t v54;
  _DWORD *v55;
  unsigned int v56;
  char v57;
  int v58;
  int v59;
  int v60;
  char v61;
  int v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  _DWORD *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int *v77;
  unint64_t v78;
  int *v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  int *v84;
  unint64_t v85;
  int *v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  int *v91;
  unint64_t v92;
  int *v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  _QWORD *v97;
  int *v98;
  unint64_t v99;
  int *v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  _QWORD *v104;
  int *v105;
  unint64_t v106;
  int *v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  NSObject *v116;
  _opaque_pthread_t *v117;
  mach_port_t v118;
  void *v119;
  uint64_t v120;
  NSObject *v121;
  _opaque_pthread_t *v122;
  mach_port_t v123;
  void *v124;
  uint64_t v125;
  NSObject *v126;
  _opaque_pthread_t *v127;
  mach_port_t v128;
  void *v129;
  uint64_t v130;
  NSObject *v131;
  _opaque_pthread_t *v132;
  mach_port_t v133;
  void *v134;
  uint64_t v135;
  NSObject *v136;
  _opaque_pthread_t *v137;
  mach_port_t v138;
  void *v139;
  uint64_t v140;
  std::runtime_error *exception;
  void **v142;
  void **v143;
  uint64_t v144;
  __int128 v145;
  uint64_t v146;
  __int128 v147;
  unsigned int v148;
  char *__s;
  uint64_t v150;
  unsigned __int8 v151;
  char v152;
  std::string __p;
  __int128 v154;
  uint64_t v155;
  uint64_t (**v156)();
  __int128 v157;
  uint64_t v158;
  std::string v159;
  std::logic_error v160;
  std::logic_error v161;
  void *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  char v167;
  std::string v168;
  __int16 v169;
  _BYTE v170[14];
  const char *v171;
  int v172;
  __int128 v173;
  uint64_t v174;
  _QWORD *v175;
  _DWORD v176[4];
  _DWORD *v177;
  int **v178;
  uint64_t v179;

  v179 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(&v146, "");
  std::string::basic_string[abi:ne180100]<0>(&v144, "");
  *(_QWORD *)&v173 = v147;
  *(_QWORD *)((char *)&v173 + 7) = *(_QWORD *)((char *)&v147 + 7);
  v4 = HIBYTE(v147);
  v147 = 0uLL;
  v5 = v173;
  *(_QWORD *)a1 = v146;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 15) = *(_QWORD *)((char *)&v173 + 7);
  *(_BYTE *)(a1 + 23) = v4;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  v6 = v144;
  *(std::string::size_type *)((char *)v168.__r_.__value_.__r.__words + 7) = *(_QWORD *)((char *)&v145 + 7);
  v168.__r_.__value_.__r.__words[0] = v145;
  v7 = HIBYTE(v145);
  v144 = 0;
  v145 = 0uLL;
  v146 = 0;
  *(_QWORD *)(a1 + 40) = v6;
  v142 = (void **)(a1 + 40);
  v8 = v168.__r_.__value_.__r.__words[0];
  *(_QWORD *)(a1 + 55) = *(std::string::size_type *)((char *)v168.__r_.__value_.__r.__words + 7);
  *(_QWORD *)(a1 + 48) = v8;
  *(_BYTE *)(a1 + 63) = v7;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 1;
  *(_OWORD *)(a1 + 80) = 0u;
  v143 = (void **)(a1 + 80);
  *(_OWORD *)(a1 + 124) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 140) = xmmword_1B5D68B90;
  *(_DWORD *)(a1 + 156) = 64;
  *(_BYTE *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  v9 = *((_QWORD *)a2 + 1);
  if (v9 > 0x20)
    goto LABEL_299;
  LOBYTE(v10) = 0;
  v151 = 0;
  v11 = *(unsigned __int8 *)a2;
  if (v11 <= 2)
  {
    v12 = 8 * v11;
    v10 = 0x5B7B00u >> v12;
    v151 = 1u >> v12;
  }
  v13 = 0;
  *(_DWORD *)a2 = 0;
  v14 = (_QWORD *)((char *)a2 + 32);
  v15 = "";
  v16 = MEMORY[0x1E0C80978];
  while (2)
  {
    if (v13 != 6)
    {
      v17 = v151;
      do
      {
        if (*((_QWORD *)a2 + 1) != v9)
        {
LABEL_275:
          v112 = 11;
          goto LABEL_276;
        }
        if (v17)
          LOBYTE(v10) = minijson::istream_context::read(a2);
        if ((v10 & 0x80) != 0)
          v18 = __maskrune((char)v10, 0x4000uLL);
        else
          v18 = *(_DWORD *)(v16 + 4 * (char)v10 + 60) & 0x4000;
        v17 = 1;
      }
      while (v18);
      v151 = 1;
      v152 = v10;
      switch(v13)
      {
        case 0:
          if (v10 != 123)
          {
LABEL_294:
            v112 = 8;
            goto LABEL_276;
          }
          v13 = 1;
          v19 = 44;
          LOBYTE(v10) = 123;
LABEL_269:
          if (!v19)
          {
LABEL_58:
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "This line should never be reached, please file a bug report");
            __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          continue;
        case 1:
          if (v10 == 34)
            goto LABEL_66;
          if (v10 == 125)
          {
            v13 = 6;
            v19 = 44;
            goto LABEL_269;
          }
LABEL_295:
          v112 = 1;
          goto LABEL_276;
        case 2:
          if (v10 != 34)
            goto LABEL_295;
LABEL_66:
          v30 = operator new(0x28uLL);
          v30[2] = 0;
          v30[3] = 0;
          v30[4] = 0;
          v31 = *((_QWORD *)a2 + 4);
          *v30 = v31;
          v30[1] = v14;
          *(_QWORD *)(v31 + 8) = v30;
          *((_QWORD *)a2 + 4) = v30;
          ++*((_QWORD *)a2 + 6);
          minijson::detail::read_quoted_string<minijson::istream_context>((minijson::istream_context **)a2);
          if (*(_QWORD *)(*v14 + 16) == *(_QWORD *)(*v14 + 24))
            v15 = 0;
          else
            v15 = *(const char **)(*v14 + 16);
          v13 = 3;
          goto LABEL_267;
        case 3:
          if (v10 == 58)
          {
            v13 = 4;
            v19 = 44;
            LOBYTE(v10) = 58;
            goto LABEL_269;
          }
          v112 = 9;
          goto LABEL_276;
        case 4:
          minijson::detail::parse_value_helper<minijson::istream_context>((uint64_t)&v148, (uint64_t)a2, &v152, &v151);
          if (!strcmp(v15, "Source"))
          {
            AMCP::require_type((AMCP::Log::Scope_Registry *)v148, 3);
            AMCP::parse_json<AMCP::Terminal_Identifier>((uint64_t)&v173, a2);
            if (*(char *)(a1 + 23) < 0)
              operator delete(*(void **)a1);
            *(_OWORD *)a1 = v173;
            *(_QWORD *)(a1 + 16) = v174;
            v32 = a1 + 24;
            v33 = v175;
          }
          else
          {
            if (strcmp(v15, "Destination"))
            {
              if (!strcmp(v15, "ChannelMap"))
              {
                AMCP::require_type((AMCP::Log::Scope_Registry *)v148, 4);
                v34 = *((_QWORD *)a2 + 1);
                if (v34 <= 0x20)
                {
                  LOBYTE(v35) = 0;
                  LOBYTE(v161.__vftable) = 0;
                  v36 = *(unsigned __int8 *)a2;
                  if (v36 <= 2)
                  {
                    v37 = 8 * v36;
                    LODWORD(v35) = 0x5B7B00u >> v37;
                    LOBYTE(v161.__vftable) = 1u >> v37;
                  }
                  v38 = 0;
                  *(_DWORD *)a2 = 0;
                  while (2)
                  {
                    if (v38 != 4)
                    {
                      v39 = LOBYTE(v161.__vftable);
                      do
                      {
                        if (*((_QWORD *)a2 + 1) != v34)
                          goto LABEL_275;
                        if (v39)
                          LOBYTE(v35) = minijson::istream_context::read(a2);
                        if ((v35 & 0x80) != 0)
                          v40 = __maskrune((char)v35, 0x4000uLL);
                        else
                          v40 = *(_DWORD *)(v16 + 4 * (char)v35 + 60) & 0x4000;
                        v39 = 1;
                      }
                      while (v40);
                      LOBYTE(v161.__vftable) = 1;
                      v168.__r_.__value_.__s.__data_[0] = (char)v35;
                      switch(v38)
                      {
                        case 0:
                          if (v35 != 91)
                            goto LABEL_294;
                          v38 = 1;
                          v41 = 44;
                          LOBYTE(v35) = 91;
                          goto LABEL_120;
                        case 1:
                          if (v35 != 93)
                            goto LABEL_99;
                          goto LABEL_103;
                        case 2:
LABEL_99:
                          minijson::detail::parse_value_helper<minijson::istream_context>((uint64_t)&v173, (uint64_t)a2, &v168, &v161);
                          AMCP::require_type((AMCP::Log::Scope_Registry *)v173, 1);
                          v42 = v174;
                          v44 = *(char **)(a1 + 88);
                          v43 = *(_QWORD *)(a1 + 96);
                          if ((unint64_t)v44 >= v43)
                          {
                            v45 = (char *)*v143;
                            v46 = (v44 - (_BYTE *)*v143) >> 2;
                            v47 = v46 + 1;
                            if ((unint64_t)(v46 + 1) >> 62)
                              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                            v48 = v43 - (_QWORD)v45;
                            if (v48 >> 1 > v47)
                              v47 = v48 >> 1;
                            v49 = (unint64_t)v48 >= 0x7FFFFFFFFFFFFFFCLL;
                            v50 = 0x3FFFFFFFFFFFFFFFLL;
                            if (!v49)
                              v50 = v47;
                            if (v50)
                            {
                              v50 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v50);
                              v45 = *(char **)(a1 + 80);
                              v44 = *(char **)(a1 + 88);
                            }
                            else
                            {
                              v51 = 0;
                            }
                            v52 = (_DWORD *)(v50 + 4 * v46);
                            *v52 = v42;
                            v35 = v52 + 1;
                            while (v44 != v45)
                            {
                              v53 = *((_DWORD *)v44 - 1);
                              v44 -= 4;
                              *--v52 = v53;
                            }
                            *(_QWORD *)(a1 + 80) = v52;
                            *(_QWORD *)(a1 + 88) = v35;
                            *(_QWORD *)(a1 + 96) = v50 + 4 * v51;
                            if (v45)
                              operator delete(v45);
                          }
                          else
                          {
                            *(_DWORD *)v44 = v174;
                            v35 = v44 + 4;
                          }
                          *(_QWORD *)(a1 + 88) = v35;
                          v38 = 3;
                          LOBYTE(v35) = v168.__r_.__value_.__s.__data_[0];
                          goto LABEL_119;
                        case 3:
                          if (v35 == 44)
                          {
                            v38 = 2;
LABEL_119:
                            v41 = (char)v35;
                          }
                          else
                          {
                            if (v35 != 93)
                              goto LABEL_296;
LABEL_103:
                            v38 = 4;
                            v41 = 44;
                            LOBYTE(v35) = 93;
                          }
LABEL_120:
                          if (!v41)
                            goto LABEL_58;
                          continue;
                        default:
                          goto LABEL_119;
                      }
                    }
                    goto LABEL_162;
                  }
                }
                goto LABEL_299;
              }
              if (!strcmp(v15, "MonoMixMap"))
              {
                AMCP::require_type((AMCP::Log::Scope_Registry *)v148, 4);
                v54 = *((_QWORD *)a2 + 1);
                if (v54 <= 0x20)
                {
                  LOBYTE(v55) = 0;
                  LOBYTE(v161.__vftable) = 0;
                  v56 = *(unsigned __int8 *)a2;
                  if (v56 <= 2)
                  {
                    v57 = 8 * v56;
                    LODWORD(v55) = 0x5B7B00u >> v57;
                    LOBYTE(v161.__vftable) = 1u >> v57;
                  }
                  v58 = 0;
                  *(_DWORD *)a2 = 0;
                  while (2)
                  {
                    if (v58 != 4)
                    {
                      v59 = LOBYTE(v161.__vftable);
                      do
                      {
                        if (*((_QWORD *)a2 + 1) != v54)
                          goto LABEL_275;
                        if (v59)
                          LOBYTE(v55) = minijson::istream_context::read(a2);
                        if ((v55 & 0x80) != 0)
                          v60 = __maskrune((char)v55, 0x4000uLL);
                        else
                          v60 = *(_DWORD *)(v16 + 4 * (char)v55 + 60) & 0x4000;
                        v59 = 1;
                      }
                      while (v60);
                      LOBYTE(v161.__vftable) = 1;
                      v168.__r_.__value_.__s.__data_[0] = (char)v55;
                      switch(v58)
                      {
                        case 0:
                          if (v55 != 91)
                            goto LABEL_294;
                          v58 = 1;
                          v61 = 44;
                          LOBYTE(v55) = 91;
                          goto LABEL_160;
                        case 1:
                          if (v55 != 93)
                            goto LABEL_139;
                          goto LABEL_143;
                        case 2:
LABEL_139:
                          minijson::detail::parse_value_helper<minijson::istream_context>((uint64_t)&v173, (uint64_t)a2, &v168, &v161);
                          AMCP::require_type((AMCP::Log::Scope_Registry *)v173, 1);
                          v62 = v174;
                          v64 = *(char **)(a1 + 112);
                          v63 = *(_QWORD *)(a1 + 120);
                          if ((unint64_t)v64 >= v63)
                          {
                            v65 = *(char **)(a1 + 104);
                            v66 = (v64 - v65) >> 2;
                            v67 = v66 + 1;
                            if ((unint64_t)(v66 + 1) >> 62)
                              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                            v68 = v63 - (_QWORD)v65;
                            if (v68 >> 1 > v67)
                              v67 = v68 >> 1;
                            v49 = (unint64_t)v68 >= 0x7FFFFFFFFFFFFFFCLL;
                            v69 = 0x3FFFFFFFFFFFFFFFLL;
                            if (!v49)
                              v69 = v67;
                            if (v69)
                            {
                              v69 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v69);
                              v65 = *(char **)(a1 + 104);
                              v64 = *(char **)(a1 + 112);
                            }
                            else
                            {
                              v70 = 0;
                            }
                            v71 = (_DWORD *)(v69 + 4 * v66);
                            *v71 = v62;
                            v55 = v71 + 1;
                            while (v64 != v65)
                            {
                              v72 = *((_DWORD *)v64 - 1);
                              v64 -= 4;
                              *--v71 = v72;
                            }
                            *(_QWORD *)(a1 + 104) = v71;
                            *(_QWORD *)(a1 + 112) = v55;
                            *(_QWORD *)(a1 + 120) = v69 + 4 * v70;
                            if (v65)
                              operator delete(v65);
                          }
                          else
                          {
                            *(_DWORD *)v64 = v174;
                            v55 = v64 + 4;
                          }
                          *(_QWORD *)(a1 + 112) = v55;
                          v58 = 3;
                          LOBYTE(v55) = v168.__r_.__value_.__s.__data_[0];
                          goto LABEL_159;
                        case 3:
                          if (v55 == 44)
                          {
                            v58 = 2;
LABEL_159:
                            v61 = (char)v55;
                          }
                          else
                          {
                            if (v55 != 93)
                              goto LABEL_296;
LABEL_143:
                            v58 = 4;
                            v61 = 44;
                            LOBYTE(v55) = 93;
                          }
LABEL_160:
                          if (!v61)
                            goto LABEL_58;
                          continue;
                        default:
                          goto LABEL_159;
                      }
                    }
                    goto LABEL_162;
                  }
                }
LABEL_299:
                v112 = 12;
LABEL_276:
                v113 = __cxa_allocate_exception(0x18uLL);
                *v113 = &off_1E699B850;
                v114 = *((_QWORD *)a2 + 3);
                v49 = v114 != 0;
                v115 = v114 - 1;
                if (!v49)
                  v115 = 0;
                v113[1] = v115;
                *((_DWORD *)v113 + 4) = v112;
              }
              if (!strcmp(v15, "LatencyAdjustment"))
              {
                AMCP::require_type((AMCP::Log::Scope_Registry *)v148, 1);
                *(_DWORD *)(a1 + 128) = v150;
                goto LABEL_81;
              }
              if (!strcmp(v15, "ConnectionPolicy"))
              {
                AMCP::require_type((AMCP::Log::Scope_Registry *)v148, 0);
                std::string::basic_string[abi:ne180100]<0>(&__p, __s);
                AMCP::get_enum_string_bimap<AMCP::Wire_Connection_Policy>();
                *((_QWORD *)&v173 + 1) = v176;
                v74 = boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Connection_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Wire_Connection_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Connection_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container((uint64_t)&v174);
                v177 = v176;
                v178 = (int **)v176;
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  std::string::__init_copy_ctor_external(&v168, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
                else
                  v168 = __p;
                v77 = (int *)v175;
                v78 = v175[7] & 0xFFFFFFFFFFFFFFFELL;
                if (v78)
                {
                  v79 = (int *)v175;
                  do
                  {
                    while (1)
                    {
                      v74 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(v78 - 48), &v168);
                      if ((v74 & 0x80) == 0)
                        break;
                      v78 = *(_QWORD *)(v78 + 16);
                      if (!v78)
                        goto LABEL_178;
                    }
                    v79 = (int *)(v78 - 56);
                    v78 = *(_QWORD *)(v78 + 8);
                  }
                  while (v78);
LABEL_178:
                  if (v79 != v77)
                  {
                    v74 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v168, (_QWORD *)v79 + 1);
                    if ((v74 & 0x80u) == 0)
                      v77 = v79;
                  }
                }
                if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v168.__r_.__value_.__l.__data_);
                if (*(v178 - 1) == v77)
                {
                  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v74);
                  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v168, "com.apple.coreaudio", "AMCP");
                  v116 = *(NSObject **)v168.__r_.__value_.__l.__data_;
                  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v168);
                  if (os_log_type_enabled(v116, OS_LOG_TYPE_ERROR))
                  {
                    v117 = pthread_self();
                    v118 = pthread_mach_thread_np(v117);
                    LODWORD(v168.__r_.__value_.__l.__data_) = 67109890;
                    HIDWORD(v168.__r_.__value_.__r.__words[0]) = v118;
                    LOWORD(v168.__r_.__value_.__r.__words[1]) = 2080;
                    *(std::string::size_type *)((char *)&v168.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Graph_Description_Internal.h";
                    WORD1(v168.__r_.__value_.__r.__words[2]) = 1024;
                    HIDWORD(v168.__r_.__value_.__r.__words[2]) = 53;
                    v169 = 2080;
                    *(_QWORD *)v170 = "not (found != map.right.end())";
                    _os_log_error_impl(&dword_1B57BA000, v116, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&v168, 0x22u);
                  }
                  AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v167);
                  v119 = __cxa_allocate_exception(0x40uLL);
                  caulk::make_string((caulk *)"", (uint64_t)&v159);
                  std::logic_error::logic_error(&v160, &v159);
                  v160.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
                  std::logic_error::logic_error(&v161, &v160);
                  v163 = 0;
                  v164 = 0;
                  v165 = 0;
                  v166 = -1;
                  v161.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
                  v162 = &unk_1E69A1230;
                  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v168, (uint64_t)&v161);
                  *(_QWORD *)&v170[6] = "T AMCP::string_to_enum(const std::string &) [T = AMCP::Wire_Connection_Policy]";
                  v171 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_Description_Internal.h";
                  v172 = 53;
                  applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v154);
                  v157 = v154;
                  v120 = v155;
                  v155 = 0;
                  v156 = off_1E69A20A0;
                  v158 = v120;
                  v154 = 0uLL;
                  boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&v168, (uint64_t)&v156);
                  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v119, (uint64_t)&v168);
                }
                v80 = v175[7];
                v81 = *v77;
                if ((v80 & 0xFFFFFFFFFFFFFFFELL) != 0)
                  v82 = (v80 & 0xFFFFFFFFFFFFFFFELL) - 56;
                else
                  v82 = 0;
                boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>,std::string,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>::right>,std::less<std::string>,boost::multi_index::detail::nth_layer<1,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::right,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::delete_all_nodes((uint64_t)v176, v82);
                operator delete(v175);
                *(_DWORD *)(a1 + 132) = v81;
              }
              else if (!strcmp(v15, "ResamplerPolicy"))
              {
                AMCP::require_type((AMCP::Log::Scope_Registry *)v148, 0);
                std::string::basic_string[abi:ne180100]<0>(&__p, __s);
                AMCP::get_enum_string_bimap<AMCP::Wire_Resampler_Policy>();
                *((_QWORD *)&v173 + 1) = v176;
                v75 = boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Resampler_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Wire_Resampler_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Resampler_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container((uint64_t)&v174);
                v177 = v176;
                v178 = (int **)v176;
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  std::string::__init_copy_ctor_external(&v168, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
                else
                  v168 = __p;
                v84 = (int *)v175;
                v85 = v175[7] & 0xFFFFFFFFFFFFFFFELL;
                if (v85)
                {
                  v86 = (int *)v175;
                  do
                  {
                    while (1)
                    {
                      v75 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(v85 - 48), &v168);
                      if ((v75 & 0x80) == 0)
                        break;
                      v85 = *(_QWORD *)(v85 + 16);
                      if (!v85)
                        goto LABEL_197;
                    }
                    v86 = (int *)(v85 - 56);
                    v85 = *(_QWORD *)(v85 + 8);
                  }
                  while (v85);
LABEL_197:
                  if (v86 != v84)
                  {
                    v75 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v168, (_QWORD *)v86 + 1);
                    if ((v75 & 0x80u) == 0)
                      v84 = v86;
                  }
                }
                if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v168.__r_.__value_.__l.__data_);
                if (*(v178 - 1) == v84)
                {
                  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v75);
                  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v168, "com.apple.coreaudio", "AMCP");
                  v121 = *(NSObject **)v168.__r_.__value_.__l.__data_;
                  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v168);
                  if (os_log_type_enabled(v121, OS_LOG_TYPE_ERROR))
                  {
                    v122 = pthread_self();
                    v123 = pthread_mach_thread_np(v122);
                    LODWORD(v168.__r_.__value_.__l.__data_) = 67109890;
                    HIDWORD(v168.__r_.__value_.__r.__words[0]) = v123;
                    LOWORD(v168.__r_.__value_.__r.__words[1]) = 2080;
                    *(std::string::size_type *)((char *)&v168.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Graph_Description_Internal.h";
                    WORD1(v168.__r_.__value_.__r.__words[2]) = 1024;
                    HIDWORD(v168.__r_.__value_.__r.__words[2]) = 53;
                    v169 = 2080;
                    *(_QWORD *)v170 = "not (found != map.right.end())";
                    _os_log_error_impl(&dword_1B57BA000, v121, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&v168, 0x22u);
                  }
                  AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v167);
                  v124 = __cxa_allocate_exception(0x40uLL);
                  caulk::make_string((caulk *)"", (uint64_t)&v159);
                  std::logic_error::logic_error(&v160, &v159);
                  v160.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
                  std::logic_error::logic_error(&v161, &v160);
                  v163 = 0;
                  v164 = 0;
                  v165 = 0;
                  v166 = -1;
                  v161.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
                  v162 = &unk_1E69A1230;
                  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v168, (uint64_t)&v161);
                  *(_QWORD *)&v170[6] = "T AMCP::string_to_enum(const std::string &) [T = AMCP::Wire_Resampler_Policy]";
                  v171 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_Description_Internal.h";
                  v172 = 53;
                  applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v154);
                  v157 = v154;
                  v125 = v155;
                  v155 = 0;
                  v156 = off_1E69A20A0;
                  v158 = v125;
                  v154 = 0uLL;
                  boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&v168, (uint64_t)&v156);
                  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v124, (uint64_t)&v168);
                }
                v87 = v175[7];
                v88 = *v84;
                if ((v87 & 0xFFFFFFFFFFFFFFFELL) != 0)
                  v89 = (v87 & 0xFFFFFFFFFFFFFFFELL) - 56;
                else
                  v89 = 0;
                boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>,std::string,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>::right>,std::less<std::string>,boost::multi_index::detail::nth_layer<1,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::right,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::delete_all_nodes((uint64_t)v176, v89);
                operator delete(v175);
                *(_DWORD *)(a1 + 136) = v88;
              }
              else if (!strcmp(v15, "FormatConversionPolicy"))
              {
                AMCP::require_type((AMCP::Log::Scope_Registry *)v148, 0);
                std::string::basic_string[abi:ne180100]<0>(&__p, __s);
                AMCP::get_enum_string_bimap<AMCP::Wire_Format_Conversion_Policy>();
                *((_QWORD *)&v173 + 1) = v176;
                v76 = boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Format_Conversion_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Wire_Format_Conversion_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Format_Conversion_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container((uint64_t)&v174);
                v177 = v176;
                v178 = (int **)v176;
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  std::string::__init_copy_ctor_external(&v168, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
                else
                  v168 = __p;
                v91 = (int *)v175;
                v92 = v175[7] & 0xFFFFFFFFFFFFFFFELL;
                if (v92)
                {
                  v93 = (int *)v175;
                  do
                  {
                    while (1)
                    {
                      v76 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(v92 - 48), &v168);
                      if ((v76 & 0x80) == 0)
                        break;
                      v92 = *(_QWORD *)(v92 + 16);
                      if (!v92)
                        goto LABEL_216;
                    }
                    v93 = (int *)(v92 - 56);
                    v92 = *(_QWORD *)(v92 + 8);
                  }
                  while (v92);
LABEL_216:
                  if (v93 != v91)
                  {
                    v76 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v168, (_QWORD *)v93 + 1);
                    if ((v76 & 0x80u) == 0)
                      v91 = v93;
                  }
                }
                if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v168.__r_.__value_.__l.__data_);
                if (*(v178 - 1) == v91)
                {
                  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v76);
                  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v168, "com.apple.coreaudio", "AMCP");
                  v126 = *(NSObject **)v168.__r_.__value_.__l.__data_;
                  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v168);
                  if (os_log_type_enabled(v126, OS_LOG_TYPE_ERROR))
                  {
                    v127 = pthread_self();
                    v128 = pthread_mach_thread_np(v127);
                    LODWORD(v168.__r_.__value_.__l.__data_) = 67109890;
                    HIDWORD(v168.__r_.__value_.__r.__words[0]) = v128;
                    LOWORD(v168.__r_.__value_.__r.__words[1]) = 2080;
                    *(std::string::size_type *)((char *)&v168.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Graph_Description_Internal.h";
                    WORD1(v168.__r_.__value_.__r.__words[2]) = 1024;
                    HIDWORD(v168.__r_.__value_.__r.__words[2]) = 53;
                    v169 = 2080;
                    *(_QWORD *)v170 = "not (found != map.right.end())";
                    _os_log_error_impl(&dword_1B57BA000, v126, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&v168, 0x22u);
                  }
                  AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v167);
                  v129 = __cxa_allocate_exception(0x40uLL);
                  caulk::make_string((caulk *)"", (uint64_t)&v159);
                  std::logic_error::logic_error(&v160, &v159);
                  v160.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
                  std::logic_error::logic_error(&v161, &v160);
                  v163 = 0;
                  v164 = 0;
                  v165 = 0;
                  v166 = -1;
                  v161.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
                  v162 = &unk_1E69A1230;
                  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v168, (uint64_t)&v161);
                  *(_QWORD *)&v170[6] = "T AMCP::string_to_enum(const std::string &) [T = AMCP::Wire_Format_Conversion_Policy]";
                  v171 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_Description_Internal.h";
                  v172 = 53;
                  applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v154);
                  v157 = v154;
                  v130 = v155;
                  v155 = 0;
                  v156 = off_1E69A20A0;
                  v158 = v130;
                  v154 = 0uLL;
                  boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&v168, (uint64_t)&v156);
                  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v129, (uint64_t)&v168);
                }
                v94 = v175[7];
                v95 = *v91;
                if ((v94 & 0xFFFFFFFFFFFFFFFELL) != 0)
                  v96 = (v94 & 0xFFFFFFFFFFFFFFFELL) - 56;
                else
                  v96 = 0;
                boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>,std::string,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>::right>,std::less<std::string>,boost::multi_index::detail::nth_layer<1,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::right,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::delete_all_nodes((uint64_t)v176, v96);
                operator delete(v175);
                *(_DWORD *)(a1 + 140) = v95;
              }
              else if (!strcmp(v15, "DriftCorrectionPolicy"))
              {
                AMCP::require_type((AMCP::Log::Scope_Registry *)v148, 0);
                std::string::basic_string[abi:ne180100]<0>(&__p, __s);
                AMCP::get_enum_string_bimap<AMCP::Wire_Drift_Correction_Policy>();
                *((_QWORD *)&v173 + 1) = v176;
                v83 = boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Drift_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Wire_Drift_Correction_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Drift_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container((uint64_t)&v174);
                v177 = v176;
                v178 = (int **)v176;
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  std::string::__init_copy_ctor_external(&v168, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
                else
                  v168 = __p;
                v98 = (int *)v175;
                v99 = v175[7] & 0xFFFFFFFFFFFFFFFELL;
                if (v99)
                {
                  v100 = (int *)v175;
                  do
                  {
                    while (1)
                    {
                      v83 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(v99 - 48), &v168);
                      if ((v83 & 0x80) == 0)
                        break;
                      v99 = *(_QWORD *)(v99 + 16);
                      if (!v99)
                        goto LABEL_234;
                    }
                    v100 = (int *)(v99 - 56);
                    v99 = *(_QWORD *)(v99 + 8);
                  }
                  while (v99);
LABEL_234:
                  if (v100 != v98)
                  {
                    v83 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v168, (_QWORD *)v100 + 1);
                    if ((v83 & 0x80u) == 0)
                      v98 = v100;
                  }
                }
                if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v168.__r_.__value_.__l.__data_);
                if (*(v178 - 1) == v98)
                {
                  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v83);
                  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v168, "com.apple.coreaudio", "AMCP");
                  v131 = *(NSObject **)v168.__r_.__value_.__l.__data_;
                  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v168);
                  if (os_log_type_enabled(v131, OS_LOG_TYPE_ERROR))
                  {
                    v132 = pthread_self();
                    v133 = pthread_mach_thread_np(v132);
                    LODWORD(v168.__r_.__value_.__l.__data_) = 67109890;
                    HIDWORD(v168.__r_.__value_.__r.__words[0]) = v133;
                    LOWORD(v168.__r_.__value_.__r.__words[1]) = 2080;
                    *(std::string::size_type *)((char *)&v168.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Graph_Description_Internal.h";
                    WORD1(v168.__r_.__value_.__r.__words[2]) = 1024;
                    HIDWORD(v168.__r_.__value_.__r.__words[2]) = 53;
                    v169 = 2080;
                    *(_QWORD *)v170 = "not (found != map.right.end())";
                    _os_log_error_impl(&dword_1B57BA000, v131, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&v168, 0x22u);
                  }
                  AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v167);
                  v134 = __cxa_allocate_exception(0x40uLL);
                  caulk::make_string((caulk *)"", (uint64_t)&v159);
                  std::logic_error::logic_error(&v160, &v159);
                  v160.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
                  std::logic_error::logic_error(&v161, &v160);
                  v163 = 0;
                  v164 = 0;
                  v165 = 0;
                  v166 = -1;
                  v161.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
                  v162 = &unk_1E69A1230;
                  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v168, (uint64_t)&v161);
                  *(_QWORD *)&v170[6] = "T AMCP::string_to_enum(const std::string &) [T = AMCP::Wire_Drift_Correction_Policy]";
                  v171 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_Description_Internal.h";
                  v172 = 53;
                  applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v154);
                  v157 = v154;
                  v135 = v155;
                  v155 = 0;
                  v156 = off_1E69A20A0;
                  v158 = v135;
                  v154 = 0uLL;
                  boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&v168, (uint64_t)&v156);
                  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v134, (uint64_t)&v168);
                }
                v101 = v175[7];
                v102 = *v98;
                if ((v101 & 0xFFFFFFFFFFFFFFFELL) != 0)
                  v103 = (v101 & 0xFFFFFFFFFFFFFFFELL) - 56;
                else
                  v103 = 0;
                boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>,std::string,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>::right>,std::less<std::string>,boost::multi_index::detail::nth_layer<1,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::right,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::delete_all_nodes((uint64_t)v176, v103);
                operator delete(v175);
                *(_DWORD *)(a1 + 144) = v102;
              }
              else
              {
                if (strcmp(v15, "LatencyCorrectionPolicy"))
                {
                  if (!strcmp(v15, "ResamplerType"))
                  {
                    AMCP::require_type((AMCP::Log::Scope_Registry *)v148, 0);
                    v97 = std::string::basic_string[abi:ne180100]<0>(&v173, __s);
                    *(_DWORD *)(a1 + 152) = AMCP::string_to_enum<AMCP::Resampler_Type>((uint64_t)v97);
                  }
                  else
                  {
                    if (strcmp(v15, "ResamplerQuality"))
                    {
                      if (!strcmp(v15, "VolumeProcessingEnabled"))
                      {
                        AMCP::require_type((AMCP::Log::Scope_Registry *)v148, 0);
                        *(_BYTE *)(a1 + 160) = v150 != 0;
                      }
                      else if (!strcmp(v15, "MatchedTags"))
                      {
                        AMCP::require_type((AMCP::Log::Scope_Registry *)v148, 4);
                        v20 = *((_QWORD *)a2 + 1);
                        if (v20 <= 0x20)
                        {
                          LOBYTE(v21) = 0;
                          LOBYTE(v156) = 0;
                          v22 = *(unsigned __int8 *)a2;
                          if (v22 <= 2)
                          {
                            v23 = 8 * v22;
                            v21 = 0x5B7B00u >> v23;
                            LOBYTE(v156) = 1u >> v23;
                          }
                          v24 = 0;
                          *(_DWORD *)a2 = 0;
                          while (2)
                          {
                            if (v24 != 4)
                            {
                              v25 = v156;
                              do
                              {
                                if (*((_QWORD *)a2 + 1) != v20)
                                  goto LABEL_275;
                                if (v25)
                                  LOBYTE(v21) = minijson::istream_context::read(a2);
                                if ((v21 & 0x80) != 0)
                                  v26 = __maskrune((char)v21, 0x4000uLL);
                                else
                                  v26 = *(_DWORD *)(v16 + 4 * (char)v21 + 60) & 0x4000;
                                v25 = 1;
                              }
                              while (v26);
                              LOBYTE(v156) = 1;
                              LOBYTE(v161.__vftable) = v21;
                              switch(v24)
                              {
                                case 0:
                                  if (v21 != 91)
                                    goto LABEL_294;
                                  v24 = 1;
                                  v27 = 44;
                                  LOBYTE(v21) = 91;
                                  goto LABEL_57;
                                case 1:
                                  if (v21 != 93)
                                    goto LABEL_48;
                                  goto LABEL_52;
                                case 2:
LABEL_48:
                                  minijson::detail::parse_value_helper<minijson::istream_context>((uint64_t)&v173, (uint64_t)a2, &v161, &v156);
                                  AMCP::require_type((AMCP::Log::Scope_Registry *)v173, 0);
                                  v168.__r_.__value_.__r.__words[0] = *((_QWORD *)&v173 + 1);
                                  v28 = *(std::string **)(a1 + 176);
                                  if ((unint64_t)v28 >= *(_QWORD *)(a1 + 184))
                                  {
                                    v29 = std::vector<std::string>::__emplace_back_slow_path<char const*>((std::vector<std::string> *)(a1 + 168), &v168.__r_.__value_.__l.__data_);
                                  }
                                  else
                                  {
                                    std::string::basic_string[abi:ne180100]<0>(*(_QWORD **)(a1 + 176), *((char **)&v173 + 1));
                                    v29 = v28 + 1;
                                    *(_QWORD *)(a1 + 176) = v28 + 1;
                                  }
                                  *(_QWORD *)(a1 + 176) = v29;
                                  v24 = 3;
                                  LOBYTE(v21) = v161.__vftable;
                                  goto LABEL_56;
                                case 3:
                                  if (v21 == 44)
                                  {
                                    v24 = 2;
LABEL_56:
                                    v27 = v21;
                                  }
                                  else
                                  {
                                    if (v21 != 93)
                                      goto LABEL_296;
LABEL_52:
                                    v24 = 4;
                                    v27 = 44;
                                    LOBYTE(v21) = 93;
                                  }
LABEL_57:
                                  if (!v27)
                                    goto LABEL_58;
                                  continue;
                                default:
                                  goto LABEL_56;
                              }
                            }
                            break;
                          }
LABEL_162:
                          v73 = *((_QWORD *)a2 + 1);
                          if (v73)
                            *((_QWORD *)a2 + 1) = v73 - 1;
LABEL_266:
                          v13 = 5;
                          goto LABEL_267;
                        }
                        goto LABEL_299;
                      }
LABEL_81:
                      v13 = 5;
LABEL_267:
                      LOBYTE(v10) = v152;
                      goto LABEL_268;
                    }
                    AMCP::require_type((AMCP::Log::Scope_Registry *)v148, 0);
                    v104 = std::string::basic_string[abi:ne180100]<0>(&v173, __s);
                    *(_DWORD *)(a1 + 156) = AMCP::string_to_enum<AMCP::Resampler_Quality>((uint64_t)v104);
                  }
                  if (SHIBYTE(v174) < 0)
                    operator delete((void *)v173);
                  goto LABEL_81;
                }
                AMCP::require_type((AMCP::Log::Scope_Registry *)v148, 0);
                std::string::basic_string[abi:ne180100]<0>(&__p, __s);
                AMCP::get_enum_string_bimap<AMCP::Wire_Latency_Correction_Policy>();
                *((_QWORD *)&v173 + 1) = v176;
                v90 = boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Latency_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Wire_Latency_Correction_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Latency_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container((uint64_t)&v174);
                v177 = v176;
                v178 = (int **)v176;
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  std::string::__init_copy_ctor_external(&v168, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
                else
                  v168 = __p;
                v105 = (int *)v175;
                v106 = v175[7] & 0xFFFFFFFFFFFFFFFELL;
                if (v106)
                {
                  v107 = (int *)v175;
                  do
                  {
                    while (1)
                    {
                      v90 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(v106 - 48), &v168);
                      if ((v90 & 0x80) == 0)
                        break;
                      v106 = *(_QWORD *)(v106 + 16);
                      if (!v106)
                        goto LABEL_254;
                    }
                    v107 = (int *)(v106 - 56);
                    v106 = *(_QWORD *)(v106 + 8);
                  }
                  while (v106);
LABEL_254:
                  if (v107 != v105)
                  {
                    v90 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v168, (_QWORD *)v107 + 1);
                    if ((v90 & 0x80u) == 0)
                      v105 = v107;
                  }
                }
                if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v168.__r_.__value_.__l.__data_);
                if (*(v178 - 1) == v105)
                {
                  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v90);
                  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v168, "com.apple.coreaudio", "AMCP");
                  v136 = *(NSObject **)v168.__r_.__value_.__l.__data_;
                  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v168);
                  if (os_log_type_enabled(v136, OS_LOG_TYPE_ERROR))
                  {
                    v137 = pthread_self();
                    v138 = pthread_mach_thread_np(v137);
                    LODWORD(v168.__r_.__value_.__l.__data_) = 67109890;
                    HIDWORD(v168.__r_.__value_.__r.__words[0]) = v138;
                    LOWORD(v168.__r_.__value_.__r.__words[1]) = 2080;
                    *(std::string::size_type *)((char *)&v168.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Graph_Description_Internal.h";
                    WORD1(v168.__r_.__value_.__r.__words[2]) = 1024;
                    HIDWORD(v168.__r_.__value_.__r.__words[2]) = 53;
                    v169 = 2080;
                    *(_QWORD *)v170 = "not (found != map.right.end())";
                    _os_log_error_impl(&dword_1B57BA000, v136, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&v168, 0x22u);
                  }
                  AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v167);
                  v139 = __cxa_allocate_exception(0x40uLL);
                  caulk::make_string((caulk *)"", (uint64_t)&v159);
                  std::logic_error::logic_error(&v160, &v159);
                  v160.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
                  std::logic_error::logic_error(&v161, &v160);
                  v163 = 0;
                  v164 = 0;
                  v165 = 0;
                  v166 = -1;
                  v161.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
                  v162 = &unk_1E69A1230;
                  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v168, (uint64_t)&v161);
                  *(_QWORD *)&v170[6] = "T AMCP::string_to_enum(const std::string &) [T = AMCP::Wire_Latency_Correction_Policy]";
                  v171 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_Description_Internal.h";
                  v172 = 53;
                  applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v154);
                  v157 = v154;
                  v140 = v155;
                  v155 = 0;
                  v156 = off_1E69A20A0;
                  v158 = v140;
                  v154 = 0uLL;
                  boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&v168, (uint64_t)&v156);
                  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v139, (uint64_t)&v168);
                }
                v108 = v175[7];
                v109 = *v105;
                if ((v108 & 0xFFFFFFFFFFFFFFFELL) != 0)
                  v110 = (v108 & 0xFFFFFFFFFFFFFFFELL) - 56;
                else
                  v110 = 0;
                boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>,std::string,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>::right>,std::less<std::string>,boost::multi_index::detail::nth_layer<1,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::right,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::delete_all_nodes((uint64_t)v176, v110);
                operator delete(v175);
                *(_DWORD *)(a1 + 148) = v109;
              }
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              goto LABEL_266;
            }
            AMCP::require_type((AMCP::Log::Scope_Registry *)v148, 3);
            AMCP::parse_json<AMCP::Terminal_Identifier>((uint64_t)&v173, a2);
            if (*(char *)(a1 + 63) < 0)
              operator delete(*v142);
            *(_OWORD *)v142 = v173;
            *(_QWORD *)(a1 + 56) = v174;
            v33 = v175;
            v32 = a1 + 64;
          }
          *(_QWORD *)v32 = v33;
          *(_DWORD *)(v32 + 8) = v176[0];
          goto LABEL_81;
        case 5:
          if (v10 == 44)
          {
            v13 = 2;
LABEL_268:
            v19 = v10;
            goto LABEL_269;
          }
          if (v10 == 125)
          {
            v13 = 6;
            v19 = 44;
            LOBYTE(v10) = 125;
            goto LABEL_269;
          }
LABEL_296:
          v112 = 10;
          goto LABEL_276;
        default:
          goto LABEL_267;
      }
    }
    break;
  }
  v111 = *((_QWORD *)a2 + 1);
  if (v111)
    *((_QWORD *)a2 + 1) = v111 - 1;
}

void sub_1B5C515AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,char a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  AMCP::Wire_Description *v55;

  boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::~multi_index_container(a10);
  if (a36 < 0)
    operator delete(__p);
  AMCP::Wire_Description::~Wire_Description(v55);
  _Unwind_Resume(a1);
}

uint64_t AMCP::string_to_enum<AMCP::Resampler_Type>(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v10;
  _opaque_pthread_t *v11;
  mach_port_t v12;
  void *exception;
  __int128 v14;
  uint64_t v15;
  uint64_t (**v16)();
  __int128 v17;
  uint64_t v18;
  std::string v19;
  std::logic_error v20;
  std::logic_error v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  _QWORD *v28;
  uint64_t v29;
  void *__p;
  _QWORD v31[3];
  _QWORD *v32;
  std::string v33;
  __int16 v34;
  _BYTE v35[14];
  const char *v36;
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  AMCP::get_enum_string_bimap<AMCP::Resampler_Type>();
  v28 = v31;
  v2 = boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Resampler_Type,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container((uint64_t)&v29);
  v31[2] = v31;
  v32 = v31;
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v33 = *(std::string *)a1;
  v3 = (unsigned int *)__p;
  v4 = *((_QWORD *)__p + 7) & 0xFFFFFFFFFFFFFFFELL;
  if (v4)
  {
    v5 = (unsigned int *)__p;
    do
    {
      while (1)
      {
        v2 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(v4 - 48), &v33);
        if ((v2 & 0x80) == 0)
          break;
        v4 = *(_QWORD *)(v4 + 16);
        if (!v4)
          goto LABEL_10;
      }
      v5 = (unsigned int *)(v4 - 56);
      v4 = *(_QWORD *)(v4 + 8);
    }
    while (v4);
LABEL_10:
    if (v5 != v3)
    {
      v2 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v33, (_QWORD *)v5 + 1);
      if ((v2 & 0x80u) == 0)
        v3 = v5;
    }
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if ((unsigned int *)*(v32 - 1) == v3)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v2);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v33, "com.apple.coreaudio", "AMCP");
    v10 = *(NSObject **)v33.__r_.__value_.__l.__data_;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v33);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v11 = pthread_self();
      v12 = pthread_mach_thread_np(v11);
      LODWORD(v33.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(v33.__r_.__value_.__r.__words[0]) = v12;
      LOWORD(v33.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v33.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Graph_Description_Internal.h";
      WORD1(v33.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(v33.__r_.__value_.__r.__words[2]) = 53;
      v34 = 2080;
      *(_QWORD *)v35 = "not (found != map.right.end())";
      _os_log_error_impl(&dword_1B57BA000, v10, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&v33, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v19);
    std::logic_error::logic_error(&v20, &v19);
    v20.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v21, &v20);
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = -1;
    v21.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v22 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v33, (uint64_t)&v21);
    *(_QWORD *)&v35[6] = "T AMCP::string_to_enum(const std::string &) [T = AMCP::Resampler_Type]";
    v36 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_Description_Internal.h";
    v37 = 53;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v14);
    v17 = v14;
    v18 = v15;
    v14 = 0uLL;
    v15 = 0;
    v16 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&v33, (uint64_t)&v16);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)&v33);
  }
  v6 = *((_QWORD *)__p + 7);
  v7 = *v3;
  if ((v6 & 0xFFFFFFFFFFFFFFFELL) != 0)
    v8 = (v6 & 0xFFFFFFFFFFFFFFFELL) - 56;
  else
    v8 = 0;
  boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>,std::string,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>::right>,std::less<std::string>,boost::multi_index::detail::nth_layer<1,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::right,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::delete_all_nodes((uint64_t)v31, v8);
  operator delete(__p);
  return v7;
}

void sub_1B5C51E08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;

  boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::~multi_index_container(v34);
  _Unwind_Resume(a1);
}

uint64_t AMCP::string_to_enum<AMCP::Resampler_Quality>(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v10;
  _opaque_pthread_t *v11;
  mach_port_t v12;
  void *exception;
  __int128 v14;
  uint64_t v15;
  uint64_t (**v16)();
  __int128 v17;
  uint64_t v18;
  std::string v19;
  std::logic_error v20;
  std::logic_error v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  _QWORD *v28;
  uint64_t v29;
  void *__p;
  _QWORD v31[3];
  _QWORD *v32;
  std::string v33;
  __int16 v34;
  _BYTE v35[14];
  const char *v36;
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  AMCP::get_enum_string_bimap<AMCP::Resampler_Quality>();
  v28 = v31;
  v2 = boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Quality const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Resampler_Quality,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Quality const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container((uint64_t)&v29);
  v31[2] = v31;
  v32 = v31;
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v33 = *(std::string *)a1;
  v3 = (unsigned int *)__p;
  v4 = *((_QWORD *)__p + 7) & 0xFFFFFFFFFFFFFFFELL;
  if (v4)
  {
    v5 = (unsigned int *)__p;
    do
    {
      while (1)
      {
        v2 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(v4 - 48), &v33);
        if ((v2 & 0x80) == 0)
          break;
        v4 = *(_QWORD *)(v4 + 16);
        if (!v4)
          goto LABEL_10;
      }
      v5 = (unsigned int *)(v4 - 56);
      v4 = *(_QWORD *)(v4 + 8);
    }
    while (v4);
LABEL_10:
    if (v5 != v3)
    {
      v2 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v33, (_QWORD *)v5 + 1);
      if ((v2 & 0x80u) == 0)
        v3 = v5;
    }
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if ((unsigned int *)*(v32 - 1) == v3)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v2);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v33, "com.apple.coreaudio", "AMCP");
    v10 = *(NSObject **)v33.__r_.__value_.__l.__data_;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v33);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v11 = pthread_self();
      v12 = pthread_mach_thread_np(v11);
      LODWORD(v33.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(v33.__r_.__value_.__r.__words[0]) = v12;
      LOWORD(v33.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v33.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Graph_Description_Internal.h";
      WORD1(v33.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(v33.__r_.__value_.__r.__words[2]) = 53;
      v34 = 2080;
      *(_QWORD *)v35 = "not (found != map.right.end())";
      _os_log_error_impl(&dword_1B57BA000, v10, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&v33, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v19);
    std::logic_error::logic_error(&v20, &v19);
    v20.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v21, &v20);
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = -1;
    v21.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v22 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v33, (uint64_t)&v21);
    *(_QWORD *)&v35[6] = "T AMCP::string_to_enum(const std::string &) [T = AMCP::Resampler_Quality]";
    v36 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_Description_Internal.h";
    v37 = 53;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v14);
    v17 = v14;
    v18 = v15;
    v14 = 0uLL;
    v15 = 0;
    v16 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&v33, (uint64_t)&v16);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)&v33);
  }
  v6 = *((_QWORD *)__p + 7);
  v7 = *v3;
  if ((v6 & 0xFFFFFFFFFFFFFFFELL) != 0)
    v8 = (v6 & 0xFFFFFFFFFFFFFFFELL) - 56;
  else
    v8 = 0;
  boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>,std::string,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>::right>,std::less<std::string>,boost::multi_index::detail::nth_layer<1,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::right,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::delete_all_nodes((uint64_t)v31, v8);
  operator delete(__p);
  return v7;
}

void sub_1B5C52210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;

  boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::~multi_index_container(v34);
  _Unwind_Resume(a1);
}

void AMCP::parse_json<AMCP::Graph_Description>(uint64_t *a1, minijson::istream_context *this)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;
  char v6;
  int v7;
  const char *v8;
  uint64_t v9;
  int v10;
  int v11;
  char v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  int v19;
  int v20;
  int v21;
  char v22;
  unint64_t v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  int v27;
  char v28;
  char v29;
  char v30;
  int v31;
  unint64_t v32;
  unsigned int v33;
  unsigned int v34;
  char v35;
  int v36;
  int v37;
  int v38;
  char v39;
  uint64_t j;
  _QWORD *v41;
  uint64_t v42;
  char *v43;
  std::string *v44;
  uint64_t v45;
  uint64_t v46;
  int *v47;
  unint64_t v48;
  int *v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  int *v54;
  unint64_t v55;
  int *v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  int *v60;
  unint64_t v61;
  int *v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unsigned int v68;
  unsigned int v69;
  char v70;
  int v71;
  int v72;
  int v73;
  char v74;
  uint64_t i;
  uint64_t v76;
  int *v77;
  unint64_t v78;
  int *v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int64x2_t v98;
  void *v99;
  uint64_t k;
  unint64_t v101;
  unsigned int v102;
  unsigned int v103;
  char v104;
  int v105;
  int v106;
  int v107;
  char v108;
  uint64_t *v109;
  unint64_t v110;
  unint64_t v111;
  __int128 v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  __int128 v116;
  __int128 v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  void **v123;
  void **v124;
  uint64_t v125;
  __int128 v126;
  void *v127;
  __int128 v128;
  void *v129;
  __int128 v130;
  __int128 v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *exception;
  uint64_t v135;
  BOOL v136;
  uint64_t v137;
  int v138;
  NSObject *v139;
  _opaque_pthread_t *v140;
  mach_port_t v141;
  void *v142;
  NSObject *v143;
  _opaque_pthread_t *v144;
  mach_port_t v145;
  void *v146;
  int v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  NSObject *v151;
  _opaque_pthread_t *v152;
  mach_port_t v153;
  void *v154;
  NSObject *v155;
  _opaque_pthread_t *v156;
  mach_port_t v157;
  void *v158;
  std::runtime_error *v159;
  std::runtime_error *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  const char *v166;
  uint64_t *v167;
  uint64_t *v168;
  __int128 **v169;
  char *__s1;
  char *v172;
  unsigned int v173[9];
  unsigned __int8 v174;
  char v175;
  char v176[38];
  unsigned __int8 v177;
  char v178;
  void *v179[2];
  void *v180;
  void *v181;
  int v182;
  int v183;
  __int128 v184;
  __int128 v185;
  uint64_t v186[4];
  __int128 v187;
  void *v188;
  __int128 v189;
  __int128 v190;
  char v191;
  __int128 v192;
  void *v193;
  unsigned int v194;
  std::string::value_type *__s;
  uint64_t v196;
  __int16 v197;
  std::string v198;
  void **v199;
  int64x2_t v200;
  void *__p;
  _QWORD v202[2];
  _QWORD *v203;
  _QWORD *v204;
  __int128 v205;
  uint64_t v206;
  uint64_t (**v207)();
  __int128 v208;
  uint64_t v209;
  std::string v210;
  std::logic_error v211;
  std::logic_error v212;
  void *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  int v217;
  char v218;
  std::string v219;
  __int16 v220;
  _BYTE v221[14];
  const char *v222;
  int v223;
  uint64_t v224;

  v224 = *MEMORY[0x1E0C80C00];
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  v3 = *((_QWORD *)this + 1);
  if (v3 >= 0x21)
  {
LABEL_355:
    exception = __cxa_allocate_exception(0x18uLL);
    *exception = &off_1E699B850;
    v165 = *((_QWORD *)this + 3);
    v136 = v165 != 0;
    v137 = v165 - 1;
    if (!v136)
      v137 = 0;
    v138 = 12;
LABEL_318:
    exception[1] = v137;
    *((_DWORD *)exception + 4) = v138;
  }
  LOBYTE(v4) = 0;
  v174 = 0;
  v5 = *(unsigned __int8 *)this;
  if (v5 <= 2)
  {
    v6 = 8 * v5;
    v4 = 0x5B7B00u >> v6;
    v174 = 1u >> v6;
  }
  v7 = 0;
  *(_DWORD *)this = 0;
  v172 = (char *)this + 32;
  v169 = (__int128 **)(a1 + 3);
  v167 = a1 + 5;
  v8 = "";
  v168 = a1 + 2;
  v9 = MEMORY[0x1E0C80978];
  while (2)
  {
    if (v7 != 6)
    {
      v10 = v174;
      do
      {
        if (*((_QWORD *)this + 1) != v3)
        {
LABEL_315:
          exception = __cxa_allocate_exception(0x18uLL);
          *exception = &off_1E699B850;
          v135 = *((_QWORD *)this + 3);
          v136 = v135 != 0;
          v137 = v135 - 1;
          if (!v136)
            v137 = 0;
          v138 = 11;
          goto LABEL_318;
        }
        if (v10)
          LOBYTE(v4) = minijson::istream_context::read(this);
        if ((v4 & 0x80) != 0)
          v11 = __maskrune((char)v4, 0x4000uLL);
        else
          v11 = *(_DWORD *)(v9 + 4 * (char)v4 + 60) & 0x4000;
        v10 = 1;
      }
      while (v11);
      v174 = 1;
      v175 = v4;
      switch(v7)
      {
        case 0:
          if (v4 != 123)
          {
LABEL_340:
            exception = __cxa_allocate_exception(0x18uLL);
            *exception = &off_1E699B850;
            v161 = *((_QWORD *)this + 3);
            v136 = v161 != 0;
            v137 = v161 - 1;
            if (!v136)
              v137 = 0;
            v138 = 8;
            goto LABEL_318;
          }
          v7 = 1;
          v12 = 44;
          LOBYTE(v4) = 123;
LABEL_310:
          if (!v12)
          {
LABEL_304:
            v160 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v160, "This line should never be reached, please file a bug report");
            __cxa_throw(v160, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          continue;
        case 1:
          if (v4 == 34)
            goto LABEL_27;
          if (v4 == 125)
          {
            v7 = 6;
            v12 = 44;
            goto LABEL_310;
          }
LABEL_348:
          exception = __cxa_allocate_exception(0x18uLL);
          *exception = &off_1E699B850;
          v163 = *((_QWORD *)this + 3);
          v136 = v163 != 0;
          v137 = v163 - 1;
          if (!v136)
            v137 = 0;
          v138 = 1;
          goto LABEL_318;
        case 2:
          if (v4 != 34)
            goto LABEL_348;
LABEL_27:
          v13 = operator new(0x28uLL);
          v13[2] = 0;
          v13[3] = 0;
          v13[4] = 0;
          v14 = *((_QWORD *)this + 4);
          *v13 = v14;
          v13[1] = v172;
          *(_QWORD *)(v14 + 8) = v13;
          *((_QWORD *)this + 4) = v13;
          ++*((_QWORD *)this + 6);
          minijson::detail::read_quoted_string<minijson::istream_context>((minijson::istream_context **)this);
          if (*(_QWORD *)(*(_QWORD *)v172 + 16) == *(_QWORD *)(*(_QWORD *)v172 + 24))
            v8 = 0;
          else
            v8 = *(const char **)(*(_QWORD *)v172 + 16);
          v7 = 3;
          goto LABEL_308;
        case 3:
          if (v4 == 58)
          {
            v7 = 4;
            v12 = 44;
            LOBYTE(v4) = 58;
            goto LABEL_310;
          }
          exception = __cxa_allocate_exception(0x18uLL);
          *exception = &off_1E699B850;
          v164 = *((_QWORD *)this + 3);
          v136 = v164 != 0;
          v137 = v164 - 1;
          if (!v136)
            v137 = 0;
          v138 = 9;
          goto LABEL_318;
        case 4:
          minijson::detail::parse_value_helper<minijson::istream_context>((uint64_t)v173, (uint64_t)this, &v175, &v174);
          if (strcmp(v8, "nodes"))
          {
            if (strcmp(v8, "wires"))
            {
              v7 = 5;
LABEL_308:
              LOBYTE(v4) = v175;
              goto LABEL_309;
            }
            AMCP::require_type((AMCP::Log::Scope_Registry *)v173[0], 4);
            v101 = *((_QWORD *)this + 1);
            if (v101 < 0x21)
            {
              v166 = v8;
              LOBYTE(v102) = 0;
              LOBYTE(v194) = 0;
              v103 = *(unsigned __int8 *)this;
              if (v103 <= 2)
              {
                v104 = 8 * v103;
                v102 = 0x5B7B00u >> v104;
                LOBYTE(v194) = 1u >> v104;
              }
              v105 = 0;
              *(_DWORD *)this = 0;
              while (2)
              {
                if (v105 != 4)
                {
                  v106 = v194;
                  do
                  {
                    if (*((_QWORD *)this + 1) != v101)
                      goto LABEL_315;
                    if (v106)
                      LOBYTE(v102) = minijson::istream_context::read(this);
                    if ((v102 & 0x80) != 0)
                      v107 = __maskrune((char)v102, 0x4000uLL);
                    else
                      v107 = *(_DWORD *)(v9 + 4 * (char)v102 + 60) & 0x4000;
                    v106 = 1;
                  }
                  while (v107);
                  LOBYTE(v194) = 1;
                  LOBYTE(v207) = v102;
                  switch(v105)
                  {
                    case 0:
                      if (v102 != 91)
                        goto LABEL_340;
                      v105 = 1;
                      v108 = 44;
                      LOBYTE(v102) = 91;
                      goto LABEL_303;
                    case 1:
                      if (v102 != 93)
                        goto LABEL_280;
                      goto LABEL_284;
                    case 2:
LABEL_280:
                      minijson::detail::parse_value_helper<minijson::istream_context>((uint64_t)&v219, (uint64_t)this, &v207, &v194);
                      AMCP::parse_json<AMCP::Wire_Description>((uint64_t)v179, this);
                      v109 = a1;
                      v110 = a1[4];
                      v111 = a1[5];
                      if (v110 >= v111)
                      {
                        v119 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v110 - (_QWORD)*v169) >> 6);
                        v120 = v119 + 1;
                        if (v119 + 1 > 0x155555555555555)
                          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                        v121 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v111 - (_QWORD)*v169) >> 6);
                        if (2 * v121 > v120)
                          v120 = 2 * v121;
                        if (v121 >= 0xAAAAAAAAAAAAAALL)
                          v122 = 0x155555555555555;
                        else
                          v122 = v120;
                        v202[0] = v167;
                        v123 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Wire_Description>>(v122);
                        v124 = &v123[24 * v119];
                        v199 = v123;
                        v200.i64[0] = (uint64_t)v124;
                        __p = &v123[24 * v125];
                        v126 = *(_OWORD *)v179;
                        v124[2] = v180;
                        *(_OWORD *)v124 = v126;
                        v179[1] = 0;
                        v180 = 0;
                        v179[0] = 0;
                        v127 = v181;
                        *((_DWORD *)v124 + 8) = v182;
                        v124[3] = v127;
                        v128 = v184;
                        v124[7] = (void *)v185;
                        *(_OWORD *)(v124 + 5) = v128;
                        *(_QWORD *)&v185 = 0;
                        v184 = 0uLL;
                        v129 = (void *)*((_QWORD *)&v185 + 1);
                        *((_DWORD *)v124 + 18) = v186[0];
                        v124[8] = v129;
                        v124[11] = 0;
                        v124[12] = 0;
                        v124[10] = 0;
                        *((_OWORD *)v124 + 5) = *(_OWORD *)&v186[1];
                        v124[12] = (void *)v186[3];
                        memset(&v186[1], 0, 24);
                        v124[13] = 0;
                        v124[14] = 0;
                        v124[15] = 0;
                        *(_OWORD *)(v124 + 13) = v187;
                        v124[15] = v188;
                        v187 = 0uLL;
                        v188 = 0;
                        v130 = v189;
                        v131 = v190;
                        *((_BYTE *)v124 + 160) = v191;
                        *((_OWORD *)v124 + 8) = v130;
                        *((_OWORD *)v124 + 9) = v131;
                        v124[22] = 0;
                        v124[23] = 0;
                        v124[21] = 0;
                        *(_OWORD *)(v124 + 21) = v192;
                        v124[23] = v193;
                        v192 = 0uLL;
                        v193 = 0;
                        v200.i64[1] = (uint64_t)(v124 + 24);
                        std::vector<AMCP::Wire_Description>::__swap_out_circular_buffer(v169, &v199);
                        v109 = a1;
                        v118 = a1[4];
                        std::__split_buffer<AMCP::Wire_Description>::~__split_buffer((uint64_t)&v199);
                      }
                      else
                      {
                        v112 = *(_OWORD *)v179;
                        *(_QWORD *)(v110 + 16) = v180;
                        *(_OWORD *)v110 = v112;
                        v179[1] = 0;
                        v180 = 0;
                        v179[0] = 0;
                        v113 = v182;
                        *(_QWORD *)(v110 + 24) = v181;
                        *(_DWORD *)(v110 + 32) = v113;
                        v114 = v185;
                        *(_OWORD *)(v110 + 40) = v184;
                        *(_QWORD *)(v110 + 56) = v114;
                        *(_QWORD *)&v185 = 0;
                        v184 = 0uLL;
                        v115 = *((_QWORD *)&v185 + 1);
                        *(_DWORD *)(v110 + 72) = v186[0];
                        *(_QWORD *)(v110 + 64) = v115;
                        *(_QWORD *)(v110 + 80) = 0;
                        *(_QWORD *)(v110 + 88) = 0;
                        *(_QWORD *)(v110 + 96) = 0;
                        *(_QWORD *)(v110 + 104) = 0;
                        *(_OWORD *)(v110 + 80) = *(_OWORD *)&v186[1];
                        *(_QWORD *)(v110 + 96) = v186[3];
                        memset(&v186[1], 0, 24);
                        *(_QWORD *)(v110 + 112) = 0;
                        *(_QWORD *)(v110 + 120) = 0;
                        *(_OWORD *)(v110 + 104) = v187;
                        *(_QWORD *)(v110 + 120) = v188;
                        v187 = 0uLL;
                        v188 = 0;
                        v116 = v189;
                        v117 = v190;
                        *(_BYTE *)(v110 + 160) = v191;
                        *(_OWORD *)(v110 + 128) = v116;
                        *(_OWORD *)(v110 + 144) = v117;
                        *(_QWORD *)(v110 + 168) = 0;
                        *(_QWORD *)(v110 + 176) = 0;
                        *(_QWORD *)(v110 + 184) = 0;
                        *(_OWORD *)(v110 + 168) = v192;
                        *(_QWORD *)(v110 + 184) = v193;
                        v192 = 0uLL;
                        v193 = 0;
                        v118 = v110 + 192;
                        a1[4] = v110 + 192;
                      }
                      v109[4] = v118;
                      v199 = (void **)&v192;
                      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v199);
                      if ((_QWORD)v187)
                      {
                        *((_QWORD *)&v187 + 1) = v187;
                        operator delete((void *)v187);
                      }
                      if (v186[1])
                      {
                        v186[2] = v186[1];
                        operator delete((void *)v186[1]);
                      }
                      if (SBYTE7(v185) < 0)
                        operator delete((void *)v184);
                      if (SHIBYTE(v180) < 0)
                        operator delete(v179[0]);
                      v105 = 3;
                      LOBYTE(v102) = (_BYTE)v207;
                      goto LABEL_302;
                    case 3:
                      if (v102 == 44)
                      {
                        v105 = 2;
LABEL_302:
                        v108 = v102;
                      }
                      else
                      {
                        if (v102 != 93)
                          goto LABEL_344;
LABEL_284:
                        v105 = 4;
                        v108 = 44;
                        LOBYTE(v102) = 93;
                      }
LABEL_303:
                      if (!v108)
                        goto LABEL_304;
                      continue;
                    default:
                      goto LABEL_302;
                  }
                }
                break;
              }
LABEL_305:
              v132 = *((_QWORD *)this + 1);
              if (v132)
                *((_QWORD *)this + 1) = v132 - 1;
              v7 = 5;
              v8 = v166;
              goto LABEL_308;
            }
            goto LABEL_355;
          }
          AMCP::require_type((AMCP::Log::Scope_Registry *)v173[0], 4);
          v15 = *((_QWORD *)this + 1);
          if (v15 >= 0x21)
            goto LABEL_355;
          v166 = v8;
          LOBYTE(v16) = 0;
          v177 = 0;
          v17 = *(unsigned __int8 *)this;
          if (v17 <= 2)
          {
            v18 = 8 * v17;
            v16 = 0x5B7B00u >> v18;
            v177 = 1u >> v18;
          }
          v19 = 0;
          *(_DWORD *)this = 0;
          while (2)
          {
            if (v19 == 4)
              goto LABEL_305;
            v20 = v177;
            do
            {
              if (*((_QWORD *)this + 1) != v15)
                goto LABEL_315;
              if (v20)
                LOBYTE(v16) = minijson::istream_context::read(this);
              if ((v16 & 0x80) != 0)
                v21 = __maskrune((char)v16, 0x4000uLL);
              else
                v21 = *(_DWORD *)(v9 + 4 * (char)v16 + 60) & 0x4000;
              v20 = 1;
            }
            while (v21);
            v177 = 1;
            v178 = v16;
            switch(v19)
            {
              case 0:
                if (v16 != 91)
                  goto LABEL_340;
                v19 = 1;
                v22 = 44;
                LOBYTE(v16) = 91;
                goto LABEL_261;
              case 1:
                if (v16 != 93)
                  goto LABEL_52;
                goto LABEL_230;
              case 2:
LABEL_52:
                minijson::detail::parse_value_helper<minijson::istream_context>((uint64_t)v176, (uint64_t)this, &v178, &v177);
                v180 = 0;
                v181 = 0;
                v179[1] = 0;
                v182 = 0;
                LODWORD(v179[0]) = 1;
                v183 = 1;
                v184 = 0u;
                v185 = 0u;
                memset(v186, 0, sizeof(v186));
                v187 = 0u;
                v23 = *((_QWORD *)this + 1);
                if (v23 >= 0x21)
                  goto LABEL_343;
                LOBYTE(v24) = 0;
                v197 = 0;
                v25 = *(unsigned __int8 *)this;
                if (v25 <= 2)
                {
                  v26 = 8 * v25;
                  v24 = 0x5B7B00u >> v26;
                  HIBYTE(v197) = 0x5B7B00u >> v26;
                  LOBYTE(v197) = 1u >> v26;
                }
                v27 = 0;
                *(_DWORD *)this = 0;
                v28 = v24;
                v29 = v24;
                v30 = v24;
                __s1 = "";
                break;
              case 3:
                if (v16 == 44)
                {
                  v19 = 2;
LABEL_260:
                  v22 = v16;
                }
                else
                {
                  if (v16 != 93)
                    goto LABEL_344;
LABEL_230:
                  v19 = 4;
                  v22 = 44;
                  LOBYTE(v16) = 93;
                }
LABEL_261:
                if (!v22)
                  goto LABEL_304;
                continue;
              default:
                goto LABEL_260;
            }
            break;
          }
          break;
        case 5:
          if (v4 == 44)
          {
            v7 = 2;
LABEL_309:
            v12 = v4;
            goto LABEL_310;
          }
          if (v4 == 125)
          {
            v7 = 6;
            v12 = 44;
            LOBYTE(v4) = 125;
            goto LABEL_310;
          }
LABEL_344:
          exception = __cxa_allocate_exception(0x18uLL);
          *exception = &off_1E699B850;
          v162 = *((_QWORD *)this + 3);
          v136 = v162 != 0;
          v137 = v162 - 1;
          if (!v136)
            v137 = 0;
          v138 = 10;
          goto LABEL_318;
        default:
          goto LABEL_308;
      }
      while (1)
      {
        do
        {
LABEL_56:
          if (*((_QWORD *)this + 1) != v23)
          {
LABEL_325:
            v147 = 11;
            goto LABEL_326;
          }
          if ((_BYTE)v197)
          {
            LOBYTE(v24) = minijson::istream_context::read(this);
            HIBYTE(v197) = v24;
            v28 = v24;
            v29 = v24;
            v30 = v24;
          }
          LOBYTE(v197) = 1;
          if (v30 < 0)
            v31 = __maskrune(v30, 0x4000uLL);
          else
            v31 = *(_DWORD *)(v9 + 4 * v30 + 60) & 0x4000;
        }
        while (v31);
        switch(v27)
        {
          case 0:
            if (v24 == 123)
            {
              v27 = 1;
              LOBYTE(v24) = 123;
              v28 = 123;
              v29 = 123;
              v30 = 123;
              goto LABEL_56;
            }
LABEL_337:
            v147 = 8;
            goto LABEL_326;
          case 1:
            if (v24 == 34)
              goto LABEL_108;
            if (v24 == 125)
              goto LABEL_235;
LABEL_336:
            v147 = 1;
            goto LABEL_326;
          case 2:
            if (v24 != 34)
              goto LABEL_336;
LABEL_108:
            v41 = operator new(0x28uLL);
            v41[2] = 0;
            v41[3] = 0;
            v41[4] = 0;
            v42 = *((_QWORD *)this + 4);
            *v41 = v42;
            v41[1] = v172;
            *(_QWORD *)(v42 + 8) = v41;
            *((_QWORD *)this + 4) = v41;
            ++*((_QWORD *)this + 6);
            minijson::detail::read_quoted_string<minijson::istream_context>((minijson::istream_context **)this);
            if (*(_QWORD *)(*(_QWORD *)v172 + 16) == *(_QWORD *)(*(_QWORD *)v172 + 24))
              v43 = 0;
            else
              v43 = *(char **)(*(_QWORD *)v172 + 16);
            __s1 = v43;
            v27 = 3;
            goto LABEL_178;
          case 3:
            if (v28 == 58)
            {
              v27 = 4;
              v28 = 58;
              v29 = 58;
              v30 = 58;
              goto LABEL_56;
            }
            v147 = 9;
            goto LABEL_326;
          case 4:
            minijson::detail::parse_value_helper<minijson::istream_context>((uint64_t)&v194, (uint64_t)this, (_BYTE *)&v197 + 1, &v197);
            if (!strcmp(__s1, "UID"))
            {
              AMCP::require_type((AMCP::Log::Scope_Registry *)v194, 0);
              v44 = (std::string *)&v179[1];
LABEL_115:
              std::string::__assign_external(v44, __s);
              goto LABEL_177;
            }
            if (!strcmp(__s1, "NodeType"))
            {
              AMCP::require_type((AMCP::Log::Scope_Registry *)v194, 0);
              std::string::basic_string[abi:ne180100]<0>(&v198, __s);
              AMCP::get_enum_string_bimap<AMCP::Node_Type>();
              v200.i64[0] = (uint64_t)v202;
              v45 = boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Node_Type,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container((uint64_t)&v200.i64[1]);
              v203 = v202;
              v204 = v202;
              if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external(&v219, v198.__r_.__value_.__l.__data_, v198.__r_.__value_.__l.__size_);
              else
                v219 = v198;
              v47 = (int *)__p;
              v48 = *((_QWORD *)__p + 7) & 0xFFFFFFFFFFFFFFFELL;
              if (v48)
              {
                v49 = (int *)__p;
                do
                {
                  while (1)
                  {
                    v45 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(v48 - 48), &v219);
                    if ((v45 & 0x80) == 0)
                      break;
                    v48 = *(_QWORD *)(v48 + 16);
                    if (!v48)
                      goto LABEL_128;
                  }
                  v49 = (int *)(v48 - 56);
                  v48 = *(_QWORD *)(v48 + 8);
                }
                while (v48);
LABEL_128:
                if (v49 != v47)
                {
                  v45 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v219, (_QWORD *)v49 + 1);
                  if ((v45 & 0x80u) == 0)
                    v47 = v49;
                }
              }
              if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v219.__r_.__value_.__l.__data_);
              if ((int *)*(v204 - 1) == v47)
              {
                AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v45);
                AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v219, "com.apple.coreaudio", "AMCP");
                v139 = *(NSObject **)v219.__r_.__value_.__l.__data_;
                std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v219);
                if (os_log_type_enabled(v139, OS_LOG_TYPE_ERROR))
                {
                  v140 = pthread_self();
                  v141 = pthread_mach_thread_np(v140);
                  LODWORD(v219.__r_.__value_.__l.__data_) = 67109890;
                  HIDWORD(v219.__r_.__value_.__r.__words[0]) = v141;
                  LOWORD(v219.__r_.__value_.__r.__words[1]) = 2080;
                  *(std::string::size_type *)((char *)&v219.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Graph_Description_Internal.h";
                  WORD1(v219.__r_.__value_.__r.__words[2]) = 1024;
                  HIDWORD(v219.__r_.__value_.__r.__words[2]) = 53;
                  v220 = 2080;
                  *(_QWORD *)v221 = "not (found != map.right.end())";
                  _os_log_error_impl(&dword_1B57BA000, v139, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&v219, 0x22u);
                }
                AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v218);
                v142 = __cxa_allocate_exception(0x40uLL);
                caulk::make_string((caulk *)"", (uint64_t)&v210);
                std::logic_error::logic_error(&v211, &v210);
                v211.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
                std::logic_error::logic_error(&v212, &v211);
                v214 = 0;
                v215 = 0;
                v216 = 0;
                v217 = -1;
                v212.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
                v213 = &unk_1E69A1230;
                boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v219, (uint64_t)&v212);
                *(_QWORD *)&v221[6] = "T AMCP::string_to_enum(const std::string &) [T = AMCP::Node_Type]";
                v222 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_Description_Internal.h";
                v223 = 53;
                applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v205);
                v208 = v205;
                v207 = off_1E69A20A0;
                v209 = v206;
                v205 = 0uLL;
                v206 = 0;
                boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&v219, (uint64_t)&v207);
                boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v142, (uint64_t)&v219);
              }
              v50 = *((_QWORD *)__p + 7);
              v51 = *v47;
              if ((v50 & 0xFFFFFFFFFFFFFFFELL) != 0)
                v52 = (v50 & 0xFFFFFFFFFFFFFFFELL) - 56;
              else
                v52 = 0;
              boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>,std::string,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>::right>,std::less<std::string>,boost::multi_index::detail::nth_layer<1,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::right,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::delete_all_nodes((uint64_t)v202, v52);
              operator delete(__p);
              LODWORD(v179[0]) = v51;
              goto LABEL_175;
            }
            if (!strcmp(__s1, "BlockSize"))
            {
              AMCP::require_type((AMCP::Log::Scope_Registry *)v194, 1);
              HIDWORD(v185) = v196;
              goto LABEL_177;
            }
            if (!strcmp(__s1, "ThreadPolicy"))
            {
              AMCP::require_type((AMCP::Log::Scope_Registry *)v194, 0);
              std::string::basic_string[abi:ne180100]<0>(&v198, __s);
              AMCP::get_enum_string_bimap<AMCP::Node_Thread_Policy>();
              v200.i64[0] = (uint64_t)v202;
              v46 = boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Thread_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Node_Thread_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Thread_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container((uint64_t)&v200.i64[1]);
              v203 = v202;
              v204 = v202;
              if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external(&v219, v198.__r_.__value_.__l.__data_, v198.__r_.__value_.__l.__size_);
              else
                v219 = v198;
              v54 = (int *)__p;
              v55 = *((_QWORD *)__p + 7) & 0xFFFFFFFFFFFFFFFELL;
              if (v55)
              {
                v56 = (int *)__p;
                do
                {
                  while (1)
                  {
                    v46 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(v55 - 48), &v219);
                    if ((v46 & 0x80) == 0)
                      break;
                    v55 = *(_QWORD *)(v55 + 16);
                    if (!v55)
                      goto LABEL_148;
                  }
                  v56 = (int *)(v55 - 56);
                  v55 = *(_QWORD *)(v55 + 8);
                }
                while (v55);
LABEL_148:
                if (v56 != v54)
                {
                  v46 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v219, (_QWORD *)v56 + 1);
                  if ((v46 & 0x80u) == 0)
                    v54 = v56;
                }
              }
              if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v219.__r_.__value_.__l.__data_);
              if ((int *)*(v204 - 1) == v54)
              {
                AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v46);
                AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v219, "com.apple.coreaudio", "AMCP");
                v143 = *(NSObject **)v219.__r_.__value_.__l.__data_;
                std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v219);
                if (os_log_type_enabled(v143, OS_LOG_TYPE_ERROR))
                {
                  v144 = pthread_self();
                  v145 = pthread_mach_thread_np(v144);
                  LODWORD(v219.__r_.__value_.__l.__data_) = 67109890;
                  HIDWORD(v219.__r_.__value_.__r.__words[0]) = v145;
                  LOWORD(v219.__r_.__value_.__r.__words[1]) = 2080;
                  *(std::string::size_type *)((char *)&v219.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Graph_Description_Internal.h";
                  WORD1(v219.__r_.__value_.__r.__words[2]) = 1024;
                  HIDWORD(v219.__r_.__value_.__r.__words[2]) = 53;
                  v220 = 2080;
                  *(_QWORD *)v221 = "not (found != map.right.end())";
                  _os_log_error_impl(&dword_1B57BA000, v143, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&v219, 0x22u);
                }
                AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v218);
                v146 = __cxa_allocate_exception(0x40uLL);
                caulk::make_string((caulk *)"", (uint64_t)&v210);
                std::logic_error::logic_error(&v211, &v210);
                v211.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
                std::logic_error::logic_error(&v212, &v211);
                v214 = 0;
                v215 = 0;
                v216 = 0;
                v217 = -1;
                v212.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
                v213 = &unk_1E69A1230;
                boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v219, (uint64_t)&v212);
                *(_QWORD *)&v221[6] = "T AMCP::string_to_enum(const std::string &) [T = AMCP::Node_Thread_Policy]";
                v222 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_Description_Internal.h";
                v223 = 53;
                applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v205);
                v208 = v205;
                v207 = off_1E69A20A0;
                v209 = v206;
                v205 = 0uLL;
                v206 = 0;
                boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&v219, (uint64_t)&v207);
                boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v146, (uint64_t)&v219);
              }
              v57 = *((_QWORD *)__p + 7);
              v58 = *v54;
              if ((v57 & 0xFFFFFFFFFFFFFFFELL) != 0)
                v59 = (v57 & 0xFFFFFFFFFFFFFFFELL) - 56;
              else
                v59 = 0;
              boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>,std::string,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>::right>,std::less<std::string>,boost::multi_index::detail::nth_layer<1,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::right,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::delete_all_nodes((uint64_t)v202, v59);
              operator delete(__p);
              v182 = v58;
              goto LABEL_175;
            }
            if (!strcmp(__s1, "SizeChangePolicy"))
            {
              AMCP::require_type((AMCP::Log::Scope_Registry *)v194, 0);
              std::string::basic_string[abi:ne180100]<0>(&v198, __s);
              AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>();
              v200.i64[0] = (uint64_t)v202;
              v53 = boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Buffer_Size_Change_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Node_Buffer_Size_Change_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Buffer_Size_Change_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container((uint64_t)&v200.i64[1]);
              v203 = v202;
              v204 = v202;
              if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external(&v219, v198.__r_.__value_.__l.__data_, v198.__r_.__value_.__l.__size_);
              else
                v219 = v198;
              v60 = (int *)__p;
              v61 = *((_QWORD *)__p + 7) & 0xFFFFFFFFFFFFFFFELL;
              if (v61)
              {
                v62 = (int *)__p;
                do
                {
                  while (1)
                  {
                    v53 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(v61 - 48), &v219);
                    if ((v53 & 0x80) == 0)
                      break;
                    v61 = *(_QWORD *)(v61 + 16);
                    if (!v61)
                      goto LABEL_165;
                  }
                  v62 = (int *)(v61 - 56);
                  v61 = *(_QWORD *)(v61 + 8);
                }
                while (v61);
LABEL_165:
                if (v62 != v60)
                {
                  v53 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v219, (_QWORD *)v62 + 1);
                  if ((v53 & 0x80u) == 0)
                    v60 = v62;
                }
              }
              if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v219.__r_.__value_.__l.__data_);
              if ((int *)*(v204 - 1) == v60)
              {
                AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v53);
                AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v219, "com.apple.coreaudio", "AMCP");
                v151 = *(NSObject **)v219.__r_.__value_.__l.__data_;
                std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v219);
                if (os_log_type_enabled(v151, OS_LOG_TYPE_ERROR))
                {
                  v152 = pthread_self();
                  v153 = pthread_mach_thread_np(v152);
                  LODWORD(v219.__r_.__value_.__l.__data_) = 67109890;
                  HIDWORD(v219.__r_.__value_.__r.__words[0]) = v153;
                  LOWORD(v219.__r_.__value_.__r.__words[1]) = 2080;
                  *(std::string::size_type *)((char *)&v219.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Graph_Description_Internal.h";
                  WORD1(v219.__r_.__value_.__r.__words[2]) = 1024;
                  HIDWORD(v219.__r_.__value_.__r.__words[2]) = 53;
                  v220 = 2080;
                  *(_QWORD *)v221 = "not (found != map.right.end())";
                  _os_log_error_impl(&dword_1B57BA000, v151, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&v219, 0x22u);
                }
                AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v218);
                v154 = __cxa_allocate_exception(0x40uLL);
                caulk::make_string((caulk *)"", (uint64_t)&v210);
                std::logic_error::logic_error(&v211, &v210);
                v211.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
                std::logic_error::logic_error(&v212, &v211);
                v214 = 0;
                v215 = 0;
                v216 = 0;
                v217 = -1;
                v212.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
                v213 = &unk_1E69A1230;
                boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v219, (uint64_t)&v212);
                *(_QWORD *)&v221[6] = "T AMCP::string_to_enum(const std::string &) [T = AMCP::Node_Buffer_Size_Change_Policy]";
                v222 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_Description_Internal.h";
                v223 = 53;
                applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v205);
                v208 = v205;
                v207 = off_1E69A20A0;
                v209 = v206;
                v205 = 0uLL;
                v206 = 0;
                boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&v219, (uint64_t)&v207);
                boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v154, (uint64_t)&v219);
              }
              v63 = *((_QWORD *)__p + 7);
              v64 = *v60;
              if ((v63 & 0xFFFFFFFFFFFFFFFELL) != 0)
                v65 = (v63 & 0xFFFFFFFFFFFFFFFELL) - 56;
              else
                v65 = 0;
              boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>,std::string,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>::right>,std::less<std::string>,boost::multi_index::detail::nth_layer<1,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::right,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::delete_all_nodes((uint64_t)v202, v65);
              operator delete(__p);
              v183 = v64;
              goto LABEL_175;
            }
            if (!strcmp(__s1, "ClockUID") || !strcmp(__s1, "ClockTerminal"))
            {
              AMCP::require_type((AMCP::Log::Scope_Registry *)v194, 0);
              v44 = (std::string *)&v184;
              goto LABEL_115;
            }
            if (!strcmp(__s1, "ClockPolicy"))
            {
              AMCP::require_type((AMCP::Log::Scope_Registry *)v194, 0);
              std::string::basic_string[abi:ne180100]<0>(&v198, __s);
              AMCP::get_enum_string_bimap<AMCP::Node_Clock_Policy>();
              v200.i64[0] = (uint64_t)v202;
              v66 = boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Clock_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Node_Clock_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Clock_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container((uint64_t)&v200.i64[1]);
              v203 = v202;
              v204 = v202;
              if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external(&v219, v198.__r_.__value_.__l.__data_, v198.__r_.__value_.__l.__size_);
              else
                v219 = v198;
              v77 = (int *)__p;
              v78 = *((_QWORD *)__p + 7) & 0xFFFFFFFFFFFFFFFELL;
              if (v78)
              {
                v79 = (int *)__p;
                do
                {
                  while (1)
                  {
                    v66 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(v78 - 48), &v219);
                    if ((v66 & 0x80) == 0)
                      break;
                    v78 = *(_QWORD *)(v78 + 16);
                    if (!v78)
                      goto LABEL_218;
                  }
                  v79 = (int *)(v78 - 56);
                  v78 = *(_QWORD *)(v78 + 8);
                }
                while (v78);
LABEL_218:
                if (v79 != v77)
                {
                  v66 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v219, (_QWORD *)v79 + 1);
                  if ((v66 & 0x80u) == 0)
                    v77 = v79;
                }
              }
              if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v219.__r_.__value_.__l.__data_);
              if ((int *)*(v204 - 1) == v77)
              {
                AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v66);
                AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v219, "com.apple.coreaudio", "AMCP");
                v155 = *(NSObject **)v219.__r_.__value_.__l.__data_;
                std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v219);
                if (os_log_type_enabled(v155, OS_LOG_TYPE_ERROR))
                {
                  v156 = pthread_self();
                  v157 = pthread_mach_thread_np(v156);
                  LODWORD(v219.__r_.__value_.__l.__data_) = 67109890;
                  HIDWORD(v219.__r_.__value_.__r.__words[0]) = v157;
                  LOWORD(v219.__r_.__value_.__r.__words[1]) = 2080;
                  *(std::string::size_type *)((char *)&v219.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Graph_Description_Internal.h";
                  WORD1(v219.__r_.__value_.__r.__words[2]) = 1024;
                  HIDWORD(v219.__r_.__value_.__r.__words[2]) = 53;
                  v220 = 2080;
                  *(_QWORD *)v221 = "not (found != map.right.end())";
                  _os_log_error_impl(&dword_1B57BA000, v155, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&v219, 0x22u);
                }
                AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v218);
                v158 = __cxa_allocate_exception(0x40uLL);
                caulk::make_string((caulk *)"", (uint64_t)&v210);
                std::logic_error::logic_error(&v211, &v210);
                v211.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
                std::logic_error::logic_error(&v212, &v211);
                v214 = 0;
                v215 = 0;
                v216 = 0;
                v217 = -1;
                v212.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
                v213 = &unk_1E69A1230;
                boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v219, (uint64_t)&v212);
                *(_QWORD *)&v221[6] = "T AMCP::string_to_enum(const std::string &) [T = AMCP::Node_Clock_Policy]";
                v222 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_Description_Internal.h";
                v223 = 53;
                applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v205);
                v208 = v205;
                v207 = off_1E69A20A0;
                v209 = v206;
                v205 = 0uLL;
                v206 = 0;
                boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&v219, (uint64_t)&v207);
                boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v158, (uint64_t)&v219);
              }
              v80 = *((_QWORD *)__p + 7);
              v81 = *v77;
              if ((v80 & 0xFFFFFFFFFFFFFFFELL) != 0)
                v82 = (v80 & 0xFFFFFFFFFFFFFFFELL) - 56;
              else
                v82 = 0;
              boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>,std::string,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>::right>,std::less<std::string>,boost::multi_index::detail::nth_layer<1,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::right,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::delete_all_nodes((uint64_t)v202, v82);
              operator delete(__p);
              DWORD2(v185) = v81;
LABEL_175:
              if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v198.__r_.__value_.__l.__data_);
              goto LABEL_177;
            }
            if (!strcmp(__s1, "InputTerminals"))
            {
              AMCP::require_type((AMCP::Log::Scope_Registry *)v194, 4);
              v67 = *((_QWORD *)this + 1);
              if (v67 <= 0x20)
              {
                LOBYTE(v68) = 0;
                v210.__r_.__value_.__s.__data_[0] = 0;
                v69 = *(unsigned __int8 *)this;
                if (v69 <= 2)
                {
                  v70 = 8 * v69;
                  v68 = 0x5B7B00u >> v70;
                  v210.__r_.__value_.__s.__data_[0] = 1u >> v70;
                }
                v71 = 0;
                *(_DWORD *)this = 0;
                while (1)
                {
                  if (v71 == 4)
                    goto LABEL_209;
                  v72 = v210.__r_.__value_.__s.__data_[0];
                  do
                  {
                    if (*((_QWORD *)this + 1) != v67)
                      goto LABEL_325;
                    if (v72)
                      LOBYTE(v68) = minijson::istream_context::read(this);
                    if ((v68 & 0x80) != 0)
                      v73 = __maskrune((char)v68, 0x4000uLL);
                    else
                      v73 = *(_DWORD *)(v9 + 4 * (char)v68 + 60) & 0x4000;
                    v72 = 1;
                  }
                  while (v73);
                  v210.__r_.__value_.__s.__data_[0] = 1;
                  LOBYTE(v207) = v68;
                  switch(v71)
                  {
                    case 0:
                      if (v68 != 91)
                        goto LABEL_337;
                      v71 = 1;
                      v74 = 44;
                      LOBYTE(v68) = 91;
                      goto LABEL_207;
                    case 1:
                      if (v68 != 93)
                        goto LABEL_199;
                      goto LABEL_204;
                    case 2:
LABEL_199:
                      minijson::detail::parse_value_helper<minijson::istream_context>((uint64_t)&v219, (uint64_t)this, &v207, &v210);
                      AMCP::require_type((AMCP::Log::Scope_Registry *)LODWORD(v219.__r_.__value_.__l.__data_), 3);
                      AMCP::parse_json<AMCP::Terminal_Description>((uint64_t)&v199, this);
                      std::vector<AMCP::Terminal_Description>::push_back[abi:ne180100](&v186[3], (__int128 *)&v199);
                      for (i = 8; i != 2; i -= 3)
                      {
                        v212.__vftable = (std::logic_error_vtbl *)&(&v199)[i];
                        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v212);
                      }
                      v71 = 3;
                      LOBYTE(v68) = (_BYTE)v207;
                      v74 = (char)v207;
                      goto LABEL_207;
                    case 3:
                      if (v68 == 44)
                      {
                        v71 = 2;
LABEL_206:
                        v74 = v68;
                      }
                      else
                      {
                        if (v68 != 93)
                        {
LABEL_338:
                          v147 = 10;
                          goto LABEL_326;
                        }
LABEL_204:
                        v71 = 4;
                        v74 = 44;
                        LOBYTE(v68) = 93;
                      }
LABEL_207:
                      if (!v74)
                        goto LABEL_335;
                      break;
                    default:
                      goto LABEL_206;
                  }
                }
              }
LABEL_343:
              v147 = 12;
LABEL_326:
              v148 = __cxa_allocate_exception(0x18uLL);
              *v148 = &off_1E699B850;
              v149 = *((_QWORD *)this + 3);
              v136 = v149 != 0;
              v150 = v149 - 1;
              if (!v136)
                v150 = 0;
              v148[1] = v150;
              *((_DWORD *)v148 + 4) = v147;
            }
            if (!strcmp(__s1, "OutputTerminals"))
            {
              AMCP::require_type((AMCP::Log::Scope_Registry *)v194, 4);
              v32 = *((_QWORD *)this + 1);
              if (v32 > 0x20)
                goto LABEL_343;
              LOBYTE(v33) = 0;
              v210.__r_.__value_.__s.__data_[0] = 0;
              v34 = *(unsigned __int8 *)this;
              if (v34 <= 2)
              {
                v35 = 8 * v34;
                v33 = 0x5B7B00u >> v35;
                v210.__r_.__value_.__s.__data_[0] = 1u >> v35;
              }
              v36 = 0;
              *(_DWORD *)this = 0;
              while (2)
              {
                if (v36 != 4)
                {
                  v37 = v210.__r_.__value_.__s.__data_[0];
                  do
                  {
                    if (*((_QWORD *)this + 1) != v32)
                      goto LABEL_325;
                    if (v37)
                      LOBYTE(v33) = minijson::istream_context::read(this);
                    if ((v33 & 0x80) != 0)
                      v38 = __maskrune((char)v33, 0x4000uLL);
                    else
                      v38 = *(_DWORD *)(v9 + 4 * (char)v33 + 60) & 0x4000;
                    v37 = 1;
                  }
                  while (v38);
                  v210.__r_.__value_.__s.__data_[0] = 1;
                  LOBYTE(v207) = v33;
                  switch(v36)
                  {
                    case 0:
                      if (v33 != 91)
                        goto LABEL_337;
                      v36 = 1;
                      v39 = 44;
                      LOBYTE(v33) = 91;
                      goto LABEL_101;
                    case 1:
                      if (v33 != 93)
                        goto LABEL_93;
                      goto LABEL_98;
                    case 2:
LABEL_93:
                      minijson::detail::parse_value_helper<minijson::istream_context>((uint64_t)&v219, (uint64_t)this, &v207, &v210);
                      AMCP::require_type((AMCP::Log::Scope_Registry *)LODWORD(v219.__r_.__value_.__l.__data_), 3);
                      AMCP::parse_json<AMCP::Terminal_Description>((uint64_t)&v199, this);
                      std::vector<AMCP::Terminal_Description>::push_back[abi:ne180100](v186, (__int128 *)&v199);
                      for (j = 8; j != 2; j -= 3)
                      {
                        v212.__vftable = (std::logic_error_vtbl *)&(&v199)[j];
                        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v212);
                      }
                      v36 = 3;
                      LOBYTE(v33) = (_BYTE)v207;
                      v39 = (char)v207;
                      goto LABEL_101;
                    case 3:
                      if (v33 == 44)
                      {
                        v36 = 2;
LABEL_100:
                        v39 = v33;
                      }
                      else
                      {
                        if (v33 != 93)
                          goto LABEL_338;
LABEL_98:
                        v36 = 4;
                        v39 = 44;
                        LOBYTE(v33) = 93;
                      }
LABEL_101:
                      if (!v39)
                        goto LABEL_335;
                      continue;
                    default:
                      goto LABEL_100;
                  }
                }
                break;
              }
LABEL_209:
              v76 = *((_QWORD *)this + 1);
              if (v76)
                *((_QWORD *)this + 1) = v76 - 1;
            }
LABEL_177:
            v27 = 5;
LABEL_178:
            LOBYTE(v24) = HIBYTE(v197);
            v28 = HIBYTE(v197);
            v29 = HIBYTE(v197);
            v30 = HIBYTE(v197);
            if (!HIBYTE(v197))
            {
LABEL_335:
              v159 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v159, "This line should never be reached, please file a bug report");
              __cxa_throw(v159, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            return;
          case 5:
            if (v29 == 44)
            {
              v27 = 2;
              v30 = v29;
              goto LABEL_56;
            }
            if (v29 != 125)
              goto LABEL_338;
LABEL_235:
            v83 = *((_QWORD *)this + 1);
            if (v83)
              *((_QWORD *)this + 1) = v83 - 1;
            v84 = a1;
            v85 = a1[1];
            v86 = a1[2];
            if (v85 >= v86)
            {
              v89 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v85 - *a1) >> 3);
              v90 = v89 + 1;
              if (v89 + 1 > 0x222222222222222)
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              v91 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v86 - *a1) >> 3);
              if (2 * v91 > v90)
                v90 = 2 * v91;
              if (v91 >= 0x111111111111111)
                v92 = 0x222222222222222;
              else
                v92 = v90;
              v202[0] = v168;
              if (v92)
                v92 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Node_Description>>(v92);
              else
                v93 = 0;
              v94 = v92 + 120 * v89;
              v199 = (void **)v92;
              v200.i64[0] = v94;
              __p = (void *)(v92 + 120 * v93);
              std::construct_at[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description,AMCP::Node_Description*>(v94, (uint64_t)v179);
              v88 = v94 + 120;
              v200.i64[1] = v94 + 120;
              v96 = *a1;
              v95 = a1[1];
              v97 = v200.i64[0];
              if (v95 == *a1)
              {
                v98 = vdupq_n_s64(v95);
                v84 = a1;
              }
              else
              {
                do
                {
                  v95 -= 120;
                  std::construct_at[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description,AMCP::Node_Description*>(v97 - 120, v95);
                }
                while (v95 != v96);
                v84 = a1;
                v98 = *(int64x2_t *)a1;
                v88 = v200.i64[1];
              }
              *v84 = v97;
              v84[1] = v88;
              v200 = v98;
              v99 = (void *)v84[2];
              v84[2] = (uint64_t)__p;
              __p = v99;
              v199 = (void **)v98.i64[0];
              std::__split_buffer<AMCP::Node_Description>::~__split_buffer((uint64_t)&v199);
            }
            else
            {
              std::construct_at[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description,AMCP::Node_Description*>(v85, (uint64_t)v179);
              v88 = v87 + 120;
              a1[1] = v87 + 120;
            }
            v84[1] = v88;
            for (k = 12; k != 6; k -= 3)
            {
              v199 = &v179[k];
              std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100](&v199);
            }
            if (SBYTE7(v185) < 0)
              operator delete((void *)v184);
            if (SHIBYTE(v181) < 0)
              operator delete(v179[1]);
            v19 = 3;
            LOBYTE(v16) = v178;
            goto LABEL_260;
          default:
            goto LABEL_178;
        }
      }
    }
    break;
  }
  v133 = *((_QWORD *)this + 1);
  if (v133)
    *((_QWORD *)this + 1) = v133 - 1;
}

void sub_1B5C54184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void **a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a72;

  boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::~multi_index_container(a15);
  if (a72 < 0)
    operator delete(__p);
  AMCP::Node_Description::~Node_Description((void **)&a38);
  AMCP::Graph_Description::~Graph_Description(a25);
  _Unwind_Resume(a1);
}

uint64_t AMCP::graph_description_from_json@<X0>(const std::string *a1@<X0>, uint64_t *a2@<X8>)
{
  _BYTE v4[32];
  uint64_t v5[3];
  _QWORD v6[12];
  char v7;
  uint64_t v8;

  std::istringstream::basic_istringstream[abi:ne180100]((uint64_t)v6, a1);
  minijson::istream_context::istream_context((uint64_t)v4, (uint64_t)v6);
  AMCP::parse_json<AMCP::Graph_Description>(a2, (minijson::istream_context *)v4);
  std::__list_imp<std::vector<char>>::clear(v5);
  v6[0] = *MEMORY[0x1E0DE4F58];
  *(_QWORD *)((char *)v6 + *(_QWORD *)(v6[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 24);
  v6[2] = MEMORY[0x1E0DE4FB8] + 16;
  if (v7 < 0)
    operator delete((void *)v6[10]);
  std::streambuf::~streambuf();
  std::istream::~istream();
  return MEMORY[0x1B5E50598](&v8);
}

void sub_1B5C547A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;

  std::__list_imp<std::vector<char>>::clear((uint64_t *)(v35 + 32));
  a17 = *MEMORY[0x1E0DE4F58];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 24);
  a19 = MEMORY[0x1E0DE4FB8] + 16;
  if (a32 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1B5E50598](&a35);
  _Unwind_Resume(a1);
}

uint64_t std::istringstream::basic_istringstream[abi:ne180100](uint64_t a1, const std::string *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;

  v4 = MEMORY[0x1E0DE4FD8];
  v5 = MEMORY[0x1E0DE4FD8] + 64;
  *(_QWORD *)(a1 + 120) = MEMORY[0x1E0DE4FD8] + 64;
  v6 = a1 + 16;
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 16);
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + *(_QWORD *)(v7 - 24)) = v8;
  *(_QWORD *)(a1 + 8) = 0;
  v9 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v9, (void *)(a1 + 16));
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  *(_QWORD *)a1 = v4 + 24;
  *(_QWORD *)(a1 + 120) = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_QWORD *)(a1 + 16) = v10;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 8;
  std::string::operator=((std::string *)(a1 + 80), a2);
  std::stringbuf::__init_buf_ptrs[abi:ne180100](v6);
  return a1;
}

void sub_1B5C54904(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x1B5E50598](v1);
  _Unwind_Resume(a1);
}

uint64_t minijson::istream_context::istream_context(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;

  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = a2;
  v3 = a1 + 32;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a1 + 32;
  *(_QWORD *)(a1 + 40) = a1 + 32;
  *(_QWORD *)(a1 + 48) = 0;
  v4 = operator new(0x28uLL);
  v4[2] = 0;
  v4[3] = 0;
  v4[4] = 0;
  *v4 = v3;
  v4[1] = v3;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = 1;
  return a1;
}

void sub_1B5C549A0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::__list_imp<std::vector<char>>::clear(v1);
  _Unwind_Resume(a1);
}

void std::__list_imp<std::vector<char>>::clear(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  void *v5;
  uint64_t *v6;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    while (v3 != a1)
    {
      v6 = (uint64_t *)v3[1];
      v5 = (void *)v3[2];
      if (v5)
      {
        v3[3] = (uint64_t)v5;
        operator delete(v5);
      }
      operator delete(v3);
      v3 = v6;
    }
  }
}

uint64_t AMCP::extended_graph_description_from_json@<X0>(const std::string *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  int v7;
  char v8;
  unsigned int v9;
  int v10;
  char v11;
  unint64_t v12;
  unsigned int v13;
  int v14;
  int v15;
  char v16;
  unsigned int v17;
  int v18;
  char v19;
  unint64_t v20;
  unsigned int v21;
  int v22;
  char v23;
  char v24;
  char v25;
  char v26;
  int v27;
  _QWORD *v28;
  uint64_t v29;
  char *v30;
  std::string *v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  unint64_t v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  _QWORD *v53;
  int64x2_t v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  int v58;
  _QWORD *v59;
  uint64_t v60;
  char *v61;
  std::runtime_error *v62;
  _QWORD *exception;
  int v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  std::runtime_error *v69;
  int v70;
  void **v71;
  char *__s1;
  uint64_t v73;
  char *v74;
  minijson::istream_context *v75;
  unint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79[2];
  uint64_t v80;
  _QWORD v81[12];
  char v82;
  uint64_t v83;
  unsigned int v84[9];
  unsigned __int8 v85;
  char v86;
  char v87[38];
  unsigned __int8 v88;
  char v89;
  _OWORD v90[3];
  _BYTE v91[15];
  void **v92;
  char *v93;
  uint64_t v94;
  __int16 v95;
  void *v96[2];
  char v97;

  std::istringstream::basic_istringstream[abi:ne180100]((uint64_t)v81, a1);
  minijson::istream_context::istream_context((uint64_t)&v75, (uint64_t)v81);
  *(_QWORD *)(a2 + 64) = 0;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v73 = a2;
  v3 = v76;
  if (v76 >= 0x21)
    goto LABEL_181;
  LOBYTE(v4) = 0;
  v85 = 0;
  if (v75 <= 2u)
  {
    v4 = 0x5B7B00u >> (8 * (_BYTE)v75);
    v85 = 1u >> (8 * (_BYTE)v75);
  }
  v5 = 0;
  LODWORD(v75) = 0;
  v71 = (void **)(a2 + 24);
  v6 = MEMORY[0x1E0C80978];
  __s1 = "";
LABEL_5:
  if (v5 != 6)
  {
    v7 = v85;
    while (1)
    {
      if (v76 != v3)
      {
LABEL_163:
        exception = __cxa_allocate_exception(0x18uLL);
        *exception = &off_1E699B850;
        v65 = 11;
        goto LABEL_164;
      }
      if (v7)
      {
        v8 = std::istream::get();
        if ((*((_BYTE *)v77 + *(_QWORD *)(*v77 - 24) + 32) & 5) != 0)
        {
          v9 = 0;
          LOBYTE(v4) = 0;
          goto LABEL_13;
        }
        LOBYTE(v4) = v8;
        ++v78;
      }
      v9 = (char)v4;
      if ((v4 & 0x80) != 0)
      {
        v10 = __maskrune((char)v4, 0x4000uLL);
        goto LABEL_15;
      }
LABEL_13:
      v10 = *(_DWORD *)(v6 + 4 * v9 + 60) & 0x4000;
LABEL_15:
      v7 = 1;
      if (!v10)
      {
        v85 = 1;
        v86 = v4;
        switch(v5)
        {
          case 0:
            if (v4 != 123)
            {
LABEL_175:
              exception = __cxa_allocate_exception(0x18uLL);
              *exception = &off_1E699B850;
              v65 = 8;
              goto LABEL_164;
            }
            v5 = 1;
            v11 = 44;
            LOBYTE(v4) = 123;
LABEL_156:
            if (!v11)
              goto LABEL_157;
            goto LABEL_5;
          case 1:
            if (v4 == 34)
              goto LABEL_141;
            if (v4 == 125)
            {
              v5 = 6;
              v11 = 44;
              goto LABEL_156;
            }
LABEL_177:
            exception = __cxa_allocate_exception(0x18uLL);
            *exception = &off_1E699B850;
            v65 = 1;
            goto LABEL_164;
          case 2:
            if (v4 != 34)
              goto LABEL_177;
LABEL_141:
            v59 = operator new(0x28uLL);
            v59[2] = 0;
            v59[3] = 0;
            v59[4] = 0;
            v60 = v79[0];
            *v59 = v79[0];
            v59[1] = v79;
            *(_QWORD *)(v60 + 8) = v59;
            v79[0] = (uint64_t)v59;
            ++v80;
            minijson::detail::read_quoted_string<minijson::istream_context>(&v75);
            if (*(_QWORD *)(v79[0] + 16) == *(_QWORD *)(v79[0] + 24))
              v61 = 0;
            else
              v61 = *(char **)(v79[0] + 16);
            __s1 = v61;
            v5 = 3;
            goto LABEL_154;
          case 3:
            if (v4 == 58)
            {
              v5 = 4;
              v11 = 44;
              LOBYTE(v4) = 58;
              goto LABEL_156;
            }
            exception = __cxa_allocate_exception(0x18uLL);
            *exception = &off_1E699B850;
            v65 = 9;
            goto LABEL_164;
          case 4:
            minijson::detail::parse_value_helper<minijson::istream_context>((uint64_t)v84, (uint64_t)&v75, &v86, &v85);
            if (!strcmp(__s1, "graph"))
            {
              AMCP::require_type((AMCP::Log::Scope_Registry *)v84[0], 3);
              AMCP::parse_json<AMCP::Graph_Description>((uint64_t *)v90, (minijson::istream_context *)&v75);
              std::vector<AMCP::Node_Description>::__vdeallocate((void **)v73);
              *(_OWORD *)v73 = v90[0];
              *(_QWORD *)(v73 + 16) = *(_QWORD *)&v90[1];
              memset(v90, 0, 24);
              std::vector<AMCP::Wire_Description>::__vdeallocate(v71);
              *(_OWORD *)(v73 + 24) = *(_OWORD *)((char *)&v90[1] + 8);
              *(_QWORD *)(v73 + 40) = *((_QWORD *)&v90[2] + 1);
              memset((char *)&v90[1] + 8, 0, 24);
              v92 = (void **)&v90[1] + 1;
              std::vector<AMCP::Wire_Description>::__destroy_vector::operator()[abi:ne180100](&v92);
              v92 = (void **)v90;
              std::vector<AMCP::Node_Description>::__destroy_vector::operator()[abi:ne180100](&v92);
            }
            else if (!strcmp(__s1, "wire_properties"))
            {
              AMCP::require_type((AMCP::Log::Scope_Registry *)v84[0], 4);
              v12 = v76;
              if (v76 < 0x21)
              {
                LOBYTE(v13) = 0;
                v88 = 0;
                if (v75 <= 2u)
                {
                  v13 = 0x5B7B00u >> (8 * (_BYTE)v75);
                  v88 = 1u >> (8 * (_BYTE)v75);
                }
                v14 = 0;
                LODWORD(v75) = 0;
LABEL_25:
                if (v14 != 4)
                {
                  v15 = v88;
                  while (1)
                  {
                    if (v76 != v12)
                      goto LABEL_163;
                    if (v15)
                    {
                      v16 = std::istream::get();
                      if ((*((_BYTE *)v77 + *(_QWORD *)(*v77 - 24) + 32) & 5) != 0)
                      {
                        v17 = 0;
                        LOBYTE(v13) = 0;
                        goto LABEL_33;
                      }
                      LOBYTE(v13) = v16;
                      ++v78;
                    }
                    v17 = (char)v13;
                    if ((v13 & 0x80) != 0)
                    {
                      v18 = __maskrune((char)v13, 0x4000uLL);
                      goto LABEL_35;
                    }
LABEL_33:
                    v18 = *(_DWORD *)(v6 + 4 * v17 + 60) & 0x4000;
LABEL_35:
                    v15 = 1;
                    if (!v18)
                    {
                      v88 = 1;
                      v89 = v13;
                      switch(v14)
                      {
                        case 0:
                          if (v13 != 91)
                            goto LABEL_175;
                          v14 = 1;
                          v19 = 44;
                          LOBYTE(v13) = 91;
                          goto LABEL_132;
                        case 1:
                          if (v13 != 93)
                            goto LABEL_40;
                          goto LABEL_98;
                        case 2:
LABEL_40:
                          minijson::detail::parse_value_helper<minijson::istream_context>((uint64_t)v87, (uint64_t)&v75, &v89, &v88);
                          *(_QWORD *)v91 = 0;
                          memset(v90, 0, sizeof(v90));
                          *(_DWORD *)&v91[8] = 64;
                          *(_WORD *)&v91[12] = 0;
                          v91[14] = 0;
                          v20 = v76;
                          if (v76 >= 0x21)
                          {
                            v70 = 12;
LABEL_168:
                            v67 = __cxa_allocate_exception(0x18uLL);
                            *v67 = &off_1E699B850;
                            v68 = v78 - 1;
                            if (!v78)
                              v68 = 0;
                            v67[1] = v68;
                            *((_DWORD *)v67 + 4) = v70;
                          }
                          LOBYTE(v21) = 0;
                          v95 = 0;
                          if (v75 <= 2u)
                          {
                            v21 = 0x5B7B00u >> (8 * (_BYTE)v75);
                            HIBYTE(v95) = v21;
                            LOBYTE(v95) = 1u >> (8 * (_BYTE)v75);
                          }
                          v22 = 0;
                          LODWORD(v75) = 0;
                          v23 = v21;
                          v24 = v21;
                          v25 = v21;
                          v74 = "";
                          break;
                        case 3:
                          if (v13 == 44)
                          {
                            v14 = 2;
                            goto LABEL_131;
                          }
                          if (v13 != 93)
                            goto LABEL_178;
LABEL_98:
                          v14 = 4;
                          v19 = 44;
                          LOBYTE(v13) = 93;
                          goto LABEL_132;
                        default:
                          goto LABEL_131;
                      }
                      do
                      {
LABEL_44:
                        if (v76 != v20)
                        {
                          v70 = 11;
                          goto LABEL_168;
                        }
                        if ((_BYTE)v95)
                        {
                          v26 = std::istream::get();
                          if ((*((_BYTE *)v77 + *(_QWORD *)(*v77 - 24) + 32) & 5) != 0)
                          {
                            LOBYTE(v21) = 0;
                          }
                          else
                          {
                            LOBYTE(v21) = v26;
                            ++v78;
                          }
                          HIBYTE(v95) = v21;
                          v23 = v21;
                          v24 = v21;
                          v25 = v21;
                        }
                        LOBYTE(v95) = 1;
                        if (v25 < 0)
                          v27 = __maskrune(v25, 0x4000uLL);
                        else
                          v27 = *(_DWORD *)(v6 + 4 * v25 + 60) & 0x4000;
                      }
                      while (v27);
                      switch(v22)
                      {
                        case 0:
                          if (v21 != 123)
                          {
                            v70 = 8;
                            goto LABEL_168;
                          }
                          v22 = 1;
                          LOBYTE(v21) = 123;
                          v23 = 123;
                          v24 = 123;
                          v25 = 123;
                          goto LABEL_44;
                        case 1:
                          if (v21 == 34)
                            goto LABEL_74;
                          if (v21 == 125)
                            goto LABEL_103;
LABEL_172:
                          v70 = 1;
                          goto LABEL_168;
                        case 2:
                          if (v21 != 34)
                            goto LABEL_172;
LABEL_74:
                          v28 = operator new(0x28uLL);
                          v28[2] = 0;
                          v28[3] = 0;
                          v28[4] = 0;
                          v29 = v79[0];
                          *v28 = v79[0];
                          v28[1] = v79;
                          *(_QWORD *)(v29 + 8) = v28;
                          v79[0] = (uint64_t)v28;
                          ++v80;
                          minijson::detail::read_quoted_string<minijson::istream_context>(&v75);
                          if (*(_QWORD *)(v79[0] + 16) == *(_QWORD *)(v79[0] + 24))
                            v30 = 0;
                          else
                            v30 = *(char **)(v79[0] + 16);
                          v74 = v30;
                          v22 = 3;
                          goto LABEL_84;
                        case 3:
                          if (v23 != 58)
                          {
                            v70 = 9;
                            goto LABEL_168;
                          }
                          v22 = 4;
                          v23 = 58;
                          v24 = 58;
                          v25 = 58;
                          goto LABEL_44;
                        case 4:
                          minijson::detail::parse_value_helper<minijson::istream_context>((uint64_t)&v92, (uint64_t)&v75, (_BYTE *)&v95 + 1, &v95);
                          if (!strcmp(v74, "source_clock_node_uid"))
                          {
                            AMCP::require_type((AMCP::Log::Scope_Registry *)v92, 0);
                            v31 = (std::string *)v90;
                          }
                          else
                          {
                            if (strcmp(v74, "destination_clock_node_uid"))
                            {
                              if (!strcmp(v74, "requires_resampler"))
                              {
                                AMCP::require_type((AMCP::Log::Scope_Registry *)v92, 2);
                                v91[0] = v94 != 0;
                                goto LABEL_83;
                              }
                              if (!strcmp(v74, "requires_delay"))
                              {
                                AMCP::require_type((AMCP::Log::Scope_Registry *)v92, 2);
                                v91[1] = v94 != 0;
                                goto LABEL_83;
                              }
                              if (!strcmp(v74, "requires_format_conversion"))
                              {
                                AMCP::require_type((AMCP::Log::Scope_Registry *)v92, 2);
                                v91[2] = v94 != 0;
                                goto LABEL_83;
                              }
                              if (!strcmp(v74, "requires_drift_correction"))
                              {
                                AMCP::require_type((AMCP::Log::Scope_Registry *)v92, 2);
                                v91[3] = v94 != 0;
                                goto LABEL_83;
                              }
                              if (!strcmp(v74, "resampler_type"))
                              {
                                AMCP::require_type((AMCP::Log::Scope_Registry *)v92, 0);
                                v32 = std::string::basic_string[abi:ne180100]<0>(v96, v93);
                                *(_DWORD *)&v91[4] = AMCP::string_to_enum<AMCP::Resampler_Type>((uint64_t)v32);
                              }
                              else
                              {
                                if (strcmp(v74, "resampler_quality"))
                                {
                                  if (!strcmp(v74, "requires_channel_map"))
                                  {
                                    AMCP::require_type((AMCP::Log::Scope_Registry *)v92, 2);
                                    v91[12] = v94 != 0;
                                  }
                                  else if (!strcmp(v74, "requires_volume_processing"))
                                  {
                                    AMCP::require_type((AMCP::Log::Scope_Registry *)v92, 2);
                                    v91[13] = v94 != 0;
                                  }
                                  else if (!strcmp(v74, "requires_stereo_to_mono_mixdown"))
                                  {
                                    AMCP::require_type((AMCP::Log::Scope_Registry *)v92, 2);
                                    v91[14] = v94 != 0;
                                  }
                                  goto LABEL_83;
                                }
                                AMCP::require_type((AMCP::Log::Scope_Registry *)v92, 0);
                                v33 = std::string::basic_string[abi:ne180100]<0>(v96, v93);
                                *(_DWORD *)&v91[8] = AMCP::string_to_enum<AMCP::Resampler_Quality>((uint64_t)v33);
                              }
                              if (v97 < 0)
                                operator delete(v96[0]);
LABEL_83:
                              v22 = 5;
LABEL_84:
                              LOBYTE(v21) = HIBYTE(v95);
                              v23 = HIBYTE(v95);
                              v24 = HIBYTE(v95);
                              v25 = HIBYTE(v95);
                              if (!HIBYTE(v95))
                              {
                                v69 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                std::runtime_error::runtime_error(v69, "This line should never be reached, please file a bug report");
                                __cxa_throw(v69, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                              }
                              goto LABEL_44;
                            }
                            AMCP::require_type((AMCP::Log::Scope_Registry *)v92, 0);
                            v31 = (std::string *)((char *)&v90[1] + 8);
                          }
                          std::string::__assign_external(v31, v93);
                          goto LABEL_83;
                        case 5:
                          if (v24 == 44)
                          {
                            v22 = 2;
                            v25 = v24;
                            goto LABEL_44;
                          }
                          if (v24 != 125)
                          {
                            v70 = 10;
                            goto LABEL_168;
                          }
LABEL_103:
                          if (v76)
                            --v76;
                          v35 = *(_QWORD *)(v73 + 56);
                          v34 = *(_QWORD *)(v73 + 64);
                          if (v35 >= v34)
                          {
                            v39 = *(_QWORD *)(v73 + 48);
                            v40 = (uint64_t)(v35 - v39) >> 6;
                            v41 = v40 + 1;
                            if ((unint64_t)(v40 + 1) >> 58)
                              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                            v42 = v34 - v39;
                            if (v42 >> 5 > v41)
                              v41 = v42 >> 5;
                            if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFC0)
                              v43 = 0x3FFFFFFFFFFFFFFLL;
                            else
                              v43 = v41;
                            if (v43)
                              v43 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>>(v43);
                            else
                              v44 = 0;
                            v45 = v43 + (v40 << 6);
                            v46 = v90[0];
                            *(_QWORD *)(v45 + 16) = *(_QWORD *)&v90[1];
                            *(_OWORD *)v45 = v46;
                            memset(v90, 0, 24);
                            v47 = *(_OWORD *)((char *)&v90[1] + 8);
                            *(_QWORD *)(v45 + 40) = *((_QWORD *)&v90[2] + 1);
                            *(_OWORD *)(v45 + 24) = v47;
                            memset((char *)&v90[1] + 8, 0, 24);
                            v48 = *(_QWORD *)v91;
                            *(_QWORD *)(v45 + 55) = *(_QWORD *)&v91[7];
                            *(_QWORD *)(v45 + 48) = v48;
                            if (v35 == v39)
                            {
                              v54 = vdupq_n_s64(v35);
                              v49 = v43 + (v40 << 6);
                              v53 = (_QWORD *)v73;
                            }
                            else
                            {
                              v49 = v43 + (v40 << 6);
                              do
                              {
                                v50 = *(_OWORD *)(v35 - 64);
                                *(_QWORD *)(v49 - 48) = *(_QWORD *)(v35 - 48);
                                *(_OWORD *)(v49 - 64) = v50;
                                *(_QWORD *)(v35 - 56) = 0;
                                *(_QWORD *)(v35 - 48) = 0;
                                *(_QWORD *)(v35 - 64) = 0;
                                v51 = *(_OWORD *)(v35 - 40);
                                *(_QWORD *)(v49 - 24) = *(_QWORD *)(v35 - 24);
                                *(_OWORD *)(v49 - 40) = v51;
                                *(_QWORD *)(v35 - 32) = 0;
                                *(_QWORD *)(v35 - 24) = 0;
                                *(_QWORD *)(v35 - 40) = 0;
                                v52 = *(_QWORD *)(v35 - 16);
                                *(_QWORD *)(v49 - 9) = *(_QWORD *)(v35 - 9);
                                *(_QWORD *)(v49 - 16) = v52;
                                v49 -= 64;
                                v35 -= 64;
                              }
                              while (v35 != v39);
                              v53 = (_QWORD *)v73;
                              v54 = *(int64x2_t *)(v73 + 48);
                            }
                            v55 = v45 + 64;
                            v53[6] = v49;
                            v53[7] = v45 + 64;
                            v53[8] = v43 + (v44 << 6);
                            v57 = v54.i64[1];
                            v56 = (void *)v54.i64[0];
                            while ((void *)v57 != v56)
                            {
                              v57 -= 64;
                              std::__destroy_at[abi:ne180100]<std::pair<std::string,std::string>,0>(v57);
                            }
                            if (v56)
                              operator delete(v56);
                            v58 = SHIBYTE(v90[2]);
                            *(_QWORD *)(v73 + 56) = v55;
                            if (v58 < 0)
                              operator delete(*((void **)&v90[1] + 1));
                          }
                          else
                          {
                            v36 = v90[0];
                            *(_QWORD *)(v35 + 16) = *(_QWORD *)&v90[1];
                            *(_OWORD *)v35 = v36;
                            memset(v90, 0, 24);
                            v37 = *((_QWORD *)&v90[2] + 1);
                            *(_OWORD *)(v35 + 24) = *(_OWORD *)((char *)&v90[1] + 8);
                            *(_QWORD *)(v35 + 40) = v37;
                            memset((char *)&v90[1] + 8, 0, 24);
                            v38 = *(_QWORD *)v91;
                            *(_QWORD *)(v35 + 55) = *(_QWORD *)&v91[7];
                            *(_QWORD *)(v35 + 48) = v38;
                            *(_QWORD *)(v73 + 56) = v35 + 64;
                          }
                          if (SBYTE7(v90[1]) < 0)
                            operator delete(*(void **)&v90[0]);
                          v14 = 3;
                          LOBYTE(v13) = v89;
LABEL_131:
                          v19 = v13;
LABEL_132:
                          if (!v19)
                          {
LABEL_157:
                            v62 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                            std::runtime_error::runtime_error(v62, "This line should never be reached, please file a bug report");
                            __cxa_throw(v62, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                          }
                          goto LABEL_25;
                        default:
                          goto LABEL_84;
                      }
                    }
                  }
                }
                if (v76)
                  --v76;
                v5 = 5;
                goto LABEL_154;
              }
LABEL_181:
              exception = __cxa_allocate_exception(0x18uLL);
              *exception = &off_1E699B850;
              v65 = 12;
LABEL_164:
              v66 = v78 - 1;
              if (!v78)
                v66 = 0;
              exception[1] = v66;
              *((_DWORD *)exception + 4) = v65;
            }
            v5 = 5;
LABEL_154:
            LOBYTE(v4) = v86;
            goto LABEL_155;
          case 5:
            if (v4 == 44)
            {
              v5 = 2;
LABEL_155:
              v11 = v4;
              goto LABEL_156;
            }
            if (v4 == 125)
            {
              v5 = 6;
              v11 = 44;
              LOBYTE(v4) = 125;
              goto LABEL_156;
            }
LABEL_178:
            exception = __cxa_allocate_exception(0x18uLL);
            *exception = &off_1E699B850;
            v65 = 10;
            goto LABEL_164;
          default:
            goto LABEL_154;
        }
      }
    }
  }
  if (v76)
    --v76;
  std::__list_imp<std::vector<char>>::clear(v79);
  v81[0] = *MEMORY[0x1E0DE4F58];
  *(_QWORD *)((char *)v81 + *(_QWORD *)(v81[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 24);
  v81[2] = MEMORY[0x1E0DE4FB8] + 16;
  if (v82 < 0)
    operator delete((void *)v81[10]);
  std::streambuf::~streambuf();
  std::istream::~istream();
  return MEMORY[0x1B5E50598](&v83);
}

void sub_1B5C557F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  uint64_t v41;

  if (*(char *)(v41 - 105) < 0)
    operator delete(*(void **)(v41 - 128));
  if (*(char *)(v41 - 193) < 0)
    operator delete(*(void **)(v41 - 216));
  if (*(char *)(v41 - 217) < 0)
    operator delete(*(void **)(v41 - 240));
  *(_QWORD *)(v41 - 104) = a13 + 48;
  std::vector<AMCP::Wire_Connection_Properties>::__destroy_vector::operator()[abi:ne180100]((void ***)(v41 - 104));
  *(_QWORD *)(v41 - 104) = a13 + 24;
  std::vector<AMCP::Wire_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)(v41 - 104));
  *(_QWORD *)(v41 - 104) = a13;
  std::vector<AMCP::Node_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)(v41 - 104));
  std::__list_imp<std::vector<char>>::clear(&a20);
  a23 = *MEMORY[0x1E0DE4F58];
  *(uint64_t *)((char *)&a23 + *(_QWORD *)(a23 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 24);
  a25 = MEMORY[0x1E0DE4FB8] + 16;
  if (a38 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1B5E50598](&a41);
  _Unwind_Resume(a1);
}

void std::default_delete<HALS_IOProcessor_ProcessingManifest>::operator()[abi:ne180100](uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(_QWORD *)(a1 + 72) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1B5E50688);
}

uint64_t HALS_IOProcessor_ProcessingManifest::ProcessingChain::append(uint64_t a1, _OWORD *a2)
{
  unint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;

  v5 = *(_OWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v5 >= v4)
  {
    v7 = *(_OWORD **)a1;
    v8 = ((uint64_t)v5 - *(_QWORD *)a1) >> 4;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 60)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v10 = v4 - (_QWORD)v7;
    if (v10 >> 3 > v9)
      v9 = v10 >> 3;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 60)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v12 = (char *)operator new(16 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[16 * v8];
    *(_OWORD *)v13 = *a2;
    v6 = v13 + 16;
    if (v5 != v7)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *(v5 - 1);
        v13 -= 16;
        --v5;
      }
      while (v5 != v7);
      v5 = *(_OWORD **)a1;
    }
    *(_QWORD *)a1 = v13;
    *(_QWORD *)(a1 + 8) = v6;
    *(_QWORD *)(a1 + 16) = &v12[16 * v11];
    if (v5)
      operator delete(v5);
  }
  else
  {
    *v5 = *a2;
    v6 = v5 + 1;
  }
  *(_QWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 24) |= *(_DWORD *)a2;
  return a1;
}

void AMCP::DSP_Node::~DSP_Node(AMCP::DSP_Node *this)
{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = &off_1E696F358;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = &off_1E696F358;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1B5E50688);
}

{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = &off_1E696F358;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

AMCP::DSP_Node *AMCP::DSP_Node::DSP_Node(AMCP::DSP_Node *this, AMCP::System_Context *a2, unsigned int a3)
{
  AMCP::Node *v4;
  uint64_t v5;
  NSObject *v7;
  _opaque_pthread_t *v8;
  mach_port_t v9;
  NSObject **v10;
  __int16 v11;
  char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  const char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = AMCP::Node::Node(this, a2, a3);
  *(_QWORD *)v4 = &off_1E699B908;
  v5 = AMCP::Object::constructed_correct_class(v4, (AMCP *)0x6473706E);
  if ((v5 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
    v7 = *v10;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v10);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = pthread_self();
      v9 = pthread_mach_thread_np(v8);
      LODWORD(v10) = 67109890;
      HIDWORD(v10) = v9;
      v11 = 2080;
      v12 = "DSP_Node.cpp";
      v13 = 1024;
      v14 = 19;
      v15 = 2080;
      v16 = "constructed_correct_class(k_class_id_dsp_node)";
      _os_log_error_impl(&dword_1B57BA000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s the core is not of the proper class", (uint8_t *)&v10, 0x22u);
    }
    abort();
  }
  return this;
}

void sub_1B5C55C24(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  *v1 = &off_1E696F358;
  v3 = (std::__shared_weak_count *)v1[3];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

AMCP::Object *AMCP::DSP_Node::DSP_Node(AMCP::Object *a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v4;
  NSObject *v6;
  _opaque_pthread_t *v7;
  mach_port_t v8;
  CFTypeRef cf;
  uint8_t buf[8];
  __int16 v11;
  char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  const char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  cf = *a3;
  *a3 = 0;
  AMCP::Node::Node((uint64_t)a1, a2, (uint64_t)&cf);
  if (cf)
    CFRelease(cf);
  *(_QWORD *)a1 = &off_1E699B908;
  v4 = AMCP::Object::constructed_correct_class(a1, (AMCP *)0x6473706E);
  if ((v4 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v6 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v7 = pthread_self();
      v8 = pthread_mach_thread_np(v7);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v8;
      v11 = 2080;
      v12 = "DSP_Node.cpp";
      v13 = 1024;
      v14 = 26;
      v15 = 2080;
      v16 = "constructed_correct_class(k_class_id_dsp_node)";
      _os_log_error_impl(&dword_1B57BA000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s the core is not of the proper class", buf, 0x22u);
    }
    abort();
  }
  return a1;
}

void sub_1B5C55D98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _QWORD *v10;
  std::__shared_weak_count *v12;

  *v10 = &off_1E696F358;
  v12 = (std::__shared_weak_count *)v10[3];
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  _Unwind_Resume(exception_object);
}

void AMCP::DSP_Node::get_tail_time_handler(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 24) = 0;
}

uint64_t AMCP::DSP_Node::set_tail_time_handler()
{
  return 0;
}

uint64_t AMCP::DSP_Node::set_end_cycle_handler()
{
  return 0;
}

uint64_t AMCP::DSP_Node::set_begin_cycle_handler()
{
  return 0;
}

void HALS_Graph_Manager::~HALS_Graph_Manager(HALS_Graph_Manager *this)
{
  *(_QWORD *)this = &off_1E699B998;
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((HALS_Graph_Manager *)((char *)this + 440));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 424);
  AMCP::IO_Core::Graph_Manager::~Graph_Manager(this);
}

{
  *(_QWORD *)this = &off_1E699B998;
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((HALS_Graph_Manager *)((char *)this + 440));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 424);
  AMCP::IO_Core::Graph_Manager::~Graph_Manager(this);
  JUMPOUT(0x1B5E50688);
}

uint64_t HALS_Graph_Manager::get_graph_host@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 432);
  *a2 = *(_QWORD *)(this + 424);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

void HALS_Graph_Manager::enqueue_config_change(uint64_t a1, int a2, int a3, int a4, uint64_t a5)
{
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  _QWORD block[5];
  dispatch_queue_t queue[41];

  queue[40] = *(dispatch_queue_t *)MEMORY[0x1E0C80C00];
  AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)queue, *(dispatch_object_t *)(a1 + 440));
  v10 = a1;
  v11 = a3;
  v12 = a2;
  v13 = a4;
  v14 = a5;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN10applesauce8dispatch2v19sync_implIZN18HALS_Graph_Manager21enqueue_config_changeEjjjRKNSt3__18functionIFvvEEEE3__0EEvP16dispatch_queue_sOT_NS4_17integral_constantIbLb1EEE_block_invoke;
  block[3] = &__block_descriptor_tmp_98_13524;
  block[4] = &v10;
  dispatch_sync(queue[0], block);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)queue);
}

AMCP::Utility::Dispatch_Queue *HALS_Graph_Manager::get_work_queue@<X0>(dispatch_object_t *this@<X0>, AMCP::Utility::Dispatch_Queue *a2@<X8>)
{
  return AMCP::Utility::Dispatch_Queue::Dispatch_Queue(a2, this[55]);
}

void HALS_Graph_Manager::get_device_list(HALS_Graph_Manager *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_mutex_base *v8;
  void ***v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  int **v13;
  int **v14;
  _QWORD v15[3];
  int v16;
  void **v17[3];
  void ***v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 53);
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 54);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = (std::__shared_mutex_base *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  v17[0] = (void **)&off_1E699C1B8;
  v18 = v17;
  AMCP::Core::Broker::fetch_cores_if ((uint64_t)v15, v8, (uint64_t)v17);
  v9 = v18;
  if (v18 == v17)
  {
    v10 = 4;
    v9 = v17;
    goto LABEL_8;
  }
  if (v18)
  {
    v10 = 5;
LABEL_8:
    ((void (*)(void))(*v9)[v10])();
  }
  if (v5)
  {
    v11 = (unint64_t *)&v5->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v13 = (int **)v15[0];
  v14 = (int **)v15[1];
  v17[0] = (void **)a2;
  while (v13 != v14)
  {
    v16 = **v13;
    std::back_insert_iterator<std::vector<unsigned int>>::operator=[abi:ne180100]((uint64_t *)v17, &v16);
    v13 += 2;
  }
  v17[0] = (void **)v15;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](v17);
}

void sub_1B5C56174(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void HALS_Graph_Manager::get_clock_device_list(HALS_Graph_Manager *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_mutex_base *v8;
  void ***v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  int **v13;
  int **v14;
  _QWORD v15[3];
  int v16;
  void **v17[3];
  void ***v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 53);
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 54);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = (std::__shared_mutex_base *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  v17[0] = (void **)&off_1E699C238;
  v18 = v17;
  AMCP::Core::Broker::fetch_cores_if ((uint64_t)v15, v8, (uint64_t)v17);
  v9 = v18;
  if (v18 == v17)
  {
    v10 = 4;
    v9 = v17;
    goto LABEL_8;
  }
  if (v18)
  {
    v10 = 5;
LABEL_8:
    ((void (*)(void))(*v9)[v10])();
  }
  if (v5)
  {
    v11 = (unint64_t *)&v5->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v13 = (int **)v15[0];
  v14 = (int **)v15[1];
  v17[0] = (void **)a2;
  while (v13 != v14)
  {
    v16 = **v13;
    std::back_insert_iterator<std::vector<unsigned int>>::operator=[abi:ne180100]((uint64_t *)v17, &v16);
    v13 += 2;
  }
  v17[0] = (void **)v15;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](v17);
}

void sub_1B5C562D4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::__function::__func<HALS_Graph_Manager::get_clock_device_list(void)::$_1,std::allocator<HALS_Graph_Manager::get_clock_device_list(void)::$_1>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<HALS_Graph_Manager::get_clock_device_list(void)::$_1,std::allocator<HALS_Graph_Manager::get_clock_device_list(void)::$_1>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E699C238;
  return result;
}

void std::__function::__func<HALS_Graph_Manager::get_clock_device_list(void)::$_1,std::allocator<HALS_Graph_Manager::get_clock_device_list(void)::$_1>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E699C238;
}

uint64_t std::__function::__func<HALS_Graph_Manager::get_clock_device_list(void)::$_1,std::allocator<HALS_Graph_Manager::get_clock_device_list(void)::$_1>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::operator()(uint64_t a1, AMCP::Core::Core **a2)
{
  unsigned int simple_required;

  simple_required = AMCP::Core::Core::get_simple_required_property<1668047219u>(*a2);
  return AMCP::is_base_of((AMCP *)0x61646576, simple_required);
}

uint64_t std::__function::__func<HALS_Graph_Manager::get_clock_device_list(void)::$_1,std::allocator<HALS_Graph_Manager::get_clock_device_list(void)::$_1>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZNK18HALS_Graph_Manager21get_clock_device_listEvE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_Graph_Manager::get_clock_device_list(void)::$_1,std::allocator<HALS_Graph_Manager::get_clock_device_list(void)::$_1>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::target_type()
{
}

void std::__function::__func<HALS_Graph_Manager::get_device_list(void)::$_1,std::allocator<HALS_Graph_Manager::get_device_list(void)::$_1>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<HALS_Graph_Manager::get_device_list(void)::$_1,std::allocator<HALS_Graph_Manager::get_device_list(void)::$_1>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E699C1B8;
  return result;
}

void std::__function::__func<HALS_Graph_Manager::get_device_list(void)::$_1,std::allocator<HALS_Graph_Manager::get_device_list(void)::$_1>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E699C1B8;
}

uint64_t std::__function::__func<HALS_Graph_Manager::get_device_list(void)::$_1,std::allocator<HALS_Graph_Manager::get_device_list(void)::$_1>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::operator()(uint64_t a1, AMCP::Core::Core **a2)
{
  unsigned int simple_required;

  simple_required = AMCP::Core::Core::get_simple_required_property<1668047219u>(*a2);
  return AMCP::is_base_of((AMCP *)0x61646576, simple_required);
}

uint64_t std::__function::__func<HALS_Graph_Manager::get_device_list(void)::$_1,std::allocator<HALS_Graph_Manager::get_device_list(void)::$_1>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZNK18HALS_Graph_Manager15get_device_listEvE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_Graph_Manager::get_device_list(void)::$_1,std::allocator<HALS_Graph_Manager::get_device_list(void)::$_1>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::target_type()
{
}

void ___ZN10applesauce8dispatch2v19sync_implIZN18HALS_Graph_Manager21enqueue_config_changeEjjjRKNSt3__18functionIFvvEEEE3__0EEvP16dispatch_queue_sOT_NS4_17integral_constantIbLb1EEE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5[3];
  void **v6;
  _QWORD *v7[2];
  std::string __p;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11[2];
  _QWORD v12[3];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD **)v1;
  memset(v12, 0, sizeof(v12));
  v11[0] = 0;
  v11[1] = 0;
  v10 = (uint64_t *)v11;
  AMCP::IO_Core::Graph_Manager::prepare_graph_for_config_change(&__p, v2, *(_DWORD *)(v1 + 16), *(_DWORD *)(v1 + 8), (uint64_t)v12, &v10);
  v3 = *(_QWORD *)(*(_QWORD *)(v1 + 24) + 24);
  if (!v3)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3);
  v7[0] = 0;
  v7[1] = 0;
  v6 = (void **)v7;
  std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t *)&v6, *(_DWORD *)(v1 + 12), *(_DWORD *)(v1 + 12));
  std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t *)&v6, *(_DWORD *)(v1 + 8), *(_DWORD *)(v1 + 8));
  v4 = *(_DWORD *)(v1 + 8);
  std::set<unsigned int>::set[abi:ne180100](v5, (uint64_t)&v6);
  AMCP::IO_Core::Graph_Manager::update_graph_after_config_change(v2, v4, v5, *(_DWORD *)(v1 + 16), (uint64_t)&__p);
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy((_QWORD *)v5[1]);
  AMCP::IO_Core::Graph_Manager::update_and_resume_io_contexts((_QWORD **)v2, &v10);
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v7[0]);
  v6 = (void **)&v9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v11[0]);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_1B5C5658C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10, uint64_t a11, uint64_t *a12, _QWORD *a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;

  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(a10);
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(a13);
  a12 = &a18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*(_QWORD **)(v18 - 72));
  __p = (void *)(v18 - 56);
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void HALS_IOContext_Manager_Graph_Host::~HALS_IOContext_Manager_Graph_Host(HALS_IOContext_Manager_Graph_Host *this)
{
  JUMPOUT(0x1B5E50688);
}

uint64_t HALS_IOContext_Manager_Graph_Host::get_broker(HALS_IOContext_Manager_Graph_Host *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 96);
}

uint64_t HALS_IOContext_Manager_Graph_Host::get_node_proc_owner(HALS_IOContext_Manager_Graph_Host *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 112) + 8;
}

uint64_t HALS_IOContext_Manager_Graph_Host::get_current_power_state(HALS_IOContext_Manager_Graph_Host *this)
{
  return *(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 1) + 112) + 416);
}

void HALS_IOContext_Manager_Graph_Host::create_manifest(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X2>, uint64_t *a4@<X8>)
{
  AMCP::IO_Core::Graph_Manager::create_manifest(a4, *(_QWORD **)(*(_QWORD *)(a1 + 8) + 112), a2, a3);
}

AMCP::Log::Scope_Registry *HALS_IOContext_Manager_Graph_Host::simple_property_changed_async(AMCP::Log::Scope_Registry *this, unsigned int a2, const AMCP::Address *a3, const AMCP::Thing *a4)
{
  NSObject *v4;
  _opaque_pthread_t *v5;
  mach_port_t v6;
  void *exception;
  __int128 v8;
  uint64_t v9;
  uint64_t (**v10)();
  __int128 v11;
  uint64_t v12;
  std::string v13;
  std::logic_error v14;
  std::logic_error v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char v21;
  uint8_t buf[8];
  __int16 v23;
  char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  _BYTE v28[14];
  const char *v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)a3 != 1718839674)
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v4 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = pthread_self();
      v6 = pthread_mach_thread_np(v5);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v6;
      v23 = 2080;
      v24 = "HALS_IOContext_Manager_Impl.cpp";
      v25 = 1024;
      v26 = 45;
      v27 = 2080;
      *(_QWORD *)v28 = "not (in_changed_property.m_selector == k_iocontext_property_buffer_frame_size)";
      _os_log_error_impl(&dword_1B57BA000, v4, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s simple_property_changed_async only supports changing buffer size", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v21);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"simple_property_changed_async only supports changing buffer size", (uint64_t)&v13);
    std::logic_error::logic_error(&v14, &v13);
    v14.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v15, &v14);
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = -1;
    v15.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v16 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v15);
    *(_QWORD *)&v28[6] = "virtual void HALS_IOContext_Manager_Graph_Host::simple_property_changed_async(Object_ID, const "
                         "Address &, const Thing &)";
    v29 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IO/HALS_IOContext_Manager_Impl.cpp";
    v30 = 45;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v8);
    v11 = v8;
    v12 = v9;
    v8 = 0uLL;
    v9 = 0;
    v10 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v10);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  return this;
}

void sub_1B5C5685C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::__shared_ptr_pointer<HALS_IOContext_Manager_Graph_Host *,std::shared_ptr<AMCP::Graph::Graph_Host>::__shared_ptr_default_delete<AMCP::Graph::Graph_Host,HALS_IOContext_Manager_Graph_Host>,std::allocator<HALS_IOContext_Manager_Graph_Host>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_pointer<HALS_IOContext_Manager_Graph_Host *,std::shared_ptr<AMCP::Graph::Graph_Host>::__shared_ptr_default_delete<AMCP::Graph::Graph_Host,HALS_IOContext_Manager_Graph_Host>,std::allocator<HALS_IOContext_Manager_Graph_Host>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<HALS_IOContext_Manager_Graph_Host *,std::shared_ptr<AMCP::Graph::Graph_Host>::__shared_ptr_default_delete<AMCP::Graph::Graph_Host,HALS_IOContext_Manager_Graph_Host>,std::allocator<HALS_IOContext_Manager_Graph_Host>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIN4AMCP5Graph10Graph_HostEE27__shared_ptr_default_deleteIS3_33HALS_IOContext_Manager_Graph_HostEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_emplace<HALS_Graph_Manager>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E699BAF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<HALS_Graph_Manager>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E699BAF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_emplace<HALS_Graph_Manager>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t *HALS_IOContext_Manager_Impl::Object_Map::find_mcp_object(HALS_IOContext_Manager_Impl::Object_Map *this, unsigned int a2)
{
  uint64_t *result;
  NSObject *v3;
  _opaque_pthread_t *v4;
  mach_port_t v5;
  NSObject **v6;
  __int16 v7;
  char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  const char *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)this + 8) != *((_QWORD *)this + 3))
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v6, "com.apple.coreaudio", "AMCP");
    v3 = *v6;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v6);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v4 = pthread_self();
      v5 = pthread_mach_thread_np(v4);
      LODWORD(v6) = 67109890;
      HIDWORD(v6) = v5;
      v7 = 2080;
      v8 = "HALS_IOContext_Manager_Impl.cpp";
      v9 = 1024;
      v10 = 847;
      v11 = 2080;
      v12 = "m_hal_object_to_mcp_object_map.size() == m_mcp_object_to_hal_object_map.size()";
      _os_log_error_impl(&dword_1B57BA000, v3, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s ", (uint8_t *)&v6, 0x22u);
    }
    abort();
  }
  result = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>((_QWORD *)this + 5, a2);
  if (result)
    return (uint64_t *)(*((unsigned int *)result + 5) | 0x100000000);
  return result;
}

_QWORD *HALS_IOContext_Manager_Impl::get_graph_builder(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = (_QWORD *)operator new();
  *v6 = &off_1E699C0B8;
  v6[1] = a2;
  v6[2] = a3;
  result = (_QWORD *)operator new();
  *result = v6;
  *a1 = result;
  return result;
}

void sub_1B5C56ACC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void HALS_IOContext_Manager_Impl::find_wires_for_context(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  AMCP::IO_Core::Graph_Manager *v5;
  int v6;
  const UInt8 *v7;
  CFIndex v8;
  uint64_t node_id;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  int v14;
  std::string::size_type v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  std::string::size_type v23;
  __int128 v24;
  unint64_t v25;
  __int128 v26;
  uint64_t v27;
  _QWORD *v28;
  void *v29;
  std::runtime_error *exception;
  void *__p;
  _QWORD *v32;
  std::string cf;
  unint64_t v34;
  int v35;
  std::string v36;
  uint64_t v37;
  int v38;
  std::string v39;
  std::string v40;
  unint64_t v41;
  uint64_t *v42;

  v5 = *(AMCP::IO_Core::Graph_Manager **)(a2 + 112);
  v6 = *(char *)(a3 + 23);
  if (v6 >= 0)
    v7 = (const UInt8 *)a3;
  else
    v7 = *(const UInt8 **)a3;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a3 + 23);
  else
    v8 = *(_QWORD *)(a3 + 8);
  cf.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringCreateWithBytes(0, v7, v8, 0x8000100u, 0);
  if (!cf.__r_.__value_.__r.__words[0])
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  node_id = AMCP::IO_Core::Graph_Manager::get_node_id(v5, (const applesauce::CF::StringRef *)&cf);
  if (cf.__r_.__value_.__r.__words[0])
    CFRelease(cf.__r_.__value_.__l.__data_);
  if ((node_id & 0xFF00000000) != 0)
  {
    AMCP::IO_Core::Graph_Manager::get_wires_for_node((AMCP::IO_Core::Graph_Manager *)&__p, *(_QWORD *)(a2 + 112), node_id);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    v10 = v32;
    if (v32)
    {
      do
      {
        if (*((char *)v10 + 39) < 0)
          std::string::__init_copy_ctor_external(&v40, (const std::string::value_type *)v10[2], v10[3]);
        else
          v40 = *(std::string *)(v10 + 2);
        v41 = v10[5];
        LODWORD(v42) = *((_DWORD *)v10 + 12);
        if (*((char *)v10 + 79) < 0)
          std::string::__init_copy_ctor_external(&v39, (const std::string::value_type *)v10[7], v10[8]);
        else
          v39 = *(std::string *)(v10 + 7);
        cf = v40;
        v34 = v41;
        v35 = (int)v42;
        v36 = v39;
        v38 = *((_DWORD *)v10 + 22);
        v37 = v10[10];
        v11 = a1[1];
        v12 = a1[2];
        if (v11 >= v12)
        {
          v18 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v11 - *a1) >> 4);
          v19 = v18 + 1;
          if (v18 + 1 > 0x333333333333333)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          v20 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - *a1) >> 4);
          if (2 * v20 > v19)
            v19 = 2 * v20;
          if (v20 >= 0x199999999999999)
            v21 = 0x333333333333333;
          else
            v21 = v19;
          v42 = a1 + 2;
          if (v21)
            v21 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Wire_Identifier>>(v21);
          else
            v22 = 0;
          v23 = v21 + 80 * v18;
          v40.__r_.__value_.__r.__words[0] = v21;
          v40.__r_.__value_.__l.__size_ = v23;
          v41 = v21 + 80 * v22;
          v24 = *(_OWORD *)&cf.__r_.__value_.__l.__data_;
          *(_QWORD *)(v23 + 16) = *((_QWORD *)&cf.__r_.__value_.__l + 2);
          *(_OWORD *)v23 = v24;
          memset(&cf, 0, sizeof(cf));
          v25 = v34;
          *(_DWORD *)(v23 + 32) = v35;
          *(_QWORD *)(v23 + 24) = v25;
          v26 = *(_OWORD *)&v36.__r_.__value_.__l.__data_;
          *(_QWORD *)(v23 + 56) = *((_QWORD *)&v36.__r_.__value_.__l + 2);
          *(_OWORD *)(v23 + 40) = v26;
          memset(&v36, 0, sizeof(v36));
          v27 = v37;
          *(_DWORD *)(v23 + 72) = v38;
          *(_QWORD *)(v23 + 64) = v27;
          v40.__r_.__value_.__r.__words[2] = v23 + 80;
          std::vector<AMCP::Wire_Identifier>::__swap_out_circular_buffer(a1, &v40);
          v17 = a1[1];
          std::__split_buffer<AMCP::Wire_Identifier>::~__split_buffer((uint64_t)&v40);
        }
        else
        {
          v13 = *(_OWORD *)&cf.__r_.__value_.__l.__data_;
          *(_QWORD *)(v11 + 16) = *((_QWORD *)&cf.__r_.__value_.__l + 2);
          *(_OWORD *)v11 = v13;
          memset(&cf, 0, sizeof(cf));
          v14 = v35;
          *(_QWORD *)(v11 + 24) = v34;
          *(_DWORD *)(v11 + 32) = v14;
          v15 = v36.__r_.__value_.__r.__words[2];
          *(_OWORD *)(v11 + 40) = *(_OWORD *)&v36.__r_.__value_.__l.__data_;
          *(_QWORD *)(v11 + 56) = v15;
          memset(&v36, 0, sizeof(v36));
          v16 = v37;
          *(_DWORD *)(v11 + 72) = v38;
          *(_QWORD *)(v11 + 64) = v16;
          v17 = v11 + 80;
          a1[1] = v11 + 80;
        }
        a1[1] = v17;
        v10 = (_QWORD *)*v10;
      }
      while (v10);
      v28 = v32;
    }
    else
    {
      v28 = 0;
    }
    std::__hash_table<AMCP::Wire_Description,std::hash<AMCP::Wire_Description>,std::equal_to<AMCP::Wire_Description>,std::allocator<AMCP::Wire_Description>>::__deallocate_node(v28);
    v29 = __p;
    __p = 0;
    if (v29)
      operator delete(v29);
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_1B5C56E70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;

  __cxa_free_exception(v26);
  _Unwind_Resume(a1);
}

_QWORD *HALS_IOContext_Manager_Impl::Object_Map::add_object(HALS_IOContext_Manager_Impl::Object_Map *this, unsigned int a2, unsigned int a3)
{
  float *v6;
  uint64_t *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t *v10;
  _QWORD *result;
  NSObject *v12;
  _opaque_pthread_t *v13;
  mach_port_t v14;
  unsigned int v15;
  unsigned int v16;
  uint8_t buf[8];
  __int16 v18;
  char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  const char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v15 = a3;
  v16 = a2;
  if (*((_QWORD *)this + 8) != *((_QWORD *)this + 3))
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v12 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = pthread_self();
      v14 = pthread_mach_thread_np(v13);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v14;
      v18 = 2080;
      v19 = "HALS_IOContext_Manager_Impl.cpp";
      v20 = 1024;
      v21 = 796;
      v22 = 2080;
      v23 = "m_hal_object_to_mcp_object_map.size() == m_mcp_object_to_hal_object_map.size()";
      _os_log_error_impl(&dword_1B57BA000, v12, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s ", buf, 0x22u);
    }
    abort();
  }
  v6 = (float *)((char *)this + 40);
  v7 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>(this, a2);
  if (v7)
  {
    v8 = *((_DWORD *)v7 + 5);
    v9 = a2;
LABEL_6:
    HALS_IOContext_Manager_Impl::Object_Map::remove_object(this, v9, v8);
    goto LABEL_7;
  }
  v10 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>(v6, a3);
  if (v10)
  {
    v9 = *((_DWORD *)v10 + 5);
    v8 = a3;
    goto LABEL_6;
  }
LABEL_7:
  *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((float *)this, a2, &v16)+ 5) = a3;
  result = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v6, a3, &v15);
  *((_DWORD *)result + 5) = a2;
  return result;
}

void HALS_IOContext_Manager_Impl::Object_Map::remove_object(HALS_IOContext_Manager_Impl::Object_Map *this, unsigned int a2, unsigned int a3)
{
  _QWORD *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  AMCP::Log::Scope_Registry *v10;
  NSObject *v11;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  const char *v14;
  _opaque_pthread_t *v15;
  mach_port_t v16;
  _opaque_pthread_t *v17;
  mach_port_t v18;
  _opaque_pthread_t *v19;
  mach_port_t v20;
  NSObject **v21;
  __int16 v22;
  char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  const char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)this + 8) != *((_QWORD *)this + 3))
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v21, "com.apple.coreaudio", "AMCP");
    v11 = *v21;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v21);
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      goto LABEL_15;
    v15 = pthread_self();
    v16 = pthread_mach_thread_np(v15);
    LODWORD(v21) = 67109890;
    HIDWORD(v21) = v16;
    v22 = 2080;
    v23 = "HALS_IOContext_Manager_Impl.cpp";
    v24 = 1024;
    v25 = 821;
    v26 = 2080;
    v27 = "m_hal_object_to_mcp_object_map.size() == m_mcp_object_to_hal_object_map.size()";
    v14 = "%6u %32s:%-5d Assertion Failed: %s ";
    goto LABEL_14;
  }
  v6 = (_QWORD *)((char *)this + 40);
  v7 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>(this, a2);
  v8 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>(v6, a3);
  v9 = v8;
  if (v7)
  {
    if (*((_DWORD *)v8 + 5) != a2 || *((_DWORD *)v7 + 5) != a3)
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v8);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v21, "com.apple.coreaudio", "AMCP");
      v11 = *v21;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v21);
      if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
LABEL_15:
        abort();
      v19 = pthread_self();
      v20 = pthread_mach_thread_np(v19);
      LODWORD(v21) = 67109890;
      HIDWORD(v21) = v20;
      v22 = 2080;
      v23 = "HALS_IOContext_Manager_Impl.cpp";
      v24 = 1024;
      v25 = 838;
      v26 = 2080;
      v27 = "false";
      v14 = "%6u %32s:%-5d Assertion Failed: %s Invalid state in Object_Map";
LABEL_14:
      _os_log_error_impl(&dword_1B57BA000, v11, OS_LOG_TYPE_ERROR, v14, (uint8_t *)&v21, 0x22u);
      goto LABEL_15;
    }
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::erase(this, v7);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::erase(v6, v9);
    if (*((_QWORD *)this + 8) != *((_QWORD *)this + 3))
    {
      AMCP::Log::Scope_Registry::get(v10);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v21, "com.apple.coreaudio", "AMCP");
      v11 = *v21;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v21);
      if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        goto LABEL_15;
      v12 = pthread_self();
      v13 = pthread_mach_thread_np(v12);
      LODWORD(v21) = 67109890;
      HIDWORD(v21) = v13;
      v22 = 2080;
      v23 = "HALS_IOContext_Manager_Impl.cpp";
      v24 = 1024;
      v25 = 840;
      v26 = 2080;
      v27 = "m_hal_object_to_mcp_object_map.size() == m_mcp_object_to_hal_object_map.size()";
      v14 = "%6u %32s:%-5d Assertion Failed: %s ";
      goto LABEL_14;
    }
  }
  else if (v8)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v8);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v21, "com.apple.coreaudio", "AMCP");
    v11 = *v21;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v21);
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      goto LABEL_15;
    v17 = pthread_self();
    v18 = pthread_mach_thread_np(v17);
    LODWORD(v21) = 67109890;
    HIDWORD(v21) = v18;
    v22 = 2080;
    v23 = "HALS_IOContext_Manager_Impl.cpp";
    v24 = 1024;
    v25 = 827;
    v26 = 2080;
    v27 = "hal_found == m_hal_object_to_mcp_object_map.end()";
    v14 = "%6u %32s:%-5d Assertion Failed: %s Invalid state in Object_Map";
    goto LABEL_14;
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(float *a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  int8x8_t prime;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint8x8_t v23;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v33;

  v6 = a2;
  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x18uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  *((_DWORD *)v10 + 5) = 0;
  v12 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v13 = a1[8];
  if (v7 && (float)(v13 * (float)v7) >= v12)
  {
    v6 = v3;
    goto LABEL_64;
  }
  v14 = 1;
  if (v7 >= 3)
    v14 = (v7 & (v7 - 1)) != 0;
  v15 = v14 | (2 * v7);
  v16 = vcvtps_u32_f32(v12 / v13);
  if (v15 <= v16)
    prime = (int8x8_t)v16;
  else
    prime = (int8x8_t)v15;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v7 = *((_QWORD *)a1 + 1);
  }
  if (*(_QWORD *)&prime <= v7)
  {
    if (*(_QWORD *)&prime >= v7)
      goto LABEL_60;
    v24 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
    if (v7 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
    {
      v24 = std::__next_prime(v24);
    }
    else
    {
      v26 = 1 << -(char)__clz(v24 - 1);
      if (v24 >= 2)
        v24 = v26;
    }
    if (*(_QWORD *)&prime <= v24)
      prime = (int8x8_t)v24;
    if (*(_QWORD *)&prime >= v7)
    {
      v7 = *((_QWORD *)a1 + 1);
      goto LABEL_60;
    }
    if (!*(_QWORD *)&prime)
    {
      v33 = *(_QWORD **)a1;
      *(_QWORD *)a1 = 0;
      if (v33)
        operator delete(v33);
      v7 = 0;
      *((_QWORD *)a1 + 1) = 0;
      goto LABEL_60;
    }
  }
  if (*(_QWORD *)&prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v18 = operator new(8 * *(_QWORD *)&prime);
  v19 = *(_QWORD **)a1;
  *(_QWORD *)a1 = v18;
  if (v19)
    operator delete(v19);
  v20 = 0;
  *((int8x8_t *)a1 + 1) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v20++) = 0;
  while (*(_QWORD *)&prime != v20);
  v21 = (_QWORD *)*((_QWORD *)a1 + 2);
  if (v21)
  {
    v22 = v21[1];
    v23 = (uint8x8_t)vcnt_s8(prime);
    v23.i16[0] = vaddlv_u8(v23);
    if (v23.u32[0] > 1uLL)
    {
      if (v22 >= *(_QWORD *)&prime)
        v22 %= *(_QWORD *)&prime;
    }
    else
    {
      v22 &= *(_QWORD *)&prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = a1 + 4;
    v27 = (_QWORD *)*v21;
    if (*v21)
    {
      do
      {
        v28 = v27[1];
        if (v23.u32[0] > 1uLL)
        {
          if (v28 >= *(_QWORD *)&prime)
            v28 %= *(_QWORD *)&prime;
        }
        else
        {
          v28 &= *(_QWORD *)&prime - 1;
        }
        if (v28 != v22)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v28))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v21;
            goto LABEL_56;
          }
          *v21 = *v27;
          *v27 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v28);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v28) = v27;
          v27 = v21;
        }
        v28 = v22;
LABEL_56:
        v21 = v27;
        v27 = (_QWORD *)*v27;
        v22 = v28;
      }
      while (v27);
    }
  }
  v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v6)
      v6 %= v7;
  }
  else
  {
    v6 = ((_DWORD)v7 - 1) & v6;
  }
LABEL_64:
  v29 = *(_QWORD **)a1;
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
  if (v30)
  {
    *v10 = *v30;
LABEL_72:
    *v30 = v10;
    goto LABEL_73;
  }
  *v10 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v10;
  v29[v6] = a1 + 4;
  if (*v10)
  {
    v31 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v31 >= v7)
        v31 %= v7;
    }
    else
    {
      v31 &= v7 - 1;
    }
    v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
  return v10;
}

void sub_1B5C5779C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<HALS_IOContext_Manager_Impl::create_context_core_for_hal_object_id(unsigned int,unsigned int,applesauce::CF::DictionaryRef,AMCP::Node_Description &,std::array<unsigned int,2ul> const&,std::vector<BOOL> const&,std::vector<BOOL> const&)::$_0,std::allocator<HALS_IOContext_Manager_Impl::create_context_core_for_hal_object_id(unsigned int,unsigned int,applesauce::CF::DictionaryRef,AMCP::Node_Description &,std::array<unsigned int,2ul> const&,std::vector<BOOL> const&,std::vector<BOOL> const&)::$_0>,BOOL ()(unsigned int)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<HALS_IOContext_Manager_Impl::create_context_core_for_hal_object_id(unsigned int,unsigned int,applesauce::CF::DictionaryRef,AMCP::Node_Description &,std::array<unsigned int,2ul> const&,std::vector<BOOL> const&,std::vector<BOOL> const&)::$_0,std::allocator<HALS_IOContext_Manager_Impl::create_context_core_for_hal_object_id(unsigned int,unsigned int,applesauce::CF::DictionaryRef,AMCP::Node_Description &,std::array<unsigned int,2ul> const&,std::vector<BOOL> const&,std::vector<BOOL> const&)::$_0>,BOOL ()(unsigned int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E699BB40;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<HALS_IOContext_Manager_Impl::create_context_core_for_hal_object_id(unsigned int,unsigned int,applesauce::CF::DictionaryRef,AMCP::Node_Description &,std::array<unsigned int,2ul> const&,std::vector<BOOL> const&,std::vector<BOOL> const&)::$_0,std::allocator<HALS_IOContext_Manager_Impl::create_context_core_for_hal_object_id(unsigned int,unsigned int,applesauce::CF::DictionaryRef,AMCP::Node_Description &,std::array<unsigned int,2ul> const&,std::vector<BOOL> const&,std::vector<BOOL> const&)::$_0>,BOOL ()(unsigned int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E699BB40;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<HALS_IOContext_Manager_Impl::create_context_core_for_hal_object_id(unsigned int,unsigned int,applesauce::CF::DictionaryRef,AMCP::Node_Description &,std::array<unsigned int,2ul> const&,std::vector<BOOL> const&,std::vector<BOOL> const&)::$_0,std::allocator<HALS_IOContext_Manager_Impl::create_context_core_for_hal_object_id(unsigned int,unsigned int,applesauce::CF::DictionaryRef,AMCP::Node_Description &,std::array<unsigned int,2ul> const&,std::vector<BOOL> const&,std::vector<BOOL> const&)::$_0>,BOOL ()(unsigned int)>::operator()(uint64_t a1, unsigned int *a2)
{
  uint64_t *v3;
  HALS_ObjectMap *v4;
  HALS_ObjectMap *v5;
  std::__shared_mutex_base **v6;
  int *v7;
  HALS_ObjectMap *v8;
  HALS_Object *v9;
  HALS_ObjectMap *v10;
  _BOOL8 ReferenceStreamStateForClient;
  HALS_Object *v12;
  HALS_Object *v13;

  v3 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>(*(_QWORD **)(a1 + 8), *a2);
  if (v3)
    v4 = (HALS_ObjectMap *)*((unsigned int *)v3 + 5);
  else
    v4 = 0;
  v5 = (HALS_ObjectMap *)*(unsigned int *)(a1 + 20);
  v6 = (std::__shared_mutex_base **)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(a1 + 16));
  v7 = (int *)HALS_ObjectMap::CopyObjectByObjectID(v5);
  v8 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(v4);
  v10 = v8;
  if (v8)
  {
    ReferenceStreamStateForClient = 1;
    if (*((_BYTE *)v8 + 52) && v7 && HALS_Stream::IsReferenceStream(v8))
      ReferenceStreamStateForClient = HALS_ReferenceStreamStateManager::GetReferenceStreamStateForClient(v6[55], v7[4]);
  }
  else
  {
    ReferenceStreamStateForClient = 0;
  }
  HALS_ObjectMap::ReleaseObject(v10, v9);
  HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v7, v12);
  HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v6, v13);
  return ReferenceStreamStateForClient;
}

void sub_1B5C578D8(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap *v2;
  HALS_ObjectMap *v3;
  HALS_ObjectMap *v4;
  HALS_Object *v6;
  HALS_Object *v7;

  HALS_ObjectMap::ReleaseObject(v4, a2);
  HALS_ObjectMap::ReleaseObject(v3, v6);
  HALS_ObjectMap::ReleaseObject(v2, v7);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<HALS_IOContext_Manager_Impl::create_context_core_for_hal_object_id(unsigned int,unsigned int,applesauce::CF::DictionaryRef,AMCP::Node_Description &,std::array<unsigned int,2ul> const&,std::vector<BOOL> const&,std::vector<BOOL> const&)::$_0,std::allocator<HALS_IOContext_Manager_Impl::create_context_core_for_hal_object_id(unsigned int,unsigned int,applesauce::CF::DictionaryRef,AMCP::Node_Description &,std::array<unsigned int,2ul> const&,std::vector<BOOL> const&,std::vector<BOOL> const&)::$_0>,BOOL ()(unsigned int)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN27HALS_IOContext_Manager_Impl37create_context_core_for_hal_object_idEjjN10applesauce2CF13DictionaryRefERN4AMCP16Node_DescriptionERKNSt3__15arrayIjLm2EEERKNS6_6vectorIbNS6_9allocatorIbEEEESG_E3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOContext_Manager_Impl::create_context_core_for_hal_object_id(unsigned int,unsigned int,applesauce::CF::DictionaryRef,AMCP::Node_Description &,std::array<unsigned int,2ul> const&,std::vector<BOOL> const&,std::vector<BOOL> const&)::$_0,std::allocator<HALS_IOContext_Manager_Impl::create_context_core_for_hal_object_id(unsigned int,unsigned int,applesauce::CF::DictionaryRef,AMCP::Node_Description &,std::array<unsigned int,2ul> const&,std::vector<BOOL> const&,std::vector<BOOL> const&)::$_0>,BOOL ()(unsigned int)>::target_type()
{
}

void ___ZN27HALS_IOContext_Manager_Impl38destroy_context_core_for_hal_object_idEj_block_invoke(_QWORD *a1)
{
  AMCP::Address *v2;
  uint64_t v3;
  const __CFString *v4;
  uint64_t v5;
  const __CFString *v6;
  std::runtime_error *exception;
  std::runtime_error *v8;
  std::string *v9;
  std::string *v10;
  void **p_data;
  void *v12[3];
  void *__p[2];
  _OWORD v14[2];
  void *v15[3];
  char v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  char v20;
  __int128 v21;
  char v22;
  __int128 v23;

  *(_QWORD *)&v23 = *MEMORY[0x1E0C80C00];
  v3 = a1[4];
  v2 = (AMCP::Address *)a1[5];
  if (v2)
  {
    __p[0] = (void *)0x676C6F6270617573;
    LODWORD(__p[1]) = 0;
    AMCP::Core::Core::call_operation_function<void,AMCP::Pause_Behavior>(v2, (unsigned int *)__p, 1);
  }
  v4 = (const __CFString *)a1[7];
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v4);
  HALS_IOContext_Manager_Impl::find_wires_for_context(&v17, v3, (uint64_t)__p);
  if (SBYTE7(v14[0]) < 0)
    operator delete(__p[0]);
  v5 = *(_QWORD *)(v3 + 112);
  memset(v14, 0, sizeof(v14));
  *(_OWORD *)__p = 0u;
  v6 = (const __CFString *)a1[7];
  if (!v6)
  {
    v8 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v8, "Could not construct");
    __cxa_throw(v8, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::convert_to<std::string,0>((uint64_t)&v21, v6);
  v9 = 0;
  v10 = 0;
  p_data = 0;
  v19 = (void **)&v9;
  v20 = 0;
  v9 = (std::string *)operator new(0x18uLL);
  v10 = v9;
  p_data = (void **)&v9[1].__r_.__value_.__l.__data_;
  v10 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, &v21, &v23, v9);
  memset(v12, 0, sizeof(v12));
  std::vector<AMCP::Wire_Identifier>::__init_with_size[abi:ne180100]<AMCP::Wire_Identifier*,AMCP::Wire_Identifier*>(v12, v17, v18, 0xCCCCCCCCCCCCCCCDLL * ((v18 - v17) >> 4));
  AMCP::IO_Core::Graph_Manager::modify_graph(v15, v5, (uint64_t)__p, (uint64_t)&v9);
  v19 = v12;
  std::vector<AMCP::Wire_Identifier>::__destroy_vector::operator()[abi:ne180100](&v19);
  v19 = (void **)&v9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  if (v22 < 0)
    operator delete((void *)v21);
  v9 = (std::string *)((char *)v14 + 8);
  std::vector<AMCP::Wire_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)&v9);
  v9 = (std::string *)__p;
  std::vector<AMCP::Node_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)&v9);
  if (v16 && v15[0])
  {
    v15[1] = v15[0];
    operator delete(v15[0]);
  }
  __p[0] = &v17;
  std::vector<AMCP::Wire_Identifier>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1B5C57B98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  uint64_t v21;

  __cxa_free_exception(v20);
  AMCP::Graph_Description::~Graph_Description(&__p);
  __p = (void *)(v21 - 104);
  std::vector<AMCP::Wire_Identifier>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_e8_40c43_ZTSNSt3__110shared_ptrIN4AMCP4Core4CoreEEE56c31_ZTSN10applesauce2CF9StringRefE(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;

  v2 = result;
  v3 = *(_QWORD *)(a2 + 48);
  result[5] = *(_QWORD *)(a2 + 40);
  result[6] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(_QWORD *)(a2 + 56);
  if (v6)
    result = CFRetain(*(CFTypeRef *)(a2 + 56));
  v2[7] = v6;
  return result;
}

uint64_t __destroy_helper_block_e8_40c43_ZTSNSt3__110shared_ptrIN4AMCP4Core4CoreEEE56c31_ZTSN10applesauce2CF9StringRefE(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 56);
  if (v2)
    CFRelease(v2);
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 40);
}

unint64_t HALS_IOContext_Manager_Impl::demand_driver_object_for_id(std::__shared_mutex_base **this, unsigned int a2)
{
  HALS_IOContext_Manager_Impl::Object_Map *v4;
  unint64_t mcp_object;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  AMCP::Log::Scope_Registry *core;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  void *v22;
  std::__shared_weak_count *v24;
  NSObject *v25;
  unint64_t *v26;
  unint64_t v27;
  _opaque_pthread_t *v28;
  mach_port_t v29;
  AMCP::Core::Core *v30;
  std::__shared_weak_count *v31;
  void *__p[2];
  __int128 v33;
  int v34;
  uint8_t buf[8];
  _BYTE v36[10];
  __int16 v37;
  int v38;
  __int16 v39;
  const char *v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v4 = (HALS_IOContext_Manager_Impl::Object_Map *)(this + 2);
  mcp_object = (unint64_t)HALS_IOContext_Manager_Impl::Object_Map::find_mcp_object((HALS_IOContext_Manager_Impl::Object_Map *)(this + 2), a2);
  if (!HIDWORD(mcp_object))
  {
    mcp_object = AMCP::Core::Broker::reserve_id(this[12]);
    *(_OWORD *)__p = 0u;
    v33 = 0u;
    v34 = 1065353216;
    LODWORD(v30) = mcp_object;
    AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)buf, 0, (int *)&v30, 1.58366009e190);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(*(_QWORD *)buf + 40), buf);
    v6 = *(std::__shared_weak_count **)v36;
    if (*(_QWORD *)v36)
    {
      v7 = (unint64_t *)(*(_QWORD *)v36 + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    LODWORD(v30) = 1634757735;
    AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)buf, 0, (int *)&v30, 1.58366006e190);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(*(_QWORD *)buf + 40), buf);
    v9 = *(std::__shared_weak_count **)v36;
    if (*(_QWORD *)v36)
    {
      v10 = (unint64_t *)(*(_QWORD *)v36 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    LODWORD(v30) = 1634757735;
    AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)buf, 0, (int *)&v30, 1.58366007e190);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(*(_QWORD *)buf + 40), buf);
    v12 = *(std::__shared_weak_count **)v36;
    if (*(_QWORD *)v36)
    {
      v13 = (unint64_t *)(*(_QWORD *)v36 + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    LODWORD(v30) = 1;
    AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)buf, 0, (int *)&v30, 1.58366011e190);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(*(_QWORD *)buf + 40), buf);
    v15 = *(std::__shared_weak_count **)v36;
    if (*(_QWORD *)v36)
    {
      v16 = (unint64_t *)(*(_QWORD *)v36 + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    AMCP::Core::Broker::destroy_core(this[12], mcp_object);
    core = (AMCP::Log::Scope_Registry *)AMCP::Core::Broker::make_core(&v30, this[12], (uint64_t)__p, mcp_object);
    if (!v30)
    {
      AMCP::Log::Scope_Registry::get(core);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v24 = *(std::__shared_weak_count **)v36;
      v25 = **(NSObject ***)buf;
      if (*(_QWORD *)v36)
      {
        v26 = (unint64_t *)(*(_QWORD *)v36 + 8);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        v28 = pthread_self();
        v29 = pthread_mach_thread_np(v28);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v29;
        *(_WORD *)v36 = 2080;
        *(_QWORD *)&v36[2] = "HALS_IOContext_Manager_Impl.cpp";
        v37 = 1024;
        v38 = 312;
        v39 = 2080;
        v40 = "core_ptr.operator BOOL() == true";
        _os_log_error_impl(&dword_1B57BA000, v25, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s failed to allocate the Core", buf, 0x22u);
      }
      abort();
    }
    v19 = v31;
    if (v31)
    {
      p_shared_owners = (unint64_t *)&v31->__shared_owners_;
      do
        v21 = __ldaxr(p_shared_owners);
      while (__stlxr(v21 - 1, p_shared_owners));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__deallocate_node((_QWORD *)v33);
    v22 = __p[0];
    __p[0] = 0;
    if (v22)
      operator delete(v22);
    HALS_IOContext_Manager_Impl::Object_Map::add_object(v4, mcp_object, a2);
  }
  return mcp_object;
}

void sub_1B5C58078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, _QWORD *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  unint64_t *p_shared_owners;
  unint64_t v20;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__deallocate_node(a13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<HALS_IOContext_Manager_Impl::create_device_object(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0,std::allocator<HALS_IOContext_Manager_Impl::create_device_object(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E699BDA8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<HALS_IOContext_Manager_Impl::create_device_object(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0,std::allocator<HALS_IOContext_Manager_Impl::create_device_object(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E699BDA8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<HALS_IOContext_Manager_Impl::create_device_object(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0,std::allocator<HALS_IOContext_Manager_Impl::create_device_object(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E699BDA8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<HALS_IOContext_Manager_Impl::create_device_object(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0,std::allocator<HALS_IOContext_Manager_Impl::create_device_object(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E699BDA8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<HALS_IOContext_Manager_Impl::create_device_object(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0,std::allocator<HALS_IOContext_Manager_Impl::create_device_object(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<HALS_IOContext_Manager_Impl::create_device_object(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0,std::allocator<HALS_IOContext_Manager_Impl::create_device_object(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<HALS_IOContext_Manager_Impl::create_device_object(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0,std::allocator<HALS_IOContext_Manager_Impl::create_device_object(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::operator()@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(result + 16);
  *a2 = *(_QWORD *)(result + 8);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t std::__function::__func<HALS_IOContext_Manager_Impl::create_device_object(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0,std::allocator<HALS_IOContext_Manager_Impl::create_device_object(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN27HALS_IOContext_Manager_Impl20create_device_objectEjjN10applesauce2CF9StringRefERKNSt3__16vectorINS_11Stream_InfoENS3_9allocatorIS5_EEEEbE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOContext_Manager_Impl::create_device_object(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0,std::allocator<HALS_IOContext_Manager_Impl::create_device_object(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::target_type()
{
}

void HALS_IOContext_Manager_Impl::create_stream_info_for_device(HALS_IOContext_Manager_Impl *this, const HALS_IODevice *a2)
{
  unint64_t v3;
  _DWORD *v4;
  char v5;
  uint64_t v6;
  char v7;
  int NumberStreams;
  int i;
  HALS_Stream *v10;
  HALS_Object *v11;
  HALS_Stream *v12;
  int v13;
  int v14;
  BOOL IsReferenceStream;
  BOOL v16;
  _DWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _DWORD *v22;
  char v23;
  unint64_t v25;
  int v26;
  __int16 v27;

  v25 = 0;
  v3 = 0;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  v27 = 1;
  do
  {
    v7 = v5;
    v26 = *((unsigned __int8 *)&v27 + v6);
    NumberStreams = HALS_IODevice::GetNumberStreams(a2, *((_BYTE *)&v27 + v6));
    v23 = v7;
    if (NumberStreams)
    {
      for (i = 0; i != NumberStreams; ++i)
      {
        v10 = (HALS_Stream *)HALS_IODevice::CopyStreamByIndex(a2, v26 != 0, i);
        v12 = v10;
        if (v10)
        {
          v13 = *((_DWORD *)v10 + 4);
          v14 = (*(uint64_t (**)(HALS_Stream *))(*(_QWORD *)v10 + 200))(v10);
          IsReferenceStream = HALS_Stream::IsReferenceStream(v12);
          v16 = IsReferenceStream;
          if ((unint64_t)v4 >= v25)
          {
            v18 = (uint64_t)((uint64_t)v4 - v3) >> 4;
            v19 = v18 + 1;
            if ((unint64_t)(v18 + 1) >> 60)
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            if ((uint64_t)(v25 - v3) >> 3 > v19)
              v19 = (uint64_t)(v25 - v3) >> 3;
            if (v25 - v3 >= 0x7FFFFFFFFFFFFFF0)
              v20 = 0xFFFFFFFFFFFFFFFLL;
            else
              v20 = v19;
            if (v20)
              v20 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v20);
            else
              v11 = 0;
            v21 = v20 + 16 * v18;
            *(_DWORD *)v21 = v13;
            *(_DWORD *)(v21 + 4) = v26;
            *(_DWORD *)(v21 + 8) = v14;
            *(_BYTE *)(v21 + 12) = v16;
            v22 = *(_DWORD **)this;
            v3 = v21;
            if (v4 != *(_DWORD **)this)
            {
              do
              {
                *(_OWORD *)(v3 - 16) = *((_OWORD *)v4 - 1);
                v3 -= 16;
                v4 -= 4;
              }
              while (v4 != v22);
              v4 = *(_DWORD **)this;
            }
            v17 = (_DWORD *)(v21 + 16);
            *(_QWORD *)this = v3;
            *((_QWORD *)this + 1) = v21 + 16;
            v25 = v20 + 16 * (_QWORD)v11;
            *((_QWORD *)this + 2) = v25;
            if (v4)
              operator delete(v4);
          }
          else
          {
            *v4 = v13;
            v4[1] = v26;
            v4[2] = v14;
            v17 = v4 + 4;
            *((_BYTE *)v4 + 12) = IsReferenceStream;
          }
          *((_QWORD *)this + 1) = v17;
          v4 = v17;
        }
        HALS_ObjectMap::ReleaseObject(v12, v11);
      }
    }
    v5 = 1;
    v6 = 1;
  }
  while ((v23 & 1) == 0);
}

void sub_1B5C584DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void HALS_IOContext_Manager_Impl::device_arrived(uint64_t a1, unsigned int a2, unsigned int a3, const __CFString **a4, uint64_t a5, char a6)
{
  std::mutex *v10;
  AMCP::Log::Scope_Registry *v11;
  std::__shared_weak_count *v12;
  NSObject *v13;
  unint64_t *v14;
  unint64_t v15;
  const void *v16;
  int64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  uint64_t *mcp_object;
  int v22;
  uint64_t v23;
  const __CFString *v24;
  char *v25;
  uint8_t *v26;
  uint64_t v27;
  _opaque_pthread_t *v28;
  mach_port_t v29;
  mach_port_t v30;
  void *p_p;
  std::runtime_error *exception;
  __int128 v33;
  void *__p;
  char *v35;
  char *v36;
  unsigned int v37;
  unsigned int v38;
  uint8_t buf[8];
  _BYTE v40[10];
  __int16 v41;
  int v42;
  _QWORD v43[3];

  v43[2] = *MEMORY[0x1E0C80C00];
  v37 = a3;
  v38 = a2;
  v10 = (std::mutex *)(a1 + 168);
  std::mutex::lock((std::mutex *)(a1 + 168));
  AMCP::Log::Scope_Registry::get(v11);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v12 = *(std::__shared_weak_count **)v40;
  v13 = **(NSObject ***)buf;
  if (*(_QWORD *)v40)
  {
    v14 = (unint64_t *)(*(_QWORD *)v40 + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    v28 = pthread_self();
    v29 = pthread_mach_thread_np(v28);
    if (!*a4)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v30 = v29;
    applesauce::CF::convert_to<std::string,0>((uint64_t)&__p, *a4);
    if (SHIBYTE(v36) >= 0)
      p_p = &__p;
    else
      p_p = __p;
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)&buf[4] = v30;
    *(_WORD *)v40 = 2080;
    *(_QWORD *)&v40[2] = "HALS_IOContext_Manager_Impl.cpp";
    v41 = 1024;
    v42 = 465;
    LOWORD(v43[0]) = 2080;
    *(_QWORD *)((char *)v43 + 2) = p_p;
    _os_log_debug_impl(&dword_1B57BA000, v13, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d device_arrived: %s", buf, 0x22u);
    if (SHIBYTE(v36) < 0)
      operator delete(__p);
  }
  __p = 0;
  v35 = 0;
  v36 = 0;
  v16 = *(const void **)a5;
  v17 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v17)
  {
    if (v17 < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v17 >> 4);
    __p = v18;
    v36 = &v18[16 * v19];
    memmove(v18, v16, v17);
    v35 = &v18[16 * (v17 >> 4)];
  }
  v20 = HALS_IOContext_Manager_Impl::demand_driver_object_for_id((std::__shared_mutex_base **)a1, v37);
  mcp_object = HALS_IOContext_Manager_Impl::Object_Map::find_mcp_object((HALS_IOContext_Manager_Impl::Object_Map *)(a1 + 16), v38);
  if ((unint64_t)mcp_object <= 0x100000000)
    v22 = 0;
  else
    v22 = (int)mcp_object;
  v23 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)&v33 = a1;
  *((_QWORD *)&v33 + 1) = &v38;
  v24 = *a4;
  if (v24)
    CFRetain(v24);
  v25 = (char *)operator new(0x38uLL);
  *(_QWORD *)v25 = &off_1E699BF38;
  *(_OWORD *)(v25 + 8) = v33;
  *((_QWORD *)v25 + 3) = &v37;
  *((_QWORD *)v25 + 4) = v24;
  *((_QWORD *)v25 + 5) = &__p;
  v25[48] = a6;
  v43[0] = v25;
  HALS_Graph_Manager::enqueue_config_change(v23, v20, v22, 1, (uint64_t)buf);
  v26 = (uint8_t *)v43[0];
  if ((uint8_t *)v43[0] == buf)
  {
    v27 = 4;
    v26 = buf;
  }
  else
  {
    if (!v43[0])
      goto LABEL_20;
    v27 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v26 + 8 * v27))();
LABEL_20:
  HALS_IOContext_Manager_Impl::garbage_collect((HALS_IOContext_Manager_Impl *)a1);
  if (__p)
  {
    v35 = (char *)__p;
    operator delete(__p);
  }
  std::mutex::unlock(v10);
}

void sub_1B5C5882C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  std::mutex *v16;
  void *v17;

  __cxa_free_exception(v17);
  std::mutex::unlock(v16);
  _Unwind_Resume(a1);
}

void HALS_IOContext_Manager_Impl::garbage_collect(HALS_IOContext_Manager_Impl *this)
{
  std::__shared_mutex_base *v2;
  _QWORD *v3;
  uint64_t v4;
  std::vector<unsigned int>::pointer begin;
  std::vector<unsigned int>::pointer end;
  unsigned int *v7;
  uint64_t *v8;
  unsigned int v9;
  std::vector<unsigned int> v10;
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_mutex_base *)*((_QWORD *)this + 12);
  v11[0] = &off_1E699C038;
  v12 = v11;
  AMCP::Core::Broker::fetch_object_ids_if (&v10, v2, (uint64_t)v11);
  v3 = v12;
  if (v12 == v11)
  {
    v4 = 4;
    v3 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  begin = v10.__begin_;
  end = v10.__end_;
  if (v10.__begin_ != v10.__end_)
  {
    v7 = v10.__begin_;
    do
    {
      v8 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>((_QWORD *)this + 2, *v7);
      if (v8)
      {
        v9 = *((_DWORD *)v8 + 5);
        if ((HALS_ObjectMap::IsObjectMapped(v9) & 1) == 0)
        {
          HALS_IOContext_Manager_Impl::Object_Map::remove_object((HALS_IOContext_Manager_Impl *)((char *)this + 16), *v7, v9);
          AMCP::Core::Broker::destroy_core(*((std::__shared_mutex_base **)this + 12), *v7);
          if (std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>((_QWORD *)this + 16, v9))
          {
            HALS_IOContext_Manager_Impl::destroy_engine_for_device(this, v9);
          }
        }
      }
      ++v7;
    }
    while (v7 != end);
  }
  if (begin)
    operator delete(begin);
}

void sub_1B5C589D4(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t HALS_IOContext_Manager_Impl::device_arrived(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0::~$_0(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 24);
  if (v2)
    CFRelease(v2);
  return a1;
}

void HALS_IOContext_Manager_Impl::destroy_engine_for_device(HALS_IOContext_Manager_Impl *this, unsigned int a2)
{
  _QWORD *v2;
  uint64_t *v3;
  _BYTE v4[24];

  v2 = (_QWORD *)((char *)this + 128);
  v3 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>((_QWORD *)this + 16, a2);
  if (v3)
  {
    std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<AMCP::Core::Engine>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<AMCP::Core::Engine>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<AMCP::Core::Engine>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<AMCP::Core::Engine>>>>::remove((uint64_t)v4, v2, v3);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,void *>>>>::reset[abi:ne180100]((uint64_t)v4);
  }
}

void std::__function::__func<HALS_IOContext_Manager_Impl::garbage_collect(void)::$_0,std::allocator<HALS_IOContext_Manager_Impl::garbage_collect(void)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<HALS_IOContext_Manager_Impl::garbage_collect(void)::$_0,std::allocator<HALS_IOContext_Manager_Impl::garbage_collect(void)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E699C038;
  return result;
}

void std::__function::__func<HALS_IOContext_Manager_Impl::garbage_collect(void)::$_0,std::allocator<HALS_IOContext_Manager_Impl::garbage_collect(void)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E699C038;
}

uint64_t std::__function::__func<HALS_IOContext_Manager_Impl::garbage_collect(void)::$_0,std::allocator<HALS_IOContext_Manager_Impl::garbage_collect(void)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::operator()(uint64_t a1, AMCP::Core::Core **a2)
{
  AMCP::Core::Core *v2;
  unsigned int v3;
  uint64_t v5;
  int v6;

  v2 = *a2;
  v5 = 0x676C6F6262636C73;
  v6 = 0;
  v3 = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>(v2, (const AMCP::Address *)&v5, &AMCP::k_class_id_unknown);
  return AMCP::is_base_of((AMCP *)0x696F636E, v3) ^ 1;
}

uint64_t std::__function::__func<HALS_IOContext_Manager_Impl::garbage_collect(void)::$_0,std::allocator<HALS_IOContext_Manager_Impl::garbage_collect(void)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN27HALS_IOContext_Manager_Impl15garbage_collectEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOContext_Manager_Impl::garbage_collect(void)::$_0,std::allocator<HALS_IOContext_Manager_Impl::garbage_collect(void)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::target_type()
{
}

_QWORD *std::__function::__func<HALS_IOContext_Manager_Impl::device_arrived(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0,std::allocator<HALS_IOContext_Manager_Impl::device_arrived(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  const void *v2;

  *a1 = &off_1E699BF38;
  v2 = (const void *)a1[4];
  if (v2)
    CFRelease(v2);
  return a1;
}

void std::__function::__func<HALS_IOContext_Manager_Impl::device_arrived(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0,std::allocator<HALS_IOContext_Manager_Impl::device_arrived(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  const void *v1;

  *a1 = &off_1E699BF38;
  v1 = (const void *)a1[4];
  if (v1)
    CFRelease(v1);
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<HALS_IOContext_Manager_Impl::device_arrived(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0,std::allocator<HALS_IOContext_Manager_Impl::device_arrived(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  __int128 *v1;
  _QWORD *v2;

  v1 = (__int128 *)(a1 + 8);
  v2 = operator new(0x38uLL);
  *v2 = &off_1E699BF38;
  std::__compressed_pair_elem<HALS_IOContext_Manager_Impl::device_arrived(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<HALS_IOContext_Manager_Impl::device_arrived(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

uint64_t std::__function::__func<HALS_IOContext_Manager_Impl::device_arrived(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0,std::allocator<HALS_IOContext_Manager_Impl::device_arrived(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E699BF38;
  return std::__compressed_pair_elem<HALS_IOContext_Manager_Impl::device_arrived(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<HALS_IOContext_Manager_Impl::device_arrived(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0 const&,0ul>((uint64_t)(a2 + 1), (__int128 *)(a1 + 8));
}

void std::__function::__func<HALS_IOContext_Manager_Impl::device_arrived(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0,std::allocator<HALS_IOContext_Manager_Impl::device_arrived(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  std::__function::__alloc_func<HALS_IOContext_Manager_Impl::device_arrived(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0,std::allocator<HALS_IOContext_Manager_Impl::device_arrived(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0>,void ()(void)>::destroy[abi:ne180100](*(const void **)(a1 + 32));
}

void std::__function::__func<HALS_IOContext_Manager_Impl::device_arrived(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0,std::allocator<HALS_IOContext_Manager_Impl::device_arrived(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0>,void ()(void)>::destroy_deallocate(const void **a1)
{
  std::__function::__alloc_func<HALS_IOContext_Manager_Impl::device_arrived(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0,std::allocator<HALS_IOContext_Manager_Impl::device_arrived(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0>,void ()(void)>::destroy[abi:ne180100](a1[4]);
  operator delete(a1);
}

void std::__function::__func<HALS_IOContext_Manager_Impl::device_arrived(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0,std::allocator<HALS_IOContext_Manager_Impl::device_arrived(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  const __CFString *v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t *mcp_object;
  unsigned int v8;
  std::__shared_mutex_base *v9;
  _DWORD *v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unsigned int **v17;
  unsigned int **v18;
  unsigned int v19;
  uint64_t *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t *v23;
  unsigned int v24;
  uint64_t i;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  AMCP::Log::Scope_Registry *core;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  void *v53;
  unsigned int v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  std::__shared_weak_count *size;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  int v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  const __CFString *v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  AMCP::Log::Scope_Registry *v100;
  std::__shared_weak_count *v101;
  NSObject *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  void *v108;
  _opaque_pthread_t *v109;
  mach_port_t v110;
  mach_port_t v111;
  uint64_t *v112;
  NSObject *v113;
  _opaque_pthread_t *v114;
  mach_port_t v115;
  NSObject *v116;
  _opaque_pthread_t *v117;
  mach_port_t v118;
  void *exception;
  NSObject *v120;
  _opaque_pthread_t *v121;
  mach_port_t v122;
  std::runtime_error *v123;
  int v124;
  int v125;
  const __CFString *v126;
  __int128 v127;
  char **v128;
  std::string v129;
  std::logic_error v130;
  char v131;
  _BYTE buf[40];
  uint64_t v133;
  int v134;
  _BYTE __p[48];
  int v136;
  uint64_t v137;
  __int128 v138;
  char **v139;
  uint64_t v140;

  v140 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 8);
  v3 = **(_DWORD **)(a1 + 16);
  v4 = *(const __CFString **)(a1 + 32);
  v5 = **(_DWORD **)(a1 + 24);
  if (v4)
    CFRetain(*(CFTypeRef *)(a1 + 32));
  v126 = v4;
  v6 = *(uint64_t **)(a1 + 40);
  v125 = *(unsigned __int8 *)(a1 + 48);
  mcp_object = HALS_IOContext_Manager_Impl::Object_Map::find_mcp_object((HALS_IOContext_Manager_Impl::Object_Map *)(v2 + 16), v3);
  v8 = mcp_object;
  if ((unint64_t)mcp_object >> 32)
  {
    v9 = *(std::__shared_mutex_base **)(v2 + 96);
    v138 = 0uLL;
    v137 = 0;
    v10 = operator new(4uLL);
    *v10 = v8;
    *(_QWORD *)&buf[8] = v10 + 1;
    *(_QWORD *)&buf[16] = v10 + 1;
    *(_QWORD *)buf = v10;
    AMCP::Core::Broker::gather_directly_owned_objects((std::vector<unsigned int> *)__p, v9, (unsigned int **)buf);
    operator delete(v10);
    v12 = *(unsigned int **)__p;
    v11 = *(unsigned int **)&__p[8];
    if (*(_QWORD *)__p != *(_QWORD *)&__p[8])
    {
      v13 = v3;
      do
      {
        AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)buf, v9, *v12);
        if (*(_QWORD *)buf)
          std::vector<std::shared_ptr<AMCP::Meta::Stream>>::push_back[abi:ne180100]((char **)&v137, (__int128 *)buf);
        v14 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v15 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 - 1, v15));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        ++v12;
      }
      while (v12 != v11);
      v12 = *(unsigned int **)__p;
      v3 = v13;
    }
    if (v12)
    {
      *(_QWORD *)&__p[8] = v12;
      operator delete(v12);
    }
    v17 = (unsigned int **)v137;
    v18 = (unsigned int **)v138;
    while (v17 != v18)
    {
      v19 = **v17;
      v20 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>((_QWORD *)(v2 + 16), v19);
      if (v20)
        v21 = *((_DWORD *)v20 + 5);
      else
        v21 = 0;
      HALS_IOContext_Manager_Impl::Object_Map::remove_object((HALS_IOContext_Manager_Impl::Object_Map *)(v2 + 16), v19, v21);
      AMCP::Core::Broker::destroy_core(*(std::__shared_mutex_base **)(v2 + 96), v19);
      v17 += 2;
    }
    *(_QWORD *)__p = &v137;
    std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    AMCP::Core::Broker::destroy_core(*(std::__shared_mutex_base **)(v2 + 96), v8);
    HALS_IOContext_Manager_Impl::Object_Map::remove_object((HALS_IOContext_Manager_Impl::Object_Map *)(v2 + 16), v8, v3);
  }
  v22 = AMCP::Core::Broker::reserve_id(*(std::__shared_mutex_base **)(v2 + 96));
  v23 = HALS_IOContext_Manager_Impl::Object_Map::find_mcp_object((HALS_IOContext_Manager_Impl::Object_Map *)(v2 + 16), v5);
  if (!((unint64_t)v23 >> 32))
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v23);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__p, "com.apple.coreaudio", "AMCP");
    v116 = **(NSObject ***)__p;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)__p);
    if (os_log_type_enabled(v116, OS_LOG_TYPE_ERROR))
    {
      v117 = pthread_self();
      v118 = pthread_mach_thread_np(v117);
      *(_DWORD *)__p = 67109890;
      *(_DWORD *)&__p[4] = v118;
      *(_WORD *)&__p[8] = 2080;
      *(_QWORD *)&__p[10] = "HALS_IOContext_Manager_Impl.cpp";
      *(_WORD *)&__p[18] = 1024;
      *(_DWORD *)&__p[20] = 373;
      *(_WORD *)&__p[24] = 2080;
      *(_QWORD *)&__p[26] = "not (owner_id)";
      _os_log_error_impl(&dword_1B57BA000, v116, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", __p, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v131);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v129);
    std::logic_error::logic_error(&v130, &v129);
    v130.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error((std::logic_error *)buf, &v130);
    *(_QWORD *)&buf[24] = 0;
    *(_QWORD *)&buf[32] = 0;
    v133 = 0;
    v134 = -1;
    *(_QWORD *)buf = off_1E69A1208;
    *(_QWORD *)&buf[16] = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)__p, (uint64_t)buf);
    *(_QWORD *)&__p[32] = "void HALS_IOContext_Manager_Impl::create_device_object(AudioObjectID, AudioObjectID, CF::Strin"
                          "g, const std::vector<Stream_Info> &, BOOL)";
    *(_QWORD *)&__p[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IO/HALS_IOContext_Manager_Impl.cpp";
    v136 = 373;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v127);
    v138 = v127;
    v137 = (uint64_t)off_1E69A20A0;
    v139 = v128;
    v127 = 0uLL;
    v128 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)__p, (uint64_t)&v137);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)__p);
  }
  v124 = (int)v23;
  v24 = v3;
  v26 = *v6;
  for (i = v6[1]; v26 != i; v26 += 16)
  {
    v27 = AMCP::Core::Broker::reserve_id(*(std::__shared_mutex_base **)(v2 + 96));
    memset(__p, 0, 32);
    *(_DWORD *)&__p[32] = 1065353216;
    LODWORD(v137) = v27;
    AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)buf, 0, (int *)&v137, 1.58366009e190);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(*(_QWORD *)buf + 40), buf);
    v28 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v29 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    LODWORD(v137) = 1634956402;
    AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)buf, 0, (int *)&v137, 1.58366006e190);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(*(_QWORD *)buf + 40), buf);
    v31 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v32 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    LODWORD(v137) = 1634956402;
    AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)buf, 0, (int *)&v137, 1.58366007e190);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(*(_QWORD *)buf + 40), buf);
    v34 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v35 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    LODWORD(v137) = v22;
    AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)buf, 0, (int *)&v137, 1.58366011e190);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(*(_QWORD *)buf + 40), buf);
    v37 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v38 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    LODWORD(v137) = *(_DWORD *)(v26 + 8);
    AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)buf, 0, (int *)&v137, 1.58366012e190);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(*(_QWORD *)buf + 40), buf);
    v40 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v41 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    LODWORD(v137) = *(_DWORD *)(v26 + 4);
    AMCP::Core::Operation_Utilities::make_typed_property<AMCP::Direction,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<AMCP::Direction>(AMCP::Address const&,AMCP::Direction const&)::{lambda(void)#1}>((uint64_t *)buf, 0, (int *)&v137, 1.58366012e190);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(*(_QWORD *)buf + 40), buf);
    v43 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v44 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    LODWORD(v137) = *(unsigned __int8 *)(v26 + 12);
    AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)buf, 0, (int *)&v137, 1.58366012e190);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(*(_QWORD *)buf + 40), buf);
    v46 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v47 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    AMCP::Core::Broker::destroy_core(*(std::__shared_mutex_base **)(v2 + 96), v27);
    core = (AMCP::Log::Scope_Registry *)AMCP::Core::Broker::make_core((AMCP::Core::Core **)&v137, *(std::__shared_mutex_base **)(v2 + 96), (uint64_t)__p, v27);
    if (!v137)
    {
      AMCP::Log::Scope_Registry::get(core);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v113 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v113, OS_LOG_TYPE_ERROR))
      {
        v114 = pthread_self();
        v115 = pthread_mach_thread_np(v114);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v115;
        *(_WORD *)&buf[8] = 2080;
        *(_QWORD *)&buf[10] = "HALS_IOContext_Manager_Impl.cpp";
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = 336;
        *(_WORD *)&buf[24] = 2080;
        *(_QWORD *)&buf[26] = "core_ptr.operator BOOL() == true";
        _os_log_error_impl(&dword_1B57BA000, v113, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s failed to allocate the Core", buf, 0x22u);
      }
      abort();
    }
    HALS_IOContext_Manager_Impl::Object_Map::add_object((HALS_IOContext_Manager_Impl::Object_Map *)(v2 + 16), v27, *(_DWORD *)v26);
    v50 = (std::__shared_weak_count *)v138;
    if ((_QWORD)v138)
    {
      v51 = (unint64_t *)(v138 + 8);
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__deallocate_node(*(_QWORD **)&__p[16]);
    v53 = *(void **)__p;
    *(_QWORD *)__p = 0;
    if (v53)
      operator delete(v53);
  }
  memset(buf, 0, 32);
  *(_DWORD *)&buf[32] = 1065353216;
  v54 = v24;
  v55 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>((_QWORD *)(v2 + 128), v24);
  if (v55)
  {
    v56 = v55;
    std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)&v129, 0, 1.58366007e190);
    v57 = v129.__r_.__value_.__r.__words[0];
    v59 = v56[3];
    v58 = v56[4];
    if (v58)
    {
      v60 = (unint64_t *)(v58 + 8);
      do
        v61 = __ldxr(v60);
      while (__stxr(v61 + 1, v60));
    }
    v62 = AMCP::Implementation::get_type_marker<std::function<std::shared_ptr<AMCP::Core::Engine> ()(void)>>();
    v137 = (uint64_t)&off_1E699BDA8;
    *(_QWORD *)&v138 = v59;
    *((_QWORD *)&v138 + 1) = v58;
    v139 = (char **)&v137;
    memset(__p, 0, 40);
    std::__function::__value_func<std::shared_ptr<AMCP::Core::Engine> ()(void)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)&v137);
    *(_QWORD *)&__p[32] = AMCP::Implementation::In_Place_Storage<std::function<std::shared_ptr<AMCP::Core::Engine> ()(void)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v57, v62, (AMCP *)__p);
    if (*(_QWORD *)&__p[32])
      (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&__p[32])(0, (uint64_t)__p, 0, 0);
    v63 = (uint64_t *)v139;
    if (v139 == (char **)&v137)
    {
      v64 = 4;
      v63 = &v137;
    }
    else
    {
      if (!v139)
      {
LABEL_81:
        std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)buf, (unsigned int *)(v57 + 40), &v129);
        size = (std::__shared_weak_count *)v129.__r_.__value_.__l.__size_;
        if (v129.__r_.__value_.__l.__size_)
        {
          v66 = (unint64_t *)(v129.__r_.__value_.__l.__size_ + 8);
          do
            v67 = __ldaxr(v66);
          while (__stlxr(v67 - 1, v66));
          if (!v67)
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
          }
        }
        goto LABEL_86;
      }
      v64 = 5;
    }
    (*(void (**)(void))(*v63 + 8 * v64))();
    goto LABEL_81;
  }
LABEL_86:
  LODWORD(v137) = v22;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)__p, 0, (int *)&v137, 1.58366009e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)buf, (unsigned int *)(*(_QWORD *)__p + 40), __p);
  v68 = *(std::__shared_weak_count **)&__p[8];
  if (*(_QWORD *)&__p[8])
  {
    v69 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  if (v125)
    v71 = 1633773415;
  else
    v71 = 1633969526;
  LODWORD(v137) = v71;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)__p, 0, (int *)&v137, 1.58366006e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)buf, (unsigned int *)(*(_QWORD *)__p + 40), __p);
  v72 = *(std::__shared_weak_count **)&__p[8];
  if (*(_QWORD *)&__p[8])
  {
    v73 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  LODWORD(v137) = v71;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)__p, 0, (int *)&v137, 1.58366007e190);
  v75 = v126;
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)buf, (unsigned int *)(*(_QWORD *)__p + 40), __p);
  v76 = *(std::__shared_weak_count **)&__p[8];
  if (*(_QWORD *)&__p[8])
  {
    v77 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  LODWORD(v137) = v124;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)__p, 0, (int *)&v137, 1.58366011e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)buf, (unsigned int *)(*(_QWORD *)__p + 40), __p);
  v79 = *(std::__shared_weak_count **)&__p[8];
  if (*(_QWORD *)&__p[8])
  {
    v80 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v137 = 0x676C6F626C6E616DLL;
  LODWORD(v138) = 0;
  AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)__p, (uint64_t)&v137, v126);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)buf, (unsigned int *)(*(_QWORD *)__p + 40), __p);
  v82 = *(std::__shared_weak_count **)&__p[8];
  if (*(_QWORD *)&__p[8])
  {
    v83 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v137 = 0x676C6F6275696420;
  LODWORD(v138) = 0;
  AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)__p, (uint64_t)&v137, v126);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)buf, (unsigned int *)(*(_QWORD *)__p + 40), __p);
  v85 = *(std::__shared_weak_count **)&__p[8];
  if (*(_QWORD *)&__p[8])
  {
    v86 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  *(_QWORD *)__p = *(_QWORD *)(v2 + 96);
  *(_DWORD *)&__p[8] = v22;
  *(_DWORD *)&__p[12] = 1634956402;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1}>(&v137, 0, (__int128 *)__p, 1.58366012e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)buf, (unsigned int *)(v137 + 40), &v137);
  v88 = (std::__shared_weak_count *)v138;
  if ((_QWORD)v138)
  {
    v89 = (unint64_t *)(v138 + 8);
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  *(_QWORD *)__p = *(_QWORD *)(v2 + 96);
  *(_DWORD *)&__p[8] = v22;
  *(_DWORD *)&__p[12] = 1634956402;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1}>(&v137, 0, (__int128 *)__p, 1.58366012e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)buf, (unsigned int *)(v137 + 40), &v137);
  v91 = (std::__shared_weak_count *)v138;
  if ((_QWORD)v138)
  {
    v92 = (unint64_t *)(v138 + 8);
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  *(_QWORD *)__p = *(_QWORD *)(v2 + 96);
  *(_DWORD *)&__p[8] = v22;
  *(_OWORD *)&__p[12] = xmmword_1B5D68B60;
  *(_OWORD *)&__p[28] = xmmword_1B5D68B70;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,AMCP::Direction>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,AMCP::Direction const&)::{lambda(void)#1}>(&v137, 0, (uint64_t *)__p, 7.28117508e199);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)buf, (unsigned int *)(v137 + 40), &v137);
  v94 = (std::__shared_weak_count *)v138;
  if ((_QWORD)v138)
  {
    v95 = (unint64_t *)(v138 + 8);
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  *(_QWORD *)__p = *(_QWORD *)(v2 + 96);
  *(_DWORD *)&__p[8] = v22;
  *(_OWORD *)&__p[12] = xmmword_1B5D68B60;
  *(_OWORD *)&__p[28] = xmmword_1B5D68B80;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,AMCP::Direction>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,AMCP::Direction const&)::{lambda(void)#1}>(&v137, 0, (uint64_t *)__p, 8.13208706e228);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)buf, (unsigned int *)(v137 + 40), &v137);
  v97 = (std::__shared_weak_count *)v138;
  if ((_QWORD)v138)
  {
    v98 = (unint64_t *)(v138 + 8);
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = (AMCP::Log::Scope_Registry *)AMCP::Core::Broker::make_core((AMCP::Core::Core **)&v129, *(std::__shared_mutex_base **)(v2 + 96), (uint64_t)buf, v22);
  if (!v129.__r_.__value_.__r.__words[0])
  {
    AMCP::Log::Scope_Registry::get(v100);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__p, "com.apple.coreaudio", "AMCP");
    v120 = **(NSObject ***)__p;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)__p);
    if (os_log_type_enabled(v120, OS_LOG_TYPE_ERROR))
    {
      v121 = pthread_self();
      v122 = pthread_mach_thread_np(v121);
      *(_DWORD *)__p = 67109890;
      *(_DWORD *)&__p[4] = v122;
      *(_WORD *)&__p[8] = 2080;
      *(_QWORD *)&__p[10] = "HALS_IOContext_Manager_Impl.cpp";
      *(_WORD *)&__p[18] = 1024;
      *(_DWORD *)&__p[20] = 434;
      *(_WORD *)&__p[24] = 2080;
      *(_QWORD *)&__p[26] = "core_ptr.operator BOOL() == true";
      _os_log_error_impl(&dword_1B57BA000, v120, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s failed to allocate the Core", __p, 0x22u);
    }
    abort();
  }
  AMCP::Log::Scope_Registry::get(v100);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__p, "com.apple.coreaudio", "AMCP");
  v101 = *(std::__shared_weak_count **)&__p[8];
  v102 = **(NSObject ***)__p;
  if (*(_QWORD *)&__p[8])
  {
    v103 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  if (os_log_type_enabled(v102, OS_LOG_TYPE_DEBUG))
  {
    v109 = pthread_self();
    v110 = pthread_mach_thread_np(v109);
    if (!v126)
    {
      v123 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v123, "Could not construct");
      __cxa_throw(v123, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v111 = v110;
    applesauce::CF::convert_to<std::string,0>((uint64_t)&v137, v126);
    if (v138 >= 0)
      v112 = &v137;
    else
      v112 = (uint64_t *)v137;
    *(_DWORD *)__p = 67110402;
    *(_DWORD *)&__p[4] = v111;
    *(_WORD *)&__p[8] = 2080;
    *(_QWORD *)&__p[10] = "HALS_IOContext_Manager_Impl.cpp";
    *(_WORD *)&__p[18] = 1024;
    *(_DWORD *)&__p[20] = 436;
    *(_WORD *)&__p[24] = 2080;
    *(_QWORD *)&__p[26] = v112;
    *(_WORD *)&__p[34] = 1024;
    *(_DWORD *)&__p[36] = v22;
    *(_WORD *)&__p[40] = 1024;
    *(_DWORD *)&__p[42] = v54;
    _os_log_debug_impl(&dword_1B57BA000, v102, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d HALS_IOContext_Manager_Impl::create_device_object: %s\tmcp: %u  hal: %u", __p, 0x2Eu);
    if (SHIBYTE(v138) < 0)
      operator delete((void *)v137);
    v75 = v126;
  }
  HALS_IOContext_Manager_Impl::Object_Map::add_object((HALS_IOContext_Manager_Impl::Object_Map *)(v2 + 16), v22, v54);
  v105 = (std::__shared_weak_count *)v129.__r_.__value_.__l.__size_;
  if (v129.__r_.__value_.__l.__size_)
  {
    v106 = (unint64_t *)(v129.__r_.__value_.__l.__size_ + 8);
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__deallocate_node(*(_QWORD **)&buf[16]);
  v108 = *(void **)buf;
  *(_QWORD *)buf = 0;
  if (v108)
    operator delete(v108);
  if (v75)
    CFRelease(v75);
}

void sub_1B5C59D40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  const void *v42;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::~__hash_table((uint64_t)&a31);
  if (v42)
    CFRelease(v42);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<HALS_IOContext_Manager_Impl::device_arrived(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0,std::allocator<HALS_IOContext_Manager_Impl::device_arrived(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN27HALS_IOContext_Manager_Impl14device_arrivedEjjN10applesauce2CF9StringRefERKNSt3__16vectorINS_11Stream_InfoENS3_9allocatorIS5_EEEEbE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOContext_Manager_Impl::device_arrived(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0,std::allocator<HALS_IOContext_Manager_Impl::device_arrived(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0>,void ()(void)>::target_type()
{
}

void std::__function::__alloc_func<HALS_IOContext_Manager_Impl::device_arrived(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0,std::allocator<HALS_IOContext_Manager_Impl::device_arrived(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0>,void ()(void)>::destroy[abi:ne180100](const void *a1)
{
  if (a1)
    CFRelease(a1);
}

uint64_t std::__compressed_pair_elem<HALS_IOContext_Manager_Impl::device_arrived(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<HALS_IOContext_Manager_Impl::device_arrived(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0 const&,0ul>(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  v5 = *((_QWORD *)a2 + 3);
  if (v5)
    CFRetain(*((CFTypeRef *)a2 + 3));
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *((_QWORD *)a2 + 4);
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  *(_QWORD *)(a1 + 32) = v6;
  return a1;
}

void std::__function::__func<HALS_IOContext_Manager_Impl::device_died(unsigned int,unsigned int,applesauce::CF::StringRef)::$_0,std::allocator<HALS_IOContext_Manager_Impl::device_died(unsigned int,unsigned int,applesauce::CF::StringRef)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<HALS_IOContext_Manager_Impl::device_died(unsigned int,unsigned int,applesauce::CF::StringRef)::$_0,std::allocator<HALS_IOContext_Manager_Impl::device_died(unsigned int,unsigned int,applesauce::CF::StringRef)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E699BFB8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<HALS_IOContext_Manager_Impl::device_died(unsigned int,unsigned int,applesauce::CF::StringRef)::$_0,std::allocator<HALS_IOContext_Manager_Impl::device_died(unsigned int,unsigned int,applesauce::CF::StringRef)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E699BFB8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

std::__shared_mutex_base *std::__function::__func<HALS_IOContext_Manager_Impl::device_died(unsigned int,unsigned int,applesauce::CF::StringRef)::$_0,std::allocator<HALS_IOContext_Manager_Impl::device_died(unsigned int,unsigned int,applesauce::CF::StringRef)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  HALS_IOContext_Manager_Impl::Object_Map::remove_object((HALS_IOContext_Manager_Impl::Object_Map *)(v2 + 16), *(_DWORD *)(a1 + 16), *(_DWORD *)(a1 + 20));
  return AMCP::Core::Broker::destroy_core(*(std::__shared_mutex_base **)(v2 + 96), *(_DWORD *)(a1 + 16));
}

uint64_t std::__function::__func<HALS_IOContext_Manager_Impl::device_died(unsigned int,unsigned int,applesauce::CF::StringRef)::$_0,std::allocator<HALS_IOContext_Manager_Impl::device_died(unsigned int,unsigned int,applesauce::CF::StringRef)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN27HALS_IOContext_Manager_Impl11device_diedEjjN10applesauce2CF9StringRefEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOContext_Manager_Impl::device_died(unsigned int,unsigned int,applesauce::CF::StringRef)::$_0,std::allocator<HALS_IOContext_Manager_Impl::device_died(unsigned int,unsigned int,applesauce::CF::StringRef)::$_0>,void ()(void)>::target_type()
{
}

void HALS_IOContext_Manager_Impl::create_engine_for_device(HALS_IOContext_Manager_Impl *this, const HALS_IODevice *a2)
{
  unint64_t v2;
  HALB_Mutex *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  void **v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  AMCP::Log::Scope_Registry *v25;
  std::__shared_weak_count *v26;
  NSObject *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  _opaque_pthread_t *v33;
  mach_port_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  _QWORD v38[6];
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  __n128 (*v42)(uint64_t, uint64_t);
  uint64_t (*v43)(uint64_t);
  uint64_t v44;
  std::__shared_weak_count *v45;
  uint8_t buf[8];
  _BYTE v47[10];
  __int16 v48;
  int v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  int v53;
  __int16 v54;
  uint64_t v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v39 = 0;
  v40 = &v39;
  v41 = 0x3802000000;
  v42 = __Block_byref_object_copy__13605;
  v43 = __Block_byref_object_dispose__13606;
  v44 = 0;
  v45 = 0;
  v38[0] = MEMORY[0x1E0C809B0];
  v38[1] = 0x40000000;
  v38[2] = ___ZN27HALS_IOContext_Manager_Impl24create_engine_for_deviceEPK13HALS_IODevice_block_invoke;
  v38[3] = &unk_1E699B968;
  v38[4] = &v39;
  v38[5] = a2;
  v5 = (HALB_Mutex *)(*(uint64_t (**)(const HALS_IODevice *))(*(_QWORD *)a2 + 56))(a2);
  HALB_CommandGate::ExecuteCommand(v5, (uint64_t)v38);
  v6 = v40;
  v7 = v40[5];
  if (!v7)
    goto LABEL_48;
  v8 = (uint64_t *)((char *)this + 128);
  v9 = *((unsigned int *)a2 + 4);
  v10 = *((_QWORD *)this + 17);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v2 = *((unsigned int *)a2 + 4);
      if (v10 <= v9)
        v2 = v9 % v10;
    }
    else
    {
      v2 = ((_DWORD)v10 - 1) & v9;
    }
    v12 = *(void ***)(*v8 + 8 * v2);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (*((_DWORD *)v13 + 4) == (_DWORD)v9)
              goto LABEL_41;
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10)
                v14 %= v10;
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v2)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
  v13 = operator new(0x28uLL);
  v15 = (_QWORD *)((char *)this + 144);
  *(_QWORD *)buf = v13;
  *(_QWORD *)v47 = (char *)this + 144;
  *v13 = 0;
  v13[1] = v9;
  *((_DWORD *)v13 + 4) = v9;
  v13[3] = 0;
  v13[4] = 0;
  v47[8] = 1;
  v16 = (float)(unint64_t)(*((_QWORD *)this + 19) + 1);
  v17 = *((float *)this + 40);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>((uint64_t)this + 128, v21);
    v10 = *((_QWORD *)this + 17);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v10 <= v9)
        v2 = v9 % v10;
      else
        v2 = v9;
    }
    else
    {
      v2 = ((_DWORD)v10 - 1) & v9;
    }
  }
  v22 = *v8;
  v23 = *(_QWORD **)(*v8 + 8 * v2);
  if (v23)
  {
    *v13 = *v23;
  }
  else
  {
    *v13 = *v15;
    *v15 = v13;
    *(_QWORD *)(v22 + 8 * v2) = v15;
    if (!*v13)
      goto LABEL_40;
    v24 = *(_QWORD *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v24 >= v10)
        v24 %= v10;
    }
    else
    {
      v24 &= v10 - 1;
    }
    v23 = (_QWORD *)(*v8 + 8 * v24);
  }
  *v23 = v13;
LABEL_40:
  *(_QWORD *)buf = 0;
  ++*((_QWORD *)this + 19);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,void *>>>>::reset[abi:ne180100]((uint64_t)buf);
  v7 = v6[5];
LABEL_41:
  v25 = (AMCP::Log::Scope_Registry *)std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100](v13 + 3, v7, v6[6]);
  AMCP::Log::Scope_Registry::get(v25);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v26 = *(std::__shared_weak_count **)v47;
  v27 = **(NSObject ***)buf;
  if (*(_QWORD *)v47)
  {
    v28 = (unint64_t *)(*(_QWORD *)v47 + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
  {
    v33 = pthread_self();
    v34 = pthread_mach_thread_np(v33);
    v35 = (*(uint64_t (**)(const HALS_IODevice *))(*(_QWORD *)a2 + 216))(a2);
    v36 = *((_DWORD *)a2 + 4);
    v37 = v40[5];
    *(_DWORD *)buf = 67110402;
    *(_DWORD *)&buf[4] = v34;
    *(_WORD *)v47 = 2080;
    *(_QWORD *)&v47[2] = "HALS_IOContext_Manager_Impl.cpp";
    v48 = 1024;
    v49 = 559;
    v50 = 2080;
    v51 = v35;
    v52 = 1024;
    v53 = v36;
    v54 = 2048;
    v55 = v37;
    _os_log_debug_impl(&dword_1B57BA000, v27, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d create_engine_for_device: %s (%u)  %p", buf, 0x32u);
  }
LABEL_48:
  _Block_object_dispose(&v39, 8);
  v30 = v45;
  if (v45)
  {
    p_shared_owners = (unint64_t *)&v45->__shared_owners_;
    do
      v32 = __ldaxr(p_shared_owners);
    while (__stlxr(v32 - 1, p_shared_owners));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
}

void sub_1B5C5A594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,void *>>>>::reset[abi:ne180100]((uint64_t)va1);
  _Block_object_dispose(va, 8);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v8 + 40);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__13605(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  return result;
}

uint64_t __Block_byref_object_dispose__13606(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 40);
}

void ___ZN27HALS_IOContext_Manager_Impl24create_engine_for_deviceEPK13HALS_IODevice_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v4;
  __int128 v5;

  (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)(a1 + 40) + 256))(&v5);
  std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40, &v5);
  v2 = (std::__shared_weak_count *)*((_QWORD *)&v5 + 1);
  if (*((_QWORD *)&v5 + 1))
  {
    v3 = (unint64_t *)(*((_QWORD *)&v5 + 1) + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

uint64_t **HALS_IOContext_Manager_Impl::get_hal_object_id_for_device_uid(uint64_t **result, unsigned __int8 *a2)
{
  uint64_t **v3;
  uint64_t *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unsigned __int8 *v8;
  size_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  void **p_s1;
  int v14;
  int v15;
  int v16;
  int v17;
  BOOL v19;
  BOOL v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::runtime_error *exception;
  CFTypeRef cf;
  void *__s1;
  size_t __n;
  unsigned __int8 v28;

  if (result)
  {
    v3 = result;
    while (1)
    {
      v4 = v3[3];
      v5 = (std::__shared_weak_count *)v3[4];
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      (*(void (**)(CFTypeRef *__return_ptr))(*v4 + 16))(&cf);
      if (!cf)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::convert_to<std::string,0>((uint64_t)&__s1, (const __CFString *)cf);
      if ((v28 & 0x80u) == 0)
        v9 = v28;
      else
        v9 = __n;
      v10 = a2[23];
      v11 = (char)v10;
      if ((v10 & 0x80u) != 0)
        v10 = *((_QWORD *)a2 + 1);
      if (v9 != v10)
        break;
      if (v11 >= 0)
        v8 = a2;
      else
        v8 = *(unsigned __int8 **)a2;
      if ((v28 & 0x80) != 0)
      {
        v21 = __s1;
        v20 = memcmp(__s1, v8, __n) == 0;
        goto LABEL_29;
      }
      if (v28)
      {
        v12 = v28 - 1;
        p_s1 = &__s1;
        do
        {
          v15 = *(unsigned __int8 *)p_s1;
          p_s1 = (void **)((char *)p_s1 + 1);
          v14 = v15;
          v17 = *v8++;
          v16 = v17;
          v19 = v12-- != 0;
          v20 = v14 == v16;
        }
        while (v14 == v16 && v19);
        if ((v28 & 0x80) != 0)
          goto LABEL_27;
      }
      else
      {
        v20 = 1;
      }
LABEL_31:
      if (cf)
        CFRelease(cf);
      if (v5)
      {
        v22 = (unint64_t *)&v5->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *, unsigned __int8 *))v5->__on_zero_shared)(v5, v8);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      if (v20)
        return (uint64_t **)*((unsigned int *)v3 + 4);
      v3 = (uint64_t **)*v3;
      if (!v3)
        return 0;
    }
    v20 = 0;
    if ((v28 & 0x80) == 0)
      goto LABEL_31;
LABEL_27:
    v21 = __s1;
LABEL_29:
    operator delete(v21);
    goto LABEL_31;
  }
  return result;
}

void sub_1B5C5A818(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf)
{
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (cf)
    CFRelease(cf);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  _Unwind_Resume(exception_object);
}

void HALS_IOContext_Manager_Impl::find_contexts_and_devices_with_timebases(HALS_IOContext_Manager_Impl *this, const AMCP::Graph::Timebase_Set *a2, _QWORD *a3)
{
  AMCP::Log::Scope_Registry *v6;
  AMCP::Log::Scope_Registry *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  NSObject *v10;
  unint64_t *v11;
  unint64_t v12;
  AMCP::Log::Scope_Registry *v13;
  std::__shared_weak_count *v14;
  NSObject *v15;
  unint64_t *v16;
  unint64_t v17;
  unsigned int *v18;
  unsigned int *v19;
  char *v20;
  char *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  int v32;
  _opaque_pthread_t *v33;
  mach_port_t v34;
  _opaque_pthread_t *v35;
  mach_port_t v36;
  HALS_IOContext_Manager_Impl *v37;
  void *v38[3];
  void *v39;
  _BYTE *v40;
  uint64_t v41;
  uint8_t buf[8];
  _BYTE v43[10];
  __int16 v44;
  int v45;
  void *__p;
  _BYTE v47[10];
  __int16 v48;
  int v49;
  _BYTE v50[24];
  AMCP::Log::Scope_Registry *v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v39 = 0;
  v40 = 0;
  v41 = 0;
  memset(v38, 0, sizeof(v38));
  v6 = (AMCP::Log::Scope_Registry *)operator new(0x20uLL);
  *(_QWORD *)v6 = &off_1E699C2B8;
  *((_QWORD *)v6 + 1) = a2;
  *((_QWORD *)v6 + 2) = &v39;
  *((_QWORD *)v6 + 3) = v38;
  v51 = v6;
  AMCP::Graph::Timebase_Set::for_each(a3, (uint64_t)v50);
  v7 = v51;
  if (v51 == (AMCP::Log::Scope_Registry *)v50)
  {
    v8 = 4;
    v7 = (AMCP::Log::Scope_Registry *)v50;
  }
  else
  {
    if (!v51)
      goto LABEL_6;
    v8 = 5;
  }
  v7 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(void))(*(_QWORD *)v7 + 8 * v8))();
LABEL_6:
  if (v39 == v40)
  {
    AMCP::Log::Scope_Registry::get(v7);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__p, "com.apple.coreaudio", "AMCP");
    v9 = *(std::__shared_weak_count **)v47;
    v10 = *(NSObject **)__p;
    if (*(_QWORD *)v47)
    {
      v11 = (unint64_t *)(*(_QWORD *)v47 + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      v33 = pthread_self();
      v34 = pthread_mach_thread_np(v33);
      LODWORD(__p) = 67109634;
      HIDWORD(__p) = v34;
      *(_WORD *)v47 = 2080;
      *(_QWORD *)&v47[2] = "HALS_IOContext_Manager_Impl.cpp";
      v48 = 1024;
      v49 = 913;
      _os_log_debug_impl(&dword_1B57BA000, v10, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d HALS_IOContext_Manager_Impl::find_contexts_and_devices_with_timebases - no MCP device ids found", (uint8_t *)&__p, 0x18u);
    }
  }
  AMCP::IO_Core::Graph_Manager::find_contexts_using_timebase((unsigned int **)&__p, *((_QWORD ***)a2 + 14), (uint64_t)v38);
  if (__p == *(void **)v47)
  {
    AMCP::Log::Scope_Registry::get(v13);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v14 = *(std::__shared_weak_count **)v43;
    v15 = **(NSObject ***)buf;
    if (*(_QWORD *)v43)
    {
      v16 = (unint64_t *)(*(_QWORD *)v43 + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      v35 = pthread_self();
      v36 = pthread_mach_thread_np(v35);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v36;
      *(_WORD *)v43 = 2080;
      *(_QWORD *)&v43[2] = "HALS_IOContext_Manager_Impl.cpp";
      v44 = 1024;
      v45 = 920;
      _os_log_debug_impl(&dword_1B57BA000, v15, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d HALS_IOContext_Manager_Impl::find_contexts_and_devices_with_timebases - no IO context ids found", buf, 0x18u);
    }
  }
  v37 = this;
  v18 = (unsigned int *)__p;
  v19 = *(unsigned int **)v47;
  if (__p != *(void **)v47)
  {
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = (_QWORD *)((char *)a2 + 16);
    while (1)
    {
      v24 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>(v23, *v18);
      if (v24)
      {
        v25 = *((_DWORD *)v24 + 5);
        if ((unint64_t)v21 >= v22)
        {
          v27 = (v21 - v20) >> 2;
          v28 = v27 + 1;
          if ((unint64_t)(v27 + 1) >> 62)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          if ((uint64_t)(v22 - (_QWORD)v20) >> 1 > v28)
            v28 = (uint64_t)(v22 - (_QWORD)v20) >> 1;
          if (v22 - (unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
            v29 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v29 = v28;
          if (v29)
            v29 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v29);
          else
            v30 = 0;
          v31 = (char *)(v29 + 4 * v27);
          *(_DWORD *)v31 = v25;
          v26 = (uint64_t)(v31 + 4);
          while (v21 != v20)
          {
            v32 = *((_DWORD *)v21 - 1);
            v21 -= 4;
            *((_DWORD *)v31 - 1) = v32;
            v31 -= 4;
          }
          v22 = v29 + 4 * v30;
          if (v20)
            operator delete(v20);
          v20 = v31;
          goto LABEL_43;
        }
        *(_DWORD *)v21 = v25;
        v21 += 4;
      }
      v26 = (uint64_t)v21;
LABEL_43:
      ++v18;
      v21 = (char *)v26;
      if (v18 == v19)
        goto LABEL_46;
    }
  }
  v20 = 0;
  v26 = 0;
LABEL_46:
  *(_QWORD *)v37 = 0;
  *((_QWORD *)v37 + 1) = 0;
  *((_QWORD *)v37 + 2) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v37, v20, v26, (v26 - (uint64_t)v20) >> 2);
  *((_QWORD *)v37 + 3) = 0;
  *((_QWORD *)v37 + 4) = 0;
  *((_QWORD *)v37 + 5) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)v37 + 3, v39, (uint64_t)v40, (v40 - (_BYTE *)v39) >> 2);
  if (v20)
    operator delete(v20);
  if (__p)
    operator delete(__p);
  __p = v38;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v39)
  {
    v40 = v39;
    operator delete(v39);
  }
}

void sub_1B5C5AC88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char *__p,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (__p)
    operator delete(__p);
  __p = &a11;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (a14)
  {
    a15 = (uint64_t)a14;
    operator delete(a14);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<HALS_IOContext_Manager_Impl::find_contexts_and_devices_with_timebases(AMCP::Graph::Timebase_Set const&)::$_0,std::allocator<HALS_IOContext_Manager_Impl::find_contexts_and_devices_with_timebases(AMCP::Graph::Timebase_Set const&)::$_0>,void ()(std::shared_ptr<AMCP::Graph::Timebase>)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<HALS_IOContext_Manager_Impl::find_contexts_and_devices_with_timebases(AMCP::Graph::Timebase_Set const&)::$_0,std::allocator<HALS_IOContext_Manager_Impl::find_contexts_and_devices_with_timebases(AMCP::Graph::Timebase_Set const&)::$_0>,void ()(std::shared_ptr<AMCP::Graph::Timebase>)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E699C2B8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<HALS_IOContext_Manager_Impl::find_contexts_and_devices_with_timebases(AMCP::Graph::Timebase_Set const&)::$_0,std::allocator<HALS_IOContext_Manager_Impl::find_contexts_and_devices_with_timebases(AMCP::Graph::Timebase_Set const&)::$_0>,void ()(std::shared_ptr<AMCP::Graph::Timebase>)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E699C2B8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<HALS_IOContext_Manager_Impl::find_contexts_and_devices_with_timebases(AMCP::Graph::Timebase_Set const&)::$_0,std::allocator<HALS_IOContext_Manager_Impl::find_contexts_and_devices_with_timebases(AMCP::Graph::Timebase_Set const&)::$_0>,void ()(std::shared_ptr<AMCP::Graph::Timebase>)>::operator()(_QWORD *a1, __n128 *a2)
{
  __n128 v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 v6;
  unsigned int hal_object_id_for_device_uid;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int *v11;
  _DWORD *v12;
  unsigned int *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unint64_t v21;
  unsigned int v22;
  char **v23;
  __n128 *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  __n128 *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  __n128 *v35;
  unint64_t *v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  __int128 v41;
  int64x2_t v42;
  char *v43;
  unint64_t *v44;
  unint64_t v45;
  __n128 v46;
  void *__p[2];
  unsigned __int8 v48;
  uint64_t v49;
  int64x2_t v50;
  char *v51;
  _QWORD *v52;

  v3 = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  v4 = a1[1];
  v46 = v3;
  (*(void (**)(void **__return_ptr, __n128))(*(_QWORD *)v3.n128_u64[0] + 24))(__p, v3);
  v5 = v48;
  v6 = v48;
  if ((v48 & 0x80u) != 0)
    v5 = (unint64_t)__p[1];
  if (v5)
  {
    hal_object_id_for_device_uid = HALS_IOContext_Manager_Impl::get_hal_object_id_for_device_uid(*(uint64_t ***)(v4 + 144), (unsigned __int8 *)__p);
    v8 = hal_object_id_for_device_uid;
    v9 = a1[2];
    v11 = *(unsigned int **)(v9 + 8);
    v10 = *(_QWORD *)(v9 + 16);
    if ((unint64_t)v11 >= v10)
    {
      v13 = *(unsigned int **)v9;
      v14 = ((uint64_t)v11 - *(_QWORD *)v9) >> 2;
      v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 62)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v16 = v10 - (_QWORD)v13;
      if (v16 >> 1 > v15)
        v15 = v16 >> 1;
      v17 = (unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL;
      v18 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v17)
        v18 = v15;
      if (v18)
      {
        v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v18);
        v13 = *(unsigned int **)v9;
        v11 = *(unsigned int **)(v9 + 8);
      }
      else
      {
        v19 = 0;
      }
      v20 = (unsigned int *)(v18 + 4 * v14);
      v21 = v18 + 4 * v19;
      *v20 = v8;
      v12 = v20 + 1;
      while (v11 != v13)
      {
        v22 = *--v11;
        *--v20 = v22;
      }
      *(_QWORD *)v9 = v20;
      *(_QWORD *)(v9 + 8) = v12;
      *(_QWORD *)(v9 + 16) = v21;
      if (v13)
        operator delete(v13);
    }
    else
    {
      *v11 = hal_object_id_for_device_uid;
      v12 = v11 + 1;
    }
    *(_QWORD *)(v9 + 8) = v12;
    v23 = (char **)a1[3];
    v24 = (__n128 *)v23[1];
    v25 = (unint64_t)v23[2];
    if ((unint64_t)v24 >= v25)
    {
      v29 = ((char *)v24 - *v23) >> 4;
      v30 = v29 + 1;
      if ((unint64_t)(v29 + 1) >> 60)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v31 = v25 - (_QWORD)*v23;
      if (v31 >> 3 > v30)
        v30 = v31 >> 3;
      if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0)
        v32 = 0xFFFFFFFFFFFFFFFLL;
      else
        v32 = v30;
      v52 = v23 + 2;
      v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v32);
      v35 = (__n128 *)&v33[16 * v29];
      *v35 = v46;
      if (v46.n128_u64[1])
      {
        v36 = (unint64_t *)(v46.n128_u64[1] + 8);
        do
          v37 = __ldxr(v36);
        while (__stxr(v37 + 1, v36));
      }
      v39 = *v23;
      v38 = v23[1];
      if (v38 == *v23)
      {
        v42 = vdupq_n_s64((unint64_t)v38);
        v40 = &v33[16 * v29];
      }
      else
      {
        v40 = &v33[16 * v29];
        do
        {
          v41 = *((_OWORD *)v38 - 1);
          v38 -= 16;
          *((_OWORD *)v40 - 1) = v41;
          v40 -= 16;
          *(_QWORD *)v38 = 0;
          *((_QWORD *)v38 + 1) = 0;
        }
        while (v38 != v39);
        v42 = *(int64x2_t *)v23;
      }
      v28 = v35 + 1;
      *v23 = v40;
      v23[1] = (char *)&v35[1];
      v50 = v42;
      v43 = v23[2];
      v23[2] = &v33[16 * v34];
      v51 = v43;
      v49 = v42.i64[0];
      std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)&v49);
    }
    else
    {
      *v24 = v46;
      if (v46.n128_u64[1])
      {
        v26 = (unint64_t *)(v46.n128_u64[1] + 8);
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
      }
      v28 = v24 + 1;
    }
    v23[1] = (char *)v28;
    v6 = v48;
  }
  if ((v6 & 0x80) != 0)
    operator delete(__p[0]);
  if (v46.n128_u64[1])
  {
    v44 = (unint64_t *)(v46.n128_u64[1] + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      (*(void (**)(unint64_t))(*(_QWORD *)v46.n128_u64[1] + 16))(v46.n128_u64[1]);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v46.n128_u64[1]);
    }
  }
}

void sub_1B5C5B044(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  unint64_t *v16;
  unint64_t v17;

  if (*((_QWORD *)&a9 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&a9 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&a9 + 1) + 16))(*((_QWORD *)&a9 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&a9 + 1));
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<HALS_IOContext_Manager_Impl::find_contexts_and_devices_with_timebases(AMCP::Graph::Timebase_Set const&)::$_0,std::allocator<HALS_IOContext_Manager_Impl::find_contexts_and_devices_with_timebases(AMCP::Graph::Timebase_Set const&)::$_0>,void ()(std::shared_ptr<AMCP::Graph::Timebase>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN27HALS_IOContext_Manager_Impl40find_contexts_and_devices_with_timebasesERKN4AMCP5Graph12Timebase_SetEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOContext_Manager_Impl::find_contexts_and_devices_with_timebases(AMCP::Graph::Timebase_Set const&)::$_0,std::allocator<HALS_IOContext_Manager_Impl::find_contexts_and_devices_with_timebases(AMCP::Graph::Timebase_Set const&)::$_0>,void ()(std::shared_ptr<AMCP::Graph::Timebase>)>::target_type()
{
}

void ___ZN27HALS_IOContext_Manager_Impl22hog_mode_owner_changedEP13HALS_IODevicei_block_invoke(uint64_t a1)
{
  unsigned int *v1;
  unsigned int *v2;
  uint64_t v3;
  HALS_Object *v4;
  uint64_t v5;
  uint64_t v6;
  HALS_Object *v7;
  HALS_ObjectMap *v8;

  v1 = *(unsigned int **)(a1 + 32);
  v2 = *(unsigned int **)(a1 + 40);
  while (v1 != v2)
  {
    v3 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*v1);
    v5 = v3;
    if (v3)
    {
      v6 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)**(unsigned int **)(v3 + 64));
      v8 = (HALS_ObjectMap *)v6;
      if (v6)
      {
        if (*(_DWORD *)(v6 + 232))
          (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v5 + 96) + 488))(*(_QWORD *)(v5 + 96), *(_QWORD *)(v5 + 136));
      }
      HALS_ObjectMap::ReleaseObject(v8, v7);
    }
    HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v5, v4);
    ++v1;
  }
}

void sub_1B5C5B16C(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap *v2;
  HALS_ObjectMap *v3;
  HALS_Object *v5;

  HALS_ObjectMap::ReleaseObject(v3, a2);
  HALS_ObjectMap::ReleaseObject(v2, v5);
  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_e8_32c39_ZTSNSt3__16vectorIjNS_9allocatorIjEEEE(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v2 = (_QWORD *)(a1 + 32);
  v2[2] = 0;
  return std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v2, *(const void **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 2);
}

void __destroy_helper_block_e8_32c39_ZTSNSt3__16vectorIjNS_9allocatorIjEEEE(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
}

void AMCP::Node::~Node(AMCP::Node *this)
{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = &off_1E696F358;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = &off_1E696F358;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1B5E50688);
}

{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = &off_1E696F358;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

AMCP::Node *AMCP::Node::Node(AMCP::Node *this, AMCP::System_Context *a2, unsigned int a3)
{
  AMCP::Object *v4;
  uint64_t v5;
  NSObject *v7;
  _opaque_pthread_t *v8;
  mach_port_t v9;
  NSObject **v10;
  __int16 v11;
  char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  const char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = (AMCP::Object *)AMCP::Object::Object((uint64_t)this, (uint64_t)a2, a3);
  *(_QWORD *)v4 = &off_1E699C348;
  v5 = AMCP::Object::constructed_correct_class(v4, (AMCP *)0x616E6F64);
  if ((v5 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
    v7 = *v10;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v10);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = pthread_self();
      v9 = pthread_mach_thread_np(v8);
      LODWORD(v10) = 67109890;
      HIDWORD(v10) = v9;
      v11 = 2080;
      v12 = "Node.cpp";
      v13 = 1024;
      v14 = 29;
      v15 = 2080;
      v16 = "constructed_correct_class(k_class_id_node)";
      _os_log_error_impl(&dword_1B57BA000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s the core is not of the proper class", (uint8_t *)&v10, 0x22u);
    }
    abort();
  }
  return this;
}

void sub_1B5C5B37C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  *v1 = &off_1E696F358;
  v3 = (std::__shared_weak_count *)v1[3];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Node::Node(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_mutex_base *v5;
  uint64_t v6;
  int v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v17;
  _opaque_pthread_t *v18;
  mach_port_t v19;
  _QWORD v20[2];
  uint8_t buf[8];
  _BYTE v22[10];
  __int16 v23;
  int v24;
  _QWORD v25[3];

  v25[2] = *MEMORY[0x1E0C80C00];
  v5 = *(std::__shared_mutex_base **)(**(_QWORD **)a2 + 16);
  *(_QWORD *)buf = &off_1E699C7C8;
  *(_QWORD *)v22 = a3;
  v25[0] = buf;
  AMCP::Core::Broker::fetch_first_core_if (v20, v5, (uint64_t)buf);
  *(_QWORD *)a1 = &off_1E696F358;
  v6 = v20[0];
  if (v20[0])
    v7 = *(_DWORD *)v20[0];
  else
    v7 = 0;
  *(_DWORD *)(a1 + 8) = v7;
  v8 = (std::__shared_weak_count *)v20[1];
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v8;
  if (v8)
  {
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
    *(_QWORD *)(a1 + 32) = a2;
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 32) = a2;
  }
  v13 = (uint8_t *)v25[0];
  if ((uint8_t *)v25[0] == buf)
  {
    v14 = 4;
    v13 = buf;
  }
  else
  {
    if (!v25[0])
      goto LABEL_17;
    v14 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v13 + 8 * v14))();
LABEL_17:
  *(_QWORD *)a1 = &off_1E699C348;
  v15 = AMCP::Object::constructed_correct_class((AMCP::Object *)a1, (AMCP *)0x616E6F64);
  if ((v15 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v15);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v17 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      v18 = pthread_self();
      v19 = pthread_mach_thread_np(v18);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v19;
      *(_WORD *)v22 = 2080;
      *(_QWORD *)&v22[2] = "Node.cpp";
      v23 = 1024;
      v24 = 45;
      LOWORD(v25[0]) = 2080;
      *(_QWORD *)((char *)v25 + 2) = "constructed_correct_class(k_class_id_node)";
      _os_log_error_impl(&dword_1B57BA000, v17, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s the core is not of the proper class", buf, 0x22u);
    }
    abort();
  }
  return a1;
}

void sub_1B5C5B5B8(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  std::__shared_weak_count *v4;

  *v1 = v2;
  v4 = (std::__shared_weak_count *)v1[3];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<AMCP::Node::Node(AMCP::System_Context &,applesauce::CF::StringRef)::$_0,std::allocator<AMCP::Node::Node(AMCP::System_Context &,applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Node::Node(AMCP::System_Context &,applesauce::CF::StringRef)::$_0,std::allocator<AMCP::Node::Node(AMCP::System_Context &,applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E699C7C8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::Node::Node(AMCP::System_Context &,applesauce::CF::StringRef)::$_0,std::allocator<AMCP::Node::Node(AMCP::System_Context &,applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E699C7C8;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<AMCP::Node::Node(AMCP::System_Context &,applesauce::CF::StringRef)::$_0,std::allocator<AMCP::Node::Node(AMCP::System_Context &,applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::operator()(uint64_t a1, AMCP::Core::Core **a2)
{
  unsigned int simple_required;
  _BOOL8 v5;
  CFTypeRef cf;

  simple_required = AMCP::Core::Core::get_simple_required_property<1650682995u>(*a2);
  if (!AMCP::is_base_of((AMCP *)0x616E6F64, simple_required))
    return 0;
  AMCP::Core::Core::get_simple_required_property<1853188452u>(&cf, *a2);
  v5 = applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(**(const __CFString ***)(a1 + 8), (const __CFString **)&cf) == kCFCompareEqualTo;
  if (cf)
    CFRelease(cf);
  return v5;
}

uint64_t std::__function::__func<AMCP::Node::Node(AMCP::System_Context &,applesauce::CF::StringRef)::$_0,std::allocator<AMCP::Node::Node(AMCP::System_Context &,applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4NodeC1ERNS_14System_ContextEN10applesauce2CF9StringRefEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Node::Node(AMCP::System_Context &,applesauce::CF::StringRef)::$_0,std::allocator<AMCP::Node::Node(AMCP::System_Context &,applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::target_type()
{
}

void AMCP::Node::get_client_io_handler(AMCP::Node *this@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  int8x8_t *v7;
  AMCP::Log::Scope_Registry *operation;
  _QWORD *v9;
  unint64_t v10;
  AMCP::Log::Scope_Registry *v11;
  AMCP::Log::Scope_Registry *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  NSObject *v20;
  unint64_t *v21;
  unint64_t v22;
  _opaque_pthread_t *v23;
  mach_port_t v24;
  void *v25;
  std::__shared_weak_count *v26;
  NSObject *v27;
  unint64_t *v28;
  unint64_t v29;
  _opaque_pthread_t *v30;
  mach_port_t v31;
  void *exception;
  NSObject *v33;
  _opaque_pthread_t *v34;
  mach_port_t v35;
  void *v36;
  uint64_t v37;
  int v38;
  int8x8_t *v39;
  std::__shared_weak_count *v40;
  _QWORD *v41;
  std::__shared_weak_count *v42;
  __int128 v43;
  uint64_t v44;
  uint64_t (**v45)();
  __int128 v46;
  uint64_t v47;
  std::string v48;
  std::runtime_error v49;
  std::runtime_error v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  char v56;
  uint8_t buf[8];
  _BYTE v58[10];
  __int16 v59;
  int v60;
  const char *v61;
  const char *v62;
  int v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v4 && (v5 = std::__shared_weak_count::lock(v4), (v40 = v5) != 0))
  {
    v6 = v5;
    v7 = (int8x8_t *)*((_QWORD *)this + 2);
    v39 = v7;
    if (v7)
    {
      v37 = 0x676C6F626E64696FLL;
      v38 = 0;
      operation = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v41, v7, (unsigned int *)&v37);
      v9 = v41;
      if (!v41)
      {
        AMCP::Log::Scope_Registry::get(operation);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v26 = *(std::__shared_weak_count **)v58;
        v27 = **(NSObject ***)buf;
        if (*(_QWORD *)v58)
        {
          v28 = (unint64_t *)(*(_QWORD *)v58 + 8);
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 - 1, v28));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
        {
          v30 = pthread_self();
          v31 = pthread_mach_thread_np(v30);
          *(_DWORD *)buf = 67109634;
          *(_DWORD *)&buf[4] = v31;
          *(_WORD *)v58 = 2080;
          *(_QWORD *)&v58[2] = "Core.h";
          v59 = 1024;
          v60 = 202;
          _os_log_error_impl(&dword_1B57BA000, v27, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v56);
        exception = __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v48);
        std::runtime_error::runtime_error(&v49, &v48);
        std::runtime_error::runtime_error(&v50, &v49);
        v52 = 0;
        v53 = 0;
        v54 = 0;
        v55 = -1;
        v50.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
        v51 = &unk_1E69A1FE0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v50);
        v61 = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) const [Return_Ty"
              "pe = std::function<void (unsigned int, const AMCP::Proc_Cycle_Info &, unsigned long, AMCP::Proc_Stream *, "
              "unsigned long, AMCP::Proc_Stream *)>, Argument_Types = <>]";
        v62 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
        v63 = 202;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v43);
        v46 = v43;
        v47 = v44;
        v43 = 0uLL;
        v44 = 0;
        v45 = off_1E69A20A0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v45);
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
      }
      v10 = AMCP::Implementation::get_type_marker<std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> ()(void)>>();
      v11 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v9, v10);
      if (!v11)
      {
        AMCP::Log::Scope_Registry::get(0);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v33 = **(NSObject ***)buf;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
        {
          v34 = pthread_self();
          v35 = pthread_mach_thread_np(v34);
          *(_DWORD *)buf = 67109634;
          *(_DWORD *)&buf[4] = v35;
          *(_WORD *)v58 = 2080;
          *(_QWORD *)&v58[2] = "Operation.h";
          v59 = 1024;
          v60 = 154;
          _os_log_error_impl(&dword_1B57BA000, v33, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v56);
        v36 = __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v48);
        std::runtime_error::runtime_error(&v49, &v48);
        std::runtime_error::runtime_error(&v50, &v49);
        v52 = 0;
        v53 = 0;
        v54 = 0;
        v55 = -1;
        v50.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
        v51 = &unk_1E69A1FE0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v50);
        v61 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = std::function<voi"
              "d (unsigned int, const AMCP::Proc_Cycle_Info &, unsigned long, AMCP::Proc_Stream *, unsigned long, AMCP::P"
              "roc_Stream *)>, Argument_Types = <>]";
        v62 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
        v63 = 154;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v43);
        v46 = v43;
        v47 = v44;
        v43 = 0uLL;
        v44 = 0;
        v45 = off_1E69A20A0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v45);
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v36, (uint64_t)buf);
      }
      v12 = v11;
      if (!*((_QWORD *)v11 + 7)
        || (*(_QWORD *)buf = AMCP::Implementation::get_type_marker<std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> ()(void)>>(),
            (v11 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, _QWORD, uint8_t *))v12 + 7))(4, (uint64_t)v12 + 24, 0, buf)) == 0))
      {
        AMCP::Log::Scope_Registry::get(v11);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v19 = *(std::__shared_weak_count **)v58;
        v20 = **(NSObject ***)buf;
        if (*(_QWORD *)v58)
        {
          v21 = (unint64_t *)(*(_QWORD *)v58 + 8);
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          v23 = pthread_self();
          v24 = pthread_mach_thread_np(v23);
          *(_DWORD *)buf = 67109634;
          *(_DWORD *)&buf[4] = v24;
          *(_WORD *)v58 = 2080;
          *(_QWORD *)&v58[2] = "Operation.h";
          v59 = 1024;
          v60 = 161;
          _os_log_error_impl(&dword_1B57BA000, v20, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v56);
        v25 = __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v48);
        std::runtime_error::runtime_error(&v49, &v48);
        std::runtime_error::runtime_error(&v50, &v49);
        v52 = 0;
        v53 = 0;
        v54 = 0;
        v55 = -1;
        v50.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
        v51 = &unk_1E69A1FE0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v50);
        v61 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = std::function<voi"
              "d (unsigned int, const AMCP::Proc_Cycle_Info &, unsigned long, AMCP::Proc_Stream *, unsigned long, AMCP::P"
              "roc_Stream *)>, Argument_Types = <>]";
        v62 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
        v63 = 161;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v43);
        v46 = v43;
        v47 = v44;
        v43 = 0uLL;
        v44 = 0;
        v45 = off_1E69A20A0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v45);
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v25, (uint64_t)buf);
      }
      v13 = *((_QWORD *)v11 + 3);
      if (!v13)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 48))(v13);
      v14 = v42;
      if (v42)
      {
        p_shared_owners = (unint64_t *)&v42->__shared_owners_;
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
    }
    else
    {
      *(_QWORD *)(a2 + 24) = 0;
    }
    v17 = (unint64_t *)&v6->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    *(_QWORD *)(a2 + 24) = 0;
  }
}

void sub_1B5C5BDC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,std::runtime_error a28,std::runtime_error a29,uint64_t a30,uint64_t a31)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Node::set_client_io_handler(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  AMCP::Address *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v14;
  int v15;
  _BYTE v16[24];
  _BYTE *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (!v3)
    return 0;
  v5 = std::__shared_weak_count::lock(v3);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = *(AMCP::Address **)(a1 + 16);
  if (!v7)
  {
    v10 = 0;
    goto LABEL_12;
  }
  v14 = 0x676C6F626E64696FLL;
  v15 = 0;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v16, a2);
  AMCP::Core::Core::call_operation_function<void,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(v7, (unsigned int *)&v14, (uint64_t)v16);
  v8 = v17;
  if (v17 == v16)
  {
    v9 = 4;
    v8 = v16;
    goto LABEL_9;
  }
  if (v17)
  {
    v9 = 5;
LABEL_9:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  v10 = 1;
LABEL_12:
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v10;
}

void sub_1B5C5C190(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1B5C5C198);
  __clang_call_terminate(a1);
}

void AMCP::Node::get_io_overload_handler(AMCP::Node *this@<X0>, AMCP::Log::Scope_Registry *a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  int8x8_t *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  int v11;
  int8x8_t *v12;
  std::__shared_weak_count *v13;

  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v4 && (v5 = std::__shared_weak_count::lock(v4), (v13 = v5) != 0))
  {
    v6 = v5;
    v7 = (int8x8_t *)*((_QWORD *)this + 2);
    v12 = v7;
    if (v7)
    {
      v10 = 0x676C6F626F766572;
      v11 = 0;
      AMCP::Core::Core::call_operation_function<std::function<void ()>>(a2, v7, (unsigned int *)&v10);
    }
    else
    {
      *((_QWORD *)a2 + 3) = 0;
    }
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    *((_QWORD *)a2 + 3) = 0;
  }
}

void sub_1B5C5C268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void AMCP::Core::Core::call_operation_function<std::function<void ()(unsigned int)>>(AMCP::Log::Scope_Registry *a1, int8x8_t *a2, unsigned int *a3)
{
  AMCP::Log::Scope_Registry *operation;
  _QWORD *v6;
  unint64_t v7;
  AMCP::Log::Scope_Registry *v8;
  AMCP::Log::Scope_Registry *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  NSObject *v14;
  _opaque_pthread_t *v15;
  mach_port_t v16;
  void *v17;
  std::__shared_weak_count *v18;
  NSObject *v19;
  unint64_t *v20;
  unint64_t v21;
  _opaque_pthread_t *v22;
  mach_port_t v23;
  void *exception;
  NSObject *v25;
  _opaque_pthread_t *v26;
  mach_port_t v27;
  void *v28;
  NSObject *v29;
  _opaque_pthread_t *v30;
  mach_port_t v31;
  _QWORD *v32;
  std::__shared_weak_count *v33;
  __int128 v34;
  uint64_t v35;
  uint64_t (**v36)();
  __int128 v37;
  uint64_t v38;
  std::string v39;
  std::runtime_error v40;
  std::runtime_error v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  char v47;
  uint8_t buf[8];
  _BYTE v49[10];
  __int16 v50;
  int v51;
  __int16 v52;
  _BYTE v53[14];
  const char *v54;
  int v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  if (*a3 == 707406378 || a3[1] == 707406378 || a3[2] == -1)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v29 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      v30 = pthread_self();
      v31 = pthread_mach_thread_np(v30);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v31;
      *(_WORD *)v49 = 2080;
      *(_QWORD *)&v49[2] = "Core.h";
      v50 = 1024;
      v51 = 198;
      v52 = 2080;
      *(_QWORD *)v53 = "!in_address.has_wildcards()";
      _os_log_error_impl(&dword_1B57BA000, v29, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s ", buf, 0x22u);
    }
    abort();
  }
  operation = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v32, a2, a3);
  v6 = v32;
  if (!v32)
  {
    AMCP::Log::Scope_Registry::get(operation);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v18 = *(std::__shared_weak_count **)v49;
    v19 = **(NSObject ***)buf;
    if (*(_QWORD *)v49)
    {
      v20 = (unint64_t *)(*(_QWORD *)v49 + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      v22 = pthread_self();
      v23 = pthread_mach_thread_np(v22);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v23;
      *(_WORD *)v49 = 2080;
      *(_QWORD *)&v49[2] = "Core.h";
      v50 = 1024;
      v51 = 202;
      _os_log_error_impl(&dword_1B57BA000, v19, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v47);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v39);
    std::runtime_error::runtime_error(&v40, &v39);
    std::runtime_error::runtime_error(&v41, &v40);
    v43 = 0;
    v44 = 0;
    v45 = 0;
    v46 = -1;
    v41.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v42 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v41);
    *(_QWORD *)&v53[6] = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) const"
                         " [Return_Type = std::function<void >, Argument_Types = <>]";
    v54 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
    v55 = 202;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v34);
    v37 = v34;
    v38 = v35;
    v34 = 0uLL;
    v35 = 0;
    v36 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v36);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v7 = AMCP::Implementation::get_type_marker<std::function<std::function<void ()> ()(void)>>();
  v8 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v6, v7);
  if (!v8)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v25 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      v26 = pthread_self();
      v27 = pthread_mach_thread_np(v26);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v27;
      *(_WORD *)v49 = 2080;
      *(_QWORD *)&v49[2] = "Operation.h";
      v50 = 1024;
      v51 = 154;
      _os_log_error_impl(&dword_1B57BA000, v25, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v47);
    v28 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v39);
    std::runtime_error::runtime_error(&v40, &v39);
    std::runtime_error::runtime_error(&v41, &v40);
    v43 = 0;
    v44 = 0;
    v45 = 0;
    v46 = -1;
    v41.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v42 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v41);
    *(_QWORD *)&v53[6] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = std::f"
                         "unction<void >, Argument_Types = <>]";
    v54 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v55 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v34);
    v37 = v34;
    v38 = v35;
    v34 = 0uLL;
    v35 = 0;
    v36 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v36);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v28, (uint64_t)buf);
  }
  v9 = v8;
  if (!*((_QWORD *)v8 + 7)
    || (*(_QWORD *)buf = AMCP::Implementation::get_type_marker<std::function<std::function<void ()> ()(void)>>(),
        (v8 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, _QWORD, uint8_t *))v9 + 7))(4, (uint64_t)v9 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v8);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v14 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      v15 = pthread_self();
      v16 = pthread_mach_thread_np(v15);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v16;
      *(_WORD *)v49 = 2080;
      *(_QWORD *)&v49[2] = "Operation.h";
      v50 = 1024;
      v51 = 161;
      _os_log_error_impl(&dword_1B57BA000, v14, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v47);
    v17 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v39);
    std::runtime_error::runtime_error(&v40, &v39);
    std::runtime_error::runtime_error(&v41, &v40);
    v43 = 0;
    v44 = 0;
    v45 = 0;
    v46 = -1;
    v41.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v42 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v41);
    *(_QWORD *)&v53[6] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = std::f"
                         "unction<void >, Argument_Types = <>]";
    v54 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v55 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v34);
    v37 = v34;
    v38 = v35;
    v34 = 0uLL;
    v35 = 0;
    v36 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v36);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v17, (uint64_t)buf);
  }
  v10 = *((_QWORD *)v8 + 3);
  if (!v10)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 48))(v10);
  v11 = v33;
  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1B5C5C928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::runtime_error a24,std::runtime_error a25,uint64_t a26,uint64_t a27)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Node::set_io_overload_handler(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  AMCP::Address *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v14;
  int v15;
  _BYTE v16[24];
  _BYTE *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (!v3)
    return 0;
  v5 = std::__shared_weak_count::lock(v3);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = *(AMCP::Address **)(a1 + 16);
  if (!v7)
  {
    v10 = 0;
    goto LABEL_12;
  }
  v14 = 0x676C6F626F766572;
  v15 = 0;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v16, a2);
  AMCP::Core::Core::call_operation_function<void,std::function<void ()>>(v7, (unsigned int *)&v14, (uint64_t)v16);
  v8 = v17;
  if (v17 == v16)
  {
    v9 = 4;
    v8 = v16;
    goto LABEL_9;
  }
  if (v17)
  {
    v9 = 5;
LABEL_9:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  v10 = 1;
LABEL_12:
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v10;
}

void sub_1B5C5CCEC(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1B5C5CCF4);
  __clang_call_terminate(a1);
}

void AMCP::Node::get_required_input_samples_for_output_samples_handler(AMCP::Node *this@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  int8x8_t *v7;
  AMCP::Log::Scope_Registry *operation;
  _QWORD *v9;
  unint64_t v10;
  AMCP::Log::Scope_Registry *v11;
  AMCP::Log::Scope_Registry *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  NSObject *v20;
  unint64_t *v21;
  unint64_t v22;
  _opaque_pthread_t *v23;
  mach_port_t v24;
  void *v25;
  std::__shared_weak_count *v26;
  NSObject *v27;
  unint64_t *v28;
  unint64_t v29;
  _opaque_pthread_t *v30;
  mach_port_t v31;
  void *exception;
  NSObject *v33;
  _opaque_pthread_t *v34;
  mach_port_t v35;
  void *v36;
  uint64_t v37;
  int v38;
  int8x8_t *v39;
  std::__shared_weak_count *v40;
  _QWORD *v41;
  std::__shared_weak_count *v42;
  __int128 v43;
  uint64_t v44;
  uint64_t (**v45)();
  __int128 v46;
  uint64_t v47;
  std::string v48;
  std::runtime_error v49;
  std::runtime_error v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  char v56;
  uint8_t buf[8];
  _BYTE v58[10];
  __int16 v59;
  int v60;
  const char *v61;
  const char *v62;
  int v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v4 && (v5 = std::__shared_weak_count::lock(v4), (v40 = v5) != 0))
  {
    v6 = v5;
    v7 = (int8x8_t *)*((_QWORD *)this + 2);
    v39 = v7;
    if (v7)
    {
      v37 = 0x676C6F626973666FLL;
      v38 = 0;
      operation = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v41, v7, (unsigned int *)&v37);
      v9 = v41;
      if (!v41)
      {
        AMCP::Log::Scope_Registry::get(operation);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v26 = *(std::__shared_weak_count **)v58;
        v27 = **(NSObject ***)buf;
        if (*(_QWORD *)v58)
        {
          v28 = (unint64_t *)(*(_QWORD *)v58 + 8);
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 - 1, v28));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
        {
          v30 = pthread_self();
          v31 = pthread_mach_thread_np(v30);
          *(_DWORD *)buf = 67109634;
          *(_DWORD *)&buf[4] = v31;
          *(_WORD *)v58 = 2080;
          *(_QWORD *)&v58[2] = "Core.h";
          v59 = 1024;
          v60 = 202;
          _os_log_error_impl(&dword_1B57BA000, v27, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v56);
        exception = __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v48);
        std::runtime_error::runtime_error(&v49, &v48);
        std::runtime_error::runtime_error(&v50, &v49);
        v52 = 0;
        v53 = 0;
        v54 = 0;
        v55 = -1;
        v50.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
        v51 = &unk_1E69A1FE0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v50);
        v61 = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) const [Return_Ty"
              "pe = std::function<unsigned long long (unsigned long long)>, Argument_Types = <>]";
        v62 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
        v63 = 202;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v43);
        v46 = v43;
        v47 = v44;
        v43 = 0uLL;
        v44 = 0;
        v45 = off_1E69A20A0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v45);
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
      }
      v10 = AMCP::Implementation::get_type_marker<std::function<std::function<unsigned long long ()(unsigned long long)> ()(void)>>();
      v11 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v9, v10);
      if (!v11)
      {
        AMCP::Log::Scope_Registry::get(0);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v33 = **(NSObject ***)buf;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
        {
          v34 = pthread_self();
          v35 = pthread_mach_thread_np(v34);
          *(_DWORD *)buf = 67109634;
          *(_DWORD *)&buf[4] = v35;
          *(_WORD *)v58 = 2080;
          *(_QWORD *)&v58[2] = "Operation.h";
          v59 = 1024;
          v60 = 154;
          _os_log_error_impl(&dword_1B57BA000, v33, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v56);
        v36 = __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v48);
        std::runtime_error::runtime_error(&v49, &v48);
        std::runtime_error::runtime_error(&v50, &v49);
        v52 = 0;
        v53 = 0;
        v54 = 0;
        v55 = -1;
        v50.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
        v51 = &unk_1E69A1FE0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v50);
        v61 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = std::function<uns"
              "igned long long (unsigned long long)>, Argument_Types = <>]";
        v62 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
        v63 = 154;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v43);
        v46 = v43;
        v47 = v44;
        v43 = 0uLL;
        v44 = 0;
        v45 = off_1E69A20A0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v45);
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v36, (uint64_t)buf);
      }
      v12 = v11;
      if (!*((_QWORD *)v11 + 7)
        || (*(_QWORD *)buf = AMCP::Implementation::get_type_marker<std::function<std::function<unsigned long long ()(unsigned long long)> ()(void)>>(),
            (v11 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, _QWORD, uint8_t *))v12 + 7))(4, (uint64_t)v12 + 24, 0, buf)) == 0))
      {
        AMCP::Log::Scope_Registry::get(v11);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v19 = *(std::__shared_weak_count **)v58;
        v20 = **(NSObject ***)buf;
        if (*(_QWORD *)v58)
        {
          v21 = (unint64_t *)(*(_QWORD *)v58 + 8);
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          v23 = pthread_self();
          v24 = pthread_mach_thread_np(v23);
          *(_DWORD *)buf = 67109634;
          *(_DWORD *)&buf[4] = v24;
          *(_WORD *)v58 = 2080;
          *(_QWORD *)&v58[2] = "Operation.h";
          v59 = 1024;
          v60 = 161;
          _os_log_error_impl(&dword_1B57BA000, v20, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v56);
        v25 = __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v48);
        std::runtime_error::runtime_error(&v49, &v48);
        std::runtime_error::runtime_error(&v50, &v49);
        v52 = 0;
        v53 = 0;
        v54 = 0;
        v55 = -1;
        v50.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
        v51 = &unk_1E69A1FE0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v50);
        v61 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = std::function<uns"
              "igned long long (unsigned long long)>, Argument_Types = <>]";
        v62 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
        v63 = 161;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v43);
        v46 = v43;
        v47 = v44;
        v43 = 0uLL;
        v44 = 0;
        v45 = off_1E69A20A0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v45);
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v25, (uint64_t)buf);
      }
      v13 = *((_QWORD *)v11 + 3);
      if (!v13)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 48))(v13);
      v14 = v42;
      if (v42)
      {
        p_shared_owners = (unint64_t *)&v42->__shared_owners_;
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
    }
    else
    {
      *(_QWORD *)(a2 + 24) = 0;
    }
    v17 = (unint64_t *)&v6->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    *(_QWORD *)(a2 + 24) = 0;
  }
}

void sub_1B5C5D384(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,std::runtime_error a28,std::runtime_error a29,uint64_t a30,uint64_t a31)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Node::set_required_input_samples_for_output_samples_handler(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  int8x8_t *v7;
  AMCP::Log::Scope_Registry *operation;
  _QWORD *v9;
  unint64_t v10;
  AMCP::Log::Scope_Registry *v11;
  AMCP::Log::Scope_Registry *v12;
  AMCP::Log::Scope_Registry *v13;
  uint64_t v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  std::string *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  NSObject *v27;
  unint64_t *v28;
  unint64_t v29;
  _opaque_pthread_t *v30;
  mach_port_t v31;
  void *v32;
  std::__shared_weak_count *v33;
  NSObject *v34;
  unint64_t *v35;
  unint64_t v36;
  _opaque_pthread_t *v37;
  mach_port_t v38;
  void *exception;
  NSObject *v40;
  _opaque_pthread_t *v41;
  mach_port_t v42;
  void *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  std::__shared_weak_count *v50;
  std::runtime_error v51;
  std::string::size_type v52;
  uint64_t (**v53)();
  std::string __p;
  std::string v55;
  std::runtime_error v56;
  std::runtime_error v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  char v63;
  _BYTE v64[24];
  _BYTE *v65;
  std::string v66;
  std::string *v67;
  uint8_t buf[8];
  _BYTE v69[10];
  __int16 v70;
  int v71;
  uint8_t *v72;
  const char *v73;
  const char *v74;
  int v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (!v3)
    return 0;
  v5 = std::__shared_weak_count::lock(v3);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = *(int8x8_t **)(a1 + 16);
  if (!v7)
  {
    v18 = 0;
    goto LABEL_52;
  }
  v47 = 0x676C6F626973666FLL;
  LODWORD(v48) = 0;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v64, a2);
  operation = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v49, v7, (unsigned int *)&v47);
  v9 = v49;
  if (!v49)
  {
    AMCP::Log::Scope_Registry::get(operation);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v33 = *(std::__shared_weak_count **)v69;
    v34 = **(NSObject ***)buf;
    if (*(_QWORD *)v69)
    {
      v35 = (unint64_t *)(*(_QWORD *)v69 + 8);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      v37 = pthread_self();
      v38 = pthread_mach_thread_np(v37);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v38;
      *(_WORD *)v69 = 2080;
      *(_QWORD *)&v69[2] = "Core.h";
      v70 = 1024;
      v71 = 202;
      _os_log_error_impl(&dword_1B57BA000, v34, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v56);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v66, v47, v48);
    std::runtime_error::runtime_error(&v51, &v66);
    std::runtime_error::runtime_error(&v57, &v51);
    v59 = 0;
    v60 = 0;
    v61 = 0;
    v62 = -1;
    v57.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v58 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v57);
    v73 = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) const [Return_Type ="
          " void, Argument_Types = <std::function<unsigned long long (unsigned long long)>>]";
    v74 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
    v75 = 202;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v55.__r_.__value_.__l.__data_);
    v53 = off_1E69A20A0;
    __p = v55;
    memset(&v55, 0, sizeof(v55));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v53);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  std::__function::__value_func<unsigned long long ()(unsigned long long)>::__value_func[abi:ne180100]((uint64_t)&v66, (uint64_t)v64);
  v10 = AMCP::Implementation::get_type_marker<std::function<void ()(std::function<unsigned long long ()(unsigned long long)>)>>();
  v11 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v9, v10);
  if (!v11)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v40 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
    {
      v41 = pthread_self();
      v42 = pthread_mach_thread_np(v41);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v42;
      *(_WORD *)v69 = 2080;
      *(_QWORD *)&v69[2] = "Operation.h";
      v70 = 1024;
      v71 = 154;
      _os_log_error_impl(&dword_1B57BA000, v40, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v63);
    v43 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v55, v47, v48);
    std::runtime_error::runtime_error(&v56, &v55);
    std::runtime_error::runtime_error(&v57, &v56);
    v59 = 0;
    v60 = 0;
    v61 = 0;
    v62 = -1;
    v57.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v58 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v57);
    v73 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void, Argument_Types "
          "= <std::function<unsigned long long (unsigned long long)>>]";
    v74 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v75 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v51);
    v53 = off_1E69A20A0;
    *(std::runtime_error *)&__p.__r_.__value_.__l.__data_ = v51;
    __p.__r_.__value_.__r.__words[2] = v52;
    v51.__vftable = 0;
    v51.__imp_.__imp_ = 0;
    v52 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v53);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v43, (uint64_t)buf);
  }
  v12 = v11;
  if (!*((_QWORD *)v11 + 7)
    || (*(_QWORD *)buf = AMCP::Implementation::get_type_marker<std::function<void ()(std::function<unsigned long long ()(unsigned long long)>)>>(),
        v11 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, _QWORD, uint8_t *))v12 + 7))(4, (uint64_t)v12 + 24, 0, buf), (v13 = v11) == 0))
  {
    AMCP::Log::Scope_Registry::get(v11);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v26 = *(std::__shared_weak_count **)v69;
    v27 = **(NSObject ***)buf;
    if (*(_QWORD *)v69)
    {
      v28 = (unint64_t *)(*(_QWORD *)v69 + 8);
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      v30 = pthread_self();
      v31 = pthread_mach_thread_np(v30);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v31;
      *(_WORD *)v69 = 2080;
      *(_QWORD *)&v69[2] = "Operation.h";
      v70 = 1024;
      v71 = 161;
      _os_log_error_impl(&dword_1B57BA000, v27, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v63);
    v32 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v55, v47, v48);
    std::runtime_error::runtime_error(&v56, &v55);
    std::runtime_error::runtime_error(&v57, &v56);
    v59 = 0;
    v60 = 0;
    v61 = 0;
    v62 = -1;
    v57.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v58 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v57);
    v73 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void, Argument_Types "
          "= <std::function<unsigned long long (unsigned long long)>>]";
    v74 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v75 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v51);
    v53 = off_1E69A20A0;
    *(std::runtime_error *)&__p.__r_.__value_.__l.__data_ = v51;
    __p.__r_.__value_.__r.__words[2] = v52;
    v51.__vftable = 0;
    v51.__imp_.__imp_ = 0;
    v52 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v53);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v32, (uint64_t)buf);
  }
  std::__function::__value_func<unsigned long long ()(unsigned long long)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v66);
  v14 = *((_QWORD *)v13 + 3);
  if (!v14)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v14 + 48))(v14, buf);
  v16 = v72;
  if (v72 == buf)
  {
    v17 = 4;
    v16 = buf;
  }
  else
  {
    if (!v72)
      goto LABEL_15;
    v17 = 5;
  }
  (*(void (**)(uint8_t *, uint64_t))(*(_QWORD *)v16 + 8 * v17))(v16, v15);
LABEL_15:
  v19 = v67;
  if (v67 == &v66)
  {
    v20 = 4;
    v19 = &v66;
    goto LABEL_19;
  }
  if (v67)
  {
    v20 = 5;
LABEL_19:
    (*(void (**)(std::string *, uint64_t))(v19->__r_.__value_.__r.__words[0] + 8 * v20))(v19, v15);
  }
  v21 = v50;
  if (v50)
  {
    p_shared_owners = (unint64_t *)&v50->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v65;
  if (v65 == v64)
  {
    v25 = 4;
    v24 = v64;
    goto LABEL_29;
  }
  if (v65)
  {
    v25 = 5;
LABEL_29:
    (*(void (**)(_QWORD *, uint64_t))(*v24 + 8 * v25))(v24, v15);
  }
  v18 = 1;
LABEL_52:
  v44 = (unint64_t *)&v6->__shared_owners_;
  do
    v45 = __ldaxr(v44);
  while (__stlxr(v45 - 1, v44));
  if (!v45)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v18;
}

uint64_t std::__function::__value_func<unsigned long long ()(unsigned long long)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

void AMCP::Node::get_expected_output_samples_for_input_samples_handler(AMCP::Node *this@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  int8x8_t *v7;
  AMCP::Log::Scope_Registry *operation;
  _QWORD *v9;
  unint64_t v10;
  AMCP::Log::Scope_Registry *v11;
  AMCP::Log::Scope_Registry *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  NSObject *v20;
  unint64_t *v21;
  unint64_t v22;
  _opaque_pthread_t *v23;
  mach_port_t v24;
  void *v25;
  std::__shared_weak_count *v26;
  NSObject *v27;
  unint64_t *v28;
  unint64_t v29;
  _opaque_pthread_t *v30;
  mach_port_t v31;
  void *exception;
  NSObject *v33;
  _opaque_pthread_t *v34;
  mach_port_t v35;
  void *v36;
  uint64_t v37;
  int v38;
  int8x8_t *v39;
  std::__shared_weak_count *v40;
  _QWORD *v41;
  std::__shared_weak_count *v42;
  __int128 v43;
  uint64_t v44;
  uint64_t (**v45)();
  __int128 v46;
  uint64_t v47;
  std::string v48;
  std::runtime_error v49;
  std::runtime_error v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  char v56;
  uint8_t buf[8];
  _BYTE v58[10];
  __int16 v59;
  int v60;
  const char *v61;
  const char *v62;
  int v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v4 && (v5 = std::__shared_weak_count::lock(v4), (v40 = v5) != 0))
  {
    v6 = v5;
    v7 = (int8x8_t *)*((_QWORD *)this + 2);
    v39 = v7;
    if (v7)
    {
      v37 = 0x676C6F626F736669;
      v38 = 0;
      operation = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v41, v7, (unsigned int *)&v37);
      v9 = v41;
      if (!v41)
      {
        AMCP::Log::Scope_Registry::get(operation);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v26 = *(std::__shared_weak_count **)v58;
        v27 = **(NSObject ***)buf;
        if (*(_QWORD *)v58)
        {
          v28 = (unint64_t *)(*(_QWORD *)v58 + 8);
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 - 1, v28));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
        {
          v30 = pthread_self();
          v31 = pthread_mach_thread_np(v30);
          *(_DWORD *)buf = 67109634;
          *(_DWORD *)&buf[4] = v31;
          *(_WORD *)v58 = 2080;
          *(_QWORD *)&v58[2] = "Core.h";
          v59 = 1024;
          v60 = 202;
          _os_log_error_impl(&dword_1B57BA000, v27, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v56);
        exception = __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v48);
        std::runtime_error::runtime_error(&v49, &v48);
        std::runtime_error::runtime_error(&v50, &v49);
        v52 = 0;
        v53 = 0;
        v54 = 0;
        v55 = -1;
        v50.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
        v51 = &unk_1E69A1FE0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v50);
        v61 = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) const [Return_Ty"
              "pe = std::function<unsigned long long (unsigned long long, unsigned long long &)>, Argument_Types = <>]";
        v62 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
        v63 = 202;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v43);
        v46 = v43;
        v47 = v44;
        v43 = 0uLL;
        v44 = 0;
        v45 = off_1E69A20A0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v45);
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
      }
      v10 = AMCP::Implementation::get_type_marker<std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>>();
      v11 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v9, v10);
      if (!v11)
      {
        AMCP::Log::Scope_Registry::get(0);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v33 = **(NSObject ***)buf;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
        {
          v34 = pthread_self();
          v35 = pthread_mach_thread_np(v34);
          *(_DWORD *)buf = 67109634;
          *(_DWORD *)&buf[4] = v35;
          *(_WORD *)v58 = 2080;
          *(_QWORD *)&v58[2] = "Operation.h";
          v59 = 1024;
          v60 = 154;
          _os_log_error_impl(&dword_1B57BA000, v33, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v56);
        v36 = __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v48);
        std::runtime_error::runtime_error(&v49, &v48);
        std::runtime_error::runtime_error(&v50, &v49);
        v52 = 0;
        v53 = 0;
        v54 = 0;
        v55 = -1;
        v50.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
        v51 = &unk_1E69A1FE0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v50);
        v61 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = std::function<uns"
              "igned long long (unsigned long long, unsigned long long &)>, Argument_Types = <>]";
        v62 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
        v63 = 154;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v43);
        v46 = v43;
        v47 = v44;
        v43 = 0uLL;
        v44 = 0;
        v45 = off_1E69A20A0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v45);
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v36, (uint64_t)buf);
      }
      v12 = v11;
      if (!*((_QWORD *)v11 + 7)
        || (*(_QWORD *)buf = AMCP::Implementation::get_type_marker<std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>>(),
            (v11 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, _QWORD, uint8_t *))v12 + 7))(4, (uint64_t)v12 + 24, 0, buf)) == 0))
      {
        AMCP::Log::Scope_Registry::get(v11);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v19 = *(std::__shared_weak_count **)v58;
        v20 = **(NSObject ***)buf;
        if (*(_QWORD *)v58)
        {
          v21 = (unint64_t *)(*(_QWORD *)v58 + 8);
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          v23 = pthread_self();
          v24 = pthread_mach_thread_np(v23);
          *(_DWORD *)buf = 67109634;
          *(_DWORD *)&buf[4] = v24;
          *(_WORD *)v58 = 2080;
          *(_QWORD *)&v58[2] = "Operation.h";
          v59 = 1024;
          v60 = 161;
          _os_log_error_impl(&dword_1B57BA000, v20, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v56);
        v25 = __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v48);
        std::runtime_error::runtime_error(&v49, &v48);
        std::runtime_error::runtime_error(&v50, &v49);
        v52 = 0;
        v53 = 0;
        v54 = 0;
        v55 = -1;
        v50.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
        v51 = &unk_1E69A1FE0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v50);
        v61 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = std::function<uns"
              "igned long long (unsigned long long, unsigned long long &)>, Argument_Types = <>]";
        v62 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
        v63 = 161;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v43);
        v46 = v43;
        v47 = v44;
        v43 = 0uLL;
        v44 = 0;
        v45 = off_1E69A20A0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v45);
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v25, (uint64_t)buf);
      }
      v13 = *((_QWORD *)v11 + 3);
      if (!v13)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 48))(v13);
      v14 = v42;
      if (v42)
      {
        p_shared_owners = (unint64_t *)&v42->__shared_owners_;
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
    }
    else
    {
      *(_QWORD *)(a2 + 24) = 0;
    }
    v17 = (unint64_t *)&v6->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    *(_QWORD *)(a2 + 24) = 0;
  }
}

void sub_1B5C5E784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,std::runtime_error a28,std::runtime_error a29,uint64_t a30,uint64_t a31)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Node::set_expected_output_samples_for_input_samples_handler(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  int8x8_t *v7;
  AMCP::Log::Scope_Registry *operation;
  _QWORD *v9;
  unint64_t v10;
  AMCP::Log::Scope_Registry *v11;
  AMCP::Log::Scope_Registry *v12;
  AMCP::Log::Scope_Registry *v13;
  uint64_t v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  std::string *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  NSObject *v27;
  unint64_t *v28;
  unint64_t v29;
  _opaque_pthread_t *v30;
  mach_port_t v31;
  void *v32;
  std::__shared_weak_count *v33;
  NSObject *v34;
  unint64_t *v35;
  unint64_t v36;
  _opaque_pthread_t *v37;
  mach_port_t v38;
  void *exception;
  NSObject *v40;
  _opaque_pthread_t *v41;
  mach_port_t v42;
  void *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  std::__shared_weak_count *v50;
  std::runtime_error v51;
  std::string::size_type v52;
  uint64_t (**v53)();
  std::string __p;
  std::string v55;
  std::runtime_error v56;
  std::runtime_error v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  char v63;
  _BYTE v64[24];
  _BYTE *v65;
  std::string v66;
  std::string *v67;
  uint8_t buf[8];
  _BYTE v69[10];
  __int16 v70;
  int v71;
  uint8_t *v72;
  const char *v73;
  const char *v74;
  int v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (!v3)
    return 0;
  v5 = std::__shared_weak_count::lock(v3);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = *(int8x8_t **)(a1 + 16);
  if (!v7)
  {
    v18 = 0;
    goto LABEL_52;
  }
  v47 = 0x676C6F626F736669;
  LODWORD(v48) = 0;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v64, a2);
  operation = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v49, v7, (unsigned int *)&v47);
  v9 = v49;
  if (!v49)
  {
    AMCP::Log::Scope_Registry::get(operation);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v33 = *(std::__shared_weak_count **)v69;
    v34 = **(NSObject ***)buf;
    if (*(_QWORD *)v69)
    {
      v35 = (unint64_t *)(*(_QWORD *)v69 + 8);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      v37 = pthread_self();
      v38 = pthread_mach_thread_np(v37);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v38;
      *(_WORD *)v69 = 2080;
      *(_QWORD *)&v69[2] = "Core.h";
      v70 = 1024;
      v71 = 202;
      _os_log_error_impl(&dword_1B57BA000, v34, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v56);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v66, v47, v48);
    std::runtime_error::runtime_error(&v51, &v66);
    std::runtime_error::runtime_error(&v57, &v51);
    v59 = 0;
    v60 = 0;
    v61 = 0;
    v62 = -1;
    v57.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v58 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v57);
    v73 = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) const [Return_Type ="
          " void, Argument_Types = <std::function<unsigned long long (unsigned long long, unsigned long long &)>>]";
    v74 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
    v75 = 202;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v55.__r_.__value_.__l.__data_);
    v53 = off_1E69A20A0;
    __p = v55;
    memset(&v55, 0, sizeof(v55));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v53);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  std::__function::__value_func<unsigned long long ()(unsigned long long,unsigned long long &)>::__value_func[abi:ne180100]((uint64_t)&v66, (uint64_t)v64);
  v10 = AMCP::Implementation::get_type_marker<std::function<void ()(std::function<unsigned long long ()(unsigned long long,unsigned long long &)>)>>();
  v11 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v9, v10);
  if (!v11)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v40 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
    {
      v41 = pthread_self();
      v42 = pthread_mach_thread_np(v41);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v42;
      *(_WORD *)v69 = 2080;
      *(_QWORD *)&v69[2] = "Operation.h";
      v70 = 1024;
      v71 = 154;
      _os_log_error_impl(&dword_1B57BA000, v40, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v63);
    v43 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v55, v47, v48);
    std::runtime_error::runtime_error(&v56, &v55);
    std::runtime_error::runtime_error(&v57, &v56);
    v59 = 0;
    v60 = 0;
    v61 = 0;
    v62 = -1;
    v57.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v58 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v57);
    v73 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void, Argument_Types "
          "= <std::function<unsigned long long (unsigned long long, unsigned long long &)>>]";
    v74 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v75 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v51);
    v53 = off_1E69A20A0;
    *(std::runtime_error *)&__p.__r_.__value_.__l.__data_ = v51;
    __p.__r_.__value_.__r.__words[2] = v52;
    v51.__vftable = 0;
    v51.__imp_.__imp_ = 0;
    v52 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v53);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v43, (uint64_t)buf);
  }
  v12 = v11;
  if (!*((_QWORD *)v11 + 7)
    || (*(_QWORD *)buf = AMCP::Implementation::get_type_marker<std::function<void ()(std::function<unsigned long long ()(unsigned long long,unsigned long long &)>)>>(),
        v11 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, _QWORD, uint8_t *))v12 + 7))(4, (uint64_t)v12 + 24, 0, buf), (v13 = v11) == 0))
  {
    AMCP::Log::Scope_Registry::get(v11);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v26 = *(std::__shared_weak_count **)v69;
    v27 = **(NSObject ***)buf;
    if (*(_QWORD *)v69)
    {
      v28 = (unint64_t *)(*(_QWORD *)v69 + 8);
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      v30 = pthread_self();
      v31 = pthread_mach_thread_np(v30);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v31;
      *(_WORD *)v69 = 2080;
      *(_QWORD *)&v69[2] = "Operation.h";
      v70 = 1024;
      v71 = 161;
      _os_log_error_impl(&dword_1B57BA000, v27, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v63);
    v32 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v55, v47, v48);
    std::runtime_error::runtime_error(&v56, &v55);
    std::runtime_error::runtime_error(&v57, &v56);
    v59 = 0;
    v60 = 0;
    v61 = 0;
    v62 = -1;
    v57.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v58 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v57);
    v73 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void, Argument_Types "
          "= <std::function<unsigned long long (unsigned long long, unsigned long long &)>>]";
    v74 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v75 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v51);
    v53 = off_1E69A20A0;
    *(std::runtime_error *)&__p.__r_.__value_.__l.__data_ = v51;
    __p.__r_.__value_.__r.__words[2] = v52;
    v51.__vftable = 0;
    v51.__imp_.__imp_ = 0;
    v52 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v53);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v32, (uint64_t)buf);
  }
  std::__function::__value_func<unsigned long long ()(unsigned long long,unsigned long long &)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v66);
  v14 = *((_QWORD *)v13 + 3);
  if (!v14)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v14 + 48))(v14, buf);
  v16 = v72;
  if (v72 == buf)
  {
    v17 = 4;
    v16 = buf;
  }
  else
  {
    if (!v72)
      goto LABEL_15;
    v17 = 5;
  }
  (*(void (**)(uint8_t *, uint64_t))(*(_QWORD *)v16 + 8 * v17))(v16, v15);
LABEL_15:
  v19 = v67;
  if (v67 == &v66)
  {
    v20 = 4;
    v19 = &v66;
    goto LABEL_19;
  }
  if (v67)
  {
    v20 = 5;
LABEL_19:
    (*(void (**)(std::string *, uint64_t))(v19->__r_.__value_.__r.__words[0] + 8 * v20))(v19, v15);
  }
  v21 = v50;
  if (v50)
  {
    p_shared_owners = (unint64_t *)&v50->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v65;
  if (v65 == v64)
  {
    v25 = 4;
    v24 = v64;
    goto LABEL_29;
  }
  if (v65)
  {
    v25 = 5;
LABEL_29:
    (*(void (**)(_QWORD *, uint64_t))(*v24 + 8 * v25))(v24, v15);
  }
  v18 = 1;
LABEL_52:
  v44 = (unint64_t *)&v6->__shared_owners_;
  do
    v45 = __ldaxr(v44);
  while (__stlxr(v45 - 1, v44));
  if (!v45)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v18;
}

uint64_t std::__function::__value_func<unsigned long long ()(unsigned long long,unsigned long long &)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

void AMCP::Node::get_connections_changed_handler(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 24) = 0;
}

uint64_t AMCP::Node::set_connections_changed_handler()
{
  return 0;
}

void AMCP::Node::get_register_client_handler(AMCP::Node *this@<X0>, AMCP::Log::Scope_Registry *a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  int8x8_t *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  int v11;
  int8x8_t *v12;
  std::__shared_weak_count *v13;

  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v4 && (v5 = std::__shared_weak_count::lock(v4), (v13 = v5) != 0))
  {
    v6 = v5;
    v7 = (int8x8_t *)*((_QWORD *)this + 2);
    v12 = v7;
    if (v7)
    {
      v10 = 0x676C6F627265636CLL;
      v11 = 0;
      AMCP::Core::Core::call_operation_function<std::function<void ()>>(a2, v7, (unsigned int *)&v10);
    }
    else
    {
      *((_QWORD *)a2 + 3) = 0;
    }
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    *((_QWORD *)a2 + 3) = 0;
  }
}

void sub_1B5C5F5D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Node::set_register_client_handler(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  AMCP::Address *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v14;
  int v15;
  _BYTE v16[24];
  _BYTE *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (!v3)
    return 0;
  v5 = std::__shared_weak_count::lock(v3);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = *(AMCP::Address **)(a1 + 16);
  if (!v7)
  {
    v10 = 0;
    goto LABEL_12;
  }
  v14 = 0x676C6F627265636CLL;
  v15 = 0;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v16, a2);
  AMCP::Core::Core::call_operation_function<void,std::function<void ()>>(v7, (unsigned int *)&v14, (uint64_t)v16);
  v8 = v17;
  if (v17 == v16)
  {
    v9 = 4;
    v8 = v16;
    goto LABEL_9;
  }
  if (v17)
  {
    v9 = 5;
LABEL_9:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  v10 = 1;
LABEL_12:
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v10;
}

void sub_1B5C5F754(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1B5C5F75CLL);
  __clang_call_terminate(a1);
}

void AMCP::Node::get_begin_processing_handler(AMCP::Node *this@<X0>, AMCP::Log::Scope_Registry *a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  int8x8_t *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  int v11;
  int8x8_t *v12;
  std::__shared_weak_count *v13;

  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v4 && (v5 = std::__shared_weak_count::lock(v4), (v13 = v5) != 0))
  {
    v6 = v5;
    v7 = (int8x8_t *)*((_QWORD *)this + 2);
    v12 = v7;
    if (v7)
    {
      v10 = 0x676C6F626E646270;
      v11 = 0;
      AMCP::Core::Core::call_operation_function<std::function<void ()>>(a2, v7, (unsigned int *)&v10);
    }
    else
    {
      *((_QWORD *)a2 + 3) = 0;
    }
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    *((_QWORD *)a2 + 3) = 0;
  }
}

void sub_1B5C5F82C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Node::set_begin_processing_handler(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  AMCP::Address *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v14;
  int v15;
  _BYTE v16[24];
  _BYTE *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (!v3)
    return 0;
  v5 = std::__shared_weak_count::lock(v3);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = *(AMCP::Address **)(a1 + 16);
  if (!v7)
  {
    v10 = 0;
    goto LABEL_12;
  }
  v14 = 0x676C6F626E646270;
  v15 = 0;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v16, a2);
  AMCP::Core::Core::call_operation_function<void,std::function<void ()>>(v7, (unsigned int *)&v14, (uint64_t)v16);
  v8 = v17;
  if (v17 == v16)
  {
    v9 = 4;
    v8 = v16;
    goto LABEL_9;
  }
  if (v17)
  {
    v9 = 5;
LABEL_9:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  v10 = 1;
LABEL_12:
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v10;
}

void sub_1B5C5F9AC(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1B5C5F9B4);
  __clang_call_terminate(a1);
}

void AMCP::Node::get_begin_cycle_handler(AMCP::Node *this@<X0>, AMCP::Log::Scope_Registry *a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  int8x8_t *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  int v11;
  int8x8_t *v12;
  std::__shared_weak_count *v13;

  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v4 && (v5 = std::__shared_weak_count::lock(v4), (v13 = v5) != 0))
  {
    v6 = v5;
    v7 = (int8x8_t *)*((_QWORD *)this + 2);
    v12 = v7;
    if (v7)
    {
      v10 = 0x676C6F626E646263;
      v11 = 0;
      AMCP::Core::Core::call_operation_function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(a2, v7, (unsigned int *)&v10);
    }
    else
    {
      *((_QWORD *)a2 + 3) = 0;
    }
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    *((_QWORD *)a2 + 3) = 0;
  }
}

void sub_1B5C5FA84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void AMCP::Core::Core::call_operation_function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Log::Scope_Registry *a1, int8x8_t *a2, unsigned int *a3)
{
  AMCP::Log::Scope_Registry *operation;
  _QWORD *v6;
  unint64_t v7;
  AMCP::Log::Scope_Registry *v8;
  AMCP::Log::Scope_Registry *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  NSObject *v14;
  _opaque_pthread_t *v15;
  mach_port_t v16;
  void *v17;
  std::__shared_weak_count *v18;
  NSObject *v19;
  unint64_t *v20;
  unint64_t v21;
  _opaque_pthread_t *v22;
  mach_port_t v23;
  void *exception;
  NSObject *v25;
  _opaque_pthread_t *v26;
  mach_port_t v27;
  void *v28;
  NSObject *v29;
  _opaque_pthread_t *v30;
  mach_port_t v31;
  _QWORD *v32;
  std::__shared_weak_count *v33;
  __int128 v34;
  uint64_t v35;
  uint64_t (**v36)();
  __int128 v37;
  uint64_t v38;
  std::string v39;
  std::runtime_error v40;
  std::runtime_error v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  char v47;
  uint8_t buf[8];
  _BYTE v49[10];
  __int16 v50;
  int v51;
  __int16 v52;
  _BYTE v53[14];
  const char *v54;
  int v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  if (*a3 == 707406378 || a3[1] == 707406378 || a3[2] == -1)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v29 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      v30 = pthread_self();
      v31 = pthread_mach_thread_np(v30);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v31;
      *(_WORD *)v49 = 2080;
      *(_QWORD *)&v49[2] = "Core.h";
      v50 = 1024;
      v51 = 198;
      v52 = 2080;
      *(_QWORD *)v53 = "!in_address.has_wildcards()";
      _os_log_error_impl(&dword_1B57BA000, v29, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s ", buf, 0x22u);
    }
    abort();
  }
  operation = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v32, a2, a3);
  v6 = v32;
  if (!v32)
  {
    AMCP::Log::Scope_Registry::get(operation);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v18 = *(std::__shared_weak_count **)v49;
    v19 = **(NSObject ***)buf;
    if (*(_QWORD *)v49)
    {
      v20 = (unint64_t *)(*(_QWORD *)v49 + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      v22 = pthread_self();
      v23 = pthread_mach_thread_np(v22);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v23;
      *(_WORD *)v49 = 2080;
      *(_QWORD *)&v49[2] = "Core.h";
      v50 = 1024;
      v51 = 202;
      _os_log_error_impl(&dword_1B57BA000, v19, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v47);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v39);
    std::runtime_error::runtime_error(&v40, &v39);
    std::runtime_error::runtime_error(&v41, &v40);
    v43 = 0;
    v44 = 0;
    v45 = 0;
    v46 = -1;
    v41.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v42 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v41);
    *(_QWORD *)&v53[6] = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) const"
                         " [Return_Type = std::function<void (unsigned int, const AMCP::Proc_Cycle_Info &)>, Argument_Types = <>]";
    v54 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
    v55 = 202;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v34);
    v37 = v34;
    v38 = v35;
    v34 = 0uLL;
    v35 = 0;
    v36 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v36);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v7 = AMCP::Implementation::get_type_marker<std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> ()(void)>>();
  v8 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v6, v7);
  if (!v8)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v25 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      v26 = pthread_self();
      v27 = pthread_mach_thread_np(v26);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v27;
      *(_WORD *)v49 = 2080;
      *(_QWORD *)&v49[2] = "Operation.h";
      v50 = 1024;
      v51 = 154;
      _os_log_error_impl(&dword_1B57BA000, v25, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v47);
    v28 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v39);
    std::runtime_error::runtime_error(&v40, &v39);
    std::runtime_error::runtime_error(&v41, &v40);
    v43 = 0;
    v44 = 0;
    v45 = 0;
    v46 = -1;
    v41.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v42 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v41);
    *(_QWORD *)&v53[6] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = std::f"
                         "unction<void (unsigned int, const AMCP::Proc_Cycle_Info &)>, Argument_Types = <>]";
    v54 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v55 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v34);
    v37 = v34;
    v38 = v35;
    v34 = 0uLL;
    v35 = 0;
    v36 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v36);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v28, (uint64_t)buf);
  }
  v9 = v8;
  if (!*((_QWORD *)v8 + 7)
    || (*(_QWORD *)buf = AMCP::Implementation::get_type_marker<std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> ()(void)>>(),
        (v8 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, _QWORD, uint8_t *))v9 + 7))(4, (uint64_t)v9 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v8);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v14 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      v15 = pthread_self();
      v16 = pthread_mach_thread_np(v15);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v16;
      *(_WORD *)v49 = 2080;
      *(_QWORD *)&v49[2] = "Operation.h";
      v50 = 1024;
      v51 = 161;
      _os_log_error_impl(&dword_1B57BA000, v14, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v47);
    v17 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v39);
    std::runtime_error::runtime_error(&v40, &v39);
    std::runtime_error::runtime_error(&v41, &v40);
    v43 = 0;
    v44 = 0;
    v45 = 0;
    v46 = -1;
    v41.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v42 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v41);
    *(_QWORD *)&v53[6] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = std::f"
                         "unction<void (unsigned int, const AMCP::Proc_Cycle_Info &)>, Argument_Types = <>]";
    v54 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v55 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v34);
    v37 = v34;
    v38 = v35;
    v34 = 0uLL;
    v35 = 0;
    v36 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v36);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v17, (uint64_t)buf);
  }
  v10 = *((_QWORD *)v8 + 3);
  if (!v10)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 48))(v10);
  v11 = v33;
  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1B5C60144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::runtime_error a24,std::runtime_error a25,uint64_t a26,uint64_t a27)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Node::set_begin_cycle_handler(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  AMCP::Address *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v14;
  int v15;
  _BYTE v16[24];
  _BYTE *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (!v3)
    return 0;
  v5 = std::__shared_weak_count::lock(v3);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = *(AMCP::Address **)(a1 + 16);
  if (!v7)
  {
    v10 = 0;
    goto LABEL_12;
  }
  v14 = 0x676C6F626E646263;
  v15 = 0;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v16, a2);
  AMCP::Core::Core::call_operation_function<void,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(v7, (unsigned int *)&v14, (uint64_t)v16);
  v8 = v17;
  if (v17 == v16)
  {
    v9 = 4;
    v8 = v16;
    goto LABEL_9;
  }
  if (v17)
  {
    v9 = 5;
LABEL_9:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  v10 = 1;
LABEL_12:
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v10;
}

void sub_1B5C60508(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1B5C60510);
  __clang_call_terminate(a1);
}

void AMCP::Core::Core::call_operation_function<void,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Address *a1, unsigned int *a2, uint64_t a3)
{
  AMCP::Log::Scope_Registry *operation;
  _QWORD *v7;
  unint64_t v8;
  AMCP::Log::Scope_Registry *v9;
  AMCP::Log::Scope_Registry *v10;
  AMCP::Log::Scope_Registry *v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  NSObject *v20;
  _opaque_pthread_t *v21;
  mach_port_t v22;
  void *v23;
  std::__shared_weak_count *v24;
  NSObject *v25;
  unint64_t *v26;
  unint64_t v27;
  _opaque_pthread_t *v28;
  mach_port_t v29;
  void *exception;
  NSObject *v31;
  _opaque_pthread_t *v32;
  mach_port_t v33;
  void *v34;
  NSObject *v35;
  _opaque_pthread_t *v36;
  mach_port_t v37;
  _QWORD *v38;
  std::__shared_weak_count *v39;
  __int128 v40;
  uint64_t v41;
  uint64_t (**v42)();
  __int128 v43;
  uint64_t v44;
  std::string v45;
  std::runtime_error v46;
  std::runtime_error v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  char v53;
  _BYTE v54[24];
  _BYTE *v55;
  uint8_t buf[8];
  _BYTE v57[10];
  __int16 v58;
  int v59;
  __int128 v60;
  const char *v61;
  int v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  if (*a2 == 707406378 || a2[1] == 707406378 || a2[2] == -1)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v35 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      v36 = pthread_self();
      v37 = pthread_mach_thread_np(v36);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v37;
      *(_WORD *)v57 = 2080;
      *(_QWORD *)&v57[2] = "Core.h";
      v58 = 1024;
      v59 = 198;
      LOWORD(v60) = 2080;
      *(_QWORD *)((char *)&v60 + 2) = "!in_address.has_wildcards()";
      _os_log_error_impl(&dword_1B57BA000, v35, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s ", buf, 0x22u);
    }
    abort();
  }
  operation = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v38, (int8x8_t *)a1, a2);
  v7 = v38;
  if (!v38)
  {
    AMCP::Log::Scope_Registry::get(operation);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v24 = *(std::__shared_weak_count **)v57;
    v25 = **(NSObject ***)buf;
    if (*(_QWORD *)v57)
    {
      v26 = (unint64_t *)(*(_QWORD *)v57 + 8);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      v28 = pthread_self();
      v29 = pthread_mach_thread_np(v28);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v29;
      *(_WORD *)v57 = 2080;
      *(_QWORD *)&v57[2] = "Core.h";
      v58 = 1024;
      v59 = 202;
      _os_log_error_impl(&dword_1B57BA000, v25, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v53);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v45);
    std::runtime_error::runtime_error(&v46, &v45);
    std::runtime_error::runtime_error(&v47, &v46);
    v49 = 0;
    v50 = 0;
    v51 = 0;
    v52 = -1;
    v47.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v48 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v47);
    *((_QWORD *)&v60 + 1) = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) co"
                            "nst [Return_Type = void, Argument_Types = <std::function<void (unsigned int, const AMCP::Pro"
                            "c_Cycle_Info &)>>]";
    v61 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
    v62 = 202;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v40);
    v43 = v40;
    v44 = v41;
    v40 = 0uLL;
    v41 = 0;
    v42 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v42);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::__value_func[abi:ne180100]((uint64_t)v54, a3);
  v8 = AMCP::Implementation::get_type_marker<std::function<void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>)>>();
  v9 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v7, v8);
  if (!v9)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v31 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      v32 = pthread_self();
      v33 = pthread_mach_thread_np(v32);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v33;
      *(_WORD *)v57 = 2080;
      *(_QWORD *)&v57[2] = "Operation.h";
      v58 = 1024;
      v59 = 154;
      _os_log_error_impl(&dword_1B57BA000, v31, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v53);
    v34 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v45);
    std::runtime_error::runtime_error(&v46, &v45);
    std::runtime_error::runtime_error(&v47, &v46);
    v49 = 0;
    v50 = 0;
    v51 = 0;
    v52 = -1;
    v47.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v48 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v47);
    *((_QWORD *)&v60 + 1) = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = voi"
                            "d, Argument_Types = <std::function<void (unsigned int, const AMCP::Proc_Cycle_Info &)>>]";
    v61 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v62 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v40);
    v43 = v40;
    v44 = v41;
    v40 = 0uLL;
    v41 = 0;
    v42 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v42);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v34, (uint64_t)buf);
  }
  v10 = v9;
  if (!*((_QWORD *)v9 + 7)
    || (*(_QWORD *)buf = AMCP::Implementation::get_type_marker<std::function<void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>)>>(),
        v9 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, _QWORD, uint8_t *))v10 + 7))(4, (uint64_t)v10 + 24, 0, buf), (v11 = v9) == 0))
  {
    AMCP::Log::Scope_Registry::get(v9);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v20 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      v21 = pthread_self();
      v22 = pthread_mach_thread_np(v21);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v22;
      *(_WORD *)v57 = 2080;
      *(_QWORD *)&v57[2] = "Operation.h";
      v58 = 1024;
      v59 = 161;
      _os_log_error_impl(&dword_1B57BA000, v20, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v53);
    v23 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v45);
    std::runtime_error::runtime_error(&v46, &v45);
    std::runtime_error::runtime_error(&v47, &v46);
    v49 = 0;
    v50 = 0;
    v51 = 0;
    v52 = -1;
    v47.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v48 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v47);
    *((_QWORD *)&v60 + 1) = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = voi"
                            "d, Argument_Types = <std::function<void (unsigned int, const AMCP::Proc_Cycle_Info &)>>]";
    v61 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v62 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v40);
    v43 = v40;
    v44 = v41;
    v40 = 0uLL;
    v41 = 0;
    v42 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v42);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v23, (uint64_t)buf);
  }
  std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)v54);
  v12 = *((_QWORD *)v11 + 3);
  if (!v12)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v12 + 48))(v12, buf);
  v13 = (uint8_t *)v60;
  if ((uint8_t *)v60 == buf)
  {
    v14 = 4;
    v13 = buf;
  }
  else
  {
    if (!(_QWORD)v60)
      goto LABEL_18;
    v14 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v13 + 8 * v14))();
LABEL_18:
  v15 = v55;
  if (v55 == v54)
  {
    v16 = 4;
    v15 = v54;
  }
  else
  {
    if (!v55)
      goto LABEL_23;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_23:
  v17 = v39;
  if (v39)
  {
    p_shared_owners = (unint64_t *)&v39->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_1B5C60C48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::runtime_error a24,std::runtime_error a25,uint64_t a26,uint64_t a27)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

void AMCP::Node::get_end_cycle_handler(AMCP::Node *this@<X0>, AMCP::Log::Scope_Registry *a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  int8x8_t *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  int v11;
  int8x8_t *v12;
  std::__shared_weak_count *v13;

  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v4 && (v5 = std::__shared_weak_count::lock(v4), (v13 = v5) != 0))
  {
    v6 = v5;
    v7 = (int8x8_t *)*((_QWORD *)this + 2);
    v12 = v7;
    if (v7)
    {
      v10 = 0x676C6F626E646563;
      v11 = 0;
      AMCP::Core::Core::call_operation_function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(a2, v7, (unsigned int *)&v10);
    }
    else
    {
      *((_QWORD *)a2 + 3) = 0;
    }
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    *((_QWORD *)a2 + 3) = 0;
  }
}

void sub_1B5C61078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Node::set_end_cycle_handler(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  AMCP::Address *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v14;
  int v15;
  _BYTE v16[24];
  _BYTE *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (!v3)
    return 0;
  v5 = std::__shared_weak_count::lock(v3);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = *(AMCP::Address **)(a1 + 16);
  if (!v7)
  {
    v10 = 0;
    goto LABEL_12;
  }
  v14 = 0x676C6F626E646563;
  v15 = 0;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v16, a2);
  AMCP::Core::Core::call_operation_function<void,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(v7, (unsigned int *)&v14, (uint64_t)v16);
  v8 = v17;
  if (v17 == v16)
  {
    v9 = 4;
    v8 = v16;
    goto LABEL_9;
  }
  if (v17)
  {
    v9 = 5;
LABEL_9:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  v10 = 1;
LABEL_12:
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v10;
}

void sub_1B5C611F8(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1B5C61200);
  __clang_call_terminate(a1);
}

void AMCP::Node::get_end_processing_handler(AMCP::Node *this@<X0>, AMCP::Log::Scope_Registry *a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  int8x8_t *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  int v11;
  int8x8_t *v12;
  std::__shared_weak_count *v13;

  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v4 && (v5 = std::__shared_weak_count::lock(v4), (v13 = v5) != 0))
  {
    v6 = v5;
    v7 = (int8x8_t *)*((_QWORD *)this + 2);
    v12 = v7;
    if (v7)
    {
      v10 = 0x676C6F626E646570;
      v11 = 0;
      AMCP::Core::Core::call_operation_function<std::function<void ()>>(a2, v7, (unsigned int *)&v10);
    }
    else
    {
      *((_QWORD *)a2 + 3) = 0;
    }
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    *((_QWORD *)a2 + 3) = 0;
  }
}

void sub_1B5C612D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Node::set_end_processing_handler(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  AMCP::Address *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v14;
  int v15;
  _BYTE v16[24];
  _BYTE *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (!v3)
    return 0;
  v5 = std::__shared_weak_count::lock(v3);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = *(AMCP::Address **)(a1 + 16);
  if (!v7)
  {
    v10 = 0;
    goto LABEL_12;
  }
  v14 = 0x676C6F626E646570;
  v15 = 0;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v16, a2);
  AMCP::Core::Core::call_operation_function<void,std::function<void ()>>(v7, (unsigned int *)&v14, (uint64_t)v16);
  v8 = v17;
  if (v17 == v16)
  {
    v9 = 4;
    v8 = v16;
    goto LABEL_9;
  }
  if (v17)
  {
    v9 = 5;
LABEL_9:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  v10 = 1;
LABEL_12:
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v10;
}

void sub_1B5C61450(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1B5C61458);
  __clang_call_terminate(a1);
}

void AMCP::Node::get_unregister_client_handler(AMCP::Node *this@<X0>, AMCP::Log::Scope_Registry *a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  int8x8_t *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  int v11;
  int8x8_t *v12;
  std::__shared_weak_count *v13;

  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v4 && (v5 = std::__shared_weak_count::lock(v4), (v13 = v5) != 0))
  {
    v6 = v5;
    v7 = (int8x8_t *)*((_QWORD *)this + 2);
    v12 = v7;
    if (v7)
    {
      v10 = 0x676C6F62756E636CLL;
      v11 = 0;
      AMCP::Core::Core::call_operation_function<std::function<void ()>>(a2, v7, (unsigned int *)&v10);
    }
    else
    {
      *((_QWORD *)a2 + 3) = 0;
    }
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    *((_QWORD *)a2 + 3) = 0;
  }
}

void sub_1B5C61528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Node::set_unregister_client_handler(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  AMCP::Address *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v14;
  int v15;
  _BYTE v16[24];
  _BYTE *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (!v3)
    return 0;
  v5 = std::__shared_weak_count::lock(v3);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = *(AMCP::Address **)(a1 + 16);
  if (!v7)
  {
    v10 = 0;
    goto LABEL_12;
  }
  v14 = 0x676C6F62756E636CLL;
  v15 = 0;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v16, a2);
  AMCP::Core::Core::call_operation_function<void,std::function<void ()>>(v7, (unsigned int *)&v14, (uint64_t)v16);
  v8 = v17;
  if (v17 == v16)
  {
    v9 = 4;
    v8 = v16;
    goto LABEL_9;
  }
  if (v17)
  {
    v9 = 5;
LABEL_9:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  v10 = 1;
LABEL_12:
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v10;
}

void sub_1B5C616A8(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1B5C616B0);
  __clang_call_terminate(a1);
}

void AMCP::Node::get_latency_handler(AMCP::Node *this@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  int8x8_t *v7;
  AMCP::Log::Scope_Registry *operation;
  _QWORD *v9;
  unint64_t v10;
  AMCP::Log::Scope_Registry *v11;
  AMCP::Log::Scope_Registry *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  NSObject *v20;
  unint64_t *v21;
  unint64_t v22;
  _opaque_pthread_t *v23;
  mach_port_t v24;
  void *v25;
  std::__shared_weak_count *v26;
  NSObject *v27;
  unint64_t *v28;
  unint64_t v29;
  _opaque_pthread_t *v30;
  mach_port_t v31;
  void *exception;
  NSObject *v33;
  _opaque_pthread_t *v34;
  mach_port_t v35;
  void *v36;
  uint64_t v37;
  int v38;
  int8x8_t *v39;
  std::__shared_weak_count *v40;
  _QWORD *v41;
  std::__shared_weak_count *v42;
  __int128 v43;
  uint64_t v44;
  uint64_t (**v45)();
  __int128 v46;
  uint64_t v47;
  std::string v48;
  std::runtime_error v49;
  std::runtime_error v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  char v56;
  uint8_t buf[8];
  _BYTE v58[10];
  __int16 v59;
  int v60;
  const char *v61;
  const char *v62;
  int v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v4 && (v5 = std::__shared_weak_count::lock(v4), (v40 = v5) != 0))
  {
    v6 = v5;
    v7 = (int8x8_t *)*((_QWORD *)this + 2);
    v39 = v7;
    if (v7)
    {
      v37 = 0x676C6F626E646C61;
      v38 = 0;
      operation = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v41, v7, (unsigned int *)&v37);
      v9 = v41;
      if (!v41)
      {
        AMCP::Log::Scope_Registry::get(operation);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v26 = *(std::__shared_weak_count **)v58;
        v27 = **(NSObject ***)buf;
        if (*(_QWORD *)v58)
        {
          v28 = (unint64_t *)(*(_QWORD *)v58 + 8);
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 - 1, v28));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
        {
          v30 = pthread_self();
          v31 = pthread_mach_thread_np(v30);
          *(_DWORD *)buf = 67109634;
          *(_DWORD *)&buf[4] = v31;
          *(_WORD *)v58 = 2080;
          *(_QWORD *)&v58[2] = "Core.h";
          v59 = 1024;
          v60 = 202;
          _os_log_error_impl(&dword_1B57BA000, v27, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v56);
        exception = __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v48);
        std::runtime_error::runtime_error(&v49, &v48);
        std::runtime_error::runtime_error(&v50, &v49);
        v52 = 0;
        v53 = 0;
        v54 = 0;
        v55 = -1;
        v50.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
        v51 = &unk_1E69A1FE0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v50);
        v61 = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) const [Return_Ty"
              "pe = std::function<long long ()>, Argument_Types = <>]";
        v62 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
        v63 = 202;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v43);
        v46 = v43;
        v47 = v44;
        v43 = 0uLL;
        v44 = 0;
        v45 = off_1E69A20A0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v45);
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
      }
      v10 = AMCP::Implementation::get_type_marker<std::function<std::function<long long ()(void)> ()(void)>>();
      v11 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v9, v10);
      if (!v11)
      {
        AMCP::Log::Scope_Registry::get(0);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v33 = **(NSObject ***)buf;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
        {
          v34 = pthread_self();
          v35 = pthread_mach_thread_np(v34);
          *(_DWORD *)buf = 67109634;
          *(_DWORD *)&buf[4] = v35;
          *(_WORD *)v58 = 2080;
          *(_QWORD *)&v58[2] = "Operation.h";
          v59 = 1024;
          v60 = 154;
          _os_log_error_impl(&dword_1B57BA000, v33, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v56);
        v36 = __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v48);
        std::runtime_error::runtime_error(&v49, &v48);
        std::runtime_error::runtime_error(&v50, &v49);
        v52 = 0;
        v53 = 0;
        v54 = 0;
        v55 = -1;
        v50.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
        v51 = &unk_1E69A1FE0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v50);
        v61 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = std::function<lon"
              "g long ()>, Argument_Types = <>]";
        v62 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
        v63 = 154;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v43);
        v46 = v43;
        v47 = v44;
        v43 = 0uLL;
        v44 = 0;
        v45 = off_1E69A20A0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v45);
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v36, (uint64_t)buf);
      }
      v12 = v11;
      if (!*((_QWORD *)v11 + 7)
        || (*(_QWORD *)buf = AMCP::Implementation::get_type_marker<std::function<std::function<long long ()(void)> ()(void)>>(),
            (v11 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, _QWORD, uint8_t *))v12 + 7))(4, (uint64_t)v12 + 24, 0, buf)) == 0))
      {
        AMCP::Log::Scope_Registry::get(v11);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v19 = *(std::__shared_weak_count **)v58;
        v20 = **(NSObject ***)buf;
        if (*(_QWORD *)v58)
        {
          v21 = (unint64_t *)(*(_QWORD *)v58 + 8);
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          v23 = pthread_self();
          v24 = pthread_mach_thread_np(v23);
          *(_DWORD *)buf = 67109634;
          *(_DWORD *)&buf[4] = v24;
          *(_WORD *)v58 = 2080;
          *(_QWORD *)&v58[2] = "Operation.h";
          v59 = 1024;
          v60 = 161;
          _os_log_error_impl(&dword_1B57BA000, v20, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v56);
        v25 = __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v48);
        std::runtime_error::runtime_error(&v49, &v48);
        std::runtime_error::runtime_error(&v50, &v49);
        v52 = 0;
        v53 = 0;
        v54 = 0;
        v55 = -1;
        v50.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
        v51 = &unk_1E69A1FE0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v50);
        v61 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = std::function<lon"
              "g long ()>, Argument_Types = <>]";
        v62 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
        v63 = 161;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v43);
        v46 = v43;
        v47 = v44;
        v43 = 0uLL;
        v44 = 0;
        v45 = off_1E69A20A0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v45);
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v25, (uint64_t)buf);
      }
      v13 = *((_QWORD *)v11 + 3);
      if (!v13)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 48))(v13);
      v14 = v42;
      if (v42)
      {
        p_shared_owners = (unint64_t *)&v42->__shared_owners_;
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
    }
    else
    {
      *(_QWORD *)(a2 + 24) = 0;
    }
    v17 = (unint64_t *)&v6->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    *(_QWORD *)(a2 + 24) = 0;
  }
}

void sub_1B5C61D40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,std::runtime_error a28,std::runtime_error a29,uint64_t a30,uint64_t a31)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Node::set_latency_handler(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  int8x8_t *v7;
  AMCP::Log::Scope_Registry *operation;
  _QWORD *v9;
  unint64_t v10;
  AMCP::Log::Scope_Registry *v11;
  AMCP::Log::Scope_Registry *v12;
  AMCP::Log::Scope_Registry *v13;
  uint64_t v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  std::string *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  NSObject *v27;
  unint64_t *v28;
  unint64_t v29;
  _opaque_pthread_t *v30;
  mach_port_t v31;
  void *v32;
  std::__shared_weak_count *v33;
  NSObject *v34;
  unint64_t *v35;
  unint64_t v36;
  _opaque_pthread_t *v37;
  mach_port_t v38;
  void *exception;
  NSObject *v40;
  _opaque_pthread_t *v41;
  mach_port_t v42;
  void *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  std::__shared_weak_count *v50;
  std::runtime_error v51;
  std::string::size_type v52;
  uint64_t (**v53)();
  std::string __p;
  std::string v55;
  std::runtime_error v56;
  std::runtime_error v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  char v63;
  _BYTE v64[24];
  _BYTE *v65;
  std::string v66;
  std::string *v67;
  uint8_t buf[8];
  _BYTE v69[10];
  __int16 v70;
  int v71;
  uint8_t *v72;
  const char *v73;
  const char *v74;
  int v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (!v3)
    return 0;
  v5 = std::__shared_weak_count::lock(v3);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = *(int8x8_t **)(a1 + 16);
  if (!v7)
  {
    v18 = 0;
    goto LABEL_52;
  }
  v47 = 0x676C6F626E646C61;
  LODWORD(v48) = 0;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v64, a2);
  operation = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v49, v7, (unsigned int *)&v47);
  v9 = v49;
  if (!v49)
  {
    AMCP::Log::Scope_Registry::get(operation);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v33 = *(std::__shared_weak_count **)v69;
    v34 = **(NSObject ***)buf;
    if (*(_QWORD *)v69)
    {
      v35 = (unint64_t *)(*(_QWORD *)v69 + 8);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      v37 = pthread_self();
      v38 = pthread_mach_thread_np(v37);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v38;
      *(_WORD *)v69 = 2080;
      *(_QWORD *)&v69[2] = "Core.h";
      v70 = 1024;
      v71 = 202;
      _os_log_error_impl(&dword_1B57BA000, v34, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v56);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v66, v47, v48);
    std::runtime_error::runtime_error(&v51, &v66);
    std::runtime_error::runtime_error(&v57, &v51);
    v59 = 0;
    v60 = 0;
    v61 = 0;
    v62 = -1;
    v57.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v58 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v57);
    v73 = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) const [Return_Type ="
          " void, Argument_Types = <std::function<long long ()>>]";
    v74 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
    v75 = 202;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v55.__r_.__value_.__l.__data_);
    v53 = off_1E69A20A0;
    __p = v55;
    memset(&v55, 0, sizeof(v55));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v53);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  std::__function::__value_func<long long ()(void)>::__value_func[abi:ne180100]((uint64_t)&v66, (uint64_t)v64);
  v10 = AMCP::Implementation::get_type_marker<std::function<void ()(std::function<long long ()(void)>)>>();
  v11 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v9, v10);
  if (!v11)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v40 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
    {
      v41 = pthread_self();
      v42 = pthread_mach_thread_np(v41);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v42;
      *(_WORD *)v69 = 2080;
      *(_QWORD *)&v69[2] = "Operation.h";
      v70 = 1024;
      v71 = 154;
      _os_log_error_impl(&dword_1B57BA000, v40, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v63);
    v43 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v55, v47, v48);
    std::runtime_error::runtime_error(&v56, &v55);
    std::runtime_error::runtime_error(&v57, &v56);
    v59 = 0;
    v60 = 0;
    v61 = 0;
    v62 = -1;
    v57.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v58 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v57);
    v73 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void, Argument_Types "
          "= <std::function<long long ()>>]";
    v74 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v75 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v51);
    v53 = off_1E69A20A0;
    *(std::runtime_error *)&__p.__r_.__value_.__l.__data_ = v51;
    __p.__r_.__value_.__r.__words[2] = v52;
    v51.__vftable = 0;
    v51.__imp_.__imp_ = 0;
    v52 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v53);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v43, (uint64_t)buf);
  }
  v12 = v11;
  if (!*((_QWORD *)v11 + 7)
    || (*(_QWORD *)buf = AMCP::Implementation::get_type_marker<std::function<void ()(std::function<long long ()(void)>)>>(),
        v11 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, _QWORD, uint8_t *))v12 + 7))(4, (uint64_t)v12 + 24, 0, buf), (v13 = v11) == 0))
  {
    AMCP::Log::Scope_Registry::get(v11);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v26 = *(std::__shared_weak_count **)v69;
    v27 = **(NSObject ***)buf;
    if (*(_QWORD *)v69)
    {
      v28 = (unint64_t *)(*(_QWORD *)v69 + 8);
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      v30 = pthread_self();
      v31 = pthread_mach_thread_np(v30);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v31;
      *(_WORD *)v69 = 2080;
      *(_QWORD *)&v69[2] = "Operation.h";
      v70 = 1024;
      v71 = 161;
      _os_log_error_impl(&dword_1B57BA000, v27, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v63);
    v32 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v55, v47, v48);
    std::runtime_error::runtime_error(&v56, &v55);
    std::runtime_error::runtime_error(&v57, &v56);
    v59 = 0;
    v60 = 0;
    v61 = 0;
    v62 = -1;
    v57.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v58 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v57);
    v73 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void, Argument_Types "
          "= <std::function<long long ()>>]";
    v74 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v75 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v51);
    v53 = off_1E69A20A0;
    *(std::runtime_error *)&__p.__r_.__value_.__l.__data_ = v51;
    __p.__r_.__value_.__r.__words[2] = v52;
    v51.__vftable = 0;
    v51.__imp_.__imp_ = 0;
    v52 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v53);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v32, (uint64_t)buf);
  }
  std::__function::__value_func<long long ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v66);
  v14 = *((_QWORD *)v13 + 3);
  if (!v14)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v14 + 48))(v14, buf);
  v16 = v72;
  if (v72 == buf)
  {
    v17 = 4;
    v16 = buf;
  }
  else
  {
    if (!v72)
      goto LABEL_15;
    v17 = 5;
  }
  (*(void (**)(uint8_t *, uint64_t))(*(_QWORD *)v16 + 8 * v17))(v16, v15);
LABEL_15:
  v19 = v67;
  if (v67 == &v66)
  {
    v20 = 4;
    v19 = &v66;
    goto LABEL_19;
  }
  if (v67)
  {
    v20 = 5;
LABEL_19:
    (*(void (**)(std::string *, uint64_t))(v19->__r_.__value_.__r.__words[0] + 8 * v20))(v19, v15);
  }
  v21 = v50;
  if (v50)
  {
    p_shared_owners = (unint64_t *)&v50->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v65;
  if (v65 == v64)
  {
    v25 = 4;
    v24 = v64;
    goto LABEL_29;
  }
  if (v65)
  {
    v25 = 5;
LABEL_29:
    (*(void (**)(_QWORD *, uint64_t))(*v24 + 8 * v25))(v24, v15);
  }
  v18 = 1;
LABEL_52:
  v44 = (unint64_t *)&v6->__shared_owners_;
  do
    v45 = __ldaxr(v44);
  while (__stlxr(v45 - 1, v44));
  if (!v45)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v18;
}

uint64_t std::__function::__value_func<long long ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

void AMCP::Node::get_tail_time_handler(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 24) = 0;
}

uint64_t AMCP::Node::set_tail_time_handler()
{
  return 0;
}

void AMCP::Node::get_uid(AMCP::Node *this@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  AMCP::Core::Core *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v4 && (v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    v6 = v5;
    v7 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
    if (v7)
      AMCP::Core::Core::get_simple_required_property<1853188452u>(a2, v7);
    else
      *a2 = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    *a2 = 0;
  }
}

void AMCP::Node::get_description(AMCP::Node *this@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  AMCP::Core::Core *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v4)
  {
    v5 = 0;
    goto LABEL_6;
  }
  v5 = std::__shared_weak_count::lock(v4);
  if (!v5 || (v6 = (AMCP::Core::Core *)*((_QWORD *)this + 2)) == 0)
  {
LABEL_6:
    *(_QWORD *)a2 = 1;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0x100000000;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(_OWORD *)(a2 + 72) = 0u;
    *(_OWORD *)(a2 + 88) = 0u;
    *(_OWORD *)(a2 + 104) = 0u;
    if (!v5)
      return;
    goto LABEL_7;
  }
  AMCP::Core::Core::get_simple_required_property<1852073061u>((AMCP::Node_Description *)a2, v6);
LABEL_7:
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

AMCP::Core::Core *AMCP::Node::get_type(AMCP::Node *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  AMCP::Core::Core *v5;
  AMCP::Log::Scope_Registry *has_property;
  _QWORD *v7;
  unint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  NSObject *v18;
  _opaque_pthread_t *v19;
  mach_port_t v20;
  void *__p;
  std::__shared_weak_count *v22;
  char v23;
  uint64_t v24;
  int v25;
  uint8_t buf[8];
  __int16 v27;
  char *v28;
  __int16 v29;
  int v30;
  __int16 v31;
  _BYTE v32[18];
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
  if (v5)
  {
    v24 = 0x676C6F626E647470;
    v25 = 0;
    has_property = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::has_property(v5, (const AMCP::Address *)&v24);
    if (!(_DWORD)has_property)
      goto LABEL_27;
    has_property = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&__p, (int8x8_t *)v5, (unsigned int *)&v24);
    v7 = __p;
    if (__p)
    {
      v8 = AMCP::Implementation::get_type_marker<std::function<AMCP::Node_Type ()(void)>>();
      if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v7, v8))
      {
        has_property = (AMCP::Log::Scope_Registry *)AMCP::Core::Operation::call_function<AMCP::Node_Type>(v7);
        LODWORD(v7) = (_DWORD)has_property;
LABEL_8:
        v9 = 0;
        v10 = v7 & 0xFFFFFF00;
LABEL_15:
        v12 = v22;
        if (v22)
        {
          p_shared_owners = (unint64_t *)&v22->__shared_owners_;
          do
            v14 = __ldaxr(p_shared_owners);
          while (__stlxr(v14 - 1, p_shared_owners));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        if ((v9 & 1) == 0)
        {
          v5 = (AMCP::Core::Core *)(v10 | v7);
          goto LABEL_22;
        }
LABEL_27:
        AMCP::Log::Scope_Registry::get(has_property);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v18 = **(NSObject ***)buf;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          v19 = pthread_self();
          v20 = pthread_mach_thread_np(v19);
          v23 = 4;
          strcpy((char *)&__p, "ndtp");
          *(_DWORD *)buf = 67110658;
          *(_DWORD *)&buf[4] = v20;
          v27 = 2080;
          v28 = "Core.h";
          v29 = 1024;
          v30 = 391;
          v31 = 2080;
          *(_QWORD *)v32 = "optional_value.operator BOOL() == true";
          *(_WORD *)&v32[8] = 2080;
          *(_QWORD *)&v32[10] = &__p;
          v33 = 1024;
          v34 = 1735159650;
          v35 = 1024;
          v36 = 0;
          _os_log_error_impl(&dword_1B57BA000, v18, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
          if (v23 < 0)
            operator delete(__p);
        }
        abort();
      }
      v11 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
      has_property = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v7, v11);
      if (has_property)
      {
        AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)buf, v7);
        has_property = (AMCP::Log::Scope_Registry *)AMCP::Thing::convert_to<AMCP::Node_Type>((uint64_t)buf);
        LODWORD(v7) = (_DWORD)has_property;
        if (*(_QWORD *)&v32[6])
          has_property = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(_QWORD, uint8_t *, _QWORD, _QWORD))&v32[6])(0, buf, 0, 0);
        goto LABEL_8;
      }
      LOBYTE(v7) = 0;
    }
    v10 = 0;
    v9 = 1;
    goto LABEL_15;
  }
LABEL_22:
  v15 = (unint64_t *)&v4->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v5;
}

void sub_1B5C62EE0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

BOOL AMCP::Node::is_connected(AMCP::Node *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  AMCP::Core::Core *v5;
  AMCP::Log::Scope_Registry *v6;
  _BOOL8 v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  NSObject *v11;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  void *__p[2];
  char v15;
  _BYTE buf[10];
  char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  void **v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
  if (v5)
  {
    strcpy(buf, "tcdnbolg");
    buf[9] = 0;
    LOWORD(v17) = 0;
    v6 = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::get_typed_property_value<BOOL,std::enable_if<true,void>>(v5, (const AMCP::Address *)buf);
    if ((unsigned __int16)v6 <= 0xFFu)
    {
      AMCP::Log::Scope_Registry::get(v6);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v11 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        v12 = pthread_self();
        v13 = pthread_mach_thread_np(v12);
        v15 = 4;
        strcpy((char *)__p, "ndct");
        *(_DWORD *)buf = 67110658;
        *(_DWORD *)&buf[4] = v13;
        *(_WORD *)&buf[8] = 2080;
        v17 = "Core.h";
        v18 = 1024;
        v19 = 391;
        v20 = 2080;
        v21 = "optional_value.operator BOOL() == true";
        v22 = 2080;
        v23 = __p;
        v24 = 1024;
        v25 = 1735159650;
        v26 = 1024;
        v27 = 0;
        _os_log_error_impl(&dword_1B57BA000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
        if (v15 < 0)
          operator delete(__p[0]);
      }
      abort();
    }
    v7 = v6 != 0;
  }
  else
  {
    v7 = 0;
  }
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v7;
}

void sub_1B5C630D4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

unint64_t AMCP::Node::get_clock(AMCP::Node *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  AMCP::Core::Core *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  NSObject *v11;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  void *__p[2];
  char v15;
  _BYTE buf[10];
  char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  void **v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
  if (v5)
  {
    strcpy(buf, "lcdnbolg");
    buf[9] = 0;
    LOWORD(v17) = 0;
    v6 = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>(v5, (const AMCP::Address *)buf);
    if (!HIDWORD(v6))
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v6);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v11 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        v12 = pthread_self();
        v13 = pthread_mach_thread_np(v12);
        v15 = 4;
        strcpy((char *)__p, "ndcl");
        *(_DWORD *)buf = 67110658;
        *(_DWORD *)&buf[4] = v13;
        *(_WORD *)&buf[8] = 2080;
        v17 = "Core.h";
        v18 = 1024;
        v19 = 391;
        v20 = 2080;
        v21 = "optional_value.operator BOOL() == true";
        v22 = 2080;
        v23 = __p;
        v24 = 1024;
        v25 = 1735159650;
        v26 = 1024;
        v27 = 0;
        _os_log_error_impl(&dword_1B57BA000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
        if (v15 < 0)
          operator delete(__p[0]);
      }
      abort();
    }
    v7 = v6;
  }
  else
  {
    v7 = 0;
  }
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v7;
}

void sub_1B5C632B4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void AMCP::Node::get_current_time(AMCP::Node *this@<X0>, _BYTE *a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  int8x8_t *v7;
  AMCP::Log::Scope_Registry *operation;
  _QWORD *v9;
  unint64_t v10;
  AMCP::Log::Scope_Registry *v11;
  AMCP::Log::Scope_Registry *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  NSObject *v18;
  unint64_t *v19;
  unint64_t v20;
  _opaque_pthread_t *v21;
  mach_port_t v22;
  void *v23;
  std::__shared_weak_count *v24;
  NSObject *v25;
  unint64_t *v26;
  unint64_t v27;
  _opaque_pthread_t *v28;
  mach_port_t v29;
  void *exception;
  NSObject *v31;
  _opaque_pthread_t *v32;
  mach_port_t v33;
  void *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  _QWORD *v39;
  std::__shared_weak_count *v40;
  void *v41[2];
  uint64_t v42;
  uint64_t (**v43)();
  void *__p[2];
  uint64_t v45;
  std::string v46;
  std::runtime_error v47;
  std::runtime_error v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  char v54;
  uint8_t buf[8];
  _BYTE v56[10];
  __int16 v57;
  int v58;
  const char *v59;
  const char *v60;
  int v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v4 && (v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    v6 = v5;
    v7 = (int8x8_t *)*((_QWORD *)this + 2);
    if (v7)
    {
      v37 = 0x676C6F626374696DLL;
      v38 = 0;
      operation = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v39, v7, (unsigned int *)&v37);
      v9 = v39;
      if (!v39)
      {
        AMCP::Log::Scope_Registry::get(operation);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v24 = *(std::__shared_weak_count **)v56;
        v25 = **(NSObject ***)buf;
        if (*(_QWORD *)v56)
        {
          v26 = (unint64_t *)(*(_QWORD *)v56 + 8);
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 - 1, v26));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          v28 = pthread_self();
          v29 = pthread_mach_thread_np(v28);
          *(_DWORD *)buf = 67109634;
          *(_DWORD *)&buf[4] = v29;
          *(_WORD *)v56 = 2080;
          *(_QWORD *)&v56[2] = "Core.h";
          v57 = 1024;
          v58 = 202;
          _os_log_error_impl(&dword_1B57BA000, v25, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v54);
        exception = __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v46);
        std::runtime_error::runtime_error(&v47, &v46);
        std::runtime_error::runtime_error(&v48, &v47);
        v50 = 0;
        v51 = 0;
        v52 = 0;
        v53 = -1;
        v48.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
        v49 = &unk_1E69A1FE0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v48);
        v59 = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) const [Return_Ty"
              "pe = std::optional<CA::TimeStamp>, Argument_Types = <>]";
        v60 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
        v61 = 202;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v41);
        *(_OWORD *)__p = *(_OWORD *)v41;
        v45 = v42;
        v41[0] = 0;
        v41[1] = 0;
        v42 = 0;
        v43 = off_1E69A20A0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v43);
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
      }
      v10 = AMCP::Implementation::get_type_marker<std::function<std::optional<CA::TimeStamp> ()(void)>>();
      v11 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v9, v10);
      if (!v11)
      {
        AMCP::Log::Scope_Registry::get(0);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v31 = **(NSObject ***)buf;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
        {
          v32 = pthread_self();
          v33 = pthread_mach_thread_np(v32);
          *(_DWORD *)buf = 67109634;
          *(_DWORD *)&buf[4] = v33;
          *(_WORD *)v56 = 2080;
          *(_QWORD *)&v56[2] = "Operation.h";
          v57 = 1024;
          v58 = 154;
          _os_log_error_impl(&dword_1B57BA000, v31, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v54);
        v34 = __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v46);
        std::runtime_error::runtime_error(&v47, &v46);
        std::runtime_error::runtime_error(&v48, &v47);
        v50 = 0;
        v51 = 0;
        v52 = 0;
        v53 = -1;
        v48.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
        v49 = &unk_1E69A1FE0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v48);
        v59 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = std::optional<CA:"
              ":TimeStamp>, Argument_Types = <>]";
        v60 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
        v61 = 154;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v41);
        *(_OWORD *)__p = *(_OWORD *)v41;
        v45 = v42;
        v41[0] = 0;
        v41[1] = 0;
        v42 = 0;
        v43 = off_1E69A20A0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v43);
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v34, (uint64_t)buf);
      }
      v12 = v11;
      if (!*((_QWORD *)v11 + 7)
        || (*(_QWORD *)buf = AMCP::Implementation::get_type_marker<std::function<std::optional<CA::TimeStamp> ()(void)>>(),
            (v11 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, _QWORD, uint8_t *))v12 + 7))(4, (uint64_t)v12 + 24, 0, buf)) == 0))
      {
        AMCP::Log::Scope_Registry::get(v11);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v17 = *(std::__shared_weak_count **)v56;
        v18 = **(NSObject ***)buf;
        if (*(_QWORD *)v56)
        {
          v19 = (unint64_t *)(*(_QWORD *)v56 + 8);
          do
            v20 = __ldaxr(v19);
          while (__stlxr(v20 - 1, v19));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          v21 = pthread_self();
          v22 = pthread_mach_thread_np(v21);
          *(_DWORD *)buf = 67109634;
          *(_DWORD *)&buf[4] = v22;
          *(_WORD *)v56 = 2080;
          *(_QWORD *)&v56[2] = "Operation.h";
          v57 = 1024;
          v58 = 161;
          _os_log_error_impl(&dword_1B57BA000, v18, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v54);
        v23 = __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v46);
        std::runtime_error::runtime_error(&v47, &v46);
        std::runtime_error::runtime_error(&v48, &v47);
        v50 = 0;
        v51 = 0;
        v52 = 0;
        v53 = -1;
        v48.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
        v49 = &unk_1E69A1FE0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v48);
        v59 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = std::optional<CA:"
              ":TimeStamp>, Argument_Types = <>]";
        v60 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
        v61 = 161;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v41);
        *(_OWORD *)__p = *(_OWORD *)v41;
        v45 = v42;
        v41[0] = 0;
        v41[1] = 0;
        v42 = 0;
        v43 = off_1E69A20A0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v43);
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v23, (uint64_t)buf);
      }
      v13 = *((_QWORD *)v11 + 3);
      if (!v13)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 48))(v13);
      v14 = v40;
      if (v40)
      {
        p_shared_owners = (unint64_t *)&v40->__shared_owners_;
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
    }
    else
    {
      *a2 = 0;
      a2[64] = 0;
    }
    v35 = (unint64_t *)&v6->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    *a2 = 0;
    a2[64] = 0;
  }
}

void AMCP::Node::translate_time(uint64_t a1@<X0>, __int128 *a2@<X1>, AMCP::Log::Scope_Registry *a3@<X8>)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  int8x8_t *v9;
  __int128 v10;
  __int128 v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  __int128 v14[4];
  uint64_t v15;
  int v16;

  v5 = *(std::__shared_weak_count **)(a1 + 24);
  if (v5 && (v7 = std::__shared_weak_count::lock(v5)) != 0)
  {
    v8 = v7;
    v9 = *(int8x8_t **)(a1 + 16);
    if (v9)
    {
      v15 = 0x676C6F6274726E74;
      v16 = 0;
      v10 = a2[1];
      v14[0] = *a2;
      v14[1] = v10;
      v11 = a2[3];
      v14[2] = a2[2];
      v14[3] = v11;
      AMCP::Core::Core::call_operation_function<std::optional<CA::TimeStamp>,CA::TimeStamp>(a3, v9, (unsigned int *)&v15, v14);
    }
    else
    {
      *(_BYTE *)a3 = 0;
      *((_BYTE *)a3 + 64) = 0;
    }
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *((_BYTE *)a3 + 64) = 0;
  }
}

void AMCP::Node::get_io_thread_error_handler(AMCP::Node *this@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  int8x8_t *v7;
  AMCP::Log::Scope_Registry *operation;
  _QWORD *v9;
  unint64_t v10;
  AMCP::Log::Scope_Registry *v11;
  AMCP::Log::Scope_Registry *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  NSObject *v20;
  unint64_t *v21;
  unint64_t v22;
  _opaque_pthread_t *v23;
  mach_port_t v24;
  void *v25;
  std::__shared_weak_count *v26;
  NSObject *v27;
  unint64_t *v28;
  unint64_t v29;
  _opaque_pthread_t *v30;
  mach_port_t v31;
  void *exception;
  NSObject *v33;
  _opaque_pthread_t *v34;
  mach_port_t v35;
  void *v36;
  uint64_t v37;
  int v38;
  int8x8_t *v39;
  std::__shared_weak_count *v40;
  _QWORD *v41;
  std::__shared_weak_count *v42;
  __int128 v43;
  uint64_t v44;
  uint64_t (**v45)();
  __int128 v46;
  uint64_t v47;
  std::string v48;
  std::runtime_error v49;
  std::runtime_error v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  char v56;
  uint8_t buf[8];
  _BYTE v58[10];
  __int16 v59;
  int v60;
  const char *v61;
  const char *v62;
  int v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v4 && (v5 = std::__shared_weak_count::lock(v4), (v40 = v5) != 0))
  {
    v6 = v5;
    v7 = (int8x8_t *)*((_QWORD *)this + 2);
    v39 = v7;
    if (v7)
    {
      v37 = 0x676C6F6274686572;
      v38 = 0;
      operation = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v41, v7, (unsigned int *)&v37);
      v9 = v41;
      if (!v41)
      {
        AMCP::Log::Scope_Registry::get(operation);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v26 = *(std::__shared_weak_count **)v58;
        v27 = **(NSObject ***)buf;
        if (*(_QWORD *)v58)
        {
          v28 = (unint64_t *)(*(_QWORD *)v58 + 8);
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 - 1, v28));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
        {
          v30 = pthread_self();
          v31 = pthread_mach_thread_np(v30);
          *(_DWORD *)buf = 67109634;
          *(_DWORD *)&buf[4] = v31;
          *(_WORD *)v58 = 2080;
          *(_QWORD *)&v58[2] = "Core.h";
          v59 = 1024;
          v60 = 202;
          _os_log_error_impl(&dword_1B57BA000, v27, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v56);
        exception = __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v48);
        std::runtime_error::runtime_error(&v49, &v48);
        std::runtime_error::runtime_error(&v50, &v49);
        v52 = 0;
        v53 = 0;
        v54 = 0;
        v55 = -1;
        v50.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
        v51 = &unk_1E69A1FE0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v50);
        v61 = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) const [Return_Ty"
              "pe = std::function<void ()>, Argument_Types = <>]";
        v62 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
        v63 = 202;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v43);
        v46 = v43;
        v47 = v44;
        v43 = 0uLL;
        v44 = 0;
        v45 = off_1E69A20A0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v45);
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
      }
      v10 = AMCP::Implementation::get_type_marker<std::function<std::function<void ()(void)> ()(void)>>();
      v11 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v9, v10);
      if (!v11)
      {
        AMCP::Log::Scope_Registry::get(0);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v33 = **(NSObject ***)buf;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
        {
          v34 = pthread_self();
          v35 = pthread_mach_thread_np(v34);
          *(_DWORD *)buf = 67109634;
          *(_DWORD *)&buf[4] = v35;
          *(_WORD *)v58 = 2080;
          *(_QWORD *)&v58[2] = "Operation.h";
          v59 = 1024;
          v60 = 154;
          _os_log_error_impl(&dword_1B57BA000, v33, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v56);
        v36 = __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v48);
        std::runtime_error::runtime_error(&v49, &v48);
        std::runtime_error::runtime_error(&v50, &v49);
        v52 = 0;
        v53 = 0;
        v54 = 0;
        v55 = -1;
        v50.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
        v51 = &unk_1E69A1FE0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v50);
        v61 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = std::function<voi"
              "d ()>, Argument_Types = <>]";
        v62 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
        v63 = 154;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v43);
        v46 = v43;
        v47 = v44;
        v43 = 0uLL;
        v44 = 0;
        v45 = off_1E69A20A0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v45);
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v36, (uint64_t)buf);
      }
      v12 = v11;
      if (!*((_QWORD *)v11 + 7)
        || (*(_QWORD *)buf = AMCP::Implementation::get_type_marker<std::function<std::function<void ()(void)> ()(void)>>(),
            (v11 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, _QWORD, uint8_t *))v12 + 7))(4, (uint64_t)v12 + 24, 0, buf)) == 0))
      {
        AMCP::Log::Scope_Registry::get(v11);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v19 = *(std::__shared_weak_count **)v58;
        v20 = **(NSObject ***)buf;
        if (*(_QWORD *)v58)
        {
          v21 = (unint64_t *)(*(_QWORD *)v58 + 8);
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          v23 = pthread_self();
          v24 = pthread_mach_thread_np(v23);
          *(_DWORD *)buf = 67109634;
          *(_DWORD *)&buf[4] = v24;
          *(_WORD *)v58 = 2080;
          *(_QWORD *)&v58[2] = "Operation.h";
          v59 = 1024;
          v60 = 161;
          _os_log_error_impl(&dword_1B57BA000, v20, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v56);
        v25 = __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v48);
        std::runtime_error::runtime_error(&v49, &v48);
        std::runtime_error::runtime_error(&v50, &v49);
        v52 = 0;
        v53 = 0;
        v54 = 0;
        v55 = -1;
        v50.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
        v51 = &unk_1E69A1FE0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v50);
        v61 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = std::function<voi"
              "d ()>, Argument_Types = <>]";
        v62 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
        v63 = 161;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v43);
        v46 = v43;
        v47 = v44;
        v43 = 0uLL;
        v44 = 0;
        v45 = off_1E69A20A0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v45);
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v25, (uint64_t)buf);
      }
      v13 = *((_QWORD *)v11 + 3);
      if (!v13)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 48))(v13);
      v14 = v42;
      if (v42)
      {
        p_shared_owners = (unint64_t *)&v42->__shared_owners_;
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
    }
    else
    {
      *(_QWORD *)(a2 + 24) = 0;
    }
    v17 = (unint64_t *)&v6->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    *(_QWORD *)(a2 + 24) = 0;
  }
}

void sub_1B5C64324(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,std::runtime_error a28,std::runtime_error a29,uint64_t a30,uint64_t a31)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Node::set_io_thread_error_handler(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  int8x8_t *v7;
  AMCP::Log::Scope_Registry *operation;
  _QWORD *v9;
  unint64_t v10;
  AMCP::Log::Scope_Registry *v11;
  AMCP::Log::Scope_Registry *v12;
  AMCP::Log::Scope_Registry *v13;
  uint64_t v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  std::string *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  NSObject *v27;
  unint64_t *v28;
  unint64_t v29;
  _opaque_pthread_t *v30;
  mach_port_t v31;
  void *v32;
  std::__shared_weak_count *v33;
  NSObject *v34;
  unint64_t *v35;
  unint64_t v36;
  _opaque_pthread_t *v37;
  mach_port_t v38;
  void *exception;
  NSObject *v40;
  _opaque_pthread_t *v41;
  mach_port_t v42;
  void *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  std::__shared_weak_count *v50;
  std::runtime_error v51;
  std::string::size_type v52;
  uint64_t (**v53)();
  std::string __p;
  std::string v55;
  std::runtime_error v56;
  std::runtime_error v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  char v63;
  _BYTE v64[24];
  _BYTE *v65;
  std::string v66;
  std::string *v67;
  uint8_t buf[8];
  _BYTE v69[10];
  __int16 v70;
  int v71;
  uint8_t *v72;
  const char *v73;
  const char *v74;
  int v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (!v3)
    return 0;
  v5 = std::__shared_weak_count::lock(v3);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = *(int8x8_t **)(a1 + 16);
  if (!v7)
  {
    v18 = 0;
    goto LABEL_52;
  }
  v47 = 0x676C6F6274686572;
  LODWORD(v48) = 0;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v64, a2);
  operation = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v49, v7, (unsigned int *)&v47);
  v9 = v49;
  if (!v49)
  {
    AMCP::Log::Scope_Registry::get(operation);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v33 = *(std::__shared_weak_count **)v69;
    v34 = **(NSObject ***)buf;
    if (*(_QWORD *)v69)
    {
      v35 = (unint64_t *)(*(_QWORD *)v69 + 8);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      v37 = pthread_self();
      v38 = pthread_mach_thread_np(v37);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v38;
      *(_WORD *)v69 = 2080;
      *(_QWORD *)&v69[2] = "Core.h";
      v70 = 1024;
      v71 = 202;
      _os_log_error_impl(&dword_1B57BA000, v34, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v56);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v66, v47, v48);
    std::runtime_error::runtime_error(&v51, &v66);
    std::runtime_error::runtime_error(&v57, &v51);
    v59 = 0;
    v60 = 0;
    v61 = 0;
    v62 = -1;
    v57.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v58 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v57);
    v73 = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) const [Return_Type ="
          " void, Argument_Types = <std::function<void ()>>]";
    v74 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
    v75 = 202;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v55.__r_.__value_.__l.__data_);
    v53 = off_1E69A20A0;
    __p = v55;
    memset(&v55, 0, sizeof(v55));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v53);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)&v66, (uint64_t)v64);
  v10 = AMCP::Implementation::get_type_marker<std::function<void ()(std::function<void ()(void)>)>>();
  v11 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v9, v10);
  if (!v11)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v40 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
    {
      v41 = pthread_self();
      v42 = pthread_mach_thread_np(v41);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v42;
      *(_WORD *)v69 = 2080;
      *(_QWORD *)&v69[2] = "Operation.h";
      v70 = 1024;
      v71 = 154;
      _os_log_error_impl(&dword_1B57BA000, v40, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v63);
    v43 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v55, v47, v48);
    std::runtime_error::runtime_error(&v56, &v55);
    std::runtime_error::runtime_error(&v57, &v56);
    v59 = 0;
    v60 = 0;
    v61 = 0;
    v62 = -1;
    v57.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v58 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v57);
    v73 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void, Argument_Types "
          "= <std::function<void ()>>]";
    v74 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v75 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v51);
    v53 = off_1E69A20A0;
    *(std::runtime_error *)&__p.__r_.__value_.__l.__data_ = v51;
    __p.__r_.__value_.__r.__words[2] = v52;
    v51.__vftable = 0;
    v51.__imp_.__imp_ = 0;
    v52 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v53);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v43, (uint64_t)buf);
  }
  v12 = v11;
  if (!*((_QWORD *)v11 + 7)
    || (*(_QWORD *)buf = AMCP::Implementation::get_type_marker<std::function<void ()(std::function<void ()(void)>)>>(),
        v11 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, _QWORD, uint8_t *))v12 + 7))(4, (uint64_t)v12 + 24, 0, buf), (v13 = v11) == 0))
  {
    AMCP::Log::Scope_Registry::get(v11);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v26 = *(std::__shared_weak_count **)v69;
    v27 = **(NSObject ***)buf;
    if (*(_QWORD *)v69)
    {
      v28 = (unint64_t *)(*(_QWORD *)v69 + 8);
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      v30 = pthread_self();
      v31 = pthread_mach_thread_np(v30);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v31;
      *(_WORD *)v69 = 2080;
      *(_QWORD *)&v69[2] = "Operation.h";
      v70 = 1024;
      v71 = 161;
      _os_log_error_impl(&dword_1B57BA000, v27, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v63);
    v32 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v55, v47, v48);
    std::runtime_error::runtime_error(&v56, &v55);
    std::runtime_error::runtime_error(&v57, &v56);
    v59 = 0;
    v60 = 0;
    v61 = 0;
    v62 = -1;
    v57.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v58 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v57);
    v73 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void, Argument_Types "
          "= <std::function<void ()>>]";
    v74 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v75 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v51);
    v53 = off_1E69A20A0;
    *(std::runtime_error *)&__p.__r_.__value_.__l.__data_ = v51;
    __p.__r_.__value_.__r.__words[2] = v52;
    v51.__vftable = 0;
    v51.__imp_.__imp_ = 0;
    v52 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v53);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v32, (uint64_t)buf);
  }
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v66);
  v14 = *((_QWORD *)v13 + 3);
  if (!v14)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v14 + 48))(v14, buf);
  v16 = v72;
  if (v72 == buf)
  {
    v17 = 4;
    v16 = buf;
  }
  else
  {
    if (!v72)
      goto LABEL_15;
    v17 = 5;
  }
  (*(void (**)(uint8_t *, uint64_t))(*(_QWORD *)v16 + 8 * v17))(v16, v15);
LABEL_15:
  v19 = v67;
  if (v67 == &v66)
  {
    v20 = 4;
    v19 = &v66;
    goto LABEL_19;
  }
  if (v67)
  {
    v20 = 5;
LABEL_19:
    (*(void (**)(std::string *, uint64_t))(v19->__r_.__value_.__r.__words[0] + 8 * v20))(v19, v15);
  }
  v21 = v50;
  if (v50)
  {
    p_shared_owners = (unint64_t *)&v50->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v65;
  if (v65 == v64)
  {
    v25 = 4;
    v24 = v64;
    goto LABEL_29;
  }
  if (v65)
  {
    v25 = 5;
LABEL_29:
    (*(void (**)(_QWORD *, uint64_t))(*v24 + 8 * v25))(v24, v15);
  }
  v18 = 1;
LABEL_52:
  v44 = (unint64_t *)&v6->__shared_owners_;
  do
    v45 = __ldaxr(v44);
  while (__stlxr(v45 - 1, v44));
  if (!v45)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v18;
}

uint64_t AMCP::Node::set_begin_cycle_handler()
{
  return 0;
}

uint64_t AMCP::Node::set_end_cycle_handler()
{
  return 0;
}

void AMCP::IOAudio1::Device_Sub_Object::~Device_Sub_Object(AMCP::IOAudio1::Device_Sub_Object *this)
{
  AMCP::IOAudio1::Device_Sub_Object::~Device_Sub_Object(this);
  JUMPOUT(0x1B5E50688);
}

{
  io_object_t v2;

  *(_QWORD *)this = &off_1E699CB78;
  AMCP::Core::Broker::destroy_core(*(std::__shared_mutex_base **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 16) + 32) + 16), *((_DWORD *)this + 4));
  v2 = *((_DWORD *)this + 5);
  if (v2)
    IOObjectRelease(v2);
}

void SincKernel::CalculateFilterCoefficients(SincKernel *this)
{
  double v2;
  uint64_t v3;
  _DWORD *v4;
  double v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  _QWORD *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v28;
  uint64_t v29;
  uint64_t i;
  float v31;
  double v32;
  double v33;
  double v34;
  long double v35;
  uint64_t v36;
  double v37;
  double v38;
  float v39;
  float v40;
  int v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  _BYTE v51[24];
  uint64_t *v52;
  _QWORD v53[3];
  char v54;
  __int128 v55;
  __int128 v56;

  v2 = *((double *)this + 4);
  v3 = (*((_DWORD *)this + 3) * *((_DWORD *)this + 4));
  v4 = (_DWORD *)operator new[]();
  v5 = *((double *)this + 3);
  {
    GetKaiser(unsigned int,double)::sKaiserWindows = 0;
    qword_1EDB88118 = 0;
    xmmword_1EDB88108 = 0uLL;
  }
  os_unfair_lock_lock((os_unfair_lock_t)&GetKaiser(unsigned int,double)::sKaiserWindows);
  v7 = *((_QWORD *)&xmmword_1EDB88108 + 1);
  if ((_QWORD)xmmword_1EDB88108 == *((_QWORD *)&xmmword_1EDB88108 + 1))
  {
LABEL_7:
    if (*((_QWORD *)&xmmword_1EDB88108 + 1) >= (unint64_t)qword_1EDB88118)
    {
      v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&xmmword_1EDB88108 + 1) - xmmword_1EDB88108) >> 3);
      if (v10 + 1 > 0x666666666666666)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v11 = 0x999999999999999ALL * ((qword_1EDB88118 - (uint64_t)xmmword_1EDB88108) >> 3);
      if (v11 <= v10 + 1)
        v11 = v10 + 1;
      if (0xCCCCCCCCCCCCCCCDLL * ((qword_1EDB88118 - (uint64_t)xmmword_1EDB88108) >> 3) >= 0x333333333333333)
        v12 = 0x666666666666666;
      else
        v12 = v11;
      v52 = &qword_1EDB88118;
      if (v12)
      {
        if (v12 > 0x666666666666666)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v13 = (char *)operator new(40 * v12);
      }
      else
      {
        v13 = 0;
      }
      v50 = v13;
      *(_QWORD *)v51 = &v13[40 * v10];
      *(_QWORD *)&v51[16] = &v13[40 * v12];
      KaiserWindow::KaiserWindow(*(KaiserWindow **)v51, v3 - 1, v5);
      v15 = *(_QWORD *)v51;
      *(_QWORD *)&v51[8] = *(_QWORD *)v51 + 40;
      v16 = *((_QWORD *)&xmmword_1EDB88108 + 1);
      v17 = xmmword_1EDB88108;
      *(_QWORD *)&v56 = *(_QWORD *)v51;
      *((_QWORD *)&v56 + 1) = *(_QWORD *)v51;
      v55 = v56;
      v53[0] = &qword_1EDB88118;
      v53[1] = &v55;
      v53[2] = &v56;
      v54 = 0;
      while (v16 != v17)
      {
        v18 = *(_OWORD *)(v16 - 40);
        *(_QWORD *)(v15 - 24) = 0;
        v19 = (_QWORD *)(v15 - 24);
        *((_OWORD *)v19 - 1) = v18;
        v19[1] = 0;
        v19[2] = 0;
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v19, *(const void **)(v16 - 24), *(_QWORD *)(v16 - 16), (uint64_t)(*(_QWORD *)(v16 - 16) - *(_QWORD *)(v16 - 24)) >> 2);
        v16 -= 40;
        v15 = *((_QWORD *)&v56 + 1) - 40;
        *((_QWORD *)&v56 + 1) -= 40;
      }
      v54 = 1;
      std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<KaiserWindow>,std::reverse_iterator<KaiserWindow*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v53);
      v20 = qword_1EDB88118;
      v21 = *(_OWORD *)&v51[8];
      v49 = *(_QWORD *)&v51[8];
      v22 = xmmword_1EDB88108;
      *(_QWORD *)&xmmword_1EDB88108 = v15;
      *(_OWORD *)v51 = v22;
      *(__int128 *)((char *)&xmmword_1EDB88108 + 8) = v21;
      *(_QWORD *)&v51[16] = v20;
      v50 = (char *)v22;
      std::__split_buffer<ADS::ObjectManager::ObjectInfo>::~__split_buffer((uint64_t)&v50);
      v9 = v49;
    }
    else
    {
      KaiserWindow::KaiserWindow(*((KaiserWindow **)&xmmword_1EDB88108 + 1), v3 - 1, v5);
      v9 = v7 + 40;
      *((_QWORD *)&xmmword_1EDB88108 + 1) = v7 + 40;
    }
    *((_QWORD *)&xmmword_1EDB88108 + 1) = v9;
    v14 = (uint64_t *)(v9 - 24);
  }
  else
  {
    v8 = xmmword_1EDB88108;
    while (*(_DWORD *)v8 != (_DWORD)v3 - 1 || *(double *)(v8 + 8) != v5)
    {
      v8 += 40;
      if (v8 == *((_QWORD *)&xmmword_1EDB88108 + 1))
        goto LABEL_7;
    }
    v14 = (uint64_t *)(v8 + 16);
  }
  v23 = (double)(int)v3 * 0.5;
  v24 = *v14;
  os_unfair_lock_unlock((os_unfair_lock_t)&GetKaiser(unsigned int,double)::sKaiserWindows);
  v25 = *((unsigned int *)this + 4);
  v26 = *((int *)this + 3);
  v27 = 3.14159265 / (double)(int)v25;
  v28 = v2 * v27;
  v29 = *((unsigned int *)this + 3);
  if ((int)v26 < 128)
  {
    v32 = cos(v2 * v27);
    if ((int)v3 >= 1)
    {
      v33 = v32 + v32;
      v34 = v2 * sin(v2 * ((-2.0 - v23) * v27));
      v35 = sin(v2 * ((-1.0 - v23) * v27));
      v36 = 0;
      v37 = v2 * v35;
      do
      {
        v38 = -(v34 - v33 * v37);
        v39 = v38 * *(float *)(v24 + 4 * v36) / (v28 * ((double)(int)v36 - v23));
        *(float *)&v4[v36++] = v39;
        v34 = v37;
        v37 = v38;
      }
      while (v3 != v36);
    }
  }
  else if ((int)v3 >= 1)
  {
    for (i = 0; i != v3; ++i)
    {
      v31 = v2 * sin(v28 * ((double)(int)i - v23)) * *(float *)(v24 + 4 * i) / (v28 * ((double)(int)i - v23));
      *(float *)&v4[i] = v31;
    }
  }
  *v4 = 0;
  v40 = v2;
  *(float *)&v4[(int)v23] = v40;
  v4[(int)v3] = 0;
  if ((int)v29 >= 0)
    v41 = v29;
  else
    v41 = v29 + 1;
  *((_DWORD *)this + 5) = (v41 >> 1) - 1;
  if ((v25 & 0x80000000) == 0)
  {
    v42 = 0;
    v43 = *(double *)this;
    v44 = v25 + 1;
    v45 = 4 * v25;
    do
    {
      if ((int)v26 >= 1)
      {
        v46 = &v4[(int)v25];
        v47 = v43;
        v48 = v29;
        do
        {
          **(_DWORD **)&v47 = *v46;
          *(_QWORD *)&v47 += 4;
          v46 = (_DWORD *)((char *)v46 + v45);
          --v48;
        }
        while (v48);
      }
      ++v42;
      LODWORD(v25) = v25 - 1;
      *(_QWORD *)&v43 += 4 * v26;
    }
    while (v42 != v44);
  }
  JUMPOUT(0x1B5E50664);
}

void sub_1B5C65538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::__split_buffer<ADS::ObjectManager::ObjectInfo>::~__split_buffer((uint64_t)va);
  os_unfair_lock_unlock((os_unfair_lock_t)&GetKaiser(unsigned int,double)::sKaiserWindows);
  _Unwind_Resume(a1);
}

unint64_t DSP_Host_Types::IDSP_Host_DictionaryData::hashed_description(DSP_Host_Types::IDSP_Host_DictionaryData *this)
{
  unint64_t v1;
  void *__p[2];
  char v4;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)this + 16))(__p);
  v1 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)__p);
  if (v4 < 0)
    operator delete(__p[0]);
  return v1;
}

void std::__function::__func<DSP_Host_Types::StringLookup_StreamSemantic::StringLookup_StreamSemantic(void)::$_1,std::allocator<DSP_Host_Types::StringLookup_StreamSemantic::StringLookup_StreamSemantic(void)::$_1>,char const* ()(DSP_Host_Types::StreamSemanticType)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<DSP_Host_Types::StringLookup_StreamSemantic::StringLookup_StreamSemantic(void)::$_1,std::allocator<DSP_Host_Types::StringLookup_StreamSemantic::StringLookup_StreamSemantic(void)::$_1>,char const* ()(DSP_Host_Types::StreamSemanticType)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E699CC38;
  return result;
}

void std::__function::__func<DSP_Host_Types::StringLookup_StreamSemantic::StringLookup_StreamSemantic(void)::$_1,std::allocator<DSP_Host_Types::StringLookup_StreamSemantic::StringLookup_StreamSemantic(void)::$_1>,char const* ()(DSP_Host_Types::StreamSemanticType)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E699CC38;
}

const char *std::__function::__func<DSP_Host_Types::StringLookup_StreamSemantic::StringLookup_StreamSemantic(void)::$_1,std::allocator<DSP_Host_Types::StringLookup_StreamSemantic::StringLookup_StreamSemantic(void)::$_1>,char const* ()(DSP_Host_Types::StreamSemanticType)>::operator()(uint64_t a1, _DWORD *a2)
{
  uint64_t v2;
  const char *result;
  int *v4;

  v2 = 0;
  result = "uninitialized";
  while (1)
  {
    v4 = &DSP_Host_Types::StringLookup_StreamSemantic::StringLookup_StreamSemantic(void)::kThisLookup[v2];
    if (DSP_Host_Types::StringLookup_StreamSemantic::StringLookup_StreamSemantic(void)::kThisLookup[v2] == *a2)
      break;
    v2 += 4;
    if (v2 == 12)
      return result;
  }
    return "uninitialized";
  else
    return (const char *)*((_QWORD *)v4 + 1);
}

uint64_t std::__function::__func<DSP_Host_Types::StringLookup_StreamSemantic::StringLookup_StreamSemantic(void)::$_1,std::allocator<DSP_Host_Types::StringLookup_StreamSemantic::StringLookup_StreamSemantic(void)::$_1>,char const* ()(DSP_Host_Types::StreamSemanticType)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN14DSP_Host_Types27StringLookup_StreamSemanticC1EvE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<DSP_Host_Types::StringLookup_StreamSemantic::StringLookup_StreamSemantic(void)::$_1,std::allocator<DSP_Host_Types::StringLookup_StreamSemantic::StringLookup_StreamSemantic(void)::$_1>,char const* ()(DSP_Host_Types::StreamSemanticType)>::target_type()
{
}

void std::__function::__func<DSP_Host_Types::StringLookup_StreamSemantic::StringLookup_StreamSemantic(void)::$_0,std::allocator<DSP_Host_Types::StringLookup_StreamSemantic::StringLookup_StreamSemantic(void)::$_0>,DSP_Host_Types::StreamSemanticType ()(char const*)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<DSP_Host_Types::StringLookup_StreamSemantic::StringLookup_StreamSemantic(void)::$_0,std::allocator<DSP_Host_Types::StringLookup_StreamSemantic::StringLookup_StreamSemantic(void)::$_0>,DSP_Host_Types::StreamSemanticType ()(char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E699CBA8;
  return result;
}

void std::__function::__func<DSP_Host_Types::StringLookup_StreamSemantic::StringLookup_StreamSemantic(void)::$_0,std::allocator<DSP_Host_Types::StringLookup_StreamSemantic::StringLookup_StreamSemantic(void)::$_0>,DSP_Host_Types::StreamSemanticType ()(char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E699CBA8;
}

uint64_t std::__function::__func<DSP_Host_Types::StringLookup_StreamSemantic::StringLookup_StreamSemantic(void)::$_0,std::allocator<DSP_Host_Types::StringLookup_StreamSemantic::StringLookup_StreamSemantic(void)::$_0>,DSP_Host_Types::StreamSemanticType ()(char const*)>::operator()(uint64_t a1, const char **a2)
{
  uint64_t v2;
  const char *v3;
  __guard *v4;

  v2 = 0;
  v3 = *a2;
  while (1)
  {
    v4 = (__guard *)&DSP_Host_Types::StringLookup_StreamSemantic::StringLookup_StreamSemantic(void)::kThisLookup[v2];
    if (!strcmp(*(const char **)&DSP_Host_Types::StringLookup_StreamSemantic::StringLookup_StreamSemantic(void)::kThisLookup[v2 + 2], v3))break;
    v2 += 4;
    if (v2 == 12)
      return 0;
  }
    return *(unsigned int *)v4;
  return 0;
}

uint64_t std::__function::__func<DSP_Host_Types::StringLookup_StreamSemantic::StringLookup_StreamSemantic(void)::$_0,std::allocator<DSP_Host_Types::StringLookup_StreamSemantic::StringLookup_StreamSemantic(void)::$_0>,DSP_Host_Types::StreamSemanticType ()(char const*)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN14DSP_Host_Types27StringLookup_StreamSemanticC1EvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<DSP_Host_Types::StringLookup_StreamSemantic::StringLookup_StreamSemantic(void)::$_0,std::allocator<DSP_Host_Types::StringLookup_StreamSemantic::StringLookup_StreamSemantic(void)::$_0>,DSP_Host_Types::StreamSemanticType ()(char const*)>::target_type()
{
}

void std::__function::__func<DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing(void)::$_1,std::allocator<DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing(void)::$_1>,char const* ()(DSP_Host_Types::AudioProcessingType)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing(void)::$_1,std::allocator<DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing(void)::$_1>,char const* ()(DSP_Host_Types::AudioProcessingType)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E699CD58;
  return result;
}

void std::__function::__func<DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing(void)::$_1,std::allocator<DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing(void)::$_1>,char const* ()(DSP_Host_Types::AudioProcessingType)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E699CD58;
}

const char *std::__function::__func<DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing(void)::$_1,std::allocator<DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing(void)::$_1>,char const* ()(DSP_Host_Types::AudioProcessingType)>::operator()(uint64_t a1, _DWORD *a2)
{
  uint64_t v2;
  const char *result;
  int *v4;

  v2 = 0;
  result = "uninitialized";
  while (1)
  {
    v4 = &DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing(void)::kThisLookup[v2];
    if (DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing(void)::kThisLookup[v2] == *a2)
      break;
    v2 += 4;
    if (v2 == 40)
      return result;
  }
    return "uninitialized";
  else
    return (const char *)*((_QWORD *)v4 + 1);
}

uint64_t std::__function::__func<DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing(void)::$_1,std::allocator<DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing(void)::$_1>,char const* ()(DSP_Host_Types::AudioProcessingType)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN14DSP_Host_Types28StringLookup_AudioProcessingC1EvE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing(void)::$_1,std::allocator<DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing(void)::$_1>,char const* ()(DSP_Host_Types::AudioProcessingType)>::target_type()
{
}

void std::__function::__func<DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing(void)::$_0,std::allocator<DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing(void)::$_0>,DSP_Host_Types::AudioProcessingType ()(char const*)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing(void)::$_0,std::allocator<DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing(void)::$_0>,DSP_Host_Types::AudioProcessingType ()(char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E699CCC8;
  return result;
}

void std::__function::__func<DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing(void)::$_0,std::allocator<DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing(void)::$_0>,DSP_Host_Types::AudioProcessingType ()(char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E699CCC8;
}

uint64_t std::__function::__func<DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing(void)::$_0,std::allocator<DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing(void)::$_0>,DSP_Host_Types::AudioProcessingType ()(char const*)>::operator()(uint64_t a1, const char **a2)
{
  uint64_t v2;
  const char *v3;
  __guard *v4;

  v2 = 0;
  v3 = *a2;
  while (1)
  {
    v4 = (__guard *)&DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing(void)::kThisLookup[v2];
    if (!strcmp(*(const char **)&DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing(void)::kThisLookup[v2 + 2], v3))break;
    v2 += 4;
    if (v2 == 40)
      return 0;
  }
    return *(unsigned int *)v4;
  return 0;
}

uint64_t std::__function::__func<DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing(void)::$_0,std::allocator<DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing(void)::$_0>,DSP_Host_Types::AudioProcessingType ()(char const*)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN14DSP_Host_Types28StringLookup_AudioProcessingC1EvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing(void)::$_0,std::allocator<DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing(void)::$_0>,DSP_Host_Types::AudioProcessingType ()(char const*)>::target_type()
{
}

DSP_Host_Types::StringLookup_AudioProcessing *DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing(DSP_Host_Types::StringLookup_AudioProcessing *this)
{
  unsigned __int8 v2;
  DSP_Host_Types::StringLookup_AudioProcessing *v3;
  uint64_t v4;
  char *v5;
  DSP_Host_Types::StringLookup_AudioProcessing *v6;
  uint64_t v7;
  _QWORD v9[3];
  DSP_Host_Types::StringLookup_AudioProcessing *v10;
  _QWORD v11[4];

  v11[3] = *MEMORY[0x1E0C80C00];
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 7) = 0;
  if ((v2 & 1) == 0
  {
    qword_1EF131100 = (uint64_t)"uninitialized";
    dword_1EF131108 = 1;
    qword_1EF131110 = (uint64_t)"general";
    dword_1EF131118 = 2;
    qword_1EF131120 = (uint64_t)"voice isolation conferencing";
    dword_1EF131128 = 3;
    qword_1EF131130 = (uint64_t)"voice isolation";
    dword_1EF131138 = 4;
    qword_1EF131140 = (uint64_t)"spatial channel virtualization only";
    dword_1EF131148 = 5;
    qword_1EF131150 = (uint64_t)"spatial playback";
    dword_1EF131158 = 6;
    qword_1EF131160 = (uint64_t)"voice activity detection";
    dword_1EF131168 = 7;
    DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing(void)::kThisLookup[0] = 0;
    qword_1EF131170 = (uint64_t)"isolated audio";
    dword_1EF131178 = 8;
    qword_1EF131180 = (uint64_t)"dsp offload";
    dword_1EF131188 = 9;
    qword_1EF131190 = (uint64_t)"INTERNAL_kAuProcClientUnprocessedStream";
  }
  v9[0] = &off_1E699CCC8;
  v10 = (DSP_Host_Types::StringLookup_AudioProcessing *)v9;
  if (v9 == (_QWORD *)this)
  {
    v4 = 4;
    v3 = this;
  }
  else
  {
    if (*((DSP_Host_Types::StringLookup_AudioProcessing **)this + 3) == this)
    {
      std::__function::__func<DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing(void)::$_0,std::allocator<DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing(void)::$_0>,DSP_Host_Types::AudioProcessingType ()(char const*)>::__clone((uint64_t)v9, v11);
      v10 = 0;
      (*(void (**)(DSP_Host_Types::StringLookup_AudioProcessing *, _QWORD *))(*(_QWORD *)this + 24))(this, v9);
      (*(void (**)(_QWORD))(**((_QWORD **)this + 3) + 32))(*((_QWORD *)this + 3));
      *((_QWORD *)this + 3) = 0;
      v10 = (DSP_Host_Types::StringLookup_AudioProcessing *)v9;
      (*(void (**)(_QWORD *, DSP_Host_Types::StringLookup_AudioProcessing *))(v11[0] + 24))(v11, this);
      (*(void (**)(_QWORD *))(v11[0] + 32))(v11);
      *((_QWORD *)this + 3) = this;
      v3 = v10;
    }
    else
    {
      std::__function::__func<DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing(void)::$_0,std::allocator<DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing(void)::$_0>,DSP_Host_Types::AudioProcessingType ()(char const*)>::__clone((uint64_t)v9, this);
      v3 = (DSP_Host_Types::StringLookup_AudioProcessing *)*((_QWORD *)this + 3);
      v10 = v3;
      *((_QWORD *)this + 3) = this;
    }
    if (v3 == (DSP_Host_Types::StringLookup_AudioProcessing *)v9)
    {
      v4 = 4;
      v3 = (DSP_Host_Types::StringLookup_AudioProcessing *)v9;
    }
    else
    {
      if (!v3)
        goto LABEL_12;
      v4 = 5;
    }
  }
  (*(void (**)(DSP_Host_Types::StringLookup_AudioProcessing *))(*(_QWORD *)v3 + 8 * v4))(v3);
LABEL_12:
  v5 = (char *)this + 32;
  v6 = (DSP_Host_Types::StringLookup_AudioProcessing *)v9;
  v9[0] = &off_1E699CD58;
  v10 = (DSP_Host_Types::StringLookup_AudioProcessing *)v9;
  if ((_QWORD *)((char *)this + 32) == v9)
  {
    v7 = 4;
LABEL_21:
    (*(void (**)(DSP_Host_Types::StringLookup_AudioProcessing *))(*(_QWORD *)v6 + 8 * v7))(v6);
    return this;
  }
  if (*((char **)this + 7) == v5)
  {
    std::__function::__func<DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing(void)::$_1,std::allocator<DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing(void)::$_1>,char const* ()(DSP_Host_Types::AudioProcessingType)>::__clone((uint64_t)v9, v11);
    v10 = 0;
    (*(void (**)(char *, _QWORD *))(*(_QWORD *)v5 + 24))((char *)this + 32, v9);
    (*(void (**)(_QWORD))(**((_QWORD **)this + 7) + 32))(*((_QWORD *)this + 7));
    *((_QWORD *)this + 7) = 0;
    v10 = (DSP_Host_Types::StringLookup_AudioProcessing *)v9;
    (*(void (**)(_QWORD *, char *))(v11[0] + 24))(v11, (char *)this + 32);
    (*(void (**)(_QWORD *))(v11[0] + 32))(v11);
    *((_QWORD *)this + 7) = v5;
    v6 = v10;
  }
  else
  {
    std::__function::__func<DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing(void)::$_1,std::allocator<DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing(void)::$_1>,char const* ()(DSP_Host_Types::AudioProcessingType)>::__clone((uint64_t)v9, (_QWORD *)this + 4);
    v6 = (DSP_Host_Types::StringLookup_AudioProcessing *)*((_QWORD *)this + 7);
    v10 = v6;
    *((_QWORD *)this + 7) = v5;
  }
  if (v6 == (DSP_Host_Types::StringLookup_AudioProcessing *)v9)
  {
    v7 = 4;
    v6 = (DSP_Host_Types::StringLookup_AudioProcessing *)v9;
    goto LABEL_21;
  }
  if (v6)
  {
    v7 = 5;
    goto LABEL_21;
  }
  return this;
}

void sub_1B5C65CF4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void std::__function::__func<DSP_Host_Types::StringLookup_CustomPropertyDataType::StringLookup_CustomPropertyDataType(void)::$_1,std::allocator<DSP_Host_Types::StringLookup_CustomPropertyDataType::StringLookup_CustomPropertyDataType(void)::$_1>,char const* ()(DSP_Host_Types::CustomPropertyDataType)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<DSP_Host_Types::StringLookup_CustomPropertyDataType::StringLookup_CustomPropertyDataType(void)::$_1,std::allocator<DSP_Host_Types::StringLookup_CustomPropertyDataType::StringLookup_CustomPropertyDataType(void)::$_1>,char const* ()(DSP_Host_Types::CustomPropertyDataType)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E699CE78;
  return result;
}

void std::__function::__func<DSP_Host_Types::StringLookup_CustomPropertyDataType::StringLookup_CustomPropertyDataType(void)::$_1,std::allocator<DSP_Host_Types::StringLookup_CustomPropertyDataType::StringLookup_CustomPropertyDataType(void)::$_1>,char const* ()(DSP_Host_Types::CustomPropertyDataType)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E699CE78;
}

const char *std::__function::__func<DSP_Host_Types::StringLookup_CustomPropertyDataType::StringLookup_CustomPropertyDataType(void)::$_1,std::allocator<DSP_Host_Types::StringLookup_CustomPropertyDataType::StringLookup_CustomPropertyDataType(void)::$_1>,char const* ()(DSP_Host_Types::CustomPropertyDataType)>::operator()(uint64_t a1, _DWORD *a2)
{
  uint64_t v2;
  const char *result;
  int *v4;

  v2 = 0;
  result = "uninitialized";
  while (1)
  {
    v4 = &DSP_Host_Types::StringLookup_CustomPropertyDataType::StringLookup_CustomPropertyDataType(void)::kThisLookup[v2];
    if (DSP_Host_Types::StringLookup_CustomPropertyDataType::StringLookup_CustomPropertyDataType(void)::kThisLookup[v2] == *a2)
      break;
    v2 += 4;
    if (v2 == 32)
      return result;
  }
    return "uninitialized";
  else
    return (const char *)*((_QWORD *)v4 + 1);
}

uint64_t std::__function::__func<DSP_Host_Types::StringLookup_CustomPropertyDataType::StringLookup_CustomPropertyDataType(void)::$_1,std::allocator<DSP_Host_Types::StringLookup_CustomPropertyDataType::StringLookup_CustomPropertyDataType(void)::$_1>,char const* ()(DSP_Host_Types::CustomPropertyDataType)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN14DSP_Host_Types35StringLookup_CustomPropertyDataTypeC1EvE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<DSP_Host_Types::StringLookup_CustomPropertyDataType::StringLookup_CustomPropertyDataType(void)::$_1,std::allocator<DSP_Host_Types::StringLookup_CustomPropertyDataType::StringLookup_CustomPropertyDataType(void)::$_1>,char const* ()(DSP_Host_Types::CustomPropertyDataType)>::target_type()
{
}

void std::__function::__func<DSP_Host_Types::StringLookup_CustomPropertyDataType::StringLookup_CustomPropertyDataType(void)::$_0,std::allocator<DSP_Host_Types::StringLookup_CustomPropertyDataType::StringLookup_CustomPropertyDataType(void)::$_0>,DSP_Host_Types::CustomPropertyDataType ()(char const*)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<DSP_Host_Types::StringLookup_CustomPropertyDataType::StringLookup_CustomPropertyDataType(void)::$_0,std::allocator<DSP_Host_Types::StringLookup_CustomPropertyDataType::StringLookup_CustomPropertyDataType(void)::$_0>,DSP_Host_Types::CustomPropertyDataType ()(char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E699CDE8;
  return result;
}

void std::__function::__func<DSP_Host_Types::StringLookup_CustomPropertyDataType::StringLookup_CustomPropertyDataType(void)::$_0,std::allocator<DSP_Host_Types::StringLookup_CustomPropertyDataType::StringLookup_CustomPropertyDataType(void)::$_0>,DSP_Host_Types::CustomPropertyDataType ()(char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E699CDE8;
}

uint64_t std::__function::__func<DSP_Host_Types::StringLookup_CustomPropertyDataType::StringLookup_CustomPropertyDataType(void)::$_0,std::allocator<DSP_Host_Types::StringLookup_CustomPropertyDataType::StringLookup_CustomPropertyDataType(void)::$_0>,DSP_Host_Types::CustomPropertyDataType ()(char const*)>::operator()(uint64_t a1, const char **a2)
{
  uint64_t v2;
  const char *v3;
  __guard *v4;

  v2 = 0;
  v3 = *a2;
  while (1)
  {
    v4 = (__guard *)&DSP_Host_Types::StringLookup_CustomPropertyDataType::StringLookup_CustomPropertyDataType(void)::kThisLookup[v2];
    if (!strcmp(*(const char **)&DSP_Host_Types::StringLookup_CustomPropertyDataType::StringLookup_CustomPropertyDataType(void)::kThisLookup[v2 + 2], v3))break;
    v2 += 4;
    if (v2 == 32)
      return 0;
  }
    return *(unsigned int *)v4;
  return 0;
}

uint64_t std::__function::__func<DSP_Host_Types::StringLookup_CustomPropertyDataType::StringLookup_CustomPropertyDataType(void)::$_0,std::allocator<DSP_Host_Types::StringLookup_CustomPropertyDataType::StringLookup_CustomPropertyDataType(void)::$_0>,DSP_Host_Types::CustomPropertyDataType ()(char const*)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN14DSP_Host_Types35StringLookup_CustomPropertyDataTypeC1EvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<DSP_Host_Types::StringLookup_CustomPropertyDataType::StringLookup_CustomPropertyDataType(void)::$_0,std::allocator<DSP_Host_Types::StringLookup_CustomPropertyDataType::StringLookup_CustomPropertyDataType(void)::$_0>,DSP_Host_Types::CustomPropertyDataType ()(char const*)>::target_type()
{
}

void HALS_ObjectMap::MapObject(HALS_ObjectMap *this, uint64_t a2, HALS_Object *a3)
{
  int v4;
  void **v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  HALB_Mutex *v21;
  int v22;

  v4 = (int)this;
  pthread_once(&HALS_ObjectMap::sObjectInfoListInitialized, (void (*)(void))HALS_ObjectMap::Initialize);
  if (v4 && a2)
  {
    v21 = (HALB_Mutex *)HALS_ObjectMap::sObjectInfoListMutex;
    v22 = HALB_Mutex::Lock((HALB_Mutex *)HALS_ObjectMap::sObjectInfoListMutex);
    v5 = (void **)HALS_ObjectMap::sObjectInfoList;
    v6 = *(_QWORD *)HALS_ObjectMap::sObjectInfoList;
    v7 = *(_QWORD *)(HALS_ObjectMap::sObjectInfoList + 8);
    v8 = *(_QWORD *)HALS_ObjectMap::sObjectInfoList;
    if (*(_QWORD *)HALS_ObjectMap::sObjectInfoList != v7)
    {
      while (*(_DWORD *)(v8 + 16) != v4)
      {
        v8 += 24;
        if (v8 == v7)
        {
          v8 = *(_QWORD *)(HALS_ObjectMap::sObjectInfoList + 8);
          break;
        }
      }
    }
    if (v8 == v7)
    {
      v9 = *(_QWORD *)(HALS_ObjectMap::sObjectInfoList + 16);
      if (v7 >= v9)
      {
        v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - v6) >> 3);
        v12 = v11 + 1;
        if (v11 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - v6) >> 3);
        if (2 * v13 > v12)
          v12 = 2 * v13;
        if (v13 >= 0x555555555555555)
          v14 = 0xAAAAAAAAAAAAAAALL;
        else
          v14 = v12;
        if (v14)
          v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v14);
        else
          v15 = 0;
        v16 = v14 + 24 * v11;
        v17 = v14 + 24 * v15;
        *(_QWORD *)v16 = 1;
        *(_QWORD *)(v16 + 8) = a2;
        *(_DWORD *)(v16 + 16) = v4;
        v10 = (void *)(v16 + 24);
        v19 = (char *)*v5;
        v18 = (char *)v5[1];
        if (v18 != *v5)
        {
          do
          {
            v20 = *(_OWORD *)(v18 - 24);
            *(_DWORD *)(v16 - 8) = *((_DWORD *)v18 - 2);
            *(_OWORD *)(v16 - 24) = v20;
            v16 -= 24;
            v18 -= 24;
          }
          while (v18 != v19);
          v18 = (char *)*v5;
        }
        *v5 = (void *)v16;
        v5[1] = v10;
        v5[2] = (void *)v17;
        if (v18)
          operator delete(v18);
      }
      else
      {
        *(_QWORD *)v7 = 1;
        *(_QWORD *)(v7 + 8) = a2;
        *(_DWORD *)(v7 + 16) = v4;
        v10 = (void *)(v7 + 24);
      }
      v5[1] = v10;
    }
    HALB_Mutex::Locker::~Locker(&v21);
  }
}

void sub_1B5C66090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HALB_Mutex *a9)
{
  HALB_Mutex::Locker::~Locker(&a9);
  _Unwind_Resume(a1);
}

uint64_t HALS_ObjectMap::Initialize(HALS_ObjectMap *this)
{
  _QWORD *v1;
  HALB_Mutex *v2;
  uint64_t v3;
  uint64_t result;

  v1 = (_QWORD *)operator new();
  v1[1] = 0;
  v1[2] = 0;
  *v1 = 0;
  HALS_ObjectMap::sObjectInfoList = (uint64_t)v1;
  std::vector<HALS_ObjectMap::ObjectInfo>::reserve((uint64_t)v1);
  v2 = (HALB_Mutex *)operator new();
  HALB_Mutex::HALB_Mutex(v2);
  HALS_ObjectMap::sObjectInfoListMutex = (uint64_t)v2;
  v3 = operator new();
  result = AMCP::Utility::Dispatch_Queue::Dispatch_Queue(v3, "HALS_ObjectMap Normal Priority Queue");
  HALS_ObjectMap::sNormalPriorityQueue = result;
  return result;
}

void sub_1B5C66140(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E50688](v1, 0x10A1C40CF3E2C79);
  _Unwind_Resume(a1);
}

void std::vector<HALS_ObjectMap::ObjectInfo>::reserve(uint64_t a1)
{
  _BYTE *v1;
  _BYTE *v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  __int128 v8;

  v1 = *(_BYTE **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) <= 0x1FF)
  {
    v3 = *(_BYTE **)(a1 + 8);
    v4 = (char *)operator new(0x3000uLL);
    v5 = &v4[v3 - v1];
    v6 = v5;
    if (v3 != v1)
    {
      v7 = &v4[v3 - v1];
      do
      {
        v8 = *(_OWORD *)(v3 - 24);
        v6 = v7 - 24;
        *((_DWORD *)v7 - 2) = *((_DWORD *)v3 - 2);
        *(_OWORD *)(v7 - 24) = v8;
        v3 -= 24;
        v7 -= 24;
      }
      while (v3 != v1);
    }
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v4 + 12288;
    if (v1)
      operator delete(v1);
  }
}

void HALS_ObjectMap::_UnmapObject(HALS_ObjectMap *this)
{
  uint64_t v1;
  char *v2;
  char *v3;
  int64_t v4;

  if ((_DWORD)this)
  {
    v1 = HALS_ObjectMap::sObjectInfoList;
    if (HALS_ObjectMap::sObjectInfoList)
    {
      v3 = *(char **)HALS_ObjectMap::sObjectInfoList;
      v2 = *(char **)(HALS_ObjectMap::sObjectInfoList + 8);
      if (*(char **)HALS_ObjectMap::sObjectInfoList != v2)
      {
        while (*((_DWORD *)v3 + 4) != (_DWORD)this)
        {
          v3 += 24;
          if (v3 == v2)
          {
            v3 = *(char **)(HALS_ObjectMap::sObjectInfoList + 8);
            break;
          }
        }
      }
      if (v3 != v2)
      {
        v4 = v2 - (v3 + 24);
        if (v2 != v3 + 24)
          this = (HALS_ObjectMap *)memmove(v3, v3 + 24, v4 - 4);
        *(_QWORD *)(v1 + 8) = &v3[v4];
        HALS_ObjectMap::_ReclaimSpace(this);
      }
    }
  }
}

void HALS_ObjectMap::_ReclaimSpace(HALS_ObjectMap *this)
{
  void **v1;
  char *v2;
  unint64_t v3;
  int64x2_t v4;
  int64x2_t v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __int128 v14;

  v1 = (void **)HALS_ObjectMap::sObjectInfoList;
  v2 = *(char **)HALS_ObjectMap::sObjectInfoList;
  v3 = 0xAAAAAAAAAAAAAAABLL
     * ((uint64_t)(*(_QWORD *)(HALS_ObjectMap::sObjectInfoList + 16) - *(_QWORD *)HALS_ObjectMap::sObjectInfoList) >> 3);
  if (v3 >= 0x201
    && v3 + 0x5555555555555555 * ((uint64_t)(*(_QWORD *)(HALS_ObjectMap::sObjectInfoList + 8) - (_QWORD)v2) >> 3) >= 0x15)
  {
    v4 = *(int64x2_t *)(HALS_ObjectMap::sObjectInfoList + 8);
    v5 = vshrq_n_s64(vsubq_s64(v4, vdupq_n_s64((unint64_t)v2)), 3uLL);
    v6 = 0xAAAAAAAAAAAAAAABLL * v5.i64[0];
    v7 = v6;
    if (0xAAAAAAAAAAAAAAABLL * v5.i64[1] > v6)
    {
      if ((char *)v4.i64[0] == v2)
      {
        v12 = 0;
        v10 = 24 * v6;
      }
      else
      {
        v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v6);
        v9 = (char *)*v1;
        v2 = (char *)v1[1];
        v10 = (uint64_t)&v8[24 * v7];
        v12 = &v8[24 * v11];
        if (v2 != *v1)
        {
          v13 = v10;
          do
          {
            v14 = *(_OWORD *)(v2 - 24);
            *(_DWORD *)(v13 - 8) = *((_DWORD *)v2 - 2);
            *(_OWORD *)(v13 - 24) = v14;
            v13 -= 24;
            v2 -= 24;
          }
          while (v2 != v9);
          v2 = (char *)*v1;
          goto LABEL_11;
        }
      }
      v13 = v10;
LABEL_11:
      *v1 = (void *)v13;
      v1[1] = (void *)v10;
      v1[2] = v12;
      if (v2)
        operator delete(v2);
    }
  }
}

unint64_t HALS_ObjectMap::IsObjectMapped(unint64_t this)
{
  uint64_t v2;
  uint64_t v3;
  HALB_Mutex *v5;
  int v6;

  pthread_once(&HALS_ObjectMap::sObjectInfoListInitialized, (void (*)(void))HALS_ObjectMap::Initialize);
  if ((_DWORD)this)
  {
    v5 = (HALB_Mutex *)HALS_ObjectMap::sObjectInfoListMutex;
    v6 = HALB_Mutex::Lock((HALB_Mutex *)HALS_ObjectMap::sObjectInfoListMutex);
    if (HALS_ObjectMap::sObjectInfoList)
    {
      v3 = *(_QWORD *)HALS_ObjectMap::sObjectInfoList;
      v2 = *(_QWORD *)(HALS_ObjectMap::sObjectInfoList + 8);
      if (*(_QWORD *)HALS_ObjectMap::sObjectInfoList != v2)
      {
        while (*(_DWORD *)(v3 + 16) != (_DWORD)this)
        {
          v3 += 24;
          if (v3 == v2)
          {
            v3 = *(_QWORD *)(HALS_ObjectMap::sObjectInfoList + 8);
            break;
          }
        }
      }
      this = v3 != v2;
    }
    else
    {
      this = 0;
    }
    HALB_Mutex::Locker::~Locker(&v5);
  }
  return this;
}

unint64_t HALS_ObjectMap::IsObjectMapped(unint64_t this, const HALS_Object *a2)
{
  uint64_t v3;
  uint64_t v4;
  HALB_Mutex *v6;
  int v7;

  pthread_once(&HALS_ObjectMap::sObjectInfoListInitialized, (void (*)(void))HALS_ObjectMap::Initialize);
  if (this)
  {
    v6 = (HALB_Mutex *)HALS_ObjectMap::sObjectInfoListMutex;
    v7 = HALB_Mutex::Lock((HALB_Mutex *)HALS_ObjectMap::sObjectInfoListMutex);
    if (HALS_ObjectMap::sObjectInfoList)
    {
      v4 = *(_QWORD *)HALS_ObjectMap::sObjectInfoList;
      v3 = *(_QWORD *)(HALS_ObjectMap::sObjectInfoList + 8);
      if (*(_QWORD *)HALS_ObjectMap::sObjectInfoList != v3)
      {
        while (*(_QWORD *)(v4 + 8) != this)
        {
          v4 += 24;
          if (v4 == v3)
          {
            v4 = *(_QWORD *)(HALS_ObjectMap::sObjectInfoList + 8);
            break;
          }
        }
      }
      this = v4 != v3;
    }
    else
    {
      this = 0;
    }
    HALB_Mutex::Locker::~Locker(&v6);
  }
  return this;
}

uint64_t HALS_ObjectMap::CopyObjectByObjectID(HALS_ObjectMap *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  HALB_Mutex *v6;
  int v7;

  v1 = (int)this;
  pthread_once(&HALS_ObjectMap::sObjectInfoListInitialized, (void (*)(void))HALS_ObjectMap::Initialize);
  if (!v1)
    return 0;
  v6 = (HALB_Mutex *)HALS_ObjectMap::sObjectInfoListMutex;
  v7 = HALB_Mutex::Lock((HALB_Mutex *)HALS_ObjectMap::sObjectInfoListMutex);
  if (!HALS_ObjectMap::sObjectInfoList)
    goto LABEL_9;
  v2 = *(_QWORD *)(HALS_ObjectMap::sObjectInfoList + 8);
  v3 = *(_QWORD *)HALS_ObjectMap::sObjectInfoList;
  if (*(_QWORD *)HALS_ObjectMap::sObjectInfoList != v2)
  {
    while (*(_DWORD *)(v3 + 16) != v1)
    {
      v3 += 24;
      if (v3 == v2)
      {
        v3 = *(_QWORD *)(HALS_ObjectMap::sObjectInfoList + 8);
        break;
      }
    }
  }
  if (v3 == v2)
  {
LABEL_9:
    v4 = 0;
  }
  else
  {
    v4 = *(_QWORD *)(*(_QWORD *)HALS_ObjectMap::sObjectInfoList
                   + 8 * ((v3 - *(_QWORD *)HALS_ObjectMap::sObjectInfoList) >> 3)
                   + 8);
    ++*(_QWORD *)v3;
  }
  HALB_Mutex::Locker::~Locker(&v6);
  return v4;
}

void HALS_ObjectMap::RetainObject(HALS_ObjectMap *this, HALS_Object *a2)
{
  uint64_t v3;
  uint64_t v4;
  HALB_Mutex *v5;
  int v6;

  pthread_once(&HALS_ObjectMap::sObjectInfoListInitialized, (void (*)(void))HALS_ObjectMap::Initialize);
  if (this)
  {
    v5 = (HALB_Mutex *)HALS_ObjectMap::sObjectInfoListMutex;
    v6 = HALB_Mutex::Lock((HALB_Mutex *)HALS_ObjectMap::sObjectInfoListMutex);
    if (HALS_ObjectMap::sObjectInfoList)
    {
      v3 = *(_QWORD *)HALS_ObjectMap::sObjectInfoList;
      v4 = *(_QWORD *)(HALS_ObjectMap::sObjectInfoList + 8);
      if (*(_QWORD *)HALS_ObjectMap::sObjectInfoList != v4)
      {
        while (*(HALS_ObjectMap **)(v3 + 8) != this)
        {
          v3 += 24;
          if (v3 == v4)
          {
            v3 = *(_QWORD *)(HALS_ObjectMap::sObjectInfoList + 8);
            break;
          }
        }
      }
      if (v3 != v4)
        ++*(_QWORD *)v3;
    }
    HALB_Mutex::Locker::~Locker(&v5);
  }
}

void HALS_ObjectMap::ReleaseObject(HALS_ObjectMap *this, HALS_Object *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  HALS_ObjectMap *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  dispatch_queue_t *v11;
  unsigned __int8 v12;
  HALB_Mutex *v13;
  int v14;
  _BYTE buf[24];
  __int128 v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  pthread_once(&HALS_ObjectMap::sObjectInfoListInitialized, (void (*)(void))HALS_ObjectMap::Initialize);
  if (this)
  {
    v13 = (HALB_Mutex *)HALS_ObjectMap::sObjectInfoListMutex;
    v14 = HALB_Mutex::Lock((HALB_Mutex *)HALS_ObjectMap::sObjectInfoListMutex);
    if (HALS_ObjectMap::sObjectInfoList)
    {
      v4 = *(_QWORD *)HALS_ObjectMap::sObjectInfoList;
      v3 = *(_QWORD *)(HALS_ObjectMap::sObjectInfoList + 8);
      if (*(_QWORD *)HALS_ObjectMap::sObjectInfoList != v3)
      {
        while (*(HALS_ObjectMap **)(v4 + 8) != this)
        {
          v4 += 24;
          if (v4 == v3)
          {
            v4 = *(_QWORD *)(HALS_ObjectMap::sObjectInfoList + 8);
            break;
          }
        }
      }
      if (v4 != v3)
      {
        if (*(_QWORD *)v4)
        {
          v5 = *(_QWORD *)v4 - 1;
          *(_QWORD *)v4 = v5;
          if (!v5)
          {
            v6 = (HALS_ObjectMap *)(*(uint64_t (**)(HALS_ObjectMap *))(*(_QWORD *)this + 40))(this);
            if ((_DWORD)v6)
            {
              v6 = (HALS_ObjectMap *)os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
              if ((_DWORD)v6)
              {
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = "HALS_ObjectMap.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 348;
                _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_ObjectMap::_ReleaseObject: Destroying an active object.", buf, 0x12u);
              }
            }
            v7 = HALS_ObjectMap::sObjectInfoList;
            v8 = *(_QWORD *)(HALS_ObjectMap::sObjectInfoList + 8);
            v9 = v8 - (v4 + 24);
            if (v8 != v4 + 24)
              v6 = (HALS_ObjectMap *)memmove((void *)v4, (const void *)(v4 + 24), v9 - 4);
            *(_QWORD *)(v7 + 8) = v4 + v9;
            HALS_ObjectMap::_ReclaimSpace(v6);
            HALS_NotificationManager::ObjectIsDead((HALS_NotificationManager *)*((unsigned int *)this + 4));
            if ((*(unsigned int (**)(HALS_ObjectMap *))(*(_QWORD *)this + 40))(this)
              && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
            {
              v10 = *((_DWORD *)this + 4);
              *(_DWORD *)buf = 136315906;
              *(_QWORD *)&buf[4] = "HALS_ObjectMap.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 357;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v10;
              LOWORD(v16) = 2048;
              *(_QWORD *)((char *)&v16 + 2) = this;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_ObjectMap::_ReleaseObject: an active object (%d, %p) is being destroyed. This is probably a bug.", buf, 0x22u);
            }
            v11 = (dispatch_queue_t *)HALS_ObjectMap::sNormalPriorityQueue;
            *(_QWORD *)buf = MEMORY[0x1E0C809B0];
            *(_QWORD *)&buf[8] = 0x40000000;
            *(_QWORD *)&buf[16] = ___ZN14HALS_ObjectMap14_ReleaseObjectEP11HALS_Object_block_invoke;
            *(_QWORD *)&v16 = &__block_descriptor_tmp_13854;
            *((_QWORD *)&v16 + 1) = this;
            v12 = atomic_load((unsigned __int8 *)(HALS_ObjectMap::sNormalPriorityQueue + 32));
            if ((v12 & 1) != 0)
              atomic_store(1u, (unsigned __int8 *)(HALS_ObjectMap::sNormalPriorityQueue + 33));
            dispatch_async(*v11, buf);
          }
        }
      }
    }
    HALB_Mutex::Locker::~Locker(&v13);
  }
}

void sub_1B5C66904(_Unwind_Exception *exception_object, int a2, ...)
{
  va_list va;

  va_start(va, a2);
  if (a2)
  {
    HALB_Mutex::Locker::~Locker((HALB_Mutex **)va);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1B5C668D4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN14HALS_ObjectMap14_ReleaseObjectEP11HALS_Object_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

void HALS_ObjectMap::ReleaseObject_LongTerm(HALS_ObjectMap *this, HALS_Object *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  HALS_ObjectMap *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  dispatch_queue_t *v11;
  unsigned __int8 v12;
  HALB_Mutex *v13;
  int v14;
  _BYTE buf[24];
  __int128 v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  pthread_once(&HALS_ObjectMap::sObjectInfoListInitialized, (void (*)(void))HALS_ObjectMap::Initialize);
  if (this)
  {
    v13 = (HALB_Mutex *)HALS_ObjectMap::sObjectInfoListMutex;
    v14 = HALB_Mutex::Lock((HALB_Mutex *)HALS_ObjectMap::sObjectInfoListMutex);
    if (HALS_ObjectMap::sObjectInfoList)
    {
      v4 = *(_QWORD *)HALS_ObjectMap::sObjectInfoList;
      v3 = *(_QWORD *)(HALS_ObjectMap::sObjectInfoList + 8);
      if (*(_QWORD *)HALS_ObjectMap::sObjectInfoList != v3)
      {
        while (*(HALS_ObjectMap **)(v4 + 8) != this)
        {
          v4 += 24;
          if (v4 == v3)
          {
            v4 = *(_QWORD *)(HALS_ObjectMap::sObjectInfoList + 8);
            break;
          }
        }
      }
      if (v4 != v3)
      {
        if (*(_QWORD *)v4)
        {
          v5 = *(_QWORD *)v4 - 1;
          *(_QWORD *)v4 = v5;
          if (!v5)
          {
            v6 = (HALS_ObjectMap *)(*(uint64_t (**)(HALS_ObjectMap *))(*(_QWORD *)this + 40))(this);
            if ((_DWORD)v6)
            {
              v6 = (HALS_ObjectMap *)os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
              if ((_DWORD)v6)
              {
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = "HALS_ObjectMap.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 430;
                _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_ObjectMap::_ReleaseObject_LongTerm: Destroying an active object.", buf, 0x12u);
              }
            }
            v7 = HALS_ObjectMap::sObjectInfoList;
            v8 = *(_QWORD *)(HALS_ObjectMap::sObjectInfoList + 8);
            v9 = v8 - (v4 + 24);
            if (v8 != v4 + 24)
              v6 = (HALS_ObjectMap *)memmove((void *)v4, (const void *)(v4 + 24), v9 - 4);
            *(_QWORD *)(v7 + 8) = v4 + v9;
            HALS_ObjectMap::_ReclaimSpace(v6);
            HALS_NotificationManager::ObjectIsDead((HALS_NotificationManager *)*((unsigned int *)this + 4));
            if ((*(unsigned int (**)(HALS_ObjectMap *))(*(_QWORD *)this + 40))(this)
              && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
            {
              v10 = *((_DWORD *)this + 4);
              *(_DWORD *)buf = 136315906;
              *(_QWORD *)&buf[4] = "HALS_ObjectMap.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 439;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v10;
              LOWORD(v16) = 2048;
              *(_QWORD *)((char *)&v16 + 2) = this;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_ObjectMap::_ReleaseObject_LongTerm: an active object (%d, %p) is being destroyed. This is probably a bug.", buf, 0x22u);
            }
            v11 = (dispatch_queue_t *)HALS_ObjectMap::sNormalPriorityQueue;
            *(_QWORD *)buf = MEMORY[0x1E0C809B0];
            *(_QWORD *)&buf[8] = 0x40000000;
            *(_QWORD *)&buf[16] = ___ZN14HALS_ObjectMap23_ReleaseObject_LongTermEP11HALS_Objectj_block_invoke;
            *(_QWORD *)&v16 = &__block_descriptor_tmp_2_13864;
            *((_QWORD *)&v16 + 1) = this;
            v12 = atomic_load((unsigned __int8 *)(HALS_ObjectMap::sNormalPriorityQueue + 32));
            if ((v12 & 1) != 0)
              atomic_store(1u, (unsigned __int8 *)(HALS_ObjectMap::sNormalPriorityQueue + 33));
            dispatch_async(*v11, buf);
          }
        }
      }
    }
    HALB_Mutex::Locker::~Locker(&v13);
  }
}

void sub_1B5C66BC8(_Unwind_Exception *exception_object, int a2, ...)
{
  va_list va;

  va_start(va, a2);
  if (a2)
  {
    HALB_Mutex::Locker::~Locker((HALB_Mutex **)va);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1B5C66B98);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN14HALS_ObjectMap23_ReleaseObject_LongTermEP11HALS_Objectj_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

void HALS_ObjectMap::ObjectIsDead(HALS_ObjectMap *this, HALS_Object *a2)
{
  HALS_ObjectMap *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  dispatch_queue_t *v10;
  unsigned __int8 v11;
  HALB_Mutex *v12;
  int v13;
  _BYTE buf[24];
  __int128 v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  pthread_once(&HALS_ObjectMap::sObjectInfoListInitialized, (void (*)(void))HALS_ObjectMap::Initialize);
  if (this)
  {
    v12 = (HALB_Mutex *)HALS_ObjectMap::sObjectInfoListMutex;
    v3 = (HALS_ObjectMap *)HALB_Mutex::Lock((HALB_Mutex *)HALS_ObjectMap::sObjectInfoListMutex);
    v13 = (int)v3;
    v4 = HALS_ObjectMap::sObjectInfoList;
    if (HALS_ObjectMap::sObjectInfoList)
    {
      v6 = *(_QWORD *)HALS_ObjectMap::sObjectInfoList;
      v5 = *(_QWORD *)(HALS_ObjectMap::sObjectInfoList + 8);
      if (*(_QWORD *)HALS_ObjectMap::sObjectInfoList != v5)
      {
        while (*(HALS_ObjectMap **)(v6 + 8) != this)
        {
          v6 += 24;
          if (v6 == v5)
          {
            v6 = *(_QWORD *)(HALS_ObjectMap::sObjectInfoList + 8);
            break;
          }
        }
      }
      if (v6 != v5)
      {
        if (*(_QWORD *)v6)
        {
          v7 = *(_QWORD *)v6 - 1;
          *(_QWORD *)v6 = v7;
          if (!v7)
          {
            v8 = v5 - (v6 + 24);
            if (v5 != v6 + 24)
              v3 = (HALS_ObjectMap *)memmove((void *)v6, (const void *)(v6 + 24), v8 - 4);
            *(_QWORD *)(v4 + 8) = v6 + v8;
            HALS_ObjectMap::_ReclaimSpace(v3);
            HALS_NotificationManager::ObjectIsDead((HALS_NotificationManager *)*((unsigned int *)this + 4));
            if ((*(unsigned int (**)(HALS_ObjectMap *))(*(_QWORD *)this + 40))(this)
              && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
            {
              v9 = *((_DWORD *)this + 4);
              *(_DWORD *)buf = 136315906;
              *(_QWORD *)&buf[4] = "HALS_ObjectMap.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 474;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v9;
              LOWORD(v15) = 2048;
              *(_QWORD *)((char *)&v15 + 2) = this;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_ObjectMap::_ObjectIsDead: an active object (%d, %p) is being destroyed. This is probably a bug.", buf, 0x22u);
            }
            v10 = (dispatch_queue_t *)HALS_ObjectMap::sNormalPriorityQueue;
            *(_QWORD *)buf = MEMORY[0x1E0C809B0];
            *(_QWORD *)&buf[8] = 0x40000000;
            *(_QWORD *)&buf[16] = ___ZN14HALS_ObjectMap13_ObjectIsDeadEP11HALS_Object_block_invoke;
            *(_QWORD *)&v15 = &__block_descriptor_tmp_3_13868;
            *((_QWORD *)&v15 + 1) = this;
            v11 = atomic_load((unsigned __int8 *)(HALS_ObjectMap::sNormalPriorityQueue + 32));
            if ((v11 & 1) != 0)
              atomic_store(1u, (unsigned __int8 *)(HALS_ObjectMap::sNormalPriorityQueue + 33));
            dispatch_async(*v10, buf);
          }
        }
      }
    }
    HALB_Mutex::Locker::~Locker(&v12);
  }
}

void sub_1B5C66E0C(_Unwind_Exception *exception_object, int a2, ...)
{
  va_list va;

  va_start(va, a2);
  if (a2)
  {
    HALB_Mutex::Locker::~Locker((HALB_Mutex **)va);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1B5C66DDCLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN14HALS_ObjectMap13_ObjectIsDeadEP11HALS_Object_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

void HALS_ObjectMap::ObjectIsDead(HALS_ObjectMap *this)
{
  HALS_ObjectMap *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  dispatch_queue_t *v10;
  unsigned __int8 v11;
  HALB_Mutex *v12;
  int v13;
  _BYTE buf[24];
  __int128 v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  pthread_once(&HALS_ObjectMap::sObjectInfoListInitialized, (void (*)(void))HALS_ObjectMap::Initialize);
  if ((_DWORD)this)
  {
    v12 = (HALB_Mutex *)HALS_ObjectMap::sObjectInfoListMutex;
    v2 = (HALS_ObjectMap *)HALB_Mutex::Lock((HALB_Mutex *)HALS_ObjectMap::sObjectInfoListMutex);
    v13 = (int)v2;
    v3 = HALS_ObjectMap::sObjectInfoList;
    if (HALS_ObjectMap::sObjectInfoList)
    {
      v4 = *(uint64_t **)(HALS_ObjectMap::sObjectInfoList + 8);
      v5 = *(uint64_t **)HALS_ObjectMap::sObjectInfoList;
      if (*(uint64_t **)HALS_ObjectMap::sObjectInfoList != v4)
      {
        while (*((_DWORD *)v5 + 4) != (_DWORD)this)
        {
          v5 += 3;
          if (v5 == v4)
          {
            v5 = *(uint64_t **)(HALS_ObjectMap::sObjectInfoList + 8);
            break;
          }
        }
      }
      if (v5 != v4)
      {
        v6 = *v5;
        if (*v5)
        {
          v7 = *(_DWORD **)(*(_QWORD *)HALS_ObjectMap::sObjectInfoList
                          + 8 * (((uint64_t)v5 - *(_QWORD *)HALS_ObjectMap::sObjectInfoList) >> 3)
                          + 8);
          *v5 = v6 - 1;
          if (v6 == 1)
          {
            v8 = (char *)v4 - (char *)(v5 + 3);
            if (v4 != v5 + 3)
              v2 = (HALS_ObjectMap *)memmove(v5, v5 + 3, v8 - 4);
            *(_QWORD *)(v3 + 8) = (char *)v5 + v8;
            HALS_ObjectMap::_ReclaimSpace(v2);
            HALS_NotificationManager::ObjectIsDead(this);
            if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v7 + 40))(v7)
              && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
            {
              v9 = v7[4];
              *(_DWORD *)buf = 136315906;
              *(_QWORD *)&buf[4] = "HALS_ObjectMap.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 510;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v9;
              LOWORD(v15) = 2048;
              *(_QWORD *)((char *)&v15 + 2) = v7;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_ObjectMap::_ObjectIsDead: an active object (%d, %p) is being destroyed. This is probably a bug.", buf, 0x22u);
            }
            v10 = (dispatch_queue_t *)HALS_ObjectMap::sNormalPriorityQueue;
            *(_QWORD *)buf = MEMORY[0x1E0C809B0];
            *(_QWORD *)&buf[8] = 0x40000000;
            *(_QWORD *)&buf[16] = ___ZN14HALS_ObjectMap13_ObjectIsDeadEj_block_invoke;
            *(_QWORD *)&v15 = &__block_descriptor_tmp_4_13872;
            *((_QWORD *)&v15 + 1) = v7;
            v11 = atomic_load((unsigned __int8 *)(HALS_ObjectMap::sNormalPriorityQueue + 32));
            if ((v11 & 1) != 0)
              atomic_store(1u, (unsigned __int8 *)(HALS_ObjectMap::sNormalPriorityQueue + 33));
            dispatch_async(*v10, buf);
          }
        }
      }
    }
    HALB_Mutex::Locker::~Locker(&v12);
  }
}

void sub_1B5C6707C(_Unwind_Exception *exception_object, int a2, ...)
{
  va_list va;

  va_start(va, a2);
  if (a2)
  {
    HALB_Mutex::Locker::~Locker((HALB_Mutex **)va);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1B5C67048);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN14HALS_ObjectMap13_ObjectIsDeadEj_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

_QWORD *std::vector<HALS_ObjectMap::ObjectInfo>::__init_with_size[abi:ne180100]<HALS_ObjectMap::ObjectInfo*,HALS_ObjectMap::ObjectInfo*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  if (a4)
  {
    v4 = result;
    if (a4 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a4);
    v7 = result;
    *v4 = result;
    v4[1] = result;
    v4[2] = &result[3 * v8];
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memmove(result, a2, v9 - 4);
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_1B5C67154(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN14HALS_ObjectMap17DestroyAllObjectsEv_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

uint64_t ___ZN14HALS_ObjectMap17DestroyAllObjectsEv_block_invoke_2(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

void MutationItinerary::Reset(MutationItinerary *this)
{
  uint64_t v2;
  uint64_t i;
  const void *v4;
  _QWORD *v5;
  _QWORD *v6;

  *(_WORD *)this = 0;
  v2 = *((_QWORD *)this + 4);
  for (i = *((_QWORD *)this + 5); i != v2; i -= 48)
  {
    v4 = *(const void **)(i - 48);
    std::__destroy_at[abi:ne180100]<MutationItinerary::Device,0>(v4);
  }
  v6 = (_QWORD *)*((_QWORD *)this + 2);
  v5 = (_QWORD *)((char *)this + 16);
  v5[3] = v2;
  std::__tree<std::__value_type<applesauce::CF::StringRef,BOOL>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,BOOL>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,BOOL>>>::destroy(v6);
  *(v5 - 1) = v5;
  *v5 = 0;
  v5[1] = 0;
  v5[6] = v5[5];
}

BOOL MutationItinerary::LoadFromNegotiateResponse_util(const __CFString ***this, const DSP_Host_Types::NegotiateResponse *a2, char a3)
{
  AMCP::Log::Scope_Registry *v6;
  uint64_t v7;
  char v8;
  std::__shared_weak_count *v9;
  NSObject *v10;
  unint64_t *v11;
  unint64_t v12;
  _BOOL8 result;
  _opaque_pthread_t *v14;
  mach_port_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  std::string *v19;
  CFIndex size;
  CFStringRef v21;
  uint64_t v22;
  unint64_t v23;
  const __CFString **v24;
  uint64_t v25;
  const __CFString **v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  const __CFString **v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  int64x2_t v41;
  const __CFString **v42;
  char *v43;
  char *v44;
  const void *v45;
  _BYTE *v46;
  int v47;
  _BOOL4 v48;
  void **v49;
  _QWORD *v50;
  uint64_t **v51;
  CFTypeRef v52;
  std::__shared_weak_count *v53;
  NSObject *v54;
  unint64_t *v55;
  unint64_t v56;
  AMCP::Log::Scope_Registry *v57;
  char v58;
  std::__shared_weak_count *v59;
  NSObject *v60;
  unint64_t *v61;
  unint64_t v62;
  const __CFString **v63;
  const __CFString **v64;
  const __CFString **v65;
  int v66;
  BOOL v67;
  BOOL v68;
  _opaque_pthread_t *v69;
  mach_port_t v70;
  _opaque_pthread_t *v71;
  mach_port_t v72;
  std::runtime_error *exception;
  uint64_t **v74;
  CFTypeRef cf;
  std::string v76;
  uint64_t v77;
  _BYTE buf[24];
  int v79;
  char v80;
  int v81;
  char v82;
  int v83;
  char v84;
  uint8_t v85[8];
  _BYTE v86[10];
  __int16 v87;
  int v88;
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  MutationItinerary::Reset((MutationItinerary *)this);
  v7 = *((_QWORD *)a2 + 12);
  *(_BYTE *)this = v7 == 0;
  if (v7)
    v8 = 0;
  else
    v8 = a3;
  *((_BYTE *)this + 1) = v8;
  if (v7)
  {
    AMCP::Log::Scope_Registry::get(v6);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v9 = *(std::__shared_weak_count **)&buf[8];
    v10 = **(NSObject ***)buf;
    if (*(_QWORD *)&buf[8])
    {
      v11 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    result = os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
    if ((_DWORD)result)
    {
      v14 = pthread_self();
      v15 = pthread_mach_thread_np(v14);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v15;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "HALS_MutationItinerary.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 41;
      _os_log_error_impl(&dword_1B57BA000, v10, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Negotiate response failed", buf, 0x18u);
      return 0;
    }
  }
  else
  {
    v16 = (uint64_t *)*((_QWORD *)a2 + 9);
    v17 = (uint64_t *)*((_QWORD *)a2 + 10);
    if (v16 != v17)
    {
      v74 = (uint64_t **)(this + 1);
      do
      {
        v18 = *v16;
        if (*(_BYTE *)(*v16 + 64))
        {
          *(_QWORD *)buf = 0;
          buf[8] = 0;
          buf[16] = 0;
          LOBYTE(v79) = 0;
          v80 = 0;
          LOBYTE(v81) = 0;
          v82 = 0;
          LOBYTE(v83) = 0;
          v84 = 0;
          if (*(char *)(v18 + 63) < 0)
            std::string::__init_copy_ctor_external(&v76, *(const std::string::value_type **)(v18 + 40), *(_QWORD *)(v18 + 48));
          else
            v76 = *(std::string *)(v18 + 40);
          if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v19 = &v76;
          else
            v19 = (std::string *)v76.__r_.__value_.__r.__words[0];
          if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v76.__r_.__value_.__r.__words[2]);
          else
            size = v76.__r_.__value_.__l.__size_;
          v21 = CFStringCreateWithBytes(0, (const UInt8 *)v19, size, 0x8000100u, 0);
          cf = v21;
          if (!v21)
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Could not construct");
            __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          *(_QWORD *)buf = v21;
          CFRetain(v21);
          v22 = *v16;
          v23 = (unint64_t)this[5];
          v24 = this[6];
          *(_QWORD *)&buf[8] = *(_QWORD *)(*v16 + 88);
          buf[16] = *(_BYTE *)(v22 + 96);
          v79 = *(_DWORD *)(v22 + 224);
          v80 = *(_BYTE *)(v22 + 228);
          v81 = *(_DWORD *)(v22 + 200);
          v82 = *(_BYTE *)(v22 + 204);
          v84 = *(_BYTE *)(v22 + 180);
          v83 = *(_DWORD *)(v22 + 176);
          if (v23 >= (unint64_t)v24)
          {
            v26 = this[4];
            v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - (_QWORD)v26) >> 4);
            v28 = v27 + 1;
            if (v27 + 1 > 0x555555555555555)
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            v29 = 0xAAAAAAAAAAAAAAABLL * (((char *)v24 - (char *)v26) >> 4);
            if (2 * v29 > v28)
              v28 = 2 * v29;
            if (v29 >= 0x2AAAAAAAAAAAAAALL)
              v30 = 0x555555555555555;
            else
              v30 = v28;
            if (v30)
            {
              v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MutationItinerary::Device>>(v30);
              v33 = v32;
            }
            else
            {
              v31 = 0;
              v33 = 0;
            }
            v34 = std::construct_at[abi:ne180100]<MutationItinerary::Device,MutationItinerary::Device const&,MutationItinerary::Device*>((uint64_t)&v31[48 * v27], (uint64_t)buf);
            v36 = this[4];
            v35 = (unint64_t)this[5];
            if ((const __CFString **)v35 == v36)
            {
              v41 = vdupq_n_s64(v35);
              v37 = v34;
            }
            else
            {
              v37 = v34;
              do
              {
                v38 = *(_QWORD *)(v35 - 48);
                v35 -= 48;
                *(_QWORD *)(v37 - 48) = v38;
                v37 -= 48;
                *(_QWORD *)v35 = 0;
                v39 = *(_OWORD *)(v35 + 8);
                v40 = *(_OWORD *)(v35 + 24);
                *(_QWORD *)(v37 + 37) = *(_QWORD *)(v35 + 37);
                *(_OWORD *)(v37 + 24) = v40;
                *(_OWORD *)(v37 + 8) = v39;
              }
              while ((const __CFString **)v35 != v36);
              v41 = *((int64x2_t *)this + 2);
            }
            v42 = (const __CFString **)&v31[48 * v33];
            v25 = v34 + 48;
            this[4] = (const __CFString **)v37;
            this[5] = (const __CFString **)(v34 + 48);
            this[6] = v42;
            v44 = (char *)v41.i64[1];
            v43 = (char *)v41.i64[0];
            while (v44 != v43)
            {
              v45 = (const void *)*((_QWORD *)v44 - 6);
              v44 -= 48;
              std::__destroy_at[abi:ne180100]<MutationItinerary::Device,0>(v45);
            }
            if (v43)
              operator delete(v43);
          }
          else
          {
            v25 = std::construct_at[abi:ne180100]<MutationItinerary::Device,MutationItinerary::Device const&,MutationItinerary::Device*>(v23, (uint64_t)buf)+ 48;
          }
          this[5] = (const __CFString **)v25;
          v46 = (_BYTE *)*v16;
          v47 = *(unsigned __int8 *)(*v16 + 121);
          if (*(_BYTE *)(*v16 + 121))
            v47 = v46[120] != 0;
          if (v46[145])
            v48 = v46[144] != 0;
          else
            v48 = 0;
          if ((v47 | v48) == 1)
          {
            v49 = (void **)std::__tree<std::__value_type<applesauce::CF::StringRef,BOOL>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,BOOL>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,BOOL>>>::__find_equal<applesauce::CF::StringRef>((uint64_t)v74, &v77, (const __CFString **)&cf);
            v50 = *v49;
            if (!*v49)
            {
              v51 = (uint64_t **)v49;
              v50 = operator new(0x30uLL);
              *(_QWORD *)v86 = this + 2;
              v52 = cf;
              if (cf)
                CFRetain(cf);
              v50[4] = v52;
              *((_BYTE *)v50 + 40) = 0;
              v86[8] = 1;
              std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__insert_node_at(v74, v77, v51, v50);
              *(_QWORD *)v85 = 0;
              std::unique_ptr<std::__tree_node<std::__value_type<applesauce::CF::StringRef,BOOL>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<applesauce::CF::StringRef,BOOL>,void *>>>>::reset[abi:ne180100]((uint64_t)v85);
            }
            *((_BYTE *)v50 + 40) = 1;
          }
          if (cf)
            CFRelease(cf);
          if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v76.__r_.__value_.__l.__data_);
          v6 = *(AMCP::Log::Scope_Registry **)buf;
          if (*(_QWORD *)buf)
            CFRelease(*(CFTypeRef *)buf);
        }
        else
        {
          v6 = (AMCP::Log::Scope_Registry *)os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)v6)
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_MutationItinerary.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 49;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  Skipping DSP configuration change request entry because the provided device has no UID.", buf, 0x12u);
          }
        }
        v16 += 2;
      }
      while (v16 != v17);
    }
    if (*((_QWORD *)a2 + 3) != *((_QWORD *)a2 + 4) && *((_QWORD *)a2 + 6) != *((_QWORD *)a2 + 7))
    {
      AMCP::Log::Scope_Registry::get(v6);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v53 = *(std::__shared_weak_count **)&buf[8];
      v54 = **(NSObject ***)buf;
      if (*(_QWORD *)&buf[8])
      {
        v55 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
      }
      if (os_log_type_enabled(v54, OS_LOG_TYPE_DEBUG))
      {
        v71 = pthread_self();
        v72 = pthread_mach_thread_np(v71);
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)&buf[4] = v72;
        *(_WORD *)&buf[8] = 2080;
        *(_QWORD *)&buf[10] = "HALS_MutationItinerary.cpp";
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = 83;
        _os_log_debug_impl(&dword_1B57BA000, v54, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d [hal_dsp] DSP configuration change contains client formats for both input and output at the same time which is not supported.", buf, 0x18u);
      }
    }
    if (this[3])
      goto LABEL_76;
    v64 = this[4];
    v63 = this[5];
    if (v64 != v63)
    {
      v65 = v64 + 6;
      do
      {
        v66 = *((unsigned __int8 *)v65 - 20) | *((unsigned __int8 *)v65 - 32) | *((unsigned __int8 *)v65 - 12) | *((unsigned __int8 *)v65 - 4);
        v68 = v66 == 0;
        v67 = v66 != 0;
        v68 = !v68 || v65 == v63;
        v65 += 6;
      }
      while (!v68);
      if (v67)
        goto LABEL_76;
    }
    if (this[7] != this[8])
    {
LABEL_76:
      std::map<applesauce::CF::StringRef,BOOL>::map[abi:ne180100]((uint64_t)buf, this + 1);
      MutationItinerary::Reset((MutationItinerary *)this);
      v68 = *((_QWORD *)a2 + 12) == 0;
      *(_BYTE *)this = v68;
      if (v68)
        v58 = a3;
      else
        v58 = 0;
      *((_BYTE *)this + 1) = v58;
      if (*(_QWORD *)&buf[16])
      {
        if (this + 1 != (const __CFString ***)buf)
          std::__tree<std::__value_type<applesauce::CF::StringRef,BOOL>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,BOOL>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,BOOL>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<applesauce::CF::StringRef,BOOL>,std::__tree_node<std::__value_type<applesauce::CF::StringRef,BOOL>,void *> *,long>>((uint64_t)(this + 1), *(_QWORD **)buf, &buf[8]);
        AMCP::Log::Scope_Registry::get(v57);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v85, "com.apple.coreaudio", "AMCP");
        v59 = *(std::__shared_weak_count **)v86;
        v60 = **(NSObject ***)v85;
        if (*(_QWORD *)v86)
        {
          v61 = (unint64_t *)(*(_QWORD *)v86 + 8);
          do
            v62 = __ldaxr(v61);
          while (__stlxr(v62 - 1, v61));
          if (!v62)
          {
            ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
            std::__shared_weak_count::__release_weak(v59);
          }
        }
        if (os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG))
        {
          v69 = pthread_self();
          v70 = pthread_mach_thread_np(v69);
          *(_DWORD *)v85 = 67109634;
          *(_DWORD *)&v85[4] = v70;
          *(_WORD *)v86 = 2080;
          *(_QWORD *)&v86[2] = "HALS_MutationItinerary.cpp";
          v87 = 1024;
          v88 = 110;
          _os_log_debug_impl(&dword_1B57BA000, v60, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d [hal_dsp][reference] DSP negotiate requests for reference stream(s) will be retained; other re"
            "quests are unsupported.",
            v85,
            0x18u);
        }
      }
      std::__tree<std::__value_type<applesauce::CF::StringRef,BOOL>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,BOOL>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,BOOL>>>::destroy(*(_QWORD **)&buf[8]);
    }
    return *(_BYTE *)this != 0;
  }
  return result;
}

void sub_1B5C679C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24,_QWORD *a25)
{
  std::__tree<std::__value_type<applesauce::CF::StringRef,BOOL>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,BOOL>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,BOOL>>>::destroy(a25);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<MutationItinerary::Device,MutationItinerary::Device const&,MutationItinerary::Device*>(uint64_t a1, uint64_t a2)
{
  CFTypeRef v4;
  __int128 v5;
  __int128 v6;

  v4 = *(CFTypeRef *)a2;
  if (*(_QWORD *)a2)
    CFRetain(*(CFTypeRef *)a2);
  *(_QWORD *)a1 = v4;
  v5 = *(_OWORD *)(a2 + 8);
  v6 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 37) = *(_QWORD *)(a2 + 37);
  *(_OWORD *)(a1 + 24) = v6;
  *(_OWORD *)(a1 + 8) = v5;
  return a1;
}

void MutationItinerary::Device::~Device(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

std::string *MutationItinerary::util_ChangeBitmaskToString(std::string *this, int a2)
{
  std::string *result;
  const std::string::value_type *v5;
  std::string::size_type v6;

  this->__r_.__value_.__r.__words[0] = 0;
  this->__r_.__value_.__l.__size_ = 0;
  this->__r_.__value_.__r.__words[2] = 0;
  result = std::string::append(this, "Changes: ", 9uLL);
  if (!a2)
  {
    v5 = "<none>";
    v6 = 6;
    return std::string::append(this, v5, v6);
  }
  if ((a2 & 2) != 0)
    result = std::string::append(this, "context format / ", 0x11uLL);
  if ((a2 & 8) != 0)
    result = std::string::append(this, "missing device / ", 0x11uLL);
  if ((a2 & 1) != 0)
    result = std::string::append(this, "device sample rate / ", 0x15uLL);
  if ((a2 & 4) != 0)
  {
    v5 = "reference stream / ";
    v6 = 19;
    return std::string::append(this, v5, v6);
  }
  return result;
}

void sub_1B5C67B8C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

BOOL MutationItinerary::AreChangesReconciled(MutationItinerary *this, const DSP_Host_Types::ConfigurationChangeRequest *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  const __CFString *v8;
  int v9;
  void *v10;
  int v11;
  void *v12;
  std::string::size_type size;
  std::string *v14;
  size_t v15;
  void **v16;
  size_t v17;
  BOOL v18;
  BOOL v19;
  uint64_t *v20;
  const void **v21;
  const void **v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  int v27;
  int v28;
  void *v29;
  std::string::size_type v30;
  std::string *v31;
  size_t v32;
  const void *v33;
  size_t v34;
  BOOL v35;
  BOOL v36;
  unint64_t *v37;
  unint64_t v38;
  int v39;
  BOOL v40;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const __CFString *v47;
  int v48;
  void *v49;
  int v50;
  void *v51;
  std::string::size_type v52;
  std::string *v53;
  size_t v54;
  void **v55;
  size_t v56;
  BOOL v57;
  BOOL v58;
  _QWORD *v59;
  uint64_t v60;
  CFComparisonResult v61;
  uint64_t *v62;
  _BOOL4 v63;
  _BOOL4 v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  _BOOL4 v68;
  char *v69;
  char *v70;
  double v71;
  int v72;
  int v73;
  int v74;
  _BOOL8 v75;
  std::runtime_error *v77;
  std::runtime_error *exception;
  MutationItinerary *v80;
  _QWORD *v81;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t *v87;
  int v88;
  void (**v89)();
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD v93[66];
  const void **v94;
  _QWORD *v95;
  _QWORD *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  void *v99;
  size_t v100;
  unsigned __int8 v101;
  int v102;
  std::string v103[2];

  DSP_Host_Types::ConfigurationChangeRequest::ConfigurationChangeRequest((DSP_Host_Types::ConfigurationChangeRequest *)&v89, a2);
  v4 = (_QWORD *)*((_QWORD *)this + 1);
  v80 = this;
  v81 = (_QWORD *)((char *)this + 16);
  if (v4 == (_QWORD *)((char *)this + 16))
  {
    v5 = 0;
    goto LABEL_87;
  }
  v5 = 0;
  do
  {
    if (v5)
      break;
    v6 = v95;
    v83 = v4;
    v84 = v96;
    if (v95 == v96)
    {
      v40 = *((_BYTE *)v4 + 40) == 0;
      goto LABEL_73;
    }
    while (1)
    {
      v85 = v6;
      v7 = *v6;
      if (!*(_BYTE *)(v7 + 64))
        goto LABEL_68;
      DSP_Dictionariable::SingleKvp<std::string>::value(v103, v7 + 24);
      v8 = (const __CFString *)v83[4];
      if (!v8)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::convert_to<std::string,0>((uint64_t)&v99, v8);
      v9 = (char)v101;
      v10 = v99;
      v11 = SHIBYTE(v103[0].__r_.__value_.__r.__words[2]);
      v12 = (void *)v103[0].__r_.__value_.__r.__words[0];
      if ((v103[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v103[0].__r_.__value_.__r.__words[2]);
      else
        size = v103[0].__r_.__value_.__l.__size_;
      if ((v103[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v14 = v103;
      else
        v14 = (std::string *)v103[0].__r_.__value_.__r.__words[0];
      if ((v101 & 0x80u) == 0)
        v15 = v101;
      else
        v15 = v100;
      if ((v101 & 0x80u) == 0)
        v16 = &v99;
      else
        v16 = (void **)v99;
      if (v15 >= size)
        v17 = size;
      else
        v17 = v15;
      v18 = memcmp(v14, v16, v17) == 0;
      v19 = v15 == size && v18;
      if ((v9 & 0x80000000) == 0)
      {
        if ((v11 & 0x80000000) == 0)
          break;
        goto LABEL_30;
      }
      operator delete(v10);
      if ((v11 & 0x80000000) == 0)
        break;
LABEL_30:
      operator delete(v12);
      if (v19)
        goto LABEL_31;
LABEL_68:
      v6 = v85 + 2;
      if (v85 + 2 == v84)
      {
        v39 = 0;
        goto LABEL_71;
      }
    }
    if (!v19)
      goto LABEL_68;
LABEL_31:
    v20 = *(uint64_t **)(*v85 + 712);
    v87 = *(uint64_t **)(*v85 + 720);
    if (v20 == v87)
      goto LABEL_68;
    v21 = v94;
    while (1)
    {
      v22 = (const void **)v93[65];
      v23 = *v20;
      v24 = (std::__shared_weak_count *)v20[1];
      v97 = *v20;
      v98 = v24;
      if (v24)
      {
        p_shared_owners = (unint64_t *)&v24->__shared_owners_;
        do
          v26 = __ldxr(p_shared_owners);
        while (__stxr(v26 + 1, p_shared_owners));
      }
      if (v22 == v21)
      {
LABEL_60:
        if (!v24)
          goto LABEL_66;
LABEL_61:
        v37 = (unint64_t *)&v24->__shared_owners_;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
        goto LABEL_66;
      }
      while (1)
      {
        if (*(_BYTE *)(v23 + 304))
        {
          DSP_Dictionariable::SingleKvp<std::string>::value(v103, v23 + 264);
          v27 = *((char *)v22 + 23);
          v28 = SHIBYTE(v103[0].__r_.__value_.__r.__words[2]);
          v29 = (void *)v103[0].__r_.__value_.__r.__words[0];
          if ((v103[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v30 = HIBYTE(v103[0].__r_.__value_.__r.__words[2]);
          else
            v30 = v103[0].__r_.__value_.__l.__size_;
          if ((v103[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v31 = v103;
          else
            v31 = (std::string *)v103[0].__r_.__value_.__r.__words[0];
          if (v27 >= 0)
            v32 = *((unsigned __int8 *)v22 + 23);
          else
            v32 = (size_t)v22[1];
          if (v27 >= 0)
            v33 = v22;
          else
            v33 = *v22;
          if (v32 >= v30)
            v34 = v30;
          else
            v34 = v32;
          v35 = memcmp(v31, v33, v34) == 0;
          v36 = v32 == v30 && v35;
          if (v28 < 0)
            operator delete(v29);
          if (v36)
            break;
        }
        v22 += 3;
        if (v22 == v21)
          goto LABEL_60;
      }
      v21 = v22;
      if (v24)
        goto LABEL_61;
LABEL_66:
      if (v21 != v94)
        break;
      v20 += 2;
      if (v20 == v87)
        goto LABEL_68;
    }
    v39 = 1;
LABEL_71:
    v4 = v83;
    v40 = *((unsigned __int8 *)v83 + 40) == v39;
LABEL_73:
    if (v40)
      v5 = 0;
    else
      v5 = 4;
    v42 = (_QWORD *)v4[1];
    if (v42)
    {
      do
      {
        v43 = v42;
        v42 = (_QWORD *)*v42;
      }
      while (v42);
    }
    else
    {
      do
      {
        v43 = (_QWORD *)v4[2];
        v40 = *v43 == (_QWORD)v4;
        v4 = v43;
      }
      while (!v40);
    }
    v4 = v43;
  }
  while (v43 != v81);
LABEL_87:
  v88 = v5;
  v44 = *((_QWORD *)v80 + 4);
  v86 = *((_QWORD *)v80 + 5);
  if (v44 != v86)
  {
    while (1)
    {
      v45 = *((_QWORD *)a2 + 82);
      v46 = *((_QWORD *)a2 + 83);
      v47 = *(const __CFString **)v44;
      if (*(_QWORD *)v44)
        CFRetain(*(CFTypeRef *)v44);
      if (v45 != v46)
        break;
LABEL_119:
      if (v47)
LABEL_120:
        CFRelease(v47);
      if (v45 == *((_QWORD *)a2 + 83))
      {
        v59 = v81;
        v60 = *v81;
        if (!*v81)
          goto LABEL_132;
        do
        {
          v61 = applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*(const __CFString **)(v60 + 32), (const __CFString **)v44);
          v62 = (uint64_t *)(v60 + 8);
          if ((unint64_t)v61 <= kCFCompareGreaterThan)
          {
            v62 = (uint64_t *)v60;
            v59 = (_QWORD *)v60;
          }
          v60 = *v62;
        }
        while (*v62);
        if (v59 != v81
          && (unint64_t)applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*(const __CFString **)v44, (const __CFString **)v59 + 4) <= kCFCompareGreaterThan)
        {
          v63 = *((_BYTE *)v59 + 40) != 0;
        }
        else
        {
LABEL_132:
          v63 = 0;
        }
        v64 = *(_BYTE *)(v44 + 16) || *(_BYTE *)(v44 + 28) || *(_BYTE *)(v44 + 36) || *(_BYTE *)(v44 + 44) != 0;
        v65 = v88;
        if (v63 || v64)
          v65 = v88 | 8;
        v88 = v65;
      }
      else if (*(_BYTE *)(v44 + 16)
             && *(_BYTE *)(*(_QWORD *)v45 + 272)
             && *(double *)(v44 + 8) != *(double *)(*(_QWORD *)v45 + 264))
      {
        v88 |= 1u;
      }
      v44 += 48;
      if (v44 == v86)
        goto LABEL_144;
    }
    while (2)
    {
      if (*(_BYTE *)(*(_QWORD *)v45 + 64))
      {
        DSP_Dictionariable::SingleKvp<std::string>::value(v103, *(_QWORD *)v45 + 24);
        if (!v47)
        {
          v77 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v77, "Could not construct");
          __cxa_throw(v77, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        applesauce::CF::convert_to<std::string,0>((uint64_t)&v99, v47);
        v48 = (char)v101;
        v49 = v99;
        v50 = SHIBYTE(v103[0].__r_.__value_.__r.__words[2]);
        v51 = (void *)v103[0].__r_.__value_.__r.__words[0];
        if ((v103[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v52 = HIBYTE(v103[0].__r_.__value_.__r.__words[2]);
        else
          v52 = v103[0].__r_.__value_.__l.__size_;
        if ((v103[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v53 = v103;
        else
          v53 = (std::string *)v103[0].__r_.__value_.__r.__words[0];
        if ((v101 & 0x80u) == 0)
          v54 = v101;
        else
          v54 = v100;
        if ((v101 & 0x80u) == 0)
          v55 = &v99;
        else
          v55 = (void **)v99;
        if (v54 >= v52)
          v56 = v52;
        else
          v56 = v54;
        v57 = memcmp(v53, v55, v56) == 0;
        v58 = v54 == v52 && v57;
        if (v48 < 0)
        {
          operator delete(v49);
          if ((v50 & 0x80000000) == 0)
            goto LABEL_113;
        }
        else if ((v50 & 0x80000000) == 0)
        {
LABEL_113:
          if (v58)
            goto LABEL_120;
          goto LABEL_117;
        }
        operator delete(v51);
        if (v58)
          goto LABEL_120;
      }
LABEL_117:
      v45 += 16;
      if (v45 == v46)
      {
        v45 = v46;
        goto LABEL_119;
      }
      continue;
    }
  }
LABEL_144:
  v66 = *((_QWORD *)v80 + 7);
  v67 = *((_QWORD *)v80 + 8);
  if (v66 != v67)
  {
    LOBYTE(v68) = 0;
    v69 = (char *)a2 + 120;
    v70 = (char *)a2 + 272;
    while (!v68)
    {
      v71 = *(double *)v66;
      DSP_Host_Types::FormatDescription::get_asbd((uint64_t)v103, (uint64_t)v69);
      if (v71 == *(double *)&v103[0].__r_.__value_.__l.__data_
        && (v72 = *(_DWORD *)(v66 + 28),
            DSP_Host_Types::FormatDescription::get_asbd((uint64_t)&v99, (uint64_t)v69),
            v72 == v102))
      {
        v68 = 1;
      }
      else
      {
        DSP_Host_Types::FormatDescription::get_asbd((uint64_t)v103, (uint64_t)v70);
        if (v71 == *(double *)&v103[0].__r_.__value_.__l.__data_)
        {
          v73 = *(_DWORD *)(v66 + 28);
          DSP_Host_Types::FormatDescription::get_asbd((uint64_t)&v99, (uint64_t)v70);
          v68 = v73 == v102;
        }
        else
        {
          v68 = 0;
        }
      }
      v66 += 40;
      if (v66 == v67)
      {
        if (v68)
          break;
        v74 = v88 | 2;
        goto LABEL_156;
      }
    }
  }
  v74 = v88;
LABEL_156:
  if (a3)
    *a3 = v74;
  v75 = v74 == 0;
  v89 = (void (**)())&off_1E699D0D8;
  v103[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v95;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)v103);
  DSP_Host_Types::IOContextDescription::~IOContextDescription((DSP_Host_Types::IOContextDescription *)v93);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)&v92);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)&v91);
  v89 = off_1E699D128;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v90);
  return v75;
}

void sub_1B5C68254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  if (*(char *)(v15 - 121) < 0)
    operator delete(*(void **)(v15 - 144));
  DSP_Host_Types::ConfigurationChangeRequest::~ConfigurationChangeRequest((DSP_Host_Types::ConfigurationChangeRequest *)va);
  _Unwind_Resume(a1);
}

const void **MutationItinerary::AreChangesReconciled(DSP_Host_Types::ConfigurationChangeRequest const&,int *)const::$_1::~$_1(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

uint64_t DSP_Host_Types::FormatDescription::get_asbd(uint64_t this, uint64_t a2)
{
  int v2;
  uint64_t v3;
  int v4;
  _BOOL4 v5;
  BOOL v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  unsigned int v13;
  BOOL v14;
  unsigned int v15;
  unsigned int v16;

  v2 = *(unsigned __int8 *)(a2 + 124);
  if (*(_BYTE *)(a2 + 124))
    v2 = *(_DWORD *)(a2 + 120);
  if (*(_BYTE *)(a2 + 48))
    v3 = *(_QWORD *)(a2 + 40);
  else
    v3 = 0x40E7700000000000;
  if (*(_BYTE *)(a2 + 76))
    v4 = *(_DWORD *)(a2 + 72);
  else
    v4 = 1;
  if (*(_BYTE *)(a2 + 97))
    v5 = *(_BYTE *)(a2 + 96) != 0;
  else
    v5 = 1;
  switch(v2)
  {
    case 1:
      v6 = !v5;
      v7 = 41;
      v8 = 9;
      goto LABEL_31;
    case 2:
      v12 = !v5;
      if (v5)
        v7 = 12;
      else
        v7 = 44;
      v13 = 2 * v4;
      if (v12)
        v13 = 2;
      v10 = v13 | 0x100000000;
      HIDWORD(v11) = 16;
      goto LABEL_37;
    case 3:
      v6 = !v5;
      v7 = 3116;
      v8 = 3084;
      goto LABEL_31;
    case 4:
      v14 = !v5;
      if (v5)
        v7 = 9;
      else
        v7 = 41;
      v15 = 8 * v4;
      if (v14)
        v15 = 8;
      v10 = v15 | 0x100000000;
      HIDWORD(v11) = 64;
      goto LABEL_37;
    case 5:
      v6 = !v5;
      v7 = 44;
      v8 = 12;
LABEL_31:
      if (!v6)
        v7 = v8;
      v16 = 4 * v4;
      if (v6)
        v16 = 4;
      v10 = v16 | 0x100000000;
      HIDWORD(v11) = 32;
LABEL_37:
      LODWORD(v11) = v4;
      v9 = 1819304813;
      break;
    default:
      v9 = 0;
      v7 = 0;
      v10 = 0;
      v3 = 0;
      v11 = 0;
      break;
  }
  *(_QWORD *)this = v3;
  *(_DWORD *)(this + 8) = v9;
  *(_DWORD *)(this + 12) = v7;
  *(_QWORD *)(this + 16) = v10;
  *(_DWORD *)(this + 24) = v10;
  *(_QWORD *)(this + 28) = v11;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

void HALS_Device::Activate(const __CFString **this)
{
  int TransportType;
  unsigned int v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  const __CFString *v8;
  const __CFString *v9;
  uint64_t Setting;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unsigned int *v17;
  HALS_Object *v18;
  uint64_t v19;
  int v20;
  const __CFNumber *v21;
  const __CFNumber *v22;
  HALS_System *v23;
  unint64_t CurrentDeviceArrivalTime;
  unint64_t v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  _BOOL4 v33;
  _BOOL4 v34;
  BOOL v35;
  const __CFString *v36;
  const __CFString *v37;
  HALS_Object *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  int v41;
  const __CFNumber *v42;
  uint64_t v43;
  const __CFNumber *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  HALS_SettingsManager **v47;
  CFDictionaryRef v48;
  _BYTE v49[5];
  int v50;
  _BYTE buf[18];
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  char *v55;
  __int16 v56;
  _BYTE *v57;
  __int16 v58;
  uint64_t v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  TransportType = HALS_IODevice::GetTransportType((HALS_IODevice *)this);
  v49[0] = HIBYTE(TransportType);
  v49[1] = BYTE2(TransportType);
  v49[2] = BYTE1(TransportType);
  v49[3] = TransportType;
  v49[4] = 0;
  v3 = ((uint64_t (*)(const __CFString **))(*this)[10].isa)(this);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v4 = *((unsigned int *)this + 4);
    *(_DWORD *)buf = 136316418;
    *(_QWORD *)&buf[4] = "HALS_Device.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 161;
    v52 = 2048;
    v53 = v4;
    v54 = 2082;
    v55 = (char *)this + 156;
    v56 = 2080;
    v57 = v49;
    v58 = 2048;
    v59 = v3;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_Device::Activate: activating device %lu: %{public}s Transport Type: %s Clock Domain: %lu", buf, 0x3Au);
  }
  kdebug_trace();
  if (v3)
    v5 = 0;
  else
    v5 = TransportType == 1651274862;
  if (v5 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "HALS_Device.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 165;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_Device::Activate: !!!! It is unusual for a built-in device to have a Clock Domain of zero.", buf, 0x12u);
  }
  v6 = *((unsigned int *)this + 4);
  strcpy(buf, "sccabolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  if (((unsigned int (*)(const __CFString **, uint64_t, _BYTE *, _QWORD))(*this)[2].length)(this, v6, buf, 0))
  {
    v7 = *((unsigned int *)this + 4);
    strcpy(buf, "sccabolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    v47 = 0;
    LODWORD(v43) = 0;
    ((void (*)(const __CFString **, uint64_t, _BYTE *, uint64_t, uint64_t *, HALS_SettingsManager ***, _QWORD, _QWORD, _QWORD))(*this)[3].data)(this, v7, buf, 8, &v43, &v47, 0, 0, 0);
    v8 = (const __CFString *)v47;
    v9 = this[16];
    if (v9 != (const __CFString *)v47)
    {
      if (v9 && *((_BYTE *)this + 136))
        CFRelease(v9);
      this[16] = v8;
    }
    *((_BYTE *)this + 136) = 1;
  }
  v45 = 0;
  v46 = 0;
  HALS_System::GetInstance(&v47, 0, &v45);
  Setting = HALS_SettingsManager::ReadSetting(v47[176], this[14]);
  *(_QWORD *)buf = &off_1E69A0DE0;
  *(_QWORD *)&buf[8] = Setting;
  v11 = (std::__shared_weak_count *)v48;
  if (v48)
  {
    v12 = (unint64_t *)((char *)v48 + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v46;
  if (v46)
  {
    p_shared_owners = (unint64_t *)&v46->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (*(_QWORD *)&buf[8])
  {
    OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v47, *(CFDictionaryRef *)&buf[8], CFSTR("output.stereo.left"));
    *((_DWORD *)this + 36) = OS::CF::Number::GetValue<unsigned int>(v48, 1);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v47);
    OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v47, *(CFDictionaryRef *)&buf[8], CFSTR("output.stereo.right"));
    *((_DWORD *)this + 37) = OS::CF::Number::GetValue<unsigned int>(v48, 2);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v47);
    if ((HALS_System::sIsInitialized & 1) == 0)
    {
      OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Dictionary>((uint64_t)&v47, *(CFDictionaryRef *)&buf[8], CFSTR("global.arrival"));
      if (v48)
      {
        if (HALS_IODevice::GetTransportType((HALS_IODevice *)this) == 1651274862)
        {
          v17 = (unsigned int *)((uint64_t (*)(const __CFString **, uint64_t, uint64_t, _QWORD))(*this)[20].isa)(this, 1685287523, 1869968496, 0);
          if (v17
            || (v17 = (unsigned int *)((uint64_t (*)(const __CFString **, uint64_t, uint64_t, _QWORD))(*this)[20].isa)(this, 1685287523, 1768845428, 0), pthread_once(&HALS_ObjectMap::sObjectInfoListInitialized, (void (*)(void))HALS_ObjectMap::Initialize), v17))
          {
            v19 = v17[4];
            v43 = 0x676C6F6273636369;
            LODWORD(v44) = 0;
            v41 = 0;
            v50 = 0;
            (*(void (**)(unsigned int *, uint64_t, uint64_t *, uint64_t, int *, int *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v17 + 112))(v17, v19, &v43, 4, &v50, &v41, 0, 0, 0);
            v20 = v41;
          }
          else
          {
            v20 = 0;
          }
          HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v17, v18);
        }
        else
        {
          v20 = 0;
        }
        if (!HALS_Device::IsHidden((HALS_Device *)this) && v20 != 1768778083 && v20 != 1769173099)
        {
          OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v43, v48, CFSTR("seed"));
          v21 = OS::CF::Number::GetValue<unsigned long long>(v44);
          OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v41, v48, CFSTR("time"));
          v22 = OS::CF::Number::GetValue<unsigned long long>(v42);
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v41);
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v43);
          v39 = 0;
          v40 = 0;
          HALS_System::GetInstance(&v43, 0, &v39);
          CurrentDeviceArrivalTime = HALS_System::GetCurrentDeviceArrivalTime(v23);
          v26 = v25;
          v27 = (std::__shared_weak_count *)v44;
          if (v44)
          {
            v28 = (unint64_t *)((char *)v44 + 8);
            do
              v29 = __ldaxr(v28);
            while (__stlxr(v29 - 1, v28));
            if (!v29)
            {
              ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
              std::__shared_weak_count::__release_weak(v27);
            }
          }
          v30 = v40;
          if (v40)
          {
            v31 = (unint64_t *)&v40->__shared_owners_;
            do
              v32 = __ldaxr(v31);
            while (__stlxr(v32 - 1, v31));
            if (!v32)
            {
              ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
              std::__shared_weak_count::__release_weak(v30);
            }
          }
          v33 = v21 == (const __CFNumber *)CurrentDeviceArrivalTime;
          v34 = (unint64_t)v22 < v26;
          v35 = !v33 || !v34;
          if (v33 && v34)
            v36 = (const __CFString *)v21;
          else
            v36 = (const __CFString *)CurrentDeviceArrivalTime;
          if (v35)
            v37 = (const __CFString *)v26;
          else
            v37 = (const __CFString *)v22;
          if ((unint64_t)v21 < CurrentDeviceArrivalTime)
          {
            v36 = (const __CFString *)v21;
            v37 = (const __CFString *)v22;
          }
          this[52] = v36;
          this[53] = v37;
        }
      }
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v47);
    }
  }
  if (!this[52] && !this[53])
    HALS_Device::UpdateDeviceArrivalTime((HALS_Device *)this);
  *((_DWORD *)this + 38) = ((uint64_t (*)(const __CFString **))(*this)[16].isa)(this);
  HALS_Object::Activate((HALS_Object *)this, v38);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
}

void sub_1B5C68A74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va2;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va3;

  va_start(va3, a3);
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v14 = va_arg(va3, _QWORD);
  v16 = va_arg(va3, _QWORD);
  v17 = va_arg(va3, _QWORD);
  v18 = va_arg(va3, _QWORD);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)va2);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)va3);
  _Unwind_Resume(a1);
}

uint64_t HALS_Device::_Deactivate(HALS_Device *this)
{
  uint64_t v2;
  uint64_t **i;
  uint64_t *v4;
  HALS_Object *v5;
  uint64_t *v6;
  HALS_Object *v7;
  int v8;
  HALB_Mutex *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  _BYTE buf[40];
  uint64_t v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v2 = *((unsigned int *)this + 4);
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "HALS_Device.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 232;
    *(_WORD *)&buf[18] = 2048;
    *(_QWORD *)&buf[20] = v2;
    *(_WORD *)&buf[28] = 2082;
    *(_QWORD *)&buf[30] = (char *)this + 156;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_Device::_Deactivate: deactivating device %lu: %{public}s", buf, 0x26u);
  }
  *((_DWORD *)this + 2) = 0;
  for (i = (uint64_t **)*((_QWORD *)this + 80); i; i = (uint64_t **)*i)
  {
    v4 = i[6];
    if (v4)
    {
      (*(void (**)(uint64_t *))(*v4 + 8))(v4);
      HALS_ObjectMap::ObjectIsDead((HALS_ObjectMap *)i[6], v5);
      i[6] = 0;
    }
    v6 = i[11];
    if (v6)
    {
      (*(void (**)(uint64_t *))(*v6 + 8))(v6);
      HALS_ObjectMap::ObjectIsDead((HALS_ObjectMap *)i[11], v7);
      i[11] = 0;
    }
  }
  if (*((_DWORD *)this + 150))
  {
    v17 = 0;
    v18 = 0;
    HALS_System::GetInstance(&v19, 0, &v17);
    v8 = *((_DWORD *)this + 150);
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf[8] = 0x40000000;
    *(_QWORD *)&buf[16] = ___ZN11HALS_System16DestroyIOContextEP11HALS_Clientj_block_invoke;
    *(_QWORD *)&buf[24] = &__block_descriptor_tmp_125_5673;
    *(_QWORD *)&buf[32] = v19;
    v22 = 0;
    v23 = v8;
    v9 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 56))(v19);
    HALB_CommandGate::ExecuteCommand(v9, (uint64_t)buf);
    v10 = v20;
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v13 = v18;
    if (v18)
    {
      v14 = (unint64_t *)&v18->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    *((_DWORD *)this + 150) = 0;
  }
  return kdebug_trace();
}

void sub_1B5C68D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t HALS_Device::GetCommandGate(HALS_Device *this)
{
  return *((_QWORD *)this + 10);
}

{
  return *((_QWORD *)this + 10);
}

uint64_t HALS_Device::GetMIGDispatchQueue(HALS_Device *this)
{
  return *((_QWORD *)this + 11);
}

{
  return *((_QWORD *)this + 11);
}

uint64_t HALS_Device::IsPropertySettable(HALS_Device *this, const BOOL *a2, AudioObjectPropertyAddress *a3, AudioObjectPropertyAddress *a4)
{
  signed int mSelector;
  uint64_t result;
  int v9;
  int v10;
  unsigned __int8 v11;
  unsigned int v12;
  HALS_Client *v13;
  char v14;
  unsigned __int16 HasProperty;
  HALS_Client *v16;
  unsigned int v17;
  uint64_t v18[2];
  _QWORD v19[2];

  mSelector = a3->mSelector;
  result = 1;
  if ((int)a3->mSelector <= 1768777572)
  {
    if (mSelector <= 1684498543)
    {
      if (mSelector > 1667523954)
      {
        if (mSelector <= 1684236337)
        {
          if (mSelector == 1667523955)
            return result;
          if (mSelector == 1668049764)
            return 0;
          v9 = 1668575852;
        }
        else if (mSelector > 1684434035)
        {
          if (mSelector == 1684434036)
            return 0;
          v9 = 1684498541;
        }
        else
        {
          if (mSelector == 1684236338)
            return result;
          v9 = 1684301171;
        }
        goto LABEL_79;
      }
      if (mSelector <= 1634758764)
      {
        if (mSelector == 1634429294 || mSelector == 1634496615)
          return 0;
        v10 = 1634755428;
        goto LABEL_69;
      }
      if (mSelector != 1634758765 && mSelector != 1634758774)
      {
        v9 = 1667330160;
        goto LABEL_79;
      }
      return result;
    }
    if (mSelector > 1685414762)
    {
      if (mSelector <= 1751412336)
      {
        if (mSelector == 1685414763)
          return result;
        if (mSelector == 1735354734)
          return 0;
        v9 = 1735356005;
      }
      else
      {
        if (mSelector <= 1751737453)
        {
          if (mSelector == 1751412337)
            return 0;
          v10 = 1751413616;
          goto LABEL_69;
        }
        if (mSelector == 1751737454)
          return 0;
        v9 = 1768124270;
      }
LABEL_79:
      if (mSelector == v9)
        return 0;
      return HALS_Object::IsPropertySettable(1, (uint64_t)a2, (int *)a3);
    }
    if (mSelector > 1685089382)
    {
      if (mSelector == 1685089383 || mSelector == 1685278561)
        return 0;
      if (mSelector != 1685278562)
        return HALS_Object::IsPropertySettable(1, (uint64_t)a2, (int *)a3);
      if (!a4)
        return *((_BYTE *)this + 616) != 0;
      return result;
    }
    if (mSelector == 1684498544)
      return 0;
    if (mSelector != 1684500589)
    {
      v10 = 1684500594;
      goto LABEL_69;
    }
    v14 = AMCP::Feature_Flags::allow_adm_dsp_graph_parameters(0, a2);
    if ((v14 & 1) != 0
      || (v18[0] = 0, v18[1] = 0, HALS_System::GetInstance(v19, 0, v18), g_static_start_options == 1))
    {
      HasProperty = HALS_Device_HostedDSP::HasProperty(*((HALS_Device ***)this + 76), a3, a4, v13);
      if ((v14 & 1) != 0)
      {
        if (HasProperty < 0x100u)
          return 1;
        return HALS_Device_HostedDSP::IsPropertySettable(*((HALS_Device ***)this + 76), (uint64_t)a3, a4, v16);
      }
      v17 = HasProperty;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v19);
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v18);
      if (v17 >= 0x100)
        return HALS_Device_HostedDSP::IsPropertySettable(*((HALS_Device ***)this + 76), (uint64_t)a3, a4, v16);
    }
    else
    {
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v19);
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v18);
    }
    return 1;
  }
  if (mSelector <= 1934647618)
  {
    if (mSelector <= 1836411235)
    {
      if (mSelector <= 1818850925)
      {
        if (mSelector == 1768777573 || mSelector == 1768907636)
          return 0;
        v10 = 1818454126;
        goto LABEL_69;
      }
      if (mSelector == 1818850926 || mSelector == 1819569763)
        return 0;
      v9 = 1819634020;
    }
    else if (mSelector <= 1853059699)
    {
      if (mSelector == 1836411236)
        return 0;
      if (mSelector == 1852793963)
        return result;
      v9 = 1853059619;
    }
    else
    {
      if (mSelector <= 1886353265)
      {
        if (mSelector == 1853059700)
          return result;
        v10 = 1869180523;
        goto LABEL_69;
      }
      if (mSelector == 1886353266)
        return 0;
      v9 = 1919512167;
    }
    goto LABEL_79;
  }
  if (mSelector <= 1937009954)
  {
    if (mSelector > 1936092275)
    {
      if (mSelector <= 1936876643)
      {
        if (mSelector != 1936092276)
        {
          v9 = 1936482681;
          goto LABEL_79;
        }
        return 0;
      }
      if (mSelector == 1936876644)
        return 0;
      v10 = 1936879204;
LABEL_69:
      if (mSelector == v10)
        return result;
      return HALS_Object::IsPropertySettable(1, (uint64_t)a2, (int *)a3);
    }
    if (mSelector == 1934647619 || mSelector == 1934647636)
      return a3->mScope == 1869968496;
    v9 = 1935763060;
    goto LABEL_79;
  }
  if (mSelector <= 1983996970)
  {
    if (mSelector == 1937009955 || mSelector == 1953653102)
      return 0;
    v9 = 1969841184;
    goto LABEL_79;
  }
  if (mSelector > 1986622323)
  {
    if (mSelector != 1986622324)
    {
      v9 = 2003136116;
      goto LABEL_79;
    }
  }
  else if (mSelector != 1983996971)
  {
    if (mSelector == 1983997011)
      return HALS_Device_HostedDSP::IsPropertySettable(*((HALS_Device ***)this + 76), (uint64_t)a3, a4, (HALS_Client *)a4);
    return HALS_Object::IsPropertySettable(1, (uint64_t)a2, (int *)a3);
  }
  if (a4)
  {
    v11 = atomic_load((unsigned __int8 *)&a4[21].mElement);
    v12 = v11 & 1;
  }
  else
  {
    v12 = 0;
  }
  if (a3->mScope == 1768845428)
    return v12;
  else
    return 0;
}

void sub_1B5C69350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t HALS_Device::GetPropertyDataSize(HALS_Device ***this, const BOOL *a2, AudioObjectPropertyAddress *a3, uint64_t a4, int *a5, AudioObjectPropertyAddress *a6)
{
  signed int mSelector;
  uint64_t v10;
  int v11;
  int v13;
  unsigned int TotalNumberChannelsForClient;
  int v15;
  HALB_Mutex *v16;
  unsigned __int8 v17;
  unsigned int v18;
  unsigned __int8 v19;
  AudioObjectPropertyScope v20;
  int v21;
  HALB_Mutex *v22;
  HALS_Client *v23;
  char v24;
  unsigned __int16 HasProperty;
  unsigned int v26;
  const void *v27;
  HALS_Client *v28;
  int v29;
  AudioObjectPropertyScope mScope;
  int v31;
  unsigned int v32;
  _DWORD *exception;
  _DWORD *v34;
  _DWORD *v35;
  _DWORD *v36;
  _QWORD v37[8];
  int v38;
  BOOL v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  int v43;
  uint64_t v44[2];
  _QWORD v45[8];
  unsigned int v46;
  uint8_t v47[4];
  const char *v48;
  __int16 v49;
  int v50;
  _BYTE buf[24];
  int v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  mSelector = a3->mSelector;
  v10 = 8;
  if ((int)a3->mSelector > 1768907635)
  {
    if (mSelector > 1934647635)
    {
      if (mSelector <= 1937009954)
      {
        if (mSelector > 1936482680)
        {
          if (mSelector == 1936482681)
            return (16
                  * ((unsigned int (*)(HALS_Device ***, BOOL, AudioObjectPropertyAddress *, uint64_t, int *))(*this)[67])(this, a3->mScope == 1768845428, a6, a4, a5)) | 8;
          if (mSelector == 1936876644 || mSelector == 1936879204)
          {
            TotalNumberChannelsForClient = HALS_Device::GetTotalNumberChannelsForClient((HALS_Device *)this, a3->mScope == 1768845428, (HALS_Client *)a6);
            v15 = caulk::numeric::exceptional_mul<unsigned int>(TotalNumberChannelsForClient);
            return caulk::numeric::exceptional_add<unsigned int>(v15);
          }
          return HALS_Object::GetPropertyDataSize((uint64_t)this, (uint64_t)a2, (int *)a3);
        }
        if (mSelector == 1934647636 || mSelector == 1935763060)
          return 4;
        v11 = 1936092276;
        goto LABEL_79;
      }
      if (mSelector <= 1983996970)
      {
        if (mSelector != 1937009955)
        {
          if (mSelector == 1953653102)
            return 4;
          v13 = 1969841184;
          goto LABEL_75;
        }
        mScope = a3->mScope;
        if (mScope == 1735159650)
        {
          v31 = ((uint64_t (*)(HALS_Device ***, uint64_t, AudioObjectPropertyAddress *, uint64_t, int *))(*this)[67])(this, 1, a6, a4, a5);
          return 4
               * (((unsigned int (*)(HALS_Device ***, _QWORD, AudioObjectPropertyAddress *))(*this)[67])(this, 0, a6)+ v31);
        }
        v29 = ((uint64_t (*)(HALS_Device ***, BOOL, AudioObjectPropertyAddress *, uint64_t, int *))(*this)[67])(this, mScope == 1768845428, a6, a4, a5);
        return (4 * v29);
      }
      if (mSelector <= 1986622323)
      {
        if (mSelector == 1983996971)
        {
          if (a6)
          {
            v17 = atomic_load((unsigned __int8 *)&a6[21].mElement);
            v18 = 4 * (v17 & 1);
          }
          else
          {
            v18 = 0;
          }
          if (a3->mScope == 1768845428)
            return v18;
          else
            return 0;
        }
        if (mSelector == 1983997011)
          return HALS_Device_HostedDSP::GetPropertyDataSize(this[76], (uint64_t)a3, a6, a4, a5, (HALS_Client *)a6);
        return HALS_Object::GetPropertyDataSize((uint64_t)this, (uint64_t)a2, (int *)a3);
      }
      if (mSelector != 1986622324)
      {
        v11 = 2003136116;
        goto LABEL_79;
      }
      if (a6)
      {
        v19 = atomic_load((unsigned __int8 *)&a6[21].mElement);
        return 4 * (v19 & 1u);
      }
    }
    else
    {
      if (mSelector <= 1853059618)
      {
        if (mSelector > 1819634019)
        {
          if (mSelector == 1819634020 || mSelector == 1836411236)
            return v10;
          v11 = 1852793963;
        }
        else
        {
          if (mSelector == 1768907636)
            return v10;
          if (mSelector == 1818850926)
            return 4;
          v11 = 1819569763;
        }
        goto LABEL_79;
      }
      if (mSelector <= 1870098019)
      {
        if (mSelector != 1853059619)
        {
          if (mSelector == 1853059700)
            return v10;
          v11 = 1869180523;
          goto LABEL_79;
        }
      }
      else
      {
        if (mSelector <= 1919512166)
        {
          if (mSelector != 1870098020)
          {
            v11 = 1886353266;
            goto LABEL_79;
          }
          *(_QWORD *)buf = 0;
          *(_QWORD *)&buf[8] = buf;
          *(_QWORD *)&buf[16] = 0x2000000000;
          v52 = 0;
          v45[0] = MEMORY[0x1E0C809B0];
          v45[1] = 0x40000000;
          v45[2] = ___ZNK11HALS_Device19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke;
          v45[3] = &unk_1E699DBC8;
          v46 = a4 >> 2;
          v45[6] = a6;
          v45[7] = a5;
          v45[4] = buf;
          v45[5] = this;
          v16 = (HALB_Mutex *)((uint64_t (*)(HALS_Device ***))(*this)[7])(this);
          HALB_CommandGate::ExecuteCommand(v16, (uint64_t)v45);
          v10 = (4 * *(_DWORD *)(*(_QWORD *)&buf[8] + 24));
LABEL_94:
          _Block_object_dispose(buf, 8);
          return v10;
        }
        if (mSelector == 1919512167)
          return 4;
        if (mSelector != 1934647619)
          return HALS_Object::GetPropertyDataSize((uint64_t)this, (uint64_t)a2, (int *)a3);
        HALS_Device::GetDSPVirtualChannelLayoutForClient((HALS_Device *)buf, (uint64_t)this, (HALS_Client *)(a3->mScope == 1768845428), (uint64_t)a6);
        if ((_BYTE)v52)
        {
          v10 = (*(_DWORD *)&buf[8] - *(_DWORD *)buf);
          if (*(_QWORD *)buf)
          {
            *(_QWORD *)&buf[8] = *(_QWORD *)buf;
            operator delete(*(void **)buf);
          }
          return v10;
        }
      }
    }
    return 0;
  }
  if (mSelector <= 1684500588)
  {
    if (mSelector <= 1668049763)
    {
      if (mSelector > 1634758764)
      {
        if (mSelector <= 1667330159)
        {
          if (mSelector != 1634758765)
          {
            v11 = 1634758774;
            goto LABEL_79;
          }
          return 4;
        }
        if (mSelector != 1667330160)
        {
          v13 = 1667523955;
          goto LABEL_75;
        }
        return v10;
      }
      if (mSelector == 1634429294 || mSelector == 1634496615)
        return 4;
      v13 = 1634755428;
      goto LABEL_75;
    }
    if (mSelector > 1684301170)
    {
      if (mSelector > 1684498540)
      {
        if (mSelector == 1684498541)
          return 4;
        v11 = 1684498544;
      }
      else
      {
        if (mSelector == 1684301171)
          return v10;
        v11 = 1684434036;
      }
      goto LABEL_79;
    }
    if (mSelector == 1668049764)
      return 4;
    if (mSelector != 1668575852)
    {
      v13 = 1684236338;
      goto LABEL_75;
    }
    v29 = ((uint64_t (*)(HALS_Device ***))(*this)[78])(this);
    return (4 * v29);
  }
  if (mSelector > 1735356004)
  {
    if (mSelector > 1751737453)
    {
      if (mSelector == 1751737454)
        return 4;
      if (mSelector != 1768124270)
      {
        v13 = 1768777573;
        goto LABEL_75;
      }
      return v10;
    }
    if (mSelector == 1735356005 || mSelector == 1751412337)
      return 4;
    v13 = 1751413616;
LABEL_75:
    if (mSelector != v13)
      return HALS_Object::GetPropertyDataSize((uint64_t)this, (uint64_t)a2, (int *)a3);
    return v10;
  }
  if (mSelector <= 1685278560)
  {
    if (mSelector == 1684500589)
    {
      v24 = AMCP::Feature_Flags::allow_adm_dsp_graph_parameters(0, a2);
      if ((v24 & 1) == 0)
      {
        v44[0] = 0;
        v44[1] = 0;
        HALS_System::GetInstance(buf, 0, v44);
        if (g_static_start_options != 1)
        {
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v44);
          return 4;
        }
      }
      HasProperty = HALS_Device_HostedDSP::HasProperty(this[76], a3, a6, v23);
      if ((v24 & 1) != 0)
      {
        if (HasProperty < 0x100u)
          return 4;
      }
      else
      {
        v32 = HasProperty;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v44);
        if (v32 < 0x100)
          return 4;
      }
      return HALS_Device_HostedDSP::GetPropertyDataSize(this[76], (uint64_t)a3, a6, v26, v27, v28);
    }
    if (mSelector != 1684500594)
    {
      v13 = 1685089383;
      goto LABEL_75;
    }
    if (!a5)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "HALS_Device.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3252;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyDataSize: inQualifierData is nullptr for kAudioDevicePropertyDSPGraphProperty", buf, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69A1B30;
      exception[2] = 1852797029;
    }
    if ((_DWORD)a4 != 4)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "HALS_Device.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3254;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyDataSize: incorrect inQualifierDataSize for kAudioDevicePropertyDSPGraphProperty", buf, 0x12u);
      }
      v34 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v34 = &off_1E69A1B30;
      v34[2] = 1852797029;
    }
    v20 = a3->mScope;
    if (v20 != 1768845428 && v20 != 1869968496)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "HALS_Device.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3256;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyDataSize: incorrect inAddress.mScope for kAudioDevicePropertyDSPGraphProperty", buf, 0x12u);
      }
      v36 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v36 = &off_1E69A1B30;
      v36[2] = 1852797029;
    }
    v21 = *a5;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2000000000;
    LOBYTE(v52) = 0;
    v40 = 0;
    v41 = &v40;
    v42 = 0x2000000000;
    v43 = 0;
    v37[0] = MEMORY[0x1E0C809B0];
    v37[1] = 0x40000000;
    v37[2] = ___ZNK11HALS_Device19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_108;
    v37[3] = &unk_1E699DBF0;
    v39 = v20 == 1768845428;
    v37[6] = this;
    v37[7] = a3;
    v38 = v21;
    v37[4] = buf;
    v37[5] = &v40;
    v22 = (HALB_Mutex *)((uint64_t (*)(HALS_Device ***))(*this)[7])(this);
    HALB_CommandGate::ExecuteCommand(v22, (uint64_t)v37);
    if (!*(_BYTE *)(*(_QWORD *)&buf[8] + 24))
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v47 = 136315394;
        v48 = "HALS_Device.cpp";
        v49 = 1024;
        v50 = 3274;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  GetStreamDSPPropertyInfo failure", v47, 0x12u);
      }
      v35 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v35 = &off_1E69A1B30;
      v35[2] = 1852797029;
    }
    v10 = *((unsigned int *)v41 + 6);
    _Block_object_dispose(&v40, 8);
    goto LABEL_94;
  }
  if ((mSelector - 1685278561) < 2)
    return v10;
  if (mSelector == 1685414763)
    return 16;
  v11 = 1735354734;
LABEL_79:
  if (mSelector == v11)
    return 4;
  return HALS_Object::GetPropertyDataSize((uint64_t)this, (uint64_t)a2, (int *)a3);
}

void sub_1B5C69ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void HALS_Device::GetPropertyData(HALS_Device *this, const BOOL *a2, AudioObjectPropertyAddress *a3, AudioObjectPropertyAddress *a4, unsigned int *a5, unsigned int *a6, void *a7, int *a8, HALS_Client *a9)
{
  signed int mSelector;
  AudioObjectPropertyScope mScope;
  HALB_Mutex *v17;
  float v18;
  int v19;
  const char *v20;
  const char *v21;
  uint64_t (***v22)();
  int v23;
  HALB_Mutex *v24;
  _DWORD *v25;
  _DWORD *v26;
  unsigned int TotalNumberChannelsForClient;
  AudioObjectPropertyScope v28;
  const __CFString *v29;
  _DWORD *v30;
  HALB_Mutex *v31;
  HALB_Mutex *v32;
  unsigned int v33;
  int v34;
  HALB_Mutex *v35;
  const __CFString *v36;
  unsigned int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int *v44;
  AudioObjectPropertyScope v45;
  const __CFString *v46;
  unsigned int v47;
  unsigned int NumberChannelDescriptions;
  uint64_t v49;
  unsigned int *v50;
  void *v51;
  int v52;
  BOOL v53;
  _DWORD *v54;
  HALB_Mutex *v55;
  HALS_Client *v56;
  char v57;
  unsigned __int16 HasProperty;
  HALB_Mutex *v59;
  HALB_Mutex *v60;
  AMCP::Log::Scope_Registry *v61;
  NSObject *v62;
  _DWORD *v63;
  _DWORD *v64;
  _DWORD *v65;
  unsigned int v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int v73;
  int v74;
  HALB_Mutex *v75;
  _DWORD *v76;
  HALB_Mutex *v77;
  HALB_Mutex *v78;
  _DWORD *v79;
  HALB_Mutex *v80;
  _DWORD *v81;
  HALB_Mutex *v82;
  HALB_Mutex *v83;
  int v84;
  HALB_Mutex *v85;
  HALB_Mutex *v86;
  int v87;
  int v88;
  unsigned int v89;
  uint64_t v90;
  HALB_Mutex *v91;
  unsigned __int8 v92;
  uint64_t v93;
  HALB_Mutex *v94;
  unsigned int v95;
  uint64_t v96;
  AMCP::Log::Scope_Registry *NumberStreamsExcludingReferenceStreams;
  unsigned __int8 v99;
  HALB_Mutex *v100;
  HALB_Mutex *v101;
  const __CFString *v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  AudioChannelLayout *v106;
  AudioObjectPropertyScope v107;
  int v108;
  HALB_Mutex *v109;
  _DWORD *v110;
  _opaque_pthread_t *v111;
  mach_port_t v112;
  int v113;
  int v114;
  uint64_t v115;
  _QWORD *v116;
  NSObject *v117;
  _opaque_pthread_t *v118;
  mach_port_t v119;
  void *v120;
  NSObject *v121;
  _opaque_pthread_t *v122;
  mach_port_t v123;
  void *v124;
  NSObject *v125;
  _opaque_pthread_t *v126;
  mach_port_t v127;
  void *v128;
  NSObject *v129;
  _opaque_pthread_t *v130;
  mach_port_t v131;
  void *v132;
  NSObject *v133;
  _opaque_pthread_t *v134;
  mach_port_t v135;
  void *v136;
  NSObject *v137;
  _opaque_pthread_t *v138;
  mach_port_t v139;
  void *v140;
  NSObject *v141;
  _opaque_pthread_t *v142;
  mach_port_t v143;
  void *v144;
  NSObject *v145;
  _opaque_pthread_t *v146;
  mach_port_t v147;
  void *v148;
  NSObject *v149;
  _opaque_pthread_t *v150;
  mach_port_t v151;
  void *v152;
  NSObject *v153;
  _opaque_pthread_t *v154;
  mach_port_t v155;
  void *v156;
  NSObject *v157;
  _opaque_pthread_t *v158;
  mach_port_t v159;
  void *v160;
  NSObject *v161;
  _opaque_pthread_t *v162;
  mach_port_t v163;
  void *v164;
  NSObject *v165;
  _opaque_pthread_t *v166;
  mach_port_t v167;
  void *v168;
  NSObject *v169;
  _opaque_pthread_t *v170;
  mach_port_t v171;
  void *v172;
  NSObject *v173;
  _opaque_pthread_t *v174;
  mach_port_t v175;
  void *v176;
  NSObject *v177;
  _opaque_pthread_t *v178;
  mach_port_t v179;
  void *v180;
  NSObject *v181;
  _opaque_pthread_t *v182;
  mach_port_t v183;
  void *v184;
  NSObject *v185;
  _opaque_pthread_t *v186;
  mach_port_t v187;
  void *v188;
  NSObject *v189;
  _opaque_pthread_t *v190;
  mach_port_t v191;
  void *v192;
  _DWORD *v193;
  _DWORD *v194;
  _DWORD *v195;
  _DWORD *v196;
  _DWORD *v197;
  _DWORD *v198;
  _DWORD *v199;
  _DWORD *v200;
  _DWORD *v201;
  _DWORD *v202;
  _DWORD *v203;
  _DWORD *v204;
  _DWORD *v205;
  _DWORD *v206;
  _DWORD *v207;
  _DWORD *v208;
  _DWORD *exception;
  _DWORD *v210;
  _DWORD *v211;
  _DWORD *v212;
  _DWORD *v213;
  _DWORD *v214;
  _DWORD *v215;
  _DWORD *v216;
  _DWORD *v217;
  _DWORD *v218;
  _DWORD *v219;
  _DWORD *v220;
  _DWORD *v221;
  _DWORD *v222;
  _DWORD *v223;
  _DWORD *v224;
  _DWORD *v225;
  _DWORD *v226;
  _DWORD *v227;
  _DWORD *v228;
  HALS_Client *v229;
  _QWORD v231[8];
  _QWORD v232[11];
  _QWORD v233[8];
  BOOL v234;
  _QWORD v235[8];
  BOOL v236;
  _QWORD v237[8];
  BOOL v238;
  __int128 v239;
  uint64_t v240;
  uint64_t (**v241)();
  __int128 v242;
  uint64_t v243;
  void (**v244)(CAException *__hidden);
  int v245;
  char v246;
  _QWORD v247[8];
  int v248;
  BOOL v249;
  _QWORD v250[9];
  int v251;
  BOOL v252;
  _QWORD v253[8];
  int v254;
  BOOL v255;
  _QWORD v256[8];
  int v257;
  BOOL v258;
  uint64_t v259[2];
  _QWORD v260[6];
  _QWORD v261[7];
  _QWORD v262[7];
  _QWORD v263[8];
  _QWORD v264[8];
  _QWORD v265[7];
  uint64_t v266[2];
  uint64_t v267[2];
  _QWORD v268[7];
  int v269;
  int v270;
  _QWORD v271[9];
  int v272;
  _QWORD v273[6];
  _QWORD v274[7];
  int v275;
  _QWORD v276[7];
  _QWORD v277[9];
  unsigned int v278;
  unsigned int v279;
  _BYTE v280[24];
  uint64_t v281;
  __int128 v282;
  _QWORD *v283;
  _BYTE buf[24];
  _BYTE v285[24];
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;

  v288 = *MEMORY[0x1E0C80C00];
  mSelector = a3->mSelector;
  mScope = a3->mScope;
  if ((int)a3->mSelector <= 1818454125)
  {
    if (mSelector <= 1684498543)
    {
      if (mSelector <= 1668049763)
      {
        if (mSelector > 1634758773)
        {
          switch(mSelector)
          {
            case 1634758774:
              if (a4 <= 3)
              {
                if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136315394;
                  *(_QWORD *)&buf[4] = "HALS_Device.cpp";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 3815;
                  _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: bad property data size for kAudioDevicePropertyProcessVolumeScalar", buf, 0x12u);
                }
                exception = __cxa_allocate_exception(0x10uLL);
                *(_QWORD *)exception = &off_1E69A1B30;
                exception[2] = 561211770;
              }
              v264[0] = MEMORY[0x1E0C809B0];
              v264[1] = 0x40000000;
              v264[2] = ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_135;
              v264[3] = &__block_descriptor_tmp_136_14353;
              v264[4] = this;
              v264[5] = a6;
              v264[6] = a9;
              v264[7] = a3;
              v77 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 56))(this);
              HALB_CommandGate::ExecuteCommand(v77, (uint64_t)v264);
              goto LABEL_255;
            case 1667330160:
              if (a4 <= 7)
              {
                if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136315394;
                  *(_QWORD *)&buf[4] = "HALS_Device.cpp";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 3413;
                  _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: bad property data size for kAudioDevicePropertyConfigurationApplication", buf, 0x12u);
                }
                v205 = __cxa_allocate_exception(0x10uLL);
                *(_QWORD *)v205 = &off_1E69A1B30;
                v205[2] = 561211770;
              }
              *(_QWORD *)a6 = CFRetain(CFSTR("com.apple.audio.AudioMIDISetup"));
              break;
            case 1667523955:
              if (a4 <= 7)
              {
                if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136315394;
                  *(_QWORD *)&buf[4] = "HALS_Device.cpp";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 3797;
                  _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: bad property data size for kAudioDevicePropertyClientDescription", buf, 0x12u);
                }
                v197 = __cxa_allocate_exception(0x10uLL);
                *(_QWORD *)v197 = &off_1E69A1B30;
                v197[2] = 561211770;
              }
              v265[0] = MEMORY[0x1E0C809B0];
              v265[1] = 0x40000000;
              v265[2] = ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_133;
              v265[3] = &__block_descriptor_tmp_134_14350;
              v265[4] = this;
              v265[5] = a6;
              v265[6] = a9;
              v32 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 56))(this);
              HALB_CommandGate::ExecuteCommand(v32, (uint64_t)v265);
              break;
            default:
              goto LABEL_258;
          }
        }
        else
        {
          if (mSelector == 1634429294)
          {
            if (a4 <= 3)
            {
              if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = "HALS_Device.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 3460;
                _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: bad property data size for kAudioDevicePropertyRelatedDevices", buf, 0x12u);
              }
              v207 = __cxa_allocate_exception(0x10uLL);
              *(_QWORD *)v207 = &off_1E69A1B30;
              v207[2] = 561211770;
            }
            v73 = *((_DWORD *)this + 4);
            goto LABEL_254;
          }
          if (mSelector != 1634755428)
          {
            if (mSelector == 1634758765)
            {
              if (a4 <= 3)
              {
                if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136315394;
                  *(_QWORD *)&buf[4] = "HALS_Device.cpp";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 3824;
                  _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: bad property data size for kAudioDevicePropertyProcessMute", buf, 0x12u);
                }
                v194 = __cxa_allocate_exception(0x10uLL);
                *(_QWORD *)v194 = &off_1E69A1B30;
                v194[2] = 561211770;
              }
              *(_QWORD *)v280 = 0;
              *(_QWORD *)&v280[8] = v280;
              *(_QWORD *)&v280[16] = 0x2000000000;
              LODWORD(v281) = 1065353216;
              v263[0] = MEMORY[0x1E0C809B0];
              v263[1] = 0x40000000;
              v263[2] = ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_137;
              v263[3] = &unk_1E699DD40;
              v263[5] = this;
              v263[4] = v280;
              v263[6] = a9;
              v263[7] = a3;
              v17 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 56))(this);
              HALB_CommandGate::ExecuteCommand(v17, (uint64_t)v263);
              v18 = *(float *)(*(_QWORD *)&v280[8] + 24);
              *a6 = v18 == 0.0;
              if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136316162;
                v19 = *((_DWORD *)this + 4);
                if (a3->mScope == 1768845428)
                  v20 = "input";
                else
                  v20 = "output";
                v21 = "on";
                *(_QWORD *)&buf[4] = "HALS_Device.cpp";
                *(_DWORD *)&buf[14] = 3828;
                *(_WORD *)&buf[12] = 1024;
                *(_WORD *)&buf[18] = 1024;
                if (v18 != 0.0)
                  v21 = "off";
                *(_DWORD *)&buf[20] = v19;
                *(_WORD *)v285 = 2080;
                *(_QWORD *)&v285[2] = v20;
                *(_WORD *)&v285[10] = 2080;
                *(_QWORD *)&v285[12] = v21;
                _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_Device::_GetPropertyData: Object ID: %d getting process %s mute: %s", buf, 0x2Cu);
              }
              *a5 = 4;
              v22 = (uint64_t (***)())v280;
              goto LABEL_246;
            }
            goto LABEL_258;
          }
          if (a4 <= 7)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_Device.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 3868;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: bad property data size for kAudioDevicePropertyClockDevice", buf, 0x12u);
            }
            v204 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v204 = &off_1E69A1B30;
            v204[2] = 561211770;
          }
          v261[0] = MEMORY[0x1E0C809B0];
          v261[1] = 0x40000000;
          v261[2] = ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_145;
          v261[3] = &__block_descriptor_tmp_146_14360;
          v261[4] = this;
          v261[5] = a9;
          v261[6] = a6;
          v55 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v55, (uint64_t)v261);
        }
LABEL_251:
        v33 = 8;
LABEL_256:
        *a5 = v33;
        return;
      }
      if (mSelector > 1684301170)
      {
        if (mSelector != 1684301171)
        {
          if (mSelector != 1684434036)
          {
            if (mSelector != 1684498541)
              goto LABEL_258;
            if (!a8)
            {
              if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = "HALS_Device.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 3931;
                _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: inQualifierData is nullptr for kAudioDevicePropertyDSPGraphParameter", buf, 0x12u);
              }
              v199 = __cxa_allocate_exception(0x10uLL);
              *(_QWORD *)v199 = &off_1E69A1B30;
              v199[2] = 1852797029;
            }
            if ((_DWORD)a7 != 4)
            {
              if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = "HALS_Device.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 3933;
                _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: incorrect inQualifierDataSize for kAudioDevicePropertyDSPGraphParameter", buf, 0x12u);
              }
              v220 = __cxa_allocate_exception(0x10uLL);
              *(_QWORD *)v220 = &off_1E69A1B30;
              v220[2] = 1852797029;
            }
            if (mScope != 1768845428 && mScope != 1869968496)
            {
              if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = "HALS_Device.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 3935;
                _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: incorrect inAddress.mScope for kAudioDevicePropertyDSPGraphParameter", buf, 0x12u);
              }
              v226 = __cxa_allocate_exception(0x10uLL);
              *(_QWORD *)v226 = &off_1E69A1B30;
              v226[2] = 1852797029;
            }
            v34 = *a8;
            v253[0] = MEMORY[0x1E0C809B0];
            v253[1] = 0x40000000;
            v253[2] = ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_151;
            v253[3] = &__block_descriptor_tmp_152_14371;
            v255 = mScope == 1768845428;
            v253[4] = this;
            v253[5] = a3;
            v254 = v34;
            v253[6] = a6;
            v253[7] = a5;
            v35 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 56))(this);
            HALB_CommandGate::ExecuteCommand(v35, (uint64_t)v253);
            return;
          }
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_Device.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 3506;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: bad property data size for kAudioDevicePropertyDeviceCanBeDefaultDevice", buf, 0x12u);
            }
            v63 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v63 = &off_1E69A1B30;
            v63[2] = 561211770;
          }
          goto LABEL_253;
        }
        if (a4 <= 7)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_Device.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 3788;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: bad property data size for kAudioDevicePropertyDeviceDescription", buf, 0x12u);
          }
          v79 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v79 = &off_1E69A1B30;
          v79[2] = 561211770;
        }
LABEL_250:
        *(_QWORD *)a6 = 0;
        goto LABEL_251;
      }
      if (mSelector == 1668049764)
      {
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_Device.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 3469;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: bad property data size for kAudioDevicePropertyClockDomain", buf, 0x12u);
          }
          v76 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v76 = &off_1E69A1B30;
          v76[2] = 561211770;
        }
        goto LABEL_207;
      }
      if (mSelector == 1668575852)
      {
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        *(_QWORD *)&buf[16] = 0x2000000000;
        *(_DWORD *)v285 = 0;
        v274[0] = MEMORY[0x1E0C809B0];
        v274[1] = 0x40000000;
        v274[2] = ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_117;
        v274[3] = &unk_1E699DC68;
        v275 = (int)a4;
        v274[6] = a6;
        v274[5] = this;
        v274[4] = buf;
        v59 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v59, (uint64_t)v274);
        goto LABEL_209;
      }
      if (mSelector != 1684236338)
        goto LABEL_258;
      if (a4 <= 7)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_Device.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3641;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: bad property data size for kAudioDevicePropertyPreferredChannelsForStereo", buf, 0x12u);
        }
        v196 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v196 = &off_1E69A1B30;
        v196[2] = 561211770;
      }
      v267[1] = 0;
      v267[0] = 0;
      HALS_System::GetInstance(v280, 0, v267);
      *(_QWORD *)buf = HALS_SettingsManager::ReadSetting(*(HALS_SettingsManager **)(*(_QWORD *)v280 + 1408), *((const __CFString **)this + 14));
      *(_WORD *)&buf[8] = 1;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v280);
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v267);
      *(_QWORD *)v280 = 0x200000001;
      TotalNumberChannelsForClient = HALS_Device::GetTotalNumberChannelsForClient(this, a3->mScope == 1768845428, a9);
      v28 = a3->mScope;
      if (v28 == 1869968496)
      {
        CACFDictionary::GetUInt32(*(uint64_t *)buf, CFSTR("output.stereo.left"), (unsigned int *)v280);
        v29 = CFSTR("output.stereo.right");
      }
      else
      {
        if (v28 != 1768845428)
        {
          v105 = 1;
          v104 = 2;
          goto LABEL_268;
        }
        CACFDictionary::GetUInt32(*(uint64_t *)buf, CFSTR("input.stereo.left"), (unsigned int *)v280);
        v29 = CFSTR("input.stereo.right");
      }
      CACFDictionary::GetUInt32(*(uint64_t *)buf, v29, (unsigned int *)&v280[4]);
      v105 = *(_DWORD *)v280;
      v104 = *(_DWORD *)&v280[4];
LABEL_268:
      if (v105 > TotalNumberChannelsForClient)
        v105 = 1;
      *a6 = v105;
      if (v104 > TotalNumberChannelsForClient)
      {
        if (TotalNumberChannelsForClient < 2)
          v104 = 1;
        else
          v104 = 2;
      }
      a6[1] = v104;
      *a5 = 8;
      goto LABEL_284;
    }
    if (mSelector > 1735354733)
    {
      if (mSelector > 1751413615)
      {
        if (mSelector == 1751413616)
        {
          if (a4 <= 7)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_Device.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 3882;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: bad property data size for kAudioDevicePropertyDSPDescription", buf, 0x12u);
            }
            v210 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v210 = &off_1E69A1B30;
            v210[2] = 561211770;
          }
          v260[0] = MEMORY[0x1E0C809B0];
          v260[1] = 0x40000000;
          v260[2] = ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_147;
          v260[3] = &__block_descriptor_tmp_148_14362;
          v260[4] = this;
          v260[5] = a6;
          v80 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v80, (uint64_t)v260);
          goto LABEL_251;
        }
        if (mSelector != 1751737454)
        {
          if (mSelector != 1768907636)
            goto LABEL_258;
          if (a4 <= 7)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_Device.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 3779;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: bad property data size for kAudioDevicePropertyIOContextDescription", buf, 0x12u);
            }
            v200 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v200 = &off_1E69A1B30;
            v200[2] = 561211770;
          }
          *(_QWORD *)a6 = HALS_Device::CreateIOContextDescription(this, a9);
          goto LABEL_251;
        }
      }
      else
      {
        if (mSelector == 1735354734 || mSelector == 1735356005)
        {
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_Device.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 3488;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: bad property data size for kAudioDevicePropertyDeviceIsRunning", buf, 0x12u);
            }
            v193 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v193 = &off_1E69A1B30;
            v193[2] = 561211770;
          }
          *a6 = 0;
          goto LABEL_255;
        }
        if (mSelector != 1751412337)
          goto LABEL_258;
      }
      if (a4 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_Device.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3770;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: bad property data size for kAudioDevicePropertyIsHidden", buf, 0x12u);
        }
        v54 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v54 = &off_1E69A1B30;
        v54[2] = 561211770;
      }
      goto LABEL_207;
    }
    if (mSelector > 1685278560)
    {
      if (mSelector != 1685278561)
      {
        if (mSelector == 1685278562)
        {
          if (!a6)
          {
            AMCP::Log::Scope_Registry::get(this);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
            v117 = **(NSObject ***)buf;
            std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
            if (os_log_type_enabled(v117, OS_LOG_TYPE_ERROR))
            {
              v118 = pthread_self();
              v119 = pthread_mach_thread_np(v118);
              *(_DWORD *)buf = 67109890;
              *(_DWORD *)&buf[4] = v119;
              *(_WORD *)&buf[8] = 2080;
              *(_QWORD *)&buf[10] = "HALS_Device.cpp";
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = 4112;
              *(_WORD *)v285 = 2080;
              *(_QWORD *)&v285[2] = "outData == nullptr";
              _os_log_error_impl(&dword_1B57BA000, v117, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::GetPropertyData: outData is nullptr for kAudioDevicePropertyDSPOffloadBypass", buf, 0x22u);
            }
            AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v246);
            v120 = __cxa_allocate_exception(0x40uLL);
            v244 = &off_1E69A1B30;
            v245 = 1852797029;
            *(_DWORD *)&v280[8] = 1852797029;
            v282 = 0uLL;
            LODWORD(v283) = -1;
            *(_QWORD *)v280 = &off_1E699E510;
            *(_QWORD *)&v280[16] = &unk_1E699E538;
            v281 = 0;
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)v280);
            *(_QWORD *)&v285[8] = "virtual void HALS_Device::GetPropertyData(AudioObjectID, const AudioObjectPropertyAddr"
                                  "ess &, UInt32, UInt32 &, void *, UInt32, const void *, HALS_Client *) const";
            *(_QWORD *)&v285[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
            LODWORD(v286) = 4112;
            applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v239);
            v242 = v239;
            v241 = off_1E69A20A0;
            v243 = v240;
            v239 = 0uLL;
            v240 = 0;
            boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>((uint64_t)buf, (uint64_t)&v241);
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)v120, (uint64_t)buf);
          }
          if ((_DWORD)a4 != 8)
          {
            AMCP::Log::Scope_Registry::get(this);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
            v137 = **(NSObject ***)buf;
            std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
            if (os_log_type_enabled(v137, OS_LOG_TYPE_ERROR))
            {
              v138 = pthread_self();
              v139 = pthread_mach_thread_np(v138);
              *(_DWORD *)buf = 67109890;
              *(_DWORD *)&buf[4] = v139;
              *(_WORD *)&buf[8] = 2080;
              *(_QWORD *)&buf[10] = "HALS_Device.cpp";
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = 4113;
              *(_WORD *)v285 = 2080;
              *(_QWORD *)&v285[2] = "inDataSize != sizeof(CFDictionaryRef)";
              _os_log_error_impl(&dword_1B57BA000, v137, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::GetPropertyData: inDataSize is not CFDictionaryRef for kAudioDevicePropertyDSPOffloadBypass", buf, 0x22u);
            }
            AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v246);
            v140 = __cxa_allocate_exception(0x40uLL);
            v244 = &off_1E69A1B30;
            v245 = 1852797029;
            *(_DWORD *)&v280[8] = 1852797029;
            v282 = 0uLL;
            LODWORD(v283) = -1;
            *(_QWORD *)v280 = &off_1E699E510;
            *(_QWORD *)&v280[16] = &unk_1E699E538;
            v281 = 0;
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)v280);
            *(_QWORD *)&v285[8] = "virtual void HALS_Device::GetPropertyData(AudioObjectID, const AudioObjectPropertyAddr"
                                  "ess &, UInt32, UInt32 &, void *, UInt32, const void *, HALS_Client *) const";
            *(_QWORD *)&v285[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
            LODWORD(v286) = 4113;
            applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v239);
            v242 = v239;
            v241 = off_1E69A20A0;
            v243 = v240;
            v239 = 0uLL;
            v240 = 0;
            boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>((uint64_t)buf, (uint64_t)&v241);
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)v140, (uint64_t)buf);
          }
          if (!a9 && !*((_BYTE *)this + 616))
          {
            AMCP::Log::Scope_Registry::get(this);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
            v189 = **(NSObject ***)buf;
            std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
            if (os_log_type_enabled(v189, OS_LOG_TYPE_ERROR))
            {
              v190 = pthread_self();
              v191 = pthread_mach_thread_np(v190);
              *(_DWORD *)buf = 67109890;
              *(_DWORD *)&buf[4] = v191;
              *(_WORD *)&buf[8] = 2080;
              *(_QWORD *)&buf[10] = "HALS_Device.cpp";
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = 4114;
              *(_WORD *)v285 = 2080;
              *(_QWORD *)&v285[2] = "inClient == nullptr && !mClientDSPInfo.allows_null_client()";
              _os_log_error_impl(&dword_1B57BA000, v189, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::GetPropertyData: inClient is null for kAudioDevicePropertyDSPOffloadBypass", buf, 0x22u);
            }
            AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v246);
            v192 = __cxa_allocate_exception(0x40uLL);
            v244 = &off_1E69A1B30;
            v245 = 1852797029;
            *(_DWORD *)&v280[8] = 1852797029;
            v282 = 0uLL;
            LODWORD(v283) = -1;
            *(_QWORD *)v280 = &off_1E699E510;
            *(_QWORD *)&v280[16] = &unk_1E699E538;
            v281 = 0;
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)v280);
            *(_QWORD *)&v285[8] = "virtual void HALS_Device::GetPropertyData(AudioObjectID, const AudioObjectPropertyAddr"
                                  "ess &, UInt32, UInt32 &, void *, UInt32, const void *, HALS_Client *) const";
            *(_QWORD *)&v285[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
            LODWORD(v286) = 4114;
            applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v239);
            v242 = v239;
            v241 = off_1E69A20A0;
            v243 = v240;
            v239 = 0uLL;
            v240 = 0;
            boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>((uint64_t)buf, (uint64_t)&v241);
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)v192, (uint64_t)buf);
          }
          *a5 = 0;
          v241 = 0;
          *(_QWORD *)&v242 = &v241;
          *((_QWORD *)&v242 + 1) = 0x2000000000;
          v243 = 0;
          *(_QWORD *)buf = 0;
          *(_QWORD *)&buf[8] = buf;
          *(_QWORD *)&buf[16] = 0x4002000000;
          *(_QWORD *)v285 = __Block_byref_object_copy__175;
          *(_QWORD *)&v285[8] = __Block_byref_object_dispose__176;
          v286 = 0;
          v287 = 0;
          *(_QWORD *)&v285[16] = 0;
          v232[0] = MEMORY[0x1E0C809B0];
          v232[1] = 0x40000000;
          v232[2] = ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_177;
          v232[3] = &unk_1E699DF38;
          v232[6] = this;
          v232[7] = a3;
          v232[8] = a9;
          v232[9] = a6;
          v232[10] = a5;
          v232[4] = &v241;
          v232[5] = buf;
          v60 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v60, (uint64_t)v232);
          AMCP::Log::Scope_Registry::get(v61);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v280, "com.apple.coreaudio", "AMCP");
          v62 = **(NSObject ***)v280;
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v280);
          if (os_log_type_enabled(v62, OS_LOG_TYPE_DEBUG))
          {
            v111 = pthread_self();
            v112 = pthread_mach_thread_np(v111);
            if (a9)
              v113 = *((_DWORD *)a9 + 4);
            else
              v113 = 0;
            v114 = *((_DWORD *)this + 4);
            v115 = *(_QWORD *)(v242 + 24);
            v116 = (_QWORD *)(*(_QWORD *)&buf[8] + 40);
            if (*(char *)(*(_QWORD *)&buf[8] + 63) < 0)
              v116 = (_QWORD *)*v116;
            *(_DWORD *)v280 = 67110658;
            *(_DWORD *)&v280[4] = v112;
            *(_WORD *)&v280[8] = 2080;
            *(_QWORD *)&v280[10] = "HALS_Device.cpp";
            *(_WORD *)&v280[18] = 1024;
            *(_DWORD *)&v280[20] = 4148;
            LOWORD(v281) = 1024;
            *(_DWORD *)((char *)&v281 + 2) = v113;
            HIWORD(v281) = 1024;
            LODWORD(v282) = v114;
            WORD2(v282) = 2048;
            *(_QWORD *)((char *)&v282 + 6) = v115;
            HIWORD(v282) = 2080;
            v283 = v116;
            _os_log_debug_impl(&dword_1B57BA000, v62, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d [hal_dsp][offloads][bypass] (Client ID: %d) (Device ID: %d) (Storage: %p) get client bypassed offload %s", v280, 0x38u);
          }
          _Block_object_dispose(buf, 8);
          if (SHIBYTE(v287) < 0)
            operator delete(*(void **)&v285[16]);
          v22 = &v241;
          goto LABEL_246;
        }
        if (mSelector == 1685414763)
        {
          if (a4 <= 0xF)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_Device.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 3836;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: bad property data size for kAudioDevicePropertyProcessDuck", buf, 0x12u);
            }
            v198 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v198 = &off_1E69A1B30;
            v198[2] = 561211770;
          }
          *(_QWORD *)a6 = 0;
          *((_QWORD *)a6 + 1) = 0;
          v33 = 16;
          goto LABEL_256;
        }
        goto LABEL_258;
      }
      if (!a6)
      {
        AMCP::Log::Scope_Registry::get(this);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v121 = **(NSObject ***)buf;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        if (os_log_type_enabled(v121, OS_LOG_TYPE_ERROR))
        {
          v122 = pthread_self();
          v123 = pthread_mach_thread_np(v122);
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = v123;
          *(_WORD *)&buf[8] = 2080;
          *(_QWORD *)&buf[10] = "HALS_Device.cpp";
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = 4154;
          *(_WORD *)v285 = 2080;
          *(_QWORD *)&v285[2] = "outData == nullptr";
          _os_log_error_impl(&dword_1B57BA000, v121, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::GetPropertyData: outData is nullptr for kAudioDevicePropertyDSPOffloadAvailable", buf, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v246);
        v124 = __cxa_allocate_exception(0x40uLL);
        v244 = &off_1E69A1B30;
        v245 = 1852797029;
        *(_DWORD *)&v280[8] = 1852797029;
        v282 = 0uLL;
        LODWORD(v283) = -1;
        *(_QWORD *)v280 = &off_1E699E510;
        *(_QWORD *)&v280[16] = &unk_1E699E538;
        v281 = 0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)v280);
        *(_QWORD *)&v285[8] = "virtual void HALS_Device::GetPropertyData(AudioObjectID, const AudioObjectPropertyAddress "
                              "&, UInt32, UInt32 &, void *, UInt32, const void *, HALS_Client *) const";
        *(_QWORD *)&v285[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
        LODWORD(v286) = 4154;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v239);
        v242 = v239;
        v241 = off_1E69A20A0;
        v243 = v240;
        v239 = 0uLL;
        v240 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>((uint64_t)buf, (uint64_t)&v241);
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)v124, (uint64_t)buf);
      }
      if ((_DWORD)a4 != 8)
      {
        AMCP::Log::Scope_Registry::get(this);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v141 = **(NSObject ***)buf;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        if (os_log_type_enabled(v141, OS_LOG_TYPE_ERROR))
        {
          v142 = pthread_self();
          v143 = pthread_mach_thread_np(v142);
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = v143;
          *(_WORD *)&buf[8] = 2080;
          *(_QWORD *)&buf[10] = "HALS_Device.cpp";
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = 4155;
          *(_WORD *)v285 = 2080;
          *(_QWORD *)&v285[2] = "inDataSize != sizeof(CFDictionaryRef)";
          _os_log_error_impl(&dword_1B57BA000, v141, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::GetPropertyData: inDataSize is not CFDictionaryRef for kAudioDevicePropertyDSPOffloadAvailable", buf, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v246);
        v144 = __cxa_allocate_exception(0x40uLL);
        v244 = &off_1E69A1B30;
        v245 = 1852797029;
        *(_DWORD *)&v280[8] = 1852797029;
        v282 = 0uLL;
        LODWORD(v283) = -1;
        *(_QWORD *)v280 = &off_1E699E510;
        *(_QWORD *)&v280[16] = &unk_1E699E538;
        v281 = 0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)v280);
        *(_QWORD *)&v285[8] = "virtual void HALS_Device::GetPropertyData(AudioObjectID, const AudioObjectPropertyAddress "
                              "&, UInt32, UInt32 &, void *, UInt32, const void *, HALS_Client *) const";
        *(_QWORD *)&v285[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
        LODWORD(v286) = 4155;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v239);
        v242 = v239;
        v241 = off_1E69A20A0;
        v243 = v240;
        v239 = 0uLL;
        v240 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>((uint64_t)buf, (uint64_t)&v241);
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)v144, (uint64_t)buf);
      }
      *a5 = 0;
      v231[0] = MEMORY[0x1E0C809B0];
      v231[1] = 0x40000000;
      v231[2] = ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_179;
      v231[3] = &__block_descriptor_tmp_180;
      v231[4] = this;
      v231[5] = a3;
      v231[6] = a6;
      v231[7] = a5;
      v78 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v78, (uint64_t)v231);
      return;
    }
    if (mSelector == 1684498544)
    {
      if (!a8)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_Device.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3980;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: inQualifierData is nullptr for kAudioDevicePropertyDSPGraphProperty", buf, 0x12u);
        }
        v208 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v208 = &off_1E69A1B30;
        v208[2] = 1852797029;
      }
      if ((_DWORD)a7 != 4)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_Device.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3982;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: incorrect inQualifierDataSize for kAudioDevicePropertyDSPGraphProperty", buf, 0x12u);
        }
        v221 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v221 = &off_1E69A1B30;
        v221[2] = 1852797029;
      }
      if (mScope != 1768845428 && mScope != 1869968496)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_Device.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3984;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: incorrect inAddress.mScope for kAudioDevicePropertyDSPGraphProperty", buf, 0x12u);
        }
        v227 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v227 = &off_1E69A1B30;
        v227[2] = 1852797029;
      }
      v74 = *a8;
      v247[0] = MEMORY[0x1E0C809B0];
      v247[1] = 0x40000000;
      v247[2] = ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_155;
      v247[3] = &__block_descriptor_tmp_156;
      v249 = mScope == 1768845428;
      v247[4] = this;
      v247[5] = a3;
      v248 = v74;
      v247[6] = a6;
      v247[7] = a5;
      v75 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v75, (uint64_t)v247);
      return;
    }
    if (mSelector != 1684500589)
    {
      if (mSelector != 1684500594)
        goto LABEL_258;
      if (!a8)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_Device.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3954;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: inQualifierData is nullptr for kAudioDevicePropertyDSPGraphProperty", buf, 0x12u);
        }
        v195 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v195 = &off_1E69A1B30;
        v195[2] = 1852797029;
      }
      if ((_DWORD)a7 != 4)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_Device.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3956;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: incorrect inQualifierDataSize for kAudioDevicePropertyDSPGraphProperty", buf, 0x12u);
        }
        v219 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v219 = &off_1E69A1B30;
        v219[2] = 1852797029;
      }
      if (mScope != 1768845428 && mScope != 1869968496)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_Device.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3958;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: incorrect inAddress.mScope for kAudioDevicePropertyDSPGraphProperty", buf, 0x12u);
        }
        v225 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v225 = &off_1E69A1B30;
        v225[2] = 1852797029;
      }
      v23 = *a8;
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x2000000000;
      v285[0] = 0;
      v250[0] = MEMORY[0x1E0C809B0];
      v250[1] = 0x40000000;
      v250[2] = ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_153;
      v250[3] = &unk_1E699DE18;
      v250[5] = this;
      v250[4] = buf;
      v252 = mScope == 1768845428;
      v251 = v23;
      v250[6] = a3;
      v250[7] = a5;
      v250[8] = a6;
      v24 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v24, (uint64_t)v250);
      if (!*(_BYTE *)(*(_QWORD *)&buf[8] + 24))
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)v280 = 136315394;
          *(_QWORD *)&v280[4] = "HALS_Device.cpp";
          *(_WORD *)&v280[12] = 1024;
          *(_DWORD *)&v280[14] = 3971;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  GetStreamDSPProperty failure", v280, 0x12u);
        }
        v25 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v25 = &off_1E69A1B30;
        v25[2] = 1852797029;
      }
LABEL_245:
      v22 = (uint64_t (***)())buf;
LABEL_246:
      _Block_object_dispose(v22, 8);
      return;
    }
    v57 = AMCP::Feature_Flags::allow_adm_dsp_graph_parameters(0, a2);
    if ((v57 & 1) != 0
      || (v259[1] = 0, v259[0] = 0, HALS_System::GetInstance(&v241, 0, v259), g_static_start_options == 1))
    {
      HasProperty = HALS_Device_HostedDSP::HasProperty(*((HALS_Device ***)this + 76), a3, (const AudioObjectPropertyAddress *)a9, v56);
      if ((v57 & 1) != 0)
      {
        if (HasProperty < 0x100u)
          goto LABEL_274;
LABEL_260:
        HALS_Device_HostedDSP::GetPropertyData(*((HALS_Device_HostedDSP **)this + 76), a3, a4, a5, a6, a7, (uint64_t)a8, a9, v229);
        return;
      }
      v103 = HasProperty;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v241);
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v259);
      if (v103 >= 0x100)
        goto LABEL_260;
    }
    else
    {
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v241);
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v259);
    }
LABEL_274:
    if (!a8)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "HALS_Device.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3903;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: inQualifierData is nullptr for kAudioDevicePropertyDSPGraphParameter", buf, 0x12u);
      }
      v223 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v223 = &off_1E69A1B30;
      v223[2] = 1852797029;
    }
    if ((_DWORD)a7 != 4)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "HALS_Device.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3905;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: incorrect inQualifierDataSize for kAudioDevicePropertyDSPGraphParameter", buf, 0x12u);
      }
      v224 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v224 = &off_1E69A1B30;
      v224[2] = 1852797029;
    }
    v107 = a3->mScope;
    if (v107 != 1768845428 && v107 != 1869968496)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "HALS_Device.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3907;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: incorrect inAddress.mScope for kAudioDevicePropertyDSPGraphParameter", buf, 0x12u);
      }
      v228 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v228 = &off_1E69A1B30;
      v228[2] = 1852797029;
    }
    v108 = *a8;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2000000000;
    v285[0] = 0;
    *a5 = 4;
    v256[0] = MEMORY[0x1E0C809B0];
    v256[1] = 0x40000000;
    v256[2] = ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_149;
    v256[3] = &unk_1E699DDD0;
    v256[5] = this;
    v256[4] = buf;
    v258 = v107 == 1768845428;
    v257 = v108;
    v256[6] = a3;
    v256[7] = a6;
    v109 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v109, (uint64_t)v256);
    if (!*(_BYTE *)(*(_QWORD *)&buf[8] + 24))
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v280 = 136315394;
        *(_QWORD *)&v280[4] = "HALS_Device.cpp";
        *(_WORD *)&v280[12] = 1024;
        *(_DWORD *)&v280[14] = 3921;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  GetStreamDSPParameter failure", v280, 0x12u);
      }
      v110 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v110 = &off_1E69A1B30;
      v110[2] = 1852797029;
    }
    goto LABEL_245;
  }
  if (mSelector <= 1934647635)
  {
    if (mSelector <= 1853059699)
    {
      if (mSelector <= 1819634019)
      {
        if (mSelector == 1818454126)
        {
          if (a4 <= 7)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_Device.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 3395;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: bad property data size for kAudioObjectPropertyElementName", buf, 0x12u);
            }
            v215 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v215 = &off_1E69A1B30;
            v215[2] = 561211770;
          }
          *(_QWORD *)buf = 0;
          *(_QWORD *)&buf[8] = buf;
          *(_QWORD *)&buf[16] = 0x2000000000;
          *(_QWORD *)v285 = 0;
          v276[0] = MEMORY[0x1E0C809B0];
          v276[1] = 0x40000000;
          v276[2] = ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_111;
          v276[3] = &unk_1E699DC40;
          v276[5] = this;
          v276[4] = buf;
          v276[6] = a3;
          v101 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v101, (uint64_t)v276);
          v102 = *(const __CFString **)(*(_QWORD *)&buf[8] + 24);
          if (!v102)
            v102 = &stru_1E69A2360;
          *(_QWORD *)a6 = v102;
          v84 = 8;
          goto LABEL_244;
        }
        if (mSelector != 1818850926)
        {
          if (mSelector != 1819569763)
            goto LABEL_258;
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_Device.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 3535;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: bad property data size for kAudioDevicePropertyLatency", buf, 0x12u);
            }
            v26 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v26 = &off_1E69A1B30;
            v26[2] = 561211770;
          }
          goto LABEL_207;
        }
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_Device.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 3478;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: bad property data size for kAudioDevicePropertyDeviceIsAlive", buf, 0x12u);
          }
          v81 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v81 = &off_1E69A1B30;
          v81[2] = 561211770;
        }
LABEL_253:
        v73 = 1;
LABEL_254:
        *a6 = v73;
        goto LABEL_255;
      }
      if (mSelector != 1819634020)
      {
        if (mSelector != 1852793963)
        {
          if (mSelector != 1853059619)
            goto LABEL_258;
          goto LABEL_139;
        }
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_Device.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 3845;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: bad property data size for kAudioDevicePropertyProcessDuckOptOut", buf, 0x12u);
          }
          v212 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v212 = &off_1E69A1B30;
          v212[2] = 561211770;
        }
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        *(_QWORD *)&buf[16] = 0x2000000000;
        v285[0] = 0;
        v262[0] = MEMORY[0x1E0C809B0];
        v262[1] = 0x40000000;
        v262[2] = ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_143;
        v262[3] = &unk_1E699DD68;
        v262[5] = this;
        v262[4] = buf;
        v262[6] = a9;
        v83 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v83, (uint64_t)v262);
        *a6 = 0;
LABEL_205:
        v84 = 4;
LABEL_244:
        *a5 = v84;
        goto LABEL_245;
      }
      if (a4 <= 7)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_Device.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3806;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: bad property data size for kAudioDevicePropertyDeviceDescription", buf, 0x12u);
        }
        v217 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v217 = &off_1E69A1B30;
        v217[2] = 561211770;
      }
      goto LABEL_250;
    }
    if (mSelector > 1886353265)
    {
      if (mSelector == 1886353266)
      {
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_Device.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 3859;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: bad property data size for kAudioDevicePropertyPowerIsOn", buf, 0x12u);
          }
          v218 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v218 = &off_1E69A1B30;
          v218[2] = 561211770;
        }
        goto LABEL_253;
      }
      if (mSelector == 1919512167)
      {
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_Device.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 3544;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: bad property data size for kAudioDevicePropertyZeroTimeStampPeriod", buf, 0x12u);
          }
          v213 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v213 = &off_1E69A1B30;
          v213[2] = 561211770;
        }
        goto LABEL_207;
      }
      if (mSelector != 1934647619)
        goto LABEL_258;
      HALS_Device::GetDSPVirtualChannelLayoutForClient((HALS_Device *)buf, (uint64_t)this, (HALS_Client *)(mScope == 1768845428), (uint64_t)a9);
      if (v285[0])
      {
        v47 = *(_DWORD *)&buf[8] - *(_DWORD *)buf;
        if (*(_DWORD *)&buf[8] - *(_DWORD *)buf > a4)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v280 = 136315394;
            *(_QWORD *)&v280[4] = "HALS_Device.cpp";
            *(_WORD *)&v280[12] = 1024;
            *(_DWORD *)&v280[14] = 4060;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: bad property data size for kAudioDevicePropertySpatializationVirtualChannelLayout", v280, 0x12u);
          }
          v222 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v222 = &off_1E69A1B30;
          v222[2] = 561211770;
        }
        NumberChannelDescriptions = CA::ChannelLayout::GetNumberChannelDescriptions(*(CA::ChannelLayout **)buf, *(uint64_t *)&buf[8]);
        *(_QWORD *)a6 = 0;
        a6[2] = NumberChannelDescriptions;
        if (NumberChannelDescriptions)
        {
          v49 = NumberChannelDescriptions;
          v50 = a6 + 4;
          do
          {
            *(v50 - 1) = -1;
            *(_QWORD *)v50 = 0;
            *((_QWORD *)v50 + 1) = 0;
            v50 += 5;
            --v49;
          }
          while (v49);
        }
        v51 = *(void **)buf;
        memcpy(a6, *(const void **)buf, v47);
        v52 = v285[0];
        *a5 = v47;
        if (v52)
          v53 = v51 == 0;
        else
          v53 = 1;
        if (!v53)
        {
          *(_QWORD *)&buf[8] = v51;
          operator delete(v51);
        }
        return;
      }
LABEL_139:
      *a5 = 0;
      return;
    }
    if (mSelector == 1853059700)
    {
      if (a4 <= 7)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_Device.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3754;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: bad property data size for kAudioDevicePropertyNominalSampleRate", buf, 0x12u);
        }
        v216 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v216 = &off_1E69A1B30;
        v216[2] = 561211770;
      }
      *(_QWORD *)a6 = 0;
      goto LABEL_251;
    }
    if (mSelector == 1869180523)
    {
      if (a4 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_Device.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3524;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: bad property data size for kAudioDevicePropertyHogMode", buf, 0x12u);
        }
        v211 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v211 = &off_1E69A1B30;
        v211[2] = 561211770;
      }
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x2000000000;
      *(_DWORD *)v285 = -1;
      v273[0] = MEMORY[0x1E0C809B0];
      v273[1] = 0x40000000;
      v273[2] = ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_119;
      v273[3] = &unk_1E699DC90;
      v273[5] = this;
      v273[4] = buf;
      v82 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v82, (uint64_t)v273);
      *a6 = *(_DWORD *)(*(_QWORD *)&buf[8] + 24);
      goto LABEL_205;
    }
    if (mSelector != 1870098020)
      goto LABEL_258;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2000000000;
    *(_DWORD *)v285 = 0;
    v277[0] = MEMORY[0x1E0C809B0];
    v277[1] = 0x40000000;
    v277[2] = ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke;
    v277[3] = &unk_1E699DC18;
    v277[5] = this;
    v277[4] = buf;
    v278 = a4 >> 2;
    v279 = a7 >> 2;
    v277[6] = a9;
    v277[7] = a8;
    v277[8] = a6;
    v31 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v31, (uint64_t)v277);
LABEL_209:
    v84 = 4 * *(_DWORD *)(*(_QWORD *)&buf[8] + 24);
    goto LABEL_244;
  }
  if (mSelector <= 1937009954)
  {
    if (mSelector <= 1936482680)
    {
      if (mSelector == 1934647636)
      {
        if (mScope == 1768845428)
        {
          AMCP::Log::Scope_Registry::get(this);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v125 = **(NSObject ***)buf;
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
          if (os_log_type_enabled(v125, OS_LOG_TYPE_ERROR))
          {
            v126 = pthread_self();
            v127 = pthread_mach_thread_np(v126);
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)&buf[4] = v127;
            *(_WORD *)&buf[8] = 2080;
            *(_QWORD *)&buf[10] = "HALS_Device.cpp";
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = 4031;
            *(_WORD *)v285 = 2080;
            *(_QWORD *)&v285[2] = "isInput == true";
            _os_log_error_impl(&dword_1B57BA000, v125, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::GetPropertyData: only valid for output scope kAudioDevicePropertySpatializationType", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v246);
          v128 = __cxa_allocate_exception(0x40uLL);
          v244 = &off_1E69A1B30;
          v245 = 1852797029;
          *(_DWORD *)&v280[8] = 1852797029;
          v282 = 0uLL;
          LODWORD(v283) = -1;
          *(_QWORD *)v280 = &off_1E699E510;
          *(_QWORD *)&v280[16] = &unk_1E699E538;
          v281 = 0;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)v280);
          *(_QWORD *)&v285[8] = "virtual void HALS_Device::GetPropertyData(AudioObjectID, const AudioObjectPropertyAddres"
                                "s &, UInt32, UInt32 &, void *, UInt32, const void *, HALS_Client *) const";
          *(_QWORD *)&v285[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
          LODWORD(v286) = 4031;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v239);
          v242 = v239;
          v241 = off_1E69A20A0;
          v243 = v240;
          v239 = 0uLL;
          v240 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>((uint64_t)buf, (uint64_t)&v241);
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)v128, (uint64_t)buf);
        }
        if (!a6)
        {
          AMCP::Log::Scope_Registry::get(this);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v145 = **(NSObject ***)buf;
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
          if (os_log_type_enabled(v145, OS_LOG_TYPE_ERROR))
          {
            v146 = pthread_self();
            v147 = pthread_mach_thread_np(v146);
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)&buf[4] = v147;
            *(_WORD *)&buf[8] = 2080;
            *(_QWORD *)&buf[10] = "HALS_Device.cpp";
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = 4032;
            *(_WORD *)v285 = 2080;
            *(_QWORD *)&v285[2] = "outData == nullptr";
            _os_log_error_impl(&dword_1B57BA000, v145, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::GetPropertyData: outData is nullptr for kAudioDevicePropertySpatializationType", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v246);
          v148 = __cxa_allocate_exception(0x40uLL);
          v244 = &off_1E69A1B30;
          v245 = 1852797029;
          *(_DWORD *)&v280[8] = 1852797029;
          v282 = 0uLL;
          LODWORD(v283) = -1;
          *(_QWORD *)v280 = &off_1E699E510;
          *(_QWORD *)&v280[16] = &unk_1E699E538;
          v281 = 0;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)v280);
          *(_QWORD *)&v285[8] = "virtual void HALS_Device::GetPropertyData(AudioObjectID, const AudioObjectPropertyAddres"
                                "s &, UInt32, UInt32 &, void *, UInt32, const void *, HALS_Client *) const";
          *(_QWORD *)&v285[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
          LODWORD(v286) = 4032;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v239);
          v242 = v239;
          v241 = off_1E69A20A0;
          v243 = v240;
          v239 = 0uLL;
          v240 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>((uint64_t)buf, (uint64_t)&v241);
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)v148, (uint64_t)buf);
        }
        if ((_DWORD)a4 != 4)
        {
          AMCP::Log::Scope_Registry::get(this);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v157 = **(NSObject ***)buf;
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
          if (os_log_type_enabled(v157, OS_LOG_TYPE_ERROR))
          {
            v158 = pthread_self();
            v159 = pthread_mach_thread_np(v158);
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)&buf[4] = v159;
            *(_WORD *)&buf[8] = 2080;
            *(_QWORD *)&buf[10] = "HALS_Device.cpp";
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = 4033;
            *(_WORD *)v285 = 2080;
            *(_QWORD *)&v285[2] = "inDataSize != sizeof(UInt32)";
            _os_log_error_impl(&dword_1B57BA000, v157, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::GetPropertyData: inDataSize is not UInt32 for kAudioDevicePropertySpatializationType", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v246);
          v160 = __cxa_allocate_exception(0x40uLL);
          v244 = &off_1E69A1B30;
          v245 = 1852797029;
          *(_DWORD *)&v280[8] = 1852797029;
          v282 = 0uLL;
          LODWORD(v283) = -1;
          *(_QWORD *)v280 = &off_1E699E510;
          *(_QWORD *)&v280[16] = &unk_1E699E538;
          v281 = 0;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)v280);
          *(_QWORD *)&v285[8] = "virtual void HALS_Device::GetPropertyData(AudioObjectID, const AudioObjectPropertyAddres"
                                "s &, UInt32, UInt32 &, void *, UInt32, const void *, HALS_Client *) const";
          *(_QWORD *)&v285[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
          LODWORD(v286) = 4033;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v239);
          v242 = v239;
          v241 = off_1E69A20A0;
          v243 = v240;
          v239 = 0uLL;
          v240 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>((uint64_t)buf, (uint64_t)&v241);
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)v160, (uint64_t)buf);
        }
        v235[0] = MEMORY[0x1E0C809B0];
        v235[1] = 0x40000000;
        v235[2] = ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_169;
        v235[3] = &__block_descriptor_tmp_170;
        v236 = mScope == 1768845428;
        v235[4] = this;
        v235[5] = a9;
        v235[6] = a6;
        v235[7] = a5;
        v86 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v86, (uint64_t)v235);
        return;
      }
      if (mSelector != 1935763060)
      {
        if (mSelector != 1936092276)
          goto LABEL_258;
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_Device.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 3515;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: bad property data size for kAudioDevicePropertyDeviceCanBeDefaultSystemDevice", buf, 0x12u);
          }
          v30 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v30 = &off_1E69A1B30;
          v30[2] = 561211770;
        }
        goto LABEL_253;
      }
      if (a4 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_Device.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3631;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: bad property data size for kAudioDevicePropertySafetyOffset", buf, 0x12u);
        }
        v65 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v65 = &off_1E69A1B30;
        v65[2] = 561211770;
      }
LABEL_207:
      *a6 = 0;
LABEL_255:
      v33 = 4;
      goto LABEL_256;
    }
    if (mSelector == 1936482681)
    {
      if (mScope == 1768845428)
        v87 = 1;
      else
        v87 = 2 * (mScope != 1869968496);
      v88 = (*(uint64_t (**)(HALS_Device *, BOOL, HALS_Client *, HALS_Client *))(*(_QWORD *)this + 536))(this, v87 != 0, a9, a9);
      v89 = (16 * v88) | 8;
      if (v89 > a4)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_Device.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3602;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: bad property data size for kAudioDevicePropertyStreamConfiguration", buf, 0x12u);
        }
        v214 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v214 = &off_1E69A1B30;
        v214[2] = 561211770;
      }
      v90 = MEMORY[0x1E0C809B0];
      *a5 = v89;
      v268[0] = v90;
      v268[1] = 0x40000000;
      v268[2] = ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_123;
      v268[3] = &__block_descriptor_tmp_124_14338;
      v268[4] = this;
      v268[5] = a6;
      v269 = v88;
      v270 = v87;
      v268[6] = a9;
      v91 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v91, (uint64_t)v268);
      return;
    }
    if (mSelector == 1936876644)
    {
      v66 = HALS_Device::GetTotalNumberChannelsForClient(this, mScope == 1768845428, a9);
      v67 = caulk::numeric::exceptional_mul<unsigned int>(v66);
      v68 = caulk::numeric::exceptional_add<unsigned int>(v67);
      if (v68 > a4)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_Device.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3742;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: bad property data size for kAudioDevicePropertyDefaultChannelLayout", buf, 0x12u);
        }
        v206 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v206 = &off_1E69A1B30;
        v206[2] = 561211770;
      }
      v69 = v68;
      v70 = HALS_Device::GetTotalNumberChannelsForClient(this, a3->mScope == 1768845428, a9);
      *(_QWORD *)a6 = 0;
      a6[2] = v70;
      if (v70)
      {
        v71 = v70;
        v72 = a6 + 4;
        do
        {
          *(v72 - 1) = -1;
          *(_QWORD *)v72 = 0;
          *((_QWORD *)v72 + 1) = 0;
          v72 += 5;
          --v71;
        }
        while (v71);
      }
      *a5 = v69;
      return;
    }
    if (mSelector != 1936879204)
      goto LABEL_258;
    v38 = HALS_Device::GetTotalNumberChannelsForClient(this, mScope == 1768845428, a9);
    v39 = caulk::numeric::exceptional_mul<unsigned int>(v38);
    v40 = caulk::numeric::exceptional_add<unsigned int>(v39);
    if (v40 > a4)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "HALS_Device.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3692;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: bad property data size for kAudioDevicePropertyPreferredChannelLayout", buf, 0x12u);
      }
      v202 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v202 = &off_1E69A1B30;
      v202[2] = 561211770;
    }
    v41 = v40;
    v42 = HALS_Device::GetTotalNumberChannelsForClient(this, a3->mScope == 1768845428, a9);
    *(_QWORD *)a6 = 0;
    a6[2] = v42;
    if (v42)
    {
      v43 = v42;
      v44 = a6 + 4;
      do
      {
        *(v44 - 1) = -1;
        *(_QWORD *)v44 = 0;
        *((_QWORD *)v44 + 1) = 0;
        v44 += 5;
        --v43;
      }
      while (v43);
    }
    *a5 = v41;
    v241 = *(uint64_t (***)())&a3->mSelector;
    LODWORD(v242) = a3->mElement;
    LODWORD(v241) = 1936876644;
    (*(void (**)(HALS_Device *, const BOOL *, uint64_t (***)(), AudioObjectPropertyAddress *))(*(_QWORD *)this + 112))(this, a2, &v241, a4);
    v266[1] = 0;
    v266[0] = 0;
    HALS_System::GetInstance(v280, 0, v266);
    *(_QWORD *)buf = HALS_SettingsManager::ReadSetting(*(HALS_SettingsManager **)(*(_QWORD *)v280 + 1408), *((const __CFString **)this + 14));
    *(_WORD *)&buf[8] = 1;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v280);
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v266);
    *(_QWORD *)v280 = 0;
    *(_WORD *)&v280[8] = 1;
    v45 = a3->mScope;
    if (v45 == 1869968496)
    {
      v46 = CFSTR("output.surround");
    }
    else
    {
      if (v45 != 1768845428)
      {
LABEL_266:
        CACFDictionary::~CACFDictionary((CACFDictionary *)v280);
LABEL_284:
        CACFDictionary::~CACFDictionary((CACFDictionary *)buf);
        return;
      }
      v46 = CFSTR("input.surround");
    }
    CACFDictionary::GetCACFDictionary((const __CFDictionary **)buf, v46, (CACFDictionary *)v280);
    if (*(_QWORD *)v280)
      HALS_Device::ConstructLayoutFromDictionary((HALS_Device *)v280, (const CACFDictionary *)a6, v106);
    goto LABEL_266;
  }
  if (mSelector <= 1983996970)
  {
    if (mSelector != 1937009955)
    {
      if (mSelector != 1953653102)
      {
        if (mSelector != 1969841184)
          goto LABEL_258;
        if (a4 <= 7)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_Device.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 3422;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: bad property data size for kAudioDevicePropertyDeviceUID", buf, 0x12u);
          }
          v201 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v201 = &off_1E69A1B30;
          v201[2] = 561211770;
        }
        v36 = (const __CFString *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 208))(this);
        *(_QWORD *)buf = v36;
        buf[8] = 1;
        if (v36)
          v36 = (const __CFString *)PropertyListDeepImmutableCopy(v36);
        *(_QWORD *)a6 = v36;
        *a5 = 8;
        CACFString::~CACFString((CACFString *)buf);
        return;
      }
      if (a4 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_Device.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3432;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: bad property data size for kAudioDevicePropertyTransportType", buf, 0x12u);
        }
        v64 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v64 = &off_1E69A1B30;
        v64[2] = 561211770;
      }
      goto LABEL_207;
    }
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2000000000;
    *(_DWORD *)v285 = 0;
    v271[0] = MEMORY[0x1E0C809B0];
    v271[1] = 0x40000000;
    v271[2] = ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_121;
    v271[3] = &unk_1E699DCB8;
    v272 = (int)a4;
    v271[6] = a3;
    v271[7] = a9;
    v271[8] = a6;
    v271[5] = this;
    v271[4] = buf;
    v85 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v85, (uint64_t)v271);
    goto LABEL_209;
  }
  if (mSelector <= 1986622323)
  {
    if (mSelector != 1983996971)
    {
      if (mSelector == 1983997011)
      {
        HALS_Device_HostedDSP::GetPropertyData(*((HALS_Device_HostedDSP **)this + 76), a3, a4, a5, a6, a7, (uint64_t)a8, a9, a9);
        return;
      }
      goto LABEL_258;
    }
    if (mScope != 1768845428)
    {
      AMCP::Log::Scope_Registry::get(this);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v129 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v129, OS_LOG_TYPE_ERROR))
      {
        v130 = pthread_self();
        v131 = pthread_mach_thread_np(v130);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v131;
        *(_WORD *)&buf[8] = 2080;
        *(_QWORD *)&buf[10] = "HALS_Device.cpp";
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = 4075;
        *(_WORD *)v285 = 2080;
        *(_QWORD *)&v285[2] = "isInput == false";
        _os_log_error_impl(&dword_1B57BA000, v129, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::GetPropertyData: only valid for input scope kAudioDevicePropertyVoiceActivityDetectionEnable", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v246);
      v132 = __cxa_allocate_exception(0x40uLL);
      v244 = &off_1E69A1B30;
      v245 = 1852797029;
      *(_DWORD *)&v280[8] = 1852797029;
      v282 = 0uLL;
      LODWORD(v283) = -1;
      *(_QWORD *)v280 = &off_1E699E510;
      *(_QWORD *)&v280[16] = &unk_1E699E538;
      v281 = 0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)v280);
      *(_QWORD *)&v285[8] = "virtual void HALS_Device::GetPropertyData(AudioObjectID, const AudioObjectPropertyAddress &,"
                            " UInt32, UInt32 &, void *, UInt32, const void *, HALS_Client *) const";
      *(_QWORD *)&v285[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
      LODWORD(v286) = 4075;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v239);
      v242 = v239;
      v241 = off_1E69A20A0;
      v243 = v240;
      v239 = 0uLL;
      v240 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>((uint64_t)buf, (uint64_t)&v241);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)v132, (uint64_t)buf);
    }
    if (!a6)
    {
      AMCP::Log::Scope_Registry::get(this);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v149 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v149, OS_LOG_TYPE_ERROR))
      {
        v150 = pthread_self();
        v151 = pthread_mach_thread_np(v150);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v151;
        *(_WORD *)&buf[8] = 2080;
        *(_QWORD *)&buf[10] = "HALS_Device.cpp";
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = 4076;
        *(_WORD *)v285 = 2080;
        *(_QWORD *)&v285[2] = "outData == nullptr";
        _os_log_error_impl(&dword_1B57BA000, v149, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::GetPropertyData: outData is nullptr for kAudioDevicePropertyVoiceActivityDetectionEnable", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v246);
      v152 = __cxa_allocate_exception(0x40uLL);
      v244 = &off_1E69A1B30;
      v245 = 1852797029;
      *(_DWORD *)&v280[8] = 1852797029;
      v282 = 0uLL;
      LODWORD(v283) = -1;
      *(_QWORD *)v280 = &off_1E699E510;
      *(_QWORD *)&v280[16] = &unk_1E699E538;
      v281 = 0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)v280);
      *(_QWORD *)&v285[8] = "virtual void HALS_Device::GetPropertyData(AudioObjectID, const AudioObjectPropertyAddress &,"
                            " UInt32, UInt32 &, void *, UInt32, const void *, HALS_Client *) const";
      *(_QWORD *)&v285[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
      LODWORD(v286) = 4076;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v239);
      v242 = v239;
      v241 = off_1E69A20A0;
      v243 = v240;
      v239 = 0uLL;
      v240 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>((uint64_t)buf, (uint64_t)&v241);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)v152, (uint64_t)buf);
    }
    if ((_DWORD)a4 != 4)
    {
      AMCP::Log::Scope_Registry::get(this);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v161 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v161, OS_LOG_TYPE_ERROR))
      {
        v162 = pthread_self();
        v163 = pthread_mach_thread_np(v162);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v163;
        *(_WORD *)&buf[8] = 2080;
        *(_QWORD *)&buf[10] = "HALS_Device.cpp";
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = 4077;
        *(_WORD *)v285 = 2080;
        *(_QWORD *)&v285[2] = "inDataSize != sizeof(UInt32)";
        _os_log_error_impl(&dword_1B57BA000, v161, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::GetPropertyData: inDataSize is not UInt32 for kAudioDevicePropertyVoiceActivityDetectionEnable", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v246);
      v164 = __cxa_allocate_exception(0x40uLL);
      v244 = &off_1E69A1B30;
      v245 = 1852797029;
      *(_DWORD *)&v280[8] = 1852797029;
      v282 = 0uLL;
      LODWORD(v283) = -1;
      *(_QWORD *)v280 = &off_1E699E510;
      *(_QWORD *)&v280[16] = &unk_1E699E538;
      v281 = 0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)v280);
      *(_QWORD *)&v285[8] = "virtual void HALS_Device::GetPropertyData(AudioObjectID, const AudioObjectPropertyAddress &,"
                            " UInt32, UInt32 &, void *, UInt32, const void *, HALS_Client *) const";
      *(_QWORD *)&v285[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
      LODWORD(v286) = 4077;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v239);
      v242 = v239;
      v241 = off_1E69A20A0;
      v243 = v240;
      v239 = 0uLL;
      v240 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>((uint64_t)buf, (uint64_t)&v241);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)v164, (uint64_t)buf);
    }
    if (!a9)
    {
      AMCP::Log::Scope_Registry::get(this);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v169 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v169, OS_LOG_TYPE_ERROR))
      {
        v170 = pthread_self();
        v171 = pthread_mach_thread_np(v170);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v171;
        *(_WORD *)&buf[8] = 2080;
        *(_QWORD *)&buf[10] = "HALS_Device.cpp";
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = 4078;
        *(_WORD *)v285 = 2080;
        *(_QWORD *)&v285[2] = "inClient == nullptr";
        _os_log_error_impl(&dword_1B57BA000, v169, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::GetPropertyData: inClient is null for kAudioDevicePropertyVoiceActivityDetectionEnable", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v246);
      v172 = __cxa_allocate_exception(0x40uLL);
      v244 = &off_1E69A1B30;
      v245 = 1852797029;
      *(_DWORD *)&v280[8] = 1852797029;
      v282 = 0uLL;
      LODWORD(v283) = -1;
      *(_QWORD *)v280 = &off_1E699E510;
      *(_QWORD *)&v280[16] = &unk_1E699E538;
      v281 = 0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)v280);
      *(_QWORD *)&v285[8] = "virtual void HALS_Device::GetPropertyData(AudioObjectID, const AudioObjectPropertyAddress &,"
                            " UInt32, UInt32 &, void *, UInt32, const void *, HALS_Client *) const";
      *(_QWORD *)&v285[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
      LODWORD(v286) = 4078;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v239);
      v242 = v239;
      v241 = off_1E69A20A0;
      v243 = v240;
      v239 = 0uLL;
      v240 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>((uint64_t)buf, (uint64_t)&v241);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)v172, (uint64_t)buf);
    }
    v92 = atomic_load((unsigned __int8 *)a9 + 260);
    if ((v92 & 1) == 0)
    {
      AMCP::Log::Scope_Registry::get(this);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v177 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v177, OS_LOG_TYPE_ERROR))
      {
        v178 = pthread_self();
        v179 = pthread_mach_thread_np(v178);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v179;
        *(_WORD *)&buf[8] = 2080;
        *(_QWORD *)&buf[10] = "HALS_Device.cpp";
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = 4079;
        *(_WORD *)v285 = 2080;
        *(_QWORD *)&v285[2] = "!inClient->SandboxAllowsMicAccess()";
        _os_log_error_impl(&dword_1B57BA000, v177, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::GetPropertyData: inClient does not have permission to get kAudioDevicePropertyVoiceActivityDetectionEnable", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v246);
      v180 = __cxa_allocate_exception(0x40uLL);
      v244 = &off_1E69A1B30;
      v245 = 560492391;
      *(_DWORD *)&v280[8] = 560492391;
      v282 = 0uLL;
      LODWORD(v283) = -1;
      *(_QWORD *)v280 = &off_1E699E510;
      *(_QWORD *)&v280[16] = &unk_1E699E538;
      v281 = 0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)v280);
      *(_QWORD *)&v285[8] = "virtual void HALS_Device::GetPropertyData(AudioObjectID, const AudioObjectPropertyAddress &,"
                            " UInt32, UInt32 &, void *, UInt32, const void *, HALS_Client *) const";
      *(_QWORD *)&v285[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
      LODWORD(v286) = 4079;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v239);
      v242 = v239;
      v241 = off_1E69A20A0;
      v243 = v240;
      v239 = 0uLL;
      v240 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>((uint64_t)buf, (uint64_t)&v241);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)v180, (uint64_t)buf);
    }
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2000000000;
    *(_DWORD *)v285 = 0;
    v93 = MEMORY[0x1E0C809B0];
    *a5 = 4;
    v233[0] = v93;
    v233[1] = 0x40000000;
    v233[2] = ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_171;
    v233[3] = &unk_1E699DF10;
    v234 = mScope == 1768845428;
    v233[4] = buf;
    v233[5] = this;
    v233[6] = a9;
    v233[7] = a5;
    v94 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v94, (uint64_t)v233);
    v95 = *(_DWORD *)(*(_QWORD *)&buf[8] + 24);
    if (!v95)
    {
      v96 = (*(uint64_t (**)(_QWORD))(***((_QWORD ***)this + 76) + 464))(**((_QWORD **)this + 76));
      v95 = (v96 & 0xFF00000000) != 0 && (_DWORD)v96 == 1836346212;
      *(_DWORD *)(*(_QWORD *)&buf[8] + 24) = v95;
    }
    *a6 = v95;
    goto LABEL_245;
  }
  if (mSelector != 1986622324)
  {
    if (mSelector == 2003136116)
    {
      if (a4 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_Device.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3497;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: bad property data size for kAudioDevicePropertyDeviceIsRunning", buf, 0x12u);
        }
        v203 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v203 = &off_1E69A1B30;
        v203[2] = 561211770;
      }
      *a6 = (*(uint64_t (**)(HALS_Device *, HALS_Client *))(*(_QWORD *)this + 496))(this, a9);
      goto LABEL_255;
    }
LABEL_258:
    HALS_Object::GetPropertyData((uint64_t)this, (uint64_t)a2, (int *)a3, a4, (int *)a5, (uint64_t *)a6);
    return;
  }
  NumberStreamsExcludingReferenceStreams = (AMCP::Log::Scope_Registry *)HALS_Device::GetNumberStreamsExcludingReferenceStreams(this, 1);
  if (!(_DWORD)NumberStreamsExcludingReferenceStreams)
  {
    AMCP::Log::Scope_Registry::get(NumberStreamsExcludingReferenceStreams);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v133 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v133, OS_LOG_TYPE_ERROR))
    {
      v134 = pthread_self();
      v135 = pthread_mach_thread_np(v134);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v135;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "HALS_Device.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 4003;
      *(_WORD *)v285 = 2080;
      *(_QWORD *)&v285[2] = "hasNonReferenceInputStream == false";
      _os_log_error_impl(&dword_1B57BA000, v133, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::GetPropertyData: no non-reference input streams kAudioDevicePropertyVocalIsolationType", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v246);
    v136 = __cxa_allocate_exception(0x40uLL);
    v244 = &off_1E69A1B30;
    v245 = 1852797029;
    *(_DWORD *)&v280[8] = 1852797029;
    v282 = 0uLL;
    LODWORD(v283) = -1;
    *(_QWORD *)v280 = &off_1E699E510;
    *(_QWORD *)&v280[16] = &unk_1E699E538;
    v281 = 0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)v280);
    *(_QWORD *)&v285[8] = "virtual void HALS_Device::GetPropertyData(AudioObjectID, const AudioObjectPropertyAddress &, U"
                          "Int32, UInt32 &, void *, UInt32, const void *, HALS_Client *) const";
    *(_QWORD *)&v285[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
    LODWORD(v286) = 4003;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v239);
    v242 = v239;
    v241 = off_1E69A20A0;
    v243 = v240;
    v239 = 0uLL;
    v240 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>((uint64_t)buf, (uint64_t)&v241);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)v136, (uint64_t)buf);
  }
  if (mScope != 1768845428)
  {
    AMCP::Log::Scope_Registry::get(NumberStreamsExcludingReferenceStreams);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v153 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v153, OS_LOG_TYPE_ERROR))
    {
      v154 = pthread_self();
      v155 = pthread_mach_thread_np(v154);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v155;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "HALS_Device.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 4004;
      *(_WORD *)v285 = 2080;
      *(_QWORD *)&v285[2] = "isInput == false";
      _os_log_error_impl(&dword_1B57BA000, v153, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::GetPropertyData: only valid for input scope kAudioDevicePropertyVocalIsolationType", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v246);
    v156 = __cxa_allocate_exception(0x40uLL);
    v244 = &off_1E69A1B30;
    v245 = 1852797029;
    *(_DWORD *)&v280[8] = 1852797029;
    v282 = 0uLL;
    LODWORD(v283) = -1;
    *(_QWORD *)v280 = &off_1E699E510;
    *(_QWORD *)&v280[16] = &unk_1E699E538;
    v281 = 0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)v280);
    *(_QWORD *)&v285[8] = "virtual void HALS_Device::GetPropertyData(AudioObjectID, const AudioObjectPropertyAddress &, U"
                          "Int32, UInt32 &, void *, UInt32, const void *, HALS_Client *) const";
    *(_QWORD *)&v285[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
    LODWORD(v286) = 4004;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v239);
    v242 = v239;
    v241 = off_1E69A20A0;
    v243 = v240;
    v239 = 0uLL;
    v240 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>((uint64_t)buf, (uint64_t)&v241);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)v156, (uint64_t)buf);
  }
  if (!a6)
  {
    AMCP::Log::Scope_Registry::get(NumberStreamsExcludingReferenceStreams);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v165 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v165, OS_LOG_TYPE_ERROR))
    {
      v166 = pthread_self();
      v167 = pthread_mach_thread_np(v166);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v167;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "HALS_Device.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 4005;
      *(_WORD *)v285 = 2080;
      *(_QWORD *)&v285[2] = "outData == nullptr";
      _os_log_error_impl(&dword_1B57BA000, v165, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::GetPropertyData: outData is nullptr for kAudioDevicePropertyVocalIsolationType", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v246);
    v168 = __cxa_allocate_exception(0x40uLL);
    v244 = &off_1E69A1B30;
    v245 = 1852797029;
    *(_DWORD *)&v280[8] = 1852797029;
    v282 = 0uLL;
    LODWORD(v283) = -1;
    *(_QWORD *)v280 = &off_1E699E510;
    *(_QWORD *)&v280[16] = &unk_1E699E538;
    v281 = 0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)v280);
    *(_QWORD *)&v285[8] = "virtual void HALS_Device::GetPropertyData(AudioObjectID, const AudioObjectPropertyAddress &, U"
                          "Int32, UInt32 &, void *, UInt32, const void *, HALS_Client *) const";
    *(_QWORD *)&v285[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
    LODWORD(v286) = 4005;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v239);
    v242 = v239;
    v241 = off_1E69A20A0;
    v243 = v240;
    v239 = 0uLL;
    v240 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>((uint64_t)buf, (uint64_t)&v241);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)v168, (uint64_t)buf);
  }
  if ((_DWORD)a4 != 4)
  {
    AMCP::Log::Scope_Registry::get(NumberStreamsExcludingReferenceStreams);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v173 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v173, OS_LOG_TYPE_ERROR))
    {
      v174 = pthread_self();
      v175 = pthread_mach_thread_np(v174);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v175;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "HALS_Device.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 4006;
      *(_WORD *)v285 = 2080;
      *(_QWORD *)&v285[2] = "inDataSize != sizeof(UInt32)";
      _os_log_error_impl(&dword_1B57BA000, v173, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::GetPropertyData: inDataSize is not UInt32 for kAudioDevicePropertyVocalIsolationType", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v246);
    v176 = __cxa_allocate_exception(0x40uLL);
    v244 = &off_1E69A1B30;
    v245 = 1852797029;
    *(_DWORD *)&v280[8] = 1852797029;
    v282 = 0uLL;
    LODWORD(v283) = -1;
    *(_QWORD *)v280 = &off_1E699E510;
    *(_QWORD *)&v280[16] = &unk_1E699E538;
    v281 = 0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)v280);
    *(_QWORD *)&v285[8] = "virtual void HALS_Device::GetPropertyData(AudioObjectID, const AudioObjectPropertyAddress &, U"
                          "Int32, UInt32 &, void *, UInt32, const void *, HALS_Client *) const";
    *(_QWORD *)&v285[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
    LODWORD(v286) = 4006;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v239);
    v242 = v239;
    v241 = off_1E69A20A0;
    v243 = v240;
    v239 = 0uLL;
    v240 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>((uint64_t)buf, (uint64_t)&v241);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)v176, (uint64_t)buf);
  }
  if (!a9)
  {
    AMCP::Log::Scope_Registry::get(NumberStreamsExcludingReferenceStreams);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v181 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v181, OS_LOG_TYPE_ERROR))
    {
      v182 = pthread_self();
      v183 = pthread_mach_thread_np(v182);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v183;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "HALS_Device.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 4007;
      *(_WORD *)v285 = 2080;
      *(_QWORD *)&v285[2] = "inClient == nullptr";
      _os_log_error_impl(&dword_1B57BA000, v181, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::GetPropertyData: inClient is null for kAudioDevicePropertyVocalIsolationType", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v246);
    v184 = __cxa_allocate_exception(0x40uLL);
    v244 = &off_1E69A1B30;
    v245 = 1852797029;
    *(_DWORD *)&v280[8] = 1852797029;
    v282 = 0uLL;
    LODWORD(v283) = -1;
    *(_QWORD *)v280 = &off_1E699E510;
    *(_QWORD *)&v280[16] = &unk_1E699E538;
    v281 = 0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)v280);
    *(_QWORD *)&v285[8] = "virtual void HALS_Device::GetPropertyData(AudioObjectID, const AudioObjectPropertyAddress &, U"
                          "Int32, UInt32 &, void *, UInt32, const void *, HALS_Client *) const";
    *(_QWORD *)&v285[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
    LODWORD(v286) = 4007;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v239);
    v242 = v239;
    v241 = off_1E69A20A0;
    v243 = v240;
    v239 = 0uLL;
    v240 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>((uint64_t)buf, (uint64_t)&v241);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)v184, (uint64_t)buf);
  }
  v99 = atomic_load((unsigned __int8 *)a9 + 260);
  if ((v99 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get(NumberStreamsExcludingReferenceStreams);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v185 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v185, OS_LOG_TYPE_ERROR))
    {
      v186 = pthread_self();
      v187 = pthread_mach_thread_np(v186);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v187;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "HALS_Device.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 4008;
      *(_WORD *)v285 = 2080;
      *(_QWORD *)&v285[2] = "!inClient->SandboxAllowsMicAccess()";
      _os_log_error_impl(&dword_1B57BA000, v185, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::GetPropertyData: inClient does not have permission to get kAudioDevicePropertyVocalIsolationType", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v246);
    v188 = __cxa_allocate_exception(0x40uLL);
    v244 = &off_1E69A1B30;
    v245 = 560492391;
    *(_DWORD *)&v280[8] = 560492391;
    v282 = 0uLL;
    LODWORD(v283) = -1;
    *(_QWORD *)v280 = &off_1E699E510;
    *(_QWORD *)&v280[16] = &unk_1E699E538;
    v281 = 0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)v280);
    *(_QWORD *)&v285[8] = "virtual void HALS_Device::GetPropertyData(AudioObjectID, const AudioObjectPropertyAddress &, U"
                          "Int32, UInt32 &, void *, UInt32, const void *, HALS_Client *) const";
    *(_QWORD *)&v285[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
    LODWORD(v286) = 4008;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v239);
    v242 = v239;
    v241 = off_1E69A20A0;
    v243 = v240;
    v239 = 0uLL;
    v240 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>((uint64_t)buf, (uint64_t)&v241);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)v188, (uint64_t)buf);
  }
  v237[0] = MEMORY[0x1E0C809B0];
  v237[1] = 0x40000000;
  v237[2] = ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_166;
  v237[3] = &__block_descriptor_tmp_167;
  v238 = mScope == 1768845428;
  v237[4] = this;
  v237[5] = a9;
  v237[6] = a6;
  v237[7] = a5;
  v100 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v100, (uint64_t)v237);
}

void sub_1B5C6F370(_Unwind_Exception *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x300]);
  _Unwind_Resume(a1);
}

void HALS_Device::SetPropertyData(HALS_Device *this, const AudioObjectPropertyAddress *a2, AudioObjectPropertyAddress *a3, unsigned int a4, _DWORD *a5, int a6, int *a7, HALS_Client *a8)
{
  AMCP::Log::Scope_Registry *v16;
  const BOOL *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  signed int mSelector;
  pid_t v23;
  uint64_t v24;
  float v25;
  float v26;
  float v27;
  float v28;
  HALB_Mutex *v29;
  AMCP::Log::Scope_Registry *NumberStreamsExcludingReferenceStreams;
  BOOL v31;
  unsigned __int8 v32;
  int v33;
  HALB_Mutex *v34;
  HALS_NotificationManager *v35;
  uint64_t v36;
  int v37;
  HALB_Mutex *v38;
  HALS_NotificationManager *v39;
  uint64_t v40;
  BOOL v41;
  int v42;
  HALB_Mutex *v43;
  HALS_NotificationManager *v44;
  uint64_t v45;
  HALB_Mutex *v46;
  HALS_NotificationManager *v47;
  uint64_t v48;
  HALS_Client *v49;
  char v50;
  AMCP::Log::Scope_Registry *HasProperty;
  BOOL v52;
  AudioObjectPropertyScope v53;
  int v54;
  int v55;
  HALB_Mutex *v56;
  HALS_NotificationManager *v57;
  uint64_t v58;
  _DWORD *v59;
  BOOL v60;
  unsigned __int8 v61;
  int v62;
  HALB_Mutex *v63;
  HALS_NotificationManager *v64;
  uint64_t v65;
  BOOL v66;
  HALB_Mutex *v67;
  unsigned int TotalNumberChannelsForClient;
  int v69;
  int v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  HALB_Mutex *v77;
  HALS_NotificationManager *v78;
  uint64_t v79;
  uint64_t v80;
  HALB_Mutex *v81;
  const BOOL *v82;
  AMCP::Feature_Flags *v83;
  HALB_Mutex *v84;
  HALB_Mutex *v85;
  HALS_NotificationManager *v86;
  uint64_t v87;
  int v88;
  AMCP::Log::Scope_Registry *v89;
  HALB_Mutex *v90;
  int v91;
  int v92;
  AudioObjectPropertyScope v93;
  int v94;
  HALB_Mutex *v95;
  HALS_NotificationManager *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  AudioObjectPropertyScope v104;
  HALS_NotificationManager *v105;
  uint64_t v106;
  HALB_Mutex *v107;
  AMCP::Feature_Flags *v108;
  const BOOL *v109;
  HALS_ObjectMap *v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *p_shared_owners;
  unint64_t v116;
  HALS_NotificationManager *v117;
  uint64_t v118;
  AudioObjectPropertyScope v119;
  uint64_t v120;
  HALB_Mutex *v121;
  int v122;
  float v123;
  int v124;
  const char *v125;
  const char *v126;
  HALB_Mutex *v127;
  AudioObjectPropertyScope v128;
  AudioObjectPropertyAddress *v129;
  _BOOL4 v130;
  int v131;
  const char *v132;
  int v133;
  HALB_Mutex *v134;
  AudioObjectPropertyScope v135;
  uint64_t v136;
  HALB_Mutex *v137;
  float v138;
  float v139;
  HALB_Mutex *v140;
  AudioObjectPropertyScope v141;
  AudioObjectPropertyAddress *v142;
  CACFDictionary *v143;
  AudioObjectPropertyScope v144;
  HALS_NotificationManager *v145;
  uint64_t v146;
  AudioObjectPropertyScope mScope;
  HALS_Object *v148;
  HALS_NotificationManager *v149;
  uint64_t v150;
  HALS_NotificationManager *v151;
  uint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  HALS_Device **v159;
  std::__shared_weak_count *v160;
  NSObject *v161;
  unint64_t *v162;
  unint64_t v163;
  _opaque_pthread_t *v164;
  mach_port_t v165;
  char *v166;
  _QWORD *v167;
  uint64_t v168;
  HALS_Object *v169;
  AudioObjectPropertyElement mElement;
  _BYTE *v171;
  int v172;
  const char *v173;
  NSObject *v174;
  _opaque_pthread_t *v175;
  mach_port_t v176;
  void *v177;
  NSObject *v178;
  _opaque_pthread_t *v179;
  mach_port_t v180;
  void *v181;
  NSObject *v182;
  _opaque_pthread_t *v184;
  mach_port_t v185;
  void *v186;
  NSObject *v187;
  _opaque_pthread_t *v188;
  mach_port_t v189;
  void *v190;
  NSObject *v191;
  _opaque_pthread_t *v192;
  mach_port_t v193;
  void *v194;
  NSObject *v195;
  _opaque_pthread_t *v197;
  mach_port_t v198;
  void *v199;
  NSObject *v200;
  _opaque_pthread_t *v201;
  mach_port_t v202;
  void *v203;
  NSObject *v204;
  _opaque_pthread_t *v205;
  mach_port_t v206;
  void *v207;
  NSObject *v208;
  _opaque_pthread_t *v209;
  mach_port_t v210;
  void *v211;
  NSObject *v212;
  _opaque_pthread_t *v213;
  mach_port_t v214;
  void *v215;
  NSObject *v216;
  _opaque_pthread_t *v217;
  mach_port_t v218;
  void *v219;
  NSObject *v220;
  _opaque_pthread_t *v221;
  mach_port_t v222;
  void *v223;
  NSObject *v224;
  _opaque_pthread_t *v225;
  mach_port_t v226;
  void *v227;
  NSObject *v228;
  _opaque_pthread_t *v229;
  mach_port_t v230;
  void *v231;
  NSObject *v232;
  _opaque_pthread_t *v233;
  mach_port_t v234;
  void *v235;
  NSObject *v236;
  _opaque_pthread_t *v237;
  mach_port_t v238;
  void *v239;
  NSObject *v240;
  _opaque_pthread_t *v241;
  mach_port_t v242;
  void *v243;
  NSObject *v244;
  _opaque_pthread_t *v245;
  mach_port_t v246;
  void *v247;
  NSObject *v248;
  _opaque_pthread_t *v249;
  mach_port_t v250;
  void *v251;
  NSObject *v252;
  _opaque_pthread_t *v253;
  mach_port_t v254;
  void *v255;
  NSObject *v256;
  _opaque_pthread_t *v257;
  mach_port_t v258;
  void *v259;
  NSObject *v260;
  _opaque_pthread_t *v261;
  mach_port_t v262;
  void *v263;
  NSObject *v264;
  _opaque_pthread_t *v265;
  mach_port_t v266;
  void *v267;
  _DWORD *v268;
  _DWORD *exception;
  _DWORD *v270;
  _DWORD *v271;
  _DWORD *v272;
  _DWORD *v273;
  _DWORD *v274;
  _DWORD *v275;
  _DWORD *v276;
  _DWORD *v277;
  _DWORD *v278;
  _DWORD *v279;
  _DWORD *v280;
  _DWORD *v281;
  _DWORD *v282;
  _DWORD *v283;
  _DWORD *v284;
  _DWORD *v285;
  int v286;
  _DWORD *v287;
  _DWORD *v288;
  _DWORD *v289;
  _DWORD *v290;
  _DWORD *v291;
  _DWORD *v293;
  _DWORD *v294;
  _DWORD *v295;
  _DWORD *v296;
  _DWORD *v297;
  _QWORD v298[9];
  _QWORD v299[7];
  int v300;
  BOOL v301;
  _QWORD v302[7];
  int v303;
  BOOL v304;
  _QWORD v305[7];
  int v306;
  BOOL v307;
  __int128 v308;
  uint64_t v309;
  void (**v310)(CAException *__hidden);
  int v311;
  char v312;
  _QWORD v313[8];
  int v314;
  unsigned int v315;
  BOOL v316;
  _QWORD v317[7];
  int v318;
  int v319;
  BOOL v320;
  uint64_t v321;
  std::__shared_weak_count *v322;
  _QWORD v323[8];
  _QWORD v324[8];
  _QWORD v325[6];
  _QWORD v326[7];
  int v327;
  _QWORD v328[6];
  BOOL v329;
  _QWORD v330[7];
  float v331;
  float v332;
  _QWORD v333[6];
  int v334;
  float v335;
  BOOL v336;
  _QWORD v337[6];
  int v338;
  BOOL v339;
  _QWORD v340[6];
  int v341;
  float v342;
  BOOL v343;
  _QWORD v344[6];
  int v345;
  BOOL v346;
  _QWORD v347[8];
  uint64_t v348[2];
  uint64_t v349[2];
  uint64_t v350;
  std::__shared_weak_count *v351;
  uint64_t v352[2];
  uint64_t v353[2];
  uint64_t v354;
  std::__shared_weak_count *v355;
  uint64_t v356;
  std::__shared_weak_count *v357;
  uint64_t v358[2];
  _QWORD v359[9];
  _QWORD v360[7];
  _BYTE theDict[24];
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  int v365;
  _BYTE buf[24];
  _BYTE v367[24];
  _DWORD *v368;
  char v369;
  AudioObjectPropertyAddress v370[2];
  uint64_t v371;
  uint64_t v372;

  v372 = *MEMORY[0x1E0C80C00];
  if (HALB_Info::PropertyRequiresHogMode((HALB_Info *)a3->mSelector, a2)
    && !HALS_Device::IsHogModeOwnerOrFree(this, a8))
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "HALS_Device.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 4178;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_SetPropertyData: the given process does not own hog mode", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 560492391;
  }
  v16 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(HALS_Device *, AudioObjectPropertyAddress *, HALS_Client *))(*(_QWORD *)this + 176))(this, a3, a8);
  if ((v16 & 1) == 0)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "HALS_Device.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 4179;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_SetPropertyData: the given process is just plain not allowed", buf, 0x12u);
    }
    v268 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v268 = &off_1E69A1B30;
    v268[2] = 560492391;
  }
  mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1751413615)
  {
    if (mSelector <= 1934647618)
    {
      if (mSelector > 1852793962)
      {
        switch(mSelector)
        {
          case 1852793963:
            if (a4 <= 3)
            {
              if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = "HALS_Device.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 4461;
                _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_SetPropertyData: bad property data size for kAudioDevicePropertyProcessDuckOptOut", buf, 0x12u);
              }
              v275 = __cxa_allocate_exception(0x10uLL);
              *(_QWORD *)v275 = &off_1E69A1B30;
              v275[2] = 561211770;
            }
            v66 = *a5 != 0;
            v328[0] = MEMORY[0x1E0C809B0];
            v328[1] = 0x40000000;
            v328[2] = ___ZN11HALS_Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_195;
            v328[3] = &__block_descriptor_tmp_196;
            v328[4] = this;
            v328[5] = a8;
            v329 = v66;
            v67 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 56))(this);
            HALB_CommandGate::ExecuteCommand(v67, (uint64_t)v328);
            break;
          case 1853059700:
            if (a4 <= 7)
            {
              if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = "HALS_Device.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 4251;
                _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_SetPropertyData: bad property data size for kAudioDevicePropertyNominalSampleRate", buf, 0x12u);
              }
              v59 = __cxa_allocate_exception(0x10uLL);
              *(_QWORD *)v59 = &off_1E69A1B30;
              v59[2] = 561211770;
            }
            break;
          case 1869180523:
            if (a4 <= 3)
            {
              if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = "HALS_Device.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 4201;
                _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_SetPropertyData: bad property data size for kAudioDevicePropertyHogMode", buf, 0x12u);
              }
              v270 = __cxa_allocate_exception(0x10uLL);
              *(_QWORD *)v270 = &off_1E69A1B30;
              v270[2] = 561211770;
            }
            *(_QWORD *)buf = 0;
            *(_QWORD *)&buf[8] = buf;
            *(_QWORD *)&buf[16] = 0x2000000000;
            *(_DWORD *)v367 = 0;
            if (a8)
              v23 = *((_DWORD *)a8 + 58);
            else
              v23 = getpid();
            *(_DWORD *)v367 = v23;
            *(_QWORD *)theDict = 0;
            *(_QWORD *)&theDict[8] = theDict;
            *(_QWORD *)&theDict[16] = 0x2000000000;
            LODWORD(v362) = 0;
            *(_QWORD *)&v370[0].mSelector = 0;
            *(_QWORD *)&v370[0].mElement = v370;
            *(_QWORD *)&v370[1].mScope = 0x2000000000;
            LOBYTE(v371) = 0;
            v359[0] = MEMORY[0x1E0C809B0];
            v359[1] = 0x40000000;
            v359[2] = ___ZN11HALS_Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_182;
            v359[3] = &unk_1E699DFA0;
            v359[8] = a8;
            v359[4] = buf;
            v359[5] = v370;
            v359[7] = this;
            v359[6] = theDict;
            v107 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 56))(this);
            HALB_CommandGate::ExecuteCommand(v107, (uint64_t)v359);
            if (*(_DWORD *)(*(_QWORD *)&theDict[8] + 24))
            {
              v285 = __cxa_allocate_exception(0x10uLL);
              v286 = *(_DWORD *)(*(_QWORD *)&theDict[8] + 24);
              *(_QWORD *)v285 = &off_1E69A1B30;
              v285[2] = v286;
            }
            if (*(_BYTE *)(*(_QWORD *)&v370[0].mElement + 24))
            {
              v108 = (AMCP::Feature_Flags *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 400))(this);
              v110 = v108;
              if (v108)
                v108 = (AMCP::Feature_Flags *)(*(uint64_t (**)(AMCP::Feature_Flags *, _QWORD))(*(_QWORD *)v108 + 288))(v108, *(unsigned int *)(*(_QWORD *)&buf[8] + 24));
              if (AMCP::Feature_Flags::run_hybrid_hal(v108, v109))
              {
                v358[1] = 0;
                v358[0] = 0;
                HALS_System::GetInstance(&v308, 0, v358);
                HALS_IOContext_Manager::hog_mode_owner_changed(*(os_unfair_lock_s **)(v308 + 1392), this, *(_DWORD *)(*(_QWORD *)&buf[8] + 24));
                std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v308);
                std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v358);
              }
              v357 = 0;
              v356 = 0;
              HALS_System::GetInstance(&v308, 0, &v356);
              HALS_System::CheckForDefaultDeviceChanges((HALS_System *)v308);
              v111 = (std::__shared_weak_count *)*((_QWORD *)&v308 + 1);
              if (*((_QWORD *)&v308 + 1))
              {
                v112 = (unint64_t *)(*((_QWORD *)&v308 + 1) + 8);
                do
                  v113 = __ldaxr(v112);
                while (__stlxr(v113 - 1, v112));
                if (!v113)
                {
                  ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
                  std::__shared_weak_count::__release_weak(v111);
                }
              }
              v114 = v357;
              if (v357)
              {
                p_shared_owners = (unint64_t *)&v357->__shared_owners_;
                do
                  v116 = __ldaxr(p_shared_owners);
                while (__stlxr(v116 - 1, p_shared_owners));
                if (!v116)
                {
                  ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
                  std::__shared_weak_count::__release_weak(v114);
                }
              }
              v117 = (HALS_NotificationManager *)*((unsigned int *)this + 4);
              if (a8)
                v118 = *((unsigned int *)a8 + 4);
              else
                v118 = 0;
              *(_QWORD *)&v308 = 0x676C6F626F696E6BLL;
              DWORD2(v308) = 0;
              HALS_Object::PropertiesChanged(this, v117, v118, 1, (const AudioObjectPropertyAddress *)&v308);
              HALS_ObjectMap::ReleaseObject(v110, v169);
            }
            *a5 = *(_DWORD *)(*(_QWORD *)&buf[8] + 24);
            _Block_object_dispose(v370, 8);
LABEL_272:
            _Block_object_dispose(theDict, 8);
LABEL_279:
            v171 = buf;
LABEL_280:
            _Block_object_dispose(v171, 8);
            return;
          default:
            goto LABEL_432;
        }
        return;
      }
      if (mSelector != 1751413616)
      {
        if (mSelector != 1818454126)
          goto LABEL_432;
        if (a4 <= 7)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_Device.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4188;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_SetPropertyData: bad property data size for kAudioObjectPropertyElementName", buf, 0x12u);
          }
          v273 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v273 = &off_1E69A1B30;
          v273[2] = 561211770;
        }
        v360[0] = MEMORY[0x1E0C809B0];
        v360[1] = 0x40000000;
        v360[2] = ___ZN11HALS_Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke;
        v360[3] = &__block_descriptor_tmp_181_14220;
        v360[4] = this;
        v360[5] = a3;
        v360[6] = a5;
        v38 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v38, (uint64_t)v360);
        v39 = (HALS_NotificationManager *)*((unsigned int *)this + 4);
        if (a8)
          v40 = *((unsigned int *)a8 + 4);
        else
          v40 = 0;
        *(_DWORD *)buf = 1818454126;
        *(_QWORD *)&buf[4] = *(_QWORD *)&a3->mScope;
        HALS_Object::PropertiesChanged(this, v39, v40, 1, (const AudioObjectPropertyAddress *)buf);
        return;
      }
      if (a4 <= 7)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_Device.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 4488;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_SetPropertyData: bad property data size for kAudioDevicePropertyDSPDescription", buf, 0x12u);
        }
        v277 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v277 = &off_1E69A1B30;
        v277[2] = 561211770;
      }
      if (!a5)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_Device.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 4489;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_SetPropertyData: null CFStringRef specificed for kAudioDevicePropertyDSPDescription", buf, 0x12u);
        }
        v283 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v283 = &off_1E69A1B30;
        v283[2] = 2003329396;
      }
      *(_QWORD *)theDict = 0;
      *(_QWORD *)&theDict[8] = theDict;
      *(_QWORD *)&theDict[16] = 0x2000000000;
      LOBYTE(v362) = 0;
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x3002000000;
      *(_QWORD *)v367 = __Block_byref_object_copy__199;
      *(_QWORD *)&v367[8] = __Block_byref_object_dispose__200;
      *(_QWORD *)&v367[16] = 0;
      v80 = MEMORY[0x1E0C809B0];
      v325[0] = MEMORY[0x1E0C809B0];
      v325[1] = 0x40000000;
      v325[2] = ___ZN11HALS_Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_201;
      v325[3] = &unk_1E699E0F8;
      v325[5] = this;
      v325[4] = buf;
      v81 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v81, (uint64_t)v325);
      v83 = *(AMCP::Feature_Flags **)(*(_QWORD *)&buf[8] + 40);
      if (v83)
      {
        memset(v370, 0, sizeof(v370));
        (*(void (**)(AMCP::Feature_Flags *, AudioObjectPropertyAddress *))(*(_QWORD *)v83 + 216))(v83, v370);
        v324[0] = v80;
        v324[1] = 0x40000000;
        v324[2] = ___ZN11HALS_Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_2_203;
        v324[3] = &unk_1E699E120;
        v324[5] = this;
        v324[4] = theDict;
        v324[6] = a5;
        v324[7] = a3;
        v84 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v84, (uint64_t)v324);
        (*(void (**)(_QWORD, AudioObjectPropertyAddress *))(**(_QWORD **)(*(_QWORD *)&buf[8] + 40) + 224))(*(_QWORD *)(*(_QWORD *)&buf[8] + 40), v370);
        v83 = *(AMCP::Feature_Flags **)&v370[0].mSelector;
        if (*(_QWORD *)&v370[0].mSelector)
        {
          *(_QWORD *)&v370[0].mElement = *(_QWORD *)&v370[0].mSelector;
          operator delete(*(void **)&v370[0].mSelector);
        }
      }
      if (AMCP::Feature_Flags::run_hybrid_hal(v83, v82))
      {
        v323[0] = v80;
        v323[1] = 0x40000000;
        v323[2] = ___ZN11HALS_Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_3;
        v323[3] = &unk_1E699E148;
        v323[5] = this;
        v323[4] = theDict;
        v323[6] = a5;
        v323[7] = a3;
        v85 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v85, (uint64_t)v323);
      }
      if (!*(_BYTE *)(*(_QWORD *)&theDict[8] + 24))
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        {
          v370[0].mSelector = 136315394;
          *(_QWORD *)&v370[0].mScope = "HALS_Device.cpp";
          LOWORD(v370[1].mSelector) = 1024;
          *(AudioObjectPropertySelector *)((char *)&v370[1].mSelector + 2) = 4515;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  Could not set given DSP description.", (uint8_t *)v370, 0x12u);
        }
        v288 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v288 = &off_1E69A1B30;
        v288[2] = 1852797029;
      }
      v86 = (HALS_NotificationManager *)*((unsigned int *)this + 4);
      if (a8)
        v87 = *((unsigned int *)a8 + 4);
      else
        v87 = 0;
      mScope = a3->mScope;
      v370[0].mSelector = 1751413616;
      *(_QWORD *)&v370[0].mScope = mScope;
      HALS_Object::PropertiesChanged(this, v86, v87, 1, v370);
      _Block_object_dispose(buf, 8);
      HALS_ObjectMap::ReleaseObject(*(HALS_ObjectMap **)&v367[16], v148);
LABEL_289:
      v171 = theDict;
      goto LABEL_280;
    }
    if (mSelector <= 1936879203)
    {
      if (mSelector != 1934647619)
      {
        if (mSelector == 1934647636)
        {
          v41 = a3->mScope == 1768845428;
          if (a3->mScope == 1768845428)
          {
            AMCP::Log::Scope_Registry::get(v16);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
            v178 = **(NSObject ***)buf;
            std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
            if (os_log_type_enabled(v178, OS_LOG_TYPE_ERROR))
            {
              v179 = pthread_self();
              v180 = pthread_mach_thread_np(v179);
              *(_DWORD *)buf = 67109890;
              *(_DWORD *)&buf[4] = v180;
              *(_WORD *)&buf[8] = 2080;
              *(_QWORD *)&buf[10] = "HALS_Device.cpp";
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = 4628;
              *(_WORD *)v367 = 2080;
              *(_QWORD *)&v367[2] = "isInput == true";
              _os_log_error_impl(&dword_1B57BA000, v178, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::SetPropertyData: only valid for output scope kAudioDevicePropertySpatializationType", buf, 0x22u);
            }
            AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v312);
            v181 = __cxa_allocate_exception(0x40uLL);
            v310 = &off_1E69A1B30;
            v311 = 1852797029;
            *(_DWORD *)&theDict[8] = 1852797029;
            v364 = 0;
            v363 = 0;
            v365 = -1;
            *(_QWORD *)theDict = &off_1E699E510;
            v362 = 0;
            *(_QWORD *)&theDict[16] = &unk_1E699E538;
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)theDict);
            *(_QWORD *)&v367[8] = "virtual void HALS_Device::SetPropertyData(AudioObjectID, const AudioObjectPropertyAddr"
                                  "ess &, UInt32, const void *, UInt32, const void *, HALS_Client *)";
            *(_QWORD *)&v367[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
            LODWORD(v368) = 4628;
            applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v308);
            *(_OWORD *)&v370[0].mElement = v308;
            *(_QWORD *)&v370[0].mSelector = off_1E69A20A0;
            v371 = v309;
            v308 = 0uLL;
            v309 = 0;
            boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>((uint64_t)buf, (uint64_t)v370);
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)v181, (uint64_t)buf);
          }
          if (!a5)
          {
            AMCP::Log::Scope_Registry::get(v16);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
            v200 = **(NSObject ***)buf;
            std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
            if (os_log_type_enabled(v200, OS_LOG_TYPE_ERROR))
            {
              v201 = pthread_self();
              v202 = pthread_mach_thread_np(v201);
              *(_DWORD *)buf = 67109890;
              *(_DWORD *)&buf[4] = v202;
              *(_WORD *)&buf[8] = 2080;
              *(_QWORD *)&buf[10] = "HALS_Device.cpp";
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = 4629;
              *(_WORD *)v367 = 2080;
              *(_QWORD *)&v367[2] = "inData == nullptr";
              _os_log_error_impl(&dword_1B57BA000, v200, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::SetPropertyData: inData is nullptr for kAudioDevicePropertySpatializationType", buf, 0x22u);
            }
            AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v312);
            v203 = __cxa_allocate_exception(0x40uLL);
            v310 = &off_1E69A1B30;
            v311 = 1852797029;
            *(_DWORD *)&theDict[8] = 1852797029;
            v364 = 0;
            v363 = 0;
            v365 = -1;
            *(_QWORD *)theDict = &off_1E699E510;
            v362 = 0;
            *(_QWORD *)&theDict[16] = &unk_1E699E538;
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)theDict);
            *(_QWORD *)&v367[8] = "virtual void HALS_Device::SetPropertyData(AudioObjectID, const AudioObjectPropertyAddr"
                                  "ess &, UInt32, const void *, UInt32, const void *, HALS_Client *)";
            *(_QWORD *)&v367[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
            LODWORD(v368) = 4629;
            applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v308);
            *(_OWORD *)&v370[0].mElement = v308;
            *(_QWORD *)&v370[0].mSelector = off_1E69A20A0;
            v371 = v309;
            v308 = 0uLL;
            v309 = 0;
            boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>((uint64_t)buf, (uint64_t)v370);
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)v203, (uint64_t)buf);
          }
          if (a4 != 4)
          {
            AMCP::Log::Scope_Registry::get(v16);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
            v220 = **(NSObject ***)buf;
            std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
            if (os_log_type_enabled(v220, OS_LOG_TYPE_ERROR))
            {
              v221 = pthread_self();
              v222 = pthread_mach_thread_np(v221);
              *(_DWORD *)buf = 67109890;
              *(_DWORD *)&buf[4] = v222;
              *(_WORD *)&buf[8] = 2080;
              *(_QWORD *)&buf[10] = "HALS_Device.cpp";
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = 4630;
              *(_WORD *)v367 = 2080;
              *(_QWORD *)&v367[2] = "inDataSize != sizeof(UInt32)";
              _os_log_error_impl(&dword_1B57BA000, v220, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::SetPropertyData: inDataSize is not UInt32 for kAudioDevicePropertySpatializationType", buf, 0x22u);
            }
            AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v312);
            v223 = __cxa_allocate_exception(0x40uLL);
            v310 = &off_1E69A1B30;
            v311 = 1852797029;
            *(_DWORD *)&theDict[8] = 1852797029;
            v364 = 0;
            v363 = 0;
            v365 = -1;
            *(_QWORD *)theDict = &off_1E699E510;
            v362 = 0;
            *(_QWORD *)&theDict[16] = &unk_1E699E538;
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)theDict);
            *(_QWORD *)&v367[8] = "virtual void HALS_Device::SetPropertyData(AudioObjectID, const AudioObjectPropertyAddr"
                                  "ess &, UInt32, const void *, UInt32, const void *, HALS_Client *)";
            *(_QWORD *)&v367[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
            LODWORD(v368) = 4630;
            applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v308);
            *(_OWORD *)&v370[0].mElement = v308;
            *(_QWORD *)&v370[0].mSelector = off_1E69A20A0;
            v371 = v309;
            v308 = 0uLL;
            v309 = 0;
            boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>((uint64_t)buf, (uint64_t)v370);
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)v223, (uint64_t)buf);
          }
          v42 = *a5;
          if (*a5 >= 3u)
          {
            AMCP::Log::Scope_Registry::get(v16);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
            v236 = **(NSObject ***)buf;
            std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
            if (os_log_type_enabled(v236, OS_LOG_TYPE_ERROR))
            {
              v237 = pthread_self();
              v238 = pthread_mach_thread_np(v237);
              *(_DWORD *)buf = 67109890;
              *(_DWORD *)&buf[4] = v238;
              *(_WORD *)&buf[8] = 2080;
              *(_QWORD *)&buf[10] = "HALS_Device.cpp";
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = 4633;
              *(_WORD *)v367 = 2080;
              *(_QWORD *)&v367[2] = "dataValue > kAudioDevicePropertySpatializationTypeSpatialize";
              _os_log_error_impl(&dword_1B57BA000, v236, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::SetPropertyData inData is an invalid value for kAudioDevicePropertySpatializationType", buf, 0x22u);
            }
            AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v312);
            v239 = __cxa_allocate_exception(0x40uLL);
            v310 = &off_1E69A1B30;
            v311 = 1852797029;
            *(_DWORD *)&theDict[8] = 1852797029;
            v364 = 0;
            v363 = 0;
            v365 = -1;
            *(_QWORD *)theDict = &off_1E699E510;
            v362 = 0;
            *(_QWORD *)&theDict[16] = &unk_1E699E538;
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)theDict);
            *(_QWORD *)&v367[8] = "virtual void HALS_Device::SetPropertyData(AudioObjectID, const AudioObjectPropertyAddr"
                                  "ess &, UInt32, const void *, UInt32, const void *, HALS_Client *)";
            *(_QWORD *)&v367[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
            LODWORD(v368) = 4633;
            applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v308);
            *(_OWORD *)&v370[0].mElement = v308;
            *(_QWORD *)&v370[0].mSelector = off_1E69A20A0;
            v371 = v309;
            v308 = 0uLL;
            v309 = 0;
            boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>((uint64_t)buf, (uint64_t)v370);
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)v239, (uint64_t)buf);
          }
          *(_QWORD *)buf = 0;
          *(_QWORD *)&buf[8] = buf;
          *(_QWORD *)&buf[16] = 0x2000000000;
          v367[0] = 0;
          v302[0] = MEMORY[0x1E0C809B0];
          v302[1] = 0x40000000;
          v302[2] = ___ZN11HALS_Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_215;
          v302[3] = &unk_1E699E1E8;
          v303 = v42;
          v302[4] = buf;
          v302[5] = this;
          v304 = v41;
          v302[6] = a8;
          v43 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v43, (uint64_t)v302);
          if (*(_BYTE *)(*(_QWORD *)&buf[8] + 24))
          {
            v44 = (HALS_NotificationManager *)*((unsigned int *)this + 4);
            if (a8)
              v45 = *((unsigned int *)a8 + 4);
            else
              v45 = 0;
            strcpy(theDict, "TaPsptuo");
            theDict[9] = 0;
            *(_WORD *)&theDict[10] = 0;
            HALS_Object::PropertiesChanged(this, v44, v45, 1, (const AudioObjectPropertyAddress *)theDict);
          }
          goto LABEL_279;
        }
        goto LABEL_432;
      }
      if (a3->mScope == 1768845428)
      {
        AMCP::Log::Scope_Registry::get(v16);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v191 = **(NSObject ***)buf;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        if (os_log_type_enabled(v191, OS_LOG_TYPE_ERROR))
        {
          v192 = pthread_self();
          v193 = pthread_mach_thread_np(v192);
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = v193;
          *(_WORD *)&buf[8] = 2080;
          *(_QWORD *)&buf[10] = "HALS_Device.cpp";
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = 4663;
          *(_WORD *)v367 = 2080;
          *(_QWORD *)&v367[2] = "isInput == true";
          _os_log_error_impl(&dword_1B57BA000, v191, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::SetPropertyData: only valid for output scope kAudioDevicePropertySpatializationVirtualChannelLayout", buf, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v312);
        v194 = __cxa_allocate_exception(0x40uLL);
        v310 = &off_1E69A1B30;
        v311 = 1852797029;
        *(_DWORD *)&theDict[8] = 1852797029;
        v364 = 0;
        v363 = 0;
        v365 = -1;
        *(_QWORD *)theDict = &off_1E699E510;
        v362 = 0;
        *(_QWORD *)&theDict[16] = &unk_1E699E538;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)theDict);
        *(_QWORD *)&v367[8] = "virtual void HALS_Device::SetPropertyData(AudioObjectID, const AudioObjectPropertyAddress "
                              "&, UInt32, const void *, UInt32, const void *, HALS_Client *)";
        *(_QWORD *)&v367[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
        LODWORD(v368) = 4663;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v308);
        *(_OWORD *)&v370[0].mElement = v308;
        *(_QWORD *)&v370[0].mSelector = off_1E69A20A0;
        v371 = v309;
        v308 = 0uLL;
        v309 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>((uint64_t)buf, (uint64_t)v370);
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)v194, (uint64_t)buf);
      }
      if (!a5)
      {
        AMCP::Log::Scope_Registry::get(v16);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v212 = **(NSObject ***)buf;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        if (os_log_type_enabled(v212, OS_LOG_TYPE_ERROR))
        {
          v213 = pthread_self();
          v214 = pthread_mach_thread_np(v213);
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = v214;
          *(_WORD *)&buf[8] = 2080;
          *(_QWORD *)&buf[10] = "HALS_Device.cpp";
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = 4665;
          *(_WORD *)v367 = 2080;
          *(_QWORD *)&v367[2] = "inData == nullptr";
          _os_log_error_impl(&dword_1B57BA000, v212, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::SetPropertyData: inData is nullptr for kAudioDevicePropertySpatializationVirtualChannelLayout", buf, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v312);
        v215 = __cxa_allocate_exception(0x40uLL);
        v310 = &off_1E69A1B30;
        v311 = 1852797029;
        *(_DWORD *)&theDict[8] = 1852797029;
        v364 = 0;
        v363 = 0;
        v365 = -1;
        *(_QWORD *)theDict = &off_1E699E510;
        v362 = 0;
        *(_QWORD *)&theDict[16] = &unk_1E699E538;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)theDict);
        *(_QWORD *)&v367[8] = "virtual void HALS_Device::SetPropertyData(AudioObjectID, const AudioObjectPropertyAddress "
                              "&, UInt32, const void *, UInt32, const void *, HALS_Client *)";
        *(_QWORD *)&v367[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
        LODWORD(v368) = 4665;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v308);
        *(_OWORD *)&v370[0].mElement = v308;
        *(_QWORD *)&v370[0].mSelector = off_1E69A20A0;
        v371 = v309;
        v308 = 0uLL;
        v309 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>((uint64_t)buf, (uint64_t)v370);
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)v215, (uint64_t)buf);
      }
      v88 = caulk::numeric::exceptional_mul<unsigned int>(a5[2]);
      v89 = (AMCP::Log::Scope_Registry *)caulk::numeric::exceptional_add<unsigned int>(v88);
      if (v89 > a4)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_Device.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 4667;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_SetPropertyData: kAudioDevicePropertySpatializationVirtualChannelLayout: the provided size is smaller than what is specified in the data", buf, 0x12u);
        }
        v289 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v289 = &off_1E69A1B30;
        v289[2] = 561211770;
      }
      if (!a8)
      {
        AMCP::Log::Scope_Registry::get(v89);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v228 = **(NSObject ***)buf;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        if (os_log_type_enabled(v228, OS_LOG_TYPE_ERROR))
        {
          v229 = pthread_self();
          v230 = pthread_mach_thread_np(v229);
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = v230;
          *(_WORD *)&buf[8] = 2080;
          *(_QWORD *)&buf[10] = "HALS_Device.cpp";
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = 4669;
          *(_WORD *)v367 = 2080;
          *(_QWORD *)&v367[2] = "inClient == nullptr";
          _os_log_error_impl(&dword_1B57BA000, v228, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::SetPropertyData: inClient is null for kAudioDevicePropertySpatializationVirtualChannelLayout", buf, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v312);
        v231 = __cxa_allocate_exception(0x40uLL);
        v310 = &off_1E69A1B30;
        v311 = 1852797029;
        *(_DWORD *)&theDict[8] = 1852797029;
        v364 = 0;
        v363 = 0;
        v365 = -1;
        *(_QWORD *)theDict = &off_1E699E510;
        v362 = 0;
        *(_QWORD *)&theDict[16] = &unk_1E699E538;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)theDict);
        *(_QWORD *)&v367[8] = "virtual void HALS_Device::SetPropertyData(AudioObjectID, const AudioObjectPropertyAddress "
                              "&, UInt32, const void *, UInt32, const void *, HALS_Client *)";
        *(_QWORD *)&v367[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
        LODWORD(v368) = 4669;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v308);
        *(_OWORD *)&v370[0].mElement = v308;
        *(_QWORD *)&v370[0].mSelector = off_1E69A20A0;
        v371 = v309;
        v308 = 0uLL;
        v309 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>((uint64_t)buf, (uint64_t)v370);
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)v231, (uint64_t)buf);
      }
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      *(_QWORD *)&buf[8] = 0x40000000;
      *(_QWORD *)&buf[16] = ___ZN11HALS_Device35SetDSPVirtualChannelLayoutForClientEbP11HALS_ClientPK18AudioChannelLayout_block_invoke;
      *(_QWORD *)v367 = &__block_descriptor_tmp_256;
      v369 = 0;
      *(_QWORD *)&v367[8] = this;
      *(_QWORD *)&v367[16] = a8;
      v368 = a5;
      v90 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v90, (uint64_t)buf);
      return;
    }
    if (mSelector != 1936879204)
    {
      if (mSelector == 1983996971)
      {
        v60 = a3->mScope == 1768845428;
        if (a3->mScope != 1768845428)
        {
          AMCP::Log::Scope_Registry::get(v16);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v182 = **(NSObject ***)buf;
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
          if (os_log_type_enabled(v182, OS_LOG_TYPE_ERROR))
          {
            v184 = pthread_self();
            v185 = pthread_mach_thread_np(v184);
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)&buf[4] = v185;
            *(_WORD *)&buf[8] = 2080;
            *(_QWORD *)&buf[10] = "HALS_Device.cpp";
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = 4678;
            *(_WORD *)v367 = 2080;
            *(_QWORD *)&v367[2] = "isInput == false";
            _os_log_error_impl(&dword_1B57BA000, v182, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::SetPropertyData: only valid for input scope kAudioDevicePropertyVoiceActivityDetectionEnable", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v312);
          v186 = __cxa_allocate_exception(0x40uLL);
          v310 = &off_1E69A1B30;
          v311 = 1852797029;
          *(_DWORD *)&theDict[8] = 1852797029;
          v364 = 0;
          v363 = 0;
          v365 = -1;
          *(_QWORD *)theDict = &off_1E699E510;
          v362 = 0;
          *(_QWORD *)&theDict[16] = &unk_1E699E538;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)theDict);
          *(_QWORD *)&v367[8] = "virtual void HALS_Device::SetPropertyData(AudioObjectID, const AudioObjectPropertyAddres"
                                "s &, UInt32, const void *, UInt32, const void *, HALS_Client *)";
          *(_QWORD *)&v367[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
          LODWORD(v368) = 4678;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v308);
          *(_OWORD *)&v370[0].mElement = v308;
          *(_QWORD *)&v370[0].mSelector = off_1E69A20A0;
          v371 = v309;
          v308 = 0uLL;
          v309 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>((uint64_t)buf, (uint64_t)v370);
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)v186, (uint64_t)buf);
        }
        if (!a5)
        {
          AMCP::Log::Scope_Registry::get(v16);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v204 = **(NSObject ***)buf;
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
          if (os_log_type_enabled(v204, OS_LOG_TYPE_ERROR))
          {
            v205 = pthread_self();
            v206 = pthread_mach_thread_np(v205);
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)&buf[4] = v206;
            *(_WORD *)&buf[8] = 2080;
            *(_QWORD *)&buf[10] = "HALS_Device.cpp";
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = 4679;
            *(_WORD *)v367 = 2080;
            *(_QWORD *)&v367[2] = "inData == nullptr";
            _os_log_error_impl(&dword_1B57BA000, v204, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::SetPropertyData: inData is nullptr for kAudioDevicePropertyVoiceActivityDetectionEnable", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v312);
          v207 = __cxa_allocate_exception(0x40uLL);
          v310 = &off_1E69A1B30;
          v311 = 1852797029;
          *(_DWORD *)&theDict[8] = 1852797029;
          v364 = 0;
          v363 = 0;
          v365 = -1;
          *(_QWORD *)theDict = &off_1E699E510;
          v362 = 0;
          *(_QWORD *)&theDict[16] = &unk_1E699E538;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)theDict);
          *(_QWORD *)&v367[8] = "virtual void HALS_Device::SetPropertyData(AudioObjectID, const AudioObjectPropertyAddres"
                                "s &, UInt32, const void *, UInt32, const void *, HALS_Client *)";
          *(_QWORD *)&v367[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
          LODWORD(v368) = 4679;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v308);
          *(_OWORD *)&v370[0].mElement = v308;
          *(_QWORD *)&v370[0].mSelector = off_1E69A20A0;
          v371 = v309;
          v308 = 0uLL;
          v309 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>((uint64_t)buf, (uint64_t)v370);
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)v207, (uint64_t)buf);
        }
        if (a4 != 4)
        {
          AMCP::Log::Scope_Registry::get(v16);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v224 = **(NSObject ***)buf;
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
          if (os_log_type_enabled(v224, OS_LOG_TYPE_ERROR))
          {
            v225 = pthread_self();
            v226 = pthread_mach_thread_np(v225);
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)&buf[4] = v226;
            *(_WORD *)&buf[8] = 2080;
            *(_QWORD *)&buf[10] = "HALS_Device.cpp";
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = 4680;
            *(_WORD *)v367 = 2080;
            *(_QWORD *)&v367[2] = "inDataSize != sizeof(UInt32)";
            _os_log_error_impl(&dword_1B57BA000, v224, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::SetPropertyData: inDataSize is not UInt32 for kAudioDevicePropertyVoiceActivityDetectionEnable", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v312);
          v227 = __cxa_allocate_exception(0x40uLL);
          v310 = &off_1E69A1B30;
          v311 = 1852797029;
          *(_DWORD *)&theDict[8] = 1852797029;
          v364 = 0;
          v363 = 0;
          v365 = -1;
          *(_QWORD *)theDict = &off_1E699E510;
          v362 = 0;
          *(_QWORD *)&theDict[16] = &unk_1E699E538;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)theDict);
          *(_QWORD *)&v367[8] = "virtual void HALS_Device::SetPropertyData(AudioObjectID, const AudioObjectPropertyAddres"
                                "s &, UInt32, const void *, UInt32, const void *, HALS_Client *)";
          *(_QWORD *)&v367[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
          LODWORD(v368) = 4680;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v308);
          *(_OWORD *)&v370[0].mElement = v308;
          *(_QWORD *)&v370[0].mSelector = off_1E69A20A0;
          v371 = v309;
          v308 = 0uLL;
          v309 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>((uint64_t)buf, (uint64_t)v370);
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)v227, (uint64_t)buf);
        }
        if (!a8)
        {
          AMCP::Log::Scope_Registry::get(v16);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v240 = **(NSObject ***)buf;
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
          if (os_log_type_enabled(v240, OS_LOG_TYPE_ERROR))
          {
            v241 = pthread_self();
            v242 = pthread_mach_thread_np(v241);
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)&buf[4] = v242;
            *(_WORD *)&buf[8] = 2080;
            *(_QWORD *)&buf[10] = "HALS_Device.cpp";
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = 4681;
            *(_WORD *)v367 = 2080;
            *(_QWORD *)&v367[2] = "inClient == nullptr";
            _os_log_error_impl(&dword_1B57BA000, v240, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::SetPropertyData: inClient is null for kAudioDevicePropertyVoiceActivityDetectionEnable", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v312);
          v243 = __cxa_allocate_exception(0x40uLL);
          v310 = &off_1E69A1B30;
          v311 = 1852797029;
          *(_DWORD *)&theDict[8] = 1852797029;
          v364 = 0;
          v363 = 0;
          v365 = -1;
          *(_QWORD *)theDict = &off_1E699E510;
          v362 = 0;
          *(_QWORD *)&theDict[16] = &unk_1E699E538;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)theDict);
          *(_QWORD *)&v367[8] = "virtual void HALS_Device::SetPropertyData(AudioObjectID, const AudioObjectPropertyAddres"
                                "s &, UInt32, const void *, UInt32, const void *, HALS_Client *)";
          *(_QWORD *)&v367[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
          LODWORD(v368) = 4681;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v308);
          *(_OWORD *)&v370[0].mElement = v308;
          *(_QWORD *)&v370[0].mSelector = off_1E69A20A0;
          v371 = v309;
          v308 = 0uLL;
          v309 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>((uint64_t)buf, (uint64_t)v370);
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)v243, (uint64_t)buf);
        }
        v61 = atomic_load((unsigned __int8 *)a8 + 260);
        if ((v61 & 1) == 0)
        {
          AMCP::Log::Scope_Registry::get(v16);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v248 = **(NSObject ***)buf;
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
          if (os_log_type_enabled(v248, OS_LOG_TYPE_ERROR))
          {
            v249 = pthread_self();
            v250 = pthread_mach_thread_np(v249);
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)&buf[4] = v250;
            *(_WORD *)&buf[8] = 2080;
            *(_QWORD *)&buf[10] = "HALS_Device.cpp";
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = 4682;
            *(_WORD *)v367 = 2080;
            *(_QWORD *)&v367[2] = "!inClient->SandboxAllowsMicAccess()";
            _os_log_error_impl(&dword_1B57BA000, v248, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::SetPropertyData: inClient does not have permission to set kAudioDevicePropertyVoiceActivityDetectionEnable", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v312);
          v251 = __cxa_allocate_exception(0x40uLL);
          v310 = &off_1E69A1B30;
          v311 = 560492391;
          *(_DWORD *)&theDict[8] = 560492391;
          v364 = 0;
          v363 = 0;
          v365 = -1;
          *(_QWORD *)theDict = &off_1E699E510;
          v362 = 0;
          *(_QWORD *)&theDict[16] = &unk_1E699E538;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)theDict);
          *(_QWORD *)&v367[8] = "virtual void HALS_Device::SetPropertyData(AudioObjectID, const AudioObjectPropertyAddres"
                                "s &, UInt32, const void *, UInt32, const void *, HALS_Client *)";
          *(_QWORD *)&v367[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
          LODWORD(v368) = 4682;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v308);
          *(_OWORD *)&v370[0].mElement = v308;
          *(_QWORD *)&v370[0].mSelector = off_1E69A20A0;
          v371 = v309;
          v308 = 0uLL;
          v309 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>((uint64_t)buf, (uint64_t)v370);
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)v251, (uint64_t)buf);
        }
        v62 = *a5;
        if (*a5 >= 2u)
        {
          AMCP::Log::Scope_Registry::get(v16);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v256 = **(NSObject ***)buf;
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
          if (os_log_type_enabled(v256, OS_LOG_TYPE_ERROR))
          {
            v257 = pthread_self();
            v258 = pthread_mach_thread_np(v257);
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)&buf[4] = v258;
            *(_WORD *)&buf[8] = 2080;
            *(_QWORD *)&buf[10] = "HALS_Device.cpp";
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = 4685;
            *(_WORD *)v367 = 2080;
            *(_QWORD *)&v367[2] = "dataValue > 1";
            _os_log_error_impl(&dword_1B57BA000, v256, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::SetPropertyData inData is an invalid value for kAudioDevicePropertyVoiceActivityDetectionEnable", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v312);
          v259 = __cxa_allocate_exception(0x40uLL);
          v310 = &off_1E69A1B30;
          v311 = 1852797029;
          *(_DWORD *)&theDict[8] = 1852797029;
          v364 = 0;
          v363 = 0;
          v365 = -1;
          *(_QWORD *)theDict = &off_1E699E510;
          v362 = 0;
          *(_QWORD *)&theDict[16] = &unk_1E699E538;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)theDict);
          *(_QWORD *)&v367[8] = "virtual void HALS_Device::SetPropertyData(AudioObjectID, const AudioObjectPropertyAddres"
                                "s &, UInt32, const void *, UInt32, const void *, HALS_Client *)";
          *(_QWORD *)&v367[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
          LODWORD(v368) = 4685;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v308);
          *(_OWORD *)&v370[0].mElement = v308;
          *(_QWORD *)&v370[0].mSelector = off_1E69A20A0;
          v371 = v309;
          v308 = 0uLL;
          v309 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>((uint64_t)buf, (uint64_t)v370);
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)v259, (uint64_t)buf);
        }
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        *(_QWORD *)&buf[16] = 0x2000000000;
        v367[0] = 0;
        v299[0] = MEMORY[0x1E0C809B0];
        v299[1] = 0x40000000;
        v299[2] = ___ZN11HALS_Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_218;
        v299[3] = &unk_1E699E210;
        v300 = v62;
        v299[4] = buf;
        v299[5] = this;
        v301 = v60;
        v299[6] = a8;
        v63 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v63, (uint64_t)v299);
        if (*(_BYTE *)(*(_QWORD *)&buf[8] + 24))
        {
          v64 = (HALS_NotificationManager *)*((unsigned int *)this + 4);
          v65 = *((unsigned int *)a8 + 4);
          strcpy(theDict, "+dAvtpni");
          theDict[9] = 0;
          *(_WORD *)&theDict[10] = 0;
          HALS_Object::PropertiesChanged(this, v64, v65, 1, (const AudioObjectPropertyAddress *)theDict);
        }
        goto LABEL_279;
      }
      if (mSelector == 1986622324)
      {
        NumberStreamsExcludingReferenceStreams = (AMCP::Log::Scope_Registry *)HALS_Device::GetNumberStreamsExcludingReferenceStreams(this, 1);
        if (!(_DWORD)NumberStreamsExcludingReferenceStreams)
        {
          AMCP::Log::Scope_Registry::get(NumberStreamsExcludingReferenceStreams);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v174 = **(NSObject ***)buf;
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
          if (os_log_type_enabled(v174, OS_LOG_TYPE_ERROR))
          {
            v175 = pthread_self();
            v176 = pthread_mach_thread_np(v175);
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)&buf[4] = v176;
            *(_WORD *)&buf[8] = 2080;
            *(_QWORD *)&buf[10] = "HALS_Device.cpp";
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = 4589;
            *(_WORD *)v367 = 2080;
            *(_QWORD *)&v367[2] = "hasNonReferenceInputStream == false";
            _os_log_error_impl(&dword_1B57BA000, v174, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::SetPropertyData: Device does not have non-reference input streams kAudioDevicePropertyVocalIsolationType", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v312);
          v177 = __cxa_allocate_exception(0x40uLL);
          v310 = &off_1E69A1B30;
          v311 = 1852797029;
          *(_DWORD *)&theDict[8] = 1852797029;
          v364 = 0;
          v363 = 0;
          v365 = -1;
          *(_QWORD *)theDict = &off_1E699E510;
          v362 = 0;
          *(_QWORD *)&theDict[16] = &unk_1E699E538;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)theDict);
          *(_QWORD *)&v367[8] = "virtual void HALS_Device::SetPropertyData(AudioObjectID, const AudioObjectPropertyAddres"
                                "s &, UInt32, const void *, UInt32, const void *, HALS_Client *)";
          *(_QWORD *)&v367[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
          LODWORD(v368) = 4589;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v308);
          *(_OWORD *)&v370[0].mElement = v308;
          *(_QWORD *)&v370[0].mSelector = off_1E69A20A0;
          v371 = v309;
          v308 = 0uLL;
          v309 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>((uint64_t)buf, (uint64_t)v370);
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)v177, (uint64_t)buf);
        }
        v31 = a3->mScope == 1768845428;
        if (a3->mScope != 1768845428)
        {
          AMCP::Log::Scope_Registry::get(NumberStreamsExcludingReferenceStreams);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v195 = **(NSObject ***)buf;
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
          if (os_log_type_enabled(v195, OS_LOG_TYPE_ERROR))
          {
            v197 = pthread_self();
            v198 = pthread_mach_thread_np(v197);
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)&buf[4] = v198;
            *(_WORD *)&buf[8] = 2080;
            *(_QWORD *)&buf[10] = "HALS_Device.cpp";
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = 4591;
            *(_WORD *)v367 = 2080;
            *(_QWORD *)&v367[2] = "isInput == false";
            _os_log_error_impl(&dword_1B57BA000, v195, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::SetPropertyData: only valid for input scope kAudioDevicePropertyVocalIsolationType", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v312);
          v199 = __cxa_allocate_exception(0x40uLL);
          v310 = &off_1E69A1B30;
          v311 = 1852797029;
          *(_DWORD *)&theDict[8] = 1852797029;
          v364 = 0;
          v363 = 0;
          v365 = -1;
          *(_QWORD *)theDict = &off_1E699E510;
          v362 = 0;
          *(_QWORD *)&theDict[16] = &unk_1E699E538;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)theDict);
          *(_QWORD *)&v367[8] = "virtual void HALS_Device::SetPropertyData(AudioObjectID, const AudioObjectPropertyAddres"
                                "s &, UInt32, const void *, UInt32, const void *, HALS_Client *)";
          *(_QWORD *)&v367[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
          LODWORD(v368) = 4591;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v308);
          *(_OWORD *)&v370[0].mElement = v308;
          *(_QWORD *)&v370[0].mSelector = off_1E69A20A0;
          v371 = v309;
          v308 = 0uLL;
          v309 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>((uint64_t)buf, (uint64_t)v370);
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)v199, (uint64_t)buf);
        }
        if (!a5)
        {
          AMCP::Log::Scope_Registry::get(NumberStreamsExcludingReferenceStreams);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v216 = **(NSObject ***)buf;
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
          if (os_log_type_enabled(v216, OS_LOG_TYPE_ERROR))
          {
            v217 = pthread_self();
            v218 = pthread_mach_thread_np(v217);
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)&buf[4] = v218;
            *(_WORD *)&buf[8] = 2080;
            *(_QWORD *)&buf[10] = "HALS_Device.cpp";
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = 4592;
            *(_WORD *)v367 = 2080;
            *(_QWORD *)&v367[2] = "inData == nullptr";
            _os_log_error_impl(&dword_1B57BA000, v216, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::SetPropertyData: inData is nullptr for kAudioDevicePropertyVocalIsolationType", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v312);
          v219 = __cxa_allocate_exception(0x40uLL);
          v310 = &off_1E69A1B30;
          v311 = 1852797029;
          *(_DWORD *)&theDict[8] = 1852797029;
          v364 = 0;
          v363 = 0;
          v365 = -1;
          *(_QWORD *)theDict = &off_1E699E510;
          v362 = 0;
          *(_QWORD *)&theDict[16] = &unk_1E699E538;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)theDict);
          *(_QWORD *)&v367[8] = "virtual void HALS_Device::SetPropertyData(AudioObjectID, const AudioObjectPropertyAddres"
                                "s &, UInt32, const void *, UInt32, const void *, HALS_Client *)";
          *(_QWORD *)&v367[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
          LODWORD(v368) = 4592;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v308);
          *(_OWORD *)&v370[0].mElement = v308;
          *(_QWORD *)&v370[0].mSelector = off_1E69A20A0;
          v371 = v309;
          v308 = 0uLL;
          v309 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>((uint64_t)buf, (uint64_t)v370);
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)v219, (uint64_t)buf);
        }
        if (a4 != 4)
        {
          AMCP::Log::Scope_Registry::get(NumberStreamsExcludingReferenceStreams);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v232 = **(NSObject ***)buf;
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
          if (os_log_type_enabled(v232, OS_LOG_TYPE_ERROR))
          {
            v233 = pthread_self();
            v234 = pthread_mach_thread_np(v233);
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)&buf[4] = v234;
            *(_WORD *)&buf[8] = 2080;
            *(_QWORD *)&buf[10] = "HALS_Device.cpp";
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = 4593;
            *(_WORD *)v367 = 2080;
            *(_QWORD *)&v367[2] = "inDataSize != sizeof(UInt32)";
            _os_log_error_impl(&dword_1B57BA000, v232, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::SetPropertyData: inDataSize is not UInt32 for kAudioDevicePropertyVocalIsolationType", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v312);
          v235 = __cxa_allocate_exception(0x40uLL);
          v310 = &off_1E69A1B30;
          v311 = 1852797029;
          *(_DWORD *)&theDict[8] = 1852797029;
          v364 = 0;
          v363 = 0;
          v365 = -1;
          *(_QWORD *)theDict = &off_1E699E510;
          v362 = 0;
          *(_QWORD *)&theDict[16] = &unk_1E699E538;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)theDict);
          *(_QWORD *)&v367[8] = "virtual void HALS_Device::SetPropertyData(AudioObjectID, const AudioObjectPropertyAddres"
                                "s &, UInt32, const void *, UInt32, const void *, HALS_Client *)";
          *(_QWORD *)&v367[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
          LODWORD(v368) = 4593;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v308);
          *(_OWORD *)&v370[0].mElement = v308;
          *(_QWORD *)&v370[0].mSelector = off_1E69A20A0;
          v371 = v309;
          v308 = 0uLL;
          v309 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>((uint64_t)buf, (uint64_t)v370);
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)v235, (uint64_t)buf);
        }
        if (!a8)
        {
          AMCP::Log::Scope_Registry::get(NumberStreamsExcludingReferenceStreams);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v244 = **(NSObject ***)buf;
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
          if (os_log_type_enabled(v244, OS_LOG_TYPE_ERROR))
          {
            v245 = pthread_self();
            v246 = pthread_mach_thread_np(v245);
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)&buf[4] = v246;
            *(_WORD *)&buf[8] = 2080;
            *(_QWORD *)&buf[10] = "HALS_Device.cpp";
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = 4594;
            *(_WORD *)v367 = 2080;
            *(_QWORD *)&v367[2] = "inClient == nullptr";
            _os_log_error_impl(&dword_1B57BA000, v244, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::SetPropertyData: inClient is null for kAudioDevicePropertyVocalIsolationType", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v312);
          v247 = __cxa_allocate_exception(0x40uLL);
          v310 = &off_1E69A1B30;
          v311 = 1852797029;
          *(_DWORD *)&theDict[8] = 1852797029;
          v364 = 0;
          v363 = 0;
          v365 = -1;
          *(_QWORD *)theDict = &off_1E699E510;
          v362 = 0;
          *(_QWORD *)&theDict[16] = &unk_1E699E538;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)theDict);
          *(_QWORD *)&v367[8] = "virtual void HALS_Device::SetPropertyData(AudioObjectID, const AudioObjectPropertyAddres"
                                "s &, UInt32, const void *, UInt32, const void *, HALS_Client *)";
          *(_QWORD *)&v367[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
          LODWORD(v368) = 4594;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v308);
          *(_OWORD *)&v370[0].mElement = v308;
          *(_QWORD *)&v370[0].mSelector = off_1E69A20A0;
          v371 = v309;
          v308 = 0uLL;
          v309 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>((uint64_t)buf, (uint64_t)v370);
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)v247, (uint64_t)buf);
        }
        v32 = atomic_load((unsigned __int8 *)a8 + 260);
        if ((v32 & 1) == 0)
        {
          AMCP::Log::Scope_Registry::get(NumberStreamsExcludingReferenceStreams);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v252 = **(NSObject ***)buf;
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
          if (os_log_type_enabled(v252, OS_LOG_TYPE_ERROR))
          {
            v253 = pthread_self();
            v254 = pthread_mach_thread_np(v253);
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)&buf[4] = v254;
            *(_WORD *)&buf[8] = 2080;
            *(_QWORD *)&buf[10] = "HALS_Device.cpp";
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = 4595;
            *(_WORD *)v367 = 2080;
            *(_QWORD *)&v367[2] = "!inClient->SandboxAllowsMicAccess()";
            _os_log_error_impl(&dword_1B57BA000, v252, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::GetPropertyData: inClient does not have permission to set kAudioDevicePropertyVocalIsolationType", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v312);
          v255 = __cxa_allocate_exception(0x40uLL);
          v310 = &off_1E69A1B30;
          v311 = 560492391;
          *(_DWORD *)&theDict[8] = 560492391;
          v364 = 0;
          v363 = 0;
          v365 = -1;
          *(_QWORD *)theDict = &off_1E699E510;
          v362 = 0;
          *(_QWORD *)&theDict[16] = &unk_1E699E538;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)theDict);
          *(_QWORD *)&v367[8] = "virtual void HALS_Device::SetPropertyData(AudioObjectID, const AudioObjectPropertyAddres"
                                "s &, UInt32, const void *, UInt32, const void *, HALS_Client *)";
          *(_QWORD *)&v367[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
          LODWORD(v368) = 4595;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v308);
          *(_OWORD *)&v370[0].mElement = v308;
          *(_QWORD *)&v370[0].mSelector = off_1E69A20A0;
          v371 = v309;
          v308 = 0uLL;
          v309 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>((uint64_t)buf, (uint64_t)v370);
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)v255, (uint64_t)buf);
        }
        v33 = *a5;
        if (*a5 >= 3u)
        {
          AMCP::Log::Scope_Registry::get(NumberStreamsExcludingReferenceStreams);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v260 = **(NSObject ***)buf;
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
          if (os_log_type_enabled(v260, OS_LOG_TYPE_ERROR))
          {
            v261 = pthread_self();
            v262 = pthread_mach_thread_np(v261);
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)&buf[4] = v262;
            *(_WORD *)&buf[8] = 2080;
            *(_QWORD *)&buf[10] = "HALS_Device.cpp";
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = 4598;
            *(_WORD *)v367 = 2080;
            *(_QWORD *)&v367[2] = "dataValue > kAudioDevicePropertyVocalIsolationTypeBasic";
            _os_log_error_impl(&dword_1B57BA000, v260, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::SetPropertyData inData is an invalid value for kAudioDevicePropertyVocalIsolationType", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v312);
          v263 = __cxa_allocate_exception(0x40uLL);
          v310 = &off_1E69A1B30;
          v311 = 1852797029;
          *(_DWORD *)&theDict[8] = 1852797029;
          v364 = 0;
          v363 = 0;
          v365 = -1;
          *(_QWORD *)theDict = &off_1E699E510;
          v362 = 0;
          *(_QWORD *)&theDict[16] = &unk_1E699E538;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)theDict);
          *(_QWORD *)&v367[8] = "virtual void HALS_Device::SetPropertyData(AudioObjectID, const AudioObjectPropertyAddres"
                                "s &, UInt32, const void *, UInt32, const void *, HALS_Client *)";
          *(_QWORD *)&v367[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
          LODWORD(v368) = 4598;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v308);
          *(_OWORD *)&v370[0].mElement = v308;
          *(_QWORD *)&v370[0].mSelector = off_1E69A20A0;
          v371 = v309;
          v308 = 0uLL;
          v309 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>((uint64_t)buf, (uint64_t)v370);
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)v263, (uint64_t)buf);
        }
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        *(_QWORD *)&buf[16] = 0x2000000000;
        v367[0] = 0;
        v305[0] = MEMORY[0x1E0C809B0];
        v305[1] = 0x40000000;
        v305[2] = ___ZN11HALS_Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_212;
        v305[3] = &unk_1E699E1C0;
        v306 = v33;
        v305[4] = buf;
        v305[5] = this;
        v307 = v31;
        v305[6] = a8;
        v34 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v34, (uint64_t)v305);
        if (*(_BYTE *)(*(_QWORD *)&buf[8] + 24))
        {
          v35 = (HALS_NotificationManager *)*((unsigned int *)this + 4);
          v36 = *((unsigned int *)a8 + 4);
          strcpy(theDict, "tsivtpni");
          theDict[9] = 0;
          *(_WORD *)&theDict[10] = 0;
          HALS_Object::PropertiesChanged(this, v35, v36, 1, (const AudioObjectPropertyAddress *)theDict);
        }
        goto LABEL_279;
      }
      goto LABEL_432;
    }
    TotalNumberChannelsForClient = HALS_Device::GetTotalNumberChannelsForClient(this, a3->mScope == 1768845428, a8);
    v69 = caulk::numeric::exceptional_mul<unsigned int>(TotalNumberChannelsForClient);
    if (caulk::numeric::exceptional_add<unsigned int>(v69) > a4)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "HALS_Device.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 4295;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_SetPropertyData: bad property data size for kAudioDevicePropertyPreferredChannelLayout", buf, 0x12u);
      }
      v276 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v276 = &off_1E69A1B30;
      v276[2] = 561211770;
    }
    v70 = caulk::numeric::exceptional_mul<unsigned int>(a5[2]);
    if (caulk::numeric::exceptional_add<unsigned int>(v70) > a4)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "HALS_Device.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 4299;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_SetPropertyData: kAudioDevicePropertyPreferredChannelLayout: the provided size is smaller than what is specified in the data", buf, 0x12u);
      }
      v282 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v282 = &off_1E69A1B30;
      v282[2] = 561211770;
    }
    v351 = 0;
    v350 = 0;
    HALS_System::GetInstance(theDict, 0, &v350);
    *(_QWORD *)buf = HALS_SettingsManager::ReadSetting(*(HALS_SettingsManager **)(*(_QWORD *)theDict + 1408), *((const __CFString **)this + 14));
    *(_WORD *)&buf[8] = 1;
    v71 = *(std::__shared_weak_count **)&theDict[8];
    if (*(_QWORD *)&theDict[8])
    {
      v72 = (unint64_t *)(*(_QWORD *)&theDict[8] + 8);
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
    v74 = v351;
    if (v351)
    {
      v75 = (unint64_t *)&v351->__shared_owners_;
      do
        v76 = __ldaxr(v75);
      while (__stlxr(v76 - 1, v75));
      if (!v76)
      {
        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
        std::__shared_weak_count::__release_weak(v74);
      }
    }
    *(_QWORD *)theDict = 0;
    *(_WORD *)&theDict[8] = 257;
    if (*(_QWORD *)buf)
      CACFDictionary::SetCFMutableDictionaryFromCopy((CACFDictionary *)theDict, *(CFDictionaryRef *)buf);
    else
      CACFDictionary::SetCFMutableDictionaryToEmpty((CACFDictionary *)theDict);
    *(_QWORD *)&v370[0].mSelector = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
    LOWORD(v370[0].mElement) = 257;
    HALS_Device::ConstructDictionaryFromLayout((HALS_Device *)a5, (CFMutableDictionaryRef *)v370, v143);
    v144 = a3->mScope;
    if (v144 == 1869968496)
    {
      if (theDict[9] && *(_QWORD *)&v370[0].mSelector && *(_QWORD *)theDict)
        CFDictionarySetValue(*(CFMutableDictionaryRef *)theDict, CFSTR("output.surround"), *(const void **)&v370[0].mSelector);
      v348[1] = 0;
      v348[0] = 0;
      HALS_System::GetInstance(&v308, 0, v348);
      HALS_SettingsManager::WriteSetting(*(HALS_SettingsManager **)(v308 + 1408), *((CFTypeRef *)this + 14), *(const void **)theDict);
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v308);
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v348);
      v151 = (HALS_NotificationManager *)*((unsigned int *)this + 4);
      if (a8)
        v152 = *((unsigned int *)a8 + 4);
      else
        v152 = 0;
      *(_QWORD *)&v308 = 0x6F75747073726E64;
      DWORD2(v308) = 0;
      HALS_Object::PropertiesChanged(this, v151, v152, 1, (const AudioObjectPropertyAddress *)&v308);
    }
    else if (v144 == 1768845428)
    {
      if (theDict[9] && *(_QWORD *)&v370[0].mSelector && *(_QWORD *)theDict)
        CFDictionarySetValue(*(CFMutableDictionaryRef *)theDict, CFSTR("input.surround"), *(const void **)&v370[0].mSelector);
      v349[1] = 0;
      v349[0] = 0;
      HALS_System::GetInstance(&v308, 0, v349);
      HALS_SettingsManager::WriteSetting(*(HALS_SettingsManager **)(v308 + 1408), *((CFTypeRef *)this + 14), *(const void **)theDict);
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v308);
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v349);
      v145 = (HALS_NotificationManager *)*((unsigned int *)this + 4);
      if (a8)
        v146 = *((unsigned int *)a8 + 4);
      else
        v146 = 0;
      *(_QWORD *)&v308 = 0x696E707473726E64;
      DWORD2(v308) = 0;
      HALS_Object::PropertiesChanged(this, v145, v146, 1, (const AudioObjectPropertyAddress *)&v308);
    }
    CACFDictionary::~CACFDictionary((CACFDictionary *)v370);
LABEL_299:
    CACFDictionary::~CACFDictionary((CACFDictionary *)theDict);
    CACFDictionary::~CACFDictionary((CACFDictionary *)buf);
    return;
  }
  if (mSelector > 1684236337)
  {
    if (mSelector > 1684500593)
    {
      if (mSelector == 1684500594)
      {
        if (!a7)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_Device.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4563;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_SetPropertyData: inQualifierData is nullptr for kAudioDevicePropertyDSPGraphProperty", buf, 0x12u);
          }
          v280 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v280 = &off_1E69A1B30;
          v280[2] = 1852797029;
        }
        if (a6 != 4)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_Device.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4565;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_SetPropertyData: incorrect inQualifierDataSize for kAudioDevicePropertyDSPGraphProperty", buf, 0x12u);
          }
          v284 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v284 = &off_1E69A1B30;
          v284[2] = 1852797029;
        }
        v93 = a3->mScope;
        if (v93 != 1768845428 && v93 != 1869968496)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_Device.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4567;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_SetPropertyData: incorrect inAddress.mScope for kAudioDevicePropertyDSPGraphProperty", buf, 0x12u);
          }
          v291 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v291 = &off_1E69A1B30;
          v291[2] = 1852797029;
        }
        v94 = *a7;
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        *(_QWORD *)&buf[16] = 0x2000000000;
        v367[0] = 0;
        v313[0] = MEMORY[0x1E0C809B0];
        v313[1] = 0x40000000;
        v313[2] = ___ZN11HALS_Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_208;
        v313[3] = &unk_1E699E198;
        v313[4] = buf;
        v313[5] = this;
        v316 = v93 == 1768845428;
        v314 = v94;
        v315 = a4;
        v313[6] = a3;
        v313[7] = a5;
        v95 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v95, (uint64_t)v313);
        if (!*(_BYTE *)(*(_QWORD *)&buf[8] + 24))
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)theDict = 136315394;
            *(_QWORD *)&theDict[4] = "HALS_Device.cpp";
            *(_WORD *)&theDict[12] = 1024;
            *(_DWORD *)&theDict[14] = 4580;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  SetStreamDSPProperty failure", theDict, 0x12u);
          }
          v287 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v287 = &off_1E69A1B30;
          v287[2] = 1852797029;
        }
        v96 = (HALS_NotificationManager *)*((unsigned int *)this + 4);
        if (a8)
          v97 = *((unsigned int *)a8 + 4);
        else
          v97 = 0;
        *(_DWORD *)theDict = 1684500594;
        *(_QWORD *)&theDict[4] = *(_QWORD *)&a3->mScope;
        HALS_Object::PropertiesChanged(this, v96, v97, 1, (const AudioObjectPropertyAddress *)theDict);
        goto LABEL_279;
      }
      if (mSelector == 1685278562)
      {
        if (!a5)
        {
          AMCP::Log::Scope_Registry::get(v16);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v187 = **(NSObject ***)buf;
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
          if (os_log_type_enabled(v187, OS_LOG_TYPE_ERROR))
          {
            v188 = pthread_self();
            v189 = pthread_mach_thread_np(v188);
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)&buf[4] = v189;
            *(_WORD *)&buf[8] = 2080;
            *(_QWORD *)&buf[10] = "HALS_Device.cpp";
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = 4710;
            *(_WORD *)v367 = 2080;
            *(_QWORD *)&v367[2] = "inData == nullptr";
            _os_log_error_impl(&dword_1B57BA000, v187, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::SetPropertyData: outData is nullptr for kAudioDevicePropertyDSPOffloadBypass", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v312);
          v190 = __cxa_allocate_exception(0x40uLL);
          v310 = &off_1E69A1B30;
          v311 = 1852797029;
          *(_DWORD *)&theDict[8] = 1852797029;
          v364 = 0;
          v363 = 0;
          v365 = -1;
          *(_QWORD *)theDict = &off_1E699E510;
          v362 = 0;
          *(_QWORD *)&theDict[16] = &unk_1E699E538;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)theDict);
          *(_QWORD *)&v367[8] = "virtual void HALS_Device::SetPropertyData(AudioObjectID, const AudioObjectPropertyAddres"
                                "s &, UInt32, const void *, UInt32, const void *, HALS_Client *)";
          *(_QWORD *)&v367[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
          LODWORD(v368) = 4710;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v308);
          *(_OWORD *)&v370[0].mElement = v308;
          *(_QWORD *)&v370[0].mSelector = off_1E69A20A0;
          v371 = v309;
          v308 = 0uLL;
          v309 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>((uint64_t)buf, (uint64_t)v370);
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)v190, (uint64_t)buf);
        }
        if (a4 != 8)
        {
          AMCP::Log::Scope_Registry::get(v16);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v208 = **(NSObject ***)buf;
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
          if (os_log_type_enabled(v208, OS_LOG_TYPE_ERROR))
          {
            v209 = pthread_self();
            v210 = pthread_mach_thread_np(v209);
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)&buf[4] = v210;
            *(_WORD *)&buf[8] = 2080;
            *(_QWORD *)&buf[10] = "HALS_Device.cpp";
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = 4711;
            *(_WORD *)v367 = 2080;
            *(_QWORD *)&v367[2] = "inDataSize != sizeof(CFDictionaryRef)";
            _os_log_error_impl(&dword_1B57BA000, v208, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::SetPropertyData: inDataSize is not CFDictionaryRef for kAudioDevicePropertyDSPOffloadBypass", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v312);
          v211 = __cxa_allocate_exception(0x40uLL);
          v310 = &off_1E69A1B30;
          v311 = 1852797029;
          *(_DWORD *)&theDict[8] = 1852797029;
          v364 = 0;
          v363 = 0;
          v365 = -1;
          *(_QWORD *)theDict = &off_1E699E510;
          v362 = 0;
          *(_QWORD *)&theDict[16] = &unk_1E699E538;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)theDict);
          *(_QWORD *)&v367[8] = "virtual void HALS_Device::SetPropertyData(AudioObjectID, const AudioObjectPropertyAddres"
                                "s &, UInt32, const void *, UInt32, const void *, HALS_Client *)";
          *(_QWORD *)&v367[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
          LODWORD(v368) = 4711;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v308);
          *(_OWORD *)&v370[0].mElement = v308;
          *(_QWORD *)&v370[0].mSelector = off_1E69A20A0;
          v371 = v309;
          v308 = 0uLL;
          v309 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>((uint64_t)buf, (uint64_t)v370);
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)v211, (uint64_t)buf);
        }
        if (!a8 && !*((_BYTE *)this + 616))
        {
          AMCP::Log::Scope_Registry::get(v16);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v264 = **(NSObject ***)buf;
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
          if (os_log_type_enabled(v264, OS_LOG_TYPE_ERROR))
          {
            v265 = pthread_self();
            v266 = pthread_mach_thread_np(v265);
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)&buf[4] = v266;
            *(_WORD *)&buf[8] = 2080;
            *(_QWORD *)&buf[10] = "HALS_Device.cpp";
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = 4712;
            *(_WORD *)v367 = 2080;
            *(_QWORD *)&v367[2] = "inClient == nullptr && !mClientDSPInfo.allows_null_client()";
            _os_log_error_impl(&dword_1B57BA000, v264, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::SetPropertyData: inClient is null for kAudioDevicePropertyDSPOffloadBypass", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v312);
          v267 = __cxa_allocate_exception(0x40uLL);
          v310 = &off_1E69A1B30;
          v311 = 1852797029;
          *(_DWORD *)&theDict[8] = 1852797029;
          v364 = 0;
          v363 = 0;
          v365 = -1;
          *(_QWORD *)theDict = &off_1E699E510;
          v362 = 0;
          *(_QWORD *)&theDict[16] = &unk_1E699E538;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)theDict);
          *(_QWORD *)&v367[8] = "virtual void HALS_Device::SetPropertyData(AudioObjectID, const AudioObjectPropertyAddres"
                                "s &, UInt32, const void *, UInt32, const void *, HALS_Client *)";
          *(_QWORD *)&v367[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
          LODWORD(v368) = 4712;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v308);
          *(_OWORD *)&v370[0].mElement = v308;
          *(_QWORD *)&v370[0].mSelector = off_1E69A20A0;
          v371 = v309;
          v308 = 0uLL;
          v309 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>((uint64_t)buf, (uint64_t)v370);
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)v267, (uint64_t)buf);
        }
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        *(_QWORD *)&buf[16] = 0x3002000000;
        *(_QWORD *)v367 = __Block_byref_object_copy__220;
        *(_QWORD *)&v367[8] = __Block_byref_object_dispose__221;
        *(_WORD *)&v367[16] = 0;
        v298[0] = MEMORY[0x1E0C809B0];
        v298[1] = 0x40000000;
        v298[2] = ___ZN11HALS_Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_222;
        v298[3] = &unk_1E699E238;
        v298[4] = buf;
        v298[5] = this;
        v298[6] = a3;
        v298[7] = a8;
        v298[8] = a5;
        v77 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v77, (uint64_t)v298);
        if (*(_BYTE *)(*(_QWORD *)&buf[8] + 40))
        {
          v78 = (HALS_NotificationManager *)*((unsigned int *)this + 4);
          if (a8)
            v79 = *((unsigned int *)a8 + 4);
          else
            v79 = 0;
          mElement = a3->mElement;
          *(_QWORD *)theDict = *(_QWORD *)&a3->mSelector;
          *(_DWORD *)&theDict[8] = mElement;
          HALS_Object::PropertiesChanged(this, v78, v79, 1, (const AudioObjectPropertyAddress *)theDict);
        }
        goto LABEL_279;
      }
      if (mSelector != 1685414763)
        goto LABEL_432;
      if (a4 <= 0xF)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_Device.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 4443;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_SetPropertyData: bad property data size for kAudioDevicePropertyProcessDuck", buf, 0x12u);
        }
        v271 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v271 = &off_1E69A1B30;
        v271[2] = 561211770;
      }
      v24 = *(_QWORD *)a5;
      v25 = *((float *)a5 + 2);
      if (v25 < 0.0)
        v25 = 0.0;
      if (v25 <= 1.0)
        v26 = v25;
      else
        v26 = 1.0;
      if (*((float *)a5 + 3) >= 0.0)
        v27 = *((float *)a5 + 3);
      else
        v27 = 0.0;
      v28 = (*(double (**)(HALS_Device *))(*(_QWORD *)this + 264))(this) * v27;
      if (v28 < 1.0)
        v28 = 1.0;
      v330[0] = MEMORY[0x1E0C809B0];
      v330[1] = 0x40000000;
      v330[2] = ___ZN11HALS_Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_193;
      v330[3] = &__block_descriptor_tmp_194;
      v330[4] = this;
      v330[5] = a8;
      v330[6] = v24;
      v331 = v26;
      v332 = v28;
      v29 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v29, (uint64_t)v330);
      return;
    }
    if (mSelector == 1684236338)
    {
      if (a4 <= 7)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_Device.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 4259;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_SetPropertyData: bad property data size for kAudioDevicePropertyPreferredChannelsForStereo", buf, 0x12u);
        }
        v281 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v281 = &off_1E69A1B30;
        v281[2] = 561211770;
      }
      v355 = 0;
      v354 = 0;
      HALS_System::GetInstance(theDict, 0, &v354);
      *(_QWORD *)buf = HALS_SettingsManager::ReadSetting(*(HALS_SettingsManager **)(*(_QWORD *)theDict + 1408), *((const __CFString **)this + 14));
      *(_WORD *)&buf[8] = 1;
      v98 = *(std::__shared_weak_count **)&theDict[8];
      if (*(_QWORD *)&theDict[8])
      {
        v99 = (unint64_t *)(*(_QWORD *)&theDict[8] + 8);
        do
          v100 = __ldaxr(v99);
        while (__stlxr(v100 - 1, v99));
        if (!v100)
        {
          ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
          std::__shared_weak_count::__release_weak(v98);
        }
      }
      v101 = v355;
      if (v355)
      {
        v102 = (unint64_t *)&v355->__shared_owners_;
        do
          v103 = __ldaxr(v102);
        while (__stlxr(v103 - 1, v102));
        if (!v103)
        {
          ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
          std::__shared_weak_count::__release_weak(v101);
        }
      }
      *(_QWORD *)theDict = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
      *(_WORD *)&theDict[8] = 257;
      if (*(_QWORD *)buf)
        CACFDictionary::SetCFMutableDictionaryFromCopy((CACFDictionary *)theDict, *(CFDictionaryRef *)buf);
      v104 = a3->mScope;
      if (v104 == 1869968496)
      {
        *((_DWORD *)this + 36) = *a5;
        *((_DWORD *)this + 37) = a5[1];
        CACFDictionary::AddUInt32((CFMutableDictionaryRef *)theDict, CFSTR("output.stereo.left"), *a5);
        CACFDictionary::AddUInt32((CFMutableDictionaryRef *)theDict, CFSTR("output.stereo.right"), a5[1]);
        v352[1] = 0;
        v352[0] = 0;
        HALS_System::GetInstance(v370, 0, v352);
        HALS_SettingsManager::WriteSetting(*(HALS_SettingsManager **)(*(_QWORD *)&v370[0].mSelector + 1408), *((CFTypeRef *)this + 14), *(const void **)theDict);
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v370);
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v352);
        v149 = (HALS_NotificationManager *)*((unsigned int *)this + 4);
        if (a8)
          v150 = *((unsigned int *)a8 + 4);
        else
          v150 = 0;
        strcpy((char *)v370, "2hcdptuo");
        BYTE1(v370[0].mElement) = 0;
        HIWORD(v370[0].mElement) = 0;
        HALS_Object::PropertiesChanged(this, v149, v150, 1, v370);
      }
      else if (v104 == 1768845428)
      {
        CACFDictionary::AddUInt32((CFMutableDictionaryRef *)theDict, CFSTR("input.stereo.left"), *a5);
        CACFDictionary::AddUInt32((CFMutableDictionaryRef *)theDict, CFSTR("input.stereo.right"), a5[1]);
        v353[1] = 0;
        v353[0] = 0;
        HALS_System::GetInstance(v370, 0, v353);
        HALS_SettingsManager::WriteSetting(*(HALS_SettingsManager **)(*(_QWORD *)&v370[0].mSelector + 1408), *((CFTypeRef *)this + 14), *(const void **)theDict);
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v370);
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v353);
        v105 = (HALS_NotificationManager *)*((unsigned int *)this + 4);
        if (a8)
          v106 = *((unsigned int *)a8 + 4);
        else
          v106 = 0;
        strcpy((char *)v370, "2hcdtpni");
        BYTE1(v370[0].mElement) = 0;
        HIWORD(v370[0].mElement) = 0;
        HALS_Object::PropertiesChanged(this, v105, v106, 1, v370);
      }
      goto LABEL_299;
    }
    if (mSelector != 1684500589)
      goto LABEL_432;
    v50 = AMCP::Feature_Flags::allow_adm_dsp_graph_parameters(0, v17);
    if ((v50 & 1) != 0
      || (v321 = 0, v322 = 0, HALS_System::GetInstance(v370, 0, &v321), g_static_start_options == 1))
    {
      HasProperty = (AMCP::Log::Scope_Registry *)HALS_Device_HostedDSP::HasProperty(*((HALS_Device ***)this + 76), a3, (const AudioObjectPropertyAddress *)a8, v49);
      v52 = (unsigned __int16)HasProperty > 0xFFu;
      if ((v50 & 1) != 0)
      {
        if ((unsigned __int16)HasProperty < 0x100u)
        {
LABEL_76:
          if (!a5)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_Device.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 4531;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_SetPropertyData: inData in nullptr for kAudioDevicePropertyDSPGraphParameter", buf, 0x12u);
            }
            v290 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v290 = &off_1E69A1B30;
            v290[2] = 1852797029;
          }
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_Device.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 4533;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_SetPropertyData: bad property data size for kAudioDevicePropertyDSPGraphParameter", buf, 0x12u);
            }
            v293 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v293 = &off_1E69A1B30;
            v293[2] = 561211770;
          }
          if (!a7)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_Device.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 4535;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_SetPropertyData: inQualifierData is nullptr for kAudioDevicePropertyDSPGraphParameter", buf, 0x12u);
            }
            v294 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v294 = &off_1E69A1B30;
            v294[2] = 1852797029;
          }
          if (a6 != 4)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_Device.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 4537;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_SetPropertyData: incorrect inQualifierDataSize for kAudioDevicePropertyDSPGraphParameter", buf, 0x12u);
            }
            v295 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v295 = &off_1E69A1B30;
            v295[2] = 1852797029;
          }
          v53 = a3->mScope;
          if (v53 != 1768845428 && v53 != 1869968496)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_Device.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 4539;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_SetPropertyData: incorrect inAddress.mScope for kAudioDevicePropertyDSPGraphParameter", buf, 0x12u);
            }
            v297 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v297 = &off_1E69A1B30;
            v297[2] = 1852797029;
          }
          v54 = *a5;
          v55 = *a7;
          *(_QWORD *)buf = 0;
          *(_QWORD *)&buf[8] = buf;
          *(_QWORD *)&buf[16] = 0x2000000000;
          v367[0] = 0;
          v317[0] = MEMORY[0x1E0C809B0];
          v317[1] = 0x40000000;
          v317[2] = ___ZN11HALS_Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_206;
          v317[3] = &unk_1E699E170;
          v317[4] = buf;
          v317[5] = this;
          v320 = v53 == 1768845428;
          v317[6] = a3;
          v318 = v55;
          v319 = v54;
          v56 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v56, (uint64_t)v317);
          if (!*(_BYTE *)(*(_QWORD *)&buf[8] + 24))
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)theDict = 136315394;
              *(_QWORD *)&theDict[4] = "HALS_Device.cpp";
              *(_WORD *)&theDict[12] = 1024;
              *(_DWORD *)&theDict[14] = 4553;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  SetStreamDSPParameter failure", theDict, 0x12u);
            }
            v296 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v296 = &off_1E69A1B30;
            v296[2] = 1852797029;
          }
          v57 = (HALS_NotificationManager *)*((unsigned int *)this + 4);
          if (a8)
            v58 = *((unsigned int *)a8 + 4);
          else
            v58 = 0;
          *(_DWORD *)theDict = 1684500589;
          *(_QWORD *)&theDict[4] = *(_QWORD *)&a3->mScope;
          HALS_Object::PropertiesChanged(this, v57, v58, 1, (const AudioObjectPropertyAddress *)theDict);
          goto LABEL_279;
        }
LABEL_258:
        if (a3->mSelector != 1684500589)
          return;
        v159 = (HALS_Device **)*((_QWORD *)this + 76);
        AMCP::Log::Scope_Registry::get(HasProperty);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v160 = *(std::__shared_weak_count **)&buf[8];
        v161 = **(NSObject ***)buf;
        if (*(_QWORD *)&buf[8])
        {
          v162 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v163 = __ldaxr(v162);
          while (__stlxr(v163 - 1, v162));
          if (!v163)
          {
            ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
            std::__shared_weak_count::__release_weak(v160);
          }
        }
        if (os_log_type_enabled(v161, OS_LOG_TYPE_DEFAULT))
        {
          v164 = pthread_self();
          v165 = pthread_mach_thread_np(v164);
          *(_DWORD *)buf = 67109634;
          *(_DWORD *)&buf[4] = v165;
          *(_WORD *)&buf[8] = 2080;
          *(_QWORD *)&buf[10] = "HALS_Device_HostedDSP.cpp";
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = 639;
          _os_log_impl(&dword_1B57BA000, v161, OS_LOG_TYPE_DEFAULT, "%6u %32s:%-5d [hal_dsp][graph] Hosted DSP is processing a kAudioDevicePropertyDSPGraphParameter", buf, 0x18u);
        }
        *(_QWORD *)theDict = *(_QWORD *)&a3->mSelector;
        *(_DWORD *)&theDict[8] = a3->mElement;
        v166 = (char *)operator new(0x38uLL);
        *(_QWORD *)v166 = &off_1E6977BF0;
        *(_OWORD *)(v166 + 8) = *(_OWORD *)theDict;
        *((_QWORD *)v166 + 3) = a5;
        *((_DWORD *)v166 + 8) = a4;
        *((_QWORD *)v166 + 5) = a7;
        *((_DWORD *)v166 + 12) = a6;
        *(_QWORD *)v367 = v166;
        HALS_Device_HostedDSP::DiscoverDSPPropertySetsForClient(v159, (uint64_t)a8, (uint64_t)a3, (uint64_t)buf, 1);
        v167 = *(_QWORD **)v367;
        if (*(_BYTE **)v367 == buf)
        {
          v168 = 4;
          v167 = buf;
        }
        else
        {
          if (!*(_QWORD *)v367)
            return;
          v168 = 5;
        }
        (*(void (**)(void))(*v167 + 8 * v168))();
        return;
      }
    }
    else
    {
      v52 = 0;
    }
    v153 = *(std::__shared_weak_count **)&v370[0].mElement;
    if (*(_QWORD *)&v370[0].mElement)
    {
      v154 = (unint64_t *)(*(_QWORD *)&v370[0].mElement + 8);
      do
        v155 = __ldaxr(v154);
      while (__stlxr(v155 - 1, v154));
      if (!v155)
      {
        ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
        std::__shared_weak_count::__release_weak(v153);
      }
    }
    v156 = v322;
    if (v322)
    {
      v157 = (unint64_t *)&v322->__shared_owners_;
      do
        v158 = __ldaxr(v157);
      while (__stlxr(v158 - 1, v157));
      if (!v158)
      {
        ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
        std::__shared_weak_count::__release_weak(v156);
      }
    }
    if (!v52)
      goto LABEL_76;
    goto LABEL_258;
  }
  if (mSelector <= 1634758773)
  {
    if (mSelector == 1634755428)
    {
      if (a4 <= 7)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_Device.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 4473;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_SetPropertyData: bad property data size for kAudioDevicePropertyClockDevice", buf, 0x12u);
        }
        v278 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v278 = &off_1E69A1B30;
        v278[2] = 561211770;
      }
      if (a8)
        v91 = *((_DWORD *)a8 + 4);
      else
        v91 = 0;
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x2000000000;
      v367[0] = 0;
      v326[0] = MEMORY[0x1E0C809B0];
      v326[1] = 0x40000000;
      v326[2] = ___ZN11HALS_Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_197;
      v326[3] = &unk_1E699E0D0;
      v326[5] = this;
      v326[4] = buf;
      v327 = v91;
      v326[6] = a5;
      v134 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v134, (uint64_t)v326);
      goto LABEL_279;
    }
    if (mSelector != 1634758765)
      goto LABEL_432;
    if (a4 <= 3)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "HALS_Device.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 4403;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_SetPropertyData: bad property data size for kAudioDevicePropertyProcessMute", buf, 0x12u);
      }
      v272 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v272 = &off_1E69A1B30;
      v272[2] = 561211770;
    }
    if (a8)
      v37 = *((_DWORD *)a8 + 4);
    else
      v37 = 0;
    v119 = a3->mScope;
    *(_QWORD *)theDict = 0;
    *(_QWORD *)&theDict[8] = theDict;
    *(_QWORD *)&theDict[16] = 0x2000000000;
    LODWORD(v362) = 1065353216;
    v120 = MEMORY[0x1E0C809B0];
    v337[0] = MEMORY[0x1E0C809B0];
    v337[1] = 0x40000000;
    v337[2] = ___ZN11HALS_Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_189;
    v337[3] = &unk_1E699E040;
    v337[5] = this;
    v337[4] = theDict;
    v338 = v37;
    v339 = v119 == 1768845428;
    v121 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v121, (uint64_t)v337);
    v122 = *a5;
    if (v122)
      v123 = 0.0;
    else
      v123 = 1.0;
    if (v123 != *(float *)(*(_QWORD *)&theDict[8] + 24))
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        v124 = *((_DWORD *)this + 4);
        if (a3->mScope == 1768845428)
          v125 = "input";
        else
          v125 = "output";
        v126 = "on";
        *(_DWORD *)buf = 136316162;
        *(_QWORD *)&buf[4] = "HALS_Device.cpp";
        *(_DWORD *)&buf[14] = 4414;
        *(_WORD *)&buf[12] = 1024;
        *(_WORD *)&buf[18] = 1024;
        if (v123 != 0.0)
          v126 = "off";
        *(_DWORD *)&buf[20] = v124;
        *(_WORD *)v367 = 2080;
        *(_QWORD *)&v367[2] = v125;
        *(_WORD *)&v367[10] = 2080;
        *(_QWORD *)&v367[12] = v126;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_Device::_SetPropertyData: Object ID: %d setting process %s mute: %s", buf, 0x2Cu);
      }
      *(_QWORD *)&v370[0].mSelector = 0;
      *(_QWORD *)&v370[0].mElement = v370;
      *(_QWORD *)&v370[1].mScope = 0x2000000000;
      LOBYTE(v371) = 0;
      v333[0] = v120;
      v333[1] = 0x40000000;
      v333[2] = ___ZN11HALS_Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_191;
      v333[3] = &unk_1E699E068;
      v333[5] = this;
      v333[4] = v370;
      v334 = v37;
      v336 = v119 == 1768845428;
      v335 = v123;
      v127 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v127, (uint64_t)v333);
      if (*(_BYTE *)(*(_QWORD *)&v370[0].mElement + 24))
      {
        if (v119 == 1768845428)
          HALS_Device::ProcessMuteStateChanged(this, a8, v122 != 0);
        v128 = a3->mScope;
        v129 = (AudioObjectPropertyAddress *)operator new(0x18uLL);
        v129->mSelector = 1634758774;
        v129->mScope = v128;
        *(_QWORD *)&v129->mElement = 0x6170706D00000000;
        v129[1].mScope = v128;
        v129[1].mElement = 0;
        v130 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT);
        if (a8)
        {
          if (v130)
          {
            v131 = *((_DWORD *)this + 4);
            v132 = "output";
            v133 = *((_DWORD *)a8 + 4);
            if (v128 == 1768845428)
              v132 = "input";
            *(_DWORD *)buf = 136316162;
            *(_QWORD *)&buf[4] = "HALS_Device.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4427;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v131;
            *(_WORD *)v367 = 1024;
            *(_DWORD *)&v367[2] = v133;
            *(_WORD *)&v367[6] = 2080;
            *(_QWORD *)&v367[8] = v132;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_Device::_SetPropertyData: Object ID: %d notifying client %d about process %s volume/mute change", buf, 0x28u);
          }
        }
        else
        {
          if (v130)
          {
            v172 = *((_DWORD *)this + 4);
            v173 = "output";
            *(_QWORD *)&buf[4] = "HALS_Device.cpp";
            *(_DWORD *)buf = 136315906;
            *(_WORD *)&buf[12] = 1024;
            if (v128 == 1768845428)
              v173 = "input";
            *(_DWORD *)&buf[14] = 4432;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v172;
            *(_WORD *)v367 = 2080;
            *(_QWORD *)&v367[2] = v173;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_Device::_SetPropertyData: Object ID: %d notifying generally about process %s volume/mute change", buf, 0x22u);
          }
          HALS_Object::PropertiesChanged(this, (HALS_NotificationManager *)*((unsigned int *)this + 4), 0, 2, v129);
        }
        operator delete(v129);
      }
      _Block_object_dispose(v370, 8);
    }
    goto LABEL_289;
  }
  if (mSelector == 1634758774)
  {
    if (a4 <= 3)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "HALS_Device.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 4362;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_SetPropertyData: bad property data size for kAudioDevicePropertyProcessVolumeScalar", buf, 0x12u);
      }
      v279 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v279 = &off_1E69A1B30;
      v279[2] = 561211770;
    }
    if (a8)
      v92 = *((_DWORD *)a8 + 4);
    else
      v92 = 0;
    v135 = a3->mScope;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2000000000;
    *(_DWORD *)v367 = 1065353216;
    v136 = MEMORY[0x1E0C809B0];
    v344[0] = MEMORY[0x1E0C809B0];
    v344[1] = 0x40000000;
    v344[2] = ___ZN11HALS_Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_186;
    v344[3] = &unk_1E699DFF0;
    v344[5] = this;
    v344[4] = buf;
    v345 = v92;
    v346 = v135 == 1768845428;
    v137 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v137, (uint64_t)v344);
    v138 = 0.0;
    if (*(float *)a5 < 0.0 || (v139 = 1.0, v138 = *(float *)a5, *(float *)a5 <= 1.0))
      v139 = v138;
    if (v139 == *(float *)(*(_QWORD *)&buf[8] + 24))
      goto LABEL_279;
    *(_QWORD *)theDict = 0;
    *(_QWORD *)&theDict[8] = theDict;
    *(_QWORD *)&theDict[16] = 0x2000000000;
    LOBYTE(v362) = 0;
    v340[0] = v136;
    v340[1] = 0x40000000;
    v340[2] = ___ZN11HALS_Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_2;
    v340[3] = &unk_1E699E018;
    v340[5] = this;
    v340[4] = theDict;
    v341 = v92;
    v343 = v135 == 1768845428;
    v342 = v139;
    v140 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v140, (uint64_t)v340);
    if (*(_BYTE *)(*(_QWORD *)&theDict[8] + 24))
    {
      v141 = a3->mScope;
      v142 = (AudioObjectPropertyAddress *)operator new(0xCuLL);
      *(_QWORD *)&v370[0].mElement = v142 + 1;
      *(_QWORD *)&v370[1].mScope = v142 + 1;
      v142->mSelector = 1634758774;
      v142->mScope = v141;
      v142->mElement = 0;
      *(_QWORD *)&v370[0].mSelector = v142;
      if (v139 == 0.0 || *(float *)(*(_QWORD *)&buf[8] + 24) == 0.0)
      {
        if (v135 == 1768845428)
        {
          HALS_Device::ProcessMuteStateChanged(this, a8, v139 == 0.0);
          v141 = a3->mScope;
        }
        LODWORD(v308) = 1634758765;
        *(_QWORD *)((char *)&v308 + 4) = v141;
        std::vector<AudioObjectPropertyAddress>::push_back[abi:ne180100]((unint64_t *)&v370[0].mSelector, (uint64_t *)&v308);
        v142 = *(AudioObjectPropertyAddress **)&v370[0].mSelector;
      }
      if (!a8)
        HALS_Object::PropertiesChanged(this, (HALS_NotificationManager *)*((unsigned int *)this + 4), 0, -1431655765 * ((*(_QWORD *)&v370[0].mElement - (_QWORD)v142) >> 2), v142);
      if (v142)
        operator delete(v142);
    }
    goto LABEL_272;
  }
  if (mSelector != 1667523955)
LABEL_432:
    HALS_Object::SetPropertyData((uint64_t)this, (uint64_t)a2, (uint64_t)a3, v18, v19, v20, v21, (uint64_t)a8);
  if (a4 <= 7)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "HALS_Device.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 4338;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_SetPropertyData: bad property data size for kAudioDevicePropertyClientDescription", buf, 0x12u);
    }
    v274 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v274 = &off_1E69A1B30;
    v274[2] = 561211770;
  }
  if (a8)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2000000000;
    v367[0] = 0;
    v347[0] = MEMORY[0x1E0C809B0];
    v347[1] = 0x40000000;
    v347[2] = ___ZN11HALS_Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_184;
    v347[3] = &unk_1E699DFC8;
    v347[6] = a8;
    v347[7] = a5;
    v347[5] = this;
    v347[4] = buf;
    v46 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v46, (uint64_t)v347);
    if (*(_BYTE *)(*(_QWORD *)&buf[8] + 24))
    {
      v47 = (HALS_NotificationManager *)*((unsigned int *)this + 4);
      v48 = *((unsigned int *)a8 + 4);
      strcpy(theDict, "sedcbolg");
      theDict[9] = 0;
      *(_WORD *)&theDict[10] = 0;
      HALS_Object::PropertiesChanged(this, v47, v48, 1, (const AudioObjectPropertyAddress *)theDict);
    }
    goto LABEL_279;
  }
}

void sub_1B5C74EDC(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  operator delete(v1);
  _Block_object_dispose((const void *)(v2 - 176), 8);
  _Block_object_dispose(&STACK[0x580], 8);
  _Unwind_Resume(a1);
}

void HALS_Device::HandleOwnedObjectPropertiesChanged(HALS_Device *this, const HALS_Object *a2, unsigned int a3, int a4, const AudioObjectPropertyAddress *a5, int a6)
{
  uint64_t v7;
  int v10;
  _BOOL4 IsSubClass;
  const AudioObjectPropertyAddress *v12;
  HALB_Info *v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  const AudioObjectPropertyAddress *v17;
  uint64_t i;
  int v19;
  int mSelector;
  int TransportType;
  _BOOL4 v22;
  _BOOL4 v23;
  int v24;
  const AudioObjectPropertyAddress *v26;
  uint64_t v27;
  int v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  const AudioObjectPropertyAddress *v34;
  unsigned int v35;
  signed int v36;
  signed int v37;
  const AudioObjectPropertyAddress *v38;
  const AudioObjectPropertyAddress *v39;
  const AudioObjectPropertyAddress *v40;
  const AudioObjectPropertyAddress *v41;
  HALS_NotificationManager *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *p_shared_owners;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  char *v60;
  int v61;
  _QWORD v62[4];
  unsigned int v63;
  unsigned int v64;
  int v65;
  int v66;
  HALS_IODevice *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  __int128 v72;
  void *__p;
  char *v74;
  unint64_t v75;
  void *v76[2];
  __int128 v77;
  _QWORD v78[2];

  v64 = a3;
  v65 = a6;
  LODWORD(v7) = a4;
  *(_OWORD *)v76 = 0u;
  v77 = 0u;
  __p = 0;
  v74 = 0;
  v75 = 0;
  v10 = *((_DWORD *)a2 + 5);
  IsSubClass = HALB_Info::IsSubClass((HALB_Info *)v10, 1633907820);
  v13 = (HALB_Info *)*((unsigned int *)a2 + 6);
  v67 = this;
  if (v10 == (_DWORD)v13 || IsSubClass)
  {
    v14 = v10 != (_DWORD)v13 || IsSubClass;
    if (v14 != 1)
      goto LABEL_188;
  }
  else if (!HALB_Info::IsSubClass(v13, 1633907820))
  {
LABEL_188:
    v66 = 0;
    goto LABEL_189;
  }
  v15 = *((_DWORD *)a2 + 13);
  v63 = v7;
  if ((_DWORD)v7)
  {
    v16 = *((_DWORD *)a2 + 12);
    qmemcpy(v62, "srhturtpurhturtpbnsldpatmlovnscl", sizeof(v62));
    v66 = 1835295859;
    v17 = a5;
    for (i = v63; i; --i)
    {
      mSelector = v17->mSelector;
      ++v17;
      v19 = mSelector;
      if (mSelector <= 1818456931)
      {
        if (v19 <= 1668049770)
        {
          if (v19 != 1650685548)
          {
            if (v19 == 1651272546)
            {
              if (v10 == 1936028002)
              {
                LODWORD(v72) = 1936811108;
                *(_QWORD *)((char *)&v72 + 4) = __PAIR64__(v15, v16);
                CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v76, (AudioObjectPropertyAddress *)&v72, v12);
              }
            }
            else if (v19 == 1651272548 && v10 == 1936028002)
            {
              LODWORD(v72) = 1936811109;
              *(_QWORD *)((char *)&v72 + 4) = __PAIR64__(v15, v16);
              CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v76, (AudioObjectPropertyAddress *)&v72, v12);
            }
            continue;
          }
          if (v10 <= 1819504225)
          {
            if (v10 <= 1702259058)
            {
              switch(v10)
              {
                case 1650602615:
                  LODWORD(v72) = 1650602615;
                  *(_QWORD *)((char *)&v72 + 4) = __PAIR64__(v15, v16);
                  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v76, (AudioObjectPropertyAddress *)&v72, v12);
                  break;
                case 1668049264:
                  LODWORD(v72) = 1668049264;
                  *(_QWORD *)((char *)&v72 + 4) = __PAIR64__(v15, v16);
                  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v76, (AudioObjectPropertyAddress *)&v72, v12);
                  break;
                case 1684895092:
                  LODWORD(v72) = 1684895092;
                  *(_QWORD *)((char *)&v72 + 4) = __PAIR64__(v15, v16);
                  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v76, (AudioObjectPropertyAddress *)&v72, v12);
                  break;
              }
            }
            else if (v10 > 1784767338)
            {
              if (v10 == 1784767339)
              {
                LODWORD(v72) = 1784767339;
                *(_QWORD *)((char *)&v72 + 4) = __PAIR64__(v15, v16);
                CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v76, (AudioObjectPropertyAddress *)&v72, v12);
              }
              else if (v10 == 1815241314)
              {
                LODWORD(v72) = 1815241314;
                *(_QWORD *)((char *)&v72 + 4) = __PAIR64__(v15, v16);
                CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v76, (AudioObjectPropertyAddress *)&v72, v12);
              }
            }
            else if (v10 == 1702259059)
            {
              *(_QWORD *)&v72 = __PAIR64__(v16, HIDWORD(v62[2]));
              DWORD2(v72) = v15;
              CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v76, (AudioObjectPropertyAddress *)&v72, v12);
            }
            else if (v10 == 1718432370)
            {
              LODWORD(v72) = 1718432370;
              *(_QWORD *)((char *)&v72 + 4) = __PAIR64__(v15, v16);
              CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v76, (AudioObjectPropertyAddress *)&v72, v12);
            }
            continue;
          }
          if (v10 > 1936682094)
          {
            if (v10 > 1952541793)
            {
              if (v10 == 1952541794)
              {
                LODWORD(v72) = 1952541794;
                *(_QWORD *)((char *)&v72 + 4) = __PAIR64__(v15, v16);
                CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v76, (AudioObjectPropertyAddress *)&v72, v12);
              }
              else if (v10 == 1999790690)
              {
                LODWORD(v72) = 1999790690;
                *(_QWORD *)((char *)&v72 + 4) = __PAIR64__(v15, v16);
                CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v76, (AudioObjectPropertyAddress *)&v72, v12);
              }
              continue;
            }
            if (v10 != 1936682095)
            {
              if (v10 == 1937072749)
              {
                LODWORD(v72) = 1936553332;
                *(_QWORD *)((char *)&v72 + 4) = __PAIR64__(v15, v16);
                CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v76, (AudioObjectPropertyAddress *)&v72, v12);
              }
              continue;
            }
            if (v16 == 1886679669)
            {
              *(_QWORD *)&v72 = v62[0];
            }
            else
            {
              LODWORD(v72) = 1936682095;
              DWORD1(v72) = v16;
            }
            goto LABEL_160;
          }
          if (v10 > 1885888877)
          {
            if (v10 == 1885888878)
            {
              LODWORD(v72) = 1885888878;
              *(_QWORD *)((char *)&v72 + 4) = __PAIR64__(v15, v16);
              CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v76, (AudioObjectPropertyAddress *)&v72, v12);
            }
            else if (v10 == 1885893481)
            {
              LODWORD(v72) = 1885893481;
              *(_QWORD *)((char *)&v72 + 4) = __PAIR64__(v15, v16);
              CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v76, (AudioObjectPropertyAddress *)&v72, v12);
            }
            continue;
          }
          if (v10 == 1819504226)
          {
            *(_QWORD *)&v72 = __PAIR64__(v16, v62[2]);
            DWORD2(v72) = v15;
            CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v76, (AudioObjectPropertyAddress *)&v72, v12);
          }
          else if (v10 == 1836414053)
          {
            if (v16 == 1886679669)
            {
              *(_QWORD *)&v72 = v62[1];
            }
            else
            {
              LODWORD(v72) = 1836414053;
              DWORD1(v72) = v16;
            }
            goto LABEL_160;
          }
        }
        else if (v19 > 1818453106)
        {
          if (v19 == 1818453107)
          {
            switch(v10)
            {
              case 1936028007:
                LODWORD(v72) = 1936811878;
                *(_QWORD *)((char *)&v72 + 4) = __PAIR64__(v15, v16);
                CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v76, (AudioObjectPropertyAddress *)&v72, v12);
                break;
              case 1937072758:
                LODWORD(v72) = 1935946358;
                *(_QWORD *)((char *)&v72 + 4) = __PAIR64__(v15, v16);
                CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v76, (AudioObjectPropertyAddress *)&v72, v12);
                break;
              case 1986817381:
                if (v16 == 1886679669)
                {
                  *(_QWORD *)&v72 = 0x707472756D763273;
                }
                else
                {
                  LODWORD(v72) = 1684157046;
                  DWORD1(v72) = v16;
                }
                goto LABEL_160;
            }
          }
          else if (v19 == 1818453110)
          {
            switch(v10)
            {
              case 1936028007:
                LODWORD(v72) = 1936811876;
                *(_QWORD *)((char *)&v72 + 4) = __PAIR64__(v15, v16);
                CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v76, (AudioObjectPropertyAddress *)&v72, v12);
                break;
              case 1937072758:
                LODWORD(v72) = 1937140836;
                *(_QWORD *)((char *)&v72 + 4) = __PAIR64__(v15, v16);
                CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v76, (AudioObjectPropertyAddress *)&v72, v12);
                break;
              case 1986817381:
                if (v16 == 1886679669)
                {
                  *(_QWORD *)&v72 = 0x707472756D766462;
                }
                else
                {
                  LODWORD(v72) = 1987013732;
                  DWORD1(v72) = v16;
                }
                goto LABEL_160;
            }
          }
        }
        else
        {
          if (v19 == 1668049771)
          {
            if (v10 == 1668047723)
            {
              LODWORD(v72) = 1668506475;
              *(_QWORD *)((char *)&v72 + 4) = __PAIR64__(v15, v16);
              CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v76, (AudioObjectPropertyAddress *)&v72, v12);
            }
            continue;
          }
          if (v19 == 1818453106)
          {
            switch(v10)
            {
              case 1936028007:
                LODWORD(v72) = 1936811890;
                *(_QWORD *)((char *)&v72 + 4) = __PAIR64__(v15, v16);
                CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v76, (AudioObjectPropertyAddress *)&v72, v12);
                break;
              case 1937072758:
                LODWORD(v72) = 1937138723;
                *(_QWORD *)((char *)&v72 + 4) = __PAIR64__(v15, v16);
                CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v76, (AudioObjectPropertyAddress *)&v72, v12);
                break;
              case 1986817381:
                if (v16 == 1886679669)
                {
                  *(_QWORD *)&v72 = 0x707472756D766423;
                }
                else
                {
                  LODWORD(v72) = 1986290211;
                  DWORD1(v72) = v16;
                }
                goto LABEL_160;
            }
          }
        }
      }
      else if (v19 > 1935893352)
      {
        if (v19 <= 1936745314)
        {
          if (v19 == 1935893353)
          {
            if (v10 <= 1685287522)
            {
              if (v10 == 1668047723)
              {
                LODWORD(v72) = 1668510307;
                *(_QWORD *)((char *)&v72 + 4) = __PAIR64__(v15, v16);
                CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v76, (AudioObjectPropertyAddress *)&v72, v12);
              }
              else if (v10 == 1684370292)
              {
                *(_QWORD *)&v72 = __PAIR64__(v16, v66);
                DWORD2(v72) = v15;
                CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v76, (AudioObjectPropertyAddress *)&v72, v12);
              }
            }
            else
            {
              switch(v10)
              {
                case 1852601964:
                  LODWORD(v72) = 1852601964;
                  *(_QWORD *)((char *)&v72 + 4) = __PAIR64__(v15, v16);
                  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v76, (AudioObjectPropertyAddress *)&v72, v12);
                  break;
                case 1751740518:
                  LODWORD(v72) = 1751740518;
                  *(_QWORD *)((char *)&v72 + 4) = __PAIR64__(v15, v16);
                  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v76, (AudioObjectPropertyAddress *)&v72, v12);
                  break;
                case 1685287523:
                  LODWORD(v72) = 1936945763;
                  *(_QWORD *)((char *)&v72 + 4) = __PAIR64__(v15, v16);
                  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v76, (AudioObjectPropertyAddress *)&v72, v12);
                  break;
              }
            }
          }
          else if (v19 == 1935894894)
          {
            if (v10 <= 1685287522)
            {
              if (v10 == 1668047723)
              {
                *(_QWORD *)&v72 = __PAIR64__(v16, HIDWORD(v62[3]));
                DWORD2(v72) = v15;
                CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v76, (AudioObjectPropertyAddress *)&v72, v12);
              }
              else if (v10 == 1684370292)
              {
                LODWORD(v72) = 1835295843;
                *(_QWORD *)((char *)&v72 + 4) = __PAIR64__(v15, v16);
                CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v76, (AudioObjectPropertyAddress *)&v72, v12);
              }
            }
            else
            {
              switch(v10)
              {
                case 1852601964:
                  LODWORD(v72) = 1818455660;
                  *(_QWORD *)((char *)&v72 + 4) = __PAIR64__(v15, v16);
                  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v76, (AudioObjectPropertyAddress *)&v72, v12);
                  break;
                case 1751740518:
                  LODWORD(v72) = 1751740524;
                  *(_QWORD *)((char *)&v72 + 4) = __PAIR64__(v15, v16);
                  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v76, (AudioObjectPropertyAddress *)&v72, v12);
                  break;
                case 1685287523:
                  LODWORD(v72) = 1819501422;
                  *(_QWORD *)((char *)&v72 + 4) = __PAIR64__(v15, v16);
                  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v76, (AudioObjectPropertyAddress *)&v72, v12);
                  break;
              }
            }
          }
          continue;
        }
        if (v19 != 1936745315)
        {
          if (v19 != 1936745334 || v10 != 1936744814)
            continue;
          if (v16 == 1886679669)
          {
            *(_QWORD *)&v72 = 0x707472756D73706ELL;
          }
          else
          {
            LODWORD(v72) = 1936744814;
            DWORD1(v72) = v16;
          }
          goto LABEL_160;
        }
        if (v10 == 1936744814)
        {
          if (v16 == 1886679669)
          {
            *(_QWORD *)&v72 = 0x707472756D737023;
          }
          else
          {
            LODWORD(v72) = 1936748067;
            DWORD1(v72) = v16;
          }
          goto LABEL_160;
        }
      }
      else if (v19 > 1818457189)
      {
        if (v19 != 1818457190)
        {
          if (v19 == 1935892841)
          {
            if (v10 <= 1685287522)
            {
              if (v10 == 1668047723)
              {
                LODWORD(v72) = 1668506403;
                *(_QWORD *)((char *)&v72 + 4) = __PAIR64__(v15, v16);
                CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v76, (AudioObjectPropertyAddress *)&v72, v12);
              }
              else if (v10 == 1684370292)
              {
                LODWORD(v72) = 1835295779;
                *(_QWORD *)((char *)&v72 + 4) = __PAIR64__(v15, v16);
                CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v76, (AudioObjectPropertyAddress *)&v72, v12);
              }
            }
            else
            {
              switch(v10)
              {
                case 1852601964:
                  LODWORD(v72) = 1852601891;
                  *(_QWORD *)((char *)&v72 + 4) = __PAIR64__(v15, v16);
                  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v76, (AudioObjectPropertyAddress *)&v72, v12);
                  break;
                case 1751740518:
                  LODWORD(v72) = 1751740451;
                  *(_QWORD *)((char *)&v72 + 4) = __PAIR64__(v15, v16);
                  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v76, (AudioObjectPropertyAddress *)&v72, v12);
                  break;
                case 1685287523:
                  LODWORD(v72) = 1936941859;
                  *(_QWORD *)((char *)&v72 + 4) = __PAIR64__(v15, v16);
                  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v76, (AudioObjectPropertyAddress *)&v72, v12);
                  break;
              }
            }
          }
          continue;
        }
        if (v10 == 1937072758)
        {
          LODWORD(v72) = 1937142886;
          *(_QWORD *)((char *)&v72 + 4) = __PAIR64__(v15, v16);
          CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v76, (AudioObjectPropertyAddress *)&v72, v12);
        }
        else if (v10 == 1986817381)
        {
          if (v16 == 1886679669)
          {
            *(_QWORD *)&v72 = 0x707472756D767466;
          }
          else
          {
            LODWORD(v72) = 1986229350;
            DWORD1(v72) = v16;
          }
          goto LABEL_160;
        }
      }
      else if (v19 == 1818456932)
      {
        switch(v10)
        {
          case 1936028007:
            LODWORD(v72) = 1936811892;
            *(_QWORD *)((char *)&v72 + 4) = __PAIR64__(v15, v16);
            CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v76, (AudioObjectPropertyAddress *)&v72, v12);
            break;
          case 1937072758:
            LODWORD(v72) = 1937125988;
            *(_QWORD *)((char *)&v72 + 4) = __PAIR64__(v15, v16);
            CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v76, (AudioObjectPropertyAddress *)&v72, v12);
            break;
          case 1986817381:
            if (v16 == 1886679669)
            {
              *(_QWORD *)&v72 = 0x707472756D763264;
            }
            else
            {
              LODWORD(v72) = 1983013986;
              DWORD1(v72) = v16;
            }
            goto LABEL_160;
        }
      }
      else if (v19 == 1818456950)
      {
        switch(v10)
        {
          case 1936028007:
            LODWORD(v72) = 1936811891;
            *(_QWORD *)((char *)&v72 + 4) = __PAIR64__(v15, v16);
            CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v76, (AudioObjectPropertyAddress *)&v72, v12);
            break;
          case 1937072758:
            LODWORD(v72) = 1937140845;
            *(_QWORD *)((char *)&v72 + 4) = __PAIR64__(v15, v16);
            CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v76, (AudioObjectPropertyAddress *)&v72, v12);
            break;
          case 1986817381:
            if (v16 == 1886679669)
              *(_QWORD *)&v72 = 0x707472756D767363;
            else
              *(_QWORD *)&v72 = __PAIR64__(v16, v62[3]);
LABEL_160:
            DWORD2(v72) = v15;
            CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v76, (AudioObjectPropertyAddress *)&v72, v12);
            break;
        }
      }
    }
  }
  TransportType = HALS_IODevice::GetTransportType(v67);
  v10 = *((_DWORD *)a2 + 5);
  LODWORD(v13) = *((_DWORD *)a2 + 6);
  LODWORD(v7) = v63;
  if (TransportType != 1651274862)
    goto LABEL_188;
  v22 = v10 == (_DWORD)v13;
  v23 = v10 == 1685287523;
  if (v10 == 1685287523)
    v22 = 1;
  if (v10 != (_DWORD)v13)
    v23 = 1;
  v24 = v22 ? v23 : (_DWORD)v13 == 1685287523;
  if (v24 != 1 || v15 != 0)
    goto LABEL_188;
  v26 = a5;
  if (v63)
  {
    v27 = 12 * v63;
    v26 = a5;
    while (v26->mSelector != 1935893353)
    {
      ++v26;
      v27 -= 12;
      if (!v27)
        goto LABEL_188;
    }
  }
  if (v26 == &a5[v63])
    goto LABEL_188;
  HALS_Device::UpdateDeviceArrivalTime(v67);
  v28 = *((_DWORD *)v67 + 4);
  v29 = v74;
  if ((unint64_t)v74 >= v75)
  {
    v54 = (char *)__p;
    v55 = (v74 - (_BYTE *)__p) >> 2;
    v56 = v55 + 1;
    if ((unint64_t)(v55 + 1) >> 62)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v57 = v75 - (_QWORD)__p;
    if ((uint64_t)(v75 - (_QWORD)__p) >> 1 > v56)
      v56 = v57 >> 1;
    if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL)
      v58 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v58 = v56;
    if (v58)
      v58 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v58);
    else
      v59 = 0;
    v60 = (char *)(v58 + 4 * v55);
    *(_DWORD *)v60 = v28;
    v30 = v60 + 4;
    while (v29 != v54)
    {
      v61 = *((_DWORD *)v29 - 1);
      v29 -= 4;
      *((_DWORD *)v60 - 1) = v61;
      v60 -= 4;
    }
    __p = v60;
    v75 = v58 + 4 * v59;
    if (v54)
      operator delete(v54);
  }
  else
  {
    *(_DWORD *)v74 = v28;
    v30 = v29 + 4;
  }
  LODWORD(v7) = v63;
  v74 = v30;
  v66 = 1;
  v10 = *((_DWORD *)a2 + 5);
  LODWORD(v13) = *((_DWORD *)a2 + 6);
LABEL_189:
  if (v10 == (_DWORD)v13 || v10 == 1634956402)
  {
    if (v10 != 1634956402 && v10 == (_DWORD)v13)
      goto LABEL_214;
  }
  else if ((_DWORD)v13 != 1634956402)
  {
    goto LABEL_214;
  }
  v31 = *((unsigned int *)a2 + 4);
  *(_QWORD *)&v72 = 0x676C6F627363686ELL;
  DWORD2(v72) = 0;
  v78[0] = 0;
  (*(void (**)(const HALS_Object *, uint64_t, __int128 *, uint64_t, _QWORD *, char *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a2 + 112))(a2, v31, &v72, 4, v78, (char *)v78 + 4, 0, 0, 0);
  v32 = HIDWORD(v78[0]);
  v33 = *((unsigned int *)a2 + 4);
  *(_QWORD *)&v72 = 0x676C6F6273646972;
  DWORD2(v72) = 0;
  v78[0] = 0;
  (*(void (**)(const HALS_Object *, uint64_t, __int128 *, uint64_t, _QWORD *, char *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a2 + 112))(a2, v33, &v72, 4, v78, (char *)v78 + 4, 0, 0, 0);
  if (HIDWORD(v78[0]))
    v35 = 1768845428;
  else
    v35 = 1869968496;
  if ((_DWORD)v7)
  {
    v7 = v7;
    do
    {
      v37 = a5->mSelector;
      ++a5;
      v36 = v37;
      if (v37 > 1936092512)
      {
        if (v36 == 1936092513)
        {
          LODWORD(v72) = 1936092513;
          *(_QWORD *)((char *)&v72 + 4) = __PAIR64__(v32, v35);
          CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v76, (AudioObjectPropertyAddress *)&v72, v34);
          LODWORD(v72) = 1936092451;
          *(_QWORD *)((char *)&v72 + 4) = __PAIR64__(v32, v35);
          CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v76, (AudioObjectPropertyAddress *)&v72, v40);
          if (v32 == 1)
          {
            LODWORD(v72) = 1936092513;
            *(_QWORD *)((char *)&v72 + 4) = v35;
            CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v76, (AudioObjectPropertyAddress *)&v72, v34);
            LODWORD(v72) = 1936092451;
            *(_QWORD *)((char *)&v72 + 4) = v35;
            CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v76, (AudioObjectPropertyAddress *)&v72, v41);
          }
        }
        else if (v36 == 1936092532)
        {
          LODWORD(v72) = 1936092532;
          *(_QWORD *)((char *)&v72 + 4) = __PAIR64__(v32, v35);
          CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v76, (AudioObjectPropertyAddress *)&v72, v34);
          if (v32 == 1)
          {
            LODWORD(v72) = 1936092532;
            *(_QWORD *)((char *)&v72 + 4) = v35;
            CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v76, (AudioObjectPropertyAddress *)&v72, v34);
          }
        }
      }
      else if (v36 == 1885762592)
      {
        LODWORD(v72) = 1885762592;
        *(_QWORD *)((char *)&v72 + 4) = __PAIR64__(v32, v35);
        CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v76, (AudioObjectPropertyAddress *)&v72, v34);
        if (v32 == 1)
        {
          LODWORD(v72) = 1885762592;
          *(_QWORD *)((char *)&v72 + 4) = v35;
          CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v76, (AudioObjectPropertyAddress *)&v72, v34);
        }
      }
      else if (v36 == 1885762657)
      {
        LODWORD(v72) = 1885762657;
        *(_QWORD *)((char *)&v72 + 4) = __PAIR64__(v32, v35);
        CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v76, (AudioObjectPropertyAddress *)&v72, v34);
        LODWORD(v72) = 1885762595;
        *(_QWORD *)((char *)&v72 + 4) = __PAIR64__(v32, v35);
        CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v76, (AudioObjectPropertyAddress *)&v72, v38);
        if (v32 == 1)
        {
          LODWORD(v72) = 1885762657;
          *(_QWORD *)((char *)&v72 + 4) = v35;
          CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v76, (AudioObjectPropertyAddress *)&v72, v34);
          LODWORD(v72) = 1885762595;
          *(_QWORD *)((char *)&v72 + 4) = v35;
          CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v76, (AudioObjectPropertyAddress *)&v72, v39);
        }
      }
      --v7;
    }
    while (v7);
  }
LABEL_214:
  if (v76[0] != v76[1])
  {
    v42 = (HALS_NotificationManager *)*((unsigned int *)v67 + 4);
    v43 = -1431655765 * ((unint64_t)((char *)v76[1] - (char *)v76[0]) >> 2);
    if (v65)
      HALS_Object::PropertiesChanged_Sync(v67, v42, v64, v43, (const AudioObjectPropertyAddress *)v76[0]);
    else
      HALS_Object::PropertiesChanged(v67, v42, v64, v43, (const AudioObjectPropertyAddress *)v76[0]);
  }
  if (v66)
  {
    if (__p == v74)
    {
      v70 = 0;
      v71 = 0;
      HALS_System::GetInstance(&v72, 0, &v70);
      HALS_System::CheckForDefaultDeviceChanges((HALS_System *)v72);
      v50 = (std::__shared_weak_count *)*((_QWORD *)&v72 + 1);
      if (*((_QWORD *)&v72 + 1))
      {
        v51 = (unint64_t *)(*((_QWORD *)&v72 + 1) + 8);
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
      v47 = v71;
      if (v71)
      {
        p_shared_owners = (unint64_t *)&v71->__shared_owners_;
        do
          v49 = __ldaxr(p_shared_owners);
        while (__stlxr(v49 - 1, p_shared_owners));
LABEL_237:
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
      }
    }
    else
    {
      v68 = 0;
      v69 = 0;
      HALS_System::GetInstance(&v72, 0, &v68);
      HALS_System::CheckForDefaultDeviceChanges((HALS_PlatformBehaviors *)v72, (uint64_t)&__p);
      v44 = (std::__shared_weak_count *)*((_QWORD *)&v72 + 1);
      if (*((_QWORD *)&v72 + 1))
      {
        v45 = (unint64_t *)(*((_QWORD *)&v72 + 1) + 8);
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 - 1, v45));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
        }
      }
      v47 = v69;
      if (v69)
      {
        v48 = (unint64_t *)&v69->__shared_owners_;
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        goto LABEL_237;
      }
    }
  }
  if (__p)
    operator delete(__p);
  if (v76[0])
    operator delete(v76[0]);
}

void sub_1B5C76CB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,void *a27)
{
  if (__p)
    operator delete(__p);
  if (a27)
    operator delete(a27);
  _Unwind_Resume(exception_object);
}

void HALS_Device::FlushAllQueues(HALS_Device *this)
{
  AMCP::Utility::Dispatch_Queue::flush_all_work((HALS_Device *)((char *)this + 664));
  AMCP::Utility::Dispatch_Queue::flush_all_work((HALS_Device *)((char *)this + 984));
}

uint64_t HALS_Device::DoAnyQueuesHaveWorkAfterFlush(HALS_Device *this)
{
  unsigned __int8 v1;
  unsigned __int8 v2;

  v1 = atomic_load((unsigned __int8 *)this + 697);
  if ((v1 & 1) != 0)
    return 1;
  v2 = atomic_load((unsigned __int8 *)this + 1017);
  return v2 & 1;
}

float HALS_Device::GetCombinedVolumeScalarForClient(HALS_Device *this, int a2, char a3)
{
  HALB_Mutex *v3;
  float v4;
  _QWORD v6[6];
  int v7;
  char v8;
  uint64_t v9;
  float *v10;
  uint64_t v11;
  int v12;

  v9 = 0;
  v10 = (float *)&v9;
  v11 = 0x2000000000;
  v12 = 1065353216;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 0x40000000;
  v6[2] = ___ZNK11HALS_Device32GetCombinedVolumeScalarForClientEjb_block_invoke;
  v6[3] = &unk_1E699DA78;
  v6[4] = &v9;
  v6[5] = this;
  v7 = a2;
  v8 = a3;
  v3 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v3, (uint64_t)v6);
  v4 = v10[6];
  _Block_object_dispose(&v9, 8);
  return v4;
}

void sub_1B5C76E50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL HALS_Device::ReapplyDSP(HALS_Device *this)
{
  uint64_t v2;
  HALB_Mutex *v3;
  _BOOL8 v4;
  HALB_Mutex *v5;
  _QWORD v7[6];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;
  _QWORD v12[5];

  v8 = 0;
  v9 = &v8;
  v10 = 0x2000000000;
  v11 = 0;
  v2 = MEMORY[0x1E0C809B0];
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 0x40000000;
  v7[2] = ___ZN11HALS_Device10ReapplyDSPEv_block_invoke;
  v7[3] = &unk_1E699D920;
  v7[4] = &v8;
  v7[5] = this;
  v3 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v3, (uint64_t)v7);
  if (*((_BYTE *)v9 + 24))
  {
    v4 = 1;
  }
  else
  {
    v12[0] = v2;
    v12[1] = 0x40000000;
    v12[2] = ___ZN11HALS_Device19ClearDSPDescriptionEv_block_invoke;
    v12[3] = &__block_descriptor_tmp_61_14204;
    v12[4] = this;
    v5 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v5, (uint64_t)v12);
    v4 = *((_BYTE *)v9 + 24) != 0;
  }
  _Block_object_dispose(&v8, 8);
  return v4;
}

void sub_1B5C76F5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t HALS_Device::HasValidDSP(HALS_Device *this)
{
  HALB_Mutex *v1;
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v8 = 0;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK11HALS_Device11HasValidDSPEv_block_invoke;
  v4[3] = &unk_1E699D948;
  v4[4] = &v5;
  v4[5] = this;
  v1 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v1, (uint64_t)v4);
  v2 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1B5C77008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t HALS_Device::GetDSPScope(HALS_Device *this)
{
  return *((unsigned int *)this + 118);
}

BOOL HALS_Device::CanBeSeenByProcess(HALS_Device *this, HALS_Client *a2)
{
  const __CFString *v4;

  if (!a2
    || *((_DWORD *)a2 + 58) == -1
    || !(*(unsigned int (**)(HALS_Device *))(*(_QWORD *)this + 472))(this))
  {
    return 1;
  }
  v4 = (const __CFString *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 480))(this);
  return HALS_ClientEntitlements::HasEntitlementWithBooleanValue((HALS_Client *)((char *)a2 + 288), v4);
}

BOOL HALS_Device::IsRunningSomewhereElse(HALS_Device *this, HALS_Client *a2)
{
  uint64_t v4;
  os_unfair_lock_s *v5;
  _QWORD *v6;
  uint64_t *mcp_object;
  int v8;
  unsigned int v9;
  HALB_Mutex *v10;
  int v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t *v15;
  uint64_t v16;
  HALS_Object *v17;
  HALS_ObjectMap *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unsigned int *v25;
  unsigned int *v26;
  int v27;
  uint64_t v28;
  HALB_Mutex *v29;
  uint64_t *v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  unint64_t *v34;
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  _QWORD v40[5];
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t);
  void *v44;
  unsigned int **v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int **v48;
  uint64_t v49;
  __n128 (*v50)(_QWORD *, uint64_t);
  void (*v51)(uint64_t);
  _QWORD v52[3];
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t);
  void *v56;
  void ***v57;
  uint64_t v58;
  void **v59;
  void ***v60;
  uint64_t v61;
  uint64_t (*v62)(uint64_t, uint64_t);
  uint64_t (*v63)(uint64_t);
  _BYTE v64[32];
  int v65;

  if (AMCP::Feature_Flags::run_hybrid_hal(this, (const BOOL *)a2))
  {
    v41 = 0;
    v42 = 0;
    HALS_System::GetInstance(&v53, 0, &v41);
    v4 = *(_QWORD *)(v53 + 1392);
    v5 = (os_unfair_lock_s *)(v4 + 16);
    os_unfair_lock_lock((os_unfair_lock_t)(v4 + 16));
    v6 = (_QWORD *)(v4 + 40);
    mcp_object = HALS_IOContext_Manager_Impl::Object_Map::find_mcp_object((HALS_IOContext_Manager_Impl::Object_Map *)(v4 + 40), *((_DWORD *)this + 4));
    if (!((unint64_t)mcp_object >> 32))
    {
      v8 = 0;
LABEL_19:
      os_unfair_lock_unlock(v5);
      v19 = (std::__shared_weak_count *)v54;
      if (v54)
      {
        v20 = (unint64_t *)(v54 + 8);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v22 = (std::__shared_weak_count *)v42;
      if (v42)
      {
        v23 = (unint64_t *)(v42 + 8);
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        goto LABEL_48;
      }
      return v8 != 0;
    }
    AMCP::IO_Core::Graph_Manager::find_timebases_from_object_id((AMCP::IO_Core::Graph_Manager *)&v59, *(_QWORD **)(v4 + 136), mcp_object);
    AMCP::IO_Core::Graph_Manager::find_contexts_using_timebase(&v47, *(_QWORD ***)(v4 + 136), (uint64_t)&v59);
    v12 = v47;
    v13 = (unsigned int *)v48;
    if (v47 == (unsigned int *)v48)
    {
      v8 = 0;
      if (!v47)
        goto LABEL_18;
    }
    else
    {
      v8 = 0;
      v14 = v47;
      do
      {
        v15 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>(v6, *v14);
        if (v15)
        {
          v16 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)v15 + 5));
          v18 = (HALS_ObjectMap *)v16;
          if (v16
            && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v16 + 224))(v16)
            && (!a2 || **((_DWORD **)v18 + 8) != *((_DWORD *)a2 + 4)))
          {
            ++v8;
          }
          HALS_ObjectMap::ReleaseObject(v18, v17);
        }
        ++v14;
      }
      while (v14 != v13);
      if (!v12)
        goto LABEL_18;
    }
    operator delete(v12);
LABEL_18:
    v47 = (unsigned int *)&v59;
    std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
    goto LABEL_19;
  }
  v36 = 0;
  v37 = 0;
  HALS_System::GetInstance(&v38, 0, &v36);
  v9 = *((_DWORD *)this + 4);
  v47 = 0;
  v48 = &v47;
  v49 = 0x4002000000;
  v50 = __Block_byref_object_copy__35;
  v51 = __Block_byref_object_dispose__36;
  memset(v52, 0, sizeof(v52));
  v41 = MEMORY[0x1E0C809B0];
  v42 = 0x40000000;
  v43 = ___ZNK11HALS_System46CountRunningIOContextsForDeviceExcludingClientEjP11HALS_Client_block_invoke;
  v44 = &unk_1E697E228;
  v45 = &v47;
  v46 = v38;
  v10 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 56))(v38);
  HALB_CommandGate::ExecuteCommand(v10, (uint64_t)&v41);
  if (a2)
    v11 = *((_DWORD *)a2 + 4);
  else
    v11 = -1;
  v25 = v48[5];
  v26 = v48[6];
  if (v25 == v26)
  {
    v27 = 0;
  }
  else
  {
    v27 = 0;
    do
    {
      v28 = *(_QWORD *)v25;
      if (*(_QWORD *)v25)
      {
        v59 = 0;
        v60 = &v59;
        v61 = 0x5002000000;
        v62 = __Block_byref_object_copy__52;
        v63 = __Block_byref_object_dispose__53;
        memset(v64, 0, sizeof(v64));
        v65 = 1065353216;
        v53 = MEMORY[0x1E0C809B0];
        v54 = 0x40000000;
        v55 = ___ZNK14HALS_IOContext12GetDeviceSetEv_block_invoke;
        v56 = &unk_1E698B438;
        v57 = &v59;
        v58 = v28;
        v29 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 56))(v28);
        HALB_CommandGate::ExecuteCommand(v29, (uint64_t)&v53);
        std::unordered_set<unsigned int>::unordered_set((uint64_t)v40, (uint64_t)(v60 + 5));
        _Block_object_dispose(&v59, 8);
        std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table((uint64_t)v64);
        v30 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>(v40, v9);
        if (**(_DWORD **)(*(_QWORD *)v25 + 64) != v11
          && (*(unsigned int (**)(_QWORD))(**(_QWORD **)v25 + 224))(*(_QWORD *)v25)
          && v30)
        {
          ++v27;
        }
        std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table((uint64_t)v40);
      }
      v25 += 2;
    }
    while (v25 != v26);
  }
  _Block_object_dispose(&v47, 8);
  v59 = (void **)v52;
  std::vector<HALS_Releaser<HALS_IOContext>>::__destroy_vector::operator()[abi:ne180100](&v59);
  v31 = v39;
  v8 = v27;
  if (v39)
  {
    p_shared_owners = (unint64_t *)&v39->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v22 = v37;
  if (v37)
  {
    v34 = (unint64_t *)&v37->__shared_owners_;
    do
      v24 = __ldaxr(v34);
    while (__stlxr(v24 - 1, v34));
LABEL_48:
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  return v8 != 0;
}

void sub_1B5C774A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void **a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,std::__shared_weak_count *a35)
{
  os_unfair_lock_s *v35;
  uint64_t v36;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;

  a26 = (void **)(v36 - 184);
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&a26);
  os_unfair_lock_unlock(v35);
  v38 = a35;
  if (a35)
  {
    p_shared_owners = (unint64_t *)&a35->__shared_owners_;
    do
      v40 = __ldaxr(p_shared_owners);
    while (__stlxr(v40 - 1, p_shared_owners));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  if (a21)
  {
    v41 = (unint64_t *)&a21->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))a21->__on_zero_shared)(a21);
      std::__shared_weak_count::__release_weak(a21);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t HALS_Device::_ReadHogModeOwnerStore(HALS_Device *this)
{
  return *((unsigned int *)this + 38);
}

uint64_t HALS_Device::_CopyDefaultElementName(HALS_Device *this)
{
  return 0;
}

uint64_t HALS_Device::GetNumberStreamsForClient(HALS_Device *this, char a2, HALS_Client *a3)
{
  HALB_Mutex *v3;
  uint64_t v4;
  _QWORD v6[7];
  char v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2000000000;
  v11 = 0;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 0x40000000;
  v6[2] = ___ZNK11HALS_Device25GetNumberStreamsForClientEbP11HALS_Client_block_invoke;
  v6[3] = &unk_1E699D7E0;
  v6[4] = &v8;
  v6[5] = this;
  v7 = a2;
  v6[6] = a3;
  v3 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v3, (uint64_t)v6);
  v4 = *((unsigned int *)v9 + 6);
  _Block_object_dispose(&v8, 8);
  return v4;
}

void sub_1B5C776D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

unsigned int *HALS_Device::_CopyStreamByChannel(HALS_Device *this, uint64_t a2, unsigned int a3)
{
  int v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int *v10;
  uint64_t v11;
  HALS_Object *v12;
  _BYTE v14[28];
  int v15;
  uint64_t v16;
  uint64_t v17;

  v6 = (*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 384))(this);
  if (!v6)
    return 0;
  v7 = v6;
  v8 = 0;
  v9 = 0;
  while (1)
  {
    v10 = (unsigned int *)(*(uint64_t (**)(HALS_Device *, uint64_t, uint64_t))(*(_QWORD *)this + 392))(this, a2, v8);
    v11 = v10[4];
    v16 = 0x676C6F6270667420;
    v17 = 0;
    (*(void (**)(unsigned int *, uint64_t, uint64_t *, uint64_t, char *, _BYTE *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v10 + 112))(v10, v11, &v16, 40, (char *)&v17 + 4, v14, 0, 0, 0);
    v9 += v15;
    if (v9 >= a3)
      break;
    HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v10, v12);
    v8 = (v8 + 1);
    if (v7 == (_DWORD)v8)
      return 0;
  }
  return v10;
}

uint64_t HALS_Device::_GetNumberStreamsForClient(HALS_Device *this, uint64_t a2, HALS_Client *a3)
{
  int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  HALS_Object *v11;
  HALS_ObjectMap *v12;

  v6 = (*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 384))(this);
  v7 = HALS_Device::ClientDSPInfo::find((uint64_t)this + 616, (uint64_t)a3);
  if (!v7)
    goto LABEL_6;
  v8 = 8;
  if ((_DWORD)a2)
    v8 = 3;
  if (v7[v8])
    return 1;
LABEL_6:
  v9 = 0;
  if (v6)
  {
    v10 = 0;
    do
    {
      v12 = (HALS_ObjectMap *)(*(uint64_t (**)(HALS_Device *, uint64_t, uint64_t))(*(_QWORD *)this + 392))(this, a2, v10);
      if (v12)
        v9 = v9
           + (*(unsigned int (**)(HALS_Device *, HALS_ObjectMap *, HALS_Client *))(*(_QWORD *)this + 608))(this, v12, a3);
      HALS_ObjectMap::ReleaseObject(v12, v11);
      v10 = (v10 + 1);
    }
    while (v6 != (_DWORD)v10);
  }
  return v9;
}

void sub_1B5C778C8(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap *v2;

  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t HALS_Device::_GetNumberStreamsExcludingReferenceStreams(HALS_Device *this, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  HALS_Stream *v8;
  HALS_Object *v9;
  HALS_ObjectMap *v10;

  v4 = (*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 384))(this);
  if (!v4)
    return 0;
  v5 = v4;
  v6 = 0;
  v7 = 0;
  do
  {
    v8 = (HALS_Stream *)(*(uint64_t (**)(HALS_Device *, uint64_t, uint64_t))(*(_QWORD *)this + 392))(this, a2, v7);
    v10 = v8;
    if (v8)
      v6 = v6 + !HALS_Stream::IsReferenceStream(v8);
    HALS_ObjectMap::ReleaseObject(v10, v9);
    v7 = (v7 + 1);
  }
  while (v5 != (_DWORD)v7);
  return v6;
}

void sub_1B5C77980(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap *v2;

  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t HALS_Device::_GetNumberReferenceStreams(HALS_Device *this, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  HALS_Stream *v8;
  HALS_Object *v9;
  HALS_ObjectMap *v10;

  v4 = (*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 384))(this);
  if (!v4)
    return 0;
  v5 = v4;
  v6 = 0;
  v7 = 0;
  do
  {
    v8 = (HALS_Stream *)(*(uint64_t (**)(HALS_Device *, uint64_t, uint64_t))(*(_QWORD *)this + 392))(this, a2, v7);
    v10 = v8;
    if (v8)
      v6 = (v6 + HALS_Stream::IsReferenceStream(v8));
    HALS_ObjectMap::ReleaseObject(v10, v9);
    v7 = (v7 + 1);
  }
  while (v5 != (_DWORD)v7);
  return v6;
}

void sub_1B5C77A34(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap *v2;

  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

HALS_ObjectMap *HALS_Device::_CopyStreamByIndexForClient(HALS_Device *this, uint64_t a2, int a3, HALS_Client *a4)
{
  uint64_t *v8;
  HALS_Object *v9;
  uint64_t v10;
  HALS_ObjectMap *v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  HALS_ObjectMap *v16;
  HALS_Object *v17;

  v8 = HALS_Device::ClientDSPInfo::find((uint64_t)this + 616, (uint64_t)a4);
  if (v8)
  {
    v10 = 8;
    if ((_DWORD)a2)
      v10 = 3;
    v11 = (HALS_ObjectMap *)v8[v10];
    if (v11)
    {
      if (!a3)
      {
        HALS_ObjectMap::RetainObject((HALS_ObjectMap *)v8[v10], v9);
        return v11;
      }
      return 0;
    }
  }
  v12 = (*(uint64_t (**)(HALS_Device *, uint64_t))(*(_QWORD *)this + 384))(this, a2);
  if (!v12)
    return 0;
  v13 = v12;
  v14 = 0;
  v15 = 1;
  do
  {
    v16 = (HALS_ObjectMap *)(*(uint64_t (**)(HALS_Device *, uint64_t, _QWORD))(*(_QWORD *)this + 392))(this, a2, v15 - 1);
    if ((*(unsigned int (**)(HALS_Device *, HALS_ObjectMap *, HALS_Client *))(*(_QWORD *)this + 608))(this, v16, a4))
    {
      if (v14 == a3)
      {
        HALS_ObjectMap::RetainObject(v16, v17);
        v14 = a3;
        v11 = v16;
      }
      else
      {
        v11 = 0;
        ++v14;
      }
    }
    else
    {
      v11 = 0;
    }
    HALS_ObjectMap::ReleaseObject(v16, v17);
    if (v11)
      break;
  }
  while (v15++ < v13);
  return v11;
}

void sub_1B5C77B84(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap *v2;

  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t HALS_Device::_GetTotalNumberChannelsForClient(HALS_Device *this, uint64_t a2, HALS_Client *a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  HALB_Mutex *v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  unsigned int *v14;
  HALS_Object *v15;
  uint64_t v16;
  uint64_t v18;
  int v19;
  unsigned int v20;
  int v21;
  _QWORD v22[3];
  void *v23;
  uint64_t v24;
  uint64_t *v25;

  v6 = HALS_Device::ClientDSPInfo::find((uint64_t)this + 616, (uint64_t)a3);
  if (!v6)
    goto LABEL_6;
  v7 = 8;
  if ((_DWORD)a2)
    v7 = 3;
  v8 = v6[v7];
  if (v8)
  {
    v22[0] = MEMORY[0x1E0C809B0];
    v22[1] = 0x40000000;
    v22[2] = ___ZNK14HALS_DSPStream24GetCurrentPhysicalFormatER27AudioStreamBasicDescription_block_invoke;
    v23 = &__block_descriptor_tmp_19_12206;
    v24 = v8;
    v25 = &v18;
    v9 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 56))(v8);
    HALB_CommandGate::ExecuteCommand(v9, (uint64_t)v22);
    return v20;
  }
  else
  {
LABEL_6:
    v11 = (*(uint64_t (**)(HALS_Device *, uint64_t))(*(_QWORD *)this + 384))(this, a2);
    if (v11)
    {
      v12 = v11;
      v13 = 0;
      v10 = 0;
      do
      {
        v14 = (unsigned int *)(*(uint64_t (**)(HALS_Device *, uint64_t, uint64_t))(*(_QWORD *)this + 392))(this, a2, v13);
        if ((*(unsigned int (**)(HALS_Device *, unsigned int *, HALS_Client *))(*(_QWORD *)this + 608))(this, v14, a3))
        {
          v16 = v14[4];
          v18 = 0x676C6F6270667420;
          v19 = 0;
          v21 = 0;
          (*(void (**)(unsigned int *, uint64_t, uint64_t *, uint64_t, int *, _QWORD *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v14 + 112))(v14, v16, &v18, 40, &v21, v22, 0, 0, 0);
          v10 = (HIDWORD(v23) + v10);
        }
        HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v14, v15);
        v13 = (v13 + 1);
      }
      while (v12 != (_DWORD)v13);
    }
    else
    {
      return 0;
    }
  }
  return v10;
}

void sub_1B5C77D2C(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap *v2;

  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

BOOL HALS_Device::_ClientCanUseStream(uint64_t a1, HALS_Stream *this, uint64_t a3)
{
  _BOOL8 result;

  if (!this)
    return 0;
  if (!*((_BYTE *)this + 52) || !HALS_Stream::IsReferenceStream(this))
    return 1;
  if (*((_DWORD *)this + 14) > 1u)
    return 0;
  result = 1;
  if (a3)
  {
    if (!*(_BYTE *)(a1 + 520))
      return HALS_ReferenceStreamStateManager::GetReferenceStreamStateForClient(*(std::__shared_mutex_base **)(a1 + 440), *(_DWORD *)(a3 + 16));
  }
  return result;
}

void HALS_Device::CopyControls(HALS_Device *this, HALS_Device::BasicControlList *a2)
{
  HALB_Mutex *v2;
  _QWORD v3[6];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = ___ZNK11HALS_Device12CopyControlsERNS_16BasicControlListE_block_invoke;
  v3[3] = &__block_descriptor_tmp_62_14196;
  v3[4] = this;
  v3[5] = a2;
  v2 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v3);
}

uint64_t HALS_Device::GetNumberControls(HALS_Device *this)
{
  HALB_Mutex *v1;
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v8 = 0;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK11HALS_Device17GetNumberControlsEv_block_invoke;
  v4[3] = &unk_1E699D9B0;
  v4[4] = &v5;
  v4[5] = this;
  v1 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v1, (uint64_t)v4);
  v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1B5C77EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t HALS_Device::CopyControlByIndex(HALS_Device *this, int a2)
{
  HALB_Mutex *v2;
  uint64_t v3;
  _QWORD v5[6];
  int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2000000000;
  v10 = 0;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZNK11HALS_Device18CopyControlByIndexEj_block_invoke;
  v5[3] = &unk_1E699D9D8;
  v5[4] = &v7;
  v5[5] = this;
  v6 = a2;
  v2 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v5);
  v3 = v8[3];
  _Block_object_dispose(&v7, 8);
  return v3;
}

void sub_1B5C77F68(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t HALS_Device::CopyControlByDescription(HALS_Device *this, int a2, int a3, int a4)
{
  HALB_Mutex *v4;
  uint64_t v5;
  _QWORD v7[6];
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  v11 = 0;
  v12 = &v11;
  v13 = 0x2000000000;
  v14 = 0;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 0x40000000;
  v7[2] = ___ZNK11HALS_Device24CopyControlByDescriptionEjjj_block_invoke;
  v7[3] = &unk_1E699DA00;
  v7[4] = &v11;
  v7[5] = this;
  v8 = a2;
  v9 = a3;
  v10 = a4;
  v4 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v4, (uint64_t)v7);
  v5 = v12[3];
  _Block_object_dispose(&v11, 8);
  return v5;
}

void sub_1B5C7801C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t HALS_Device::_GetNumberControls(HALS_Device *this)
{
  return 0;
}

uint64_t HALS_Device::_CopyControlByIndex(HALS_Device *this)
{
  return 0;
}

uint64_t HALS_Device::_CopyControlByDescription(HALS_Device *this)
{
  return 0;
}

CFMutableDictionaryRef HALS_Device::_CreateLegacyIOContextDescription(HALS_Device *this, HALS_Client *a2)
{
  __CFDictionary *v4;
  int *v5;
  uint64_t v6;
  unsigned int *v7;
  unint64_t v8;
  unsigned int v9;
  _QWORD **v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD **v13;
  unsigned int v14;
  int v15;
  CFNumberRef v16;
  CFNumberRef v17;
  CFNumberRef v18;
  HALS_Device_HostedDSP *v19;
  CFMutableDictionaryRef v20;
  const __CFDictionary *v21;
  CFIndex Count;
  const void **v23;
  CACFDictionary *v24;
  const void *v25;
  uint64_t v27;
  __CFDictionary *v28;
  BOOL v29;
  int v30;
  CFMutableArrayRef Mutable;
  uint64_t v32;
  const CFDictionaryKeyCallBacks *v33;
  const CFDictionaryValueCallBacks *v34;
  HALS_ObjectMap *v35;
  HALS_Object *v36;
  const void *v37;
  int v39;
  uint64_t v40;
  const CFDictionaryKeyCallBacks *v41;
  const CFDictionaryValueCallBacks *v42;
  const CFArrayCallBacks *v43;
  HALS_Object *v44;
  unsigned int *v45;
  uint64_t v46;
  const void *v47;
  CFMutableArrayRef v48;
  void *v49;
  CFMutableDictionaryRef v50;
  CFMutableDictionaryRef v51;
  std::runtime_error *v53;
  std::runtime_error *v54;
  std::runtime_error *exception;
  CFMutableDictionaryRef v56;
  __int16 v57;
  CFMutableArrayRef theArray;
  int v59;
  CFMutableDictionaryRef v60;
  __int16 v61;
  CFMutableDictionaryRef v62;
  __int16 v63;
  CFMutableDictionaryRef theDict;
  __int16 v65;
  void *__p;
  _QWORD *v67[2];
  char v68;
  unsigned int v69;
  CFMutableDictionaryRef valuePtr;
  __int16 v71;

  theDict = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
  v65 = 257;
  CACFDictionary::AddUInt32(&theDict, CFSTR("device id"), *((_DWORD *)this + 4));
  if (a2)
  {
    v4 = theDict;
    v5 = &HALS_Device::_AddDSPKeysToIOContextDescriptionForClient(HALS_Client *,__CFDictionary *,std::optional<unsigned int>)const::hostedDspKeys;
    do
    {
      HALS_Device::_GetDSPTypesForClient((uint64_t *)&__p, (uint64_t)this, v5[1] == 1768845428, (uint64_t)a2);
      if (v67[1])
      {
        v6 = v5[2];
        if ((_DWORD)v6)
        {
          v7 = (unsigned int *)(v5 + 3);
          v8 = (unint64_t)&v5[v6 + 3];
          while (1)
          {
            if (v67[0])
            {
              v9 = *v7;
              v10 = v67;
              v11 = v67[0];
              do
              {
                v12 = v11;
                v13 = v10;
                v14 = *((_DWORD *)v11 + 7);
                if (v14 >= v9)
                  v10 = (_QWORD **)v11;
                else
                  ++v11;
                v11 = (_QWORD *)*v11;
              }
              while (v11);
              if (v10 != v67)
              {
                if (v14 < v9)
                  v12 = v13;
                if (v9 >= *((_DWORD *)v12 + 7))
                  break;
              }
            }
            if ((unint64_t)++v7 >= v8)
              goto LABEL_17;
          }
          if (v9)
          {
            v15 = *v5;
            if (*v5 == 1934647636)
            {
              LODWORD(valuePtr) = v9;
              v18 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
              if (!v18)
              {
                exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(exception, "Could not construct");
                __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              CFDictionarySetValue(v4, CFSTR("spatialization type"), v18);
              CFRelease(v18);
            }
            else if (v15 == 1983996971)
            {
              LODWORD(valuePtr) = v9;
              v17 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
              if (!v17)
              {
                v54 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v54, "Could not construct");
                __cxa_throw(v54, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              CFDictionarySetValue(v4, CFSTR("voice activity detection enable"), v17);
              CFRelease(v17);
            }
            else if (v15 == 1986622324)
            {
              LODWORD(valuePtr) = v9;
              v16 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
              if (!v16)
              {
                v53 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v53, "Could not construct");
                __cxa_throw(v53, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              CFDictionarySetValue(v4, CFSTR("vocal isolation type"), v16);
              CFRelease(v16);
            }
          }
        }
      }
LABEL_17:
      std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v67[0]);
      v5 += 5;
    }
    while (v5 < (int *)"11HALS_Device");
    v19 = (HALS_Device_HostedDSP *)*((_QWORD *)this + 76);
    if (v19)
    {
      HALS_Device_HostedDSP::RationalizeDSPOffloadsForClient((HALS_Device_HostedDSP *)&v62, v19, (HALS_Client *)1, (uint64_t)a2);
      v20 = v62;
      if (v62)
      {
        v21 = (const __CFDictionary *)*((_QWORD *)v62 + 2);
        if (v21)
        {
          Count = CFDictionaryGetCount(v21);
          if (v4)
          {
            if (Count)
            {
              DSP_Host_OffloadDictionary::deep_copy((DSP_Host_OffloadDictionary *)&__p, (uint64_t)v20);
              v23 = (const void **)__p;
              if (__p)
              {
                if (*((_QWORD *)__p + 2))
                {
                  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&valuePtr, "device dsp offloads input");
                  CFDictionaryAddValue(v4, valuePtr, v23[2]);
                  if (valuePtr)
                    CFRelease(valuePtr);
                }
                else
                {
                  __p = 0;
                }
                std::default_delete<DSP_Host_OffloadDictionary>::operator()[abi:ne180100]((uint64_t)v23);
              }
            }
          }
        }
        std::default_delete<DSP_Host_OffloadDictionary>::operator()[abi:ne180100]((uint64_t)v20);
      }
    }
    HALS_Device::_GetDSPVirtualChannelLayoutForClient((uint64_t *)&__p, (uint64_t)this, 0, (uint64_t)a2);
    if (v68)
    {
      valuePtr = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
      v71 = 256;
      if (!v68)
        std::__throw_bad_optional_access[abi:ne180100]();
      HALS_Device::ConstructDictionaryFromLayout((HALS_Device *)__p, &valuePtr, v24);
      CFDictionarySetValue(v4, CFSTR("spatialization virtual channel layout"), valuePtr);
      CACFDictionary::~CACFDictionary((CACFDictionary *)&valuePtr);
      if (v68 && __p)
      {
        v67[0] = __p;
        operator delete(__p);
      }
    }
  }
  v25 = (const void *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 200))(this);
  if (HIBYTE(v65))
  {
    if (v25 && theDict != 0)
      CFDictionarySetValue(theDict, CFSTR("master uid"), v25);
  }
  if (a2)
    v27 = *((unsigned int *)a2 + 4);
  else
    v27 = 0;
  v28 = (__CFDictionary *)(*(uint64_t (**)(HALS_Device *, uint64_t))(*(_QWORD *)this + 808))(this, v27);
  valuePtr = v28;
  LOBYTE(v71) = 1;
  if (v28)
    v29 = HIBYTE(v65) == 0;
  else
    v29 = 1;
  if (!v29 && theDict)
    CFDictionarySetValue(theDict, CFSTR("clock device uid"), v28);
  v30 = (*(uint64_t (**)(HALS_Device *, uint64_t, __CFDictionary *))(*(_QWORD *)this + 384))(this, 1, v28);
  if (v30)
  {
    Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B380]);
    v32 = 0;
    v33 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B398];
    v34 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A8];
    __p = Mutable;
    LOWORD(v67[0]) = 257;
    do
    {
      v35 = (HALS_ObjectMap *)(*(uint64_t (**)(HALS_Device *, uint64_t, uint64_t))(*(_QWORD *)this + 392))(this, 1, v32);
      if ((*(unsigned int (**)(HALS_Device *, HALS_ObjectMap *, HALS_Client *))(*(_QWORD *)this + 608))(this, v35, a2))
      {
        v62 = CFDictionaryCreateMutable(0, 0, v33, v34);
        v63 = 257;
        v37 = (const void *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 200))(this);
        if (HIBYTE(v63))
        {
          if (v37 && v62 != 0)
            CFDictionarySetValue(v62, CFSTR("uid"), v37);
        }
        CACFDictionary::AddUInt32(&v62, CFSTR("index"), v32);
        if (__p && BYTE1(v67[0]))
          CFArrayAppendValue((CFMutableArrayRef)__p, v62);
        if (valuePtr)
        {
          CACFDictionary::AddUInt32(&v62, CFSTR("drift"), 1);
          CACFDictionary::AddUInt32(&v62, CFSTR("drift algorithm"), 0);
          CACFDictionary::AddUInt32(&v62, CFSTR("drift quality"), 127);
        }
        CACFDictionary::~CACFDictionary((CACFDictionary *)&v62);
      }
      HALS_ObjectMap::ReleaseObject(v35, v36);
      v32 = (v32 + 1);
    }
    while (v30 != (_DWORD)v32);
    if (__p && CFArrayGetCount((CFArrayRef)__p) && HIBYTE(v65) && __p && theDict)
      CFDictionarySetValue(theDict, CFSTR("grid-in"), __p);
    CACFArray::~CACFArray((CACFArray *)&__p);
  }
  v39 = (*(uint64_t (**)(HALS_Device *, _QWORD))(*(_QWORD *)this + 384))(this, 0);
  if (v39)
  {
    v40 = 0;
    v62 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B380]);
    v63 = 257;
    v41 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B398];
    v42 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A8];
    v43 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B380];
    do
    {
      v45 = (unsigned int *)(*(uint64_t (**)(HALS_Device *, _QWORD, uint64_t))(*(_QWORD *)this + 392))(this, 0, v40);
      if (v45)
      {
        v60 = CFDictionaryCreateMutable(0, 0, v41, v42);
        v61 = 257;
        v46 = v45[4];
        theArray = (CFMutableArrayRef)0x676C6F6270667420;
        v59 = 0;
        LODWORD(v56) = 0;
        (*(void (**)(unsigned int *, uint64_t, CFMutableArrayRef *, uint64_t, CFMutableDictionaryRef *, void **, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v45 + 112))(v45, v46, &theArray, 40, &v56, &__p, 0, 0, 0);
        CACFDictionary::AddUInt32(&v60, CFSTR("channels"), v69);
        __p = CFArrayCreateMutable(0, 0, v43);
        LOWORD(v67[0]) = 257;
        theArray = CFArrayCreateMutable(0, 0, v43);
        LOWORD(v59) = 257;
        v56 = CFDictionaryCreateMutable(0, 0, v41, v42);
        v57 = 257;
        v47 = (const void *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 200))(this);
        if (HIBYTE(v57) && v47 && v56)
          CFDictionarySetValue(v56, CFSTR("uid"), v47);
        CACFDictionary::AddUInt32(&v56, CFSTR("index"), v40);
        if (valuePtr)
        {
          CACFDictionary::AddUInt32(&v56, CFSTR("drift"), 1);
          CACFDictionary::AddUInt32(&v56, CFSTR("drift algorithm"), 0);
          CACFDictionary::AddUInt32(&v56, CFSTR("drift quality"), 127);
        }
        v48 = theArray;
        if (theArray && BYTE1(v59))
        {
          CFArrayAppendValue(theArray, v56);
          v48 = theArray;
        }
        v49 = __p;
        if (__p && BYTE1(v67[0]))
        {
          CFArrayAppendValue((CFMutableArrayRef)__p, v48);
          v49 = __p;
        }
        v50 = v60;
        if (HIBYTE(v61) && v49 && v60)
        {
          CFDictionarySetValue(v60, CFSTR("stream groups"), v49);
          v50 = v60;
        }
        if (v62 && HIBYTE(v63))
          CFArrayAppendValue(v62, v50);
        CACFDictionary::~CACFDictionary((CACFDictionary *)&v56);
        CACFArray::~CACFArray((CACFArray *)&theArray);
        CACFArray::~CACFArray((CACFArray *)&__p);
        CACFDictionary::~CACFDictionary((CACFDictionary *)&v60);
      }
      HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v45, v44);
      v40 = (v40 + 1);
    }
    while (v39 != (_DWORD)v40);
    if (HIBYTE(v65) && v62 && theDict)
      CFDictionarySetValue(theDict, CFSTR("grid-out"), v62);
    CACFArray::~CACFArray((CACFArray *)&v62);
  }
  if (theDict)
  {
    CFRetain(theDict);
    v51 = theDict;
  }
  else
  {
    v51 = 0;
  }
  CACFString::~CACFString((CACFString *)&valuePtr);
  CACFDictionary::~CACFDictionary((CACFDictionary *)&theDict);
  return v51;
}

void sub_1B5C78970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,char a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const void *v28;

  v28 = *(const void **)(v26 - 120);
  if (v28)
    CFRelease(v28);
  std::default_delete<DSP_Host_OffloadDictionary>::operator()[abi:ne180100](v25);
  std::default_delete<DSP_Host_OffloadDictionary>::operator()[abi:ne180100](v24);
  CACFDictionary::~CACFDictionary((CACFDictionary *)&a19);
  _Unwind_Resume(a1);
}

BOOL HALS_Device::IsClockDeviceUIDSetForAnyClient(uint64_t a1, CFTypeRef *a2)
{
  CFTypeRef v3;
  HALB_Mutex *v4;
  int v5;
  _QWORD v7[6];
  CFTypeRef cf;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  char v12;

  v9 = 0;
  v10 = &v9;
  v11 = 0x2000000000;
  v12 = 0;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 1174405120;
  v7[2] = ___ZNK11HALS_Device31IsClockDeviceUIDSetForAnyClientEN10applesauce2CF9StringRefE_block_invoke;
  v7[3] = &unk_1E699DAC0;
  v7[5] = a1;
  v3 = *a2;
  if (*a2)
    CFRetain(*a2);
  cf = v3;
  v7[4] = &v9;
  v4 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  HALB_CommandGate::ExecuteCommand(v4, (uint64_t)v7);
  v5 = *((unsigned __int8 *)v10 + 24);
  if (cf)
    CFRelease(cf);
  _Block_object_dispose(&v9, 8);
  return v5 != 0;
}

void sub_1B5C78C24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  const void **v17;

  applesauce::CF::StringRef::~StringRef(v17);
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

uint64_t HALS_Device::GetClockDeviceNominalSampleRate(HALS_Device *this, HALS_Client *a2)
{
  uint64_t v2;
  HALB_Mutex *v3;
  const __CFString *v4;
  HALB_Mutex *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  HALB_Mutex *v9;
  HALS_Object *v10;
  HALS_ObjectMap **i;
  HALS_ObjectMap *v12;
  const __CFString *v13;
  HALS_Object *v14;
  HALS_Object *v15;
  HALS_Object *v16;
  double v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t v22[2];
  uint64_t v23;
  std::__shared_weak_count *v24;
  _QWORD v25[7];
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t);
  void (*v30)(uint64_t);
  CFTypeRef cf;
  _QWORD v32[6];
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  __n128 (*v36)(_QWORD *, uint64_t);
  void (*v37)(uint64_t, HALS_Object *);
  HALS_ObjectMap **v38[3];
  HALS_ObjectMap **v39;
  HALS_ObjectMap **v40;
  uint64_t v41;
  _QWORD v42[7];

  v26 = 0;
  v27 = &v26;
  v28 = 0x3002000000;
  v29 = __Block_byref_object_copy__97;
  v30 = __Block_byref_object_dispose__98;
  cf = 0;
  v2 = MEMORY[0x1E0C809B0];
  v25[0] = MEMORY[0x1E0C809B0];
  v25[1] = 0x40000000;
  v25[2] = ___ZNK11HALS_Device31GetClockDeviceNominalSampleRateEP11HALS_Client_block_invoke;
  v25[3] = &unk_1E699DAF8;
  v25[5] = this;
  v25[6] = a2;
  v25[4] = &v26;
  v3 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v3, (uint64_t)v25);
  if (!v27[5])
    goto LABEL_25;
  v22[0] = 0;
  v22[1] = 0;
  HALS_System::GetInstance(&v23, 0, v22);
  if (v23)
  {
    v4 = (const __CFString *)v27[5];
    v33 = 0;
    v34 = &v33;
    v35 = 0x4002000000;
    v36 = __Block_byref_object_copy__5429;
    v37 = __Block_byref_object_dispose__5430;
    memset(v38, 0, sizeof(v38));
    v32[0] = v2;
    v32[1] = 0x40000000;
    v32[2] = ___ZNK11HALS_System17CopyIODeviceByUIDEPK10__CFStringP11HALS_Client_block_invoke;
    v32[3] = &unk_1E697DB78;
    v32[4] = &v33;
    v32[5] = v23;
    v5 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 56))(v23);
    HALB_CommandGate::ExecuteCommand(v5, (uint64_t)v32);
    v6 = (uint64_t *)v34[5];
    v7 = (uint64_t *)v34[6];
    if (v6 == v7)
    {
LABEL_13:
      v12 = 0;
    }
    else
    {
      while (1)
      {
        if (v4)
        {
          v8 = *v6;
          v39 = 0;
          v40 = 0;
          v41 = 0;
          v42[0] = v2;
          v42[1] = 0x40000000;
          v42[2] = ___ZNK18HALS_DeviceManager16CopyIODeviceListERNS_17BasicIODeviceListEP11HALS_Client_block_invoke;
          v42[3] = &__block_descriptor_tmp_8_8239;
          v42[4] = v8;
          v42[5] = &v39;
          v9 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 56))(v8);
          HALB_CommandGate::ExecuteCommand(v9, (uint64_t)v42);
          for (i = v39; i != v40; ++i)
          {
            v12 = *i;
            v13 = (const __CFString *)(*(uint64_t (**)(HALS_ObjectMap *))(*(_QWORD *)*i + 200))(*i);
            if (v13 && CFStringCompare(v13, v4, 0) == kCFCompareEqualTo)
              goto LABEL_11;
          }
          v12 = 0;
LABEL_11:
          HALS_ObjectMap::RetainObject(v12, v10);
          HALS_DeviceManager::BasicIODeviceList::~BasicIODeviceList(&v39, v14);
          if (v12)
            break;
        }
        if (++v6 == v7)
          goto LABEL_13;
      }
    }
    _Block_object_dispose(&v33, 8);
    HALS_System::BasicDeviceManagerList::~BasicDeviceManagerList(v38, v15);
    v17 = v12 ? (*(double (**)(HALS_ObjectMap *))(*(_QWORD *)v12 + 264))(v12) : 0.0;
    HALS_ObjectMap::ReleaseObject(v12, v16);
  }
  else
  {
    v17 = 0.0;
  }
  v18 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (v17 == 0.0)
LABEL_25:
    v17 = 0.0;
  _Block_object_dispose(&v26, 8);
  if (cf)
    CFRelease(cf);
  return *(_QWORD *)&v17;
}

void sub_1B5C78F0C(_Unwind_Exception *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, HALS_System::BasicDeviceManagerList *a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  HALS_ObjectMap *v33;
  uint64_t v34;

  HALS_ObjectMap::ReleaseObject(v33, a2);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  _Block_object_dispose(&a21, 8);
  applesauce::CF::StringRef::~StringRef((const void **)(v34 + 40));
  _Unwind_Resume(a1);
}

BOOL HALS_Device::IsInputMutedForClient(HALS_Device *this, HALS_Client *a2)
{
  HALB_Mutex *v2;
  _BOOL8 v3;
  _QWORD v5[7];
  uint64_t v6;
  float *v7;
  uint64_t v8;
  int v9;

  if (!a2)
    return 1;
  v6 = 0;
  v7 = (float *)&v6;
  v8 = 0x2000000000;
  v9 = 1065353216;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZNK11HALS_Device21IsInputMutedForClientEP11HALS_Client_block_invoke;
  v5[3] = &unk_1E699DB20;
  v5[4] = &v6;
  v5[5] = this;
  v5[6] = a2;
  v2 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v5);
  v3 = v7[6] == 0.0;
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_1B5C79040(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

CFTypeRef HALS_Device::_CopyClientDescription(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  const void *v6;
  _DWORD *v7;
  const void *v8;
  CFTypeRef v9;
  CFTypeRef cf;
  __int16 v12;

  v2 = *(char **)(a1 + 528);
  v3 = *(char **)(a1 + 536);
  if (v2 == v3)
  {
    v4 = *(char **)(a1 + 528);
  }
  else
  {
    v4 = *(char **)(a1 + 528);
    while (*(_DWORD *)v4 != *(_DWORD *)(a2 + 16))
    {
      v4 += 48;
      if (v4 == v3)
      {
        v4 = *(char **)(a1 + 536);
        break;
      }
    }
  }
  if (v4 == v3)
  {
    cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
    v12 = 257;
    CACFDictionary::AddUInt32((CFMutableDictionaryRef *)&cf, CFSTR("kind"), 0);
    if (cf)
    {
      CFRetain(cf);
      v9 = cf;
    }
    else
    {
      v9 = 0;
    }
    CACFDictionary::~CACFDictionary((CACFDictionary *)&cf);
  }
  else
  {
    v5 = &v2[16 * ((v4 - v2) >> 4)];
    v8 = (const void *)*((_QWORD *)v5 + 1);
    v7 = v5 + 8;
    v6 = v8;
    if (v8)
    {
      CFRetain(v6);
      return *(CFTypeRef *)v7;
    }
    else
    {
      return 0;
    }
  }
  return v9;
}

void sub_1B5C79154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CACFDictionary::~CACFDictionary((CACFDictionary *)&a9);
  _Unwind_Resume(a1);
}

uint64_t HALS_Device::_SetClientDescription(HALS_Device *this, HALS_Client *a2, CFTypeRef cf)
{
  char *v5;
  unint64_t v6;
  char *v7;
  unint64_t v13;
  CFTypeRef v14;
  int v15;
  __int128 v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  CFTypeRef v26;
  int v27;
  char *v28;
  __int128 v29;
  int v31;
  CFTypeRef cfa;
  __int16 v33;
  _BYTE v34[21];
  _QWORD v35[2];
  char *v36;
  char *v37;
  char *v38;

  v5 = (char *)*((_QWORD *)this + 66);
  v6 = *((_QWORD *)this + 67);
  v7 = v5;
  if (v5 != (char *)v6)
  {
    while (*(_DWORD *)v7 != *((_DWORD *)a2 + 4))
    {
      v7 += 48;
      if (v7 == (char *)v6)
      {
        v7 = (char *)*((_QWORD *)this + 67);
        break;
      }
    }
  }
  if (v7 == (char *)v6)
  {
    v31 = *((_DWORD *)a2 + 4);
    cfa = cf;
    v33 = 1;
    __asm { FMOV            V0.2S, #1.0 }
    *(_QWORD *)v34 = _D0;
    v34[8] = 0;
    *(_QWORD *)&v34[12] = _D0;
    v34[20] = 0;
    if (cf)
    {
      CFRetain(cf);
      v6 = *((_QWORD *)this + 67);
    }
    v13 = *((_QWORD *)this + 68);
    if (v6 >= v13)
    {
      v18 = *((_QWORD *)this + 66);
      v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v18) >> 4);
      if (v19 + 1 > 0x555555555555555)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - v18) >> 4);
      v21 = 2 * v20;
      if (2 * v20 <= v19 + 1)
        v21 = v19 + 1;
      if (v20 >= 0x2AAAAAAAAAAAAAALL)
        v22 = 0x555555555555555;
      else
        v22 = v21;
      v38 = (char *)this + 544;
      if (v22)
      {
        v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MutationItinerary::Device>>(v22);
      }
      else
      {
        v24 = 0;
        v23 = 0;
      }
      v25 = &v24[48 * v19];
      v35[0] = v24;
      v35[1] = v25;
      v36 = v25;
      v37 = &v24[48 * v23];
      *(_DWORD *)v25 = v31;
      v26 = cfa;
      *((_QWORD *)v25 + 1) = cfa;
      v27 = v33;
      *((_WORD *)v25 + 8) = v33;
      if (v27 && v26)
      {
        CFRetain(v26);
        v25 = v36;
      }
      v28 = &v24[48 * v19];
      v29 = *(_OWORD *)v34;
      *(_QWORD *)(v28 + 37) = *(_QWORD *)&v34[13];
      *(_OWORD *)(v28 + 24) = v29;
      v36 = v25 + 48;
      std::vector<HALS_Device::ClientInfo>::__swap_out_circular_buffer((uint64_t *)this + 66, v35);
      v17 = *((_QWORD *)this + 67);
      std::__split_buffer<HALS_Device::ClientInfo>::~__split_buffer((uint64_t)v35);
    }
    else
    {
      *(_DWORD *)v6 = v31;
      v14 = cfa;
      *(_QWORD *)(v6 + 8) = cfa;
      v15 = v33;
      *(_WORD *)(v6 + 16) = v33;
      if (v15 && v14)
        CFRetain(v14);
      v16 = *(_OWORD *)v34;
      *(_QWORD *)(v6 + 37) = *(_QWORD *)&v34[13];
      *(_OWORD *)(v6 + 24) = v16;
      v17 = v6 + 48;
      *((_QWORD *)this + 67) = v6 + 48;
    }
    *((_QWORD *)this + 67) = v17;
    CACFDictionary::~CACFDictionary((CACFDictionary *)&cfa);
  }
  else
  {
    CACFDictionary::operator=((uint64_t)&v5[16 * ((v7 - v5) >> 4) + 8], cf);
  }
  return (*(uint64_t (**)(HALS_Device *, HALS_Client *))(*(_QWORD *)this + 744))(this, a2);
}

void sub_1B5C793C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  uint64_t v16;
  CACFDictionary *v17;
  uint64_t v18;

  *(_QWORD *)(v16 + 536) = v18;
  CACFDictionary::~CACFDictionary(v17);
  _Unwind_Resume(a1);
}

uint64_t HALS_Device::_FindHighestPriorityClientDescription(HALS_Device *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t result;
  unsigned int v6;

  v1 = *((_QWORD *)this + 67);
  v2 = *((_QWORD *)this + 66);
  if (v2 == v1)
    return *((_QWORD *)this + 67);
  do
  {
    v4 = *(_QWORD *)(v2 + 8);
    if (v4)
    {
      v6 = 0;
      CACFDictionary::GetUInt32(v4, CFSTR("kind"), &v6);
      if (v6)
        result = v2;
      else
        result = v1;
      v1 = *((_QWORD *)this + 67);
    }
    else
    {
      result = v1;
    }
    if (result != v1)
      break;
    v2 += 48;
  }
  while (v2 != v1);
  return result;
}

uint64_t HALS_Device::_GetCurrentClientKind(HALS_Device *this)
{
  uint64_t v2;
  uint64_t result;
  unsigned int v4;

  v4 = 0;
  v2 = (*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 728))(this);
  if (*((_QWORD *)this + 67) == v2)
    return 0;
  result = *(_QWORD *)(v2 + 8);
  if (result)
  {
    CACFDictionary::GetUInt32(result, CFSTR("kind"), &v4);
    return v4;
  }
  return result;
}

float HALS_Device::_GetClientVolumeScalar(HALS_Device *this, int a2, unsigned int a3)
{
  char *v3;
  char *v4;
  char *v5;

  v3 = (char *)*((_QWORD *)this + 66);
  v4 = (char *)*((_QWORD *)this + 67);
  v5 = v3;
  if (v3 != v4)
  {
    while (*(_DWORD *)v5 != a2)
    {
      v5 += 48;
      if (v5 == v4)
      {
        v5 = (char *)*((_QWORD *)this + 67);
        break;
      }
    }
  }
  if (v5 == v4)
    return 1.0;
  else
    return *(float *)&v3[16 * ((v5 - v3) >> 4) + 24 + 4 * a3];
}

uint64_t HALS_Device::_SetClientVolumeScalar(HALS_Device *this, int a2, unsigned int a3, float a4)
{
  char v4;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  float *v11;
  float v12;
  uint64_t *v13;
  float v14;
  float *v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v24;
  uint64_t v25;
  float v26;
  _QWORD v27[5];
  int v28;
  char v29;
  int v30;
  uint64_t v31;
  __int16 v32;
  float v33;
  float v34;
  char v35;
  uint64_t v36;
  char v37;

  v4 = a3;
  if (a4 < 0.0)
    a4 = 0.0;
  if (a4 > 1.0)
    a4 = 1.0;
  v7 = (char *)*((_QWORD *)this + 66);
  v8 = *((_QWORD *)this + 67);
  v9 = v7;
  if (v7 != (char *)v8)
  {
    while (*(_DWORD *)v9 != a2)
    {
      v9 += 48;
      if (v9 == (char *)v8)
      {
        v9 = (char *)*((_QWORD *)this + 67);
        break;
      }
    }
  }
  if (v9 == (char *)v8)
  {
    if (a4 != 1.0)
    {
      v13 = (uint64_t *)((char *)this + 528);
      v30 = a2;
      if (a3)
        v14 = a4;
      else
        v14 = 1.0;
      v31 = 0;
      if (a3)
        a4 = 1.0;
      v32 = 1;
      v33 = a4;
      v34 = v14;
      v35 = 0;
      __asm { FMOV            V0.2S, #1.0 }
      v36 = _D0;
      v37 = 0;
      v20 = (float *)std::vector<HALS_Device::ClientInfo>::insert(v13, v8, (uint64_t)&v30);
      CACFDictionary::~CACFDictionary((CACFDictionary *)&v31);
      if ((v4 & 1) == 0)
      {
        v24 = *((_QWORD *)this + 66);
        v25 = *((_QWORD *)this + 67);
        while (v24 != v25)
        {
          if (*(_BYTE *)(v24 + 32))
          {
            v26 = *(float *)(v24 + 36);
            if (v26 >= v20[10])
              v26 = v20[10];
            v20[10] = v26;
          }
          v24 += 48;
        }
      }
      goto LABEL_19;
    }
    return 0;
  }
  v10 = (uint64_t)&v7[16 * ((v9 - v7) >> 4) + 4 * a3];
  v12 = *(float *)(v10 + 24);
  v11 = (float *)(v10 + 24);
  if (v12 == a4)
    return 0;
  *v11 = a4;
LABEL_19:
  v21 = (*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 400))(this);
  if (v21)
  {
    v27[0] = MEMORY[0x1E0C809B0];
    v27[1] = 0x40000000;
    v27[2] = ___ZN11HALS_Device22_SetClientVolumeScalarEjbf_block_invoke;
    v27[3] = &__block_descriptor_tmp_95;
    v27[4] = v21;
    v28 = a2;
    v29 = v4;
    v22 = atomic_load((unsigned __int8 *)this + 696);
    if ((v22 & 1) != 0)
      atomic_store(1u, (unsigned __int8 *)this + 697);
    dispatch_async(*((dispatch_queue_t *)this + 83), v27);
  }
  return 1;
}

void sub_1B5C79724(_Unwind_Exception *a1)
{
  CACFDictionary *v1;

  CACFDictionary::~CACFDictionary(v1);
  _Unwind_Resume(a1);
}

uint64_t HALS_Device::_DuckClientVolumeScalar(HALS_Device *this, HALS_ObjectMap *a2, float a3, double a4, double a5)
{
  float v9;
  float v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  HALS_ObjectMap *v17;
  int v18;
  uint64_t v19;
  HALS_ObjectMap *v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  char *v25;
  HALS_Object *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  HALS_Object *v35;
  uint64_t v36;
  int v37;
  char *v38;
  HALS_Object *v39;
  int v41;
  _BYTE v42[14];
  __int16 v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE v47[6];
  __int16 v48;
  double v49;
  __int16 v50;
  double v51;
  __int16 v52;
  double v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v9 = 0.0;
  if (a3 >= 0.0)
    v9 = a3;
  if (v9 <= 1.0)
    v10 = v9;
  else
    v10 = 1.0;
  v11 = (char *)*((_QWORD *)this + 66);
  v12 = (char *)*((_QWORD *)this + 67);
  v13 = v11;
  if (v11 != v12)
  {
    while (*(_DWORD *)v13 != (_DWORD)a2)
    {
      v13 += 48;
      if (v13 == v12)
      {
        v13 = (char *)*((_QWORD *)this + 67);
        break;
      }
    }
  }
  if (v13 == v12)
  {
    if (a3 != 1.0)
    {
      HALS_Device::AppendDuckHistory(this, (int)a2, v10, 0);
      v19 = HALS_ObjectMap::CopyObjectByObjectID(a2);
      v20 = (HALS_ObjectMap *)v19;
      if (v19)
        v21 = *(_DWORD *)(v19 + 232);
      else
        v21 = -1;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        v27 = (*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 216))(this);
        v28 = *((_DWORD *)this + 4);
        v41 = 136317186;
        *(_QWORD *)v42 = "HALS_Device.cpp";
        *(_WORD *)&v42[8] = 1024;
        *(_DWORD *)&v42[10] = 2051;
        v43 = 1024;
        v44 = (int)a2;
        LOWORD(v45) = 1024;
        *(_DWORD *)((char *)&v45 + 2) = v21;
        HIWORD(v45) = 2080;
        v46 = v27;
        *(_WORD *)v47 = 1024;
        *(_DWORD *)&v47[2] = v28;
        v48 = 2048;
        v49 = v10;
        v50 = 2048;
        v51 = a4;
        v52 = 2048;
        v53 = a5;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_Device::_DuckClientVolumeScalar: client %u (pid %d) ducking device %s (%u) to %f over (%f, %0.f)", (uint8_t *)&v41, 0x4Cu);
      }
      HALS_Device::DumpDuckHistory(this, 0, 0, 0);
      v29 = *((_QWORD *)this + 67);
      v41 = (int)a2;
      *(_QWORD *)&v42[4] = 0;
      *(_WORD *)&v42[12] = 1;
      __asm { FMOV            V0.2S, #1.0 }
      v45 = _D0;
      LOBYTE(v46) = 1;
      *((float *)&v46 + 1) = v10;
      *(_DWORD *)v47 = 1065353216;
      v47[4] = 0;
      std::vector<HALS_Device::ClientInfo>::insert((uint64_t *)this + 66, v29, (uint64_t)&v41);
      CACFDictionary::~CACFDictionary((CACFDictionary *)&v42[4]);
      HALS_ObjectMap::ReleaseObject(v20, v35);
    }
  }
  else
  {
    v14 = (v13 - v11) >> 4;
    v15 = 0xAAAAAAAAAAAAAAABLL * v14;
    HALS_Device::AppendDuckHistory(this, (int)a2, v10, v11[16 * v14 + 44]);
    v16 = HALS_ObjectMap::CopyObjectByObjectID(a2);
    v17 = (HALS_ObjectMap *)v16;
    if (v10 == 1.0)
    {
      if (v16)
        v22 = *(_DWORD *)(v16 + 232);
      else
        v22 = -1;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        v36 = (*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 216))(this);
        v37 = *((_DWORD *)this + 4);
        v41 = 136316930;
        *(_QWORD *)v42 = "HALS_Device.cpp";
        *(_WORD *)&v42[8] = 1024;
        *(_DWORD *)&v42[10] = 2033;
        v43 = 1024;
        v44 = (int)a2;
        LOWORD(v45) = 1024;
        *(_DWORD *)((char *)&v45 + 2) = v22;
        HIWORD(v45) = 2080;
        v46 = v36;
        *(_WORD *)v47 = 1024;
        *(_DWORD *)&v47[2] = v37;
        v48 = 2048;
        v49 = a4;
        v50 = 2048;
        v51 = a5;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_Device::_DuckClientVolumeScalar: client %u (pid %d) unducking device %s (%u) over (%f, %0.f)", (uint8_t *)&v41, 0x42u);
      }
      HALS_Device::DumpDuckHistory(this, 0, 0, 0);
      v38 = &v11[48 * v15];
      v38[32] = 0;
      *((_DWORD *)v38 + 9) = 1065353216;
      HALS_ObjectMap::ReleaseObject(v17, v39);
    }
    else
    {
      if (v16)
        v18 = *(_DWORD *)(v16 + 232);
      else
        v18 = -1;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        v23 = (*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 216))(this);
        v24 = *((_DWORD *)this + 4);
        v41 = 136317186;
        *(_QWORD *)v42 = "HALS_Device.cpp";
        *(_WORD *)&v42[8] = 1024;
        *(_DWORD *)&v42[10] = 2021;
        v43 = 1024;
        v44 = (int)a2;
        LOWORD(v45) = 1024;
        *(_DWORD *)((char *)&v45 + 2) = v18;
        HIWORD(v45) = 2080;
        v46 = v23;
        *(_WORD *)v47 = 1024;
        *(_DWORD *)&v47[2] = v24;
        v48 = 2048;
        v49 = v10;
        v50 = 2048;
        v51 = a4;
        v52 = 2048;
        v53 = a5;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_Device::_DuckClientVolumeScalar: client %u (pid %d) ducking device %s (%u) to %f over (%f, %0.f)", (uint8_t *)&v41, 0x4Cu);
      }
      HALS_Device::DumpDuckHistory(this, 0, 0, 0);
      v25 = &v11[48 * v15];
      v25[32] = 1;
      *((float *)v25 + 9) = v10;
      HALS_ObjectMap::ReleaseObject(v17, v26);
    }
  }
  return (*(uint64_t (**)(HALS_Device *, double, double))(*(_QWORD *)this + 792))(this, a4, a5);
}

void sub_1B5C79BB8(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap *v2;

  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t HALS_Device::_DuckClientOptOut(HALS_Device *this, HALS_ObjectMap *a2, int a3)
{
  char *v6;
  char *v7;
  char *v8;
  unint64_t v9;
  float *v10;
  _DWORD *v11;
  float v12;
  uint64_t v13;
  HALS_ObjectMap *v14;
  int v15;
  uint64_t v16;
  HALS_ObjectMap *v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  HALS_Object *v29;
  uint64_t v30;
  int v31;
  HALS_Object *v32;
  uint64_t v33;
  int v34;
  HALS_Object *v35;
  double v36;
  int v38;
  _BYTE v39[14];
  __int16 v40;
  int v41;
  uint64_t v42;
  _BYTE v43[18];
  __int16 v44;
  int v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v6 = (char *)*((_QWORD *)this + 66);
  v7 = (char *)*((_QWORD *)this + 67);
  v8 = v6;
  if (v6 != v7)
  {
    while (*(_DWORD *)v8 != (_DWORD)a2)
    {
      v8 += 48;
      if (v8 == v7)
      {
        v8 = (char *)*((_QWORD *)this + 67);
        break;
      }
    }
  }
  if (v8 == v7)
  {
    HALS_Device::AppendDuckHistory(this, (int)a2, -1.0, a3);
    v16 = HALS_ObjectMap::CopyObjectByObjectID(a2);
    v17 = (HALS_ObjectMap *)v16;
    if (v16)
      v18 = *(_DWORD *)(v16 + 232);
    else
      v18 = -1;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      v20 = (*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 216))(this);
      v21 = *((_DWORD *)this + 4);
      v22 = "in for";
      v38 = 136316674;
      *(_QWORD *)v39 = "HALS_Device.cpp";
      *(_WORD *)&v39[8] = 1024;
      if (a3)
        v22 = "out for";
      *(_DWORD *)&v39[10] = 2104;
      v40 = 1024;
      v41 = (int)a2;
      LOWORD(v42) = 1024;
      *(_DWORD *)((char *)&v42 + 2) = v18;
      HIWORD(v42) = 2080;
      *(_QWORD *)v43 = v22;
      *(_WORD *)&v43[8] = 2080;
      *(_QWORD *)&v43[10] = v20;
      v44 = 1024;
      v45 = v21;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_Device::_DuckClientOptOut: client %u (pid %d) is opting %s ducking on device %s (%u) ", (uint8_t *)&v38, 0x38u);
    }
    v23 = *((_QWORD *)this + 67);
    v38 = (int)a2;
    *(_QWORD *)&v39[4] = 0;
    *(_WORD *)&v39[12] = 1;
    __asm { FMOV            V0.2S, #1.0 }
    v42 = _D0;
    v43[0] = 0;
    *(_QWORD *)&v43[4] = _D0;
    v43[12] = a3;
    std::vector<HALS_Device::ClientInfo>::insert((uint64_t *)this + 66, v23, (uint64_t)&v38);
    CACFDictionary::~CACFDictionary((CACFDictionary *)&v39[4]);
    HALS_ObjectMap::ReleaseObject(v17, v29);
  }
  else
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v6) >> 4);
    v10 = (float *)&v6[16 * ((v8 - v6) >> 4)];
    v12 = v10[9];
    v11 = v10 + 9;
    HALS_Device::AppendDuckHistory(this, (int)a2, v12, a3);
    v13 = HALS_ObjectMap::CopyObjectByObjectID(a2);
    v14 = (HALS_ObjectMap *)v13;
    if (a3)
    {
      if (v13)
        v15 = *(_DWORD *)(v13 + 232);
      else
        v15 = -1;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        v30 = (*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 216))(this);
        v31 = *((_DWORD *)this + 4);
        v38 = 136316674;
        *(_QWORD *)v39 = "HALS_Device.cpp";
        *(_WORD *)&v39[8] = 1024;
        *(_DWORD *)&v39[10] = 2075;
        v40 = 1024;
        v41 = (int)a2;
        LOWORD(v42) = 1024;
        *(_DWORD *)((char *)&v42 + 2) = v15;
        HIWORD(v42) = 2080;
        *(_QWORD *)v43 = "out for";
        *(_WORD *)&v43[8] = 2080;
        *(_QWORD *)&v43[10] = v30;
        v44 = 1024;
        v45 = v31;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_Device::_DuckClientOptOut: client %u (pid %d) is opting %s ducking on device %s (%u) ", (uint8_t *)&v38, 0x38u);
      }
      HALS_Device::DumpDuckHistory(this, 0, 0, 0);
      v6[48 * v9 + 44] = 1;
      HALS_ObjectMap::ReleaseObject(v14, v32);
    }
    else
    {
      if (v13)
        v19 = *(_DWORD *)(v13 + 232);
      else
        v19 = -1;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        v33 = (*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 216))(this);
        v34 = *((_DWORD *)this + 4);
        v38 = 136316674;
        *(_QWORD *)v39 = "HALS_Device.cpp";
        *(_WORD *)&v39[8] = 1024;
        *(_DWORD *)&v39[10] = 2086;
        v40 = 1024;
        v41 = (int)a2;
        LOWORD(v42) = 1024;
        *(_DWORD *)((char *)&v42 + 2) = v19;
        HIWORD(v42) = 2080;
        *(_QWORD *)v43 = "in for";
        *(_WORD *)&v43[8] = 2080;
        *(_QWORD *)&v43[10] = v33;
        v44 = 1024;
        v45 = v34;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_Device::_DuckClientOptOut: client %u (pid %d) is opting %s ducking on device %s (%u) ", (uint8_t *)&v38, 0x38u);
      }
      HALS_Device::DumpDuckHistory(this, 0, 0, 0);
      v6[48 * v9 + 44] = 0;
      *v11 = 1065353216;
      HALS_ObjectMap::ReleaseObject(v14, v35);
    }
  }
  v36 = (*(double (**)(HALS_Device *))(*(_QWORD *)this + 264))(this);
  return (*(uint64_t (**)(HALS_Device *, double, double))(*(_QWORD *)this + 792))(this, 0.0, v36 * 0.0500000007);
}

void sub_1B5C7A064(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap *v2;

  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

BOOL HALS_Device::_IsClientOptedOutForDucking(HALS_Device *this, int a2)
{
  char *v2;
  char *v3;
  char *v4;

  v2 = (char *)*((_QWORD *)this + 66);
  v3 = (char *)*((_QWORD *)this + 67);
  v4 = v2;
  if (v2 != v3)
  {
    while (*(_DWORD *)v4 != a2)
    {
      v4 += 48;
      if (v4 == v3)
      {
        v4 = (char *)*((_QWORD *)this + 67);
        break;
      }
    }
  }
  return v4 != v3 && v2[16 * ((v4 - v2) >> 4) + 44] != 0;
}

void HALS_Device::_UpdateClientVolumeScalarDucking(HALS_Device *this, double a2, double a3)
{
  float *v6;
  unsigned int *v7;
  float v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  HALS_ObjectMap *v12;
  int v13;
  uint64_t v14;
  int v15;
  HALS_Object *v16;
  float v17;
  uint64_t v18;
  int v19;
  double v20;
  uint64_t v21;
  int v22;
  float v23;
  uint64_t v24;
  int v25;
  double v26;
  float v27;
  uint64_t v28;
  int v29;
  double v30;
  uint64_t v31;
  unsigned __int8 v32;
  _QWORD block[7];
  uint8_t buf[4];
  const char *v35;
  __int16 v36;
  int v37;
  __int16 v38;
  float v39;
  __int16 v40;
  int v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  int v45;
  __int16 v46;
  double v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v6 = (float *)*((_QWORD *)this + 66);
  v7 = (unsigned int *)*((_QWORD *)this + 67);
  if (v6 != (float *)v7)
  {
    v8 = 1.0;
    v9 = *((_QWORD *)this + 66);
    do
    {
      if (*(unsigned __int8 *)(v9 + 32) | *(unsigned __int8 *)(v9 + 44) && *(float *)(v9 + 36) < v8)
        v8 = *(float *)(v9 + 36);
      v9 += 48;
    }
    while ((unsigned int *)v9 != v7);
    v10 = MEMORY[0x1E0C81028];
    do
    {
      if (*((_BYTE *)v6 + 32))
      {
        v6[10] = 1.0;
        v11 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)v6);
        v12 = (HALS_ObjectMap *)v11;
        if (v11)
          v13 = *(_DWORD *)(v11 + 232);
        else
          v13 = -1;
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          v17 = *v6;
          v18 = (*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 216))(this);
          v19 = *((_DWORD *)this + 4);
          v20 = v6[10];
          *(_DWORD *)buf = 136316674;
          v35 = "HALS_Device.cpp";
          v36 = 1024;
          v37 = 2149;
          v38 = 1024;
          v39 = v17;
          v40 = 1024;
          v41 = v13;
          v42 = 2080;
          v43 = v18;
          v44 = 1024;
          v45 = v19;
          v46 = 2048;
          v47 = v20;
          _os_log_impl(&dword_1B57BA000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_Device::_UpdateClientVolumeScalarDucking: client %u (pid %d) is a ducker so its ducked volume scalar on device %s (%u) is %f", buf, 0x38u);
        }
      }
      else if (*((_BYTE *)v6 + 44))
      {
        v6[10] = 1.0;
        v14 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)v6);
        v12 = (HALS_ObjectMap *)v14;
        if (v14)
          v15 = *(_DWORD *)(v14 + 232);
        else
          v15 = -1;
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          v23 = *v6;
          v24 = (*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 216))(this);
          v25 = *((_DWORD *)this + 4);
          v26 = v6[10];
          *(_DWORD *)buf = 136316674;
          v35 = "HALS_Device.cpp";
          v36 = 1024;
          v37 = 2158;
          v38 = 1024;
          v39 = v23;
          v40 = 1024;
          v41 = v15;
          v42 = 2080;
          v43 = v24;
          v44 = 1024;
          v45 = v25;
          v46 = 2048;
          v47 = v26;
          _os_log_impl(&dword_1B57BA000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_Device::_UpdateClientVolumeScalarDucking: client %u (pid %d) is opted out from ducking so its ducked volume scalar on device %s (%u) is %f", buf, 0x38u);
        }
      }
      else
      {
        v6[10] = v8;
        v21 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)v6);
        v12 = (HALS_ObjectMap *)v21;
        if (v21)
          v22 = *(_DWORD *)(v21 + 232);
        else
          v22 = -1;
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          v27 = *v6;
          v28 = (*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 216))(this);
          v29 = *((_DWORD *)this + 4);
          v30 = v6[10];
          *(_DWORD *)buf = 136316674;
          v35 = "HALS_Device.cpp";
          v36 = 1024;
          v37 = 2167;
          v38 = 1024;
          v39 = v27;
          v40 = 1024;
          v41 = v22;
          v42 = 2080;
          v43 = v28;
          v44 = 1024;
          v45 = v29;
          v46 = 2048;
          v47 = v30;
          _os_log_impl(&dword_1B57BA000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_Device::_UpdateClientVolumeScalarDucking: client %u (pid %d) is a duckee so its ducked volume scalar on device %s (%u) is %f", buf, 0x38u);
        }
      }
      HALS_ObjectMap::ReleaseObject(v12, v16);
      v6 += 12;
    }
    while (v6 != (float *)v7);
  }
  v31 = (*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 400))(this);
  if (v31)
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = ___ZN11HALS_Device32_UpdateClientVolumeScalarDuckingEdd_block_invoke;
    block[3] = &__block_descriptor_tmp_103_14143;
    block[4] = v31;
    *(double *)&block[5] = a2;
    *(double *)&block[6] = a3;
    v32 = atomic_load((unsigned __int8 *)this + 696);
    if ((v32 & 1) != 0)
      atomic_store(1u, (unsigned __int8 *)this + 697);
    dispatch_async(*((dispatch_queue_t *)this + 83), block);
  }
}

void sub_1B5C7A51C(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap *v2;

  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

void HALS_Device::_GetCombinedVolumeScalar(HALS_Device *this, HALS_ObjectMap *a2, unsigned int a3)
{
  uint64_t v3;
  _DWORD *v4;
  int v5;
  _DWORD *v6;
  float v7;
  uint64_t v8;
  HALS_ObjectMap *v9;
  int v10;
  HALS_Object *v11;
  const char *v12;
  int v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  __int16 v19;
  int v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  double v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)this + 66);
  v4 = (_DWORD *)*((_QWORD *)this + 67);
  if ((_DWORD *)v3 == v4)
    return;
  v5 = (int)a2;
  v6 = (_DWORD *)*((_QWORD *)this + 66);
  while (*v6 != (_DWORD)a2)
  {
    v6 += 12;
    if (v6 == v4)
    {
      v6 = (_DWORD *)*((_QWORD *)this + 67);
      break;
    }
  }
  if (v6 != v4)
  {
    v7 = *(float *)(v3 + 16 * (((uint64_t)v6 - v3) >> 4) + 4 * a3 + 24);
    if ((a3 & 1) == 0)
      v7 = v7 * *(float *)(v3 + 16 * (((uint64_t)v6 - v3) >> 4) + 40);
LABEL_16:
    v8 = HALS_ObjectMap::CopyObjectByObjectID(a2);
    v9 = (HALS_ObjectMap *)v8;
    if (v8)
      v10 = *(_DWORD *)(v8 + 232);
    else
      v10 = -1;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      v12 = "";
      v13 = 136316418;
      v14 = "HALS_Device.cpp";
      v15 = 1024;
      v16 = 2218;
      if (v6 == v4)
        v12 = " not";
      v17 = 1024;
      v18 = v5;
      v19 = 1024;
      v20 = v10;
      v21 = 2082;
      v22 = v12;
      v23 = 2048;
      v24 = v7;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_Device::_GetCombinedVolumeScalar: client %u (pid %d) is%{public}s present, and is ducked with a combined volume scalar of %f", (uint8_t *)&v13, 0x32u);
    }
    HALS_ObjectMap::ReleaseObject(v9, v11);
    return;
  }
  v7 = 1.0;
  do
  {
    if (*(unsigned __int8 *)(v3 + 32) | *(unsigned __int8 *)(v3 + 44) && *(float *)(v3 + 36) < v7)
      v7 = *(float *)(v3 + 36);
    v3 += 48;
  }
  while ((_DWORD *)v3 != v4);
  if (v7 != 1.0)
    goto LABEL_16;
}

void sub_1B5C7A768(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

CFTypeRef HALS_Device::_CopyClientClockDeviceDeviceUID(HALS_Device *this, unsigned int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  const char *v4;
  uint64_t v5;
  const char *v6;
  CFTypeRef v7;
  uint64_t v9;
  CFTypeRef cf;

  v2 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>((_QWORD *)this + 60, a2);
  if (!v2)
    return 0;
  v5 = v2[3];
  v3 = v2 + 3;
  v4 = (const char *)v5;
  if (*((char *)v3 + 23) >= 0)
    v6 = (const char *)v3;
  else
    v6 = v4;
  OS::CF::String::String((OS::CF::String *)&v9, v6);
  v7 = CFRetain(cf);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v9);
  return v7;
}

void sub_1B5C7A7D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a9);
  _Unwind_Resume(a1);
}

BOOL HALS_Device::_SetClientClockDeviceDeviceUID(HALS_Device *this, uint64_t a2, const __CFString *cf)
{
  unint64_t v3;
  const __CFString *v4;
  CFTypeID v7;
  const void *v8;
  CFComparisonResult v9;
  uint64_t *v10;
  unint64_t v11;
  uint8x8_t v12;
  void **v13;
  char *v14;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  void **v25;
  std::runtime_error *exception;
  __int128 v28;
  uint64_t v29;
  CFTypeRef cfa;
  const __CFString *v31;

  v4 = cf;
  if (cf && (CFRetain(cf), v7 = CFGetTypeID(v4), v7 != CFStringGetTypeID()))
  {
    v31 = 0;
    CFRelease(v4);
    v4 = 0;
  }
  else
  {
    v31 = v4;
  }
  v8 = (const void *)(*(uint64_t (**)(HALS_Device *, uint64_t))(*(_QWORD *)this + 808))(this, a2);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cfa, v8);
  v9 = applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>((const __CFString *)cfa, &v31);
  if (v9 == kCFCompareEqualTo)
    goto LABEL_49;
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::convert_to<std::string,0>((uint64_t)&v28, v4);
  v10 = (uint64_t *)((char *)this + 480);
  v11 = *((_QWORD *)this + 61);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v11 <= a2)
        v3 = a2 % v11;
    }
    else
    {
      v3 = ((_DWORD)v11 - 1) & a2;
    }
    v13 = *(void ***)(*v10 + 8 * v3);
    if (v13)
    {
      v14 = (char *)*v13;
      if (*v13)
      {
        do
        {
          v15 = *((_QWORD *)v14 + 1);
          if (v15 == a2)
          {
            if (*((_DWORD *)v14 + 4) == (_DWORD)a2)
              goto LABEL_46;
          }
          else
          {
            if (v12.u32[0] > 1uLL)
            {
              if (v15 >= v11)
                v15 %= v11;
            }
            else
            {
              v15 &= v11 - 1;
            }
            if (v15 != v3)
              break;
          }
          v14 = *(char **)v14;
        }
        while (v14);
      }
    }
  }
  v14 = (char *)operator new(0x30uLL);
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = a2;
  *((_DWORD *)v14 + 4) = a2;
  *((_QWORD *)v14 + 4) = 0;
  *((_QWORD *)v14 + 5) = 0;
  *((_QWORD *)v14 + 3) = 0;
  v16 = (float)(unint64_t)(*((_QWORD *)this + 63) + 1);
  v17 = *((float *)this + 128);
  if (!v11 || (float)(v17 * (float)v11) < v16)
  {
    v18 = 1;
    if (v11 >= 3)
      v18 = (v11 & (v11 - 1)) != 0;
    v19 = v18 | (2 * v11);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>((uint64_t)this + 480, v21);
    v11 = *((_QWORD *)this + 61);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v11 <= a2)
        v3 = a2 % v11;
      else
        v3 = a2;
    }
    else
    {
      v3 = ((_DWORD)v11 - 1) & a2;
    }
  }
  v22 = *v10;
  v23 = *(_QWORD **)(*v10 + 8 * v3);
  if (v23)
  {
    *(_QWORD *)v14 = *v23;
  }
  else
  {
    *(_QWORD *)v14 = *((_QWORD *)this + 62);
    *((_QWORD *)this + 62) = v14;
    *(_QWORD *)(v22 + 8 * v3) = (char *)this + 496;
    if (!*(_QWORD *)v14)
      goto LABEL_45;
    v24 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v24 >= v11)
        v24 %= v11;
    }
    else
    {
      v24 &= v11 - 1;
    }
    v23 = (_QWORD *)(*v10 + 8 * v24);
  }
  *v23 = v14;
LABEL_45:
  ++*((_QWORD *)this + 63);
LABEL_46:
  v25 = (void **)(v14 + 24);
  if (v14[47] < 0)
    operator delete(*v25);
  *(_OWORD *)v25 = v28;
  *((_QWORD *)v14 + 5) = v29;
LABEL_49:
  if (cfa)
    CFRelease(cfa);
  if (v4)
    CFRelease(v4);
  return v9 != kCFCompareEqualTo;
}

void sub_1B5C7AB00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, const void *a16, const void *a17)
{
  void **v17;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::string>,void *>>>::operator()[abi:ne180100](1, v17);
  if (a15 < 0)
    operator delete(__p);
  applesauce::CF::StringRef::~StringRef(&a16);
  applesauce::CF::StringRef::~StringRef(&a17);
  _Unwind_Resume(a1);
}

BOOL HALS_Device::_ClientDied(HALS_Device *this, HALS_Client *a2)
{
  char *v4;
  char *v5;
  char *v6;
  int v7;
  int v8;
  char *v9;
  char *v10;
  _DWORD *v11;
  int v12;
  char *v13;
  uint64_t v14;
  HALS_ObjectMap *v15;
  int v16;
  _BOOL8 v17;
  int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  int v22;
  double v23;
  HALS_Object *v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t *v27;
  std::__shared_weak_count *v28;
  NSObject *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  HALS_Object *v33;
  uint64_t v34;
  HALS_Object *v35;
  int8x8_t v36;
  unint64_t v37;
  uint8x8_t v38;
  uint64_t *v39;
  uint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _opaque_pthread_t *v46;
  mach_port_t v47;
  unsigned int v48;
  _BYTE v49[18];
  __int16 v50;
  int v51;
  __int16 v52;
  int v53;
  __int16 v54;
  uint64_t v55;
  __int16 v56;
  int v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v4 = (char *)*((_QWORD *)this + 66);
  v5 = (char *)*((_QWORD *)this + 67);
  if (v4 == v5)
  {
    v6 = (char *)*((_QWORD *)this + 66);
  }
  else
  {
    v6 = (char *)*((_QWORD *)this + 66);
    while (*(_DWORD *)v6 != *((_DWORD *)a2 + 4))
    {
      v6 += 48;
      if (v6 == v5)
      {
        v6 = (char *)*((_QWORD *)this + 67);
        break;
      }
    }
  }
  if (v6 == v5)
  {
    v17 = 0;
    if (a2)
    {
LABEL_24:
      v19 = *((_DWORD *)a2 + 4);
      v18 = 1;
      goto LABEL_25;
    }
  }
  else
  {
    v7 = (*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 736))(this);
    v8 = v4[16 * ((v6 - v4) >> 4) + 32];
    v9 = v6 + 48;
    v10 = (char *)*((_QWORD *)this + 67);
    if (v6 + 48 != v10)
    {
      do
      {
        v11 = v6;
        v12 = *((_DWORD *)v6 + 12);
        v6 += 48;
        *v11 = v12;
        CACFDictionary::operator=((uint64_t)(v11 + 2), (uint64_t)(v11 + 14));
        *(_OWORD *)(v11 + 6) = *(_OWORD *)(v11 + 18);
        *(_QWORD *)((char *)v11 + 37) = *(_QWORD *)((char *)v11 + 85);
      }
      while (v11 + 24 != (_DWORD *)v10);
      v9 = (char *)*((_QWORD *)this + 67);
    }
    if (v9 != v6)
    {
      do
      {
        v13 = v9 - 48;
        CACFDictionary::~CACFDictionary((CACFDictionary *)(v9 - 40));
        v9 = v13;
      }
      while (v13 != v6);
    }
    *((_QWORD *)this + 67) = v6;
    (*(void (**)(HALS_Device *, HALS_Client *))(*(_QWORD *)this + 744))(this, a2);
    if (v8)
    {
      v14 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)a2 + 4));
      v15 = (HALS_ObjectMap *)v14;
      if (v14)
        v16 = *(_DWORD *)(v14 + 232);
      else
        v16 = -1;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        v20 = *((_DWORD *)a2 + 4);
        v21 = (*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 216))(this);
        v22 = *((_DWORD *)this + 4);
        *(_DWORD *)v49 = 136316418;
        *(_QWORD *)&v49[4] = "HALS_Device.cpp";
        *(_WORD *)&v49[12] = 1024;
        *(_DWORD *)&v49[14] = 2246;
        v50 = 1024;
        v51 = v20;
        v52 = 1024;
        v53 = v16;
        v54 = 2080;
        v55 = v21;
        v56 = 1024;
        v57 = v22;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_Device::_ClientDied: client %u (pid %d) unducking on device %s (%u)", v49, 0x2Eu);
      }
      HALS_Device::DumpDuckHistory(this, 0, 0, 0);
      v23 = (*(double (**)(HALS_Device *))(*(_QWORD *)this + 264))(this);
      (*(void (**)(HALS_Device *, double, double))(*(_QWORD *)this + 792))(this, 0.0, v23 * 0.0500000007);
      HALS_ObjectMap::ReleaseObject(v15, v24);
    }
    v17 = v7 != (*(unsigned int (**)(HALS_Device *))(*(_QWORD *)this + 736))(this);
    if (a2)
      goto LABEL_24;
  }
  v18 = *((unsigned __int8 *)this + 616);
  if (!*((_BYTE *)this + 616))
    return v17;
  v19 = 0;
LABEL_25:
  v25 = (_QWORD *)((char *)this + 624);
  v26 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>((_QWORD *)this + 78, v19);
  if (v26)
  {
    v27 = v26;
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v26);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v49, "com.apple.coreaudio", "AMCP");
    v28 = *(std::__shared_weak_count **)&v49[8];
    v29 = **(NSObject ***)v49;
    if (*(_QWORD *)&v49[8])
    {
      v30 = (unint64_t *)(*(_QWORD *)&v49[8] + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
    {
      v46 = pthread_self();
      v47 = pthread_mach_thread_np(v46);
      if (v18)
        v48 = v19;
      else
        v48 = 0;
      *(_DWORD *)v49 = 67109890;
      *(_DWORD *)&v49[4] = v47;
      *(_WORD *)&v49[8] = 2080;
      *(_QWORD *)&v49[10] = "HALS_Device.cpp";
      v50 = 1024;
      v51 = 5132;
      v52 = 1024;
      v53 = v48;
      _os_log_debug_impl(&dword_1B57BA000, v29, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d [hal_dsp] Removing Hosted DSP streams for Client ID: %d", v49, 0x1Eu);
    }
    v32 = v27[6];
    if (v32)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
      HALS_ObjectMap::ObjectIsDead((HALS_ObjectMap *)v27[6], v33);
      v27[6] = 0;
    }
    v34 = v27[11];
    if (v34)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
      HALS_ObjectMap::ObjectIsDead((HALS_ObjectMap *)v27[11], v35);
      v27[11] = 0;
    }
    v36 = *(int8x8_t *)((char *)this + 632);
    v37 = v27[1];
    v38 = (uint8x8_t)vcnt_s8(v36);
    v38.i16[0] = vaddlv_u8(v38);
    if (v38.u32[0] > 1uLL)
    {
      if (v37 >= *(_QWORD *)&v36)
        v37 %= *(_QWORD *)&v36;
    }
    else
    {
      v37 &= *(_QWORD *)&v36 - 1;
    }
    v39 = *(uint64_t **)(*v25 + 8 * v37);
    do
    {
      v40 = v39;
      v39 = (uint64_t *)*v39;
    }
    while (v39 != v27);
    if (v40 == (uint64_t *)((char *)this + 640))
      goto LABEL_53;
    v41 = v40[1];
    if (v38.u32[0] > 1uLL)
    {
      if (v41 >= *(_QWORD *)&v36)
        v41 %= *(_QWORD *)&v36;
    }
    else
    {
      v41 &= *(_QWORD *)&v36 - 1;
    }
    if (v41 != v37)
    {
LABEL_53:
      if (!*v27)
        goto LABEL_54;
      v42 = *(_QWORD *)(*v27 + 8);
      if (v38.u32[0] > 1uLL)
      {
        if (v42 >= *(_QWORD *)&v36)
          v42 %= *(_QWORD *)&v36;
      }
      else
      {
        v42 &= *(_QWORD *)&v36 - 1;
      }
      if (v42 != v37)
LABEL_54:
        *(_QWORD *)(*v25 + 8 * v37) = 0;
    }
    v43 = *v27;
    if (*v27)
    {
      v44 = *(_QWORD *)(v43 + 8);
      if (v38.u32[0] > 1uLL)
      {
        if (v44 >= *(_QWORD *)&v36)
          v44 %= *(_QWORD *)&v36;
      }
      else
      {
        v44 &= *(_QWORD *)&v36 - 1;
      }
      if (v44 != v37)
      {
        *(_QWORD *)(*v25 + 8 * v44) = v40;
        v43 = *v27;
      }
    }
    *v40 = v43;
    *v27 = 0;
    --*((_QWORD *)this + 81);
    *(_QWORD *)v49 = v27;
    *(_QWORD *)&v49[8] = (char *)this + 640;
    v49[16] = 1;
    std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,HALS_Device::PerClientDSPInfo>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,HALS_Device::PerClientDSPInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)v49);
  }
  return v17;
}

void sub_1B5C7B09C(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap *v2;

  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

BOOL HALS_Device::HasInternalIOContext(HALS_Device *this)
{
  uint64_t *platform_behaviors;

  platform_behaviors = HALS_PlatformBehaviors::get_platform_behaviors(this);
  return (*(unsigned int (**)(uint64_t *))(*platform_behaviors + 16))(platform_behaviors) == 2;
}

uint64_t HALS_Device::Server_Internal_CreateIOProcID(HALS_Device *this, int (*a2)(unsigned int, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *), void *a3)
{
  HALS_ObjectMap *InternalIOContextID;
  uint64_t v7;
  HALS_ObjectMap *v8;
  uint64_t v9;
  uint8_t *v10;
  HALS_Object *v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *exception;
  NSObject *v17;
  const char *v18;
  _DWORD *v19;
  uint64_t v20;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  int v24;
  uint8_t *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (((*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 832))(this) & 1) == 0)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v22 = "HALS_Device.cpp";
      v23 = 1024;
      v24 = 2328;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::CreateIOProcID: no IO context", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 1970171760;
  }
  InternalIOContextID = (HALS_ObjectMap *)HALS_Device::GetInternalIOContextID(this);
  v7 = HALS_ObjectMap::CopyObjectByObjectID(InternalIOContextID);
  v8 = (HALS_ObjectMap *)v7;
  if (!v7)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_DWORD *)buf = 136315394;
    v22 = "HALS_Device.cpp";
    v23 = 1024;
    v24 = 2330;
    v17 = MEMORY[0x1E0C81028];
    v18 = "%25s:%-5d  HALS_Device::CreateIOProcID: couldn't find the IO context";
    goto LABEL_17;
  }
  if (!a2)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_DWORD *)buf = 136315394;
    v22 = "HALS_IOContext.cpp";
    v23 = 1024;
    v24 = 344;
    v17 = MEMORY[0x1E0C81028];
    v18 = "%25s:%-5d  HALS_IOContext::Server_Internal_CreateIOProcID: can't create an IOProcID without an IOProc";
LABEL_17:
    _os_log_impl(&dword_1B57BA000, v17, OS_LOG_TYPE_ERROR, v18, buf, 0x12u);
LABEL_18:
    v19 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v19 = &off_1E69A1B30;
    v19[2] = 1852797029;
  }
  v20 = 0;
  v9 = *(_QWORD *)(v7 + 96);
  v10 = (uint8_t *)operator new(0x28uLL);
  *(_QWORD *)v10 = &off_1E698B4A8;
  *((_QWORD *)v10 + 1) = v8;
  *((_QWORD *)v10 + 2) = &v20;
  *((_QWORD *)v10 + 3) = a2;
  *((_QWORD *)v10 + 4) = a3;
  v25 = v10;
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v9 + 328))(v9, buf);
  v12 = v25;
  if (v25 == buf)
  {
    v13 = 4;
    v12 = buf;
    goto LABEL_8;
  }
  if (v25)
  {
    v13 = 5;
LABEL_8:
    (*(void (**)(void))(*(_QWORD *)v12 + 8 * v13))();
  }
  v14 = v20;
  HALS_ObjectMap::ReleaseObject(v8, v11);
  return v14;
}

void sub_1B5C7B390(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t HALS_Device::Server_Internal_CreateIOProcIDWithBlock(HALS_Device *a1, uint64_t a2, uint64_t a3)
{
  HALS_ObjectMap *InternalIOContextID;
  uint64_t v7;
  HALS_ObjectMap *v8;
  uint64_t v9;
  uint8_t *v10;
  HALS_Object *v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *exception;
  NSObject *v17;
  const char *v18;
  _DWORD *v19;
  uint64_t v20;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  int v24;
  uint8_t *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (((*(uint64_t (**)(HALS_Device *))(*(_QWORD *)a1 + 832))(a1) & 1) == 0)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v22 = "HALS_Device.cpp";
      v23 = 1024;
      v24 = 2336;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::CreateIOProcIDWithBlock: no IO context", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 1970171760;
  }
  InternalIOContextID = (HALS_ObjectMap *)HALS_Device::GetInternalIOContextID(a1);
  v7 = HALS_ObjectMap::CopyObjectByObjectID(InternalIOContextID);
  v8 = (HALS_ObjectMap *)v7;
  if (!v7)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_DWORD *)buf = 136315394;
    v22 = "HALS_Device.cpp";
    v23 = 1024;
    v24 = 2338;
    v17 = MEMORY[0x1E0C81028];
    v18 = "%25s:%-5d  HALS_Device::CreateIOProcIDWithBlock: couldn't find the IO context";
    goto LABEL_17;
  }
  if (!a3)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_DWORD *)buf = 136315394;
    v22 = "HALS_IOContext.cpp";
    v23 = 1024;
    v24 = 385;
    v17 = MEMORY[0x1E0C81028];
    v18 = "%25s:%-5d  HALS_IOContext::Server_Internal_CreateIOProcIDWithBlock: can't create an IOProcID without an IOBlock";
LABEL_17:
    _os_log_impl(&dword_1B57BA000, v17, OS_LOG_TYPE_ERROR, v18, buf, 0x12u);
LABEL_18:
    v19 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v19 = &off_1E69A1B30;
    v19[2] = 1852797029;
  }
  v20 = 0;
  v9 = *(_QWORD *)(v7 + 96);
  v10 = (uint8_t *)operator new(0x28uLL);
  *(_QWORD *)v10 = &off_1E698B528;
  *((_QWORD *)v10 + 1) = v8;
  *((_QWORD *)v10 + 2) = &v20;
  *((_QWORD *)v10 + 3) = a2;
  *((_QWORD *)v10 + 4) = a3;
  v25 = v10;
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v9 + 328))(v9, buf);
  v12 = v25;
  if (v25 == buf)
  {
    v13 = 4;
    v12 = buf;
    goto LABEL_8;
  }
  if (v25)
  {
    v13 = 5;
LABEL_8:
    (*(void (**)(void))(*(_QWORD *)v12 + 8 * v13))();
  }
  v14 = v20;
  HALS_ObjectMap::ReleaseObject(v8, v11);
  return v14;
}

void sub_1B5C7B690(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void HALS_Device::Server_Internal_DestroyIOProcID(HALS_Device *this, int (*a2)(unsigned int, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *))
{
  HALS_ObjectMap *InternalIOContextID;
  uint64_t v5;
  HALS_ObjectMap *v6;
  uint64_t v7;
  HALS_Object *v8;
  _QWORD *v9;
  uint64_t v10;
  _DWORD *exception;
  _DWORD *v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (((*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 832))(this) & 1) == 0)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v13 = 136315394;
      *(_QWORD *)&v13[4] = "HALS_Device.cpp";
      *(_WORD *)&v13[12] = 1024;
      *(_DWORD *)&v13[14] = 2344;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::DestroyIOProcID: no IO context", v13, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 1970171760;
  }
  InternalIOContextID = (HALS_ObjectMap *)HALS_Device::GetInternalIOContextID(this);
  v5 = HALS_ObjectMap::CopyObjectByObjectID(InternalIOContextID);
  v6 = (HALS_ObjectMap *)v5;
  if (!v5)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v13 = 136315394;
      *(_QWORD *)&v13[4] = "HALS_Device.cpp";
      *(_WORD *)&v13[12] = 1024;
      *(_DWORD *)&v13[14] = 2346;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::DestroyIOProcID: couldn't find the IO context", v13, 0x12u);
    }
    v12 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v12 = &off_1E69A1B30;
    v12[2] = 1852797029;
  }
  v7 = *(_QWORD *)(v5 + 96);
  *(_QWORD *)v13 = &off_1E698B5A8;
  *(_QWORD *)&v13[8] = v6;
  *(_QWORD *)&v13[16] = a2;
  v14 = v13;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v7 + 328))(v7, v13);
  v9 = v14;
  if (v14 == v13)
  {
    v10 = 4;
    v9 = v13;
    goto LABEL_7;
  }
  if (v14)
  {
    v10 = 5;
LABEL_7:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  HALS_ObjectMap::ReleaseObject(v6, v8);
}

void sub_1B5C7B90C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void HALS_Device::Server_Internal_AddIOProc(HALS_Device *this, int (*a2)(unsigned int, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *), void *a3)
{
  HALS_ObjectMap *InternalIOContextID;
  uint64_t v7;
  HALS_ObjectMap *v8;
  uint64_t v9;
  int *v10;
  HALS_Object *v11;
  int *v12;
  uint64_t v13;
  _DWORD *exception;
  NSObject *v15;
  const char *v16;
  _DWORD *v17;
  int v18;
  const char *v19;
  __int16 v20;
  int v21;
  int *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (((*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 832))(this) & 1) == 0)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v18 = 136315394;
      v19 = "HALS_Device.cpp";
      v20 = 1024;
      v21 = 2352;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::AddIOProc: no IO context", (uint8_t *)&v18, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 1970171760;
  }
  InternalIOContextID = (HALS_ObjectMap *)HALS_Device::GetInternalIOContextID(this);
  v7 = HALS_ObjectMap::CopyObjectByObjectID(InternalIOContextID);
  v8 = (HALS_ObjectMap *)v7;
  if (!v7)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    v18 = 136315394;
    v19 = "HALS_Device.cpp";
    v20 = 1024;
    v21 = 2354;
    v15 = MEMORY[0x1E0C81028];
    v16 = "%25s:%-5d  HALS_Device::AddIOProc: couldn't find the IO context";
    goto LABEL_17;
  }
  if (!a2)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    v18 = 136315394;
    v19 = "HALS_IOContext.cpp";
    v20 = 1024;
    v21 = 454;
    v15 = MEMORY[0x1E0C81028];
    v16 = "%25s:%-5d  HALS_IOContext::Server_Internal_AddIOProc: can't add an IOProc without an IOProc";
LABEL_17:
    _os_log_impl(&dword_1B57BA000, v15, OS_LOG_TYPE_ERROR, v16, (uint8_t *)&v18, 0x12u);
LABEL_18:
    v17 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v17 = &off_1E69A1B30;
    v17[2] = 1852797029;
  }
  v9 = *(_QWORD *)(v7 + 96);
  v10 = (int *)operator new(0x20uLL);
  *(_QWORD *)v10 = &off_1E698B628;
  *((_QWORD *)v10 + 1) = v8;
  *((_QWORD *)v10 + 2) = a2;
  *((_QWORD *)v10 + 3) = a3;
  v22 = v10;
  (*(void (**)(uint64_t, int *))(*(_QWORD *)v9 + 328))(v9, &v18);
  v12 = v22;
  if (v22 == &v18)
  {
    v13 = 4;
    v12 = &v18;
    goto LABEL_8;
  }
  if (v22)
  {
    v13 = 5;
LABEL_8:
    (*(void (**)(void))(*(_QWORD *)v12 + 8 * v13))();
  }
  HALS_ObjectMap::ReleaseObject(v8, v11);
}

void sub_1B5C7BBF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void HALS_Device::Server_Internal_RemoveIOProc(HALS_Device *this, int (*a2)(unsigned int, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *))
{
  HALS_ObjectMap *InternalIOContextID;
  uint64_t v5;
  HALS_ObjectMap *v6;
  uint64_t v7;
  HALS_Object *v8;
  _QWORD *v9;
  uint64_t v10;
  _DWORD *exception;
  _DWORD *v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (((*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 832))(this) & 1) == 0)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v13 = 136315394;
      *(_QWORD *)&v13[4] = "HALS_Device.cpp";
      *(_WORD *)&v13[12] = 1024;
      *(_DWORD *)&v13[14] = 2360;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::RemoveIOProc: no IO context", v13, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 1970171760;
  }
  InternalIOContextID = (HALS_ObjectMap *)HALS_Device::GetInternalIOContextID(this);
  v5 = HALS_ObjectMap::CopyObjectByObjectID(InternalIOContextID);
  v6 = (HALS_ObjectMap *)v5;
  if (!v5)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v13 = 136315394;
      *(_QWORD *)&v13[4] = "HALS_Device.cpp";
      *(_WORD *)&v13[12] = 1024;
      *(_DWORD *)&v13[14] = 2362;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::RemoveIOProc: couldn't find the IO context", v13, 0x12u);
    }
    v12 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v12 = &off_1E69A1B30;
    v12[2] = 1852797029;
  }
  v7 = *(_QWORD *)(v5 + 96);
  *(_QWORD *)v13 = &off_1E698B6A8;
  *(_QWORD *)&v13[8] = v6;
  *(_QWORD *)&v13[16] = a2;
  v14 = v13;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v7 + 328))(v7, v13);
  v9 = v14;
  if (v14 == v13)
  {
    v10 = 4;
    v9 = v13;
    goto LABEL_7;
  }
  if (v14)
  {
    v10 = 5;
LABEL_7:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  HALS_ObjectMap::ReleaseObject(v6, v8);
}

void sub_1B5C7BE70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void HALS_Device::Server_Internal_StartIOProcID(HALS_Device *this, int (*a2)(unsigned int, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *))
{
  HALS_ObjectMap *InternalIOContextID;
  UInt64 v5;
  HALS_ObjectMap *v6;
  HALS_Object *v7;
  _DWORD *exception;
  _DWORD *v9;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (((*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 832))(this) & 1) == 0)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v10 = 136315394;
      v11 = "HALS_Device.cpp";
      v12 = 1024;
      v13 = 2368;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::Server_Internal_StartIOProcID: no IO context", (uint8_t *)&v10, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 1970171760;
  }
  InternalIOContextID = (HALS_ObjectMap *)HALS_Device::GetInternalIOContextID(this);
  v5 = HALS_ObjectMap::CopyObjectByObjectID(InternalIOContextID);
  v6 = (HALS_ObjectMap *)v5;
  if (!v5)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v10 = 136315394;
      v11 = "HALS_Device.cpp";
      v12 = 1024;
      v13 = 2370;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::Server_Internal_StartIOProcID: couldn't find the IO context", (uint8_t *)&v10, 0x12u);
    }
    v9 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v9 = &off_1E69A1B30;
    v9[2] = 1852797029;
  }
  HALS_IOContext::Server_Internal_StartIOProcID(v5, a2, 0, 0);
  HALS_ObjectMap::ReleaseObject(v6, v7);
}

void sub_1B5C7C0A0(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void HALS_Device::Server_Internal_StartIOProcIDAtTime(HALS_Device *this, int (*a2)(unsigned int, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *), AudioTimeStamp *a3, uint64_t a4)
{
  HALS_ObjectMap *InternalIOContextID;
  UInt64 v9;
  HALS_ObjectMap *v10;
  HALS_Object *v11;
  _DWORD *exception;
  _DWORD *v13;
  int v14;
  const char *v15;
  __int16 v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (((*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 832))(this) & 1) == 0)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v14 = 136315394;
      v15 = "HALS_Device.cpp";
      v16 = 1024;
      v17 = 2376;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::Server_Internal_StartIOProcIDAtTime: no IO context", (uint8_t *)&v14, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 1970171760;
  }
  InternalIOContextID = (HALS_ObjectMap *)HALS_Device::GetInternalIOContextID(this);
  v9 = HALS_ObjectMap::CopyObjectByObjectID(InternalIOContextID);
  v10 = (HALS_ObjectMap *)v9;
  if (!v9)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v14 = 136315394;
      v15 = "HALS_Device.cpp";
      v16 = 1024;
      v17 = 2378;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::Server_Internal_StartIOProcIDAtTime: couldn't find the IO context", (uint8_t *)&v14, 0x12u);
    }
    v13 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v13 = &off_1E69A1B30;
    v13[2] = 1852797029;
  }
  HALS_IOContext::Server_Internal_StartIOProcID(v9, a2, a3, a4);
  HALS_ObjectMap::ReleaseObject(v10, v11);
}

void sub_1B5C7C2B0(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void HALS_Device::Server_Internal_StopIOProcID(HALS_Device *this, int (*a2)(unsigned int, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *))
{
  HALS_ObjectMap *InternalIOContextID;
  uint64_t v5;
  HALS_ObjectMap *v6;
  HALS_Object *v7;
  _DWORD *exception;
  _DWORD *v9;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (((*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 832))(this) & 1) == 0)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v10 = 136315394;
      v11 = "HALS_Device.cpp";
      v12 = 1024;
      v13 = 2384;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::Server_Internal_StopIOProcID: no IO context", (uint8_t *)&v10, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 1970171760;
  }
  InternalIOContextID = (HALS_ObjectMap *)HALS_Device::GetInternalIOContextID(this);
  v5 = HALS_ObjectMap::CopyObjectByObjectID(InternalIOContextID);
  v6 = (HALS_ObjectMap *)v5;
  if (!v5)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v10 = 136315394;
      v11 = "HALS_Device.cpp";
      v12 = 1024;
      v13 = 2386;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::Server_Internal_StopIOProcID: couldn't find the IO context", (uint8_t *)&v10, 0x12u);
    }
    v9 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v9 = &off_1E69A1B30;
    v9[2] = 1852797029;
  }
  (*(void (**)(_QWORD, int (*)(unsigned int, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *)))(**(_QWORD **)(v5 + 96) + 488))(*(_QWORD *)(v5 + 96), a2);
  HALS_ObjectMap::ReleaseObject(v6, v7);
}

void sub_1B5C7C4B0(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void HALS_Device::GetCurrentTime(HALS_Device *this, AudioTimeStamp *a2)
{
  HALS_ObjectMap *InternalIOContextID;
  uint64_t v5;
  HALS_ObjectMap *v6;
  HALS_Object *v7;
  _DWORD *exception;
  _DWORD *v9;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (((*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 832))(this) & 1) == 0)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v10 = 136315394;
      v11 = "HALS_Device.cpp";
      v12 = 1024;
      v13 = 2392;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::GetCurrentTime: no IO context", (uint8_t *)&v10, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 1970171760;
  }
  InternalIOContextID = (HALS_ObjectMap *)HALS_Device::GetInternalIOContextID(this);
  v5 = HALS_ObjectMap::CopyObjectByObjectID(InternalIOContextID);
  v6 = (HALS_ObjectMap *)v5;
  if (!v5)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v10 = 136315394;
      v11 = "HALS_Device.cpp";
      v12 = 1024;
      v13 = 2394;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::GetCurrentTime: couldn't find the IO context", (uint8_t *)&v10, 0x12u);
    }
    v9 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v9 = &off_1E69A1B30;
    v9[2] = 1852797029;
  }
  (*(void (**)(_QWORD, AudioTimeStamp *))(**(_QWORD **)(v5 + 96) + 456))(*(_QWORD *)(v5 + 96), a2);
  HALS_ObjectMap::ReleaseObject(v6, v7);
}

void sub_1B5C7C6B0(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void HALS_Device::TranslateTime(HALS_Device *this, const AudioTimeStamp *a2, AudioTimeStamp *a3)
{
  HALS_ObjectMap *InternalIOContextID;
  uint64_t v7;
  HALS_ObjectMap *v8;
  HALS_Object *v9;
  _DWORD *exception;
  _DWORD *v11;
  int v12;
  const char *v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (((*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 832))(this) & 1) == 0)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v12 = 136315394;
      v13 = "HALS_Device.cpp";
      v14 = 1024;
      v15 = 2400;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::TranslateTime: no IO context", (uint8_t *)&v12, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 1970171760;
  }
  InternalIOContextID = (HALS_ObjectMap *)HALS_Device::GetInternalIOContextID(this);
  v7 = HALS_ObjectMap::CopyObjectByObjectID(InternalIOContextID);
  v8 = (HALS_ObjectMap *)v7;
  if (!v7)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v12 = 136315394;
      v13 = "HALS_Device.cpp";
      v14 = 1024;
      v15 = 2402;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::TranslateTime: couldn't find the IO context", (uint8_t *)&v12, 0x12u);
    }
    v11 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v11 = &off_1E69A1B30;
    v11[2] = 1852797029;
  }
  (*(void (**)(_QWORD, const AudioTimeStamp *, AudioTimeStamp *))(**(_QWORD **)(v7 + 96) + 464))(*(_QWORD *)(v7 + 96), a2, a3);
  HALS_ObjectMap::ReleaseObject(v8, v9);
}

void sub_1B5C7C8C0(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void HALS_Device::GetNearestStartTime(HALS_Device *this, AudioTimeStamp *a2, uint64_t a3)
{
  HALS_ObjectMap *InternalIOContextID;
  uint64_t v7;
  HALS_ObjectMap *v8;
  HALS_Object *v9;
  _DWORD *exception;
  _DWORD *v11;
  int v12;
  const char *v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (((*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 832))(this) & 1) == 0)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v12 = 136315394;
      v13 = "HALS_Device.cpp";
      v14 = 1024;
      v15 = 2408;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::GetNearestStartTime: no IO context", (uint8_t *)&v12, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 1970171760;
  }
  InternalIOContextID = (HALS_ObjectMap *)HALS_Device::GetInternalIOContextID(this);
  v7 = HALS_ObjectMap::CopyObjectByObjectID(InternalIOContextID);
  v8 = (HALS_ObjectMap *)v7;
  if (!v7)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v12 = 136315394;
      v13 = "HALS_Device.cpp";
      v14 = 1024;
      v15 = 2410;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::GetNearestStartTime: couldn't find the IO context", (uint8_t *)&v12, 0x12u);
    }
    v11 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v11 = &off_1E69A1B30;
    v11[2] = 1852797029;
  }
  (*(void (**)(_QWORD, AudioTimeStamp *, uint64_t))(**(_QWORD **)(v7 + 96) + 472))(*(_QWORD *)(v7 + 96), a2, a3);
  HALS_ObjectMap::ReleaseObject(v8, v9);
}

void sub_1B5C7CAD0(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void HALS_Device::PerformNonDriverConfigChange(HALS_Device *this)
{
  std::__shared_weak_count *v1;
  NSObject *v2;
  unint64_t *v3;
  unint64_t v4;
  _opaque_pthread_t *v5;
  mach_port_t v6;
  NSObject **v7;
  _BYTE v8[10];
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  AMCP::Log::Scope_Registry::get(this);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v7, "com.apple.coreaudio", "AMCP");
  v1 = *(std::__shared_weak_count **)v8;
  v2 = *v7;
  if (*(_QWORD *)v8)
  {
    v3 = (unint64_t *)(*(_QWORD *)v8 + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    v5 = pthread_self();
    v6 = pthread_mach_thread_np(v5);
    LODWORD(v7) = 67109634;
    HIDWORD(v7) = v6;
    *(_WORD *)v8 = 2080;
    *(_QWORD *)&v8[2] = "HALS_Device.cpp";
    v9 = 1024;
    v10 = 5632;
    _os_log_error_impl(&dword_1B57BA000, v2, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d PerformNonDriverConfigChange() remains unimplemented for this type of device", (uint8_t *)&v7, 0x18u);
  }
}

uint64_t HALS_Device::GetInternalIOContextID(HALS_Device *this)
{
  HALB_Mutex *v2;
  uint64_t v3;
  _QWORD v5[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2000000000;
  v9 = 0;
  if ((*(unsigned int (**)(HALS_Device *))(*(_QWORD *)this + 832))(this))
  {
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 0x40000000;
    v5[2] = ___ZNK11HALS_Device22GetInternalIOContextIDEv_block_invoke;
    v5[3] = &unk_1E699DBA0;
    v5[4] = &v6;
    v5[5] = this;
    v2 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v5);
  }
  v3 = *((unsigned int *)v7 + 6);
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_1B5C7CCD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK11HALS_Device22GetInternalIOContextIDEv_block_invoke(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *(_DWORD *)(*(_QWORD *)(result + 40) + 600);
  return result;
}

void HALS_Device::DumpDuckHistory(HALS_Device *this, int a2, __sFILE *__stream, int a4)
{
  int v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  tm *v14;
  int v15;
  double v16;
  int v17;
  int v18;
  std::string *v19;
  __int128 v20;
  void **v21;
  std::string::size_type v22;
  uint64_t v23;
  std::string *v24;
  int v25;
  std::string v26;
  std::string v27;
  void *__p[2];
  int64_t v29;
  uint8_t buf[4];
  const char *v31;
  __int16 v32;
  int v33;
  __int16 v34;
  std::string *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  memset(&v26, 0, sizeof(v26));
  if (a2)
  {
    if (a4)
    {
      v8 = a4;
      do
      {
        fwrite("    ", 4uLL, 1uLL, __stream);
        --v8;
      }
      while (v8);
    }
    fwrite("Duck History:", 0xDuLL, 1uLL, __stream);
  }
  else
  {
    *((_BYTE *)&v26.__r_.__value_.__s + 23) = 10;
    LOWORD(v26.__r_.__value_.__r.__words[1]) = 8250;
    v26.__r_.__value_.__r.__words[0] = *(_QWORD *)"\tHistory: ";
  }
  v9 = *((_QWORD *)this + 70);
  if (*((_QWORD *)this + 71) != v9)
  {
    v10 = *((_QWORD *)this + 73);
    v11 = (_QWORD *)(v9 + 8 * (v10 >> 7));
    v12 = *v11 + 32 * (v10 & 0x7F);
    v13 = *(_QWORD *)(v9 + (((*((_QWORD *)this + 74) + v10) >> 4) & 0xFFFFFFFFFFFFFF8))
        + 32 * ((*((_QWORD *)this + 74) + v10) & 0x7F);
    if (v12 != v13)
    {
      v25 = a4 + 1;
      do
      {
        v14 = localtime((const time_t *)v12);
        strftime((char *)buf, 0x78uLL, "%x - %X", v14);
        if (a2)
        {
          v15 = *(_DWORD *)(v12 + 8);
          v16 = *(double *)(v12 + 16);
          v17 = v25;
          v18 = *(unsigned __int8 *)(v12 + 24);
          do
          {
            fwrite("    ", 4uLL, 1uLL, __stream);
            --v17;
          }
          while (v17);
          fprintf(__stream, "Time: %s\n", (const char *)buf);
          fprintf(__stream, "Client: %ul\n", v15);
          fprintf(__stream, "Volume Scalar: %lf\n", v16);
          fprintf(__stream, "Opted Out: %u\n", v18);
        }
        else
        {
          caulk::make_string((caulk *)"%s: %ul  %lf, %u", (uint64_t)&v27, buf, *(unsigned int *)(v12 + 8), *(_QWORD *)(v12 + 16), *(unsigned __int8 *)(v12 + 24));
          v19 = std::string::append(&v27, ", ", 2uLL);
          v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
          v29 = v19->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v20;
          v19->__r_.__value_.__l.__size_ = 0;
          v19->__r_.__value_.__r.__words[2] = 0;
          v19->__r_.__value_.__r.__words[0] = 0;
          if (v29 >= 0)
            v21 = __p;
          else
            v21 = (void **)__p[0];
          if (v29 >= 0)
            v22 = HIBYTE(v29);
          else
            v22 = (std::string::size_type)__p[1];
          std::string::append(&v26, (const std::string::value_type *)v21, v22);
          if (SHIBYTE(v29) < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v27.__r_.__value_.__l.__data_);
        }
        v12 += 32;
        if (v12 - *v11 == 4096)
        {
          v23 = v11[1];
          ++v11;
          v12 = v23;
        }
      }
      while (v12 != v13);
    }
  }
  if ((a2 & 1) == 0 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v24 = &v26;
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v24 = (std::string *)v26.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315650;
    v31 = "HALS_Device.cpp";
    v32 = 1024;
    v33 = 4937;
    v34 = 2080;
    v35 = v24;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  %s", buf, 0x1Cu);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
}

void sub_1B5C7D050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,HALS_Device::PerClientDSPInfo>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,HALS_Device::PerClientDSPInfo>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<unsigned int const,HALS_Device::PerClientDSPInfo>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<unsigned int const,HALS_Device::PerClientDSPInfo>,0>(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  if (*(_BYTE *)(a1 + 104))
  {
    v2 = *(void **)(a1 + 80);
    if (v2)
    {
      *(_QWORD *)(a1 + 88) = v2;
      operator delete(v2);
    }
  }
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*(_QWORD **)(a1 + 56));
  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v3)
    std::default_delete<DSP_Host_OffloadDictionary>::operator()[abi:ne180100](v3);
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*(_QWORD **)(a1 + 16));
}

void ___ZN11HALS_Device32_UpdateClientVolumeScalarDuckingEdd_block_invoke(uint64_t a1)
{
  HALS_Object *v2;

  (*(void (**)(_QWORD, double, double))(**(_QWORD **)(a1 + 32) + 280))(*(_QWORD *)(a1 + 32), *(double *)(a1 + 40), *(double *)(a1 + 48));
  HALS_ObjectMap::ReleaseObject(*(HALS_ObjectMap **)(a1 + 32), v2);
}

void sub_1B5C7D164(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5C7D154);
}

void HALS_Device::AppendDuckHistory(HALS_Device *this, int a2, double a3, char a4)
{
  char *v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  BOOL v15;
  unint64_t v16;
  char *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  int64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  void **v32;
  uint64_t v33;
  void *v34;
  void *v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  __int128 v41;
  void *v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  void *v57;
  unint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t *v62;
  void **v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  void *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  int64_t v79;
  void *v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  char *v87;
  _BYTE *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  char *v108;
  uint64_t v109;
  char *v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  void *v116;
  char v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  __int128 v124;
  time_t v125;

  v125 = 0;
  time(&v125);
  v8 = (char *)*((_QWORD *)this + 71);
  v9 = (void **)*((_QWORD *)this + 70);
  v10 = v8 - (char *)v9;
  if (v8 == (char *)v9)
    v11 = 0;
  else
    v11 = 16 * (v8 - (char *)v9) - 1;
  v12 = *((_QWORD *)this + 73);
  v13 = *((_QWORD *)this + 74) + v12;
  if (v11 == v13)
  {
    v14 = (_QWORD *)((char *)this + 552);
    v15 = v12 >= 0x80;
    v16 = v12 - 128;
    if (v15)
    {
      *((_QWORD *)this + 73) = v16;
      v19 = *v9;
      v17 = (char *)(v9 + 1);
      v18 = v19;
      *((_QWORD *)this + 70) = v17;
      if (*((char **)this + 72) == v8)
      {
        v20 = (uint64_t)&v17[-*v14];
        if ((unint64_t)v17 <= *v14)
        {
          if (v8 == (char *)*v14)
            v48 = 1;
          else
            v48 = (uint64_t)&v8[-*v14] >> 2;
          v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v48);
          v51 = &v49[8 * (v48 >> 2)];
          v52 = (uint64_t *)*((_QWORD *)this + 70);
          v8 = v51;
          v53 = *((_QWORD *)this + 71) - (_QWORD)v52;
          if (v53)
          {
            v8 = &v51[v53 & 0xFFFFFFFFFFFFFFF8];
            v54 = 8 * (v53 >> 3);
            v55 = &v49[8 * (v48 >> 2)];
            do
            {
              v56 = *v52++;
              *(_QWORD *)v55 = v56;
              v55 += 8;
              v54 -= 8;
            }
            while (v54);
          }
          v57 = (void *)*((_QWORD *)this + 69);
          *((_QWORD *)this + 69) = v49;
          *((_QWORD *)this + 70) = v51;
          *((_QWORD *)this + 71) = v8;
          *((_QWORD *)this + 72) = &v49[8 * v50];
          if (v57)
          {
            operator delete(v57);
            v8 = (char *)*((_QWORD *)this + 71);
          }
        }
        else
        {
          v21 = v20 >> 3;
          v22 = v20 >> 3 < -1;
          v23 = (v20 >> 3) + 2;
          if (v22)
            v24 = v23;
          else
            v24 = v21 + 1;
          v25 = -(v24 >> 1);
          v26 = v24 >> 1;
          v27 = &v17[-8 * v26];
          v28 = v8 - v17;
          if (v8 == v17)
          {
            v29 = v8;
          }
          else
          {
            memmove(&v17[-8 * v26], v17, v8 - v17);
            v29 = (char *)*((_QWORD *)this + 70);
          }
          v8 = &v27[v28];
          *((_QWORD *)this + 71) = &v27[v28];
          *((_QWORD *)this + 70) = &v29[8 * v25];
        }
      }
      *(_QWORD *)v8 = v18;
    }
    else
    {
      v117 = a4;
      v30 = v10 >> 3;
      v31 = (char *)*((_QWORD *)this + 72);
      v32 = (void **)*((_QWORD *)this + 69);
      v33 = v31 - (char *)v32;
      if (v10 >> 3 >= (unint64_t)((v31 - (char *)v32) >> 3))
      {
        if (v31 == (char *)v32)
          v36 = 1;
        else
          v36 = v33 >> 2;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v36);
        v39 = v38;
        v40 = &v37[8 * v30];
        *(_QWORD *)&v41 = v37;
        *((_QWORD *)&v41 + 1) = v40;
        v121 = v41;
        v42 = operator new(0x1000uLL);
        *(_QWORD *)&v43 = v40;
        *((_QWORD *)&v43 + 1) = &v37[8 * v39];
        if (v30 == v39)
        {
          v44 = 8 * v30;
          *(_QWORD *)&v45 = v121;
          if (v10 < 1)
          {
            v80 = v42;
            v81 = v44 >> 2;
            if (v8 == (char *)v9)
              v82 = 1;
            else
              v82 = v81;
            v83 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v82);
            v40 = &v83[8 * (v82 >> 2)];
            *(_QWORD *)&v45 = v83;
            *((_QWORD *)&v45 + 1) = v40;
            *(_QWORD *)&v43 = v40;
            *((_QWORD *)&v43 + 1) = &v83[8 * v84];
            if (v37)
            {
              v118 = v43;
              v122 = v45;
              operator delete(v37);
              v43 = v118;
              v45 = v122;
            }
            v42 = v80;
          }
          else
          {
            v46 = v44 >> 3;
            if (v46 >= -1)
              v47 = v46 + 1;
            else
              v47 = v46 + 2;
            v40 -= 8 * (v47 >> 1);
            *(_QWORD *)&v43 = v40;
            *((_QWORD *)&v45 + 1) = v40;
          }
        }
        else
        {
          v45 = v121;
        }
        *(_QWORD *)v40 = v42;
        *(_QWORD *)&v43 = v43 + 8;
        v85 = *((_QWORD *)this + 71);
        a4 = v117;
        while (v85 != *((_QWORD *)this + 70))
        {
          v86 = (_QWORD *)*((_QWORD *)&v45 + 1);
          if (*((_QWORD *)&v45 + 1) == (_QWORD)v45)
          {
            v88 = (_BYTE *)v43;
            if ((unint64_t)v43 >= *((_QWORD *)&v43 + 1))
            {
              if (*((_QWORD *)&v43 + 1) == *((_QWORD *)&v45 + 1))
                v93 = 1;
              else
                v93 = (uint64_t)(*((_QWORD *)&v43 + 1) - *((_QWORD *)&v45 + 1)) >> 2;
              v94 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v93);
              v87 = &v94[(2 * v93 + 6) & 0xFFFFFFFFFFFFFFF8];
              v96 = v87;
              v97 = v88 - (_BYTE *)v86;
              if (v88 != (_BYTE *)v86)
              {
                v96 = &v87[v97 & 0xFFFFFFFFFFFFFFF8];
                v98 = 8 * (v97 >> 3);
                v99 = v87;
                v100 = v86;
                do
                {
                  v101 = *v100++;
                  *(_QWORD *)v99 = v101;
                  v99 += 8;
                  v98 -= 8;
                }
                while (v98);
              }
              *(_QWORD *)&v45 = v94;
              *((_QWORD *)&v45 + 1) = v87;
              *(_QWORD *)&v43 = v96;
              *((_QWORD *)&v43 + 1) = &v94[8 * v95];
              if (v86)
              {
                v119 = v43;
                v124 = v45;
                operator delete(v86);
                v43 = v119;
                v45 = v124;
              }
            }
            else
            {
              v89 = (uint64_t)(*((_QWORD *)&v43 + 1) - v43) >> 3;
              if (v89 >= -1)
                v90 = v89 + 1;
              else
                v90 = v89 + 2;
              v91 = v90 >> 1;
              v92 = v43 + 8 * (v90 >> 1);
              v87 = (char *)(v92 - (v43 - *((_QWORD *)&v45 + 1)));
              if ((_QWORD)v43 == *((_QWORD *)&v45 + 1))
              {
                v88 = (_BYTE *)*((_QWORD *)&v45 + 1);
              }
              else
              {
                v120 = *((_QWORD *)&v43 + 1);
                v123 = v45;
                memmove((void *)(v92 - (v43 - *((_QWORD *)&v45 + 1))), *((const void **)&v45 + 1), v43 - *((_QWORD *)&v45 + 1));
                *((_QWORD *)&v43 + 1) = v120;
                *(_QWORD *)&v45 = v123;
              }
              *((_QWORD *)&v45 + 1) = v87;
              *(_QWORD *)&v43 = &v88[8 * v91];
            }
          }
          else
          {
            v87 = (char *)*((_QWORD *)&v45 + 1);
          }
          v102 = *(_QWORD *)(v85 - 8);
          v85 -= 8;
          *((_QWORD *)v87 - 1) = v102;
          *((_QWORD *)&v45 + 1) -= 8;
        }
        v103 = (char *)*v14;
        *(_OWORD *)v14 = v45;
        *(_OWORD *)((char *)this + 568) = v43;
        if (v103)
          operator delete(v103);
        goto LABEL_85;
      }
      v34 = operator new(0x1000uLL);
      v35 = v34;
      if (v31 != v8)
      {
        *(_QWORD *)v8 = v34;
        *((_QWORD *)this + 71) += 8;
        a4 = v117;
LABEL_85:
        v12 = *((_QWORD *)this + 73);
        v9 = (void **)*((_QWORD *)this + 70);
        v13 = *((_QWORD *)this + 74) + v12;
        goto LABEL_86;
      }
      if (v32 == v9)
      {
        if (v8 == (char *)v9)
          v58 = 1;
        else
          v58 = v33 >> 2;
        v59 = 2 * v58;
        v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v58);
        v9 = (void **)&v60[(v59 + 6) & 0xFFFFFFFFFFFFFFF8];
        v62 = (uint64_t *)*((_QWORD *)this + 70);
        v63 = v9;
        v64 = *((_QWORD *)this + 71) - (_QWORD)v62;
        if (v64)
        {
          v63 = (void **)((char *)v9 + (v64 & 0xFFFFFFFFFFFFFFF8));
          v65 = 8 * (v64 >> 3);
          v66 = &v60[(v59 + 6) & 0xFFFFFFFFFFFFFFF8];
          do
          {
            v67 = *v62++;
            *(_QWORD *)v66 = v67;
            v66 += 8;
            v65 -= 8;
          }
          while (v65);
        }
        v68 = (void *)*((_QWORD *)this + 69);
        *((_QWORD *)this + 69) = v60;
        *((_QWORD *)this + 70) = v9;
        *((_QWORD *)this + 71) = v63;
        *((_QWORD *)this + 72) = &v60[8 * v61];
        if (v68)
        {
          operator delete(v68);
          v9 = (void **)*((_QWORD *)this + 70);
        }
      }
      *(v9 - 1) = v35;
      v69 = (char *)*((_QWORD *)this + 70);
      *((_QWORD *)this + 70) = v69 - 8;
      v70 = *((_QWORD *)v69 - 1);
      *((_QWORD *)this + 70) = v69;
      v71 = (char *)*((_QWORD *)this + 71);
      a4 = v117;
      if (v71 == *((char **)this + 72))
      {
        v72 = (uint64_t)&v69[-*v14];
        if ((unint64_t)v69 <= *v14)
        {
          if (v71 == (char *)*v14)
            v107 = 1;
          else
            v107 = (uint64_t)&v71[-*v14] >> 2;
          v108 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v107);
          v110 = &v108[8 * (v107 >> 2)];
          v111 = (uint64_t *)*((_QWORD *)this + 70);
          v71 = v110;
          v112 = *((_QWORD *)this + 71) - (_QWORD)v111;
          if (v112)
          {
            v71 = &v110[v112 & 0xFFFFFFFFFFFFFFF8];
            v113 = 8 * (v112 >> 3);
            v114 = &v108[8 * (v107 >> 2)];
            do
            {
              v115 = *v111++;
              *(_QWORD *)v114 = v115;
              v114 += 8;
              v113 -= 8;
            }
            while (v113);
          }
          v116 = (void *)*((_QWORD *)this + 69);
          *((_QWORD *)this + 69) = v108;
          *((_QWORD *)this + 70) = v110;
          *((_QWORD *)this + 71) = v71;
          *((_QWORD *)this + 72) = &v108[8 * v109];
          if (v116)
          {
            operator delete(v116);
            v71 = (char *)*((_QWORD *)this + 71);
          }
        }
        else
        {
          v73 = v72 >> 3;
          v22 = v72 >> 3 < -1;
          v74 = (v72 >> 3) + 2;
          if (v22)
            v75 = v74;
          else
            v75 = v73 + 1;
          v76 = -(v75 >> 1);
          v77 = v75 >> 1;
          v78 = &v69[-8 * v77];
          v79 = v71 - v69;
          if (v71 != v69)
          {
            memmove(&v69[-8 * v77], v69, v71 - v69);
            v69 = (char *)*((_QWORD *)this + 70);
          }
          v71 = &v78[v79];
          *((_QWORD *)this + 71) = &v78[v79];
          *((_QWORD *)this + 70) = &v69[8 * v76];
        }
      }
      *(_QWORD *)v71 = v70;
    }
    *((_QWORD *)this + 71) += 8;
    goto LABEL_85;
  }
LABEL_86:
  v104 = *(uint64_t *)((char *)v9 + ((v13 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v13 & 0x7F);
  *(_QWORD *)v104 = v125;
  *(_DWORD *)(v104 + 8) = a2;
  *(double *)(v104 + 16) = a3;
  *(_BYTE *)(v104 + 24) = a4;
  v105 = *((_QWORD *)this + 74);
  *((_QWORD *)this + 74) = v105 + 1;
  if ((unint64_t)(v105 + 1) >= 0xB)
  {
    *((_QWORD *)this + 74) = v105;
    v106 = v12 + 1;
    *((_QWORD *)this + 73) = v106;
    if (v106 >= 0x100)
    {
      operator delete(*v9);
      *((_QWORD *)this + 70) += 8;
      *((_QWORD *)this + 73) -= 128;
    }
  }
}

void sub_1B5C7D78C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 a13)
{
  void *v13;

  operator delete(v13);
  if ((_QWORD)a13)
    operator delete((void *)a13);
  _Unwind_Resume(a1);
}

_DWORD *std::vector<HALS_Device::ClientInfo>::insert(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64x2_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v47;
  __int128 v48;
  char *v49;
  uint64_t *v50;
  char *v51;
  int64x2_t v52;
  char *v53;
  uint64_t *v54;

  v5 = *a1;
  v6 = a1[1];
  v7 = a2 - *a1;
  v8 = v7 / 48;
  v9 = (_DWORD *)(*a1 + 48 * (v7 / 48));
  v11 = a1 + 2;
  v10 = a1[2];
  if (v6 >= v10)
  {
    v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v5) >> 4) + 1;
    if (v15 > 0x555555555555555)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - v5) >> 4);
    if (2 * v17 > v15)
      v15 = 2 * v17;
    if (v17 >= 0x2AAAAAAAAAAAAAALL)
      v18 = 0x555555555555555;
    else
      v18 = v15;
    v50 = v11;
    if (v18)
    {
      v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MutationItinerary::Device>>(v18);
    }
    else
    {
      v20 = 0;
      v19 = 0;
    }
    v21 = (uint64_t)&v20[48 * v8];
    v47 = v20;
    *(_QWORD *)&v48 = v21;
    *((_QWORD *)&v48 + 1) = v21;
    v49 = &v20[48 * v19];
    if (v8 == v19)
    {
      if (v7 < 1)
      {
        if (v5 == a2)
          v29 = 1;
        else
          v29 = 2 * v8;
        v54 = v11;
        v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MutationItinerary::Device>>(v29);
        v31 = (uint64_t)&v30[48 * (v29 >> 2)];
        v51 = v30;
        v52.i64[0] = v31;
        v33 = &v30[48 * v32];
        v52.i64[1] = v31;
        v53 = v33;
        v34 = v48;
        if (*((_QWORD *)&v48 + 1) == (_QWORD)v48)
        {
          v37 = vdupq_n_s64(v48);
          v35 = v31;
        }
        else
        {
          v35 = v31 + 48 * ((*((_QWORD *)&v48 + 1) - (_QWORD)v48) / 48);
          v36 = 48 * ((*((_QWORD *)&v48 + 1) - (_QWORD)v48) / 48);
          do
          {
            std::construct_at[abi:ne180100]<HALS_Device::ClientInfo,HALS_Device::ClientInfo,HALS_Device::ClientInfo*>(v31, v34);
            v31 += 48;
            v34 += 48;
            v36 -= 48;
          }
          while (v36);
          v30 = v51;
          v31 = v52.i64[0];
          v37 = (int64x2_t)v48;
          v33 = v53;
        }
        v38 = v49;
        v51 = v47;
        v47 = v30;
        *(_QWORD *)&v48 = v31;
        v52 = v37;
        *((_QWORD *)&v48 + 1) = v35;
        v49 = v33;
        v53 = v38;
        std::__split_buffer<HALS_Device::ClientInfo>::~__split_buffer((uint64_t)&v51);
        v21 = v35;
      }
      else
      {
        v22 = v8 + 2;
        if (v8 >= -1)
          v22 = v8 + 1;
        v21 -= 48 * (v22 >> 1);
        *(_QWORD *)&v48 = v21;
        *((_QWORD *)&v48 + 1) = v21;
      }
    }
    std::construct_at[abi:ne180100]<HALS_Device::ClientInfo,HALS_Device::ClientInfo,HALS_Device::ClientInfo*>(v21, a3);
    v39 = v48;
    *((_QWORD *)&v48 + 1) += 48;
    v40 = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<HALS_Device::ClientInfo>,std::reverse_iterator<HALS_Device::ClientInfo*>,std::reverse_iterator<HALS_Device::ClientInfo*>,std::reverse_iterator<HALS_Device::ClientInfo*>>((uint64_t)v9, (uint64_t)v9, *a1, *a1, v48, v48);
    *(_QWORD *)&v48 = v40;
    v41 = (_DWORD *)a1[1];
    v42 = *((_QWORD *)&v48 + 1);
    if (v9 != v41)
    {
      v43 = 0;
      do
      {
        std::construct_at[abi:ne180100]<HALS_Device::ClientInfo,HALS_Device::ClientInfo,HALS_Device::ClientInfo*>(*((_QWORD *)&v48 + 1) + v43 * 4, (uint64_t)&v9[v43]);
        v43 += 12;
      }
      while (&v9[v43] != v41);
      v42 = *((_QWORD *)&v48 + 1) + v43 * 4;
      v40 = v48;
      v9 = (_DWORD *)a1[1];
    }
    v44 = *a1;
    *a1 = v40;
    a1[1] = v42;
    v45 = a1[2];
    a1[2] = (uint64_t)v49;
    *((_QWORD *)&v48 + 1) = v9;
    v49 = (char *)v45;
    v47 = (char *)v44;
    *(_QWORD *)&v48 = v44;
    std::__split_buffer<HALS_Device::ClientInfo>::~__split_buffer((uint64_t)&v47);
    return (_DWORD *)v39;
  }
  else if (v9 == (_DWORD *)v6)
  {
    std::construct_at[abi:ne180100]<HALS_Device::ClientInfo,HALS_Device::ClientInfo,HALS_Device::ClientInfo*>(*a1 + 48 * (v7 / 48), a3);
    a1[1] = (uint64_t)(v9 + 12);
  }
  else
  {
    v12 = v6 - 48;
    if (v6 < 0x30)
    {
      v14 = a1[1];
    }
    else
    {
      v13 = v6 - 48;
      v14 = a1[1];
      do
      {
        std::construct_at[abi:ne180100]<HALS_Device::ClientInfo,HALS_Device::ClientInfo,HALS_Device::ClientInfo*>(v14, v13);
        v13 += 48;
        v14 += 48;
      }
      while (v13 < v6);
    }
    a1[1] = v14;
    if ((_DWORD *)v6 != v9 + 12)
    {
      v23 = 0;
      v24 = v5 + 16 * ((uint64_t)(v6 - (_QWORD)(v9 + 12)) >> 4) + 48 * v8;
      do
      {
        v25 = v6 + v23;
        *(_DWORD *)(v6 + v23 - 48) = *(_DWORD *)(v12 + v23 - 48);
        CACFDictionary::operator=(v6 + v23 - 40, v12 + v23 - 40);
        v26 = *(_OWORD *)(v24 + v23 - 24);
        *(_QWORD *)(v25 - 11) = *(_QWORD *)(v24 + v23 - 11);
        *(_OWORD *)(v25 - 24) = v26;
        v23 -= 48;
      }
      while (-16 * ((uint64_t)(v6 - (_QWORD)(v9 + 12)) >> 4) != v23);
    }
    *v9 = *(_DWORD *)a3;
    v27 = v5 + 48 * v8;
    CACFDictionary::operator=(v27 + 8, a3 + 8);
    v28 = *(_OWORD *)(a3 + 24);
    *(_QWORD *)(v27 + 37) = *(_QWORD *)(a3 + 37);
    *(_OWORD *)(v27 + 24) = v28;
  }
  return v9;
}

void sub_1B5C7DB58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v17 + 8) = v16;
  _Unwind_Resume(exception_object);
}

uint64_t std::construct_at[abi:ne180100]<HALS_Device::ClientInfo,HALS_Device::ClientInfo,HALS_Device::ClientInfo*>(uint64_t a1, uint64_t a2)
{
  const void *v4;
  int v5;
  BOOL v6;
  __int128 v7;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(const void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(unsigned __int8 *)(a2 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  if (v5)
    v6 = v4 == 0;
  else
    v6 = 1;
  if (!v6)
    CFRetain(v4);
  v7 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 37) = *(_QWORD *)(a2 + 37);
  *(_OWORD *)(a1 + 24) = v7;
  return a1;
}

uint64_t std::__split_buffer<HALS_Device::ClientInfo>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 48;
    CACFDictionary::~CACFDictionary((CACFDictionary *)(i - 40));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<HALS_Device::ClientInfo>,std::reverse_iterator<HALS_Device::ClientInfo*>,std::reverse_iterator<HALS_Device::ClientInfo*>,std::reverse_iterator<HALS_Device::ClientInfo*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t i;

  for (i = 0;
        a2 + i != a4;
        std::construct_at[abi:ne180100]<HALS_Device::ClientInfo,HALS_Device::ClientInfo,HALS_Device::ClientInfo*>(a6 + i, i + a2))
  {
    i -= 48;
  }
  return a6 + i;
}

void ___ZN11HALS_Device22_SetClientVolumeScalarEjbf_block_invoke(uint64_t a1)
{
  HALS_Object *v2;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 32) + 272))(*(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 40), *(unsigned __int8 *)(a1 + 44));
  HALS_ObjectMap::ReleaseObject(*(HALS_ObjectMap **)(a1 + 32), v2);
}

void sub_1B5C7DD34(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5C7DD24);
}

uint64_t std::vector<HALS_Device::ClientInfo>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<HALS_Device::ClientInfo>,std::reverse_iterator<HALS_Device::ClientInfo*>,std::reverse_iterator<HALS_Device::ClientInfo*>,std::reverse_iterator<HALS_Device::ClientInfo*>>(a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = result;
  v5 = *a1;
  *a1 = result;
  a2[1] = v5;
  v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
  return result;
}

void ___ZNK11HALS_Device21IsInputMutedForClientEP11HALS_Client_block_invoke(uint64_t a1)
{
  *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = (*(float (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 752))(*(_QWORD *)(a1 + 40), *(unsigned int *)(*(_QWORD *)(a1 + 48) + 16), 1);
}

void sub_1B5C7DDF8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t __Block_byref_object_copy__97(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__98(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 40);
  if (v1)
    CFRelease(v1);
}

void ___ZNK11HALS_Device31GetClockDeviceNominalSampleRateEP11HALS_Client_block_invoke(_QWORD *a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t *v4;
  const UInt8 *v5;
  uint64_t v6;
  int v7;
  const UInt8 *v8;
  CFIndex v9;
  CFStringRef v10;
  uint64_t v11;
  const void *v12;
  std::runtime_error *exception;

  v1 = a1[6];
  if (v1)
  {
    v3 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>((_QWORD *)(a1[5] + 480), *(_DWORD *)(v1 + 16));
    if (v3)
    {
      v6 = v3[3];
      v4 = v3 + 3;
      v5 = (const UInt8 *)v6;
      v7 = *((char *)v4 + 23);
      if (v7 >= 0)
        v8 = (const UInt8 *)v4;
      else
        v8 = v5;
      if (v7 >= 0)
        v9 = *((unsigned __int8 *)v4 + 23);
      else
        v9 = v4[1];
      v10 = CFStringCreateWithBytes(0, v8, v9, 0x8000100u, 0);
      if (!v10)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v11 = *(_QWORD *)(a1[4] + 8);
      v12 = *(const void **)(v11 + 40);
      *(_QWORD *)(v11 + 40) = v10;
      if (v12)
        CFRelease(v12);
    }
  }
}

void sub_1B5C7DEF4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK11HALS_Device31IsClockDeviceUIDSetForAnyClientEN10applesauce2CF9StringRefE_block_invoke(uint64_t a1)
{
  uint64_t **v1;
  const __CFString **v3;
  int v4;
  const UInt8 *v5;
  CFIndex v6;
  const __CFString *v7;
  const __CFString *v8;
  std::runtime_error *exception;

  v1 = *(uint64_t ***)(*(_QWORD *)(a1 + 40) + 496);
  if (v1)
  {
    v3 = (const __CFString **)(a1 + 48);
    while (1)
    {
      v4 = *((char *)v1 + 47);
      v5 = v4 >= 0 ? (const UInt8 *)(v1 + 3) : (const UInt8 *)v1[3];
      v6 = v4 >= 0 ? *((unsigned __int8 *)v1 + 47) : (CFIndex)v1[4];
      v7 = CFStringCreateWithBytes(0, v5, v6, 0x8000100u, 0);
      v8 = v7;
      if (!v7)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      if (applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(v7, v3) == kCFCompareEqualTo)
        break;
      CFRelease(v8);
      v1 = (uint64_t **)*v1;
      if (!v1)
        return;
    }
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    CFRelease(v8);
  }
}

void sub_1B5C7E008(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t *HALS_Device::_GetDSPTypesForClient(uint64_t *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t *result;
  uint64_t *v7;

  result = HALS_Device::ClientDSPInfo::find(a2 + 616, a4);
  if (result)
  {
    if (a3)
      v7 = result;
    else
      v7 = result + 5;
    return std::set<DSP_Host_Types::AudioProcessingType>::set[abi:ne180100](a1, v7);
  }
  else
  {
    a1[2] = 0;
    a1[1] = 0;
    *a1 = (uint64_t)(a1 + 1);
  }
  return result;
}

uint64_t *HALS_Device::_GetDSPVirtualChannelLayoutForClient(uint64_t *this, uint64_t a2, HALS_Client *a3, uint64_t a4)
{
  uint64_t *v4;

  v4 = this;
  if (!(_DWORD)a3)
  {
    if (a4)
    {
      this = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>((_QWORD *)(a2 + 624), *(_DWORD *)(a4 + 16));
      if (this)
        return (uint64_t *)std::__optional_copy_base<CA::ChannelLayout,false>::__optional_copy_base[abi:ne180100]((uint64_t)v4, (uint64_t)(this + 12));
    }
  }
  *(_BYTE *)v4 = 0;
  *((_BYTE *)v4 + 24) = 0;
  return this;
}

void HALS_Device::ConstructDictionaryFromLayout(HALS_Device *this, CFMutableDictionaryRef *a2, CACFDictionary *a3)
{
  __CFArray *Mutable;
  unint64_t v6;
  const CFDictionaryKeyCallBacks *v7;
  const CFDictionaryValueCallBacks *v8;
  char *v9;
  __CFArray *v10;
  uint64_t i;
  CFNumberRef v12;
  CFMutableArrayRef v13;
  CFMutableArrayRef theArray;
  __int16 v15;
  CFMutableDictionaryRef theDict;
  __int16 v17;
  CFMutableArrayRef v18;
  __int16 v19;
  CFNumberRef v20;
  char v21;
  int valuePtr;

  CACFDictionary::AddUInt32(a2, CFSTR("channel layout tag"), *(_DWORD *)this);
  CACFDictionary::AddUInt32(a2, CFSTR("channel bitmap"), *((_DWORD *)this + 1));
  CACFDictionary::AddUInt32(a2, CFSTR("number channels"), *((_DWORD *)this + 2));
  if (!*(_DWORD *)this)
  {
    Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B380]);
    v18 = Mutable;
    v19 = 257;
    if (Mutable)
    {
      if (*((_DWORD *)this + 2))
      {
        v6 = 0;
        v7 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B398];
        v8 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A8];
        v9 = (char *)this + 20;
        do
        {
          theDict = CFDictionaryCreateMutable(0, 0, v7, v8);
          v17 = 257;
          if (theDict)
          {
            CACFDictionary::AddUInt32(&theDict, CFSTR("channel label"), *((_DWORD *)this + 5 * v6 + 3));
            CACFDictionary::AddUInt32(&theDict, CFSTR("channel flags"), *((_DWORD *)this + 5 * v6 + 4));
            v10 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B380]);
            theArray = v10;
            v15 = 257;
            if (v10)
            {
              for (i = 0; i != 12; i += 4)
              {
                if (v10 && HIBYTE(v15))
                {
                  valuePtr = *(_DWORD *)&v9[i];
                  v12 = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
                  v20 = v12;
                  v21 = 1;
                  if (v12 && theArray && HIBYTE(v15))
                    CFArrayAppendValue(theArray, v12);
                  CACFNumber::~CACFNumber((CACFNumber *)&v20);
                }
                v10 = theArray;
              }
              if (HIBYTE(v17) && theArray && theDict)
                CFDictionarySetValue(theDict, CFSTR("coordinates"), theArray);
            }
            if (v18 && HIBYTE(v19))
              CFArrayAppendValue(v18, theDict);
            CACFArray::~CACFArray((CACFArray *)&theArray);
          }
          CACFDictionary::~CACFDictionary((CACFDictionary *)&theDict);
          ++v6;
          v9 += 20;
        }
        while (v6 < *((unsigned int *)this + 2));
        v13 = v18;
      }
      else
      {
        v13 = Mutable;
      }
      if (*((_BYTE *)a2 + 9) && v13)
      {
        if (*a2)
          CFDictionarySetValue(*a2, CFSTR("channel descriptions"), v13);
      }
    }
    CACFArray::~CACFArray((CACFArray *)&v18);
  }
}

void sub_1B5C7E330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  CACFArray::~CACFArray((CACFArray *)va);
  _Unwind_Resume(a1);
}

uint64_t *HALS_Device::ClientDSPInfo::find(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t *v3;

  if (a2)
  {
    v2 = *(_DWORD *)(a2 + 16);
  }
  else
  {
    if (!*(_BYTE *)a1)
      return 0;
    v2 = 0;
  }
  v3 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>((_QWORD *)(a1 + 8), v2);
  if (v3)
    return v3 + 3;
  else
    return 0;
}

uint64_t ___ZNK11HALS_Device24CopyControlByDescriptionEjjj_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 40) + 672))(*(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 48), *(unsigned int *)(a1 + 52), *(unsigned int *)(a1 + 56));
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1B5C7E404(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t ___ZNK11HALS_Device18CopyControlByIndexEj_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 40) + 664))(*(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 48));
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1B5C7E450(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t ___ZNK11HALS_Device17GetNumberControlsEv_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 656))(*(_QWORD *)(a1 + 40));
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1B5C7E498(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t ___ZNK11HALS_Device12CopyControlsERNS_16BasicControlListE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 32) + 648))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void sub_1B5C7E4CC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t ___ZNK11HALS_Device25GetNumberStreamsForClientEbP11HALS_Client_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 40) + 568))(*(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 56), *(_QWORD *)(a1 + 48));
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1B5C7E518(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void HALS_Device::ClearDeviceArrivalTime(const __CFString **this)
{
  const __CFDictionary *Setting;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  OS::CF::MutableDictionary *v22;
  void (**v23)(OS::CF::Dictionary *__hidden);
  CFDictionaryRef v24;

  v19 = 0;
  v20 = 0;
  HALS_System::GetInstance(&v21, 0, &v19);
  Setting = (const __CFDictionary *)HALS_SettingsManager::ReadSetting(*(HALS_SettingsManager **)(v21 + 1408), this[14]);
  v23 = &off_1E69A0DE0;
  v24 = Setting;
  v3 = (std::__shared_weak_count *)v22;
  if (v22)
  {
    v4 = (unint64_t *)((char *)v22 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v24)
  {
    OS::CF::MutableDictionary::MutableDictionary((OS::CF::MutableDictionary *)&v21, v24);
    OS::CF::MutableDictionary::RemoveKey(v22, CFSTR("global.arrival"));
    v15 = 0;
    v16 = 0;
    HALS_System::GetInstance(&v17, 0, &v15);
    HALS_SettingsManager::WriteSetting(*(HALS_SettingsManager **)(v17 + 1408), this[14], v22);
    v9 = v18;
    if (v18)
    {
      v10 = (unint64_t *)&v18->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = v16;
    if (v16)
    {
      v13 = (unint64_t *)&v16->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v21);
  }
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v23);
}

void sub_1B5C7E6B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  uint64_t v15;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a15);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)(v15 - 32));
  _Unwind_Resume(a1);
}

uint64_t ___ZN11HALS_Device10ReapplyDSPEv_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = HALS_Device::_SetDSPSettingsFromDescription(*(HALS_Device **)(a1 + 40), (const __CFDictionary **)(*(_QWORD *)(a1 + 40) + 456), *(_DWORD *)(*(_QWORD *)(a1 + 40) + 472));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t ___ZN11HALS_Device19ClearDSPDescriptionEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 32);
  result = CACFDictionary::operator=(v1 + 456, 0);
  *(_DWORD *)(v1 + 472) = 0;
  return result;
}

uint64_t HALS_Device::_SetDSPSettingsFromDescription(HALS_Device *this, const __CFDictionary **a2, AudioObjectPropertyScope a3)
{
  int v3;
  unsigned int v7;
  unsigned int *v8;
  HALS_Object *v9;
  uint64_t v10;
  const __CFDictionary *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  HALS_NotificationManager *v17;
  void *v19[2];
  char v20;
  uint64_t v21;
  uint64_t v22;
  CFTypeRef v23;
  int v24;
  void *v25;
  void *v26;
  unsigned int v27;
  uint64_t v28;
  void *v29[2];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  int v35;
  __int128 __p;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  AudioObjectPropertyAddress buf[2];
  void (**v42)(OS::CF::Dictionary *__hidden);
  uint64_t v43;
  void (**v44)(OS::CF::Dictionary *__hidden);
  __int128 v45;
  int v46;
  _BYTE v47[24];
  int v48;
  void (**v49)(OS::CF::Dictionary *__hidden);
  uint64_t v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  if (HALS_DSPSettings::HasValidDSPString(*a2, (const __CFDictionary *)a2))
  {
    HALS_DSPSettings::FromDictionary((HALS_DSPSettings *)v19, *a2);
    v7 = v27;
    if (v7 >= (*(unsigned int (**)(HALS_Device *, _QWORD))(*(_QWORD *)this + 384))(this, 0))
    {
      v10 = 0;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        buf[0].mSelector = 136315394;
        *(_QWORD *)&buf[0].mScope = "HALS_Device.cpp";
        LOWORD(buf[1].mSelector) = 1024;
        *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 1071;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  Target stream for DSP is not available or out of range.", (uint8_t *)buf, 0x12u);
        v10 = 0;
      }
    }
    else
    {
      v8 = (unsigned int *)(*(uint64_t (**)(HALS_Device *, _QWORD, _QWORD))(*(_QWORD *)this + 392))(this, 0, v27);
      v10 = HALS_Device::SetStreamDSP(this, (HALS_Stream *)v8, (const HALS_DSPSettings *)v19);
      if ((_DWORD)v10)
      {
        memset(buf, 0, sizeof(buf));
        v42 = &off_1E69A0DE0;
        v43 = 0;
        v44 = &off_1E69A0DE0;
        v45 = 0u;
        memset(v47, 0, sizeof(v47));
        v49 = &off_1E69A0DE0;
        v50 = 0;
        v11 = (const __CFDictionary *)*((_QWORD *)this + 57);
        if (v11)
        {
          HALS_DSPSettings::FromDictionary((HALS_DSPSettings *)v29, v11);
          if (SHIBYTE(buf[1].mElement) < 0)
            operator delete(*(void **)&buf[0].mSelector);
          *(_OWORD *)&buf[0].mSelector = *(_OWORD *)v29;
          v12 = v30;
          HIBYTE(v30) = 0;
          LOBYTE(v29[0]) = 0;
          v13 = v43;
          *(_QWORD *)&buf[1].mScope = v12;
          v43 = v32;
          v32 = v13;
          v14 = v45;
          v45 = v34;
          v34 = v14;
          v46 = v35;
          if (*(_QWORD *)v47)
          {
            *(_QWORD *)&v47[8] = *(_QWORD *)v47;
            operator delete(*(void **)v47);
          }
          *(_OWORD *)v47 = __p;
          *(_QWORD *)&v47[16] = v37;
          v37 = 0;
          __p = 0uLL;
          v48 = v38;
          v15 = v50;
          v50 = v40;
          v40 = v15;
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v39);
          if ((_QWORD)__p)
          {
            *((_QWORD *)&__p + 1) = __p;
            operator delete((void *)__p);
          }
          if (*((_QWORD *)&v34 + 1))
            CFRelease(*((CFTypeRef *)&v34 + 1));
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v33);
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v31);
          if (SHIBYTE(v30) < 0)
            operator delete(v29[0]);
          v3 = v46;
        }
        v16 = v24;
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v49);
        if (*(_QWORD *)v47)
        {
          *(_QWORD *)&v47[8] = *(_QWORD *)v47;
          operator delete(*(void **)v47);
        }
        if (*((_QWORD *)&v45 + 1))
          CFRelease(*((CFTypeRef *)&v45 + 1));
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v44);
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v42);
        if (SHIBYTE(buf[1].mElement) < 0)
          operator delete(*(void **)&buf[0].mSelector);
        if (v16 != v3)
        {
          v17 = (HALS_NotificationManager *)v8[4];
          buf[0].mSelector = 1936092532;
          buf[0].mScope = a3;
          buf[0].mElement = 0;
          HALS_Object::PropertiesChanged(this, v17, 0, 1, buf);
        }
      }
      HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v8, v9);
    }
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v28);
    if (v25)
    {
      v26 = v25;
      operator delete(v25);
    }
    if (v23)
      CFRelease(v23);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v22);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v21);
    if (v20 < 0)
      operator delete(v19[0]);
  }
  else
  {
    v10 = 0;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      buf[0].mSelector = 136315394;
      *(_QWORD *)&buf[0].mScope = "HALS_Device.cpp";
      LOWORD(buf[1].mSelector) = 1024;
      *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 1076;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  Given HAL DSP dictionary is missing the DSP description string for kAudioDSPDescriptionKey_DSPGraph key.", (uint8_t *)buf, 0x12u);
      return 0;
    }
  }
  return v10;
}

void sub_1B5C7EB54(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1B5C7EBAC(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1B5C7EBB4);
  JUMPOUT(0x1B5C7EB98);
}

void sub_1B5C7EBC0(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1B5C7EBC8);
  JUMPOUT(0x1B5C7EB98);
}

void sub_1B5C7EBD8()
{
  JUMPOUT(0x1B5C7EB98);
}

uint64_t HALS_Device::SetStreamDSP(HALS_Device *this, HALS_Stream *a2, const HALS_DSPSettings *a3)
{
  HALB_Mutex *v6;
  uint64_t v7;
  int v8;
  AMCP::Feature_Flags *v9;
  const BOOL *v10;
  os_unfair_lock_s *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v19;
  HALS_Object *v20;
  HALS_ObjectMap *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(_QWORD *);
  void *v27;
  uint64_t *v28;
  HALS_Device *v29;
  HALS_Stream *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;

  if (!a2)
    return 0;
  v31 = 0;
  v32 = &v31;
  v33 = 0x2000000000;
  v34 = 0;
  v24 = MEMORY[0x1E0C809B0];
  v25 = 0x40000000;
  v26 = ___ZNK11HALS_Device17GetIndexForStreamEP11HALS_Stream_block_invoke;
  v27 = &unk_1E699D858;
  v28 = &v31;
  v29 = this;
  v30 = a2;
  v6 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v6, (uint64_t)&v24);
  v7 = *((unsigned int *)v32 + 6);
  _Block_object_dispose(&v31, 8);
  v8 = *((unsigned __int8 *)a2 + 52);
  if (AMCP::Feature_Flags::run_hybrid_hal(v9, v10))
  {
    v22 = 0;
    v23 = 0;
    HALS_System::GetInstance(&v24, 0, &v22);
    v11 = (os_unfair_lock_s *)(*(_QWORD *)(v24 + 1392) + 16);
    os_unfair_lock_lock(v11);
    os_unfair_lock_unlock(v11);
    v12 = (std::__shared_weak_count *)v25;
    if (v25)
    {
      v13 = (unint64_t *)(v25 + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v15 = v23;
    if (v23)
    {
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    return 0;
  }
  v19 = (*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 400))(this);
  v21 = (HALS_ObjectMap *)v19;
  if (v19)
    LOBYTE(a3) = (*(uint64_t (**)(uint64_t, BOOL, uint64_t, const HALS_DSPSettings *))(*(_QWORD *)v19 + 480))(v19, v8 != 0, v7, a3);
  HALS_ObjectMap::ReleaseObject(v21, v20);
  return (v21 != 0) & a3;
}

void sub_1B5C7ED94(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5C7ED6CLL);
}

void sub_1B5C7EDA4(_Unwind_Exception *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  HALS_ObjectMap *v10;

  HALS_ObjectMap::ReleaseObject(v10, a2);
  _Unwind_Resume(a1);
}

void ___ZNK11HALS_Device17GetIndexForStreamEP11HALS_Stream_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  HALS_ObjectMap *v8;
  HALS_Object *v9;

  v2 = a1[5];
  v3 = a1[6];
  if (v3)
  {
    v4 = *(_BYTE *)(v3 + 52) != 0;
    if (*(_DWORD *)(v3 + 56) == 2)
    {
      v5 = 0;
      goto LABEL_17;
    }
  }
  else
  {
    v4 = 0;
  }
  v6 = (*(uint64_t (**)(_QWORD, _BOOL8))(*(_QWORD *)v2 + 384))(a1[5], v4);
  if (v6)
  {
    v7 = 0;
    do
    {
      v8 = (HALS_ObjectMap *)(*(uint64_t (**)(uint64_t, _BOOL8, uint64_t))(*(_QWORD *)v2 + 392))(v2, v4, v7);
      HALS_ObjectMap::ReleaseObject(v8, v9);
      if (v8 == (HALS_ObjectMap *)v3)
        v5 = v7;
      else
        v5 = -1;
      v7 = (v7 + 1);
    }
    while (v5 == -1 && v7 < v6);
  }
  else
  {
    v5 = -1;
  }
LABEL_17:
  *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = v5;
}

void sub_1B5C7EEB0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK11HALS_Device32GetCombinedVolumeScalarForClientEjb_block_invoke(uint64_t a1)
{
  *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = (*(float (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 40) + 800))(*(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 48), *(unsigned __int8 *)(a1 + 52));
}

void HALS_Device::UpdateDeviceArrivalTime(HALS_Device *this)
{
  unsigned int *v2;
  HALS_Object *v3;
  uint64_t v4;
  int v5;
  _BOOL8 IsHidden;
  uint64_t v7;
  const __CFDictionary *Setting;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD v21[2];
  uint64_t v22;
  std::__shared_weak_count *v23;
  _QWORD v24[2];
  uint64_t v25;
  std::__shared_weak_count *v26;
  void (**v27)(OS::CF::Dictionary *__hidden);
  CFDictionaryRef theDict;
  int v29;
  void *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  const __CFString *v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (HALS_IODevice::GetTransportType(this) == 1651274862)
  {
    v2 = (unsigned int *)(*(uint64_t (**)(HALS_Device *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)this + 640))(this, 1685287523, 1869968496, 0);
    if (v2
      || (v2 = (unsigned int *)(*(uint64_t (**)(HALS_Device *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)this
                                                                                                  + 640))(this, 1685287523, 1768845428, 0), pthread_once(&HALS_ObjectMap::sObjectInfoListInitialized, (void (*)(void))HALS_ObjectMap::Initialize), v2))
    {
      v4 = v2[4];
      v31 = 0x676C6F6273636369;
      LODWORD(v32) = 0;
      v29 = 0;
      LODWORD(v27) = 0;
      (*(void (**)(unsigned int *, uint64_t, uint64_t *, uint64_t, void (***)(OS::CF::Dictionary *__hidden), int *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v2 + 112))(v2, v4, &v31, 4, &v27, &v29, 0, 0, 0);
      v5 = v29;
    }
    else
    {
      v5 = 0;
    }
    HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v2, v3);
    if (v5 == 1769173099 || v5 == 1768778083)
      goto LABEL_8;
  }
  IsHidden = HALS_Device::IsHidden(this);
  if (IsHidden)
  {
LABEL_8:
    *((_QWORD *)this + 52) = 0;
    *((_QWORD *)this + 53) = 0;
  }
  else
  {
    *((_QWORD *)this + 52) = HALS_System::GetCurrentDeviceArrivalTime((HALS_System *)IsHidden);
    *((_QWORD *)this + 53) = v7;
  }
  OS::CF::MutableDictionary::MutableDictionary((OS::CF::MutableDictionary *)&v29);
  v25 = 0;
  v26 = 0;
  HALS_System::GetInstance(&v31, 0, &v25);
  Setting = (const __CFDictionary *)HALS_SettingsManager::ReadSetting(*(HALS_SettingsManager **)(v31 + 1408), *((const __CFString **)this + 14));
  v27 = &off_1E69A0DE0;
  theDict = Setting;
  v9 = v32;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v26;
  if (v26)
  {
    v13 = (unint64_t *)&v26->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (theDict)
    OS::CF::MutableDictionary::operator=((uint64_t)&v29, theDict);
  OS::CF::Number::Number<unsigned long long>(&v22, *((_QWORD *)this + 52));
  v31 = (uint64_t)CFSTR("seed");
  v32 = v23;
  OS::CF::Number::Number<unsigned long long>(v21, *((_QWORD *)this + 53));
  v33 = CFSTR("time");
  v34 = v21[1];
  OS::CF::Dictionary::Dictionary(v24, (uint64_t)&v31, 2uLL);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v21);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v22);
  OS::CF::MutableDictionary::SetValueForKey<OS::CF::Dictionary>((__CFDictionary *)v30, CFSTR("global.arrival"), (const void *)v24[1]);
  v22 = 0;
  v23 = 0;
  HALS_System::GetInstance(&v31, 0, &v22);
  HALS_SettingsManager::WriteSetting(*(HALS_SettingsManager **)(v31 + 1408), *((CFTypeRef *)this + 14), v30);
  v15 = v32;
  if (v32)
  {
    v16 = (unint64_t *)&v32->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v23;
  if (v23)
  {
    v19 = (unint64_t *)&v23->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v24);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v27);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v29);
}

void sub_1B5C7F260(_Unwind_Exception *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20)
{
  HALS_ObjectMap *v20;

  HALS_ObjectMap::ReleaseObject(v20, a2);
  _Unwind_Resume(a1);
}

void sub_1B5C7F2F0()
{
  JUMPOUT(0x1B5C7F2E8);
}

void ___ZN11HALS_Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  const void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  const __CFString *v12;
  const __CFString *v13;
  const __CFString *v14;
  const __CFString *v15;
  const __CFString *v16;
  CFStringRef v17;
  CFMutableDictionaryRef v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  CFStringRef v29;
  char v30;
  CFMutableDictionaryRef theDict;
  __int16 v32;
  CFDictionaryRef v33;
  __int16 v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  HALS_SettingsManager **Mutable;
  std::__shared_weak_count *v38;
  CFDictionaryRef Setting;
  __int16 v40;

  v2 = *(_QWORD *)(a1 + 32);
  v1 = *(_QWORD *)(a1 + 40);
  v4 = *(_DWORD *)(v1 + 4);
  v3 = *(unsigned int *)(v1 + 8);
  v5 = **(const void ***)(a1 + 48);
  v35 = 0;
  v36 = 0;
  HALS_System::GetInstance(&Mutable, 0, &v35);
  Setting = (CFDictionaryRef)HALS_SettingsManager::ReadSetting(Mutable[176], *(const __CFString **)(v2 + 112));
  v40 = 1;
  v6 = v38;
  if (v38)
  {
    p_shared_owners = (unint64_t *)&v38->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = v36;
  if (v36)
  {
    v10 = (unint64_t *)&v36->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  Mutable = (HALS_SettingsManager **)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
  LOWORD(v38) = 257;
  if (Setting)
    CACFDictionary::SetCFMutableDictionaryFromCopy((CACFDictionary *)&Mutable, Setting);
  v12 = CFSTR("through.elementnames");
  if (v4 != 1886679669)
    v12 = 0;
  if (v4 == 1869968496)
    v13 = CFSTR("output.elementnames");
  else
    v13 = v12;
  v14 = CFSTR("input.elementnames");
  if (v4 != 1768845428)
    v14 = 0;
  if (v4 == 1735159650)
    v15 = CFSTR("global.elementnames");
  else
    v15 = v14;
  if (v4 <= 1869968495)
    v16 = v15;
  else
    v16 = v13;
  v33 = 0;
  v34 = 1;
  CACFDictionary::GetCACFDictionary((const __CFDictionary **)&Mutable, v16, (CACFDictionary *)&v33);
  theDict = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
  v32 = 257;
  if (v33)
    CACFDictionary::SetCFMutableDictionaryFromCopy((CACFDictionary *)&theDict, v33);
  v17 = CFStringCreateWithFormat(0, 0, CFSTR("%lu"), v3);
  v29 = v17;
  v30 = 1;
  v18 = theDict;
  if (HIBYTE(v32) && v5 && theDict)
  {
    CFDictionarySetValue(theDict, v17, v5);
    v18 = theDict;
  }
  if (BYTE1(v38) && v18 && Mutable)
    CFDictionarySetValue((CFMutableDictionaryRef)Mutable, v16, v18);
  v25 = 0;
  v26 = 0;
  HALS_System::GetInstance(&v27, 0, &v25);
  HALS_SettingsManager::WriteSetting(*(HALS_SettingsManager **)(v27 + 1408), *(CFTypeRef *)(v2 + 112), Mutable);
  v19 = v28;
  if (v28)
  {
    v20 = (unint64_t *)&v28->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v26;
  if (v26)
  {
    v23 = (unint64_t *)&v26->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  CACFString::~CACFString((CACFString *)&v29);
  CACFDictionary::~CACFDictionary((CACFDictionary *)&theDict);
  CACFDictionary::~CACFDictionary((CACFDictionary *)&v33);
  CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
  CACFDictionary::~CACFDictionary((CACFDictionary *)&Setting);
}

void sub_1B5C7F5FC(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  CACFString::~CACFString((CACFString *)&v3);
  CACFDictionary::~CACFDictionary((CACFDictionary *)&v4);
  CACFDictionary::~CACFDictionary((CACFDictionary *)&v5);
  CACFDictionary::~CACFDictionary((CACFDictionary *)(v1 - 80));
  CACFDictionary::~CACFDictionary((CACFDictionary *)(v1 - 64));
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void sub_1B5C7F688()
{
  JUMPOUT(0x1B5C7F660);
}

void sub_1B5C7F690(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  JUMPOUT(0x1B5C7F668);
}

void sub_1B5C7F868(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;
  _DWORD *v4;

  if (a2)
  {
    v4 = __cxa_begin_catch(a1);
    if (a2 == 2)
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8) + 24) = v4[2];
    else
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8) + 24) = 2003329396;
    __cxa_end_catch();
    JUMPOUT(0x1B5C7F79CLL);
  }
  _Unwind_Resume(a1);
}

uint64_t HALS_Device::GetTotalNumberChannelsForClient(HALS_Device *this, char a2, HALS_Client *a3)
{
  HALB_Mutex *v3;
  uint64_t v4;
  _QWORD v6[7];
  char v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2000000000;
  v11 = 0;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 0x40000000;
  v6[2] = ___ZNK11HALS_Device31GetTotalNumberChannelsForClientEbP11HALS_Client_block_invoke;
  v6[3] = &unk_1E699D8A8;
  v6[4] = &v8;
  v6[5] = this;
  v7 = a2;
  v6[6] = a3;
  v3 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v3, (uint64_t)v6);
  v4 = *((unsigned int *)v9 + 6);
  _Block_object_dispose(&v8, 8);
  return v4;
}

void sub_1B5C7F950(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN11HALS_Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_184(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 736))(v2);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v2 + 720))(v2, *(_QWORD *)(a1 + 48), **(_QWORD **)(a1 + 56));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 736))(v2);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v3 != (_DWORD)result;
  return result;
}

void sub_1B5C7F9E0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5C7F9ACLL);
}

void ___ZN11HALS_Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_186(uint64_t a1)
{
  *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = (*(float (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 40) + 752))(*(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 48), *(unsigned __int8 *)(a1 + 52));
}

void sub_1B5C7FA2C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t ___ZN11HALS_Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_2(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, float))(**(_QWORD **)(a1 + 40) + 760))(*(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 48), *(unsigned __int8 *)(a1 + 56), *(float *)(a1 + 52));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1B5C7FA80(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void HALS_Device::ProcessMuteStateChanged(HALS_Device *this, HALS_Client *a2, uint64_t a3)
{
  HALB_Mutex *v6;
  void **v7;
  void **v8;
  int v9;
  int v10;
  HALS_PlatformBehaviors *v12;
  uint64_t *platform_behaviors;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _DWORD *exception;
  uint64_t v18[2];
  uint64_t v19;
  std::__shared_weak_count *v20;
  _QWORD v21[7];
  void **v22;
  void ***v23;
  uint64_t v24;
  __n128 (*v25)(_QWORD *, uint64_t);
  void (*v26)(uint64_t);
  _QWORD v27[3];
  void **v28;
  _BYTE buf[24];
  __n128 (*v30)(_QWORD *, uint64_t);
  void (*v31)(uint64_t);
  _QWORD v32[5];

  v32[4] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v18[0] = 0;
    v18[1] = 0;
    HALS_System::GetInstance(&v19, 0, v18);
    if (!v19)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "HALS_Device.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1999;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::ProcessMuteStateChanged: there is no system", buf, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69A1B30;
      exception[2] = 560492391;
    }
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x4002000000;
    v30 = __Block_byref_object_copy__37;
    v31 = __Block_byref_object_dispose__38;
    memset(v32, 0, 24);
    v22 = 0;
    v23 = &v22;
    v24 = 0x4002000000;
    v25 = __Block_byref_object_copy__35;
    v26 = __Block_byref_object_dispose__36;
    memset(v27, 0, sizeof(v27));
    v21[0] = MEMORY[0x1E0C809B0];
    v21[1] = 0x40000000;
    v21[2] = ___ZN11HALS_System23ProcessMuteStateChangedEPK11HALS_DeviceP11HALS_Clientb_block_invoke;
    v21[3] = &unk_1E697DD08;
    v21[5] = &v22;
    v21[6] = v19;
    v21[4] = buf;
    v6 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 56))(v19);
    HALB_CommandGate::ExecuteCommand(v6, (uint64_t)v21);
    v7 = v23[5];
    v8 = v23[6];
    while (v7 != v8)
    {
      v9 = *((_DWORD *)this + 4);
      if (v9 == (*(unsigned int (**)(_QWORD))(**((_QWORD **)*v7 + 12) + 720))(*((_QWORD *)*v7 + 12)))
      {
        v10 = **((_DWORD **)*v7 + 8);
        if (v10 == *((_DWORD *)a2 + 4) || v10 == 0)
          (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)*v7 + 12) + 96))(*((_QWORD *)*v7 + 12), a3);
      }
      ++v7;
    }
    _Block_object_dispose(&v22, 8);
    v28 = (void **)v27;
    std::vector<HALS_Releaser<HALS_IOContext>>::__destroy_vector::operator()[abi:ne180100](&v28);
    _Block_object_dispose(buf, 8);
    v22 = (void **)v32;
    std::vector<HALS_Releaser<HALS_Client>>::__destroy_vector::operator()[abi:ne180100](&v22);
    platform_behaviors = HALS_PlatformBehaviors::get_platform_behaviors(v12);
    (*(void (**)(uint64_t *))(*platform_behaviors + 64))(platform_behaviors);
    v14 = v20;
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
}

void sub_1B5C7FD50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ___ZN11HALS_Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_189(uint64_t a1)
{
  *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = (*(float (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 40) + 752))(*(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 48), *(unsigned __int8 *)(a1 + 52));
}

void sub_1B5C7FDF0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t ___ZN11HALS_Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_191(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, float))(**(_QWORD **)(a1 + 40) + 760))(*(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 48), *(unsigned __int8 *)(a1 + 56), *(float *)(a1 + 52));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1B5C7FE44(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t ___ZN11HALS_Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_193(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  if (v3)
    v4 = *(unsigned int *)(v3 + 16);
  else
    v4 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, float, double, double))(*(_QWORD *)v2 + 768))(v2, v4, *(float *)(a1 + 56), *(double *)(a1 + 48), *(float *)(a1 + 60));
}

void sub_1B5C7FE98(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t ___ZN11HALS_Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_195(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  if (v3)
    v4 = *(unsigned int *)(v3 + 16);
  else
    v4 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v2 + 776))(v2, v4, *(unsigned __int8 *)(a1 + 48));
}

void sub_1B5C7FEE0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t ___ZN11HALS_Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_197(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 40) + 816))(*(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 56), **(_QWORD **)(a1 + 48));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1B5C7FF30(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t __Block_byref_object_copy__199(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__200(uint64_t a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(*(HALS_ObjectMap **)(a1 + 40), a2);
}

void ___ZN11HALS_Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_201(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  HALS_ObjectMap *v4;
  HALS_Object *v5;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 400))(*(_QWORD *)(a1 + 40));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v4 = *(HALS_ObjectMap **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;
  HALS_ObjectMap::ReleaseObject(v4, v5);
}

uint64_t ___ZN11HALS_Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_2_203(uint64_t a1)
{
  uint64_t result;

  result = HALS_Device::_SetDSPDescription(*(HALS_Device **)(a1 + 40), **(const __CFDictionary ***)(a1 + 48), *(_DWORD *)(*(_QWORD *)(a1 + 56) + 4));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1B5C7FFEC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t ___ZN11HALS_Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_3(uint64_t a1)
{
  uint64_t result;

  result = HALS_Device::_SetDSPDescription(*(HALS_Device **)(a1 + 40), **(const __CFDictionary ***)(a1 + 48), *(_DWORD *)(*(_QWORD *)(a1 + 56) + 4));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1B5C8003C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZN11HALS_Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_206(uint64_t a1, const BOOL *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  os_unfair_lock_s *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  HALS_Object *v17;
  HALS_ObjectMap *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  v3 = *(unsigned __int8 *)(a1 + 64);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(unsigned int *)(*(_QWORD *)(a1 + 48) + 8);
  v6 = *(unsigned int *)(a1 + 56);
  v7 = *(float *)(a1 + 60);
  if (AMCP::Feature_Flags::run_hybrid_hal((AMCP::Feature_Flags *)a1, a2))
  {
    v19 = 0;
    v20 = 0;
    HALS_System::GetInstance(&v21, 0, &v19);
    v8 = (os_unfair_lock_s *)(*(_QWORD *)(v21 + 1392) + 16);
    os_unfair_lock_lock(v8);
    os_unfair_lock_unlock(v8);
    v9 = v22;
    if (v22)
    {
      p_shared_owners = (unint64_t *)&v22->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = v20;
    if (v20)
    {
      v13 = (unint64_t *)&v20->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v15 = 0;
  }
  else
  {
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 400))(v4);
    v18 = (HALS_ObjectMap *)v16;
    if (v16)
      LOBYTE(v5) = (*(uint64_t (**)(uint64_t, BOOL, uint64_t, uint64_t, float))(*(_QWORD *)v16 + 544))(v16, v3 != 0, v5, v6, v7);
    HALS_ObjectMap::ReleaseObject(v18, v17);
    v15 = (v18 != 0) & v5;
  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v15;
}

void sub_1B5C801B0(void *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  HALS_ObjectMap *v22;

  HALS_ObjectMap::ReleaseObject(v22, a2);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZN11HALS_Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_208(uint64_t a1, const BOOL *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  os_unfair_lock_s *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  HALS_Object *v18;
  HALS_ObjectMap *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  v3 = *(unsigned __int8 *)(a1 + 72);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(unsigned int *)(*(_QWORD *)(a1 + 48) + 8);
  v6 = *(unsigned int *)(a1 + 64);
  v7 = *(unsigned int *)(a1 + 68);
  v8 = *(_QWORD *)(a1 + 56);
  if (AMCP::Feature_Flags::run_hybrid_hal((AMCP::Feature_Flags *)a1, a2))
  {
    v20 = 0;
    v21 = 0;
    HALS_System::GetInstance(&v22, 0, &v20);
    v9 = (os_unfair_lock_s *)(*(_QWORD *)(v22 + 1392) + 16);
    os_unfair_lock_lock(v9);
    os_unfair_lock_unlock(v9);
    v10 = v23;
    if (v23)
    {
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v13 = v21;
    if (v21)
    {
      v14 = (unint64_t *)&v21->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v16 = 0;
  }
  else
  {
    v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 400))(v4);
    v19 = (HALS_ObjectMap *)v17;
    if (v17)
      LOBYTE(v5) = (*(uint64_t (**)(uint64_t, BOOL, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v17 + 512))(v17, v3 != 0, v5, v6, v7, v8);
    HALS_ObjectMap::ReleaseObject(v19, v18);
    v16 = (v19 != 0) & v5;
  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v16;
}

void sub_1B5C80368(void *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  HALS_ObjectMap *v22;

  HALS_ObjectMap::ReleaseObject(v22, a2);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t HALS_Device::GetNumberStreamsExcludingReferenceStreams(HALS_Device *this, char a2)
{
  HALB_Mutex *v2;
  uint64_t v3;
  _QWORD v5[6];
  char v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2000000000;
  v10 = 0;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZNK11HALS_Device41GetNumberStreamsExcludingReferenceStreamsEb_block_invoke;
  v5[3] = &unk_1E699D808;
  v5[4] = &v7;
  v5[5] = this;
  v6 = a2;
  v2 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v5);
  v3 = *((unsigned int *)v8 + 6);
  _Block_object_dispose(&v7, 8);
  return v3;
}

void sub_1B5C80450(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void ___ZN11HALS_Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_212(uint64_t a1)
{
  _DWORD *v2;
  int v3;
  int v4;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9[3];
  _QWORD *v10;
  _QWORD v11[2];
  uint64_t v12[3];
  uint64_t v13[3];
  unsigned int v14;
  uint64_t v15[3];
  uint64_t v16[3];
  _QWORD v17[2];

  v17[1] = *MEMORY[0x1E0C80C00];
  v2 = *(_DWORD **)(a1 + 40);
  v3 = *(_DWORD *)(a1 + 56);
  if (v3 == 2)
  {
    v7 = *(unsigned __int8 *)(a1 + 60);
    v8 = *(_QWORD *)(a1 + 48);
    LODWORD(v17[0]) = 3;
    std::set<DSP_Host_Types::AudioProcessingType>::set[abi:ne180100](v13, (unsigned int *)v17, 1);
    v14 = 2;
    std::set<DSP_Host_Types::AudioProcessingType>::set[abi:ne180100](v12, &v14, 1);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = HALS_Device::_ConfigureDSPTypesForClient(v2, (const BOOL *)(v7 != 0), v8, (uint64_t)v13, v12);
    std::__tree<DSP_Host_Types::AudioProcessingType>::destroy((_QWORD *)v12[1]);
    v6 = (_QWORD *)v13[1];
  }
  else
  {
    v4 = *(unsigned __int8 *)(a1 + 60);
    v5 = *(_QWORD *)(a1 + 48);
    if (v3 == 1)
    {
      LODWORD(v17[0]) = 2;
      std::set<DSP_Host_Types::AudioProcessingType>::set[abi:ne180100](v16, (unsigned int *)v17, 1);
      v14 = 3;
      std::set<DSP_Host_Types::AudioProcessingType>::set[abi:ne180100](v15, &v14, 1);
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = HALS_Device::_ConfigureDSPTypesForClient(v2, (const BOOL *)(v4 != 0), v5, (uint64_t)v16, v15);
      std::__tree<DSP_Host_Types::AudioProcessingType>::destroy((_QWORD *)v15[1]);
      v6 = (_QWORD *)v16[1];
    }
    else
    {
      v11[0] = 0;
      v11[1] = 0;
      v10 = v11;
      v17[0] = 0x200000003;
      std::set<DSP_Host_Types::AudioProcessingType>::set[abi:ne180100](v9, (unsigned int *)v17, 2);
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = HALS_Device::_ConfigureDSPTypesForClient(v2, (const BOOL *)(v4 != 0), v5, (uint64_t)&v10, v9);
      std::__tree<DSP_Host_Types::AudioProcessingType>::destroy((_QWORD *)v9[1]);
      v6 = (_QWORD *)v11[0];
    }
  }
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v6);
}

void sub_1B5C80624(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _QWORD *a17, uint64_t a18, uint64_t a19, _QWORD *a20)
{
  if (a2)
  {
    std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(a17);
    std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(a20);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1B5C805F4);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN11HALS_Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_215(uint64_t a1)
{
  _DWORD *v2;
  int v3;
  int v4;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9[3];
  _QWORD *v10;
  _QWORD v11[2];
  uint64_t v12[3];
  uint64_t v13[3];
  unsigned int v14;
  uint64_t v15[3];
  uint64_t v16[3];
  _QWORD v17[2];

  v17[1] = *MEMORY[0x1E0C80C00];
  v2 = *(_DWORD **)(a1 + 40);
  v3 = *(_DWORD *)(a1 + 56);
  if (v3 == 2)
  {
    v7 = *(unsigned __int8 *)(a1 + 60);
    v8 = *(_QWORD *)(a1 + 48);
    LODWORD(v17[0]) = 5;
    std::set<DSP_Host_Types::AudioProcessingType>::set[abi:ne180100](v13, (unsigned int *)v17, 1);
    v14 = 4;
    std::set<DSP_Host_Types::AudioProcessingType>::set[abi:ne180100](v12, &v14, 1);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = HALS_Device::_ConfigureDSPTypesForClient(v2, (const BOOL *)(v7 != 0), v8, (uint64_t)v13, v12);
    std::__tree<DSP_Host_Types::AudioProcessingType>::destroy((_QWORD *)v12[1]);
    v6 = (_QWORD *)v13[1];
  }
  else
  {
    v4 = *(unsigned __int8 *)(a1 + 60);
    v5 = *(_QWORD *)(a1 + 48);
    if (v3 == 1)
    {
      LODWORD(v17[0]) = 4;
      std::set<DSP_Host_Types::AudioProcessingType>::set[abi:ne180100](v16, (unsigned int *)v17, 1);
      v14 = 5;
      std::set<DSP_Host_Types::AudioProcessingType>::set[abi:ne180100](v15, &v14, 1);
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = HALS_Device::_ConfigureDSPTypesForClient(v2, (const BOOL *)(v4 != 0), v5, (uint64_t)v16, v15);
      std::__tree<DSP_Host_Types::AudioProcessingType>::destroy((_QWORD *)v15[1]);
      v6 = (_QWORD *)v16[1];
    }
    else
    {
      v11[0] = 0;
      v11[1] = 0;
      v10 = v11;
      v17[0] = 0x400000005;
      std::set<DSP_Host_Types::AudioProcessingType>::set[abi:ne180100](v9, (unsigned int *)v17, 2);
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = HALS_Device::_ConfigureDSPTypesForClient(v2, (const BOOL *)(v4 != 0), v5, (uint64_t)&v10, v9);
      std::__tree<DSP_Host_Types::AudioProcessingType>::destroy((_QWORD *)v9[1]);
      v6 = (_QWORD *)v11[0];
    }
  }
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v6);
}

void sub_1B5C80878(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _QWORD *a17, uint64_t a18, uint64_t a19, _QWORD *a20)
{
  if (a2)
  {
    std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(a17);
    std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(a20);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1B5C80848);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN11HALS_Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_218(uint64_t a1)
{
  int v2;
  uint64_t v3;
  _DWORD *v4;
  _QWORD *v5;
  uint64_t v6[3];
  _QWORD *v7;
  _QWORD v8[2];
  _QWORD **v9;
  _QWORD *v10[2];
  unsigned int v11;
  uint64_t v12[3];

  v2 = *(unsigned __int8 *)(a1 + 60);
  v4 = *(_DWORD **)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 48);
  if (*(_DWORD *)(a1 + 56) == 1)
  {
    v11 = 6;
    std::set<DSP_Host_Types::AudioProcessingType>::set[abi:ne180100](v12, &v11, 1);
    v10[0] = 0;
    v10[1] = 0;
    v9 = v10;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = HALS_Device::_ConfigureDSPTypesForClient(v4, (const BOOL *)(v2 != 0), v3, (uint64_t)v12, &v9);
    std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v10[0]);
    v5 = (_QWORD *)v12[1];
  }
  else
  {
    v8[0] = 0;
    v8[1] = 0;
    v7 = v8;
    v11 = 6;
    std::set<DSP_Host_Types::AudioProcessingType>::set[abi:ne180100](v6, &v11, 1);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = HALS_Device::_ConfigureDSPTypesForClient(v4, (const BOOL *)(v2 != 0), v3, (uint64_t)&v7, v6);
    std::__tree<DSP_Host_Types::AudioProcessingType>::destroy((_QWORD *)v6[1]);
    v5 = (_QWORD *)v8[0];
  }
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v5);
}

void sub_1B5C80A10(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11, uint64_t a12, uint64_t a13, _QWORD *a14)
{
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(a11);
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(a14);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5C809FCLL);
}

uint64_t __Block_byref_object_copy__220(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 40) = *(_WORD *)(a2 + 40);
  return result;
}

void ___ZN11HALS_Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_222(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  const __CFString *v4;
  uint64_t *v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  HALS_Device_HostedDSP *v9;
  __int16 v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  DSP_Host_OffloadDictionary *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  std::vector<std::string>::pointer begin;
  std::vector<std::string>::pointer end;
  std::vector<std::string>::pointer v21;
  _BOOL4 v22;
  DSP_Host_OffloadDictionary *v23;
  HALS_Device_HostedDSP *v24;
  std::vector<std::string>::pointer v25;
  const __CFDictionary *v26;
  BOOL has_same_ids;
  const __CFDictionary *v28;
  DSP_Host_OffloadDictionary *v29;
  std::vector<std::string> v30;
  std::vector<std::string> v31;
  std::vector<std::string> *v32;

  v2 = *(uint64_t **)(*(_QWORD *)(a1 + 40) + 608);
  if (v2)
  {
    if (*(_DWORD *)(*(_QWORD *)(a1 + 48) + 4) != 1768845428
      || (v3 = *(_QWORD *)(a1 + 56),
          v4 = **(const __CFString ***)(a1 + 64),
          v5 = HALS_Device::ClientDSPInfo::find(*v2 + 616, v3, 1),
          (v6 = v5) == 0))
    {
      v10 = 0;
      v11 = 0;
LABEL_50:
      v13 = v10 | (v11 << 8);
      v12 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      goto LABEL_51;
    }
    if (!v5[4])
    {
      v7 = (_QWORD *)operator new();
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
      v8 = v6[4];
      v6[4] = (uint64_t)v7;
      if (v8)
        std::default_delete<DSP_Host_OffloadDictionary>::operator()[abi:ne180100](v8);
    }
    v9 = *(HALS_Device_HostedDSP **)(*v2 + 608);
    if (v9)
      HALS_Device_HostedDSP::RationalizeDSPOffloadsForClient((HALS_Device_HostedDSP *)&v29, v9, (HALS_Client *)1, v3);
    else
      v29 = 0;
    v14 = (DSP_Host_OffloadDictionary *)v6[4];
    DSP_Host_OffloadDictionary::get_offload_id_list(&v31, (uint64_t)v14);
    DSP_Host_OffloadDictionary::deep_copy_from(v14, v4);
    DSP_Host_OffloadDictionary::get_offload_id_list(&v30, (uint64_t)v14);
    v15 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v31.__end_ - (char *)v31.__begin_) >> 3));
    if (v31.__end_ == v31.__begin_)
      v16 = 0;
    else
      v16 = v15;
    std::__introsort<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::deep_copy_from_changed(__CFDictionary const*)::$_0 &,std::string *,false>((__n128 *)v31.__begin_, (__n128 *)v31.__end_, v16, 1);
    v17 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v30.__end_ - (char *)v30.__begin_) >> 3));
    if (v30.__end_ == v30.__begin_)
      v18 = 0;
    else
      v18 = v17;
    std::__introsort<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::deep_copy_from_changed(__CFDictionary const*)::$_1 &,std::string *,false>((__n128 *)v30.__begin_, (__n128 *)v30.__end_, v18, 1);
    begin = v31.__begin_;
    end = v31.__end_;
    v21 = v30.__begin_;
    if ((char *)v31.__end_ - (char *)v31.__begin_ == (char *)v30.__end_ - (char *)v30.__begin_)
    {
      if (v31.__begin_ == v31.__end_)
      {
        LOWORD(v22) = 1;
      }
      else
      {
        do
        {
          v22 = std::__equal_to::operator()[abi:ne180100]<std::string,std::string>((unsigned __int8 *)begin, (unsigned __int8 *)v21);
          if (!v22)
            break;
          ++begin;
          ++v21;
        }
        while (begin != end);
      }
    }
    else
    {
      LOWORD(v22) = 0;
    }
    v10 = !v22;
    v32 = &v30;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
    v30.__begin_ = (std::vector<std::string>::pointer)&v31;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
    if ((v10 & 1) == 0)
    {
      v11 = 0;
      v23 = v29;
      goto LABEL_48;
    }
    v24 = *(HALS_Device_HostedDSP **)(*v2 + 608);
    if (v24)
    {
      HALS_Device_HostedDSP::RationalizeDSPOffloadsForClient((HALS_Device_HostedDSP *)&v30, v24, (HALS_Client *)1, v3);
      v25 = v30.__begin_;
    }
    else
    {
      v25 = 0;
    }
    v23 = v29;
    if (v29)
    {
      if (v25)
      {
        v26 = (const __CFDictionary *)v25->__r_.__value_.__r.__words[2];
        if (!v26
          || !CFDictionaryGetCount(v26)
          || DSP_Host_OffloadDictionary::has_all_id((DSP_Host_OffloadDictionary *)v25)
          || !DSP_Host_OffloadDictionary::has_specific_offloads(v23))
        {
          goto LABEL_42;
        }
        has_same_ids = DSP_Host_OffloadDictionary::has_same_ids((DSP_Host_OffloadDictionary *)v25, v23);
LABEL_41:
        if (has_same_ids)
        {
LABEL_42:
          v11 = 0;
LABEL_43:
          std::default_delete<DSP_Host_OffloadDictionary>::operator()[abi:ne180100]((uint64_t)v25);
          goto LABEL_48;
        }
        goto LABEL_45;
      }
      if (DSP_Host_OffloadDictionary::has_specific_offloads(v29))
      {
LABEL_45:
        HALS_Device::_GetDSPTypesForClient((uint64_t *)&v31, *v2, 1, v3);
        (*(void (**)(uint64_t, uint64_t, uint64_t, std::vector<std::string> *))(*(_QWORD *)*v2 + 928))(*v2, 1, v3, &v31);
        std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v31.__end_->__r_.__value_.__r.__words);
        v11 = 1;
        if (v25)
          goto LABEL_43;
LABEL_48:
        if (v23)
          std::default_delete<DSP_Host_OffloadDictionary>::operator()[abi:ne180100]((uint64_t)v23);
        goto LABEL_50;
      }
    }
    else if (v25)
    {
      v28 = (const __CFDictionary *)v25->__r_.__value_.__r.__words[2];
      if (!v28 || !CFDictionaryGetCount(v28))
        goto LABEL_42;
      has_same_ids = DSP_Host_OffloadDictionary::has_all_id((DSP_Host_OffloadDictionary *)v25);
      goto LABEL_41;
    }
    v11 = 0;
    goto LABEL_48;
  }
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v13 = *(_WORD *)(v12 + 40);
LABEL_51:
  *(_WORD *)(v12 + 40) = v13;
}

void sub_1B5C80D74(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;

  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v4);
  if (v1)
    std::default_delete<DSP_Host_OffloadDictionary>::operator()[abi:ne180100](v1);
  if (v3)
    std::default_delete<DSP_Host_OffloadDictionary>::operator()[abi:ne180100](v3);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t HALS_Device::_ConfigureDSPTypesForClient(_DWORD *a1, const BOOL *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  const BOOL *v10;
  uint64_t *v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  NSObject *v14;
  unint64_t *v15;
  unint64_t v16;
  _opaque_pthread_t *v17;
  mach_port_t v18;
  uint64_t v19;
  HALS_Stream *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t **v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  char v28;
  BOOL v29;
  uint64_t *v30;
  uint64_t *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  BOOL v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t **v38;
  unsigned int v39;
  BOOL v40;
  int v41;
  BOOL v42;
  uint64_t *v43;
  uint64_t **v44;
  uint64_t v45;
  uint64_t v46;
  HALS_ObjectMap **v47;
  HALS_Object *v48;
  uint64_t v50;
  uint64_t v51;
  int v52;
  HALS_Object *v53;
  HALS_Object *v54;
  HALS_ObjectMap **v55;
  HALS_ObjectMap **v56;
  HALS_ObjectMap *v57;
  int v58;
  unint64_t v59;
  char *v60;
  _DWORD *v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  BOOL v66;
  unint64_t v67;
  _DWORD *v68;
  int v69;
  _DWORD *exception;
  uint64_t v71;
  uint64_t v72;
  void **v73;
  void *__p;
  HALS_ObjectMap **v75;
  uint64_t v76;
  AudioStreamBasicDescription buf;
  uint8_t v78[4];
  const char *v79;
  __int16 v80;
  int v81;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  if ((AMCP::Feature_Flags::force_mock_dsp_type(0, a2) & 1) == 0
    && (AMCP::Feature_Flags::allow_adm_dsp_spatial(0, v10) & 1) == 0)
  {
    v11 = std::__tree<DSP_Host_Types::AudioProcessingType>::__erase_unique<DSP_Host_Types::AudioProcessingType>((uint64_t **)a4, 4u);
    v12 = std::__tree<DSP_Host_Types::AudioProcessingType>::__erase_unique<DSP_Host_Types::AudioProcessingType>((uint64_t **)a4, 5u);
    if ((uint64_t *)((char *)v12 + (_QWORD)v11))
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v12);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
      v13 = *(std::__shared_weak_count **)&buf.mFormatID;
      v14 = **(NSObject ***)&buf.mSampleRate;
      if (*(_QWORD *)&buf.mFormatID)
      {
        v15 = (unint64_t *)(*(_QWORD *)&buf.mFormatID + 8);
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        v17 = pthread_self();
        v18 = pthread_mach_thread_np(v17);
        LODWORD(buf.mSampleRate) = 67109634;
        HIDWORD(buf.mSampleRate) = v18;
        LOWORD(buf.mFormatID) = 2080;
        *(_QWORD *)((char *)&buf.mFormatID + 2) = "HALS_Device.cpp";
        HIWORD(buf.mBytesPerPacket) = 1024;
        buf.mFramesPerPacket = 5292;
        _os_log_impl(&dword_1B57BA000, v14, OS_LOG_TYPE_INFO, "%6u %32s:%-5d [hal_dsp] Spatial is disabled by feature flag.", (uint8_t *)&buf, 0x18u);
      }
    }
  }
  v19 = *(_QWORD *)(a4 + 16);
  if (!v19 && !a5[2])
    return 0;
  memset(&buf, 0, sizeof(buf));
  v20 = (HALS_Stream *)(*(uint64_t (**)(_DWORD *, const BOOL *, _QWORD, _QWORD))(*(_QWORD *)a1 + 592))(a1, a2, 0, 0);
  if (v20)
    HALS_Stream::GetCurrentVirtualFormat(v20, &buf);
  v21 = HALS_Device::ClientDSPInfo::find((uint64_t)(a1 + 154), a3, v19 != 0);
  v22 = v21;
  if (!v21)
    return 0;
  if ((_DWORD)a2)
    v23 = 0;
  else
    v23 = 5;
  if ((_DWORD)a2)
    v24 = (uint64_t **)v21;
  else
    v24 = (uint64_t **)(v21 + 5);
  v27 = *(uint64_t **)a4;
  v26 = (uint64_t *)(a4 + 8);
  v25 = v27;
  if (v27 == v26)
  {
    v28 = 0;
  }
  else
  {
    v28 = 0;
    do
    {
      v29 = std::__tree<DSP_Host_Types::AudioProcessingType>::__emplace_unique_key_args<DSP_Host_Types::AudioProcessingType,DSP_Host_Types::AudioProcessingType const&>(v24, *((_DWORD *)v25 + 7), *((_DWORD *)v25 + 7)) != 0;
      v30 = (uint64_t *)v25[1];
      if (v30)
      {
        do
        {
          v31 = v30;
          v30 = (uint64_t *)*v30;
        }
        while (v30);
      }
      else
      {
        do
        {
          v31 = (uint64_t *)v25[2];
          v42 = *v31 == (_QWORD)v25;
          v25 = v31;
        }
        while (!v42);
      }
      v28 |= v29;
      v25 = v31;
    }
    while (v31 != v26);
  }
  v34 = (_QWORD *)*a5;
  v33 = a5 + 1;
  v32 = v34;
  if (v34 != v33)
  {
    do
    {
      v35 = std::__tree<DSP_Host_Types::AudioProcessingType>::__erase_unique<DSP_Host_Types::AudioProcessingType>(v24, *((_DWORD *)v32 + 7)) != 0;
      v36 = (_QWORD *)v32[1];
      if (v36)
      {
        do
        {
          v37 = v36;
          v36 = (_QWORD *)*v36;
        }
        while (v36);
      }
      else
      {
        do
        {
          v37 = (_QWORD *)v32[2];
          v42 = *v37 == (_QWORD)v32;
          v32 = v37;
        }
        while (!v42);
      }
      v28 |= v35;
      v32 = v37;
    }
    while (v37 != v33);
  }
  if ((v28 & 1) == 0)
    return 0;
  v38 = (uint64_t **)v22[v23];
  if (v38 == v24 + 1)
  {
LABEL_52:
    if ((_DWORD)a2)
      v45 = 3;
    else
      v45 = 8;
    v46 = v22[v45];
    if (v46)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
      v47 = (HALS_ObjectMap **)&v22[v45];
      HALS_ObjectMap::ObjectIsDead(*v47, v48);
      *v47 = 0;
    }
  }
  else
  {
    while (1)
    {
      v39 = *((_DWORD *)v38 + 7);
      v40 = v39 > 8;
      v41 = (1 << v39) & 0x13C;
      v42 = v40 || v41 == 0;
      if (!v42)
        break;
      v43 = v38[1];
      if (v43)
      {
        do
        {
          v44 = (uint64_t **)v43;
          v43 = (uint64_t *)*v43;
        }
        while (v43);
      }
      else
      {
        do
        {
          v44 = (uint64_t **)v38[2];
          v42 = *v44 == (uint64_t *)v38;
          v38 = v44;
        }
        while (!v42);
      }
      v38 = v44;
      if (v44 == v24 + 1)
        goto LABEL_52;
    }
    if ((_DWORD)a2)
      v50 = 3;
    else
      v50 = 8;
    if (!v22[v50])
    {
      v51 = operator new();
      v52 = *(_DWORD *)(a3 + 16);
      HALS_Object::HALS_Object((HALS_Object *)v51, 1634956402, 1634956402, (uint64_t)a1, v53);
      *(_DWORD *)(v51 + 48) = a1[4];
      *(_DWORD *)(v51 + 56) = 2;
      *(_BYTE *)(v51 + 52) = (_BYTE)a2;
      *(_QWORD *)v51 = off_1E69973C0;
      *(_QWORD *)(v51 + 64) = 0;
      v72 = a3;
      v73 = (void **)(v51 + 64);
      *(_QWORD *)(v51 + 72) = 0;
      *(_QWORD *)(v51 + 80) = 0;
      *(_DWORD *)(v51 + 136) = 0;
      *(_DWORD *)(v51 + 88) = v52;
      __p = 0;
      v75 = 0;
      v76 = 0;
      HALS_Device::CopyStreamList((uint64_t)a1, (char)a2, (char **)&__p);
      v71 = v50 * 8;
      v56 = (HALS_ObjectMap **)__p;
      v55 = v75;
      if (__p == v75)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v78 = 136315394;
          v79 = "HALS_DSPStream.cpp";
          v80 = 1024;
          v81 = 40;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_DSPStream::HALS_DSPStream: Cannot construct HALS_DSPStream with no physical streams", v78, 0x12u);
        }
        exception = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)exception = &off_1E69A1B30;
        exception[2] = 1852797029;
      }
      do
      {
        v57 = *v56;
        v58 = *((_DWORD *)*v56 + 4);
        v60 = *(char **)(v51 + 72);
        v59 = *(_QWORD *)(v51 + 80);
        if ((unint64_t)v60 >= v59)
        {
          v62 = (char *)*v73;
          v63 = (v60 - (_BYTE *)*v73) >> 2;
          v64 = v63 + 1;
          if ((unint64_t)(v63 + 1) >> 62)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          v65 = v59 - (_QWORD)v62;
          if (v65 >> 1 > v64)
            v64 = v65 >> 1;
          v66 = (unint64_t)v65 >= 0x7FFFFFFFFFFFFFFCLL;
          v67 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v66)
            v67 = v64;
          if (v67)
          {
            v67 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v67);
            v62 = *(char **)(v51 + 64);
            v60 = *(char **)(v51 + 72);
          }
          else
          {
            v54 = 0;
          }
          v68 = (_DWORD *)(v67 + 4 * v63);
          *v68 = v58;
          v61 = v68 + 1;
          while (v60 != v62)
          {
            v69 = *((_DWORD *)v60 - 1);
            v60 -= 4;
            *--v68 = v69;
          }
          *(_QWORD *)(v51 + 64) = v68;
          *(_QWORD *)(v51 + 72) = v61;
          *(_QWORD *)(v51 + 80) = v67 + 4 * (_QWORD)v54;
          if (v62)
            operator delete(v62);
        }
        else
        {
          *(_DWORD *)v60 = v58;
          v61 = v60 + 4;
        }
        *(_QWORD *)(v51 + 72) = v61;
        HALS_ObjectMap::ReleaseObject(v57, v54);
        ++v56;
      }
      while (v56 != v55);
      *(_QWORD *)(v51 + 128) = 0;
      *(_OWORD *)(v51 + 96) = 0u;
      *(_OWORD *)(v51 + 112) = 0u;
      if (__p)
      {
        v75 = (HALS_ObjectMap **)__p;
        operator delete(__p);
      }
      *(uint64_t *)((char *)v22 + v71) = v51;
      HALS_DSPStream::SetCurrentPhysicalFormat((HALS_DSPStream *)v51, &buf);
      a3 = v72;
      (***(void (****)(_QWORD))((char *)v22 + v71))(*(uint64_t *)((char *)v22 + v71));
    }
  }
  (*(void (**)(_DWORD *, const BOOL *, uint64_t, uint64_t **))(*(_QWORD *)a1 + 928))(a1, a2, a3, v24);
  return 1;
}

void sub_1B5C813E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  uint64_t v13;

  MEMORY[0x1B5E50688](v13, 0x10F1C40475F21F9);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<DSP_Host_Types::AudioProcessingType>::__erase_unique<DSP_Host_Types::AudioProcessingType>(uint64_t **a1, unsigned int a2)
{
  uint64_t *result;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  unsigned int v7;
  BOOL v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  BOOL v13;

  v4 = (uint64_t *)(a1 + 1);
  result = a1[1];
  if (result)
  {
    v5 = v4;
    v6 = result;
    do
    {
      v7 = *((_DWORD *)v6 + 7);
      v8 = v7 >= a2;
      if (v7 >= a2)
        v9 = (uint64_t **)v6;
      else
        v9 = (uint64_t **)(v6 + 1);
      if (v8)
        v5 = v6;
      v6 = *v9;
    }
    while (*v9);
    if (v5 == v4 || *((_DWORD *)v5 + 7) > a2)
    {
      return 0;
    }
    else
    {
      v10 = (uint64_t *)v5[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
      else
      {
        v12 = v5;
        do
        {
          v11 = (uint64_t *)v12[2];
          v13 = *v11 == (_QWORD)v12;
          v12 = v11;
        }
        while (!v13);
      }
      if (*a1 == v5)
        *a1 = v11;
      a1[2] = (uint64_t *)((char *)a1[2] - 1);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(result, v5);
      operator delete(v5);
      return (uint64_t *)1;
    }
  }
  return result;
}

uint64_t *HALS_Device::ClientDSPInfo::find(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v3;
  unsigned int v6;
  void **v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *i;
  unint64_t v15;
  _DWORD *v16;
  uint64_t **v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  int8x8_t prime;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  uint8x8_t v29;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t **v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  void *v40;
  _OWORD v41[2];
  void *v42[2];
  __int128 v43;
  unsigned int v44;
  __int128 *v45;
  __int128 v46;
  __int128 v47;
  __int128 *v48;
  __int128 v49;
  uint64_t v50;
  void *__p;
  void *v52;
  char v53;
  _QWORD v54[2];
  char v55;

  if (a2)
  {
    v6 = *(_DWORD *)(a2 + 16);
  }
  else
  {
    if (!*(_BYTE *)a1)
      return 0;
    v6 = 0;
  }
  v7 = (void **)(a1 + 8);
  v8 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>((_QWORD *)(a1 + 8), v6);
  if (v8)
    return v8 + 3;
  if (!a3)
    return 0;
  v43 = 0u;
  *(_OWORD *)v42 = 0u;
  v41[1] = 0uLL;
  v41[0] = (unint64_t)v41 + 8;
  v44 = v6;
  v46 = 0u;
  v45 = &v46;
  v47 = 0u;
  v49 = 0u;
  v48 = &v49;
  v50 = 0;
  LOBYTE(__p) = 0;
  v53 = 0;
  v10 = v6;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v6;
      if (v11 <= v6)
        v3 = v6 % v11;
    }
    else
    {
      v3 = ((_DWORD)v11 - 1) & v6;
    }
    v13 = (uint64_t **)*((_QWORD *)*v7 + v3);
    if (v13)
    {
      for (i = *v13; i; i = (uint64_t *)*i)
      {
        v15 = i[1];
        if (v15 == v6)
        {
          if (*((_DWORD *)i + 4) == v6)
          {
            v9 = i + 3;
            goto LABEL_84;
          }
        }
        else
        {
          if (v12.u32[0] > 1uLL)
          {
            if (v15 >= v11)
              v15 %= v11;
          }
          else
          {
            v15 &= v11 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  v16 = operator new(0x80uLL);
  v17 = (uint64_t **)(a1 + 24);
  v54[0] = v16;
  v54[1] = a1 + 24;
  v16[4] = v6;
  *((_OWORD *)v16 + 2) = 0u;
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = v6;
  *((_QWORD *)v16 + 3) = v16 + 8;
  *((_QWORD *)&v47 + 1) = 0;
  *((_OWORD *)v16 + 3) = 0u;
  *((_OWORD *)v16 + 5) = 0u;
  *((_QWORD *)v16 + 9) = 0;
  *((_QWORD *)v16 + 8) = v16 + 18;
  *((_BYTE *)v16 + 96) = 0;
  *((_BYTE *)v16 + 120) = 0;
  v55 = 1;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 32) + 1);
  v19 = *(float *)(a1 + 40);
  if (v11 && (float)(v19 * (float)v11) >= v18)
  {
    v10 = v3;
    goto LABEL_72;
  }
  v20 = 1;
  if (v11 >= 3)
    v20 = (v11 & (v11 - 1)) != 0;
  v21 = v20 | (2 * v11);
  v22 = vcvtps_u32_f32(v18 / v19);
  if (v21 <= v22)
    prime = (int8x8_t)v22;
  else
    prime = (int8x8_t)v21;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v11 = *(_QWORD *)(a1 + 16);
  }
  if (*(_QWORD *)&prime <= v11)
  {
    if (*(_QWORD *)&prime >= v11)
      goto LABEL_68;
    v30 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 32) / *(float *)(a1 + 40));
    if (v11 < 3 || (v31 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
    {
      v30 = std::__next_prime(v30);
    }
    else
    {
      v32 = 1 << -(char)__clz(v30 - 1);
      if (v30 >= 2)
        v30 = v32;
    }
    if (*(_QWORD *)&prime <= v30)
      prime = (int8x8_t)v30;
    if (*(_QWORD *)&prime >= v11)
    {
      v11 = *(_QWORD *)(a1 + 16);
      goto LABEL_68;
    }
    if (!*(_QWORD *)&prime)
    {
      v40 = *v7;
      *v7 = 0;
      if (v40)
        operator delete(v40);
      v11 = 0;
      *(_QWORD *)(a1 + 16) = 0;
      goto LABEL_68;
    }
  }
  if (*(_QWORD *)&prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v24 = operator new(8 * *(_QWORD *)&prime);
  v25 = *v7;
  *v7 = v24;
  if (v25)
    operator delete(v25);
  v26 = 0;
  *(int8x8_t *)(a1 + 16) = prime;
  do
    *((_QWORD *)*v7 + v26++) = 0;
  while (*(_QWORD *)&prime != v26);
  v27 = *v17;
  if (*v17)
  {
    v28 = v27[1];
    v29 = (uint8x8_t)vcnt_s8(prime);
    v29.i16[0] = vaddlv_u8(v29);
    if (v29.u32[0] > 1uLL)
    {
      if (v28 >= *(_QWORD *)&prime)
        v28 %= *(_QWORD *)&prime;
    }
    else
    {
      v28 &= *(_QWORD *)&prime - 1;
    }
    *((_QWORD *)*v7 + v28) = v17;
    v33 = (uint64_t *)*v27;
    if (*v27)
    {
      do
      {
        v34 = v33[1];
        if (v29.u32[0] > 1uLL)
        {
          if (v34 >= *(_QWORD *)&prime)
            v34 %= *(_QWORD *)&prime;
        }
        else
        {
          v34 &= *(_QWORD *)&prime - 1;
        }
        if (v34 != v28)
        {
          if (!*((_QWORD *)*v7 + v34))
          {
            *((_QWORD *)*v7 + v34) = v27;
            goto LABEL_64;
          }
          *v27 = *v33;
          *v33 = **((_QWORD **)*v7 + v34);
          **((_QWORD **)*v7 + v34) = v33;
          v33 = v27;
        }
        v34 = v28;
LABEL_64:
        v27 = v33;
        v33 = (uint64_t *)*v33;
        v28 = v34;
      }
      while (v33);
    }
  }
  v11 = (unint64_t)prime;
LABEL_68:
  if ((v11 & (v11 - 1)) != 0)
  {
    if (v11 <= v10)
      v10 %= v11;
  }
  else
  {
    v10 = ((_DWORD)v11 - 1) & v10;
  }
LABEL_72:
  v35 = (uint64_t **)*((_QWORD *)*v7 + v10);
  v36 = (uint64_t *)v54[0];
  if (v35)
  {
    *(_QWORD *)v54[0] = *v35;
  }
  else
  {
    *(_QWORD *)v54[0] = *v17;
    *v17 = v36;
    *((_QWORD *)*v7 + v10) = v17;
    if (!*v36)
      goto LABEL_81;
    v37 = *(_QWORD *)(*v36 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v37 >= v11)
        v37 %= v11;
    }
    else
    {
      v37 &= v11 - 1;
    }
    v35 = (uint64_t **)((char *)*v7 + 8 * v37);
  }
  *v35 = v36;
LABEL_81:
  v54[0] = 0;
  ++*(_QWORD *)(a1 + 32);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,HALS_Device::PerClientDSPInfo>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,HALS_Device::PerClientDSPInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)v54);
  v9 = v36 + 3;
  if (v53 && __p)
  {
    v52 = __p;
    operator delete(__p);
  }
LABEL_84:
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy((_QWORD *)v49);
  v38 = *((_QWORD *)&v47 + 1);
  *((_QWORD *)&v47 + 1) = 0;
  if (v38)
    std::default_delete<DSP_Host_OffloadDictionary>::operator()[abi:ne180100](v38);
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy((_QWORD *)v46);
  if (BYTE8(v43) && v42[0])
  {
    v42[1] = v42[0];
    operator delete(v42[0]);
  }
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*((_QWORD **)&v41[0] + 1));
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(0);
  return v9;
}

void sub_1B5C81A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  uint64_t v22;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,HALS_Device::PerClientDSPInfo>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,HALS_Device::PerClientDSPInfo>,void *>>>>::reset[abi:ne180100](v22 - 88);
  std::pair<unsigned int,HALS_Device::PerClientDSPInfo>::~pair((uint64_t)&a22);
  HALS_Device::PerClientDSPInfo::~PerClientDSPInfo((HALS_Device::PerClientDSPInfo *)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::pair<unsigned int,HALS_Device::PerClientDSPInfo>::~pair(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  if (*(_BYTE *)(a1 + 104))
  {
    v2 = *(void **)(a1 + 80);
    if (v2)
    {
      *(_QWORD *)(a1 + 88) = v2;
      operator delete(v2);
    }
  }
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*(_QWORD **)(a1 + 56));
  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v3)
    std::default_delete<DSP_Host_OffloadDictionary>::operator()[abi:ne180100](v3);
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*(_QWORD **)(a1 + 16));
  return a1;
}

void HALS_Device::PerClientDSPInfo::~PerClientDSPInfo(HALS_Device::PerClientDSPInfo *this)
{
  void *v2;
  uint64_t v3;

  if (*((_BYTE *)this + 96))
  {
    v2 = (void *)*((_QWORD *)this + 9);
    if (v2)
    {
      *((_QWORD *)this + 10) = v2;
      operator delete(v2);
    }
  }
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*((_QWORD **)this + 6));
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    std::default_delete<DSP_Host_OffloadDictionary>::operator()[abi:ne180100](v3);
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*((_QWORD **)this + 1));
}

void sub_1B5C81D00(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t ___ZNK11HALS_Device41GetNumberStreamsExcludingReferenceStreamsEb_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 40) + 576))(*(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1B5C81D5C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t HALS_Device::_SetDSPDescription(HALS_Device *this, const __CFDictionary *a2, AudioObjectPropertyScope a3)
{
  uint64_t v6;
  const __CFDictionary **v7;
  const __CFDictionary *v8;
  HALS_Stream *v9;
  HALS_Object *v10;
  CFMutableDictionaryRef Mutable;
  __int16 v13;
  _BYTE buf[12];
  __int16 v15;
  int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  CFTypeRef cf;
  void *__p;
  void *v22;
  unsigned int v23;
  _QWORD v24[3];

  v24[2] = *MEMORY[0x1E0C80C00];
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
  v13 = 257;
  CACFDictionary::operator=((uint64_t)&Mutable, a2);
  v6 = HALS_Device::_SetDSPSettingsFromDescription(this, &Mutable, a3);
  v7 = (const __CFDictionary **)((char *)this + 456);
  if ((_DWORD)v6)
  {
    CACFDictionary::operator=((uint64_t)this + 456, (uint64_t)&Mutable);
    *((_DWORD *)this + 118) = a3;
  }
  else
  {
    v8 = *v7;
    if (*v7)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "HALS_Device.cpp";
        v15 = 1024;
        v16 = 1049;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  Could not set given DSP description, falling back to previous description or disabling DSP.", buf, 0x12u);
        v8 = *v7;
      }
      HALS_DSPSettings::FromDictionary((HALS_DSPSettings *)buf, v8);
      v9 = (HALS_Stream *)(*(uint64_t (**)(HALS_Device *, _QWORD, _QWORD))(*(_QWORD *)this + 392))(this, 0, v23);
      HALS_Device::SetStreamDSP(this, v9, (const HALS_DSPSettings *)buf);
      HALS_ObjectMap::ReleaseObject(v9, v10);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v24);
      if (__p)
      {
        v22 = __p;
        operator delete(__p);
      }
      if (cf)
        CFRelease(cf);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v19);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v18);
      if (v17 < 0)
        operator delete(*(void **)buf);
    }
  }
  CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
  return v6;
}

void sub_1B5C81F38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZNK11HALS_Device31GetTotalNumberChannelsForClientEbP11HALS_Client_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 40) + 600))(*(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 56), *(_QWORD *)(a1 + 48));
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1B5C81FC8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke(uint64_t a1)
{
  uint64_t v2;
  char v3;
  char v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v10;
  uint64_t v11;
  int v12;
  HALS_Object *v13;
  HALS_Object *v14;
  char v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v20;
  uint64_t v21;
  HALS_Object *v22;
  HALS_Object *v23;

  v2 = *(_QWORD *)(a1 + 40);
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) < *(_DWORD *)(a1 + 72))
  {
    v3 = 0;
    v4 = 1;
    do
    {
      v5 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 384))(v2, v3 & 1);
      v6 = v5;
      v7 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
      v8 = *(_DWORD *)(a1 + 72);
      if (v7 < v8 && v5 != 0)
      {
        v10 = 1;
        do
        {
          v11 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v2 + 392))(v2, v3 & 1, v10 - 1);
          v12 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v2 + 608))(v2, v11, *(_QWORD *)(a1 + 48));
          if ((v12 & HALS_Object::IsObjectClassInClassIDList((HALS_Object *)*(unsigned int *)(a1 + 76), *(_QWORD *)(a1 + 56), (const unsigned int *)v11, v13)) == 1)*(_DWORD *)(*(_QWORD *)(a1 + 64)+ 4 * (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))++) = *(_DWORD *)(v11 + 16);
          HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v11, v14);
          v7 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
          v8 = *(_DWORD *)(a1 + 72);
        }
        while (v7 < v8 && v10++ < v6);
      }
      v16 = (v7 < v8) & v4;
      v3 = 1;
      v4 = 0;
    }
    while ((v16 & 1) != 0);
  }
  v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 624))(v2);
  v18 = v17;
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) < *(_DWORD *)(a1 + 72) && v17 != 0)
  {
    v20 = 1;
    do
    {
      v21 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 664))(v2, v20 - 1);
      if (HALS_Object::IsObjectClassInClassIDList((HALS_Object *)*(unsigned int *)(a1 + 76), *(_QWORD *)(a1 + 56), (const unsigned int *)v21, v22))*(_DWORD *)(*(_QWORD *)(a1 + 64)+ 4 * (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))++) = *(_DWORD *)(v21 + 16);
      HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v21, v23);
    }
    while (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) < *(_DWORD *)(a1 + 72) && v20++ < v18);
  }
}

void sub_1B5C821D8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_111(_QWORD *a1)
{
  uint64_t v2;
  const __CFString **v3;
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  const __CFString *v13;
  const __CFString *v14;
  const __CFString *v15;
  const __CFString *v16;
  const __CFString *v17;
  CFStringRef v18;
  const void *Value;
  const void *v20;
  CFTypeID v21;
  CFStringRef v22;
  char v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  CFDictionaryRef theDict;
  std::__shared_weak_count *v27;
  const __CFDictionary *Setting;
  __int16 v29;

  v3 = (const __CFString **)a1[5];
  v2 = a1[6];
  v5 = *(unsigned int *)(v2 + 4);
  v4 = *(unsigned int *)(v2 + 8);
  v6 = (const void *)((uint64_t (*)(const __CFString **, uint64_t, uint64_t))(*v3)[16].data)(v3, v5, v4);
  v24 = 0;
  v25 = 0;
  HALS_System::GetInstance(&theDict, 0, &v24);
  Setting = (const __CFDictionary *)HALS_SettingsManager::ReadSetting(*((HALS_SettingsManager **)theDict + 176), v3[14]);
  v29 = 1;
  v7 = v27;
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v25;
  if (v25)
  {
    v11 = (unint64_t *)&v25->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = CFSTR("through.elementnames");
  if ((_DWORD)v5 != 1886679669)
    v13 = 0;
  if ((_DWORD)v5 == 1869968496)
    v14 = CFSTR("output.elementnames");
  else
    v14 = v13;
  v15 = CFSTR("global.elementnames");
  v16 = CFSTR("input.elementnames");
  if ((_DWORD)v5 != 1768845428)
    v16 = 0;
  if ((_DWORD)v5 != 1735159650)
    v15 = v16;
  if ((int)v5 <= 1869968495)
    v17 = v15;
  else
    v17 = v14;
  theDict = 0;
  LOWORD(v27) = 1;
  CACFDictionary::GetCACFDictionary(&Setting, v17, (CACFDictionary *)&theDict);
  if (theDict)
  {
    v18 = CFStringCreateWithFormat(0, 0, CFSTR("%lu"), v4);
    v22 = v18;
    v23 = 1;
    if (theDict
      && (Value = CFDictionaryGetValue(theDict, v18), (v20 = Value) != 0)
      && (v21 = CFGetTypeID(Value), v21 == CFStringGetTypeID()))
    {
      if (v6)
        CFRelease(v6);
      CFRetain(v20);
    }
    else
    {
      v20 = v6;
    }
    CACFString::~CACFString((CACFString *)&v22);
    v6 = v20;
  }
  CACFDictionary::~CACFDictionary((CACFDictionary *)&theDict);
  CACFDictionary::~CACFDictionary((CACFDictionary *)&Setting);
  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = v6;
}

void sub_1B5C82444(void *a1)
{
  uint64_t v2;
  uint64_t v3;

  CACFDictionary::~CACFDictionary((CACFDictionary *)&v2);
  CACFDictionary::~CACFDictionary((CACFDictionary *)&v3);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_117(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  HALS_ObjectMap *v6;
  HALS_Object *v7;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_DWORD *)(a1 + 56) >> 2;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 656))(v2);
  if (v4 < v3)
    v3 = v4;
  if (v3)
  {
    v5 = 0;
    do
    {
      v6 = (HALS_ObjectMap *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 664))(v2, v5);
      if (v6)
        *(_DWORD *)(*(_QWORD *)(a1 + 48)
                  + 4 * (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))++) = *((_DWORD *)v6 + 4);
      HALS_ObjectMap::ReleaseObject(v6, v7);
      v5 = (v5 + 1);
    }
    while (v3 != (_DWORD)v5);
  }
}

uint64_t ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_119(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *(_DWORD *)(*(_QWORD *)(result + 40) + 152);
  return result;
}

void ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_121(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  char v7;
  char v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v13;
  HALS_ObjectMap *v14;
  HALS_Object *v15;
  char v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  HALS_ObjectMap *v22;
  HALS_Object *v23;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_DWORD *)(*(_QWORD *)(a1 + 48) + 4);
  if (v3 == 1735159650)
  {
    v4 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)v2 + 568))(*(_QWORD *)(a1 + 40), 1, *(_QWORD *)(a1 + 56));
    v5 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v2 + 568))(v2, 0, *(_QWORD *)(a1 + 56));
    if ((v5 + v4) >= *(_DWORD *)(a1 + 72) >> 2)
      v6 = *(_DWORD *)(a1 + 72) >> 2;
    else
      v6 = v5 + v4;
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) < v6)
    {
      v7 = 0;
      v8 = 1;
      do
      {
        v9 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v2 + 568))(v2, v7 & 1, *(_QWORD *)(a1 + 56));
        v10 = v9;
        v11 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
        if (v11 < v6 && v9 != 0)
        {
          v13 = 1;
          do
          {
            v14 = (HALS_ObjectMap *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v2 + 592))(v2, v7 & 1, v13 - 1, *(_QWORD *)(a1 + 56));
            if (v14)
              *(_DWORD *)(*(_QWORD *)(a1 + 64)
                        + 4 * (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))++) = *((_DWORD *)v14 + 4);
            HALS_ObjectMap::ReleaseObject(v14, v15);
            v11 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
          }
          while (v11 < v6 && v13++ < v10);
        }
        v17 = (v11 < v6) & v8;
        v7 = 1;
        v8 = 0;
      }
      while ((v17 & 1) != 0);
    }
  }
  else
  {
    v18 = *(_DWORD *)(a1 + 72);
    v19 = (*(uint64_t (**)(_QWORD, BOOL, _QWORD))(*(_QWORD *)v2 + 568))(*(_QWORD *)(a1 + 40), v3 != 1869968496, *(_QWORD *)(a1 + 56));
    if (v19 >= v18 >> 2)
      v20 = v18 >> 2;
    else
      v20 = v19;
    if (v20)
    {
      v21 = 0;
      do
      {
        v22 = (HALS_ObjectMap *)(*(uint64_t (**)(uint64_t, BOOL, uint64_t, _QWORD))(*(_QWORD *)v2 + 592))(v2, v3 != 1869968496, v21, *(_QWORD *)(a1 + 56));
        if (v22)
          *(_DWORD *)(*(_QWORD *)(a1 + 64)
                    + 4 * (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))++) = *((_DWORD *)v22 + 4);
        HALS_ObjectMap::ReleaseObject(v22, v23);
        v21 = (v21 + 1);
      }
      while (v20 != (_DWORD)v21);
    }
  }
}

void sub_1B5C82774(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_123(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  HALS_Stream *v5;
  HALS_Object *v6;
  HALS_ObjectMap *v7;
  uint64_t v8;
  AudioStreamBasicDescription v9;

  v1 = *(_QWORD *)(a1 + 32);
  **(_DWORD **)(a1 + 40) = *(_DWORD *)(a1 + 56);
  if (*(_DWORD *)(a1 + 56))
  {
    v3 = 0;
    v4 = 0;
    do
    {
      v5 = (HALS_Stream *)(*(uint64_t (**)(uint64_t, BOOL, unint64_t, _QWORD))(*(_QWORD *)v1 + 592))(v1, *(_DWORD *)(a1 + 60) != 0, v4, *(_QWORD *)(a1 + 48));
      v7 = v5;
      if (v5)
      {
        HALS_Stream::GetCurrentVirtualFormat(v5, &v9);
        v8 = *(_QWORD *)(a1 + 40) + v3;
        *(_DWORD *)(v8 + 8) = v9.mChannelsPerFrame;
        *(_DWORD *)(v8 + 12) = v9.mBytesPerPacket;
        *(_QWORD *)(v8 + 16) = 0;
      }
      HALS_ObjectMap::ReleaseObject(v7, v6);
      ++v4;
      v3 += 16;
    }
    while (v4 < *(unsigned int *)(a1 + 56));
  }
}

void sub_1B5C8286C(void *a1, HALS_Object *a2)
{
  HALS_ObjectMap *v2;

  HALS_ObjectMap::ReleaseObject(v2, a2);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5C82854);
}

void HALS_Device::ConstructLayoutFromDictionary(HALS_Device *this, const CACFDictionary *a2, AudioChannelLayout *a3)
{
  unint64_t Count;
  unint64_t v6;
  char *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unsigned int CFType;
  const __CFNumber *v13;
  unsigned int v14;
  CFTypeID v15;
  CFArrayRef v16;
  __int16 v17;
  CFArrayRef v18;
  CACFDictionary *v19;
  __int16 v20;
  __CFDictionary *v21;
  CFArrayRef v22;
  __int16 v23;
  CFArrayRef theArray;
  unsigned int v25;
  CFTypeRef cf;

  CACFDictionary::GetUInt32(*(_QWORD *)this, CFSTR("channel layout tag"), (unsigned int *)a2);
  CACFDictionary::GetUInt32(*(_QWORD *)this, CFSTR("channel bitmap"), (unsigned int *)a2 + 1);
  v25 = 0;
  CACFDictionary::GetUInt32(*(_QWORD *)this, CFSTR("number channels"), &v25);
  if (!*(_DWORD *)a2)
  {
    theArray = 0;
    if (CACFDictionary::GetArray(*(_QWORD *)this, CFSTR("channel descriptions"), &theArray))
    {
      v22 = theArray;
      v23 = 0;
      if (theArray)
      {
        Count = CFArrayGetCount(theArray);
        if (Count)
        {
          if (*((_DWORD *)a2 + 2))
          {
            v6 = 0;
            v7 = (char *)a2 + 20;
            do
            {
              v21 = 0;
              if (CACFArray::GetDictionary(&v22, v6, &v21))
              {
                v19 = v21;
                v20 = 0;
                CACFDictionary::GetUInt32((uint64_t)v21, CFSTR("channel label"), (unsigned int *)a2 + 5 * v6 + 3);
                CACFDictionary::GetUInt32((uint64_t)v19, CFSTR("channel flags"), (unsigned int *)a2 + 5 * v6 + 4);
                v18 = 0;
                if (CACFDictionary::GetArray((uint64_t)v19, CFSTR("coordinates"), &v18))
                {
                  v8 = v18;
                  v16 = v18;
                  v17 = 0;
                  if (v18)
                    v8 = CFArrayGetCount(v18);
                  if (v8 >= 3)
                    v9 = 3;
                  else
                    v9 = v8;
                  if ((_DWORD)v9)
                  {
                    v10 = 0;
                    v11 = v7;
                    do
                    {
                      cf = 0;
                      CFType = CACFArray::GetCFType(&v16, v10, &cf);
                      v13 = (const __CFNumber *)cf;
                      if (cf)
                        v14 = CFType;
                      else
                        v14 = 0;
                      if (v14 == 1)
                      {
                        v15 = CFGetTypeID(cf);
                        if (v15 == CFNumberGetTypeID())
                          CFNumberGetValue(v13, kCFNumberFloat32Type, v11);
                      }
                      ++v10;
                      v11 += 4;
                    }
                    while (v9 != v10);
                  }
                  CACFArray::~CACFArray((CACFArray *)&v16);
                }
                CACFDictionary::~CACFDictionary((CACFDictionary *)&v19);
              }
              if (++v6 >= Count)
                break;
              v7 += 20;
            }
            while (v6 < *((unsigned int *)a2 + 2));
          }
        }
      }
      CACFArray::~CACFArray((CACFArray *)&v22);
    }
  }
}

void sub_1B5C82AC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  CACFArray::~CACFArray((CACFArray *)va);
  _Unwind_Resume(a1);
}

uint64_t HALS_Device::CreateIOContextDescription(HALS_Device *this, HALS_Client *a2)
{
  uint64_t IOContextDescription;
  HALB_Mutex *v5;
  uint64_t v6;
  _QWORD v8[7];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  v9 = 0;
  v10 = &v9;
  v11 = 0x2000000000;
  v12 = 0;
  if (AMCP::Feature_Flags::run_hybrid_hal(this, (const BOOL *)a2))
  {
    IOContextDescription = HALS_Device::_CreateIOContextDescription(this, a2);
    v10[3] = IOContextDescription;
  }
  else
  {
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 0x40000000;
    v8[2] = ___ZNK11HALS_Device26CreateIOContextDescriptionEP11HALS_Client_block_invoke;
    v8[3] = &unk_1E699DA28;
    v8[4] = &v9;
    v8[5] = this;
    v8[6] = a2;
    v5 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v5, (uint64_t)v8);
  }
  v6 = v10[3];
  _Block_object_dispose(&v9, 8);
  return v6;
}

void sub_1B5C82BD0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5C82BA4);
}

void sub_1B5C82BDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_133(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 32) + 712))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48));
  **(_QWORD **)(a1 + 40) = result;
  return result;
}

void sub_1B5C82C2C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_135(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
    v4 = *(unsigned int *)(v3 + 16);
  else
    v4 = 0;
  **(float **)(a1 + 40) = (*(float (**)(uint64_t, uint64_t, BOOL))(*(_QWORD *)v2 + 752))(v2, v4, *(_DWORD *)(*(_QWORD *)(a1 + 56) + 4) == 1768845428);
}

void sub_1B5C82C9C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_137(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[5];
  v3 = a1[6];
  if (v3)
    v4 = *(unsigned int *)(v3 + 16);
  else
    v4 = 0;
  *(float *)(*(_QWORD *)(a1[4] + 8) + 24) = (*(float (**)(uint64_t, uint64_t, BOOL))(*(_QWORD *)v2 + 752))(v2, v4, *(_DWORD *)(a1[7] + 4) == 1768845428);
}

void sub_1B5C82D10(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_143(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v2 = a1[5];
  v3 = a1[6];
  if (v3)
    v4 = *(unsigned int *)(v3 + 16);
  else
    v4 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 784))(v2, v4);
  *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = result;
  return result;
}

void ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_145(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const __CFString *v5;
  const __CFString *v6;
  char v7;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  if (v3)
    v4 = *(unsigned int *)(v3 + 16);
  else
    v4 = 0;
  v5 = (const __CFString *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 808))(v2, v4);
  v6 = v5;
  v7 = 1;
  if (v5)
    v5 = (const __CFString *)PropertyListDeepImmutableCopy(v5);
  **(_QWORD **)(a1 + 48) = v5;
  CACFString::~CACFString((CACFString *)&v6);
}

void sub_1B5C82DD8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CACFString::~CACFString((CACFString *)&a9);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5C82DC8);
}

CFTypeRef ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_147(uint64_t a1)
{
  uint64_t v2;
  CFTypeRef result;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 32);
  result = *(CFTypeRef *)(v2 + 456);
  if (result)
  {
    result = CFRetain(result);
    v4 = *(_QWORD *)(v2 + 456);
  }
  else
  {
    v4 = 0;
  }
  **(_QWORD **)(a1 + 40) = v4;
  return result;
}

void sub_1B5C82E3C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_149(uint64_t a1, const BOOL *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  os_unfair_lock_s *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  HALS_Object *v17;
  HALS_ObjectMap *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  v3 = *(unsigned __int8 *)(a1 + 68);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(unsigned int *)(*(_QWORD *)(a1 + 48) + 8);
  v6 = *(unsigned int *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 56);
  if (AMCP::Feature_Flags::run_hybrid_hal((AMCP::Feature_Flags *)a1, a2))
  {
    v19 = 0;
    v20 = 0;
    HALS_System::GetInstance(&v21, 0, &v19);
    v8 = (os_unfair_lock_s *)(*(_QWORD *)(v21 + 1392) + 16);
    os_unfair_lock_lock(v8);
    os_unfair_lock_unlock(v8);
    v9 = v22;
    if (v22)
    {
      p_shared_owners = (unint64_t *)&v22->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = v20;
    if (v20)
    {
      v13 = (unint64_t *)&v20->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v15 = 0;
  }
  else
  {
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 400))(v4);
    v18 = (HALS_ObjectMap *)v16;
    if (v16)
      LOBYTE(v5) = (*(uint64_t (**)(uint64_t, BOOL, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16 + 552))(v16, v3 != 0, v5, v6, v7);
    HALS_ObjectMap::ReleaseObject(v18, v17);
    v15 = (v18 != 0) & v5;
  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v15;
}

void sub_1B5C82FA8(void *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  HALS_ObjectMap *v20;

  HALS_ObjectMap::ReleaseObject(v20, a2);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_151(uint64_t a1, const BOOL *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  HALS_Object *v16;
  HALS_ObjectMap *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v3 = *(unsigned __int8 *)(a1 + 68);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(unsigned int *)(*(_QWORD *)(a1 + 40) + 8);
  v6 = *(unsigned int *)(a1 + 64);
  if (AMCP::Feature_Flags::run_hybrid_hal((AMCP::Feature_Flags *)a1, a2))
  {
    v18 = 0;
    v19 = 0;
    HALS_System::GetInstance(&v20, 0, &v18);
    v7 = (os_unfair_lock_s *)(*(_QWORD *)(v20 + 1392) + 16);
    os_unfair_lock_lock(v7);
    os_unfair_lock_unlock(v7);
    v8 = v21;
    if (v21)
    {
      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v11 = v19;
    if (v19)
    {
      v12 = (unint64_t *)&v19->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v14 = 0;
  }
  else
  {
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 400))(v4);
    v17 = (HALS_ObjectMap *)v15;
    if (v15)
      LOBYTE(v5) = (*(uint64_t (**)(uint64_t, BOOL, uint64_t, uint64_t))(*(_QWORD *)v15 + 560))(v15, v3 != 0, v5, v6);
    HALS_ObjectMap::ReleaseObject(v17, v16);
    v14 = (v17 != 0) & v5;
  }
  **(_DWORD **)(a1 + 48) = v14;
  **(_DWORD **)(a1 + 56) = 4;
}

void sub_1B5C83150(void *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  HALS_ObjectMap *v20;

  HALS_ObjectMap::ReleaseObject(v20, a2);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_153(uint64_t a1, const BOOL *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  os_unfair_lock_s *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  HALS_Object *v18;
  HALS_ObjectMap *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  v3 = *(unsigned __int8 *)(a1 + 76);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(unsigned int *)(*(_QWORD *)(a1 + 48) + 8);
  v6 = *(unsigned int *)(a1 + 72);
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(_QWORD *)(a1 + 64);
  if (AMCP::Feature_Flags::run_hybrid_hal((AMCP::Feature_Flags *)a1, a2))
  {
    v20 = 0;
    v21 = 0;
    HALS_System::GetInstance(&v22, 0, &v20);
    v9 = (os_unfair_lock_s *)(*(_QWORD *)(v22 + 1392) + 16);
    os_unfair_lock_lock(v9);
    os_unfair_lock_unlock(v9);
    v10 = v23;
    if (v23)
    {
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v13 = v21;
    if (v21)
    {
      v14 = (unint64_t *)&v21->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v16 = 0;
  }
  else
  {
    v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 400))(v4);
    v19 = (HALS_ObjectMap *)v17;
    if (v17)
      LOBYTE(v5) = (*(uint64_t (**)(uint64_t, BOOL, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v17 + 528))(v17, v3 != 0, v5, v6, v7, v8);
    HALS_ObjectMap::ReleaseObject(v19, v18);
    v16 = (v19 != 0) & v5;
  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v16;
}

void sub_1B5C83304(void *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  HALS_ObjectMap *v22;

  HALS_ObjectMap::ReleaseObject(v22, a2);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_155(uint64_t a1, const BOOL *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  HALS_Object *v16;
  HALS_ObjectMap *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v3 = *(unsigned __int8 *)(a1 + 68);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(unsigned int *)(*(_QWORD *)(a1 + 40) + 8);
  v6 = *(unsigned int *)(a1 + 64);
  if (AMCP::Feature_Flags::run_hybrid_hal((AMCP::Feature_Flags *)a1, a2))
  {
    v18 = 0;
    v19 = 0;
    HALS_System::GetInstance(&v20, 0, &v18);
    v7 = (os_unfair_lock_s *)(*(_QWORD *)(v20 + 1392) + 16);
    os_unfair_lock_lock(v7);
    os_unfair_lock_unlock(v7);
    v8 = v21;
    if (v21)
    {
      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v11 = v19;
    if (v19)
    {
      v12 = (unint64_t *)&v19->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v14 = 0;
  }
  else
  {
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 400))(v4);
    v17 = (HALS_ObjectMap *)v15;
    if (v15)
      LOBYTE(v5) = (*(uint64_t (**)(uint64_t, BOOL, uint64_t, uint64_t))(*(_QWORD *)v15 + 536))(v15, v3 != 0, v5, v6);
    HALS_ObjectMap::ReleaseObject(v17, v16);
    v14 = (v17 != 0) & v5;
  }
  **(_DWORD **)(a1 + 48) = v14;
  **(_DWORD **)(a1 + 56) = 4;
}

void sub_1B5C834B0(void *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  HALS_ObjectMap *v20;

  HALS_ObjectMap::ReleaseObject(v20, a2);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_166(uint64_t a1)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  unsigned int v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned int v12;
  int v13;
  _QWORD *v14;
  _QWORD *v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD v19[2];

  HALS_Device::_GetDSPTypesForClient(&v18, *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 64), *(_QWORD *)(a1 + 40));
  v2 = (_QWORD *)v19[0];
  if (!v19[0])
  {
LABEL_22:
    v9 = v19;
LABEL_23:
    v13 = 2 * (v9 != v19);
    goto LABEL_24;
  }
  v3 = v19;
  v4 = v19[0];
  do
  {
    v5 = (uint64_t *)v4;
    v6 = v3;
    v7 = *(_DWORD *)(v4 + 28);
    v8 = (uint64_t *)(v4 + 8);
    if (v7 >= 2)
    {
      v8 = v5;
      v3 = v5;
    }
    v4 = *v8;
  }
  while (v4);
  v9 = v19;
  v10 = v19[0];
  if (v3 == v19 || (v7 >= 2 ? (v11 = v5) : (v11 = v6), v12 = *((_DWORD *)v11 + 7), v9 = v19, v10 = v19[0], v12 >= 3))
  {
    do
    {
      v14 = (_QWORD *)v10;
      v15 = v9;
      v16 = *(_DWORD *)(v10 + 28);
      if (v16 >= 3)
        v17 = (uint64_t *)v10;
      else
        v17 = (uint64_t *)(v10 + 8);
      if (v16 >= 3)
        v9 = (_QWORD *)v10;
      v10 = *v17;
    }
    while (*v17);
    if (v9 != v19)
    {
      if (v16 < 3)
        v14 = v15;
      if (*((_DWORD *)v14 + 7) < 4u)
        goto LABEL_23;
    }
    goto LABEL_22;
  }
  v13 = 1;
LABEL_24:
  **(_DWORD **)(a1 + 48) = v13;
  **(_DWORD **)(a1 + 56) = 4;
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v2);
}

void sub_1B5C83608(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5C835F8);
}

void ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_169(uint64_t a1)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  unsigned int v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned int v12;
  int v13;
  _QWORD *v14;
  _QWORD *v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD v19[2];

  HALS_Device::_GetDSPTypesForClient(&v18, *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 64), *(_QWORD *)(a1 + 40));
  v2 = (_QWORD *)v19[0];
  if (!v19[0])
  {
LABEL_22:
    v9 = v19;
LABEL_23:
    v13 = 2 * (v9 != v19);
    goto LABEL_24;
  }
  v3 = v19;
  v4 = v19[0];
  do
  {
    v5 = (uint64_t *)v4;
    v6 = v3;
    v7 = *(_DWORD *)(v4 + 28);
    v8 = (uint64_t *)(v4 + 8);
    if (v7 >= 4)
    {
      v8 = v5;
      v3 = v5;
    }
    v4 = *v8;
  }
  while (v4);
  v9 = v19;
  v10 = v19[0];
  if (v3 == v19 || (v7 >= 4 ? (v11 = v5) : (v11 = v6), v12 = *((_DWORD *)v11 + 7), v9 = v19, v10 = v19[0], v12 >= 5))
  {
    do
    {
      v14 = (_QWORD *)v10;
      v15 = v9;
      v16 = *(_DWORD *)(v10 + 28);
      if (v16 >= 5)
        v17 = (uint64_t *)v10;
      else
        v17 = (uint64_t *)(v10 + 8);
      if (v16 >= 5)
        v9 = (_QWORD *)v10;
      v10 = *v17;
    }
    while (*v17);
    if (v9 != v19)
    {
      if (v16 < 5)
        v14 = v15;
      if (*((_DWORD *)v14 + 7) < 6u)
        goto LABEL_23;
    }
    goto LABEL_22;
  }
  v13 = 1;
LABEL_24:
  **(_DWORD **)(a1 + 48) = v13;
  **(_DWORD **)(a1 + 56) = 4;
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v2);
}

void sub_1B5C83720(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5C83710);
}

void HALS_Device::GetDSPVirtualChannelLayoutForClient(HALS_Device *this, uint64_t a2, HALS_Client *a3, uint64_t a4)
{
  HALB_Mutex *v5;
  _QWORD v6[7];
  char v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  __n128 (*v11)(uint64_t, uint64_t);
  void (*v12)(uint64_t);
  void *__p;
  void *v14;
  char v15;

  if ((_DWORD)a3 || !a4)
  {
    *(_BYTE *)this = 0;
    *((_BYTE *)this + 24) = 0;
  }
  else
  {
    v8 = 0;
    v9 = &v8;
    v10 = 0x4802000000;
    v11 = __Block_byref_object_copy__257;
    v12 = __Block_byref_object_dispose__258;
    LOBYTE(__p) = 0;
    v15 = 0;
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 0x40000000;
    v6[2] = ___ZNK11HALS_Device35GetDSPVirtualChannelLayoutForClientEbP11HALS_Client_block_invoke;
    v6[3] = &unk_1E699E2F8;
    v6[4] = &v8;
    v6[5] = a2;
    v7 = 0;
    v6[6] = a4;
    v5 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
    HALB_CommandGate::ExecuteCommand(v5, (uint64_t)v6);
    std::__optional_copy_base<CA::ChannelLayout,false>::__optional_copy_base[abi:ne180100]((uint64_t)this, (uint64_t)(v9 + 5));
    _Block_object_dispose(&v8, 8);
    if (v15)
    {
      if (__p)
      {
        v14 = __p;
        operator delete(__p);
      }
    }
  }
}

void sub_1B5C83818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a18, 8);
  if (a26)
  {
    if (__p)
    {
      a24 = (uint64_t)__p;
      operator delete(__p);
    }
  }
  _Unwind_Resume(a1);
}

unint64_t CA::ChannelLayout::GetNumberChannelDescriptions(CA::ChannelLayout *this, uint64_t a2)
{
  unint64_t result;

  result = *((unsigned int *)this + 2);
  if (result > (a2 - (uint64_t)this - 12) / 0x14uLL)
    __assert_rtn("GetNumberChannelDescriptions", "CoreAudioBaseTypes.hpp", 2237, "GetAudioChannelLayout().mNumberChannelDescriptions <= (mStorage.size() - kHeaderSize) / sizeof(AudioChannelDescription)");
  return result;
}

void ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_171(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t *v4;
  _QWORD *v5;
  _QWORD *v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD v10[2];

  HALS_Device::_GetDSPTypesForClient(&v9, *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 64), *(_QWORD *)(a1 + 48));
  v2 = (_QWORD *)v10[0];
  if (v10[0])
  {
    v3 = v10;
    v4 = (uint64_t *)v10[0];
    do
    {
      v5 = v4;
      v6 = v3;
      v7 = *((_DWORD *)v4 + 7);
      if (v7 >= 6)
        v3 = v4;
      else
        ++v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
    if (v3 != v10)
    {
      if (v7 >= 6)
        v8 = v5;
      else
        v8 = v6;
      if (*((_DWORD *)v8 + 7) <= 6u)
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    }
  }
  **(_DWORD **)(a1 + 56) = 4;
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v2);
}

void sub_1B5C83950(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5C83940);
}

__n128 __Block_byref_object_copy__175(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(__n128 *)(a1 + 40) = result;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__176(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

void ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_177(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  DSP_Host_OffloadDictionary *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  std::__shared_weak_count *v11[2];
  CFTypeRef cf;

  if (*(_DWORD *)(*(_QWORD *)(a1 + 56) + 4) == 1768845428)
  {
    v2 = HALS_Device::ClientDSPInfo::find(*(_QWORD *)(a1 + 48) + 616, *(_QWORD *)(a1 + 64));
    if (v2 && (v3 = v2, (v4 = (DSP_Host_OffloadDictionary *)v2[4]) != 0))
    {
      DSP_Host_OffloadDictionary::create_into(v4, *(const __CFDictionary ***)(a1 + 72));
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v3[4];
      **(_DWORD **)(a1 + 80) = 8;
      DSP_Host_OffloadDictionary::get_debug_string((DSP_Host_OffloadDictionary *)v11, v3[4]);
      v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v6 = v5 + 40;
      if (*(char *)(v5 + 63) < 0)
        operator delete(*(void **)v6);
      *(_OWORD *)v6 = *(_OWORD *)v11;
      *(_QWORD *)(v6 + 16) = cf;
    }
    else
    {
      v11[0] = 0;
      v11[1] = 0;
      cf = 0;
      DSP_Host_OffloadDictionary::make_empty((DSP_Host_OffloadDictionary *)v11);
      DSP_Host_OffloadDictionary::create_into((DSP_Host_OffloadDictionary *)v11, *(const __CFDictionary ***)(a1 + 72));
      **(_DWORD **)(a1 + 80) = 8;
      DSP_Host_OffloadDictionary::get_debug_string((DSP_Host_OffloadDictionary *)&v9, (uint64_t)v11);
      v7 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v8 = v7 + 40;
      if (*(char *)(v7 + 63) < 0)
        operator delete(*(void **)v8);
      *(_OWORD *)v8 = v9;
      *(_QWORD *)(v8 + 16) = v10;
      if (cf)
        CFRelease(cf);
      if (v11[1])
        std::__shared_weak_count::__release_weak(v11[1]);
    }
  }
}

void sub_1B5C83AC4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5C83AB0);
}

void ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_179(uint64_t a1)
{
  uint64_t v2;
  HALS_Device_HostedDSP *v3;
  const __CFDictionary *v4;
  std::__shared_weak_count *v5;
  CFTypeRef cf;

  v2 = *(_QWORD *)(a1 + 32);
  v4 = 0;
  v5 = 0;
  cf = 0;
  DSP_Host_OffloadDictionary::make_empty((DSP_Host_OffloadDictionary *)&v4);
  v3 = *(HALS_Device_HostedDSP **)(v2 + 608);
  if (v3)
    HALS_Device_HostedDSP::GetOffloadsAvailableForDevice(v3, *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4) == 1768845428, &v4);
  DSP_Host_OffloadDictionary::create_into((DSP_Host_OffloadDictionary *)&v4, *(const __CFDictionary ***)(a1 + 48));
  **(_DWORD **)(a1 + 56) = 8;
  if (cf)
    CFRelease(cf);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
}

void sub_1B5C83B84(void *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  DSP_Host_OffloadDictionary::~DSP_Host_OffloadDictionary((DSP_Host_OffloadDictionary *)va);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5C83B70);
}

__n128 __Block_byref_object_copy__257(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  if (*(_BYTE *)(a2 + 64))
  {
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    result = *(__n128 *)(a2 + 40);
    *(__n128 *)(a1 + 40) = result;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 56) = 0;
    *(_BYTE *)(a1 + 64) = 1;
  }
  return result;
}

void __Block_byref_object_dispose__258(uint64_t a1)
{
  void *v1;

  if (*(_BYTE *)(a1 + 64))
  {
    v1 = *(void **)(a1 + 40);
    if (v1)
    {
      *(_QWORD *)(a1 + 48) = v1;
      operator delete(v1);
    }
  }
}

void ___ZNK11HALS_Device35GetDSPVirtualChannelLayoutForClientEbP11HALS_Client_block_invoke(uint64_t a1)
{
  void *__p[3];
  char v3;

  HALS_Device::_GetDSPVirtualChannelLayoutForClient((uint64_t *)__p, *(_QWORD *)(a1 + 40), (HALS_Client *)*(unsigned __int8 *)(a1 + 56), *(_QWORD *)(a1 + 48));
  std::__optional_storage_base<CA::ChannelLayout,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<CA::ChannelLayout,false> const&>(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40, (uint64_t)__p);
  if (v3)
  {
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
}

void sub_1B5C83C60(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12)
{
  if (a12 && __p)
    operator delete(__p);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5C83C50);
}

uint64_t HALS_Device::_CreateIOContextDescription(HALS_Device *this, HALS_Client *a2)
{
  uint64_t v4;
  unsigned int v5;
  char *v6;
  os_unfair_lock_s *v7;
  uint64_t *mcp_object;
  std::__shared_weak_count *size;
  unint64_t *v11;
  unint64_t v12;
  int v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  std::string::size_type v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  __int128 v27;
  _QWORD *v28;
  CFTypeRef v29;
  __CFDictionary *MutableCopy;
  void **v31;
  CFIndex v32;
  CFStringRef v33;
  const void *v34;
  void **v35;
  CFIndex v36;
  CFStringRef v37;
  std::string::size_type v38;
  CFDictionaryRef CFDictionaryRef;
  CFArrayRef CFArray;
  CFNumberRef v41;
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::runtime_error *v48;
  std::runtime_error *v49;
  std::runtime_error *exception;
  void *v51;
  char v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  uint64_t v57;
  void *__p[2];
  int64_t v59;
  CFTypeRef cf;
  std::string v61;
  std::string v62;
  std::string v63;
  std::string v64;
  std::string valuePtr;
  std::string v66;
  std::string v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  if (!AMCP::Feature_Flags::run_hybrid_hal(this, (const BOOL *)a2))
    return (*(uint64_t (**)(HALS_Device *, HALS_Client *))(*(_QWORD *)this + 680))(this, a2);
  v53 = 0;
  v54 = 0;
  HALS_System::GetInstance(&v55, 0, &v53);
  v4 = *(_QWORD *)(v55 + 1392);
  v5 = *((_DWORD *)this + 4);
  v6 = (char *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 216))(this);
  std::string::basic_string[abi:ne180100]<0>(&v51, v6);
  v7 = (os_unfair_lock_s *)(v4 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 16));
  mcp_object = HALS_IOContext_Manager_Impl::Object_Map::find_mcp_object((HALS_IOContext_Manager_Impl::Object_Map *)(v4 + 40), v5);
  os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 16));
  if ((unint64_t)mcp_object >> 32)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(v4 + 16));
    AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v66, *(std::__shared_mutex_base **)(v4 + 120), mcp_object);
    if (v66.__r_.__value_.__r.__words[0])
      AMCP::Core::Core::get_simple_required_property<1969841184u>(&cf, (AMCP::Core::Core *)v66.__r_.__value_.__l.__data_);
    else
      cf = 0;
    size = (std::__shared_weak_count *)v66.__r_.__value_.__l.__size_;
    if (v66.__r_.__value_.__l.__size_)
    {
      v11 = (unint64_t *)(v66.__r_.__value_.__l.__size_ + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 16));
    if (a2)
      v13 = *((_DWORD *)a2 + 58);
    else
      v13 = 0;
    std::operator+<char>();
    v14 = std::string::append(&v63, "(", 1uLL);
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v64.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v62, v13);
    if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v62;
    else
      v16 = (std::string *)v62.__r_.__value_.__r.__words[0];
    if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v17 = HIBYTE(v62.__r_.__value_.__r.__words[2]);
    else
      v17 = v62.__r_.__value_.__l.__size_;
    v18 = std::string::append(&v64, (const std::string::value_type *)v16, v17);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v67.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    v20 = std::string::append(&v67, ":", 1uLL);
    v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    valuePtr.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&valuePtr.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v61, v5);
    if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v22 = &v61;
    else
      v22 = (std::string *)v61.__r_.__value_.__r.__words[0];
    if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v23 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
    else
      v23 = v61.__r_.__value_.__l.__size_;
    v24 = std::string::append(&valuePtr, (const std::string::value_type *)v22, v23);
    v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v66.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    v26 = std::string::append(&v66, ")", 1uLL);
    v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v59 = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v66.__r_.__value_.__l.__data_);
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v61.__r_.__value_.__l.__data_);
    if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0)
      operator delete(valuePtr.__r_.__value_.__l.__data_);
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v67.__r_.__value_.__l.__data_);
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v62.__r_.__value_.__l.__data_);
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v64.__r_.__value_.__l.__data_);
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v63.__r_.__value_.__l.__data_);
    os_unfair_lock_lock((os_unfair_lock_t)(v4 + 16));
    HALS_IOContext_Manager_Impl::get_graph_builder(&v62, v4 + 24, (uint64_t)a2);
    v28 = (_QWORD *)v62.__r_.__value_.__r.__words[0];
    v29 = cf;
    if (cf)
      CFRetain(cf);
    if ((*(unsigned int (**)(_QWORD, uint64_t *))(*(_QWORD *)*v28 + 48))(*v28, mcp_object))
    {
      (*(void (**)(std::string *__return_ptr, _QWORD, uint64_t *))(*(_QWORD *)*v28 + 88))(&v66, *v28, mcp_object);
      MutableCopy = CFDictionaryCreateMutableCopy(0, 0, (CFDictionaryRef)v66.__r_.__value_.__l.__data_);
      if (v66.__r_.__value_.__r.__words[0])
        CFRelease(v66.__r_.__value_.__l.__data_);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v66, "uid");
      if (v59 >= 0)
        v31 = __p;
      else
        v31 = (void **)__p[0];
      if (v59 >= 0)
        v32 = HIBYTE(v59);
      else
        v32 = (CFIndex)__p[1];
      v33 = CFStringCreateWithBytes(0, (const UInt8 *)v31, v32, 0x8000100u, 0);
      if (!v33)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      if (MutableCopy)
        CFDictionaryReplaceValue(MutableCopy, v66.__r_.__value_.__l.__data_, v33);
      CFRelease(v33);
      v34 = (const void *)v66.__r_.__value_.__r.__words[0];
      if (v66.__r_.__value_.__r.__words[0])
LABEL_89:
        CFRelease(v34);
    }
    else
    {
      MutableCopy = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v66, "uid");
      if (v59 >= 0)
        v35 = __p;
      else
        v35 = (void **)__p[0];
      if (v59 >= 0)
        v36 = HIBYTE(v59);
      else
        v36 = (CFIndex)__p[1];
      v37 = CFStringCreateWithBytes(0, (const UInt8 *)v35, v36, 0x8000100u, 0);
      if (!v37)
      {
        v49 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v49, "Could not construct");
        __cxa_throw(v49, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      mcp_applesauce::CF::Dictionary_Builder::add_value<applesauce::CF::StringRef,applesauce::CF::StringRef>(MutableCopy, v66.__r_.__value_.__l.__data_, v37);
      CFRelease(v37);
      if (v66.__r_.__value_.__r.__words[0])
        CFRelease(v66.__r_.__value_.__l.__data_);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v64, "subdevices");
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v63, "uid");
      v38 = v63.__r_.__value_.__r.__words[0];
      if (v63.__r_.__value_.__r.__words[0])
        CFRetain(v63.__r_.__value_.__l.__data_);
      v67.__r_.__value_.__r.__words[0] = v38;
      if (v29)
        CFRetain(v29);
      v67.__r_.__value_.__l.__size_ = (std::string::size_type)v29;
      valuePtr.__r_.__value_.__r.__words[0] = (std::string::size_type)&v67;
      valuePtr.__r_.__value_.__l.__size_ = 1;
      CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)&valuePtr);
      std::vector<void const*>::vector(&v66, 1uLL);
      *(_QWORD *)v66.__r_.__value_.__l.__data_ = CFDictionaryRef;
      CFArray = applesauce::CF::details::make_CFArrayRef<void const*>((const void **)v66.__r_.__value_.__l.__data_, v66.__r_.__value_.__l.__size_);
      if (v66.__r_.__value_.__r.__words[0])
      {
        v66.__r_.__value_.__l.__size_ = v66.__r_.__value_.__r.__words[0];
        operator delete(v66.__r_.__value_.__l.__data_);
      }
      mcp_applesauce::CF::Dictionary_Builder::add_value<applesauce::CF::StringRef,applesauce::CF::ArrayRef>(MutableCopy, v64.__r_.__value_.__l.__data_, CFArray);
      if (CFArray)
        CFRelease(CFArray);
      if (CFDictionaryRef)
        CFRelease(CFDictionaryRef);
      if (v67.__r_.__value_.__l.__size_)
        CFRelease((CFTypeRef)v67.__r_.__value_.__l.__size_);
      if (v67.__r_.__value_.__r.__words[0])
        CFRelease(v67.__r_.__value_.__l.__data_);
      if (v63.__r_.__value_.__r.__words[0])
        CFRelease(v63.__r_.__value_.__l.__data_);
      if (v64.__r_.__value_.__r.__words[0])
        CFRelease(v64.__r_.__value_.__l.__data_);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v66, "master");
      if (v29)
      {
        CFRetain(v29);
        mcp_applesauce::CF::Dictionary_Builder::add_value<applesauce::CF::StringRef,applesauce::CF::StringRef>(MutableCopy, v66.__r_.__value_.__l.__data_, v29);
        CFRelease(v29);
      }
      else
      {
        mcp_applesauce::CF::Dictionary_Builder::add_value<applesauce::CF::StringRef,applesauce::CF::StringRef>(MutableCopy, v66.__r_.__value_.__l.__data_, 0);
      }
      v34 = (const void *)v66.__r_.__value_.__r.__words[0];
      if (v66.__r_.__value_.__r.__words[0])
        goto LABEL_89;
    }
    if (v29)
      CFRelease(v29);
    std::unique_ptr<HALIO::HALIO_Graph_Builder>::reset[abi:ne180100]((uint64_t **)&v62);
    os_unfair_lock_unlock(v7);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v66, "device id");
    LODWORD(valuePtr.__r_.__value_.__l.__data_) = v5;
    v41 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (!v41)
    {
      v48 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v48, "Could not construct");
      __cxa_throw(v48, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    mcp_applesauce::CF::Dictionary_Builder::add_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(MutableCopy, v66.__r_.__value_.__l.__data_, v41);
    CFRelease(v41);
    if (v66.__r_.__value_.__r.__words[0])
      CFRelease(v66.__r_.__value_.__l.__data_);
    mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v57, MutableCopy);
    if (MutableCopy)
      CFRelease(MutableCopy);
    if (SHIBYTE(v59) < 0)
    {
      operator delete(__p[0]);
      if (!v29)
        goto LABEL_102;
    }
    else if (!v29)
    {
      goto LABEL_102;
    }
    CFRelease(v29);
    goto LABEL_102;
  }
  v57 = 0;
LABEL_102:
  if (v52 < 0)
    operator delete(v51);
  v42 = v56;
  if (v56)
  {
    p_shared_owners = (unint64_t *)&v56->__shared_owners_;
    do
      v44 = __ldaxr(p_shared_owners);
    while (__stlxr(v44 - 1, p_shared_owners));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = v54;
  if (v54)
  {
    v46 = (unint64_t *)&v54->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  return v57;
}

void sub_1B5C84454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,CFTypeRef cf,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,CFTypeRef a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,CFTypeRef a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  os_unfair_lock_s *v51;
  const void *v52;
  const void *v53;
  uint64_t v54;
  const void *v56;

  v56 = *(const void **)(v54 - 128);
  if (v56)
    CFRelease(v56);
  if (v53)
    CFRelease(v53);
  if (v52)
    CFRelease(v52);
  std::unique_ptr<HALIO::HALIO_Graph_Builder>::reset[abi:ne180100]((uint64_t **)&a34);
  os_unfair_lock_unlock(v51);
  if (a25 < 0)
    operator delete(__p);
  if (cf)
    CFRelease(cf);
  if (a14 < 0)
    operator delete(a9);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK11HALS_Device26CreateIOContextDescriptionEP11HALS_Client_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = HALS_Device::_CreateIOContextDescription(*(HALS_Device **)(a1 + 40), *(HALS_Client **)(a1 + 48));
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1B5C8479C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK11HALS_Device19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke(uint64_t a1)
{
  char v2;
  uint64_t v3;
  char v4;
  char v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned int *v9;
  int v10;
  HALS_Object *v11;
  HALS_Object *v12;
  int v13;
  int v14;
  uint64_t v15;
  unsigned int *v16;
  HALS_Object *v17;
  HALS_Object *v18;

  v2 = 0;
  v3 = *(_QWORD *)(a1 + 40);
  v4 = 1;
  do
  {
    v5 = v4;
    v6 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 384))(v3, v2 & 1);
    if (v6)
    {
      v7 = v6;
      v8 = 0;
      do
      {
        v9 = (unsigned int *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v3 + 392))(v3, v2 & 1, v8);
        v10 = (*(uint64_t (**)(uint64_t, unsigned int *, _QWORD))(*(_QWORD *)v3 + 608))(v3, v9, *(_QWORD *)(a1 + 48));
        if ((v10 & HALS_Object::IsObjectClassInClassIDList((HALS_Object *)*(unsigned int *)(a1 + 64), *(_QWORD *)(a1 + 56), v9, v11)) == 1)++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
        HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v9, v12);
        v8 = (v8 + 1);
      }
      while (v7 != (_DWORD)v8);
    }
    v4 = 0;
    v2 = 1;
  }
  while ((v5 & 1) != 0);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 656))(v3);
  if (v13)
  {
    v14 = v13;
    v15 = 0;
    do
    {
      v16 = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 664))(v3, v15);
      if (HALS_Object::IsObjectClassInClassIDList((HALS_Object *)*(unsigned int *)(a1 + 64), *(_QWORD *)(a1 + 56), v16, v17))++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
      HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v16, v18);
      v15 = (v15 + 1);
    }
    while (v14 != (_DWORD)v15);
  }
}

void sub_1B5C84910(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap *v2;

  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

void ___ZNK11HALS_Device19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_108(uint64_t a1, const BOOL *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  os_unfair_lock_s *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  HALS_Object *v17;
  HALS_ObjectMap *v18;
  char v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  v19 = 0;
  v3 = *(unsigned __int8 *)(a1 + 68);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(unsigned int *)(*(_QWORD *)(a1 + 56) + 8);
  v6 = *(unsigned int *)(a1 + 64);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  if (AMCP::Feature_Flags::run_hybrid_hal((AMCP::Feature_Flags *)a1, a2))
  {
    v20 = 0;
    v21 = 0;
    HALS_System::GetInstance(&v22, 0, &v20);
    v8 = (os_unfair_lock_s *)(*(_QWORD *)(v22 + 1392) + 16);
    os_unfair_lock_lock(v8);
    os_unfair_lock_unlock(v8);
    v9 = v23;
    if (v23)
    {
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = v21;
    if (v21)
    {
      v13 = (unint64_t *)&v21->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v15 = 0;
  }
  else
  {
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 400))(v4);
    v18 = (HALS_ObjectMap *)v16;
    if (v16)
      LOBYTE(v5) = (*(uint64_t (**)(uint64_t, BOOL, uint64_t, uint64_t, uint64_t, char *))(*(_QWORD *)v16 + 520))(v16, v3 != 0, v5, v6, v7 + 24, &v19);
    HALS_ObjectMap::ReleaseObject(v18, v17);
    v15 = (v18 != 0) & v5;
  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v15;
}

void sub_1B5C84A90(void *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  HALS_ObjectMap *v11;

  HALS_ObjectMap::ReleaseObject(v11, a2);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5C84A78);
}

const __CFNumber *OS::CF::Number::GetValue<unsigned long long>(const __CFNumber *result)
{
  uint64_t valuePtr;

  valuePtr = 0;
  if (result)
  {
    CFNumberGetValue(result, kCFNumberSInt64Type, &valuePtr);
    return (const __CFNumber *)valuePtr;
  }
  return result;
}

void HALS_Device::BasicControlList::~BasicControlList(HALS_ObjectMap ***this, HALS_Object *a2)
{
  HALS_ObjectMap **v3;
  HALS_ObjectMap **v4;

  v3 = *this;
  v4 = this[1];
  if (*this != v4)
  {
    do
      HALS_ObjectMap::ReleaseObject(*v3++, a2);
    while (v3 != v4);
    v3 = *this;
  }
  if (v3)
  {
    this[1] = v3;
    operator delete(v3);
  }
}

void HALS_Device::HALS_Device(HALS_Device *this, HALB_Info *a2, uint64_t a3, HALS_Object *a4, const __CFString *a5)
{
  int v7;
  HALS_Object *v9;
  int v10;
  CFStringRef *v11;
  CFStringRef v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  unsigned int *v17;
  int v18;
  const __CFString *v19;
  int v20;
  uint64_t v21;
  __CFString *v22;
  unsigned int *v23;
  int v24;
  char *v25;
  size_t v26;
  HALB_Mutex *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  const char *v33;
  _DWORD *exception;
  _QWORD v35[3];
  uint64_t *v36;
  _QWORD *v37;
  HALB_Mutex **v38;
  BOOL *v39;
  int v40;
  void *v41[2];
  char v42;
  _QWORD v43[2];
  uint64_t v44;
  _QWORD v45[10];
  char v46;
  uint64_t v47;
  _BYTE v48[24];
  uint64_t v49;
  char *v50;
  uint64_t v51;

  v7 = (int)a2;
  v51 = *MEMORY[0x1E0C80C00];
  if (HALB_Info::IsStandardClass(a2))
    v10 = v7;
  else
    v10 = 1633969526;
  HALS_Object::HALS_Object(this, v7, v10, a3, v9);
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 6) = (char *)this + 56;
  *((_BYTE *)this + 72) = 0;
  *(_QWORD *)this = off_1E699D3F8;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 12) = a4;
  v11 = (CFStringRef *)((char *)this + 96);
  *((_QWORD *)this + 11) = 0;
  *((_BYTE *)this + 104) = 1;
  v35[2] = (char *)this + 96;
  v12 = CFStringCreateWithFormat(0, 0, CFSTR("device.%@"), a4);
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 14) = v12;
  *((_BYTE *)this + 120) = 1;
  *((_BYTE *)this + 136) = 1;
  *((_QWORD *)this + 18) = 0x200000001;
  *((_DWORD *)this + 38) = -1;
  *((_QWORD *)this + 52) = 0;
  *((_QWORD *)this + 53) = 0;
  *((_BYTE *)this + 432) = 0;
  v35[1] = (char *)this + 128;
  v13 = operator new();
  *(_QWORD *)(v13 + 240) = 0;
  *(_OWORD *)(v13 + 208) = 0u;
  *(_OWORD *)(v13 + 224) = 0u;
  *(_OWORD *)(v13 + 176) = 0u;
  *(_OWORD *)(v13 + 192) = 0u;
  *(_OWORD *)(v13 + 144) = 0u;
  *(_OWORD *)(v13 + 160) = 0u;
  *(_OWORD *)(v13 + 112) = 0u;
  *(_OWORD *)(v13 + 128) = 0u;
  *(_OWORD *)(v13 + 80) = 0u;
  *(_OWORD *)(v13 + 96) = 0u;
  *(_OWORD *)(v13 + 48) = 0u;
  *(_OWORD *)(v13 + 64) = 0u;
  *(_OWORD *)(v13 + 16) = 0u;
  *(_OWORD *)(v13 + 32) = 0u;
  *(_OWORD *)v13 = 0u;
  std::__shared_mutex_base::__shared_mutex_base((std::__shared_mutex_base *)v13);
  *(_OWORD *)(v13 + 184) = 0u;
  *(_OWORD *)(v13 + 168) = 0u;
  *(_DWORD *)(v13 + 200) = 1065353216;
  *(_OWORD *)(v13 + 208) = 0u;
  *(_OWORD *)(v13 + 224) = 0u;
  *(_DWORD *)(v13 + 240) = 1065353216;
  *((_QWORD *)this + 55) = v13;
  *((_BYTE *)this + 448) = 0;
  *((_BYTE *)this + 452) = 0;
  *((_QWORD *)this + 57) = 0;
  *((_WORD *)this + 232) = 0;
  *((_DWORD *)this + 118) = 0;
  *((_OWORD *)this + 30) = 0u;
  *((_OWORD *)this + 31) = 0u;
  *((_DWORD *)this + 128) = 1065353216;
  *((_BYTE *)this + 520) = 0;
  *((_OWORD *)this + 35) = 0u;
  *((_OWORD *)this + 36) = 0u;
  *((_OWORD *)this + 33) = 0u;
  *((_OWORD *)this + 34) = 0u;
  v36 = (uint64_t *)((char *)this + 528);
  *(_OWORD *)((char *)this + 588) = 0u;
  v14 = operator new();
  *(_QWORD *)v14 = this;
  *(_BYTE *)(v14 + 8) = 0;
  *(_BYTE *)(v14 + 32) = 0;
  *(_BYTE *)(v14 + 40) = 0;
  *(_BYTE *)(v14 + 44) = 0;
  *((_QWORD *)this + 76) = v14;
  v38 = (HALB_Mutex **)((char *)this + 80);
  v39 = (BOOL *)this + 616;
  *((_BYTE *)this + 616) = 0;
  *((_OWORD *)this + 39) = 0u;
  *((_OWORD *)this + 40) = 0u;
  *((_DWORD *)this + 164) = 1065353216;
  *((_QWORD *)this + 88) = 0;
  *((_QWORD *)this + 90) = 0;
  *((_QWORD *)this + 89) = 0;
  *((_WORD *)this + 348) = 0;
  *(_OWORD *)((char *)this + 664) = 0u;
  *(_OWORD *)((char *)this + 680) = 0u;
  *((_QWORD *)this + 91) = 850045863;
  *((_OWORD *)this + 46) = 0u;
  *((_OWORD *)this + 47) = 0u;
  *((_OWORD *)this + 48) = 0u;
  *((_OWORD *)this + 49) = 0u;
  *((_OWORD *)this + 50) = 0u;
  *((_QWORD *)this + 102) = 850045863;
  *(_OWORD *)((char *)this + 824) = 0u;
  *(_OWORD *)((char *)this + 840) = 0u;
  *(_OWORD *)((char *)this + 856) = 0u;
  *(_OWORD *)((char *)this + 872) = 0u;
  *(_OWORD *)((char *)this + 888) = 0u;
  *((_QWORD *)this + 113) = 850045863;
  *((_OWORD *)this + 57) = 0u;
  *((_OWORD *)this + 58) = 0u;
  *((_OWORD *)this + 59) = 0u;
  *((_OWORD *)this + 60) = 0u;
  *((_QWORD *)this + 122) = dispatch_semaphore_create(0);
  *((_QWORD *)this + 128) = 0;
  *((_QWORD *)this + 130) = 0;
  *((_QWORD *)this + 129) = 0;
  *(_OWORD *)((char *)this + 984) = 0u;
  *(_OWORD *)((char *)this + 1000) = 0u;
  *((_WORD *)this + 508) = 0;
  *((_QWORD *)this + 131) = 850045863;
  *((_OWORD *)this + 66) = 0u;
  *((_OWORD *)this + 67) = 0u;
  *((_OWORD *)this + 68) = 0u;
  *((_OWORD *)this + 69) = 0u;
  *((_OWORD *)this + 70) = 0u;
  *((_QWORD *)this + 142) = 850045863;
  *(_OWORD *)((char *)this + 1144) = 0u;
  *(_OWORD *)((char *)this + 1160) = 0u;
  *(_OWORD *)((char *)this + 1176) = 0u;
  *(_OWORD *)((char *)this + 1192) = 0u;
  *(_OWORD *)((char *)this + 1208) = 0u;
  *((_QWORD *)this + 153) = 850045863;
  *((_OWORD *)this + 77) = 0u;
  *((_OWORD *)this + 78) = 0u;
  *((_OWORD *)this + 79) = 0u;
  *((_OWORD *)this + 80) = 0u;
  *((_QWORD *)this + 162) = dispatch_semaphore_create(0);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v43);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)"HALS_Device Server High Priority Queue ", 39);
  std::ostream::operator<<();
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(v41, (uint64_t)v45);
  if (v42 >= 0)
    v15 = (char *)v41;
  else
    v15 = (char *)v41[0];
  AMCP::Utility::Dispatch_Queue::Dispatch_Queue((uint64_t)v48, v15);
  AMCP::Utility::Dispatch_Queue::operator=((NSObject **)this + 83, *(dispatch_object_t *)v48);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v48);
  if (v42 < 0)
    operator delete(v41[0]);
  std::string::basic_string[abi:ne180100]<0>(v48, "");
  std::stringbuf::str[abi:ne180100]((uint64_t)v45, (__int128 *)v48);
  if ((v48[23] & 0x80000000) != 0)
    operator delete(*(void **)v48);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)"HALS_Device Server Default Priority Queue ", 42);
  std::ostream::operator<<();
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(v41, (uint64_t)v45);
  if (v42 >= 0)
    v16 = (char *)v41;
  else
    v16 = (char *)v41[0];
  AMCP::Utility::Dispatch_Queue::Dispatch_Queue((uint64_t)v48, v16);
  AMCP::Utility::Dispatch_Queue::operator=((NSObject **)this + 123, *(dispatch_object_t *)v48);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v48);
  if (v42 < 0)
    operator delete(v41[0]);
  if (v7 <= 1701078389)
  {
    if (v7 == 1633773415)
      goto LABEL_23;
    v18 = 1633969526;
  }
  else
  {
    if (v7 == 1701078390 || v7 == 1701733488)
      goto LABEL_23;
    v18 = 1919182198;
  }
  if (v7 != v18)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
LABEL_35:
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69A1B30;
      exception[2] = 1852797029;
    }
    *(_DWORD *)v48 = 136315394;
    *(_QWORD *)&v48[4] = "HALS_Device.cpp";
    *(_WORD *)&v48[12] = 1024;
    *(_DWORD *)&v48[14] = 105;
    v32 = MEMORY[0x1E0C81028];
    v33 = "%25s:%-5d  HALS_Device::HALS_Device: trying to instantiate a non-device class as a device";
LABEL_34:
    _os_log_impl(&dword_1B57BA000, v32, OS_LOG_TYPE_ERROR, v33, v48, 0x12u);
    goto LABEL_35;
  }
LABEL_23:
  v19 = *v11;
  if (!*v11)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_35;
    *(_DWORD *)v48 = 136315394;
    *(_QWORD *)&v48[4] = "HALS_Device.cpp";
    *(_WORD *)&v48[12] = 1024;
    *(_DWORD *)&v48[14] = 106;
    v32 = MEMORY[0x1E0C81028];
    v33 = "%25s:%-5d  HALS_Device::HALS_Device: all devices have to have a UID";
    goto LABEL_34;
  }
  LODWORD(v41[0]) = 256;
  CACFString::GetCString(v19, (__CFString *)((char *)this + 156), (char *)v41, v17);
  v37 = v45;
  if (*v11)
    v20 = CFStringGetLength(*v11) + 1;
  else
    v20 = 1;
  v40 = v20;
  MEMORY[0x1E0C80A78]();
  v22 = (__CFString *)((char *)v35 - ((v21 + 15) & 0x1FFFFFFF0));
  CACFString::GetCString(*v11, v22, (char *)&v40, v23);
  v24 = v40;
  v25 = (char *)operator new[]();
  v26 = (v24 + 30);
  snprintf(v25, v26, "com.apple.audio.device.%s", (const char *)v22);
  v27 = (HALB_Mutex *)operator new();
  HALB_Mutex::HALB_Mutex(v27);
  *v38 = v27;
  snprintf(v25, v26, "com.apple.audio.device.%s.event", (const char *)v22);
  v28 = operator new();
  *((_QWORD *)this + 11) = AMCP::Utility::Dispatch_Queue::Dispatch_Queue(v28, v25);
  v29 = *((_QWORD *)this + 66);
  if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 68) - v29) >> 4) <= 0x1F)
  {
    v30 = *((_QWORD *)this + 67);
    v50 = (char *)this + 544;
    *(_QWORD *)v48 = operator new(0x600uLL);
    *(_QWORD *)&v48[8] = *(_QWORD *)v48 + v30 - v29;
    *(_QWORD *)&v48[16] = *(_QWORD *)&v48[8];
    v49 = *(_QWORD *)v48 + 1536;
    std::vector<HALS_Device::ClientInfo>::__swap_out_circular_buffer(v36, v48);
    std::__split_buffer<HALS_Device::ClientInfo>::~__split_buffer((uint64_t)v48);
  }
  *v39 = v7 == 1633773415;
  MEMORY[0x1B5E50664](v25, 0x1000C8077774924);
  v43[0] = *MEMORY[0x1E0DE4F50];
  v31 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v43 + *(_QWORD *)(v43[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v44 = v31;
  v45[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v46 < 0)
    operator delete((void *)v45[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1B5E50598](&v47);
}

void sub_1B5C852E8(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  AMCP::Utility::Dispatch_Queue *v4;
  AMCP::Utility::Dispatch_Queue *v5;
  uint64_t v7;
  uint64_t v8;

  std::__split_buffer<HALS_Device::ClientInfo>::~__split_buffer(v1 + 368);
  MEMORY[0x1B5E50664](v3, 0x1000C8077774924);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(v1 + 88);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue(v5);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue(v4);
  HALS_Device::ClientDSPInfo::~ClientDSPInfo(*(HALS_Device::ClientDSPInfo **)(v1 + 48));
  v7 = v2[76];
  v2[76] = 0;
  if (v7)
    std::default_delete<HALS_Device_HostedDSP>::operator()[abi:ne180100](v7);
  std::deque<HALS_Device::DuckHistoryItem>::~deque[abi:ne180100]((uint64_t)(v2 + 69));
  *(_QWORD *)(v1 + 88) = *(_QWORD *)(v1 + 24);
  std::vector<HALS_Device::ClientInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)(v1 + 88));
  std::__hash_table<std::__hash_value_type<unsigned int,std::string>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::string>>>::~__hash_table((uint64_t)(v2 + 60));
  CACFDictionary::~CACFDictionary((CACFDictionary *)(v2 + 57));
  v8 = v2[55];
  v2[55] = 0;
  if (v8)
    std::default_delete<HALS_ReferenceStreamStateManager>::operator()[abi:ne180100](v8);
  CACFString::~CACFString(*(CACFString **)(v1 + 8));
  CACFString::~CACFString((CACFString *)(v2 + 14));
  CACFString::~CACFString(*(CACFString **)(v1 + 16));
  HALS_IODevice::~HALS_IODevice((HALS_IODevice *)v2);
  _Unwind_Resume(a1);
}

void HALS_Device::ClientDSPInfo::~ClientDSPInfo(HALS_Device::ClientDSPInfo *this)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  _BOOL8 v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  NSObject *v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  _opaque_pthread_t *v15;
  mach_port_t v16;
  _opaque_pthread_t *v17;
  mach_port_t v18;
  NSObject **v19;
  _BYTE v20[10];
  __int16 v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  AMCP::Log::Scope_Registry::get(this);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v19, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v20;
  v3 = *v19;
  if (*(_QWORD *)v20)
  {
    v4 = (unint64_t *)(*(_QWORD *)v20 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG);
  if (v6)
  {
    v15 = pthread_self();
    v16 = pthread_mach_thread_np(v15);
    LODWORD(v19) = 67109634;
    HIDWORD(v19) = v16;
    *(_WORD *)v20 = 2080;
    *(_QWORD *)&v20[2] = "HALS_Device.cpp";
    v21 = 1024;
    v22 = 5018;
    _os_log_debug_impl(&dword_1B57BA000, v3, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d HALS_Device::ClientDSPInfo::~ClientDSPInfo() - poof!", (uint8_t *)&v19, 0x18u);
  }
  v7 = (_QWORD *)((char *)this + 24);
  while (1)
  {
    v7 = (_QWORD *)*v7;
    if (!v7)
      break;
    if (v7[6] | v7[11])
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v6);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v19, "com.apple.coreaudio", "AMCP");
      v8 = *(std::__shared_weak_count **)v20;
      v9 = *v19;
      if (*(_QWORD *)v20)
      {
        v10 = (unint64_t *)(*(_QWORD *)v20 + 8);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        v17 = pthread_self();
        v18 = pthread_mach_thread_np(v17);
        LODWORD(v19) = 67109634;
        HIDWORD(v19) = v18;
        *(_WORD *)v20 = 2080;
        *(_QWORD *)&v20[2] = "HALS_Device.cpp";
        v21 = 1024;
        v22 = 5023;
        _os_log_error_impl(&dword_1B57BA000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d HALS_DSPStreams abandoned during destruction of HALS_Device.", (uint8_t *)&v19, 0x18u);
      }
      break;
    }
  }
  v12 = (_QWORD *)*((_QWORD *)this + 3);
  if (v12)
  {
    do
    {
      v13 = (_QWORD *)*v12;
      std::__destroy_at[abi:ne180100]<std::pair<unsigned int const,HALS_Device::PerClientDSPInfo>,0>((uint64_t)(v12 + 2));
      operator delete(v12);
      v12 = v13;
    }
    while (v13);
  }
  v14 = (void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v14)
    operator delete(v14);
}

void sub_1B5C85690(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::default_delete<HALS_Device_HostedDSP>::operator()[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 32))
  {
    if (*(char *)(a1 + 31) < 0)
      operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x1B5E50688);
}

uint64_t std::deque<HALS_Device::DuckHistoryItem>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 64;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 128;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<HALS_Device::ClientInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 48;
        CACFDictionary::~CACFDictionary((CACFDictionary *)(v4 - 40));
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::default_delete<HALS_ReferenceStreamStateManager>::operator()[abi:ne180100](uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table(a1 + 208);
  std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table(a1 + 168);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 112));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 64));
  std::mutex::~mutex((std::mutex *)a1);
  JUMPOUT(0x1B5E50688);
}

void HALS_Device::~HALS_Device(HALS_Device *this)
{
  HALB_Mutex *v2;
  AMCP::Utility::Dispatch_Queue *v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;

  *(_QWORD *)this = off_1E699D3F8;
  v2 = (HALB_Mutex *)*((_QWORD *)this + 10);
  if (v2)
  {
    HALB_Mutex::~HALB_Mutex(v2);
    MEMORY[0x1B5E50688]();
  }
  v3 = (AMCP::Utility::Dispatch_Queue *)*((_QWORD *)this + 11);
  if (v3)
  {
    AMCP::Utility::Dispatch_Queue::~Dispatch_Queue(v3);
    MEMORY[0x1B5E50688]();
  }
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((HALS_Device *)((char *)this + 984));
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((HALS_Device *)((char *)this + 664));
  HALS_Device::ClientDSPInfo::~ClientDSPInfo((HALS_Device *)((char *)this + 616));
  v4 = *((_QWORD *)this + 76);
  *((_QWORD *)this + 76) = 0;
  if (v4)
    std::default_delete<HALS_Device_HostedDSP>::operator()[abi:ne180100](v4);
  std::deque<HALS_Device::DuckHistoryItem>::~deque[abi:ne180100]((uint64_t)this + 552);
  v6 = (void **)((char *)this + 528);
  std::vector<HALS_Device::ClientInfo>::__destroy_vector::operator()[abi:ne180100](&v6);
  std::__hash_table<std::__hash_value_type<unsigned int,std::string>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::string>>>::~__hash_table((uint64_t)this + 480);
  CACFDictionary::~CACFDictionary((HALS_Device *)((char *)this + 456));
  v5 = *((_QWORD *)this + 55);
  *((_QWORD *)this + 55) = 0;
  if (v5)
    std::default_delete<HALS_ReferenceStreamStateManager>::operator()[abi:ne180100](v5);
  CACFString::~CACFString((HALS_Device *)((char *)this + 128));
  CACFString::~CACFString((HALS_Device *)((char *)this + 112));
  CACFString::~CACFString((HALS_Device *)((char *)this + 96));
  *(_QWORD *)this = off_1E699F680;
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*((_QWORD **)this + 7));
  HALS_Object::~HALS_Object(this);
}

void HALS_Device::CopyStreamList(uint64_t a1, char a2, char **a3)
{
  HALB_Mutex *v4;
  char *v5;
  _BYTE *v6;
  size_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  void **v15;
  char *v16;
  char *v17;
  size_t v18;
  unint64_t v19;
  char *v20;
  void *v21;
  char *v22;
  _QWORD v23[6];
  char v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  __n128 (*v28)(_QWORD *, uint64_t);
  void (*v29)(uint64_t);
  void *__p;
  void *v31;
  uint64_t v32;

  v25 = 0;
  v26 = &v25;
  v27 = 0x4002000000;
  v28 = __Block_byref_object_copy__14450;
  v29 = __Block_byref_object_dispose__14451;
  v31 = 0;
  v32 = 0;
  __p = 0;
  v23[0] = MEMORY[0x1E0C809B0];
  v23[1] = 0x40000000;
  v23[2] = ___ZNK11HALS_Device14CopyStreamListEbRNSt3__16vectorIP11HALS_StreamNS0_9allocatorIS3_EEEE_block_invoke;
  v23[3] = &unk_1E699D8D0;
  v24 = a2;
  v23[4] = &v25;
  v23[5] = a1;
  v4 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  HALB_CommandGate::ExecuteCommand(v4, (uint64_t)v23);
  if (v26 + 5 == (uint64_t *)a3)
    goto LABEL_24;
  v5 = (char *)v26[5];
  v6 = (_BYTE *)v26[6];
  v7 = v6 - v5;
  v8 = (v6 - v5) >> 3;
  v9 = (uint64_t)a3[2];
  v10 = *a3;
  if (v8 > (v9 - (uint64_t)*a3) >> 3)
  {
    if (v10)
    {
      a3[1] = v10;
      operator delete(v10);
      v9 = 0;
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
    }
    if ((v7 & 0x8000000000000000) != 0)
      goto LABEL_27;
    v11 = v9 >> 2;
    if (v9 >> 2 <= v8)
      v11 = (v6 - v5) >> 3;
    v12 = (unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v11;
    if (v12 >> 61)
LABEL_27:
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v12);
    v10 = v13;
    *a3 = v13;
    a3[1] = v13;
    a3[2] = &v13[8 * v14];
    if (v6 != v5)
      memmove(v13, v5, v6 - v5);
    v15 = (void **)(a3 + 1);
    goto LABEL_23;
  }
  v17 = a3[1];
  v15 = (void **)(a3 + 1);
  v16 = v17;
  v18 = v17 - v10;
  v19 = (v17 - v10) >> 3;
  if (v19 < v8)
  {
    v20 = &v5[8 * v19];
    if (v16 != v10)
    {
      memmove(v10, v5, v18);
      v10 = (char *)*v15;
    }
    v7 = v6 - v20;
    if (v6 == v20)
      goto LABEL_23;
    v21 = v10;
    v22 = v20;
    goto LABEL_22;
  }
  if (v6 != v5)
  {
    v21 = v10;
    v22 = (char *)v26[5];
LABEL_22:
    memmove(v21, v22, v7);
  }
LABEL_23:
  *v15 = &v10[v7];
LABEL_24:
  _Block_object_dispose(&v25, 8);
  if (__p)
  {
    v31 = __p;
    operator delete(__p);
  }
}

void sub_1B5C85B54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  _Block_object_dispose(&a17, 8);
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__14450(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__14451(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

uint64_t ___ZNK11HALS_Device14CopyStreamListEbRNSt3__16vectorIP11HALS_StreamNS0_9allocatorIS3_EEEE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 560))(*(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
}

void sub_1B5C85BE8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t HALS_Device::GetHogModeOwner(HALS_Device *this)
{
  HALB_Mutex *v1;
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v8 = -1;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK11HALS_Device15GetHogModeOwnerEv_block_invoke;
  v4[3] = &unk_1E699D7B8;
  v4[4] = &v5;
  v4[5] = this;
  v1 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v1, (uint64_t)v4);
  v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1B5C85C8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK11HALS_Device15GetHogModeOwnerEv_block_invoke(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *(_DWORD *)(*(_QWORD *)(result + 40) + 152);
  return result;
}

void ___ZNK11HALS_Device22CopyDSPStreamForClientEbj_block_invoke(uint64_t a1)
{
  uint64_t *v2;
  HALS_Object *v3;
  uint64_t v4;
  uint64_t v5;
  HALS_ObjectMap *v6;

  v2 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>((_QWORD *)(*(_QWORD *)(a1 + 40) + 624), *(_DWORD *)(a1 + 48));
  if (v2)
  {
    v4 = 6;
    if (!*(_BYTE *)(a1 + 52))
      v4 = 11;
    v5 = v2[v4];
  }
  else
  {
    v5 = 0;
  }
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v5;
  v6 = *(HALS_ObjectMap **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  if (v6)
    HALS_ObjectMap::RetainObject(v6, v3);
}

void sub_1B5C85D28(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t HALS_Device::GetTotalNumberChannels(HALS_Device *this, char a2)
{
  HALB_Mutex *v2;
  uint64_t v3;
  _QWORD v5[6];
  char v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2000000000;
  v10 = 0;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZNK11HALS_Device22GetTotalNumberChannelsEb_block_invoke;
  v5[3] = &unk_1E699D880;
  v5[4] = &v7;
  v5[5] = this;
  v6 = a2;
  v2 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v5);
  v3 = *((unsigned int *)v8 + 6);
  _Block_object_dispose(&v7, 8);
  return v3;
}

void sub_1B5C85DD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK11HALS_Device22GetTotalNumberChannelsEb_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 40) + 552))(*(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1B5C85E24(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t HALS_Device::AreAllStreamsMixable(HALS_Device *this, char a2)
{
  HALS_Object *v2;
  HALS_Stream **v3;
  char *v4;
  uint64_t v5;
  AudioStreamBasicDescription v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v8 = 0;
  v9 = 0;
  v10 = 0;
  HALS_Device::CopyStreamList((uint64_t)this, a2, &v8);
  v3 = (HALS_Stream **)v8;
  v4 = v9;
  if (v8 == v9)
  {
LABEL_5:
    v5 = 1;
  }
  else
  {
    while (1)
    {
      HALS_Stream::GetCurrentVirtualFormat(*v3, &v7);
      if (v7.mFormatID != 1819304813 || (v7.mFormatFlags & 0x40) != 0)
        break;
      if (++v3 == (HALS_Stream **)v4)
        goto LABEL_5;
    }
    v5 = 0;
  }
  HALS_ArrayReleaser<HALS_Stream>::~HALS_ArrayReleaser((HALS_ObjectMap ***)&v8, v2);
  return v5;
}

void sub_1B5C85ED4(_Unwind_Exception *a1, HALS_Object *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  HALS_ArrayReleaser<HALS_Stream>::~HALS_ArrayReleaser((HALS_ObjectMap ***)va, a2);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__54_14483(uint64_t result, uint64_t a2)
{
  int v2;

  v2 = *(_DWORD *)(a2 + 40);
  *(_BYTE *)(result + 44) = *(_BYTE *)(a2 + 44);
  *(_DWORD *)(result + 40) = v2;
  return result;
}

void ___ZNK11HALS_Device39GetClientChannelCountFromDSPDescriptionEv_block_invoke(uint64_t a1)
{
  uint64_t v2;
  const __CFDictionary *v3;
  uint64_t v4;
  void *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  CFTypeRef cf;
  int v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(const __CFDictionary **)(v2 + 456);
  if (v3 && CFDictionaryContainsKey(v3, CFSTR("client channel count")))
  {
    HALS_DSPSettings::FromDictionary((HALS_DSPSettings *)&v5, *(const __CFDictionary **)(v2 + 456));
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    *(_DWORD *)(v4 + 40) = v10;
    *(_BYTE *)(v4 + 44) = 1;
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v13);
    if (__p)
    {
      v12 = __p;
      operator delete(__p);
    }
    if (cf)
      CFRelease(cf);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v8);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v7);
    if (v6 < 0)
      operator delete(v5);
  }
}

uint64_t HALS_Device::GetStreamDSPLatency(HALS_Device *this, const BOOL *a2)
{
  uint64_t v4;
  HALS_Object *v5;
  HALS_ObjectMap *v6;
  int v7;
  uint64_t v8;
  unsigned int v9;

  if ((AMCP::Feature_Flags::run_hybrid_hal(this, a2) & 1) != 0)
    return 0;
  v6 = (HALS_ObjectMap *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 400))(this);
  if (v6
    && (v7 = (*(uint64_t (**)(HALS_Device *, const BOOL *, _QWORD))(*(_QWORD *)this + 536))(this, a2, 0)) != 0)
  {
    v8 = 0;
    LODWORD(v4) = 0;
    do
    {
      v9 = (*(uint64_t (**)(HALS_ObjectMap *, const BOOL *, uint64_t))(*(_QWORD *)v6 + 504))(v6, a2, v8);
      if (v4 <= v9)
        v4 = v9;
      else
        v4 = v4;
      v8 = (v8 + 1);
    }
    while (v7 != (_DWORD)v8);
  }
  else
  {
    v4 = 0;
  }
  HALS_ObjectMap::ReleaseObject(v6, v5);
  return v4;
}

void sub_1B5C86078(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap *v2;

  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<HALS_Device::SetReferenceStreamStateForClient(unsigned int,BOOL)::$_1,std::allocator<HALS_Device::SetReferenceStreamStateForClient(unsigned int,BOOL)::$_1>,void ()(void)>::~__func(uint64_t a1, HALS_Object *a2)
{
  *(_QWORD *)a1 = &off_1E699E5E8;
  HALS_ObjectMap::ReleaseObject(*(HALS_ObjectMap **)(a1 + 24), a2);
  return a1;
}

void std::__function::__func<HALS_Device::SetReferenceStreamStateForClient(unsigned int,BOOL)::$_1,std::allocator<HALS_Device::SetReferenceStreamStateForClient(unsigned int,BOOL)::$_1>,void ()(void)>::~__func(uint64_t a1, HALS_Object *a2)
{
  *(_QWORD *)a1 = &off_1E699E5E8;
  HALS_ObjectMap::ReleaseObject(*(HALS_ObjectMap **)(a1 + 24), a2);
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<HALS_Device::SetReferenceStreamStateForClient(unsigned int,BOOL)::$_1,std::allocator<HALS_Device::SetReferenceStreamStateForClient(unsigned int,BOOL)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  HALS_ObjectMap *v4;
  HALS_Object *v5;

  v2 = operator new(0x28uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *v2 = &off_1E699E5E8;
  v2[1] = v3;
  *((_DWORD *)v2 + 4) = *(_DWORD *)(a1 + 16);
  v4 = *(HALS_ObjectMap **)(a1 + 24);
  v2[3] = v4;
  HALS_ObjectMap::RetainObject(v4, v5);
  *((_BYTE *)v2 + 32) = *(_BYTE *)(a1 + 32);
  return v2;
}

void sub_1B5C86170(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<HALS_Device::SetReferenceStreamStateForClient(unsigned int,BOOL)::$_1,std::allocator<HALS_Device::SetReferenceStreamStateForClient(unsigned int,BOOL)::$_1>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  HALS_ObjectMap *v5;

  *(_QWORD *)a2 = &off_1E699E5E8;
  v4 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(a1 + 16);
  *(_QWORD *)(a2 + 8) = v4;
  v5 = *(HALS_ObjectMap **)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v5;
  HALS_ObjectMap::RetainObject(v5, (HALS_Object *)a2);
  *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 32);
}

void std::__function::__func<HALS_Device::SetReferenceStreamStateForClient(unsigned int,BOOL)::$_1,std::allocator<HALS_Device::SetReferenceStreamStateForClient(unsigned int,BOOL)::$_1>,void ()(void)>::destroy(uint64_t a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(*(HALS_ObjectMap **)(a1 + 24), a2);
}

void std::__function::__func<HALS_Device::SetReferenceStreamStateForClient(unsigned int,BOOL)::$_1,std::allocator<HALS_Device::SetReferenceStreamStateForClient(unsigned int,BOOL)::$_1>,void ()(void)>::destroy_deallocate(HALS_ObjectMap **a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(a1[3], a2);
  operator delete(a1);
}

void std::__function::__func<HALS_Device::SetReferenceStreamStateForClient(unsigned int,BOOL)::$_1,std::allocator<HALS_Device::SetReferenceStreamStateForClient(unsigned int,BOOL)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  unsigned int *v2;
  const AudioObjectPropertyAddress *v3;
  uint64_t v4;
  _OWORD v5[2];
  _OWORD v6[2];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = *(unsigned int **)(a1 + 8);
  (*(void (**)(unsigned int *, _QWORD, _QWORD))(*(_QWORD *)v2 + 936))(v2, 0, *(unsigned int *)(a1 + 16));
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    v6[0] = xmmword_1B5D63BB4;
    *(_OWORD *)((char *)v6 + 12) = *(__int128 *)((char *)&xmmword_1B5D63BB4 + 12);
    v5[0] = *(_OWORD *)"#mtsbolg";
    v5[1] = *(_OWORD *)"tpni";
    HALS_NotificationManager::PropertiesChanged((HALS_NotificationManager *)v2[4], *(unsigned int *)(v4 + 16), 5, (const AudioObjectPropertyAddress *)v5, v3);
  }
}

uint64_t std::__function::__func<HALS_Device::SetReferenceStreamStateForClient(unsigned int,BOOL)::$_1,std::allocator<HALS_Device::SetReferenceStreamStateForClient(unsigned int,BOOL)::$_1>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN11HALS_Device32SetReferenceStreamStateForClientEjbE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_Device::SetReferenceStreamStateForClient(unsigned int,BOOL)::$_1,std::allocator<HALS_Device::SetReferenceStreamStateForClient(unsigned int,BOOL)::$_1>,void ()(void)>::target_type()
{
}

void std::__function::__func<HALS_Device::SetReferenceStreamStateForClient(unsigned int,BOOL)::$_0,std::allocator<HALS_Device::SetReferenceStreamStateForClient(unsigned int,BOOL)::$_0>,void ()(HALS_Client *,BOOL)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<HALS_Device::SetReferenceStreamStateForClient(unsigned int,BOOL)::$_0,std::allocator<HALS_Device::SetReferenceStreamStateForClient(unsigned int,BOOL)::$_0>,void ()(HALS_Client *,BOOL)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E699E558;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<HALS_Device::SetReferenceStreamStateForClient(unsigned int,BOOL)::$_0,std::allocator<HALS_Device::SetReferenceStreamStateForClient(unsigned int,BOOL)::$_0>,void ()(HALS_Client *,BOOL)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E699E558;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<HALS_Device::SetReferenceStreamStateForClient(unsigned int,BOOL)::$_0,std::allocator<HALS_Device::SetReferenceStreamStateForClient(unsigned int,BOOL)::$_0>,void ()(HALS_Client *,BOOL)>::operator()(uint64_t a1, _QWORD *a2, unsigned __int8 *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 64);
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v3 + 16))(v3, *a2, *a3);
}

uint64_t std::__function::__func<HALS_Device::SetReferenceStreamStateForClient(unsigned int,BOOL)::$_0,std::allocator<HALS_Device::SetReferenceStreamStateForClient(unsigned int,BOOL)::$_0>,void ()(HALS_Client *,BOOL)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN11HALS_Device32SetReferenceStreamStateForClientEjbE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_Device::SetReferenceStreamStateForClient(unsigned int,BOOL)::$_0,std::allocator<HALS_Device::SetReferenceStreamStateForClient(unsigned int,BOOL)::$_0>,void ()(HALS_Client *,BOOL)>::target_type()
{
}

uint64_t ___ZN11HALS_Device10ClientDiedEP11HALS_Client_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 40) + 824))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1B5C86428(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void HALS_Device::UpdateInternalIOContext(HALS_Device *this)
{
  AMCP::Feature_Flags *v2;
  const BOOL *v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  os_unfair_lock_s *v10;
  unsigned int v11;
  unsigned int v12;
  const void *v13;
  char v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  CFTypeRef v22;
  HALB_Mutex *v23;
  HALS_ObjectMap *v24;
  unsigned int *v25;
  HALS_Object *v26;
  HALS_ObjectMap *v27;
  uint64_t v28;
  _QWORD v29[7];
  CFTypeRef v30;
  __int16 v31;
  CFTypeRef cf;
  CFTypeRef *p_cf;
  uint64_t v34;
  char v35;
  void *__p;
  void **p_p;
  uint64_t v38;
  int v39;
  CFTypeRef v40;
  __int16 v41;
  const __CFString *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  int v48;
  CFTypeRef v49;

  v2 = (AMCP::Feature_Flags *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 832))(this);
  if ((_DWORD)v2)
  {
    if (AMCP::Feature_Flags::run_hybrid_hal(v2, v3))
    {
      v45 = 0;
      v46 = 0;
      HALS_System::GetInstance(&cf, 0, &v45);
      HALS_IOContext_Manager::create_stream_info_for_device((HALS_IOContext_Manager *)&__p, *((os_unfair_lock_s **)cf + 174), this);
      v4 = (std::__shared_weak_count *)p_cf;
      if (p_cf)
      {
        v5 = (unint64_t *)(p_cf + 1);
        do
          v6 = __ldaxr(v5);
        while (__stlxr(v6 - 1, v5));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      v7 = v46;
      if (v46)
      {
        p_shared_owners = (unint64_t *)&v46->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v43 = 0;
      v44 = 0;
      HALS_System::GetInstance(&cf, 0, &v43);
      v10 = (os_unfair_lock_s *)*((_QWORD *)cf + 174);
      v11 = *((_DWORD *)this + 4);
      v12 = *((_DWORD *)this + 7);
      v13 = (const void *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 208))(this);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v42, v13);
      v14 = (*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 224))(this);
      HALS_IOContext_Manager::device_arrived(v10, v11, v12, &v42, (uint64_t)&__p, v14 ^ 1);
      if (v42)
        CFRelease(v42);
      v15 = (std::__shared_weak_count *)p_cf;
      if (p_cf)
      {
        v16 = (unint64_t *)(p_cf + 1);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      v18 = v44;
      if (v44)
      {
        v19 = (unint64_t *)&v44->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
        operator delete(__p);
    }
    v21 = *((unsigned int *)this + 4);
    __p = (void *)0x676C6F62696F6374;
    LODWORD(p_p) = 0;
    cf = 0;
    LODWORD(v47) = 0;
    (*(void (**)(HALS_Device *, uint64_t, void **, uint64_t, uint64_t *, CFTypeRef *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this + 112))(this, v21, &__p, 8, &v47, &cf, 0, 0, 0);
    v22 = cf;
    v40 = cf;
    v41 = 1;
    __p = 0;
    p_p = &__p;
    v38 = 0x2000000000;
    v39 = 0;
    cf = 0;
    p_cf = &cf;
    v34 = 0x2000000000;
    v35 = 0;
    v29[0] = MEMORY[0x1E0C809B0];
    v29[1] = 1174405120;
    v29[2] = ___ZN11HALS_Device23UpdateInternalIOContextEv_block_invoke;
    v29[3] = &unk_1E699DB68;
    v29[6] = this;
    v30 = v22;
    v31 = 1;
    if (v22)
      CFRetain(v22);
    v29[4] = &cf;
    v29[5] = &__p;
    v23 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v23, (uint64_t)v29);
    v24 = (HALS_ObjectMap *)*((unsigned int *)p_p + 6);
    if ((_DWORD)v24 && !*((_BYTE *)p_cf + 24))
    {
      v25 = (unsigned int *)HALS_ObjectMap::CopyObjectByObjectID(v24);
      v27 = (HALS_ObjectMap *)v25;
      if (v25)
      {
        v28 = v25[4];
        v47 = 0x676C6F6261636F6DLL;
        v48 = 0;
        v49 = v40;
        (*(void (**)(unsigned int *, uint64_t, uint64_t *, uint64_t, CFTypeRef *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v25 + 120))(v25, v28, &v47, 8, &v49, 0, 0, 0);
      }
      HALS_ObjectMap::ReleaseObject(v27, v26);
    }
    CACFDictionary::~CACFDictionary((CACFDictionary *)&v30);
    _Block_object_dispose(&cf, 8);
    _Block_object_dispose(&__p, 8);
    CACFDictionary::~CACFDictionary((CACFDictionary *)&v40);
  }
}

void sub_1B5C86788(void *a1, HALS_Object *a2)
{
  HALS_ObjectMap *v2;

  HALS_ObjectMap::ReleaseObject(v2, a2);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5C86748);
}

void sub_1B5C867B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p)
{
  CACFDictionary *v23;
  uint64_t v24;

  CACFDictionary::~CACFDictionary(v23);
  _Block_object_dispose(&a19, 8);
  _Block_object_dispose(&__p, 8);
  CACFDictionary::~CACFDictionary((CACFDictionary *)(v24 - 128));
  _Unwind_Resume(a1);
}

void ___ZN11HALS_Device23UpdateInternalIOContextEv_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  HALB_Mutex *v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  _QWORD v19[7];
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;

  v2 = a1[6];
  v3 = *(_DWORD *)(v2 + 600);
  if (!v3)
  {
    v15 = 0;
    v16 = 0;
    HALS_System::GetInstance(&v17, 0, &v15);
    v4 = a1[7];
    v20 = 0;
    v21 = &v20;
    v22 = 0x2000000000;
    v23 = 0;
    v19[0] = MEMORY[0x1E0C809B0];
    v19[1] = 0x40000000;
    v19[2] = ___ZN11HALS_System15CreateIOContextEP11HALS_ClientPK14__CFDictionary_block_invoke;
    v19[3] = &unk_1E697E150;
    v19[4] = &v20;
    v19[5] = v17;
    v19[6] = 0;
    v5 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 56))(v17);
    HALB_CommandGate::ExecuteCommand(v5, (uint64_t)v19);
    v6 = (unsigned int *)v21[3];
    if (v6)
    {
      v7 = v6[4];
      v24 = 0x676C6F6261636F6DLL;
      v25 = 0;
      v26 = v4;
      (*(void (**)(unsigned int *, uint64_t, uint64_t *, uint64_t, uint64_t *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v6 + 120))(v6, v7, &v24, 8, &v26, 0, 0, 0);
      v8 = v21[3];
    }
    else
    {
      v8 = 0;
    }
    _Block_object_dispose(&v20, 8);
    v9 = v18;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = v16;
    if (v16)
    {
      v13 = (unint64_t *)&v16->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    *(_DWORD *)(v8 + 72) = *(_DWORD *)(v2 + 16);
    v3 = *(_DWORD *)(v8 + 16);
    *(_DWORD *)(v2 + 600) = v3;
    *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = 1;
  }
  *(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 24) = v3;
}

void sub_1B5C86A08(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5C869E8);
}

CFTypeRef __copy_helper_block_e8_56c20_ZTS14CACFDictionary(uint64_t a1, uint64_t a2)
{
  CFTypeRef result;
  int v4;
  BOOL v5;

  result = *(CFTypeRef *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = result;
  v4 = *(unsigned __int8 *)(a2 + 64);
  *(_BYTE *)(a1 + 64) = v4;
  *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
  if (v4)
    v5 = result == 0;
  else
    v5 = 1;
  if (!v5)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_56c20_ZTS14CACFDictionary(uint64_t a1)
{
  CACFDictionary::~CACFDictionary((CACFDictionary *)(a1 + 56));
}

uint64_t HALS_Device::GetNeighborStartingChannel(HALS_Device *this, const HALS_Stream *a2, HALS_IODevice *a3)
{
  uint64_t v5;
  unsigned int NumberStreams;
  unsigned int v7;
  int v8;
  unsigned int *v9;
  HALS_ObjectMap *v10;
  HALS_Object *v11;
  HALS_ObjectMap *v12;
  HALS_Object *v13;
  int v14;
  int v15;
  uint64_t v16;
  HALS_Object *v17;
  _BYTE v19[28];
  int v20;
  uint64_t v21;
  uint64_t v22;

  v5 = 1;
  NumberStreams = HALS_IODevice::GetNumberStreams(a2, 1);
  if (NumberStreams >= 2)
  {
    v7 = NumberStreams;
    v8 = 1;
    v9 = (unsigned int *)HALS_IODevice::CopyStreamByIndex(a2, 1, 0);
    do
    {
      v10 = (HALS_ObjectMap *)HALS_IODevice::CopyStreamByIndex(a2, 1, v8);
      v12 = v10;
      if (v10)
      {
        if (v10 == this)
        {
          if (v9)
          {
            v15 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v9 + 200))(v9);
            v16 = v9[4];
            v21 = 0x676C6F6270667420;
            v22 = 0;
            (*(void (**)(unsigned int *, uint64_t, uint64_t *, uint64_t, char *, _BYTE *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v9 + 112))(v9, v16, &v21, 40, (char *)&v22 + 4, v19, 0, 0, 0);
            v5 = (v20 + v15);
          }
          v14 = 2;
        }
        else
        {
          HALS_ObjectMap::RetainObject(v10, v11);
          HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v9, v13);
          v14 = 0;
          v9 = (unsigned int *)v12;
        }
      }
      else
      {
        v14 = 4;
      }
      HALS_ObjectMap::ReleaseObject(v12, v11);
      if ((v14 | 4) != 4)
        break;
      ++v8;
    }
    while (v7 != v8);
    HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v9, v17);
  }
  return v5;
}

void sub_1B5C86BFC(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap *v2;

  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t HALS_Device::GetDSPLatencyForClient(HALS_Device *this, char a2, HALS_Client *a3)
{
  HALB_Mutex *v3;
  uint64_t v4;
  _QWORD v6[7];
  char v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t (*v12)();
  char v13;
  char v14;

  v8 = 0;
  v9 = &v8;
  v10 = 0x3002000000;
  v11 = __Block_byref_object_copy__54_14483;
  v12 = __Block_byref_object_dispose__55_14484;
  v13 = 0;
  v14 = 0;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 0x40000000;
  v6[2] = ___ZNK11HALS_Device22GetDSPLatencyForClientEbP11HALS_Client_block_invoke;
  v6[3] = &unk_1E699E260;
  v6[4] = &v8;
  v6[5] = this;
  v7 = a2;
  v6[6] = a3;
  v3 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v3, (uint64_t)v6);
  v4 = v9[5];
  _Block_object_dispose(&v8, 8);
  return v4;
}

void sub_1B5C86CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK11HALS_Device22GetDSPLatencyForClientEbP11HALS_Client_block_invoke(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = HALS_Device::_GetDSPLatencyForClient(*(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 56), *(_QWORD *)(a1 + 48));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  *(_BYTE *)(v3 + 44) = BYTE4(result);
  *(_DWORD *)(v3 + 40) = result;
  return result;
}

uint64_t HALS_Device::_GetDSPLatencyForClient(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t *v4;
  unsigned int *v5;
  uint64_t v6;
  unsigned __int8 v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v11;
  int v12;
  int v13;
  int v14;

  v4 = HALS_Device::ClientDSPInfo::find(a1 + 616, a3);
  if (!v4)
    goto LABEL_4;
  if (!a2)
  {
    v5 = (unsigned int *)v4[8];
    if (!v5)
      goto LABEL_4;
LABEL_6:
    v9 = v5[4];
    v11 = 0x676C6F626C746E63;
    v12 = 0;
    v14 = 0;
    v13 = 0;
    (*(void (**)(unsigned int *, uint64_t, uint64_t *, uint64_t, int *, int *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v5 + 112))(v5, v9, &v11, 4, &v13, &v14, 0, 0, 0);
    v7 = v14;
    v8 = v14 & 0xFFFFFF00;
    v6 = 0x100000000;
    return v6 | v8 | v7;
  }
  v5 = (unsigned int *)v4[3];
  if (v5)
    goto LABEL_6;
LABEL_4:
  v6 = 0;
  v7 = 0;
  v8 = 0;
  return v6 | v8 | v7;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>>>::__deallocate_node(*(_QWORD ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>>>::__deallocate_node(_QWORD **a1)
{
  _QWORD **v1;
  _QWORD *v2;

  if (a1)
  {
    v1 = a1;
    do
    {
      v2 = *v1;
      std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v1[4]);
      operator delete(v1);
      v1 = (_QWORD **)v2;
    }
    while (v2);
  }
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>,void *>>>::operator()[abi:ne180100](char a1, _QWORD **a2)
{
  if (a1)
  {
    std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(a2[4]);
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

uint64_t __Block_byref_object_copy__250(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(result + 40) = v2;
  return result;
}

uint64_t __Block_byref_object_dispose__251(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (result)
    return std::default_delete<DSP_Host_OffloadDictionary>::operator()[abi:ne180100](result);
  return result;
}

uint64_t ___ZNK11HALS_Device31RationalizeDSPOffloadsForClientEbP11HALS_Client_block_invoke(uint64_t a1)
{
  HALS_Device_HostedDSP *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v2 = *(HALS_Device_HostedDSP **)(*(_QWORD *)(a1 + 40) + 608);
  if (v2)
  {
    HALS_Device_HostedDSP::RationalizeDSPOffloadsForClient((HALS_Device_HostedDSP *)&v6, v2, (HALS_Client *)*(unsigned __int8 *)(a1 + 56), *(_QWORD *)(a1 + 48));
    v3 = v6;
  }
  else
  {
    v3 = 0;
  }
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  result = *(_QWORD *)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;
  if (result)
    return std::default_delete<DSP_Host_OffloadDictionary>::operator()[abi:ne180100](result);
  return result;
}

void sub_1B5C86F3C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

_QWORD *__Block_byref_object_copy__253(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  result[5] = a2[5];
  v2 = a2 + 6;
  v3 = a2[6];
  result[6] = v3;
  v4 = result + 6;
  v5 = a2[7];
  result[7] = v5;
  if (v5)
  {
    *(_QWORD *)(v3 + 16) = v4;
    a2[5] = v2;
    *v2 = 0;
    a2[7] = 0;
  }
  else
  {
    result[5] = v4;
  }
  return result;
}

void __Block_byref_object_dispose__254(uint64_t a1)
{
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*(_QWORD **)(a1 + 48));
}

void ___ZNK11HALS_Device20GetDSPTypesForClientEbP11HALS_Client_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  HALS_Device::_GetDSPTypesForClient((uint64_t *)&v6, *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 56), *(_QWORD *)(a1 + 48));
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v3 = v2 + 48;
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*(_QWORD **)(v2 + 48));
  v4 = v7;
  *(_QWORD *)(v2 + 40) = v6;
  *(_QWORD *)(v2 + 48) = v4;
  v5 = v8;
  *(_QWORD *)(v2 + 56) = v8;
  if (v5)
  {
    v4[2] = v3;
    v6 = &v7;
    v7 = 0;
    v8 = 0;
    v4 = 0;
  }
  else
  {
    *(_QWORD *)(v2 + 40) = v3;
  }
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v4);
}

void sub_1B5C87020(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5C8700CLL);
}

uint64_t *__Block_byref_object_copy__264(uint64_t a1, uint64_t a2)
{
  return std::set<DSP_Host_Types::AudioProcessingType>::set[abi:ne180100]((uint64_t *)(a1 + 40), (_QWORD *)(a2 + 40));
}

void __Block_byref_object_dispose__265(uint64_t a1)
{
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*(_QWORD **)(a1 + 48));
}

void ___ZN11HALS_Device26MirrorOtherDeviceClientDSPEbPKS__block_invoke(_QWORD *a1)
{
  const BOOL *v1;
  uint64_t v2;
  _DWORD *v3;
  _QWORD **v4;
  _QWORD *v5[2];
  uint64_t v6[3];

  v1 = (const BOOL *)*(unsigned __int8 *)(*(_QWORD *)(a1[4] + 8) + 24);
  v2 = *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
  v3 = (_DWORD *)a1[7];
  std::set<DSP_Host_Types::AudioProcessingType>::set[abi:ne180100](v6, (_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40));
  v5[0] = 0;
  v5[1] = 0;
  v4 = v5;
  HALS_Device::_ConfigureDSPTypesForClient(v3, v1, v2, (uint64_t)v6, &v4);
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v5[0]);
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy((_QWORD *)v6[1]);
}

void sub_1B5C870C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, uint64_t a11, uint64_t a12, _QWORD *a13)
{
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(a10);
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(a13);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__267(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = a2[5];
  a2[5] = 0;
  *(_QWORD *)(result + 40) = v2;
  *(_QWORD *)(result + 48) = a2[6];
  a2[6] = 0;
  v5 = a2[7];
  v3 = a2 + 7;
  v4 = v5;
  *(_QWORD *)(result + 56) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 64) = v6;
  *(_DWORD *)(result + 72) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 48);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 56;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t __Block_byref_object_dispose__268(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>>>::~__hash_table(a1 + 40);
}

void ___ZNK11HALS_Device16CopyClientDSPMapEb_block_invoke(uint64_t a1)
{
  unint64_t v1;
  uint64_t v3;
  int v4;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t **v10;
  uint64_t *i;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t j;
  void *v29;
  void *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void *v35;
  void *__p[2];
  __int128 v37;
  float v38;
  unsigned int v39;
  _QWORD **v40;
  _QWORD *v41;
  uint64_t v42;

  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(unsigned __int8 *)(a1 + 48);
  *(_OWORD *)__p = 0u;
  v37 = 0u;
  v38 = 1.0;
  v5 = *(uint64_t **)(v3 + 640);
  if (v5)
  {
    while (1)
    {
      v6 = v4 ? v5 + 3 : v5 + 8;
      if (v6[2])
        break;
LABEL_48:
      v5 = (uint64_t *)*v5;
      if (!v5)
        goto LABEL_49;
    }
    v39 = *((_DWORD *)v5 + 4);
    std::set<DSP_Host_Types::AudioProcessingType>::set[abi:ne180100]((uint64_t *)&v40, v6);
    v7 = v39;
    v8 = (unint64_t)__p[1];
    if (__p[1])
    {
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        v1 = v39;
        if (__p[1] <= (void *)v39)
          v1 = v39 % (unint64_t)__p[1];
      }
      else
      {
        v1 = (LODWORD(__p[1]) - 1) & v39;
      }
      v10 = (uint64_t **)*((_QWORD *)__p[0] + v1);
      if (v10)
      {
        for (i = *v10; i; i = (uint64_t *)*i)
        {
          v12 = i[1];
          if (v12 == v39)
          {
            if (*((_DWORD *)i + 4) == v39)
              goto LABEL_47;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if ((void *)v12 >= __p[1])
                v12 %= (unint64_t)__p[1];
            }
            else
            {
              v12 &= (unint64_t)__p[1] - 1;
            }
            if (v12 != v1)
              break;
          }
        }
      }
    }
    v13 = operator new(0x30uLL);
    v14 = v13;
    *v13 = 0;
    v13[1] = v7;
    *((_DWORD *)v13 + 4) = v7;
    v15 = v41;
    v13[3] = v40;
    v13[4] = v15;
    v16 = (char *)(v13 + 4);
    v17 = v42;
    v13[5] = v42;
    if (v17)
    {
      v15[2] = v16;
      v40 = &v41;
      v41 = 0;
      v42 = 0;
    }
    else
    {
      v13[3] = v16;
    }
    v18 = (float)(unint64_t)(*((_QWORD *)&v37 + 1) + 1);
    if (!v8 || (float)(v38 * (float)v8) < v18)
    {
      v19 = (v8 & (v8 - 1)) != 0;
      if (v8 < 3)
        v19 = 1;
      v20 = v19 | (2 * v8);
      v21 = vcvtps_u32_f32(v18 / v38);
      if (v20 <= v21)
        v22 = v21;
      else
        v22 = v20;
      std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>((uint64_t)__p, v22);
      v8 = (unint64_t)__p[1];
      if (((unint64_t)__p[1] & ((unint64_t)__p[1] - 1)) != 0)
      {
        if (__p[1] <= (void *)v7)
          v1 = v7 % (unint64_t)__p[1];
        else
          v1 = v7;
      }
      else
      {
        v1 = (LODWORD(__p[1]) - 1) & v7;
      }
    }
    v23 = __p[0];
    v24 = (_QWORD *)*((_QWORD *)__p[0] + v1);
    if (v24)
    {
      *v14 = *v24;
    }
    else
    {
      *v14 = v37;
      *(_QWORD *)&v37 = v14;
      v23[v1] = &v37;
      if (!*v14)
        goto LABEL_46;
      v25 = *(_QWORD *)(*v14 + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v25 >= v8)
          v25 %= v8;
      }
      else
      {
        v25 &= v8 - 1;
      }
      v24 = (char *)__p[0] + 8 * v25;
    }
    *v24 = v14;
LABEL_46:
    ++*((_QWORD *)&v37 + 1);
LABEL_47:
    std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v41);
    goto LABEL_48;
  }
LABEL_49:
  v26 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (*(_QWORD *)(v26 + 64))
  {
    std::__hash_table<std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>>>::__deallocate_node(*(_QWORD ***)(v26 + 56));
    *(_QWORD *)(v26 + 56) = 0;
    v27 = *(_QWORD *)(v26 + 48);
    if (v27)
    {
      for (j = 0; j != v27; ++j)
        *(_QWORD *)(*(_QWORD *)(v26 + 40) + 8 * j) = 0;
    }
    *(_QWORD *)(v26 + 64) = 0;
  }
  v29 = __p[0];
  __p[0] = 0;
  v30 = *(void **)(v26 + 40);
  *(_QWORD *)(v26 + 40) = v29;
  if (v30)
    operator delete(v30);
  v32 = (unint64_t)__p[1];
  v31 = v37;
  *(_QWORD *)(v26 + 56) = v37;
  *(_QWORD *)(v26 + 48) = v32;
  __p[1] = 0;
  v33 = *((_QWORD *)&v37 + 1);
  *(_QWORD *)(v26 + 64) = *((_QWORD *)&v37 + 1);
  *(float *)(v26 + 72) = v38;
  if (v33)
  {
    v34 = *(_QWORD *)(v31 + 8);
    if ((v32 & (v32 - 1)) != 0)
    {
      if (v34 >= v32)
        v34 %= v32;
    }
    else
    {
      v34 &= v32 - 1;
    }
    v31 = 0;
    *(_QWORD *)(*(_QWORD *)(v26 + 40) + 8 * v34) = v26 + 56;
    v37 = 0uLL;
  }
  std::__hash_table<std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>>>::__deallocate_node((_QWORD **)v31);
  v35 = __p[0];
  __p[0] = 0;
  if (v35)
    operator delete(v35);
}

void sub_1B5C874CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, _QWORD **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _QWORD *a17)
{
  _QWORD **v17;

  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v17[4]);
  operator delete(v17);
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(a17);
  std::__hash_table<std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>>>::__deallocate_node(a11);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1B5C87624(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_1B5C87830(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1B5C87A04(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void DSP_Factory_Bridge::~DSP_Factory_Bridge(id *this)
{

}

{

  JUMPOUT(0x1B5E50688);
}

void DSP_PropertySetWrapper::~DSP_PropertySetWrapper(DSP_PropertySetWrapper *this)
{
  DSP_PropertySetWrapper::~DSP_PropertySetWrapper(this);
  JUMPOUT(0x1B5E50688);
}

{
  void *v2;

  *(_QWORD *)this = &off_1E699E698;
  v2 = (void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;

}

void DSP_PropertySetWrapper::getHostedDSPPropertyInfoArray(DSP_PropertySetWrapper *this@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  id v4;
  void *v5;
  CFTypeRef cf;

  *a2 = &off_1E699E778;
  a2[1] = 0;
  a2[2] = 0;
  a2[3] = 0;
  a2[4] = 0;
  a2[5] = 0;
  v3 = (void *)*((_QWORD *)this + 2);
  if (v3)
  {
    objc_msgSend(v3, "getHostedDSPPropertyInfoArray");
    v4 = (id)objc_claimAutoreleasedReturnValue();
    v5 = v4;
    if (v4)
      CFRetain(v4);
    applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&cf, v5);

    (*(void (**)(_QWORD *, CFTypeRef *))(*a2 + 32))(a2, &cf);
    if (cf)
      CFRelease(cf);

  }
}

void sub_1B5C87BD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  DSP_Host_Types::DSPPropertyInfoArray *v2;
  void *v3;
  va_list va;

  va_start(va, a2);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)va);

  DSP_Host_Types::DSPPropertyInfoArray::~DSPPropertyInfoArray(v2);
  _Unwind_Resume(a1);
}

void *DSP_PropertySetWrapper::hasHostedDSPProperty(DSP_PropertySetWrapper *this, const AudioObjectPropertyAddress *a2)
{
  void *result;

  result = (void *)*((_QWORD *)this + 2);
  if (result)
    return (void *)objc_msgSend(result, "hasHostedDSPPropertyAtAddress:", *(_QWORD *)&a2->mSelector, a2->mElement);
  return result;
}

uint64_t DSP_PropertySetWrapper::setHostedDSPProperty(DSP_PropertySetWrapper *this, const AudioObjectPropertyAddress *a2, id *a3, id *a4)
{
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t mElement;
  id v13;
  id v14;
  id v16;

  v8 = 2003329396;
  v9 = objc_alloc(MEMORY[0x1E0CB35C8]);
  if (*((_QWORD *)this + 2) && (objc_opt_respondsToSelector() & 1) != 0)
  {
    if (a4)
      a4 = (id *)*a4;
    v10 = (void *)*((_QWORD *)this + 2);
    v11 = *(_QWORD *)&a2->mSelector;
    mElement = a2->mElement;
    v13 = *a3;
    v16 = v9;
    LODWORD(mElement) = objc_msgSend(v10, "setHostedDSPPropertyAtAddress:withData:withQualifier:error:", v11, mElement, v13, a4, &v16);
    v14 = v16;

    if ((_DWORD)mElement)
      v8 = 0;
    else
      v8 = 2003329396;
    v9 = v14;
  }

  return v8;
}

void sub_1B5C87D14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void DSP_PropertySetWrapper::getHostedDSPProperty(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, applesauce::CF::DataRef *a4@<X8>)
{
  void *v6;
  id v8;
  id v9;
  void *v10;
  id v11;

  v6 = *(void **)(a1 + 16);
  if (v6)
  {
    if (*(_BYTE *)(a3 + 8))
    {
      v8 = *(id *)a3;
      v6 = *(void **)(a1 + 16);
    }
    else
    {
      v8 = 0;
    }
    v11 = v8;
    objc_msgSend(v6, "getHostedDSPPropertyAtAddress:withQualifierData:", *(_QWORD *)a2, *(unsigned int *)(a2 + 8), v8);
    v9 = (id)objc_claimAutoreleasedReturnValue();
    v10 = v9;
    if (v9)
      CFRetain(v9);
    applesauce::CF::DataRef::DataRef(a4, v10);

  }
  else
  {
    *(_QWORD *)a4 = 0;
  }
}

void sub_1B5C87DF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void DSP_ProcessorWrapper::~DSP_ProcessorWrapper(DSP_ProcessorWrapper *this)
{
  DSP_ProcessorWrapper::~DSP_ProcessorWrapper(this);
  JUMPOUT(0x1B5E50688);
}

{
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  void *v11;
  __int128 v12;
  _BYTE v13[24];
  _BYTE *v14;
  _BYTE v15[24];
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = &off_1E699E700;
  v2 = (void *)*((_QWORD *)this + 3);
  v16 = 0;
  objc_msgSend(v2, "setMutationRequestListener:", v15);
  v3 = v16;
  if (v16 == v15)
  {
    v4 = 4;
    v3 = v15;
  }
  else
  {
    if (!v16)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (void *)*((_QWORD *)this + 3);
  v14 = 0;
  objc_msgSend(v5, "setPropertyChangeListener:", v13);
  v6 = v14;
  if (v14 == v13)
  {
    v7 = 4;
    v6 = v13;
    goto LABEL_10;
  }
  if (v14)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  objc_msgSend(*((id *)this + 3), "setOwner:", 0);
  v12 = 0uLL;
  std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100]((uint64_t)this + 40, &v12);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = (void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 40);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

void DSP_ProcessorWrapper::simulateConfigurationChange(DSP_ProcessorWrapper *this@<X0>, const DSP_Host_Types::NegotiateRequest *a2@<X1>, uint64_t a3@<X8>)
{
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  CFTypeRef v13;
  id v14;
  CFTypeRef v15;
  CFTypeRef cf;

  v6 = objc_alloc(MEMORY[0x1E0CB35C8]);
  v7 = (void *)*((_QWORD *)this + 4);
  cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
  (*(void (**)(const DSP_Host_Types::NegotiateRequest *, CFTypeRef *))(*(_QWORD *)a2 + 24))(a2, &cf);
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v15, cf);
  if (cf)
    CFRelease(cf);
  v8 = (id)v15;
  v14 = v6;
  objc_msgSend(v7, "simulateConfigurationChange:error:", v8, &v14);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = v14;

  if (v15)
    CFRelease(v15);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = &off_1E699E820;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_QWORD *)(a3 + 88) = 0;
  *(_QWORD *)(a3 + 96) = -1;
  v11 = v9;
  v12 = v11;
  if (v11)
    CFRetain(v11);
  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v13, v12);

  (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)a3 + 32))(a3, &v13);
  if (v13)
    CFRelease(v13);
  *(_QWORD *)(a3 + 96) = objc_msgSend(v10, "code");

}

void sub_1B5C87FFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  DSP_Host_Types::NegotiateResponse *v15;
  void *v16;
  void *v17;

  DSP_Host_Types::NegotiateResponse::~NegotiateResponse(v15);

  _Unwind_Resume(a1);
}

void DSP_ProcessorWrapper::negotiateConfigurationChange(DSP_ProcessorWrapper *this@<X0>, const DSP_Host_Types::NegotiateRequest *a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v6;
  char v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  const char *v16;
  BOOL v17;
  char v18;
  CFTypeRef v19;
  id v20;
  CFTypeRef v21;
  CFTypeRef cf;

  if (*((_BYTE *)a2 + 65))
    v6 = *((_BYTE *)a2 + 64) == 0;
  else
    v6 = 1;
  v7 = !v6;
  v8 = objc_alloc(MEMORY[0x1E0CB35C8]);
  v9 = (void *)*((_QWORD *)this + 4);
  cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
  (*(void (**)(const DSP_Host_Types::NegotiateRequest *, CFTypeRef *))(*(_QWORD *)a2 + 24))(a2, &cf);
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v21, cf);
  if (cf)
    CFRelease(cf);
  v10 = (id)v21;
  v20 = v8;
  objc_msgSend(v9, "negotiateConfigurationChange:error:", v10, &v20);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = v20;

  if (v21)
    CFRelease(v21);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = &off_1E699E820;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_QWORD *)(a3 + 88) = 0;
  *(_QWORD *)(a3 + 96) = -1;
  v13 = v11;
  v14 = v13;
  if (v13)
    CFRetain(v13);
  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v19, v14);

  (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)a3 + 32))(a3, &v19);
  if (v19)
    CFRelease(v19);
  v15 = objc_msgSend(v12, "code");
  *(_QWORD *)(a3 + 96) = v15;
  if (v15)
  {
    v16 = "negotiateConfigurationChange UNSUPPORTED";
LABEL_25:
    DSP_Host_Types::ConfigurationChangeRequest::debug_log_device_summary(a2, v16);
    goto LABEL_26;
  }
  if (*((_BYTE *)a2 + 41))
    v17 = *((_BYTE *)a2 + 40) == 0;
  else
    v17 = 1;
  if (v17)
    v18 = 1;
  else
    v18 = v7;
  if ((v18 & 1) == 0)
  {
    v16 = "negotiateConfigurationChange";
    goto LABEL_25;
  }
LABEL_26:

}

void sub_1B5C88230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  DSP_Host_Types::NegotiateResponse *v15;
  void *v16;
  void *v17;

  DSP_Host_Types::NegotiateResponse::~NegotiateResponse(v15);

  _Unwind_Resume(a1);
}

void DSP_ProcessorWrapper::adaptToConfigurationChange(uint64_t a1@<X0>, DSP_Host_Types::ConfigurationChangeRequest *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  id v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  const char *v16;
  CFTypeRef v17;
  id v18;
  CFTypeRef v19;
  CFTypeRef cf;

  DSP_Host_Types::AdaptResponse::AdaptResponse((DSP_Host_Types::AdaptResponse *)a4);
  v8 = objc_alloc(MEMORY[0x1E0CB35C8]);
  v9 = *(void **)(a1 + 32);
  cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
  (*(void (**)(DSP_Host_Types::ConfigurationChangeRequest *, CFTypeRef *))(*(_QWORD *)a2 + 24))(a2, &cf);
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v19, cf);
  if (cf)
    CFRelease(cf);
  v10 = (id)v19;
  v18 = v8;
  objc_msgSend(v9, "adaptToConfigurationChange:withCallbacks:error:", v10, a3, &v18);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = v18;

  if (v19)
    CFRelease(v19);
  v13 = v11;
  v14 = v13;
  if (v13)
    CFRetain(v13);
  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v17, v14);

  (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)a4 + 32))(a4, &v17);
  if (v17)
    CFRelease(v17);
  if (!*(_BYTE *)(a4 + 44))
  {
    *(_DWORD *)(a4 + 40) = 0;
    *(_BYTE *)(a4 + 44) = 1;
  }
  v15 = objc_msgSend(v12, "code");
  *(_QWORD *)(a4 + 72) = v15;
  if (v15)
    v16 = "adaptToConfigurationChange UNSUPPORTED";
  else
    v16 = "adaptToConfigurationChange SUCCEEDED";
  DSP_Host_Types::ConfigurationChangeRequest::debug_log_device_summary(a2, v16);

}

void sub_1B5C8842C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  DSP_Host_Types::AdaptResponse *v15;
  void *v16;
  void *v17;

  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)&a9);

  DSP_Host_Types::AdaptResponse::~AdaptResponse(v15);
  _Unwind_Resume(a1);
}

uint64_t DSP_ProcessorWrapper::getProcessorPropertySet@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 48);
  *a2 = *(_QWORD *)(this + 40);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

void sub_1B5C88634(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::__shared_ptr_emplace<DSP_PropertySetWrapper>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E699EA18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<DSP_PropertySetWrapper>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E699EA18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_emplace<DSP_PropertySetWrapper>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

BOOL DSP_Host::loadBypass(DSP_Host *this)
{
  _BOOL8 v1;
  DSP_HAL_Bypass *v3;
  DSP_HAL_Bypass *v4;
  void *v5;
  _QWORD *v6;
  id v7;
  uint64_t v8;

  if (*((_QWORD *)this + 2))
    return 0;
  v3 = objc_alloc_init(DSP_HAL_Bypass);
  v4 = v3;
  if (v3)
  {
    -[DSP_HAL_Bypass createFactory](v3, "createFactory");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (v5)
    {
      v6 = (_QWORD *)operator new();
      v7 = v5;
      *v6 = &off_1E699E668;
      v6[1] = v7;
      v8 = *((_QWORD *)this + 2);
      *((_QWORD *)this + 2) = v6;
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      *((_DWORD *)this + 6) = 2;
    }

  }
  DSP_Host::initProperties(this);
  v1 = *((_DWORD *)this + 6) == 2;

  return v1;
}

void sub_1B5C88758(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void DSP_Host::initProperties(DSP_Host *this)
{
  uint64_t v1;
  void *v2;
  id v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  id v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  NSObject *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _opaque_pthread_t *v17;
  mach_port_t v18;
  id *v19;
  _BYTE v20[10];
  __int16 v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)this + 2);
  if (v1)
  {
    v2 = *(void **)(v1 + 8);
    if (v2)
    {
      v4 = v2;
      v5 = objc_opt_respondsToSelector();
      if ((v5 & 1) != 0)
      {
        objc_msgSend(v4, "getFactoryPropertySet");
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        v7 = operator new(0x30uLL);
        v7[1] = 0;
        v7[2] = 0;
        *v7 = &off_1E699EA18;
        v8 = v6;
        v7[3] = &off_1E699E698;
        v7[4] = 0;
        v7[5] = v8;
        *(_QWORD *)&v9 = v7 + 3;
        *((_QWORD *)&v9 + 1) = v7;
        v10 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
        *((_OWORD *)this + 2) = v9;
        if (v10)
        {
          p_shared_owners = (unint64_t *)&v10->__shared_owners_;
          do
            v12 = __ldaxr(p_shared_owners);
          while (__stlxr(v12 - 1, p_shared_owners));
          if (!v12)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
        }

      }
      else
      {
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v19, "com.apple.coreaudio", "AMCP");
        v13 = *v19;
        AMCP::Log::Scope::get_os_log_t(*v19);
        objc_claimAutoreleasedReturnValue();
        v14 = *(std::__shared_weak_count **)v20;
        if (*(_QWORD *)v20)
        {
          v15 = (unint64_t *)(*(_QWORD *)v20 + 8);
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 - 1, v15));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          v17 = pthread_self();
          v18 = pthread_mach_thread_np(v17);
          LODWORD(v19) = 67109634;
          HIDWORD(v19) = v18;
          *(_WORD *)v20 = 2080;
          *(_QWORD *)&v20[2] = "DSP_Host.mm";
          v21 = 1024;
          v22 = 478;
          _os_log_error_impl(&dword_1B57BA000, v13, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d [hal_dsp] Unable to acquire factory properties interface from the Hosted DSP libary", (uint8_t *)&v19, 0x18u);
        }

      }
    }
  }
}

void sub_1B5C88970(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

AMCP::Log::Scope_Registry *DSP_Host::DSP_Host(DSP_Factory_Bridge *,DSP_Host::DefaultConstruction)::LoadTypeLogging::~LoadTypeLogging(AMCP::Log::Scope_Registry *a1)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  _opaque_pthread_t *v6;
  mach_port_t v7;
  uint64_t v8;
  const char *v9;
  id *v11;
  _BYTE v12[10];
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;
  __int16 v17;
  const char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  AMCP::Log::Scope_Registry::get(a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v11, "com.apple.coreaudio", "AMCP");
  v2 = *v11;
  AMCP::Log::Scope::get_os_log_t(*v11);
  objc_claimAutoreleasedReturnValue();
  v3 = *(std::__shared_weak_count **)v12;
  if (*(_QWORD *)v12)
  {
    v4 = (unint64_t *)(*(_QWORD *)v12 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v6 = pthread_self();
    v7 = pthread_mach_thread_np(v6);
    v8 = **(unsigned int **)a1;
    if (v8 > 4)
      v9 = "<UNKNOWN>";
    else
      v9 = off_1E699EB70[v8];
    LODWORD(v11) = 67110146;
    HIDWORD(v11) = v7;
    *(_WORD *)v12 = 2080;
    *(_QWORD *)&v12[2] = "DSP_Host.mm";
    v13 = 1024;
    v14 = 329;
    v15 = 1024;
    v16 = v8;
    v17 = 2080;
    v18 = v9;
    _os_log_impl(&dword_1B57BA000, v2, OS_LOG_TYPE_DEFAULT, "%6u %32s:%-5d [hal_dsp] DSP_Host constructed type %u (%s)", (uint8_t *)&v11, 0x28u);
  }

  return a1;
}

void sub_1B5C88B1C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t DSP_Host::DSP_Host(DSP_Factory_Bridge *,DSP_Host::DefaultConstruction)::FactoryBridgeWithLibary::~FactoryBridgeWithLibary(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_1E699EA68;
  v2 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;

  return a1;
}

void DSP_Host::DSP_Host(DSP_Factory_Bridge *,DSP_Host::DefaultConstruction)::FactoryBridgeWithLibary::~FactoryBridgeWithLibary(uint64_t a1)
{
  DSP_Host::DSP_Host(DSP_Factory_Bridge *,DSP_Host::DefaultConstruction)::FactoryBridgeWithLibary::~FactoryBridgeWithLibary(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t DSP_Host::DSP_Host(uint64_t a1, int a2)
{
  _DWORD *v4;
  const BOOL *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  DSP_HAL_Mock *v9;
  DSP_HAL_Mock *v10;
  void *v11;
  _QWORD *v12;
  id v13;
  uint64_t v14;
  int v15;
  DSP_ADM *v16;
  _QWORD *v17;
  DSP_ADM *v18;
  uint64_t v19;
  void *v20;
  AMCP::Log::Scope_Registry *v21;
  _QWORD *v22;
  NSObject *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _opaque_pthread_t *v27;
  mach_port_t v28;
  AMCP::Log::Scope_Registry *v29;
  NSObject *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  NSObject *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  _opaque_pthread_t *v39;
  mach_port_t v40;
  _opaque_pthread_t *v41;
  mach_port_t v42;
  _DWORD *v43;
  uint8_t buf[8];
  _BYTE v45[10];
  __int16 v46;
  int v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)(a1 + 24) = 0;
  v4 = (_DWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 48) = 850045863;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)buf = 0;
  *(_QWORD *)v45 = 0;
  std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100](a1 + 32, (__int128 *)buf);
  v6 = *(std::__shared_weak_count **)v45;
  if (*(_QWORD *)v45)
  {
    v7 = (unint64_t *)(*(_QWORD *)v45 + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v43 = v4;
  if ((AMCP::Feature_Flags::force_mock_dsp_type(0, v5) & 1) == 0 && a2 != 2)
  {
    if (a2 != 1)
      goto LABEL_19;
    goto LABEL_18;
  }
  if (*(_QWORD *)(a1 + 16))
    goto LABEL_18;
  v9 = objc_alloc_init(DSP_HAL_Mock);
  v10 = v9;
  if (v9)
  {
    -[DSP_HAL_Mock createFactory:](v9, "createFactory:", 97);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    if (v11)
    {
      v12 = (_QWORD *)operator new();
      v13 = v11;
      *v12 = &off_1E699E668;
      v12[1] = v13;
      v14 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v12;
      if (v14)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      *v4 = 3;
    }

  }
  DSP_Host::initProperties((DSP_Host *)a1);
  v15 = *v4;

  if (v15 != 3)
  {
LABEL_18:
    if (DSP_Host::loadBypass((DSP_Host *)a1))
      goto LABEL_50;
LABEL_19:
    v16 = objc_alloc_init(DSP_ADM);
    if (!v16)
    {
      AMCP::Log::Scope_Registry::get(0);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v30 = **(NSObject ***)buf;
      AMCP::Log::Scope::get_os_log_t(**(id **)buf);
      objc_claimAutoreleasedReturnValue();
      v31 = *(std::__shared_weak_count **)v45;
      if (*(_QWORD *)v45)
      {
        v32 = (unint64_t *)(*(_QWORD *)v45 + 8);
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        v39 = pthread_self();
        v40 = pthread_mach_thread_np(v39);
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)&buf[4] = v40;
        *(_WORD *)v45 = 2080;
        *(_QWORD *)&v45[2] = "DSP_Host.mm";
        v46 = 1024;
        v47 = 392;
        _os_log_error_impl(&dword_1B57BA000, v30, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d [hal_dsp] ADM library instance could not be allocated.", buf, 0x18u);
      }

      goto LABEL_40;
    }
    v17 = (_QWORD *)operator new();
    v18 = v16;
    *v17 = &off_1E699EA68;
    v17[1] = 0;
    v17[2] = v18;
    -[DSP_ADM createFactory](v18, "createFactory");
    v19 = objc_claimAutoreleasedReturnValue();
    v20 = (void *)v17[1];
    v17[1] = v19;

    if (v17[1])
    {
      v22 = *(_QWORD **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v17;
      *(_DWORD *)(a1 + 24) = 1;
      AMCP::Log::Scope_Registry::get(v21);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v23 = **(NSObject ***)buf;
      AMCP::Log::Scope::get_os_log_t(**(id **)buf);
      objc_claimAutoreleasedReturnValue();
      v24 = *(std::__shared_weak_count **)v45;
      if (*(_QWORD *)v45)
      {
        v25 = (unint64_t *)(*(_QWORD *)v45 + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        v27 = pthread_self();
        v28 = pthread_mach_thread_np(v27);
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)&buf[4] = v28;
        *(_WORD *)v45 = 2080;
        *(_QWORD *)&v45[2] = "DSP_Host.mm";
        v46 = 1024;
        v47 = 387;
        _os_log_impl(&dword_1B57BA000, v23, OS_LOG_TYPE_DEFAULT, "%6u %32s:%-5d [hal_dsp] ADM library loaded.", buf, 0x18u);
      }

      if (!v22)
        goto LABEL_40;
    }
    else
    {
      v22 = v17;
    }
    v29 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(_QWORD *))(*v22 + 8))(v22);
LABEL_40:
    if (!*(_QWORD *)(a1 + 16))
    {
      AMCP::Log::Scope_Registry::get(v29);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v34 = **(NSObject ***)buf;
      AMCP::Log::Scope::get_os_log_t(**(id **)buf);
      objc_claimAutoreleasedReturnValue();
      v35 = *(std::__shared_weak_count **)v45;
      if (*(_QWORD *)v45)
      {
        v36 = (unint64_t *)(*(_QWORD *)v45 + 8);
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      {
        v41 = pthread_self();
        v42 = pthread_mach_thread_np(v41);
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)&buf[4] = v42;
        *(_WORD *)v45 = 2080;
        *(_QWORD *)&v45[2] = "DSP_Host.mm";
        v46 = 1024;
        v47 = 398;
        _os_log_error_impl(&dword_1B57BA000, v34, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d [hal_dsp] ADM library factory object could not be allocated.", buf, 0x18u);
      }

      DSP_Host::loadBypass((DSP_Host *)a1);
    }

    DSP_Host::initProperties((DSP_Host *)a1);
  }
LABEL_50:
  DSP_Host::DSP_Host(DSP_Factory_Bridge *,DSP_Host::DefaultConstruction)::LoadTypeLogging::~LoadTypeLogging((AMCP::Log::Scope_Registry *)&v43);
  return a1;
}

void sub_1B5C890AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  std::mutex *v4;
  void *v5;
  void *v6;
  uint64_t v8;
  std::__shared_weak_count *v9;
  va_list va;

  va_start(va, a2);

  DSP_Host::DSP_Host(DSP_Factory_Bridge *,DSP_Host::DefaultConstruction)::LoadTypeLogging::~LoadTypeLogging((AMCP::Log::Scope_Registry *)va);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v2 + 112);
  std::mutex::~mutex(v4);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v3);
  v8 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v2 + 16) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *(std::__shared_weak_count **)(v2 + 8);
  if (v9)
    std::__shared_weak_count::__release_weak(v9);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<DSP_ProcessorWrapper>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E699EAA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<DSP_ProcessorWrapper>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E699EAA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_emplace<DSP_ProcessorWrapper>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *DSP_Host::getConcurrentQueue(void)::TaskQueue::~TaskQueue(_QWORD *a1)
{
  uint64_t *v2;

  *a1 = &off_1E699EB40;
  v2 = a1 + 1;
  std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100](a1 + 1, 0);
  std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100](v2, 0);
  return a1;
}

void DSP_Host::getConcurrentQueue(void)::TaskQueue::~TaskQueue(_QWORD *a1)
{
  uint64_t *v1;

  *a1 = &off_1E699EB40;
  v1 = a1 + 1;
  std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100](a1 + 1, 0);
  std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100](v1, 0);
  JUMPOUT(0x1B5E50688);
}

uint64_t DSP_Host::getConcurrentQueue(void)::TaskQueue::rt_enqueue(uint64_t a1, caulk::concurrent::message *a2)
{
  return caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(a1 + 8), a2);
}

void std::__shared_ptr_emplace<DSP_Host::getConcurrentQueue(void)::TaskQueue,std::allocator<DSP_Host::getConcurrentQueue(void)::TaskQueue>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E699EAF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<DSP_Host::getConcurrentQueue(void)::TaskQueue,std::allocator<DSP_Host::getConcurrentQueue(void)::TaskQueue>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E699EAF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_emplace<DSP_Host::getConcurrentQueue(void)::TaskQueue,std::allocator<DSP_Host::getConcurrentQueue(void)::TaskQueue>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void AMCP::make_string_for_class_id(AMCP *this@<X0>, int16x8_t *a2@<X8>)
{
  unsigned int v2;
  int16x8_t v4;
  uint64_t v5;
  int v6;
  void *v7;
  int16x8_t *v8;
  int v10;
  __int16 v11;
  int32x4_t v12;
  uint32x4_t v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  void *__p;
  char v18;
  std::string v19;
  std::string v20;
  std::string::size_type v21;
  int16x8_t v22;
  uint64_t v23;
  int16x8_t v24;
  uint64_t v25;

  v2 = this;
  AMCP::get_class_traits((AMCP *)&v20, this);
  v4 = v22;
  v24 = v22;
  v25 = v23;
  v23 = 0;
  v22 = 0uLL;
  if (v20.__r_.__value_.__r.__words[2])
  {
    v21 = v20.__r_.__value_.__r.__words[2];
    operator delete((void *)v20.__r_.__value_.__r.__words[2]);
  }
  v5 = HIBYTE(v25);
  v6 = SHIBYTE(v25);
  if (v25 < 0)
    v5 = v24.i64[1];
  if (v5 != 7)
    goto LABEL_12;
  v7 = (void *)v24.i64[0];
  v8 = &v24;
  if (v25 < 0)
    v8 = (int16x8_t *)v24.i64[0];
  if (v8->i32[0] != 1852534357 || *(__int32 *)((char *)v8->i32 + 3) != 1853321070)
  {
LABEL_12:
    *a2 = v24;
    a2[1].i64[0] = v25;
    return;
  }
  v19.__r_.__value_.__s.__data_[9] = 0;
  WORD1(v19.__r_.__value_.__r.__words[1]) = 0;
  HIDWORD(v19.__r_.__value_.__r.__words[1]) = 0;
  v19.__r_.__value_.__r.__words[2] = 0xA00000000000000;
  v10 = v8->i32[0];
  v11 = v8->i16[2];
  v19.__r_.__value_.__s.__data_[6] = v8->i8[6];
  WORD2(v19.__r_.__value_.__r.__words[0]) = v11;
  LODWORD(v19.__r_.__value_.__l.__data_) = v10;
  strcpy(&v19.__r_.__value_.__s.__data_[7], " ");
  v4.i32[0] = bswap32(v2);
  *(int8x8_t *)v4.i8 = vzip1_s8(*(int8x8_t *)v4.i8, *(int8x8_t *)v4.i8);
  v12.i64[0] = 0x1F0000001FLL;
  v12.i64[1] = 0x1F0000001FLL;
  v13.i64[0] = 0x5F0000005FLL;
  v13.i64[1] = 0x5F0000005FLL;
  *(int8x8_t *)v4.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v13, (uint32x4_t)vsraq_n_s32(v12, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v4.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)v4.i8, (int8x8_t)0x2E002E002E002ELL);
  v18 = 4;
  LODWORD(__p) = vmovn_s16(v4).u32[0];
  BYTE4(__p) = 0;
  v14 = std::string::append(&v19, (const std::string::value_type *)&__p, 4uLL);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v16 = std::string::append(&v20, "')", 2uLL);
  *(std::string *)a2->i8 = *v16;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (v18 < 0)
    operator delete(__p);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v19.__r_.__value_.__l.__data_);
    if (v6 < 0)
LABEL_22:
      operator delete(v7);
  }
  else if (v6 < 0)
  {
    goto LABEL_22;
  }
}

uint64_t AMCP::get_stock_class_traits_list(AMCP *this)
{
  unsigned __int8 v1;
  unint64_t v2;
  char v4;
  char **v5;
  char *v6;

  if ((v1 & 1) == 0
  {
    AMCP::get_stock_class_traits_list(void)::s_indesctructible_class_traits_list_ptr = 0;
  }
  v2 = atomic_load(&AMCP::get_stock_class_traits_list(void)::once);
  if (v2 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&AMCP::get_stock_class_traits_list(void)::once, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::get_stock_class_traits_list(void)::$_0 &&>>);
  }
  return AMCP::get_stock_class_traits_list(void)::s_indesctructible_class_traits_list_ptr;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::get_stock_class_traits_list(void)::$_0 &&>>()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  char *v3;
  std::string *v4;
  const std::string::value_type **v5;
  uint64_t v6;
  void **v7;
  void *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  char v14;
  _BYTE v15[80];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD v62[10];

  v62[0] = *MEMORY[0x1E0C80C00];
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)v15, 1634689642, 0, &AMCP::Static_Class_Traits<1634689642u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1634957683u>::k_valid_scopes, -1, "Object", 1634689642);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v16, 1634957683, 1634689642, &AMCP::Static_Class_Traits<1634957683u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1634757735u>::k_valid_scopes, 0, "System", 1634957683);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v17, 1634757735, 1634689642, &AMCP::Static_Class_Traits<1634757735u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1853189228u>::k_valid_scopes, 0, "Driver", 1634757735);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v18, 1853189228, 1634757735, &AMCP::Static_Class_Traits<1853189228u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1835299446u>::k_valid_scopes, 0, "Null Driver", 1853189228);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v19, 1835299446, 1634757735, &AMCP::Static_Class_Traits<1835299446u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1633841016u>::k_valid_scopes, 0, "Meta Driver", 1835299446);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v20, 1633841016, 1634689642, &AMCP::Static_Class_Traits<1633841016u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1633905771u>::k_valid_scopes, 0, "Box", 1633841016);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v21, 1633905771, 1634689642, &AMCP::Static_Class_Traits<1633905771u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1633969526u>::k_valid_scopes, 0, "Clock", 1633905771);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v22, 1633969526, 1633905771, &AMCP::Static_Class_Traits<1633969526u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1633773415u>::k_valid_scopes, 0, "Device", 1633969526);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v23, 1633773415, 1633969526, &AMCP::Static_Class_Traits<1633773415u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1634956402u>::k_valid_scopes, 0, "Meta_Device", 1633773415);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v24, 1634956402, 1634689642, &AMCP::Static_Class_Traits<1634956402u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1836282994u>::k_valid_scopes, 0, "Stream", 1634956402);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v25, 1836282994, 1634956402, &AMCP::Static_Class_Traits<1836282994u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1633907820u>::k_valid_scopes, 0, "Meta_Stream", 1836282994);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v26, 1633907820, 1634689642, &AMCP::Static_Class_Traits<1633907820u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1936483442u>::k_valid_scopes, 0, "Control", 1633907820);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v27, 1936483442, 1633907820, &AMCP::Static_Class_Traits<1936483442u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1818588780u>::k_valid_scopes, 0, "Slider Control", 1936483442);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v28, 1818588780, 1633907820, &AMCP::Static_Class_Traits<1818588780u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1986817381u>::k_valid_scopes, 0, "Level Control", 1818588780);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v29, 1986817381, 1818588780, &AMCP::Static_Class_Traits<1986817381u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1937072758u>::k_valid_scopes, 0, "Volume Control", 1986817381);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v30, 1937072758, 1818588780, &AMCP::Static_Class_Traits<1937072758u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1936028007u>::k_valid_scopes, 0, "LFE Volume Control", 1937072758);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v31, 1936028007, 1818588780, &AMCP::Static_Class_Traits<1936028007u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1953458028u>::k_valid_scopes, 0, "Sidetone EQ Gain Control", 1936028007);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v32, 1953458028, 1633907820, &AMCP::Static_Class_Traits<1953458028u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1836414053u>::k_valid_scopes, 0, "Boolean Control", 1953458028);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v33, 1836414053, 1953458028, &AMCP::Static_Class_Traits<1836414053u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1936682095u>::k_valid_scopes, 0, "Mute Control", 1836414053);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v34, 1936682095, 1953458028, &AMCP::Static_Class_Traits<1936682095u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1784767339u>::k_valid_scopes, 0, "Solo Control", 1936682095);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v35, 1784767339, 1953458028, &AMCP::Static_Class_Traits<1784767339u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1937072749u>::k_valid_scopes, 0, "Jack Control", 1784767339);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v36, 1937072749, 1953458028, &AMCP::Static_Class_Traits<1937072749u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1702259059u>::k_valid_scopes, 0, "LFE Mute Control", 1937072749);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v37, 1702259059, 1953458028, &AMCP::Static_Class_Traits<1702259059u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1885888878u>::k_valid_scopes, 0, "Reference Stream Enable Control", 1702259059);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v38, 1885888878, 1953458028, &AMCP::Static_Class_Traits<1885888878u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1885893481u>::k_valid_scopes, 0, "Phantom Power Control", 1885888878);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v39, 1885893481, 1953458028, &AMCP::Static_Class_Traits<1885893481u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1668049264u>::k_valid_scopes, 0, "Phase Invert Control", 1885893481);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v40, 1668049264, 1953458028, &AMCP::Static_Class_Traits<1668049264u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1952541794u>::k_valid_scopes, 0, "Clip Light Control", 1668049264);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v41, 1952541794, 1953458028, &AMCP::Static_Class_Traits<1952541794u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1819504226u>::k_valid_scopes, 0, "Talk Back Control", 1952541794);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v42, 1819504226, 1953458028, &AMCP::Static_Class_Traits<1819504226u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1650602615u>::k_valid_scopes, 0, "Listen Back Control", 1819504226);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v43, 1650602615, 1953458028, &AMCP::Static_Class_Traits<1650602615u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1999790690u>::k_valid_scopes, 0, "bb2w Control", 1650602615);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v44, 1999790690, 1953458028, &AMCP::Static_Class_Traits<1999790690u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1815241314u>::k_valid_scopes, 0, "w2bb Control", 1999790690);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v45, 1815241314, 1953458028, &AMCP::Static_Class_Traits<1815241314u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1718432370u>::k_valid_scopes, 0, "l2bb Control", 1815241314);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v46, 1718432370, 1953458028, &AMCP::Static_Class_Traits<1718432370u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1684895092u>::k_valid_scopes, 0, "fm2r Control", 1718432370);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v47, 1684895092, 1953458028, &AMCP::Static_Class_Traits<1684895092u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1936483188u>::k_valid_scopes, 0, "dmut Control", 1684895092);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v48, 1936483188, 1633907820, &AMCP::Static_Class_Traits<1936483188u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1685287523u>::k_valid_scopes, 0, "Selector Control", 1936483188);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v49, 1685287523, 1936483188, &AMCP::Static_Class_Traits<1685287523u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1684370292u>::k_valid_scopes, 0, "Data Source Control", 1685287523);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v50, 1684370292, 1936483188, &AMCP::Static_Class_Traits<1684370292u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1668047723u>::k_valid_scopes, 0, "Data Destination Control", 1684370292);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v51, 1668047723, 1936483188, &AMCP::Static_Class_Traits<1668047723u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1852601964u>::k_valid_scopes, 0, "Clock Source Control", 1668047723);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v52, 1852601964, 1936483188, &AMCP::Static_Class_Traits<1852601964u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1751740518u>::k_valid_scopes, 0, "Line Level Control", 1852601964);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v53, 1751740518, 1936483188, &AMCP::Static_Class_Traits<1751740518u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1936744814u>::k_valid_scopes, 0, "High Pass Filter Control", 1751740518);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v54, 1936744814, 1633907820, &AMCP::Static_Class_Traits<1936744814u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1651273579u>::k_valid_scopes, 0, "Stereo Pan Control", 1936744814);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v55, 1651273579, 1633907820, &AMCP::Static_Class_Traits<1651273579u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1936028002u>::k_valid_scopes, 0, "Block Control", 1651273579);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v56, 1936028002, 1651273579, &AMCP::Static_Class_Traits<1936028002u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1634627428u>::k_valid_scopes, 0, "Sidetone EQ Control", 1936028002);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v57, 1634627428, 1634689642, &AMCP::Static_Class_Traits<1634627428u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1768907630u>::k_valid_scopes, 0, "Node", 0);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v58, 1768907630, 1634627428, &AMCP::Static_Class_Traits<1768907630u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1684371054u>::k_valid_scopes, 0, "IOContext Node", 0);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v59, 1684371054, 1634627428, &AMCP::Static_Class_Traits<1684371054u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1919247982u>::k_valid_scopes, 0, "Device Node", 0);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v60, 1919247982, 1634627428, &AMCP::Static_Class_Traits<1919247982u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1685287022u>::k_valid_scopes, 0, "Reflector Node", 0);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v61, 1685287022, 1634627428, &AMCP::Static_Class_Traits<1685287022u>::k_valid_scopes, (uint64_t)"N4AMCP25Clock_Filter_One_Pole_IIRE", 0, "DSP Node", 0);
  v0 = operator new();
  *(_QWORD *)v0 = 0;
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)(v0 + 16) = 0;
  v13 = v0;
  v14 = 0;
  v1 = (char *)operator new(0xEB0uLL);
  *(_QWORD *)v0 = v1;
  *(_QWORD *)(v0 + 8) = v1;
  *(_QWORD *)(v0 + 16) = v1 + 3760;
  v2 = 0x1FFFFFFFFFFFFE2ALL;
  do
  {
    v3 = &v1[v2 * 8];
    *((_QWORD *)v3 + 470) = v62[v2];
    v3[3768] = v62[v2 + 1];
    *((_QWORD *)v3 + 472) = 0;
    *((_QWORD *)v3 + 474) = 0;
    *((_QWORD *)v3 + 473) = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v1[v2 * 8 + 3776], (const void *)v62[v2 + 2], v62[v2 + 3], (uint64_t)(v62[v2 + 3] - v62[v2 + 2]) >> 2);
    *((_DWORD *)v3 + 950) = v62[v2 + 5];
    v4 = (std::string *)&v1[v2 * 8 + 3808];
    v5 = (const std::string::value_type **)&v62[v2 + 6];
    if (SHIBYTE(v62[v2 + 8]) < 0)
    {
      std::string::__init_copy_ctor_external(v4, *v5, v62[v2 + 7]);
    }
    else
    {
      *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)v5;
      *((_QWORD *)v3 + 478) = v62[v2 + 8];
    }
    *(_DWORD *)&v1[v2 * 8 + 3832] = v62[v2 + 9];
    v2 += 10;
  }
  while (v2 * 8);
  *(_QWORD *)(v0 + 8) = v1 + 3760;
  v12 = 0;
  std::unique_ptr<std::vector<AMCP::Live_Class_Traits>>::reset[abi:ne180100]((void ***)&AMCP::get_stock_class_traits_list(void)::s_indesctructible_class_traits_list_ptr, (void **)v0);
  std::unique_ptr<std::vector<AMCP::Live_Class_Traits>>::reset[abi:ne180100](&v12, 0);
  v6 = 3760;
  do
  {
    v7 = (void **)&v15[v6];
    if (*((char *)&v13 + v6 + 7) < 0)
      operator delete(*(v7 - 4));
    v8 = *(v7 - 8);
    if (v8)
    {
      *(_QWORD *)&v15[v6 - 56] = v8;
      operator delete(v8);
    }
    v6 -= 80;
  }
  while (v6);
  v9 = *(uint64_t **)(AMCP::get_stock_class_traits_list(void)::s_indesctructible_class_traits_list_ptr + 8);
  v10 = 126
      - 2
      * __clz(0xCCCCCCCCCCCCCCCDLL* (((uint64_t)v9 - *(_QWORD *)AMCP::get_stock_class_traits_list(void)::s_indesctructible_class_traits_list_ptr) >> 4));
  if (v9 == *(uint64_t **)AMCP::get_stock_class_traits_list(void)::s_indesctructible_class_traits_list_ptr)
    v11 = 0;
  else
    v11 = v10;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Class_Traits *,false>(*(uint64_t **)AMCP::get_stock_class_traits_list(void)::s_indesctructible_class_traits_list_ptr, v9, v11, 1);
}

void sub_1B5C8A198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  uint64_t v12;
  unint64_t v14;
  void **v15;
  void *v16;

  std::vector<AMCP::Live_Class_Traits>::__destroy_vector::operator()[abi:ne180100](&a10);
  MEMORY[0x1B5E50688](v12, 0x20C40960023A9);
  v14 = 3760;
  while (1)
  {
    v15 = (void **)(&a12 + v14);
    if (SHIBYTE((&a10)[v14 / 8]) < 0)
      operator delete(*(v15 - 4));
    v16 = *(v15 - 8);
    if (v16)
    {
      *(_QWORD *)(&a12 + v14 - 56) = v16;
      operator delete(v16);
    }
    v14 -= 80;
    if (!v14)
      _Unwind_Resume(a1);
  }
}

uint64_t AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>(uint64_t a1, int a2, int a3, const void *a4, uint64_t a5, int a6, char *a7, int a8)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>((_QWORD *)(a1 + 16), a4, a5, (a5 - (uint64_t)a4) >> 2);
  *(_DWORD *)(a1 + 40) = a6;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 48), a7);
  *(_DWORD *)(a1 + 72) = a8;
  return a1;
}

void std::vector<AMCP::Live_Class_Traits>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:ne180100]<AMCP::Live_Class_Traits,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void ***std::unique_ptr<std::vector<AMCP::Live_Class_Traits>>::reset[abi:ne180100](void ***result, void **a2)
{
  void **v2;
  void **v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = v2;
    std::vector<AMCP::Live_Class_Traits>::__destroy_vector::operator()[abi:ne180100](&v3);
    JUMPOUT(0x1B5E50688);
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Class_Traits *,false>(uint64_t *a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  char v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  __int128 v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  unint64_t v27;
  uint64_t *v28;
  unsigned int v29;
  uint64_t *v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  void *v37;
  uint64_t *v38;
  __int128 v39;
  void *v40;
  BOOL v41;
  BOOL v42;
  int v43;
  void **v44;
  unsigned int v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t *v48;
  unsigned int v49;
  uint64_t *v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  void *v55;
  uint64_t *v56;
  __int128 v57;
  void *v58;
  uint64_t *v59;
  unsigned int v60;
  uint64_t *v61;
  BOOL v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t *v67;
  unsigned int v68;
  int v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  void **v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t *v78;
  void **v79;
  void **v80;
  void *v81;
  int64_t v82;
  int64_t v83;
  int64_t v84;
  uint64_t v85;
  uint64_t *v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t *v89;
  unsigned int v90;
  uint64_t *v91;
  _DWORD *v92;
  uint64_t v93;
  void *v94;
  void **v95;
  __int128 v96;
  unsigned int v97;
  unsigned int v98;
  void *v99;
  int64_t v100;
  uint64_t *v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  _QWORD *v109;
  void **v110;
  __int128 v111;
  void **v112;
  uint64_t *v113;
  uint64_t v114;
  void *v115;
  uint64_t *v116;
  __int128 v117;
  void *v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t *v121;
  unsigned int v122;
  uint64_t v123;
  int v124;
  uint64_t *v125;
  uint64_t v126;
  void *v127;
  void **v128;
  __int128 v129;
  void *v130;
  void *v131;
  _DWORD *v133;
  uint64_t *v134;
  uint64_t *v135;
  unsigned int v136;
  uint64_t v137;
  int v138;
  char v139;
  _DWORD *v140;
  int v141;
  _DWORD *v142;
  void *v143;
  _QWORD *v144;
  void **v145;
  _DWORD *v146;
  void *v147;
  _QWORD *v148;
  uint64_t *v149;
  uint64_t *v150;
  char *v151;
  char *v152;
  int v154;
  uint64_t v155;
  int v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  int v168;
  __int128 v169;
  char v170;
  char v171;
  void *v172;
  char v173;
  char v174;
  char v175;
  char v176;
  char v177;
  char v178;
  char v179;
  char v180;
  char v181;
  __int128 v182;
  uint64_t v183;
  char v184;
  uint64_t *v185;
  uint64_t *v186;
  char v187;
  uint64_t v188;
  char v189;
  int v190;
  char v191;
  __int128 v192;
  int v193;
  int v194;
  int v195;
  int v196;
  _BYTE v197[22];
  int v198;
  char v199;
  char v200;
  char v201;
  char v202;
  char v203;
  uint64_t v204;
  _BYTE v205[22];
  _BYTE v206[22];
  _BYTE v207[22];
  _BYTE v208[22];
  _BYTE v209[22];
  _BYTE v210[22];
  char v211;

  while (2)
  {
    v7 = a1;
    v149 = a1 + 20;
    v150 = a1 + 10;
    v8 = a1 + 2;
    v9 = a1 + 6;
    v148 = a1 + 7;
    v151 = (char *)a1 + 49;
    v152 = (char *)a1 + 4;
LABEL_2:
    v10 = (char *)a2 - (char *)v7;
    v11 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a2 - (char *)v7) >> 4);
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v60 = *((_DWORD *)a2 - 20);
        v59 = a2 - 10;
        if (v60 < *(_DWORD *)v7)
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Live_Class_Traits *&,AMCP::Live_Class_Traits *&>(v7, v59);
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Class_Traits *>(v7, v7 + 10, a2 - 10);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Class_Traits *>(v7, v7 + 10, v7 + 20, a2 - 10);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Class_Traits *>(v7, v7 + 10, v7 + 20, v7 + 30, a2 - 10);
        return;
      default:
        if (v10 <= 1919)
        {
          v61 = v7 + 10;
          v63 = v7 == a2 || v61 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v63)
            {
              v64 = 0;
              v65 = v7;
              do
              {
                v66 = a2;
                v67 = v61;
                v68 = *((_DWORD *)v65 + 20);
                if (v68 < *(_DWORD *)v65)
                {
                  v195 = *((_DWORD *)v61 + 1);
                  v201 = *((_BYTE *)v61 + 8);
                  v172 = (void *)v65[12];
                  v166 = *(_OWORD *)(v65 + 13);
                  v65[12] = 0;
                  v65[13] = 0;
                  v65[14] = 0;
                  v69 = *((_DWORD *)v65 + 30);
                  v184 = *((_BYTE *)v65 + 128);
                  *(_OWORD *)v207 = *(_OWORD *)((char *)v65 + 129);
                  *(_QWORD *)&v207[14] = *(uint64_t *)((char *)v65 + 143);
                  v178 = *((_BYTE *)v65 + 151);
                  v65[17] = 0;
                  v65[18] = 0;
                  v65[16] = 0;
                  v70 = v64;
                  v71 = *((_DWORD *)v65 + 38);
                  while (1)
                  {
                    v72 = v70;
                    v73 = (uint64_t)v7 + v70;
                    *(_QWORD *)(v73 + 80) = *(uint64_t *)((char *)v7 + v70);
                    *(_BYTE *)(v73 + 88) = *((_BYTE *)v7 + v70 + 8);
                    v74 = *(void **)((char *)v7 + v70 + 96);
                    if (v74)
                    {
                      *(_QWORD *)(v73 + 104) = v74;
                      operator delete(v74);
                      *(_QWORD *)(v73 + 112) = 0;
                    }
                    *(_OWORD *)(v73 + 96) = *(_OWORD *)(v73 + 16);
                    *(_QWORD *)(v73 + 112) = *(_QWORD *)(v73 + 32);
                    *(_QWORD *)(v73 + 16) = 0;
                    *(_QWORD *)(v73 + 24) = 0;
                    *(_QWORD *)(v73 + 32) = 0;
                    *(_DWORD *)(v73 + 120) = *(_DWORD *)(v73 + 40);
                    v75 = (void **)(v73 + 128);
                    if (*(char *)(v73 + 151) < 0)
                      operator delete(*v75);
                    v76 = (uint64_t)v7 + v72;
                    *(_OWORD *)v75 = *(_OWORD *)((char *)v7 + v72 + 48);
                    *(_QWORD *)(v73 + 144) = *(uint64_t *)((char *)v7 + v72 + 64);
                    *(_BYTE *)(v76 + 71) = 0;
                    *(_BYTE *)(v76 + 48) = 0;
                    *(_DWORD *)(v76 + 152) = *(_DWORD *)((char *)v7 + v72 + 72);
                    if (!v72)
                      break;
                    v77 = *(_DWORD *)(v76 - 80);
                    v70 = v72 - 80;
                    if (v68 >= v77)
                    {
                      v78 = (uint64_t *)((char *)v7 + v72);
                      v79 = (void **)((char *)v7 + v72 + 16);
                      v80 = (void **)((char *)v7 + v72 + 48);
                      goto LABEL_95;
                    }
                  }
                  v79 = (void **)(v76 + 16);
                  v80 = (void **)(v76 + 48);
                  v78 = v7;
LABEL_95:
                  *(_DWORD *)v78 = v68;
                  *((_DWORD *)v78 + 1) = v195;
                  *((_BYTE *)v78 + 8) = v201;
                  v81 = *v79;
                  if (*v79)
                  {
                    v78[3] = (uint64_t)v81;
                    operator delete(v81);
                  }
                  *v79 = v172;
                  *(_OWORD *)(v78 + 3) = v166;
                  *((_DWORD *)v78 + 10) = v69;
                  if (*((char *)v78 + 71) < 0)
                    operator delete(*v80);
                  *(_BYTE *)v80 = v184;
                  *(_OWORD *)((char *)v78 + 49) = *(_OWORD *)v207;
                  *(uint64_t *)((char *)v78 + 63) = *(_QWORD *)&v207[14];
                  *((_BYTE *)v78 + 71) = v178;
                  *((_DWORD *)v78 + 18) = v71;
                }
                v61 = v67 + 10;
                v64 += 80;
                v65 = v67;
                a2 = v66;
              }
              while (v61 != v66);
            }
          }
          else if (!v63)
          {
            v133 = v7 + 19;
            do
            {
              v134 = a2;
              v135 = v61;
              v136 = *((_DWORD *)v7 + 20);
              if (v136 < *(_DWORD *)v7)
              {
                v198 = *((_DWORD *)v61 + 1);
                v203 = *((_BYTE *)v61 + 8);
                v182 = *((_OWORD *)v7 + 6);
                v137 = v7[14];
                v7[12] = 0;
                v7[13] = 0;
                v7[14] = 0;
                v138 = *((_DWORD *)v7 + 30);
                v187 = *((_BYTE *)v7 + 128);
                *(_OWORD *)v210 = *(_OWORD *)((char *)v7 + 129);
                *(_QWORD *)&v210[14] = *(uint64_t *)((char *)v7 + 143);
                v139 = *((_BYTE *)v7 + 151);
                v7[17] = 0;
                v7[18] = 0;
                v7[16] = 0;
                v140 = v133;
                v141 = *((_DWORD *)v7 + 38);
                do
                {
                  v142 = v140;
                  *((_QWORD *)v140 - 9) = *((_QWORD *)v140 - 19);
                  *((_BYTE *)v140 - 64) = *((_BYTE *)v140 - 144);
                  v143 = (void *)*((_QWORD *)v140 - 7);
                  if (v143)
                  {
                    *((_QWORD *)v140 - 6) = v143;
                    operator delete(v143);
                    *((_QWORD *)v140 - 5) = 0;
                  }
                  v144 = v140 - 34;
                  *(_OWORD *)(v140 - 14) = *(_OWORD *)(v140 - 34);
                  *((_QWORD *)v140 - 5) = *((_QWORD *)v140 - 15);
                  v144[1] = 0;
                  v144[2] = 0;
                  *v144 = 0;
                  *(v140 - 8) = *(v140 - 28);
                  v145 = (void **)(v140 - 6);
                  if (*((char *)v142 - 1) < 0)
                    operator delete(*v145);
                  *(_OWORD *)v145 = *(_OWORD *)(v142 - 26);
                  *((_QWORD *)v142 - 1) = *((_QWORD *)v142 - 11);
                  *((_BYTE *)v142 - 81) = 0;
                  *((_BYTE *)v142 - 104) = 0;
                  v140 = v142 - 20;
                  *v142 = *(v142 - 20);
                }
                while (v136 < *(v142 - 58));
                v146 = v142 - 38;
                *(v140 - 18) = v136;
                *((_BYTE *)v146 + 8) = v203;
                v146[1] = v198;
                v147 = (void *)*((_QWORD *)v140 - 7);
                if (v147)
                {
                  *((_QWORD *)v146 + 3) = v147;
                  operator delete(v147);
                }
                *(_OWORD *)(v140 - 14) = v182;
                *((_QWORD *)v140 - 5) = v137;
                *(v140 - 8) = v138;
                if (*((char *)v140 - 1) < 0)
                  operator delete(*((void **)v140 - 3));
                *((_BYTE *)v140 - 24) = v187;
                *(_QWORD *)((char *)v146 + 63) = *(_QWORD *)&v210[14];
                *(_OWORD *)((char *)v146 + 49) = *(_OWORD *)v210;
                *((_BYTE *)v140 - 1) = v139;
                *v140 = v141;
              }
              v61 = v135 + 10;
              v133 += 20;
              v7 = v135;
              a2 = v134;
            }
            while (v61 != v134);
          }
          return;
        }
        if (!a3)
        {
          if (v7 != a2)
          {
            v185 = a2;
            v82 = (v11 - 2) >> 1;
            v83 = v82;
            do
            {
              v84 = v83;
              if (v82 >= v83)
              {
                v85 = (2 * v83) | 1;
                v86 = &v7[10 * v85];
                if (2 * v84 + 2 >= (uint64_t)v11)
                {
                  v87 = *(_DWORD *)v86;
                }
                else
                {
                  v87 = *(_DWORD *)v86;
                  v88 = *((_DWORD *)v86 + 20);
                  if (*(_DWORD *)v86 <= v88)
                    v87 = *((_DWORD *)v86 + 20);
                  if (*(_DWORD *)v86 < v88)
                  {
                    v86 += 10;
                    v85 = 2 * v84 + 2;
                  }
                }
                v89 = &v7[10 * v84];
                v90 = *(_DWORD *)v89;
                if (v87 >= *(_DWORD *)v89)
                {
                  v202 = *((_BYTE *)v89 + 8);
                  v196 = *((_DWORD *)v89 + 1);
                  v91 = &v7[10 * v84];
                  v167 = *((_OWORD *)v91 + 1);
                  v161 = v91[4];
                  v91[3] = 0;
                  v91[4] = 0;
                  v91[2] = 0;
                  v154 = *((_DWORD *)v91 + 10);
                  v179 = *((_BYTE *)v91 + 48);
                  *(_QWORD *)&v208[14] = *(uint64_t *)((char *)v89 + 63);
                  *(_OWORD *)v208 = *(_OWORD *)((char *)v89 + 49);
                  v173 = *((_BYTE *)v89 + 71);
                  v91[6] = 0;
                  v91[7] = 0;
                  v91[8] = 0;
                  v157 = *((_DWORD *)v91 + 18);
                  do
                  {
                    v92 = v86;
                    v93 = *v86;
                    *((_BYTE *)v89 + 8) = *((_BYTE *)v92 + 8);
                    *v89 = v93;
                    v94 = (void *)v89[2];
                    if (v94)
                    {
                      v89[3] = (uint64_t)v94;
                      operator delete(v94);
                      v89[2] = 0;
                      v89[3] = 0;
                      v89[4] = 0;
                    }
                    *((_OWORD *)v89 + 1) = *((_OWORD *)v92 + 1);
                    v89[4] = *((_QWORD *)v92 + 4);
                    *((_QWORD *)v92 + 3) = 0;
                    *((_QWORD *)v92 + 4) = 0;
                    *((_QWORD *)v92 + 2) = 0;
                    *((_DWORD *)v89 + 10) = v92[10];
                    v95 = (void **)(v89 + 6);
                    if (*((char *)v89 + 71) < 0)
                      operator delete(*v95);
                    v96 = *((_OWORD *)v92 + 3);
                    v89[8] = *((_QWORD *)v92 + 8);
                    *(_OWORD *)v95 = v96;
                    *((_BYTE *)v92 + 71) = 0;
                    *((_BYTE *)v92 + 48) = 0;
                    *((_DWORD *)v89 + 18) = v92[18];
                    if (v82 < v85)
                      break;
                    v86 = &v7[10 * ((2 * v85) | 1)];
                    if (2 * v85 + 2 >= (uint64_t)v11)
                    {
                      v97 = *(_DWORD *)v86;
                      v85 = (2 * v85) | 1;
                    }
                    else
                    {
                      v97 = *(_DWORD *)v86;
                      v98 = *((_DWORD *)v86 + 20);
                      if (*(_DWORD *)v86 <= v98)
                        v97 = *((_DWORD *)v86 + 20);
                      if (*(_DWORD *)v86 >= v98)
                      {
                        v85 = (2 * v85) | 1;
                      }
                      else
                      {
                        v86 += 10;
                        v85 = 2 * v85 + 2;
                      }
                    }
                    v89 = (uint64_t *)v92;
                  }
                  while (v97 >= v90);
                  *v92 = v90;
                  v92[1] = v196;
                  *((_BYTE *)v92 + 8) = v202;
                  v99 = (void *)*((_QWORD *)v92 + 2);
                  if (v99)
                  {
                    *((_QWORD *)v92 + 3) = v99;
                    operator delete(v99);
                  }
                  *((_OWORD *)v92 + 1) = v167;
                  *((_QWORD *)v92 + 4) = v161;
                  v92[10] = v154;
                  if (*((char *)v92 + 71) < 0)
                    operator delete(*((void **)v92 + 6));
                  *((_BYTE *)v92 + 48) = v179;
                  *(_OWORD *)((char *)v92 + 49) = *(_OWORD *)v208;
                  *(_QWORD *)((char *)v92 + 63) = *(_QWORD *)&v208[14];
                  *((_BYTE *)v92 + 71) = v173;
                  v92[18] = v157;
                }
              }
              v83 = v84 - 1;
            }
            while (v84);
            v100 = v10 / 0x50uLL;
            v101 = v185;
            do
            {
              if (v100 >= 2)
              {
                v186 = v101;
                v102 = 0;
                v189 = *((_BYTE *)v7 + 8);
                v188 = *v7;
                v158 = v7[3];
                v162 = v7[2];
                v155 = v7[4];
                v7[2] = 0;
                v7[3] = 0;
                v7[4] = 0;
                v103 = *((_DWORD *)v7 + 10);
                v174 = *((_BYTE *)v7 + 48);
                *(_OWORD *)v197 = *(_OWORD *)((char *)v7 + 49);
                *(_QWORD *)&v197[14] = *(uint64_t *)((char *)v7 + 63);
                v180 = *((_BYTE *)v7 + 71);
                v7[6] = 0;
                v7[7] = 0;
                v7[8] = 0;
                v104 = (uint64_t)v7;
                v168 = *((_DWORD *)v7 + 18);
                do
                {
                  v105 = v104 + 80 * v102 + 80;
                  v106 = 2 * v102;
                  v102 = (2 * v102) | 1;
                  if (v106 + 2 < v100 && *(_DWORD *)v105 < *(_DWORD *)(v105 + 80))
                  {
                    v105 += 80;
                    v102 = v106 + 2;
                  }
                  v107 = *(_QWORD *)v105;
                  *(_BYTE *)(v104 + 8) = *(_BYTE *)(v105 + 8);
                  *(_QWORD *)v104 = v107;
                  v108 = *(void **)(v104 + 16);
                  if (v108)
                  {
                    *(_QWORD *)(v104 + 24) = v108;
                    operator delete(v108);
                    *(_QWORD *)(v104 + 16) = 0;
                    *(_QWORD *)(v104 + 24) = 0;
                    *(_QWORD *)(v104 + 32) = 0;
                  }
                  v109 = (_QWORD *)(v105 + 16);
                  *(_OWORD *)(v104 + 16) = *(_OWORD *)(v105 + 16);
                  *(_QWORD *)(v104 + 32) = *(_QWORD *)(v105 + 32);
                  *(_QWORD *)(v105 + 24) = 0;
                  *(_QWORD *)(v105 + 32) = 0;
                  *(_QWORD *)(v105 + 16) = 0;
                  *(_DWORD *)(v104 + 40) = *(_DWORD *)(v105 + 40);
                  v110 = (void **)(v104 + 48);
                  if (*(char *)(v104 + 71) < 0)
                    operator delete(*v110);
                  v111 = *(_OWORD *)(v105 + 48);
                  *(_QWORD *)(v104 + 64) = *(_QWORD *)(v105 + 64);
                  *(_OWORD *)v110 = v111;
                  *(_BYTE *)(v105 + 71) = 0;
                  *(_BYTE *)(v105 + 48) = 0;
                  *(_DWORD *)(v104 + 72) = *(_DWORD *)(v105 + 72);
                  v104 = v105;
                }
                while (v102 <= (uint64_t)((unint64_t)(v100 - 2) >> 1));
                v112 = (void **)(v105 + 48);
                v113 = v186 - 10;
                if ((uint64_t *)v105 == v186 - 10)
                {
                  *(_BYTE *)(v105 + 8) = v189;
                  *(_QWORD *)v105 = v188;
                  v131 = *(void **)(v105 + 16);
                  if (v131)
                  {
                    *(_QWORD *)(v105 + 24) = v131;
                    operator delete(v131);
                  }
                  *(_QWORD *)(v105 + 16) = v162;
                  *(_QWORD *)(v105 + 24) = v158;
                  *(_QWORD *)(v105 + 32) = v155;
                  *(_DWORD *)(v105 + 40) = v103;
                  if (*(char *)(v105 + 71) < 0)
                    operator delete(*v112);
                  *(_BYTE *)(v105 + 48) = v174;
                  *(_QWORD *)(v105 + 63) = *(_QWORD *)&v197[14];
                  *(_OWORD *)(v105 + 49) = *(_OWORD *)v197;
                  *(_BYTE *)(v105 + 71) = v180;
                  *(_DWORD *)(v105 + 72) = v168;
                }
                else
                {
                  v114 = *v113;
                  *(_BYTE *)(v105 + 8) = *((_BYTE *)v186 - 72);
                  *(_QWORD *)v105 = v114;
                  v115 = *(void **)(v105 + 16);
                  if (v115)
                  {
                    *(_QWORD *)(v105 + 24) = v115;
                    operator delete(v115);
                    *v109 = 0;
                    *(_QWORD *)(v105 + 24) = 0;
                    *(_QWORD *)(v105 + 32) = 0;
                  }
                  v116 = v186 - 8;
                  *(_OWORD *)(v105 + 16) = *((_OWORD *)v186 - 4);
                  *(_QWORD *)(v105 + 32) = *(v186 - 6);
                  v116[1] = 0;
                  v116[2] = 0;
                  *v116 = 0;
                  *(_DWORD *)(v105 + 40) = *((_DWORD *)v186 - 10);
                  if (*(char *)(v105 + 71) < 0)
                    operator delete(*v112);
                  v117 = *((_OWORD *)v186 - 2);
                  *(_QWORD *)(v105 + 64) = *(v186 - 2);
                  *(_OWORD *)v112 = v117;
                  *((_BYTE *)v186 - 9) = 0;
                  *((_BYTE *)v186 - 32) = 0;
                  *(_DWORD *)(v105 + 72) = *((_DWORD *)v186 - 2);
                  *((_BYTE *)v186 - 72) = v189;
                  *v113 = v188;
                  v118 = (void *)*(v186 - 8);
                  if (v118)
                  {
                    *(v186 - 7) = (uint64_t)v118;
                    operator delete(v118);
                  }
                  *(v186 - 8) = v162;
                  *(v186 - 7) = v158;
                  *(v186 - 6) = v155;
                  *((_DWORD *)v186 - 10) = v103;
                  if (*((char *)v186 - 9) < 0)
                    operator delete((void *)*(v186 - 4));
                  *((_BYTE *)v186 - 32) = v174;
                  *(uint64_t *)((char *)v186 - 17) = *(_QWORD *)&v197[14];
                  *(_OWORD *)((char *)v186 - 31) = *(_OWORD *)v197;
                  *((_BYTE *)v186 - 9) = v180;
                  *((_DWORD *)v186 - 2) = v168;
                  v119 = v105 + 80 - (_QWORD)v7;
                  if (v119 >= 81)
                  {
                    v120 = (unint64_t)(-2 - 0x3333333333333333 * (v119 >> 4)) >> 1;
                    v121 = &v7[10 * v120];
                    v122 = *(_DWORD *)v105;
                    if (*(_DWORD *)v121 < *(_DWORD *)v105)
                    {
                      v191 = *(_BYTE *)(v105 + 8);
                      v190 = *(_DWORD *)(v105 + 4);
                      v169 = *(_OWORD *)(v105 + 16);
                      v123 = *(_QWORD *)(v105 + 32);
                      *v109 = 0;
                      *(_QWORD *)(v105 + 24) = 0;
                      *(_QWORD *)(v105 + 32) = 0;
                      v124 = *(_DWORD *)(v105 + 40);
                      v181 = *(_BYTE *)(v105 + 48);
                      *(_OWORD *)v209 = *(_OWORD *)(v105 + 49);
                      *(_QWORD *)&v209[14] = *(_QWORD *)(v105 + 63);
                      v175 = *(_BYTE *)(v105 + 71);
                      *v112 = 0;
                      *(_QWORD *)(v105 + 56) = 0;
                      *(_QWORD *)(v105 + 64) = 0;
                      v163 = *(_DWORD *)(v105 + 72);
                      do
                      {
                        v125 = v121;
                        v126 = *v121;
                        *(_BYTE *)(v105 + 8) = *((_BYTE *)v125 + 8);
                        *(_QWORD *)v105 = v126;
                        v127 = *(void **)(v105 + 16);
                        if (v127)
                        {
                          *(_QWORD *)(v105 + 24) = v127;
                          operator delete(v127);
                          *(_QWORD *)(v105 + 16) = 0;
                          *(_QWORD *)(v105 + 24) = 0;
                          *(_QWORD *)(v105 + 32) = 0;
                        }
                        *(_OWORD *)(v105 + 16) = *((_OWORD *)v125 + 1);
                        *(_QWORD *)(v105 + 32) = v125[4];
                        v125[3] = 0;
                        v125[4] = 0;
                        v125[2] = 0;
                        *(_DWORD *)(v105 + 40) = *((_DWORD *)v125 + 10);
                        v128 = (void **)(v105 + 48);
                        if (*(char *)(v105 + 71) < 0)
                          operator delete(*v128);
                        v129 = *((_OWORD *)v125 + 3);
                        *(_QWORD *)(v105 + 64) = v125[8];
                        *(_OWORD *)v128 = v129;
                        *((_BYTE *)v125 + 71) = 0;
                        *((_BYTE *)v125 + 48) = 0;
                        *(_DWORD *)(v105 + 72) = *((_DWORD *)v125 + 18);
                        if (!v120)
                          break;
                        v120 = (v120 - 1) >> 1;
                        v121 = &v7[10 * v120];
                        v105 = (uint64_t)v125;
                      }
                      while (*(_DWORD *)v121 < v122);
                      *(_DWORD *)v125 = v122;
                      *((_DWORD *)v125 + 1) = v190;
                      *((_BYTE *)v125 + 8) = v191;
                      v130 = (void *)v125[2];
                      if (v130)
                      {
                        v125[3] = (uint64_t)v130;
                        operator delete(v130);
                      }
                      *((_OWORD *)v125 + 1) = v169;
                      v125[4] = v123;
                      *((_DWORD *)v125 + 10) = v124;
                      if (*((char *)v125 + 71) < 0)
                        operator delete((void *)v125[6]);
                      *((_BYTE *)v125 + 48) = v181;
                      *(_OWORD *)((char *)v125 + 49) = *(_OWORD *)v209;
                      *(uint64_t *)((char *)v125 + 63) = *(_QWORD *)&v209[14];
                      *((_BYTE *)v125 + 71) = v175;
                      *((_DWORD *)v125 + 18) = v163;
                    }
                  }
                }
                v101 = v186;
              }
              v101 -= 10;
            }
            while ((unint64_t)v100-- > 2);
          }
          return;
        }
        v12 = &v7[10 * (v11 >> 1)];
        if ((unint64_t)v10 < 0x2801)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Class_Traits *>(&v7[10 * (v11 >> 1)], v7, a2 - 10);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Class_Traits *>(v7, &v7[10 * (v11 >> 1)], a2 - 10);
          v13 = &v7[10 * (v11 >> 1)];
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Class_Traits *>(v150, v13 - 10, a2 - 20);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Class_Traits *>(v149, v13 + 10, a2 - 30);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Class_Traits *>(v13 - 10, v13, v13 + 10);
          v211 = *((_BYTE *)v7 + 8);
          v204 = *v7;
          v14 = *((_OWORD *)v7 + 1);
          v15 = v7[4];
          v8[1] = 0;
          v8[2] = 0;
          *v8 = 0;
          v16 = *((_DWORD *)v7 + 10);
          v17 = v7[6];
          *(_QWORD *)&v192 = *v148;
          *(_QWORD *)((char *)&v192 + 7) = *(_QWORD *)((char *)v148 + 7);
          v18 = *((_BYTE *)v7 + 71);
          v9[1] = 0;
          v9[2] = 0;
          *v9 = 0;
          v19 = *((_DWORD *)v7 + 18);
          v20 = *v12;
          *((_BYTE *)v7 + 8) = *((_BYTE *)v12 + 8);
          *v7 = v20;
          v21 = v13[4];
          v22 = *((_DWORD *)v13 + 10);
          *((_OWORD *)v7 + 1) = *((_OWORD *)v13 + 1);
          v7[4] = v21;
          v13[2] = 0;
          v13[3] = 0;
          v13[4] = 0;
          *((_DWORD *)v7 + 10) = v22;
          LODWORD(v21) = *((_DWORD *)v13 + 18);
          v23 = *((_OWORD *)v13 + 3);
          v9[2] = v13[8];
          *(_OWORD *)v9 = v23;
          *((_BYTE *)v12 + 71) = 0;
          *((_BYTE *)v13 + 48) = 0;
          *((_DWORD *)v7 + 18) = v21;
          *((_BYTE *)v12 + 8) = v211;
          *v12 = v204;
          *((_OWORD *)v13 + 1) = v14;
          v13[4] = v15;
          *((_DWORD *)v13 + 10) = v16;
          v13[6] = v17;
          *(uint64_t *)((char *)v13 + 63) = *(_QWORD *)((char *)&v192 + 7);
          v13[7] = v192;
          *((_BYTE *)v12 + 71) = v18;
          *((_DWORD *)v13 + 18) = v19;
        }
        v24 = a3 - 1;
        v183 = v24;
        if ((a4 & 1) == 0)
        {
          v25 = *(_DWORD *)v7;
          if (*((_DWORD *)v7 - 20) < *(_DWORD *)v7)
            goto LABEL_11;
          v165 = *((_OWORD *)v7 + 1);
          v194 = *((_DWORD *)v7 + 1);
          v200 = *((_BYTE *)v7 + 8);
          v160 = v7[4];
          v7[2] = 0;
          v7[3] = 0;
          v7[4] = 0;
          v43 = *((_DWORD *)v7 + 10);
          v44 = (void **)(v7 + 6);
          v177 = *((_BYTE *)v7 + 48);
          *(_QWORD *)&v206[14] = *(uint64_t *)((char *)v7 + 63);
          *(_OWORD *)v206 = *(_OWORD *)((char *)v7 + 49);
          v171 = *((_BYTE *)v7 + 71);
          v7[6] = 0;
          v7[7] = 0;
          v7[8] = 0;
          if (v25 >= *((_DWORD *)a2 - 20))
          {
            v46 = v7 + 10;
            do
            {
              a1 = v46;
              if (v46 >= a2)
                break;
              v46 += 10;
            }
            while (v25 >= *(_DWORD *)a1);
          }
          else
          {
            a1 = v7;
            do
            {
              v45 = *((_DWORD *)a1 + 20);
              a1 += 10;
            }
            while (v25 >= v45);
          }
          v47 = v24;
          v48 = a2;
          if (a1 < a2)
          {
            v48 = a2;
            do
            {
              v49 = *((_DWORD *)v48 - 20);
              v48 -= 10;
            }
            while (v25 < v49);
          }
          v50 = a2;
          v51 = *((_DWORD *)v7 + 18);
          while (a1 < v48)
          {
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Live_Class_Traits *&,AMCP::Live_Class_Traits *&>(a1, v48);
            do
            {
              v52 = *((_DWORD *)a1 + 20);
              a1 += 10;
            }
            while (v25 >= v52);
            do
            {
              v53 = *((_DWORD *)v48 - 20);
              v48 -= 10;
            }
            while (v25 < v53);
          }
          a3 = v47;
          if (a1 - 10 != v7)
          {
            v54 = *(a1 - 10);
            *((_BYTE *)v7 + 8) = *((_BYTE *)a1 - 72);
            *v7 = v54;
            v55 = (void *)v7[2];
            if (v55)
            {
              v7[3] = (uint64_t)v55;
              operator delete(v55);
              v7[2] = 0;
              v7[3] = 0;
              v7[4] = 0;
            }
            v56 = a1 - 8;
            *((_OWORD *)v7 + 1) = *((_OWORD *)a1 - 4);
            v7[4] = *(a1 - 6);
            v56[1] = 0;
            v56[2] = 0;
            *v56 = 0;
            *((_DWORD *)v7 + 10) = *((_DWORD *)a1 - 10);
            if (*((char *)v7 + 71) < 0)
              operator delete(*v44);
            v57 = *((_OWORD *)a1 - 2);
            v7[8] = *(a1 - 2);
            *(_OWORD *)v44 = v57;
            *((_BYTE *)a1 - 9) = 0;
            *((_BYTE *)a1 - 32) = 0;
            *((_DWORD *)v7 + 18) = *((_DWORD *)a1 - 2);
          }
          *((_DWORD *)a1 - 20) = v25;
          *((_BYTE *)a1 - 72) = v200;
          *((_DWORD *)a1 - 19) = v194;
          v58 = (void *)*(a1 - 8);
          if (v58)
          {
            *(a1 - 7) = (uint64_t)v58;
            operator delete(v58);
          }
          *((_OWORD *)a1 - 4) = v165;
          *(a1 - 6) = v160;
          *((_DWORD *)a1 - 10) = v43;
          if (*((char *)a1 - 9) < 0)
            operator delete((void *)*(a1 - 4));
          a4 = 0;
          *((_BYTE *)a1 - 32) = v177;
          *(uint64_t *)((char *)a1 - 17) = *(_QWORD *)&v206[14];
          *(_OWORD *)((char *)a1 - 31) = *(_OWORD *)v206;
          *((_BYTE *)a1 - 9) = v171;
          *((_DWORD *)a1 - 2) = v51;
          a2 = v50;
          continue;
        }
        v25 = *(_DWORD *)v7;
LABEL_11:
        v193 = *(_DWORD *)v152;
        v199 = v152[4];
        v164 = *((_OWORD *)v7 + 1);
        v159 = v7[4];
        v8[1] = 0;
        v8[2] = 0;
        *v8 = 0;
        v26 = *((_DWORD *)v7 + 10);
        v176 = *((_BYTE *)v7 + 48);
        *(_OWORD *)v205 = *(_OWORD *)v151;
        *(_QWORD *)&v205[14] = *(_QWORD *)(v151 + 14);
        v170 = *((_BYTE *)v7 + 71);
        *v9 = 0;
        v9[1] = 0;
        v9[2] = 0;
        v27 = (unint64_t)v7;
        v156 = *((_DWORD *)v7 + 18);
        do
        {
          v28 = (uint64_t *)v27;
          v29 = *(_DWORD *)(v27 + 80);
          v27 += 80;
        }
        while (v29 < v25);
        v30 = a2;
        if (v28 == v7)
        {
          do
          {
            if (v27 >= (unint64_t)a2)
              break;
            v32 = *((_DWORD *)a2 - 20);
            a2 -= 10;
          }
          while (v32 >= v25);
        }
        else
        {
          do
          {
            v31 = *((_DWORD *)a2 - 20);
            a2 -= 10;
          }
          while (v31 >= v25);
        }
        if (v27 >= (unint64_t)a2)
        {
          a1 = (uint64_t *)v27;
        }
        else
        {
          v33 = a2;
          a1 = (uint64_t *)v27;
          do
          {
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Live_Class_Traits *&,AMCP::Live_Class_Traits *&>(a1, v33);
            do
            {
              v34 = *((_DWORD *)a1 + 20);
              a1 += 10;
            }
            while (v34 < v25);
            do
            {
              v35 = *((_DWORD *)v33 - 20);
              v33 -= 10;
            }
            while (v35 >= v25);
          }
          while (a1 < v33);
        }
        if (a1 - 10 != v7)
        {
          v36 = *(a1 - 10);
          *((_BYTE *)v7 + 8) = *((_BYTE *)a1 - 72);
          *v7 = v36;
          v37 = (void *)v7[2];
          if (v37)
          {
            v7[3] = (uint64_t)v37;
            operator delete(v37);
            *v8 = 0;
            v8[1] = 0;
            v8[2] = 0;
          }
          v38 = a1 - 8;
          *((_OWORD *)v7 + 1) = *((_OWORD *)a1 - 4);
          v7[4] = *(a1 - 6);
          v38[1] = 0;
          v38[2] = 0;
          *v38 = 0;
          *((_DWORD *)v7 + 10) = *((_DWORD *)a1 - 10);
          if (*((char *)v7 + 71) < 0)
            operator delete((void *)*v9);
          v39 = *((_OWORD *)a1 - 2);
          v9[2] = *(a1 - 2);
          *(_OWORD *)v9 = v39;
          *((_BYTE *)a1 - 9) = 0;
          *((_BYTE *)a1 - 32) = 0;
          *((_DWORD *)v7 + 18) = *((_DWORD *)a1 - 2);
        }
        *((_DWORD *)a1 - 20) = v25;
        *((_BYTE *)a1 - 72) = v199;
        *((_DWORD *)a1 - 19) = v193;
        v40 = (void *)*(a1 - 8);
        if (v40)
        {
          *(a1 - 7) = (uint64_t)v40;
          operator delete(v40);
        }
        *((_OWORD *)a1 - 4) = v164;
        *(a1 - 6) = v159;
        *((_DWORD *)a1 - 10) = v26;
        if (*((char *)a1 - 9) < 0)
          operator delete((void *)*(a1 - 4));
        *((_BYTE *)a1 - 32) = v176;
        *(uint64_t *)((char *)a1 - 17) = *(_QWORD *)&v205[14];
        *(_OWORD *)((char *)a1 - 31) = *(_OWORD *)v205;
        *((_BYTE *)a1 - 9) = v170;
        *((_DWORD *)a1 - 2) = v156;
        v41 = v27 >= (unint64_t)a2;
        a2 = v30;
        a3 = v183;
        if (!v41)
        {
LABEL_42:
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Class_Traits *,false>(v7, a1 - 10, v183, a4 & 1);
          a4 = 0;
          continue;
        }
        v42 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Class_Traits *>(v7, a1 - 10);
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Class_Traits *>(a1, v30))
        {
          if (v42)
            continue;
          goto LABEL_42;
        }
        a2 = a1 - 10;
        if (!v42)
          goto LABEL_2;
        return;
    }
  }
}

void std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Live_Class_Traits *&,AMCP::Live_Class_Traits *&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  int v7;
  char v8;
  int v9;
  uint64_t v10;
  __int128 v11;
  void *v12;
  __int128 v13;
  uint64_t v14;
  char v15;
  _BYTE v16[15];

  v14 = *a1;
  v15 = *((_BYTE *)a1 + 8);
  v13 = *((_OWORD *)a1 + 1);
  v4 = a1[4];
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  v6 = a1 + 6;
  v5 = a1[6];
  v7 = *((_DWORD *)a1 + 10);
  *(_QWORD *)v16 = a1[7];
  *(_QWORD *)&v16[7] = *(uint64_t *)((char *)a1 + 63);
  v8 = *((_BYTE *)a1 + 71);
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  v9 = *((_DWORD *)a1 + 18);
  v10 = *a2;
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  *a1 = v10;
  LODWORD(v10) = *((_DWORD *)a2 + 10);
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  a1[4] = a2[4];
  a2[2] = 0;
  a2[3] = 0;
  a2[4] = 0;
  *((_DWORD *)a1 + 10) = v10;
  if (*((char *)a1 + 71) < 0)
    operator delete((void *)*v6);
  v11 = *((_OWORD *)a2 + 3);
  v6[2] = a2[8];
  *(_OWORD *)v6 = v11;
  *((_BYTE *)a2 + 71) = 0;
  *((_BYTE *)a2 + 48) = 0;
  *((_DWORD *)a1 + 18) = *((_DWORD *)a2 + 18);
  *a2 = v14;
  *((_BYTE *)a2 + 8) = v15;
  v12 = (void *)a2[2];
  if (v12)
  {
    a2[3] = (uint64_t)v12;
    operator delete(v12);
  }
  *((_OWORD *)a2 + 1) = v13;
  a2[4] = v4;
  *((_DWORD *)a2 + 10) = v7;
  if (*((char *)a2 + 71) < 0)
    operator delete((void *)a2[6]);
  a2[6] = v5;
  a2[7] = *(_QWORD *)v16;
  *(uint64_t *)((char *)a2 + 63) = *(_QWORD *)&v16[7];
  *((_BYTE *)a2 + 71) = v8;
  *((_DWORD *)a2 + 18) = v9;
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Class_Traits *>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;

  v5 = a1;
  v6 = *(_DWORD *)a2;
  v7 = *(_DWORD *)a3;
  if (*(_DWORD *)a2 < *(_DWORD *)a1)
  {
    if (v7 >= v6)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Live_Class_Traits *&,AMCP::Live_Class_Traits *&>(a1, a2);
      if (*(_DWORD *)a3 >= *(_DWORD *)a2)
        return;
      a1 = a2;
    }
    v8 = a3;
    goto LABEL_9;
  }
  if (v7 < v6)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Live_Class_Traits *&,AMCP::Live_Class_Traits *&>(a2, a3);
    if (*(_DWORD *)a2 < *(_DWORD *)v5)
    {
      a1 = v5;
      v8 = a2;
LABEL_9:
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Live_Class_Traits *&,AMCP::Live_Class_Traits *&>(a1, v8);
    }
  }
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Class_Traits *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Class_Traits *>(a1, a2, a3);
  if (*(_DWORD *)a4 < *(_DWORD *)a3)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Live_Class_Traits *&,AMCP::Live_Class_Traits *&>(a3, a4);
    if (*(_DWORD *)a3 < *(_DWORD *)a2)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Live_Class_Traits *&,AMCP::Live_Class_Traits *&>(a2, a3);
      if (*(_DWORD *)a2 < *(_DWORD *)a1)
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Live_Class_Traits *&,AMCP::Live_Class_Traits *&>(a1, a2);
    }
  }
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Class_Traits *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Class_Traits *>(a1, a2, a3, a4);
  if (*(_DWORD *)a5 < *(_DWORD *)a4)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Live_Class_Traits *&,AMCP::Live_Class_Traits *&>(a4, a5);
    if (*(_DWORD *)a4 < *(_DWORD *)a3)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Live_Class_Traits *&,AMCP::Live_Class_Traits *&>(a3, a4);
      if (*(_DWORD *)a3 < *(_DWORD *)a2)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Live_Class_Traits *&,AMCP::Live_Class_Traits *&>(a2, a3);
        if (*(_DWORD *)a2 < *(_DWORD *)a1)
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Live_Class_Traits *&,AMCP::Live_Class_Traits *&>(a1, a2);
      }
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Class_Traits *>(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;
  void **v17;
  char *v18;
  unsigned int v19;
  uint64_t v20;
  void **v21;
  void **v22;
  void *v23;
  int v24;
  __int128 v25;
  void *v26;
  char v27;
  char v28;
  int v29;
  char v30;
  _BYTE v31[22];

  v4 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a2 - (char *)a1) >> 4);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*((_DWORD *)a2 - 20) < *(_DWORD *)a1)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Live_Class_Traits *&,AMCP::Live_Class_Traits *&>(a1, a2 - 10);
        return 1;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Class_Traits *>(a1, a1 + 10, a2 - 10);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Class_Traits *>(a1, a1 + 10, a1 + 20, a2 - 10);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Class_Traits *>(a1, a1 + 10, a1 + 20, a1 + 30, a2 - 10);
      return 1;
    default:
      v6 = a1 + 20;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Class_Traits *>(a1, a1 + 10, a1 + 20);
      v7 = a1 + 30;
      if (a1 + 30 == a2)
        return 1;
      v8 = 0;
      v9 = 0;
      break;
  }
  while (1)
  {
    v10 = *(_DWORD *)v7;
    if (*(_DWORD *)v7 < *(_DWORD *)v6)
    {
      v11 = *((_DWORD *)v7 + 1);
      v30 = *((_BYTE *)v7 + 8);
      v26 = (void *)v7[2];
      v25 = *(_OWORD *)(v7 + 3);
      v7[2] = 0;
      v7[3] = 0;
      v7[4] = 0;
      v12 = *((_DWORD *)v7 + 10);
      v28 = *((_BYTE *)v7 + 48);
      v29 = v11;
      *(_OWORD *)v31 = *(_OWORD *)((char *)v7 + 49);
      *(_QWORD *)&v31[14] = *(uint64_t *)((char *)v7 + 63);
      v27 = *((_BYTE *)v7 + 71);
      v7[7] = 0;
      v7[8] = 0;
      v7[6] = 0;
      v13 = v8;
      v24 = *((_DWORD *)v7 + 18);
      while (1)
      {
        v14 = v13;
        v15 = (char *)a1 + v13;
        *((_QWORD *)v15 + 30) = *(uint64_t *)((char *)a1 + v13 + 160);
        v15[248] = *((_BYTE *)a1 + v13 + 168);
        v16 = *(void **)((char *)a1 + v13 + 256);
        if (v16)
        {
          *((_QWORD *)v15 + 33) = v16;
          operator delete(v16);
          *((_QWORD *)v15 + 34) = 0;
        }
        *((_OWORD *)v15 + 16) = *((_OWORD *)v15 + 11);
        *((_QWORD *)v15 + 34) = *((_QWORD *)v15 + 24);
        *((_QWORD *)v15 + 22) = 0;
        *((_QWORD *)v15 + 23) = 0;
        *((_QWORD *)v15 + 24) = 0;
        *((_DWORD *)v15 + 70) = *((_DWORD *)v15 + 50);
        v17 = (void **)(v15 + 288);
        if (v15[311] < 0)
          operator delete(*v17);
        v18 = (char *)a1 + v14;
        *(_OWORD *)v17 = *(_OWORD *)((char *)a1 + v14 + 208);
        *((_QWORD *)v15 + 38) = *(uint64_t *)((char *)a1 + v14 + 224);
        v18[231] = 0;
        v18[208] = 0;
        *((_DWORD *)v18 + 78) = *(_DWORD *)((char *)a1 + v14 + 232);
        if (v14 == -160)
          break;
        v19 = *((_DWORD *)v18 + 20);
        v13 = v14 - 80;
        if (v10 >= v19)
        {
          v20 = (uint64_t)a1 + v13 + 240;
          v21 = (void **)((char *)a1 + v14 + 176);
          v22 = (void **)((char *)a1 + v14 + 208);
          goto LABEL_16;
        }
      }
      v21 = (void **)(v18 + 176);
      v22 = (void **)(v18 + 208);
      v20 = (uint64_t)a1;
LABEL_16:
      *(_DWORD *)v20 = v10;
      *(_DWORD *)(v20 + 4) = v29;
      *(_BYTE *)(v20 + 8) = v30;
      v23 = *v21;
      if (*v21)
      {
        *(_QWORD *)(v20 + 24) = v23;
        operator delete(v23);
      }
      *v21 = v26;
      *(_OWORD *)(v20 + 24) = v25;
      *(_DWORD *)(v20 + 40) = v12;
      if (*(char *)(v20 + 71) < 0)
        operator delete(*v22);
      *(_BYTE *)v22 = v28;
      *(_OWORD *)(v20 + 49) = *(_OWORD *)v31;
      *(_QWORD *)(v20 + 63) = *(_QWORD *)&v31[14];
      *(_BYTE *)(v20 + 71) = v27;
      *(_DWORD *)(v20 + 72) = v24;
      if (++v9 == 8)
        return v7 + 10 == a2;
    }
    v6 = v7;
    v8 += 80;
    v7 += 10;
    if (v7 == a2)
      return 1;
  }
}

void std::__destroy_at[abi:ne180100]<AMCP::Live_Class_Traits,0>(uint64_t a1)
{
  void *v2;

  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  v2 = *(void **)(a1 + 16);
  if (v2)
  {
    *(_QWORD *)(a1 + 24) = v2;
    operator delete(v2);
  }
}

void AMCP::Clock_Filter_One_Pole_IIR::~Clock_Filter_One_Pole_IIR(AMCP::Clock_Filter_One_Pole_IIR *this)
{
  JUMPOUT(0x1B5E50688);
}

double AMCP::Clock_Filter_One_Pole_IIR::reset(AMCP::Clock_Filter_One_Pole_IIR *this)
{
  double result;

  result = *((double *)this + 1);
  *((double *)this + 2) = result;
  return result;
}

double AMCP::Clock_Filter_One_Pole_IIR::apply(AMCP::Clock_Filter_One_Pole_IIR *this, double a2)
{
  unsigned int v2;
  double v3;
  double result;

  v2 = *((_DWORD *)this + 6);
  v3 = 0.0;
  if (v2 >= 2)
  {
    v3 = 0.25;
    if (v2 >= 5)
    {
      v3 = 0.5;
      if (v2 >= 9)
      {
        v3 = 0.75;
        if (v2 >= 0x11)
          v3 = dbl_1B5D68BD0[v2 < 0x81];
      }
    }
  }
  *((_DWORD *)this + 6) = v2 + 1;
  result = (1.0 - v3) * a2 + v3 * *((double *)this + 2);
  *((double *)this + 2) = result;
  return result;
}

void AMCP::ASP::Engine::~Engine(AMCP::ASP::Engine *this)
{
  AMCP::ASP::Engine::~Engine(this);
  JUMPOUT(0x1B5E50688);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  const void *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;

  *(_QWORD *)this = &off_1E699EBF0;
  AMCP::ASP::Engine::set_transport_state((uint64_t)this, 0);
  v2 = *((_QWORD *)this + 91);
  v3 = *((unsigned int *)this + 184);
  v11 = 0x100000001;
  v12 = 1;
  v13 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v2 + 24))(v2, v3, &v11);
  v11 = (uint64_t)this + 760;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
  v4 = *((_QWORD *)this + 91);
  *((_QWORD *)this + 91) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  AMCP::IO_Clock::~IO_Clock((AMCP::ASP::Engine *)((char *)this + 560));
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::ASP::Engine *)((char *)this + 240));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 224);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 208);
  v5 = (void *)*((_QWORD *)this + 22);
  if (v5)
    operator delete(v5);
  v6 = (void *)*((_QWORD *)this + 18);
  if (v6)
    operator delete(v6);
  v7 = (void *)*((_QWORD *)this + 12);
  if (v7)
  {
    *((_QWORD *)this + 13) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 9);
  if (v8)
  {
    *((_QWORD *)this + 10) = v8;
    operator delete(v8);
  }
  v9 = (const void *)*((_QWORD *)this + 3);
  if (v9)
    CFRelease(v9);
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
}

_QWORD *AMCP::ASP::Engine::get_device_uid@<X0>(const void **this@<X0>, _QWORD *a2@<X8>)
{
  return AMCP::Core::Implementation::Simple_Engine_Data::get_device_uid(a2, this[3]);
}

double AMCP::ASP::Engine::get_sample_rate(AMCP::ASP::Engine *this)
{
  return *((double *)this + 4);
}

uint64_t AMCP::ASP::Engine::get_max_io_buffer_frame_size(AMCP::ASP::Engine *this)
{
  return (3 * *((_DWORD *)this + 10)) >> 3;
}

uint64_t AMCP::ASP::Engine::get_suggested_ring_buffer_frame_size(AMCP::ASP::Engine *this)
{
  return *((unsigned int *)this + 10);
}

uint64_t AMCP::ASP::Engine::get_clock_domain(AMCP::ASP::Engine *this)
{
  return *((unsigned int *)this + 11);
}

uint64_t AMCP::ASP::Engine::supports_prewarming(AMCP::ASP::Engine *this)
{
  return *((unsigned __int8 *)this + 48);
}

BOOL AMCP::ASP::Engine::has_input_streams(AMCP::ASP::Engine *this)
{
  return *((_QWORD *)this + 9) != *((_QWORD *)this + 10);
}

BOOL AMCP::ASP::Engine::has_output_streams(AMCP::ASP::Engine *this)
{
  return *((_QWORD *)this + 12) != *((_QWORD *)this + 13);
}

uint64_t AMCP::ASP::Engine::get_input_safety_offset(AMCP::ASP::Engine *this)
{
  return *((unsigned int *)this + 13);
}

uint64_t AMCP::ASP::Engine::get_output_safety_offset(AMCP::ASP::Engine *this)
{
  return *((unsigned int *)this + 14);
}

uint64_t AMCP::ASP::Engine::get_input_latency(AMCP::ASP::Engine *this)
{
  return *((unsigned int *)this + 15);
}

uint64_t AMCP::ASP::Engine::get_output_latency(AMCP::ASP::Engine *this)
{
  return *((unsigned int *)this + 16);
}

void AMCP::ASP::Engine::get_input_format_list(AMCP::ASP::Engine *this@<X0>, AMCP::Core::Implementation::Simple_Engine_Data *a2@<X8>)
{
  AMCP::Core::Implementation::Simple_Engine_Data::get_input_format_list(a2, *((_QWORD *)this + 9), *((_QWORD *)this + 10));
}

void AMCP::ASP::Engine::get_output_format_list(AMCP::ASP::Engine *this@<X0>, AMCP::Core::Implementation::Simple_Engine_Data *a2@<X8>)
{
  AMCP::Core::Implementation::Simple_Engine_Data::get_output_format_list(a2, *((_QWORD *)this + 12), *((_QWORD *)this + 13));
}

__n128 AMCP::ASP::Engine::get_stream_format@<Q0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;

  v4 = a1 + 72;
  v5 = 72;
  if (!a2)
  {
    v5 = 96;
    v4 = a1 + 96;
  }
  v6 = *(_QWORD *)(a1 + v5);
  v7 = *(_QWORD *)(v4 + 8);
  while (1)
  {
    if (v6 == v7)
    {
      *(_QWORD *)(a4 + 32) = 0;
      result.n128_u64[0] = 0;
      *(_OWORD *)a4 = 0u;
      *(_OWORD *)(a4 + 16) = 0u;
      return result;
    }
    if (*(_DWORD *)v6 == a3)
      break;
    v6 += 56;
  }
  result = *(__n128 *)(v6 + 16);
  v9 = *(_OWORD *)(v6 + 32);
  *(__n128 *)a4 = result;
  *(_OWORD *)(a4 + 16) = v9;
  *(_QWORD *)(a4 + 32) = *(_QWORD *)(v6 + 48);
  return result;
}

uint64_t AMCP::ASP::Engine::get_transport_state(AMCP::ASP::Engine *this)
{
  return atomic_load((unsigned int *)this + 34);
}

uint64_t *AMCP::ASP::Engine::set_transport_state(uint64_t a1, signed int a2)
{
  int v4;
  int v5;
  BOOL v6;
  int v7;
  int v9;
  AMCP::Log::Scope_Registry *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *result;
  std::__shared_weak_count *v17;
  NSObject *v18;
  unint64_t *v19;
  unint64_t v20;
  _opaque_pthread_t *v21;
  mach_port_t v22;
  std::runtime_error *exception;
  int v24;
  uint64_t v25;
  std::runtime_error v26;
  int v27;
  __int128 v28;
  uint64_t v29;
  uint64_t (**v30)();
  __int128 v31;
  uint64_t v32;
  std::runtime_error v33;
  std::runtime_error v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  char v40;
  uint8_t buf[8];
  _BYTE v42[10];
  __int16 v43;
  int v44;
  _BYTE v45[24];
  int v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v4 = atomic_load((unsigned int *)(a1 + 136));
  v5 = MEMORY[0x1B5E5064C]();
  v27 = v5;
  if (v4)
    v6 = 1;
  else
    v6 = a2 < 1;
  if (v6)
  {
    v7 = v5;
    if (v4 >= 1 && a2 == 0)
      AMCP::ASP::Engine::stop((AMCP::ASP::Engine *)a1);
  }
  else
  {
    AMCP::Core::Implementation::Simple_Engine_IO_State::take_power_assertions((uint64_t *)(a1 + 120));
    AMCP::IO_Clock::reset_time((os_unfair_lock_s *)(a1 + 560));
    kdebug_trace();
    v9 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 728) + 80))(*(_QWORD *)(a1 + 728), *(unsigned int *)(a1 + 736), 1);
    v10 = (AMCP::Log::Scope_Registry *)kdebug_trace();
    if (v9)
    {
      AMCP::Log::Scope_Registry::get(v10);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v17 = *(std::__shared_weak_count **)v42;
      v18 = **(NSObject ***)buf;
      if (*(_QWORD *)v42)
      {
        v19 = (unint64_t *)(*(_QWORD *)v42 + 8);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        v21 = pthread_self();
        v22 = pthread_mach_thread_np(v21);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v22;
        *(_WORD *)v42 = 2080;
        *(_QWORD *)&v42[2] = "ASP_Engine.cpp";
        v43 = 1024;
        v44 = 670;
        *(_WORD *)v45 = 2080;
        *(_QWORD *)&v45[2] = "error != 0";
        _os_log_error_impl(&dword_1B57BA000, v18, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s couldn't start the hardware", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v40);
      exception = (std::runtime_error *)__cxa_allocate_exception(0x40uLL);
      std::runtime_error::runtime_error(&v33, "couldn't start the hardware");
      std::runtime_error::runtime_error(&v34, &v33);
      v36 = 0;
      v37 = 0;
      v38 = 0;
      v39 = -1;
      v34.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
      v35 = &unk_1E69A1FE0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v34);
      *(_QWORD *)&v45[8] = "void AMCP::ASP::Engine::start()";
      *(_QWORD *)&v45[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/ASP_Engine.cpp";
      v46 = 670;
      std::vector<void *>::vector(&v28);
      v24 = backtrace((void **)v28, (*((_QWORD *)&v28 + 1) - (_QWORD)v28) >> 3);
      std::vector<void *>::resize((char **)&v28, v24);
      v30 = off_1E69A20A0;
      v31 = v28;
      v32 = v29;
      v28 = 0uLL;
      v29 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v30);
      exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
      std::runtime_error::runtime_error(exception, (const std::runtime_error *)buf);
      exception[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
      v25 = *(_QWORD *)v45;
      exception[1].__imp_.__imp_ = *(const char **)v45;
      if (v25)
        (*(void (**)(uint64_t))(*(_QWORD *)v25 + 24))(v25);
      v26 = *(std::runtime_error *)&v45[8];
      LODWORD(exception[3].__vftable) = v46;
      exception[2] = v26;
      exception->__vftable = (std::runtime_error_vtbl *)&off_1E69A1EE8;
      exception[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1F20;
      exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F58;
    }
    *(_BYTE *)(a1 + 741) = (unint64_t)(*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 728)
                                                                                                + 104))(*(_QWORD *)(a1 + 728), *(unsigned int *)(a1 + 736), 1) >> 32;
    *(_BYTE *)(a1 + 742) = (unint64_t)(*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 728)
                                                                                                + 128))(*(_QWORD *)(a1 + 728), *(unsigned int *)(a1 + 736), 1) >> 32;
    *(_BYTE *)(a1 + 743) = (unint64_t)(*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 728)
                                                                                                + 152))(*(_QWORD *)(a1 + 728), *(unsigned int *)(a1 + 736), 1) >> 32;
    v11 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 728) + 184))(*(_QWORD *)(a1 + 728), *(unsigned int *)(a1 + 736), 1);
    *(_BYTE *)(a1 + 744) = BYTE4(v11);
    *(_BYTE *)(a1 + 745) = BYTE5(v11);
    v12 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 728) + 216))(*(_QWORD *)(a1 + 728), *(unsigned int *)(a1 + 736), 1);
    *(_BYTE *)(a1 + 746) = BYTE4(v12);
    *(_BYTE *)(a1 + 747) = BYTE5(v12);
    v13 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 728) + 248))(*(_QWORD *)(a1 + 728), *(unsigned int *)(a1 + 736), 1);
    *(_BYTE *)(a1 + 748) = BYTE4(v13);
    *(_BYTE *)(a1 + 749) = BYTE5(v13);
    *(_BYTE *)(a1 + 750) = (unint64_t)(*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 728)
                                                                                                + 280))(*(_QWORD *)(a1 + 728), *(unsigned int *)(a1 + 736), 1) >> 32;
    v14 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 728) + 312))(*(_QWORD *)(a1 + 728), *(unsigned int *)(a1 + 736), 1);
    *(_BYTE *)(a1 + 751) = BYTE4(v14);
    *(_BYTE *)(a1 + 752) = BYTE5(v14);
    v15 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 728) + 344))(*(_QWORD *)(a1 + 728), *(unsigned int *)(a1 + 736), 1);
    *(_BYTE *)(a1 + 753) = BYTE4(v15);
    *(_BYTE *)(a1 + 754) = BYTE5(v15);
    *(_BYTE *)(a1 + 755) = (unint64_t)(*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 728)
                                                                                                + 376))(*(_QWORD *)(a1 + 728), *(unsigned int *)(a1 + 736), 1) >> 32;
    v7 = v27;
  }
  atomic_store(a2, (unsigned int *)(a1 + 136));
  result = (uint64_t *)MEMORY[0x1B5E5064C]();
  if ((int)result > v7)
  {
    atomic_store(0, (unsigned int *)(a1 + 136));
    return AMCP::ASP::Engine::stop((AMCP::ASP::Engine *)a1);
  }
  return result;
}

void sub_1B5C8C360(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, std::runtime_error a19, std::runtime_error a20,uint64_t a21,uint64_t a22)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void AMCP::ASP::Engine::get_input_stream_active_list(os_unfair_lock_s *this@<X0>, AMCP::Core::Implementation::Simple_Engine_IO_State *a2@<X8>)
{
  AMCP::Core::Implementation::Simple_Engine_IO_State::get_input_stream_active_list(a2, this + 30);
}

void AMCP::ASP::Engine::set_input_stream_active_list(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *__p[3];
  void *v6[3];

  v4 = a1 + 120;
  AMCP::Core::Implementation::Simple_Engine_IO_State::get_input_stream_active_list((AMCP::Core::Implementation::Simple_Engine_IO_State *)v6, (os_unfair_lock_s *)(a1 + 120));
  AMCP::Core::Implementation::Simple_Engine_IO_State::set_input_stream_active_list(__p, v4, a2);
  AMCP::ASP::Engine::update_stream_active_state(a1, (uint64_t *)(a1 + 72), (uint64_t)v6, (uint64_t)__p);
  if (__p[0])
    operator delete(__p[0]);
  if (v6[0])
    operator delete(v6[0]);
}

void sub_1B5C8C4EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void AMCP::ASP::Engine::get_output_stream_active_list(os_unfair_lock_s *this@<X0>, AMCP::Core::Implementation::Simple_Engine_IO_State *a2@<X8>)
{
  AMCP::Core::Implementation::Simple_Engine_IO_State::get_output_stream_active_list(a2, this + 30);
}

void AMCP::ASP::Engine::set_output_stream_active_list(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *__p[3];
  void *v6[3];

  v4 = a1 + 120;
  AMCP::Core::Implementation::Simple_Engine_IO_State::get_output_stream_active_list((AMCP::Core::Implementation::Simple_Engine_IO_State *)v6, (os_unfair_lock_s *)(a1 + 120));
  AMCP::Core::Implementation::Simple_Engine_IO_State::set_output_stream_active_list(__p, v4, a2);
  AMCP::ASP::Engine::update_stream_active_state(a1, (uint64_t *)(a1 + 96), (uint64_t)v6, (uint64_t)__p);
  if (__p[0])
    operator delete(__p[0]);
  if (v6[0])
    operator delete(v6[0]);
}

void sub_1B5C8C58C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::ASP::Engine::supports_past_data(AMCP::ASP::Engine *this)
{
  return *((unsigned __int8 *)this + 740);
}

BOOL AMCP::ASP::Engine::is_past_data_enabled(AMCP::ASP::Engine *this)
{
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v5;
  int v6;
  int v7;

  if (!*((_BYTE *)this + 740))
    return 0;
  v5 = 0x676C6F626470656CLL;
  v6 = 0;
  v1 = *((_QWORD *)this + 91);
  v2 = *((unsigned int *)this + 184);
  v7 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD, uint64_t *, _QWORD, _QWORD, uint64_t, int *))(*(_QWORD *)v1 + 432))(v1, v2, 0, &v5, 0, 0, 4, &v7))
  {
    v3 = 1;
  }
  else
  {
    v3 = v7 == 0;
  }
  return !v3;
}

BOOL AMCP::ASP::Engine::set_past_data_enabled(AMCP::ASP::Engine *this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  uint64_t v6;
  int v7;

  if (!*((_BYTE *)this + 740))
    return 0;
  v6 = 0x676C6F626470656CLL;
  v7 = 0;
  v2 = *((_QWORD *)this + 91);
  v3 = *((unsigned int *)this + 184);
  v5 = a2;
  return (*(unsigned int (**)(uint64_t, uint64_t, _QWORD, uint64_t *, _QWORD, _QWORD, uint64_t, int *))(*(_QWORD *)v2 + 440))(v2, v3, 0, &v6, 0, 0, 4, &v5) == 0;
}

uint64_t AMCP::ASP::Engine::available_past_data(AMCP::ASP::Engine *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  int v5;
  unsigned int v6;

  if (!*((_BYTE *)this + 740))
    return 0;
  v4 = 0x676C6F6264617064;
  v5 = 0;
  v1 = *((_QWORD *)this + 91);
  v2 = *((unsigned int *)this + 184);
  v6 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD, uint64_t *, _QWORD, _QWORD, uint64_t, unsigned int *))(*(_QWORD *)v1 + 432))(v1, v2, 0, &v4, 0, 0, 4, &v6))
  {
    return 0;
  }
  else
  {
    return v6;
  }
}

uint64_t AMCP::ASP::Engine::maximum_past_data(AMCP::ASP::Engine *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  int v5;
  unsigned int v6;

  if (!*((_BYTE *)this + 740))
    return 0;
  v4 = 0x676C6F62646D7064;
  v5 = 0;
  v1 = *((_QWORD *)this + 91);
  v2 = *((unsigned int *)this + 184);
  v6 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD, uint64_t *, _QWORD, _QWORD, uint64_t, unsigned int *))(*(_QWORD *)v1 + 432))(v1, v2, 0, &v4, 0, 0, 4, &v6))
  {
    return 0;
  }
  else
  {
    return v6;
  }
}

uint64_t AMCP::ASP::Engine::begin_io_thread(AMCP::ASP::Engine *this, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v8;
  int v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;

  (*(void (**)(AMCP::ASP::Engine *))(*(_QWORD *)this + 24))(this);
  (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t, _QWORD))(**((_QWORD **)this + 91) + 64))(*((_QWORD *)this + 91), *((unsigned int *)this + 184), 1, a3, 0);
  if (*((_BYTE *)this + 741))
  {
    os_unfair_lock_lock((os_unfair_lock_t)this + 160);
    v6 = *((_QWORD *)this + 78);
    os_unfair_lock_unlock((os_unfair_lock_t)this + 160);
    v8 = a2;
    v9 = a3;
    v10 = 0u;
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v22 = v6;
    v23 = v6;
    (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t *))(**((_QWORD **)this + 91) + 112))(*((_QWORD *)this + 91), *((unsigned int *)this + 184), 1, &v8);
  }
  return 1;
}

uint64_t AMCP::ASP::Engine::end_io_thread(os_unfair_lock_s *this, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v8;
  int v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;

  if (BYTE1(this[185]._os_unfair_lock_opaque))
  {
    os_unfair_lock_lock(this + 160);
    v6 = *(_QWORD *)&this[156]._os_unfair_lock_opaque;
    os_unfair_lock_unlock(this + 160);
    v8 = a2;
    v9 = a3;
    v10 = 0u;
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v22 = v6;
    v23 = v6;
    (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t *))(**(_QWORD **)&this[182]._os_unfair_lock_opaque + 120))(*(_QWORD *)&this[182]._os_unfair_lock_opaque, this[184]._os_unfair_lock_opaque, 1, &v8);
  }
  (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)&this[182]._os_unfair_lock_opaque + 72))(*(_QWORD *)&this[182]._os_unfair_lock_opaque, this[184]._os_unfair_lock_opaque, 1);
  return 1;
}

uint64_t AMCP::ASP::Engine::begin_io_cycle(os_unfair_lock_s *this, uint64_t a2, unint64_t a3, int a4)
{
  AMCP::IO_Clock *v8;
  os_unfair_lock_s *v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  uint64_t v15;
  int v16;
  double v17;
  unint64_t v18;
  double v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;

  if (BYTE2(this[185]._os_unfair_lock_opaque))
  {
    v8 = (AMCP::IO_Clock *)&this[140];
    v9 = this + 160;
    os_unfair_lock_lock(this + 160);
    v10 = *(_QWORD *)&this[156]._os_unfair_lock_opaque;
    os_unfair_lock_unlock(v9);
    v15 = a2;
    v16 = a4;
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    v30 = 0u;
    v31 = v10;
    v32 = v10;
    os_unfair_lock_lock(v9);
    v11 = AMCP::IO_Clock::convert_host_to_sample_time_internal(v8, a3);
    os_unfair_lock_unlock(v9);
    os_unfair_lock_lock(v9);
    v12 = *(double *)&this[156]._os_unfair_lock_opaque;
    os_unfair_lock_unlock(v9);
    os_unfair_lock_lock(v9);
    v13 = *(double *)(*(_QWORD *)&this[144]._os_unfair_lock_opaque + 40);
    os_unfair_lock_unlock(v9);
    v21 = 0u;
    v20 = 0u;
    v17 = v11;
    v18 = a3;
    v19 = v12 / v13;
    v22 = 7;
    (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t *))(**(_QWORD **)&this[182]._os_unfair_lock_opaque + 136))(*(_QWORD *)&this[182]._os_unfair_lock_opaque, this[184]._os_unfair_lock_opaque, 1, &v15);
  }
  return 1;
}

uint64_t AMCP::ASP::Engine::end_io_cycle(os_unfair_lock_s *this, uint64_t a2, unint64_t a3, int a4)
{
  AMCP::IO_Clock *v8;
  os_unfair_lock_s *v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  uint64_t v15;
  int v16;
  double v17;
  unint64_t v18;
  double v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;

  if (BYTE2(this[185]._os_unfair_lock_opaque))
  {
    v8 = (AMCP::IO_Clock *)&this[140];
    v9 = this + 160;
    os_unfair_lock_lock(this + 160);
    v10 = *(_QWORD *)&this[156]._os_unfair_lock_opaque;
    os_unfair_lock_unlock(v9);
    v15 = a2;
    v16 = a4;
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    v30 = 0u;
    v31 = v10;
    v32 = v10;
    os_unfair_lock_lock(v9);
    v11 = AMCP::IO_Clock::convert_host_to_sample_time_internal(v8, a3);
    os_unfair_lock_unlock(v9);
    os_unfair_lock_lock(v9);
    v12 = *(double *)&this[156]._os_unfair_lock_opaque;
    os_unfair_lock_unlock(v9);
    os_unfair_lock_lock(v9);
    v13 = *(double *)(*(_QWORD *)&this[144]._os_unfair_lock_opaque + 40);
    os_unfair_lock_unlock(v9);
    v21 = 0u;
    v20 = 0u;
    v17 = v11;
    v18 = a3;
    v19 = v12 / v13;
    v22 = 7;
    (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t *))(**(_QWORD **)&this[182]._os_unfair_lock_opaque + 144))(*(_QWORD *)&this[182]._os_unfair_lock_opaque, this[184]._os_unfair_lock_opaque, 1, &v15);
  }
  return 1;
}

uint64_t AMCP::ASP::Engine::begin_reading(os_unfair_lock_s *this, uint64_t a2, unint64_t a3, double a4, uint64_t a5, int a6)
{
  AMCP::IO_Clock *v12;
  os_unfair_lock_s *v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  unint64_t v18;
  double v19;
  double v20;
  uint64_t v22;
  int v23;
  double v24;
  unint64_t v25;
  double v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  double v30;
  unint64_t v31;
  double v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;

  if (HIBYTE(this[185]._os_unfair_lock_opaque))
  {
    v12 = (AMCP::IO_Clock *)&this[140];
    v13 = this + 160;
    os_unfair_lock_lock(this + 160);
    v14 = *(_QWORD *)&this[156]._os_unfair_lock_opaque;
    os_unfair_lock_unlock(v13);
    v22 = a2;
    v23 = a6;
    v36 = 0u;
    v37 = 0u;
    v38 = 0u;
    v39 = 0u;
    v40 = v14;
    v41 = v14;
    os_unfair_lock_lock(v13);
    v15 = AMCP::IO_Clock::convert_host_to_sample_time_internal(v12, a3);
    os_unfair_lock_unlock(v13);
    os_unfair_lock_lock(v13);
    v16 = *(double *)&this[156]._os_unfair_lock_opaque;
    os_unfair_lock_unlock(v13);
    os_unfair_lock_lock(v13);
    v17 = *(double *)(*(_QWORD *)&this[144]._os_unfair_lock_opaque + 40);
    os_unfair_lock_unlock(v13);
    v28 = 0u;
    v27 = 0u;
    v24 = v15;
    v25 = a3;
    v26 = v16 / v17;
    v29 = 7;
    v18 = AMCP::IO_Clock::convert_sample_to_host_time((os_unfair_lock_s *)v12, a4);
    os_unfair_lock_lock(v13);
    v19 = *(double *)&this[156]._os_unfair_lock_opaque;
    os_unfair_lock_unlock(v13);
    os_unfair_lock_lock(v13);
    v20 = *(double *)(*(_QWORD *)&this[144]._os_unfair_lock_opaque + 40);
    os_unfair_lock_unlock(v13);
    v34 = 0u;
    v33 = 0u;
    v30 = a4;
    v31 = v18;
    v32 = v19 / v20;
    v35 = 7;
    (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t *))(**(_QWORD **)&this[182]._os_unfair_lock_opaque
                                                                        + 160))(*(_QWORD *)&this[182]._os_unfair_lock_opaque, this[184]._os_unfair_lock_opaque, 1, a5, &v22);
  }
  return 1;
}

uint64_t AMCP::ASP::Engine::read_data_from_stream(uint64_t a1, uint64_t a2, unint64_t a3, unsigned int a4, unsigned int a5, int a6, unsigned int **a7, double a8)
{
  uint64_t v9;
  uint64_t v15;
  unsigned int v16;
  double v17;
  unsigned int v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  unint64_t v23;
  double v24;
  double v25;
  float v26;
  float v27;
  uint64_t v29;
  int v30;
  double v31;
  unint64_t v32;
  double v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  double v37;
  unint64_t v38;
  double v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;

  if (!*(_BYTE *)(a1 + 743))
    return 1;
  v9 = *(_QWORD *)(a1 + 72);
  if (0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(a1 + 80) - v9) >> 3) > (unint64_t)a4)
  {
    v15 = v9 + 56 * a4;
    v16 = *(_DWORD *)(v15 + 40);
    v17 = (double)(a5 / v16) + a8;
    v18 = **a7;
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 640));
    v19 = *(_QWORD *)(a1 + 624);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 640));
    v29 = a2;
    v30 = a6;
    v43 = 0u;
    v44 = 0u;
    v45 = 0u;
    v46 = 0u;
    v47 = v19;
    v48 = v19;
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 640));
    v20 = AMCP::IO_Clock::convert_host_to_sample_time_internal((AMCP::IO_Clock *)(a1 + 560), a3);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 640));
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 640));
    v21 = *(double *)(a1 + 624);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 640));
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 640));
    v22 = *(double *)(*(_QWORD *)(a1 + 576) + 40);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 640));
    v34 = 0u;
    v35 = 0u;
    v31 = v20;
    v32 = a3;
    v33 = v21 / v22;
    v36 = 7;
    v23 = AMCP::IO_Clock::convert_sample_to_host_time((os_unfair_lock_s *)(a1 + 560), v17);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 640));
    v24 = *(double *)(a1 + 624);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 640));
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 640));
    v25 = *(double *)(*(_QWORD *)(a1 + 576) + 40);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 640));
    v40 = 0u;
    v41 = 0u;
    v37 = v17;
    v38 = v23;
    v39 = v24 / v25;
    v42 = 7;
    v26 = AMCP::Core::Engine::calculate_safety_violation_read((AMCP::Core::Engine *)a1, a8);
    if (v26 <= -5.0)
      kdebug_trace();
    kdebug_trace();
    (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t, _QWORD, uint64_t *, unsigned int **))(**(_QWORD **)(a1 + 728)
                                                                                                + 168))(*(_QWORD *)(a1 + 728), *(unsigned int *)(a1 + 736), *(unsigned int *)(v15 + 4), 1, v18 / v16, &v29, a7);
    kdebug_trace();
    v27 = AMCP::Core::Engine::calculate_safety_violation_read((AMCP::Core::Engine *)a1, a8);
    if ((int)v27 <= -5)
      kdebug_trace();
    return 1;
  }
  return 0;
}

uint64_t AMCP::ASP::Engine::end_reading(os_unfair_lock_s *this, uint64_t a2, unint64_t a3, double a4, uint64_t a5, int a6)
{
  AMCP::IO_Clock *v12;
  os_unfair_lock_s *v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  unint64_t v18;
  double v19;
  double v20;
  uint64_t v22;
  int v23;
  double v24;
  unint64_t v25;
  double v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  double v30;
  unint64_t v31;
  double v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;

  if (HIBYTE(this[185]._os_unfair_lock_opaque))
  {
    v12 = (AMCP::IO_Clock *)&this[140];
    v13 = this + 160;
    os_unfair_lock_lock(this + 160);
    v14 = *(_QWORD *)&this[156]._os_unfair_lock_opaque;
    os_unfair_lock_unlock(v13);
    v22 = a2;
    v23 = a6;
    v36 = 0u;
    v37 = 0u;
    v38 = 0u;
    v39 = 0u;
    v40 = v14;
    v41 = v14;
    os_unfair_lock_lock(v13);
    v15 = AMCP::IO_Clock::convert_host_to_sample_time_internal(v12, a3);
    os_unfair_lock_unlock(v13);
    os_unfair_lock_lock(v13);
    v16 = *(double *)&this[156]._os_unfair_lock_opaque;
    os_unfair_lock_unlock(v13);
    os_unfair_lock_lock(v13);
    v17 = *(double *)(*(_QWORD *)&this[144]._os_unfair_lock_opaque + 40);
    os_unfair_lock_unlock(v13);
    v28 = 0u;
    v27 = 0u;
    v24 = v15;
    v25 = a3;
    v26 = v16 / v17;
    v29 = 7;
    v18 = AMCP::IO_Clock::convert_sample_to_host_time((os_unfair_lock_s *)v12, a4);
    os_unfair_lock_lock(v13);
    v19 = *(double *)&this[156]._os_unfair_lock_opaque;
    os_unfair_lock_unlock(v13);
    os_unfair_lock_lock(v13);
    v20 = *(double *)(*(_QWORD *)&this[144]._os_unfair_lock_opaque + 40);
    os_unfair_lock_unlock(v13);
    v34 = 0u;
    v33 = 0u;
    v30 = a4;
    v31 = v18;
    v32 = v19 / v20;
    v35 = 7;
    (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t *))(**(_QWORD **)&this[182]._os_unfair_lock_opaque
                                                                        + 176))(*(_QWORD *)&this[182]._os_unfair_lock_opaque, this[184]._os_unfair_lock_opaque, 1, a5, &v22);
  }
  return 1;
}

uint64_t AMCP::ASP::Engine::begin_writing(os_unfair_lock_s *this, uint64_t a2, unint64_t a3, double a4, uint64_t a5, int a6)
{
  AMCP::IO_Clock *v12;
  os_unfair_lock_s *v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  unint64_t v18;
  double v19;
  double v20;
  uint64_t v22;
  int v23;
  double v24;
  unint64_t v25;
  double v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  double v34;
  unint64_t v35;
  double v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  if (HIBYTE(this[188]._os_unfair_lock_opaque))
  {
    v12 = (AMCP::IO_Clock *)&this[140];
    v13 = this + 160;
    os_unfair_lock_lock(this + 160);
    v14 = *(_QWORD *)&this[156]._os_unfair_lock_opaque;
    os_unfair_lock_unlock(v13);
    v22 = a2;
    v23 = a6;
    v30 = 0u;
    v31 = 0u;
    v32 = 0u;
    v33 = 0u;
    v40 = v14;
    v41 = v14;
    os_unfair_lock_lock(v13);
    v15 = AMCP::IO_Clock::convert_host_to_sample_time_internal(v12, a3);
    os_unfair_lock_unlock(v13);
    os_unfair_lock_lock(v13);
    v16 = *(double *)&this[156]._os_unfair_lock_opaque;
    os_unfair_lock_unlock(v13);
    os_unfair_lock_lock(v13);
    v17 = *(double *)(*(_QWORD *)&this[144]._os_unfair_lock_opaque + 40);
    os_unfair_lock_unlock(v13);
    v28 = 0u;
    v27 = 0u;
    v24 = v15;
    v25 = a3;
    v26 = v16 / v17;
    v29 = 7;
    v18 = AMCP::IO_Clock::convert_sample_to_host_time((os_unfair_lock_s *)v12, a4);
    os_unfair_lock_lock(v13);
    v19 = *(double *)&this[156]._os_unfair_lock_opaque;
    os_unfair_lock_unlock(v13);
    os_unfair_lock_lock(v13);
    v20 = *(double *)(*(_QWORD *)&this[144]._os_unfair_lock_opaque + 40);
    os_unfair_lock_unlock(v13);
    v38 = 0u;
    v37 = 0u;
    v34 = a4;
    v35 = v18;
    v36 = v19 / v20;
    v39 = 7;
    (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t *))(**(_QWORD **)&this[182]._os_unfair_lock_opaque
                                                                        + 384))(*(_QWORD *)&this[182]._os_unfair_lock_opaque, this[184]._os_unfair_lock_opaque, 1, a5, &v22);
  }
  return 1;
}

uint64_t AMCP::ASP::Engine::write_data_to_stream(uint64_t a1, uint64_t a2, unint64_t a3, unsigned int a4, double a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  unint64_t v20;
  double v21;
  double v22;
  float v23;
  float v24;
  uint64_t v26;
  int v27;
  double v28;
  unint64_t v29;
  double v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  double v38;
  unint64_t v39;
  double v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  if (!*(_BYTE *)(a1 + 755))
    return 1;
  v10 = *(_QWORD *)(a1 + 96);
  if (0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(a1 + 104) - v10) >> 3) > (unint64_t)a4)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 640));
    v16 = *(_QWORD *)(a1 + 624);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 640));
    v26 = a2;
    v27 = a7;
    v34 = 0u;
    v35 = 0u;
    v36 = 0u;
    v37 = 0u;
    v44 = v16;
    v45 = v16;
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 640));
    v17 = AMCP::IO_Clock::convert_host_to_sample_time_internal((AMCP::IO_Clock *)(a1 + 560), a3);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 640));
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 640));
    v18 = *(double *)(a1 + 624);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 640));
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 640));
    v19 = *(double *)(*(_QWORD *)(a1 + 576) + 40);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 640));
    v31 = 0u;
    v32 = 0u;
    v28 = v17;
    v29 = a3;
    v30 = v18 / v19;
    v33 = 7;
    v20 = AMCP::IO_Clock::convert_sample_to_host_time((os_unfair_lock_s *)(a1 + 560), a5);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 640));
    v21 = *(double *)(a1 + 624);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 640));
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 640));
    v22 = *(double *)(*(_QWORD *)(a1 + 576) + 40);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 640));
    v42 = 0u;
    v41 = 0u;
    v38 = a5;
    v39 = v20;
    v40 = v21 / v22;
    v43 = 7;
    v23 = AMCP::Core::Engine::calculate_safety_violation_write((AMCP::Core::Engine *)a1, a5);
    if (v23 < 0.0)
      kdebug_trace();
    kdebug_trace();
    (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t *, uint64_t))(**(_QWORD **)(a1 + 728)
                                                                                         + 392))(*(_QWORD *)(a1 + 728), *(unsigned int *)(a1 + 736), *(unsigned int *)(v10 + 56 * a4 + 4), 1, a7, &v26, a8);
    kdebug_trace();
    v24 = AMCP::Core::Engine::calculate_safety_violation_write((AMCP::Core::Engine *)a1, a5);
    if ((int)v24 < 0)
      kdebug_trace();
    return 1;
  }
  return 0;
}

uint64_t AMCP::ASP::Engine::end_writing(os_unfair_lock_s *this, uint64_t a2, unint64_t a3, double a4, uint64_t a5, int a6)
{
  AMCP::IO_Clock *v12;
  os_unfair_lock_s *v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  unint64_t v18;
  double v19;
  double v20;
  uint64_t v22;
  int v23;
  double v24;
  unint64_t v25;
  double v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  double v34;
  unint64_t v35;
  double v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  if (HIBYTE(this[188]._os_unfair_lock_opaque))
  {
    v12 = (AMCP::IO_Clock *)&this[140];
    v13 = this + 160;
    os_unfair_lock_lock(this + 160);
    v14 = *(_QWORD *)&this[156]._os_unfair_lock_opaque;
    os_unfair_lock_unlock(v13);
    v22 = a2;
    v23 = a6;
    v30 = 0u;
    v31 = 0u;
    v32 = 0u;
    v33 = 0u;
    v40 = v14;
    v41 = v14;
    os_unfair_lock_lock(v13);
    v15 = AMCP::IO_Clock::convert_host_to_sample_time_internal(v12, a3);
    os_unfair_lock_unlock(v13);
    os_unfair_lock_lock(v13);
    v16 = *(double *)&this[156]._os_unfair_lock_opaque;
    os_unfair_lock_unlock(v13);
    os_unfair_lock_lock(v13);
    v17 = *(double *)(*(_QWORD *)&this[144]._os_unfair_lock_opaque + 40);
    os_unfair_lock_unlock(v13);
    v28 = 0u;
    v27 = 0u;
    v24 = v15;
    v25 = a3;
    v26 = v16 / v17;
    v29 = 7;
    v18 = AMCP::IO_Clock::convert_sample_to_host_time((os_unfair_lock_s *)v12, a4);
    os_unfair_lock_lock(v13);
    v19 = *(double *)&this[156]._os_unfair_lock_opaque;
    os_unfair_lock_unlock(v13);
    os_unfair_lock_lock(v13);
    v20 = *(double *)(*(_QWORD *)&this[144]._os_unfair_lock_opaque + 40);
    os_unfair_lock_unlock(v13);
    v38 = 0u;
    v37 = 0u;
    v34 = a4;
    v35 = v18;
    v36 = v19 / v20;
    v39 = 7;
    (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t *))(**(_QWORD **)&this[182]._os_unfair_lock_opaque
                                                                        + 400))(*(_QWORD *)&this[182]._os_unfair_lock_opaque, this[184]._os_unfair_lock_opaque, 1, a5, &v22);
  }
  return 1;
}

double AMCP::ASP::Engine::get_zero_time_stamp@<D0>(AMCP::ASP::Engine *this@<X0>, uint64_t a2@<X8>)
{
  double result;
  uint64_t v4;
  double v5;
  uint64_t v6;

  *(_QWORD *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_QWORD *)(a2 + 56) = 3;
  (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 91) + 96))(&v4, *((_QWORD *)this + 91), *((unsigned int *)this + 184), 1);
  result = v5;
  *(double *)a2 = v5;
  *(_QWORD *)(a2 + 8) = v6;
  return result;
}

uint64_t AMCP::ASP::Engine::update_time(AMCP::ASP::Engine *this)
{
  return AMCP::IO_Clock::update_time((AMCP::ASP::Engine *)((char *)this + 560));
}

BOOL AMCP::ASP::Engine::reset_time(os_unfair_lock_s *this)
{
  return AMCP::IO_Clock::reset_time(this + 140);
}

BOOL AMCP::ASP::Engine::has_time(os_unfair_lock_s *this)
{
  return AMCP::IO_Clock::has_time(this + 140);
}

void AMCP::ASP::Engine::get_current_time(AMCP::ASP::Engine *this@<X0>, AMCP::IO_Clock *a2@<X8>)
{
  AMCP::IO_Clock::get_current_time(a2, (uint64_t)this + 560);
}

double AMCP::ASP::Engine::get_current_host_ticks_per_frame(os_unfair_lock_s *this)
{
  os_unfair_lock_s *v2;
  double v3;

  v2 = this + 160;
  os_unfair_lock_lock(this + 160);
  v3 = *(double *)&this[156]._os_unfair_lock_opaque;
  os_unfair_lock_unlock(v2);
  return v3;
}

unint64_t AMCP::ASP::Engine::convert_sample_to_host_time(os_unfair_lock_s *this, double a2)
{
  return AMCP::IO_Clock::convert_sample_to_host_time(this + 140, a2);
}

double AMCP::ASP::Engine::convert_host_to_sample_time(os_unfair_lock_s *this, unint64_t a2)
{
  AMCP::IO_Clock *v3;
  os_unfair_lock_s *v4;
  double v5;

  v3 = (AMCP::IO_Clock *)&this[140];
  v4 = this + 160;
  os_unfair_lock_lock(this + 160);
  v5 = AMCP::IO_Clock::convert_host_to_sample_time_internal(v3, a2);
  os_unfair_lock_unlock(v4);
  return v5;
}

uint64_t *AMCP::ASP::Engine::take_power_assertions(AMCP::ASP::Engine *this)
{
  return AMCP::Core::Implementation::Simple_Engine_IO_State::take_power_assertions((uint64_t *)this + 15);
}

uint64_t *AMCP::ASP::Engine::release_power_assertions(AMCP::ASP::Engine *this)
{
  return AMCP::Core::Implementation::Simple_Engine_IO_State::release_power_assertions((uint64_t *)this + 15);
}

uint64_t AMCP::ASP::Engine::register_io_buffer(uint64_t a1, int a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  unint64_t *v28;
  unint64_t v29;
  char *v30;
  __int128 v31;
  int64x2_t v32;
  uint64_t v33;
  void *v34;
  unsigned int *v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  __int128 v44;

  v10 = *(_QWORD **)(a1 + 760);
  v11 = *(_QWORD **)(a1 + 768);
  v12 = v10;
  if (v10 != v11)
  {
    v12 = *(_QWORD **)(a1 + 760);
    while (*(_QWORD *)*v12 != a5)
    {
      v12 += 2;
      if (v12 == v11)
        goto LABEL_11;
    }
  }
  if (v12 == v11)
  {
LABEL_11:
    v17 = operator new(0x28uLL);
    v17[1] = 0;
    v18 = v17 + 1;
    v17[2] = 0;
    v17[3] = a5;
    *v17 = &off_1E699F260;
    *((_DWORD *)v17 + 8) = 0;
    *(_QWORD *)&v44 = v17 + 3;
    *((_QWORD *)&v44 + 1) = v17;
    v19 = *(_QWORD *)(a1 + 776);
    if ((unint64_t)v11 >= v19)
    {
      v22 = ((char *)v11 - (char *)v10) >> 4;
      v23 = v22 + 1;
      if ((unint64_t)(v22 + 1) >> 60)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v24 = v19 - (_QWORD)v10;
      if (v24 >> 3 > v23)
        v23 = v24 >> 3;
      if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0)
        v25 = 0xFFFFFFFFFFFFFFFLL;
      else
        v25 = v23;
      if (v25 >> 60)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v26 = (char *)operator new(16 * v25);
      v27 = &v26[16 * v22];
      *(_OWORD *)v27 = v44;
      if (*((_QWORD *)&v44 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
        v11 = *(_QWORD **)(a1 + 768);
        v10 = *(_QWORD **)(a1 + 760);
      }
      if (v11 == v10)
      {
        v32 = vdupq_n_s64((unint64_t)v11);
        v30 = &v26[16 * v22];
      }
      else
      {
        v30 = &v26[16 * v22];
        do
        {
          v31 = *((_OWORD *)v11 - 1);
          v11 -= 2;
          *((_OWORD *)v30 - 1) = v31;
          v30 -= 16;
          *v11 = 0;
          v11[1] = 0;
        }
        while (v11 != v10);
        v32 = *(int64x2_t *)(a1 + 760);
      }
      v21 = v27 + 16;
      *(_QWORD *)(a1 + 760) = v30;
      *(_QWORD *)(a1 + 768) = v27 + 16;
      *(_QWORD *)(a1 + 776) = &v26[16 * v25];
      v33 = v32.i64[1];
      v34 = (void *)v32.i64[0];
      while ((void *)v33 != v34)
        v33 = std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v33 - 16);
      if (v34)
        operator delete(v34);
    }
    else
    {
      *v11 = v44;
      v11[1] = v17;
      do
        v20 = __ldxr(v18);
      while (__stxr(v20 + 1, v18));
      v21 = v11 + 2;
    }
    *(_QWORD *)(a1 + 768) = v21;
  }
  else
  {
    v14 = (_QWORD *)*v12;
    v13 = v12[1];
    if (v13)
    {
      v15 = (unint64_t *)(v13 + 8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    *(_QWORD *)&v44 = v14;
    *((_QWORD *)&v44 + 1) = v13;
  }
  v35 = (unsigned int *)(v44 + 8);
  do
    v36 = __ldaxr(v35);
  while (__stlxr(v36 + 1, v35));
  if (v36)
  {
    v37 = 0;
  }
  else
  {
    v38 = a1 + 72;
    v39 = 72;
    if (!a2)
    {
      v39 = 96;
      v38 = a1 + 96;
    }
    v40 = *(_QWORD *)(a1 + v39);
    if (0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(v38 + 8) - v40) >> 3) <= (unint64_t)a3)
      v37 = 561214578;
    else
      v37 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, BOOL, uint64_t, uint64_t))(**(_QWORD **)(a1 + 728)
                                                                                               + 448))(*(_QWORD *)(a1 + 728), *(unsigned int *)(a1 + 736), *(unsigned int *)(v40 + 56 * a3 + 4), 1, a2 == 1, a4, a5);
  }
  if (*((_QWORD *)&v44 + 1))
  {
    v41 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v44 + 1) + 16))(*((_QWORD *)&v44 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v44 + 1));
    }
  }
  return v37;
}

void sub_1B5C8DB94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void AMCP::ASP::Engine::unregister_io_buffer(uint64_t a1, int a2, unsigned int a3, uint64_t a4, std::__shared_weak_count_vtbl *a5)
{
  std::__shared_weak_count **v10;
  std::__shared_weak_count **v11;
  NSObject *v12;
  _opaque_pthread_t *v13;
  mach_port_t v14;
  void *exception;
  unsigned int *p_shared_owners;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  std::__shared_weak_count **v20;
  __int128 v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t (**v30)();
  __int128 v31;
  uint64_t v32;
  std::runtime_error v33;
  std::runtime_error v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  char v40;
  uint8_t buf[8];
  __int16 v42;
  char *v43;
  __int16 v44;
  int v45;
  __int16 v46;
  _BYTE v47[14];
  const char *v48;
  int v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v10 = *(std::__shared_weak_count ***)(a1 + 760);
  v11 = *(std::__shared_weak_count ***)(a1 + 768);
  if (v10 != v11)
  {
    while ((*v10)->__vftable != a5)
    {
      v10 += 2;
      if (v10 == v11)
        goto LABEL_4;
    }
  }
  if (v10 == v11)
  {
LABEL_4:
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v12 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = pthread_self();
      v14 = pthread_mach_thread_np(v13);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v14;
      v42 = 2080;
      v43 = "ASP_Engine.cpp";
      v44 = 1024;
      v45 = 771;
      v46 = 2080;
      *(_QWORD *)v47 = "register_buffer_info_iter == m_register_buffer_info_list.end()";
      _os_log_error_impl(&dword_1B57BA000, v12, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to unregister io buffer", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v40);
    exception = __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v33, "Failed to unregister io buffer");
    std::runtime_error::runtime_error(&v34, &v33);
    v36 = 0;
    v37 = 0;
    v38 = 0;
    v39 = -1;
    v34.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v35 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v34);
    *(_QWORD *)&v47[6] = "virtual void AMCP::ASP::Engine::unregister_io_buffer(AMCP::Direction, uint32_t, uint32_t, void *)";
    v48 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/ASP_Engine.cpp";
    v49 = 771;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v28);
    v30 = off_1E69A20A0;
    v31 = v28;
    v32 = v29;
    v28 = 0uLL;
    v29 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v30);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  p_shared_owners = (unsigned int *)&(*v10)->__shared_owners_;
  do
  {
    v17 = __ldaxr(p_shared_owners);
    v18 = v17 - 1;
  }
  while (__stlxr(v18, p_shared_owners));
  if (!v18)
  {
    v19 = (uint64_t)(v10 + 2);
    v20 = *(std::__shared_weak_count ***)(a1 + 768);
    if (v10 + 2 != v20)
    {
      do
      {
        v21 = *(_OWORD *)v19;
        *(_QWORD *)v19 = 0;
        *(_QWORD *)(v19 + 8) = 0;
        v22 = v10[1];
        *(_OWORD *)v10 = v21;
        if (v22)
        {
          v23 = (unint64_t *)&v22->__shared_owners_;
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        v19 += 16;
        v10 += 2;
      }
      while ((std::__shared_weak_count **)v19 != v20);
      v19 = *(_QWORD *)(a1 + 768);
    }
    while ((std::__shared_weak_count **)v19 != v10)
    {
      v19 -= 16;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v19);
    }
    *(_QWORD *)(a1 + 768) = v10;
    v25 = a1 + 72;
    v26 = 72;
    if (!a2)
    {
      v26 = 96;
      v25 = a1 + 96;
    }
    v27 = *(_QWORD *)(a1 + v26);
    if (0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(v25 + 8) - v27) >> 3) > (unint64_t)a3)
      (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t, BOOL, uint64_t, std::__shared_weak_count_vtbl *))(**(_QWORD **)(a1 + 728) + 456))(*(_QWORD *)(a1 + 728), *(unsigned int *)(a1 + 736), *(unsigned int *)(v27 + 56 * a3 + 4), 1, a2 == 1, a4, a5);
  }
}

void sub_1B5C8DF48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, std::runtime_error a17, std::runtime_error a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,std::runtime_error a28,void *a29,uint64_t a30)
{
  void *v30;
  int v31;

  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  a29 = &unk_1E69A2000;
  if (a30 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a30 + 32))(a30))
    a30 = 0;
  std::runtime_error::~runtime_error(&a28);
  a19 = &unk_1E69A2000;
  if (a20 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a20 + 32))(a20))
    a20 = 0;
  std::runtime_error::~runtime_error(&a18);
  std::runtime_error::~runtime_error(&a17);
  if (v31)
    __cxa_free_exception(v30);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&a27);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<AMCP::ASP::Engine::Register_Buffer_Info>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E699F260;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::ASP::Engine::Register_Buffer_Info>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E699F260;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t AMCP::ASP::Engine::update_stream_active_state(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  int v10;
  int v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BOOL4 v24;
  uint64_t v25;
  int v26;

  v5 = *a2;
  v4 = a2[1];
  if (*a2 != v4)
  {
    v9 = result;
    v10 = 0;
    v11 = 0;
    v12 = *(_QWORD **)a4;
    v13 = *(_QWORD **)a3;
    while (v13 != (_QWORD *)(*(_QWORD *)a3 + 8 * (*(_QWORD *)(a3 + 8) >> 6)) || (*(_DWORD *)(a3 + 8) & 0x3F) != v10)
    {
      if (v12 == (_QWORD *)(*(_QWORD *)a4 + 8 * (*(_QWORD *)(a4 + 8) >> 6)) && (*(_DWORD *)(a4 + 8) & 0x3F) == v11)
        break;
      v16 = *v12 & (1 << v11);
      if (((*v13 >> v10) & 1) != (v16 != 0))
      {
        v17 = *(_QWORD *)(v9 + 728);
        v18 = *(unsigned int *)(v5 + 4);
        v25 = 0x676C6F6273616374;
        v26 = 0;
        v24 = v16 != 0;
        result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *, _QWORD, _QWORD, uint64_t, _BOOL4 *))(*(_QWORD *)v17 + 440))(v17, v18, 0, &v25, 0, 0, 4, &v24);
        v4 = a2[1];
      }
      v5 += 56;
      v13 += v10 == 63;
      if (v10 == 63)
        v10 = 0;
      else
        ++v10;
      v12 += v11 == 63;
      if (v11 == 63)
        v11 = 0;
      else
        ++v11;
      if (v5 == v4)
        return result;
    }
    if (v5 != v4)
    {
      while (v12 != (_QWORD *)(*(_QWORD *)a4 + 8 * (*(_QWORD *)(a4 + 8) >> 6)) || (*(_DWORD *)(a4 + 8) & 0x3F) != v11)
      {
        v20 = *(_QWORD *)(v9 + 728);
        v21 = *(unsigned int *)(v5 + 4);
        v25 = 0x676C6F6273616374;
        v26 = 0;
        v24 = (*v12 >> v11) & 1;
        result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *, _QWORD, _QWORD, uint64_t, _BOOL4 *))(*(_QWORD *)v20 + 440))(v20, v21, 0, &v25, 0, 0, 4, &v24);
        v5 += 56;
        v4 = a2[1];
        if (v5 == v4)
          return result;
        v12 += v11 == 63;
        if (v11 == 63)
          v11 = 0;
        else
          ++v11;
      }
      while (v5 != v4)
      {
        v22 = *(_QWORD *)(v9 + 728);
        v23 = *(unsigned int *)(v5 + 4);
        v25 = 0x676C6F6273616374;
        v26 = 0;
        v24 = 0;
        result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *, _QWORD, _QWORD, uint64_t, _BOOL4 *))(*(_QWORD *)v22 + 440))(v22, v23, 0, &v25, 0, 0, 4, &v24);
        v5 += 56;
        v4 = a2[1];
      }
    }
  }
  return result;
}

uint64_t applesauce::raii::v1::detail::ScopeGuard<AMCP::ASP::Engine::set_transport_state(AMCP::Transport_State)::$_0,applesauce::raii::v1::detail::StackFailPolicy>::~ScopeGuard(uint64_t a1)
{
  unsigned int *v2;

  if ((int)MEMORY[0x1B5E5064C]() > *(_DWORD *)a1)
  {
    v2 = *(unsigned int **)(a1 + 8);
    atomic_store(0, v2 + 34);
    AMCP::ASP::Engine::stop((AMCP::ASP::Engine *)v2);
  }
  return a1;
}

uint64_t *AMCP::ASP::Engine::stop(AMCP::ASP::Engine *this)
{
  kdebug_trace();
  (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 91) + 88))(*((_QWORD *)this + 91), *((unsigned int *)this + 184), 1);
  kdebug_trace();
  AMCP::IO_Clock::reset_time((os_unfair_lock_s *)this + 140);
  return AMCP::Core::Implementation::Simple_Engine_IO_State::release_power_assertions((uint64_t *)this + 15);
}

void AMCP::ASP::MCP_PlugIn_Wrapper::~MCP_PlugIn_Wrapper(AMCP::ASP::MCP_PlugIn_Wrapper *this)
{
  *(_QWORD *)this = &off_1E699ED90;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &off_1E699ED90;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  JUMPOUT(0x1B5E50688);
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::AddDeviceClient(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, const AudioServerPlugInClientInfo *a3)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, const AudioServerPlugInClientInfo *))(**(_QWORD **)(*((_QWORD *)this + 1) + 16)
                                                                                         + 56))(*(_QWORD *)(*((_QWORD *)this + 1) + 16), a2, a3);
}

void sub_1B5C8E508(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  AMCP::Log::Scope_Registry *v15;

  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "AddDeviceClient");
  AMCP::ASP::PlugIn::log_plugin_exception(v15, (uint64_t *)&__p);
  if (a15 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x1B5C8E4F8);
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::RemoveDeviceClient(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, const AudioServerPlugInClientInfo *a3)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, const AudioServerPlugInClientInfo *))(**(_QWORD **)(*((_QWORD *)this + 1) + 16)
                                                                                         + 64))(*(_QWORD *)(*((_QWORD *)this + 1) + 16), a2, a3);
}

void sub_1B5C8E580(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  AMCP::Log::Scope_Registry *v15;

  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "RemoveDeviceClient");
  AMCP::ASP::PlugIn::log_plugin_exception(v15, (uint64_t *)&__p);
  if (a15 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x1B5C8E570);
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::PerformDeviceConfigChange(AMCP::ASP::PlugIn **this, uint64_t a2, uint64_t a3, void *a4)
{
  return AMCP::ASP::PlugIn::PerformDeviceConfigChange(this[1], a2, a3, a4);
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::AbortDeviceConfigChange(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, void *a4)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, void *))(**(_QWORD **)(*((_QWORD *)this + 1) + 16) + 80))(*(_QWORD *)(*((_QWORD *)this + 1) + 16), a2, a3, a4);
}

void sub_1B5C8E600(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  AMCP::Log::Scope_Registry *v15;

  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "AbortDeviceConfigurationChange");
  AMCP::ASP::PlugIn::log_plugin_exception(v15, (uint64_t *)&__p);
  if (a15 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x1B5C8E5F0);
}

unint64_t AMCP::ASP::MCP_PlugIn_Wrapper::CreateDevice(AMCP::ASP::MCP_PlugIn_Wrapper *this, const __CFDictionary *a2, const AudioServerPlugInClientInfo *a3)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v6;

  v3 = *((_QWORD *)this + 1);
  v6 = 0;
  v4 = (*(uint64_t (**)(_QWORD, const __CFDictionary *, const AudioServerPlugInClientInfo *, unsigned int *))(**(_QWORD **)(v3 + 16) + 40))(*(_QWORD *)(v3 + 16), a2, a3, &v6);
  return v4 | ((unint64_t)v6 << 32);
}

void sub_1B5C8E68C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  AMCP::Log::Scope_Registry *v14;

  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "CreateDevice");
  AMCP::ASP::PlugIn::log_plugin_exception(v14, (uint64_t *)&__p);
  if (a14 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x1B5C8E670);
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::DestroyDevice(AMCP::ASP::MCP_PlugIn_Wrapper *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 16) + 48))(*(_QWORD *)(*((_QWORD *)this + 1) + 16));
}

void sub_1B5C8E704(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  AMCP::Log::Scope_Registry *v15;

  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "DestroyDevice");
  AMCP::ASP::PlugIn::log_plugin_exception(v15, (uint64_t *)&__p);
  if (a15 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x1B5C8E6F4);
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::Register_IOThread(AMCP::ASP::MCP_PlugIn_Wrapper *this, double a2)
{
  return 0;
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::Unregister_IOThread(AMCP::ASP::MCP_PlugIn_Wrapper *this)
{
  return 0;
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::Start(AMCP::ASP::MCP_PlugIn_Wrapper *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 16) + 128))(*(_QWORD *)(*((_QWORD *)this + 1) + 16));
}

void sub_1B5C8E78C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  AMCP::Log::Scope_Registry *v15;

  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "StartIO");
  AMCP::ASP::PlugIn::log_plugin_exception(v15, (uint64_t *)&__p);
  if (a15 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x1B5C8E77CLL);
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::Stop(AMCP::ASP::MCP_PlugIn_Wrapper *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 16) + 136))(*(_QWORD *)(*((_QWORD *)this + 1) + 16));
}

void sub_1B5C8E804(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  AMCP::Log::Scope_Registry *v15;

  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "StopIO");
  AMCP::ASP::PlugIn::log_plugin_exception(v15, (uint64_t *)&__p);
  if (a15 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x1B5C8E7F4);
}

double AMCP::ASP::MCP_PlugIn_Wrapper::GetZeroTimeStamp@<D0>(AMCP::ASP::MCP_PlugIn_Wrapper *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  double result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;

  v5 = *((_QWORD *)this + 1);
  v10 = 0.0;
  v8 = 0;
  v9 = 0;
  *(_DWORD *)a4 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, double *, uint64_t *, uint64_t *))(**(_QWORD **)(v5 + 16) + 144))(*(_QWORD *)(v5 + 16), a2, a3, &v10, &v9, &v8);
  result = v10;
  *(double *)(a4 + 8) = v10;
  v7 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  *(_QWORD *)(a4 + 24) = v7;
  return result;
}

void sub_1B5C8E8A8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  AMCP::Log::Scope_Registry *v14;

  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "GetZeroTimeStamp");
  AMCP::ASP::PlugIn::log_plugin_exception(v14, (uint64_t *)&__p);
  if (a14 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x1B5C8E884);
}

unint64_t AMCP::ASP::MCP_PlugIn_Wrapper::WillDo_IOThread(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  char v6;
  char v7;

  v3 = *((_QWORD *)this + 1);
  v7 = 0;
  v6 = 1;
  v4 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, char *, char *))(**(_QWORD **)(v3 + 16) + 152))(*(_QWORD *)(v3 + 16), a2, a3, 1953002084, &v7, &v6);
  return v4 | ((unint64_t)(v7 != 0) << 32);
}

void sub_1B5C8E950(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  AMCP::Log::Scope_Registry *v14;

  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "WillDoIOOperation (kAudioServerPlugInIOOperationThread)");
  AMCP::ASP::PlugIn::log_plugin_exception(v14, (uint64_t *)&__p);
  if (a14 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x1B5C8E92CLL);
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::Begin_IOThread(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, const AudioServerPlugInIOCycleInfo *a4)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, _QWORD, const AudioServerPlugInIOCycleInfo *))(**(_QWORD **)(*((_QWORD *)this + 1) + 16) + 160))(*(_QWORD *)(*((_QWORD *)this + 1) + 16), a2, a3, 1953002084, a4->mNominalIOBufferFrameSize, a4);
}

void sub_1B5C8E9D8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  AMCP::Log::Scope_Registry *v15;

  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "BeginIOOperation (kAudioServerPlugInIOOperationThread)");
  AMCP::ASP::PlugIn::log_plugin_exception(v15, (uint64_t *)&__p);
  if (a15 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x1B5C8E9C8);
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::End_IOThread(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, const AudioServerPlugInIOCycleInfo *a4)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, _QWORD, const AudioServerPlugInIOCycleInfo *))(**(_QWORD **)(*((_QWORD *)this + 1) + 16) + 176))(*(_QWORD *)(*((_QWORD *)this + 1) + 16), a2, a3, 1953002084, a4->mNominalIOBufferFrameSize, a4);
}

void sub_1B5C8EA60(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  AMCP::Log::Scope_Registry *v15;

  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "EndIOOperation (kAudioServerPlugInIOOperationThread)");
  AMCP::ASP::PlugIn::log_plugin_exception(v15, (uint64_t *)&__p);
  if (a15 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x1B5C8EA50);
}

unint64_t AMCP::ASP::MCP_PlugIn_Wrapper::WillDo_IOCycle(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  char v6;
  char v7;

  v3 = *((_QWORD *)this + 1);
  v7 = 0;
  v6 = 1;
  v4 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, char *, char *))(**(_QWORD **)(v3 + 16) + 152))(*(_QWORD *)(v3 + 16), a2, a3, 1668899692, &v7, &v6);
  return v4 | ((unint64_t)(v7 != 0) << 32);
}

void sub_1B5C8EB08(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  AMCP::Log::Scope_Registry *v14;

  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "WillDoIOOperation (kAudioServerPlugInIOOperationCycle)");
  AMCP::ASP::PlugIn::log_plugin_exception(v14, (uint64_t *)&__p);
  if (a14 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x1B5C8EAE4);
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::Begin_IOCycle(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, const AudioServerPlugInIOCycleInfo *a4)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, _QWORD, const AudioServerPlugInIOCycleInfo *))(**(_QWORD **)(*((_QWORD *)this + 1) + 16) + 160))(*(_QWORD *)(*((_QWORD *)this + 1) + 16), a2, a3, 1668899692, a4->mNominalIOBufferFrameSize, a4);
}

void sub_1B5C8EB90(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  AMCP::Log::Scope_Registry *v15;

  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "BeginIOOperation (kAudioServerPlugInIOOperationCycle)");
  AMCP::ASP::PlugIn::log_plugin_exception(v15, (uint64_t *)&__p);
  if (a15 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x1B5C8EB80);
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::End_IOCycle(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, const AudioServerPlugInIOCycleInfo *a4)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, _QWORD, const AudioServerPlugInIOCycleInfo *))(**(_QWORD **)(*((_QWORD *)this + 1) + 16) + 176))(*(_QWORD *)(*((_QWORD *)this + 1) + 16), a2, a3, 1668899692, a4->mNominalIOBufferFrameSize, a4);
}

void sub_1B5C8EC18(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  AMCP::Log::Scope_Registry *v15;

  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "EndIOOperation (kAudioServerPlugInIOOperationCycle)");
  AMCP::ASP::PlugIn::log_plugin_exception(v15, (uint64_t *)&__p);
  if (a15 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x1B5C8EC08);
}

unint64_t AMCP::ASP::MCP_PlugIn_Wrapper::WillDo_ReadInput(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  char v6;
  char v7;

  v3 = *((_QWORD *)this + 1);
  v7 = 0;
  v6 = 1;
  v4 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, char *, char *))(**(_QWORD **)(v3 + 16) + 152))(*(_QWORD *)(v3 + 16), a2, a3, 1919246692, &v7, &v6);
  return v4 | ((unint64_t)(v7 != 0) << 32);
}

void sub_1B5C8ECC0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  AMCP::Log::Scope_Registry *v14;

  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "WillDoIOOperation (kAudioServerPlugInIOOperationReadInput)");
  AMCP::ASP::PlugIn::log_plugin_exception(v14, (uint64_t *)&__p);
  if (a14 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x1B5C8EC9CLL);
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::Begin_ReadInput(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(**(_QWORD **)(*((_QWORD *)this + 1) + 16) + 160))(*(_QWORD *)(*((_QWORD *)this + 1) + 16), a2, a3, 1919246692, a4, a5);
}

void sub_1B5C8ED48(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  AMCP::Log::Scope_Registry *v15;

  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "BeginIOOperation (kAudioServerPlugInIOOperationReadInput)");
  AMCP::ASP::PlugIn::log_plugin_exception(v15, (uint64_t *)&__p);
  if (a15 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x1B5C8ED38);
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::Do_ReadInput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 16) + 168))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16), a2, a3, a4, 1919246692, a5, a6, *(_QWORD *)(*(_QWORD *)a7 + 8), 0);
}

void sub_1B5C8EDE0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  AMCP::Log::Scope_Registry *v15;

  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "DoIOOperation (kAudioServerPlugInIOOperationReadInput)");
  AMCP::ASP::PlugIn::log_plugin_exception(v15, (uint64_t *)&__p);
  if (a15 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x1B5C8EDD0);
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::End_ReadInput(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(**(_QWORD **)(*((_QWORD *)this + 1) + 16) + 176))(*(_QWORD *)(*((_QWORD *)this + 1) + 16), a2, a3, 1919246692, a4, a5);
}

void sub_1B5C8EE68(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  AMCP::Log::Scope_Registry *v15;

  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "EndIOOperation (kAudioServerPlugInIOOperationReadInput)");
  AMCP::ASP::PlugIn::log_plugin_exception(v15, (uint64_t *)&__p);
  if (a15 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x1B5C8EE58);
}

unint64_t AMCP::ASP::MCP_PlugIn_Wrapper::WillDo_ConvertInput(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  char v6;
  char v7;

  v3 = *((_QWORD *)this + 1);
  v7 = 0;
  v6 = 1;
  v4 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, char *, char *))(**(_QWORD **)(v3 + 16) + 152))(*(_QWORD *)(v3 + 16), a2, a3, 1667853936, &v7, &v6);
  return v4 | ((unint64_t)(v7 != 0) << 32) | ((unint64_t)(v6 != 0) << 40);
}

void sub_1B5C8EF20(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  AMCP::Log::Scope_Registry *v14;

  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "WillDoIOOperation (kAudioServerPlugInIOOperationConvertInput)");
  AMCP::ASP::PlugIn::log_plugin_exception(v14, (uint64_t *)&__p);
  if (a14 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x1B5C8EEECLL);
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::Begin_ConvertInput(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(**(_QWORD **)(*((_QWORD *)this + 1) + 16) + 160))(*(_QWORD *)(*((_QWORD *)this + 1) + 16), a2, a3, 1667853936, a4, a5);
}

void sub_1B5C8EFA8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  AMCP::Log::Scope_Registry *v15;

  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "BeginIOOperation (kAudioServerPlugInIOOperationConvertInput)");
  AMCP::ASP::PlugIn::log_plugin_exception(v15, (uint64_t *)&__p);
  if (a15 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x1B5C8EF98);
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::Do_ConvertInput(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const AudioServerPlugInIOCycleInfo *a6, void *a7, void *a8)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *, void *, void *))(**(_QWORD **)(*((_QWORD *)this + 1) + 16) + 168))(*(_QWORD *)(*((_QWORD *)this + 1) + 16), a2, a3, a4, 1667853936, a5, a6, a7, a8);
}

void sub_1B5C8F03C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  AMCP::Log::Scope_Registry *v15;

  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "DoIOOperation (kAudioServerPlugInIOOperationConvertInput)");
  AMCP::ASP::PlugIn::log_plugin_exception(v15, (uint64_t *)&__p);
  if (a15 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x1B5C8F02CLL);
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::End_ConvertInput(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(**(_QWORD **)(*((_QWORD *)this + 1) + 16) + 176))(*(_QWORD *)(*((_QWORD *)this + 1) + 16), a2, a3, 1667853936, a4, a5);
}

void sub_1B5C8F0C4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  AMCP::Log::Scope_Registry *v15;

  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "EndIOOperation (kAudioServerPlugInIOOperationConvertInput)");
  AMCP::ASP::PlugIn::log_plugin_exception(v15, (uint64_t *)&__p);
  if (a15 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x1B5C8F0B4);
}

unint64_t AMCP::ASP::MCP_PlugIn_Wrapper::WillDo_ProcessInput(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  char v6;
  char v7;

  v3 = *((_QWORD *)this + 1);
  v7 = 0;
  v6 = 1;
  v4 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, char *, char *))(**(_QWORD **)(v3 + 16) + 152))(*(_QWORD *)(v3 + 16), a2, a3, 1885957744, &v7, &v6);
  return v4 | ((unint64_t)(v7 != 0) << 32) | ((unint64_t)(v6 != 0) << 40);
}

void sub_1B5C8F17C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  AMCP::Log::Scope_Registry *v14;

  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "WillDoIOOperation (kAudioServerPlugInIOOperationProcessInput)");
  AMCP::ASP::PlugIn::log_plugin_exception(v14, (uint64_t *)&__p);
  if (a14 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x1B5C8F148);
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::Begin_ProcessInput(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(**(_QWORD **)(*((_QWORD *)this + 1) + 16) + 160))(*(_QWORD *)(*((_QWORD *)this + 1) + 16), a2, a3, 1885957744, a4, a5);
}

void sub_1B5C8F204(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  AMCP::Log::Scope_Registry *v15;

  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "BeginIOOperation (kAudioServerPlugInIOOperationProcessInput)");
  AMCP::ASP::PlugIn::log_plugin_exception(v15, (uint64_t *)&__p);
  if (a15 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x1B5C8F1F4);
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::Do_ProcessInput(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const AudioServerPlugInIOCycleInfo *a6, void *a7, void *a8)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *, void *, void *))(**(_QWORD **)(*((_QWORD *)this + 1) + 16) + 168))(*(_QWORD *)(*((_QWORD *)this + 1) + 16), a2, a3, a4, 1885957744, a5, a6, a7, a8);
}

void sub_1B5C8F298(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  AMCP::Log::Scope_Registry *v15;

  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "DoIOOperation (kAudioServerPlugInIOOperationProcessInput)");
  AMCP::ASP::PlugIn::log_plugin_exception(v15, (uint64_t *)&__p);
  if (a15 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x1B5C8F288);
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::End_ProcessInput(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(**(_QWORD **)(*((_QWORD *)this + 1) + 16) + 176))(*(_QWORD *)(*((_QWORD *)this + 1) + 16), a2, a3, 1885957744, a4, a5);
}

void sub_1B5C8F320(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  AMCP::Log::Scope_Registry *v15;

  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "EndIOOperation (kAudioServerPlugInIOOperationProcessInput)");
  AMCP::ASP::PlugIn::log_plugin_exception(v15, (uint64_t *)&__p);
  if (a15 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x1B5C8F310);
}

unint64_t AMCP::ASP::MCP_PlugIn_Wrapper::WillDo_ProcessOutput(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  char v6;
  char v7;

  v3 = *((_QWORD *)this + 1);
  v7 = 0;
  v6 = 1;
  v4 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, char *, char *))(**(_QWORD **)(v3 + 16) + 152))(*(_QWORD *)(v3 + 16), a2, a3, 1886352756, &v7, &v6);
  return v4 | ((unint64_t)(v7 != 0) << 32) | ((unint64_t)(v6 != 0) << 40);
}

void sub_1B5C8F3D8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  AMCP::Log::Scope_Registry *v14;

  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "WillDoIOOperation (kAudioServerPlugInIOOperationProcessOutput)");
  AMCP::ASP::PlugIn::log_plugin_exception(v14, (uint64_t *)&__p);
  if (a14 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x1B5C8F3A4);
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::Begin_ProcessOutput(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(**(_QWORD **)(*((_QWORD *)this + 1) + 16) + 160))(*(_QWORD *)(*((_QWORD *)this + 1) + 16), a2, a3, 1886352756, a4, a5);
}

void sub_1B5C8F460(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  AMCP::Log::Scope_Registry *v15;

  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "BeginIOOperation (kAudioServerPlugInIOOperationProcessOutput)");
  AMCP::ASP::PlugIn::log_plugin_exception(v15, (uint64_t *)&__p);
  if (a15 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x1B5C8F450);
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::Do_ProcessOutput(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const AudioServerPlugInIOCycleInfo *a6, void *a7, void *a8)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *, void *, void *))(**(_QWORD **)(*((_QWORD *)this + 1) + 16) + 168))(*(_QWORD *)(*((_QWORD *)this + 1) + 16), a2, a3, a4, 1886352756, a5, a6, a7, a8);
}

void sub_1B5C8F4F4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  AMCP::Log::Scope_Registry *v15;

  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "DoIOOperation (kAudioServerPlugInIOOperationProcessOutput)");
  AMCP::ASP::PlugIn::log_plugin_exception(v15, (uint64_t *)&__p);
  if (a15 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x1B5C8F4E4);
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::End_ProcessOutput(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(**(_QWORD **)(*((_QWORD *)this + 1) + 16) + 176))(*(_QWORD *)(*((_QWORD *)this + 1) + 16), a2, a3, 1886352756, a4, a5);
}

void sub_1B5C8F57C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  AMCP::Log::Scope_Registry *v15;

  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "EndIOOperation (kAudioServerPlugInIOOperationProcessOutput)");
  AMCP::ASP::PlugIn::log_plugin_exception(v15, (uint64_t *)&__p);
  if (a15 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x1B5C8F56CLL);
}

unint64_t AMCP::ASP::MCP_PlugIn_Wrapper::WillDo_MixOutput(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  char v6;
  char v7;

  v3 = *((_QWORD *)this + 1);
  v7 = 0;
  v6 = 1;
  v4 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, char *, char *))(**(_QWORD **)(v3 + 16) + 152))(*(_QWORD *)(v3 + 16), a2, a3, 1835628655, &v7, &v6);
  return v4 | ((unint64_t)(v7 != 0) << 32);
}

void sub_1B5C8F624(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  AMCP::Log::Scope_Registry *v14;

  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "WillDoIOOperation (kAudioServerPlugInIOOperationMixOutput)");
  AMCP::ASP::PlugIn::log_plugin_exception(v14, (uint64_t *)&__p);
  if (a14 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x1B5C8F600);
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::Begin_MixOutput(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(**(_QWORD **)(*((_QWORD *)this + 1) + 16) + 160))(*(_QWORD *)(*((_QWORD *)this + 1) + 16), a2, a3, 1835628655, a4, a5);
}

void sub_1B5C8F6AC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  AMCP::Log::Scope_Registry *v15;

  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "BeginIOOperation (kAudioServerPlugInIOOperationMixOutput)");
  AMCP::ASP::PlugIn::log_plugin_exception(v15, (uint64_t *)&__p);
  if (a15 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x1B5C8F69CLL);
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::Do_MixOutput(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const AudioServerPlugInIOCycleInfo *a6, void *a7)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *, void *, _QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 16) + 168))(*(_QWORD *)(*((_QWORD *)this + 1) + 16), a2, a3, a4, 1835628655, a5, a6, a7, 0);
}

void sub_1B5C8F73C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  AMCP::Log::Scope_Registry *v15;

  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "DoIOOperation (kAudioServerPlugInIOOperationMixOutput)");
  AMCP::ASP::PlugIn::log_plugin_exception(v15, (uint64_t *)&__p);
  if (a15 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x1B5C8F72CLL);
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::End_MixOutput(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(**(_QWORD **)(*((_QWORD *)this + 1) + 16) + 176))(*(_QWORD *)(*((_QWORD *)this + 1) + 16), a2, a3, 1835628655, a4, a5);
}

void sub_1B5C8F7C4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  AMCP::Log::Scope_Registry *v15;

  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "EndIOOperation (kAudioServerPlugInIOOperationMixOutput)");
  AMCP::ASP::PlugIn::log_plugin_exception(v15, (uint64_t *)&__p);
  if (a15 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x1B5C8F7B4);
}

unint64_t AMCP::ASP::MCP_PlugIn_Wrapper::WillDo_ProcessMix(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  char v6;
  char v7;

  v3 = *((_QWORD *)this + 1);
  v7 = 0;
  v6 = 1;
  v4 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, char *, char *))(**(_QWORD **)(v3 + 16) + 152))(*(_QWORD *)(v3 + 16), a2, a3, 1886218616, &v7, &v6);
  return v4 | ((unint64_t)(v7 != 0) << 32) | ((unint64_t)(v6 != 0) << 40);
}

void sub_1B5C8F87C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  AMCP::Log::Scope_Registry *v14;

  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "WillDoIOOperation (kAudioServerPlugInIOOperationProcessMix)");
  AMCP::ASP::PlugIn::log_plugin_exception(v14, (uint64_t *)&__p);
  if (a14 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x1B5C8F848);
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::Begin_ProcessMix(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(**(_QWORD **)(*((_QWORD *)this + 1) + 16) + 160))(*(_QWORD *)(*((_QWORD *)this + 1) + 16), a2, a3, 1886218616, a4, a5);
}

void sub_1B5C8F904(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  AMCP::Log::Scope_Registry *v15;

  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "BeginIOOperation (kAudioServerPlugInIOOperationProcessMix)");
  AMCP::ASP::PlugIn::log_plugin_exception(v15, (uint64_t *)&__p);
  if (a15 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x1B5C8F8F4);
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::Do_ProcessMix(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const AudioServerPlugInIOCycleInfo *a6, void *a7, void *a8)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *, void *, void *))(**(_QWORD **)(*((_QWORD *)this + 1) + 16) + 168))(*(_QWORD *)(*((_QWORD *)this + 1) + 16), a2, a3, a4, 1886218616, a5, a6, a7, a8);
}

void sub_1B5C8F998(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  AMCP::Log::Scope_Registry *v15;

  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "DoIOOperation (kAudioServerPlugInIOOperationProcessMix)");
  AMCP::ASP::PlugIn::log_plugin_exception(v15, (uint64_t *)&__p);
  if (a15 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x1B5C8F988);
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::End_ProcessMix(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(**(_QWORD **)(*((_QWORD *)this + 1) + 16) + 176))(*(_QWORD *)(*((_QWORD *)this + 1) + 16), a2, a3, 1886218616, a4, a5);
}

void sub_1B5C8FA20(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  AMCP::Log::Scope_Registry *v15;

  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "EndIOOperation (kAudioServerPlugInIOOperationProcessMix)");
  AMCP::ASP::PlugIn::log_plugin_exception(v15, (uint64_t *)&__p);
  if (a15 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x1B5C8FA10);
}

unint64_t AMCP::ASP::MCP_PlugIn_Wrapper::WillDo_ConvertMix(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  char v6;
  char v7;

  v3 = *((_QWORD *)this + 1);
  v7 = 0;
  v6 = 1;
  v4 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, char *, char *))(**(_QWORD **)(v3 + 16) + 152))(*(_QWORD *)(v3 + 16), a2, a3, 1668114808, &v7, &v6);
  return v4 | ((unint64_t)(v7 != 0) << 32) | ((unint64_t)(v6 != 0) << 40);
}

void sub_1B5C8FAD8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  AMCP::Log::Scope_Registry *v14;

  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "WillDoIOOperation (kAudioServerPlugInIOOperationConvertMix)");
  AMCP::ASP::PlugIn::log_plugin_exception(v14, (uint64_t *)&__p);
  if (a14 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x1B5C8FAA4);
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::Begin_ConvertMix(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(**(_QWORD **)(*((_QWORD *)this + 1) + 16) + 160))(*(_QWORD *)(*((_QWORD *)this + 1) + 16), a2, a3, 1668114808, a4, a5);
}

void sub_1B5C8FB60(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  AMCP::Log::Scope_Registry *v15;

  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "BeginIOOperation (kAudioServerPlugInIOOperationConvertMix)");
  AMCP::ASP::PlugIn::log_plugin_exception(v15, (uint64_t *)&__p);
  if (a15 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x1B5C8FB50);
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::Do_ConvertMix(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const AudioServerPlugInIOCycleInfo *a6, void *a7, void *a8)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *, void *, void *))(**(_QWORD **)(*((_QWORD *)this + 1) + 16) + 168))(*(_QWORD *)(*((_QWORD *)this + 1) + 16), a2, a3, a4, 1668114808, a5, a6, a7, a8);
}

void sub_1B5C8FBF4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  AMCP::Log::Scope_Registry *v15;

  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "DoIOOperation (kAudioServerPlugInIOOperationConvertMix)");
  AMCP::ASP::PlugIn::log_plugin_exception(v15, (uint64_t *)&__p);
  if (a15 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x1B5C8FBE4);
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::End_ConvertMix(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(**(_QWORD **)(*((_QWORD *)this + 1) + 16) + 176))(*(_QWORD *)(*((_QWORD *)this + 1) + 16), a2, a3, 1668114808, a4, a5);
}

void sub_1B5C8FC7C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  AMCP::Log::Scope_Registry *v15;

  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "EndIOOperation (kAudioServerPlugInIOOperationConvertMix)");
  AMCP::ASP::PlugIn::log_plugin_exception(v15, (uint64_t *)&__p);
  if (a15 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x1B5C8FC6CLL);
}

unint64_t AMCP::ASP::MCP_PlugIn_Wrapper::WillDo_WriteMix(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  char v6;
  char v7;

  v3 = *((_QWORD *)this + 1);
  v7 = 0;
  v6 = 1;
  v4 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, char *, char *))(**(_QWORD **)(v3 + 16) + 152))(*(_QWORD *)(v3 + 16), a2, a3, 1919513701, &v7, &v6);
  return v4 | ((unint64_t)(v7 != 0) << 32);
}

void sub_1B5C8FD24(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  AMCP::Log::Scope_Registry *v14;

  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "WillDoIOOperation (kAudioServerPlugInIOOperationWriteMix)");
  AMCP::ASP::PlugIn::log_plugin_exception(v14, (uint64_t *)&__p);
  if (a14 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x1B5C8FD00);
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::Begin_WriteMix(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(**(_QWORD **)(*((_QWORD *)this + 1) + 16) + 160))(*(_QWORD *)(*((_QWORD *)this + 1) + 16), a2, a3, 1919513701, a4, a5);
}

void sub_1B5C8FDAC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  AMCP::Log::Scope_Registry *v15;

  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "BeginIOOperation (kAudioServerPlugInIOOperationWriteMix)");
  AMCP::ASP::PlugIn::log_plugin_exception(v15, (uint64_t *)&__p);
  if (a15 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x1B5C8FD9CLL);
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::Do_WriteMix(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 16) + 168))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16), a2, a3, a4, 1919513701, a5, a6, *(_QWORD *)(*(_QWORD *)a7 + 8), 0);
}

void sub_1B5C8FE44(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  AMCP::Log::Scope_Registry *v15;

  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "DoIOOperation (kAudioServerPlugInIOOperationWriteMix)");
  AMCP::ASP::PlugIn::log_plugin_exception(v15, (uint64_t *)&__p);
  if (a15 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x1B5C8FE34);
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::End_WriteMix(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(**(_QWORD **)(*((_QWORD *)this + 1) + 16) + 176))(*(_QWORD *)(*((_QWORD *)this + 1) + 16), a2, a3, 1919513701, a4, a5);
}

void sub_1B5C8FECC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  AMCP::Log::Scope_Registry *v15;

  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "EndIOOperation (kAudioServerPlugInIOOperationWriteMix)");
  AMCP::ASP::PlugIn::log_plugin_exception(v15, (uint64_t *)&__p);
  if (a15 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x1B5C8FEBCLL);
}

BOOL AMCP::ASP::MCP_PlugIn_Wrapper::ObjectHasProperty(AMCP::ASP::PlugIn **this, uint64_t a2, uint64_t a3, const AudioObjectPropertyAddress *a4)
{
  return AMCP::ASP::PlugIn::ObjectHasProperty(this[1], a2, a3, a4);
}

unint64_t AMCP::ASP::MCP_PlugIn_Wrapper::ObjectIsPropertySettable(AMCP::ASP::PlugIn **this, uint64_t a2, uint64_t a3, const AudioObjectPropertyAddress *a4)
{
  return AMCP::ASP::PlugIn::ObjectIsPropertySettable(this[1], a2, a3, a4);
}

unint64_t AMCP::ASP::MCP_PlugIn_Wrapper::ObjectGetPropertyDataSize(AMCP::ASP::PlugIn **this, uint64_t a2, uint64_t a3, const AudioObjectPropertyAddress *a4, uint64_t a5, const void *a6)
{
  return AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(this[1], a2, a3, a4, a5, a6);
}

unint64_t AMCP::ASP::MCP_PlugIn_Wrapper::ObjectGetPropertyData(AMCP::ASP::PlugIn **this, uint64_t a2, uint64_t a3, const AudioObjectPropertyAddress *a4, uint64_t a5, const void *a6, uint64_t a7, void *a8)
{
  return AMCP::ASP::PlugIn::ObjectGetPropertyData(this[1], a2, a3, a4, a5, a6, a7, a8);
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::ObjectSetPropertyData(AMCP::ASP::PlugIn **this, uint64_t a2, uint64_t a3, const AudioObjectPropertyAddress *a4, uint64_t a5, const void *a6, uint64_t a7, const void *a8)
{
  return AMCP::ASP::PlugIn::ObjectSetPropertyData(this[1], a2, a3, a4, a5, a6, a7, a8);
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::RegisterIOBuffer(AMCP::ASP::MCP_PlugIn_Wrapper *this, unsigned int a2, unsigned int a3, unsigned int a4, BOOL a5, unsigned int a6, void *a7)
{
  return 0;
}

void AMCP::ASP::Legacy_PlugIn_Wrapper::~Legacy_PlugIn_Wrapper(AMCP::ASP::Legacy_PlugIn_Wrapper *this)
{
  *(_QWORD *)this = &off_1E699EF70;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &off_1E699EF70;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  JUMPOUT(0x1B5E50688);
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::AddDeviceClient(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, const AudioServerPlugInClientInfo *a3)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, const AudioServerPlugInClientInfo *))(**((_QWORD **)this + 1) + 80))(*((_QWORD *)this + 1), a2, a3);
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::RemoveDeviceClient(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, const AudioServerPlugInClientInfo *a3)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, const AudioServerPlugInClientInfo *))(**((_QWORD **)this + 1) + 88))(*((_QWORD *)this + 1), a2, a3);
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::PerformDeviceConfigChange(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, void *a4)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, void *))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1), a2, a3, a4);
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::AbortDeviceConfigChange(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, void *a4)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, void *))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1), a2, a3, a4);
}

unint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::CreateDevice(AMCP::ASP::Legacy_PlugIn_Wrapper *this, const __CFDictionary *a2, const AudioServerPlugInClientInfo *a3)
{
  unsigned int v3;
  unsigned int v5;

  v5 = 0;
  v3 = (*(uint64_t (**)(_QWORD, const __CFDictionary *, const AudioServerPlugInClientInfo *, unsigned int *))(**((_QWORD **)this + 1) + 112))(*((_QWORD *)this + 1), a2, a3, &v5);
  return v3 | ((unint64_t)v5 << 32);
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::DestroyDevice(AMCP::ASP::Legacy_PlugIn_Wrapper *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 120))(*((_QWORD *)this + 1));
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::Register_IOThread(AMCP::ASP::Legacy_PlugIn_Wrapper *this, double a2)
{
  return (*(uint64_t (**)(_QWORD, double))(**((_QWORD **)this + 1) + 176))(*((_QWORD *)this + 1), a2);
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::Unregister_IOThread(AMCP::ASP::Legacy_PlugIn_Wrapper *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 184))(*((_QWORD *)this + 1));
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::Start(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**((_QWORD **)this + 1) + 192))(*((_QWORD *)this + 1), a2, a3, 0);
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::Stop(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**((_QWORD **)this + 1) + 200))(*((_QWORD *)this + 1), a2, a3, 0);
}

double AMCP::ASP::Legacy_PlugIn_Wrapper::GetZeroTimeStamp@<D0>(AMCP::ASP::Legacy_PlugIn_Wrapper *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;

  v8 = 0;
  v9 = 0.0;
  v7 = 0;
  *(_DWORD *)a4 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, double *, uint64_t *, uint64_t *))(**((_QWORD **)this + 1) + 208))(*((_QWORD *)this + 1), a2, a3, &v9, &v8, &v7);
  result = v9;
  *(double *)(a4 + 8) = v9;
  v6 = v7;
  *(_QWORD *)(a4 + 16) = v8;
  *(_QWORD *)(a4 + 24) = v6;
  return result;
}

unint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::WillDo_IOThread(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  unsigned __int8 v5;

  v5 = 0;
  v3 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, unsigned __int8 *))(**((_QWORD **)this + 1) + 216))(*((_QWORD *)this + 1), a2, a3, &v5);
  return v3 | ((unint64_t)v5 << 32);
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::Begin_IOThread(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, const AudioServerPlugInIOCycleInfo *a4)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(**((_QWORD **)this + 1) + 224))(*((_QWORD *)this + 1), a2, a3, a4);
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::End_IOThread(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, const AudioServerPlugInIOCycleInfo *a4)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(**((_QWORD **)this + 1) + 232))(*((_QWORD *)this + 1), a2, a3, a4);
}

unint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::WillDo_IOCycle(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  unsigned __int8 v5;

  v5 = 0;
  v3 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, unsigned __int8 *))(**((_QWORD **)this + 1) + 240))(*((_QWORD *)this + 1), a2, a3, &v5);
  return v3 | ((unint64_t)v5 << 32);
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::Begin_IOCycle(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, const AudioServerPlugInIOCycleInfo *a4)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(**((_QWORD **)this + 1) + 248))(*((_QWORD *)this + 1), a2, a3, a4);
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::End_IOCycle(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, const AudioServerPlugInIOCycleInfo *a4)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(**((_QWORD **)this + 1) + 256))(*((_QWORD *)this + 1), a2, a3, a4);
}

unint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::WillDo_ReadInput(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  unsigned __int8 v5;

  v5 = 0;
  v3 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, unsigned __int8 *))(**((_QWORD **)this + 1) + 264))(*((_QWORD *)this + 1), a2, a3, &v5);
  return v3 | ((unint64_t)v5 << 32);
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::Begin_ReadInput(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(**((_QWORD **)this + 1) + 272))(*((_QWORD *)this + 1), a2, a3, a4, a5);
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::Do_ReadInput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t *v7;
  int v8;
  uint64_t v10;
  int v11;
  int32x2_t v12;

  if (*(_BYTE *)(a1 + 24))
    v7 = a7;
  else
    v7 = (uint64_t *)*a7;
  if (*(_BYTE *)(a1 + 24))
    v8 = *((_DWORD *)a7 + 4);
  else
    v8 = 0;
  v10 = v7[1];
  v11 = v8;
  v12 = vmovn_s64(*(int64x2_t *)(a7 + 3));
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(**(_QWORD **)(a1 + 8) + 280))(*(_QWORD *)(a1 + 8), a2, a3, a4, a5, a6, &v10);
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::End_ReadInput(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(**((_QWORD **)this + 1) + 312))(*((_QWORD *)this + 1), a2, a3, a4, a5);
}

unint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::WillDo_ConvertInput(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  __int16 v5;

  v5 = 0;
  v3 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, char *, __int16 *))(**((_QWORD **)this + 1) + 320))(*((_QWORD *)this + 1), a2, a3, (char *)&v5 + 1, &v5);
  return v3 | ((unint64_t)HIBYTE(v5) << 32) | ((unint64_t)v5 << 40);
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::Begin_ConvertInput(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(**((_QWORD **)this + 1) + 328))(*((_QWORD *)this + 1), a2, a3, a4, a5);
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::Do_ConvertInput(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const AudioServerPlugInIOCycleInfo *a6, void *a7, void *a8)
{
  _QWORD v9[2];
  int v10;
  _QWORD v11[2];
  int v12;

  v12 = 0;
  v10 = 0;
  v11[0] = a7;
  v11[1] = 0;
  v9[0] = a8;
  v9[1] = 0;
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *, _QWORD *, _QWORD *))(**((_QWORD **)this + 1) + 336))(*((_QWORD *)this + 1), a2, a3, a4, a5, a6, v11, v9);
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::End_ConvertInput(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(**((_QWORD **)this + 1) + 344))(*((_QWORD *)this + 1), a2, a3, a4, a5);
}

unint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::WillDo_ProcessInput(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  __int16 v5;

  v5 = 0;
  v3 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, char *, __int16 *))(**((_QWORD **)this + 1) + 352))(*((_QWORD *)this + 1), a2, a3, (char *)&v5 + 1, &v5);
  return v3 | ((unint64_t)HIBYTE(v5) << 32) | ((unint64_t)v5 << 40);
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::Begin_ProcessInput(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(**((_QWORD **)this + 1) + 360))(*((_QWORD *)this + 1), a2, a3, a4, a5);
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::Do_ProcessInput(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const AudioServerPlugInIOCycleInfo *a6, void *a7, void *a8)
{
  _QWORD v9[2];
  int v10;
  _QWORD v11[2];
  int v12;

  v12 = 0;
  v10 = 0;
  v11[0] = a7;
  v11[1] = 0;
  v9[0] = a8;
  v9[1] = 0;
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *, _QWORD *, _QWORD *))(**((_QWORD **)this + 1) + 368))(*((_QWORD *)this + 1), a2, a3, a4, a5, a6, v11, v9);
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::End_ProcessInput(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(**((_QWORD **)this + 1) + 376))(*((_QWORD *)this + 1), a2, a3, a4, a5);
}

unint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::WillDo_ProcessOutput(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  __int16 v5;

  v5 = 0;
  v3 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, char *, __int16 *))(**((_QWORD **)this + 1) + 384))(*((_QWORD *)this + 1), a2, a3, (char *)&v5 + 1, &v5);
  return v3 | ((unint64_t)HIBYTE(v5) << 32) | ((unint64_t)v5 << 40);
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::Begin_ProcessOutput(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(**((_QWORD **)this + 1) + 392))(*((_QWORD *)this + 1), a2, a3, a4, a5);
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::Do_ProcessOutput(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const AudioServerPlugInIOCycleInfo *a6, void *a7, void *a8)
{
  _QWORD v9[2];
  int v10;
  _QWORD v11[2];
  int v12;

  v12 = 0;
  v10 = 0;
  v11[0] = a7;
  v11[1] = 0;
  v9[0] = a8;
  v9[1] = 0;
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *, _QWORD *, _QWORD *))(**((_QWORD **)this + 1) + 400))(*((_QWORD *)this + 1), a2, a3, a4, a5, a6, v11, v9);
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::End_ProcessOutput(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(**((_QWORD **)this + 1) + 408))(*((_QWORD *)this + 1), a2, a3, a4, a5);
}

unint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::WillDo_MixOutput(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  unsigned __int8 v5;

  v5 = 0;
  v3 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, unsigned __int8 *))(**((_QWORD **)this + 1) + 416))(*((_QWORD *)this + 1), a2, a3, &v5);
  return v3 | ((unint64_t)v5 << 32);
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::Begin_MixOutput(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(**((_QWORD **)this + 1) + 424))(*((_QWORD *)this + 1), a2, a3, a4, a5);
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::Do_MixOutput(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const AudioServerPlugInIOCycleInfo *a6, void *a7)
{
  _QWORD v8[2];
  int v9;

  v9 = 0;
  v8[0] = a7;
  v8[1] = 0;
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *, _QWORD *))(**((_QWORD **)this + 1) + 432))(*((_QWORD *)this + 1), a2, a3, a4, a5, a6, v8);
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::End_MixOutput(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(**((_QWORD **)this + 1) + 440))(*((_QWORD *)this + 1), a2, a3, a4, a5);
}

unint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::WillDo_ProcessMix(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  __int16 v5;

  v5 = 0;
  v3 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, char *, __int16 *))(**((_QWORD **)this + 1) + 448))(*((_QWORD *)this + 1), a2, a3, (char *)&v5 + 1, &v5);
  return v3 | ((unint64_t)HIBYTE(v5) << 32) | ((unint64_t)v5 << 40);
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::Begin_ProcessMix(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(**((_QWORD **)this + 1) + 456))(*((_QWORD *)this + 1), a2, a3, a4, a5);
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::Do_ProcessMix(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const AudioServerPlugInIOCycleInfo *a6, void *a7, void *a8)
{
  _QWORD v9[2];
  int v10;
  _QWORD v11[2];
  int v12;

  v12 = 0;
  v10 = 0;
  v11[0] = a7;
  v11[1] = 0;
  v9[0] = a8;
  v9[1] = 0;
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *, _QWORD *, _QWORD *))(**((_QWORD **)this + 1) + 464))(*((_QWORD *)this + 1), a2, a3, a4, a5, a6, v11, v9);
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::End_ProcessMix(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(**((_QWORD **)this + 1) + 472))(*((_QWORD *)this + 1), a2, a3, a4, a5);
}

unint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::WillDo_ConvertMix(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  __int16 v5;

  v5 = 0;
  v3 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, char *, __int16 *))(**((_QWORD **)this + 1) + 480))(*((_QWORD *)this + 1), a2, a3, (char *)&v5 + 1, &v5);
  return v3 | ((unint64_t)HIBYTE(v5) << 32) | ((unint64_t)v5 << 40);
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::Begin_ConvertMix(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(**((_QWORD **)this + 1) + 488))(*((_QWORD *)this + 1), a2, a3, a4, a5);
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::Do_ConvertMix(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const AudioServerPlugInIOCycleInfo *a6, void *a7, void *a8)
{
  _QWORD v9[2];
  int v10;
  _QWORD v11[2];
  int v12;

  v12 = 0;
  v10 = 0;
  v11[0] = a7;
  v11[1] = 0;
  v9[0] = a8;
  v9[1] = 0;
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *, _QWORD *, _QWORD *))(**((_QWORD **)this + 1) + 496))(*((_QWORD *)this + 1), a2, a3, a4, a5, a6, v11, v9);
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::End_ConvertMix(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(**((_QWORD **)this + 1) + 504))(*((_QWORD *)this + 1), a2, a3, a4, a5);
}

unint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::WillDo_WriteMix(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  unsigned __int8 v5;

  v5 = 0;
  v3 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, unsigned __int8 *))(**((_QWORD **)this + 1) + 512))(*((_QWORD *)this + 1), a2, a3, &v5);
  return v3 | ((unint64_t)v5 << 32);
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::Begin_WriteMix(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(**((_QWORD **)this + 1) + 520))(*((_QWORD *)this + 1), a2, a3, a4, a5);
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::Do_WriteMix(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t *v7;
  int v8;
  uint64_t v10;
  int v11;
  int32x2_t v12;

  if (*(_BYTE *)(a1 + 24))
    v7 = a7;
  else
    v7 = (uint64_t *)*a7;
  if (*(_BYTE *)(a1 + 24))
    v8 = *((_DWORD *)a7 + 4);
  else
    v8 = 0;
  v10 = v7[1];
  v11 = v8;
  v12 = vmovn_s64(*(int64x2_t *)(a7 + 3));
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(**(_QWORD **)(a1 + 8) + 528))(*(_QWORD *)(a1 + 8), a2, a3, a4, a5, a6, &v10);
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::End_WriteMix(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(**((_QWORD **)this + 1) + 536))(*((_QWORD *)this + 1), a2, a3, a4, a5);
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::ObjectHasProperty(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, const AudioObjectPropertyAddress *a4)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, const AudioObjectPropertyAddress *))(**((_QWORD **)this + 1)
                                                                                                 + 544))(*((_QWORD *)this + 1), a2, a3, a4);
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::ObjectIsPropertySettable(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, const AudioObjectPropertyAddress *a4)
{
  if ((*(unsigned int (**)(_QWORD, uint64_t, uint64_t, const AudioObjectPropertyAddress *))(**((_QWORD **)this + 1) + 552))(*((_QWORD *)this + 1), a2, a3, a4))
  {
    return 0x100000000;
  }
  else
  {
    return 0;
  }
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::ObjectGetPropertyDataSize(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, const AudioObjectPropertyAddress *a4, uint64_t a5, const void *a6)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(**((_QWORD **)this + 1) + 560))(*((_QWORD *)this + 1), a2, a3, a4, a5, a6) << 32;
}

unint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::ObjectGetPropertyData(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, const AudioObjectPropertyAddress *a4, uint64_t a5, const void *a6, uint64_t a7, void *a8)
{
  unsigned int v9;

  v9 = 0;
  (*(void (**)(_QWORD, uint64_t, uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *, uint64_t, unsigned int *, void *))(**((_QWORD **)this + 1) + 568))(*((_QWORD *)this + 1), a2, a3, a4, a5, a6, a7, &v9, a8);
  return (unint64_t)v9 << 32;
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::ObjectSetPropertyData(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, const AudioObjectPropertyAddress *a4, uint64_t a5, const void *a6, uint64_t a7, const void *a8)
{
  (*(void (**)(_QWORD, uint64_t, uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *, uint64_t, const void *))(**((_QWORD **)this + 1) + 576))(*((_QWORD *)this + 1), a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::RegisterIOBuffer(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void *))(**((_QWORD **)this + 1)
                                                                                                + 160))(*((_QWORD *)this + 1), a2, a3, a4, a5, a6, a7);
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::UnregisterIOBuffer(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void *))(**((_QWORD **)this + 1)
                                                                                                + 168))(*((_QWORD *)this + 1), a2, a3, a4, a5, a6, a7);
}

void std::__function::__func<AMCP::ASP::Engine::Engine(std::shared_ptr<AMCP::ASP::PlugIn>,BOOL,std::shared_ptr<HALS_UCPlugInBase>,unsigned int,applesauce::CF::StringRef,double,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,AMCP::Utility::Dispatch_Queue const&)::$_0,std::allocator<AMCP::ASP::Engine::Engine(std::shared_ptr<AMCP::ASP::PlugIn>,BOOL,std::shared_ptr<HALS_UCPlugInBase>,unsigned int,applesauce::CF::StringRef,double,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,AMCP::Utility::Dispatch_Queue const&)::$_0>,CA::TimeStamp ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::ASP::Engine::Engine(std::shared_ptr<AMCP::ASP::PlugIn>,BOOL,std::shared_ptr<HALS_UCPlugInBase>,unsigned int,applesauce::CF::StringRef,double,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,AMCP::Utility::Dispatch_Queue const&)::$_0,std::allocator<AMCP::ASP::Engine::Engine(std::shared_ptr<AMCP::ASP::PlugIn>,BOOL,std::shared_ptr<HALS_UCPlugInBase>,unsigned int,applesauce::CF::StringRef,double,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,AMCP::Utility::Dispatch_Queue const&)::$_0>,CA::TimeStamp ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E699F1D0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::ASP::Engine::Engine(std::shared_ptr<AMCP::ASP::PlugIn>,BOOL,std::shared_ptr<HALS_UCPlugInBase>,unsigned int,applesauce::CF::StringRef,double,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,AMCP::Utility::Dispatch_Queue const&)::$_0,std::allocator<AMCP::ASP::Engine::Engine(std::shared_ptr<AMCP::ASP::PlugIn>,BOOL,std::shared_ptr<HALS_UCPlugInBase>,unsigned int,applesauce::CF::StringRef,double,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,AMCP::Utility::Dispatch_Queue const&)::$_0>,CA::TimeStamp ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E699F1D0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<AMCP::ASP::Engine::Engine(std::shared_ptr<AMCP::ASP::PlugIn>,BOOL,std::shared_ptr<HALS_UCPlugInBase>,unsigned int,applesauce::CF::StringRef,double,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,AMCP::Utility::Dispatch_Queue const&)::$_0,std::allocator<AMCP::ASP::Engine::Engine(std::shared_ptr<AMCP::ASP::PlugIn>,BOOL,std::shared_ptr<HALS_UCPlugInBase>,unsigned int,applesauce::CF::StringRef,double,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,AMCP::Utility::Dispatch_Queue const&)::$_0>,CA::TimeStamp ()(void)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 304))(*(_QWORD *)(a1 + 8));
}

uint64_t std::__function::__func<AMCP::ASP::Engine::Engine(std::shared_ptr<AMCP::ASP::PlugIn>,BOOL,std::shared_ptr<HALS_UCPlugInBase>,unsigned int,applesauce::CF::StringRef,double,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,AMCP::Utility::Dispatch_Queue const&)::$_0,std::allocator<AMCP::ASP::Engine::Engine(std::shared_ptr<AMCP::ASP::PlugIn>,BOOL,std::shared_ptr<HALS_UCPlugInBase>,unsigned int,applesauce::CF::StringRef,double,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,AMCP::Utility::Dispatch_Queue const&)::$_0>,CA::TimeStamp ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP6EngineC1ENSt3__110shared_ptrINS0_6PlugInEEEbNS3_I17HALS_UCPlugInBaseEEjN10applesauce2CF9StringRefEdjjjjjjRKNS2_6vectorINS_4Core14Implementation18Simple_Engine_Data11Stream_InfoENS2_9allocatorISF_EEEESK_RKNS_7Utility14Dispatch_QueueEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::ASP::Engine::Engine(std::shared_ptr<AMCP::ASP::PlugIn>,BOOL,std::shared_ptr<HALS_UCPlugInBase>,unsigned int,applesauce::CF::StringRef,double,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,AMCP::Utility::Dispatch_Queue const&)::$_0,std::allocator<AMCP::ASP::Engine::Engine(std::shared_ptr<AMCP::ASP::PlugIn>,BOOL,std::shared_ptr<HALS_UCPlugInBase>,unsigned int,applesauce::CF::StringRef,double,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,AMCP::Utility::Dispatch_Queue const&)::$_0>,CA::TimeStamp ()(void)>::target_type()
{
}

uint64_t AMCP::ASP::Engine::Engine(uint64_t a1, uint64_t *a2, char a3, uint64_t *a4, int a5, CFTypeRef *a6, int a7, int a8, double a9, int a10, int a11, int a12, int a13, uint64_t a14, uint64_t a15, dispatch_queue_t *a16)
{
  CFTypeRef v23;
  unint64_t v24;
  uint64_t v25;
  const AMCP::Utility::Dispatch_Queue *v26;
  AMCP::Log::Scope_Registry *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  void (**v37)(AMCP::ASP::MCP_PlugIn_Wrapper *__hidden);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v50;
  NSObject *v51;
  unint64_t *v52;
  unint64_t v53;
  _opaque_pthread_t *v54;
  mach_port_t v55;
  std::__shared_weak_count *v56;
  NSObject *v57;
  unint64_t *v58;
  unint64_t v59;
  _opaque_pthread_t *v60;
  mach_port_t v61;
  uint64_t v64;
  int v65;
  __int128 v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  uint8_t buf[8];
  __int128 v71;
  __int16 v72;
  const char *v73;
  _QWORD v74[3];
  AMCP::Log::Scope_Registry *v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E699EBF0;
  v23 = *a6;
  if (*a6)
    CFRetain(*a6);
  v68 = 0uLL;
  v69 = 0;
  std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>::__init_with_size[abi:ne180100]<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info*,AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info*>(&v68, *(const void **)a14, *(_QWORD *)(a14 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a14 + 8) - *(_QWORD *)a14) >> 3));
  v66 = 0uLL;
  v67 = 0;
  std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>::__init_with_size[abi:ne180100]<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info*,AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info*>(&v66, *(const void **)a15, *(_QWORD *)(a15 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a15 + 8) - *(_QWORD *)a15) >> 3));
  *(_QWORD *)(a1 + 24) = v23;
  *(double *)(a1 + 32) = a9;
  *(_DWORD *)(a1 + 40) = a7;
  *(_DWORD *)(a1 + 44) = a8;
  *(_BYTE *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 52) = a10;
  *(_DWORD *)(a1 + 56) = a11;
  *(_DWORD *)(a1 + 60) = a12;
  *(_DWORD *)(a1 + 64) = a13;
  *(_OWORD *)(a1 + 72) = v68;
  *(_QWORD *)(a1 + 88) = v69;
  v68 = 0uLL;
  v69 = 0;
  *(_OWORD *)(a1 + 96) = v66;
  *(_QWORD *)(a1 + 112) = v67;
  v24 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a14 + 8) - *(_QWORD *)a14) >> 3);
  v25 = (uint64_t)(*(_QWORD *)(a15 + 8) - *(_QWORD *)a15) >> 3;
  v66 = 0uLL;
  v67 = 0;
  AMCP::Core::Implementation::Simple_Engine_IO_State::Simple_Engine_IO_State((AMCP::Core::Implementation::Simple_Engine_IO_State *)(a1 + 120), (const __CFString **)a6, v24, 0x6DB6DB6DB6DB6DB7 * v25, 0, a16, v26);
  v74[0] = &off_1E699F1D0;
  v74[1] = a1;
  v75 = (AMCP::Log::Scope_Registry *)v74;
  AMCP::IO_Clock::IO_Clock(a1 + 560, (uint64_t)v74, *(_DWORD *)(a1 + 40), a9);
  v27 = v75;
  if (v75 == (AMCP::Log::Scope_Registry *)v74)
  {
    v29 = 4;
    v27 = (AMCP::Log::Scope_Registry *)v74;
    v28 = a5;
  }
  else
  {
    v28 = a5;
    if (!v75)
      goto LABEL_8;
    v29 = 5;
  }
  v27 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(void))(*(_QWORD *)v27 + 8 * v29))();
LABEL_8:
  *(_DWORD *)(a1 + 720) = 0;
  *(_QWORD *)(a1 + 728) = 0;
  *(_DWORD *)(a1 + 736) = v28;
  *(_QWORD *)(a1 + 760) = 0;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 740) = 0u;
  v30 = *a4;
  if (*a2)
  {
    if (v30)
    {
      AMCP::Log::Scope_Registry::get(v27);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v50 = (std::__shared_weak_count *)v71;
      v51 = **(NSObject ***)buf;
      if ((_QWORD)v71)
      {
        v52 = (unint64_t *)(v71 + 8);
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
      if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
      {
        v54 = pthread_self();
        v55 = pthread_mach_thread_np(v54);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v55;
        LOWORD(v71) = 2080;
        *(_QWORD *)((char *)&v71 + 2) = "ASP_Engine.cpp";
        WORD5(v71) = 1024;
        HIDWORD(v71) = 253;
        v72 = 2080;
        v73 = "not (in_plugin && in_legacy_plugin)";
        _os_log_error_impl(&dword_1B57BA000, v51, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s An ASP engine cannot use both vintage HAL and MCP implementations of ASP plugins simultaneously.", buf, 0x22u);
      }
      abort();
    }
    v31 = operator new();
    v33 = *a2;
    v32 = a2[1];
    *(_QWORD *)v31 = &off_1E699ED90;
    *(_QWORD *)(v31 + 8) = v33;
    *(_QWORD *)(v31 + 16) = v32;
    if (v32)
    {
      v34 = (unint64_t *)(v32 + 8);
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
    *(_BYTE *)(v31 + 24) = a3;
    v36 = *(_QWORD *)(a1 + 728);
    *(_QWORD *)(a1 + 728) = v31;
    if (!v36)
    {
      v37 = &off_1E699ED90;
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if (!v30)
  {
    AMCP::Log::Scope_Registry::get(v27);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v56 = (std::__shared_weak_count *)v71;
    v57 = **(NSObject ***)buf;
    if ((_QWORD)v71)
    {
      v58 = (unint64_t *)(v71 + 8);
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
    if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
    {
      v60 = pthread_self();
      v61 = pthread_mach_thread_np(v60);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v61;
      LOWORD(v71) = 2080;
      *(_QWORD *)((char *)&v71 + 2) = "ASP_Engine.cpp";
      WORD5(v71) = 1024;
      HIDWORD(v71) = 254;
      v72 = 2080;
      v73 = "in_plugin or in_legacy_plugin";
      _os_log_error_impl(&dword_1B57BA000, v57, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s An ASP engine must use either the vintage HAL or MCP implementation of ASP plugins.", buf, 0x22u);
    }
    abort();
  }
  v38 = operator new();
  v40 = *a4;
  v39 = a4[1];
  *(_QWORD *)v38 = &off_1E699EF70;
  *(_QWORD *)(v38 + 8) = v40;
  *(_QWORD *)(v38 + 16) = v39;
  if (v39)
  {
    v41 = (unint64_t *)(v39 + 8);
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
  }
  *(_BYTE *)(v38 + 24) = a3;
  v36 = *(_QWORD *)(a1 + 728);
  *(_QWORD *)(a1 + 728) = v38;
  if (v36)
  {
LABEL_20:
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
    v37 = **(void (****)(AMCP::ASP::MCP_PlugIn_Wrapper *__hidden))(a1 + 728);
    goto LABEL_21;
  }
  v37 = &off_1E699EF70;
LABEL_21:
  v64 = 0x676C6F6264737064;
  v65 = 0;
  if (((unsigned int (*)(void))v37[51])())
  {
    v43 = *(_QWORD *)(a1 + 728);
    v44 = *(unsigned int *)(a1 + 736);
    *(_DWORD *)buf = 0;
    if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD, uint64_t *, _QWORD, _QWORD, uint64_t, uint8_t *))(*(_QWORD *)v43 + 432))(v43, v44, 0, &v64, 0, 0, 4, buf))
    {
      v45 = 1;
    }
    else
    {
      v45 = *(_DWORD *)buf == 0;
    }
    v46 = !v45;
    *(_BYTE *)(a1 + 740) = v46;
  }
  v47 = *(_QWORD *)(a1 + 728);
  v48 = *(unsigned int *)(a1 + 736);
  *(_QWORD *)buf = 0x100000001;
  LOBYTE(v71) = 1;
  *((_QWORD *)&v71 + 1) = 0;
  (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)v47 + 16))(v47, v48, buf);
  return a1;
}

void sub_1B5C910D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,_QWORD *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  _QWORD *v30;
  AMCP::IO_Clock *v31;
  uint64_t v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  const void *v38;
  std::__shared_weak_count *v39;

  a21 = v30 + 95;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  v33 = v30[91];
  v30[91] = 0;
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  AMCP::IO_Clock::~IO_Clock(v31);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)(v30 + 30));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(v30 + 28));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(v30 + 26));
  v34 = (void *)v30[22];
  if (v34)
    operator delete(v34);
  v35 = (void *)v30[18];
  if (v35)
    operator delete(v35);
  v36 = (void *)v30[12];
  if (v36)
  {
    v30[13] = v36;
    operator delete(v36);
  }
  v37 = (void *)v30[9];
  if (v37)
  {
    v30[10] = v37;
    operator delete(v37);
  }
  v38 = (const void *)v30[3];
  if (v38)
    CFRelease(v38);
  v39 = (std::__shared_weak_count *)v30[2];
  if (v39)
    std::__shared_weak_count::__release_weak(v39);
  _Unwind_Resume(a1);
}

void AMCP::Graph::Input_Path_Calculator::~Input_Path_Calculator(AMCP::Graph::Input_Path_Calculator *this)
{
  JUMPOUT(0x1B5E50688);
}

void AMCP::Graph::Input_Path_Calculator::process_all_pending_samples(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *nth_connection_list;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _opaque_pthread_t *v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double sample_time;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v39;
  std::string v40;
  void *__p;
  char v42;
  std::string v43;

  v6 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(v6 + 32) == *(_QWORD *)(v6 + 24))
  {
    AMCP::Graph::Manifest_Task::process_once(*(_QWORD *)(a1 + 8), a2, a3, a4, a5, a6);
  }
  else
  {
    while (2)
    {
      v7 = *(_QWORD *)(v6 + 32) - *(_QWORD *)(v6 + 24);
      if (v7)
      {
        v8 = 0;
        v9 = 0;
        v10 = (unsigned __int128)(v7 * (__int128)0x6666666666666667) >> 64;
        v11 = (v10 >> 4) + ((unint64_t)v10 >> 63);
        if (v11 <= 1)
          v12 = 1;
        else
          v12 = (v10 >> 4) + ((unint64_t)v10 >> 63);
        v39 = v12;
LABEL_7:
        nth_connection_list = (uint64_t *)AMCP::Graph::Manifest_Task::get_nth_connection_list((AMCP::Log::Scope_Registry *)v6, v9, 1u);
        v15 = *nth_connection_list;
        v14 = nth_connection_list[1];
        while (1)
        {
          if (v15 == v14)
          {
            v8 = ++v9 >= v11;
            if (v9 != v39)
              goto LABEL_7;
            return;
          }
          v16 = *(_QWORD **)v15;
          v17 = *(_QWORD *)(*(_QWORD *)v15 + 328);
          if (v17)
          {
            v18 = pthread_self();
            v19 = pthread_mach_thread_np(v18);
            AMCP::Graph::Manifest_Buffer::get_buffer_id(&v40, (uint64_t)v16);
            AMCP::Wire_Identifier_to_string(&v43, (const void **)&v40.__r_.__value_.__l.__data_);
            AMCP::Graph::Manifest_Log::add_message(v17, 4, "%u\tManifest_Buffer(%ld)::has_minimum_required_samples_after_time:  source: %s", v20, v21, v22, v23, v24, v19);
            if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v43.__r_.__value_.__l.__data_);
            if (v42 < 0)
              operator delete(__p);
            if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v40.__r_.__value_.__l.__data_);
          }
          if (!v16[38])
            break;
          v25 = v16[41];
          if (v25)
          {
            sample_time = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(v16 + 26));
            v27 = LOBYTE(sample_time);
            AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(v16 + 31));
            AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(v16 + 21));
            AMCP::Graph::Manifest_Log::add_message(v25, 4, "\t\tproducer write: %0.4f  producer target: %0.4f  consumer read: %0.4f", v28, v29, v30, v31, v32, v27);
          }
          if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)(v16 + 26), (AMCP::DAL::DAL_Time *)(v16 + 31)))
            break;
          v15 += 16;
        }
        if (!v8)
        {
          AMCP::Graph::Manifest_Task::process_once(*(_QWORD *)(a1 + 8), a2, a3, a4, a5, a6);
          v6 = *(_QWORD *)(a1 + 8);
          if (round(*(double *)(v6 + 96)) != 0.0)
            continue;
        }
      }
      break;
    }
  }
}

void sub_1B5C9144C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  if (*(char *)(v32 - 105) < 0)
    operator delete(*(void **)(v32 - 128));
  if (a32 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(exception_object);
}

void AMCP::Graph::Input_Path_Calculator::get_number_of_samples_to_read(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;

  if (*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32) == *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24))
  {
    v4 = *(_QWORD **)a3;
    v24 = *(_OWORD *)(*(_QWORD *)a3 + 208);
    v5 = v4[29];
    v25 = v4[28];
    v26 = v5;
    v6 = (std::__shared_weak_count *)v4[30];
    v27 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v24);
    v9 = *(_QWORD **)a3;
    v20 = *(_OWORD *)(*(_QWORD *)a3 + 168);
    v10 = v9[24];
    v21 = v9[23];
    v22 = v10;
    v11 = (std::__shared_weak_count *)v9[25];
    v23 = v11;
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v20);
    v14 = v23;
    if (v23)
    {
      v15 = (unint64_t *)&v23->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v17 = v27;
    if (v27)
    {
      v18 = (unint64_t *)&v27->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
}

void sub_1B5C915E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  va_list va;

  va_start(va, a10);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v10);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

double ***AMCP::Graph::Input_Path_Calculator::calculate_minimum_required_input_samples_for_output_samples(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  double v6;
  uint64_t *nth_connection_list;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  double v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  double sample_time;
  _QWORD *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  double v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  double ***result;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  double **v33;
  double **v34;
  double *v35;
  double v36;
  double v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(v2 + 32) - *(_QWORD *)(v2 + 24);
  if (v3)
  {
    v4 = 0;
    v5 = 0xCCCCCCCCCCCCCCCDLL * (v3 >> 3);
    v6 = 0.0;
    do
    {
      nth_connection_list = (uint64_t *)AMCP::Graph::Manifest_Task::get_nth_connection_list(*(AMCP::Log::Scope_Registry **)(a1 + 8), v4, 1u);
      v8 = *nth_connection_list;
      v9 = nth_connection_list[1];
      while (v8 != v9)
      {
        v10 = *(_QWORD **)v8;
        v11 = *(double *)(*(_QWORD *)v8 + 160);
        v43 = *(_OWORD *)(*(_QWORD *)v8 + 208);
        v12 = v10[29];
        v44 = v10[28];
        v45 = v12;
        v13 = (std::__shared_weak_count *)v10[30];
        v46 = v13;
        if (v13)
        {
          p_shared_owners = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldxr(p_shared_owners);
          while (__stxr(v15 + 1, p_shared_owners));
        }
        sample_time = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v43);
        v17 = *(_QWORD **)v8;
        v39 = *(_OWORD *)(*(_QWORD *)v8 + 168);
        v18 = v17[24];
        v40 = v17[23];
        v41 = v18;
        v19 = (std::__shared_weak_count *)v17[25];
        v42 = v19;
        if (v19)
        {
          v20 = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        v22 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v39);
        v23 = v42;
        if (v42)
        {
          v24 = (unint64_t *)&v42->__shared_owners_;
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 - 1, v24));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        v26 = v46;
        if (v46)
        {
          v27 = (unint64_t *)&v46->__shared_owners_;
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        if (round(v6) < round(v11 - (sample_time - v22)))
          v6 = v11 - (sample_time - v22);
        v8 += 16;
      }
      ++v4;
    }
    while (v4 != v5);
    v2 = *(_QWORD *)(a1 + 8);
  }
  else
  {
    v6 = 0.0;
  }
  result = *(double ****)(*(_QWORD *)(v2 + 48) + 472);
  if (result)
  {
    *(_QWORD *)&v43 = vcvtmd_s64_f64(v6);
    result = (double ***)((uint64_t (*)(double ***, __int128 *))(*result)[6])(result, &v43);
    v6 = (double)(unint64_t)result;
    v2 = *(_QWORD *)(a1 + 8);
  }
  else
  {
    v36 = *(double *)(v2 + 96);
    if (round(v36) != 0.0)
    {
      v37 = (double)(uint64_t)floor(v6) / v36;
      v38 = vcvtmd_s64_f64(v36);
      if (v37 == floor(v37))
        v6 = v37 * (double)v38;
      else
        v6 = (double)(v38 + v38 * ((uint64_t)vcvtmd_s64_f64(v6) / v38));
    }
  }
  v30 = *(_QWORD *)(v2 + 8) - *(_QWORD *)v2;
  if (v30)
  {
    v31 = 0;
    v32 = 0xCCCCCCCCCCCCCCCDLL * (v30 >> 3);
    do
    {
      result = (double ***)AMCP::Graph::Manifest_Task::get_nth_connection_list(*(AMCP::Log::Scope_Registry **)(a1 + 8), v31, 0);
      v33 = *result;
      v34 = result[1];
      while (v33 != v34)
      {
        v35 = *v33;
        v33 += 2;
        result = (double ***)AMCP::Graph::Manifest_Buffer::set_minimum_required_samples(v35, v6);
      }
      ++v31;
    }
    while (v31 != v32);
  }
  return result;
}

void sub_1B5C918B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void AMCP::Graph::Output_Path_Calculator::~Output_Path_Calculator(AMCP::Graph::Output_Path_Calculator *this)
{
  JUMPOUT(0x1B5E50688);
}

double AMCP::Graph::Output_Path_Calculator::process_all_pending_samples(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v12;
  double result;

  while (1)
  {
    v12 = *(_QWORD *)(a1 + 8);
    result = round(AMCP::Graph::Manifest_Task::calculate_samples_to_process_for_output(*(AMCP::Graph::Manifest_Task **)v12, *(AMCP::Graph::Manifest_Task **)(v12 + 8)));
    if (result <= 0.0 || result < round(*(double *)(v12 + 96)))
      break;
    AMCP::Graph::Manifest_Task::process_once(*(_QWORD *)(a1 + 8), a2, a3, a4, a5, a6);
  }
  return result;
}

double AMCP::Graph::Output_Path_Calculator::get_number_of_samples_to_read(uint64_t a1)
{
  uint64_t v1;
  double result;

  v1 = *(_QWORD *)(a1 + 8);
  result = *(double *)(v1 + 96);
  if (round(result) == 0.0)
    return AMCP::Graph::Manifest_Task::calculate_samples_to_process_for_output(*(AMCP::Graph::Manifest_Task **)v1, *(AMCP::Graph::Manifest_Task **)(v1 + 8));
  return result;
}

double AMCP::Graph::Output_Path_Calculator::get_number_of_samples_to_write(AMCP::Log::Scope_Registry *a1)
{
  uint64_t v2;
  double result;
  double v4;
  AMCP::Log::Scope_Registry *v5;
  NSObject *v6;
  _opaque_pthread_t *v7;
  mach_port_t v8;
  void *exception;
  NSObject *v10;
  _opaque_pthread_t *v11;
  mach_port_t v12;
  void *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t (**v16)();
  __int128 v17;
  uint64_t v18;
  std::string v19;
  std::logic_error v20;
  std::logic_error v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  uint8_t buf[8];
  __int16 v29;
  char *v30;
  __int16 v31;
  int v32;
  __int16 v33;
  _BYTE v34[14];
  const char *v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)a1 + 1);
  result = *(double *)(v2 + 96);
  v4 = round(result);
  if (v4 == 0.0)
  {
    result = AMCP::Graph::Manifest_Task::calculate_samples_to_process_for_output(*(AMCP::Graph::Manifest_Task **)v2, *(AMCP::Graph::Manifest_Task **)(v2 + 8));
    v4 = round(result);
  }
  if (v4 < 0.0)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v6 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v7 = pthread_self();
      v8 = pthread_mach_thread_np(v7);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v8;
      v29 = 2080;
      v30 = "Data_Flow_Calculator.cpp";
      v31 = 1024;
      v32 = 184;
      v33 = 2080;
      *(_QWORD *)v34 = "not (input_samples >= 0_S)";
      _os_log_error_impl(&dword_1B57BA000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v19);
    std::logic_error::logic_error(&v20, &v19);
    v20.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v21, &v20);
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = -1;
    v21.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v22 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v21);
    *(_QWORD *)&v34[6] = "virtual DAL::Sample_Time AMCP::Graph::Output_Path_Calculator::get_number_of_samples_to_write(co"
                         "nst Manifest_Execution_Context &, const Manifest_Task::Connection &)";
    v35 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Data_Flow_Calculator.cpp";
    v36 = 184;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v14);
    v17 = v14;
    v18 = v15;
    v14 = 0uLL;
    v15 = 0;
    v16 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v16);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v5 = *(AMCP::Log::Scope_Registry **)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 48) + 504);
  if (v5)
  {
    v21.__vftable = 0;
    *(_QWORD *)buf = vcvtmd_s64_f64(result);
    v5 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(AMCP::Log::Scope_Registry *, uint8_t *, std::logic_error *))(*(_QWORD *)v5 + 48))(v5, buf, &v21);
    result = (double)(unint64_t)v5;
  }
  if (round(result) < 0.0)
  {
    AMCP::Log::Scope_Registry::get(v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v10 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v11 = pthread_self();
      v12 = pthread_mach_thread_np(v11);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v12;
      v29 = 2080;
      v30 = "Data_Flow_Calculator.cpp";
      v31 = 1024;
      v32 = 187;
      v33 = 2080;
      *(_QWORD *)v34 = "not (result >= 0_S)";
      _os_log_error_impl(&dword_1B57BA000, v10, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
    v13 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v19);
    std::logic_error::logic_error(&v20, &v19);
    v20.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v21, &v20);
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = -1;
    v21.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v22 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v21);
    *(_QWORD *)&v34[6] = "virtual DAL::Sample_Time AMCP::Graph::Output_Path_Calculator::get_number_of_samples_to_write(co"
                         "nst Manifest_Execution_Context &, const Manifest_Task::Connection &)";
    v35 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Data_Flow_Calculator.cpp";
    v36 = 187;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v14);
    v17 = v14;
    v18 = v15;
    v14 = 0uLL;
    v15 = 0;
    v16 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v16);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v13, (uint64_t)buf);
  }
  return result;
}

void sub_1B5C91DBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,void *a26,uint64_t a27)
{
  void *v27;
  int v28;
  uint64_t v29;
  uint64_t v31;

  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  *(_QWORD *)(v29 - 96) = &unk_1E69A2000;
  v31 = *(_QWORD *)(v29 - 88);
  if (v31 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 32))(v31))
    *(_QWORD *)(v29 - 88) = 0;
  MEMORY[0x1B5E500E8](v29 - 112);
  a26 = &unk_1E69A2000;
  if (a27 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a27 + 32))(a27))
    a27 = 0;
  MEMORY[0x1B5E500E8](&a24);
  MEMORY[0x1B5E500DC](&a22);
  if (a21 < 0)
    operator delete(a16);
  if (v28)
    __cxa_free_exception(v27);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v29 - 113));
  _Unwind_Resume(a1);
}

uint64_t AMCP::Graph::Output_Path_Calculator::calculate_minimum_required_input_samples_for_output_samples(uint64_t result)
{
  uint64_t v1;
  AMCP::Log::Scope_Registry **v2;
  unint64_t v3;
  unint64_t v4;
  double **v5;
  double **v6;
  double *v7;
  double v8;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 8) + 8) - **(_QWORD **)(result + 8);
  if (v1)
  {
    v2 = (AMCP::Log::Scope_Registry **)result;
    v3 = 0;
    v4 = 0xCCCCCCCCCCCCCCCDLL * (v1 >> 3);
    do
    {
      result = AMCP::Graph::Manifest_Task::get_nth_connection_list(v2[1], v3, 0);
      v5 = *(double ***)result;
      v6 = *(double ***)(result + 8);
      while (v5 != v6)
      {
        v7 = *v5;
        v5 += 2;
        v8 = AMCP::Graph::Output_Path_Calculator::get_number_of_samples_to_write((AMCP::Log::Scope_Registry *)v2);
        result = (uint64_t)AMCP::Graph::Manifest_Buffer::set_minimum_required_samples(v7, v8);
      }
      ++v3;
    }
    while (v3 != v4);
  }
  return result;
}

void AMCP::Graph::IO_Proc_Calculator::~IO_Proc_Calculator(AMCP::Graph::IO_Proc_Calculator *this)
{
  JUMPOUT(0x1B5E50688);
}

caulk::rt_safe_memory_resource *AMCP::Graph::IO_Proc_Calculator::process_all_pending_samples(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return AMCP::Graph::Manifest_Task::process_once(*(_QWORD *)(a1 + 8), a2, a3, a4, a5, a6);
}

double AMCP::Graph::IO_Proc_Calculator::get_number_of_samples_to_read(int a1, AMCP::DAL::DAL_Time_Delta *this)
{
  if ((*(_BYTE *)this & 2) == 0)
    AMCP::DAL::DAL_Time_Delta::validate(this);
  return *((double *)this + 1);
}

double AMCP::Graph::IO_Proc_Calculator::get_number_of_samples_to_write(int a1, AMCP::DAL::DAL_Time_Delta *this)
{
  if ((*(_BYTE *)this & 2) == 0)
    AMCP::DAL::DAL_Time_Delta::validate(this);
  return *((double *)this + 1);
}

uint64_t AMCP::Graph::IO_Proc_Calculator::calculate_minimum_required_input_samples_for_output_samples(uint64_t result, double *a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  double **v7;
  double **v8;
  double *v9;

  v2 = *(_QWORD *)(*(_QWORD *)(result + 8) + 8) - **(_QWORD **)(result + 8);
  if (v2)
  {
    v4 = result;
    v5 = 0;
    v6 = 0xCCCCCCCCCCCCCCCDLL * (v2 >> 3);
    do
    {
      result = AMCP::Graph::Manifest_Task::get_nth_connection_list(*(AMCP::Log::Scope_Registry **)(v4 + 8), v5, 0);
      v7 = *(double ***)result;
      v8 = *(double ***)(result + 8);
      while (v7 != v8)
      {
        if ((*(_BYTE *)a2 & 2) == 0)
          AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)a2);
        v9 = *v7;
        v7 += 2;
        result = (uint64_t)AMCP::Graph::Manifest_Buffer::set_minimum_required_samples(v9, a2[1]);
      }
      ++v5;
    }
    while (v5 != v6);
  }
  return result;
}

_QWORD *std::shared_ptr<AMCP::DAL::DAL_Buffer>::operator=[abi:ne180100]<AMCP::DAL::Mixing_Ring_Buffer,std::default_delete<AMCP::DAL::Mixing_Ring_Buffer>,void>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  if (*a2)
  {
    v5 = (_QWORD *)operator new();
    v6 = *a2;
    *v5 = &off_1E699F4F8;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v6;
  }
  else
  {
    v5 = 0;
  }
  *a2 = 0;
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v5;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

void std::__shared_ptr_pointer<AMCP::DAL::Mixing_Ring_Buffer  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_pointer<AMCP::DAL::Mixing_Ring_Buffer  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<AMCP::DAL::Mixing_Ring_Buffer  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__114default_deleteIN4AMCP3DAL18Mixing_Ring_BufferEEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<AMCP::DAL::Ring_Buffer  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_pointer<AMCP::DAL::Ring_Buffer  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<AMCP::DAL::Ring_Buffer  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__114default_deleteIN4AMCP3DAL11Ring_BufferEEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void AMCP::Graph::Manifest_Buffer::anchor_time(uint64_t a1, AMCP::DAL::DAL_Time *a2, int a3, uint64_t a4, AMCP::DAL::DAL_Time_Delta *this)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  AMCP::Log::Scope_Registry *v13;
  __n128 v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t v19;
  double sample_time;
  uint64_t v21;
  AMCP::Log::Scope_Registry *v22;
  double v23;
  double v24;
  char v25;
  BOOL v26;
  double v27;
  __int128 v28;
  unint64_t *v29;
  unint64_t v30;
  _BOOL8 v31;
  std::__shared_weak_count *size;
  NSObject *v33;
  unint64_t *v34;
  unint64_t v35;
  double v36;
  const char *imp;
  double v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  std::string::size_type v47;
  double v48;
  unint64_t *v49;
  unint64_t v50;
  __int128 v51;
  double v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  _DWORD *v108;
  uint64_t v109;
  uint64_t v110;
  std::string::size_type v111;
  unint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  uint64_t v125;
  double v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  double v132;
  AMCP::Log::Scope_Registry *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  uint64_t v138;
  BOOL v139;
  unsigned __int8 *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  unsigned __int8 *v145;
  uint64_t v146;
  int v147;
  int v148;
  int v149;
  int v150;
  BOOL v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  _opaque_pthread_t *v173;
  mach_port_t v174;
  NSObject *v175;
  _opaque_pthread_t *v176;
  mach_port_t v177;
  void *exception;
  NSObject *v179;
  _opaque_pthread_t *v180;
  mach_port_t v181;
  void *v182;
  NSObject *v183;
  _opaque_pthread_t *v184;
  mach_port_t v185;
  void *v186;
  NSObject *v187;
  _opaque_pthread_t *v188;
  mach_port_t v189;
  void *v190;
  NSObject *v191;
  _opaque_pthread_t *v192;
  mach_port_t v193;
  void *v194;
  std::__shared_weak_count *v195;
  std::logic_error v196;
  void *v197;
  uint64_t v198;
  std::__shared_weak_count *v199;
  __int128 v200;
  uint64_t v201;
  uint64_t v202;
  std::__shared_weak_count *v203;
  std::string v204;
  __int128 v205;
  std::__shared_weak_count *v206;
  std::logic_error v207;
  void *v208;
  uint64_t v209;
  std::__shared_weak_count *v210;
  __int128 v211;
  uint64_t v212;
  uint64_t v213;
  std::__shared_weak_count *v214;
  __int128 v215;
  std::logic_error v216;
  uint64_t v217;
  __int128 v218;
  __int128 v219;
  uint64_t v220;
  std::string v221;
  uint64_t v222;
  int v223;
  std::string __p;
  std::string::size_type v225;
  uint64_t v226;
  int v227;
  __int128 v228;
  std::string v229;
  std::__shared_weak_count *v230;
  std::__shared_weak_count *v231;
  int v232;
  __int128 v233;
  __int128 v234;
  std::logic_error v235;
  uint64_t v236;
  __int128 v237;
  std::logic_error v238;
  std::__shared_weak_count *v239;
  __int128 v240;
  __int128 v241;
  std::string buf;
  __int128 v243;
  char *v244;
  int v245;
  char v246;
  std::__shared_weak_count *v247;
  uint64_t v248;
  std::__shared_weak_count *v249;
  uint64_t v250;

  v250 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 296))
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    v175 = *(NSObject **)buf.__r_.__value_.__l.__data_;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&buf);
    if (os_log_type_enabled(v175, OS_LOG_TYPE_ERROR))
    {
      v176 = pthread_self();
      v177 = pthread_mach_thread_np(v176);
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v177;
      LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Manifest_Buffer.cpp";
      WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(buf.__r_.__value_.__r.__words[2]) = 149;
      LOWORD(v243) = 2080;
      *(_QWORD *)((char *)&v243 + 2) = "not (not is_processing())";
      _os_log_error_impl(&dword_1B57BA000, v175, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Don't call anchor_to_timebase_anchor on buffers that are currently processing", (uint8_t *)&buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v235);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Don't call anchor_to_timebase_anchor on buffers that are currently processing", (uint64_t)&v229);
    std::logic_error::logic_error(&v238, &v229);
    v238.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v207, &v238);
    v209 = 0;
    v210 = 0;
    *(_QWORD *)&v211 = 0;
    DWORD2(v211) = -1;
    v207.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v208 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&buf, (uint64_t)&v207);
    *((_QWORD *)&v243 + 1) = "void AMCP::Graph::Manifest_Buffer::anchor_time(const DAL::DAL_Time &, AMCP::Object_ID, Mani"
                             "fest_Counter &, const Manifest_Execution_Context &)";
    v244 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Buffer.cpp";
    v245 = 149;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&__p.__r_.__value_.__l.__data_);
    v204.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A20A0;
    *(_OWORD *)&v204.__r_.__value_.__r.__words[1] = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)&v205 = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    memset(&__p, 0, sizeof(__p));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&buf, (uint64_t)&v204);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)&buf);
  }
  v10 = *(_QWORD *)(a1 + 128);
  v9 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)&v240 = v10;
  *((_QWORD *)&v240 + 1) = v9;
  if (v9)
  {
    v11 = (unint64_t *)(v9 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  AMCP::DAL::DAL_Time_Delta::translate_time_delta((uint64_t)&v238, this, (uint64_t *)&v240);
  if ((*(_DWORD *)a2 & 0xFFFFFFFE) == 2)
    v14.n128_f64[0] = AMCP::DAL::DAL_Time::get_sample_time(a2);
  v16 = *((_QWORD *)a2 + 3);
  v15 = (std::__shared_weak_count *)*((_QWORD *)a2 + 4);
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v15->__on_zero_shared)(v15, v14);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v16 != v10)
  {
    AMCP::Log::Scope_Registry::get(v13);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    v179 = *(NSObject **)buf.__r_.__value_.__l.__data_;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&buf);
    if (os_log_type_enabled(v179, OS_LOG_TYPE_ERROR))
    {
      v180 = pthread_self();
      v181 = pthread_mach_thread_np(v180);
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v181;
      LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Manifest_Buffer.cpp";
      WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(buf.__r_.__value_.__r.__words[2]) = 155;
      LOWORD(v243) = 2080;
      *(_QWORD *)((char *)&v243 + 2) = "not (exact_buffer_time.get_clock() == timebase)";
      _os_log_error_impl(&dword_1B57BA000, v179, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v232);
    v182 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v229);
    std::logic_error::logic_error(&v235, &v229);
    v235.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v207, &v235);
    v209 = 0;
    v210 = 0;
    *(_QWORD *)&v211 = 0;
    DWORD2(v211) = -1;
    v207.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v208 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&buf, (uint64_t)&v207);
    *((_QWORD *)&v243 + 1) = "void AMCP::Graph::Manifest_Buffer::anchor_time(const DAL::DAL_Time &, AMCP::Object_ID, Mani"
                             "fest_Counter &, const Manifest_Execution_Context &)";
    v244 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Buffer.cpp";
    v245 = 155;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&__p.__r_.__value_.__l.__data_);
    v204.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A20A0;
    *(_OWORD *)&v204.__r_.__value_.__r.__words[1] = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)&v205 = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    memset(&__p, 0, sizeof(__p));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&buf, (uint64_t)&v204);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v182, (uint64_t)&buf);
  }
  sample_time = AMCP::DAL::DAL_Time::get_sample_time(a2);
  v21 = v240;
  v22 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v240 + 136))(v240);
  v23 = round(sample_time);
  v24 = round(*(double *)&v22);
  if (v25)
    v26 = v23 < v24;
  else
    v26 = 0;
  if (v26)
  {
    AMCP::Log::Scope_Registry::get(v22);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    v183 = *(NSObject **)buf.__r_.__value_.__l.__data_;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&buf);
    if (os_log_type_enabled(v183, OS_LOG_TYPE_ERROR))
    {
      v184 = pthread_self();
      v185 = pthread_mach_thread_np(v184);
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v185;
      LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Manifest_Buffer.cpp";
      WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(buf.__r_.__value_.__r.__words[2]) = 156;
      LOWORD(v243) = 2080;
      *(_QWORD *)((char *)&v243 + 2) = "not (exact_buffer_time.get_sample_time() >= timebase->get_anchor_time())";
      _os_log_error_impl(&dword_1B57BA000, v183, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Attempt to anchor before the clock's anchor time", (uint8_t *)&buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v232);
    v186 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Attempt to anchor before the clock's anchor time", (uint64_t)&v229);
    std::logic_error::logic_error(&v235, &v229);
    v235.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v207, &v235);
    v209 = 0;
    v210 = 0;
    *(_QWORD *)&v211 = 0;
    DWORD2(v211) = -1;
    v207.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v208 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&buf, (uint64_t)&v207);
    *((_QWORD *)&v243 + 1) = "void AMCP::Graph::Manifest_Buffer::anchor_time(const DAL::DAL_Time &, AMCP::Object_ID, Mani"
                             "fest_Counter &, const Manifest_Execution_Context &)";
    v244 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Buffer.cpp";
    v245 = 156;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&__p.__r_.__value_.__l.__data_);
    v204.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A20A0;
    *(_OWORD *)&v204.__r_.__value_.__r.__words[1] = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)&v205 = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    memset(&__p, 0, sizeof(__p));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&buf, (uint64_t)&v204);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v186, (uint64_t)&buf);
  }
  v27 = (double)*(int *)(a1 + 320);
  *(_QWORD *)&v28 = v21;
  *((_QWORD *)&v28 + 1) = *((_QWORD *)&v240 + 1);
  if (*((_QWORD *)&v240 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v240 + 1) + 8);
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  LODWORD(v235.__vftable) = 2;
  *(double *)&v235.__imp_.__imp_ = v27;
  v236 = 0;
  v237 = v28;
  AMCP::DAL::DAL_Time::round((AMCP::DAL::DAL_Time *)&v232, (uint64_t)a2);
  v31 = AMCP::DAL::DAL_Time::operator==((AMCP::DAL::DAL_Time *)&v232, a2);
  if (!v31)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v31);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    size = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
    v33 = *(NSObject **)buf.__r_.__value_.__l.__data_;
    if (buf.__r_.__value_.__l.__size_)
    {
      v34 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
    {
      v173 = pthread_self();
      v174 = pthread_mach_thread_np(v173);
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109634;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v174;
      LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Manifest_Buffer.cpp";
      WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(buf.__r_.__value_.__r.__words[2]) = 163;
      _os_log_debug_impl(&dword_1B57BA000, v33, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Buffer Time was rounded during anchor_time!", (uint8_t *)&buf, 0x18u);
    }
  }
  v36 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v232);
  if (((uint64_t)v238.__vftable & 2) == 0)
    AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)&v238);
  imp = v238.__imp_.__imp_;
  if (((uint64_t)v235.__vftable & 2) == 0)
    AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)&v235);
  v38 = v36 + *(double *)&imp + *(double *)&v235.__imp_.__imp_;
  v228 = v240;
  if (*((_QWORD *)&v240 + 1))
  {
    v39 = (unint64_t *)(*((_QWORD *)&v240 + 1) + 8);
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
  }
  LODWORD(buf.__r_.__value_.__l.__data_) = 2;
  *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = *(unint64_t *)&v38;
  v195 = (std::__shared_weak_count *)*((_QWORD *)&v228 + 1);
  v243 = v228;
  v228 = 0uLL;
  AMCP::DAL::DAL_Time_Range::DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)&v229, (const AMCP::DAL::DAL_Time *)&v232, (const AMCP::DAL::DAL_Time *)&buf);
  if (v195)
  {
    v41 = (unint64_t *)&v195->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
      std::__shared_weak_count::__release_weak(v195);
    }
  }
  if (*((_QWORD *)&v228 + 1))
  {
    v43 = (unint64_t *)(*((_QWORD *)&v228 + 1) + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v228 + 1) + 16))(*((_QWORD *)&v228 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v228 + 1));
    }
  }
  v45 = *(_QWORD *)(a1 + 304);
  if (v45)
  {
    if (*(char *)(a1 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&v221, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
      v45 = *(_QWORD *)(a1 + 304);
    }
    else
    {
      v221 = *(std::string *)(a1 + 8);
    }
    v46 = *(_QWORD *)(a1 + 32);
    v223 = *(_DWORD *)(a1 + 40);
    LODWORD(__p.__r_.__value_.__l.__data_) = a3;
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = *(_OWORD *)&v221.__r_.__value_.__l.__data_;
    v47 = v221.__r_.__value_.__r.__words[2];
    memset(&v221, 0, sizeof(v221));
    v222 = v46;
    v227 = v223;
    v225 = v47;
    v226 = v46;
    (*(void (**)(uint64_t, std::string *, std::string *, _QWORD))(*(_QWORD *)v45 + 96))(v45, &__p, &v229, *(unsigned int *)(a1 + 156));
    if (((uint64_t)v235.__vftable & 2) == 0)
      AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)&v235);
    if ((uint64_t)vcvtmd_s64_f64(*(double *)&v235.__imp_.__imp_) >= 1)
    {
      (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)(a1 + 304) + 80))(&v219);
      v48 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v232);
      v215 = v240;
      if (*((_QWORD *)&v240 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v240 + 1) + 8);
        do
          v50 = __ldxr(v49);
        while (__stxr(v50 + 1, v49));
      }
      LODWORD(v216.__vftable) = 2;
      *(double *)&v216.__imp_.__imp_ = v48;
      v217 = 0;
      v51 = v215;
      v218 = v215;
      v215 = 0uLL;
      v52 = (double)*(int *)(a1 + 320);
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E699F3C8;
      v241 = v51;
      if (*((_QWORD *)&v51 + 1))
      {
        v53 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
        do
          v54 = __ldxr(v53);
        while (__stxr(v54 + 1, v53));
      }
      LODWORD(v204.__r_.__value_.__l.__data_) = 2;
      *(_OWORD *)&v204.__r_.__value_.__r.__words[1] = *(unint64_t *)&v52;
      v205 = v241;
      v241 = 0uLL;
      boost::operators_impl::operator+((AMCP::DAL::DAL_Time *)&v207, (uint64_t)&v216, (uint64_t)&v204);
      AMCP::DAL::DAL_Time_Range::DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)&buf.__r_.__value_.__r.__words[1], (const AMCP::DAL::DAL_Time *)&v216, (const AMCP::DAL::DAL_Time *)&v207);
      v55 = v210;
      if (v210)
      {
        v56 = (unint64_t *)&v210->__shared_owners_;
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v58 = (std::__shared_weak_count *)*((_QWORD *)&v205 + 1);
      if (*((_QWORD *)&v205 + 1))
      {
        v59 = (unint64_t *)(*((_QWORD *)&v205 + 1) + 8);
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 - 1, v59));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
        }
      }
      v61 = (std::__shared_weak_count *)*((_QWORD *)&v241 + 1);
      if (*((_QWORD *)&v241 + 1))
      {
        v62 = (unint64_t *)(*((_QWORD *)&v241 + 1) + 8);
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
      }
      AMCP::DAL::Container::Container(&v248, (uint64_t)&v219, v52);
      v64 = (std::__shared_weak_count *)*((_QWORD *)&v218 + 1);
      if (*((_QWORD *)&v218 + 1))
      {
        v65 = (unint64_t *)(*((_QWORD *)&v218 + 1) + 8);
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }
      v67 = (std::__shared_weak_count *)*((_QWORD *)&v215 + 1);
      if (*((_QWORD *)&v215 + 1))
      {
        v68 = (unint64_t *)(*((_QWORD *)&v215 + 1) + 8);
        do
          v69 = __ldaxr(v68);
        while (__stlxr(v69 - 1, v68));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
      AMCP::DAL::Fixed_Buffer::create_readable_range((AMCP::DAL::Fixed_Buffer *)&buf, (uint64_t)&v207);
      v70 = *(_QWORD *)(a1 + 304);
      v196 = v207;
      v197 = v208;
      v198 = v209;
      v199 = v210;
      if (v210)
      {
        v71 = (unint64_t *)&v210->__shared_owners_;
        do
          v72 = __ldxr(v71);
        while (__stxr(v72 + 1, v71));
      }
      v200 = v211;
      v201 = v212;
      v202 = v213;
      v203 = v214;
      if (v214)
      {
        v73 = (unint64_t *)&v214->__shared_owners_;
        do
          v74 = __ldxr(v73);
        while (__stxr(v74 + 1, v73));
      }
      (*(void (**)(std::string *__return_ptr, uint64_t, std::logic_error *))(*(_QWORD *)v70 + 160))(&v204, v70, &v196);
      v75 = v203;
      if (v203)
      {
        v76 = (unint64_t *)&v203->__shared_owners_;
        do
          v77 = __ldaxr(v76);
        while (__stlxr(v77 - 1, v76));
        if (!v77)
        {
          ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
          std::__shared_weak_count::__release_weak(v75);
        }
      }
      v78 = v199;
      if (v199)
      {
        v79 = (unint64_t *)&v199->__shared_owners_;
        do
          v80 = __ldaxr(v79);
        while (__stlxr(v80 - 1, v79));
        if (!v80)
        {
          ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
          std::__shared_weak_count::__release_weak(v78);
        }
      }
      AMCP::DAL::Writable_Range::receive_data((uint64_t)&v204, (uint64_t)&__p, (AMCP::DAL::DAL_Time *)&v207);
      v81 = v206;
      if (v206)
      {
        v82 = (unint64_t *)&v206->__shared_owners_;
        do
          v83 = __ldaxr(v82);
        while (__stlxr(v83 - 1, v82));
        if (!v83)
        {
          ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
          std::__shared_weak_count::__release_weak(v81);
        }
      }
      v84 = (std::__shared_weak_count *)*((_QWORD *)&v205 + 1);
      if (*((_QWORD *)&v205 + 1))
      {
        v85 = (unint64_t *)(*((_QWORD *)&v205 + 1) + 8);
        do
          v86 = __ldaxr(v85);
        while (__stlxr(v86 - 1, v85));
        if (!v86)
        {
          ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
          std::__shared_weak_count::__release_weak(v84);
        }
      }
      v87 = v214;
      if (v214)
      {
        v88 = (unint64_t *)&v214->__shared_owners_;
        do
          v89 = __ldaxr(v88);
        while (__stlxr(v89 - 1, v88));
        if (!v89)
        {
          ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
          std::__shared_weak_count::__release_weak(v87);
        }
      }
      v90 = v210;
      if (v210)
      {
        v91 = (unint64_t *)&v210->__shared_owners_;
        do
          v92 = __ldaxr(v91);
        while (__stlxr(v92 - 1, v91));
        if (!v92)
        {
          ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
          std::__shared_weak_count::__release_weak(v90);
        }
      }
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E699F3C8;
      v93 = v249;
      if (v249)
      {
        v94 = (unint64_t *)&v249->__shared_owners_;
        do
          v95 = __ldaxr(v94);
        while (__stlxr(v95 - 1, v94));
        if (!v95)
        {
          ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
          std::__shared_weak_count::__release_weak(v93);
        }
      }
      v96 = v247;
      if (v247)
      {
        v97 = (unint64_t *)&v247->__shared_owners_;
        do
          v98 = __ldaxr(v97);
        while (__stlxr(v98 - 1, v97));
        if (!v98)
        {
          ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
          std::__shared_weak_count::__release_weak(v96);
        }
      }
      v99 = (std::__shared_weak_count *)v244;
      if (v244)
      {
        v100 = (unint64_t *)(v244 + 8);
        do
          v101 = __ldaxr(v100);
        while (__stlxr(v101 - 1, v100));
        if (!v101)
        {
          ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
          std::__shared_weak_count::__release_weak(v99);
        }
      }
    }
    if (SHIBYTE(v225) < 0)
      operator delete((void *)__p.__r_.__value_.__l.__size_);
  }
  boost::operators_impl::operator+((AMCP::DAL::DAL_Time *)&v207, (uint64_t)a2, (uint64_t)&v235);
  AMCP::DAL::DAL_Time::round((AMCP::DAL::DAL_Time *)&buf, (uint64_t)&v207);
  *(std::string *)(a1 + 208) = buf;
  std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100](a1 + 232, &v243);
  v102 = (std::__shared_weak_count *)*((_QWORD *)&v243 + 1);
  if (*((_QWORD *)&v243 + 1))
  {
    v103 = (unint64_t *)(*((_QWORD *)&v243 + 1) + 8);
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  v105 = v210;
  if (v210)
  {
    v106 = (unint64_t *)&v210->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a1 + 208);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a1 + 216);
  std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100]((_QWORD *)(a1 + 272), *(_QWORD *)(a1 + 232), *(_QWORD *)(a1 + 240));
  *(_DWORD *)(a1 + 168) = v232;
  v108 = (_DWORD *)(a1 + 168);
  *(_OWORD *)(a1 + 176) = v233;
  std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100]((_QWORD *)(a1 + 192), v234, *((uint64_t *)&v234 + 1));
  v109 = *(_QWORD *)(a1 + 328);
  if (v109)
  {
    v110 = *(_QWORD *)a1;
    AMCP::Graph::Manifest_Buffer::get_buffer_id(&buf, a1);
    AMCP::Wire_Identifier_to_string(&v204, (const void **)&buf.__r_.__value_.__l.__data_);
    AMCP::DAL::DAL_Time::get_host_time((AMCP::DAL::DAL_Time *)&v232);
    v111 = *(_QWORD *)(a4 + 32);
    __p.__r_.__value_.__r.__words[0] = *(_QWORD *)(a4 + 24);
    __p.__r_.__value_.__l.__size_ = v111;
    if (v111)
    {
      v112 = (unint64_t *)(v111 + 8);
      do
        v113 = __ldxr(v112);
      while (__stxr(v113 + 1, v112));
    }
    AMCP::DAL::DAL_Time::translate_time((uint64_t)&v207, (AMCP::DAL::DAL_Time *)&v232, (uint64_t *)&__p);
    AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v207);
    AMCP::Graph::Manifest_Log::add_message(v109, 4, "Manifest_Buffer(%ld) %s  anchor_time - host time: %llu, sample time: %lf", v114, v115, v116, v117, v118, v110);
    v119 = v210;
    if (v210)
    {
      v120 = (unint64_t *)&v210->__shared_owners_;
      do
        v121 = __ldaxr(v120);
      while (__stlxr(v121 - 1, v120));
      if (!v121)
      {
        ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
        std::__shared_weak_count::__release_weak(v119);
      }
    }
    v122 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v123 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v124 = __ldaxr(v123);
      while (__stlxr(v124 - 1, v123));
      if (!v124)
      {
        ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
        std::__shared_weak_count::__release_weak(v122);
      }
    }
    if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v204.__r_.__value_.__l.__data_);
    if (v246 < 0)
      operator delete(v244);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    v125 = *(_QWORD *)(a1 + 328);
    if (v125)
    {
      v126 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(a1 + 208));
      vcvtmd_s64_f64(AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(a1 + 168)));
      AMCP::Graph::Manifest_Log::add_message(v125, 4, "\twrite position: %llu, read position: %lld", v127, v128, v129, v130, v131, vcvtmd_s64_f64(v126));
    }
  }
  if ((*v108 & 0xFFFFFFFE) == 2)
    AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(a1 + 168));
  if ((*(_DWORD *)(a1 + 248) & 0xFFFFFFFE) == 2)
    AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(a1 + 248));
  if ((*v108 & 0xFFFFFFFE) == 2)
    AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(a1 + 168));
  v132 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(a1 + 168));
  if (AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(a1 + 168)) != (double)(uint64_t)floor(v132))
  {
    AMCP::Log::Scope_Registry::get(v133);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    v187 = *(NSObject **)buf.__r_.__value_.__l.__data_;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&buf);
    if (os_log_type_enabled(v187, OS_LOG_TYPE_ERROR))
    {
      v188 = pthread_self();
      v189 = pthread_mach_thread_np(v188);
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v189;
      LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Manifest_Buffer.cpp";
      WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(buf.__r_.__value_.__r.__words[2]) = 198;
      LOWORD(v243) = 2080;
      *(_QWORD *)((char *)&v243 + 2) = "not (m_consumer_read_position.get_sample_time().floor().get() == m_consumer_read_"
                                       "position.get_sample_time().get_double())";
      _os_log_error_impl(&dword_1B57BA000, v187, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v241);
    v190 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&__p);
    std::logic_error::logic_error(&v216, &__p);
    v216.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v207, &v216);
    v209 = 0;
    v210 = 0;
    *(_QWORD *)&v211 = 0;
    DWORD2(v211) = -1;
    v207.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v208 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&buf, (uint64_t)&v207);
    *((_QWORD *)&v243 + 1) = "void AMCP::Graph::Manifest_Buffer::anchor_time(const DAL::DAL_Time &, AMCP::Object_ID, Mani"
                             "fest_Counter &, const Manifest_Execution_Context &)";
    v244 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Buffer.cpp";
    v245 = 198;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v219);
    v204.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A20A0;
    *(_OWORD *)&v204.__r_.__value_.__r.__words[1] = v219;
    *(_QWORD *)&v205 = v220;
    v219 = 0uLL;
    v220 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&buf, (uint64_t)&v204);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v190, (uint64_t)&buf);
  }
  v135 = (std::__shared_weak_count *)*((_QWORD *)&v234 + 1);
  v134 = v234;
  *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v234;
  if (*((_QWORD *)&v234 + 1))
  {
    v136 = (unint64_t *)(*((_QWORD *)&v234 + 1) + 8);
    do
      v137 = __ldxr(v136);
    while (__stxr(v137 + 1, v136));
  }
  v138 = v240;
  v139 = (v134 | (unint64_t)v240) == 0;
  if (v134 && (_QWORD)v240)
  {
    v140 = (unsigned __int8 *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v134 + 16))(v134);
    v134 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v138 + 16))(v138);
    v141 = v140[23];
    if ((v141 & 0x80u) == 0)
      v142 = v140[23];
    else
      v142 = *((_QWORD *)v140 + 1);
    v143 = *(unsigned __int8 *)(v134 + 23);
    v144 = (char)v143;
    if ((v143 & 0x80u) != 0)
      v143 = *(_QWORD *)(v134 + 8);
    if (v142 != v143)
    {
      v139 = 0;
      if (!v135)
        goto LABEL_207;
      goto LABEL_203;
    }
    if (v144 >= 0)
      v145 = (unsigned __int8 *)v134;
    else
      v145 = *(unsigned __int8 **)v134;
    if ((v141 & 0x80) != 0)
    {
      v134 = memcmp(*(const void **)v140, v145, *((_QWORD *)v140 + 1));
      v139 = (_DWORD)v134 == 0;
    }
    else
    {
      if (!v140[23])
      {
        v139 = 1;
        if (!v135)
          goto LABEL_207;
        goto LABEL_203;
      }
      v146 = v141 - 1;
      do
      {
        v148 = *v140++;
        v147 = v148;
        v150 = *v145++;
        v149 = v150;
        v152 = v146-- != 0;
        v139 = v147 == v149;
      }
      while (v147 == v149 && v152);
    }
  }
  if (!v135)
    goto LABEL_207;
LABEL_203:
  v153 = (unint64_t *)&v135->__shared_owners_;
  do
    v154 = __ldaxr(v153);
  while (__stlxr(v154 - 1, v153));
  if (!v154)
  {
    ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
    std::__shared_weak_count::__release_weak(v135);
  }
LABEL_207:
  if (!v139)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v134);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    v191 = *(NSObject **)buf.__r_.__value_.__l.__data_;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&buf);
    if (os_log_type_enabled(v191, OS_LOG_TYPE_ERROR))
    {
      v192 = pthread_self();
      v193 = pthread_mach_thread_np(v192);
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v193;
      LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Manifest_Buffer.cpp";
      WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(buf.__r_.__value_.__r.__words[2]) = 199;
      LOWORD(v243) = 2080;
      *(_QWORD *)((char *)&v243 + 2) = "not (is_same_timebase(buffer_time.get_clock(), timebase))";
      _os_log_error_impl(&dword_1B57BA000, v191, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v241);
    v194 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&__p);
    std::logic_error::logic_error(&v216, &__p);
    v216.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v207, &v216);
    v209 = 0;
    v210 = 0;
    *(_QWORD *)&v211 = 0;
    DWORD2(v211) = -1;
    v207.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v208 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&buf, (uint64_t)&v207);
    *((_QWORD *)&v243 + 1) = "void AMCP::Graph::Manifest_Buffer::anchor_time(const DAL::DAL_Time &, AMCP::Object_ID, Mani"
                             "fest_Counter &, const Manifest_Execution_Context &)";
    v244 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Buffer.cpp";
    v245 = 199;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v219);
    v204.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A20A0;
    *(_OWORD *)&v204.__r_.__value_.__r.__words[1] = v219;
    *(_QWORD *)&v205 = v220;
    v219 = 0uLL;
    v220 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&buf, (uint64_t)&v204);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v194, (uint64_t)&buf);
  }
  v155 = v231;
  if (v231)
  {
    v156 = (unint64_t *)&v231->__shared_owners_;
    do
      v157 = __ldaxr(v156);
    while (__stlxr(v157 - 1, v156));
    if (!v157)
    {
      ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
      std::__shared_weak_count::__release_weak(v155);
    }
  }
  v158 = v230;
  if (v230)
  {
    v159 = (unint64_t *)&v230->__shared_owners_;
    do
      v160 = __ldaxr(v159);
    while (__stlxr(v160 - 1, v159));
    if (!v160)
    {
      ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
      std::__shared_weak_count::__release_weak(v158);
    }
  }
  v161 = (std::__shared_weak_count *)*((_QWORD *)&v234 + 1);
  if (*((_QWORD *)&v234 + 1))
  {
    v162 = (unint64_t *)(*((_QWORD *)&v234 + 1) + 8);
    do
      v163 = __ldaxr(v162);
    while (__stlxr(v163 - 1, v162));
    if (!v163)
    {
      ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
      std::__shared_weak_count::__release_weak(v161);
    }
  }
  v164 = (std::__shared_weak_count *)*((_QWORD *)&v237 + 1);
  if (*((_QWORD *)&v237 + 1))
  {
    v165 = (unint64_t *)(*((_QWORD *)&v237 + 1) + 8);
    do
      v166 = __ldaxr(v165);
    while (__stlxr(v166 - 1, v165));
    if (!v166)
    {
      ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
      std::__shared_weak_count::__release_weak(v164);
    }
  }
  v167 = v239;
  if (v239)
  {
    v168 = (unint64_t *)&v239->__shared_owners_;
    do
      v169 = __ldaxr(v168);
    while (__stlxr(v169 - 1, v168));
    if (!v169)
    {
      ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
      std::__shared_weak_count::__release_weak(v167);
    }
  }
  v170 = (std::__shared_weak_count *)*((_QWORD *)&v240 + 1);
  if (*((_QWORD *)&v240 + 1))
  {
    v171 = (unint64_t *)(*((_QWORD *)&v240 + 1) + 8);
    do
      v172 = __ldaxr(v171);
    while (__stlxr(v172 - 1, v171));
    if (!v172)
    {
      ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
      std::__shared_weak_count::__release_weak(v170);
    }
  }
}

void sub_1B5C93FF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x258]);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x230]);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x280]);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2A8]);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2D0]);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v1 - 240);
  _Unwind_Resume(a1);
}

void sub_1B5C94810()
{
  JUMPOUT(0x1B5C94808);
}

double AMCP::DAL::DAL_Time::round(AMCP::DAL::DAL_Time *this, uint64_t a2)
{
  double sample_time;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  double result;

  sample_time = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)a2);
  v5 = *(_OWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *(_DWORD *)this = 2;
  result = round(sample_time);
  *((double *)this + 1) = result;
  *((_QWORD *)this + 2) = 0;
  *(_OWORD *)((char *)this + 24) = v5;
  return result;
}

void AMCP::Graph::Manifest_Buffer::advance(AMCP::Graph::Manifest_Buffer *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  _BOOL4 v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *size;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  NSObject *v31;
  _opaque_pthread_t *v32;
  mach_port_t v33;
  void *exception;
  __int128 v35;
  uint64_t (**v36)();
  __int128 v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  __int128 v40;
  uint64_t v41;
  std::string v42;
  std::logic_error v43;
  std::logic_error v44;
  void *v45;
  __int128 v46;
  uint64_t v47;
  int v48;
  char v49;
  uint8_t buf[8];
  __int128 v51;
  __int128 v52;
  const char *v53;
  int v54;
  std::__shared_weak_count *v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  if (!*((_QWORD *)this + 37))
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v31 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      v32 = pthread_self();
      v33 = pthread_mach_thread_np(v32);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v33;
      LOWORD(v51) = 2080;
      *(_QWORD *)((char *)&v51 + 2) = "Manifest_Buffer.cpp";
      WORD5(v51) = 1024;
      HIDWORD(v51) = 265;
      LOWORD(v52) = 2080;
      *(_QWORD *)((char *)&v52 + 2) = "not (is_processing())";
      _os_log_error_impl(&dword_1B57BA000, v31, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v49);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v42);
    std::logic_error::logic_error(&v43, &v42);
    v43.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v44, &v43);
    v46 = 0uLL;
    v47 = 0;
    v48 = -1;
    v44.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v45 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v44);
    *((_QWORD *)&v52 + 1) = "void AMCP::Graph::Manifest_Buffer::advance()";
    v53 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Buffer.cpp";
    v54 = 265;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v40);
    v36 = off_1E69A20A0;
    v37 = v40;
    v38 = v41;
    v40 = 0uLL;
    v41 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v36);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v2 = *((_QWORD *)this + 38);
  if (v2)
  {
    v44 = *(std::logic_error *)((char *)this + 168);
    v3 = *((_QWORD *)this + 24);
    v45 = (void *)*((_QWORD *)this + 23);
    *(_QWORD *)&v46 = v3;
    v4 = *((_QWORD *)this + 25);
    *((_QWORD *)&v46 + 1) = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
      v2 = *((_QWORD *)this + 38);
    }
    (*(void (**)(uint8_t *__return_ptr))(*(_QWORD *)v2 + 64))(buf);
    v7.n128_f64[0] = AMCP::DAL::DAL_Time::operator-((uint64_t)&v36, (AMCP::DAL::DAL_Time *)&v44, (AMCP::DAL::DAL_Time *)buf);
    v8 = v55;
    if (v55)
    {
      p_shared_owners = (unint64_t *)&v55->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v8->__on_zero_shared)(v8, v7);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v11 = (std::__shared_weak_count *)*((_QWORD *)&v52 + 1);
    if (*((_QWORD *)&v52 + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v52 + 1) + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v11->__on_zero_shared)(v11, v7);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v14 = v46;
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v46;
    if (*((_QWORD *)&v46 + 1))
    {
      v15 = (unint64_t *)(*((_QWORD *)&v46 + 1) + 8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
      *((_QWORD *)&v35 + 1) = *((_QWORD *)&v14 + 1);
      do
        v17 = __ldxr(v15);
      while (__stxr(v17 + 1, v15));
    }
    else
    {
      *((_QWORD *)&v35 + 1) = 0;
    }
    *(_QWORD *)&v35 = v14;
    *(_DWORD *)buf = 2;
    v51 = 0uLL;
    v52 = v35;
    v18 = AMCP::DAL::DAL_Time_Delta::operator<((AMCP::DAL::DAL_Time_Delta *)buf, (uint64_t)&v36);
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v52 + 1);
    if (*((_QWORD *)&v52 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v52 + 1) + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if (v18)
    {
      (*(void (**)(_QWORD, uint64_t (***)()))(**((_QWORD **)this + 38) + 120))(*((_QWORD *)this + 38), &v36);
      (*(void (**)(_QWORD))(**((_QWORD **)this + 38) + 88))(*((_QWORD *)this + 38));
    }
    size = (std::__shared_weak_count *)v42.__r_.__value_.__l.__size_;
    if (v42.__r_.__value_.__l.__size_)
    {
      v23 = (unint64_t *)(v42.__r_.__value_.__l.__size_ + 8);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v25 = v39;
    if (v39)
    {
      v26 = (unint64_t *)&v39->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v28 = (std::__shared_weak_count *)*((_QWORD *)&v46 + 1);
    if (*((_QWORD *)&v46 + 1))
    {
      v29 = (unint64_t *)(*((_QWORD *)&v46 + 1) + 8);
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
  }
}

void sub_1B5C94D18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void AMCP::Graph::Manifest_Buffer::copy_data_and_update_write_position(uint64_t a1, int a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t v7;
  _opaque_pthread_t *v8;
  char v9;
  double sample_time;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _BOOL8 v28;
  uint64_t v29;
  std::string::size_type v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  std::string::size_type v34;
  unint64_t *v35;
  unint64_t v36;
  BOOL v37;
  unsigned __int8 *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  unsigned __int8 *v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  BOOL v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *size;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  double v62;
  double v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  std::string::size_type v86;
  uint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  _BOOL4 v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  uint64_t v112;
  _opaque_pthread_t *v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  double v120;
  double v121;
  uint64_t v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  _BOOL8 v131;
  _BOOL4 v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  uint64_t v139;
  double v140;
  double v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  _BOOL8 v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  uint64_t v163;
  _opaque_pthread_t *v164;
  char v165;
  double v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  NSObject *v184;
  _opaque_pthread_t *v185;
  mach_port_t v186;
  void *exception;
  NSObject *v188;
  _opaque_pthread_t *v189;
  mach_port_t v190;
  void *v191;
  NSObject *v192;
  _opaque_pthread_t *v193;
  mach_port_t v194;
  void *v195;
  NSObject *v196;
  _opaque_pthread_t *v197;
  mach_port_t v198;
  void *v199;
  NSObject *v200;
  _opaque_pthread_t *v201;
  mach_port_t v202;
  void *v203;
  NSObject *v204;
  _opaque_pthread_t *v205;
  mach_port_t v206;
  void *v207;
  NSObject *v208;
  _opaque_pthread_t *v209;
  mach_port_t v210;
  void *v211;
  std::string v213;
  std::__shared_weak_count *v214;
  int v215;
  std::string v216;
  std::string::size_type v217;
  std::__shared_weak_count *v218;
  int v219;
  __int128 v220;
  std::string v221;
  __int128 v222;
  _BYTE v223[32];
  std::__shared_weak_count *v224;
  __int128 v225;
  uint64_t v226;
  uint64_t v227;
  std::__shared_weak_count *v228;
  std::string v229;
  uint64_t v230;
  uint64_t v231;
  __int128 v232;
  uint64_t v233;
  uint64_t v234;
  std::__shared_weak_count *v235;
  std::logic_error v236;
  std::string::size_type v237;
  std::logic_error v238;
  char v239;
  __int128 v240;
  std::string buf;
  __int128 v242;
  char *v243;
  int v244;
  char v245;
  std::__shared_weak_count *v246;
  uint64_t v247;

  v247 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a1 + 328);
  if (v7)
  {
    v8 = pthread_self();
    v9 = pthread_mach_thread_np(v8);
    AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)a4);
    AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(a4 + 5));
    AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)a4);
    AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(a4 + 5));
    AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(a1 + 208));
    AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(a1 + 168));
    (*(void (**)(std::string *__return_ptr))(**(_QWORD **)(a1 + 304) + 72))(&buf);
    AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&buf);
    sample_time = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v243);
    (*(void (**)(std::string *__return_ptr, double))(**(_QWORD **)(a1 + 304) + 72))(&v229, sample_time);
    AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v229);
    vcvtmd_s64_f64(AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v232));
    AMCP::Graph::Manifest_Log::add_message(v7, 4, "%u\tManifest_Buffer(%ld)::copy_data_and_update_write_position: new pos:[%lld,%lld], current write position %lld, current_read_position %lld, underlying buffer:[%lld, %lld]", v11, v12, v13, v14, v15, v9);
    v16 = v235;
    if (v235)
    {
      p_shared_owners = (unint64_t *)&v235->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = (std::__shared_weak_count *)v231;
    if (v231)
    {
      v20 = (unint64_t *)(v231 + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v22 = v246;
    if (v246)
    {
      v23 = (unint64_t *)&v246->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v25 = (std::__shared_weak_count *)*((_QWORD *)&v242 + 1);
    if (*((_QWORD *)&v242 + 1))
    {
      v26 = (unint64_t *)(*((_QWORD *)&v242 + 1) + 8);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
  }
  v28 = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)(a1 + 208), (AMCP::DAL::DAL_Time *)(a4 + 5));
  if (!v28)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v28);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    v184 = *(NSObject **)buf.__r_.__value_.__l.__data_;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&buf);
    if (os_log_type_enabled(v184, OS_LOG_TYPE_ERROR))
    {
      v185 = pthread_self();
      v186 = pthread_mach_thread_np(v185);
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v186;
      LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Manifest_Buffer.cpp";
      WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(buf.__r_.__value_.__r.__words[2]) = 374;
      LOWORD(v242) = 2080;
      *(_QWORD *)((char *)&v242 + 2) = "not (write_position.end() > m_producer_write_position)";
      _os_log_error_impl(&dword_1B57BA000, v184, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v240);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v216);
    std::logic_error::logic_error(&v236, &v216);
    v236.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error((std::logic_error *)&v229, &v236);
    v230 = 0;
    v231 = 0;
    *(_QWORD *)&v232 = 0;
    DWORD2(v232) = -1;
    v229.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A1208;
    v229.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&buf, (uint64_t)&v229);
    *((_QWORD *)&v242 + 1) = "void AMCP::Graph::Manifest_Buffer::copy_data_and_update_write_position(Object_ID, const std"
                             "::shared_ptr<DAL::DAL_Buffer> &, const AMCP::DAL::DAL_Time_Range &)";
    v243 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Buffer.cpp";
    v244 = 374;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v221.__r_.__value_.__l.__data_);
    *(std::string *)&v223[8] = v221;
    *(_QWORD *)v223 = off_1E69A20A0;
    memset(&v221, 0, sizeof(v221));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&buf, (uint64_t)v223);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)&buf);
  }
  v29 = a4[3];
  v30 = a4[4];
  buf.__r_.__value_.__r.__words[0] = v29;
  buf.__r_.__value_.__l.__size_ = v30;
  if (v30)
  {
    v31 = (unint64_t *)(v30 + 8);
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  v34 = *(_QWORD *)(a1 + 232);
  v33 = *(std::__shared_weak_count **)(a1 + 240);
  v229.__r_.__value_.__r.__words[0] = v34;
  v229.__r_.__value_.__l.__size_ = (std::string::size_type)v33;
  if (v33)
  {
    v35 = (unint64_t *)&v33->__shared_owners_;
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }
  v37 = (v29 | v34) == 0;
  if (v29 && v34)
  {
    v38 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 16))(v29);
    v29 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v34 + 16))(v34);
    v39 = v38[23];
    if ((v39 & 0x80u) == 0)
      v40 = v38[23];
    else
      v40 = *((_QWORD *)v38 + 1);
    v41 = *(unsigned __int8 *)(v29 + 23);
    v42 = (char)v41;
    if ((v41 & 0x80u) != 0)
      v41 = *(_QWORD *)(v29 + 8);
    if (v40 == v41)
    {
      if (v42 >= 0)
        v43 = (unsigned __int8 *)v29;
      else
        v43 = *(unsigned __int8 **)v29;
      if ((v39 & 0x80) != 0)
      {
        v29 = memcmp(*(const void **)v38, v43, *((_QWORD *)v38 + 1));
        v37 = (_DWORD)v29 == 0;
      }
      else if (v38[23])
      {
        v44 = v39 - 1;
        do
        {
          v46 = *v38++;
          v45 = v46;
          v48 = *v43++;
          v47 = v48;
          v50 = v44-- != 0;
          v37 = v45 == v47;
        }
        while (v45 == v47 && v50);
      }
      else
      {
        v37 = 1;
      }
    }
    else
    {
      v37 = 0;
    }
  }
  if (v33)
  {
    v51 = (unint64_t *)&v33->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  size = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
  if (buf.__r_.__value_.__l.__size_)
  {
    v54 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  if (!v37)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v29);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    v188 = *(NSObject **)buf.__r_.__value_.__l.__data_;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&buf);
    if (os_log_type_enabled(v188, OS_LOG_TYPE_ERROR))
    {
      v189 = pthread_self();
      v190 = pthread_mach_thread_np(v189);
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v190;
      LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Manifest_Buffer.cpp";
      WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(buf.__r_.__value_.__r.__words[2]) = 375;
      LOWORD(v242) = 2080;
      *(_QWORD *)((char *)&v242 + 2) = "not (is_same_timebase(write_position.get_clock(), m_producer_write_position.get_clock()))";
      _os_log_error_impl(&dword_1B57BA000, v188, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v240);
    v191 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v216);
    std::logic_error::logic_error(&v236, &v216);
    v236.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error((std::logic_error *)&v229, &v236);
    v230 = 0;
    v231 = 0;
    *(_QWORD *)&v232 = 0;
    DWORD2(v232) = -1;
    v229.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A1208;
    v229.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&buf, (uint64_t)&v229);
    *((_QWORD *)&v242 + 1) = "void AMCP::Graph::Manifest_Buffer::copy_data_and_update_write_position(Object_ID, const std"
                             "::shared_ptr<DAL::DAL_Buffer> &, const AMCP::DAL::DAL_Time_Range &)";
    v243 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Buffer.cpp";
    v244 = 375;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v221.__r_.__value_.__l.__data_);
    *(std::string *)&v223[8] = v221;
    *(_QWORD *)v223 = off_1E69A20A0;
    memset(&v221, 0, sizeof(v221));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&buf, (uint64_t)v223);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v191, (uint64_t)&buf);
  }
  v56 = *(_QWORD *)(a1 + 304);
  if (!v56)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v29);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    v192 = *(NSObject **)buf.__r_.__value_.__l.__data_;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&buf);
    if (os_log_type_enabled(v192, OS_LOG_TYPE_ERROR))
    {
      v193 = pthread_self();
      v194 = pthread_mach_thread_np(v193);
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v194;
      LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Manifest_Buffer.cpp";
      WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(buf.__r_.__value_.__r.__words[2]) = 376;
      LOWORD(v242) = 2080;
      *(_QWORD *)((char *)&v242 + 2) = "not (m_buffer)";
      _os_log_error_impl(&dword_1B57BA000, v192, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v240);
    v195 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v216);
    std::logic_error::logic_error(&v236, &v216);
    v236.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error((std::logic_error *)&v229, &v236);
    v230 = 0;
    v231 = 0;
    *(_QWORD *)&v232 = 0;
    DWORD2(v232) = -1;
    v229.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A1208;
    v229.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&buf, (uint64_t)&v229);
    *((_QWORD *)&v242 + 1) = "void AMCP::Graph::Manifest_Buffer::copy_data_and_update_write_position(Object_ID, const std"
                             "::shared_ptr<DAL::DAL_Buffer> &, const AMCP::DAL::DAL_Time_Range &)";
    v243 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Buffer.cpp";
    v244 = 376;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v221.__r_.__value_.__l.__data_);
    *(std::string *)&v223[8] = v221;
    *(_QWORD *)v223 = off_1E69A20A0;
    memset(&v221, 0, sizeof(v221));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&buf, (uint64_t)v223);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v195, (uint64_t)&buf);
  }
  if (!*(_QWORD *)(a1 + 296))
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v29);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    v196 = *(NSObject **)buf.__r_.__value_.__l.__data_;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&buf);
    if (os_log_type_enabled(v196, OS_LOG_TYPE_ERROR))
    {
      v197 = pthread_self();
      v198 = pthread_mach_thread_np(v197);
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v198;
      LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Manifest_Buffer.cpp";
      WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(buf.__r_.__value_.__r.__words[2]) = 377;
      LOWORD(v242) = 2080;
      *(_QWORD *)((char *)&v242 + 2) = "not (is_processing())";
      _os_log_error_impl(&dword_1B57BA000, v196, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v240);
    v199 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v216);
    std::logic_error::logic_error(&v236, &v216);
    v236.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error((std::logic_error *)&v229, &v236);
    v230 = 0;
    v231 = 0;
    *(_QWORD *)&v232 = 0;
    DWORD2(v232) = -1;
    v229.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A1208;
    v229.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&buf, (uint64_t)&v229);
    *((_QWORD *)&v242 + 1) = "void AMCP::Graph::Manifest_Buffer::copy_data_and_update_write_position(Object_ID, const std"
                             "::shared_ptr<DAL::DAL_Buffer> &, const AMCP::DAL::DAL_Time_Range &)";
    v243 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Buffer.cpp";
    v244 = 377;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v221.__r_.__value_.__l.__data_);
    *(std::string *)&v223[8] = v221;
    *(_QWORD *)v223 = off_1E69A20A0;
    memset(&v221, 0, sizeof(v221));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&buf, (uint64_t)v223);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v199, (uint64_t)&buf);
  }
  if (*a3)
  {
    v57 = *(std::__shared_weak_count **)(a1 + 312);
    if (v57)
    {
      v58 = (unint64_t *)&v57->__shared_owners_;
      do
        v59 = __ldxr(v58);
      while (__stxr(v59 + 1, v58));
      v60 = *a3;
      do
        v61 = __ldaxr(v58);
      while (__stlxr(v61 - 1, v58));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
      if (v60 == v56)
        goto LABEL_157;
    }
    else if (*a3 == v56)
    {
      goto LABEL_157;
    }
    (*(void (**)(std::string *__return_ptr))(*(_QWORD *)*a3 + 64))(&buf);
    (*(void (**)(std::string *__return_ptr))(*(_QWORD *)*a3 + 64))(&v229);
    v62 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)a4);
    v63 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(a4 + 5));
    AMCP::DAL::DAL_Buffer::get_timebase((AMCP::DAL::DAL_Buffer *)&v220, *a3);
    LODWORD(v221.__r_.__value_.__l.__data_) = 2;
    *(double *)&v221.__r_.__value_.__l.__size_ = v63 - v62;
    v221.__r_.__value_.__r.__words[2] = 0;
    v222 = v220;
    v220 = 0uLL;
    boost::operators_impl::operator+((AMCP::DAL::DAL_Time *)&v216, (uint64_t)&v229, (uint64_t)&v221);
    AMCP::DAL::DAL_Time_Range::DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)v223, (const AMCP::DAL::DAL_Time *)&buf, (const AMCP::DAL::DAL_Time *)&v216);
    v64 = v218;
    if (v218)
    {
      v65 = (unint64_t *)&v218->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
    v67 = (std::__shared_weak_count *)*((_QWORD *)&v222 + 1);
    if (*((_QWORD *)&v222 + 1))
    {
      v68 = (unint64_t *)(*((_QWORD *)&v222 + 1) + 8);
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
    }
    v70 = (std::__shared_weak_count *)*((_QWORD *)&v220 + 1);
    if (*((_QWORD *)&v220 + 1))
    {
      v71 = (unint64_t *)(*((_QWORD *)&v220 + 1) + 8);
      do
        v72 = __ldaxr(v71);
      while (__stlxr(v72 - 1, v71));
      if (!v72)
      {
        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
        std::__shared_weak_count::__release_weak(v70);
      }
    }
    v73 = v235;
    if (v235)
    {
      v74 = (unint64_t *)&v235->__shared_owners_;
      do
        v75 = __ldaxr(v74);
      while (__stlxr(v75 - 1, v74));
      if (!v75)
      {
        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
        std::__shared_weak_count::__release_weak(v73);
      }
    }
    v76 = (std::__shared_weak_count *)v231;
    if (v231)
    {
      v77 = (unint64_t *)(v231 + 8);
      do
        v78 = __ldaxr(v77);
      while (__stlxr(v78 - 1, v77));
      if (!v78)
      {
        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
        std::__shared_weak_count::__release_weak(v76);
      }
    }
    v79 = v246;
    if (v246)
    {
      v80 = (unint64_t *)&v246->__shared_owners_;
      do
        v81 = __ldaxr(v80);
      while (__stlxr(v81 - 1, v80));
      if (!v81)
      {
        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
        std::__shared_weak_count::__release_weak(v79);
      }
    }
    v82 = (std::__shared_weak_count *)*((_QWORD *)&v242 + 1);
    if (*((_QWORD *)&v242 + 1))
    {
      v83 = (unint64_t *)(*((_QWORD *)&v242 + 1) + 8);
      do
        v84 = __ldaxr(v83);
      while (__stlxr(v84 - 1, v83));
      if (!v84)
      {
        ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
        std::__shared_weak_count::__release_weak(v82);
      }
    }
    if (*(char *)(a1 + 31) < 0)
      std::string::__init_copy_ctor_external(&v213, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
    else
      v213 = *(std::string *)(a1 + 8);
    v85 = *(std::__shared_weak_count **)(a1 + 32);
    v215 = *(_DWORD *)(a1 + 40);
    LODWORD(v216.__r_.__value_.__l.__data_) = a2;
    *(_OWORD *)&v216.__r_.__value_.__r.__words[1] = *(_OWORD *)&v213.__r_.__value_.__l.__data_;
    v86 = v213.__r_.__value_.__r.__words[2];
    memset(&v213, 0, sizeof(v213));
    v214 = v85;
    v219 = v215;
    v217 = v86;
    v218 = v85;
    v87 = *a3;
    v229 = *(std::string *)v223;
    v230 = *(_QWORD *)&v223[24];
    v231 = (uint64_t)v224;
    if (v224)
    {
      v88 = (unint64_t *)&v224->__shared_owners_;
      do
        v89 = __ldxr(v88);
      while (__stxr(v89 + 1, v88));
    }
    v232 = v225;
    v233 = v226;
    v234 = v227;
    v235 = v228;
    if (v228)
    {
      v90 = (unint64_t *)&v228->__shared_owners_;
      do
        v91 = __ldxr(v90);
      while (__stxr(v91 + 1, v90));
    }
    (*(void (**)(std::string *__return_ptr, uint64_t, std::string *))(*(_QWORD *)v87 + 144))(&buf, v87, &v229);
    v92 = v235;
    if (v235)
    {
      v93 = (unint64_t *)&v235->__shared_owners_;
      do
        v94 = __ldaxr(v93);
      while (__stlxr(v94 - 1, v93));
      if (!v94)
      {
        ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
        std::__shared_weak_count::__release_weak(v92);
      }
    }
    v95 = (std::__shared_weak_count *)v231;
    if (v231)
    {
      v96 = (unint64_t *)(v231 + 8);
      do
        v97 = __ldaxr(v96);
      while (__stlxr(v97 - 1, v96));
      if (!v97)
      {
        ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
        std::__shared_weak_count::__release_weak(v95);
      }
    }
    v98 = caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::operator==((uint64_t)v223, (uint64_t)a4);
    v99 = **(_QWORD **)(a1 + 304);
    if (v98)
      (*(void (**)(void))(v99 + 24))();
    else
      (*(void (**)(void))(v99 + 32))();
    v100 = v246;
    if (v246)
    {
      v101 = (unint64_t *)&v246->__shared_owners_;
      do
        v102 = __ldaxr(v101);
      while (__stlxr(v102 - 1, v101));
      if (!v102)
      {
        ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
        std::__shared_weak_count::__release_weak(v100);
      }
    }
    v103 = (std::__shared_weak_count *)*((_QWORD *)&v242 + 1);
    if (*((_QWORD *)&v242 + 1))
    {
      v104 = (unint64_t *)(*((_QWORD *)&v242 + 1) + 8);
      do
        v105 = __ldaxr(v104);
      while (__stlxr(v105 - 1, v104));
      if (!v105)
      {
        ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
        std::__shared_weak_count::__release_weak(v103);
      }
    }
    if (SHIBYTE(v217) < 0)
      operator delete((void *)v216.__r_.__value_.__l.__size_);
    if (SHIBYTE(v213.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v213.__r_.__value_.__l.__data_);
    v106 = v228;
    if (v228)
    {
      v107 = (unint64_t *)&v228->__shared_owners_;
      do
        v108 = __ldaxr(v107);
      while (__stlxr(v108 - 1, v107));
      if (!v108)
      {
        ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
        std::__shared_weak_count::__release_weak(v106);
      }
    }
    v109 = v224;
    if (v224)
    {
      v110 = (unint64_t *)&v224->__shared_owners_;
      do
        v111 = __ldaxr(v110);
      while (__stlxr(v111 - 1, v110));
      if (!v111)
      {
        ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
        std::__shared_weak_count::__release_weak(v109);
      }
    }
  }
LABEL_157:
  v112 = *(_QWORD *)(a1 + 328);
  if (v112)
  {
    v113 = pthread_self();
    v114 = pthread_mach_thread_np(v113);
    AMCP::Graph::Manifest_Buffer::get_buffer_id(&buf, a1);
    AMCP::Wire_Identifier_to_string(&v229, (const void **)&buf.__r_.__value_.__l.__data_);
    AMCP::Graph::Manifest_Log::add_message(v112, 4, "%u\tManifest_Buffer(%ld)::update_write_position:  source: %s", v115, v116, v117, v118, v119, v114);
    if (SHIBYTE(v229.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v229.__r_.__value_.__l.__data_);
    if (v245 < 0)
      operator delete(v243);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
  }
  v120 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(a4 + 5));
  v121 = v120 - AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)a4);
  v122 = *(_QWORD *)(a1 + 240);
  *(_QWORD *)&v240 = *(_QWORD *)(a1 + 232);
  *((_QWORD *)&v240 + 1) = v122;
  if (v122)
  {
    v123 = (unint64_t *)(v122 + 8);
    do
      v124 = __ldxr(v123);
    while (__stxr(v124 + 1, v123));
  }
  LODWORD(buf.__r_.__value_.__l.__data_) = 2;
  *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = *(unint64_t *)&v121;
  v242 = v240;
  v240 = 0uLL;
  boost::operators_impl::operator+((AMCP::DAL::DAL_Time *)v223, a1 + 208, (uint64_t)&buf);
  v125 = (std::__shared_weak_count *)*((_QWORD *)&v242 + 1);
  if (*((_QWORD *)&v242 + 1))
  {
    v126 = (unint64_t *)(*((_QWORD *)&v242 + 1) + 8);
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
    }
  }
  v128 = (std::__shared_weak_count *)*((_QWORD *)&v240 + 1);
  if (*((_QWORD *)&v240 + 1))
  {
    v129 = (unint64_t *)(*((_QWORD *)&v240 + 1) + 8);
    do
      v130 = __ldaxr(v129);
    while (__stlxr(v130 - 1, v129));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
  (*(void (**)(std::string *__return_ptr))(**(_QWORD **)(a1 + 304) + 72))(&buf);
  v131 = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)&v243, (AMCP::DAL::DAL_Time *)(a1 + 208));
  v132 = v131;
  v133 = v246;
  if (v246)
  {
    v134 = (unint64_t *)&v246->__shared_owners_;
    do
      v135 = __ldaxr(v134);
    while (__stlxr(v135 - 1, v134));
    if (!v135)
    {
      ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
      std::__shared_weak_count::__release_weak(v133);
    }
  }
  v136 = (std::__shared_weak_count *)*((_QWORD *)&v242 + 1);
  if (*((_QWORD *)&v242 + 1))
  {
    v137 = (unint64_t *)(*((_QWORD *)&v242 + 1) + 8);
    do
      v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
      std::__shared_weak_count::__release_weak(v136);
    }
  }
  if (v132)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v131);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    v200 = *(NSObject **)buf.__r_.__value_.__l.__data_;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&buf);
    if (os_log_type_enabled(v200, OS_LOG_TYPE_ERROR))
    {
      v201 = pthread_self();
      v202 = pthread_mach_thread_np(v201);
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v202;
      LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Manifest_Buffer.cpp";
      WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(buf.__r_.__value_.__r.__words[2]) = 413;
      LOWORD(v242) = 2080;
      *(_QWORD *)((char *)&v242 + 2) = "not (m_producer_write_position <= m_buffer->get_allowed_read_range().end())";
      _os_log_error_impl(&dword_1B57BA000, v200, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v239);
    v203 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v221);
    std::logic_error::logic_error(&v238, &v221);
    v238.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error((std::logic_error *)&v229, &v238);
    v230 = 0;
    v231 = 0;
    *(_QWORD *)&v232 = 0;
    DWORD2(v232) = -1;
    v229.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A1208;
    v229.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&buf, (uint64_t)&v229);
    *((_QWORD *)&v242 + 1) = "void AMCP::Graph::Manifest_Buffer::update_write_position(const AMCP::DAL::DAL_Time_Range &)";
    v243 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Buffer.cpp";
    v244 = 413;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v236);
    v216.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A20A0;
    *(std::logic_error *)&v216.__r_.__value_.__r.__words[1] = v236;
    v217 = v237;
    v236.__vftable = 0;
    v236.__imp_.__imp_ = 0;
    v237 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&buf, (uint64_t)&v216);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v203, (uint64_t)&buf);
  }
  if (!*(_QWORD *)(a1 + 296))
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v131);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    v204 = *(NSObject **)buf.__r_.__value_.__l.__data_;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&buf);
    if (os_log_type_enabled(v204, OS_LOG_TYPE_ERROR))
    {
      v205 = pthread_self();
      v206 = pthread_mach_thread_np(v205);
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v206;
      LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Manifest_Buffer.cpp";
      WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(buf.__r_.__value_.__r.__words[2]) = 414;
      LOWORD(v242) = 2080;
      *(_QWORD *)((char *)&v242 + 2) = "not (is_processing())";
      _os_log_error_impl(&dword_1B57BA000, v204, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v239);
    v207 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v221);
    std::logic_error::logic_error(&v238, &v221);
    v238.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error((std::logic_error *)&v229, &v238);
    v230 = 0;
    v231 = 0;
    *(_QWORD *)&v232 = 0;
    DWORD2(v232) = -1;
    v229.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A1208;
    v229.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&buf, (uint64_t)&v229);
    *((_QWORD *)&v242 + 1) = "void AMCP::Graph::Manifest_Buffer::update_write_position(const AMCP::DAL::DAL_Time_Range &)";
    v243 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Buffer.cpp";
    v244 = 414;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v236);
    v216.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A20A0;
    *(std::logic_error *)&v216.__r_.__value_.__r.__words[1] = v236;
    v217 = v237;
    v236.__vftable = 0;
    v236.__imp_.__imp_ = 0;
    v237 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&buf, (uint64_t)&v216);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v207, (uint64_t)&buf);
  }
  v139 = *(_QWORD *)(a1 + 328);
  if (v139)
  {
    v140 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(a1 + 208));
    AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)v223);
    AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(a1 + 248));
    AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(a1 + 168));
    (*(void (**)(std::string *__return_ptr))(**(_QWORD **)(a1 + 304) + 72))(&buf);
    AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&buf);
    v141 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v243);
    (*(void (**)(std::string *__return_ptr, double))(**(_QWORD **)(a1 + 304) + 72))(&v229, v141);
    AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v229);
    vcvtmd_s64_f64(AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v232));
    AMCP::Graph::Manifest_Log::add_message(v139, 4, "\t\tprevious write pos: %lld, new write pos: %lld, target: %lld, consumer: %lld, underlying buffer:[%lld, %lld]", v142, v143, v144, v145, v146, vcvtmd_s64_f64(v140));
    v147 = v235;
    if (v235)
    {
      v148 = (unint64_t *)&v235->__shared_owners_;
      do
        v149 = __ldaxr(v148);
      while (__stlxr(v149 - 1, v148));
      if (!v149)
      {
        ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
        std::__shared_weak_count::__release_weak(v147);
      }
    }
    v150 = (std::__shared_weak_count *)v231;
    if (v231)
    {
      v151 = (unint64_t *)(v231 + 8);
      do
        v152 = __ldaxr(v151);
      while (__stlxr(v152 - 1, v151));
      if (!v152)
      {
        ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
        std::__shared_weak_count::__release_weak(v150);
      }
    }
    v153 = v246;
    if (v246)
    {
      v154 = (unint64_t *)&v246->__shared_owners_;
      do
        v155 = __ldaxr(v154);
      while (__stlxr(v155 - 1, v154));
      if (!v155)
      {
        ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
        std::__shared_weak_count::__release_weak(v153);
      }
    }
    v156 = (std::__shared_weak_count *)*((_QWORD *)&v242 + 1);
    if (*((_QWORD *)&v242 + 1))
    {
      v157 = (unint64_t *)(*((_QWORD *)&v242 + 1) + 8);
      do
        v158 = __ldaxr(v157);
      while (__stlxr(v158 - 1, v157));
      if (!v158)
      {
        ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
        std::__shared_weak_count::__release_weak(v156);
      }
    }
  }
  v159 = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)v223, (AMCP::DAL::DAL_Time *)(a1 + 168));
  if (v159)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v159);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    v208 = *(NSObject **)buf.__r_.__value_.__l.__data_;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&buf);
    if (os_log_type_enabled(v208, OS_LOG_TYPE_ERROR))
    {
      v209 = pthread_self();
      v210 = pthread_mach_thread_np(v209);
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v210;
      LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Manifest_Buffer.cpp";
      WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(buf.__r_.__value_.__r.__words[2]) = 421;
      LOWORD(v242) = 2080;
      *(_QWORD *)((char *)&v242 + 2) = "not (new_write_position >= m_consumer_read_position)";
      _os_log_error_impl(&dword_1B57BA000, v208, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v239);
    v211 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v221);
    std::logic_error::logic_error(&v238, &v221);
    v238.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error((std::logic_error *)&v229, &v238);
    v230 = 0;
    v231 = 0;
    *(_QWORD *)&v232 = 0;
    DWORD2(v232) = -1;
    v229.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A1208;
    v229.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&buf, (uint64_t)&v229);
    *((_QWORD *)&v242 + 1) = "void AMCP::Graph::Manifest_Buffer::update_write_position(const AMCP::DAL::DAL_Time_Range &)";
    v243 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Buffer.cpp";
    v244 = 421;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v236);
    v216.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A20A0;
    *(std::logic_error *)&v216.__r_.__value_.__r.__words[1] = v236;
    v217 = v237;
    v236.__vftable = 0;
    v236.__imp_.__imp_ = 0;
    v237 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&buf, (uint64_t)&v216);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v211, (uint64_t)&buf);
  }
  *(_DWORD *)(a1 + 208) = *(_DWORD *)v223;
  *(_OWORD *)(a1 + 216) = *(_OWORD *)&v223[8];
  std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100]((_QWORD *)(a1 + 232), *(uint64_t *)&v223[24], (uint64_t)v224);
  v160 = v224;
  if (v224)
  {
    v161 = (unint64_t *)&v224->__shared_owners_;
    do
      v162 = __ldaxr(v161);
    while (__stlxr(v162 - 1, v161));
    if (!v162)
    {
      ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
      std::__shared_weak_count::__release_weak(v160);
    }
  }
  v163 = *(_QWORD *)(a1 + 328);
  if (v163)
  {
    v164 = pthread_self();
    v165 = pthread_mach_thread_np(v164);
    AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(a1 + 208));
    AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(a1 + 168));
    (*(void (**)(std::string *__return_ptr))(**(_QWORD **)(a1 + 304) + 72))(&buf);
    AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&buf);
    v166 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v243);
    (*(void (**)(std::string *__return_ptr, double))(**(_QWORD **)(a1 + 304) + 72))(&v229, v166);
    AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v229);
    vcvtmd_s64_f64(AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v232));
    AMCP::Graph::Manifest_Log::add_message(v163, 4, "%u\tManifest_Buffer(%ld)::copy_data_and_update_write_position: current write position %lld, current_read_position %lld, underlying buffer:[%lld, %lld]", v167, v168, v169, v170, v171, v165);
    v172 = v235;
    if (v235)
    {
      v173 = (unint64_t *)&v235->__shared_owners_;
      do
        v174 = __ldaxr(v173);
      while (__stlxr(v174 - 1, v173));
      if (!v174)
      {
        ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
        std::__shared_weak_count::__release_weak(v172);
      }
    }
    v175 = (std::__shared_weak_count *)v231;
    if (v231)
    {
      v176 = (unint64_t *)(v231 + 8);
      do
        v177 = __ldaxr(v176);
      while (__stlxr(v177 - 1, v176));
      if (!v177)
      {
        ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
        std::__shared_weak_count::__release_weak(v175);
      }
    }
    v178 = v246;
    if (v246)
    {
      v179 = (unint64_t *)&v246->__shared_owners_;
      do
        v180 = __ldaxr(v179);
      while (__stlxr(v180 - 1, v179));
      if (!v180)
      {
        ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
        std::__shared_weak_count::__release_weak(v178);
      }
    }
    v181 = (std::__shared_weak_count *)*((_QWORD *)&v242 + 1);
    if (*((_QWORD *)&v242 + 1))
    {
      v182 = (unint64_t *)(*((_QWORD *)&v242 + 1) + 8);
      do
        v183 = __ldaxr(v182);
      while (__stlxr(v183 - 1, v182));
      if (!v183)
      {
        ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
        std::__shared_weak_count::__release_weak(v181);
      }
    }
  }
}

void sub_1B5C96900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,void *__p,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a42);
  _Unwind_Resume(a1);
}

double *AMCP::Graph::Manifest_Buffer::set_minimum_required_samples(double *result, double a2)
{
  NSObject *v2;
  _opaque_pthread_t *v3;
  mach_port_t v4;
  void *exception;
  __int128 v6;
  uint64_t v7;
  uint64_t (**v8)();
  __int128 v9;
  uint64_t v10;
  std::string v11;
  std::logic_error v12;
  std::logic_error v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char v19;
  uint8_t buf[8];
  __int16 v21;
  char *v22;
  __int16 v23;
  int v24;
  __int16 v25;
  _BYTE v26[14];
  const char *v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (round(a2) < 0.0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)result);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v2 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      v3 = pthread_self();
      v4 = pthread_mach_thread_np(v3);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v4;
      v21 = 2080;
      v22 = "Manifest_Buffer.cpp";
      v23 = 1024;
      v24 = 430;
      v25 = 2080;
      *(_QWORD *)v26 = "not (s >= 0_S)";
      _os_log_error_impl(&dword_1B57BA000, v2, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v19);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v11);
    std::logic_error::logic_error(&v12, &v11);
    v12.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v13, &v12);
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = -1;
    v13.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v14 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v13);
    *(_QWORD *)&v26[6] = "void AMCP::Graph::Manifest_Buffer::set_minimum_required_samples(Sample_Time)";
    v27 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Buffer.cpp";
    v28 = 430;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v6);
    v9 = v6;
    v10 = v7;
    v6 = 0uLL;
    v7 = 0;
    v8 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v8);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  result[20] = a2;
  return result;
}

void sub_1B5C97154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,void *a26,uint64_t a27)
{
  void *v27;
  int v28;
  uint64_t v29;
  uint64_t v31;

  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  *(_QWORD *)(v29 - 96) = &unk_1E69A2000;
  v31 = *(_QWORD *)(v29 - 88);
  if (v31 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 32))(v31))
    *(_QWORD *)(v29 - 88) = 0;
  MEMORY[0x1B5E500E8](v29 - 112);
  a26 = &unk_1E69A2000;
  if (a27 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a27 + 32))(a27))
    a27 = 0;
  MEMORY[0x1B5E500E8](&a24);
  MEMORY[0x1B5E500DC](&a22);
  if (a21 < 0)
    operator delete(a16);
  if (v28)
    __cxa_free_exception(v27);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v29 - 113));
  _Unwind_Resume(a1);
}

uint64_t HALS_IODevice::GetClockAlgorithm(HALS_IODevice *this)
{
  HALB_Mutex *v1;
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v8 = 1768518246;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK13HALS_IODevice17GetClockAlgorithmEv_block_invoke;
  v4[3] = &unk_1E699F590;
  v4[4] = &v5;
  v4[5] = this;
  v1 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IODevice *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v1, (uint64_t)v4);
  v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1B5C972E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t HALS_IODevice::IsClockStable(HALS_IODevice *this)
{
  HALB_Mutex *v1;
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v8 = 0;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK13HALS_IODevice13IsClockStableEv_block_invoke;
  v4[3] = &unk_1E699F5B8;
  v4[4] = &v5;
  v4[5] = this;
  v1 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IODevice *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v1, (uint64_t)v4);
  v2 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1B5C97394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t HALS_IODevice::UseClockBoundsCheck(HALS_IODevice *this)
{
  HALB_Mutex *v1;
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v8 = 1;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK13HALS_IODevice19UseClockBoundsCheckEv_block_invoke;
  v4[3] = &unk_1E699F5E0;
  v4[4] = &v5;
  v4[5] = this;
  v1 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IODevice *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v1, (uint64_t)v4);
  v2 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1B5C97444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t HALS_IODevice::_GetClockAlgorithm(HALS_IODevice *this)
{
  return 1768518246;
}

uint64_t HALS_IODevice::_IsClockStable(HALS_IODevice *this)
{
  return 0;
}

uint64_t HALS_IODevice::_UseClockBoundsCheck(HALS_IODevice *this)
{
  return 1;
}

uint64_t ___ZNK13HALS_IODevice19UseClockBoundsCheckEv_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 376))(*(_QWORD *)(a1 + 40));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1B5C974B0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t ___ZNK13HALS_IODevice13IsClockStableEv_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 368))(*(_QWORD *)(a1 + 40));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1B5C974F8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t ___ZNK13HALS_IODevice17GetClockAlgorithmEv_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 360))(*(_QWORD *)(a1 + 40));
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1B5C97540(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t HALS_IODevice::GetNumberStreams(HALS_IODevice *this, char a2)
{
  HALB_Mutex *v2;
  uint64_t v3;
  _QWORD v5[6];
  char v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2000000000;
  v10 = 0;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZNK13HALS_IODevice16GetNumberStreamsEb_block_invoke;
  v5[3] = &unk_1E699F540;
  v5[4] = &v7;
  v5[5] = this;
  v6 = a2;
  v2 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IODevice *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v5);
  v3 = *((unsigned int *)v8 + 6);
  _Block_object_dispose(&v7, 8);
  return v3;
}

void sub_1B5C975E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK13HALS_IODevice16GetNumberStreamsEb_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 40) + 384))(*(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1B5C9763C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t HALS_IODevice::CopyStreamByIndex(HALS_IODevice *this, char a2, int a3)
{
  HALB_Mutex *v3;
  uint64_t v4;
  _QWORD v6[6];
  int v7;
  char v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  v9 = 0;
  v10 = &v9;
  v11 = 0x2000000000;
  v12 = 0;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 0x40000000;
  v6[2] = ___ZNK13HALS_IODevice17CopyStreamByIndexEbj_block_invoke;
  v6[3] = &unk_1E699F568;
  v6[4] = &v9;
  v6[5] = this;
  v8 = a2;
  v7 = a3;
  v3 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IODevice *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v3, (uint64_t)v6);
  v4 = v10[3];
  _Block_object_dispose(&v9, 8);
  return v4;
}

void sub_1B5C976E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK13HALS_IODevice17CopyStreamByIndexEbj_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 40) + 392))(*(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 52), *(unsigned int *)(a1 + 48));
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1B5C97740(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t HALS_IODevice::GetTransportType(HALS_IODevice *this)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  uint64_t v5;

  v1 = *((unsigned int *)this + 4);
  v3 = 0x676C6F627472616ELL;
  v4 = 0;
  v5 = 0;
  (*(void (**)(HALS_IODevice *, uint64_t, uint64_t *, uint64_t, uint64_t *, char *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this + 112))(this, v1, &v3, 4, &v5, (char *)&v5 + 4, 0, 0, 0);
  return HIDWORD(v5);
}

void sub_1B5C977AC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5C977A0);
}

uint64_t HALS_IODevice::CopyIOEngine(HALS_IODevice *this)
{
  HALB_Mutex *v1;
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v8 = 0;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZN13HALS_IODevice12CopyIOEngineEv_block_invoke;
  v4[3] = &unk_1E699F608;
  v4[4] = &v5;
  v4[5] = this;
  v1 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IODevice *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v1, (uint64_t)v4);
  v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1B5C97850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN13HALS_IODevice12CopyIOEngineEv_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 400))(*(_QWORD *)(a1 + 40));
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void ___ZN13HALS_IODevice22set_paused_io_contextsERKNSt3__13setIjNS0_4lessIjEENS0_9allocatorIjEEEE_block_invoke(AMCP::Log::Scope_Registry *a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  _opaque_pthread_t *v4;
  mach_port_t v5;
  const char *v6;
  _opaque_pthread_t *v7;
  mach_port_t v8;
  NSObject **v9;
  __int16 v10;
  char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  const char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)a1 + 4);
  if (*(_BYTE *)(v1 + 72))
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v9, "com.apple.coreaudio", "AMCP");
    v3 = *v9;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v9);
    if (!os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      goto LABEL_11;
    v4 = pthread_self();
    v5 = pthread_mach_thread_np(v4);
    LODWORD(v9) = 67109890;
    HIDWORD(v9) = v5;
    v10 = 2080;
    v11 = "HALS_IODevice.cpp";
    v12 = 1024;
    v13 = 136;
    v14 = 2080;
    v15 = "not mContextsPausedForDevice";
    v6 = "%6u %32s:%-5d Assertion Failed: %s Contexts are already paused for this device!";
    goto LABEL_10;
  }
  if (*(_QWORD *)(v1 + 64))
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v9, "com.apple.coreaudio", "AMCP");
    v3 = *v9;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v9);
    if (!os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      goto LABEL_11;
    v7 = pthread_self();
    v8 = pthread_mach_thread_np(v7);
    LODWORD(v9) = 67109890;
    HIDWORD(v9) = v8;
    v10 = 2080;
    v11 = "HALS_IODevice.cpp";
    v12 = 1024;
    v13 = 137;
    v14 = 2080;
    v15 = "m_paused_contexts.empty()";
    v6 = "%6u %32s:%-5d Assertion Failed: %s Vector of paused contexts is not empty!";
LABEL_10:
    _os_log_error_impl(&dword_1B57BA000, v3, OS_LOG_TYPE_ERROR, v6, (uint8_t *)&v9, 0x22u);
LABEL_11:
    abort();
  }
  v2 = *((_QWORD *)a1 + 5);
  if (v1 + 48 != v2)
    std::__tree<DSP_Host_Types::AudioProcessingType>::__assign_multi<std::__tree_const_iterator<DSP_Host_Types::AudioProcessingType,std::__tree_node<DSP_Host_Types::AudioProcessingType,void *> *,long>>(v1 + 48, *(_QWORD **)v2, (_QWORD *)(v2 + 8));
  *(_BYTE *)(v1 + 72) = 1;
}

_QWORD *__Block_byref_object_copy__14916(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  result[5] = a2[5];
  v2 = a2 + 6;
  v3 = a2[6];
  result[6] = v3;
  v4 = result + 6;
  v5 = a2[7];
  result[7] = v5;
  if (v5)
  {
    *(_QWORD *)(v3 + 16) = v4;
    a2[5] = v2;
    *v2 = 0;
    a2[7] = 0;
  }
  else
  {
    result[5] = v4;
  }
  return result;
}

void __Block_byref_object_dispose__14917(uint64_t a1)
{
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*(_QWORD **)(a1 + 48));
}

void ___ZN13HALS_IODevice32get_and_clear_paused_io_contextsEv_block_invoke(AMCP::Log::Scope_Registry *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  NSObject ***v6;
  NSObject *v7;
  _opaque_pthread_t *v8;
  mach_port_t v9;
  NSObject **v10;
  _BYTE v11[10];
  __int16 v12;
  int v13;
  __int16 v14;
  const char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)a1 + 5);
  if (!*(_BYTE *)(v1 + 72))
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
    v7 = *v10;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v10);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = pthread_self();
      v9 = pthread_mach_thread_np(v8);
      LODWORD(v10) = 67109890;
      HIDWORD(v10) = v9;
      *(_WORD *)v11 = 2080;
      *(_QWORD *)&v11[2] = "HALS_IODevice.cpp";
      v12 = 1024;
      v13 = 148;
      v14 = 2080;
      v15 = "mContextsPausedForDevice";
      _os_log_error_impl(&dword_1B57BA000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s Contexts not paused for this device right now!", (uint8_t *)&v10, 0x22u);
    }
    abort();
  }
  v3 = (_QWORD *)(v1 + 48);
  std::set<unsigned int>::set[abi:ne180100]((uint64_t *)&v10, v1 + 48);
  v5 = *(_QWORD **)(v1 + 56);
  v4 = v1 + 56;
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v5);
  *v3 = v4;
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  *(_BYTE *)(v4 + 16) = 0;
  v6 = (NSObject ***)(*(_QWORD *)(*((_QWORD *)a1 + 4) + 8) + 40);
  if (v6 != &v10)
    std::__tree<DSP_Host_Types::AudioProcessingType>::__assign_multi<std::__tree_const_iterator<DSP_Host_Types::AudioProcessingType,std::__tree_node<DSP_Host_Types::AudioProcessingType,void *> *,long>>((uint64_t)v6, v10, v11);
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*(_QWORD **)v11);
}

void sub_1B5C97C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(a10);
  _Unwind_Resume(a1);
}

void AMCP::Null_Object_Description::create(applesauce::CF::DictionaryRef *__return_ptr a1@<X8>, AMCP::Null_Object_Description *this@<X0>)
{
  __CFDictionary *Mutable;
  _DWORD *v5;
  unsigned int stock_class_id;
  int v7;
  int v8;
  int16x8_t v9;
  CFTypeRef v10;
  unsigned int *v11;
  int v12;
  unsigned int *v13;
  unsigned int *v14;
  std::string *v15;
  CFIndex size;
  CFStringRef v17;
  void *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::runtime_error *exception;
  void *v24;
  void *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int *v30;
  void *__p;
  void *v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int *v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int *v39;
  std::string v40;
  CFTypeRef v41[2];

  AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v26, *(std::__shared_mutex_base **)(***((_QWORD ***)this + 4) + 16), *((_DWORD *)this + 2));
  AMCP::Core::Core::make_snapshot((AMCP::Core::Core *)&v24, v26);
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
  v5 = v25;
  if (v25)
  {
    do
    {
      stock_class_id = AMCP::Object::get_stock_class_id(this);
      v7 = v5[4];
      if (v7 <= 1684370978)
      {
        if (v7 <= 1652060013)
        {
          if (v7 <= 1651472418)
          {
            if (v7 == 1650682915)
              goto LABEL_65;
            v12 = 1650751011;
            goto LABEL_37;
          }
          if (v7 != 1651472419)
          {
            v12 = 1652060006;
            goto LABEL_37;
          }
          goto LABEL_39;
        }
        if (v7 > 1668575851)
        {
          if (v7 != 1668575852)
          {
            v12 = 1668577315;
LABEL_37:
            if (v7 != v12)
            {
LABEL_38:
              AMCP::make_description_from_thing((AMCP *)v41, (const AMCP::Thing *)(v5 + 8));
              v10 = v41[0];
              goto LABEL_54;
            }
            goto LABEL_65;
          }
          if (v5[5] == 1735159650)
          {
            v32 = 0;
            v33 = 0;
            __p = 0;
            AMCP::Null_Object_Description::make_object_list_description(v41, (uint64_t)this, (uint64_t)(v5 + 8), (unsigned int **)&__p);
            v10 = v41[0];
            if (v41[0])
            {
              CFRetain(v41[0]);
              CFRelease(v10);
            }
            v11 = (unsigned int *)__p;
            if (!__p)
              goto LABEL_54;
            v32 = __p;
LABEL_53:
            operator delete(v11);
            goto LABEL_54;
          }
        }
        else if (v7 != 1652060014)
        {
          if (v7 != 1668049699)
            goto LABEL_38;
          if (AMCP::is_base_of((AMCP *)0x61706C67, stock_class_id))
          {
            v38 = 0;
            v39 = 0;
            v37 = 0;
            v13 = (unsigned int *)operator new(4uLL);
            v37 = v13;
            *v13 = 1633969526;
            v38 = v13 + 1;
            v39 = v13 + 1;
            AMCP::Null_Object_Description::make_object_list_description(v41, (uint64_t)this, (uint64_t)(v5 + 8), &v37);
            v10 = v41[0];
            if (v41[0])
            {
              CFRetain(v41[0]);
              CFRelease(v10);
            }
            v11 = v37;
            if (v37)
            {
              v38 = v37;
              goto LABEL_53;
            }
LABEL_54:
            if (v10)
            {
              AMCP::Address::to_string(&v40, v5 + 4, v9);
              if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v15 = &v40;
              else
                v15 = (std::string *)v40.__r_.__value_.__r.__words[0];
              if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                size = HIBYTE(v40.__r_.__value_.__r.__words[2]);
              else
                size = v40.__r_.__value_.__l.__size_;
              v17 = CFStringCreateWithBytes(0, (const UInt8 *)v15, size, 0x8000100u, 0);
              if (!v17)
              {
                exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(exception, "Could not construct");
                __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::TypeRef>(Mutable, v17, v10);
              CFRelease(v17);
              if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v40.__r_.__value_.__l.__data_);
              CFRelease(v10);
            }
          }
        }
      }
      else
      {
        if (v7 <= 1869638758)
        {
          if (v7 > 1852793890)
          {
            if (v7 == 1852793891)
              goto LABEL_65;
            v12 = 1853059619;
            goto LABEL_37;
          }
          if (v7 != 1684370979)
          {
            v12 = 1768189556;
            goto LABEL_37;
          }
LABEL_39:
          if (AMCP::is_base_of((AMCP *)0x61706C67, stock_class_id))
          {
            memset(&v40, 0, sizeof(v40));
            AMCP::Null_Object_Description::make_object_list_description(v41, (uint64_t)this, (uint64_t)(v5 + 8), (unsigned int **)&v40);
            v10 = v41[0];
            if (v41[0])
            {
              CFRetain(v41[0]);
              CFRelease(v10);
            }
            v11 = (unsigned int *)v40.__r_.__value_.__r.__words[0];
            if (!v40.__r_.__value_.__r.__words[0])
              goto LABEL_54;
            v40.__r_.__value_.__l.__size_ = v40.__r_.__value_.__r.__words[0];
            goto LABEL_53;
          }
          goto LABEL_65;
        }
        if (v7 <= 1870098033)
        {
          if (v7 == 1869638759)
            goto LABEL_65;
          v12 = 1870097955;
          goto LABEL_37;
        }
        if (v7 != 1870098034)
        {
          if (v7 == 1886152483)
          {
            v29 = 0;
            v30 = 0;
            v28 = 0;
            v14 = (unsigned int *)operator new(4uLL);
            v28 = v14;
            *v14 = 1853189228;
            v29 = v14 + 1;
            v30 = v14 + 1;
            AMCP::Null_Object_Description::make_object_list_description(v41, (uint64_t)this, (uint64_t)(v5 + 8), &v28);
            v10 = v41[0];
            if (v41[0])
            {
              CFRetain(v41[0]);
              CFRelease(v10);
            }
            v11 = v28;
            if (!v28)
              goto LABEL_54;
            v29 = v28;
            goto LABEL_53;
          }
          if (v7 != 1937009955)
            goto LABEL_38;
          v8 = v5[5];
          if (v8 == 1869968496 || v8 == 1768845428)
          {
            v35 = 0;
            v36 = 0;
            v34 = 0;
            AMCP::Null_Object_Description::make_object_list_description(v41, (uint64_t)this, (uint64_t)(v5 + 8), &v34);
            v10 = v41[0];
            if (v41[0])
            {
              CFRetain(v41[0]);
              CFRelease(v10);
            }
            v11 = v34;
            if (v34)
            {
              v35 = v34;
              goto LABEL_53;
            }
            goto LABEL_54;
          }
        }
      }
LABEL_65:
      v5 = *(_DWORD **)v5;
    }
    while (v5);
  }
  mcp_applesauce::CF::Dictionary_Builder::copy_dictionary(a1, Mutable);
  if (Mutable)
    CFRelease(Mutable);
  std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::__deallocate_node(v25);
  v18 = v24;
  v24 = 0;
  if (v18)
    operator delete(v18);
  v19 = v27;
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_1B5C9819C(void *a1)
{
  __clang_call_terminate(a1);
}

void AMCP::Null_Object_Description::make_object_list_description(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned int **a4)
{
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, _QWORD, __int128 *);
  uint64_t v10;
  const void *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  const void *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  __CFArray *Mutable;
  unsigned int *v20;
  unsigned int stock_class_id;
  const AMCP::Object *v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  _QWORD *v26;
  unsigned int *v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  CFTypeRef cf;
  __int128 v32;
  std::__shared_weak_count *v33[2];
  uint64_t (*v34)(uint64_t, __int128 *, _QWORD, uint64_t *);

  *a1 = 0;
  if (*(_QWORD *)(a3 + 32))
  {
    v8 = AMCP::Implementation::get_type_marker<std::vector<unsigned int>>();
    v9 = *(void (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a3 + 32);
    *(_QWORD *)&v32 = 0;
    if (v9)
    {
      v9(3, a3, 0, &v32);
      v9 = (void (*)(uint64_t, uint64_t, _QWORD, __int128 *))v32;
    }
    if (v9 == (void (*)(uint64_t, uint64_t, _QWORD, __int128 *))v8)
    {
      *(_QWORD *)&v32 = v8;
      v10 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a3 + 32))(4, a3, 0, &v32);
      v27 = 0;
      v28 = 0;
      v29 = 0;
      if (v10)
      {
        v11 = *(const void **)v10;
        v12 = *(_QWORD *)(v10 + 8);
        v13 = (v12 - *(_QWORD *)v10) >> 2;
      }
      else
      {
        v11 = 0;
        v12 = 0;
        v13 = 0;
      }
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v27, v11, v12, v13);
    }
    else
    {
      cf = (CFTypeRef)AMCP::Implementation::get_type_marker<std::vector<unsigned int>>();
      v32 = 0u;
      *(_OWORD *)v33 = 0u;
      v34 = 0;
      (*(void (**)(uint64_t, uint64_t, __int128 *, CFTypeRef *))(a3 + 32))(6, a3, &v32, &cf);
      if (v34)
      {
        v30 = v8;
        v14 = v34(4, &v32, 0, &v30);
        v27 = 0;
        v28 = 0;
        v29 = 0;
        if (v14)
        {
          v15 = *(const void **)v14;
          v16 = *(_QWORD *)(v14 + 8);
        }
        else
        {
          v16 = 0;
          v15 = 0;
        }
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v27, v15, v16, (v16 - (uint64_t)v15) >> 2);
      }
      else
      {
        v27 = 0;
        v28 = 0;
        v29 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v27, 0, 0, 0);
      }
      if (v34)
        v34(0, &v32, 0, 0);
    }
    v17 = v27;
    v18 = v28;
    if (v27 != v28)
    {
      v26 = a1;
      Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B380]);
      v20 = v17;
      do
      {
        AMCP::Object::Object((uint64_t)&v32, *(_QWORD *)(a2 + 32), *v20);
        if (v33[1])
        {
          if (v33[1]->__shared_owners_ != -1)
          {
            stock_class_id = AMCP::Object::get_stock_class_id((AMCP::Object *)&v32);
            v24 = *a4;
            v23 = a4[1];
            if (*a4 == v23)
              goto LABEL_27;
            v25 = stock_class_id;
            while ((AMCP::is_base_of((AMCP *)*v24, v25) & 1) == 0)
            {
              if (++v24 == v23)
              {
                v24 = v23;
                break;
              }
            }
            if (v24 == a4[1])
            {
LABEL_27:
              AMCP::Null_Object_Description::create((uint64_t *)&cf, (AMCP::Null_Object_Description *)&v32, v22);
              if (cf)
              {
                mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::DictionaryRef>(Mutable, cf);
                if (cf)
                  CFRelease(cf);
              }
            }
          }
          *(_QWORD *)&v32 = &off_1E696F358;
          if (v33[1])
            std::__shared_weak_count::__release_weak(v33[1]);
        }
        else
        {
          *(_QWORD *)&v32 = &off_1E696F358;
        }
        ++v20;
      }
      while (v20 != v18);
      mcp_applesauce::CF::Array_Builder::copy_array((applesauce::CF::ArrayRef *)&v32, Mutable);
      *v26 = v32;
      if (Mutable)
        CFRelease(Mutable);
    }
    if (v17)
      operator delete(v17);
  }
}

void sub_1B5C98478(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  __clang_call_terminate(a1);
}

void AMCP::Null_Object_Description::create_clock(const void **this@<X0>, const void **a2@<X1>, const applesauce::CF::StringRef *a3@<X2>, int a4@<W3>, applesauce::CF::DictionaryRef *a5@<X8>)
{
  int v6;
  __CFDictionary *Mutable;
  int16x8_t v11;
  std::string *p_p;
  CFIndex size;
  CFStringRef v14;
  CFNumberRef v15;
  int16x8_t v16;
  std::string *v17;
  CFIndex v18;
  CFStringRef v19;
  int16x8_t v20;
  std::string *v21;
  CFIndex v22;
  CFStringRef v23;
  int16x8_t v24;
  std::string *v25;
  CFIndex v26;
  CFStringRef v27;
  CFNumberRef v28;
  int16x8_t v29;
  std::string *v30;
  CFIndex v31;
  CFStringRef v32;
  CFNumberRef v33;
  std::runtime_error *exception;
  std::runtime_error *v35;
  std::runtime_error *v36;
  std::runtime_error *v37;
  std::runtime_error *v38;
  std::runtime_error *v39;
  std::runtime_error *v40;
  std::runtime_error *v41;
  uint64_t v42;
  int v43;
  std::string __p;
  int valuePtr;

  v6 = (int)a3;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
  v11.i64[0] = 0x676C6F62636C6173;
  v42 = 0x676C6F62636C6173;
  v43 = 0;
  AMCP::Address::to_string(&__p, (unsigned int *)&v42, v11);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v14 = CFStringCreateWithBytes(0, (const UInt8 *)p_p, size, 0x8000100u, 0);
  if (!v14)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  valuePtr = 1633905771;
  v15 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v15)
  {
    v35 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v35, "Could not construct");
    __cxa_throw(v35, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(Mutable, v14, v15);
  CFRelease(v15);
  CFRelease(v14);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v16.i64[0] = 0x676C6F626C6E616DLL;
  v42 = 0x676C6F626C6E616DLL;
  v43 = 0;
  AMCP::Address::to_string(&__p, (unsigned int *)&v42, v16);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = &__p;
  else
    v17 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v18 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v18 = __p.__r_.__value_.__l.__size_;
  v19 = CFStringCreateWithBytes(0, (const UInt8 *)v17, v18, 0x8000100u, 0);
  if (!v19)
  {
    v36 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v36, "Could not construct");
    __cxa_throw(v36, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::StringRef>(Mutable, v19, *this);
  CFRelease(v19);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v20.i64[0] = 0x676C6F6275696420;
  v42 = 0x676C6F6275696420;
  v43 = 0;
  AMCP::Address::to_string(&__p, (unsigned int *)&v42, v20);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v21 = &__p;
  else
    v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v22 = __p.__r_.__value_.__l.__size_;
  v23 = CFStringCreateWithBytes(0, (const UInt8 *)v21, v22, 0x8000100u, 0);
  if (!v23)
  {
    v37 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v37, "Could not construct");
    __cxa_throw(v37, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::StringRef>(Mutable, v23, *a2);
  CFRelease(v23);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v24.i64[0] = 0x696E70746C746E63;
  v42 = 0x696E70746C746E63;
  v43 = 0;
  AMCP::Address::to_string(&__p, (unsigned int *)&v42, v24);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v25 = &__p;
  else
    v25 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v26 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v26 = __p.__r_.__value_.__l.__size_;
  v27 = CFStringCreateWithBytes(0, (const UInt8 *)v25, v26, 0x8000100u, 0);
  if (!v27)
  {
    v38 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v38, "Could not construct");
    __cxa_throw(v38, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  valuePtr = v6;
  v28 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v28)
  {
    v39 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v39, "Could not construct");
    __cxa_throw(v39, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(Mutable, v27, v28);
  CFRelease(v28);
  CFRelease(v27);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v29.i64[0] = 0x6F7574706C746E63;
  v42 = 0x6F7574706C746E63;
  v43 = 0;
  AMCP::Address::to_string(&__p, (unsigned int *)&v42, v29);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v30 = &__p;
  else
    v30 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v31 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v31 = __p.__r_.__value_.__l.__size_;
  v32 = CFStringCreateWithBytes(0, (const UInt8 *)v30, v31, 0x8000100u, 0);
  if (!v32)
  {
    v40 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v40, "Could not construct");
    __cxa_throw(v40, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  valuePtr = a4;
  v33 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v33)
  {
    v41 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v41, "Could not construct");
    __cxa_throw(v41, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(Mutable, v32, v33);
  CFRelease(v33);
  CFRelease(v32);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  mcp_applesauce::CF::Dictionary_Builder::copy_dictionary(a5, Mutable);
  if (Mutable)
    CFRelease(Mutable);
}

void sub_1B5C989B4(void *a1)
{
  __clang_call_terminate(a1);
}

void AMCP::Null_Object_Description::create_device(const void **this@<X0>, const void **a2@<X1>, const applesauce::CF::StringRef *a3@<X2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, applesauce::CF::DictionaryRef *a8@<X8>)
{
  __CFDictionary *MutableCopy;
  int16x8_t v13;
  std::string *p_theDict;
  CFIndex size;
  CFStringRef v16;
  CFNumberRef v17;
  int16x8_t v18;
  std::string *v19;
  CFIndex v20;
  CFStringRef v21;
  CFNumberRef v22;
  int16x8_t v23;
  std::string *v24;
  CFIndex v25;
  CFStringRef v26;
  CFNumberRef v27;
  int16x8_t v28;
  std::string *v29;
  CFIndex v30;
  CFStringRef v31;
  CFNumberRef v32;
  std::runtime_error *exception;
  std::runtime_error *v34;
  std::runtime_error *v35;
  std::runtime_error *v36;
  std::runtime_error *v37;
  std::runtime_error *v38;
  std::runtime_error *v39;
  std::runtime_error *v40;
  uint64_t v41;
  int v42;
  std::string theDict;
  int valuePtr;

  AMCP::Null_Object_Description::create_clock(this, a2, a3, a5, (applesauce::CF::DictionaryRef *)&theDict);
  MutableCopy = CFDictionaryCreateMutableCopy(0, 0, (CFDictionaryRef)theDict.__r_.__value_.__l.__data_);
  if (theDict.__r_.__value_.__r.__words[0])
    CFRelease(theDict.__r_.__value_.__l.__data_);
  v13.i64[0] = 0x676C6F62636C6173;
  v41 = 0x676C6F62636C6173;
  v42 = 0;
  AMCP::Address::to_string(&theDict, (unsigned int *)&v41, v13);
  if ((theDict.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_theDict = &theDict;
  else
    p_theDict = (std::string *)theDict.__r_.__value_.__r.__words[0];
  if ((theDict.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(theDict.__r_.__value_.__r.__words[2]);
  else
    size = theDict.__r_.__value_.__l.__size_;
  v16 = CFStringCreateWithBytes(0, (const UInt8 *)p_theDict, size, 0x8000100u, 0);
  if (!v16)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  valuePtr = 1633969526;
  v17 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v17)
  {
    v34 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v34, "Could not construct");
    __cxa_throw(v34, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(MutableCopy, v16, v17);
  CFRelease(v17);
  CFRelease(v16);
  if (SHIBYTE(theDict.__r_.__value_.__r.__words[2]) < 0)
    operator delete(theDict.__r_.__value_.__l.__data_);
  v18.i64[0] = 0x696E707473616674;
  v41 = 0x696E707473616674;
  v42 = 0;
  AMCP::Address::to_string(&theDict, (unsigned int *)&v41, v18);
  if ((theDict.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19 = &theDict;
  else
    v19 = (std::string *)theDict.__r_.__value_.__r.__words[0];
  if ((theDict.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v20 = HIBYTE(theDict.__r_.__value_.__r.__words[2]);
  else
    v20 = theDict.__r_.__value_.__l.__size_;
  v21 = CFStringCreateWithBytes(0, (const UInt8 *)v19, v20, 0x8000100u, 0);
  if (!v21)
  {
    v35 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v35, "Could not construct");
    __cxa_throw(v35, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  valuePtr = a4;
  v22 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v22)
  {
    v36 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v36, "Could not construct");
    __cxa_throw(v36, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(MutableCopy, v21, v22);
  CFRelease(v22);
  CFRelease(v21);
  if (SHIBYTE(theDict.__r_.__value_.__r.__words[2]) < 0)
    operator delete(theDict.__r_.__value_.__l.__data_);
  v23.i64[0] = 0x6F75747073616674;
  v41 = 0x6F75747073616674;
  v42 = 0;
  AMCP::Address::to_string(&theDict, (unsigned int *)&v41, v23);
  if ((theDict.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v24 = &theDict;
  else
    v24 = (std::string *)theDict.__r_.__value_.__r.__words[0];
  if ((theDict.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v25 = HIBYTE(theDict.__r_.__value_.__r.__words[2]);
  else
    v25 = theDict.__r_.__value_.__l.__size_;
  v26 = CFStringCreateWithBytes(0, (const UInt8 *)v24, v25, 0x8000100u, 0);
  if (!v26)
  {
    v37 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v37, "Could not construct");
    __cxa_throw(v37, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  valuePtr = a6;
  v27 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v27)
  {
    v38 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v38, "Could not construct");
    __cxa_throw(v38, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(MutableCopy, v26, v27);
  CFRelease(v27);
  CFRelease(v26);
  if (SHIBYTE(theDict.__r_.__value_.__r.__words[2]) < 0)
    operator delete(theDict.__r_.__value_.__l.__data_);
  v28.i64[0] = 0x676C6F627472616ELL;
  v41 = 0x676C6F627472616ELL;
  v42 = 0;
  AMCP::Address::to_string(&theDict, (unsigned int *)&v41, v28);
  if ((theDict.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v29 = &theDict;
  else
    v29 = (std::string *)theDict.__r_.__value_.__r.__words[0];
  if ((theDict.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v30 = HIBYTE(theDict.__r_.__value_.__r.__words[2]);
  else
    v30 = theDict.__r_.__value_.__l.__size_;
  v31 = CFStringCreateWithBytes(0, (const UInt8 *)v29, v30, 0x8000100u, 0);
  if (!v31)
  {
    v39 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v39, "Could not construct");
    __cxa_throw(v39, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  valuePtr = a7;
  v32 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v32)
  {
    v40 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v40, "Could not construct");
    __cxa_throw(v40, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(MutableCopy, v31, v32);
  CFRelease(v32);
  CFRelease(v31);
  if (SHIBYTE(theDict.__r_.__value_.__r.__words[2]) < 0)
    operator delete(theDict.__r_.__value_.__l.__data_);
  mcp_applesauce::CF::Dictionary_Builder::copy_dictionary(a8, MutableCopy);
  if (MutableCopy)
    CFRelease(MutableCopy);
}

void sub_1B5C98EE4(void *a1)
{
  __clang_call_terminate(a1);
}

void AMCP::Null_Object_Description::create_stream(const void **a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, applesauce::CF::DictionaryRef *a7@<X8>)
{
  __CFDictionary *Mutable;
  int16x8_t v15;
  void **v16;
  CFIndex v17;
  CFStringRef v18;
  int16x8_t v19;
  void **v20;
  CFIndex v21;
  CFStringRef v22;
  CFNumberRef v23;
  int16x8_t v24;
  std::string *v25;
  CFIndex size;
  CFStringRef v27;
  const void *v28;
  int16x8_t v29;
  void **v30;
  CFIndex v31;
  CFStringRef v32;
  CFNumberRef v33;
  int16x8_t v34;
  void **v35;
  CFIndex v36;
  CFStringRef v37;
  CFNumberRef v38;
  int16x8_t v39;
  std::string *v40;
  CFIndex v41;
  CFStringRef v42;
  _OWORD *v43;
  __int128 v44;
  const void *v45;
  int16x8_t v46;
  std::string *v47;
  CFIndex v48;
  CFStringRef v49;
  const void *v50;
  std::runtime_error *exception;
  std::runtime_error *v52;
  std::runtime_error *v53;
  std::runtime_error *v54;
  std::runtime_error *v55;
  std::runtime_error *v56;
  std::runtime_error *v57;
  std::runtime_error *v58;
  std::runtime_error *v59;
  std::runtime_error *v60;
  void *__p[2];
  __int128 v62;
  void (*v63)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  const void *v64;
  uint64_t valuePtr;
  int v66;
  std::string v67;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
  v15.i64[0] = 0x676C6F626C6E616DLL;
  v67.__r_.__value_.__r.__words[0] = 0x676C6F626C6E616DLL;
  LODWORD(v67.__r_.__value_.__r.__words[1]) = 0;
  AMCP::Address::to_string((std::string *)__p, (unsigned int *)&v67, v15);
  if ((SBYTE7(v62) & 0x80u) == 0)
    v16 = __p;
  else
    v16 = (void **)__p[0];
  if ((SBYTE7(v62) & 0x80u) == 0)
    v17 = BYTE7(v62);
  else
    v17 = (CFIndex)__p[1];
  v18 = CFStringCreateWithBytes(0, (const UInt8 *)v16, v17, 0x8000100u, 0);
  if (!v18)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::StringRef>(Mutable, v18, *a1);
  CFRelease(v18);
  if (SBYTE7(v62) < 0)
    operator delete(__p[0]);
  v19.i64[0] = 0x676C6F62636C6173;
  v67.__r_.__value_.__r.__words[0] = 0x676C6F62636C6173;
  LODWORD(v67.__r_.__value_.__r.__words[1]) = 0;
  AMCP::Address::to_string((std::string *)__p, (unsigned int *)&v67, v19);
  if ((SBYTE7(v62) & 0x80u) == 0)
    v20 = __p;
  else
    v20 = (void **)__p[0];
  if ((SBYTE7(v62) & 0x80u) == 0)
    v21 = BYTE7(v62);
  else
    v21 = (CFIndex)__p[1];
  v22 = CFStringCreateWithBytes(0, (const UInt8 *)v20, v21, 0x8000100u, 0);
  if (!v22)
  {
    v52 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v52, "Could not construct");
    __cxa_throw(v52, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  LODWORD(valuePtr) = 1634956402;
  v23 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v23)
  {
    v53 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v53, "Could not construct");
    __cxa_throw(v53, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(Mutable, v22, v23);
  CFRelease(v23);
  CFRelease(v22);
  if (SBYTE7(v62) < 0)
    operator delete(__p[0]);
  v24.i64[0] = 0x676C6F6273646972;
  valuePtr = 0x676C6F6273646972;
  v66 = 0;
  AMCP::Address::to_string(&v67, (unsigned int *)&valuePtr, v24);
  if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v25 = &v67;
  else
    v25 = (std::string *)v67.__r_.__value_.__r.__words[0];
  if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v67.__r_.__value_.__r.__words[2]);
  else
    size = v67.__r_.__value_.__l.__size_;
  v27 = CFStringCreateWithBytes(0, (const UInt8 *)v25, size, 0x8000100u, 0);
  if (!v27)
  {
    v54 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v54, "Could not construct");
    __cxa_throw(v54, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  *(_OWORD *)__p = 0u;
  v62 = 0u;
  LODWORD(__p[0]) = a2;
  v63 = (void (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<AMCP::Direction>::dispatch;
  AMCP::make_description_from_thing((AMCP *)&v64, (const AMCP::Thing *)__p);
  v28 = v64;
  mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::TypeRef>(Mutable, v27, v64);
  if (v28)
    CFRelease(v28);
  if (v63)
    v63(0, (uint64_t)__p, 0, 0);
  CFRelease(v27);
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v67.__r_.__value_.__l.__data_);
  v29.i64[0] = 0x676C6F627363686ELL;
  v67.__r_.__value_.__r.__words[0] = 0x676C6F627363686ELL;
  LODWORD(v67.__r_.__value_.__r.__words[1]) = 0;
  AMCP::Address::to_string((std::string *)__p, (unsigned int *)&v67, v29);
  if ((SBYTE7(v62) & 0x80u) == 0)
    v30 = __p;
  else
    v30 = (void **)__p[0];
  if ((SBYTE7(v62) & 0x80u) == 0)
    v31 = BYTE7(v62);
  else
    v31 = (CFIndex)__p[1];
  v32 = CFStringCreateWithBytes(0, (const UInt8 *)v30, v31, 0x8000100u, 0);
  if (!v32)
  {
    v55 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v55, "Could not construct");
    __cxa_throw(v55, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  LODWORD(valuePtr) = a3;
  v33 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v33)
  {
    v56 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v56, "Could not construct");
    __cxa_throw(v56, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(Mutable, v32, v33);
  CFRelease(v33);
  CFRelease(v32);
  if (SBYTE7(v62) < 0)
    operator delete(__p[0]);
  v34.i64[0] = 0x676C6F627465726DLL;
  v67.__r_.__value_.__r.__words[0] = 0x676C6F627465726DLL;
  LODWORD(v67.__r_.__value_.__r.__words[1]) = 0;
  AMCP::Address::to_string((std::string *)__p, (unsigned int *)&v67, v34);
  if ((SBYTE7(v62) & 0x80u) == 0)
    v35 = __p;
  else
    v35 = (void **)__p[0];
  if ((SBYTE7(v62) & 0x80u) == 0)
    v36 = BYTE7(v62);
  else
    v36 = (CFIndex)__p[1];
  v37 = CFStringCreateWithBytes(0, (const UInt8 *)v35, v36, 0x8000100u, 0);
  if (!v37)
  {
    v57 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v57, "Could not construct");
    __cxa_throw(v57, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  LODWORD(valuePtr) = a4;
  v38 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v38)
  {
    v58 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v58, "Could not construct");
    __cxa_throw(v58, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(Mutable, v37, v38);
  CFRelease(v38);
  CFRelease(v37);
  if (SBYTE7(v62) < 0)
    operator delete(__p[0]);
  v39.i64[0] = 0x676C6F62666D6174;
  valuePtr = 0x676C6F62666D6174;
  v66 = 0;
  AMCP::Address::to_string(&v67, (unsigned int *)&valuePtr, v39);
  if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v40 = &v67;
  else
    v40 = (std::string *)v67.__r_.__value_.__r.__words[0];
  if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v41 = HIBYTE(v67.__r_.__value_.__r.__words[2]);
  else
    v41 = v67.__r_.__value_.__l.__size_;
  v42 = CFStringCreateWithBytes(0, (const UInt8 *)v40, v41, 0x8000100u, 0);
  if (!v42)
  {
    v59 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v59, "Could not construct");
    __cxa_throw(v59, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  *(_OWORD *)__p = 0u;
  v62 = 0u;
  v63 = (void (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::Outboard_Storage<CA::StreamDescription>::dispatch;
  v43 = (_OWORD *)operator new();
  v44 = *(_OWORD *)(a5 + 16);
  *v43 = *(_OWORD *)a5;
  v43[1] = v44;
  *((_QWORD *)v43 + 4) = *(_QWORD *)(a5 + 32);
  __p[0] = v43;
  AMCP::make_description_from_thing((AMCP *)&v64, (const AMCP::Thing *)__p);
  v45 = v64;
  mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::TypeRef>(Mutable, v42, v64);
  if (v45)
    CFRelease(v45);
  if (v63)
    v63(0, (uint64_t)__p, 0, 0);
  CFRelease(v42);
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v67.__r_.__value_.__l.__data_);
  v46.i64[0] = 0x676C6F62666D7423;
  valuePtr = 0x676C6F62666D7423;
  v66 = 0;
  AMCP::Address::to_string(&v67, (unsigned int *)&valuePtr, v46);
  if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v47 = &v67;
  else
    v47 = (std::string *)v67.__r_.__value_.__r.__words[0];
  if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v48 = HIBYTE(v67.__r_.__value_.__r.__words[2]);
  else
    v48 = v67.__r_.__value_.__l.__size_;
  v49 = CFStringCreateWithBytes(0, (const UInt8 *)v47, v48, 0x8000100u, 0);
  if (!v49)
  {
    v60 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v60, "Could not construct");
    __cxa_throw(v60, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v63 = 0;
  *(_OWORD *)__p = 0u;
  v62 = 0u;
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__init_with_size[abi:ne180100]<std::tuple<CA::ValueRangeList,CA::StreamDescription>*,std::tuple<CA::ValueRangeList,CA::StreamDescription>*>((uint64_t)__p, *a6, a6[1], (a6[1] - *a6) >> 6);
  v63 = (void (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>::dispatch;
  AMCP::make_description_from_thing((AMCP *)&v64, (const AMCP::Thing *)__p);
  v50 = v64;
  mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::TypeRef>(Mutable, v49, v64);
  if (v50)
    CFRelease(v50);
  if (v63)
    v63(0, (uint64_t)__p, 0, 0);
  CFRelease(v49);
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v67.__r_.__value_.__l.__data_);
  mcp_applesauce::CF::Dictionary_Builder::copy_dictionary(a7, Mutable);
  if (Mutable)
    CFRelease(Mutable);
}

void sub_1B5C99704(void *a1)
{
  __clang_call_terminate(a1);
}

void AMCP::Null_Object_Description::attach_stream_list(CFDictionaryRef *a1@<X0>, int a2@<W1>, const void **a3@<X2>, applesauce::CF::DictionaryRef *a4@<X8>)
{
  __CFDictionary *MutableCopy;
  int16x8_t v8;
  unsigned int v9;
  std::string *p_p;
  CFIndex size;
  CFStringRef v12;
  std::runtime_error *exception;
  unsigned int v14[3];
  std::string __p;

  MutableCopy = CFDictionaryCreateMutableCopy(0, 0, *a1);
  if (a2 == 1)
    v9 = 1768845428;
  else
    v9 = 1869968496;
  v14[0] = 1937009955;
  v14[1] = v9;
  v14[2] = 0;
  AMCP::Address::to_string(&__p, v14, v8);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v12 = CFStringCreateWithBytes(0, (const UInt8 *)p_p, size, 0x8000100u, 0);
  if (!v12)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::ArrayRef>(MutableCopy, v12, *a3);
  CFRelease(v12);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  mcp_applesauce::CF::Dictionary_Builder::copy_dictionary(a4, MutableCopy);
  if (MutableCopy)
    CFRelease(MutableCopy);
}

void sub_1B5C998D8(void *a1)
{
  __clang_call_terminate(a1);
}

void AMCP::Null_Object_Description::create_slider_control(int a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, std::string::size_type *a5@<X4>, int a6@<W5>, applesauce::CF::DictionaryRef *a7@<X8>)
{
  __CFDictionary *MutableCopy;
  int16x8_t v11;
  std::string *p_theDict;
  CFIndex size;
  CFStringRef v14;
  CFNumberRef v15;
  int16x8_t v16;
  std::string *p_p;
  CFIndex v18;
  CFStringRef v19;
  const void *v20;
  std::runtime_error *exception;
  std::runtime_error *v22;
  std::runtime_error *v23;
  std::string theDict;
  uint64_t v25;
  void (*v26)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  const void *v27;
  uint64_t valuePtr;
  int v29;
  std::string __p;

  AMCP::Null_Object_Description::create_control((AMCP::Null_Object_Description *)&theDict, a1, a2, a3, a4);
  MutableCopy = CFDictionaryCreateMutableCopy(0, 0, (CFDictionaryRef)theDict.__r_.__value_.__l.__data_);
  if (theDict.__r_.__value_.__r.__words[0])
    CFRelease(theDict.__r_.__value_.__l.__data_);
  v11.i64[0] = 0x676C6F6273647276;
  __p.__r_.__value_.__r.__words[0] = 0x676C6F6273647276;
  LODWORD(__p.__r_.__value_.__r.__words[1]) = 0;
  AMCP::Address::to_string(&theDict, (unsigned int *)&__p, v11);
  if ((theDict.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_theDict = &theDict;
  else
    p_theDict = (std::string *)theDict.__r_.__value_.__r.__words[0];
  if ((theDict.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(theDict.__r_.__value_.__r.__words[2]);
  else
    size = theDict.__r_.__value_.__l.__size_;
  v14 = CFStringCreateWithBytes(0, (const UInt8 *)p_theDict, size, 0x8000100u, 0);
  if (!v14)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  LODWORD(valuePtr) = a6;
  v15 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v15)
  {
    v22 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v22, "Could not construct");
    __cxa_throw(v22, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(MutableCopy, v14, v15);
  CFRelease(v15);
  CFRelease(v14);
  if (SHIBYTE(theDict.__r_.__value_.__r.__words[2]) < 0)
    operator delete(theDict.__r_.__value_.__l.__data_);
  v16.i64[0] = 0x676C6F6273647272;
  valuePtr = 0x676C6F6273647272;
  v29 = 0;
  AMCP::Address::to_string(&__p, (unsigned int *)&valuePtr, v16);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v18 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v18 = __p.__r_.__value_.__l.__size_;
  v19 = CFStringCreateWithBytes(0, (const UInt8 *)p_p, v18, 0x8000100u, 0);
  if (!v19)
  {
    v23 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v23, "Could not construct");
    __cxa_throw(v23, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v25 = 0;
  theDict.__r_.__value_.__r.__words[0] = *a5;
  *(_OWORD *)&theDict.__r_.__value_.__r.__words[1] = 0uLL;
  v26 = (void (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<std::tuple<unsigned int,unsigned int>>::dispatch;
  AMCP::make_description_from_thing((AMCP *)&v27, (const AMCP::Thing *)&theDict);
  v20 = v27;
  mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::TypeRef>(MutableCopy, v19, v27);
  if (v20)
    CFRelease(v20);
  if (v26)
    v26(0, (uint64_t)&theDict, 0, 0);
  CFRelease(v19);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  mcp_applesauce::CF::Dictionary_Builder::copy_dictionary(a7, MutableCopy);
  if (MutableCopy)
    CFRelease(MutableCopy);
}

void sub_1B5C99B94(void *a1)
{
  __clang_call_terminate(a1);
}

void AMCP::Null_Object_Description::create_control(AMCP::Null_Object_Description *this, int a2, int a3, int a4, int a5)
{
  __CFDictionary *Mutable;
  int16x8_t v11;
  std::string *p_p;
  CFIndex size;
  CFStringRef v14;
  CFNumberRef v15;
  int16x8_t v16;
  std::string *v17;
  CFIndex v18;
  CFStringRef v19;
  CFNumberRef v20;
  int16x8_t v21;
  std::string *v22;
  CFIndex v23;
  CFStringRef v24;
  CFNumberRef v25;
  int16x8_t v26;
  std::string *v27;
  CFIndex v28;
  CFStringRef v29;
  const void **v30;
  const void *v31;
  std::runtime_error *exception;
  std::runtime_error *v33;
  std::runtime_error *v34;
  std::runtime_error *v35;
  std::runtime_error *v36;
  std::runtime_error *v37;
  std::runtime_error *v38;
  uint64_t v39;
  int v40;
  std::string __p;
  int valuePtr;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
  v11.i64[0] = 0x676C6F62636C6173;
  v39 = 0x676C6F62636C6173;
  v40 = 0;
  AMCP::Address::to_string(&__p, (unsigned int *)&v39, v11);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v14 = CFStringCreateWithBytes(0, (const UInt8 *)p_p, size, 0x8000100u, 0);
  if (!v14)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  valuePtr = a2;
  v15 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v15)
  {
    v33 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v33, "Could not construct");
    __cxa_throw(v33, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(Mutable, v14, v15);
  CFRelease(v15);
  CFRelease(v14);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v16.i64[0] = 0x676C6F6263736370;
  v39 = 0x676C6F6263736370;
  v40 = 0;
  AMCP::Address::to_string(&__p, (unsigned int *)&v39, v16);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = &__p;
  else
    v17 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v18 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v18 = __p.__r_.__value_.__l.__size_;
  v19 = CFStringCreateWithBytes(0, (const UInt8 *)v17, v18, 0x8000100u, 0);
  if (!v19)
  {
    v34 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v34, "Could not construct");
    __cxa_throw(v34, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  valuePtr = a3;
  v20 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v20)
  {
    v35 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v35, "Could not construct");
    __cxa_throw(v35, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(Mutable, v19, v20);
  CFRelease(v20);
  CFRelease(v19);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v21.i64[0] = 0x676C6F6263656C6DLL;
  v39 = 0x676C6F6263656C6DLL;
  v40 = 0;
  AMCP::Address::to_string(&__p, (unsigned int *)&v39, v21);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = &__p;
  else
    v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v23 = __p.__r_.__value_.__l.__size_;
  v24 = CFStringCreateWithBytes(0, (const UInt8 *)v22, v23, 0x8000100u, 0);
  if (!v24)
  {
    v36 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v36, "Could not construct");
    __cxa_throw(v36, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  valuePtr = a4;
  v25 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v25)
  {
    v37 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v37, "Could not construct");
    __cxa_throw(v37, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(Mutable, v24, v25);
  CFRelease(v25);
  CFRelease(v24);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v26.i64[0] = 0x676C6F626372646FLL;
  v39 = 0x676C6F626372646FLL;
  v40 = 0;
  AMCP::Address::to_string(&__p, (unsigned int *)&v39, v26);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v27 = &__p;
  else
    v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v28 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v28 = __p.__r_.__value_.__l.__size_;
  v29 = CFStringCreateWithBytes(0, (const UInt8 *)v27, v28, 0x8000100u, 0);
  if (!v29)
  {
    v38 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v38, "Could not construct");
    __cxa_throw(v38, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v30 = (const void **)MEMORY[0x1E0C9AE58];
  if (!a5)
    v30 = (const void **)MEMORY[0x1E0C9AE48];
  v31 = *v30;
  mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::BooleanRef>(Mutable, v29, *v30);
  if (v31)
    CFRelease(v31);
  CFRelease(v29);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  mcp_applesauce::CF::Dictionary_Builder::copy_dictionary(this, Mutable);
  if (Mutable)
    CFRelease(Mutable);
}

void sub_1B5C9A054(void *a1)
{
  __clang_call_terminate(a1);
}

void AMCP::Null_Object_Description::create_level_control(int a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, double *a5@<X4>, applesauce::CF::DictionaryRef *a6@<X8>, float a7@<S0>)
{
  __CFDictionary *MutableCopy;
  int16x8_t v11;
  std::string *p_theDict;
  CFIndex size;
  CFStringRef v14;
  float v15;
  float v16;
  CFNumberRef v17;
  int16x8_t v18;
  std::string *v19;
  CFIndex v20;
  CFStringRef v21;
  CFNumberRef v22;
  int16x8_t v23;
  std::string *p_p;
  CFIndex v25;
  CFStringRef v26;
  const void *v27;
  std::runtime_error *exception;
  std::runtime_error *v29;
  std::runtime_error *v30;
  std::runtime_error *v31;
  std::runtime_error *v32;
  std::string theDict;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, uint64_t, uint64_t *);
  const void *v36;
  uint64_t valuePtr;
  int v38;
  std::string __p;

  AMCP::Null_Object_Description::create_control((AMCP::Null_Object_Description *)&theDict, a1, a2, a3, a4);
  MutableCopy = CFDictionaryCreateMutableCopy(0, 0, (CFDictionaryRef)theDict.__r_.__value_.__l.__data_);
  if (theDict.__r_.__value_.__r.__words[0])
    CFRelease(theDict.__r_.__value_.__l.__data_);
  v11.i64[0] = 0x676C6F626C637376;
  __p.__r_.__value_.__r.__words[0] = 0x676C6F626C637376;
  LODWORD(__p.__r_.__value_.__r.__words[1]) = 0;
  AMCP::Address::to_string(&theDict, (unsigned int *)&__p, v11);
  if ((theDict.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_theDict = &theDict;
  else
    p_theDict = (std::string *)theDict.__r_.__value_.__r.__words[0];
  if ((theDict.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(theDict.__r_.__value_.__r.__words[2]);
  else
    size = theDict.__r_.__value_.__l.__size_;
  v14 = CFStringCreateWithBytes(0, (const UInt8 *)p_theDict, size, 0x8000100u, 0);
  if (!v14)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v15 = a7 - *a5;
  v16 = a5[1] - *a5;
  *(float *)&valuePtr = v15 / v16;
  v17 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  if (!v17)
  {
    v29 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v29, "Could not construct");
    __cxa_throw(v29, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(MutableCopy, v14, v17);
  CFRelease(v17);
  CFRelease(v14);
  if (SHIBYTE(theDict.__r_.__value_.__r.__words[2]) < 0)
    operator delete(theDict.__r_.__value_.__l.__data_);
  v18.i64[0] = 0x676C6F626C636476;
  __p.__r_.__value_.__r.__words[0] = 0x676C6F626C636476;
  LODWORD(__p.__r_.__value_.__r.__words[1]) = 0;
  AMCP::Address::to_string(&theDict, (unsigned int *)&__p, v18);
  if ((theDict.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19 = &theDict;
  else
    v19 = (std::string *)theDict.__r_.__value_.__r.__words[0];
  if ((theDict.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v20 = HIBYTE(theDict.__r_.__value_.__r.__words[2]);
  else
    v20 = theDict.__r_.__value_.__l.__size_;
  v21 = CFStringCreateWithBytes(0, (const UInt8 *)v19, v20, 0x8000100u, 0);
  if (!v21)
  {
    v30 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v30, "Could not construct");
    __cxa_throw(v30, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  *(float *)&valuePtr = a7;
  v22 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  if (!v22)
  {
    v31 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v31, "Could not construct");
    __cxa_throw(v31, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(MutableCopy, v21, v22);
  CFRelease(v22);
  CFRelease(v21);
  if (SHIBYTE(theDict.__r_.__value_.__r.__words[2]) < 0)
    operator delete(theDict.__r_.__value_.__l.__data_);
  v23.i64[0] = 0x676C6F626C636472;
  valuePtr = 0x676C6F626C636472;
  v38 = 0;
  AMCP::Address::to_string(&__p, (unsigned int *)&valuePtr, v23);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v25 = __p.__r_.__value_.__l.__size_;
  v26 = CFStringCreateWithBytes(0, (const UInt8 *)p_p, v25, 0x8000100u, 0);
  if (!v26)
  {
    v32 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v32, "Could not construct");
    __cxa_throw(v32, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  theDict.__r_.__value_.__r.__words[2] = 0;
  v34 = 0;
  *(_OWORD *)&theDict.__r_.__value_.__l.__data_ = *(_OWORD *)a5;
  v35 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<CA::ValueRange>::dispatch;
  AMCP::make_description_from_thing((AMCP *)&v36, (const AMCP::Thing *)&theDict);
  v27 = v36;
  mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::TypeRef>(MutableCopy, v26, v36);
  if (v27)
    CFRelease(v27);
  if (v35)
    v35(0, (uint64_t)&theDict, 0, 0);
  CFRelease(v26);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  mcp_applesauce::CF::Dictionary_Builder::copy_dictionary(a6, MutableCopy);
  if (MutableCopy)
    CFRelease(MutableCopy);
}

void sub_1B5C9A488(void *a1)
{
  __clang_call_terminate(a1);
}

void AMCP::Null_Object_Description::create_BOOLean_control(AMCP::Null_Object_Description *this@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, applesauce::CF::DictionaryRef *a6@<X8>)
{
  __CFDictionary *MutableCopy;
  int16x8_t v9;
  std::string *p_theDict;
  CFIndex size;
  CFStringRef v12;
  const void **v13;
  const void *v14;
  std::runtime_error *exception;
  uint64_t v16;
  int v17;
  std::string theDict;

  AMCP::Null_Object_Description::create_control((AMCP::Null_Object_Description *)&theDict, (int)this, a2, a3, a4);
  MutableCopy = CFDictionaryCreateMutableCopy(0, 0, (CFDictionaryRef)theDict.__r_.__value_.__l.__data_);
  if (theDict.__r_.__value_.__r.__words[0])
    CFRelease(theDict.__r_.__value_.__l.__data_);
  v9.i64[0] = 0x676C6F626263766CLL;
  v16 = 0x676C6F626263766CLL;
  v17 = 0;
  AMCP::Address::to_string(&theDict, (unsigned int *)&v16, v9);
  if ((theDict.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_theDict = &theDict;
  else
    p_theDict = (std::string *)theDict.__r_.__value_.__r.__words[0];
  if ((theDict.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(theDict.__r_.__value_.__r.__words[2]);
  else
    size = theDict.__r_.__value_.__l.__size_;
  v12 = CFStringCreateWithBytes(0, (const UInt8 *)p_theDict, size, 0x8000100u, 0);
  if (!v12)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v13 = (const void **)MEMORY[0x1E0C9AE58];
  if (!a5)
    v13 = (const void **)MEMORY[0x1E0C9AE48];
  v14 = *v13;
  mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::BooleanRef>(MutableCopy, v12, *v13);
  if (v14)
    CFRelease(v14);
  CFRelease(v12);
  if (SHIBYTE(theDict.__r_.__value_.__r.__words[2]) < 0)
    operator delete(theDict.__r_.__value_.__l.__data_);
  mcp_applesauce::CF::Dictionary_Builder::copy_dictionary(a6, MutableCopy);
  if (MutableCopy)
    CFRelease(MutableCopy);
}

void sub_1B5C9A644(void *a1)
{
  __clang_call_terminate(a1);
}

void AMCP::Null_Object_Description::create_selector_control(int a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, uint64_t *a5@<X4>, int a6@<W5>, applesauce::CF::DictionaryRef *a7@<X8>)
{
  __CFDictionary *MutableCopy;
  int16x8_t v11;
  std::string *p_p;
  CFIndex size;
  CFStringRef v14;
  CFNumberRef v15;
  CFArrayRef CFArray;
  int16x8_t v17;
  CFDictionaryRef *v18;
  CFIndex v19;
  CFStringRef v20;
  const void *v21;
  int16x8_t v22;
  std::string *v23;
  CFIndex v24;
  CFStringRef v25;
  const void *v26;
  std::runtime_error *exception;
  std::runtime_error *v28;
  std::runtime_error *v29;
  std::runtime_error *v30;
  CFDictionaryRef theDict[2];
  __int128 v32;
  void (*v33)(int, uint64_t *, uint64_t, uint64_t *);
  const void *v34;
  uint64_t v35;
  int v36;
  std::string __p;

  AMCP::Null_Object_Description::create_control((AMCP::Null_Object_Description *)theDict, a1, a2, a3, a4);
  MutableCopy = CFDictionaryCreateMutableCopy(0, 0, theDict[0]);
  if (theDict[0])
    CFRelease(theDict[0]);
  v11.i64[0] = 0x676C6F6273636369;
  v35 = 0x676C6F6273636369;
  v36 = 0;
  AMCP::Address::to_string(&__p, (unsigned int *)&v35, v11);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v14 = CFStringCreateWithBytes(0, (const UInt8 *)p_p, size, 0x8000100u, 0);
  if (!v14)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  LODWORD(theDict[0]) = a6;
  v15 = CFNumberCreate(0, kCFNumberIntType, theDict);
  if (!v15)
  {
    v28 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v28, "Could not construct");
    __cxa_throw(v28, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  std::vector<void const*>::vector(theDict, 1uLL);
  *(_QWORD *)theDict[0] = v15;
  CFArray = applesauce::CF::details::make_CFArrayRef<void const*>((const void **)theDict[0], (uint64_t)theDict[1]);
  if (theDict[0])
  {
    theDict[1] = theDict[0];
    operator delete(theDict[0]);
  }
  mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::ArrayRef>(MutableCopy, v14, CFArray);
  if (CFArray)
    CFRelease(CFArray);
  CFRelease(v15);
  CFRelease(v14);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v17.i64[0] = 0x676C6F627363636DLL;
  __p.__r_.__value_.__r.__words[0] = 0x676C6F627363636DLL;
  LODWORD(__p.__r_.__value_.__r.__words[1]) = 0;
  AMCP::Address::to_string((std::string *)theDict, (unsigned int *)&__p, v17);
  if ((SBYTE7(v32) & 0x80u) == 0)
    v18 = theDict;
  else
    v18 = (CFDictionaryRef *)theDict[0];
  if ((SBYTE7(v32) & 0x80u) == 0)
    v19 = BYTE7(v32);
  else
    v19 = (CFIndex)theDict[1];
  v20 = CFStringCreateWithBytes(0, (const UInt8 *)v18, v19, 0x8000100u, 0);
  if (!v20)
  {
    v29 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v29, "Could not construct");
    __cxa_throw(v29, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v21 = (const void *)*MEMORY[0x1E0C9AE48];
  mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::BooleanRef>(MutableCopy, v20, (const void *)*MEMORY[0x1E0C9AE48]);
  if (v21)
    CFRelease(v21);
  CFRelease(v20);
  if (SBYTE7(v32) < 0)
    operator delete(theDict[0]);
  v22.i64[0] = 0x676C6F6273636169;
  v35 = 0x676C6F6273636169;
  v36 = 0;
  AMCP::Address::to_string(&__p, (unsigned int *)&v35, v22);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = &__p;
  else
    v23 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v24 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v24 = __p.__r_.__value_.__l.__size_;
  v25 = CFStringCreateWithBytes(0, (const UInt8 *)v23, v24, 0x8000100u, 0);
  if (!v25)
  {
    v30 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v30, "Could not construct");
    __cxa_throw(v30, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v33 = 0;
  *(_OWORD *)theDict = 0u;
  v32 = 0u;
  std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__init_with_size[abi:ne180100]<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>*,std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>*>(theDict, *a5, a5[1], (a5[1] - *a5) >> 4);
  v33 = (void (*)(int, uint64_t *, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>::dispatch;
  AMCP::make_description_from_thing((AMCP *)&v34, (const AMCP::Thing *)theDict);
  v26 = v34;
  mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::TypeRef>(MutableCopy, v25, v34);
  if (v26)
    CFRelease(v26);
  if (v33)
    v33(0, (uint64_t *)theDict, 0, 0);
  CFRelease(v25);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  mcp_applesauce::CF::Dictionary_Builder::copy_dictionary(a7, MutableCopy);
  if (MutableCopy)
    CFRelease(MutableCopy);
}

void sub_1B5C9AA20(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  __clang_call_terminate(a1);
}

void AMCP::Null_Object_Description::create_multi_selector_control(int a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, applesauce::CF::DictionaryRef *a7@<X8>)
{
  __CFDictionary *MutableCopy;
  int16x8_t v11;
  std::string *p_p;
  CFIndex size;
  CFStringRef v14;
  const void *v15;
  int16x8_t v16;
  CFDictionaryRef *v17;
  CFIndex v18;
  CFStringRef v19;
  const void *v20;
  int16x8_t v21;
  std::string *v22;
  CFIndex v23;
  CFStringRef v24;
  const void *v25;
  std::runtime_error *exception;
  std::runtime_error *v27;
  std::runtime_error *v28;
  CFDictionaryRef theDict[2];
  __int128 v30;
  void (*v31)(uint64_t, uint64_t, uint64_t, uint64_t *);
  const void *v32;
  uint64_t v33;
  int v34;
  std::string __p;

  AMCP::Null_Object_Description::create_control((AMCP::Null_Object_Description *)theDict, a1, a2, a3, a4);
  MutableCopy = CFDictionaryCreateMutableCopy(0, 0, theDict[0]);
  if (theDict[0])
    CFRelease(theDict[0]);
  v11.i64[0] = 0x676C6F6273636369;
  v33 = 0x676C6F6273636369;
  v34 = 0;
  AMCP::Address::to_string(&__p, (unsigned int *)&v33, v11);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v14 = CFStringCreateWithBytes(0, (const UInt8 *)p_p, size, 0x8000100u, 0);
  if (!v14)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v31 = 0;
  *(_OWORD *)theDict = 0u;
  v30 = 0u;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(theDict, *(const void **)a6, *(_QWORD *)(a6 + 8), (uint64_t)(*(_QWORD *)(a6 + 8) - *(_QWORD *)a6) >> 2);
  v31 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<std::vector<unsigned int>>::dispatch;
  AMCP::make_description_from_thing((AMCP *)&v32, (const AMCP::Thing *)theDict);
  v15 = v32;
  mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::TypeRef>(MutableCopy, v14, v32);
  if (v15)
    CFRelease(v15);
  if (v31)
    v31(0, (uint64_t)theDict, 0, 0);
  CFRelease(v14);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v16.i64[0] = 0x676C6F627363636DLL;
  __p.__r_.__value_.__r.__words[0] = 0x676C6F627363636DLL;
  LODWORD(__p.__r_.__value_.__r.__words[1]) = 0;
  AMCP::Address::to_string((std::string *)theDict, (unsigned int *)&__p, v16);
  if ((SBYTE7(v30) & 0x80u) == 0)
    v17 = theDict;
  else
    v17 = (CFDictionaryRef *)theDict[0];
  if ((SBYTE7(v30) & 0x80u) == 0)
    v18 = BYTE7(v30);
  else
    v18 = (CFIndex)theDict[1];
  v19 = CFStringCreateWithBytes(0, (const UInt8 *)v17, v18, 0x8000100u, 0);
  if (!v19)
  {
    v27 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v27, "Could not construct");
    __cxa_throw(v27, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v20 = (const void *)*MEMORY[0x1E0C9AE58];
  mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::BooleanRef>(MutableCopy, v19, (const void *)*MEMORY[0x1E0C9AE58]);
  if (v20)
    CFRelease(v20);
  CFRelease(v19);
  if (SBYTE7(v30) < 0)
    operator delete(theDict[0]);
  v21.i64[0] = 0x676C6F6273636169;
  v33 = 0x676C6F6273636169;
  v34 = 0;
  AMCP::Address::to_string(&__p, (unsigned int *)&v33, v21);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = &__p;
  else
    v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v23 = __p.__r_.__value_.__l.__size_;
  v24 = CFStringCreateWithBytes(0, (const UInt8 *)v22, v23, 0x8000100u, 0);
  if (!v24)
  {
    v28 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v28, "Could not construct");
    __cxa_throw(v28, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v31 = 0;
  *(_OWORD *)theDict = 0u;
  v30 = 0u;
  std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__init_with_size[abi:ne180100]<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>*,std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>*>(theDict, *a5, a5[1], (a5[1] - *a5) >> 4);
  v31 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>::dispatch;
  AMCP::make_description_from_thing((AMCP *)&v32, (const AMCP::Thing *)theDict);
  v25 = v32;
  mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::TypeRef>(MutableCopy, v24, v32);
  if (v25)
    CFRelease(v25);
  if (v31)
    v31(0, (uint64_t)theDict, 0, 0);
  CFRelease(v24);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  mcp_applesauce::CF::Dictionary_Builder::copy_dictionary(a7, MutableCopy);
  if (MutableCopy)
    CFRelease(MutableCopy);
}

void sub_1B5C9AE14(void *a1)
{
  __clang_call_terminate(a1);
}

void AMCP::Null_Object_Description::create_stereo_pan_control(int a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, std::string::size_type *a5@<X4>, applesauce::CF::DictionaryRef *a6@<X8>, float a7@<S0>)
{
  __CFDictionary *MutableCopy;
  int16x8_t v11;
  std::string *p_theDict;
  CFIndex size;
  CFStringRef v14;
  CFNumberRef v15;
  int16x8_t v16;
  std::string *p_p;
  CFIndex v18;
  CFStringRef v19;
  const void *v20;
  std::runtime_error *exception;
  std::runtime_error *v22;
  std::runtime_error *v23;
  std::string theDict;
  uint64_t v25;
  void (*v26)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  const void *v27;
  uint64_t valuePtr;
  int v29;
  std::string __p;

  AMCP::Null_Object_Description::create_control((AMCP::Null_Object_Description *)&theDict, a1, a2, a3, a4);
  MutableCopy = CFDictionaryCreateMutableCopy(0, 0, (CFDictionaryRef)theDict.__r_.__value_.__l.__data_);
  if (theDict.__r_.__value_.__r.__words[0])
    CFRelease(theDict.__r_.__value_.__l.__data_);
  v11.i64[0] = 0x676C6F6273706376;
  __p.__r_.__value_.__r.__words[0] = 0x676C6F6273706376;
  LODWORD(__p.__r_.__value_.__r.__words[1]) = 0;
  AMCP::Address::to_string(&theDict, (unsigned int *)&__p, v11);
  if ((theDict.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_theDict = &theDict;
  else
    p_theDict = (std::string *)theDict.__r_.__value_.__r.__words[0];
  if ((theDict.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(theDict.__r_.__value_.__r.__words[2]);
  else
    size = theDict.__r_.__value_.__l.__size_;
  v14 = CFStringCreateWithBytes(0, (const UInt8 *)p_theDict, size, 0x8000100u, 0);
  if (!v14)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  *(float *)&valuePtr = a7;
  v15 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  if (!v15)
  {
    v22 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v22, "Could not construct");
    __cxa_throw(v22, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(MutableCopy, v14, v15);
  CFRelease(v15);
  CFRelease(v14);
  if (SHIBYTE(theDict.__r_.__value_.__r.__words[2]) < 0)
    operator delete(theDict.__r_.__value_.__l.__data_);
  v16.i64[0] = 0x676C6F6273706363;
  valuePtr = 0x676C6F6273706363;
  v29 = 0;
  AMCP::Address::to_string(&__p, (unsigned int *)&valuePtr, v16);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v18 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v18 = __p.__r_.__value_.__l.__size_;
  v19 = CFStringCreateWithBytes(0, (const UInt8 *)p_p, v18, 0x8000100u, 0);
  if (!v19)
  {
    v23 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v23, "Could not construct");
    __cxa_throw(v23, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v25 = 0;
  theDict.__r_.__value_.__r.__words[0] = *a5;
  *(_OWORD *)&theDict.__r_.__value_.__r.__words[1] = 0uLL;
  v26 = (void (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<std::tuple<unsigned int,unsigned int>>::dispatch;
  AMCP::make_description_from_thing((AMCP *)&v27, (const AMCP::Thing *)&theDict);
  v20 = v27;
  mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::TypeRef>(MutableCopy, v19, v27);
  if (v20)
    CFRelease(v20);
  if (v26)
    v26(0, (uint64_t)&theDict, 0, 0);
  CFRelease(v19);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  mcp_applesauce::CF::Dictionary_Builder::copy_dictionary(a6, MutableCopy);
  if (MutableCopy)
    CFRelease(MutableCopy);
}

void sub_1B5C9B108(void *a1)
{
  __clang_call_terminate(a1);
}

void AMCP::Null_Object_Description::attach_control_list(CFDictionaryRef *this@<X0>, const void **a2@<X1>, applesauce::CF::DictionaryRef *a3@<X8>)
{
  __CFDictionary *MutableCopy;
  int16x8_t v7;
  std::string *p_p;
  CFIndex size;
  CFStringRef v10;
  std::runtime_error *exception;
  uint64_t v12;
  int v13;
  std::string __p;

  MutableCopy = CFDictionaryCreateMutableCopy(0, 0, *this);
  v7.i64[0] = 0x676C6F626374726CLL;
  v12 = 0x676C6F626374726CLL;
  v13 = 0;
  AMCP::Address::to_string(&__p, (unsigned int *)&v12, v7);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v10 = CFStringCreateWithBytes(0, (const UInt8 *)p_p, size, 0x8000100u, 0);
  if (!v10)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::ArrayRef>(MutableCopy, v10, *a2);
  CFRelease(v10);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  mcp_applesauce::CF::Dictionary_Builder::copy_dictionary(a3, MutableCopy);
  if (MutableCopy)
    CFRelease(MutableCopy);
}

void sub_1B5C9B260(void *a1)
{
  __clang_call_terminate(a1);
}

double AMCP::get_property_traits@<D0>(AMCP *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int v2;
  uint64_t *v4;
  uint64_t *v5;
  double result;

  v2 = this;
  AMCP::local_get_property_traits_list(this);
  v4 = std::__hash_table<std::__hash_value_type<unsigned int,AMCP::Live_Property_Traits>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,AMCP::Live_Property_Traits>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,AMCP::Live_Property_Traits>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,AMCP::Live_Property_Traits>>>::find<unsigned int>(v2);
  if (v4)
  {
    v5 = v4;
    *(_DWORD *)a2 = *((_DWORD *)v4 + 6);
    *(_DWORD *)(a2 + 3) = *(_DWORD *)((char *)v4 + 27);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)(a2 + 8), (const void *)v5[4], v5[5], (v5[5] - v5[4]) >> 2);
    *(_QWORD *)(a2 + 32) = v5[7];
    *(_DWORD *)(a2 + 40) = *((_DWORD *)v5 + 16);
  }
  else
  {
    *(_DWORD *)a2 = v2;
    *(_WORD *)(a2 + 4) = 0;
    *(_BYTE *)(a2 + 6) = 0;
    result = 0.0;
    *(_OWORD *)(a2 + 8) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_DWORD *)(a2 + 40) = 0;
  }
  return result;
}

void AMCP::local_get_property_traits_list(AMCP *this)
{
  unsigned __int8 v1;
  unint64_t v2;
  char v3;
  char **v4;
  char *v5;

  if ((v1 & 1) == 0
  {
    AMCP::local_get_property_traits_list(void)::s_indesctructible_property_traits_list = 0u;
    *(_OWORD *)&qword_1EF131230 = 0u;
    dword_1EF131240 = 1065353216;
  }
  v2 = atomic_load(&AMCP::local_get_property_traits_list(void)::once);
  if (v2 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&AMCP::local_get_property_traits_list(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::local_get_property_traits_list(void)::$_0 &&>>);
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,AMCP::Live_Property_Traits>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,AMCP::Live_Property_Traits>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,AMCP::Live_Property_Traits>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,AMCP::Live_Property_Traits>>>::find<unsigned int>(unsigned int a1)
{
  uint8x8_t v1;
  unint64_t v2;
  uint64_t *i;
  unint64_t v4;

  if (!*((_QWORD *)&AMCP::local_get_property_traits_list(void)::s_indesctructible_property_traits_list + 1))
    return 0;
  v1 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&AMCP::local_get_property_traits_list(void)::s_indesctructible_property_traits_list
                                      + 8));
  v1.i16[0] = vaddlv_u8(v1);
  if (v1.u32[0] > 1uLL)
  {
    v2 = a1;
    if (*((_QWORD *)&AMCP::local_get_property_traits_list(void)::s_indesctructible_property_traits_list + 1) <= (unint64_t)a1)
      v2 = (unint64_t)a1
         % *((_QWORD *)&AMCP::local_get_property_traits_list(void)::s_indesctructible_property_traits_list + 1);
  }
  else
  {
    v2 = (DWORD2(AMCP::local_get_property_traits_list(void)::s_indesctructible_property_traits_list) - 1) & a1;
  }
  i = *(uint64_t **)(AMCP::local_get_property_traits_list(void)::s_indesctructible_property_traits_list + 8 * v2);
  if (i)
  {
    for (i = (uint64_t *)*i; i; i = (uint64_t *)*i)
    {
      v4 = i[1];
      if (v4 == a1)
      {
        if (*((_DWORD *)i + 4) == a1)
          return i;
      }
      else
      {
        if (v1.u32[0] > 1uLL)
        {
          if (v4 >= *((_QWORD *)&AMCP::local_get_property_traits_list(void)::s_indesctructible_property_traits_list + 1))
            v4 %= *((_QWORD *)&AMCP::local_get_property_traits_list(void)::s_indesctructible_property_traits_list + 1);
        }
        else
        {
          v4 &= *((_QWORD *)&AMCP::local_get_property_traits_list(void)::s_indesctructible_property_traits_list + 1)
              - 1;
        }
        if (v4 != v2)
          return 0;
      }
    }
  }
  return i;
}

void AMCP::local_get_property_traits_list(void)::$_0::operator()()
{
  int v0;
  void *__p;
  void *v2;

  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1768189556, 1, 1, 0, &AMCP::Property_Traits<1768189556u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1650682995u>::k_valid_scopes, 0, 0, 15);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x69646E74u, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1650682995, 1, 1, 0, &AMCP::Property_Traits<1650682995u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668047219u>::k_valid_scopes, 0, 0, 6);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x62636C73u, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1668047219, 1, 1, 0, &AMCP::Property_Traits<1668047219u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1870098034u>::k_valid_scopes, 0, 0, 6);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x636C6173u, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1870098034, 1, 1, 0, &AMCP::Property_Traits<1870098034u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1869638759u>::k_valid_scopes, 0, 0, 15);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x6F776E72u, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1869638759, 1, 1, 0, &AMCP::Property_Traits<1869638759u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1870097955u>::k_valid_scopes, 0, 1869638759, 4);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x6F706C67u, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1870097955, 1, 0, 0, &AMCP::Property_Traits<1870097955u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819173229u>::k_valid_scopes, 0, 1870098020, 14);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x6F776E23u, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1819173229, 0, 0, 1, &AMCP::Property_Traits<1819173229u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819111268u>::k_valid_scopes, 0, 1819173229, 4);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x6C6E616Du, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1819111268, 0, 0, 0, &AMCP::Property_Traits<1819111268u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819107691u>::k_valid_scopes, 0, 1819111268, 4);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x6C6D6F64u, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1819107691, 0, 0, 0, &AMCP::Property_Traits<1819107691u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1768124270u>::k_valid_scopes, 0, 1819107691, 4);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x6C6D616Bu, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1768124270, 0, 0, 0, &AMCP::Property_Traits<1768124270u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1667330160u>::k_valid_scopes, 0, 1768124270, 5);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x69636F6Eu, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1667330160, 0, 0, 0, &AMCP::Property_Traits<1667330160u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1936618861u>::k_valid_scopes, 0, 1667330160, 4);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x63617070u, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1936618861, 0, 0, 0, &AMCP::Property_Traits<1936618861u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1719105134u>::k_valid_scopes, 0, 1936618861, 4);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x736E756Du, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1719105134, 0, 0, 0, &AMCP::Property_Traits<1719105134u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818454126u>::k_valid_scopes, 0, 1719105134, 4);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x6677766Eu, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1818454126, 0, 0, 0, AMCP::Property_Traits<1818454126u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818452846u>::k_valid_scopes, -1, 1818454126, 4);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x6C63686Eu, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1818452846, 0, 0, 0, AMCP::Property_Traits<1818452846u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818455662u>::k_valid_scopes, -1, 1818452846, 4);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x6C63636Eu, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1818455662, 0, 0, 0, AMCP::Property_Traits<1818455662u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1920168547u>::k_valid_scopes, -1, 1818455662, 4);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x6C636E6Eu, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1920168547, 0, 0, 0, &AMCP::Property_Traits<1920168547u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668575852u>::k_valid_scopes, 0, 0, 5);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x72737263u, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1668575852, 0, 0, 0, &AMCP::Property_Traits<1668575852u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1885956452u>::k_valid_scopes, 0, 1668575852, 14);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x6374726Cu, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1886152483, 1, 0, 0, &AMCP::Property_Traits<1886152483u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668577315u>::k_valid_scopes, 0, 1886152483, 14);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x706C6723u, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1651472419, 1, 0, 0, &AMCP::Property_Traits<1651472419u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668049699u>::k_valid_scopes, 0, 1651472419, 14);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x626F7823u, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1668049699, 1, 0, 0, &AMCP::Property_Traits<1668049699u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1684370979u>::k_valid_scopes, 0, 1668049699, 14);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x636C6B23u, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1684370979, 1, 0, 0, &AMCP::Property_Traits<1684370979u>::k_valid_scopes, (uint64_t)"N14mcp_applesauce2CF15PropertyListRefE", 0, 1684370979, 14);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x64657623u, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1668577315, 1, 0, 0, &AMCP::Property_Traits<1668577315u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1852793891u>::k_valid_scopes, 0, 0, 14);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x63747823u, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1852793891, 1, 0, 0, &AMCP::Property_Traits<1852793891u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1651861860u>::k_valid_scopes, 0, 0, 14);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x6E6F6423u, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1885956452, 1, 1, 0, &AMCP::Property_Traits<1885956452u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1651472419u>::k_valid_scopes, 0, 1885956452, 4);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x70696964u, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1651861860, 1, 1, 0, &AMCP::Property_Traits<1651861860u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1953653102u>::k_valid_scopes, 0, 1651861860, 4);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x62756964u, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1953653102, 1, 0, 0, &AMCP::Property_Traits<1953653102u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1651007861u>::k_valid_scopes, 0, 1953653102, 23);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x7472616Eu, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1651007861, 1, 0, 0, &AMCP::Property_Traits<1651007861u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1651013225u>::k_valid_scopes, 0, 1651007861, 2);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x62686175u, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1651013225, 1, 0, 0, &AMCP::Property_Traits<1651013225u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1651010921u>::k_valid_scopes, 0, 1651013225, 2);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x62687669u, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1651010921, 1, 0, 0, &AMCP::Property_Traits<1651010921u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1651536495u>::k_valid_scopes, 0, 1651010921, 2);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x62686D69u, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1651536495, 1, 0, 0, &AMCP::Property_Traits<1651536495u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1652060014u>::k_valid_scopes, 0, 1651536495, 2);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x6270726Fu, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1652060014, 1, 0, 1, &AMCP::Property_Traits<1652060014u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1652060006u>::k_valid_scopes, 0, 1652060014, 2);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x62786F6Eu, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1652060006, 1, 0, 0, &AMCP::Property_Traits<1652060006u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1650751011u>::k_valid_scopes, 0, 1652060006, 24);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x62786F66u, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1650751011, 1, 0, 0, &AMCP::Property_Traits<1650751011u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1650682915u>::k_valid_scopes, 0, 0, 14);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x62647623u, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1650682915, 1, 0, 0, &AMCP::Property_Traits<1650682915u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1969841184u>::k_valid_scopes, 0, 0, 14);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x62636C23u, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1969841184, 1, 1, 0, &AMCP::Property_Traits<1969841184u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1836411236u>::k_valid_scopes, 0, 1668639076, 4);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x75696420u, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1836411236, 0, 0, 0, &AMCP::Property_Traits<1836411236u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1751737454u>::k_valid_scopes, 0, 1836411236, 4);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x6D756964u, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1751737454, 1, 0, 0, &AMCP::Property_Traits<1751737454u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668049764u>::k_valid_scopes, 0, 1751737454, 2);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x6869646Eu, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1668049764, 1, 0, 0, &AMCP::Property_Traits<1668049764u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1819569763u>::k_valid_scopes, 0, 1668049764, 7);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x636C6B64u, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1819569763, 1, 0, 0, AMCP::Property_Traits<1819569763u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1853059700u>::k_valid_scopes, 0, 1819569763, 24);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x6C746E63u, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1853059700, 1, 0, 1, &AMCP::Property_Traits<1853059700u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1853059619u>::k_valid_scopes, 0, 1853059700, 17);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x6E737274u, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1853059619, 1, 0, 0, &AMCP::Property_Traits<1853059619u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1935763060u>::k_valid_scopes, 0, 1853059619, 25);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x6E737223u, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1935763060, 1, 0, 0, AMCP::Property_Traits<1935763060u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1937009955u>::k_valid_scopes, 0, 1935763060, 24);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x73616674u, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1937009955, 1, 0, 0, &AMCP::Property_Traits<1937009955u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1685222501u>::k_valid_scopes, 0, 1937009955, 14);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x73746D23u, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1685222501, 0, 0, 0, &AMCP::Property_Traits<1685222501u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1936879204u>::k_valid_scopes, 0, 1685222501, 2);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x64727465u, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1936879204, 0, 0, 0, AMCP::Property_Traits<1936879204u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1684434036u>::k_valid_scopes, 0, 1936876644, 27);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x73726E64u, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1684434036, 1, 0, 0, &AMCP::Property_Traits<1684434036u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1936092276u>::k_valid_scopes, 0, 1684434036, 2);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x64666C74u, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1936092276, 1, 0, 0, &AMCP::Property_Traits<1936092276u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1684301171u>::k_valid_scopes, 0, 1936092276, 2);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x73666C74u, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1684301171, 0, 0, 0, &AMCP::Property_Traits<1684301171u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1667523955u>::k_valid_scopes, 0, 1684301171, 3);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x64646573u, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1667523955, 0, 0, 1, &AMCP::Property_Traits<1667523955u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1935960434u>::k_valid_scopes, 0, 1667523955, 3);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x63646573u, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1935960434, 1, 0, 0, &AMCP::Property_Traits<1935960434u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1935894638u>::k_valid_scopes, 0, 1935960434, 8);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x73646972u, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1935894638, 1, 0, 0, &AMCP::Property_Traits<1935894638u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1952542835u>::k_valid_scopes, 0, 1935894638, 24);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x7363686Eu, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1952542835, 1, 0, 0, &AMCP::Property_Traits<1952542835u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1952805485u>::k_valid_scopes, 0, 1952542835, 24);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x74617073u, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1952805485, 1, 0, 0, &AMCP::Property_Traits<1952805485u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1936487523u>::k_valid_scopes, 0, 1952805485, 22);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x7465726Du, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1936487523, 1, 0, 0, &AMCP::Property_Traits<1936487523u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1718444404u>::k_valid_scopes, 0, 1819569763, 12);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x736C7463u, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1718444404, 1, 0, 1, &AMCP::Property_Traits<1718444404u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1718449187u>::k_valid_scopes, 0, 1885762592, 11);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x666D6174u, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1718449187, 1, 0, 0, &AMCP::Property_Traits<1718449187u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1735554416u>::k_valid_scopes, 0, 1885762657, 1);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x666D7423u, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1735554416, 1, 0, 1, &AMCP::Property_Traits<1735554416u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1634169456u>::k_valid_scopes, 0, 1735554416, 3);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x67727570u, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1634169456, 1, 0, 0, &AMCP::Property_Traits<1634169456u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1633906541u>::k_valid_scopes, 0, 1634169456, 14);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x61677270u, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1633906541, 1, 0, 1, &AMCP::Property_Traits<1633906541u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1634562932u>::k_valid_scopes, 0, 1633906541, 3);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x61636F6Du, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1634562932, 1, 0, 1, &AMCP::Property_Traits<1634562932u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1634755428u>::k_valid_scopes, 0, 1634562932, 4);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x616D7374u, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1634755428, 1, 0, 1, &AMCP::Property_Traits<1634755428u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668445298u>::k_valid_scopes, 0, 1634755428, 4);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x61706364u, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1668445298, 1, 0, 0, &AMCP::Property_Traits<1668445298u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1886549620u>::k_valid_scopes, 0, 1668445298, 12);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x63727472u, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1886549620, 1, 0, 0, &AMCP::Property_Traits<1886549620u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668506480u>::k_valid_scopes, 0, 1886549620, 2);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x70727674u, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1668506480, 1, 0, 0, &AMCP::Property_Traits<1668506480u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1667591277u>::k_valid_scopes, 0, 1668506480, 18);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x63736370u, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1667591277, 1, 0, 0, &AMCP::Property_Traits<1667591277u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668441199u>::k_valid_scopes, 0, 1667591277, 9);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x63656C6Du, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1668441199, 1, 0, 0, &AMCP::Property_Traits<1668441199u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1935962742u>::k_valid_scopes, 0, 0, 2);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x6372646Fu, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1935962742, 1, 0, 1, &AMCP::Property_Traits<1935962742u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1935962738u>::k_valid_scopes, 0, 1935962742, 24);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x73647276u, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1935962738, 1, 0, 0, &AMCP::Property_Traits<1935962738u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1818456950u>::k_valid_scopes, 0, 1935962738, 13);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x73647272u, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1818456950, 1, 0, 1, &AMCP::Property_Traits<1818456950u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1818453110u>::k_valid_scopes, 0, 1818456950, 10);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x6C637376u, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1818453110, 1, 0, 1, &AMCP::Property_Traits<1818453110u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1818453106u>::k_valid_scopes, 0, 1818453110, 10);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x6C636476u, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1818453106, 1, 0, 0, &AMCP::Property_Traits<1818453106u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1650685548u>::k_valid_scopes, 0, 1818453106, 26);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x6C636472u, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1650685548, 1, 0, 1, &AMCP::Property_Traits<1650685548u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1935893353u>::k_valid_scopes, 0, 1650685548, 2);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x6263766Cu, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1935893353, 1, 0, 1, &AMCP::Property_Traits<1935893353u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1935893357u>::k_valid_scopes, 0, 1935893353, 20);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x73636369u, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1935893357, 1, 0, 0, &AMCP::Property_Traits<1935893357u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1935892841u>::k_valid_scopes, 0, 0, 2);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x7363636Du, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1935892841, 1, 0, 0, &AMCP::Property_Traits<1935892841u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1936745334u>::k_valid_scopes, 0, 0, 19);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x73636169u, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1936745334, 1, 0, 1, &AMCP::Property_Traits<1936745334u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1936745315u>::k_valid_scopes, 0, 1936745334, 10);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x73706376u, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1936745315, 1, 0, 0, &AMCP::Property_Traits<1936745315u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1853188452u>::k_valid_scopes, 0, 1936745315, 21);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x73706363u, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1853188452, 1, 0, 0, &AMCP::Property_Traits<1853188452u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1852073061u>::k_valid_scopes, 0, 0, 4);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x6E756964u, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1852073061, 1, 0, 0, &AMCP::Property_Traits<1852073061u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1852077168u>::k_valid_scopes, 0, 0, 0);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x6E646465u, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1852077168, 1, 0, 0, &AMCP::Property_Traits<1852077168u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1852072820u>::k_valid_scopes, 0, 0, 0);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x6E647470u, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1852072820, 1, 0, 0, &AMCP::Property_Traits<1852072820u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1852072812u>::k_valid_scopes, 0, 0, 2);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x6E646374u, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1852072812, 1, 0, 0, &AMCP::Property_Traits<1852072812u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1953657716u>::k_valid_scopes, 0, 0, 15);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x6E64636Cu, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1953657716, 1, 0, 0, &AMCP::Property_Traits<1953657716u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1718839674u>::k_valid_scopes, 0, 0, 0);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x74727374u, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1718839674, 1, 0, 1, &AMCP::Property_Traits<1718839674u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1718843939u>::k_valid_scopes, 0, 0, 24);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x6673697Au, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1718843939, 1, 0, 0, &AMCP::Property_Traits<1718843939u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1852012899u>::k_valid_scopes, 0, 0, 13);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x66737A23u, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1852012899, 1, 0, 1, &AMCP::Property_Traits<1852012899u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1634955892u>::k_valid_scopes, 0, 0, 10);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x6E637963u, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1634955892, 1, 0, 0, &AMCP::Property_Traits<1634955892u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<2003267184u>::k_valid_scopes, 0, 0, 17);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x61737274u, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 2003267184, 1, 0, 1, &AMCP::Property_Traits<2003267184u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1752130413u>::k_valid_scopes, 0, 0, 0);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x77676E70u, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1752130413, 0, 0, 1, &AMCP::Property_Traits<1752130413u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1952608870u>::k_valid_scopes, 0, 0, 2);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x686F636Du, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1952608870, 1, 0, 0, &AMCP::Property_Traits<1952608870u>::k_valid_scopes, (uint64_t)"N4AMCP12Clock_FilterE", 0, 0, 0);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x74627266u, &v0);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
}

void sub_1B5C9D400(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__n128 std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(unsigned int a1, int *a2)
{
  unint64_t v2;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  uint64_t **v8;
  uint64_t *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  __n128 result;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  int8x8_t prime;
  void *v19;
  void *v20;
  uint64_t v21;
  _QWORD **v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *i;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  int v31;
  void *v32;
  _QWORD *v33;
  uint64_t v34;
  void *v35;

  v5 = a1;
  v6 = *((_QWORD *)&AMCP::local_get_property_traits_list(void)::s_indesctructible_property_traits_list + 1);
  if (!*((_QWORD *)&AMCP::local_get_property_traits_list(void)::s_indesctructible_property_traits_list + 1))
    goto LABEL_18;
  v7 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&AMCP::local_get_property_traits_list(void)::s_indesctructible_property_traits_list
                                      + 8));
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    v2 = a1;
    if (*((_QWORD *)&AMCP::local_get_property_traits_list(void)::s_indesctructible_property_traits_list + 1) <= (unint64_t)a1)
      v2 = (unint64_t)a1
         % *((_QWORD *)&AMCP::local_get_property_traits_list(void)::s_indesctructible_property_traits_list + 1);
  }
  else
  {
    v2 = (DWORD2(AMCP::local_get_property_traits_list(void)::s_indesctructible_property_traits_list) - 1) & a1;
  }
  v8 = *(uint64_t ***)(AMCP::local_get_property_traits_list(void)::s_indesctructible_property_traits_list + 8 * v2);
  if (!v8 || (v9 = *v8) == 0)
  {
LABEL_18:
    v11 = (char *)operator new(0x48uLL);
    *(_QWORD *)v11 = 0;
    *((_QWORD *)v11 + 1) = v5;
    *((_DWORD *)v11 + 4) = a1;
    *((_DWORD *)v11 + 6) = *a2;
    *(_DWORD *)(v11 + 27) = *(int *)((char *)a2 + 3);
    result = *(__n128 *)(a2 + 2);
    *((__n128 *)v11 + 2) = result;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    v12 = *((_QWORD *)a2 + 3);
    v13 = *((_QWORD *)a2 + 4);
    *((_QWORD *)a2 + 3) = 0;
    *((_QWORD *)v11 + 6) = v12;
    *((_QWORD *)v11 + 7) = v13;
    *((_DWORD *)v11 + 16) = a2[10];
    result.n128_f32[0] = (float)(unint64_t)(qword_1EF131238 + 1);
    if (v6 && (float)(*(float *)&dword_1EF131240 * (float)v6) >= result.n128_f32[0])
    {
      v5 = v2;
      goto LABEL_64;
    }
    v15 = 1;
    if (v6 >= 3)
      v15 = (v6 & (v6 - 1)) != 0;
    v16 = v15 | (2 * v6);
    result.n128_f32[0] = result.n128_f32[0] / *(float *)&dword_1EF131240;
    v17 = vcvtps_u32_f32(result.n128_f32[0]);
    if (v16 <= v17)
      prime = (int8x8_t)v17;
    else
      prime = (int8x8_t)v16;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v6 = *((_QWORD *)&AMCP::local_get_property_traits_list(void)::s_indesctructible_property_traits_list + 1);
    }
    if (*(_QWORD *)&prime <= v6)
    {
      if (*(_QWORD *)&prime >= v6)
        goto LABEL_60;
      v24 = vcvtps_u32_f32((float)(unint64_t)qword_1EF131238 / *(float *)&dword_1EF131240);
      if (v6 < 3
        || (result.n128_u64[0] = (unint64_t)vcnt_s8((int8x8_t)v6),
            result.n128_u16[0] = vaddlv_u8((uint8x8_t)result.n128_u64[0]),
            result.n128_u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v25 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v25;
      }
      if (*(_QWORD *)&prime <= v24)
        prime = (int8x8_t)v24;
      if (*(_QWORD *)&prime >= v6)
      {
        v6 = *((_QWORD *)&AMCP::local_get_property_traits_list(void)::s_indesctructible_property_traits_list + 1);
        goto LABEL_60;
      }
      if (!*(_QWORD *)&prime)
      {
        v35 = (void *)AMCP::local_get_property_traits_list(void)::s_indesctructible_property_traits_list;
        *(_QWORD *)&AMCP::local_get_property_traits_list(void)::s_indesctructible_property_traits_list = 0;
        if (v35)
          operator delete(v35);
        v6 = 0;
        *((_QWORD *)&AMCP::local_get_property_traits_list(void)::s_indesctructible_property_traits_list + 1) = 0;
        goto LABEL_60;
      }
    }
    if (*(_QWORD *)&prime >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v19 = operator new(8 * *(_QWORD *)&prime);
    v20 = (void *)AMCP::local_get_property_traits_list(void)::s_indesctructible_property_traits_list;
    *(_QWORD *)&AMCP::local_get_property_traits_list(void)::s_indesctructible_property_traits_list = v19;
    if (v20)
      operator delete(v20);
    v21 = 0;
    *((int8x8_t *)&AMCP::local_get_property_traits_list(void)::s_indesctructible_property_traits_list + 1) = prime;
    do
      *(_QWORD *)(AMCP::local_get_property_traits_list(void)::s_indesctructible_property_traits_list + 8 * v21++) = 0;
    while (*(_QWORD *)&prime != v21);
    v22 = (_QWORD **)qword_1EF131230;
    if (qword_1EF131230)
    {
      v23 = *(_QWORD *)(qword_1EF131230 + 8);
      result.n128_u64[0] = (unint64_t)vcnt_s8(prime);
      result.n128_u16[0] = vaddlv_u8((uint8x8_t)result.n128_u64[0]);
      if (result.n128_u32[0] > 1uLL)
      {
        if (v23 >= *(_QWORD *)&prime)
          v23 %= *(_QWORD *)&prime;
      }
      else
      {
        v23 &= *(_QWORD *)&prime - 1;
      }
      *(_QWORD *)(AMCP::local_get_property_traits_list(void)::s_indesctructible_property_traits_list + 8 * v23) = &qword_1EF131230;
      for (i = *v22; i; v23 = v27)
      {
        v27 = i[1];
        if (result.n128_u32[0] > 1uLL)
        {
          if (v27 >= *(_QWORD *)&prime)
            v27 %= *(_QWORD *)&prime;
        }
        else
        {
          v27 &= *(_QWORD *)&prime - 1;
        }
        if (v27 != v23)
        {
          if (!*(_QWORD *)(AMCP::local_get_property_traits_list(void)::s_indesctructible_property_traits_list + 8 * v27))
          {
            *(_QWORD *)(AMCP::local_get_property_traits_list(void)::s_indesctructible_property_traits_list + 8 * v27) = v22;
            goto LABEL_56;
          }
          *v22 = (_QWORD *)*i;
          *i = **(_QWORD **)(AMCP::local_get_property_traits_list(void)::s_indesctructible_property_traits_list + 8 * v27);
          **(_QWORD **)(AMCP::local_get_property_traits_list(void)::s_indesctructible_property_traits_list + 8 * v27) = i;
          i = v22;
        }
        v27 = v23;
LABEL_56:
        v22 = (_QWORD **)i;
        i = (_QWORD *)*i;
      }
    }
    v6 = (unint64_t)prime;
LABEL_60:
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5)
        v5 %= v6;
    }
    else
    {
      v5 = ((_DWORD)v6 - 1) & v5;
    }
LABEL_64:
    v28 = AMCP::local_get_property_traits_list(void)::s_indesctructible_property_traits_list;
    v29 = *(_QWORD **)(AMCP::local_get_property_traits_list(void)::s_indesctructible_property_traits_list + 8 * v5);
    if (v29)
    {
      *(_QWORD *)v11 = *v29;
    }
    else
    {
      *(_QWORD *)v11 = qword_1EF131230;
      qword_1EF131230 = (uint64_t)v11;
      *(_QWORD *)(v28 + 8 * v5) = &qword_1EF131230;
      if (!*(_QWORD *)v11)
      {
LABEL_73:
        ++qword_1EF131238;
        return result;
      }
      v30 = *(_QWORD *)(*(_QWORD *)v11 + 8);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v30 >= v6)
          v30 %= v6;
      }
      else
      {
        v30 &= v6 - 1;
      }
      v29 = (_QWORD *)(AMCP::local_get_property_traits_list(void)::s_indesctructible_property_traits_list + 8 * v30);
    }
    *v29 = v11;
    goto LABEL_73;
  }
  while (1)
  {
    v10 = v9[1];
    if (v10 == a1)
      break;
    if (v7.u32[0] > 1uLL)
    {
      if (v10 >= *((_QWORD *)&AMCP::local_get_property_traits_list(void)::s_indesctructible_property_traits_list + 1))
        v10 %= *((_QWORD *)&AMCP::local_get_property_traits_list(void)::s_indesctructible_property_traits_list + 1);
    }
    else
    {
      v10 &= *((_QWORD *)&AMCP::local_get_property_traits_list(void)::s_indesctructible_property_traits_list + 1) - 1;
    }
    if (v10 != v2)
      goto LABEL_18;
LABEL_17:
    v9 = (uint64_t *)*v9;
    if (!v9)
      goto LABEL_18;
  }
  if (*((_DWORD *)v9 + 4) != a1)
    goto LABEL_17;
  v31 = *a2;
  v32 = (void *)v9[4];
  *(_DWORD *)((char *)v9 + 27) = *(int *)((char *)a2 + 3);
  *((_DWORD *)v9 + 6) = v31;
  v33 = a2 + 2;
  if (v32)
  {
    v9[5] = (uint64_t)v32;
    operator delete(v32);
    v9[4] = 0;
    v9[5] = 0;
    v9[6] = 0;
  }
  result = *(__n128 *)(a2 + 2);
  *((__n128 *)v9 + 2) = result;
  v9[6] = *((_QWORD *)a2 + 3);
  *v33 = 0;
  *((_QWORD *)a2 + 2) = 0;
  *((_QWORD *)a2 + 3) = 0;
  v34 = *((_QWORD *)a2 + 4);
  *((_DWORD *)v9 + 16) = a2[10];
  v9[7] = v34;
  return result;
}

void sub_1B5C9DA08(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v3;

  v3 = (void *)v1[4];
  if (v3)
  {
    v1[5] = v3;
    operator delete(v3);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

double AMCP::get_property_traits_for_hal_selector@<D0>(AMCP *this@<X0>, uint64_t a2@<X8>)
{
  int v2;
  uint64_t *v4;
  double result;

  v2 = (int)this;
  AMCP::local_get_property_traits_list(this);
  v4 = &qword_1EF131230;
  while (1)
  {
    v4 = (uint64_t *)*v4;
    if (!v4)
      break;
    if (*((_DWORD *)v4 + 15) == v2)
    {
      *(_DWORD *)a2 = *((_DWORD *)v4 + 6);
      *(_DWORD *)(a2 + 3) = *(_DWORD *)((char *)v4 + 27);
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)(a2 + 24) = 0;
      *(_QWORD *)(a2 + 8) = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)(a2 + 8), (const void *)v4[4], v4[5], (v4[5] - v4[4]) >> 2);
      *(_QWORD *)(a2 + 32) = v4[7];
      *(_DWORD *)(a2 + 40) = *((_DWORD *)v4 + 16);
      return result;
    }
  }
  *(_DWORD *)(a2 + 40) = 0;
  result = 0.0;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_DWORD *)a2 = 0;
  *(_DWORD *)(a2 + 3) = 0;
  return result;
}

BOOL AMCP::is_stock_property_selector(AMCP *this)
{
  unsigned int v1;

  v1 = this;
  AMCP::local_get_property_traits_list(this);
  return std::__hash_table<std::__hash_value_type<unsigned int,AMCP::Live_Property_Traits>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,AMCP::Live_Property_Traits>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,AMCP::Live_Property_Traits>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,AMCP::Live_Property_Traits>>>::find<unsigned int>(v1) != 0;
}

uint64_t *AMCP::is_required_property_selector(AMCP *this)
{
  unsigned int v1;
  uint64_t *result;

  v1 = this;
  AMCP::local_get_property_traits_list(this);
  result = std::__hash_table<std::__hash_value_type<unsigned int,AMCP::Live_Property_Traits>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,AMCP::Live_Property_Traits>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,AMCP::Live_Property_Traits>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,AMCP::Live_Property_Traits>>>::find<unsigned int>(v1);
  if (result)
    return (uint64_t *)(*((_BYTE *)result + 28) != 0);
  return result;
}

uint64_t *AMCP::is_invariant_property_selector(AMCP *this)
{
  unsigned int v1;
  uint64_t *result;

  v1 = this;
  AMCP::local_get_property_traits_list(this);
  result = std::__hash_table<std::__hash_value_type<unsigned int,AMCP::Live_Property_Traits>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,AMCP::Live_Property_Traits>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,AMCP::Live_Property_Traits>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,AMCP::Live_Property_Traits>>>::find<unsigned int>(v1);
  if (result)
    return (uint64_t *)(*((_BYTE *)result + 29) != 0);
  return result;
}

uint64_t *AMCP::property_selector_may_be_settable(AMCP *this)
{
  unsigned int v1;
  uint64_t *result;

  v1 = this;
  AMCP::local_get_property_traits_list(this);
  result = std::__hash_table<std::__hash_value_type<unsigned int,AMCP::Live_Property_Traits>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,AMCP::Live_Property_Traits>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,AMCP::Live_Property_Traits>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,AMCP::Live_Property_Traits>>>::find<unsigned int>(v1);
  if (result)
    return (uint64_t *)(*((_BYTE *)result + 30) != 0);
  return result;
}

uint64_t AMCP::get_property_traits_for_class(AMCP *this)
{
  unsigned int v1;
  AMCP *is_base_of;
  AMCP *v4;
  unsigned __int8 v5;
  unint64_t v6;
  AMCP *v7;
  unsigned __int8 v8;
  unint64_t v9;
  AMCP *v10;
  AMCP *v11;
  AMCP *v12;
  AMCP *v13;
  AMCP *v14;
  AMCP *v15;
  AMCP *v16;
  AMCP *v17;
  char v18;
  char **v19;
  char *v20;

  v1 = this;
  is_base_of = (AMCP *)AMCP::is_base_of((AMCP *)0x61706C67, this);
  if ((_DWORD)is_base_of)
    return AMCP::get_driver_property_traits_list(is_base_of);
  v4 = (AMCP *)AMCP::is_base_of((AMCP *)0x61626F78, v1);
  if ((_DWORD)v4)
    return AMCP::get_box_property_traits_list(v4);
  if (AMCP::is_base_of((AMCP *)0x61616767, v1))
  {
    if ((v5 & 1) == 0
    {
      AMCP::get_meta_device_property_traits_list(void)::s_indestructible_property_traits_list_ptr = 0;
    }
    v6 = atomic_load(&AMCP::get_meta_device_property_traits_list(void)::once);
    if (v6 != -1)
    {
      v20 = &v18;
      v19 = &v20;
      std::__call_once(&AMCP::get_meta_device_property_traits_list(void)::once, &v19, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::get_meta_device_property_traits_list(void)::$_0 &&>>);
    }
    return AMCP::get_meta_device_property_traits_list(void)::s_indestructible_property_traits_list_ptr;
  }
  else
  {
    v7 = (AMCP *)AMCP::is_base_of((AMCP *)0x61646576, v1);
    if ((_DWORD)v7)
    {
      return AMCP::get_device_property_traits_list(v7);
    }
    else if (AMCP::is_base_of((AMCP *)0x6D737472, v1))
    {
      if ((v8 & 1) == 0
      {
        AMCP::get_meta_stream_property_traits_list(void)::s_indesctructible_property_traits_list_ptr = 0;
      }
      v9 = atomic_load(&AMCP::get_meta_stream_property_traits_list(void)::once);
      if (v9 != -1)
      {
        v20 = &v18;
        v19 = &v20;
        std::__call_once(&AMCP::get_meta_stream_property_traits_list(void)::once, &v19, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::get_meta_stream_property_traits_list(void)::$_0 &&>>);
      }
      return AMCP::get_meta_stream_property_traits_list(void)::s_indesctructible_property_traits_list_ptr;
    }
    else
    {
      v10 = (AMCP *)AMCP::is_base_of((AMCP *)0x61737472, v1);
      if ((_DWORD)v10)
      {
        return AMCP::get_stream_property_traits_list(v10);
      }
      else
      {
        v11 = (AMCP *)AMCP::is_base_of((AMCP *)0x736C6472, v1);
        if ((_DWORD)v11)
        {
          return AMCP::get_slider_control_property_traits_list(v11);
        }
        else
        {
          v12 = (AMCP *)AMCP::is_base_of((AMCP *)0x6C65766C, v1);
          if ((_DWORD)v12)
          {
            return AMCP::get_level_control_property_traits_list(v12);
          }
          else
          {
            v13 = (AMCP *)AMCP::is_base_of((AMCP *)0x746F676C, v1);
            if ((_DWORD)v13)
            {
              return AMCP::get_BOOLean_control_property_traits_list(v13);
            }
            else
            {
              v14 = (AMCP *)AMCP::is_base_of((AMCP *)0x736C6374, v1);
              if ((_DWORD)v14)
              {
                return AMCP::get_selector_control_property_traits_list(v14);
              }
              else
              {
                v15 = (AMCP *)AMCP::is_base_of((AMCP *)0x7370616E, v1);
                if ((_DWORD)v15)
                {
                  return AMCP::get_stereo_pan_control_property_traits_list(v15);
                }
                else
                {
                  v16 = (AMCP *)AMCP::is_base_of((AMCP *)0x6163746C, v1);
                  if ((_DWORD)v16)
                  {
                    return AMCP::get_control_property_traits_list(v16);
                  }
                  else
                  {
                    v17 = (AMCP *)AMCP::is_base_of((AMCP *)0x61636C6B, v1);
                    if ((_DWORD)v17)
                      return AMCP::get_clock_property_traits_list(v17);
                    else
                      return AMCP::get_object_property_traits_list(v17);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

BOOL AMCP::is_stock_property_selector(AMCP *this, unsigned int a2)
{
  AMCP::local_get_property_traits_list(this);
  return std::__hash_table<std::__hash_value_type<unsigned int,AMCP::Live_Property_Traits>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,AMCP::Live_Property_Traits>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,AMCP::Live_Property_Traits>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,AMCP::Live_Property_Traits>>>::find<unsigned int>(a2) != 0;
}

void AMCP::IOAudio1::Driver::~Driver(AMCP::IOAudio1::Driver *this)
{
  AMCP::IOAudio1::Driver::~Driver(this);
  JUMPOUT(0x1B5E50688);
}

{
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;

  *(_QWORD *)this = &off_1E699F9D0;
  *((_QWORD *)this + 3) = &unk_1E699F9F8;
  v2 = (void *)*((_QWORD *)this + 8);
  if (v2)
  {
    v3 = *((_QWORD *)this + 9);
    v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        v3 = std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v3 - 16);
      while ((void *)v3 != v2);
      v4 = (void *)*((_QWORD *)this + 8);
    }
    *((_QWORD *)this + 9) = v2;
    operator delete(v4);
  }
  v5 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v5)
    std::default_delete<applesauce::iokit::io_service_factory>::operator()[abi:ne180100](v5);
  *((_QWORD *)this + 3) = &off_1E697FC58;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 32);
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

std::__shared_mutex_base *AMCP::IOAudio1::Driver::shutdown(AMCP::IOAudio1::Driver *this)
{
  AMCP::Log::Scope_Registry *v2;
  int v3;
  std::__shared_weak_count *v4;
  NSObject *v5;
  unint64_t *v6;
  unint64_t v7;
  _opaque_pthread_t *v8;
  mach_port_t v9;
  NSObject *v10;
  os_log_type_t v11;
  std::__shared_weak_count *v12;
  NSObject *v13;
  unint64_t *v14;
  unint64_t v15;
  _opaque_pthread_t *v16;
  mach_port_t v17;
  std::__shared_weak_count *v18;
  NSObject *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  uint64_t v25;
  uint64_t i;
  uint64_t v27;
  _opaque_pthread_t *v29;
  mach_port_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  uint8_t buf[8];
  _BYTE v34[10];
  __int16 v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  AMCP::Log::Scope_Registry::get(this);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v31, "com.apple.coreaudio", "AMCP");
  v3 = *(_DWORD *)(v31 + 16);
  switch(v3)
  {
    case 3:
      AMCP::Log::Scope_Registry::get(v2);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v12 = *(std::__shared_weak_count **)v34;
      v13 = **(NSObject ***)buf;
      if (*(_QWORD *)v34)
      {
        v14 = (unint64_t *)(*(_QWORD *)v34 + 8);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        v16 = pthread_self();
        v17 = pthread_mach_thread_np(v16);
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)&buf[4] = v17;
        *(_WORD *)v34 = 2080;
        *(_QWORD *)&v34[2] = "IOAudio1_Driver.cpp";
        v35 = 1024;
        v36 = 49;
        v10 = v13;
        v11 = OS_LOG_TYPE_INFO;
        goto LABEL_18;
      }
      break;
    case 2:
      AMCP::Log::Scope_Registry::get(v2);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v18 = *(std::__shared_weak_count **)v34;
      v19 = **(NSObject ***)buf;
      if (*(_QWORD *)v34)
      {
        v20 = (unint64_t *)(*(_QWORD *)v34 + 8);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      {
        v29 = pthread_self();
        v30 = pthread_mach_thread_np(v29);
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)&buf[4] = v30;
        *(_WORD *)v34 = 2080;
        *(_QWORD *)&v34[2] = "IOAudio1_Driver.cpp";
        v35 = 1024;
        v36 = 49;
        _os_log_debug_impl(&dword_1B57BA000, v19, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Tearing down IOAudio1 Driver", buf, 0x18u);
      }
      break;
    case 1:
      AMCP::Log::Scope_Registry::get(v2);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v4 = *(std::__shared_weak_count **)v34;
      v5 = **(NSObject ***)buf;
      if (*(_QWORD *)v34)
      {
        v6 = (unint64_t *)(*(_QWORD *)v34 + 8);
        do
          v7 = __ldaxr(v6);
        while (__stlxr(v7 - 1, v6));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        v8 = pthread_self();
        v9 = pthread_mach_thread_np(v8);
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)&buf[4] = v9;
        *(_WORD *)v34 = 2080;
        *(_QWORD *)&v34[2] = "IOAudio1_Driver.cpp";
        v35 = 1024;
        v36 = 49;
        v10 = v5;
        v11 = OS_LOG_TYPE_DEFAULT;
LABEL_18:
        _os_log_impl(&dword_1B57BA000, v10, v11, "%6u %32s:%-5d Tearing down IOAudio1 Driver", buf, 0x18u);
      }
      break;
  }
  v22 = v32;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v25)
    std::default_delete<applesauce::iokit::io_service_factory>::operator()[abi:ne180100](v25);
  v27 = *((_QWORD *)this + 8);
  for (i = *((_QWORD *)this + 9); i != v27; i = std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](i - 16))
    ;
  *((_QWORD *)this + 9) = v27;
  return AMCP::Core::Broker::destroy_core(*(std::__shared_mutex_base **)(*((_QWORD *)this + 4) + 16), *((_DWORD *)this + 12));
}

void sub_1B5C9E254(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void `non-virtual thunk to'AMCP::IOAudio1::Driver::~Driver(AMCP::IOAudio1::Driver *this)
{
  AMCP::IOAudio1::Driver::~Driver((AMCP::IOAudio1::Driver *)((char *)this - 24));
}

{
  AMCP::IOAudio1::Driver::~Driver((AMCP::IOAudio1::Driver *)((char *)this - 24));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IOAudio1::Driver::start(void)::$_0,std::allocator<AMCP::IOAudio1::Driver::start(void)::$_0>,void ()(applesauce::iokit::io_object_holder)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E699FCF8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::IOAudio1::Driver::start(void)::$_0,std::allocator<AMCP::IOAudio1::Driver::start(void)::$_0>,void ()(applesauce::iokit::io_object_holder)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E699FCF8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IOAudio1::Driver::start(void)::$_0,std::allocator<AMCP::IOAudio1::Driver::start(void)::$_0>,void ()(applesauce::iokit::io_object_holder)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E699FCF8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::IOAudio1::Driver::start(void)::$_0,std::allocator<AMCP::IOAudio1::Driver::start(void)::$_0>,void ()(applesauce::iokit::io_object_holder)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E699FCF8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::IOAudio1::Driver::start(void)::$_0,std::allocator<AMCP::IOAudio1::Driver::start(void)::$_0>,void ()(applesauce::iokit::io_object_holder)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::IOAudio1::Driver::start(void)::$_0,std::allocator<AMCP::IOAudio1::Driver::start(void)::$_0>,void ()(applesauce::iokit::io_object_holder)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<AMCP::IOAudio1::Driver::start(void)::$_0,std::allocator<AMCP::IOAudio1::Driver::start(void)::$_0>,void ()(applesauce::iokit::io_object_holder)>::operator()(uint64_t a1, io_object_t *a2)
{
  io_object_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *exception;
  const std::error_category *v7;
  io_registry_entry_t v8;

  v2 = *a2;
  *a2 = 0;
  v3 = *(_QWORD *)(a1 + 8);
  v8 = v2;
  if (v2)
  {
    v4 = IOObjectRetain(v2);
    if ((_DWORD)v4)
    {
      v5 = v4;
      exception = __cxa_allocate_exception(0x20uLL);
      v7 = std::system_category();
      MEMORY[0x1B5E5022C](exception, v5, v7, "Error on Retain");
      __cxa_throw(exception, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
    }
    AMCP::IOAudio1::Driver::handle_device_arrival(v3, &v8);
    IOObjectRelease(v2);
    IOObjectRelease(v2);
  }
  else
  {
    AMCP::IOAudio1::Driver::handle_device_arrival(v3, &v8);
  }
}

void sub_1B5C9E508(_Unwind_Exception *a1)
{
  io_object_t v1;
  void *v2;

  __cxa_free_exception(v2);
  IOObjectRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::IOAudio1::Driver::start(void)::$_0,std::allocator<AMCP::IOAudio1::Driver::start(void)::$_0>,void ()(applesauce::iokit::io_object_holder)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio16Driver5startEvE3$_0"))
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<AMCP::IOAudio1::Driver::start(void)::$_0,std::allocator<AMCP::IOAudio1::Driver::start(void)::$_0>,void ()(applesauce::iokit::io_object_holder)>::target_type()
{
}

void AMCP::IOAudio1::Driver::handle_device_arrival(uint64_t a1, io_registry_entry_t *a2)
{
  io_registry_entry_t v3;
  uint64_t CFProperties;
  uint64_t v6;
  uint64_t v7;
  const __CFString *v8;
  CFComparisonResult v9;
  uint64_t v10;
  unsigned int v11;
  void *v12;
  void **p_lpsrc;
  io_object_t v14;
  uint64_t v15;
  CFTypeRef v16;
  char *v17;
  CFMutableDictionaryRef *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::runtime_error *exception;
  void (*v27)(void *);
  struct type_info *v28;
  const std::error_category *v29;
  std::runtime_error *v30;
  void *v31;
  const std::error_category *v32;
  void *lpsrc;
  std::__shared_weak_count *v34;
  __int128 v35;
  io_object_t object;
  CFTypeRef v37;
  CFTypeRef v38;
  CFTypeRef cf;
  CFMutableDictionaryRef properties[3];
  CFMutableDictionaryRef *v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "cannot create io_object_proxy from null io_object");
    v27 = (void (*)(void *))MEMORY[0x1E0DE4338];
    v28 = (struct type_info *)MEMORY[0x1E0DE4E80];
    goto LABEL_46;
  }
  properties[0] = 0;
  CFProperties = IORegistryEntryCreateCFProperties(v3, properties, 0, 0);
  if ((_DWORD)CFProperties)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x20uLL);
    v29 = std::system_category();
    MEMORY[0x1B5E5022C](exception, CFProperties, v29, "Error on get_properties");
    v27 = (void (*)(void *))MEMORY[0x1E0DE4580];
    v28 = (struct type_info *)MEMORY[0x1E0DE4E38];
LABEL_46:
    __cxa_throw(exception, v28, v27);
  }
  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&cf, properties[0]);
  if (!cf)
  {
    v30 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v30, "Could not construct");
    __cxa_throw(v30, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key<applesauce::CF::StringRef,__CFString const*>((applesauce::CF::StringRef *)&v38, (CFDictionaryRef)cf, CFSTR("IOAudioEngineGlobalUniqueID"));
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 72);
  if (v6 == v7)
    goto LABEL_12;
  do
  {
    v8 = *(const __CFString **)(*(_QWORD *)v6 + 24);
    if (v8)
    {
      CFRetain(*(CFTypeRef *)(*(_QWORD *)v6 + 24));
      v9 = applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(v8, (const __CFString **)&v38);
      CFRelease(v8);
      if (v9 == kCFCompareEqualTo)
        goto LABEL_11;
    }
    else if (applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(0, (const __CFString **)&v38) == kCFCompareEqualTo)
    {
      goto LABEL_11;
    }
    v6 += 16;
  }
  while (v6 != v7);
  v6 = v7;
LABEL_11:
  if (v6 == *(_QWORD *)(a1 + 72))
  {
LABEL_12:
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32);
    v11 = *(_DWORD *)(a1 + 48);
    std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&lpsrc, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16));
    if (lpsrc
    {
      *(_QWORD *)&v35 = v12;
      *((_QWORD *)&v35 + 1) = v34;
      p_lpsrc = &lpsrc;
    }
    else
    {
      p_lpsrc = (void **)&v35;
    }
    *p_lpsrc = 0;
    p_lpsrc[1] = 0;
    v14 = *a2;
    object = v14;
    if (v14)
    {
      v15 = IOObjectRetain(v14);
      if ((_DWORD)v15)
      {
        v31 = __cxa_allocate_exception(0x20uLL);
        v32 = std::system_category();
        MEMORY[0x1B5E5022C](v31, v15, v32, "Error on Retain");
        __cxa_throw(v31, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
      }
    }
    v16 = cf;
    if (cf)
      CFRetain(cf);
    v37 = v16;
    v41 = 0;
    v17 = (char *)operator new(0x28uLL);
    *(_QWORD *)v17 = &off_1E699FFA8;
    *(_OWORD *)(v17 + 8) = v35;
    v35 = 0uLL;
    *((_DWORD *)v17 + 6) = object;
    object = 0;
    *((_QWORD *)v17 + 4) = v16;
    v37 = 0;
    v41 = (CFMutableDictionaryRef *)v17;
    AMCP::Core::Conductor::enqueue_config_change(v10, v11, v11, 1, (uint64_t)properties);
    v18 = v41;
    if (v41 == properties)
    {
      v19 = 4;
      v18 = properties;
    }
    else
    {
      if (!v41)
      {
LABEL_25:
        if (v37)
          CFRelease(v37);
        if (object)
          IOObjectRelease(object);
        v20 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
        if (*((_QWORD *)&v35 + 1))
        {
          v21 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
        v23 = v34;
        if (v34)
        {
          p_shared_owners = (unint64_t *)&v34->__shared_owners_;
          do
            v25 = __ldaxr(p_shared_owners);
          while (__stlxr(v25 - 1, p_shared_owners));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        goto LABEL_39;
      }
      v19 = 5;
    }
    (*((void (**)(void))*v18 + v19))();
    goto LABEL_25;
  }
LABEL_39:
  if (v38)
    CFRelease(v38);
  if (cf)
    CFRelease(cf);
}

void sub_1B5C9E924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, const void *a16, const void *a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  void *v23;

  if (a2)
  {
    __cxa_free_exception(v23);
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
    applesauce::CF::StringRef::~StringRef(&a16);
    applesauce::CF::DictionaryRef::~DictionaryRef(&a17);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1B5C9E808);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::IOAudio1::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1::~$_1(uint64_t a1)
{
  const void *v2;
  io_object_t v3;

  v2 = *(const void **)(a1 + 24);
  if (v2)
    CFRelease(v2);
  v3 = *(_DWORD *)(a1 + 16);
  if (v3)
    IOObjectRelease(v3);
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1);
}

uint64_t std::__function::__func<AMCP::IOAudio1::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1,std::allocator<AMCP::IOAudio1::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1>,void ()(void)>::~__func(uint64_t a1)
{
  const void *v2;
  io_object_t v3;

  *(_QWORD *)a1 = &off_1E699FFA8;
  v2 = *(const void **)(a1 + 32);
  if (v2)
    CFRelease(v2);
  v3 = *(_DWORD *)(a1 + 24);
  if (v3)
    IOObjectRelease(v3);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
  return a1;
}

void std::__function::__func<AMCP::IOAudio1::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1,std::allocator<AMCP::IOAudio1::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1>,void ()(void)>::~__func(uint64_t a1)
{
  const void *v2;
  io_object_t v3;

  *(_QWORD *)a1 = &off_1E699FFA8;
  v2 = *(const void **)(a1 + 32);
  if (v2)
    CFRelease(v2);
  v3 = *(_DWORD *)(a1 + 24);
  if (v3)
    IOObjectRelease(v3);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IOAudio1::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1,std::allocator<AMCP::IOAudio1::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1E699FFA8;
  std::__compressed_pair_elem<AMCP::IOAudio1::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio1::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B5C9EB80(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::IOAudio1::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1,std::allocator<AMCP::IOAudio1::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E699FFA8;
  return std::__compressed_pair_elem<AMCP::IOAudio1::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio1::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<AMCP::IOAudio1::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1,std::allocator<AMCP::IOAudio1::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1>,void ()(void)>::destroy(uint64_t a1)
{
  return std::__function::__alloc_func<AMCP::IOAudio1::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1,std::allocator<AMCP::IOAudio1::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1>,void ()(void)>::destroy[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::IOAudio1::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1,std::allocator<AMCP::IOAudio1::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<AMCP::IOAudio1::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1,std::allocator<AMCP::IOAudio1::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1>,void ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<AMCP::IOAudio1::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1,std::allocator<AMCP::IOAudio1::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  std::string::size_type v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  const void *v5;
  __int128 v6;
  std::__shared_weak_count *shared_owners;
  unint64_t v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  int64x2_t *v15;
  unint64_t v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  int64x2_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  __int128 v32;
  CFTypeRef cf;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = (std::__shared_weak_count *)operator new(0x258uLL);
  v3->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  v3->__shared_weak_owners_ = 0;
  v3->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69A0018;
  v5 = *(const void **)(a1 + 32);
  if (v5)
    CFRetain(*(CFTypeRef *)(a1 + 32));
  cf = v5;
  AMCP::IOAudio1::Device::Device((uint64_t)&v3[1], v2, (io_service_t *)(a1 + 24), (const __CFDictionary **)&cf);
  if (cf)
    CFRelease(cf);
  *(_QWORD *)&v6 = v3 + 1;
  shared_owners = (std::__shared_weak_count *)v3[1].__shared_owners_;
  if (shared_owners)
  {
    if (shared_owners->__shared_owners_ != -1)
      goto LABEL_18;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
    v3[1].__vftable = (std::__shared_weak_count_vtbl *)&v3[1];
    v3[1].__shared_owners_ = (uint64_t)v3;
    std::__shared_weak_count::__release_weak(shared_owners);
    *(_QWORD *)&v6 = v3 + 1;
  }
  else
  {
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    v12 = (unint64_t *)&v3->__shared_weak_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    v3[1].__vftable = (std::__shared_weak_count_vtbl *)&v3[1];
    v3[1].__shared_owners_ = (uint64_t)v3;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    v31 = v6;
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    *(_QWORD *)&v6 = v31;
  }
LABEL_18:
  *((_QWORD *)&v6 + 1) = v3;
  v15 = *(int64x2_t **)(a1 + 8);
  v17 = (char *)v15[4].i64[1];
  v16 = v15[5].u64[0];
  if ((unint64_t)v17 >= v16)
  {
    v19 = (char *)v15[4].i64[0];
    v20 = (v17 - v19) >> 4;
    v21 = v20 + 1;
    if ((unint64_t)(v20 + 1) >> 60)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v32 = v6;
    v22 = v16 - (_QWORD)v19;
    if (v22 >> 3 > v21)
      v21 = v22 >> 3;
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0)
      v23 = 0xFFFFFFFFFFFFFFFLL;
    else
      v23 = v21;
    if (v23 >> 60)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v24 = (char *)operator new(16 * v23);
    v25 = &v24[16 * v20];
    *(_OWORD *)v25 = v32;
    if (v17 == v19)
    {
      v28 = vdupq_n_s64((unint64_t)v17);
      v26 = &v24[16 * v20];
    }
    else
    {
      v26 = &v24[16 * v20];
      do
      {
        v27 = *((_OWORD *)v17 - 1);
        v17 -= 16;
        *((_OWORD *)v26 - 1) = v27;
        v26 -= 16;
        *(_QWORD *)v17 = 0;
        *((_QWORD *)v17 + 1) = 0;
      }
      while (v17 != v19);
      v28 = v15[4];
    }
    v18 = v25 + 16;
    v15[4].i64[0] = (uint64_t)v26;
    v15[4].i64[1] = (uint64_t)(v25 + 16);
    v15[5].i64[0] = (uint64_t)&v24[16 * v23];
    v29 = v28.i64[1];
    v30 = (void *)v28.i64[0];
    while ((void *)v29 != v30)
      v29 = std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v29 - 16);
    if (v30)
      operator delete(v30);
  }
  else
  {
    *(_OWORD *)v17 = v6;
    v18 = v17 + 16;
  }
  v15[4].i64[1] = (uint64_t)v18;
}

void sub_1B5C9EE28(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  std::__shared_weak_count *v4;
  void *v6;
  va_list va;

  va_start(va, a4);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)va);
  std::__shared_weak_count::~__shared_weak_count(v4);
  operator delete(v6);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5C9EDF4);
}

uint64_t std::__function::__func<AMCP::IOAudio1::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1,std::allocator<AMCP::IOAudio1::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio16Driver21handle_device_arrivalEN10applesauce5iokit16io_object_holderEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IOAudio1::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1,std::allocator<AMCP::IOAudio1::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1>,void ()(void)>::target_type()
{
}

void std::__shared_ptr_emplace<AMCP::IOAudio1::Device>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69A0018;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::IOAudio1::Device>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69A0018;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

void std::__shared_ptr_emplace<AMCP::IOAudio1::Device>::__on_zero_shared(uint64_t a1)
{
  AMCP::Log::Scope_Registry *v2;
  int v3;
  std::__shared_weak_count *v4;
  NSObject *v5;
  unint64_t *v6;
  unint64_t v7;
  _opaque_pthread_t *v8;
  mach_port_t v9;
  const __CFString *v10;
  mach_port_t v11;
  void **v12;
  int v13;
  NSObject *v14;
  os_log_type_t v15;
  std::__shared_weak_count *v16;
  NSObject *v17;
  unint64_t *v18;
  unint64_t v19;
  _opaque_pthread_t *v20;
  mach_port_t v21;
  const __CFString *v22;
  mach_port_t v23;
  void **v24;
  int v25;
  std::__shared_weak_count *v26;
  NSObject *v27;
  unint64_t *v28;
  unint64_t v29;
  _opaque_pthread_t *v30;
  mach_port_t v31;
  const __CFString *v32;
  mach_port_t v33;
  void **v34;
  int v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  io_connect_t *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  const void *v54;
  io_object_t v55;
  const void *v56;
  io_connect_t *v57;
  uint64_t v58;
  io_object_t v59;
  const void *v60;
  std::__shared_weak_count *v61;
  std::runtime_error *exception;
  void *__p[2];
  char v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  uint8_t buf[8];
  _BYTE v68[10];
  __int16 v69;
  int v70;
  __int16 v71;
  void **v72;
  __int16 v73;
  int v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v65, "com.apple.coreaudio", "AMCP");
  v3 = *(_DWORD *)(v65 + 16);
  switch(v3)
  {
    case 3:
      AMCP::Log::Scope_Registry::get(v2);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v26 = *(std::__shared_weak_count **)v68;
      v27 = **(NSObject ***)buf;
      if (*(_QWORD *)v68)
      {
        v28 = (unint64_t *)(*(_QWORD *)v68 + 8);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
      {
        v30 = pthread_self();
        v31 = pthread_mach_thread_np(v30);
        v32 = *(const __CFString **)(a1 + 48);
        if (v32)
        {
          v33 = v31;
          applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v32);
          if (v64 >= 0)
            v34 = __p;
          else
            v34 = (void **)__p[0];
          v35 = *(_DWORD *)(a1 + 56);
          *(_DWORD *)buf = 67110146;
          *(_DWORD *)&buf[4] = v33;
          *(_WORD *)v68 = 2080;
          *(_QWORD *)&v68[2] = "IOAudio1_Device.cpp";
          v69 = 1024;
          v70 = 147;
          v71 = 2080;
          v72 = v34;
          v73 = 1024;
          v74 = v35;
          v14 = v27;
          v15 = OS_LOG_TYPE_INFO;
          goto LABEL_37;
        }
LABEL_80:
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      break;
    case 2:
      AMCP::Log::Scope_Registry::get(v2);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v16 = *(std::__shared_weak_count **)v68;
      v17 = **(NSObject ***)buf;
      if (*(_QWORD *)v68)
      {
        v18 = (unint64_t *)(*(_QWORD *)v68 + 8);
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        v20 = pthread_self();
        v21 = pthread_mach_thread_np(v20);
        v22 = *(const __CFString **)(a1 + 48);
        if (v22)
        {
          v23 = v21;
          applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v22);
          if (v64 >= 0)
            v24 = __p;
          else
            v24 = (void **)__p[0];
          v25 = *(_DWORD *)(a1 + 56);
          *(_DWORD *)buf = 67110146;
          *(_DWORD *)&buf[4] = v23;
          *(_WORD *)v68 = 2080;
          *(_QWORD *)&v68[2] = "IOAudio1_Device.cpp";
          v69 = 1024;
          v70 = 147;
          v71 = 2080;
          v72 = v24;
          v73 = 1024;
          v74 = v25;
          _os_log_debug_impl(&dword_1B57BA000, v17, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Tearing down Device '%s' with object id %u", buf, 0x28u);
LABEL_38:
          if (v64 < 0)
            operator delete(__p[0]);
          break;
        }
        goto LABEL_80;
      }
      break;
    case 1:
      AMCP::Log::Scope_Registry::get(v2);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v4 = *(std::__shared_weak_count **)v68;
      v5 = **(NSObject ***)buf;
      if (*(_QWORD *)v68)
      {
        v6 = (unint64_t *)(*(_QWORD *)v68 + 8);
        do
          v7 = __ldaxr(v6);
        while (__stlxr(v7 - 1, v6));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        v8 = pthread_self();
        v9 = pthread_mach_thread_np(v8);
        v10 = *(const __CFString **)(a1 + 48);
        if (v10)
        {
          v11 = v9;
          applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v10);
          if (v64 >= 0)
            v12 = __p;
          else
            v12 = (void **)__p[0];
          v13 = *(_DWORD *)(a1 + 56);
          *(_DWORD *)buf = 67110146;
          *(_DWORD *)&buf[4] = v11;
          *(_WORD *)v68 = 2080;
          *(_QWORD *)&v68[2] = "IOAudio1_Device.cpp";
          v69 = 1024;
          v70 = 147;
          v71 = 2080;
          v72 = v12;
          v73 = 1024;
          v74 = v13;
          v14 = v5;
          v15 = OS_LOG_TYPE_DEFAULT;
LABEL_37:
          _os_log_impl(&dword_1B57BA000, v14, v15, "%6u %32s:%-5d Tearing down Device '%s' with object id %u", buf, 0x28u);
          goto LABEL_38;
        }
        goto LABEL_80;
      }
      break;
  }
  v36 = v66;
  if (v66)
  {
    p_shared_owners = (unint64_t *)&v66->__shared_owners_;
    do
      v38 = __ldaxr(p_shared_owners);
    while (__stlxr(v38 - 1, p_shared_owners));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v39 = *(_QWORD **)(a1 + 544);
  v40 = *(_QWORD **)(a1 + 536);
  while (v39 != v40)
  {
    v42 = *--v39;
    v41 = v42;
    *v39 = 0;
    if (v42)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  *(_QWORD *)(a1 + 544) = v40;
  v43 = *(_QWORD **)(a1 + 520);
  v44 = *(_QWORD **)(a1 + 512);
  while (v43 != v44)
  {
    v46 = *--v43;
    v45 = v46;
    *v43 = 0;
    if (v46)
      (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
  }
  *(_QWORD *)(a1 + 520) = v44;
  v47 = *(_QWORD **)(a1 + 568);
  v48 = *(_QWORD **)(a1 + 560);
  while (v47 != v48)
  {
    v50 = *--v47;
    v49 = v50;
    *v47 = 0;
    if (v50)
      (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
  }
  *(_QWORD *)(a1 + 568) = v48;
  v51 = *(io_connect_t **)(a1 + 400);
  *(_QWORD *)(a1 + 400) = 0;
  if (v51)
    std::default_delete<applesauce::iokit::io_connect_holder>::operator()[abi:ne180100](v51);
  AMCP::Utility::Mach_Port::reset((AMCP::Utility::Mach_Port *)(a1 + 408));
  v52 = *(_QWORD *)(a1 + 392);
  *(_QWORD *)(a1 + 392) = 0;
  if (v52)
    std::default_delete<applesauce::iokit::io_service_notifications>::operator()[abi:ne180100](v52);
  AMCP::Core::Broker::destroy_core(*(std::__shared_mutex_base **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 32) + 16), *(_DWORD *)(a1 + 56));
  v53 = *(std::__shared_weak_count **)(a1 + 592);
  if (v53)
    std::__shared_weak_count::__release_weak(v53);
  *(_QWORD *)buf = a1 + 560;
  std::vector<std::unique_ptr<HALB_ChangeSynchronizer>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = a1 + 536;
  std::vector<std::unique_ptr<HALB_ChangeSynchronizer>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = a1 + 512;
  std::vector<std::unique_ptr<HALB_ChangeSynchronizer>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  v54 = *(const void **)(a1 + 504);
  if (v54)
    CFRelease(v54);
  v55 = *(_DWORD *)(a1 + 496);
  if (v55)
    IOObjectRelease(v55);
  v56 = *(const void **)(a1 + 488);
  if (v56)
    CFRelease(v56);
  AMCP::Utility::Mach_Port::~Mach_Port((AMCP::Utility::Mach_Port *)(a1 + 408));
  v57 = *(io_connect_t **)(a1 + 400);
  *(_QWORD *)(a1 + 400) = 0;
  if (v57)
    std::default_delete<applesauce::iokit::io_connect_holder>::operator()[abi:ne180100](v57);
  v58 = *(_QWORD *)(a1 + 392);
  *(_QWORD *)(a1 + 392) = 0;
  if (v58)
    std::default_delete<applesauce::iokit::io_service_notifications>::operator()[abi:ne180100](v58);
  v59 = *(_DWORD *)(a1 + 384);
  if (v59)
    IOObjectRelease(v59);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)(a1 + 64));
  v60 = *(const void **)(a1 + 48);
  if (v60)
    CFRelease(v60);
  v61 = *(std::__shared_weak_count **)(a1 + 32);
  if (v61)
    std::__shared_weak_count::__release_weak(v61);
}

void sub_1B5C9F4F0(_Unwind_Exception *exception_object, int a2)
{
  void *v2;

  if (a2)
  {
    __cxa_free_exception(v2);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__alloc_func<AMCP::IOAudio1::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1,std::allocator<AMCP::IOAudio1::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1>,void ()(void)>::destroy[abi:ne180100](uint64_t a1)
{
  const void *v2;
  io_object_t v3;

  v2 = *(const void **)(a1 + 24);
  if (v2)
    CFRelease(v2);
  v3 = *(_DWORD *)(a1 + 16);
  if (v3)
    IOObjectRelease(v3);
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1);
}

uint64_t std::__compressed_pair_elem<AMCP::IOAudio1::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio1::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1 const&,0ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  io_object_t v7;
  uint64_t v8;
  const void *v9;
  uint64_t v11;
  void *exception;
  const std::error_category *v13;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 16) = v7;
  if (v7)
  {
    v8 = IOObjectRetain(v7);
    if ((_DWORD)v8)
    {
      v11 = v8;
      exception = __cxa_allocate_exception(0x20uLL);
      v13 = std::system_category();
      MEMORY[0x1B5E5022C](exception, v11, v13, "Error on Retain");
      __cxa_throw(exception, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
    }
  }
  v9 = *(const void **)(a2 + 24);
  if (v9)
    CFRetain(v9);
  *(_QWORD *)(a1 + 24) = v9;
  return a1;
}

void sub_1B5C9F638(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  __cxa_free_exception(v2);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<AMCP::IOAudio1::Driver::handle_device_departure(AMCP::IOAudio1::Device *)::$_1,std::allocator<AMCP::IOAudio1::Driver::handle_device_departure(AMCP::IOAudio1::Device *)::$_1>,void ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E69A0078;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::IOAudio1::Driver::handle_device_departure(AMCP::IOAudio1::Device *)::$_1,std::allocator<AMCP::IOAudio1::Driver::handle_device_departure(AMCP::IOAudio1::Device *)::$_1>,void ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E69A0078;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

char *std::__function::__func<AMCP::IOAudio1::Driver::handle_device_departure(AMCP::IOAudio1::Device *)::$_1,std::allocator<AMCP::IOAudio1::Driver::handle_device_departure(AMCP::IOAudio1::Device *)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t *v2;
  char *v3;

  v2 = (uint64_t *)(a1 + 8);
  v3 = (char *)operator new(0x38uLL);
  *(_QWORD *)v3 = &off_1E69A0078;
  AMCP::Utility::Expiration_Check::Expiration_Check((uint64_t)(v3 + 8), v2);
  *(_OWORD *)(v3 + 40) = *(_OWORD *)(a1 + 40);
  return v3;
}

void sub_1B5C9F724(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 std::__function::__func<AMCP::IOAudio1::Driver::handle_device_departure(AMCP::IOAudio1::Device *)::$_1,std::allocator<AMCP::IOAudio1::Driver::handle_device_departure(AMCP::IOAudio1::Device *)::$_1>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E69A0078;
  AMCP::Utility::Expiration_Check::Expiration_Check(a2 + 8, (uint64_t *)(a1 + 8));
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(a2 + 40) = result;
  return result;
}

uint64_t std::__function::__func<AMCP::IOAudio1::Driver::handle_device_departure(AMCP::IOAudio1::Device *)::$_1,std::allocator<AMCP::IOAudio1::Driver::handle_device_departure(AMCP::IOAudio1::Device *)::$_1>,void ()(void)>::destroy(uint64_t a1)
{
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor(a1 + 8);
}

void std::__function::__func<AMCP::IOAudio1::Driver::handle_device_departure(AMCP::IOAudio1::Device *)::$_1,std::allocator<AMCP::IOAudio1::Driver::handle_device_departure(AMCP::IOAudio1::Device *)::$_1>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<AMCP::IOAudio1::Driver::handle_device_departure(AMCP::IOAudio1::Device *)::$_1,std::allocator<AMCP::IOAudio1::Driver::handle_device_departure(AMCP::IOAudio1::Device *)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 is_valid;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  NSObject *v12;
  unint64_t *v13;
  unint64_t v14;
  _opaque_pthread_t *v15;
  mach_port_t v16;
  NSObject **v17;
  _BYTE v18[10];
  __int16 v19;
  int v20;
  __int16 v21;
  const char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 40);
  is_valid = AMCP::Utility::Expiration_Check::is_valid((AMCP::Utility::Expiration_Check *)(a1 + 8));
  if (!is_valid)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)is_valid);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v17, "com.apple.coreaudio", "AMCP");
    v11 = *(std::__shared_weak_count **)v18;
    v12 = *v17;
    if (*(_QWORD *)v18)
    {
      v13 = (unint64_t *)(*(_QWORD *)v18 + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v15 = pthread_self();
      v16 = pthread_mach_thread_np(v15);
      LODWORD(v17) = 67109890;
      HIDWORD(v17) = v16;
      *(_WORD *)v18 = 2080;
      *(_QWORD *)&v18[2] = "IOAudio1_Driver.cpp";
      v19 = 1024;
      v20 = 147;
      v21 = 2080;
      v22 = "expiration_check.is_valid()";
      _os_log_error_impl(&dword_1B57BA000, v12, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s caller has gone out of scope", (uint8_t *)&v17, 0x22u);
    }
    abort();
  }
  v4 = **(_QWORD **)(a1 + 48);
  v5 = v4 + 16;
  v6 = *(_QWORD *)(v2 + 72);
  if (v4 + 16 != v6)
  {
    do
    {
      v7 = *(_OWORD *)v5;
      *(_QWORD *)v5 = 0;
      *(_QWORD *)(v5 + 8) = 0;
      v8 = *(std::__shared_weak_count **)(v4 + 8);
      *(_OWORD *)v4 = v7;
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v5 += 16;
      v4 += 16;
    }
    while (v5 != v6);
    v5 = *(_QWORD *)(v2 + 72);
  }
  while (v5 != v4)
  {
    v5 -= 16;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v5);
  }
  *(_QWORD *)(v2 + 72) = v4;
}

uint64_t std::__function::__func<AMCP::IOAudio1::Driver::handle_device_departure(AMCP::IOAudio1::Device *)::$_1,std::allocator<AMCP::IOAudio1::Driver::handle_device_departure(AMCP::IOAudio1::Device *)::$_1>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio16Driver23handle_device_departureEPNS0_6DeviceEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IOAudio1::Driver::handle_device_departure(AMCP::IOAudio1::Device *)::$_1,std::allocator<AMCP::IOAudio1::Driver::handle_device_departure(AMCP::IOAudio1::Device *)::$_1>,void ()(void)>::target_type()
{
}

void AMCP::Core::Conductor::Conductor_Graph_Manager::~Conductor_Graph_Manager(AMCP::Core::Conductor::Conductor_Graph_Manager *this)
{
  *(_QWORD *)this = &off_1E69A00F8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 432);
  AMCP::IO_Core::Graph_Manager::~Graph_Manager(this);
}

{
  *(_QWORD *)this = &off_1E69A00F8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 432);
  AMCP::IO_Core::Graph_Manager::~Graph_Manager(this);
  JUMPOUT(0x1B5E50688);
}

uint64_t AMCP::Core::Conductor::Conductor_Graph_Manager::get_graph_host@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 440);
  *a2 = *(_QWORD *)(this + 432);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

void AMCP::Core::Conductor::Conductor_Graph_Manager::enqueue_config_change(uint64_t a1, unsigned int a2, unsigned int a3, int a4, uint64_t a5)
{
  AMCP::Core::Conductor::enqueue_config_change(*(_QWORD *)(a1 + 424), a2, a3, a4, a5);
}

void AMCP::Core::Conductor::Conductor_Graph_Manager::call_external_ioc_graph_update_observers(AMCP::Core::Conductor::Conductor_Graph_Manager *this, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const AMCP::Graph_Description *v9;
  uint64_t v10;
  AMCP::Log::Scope_Registry *v11;
  void *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _opaque_pthread_t *v17;
  mach_port_t v18;
  int v19;
  uint64_t v20;
  __int128 v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  _opaque_pthread_t *v25;
  mach_port_t v26;
  int v27;
  uint64_t v28;
  __int128 v29;
  NSObject *oslog;
  os_log_t osloga;
  NSObject *oslogb;
  os_log_t oslogc;
  void *v34[2];
  uint64_t v35;
  uint64_t (**v36)();
  void *v37[2];
  uint64_t v38;
  std::runtime_error v39;
  std::runtime_error v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  char v46;
  void *__p[3];
  char v48;
  __int128 v49;
  __int128 v50;
  uint8_t buf[8];
  _BYTE v52[10];
  __int16 v53;
  int v54;
  _BYTE v55[24];
  int v56;
  uint8_t v57[16];
  __int128 v58;
  unsigned __int8 *v59[3];
  _QWORD v60[7];

  v60[4] = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)this + 53);
  *(_QWORD *)v57 = v3 + 1784;
  v57[8] = 1;
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(v3 + 1784));
  if (*(_BYTE *)(v3 + 1952))
  {
    v49 = 0uLL;
    *(_QWORD *)&v50 = 0;
    if (AMCP::Utility::Sorted_Vector<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>,0ul>,std::less<unsigned int>,std::allocator<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>>>::find(*(_DWORD **)(v3 + 1960), *(_DWORD **)(v3 + 1968), a2))
    {
      AMCP::Utility::Sorted_Vector<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>,0ul>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>::insert_unique<std::__wrap_iter<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>> const*>,std::__wrap_iter<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>> const*>>(&v49, *(unint64_t **)(v4 + 8), *(unint64_t **)(v4 + 16));
    }
    v5 = *(_DWORD *)(v3 + 1992);
    if (v5 != a2
      && AMCP::Utility::Sorted_Vector<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>,0ul>,std::less<unsigned int>,std::allocator<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>>>::find(*(_DWORD **)(v3 + 1960), *(_DWORD **)(v3 + 1968), v5))
    {
      AMCP::Utility::Sorted_Vector<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>,0ul>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>::insert_unique<std::__wrap_iter<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>> const*>,std::__wrap_iter<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>> const*>>(&v49, *(unint64_t **)(v6 + 8), *(unint64_t **)(v6 + 16));
    }
  }
  else
  {
    v49 = 0u;
    v50 = 0u;
  }
  std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)v57);
  v8 = *((_QWORD *)&v49 + 1);
  v7 = v49;
  if ((_QWORD)v49 != *((_QWORD *)&v49 + 1))
  {
    v9 = (const AMCP::Graph_Description *)(v3 + 2648);
    do
    {
      v10 = *(_QWORD *)(v7 + 32);
      if (!v10)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint8_t *__return_ptr))(*(_QWORD *)v10 + 48))(v57);
      if (*(_QWORD *)v57 != *(_QWORD *)&v57[8])
      {
        v11 = (AMCP::Log::Scope_Registry *)AMCP::IO_Core::Graph_Manager::modify_graph_internal((AMCP::IO_Core::Graph_Manager *)__p, v9, (const AMCP::Modify_Graph_Destroy_List *)v57, v59);
        if (!v48)
        {
          AMCP::Log::Scope_Registry::get(v11);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v14 = *(std::__shared_weak_count **)v52;
          oslog = **(NSObject ***)buf;
          if (*(_QWORD *)v52)
          {
            v15 = (unint64_t *)(*(_QWORD *)v52 + 8);
            do
              v16 = __ldaxr(v15);
            while (__stlxr(v16 - 1, v15));
            if (!v16)
            {
              ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
              std::__shared_weak_count::__release_weak(v14);
            }
          }
          if (os_log_type_enabled(oslog, OS_LOG_TYPE_ERROR))
          {
            v17 = pthread_self();
            v18 = pthread_mach_thread_np(v17);
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)&buf[4] = v18;
            *(_WORD *)v52 = 2080;
            *(_QWORD *)&v52[2] = "Conductor.cpp";
            v53 = 1024;
            v54 = 624;
            *(_WORD *)v55 = 2080;
            *(_QWORD *)&v55[2] = "(modify_graph_result.operator BOOL()) == false";
            _os_log_error_impl(&dword_1B57BA000, oslog, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s modify graph failed", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v46);
          osloga = (os_log_t)__cxa_allocate_exception(0x40uLL);
          std::runtime_error::runtime_error(&v39, "modify graph failed");
          std::runtime_error::runtime_error(&v40, &v39);
          v42 = 0;
          v43 = 0;
          v44 = 0;
          v45 = -1;
          v40.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
          v41 = &unk_1E69A1FE0;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v40);
          *(_QWORD *)&v55[8] = "void AMCP::Core::Conductor::call_external_ioc_graph_update_observers(Object_ID)";
          *(_QWORD *)&v55[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Conductor.cpp";
          v56 = 624;
          std::vector<void *>::vector(v34);
          v19 = backtrace((void **)v34[0], (unint64_t)((char *)v34[1] - (char *)v34[0]) >> 3);
          std::vector<void *>::resize((char **)v34, v19);
          v36 = off_1E69A20A0;
          *(_OWORD *)v37 = *(_OWORD *)v34;
          v38 = v35;
          v34[0] = 0;
          v34[1] = 0;
          v35 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v36);
          osloga[7].isa = (Class)&unk_1E69A1F88;
          std::runtime_error::runtime_error((std::runtime_error *)osloga, (const std::runtime_error *)buf);
          osloga[2].isa = (Class)&unk_1E69A2000;
          v20 = *(_QWORD *)v55;
          osloga[3].isa = *(Class *)v55;
          if (v20)
            (*(void (**)(uint64_t))(*(_QWORD *)v20 + 24))(v20);
          v21 = *(_OWORD *)&v55[8];
          LODWORD(osloga[6].isa) = v56;
          *(_OWORD *)&osloga[4].isa = v21;
          osloga->isa = (Class)&off_1E69A1EE8;
          osloga[2].isa = (Class)&unk_1E69A1F20;
          osloga[7].isa = (Class)&unk_1E69A1F58;
        }
        v12 = __p[0];
        if ((void *)((char *)__p[1] - (char *)__p[0]) != (void *)4)
        {
          AMCP::Log::Scope_Registry::get(v11);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v22 = *(std::__shared_weak_count **)v52;
          oslogb = **(NSObject ***)buf;
          if (*(_QWORD *)v52)
          {
            v23 = (unint64_t *)(*(_QWORD *)v52 + 8);
            do
              v24 = __ldaxr(v23);
            while (__stlxr(v24 - 1, v23));
            if (!v24)
            {
              ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
              std::__shared_weak_count::__release_weak(v22);
            }
          }
          if (os_log_type_enabled(oslogb, OS_LOG_TYPE_ERROR))
          {
            v25 = pthread_self();
            v26 = pthread_mach_thread_np(v25);
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)&buf[4] = v26;
            *(_WORD *)v52 = 2080;
            *(_QWORD *)&v52[2] = "Conductor.cpp";
            v53 = 1024;
            v54 = 625;
            *(_WORD *)v55 = 2080;
            *(_QWORD *)&v55[2] = "(modify_graph_result->size() == 1) == false";
            _os_log_error_impl(&dword_1B57BA000, oslogb, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s modify_graph returned wrong number of nodes", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v46);
          oslogc = (os_log_t)__cxa_allocate_exception(0x40uLL);
          std::runtime_error::runtime_error(&v39, "modify_graph returned wrong number of nodes");
          std::runtime_error::runtime_error(&v40, &v39);
          v42 = 0;
          v43 = 0;
          v44 = 0;
          v45 = -1;
          v40.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
          v41 = &unk_1E69A1FE0;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v40);
          *(_QWORD *)&v55[8] = "void AMCP::Core::Conductor::call_external_ioc_graph_update_observers(Object_ID)";
          *(_QWORD *)&v55[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Conductor.cpp";
          v56 = 625;
          std::vector<void *>::vector(v34);
          v27 = backtrace((void **)v34[0], (unint64_t)((char *)v34[1] - (char *)v34[0]) >> 3);
          std::vector<void *>::resize((char **)v34, v27);
          v36 = off_1E69A20A0;
          *(_OWORD *)v37 = *(_OWORD *)v34;
          v38 = v35;
          v34[0] = 0;
          v34[1] = 0;
          v35 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v36);
          oslogc[7].isa = (Class)&unk_1E69A1F88;
          std::runtime_error::runtime_error((std::runtime_error *)oslogc, (const std::runtime_error *)buf);
          oslogc[2].isa = (Class)&unk_1E69A2000;
          v28 = *(_QWORD *)v55;
          oslogc[3].isa = *(Class *)v55;
          if (v28)
            (*(void (**)(uint64_t))(*(_QWORD *)v28 + 24))(v28);
          v29 = *(_OWORD *)&v55[8];
          LODWORD(oslogc[6].isa) = v56;
          *(_OWORD *)&oslogc[4].isa = v29;
          oslogc->isa = (Class)&off_1E69A1EE8;
          oslogc[2].isa = (Class)&unk_1E69A1F20;
          oslogc[7].isa = (Class)&unk_1E69A1F58;
        }
        v13 = *(_QWORD *)(v7 + 64);
        if (!v13)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v13 + 48))(v13, v57);
        if (v12)
          operator delete(v12);
      }
      *(_QWORD *)buf = v60;
      std::vector<AMCP::Wire_Identifier>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      *(_QWORD *)buf = v59;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      *(_QWORD *)buf = (char *)&v58 + 8;
      std::vector<AMCP::Wire_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      *(_QWORD *)buf = v57;
      std::vector<AMCP::Node_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      v7 += 72;
    }
    while (v7 != v8);
  }
  *(_QWORD *)v57 = &v49;
  std::vector<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v57);
}

void sub_1B5CA046C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1B5CA04A8(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1B5CA04B4);
  __clang_call_terminate(a1);
}

AMCP::Utility::Dispatch_Queue *AMCP::Core::Conductor::Conductor_Graph_Manager::get_work_queue@<X0>(AMCP::Core::Conductor::Conductor_Graph_Manager *this@<X0>, AMCP::Utility::Dispatch_Queue *a2@<X8>)
{
  return AMCP::Utility::Dispatch_Queue::Dispatch_Queue(a2, *(dispatch_object_t *)(*((_QWORD *)this + 53) + 32));
}

void AMCP::Core::Conductor::Conductor_Graph_Manager::get_device_list(AMCP::Core::Conductor::Conductor_Graph_Manager *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_mutex_base *v8;
  AMCP::Log::Scope_Registry *core;
  unint64_t v10;
  std::__shared_mutex_base *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  NSObject *v15;
  _opaque_pthread_t *v16;
  mach_port_t v17;
  void *exception;
  __int128 v19;
  uint64_t v20;
  uint64_t (**v21)();
  __int128 v22;
  uint64_t v23;
  std::string v24;
  std::logic_error v25;
  std::logic_error v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  char v32;
  AMCP::Core::Core *v33;
  std::__shared_weak_count *v34;
  uint8_t buf[8];
  __int16 v36;
  char *v37;
  __int16 v38;
  int v39;
  __int16 v40;
  _BYTE v41[14];
  const char *v42;
  int v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 54);
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 55);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = (std::__shared_mutex_base *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    core = (AMCP::Log::Scope_Registry *)AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v33, v8, 1u);
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    v11 = (std::__shared_mutex_base *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    core = (AMCP::Log::Scope_Registry *)AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v33, v11, 1u);
  }
  if (!v33)
  {
    AMCP::Log::Scope_Registry::get(core);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v15 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      v16 = pthread_self();
      v17 = pthread_mach_thread_np(v16);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v17;
      v36 = 2080;
      v37 = "Conductor.cpp";
      v38 = 1024;
      v39 = 743;
      v40 = 2080;
      *(_QWORD *)v41 = "not (system_core != nullptr)";
      _os_log_error_impl(&dword_1B57BA000, v15, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v32);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v24);
    std::logic_error::logic_error(&v25, &v24);
    v25.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v26, &v25);
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v31 = -1;
    v26.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v27 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v26);
    *(_QWORD *)&v41[6] = "virtual std::vector<Object_ID> AMCP::Core::Conductor::Conductor_Graph_Manager::get_device_list() const";
    v42 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Conductor.cpp";
    v43 = 743;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v19);
    v22 = v19;
    v23 = v20;
    v19 = 0uLL;
    v20 = 0;
    v21 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v21);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  AMCP::Core::Core::get_simple_required_property<1684370979u>(a2, v33);
  v12 = v34;
  if (v34)
  {
    v13 = (unint64_t *)&v34->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_1B5CA07CC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void AMCP::Core::Conductor::Conductor_Graph_Manager::get_clock_device_list(AMCP::Core::Conductor::Conductor_Graph_Manager *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_mutex_base *v8;
  AMCP::Log::Scope_Registry *core;
  unint64_t v10;
  std::__shared_mutex_base *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  NSObject *v15;
  _opaque_pthread_t *v16;
  mach_port_t v17;
  void *exception;
  __int128 v19;
  uint64_t v20;
  uint64_t (**v21)();
  __int128 v22;
  uint64_t v23;
  std::string v24;
  std::logic_error v25;
  std::logic_error v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  char v32;
  AMCP::Core::Core *v33;
  std::__shared_weak_count *v34;
  uint8_t buf[8];
  __int16 v36;
  char *v37;
  __int16 v38;
  int v39;
  __int16 v40;
  _BYTE v41[14];
  const char *v42;
  int v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 54);
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 55);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = (std::__shared_mutex_base *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    core = (AMCP::Log::Scope_Registry *)AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v33, v8, 1u);
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    v11 = (std::__shared_mutex_base *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    core = (AMCP::Log::Scope_Registry *)AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v33, v11, 1u);
  }
  if (!v33)
  {
    AMCP::Log::Scope_Registry::get(core);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v15 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      v16 = pthread_self();
      v17 = pthread_mach_thread_np(v16);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v17;
      v36 = 2080;
      v37 = "Conductor.cpp";
      v38 = 1024;
      v39 = 752;
      v40 = 2080;
      *(_QWORD *)v41 = "not (system_core != nullptr)";
      _os_log_error_impl(&dword_1B57BA000, v15, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v32);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v24);
    std::logic_error::logic_error(&v25, &v24);
    v25.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v26, &v25);
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v31 = -1;
    v26.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v27 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v26);
    *(_QWORD *)&v41[6] = "virtual std::vector<Object_ID> AMCP::Core::Conductor::Conductor_Graph_Manager::get_clock_device_list() const";
    v42 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Conductor.cpp";
    v43 = 752;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v19);
    v22 = v19;
    v23 = v20;
    v19 = 0uLL;
    v20 = 0;
    v21 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v21);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  AMCP::Core::Core::get_simple_required_property<1668049699u>(a2, v33);
  v12 = v34;
  if (v34)
  {
    v13 = (unint64_t *)&v34->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_1B5CA0AD0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::vector<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 9;
        std::__destroy_at[abi:ne180100]<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>,0>(v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *std::__destroy_at[abi:ne180100]<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>,0>(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;

  v2 = a1 + 1;
  v3 = a1 + 5;
  v4 = (_QWORD *)a1[8];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  result = (_QWORD *)a1[4];
  if (result == v2)
  {
    v7 = 4;
    result = v2;
  }
  else
  {
    if (!result)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

BOOL AMCP::Utility::Sorted_Vector<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>,0ul>,std::less<unsigned int>,std::allocator<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>>>::find(_DWORD *a1, _DWORD *a2, unsigned int a3)
{
  _DWORD *v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int *v6;
  _DWORD *v7;
  unsigned int v8;

  if (a2 == a1)
  {
    v3 = a2;
  }
  else
  {
    v3 = a1;
    v4 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a2 - (char *)a1) >> 3);
    do
    {
      v5 = v4 >> 1;
      v6 = &v3[10 * (v4 >> 1)];
      v8 = *v6;
      v7 = v6 + 10;
      v4 += ~(v4 >> 1);
      if (v8 < a3)
        v3 = v7;
      else
        v4 = v5;
    }
    while (v4);
  }
  return v3 != a2 && *v3 == a3;
}

_QWORD *AMCP::Utility::Sorted_Vector<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>,0ul>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>::insert_unique<std::__wrap_iter<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>> const*>,std::__wrap_iter<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>> const*>>(_QWORD *result, unint64_t *a2, unint64_t *a3)
{
  unint64_t *v4;
  _QWORD **v5;
  unint64_t v6;
  unint64_t *v7;
  _QWORD *v8;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (_QWORD **)result;
    do
    {
      v6 = *v4;
      if (AMCP::Utility::Sorted_Vector<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>,0ul>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>::find(*v5, v5[1], *v4))
      {
        *v7 = v6;
        v8 = v7 + 5;
        std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>::operator=(v7 + 1, (uint64_t)(v4 + 1));
        result = std::function<void ()(AMCP::Graph_Description const&)>::operator=(v8, (uint64_t)(v4 + 5));
      }
      else
      {
        result = std::vector<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>::insert(v5, v7, v4);
      }
      v4 += 9;
    }
    while (v4 != a3);
  }
  return result;
}

BOOL AMCP::Utility::Sorted_Vector<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>,0ul>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>::find(_QWORD *a1, _QWORD *a2, unint64_t a3)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  _QWORD *v7;
  unint64_t v8;

  if (a2 == a1)
  {
    v3 = a2;
  }
  else
  {
    v3 = a1;
    v4 = 0x8E38E38E38E38E39 * (a2 - a1);
    do
    {
      v5 = v4 >> 1;
      v6 = &v3[9 * (v4 >> 1)];
      v8 = *v6;
      v7 = v6 + 9;
      v4 += ~(v4 >> 1);
      if (v8 < a3)
        v3 = v7;
      else
        v4 = v5;
    }
    while (v4);
  }
  return v3 != a2 && *v3 == a3;
}

_QWORD *std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>::operator=(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  _QWORD v10[4];

  v10[3] = *MEMORY[0x1E0C80C00];
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v8, a2);
  if (v8 != a1)
  {
    v3 = v9;
    v4 = (_QWORD *)a1[3];
    if (v9 == v8)
    {
      if (v4 == a1)
      {
        (*(void (**)(_QWORD *, _QWORD *))(v8[0] + 24))(v8, v10);
        (*(void (**)(_QWORD *))(*v9 + 32))(v9);
        v9 = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a1[3] + 24))(a1[3], v8);
        (*(void (**)(_QWORD))(*(_QWORD *)a1[3] + 32))(a1[3]);
        a1[3] = 0;
        v9 = v8;
        (*(void (**)(_QWORD *, _QWORD *))(v10[0] + 24))(v10, a1);
        (*(void (**)(_QWORD *))(v10[0] + 32))(v10);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(v8[0] + 24))(v8, a1);
        (*(void (**)(_QWORD *))(*v9 + 32))(v9);
        v9 = (_QWORD *)a1[3];
      }
      a1[3] = a1;
    }
    else if (v4 == a1)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a1 + 24))(a1, v8);
      (*(void (**)(_QWORD))(*(_QWORD *)a1[3] + 32))(a1[3]);
      a1[3] = v9;
      v9 = v8;
    }
    else
    {
      v9 = (_QWORD *)a1[3];
      a1[3] = v3;
    }
  }
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_14;
  }
  if (v9)
  {
    v6 = 5;
LABEL_14:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return a1;
}

void sub_1B5CA0F04(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

_QWORD *std::function<void ()(AMCP::Graph_Description const&)>::operator=(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  _QWORD v10[4];

  v10[3] = *MEMORY[0x1E0C80C00];
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v8, a2);
  if (v8 != a1)
  {
    v3 = v9;
    v4 = (_QWORD *)a1[3];
    if (v9 == v8)
    {
      if (v4 == a1)
      {
        (*(void (**)(_QWORD *, _QWORD *))(v8[0] + 24))(v8, v10);
        (*(void (**)(_QWORD *))(*v9 + 32))(v9);
        v9 = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a1[3] + 24))(a1[3], v8);
        (*(void (**)(_QWORD))(*(_QWORD *)a1[3] + 32))(a1[3]);
        a1[3] = 0;
        v9 = v8;
        (*(void (**)(_QWORD *, _QWORD *))(v10[0] + 24))(v10, a1);
        (*(void (**)(_QWORD *))(v10[0] + 32))(v10);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(v8[0] + 24))(v8, a1);
        (*(void (**)(_QWORD *))(*v9 + 32))(v9);
        v9 = (_QWORD *)a1[3];
      }
      a1[3] = a1;
    }
    else if (v4 == a1)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a1 + 24))(a1, v8);
      (*(void (**)(_QWORD))(*(_QWORD *)a1[3] + 32))(a1[3]);
      a1[3] = v9;
      v9 = v8;
    }
    else
    {
      v9 = (_QWORD *)a1[3];
      a1[3] = v3;
    }
  }
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_14;
  }
  if (v9)
  {
    v6 = 5;
LABEL_14:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return a1;
}

void sub_1B5CA10C0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>::insert(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v3;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  __int128 v47;
  __int128 v48;
  _QWORD *v49;
  __int128 v50;
  __int128 v51;
  _QWORD *v52;

  v3 = a3;
  v5 = (_QWORD *)*a1;
  v6 = a1[1];
  v7 = (uint64_t)a2 - *a1;
  v8 = v7 / 72;
  v9 = (_QWORD *)(*a1 + 72 * (v7 / 72));
  v11 = a1 + 2;
  v10 = a1[2];
  if (v6 >= v10)
  {
    v19 = 0x8E38E38E38E38E39 * ((uint64_t)(v6 - (_QWORD)v5) >> 3) + 1;
    if (v19 > 0x38E38E38E38E38ELL)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v21 = 0x8E38E38E38E38E39 * ((uint64_t)(v10 - (_QWORD)v5) >> 3);
    if (2 * v21 > v19)
      v19 = 2 * v21;
    if (v21 >= 0x1C71C71C71C71C7)
      v22 = 0x38E38E38E38E38ELL;
    else
      v22 = v19;
    v49 = v11;
    if (v22)
    {
      v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>(v22);
    }
    else
    {
      v24 = 0;
      v23 = 0;
    }
    v25 = &v24[72 * v8];
    *(_QWORD *)&v47 = v24;
    *((_QWORD *)&v47 + 1) = v25;
    *(_QWORD *)&v48 = v25;
    *((_QWORD *)&v48 + 1) = &v24[72 * v23];
    if (v8 == v23)
    {
      if (v7 < 1)
      {
        if (v5 == a2)
          v27 = 1;
        else
          v27 = 2 * v8;
        v52 = v11;
        v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>(v27);
        v29 = &v28[72 * (v27 >> 2)];
        *(_QWORD *)&v50 = v28;
        *((_QWORD *)&v50 + 1) = v29;
        *((_QWORD *)&v51 + 1) = &v28[72 * v30];
        if ((_QWORD)v48 != *((_QWORD *)&v47 + 1))
        {
          v31 = ((_QWORD)v48 - *((_QWORD *)&v47 + 1)) / 72;
          v29 += 72 * v31;
          v32 = 72 * v31;
          v33 = (uint64_t)&v28[72 * (v27 >> 2) + 40];
          v34 = *((_QWORD *)&v47 + 1) + 40;
          do
          {
            *(_QWORD *)(v33 - 40) = *(_QWORD *)(v34 - 40);
            std::__function::__value_func<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>::__value_func[abi:ne180100](v33 - 32, v34 - 32);
            std::__function::__value_func<void ()(AMCP::Graph_Description const&)>::__value_func[abi:ne180100](v33, v34);
            v33 += 72;
            v34 += 72;
            v32 -= 72;
          }
          while (v32);
        }
        *(_QWORD *)&v51 = v29;
        v35 = v47;
        v36 = v48;
        v47 = v50;
        v48 = v51;
        v50 = v35;
        v51 = v36;
        std::__split_buffer<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>::~__split_buffer((uint64_t)&v50);
        v25 = (char *)v48;
      }
      else
      {
        v26 = v8 + 2;
        if (v8 >= -1)
          v26 = v8 + 1;
        v25 -= 72 * (v26 >> 1);
        *((_QWORD *)&v47 + 1) = v25;
        *(_QWORD *)&v48 = v25;
      }
    }
    *(_QWORD *)v25 = *v3;
    std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>::pair[abi:ne180100]((uint64_t)(v25 + 8), (uint64_t)(v3 + 1));
    v37 = *((_QWORD *)&v47 + 1);
    v38 = v48 + 72;
    *(_QWORD *)&v48 = v48 + 72;
    v39 = (_QWORD *)*a1;
    if (v9 == (_QWORD *)*a1)
    {
      v41 = *((_QWORD *)&v47 + 1);
    }
    else
    {
      v40 = 0;
      do
      {
        *(_QWORD *)(v37 + v40 * 8 - 72) = v9[v40 - 9];
        std::__function::__value_func<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>::__value_func[abi:ne180100](v37 + v40 * 8 - 64, (uint64_t)&v9[v40 - 8]);
        std::__function::__value_func<void ()(AMCP::Graph_Description const&)>::__value_func[abi:ne180100](v37 + v40 * 8 - 32, (uint64_t)&v9[v40 - 4]);
        v40 -= 9;
      }
      while (&v9[v40] != v39);
      v41 = v37 + v40 * 8;
      v38 = v48;
    }
    *((_QWORD *)&v47 + 1) = v41;
    v42 = (_QWORD *)a1[1];
    if (v9 != v42)
    {
      v43 = 0;
      do
      {
        *(_QWORD *)(v38 + v43 * 8) = v9[v43];
        std::__function::__value_func<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>::__value_func[abi:ne180100](v38 + v43 * 8 + 8, (uint64_t)&v9[v43 + 1]);
        std::__function::__value_func<void ()(AMCP::Graph_Description const&)>::__value_func[abi:ne180100](v38 + v43 * 8 + 40, (uint64_t)&v9[v43 + 5]);
        v43 += 9;
      }
      while (&v9[v43] != v42);
      v38 += v43 * 8;
      v41 = *((_QWORD *)&v47 + 1);
      v9 = (_QWORD *)a1[1];
    }
    v44 = (_QWORD *)*a1;
    *a1 = v41;
    a1[1] = v38;
    v45 = a1[2];
    a1[2] = *((_QWORD *)&v48 + 1);
    *(_QWORD *)&v48 = v9;
    *((_QWORD *)&v48 + 1) = v45;
    *(_QWORD *)&v47 = v44;
    *((_QWORD *)&v47 + 1) = v44;
    std::__split_buffer<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>::~__split_buffer((uint64_t)&v47);
    return (_QWORD *)v37;
  }
  else if (v9 == (_QWORD *)v6)
  {
    *v9 = *a3;
    std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>::pair[abi:ne180100]((uint64_t)(v9 + 1), (uint64_t)(a3 + 1));
    a1[1] = v9 + 9;
  }
  else
  {
    v12 = 0x8E38E38E38E38E39 * ((uint64_t)(v6 - (_QWORD)(v9 + 9)) >> 3);
    v13 = (_QWORD *)(v6 - 72);
    v14 = a1[1];
    if (v6 >= 0x48)
    {
      v15 = 0;
      v16 = &v5[9 * v8 + ((uint64_t)(v6 - (_QWORD)(v9 + 9)) >> 3)];
      do
      {
        *(_QWORD *)(v6 + v15 * 8) = v16[v15];
        std::__function::__value_func<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>::__value_func[abi:ne180100](v6 + v15 * 8 + 8, (uint64_t)&v16[v15 + 1]);
        std::__function::__value_func<void ()(AMCP::Graph_Description const&)>::__value_func[abi:ne180100](v6 + v15 * 8 + 40, (uint64_t)&v16[v15 + 5]);
        v15 += 9;
      }
      while ((unint64_t)&v16[v15] < v6);
      v14 = v6 + v15 * 8;
      v12 = 0x8E38E38E38E38E39 * ((uint64_t)(v6 - (_QWORD)(v9 + 9)) >> 3);
    }
    a1[1] = v14;
    if ((_QWORD *)v6 != v9 + 9)
    {
      v17 = 9 * v12;
      do
      {
        v18 = v13 + 1;
        *v13 = v9[v17 - 9];
        v13 -= 9;
        std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>::operator=[abi:ne180100](v18, (uint64_t)&v9[v17 - 8]);
        v17 -= 9;
      }
      while (v17 * 8);
    }
    if (v9 <= v3)
      v3 += 9 * (a1[1] > (unint64_t)v3);
    *v9 = *v3;
    std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>::operator=(v9 + 1, (uint64_t)(v3 + 1));
    std::function<void ()(AMCP::Graph_Description const&)>::operator=(v9 + 5, (uint64_t)(v3 + 5));
  }
  return v9;
}

void sub_1B5CA1508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)(v12 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>::pair[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](a1, a2);
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](v4 + 32, a2 + 32);
  return a1;
}

void sub_1B5CA155C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)v1[3];
  if (v3 == v1)
  {
    v4 = 4;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v4))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>(unint64_t a1)
{
  if (a1 >= 0x38E38E38E38E38FLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(72 * a1);
}

uint64_t std::__split_buffer<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 72;
    std::__destroy_at[abi:ne180100]<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>,0>((_QWORD *)(i - 72));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__function::__value_func<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t std::__function::__value_func<void ()(AMCP::Graph_Description const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

_QWORD *std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>::operator=[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v5 = a1 + 3;
  v4 = (_QWORD *)a1[3];
  *v5 = 0;
  if (v4 == a1)
  {
    v6 = 4;
    v4 = a1;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v6))();
LABEL_6:
  v7 = (_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 24);
  if (!v8)
  {
    v7 = v5;
    goto LABEL_10;
  }
  if (v8 != a2)
  {
    *v5 = v8;
LABEL_10:
    *v7 = 0;
    goto LABEL_12;
  }
  a1[3] = a1;
  (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)*v7 + 24))(*v7, a1);
LABEL_12:
  v10 = a1 + 7;
  v9 = (_QWORD *)a1[7];
  a1[7] = 0;
  if (v9 == a1 + 4)
  {
    v11 = 4;
    v9 = a1 + 4;
  }
  else
  {
    if (!v9)
      goto LABEL_17;
    v11 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v11))();
LABEL_17:
  v12 = (_QWORD *)(a2 + 56);
  v13 = *(_QWORD *)(a2 + 56);
  if (v13)
  {
    if (v13 == a2 + 32)
    {
      *v10 = a1 + 4;
      (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)*v12 + 24))(*v12, a1 + 4);
      return a1;
    }
    *v10 = v13;
  }
  else
  {
    v12 = a1 + 7;
  }
  *v12 = 0;
  return a1;
}

void AMCP::Core::Conductor::enqueue_config_change(uint64_t a1, unsigned int a2, unsigned int a3, int a4, uint64_t a5)
{
  std::mutex *v10;
  uint64_t *v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD *v18;
  __int128 v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::mutex **v25;
  _QWORD *v26;
  __int128 v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  _OWORD *v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  std::mutex *v45;
  unint64_t *v46;
  unint64_t v47;
  std::mutex **v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  std::mutex **v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  int64x2_t v62;
  NSObject *v63;
  char *v64;
  std::mutex *v65;
  unint64_t *opaque;
  unint64_t v67;
  _OWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t *v76;
  uint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t *v80;
  uint64_t *v81;
  unsigned int *v82;
  int v83;
  char *v84;
  dispatch_object_t *v85;
  NSObject *v86;
  NSObject **v87;
  __int128 v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::mutex *v92;
  unint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  __int128 *v97;
  unint64_t v98;
  char *v99;
  _QWORD *v100;
  uint64_t v101;
  unint64_t v102;
  _OWORD *v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t *v109;
  unint64_t v110;
  _QWORD *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  unint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  char *v124;
  int64x2_t v125;
  NSObject *v126;
  char *v127;
  uint64_t v128;
  unint64_t *v129;
  unint64_t v130;
  __int128 *v131;
  uint64_t v132;
  __int128 *v133;
  __int128 *v134;
  __int128 v135;
  __int128 *v136;
  uint64_t v137;
  char *v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  uint64_t v141;
  unint64_t v142;
  dispatch_object_t *p_object;
  uint64_t v144;
  int64x2_t *v145;
  _QWORD *v146;
  unint64_t v147;
  unint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  char *v155;
  char *v156;
  unint64_t *v157;
  unint64_t v158;
  _QWORD *v159;
  _QWORD *v160;
  char *v161;
  __int128 v162;
  int64x2_t v163;
  uint64_t v164;
  void *v165;
  unint64_t *v166;
  unint64_t v167;
  NSObject *v168;
  _QWORD *v169;
  __int128 v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  NSObject *isa;
  _opaque_pthread_t *v186;
  mach_port_t v187;
  uint64_t v188;
  int v189;
  __int128 v190;
  __int128 v191;
  std::unique_lock<std::mutex> __lk;
  std::mutex *v193[2];
  uint64_t v194;
  _BYTE queue[24];
  char *v196;
  __int128 v197;
  dispatch_object_t object;
  int64x2_t v199;
  __int128 v200;
  uint64_t v201;

  v201 = *MEMORY[0x1E0C80C00];
  v193[0] = 0;
  v193[1] = 0;
  v10 = (std::mutex *)(a1 + 992);
  std::mutex::lock((std::mutex *)(a1 + 992));
  v189 = a4;
  if ((a4 & 2) != 0)
  {
    v18 = operator new(0xE0uLL);
    v18[1] = 0;
    v18[2] = 0;
    *v18 = &off_1E69A0AA0;
    v18[3] = 850045863;
    *((_OWORD *)v18 + 2) = 0u;
    *((_OWORD *)v18 + 3) = 0u;
    *((_OWORD *)v18 + 4) = 0u;
    v18[10] = 0;
    v18[11] = 1018212795;
    *((_OWORD *)v18 + 6) = 0u;
    *((_OWORD *)v18 + 7) = 0u;
    v18[16] = 0;
    v18[17] = 1018212795;
    *((_OWORD *)v18 + 9) = 0u;
    *((_OWORD *)v18 + 10) = 0u;
    v18[22] = 0;
    *((_DWORD *)v18 + 46) = a2;
    *((_BYTE *)v18 + 188) = 0;
    v18[24] = 0;
    v18[25] = 0;
    v18[26] = 0;
    *(_QWORD *)&v19 = v18 + 3;
    *((_QWORD *)&v19 + 1) = v18;
    v20 = (std::__shared_weak_count *)v193[1];
    *(_OWORD *)v193 = v19;
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
  else
  {
    v11 = *(uint64_t **)(a1 + 1104);
    v12 = *(uint64_t **)(a1 + 1112);
    if (v12 == v11)
    {
      v11 = *(uint64_t **)(a1 + 1112);
    }
    else
    {
      v13 = ((char *)v12 - (char *)v11) >> 4;
      do
      {
        v14 = v13 >> 1;
        v15 = &v11[2 * (v13 >> 1)];
        v17 = *v15;
        v16 = v15 + 2;
        v13 += ~(v13 >> 1);
        if (*(_DWORD *)(v17 + 160) < a2)
          v11 = v16;
        else
          v13 = v14;
      }
      while (v13);
    }
    if (v12 != v11)
    {
      v23 = *v11;
      if (*(_DWORD *)(*v11 + 160) == a2)
      {
        v24 = v11[1];
        v25 = v193;
LABEL_54:
        std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100](v25, v23, v24);
        goto LABEL_76;
      }
    }
    v26 = operator new(0xE0uLL);
    v26[1] = 0;
    v26[2] = 0;
    *v26 = &off_1E69A0AA0;
    v26[3] = 850045863;
    *((_OWORD *)v26 + 2) = 0u;
    *((_OWORD *)v26 + 3) = 0u;
    *((_OWORD *)v26 + 4) = 0u;
    v26[10] = 0;
    v26[11] = 1018212795;
    *((_OWORD *)v26 + 6) = 0u;
    *((_OWORD *)v26 + 7) = 0u;
    v26[16] = 0;
    v26[17] = 1018212795;
    *((_OWORD *)v26 + 9) = 0u;
    *((_OWORD *)v26 + 10) = 0u;
    v26[22] = 0;
    *((_DWORD *)v26 + 46) = a2;
    *((_BYTE *)v26 + 188) = 0;
    v26[24] = 0;
    v26[25] = 0;
    v26[26] = 0;
    *(_QWORD *)&v27 = v26 + 3;
    *((_QWORD *)&v27 + 1) = v26;
    v28 = (std::__shared_weak_count *)v193[1];
    *(_OWORD *)v193 = v27;
    if (v28)
    {
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    v31 = *(uint64_t **)(a1 + 1104);
    v32 = *(char **)(a1 + 1112);
    v33 = *(_QWORD *)(a1 + 1120);
    v34 = (char *)v11 - (char *)v31;
    v35 = ((char *)v11 - (char *)v31) >> 4;
    v36 = (unint64_t)v31 + (((char *)v11 - (char *)v31) & 0xFFFFFFFFFFFFFFF0);
    if ((unint64_t)v32 >= v33)
    {
      v41 = ((v32 - (char *)v31) >> 4) + 1;
      if (v41 >> 60)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v42 = v33 - (_QWORD)v31;
      if (v42 >> 3 > v41)
        v41 = v42 >> 3;
      if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF0)
        v43 = 0xFFFFFFFFFFFFFFFLL;
      else
        v43 = v41;
      *(_QWORD *)&v197 = a1 + 1120;
      if (v43)
        v43 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v43);
      else
        v44 = 0;
      v48 = (std::mutex **)(v43 + 16 * v35);
      *(_QWORD *)queue = v43;
      *(_QWORD *)&queue[8] = v48;
      *(_QWORD *)&queue[16] = v48;
      v196 = (char *)(v43 + 16 * v44);
      if (v35 == v44)
      {
        if (v34 < 1)
        {
          if (v11 == v31)
            v53 = 1;
          else
            v53 = v34 >> 3;
          *((_QWORD *)&v200 + 1) = a1 + 1120;
          v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v53);
          v56 = *(_QWORD *)&queue[8];
          v57 = *(_QWORD *)&queue[16] - *(_QWORD *)&queue[8];
          if (*(_QWORD *)&queue[16] == *(_QWORD *)&queue[8])
          {
            v62 = vdupq_n_s64(*(unint64_t *)&queue[8]);
            v59 = (unint64_t)&v54[16 * (v53 >> 2)];
          }
          else
          {
            v58 = v57 >> 4;
            v59 = (unint64_t)&v54[16 * (v53 >> 2) + (v57 & 0xFFFFFFFFFFFFFFF0)];
            v60 = 16 * v58;
            v61 = &v54[16 * (v53 >> 2)];
            do
            {
              *(_OWORD *)v61 = *(_OWORD *)v56;
              v61 += 16;
              *(_QWORD *)v56 = 0;
              *(_QWORD *)(v56 + 8) = 0;
              v56 += 16;
              v60 -= 16;
            }
            while (v60);
            v62 = *(int64x2_t *)&queue[8];
          }
          v63 = *(NSObject **)queue;
          v64 = v196;
          *(_QWORD *)queue = v54;
          *(_QWORD *)&queue[8] = &v54[16 * (v53 >> 2)];
          v199 = v62;
          *(_QWORD *)&queue[16] = v59;
          v196 = &v54[16 * v55];
          object = v63;
          *(_QWORD *)&v200 = v64;
          std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)&object);
          v48 = *(std::mutex ***)&queue[16];
        }
        else
        {
          v49 = v35 + 2;
          if (v35 >= -1)
            v49 = v35 + 1;
          v48 -= 2 * (v49 >> 1);
          *(_QWORD *)&queue[8] = v48;
          *(_QWORD *)&queue[16] = v48;
        }
      }
      *v48 = v193[0];
      v65 = v193[1];
      v48[1] = v193[1];
      if (v65)
      {
        opaque = (unint64_t *)v65->__m_.__opaque;
        do
          v67 = __ldxr(opaque);
        while (__stxr(v67 + 1, opaque));
        v48 = *(std::mutex ***)&queue[16];
      }
      v68 = v48 + 2;
      *(_QWORD *)&queue[16] = v68;
      v69 = *(_QWORD *)&queue[8];
      v70 = *(_QWORD **)(a1 + 1104);
      if (v70 != (_QWORD *)v36)
      {
        v71 = (_QWORD *)v36;
        do
        {
          v72 = *((_OWORD *)v71 - 1);
          v71 -= 2;
          *(_OWORD *)(v69 - 16) = v72;
          v69 -= 16;
          *v71 = 0;
          v71[1] = 0;
        }
        while (v71 != v70);
        v68 = *(_OWORD **)&queue[16];
      }
      *(_QWORD *)&queue[8] = v69;
      v73 = *(_QWORD *)(a1 + 1112);
      if (v73 != v36)
      {
        do
        {
          *v68++ = *(_OWORD *)v36;
          *(_QWORD *)v36 = 0;
          *(_QWORD *)(v36 + 8) = 0;
          v36 += 16;
        }
        while (v36 != v73);
        v69 = *(_QWORD *)&queue[8];
        v36 = *(_QWORD *)(a1 + 1112);
      }
      v74 = *(_QWORD *)(a1 + 1104);
      *(_QWORD *)(a1 + 1104) = v69;
      *(_QWORD *)(a1 + 1112) = v68;
      v75 = *(char **)(a1 + 1120);
      *(_QWORD *)(a1 + 1120) = v196;
      *(_QWORD *)&queue[16] = v36;
      v196 = v75;
      *(_QWORD *)queue = v74;
      *(_QWORD *)&queue[8] = v74;
      std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)queue);
    }
    else
    {
      if ((char *)v36 != v32)
      {
        v37 = (char *)(v36 + 16);
        v38 = (uint64_t)(v32 - 16);
        if ((unint64_t)v32 < 0x10)
        {
          v40 = *(_OWORD **)(a1 + 1112);
        }
        else
        {
          v39 = v32 - 16;
          v40 = *(_OWORD **)(a1 + 1112);
          do
          {
            *v40++ = *(_OWORD *)v39;
            *(_QWORD *)v39 = 0;
            *((_QWORD *)v39 + 1) = 0;
            v39 += 16;
          }
          while (v39 < v32);
        }
        *(_QWORD *)(a1 + 1112) = v40;
        if (v32 != v37)
        {
          v50 = 16 * ((v32 - v37) >> 4);
          v51 = (uint64_t)&v31[2 * v35 - 2];
          do
          {
            v38 = std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100](v38, (__int128 *)(v51 + v50)) - 16;
            v50 -= 16;
          }
          while (v50);
        }
        v52 = v193;
        if (v36 <= (unint64_t)v193)
          v52 = &v193[2 * (*(_QWORD *)(a1 + 1112) > (unint64_t)v193)];
        v23 = (uint64_t)*v52;
        v24 = (uint64_t)v52[1];
        v25 = (std::mutex **)v36;
        goto LABEL_54;
      }
      v45 = v193[1];
      *(_OWORD *)v32 = *(_OWORD *)v193;
      if (v45)
      {
        v46 = (unint64_t *)v45->__m_.__opaque;
        do
          v47 = __ldxr(v46);
        while (__stxr(v47 + 1, v46));
      }
      *(_QWORD *)(a1 + 1112) = v32 + 16;
    }
  }
LABEL_76:
  std::mutex::unlock(v10);
  if (!v193[0])
    goto LABEL_217;
  __lk.__m_ = v193[0];
  __lk.__owns_ = 1;
  std::mutex::lock(v193[0]);
  v191 = 0uLL;
  v77 = *(uint64_t **)&v193[0][2].__m_.__opaque[32];
  v76 = *(uint64_t **)&v193[0][2].__m_.__opaque[40];
  if (v76 == v77)
  {
    v77 = *(uint64_t **)&v193[0][2].__m_.__opaque[40];
  }
  else
  {
    v78 = ((char *)v76 - (char *)v77) >> 4;
    do
    {
      v79 = v78 >> 1;
      v80 = &v77[2 * (v78 >> 1)];
      v82 = (unsigned int *)*v80;
      v81 = v80 + 2;
      v78 += ~(v78 >> 1);
      if (*v82 < a3)
        v77 = v81;
      else
        v78 = v79;
    }
    while (v78);
  }
  if (v76 == v77 || *(_DWORD *)*v77 != a3)
  {
    v188 = a5;
    AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)queue, *(dispatch_object_t *)(a1 + 672));
    v84 = (char *)operator new(0x180uLL);
    *(_OWORD *)(v84 + 8) = 0u;
    *(_QWORD *)v84 = &off_1E69A0AF0;
    *((_DWORD *)v84 + 6) = a3;
    *((_OWORD *)v84 + 2) = 0u;
    v85 = (dispatch_object_t *)(v84 + 32);
    *((_QWORD *)v84 + 9) = 0;
    *((_OWORD *)v84 + 5) = 0u;
    *((_OWORD *)v84 + 3) = 0u;
    *((_WORD *)v84 + 32) = 0;
    *((_QWORD *)v84 + 12) = 850045863;
    *(_OWORD *)(v84 + 104) = 0u;
    *(_OWORD *)(v84 + 120) = 0u;
    *(_OWORD *)(v84 + 136) = 0u;
    *(_OWORD *)(v84 + 152) = 0u;
    *(_OWORD *)(v84 + 168) = 0u;
    *((_QWORD *)v84 + 23) = 850045863;
    *((_OWORD *)v84 + 12) = 0u;
    *((_OWORD *)v84 + 13) = 0u;
    *((_OWORD *)v84 + 14) = 0u;
    *((_OWORD *)v84 + 15) = 0u;
    *((_OWORD *)v84 + 16) = 0u;
    *((_QWORD *)v84 + 34) = 850045863;
    *(_OWORD *)(v84 + 280) = 0u;
    *(_OWORD *)(v84 + 296) = 0u;
    *(_OWORD *)(v84 + 312) = 0u;
    *(_OWORD *)(v84 + 328) = 0u;
    *((_QWORD *)v84 + 43) = dispatch_semaphore_create(0);
    *((_DWORD *)v84 + 88) = 0;
    *((_QWORD *)v84 + 45) = 0;
    *((_OWORD *)v84 + 23) = 0u;
    v86 = dispatch_queue_create("AMCP Queued Change Queue", 0);
    v87 = AMCP::Utility::Dispatch_Queue::operator=((NSObject **)v84 + 4, v86);
    if (v86)
      dispatch_release(v86);
    if (!*v85)
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v87);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&object, "com.apple.coreaudio", "AMCP");
      isa = object->isa;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&object);
      if (os_log_type_enabled(isa, OS_LOG_TYPE_ERROR))
      {
        v186 = pthread_self();
        v187 = pthread_mach_thread_np(v186);
        LODWORD(object) = 67109890;
        HIDWORD(object) = v187;
        v199.i16[0] = 2080;
        *(uint64_t *)((char *)v199.i64 + 2) = (uint64_t)"Conductor.h";
        v199.i16[5] = 1024;
        v199.i32[3] = 167;
        LOWORD(v200) = 2080;
        *(_QWORD *)((char *)&v200 + 2) = "m_execution_queue.operator BOOL() == true";
        _os_log_error_impl(&dword_1B57BA000, isa, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s ", (uint8_t *)&object, 0x22u);
      }
      abort();
    }
    AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)&object, *v85);
    dispatch_set_target_queue(object, *(dispatch_queue_t *)queue);
    AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)&object);
    *(_QWORD *)&v88 = v84 + 24;
    *((_QWORD *)&v88 + 1) = v84;
    v89 = (std::__shared_weak_count *)*((_QWORD *)&v191 + 1);
    v191 = v88;
    if (v89)
    {
      v90 = (unint64_t *)&v89->__shared_owners_;
      do
        v91 = __ldaxr(v90);
      while (__stlxr(v91 - 1, v90));
      if (!v91)
      {
        ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
        std::__shared_weak_count::__release_weak(v89);
      }
    }
    AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)queue);
    v92 = v193[0];
    v94 = *(uint64_t **)&v193[0][2].__m_.__opaque[32];
    v93 = *(_QWORD *)&v193[0][2].__m_.__opaque[40];
    v95 = (char *)v77 - (char *)v94;
    v96 = ((char *)v77 - (char *)v94) >> 4;
    v97 = (__int128 *)((char *)v94 + (((char *)v77 - (char *)v94) & 0xFFFFFFFFFFFFFFF0));
    v99 = &v193[0][2].__m_.__opaque[48];
    v98 = *(_QWORD *)&v193[0][2].__m_.__opaque[48];
    if (v93 >= v98)
    {
      v104 = ((uint64_t)(v93 - (_QWORD)v94) >> 4) + 1;
      if (v104 >> 60)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v105 = v98 - (_QWORD)v94;
      if (v105 >> 3 > v104)
        v104 = v105 >> 3;
      if ((unint64_t)v105 >= 0x7FFFFFFFFFFFFFF0)
        v106 = 0xFFFFFFFFFFFFFFFLL;
      else
        v106 = v104;
      *(_QWORD *)&v197 = (char *)v193[0] + 184;
      if (v106)
        v106 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v106);
      else
        v107 = 0;
      v111 = (_QWORD *)(v106 + 16 * v96);
      *(_QWORD *)queue = v106;
      *(_QWORD *)&queue[8] = v111;
      *(_QWORD *)&queue[16] = v111;
      v196 = (char *)(v106 + 16 * v107);
      if (v96 == v107)
      {
        if (v95 < 1)
        {
          if (v77 == v94)
            v116 = 1;
          else
            v116 = v95 >> 3;
          *((_QWORD *)&v200 + 1) = v99;
          v117 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v116);
          v119 = *(_QWORD *)&queue[8];
          v120 = *(_QWORD *)&queue[16] - *(_QWORD *)&queue[8];
          if (*(_QWORD *)&queue[16] == *(_QWORD *)&queue[8])
          {
            v125 = vdupq_n_s64(*(unint64_t *)&queue[8]);
            v122 = (unint64_t)&v117[16 * (v116 >> 2)];
          }
          else
          {
            v121 = v120 >> 4;
            v122 = (unint64_t)&v117[16 * (v116 >> 2) + (v120 & 0xFFFFFFFFFFFFFFF0)];
            v123 = 16 * v121;
            v124 = &v117[16 * (v116 >> 2)];
            do
            {
              *(_OWORD *)v124 = *(_OWORD *)v119;
              v124 += 16;
              *(_QWORD *)v119 = 0;
              *(_QWORD *)(v119 + 8) = 0;
              v119 += 16;
              v123 -= 16;
            }
            while (v123);
            v125 = *(int64x2_t *)&queue[8];
          }
          v126 = *(NSObject **)queue;
          v127 = v196;
          *(_QWORD *)queue = v117;
          *(_QWORD *)&queue[8] = &v117[16 * (v116 >> 2)];
          v199 = v125;
          *(_QWORD *)&queue[16] = v122;
          v196 = &v117[16 * v118];
          object = v126;
          *(_QWORD *)&v200 = v127;
          std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)&object);
          v111 = *(_QWORD **)&queue[16];
        }
        else
        {
          v112 = v96 + 2;
          if (v96 >= -1)
            v112 = v96 + 1;
          v111 -= 2 * (v112 >> 1);
          *(_QWORD *)&queue[8] = v111;
          *(_QWORD *)&queue[16] = v111;
        }
      }
      *v111 = v191;
      v128 = *((_QWORD *)&v191 + 1);
      v111[1] = *((_QWORD *)&v191 + 1);
      v83 = v189;
      if (v128)
      {
        v129 = (unint64_t *)(v128 + 8);
        do
          v130 = __ldxr(v129);
        while (__stxr(v130 + 1, v129));
        v111 = *(_QWORD **)&queue[16];
      }
      v131 = (__int128 *)(v111 + 2);
      *(_QWORD *)&queue[16] = v131;
      v132 = *(_QWORD *)&queue[8];
      v133 = *(__int128 **)&v92[2].__m_.__opaque[32];
      if (v133 != v97)
      {
        v134 = v97;
        do
        {
          v135 = *--v134;
          *(_OWORD *)(v132 - 16) = v135;
          v132 -= 16;
          *(_QWORD *)v134 = 0;
          *((_QWORD *)v134 + 1) = 0;
        }
        while (v134 != v133);
        v131 = *(__int128 **)&queue[16];
      }
      *(_QWORD *)&queue[8] = v132;
      v136 = *(__int128 **)&v92[2].__m_.__opaque[40];
      if (v136 != v97)
      {
        do
        {
          *v131++ = *v97;
          *(_QWORD *)v97 = 0;
          *((_QWORD *)v97++ + 1) = 0;
        }
        while (v97 != v136);
        v132 = *(_QWORD *)&queue[8];
        v97 = *(__int128 **)&v92[2].__m_.__opaque[40];
      }
      v137 = *(_QWORD *)&v92[2].__m_.__opaque[32];
      *(_QWORD *)&v92[2].__m_.__opaque[32] = v132;
      *(_QWORD *)&v92[2].__m_.__opaque[40] = v131;
      v138 = *(char **)&v92[2].__m_.__opaque[48];
      *(_QWORD *)&v92[2].__m_.__opaque[48] = v196;
      *(_QWORD *)&queue[16] = v97;
      v196 = v138;
      *(_QWORD *)queue = v137;
      *(_QWORD *)&queue[8] = v137;
      std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)queue);
    }
    else if (v97 == (__int128 *)v93)
    {
      v108 = *((_QWORD *)&v191 + 1);
      *v97 = v191;
      v83 = v189;
      if (v108)
      {
        v109 = (unint64_t *)(v108 + 8);
        do
          v110 = __ldxr(v109);
        while (__stxr(v110 + 1, v109));
      }
      *(_QWORD *)&v92[2].__m_.__opaque[40] = v97 + 1;
    }
    else
    {
      v100 = v97 + 1;
      v101 = v93 - 16;
      v83 = v189;
      if (v93 < 0x10)
      {
        v103 = *(_OWORD **)&v193[0][2].__m_.__opaque[40];
      }
      else
      {
        v102 = v93 - 16;
        v103 = *(_OWORD **)&v193[0][2].__m_.__opaque[40];
        do
        {
          *v103++ = *(_OWORD *)v102;
          *(_QWORD *)v102 = 0;
          *(_QWORD *)(v102 + 8) = 0;
          v102 += 16;
        }
        while (v102 < v93);
      }
      *(_QWORD *)&v92[2].__m_.__opaque[40] = v103;
      if ((_QWORD *)v93 != v100)
      {
        v113 = 16 * ((uint64_t)(v93 - (_QWORD)v100) >> 4);
        v114 = (uint64_t)&v94[2 * v96 - 2];
        do
        {
          v101 = std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100](v101, (__int128 *)(v114 + v113)) - 16;
          v113 -= 16;
        }
        while (v113);
      }
      v115 = (uint64_t *)&v191;
      if (v97 <= &v191)
        v115 = (uint64_t *)(&v191 + (*(_QWORD *)&v92[2].__m_.__opaque[40] > (unint64_t)&v191));
      std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100](v97, *v115, v115[1]);
    }
    a5 = v188;
  }
  else
  {
    std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100](&v191, *v77, v77[1]);
    v83 = v189;
  }
  if ((_QWORD)v191)
  {
    v139 = (std::__shared_weak_count *)operator new(0x50uLL);
    v139->__shared_owners_ = 0;
    v140 = (unint64_t *)&v139->__shared_owners_;
    v139->__shared_weak_owners_ = 0;
    v139->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69A0338;
    std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)&object, a5);
    LODWORD(v139[1].__vftable) = v83;
    v141 = v200;
    if ((_QWORD)v200)
    {
      if ((dispatch_object_t *)v200 == &object)
      {
        v139[2].__shared_owners_ = (uint64_t)&v139[1].__shared_owners_;
        ((void (*)(dispatch_object_t *))object[3].isa)(&object);
        do
LABEL_155:
          v142 = __ldaxr(&AMCP::Core::Conductor::Queued_Change::get_next_id(void)::s_next_id);
        while (__stlxr(v142 + 1, &AMCP::Core::Conductor::Queued_Change::get_next_id(void)::s_next_id));
        v139[2].__shared_weak_owners_ = v142;
        LOBYTE(v139[3].__vftable) = 0;
        p_object = (dispatch_object_t *)v200;
        if ((dispatch_object_t *)v200 == &object)
        {
          v144 = 4;
          p_object = &object;
        }
        else
        {
          if (!(_QWORD)v200)
          {
LABEL_161:
            *(_QWORD *)&v190 = v139 + 1;
            *((_QWORD *)&v190 + 1) = v139;
            v145 = (int64x2_t *)v191;
            v146 = *(_QWORD **)(v191 + 344);
            v147 = *(_QWORD *)(v191 + 352);
            if ((unint64_t)v146 >= v147)
            {
              v150 = *(_QWORD *)(v191 + 336);
              v151 = ((uint64_t)v146 - v150) >> 4;
              v152 = v151 + 1;
              if ((unint64_t)(v151 + 1) >> 60)
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              v153 = v147 - v150;
              if (v153 >> 3 > v152)
                v152 = v153 >> 3;
              if ((unint64_t)v153 >= 0x7FFFFFFFFFFFFFF0)
                v154 = 0xFFFFFFFFFFFFFFFLL;
              else
                v154 = v152;
              if (v154 >> 60)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v155 = (char *)operator new(16 * v154);
              v156 = &v155[16 * v151];
              *(_OWORD *)v156 = v190;
              if (v139)
              {
                v157 = (unint64_t *)&v139->__shared_owners_;
                do
                  v158 = __ldxr(v157);
                while (__stxr(v158 + 1, v157));
              }
              v160 = (_QWORD *)v145[21].i64[0];
              v159 = (_QWORD *)v145[21].i64[1];
              if (v159 == v160)
              {
                v163 = vdupq_n_s64((unint64_t)v159);
                v161 = &v155[16 * v151];
              }
              else
              {
                v161 = &v155[16 * v151];
                do
                {
                  v162 = *((_OWORD *)v159 - 1);
                  v159 -= 2;
                  *((_OWORD *)v161 - 1) = v162;
                  v161 -= 16;
                  *v159 = 0;
                  v159[1] = 0;
                }
                while (v159 != v160);
                v163 = v145[21];
              }
              v149 = v156 + 16;
              v145[21].i64[0] = (uint64_t)v161;
              v145[21].i64[1] = (uint64_t)(v156 + 16);
              v145[22].i64[0] = (uint64_t)&v155[16 * v154];
              v164 = v163.i64[1];
              v165 = (void *)v163.i64[0];
              while ((void *)v164 != v165)
                v164 = std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v164 - 16);
              if (v165)
                operator delete(v165);
            }
            else
            {
              *v146 = v190;
              v146[1] = v139;
              do
                v148 = __ldxr(v140);
              while (__stxr(v148 + 1, v140));
              v149 = v146 + 2;
            }
            v145[21].i64[1] = (uint64_t)v149;
            if (v193[0][2].__m_.__opaque[28])
            {
              std::condition_variable::notify_all((std::condition_variable *)&v193[0][1]);
            }
            else
            {
              v193[0][2].__m_.__opaque[28] = 1;
              AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)&object, *(dispatch_object_t *)(a1 + 32));
              std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(queue, *(_QWORD *)a1, *(std::__shared_weak_count **)(a1 + 8));
              *(_DWORD *)&queue[16] = a2;
              *(_DWORD *)&queue[20] = a3;
              LODWORD(v196) = v83;
              v197 = *(_OWORD *)v193;
              if (v193[1])
              {
                v166 = (unint64_t *)v193[1]->__m_.__opaque;
                do
                  v167 = __ldxr(v166);
                while (__stxr(v167 + 1, v166));
              }
              v168 = object;
              v169 = (_QWORD *)operator new();
              v170 = v197;
              *(_OWORD *)v169 = *(_OWORD *)queue;
              *(_QWORD *)queue = 0;
              *(_QWORD *)&queue[8] = 0;
              v169[2] = *(_QWORD *)&queue[16];
              *((_DWORD *)v169 + 6) = (_DWORD)v196;
              *((_OWORD *)v169 + 2) = v170;
              v197 = 0uLL;
              v194 = 0;
              dispatch_async_f(v168, v169, (dispatch_function_t)applesauce::dispatch::v1::async<AMCP::Core::Conductor::enqueue_config_change(unsigned int,unsigned int,unsigned int,std::function<void ()(void)> const&)::$_0>(dispatch_queue_s *,AMCP::Core::Conductor::enqueue_config_change(unsigned int,unsigned int,unsigned int,std::function<void ()(void)> const&)::$_0 &&)::{lambda(void *)#1}::__invoke);
              std::unique_ptr<AMCP::Core::Conductor::enqueue_config_change(unsigned int,unsigned int,unsigned int,std::function<void ()(void)> const&)::$_0,std::default_delete<AMCP::Core::Conductor::enqueue_config_change(unsigned int,unsigned int,unsigned int,std::function<void ()(void)> const&)::$_0>>::~unique_ptr[abi:ne180100](&v194);
              v171 = (std::__shared_weak_count *)*((_QWORD *)&v197 + 1);
              if (*((_QWORD *)&v197 + 1))
              {
                v172 = (unint64_t *)(*((_QWORD *)&v197 + 1) + 8);
                do
                  v173 = __ldaxr(v172);
                while (__stlxr(v173 - 1, v172));
                if (!v173)
                {
                  ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
                  std::__shared_weak_count::__release_weak(v171);
                }
              }
              v174 = *(std::__shared_weak_count **)&queue[8];
              if (*(_QWORD *)&queue[8])
              {
                v175 = (unint64_t *)(*(_QWORD *)&queue[8] + 8);
                do
                  v176 = __ldaxr(v175);
                while (__stlxr(v176 - 1, v175));
                if (!v176)
                {
                  ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
                  std::__shared_weak_count::__release_weak(v174);
                }
              }
              AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)&object);
            }
            if ((v83 & 0x18) == 8)
            {
              while (!LOBYTE(v139[3].__vftable))
                std::condition_variable::wait((std::condition_variable *)&v193[0][1], &__lk);
            }
            else if ((v83 & 0x10) != 0)
            {
              while (v193[0][2].__m_.__opaque[28])
                std::condition_variable::wait((std::condition_variable *)&v193[0][1].__m_.__opaque[40], &__lk);
            }
            if (v139)
            {
              v177 = (unint64_t *)&v139->__shared_owners_;
              do
                v178 = __ldaxr(v177);
              while (__stlxr(v178 - 1, v177));
              if (!v178)
              {
                ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
                std::__shared_weak_count::__release_weak(v139);
              }
            }
            goto LABEL_210;
          }
          v144 = 5;
        }
        ((void (*)(void))(*p_object)[v144].isa)();
        goto LABEL_161;
      }
      v141 = (*(uint64_t (**)(void))(*(_QWORD *)v200 + 16))();
    }
    v139[2].__shared_owners_ = v141;
    goto LABEL_155;
  }
LABEL_210:
  v179 = (std::__shared_weak_count *)*((_QWORD *)&v191 + 1);
  if (*((_QWORD *)&v191 + 1))
  {
    v180 = (unint64_t *)(*((_QWORD *)&v191 + 1) + 8);
    do
      v181 = __ldaxr(v180);
    while (__stlxr(v181 - 1, v180));
    if (!v181)
    {
      ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
      std::__shared_weak_count::__release_weak(v179);
    }
  }
  if (__lk.__owns_)
    std::mutex::unlock(__lk.__m_);
LABEL_217:
  v182 = (std::__shared_weak_count *)v193[1];
  if (v193[1])
  {
    v183 = (unint64_t *)v193[1]->__m_.__opaque;
    do
      v184 = __ldaxr(v183);
    while (__stlxr(v184 - 1, v183));
    if (!v184)
    {
      ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
      std::__shared_weak_count::__release_weak(v182);
    }
  }
}

void sub_1B5CA26E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::mutex *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__shared_weak_count *v63;
  uint64_t v64;
  AMCP::Utility::Dispatch_Queue *v65;
  void *v67;

  a63 = v64 + 336;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a63);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue(v65);
  std::__shared_weak_count::~__shared_weak_count(v63);
  operator delete(v67);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)&a23);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::mutex::unlock(a10);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t *applesauce::dispatch::v1::async<AMCP::Core::Conductor::enqueue_config_change(unsigned int,unsigned int,unsigned int,std::function<void ()(void)> const&)::$_0>(dispatch_queue_s *,AMCP::Core::Conductor::enqueue_config_change(unsigned int,unsigned int,unsigned int,std::function<void ()(void)> const&)::$_0 &&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t i;
  std::mutex *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  AMCP::Log::Scope_Registry *v9;
  AMCP::Log::Scope_Registry *v10;
  int isa;
  caulk::concurrent::messenger *v12;
  _opaque_pthread_t *v13;
  mach_port_t v14;
  uint64_t v15;
  std::__shared_weak_count *size;
  unint64_t *v17;
  unint64_t v18;
  caulk::concurrent::messenger *v19;
  _opaque_pthread_t *v20;
  mach_port_t v21;
  uint64_t v22;
  unint64_t *v23;
  caulk::concurrent::messenger *v24;
  _opaque_pthread_t *v25;
  mach_port_t v26;
  uint64_t v27;
  unint64_t *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  AMCP::Log::Scope_Registry *core;
  AMCP::Core::Core *v33;
  AMCP::Log::Scope_Registry *v34;
  unsigned int v35;
  unsigned int v36;
  std::__shared_mutex_base *v37;
  int first_object_id_if;
  dispatch_queue_t *v39;
  uint64_t v40;
  AMCP::Log::Scope_Registry *v41;
  int v42;
  caulk::concurrent::messenger *v43;
  _opaque_pthread_t *v44;
  mach_port_t v45;
  uint64_t v46;
  std::__shared_weak_count *end;
  unint64_t *v48;
  unint64_t v49;
  AMCP::Log::Scope_Registry *v50;
  int v51;
  caulk::concurrent::messenger *v52;
  _opaque_pthread_t *v53;
  mach_port_t v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::string::size_type v59;
  _DWORD *v60;
  std::string::size_type v61;
  void *v62;
  uint64_t v63;
  unint64_t v64;
  int64_t v65;
  BOOL v66;
  unint64_t v67;
  uint64_t v68;
  std::string::size_type v69;
  std::string::size_type v70;
  caulk::concurrent::messenger *v71;
  _opaque_pthread_t *v72;
  mach_port_t v73;
  uint64_t v74;
  unint64_t *v75;
  caulk::concurrent::messenger *v76;
  _opaque_pthread_t *v77;
  mach_port_t v78;
  uint64_t v79;
  unint64_t *v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  caulk::concurrent::messenger *v84;
  _opaque_pthread_t *v85;
  mach_port_t v86;
  uint64_t v87;
  unint64_t *v88;
  caulk::concurrent::messenger *v89;
  _opaque_pthread_t *v90;
  mach_port_t v91;
  uint64_t v92;
  unint64_t *v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  int v97;
  void *v98;
  uint64_t v99;
  unint64_t v100;
  int64_t v101;
  unint64_t v102;
  uint64_t v103;
  unsigned int *v104;
  unsigned int v105;
  _DWORD *v106;
  uint64_t v107;
  unint64_t v108;
  int64_t v109;
  unint64_t v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  unint64_t v114;
  int64_t v115;
  unint64_t v116;
  uint64_t v117;
  void *v118;
  uint64_t v119;
  unint64_t v120;
  int64_t v121;
  unint64_t v122;
  uint64_t v123;
  unsigned int *v124;
  unsigned int v125;
  std::string::size_type v126;
  uint64_t v127;
  unint64_t v128;
  int64_t v129;
  _DWORD *v130;
  int v131;
  unsigned int *v132;
  unsigned int v133;
  _DWORD *v134;
  int v135;
  int v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  unsigned int **v142;
  unsigned int **v143;
  uint64_t v144;
  unsigned int **v145;
  unsigned int *v146;
  uint64_t v147;
  uint64_t v148;
  unsigned int v149;
  char *v150;
  int64_t v151;
  std::string *v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  char *v157;
  std::vector<unsigned int>::pointer v158;
  unsigned int *v159;
  std::vector<unsigned int>::pointer v160;
  __int128 v161;
  unsigned int *v162;
  std::vector<unsigned int>::pointer v163;
  uint64_t v164;
  __int128 *v165;
  __int128 v166;
  NSObject *v167;
  uint64_t v168;
  NSObject *v169;
  uint64_t v170;
  __int128 v171;
  std::vector<unsigned int>::pointer v172;
  dispatch_queue_t v173;
  __int128 v174;
  __int128 v175;
  unsigned int *value;
  unsigned int *v177;
  NSObject *v178;
  unint64_t *v179;
  unint64_t v180;
  unsigned int *v181;
  unint64_t *v182;
  unint64_t v183;
  uint64_t v184;
  unint64_t *v185;
  unint64_t v186;
  NSObject *v187;
  dispatch_queue_t *v188;
  dispatch_queue_t v189;
  unint64_t *v190;
  unint64_t v191;
  uint64_t v192;
  unint64_t *v193;
  unint64_t v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  uint64_t *v207;
  uint64_t v208;
  uint64_t v209;
  unsigned int **v210;
  unsigned int *v211;
  std::vector<unsigned int>::pointer v212;
  __int32 *begin;
  __int32 *v214;
  unsigned int *v215;
  __int32 *v216;
  size_t v217;
  __int32 *v218;
  __int32 *v219;
  __int32 *v220;
  __int32 *v221;
  __int32 *v222;
  char v223;
  AMCP::Log::Scope_Registry *v224;
  AMCP::Log::Scope_Registry *v225;
  int v226;
  caulk::concurrent::messenger *v227;
  _opaque_pthread_t *v228;
  mach_port_t v229;
  uint64_t v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  caulk::concurrent::messenger *v234;
  _opaque_pthread_t *v235;
  mach_port_t v236;
  uint64_t v237;
  unint64_t *v238;
  caulk::concurrent::messenger *v239;
  _opaque_pthread_t *v240;
  mach_port_t v241;
  uint64_t v242;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v244;
  unint64_t *v245;
  unint64_t v246;
  uint64_t v247;
  uint64_t *v248;
  uint64_t *v249;
  uint64_t v250;
  uint64_t v251;
  std::mutex *v252;
  uint64_t v253;
  int v255;
  unsigned int **v256;
  char v257;
  uint64_t v258;
  uint64_t v259;
  unsigned int v260;
  uint64_t v261;
  uint64_t v262;
  std::__shared_weak_count *v263;
  dispatch_queue_t v264;
  std::__shared_weak_count *v265;
  std::unique_lock<std::mutex> __lk;
  std::string __p;
  void *v268;
  char *v269;
  _QWORD v270[5];
  uint64_t v271;
  uint64_t *v272;
  uint64_t v273;
  std::__compressed_pair<unsigned int *> *p_end_cap;
  dispatch_queue_t *v275;
  __int32 **p_s;
  char v277;
  __int32 *__s;
  __int32 *v279;
  uint64_t v280;
  _QWORD **v281;
  _QWORD *v282[2];
  std::vector<unsigned int> v283[2];
  void *v284;
  uint64_t v285;
  uint64_t *v286;
  _QWORD *v287[2];
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  void *v294;
  uint64_t v295;
  uint64_t v296;
  int v297;
  dispatch_queue_t queue[4];
  __int128 v299;
  __int128 v300;
  __int128 v301;
  int v302;
  uint64_t v303;

  i = a1;
  v303 = *MEMORY[0x1E0C80C00];
  v261 = a1;
  v2 = *(std::mutex **)(a1 + 32);
  std::mutex::lock(v2);
  v3 = *(_QWORD *)(i + 32);
  v4 = *(uint64_t **)(v3 + 168);
  v5 = *(uint64_t **)(v3 + 176);
  if (v4 == v5)
  {
LABEL_362:
    std::mutex::unlock(v2);
  }
  else
  {
    v6 = 0;
    do
    {
      v7 = *v4;
      v4 += 2;
      v6 += *(int *)(v7 + 328) + ((uint64_t)(*(_QWORD *)(v7 + 344) - *(_QWORD *)(v7 + 336)) >> 4);
    }
    while (v4 != v5);
    std::mutex::unlock(v2);
    if (v6)
    {
      v258 = i;
      do
      {
        v255 = *(_DWORD *)(i + 16);
        v8 = *(_DWORD *)(i + 24);
        v260 = *(_DWORD *)(i + 20);
        v259 = *(_QWORD *)i;
        AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)queue, *(dispatch_object_t *)(*(_QWORD *)i + 32));
        dispatch_assert_queue_V2(queue[0]);
        AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)queue);
        AMCP::Log::Scope_Registry::get(v9);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)queue, "com.apple.coreaudio", "AMCP");
        isa = (int)queue[0][2].isa;
        switch(isa)
        {
          case 3:
            AMCP::Log::Scope_Registry::get(v10);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__p, "com.apple.coreaudio", "AMCP");
            v24 = *(caulk::concurrent::messenger **)(__p.__r_.__value_.__r.__words[0] + 8);
            v25 = pthread_self();
            v26 = pthread_mach_thread_np(v25);
            v27 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 56, 8);
            *(_DWORD *)(v27 + 16) = 0;
            *(_BYTE *)(v27 + 20) = 1;
            *(_DWORD *)(v27 + 24) = v26;
            *(_QWORD *)(v27 + 32) = "Conductor.cpp";
            *(_DWORD *)(v27 + 40) = 315;
            *(_DWORD *)(v27 + 44) = v260;
            *(_DWORD *)(v27 + 48) = v255;
            *(_QWORD *)v27 = &off_1E69A0730;
            *(_QWORD *)(v27 + 8) = 0;
            caulk::concurrent::messenger::enqueue(v24, (caulk::concurrent::message *)v27);
            size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
            if (!__p.__r_.__value_.__l.__size_)
              goto LABEL_22;
            v28 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
            do
              v18 = __ldaxr(v28);
            while (__stlxr(v18 - 1, v28));
            break;
          case 2:
            AMCP::Log::Scope_Registry::get(v10);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__p, "com.apple.coreaudio", "AMCP");
            v19 = *(caulk::concurrent::messenger **)(__p.__r_.__value_.__r.__words[0] + 8);
            v20 = pthread_self();
            v21 = pthread_mach_thread_np(v20);
            v22 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 56, 8);
            *(_DWORD *)(v22 + 16) = 0;
            *(_BYTE *)(v22 + 20) = 2;
            *(_DWORD *)(v22 + 24) = v21;
            *(_QWORD *)(v22 + 32) = "Conductor.cpp";
            *(_DWORD *)(v22 + 40) = 315;
            *(_DWORD *)(v22 + 44) = v260;
            *(_DWORD *)(v22 + 48) = v255;
            *(_QWORD *)v22 = &off_1E69A06D8;
            *(_QWORD *)(v22 + 8) = 0;
            caulk::concurrent::messenger::enqueue(v19, (caulk::concurrent::message *)v22);
            size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
            if (!__p.__r_.__value_.__l.__size_)
              goto LABEL_22;
            v23 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
            do
              v18 = __ldaxr(v23);
            while (__stlxr(v18 - 1, v23));
            break;
          case 1:
            AMCP::Log::Scope_Registry::get(v10);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__p, "com.apple.coreaudio", "AMCP");
            v12 = *(caulk::concurrent::messenger **)(__p.__r_.__value_.__r.__words[0] + 8);
            v13 = pthread_self();
            v14 = pthread_mach_thread_np(v13);
            v15 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 56, 8);
            *(_DWORD *)(v15 + 16) = 0;
            *(_BYTE *)(v15 + 20) = 0;
            *(_DWORD *)(v15 + 24) = v14;
            *(_QWORD *)(v15 + 32) = "Conductor.cpp";
            *(_DWORD *)(v15 + 40) = 315;
            *(_DWORD *)(v15 + 44) = v260;
            *(_DWORD *)(v15 + 48) = v255;
            *(_QWORD *)v15 = &off_1E69A0680;
            *(_QWORD *)(v15 + 8) = 0;
            caulk::concurrent::messenger::enqueue(v12, (caulk::concurrent::message *)v15);
            size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
            if (!__p.__r_.__value_.__l.__size_)
              goto LABEL_22;
            v17 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
            do
              v18 = __ldaxr(v17);
            while (__stlxr(v18 - 1, v17));
            break;
          default:
            goto LABEL_22;
        }
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
LABEL_22:
        v29 = (std::__shared_weak_count *)queue[1];
        if (queue[1])
        {
          v30 = (unint64_t *)&queue[1][1];
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        memset(&__p, 0, sizeof(__p));
        core = (AMCP::Log::Scope_Registry *)AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&p_end_cap, *(std::__shared_mutex_base **)(*(_QWORD *)(v259 + 16) + 16), v260);
        v33 = (AMCP::Core::Core *)p_end_cap;
        if (!p_end_cap)
        {
          AMCP::Log::Scope_Registry::get(core);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)queue, "com.apple.coreaudio", "AMCP");
          v42 = (int)queue[0][2].isa;
          switch(v42)
          {
            case 3:
              AMCP::Log::Scope_Registry::get(v41);
              AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v283, "com.apple.coreaudio", "AMCP");
              v76 = (caulk::concurrent::messenger *)*((_QWORD *)v283[0].__begin_ + 1);
              v77 = pthread_self();
              v78 = pthread_mach_thread_np(v77);
              v79 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 56, 8);
              *(_DWORD *)(v79 + 16) = 0;
              *(_BYTE *)(v79 + 20) = 1;
              *(_DWORD *)(v79 + 24) = v78;
              *(_QWORD *)(v79 + 32) = "Conductor.cpp";
              *(_DWORD *)(v79 + 40) = 240;
              *(_DWORD *)(v79 + 44) = v260;
              *(_DWORD *)(v79 + 48) = v255;
              *(_QWORD *)v79 = &off_1E69A0438;
              *(_QWORD *)(v79 + 8) = 0;
              caulk::concurrent::messenger::enqueue(v76, (caulk::concurrent::message *)v79);
              end = (std::__shared_weak_count *)v283[0].__end_;
              if (v283[0].__end_)
              {
                v80 = (unint64_t *)(v283[0].__end_ + 2);
                do
                  v49 = __ldaxr(v80);
                while (__stlxr(v49 - 1, v80));
                goto LABEL_72;
              }
              break;
            case 2:
              AMCP::Log::Scope_Registry::get(v41);
              AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v283, "com.apple.coreaudio", "AMCP");
              v71 = (caulk::concurrent::messenger *)*((_QWORD *)v283[0].__begin_ + 1);
              v72 = pthread_self();
              v73 = pthread_mach_thread_np(v72);
              v74 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 56, 8);
              *(_DWORD *)(v74 + 16) = 0;
              *(_BYTE *)(v74 + 20) = 2;
              *(_DWORD *)(v74 + 24) = v73;
              *(_QWORD *)(v74 + 32) = "Conductor.cpp";
              *(_DWORD *)(v74 + 40) = 240;
              *(_DWORD *)(v74 + 44) = v260;
              *(_DWORD *)(v74 + 48) = v255;
              *(_QWORD *)v74 = &off_1E69A03E0;
              *(_QWORD *)(v74 + 8) = 0;
              caulk::concurrent::messenger::enqueue(v71, (caulk::concurrent::message *)v74);
              end = (std::__shared_weak_count *)v283[0].__end_;
              if (v283[0].__end_)
              {
                v75 = (unint64_t *)(v283[0].__end_ + 2);
                do
                  v49 = __ldaxr(v75);
                while (__stlxr(v49 - 1, v75));
                goto LABEL_72;
              }
              break;
            case 1:
              AMCP::Log::Scope_Registry::get(v41);
              AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v283, "com.apple.coreaudio", "AMCP");
              v43 = (caulk::concurrent::messenger *)*((_QWORD *)v283[0].__begin_ + 1);
              v44 = pthread_self();
              v45 = pthread_mach_thread_np(v44);
              v46 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 56, 8);
              *(_DWORD *)(v46 + 16) = 0;
              *(_BYTE *)(v46 + 20) = 0;
              *(_DWORD *)(v46 + 24) = v45;
              *(_QWORD *)(v46 + 32) = "Conductor.cpp";
              *(_DWORD *)(v46 + 40) = 240;
              *(_DWORD *)(v46 + 44) = v260;
              *(_DWORD *)(v46 + 48) = v255;
              *(_QWORD *)v46 = &off_1E69A0388;
              *(_QWORD *)(v46 + 8) = 0;
              caulk::concurrent::messenger::enqueue(v43, (caulk::concurrent::message *)v46);
              end = (std::__shared_weak_count *)v283[0].__end_;
              if (v283[0].__end_)
              {
                v48 = (unint64_t *)(v283[0].__end_ + 2);
                do
                  v49 = __ldaxr(v48);
                while (__stlxr(v49 - 1, v48));
LABEL_72:
                if (!v49)
                {
                  ((void (*)(std::__shared_weak_count *))end->__on_zero_shared)(end);
                  std::__shared_weak_count::__release_weak(end);
                }
              }
              break;
          }
          v81 = (std::__shared_weak_count *)queue[1];
          if (queue[1])
          {
            v82 = (unint64_t *)&queue[1][1];
            do
              v83 = __ldaxr(v82);
            while (__stlxr(v83 - 1, v82));
            if (!v83)
            {
              ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
              std::__shared_weak_count::__release_weak(v81);
            }
          }
          goto LABEL_94;
        }
        strcpy((char *)queue, "slcbbolg");
        BYTE1(queue[1]) = 0;
        WORD1(queue[1]) = 0;
        v34 = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>((AMCP::Core::Core *)p_end_cap, (const AMCP::Address *)queue, &AMCP::k_class_id_unknown);
        if ((_DWORD)v34)
        {
          v35 = v34;
          strcpy((char *)queue, "rnwobolg");
          BYTE1(queue[1]) = 0;
          WORD1(queue[1]) = 0;
          v36 = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>(v33, (const AMCP::Address *)queue, &AMCP::k_object_id_unknown);
          v37 = *(std::__shared_mutex_base **)(*(_QWORD *)(v259 + 16) + 16);
          queue[0] = (dispatch_queue_t)&off_1E69A0598;
          queue[3] = (dispatch_queue_t)queue;
          first_object_id_if = AMCP::Core::Broker::fetch_first_object_id_if (v37, (uint64_t)queue);
          v39 = (dispatch_queue_t *)queue[3];
          if ((dispatch_queue_t *)queue[3] == queue)
          {
            v39 = queue;
            v40 = 4;
LABEL_47:
            ((void (*)(void))(*v39)[v40].isa)();
          }
          else if (queue[3])
          {
            v40 = 5;
            goto LABEL_47;
          }
          if (AMCP::is_base_of((AMCP *)0x61706C67, v35))
          {
            v59 = __p.__r_.__value_.__l.__size_;
            if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
            {
              v62 = (void *)__p.__r_.__value_.__r.__words[0];
              v63 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 2;
              v64 = v63 + 1;
              if ((unint64_t)(v63 + 1) >> 62)
                goto LABEL_365;
              v65 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
              if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 1 > v64)
                v64 = v65 >> 1;
              v66 = (unint64_t)v65 >= 0x7FFFFFFFFFFFFFFCLL;
              v67 = 0x3FFFFFFFFFFFFFFFLL;
              if (!v66)
                v67 = v64;
              if (v67)
              {
                v67 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v67);
                v59 = __p.__r_.__value_.__l.__size_;
                v62 = (void *)__p.__r_.__value_.__r.__words[0];
              }
              else
              {
                v68 = 0;
              }
              v104 = (unsigned int *)(v67 + 4 * v63);
              *v104 = v260;
              v60 = v104 + 1;
              while ((void *)v59 != v62)
              {
                v105 = *(_DWORD *)(v59 - 4);
                v59 -= 4;
                *--v104 = v105;
              }
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v104;
              __p.__r_.__value_.__l.__size_ = (std::string::size_type)v60;
              __p.__r_.__value_.__r.__words[2] = v67 + 4 * v68;
              if (v62)
                operator delete(v62);
            }
            else
            {
              *(_DWORD *)__p.__r_.__value_.__l.__size_ = v260;
              v60 = (_DWORD *)(v59 + 4);
            }
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)v60;
            v97 = 6;
            if (first_object_id_if && first_object_id_if != v260)
            {
              if ((unint64_t)v60 >= __p.__r_.__value_.__r.__words[2])
              {
                v106 = (_DWORD *)__p.__r_.__value_.__r.__words[0];
                v107 = (uint64_t)((uint64_t)v60 - __p.__r_.__value_.__r.__words[0]) >> 2;
                v108 = v107 + 1;
                if ((unint64_t)(v107 + 1) >> 62)
                  goto LABEL_365;
                v109 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
                if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 1 > v108)
                  v108 = v109 >> 1;
                v66 = (unint64_t)v109 >= 0x7FFFFFFFFFFFFFFCLL;
                v110 = 0x3FFFFFFFFFFFFFFFLL;
                if (!v66)
                  v110 = v108;
                if (v110)
                {
                  v110 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v110);
                  v60 = (_DWORD *)__p.__r_.__value_.__l.__size_;
                  v106 = (_DWORD *)__p.__r_.__value_.__r.__words[0];
                }
                else
                {
                  v111 = 0;
                }
                v130 = (_DWORD *)(v110 + 4 * v107);
                *v130 = first_object_id_if;
                v126 = (std::string::size_type)(v130 + 1);
                while (v60 != v106)
                {
                  v131 = *--v60;
                  *--v130 = v131;
                }
                goto LABEL_177;
              }
LABEL_143:
              *v60 = first_object_id_if;
              v126 = (std::string::size_type)(v60 + 1);
              goto LABEL_179;
            }
          }
          else if (AMCP::is_base_of((AMCP *)0x61646576, v35))
          {
            v61 = __p.__r_.__value_.__l.__size_;
            if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
            {
              v98 = (void *)__p.__r_.__value_.__r.__words[0];
              v99 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 2;
              v100 = v99 + 1;
              if ((unint64_t)(v99 + 1) >> 62)
                goto LABEL_365;
              v101 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
              if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 1 > v100)
                v100 = v101 >> 1;
              v66 = (unint64_t)v101 >= 0x7FFFFFFFFFFFFFFCLL;
              v102 = 0x3FFFFFFFFFFFFFFFLL;
              if (!v66)
                v102 = v100;
              if (v102)
              {
                v102 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v102);
                v61 = __p.__r_.__value_.__l.__size_;
                v98 = (void *)__p.__r_.__value_.__r.__words[0];
              }
              else
              {
                v103 = 0;
              }
              v124 = (unsigned int *)(v102 + 4 * v99);
              *v124 = v36;
              v60 = v124 + 1;
              while ((void *)v61 != v98)
              {
                v125 = *(_DWORD *)(v61 - 4);
                v61 -= 4;
                *--v124 = v125;
              }
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v124;
              __p.__r_.__value_.__l.__size_ = (std::string::size_type)v60;
              __p.__r_.__value_.__r.__words[2] = v102 + 4 * v103;
              if (v98)
                operator delete(v98);
            }
            else
            {
              *(_DWORD *)__p.__r_.__value_.__l.__size_ = v36;
              v60 = (_DWORD *)(v61 + 4);
            }
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)v60;
            v97 = 6;
            if (first_object_id_if && first_object_id_if != v36)
            {
              if ((unint64_t)v60 < __p.__r_.__value_.__r.__words[2])
                goto LABEL_143;
              v106 = (_DWORD *)__p.__r_.__value_.__r.__words[0];
              v127 = (uint64_t)((uint64_t)v60 - __p.__r_.__value_.__r.__words[0]) >> 2;
              v128 = v127 + 1;
              if ((unint64_t)(v127 + 1) >> 62)
LABEL_365:
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              v129 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
              if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 1 > v128)
                v128 = v129 >> 1;
              v66 = (unint64_t)v129 >= 0x7FFFFFFFFFFFFFFCLL;
              v110 = 0x3FFFFFFFFFFFFFFFLL;
              if (!v66)
                v110 = v128;
              if (v110)
              {
                v110 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v110);
                v60 = (_DWORD *)__p.__r_.__value_.__l.__size_;
                v106 = (_DWORD *)__p.__r_.__value_.__r.__words[0];
              }
              else
              {
                v111 = 0;
              }
              v130 = (_DWORD *)(v110 + 4 * v127);
              *v130 = first_object_id_if;
              v126 = (std::string::size_type)(v130 + 1);
              while (v60 != v106)
              {
                v136 = *--v60;
                *--v130 = v136;
              }
LABEL_177:
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v130;
              __p.__r_.__value_.__l.__size_ = v126;
              __p.__r_.__value_.__r.__words[2] = v110 + 4 * v111;
              if (v106)
                operator delete(v106);
LABEL_179:
              __p.__r_.__value_.__l.__size_ = v126;
              v97 = 6;
              v60 = (_DWORD *)v126;
            }
          }
          else
          {
            v69 = __p.__r_.__value_.__l.__size_;
            if (v260 == 1 && (v8 & 4) != 0)
            {
              if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
              {
                v118 = (void *)__p.__r_.__value_.__r.__words[0];
                v119 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 2;
                v120 = v119 + 1;
                if ((unint64_t)(v119 + 1) >> 62)
                  goto LABEL_365;
                v121 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
                if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 1 > v120)
                  v120 = v121 >> 1;
                v66 = (unint64_t)v121 >= 0x7FFFFFFFFFFFFFFCLL;
                v122 = 0x3FFFFFFFFFFFFFFFLL;
                if (!v66)
                  v122 = v120;
                if (v122)
                {
                  v122 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v122);
                  v69 = __p.__r_.__value_.__l.__size_;
                  v118 = (void *)__p.__r_.__value_.__r.__words[0];
                }
                else
                {
                  v123 = 0;
                }
                v134 = (_DWORD *)(v122 + 4 * v119);
                *v134 = 1;
                v70 = (std::string::size_type)(v134 + 1);
                while ((void *)v69 != v118)
                {
                  v135 = *(_DWORD *)(v69 - 4);
                  v69 -= 4;
                  *--v134 = v135;
                }
                __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v134;
                __p.__r_.__value_.__l.__size_ = v70;
                __p.__r_.__value_.__r.__words[2] = v122 + 4 * v123;
                if (v118)
                  operator delete(v118);
              }
              else
              {
                *(_DWORD *)__p.__r_.__value_.__l.__size_ = 1;
                v70 = v69 + 4;
              }
              __p.__r_.__value_.__l.__size_ = v70;
              memset(v283, 0, 24);
              v291 = 0x676C6F6263747823;
              LODWORD(v292) = 0;
              AMCP::Core::Core::get_typed_property_value<std::vector<unsigned int>,std::enable_if<true,void>>(queue, v33, (AMCP::Address *)&v291, (uint64_t)v283);
              std::vector<unsigned int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned int *>,std::__wrap_iter<unsigned int *>>((std::vector<unsigned int> *)&__p, (unsigned int *)__p.__r_.__value_.__l.__size_, (char *)queue[0], (char *)queue[1], ((char *)queue[1] - (char *)queue[0]) >> 2);
              v292 = 0;
              v291 = 0;
              v293 = 0;
              v271 = 0x676C6F626E6F6423;
              LODWORD(v272) = 0;
              AMCP::Core::Core::get_typed_property_value<std::vector<unsigned int>,std::enable_if<true,void>>(v283, v33, (AMCP::Address *)&v271, (uint64_t)&v291);
              std::vector<unsigned int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned int *>,std::__wrap_iter<unsigned int *>>((std::vector<unsigned int> *)&__p, (unsigned int *)__p.__r_.__value_.__l.__size_, (char *)v283[0].__begin_, (char *)v283[0].__end_, v283[0].__end_ - v283[0].__begin_);
              if (v283[0].__begin_)
              {
                v283[0].__end_ = v283[0].__begin_;
                operator delete(v283[0].__begin_);
              }
              if (queue[0])
              {
                queue[1] = queue[0];
                operator delete(queue[0]);
              }
              v97 = 5;
              v60 = (_DWORD *)__p.__r_.__value_.__l.__size_;
            }
            else
            {
              if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
              {
                v112 = (void *)__p.__r_.__value_.__r.__words[0];
                v113 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 2;
                v114 = v113 + 1;
                if ((unint64_t)(v113 + 1) >> 62)
                  goto LABEL_365;
                v115 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
                if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 1 > v114)
                  v114 = v115 >> 1;
                v66 = (unint64_t)v115 >= 0x7FFFFFFFFFFFFFFCLL;
                v116 = 0x3FFFFFFFFFFFFFFFLL;
                if (!v66)
                  v116 = v114;
                if (v116)
                {
                  v116 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v116);
                  v69 = __p.__r_.__value_.__l.__size_;
                  v112 = (void *)__p.__r_.__value_.__r.__words[0];
                }
                else
                {
                  v117 = 0;
                }
                v132 = (unsigned int *)(v116 + 4 * v113);
                *v132 = v260;
                v60 = v132 + 1;
                while ((void *)v69 != v112)
                {
                  v133 = *(_DWORD *)(v69 - 4);
                  v69 -= 4;
                  *--v132 = v133;
                }
                __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v132;
                __p.__r_.__value_.__l.__size_ = (std::string::size_type)v60;
                __p.__r_.__value_.__r.__words[2] = v116 + 4 * v117;
                if (v112)
                  operator delete(v112);
              }
              else
              {
                *(_DWORD *)__p.__r_.__value_.__l.__size_ = v260;
                v60 = (_DWORD *)(v69 + 4);
              }
              __p.__r_.__value_.__l.__size_ = (std::string::size_type)v60;
              v97 = 5;
            }
          }
          v295 = 0;
          v294 = 0;
          v296 = 0;
          std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v294, __p.__r_.__value_.__l.__data_, (uint64_t)v60, (uint64_t)((uint64_t)v60 - __p.__r_.__value_.__r.__words[0]) >> 2);
          goto LABEL_181;
        }
        AMCP::Log::Scope_Registry::get(v34);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)queue, "com.apple.coreaudio", "AMCP");
        v51 = (int)queue[0][2].isa;
        switch(v51)
        {
          case 3:
            AMCP::Log::Scope_Registry::get(v50);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v283, "com.apple.coreaudio", "AMCP");
            v89 = (caulk::concurrent::messenger *)*((_QWORD *)v283[0].__begin_ + 1);
            v90 = pthread_self();
            v91 = pthread_mach_thread_np(v90);
            v92 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 56, 8);
            *(_DWORD *)(v92 + 16) = 0;
            *(_BYTE *)(v92 + 20) = 1;
            *(_DWORD *)(v92 + 24) = v91;
            *(_QWORD *)(v92 + 32) = "Conductor.cpp";
            *(_DWORD *)(v92 + 40) = 246;
            *(_DWORD *)(v92 + 44) = v260;
            *(_DWORD *)(v92 + 48) = v255;
            *(_QWORD *)v92 = &off_1E69A0540;
            *(_QWORD *)(v92 + 8) = 0;
            caulk::concurrent::messenger::enqueue(v89, (caulk::concurrent::message *)v92);
            v56 = (std::__shared_weak_count *)v283[0].__end_;
            if (v283[0].__end_)
            {
              v93 = (unint64_t *)(v283[0].__end_ + 2);
              do
                v58 = __ldaxr(v93);
              while (__stlxr(v58 - 1, v93));
LABEL_87:
              if (!v58)
              {
                ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                std::__shared_weak_count::__release_weak(v56);
              }
            }
            break;
          case 2:
            AMCP::Log::Scope_Registry::get(v50);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v283, "com.apple.coreaudio", "AMCP");
            v84 = (caulk::concurrent::messenger *)*((_QWORD *)v283[0].__begin_ + 1);
            v85 = pthread_self();
            v86 = pthread_mach_thread_np(v85);
            v87 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 56, 8);
            *(_DWORD *)(v87 + 16) = 0;
            *(_BYTE *)(v87 + 20) = 2;
            *(_DWORD *)(v87 + 24) = v86;
            *(_QWORD *)(v87 + 32) = "Conductor.cpp";
            *(_DWORD *)(v87 + 40) = 246;
            *(_DWORD *)(v87 + 44) = v260;
            *(_DWORD *)(v87 + 48) = v255;
            *(_QWORD *)v87 = &off_1E69A04E8;
            *(_QWORD *)(v87 + 8) = 0;
            caulk::concurrent::messenger::enqueue(v84, (caulk::concurrent::message *)v87);
            v56 = (std::__shared_weak_count *)v283[0].__end_;
            if (v283[0].__end_)
            {
              v88 = (unint64_t *)(v283[0].__end_ + 2);
              do
                v58 = __ldaxr(v88);
              while (__stlxr(v58 - 1, v88));
              goto LABEL_87;
            }
            break;
          case 1:
            AMCP::Log::Scope_Registry::get(v50);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v283, "com.apple.coreaudio", "AMCP");
            v52 = (caulk::concurrent::messenger *)*((_QWORD *)v283[0].__begin_ + 1);
            v53 = pthread_self();
            v54 = pthread_mach_thread_np(v53);
            v55 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 56, 8);
            *(_DWORD *)(v55 + 16) = 0;
            *(_BYTE *)(v55 + 20) = 0;
            *(_DWORD *)(v55 + 24) = v54;
            *(_QWORD *)(v55 + 32) = "Conductor.cpp";
            *(_DWORD *)(v55 + 40) = 246;
            *(_DWORD *)(v55 + 44) = v260;
            *(_DWORD *)(v55 + 48) = v255;
            *(_QWORD *)v55 = &off_1E69A0490;
            *(_QWORD *)(v55 + 8) = 0;
            caulk::concurrent::messenger::enqueue(v52, (caulk::concurrent::message *)v55);
            v56 = (std::__shared_weak_count *)v283[0].__end_;
            if (v283[0].__end_)
            {
              v57 = (unint64_t *)(v283[0].__end_ + 2);
              do
                v58 = __ldaxr(v57);
              while (__stlxr(v58 - 1, v57));
              goto LABEL_87;
            }
            break;
        }
        v94 = (std::__shared_weak_count *)queue[1];
        if (queue[1])
        {
          v95 = (unint64_t *)&queue[1][1];
          do
            v96 = __ldaxr(v95);
          while (__stlxr(v96 - 1, v95));
          if (!v96)
          {
            ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
            std::__shared_weak_count::__release_weak(v94);
          }
        }
LABEL_94:
        v296 = 0;
        v294 = 0;
        v295 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v294, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_, (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 2);
        v97 = -1;
LABEL_181:
        v297 = v97;
        v137 = (std::__shared_weak_count *)v275;
        if (v275)
        {
          v138 = (unint64_t *)(v275 + 1);
          do
            v139 = __ldaxr(v138);
          while (__stlxr(v139 - 1, v138));
          if (!v139)
          {
            ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
            std::__shared_weak_count::__release_weak(v137);
          }
        }
        if (__p.__r_.__value_.__r.__words[0])
        {
          __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v297 != -1)
        {
          AMCP::Core::Broker::make_snapshot((uint64_t)&v291, *(std::__shared_mutex_base **)(*(_QWORD *)(v259 + 16) + 16), (unsigned int **)&v294, v297);
          v300 = 0u;
          v301 = 0u;
          v299 = 0u;
          memset(queue, 0, sizeof(queue));
          v302 = 1065353216;
          v257 = v8 & 1;
          AMCP::Core::Conductor::call_external_begin_config_change_observers(v259, 1, v260, v8 & 1, (uint64_t)queue);
          std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>>>::~__hash_table((uint64_t)&v300);
          if (queue[3])
          {
            *(dispatch_queue_t *)&v299 = queue[3];
            operator delete(queue[3]);
          }
          if (queue[0])
          {
            queue[1] = queue[0];
            operator delete(queue[0]);
          }
          v300 = 0u;
          v301 = 0u;
          v299 = 0u;
          memset(queue, 0, sizeof(queue));
          v302 = 1065353216;
          LODWORD(__p.__r_.__value_.__l.__data_) = v260;
          LOBYTE(v283[0].__begin_) = v8 & 1;
          AMCP::Observer::Map<std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>,unsigned int,true,std::less<unsigned int>>::call_observers_sync<unsigned int &,BOOL &,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&>(v259 + 1136, (unsigned int *)&__p, &__p, (char *)v283, (uint64_t)queue);
          std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>>>::~__hash_table((uint64_t)&v300);
          if (queue[3])
          {
            *(dispatch_queue_t *)&v299 = queue[3];
            operator delete(queue[3]);
          }
          if (queue[0])
          {
            queue[1] = queue[0];
            operator delete(queue[0]);
          }
          v288 = 0;
          v289 = 0;
          v290 = 0;
          v287[0] = 0;
          v287[1] = 0;
          v140 = (_QWORD *)(v259 + 2648);
          v286 = (uint64_t *)v287;
          AMCP::Core::Conductor::Conductor_Graph_Manager::get_device_list((AMCP::Core::Conductor::Conductor_Graph_Manager *)(v259 + 2648), &v284);
          memset(v283, 0, sizeof(v283));
          v282[0] = 0;
          v282[1] = 0;
          v281 = v282;
          __lk.__m_ = *(std::unique_lock<std::mutex>::mutex_type **)(i + 32);
          __lk.__owns_ = 1;
          std::mutex::lock(__lk.__m_);
          v141 = *(_QWORD *)(i + 32);
          v143 = *(unsigned int ***)(v141 + 168);
          v142 = *(unsigned int ***)(v141 + 176);
          if (v143 != v142)
          {
            v144 = 0;
            v145 = *(unsigned int ***)(v141 + 168);
            do
            {
              v146 = *v145;
              v145 += 2;
              v144 += (int)v146[82] + ((uint64_t)(*((_QWORD *)v146 + 43) - *((_QWORD *)v146 + 42)) >> 4);
            }
            while (v145 != v142);
            if (v144)
            {
              do
              {
                v256 = v142;
                if (v143 != v142)
                {
                  do
                  {
                    v147 = *((_QWORD *)*v143 + 42);
                    v148 = *((_QWORD *)*v143 + 43);
                    if (v147 == v148)
                    {
                      v207 = (uint64_t *)(*v143 + 86);
                    }
                    else
                    {
                      do
                      {
                        v149 = **v143;
                        if (v149 != v260)
                        {
                          v300 = 0u;
                          v301 = 0u;
                          v299 = 0u;
                          memset(queue, 0, sizeof(queue));
                          v302 = 1065353216;
                          LODWORD(p_end_cap) = v149;
                          LOBYTE(v271) = v257;
                          AMCP::Core::make_external_diff((uint64_t)&__p, (uint64_t)queue);
                          AMCP::Observer::Map<std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>,unsigned int,true,std::less<unsigned int>>::call_observers_sync<unsigned int &,BOOL &,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>>>((std::__shared_mutex_base *)(v259 + 2216), (unsigned int *)&p_end_cap, (int *)&p_end_cap, (char *)&v271);
                          boost::container::vector<boost::container::dtl::pair<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>>>,void>::~vector(v270);
                          if (v268)
                          {
                            v269 = (char *)v268;
                            operator delete(v268);
                          }
                          if (__p.__r_.__value_.__r.__words[0])
                          {
                            __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
                            operator delete(__p.__r_.__value_.__l.__data_);
                          }
                          std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>>>::~__hash_table((uint64_t)&v300);
                          if (queue[3])
                          {
                            *(dispatch_queue_t *)&v299 = queue[3];
                            operator delete(queue[3]);
                          }
                          if (queue[0])
                          {
                            queue[1] = queue[0];
                            operator delete(queue[0]);
                          }
                        }
                        v271 = 0;
                        v272 = 0;
                        v273 = 0;
                        std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t *)&v281, **v143, **v143);
                        AMCP::IO_Core::Graph_Manager::prepare_graph_for_config_change(&__p, v140, **(_DWORD **)v147, **v143, (uint64_t)&v271, &v286);
                        std::vector<std::shared_ptr<AMCP::Graph::Timebase>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<AMCP::Graph::Timebase>*>,std::__wrap_iter<std::shared_ptr<AMCP::Graph::Timebase>*>>((char *)&v288, v289, (uint64_t *)v271, v272, ((uint64_t)v272 - v271) >> 4);
                        std::vector<unsigned int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned int *>,std::__wrap_iter<unsigned int *>>(v283, v283[0].__end_, __p.__r_.__value_.__l.__data_, (char *)__p.__r_.__value_.__l.__size_, (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 2);
                        v150 = (char *)v268;
                        if (v269 - (_BYTE *)v268 >= 1)
                        {
                          v151 = (v269 - (_BYTE *)v268) / 24;
                          v152 = (std::string *)v283[1].__end_;
                          if ((uint64_t)(0xAAAAAAAAAAAAAAABLL
                                       * (((char *)v283[1].__end_cap_.__value_ - (char *)v283[1].__end_) >> 3)) >= v151)
                          {
                            if (v151 <= 0)
                            {
                              v157 = (char *)v268 + 24 * v151;
                              v158 = v283[1].__end_;
                              v159 = &v283[1].__end_[-6 * v151];
                              v160 = v283[1].__end_;
                              while (v159 < (unsigned int *)v152)
                              {
                                v161 = *(_OWORD *)v159;
                                *((_QWORD *)v160 + 2) = *((_QWORD *)v159 + 2);
                                *(_OWORD *)v160 = v161;
                                v160 += 6;
                                *((_QWORD *)v159 + 1) = 0;
                                *((_QWORD *)v159 + 2) = 0;
                                *(_QWORD *)v159 = 0;
                                v159 += 6;
                              }
                              v162 = (unsigned int *)&v152[v151];
                              v283[1].__end_ = v160;
                              if (v158 != v162)
                              {
                                v163 = v158 - 6;
                                v164 = 8 * (((char *)v158 - (char *)v162) >> 3);
                                do
                                {
                                  if (*((char *)v163 + 23) < 0)
                                    operator delete(*(void **)v163);
                                  v165 = (__int128 *)((char *)&v152[-1] + v164);
                                  v166 = *v165;
                                  *((_QWORD *)v163 + 2) = *(_QWORD *)((char *)&v152->__r_.__value_.__l + v164 - 8);
                                  *(_OWORD *)v163 = v166;
                                  v163 -= 6;
                                  v152->__r_.__value_.__s.__data_[v164 - 1] = 0;
                                  *(_BYTE *)v165 = 0;
                                  v164 -= 24;
                                }
                                while (v164);
                              }
                              for (i = v258; v150 != v157; ++v152)
                              {
                                std::string::operator=(v152, (const std::string *)v150);
                                v150 += 24;
                              }
                            }
                            else
                            {
                              v283[1].__end_ = (std::vector<unsigned int>::pointer)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&v283[1].__end_cap_, (__int128 *)v268, (__int128 *)v269, (std::string *)v283[1].__end_);
                              i = v258;
                            }
                          }
                          else
                          {
                            v153 = 0xAAAAAAAAAAAAAAABLL * (((char *)v283[1].__end_ - (char *)v283[1].__begin_) >> 3);
                            v154 = v153 + v151;
                            if (v153 + v151 > 0xAAAAAAAAAAAAAAALL)
                              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                            if (0x5555555555555556
                               * (((char *)v283[1].__end_cap_.__value_ - (char *)v283[1].__begin_) >> 3) > v154)
                              v154 = 0x5555555555555556
                                   * (((char *)v283[1].__end_cap_.__value_ - (char *)v283[1].__begin_) >> 3);
                            if (0xAAAAAAAAAAAAAAABLL
                               * (((char *)v283[1].__end_cap_.__value_ - (char *)v283[1].__begin_) >> 3) >= 0x555555555555555)
                              v155 = 0xAAAAAAAAAAAAAAALL;
                            else
                              v155 = v154;
                            *(_QWORD *)&v299 = &v283[1].__end_cap_;
                            if (v155)
                              v155 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v155);
                            else
                              v156 = 0;
                            v167 = (v155 + 24 * v153);
                            queue[0] = (dispatch_queue_t)v155;
                            queue[1] = v167;
                            queue[2] = v167;
                            queue[3] = (dispatch_queue_t)(v155 + 24 * v156);
                            v168 = 3 * v151;
                            v169 = &v167[3 * v151];
                            v170 = 8 * v168;
                            do
                            {
                              if (v150[23] < 0)
                              {
                                std::string::__init_copy_ctor_external((std::string *)v167, *(const std::string::value_type **)v150, *((_QWORD *)v150 + 1));
                              }
                              else
                              {
                                v171 = *(_OWORD *)v150;
                                v167[2].isa = *(Class *)(v150 + 16);
                                *(_OWORD *)&v167->isa = v171;
                              }
                              v167 += 3;
                              v150 += 24;
                              v170 -= 24;
                            }
                            while (v170);
                            queue[2] = v169;
                            queue[1] = (dispatch_queue_t)std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&v283[1].__end_cap_, (uint64_t)v152, (uint64_t)v152, (uint64_t)v283[1].__begin_, (uint64_t)v283[1].__begin_, (uint64_t)queue[1], (uint64_t)queue[1]);
                            v172 = v283[1].__end_;
                            v173 = queue[2];
                            __s = (__int32 *)queue[2];
                            v264 = queue[2];
                            p_end_cap = &v283[1].__end_cap_;
                            v275 = &v264;
                            p_s = &__s;
                            if (v152 == (std::string *)v283[1].__end_)
                            {
                              i = v258;
                            }
                            else
                            {
                              i = v258;
                              do
                              {
                                v174 = *(_OWORD *)&v152->__r_.__value_.__l.__data_;
                                v173[2].isa = (Class)v152->__r_.__value_.__r.__words[2];
                                *(_OWORD *)&v173->isa = v174;
                                v173 += 3;
                                v152->__r_.__value_.__l.__size_ = 0;
                                v152->__r_.__value_.__r.__words[2] = 0;
                                v152->__r_.__value_.__r.__words[0] = 0;
                                ++v152;
                              }
                              while (v152 != (std::string *)v172);
                              __s = (__int32 *)v173;
                            }
                            v277 = 1;
                            std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&p_end_cap);
                            v175 = *(_OWORD *)&v283[1].__begin_;
                            v283[1].__begin_ = (std::vector<unsigned int>::pointer)queue[1];
                            v283[1].__end_ = (std::vector<unsigned int>::pointer)v173;
                            *(_OWORD *)&queue[1] = v175;
                            value = v283[1].__end_cap_.__value_;
                            v283[1].__end_cap_.__value_ = (unsigned int *)queue[3];
                            queue[3] = (dispatch_queue_t)value;
                            queue[0] = (dispatch_queue_t)v175;
                            std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)queue);
                          }
                        }
                        v177 = *v143;
                        ++(*v143)[82];
                        std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(queue, *(_QWORD *)v259, *(std::__shared_weak_count **)(v259 + 8));
                        v178 = *(NSObject **)(i + 40);
                        queue[2] = *(dispatch_queue_t *)(i + 32);
                        queue[3] = v178;
                        if (v178)
                        {
                          v179 = (unint64_t *)&v178[1];
                          do
                            v180 = __ldxr(v179);
                          while (__stxr(v180 + 1, v179));
                        }
                        *(_QWORD *)&v299 = *v143;
                        v181 = v143[1];
                        *((_QWORD *)&v299 + 1) = v181;
                        if (v181)
                        {
                          v182 = (unint64_t *)(v181 + 2);
                          do
                            v183 = __ldxr(v182);
                          while (__stxr(v183 + 1, v182));
                        }
                        *(_QWORD *)&v300 = *(_QWORD *)v147;
                        v184 = *(_QWORD *)(v147 + 8);
                        *((_QWORD *)&v300 + 1) = v184;
                        if (v184)
                        {
                          v185 = (unint64_t *)(v184 + 8);
                          do
                            v186 = __ldxr(v185);
                          while (__stxr(v186 + 1, v185));
                        }
                        v187 = *((_QWORD *)v177 + 1);
                        v188 = (dispatch_queue_t *)operator new();
                        *(_OWORD *)v188 = *(_OWORD *)queue;
                        queue[1] = 0;
                        queue[0] = 0;
                        v189 = queue[3];
                        v188[2] = queue[2];
                        v188[3] = v189;
                        if (v189)
                        {
                          v190 = (unint64_t *)&v189[1];
                          do
                            v191 = __ldxr(v190);
                          while (__stxr(v191 + 1, v190));
                        }
                        *((_OWORD *)v188 + 2) = v299;
                        v299 = 0uLL;
                        v192 = *((_QWORD *)&v300 + 1);
                        v188[6] = (dispatch_queue_t)v300;
                        v188[7] = (dispatch_queue_t)v192;
                        if (v192)
                        {
                          v193 = (unint64_t *)(v192 + 8);
                          do
                            v194 = __ldxr(v193);
                          while (__stxr(v194 + 1, v193));
                        }
                        p_end_cap = 0;
                        dispatch_async_f(v187, v188, (dispatch_function_t)applesauce::dispatch::v1::async<AMCP::Core::Conductor::process_queued_config_change(unsigned int,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::Conductor::Queued_Change_Map_Item> const&)::$_4>(dispatch_queue_s *,AMCP::Core::Conductor::process_queued_config_change(unsigned int,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::Conductor::Queued_Change_Map_Item> const&)::$_4 &&)::{lambda(void *)#1}::__invoke);
                        std::unique_ptr<AMCP::Core::Conductor::process_queued_config_change(unsigned int,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::Conductor::Queued_Change_Map_Item> const&)::$_4,std::default_delete<AMCP::Core::Conductor::process_queued_config_change(unsigned int,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::Conductor::Queued_Change_Map_Item> const&)::$_4>>::~unique_ptr[abi:ne180100]((uint64_t *)&p_end_cap);
                        v195 = (std::__shared_weak_count *)*((_QWORD *)&v300 + 1);
                        if (*((_QWORD *)&v300 + 1))
                        {
                          v196 = (unint64_t *)(*((_QWORD *)&v300 + 1) + 8);
                          do
                            v197 = __ldaxr(v196);
                          while (__stlxr(v197 - 1, v196));
                          if (!v197)
                          {
                            ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
                            std::__shared_weak_count::__release_weak(v195);
                          }
                        }
                        v198 = (std::__shared_weak_count *)*((_QWORD *)&v299 + 1);
                        if (*((_QWORD *)&v299 + 1))
                        {
                          v199 = (unint64_t *)(*((_QWORD *)&v299 + 1) + 8);
                          do
                            v200 = __ldaxr(v199);
                          while (__stlxr(v200 - 1, v199));
                          if (!v200)
                          {
                            ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
                            std::__shared_weak_count::__release_weak(v198);
                          }
                        }
                        v201 = (std::__shared_weak_count *)queue[3];
                        if (queue[3])
                        {
                          v202 = (unint64_t *)&queue[3][1];
                          do
                            v203 = __ldaxr(v202);
                          while (__stlxr(v203 - 1, v202));
                          if (!v203)
                          {
                            ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
                            std::__shared_weak_count::__release_weak(v201);
                          }
                        }
                        v204 = (std::__shared_weak_count *)queue[1];
                        if (queue[1])
                        {
                          v205 = (unint64_t *)&queue[1][1];
                          do
                            v206 = __ldaxr(v205);
                          while (__stlxr(v206 - 1, v205));
                          if (!v206)
                          {
                            ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
                            std::__shared_weak_count::__release_weak(v204);
                          }
                        }
                        queue[0] = (dispatch_queue_t)&v268;
                        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)queue);
                        if (__p.__r_.__value_.__r.__words[0])
                        {
                          __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
                          operator delete(__p.__r_.__value_.__l.__data_);
                        }
                        queue[0] = (dispatch_queue_t)&v271;
                        std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)queue);
                        v147 += 16;
                      }
                      while (v147 != v148);
                      v207 = (uint64_t *)(*v143 + 86);
                      v208 = *((_QWORD *)*v143 + 42);
                      v147 = *v207;
                      if (*v207 != v208)
                      {
                        do
                        {
                          v147 -= 16;
                          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v147);
                        }
                        while (v147 != v208);
                        v147 = v208;
                      }
                      v142 = v256;
                    }
                    *v207 = v147;
                    v143 += 2;
                  }
                  while (v143 != v142);
                  v141 = *(_QWORD *)(i + 32);
                }
                std::condition_variable::wait((std::condition_variable *)(v141 + 64), &__lk);
                v141 = *(_QWORD *)(i + 32);
                v143 = *(unsigned int ***)(v141 + 168);
                v142 = *(unsigned int ***)(v141 + 176);
                if (v143 == v142)
                  break;
                v209 = 0;
                v210 = *(unsigned int ***)(v141 + 168);
                do
                {
                  v211 = *v210;
                  v210 += 2;
                  v209 += (int)v211[82] + ((uint64_t)(*((_QWORD *)v211 + 43) - *((_QWORD *)v211 + 42)) >> 4);
                }
                while (v210 != v142);
              }
              while (v209);
            }
          }
          v212 = v283[0].__end_;
          begin = (__int32 *)v283[0].__begin_;
          v279 = 0;
          v280 = 0;
          __s = 0;
          std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__s, v284, v285, (v285 - (uint64_t)v284) >> 2);
          v214 = __s;
          if (begin == (__int32 *)v212)
            goto LABEL_314;
          v215 = v212;
          v216 = v279;
          v217 = v279 - __s;
          while (1)
          {
            v218 = wmemchr(v214, *begin, v217);
            v219 = v218 ? v218 : v216;
            if (v219 == v216)
              break;
            if (++begin == (__int32 *)v212)
              goto LABEL_315;
          }
          if (begin != (__int32 *)v212)
          {
            v220 = begin + 1;
            if (begin + 1 != (__int32 *)v212)
            {
              v215 = (unsigned int *)begin;
              do
              {
                v221 = wmemchr(v214, *v220, v217);
                if (v221)
                  v222 = v221;
                else
                  v222 = v216;
                if (v222 != v216)
                  *v215++ = *v220;
                ++v220;
              }
              while (v220 != (__int32 *)v212);
              goto LABEL_315;
            }
LABEL_314:
            v215 = (unsigned int *)begin;
          }
LABEL_315:
          if (v214)
          {
            v279 = v214;
            operator delete(v214);
          }
          if (v215 != v283[0].__end_)
            v283[0].__end_ = v215;
          if (__lk.__owns_)
            std::mutex::unlock(__lk.__m_);
          kdebug_trace();
          v223 = v297;
          AMCP::Core::Broker::make_snapshot((uint64_t)&p_end_cap, *(std::__shared_mutex_base **)(*(_QWORD *)(v259 + 16) + 16), (unsigned int **)&v294, v297);
          AMCP::Core::compute_system_differences(queue, &v291, (uint64_t *)&p_end_cap);
          LODWORD(__p.__r_.__value_.__l.__data_) = v260;
          LOBYTE(v271) = v257;
          AMCP::Observer::Map<std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>,unsigned int,true,std::less<unsigned int>>::call_observers_sync<unsigned int &,BOOL &,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&>(v259 + 1352, (unsigned int *)&__p, &__p, (char *)&v271, (uint64_t)queue);
          AMCP::Core::Broker::make_snapshot((uint64_t)&v271, *(std::__shared_mutex_base **)(*(_QWORD *)(v259 + 16) + 16), (unsigned int **)&v294, v223);
          AMCP::Core::compute_system_differences(&__p, &v291, &v271);
          std::set<unsigned int>::set[abi:ne180100]((uint64_t *)&__lk, (uint64_t)&v281);
          AMCP::IO_Core::Graph_Manager::update_graph_after_config_change(v140, v260, &__lk, 1, (uint64_t)v283);
          std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*(_QWORD **)&__lk.__owns_);
          AMCP::IO_Core::Graph_Manager::update_and_resume_io_contexts((_QWORD **)v140, &v286);
          AMCP::Core::Conductor::call_external_end_config_change_observers(v259, v260, v257, (uint64_t)&__p);
          v224 = (AMCP::Log::Scope_Registry *)kdebug_trace();
          AMCP::Log::Scope_Registry::get(v224);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v264, "com.apple.coreaudio", "AMCP");
          v226 = (int)v264[2].isa;
          switch(v226)
          {
            case 3:
              AMCP::Log::Scope_Registry::get(v225);
              AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v262, "com.apple.coreaudio", "AMCP");
              v239 = *(caulk::concurrent::messenger **)(v262 + 8);
              v240 = pthread_self();
              v241 = pthread_mach_thread_np(v240);
              v242 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 56, 8);
              *(_DWORD *)(v242 + 16) = 0;
              *(_BYTE *)(v242 + 20) = 1;
              *(_DWORD *)(v242 + 24) = v241;
              *(_QWORD *)(v242 + 32) = "Conductor.cpp";
              *(_DWORD *)(v242 + 40) = 423;
              *(_DWORD *)(v242 + 44) = v260;
              *(_DWORD *)(v242 + 48) = v255;
              *(_QWORD *)v242 = &off_1E69A0838;
              *(_QWORD *)(v242 + 8) = 0;
              caulk::concurrent::messenger::enqueue(v239, (caulk::concurrent::message *)v242);
              v231 = v263;
              if (v263)
              {
                p_shared_owners = (unint64_t *)&v263->__shared_owners_;
                do
                  v233 = __ldaxr(p_shared_owners);
                while (__stlxr(v233 - 1, p_shared_owners));
                goto LABEL_335;
              }
              break;
            case 2:
              AMCP::Log::Scope_Registry::get(v225);
              AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v262, "com.apple.coreaudio", "AMCP");
              v234 = *(caulk::concurrent::messenger **)(v262 + 8);
              v235 = pthread_self();
              v236 = pthread_mach_thread_np(v235);
              v237 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 56, 8);
              *(_DWORD *)(v237 + 16) = 0;
              *(_BYTE *)(v237 + 20) = 2;
              *(_DWORD *)(v237 + 24) = v236;
              *(_QWORD *)(v237 + 32) = "Conductor.cpp";
              *(_DWORD *)(v237 + 40) = 423;
              *(_DWORD *)(v237 + 44) = v260;
              *(_DWORD *)(v237 + 48) = v255;
              *(_QWORD *)v237 = &off_1E69A07E0;
              *(_QWORD *)(v237 + 8) = 0;
              caulk::concurrent::messenger::enqueue(v234, (caulk::concurrent::message *)v237);
              v231 = v263;
              if (v263)
              {
                v238 = (unint64_t *)&v263->__shared_owners_;
                do
                  v233 = __ldaxr(v238);
                while (__stlxr(v233 - 1, v238));
                goto LABEL_335;
              }
              break;
            case 1:
              AMCP::Log::Scope_Registry::get(v225);
              AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v262, "com.apple.coreaudio", "AMCP");
              v227 = *(caulk::concurrent::messenger **)(v262 + 8);
              v228 = pthread_self();
              v229 = pthread_mach_thread_np(v228);
              v230 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 56, 8);
              *(_DWORD *)(v230 + 16) = 0;
              *(_BYTE *)(v230 + 20) = 0;
              *(_DWORD *)(v230 + 24) = v229;
              *(_QWORD *)(v230 + 32) = "Conductor.cpp";
              *(_DWORD *)(v230 + 40) = 423;
              *(_DWORD *)(v230 + 44) = v260;
              *(_DWORD *)(v230 + 48) = v255;
              *(_QWORD *)v230 = &off_1E69A0788;
              *(_QWORD *)(v230 + 8) = 0;
              caulk::concurrent::messenger::enqueue(v227, (caulk::concurrent::message *)v230);
              v231 = v263;
              if (v263)
              {
                v232 = (unint64_t *)&v263->__shared_owners_;
                do
                  v233 = __ldaxr(v232);
                while (__stlxr(v233 - 1, v232));
LABEL_335:
                if (!v233)
                {
                  ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
                  std::__shared_weak_count::__release_weak(v231);
                }
              }
              break;
          }
          v244 = v265;
          if (v265)
          {
            v245 = (unint64_t *)&v265->__shared_owners_;
            do
              v246 = __ldaxr(v245);
            while (__stlxr(v246 - 1, v245));
            if (!v246)
            {
              ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
              std::__shared_weak_count::__release_weak(v244);
            }
          }
          std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>>>::~__hash_table((uint64_t)v270);
          if (v268)
          {
            v269 = (char *)v268;
            operator delete(v268);
          }
          if (__p.__r_.__value_.__r.__words[0])
          {
            __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>>::~__hash_table((uint64_t)&v271);
          std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>>>::~__hash_table((uint64_t)&v300);
          if (queue[3])
          {
            *(dispatch_queue_t *)&v299 = queue[3];
            operator delete(queue[3]);
          }
          if (queue[0])
          {
            queue[1] = queue[0];
            operator delete(queue[0]);
          }
          std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>>::~__hash_table((uint64_t)&p_end_cap);
          std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v282[0]);
          queue[0] = (dispatch_queue_t)&v283[1];
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)queue);
          if (v283[0].__begin_)
          {
            v283[0].__end_ = v283[0].__begin_;
            operator delete(v283[0].__begin_);
          }
          if (v284)
            operator delete(v284);
          std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v287[0]);
          queue[0] = (dispatch_queue_t)&v288;
          std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)queue);
          std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>>::~__hash_table((uint64_t)&v291);
        }
        if (v294)
          operator delete(v294);
        v2 = *(std::mutex **)(i + 32);
        std::mutex::lock(v2);
        v247 = *(_QWORD *)(i + 32);
        v248 = *(uint64_t **)(v247 + 168);
        v249 = *(uint64_t **)(v247 + 176);
        if (v248 == v249)
          goto LABEL_362;
        v250 = 0;
        do
        {
          v251 = *v248;
          v248 += 2;
          v250 += *(int *)(v251 + 328) + ((uint64_t)(*(_QWORD *)(v251 + 344) - *(_QWORD *)(v251 + 336)) >> 4);
        }
        while (v248 != v249);
        std::mutex::unlock(v2);
      }
      while (v250);
    }
  }
  v252 = *(std::mutex **)(i + 32);
  std::mutex::lock(v252);
  v253 = *(_QWORD *)(i + 32);
  *(_BYTE *)(v253 + 164) = 0;
  std::condition_variable::notify_all((std::condition_variable *)(v253 + 112));
  std::mutex::unlock(v252);
  return std::unique_ptr<AMCP::Core::Conductor::enqueue_config_change(unsigned int,unsigned int,unsigned int,std::function<void ()(void)> const&)::$_0,std::default_delete<AMCP::Core::Conductor::enqueue_config_change(unsigned int,unsigned int,unsigned int,std::function<void ()(void)> const&)::$_0>>::~unique_ptr[abi:ne180100](&v261);
}

void sub_1B5CA4694(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p,void *a60)
{
  void *v61;

  if (a2)
  {
    if (__p)
    {
      a60 = __p;
      operator delete(__p);
    }
    v61 = (void *)STACK[0x250];
    if (STACK[0x250])
    {
      STACK[0x258] = (unint64_t)v61;
      operator delete(v61);
    }
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a48);
    if (a32)
      operator delete(a32);
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<AMCP::Core::Conductor::enqueue_config_change(unsigned int,unsigned int,unsigned int,std::function<void ()(void)> const&)::$_0,std::default_delete<AMCP::Core::Conductor::enqueue_config_change(unsigned int,unsigned int,unsigned int,std::function<void ()(void)> const&)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v2 + 32);
    v3 = std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v2);
    MEMORY[0x1B5E50688](v3, 0x1020C4045C5CA15);
  }
  return a1;
}

void AMCP::Core::Conductor::call_external_begin_config_change_observers(uint64_t a1, int a2, int a3, char a4, uint64_t a5)
{
  std::__shared_mutex_base *v6;
  void *v7[3];
  void *v8;
  void *v9;
  _QWORD v10[3];
  char v11;
  int v12;
  void *v13[3];
  void *__p;
  void *v15;
  _QWORD v16[35];

  v16[34] = *MEMORY[0x1E0C80C00];
  v12 = a3;
  v11 = a4;
  v6 = (std::__shared_mutex_base *)(a1 + 1568);
  if (a2 == 1)
  {
    AMCP::Core::make_external_diff((uint64_t)v13, a5);
    AMCP::Observer::Map<std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>,unsigned int,true,std::less<unsigned int>>::call_observers_sync<unsigned int &,BOOL &,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>>>(v6, (unsigned int *)&v12, &v12, &v11);
    boost::container::vector<boost::container::dtl::pair<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>>>,void>::~vector(v16);
    if (__p)
    {
      v15 = __p;
      operator delete(__p);
    }
    if (v13[0])
    {
      v13[1] = v13[0];
      operator delete(v13[0]);
    }
  }
  else
  {
    AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v13, *(dispatch_object_t *)(a1 + 352));
    AMCP::Core::make_external_diff((uint64_t)v7, a5);
    AMCP::Observer::Map<std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>,unsigned int,true,std::less<unsigned int>>::call_observers_async<unsigned int &,BOOL &,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>>>(v6, (NSObject **)v13, (unsigned int *)&v12, &v12, &v11, (uint64_t)v7);
    boost::container::vector<boost::container::dtl::pair<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>>>,void>::~vector(v10);
    if (v8)
    {
      v9 = v8;
      operator delete(v8);
    }
    if (v7[0])
    {
      v7[1] = v7[0];
      operator delete(v7[0]);
    }
    AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v13);
  }
}

void AMCP::Observer::Map<std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>,unsigned int,true,std::less<unsigned int>>::call_observers_sync<unsigned int &,BOOL &,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&>(uint64_t a1, unsigned int *a2, _DWORD *a3, char *a4, uint64_t a5)
{
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  char v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  void **v20;
  char v21;
  char v22;

  v20 = (void **)a1;
  v21 = 1;
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)a1);
  if (*(_BYTE *)(a1 + 168))
  {
    v18 = 0uLL;
    *(_QWORD *)&v19 = 0;
    v10 = *a2;
    if (AMCP::Utility::Sorted_Vector<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>,0ul>,std::less<unsigned int>,std::allocator<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>>>::find(*(_DWORD **)(a1 + 176), *(_DWORD **)(a1 + 184), *a2))
    {
      AMCP::Utility::Sorted_Vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>,0ul>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>>>::insert_unique<std::__wrap_iter<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>> const*>,std::__wrap_iter<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>> const*>>(&v18, *(unint64_t **)(v11 + 8), *(unint64_t **)(v11 + 16));
      v10 = *a2;
    }
    v12 = *(_DWORD *)(a1 + 208);
    if (v10 != v12
      && AMCP::Utility::Sorted_Vector<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>,0ul>,std::less<unsigned int>,std::allocator<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>>>::find(*(_DWORD **)(a1 + 176), *(_DWORD **)(a1 + 184), v12))
    {
      AMCP::Utility::Sorted_Vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>,0ul>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>>>::insert_unique<std::__wrap_iter<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>> const*>,std::__wrap_iter<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>> const*>>(&v18, *(unint64_t **)(v13 + 8), *(unint64_t **)(v13 + 16));
    }
  }
  else
  {
    v18 = 0u;
    v19 = 0u;
  }
  std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)&v20);
  v15 = *((_QWORD *)&v18 + 1);
  for (i = v18; i != v15; i += 40)
  {
    v16 = *a4;
    LODWORD(v20) = *a3;
    v22 = v16;
    v17 = *(_QWORD *)(i + 32);
    if (!v17)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, void ***, char *, uint64_t))(*(_QWORD *)v17 + 48))(v17, &v20, &v22, a5);
  }
  v20 = (void **)&v18;
  std::vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>::__destroy_vector::operator()[abi:ne180100](&v20);
}

uint64_t *applesauce::dispatch::v1::async<AMCP::Core::Conductor::process_queued_config_change(unsigned int,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::Conductor::Queued_Change_Map_Item> const&)::$_4>(dispatch_queue_s *,AMCP::Core::Conductor::process_queued_config_change(unsigned int,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::Conductor::Queued_Change_Map_Item> const&)::$_4 &&)::{lambda(void *)#1}::__invoke(_QWORD *a1)
{
  uint64_t v2;
  std::mutex *v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  _QWORD *v8;

  v8 = a1;
  v2 = *(_QWORD *)(a1[6] + 32);
  if (!v2)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  v3 = (std::mutex *)a1[2];
  std::mutex::lock(v3);
  *(_BYTE *)(a1[6] + 48) = 1;
  v4 = a1[4];
  v5 = *(_DWORD *)(v4 + 328);
  v6 = __OFSUB__(v5--, 1);
  *(_DWORD *)(v4 + 328) = v5;
  if ((v5 < 0) ^ v6 | (v5 == 0))
    std::condition_variable::notify_all((std::condition_variable *)(a1[2] + 64));
  std::mutex::unlock(v3);
  return std::unique_ptr<AMCP::Core::Conductor::process_queued_config_change(unsigned int,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::Conductor::Queued_Change_Map_Item> const&)::$_4,std::default_delete<AMCP::Core::Conductor::process_queued_config_change(unsigned int,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::Conductor::Queued_Change_Map_Item> const&)::$_4>>::~unique_ptr[abi:ne180100]((uint64_t *)&v8);
}

uint64_t *std::unique_ptr<AMCP::Core::Conductor::process_queued_config_change(unsigned int,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::Conductor::Queued_Change_Map_Item> const&)::$_4,std::default_delete<AMCP::Core::Conductor::process_queued_config_change(unsigned int,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::Conductor::Queued_Change_Map_Item> const&)::$_4>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v2 + 48);
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v2 + 32);
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v2 + 16);
    v3 = std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v2);
    MEMORY[0x1B5E50688](v3, 0x20C400FA965B2);
  }
  return a1;
}

void AMCP::Core::Conductor::call_external_end_config_change_observers(uint64_t a1, int a2, char a3, uint64_t a4)
{
  std::__shared_mutex_base *v5;
  void *v6[3];
  void *__p;
  void *v8;
  _QWORD v9[3];
  char v10;
  int v11;
  NSObject *v12[41];

  v12[40] = *(NSObject **)MEMORY[0x1E0C80C00];
  v11 = a2;
  v10 = a3;
  v5 = (std::__shared_mutex_base *)(a1 + 2000);
  AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v12, *(dispatch_object_t *)(a1 + 352));
  AMCP::Core::make_external_diff((uint64_t)v6, a4);
  AMCP::Observer::Map<std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>,unsigned int,true,std::less<unsigned int>>::call_observers_async<unsigned int &,BOOL &,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>>>(v5, v12, (unsigned int *)&v11, &v11, &v10, (uint64_t)v6);
  boost::container::vector<boost::container::dtl::pair<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>>>,void>::~vector(v9);
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
  if (v6[0])
  {
    v6[1] = v6[0];
    operator delete(v6[0]);
  }
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v12);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::~__hash_table((uint64_t)(v2 + 3));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::process_queued_config_change(unsigned int,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::Conductor::Queued_Change_Map_Item> const&)::$_7,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::process_queued_config_change(unsigned int,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::Conductor::Queued_Change_Map_Item> const&)::$_7,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  caulk::concurrent::message *v13;
  uint8_t buf[8];
  _BYTE v15[10];
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v13 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v15;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v15)
  {
    v4 = (unint64_t *)(*(_QWORD *)v15 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_DWORD *)(a1 + 44);
    v11 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v15 = 2080;
    *(_QWORD *)&v15[2] = v8;
    v16 = 1024;
    v17 = v9;
    v18 = 1024;
    v19 = v10;
    v20 = 1024;
    v21 = v11;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d <=*=* Done with config change for source object %u, owning object %u", buf, 0x24u);
  }
  return caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::process_queued_config_change(unsigned int,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::Conductor::Queued_Change_Map_Item> const&)::$_7,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::rt_cleanup::~rt_cleanup(&v13);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::process_queued_config_change(unsigned int,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::Conductor::Queued_Change_Map_Item> const&)::$_7,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 56, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::process_queued_config_change(unsigned int,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::Conductor::Queued_Change_Map_Item> const&)::$_6,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::process_queued_config_change(unsigned int,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::Conductor::Queued_Change_Map_Item> const&)::$_6,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  caulk::concurrent::message *v13;
  uint8_t buf[8];
  _BYTE v15[10];
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v13 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v15;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v15)
  {
    v4 = (unint64_t *)(*(_QWORD *)v15 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_DWORD *)(a1 + 44);
    v11 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v15 = 2080;
    *(_QWORD *)&v15[2] = v8;
    v16 = 1024;
    v17 = v9;
    v18 = 1024;
    v19 = v10;
    v20 = 1024;
    v21 = v11;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d <=*=* Done with config change for source object %u, owning object %u", buf, 0x24u);
  }
  return caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::process_queued_config_change(unsigned int,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::Conductor::Queued_Change_Map_Item> const&)::$_6,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::rt_cleanup::~rt_cleanup(&v13);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::process_queued_config_change(unsigned int,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::Conductor::Queued_Change_Map_Item> const&)::$_6,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 56, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::process_queued_config_change(unsigned int,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::Conductor::Queued_Change_Map_Item> const&)::$_5,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::process_queued_config_change(unsigned int,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::Conductor::Queued_Change_Map_Item> const&)::$_5,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  caulk::concurrent::message *v13;
  uint8_t buf[8];
  _BYTE v15[10];
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v13 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v15;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v15)
  {
    v4 = (unint64_t *)(*(_QWORD *)v15 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_DWORD *)(a1 + 44);
    v11 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v15 = 2080;
    *(_QWORD *)&v15[2] = v8;
    v16 = 1024;
    v17 = v9;
    v18 = 1024;
    v19 = v10;
    v20 = 1024;
    v21 = v11;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d <=*=* Done with config change for source object %u, owning object %u", buf, 0x24u);
  }
  return caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::process_queued_config_change(unsigned int,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::Conductor::Queued_Change_Map_Item> const&)::$_5,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::rt_cleanup::~rt_cleanup(&v13);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::process_queued_config_change(unsigned int,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::Conductor::Queued_Change_Map_Item> const&)::$_5,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 56, 8);
  return a1;
}

void AMCP::Observer::Map<std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>,unsigned int,true,std::less<unsigned int>>::call_observers_sync<unsigned int &,BOOL &,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>>>(std::__shared_mutex_base *this, unsigned int *a2, int *a3, char *a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[4];
  void **v9;

  AMCP::Observer::Map<std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>,unsigned int,true,std::less<unsigned int>>::gather_observers(v8, this, a2);
  v6 = v8[0];
  v7 = v8[1];
  while (v6 != v7)
  {
    std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::operator()(*(_QWORD *)(v6 + 32), *a3, *a4);
    v6 += 40;
  }
  v9 = (void **)v8;
  std::vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>::__destroy_vector::operator()[abi:ne180100](&v9);
}

void AMCP::Observer::Map<std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>,unsigned int,true,std::less<unsigned int>>::call_observers_async<unsigned int &,BOOL &,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>>>(std::__shared_mutex_base *this, NSObject **a2, unsigned int *a3, int *a4, char *a5, uint64_t a6)
{
  __int128 v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  char v22;
  int v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  char v28;
  void *v29;
  __int128 v30;
  void *__p;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  void **v37;

  AMCP::Observer::Map<std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>,unsigned int,true,std::less<unsigned int>>::gather_observers(&v35, this, a3);
  v10 = v35;
  if ((_QWORD)v35 != *((_QWORD *)&v35 + 1))
  {
    v25 = v35;
    v35 = 0uLL;
    v24 = v36;
    v26 = v36;
    v36 = 0;
    v27 = *a4;
    v23 = v27;
    v28 = *a5;
    v22 = v28;
    v20 = *(_QWORD *)(a6 + 8);
    v29 = *(void **)a6;
    v21 = v29;
    *(_QWORD *)&v30 = v20;
    *(_QWORD *)a6 = 0;
    *(_QWORD *)(a6 + 8) = 0;
    v11 = *(void **)(a6 + 24);
    *((_QWORD *)&v30 + 1) = *(_QWORD *)(a6 + 16);
    v19 = *((_QWORD *)&v30 + 1);
    __p = v11;
    v12 = *(_QWORD *)(a6 + 40);
    *(_QWORD *)&v32 = *(_QWORD *)(a6 + 32);
    v13 = v32;
    *((_QWORD *)&v32 + 1) = v12;
    *(_QWORD *)(a6 + 16) = 0;
    *(_QWORD *)(a6 + 24) = 0;
    *(_QWORD *)(a6 + 32) = 0;
    *(_QWORD *)(a6 + 40) = 0;
    v15 = *(_QWORD *)(a6 + 56);
    *(_QWORD *)&v33 = *(_QWORD *)(a6 + 48);
    v14 = v33;
    *((_QWORD *)&v33 + 1) = v15;
    v34 = *(_QWORD *)(a6 + 64);
    v16 = v34;
    *(_QWORD *)(a6 + 48) = 0;
    *(_QWORD *)(a6 + 56) = 0;
    *(_QWORD *)(a6 + 64) = 0;
    v17 = *a2;
    v18 = (_QWORD *)operator new();
    *(_OWORD *)v18 = v10;
    v25 = 0u;
    v18[2] = v24;
    v26 = 0;
    *((_DWORD *)v18 + 8) = v23;
    *((_BYTE *)v18 + 36) = v22;
    v18[5] = v21;
    v18[6] = v20;
    v29 = 0;
    v30 = 0u;
    v18[7] = v19;
    v18[8] = v11;
    v18[9] = v13;
    v18[10] = v12;
    __p = 0;
    v32 = 0u;
    v18[11] = v14;
    v18[12] = v15;
    v18[13] = v16;
    v34 = 0;
    v33 = 0u;
    dispatch_async_f(v17, v18, (dispatch_function_t)applesauce::dispatch::v1::async<void AMCP::Observer::Map<std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>,unsigned int,true,std::less<unsigned int>>::call_observers_async<unsigned int &,BOOL &,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>>>(AMCP::Utility::Dispatch_Queue const&,unsigned int const&,unsigned int &,BOOL &,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> &&)::{lambda(void)#1}>(dispatch_queue_s *,void AMCP::Observer::Map<std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>,unsigned int,true,std::less<unsigned int>>::call_observers_async<unsigned int &,BOOL &,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>>>(AMCP::Utility::Dispatch_Queue const&,unsigned int const&,unsigned int &,BOOL &,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> &&)::{lambda(void)#1} &&)::{lambda(void *)#1}::__invoke);
    boost::container::vector<boost::container::dtl::pair<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>>>,void>::~vector(&v33);
    if (__p)
    {
      *(_QWORD *)&v32 = __p;
      operator delete(__p);
    }
    if (v29)
    {
      *(_QWORD *)&v30 = v29;
      operator delete(v29);
    }
    v37 = (void **)&v25;
    std::vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>::__destroy_vector::operator()[abi:ne180100](&v37);
  }
  *(_QWORD *)&v25 = &v35;
  std::vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
}

uint64_t AMCP::Observer::Map<std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>,unsigned int,true,std::less<unsigned int>>::gather_observers(_QWORD *a1, std::__shared_mutex_base *this, unsigned int *a3)
{
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  std::__shared_mutex_base *v11;
  char v12;

  v11 = this;
  v12 = 1;
  std::__shared_mutex_base::lock_shared(this);
  if (LOBYTE(this[1].__mut_.__m_.__sig))
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    v6 = *a3;
    if (AMCP::Utility::Sorted_Vector<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>,0ul>,std::less<unsigned int>,std::allocator<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>>>::find(*(_DWORD **)this[1].__mut_.__m_.__opaque, *(_DWORD **)&this[1].__mut_.__m_.__opaque[8], *a3))
    {
      AMCP::Utility::Sorted_Vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>,0ul>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>>::insert_unique<std::__wrap_iter<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>> const*>,std::__wrap_iter<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>> const*>>(a1, *(unint64_t **)(v7 + 8), *(unint64_t **)(v7 + 16));
      v6 = *a3;
    }
    v8 = *(_DWORD *)&this[1].__mut_.__m_.__opaque[32];
    if (v6 != v8
      && AMCP::Utility::Sorted_Vector<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>,0ul>,std::less<unsigned int>,std::allocator<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>>>::find(*(_DWORD **)this[1].__mut_.__m_.__opaque, *(_DWORD **)&this[1].__mut_.__m_.__opaque[8], v8))
    {
      AMCP::Utility::Sorted_Vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>,0ul>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>>::insert_unique<std::__wrap_iter<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>> const*>,std::__wrap_iter<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>> const*>>(a1, *(unint64_t **)(v9 + 8), *(unint64_t **)(v9 + 16));
    }
  }
  else
  {
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
  }
  return std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)&v11);
}

uint64_t applesauce::dispatch::v1::async<void AMCP::Observer::Map<std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>,unsigned int,true,std::less<unsigned int>>::call_observers_async<unsigned int &,BOOL &,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>>>(AMCP::Utility::Dispatch_Queue const&,unsigned int const&,unsigned int &,BOOL &,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> &&)::{lambda(void)#1}>(dispatch_queue_s *,void AMCP::Observer::Map<std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>,unsigned int,true,std::less<unsigned int>>::call_observers_async<unsigned int &,BOOL &,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>>>(AMCP::Utility::Dispatch_Queue const&,unsigned int const&,unsigned int &,BOOL &,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> &&)::{lambda(void)#1} &&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)a1 != v3)
  {
    do
    {
      std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::operator()(*(_QWORD *)(v2 + 32), *(_DWORD *)(a1 + 32), *(_BYTE *)(a1 + 36));
      v2 += 40;
    }
    while (v2 != v3);
  }
  return std::default_delete<void AMCP::Observer::Map<std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>,unsigned int,true,std::less<unsigned int>>::call_observers_async<unsigned int &,BOOL &,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>>>(AMCP::Utility::Dispatch_Queue const&,unsigned int const&,unsigned int &,BOOL &,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> &&)::{lambda(void)#1}>::operator()[abi:ne180100](a1);
}

void sub_1B5CA5510(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::default_delete<void AMCP::Observer::Map<std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>,unsigned int,true,std::less<unsigned int>>::call_observers_async<unsigned int &,BOOL &,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>>>(AMCP::Utility::Dispatch_Queue const&,unsigned int const&,unsigned int &,BOOL &,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> &&)::{lambda(void)#1}>::operator()[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  uint64_t v7;

  v1 = *a1;
  v2 = (char *)**a1;
  if (!v2)
    return;
  v4 = (char *)v1[1];
  v5 = **a1;
  if (v4 == v2)
    goto LABEL_10;
  do
  {
    v6 = (char *)*((_QWORD *)v4 - 1);
    if (v4 - 32 == v6)
    {
      v6 = v4 - 32;
      v7 = 4;
    }
    else
    {
      if (!v6)
        goto LABEL_8;
      v7 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
LABEL_8:
    v4 -= 40;
  }
  while (v4 != v2);
  v5 = **a1;
LABEL_10:
  v1[1] = v2;
  operator delete(v5);
}

uint64_t std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::operator()(uint64_t a1, int a2, char a3)
{
  char v4;
  int v5;

  v5 = a2;
  v4 = a3;
  if (!a1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, int *, char *))(*(_QWORD *)a1 + 48))(a1, &v5, &v4);
}

uint64_t std::default_delete<void AMCP::Observer::Map<std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>,unsigned int,true,std::less<unsigned int>>::call_observers_async<unsigned int &,BOOL &,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>>>(AMCP::Utility::Dispatch_Queue const&,unsigned int const&,unsigned int &,BOOL &,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> &&)::{lambda(void)#1}>::operator()[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void **v4;

  if (result)
  {
    v1 = result;
    boost::container::vector<boost::container::dtl::pair<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>>>,void>::~vector((_QWORD *)(result + 88));
    v2 = *(void **)(v1 + 64);
    if (v2)
    {
      *(_QWORD *)(v1 + 72) = v2;
      operator delete(v2);
    }
    v3 = *(void **)(v1 + 40);
    if (v3)
    {
      *(_QWORD *)(v1 + 48) = v3;
      operator delete(v3);
    }
    v4 = (void **)v1;
    std::vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>::__destroy_vector::operator()[abi:ne180100](&v4);
    JUMPOUT(0x1B5E50688);
  }
  return result;
}

_QWORD *AMCP::Utility::Sorted_Vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>,0ul>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>>::insert_unique<std::__wrap_iter<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>> const*>,std::__wrap_iter<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>> const*>>(_QWORD *result, unint64_t *a2, unint64_t *a3)
{
  unint64_t *v4;
  _QWORD **v5;
  unint64_t v6;
  unint64_t *v7;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (_QWORD **)result;
    do
    {
      v6 = *v4;
      if (AMCP::Utility::Sorted_Vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>,0ul>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>>::find(*v5, v5[1], *v4))
      {
        *v7 = v6;
        result = std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::operator=(v7 + 1, (uint64_t)(v4 + 1));
      }
      else
      {
        result = std::vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>::insert(v5, v7, v4);
      }
      v4 += 5;
    }
    while (v4 != a3);
  }
  return result;
}

BOOL AMCP::Utility::Sorted_Vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>,0ul>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>>::find(_QWORD *a1, _QWORD *a2, unint64_t a3)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  _QWORD *v7;
  unint64_t v8;

  if (a2 == a1)
  {
    v3 = a2;
  }
  else
  {
    v3 = a1;
    v4 = 0xCCCCCCCCCCCCCCCDLL * (a2 - a1);
    do
    {
      v5 = v4 >> 1;
      v6 = &v3[5 * (v4 >> 1)];
      v8 = *v6;
      v7 = v6 + 5;
      v4 += ~(v4 >> 1);
      if (v8 < a3)
        v3 = v7;
      else
        v4 = v5;
    }
    while (v4);
  }
  return v3 != a2 && *v3 == a3;
}

_QWORD *std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::operator=(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  _QWORD v10[4];

  v10[3] = *MEMORY[0x1E0C80C00];
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v8, a2);
  if (v8 != a1)
  {
    v3 = v9;
    v4 = (_QWORD *)a1[3];
    if (v9 == v8)
    {
      if (v4 == a1)
      {
        (*(void (**)(_QWORD *, _QWORD *))(v8[0] + 24))(v8, v10);
        (*(void (**)(_QWORD *))(*v9 + 32))(v9);
        v9 = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a1[3] + 24))(a1[3], v8);
        (*(void (**)(_QWORD))(*(_QWORD *)a1[3] + 32))(a1[3]);
        a1[3] = 0;
        v9 = v8;
        (*(void (**)(_QWORD *, _QWORD *))(v10[0] + 24))(v10, a1);
        (*(void (**)(_QWORD *))(v10[0] + 32))(v10);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(v8[0] + 24))(v8, a1);
        (*(void (**)(_QWORD *))(*v9 + 32))(v9);
        v9 = (_QWORD *)a1[3];
      }
      a1[3] = a1;
    }
    else if (v4 == a1)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a1 + 24))(a1, v8);
      (*(void (**)(_QWORD))(*(_QWORD *)a1[3] + 32))(a1[3]);
      a1[3] = v9;
      v9 = v8;
    }
    else
    {
      v9 = (_QWORD *)a1[3];
      a1[3] = v3;
    }
  }
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_14;
  }
  if (v9)
  {
    v6 = 5;
LABEL_14:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return a1;
}

void sub_1B5CA590C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>::insert(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v3;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int64x2_t v40;
  char *v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  char *v52;
  char *v53;
  char *v55;
  __int128 v56;
  char *v57;
  _QWORD *v58;
  _QWORD *v59;
  int64x2_t v60;
  char *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;

  v3 = a3;
  v5 = (_QWORD *)*a1;
  v6 = a1[1];
  v7 = (uint64_t)a2 - *a1;
  v8 = v7 / 40;
  v9 = (_QWORD *)(*a1 + 40 * (v7 / 40));
  v11 = a1 + 2;
  v10 = a1[2];
  if (v6 >= v10)
  {
    v19 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6 - (_QWORD)v5) >> 3) + 1;
    if (v19 > 0x666666666666666)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v21 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v10 - (_QWORD)v5) >> 3);
    if (2 * v21 > v19)
      v19 = 2 * v21;
    if (v21 >= 0x333333333333333)
      v22 = 0x666666666666666;
    else
      v22 = v19;
    v58 = v11;
    if (v22)
    {
      v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v22);
    }
    else
    {
      v24 = 0;
      v23 = 0;
    }
    v25 = &v24[40 * v8];
    v55 = v24;
    *(_QWORD *)&v56 = v25;
    *((_QWORD *)&v56 + 1) = v25;
    v57 = &v24[40 * v23];
    if (v8 == v23)
    {
      if (v7 < 1)
      {
        if (v5 == a2)
          v29 = 1;
        else
          v29 = 2 * v8;
        v62 = v11;
        v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v29);
        v31 = v30;
        v32 = &v30[40 * (v29 >> 2)];
        v34 = &v30[40 * v33];
        if (*((_QWORD *)&v56 + 1) == (_QWORD)v56)
        {
          v40 = vdupq_n_s64(v56);
          v36 = &v30[40 * (v29 >> 2)];
        }
        else
        {
          v35 = (*((_QWORD *)&v56 + 1) - (_QWORD)v56) / 40;
          v36 = &v32[40 * v35];
          v37 = 40 * v35;
          v38 = (uint64_t)&v30[40 * (v29 >> 2) + 8];
          v39 = v56 + 8;
          do
          {
            *(_QWORD *)(v38 - 8) = *(_QWORD *)(v39 - 8);
            v38 = std::__function::__value_func<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::__value_func[abi:ne180100](v38, v39)+ 40;
            v39 += 40;
            v37 -= 40;
          }
          while (v37);
          v40 = (int64x2_t)v56;
        }
        v41 = v57;
        v59 = v55;
        v55 = v31;
        *(_QWORD *)&v56 = v32;
        v60 = v40;
        *((_QWORD *)&v56 + 1) = v36;
        v57 = v34;
        v61 = v41;
        std::__split_buffer<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>::~__split_buffer((uint64_t)&v59);
        v25 = v36;
      }
      else
      {
        v26 = v8 + 2;
        if (v8 >= -1)
          v26 = v8 + 1;
        v25 -= 40 * (v26 >> 1);
        *(_QWORD *)&v56 = v25;
        *((_QWORD *)&v56 + 1) = v25;
      }
    }
    *(_QWORD *)v25 = *v3;
    std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)(v25 + 8), (uint64_t)(v3 + 1));
    v42 = v56;
    v43 = (_QWORD *)(*((_QWORD *)&v56 + 1) + 40);
    *((_QWORD *)&v56 + 1) += 40;
    v44 = (_QWORD *)*a1;
    v45 = v56;
    if (v9 != (_QWORD *)*a1)
    {
      v46 = v9;
      do
      {
        v47 = *(v46 - 5);
        v46 -= 5;
        *(_QWORD *)(v45 - 40) = v47;
        v45 -= 40;
        std::__function::__value_func<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::__value_func[abi:ne180100](v45 + 8, (uint64_t)(v46 + 1));
      }
      while (v46 != v44);
      v43 = (_QWORD *)*((_QWORD *)&v56 + 1);
    }
    *(_QWORD *)&v56 = v45;
    v48 = (_QWORD *)a1[1];
    v63 = v43;
    v64 = v43;
    v59 = v11;
    v60.i64[0] = (uint64_t)&v63;
    v60.i64[1] = (uint64_t)&v64;
    LOBYTE(v61) = 0;
    while (v9 != v48)
    {
      v49 = (uint64_t)(v9 + 1);
      v50 = *v9;
      v9 += 5;
      *v43 = v50;
      std::__function::__value_func<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::__value_func[abi:ne180100]((uint64_t)(v43 + 1), v49);
      v43 = v64 + 5;
      v64 += 5;
    }
    LOBYTE(v61) = 1;
    std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&v59);
    v51 = *(_OWORD *)a1;
    v52 = v57;
    *a1 = v56;
    a1[1] = v43;
    v56 = v51;
    v53 = (char *)a1[2];
    a1[2] = v52;
    v57 = v53;
    v55 = (char *)v51;
    std::__split_buffer<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>::~__split_buffer((uint64_t)&v55);
    return (_QWORD *)v42;
  }
  else if (v9 == (_QWORD *)v6)
  {
    *v9 = *a3;
    std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)(v9 + 1), (uint64_t)(a3 + 1));
    a1[1] = v9 + 5;
  }
  else
  {
    v12 = v9 + 5;
    v13 = (_QWORD *)(v6 - 40);
    if (v6 < 0x28)
    {
      v15 = (_QWORD *)a1[1];
    }
    else
    {
      v14 = (uint64_t *)(v6 - 40);
      v15 = (_QWORD *)a1[1];
      do
      {
        v16 = (uint64_t)(v14 + 1);
        v17 = *v14;
        v14 += 5;
        v18 = (uint64_t)(v15 + 1);
        *v15 = v17;
        v15 += 5;
        std::__function::__value_func<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::__value_func[abi:ne180100](v18, v16);
      }
      while ((unint64_t)v14 < v6);
    }
    a1[1] = v15;
    if ((_QWORD *)v6 != v12)
    {
      v27 = 8 * ((uint64_t)(v6 - (_QWORD)v12) >> 3);
      v28 = (uint64_t)&v5[5 * v8 - 5];
      do
      {
        std::__memberwise_forward_assign[abi:ne180100]<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>,unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>,0ul,1ul>(v13, (_QWORD *)(v28 + v27));
        v13 -= 5;
        v27 -= 40;
      }
      while (v27);
    }
    if (v9 <= v3)
      v3 += 5 * (a1[1] > (unint64_t)v3);
    *v9 = *v3;
    std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::operator=(v9 + 1, (uint64_t)(v3 + 1));
  }
  return v9;
}

void sub_1B5CA5CD4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    *(_QWORD *)(a1 + 16) = v2 - 40;
    v4 = *(_QWORD **)(v2 - 8);
    if (v4 == (_QWORD *)(v2 - 32))
    {
      v4 = (_QWORD *)(v2 - 32);
      v5 = 4;
LABEL_7:
      (*(void (**)(void))(*v4 + 8 * v5))();
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      if (v4)
      {
        v5 = 5;
        goto LABEL_7;
      }
      v2 -= 40;
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__function::__value_func<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (1)
    {
      if (v3 == v4)
        return a1;
      v5 = *(_QWORD **)(v3 - 8);
      if ((_QWORD *)(v3 - 32) == v5)
      {
        v5 = (_QWORD *)(v3 - 32);
        v6 = 4;
      }
      else
      {
        if (!v5)
          goto LABEL_10;
        v6 = 5;
      }
      (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_10:
      v3 -= 40;
    }
  }
  return a1;
}

_QWORD *std::__memberwise_forward_assign[abi:ne180100]<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>,unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>,0ul,1ul>(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *result;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  v3 = a2 + 1;
  *a1 = *a2;
  v4 = a1 + 1;
  v6 = a1 + 4;
  result = (_QWORD *)a1[4];
  *v6 = 0;
  if (result == v4)
  {
    v7 = 4;
    result = v4;
  }
  else
  {
    if (!result)
      goto LABEL_6;
    v7 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
LABEL_6:
  v10 = (_QWORD *)a2[4];
  v9 = a2 + 4;
  v8 = v10;
  if (!v10)
  {
    v9 = v6;
    goto LABEL_10;
  }
  if (v8 != v3)
  {
    *v6 = v8;
LABEL_10:
    *v9 = 0;
    return result;
  }
  *v6 = v4;
  return (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)*v9 + 24))(*v9, v4);
}

_QWORD *AMCP::Utility::Sorted_Vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>,0ul>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>>>::insert_unique<std::__wrap_iter<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>> const*>,std::__wrap_iter<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>> const*>>(_QWORD *result, unint64_t *a2, unint64_t *a3)
{
  unint64_t *v4;
  _QWORD **v5;
  unint64_t v6;
  unint64_t *v7;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (_QWORD **)result;
    do
    {
      v6 = *v4;
      if (AMCP::Utility::Sorted_Vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>,0ul>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>>::find(*v5, v5[1], *v4))
      {
        *v7 = v6;
        result = std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>::operator=(v7 + 1, (uint64_t)(v4 + 1));
      }
      else
      {
        result = std::vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>>::insert(v5, v7, v4);
      }
      v4 += 5;
    }
    while (v4 != a3);
  }
  return result;
}

_QWORD *std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>::operator=(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  _QWORD v10[4];

  v10[3] = *MEMORY[0x1E0C80C00];
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v8, a2);
  if (v8 != a1)
  {
    v3 = v9;
    v4 = (_QWORD *)a1[3];
    if (v9 == v8)
    {
      if (v4 == a1)
      {
        (*(void (**)(_QWORD *, _QWORD *))(v8[0] + 24))(v8, v10);
        (*(void (**)(_QWORD *))(*v9 + 32))(v9);
        v9 = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a1[3] + 24))(a1[3], v8);
        (*(void (**)(_QWORD))(*(_QWORD *)a1[3] + 32))(a1[3]);
        a1[3] = 0;
        v9 = v8;
        (*(void (**)(_QWORD *, _QWORD *))(v10[0] + 24))(v10, a1);
        (*(void (**)(_QWORD *))(v10[0] + 32))(v10);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(v8[0] + 24))(v8, a1);
        (*(void (**)(_QWORD *))(*v9 + 32))(v9);
        v9 = (_QWORD *)a1[3];
      }
      a1[3] = a1;
    }
    else if (v4 == a1)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a1 + 24))(a1, v8);
      (*(void (**)(_QWORD))(*(_QWORD *)a1[3] + 32))(a1[3]);
      a1[3] = v9;
      v9 = v8;
    }
    else
    {
      v9 = (_QWORD *)a1[3];
      a1[3] = v3;
    }
  }
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_14;
  }
  if (v9)
  {
    v6 = 5;
LABEL_14:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return a1;
}

void sub_1B5CA6128(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>>::insert(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v3;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int64x2_t v40;
  char *v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  char *v52;
  char *v53;
  char *v55;
  __int128 v56;
  char *v57;
  _QWORD *v58;
  _QWORD *v59;
  int64x2_t v60;
  char *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;

  v3 = a3;
  v5 = (_QWORD *)*a1;
  v6 = a1[1];
  v7 = (uint64_t)a2 - *a1;
  v8 = v7 / 40;
  v9 = (_QWORD *)(*a1 + 40 * (v7 / 40));
  v11 = a1 + 2;
  v10 = a1[2];
  if (v6 >= v10)
  {
    v19 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6 - (_QWORD)v5) >> 3) + 1;
    if (v19 > 0x666666666666666)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v21 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v10 - (_QWORD)v5) >> 3);
    if (2 * v21 > v19)
      v19 = 2 * v21;
    if (v21 >= 0x333333333333333)
      v22 = 0x666666666666666;
    else
      v22 = v19;
    v58 = v11;
    if (v22)
    {
      v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v22);
    }
    else
    {
      v24 = 0;
      v23 = 0;
    }
    v25 = &v24[40 * v8];
    v55 = v24;
    *(_QWORD *)&v56 = v25;
    *((_QWORD *)&v56 + 1) = v25;
    v57 = &v24[40 * v23];
    if (v8 == v23)
    {
      if (v7 < 1)
      {
        if (v5 == a2)
          v29 = 1;
        else
          v29 = 2 * v8;
        v62 = v11;
        v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v29);
        v31 = v30;
        v32 = &v30[40 * (v29 >> 2)];
        v34 = &v30[40 * v33];
        if (*((_QWORD *)&v56 + 1) == (_QWORD)v56)
        {
          v40 = vdupq_n_s64(v56);
          v36 = &v30[40 * (v29 >> 2)];
        }
        else
        {
          v35 = (*((_QWORD *)&v56 + 1) - (_QWORD)v56) / 40;
          v36 = &v32[40 * v35];
          v37 = 40 * v35;
          v38 = (uint64_t)&v30[40 * (v29 >> 2) + 8];
          v39 = v56 + 8;
          do
          {
            *(_QWORD *)(v38 - 8) = *(_QWORD *)(v39 - 8);
            v38 = std::__function::__value_func<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>::__value_func[abi:ne180100](v38, v39)+ 40;
            v39 += 40;
            v37 -= 40;
          }
          while (v37);
          v40 = (int64x2_t)v56;
        }
        v41 = v57;
        v59 = v55;
        v55 = v31;
        *(_QWORD *)&v56 = v32;
        v60 = v40;
        *((_QWORD *)&v56 + 1) = v36;
        v57 = v34;
        v61 = v41;
        std::__split_buffer<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>::~__split_buffer((uint64_t)&v59);
        v25 = v36;
      }
      else
      {
        v26 = v8 + 2;
        if (v8 >= -1)
          v26 = v8 + 1;
        v25 -= 40 * (v26 >> 1);
        *(_QWORD *)&v56 = v25;
        *((_QWORD *)&v56 + 1) = v25;
      }
    }
    *(_QWORD *)v25 = *v3;
    std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)(v25 + 8), (uint64_t)(v3 + 1));
    v42 = v56;
    v43 = (_QWORD *)(*((_QWORD *)&v56 + 1) + 40);
    *((_QWORD *)&v56 + 1) += 40;
    v44 = (_QWORD *)*a1;
    v45 = v56;
    if (v9 != (_QWORD *)*a1)
    {
      v46 = v9;
      do
      {
        v47 = *(v46 - 5);
        v46 -= 5;
        *(_QWORD *)(v45 - 40) = v47;
        v45 -= 40;
        std::__function::__value_func<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>::__value_func[abi:ne180100](v45 + 8, (uint64_t)(v46 + 1));
      }
      while (v46 != v44);
      v43 = (_QWORD *)*((_QWORD *)&v56 + 1);
    }
    *(_QWORD *)&v56 = v45;
    v48 = (_QWORD *)a1[1];
    v63 = v43;
    v64 = v43;
    v59 = v11;
    v60.i64[0] = (uint64_t)&v63;
    v60.i64[1] = (uint64_t)&v64;
    LOBYTE(v61) = 0;
    while (v9 != v48)
    {
      v49 = (uint64_t)(v9 + 1);
      v50 = *v9;
      v9 += 5;
      *v43 = v50;
      std::__function::__value_func<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>::__value_func[abi:ne180100]((uint64_t)(v43 + 1), v49);
      v43 = v64 + 5;
      v64 += 5;
    }
    LOBYTE(v61) = 1;
    std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&v59);
    v51 = *(_OWORD *)a1;
    v52 = v57;
    *a1 = v56;
    a1[1] = v43;
    v56 = v51;
    v53 = (char *)a1[2];
    a1[2] = v52;
    v57 = v53;
    v55 = (char *)v51;
    std::__split_buffer<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>::~__split_buffer((uint64_t)&v55);
    return (_QWORD *)v42;
  }
  else if (v9 == (_QWORD *)v6)
  {
    *v9 = *a3;
    std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)(v9 + 1), (uint64_t)(a3 + 1));
    a1[1] = v9 + 5;
  }
  else
  {
    v12 = v9 + 5;
    v13 = (_QWORD *)(v6 - 40);
    if (v6 < 0x28)
    {
      v15 = (_QWORD *)a1[1];
    }
    else
    {
      v14 = (uint64_t *)(v6 - 40);
      v15 = (_QWORD *)a1[1];
      do
      {
        v16 = (uint64_t)(v14 + 1);
        v17 = *v14;
        v14 += 5;
        v18 = (uint64_t)(v15 + 1);
        *v15 = v17;
        v15 += 5;
        std::__function::__value_func<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>::__value_func[abi:ne180100](v18, v16);
      }
      while ((unint64_t)v14 < v6);
    }
    a1[1] = v15;
    if ((_QWORD *)v6 != v12)
    {
      v27 = 8 * ((uint64_t)(v6 - (_QWORD)v12) >> 3);
      v28 = (uint64_t)&v5[5 * v8 - 5];
      do
      {
        std::__memberwise_forward_assign[abi:ne180100]<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>,unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>,0ul,1ul>(v13, (_QWORD *)(v28 + v27));
        v13 -= 5;
        v27 -= 40;
      }
      while (v27);
    }
    if (v9 <= v3)
      v3 += 5 * (a1[1] > (unint64_t)v3);
    *v9 = *v3;
    std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>::operator=(v9 + 1, (uint64_t)(v3 + 1));
  }
  return v9;
}

void sub_1B5CA64F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__value_func<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

_QWORD *std::__memberwise_forward_assign[abi:ne180100]<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>,unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>,0ul,1ul>(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *result;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  v3 = a2 + 1;
  *a1 = *a2;
  v4 = a1 + 1;
  v6 = a1 + 4;
  result = (_QWORD *)a1[4];
  *v6 = 0;
  if (result == v4)
  {
    v7 = 4;
    result = v4;
  }
  else
  {
    if (!result)
      goto LABEL_6;
    v7 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
LABEL_6:
  v10 = (_QWORD *)a2[4];
  v9 = a2 + 4;
  v8 = v10;
  if (!v10)
  {
    v9 = v6;
    goto LABEL_10;
  }
  if (v8 != v3)
  {
    *v6 = v8;
LABEL_10:
    *v9 = 0;
    return result;
  }
  *v6 = v4;
  return (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)*v9 + 24))(*v9, v4);
}

void std::__function::__func<AMCP::Core::Conductor::calculate_snapshot_params(unsigned int,unsigned int,BOOL)::$_6,std::allocator<AMCP::Core::Conductor::calculate_snapshot_params(unsigned int,unsigned int,BOOL)::$_6>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Core::Conductor::calculate_snapshot_params(unsigned int,unsigned int,BOOL)::$_6,std::allocator<AMCP::Core::Conductor::calculate_snapshot_params(unsigned int,unsigned int,BOOL)::$_6>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E69A0598;
  return result;
}

void std::__function::__func<AMCP::Core::Conductor::calculate_snapshot_params(unsigned int,unsigned int,BOOL)::$_6,std::allocator<AMCP::Core::Conductor::calculate_snapshot_params(unsigned int,unsigned int,BOOL)::$_6>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E69A0598;
}

BOOL std::__function::__func<AMCP::Core::Conductor::calculate_snapshot_params(unsigned int,unsigned int,BOOL)::$_6,std::allocator<AMCP::Core::Conductor::calculate_snapshot_params(unsigned int,unsigned int,BOOL)::$_6>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::operator()(uint64_t a1, AMCP::Core::Core **a2)
{
  AMCP::Core::Core *v3;
  unsigned int v4;
  _BOOL8 v5;
  AMCP::Core::Core *v6;
  CFTypeRef cf;
  CFTypeRef v9;
  CFTypeRef v10;
  int v11;

  v3 = *a2;
  v10 = (CFTypeRef)0x676C6F6262636C73;
  v11 = 0;
  v4 = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>(v3, (const AMCP::Address *)&v10, &AMCP::k_class_id_unknown);
  v5 = 0;
  if (AMCP::is_base_of((AMCP *)0x61706C67, v4))
  {
    v6 = *a2;
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "");
    v10 = (CFTypeRef)0x676C6F6270696964;
    v11 = 0;
    AMCP::Core::Core::get_typed_property_value<applesauce::CF::StringRef,std::enable_if<true,void>>(&v9, v6, (AMCP::Address *)&v10, &cf);
    if (cf)
      CFRelease(cf);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v10, "com.apple.audio.Meta-Driver");
    v5 = applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>((const __CFString *)v9, (const __CFString **)&v10) == kCFCompareEqualTo;
    if (v10)
      CFRelease(v10);
    if (v9)
      CFRelease(v9);
  }
  return v5;
}

void sub_1B5CA6760(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AMCP::Core::Conductor::calculate_snapshot_params(unsigned int,unsigned int,BOOL)::$_6,std::allocator<AMCP::Core::Conductor::calculate_snapshot_params(unsigned int,unsigned int,BOOL)::$_6>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core9Conductor25calculate_snapshot_paramsEjjbE3$_6"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Core::Conductor::calculate_snapshot_params(unsigned int,unsigned int,BOOL)::$_6,std::allocator<AMCP::Core::Conductor::calculate_snapshot_params(unsigned int,unsigned int,BOOL)::$_6>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::target_type()
{
}

void caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::calculate_snapshot_params(unsigned int,unsigned int,BOOL)::$_5,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::calculate_snapshot_params(unsigned int,unsigned int,BOOL)::$_5,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  caulk::concurrent::message *v13;
  uint8_t buf[8];
  _BYTE v15[10];
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v13 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v15;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v15)
  {
    v4 = (unint64_t *)(*(_QWORD *)v15 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_DWORD *)(a1 + 44);
    v11 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v15 = 2080;
    *(_QWORD *)&v15[2] = v8;
    v16 = 1024;
    v17 = v9;
    v18 = 1024;
    v19 = v10;
    v20 = 1024;
    v21 = v11;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d <=*=* Done with config change for source object %u, owning object %u (unrecognized stock class)", buf, 0x24u);
  }
  return caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::calculate_snapshot_params(unsigned int,unsigned int,BOOL)::$_5,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::rt_cleanup::~rt_cleanup(&v13);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::calculate_snapshot_params(unsigned int,unsigned int,BOOL)::$_5,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 56, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::calculate_snapshot_params(unsigned int,unsigned int,BOOL)::$_4,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::calculate_snapshot_params(unsigned int,unsigned int,BOOL)::$_4,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  caulk::concurrent::message *v13;
  uint8_t buf[8];
  _BYTE v15[10];
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v13 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v15;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v15)
  {
    v4 = (unint64_t *)(*(_QWORD *)v15 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_DWORD *)(a1 + 44);
    v11 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v15 = 2080;
    *(_QWORD *)&v15[2] = v8;
    v16 = 1024;
    v17 = v9;
    v18 = 1024;
    v19 = v10;
    v20 = 1024;
    v21 = v11;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d <=*=* Done with config change for source object %u, owning object %u (unrecognized stock class)", buf, 0x24u);
  }
  return caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::calculate_snapshot_params(unsigned int,unsigned int,BOOL)::$_4,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::rt_cleanup::~rt_cleanup(&v13);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::calculate_snapshot_params(unsigned int,unsigned int,BOOL)::$_4,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 56, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::calculate_snapshot_params(unsigned int,unsigned int,BOOL)::$_3,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::calculate_snapshot_params(unsigned int,unsigned int,BOOL)::$_3,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  caulk::concurrent::message *v13;
  uint8_t buf[8];
  _BYTE v15[10];
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v13 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v15;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v15)
  {
    v4 = (unint64_t *)(*(_QWORD *)v15 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_DWORD *)(a1 + 44);
    v11 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v15 = 2080;
    *(_QWORD *)&v15[2] = v8;
    v16 = 1024;
    v17 = v9;
    v18 = 1024;
    v19 = v10;
    v20 = 1024;
    v21 = v11;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d <=*=* Done with config change for source object %u, owning object %u (unrecognized stock class)", buf, 0x24u);
  }
  return caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::calculate_snapshot_params(unsigned int,unsigned int,BOOL)::$_3,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::rt_cleanup::~rt_cleanup(&v13);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::calculate_snapshot_params(unsigned int,unsigned int,BOOL)::$_3,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 56, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::calculate_snapshot_params(unsigned int,unsigned int,BOOL)::$_2,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::calculate_snapshot_params(unsigned int,unsigned int,BOOL)::$_2,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  caulk::concurrent::message *v13;
  uint8_t buf[8];
  _BYTE v15[10];
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v13 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v15;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v15)
  {
    v4 = (unint64_t *)(*(_QWORD *)v15 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_DWORD *)(a1 + 44);
    v11 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v15 = 2080;
    *(_QWORD *)&v15[2] = v8;
    v16 = 1024;
    v17 = v9;
    v18 = 1024;
    v19 = v10;
    v20 = 1024;
    v21 = v11;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d <=*=* Done with config change for source object %u, owning object %u (no object)", buf, 0x24u);
  }
  return caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::calculate_snapshot_params(unsigned int,unsigned int,BOOL)::$_2,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::rt_cleanup::~rt_cleanup(&v13);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::calculate_snapshot_params(unsigned int,unsigned int,BOOL)::$_2,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 56, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::calculate_snapshot_params(unsigned int,unsigned int,BOOL)::$_1,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::calculate_snapshot_params(unsigned int,unsigned int,BOOL)::$_1,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  caulk::concurrent::message *v13;
  uint8_t buf[8];
  _BYTE v15[10];
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v13 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v15;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v15)
  {
    v4 = (unint64_t *)(*(_QWORD *)v15 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_DWORD *)(a1 + 44);
    v11 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v15 = 2080;
    *(_QWORD *)&v15[2] = v8;
    v16 = 1024;
    v17 = v9;
    v18 = 1024;
    v19 = v10;
    v20 = 1024;
    v21 = v11;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d <=*=* Done with config change for source object %u, owning object %u (no object)", buf, 0x24u);
  }
  return caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::calculate_snapshot_params(unsigned int,unsigned int,BOOL)::$_1,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::rt_cleanup::~rt_cleanup(&v13);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::calculate_snapshot_params(unsigned int,unsigned int,BOOL)::$_1,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 56, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::calculate_snapshot_params(unsigned int,unsigned int,BOOL)::$_0,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::calculate_snapshot_params(unsigned int,unsigned int,BOOL)::$_0,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  caulk::concurrent::message *v13;
  uint8_t buf[8];
  _BYTE v15[10];
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v13 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v15;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v15)
  {
    v4 = (unint64_t *)(*(_QWORD *)v15 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_DWORD *)(a1 + 44);
    v11 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v15 = 2080;
    *(_QWORD *)&v15[2] = v8;
    v16 = 1024;
    v17 = v9;
    v18 = 1024;
    v19 = v10;
    v20 = 1024;
    v21 = v11;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d <=*=* Done with config change for source object %u, owning object %u (no object)", buf, 0x24u);
  }
  return caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::calculate_snapshot_params(unsigned int,unsigned int,BOOL)::$_0,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::rt_cleanup::~rt_cleanup(&v13);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::calculate_snapshot_params(unsigned int,unsigned int,BOOL)::$_0,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 56, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::process_queued_config_change(unsigned int,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::Conductor::Queued_Change_Map_Item> const&)::$_3,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::process_queued_config_change(unsigned int,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::Conductor::Queued_Change_Map_Item> const&)::$_3,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  caulk::concurrent::message *v13;
  uint8_t buf[8];
  _BYTE v15[10];
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v13 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v15;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v15)
  {
    v4 = (unint64_t *)(*(_QWORD *)v15 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_DWORD *)(a1 + 44);
    v11 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v15 = 2080;
    *(_QWORD *)&v15[2] = v8;
    v16 = 1024;
    v17 = v9;
    v18 = 1024;
    v19 = v10;
    v20 = 1024;
    v21 = v11;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d *=*=> Begin config change for source object %u, owning object %u", buf, 0x24u);
  }
  return caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::process_queued_config_change(unsigned int,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::Conductor::Queued_Change_Map_Item> const&)::$_3,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::rt_cleanup::~rt_cleanup(&v13);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::process_queued_config_change(unsigned int,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::Conductor::Queued_Change_Map_Item> const&)::$_3,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 56, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::process_queued_config_change(unsigned int,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::Conductor::Queued_Change_Map_Item> const&)::$_2,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::process_queued_config_change(unsigned int,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::Conductor::Queued_Change_Map_Item> const&)::$_2,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  caulk::concurrent::message *v13;
  uint8_t buf[8];
  _BYTE v15[10];
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v13 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v15;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v15)
  {
    v4 = (unint64_t *)(*(_QWORD *)v15 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_DWORD *)(a1 + 44);
    v11 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v15 = 2080;
    *(_QWORD *)&v15[2] = v8;
    v16 = 1024;
    v17 = v9;
    v18 = 1024;
    v19 = v10;
    v20 = 1024;
    v21 = v11;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d *=*=> Begin config change for source object %u, owning object %u", buf, 0x24u);
  }
  return caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::process_queued_config_change(unsigned int,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::Conductor::Queued_Change_Map_Item> const&)::$_2,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::rt_cleanup::~rt_cleanup(&v13);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::process_queued_config_change(unsigned int,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::Conductor::Queued_Change_Map_Item> const&)::$_2,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 56, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::process_queued_config_change(unsigned int,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::Conductor::Queued_Change_Map_Item> const&)::$_1,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::process_queued_config_change(unsigned int,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::Conductor::Queued_Change_Map_Item> const&)::$_1,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  caulk::concurrent::message *v13;
  uint8_t buf[8];
  _BYTE v15[10];
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v13 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v15;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v15)
  {
    v4 = (unint64_t *)(*(_QWORD *)v15 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_DWORD *)(a1 + 44);
    v11 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v15 = 2080;
    *(_QWORD *)&v15[2] = v8;
    v16 = 1024;
    v17 = v9;
    v18 = 1024;
    v19 = v10;
    v20 = 1024;
    v21 = v11;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d *=*=> Begin config change for source object %u, owning object %u", buf, 0x24u);
  }
  return caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::process_queued_config_change(unsigned int,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::Conductor::Queued_Change_Map_Item> const&)::$_1,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::rt_cleanup::~rt_cleanup(&v13);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::process_queued_config_change(unsigned int,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::Conductor::Queued_Change_Map_Item> const&)::$_1,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 56, 8);
  return a1;
}

void std::__shared_ptr_emplace<AMCP::Core::Conductor::Queued_Change>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69A0338;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::Core::Conductor::Queued_Change>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69A0338;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__shared_ptr_emplace<AMCP::Core::Conductor::Queued_Change>::__on_zero_shared(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__shared_ptr_emplace<AMCP::Core::Conductor::Queued_Change_Object>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69A0AF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::Core::Conductor::Queued_Change_Object>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69A0AF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

void std::__shared_ptr_emplace<AMCP::Core::Conductor::Queued_Change_Object>::__on_zero_shared(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 360);
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v2);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)(a1 + 32));
}

void std::__shared_ptr_emplace<AMCP::Core::Conductor::Queued_Change_Map_Item>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69A0AA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::Core::Conductor::Queued_Change_Map_Item>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69A0AA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

void std::__shared_ptr_emplace<AMCP::Core::Conductor::Queued_Change_Map_Item>::__on_zero_shared(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = *(void **)(a1 + 192);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 200);
    v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        v3 = std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v3 - 16);
      while ((void *)v3 != v2);
      v4 = *(void **)(a1 + 192);
    }
    *(_QWORD *)(a1 + 200) = v2;
    operator delete(v4);
  }
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 136));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
}

void AMCP::Observer::Map<std::function<void ()(unsigned int)>,unsigned int,true,std::less<unsigned int>>::~Map(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void **v6;

  v2 = *(_QWORD *)(a1 + 176);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 184);
    v4 = *(void **)(a1 + 176);
    if (v3 != v2)
    {
      do
      {
        v5 = v3 - 40;
        v6 = (void **)(v3 - 32);
        std::vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>::__destroy_vector::operator()[abi:ne180100](&v6);
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *(void **)(a1 + 176);
    }
    *(_QWORD *)(a1 + 184) = v2;
    operator delete(v4);
  }
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 112));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 64));
  std::mutex::~mutex((std::mutex *)a1);
}

void AMCP::Observer::Map<std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,unsigned int,true,std::less<unsigned int>>::~Map(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void **v6;

  v2 = *(_QWORD *)(a1 + 176);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 184);
    v4 = *(void **)(a1 + 176);
    if (v3 != v2)
    {
      do
      {
        v5 = v3 - 40;
        v6 = (void **)(v3 - 32);
        std::vector<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>::__destroy_vector::operator()[abi:ne180100](&v6);
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *(void **)(a1 + 176);
    }
    *(_QWORD *)(a1 + 184) = v2;
    operator delete(v4);
  }
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 112));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 64));
  std::mutex::~mutex((std::mutex *)a1);
}

void AMCP::Core::Conductor::flush_work_queues(dispatch_object_t *this)
{
  _BYTE v2[320];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v2, this[44]);
  AMCP::Utility::Dispatch_Queue::flush_all_work((AMCP::Utility::Dispatch_Queue *)v2);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v2);
  AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v2, this[4]);
  AMCP::Utility::Dispatch_Queue::flush_all_work((AMCP::Utility::Dispatch_Queue *)v2);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v2);
  AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v2, this[84]);
  AMCP::Utility::Dispatch_Queue::flush_all_work((AMCP::Utility::Dispatch_Queue *)v2);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v2);
}

uint64_t *applesauce::dispatch::v1::async<AMCP::Core::Conductor::finish_all_notifications(std::function<void ()(void)> const&)::$_0>(dispatch_queue_s *,AMCP::Core::Conductor::finish_all_notifications(std::function<void ()(void)> const&)::$_0 &&)::{lambda(void *)#1}::__invoke(AMCP::Utility::Expiration_Check *a1)
{
  uint64_t v2;
  _BOOL8 is_valid;
  uint64_t v4;
  std::__shared_weak_count *v6;
  NSObject *v7;
  unint64_t *v8;
  unint64_t v9;
  _opaque_pthread_t *v10;
  mach_port_t v11;
  AMCP::Utility::Expiration_Check *v12;
  uint8_t buf[8];
  _BYTE v14[10];
  __int16 v15;
  int v16;
  __int16 v17;
  const char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v12 = a1;
  v2 = *((_QWORD *)a1 + 5);
  is_valid = AMCP::Utility::Expiration_Check::is_valid(a1);
  if (!is_valid)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)is_valid);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v6 = *(std::__shared_weak_count **)v14;
    v7 = **(NSObject ***)buf;
    if (*(_QWORD *)v14)
    {
      v8 = (unint64_t *)(*(_QWORD *)v14 + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v10 = pthread_self();
      v11 = pthread_mach_thread_np(v10);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v11;
      *(_WORD *)v14 = 2080;
      *(_QWORD *)&v14[2] = "Conductor.cpp";
      v15 = 1024;
      v16 = 217;
      v17 = 2080;
      v18 = "expiration_check.is_valid()";
      _os_log_error_impl(&dword_1B57BA000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s caller has gone out of scope", buf, 0x22u);
    }
    abort();
  }
  v4 = *(_QWORD *)(*((_QWORD *)a1 + 4) + 24);
  if (!v4)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4);
  std::mutex::lock((std::mutex *)(v2 + 992));
  std::condition_variable::notify_all((std::condition_variable *)(v2 + 1056));
  std::mutex::unlock((std::mutex *)(v2 + 992));
  return std::unique_ptr<AMCP::Core::Conductor::finish_all_notifications(std::function<void ()(void)> const&)::$_0,std::default_delete<AMCP::Core::Conductor::finish_all_notifications(std::function<void ()(void)> const&)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)&v12);
}

void sub_1B5CA7C0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<AMCP::Core::Conductor::finish_all_notifications(std::function<void ()(void)> const&)::$_0,std::default_delete<AMCP::Core::Conductor::finish_all_notifications(std::function<void ()(void)> const&)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<AMCP::Core::Conductor::finish_all_notifications(std::function<void ()(void)> const&)::$_0,std::default_delete<AMCP::Core::Conductor::finish_all_notifications(std::function<void ()(void)> const&)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor(v2);
    MEMORY[0x1B5E50688](v3, 0x10E2C4061EF8AF9);
  }
  return a1;
}

void caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::properties_changed(unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>> const&)::$_5,std::tuple<unsigned int,char const*,int,unsigned int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::properties_changed(unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>> const&)::$_5,std::tuple<unsigned int,char const*,int,unsigned int>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  caulk::concurrent::message *v12;
  uint8_t buf[8];
  _BYTE v14[10];
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v12 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v14;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v14)
  {
    v4 = (unint64_t *)(*(_QWORD *)v14 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v14 = 2080;
    *(_QWORD *)&v14[2] = v8;
    v15 = 1024;
    v16 = v9;
    v17 = 1024;
    v18 = v10;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d <+++++ Done handling of properties changed for source object, %d", buf, 0x1Eu);
  }
  return caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::properties_changed(unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>> const&)::$_5,std::tuple<unsigned int,char const*,int,unsigned int>>::rt_cleanup::~rt_cleanup(&v12);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::properties_changed(unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>> const&)::$_5,std::tuple<unsigned int,char const*,int,unsigned int>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 48, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::properties_changed(unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>> const&)::$_4,std::tuple<unsigned int,char const*,int,unsigned int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::properties_changed(unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>> const&)::$_4,std::tuple<unsigned int,char const*,int,unsigned int>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  caulk::concurrent::message *v12;
  uint8_t buf[8];
  _BYTE v14[10];
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v12 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v14;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v14)
  {
    v4 = (unint64_t *)(*(_QWORD *)v14 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v14 = 2080;
    *(_QWORD *)&v14[2] = v8;
    v15 = 1024;
    v16 = v9;
    v17 = 1024;
    v18 = v10;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d <+++++ Done handling of properties changed for source object, %d", buf, 0x1Eu);
  }
  return caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::properties_changed(unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>> const&)::$_4,std::tuple<unsigned int,char const*,int,unsigned int>>::rt_cleanup::~rt_cleanup(&v12);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::properties_changed(unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>> const&)::$_4,std::tuple<unsigned int,char const*,int,unsigned int>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 48, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::properties_changed(unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>> const&)::$_3,std::tuple<unsigned int,char const*,int,unsigned int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::properties_changed(unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>> const&)::$_3,std::tuple<unsigned int,char const*,int,unsigned int>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  caulk::concurrent::message *v12;
  uint8_t buf[8];
  _BYTE v14[10];
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v12 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v14;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v14)
  {
    v4 = (unint64_t *)(*(_QWORD *)v14 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v14 = 2080;
    *(_QWORD *)&v14[2] = v8;
    v15 = 1024;
    v16 = v9;
    v17 = 1024;
    v18 = v10;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d <+++++ Done handling of properties changed for source object, %d", buf, 0x1Eu);
  }
  return caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::properties_changed(unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>> const&)::$_3,std::tuple<unsigned int,char const*,int,unsigned int>>::rt_cleanup::~rt_cleanup(&v12);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::properties_changed(unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>> const&)::$_3,std::tuple<unsigned int,char const*,int,unsigned int>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 48, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::properties_changed(unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>> const&)::$_2,std::tuple<unsigned int,char const*,int,unsigned int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::properties_changed(unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>> const&)::$_2,std::tuple<unsigned int,char const*,int,unsigned int>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  caulk::concurrent::message *v12;
  uint8_t buf[8];
  _BYTE v14[10];
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v12 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v14;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v14)
  {
    v4 = (unint64_t *)(*(_QWORD *)v14 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v14 = 2080;
    *(_QWORD *)&v14[2] = v8;
    v15 = 1024;
    v16 = v9;
    v17 = 1024;
    v18 = v10;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d +++++> Beginning handling of properties changed for source object, %d", buf, 0x1Eu);
  }
  return caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::properties_changed(unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>> const&)::$_2,std::tuple<unsigned int,char const*,int,unsigned int>>::rt_cleanup::~rt_cleanup(&v12);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::properties_changed(unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>> const&)::$_2,std::tuple<unsigned int,char const*,int,unsigned int>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 48, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::properties_changed(unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>> const&)::$_1,std::tuple<unsigned int,char const*,int,unsigned int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::properties_changed(unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>> const&)::$_1,std::tuple<unsigned int,char const*,int,unsigned int>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  caulk::concurrent::message *v12;
  uint8_t buf[8];
  _BYTE v14[10];
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v12 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v14;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v14)
  {
    v4 = (unint64_t *)(*(_QWORD *)v14 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v14 = 2080;
    *(_QWORD *)&v14[2] = v8;
    v15 = 1024;
    v16 = v9;
    v17 = 1024;
    v18 = v10;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d +++++> Beginning handling of properties changed for source object, %d", buf, 0x1Eu);
  }
  return caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::properties_changed(unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>> const&)::$_1,std::tuple<unsigned int,char const*,int,unsigned int>>::rt_cleanup::~rt_cleanup(&v12);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::properties_changed(unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>> const&)::$_1,std::tuple<unsigned int,char const*,int,unsigned int>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 48, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::properties_changed(unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>> const&)::$_0,std::tuple<unsigned int,char const*,int,unsigned int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::properties_changed(unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>> const&)::$_0,std::tuple<unsigned int,char const*,int,unsigned int>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  caulk::concurrent::message *v12;
  uint8_t buf[8];
  _BYTE v14[10];
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v12 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v14;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v14)
  {
    v4 = (unint64_t *)(*(_QWORD *)v14 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v14 = 2080;
    *(_QWORD *)&v14[2] = v8;
    v15 = 1024;
    v16 = v9;
    v17 = 1024;
    v18 = v10;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d +++++> Beginning handling of properties changed for source object, %d", buf, 0x1Eu);
  }
  return caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::properties_changed(unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>> const&)::$_0,std::tuple<unsigned int,char const*,int,unsigned int>>::rt_cleanup::~rt_cleanup(&v12);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::properties_changed(unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>> const&)::$_0,std::tuple<unsigned int,char const*,int,unsigned int>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 48, 8);
  return a1;
}

uint64_t AMCP::Utility::Sorted_Vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>,0ul>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>>>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;

  if (a1 == a2)
    goto LABEL_38;
  v5 = *(uint64_t **)a2;
  v4 = *(uint64_t **)(a2 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v4 - *(_QWORD *)a2) >> 3);
  v8 = *(_QWORD **)a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - *(_QWORD *)a1) >> 3) >= v7)
  {
    v17 = *(_QWORD **)(a1 + 8);
    if (0xCCCCCCCCCCCCCCCDLL * (v17 - v8) < v7)
    {
      v18 = &v5[v17 - v8];
      if (v17 != v8)
      {
        v19 = v8 + 1;
        v20 = 8 * (v17 - v8);
        v21 = (uint64_t)(v5 + 1);
        do
        {
          *(v19 - 1) = *(_QWORD *)(v21 - 8);
          v19 = std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>::operator=(v19, v21)+ 5;
          v21 += 40;
          v20 -= 40;
        }
        while (v20);
        v8 = *(_QWORD **)(a1 + 8);
      }
      v16 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>>,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>*,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>*,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>*>(a1 + 16, v18, v4, v8);
      goto LABEL_26;
    }
    if (v5 != v4)
    {
      do
      {
        v22 = (uint64_t)(v5 + 1);
        v23 = *v5;
        v5 += 5;
        v24 = v8 + 1;
        *v8 = v23;
        v8 += 5;
        std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>::operator=(v24, v22);
      }
      while (v5 != v4);
      v17 = *(_QWORD **)(a1 + 8);
    }
    while (1)
    {
      if (v17 == v8)
      {
        *(_QWORD *)(a1 + 8) = v8;
        goto LABEL_38;
      }
      v25 = (_QWORD *)*(v17 - 1);
      if (v17 - 4 == v25)
      {
        v25 = v17 - 4;
        v26 = 4;
      }
      else
      {
        if (!v25)
          goto LABEL_35;
        v26 = 5;
      }
      (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_35:
      v17 -= 5;
    }
  }
  if (!v8)
    goto LABEL_13;
  v9 = *(_QWORD **)(a1 + 8);
  v10 = *(_QWORD **)a1;
  if (v9 == v8)
    goto LABEL_12;
  do
  {
    v11 = (_QWORD *)*(v9 - 1);
    if (v9 - 4 == v11)
    {
      v11 = v9 - 4;
      v12 = 4;
    }
    else
    {
      if (!v11)
        goto LABEL_10;
      v12 = 5;
    }
    (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_10:
    v9 -= 5;
  }
  while (v9 != v8);
  v10 = *(_QWORD **)a1;
LABEL_12:
  *(_QWORD *)(a1 + 8) = v8;
  operator delete(v10);
  v6 = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
LABEL_13:
  if (v7 > 0x666666666666666)
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  v13 = 0xCCCCCCCCCCCCCCCDLL * (v6 >> 3);
  v14 = 2 * v13;
  if (2 * v13 <= v7)
    v14 = v7;
  if (v13 >= 0x333333333333333)
    v15 = 0x666666666666666;
  else
    v15 = v14;
  std::vector<CA::StreamDescription>::__vallocate[abi:ne180100]((_QWORD *)a1, v15);
  v16 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>>,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>*,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>*,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>*>(a1 + 16, v5, v4, *(_QWORD **)(a1 + 8));
LABEL_26:
  *(_QWORD *)(a1 + 8) = v16;
LABEL_38:
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  return a1;
}

void sub_1B5CA88A0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>>>>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void **v5;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 40;
    v5 = (void **)(i - 32);
    std::vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *std::vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>>::__init_with_size[abi:ne180100]<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>*,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>*>(_QWORD *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<CA::StreamDescription>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>>,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>*,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>*,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>*>((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B5CA8970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>>,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>*,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>*,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>*>(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v4;
  _QWORD *v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = *v6;
      std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)(v4 + 1), (uint64_t)(v6 + 1));
      v6 += 5;
      v4 = v11 + 5;
      v11 += 5;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B5CA8A24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unint64_t AMCP::Observer::Map<std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>,unsigned int,true,std::less<unsigned int>>::register_observer(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  unsigned int v17;
  unint64_t v18;
  _DWORD *v19;
  BOOL v20;
  unsigned int *v21;
  unint64_t v22;
  __int128 *v23;
  _QWORD *v24;
  unint64_t v25;
  _DWORD *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  unsigned int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  int64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v71;
  _QWORD *v72;
  unsigned int v73[2];
  __int128 v74;
  _QWORD *v75;
  __int16 v76;
  uint64_t v77;
  char v78;
  _QWORD *v79;
  _QWORD *v80;
  __int128 v81;
  __int128 v82;
  _QWORD *v83;
  unint64_t v84;
  _QWORD v85[4];
  __int128 v86;
  __int128 v87;
  _QWORD *v88;
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  v77 = a1;
  v78 = 1;
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)a1);
  if (!*(_BYTE *)(a1 + 168))
  {
    v6 = 0;
    goto LABEL_61;
  }
  do
    v6 = __ldaxr(&AMCP::Observer::Implementation::get_next_token(void)::s_next_token);
  while (__stlxr(v6 + 1, &AMCP::Observer::Implementation::get_next_token(void)::s_next_token));
  if (AMCP::Utility::Sorted_Vector<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>,0ul>,std::less<unsigned int>,std::allocator<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>>>::find(*(_DWORD **)(a1 + 176), *(_DWORD **)(a1 + 184), *a2))
  {
    v8 = v7;
    *(_QWORD *)&v86 = v6;
    v9 = (_QWORD *)&v86 + 1;
    std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)&v86 + 8, a3);
    v10 = *(_QWORD **)(v8 + 8);
    v11 = *(_QWORD **)(v8 + 16);
    v12 = (_QWORD *)(v8 + 8);
    if (AMCP::Utility::Sorted_Vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>,0ul>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>>::find(v10, v11, v6))
    {
      *v13 = v6;
      std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::operator=(v13 + 1, (uint64_t)&v86 + 8);
    }
    else
    {
      std::vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>::insert(v12, v13, &v86);
    }
    v24 = v88;
    goto LABEL_56;
  }
  v84 = v6;
  v9 = v85;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v85, a3);
  v71 = 0uLL;
  v72 = 0;
  *(_QWORD *)&v81 = &v71;
  BYTE8(v81) = 0;
  v14 = operator new(0x28uLL);
  *(_QWORD *)&v71 = v14;
  *((_QWORD *)&v71 + 1) = v14;
  v72 = v14 + 5;
  v79 = v14;
  v80 = v14;
  *(_QWORD *)&v86 = &v72;
  *((_QWORD *)&v86 + 1) = &v79;
  *(_QWORD *)&v87 = &v80;
  BYTE8(v87) = 0;
  *v14 = v84;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)(v14 + 1), (uint64_t)v85);
  v80 += 5;
  v15 = v80;
  BYTE8(v87) = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&v86);
  v16 = v72;
  *((_QWORD *)&v71 + 1) = v15;
  v72 = 0;
  v73[0] = *a2;
  v17 = v73[0];
  v74 = v71;
  v71 = 0uLL;
  v75 = v16;
  v19 = *(_DWORD **)(a1 + 176);
  v18 = *(_QWORD *)(a1 + 184);
  v20 = AMCP::Utility::Sorted_Vector<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>,0ul>,std::less<unsigned int>,std::allocator<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>>>::find(v19, (_DWORD *)v18, v73[0]);
  v22 = (unint64_t)v21;
  if (v20)
  {
    *v21 = v17;
    v23 = &v74;
  }
  else
  {
    v25 = *(_QWORD *)(a1 + 192);
    if (v18 >= v25)
    {
      v31 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - (_QWORD)v19) >> 3) + 1;
      if (v31 > 0x666666666666666)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v32 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v25 - (_QWORD)v19) >> 3);
      if (2 * v32 > v31)
        v31 = 2 * v32;
      if (v32 >= 0x333333333333333)
        v33 = 0x666666666666666;
      else
        v33 = v31;
      v83 = (_QWORD *)(a1 + 192);
      if (v33)
        v33 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v33);
      else
        v34 = 0;
      v44 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v22 - (_QWORD)v19) >> 3);
      v45 = v33 + 8 * ((uint64_t)(v22 - (_QWORD)v19) >> 3);
      *(_QWORD *)&v81 = v33;
      *((_QWORD *)&v81 + 1) = v45;
      *(_QWORD *)&v82 = v45;
      *((_QWORD *)&v82 + 1) = v33 + 40 * v34;
      if (v44 == v34)
      {
        if ((uint64_t)(v22 - (_QWORD)v19) < 1)
        {
          if ((_DWORD *)v22 == v19)
            v47 = 1;
          else
            v47 = 0x999999999999999ALL * ((uint64_t)(v22 - (_QWORD)v19) >> 3);
          v88 = v83;
          v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v47);
          v49 = &v48[40 * (v47 >> 2)];
          *(_QWORD *)&v86 = v48;
          *((_QWORD *)&v86 + 1) = v49;
          *((_QWORD *)&v87 + 1) = &v48[40 * v50];
          v51 = *((_QWORD *)&v81 + 1);
          if ((_QWORD)v82 != *((_QWORD *)&v81 + 1))
          {
            v52 = &v49[v82 - *((_QWORD *)&v81 + 1)];
            do
            {
              *(_DWORD *)v49 = *(_DWORD *)v51;
              *((_QWORD *)v49 + 2) = 0;
              *((_QWORD *)v49 + 3) = 0;
              *((_QWORD *)v49 + 1) = 0;
              *((_QWORD *)v49 + 1) = *(_QWORD *)(v51 + 8);
              *(_QWORD *)(v51 + 8) = 0;
              v53 = *((_QWORD *)v49 + 2);
              *((_QWORD *)v49 + 2) = *(_QWORD *)(v51 + 16);
              *(_QWORD *)(v51 + 16) = v53;
              v54 = *((_QWORD *)v49 + 3);
              *((_QWORD *)v49 + 3) = *(_QWORD *)(v51 + 24);
              *(_QWORD *)(v51 + 24) = v54;
              v49 += 40;
              v51 += 40;
            }
            while (v49 != v52);
            v49 = v52;
          }
          *(_QWORD *)&v87 = v49;
          v55 = v81;
          v56 = v82;
          v81 = v86;
          v82 = v87;
          v86 = v55;
          v87 = v56;
          std::__split_buffer<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>>>>>::~__split_buffer((uint64_t)&v86);
          v45 = v82;
        }
        else
        {
          if (v44 >= -1)
            v46 = v44 + 1;
          else
            v46 = v44 + 2;
          v45 -= 40 * (v46 >> 1);
          *((_QWORD *)&v81 + 1) = v45;
          *(_QWORD *)&v82 = v45;
        }
      }
      *(_DWORD *)v45 = v73[0];
      *(_QWORD *)(v45 + 16) = 0;
      *(_QWORD *)(v45 + 24) = 0;
      *(_QWORD *)(v45 + 8) = 0;
      std::vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>::__init_with_size[abi:ne180100]<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>*,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>*>((_QWORD *)(v45 + 8), (_QWORD *)v74, *((_QWORD **)&v74 + 1), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&v74 + 1) - v74) >> 3));
      *(_WORD *)(v45 + 32) = v76;
      v57 = (_QWORD *)*((_QWORD *)&v81 + 1);
      v58 = v82 + 40;
      *(_QWORD *)&v82 = v82 + 40;
      v59 = *(_QWORD **)(a1 + 176);
      if ((_QWORD *)v22 != v59)
      {
        v60 = (_QWORD *)v22;
        do
        {
          v61 = *((_DWORD *)v60 - 10);
          v60 -= 5;
          *((_DWORD *)v57 - 10) = v61;
          v57 -= 5;
          v57[2] = 0;
          v57[3] = 0;
          v57[1] = 0;
          v57[1] = v60[1];
          v60[1] = 0;
          v62 = v57[2];
          v57[2] = v60[2];
          v60[2] = v62;
          v63 = v57[3];
          v57[3] = v60[3];
          v60[3] = v63;
        }
        while (v60 != v59);
        v58 = v82;
      }
      *((_QWORD *)&v81 + 1) = v57;
      v64 = *(_QWORD *)(a1 + 184);
      if (v22 != v64)
      {
        do
        {
          *(_DWORD *)v58 = *(_DWORD *)v22;
          *(_QWORD *)(v58 + 16) = 0;
          *(_QWORD *)(v58 + 24) = 0;
          *(_QWORD *)(v58 + 8) = 0;
          *(_QWORD *)(v58 + 8) = *(_QWORD *)(v22 + 8);
          *(_QWORD *)(v22 + 8) = 0;
          v65 = *(_QWORD *)(v58 + 16);
          *(_QWORD *)(v58 + 16) = *(_QWORD *)(v22 + 16);
          *(_QWORD *)(v22 + 16) = v65;
          v66 = *(_QWORD *)(v58 + 24);
          *(_QWORD *)(v58 + 24) = *(_QWORD *)(v22 + 24);
          *(_QWORD *)(v22 + 24) = v66;
          v58 += 40;
          v22 += 40;
        }
        while (v22 != v64);
        v57 = (_QWORD *)*((_QWORD *)&v81 + 1);
        v22 = *(_QWORD *)(a1 + 184);
      }
      v67 = *(_QWORD *)(a1 + 176);
      *(_QWORD *)(a1 + 176) = v57;
      *(_QWORD *)(a1 + 184) = v58;
      v68 = *(_QWORD *)(a1 + 192);
      *(_QWORD *)(a1 + 192) = *((_QWORD *)&v82 + 1);
      *(_QWORD *)&v82 = v22;
      *((_QWORD *)&v82 + 1) = v68;
      *(_QWORD *)&v81 = v67;
      *((_QWORD *)&v81 + 1) = v67;
      std::__split_buffer<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>>>>>::~__split_buffer((uint64_t)&v81);
      goto LABEL_55;
    }
    if (v21 == (unsigned int *)v18)
    {
      *(_DWORD *)v18 = v17;
      *(_QWORD *)(v18 + 16) = 0;
      *(_QWORD *)(v18 + 24) = 0;
      *(_QWORD *)(v18 + 8) = 0;
      std::vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>::__init_with_size[abi:ne180100]<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>*,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>*>((_QWORD *)(v18 + 8), (_QWORD *)v74, *((_QWORD **)&v74 + 1), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&v74 + 1) - v74) >> 3));
      *(_WORD *)(v18 + 32) = v76;
      *(_QWORD *)(a1 + 184) = v18 + 40;
      goto LABEL_55;
    }
    v26 = v21 + 10;
    v27 = v18 - 40;
    v28 = v18;
    while (v27 < v18)
    {
      *(_DWORD *)v28 = *(_DWORD *)v27;
      *(_QWORD *)(v28 + 16) = 0;
      *(_QWORD *)(v28 + 24) = 0;
      *(_QWORD *)(v28 + 8) = 0;
      *(_QWORD *)(v28 + 8) = *(_QWORD *)(v27 + 8);
      *(_QWORD *)(v27 + 8) = 0;
      v29 = *(_QWORD *)(v28 + 16);
      *(_QWORD *)(v28 + 16) = *(_QWORD *)(v27 + 16);
      *(_QWORD *)(v27 + 16) = v29;
      v30 = *(_QWORD *)(v28 + 24);
      *(_QWORD *)(v28 + 24) = *(_QWORD *)(v27 + 24);
      *(_QWORD *)(v27 + 24) = v30;
      v28 += 40;
      v27 += 40;
    }
    *(_QWORD *)(a1 + 184) = v28;
    if ((_DWORD *)v18 != v26)
    {
      v35 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - (_QWORD)v26) >> 3);
      v36 = (_QWORD *)(v18 - 16);
      v37 = 10 * v35;
      do
      {
        v38 = &v21[v37];
        *((_DWORD *)v36 - 6) = v21[v37 - 10];
        v39 = *(v36 - 2);
        *(v36 - 2) = *(_QWORD *)&v21[v37 - 8];
        *((_QWORD *)v38 - 4) = v39;
        v40 = *(v36 - 1);
        *(v36 - 1) = *(_QWORD *)&v21[v37 - 6];
        *((_QWORD *)v38 - 3) = v40;
        v41 = *v36;
        *v36 = *(_QWORD *)&v21[v37 - 4];
        v36 -= 5;
        *((_QWORD *)v38 - 2) = v41;
        v37 -= 10;
      }
      while (v37 * 4);
    }
    v42 = v73;
    if (v22 <= (unint64_t)v73)
      v42 = &v73[10 * (*(_QWORD *)(a1 + 184) > (unint64_t)v73)];
    v43 = *v42;
    v23 = (__int128 *)(v42 + 2);
    *(_DWORD *)v22 = v43;
  }
  AMCP::Utility::Sorted_Vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>,0ul>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>>::operator=(v22 + 8, (uint64_t)v23);
LABEL_55:
  *(_QWORD *)&v86 = &v74;
  std::vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v86);
  *(_QWORD *)&v86 = &v71;
  std::vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v86);
  v24 = (_QWORD *)v85[3];
LABEL_56:
  if (v24 == v9)
  {
    v69 = 4;
    goto LABEL_60;
  }
  if (v24)
  {
    v69 = 5;
    v9 = v24;
LABEL_60:
    (*(void (**)(_QWORD *))(*v9 + 8 * v69))(v9);
  }
LABEL_61:
  std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v77);
  return v6;
}

void sub_1B5CA9088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,_QWORD *a32)
{
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;

  *(_QWORD *)(v33 + 184) = v34;
  std::vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>::__destroy_vector::operator()[abi:ne180100](&a22);
  a22 = (void **)&a9;
  std::vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>::__destroy_vector::operator()[abi:ne180100](&a22);
  if (a32 == v32)
  {
    v36 = 4;
  }
  else
  {
    if (!a32)
      goto LABEL_6;
    v36 = 5;
    v32 = a32;
  }
  (*(void (**)(_QWORD *))(*v32 + 8 * v36))(v32);
LABEL_6:
  std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Utility::Sorted_Vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>,0ul>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;

  if (a1 == a2)
    goto LABEL_38;
  v5 = *(uint64_t **)a2;
  v4 = *(uint64_t **)(a2 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v4 - *(_QWORD *)a2) >> 3);
  v8 = *(_QWORD **)a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - *(_QWORD *)a1) >> 3) >= v7)
  {
    v17 = *(_QWORD **)(a1 + 8);
    if (0xCCCCCCCCCCCCCCCDLL * (v17 - v8) < v7)
    {
      v18 = &v5[v17 - v8];
      if (v17 != v8)
      {
        v19 = v8 + 1;
        v20 = 8 * (v17 - v8);
        v21 = (uint64_t)(v5 + 1);
        do
        {
          *(v19 - 1) = *(_QWORD *)(v21 - 8);
          v19 = std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::operator=(v19, v21)+ 5;
          v21 += 40;
          v20 -= 40;
        }
        while (v20);
        v8 = *(_QWORD **)(a1 + 8);
      }
      v16 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>*,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>*,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>*>(a1 + 16, v18, v4, v8);
      goto LABEL_26;
    }
    if (v5 != v4)
    {
      do
      {
        v22 = (uint64_t)(v5 + 1);
        v23 = *v5;
        v5 += 5;
        v24 = v8 + 1;
        *v8 = v23;
        v8 += 5;
        std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::operator=(v24, v22);
      }
      while (v5 != v4);
      v17 = *(_QWORD **)(a1 + 8);
    }
    while (1)
    {
      if (v17 == v8)
      {
        *(_QWORD *)(a1 + 8) = v8;
        goto LABEL_38;
      }
      v25 = (_QWORD *)*(v17 - 1);
      if (v17 - 4 == v25)
      {
        v25 = v17 - 4;
        v26 = 4;
      }
      else
      {
        if (!v25)
          goto LABEL_35;
        v26 = 5;
      }
      (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_35:
      v17 -= 5;
    }
  }
  if (!v8)
    goto LABEL_13;
  v9 = *(_QWORD **)(a1 + 8);
  v10 = *(_QWORD **)a1;
  if (v9 == v8)
    goto LABEL_12;
  do
  {
    v11 = (_QWORD *)*(v9 - 1);
    if (v9 - 4 == v11)
    {
      v11 = v9 - 4;
      v12 = 4;
    }
    else
    {
      if (!v11)
        goto LABEL_10;
      v12 = 5;
    }
    (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_10:
    v9 -= 5;
  }
  while (v9 != v8);
  v10 = *(_QWORD **)a1;
LABEL_12:
  *(_QWORD *)(a1 + 8) = v8;
  operator delete(v10);
  v6 = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
LABEL_13:
  if (v7 > 0x666666666666666)
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  v13 = 0xCCCCCCCCCCCCCCCDLL * (v6 >> 3);
  v14 = 2 * v13;
  if (2 * v13 <= v7)
    v14 = v7;
  if (v13 >= 0x333333333333333)
    v15 = 0x666666666666666;
  else
    v15 = v14;
  std::vector<CA::StreamDescription>::__vallocate[abi:ne180100]((_QWORD *)a1, v15);
  v16 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>*,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>*,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>*>(a1 + 16, v5, v4, *(_QWORD **)(a1 + 8));
LABEL_26:
  *(_QWORD *)(a1 + 8) = v16;
LABEL_38:
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  return a1;
}

void sub_1B5CA9370(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>::__init_with_size[abi:ne180100]<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>*,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>*>(_QWORD *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<CA::StreamDescription>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>*,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>*,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>*>((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B5CA93E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>*,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>*,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>*>(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v4;
  _QWORD *v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = *v6;
      std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)(v4 + 1), (uint64_t)(v6 + 1));
      v6 += 5;
      v4 = v11 + 5;
      v11 += 5;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B5CA9494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Observer::Map<std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>,unsigned int,true,std::less<unsigned int>>::deregister_observer(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  void **v21;

  v19 = a1;
  v20 = 1;
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)a1);
  if (!*(_BYTE *)(a1 + 168))
    return std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v19);
  v4 = *(_QWORD *)(a1 + 176);
  v5 = *(_QWORD *)(a1 + 184);
  while (1)
  {
    if (v4 == v5)
      return std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v19);
    v6 = *(_QWORD **)(v4 + 16);
    if (AMCP::Utility::Sorted_Vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>,0ul>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>>::find(*(_QWORD **)(v4 + 8), v6, a2))
    {
      break;
    }
    v4 += 40;
  }
  v8 = v7;
  if (v7 + 5 != v6)
  {
    do
    {
      v9 = v8 + 5;
      std::__memberwise_forward_assign[abi:ne180100]<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>,unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>,0ul,1ul>(v8, v8 + 5);
      v10 = v8 + 10;
      v8 += 5;
    }
    while (v10 != v6);
    v6 = *(_QWORD **)(v4 + 16);
    v8 = v9;
  }
  while (v6 != v8)
  {
    v11 = (_QWORD *)*(v6 - 1);
    if (v6 - 4 == v11)
    {
      v11 = v6 - 4;
      v12 = 4;
    }
    else
    {
      if (!v11)
        goto LABEL_14;
      v12 = 5;
    }
    (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_14:
    v6 -= 5;
  }
  *(_QWORD *)(v4 + 16) = v8;
  if (*(_QWORD **)(v4 + 8) == v8)
  {
    v13 = v4 + 40;
    v14 = *(_QWORD *)(a1 + 184);
    if (v4 + 40 != v14)
    {
      do
      {
        v4 = v13;
        *(_DWORD *)(v13 - 40) = *(_DWORD *)v13;
        v15 = *(_OWORD *)(v13 - 32);
        *(_OWORD *)(v13 - 32) = *(_OWORD *)(v13 + 8);
        *(_OWORD *)(v13 + 8) = v15;
        v16 = *(_QWORD *)(v13 - 16);
        *(_QWORD *)(v4 - 16) = *(_QWORD *)(v4 + 24);
        *(_QWORD *)(v4 + 24) = v16;
        v13 = v4 + 40;
      }
      while (v4 + 40 != v14);
      v13 = *(_QWORD *)(a1 + 184);
    }
    if (v13 != v4)
    {
      do
      {
        v17 = v13 - 40;
        v21 = (void **)(v13 - 32);
        std::vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>::__destroy_vector::operator()[abi:ne180100](&v21);
        v13 = v17;
      }
      while (v17 != v4);
    }
    *(_QWORD *)(a1 + 184) = v4;
  }
  return std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v19);
}

uint64_t *AMCP::Utility::Sorted_Vector<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>,0ul>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *i;

  if (a1 != a2)
  {
    v5 = *a2;
    v4 = a2[1];
    v6 = 0x8E38E38E38E38E39 * ((v4 - *a2) >> 3);
    v7 = a1[2];
    v8 = (_QWORD *)*a1;
    if (0x8E38E38E38E38E39 * ((v7 - *a1) >> 3) < v6)
    {
      if (v8)
      {
        v9 = (_QWORD *)a1[1];
        v10 = (_QWORD *)*a1;
        if (v9 != v8)
        {
          do
          {
            v9 -= 9;
            std::__destroy_at[abi:ne180100]<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>,0>(v9);
          }
          while (v9 != v8);
          v10 = (_QWORD *)*a1;
        }
        a1[1] = (uint64_t)v8;
        operator delete(v10);
        v7 = 0;
        *a1 = 0;
        a1[1] = 0;
        a1[2] = 0;
      }
      if (v6 > 0x38E38E38E38E38ELL)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v11 = 0x8E38E38E38E38E39 * (v7 >> 3);
      v12 = 2 * v11;
      if (2 * v11 <= v6)
        v12 = v6;
      if (v11 >= 0x1C71C71C71C71C7)
        v13 = 0x38E38E38E38E38ELL;
      else
        v13 = v12;
      std::vector<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>::__vallocate[abi:ne180100](a1, v13);
      v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>,std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>*,std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>*,std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>*>(v5, v4, a1[1]);
      goto LABEL_17;
    }
    if (0x8E38E38E38E38E39 * ((a1[1] - (uint64_t)v8) >> 3) < v6)
    {
      v15 = (_QWORD *)(v5 + 8 * ((a1[1] - (uint64_t)v8) >> 3));
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>> *,std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>> *,std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>> *>((_QWORD *)*a2, v15, (_QWORD *)*a1);
      v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>,std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>*,std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>*,std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>*>((uint64_t)v15, v4, a1[1]);
LABEL_17:
      a1[1] = v14;
      goto LABEL_21;
    }
    v16 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>> *,std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>> *,std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>> *>((_QWORD *)*a2, (_QWORD *)a2[1], (_QWORD *)*a1);
    for (i = (_QWORD *)a1[1];
          i != v16;
          std::__destroy_at[abi:ne180100]<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>,0>(i))
    {
      i -= 9;
    }
    a1[1] = (uint64_t)v16;
  }
LABEL_21:
  *((_WORD *)a1 + 12) = *((_WORD *)a2 + 12);
  return a1;
}

void sub_1B5CA97F4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B5CA97FC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void **v5;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 40;
    v5 = (void **)(i - 32);
    std::vector<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *std::vector<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>::__init_with_size[abi:ne180100]<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>*,std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>,std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>*,std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>*,std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>*>(a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B5CA98C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x38E38E38E38E38FLL)
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[72 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>,std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>*,std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>*,std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    v6 = 0;
    do
    {
      *(_QWORD *)(a3 + v6) = *(_QWORD *)(a1 + v6);
      std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>::pair[abi:ne180100](a3 + v6 + 8, a1 + v6 + 8);
      v6 += 72;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

_QWORD *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>> *,std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>> *,std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>> *>(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v3;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  v3 = a3;
  if (a1 == a2)
    return a3;
  v5 = a1;
  v6 = a1;
  v7 = a3;
  do
  {
    v8 = *v6;
    v6 += 9;
    *v7 = v8;
    v7 += 9;
    std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>::operator=(v3 + 1, (uint64_t)(v5 + 1));
    std::function<void ()(AMCP::Graph_Description const&)>::operator=(v3 + 5, (uint64_t)(v5 + 5));
    v3 = v7;
    v5 = v6;
  }
  while (v6 != a2);
  return v7;
}

void AMCP::Core::Conductor::notify_control_value_observers(dispatch_object_t *this, unsigned int a2)
{
  std::__shared_mutex_base *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  NSObject *v10;
  _QWORD *v11;
  __int128 v12;
  uint64_t v13;
  unsigned int v14;
  __int128 v15;
  __int128 v16;
  void **v17;
  _QWORD v18[41];

  v18[40] = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_mutex_base *)(this + 304);
  AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v18, this[44]);
  *(_QWORD *)&v12 = v4;
  BYTE8(v12) = 1;
  std::__shared_mutex_base::lock_shared(v4);
  if (*((_BYTE *)this + 2600))
  {
    v15 = 0uLL;
    *(_QWORD *)&v16 = 0;
    if (AMCP::Utility::Sorted_Vector<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>,0ul>,std::less<unsigned int>,std::allocator<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>>>::find(this[326], this[327], a2))
    {
      AMCP::Utility::Sorted_Vector<std::tuple<unsigned long long,std::function<void ()>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned long long,std::function<void ()>>,0ul>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::function<void ()>>>>::insert_unique<std::__wrap_iter<std::tuple<unsigned long long,std::function<void ()>> const*>,std::__wrap_iter<std::tuple<unsigned long long,std::function<void ()>> const*>>(&v15, *(unint64_t **)(v5 + 8), *(unint64_t **)(v5 + 16));
    }
    v6 = *((_DWORD *)this + 660);
    if (v6 != a2
      && AMCP::Utility::Sorted_Vector<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>,0ul>,std::less<unsigned int>,std::allocator<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>>>::find(this[326], this[327], v6))
    {
      AMCP::Utility::Sorted_Vector<std::tuple<unsigned long long,std::function<void ()>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned long long,std::function<void ()>>,0ul>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::function<void ()>>>>::insert_unique<std::__wrap_iter<std::tuple<unsigned long long,std::function<void ()>> const*>,std::__wrap_iter<std::tuple<unsigned long long,std::function<void ()>> const*>>(&v15, *(unint64_t **)(v7 + 8), *(unint64_t **)(v7 + 16));
    }
  }
  else
  {
    v15 = 0u;
    v16 = 0u;
  }
  std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)&v12);
  v8 = v15;
  if ((_QWORD)v15 != *((_QWORD *)&v15 + 1))
  {
    v12 = v15;
    v15 = 0uLL;
    v9 = v16;
    v13 = v16;
    *(_QWORD *)&v16 = 0;
    v14 = a2;
    v10 = v18[0];
    v11 = (_QWORD *)operator new();
    *(_OWORD *)v11 = v8;
    v12 = 0uLL;
    v11[2] = v9;
    v13 = 0;
    *((_DWORD *)v11 + 8) = a2;
    v17 = 0;
    dispatch_async_f(v10, v11, (dispatch_function_t)applesauce::dispatch::v1::async<void AMCP::Observer::Map<std::function<void ()>,unsigned int,true,std::less<unsigned int>>::call_observers_async<unsigned int &>(AMCP::Utility::Dispatch_Queue const&,unsigned int const&,unsigned int &)::{lambda(void)#1}>(dispatch_queue_s *,void AMCP::Observer::Map<std::function<void ()>,unsigned int,true,std::less<unsigned int>>::call_observers_async<unsigned int &>(AMCP::Utility::Dispatch_Queue const&,unsigned int const&,unsigned int &)::{lambda(void)#1} &&)::{lambda(void *)#1}::__invoke);
    std::unique_ptr<void AMCP::Observer::Map<std::function<void ()>,unsigned int,true,std::less<unsigned int>>::call_observers_async<unsigned int &>(AMCP::Utility::Dispatch_Queue const&,unsigned int const&,unsigned int &)::{lambda(void)#1},std::default_delete<std::default_delete>>::reset[abi:ne180100](&v17);
    v17 = (void **)&v12;
    std::vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>::__destroy_vector::operator()[abi:ne180100](&v17);
  }
  *(_QWORD *)&v12 = &v15;
  std::vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v18);
}

void sub_1B5CA9BEC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void ***applesauce::dispatch::v1::async<void AMCP::Observer::Map<std::function<void ()(unsigned int)>,unsigned int,true,std::less<unsigned int>>::call_observers_async<unsigned int &>(AMCP::Utility::Dispatch_Queue const&,unsigned int const&,unsigned int &)::{lambda(void)#1}>(dispatch_queue_s *,void AMCP::Observer::Map<std::function<void ()(unsigned int)>,unsigned int,true,std::less<unsigned int>>::call_observers_async<unsigned int &>(AMCP::Utility::Dispatch_Queue const&,unsigned int const&,unsigned int &)::{lambda(void)#1} &&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  void **v6;
  int v7;

  v6 = (void **)a1;
  v1 = *(_QWORD **)a1;
  v2 = *(_QWORD **)(a1 + 8);
  if (*(_QWORD **)a1 != v2)
  {
    do
    {
      v7 = *(_DWORD *)(a1 + 32);
      v4 = v1[4];
      if (!v4)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v4 + 48))(v4, &v7);
      v1 += 5;
    }
    while (v1 != v2);
  }
  return std::unique_ptr<void AMCP::Observer::Map<std::function<void ()>,unsigned int,true,std::less<unsigned int>>::call_observers_async<unsigned int &>(AMCP::Utility::Dispatch_Queue const&,unsigned int const&,unsigned int &)::{lambda(void)#1},std::default_delete<std::default_delete>>::reset[abi:ne180100](&v6);
}

void sub_1B5CA9C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::unique_ptr<void AMCP::Observer::Map<std::function<void ()>,unsigned int,true,std::less<unsigned int>>::call_observers_async<unsigned int &>(AMCP::Utility::Dispatch_Queue const&,unsigned int const&,unsigned int &)::{lambda(void)#1},std::default_delete<std::default_delete>>::reset[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void ***std::unique_ptr<void AMCP::Observer::Map<std::function<void ()(unsigned int)>,unsigned int,true,std::less<unsigned int>>::call_observers_async<unsigned int &>(AMCP::Utility::Dispatch_Queue const&,unsigned int const&,unsigned int &)::{lambda(void)#1},std::default_delete<std::default_delete>>::reset[abi:ne180100](void ***result)
{
  void **v1;
  void **v2;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    v2 = v1;
    std::vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>::__destroy_vector::operator()[abi:ne180100](&v2);
    JUMPOUT(0x1B5E50688);
  }
  return result;
}

_QWORD *AMCP::Utility::Sorted_Vector<std::tuple<unsigned long long,std::function<void ()(unsigned int)>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned long long,std::function<void ()(unsigned int)>>,0ul>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int)>>>>::insert_unique<std::__wrap_iter<std::tuple<unsigned long long,std::function<void ()(unsigned int)>> const*>,std::__wrap_iter<std::tuple<unsigned long long,std::function<void ()(unsigned int)>> const*>>(_QWORD *result, unint64_t *a2, unint64_t *a3)
{
  unint64_t *v4;
  _QWORD **v5;
  unint64_t v6;
  unint64_t *v7;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (_QWORD **)result;
    do
    {
      v6 = *v4;
      if (AMCP::Utility::Sorted_Vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>,0ul>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>>::find(*v5, v5[1], *v4))
      {
        *v7 = v6;
        result = std::function<void ()>::operator=(v7 + 1, (uint64_t)(v4 + 1));
      }
      else
      {
        result = std::vector<std::tuple<unsigned long long,std::function<void ()>>>::insert(v5, v7, v4);
      }
      v4 += 5;
    }
    while (v4 != a3);
  }
  return result;
}

_QWORD *std::vector<std::tuple<unsigned long long,std::function<void ()(unsigned int)>>>::insert(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v3;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int64x2_t v40;
  char *v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  char *v52;
  char *v53;
  char *v55;
  __int128 v56;
  char *v57;
  _QWORD *v58;
  _QWORD *v59;
  int64x2_t v60;
  char *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;

  v3 = a3;
  v5 = (_QWORD *)*a1;
  v6 = a1[1];
  v7 = (uint64_t)a2 - *a1;
  v8 = v7 / 40;
  v9 = (_QWORD *)(*a1 + 40 * (v7 / 40));
  v11 = a1 + 2;
  v10 = a1[2];
  if (v6 >= v10)
  {
    v19 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6 - (_QWORD)v5) >> 3) + 1;
    if (v19 > 0x666666666666666)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v21 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v10 - (_QWORD)v5) >> 3);
    if (2 * v21 > v19)
      v19 = 2 * v21;
    if (v21 >= 0x333333333333333)
      v22 = 0x666666666666666;
    else
      v22 = v19;
    v58 = v11;
    if (v22)
    {
      v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v22);
    }
    else
    {
      v24 = 0;
      v23 = 0;
    }
    v25 = &v24[40 * v8];
    v55 = v24;
    *(_QWORD *)&v56 = v25;
    *((_QWORD *)&v56 + 1) = v25;
    v57 = &v24[40 * v23];
    if (v8 == v23)
    {
      if (v7 < 1)
      {
        if (v5 == a2)
          v29 = 1;
        else
          v29 = 2 * v8;
        v62 = v11;
        v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v29);
        v31 = v30;
        v32 = &v30[40 * (v29 >> 2)];
        v34 = &v30[40 * v33];
        if (*((_QWORD *)&v56 + 1) == (_QWORD)v56)
        {
          v40 = vdupq_n_s64(v56);
          v36 = &v30[40 * (v29 >> 2)];
        }
        else
        {
          v35 = (*((_QWORD *)&v56 + 1) - (_QWORD)v56) / 40;
          v36 = &v32[40 * v35];
          v37 = 40 * v35;
          v38 = (uint64_t)&v30[40 * (v29 >> 2) + 8];
          v39 = v56 + 8;
          do
          {
            *(_QWORD *)(v38 - 8) = *(_QWORD *)(v39 - 8);
            v38 = std::__function::__value_func<void ()>::__value_func[abi:ne180100](v38, v39) + 40;
            v39 += 40;
            v37 -= 40;
          }
          while (v37);
          v40 = (int64x2_t)v56;
        }
        v41 = v57;
        v59 = v55;
        v55 = v31;
        *(_QWORD *)&v56 = v32;
        v60 = v40;
        *((_QWORD *)&v56 + 1) = v36;
        v57 = v34;
        v61 = v41;
        std::__split_buffer<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>::~__split_buffer((uint64_t)&v59);
        v25 = v36;
      }
      else
      {
        v26 = v8 + 2;
        if (v8 >= -1)
          v26 = v8 + 1;
        v25 -= 40 * (v26 >> 1);
        *(_QWORD *)&v56 = v25;
        *((_QWORD *)&v56 + 1) = v25;
      }
    }
    *(_QWORD *)v25 = *v3;
    std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)(v25 + 8), (uint64_t)(v3 + 1));
    v42 = v56;
    v43 = (_QWORD *)(*((_QWORD *)&v56 + 1) + 40);
    *((_QWORD *)&v56 + 1) += 40;
    v44 = (_QWORD *)*a1;
    v45 = v56;
    if (v9 != (_QWORD *)*a1)
    {
      v46 = v9;
      do
      {
        v47 = *(v46 - 5);
        v46 -= 5;
        *(_QWORD *)(v45 - 40) = v47;
        v45 -= 40;
        std::__function::__value_func<void ()>::__value_func[abi:ne180100](v45 + 8, (uint64_t)(v46 + 1));
      }
      while (v46 != v44);
      v43 = (_QWORD *)*((_QWORD *)&v56 + 1);
    }
    *(_QWORD *)&v56 = v45;
    v48 = (_QWORD *)a1[1];
    v63 = v43;
    v64 = v43;
    v59 = v11;
    v60.i64[0] = (uint64_t)&v63;
    v60.i64[1] = (uint64_t)&v64;
    LOBYTE(v61) = 0;
    while (v9 != v48)
    {
      v49 = (uint64_t)(v9 + 1);
      v50 = *v9;
      v9 += 5;
      *v43 = v50;
      std::__function::__value_func<void ()>::__value_func[abi:ne180100]((uint64_t)(v43 + 1), v49);
      v43 = v64 + 5;
      v64 += 5;
    }
    LOBYTE(v61) = 1;
    std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&v59);
    v51 = *(_OWORD *)a1;
    v52 = v57;
    *a1 = v56;
    a1[1] = v43;
    v56 = v51;
    v53 = (char *)a1[2];
    a1[2] = v52;
    v57 = v53;
    v55 = (char *)v51;
    std::__split_buffer<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>::~__split_buffer((uint64_t)&v55);
    return (_QWORD *)v42;
  }
  else if (v9 == (_QWORD *)v6)
  {
    *v9 = *a3;
    std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)(v9 + 1), (uint64_t)(a3 + 1));
    a1[1] = v9 + 5;
  }
  else
  {
    v12 = v9 + 5;
    v13 = (_QWORD *)(v6 - 40);
    if (v6 < 0x28)
    {
      v15 = (_QWORD *)a1[1];
    }
    else
    {
      v14 = (uint64_t *)(v6 - 40);
      v15 = (_QWORD *)a1[1];
      do
      {
        v16 = (uint64_t)(v14 + 1);
        v17 = *v14;
        v14 += 5;
        v18 = (uint64_t)(v15 + 1);
        *v15 = v17;
        v15 += 5;
        std::__function::__value_func<void ()>::__value_func[abi:ne180100](v18, v16);
      }
      while ((unint64_t)v14 < v6);
    }
    a1[1] = v15;
    if ((_QWORD *)v6 != v12)
    {
      v27 = 8 * ((uint64_t)(v6 - (_QWORD)v12) >> 3);
      v28 = (uint64_t)&v5[5 * v8 - 5];
      do
      {
        std::__memberwise_forward_assign[abi:ne180100]<std::tuple<unsigned long long,std::function<void ()>>,std::tuple<unsigned long long,std::function<void ()>>,unsigned long long,std::function<void ()>,0ul,1ul>(v13, (_QWORD *)(v28 + v27));
        v13 -= 5;
        v27 -= 40;
      }
      while (v27);
    }
    if (v9 <= v3)
      v3 += 5 * (a1[1] > (unint64_t)v3);
    *v9 = *v3;
    std::function<void ()>::operator=(v9 + 1, (uint64_t)(v3 + 1));
  }
  return v9;
}

void sub_1B5CAA120(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

_QWORD *std::__memberwise_forward_assign[abi:ne180100]<std::tuple<unsigned long long,std::function<void ()(unsigned int)>>,std::tuple<unsigned long long,std::function<void ()(unsigned int)>>,unsigned long long,std::function<void ()(unsigned int)>,0ul,1ul>(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *result;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  v3 = a2 + 1;
  *a1 = *a2;
  v4 = a1 + 1;
  v6 = a1 + 4;
  result = (_QWORD *)a1[4];
  *v6 = 0;
  if (result == v4)
  {
    v7 = 4;
    result = v4;
  }
  else
  {
    if (!result)
      goto LABEL_6;
    v7 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
LABEL_6:
  v10 = (_QWORD *)a2[4];
  v9 = a2 + 4;
  v8 = v10;
  if (!v10)
  {
    v9 = v6;
    goto LABEL_10;
  }
  if (v8 != v3)
  {
    *v6 = v8;
LABEL_10:
    *v9 = 0;
    return result;
  }
  *v6 = v4;
  return (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)*v9 + 24))(*v9, v4);
}

unint64_t AMCP::Observer::Map<std::function<void ()(unsigned int)>,unsigned int,true,std::less<unsigned int>>::register_observer(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  unsigned int v17;
  unint64_t v18;
  _DWORD *v19;
  BOOL v20;
  unsigned int *v21;
  unint64_t v22;
  __int128 *v23;
  _QWORD *v24;
  unint64_t v25;
  _DWORD *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  unsigned int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  int64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v71;
  _QWORD *v72;
  unsigned int v73[2];
  __int128 v74;
  _QWORD *v75;
  __int16 v76;
  uint64_t v77;
  char v78;
  _QWORD *v79;
  _QWORD *v80;
  __int128 v81;
  __int128 v82;
  _QWORD *v83;
  unint64_t v84;
  _QWORD v85[4];
  __int128 v86;
  __int128 v87;
  _QWORD *v88;
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  v77 = a1;
  v78 = 1;
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)a1);
  if (!*(_BYTE *)(a1 + 168))
  {
    v6 = 0;
    goto LABEL_61;
  }
  do
    v6 = __ldaxr(&AMCP::Observer::Implementation::get_next_token(void)::s_next_token);
  while (__stlxr(v6 + 1, &AMCP::Observer::Implementation::get_next_token(void)::s_next_token));
  if (AMCP::Utility::Sorted_Vector<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>,0ul>,std::less<unsigned int>,std::allocator<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>>>::find(*(_DWORD **)(a1 + 176), *(_DWORD **)(a1 + 184), *a2))
  {
    v8 = v7;
    *(_QWORD *)&v86 = v6;
    v9 = (_QWORD *)&v86 + 1;
    std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)&v86 + 8, a3);
    v10 = *(_QWORD **)(v8 + 8);
    v11 = *(_QWORD **)(v8 + 16);
    v12 = (_QWORD *)(v8 + 8);
    if (AMCP::Utility::Sorted_Vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>,0ul>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>>::find(v10, v11, v6))
    {
      *v13 = v6;
      std::function<void ()>::operator=(v13 + 1, (uint64_t)&v86 + 8);
    }
    else
    {
      std::vector<std::tuple<unsigned long long,std::function<void ()>>>::insert(v12, v13, &v86);
    }
    v24 = v88;
    goto LABEL_56;
  }
  v84 = v6;
  v9 = v85;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v85, a3);
  v71 = 0uLL;
  v72 = 0;
  *(_QWORD *)&v81 = &v71;
  BYTE8(v81) = 0;
  v14 = operator new(0x28uLL);
  *(_QWORD *)&v71 = v14;
  *((_QWORD *)&v71 + 1) = v14;
  v72 = v14 + 5;
  v79 = v14;
  v80 = v14;
  *(_QWORD *)&v86 = &v72;
  *((_QWORD *)&v86 + 1) = &v79;
  *(_QWORD *)&v87 = &v80;
  BYTE8(v87) = 0;
  *v14 = v84;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)(v14 + 1), (uint64_t)v85);
  v80 += 5;
  v15 = v80;
  BYTE8(v87) = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&v86);
  v16 = v72;
  *((_QWORD *)&v71 + 1) = v15;
  v72 = 0;
  v73[0] = *a2;
  v17 = v73[0];
  v74 = v71;
  v71 = 0uLL;
  v75 = v16;
  v19 = *(_DWORD **)(a1 + 176);
  v18 = *(_QWORD *)(a1 + 184);
  v20 = AMCP::Utility::Sorted_Vector<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>,0ul>,std::less<unsigned int>,std::allocator<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>>>::find(v19, (_DWORD *)v18, v73[0]);
  v22 = (unint64_t)v21;
  if (v20)
  {
    *v21 = v17;
    v23 = &v74;
  }
  else
  {
    v25 = *(_QWORD *)(a1 + 192);
    if (v18 >= v25)
    {
      v31 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - (_QWORD)v19) >> 3) + 1;
      if (v31 > 0x666666666666666)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v32 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v25 - (_QWORD)v19) >> 3);
      if (2 * v32 > v31)
        v31 = 2 * v32;
      if (v32 >= 0x333333333333333)
        v33 = 0x666666666666666;
      else
        v33 = v31;
      v83 = (_QWORD *)(a1 + 192);
      if (v33)
        v33 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v33);
      else
        v34 = 0;
      v44 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v22 - (_QWORD)v19) >> 3);
      v45 = v33 + 8 * ((uint64_t)(v22 - (_QWORD)v19) >> 3);
      *(_QWORD *)&v81 = v33;
      *((_QWORD *)&v81 + 1) = v45;
      *(_QWORD *)&v82 = v45;
      *((_QWORD *)&v82 + 1) = v33 + 40 * v34;
      if (v44 == v34)
      {
        if ((uint64_t)(v22 - (_QWORD)v19) < 1)
        {
          if ((_DWORD *)v22 == v19)
            v47 = 1;
          else
            v47 = 0x999999999999999ALL * ((uint64_t)(v22 - (_QWORD)v19) >> 3);
          v88 = v83;
          v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v47);
          v49 = &v48[40 * (v47 >> 2)];
          *(_QWORD *)&v86 = v48;
          *((_QWORD *)&v86 + 1) = v49;
          *((_QWORD *)&v87 + 1) = &v48[40 * v50];
          v51 = *((_QWORD *)&v81 + 1);
          if ((_QWORD)v82 != *((_QWORD *)&v81 + 1))
          {
            v52 = &v49[v82 - *((_QWORD *)&v81 + 1)];
            do
            {
              *(_DWORD *)v49 = *(_DWORD *)v51;
              *((_QWORD *)v49 + 2) = 0;
              *((_QWORD *)v49 + 3) = 0;
              *((_QWORD *)v49 + 1) = 0;
              *((_QWORD *)v49 + 1) = *(_QWORD *)(v51 + 8);
              *(_QWORD *)(v51 + 8) = 0;
              v53 = *((_QWORD *)v49 + 2);
              *((_QWORD *)v49 + 2) = *(_QWORD *)(v51 + 16);
              *(_QWORD *)(v51 + 16) = v53;
              v54 = *((_QWORD *)v49 + 3);
              *((_QWORD *)v49 + 3) = *(_QWORD *)(v51 + 24);
              *(_QWORD *)(v51 + 24) = v54;
              v49 += 40;
              v51 += 40;
            }
            while (v49 != v52);
            v49 = v52;
          }
          *(_QWORD *)&v87 = v49;
          v55 = v81;
          v56 = v82;
          v81 = v86;
          v82 = v87;
          v86 = v55;
          v87 = v56;
          std::__split_buffer<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>>>>>::~__split_buffer((uint64_t)&v86);
          v45 = v82;
        }
        else
        {
          if (v44 >= -1)
            v46 = v44 + 1;
          else
            v46 = v44 + 2;
          v45 -= 40 * (v46 >> 1);
          *((_QWORD *)&v81 + 1) = v45;
          *(_QWORD *)&v82 = v45;
        }
      }
      *(_DWORD *)v45 = v73[0];
      *(_QWORD *)(v45 + 16) = 0;
      *(_QWORD *)(v45 + 24) = 0;
      *(_QWORD *)(v45 + 8) = 0;
      std::vector<std::tuple<unsigned long long,std::function<void ()>>>::__init_with_size[abi:ne180100]<std::tuple<unsigned long long,std::function<void ()>>*,std::tuple<unsigned long long,std::function<void ()>>*>((_QWORD *)(v45 + 8), (_QWORD *)v74, *((_QWORD **)&v74 + 1), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&v74 + 1) - v74) >> 3));
      *(_WORD *)(v45 + 32) = v76;
      v57 = (_QWORD *)*((_QWORD *)&v81 + 1);
      v58 = v82 + 40;
      *(_QWORD *)&v82 = v82 + 40;
      v59 = *(_QWORD **)(a1 + 176);
      if ((_QWORD *)v22 != v59)
      {
        v60 = (_QWORD *)v22;
        do
        {
          v61 = *((_DWORD *)v60 - 10);
          v60 -= 5;
          *((_DWORD *)v57 - 10) = v61;
          v57 -= 5;
          v57[2] = 0;
          v57[3] = 0;
          v57[1] = 0;
          v57[1] = v60[1];
          v60[1] = 0;
          v62 = v57[2];
          v57[2] = v60[2];
          v60[2] = v62;
          v63 = v57[3];
          v57[3] = v60[3];
          v60[3] = v63;
        }
        while (v60 != v59);
        v58 = v82;
      }
      *((_QWORD *)&v81 + 1) = v57;
      v64 = *(_QWORD *)(a1 + 184);
      if (v22 != v64)
      {
        do
        {
          *(_DWORD *)v58 = *(_DWORD *)v22;
          *(_QWORD *)(v58 + 16) = 0;
          *(_QWORD *)(v58 + 24) = 0;
          *(_QWORD *)(v58 + 8) = 0;
          *(_QWORD *)(v58 + 8) = *(_QWORD *)(v22 + 8);
          *(_QWORD *)(v22 + 8) = 0;
          v65 = *(_QWORD *)(v58 + 16);
          *(_QWORD *)(v58 + 16) = *(_QWORD *)(v22 + 16);
          *(_QWORD *)(v22 + 16) = v65;
          v66 = *(_QWORD *)(v58 + 24);
          *(_QWORD *)(v58 + 24) = *(_QWORD *)(v22 + 24);
          *(_QWORD *)(v22 + 24) = v66;
          v58 += 40;
          v22 += 40;
        }
        while (v22 != v64);
        v57 = (_QWORD *)*((_QWORD *)&v81 + 1);
        v22 = *(_QWORD *)(a1 + 184);
      }
      v67 = *(_QWORD *)(a1 + 176);
      *(_QWORD *)(a1 + 176) = v57;
      *(_QWORD *)(a1 + 184) = v58;
      v68 = *(_QWORD *)(a1 + 192);
      *(_QWORD *)(a1 + 192) = *((_QWORD *)&v82 + 1);
      *(_QWORD *)&v82 = v22;
      *((_QWORD *)&v82 + 1) = v68;
      *(_QWORD *)&v81 = v67;
      *((_QWORD *)&v81 + 1) = v67;
      std::__split_buffer<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>>>>>::~__split_buffer((uint64_t)&v81);
      goto LABEL_55;
    }
    if (v21 == (unsigned int *)v18)
    {
      *(_DWORD *)v18 = v17;
      *(_QWORD *)(v18 + 16) = 0;
      *(_QWORD *)(v18 + 24) = 0;
      *(_QWORD *)(v18 + 8) = 0;
      std::vector<std::tuple<unsigned long long,std::function<void ()>>>::__init_with_size[abi:ne180100]<std::tuple<unsigned long long,std::function<void ()>>*,std::tuple<unsigned long long,std::function<void ()>>*>((_QWORD *)(v18 + 8), (_QWORD *)v74, *((_QWORD **)&v74 + 1), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&v74 + 1) - v74) >> 3));
      *(_WORD *)(v18 + 32) = v76;
      *(_QWORD *)(a1 + 184) = v18 + 40;
      goto LABEL_55;
    }
    v26 = v21 + 10;
    v27 = v18 - 40;
    v28 = v18;
    while (v27 < v18)
    {
      *(_DWORD *)v28 = *(_DWORD *)v27;
      *(_QWORD *)(v28 + 16) = 0;
      *(_QWORD *)(v28 + 24) = 0;
      *(_QWORD *)(v28 + 8) = 0;
      *(_QWORD *)(v28 + 8) = *(_QWORD *)(v27 + 8);
      *(_QWORD *)(v27 + 8) = 0;
      v29 = *(_QWORD *)(v28 + 16);
      *(_QWORD *)(v28 + 16) = *(_QWORD *)(v27 + 16);
      *(_QWORD *)(v27 + 16) = v29;
      v30 = *(_QWORD *)(v28 + 24);
      *(_QWORD *)(v28 + 24) = *(_QWORD *)(v27 + 24);
      *(_QWORD *)(v27 + 24) = v30;
      v28 += 40;
      v27 += 40;
    }
    *(_QWORD *)(a1 + 184) = v28;
    if ((_DWORD *)v18 != v26)
    {
      v35 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - (_QWORD)v26) >> 3);
      v36 = (_QWORD *)(v18 - 16);
      v37 = 10 * v35;
      do
      {
        v38 = &v21[v37];
        *((_DWORD *)v36 - 6) = v21[v37 - 10];
        v39 = *(v36 - 2);
        *(v36 - 2) = *(_QWORD *)&v21[v37 - 8];
        *((_QWORD *)v38 - 4) = v39;
        v40 = *(v36 - 1);
        *(v36 - 1) = *(_QWORD *)&v21[v37 - 6];
        *((_QWORD *)v38 - 3) = v40;
        v41 = *v36;
        *v36 = *(_QWORD *)&v21[v37 - 4];
        v36 -= 5;
        *((_QWORD *)v38 - 2) = v41;
        v37 -= 10;
      }
      while (v37 * 4);
    }
    v42 = v73;
    if (v22 <= (unint64_t)v73)
      v42 = &v73[10 * (*(_QWORD *)(a1 + 184) > (unint64_t)v73)];
    v43 = *v42;
    v23 = (__int128 *)(v42 + 2);
    *(_DWORD *)v22 = v43;
  }
  AMCP::Utility::Sorted_Vector<std::tuple<unsigned long long,std::function<void ()>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned long long,std::function<void ()>>,0ul>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::function<void ()>>>>::operator=(v22 + 8, (uint64_t)v23);
LABEL_55:
  *(_QWORD *)&v86 = &v74;
  std::vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v86);
  *(_QWORD *)&v86 = &v71;
  std::vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v86);
  v24 = (_QWORD *)v85[3];
LABEL_56:
  if (v24 == v9)
  {
    v69 = 4;
    goto LABEL_60;
  }
  if (v24)
  {
    v69 = 5;
    v9 = v24;
LABEL_60:
    (*(void (**)(_QWORD *))(*v9 + 8 * v69))(v9);
  }
LABEL_61:
  std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v77);
  return v6;
}

void sub_1B5CAA838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,_QWORD *a32)
{
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;

  *(_QWORD *)(v33 + 184) = v34;
  std::vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>::__destroy_vector::operator()[abi:ne180100](&a22);
  a22 = (void **)&a9;
  std::vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>::__destroy_vector::operator()[abi:ne180100](&a22);
  if (a32 == v32)
  {
    v36 = 4;
  }
  else
  {
    if (!a32)
      goto LABEL_6;
    v36 = 5;
    v32 = a32;
  }
  (*(void (**)(_QWORD *))(*v32 + 8 * v36))(v32);
LABEL_6:
  std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Utility::Sorted_Vector<std::tuple<unsigned long long,std::function<void ()(unsigned int)>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned long long,std::function<void ()(unsigned int)>>,0ul>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int)>>>>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;

  if (a1 == a2)
    goto LABEL_38;
  v5 = *(uint64_t **)a2;
  v4 = *(uint64_t **)(a2 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v4 - *(_QWORD *)a2) >> 3);
  v8 = *(_QWORD **)a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - *(_QWORD *)a1) >> 3) >= v7)
  {
    v17 = *(_QWORD **)(a1 + 8);
    if (0xCCCCCCCCCCCCCCCDLL * (v17 - v8) < v7)
    {
      v18 = &v5[v17 - v8];
      if (v17 != v8)
      {
        v19 = v8 + 1;
        v20 = 8 * (v17 - v8);
        v21 = (uint64_t)(v5 + 1);
        do
        {
          *(v19 - 1) = *(_QWORD *)(v21 - 8);
          v19 = std::function<void ()>::operator=(v19, v21) + 5;
          v21 += 40;
          v20 -= 40;
        }
        while (v20);
        v8 = *(_QWORD **)(a1 + 8);
      }
      v16 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::tuple<unsigned long long,std::function<void ()>>>,std::tuple<unsigned long long,std::function<void ()>>*,std::tuple<unsigned long long,std::function<void ()>>*,std::tuple<unsigned long long,std::function<void ()>>*>(a1 + 16, v18, v4, v8);
      goto LABEL_26;
    }
    if (v5 != v4)
    {
      do
      {
        v22 = (uint64_t)(v5 + 1);
        v23 = *v5;
        v5 += 5;
        v24 = v8 + 1;
        *v8 = v23;
        v8 += 5;
        std::function<void ()>::operator=(v24, v22);
      }
      while (v5 != v4);
      v17 = *(_QWORD **)(a1 + 8);
    }
    while (1)
    {
      if (v17 == v8)
      {
        *(_QWORD *)(a1 + 8) = v8;
        goto LABEL_38;
      }
      v25 = (_QWORD *)*(v17 - 1);
      if (v17 - 4 == v25)
      {
        v25 = v17 - 4;
        v26 = 4;
      }
      else
      {
        if (!v25)
          goto LABEL_35;
        v26 = 5;
      }
      (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_35:
      v17 -= 5;
    }
  }
  if (!v8)
    goto LABEL_13;
  v9 = *(_QWORD **)(a1 + 8);
  v10 = *(_QWORD **)a1;
  if (v9 == v8)
    goto LABEL_12;
  do
  {
    v11 = (_QWORD *)*(v9 - 1);
    if (v9 - 4 == v11)
    {
      v11 = v9 - 4;
      v12 = 4;
    }
    else
    {
      if (!v11)
        goto LABEL_10;
      v12 = 5;
    }
    (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_10:
    v9 -= 5;
  }
  while (v9 != v8);
  v10 = *(_QWORD **)a1;
LABEL_12:
  *(_QWORD *)(a1 + 8) = v8;
  operator delete(v10);
  v6 = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
LABEL_13:
  if (v7 > 0x666666666666666)
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  v13 = 0xCCCCCCCCCCCCCCCDLL * (v6 >> 3);
  v14 = 2 * v13;
  if (2 * v13 <= v7)
    v14 = v7;
  if (v13 >= 0x333333333333333)
    v15 = 0x666666666666666;
  else
    v15 = v14;
  std::vector<CA::StreamDescription>::__vallocate[abi:ne180100]((_QWORD *)a1, v15);
  v16 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::tuple<unsigned long long,std::function<void ()>>>,std::tuple<unsigned long long,std::function<void ()>>*,std::tuple<unsigned long long,std::function<void ()>>*,std::tuple<unsigned long long,std::function<void ()>>*>(a1 + 16, v5, v4, *(_QWORD **)(a1 + 8));
LABEL_26:
  *(_QWORD *)(a1 + 8) = v16;
LABEL_38:
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  return a1;
}

void sub_1B5CAAB20(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::tuple<unsigned long long,std::function<void ()(unsigned int)>>>::__init_with_size[abi:ne180100]<std::tuple<unsigned long long,std::function<void ()(unsigned int)>>*,std::tuple<unsigned long long,std::function<void ()(unsigned int)>>*>(_QWORD *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<CA::StreamDescription>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::tuple<unsigned long long,std::function<void ()>>>,std::tuple<unsigned long long,std::function<void ()>>*,std::tuple<unsigned long long,std::function<void ()>>*,std::tuple<unsigned long long,std::function<void ()>>*>((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B5CAAB90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int)>>>,std::tuple<unsigned long long,std::function<void ()(unsigned int)>>*,std::tuple<unsigned long long,std::function<void ()(unsigned int)>>*,std::tuple<unsigned long long,std::function<void ()(unsigned int)>>*>(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v4;
  _QWORD *v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = *v6;
      std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)(v4 + 1), (uint64_t)(v6 + 1));
      v6 += 5;
      v4 = v11 + 5;
      v11 += 5;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B5CAAC44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Core::Conductor::destroy_control_value_observer(AMCP::Core::Conductor *this, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  char *v19;
  char v20;
  void **v21;

  v19 = (char *)this + 2432;
  v20 = 1;
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)((char *)this + 2432));
  if (!*((_BYTE *)this + 2600))
    return std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v19);
  v4 = *((_QWORD *)this + 326);
  v5 = *((_QWORD *)this + 327);
  while (1)
  {
    if (v4 == v5)
      return std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v19);
    v6 = *(_QWORD **)(v4 + 16);
    if (AMCP::Utility::Sorted_Vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>,0ul>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>>::find(*(_QWORD **)(v4 + 8), v6, a2))
    {
      break;
    }
    v4 += 40;
  }
  v8 = v7;
  if (v7 + 5 != v6)
  {
    do
    {
      v9 = v8 + 5;
      std::__memberwise_forward_assign[abi:ne180100]<std::tuple<unsigned long long,std::function<void ()>>,std::tuple<unsigned long long,std::function<void ()>>,unsigned long long,std::function<void ()>,0ul,1ul>(v8, v8 + 5);
      v10 = v8 + 10;
      v8 += 5;
    }
    while (v10 != v6);
    v6 = *(_QWORD **)(v4 + 16);
    v8 = v9;
  }
  while (v6 != v8)
  {
    v11 = (_QWORD *)*(v6 - 1);
    if (v6 - 4 == v11)
    {
      v11 = v6 - 4;
      v12 = 4;
    }
    else
    {
      if (!v11)
        goto LABEL_14;
      v12 = 5;
    }
    (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_14:
    v6 -= 5;
  }
  *(_QWORD *)(v4 + 16) = v8;
  if (*(_QWORD **)(v4 + 8) == v8)
  {
    v13 = v4 + 40;
    v14 = *((_QWORD *)this + 327);
    if (v4 + 40 != v14)
    {
      do
      {
        v4 = v13;
        *(_DWORD *)(v13 - 40) = *(_DWORD *)v13;
        v15 = *(_OWORD *)(v13 - 32);
        *(_OWORD *)(v13 - 32) = *(_OWORD *)(v13 + 8);
        *(_OWORD *)(v13 + 8) = v15;
        v16 = *(_QWORD *)(v13 - 16);
        *(_QWORD *)(v4 - 16) = *(_QWORD *)(v4 + 24);
        *(_QWORD *)(v4 + 24) = v16;
        v13 = v4 + 40;
      }
      while (v4 + 40 != v14);
      v13 = *((_QWORD *)this + 327);
    }
    if (v13 != v4)
    {
      do
      {
        v17 = v13 - 40;
        v21 = (void **)(v13 - 32);
        std::vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>::__destroy_vector::operator()[abi:ne180100](&v21);
        v13 = v17;
      }
      while (v17 != v4);
    }
    *((_QWORD *)this + 327) = v4;
  }
  return std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v19);
}

uint64_t CACFDictionary::GetBool(uint64_t this, const __CFString *a2, BOOL *a3)
{
  const __CFBoolean *v4;
  CFTypeID v5;
  BOOL v6;
  CFTypeID v7;
  BOOL v8;
  int valuePtr;

  if (this)
  {
    this = (uint64_t)CFDictionaryGetValue((CFDictionaryRef)this, a2);
    if (this)
    {
      v4 = (const __CFBoolean *)this;
      v5 = CFGetTypeID((CFTypeRef)this);
      if (v5 == CFBooleanGetTypeID())
      {
        this = CFBooleanGetValue(v4);
        v6 = (_DWORD)this == 0;
      }
      else
      {
        v7 = CFGetTypeID(v4);
        this = CFNumberGetTypeID();
        if (v7 != this)
          return this;
        valuePtr = 0;
        this = CFNumberGetValue(v4, kCFNumberSInt32Type, &valuePtr);
        v6 = valuePtr == 0;
      }
      v8 = !v6;
      *a3 = v8;
    }
  }
  return this;
}

const __CFDictionary *CACFDictionary::GetSInt32(const __CFDictionary *this, const __CFString *a2, int *a3)
{
  const __CFNumber *v4;
  CFTypeID v5;

  if (this)
  {
    this = (const __CFDictionary *)CFDictionaryGetValue(this, a2);
    if (this)
    {
      v4 = this;
      v5 = CFGetTypeID(this);
      this = (const __CFDictionary *)CFNumberGetTypeID();
      if ((const __CFDictionary *)v5 == this)
        return (const __CFDictionary *)CFNumberGetValue(v4, kCFNumberSInt32Type, a3);
    }
  }
  return this;
}

uint64_t CACFDictionary::GetUInt32(uint64_t this, const __CFString *a2, unsigned int *a3)
{
  const __CFNumber *v4;
  CFTypeID v5;

  if (this)
  {
    this = (uint64_t)CFDictionaryGetValue((CFDictionaryRef)this, a2);
    if (this)
    {
      v4 = (const __CFNumber *)this;
      v5 = CFGetTypeID((CFTypeRef)this);
      if (v5 == CFNumberGetTypeID())
      {
        CFNumberGetValue(v4, kCFNumberSInt32Type, a3);
        return 1;
      }
      else
      {
        return 0;
      }
    }
  }
  return this;
}

uint64_t CACFDictionary::GetUInt64(uint64_t this, const __CFString *a2, unint64_t *a3)
{
  const __CFNumber *v4;
  CFTypeID v5;

  if (this)
  {
    this = (uint64_t)CFDictionaryGetValue((CFDictionaryRef)this, a2);
    if (this)
    {
      v4 = (const __CFNumber *)this;
      v5 = CFGetTypeID((CFTypeRef)this);
      if (v5 == CFNumberGetTypeID())
      {
        CFNumberGetValue(v4, kCFNumberSInt64Type, a3);
        return 1;
      }
      else
      {
        return 0;
      }
    }
  }
  return this;
}

double CACFDictionary::GetFixed64(CACFDictionary *this, const __CFString *a2, double *a3)
{
  const __CFNumber *Value;
  double result;
  const __CFNumber *v6;
  CFTypeID v7;
  uint64_t valuePtr;

  if (this)
  {
    Value = (const __CFNumber *)CFDictionaryGetValue(this, a2);
    if (Value)
    {
      v6 = Value;
      v7 = CFGetTypeID(Value);
      if (v7 == CFNumberGetTypeID())
      {
        valuePtr = 0;
        CFNumberGetValue(v6, kCFNumberSInt64Type, &valuePtr);
        result = (double)valuePtr * 2.32830644e-10 + (double)(valuePtr >> 32);
        *a3 = result;
      }
    }
  }
  return result;
}

uint64_t CACFDictionary::GetArray(uint64_t this, const __CFString *a2, const __CFArray **a3)
{
  const __CFArray *v4;
  CFTypeID v5;

  if (this)
  {
    this = (uint64_t)CFDictionaryGetValue((CFDictionaryRef)this, a2);
    if (this)
    {
      v4 = (const __CFArray *)this;
      v5 = CFGetTypeID((CFTypeRef)this);
      if (v5 == CFArrayGetTypeID())
      {
        *a3 = v4;
        return 1;
      }
      else
      {
        return 0;
      }
    }
  }
  return this;
}

uint64_t CACFDictionary::GetDictionary(uint64_t this, const __CFString *a2, const __CFDictionary **a3)
{
  const __CFDictionary *v4;
  CFTypeID v5;

  if (this)
  {
    this = (uint64_t)CFDictionaryGetValue((CFDictionaryRef)this, a2);
    if (this)
    {
      v4 = (const __CFDictionary *)this;
      v5 = CFGetTypeID((CFTypeRef)this);
      if (v5 == CFDictionaryGetTypeID())
      {
        *a3 = v4;
        return 1;
      }
      else
      {
        return 0;
      }
    }
  }
  return this;
}

const __CFDictionary *CACFDictionary::GetCACFString(const __CFDictionary **this, const __CFString *key, CFTypeRef *a3)
{
  const __CFDictionary *result;
  const __CFDictionary *v7;
  CFTypeID v8;

  if (*a3)
  {
    if (*((_BYTE *)a3 + 8))
      CFRelease(*a3);
    *a3 = 0;
  }
  *((_BYTE *)a3 + 8) = 1;
  result = *this;
  if (*this)
  {
    result = (const __CFDictionary *)CFDictionaryGetValue(result, key);
    if (result)
    {
      v7 = result;
      v8 = CFGetTypeID(result);
      result = (const __CFDictionary *)CFStringGetTypeID();
      if ((const __CFDictionary *)v8 == result)
        return (const __CFDictionary *)CACFString::operator=((uint64_t)a3, v7);
    }
  }
  return result;
}

const __CFDictionary *CACFDictionary::GetCACFArray(const __CFDictionary **this, const __CFString *a2, CACFArray *a3)
{
  const __CFDictionary *result;
  const __CFDictionary *v7;
  CFTypeID v8;

  CACFDictionary::operator=((uint64_t)a3, 0);
  result = *this;
  if (*this)
  {
    result = (const __CFDictionary *)CFDictionaryGetValue(result, a2);
    if (result)
    {
      v7 = result;
      v8 = CFGetTypeID(result);
      result = (const __CFDictionary *)CFArrayGetTypeID();
      if ((const __CFDictionary *)v8 == result)
        return (const __CFDictionary *)CACFDictionary::operator=((uint64_t)a3, v7);
    }
  }
  return result;
}

const __CFDictionary *CACFDictionary::GetCACFDictionary(const __CFDictionary **this, const __CFString *a2, CACFDictionary *a3)
{
  const __CFDictionary *result;
  const __CFDictionary *v7;
  CFTypeID v8;

  CACFDictionary::operator=((uint64_t)a3, 0);
  result = *this;
  if (*this)
  {
    result = (const __CFDictionary *)CFDictionaryGetValue(result, a2);
    if (result)
    {
      v7 = result;
      v8 = CFGetTypeID(result);
      result = (const __CFDictionary *)CFDictionaryGetTypeID();
      if ((const __CFDictionary *)v8 == result)
        return (const __CFDictionary *)CACFDictionary::operator=((uint64_t)a3, v7);
    }
  }
  return result;
}

void CACFDictionary::AddUInt32(CFMutableDictionaryRef *this, const __CFString *a2, int a3)
{
  CFNumberRef v5;
  CFNumberRef v6;
  char v7;
  int valuePtr;

  valuePtr = a3;
  v5 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v6 = v5;
  v7 = 1;
  if (*((_BYTE *)this + 9) && v5 && *this)
    CFDictionarySetValue(*this, a2, v5);
  CACFNumber::~CACFNumber((CACFNumber *)&v6);
}

void sub_1B5CAB2E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CACFNumber::~CACFNumber((CACFNumber *)va);
  _Unwind_Resume(a1);
}

caulk::rt_safe_memory_resource *AMCP::Utility::AudioBufferList_Create(AMCP::Utility *this)
{
  int v1;
  caulk::rt_safe_memory_resource *result;
  _DWORD *v3;

  v1 = (int)this;
  result = (caulk::rt_safe_memory_resource *)*MEMORY[0x1E0DDB4F0];
  if (*MEMORY[0x1E0DDB4F0])
  {
    v3 = (_DWORD *)caulk::rt_safe_memory_resource::rt_allocate(result);
    bzero(v3, (16 * v1) | 8u);
    if (v3)
      *v3 = v1;
    return (caulk::rt_safe_memory_resource *)v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t AMCP::get_driver_property_traits_list(AMCP *this)
{
  unsigned __int8 v1;
  unint64_t v2;
  char v4;
  char **v5;
  char *v6;

  if ((v1 & 1) == 0
  {
    AMCP::get_driver_property_traits_list(void)::s_indesctructible_property_traits_list_ptr = 0;
  }
  v2 = atomic_load(&AMCP::get_driver_property_traits_list(void)::once);
  if (v2 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&AMCP::get_driver_property_traits_list(void)::once, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::get_driver_property_traits_list(void)::$_0 &&>>);
  }
  return AMCP::get_driver_property_traits_list(void)::s_indesctructible_property_traits_list_ptr;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::get_driver_property_traits_list(void)::$_0 &&>>()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  void *v3;
  unsigned int *v4;
  unint64_t v5;
  uint64_t v6;
  void **v7[2];
  char v8;
  int v9[12];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)v9, 1768189556, 1, 1, 0, &AMCP::Property_Traits<1768189556u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1650682995u>::k_valid_scopes, 0, 0, 15);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v10, 1650682995, 1, 1, 0, &AMCP::Property_Traits<1650682995u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668047219u>::k_valid_scopes, 0, 0, 6);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v11, 1668047219, 1, 1, 0, &AMCP::Property_Traits<1668047219u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1870098034u>::k_valid_scopes, 0, 0, 6);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v12, 1870098034, 1, 1, 0, &AMCP::Property_Traits<1870098034u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1869638759u>::k_valid_scopes, 0, 0, 15);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v13, 1869638759, 1, 1, 0, &AMCP::Property_Traits<1869638759u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1870097955u>::k_valid_scopes, 0, 1869638759, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v14, 1870097955, 1, 0, 0, &AMCP::Property_Traits<1870097955u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819173229u>::k_valid_scopes, 0, 1870098020, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v15, 1819173229, 0, 0, 1, &AMCP::Property_Traits<1819173229u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819111268u>::k_valid_scopes, 0, 1819173229, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v16, 1819111268, 0, 0, 0, &AMCP::Property_Traits<1819111268u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819107691u>::k_valid_scopes, 0, 1819111268, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v17, 1819107691, 0, 0, 0, &AMCP::Property_Traits<1819107691u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1768124270u>::k_valid_scopes, 0, 1819107691, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v18, 1768124270, 0, 0, 0, &AMCP::Property_Traits<1768124270u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1667330160u>::k_valid_scopes, 0, 1768124270, 5);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v19, 1667330160, 0, 0, 0, &AMCP::Property_Traits<1667330160u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1936618861u>::k_valid_scopes, 0, 1667330160, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v20, 1936618861, 0, 0, 0, &AMCP::Property_Traits<1936618861u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1719105134u>::k_valid_scopes, 0, 1936618861, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v21, 1719105134, 0, 0, 0, &AMCP::Property_Traits<1719105134u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818454126u>::k_valid_scopes, 0, 1719105134, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v22, 1818454126, 0, 0, 0, AMCP::Property_Traits<1818454126u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818452846u>::k_valid_scopes, -1, 1818454126, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v23, 1818452846, 0, 0, 0, AMCP::Property_Traits<1818452846u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818455662u>::k_valid_scopes, -1, 1818452846, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v24, 1818455662, 0, 0, 0, AMCP::Property_Traits<1818455662u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1920168547u>::k_valid_scopes, -1, 1818455662, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v25, 1920168547, 0, 0, 0, &AMCP::Property_Traits<1920168547u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668575852u>::k_valid_scopes, 0, 0, 5);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v26, 1668575852, 0, 0, 0, &AMCP::Property_Traits<1668575852u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1885956452u>::k_valid_scopes, 0, 1668575852, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v27, 1885956452, 1, 1, 0, &AMCP::Property_Traits<1885956452u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1651472419u>::k_valid_scopes, 0, 1885956452, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v28, 1651472419, 1, 0, 0, &AMCP::Property_Traits<1651472419u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668049699u>::k_valid_scopes, 0, 1651472419, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v29, 1668049699, 1, 0, 0, &AMCP::Property_Traits<1668049699u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1684370979u>::k_valid_scopes, 0, 1668049699, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v30, 1684370979, 1, 0, 0, &AMCP::Property_Traits<1684370979u>::k_valid_scopes, (uint64_t)"N14mcp_applesauce2CF15PropertyListRefE", 0, 1684370979, 14);
  v0 = operator new();
  *(_QWORD *)v0 = 0;
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)(v0 + 16) = 0;
  v7[1] = (void **)v0;
  v8 = 0;
  v1 = (char *)operator new(0x420uLL);
  *(_QWORD *)v0 = v1;
  *(_QWORD *)(v0 + 8) = v1;
  *(_QWORD *)(v0 + 16) = v1 + 1056;
  *(_QWORD *)(v0 + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<AMCP::Live_Property_Traits>,AMCP::Live_Property_Traits const*,AMCP::Live_Property_Traits const*,AMCP::Live_Property_Traits*>(v0 + 16, v9, (int *)&v31, (uint64_t)v1);
  v7[0] = 0;
  std::unique_ptr<std::vector<AMCP::Live_Property_Traits>>::reset[abi:ne180100]((void ***)&AMCP::get_driver_property_traits_list(void)::s_indesctructible_property_traits_list_ptr, (void **)v0);
  std::unique_ptr<std::vector<AMCP::Live_Property_Traits>>::reset[abi:ne180100](v7, 0);
  v2 = 264;
  do
  {
    v3 = *(void **)&v9[v2 - 10];
    if (v3)
    {
      *(_QWORD *)&v9[v2 - 8] = v3;
      operator delete(v3);
    }
    v2 -= 12;
  }
  while (v2 * 4);
  v4 = *(unsigned int **)(AMCP::get_driver_property_traits_list(void)::s_indesctructible_property_traits_list_ptr + 8);
  v5 = 126
     - 2
     * __clz(0xAAAAAAAAAAAAAAABLL* (((uint64_t)v4- *(_QWORD *)AMCP::get_driver_property_traits_list(void)::s_indesctructible_property_traits_list_ptr) >> 4));
  if (v4 == *(unsigned int **)AMCP::get_driver_property_traits_list(void)::s_indesctructible_property_traits_list_ptr)
    v6 = 0;
  else
    v6 = v5;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Property_Traits *,false>(*(unsigned int **)AMCP::get_driver_property_traits_list(void)::s_indesctructible_property_traits_list_ptr, v4, v6, 1);
}

void sub_1B5CABA0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, char a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  void *v19;

  v16 = v15;
  *(_QWORD *)(v14 + 8) = v16;
  std::vector<AMCP::Live_Property_Traits>::__destroy_vector::operator()[abi:ne180100](&a12);
  MEMORY[0x1B5E50688](v14, 0x20C40960023A9);
  v18 = 1056;
  while (1)
  {
    v19 = *(void **)(&a14 + v18 - 40);
    if (v19)
    {
      *(_QWORD *)(&a14 + v18 - 32) = v19;
      operator delete(v19);
    }
    v18 -= 48;
    if (!v18)
      _Unwind_Resume(a1);
  }
}

void AMCP::DAL::demand_map(AMCP::DAL::DALSupport *a1)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)a1)
    {
      AMCP::DAL::demand_map(void)::s_map = 0u;
      *(_OWORD *)&qword_1EF1312C8 = 0u;
      dword_1EF1312D8 = 1065353216;
    }
  }
  if ((AMCP::DAL::demand_map(void)::has_been_initialized & 1) == 0)
  {
    AMCP::DAL::demand_map(void)::has_been_initialized = 1;
    AMCP::DAL::DALSupport::initialize_data_handlers(a1);
  }
}

AMCP::DAL::DALSupport *AMCP::DAL::File::File(AMCP::DAL::DALSupport *a1, unsigned int a2, uint64_t a3)
{
  uint8x8_t v6;
  unint64_t v7;
  uint64_t **v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v12;

  AMCP::DAL::demand_map(a1);
  if (!*((_QWORD *)&AMCP::DAL::demand_map(void)::s_map + 1))
    goto LABEL_17;
  v6 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&AMCP::DAL::demand_map(void)::s_map + 8));
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = a2;
    if (*((_QWORD *)&AMCP::DAL::demand_map(void)::s_map + 1) <= (unint64_t)a2)
      v7 = (unint64_t)a2 % *((_QWORD *)&AMCP::DAL::demand_map(void)::s_map + 1);
  }
  else
  {
    v7 = (DWORD2(AMCP::DAL::demand_map(void)::s_map) - 1) & a2;
  }
  v8 = *(uint64_t ***)(AMCP::DAL::demand_map(void)::s_map + 8 * v7);
  if (!v8 || (v9 = *v8) == 0)
  {
LABEL_17:
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = 0;
    return a1;
  }
  while (1)
  {
    v10 = v9[1];
    if (v10 == a2)
      break;
    if (v6.u32[0] > 1uLL)
    {
      if (v10 >= *((_QWORD *)&AMCP::DAL::demand_map(void)::s_map + 1))
        v10 %= *((_QWORD *)&AMCP::DAL::demand_map(void)::s_map + 1);
    }
    else
    {
      v10 &= *((_QWORD *)&AMCP::DAL::demand_map(void)::s_map + 1) - 1;
    }
    if (v10 != v7)
      goto LABEL_17;
LABEL_16:
    v9 = (uint64_t *)*v9;
    if (!v9)
      goto LABEL_17;
  }
  if (*((_DWORD *)v9 + 4) != a2)
    goto LABEL_16;
  v12 = v9[6];
  if (!v12)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 48))(v12, a3);
  return a1;
}

void AMCP::DAL::File::~File(std::__shared_weak_count **this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  ((void (*)(std::__shared_weak_count *))(*this)->__on_zero_shared_weak)(*this);
  v2 = this[1];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

_QWORD *AMCP::DAL::File::set_file_handler_format(AMCP::DAL::DALSupport *a1, _QWORD *a2)
{
  unint64_t v2;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  void **v8;
  _QWORD *v9;
  unint64_t v10;
  float v11;
  _BOOL8 v12;
  unint64_t v13;
  unint64_t v14;
  int8x8_t prime;
  void *v16;
  void *v17;
  uint64_t v18;
  _QWORD **v19;
  unint64_t v20;
  uint8x8_t v21;
  unint64_t v22;
  uint8x8_t v23;
  uint64_t v24;
  _QWORD *i;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *result;
  uint64_t v35;
  void *v36;
  _QWORD v37[3];
  _QWORD *v38;
  _QWORD v39[4];

  v4 = a1;
  v39[3] = *MEMORY[0x1E0C80C00];
  AMCP::DAL::demand_map(a1);
  v5 = v4;
  v6 = *((_QWORD *)&AMCP::DAL::demand_map(void)::s_map + 1);
  if (*((_QWORD *)&AMCP::DAL::demand_map(void)::s_map + 1))
  {
    v7 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&AMCP::DAL::demand_map(void)::s_map + 8));
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v2 = v4;
      if (*((_QWORD *)&AMCP::DAL::demand_map(void)::s_map + 1) <= (unint64_t)v4)
        v2 = (unint64_t)v4 % *((_QWORD *)&AMCP::DAL::demand_map(void)::s_map + 1);
    }
    else
    {
      v2 = (DWORD2(AMCP::DAL::demand_map(void)::s_map) - 1) & v4;
    }
    v8 = *(void ***)(AMCP::DAL::demand_map(void)::s_map + 8 * v2);
    if (v8)
    {
      v9 = *v8;
      if (*v8)
      {
        do
        {
          v10 = v9[1];
          if (v10 == v4)
          {
            if (*((_DWORD *)v9 + 4) == v4)
              goto LABEL_74;
          }
          else
          {
            if (v7.u32[0] > 1uLL)
            {
              if (v10 >= *((_QWORD *)&AMCP::DAL::demand_map(void)::s_map + 1))
                v10 %= *((_QWORD *)&AMCP::DAL::demand_map(void)::s_map + 1);
            }
            else
            {
              v10 &= *((_QWORD *)&AMCP::DAL::demand_map(void)::s_map + 1) - 1;
            }
            if (v10 != v2)
              break;
          }
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
    }
  }
  v9 = operator new(0x38uLL);
  *v9 = 0;
  v9[1] = v4;
  *((_DWORD *)v9 + 4) = v4;
  v9[6] = 0;
  v11 = (float)(unint64_t)(qword_1EF1312D0 + 1);
  if (v6 && (float)(*(float *)&dword_1EF1312D8 * (float)v6) >= v11)
  {
    v5 = v2;
    goto LABEL_64;
  }
  v12 = 1;
  if (v6 >= 3)
    v12 = (v6 & (v6 - 1)) != 0;
  v13 = v12 | (2 * v6);
  v14 = vcvtps_u32_f32(v11 / *(float *)&dword_1EF1312D8);
  if (v13 <= v14)
    prime = (int8x8_t)v14;
  else
    prime = (int8x8_t)v13;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v6 = *((_QWORD *)&AMCP::DAL::demand_map(void)::s_map + 1);
  }
  if (*(_QWORD *)&prime <= v6)
  {
    if (*(_QWORD *)&prime >= v6)
      goto LABEL_60;
    v22 = vcvtps_u32_f32((float)(unint64_t)qword_1EF1312D0 / *(float *)&dword_1EF1312D8);
    if (v6 < 3 || (v23 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
    {
      v22 = std::__next_prime(v22);
    }
    else
    {
      v24 = 1 << -(char)__clz(v22 - 1);
      if (v22 >= 2)
        v22 = v24;
    }
    if (*(_QWORD *)&prime <= v22)
      prime = (int8x8_t)v22;
    if (*(_QWORD *)&prime >= v6)
    {
      v6 = *((_QWORD *)&AMCP::DAL::demand_map(void)::s_map + 1);
      goto LABEL_60;
    }
    if (!*(_QWORD *)&prime)
    {
      v36 = (void *)AMCP::DAL::demand_map(void)::s_map;
      *(_QWORD *)&AMCP::DAL::demand_map(void)::s_map = 0;
      if (v36)
        operator delete(v36);
      v6 = 0;
      *((_QWORD *)&AMCP::DAL::demand_map(void)::s_map + 1) = 0;
      goto LABEL_60;
    }
  }
  if (*(_QWORD *)&prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v16 = operator new(8 * *(_QWORD *)&prime);
  v17 = (void *)AMCP::DAL::demand_map(void)::s_map;
  *(_QWORD *)&AMCP::DAL::demand_map(void)::s_map = v16;
  if (v17)
    operator delete(v17);
  v18 = 0;
  *((int8x8_t *)&AMCP::DAL::demand_map(void)::s_map + 1) = prime;
  do
    *(_QWORD *)(AMCP::DAL::demand_map(void)::s_map + 8 * v18++) = 0;
  while (*(_QWORD *)&prime != v18);
  v19 = (_QWORD **)qword_1EF1312C8;
  if (qword_1EF1312C8)
  {
    v20 = *(_QWORD *)(qword_1EF1312C8 + 8);
    v21 = (uint8x8_t)vcnt_s8(prime);
    v21.i16[0] = vaddlv_u8(v21);
    if (v21.u32[0] > 1uLL)
    {
      if (v20 >= *(_QWORD *)&prime)
        v20 %= *(_QWORD *)&prime;
    }
    else
    {
      v20 &= *(_QWORD *)&prime - 1;
    }
    *(_QWORD *)(AMCP::DAL::demand_map(void)::s_map + 8 * v20) = &qword_1EF1312C8;
    for (i = *v19; i; v20 = v26)
    {
      v26 = i[1];
      if (v21.u32[0] > 1uLL)
      {
        if (v26 >= *(_QWORD *)&prime)
          v26 %= *(_QWORD *)&prime;
      }
      else
      {
        v26 &= *(_QWORD *)&prime - 1;
      }
      if (v26 != v20)
      {
        if (!*(_QWORD *)(AMCP::DAL::demand_map(void)::s_map + 8 * v26))
        {
          *(_QWORD *)(AMCP::DAL::demand_map(void)::s_map + 8 * v26) = v19;
          goto LABEL_56;
        }
        *v19 = (_QWORD *)*i;
        *i = **(_QWORD **)(AMCP::DAL::demand_map(void)::s_map + 8 * v26);
        **(_QWORD **)(AMCP::DAL::demand_map(void)::s_map + 8 * v26) = i;
        i = v19;
      }
      v26 = v20;
LABEL_56:
      v19 = (_QWORD **)i;
      i = (_QWORD *)*i;
    }
  }
  v6 = (unint64_t)prime;
LABEL_60:
  if ((v6 & (v6 - 1)) != 0)
  {
    if (v6 <= v5)
      v5 %= v6;
  }
  else
  {
    v5 = ((_DWORD)v6 - 1) & v5;
  }
LABEL_64:
  v27 = AMCP::DAL::demand_map(void)::s_map;
  v28 = *(_QWORD **)(AMCP::DAL::demand_map(void)::s_map + 8 * v5);
  if (v28)
  {
    *v9 = *v28;
LABEL_72:
    *v28 = v9;
    goto LABEL_73;
  }
  *v9 = qword_1EF1312C8;
  qword_1EF1312C8 = (uint64_t)v9;
  *(_QWORD *)(v27 + 8 * v5) = &qword_1EF1312C8;
  if (*v9)
  {
    v29 = *(_QWORD *)(*v9 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v29 >= v6)
        v29 %= v6;
    }
    else
    {
      v29 &= v6 - 1;
    }
    v28 = (_QWORD *)(AMCP::DAL::demand_map(void)::s_map + 8 * v29);
    goto LABEL_72;
  }
LABEL_73:
  ++qword_1EF1312D0;
LABEL_74:
  v30 = (_QWORD *)a2[3];
  if (v30)
  {
    if (v30 == a2)
    {
      v38 = v37;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v37);
    }
    else
    {
      v38 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v30 + 16))(v30);
    }
  }
  else
  {
    v38 = 0;
  }
  v31 = (char *)(v9 + 3);
  if (v9 + 3 != v37)
  {
    v32 = v38;
    v33 = (char *)v9[6];
    if (v38 == v37)
    {
      if (v33 == v31)
      {
        (*(void (**)(_QWORD *, _QWORD *))(v37[0] + 24))(v37, v39);
        (*(void (**)(_QWORD *))(*v38 + 32))(v38);
        v38 = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)v9[6] + 24))(v9[6], v37);
        (*(void (**)(_QWORD))(*(_QWORD *)v9[6] + 32))(v9[6]);
        v9[6] = 0;
        v38 = v37;
        (*(void (**)(_QWORD *, _QWORD *))(v39[0] + 24))(v39, v9 + 3);
        (*(void (**)(_QWORD *))(v39[0] + 32))(v39);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(v37[0] + 24))(v37, v9 + 3);
        (*(void (**)(_QWORD *))(*v38 + 32))(v38);
        v38 = (_QWORD *)v9[6];
      }
      v9[6] = v31;
    }
    else if (v33 == v31)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*(_QWORD *)v31 + 24))(v9 + 3, v37);
      (*(void (**)(_QWORD))(*(_QWORD *)v9[6] + 32))(v9[6]);
      v9[6] = v38;
      v38 = v37;
    }
    else
    {
      v38 = (_QWORD *)v9[6];
      v9[6] = v32;
    }
  }
  result = v38;
  if (v38 == v37)
  {
    v35 = 4;
    result = v37;
  }
  else
  {
    if (!v38)
      return result;
    v35 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v35))();
}

void sub_1B5CAC234(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void AMCP::DAL::create_timestamp_data(AMCP::DAL *this, const AMCP::DAL::DAL_Time *a2, const AMCP::DAL::DAL_Timed_Segment *a3, std::__shared_weak_count *a4)
{
  unint64_t *p_shared_owners;
  unint64_t v8;
  double sample_time;
  uint64_t host_time;
  double v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  _QWORD *v15;
  void (*v16)(_QWORD, _QWORD *, _QWORD, _QWORD);
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20[2];
  _QWORD v21[9];
  std::__shared_weak_count *v22;
  _QWORD v23[8];
  _QWORD v24[8];
  _QWORD v25[8];
  _QWORD v26[8];
  _QWORD v27[8];
  _QWORD v28[9];

  v28[8] = *MEMORY[0x1E0C80C00];
  v21[8] = a3;
  v22 = a4;
  if (a4)
  {
    p_shared_owners = (unint64_t *)&a4->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  (*(void (**)(_QWORD *__return_ptr, const AMCP::DAL::DAL_Timed_Segment *))(*(_QWORD *)a3 + 40))(v21, a3);
  sample_time = AMCP::DAL::DAL_Time::get_sample_time(a2);
  std::string::basic_string[abi:ne180100]<0>(v23, "current sample");
  v23[3] = vcvtmd_s64_f64(sample_time);
  memset(&v23[4], 0, 24);
  v23[7] = AMCP::Implementation::In_Place_Storage<unsigned long long>::dispatch;
  host_time = AMCP::DAL::DAL_Time::get_host_time(a2);
  std::string::basic_string[abi:ne180100]<0>(v24, "current host");
  v24[3] = host_time;
  memset(&v24[4], 0, 24);
  v24[7] = AMCP::Implementation::In_Place_Storage<unsigned long long>::dispatch;
  v11 = (*(double (**)(const AMCP::DAL::DAL_Timed_Segment *))(*(_QWORD *)a3 + 160))(a3);
  std::string::basic_string[abi:ne180100]<0>(v25, "IO rate scalar");
  memset(&v25[4], 0, 24);
  *(double *)&v25[3] = v11;
  v25[7] = AMCP::Implementation::In_Place_Storage<double>::dispatch;
  v12 = v21[1];
  std::string::basic_string[abi:ne180100]<0>(v26, "zts host");
  v26[3] = v12;
  memset(&v26[4], 0, 24);
  v26[7] = AMCP::Implementation::In_Place_Storage<unsigned long long>::dispatch;
  v13 = *(double *)v21;
  std::string::basic_string[abi:ne180100]<0>(v27, "zts sample");
  v27[3] = (uint64_t)v13;
  memset(&v27[4], 0, 24);
  v27[7] = AMCP::Implementation::In_Place_Storage<long long>::dispatch;
  std::string::basic_string[abi:ne180100]<0>(v28, "zts rate scalar");
  memset(&v28[4], 0, 24);
  v28[3] = v21[2];
  v28[7] = AMCP::Implementation::In_Place_Storage<double>::dispatch;
  v20[0] = (uint64_t)v23;
  v20[1] = 6;
  AMCP::DAL::DAL_Settings::DAL_Settings((unint64_t)this, v20);
  v14 = 48;
  do
  {
    v15 = &v23[v14];
    v16 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))v23[v14 - 1];
    if (v16)
      v16(0, v15 - 5, 0, 0);
    if (*((char *)v15 - 41) < 0)
      operator delete((void *)*(v15 - 8));
    v14 -= 8;
  }
  while (v14 * 8);
  v17 = v22;
  if (v22)
  {
    v18 = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_1B5CAC4BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22)
{
  uint64_t i;

  for (i = 320; i != -64; i -= 64)
    std::pair<std::string,AMCP::Thing>::~pair((uint64_t)(&a22 + i));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void AMCP::DAL::generate_time_stamp(AMCP::DAL *this)
{
  tm *v2;
  time_t v3;

  v3 = time(0);
  v2 = localtime(&v3);
  caulk::make_string((caulk *)"%04d%02d%02d.%02d%02d%02d", (uint64_t)this, v2->tm_year, v2->tm_mon, v2->tm_mday, v2->tm_hour, v2->tm_min, v2->tm_sec);
}

float AMCP::DAL::DAL_Volume_Processor::set_ramp(uint64_t a1, float a2, double a3, double a4)
{
  float v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  float result;

  v4 = fmaxf(fminf(a2, 1.0), 0.0);
  *(float *)(a1 + 52) = v4;
  *(double *)(a1 + 56) = a3;
  if (round(a4) == 0.0)
  {
    v5 = *(double *)(a1 + 40);
  }
  else
  {
    v5 = *(double *)a1;
    if (a4 < *(double *)a1)
      v5 = a4;
  }
  *(double *)(a1 + 64) = v5;
  v6 = (v4 - *(float *)(a1 + 48)) / v5;
  v7 = ceil(v6 * 1000000.0);
  v8 = floor(v6 * 1000000.0);
  if (v6 <= 0.0)
    v9 = v8;
  else
    v9 = v7;
  result = v9 / 1000000.0;
  *(float *)(a1 + 72) = result;
  return result;
}

HALS_IODevice *HALS_IOContextDescription_HostedDSP::LocalEngineStreamInfo::getDeviceFromEngine(HALS_IODevice *this)
{
  HALS_IODevice *v1;

  if (this)
  {
    this = (HALS_IODevice *)*((_QWORD *)this + 1);
    if (this)
    {
      this = (HALS_IODevice *)(*(uint64_t (**)(HALS_IODevice *))(*(_QWORD *)this + 320))(this);
      if (this)
      {
        v1 = this;
        if (HALS_IODevice::GetNumberStreams(this, 1))
          return v1;
        else
          return 0;
      }
    }
  }
  return this;
}

uint64_t HALS_IOContextDescription_HostedDSP::IsHostingInputDSP(_QWORD *a1, _QWORD **a2, _QWORD *a3)
{
  uint64_t v6;
  HALB_Mutex *v7;
  HALB_Mutex *v8;
  uint64_t v9;
  uint64_t v10;
  const __CFDictionary *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  unsigned int v15;
  _QWORD **v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD **v19;
  unsigned int v20;
  _QWORD *v21;
  _QWORD *v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v26;
  _QWORD *v27[2];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t);
  uint64_t (*v32)(uint64_t);
  uint64_t v33;
  _QWORD *v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void (*v40)(uint64_t);
  _QWORD **v41;
  _QWORD *v42;
  uint64_t v43;

  if (!a2)
    return 0;
  v36 = 0;
  v37 = (uint64_t)&v36;
  v38 = 0x4002000000;
  v39 = __Block_byref_object_copy__253;
  v40 = __Block_byref_object_dispose__254;
  v43 = 0;
  v6 = MEMORY[0x1E0C809B0];
  v41 = &v42;
  v42 = 0;
  v28 = MEMORY[0x1E0C809B0];
  v29 = 0x40000000;
  v30 = (uint64_t)___ZNK11HALS_Device20GetDSPTypesForClientEbP11HALS_Client_block_invoke;
  v31 = (uint64_t (*)(uint64_t, uint64_t))&unk_1E699E2B0;
  v32 = (uint64_t (*)(uint64_t))&v36;
  v33 = (uint64_t)a2;
  v35 = 1;
  v34 = a3;
  v7 = (HALB_Mutex *)((uint64_t (*)(_QWORD **))(*a2)[7])(a2);
  HALB_CommandGate::ExecuteCommand(v7, (uint64_t)&v28);
  std::set<DSP_Host_Types::AudioProcessingType>::set[abi:ne180100](&v26, (_QWORD *)(v37 + 40));
  _Block_object_dispose(&v36, 8);
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v42);
  v28 = 0;
  v29 = (uint64_t)&v28;
  v30 = 0x3002000000;
  v31 = __Block_byref_object_copy__250;
  v32 = __Block_byref_object_dispose__251;
  v33 = 0;
  v36 = v6;
  v37 = 0x40000000;
  v38 = (uint64_t)___ZNK11HALS_Device31RationalizeDSPOffloadsForClientEbP11HALS_Client_block_invoke;
  v39 = &unk_1E699E288;
  v40 = (void (*)(uint64_t))&v28;
  v41 = a2;
  LOBYTE(v43) = 1;
  v42 = a3;
  v8 = (HALB_Mutex *)((uint64_t (*)(_QWORD **))(*a2)[7])(a2);
  HALB_CommandGate::ExecuteCommand(v8, (uint64_t)&v36);
  v9 = *(_QWORD *)(v29 + 40);
  *(_QWORD *)(v29 + 40) = 0;
  _Block_object_dispose(&v28, 8);
  v10 = v33;
  v33 = 0;
  if (v10)
    std::default_delete<DSP_Host_OffloadDictionary>::operator()[abi:ne180100](v10);
  if (v9)
  {
    v11 = *(const __CFDictionary **)(v9 + 16);
    if (v11)
    {
      if (CFDictionaryGetCount(v11))
        std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>(&v26, 8u, 8);
    }
  }
  if (v27[1])
  {
    v14 = (_QWORD *)*a1;
    v13 = a1 + 1;
    v12 = v14;
    if (v14 != v13)
    {
      while (1)
      {
        if (v27[0])
        {
          v15 = *((_DWORD *)v12 + 7);
          v16 = v27;
          v17 = v27[0];
          do
          {
            v18 = v17;
            v19 = v16;
            v20 = *((_DWORD *)v17 + 7);
            if (v20 >= v15)
              v16 = (_QWORD **)v17;
            else
              ++v17;
            v17 = (_QWORD *)*v17;
          }
          while (v17);
          if (v16 != v27)
          {
            if (v20 < v15)
              v18 = v19;
            if (v15 >= *((_DWORD *)v18 + 7))
              break;
          }
        }
        v21 = (_QWORD *)v12[1];
        if (v21)
        {
          do
          {
            v22 = v21;
            v21 = (_QWORD *)*v21;
          }
          while (v21);
        }
        else
        {
          do
          {
            v22 = (_QWORD *)v12[2];
            v23 = *v22 == (_QWORD)v12;
            v12 = v22;
          }
          while (!v23);
        }
        v12 = v22;
        if (v22 == v13)
          goto LABEL_26;
      }
      v24 = 1;
      if (!v9)
        goto LABEL_28;
      goto LABEL_27;
    }
  }
LABEL_26:
  v24 = 0;
  if (v9)
LABEL_27:
    std::default_delete<DSP_Host_OffloadDictionary>::operator()[abi:ne180100](v9);
LABEL_28:
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v27[0]);
  return v24;
}

void sub_1B5CAC8DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11)
{
  uint64_t v11;

  std::default_delete<DSP_Host_OffloadDictionary>::operator()[abi:ne180100](v11);
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(a11);
  _Unwind_Resume(a1);
}

void AMCP::DAL::PCM_File_Writer::~PCM_File_Writer(AMCP::DAL::PCM_File_Writer *this)
{
  AMCP::DAL::PCM_File_Writer::~PCM_File_Writer(this);
  JUMPOUT(0x1B5E50688);
}

{
  AMCP::Log::Scope_Registry *v2;
  std::__shared_weak_count *v3;
  NSObject *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  os_signpost_id_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  os_log_t *v11;
  std::__shared_weak_count *v12;

  *(_QWORD *)this = &off_1E69A1000;
  AMCP::Log::Scope_Registry::get(this);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v11, "com.apple.coreaudio", "AMCP");
  v3 = v12;
  v4 = *v11;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  AMCP::Log::Scope_Registry::get(v2);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v11, "com.apple.coreaudio", "AMCP");
  v7 = os_signpost_id_make_with_pointer(*v11, this);
  v8 = v12;
  if (v12)
  {
    v9 = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v4))
  {
    LOWORD(v11) = 0;
    _os_signpost_emit_with_name_impl(&dword_1B57BA000, v4, OS_SIGNPOST_INTERVAL_END, v7, "AudioHAL Capture", (const char *)&unk_1B5D95CC1, (uint8_t *)&v11, 2u);
  }
  AMCP::DAL::PCM_File_Writer::close_file(this);
  std::unique_ptr<AMCP::DAL::Timestamp_Writer>::reset[abi:ne180100]((uint64_t *)this + 21, 0);
  if (*((char *)this + 159) < 0)
    operator delete(*((void **)this + 17));
  if (*((char *)this + 135) < 0)
    operator delete(*((void **)this + 14));
  if (*((char *)this + 111) < 0)
    operator delete(*((void **)this + 11));
  *(_QWORD *)this = off_1E69A1340;
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
}

caulk::rt_safe_memory_resource *AMCP::DAL::PCM_File_Writer::write_data(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  double *v6;
  unint64_t v7;
  uint64_t v8;
  double sample_time;
  AMCP::Log::Scope_Registry *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  BOOL v16;
  double v18;
  double v19;
  uint64_t v20;
  double *v21;
  uint8_t *v22;
  uint64_t v23;
  UInt32 v24;
  size_t v25;
  void *v26;
  std::string::size_type v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  std::string::size_type v31;
  int v32;
  double *v33;
  AMCP::Log::Scope_Registry *v34;
  int v35;
  std::__shared_weak_count *v36;
  NSObject *v37;
  unint64_t *v38;
  unint64_t v39;
  AMCP::Log::Scope_Registry *v40;
  int v41;
  _opaque_pthread_t *v42;
  mach_port_t v43;
  _QWORD *v44;
  const AudioBufferList *v45;
  std::string::size_type i;
  unsigned __int8 *v47;
  double v48;
  double v49;
  std::__shared_weak_count *v50;
  void *mData;
  unint64_t *p_shared_owners;
  unint64_t v53;
  uint64_t host_time;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  double v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  int64x2_t v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  NSObject *v78;
  _opaque_pthread_t *v79;
  mach_port_t v80;
  _QWORD *v81;
  void *exception;
  _QWORD *v83;
  NSObject *v84;
  _opaque_pthread_t *v85;
  mach_port_t v86;
  void *v87;
  NSObject *v88;
  _opaque_pthread_t *v89;
  mach_port_t v90;
  void *v91;
  NSObject *v92;
  _opaque_pthread_t *v93;
  mach_port_t v94;
  _QWORD *v95;
  void *v96;
  _QWORD *v97;
  double *v98;
  double *v99;
  _QWORD v100[3];
  std::logic_error v101;
  std::string::size_type v102;
  std::logic_error v103;
  char v104;
  std::string v105;
  uint64_t (**v106)();
  std::string v107;
  std::string v108;
  std::logic_error v109;
  void *v110;
  void *v111;
  std::__shared_weak_count *v112;
  uint64_t v113;
  int v114;
  const AudioBufferList *v115;
  std::string v116;
  uint8_t buf[8];
  int64x2_t v118;
  _BYTE v119[30];
  uint64_t v120;

  v120 = *MEMORY[0x1E0C80C00];
  AMCP::DAL::DAL_Timed_Segment::get_audio_buffer_lists((AMCP::DAL::DAL_Timed_Segment *)v100, a3);
  AMCP::DAL::DAL_Timed_Segment::translate_range(&v98, *(const AMCP::DAL::DAL_Time_Range **)(a3 + 80), a3);
  v6 = v98;
  if (v99 != v98)
  {
    v7 = 0;
    while (1)
    {
      v8 = (uint64_t)&v6[12 * v7 + 2];
      sample_time = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)v8);
      v11 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(v8 + 40));
      v12 = *(double *)(a1 + 80);
      v13 = round(v12);
      v14 = round(sample_time);
      v15 = round(v11);
      v16 = v13 != 0.0 && v14 < v15;
      if (v16 && v13 < v14)
        break;
LABEL_43:
      v40 = (AMCP::Log::Scope_Registry *)ExtAudioFileWriteAsync(*(ExtAudioFileRef *)(a1 + 48), vcvtmd_s64_f64(v11 - sample_time), *(const AudioBufferList **)(v100[0] + 40 * v7));
      v41 = (int)v40;
      if ((_DWORD)v40)
      {
        AMCP::Log::Scope_Registry::get(v40);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v78 = **(NSObject ***)buf;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
        {
          v79 = pthread_self();
          v80 = pthread_mach_thread_np(v79);
          v81 = (_QWORD *)(a1 + 88);
          if (*(char *)(a1 + 111) < 0)
            v81 = (_QWORD *)*v81;
          *(_DWORD *)buf = 67110402;
          *(_DWORD *)&buf[4] = v80;
          v118.i16[0] = 2080;
          *(uint64_t *)((char *)v118.i64 + 2) = (uint64_t)"PCM_File_Writer.cpp";
          v118.i16[5] = 1024;
          v118.i32[3] = 179;
          *(_WORD *)v119 = 2080;
          *(_QWORD *)&v119[2] = "not (the_error == 0)";
          *(_WORD *)&v119[10] = 2080;
          *(_QWORD *)&v119[12] = v81;
          *(_WORD *)&v119[20] = 2048;
          *(_QWORD *)&v119[22] = v41;
          _os_log_error_impl(&dword_1B57BA000, v78, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s PCM_File_Writer::Write: couldn't write the data %s: %ld", buf, 0x36u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v101);
        exception = __cxa_allocate_exception(0x40uLL);
        v83 = (_QWORD *)(a1 + 88);
        if (*(char *)(a1 + 111) < 0)
          v83 = (_QWORD *)*v83;
        caulk::make_string((caulk *)"PCM_File_Writer::Write: couldn't write the data %s: %ld", (uint64_t)&v106, v83, v41);
        std::logic_error::logic_error((std::logic_error *)&v105, (const std::string *)&v106);
        v105.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE5018] + 16;
        std::logic_error::logic_error(&v109, (const std::logic_error *)&v105);
        v111 = 0;
        v112 = 0;
        v113 = 0;
        v114 = -1;
        v109.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
        v110 = &unk_1E69A1230;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v109);
        *(_QWORD *)&v119[8] = "void AMCP::DAL::PCM_File_Writer::_write_data(uint32_t, const BufferListPtr &) const";
        *(_QWORD *)&v119[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_File_Writer.cpp";
        *(_DWORD *)&v119[24] = 179;
        applesauce::backtrace::snapshot_N<64>::snapshot_N(&v108.__r_.__value_.__l.__data_);
        v116 = v108;
        v115 = (const AudioBufferList *)off_1E69A20A0;
        memset(&v108, 0, sizeof(v108));
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v115);
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
      }
      ++v7;
      v6 = v98;
      if (v7 >= 0xAAAAAAAAAAAAAAABLL * (((char *)v99 - (char *)v98) >> 5))
        goto LABEL_45;
    }
    v18 = sample_time - v12;
    if (round(v18) >= round(*(double *)(a1 + 8) * 5.0))
      v19 = *(double *)(a1 + 8) * 5.0;
    else
      v19 = v18;
    if (round(v19) <= 0.0)
    {
      AMCP::Log::Scope_Registry::get(v10);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v84 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v84, OS_LOG_TYPE_ERROR))
      {
        v85 = pthread_self();
        v86 = pthread_mach_thread_np(v85);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v86;
        v118.i16[0] = 2080;
        *(uint64_t *)((char *)v118.i64 + 2) = (uint64_t)"PCM_File_Writer.cpp";
        v118.i16[5] = 1024;
        v118.i32[3] = 152;
        *(_WORD *)v119 = 2080;
        *(_QWORD *)&v119[2] = "not (num_samples > 0_S)";
        _os_log_error_impl(&dword_1B57BA000, v84, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v101);
      v87 = __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)&v106);
      std::logic_error::logic_error((std::logic_error *)&v105, (const std::string *)&v106);
      v105.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE5018] + 16;
      std::logic_error::logic_error(&v109, (const std::logic_error *)&v105);
      v111 = 0;
      v112 = 0;
      v113 = 0;
      v114 = -1;
      v109.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
      v110 = &unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v109);
      *(_QWORD *)&v119[8] = "void AMCP::DAL::PCM_File_Writer::write_silence_for_skipped_range(Sample_Time) const";
      *(_QWORD *)&v119[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_File_Writer.cpp";
      *(_DWORD *)&v119[24] = 152;
      applesauce::backtrace::snapshot_N<64>::snapshot_N(&v108.__r_.__value_.__l.__data_);
      v116 = v108;
      v115 = (const AudioBufferList *)off_1E69A20A0;
      memset(&v108, 0, sizeof(v108));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v115);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v87, (uint64_t)buf);
    }
    if ((*(_BYTE *)(a1 + 20) & 0x20) != 0)
      v20 = *(unsigned int *)(a1 + 36);
    else
      v20 = 1;
    v21 = (double *)AMCP::Utility::AudioBufferList_Create((AMCP::Utility *)v20);
    *(_QWORD *)buf = &off_1E69A1390;
    *(_QWORD *)v119 = buf;
    v115 = (const AudioBufferList *)v21;
    std::__function::__value_func<void ()(AudioBufferList *)>::__value_func[abi:ne180100]((uint64_t)&v116, (uint64_t)buf);
    v22 = *(uint8_t **)v119;
    if (*(uint8_t **)v119 == buf)
    {
      v22 = buf;
      v23 = 4;
    }
    else
    {
      if (!*(_QWORD *)v119)
      {
LABEL_23:
        v24 = vcvtmd_s64_f64(v19);
        v25 = *(_DWORD *)(a1 + 32) * v24;
        if (!(_DWORD)v25)
        {
          AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v22);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v88 = **(NSObject ***)buf;
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
          if (os_log_type_enabled(v88, OS_LOG_TYPE_ERROR))
          {
            v89 = pthread_self();
            v90 = pthread_mach_thread_np(v89);
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)&buf[4] = v90;
            v118.i16[0] = 2080;
            *(uint64_t *)((char *)v118.i64 + 2) = (uint64_t)"PCM_File_Writer.cpp";
            v118.i16[5] = 1024;
            v118.i32[3] = 158;
            *(_WORD *)v119 = 2080;
            *(_QWORD *)&v119[2] = "not (data_byte_size > 0)";
            _os_log_error_impl(&dword_1B57BA000, v88, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v103);
          v91 = __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"", (uint64_t)&v108);
          std::logic_error::logic_error(&v101, &v108);
          v101.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
          std::logic_error::logic_error(&v109, &v101);
          v111 = 0;
          v112 = 0;
          v113 = 0;
          v114 = -1;
          v109.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
          v110 = &unk_1E69A1230;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v109);
          *(_QWORD *)&v119[8] = "void AMCP::DAL::PCM_File_Writer::write_silence_for_skipped_range(Sample_Time) const";
          *(_QWORD *)&v119[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_File_Writer.cpp";
          *(_DWORD *)&v119[24] = 158;
          applesauce::backtrace::snapshot_N<64>::snapshot_N(&v105.__r_.__value_.__l.__data_);
          v107 = v105;
          v106 = off_1E69A20A0;
          memset(&v105, 0, sizeof(v105));
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v106);
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v91, (uint64_t)buf);
        }
        memset(&v108, 0, sizeof(v108));
        *(_QWORD *)buf = &v108;
        v118.i8[0] = 0;
        if (!*MEMORY[0x1E0DDB4F0])
          __break(1u);
        v26 = (void *)caulk::rt_safe_memory_resource::rt_allocate((caulk::rt_safe_memory_resource *)*MEMORY[0x1E0DDB4F0]);
        v27 = (std::string::size_type)v26 + v25;
        v108.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
        v108.__r_.__value_.__r.__words[2] = (std::string::size_type)v26 + v25;
        bzero(v26, v25);
        v28 = 0;
        v29 = 0;
        v108.__r_.__value_.__l.__size_ = v27;
        v30 = *(_DWORD *)(a1 + 20);
        v31 = v108.__r_.__value_.__r.__words[0];
        if ((v30 & 0x20) != 0)
        {
LABEL_26:
          if (v29 < *(unsigned int *)(a1 + 36))
          {
            v32 = 1;
            goto LABEL_30;
          }
        }
        else
        {
          while (!v29)
          {
            v32 = *(_DWORD *)(a1 + 36);
LABEL_30:
            v33 = (double *)((char *)&v115->mNumberBuffers + v28);
            *((_DWORD *)v33 + 2) = v32;
            *((_DWORD *)v33 + 3) = v25;
            *((_QWORD *)v33 + 2) = v31;
            ++v29;
            v28 += 16;
            if ((v30 & 0x20) != 0)
              goto LABEL_26;
          }
        }
        v34 = (AMCP::Log::Scope_Registry *)ExtAudioFileWriteAsync(*(ExtAudioFileRef *)(a1 + 48), v24, v115);
        v35 = (int)v34;
        if ((_DWORD)v34)
        {
          AMCP::Log::Scope_Registry::get(v34);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v92 = **(NSObject ***)buf;
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
          if (os_log_type_enabled(v92, OS_LOG_TYPE_ERROR))
          {
            v93 = pthread_self();
            v94 = pthread_mach_thread_np(v93);
            v95 = (_QWORD *)(a1 + 88);
            if (*(char *)(a1 + 111) < 0)
              v95 = (_QWORD *)*v95;
            *(_DWORD *)buf = 67110402;
            *(_DWORD *)&buf[4] = v94;
            v118.i16[0] = 2080;
            *(uint64_t *)((char *)v118.i64 + 2) = (uint64_t)"PCM_File_Writer.cpp";
            v118.i16[5] = 1024;
            v118.i32[3] = 170;
            *(_WORD *)v119 = 2080;
            *(_QWORD *)&v119[2] = "not (the_error == 0)";
            *(_WORD *)&v119[10] = 2080;
            *(_QWORD *)&v119[12] = v95;
            *(_WORD *)&v119[20] = 2048;
            *(_QWORD *)&v119[22] = v35;
            _os_log_error_impl(&dword_1B57BA000, v92, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s PCM_File_Writer::Write: couldn't write the data %s: %ld", buf, 0x36u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v104);
          v96 = __cxa_allocate_exception(0x40uLL);
          v97 = (_QWORD *)(a1 + 88);
          if (*(char *)(a1 + 111) < 0)
            v97 = (_QWORD *)*v97;
          caulk::make_string((caulk *)"PCM_File_Writer::Write: couldn't write the data %s: %ld", (uint64_t)&v105, v97, v35);
          std::logic_error::logic_error(&v103, &v105);
          v103.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
          std::logic_error::logic_error(&v109, &v103);
          v111 = 0;
          v112 = 0;
          v113 = 0;
          v114 = -1;
          v109.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
          v110 = &unk_1E69A1230;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v109);
          *(_QWORD *)&v119[8] = "void AMCP::DAL::PCM_File_Writer::write_silence_for_skipped_range(Sample_Time) const";
          *(_QWORD *)&v119[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_File_Writer.cpp";
          *(_DWORD *)&v119[24] = 170;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v101);
          *(std::logic_error *)&v107.__r_.__value_.__l.__data_ = v101;
          v106 = off_1E69A20A0;
          v107.__r_.__value_.__r.__words[2] = v102;
          v101.__vftable = 0;
          v101.__imp_.__imp_ = 0;
          v102 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v106);
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v96, (uint64_t)buf);
        }
        AMCP::Log::Scope_Registry::get(v34);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v36 = (std::__shared_weak_count *)v118.i64[0];
        v37 = **(NSObject ***)buf;
        if (v118.i64[0])
        {
          v38 = (unint64_t *)(v118.i64[0] + 8);
          do
            v39 = __ldaxr(v38);
          while (__stlxr(v39 - 1, v38));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
        if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
        {
          v42 = pthread_self();
          v43 = pthread_mach_thread_np(v42);
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = v43;
          v118.i16[0] = 2080;
          *(uint64_t *)((char *)v118.i64 + 2) = (uint64_t)"PCM_File_Writer.cpp";
          v118.i16[5] = 1024;
          v118.i32[3] = 171;
          *(_WORD *)v119 = 1024;
          *(_DWORD *)&v119[2] = v24;
          _os_log_debug_impl(&dword_1B57BA000, v37, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d write_silence_for_skipped_range: %ul", buf, 0x1Eu);
        }
        if (v108.__r_.__value_.__r.__words[0])
        {
          v108.__r_.__value_.__l.__size_ = v108.__r_.__value_.__r.__words[0];
          std::allocator_traits<caulk::rt_allocator<char>>::deallocate[abi:ne180100](v108.__r_.__value_.__l.__data_);
        }
        std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::~unique_ptr[abi:ne180100]((uint64_t *)&v115);
        goto LABEL_43;
      }
      v23 = 5;
    }
    v22 = (uint8_t *)(*(uint64_t (**)(void))(*(_QWORD *)v22 + 8 * v23))();
    goto LABEL_23;
  }
LABEL_45:
  if (*(_BYTE *)(a1 + 160))
  {
    v44 = *(_QWORD **)(a1 + 168);
    AMCP::DAL::DAL_Timed_Segment::translate_range((double **)&v115, *(const AMCP::DAL::DAL_Time_Range **)(a3 + 80), a3);
    v45 = v115;
    for (i = v116.__r_.__value_.__r.__words[0]; v45 != (const AudioBufferList *)i; v45 += 4)
    {
      std::string::basic_string[abi:ne180100]<0>(buf, "current sample");
      v47 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a2, buf);
      if (v118.i8[15] < 0)
        operator delete(*(void **)buf);
      if (v47)
      {
        v48 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v45->mBuffers[0].mData);
        v49 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)v45[2].mBuffers);
        v109 = *(std::logic_error *)&v45->mBuffers[0].mData;
        mData = v45[1].mBuffers[0].mData;
        v50 = *(std::__shared_weak_count **)&v45[2].mNumberBuffers;
        v110 = *(void **)&v45[1].mBuffers[0].mNumberChannels;
        v111 = mData;
        v112 = v50;
        if (v50)
        {
          p_shared_owners = (unint64_t *)&v50->__shared_owners_;
          do
            v53 = __ldxr(p_shared_owners);
          while (__stxr(v53 + 1, p_shared_owners));
        }
        host_time = AMCP::DAL::DAL_Time::get_host_time((AMCP::DAL::DAL_Time *)&v109);
        v56 = v44[4];
        v55 = v44[5];
        if (v56 >= v55)
        {
          v59 = v44[3];
          v60 = 0x8E38E38E38E38E39 * ((uint64_t)(v56 - v59) >> 3);
          v61 = v60 + 1;
          if (v60 + 1 > 0x38E38E38E38E38ELL)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          v62 = 0x8E38E38E38E38E39 * ((uint64_t)(v55 - v59) >> 3);
          if (2 * v62 > v61)
            v61 = 2 * v62;
          if (v62 >= 0x1C71C71C71C71C7)
            v63 = 0x38E38E38E38E38ELL;
          else
            v63 = v61;
          *(_QWORD *)&v119[8] = v44 + 5;
          if (v63)
            v63 = (uint64_t)std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<AMCP::DAL::Timestamp_Writer::Timestamp_Data>>((caulk::rt_safe_memory_resource *)v63);
          else
            v64 = 0;
          *(_QWORD *)buf = v63;
          v118.i64[0] = v63 + 72 * v60;
          v118.i64[1] = v118.i64[0];
          *(_QWORD *)v119 = v63 + 72 * v64;
          AMCP::DAL::Timestamp_Writer::Timestamp_Data::Timestamp_Data(v118.i64[0], host_time, a2, v48, v49);
          v65 = v44[3];
          v66 = v44[4];
          v67 = v118.i64[1];
          v68 = v118.i64[0];
          if (v66 == v65)
          {
            v72 = vdupq_n_s64(v66);
          }
          else
          {
            do
            {
              *(_OWORD *)(v68 - 72) = *(_OWORD *)(v66 - 72);
              v69 = *(_OWORD *)(v66 - 56);
              v70 = *(_OWORD *)(v66 - 40);
              v71 = *(_OWORD *)(v66 - 24);
              *(_QWORD *)(v68 - 8) = *(_QWORD *)(v66 - 8);
              *(_OWORD *)(v68 - 24) = v71;
              *(_OWORD *)(v68 - 40) = v70;
              *(_OWORD *)(v68 - 56) = v69;
              v68 -= 72;
              v66 -= 72;
            }
            while (v66 != v65);
            v72 = *(int64x2_t *)(v44 + 3);
          }
          v57 = v67 + 72;
          v44[3] = v68;
          v44[4] = v67 + 72;
          v118 = v72;
          v73 = v44[5];
          v44[5] = *(_QWORD *)v119;
          *(_QWORD *)v119 = v73;
          *(_QWORD *)buf = v72.i64[0];
          std::__split_buffer<AMCP::DAL::Timestamp_Writer::Timestamp_Data,caulk::rt_allocator<AMCP::DAL::Timestamp_Writer::Timestamp_Data> &>::~__split_buffer((uint64_t)buf);
        }
        else
        {
          AMCP::DAL::Timestamp_Writer::Timestamp_Data::Timestamp_Data(v44[4], host_time, a2, v48, v49);
          v57 = v56 + 72;
        }
        v44[4] = v57;
        v74 = v112;
        if (v112)
        {
          v75 = (unint64_t *)&v112->__shared_owners_;
          do
            v76 = __ldaxr(v75);
          while (__stlxr(v76 - 1, v75));
          if (!v76)
          {
            ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
            std::__shared_weak_count::__release_weak(v74);
          }
        }
      }
      else
      {
        v58 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v45->mBuffers[0].mData);
        *(_QWORD *)(v44[4] - 40) += vcvtmd_s64_f64(AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)v45[2].mBuffers)- v58);
      }
    }
    *(_QWORD *)buf = &v115;
    std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)buf);
  }
  v109.__vftable = (std::logic_error_vtbl *)&v98;
  std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)&v109);
  v109.__vftable = (std::logic_error_vtbl *)v100;
  return std::vector<std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>,caulk::rt_allocator<std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)&v109);
}

void sub_1B5CAD728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,void *__p,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,char *a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  uint64_t v51;

  if (a44)
  {
    a45 = (uint64_t)a44;
    std::allocator_traits<caulk::rt_allocator<char>>::deallocate[abi:ne180100](a44);
  }
  std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::~unique_ptr[abi:ne180100]((uint64_t *)(v51 - 248));
  a48 = &a15;
  std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)&a48);
  a48 = &a18;
  std::vector<std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>,caulk::rt_allocator<std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)&a48);
  _Unwind_Resume(a1);
}

void AMCP::DAL::PCM_File_Writer::read_data(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[80] = 0;
}

uint64_t *AMCP::DAL::PCM_File_Writer::close_file(AMCP::DAL::PCM_File_Writer *this)
{
  uint64_t *result;

  result = (uint64_t *)*((_QWORD *)this + 6);
  if (result)
    result = (uint64_t *)ExtAudioFileDispose((ExtAudioFileRef)result);
  if (*((_BYTE *)this + 160))
    result = std::unique_ptr<AMCP::DAL::Timestamp_Writer>::reset[abi:ne180100]((uint64_t *)this + 21, 0);
  *((_QWORD *)this + 6) = 0;
  return result;
}

uint64_t *std::unique_ptr<AMCP::DAL::Timestamp_Writer>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  caulk::rt_safe_memory_resource *v3;
  caulk::rt_safe_memory_resource *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  int64_t v7;
  caulk::rt_safe_memory_resource *v8;
  uint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  size_t v14;
  const void *v15;
  std::__shared_weak_count_vtbl *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned __int8 v21;
  NSObject *v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30[4];

  v30[3] = *MEMORY[0x1E0C80C00];
  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *(caulk::rt_safe_memory_resource **)(v2 + 24);
    v4 = *(caulk::rt_safe_memory_resource **)(v2 + 32);
    if (v3 == v4)
    {
LABEL_40:
      if (v3)
      {
        *(_QWORD *)(v2 + 32) = v3;
        std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Timestamp_Writer::Timestamp_Data>>::deallocate[abi:ne180100](v3, 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(v2 + 40) - (_QWORD)v3) >> 3));
      }
      if (*(char *)(v2 + 23) < 0)
        operator delete(*(void **)v2);
LABEL_48:
      JUMPOUT(0x1B5E50688);
    }
    v5 = (std::__shared_weak_count *)operator new(0x30uLL);
    *(_OWORD *)&v5->__shared_owners_ = 0u;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69833F0;
    v5[1].__vftable = 0;
    *(_OWORD *)&v5[1].__shared_owners_ = 0u;
    v7 = v4 - v3;
    if (0x8E38E38E38E38E39 * (v7 >> 3) >= 0x38E38E38E38E38FLL)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v8 = std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<AMCP::DAL::Timestamp_Writer::Timestamp_Data>>((caulk::rt_safe_memory_resource *)(0x8E38E38E38E38E39 * (v7 >> 3)));
    v5[1].__vftable = (std::__shared_weak_count_vtbl *)v8;
    v5[1].__shared_owners_ = (uint64_t)v8;
    v5[1].__shared_weak_owners_ = (uint64_t)v8 + 72 * v9;
    memmove(v8, v3, v7);
    v5[1].__shared_owners_ = (uint64_t)v8 + 8 * (v7 >> 3);
    v10 = (std::__shared_weak_count_vtbl *)*MEMORY[0x1E0DDB4F0];
    if (!*MEMORY[0x1E0DDB4F0])
    {
      __break(1u);
      goto LABEL_48;
    }
    v11 = (std::__shared_weak_count *)operator new(0x38uLL);
    v12 = v11;
    v11->__shared_owners_ = 0;
    v13 = (unint64_t *)&v11->__shared_owners_;
    v11->__shared_weak_owners_ = 0;
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6983440;
    v11[2].__vftable = v10;
    if (*(char *)(v2 + 23) < 0)
    {
      v14 = *(_QWORD *)(v2 + 8);
      if (v14 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      v15 = *(const void **)v2;
    }
    else
    {
      v14 = *(unsigned __int8 *)(v2 + 23);
      v15 = (const void *)v2;
    }
    if (v14 >= 0x17)
    {
      v17 = (v14 & 0x7FFFFFFFFFFFFFF8) + 8;
      if ((v14 | 7) != 0x17)
        v17 = v14 | 7;
      v18 = v17 + 1;
      v16 = (std::__shared_weak_count_vtbl *)(*((uint64_t (**)(std::__shared_weak_count_vtbl *, uint64_t, uint64_t))v10->~__shared_weak_count
                                              + 2))(v10, v17 + 1, 1);
      v12[1].__shared_owners_ = v14;
      v12[1].__shared_weak_owners_ = v18 | 0x8000000000000000;
      v12[1].__vftable = v16;
    }
    else
    {
      HIBYTE(v11[1].__shared_weak_owners_) = v14;
      v16 = (std::__shared_weak_count_vtbl *)&v11[1];
      if (!v14)
      {
LABEL_17:
        *((_BYTE *)&v16->~__shared_weak_count + v14) = 0;
        AMCP::DAL::get_timestamp_writer_queue((AMCP::DAL *)v11);
        do
          v19 = __ldxr(v13);
        while (__stxr(v19 + 1, v13));
        do
          v20 = __ldxr(p_shared_owners);
        while (__stxr(v20 + 1, p_shared_owners));
        v21 = atomic_load((unsigned __int8 *)&unk_1EF1305F8);
        if ((v21 & 1) != 0)
          atomic_store(1u, byte_1EF1305F9);
        v22 = AMCP::DAL::get_timestamp_writer_queue(void)::s_timestamp_writer_queue[0];
        v23 = (_QWORD *)operator new();
        *v23 = v12 + 1;
        v23[1] = v12;
        do
          v24 = __ldxr(v13);
        while (__stxr(v24 + 1, v13));
        v23[2] = v5 + 1;
        v23[3] = v5;
        do
          v25 = __ldxr(p_shared_owners);
        while (__stxr(v25 + 1, p_shared_owners));
        v30[0] = 0;
        dispatch_async_f(v22, v23, (dispatch_function_t)applesauce::dispatch::v1::async<AMCP::DAL::Timestamp_Writer::~Timestamp_Writer()::$_0 &>(dispatch_queue_s *,AMCP::DAL::Timestamp_Writer::~Timestamp_Writer()::$_0 &)::{lambda(void *)#1}::__invoke);
        std::unique_ptr<AMCP::DAL::Timestamp_Writer::~Timestamp_Writer()::$_0,std::default_delete<AMCP::DAL::Timestamp_Writer::~Timestamp_Writer()::$_0>>::~unique_ptr[abi:ne180100](v30);
        do
          v26 = __ldaxr(p_shared_owners);
        while (__stlxr(v26 - 1, p_shared_owners));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        do
          v27 = __ldaxr(v13);
        while (__stlxr(v27 - 1, v13));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
        do
          v28 = __ldaxr(v13);
        while (__stlxr(v28 - 1, v13));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
        do
          v29 = __ldaxr(p_shared_owners);
        while (__stlxr(v29 - 1, p_shared_owners));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 = *(caulk::rt_safe_memory_resource **)(v2 + 24);
        goto LABEL_40;
      }
    }
    v11 = (std::__shared_weak_count *)memmove(v16, v15, v14);
    goto LABEL_17;
  }
  return result;
}

void sub_1B5CADFC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, NSObject **buf, __int128 a12)
{
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  void *v16;
  unint64_t v17;
  AMCP::Log::Scope_Registry *v18;
  std::__shared_weak_count *v19;
  NSObject *v20;
  unint64_t *v21;
  unint64_t v22;
  _opaque_pthread_t *v23;
  mach_port_t v24;

  if (a2)
  {
    std::__shared_weak_count::~__shared_weak_count(v13);
    operator delete(v16);
    do
      v17 = __ldaxr(v14);
    while (__stlxr(v17 - 1, v14));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    v18 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
    AMCP::Log::Scope_Registry::get(v18);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    v19 = (std::__shared_weak_count *)a12;
    v20 = *buf;
    if ((_QWORD)a12)
    {
      v21 = (unint64_t *)(a12 + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      v23 = pthread_self();
      v24 = pthread_mach_thread_np(v23);
      LODWORD(buf) = 67109634;
      HIDWORD(buf) = v24;
      LOWORD(a12) = 2080;
      *(_QWORD *)((char *)&a12 + 2) = "Timestamp_Writer.cpp";
      WORD5(a12) = 1024;
      HIDWORD(a12) = 96;
      _os_log_error_impl(&dword_1B57BA000, v20, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Failure writing timestamp file", (uint8_t *)&buf, 0x18u);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B5CADF20);
  }
  _Unwind_Resume(exception_object);
}

void HALS_PlugInEngine::~HALS_PlugInEngine(HALS_PlugInEngine *this)
{
  HALS_IOEngine2::~HALS_IOEngine2(this);
  JUMPOUT(0x1B5E50688);
}

uint64_t HALS_PlugInEngine::SupportsIsolatedIO(HALS_PlugInEngine *this)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;

  v2 = *((_QWORD *)this + 139);
  v3 = *(_QWORD *)(v2 + 400);
  v4 = *(std::__shared_weak_count **)(v2 + 408);
  v13 = v3;
  v14 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
  if (v4)
  {
    v8 = (unint64_t *)&v4->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (g_static_start_options == 1)
  {
    LODWORD(v14) = 0;
    v13 = *(_QWORD *)"bsvdbolg";
    if ((*(unsigned int (**)(_QWORD, _QWORD, uint64_t *, _QWORD))(**((_QWORD **)this + 88) + 88))(*((_QWORD *)this + 88), *(unsigned int *)(*((_QWORD *)this + 88) + 16), &v13, 0))
    {
      v10 = (unsigned int *)*((_QWORD *)this + 88);
      v11 = v10[4];
      v15 = 0;
      (*(void (**)(unsigned int *, uint64_t, uint64_t *, uint64_t, uint64_t *, char *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v10 + 112))(v10, v11, &v13, 4, &v15, (char *)&v15 + 4, 0, 0, 0);
      if ((v15 & 0x100000000000) != 0)
        return 0;
      else
        return v7;
    }
  }
  return v7;
}

void sub_1B5CAE44C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t HALS_PlugInEngine::GetZeroTimeStamp(HALS_PlugInEngine *this, uint64_t a2, double *a3, unint64_t *a4, unint64_t *a5)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  v6 = *((_QWORD *)this + 139);
  v7 = *(_QWORD *)(v6 + 400);
  v8 = *(std::__shared_weak_count **)(v6 + 408);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, double *, unint64_t *, unint64_t *))(*(_QWORD *)v7 + 208))(v7, *((unsigned int *)this + 280), a2, a3, a4, a5);
  if (v8)
  {
    v12 = (unint64_t *)&v8->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return v11;
}

void sub_1B5CAE504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void HALS_PlugInEngine::_RegisterIOContext(HALS_PlugInEngine *this, HALS_IOContext *a2)
{
  uint64_t v4;
  HALS_ObjectMap *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  HALS_Object *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  HALS_IOEngine2::_RegisterIOContext((uint64_t)this, a2);
  v14 = 0;
  v15 = 0;
  v16 = 0;
  LODWORD(v14) = *((_DWORD *)a2 + 4);
  LOBYTE(v15) = 1;
  v4 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)**((unsigned int **)a2 + 8));
  v5 = (HALS_ObjectMap *)v4;
  if (v4)
  {
    HIDWORD(v14) = *(_DWORD *)(v4 + 232);
    LOBYTE(v15) = *(_BYTE *)(v4 + 258) ^ 1;
    v16 = *(_QWORD *)(v4 + 240);
  }
  v6 = *((_QWORD *)this + 139);
  v7 = *(_QWORD *)(v6 + 400);
  v8 = *(std::__shared_weak_count **)(v6 + 408);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t *))(*(_QWORD *)v7 + 80))(v7, *((unsigned int *)this + 280), &v14);
  if (v8)
  {
    v12 = (unint64_t *)&v8->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  HALS_ObjectMap::ReleaseObject(v5, v11);
}

void sub_1B5CAE60C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  HALS_ObjectMap *v2;
  HALS_Object *v4;
  va_list va;

  va_start(va, a2);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  HALS_ObjectMap::ReleaseObject(v2, v4);
  _Unwind_Resume(a1);
}

void HALS_PlugInEngine::_UnregisterIOContext(HALS_PlugInEngine *this, HALS_IOContext *a2)
{
  uint64_t v4;
  HALS_ObjectMap *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  HALS_Object *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  HALS_IOEngine2::_UnregisterIOContext((uint64_t)this, a2);
  v14 = 0;
  v15 = 0;
  v16 = 0;
  LODWORD(v14) = *((_DWORD *)a2 + 4);
  LOBYTE(v15) = 1;
  v4 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)**((unsigned int **)a2 + 8));
  v5 = (HALS_ObjectMap *)v4;
  if (v4)
  {
    HIDWORD(v14) = *(_DWORD *)(v4 + 232);
    LOBYTE(v15) = *(_BYTE *)(v4 + 258) ^ 1;
    v16 = *(_QWORD *)(v4 + 240);
  }
  v6 = *((_QWORD *)this + 139);
  v7 = *(_QWORD *)(v6 + 400);
  v8 = *(std::__shared_weak_count **)(v6 + 408);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t *))(*(_QWORD *)v7 + 88))(v7, *((unsigned int *)this + 280), &v14);
  if (v8)
  {
    v12 = (unint64_t *)&v8->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  HALS_ObjectMap::ReleaseObject(v5, v11);
}

void sub_1B5CAE720(_Unwind_Exception *a1, uint64_t a2, ...)
{
  HALS_ObjectMap *v2;
  HALS_Object *v4;
  va_list va;

  va_start(va, a2);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  HALS_ObjectMap::ReleaseObject(v2, v4);
  _Unwind_Resume(a1);
}

uint64_t HALS_PlugInEngine::_TellHardwareToStart(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  if (!a4)
    return 0;
  v5 = *(_QWORD *)(a1 + 1112);
  v6 = *(_QWORD *)(v5 + 400);
  v7 = *(std::__shared_weak_count **)(v5 + 408);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v6 + 192))(v6, *(unsigned int *)(a1 + 1120), *(unsigned int *)(a2 + 16), 0);
  if (v7)
  {
    v11 = (unint64_t *)&v7->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v10;
}

void sub_1B5CAE7EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void HALS_PlugInEngine::_TellHardwareToStop(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  if (a4)
  {
    v5 = *(_QWORD *)(a1 + 1112);
    v6 = *(_QWORD *)(v5 + 400);
    v7 = *(std::__shared_weak_count **)(v5 + 408);
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v6 + 200))(v6, *(unsigned int *)(a1 + 1120), *(unsigned int *)(a2 + 16), 0);
    if (v7)
    {
      v10 = (unint64_t *)&v7->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1B5CAE89C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t HALS_PlugInEngine::_BeginIOThread(HALS_PlugInEngine *this, uint64_t a2, const HALS_IOEngineInfo *a3)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  HALS_IOEngine2::_BeginIOThread(this, a2, a3);
  if (*((_BYTE *)this + 1124))
  {
    v6 = *((_QWORD *)this + 139);
    v7 = *(_QWORD *)(v6 + 400);
    v8 = *(std::__shared_weak_count **)(v6 + 408);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, _QWORD, uint64_t, char *))(*(_QWORD *)v7 + 224))(v7, *((unsigned int *)this + 280), a2, (char *)a3 + 432);
    if (v8)
    {
      v11 = (unint64_t *)&v8->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  return 0;
}

void sub_1B5CAE968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t HALS_PlugInEngine::_EndIOThread(HALS_PlugInEngine *this, uint64_t a2, const HALS_IOEngineInfo *a3)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;

  v6 = *((_DWORD *)this + 198);
  if (v6)
  {
    v7 = v6 - 1;
    *((_DWORD *)this + 198) = v7;
    if (!v7)
      (*(void (**)(HALS_PlugInEngine *, uint64_t, const HALS_IOEngineInfo *))(*(_QWORD *)this + 1032))(this, a2, a3);
  }
  if (*((_BYTE *)this + 1124))
  {
    v8 = *((_QWORD *)this + 139);
    v9 = *(_QWORD *)(v8 + 400);
    v10 = *(std::__shared_weak_count **)(v8 + 408);
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, _QWORD, uint64_t, char *))(*(_QWORD *)v9 + 232))(v9, *((unsigned int *)this + 280), a2, (char *)a3 + 432);
    if (v10)
    {
      v13 = (unint64_t *)&v10->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  return 0;
}

void sub_1B5CAEA58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t HALS_PlugInEngine::_FirstIOThreadStarted(HALS_PlugInEngine *this, uint64_t a2, const HALS_IOEngineInfo *a3)
{
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t v74;

  v5 = *((_QWORD *)this + 139);
  v6 = *(_QWORD *)(v5 + 400);
  v7 = *(std::__shared_weak_count **)(v5 + 408);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, char *))(*(_QWORD *)v6 + 216))(v6, *((unsigned int *)this + 280), a2, (char *)this + 1124);
  if (v7)
  {
    v10 = (unint64_t *)&v7->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v12 = *((_QWORD *)this + 139);
  v13 = *(_QWORD *)(v12 + 400);
  v14 = *(std::__shared_weak_count **)(v12 + 408);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, char *))(*(_QWORD *)v13 + 240))(v13, *((unsigned int *)this + 280), a2, (char *)this + 1125);
  if (v14)
  {
    v17 = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v19 = *((_QWORD *)this + 139);
  v20 = *(_QWORD *)(v19 + 400);
  v21 = *(std::__shared_weak_count **)(v19 + 408);
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, char *))(*(_QWORD *)v20 + 264))(v20, *((unsigned int *)this + 280), a2, (char *)this + 1126);
  if (v21)
  {
    v24 = (unint64_t *)&v21->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v26 = *((_QWORD *)this + 139);
  v27 = *(_QWORD *)(v26 + 400);
  v28 = *(std::__shared_weak_count **)(v26 + 408);
  if (v28)
  {
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, char *, char *))(*(_QWORD *)v27 + 320))(v27, *((unsigned int *)this + 280), a2, (char *)this + 1127, (char *)this + 1128);
  if (v28)
  {
    v31 = (unint64_t *)&v28->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v33 = *((_QWORD *)this + 139);
  v34 = *(_QWORD *)(v33 + 400);
  v35 = *(std::__shared_weak_count **)(v33 + 408);
  if (v35)
  {
    v36 = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, char *, char *))(*(_QWORD *)v34 + 352))(v34, *((unsigned int *)this + 280), a2, (char *)this + 1129, (char *)this + 1130);
  if (v35)
  {
    v38 = (unint64_t *)&v35->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v40 = *((_QWORD *)this + 139);
  v41 = *(_QWORD *)(v40 + 400);
  v42 = *(std::__shared_weak_count **)(v40 + 408);
  if (v42)
  {
    v43 = (unint64_t *)&v42->__shared_owners_;
    do
      v44 = __ldxr(v43);
    while (__stxr(v44 + 1, v43));
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, char *, char *))(*(_QWORD *)v41 + 384))(v41, *((unsigned int *)this + 280), a2, (char *)this + 1131, (char *)this + 1132);
  if (v42)
  {
    v45 = (unint64_t *)&v42->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v47 = *((_QWORD *)this + 139);
  v48 = *(_QWORD *)(v47 + 400);
  v49 = *(std::__shared_weak_count **)(v47 + 408);
  if (v49)
  {
    v50 = (unint64_t *)&v49->__shared_owners_;
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 1, v50));
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, char *))(*(_QWORD *)v48 + 416))(v48, *((unsigned int *)this + 280), a2, (char *)this + 1133);
  if (v49)
  {
    v52 = (unint64_t *)&v49->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  v54 = *((_QWORD *)this + 139);
  v55 = *(_QWORD *)(v54 + 400);
  v56 = *(std::__shared_weak_count **)(v54 + 408);
  if (v56)
  {
    v57 = (unint64_t *)&v56->__shared_owners_;
    do
      v58 = __ldxr(v57);
    while (__stxr(v58 + 1, v57));
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, char *, char *))(*(_QWORD *)v55 + 448))(v55, *((unsigned int *)this + 280), a2, (char *)this + 1134, (char *)this + 1135);
  if (v56)
  {
    v59 = (unint64_t *)&v56->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v61 = *((_QWORD *)this + 139);
  v62 = *(_QWORD *)(v61 + 400);
  v63 = *(std::__shared_weak_count **)(v61 + 408);
  if (v63)
  {
    v64 = (unint64_t *)&v63->__shared_owners_;
    do
      v65 = __ldxr(v64);
    while (__stxr(v65 + 1, v64));
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, char *, char *))(*(_QWORD *)v62 + 480))(v62, *((unsigned int *)this + 280), a2, (char *)this + 1136, (char *)this + 1137);
  if (v63)
  {
    v66 = (unint64_t *)&v63->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  v68 = *((_QWORD *)this + 139);
  v69 = *(_QWORD *)(v68 + 400);
  v70 = *(std::__shared_weak_count **)(v68 + 408);
  if (v70)
  {
    v71 = (unint64_t *)&v70->__shared_owners_;
    do
      v72 = __ldxr(v71);
    while (__stxr(v72 + 1, v71));
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, char *))(*(_QWORD *)v69 + 512))(v69, *((unsigned int *)this + 280), a2, (char *)this + 1138);
  if (v70)
  {
    v73 = (unint64_t *)&v70->__shared_owners_;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  return 0;
}

void sub_1B5CAEF14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t HALS_PlugInEngine::_BeginIOCycle(HALS_PlugInEngine *this, uint64_t a2, const HALS_IOEngineInfo *a3)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  HALS_IOEngine2::_BeginIOCycle(this, a2, a3);
  if (*((_BYTE *)this + 1125))
  {
    v6 = *((_QWORD *)this + 139);
    v7 = *(_QWORD *)(v6 + 400);
    v8 = *(std::__shared_weak_count **)(v6 + 408);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, _QWORD, uint64_t, char *))(*(_QWORD *)v7 + 248))(v7, *((unsigned int *)this + 280), a2, (char *)a3 + 432);
    if (v8)
    {
      v11 = (unint64_t *)&v8->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  return 0;
}

void sub_1B5CAF000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t HALS_PlugInEngine::_EndIOCycle(HALS_PlugInEngine *this, const BOOL *a2, const HALS_IOEngineInfo *a3)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  HALS_IOEngine2::_EndIOCycle(this, a2, a3);
  if (*((_BYTE *)this + 1125))
  {
    v6 = *((_QWORD *)this + 139);
    v7 = *(_QWORD *)(v6 + 400);
    v8 = *(std::__shared_weak_count **)(v6 + 408);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, _QWORD, const BOOL *, char *))(*(_QWORD *)v7 + 256))(v7, *((unsigned int *)this + 280), a2, (char *)a3 + 432);
    if (v8)
    {
      v11 = (unint64_t *)&v8->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  return 0;
}

void sub_1B5CAF0C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t HALS_PlugInEngine::_BeginReading(HALS_PlugInEngine *this, uint64_t a2, uint64_t a3, const HALS_IOEngineInfo *a4)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (*((_BYTE *)this + 1126) || *((_BYTE *)this + 1127) || *((_BYTE *)this + 1129))
  {
    v4 = *((_QWORD *)this + 139);
    v5 = *(_QWORD *)(v4 + 400);
    v6 = *(std::__shared_weak_count **)(v4 + 408);
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, char *))(*(_QWORD *)v5 + 272))(v5, *((unsigned int *)this + 280), a2, a3, (char *)a4 + 432);
    if (v6)
    {
      v9 = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  return 0;
}

void sub_1B5CAF194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t HALS_PlugInEngine::_ReadFromStream(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, HALS_IOClock **a5, uint64_t a6)
{
  void *v7;

  if (*(_BYTE *)(a1 + 1126) || *(_BYTE *)(a1 + 1127) || *(_BYTE *)(a1 + 1129))
  {
    HALS_IOEngine2::_ReadFromStream((_QWORD *)a1, a2, a3, a4, a5, a6);
  }
  else
  {
    if (*(_QWORD *)a6)
      v7 = (void *)(*(_QWORD *)a6 + *(unsigned int *)(a6 + 8));
    else
      v7 = 0;
    bzero(v7, *(unsigned int *)(a6 + 12));
  }
  return 0;
}

uint64_t HALS_PlugInEngine::_EndReading(HALS_PlugInEngine *this, uint64_t a2, uint64_t a3, const HALS_IOEngineInfo *a4)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (*((_BYTE *)this + 1126) || *((_BYTE *)this + 1127) || *((_BYTE *)this + 1129))
  {
    v4 = *((_QWORD *)this + 139);
    v5 = *(_QWORD *)(v4 + 400);
    v6 = *(std::__shared_weak_count **)(v4 + 408);
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, char *))(*(_QWORD *)v5 + 312))(v5, *((unsigned int *)this + 280), a2, a3, (char *)a4 + 432);
    if (v6)
    {
      v9 = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  return 0;
}

void sub_1B5CAF2AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void HALS_PlugInEngine::_ReadFromStream_Read(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  if (*(_BYTE *)(a1 + 1126))
  {
    v7 = *(_QWORD *)(a1 + 1112);
    v8 = *(_QWORD *)(v7 + 400);
    v9 = *(std::__shared_weak_count **)(v7 + 408);
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 280))(v8, *(unsigned int *)(a1 + 1120), *(unsigned int *)(a3 + 16), a2, a5, a4, a6);
    if (v9)
    {
      v12 = (unint64_t *)&v9->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_1B5CAF364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void HALS_PlugInEngine::_IsolatedReadFromStream_Read(HALS_PlugInEngine *this, HALS_IOEngine2_StreamInfo *a2, const AudioServerPlugInIOCycleInfo *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  if (*((_BYTE *)this + 1126))
  {
    v6 = *((_QWORD *)this + 139);
    v7 = *(_QWORD *)(v6 + 400);
    v8 = *(std::__shared_weak_count **)(v6 + 408);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t, const AudioServerPlugInIOCycleInfo *, uint64_t))(*(_QWORD *)v7 + 288))(v7, *((unsigned int *)this + 280), *((unsigned int *)a2 + 4), a4, a3, a5);
    if (v8)
    {
      v11 = (unint64_t *)&v8->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void sub_1B5CAF41C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void HALS_PlugInEngine::_EngineSetupForIsolatedIO(HALS_PlugInEngine *this, HALS_IOEngine2_StreamInfo *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v5 = *((_QWORD *)this + 139);
  v6 = *(_QWORD *)(v5 + 400);
  v7 = *(std::__shared_weak_count **)(v5 + 408);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v6 + 296))(v6, *((unsigned int *)this + 280), *((unsigned int *)a2 + 4), a3, a4);
  if (v7)
  {
    v10 = (unint64_t *)&v7->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1B5CAF4D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void HALS_PlugInEngine::_EngineTeardownForIsolatedIO(HALS_PlugInEngine *this, HALS_IOEngine2_StreamInfo *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v4 = *((_QWORD *)this + 139);
  v5 = *(_QWORD *)(v4 + 400);
  v6 = *(std::__shared_weak_count **)(v4 + 408);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v5 + 304))(v5, *((unsigned int *)this + 280), *((unsigned int *)a2 + 4), a3);
  if (v6)
  {
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1B5CAF590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void HALS_PlugInEngine::_ReadFromStream_ConvertToTempBuffer(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  size_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  std::__shared_weak_count *v64;

  if (!*(_BYTE *)(a1 + 1127))
  {
    HALS_IOEngine2::_ReadFromStream_ConvertToTempBuffer(a1, a2, a3, (uint64_t)a4, (uint64_t *)a5, a6, a7, a8);
    return;
  }
  if (*(_QWORD *)a8)
    v13 = (char *)(*(_QWORD *)a8 + *(unsigned int *)(a8 + 8));
  else
    v13 = 0;
  if (*(_QWORD *)a5)
    v14 = (void *)(*(_QWORD *)a5 + *(unsigned int *)(a5 + 8));
  else
    v14 = 0;
  v15 = *(unsigned int *)(a5 + 16);
  if (*(_QWORD *)a6)
    v16 = (void *)(*(_QWORD *)a6 + *(unsigned int *)(a6 + 8));
  else
    v16 = 0;
  v17 = *(unsigned int *)(a6 + 16);
  if (*(_BYTE *)(a1 + 1128))
  {
    v18 = *(_QWORD *)(a1 + 1112);
    v19 = *(_QWORD *)(v18 + 400);
    v20 = *(std::__shared_weak_count **)(v18 + 408);
    v63 = v19;
    v64 = v20;
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldxr(p_shared_owners);
      while (__stxr(v22 + 1, p_shared_owners));
    }
    v23 = *(unsigned int *)(a1 + 1120);
    v24 = *(unsigned int *)(a3 + 16);
    v49 = 0uLL;
    *(_QWORD *)&v50 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int128 *, uint64_t, __int128 *))(*(_QWORD *)v19 + 336))(v19, v23, v24, a2, a7, a4, a8, &v49);
    if (!v20)
      goto LABEL_19;
    v25 = (unint64_t *)&v20->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
      if (v14)
      {
LABEL_20:
        v27 = (*(_DWORD *)(a3 + 64) * v15);
        memcpy(v14, v13, v27);
        if (!v16)
          return;
LABEL_43:
        memcpy(v16, &v13[v27], (*(_DWORD *)(a3 + 64) * v17));
        return;
      }
    }
    else
    {
LABEL_19:
      if (v14)
        goto LABEL_20;
    }
    v27 = 0;
    if (!v16)
      return;
    goto LABEL_43;
  }
  v28 = a4[11];
  v59 = a4[10];
  v60 = v28;
  v29 = a4[13];
  v61 = a4[12];
  v62 = v29;
  v30 = a4[7];
  v55 = a4[6];
  v56 = v30;
  v31 = a4[9];
  v57 = a4[8];
  v58 = v31;
  v32 = a4[3];
  v51 = a4[2];
  v52 = v32;
  v33 = a4[5];
  v53 = a4[4];
  v54 = v33;
  v34 = a4[1];
  v49 = *a4;
  v50 = v34;
  if (v14)
  {
    v35 = *(_QWORD *)(a1 + 1112);
    v36 = *(_QWORD *)(v35 + 400);
    v37 = *(std::__shared_weak_count **)(v35 + 408);
    v63 = v36;
    v64 = v37;
    if (v37)
    {
      v38 = (unint64_t *)&v37->__shared_owners_;
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
    }
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v36 + 336))(v36, *(unsigned int *)(a1 + 1120), *(unsigned int *)(a3 + 16), a2, v15, &v49, a5, a8);
    if (v37)
    {
      v40 = (unint64_t *)&v37->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
  }
  if (v16)
  {
    *(double *)&v54 = *(double *)&v54 + (double)v15;
    v42 = *(_QWORD *)(a1 + 1112);
    v43 = *(_QWORD *)(v42 + 400);
    v44 = *(std::__shared_weak_count **)(v42 + 408);
    v63 = v43;
    v64 = v44;
    if (v44)
    {
      v45 = (unint64_t *)&v44->__shared_owners_;
      do
        v46 = __ldxr(v45);
      while (__stxr(v46 + 1, v45));
    }
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v43 + 336))(v43, *(unsigned int *)(a1 + 1120), *(unsigned int *)(a3 + 16), a2, v17, &v49, a6, a8);
    if (v44)
    {
      v47 = (unint64_t *)&v44->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
  }
}

void sub_1B5CAF8A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v1 - 104);
  _Unwind_Resume(a1);
}

void HALS_PlugInEngine::_ReadFromStream_Process(HALS_PlugInEngine *this, uint64_t a2, HALS_IOEngine2_StreamInfo *a3, const AudioServerPlugInIOCycleInfo *a4, unsigned int a5)
{
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  const void *v41;
  size_t v42;
  uint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  size_t __n;
  size_t v58;
  const void *v59;
  __int128 v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  _OWORD v71[5];
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;

  if (*((_BYTE *)this + 1129))
  {
    v8 = *(_OWORD *)&a4->mOutputTime.mRateScalar;
    v9 = *(_OWORD *)&a4->mOutputTime.mSMPTETime.mHours;
    v10 = *(_OWORD *)&a4->mMainHostTicksPerFrame;
    v78 = *(_OWORD *)&a4->mOutputTime.mSMPTETime.mSubframes;
    v79 = v9;
    v80 = v10;
    v11 = *(_OWORD *)&a4->mInputTime.mRateScalar;
    v12 = *(_OWORD *)&a4->mInputTime.mSMPTETime.mHours;
    v13 = *(_OWORD *)&a4->mOutputTime.mSampleTime;
    v74 = *(_OWORD *)&a4->mInputTime.mSMPTETime.mSubframes;
    v75 = v12;
    v76 = v13;
    v77 = v8;
    v14 = *(_OWORD *)&a4->mCurrentTime.mRateScalar;
    v15 = *(_OWORD *)&a4->mCurrentTime.mSMPTETime.mHours;
    v16 = *(_OWORD *)&a4->mInputTime.mSampleTime;
    v71[3] = *(_OWORD *)&a4->mCurrentTime.mSMPTETime.mSubframes;
    v71[4] = v15;
    v72 = v16;
    v73 = v11;
    v17 = *(_OWORD *)&a4->mCurrentTime.mSampleTime;
    v71[0] = *(_OWORD *)&a4->mIOCycleCounter;
    v71[1] = v17;
    v71[2] = v14;
    HALS_IOEngine2_StreamInfo::GetPointersForMixBuffer((uint64_t)&v63, (uint64_t)a3, (unint64_t)*(double *)&v16, a5);
    v18 = v66;
    if (v63)
      v19 = (void *)(v63 + v64);
    else
      v19 = 0;
    v20 = v70;
    if (v67)
      v21 = (void *)(v67 + v68);
    else
      v21 = 0;
    if (*((_BYTE *)this + 1130))
    {
      if (!v19)
        goto LABEL_17;
      v22 = *((_QWORD *)this + 139);
      v23 = *(_QWORD *)(v22 + 400);
      v24 = *(std::__shared_weak_count **)(v22 + 408);
      v61 = v23;
      v62 = v24;
      if (v24)
      {
        p_shared_owners = (unint64_t *)&v24->__shared_owners_;
        do
          v26 = __ldxr(p_shared_owners);
        while (__stxr(v26 + 1, p_shared_owners));
      }
      v27 = *((unsigned int *)this + 280);
      v28 = *((unsigned int *)a3 + 4);
      v59 = 0;
      v60 = 0uLL;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _OWORD *, uint64_t *, const void **))(*(_QWORD *)v23 + 368))(v23, v27, v28, a2, v18, v71, &v63, &v59);
      if (!v24)
        goto LABEL_17;
      v29 = (unint64_t *)&v24->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
        if (!v21)
          return;
      }
      else
      {
LABEL_17:
        if (!v21)
          return;
      }
      *(double *)&v72 = *(double *)&v72 + (double)v18;
      v31 = *((_QWORD *)this + 139);
      v32 = *(_QWORD *)(v31 + 400);
      v33 = *(std::__shared_weak_count **)(v31 + 408);
      v61 = v32;
      v62 = v33;
      if (v33)
      {
        v34 = (unint64_t *)&v33->__shared_owners_;
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 1, v34));
      }
      v36 = *((unsigned int *)this + 280);
      v37 = *((unsigned int *)a3 + 4);
      v59 = 0;
      v60 = 0uLL;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _OWORD *, uint64_t *, const void **))(*(_QWORD *)v32 + 368))(v32, v36, v37, a2, v20, v71, &v67, &v59);
      if (v33)
      {
        v38 = (unint64_t *)&v33->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
    }
    else
    {
      v40 = *((_QWORD *)this + 97);
      if (v40)
      {
        v41 = *(const void **)v40;
        v59 = *(const void **)v40;
        LODWORD(v60) = 0;
        *(int32x2_t *)((char *)&v60 + 4) = vmovn_s64(*(int64x2_t *)(v40 + 8));
      }
      else
      {
        v41 = 0;
        v59 = 0;
        *(_QWORD *)&v60 = 0;
        DWORD2(v60) = 0;
      }
      v42 = v69;
      if (v19)
      {
        __n = v65;
        v58 = v69;
        v43 = *((_QWORD *)this + 139);
        v44 = *(_QWORD *)(v43 + 400);
        v45 = *(std::__shared_weak_count **)(v43 + 408);
        v61 = v44;
        v62 = v45;
        if (v45)
        {
          v46 = (unint64_t *)&v45->__shared_owners_;
          do
            v47 = __ldxr(v46);
          while (__stxr(v47 + 1, v46));
        }
        (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, _OWORD *, uint64_t *, const void **))(*(_QWORD *)v44 + 368))(v44, *((unsigned int *)this + 280), *((unsigned int *)a3 + 4), a2, v18, v71, &v63, &v59);
        if (v45)
        {
          v48 = (unint64_t *)&v45->__shared_owners_;
          do
            v49 = __ldaxr(v48);
          while (__stlxr(v49 - 1, v48));
          if (!v49)
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
        }
        memcpy(v19, v41, __n);
        v42 = v58;
      }
      if (v21)
      {
        *(double *)&v72 = *(double *)&v72 + (double)v18;
        v50 = *((_QWORD *)this + 139);
        v51 = *(_QWORD *)(v50 + 400);
        v52 = *(std::__shared_weak_count **)(v50 + 408);
        v61 = v51;
        v62 = v52;
        if (v52)
        {
          v53 = (unint64_t *)&v52->__shared_owners_;
          do
            v54 = __ldxr(v53);
          while (__stxr(v54 + 1, v53));
        }
        (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, _OWORD *, uint64_t *, const void **))(*(_QWORD *)v51 + 368))(v51, *((unsigned int *)this + 280), *((unsigned int *)a3 + 4), a2, v20, v71, &v67, &v59);
        if (v52)
        {
          v55 = (unint64_t *)&v52->__shared_owners_;
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
            std::__shared_weak_count::__release_weak(v52);
          }
        }
        memcpy(v21, v41, v42);
      }
    }
  }
}

void sub_1B5CAFC54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t HALS_PlugInEngine::_BeginWriting(HALS_PlugInEngine *this, uint64_t a2, uint64_t a3, const HALS_IOEngineInfo *a4)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (*((_BYTE *)this + 1131)
    || *((_BYTE *)this + 1133)
    || *((_BYTE *)this + 1134)
    || *((_BYTE *)this + 1136)
    || *((_BYTE *)this + 1138))
  {
    v4 = *((_QWORD *)this + 139);
    v5 = *(_QWORD *)(v4 + 400);
    v6 = *(std::__shared_weak_count **)(v4 + 408);
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, char *))(*(_QWORD *)v5 + 520))(v5, *((unsigned int *)this + 280), a2, a3, (char *)a4 + 432);
    if (v6)
    {
      v9 = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  return 0;
}

void sub_1B5CAFD3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t HALS_PlugInEngine::_WriteToStream(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  unsigned int v8;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD v18[2];

  if (*(_BYTE *)(a1 + 1131) || *(_BYTE *)(a1 + 1134) || *(_BYTE *)(a1 + 1136) || *(_BYTE *)(a1 + 1138))
  {
    v8 = HALS_IOEngine2::_WriteToStream((HALS_IOEngine2 *)a1, a2, a3, a4, a5, a6);
  }
  else if (*(_BYTE *)(a1 + 1133))
  {
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 768) + 48);
    v11 = (*(_QWORD *)(*(_QWORD *)(a1 + 768) + 56) - v10) >> 3;
    if (v11 <= a3)
    {
      v12 = 0;
    }
    else
    {
      if (v11 <= a3)
        std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
      v12 = *(_QWORD *)(v10 + 8 * a3);
    }
    v13 = *(_QWORD *)(a1 + 1112);
    v14 = *(_QWORD *)(v13 + 400);
    v15 = *(_QWORD *)(v13 + 408);
    v18[0] = v14;
    v18[1] = v15;
    if (v15)
    {
      v16 = (unint64_t *)(v15 + 8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    v8 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 432))(v14, *(unsigned int *)(a1 + 1120), *(unsigned int *)(v12 + 16), a2, a4, a5 + 432, a6);
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v18);
  }
  else
  {
    v8 = 0;
  }
  if (a7)
    return 0;
  else
    return v8;
}

void sub_1B5CAFE54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t HALS_PlugInEngine::_EndWriting(HALS_PlugInEngine *this, uint64_t a2, uint64_t a3, const HALS_IOEngineInfo *a4)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (*((_BYTE *)this + 1131)
    || *((_BYTE *)this + 1133)
    || *((_BYTE *)this + 1134)
    || *((_BYTE *)this + 1136)
    || *((_BYTE *)this + 1138))
  {
    v4 = *((_QWORD *)this + 139);
    v5 = *(_QWORD *)(v4 + 400);
    v6 = *(std::__shared_weak_count **)(v4 + 408);
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, char *))(*(_QWORD *)v5 + 536))(v5, *((unsigned int *)this + 280), a2, a3, (char *)a4 + 432);
    if (v6)
    {
      v9 = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  return 0;
}

void sub_1B5CAFF30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void HALS_PlugInEngine::_WriteToStream_ProcessClient(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _BYTE *a8)
{
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;

  if (*(_BYTE *)(a1 + 1131))
  {
    if (*(_BYTE *)(a1 + 1132))
    {
      v11 = *(_QWORD *)(a1 + 1112);
      v12 = *(_QWORD *)(v11 + 400);
      v13 = *(std::__shared_weak_count **)(v11 + 408);
      v28 = v12;
      v29 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
      }
      v16 = *(unsigned int *)(a1 + 1120);
      v17 = *(unsigned int *)(a3 + 16);
      v25 = 0;
      v26 = 0;
      v27 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v12 + 400))(v12, v16, v17, a2, a5, a4 + 432, a6, &v25);
      if (!v13)
        goto LABEL_18;
      v18 = (unint64_t *)&v13->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
    }
    else
    {
      v20 = *(_QWORD *)(a1 + 1112);
      v21 = *(_QWORD *)(v20 + 400);
      v13 = *(std::__shared_weak_count **)(v20 + 408);
      v25 = v21;
      v26 = v13;
      if (v13)
      {
        v22 = (unint64_t *)&v13->__shared_owners_;
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
      (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v21 + 400))(v21, *(unsigned int *)(a1 + 1120), *(unsigned int *)(a3 + 16), a2, a5, a4 + 432, a6, a7);
      if (!v13)
        goto LABEL_18;
      v24 = (unint64_t *)&v13->__shared_owners_;
      do
        v19 = __ldaxr(v24);
      while (__stlxr(v19 - 1, v24));
    }
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
LABEL_18:
    *a8 = *(_BYTE *)(a1 + 1132);
  }
  *a8 = 1;
}

void sub_1B5CB007C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void HALS_PlugInEngine::_WriteToStream_ProcessMix(HALS_PlugInEngine *this, uint64_t a2, HALS_IOEngine2_StreamInfo *a3, const AudioServerPlugInIOCycleInfo *a4, unsigned int a5)
{
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  unint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  const void *v40;
  uint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  const void *v55;
  __int128 v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int __n;
  unsigned int __n_4;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  _OWORD v67[9];
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;

  if (!*((_BYTE *)this + 1134))
    return;
  v8 = *(_OWORD *)&a4->mOutputTime.mRateScalar;
  v9 = *(_OWORD *)&a4->mOutputTime.mSMPTETime.mHours;
  v10 = *(_OWORD *)&a4->mMainHostTicksPerFrame;
  v70 = *(_OWORD *)&a4->mOutputTime.mSMPTETime.mSubframes;
  v71 = v9;
  v72 = v10;
  v11 = *(_OWORD *)&a4->mInputTime.mRateScalar;
  v12 = *(_OWORD *)&a4->mInputTime.mSMPTETime.mHours;
  v13 = *(_OWORD *)&a4->mOutputTime.mSampleTime;
  v67[7] = *(_OWORD *)&a4->mInputTime.mSMPTETime.mSubframes;
  v67[8] = v12;
  v68 = v13;
  v69 = v8;
  v14 = *(_OWORD *)&a4->mCurrentTime.mRateScalar;
  v15 = *(_OWORD *)&a4->mCurrentTime.mSMPTETime.mHours;
  v16 = *(_OWORD *)&a4->mInputTime.mSampleTime;
  v67[3] = *(_OWORD *)&a4->mCurrentTime.mSMPTETime.mSubframes;
  v67[4] = v15;
  v67[5] = v16;
  v67[6] = v11;
  v17 = *(_OWORD *)&a4->mCurrentTime.mSampleTime;
  v67[0] = *(_OWORD *)&a4->mIOCycleCounter;
  v67[1] = v17;
  v67[2] = v14;
  HALS_IOEngine2_StreamInfo::GetPointersForMixBuffer((uint64_t)&v59, (uint64_t)a3, (unint64_t)*(double *)&v13, a5);
  if (v59)
    v19 = (void *)(v59 + v60);
  else
    v19 = 0;
  if (v63)
    v20 = (void *)(v63 + v64);
  else
    v20 = 0;
  if (!*((_BYTE *)this + 1135))
  {
    v39 = *((_QWORD *)this + 97);
    if (v39)
    {
      v40 = *(const void **)v39;
      v55 = *(const void **)v39;
      LODWORD(v56) = 0;
      v18 = (unint64_t)vmovn_s64(*(int64x2_t *)(v39 + 8));
      *(_QWORD *)((char *)&v56 + 4) = v18;
      if (!v19)
        goto LABEL_28;
    }
    else
    {
      v40 = 0;
      v55 = 0;
      *(_QWORD *)&v56 = 0;
      DWORD2(v56) = 0;
      if (!v19)
      {
LABEL_28:
        if (!v20)
          return;
        goto LABEL_40;
      }
    }
    v41 = *((_QWORD *)this + 139);
    v42 = *(_QWORD *)(v41 + 400);
    v43 = *(std::__shared_weak_count **)(v41 + 408);
    v57 = v42;
    v58 = v43;
    if (v43)
    {
      p_shared_owners = (unint64_t *)&v43->__shared_owners_;
      do
        v45 = __ldxr(p_shared_owners);
      while (__stxr(v45 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t, _QWORD, _OWORD *, uint64_t *, const void **))(*(_QWORD *)v42 + 464))(v42, *((unsigned int *)this + 280), *((unsigned int *)a3 + 4), a2, __n_4, v67, &v59, &v55);
    if (v43)
    {
      v46 = (unint64_t *)&v43->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    memcpy(v19, v40, __n);
    if (!v20)
      return;
LABEL_40:
    LODWORD(v18) = __n_4;
    *(double *)&v68 = *(double *)&v68 + (double)v18;
    v48 = *((_QWORD *)this + 139);
    v49 = *(_QWORD *)(v48 + 400);
    v50 = *(std::__shared_weak_count **)(v48 + 408);
    v57 = v49;
    v58 = v50;
    if (v50)
    {
      v51 = (unint64_t *)&v50->__shared_owners_;
      do
        v52 = __ldxr(v51);
      while (__stxr(v52 + 1, v51));
    }
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t, _QWORD, _OWORD *, uint64_t *, const void **))(*(_QWORD *)v49 + 464))(v49, *((unsigned int *)this + 280), *((unsigned int *)a3 + 4), a2, v66, v67, &v63, &v55);
    if (v50)
    {
      v53 = (unint64_t *)&v50->__shared_owners_;
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    memcpy(v20, v40, v65);
    return;
  }
  if (!v19)
    goto LABEL_17;
  v21 = *((_QWORD *)this + 139);
  v22 = *(_QWORD *)(v21 + 400);
  v23 = *(std::__shared_weak_count **)(v21 + 408);
  v57 = v22;
  v58 = v23;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  v26 = *((unsigned int *)this + 280);
  v27 = *((unsigned int *)a3 + 4);
  v55 = 0;
  v56 = 0uLL;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _OWORD *, uint64_t *, const void **))(*(_QWORD *)v22 + 464))(v22, v26, v27, a2, __n_4, v67, &v59, &v55);
  if (!v23)
    goto LABEL_17;
  v28 = (unint64_t *)&v23->__shared_owners_;
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
    if (!v20)
      return;
  }
  else
  {
LABEL_17:
    if (!v20)
      return;
  }
  LODWORD(v18) = __n_4;
  *(double *)&v68 = *(double *)&v68 + (double)v18;
  v30 = *((_QWORD *)this + 139);
  v31 = *(_QWORD *)(v30 + 400);
  v32 = *(std::__shared_weak_count **)(v30 + 408);
  v57 = v31;
  v58 = v32;
  if (v32)
  {
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  v35 = *((unsigned int *)this + 280);
  v36 = *((unsigned int *)a3 + 4);
  v55 = 0;
  v56 = 0uLL;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _OWORD *, uint64_t *, const void **))(*(_QWORD *)v31 + 464))(v31, v35, v36, a2, v66, v67, &v63, &v55);
  if (v32)
  {
    v37 = (unint64_t *)&v32->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
}

void sub_1B5CB042C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void HALS_PlugInEngine::_WriteToStream_ConvertFromTempBuffer(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char *v22;
  const void *v23;
  const void *v24;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  uint64_t v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  _OWORD v56[9];
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;

  if (!*(_BYTE *)(a1 + 1136))
  {
    HALS_IOEngine2::_WriteToStream_ConvertFromTempBuffer(a1, a2, a3, (uint64_t)a4, (uint64_t *)a5, a6, a7, a8);
    return;
  }
  v14 = a4[11];
  v58 = a4[10];
  v59 = v14;
  v15 = a4[13];
  v60 = a4[12];
  v61 = v15;
  v16 = a4[7];
  v56[6] = a4[6];
  v56[7] = v16;
  v17 = a4[9];
  v56[8] = a4[8];
  v57 = v17;
  v18 = a4[3];
  v56[2] = a4[2];
  v56[3] = v18;
  v19 = a4[5];
  v56[4] = a4[4];
  v56[5] = v19;
  v20 = *a4;
  v21 = a4[1];
  v56[0] = *a4;
  v56[1] = v21;
  if (*(_QWORD *)a8)
    v22 = (char *)(*(_QWORD *)a8 + *(unsigned int *)(a8 + 8));
  else
    v22 = 0;
  if (*(_QWORD *)a5)
    v23 = (const void *)(*(_QWORD *)a5 + *(unsigned int *)(a5 + 8));
  else
    v23 = 0;
  if (*(_QWORD *)a6)
    v24 = (const void *)(*(_QWORD *)a6 + *(unsigned int *)(a6 + 8));
  else
    v24 = 0;
  if (*(_BYTE *)(a1 + 1137))
  {
    if (v23)
    {
      v26 = *(unsigned int *)(a5 + 12);
      memcpy(v22, v23, v26);
      if (!v24)
        goto LABEL_15;
    }
    else
    {
      v26 = 0;
      if (!v24)
      {
LABEL_15:
        v27 = *(_QWORD *)(a1 + 1112);
        v28 = *(_QWORD *)(v27 + 400);
        v29 = *(std::__shared_weak_count **)(v27 + 408);
        v54 = v28;
        v55 = v29;
        if (v29)
        {
          p_shared_owners = (unint64_t *)&v29->__shared_owners_;
          do
            v31 = __ldxr(p_shared_owners);
          while (__stxr(v31 + 1, p_shared_owners));
        }
        v32 = *(unsigned int *)(a1 + 1120);
        v33 = *(unsigned int *)(a3 + 16);
        v51 = 0;
        v52 = 0;
        v53 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t *))(*(_QWORD *)v28 + 496))(v28, v32, v33, a2, a7, v56, a8, &v51);
        if (v29)
        {
          v34 = (unint64_t *)&v29->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            v36 = v29;
LABEL_42:
            std::__shared_weak_count::__release_weak(v36);
            return;
          }
        }
        return;
      }
    }
    memcpy(&v22[v26], v24, *(unsigned int *)(a6 + 12));
    goto LABEL_15;
  }
  if (v23)
  {
    v37 = *(_QWORD *)(a1 + 1112);
    v38 = *(_QWORD *)(v37 + 400);
    v39 = *(std::__shared_weak_count **)(v37 + 408);
    v51 = v38;
    v52 = v39;
    if (v39)
    {
      v40 = (unint64_t *)&v39->__shared_owners_;
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
    }
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t, _QWORD, _OWORD *, uint64_t, uint64_t))(*(_QWORD *)v38 + 496))(v38, *(unsigned int *)(a1 + 1120), *(unsigned int *)(a3 + 16), a2, *(unsigned int *)(a5 + 16), v56, a5, a8);
    if (v39)
    {
      v42 = (unint64_t *)&v39->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
  }
  if (v24)
  {
    LODWORD(v20) = *(_DWORD *)(a5 + 16);
    *(double *)&v57 = *(double *)&v57 + (double)(unint64_t)v20;
    v44 = *(_QWORD *)(a1 + 1112);
    v45 = *(_QWORD *)(v44 + 400);
    v46 = *(std::__shared_weak_count **)(v44 + 408);
    v51 = v45;
    v52 = v46;
    if (v46)
    {
      v47 = (unint64_t *)&v46->__shared_owners_;
      do
        v48 = __ldxr(v47);
      while (__stxr(v48 + 1, v47));
    }
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t, _QWORD, _OWORD *, uint64_t, uint64_t))(*(_QWORD *)v45 + 496))(v45, *(unsigned int *)(a1 + 1120), *(unsigned int *)(a3 + 16), a2, *(unsigned int *)(a6 + 16), v56, a6, a8);
    if (v46)
    {
      v49 = (unint64_t *)&v46->__shared_owners_;
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        v36 = v46;
        goto LABEL_42;
      }
    }
  }
}

void sub_1B5CB0738(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t HALS_PlugInEngine::_WriteToStream_Write(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;

  v7 = *(_QWORD *)(a1 + 1112);
  v8 = *(_QWORD *)(v7 + 400);
  v9 = *(std::__shared_weak_count **)(v7 + 408);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v12 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 528))(v8, *(unsigned int *)(a1 + 1120), *(unsigned int *)(a3 + 16), a2, a5, a4, a6);
  if (v9)
  {
    v13 = (unint64_t *)&v9->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return v12;
}

void sub_1B5CB0800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void HALS_PlugInEngine::HALS_PlugInEngine(HALS_PlugInEngine *this, HALS_PlugIn *a2, HALS_IODevice *a3, uint64_t a4, HALS_Object *a5)
{
  _QWORD *v8;
  HALS_IODevice *v9;

  HALS_IOEngine2::HALS_IOEngine2(this, a3, (uint64_t)a3, a4, a5);
  *v8 = off_1E69A1430;
  v8[139] = a2;
  *((_DWORD *)this + 280) = HALS_PlugInEngine::GetOwningPlugInDeviceUCID(a3, v9);
  *((_BYTE *)this + 1129) = 0;
  *((_BYTE *)this + 1131) = 0;
  *(_WORD *)((char *)this + 1133) = 0;
  *((_BYTE *)this + 1136) = 0;
  *((_BYTE *)this + 1138) = 0;
  *((_DWORD *)this + 281) = 0;
}

uint64_t HALS_PlugInEngine::GetOwningPlugInDeviceUCID(HALS_PlugInEngine *this, HALS_IODevice *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  BOOL v5;
  int v6;
  int v9;

  v3 = *((_DWORD *)this + 5);
  v2 = *((_DWORD *)this + 6);
  v4 = 1324;
  if (v3 <= 1701078389)
  {
    v5 = v3 == 1633773415;
    v6 = 1633969526;
  }
  else
  {
    v5 = v3 == 1701078390 || v3 == 1701733488;
    v6 = 1919182198;
  }
  if (v5 || v3 == v6)
    return *(unsigned int *)((char *)this + v4);
  if (v3 != v2)
  {
    v4 = 1324;
    if (v2 <= 1701078389)
    {
      if (v2 == 1633773415)
        return *(unsigned int *)((char *)this + v4);
      v9 = 1633969526;
    }
    else
    {
      if (v2 == 1701078390 || v2 == 1701733488)
        return *(unsigned int *)((char *)this + v4);
      v9 = 1919182198;
    }
    if (v2 != v9)
    {
      v4 = 388;
      if (v3 != v2 && v3 != 1633905771 && v2 != 1633905771)
        return 0;
    }
    return *(unsigned int *)((char *)this + v4);
  }
  v4 = 388;
  if (v3 == 1633905771 || v3 != v2)
    return *(unsigned int *)((char *)this + v4);
  return 0;
}

void HALS_PowerManager::~HALS_PowerManager(HALS_PowerManager *this)
{
  HALS_PowerManager::~HALS_PowerManager(this);
  JUMPOUT(0x1B5E50688);
}

{
  HALS_PowerManager *v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E69A19B8;
  if (*((_BYTE *)this + 408))
  {
    (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1), *((_QWORD *)this + 49));
    *((_BYTE *)this + 408) = 0;
  }
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((HALS_PowerManager *)((char *)this + 64));
  v2 = (HALS_PowerManager *)*((_QWORD *)this + 7);
  if (v2 == (HALS_PowerManager *)((char *)this + 32))
  {
    v3 = 4;
    v2 = (HALS_PowerManager *)((char *)this + 32);
    goto LABEL_7;
  }
  if (v2)
  {
    v3 = 5;
LABEL_7:
    (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
  }
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

void HALS_PowerManager::Initialize(uint64_t a1, int a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *exception;
  uint64_t v8;
  uint8_t v9[4];
  const char *v10;
  __int16 v11;
  int v12;
  _BYTE buf[24];
  void *v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a2 != 1)
  {
    v8 = 0;
    v3 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t *))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), a1 + 400, &v8);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    if (v3 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "HALS_PowerManager.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 62;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v3;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PowerManager::InitUserActivityLevelNotification: failed to get the user activity level, Error: 0x%X", buf, 0x18u);
    }
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf[8] = 0x40000000;
    *(_QWORD *)&buf[16] = ___ZN17HALS_PowerManager33InitUserActivityLevelNotificationEv_block_invoke;
    v14 = &__block_descriptor_tmp_15331;
    v15 = a1;
    v6 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v4 + 32))(v4, v5, buf);
    *(_QWORD *)(a1 + 392) = v6;
    if (!v6)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT)
        || (*(_DWORD *)v9 = 136315394,
            v10 = "HALS_PowerManager.cpp",
            v11 = 1024,
            v12 = 75,
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  [FAIL] IOPMScheduleUserActivityLevelNotification returned 0", v9, 0x12u), !*(_QWORD *)(a1 + 392)))
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v9 = 136315394;
          v10 = "HALS_PowerManager.cpp";
          v11 = 1024;
          v12 = 76;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::_InitUserActivityLevelNotification: IOPMScheduleUserActivityLevelNotification() failed to return the handle", v9, 0x12u);
        }
        exception = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)exception = &off_1E69A1B30;
        exception[2] = 2003329396;
      }
    }
    *(_BYTE *)(a1 + 408) = 1;
  }
}

uint64_t HALS_PowerManager::Teardown(uint64_t this)
{
  uint64_t v1;

  if (*(_BYTE *)(this + 408))
  {
    v1 = this;
    this = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(this + 8) + 40))(*(_QWORD *)(this + 8), *(_QWORD *)(this + 392));
    *(_BYTE *)(v1 + 408) = 0;
  }
  return this;
}

uint64_t ___ZN17HALS_PowerManager33InitUserActivityLevelNotificationEv_block_invoke(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  v2 = *(_QWORD **)(a1 + 32);
  v2[50] = a2;
  return (*(uint64_t (**)(_QWORD *))(*v2 + 32))(v2);
}

void HALS_PowerManager::True_System_Interface::~True_System_Interface(HALS_PowerManager::True_System_Interface *this)
{
  JUMPOUT(0x1B5E50688);
}

uint64_t HALS_PowerManager::True_System_Interface::PMGetUserActivityLevel(HALS_PowerManager::True_System_Interface *this, unint64_t *a2, unint64_t *a3)
{
  return IOPMGetUserActivityLevel();
}

uint64_t HALS_PowerManager::True_System_Interface::PMScheduleUserActivityLevelNotification()
{
  return IOPMScheduleUserActivityLevelNotification();
}

uint64_t HALS_PowerManager::True_System_Interface::PMUnregisterNotification(HALS_PowerManager::True_System_Interface *this)
{
  return IOPMUnregisterNotification();
}

uint64_t HALS_PowerManager::True_System_Interface::RegisterForSystemPower(HALS_PowerManager::True_System_Interface *this, void *refcon, IONotificationPortRef *thePortRef, IOServiceInterestCallback callback, io_object_t *notifier)
{
  return IORegisterForSystemPower(refcon, thePortRef, callback, notifier);
}

void HALS_PowerManager::True_System_Interface::NotificationPortSetDispatchQueue(HALS_PowerManager::True_System_Interface *this, IONotificationPortRef notify, dispatch_queue_t queue)
{
  IONotificationPortSetDispatchQueue(notify, queue);
}

uint64_t HALS_PowerManager::True_System_Interface::DeregisterForSystemPower(HALS_PowerManager::True_System_Interface *this, io_object_t *notifier)
{
  return IODeregisterForSystemPower(notifier);
}

void HALS_PowerManager::True_System_Interface::NotificationPortDestroy(HALS_PowerManager::True_System_Interface *this, IONotificationPortRef notify)
{
  IONotificationPortDestroy(notify);
}

uint64_t HALS_PowerManager::True_System_Interface::ServiceClose(HALS_PowerManager::True_System_Interface *this, io_connect_t connect)
{
  return IOServiceClose(connect);
}

uint64_t HALS_PowerManager::True_System_Interface::AllowPowerChange(HALS_PowerManager::True_System_Interface *this, io_connect_t kernelPort, intptr_t notificationID)
{
  return IOAllowPowerChange(kernelPort, notificationID);
}

uint64_t HALS_PowerManager::True_System_Interface::CancelPowerChange(HALS_PowerManager::True_System_Interface *this, io_connect_t kernelPort, intptr_t notificationID)
{
  return IOCancelPowerChange(kernelPort, notificationID);
}

uint64_t HALS_PowerManager::True_System_Interface::PMConnectionGetSystemCapabilities(HALS_PowerManager::True_System_Interface *this)
{
  return 0;
}

uint64_t HALS_PowerManager::True_System_Interface::PMConnectionCreate()
{
  return 0;
}

uint64_t HALS_PowerManager::True_System_Interface::PMConnectionAcknowledgeEvent()
{
  return 0;
}

uint64_t HALS_PowerManager::True_System_Interface::PMConnectionSetNotification()
{
  return 0;
}

uint64_t HALS_PowerManager::True_System_Interface::PMConnectionRelease()
{
  return 0;
}

void HALB_Mutex::~HALB_Mutex(HALB_Mutex *this)
{
  HALB_Mutex::~HALB_Mutex(this);
  JUMPOUT(0x1B5E50688);
}

{
  int v1;
  int v2;
  _BYTE v3[5];
  uint8_t buf[4];
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  int v9;
  __int16 v10;
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = &off_1E69A1B80;
  if (!*((_DWORD *)this + 22))
  {
    v1 = pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 8));
    v2 = v1;
    if (v1)
    {
      v3[0] = HIBYTE(v1);
      v3[1] = BYTE2(v1);
      v3[2] = BYTE1(v1);
      v3[3] = v1;
      v3[4] = 0;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315906;
        v5 = "HALB_Mutex.cpp";
        v6 = 1024;
        v7 = 42;
        v8 = 1024;
        v9 = v2;
        v10 = 2080;
        v11 = v3;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_Mutex::~HALB_Mutex: failed to destroy the mutex, Error: %d (%s)", buf, 0x22u);
      }
    }
  }
}

void sub_1B5CB0EEC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void HALB_Guard::~HALB_Guard(pthread_cond_t *this)
{
  HALB_Guard::~HALB_Guard(this);
  JUMPOUT(0x1B5E50688);
}

{
  int v2;
  int v3;
  _BYTE v4[5];
  uint8_t buf[4];
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  int v10;
  __int16 v11;
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  this->__sig = (uint64_t)&off_1E69A1BA0;
  if (!*(_DWORD *)&this[1].__opaque[32])
  {
    v2 = pthread_cond_destroy(this + 2);
    v3 = v2;
    if (v2)
    {
      v4[0] = HIBYTE(v2);
      v4[1] = BYTE2(v2);
      v4[2] = BYTE1(v2);
      v4[3] = v2;
      v4[4] = 0;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315906;
        v6 = "HALB_Mutex.cpp";
        v7 = 1024;
        v8 = 178;
        v9 = 1024;
        v10 = v3;
        v11 = 2080;
        v12 = v4;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_Guard::~HALB_Guard: failed to destroy the condition variable, Error: %d (%s)", buf, 0x22u);
      }
    }
  }
  HALB_Mutex::~HALB_Mutex((HALB_Mutex *)this);
}

void sub_1B5CB1040(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void HALB_Mutex::HALB_Mutex(HALB_Mutex *this)
{
  int v2;
  int v3;
  _BYTE v4[5];
  uint8_t buf[4];
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  int v10;
  __int16 v11;
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = &off_1E69A1B80;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  v2 = pthread_mutex_init((pthread_mutex_t *)((char *)this + 8), 0);
  *((_DWORD *)this + 22) = v2;
  if (v2)
  {
    v3 = v2;
    v4[0] = HIBYTE(v2);
    v4[1] = BYTE2(v2);
    v4[2] = BYTE1(v2);
    v4[3] = v2;
    v4[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      v6 = "HALB_Mutex.cpp";
      v7 = 1024;
      v8 = 34;
      v9 = 1024;
      v10 = v3;
      v11 = 2080;
      v12 = v4;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_Mutex::HALB_Mutex: failed to initialize the mutex, Error: %d (%s)", buf, 0x22u);
    }
  }
}

uint64_t HALB_Mutex::Lock(HALB_Mutex *this)
{
  uint64_t v1;
  _opaque_pthread_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[5];
  uint8_t buf[4];
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;
  __int16 v15;
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = *((unsigned int *)this + 22);
  if ((_DWORD)v1)
    return v1;
  v4 = (_opaque_pthread_t *)*((_QWORD *)this + 9);
  if (v4 == pthread_self())
  {
    v6 = *((_QWORD *)this + 10);
    if (v6 != -1)
    {
      v1 = 0;
      *((_QWORD *)this + 10) = v6 + 1;
      return v1;
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      v10 = "HALB_Mutex.cpp";
      v11 = 1024;
      v12 = 121;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALB_Mutex::Lock: lock count at maximum", buf, 0x12u);
    }
    return 34;
  }
  v5 = pthread_mutex_lock((pthread_mutex_t *)((char *)this + 8));
  if (!(_DWORD)v5)
  {
    v7 = *((_QWORD *)this + 10);
    if (v7 != -1)
    {
      *((_QWORD *)this + 10) = v7 + 1;
      v1 = 0;
      *((_QWORD *)this + 9) = pthread_self();
      return v1;
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      v10 = "HALB_Mutex.cpp";
      v11 = 1024;
      v12 = 107;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALB_Mutex::Lock: lock count at maximum after locking", buf, 0x12u);
    }
    pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 8));
    return 34;
  }
  v1 = v5;
  v8[0] = BYTE3(v5);
  v8[1] = BYTE2(v5);
  v8[2] = BYTE1(v5);
  v8[3] = v5;
  v8[4] = 0;
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315906;
    v10 = "HALB_Mutex.cpp";
    v11 = 1024;
    v12 = 97;
    v13 = 1024;
    v14 = v1;
    v15 = 2080;
    v16 = v8;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_Mutex::Lock: locking failed, Error: %d (%s)", buf, 0x22u);
  }
  return v1;
}

uint64_t HALB_Mutex::Unlock(HALB_Mutex *this)
{
  uint64_t v1;
  _opaque_pthread_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[5];
  uint8_t buf[4];
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;
  __int16 v15;
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = *((unsigned int *)this + 22);
  if (!(_DWORD)v1)
  {
    v3 = (_opaque_pthread_t *)*((_QWORD *)this + 9);
    if (v3 == pthread_self())
    {
      v5 = *((_QWORD *)this + 10);
      if (v5)
      {
        v6 = v5 - 1;
        *((_QWORD *)this + 10) = v6;
        if (v6)
        {
          return 0;
        }
        else
        {
          *((_QWORD *)this + 9) = 0;
          v7 = pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 8));
          v1 = v7;
          if ((_DWORD)v7)
          {
            v8[0] = BYTE3(v7);
            v8[1] = BYTE2(v7);
            v8[2] = BYTE1(v7);
            v8[3] = v7;
            v8[4] = 0;
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315906;
              v10 = "HALB_Mutex.cpp";
              v11 = 1024;
              v12 = 143;
              v13 = 1024;
              v14 = v1;
              v15 = 2080;
              v16 = v8;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_Mutex::Unlock: unlocking failed, Error: %d (%s)", buf, 0x22u);
            }
          }
        }
      }
      else
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315394;
          v10 = "HALB_Mutex.cpp";
          v11 = 1024;
          v12 = 148;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALB_Mutex::Unlock: the lock count is at 0 already", buf, 0x12u);
        }
        return 34;
      }
    }
    else
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        v10 = "HALB_Mutex.cpp";
        v11 = 1024;
        v12 = 154;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALB_Mutex::Unlock: can't unlock a mutex the thread hasn't locked", buf, 0x12u);
      }
      return 1;
    }
  }
  return v1;
}

void HALB_Guard::HALB_Guard(HALB_Guard *this)
{
  pthread_cond_t *v2;
  pthread_cond_t *v3;
  int v4;
  int v5;
  _BYTE v6[5];
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  int v12;
  __int16 v13;
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  HALB_Mutex::HALB_Mutex(this);
  v2->__sig = (uint64_t)&off_1E69A1BA0;
  *(_OWORD *)&v2[2].__sig = 0u;
  v3 = v2 + 2;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  if (!*((_DWORD *)this + 22))
  {
    v4 = pthread_cond_init(v3, 0);
    v5 = v4;
    *((_DWORD *)this + 22) = v4;
    if (v4)
    {
      v6[0] = HIBYTE(v4);
      v6[1] = BYTE2(v4);
      v6[2] = BYTE1(v4);
      v6[3] = v4;
      v6[4] = 0;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315906;
        v8 = "HALB_Mutex.cpp";
        v9 = 1024;
        v10 = 169;
        v11 = 1024;
        v12 = v5;
        v13 = 2080;
        v14 = v6;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_Guard::HALB_Guard: failed to initialize the condition variable, Error: %d (%s)", buf, 0x22u);
      }
    }
  }
}

void sub_1B5CB16F8(_Unwind_Exception *a1)
{
  HALB_Mutex *v1;

  HALB_Mutex::~HALB_Mutex(v1);
  _Unwind_Resume(a1);
}

void HALB_Guard::Wait(HALB_Guard *this)
{
  _QWORD *v2;
  _opaque_pthread_t *v3;
  NSObject *v4;
  const char *v5;
  os_log_type_t v6;
  uint32_t v7;
  uint64_t v8;
  int v9;
  int v10;
  _BYTE v11[5];
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  int v17;
  __int16 v18;
  _BYTE *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (!*((_DWORD *)this + 22))
  {
    v2 = (_QWORD *)((char *)this + 72);
    v3 = (_opaque_pthread_t *)*((_QWORD *)this + 9);
    if (v3 != pthread_self())
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        return;
      *(_DWORD *)buf = 136315394;
      v13 = "HALB_Mutex.cpp";
      v14 = 1024;
      v15 = 202;
      v4 = MEMORY[0x1E0C81028];
      v5 = "%25s:%-5d  HALB_Mutex::Wait: can't wait with a mutex the thread hasn't locked";
      v6 = OS_LOG_TYPE_DEFAULT;
      v7 = 18;
LABEL_8:
      _os_log_impl(&dword_1B57BA000, v4, v6, v5, buf, v7);
      return;
    }
    v8 = *((_QWORD *)this + 10);
    *v2 = 0;
    v2[1] = 0;
    v9 = pthread_cond_wait((pthread_cond_t *)this + 2, (pthread_mutex_t *)((char *)this + 8));
    if (v9)
    {
      v10 = v9;
      v11[0] = HIBYTE(v9);
      v11[1] = BYTE2(v9);
      v11[2] = BYTE1(v9);
      v11[3] = v9;
      v11[4] = 0;
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        return;
      *(_DWORD *)buf = 136315906;
      v13 = "HALB_Mutex.cpp";
      v14 = 1024;
      v15 = 193;
      v16 = 1024;
      v17 = v10;
      v18 = 2080;
      v19 = v11;
      v4 = MEMORY[0x1E0C81028];
      v5 = "%25s:%-5d  HALB_Guard::Wait: waiting failed, Error: %d (%s)";
      v6 = OS_LOG_TYPE_ERROR;
      v7 = 34;
      goto LABEL_8;
    }
    *((_QWORD *)this + 10) = v8;
    *((_QWORD *)this + 9) = pthread_self();
  }
}

void HALB_Guard::Notify(pthread_cond_t *this)
{
  int v1;
  int v2;
  _BYTE v3[5];
  uint8_t buf[4];
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  int v9;
  __int16 v10;
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (!*(_DWORD *)&this[1].__opaque[32])
  {
    v1 = pthread_cond_signal(this + 2);
    if (v1)
    {
      v2 = v1;
      v3[0] = HIBYTE(v1);
      v3[1] = BYTE2(v1);
      v3[2] = BYTE1(v1);
      v3[3] = v1;
      v3[4] = 0;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315906;
        v5 = "HALB_Mutex.cpp";
        v6 = 1024;
        v7 = 279;
        v8 = 1024;
        v9 = v2;
        v10 = 2080;
        v11 = v3;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_Guard::Notify: signaling failed, Error: %d (%s)", buf, 0x22u);
      }
    }
  }
}

uint64_t Extrinsic_Driver_Connection_To_Server::register_new_driver(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  NSObject *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  _QWORD block[7];
  _BYTE v18[24];
  _BYTE *v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v13 = 0;
  v14 = &v13;
  v15 = 0x2020000000;
  v16 = 0;
  v8 = *(id *)(a1 + 32);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3321888768;
  block[2] = ___ZN37Extrinsic_Driver_Connection_To_Server19register_new_driverEPP32AudioServerPlugInDriverInterfacebNSt3__18functionIFvvEEE_block_invoke;
  block[3] = &unk_1E69A1C08;
  block[4] = &v13;
  block[5] = a1;
  block[6] = a2;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v18, a4);
  v20 = a3;
  dispatch_sync(v8, block);

  v9 = *((unsigned int *)v14 + 6);
  v10 = v19;
  if (v19 == v18)
  {
    v11 = 4;
    v10 = v18;
    goto LABEL_5;
  }
  if (v19)
  {
    v11 = 5;
LABEL_5:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  _Block_object_dispose(&v13, 8);
  return v9;
}

void sub_1B5CB1AE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZN37Extrinsic_Driver_Connection_To_Server19register_new_driverEPP32AudioServerPlugInDriverInterfacebNSt3__18functionIFvvEEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  Core_Audio_Driver *v14;
  uint64_t v15;
  NSObject *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 *v20;
  uint64_t v21;
  unint64_t v22;
  id **v23;
  id *v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  id **v31;
  char *v32;
  id *v33;
  _QWORD *v34;
  _QWORD *v35;
  id *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  void *v44;
  int v45;
  id v46;
  id v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void **v52;
  uint64_t v53;
  int v54;
  AMCP::Log::Scope_Registry *v55;
  NSObject *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  id v60;
  void *v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  id v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  _opaque_pthread_t *v75;
  mach_port_t v76;
  unint64_t v77;
  char *v78;
  int v79;
  char *v80;
  BOOL v81;
  const char *v82;
  uint64_t v83;
  _opaque_pthread_t *v84;
  mach_port_t v85;
  unint64_t v86;
  char *v87;
  int v88;
  char *v89;
  const char *v90;
  uint64_t v91;
  _QWORD v92[5];
  void *__p[2];
  char v94;
  _QWORD v95[3];
  _QWORD *v96;
  id v97;
  _BYTE v98[24];
  _BYTE *v99;
  id *aBlock;
  __int128 v101;
  __int128 v102;
  void *v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;

  v110 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(void **)(v2 + 24);
  v4 = (id *)MEMORY[0x1E0C809B0];
  if (!v3)
  {
    v5 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3B38]), "initWithMachServiceName:options:", CFSTR("com.apple.audio.driver-registrar"), 0);
    v6 = *(void **)(v2 + 24);
    *(_QWORD *)(v2 + 24) = v5;

    objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EF132978);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(v2 + 24), "setRemoteObjectInterface:", v7);

    v8 = *(id *)(v2 + 24);
    aBlock = v4;
    *(_QWORD *)&v101 = 3321888768;
    *((_QWORD *)&v101 + 1) = ___ZZN37Extrinsic_Driver_Connection_To_Server28_create_connection_to_serverEvENK3__0cvU13block_pointerFvvEEv_block_invoke;
    *(_QWORD *)&v102 = &__block_descriptor_40_ea8_32c83_ZTSKZN37Extrinsic_Driver_Connection_To_Server28_create_connection_to_serverEvE3__0_e5_v8__0l;
    *((_QWORD *)&v102 + 1) = v8;
    v9 = v8;
    v10 = _Block_copy(&aBlock);

    objc_msgSend(*(id *)(v2 + 24), "setInterruptionHandler:", v10);
    aBlock = v4;
    *(_QWORD *)&v101 = 3321888768;
    *((_QWORD *)&v101 + 1) = ___ZZN37Extrinsic_Driver_Connection_To_Server28_create_connection_to_serverEvENK3__2cvU13block_pointerFvvEEv_block_invoke;
    *(_QWORD *)&v102 = &__block_descriptor_40_ea8_32c83_ZTSKZN37Extrinsic_Driver_Connection_To_Server28_create_connection_to_serverEvE3__2_e5_v8__0l;
    *((_QWORD *)&v102 + 1) = v2;
    v11 = _Block_copy(&aBlock);
    objc_msgSend(*(id *)(v2 + 24), "setInvalidationHandler:", v11);

    objc_msgSend(*(id *)(v2 + 24), "resume");
    v3 = *(void **)(v2 + 24);
  }
  v92[0] = v4;
  v92[1] = 3221225472;
  v92[2] = ___ZN37Extrinsic_Driver_Connection_To_Server19register_new_driverEPP32AudioServerPlugInDriverInterfacebNSt3__18functionIFvvEEE_block_invoke_2;
  v92[3] = &unk_1E69A1BE0;
  v92[4] = *(_QWORD *)(a1 + 32);
  objc_msgSend(v3, "synchronousRemoteObjectProxyWithErrorHandler:", v92);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v12)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&aBlock, "com.apple.coreaudio", "AMCP");
    v16 = *aBlock;
    AMCP::Log::Scope::get_os_log_t(*aBlock);
    objc_claimAutoreleasedReturnValue();
    v17 = (std::__shared_weak_count *)v101;
    if ((_QWORD)v101)
    {
      v18 = (unint64_t *)(v101 + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      v84 = pthread_self();
      v85 = pthread_mach_thread_np(v84);
      v86 = 0;
      v87 = 0;
      v88 = 47;
      do
      {
        v89 = &aLibraryCachesC_188[v86];
        if (v88 == 47)
          v87 = &aLibraryCachesC_188[v86];
        v88 = v89[1];
        if (!v89[1])
          break;
        v81 = v86++ >= 0xFFF;
      }
      while (!v81);
      if (v87)
        v90 = v87 + 1;
      else
        v90 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Audio_Server_PlugIn_Registration.mm";
      v91 = *(_QWORD *)(a1 + 48);
      LODWORD(aBlock) = 67109890;
      HIDWORD(aBlock) = v85;
      LOWORD(v101) = 2080;
      *(_QWORD *)((char *)&v101 + 2) = v90;
      WORD5(v101) = 1024;
      HIDWORD(v101) = 104;
      LOWORD(v102) = 2048;
      *(_QWORD *)((char *)&v102 + 2) = v91;
      _os_log_error_impl(&dword_1B57BA000, v16, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Extrinsic_Driver_Connection_To_Server: failed to get server proxy connection, driver interface %p", (uint8_t *)&aBlock, 0x22u);
    }

    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1937010544;
    goto LABEL_100;
  }
  v13 = *(_QWORD *)(a1 + 48);
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v95, a1 + 56);
  v14 = [Core_Audio_Driver alloc];
  v15 = (uint64_t)v96;
  if (!v96)
    goto LABEL_7;
  if (v96 != v95)
  {
    v15 = (*(uint64_t (**)(void))(*v96 + 16))();
LABEL_7:
    v109 = (uint64_t *)v15;
    goto LABEL_16;
  }
  v109 = &v106;
  (*(void (**)(_QWORD *, uint64_t *))(v95[0] + 24))(v95, &v106);
LABEL_16:
  aBlock = -[Core_Audio_Driver init_driver_interface:invalidation_handler:](v14, "init_driver_interface:invalidation_handler:", v13, &v106);
  v20 = &v101;
  v21 = (uint64_t)v96;
  if (!v96)
  {
LABEL_19:
    *((_QWORD *)&v102 + 1) = v21;
    goto LABEL_21;
  }
  if (v96 != v95)
  {
    v21 = (*(uint64_t (**)(void))(*v96 + 16))();
    goto LABEL_19;
  }
  *((_QWORD *)&v102 + 1) = &v101;
  (*(void (**)(_QWORD *, __int128 *))(v95[0] + 24))(v95, &v101);
LABEL_21:
  v23 = *(id ***)(v2 + 8);
  v22 = *(_QWORD *)(v2 + 16);
  if ((unint64_t)v23 < v22)
  {
    v24 = aBlock;
    aBlock = 0;
    *v23 = v24;
    v25 = v23 + 5;
    std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)(v23 + 1), (uint64_t)&v101);
    goto LABEL_40;
  }
  v26 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v23 - *(_QWORD *)v2) >> 3);
  v27 = v26 + 1;
  if (v26 + 1 > 0x666666666666666)
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  v28 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v22 - *(_QWORD *)v2) >> 3);
  if (2 * v28 > v27)
    v27 = 2 * v28;
  if (v28 >= 0x333333333333333)
    v29 = 0x666666666666666;
  else
    v29 = v27;
  if (v29)
  {
    if (v29 > 0x666666666666666)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v30 = (char *)operator new(40 * v29);
  }
  else
  {
    v30 = 0;
  }
  v31 = (id **)&v30[40 * v26];
  v32 = &v30[40 * v29];
  v33 = aBlock;
  aBlock = 0;
  *v31 = v33;
  v25 = v31 + 5;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)(v31 + 1), (uint64_t)&v101);
  v35 = *(_QWORD **)v2;
  v34 = *(_QWORD **)(v2 + 8);
  if (v34 == *(_QWORD **)v2)
  {
    *(_QWORD *)v2 = v31;
    *(_QWORD *)(v2 + 8) = v25;
    *(_QWORD *)(v2 + 16) = v32;
    if (v34)
LABEL_39:
      operator delete(v34);
  }
  else
  {
    do
    {
      v36 = (id *)*(v34 - 5);
      v34 -= 5;
      *v34 = 0;
      *(v31 - 5) = v36;
      v31 -= 5;
      std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)(v31 + 1), (uint64_t)(v34 + 1));
    }
    while (v34 != v35);
    v37 = *(_QWORD **)v2;
    v34 = *(_QWORD **)(v2 + 8);
    *(_QWORD *)v2 = v31;
    *(_QWORD *)(v2 + 8) = v25;
    *(_QWORD *)(v2 + 16) = v32;
    if (v34 != v37)
    {
      do
      {
        v34 -= 5;
        std::__destroy_at[abi:ne180100]<std::pair<Core_Audio_Driver * {__strong},std::function<void ()(void)>>,0>((uint64_t)v34);
      }
      while (v34 != v37);
      v34 = v37;
    }
    if (v34)
      goto LABEL_39;
  }
LABEL_40:
  *(_QWORD *)(v2 + 8) = v25;
  if (*((__int128 **)&v102 + 1) == &v101)
  {
    v38 = 4;
  }
  else
  {
    if (!*((_QWORD *)&v102 + 1))
      goto LABEL_45;
    v38 = 5;
    v20 = (__int128 *)*((_QWORD *)&v102 + 1);
  }
  (*(void (**)(__int128 *))(*(_QWORD *)v20 + 8 * v38))(v20);
LABEL_45:

  v39 = v109;
  if (v109 == &v106)
  {
    v40 = 4;
    v39 = &v106;
  }
  else
  {
    if (!v109)
      goto LABEL_50;
    v40 = 5;
  }
  (*(void (**)(void))(*v39 + 8 * v40))();
LABEL_50:
  v41 = *(_QWORD *)(v2 + 8);
  v97 = *(id *)(v41 - 40);
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v98, v41 - 32);
  v42 = v96;
  if (v96 == v95)
  {
    v43 = 4;
    v42 = v95;
    goto LABEL_54;
  }
  if (v96)
  {
    v43 = 5;
LABEL_54:
    (*(void (**)(void))(*v42 + 8 * v43))();
  }
  objc_msgSend(v97, "endpoint");
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  v45 = *(unsigned __int8 *)(a1 + 88);
  v46 = v12;
  v47 = v44;
  v106 = 0;
  v107 = &v106;
  v108 = 0x2020000000;
  LODWORD(v109) = 1937010544;
  objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v48, "bundleURL");
  v49 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v48, "bundleIdentifier");
  v50 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v50)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&aBlock);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v101 + 1, (uint64_t)"ExtrinsicDriver-", 16);
    getpid();
    std::ostream::operator<<();
    v51 = (void *)MEMORY[0x1E0CB3940];
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>(__p, (uint64_t)&v102);
    if (v94 >= 0)
      v52 = __p;
    else
      v52 = (void **)__p[0];
    objc_msgSend(v51, "stringWithUTF8String:", v52);
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    if (v94 < 0)
      operator delete(__p[0]);
    aBlock = (id *)*MEMORY[0x1E0DE4F50];
    v53 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    *(id **)((char *)&aBlock + (_QWORD)*(aBlock - 3)) = *(id **)(MEMORY[0x1E0DE4F50] + 64);
    *((_QWORD *)&v101 + 1) = v53;
    *(_QWORD *)&v102 = MEMORY[0x1E0DE4FB8] + 16;
    if (v104 < 0)
      operator delete(v103);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1B5E50598](&v105);
  }
  aBlock = (id *)MEMORY[0x1E0C809B0];
  *(_QWORD *)&v101 = 3221225472;
  *((_QWORD *)&v101 + 1) = ___ZN37Extrinsic_Driver_Connection_To_Server16_register_driverEPU47objcproto36Core_Audio_Driver_Registrar_Protocol11objc_objectP21NSXPCListenerEndpointb_block_invoke;
  *(_QWORD *)&v102 = &unk_1E69A1C40;
  *((_QWORD *)&v102 + 1) = &v106;
  objc_msgSend(v46, "register_driver:bundle_url:bundle_id:cpu_type:is_using_driver_service:reply:", v47, v49, v50, 16777228, v45 != 0, &aBlock);
  v54 = *((_DWORD *)v107 + 6);

  _Block_object_dispose(&v106, 8);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v54;

  if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    goto LABEL_94;
  AMCP::Log::Scope_Registry::get(v55);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&aBlock, "com.apple.coreaudio", "AMCP");
  v56 = *aBlock;
  AMCP::Log::Scope::get_os_log_t(*aBlock);
  objc_claimAutoreleasedReturnValue();
  v57 = (std::__shared_weak_count *)v101;
  if ((_QWORD)v101)
  {
    v58 = (unint64_t *)(v101 + 8);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
  {
    v75 = pthread_self();
    v76 = pthread_mach_thread_np(v75);
    v77 = 0;
    v78 = 0;
    v79 = 47;
    do
    {
      v80 = &aLibraryCachesC_188[v77];
      if (v79 == 47)
        v78 = &aLibraryCachesC_188[v77];
      v79 = v80[1];
      if (!v80[1])
        break;
      v81 = v77++ >= 0xFFF;
    }
    while (!v81);
    if (v78)
      v82 = v78 + 1;
    else
      v82 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Audio_Server_PlugIn_Registration.mm";
    v83 = *(_QWORD *)(a1 + 48);
    LODWORD(aBlock) = 67109890;
    HIDWORD(aBlock) = v76;
    LOWORD(v101) = 2080;
    *(_QWORD *)((char *)&v101 + 2) = v82;
    WORD5(v101) = 1024;
    HIDWORD(v101) = 95;
    LOWORD(v102) = 2048;
    *(_QWORD *)((char *)&v102 + 2) = v83;
    _os_log_error_impl(&dword_1B57BA000, v56, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Extrinsic_Driver_Connection_To_Server: Failed to register remote driver, driver interface %p", (uint8_t *)&aBlock, 0x22u);
  }

  if (!v97)
    goto LABEL_94;
  v60 = v97;
  v61 = v60;
  v62 = *(_QWORD **)v2;
  v63 = *(_QWORD *)(v2 + 8);
  if (*(_QWORD *)v2 != v63)
  {
    while ((id)*v62 != v60)
    {
      v62 += 5;
      if (v62 == (_QWORD *)v63)
        goto LABEL_93;
    }
  }
  if (v62 == (_QWORD *)v63)
    goto LABEL_93;
  v64 = v62 + 5;
  if (v62 + 5 == (_QWORD *)v63)
    goto LABEL_91;
  do
  {
    v65 = v62[5];
    v62[5] = 0;
    v66 = (id)*v62;
    *v62 = v65;

    v68 = v62 + 4;
    v67 = (_QWORD *)v62[4];
    v62[4] = 0;
    if (v62 + 1 == v67)
    {
      v67 = v62 + 1;
      v69 = 4;
    }
    else
    {
      if (!v67)
        goto LABEL_83;
      v69 = 5;
    }
    (*(void (**)(void))(*v67 + 8 * v69))();
LABEL_83:
    v70 = (_QWORD *)v62[9];
    if (!v70)
      goto LABEL_86;
    if (v62 + 6 != v70)
    {
      *v68 = v70;
      v68 = v64 + 4;
LABEL_86:
      *v68 = 0;
      goto LABEL_88;
    }
    *v68 = v62 + 1;
    (*(void (**)(_QWORD *, _QWORD *))(v62[6] + 24))(v62 + 6, v62 + 1);
LABEL_88:
    v64 += 5;
    v71 = v62 + 5;
    v72 = v62 + 10;
    v62 += 5;
  }
  while (v72 != (_QWORD *)v63);
  v63 = *(_QWORD *)(v2 + 8);
  v62 = v71;
LABEL_91:
  while ((_QWORD *)v63 != v62)
  {
    v63 -= 40;
    std::__destroy_at[abi:ne180100]<std::pair<Core_Audio_Driver * {__strong},std::function<void ()(void)>>,0>(v63);
  }
  *(_QWORD *)(v2 + 8) = v62;
LABEL_93:

LABEL_94:
  v73 = v98;
  if (v99 == v98)
  {
    v74 = 4;
LABEL_98:
    (*(void (**)(void))(*v73 + 8 * v74))();
  }
  else if (v99)
  {
    v74 = 5;
    v73 = v99;
    goto LABEL_98;
  }

LABEL_100:
}

void sub_1B5CB2578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, _QWORD *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,_QWORD *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  uint64_t v40;
  uint64_t v42;

  if (a22 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a32);

  _Block_object_dispose((const void *)(v40 - 152), 8);
  if (a31 == a11)
  {
    v42 = 4;
  }
  else
  {
    if (!a31)
      goto LABEL_8;
    v42 = 5;
    a11 = a31;
  }
  (*(void (**)(void))(*a11 + 8 * v42))();
LABEL_8:

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_56c27_ZTSNSt3__18functionIFvvEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](a1 + 56, a2 + 56);
}

_QWORD *__destroy_helper_block_ea8_56c27_ZTSNSt3__18functionIFvvEEE(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 56);
  result = *(_QWORD **)(a1 + 80);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void ___ZN37Extrinsic_Driver_Connection_To_Server19register_new_driverEPP32AudioServerPlugInDriverInterfacebNSt3__18functionIFvvEEE_block_invoke_2(uint64_t a1, void *a2)
{
  AMCP::Log::Scope_Registry *v3;
  NSObject *v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  AMCP::Log::Scope_Registry *v8;
  void *v9;
  void *v10;
  void *v11;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  unint64_t v14;
  char *v15;
  int v16;
  char *v17;
  const char *v19;
  uint8_t buf[8];
  _BYTE v21[10];
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  AMCP::Log::Scope_Registry::get(v3);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v4 = **(NSObject ***)buf;
  AMCP::Log::Scope::get_os_log_t(**(id **)buf);
  objc_claimAutoreleasedReturnValue();
  v5 = *(std::__shared_weak_count **)v21;
  if (*(_QWORD *)v21)
  {
    v6 = (unint64_t *)(*(_QWORD *)v21 + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    v12 = pthread_self();
    v13 = pthread_mach_thread_np(v12);
    v14 = 0;
    v15 = 0;
    v16 = 47;
    do
    {
      v17 = &aLibraryCachesC_188[v14];
      if (v16 == 47)
        v15 = &aLibraryCachesC_188[v14];
      v16 = v17[1];
      if (!v17[1])
        break;
    }
    while (v14++ < 0xFFF);
    if (v15)
      v19 = v15 + 1;
    else
      v19 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Audio_Server_PlugIn_Registration.mm";
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)&buf[4] = v13;
    *(_WORD *)v21 = 2080;
    *(_QWORD *)&v21[2] = v19;
    v22 = 1024;
    v23 = 84;
    _os_log_error_impl(&dword_1B57BA000, v4, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Extrinsic_Driver_Connection_To_Server: server proxy connection failed.", buf, 0x18u);
  }

  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1937010544;
  v8 = v3;
  NSLog(CFSTR("AudioHardware got an XPC error:"));
  NSLog(CFSTR(" Code:\t\t\t%ld"), -[AMCP::Log::Scope_Registry code](v8, "code"));
  -[AMCP::Log::Scope_Registry localizedDescription](v8, "localizedDescription");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  NSLog(CFSTR(" Description:\t%@"), v9);

  -[AMCP::Log::Scope_Registry localizedFailureReason](v8, "localizedFailureReason");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  NSLog(CFSTR(" Reason:\t\t%@"), v10);

  -[AMCP::Log::Scope_Registry localizedRecoverySuggestion](v8, "localizedRecoverySuggestion");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  NSLog(CFSTR(" Suggestion:\t%@"), v11);

}

void sub_1B5CB29E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void std::__destroy_at[abi:ne180100]<std::pair<Core_Audio_Driver * {__strong},std::function<void ()(void)>>,0>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 32);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

}

uint64_t ___ZN37Extrinsic_Driver_Connection_To_Server16_register_driverEPU47objcproto36Core_Audio_Driver_Registrar_Protocol11objc_objectP21NSXPCListenerEndpointb_block_invoke(uint64_t result, int a2)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a2;
  return result;
}

uint64_t ___ZZN37Extrinsic_Driver_Connection_To_Server28_create_connection_to_serverEvENK3__0cvU13block_pointerFvvEEv_block_invoke(id *a1)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  _opaque_pthread_t *v7;
  mach_port_t v8;
  unint64_t v9;
  char *v10;
  int v11;
  char *v12;
  const char *v14;
  id *v15;
  _BYTE v16[10];
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v15, "com.apple.coreaudio", "AMCP");
  v2 = *v15;
  AMCP::Log::Scope::get_os_log_t(*v15);
  objc_claimAutoreleasedReturnValue();
  v3 = *(std::__shared_weak_count **)v16;
  if (*(_QWORD *)v16)
  {
    v4 = (unint64_t *)(*(_QWORD *)v16 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    v7 = pthread_self();
    v8 = pthread_mach_thread_np(v7);
    v9 = 0;
    v10 = 0;
    v11 = 47;
    do
    {
      v12 = &aLibraryCachesC_188[v9];
      if (v11 == 47)
        v10 = &aLibraryCachesC_188[v9];
      v11 = v12[1];
      if (!v12[1])
        break;
    }
    while (v9++ < 0xFFF);
    if (v10)
      v14 = v10 + 1;
    else
      v14 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Audio_Server_PlugIn_Registration.mm";
    LODWORD(v15) = 67109634;
    HIDWORD(v15) = v8;
    *(_WORD *)v16 = 2080;
    *(_QWORD *)&v16[2] = v14;
    v17 = 1024;
    v18 = 119;
    _os_log_error_impl(&dword_1B57BA000, v2, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d HAL Server Connection Interrupted", (uint8_t *)&v15, 0x18u);
  }

  return objc_msgSend(a1[4], "invalidate");
}

void sub_1B5CB2C10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZZN37Extrinsic_Driver_Connection_To_Server28_create_connection_to_serverEvENK3__2cvU13block_pointerFvvEEv_block_invoke(AMCP::Log::Scope_Registry *a1)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  NSObject *v8;
  _opaque_pthread_t *v9;
  mach_port_t v10;
  unint64_t v11;
  char *v12;
  int v13;
  char *v14;
  const char *v16;
  id *v17;
  __int128 v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  AMCP::Log::Scope_Registry::get(a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v17, "com.apple.coreaudio", "AMCP");
  v2 = *v17;
  AMCP::Log::Scope::get_os_log_t(*v17);
  objc_claimAutoreleasedReturnValue();
  v3 = (std::__shared_weak_count *)v18;
  if ((_QWORD)v18)
  {
    v4 = (unint64_t *)(v18 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    v9 = pthread_self();
    v10 = pthread_mach_thread_np(v9);
    v11 = 0;
    v12 = 0;
    v13 = 47;
    do
    {
      v14 = &aLibraryCachesC_188[v11];
      if (v13 == 47)
        v12 = &aLibraryCachesC_188[v11];
      v13 = v14[1];
      if (!v14[1])
        break;
    }
    while (v11++ < 0xFFF);
    if (v12)
      v16 = v12 + 1;
    else
      v16 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Audio_Server_PlugIn_Registration.mm";
    LODWORD(v17) = 67109634;
    HIDWORD(v17) = v10;
    LOWORD(v18) = 2080;
    *(_QWORD *)((char *)&v18 + 2) = v16;
    WORD5(v18) = 1024;
    HIDWORD(v18) = 136;
    _os_log_error_impl(&dword_1B57BA000, v2, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d HAL Server Connection Invalidated", (uint8_t *)&v17, 0x18u);
  }

  v6 = *((_QWORD *)a1 + 4);
  v17 = (id *)MEMORY[0x1E0C809B0];
  *(_QWORD *)&v18 = 3221225472;
  *((_QWORD *)&v18 + 1) = ___ZZN37Extrinsic_Driver_Connection_To_Server28_create_connection_to_serverEvENK3__1clEv_block_invoke;
  v19 = &__block_descriptor_40_e5_v8__0l;
  v20 = v6;
  v7 = *(void **)(v6 + 32);
  AMCP::Log::Scope::get_os_log_t(v7);
  v8 = objc_claimAutoreleasedReturnValue();
  dispatch_async(v8, &v17);

}

void sub_1B5CB2DEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c83_ZTSKZN37Extrinsic_Driver_Connection_To_Server28_create_connection_to_serverEvE3__2(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  return result;
}

void ___ZZN37Extrinsic_Driver_Connection_To_Server28_create_connection_to_serverEvENK3__1clEv_block_invoke(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v1 = *(uint64_t **)(a1 + 32);
  v2 = *v1;
  v3 = v1[1];
  if (*v1 != v3)
  {
    do
    {
      v4 = *(_QWORD *)(v2 + 32);
      if (!v4)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4);
      v2 += 40;
    }
    while (v2 != v3);
    v5 = *v1;
    v2 = v1[1];
    if (v2 != *v1)
    {
      do
      {
        v2 -= 40;
        std::__destroy_at[abi:ne180100]<std::pair<Core_Audio_Driver * {__strong},std::function<void ()(void)>>,0>(v2);
      }
      while (v2 != v5);
      v2 = v5;
    }
  }
  v1[1] = v2;
  v6 = (void *)v1[3];
  v1[3] = 0;

}

id __copy_helper_block_ea8_32c83_ZTSKZN37Extrinsic_Driver_Connection_To_Server28_create_connection_to_serverEvE3__0(uint64_t a1, uint64_t a2)
{
  id result;

  result = *(id *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_ea8_32c83_ZTSKZN37Extrinsic_Driver_Connection_To_Server28_create_connection_to_serverEvE3__0(uint64_t a1)
{

}

uint64_t AudioServerPlugInRegisterRemote(uint64_t a1, void *a2)
{
  AMCP::Log::Scope_Registry *v3;
  void *v4;
  unsigned __int8 v5;
  NSObject *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  _opaque_pthread_t *v10;
  mach_port_t v11;
  unint64_t v12;
  char *v13;
  int v14;
  char *v15;
  const char *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD v22[3];
  _QWORD *v23;
  uint8_t buf[8];
  _BYTE v25[10];
  __int16 v26;
  int v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = v3;
  if ((v5 & 1) == 0)
  {
    if ((_DWORD)v3)
    {
      qword_1EDB88680 = 0;
      AudioServerPlugInRegisterRemote::connection = 0u;
      *(_OWORD *)algn_1EDB88670 = 0u;
      qword_1EDB88680 = (uint64_t)dispatch_queue_create("Extrinsic connection queue", 0);
    }
  }
  AMCP::Log::Scope_Registry::get(v3);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v6 = **(NSObject ***)buf;
  AMCP::Log::Scope::get_os_log_t(**(id **)buf);
  objc_claimAutoreleasedReturnValue();
  v7 = *(std::__shared_weak_count **)v25;
  if (*(_QWORD *)v25)
  {
    v8 = (unint64_t *)(*(_QWORD *)v25 + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v10 = pthread_self();
    v11 = pthread_mach_thread_np(v10);
    v12 = 0;
    v13 = 0;
    v14 = 47;
    do
    {
      v15 = &aLibraryCachesC_188[v12];
      if (v14 == 47)
        v13 = &aLibraryCachesC_188[v12];
      v14 = v15[1];
      if (!v15[1])
        break;
    }
    while (v12++ < 0xFFF);
    if (v13)
      v17 = v13 + 1;
    else
      v17 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Audio_Server_PlugIn_Registration.mm";
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)&buf[4] = v11;
    *(_WORD *)v25 = 2080;
    *(_QWORD *)&v25[2] = v17;
    v26 = 1024;
    v27 = 233;
    v28 = 2048;
    v29 = a1;
    _os_log_impl(&dword_1B57BA000, v6, OS_LOG_TYPE_DEFAULT, "%6u %32s:%-5d Registering new remote driver connection, driver interface %p", buf, 0x22u);
  }

  _Block_copy(v4);
  v22[0] = &off_1E69A2020;
  v22[1] = a1;
  v22[2] = objc_claimAutoreleasedReturnValue();
  v23 = v22;
  v18 = Extrinsic_Driver_Connection_To_Server::register_new_driver((uint64_t)&AudioServerPlugInRegisterRemote::connection, a1, 0, (uint64_t)v22);
  v19 = v23;
  if (v23 == v22)
  {
    v20 = 4;
    v19 = v22;
    goto LABEL_22;
  }
  if (v23)
  {
    v20 = 5;
LABEL_22:
    (*(void (**)(void))(*v19 + 8 * v20))();
  }

  return v18;
}

void sub_1B5CB3110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  void *v12;
  uint64_t *v13;
  uint64_t *v15;
  uint64_t v16;

  v15 = a12;
  if (a12 == v13)
  {
    v16 = 4;
    v15 = &a9;
  }
  else
  {
    if (!a12)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_6:

  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AudioServerPlugInRegisterRemote::$_0,std::allocator<AudioServerPlugInRegisterRemote::$_0>,void ()(void)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<AudioServerPlugInRegisterRemote::$_0,std::allocator<AudioServerPlugInRegisterRemote::$_0>,void ()(void)>::~__func(uint64_t a1)
{

  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AudioServerPlugInRegisterRemote::$_0,std::allocator<AudioServerPlugInRegisterRemote::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  const void *v3;
  uint64_t v4;

  v2 = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(const void **)(a1 + 16);
  *v2 = &off_1E69A2020;
  v2[1] = v4;
  v2[2] = _Block_copy(v3);
  return v2;
}

void *std::__function::__func<AudioServerPlugInRegisterRemote::$_0,std::allocator<AudioServerPlugInRegisterRemote::$_0>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  const void *v3;
  uint64_t v4;
  void *result;

  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(const void **)(a1 + 16);
  *a2 = &off_1E69A2020;
  a2[1] = v4;
  result = _Block_copy(v3);
  a2[2] = result;
  return result;
}

void std::__function::__func<AudioServerPlugInRegisterRemote::$_0,std::allocator<AudioServerPlugInRegisterRemote::$_0>,void ()(void)>::destroy(uint64_t a1)
{

}

void std::__function::__func<AudioServerPlugInRegisterRemote::$_0,std::allocator<AudioServerPlugInRegisterRemote::$_0>,void ()(void)>::destroy_deallocate(id *a1)
{

  operator delete(a1);
}

void std::__function::__func<AudioServerPlugInRegisterRemote::$_0,std::allocator<AudioServerPlugInRegisterRemote::$_0>,void ()(void)>::operator()(AMCP::Log::Scope_Registry *a1)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  const void *v6;
  _opaque_pthread_t *v7;
  mach_port_t v8;
  unint64_t v9;
  char *v10;
  int v11;
  char *v12;
  const char *v14;
  uint64_t v15;
  id *v16;
  _BYTE v17[10];
  __int16 v18;
  int v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)a1 + 2))
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v16, "com.apple.coreaudio", "AMCP");
    v2 = *v16;
    AMCP::Log::Scope::get_os_log_t(*v16);
    objc_claimAutoreleasedReturnValue();
    v3 = *(std::__shared_weak_count **)v17;
    if (*(_QWORD *)v17)
    {
      v4 = (unint64_t *)(*(_QWORD *)v17 + 8);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 - 1, v4));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      v7 = pthread_self();
      v8 = pthread_mach_thread_np(v7);
      v9 = 0;
      v10 = 0;
      v11 = 47;
      do
      {
        v12 = &aLibraryCachesC_188[v9];
        if (v11 == 47)
          v10 = &aLibraryCachesC_188[v9];
        v11 = v12[1];
        if (!v12[1])
          break;
      }
      while (v9++ < 0xFFF);
      if (v10)
        v14 = v10 + 1;
      else
        v14 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Audio_Server_PlugIn_Registration.mm";
      v15 = *((_QWORD *)a1 + 1);
      LODWORD(v16) = 67109890;
      HIDWORD(v16) = v8;
      *(_WORD *)v17 = 2080;
      *(_QWORD *)&v17[2] = v14;
      v18 = 1024;
      v19 = 238;
      v20 = 2048;
      v21 = v15;
      _os_log_error_impl(&dword_1B57BA000, v2, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Calling the remote driver registration interruption handler, driver interface %p", (uint8_t *)&v16, 0x22u);
    }

    (*(void (**)(void))(*((_QWORD *)a1 + 2) + 16))();
    v6 = (const void *)*((_QWORD *)a1 + 2);
  }
  else
  {
    v6 = 0;
  }
  _Block_release(v6);
}

void sub_1B5CB3414(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AudioServerPlugInRegisterRemote::$_0,std::allocator<AudioServerPlugInRegisterRemote::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"Z31AudioServerPlugInRegisterRemoteE3$_0"))
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<AudioServerPlugInRegisterRemote::$_0,std::allocator<AudioServerPlugInRegisterRemote::$_0>,void ()(void)>::target_type()
{
}

uint64_t AudioServerPlugInMain()
{
  CFBundleRef MainBundle;
  CFTypeRef v1;
  const __CFArray *v2;
  CFIndex Count;
  CFIndex v4;
  CFIndex v5;
  unint64_t i;
  applesauce::CF::StringRef *v7;
  std::__shared_weak_count *v8;
  NSObject *v9;
  unint64_t *v10;
  unint64_t v11;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  unint64_t v14;
  char *v15;
  int v16;
  char *v17;
  BOOL v18;
  const char *v19;
  void *v20;
  void *p_p;
  uint8_t *v22;
  const __CFArray *v23;
  CFIndex v24;
  CFIndex v25;
  CFIndex v26;
  unint64_t v27;
  applesauce::CF::StringRef *v28;
  std::__shared_weak_count *v29;
  NSObject *v30;
  unint64_t *v31;
  unint64_t v32;
  _opaque_pthread_t *v33;
  mach_port_t v34;
  unint64_t v35;
  char *v36;
  int v37;
  char *v38;
  const char *v39;
  void *v40;
  void *v41;
  AMCP::Log::Scope_Registry *v42;
  AMCP::Log::Scope_Registry *v43;
  char *size;
  std::string::size_type v45;
  std::__shared_weak_count *v46;
  NSObject *v47;
  unint64_t *v48;
  unint64_t v49;
  _opaque_pthread_t *v50;
  mach_port_t v51;
  unint64_t v52;
  char *v53;
  int v54;
  char *v55;
  const char *v56;
  std::string::size_type v57;
  uint64_t v58;
  unint64_t v59;
  int64_t v60;
  unint64_t v61;
  uint64_t v62;
  AMCP::Log::Scope_Registry **v63;
  AMCP::Log::Scope_Registry *v64;
  int v65;
  void **v66;
  std::string::size_type v67;
  void *v68;
  AMCP::Log::Scope_Registry *v69;
  int v70;
  std::__shared_weak_count *v71;
  NSObject *v72;
  unint64_t *v73;
  unint64_t v74;
  _opaque_pthread_t *v75;
  mach_port_t v76;
  unint64_t v77;
  char *v78;
  int v79;
  char *v80;
  const char *v81;
  const __CFURL *v82;
  CFPlugInRef v83;
  AMCP::Log::Scope_Registry *v84;
  const __CFUUID *v85;
  AMCP::Log::Scope_Registry *v86;
  const __CFUUID *v87;
  const __CFUUID *v88;
  void *v89;
  void *v90;
  uint64_t (*v91)(void *, _QWORD, _QWORD, uint64_t *);
  const __CFUUID *v92;
  CFUUIDBytes v93;
  AMCP::Log::Scope_Registry *v94;
  uint64_t v95;
  unsigned __int8 v96;
  uint64_t v97;
  int v98;
  AMCP::Log::Scope_Registry *v99;
  uint64_t v100;
  uint64_t v102;
  id v103;
  _QWORD *v104;
  uint64_t v105;
  const __CFString *v106;
  NSObject *v107;
  _opaque_pthread_t *v108;
  mach_port_t v109;
  unint64_t v110;
  char *v111;
  int v112;
  char *v113;
  const char *v114;
  void *v115;
  NSObject *v116;
  _opaque_pthread_t *v117;
  mach_port_t v118;
  unint64_t v119;
  char *v120;
  int v121;
  char *v122;
  const char *v123;
  void *v124;
  NSObject *v125;
  _opaque_pthread_t *v126;
  mach_port_t v127;
  unint64_t v128;
  char *v129;
  int v130;
  char *v131;
  const char *v132;
  void *v133;
  NSObject *v134;
  _opaque_pthread_t *v135;
  mach_port_t v136;
  unint64_t v137;
  char *v138;
  int v139;
  char *v140;
  const char *v141;
  void *v142;
  NSObject *v143;
  _opaque_pthread_t *v144;
  mach_port_t v145;
  unint64_t v146;
  char *v147;
  int v148;
  char *v149;
  const char *v150;
  void *v151;
  NSObject *v152;
  _opaque_pthread_t *v153;
  mach_port_t v154;
  unint64_t v155;
  char *v156;
  int v157;
  char *v158;
  const char *v159;
  void *v160;
  NSObject *v161;
  _opaque_pthread_t *v162;
  mach_port_t v163;
  unint64_t v164;
  char *v165;
  int v166;
  char *v167;
  const char *v168;
  void *v169;
  std::runtime_error *v170;
  std::runtime_error *v171;
  std::runtime_error *v172;
  std::runtime_error *v173;
  std::runtime_error *v174;
  std::runtime_error *v175;
  std::runtime_error *exception;
  std::runtime_error *v177;
  std::runtime_error *v178;
  CFTypeRef v179;
  std::string theArray;
  std::runtime_error v181;
  const __CFURL *v182;
  CFTypeRef v183[2];
  CFTypeRef cf;
  CFTypeRef v185;
  CFTypeRef v186;
  char v187;
  char v188;
  uint64_t v189;
  CFTypeRef v190;
  CFTypeRef v191;
  std::string v192;
  void *__p;
  std::string v194;
  std::runtime_error v195;
  void *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  int v200;
  _QWORD v201[3];
  _QWORD *v202;
  uint8_t buf[8];
  _BYTE v204[10];
  __int16 v205;
  int v206;
  _BYTE v207[24];
  int v208;
  uint64_t v209;

  v209 = *MEMORY[0x1E0C80C00];
  v187 = 0;
  MainBundle = CFBundleGetMainBundle();
  mcp_applesauce::CF::BasicRef<mcp_applesauce::CF::BundleRef_Traits>::from_get(&v186, MainBundle);
  mcp_applesauce::CF::BundleRef_proxy::get_info_dictionary((applesauce::CF::DictionaryRef *)&v185, (__CFBundle *)v186);
  mcp_applesauce::CF::BundleRef_proxy::get_bundle_id((applesauce::CF::StringRef *)&cf, (__CFBundle *)v186);
  v1 = cf;
  if (cf)
    CFRetain(cf);
  v183[1] = v1;
  memset(&v192, 0, sizeof(v192));
  Sandbox_Extensions::cache_iokit_registry_token((Sandbox_Extensions *)&v192, "IOUserUserClient");
  if (v1)
    CFRetain(v1);
  v179 = v1;
  v191 = v1;
  if (!v185)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  *(_QWORD *)buf = 0;
  applesauce::CF::at_or<applesauce::CF::ArrayRef,__CFString const*>(&theArray, (const __CFDictionary *)v185, CFSTR("AudioServerPlugIn_IOKitUserClients"), buf);
  if (*(_QWORD *)buf)
    CFRelease(*(CFTypeRef *)buf);
  v2 = (const __CFArray *)theArray.__r_.__value_.__r.__words[0];
  if (theArray.__r_.__value_.__r.__words[0])
  {
    Count = CFArrayGetCount((CFArrayRef)theArray.__r_.__value_.__l.__data_);
    v4 = CFArrayGetCount(v2);
    if (!Count)
      goto LABEL_49;
    v5 = v4;
    for (i = 0; i != Count; ++i)
    {
      if (i == v5)
        break;
      v7 = applesauce::CF::details::at_to<applesauce::CF::StringRef>((applesauce::CF::StringRef *)&v181, v2, i);
      if (v181.__vftable)
      {
        AMCP::Log::Scope_Registry::get(v7);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v8 = *(std::__shared_weak_count **)v204;
        v9 = **(NSObject ***)buf;
        if (*(_QWORD *)v204)
        {
          v10 = (unint64_t *)(*(_QWORD *)v204 + 8);
          do
            v11 = __ldaxr(v10);
          while (__stlxr(v11 - 1, v10));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
        {
          v12 = pthread_self();
          v13 = pthread_mach_thread_np(v12);
          v14 = 0;
          v15 = 0;
          v16 = 47;
          do
          {
            v17 = &aLibraryCachesC_54[v14];
            if (v16 == 47)
              v15 = &aLibraryCachesC_54[v14];
            v16 = v17[1];
            if (!v17[1])
              break;
            v18 = v14++ >= 0xFFF;
          }
          while (!v18);
          if (v15)
            v19 = v15 + 1;
          else
            v19 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Audio_Server_PlugIn_Utilities.cpp";
          if (!v191)
          {
            v173 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v173, "Could not construct");
            __cxa_throw(v173, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          applesauce::CF::convert_to<std::string,0>((uint64_t)&v195, (const __CFString *)v191);
          if (SHIBYTE(v196) >= 0)
            v20 = &v195;
          else
            v20 = v195.__vftable;
          if (!v181.__vftable)
          {
            v172 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v172, "Could not construct");
            __cxa_throw(v172, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          applesauce::CF::convert_to<std::string,0>((uint64_t)&__p, (const __CFString *)v181.__vftable);
          p_p = &__p;
          if (v194.__r_.__value_.__s.__data_[15] < 0)
            p_p = __p;
          *(_DWORD *)buf = 67110146;
          *(_DWORD *)&buf[4] = v13;
          *(_WORD *)v204 = 2080;
          *(_QWORD *)&v204[2] = v19;
          v205 = 1024;
          v206 = 111;
          *(_WORD *)v207 = 2080;
          *(_QWORD *)&v207[2] = v20;
          *(_WORD *)&v207[10] = 2080;
          *(_QWORD *)&v207[12] = p_p;
          _os_log_impl(&dword_1B57BA000, v9, OS_LOG_TYPE_INFO, "%6u %32s:%-5d The plug-in named %s requires extending the sandbox for the IOKit user-client class %s.", buf, 0x2Cu);
          if (v194.__r_.__value_.__s.__data_[15] < 0)
            operator delete(__p);
          if (SHIBYTE(v196) < 0)
            operator delete(v195.__vftable);
        }
        if (!v181.__vftable)
        {
          v170 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v170, "Could not construct");
          __cxa_throw(v170, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        applesauce::CF::convert_to<std::string,0>((uint64_t)buf, (const __CFString *)v181.__vftable);
        if (v206 >= 0)
          v22 = buf;
        else
          v22 = *(uint8_t **)buf;
        Sandbox_Extensions::cache_iokit_registry_token((Sandbox_Extensions *)&v192, (const char *)v22);
        if (SHIBYTE(v206) < 0)
          operator delete(*(void **)buf);
        if (v181.__vftable)
          CFRelease(v181.__vftable);
      }
    }
    v2 = (const __CFArray *)theArray.__r_.__value_.__r.__words[0];
    if (theArray.__r_.__value_.__r.__words[0])
LABEL_49:
      CFRelease(v2);
  }
  if (v191)
    CFRelease(v191);
  if (v179)
    CFRetain(v179);
  v190 = v179;
  if (!v185)
  {
    v177 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v177, "Could not construct");
    __cxa_throw(v177, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  *(_QWORD *)buf = 0;
  applesauce::CF::at_or<applesauce::CF::ArrayRef,__CFString const*>(&theArray, (const __CFDictionary *)v185, CFSTR("AudioServerPlugIn_MachServices"), buf);
  if (*(_QWORD *)buf)
    CFRelease(*(CFTypeRef *)buf);
  v23 = (const __CFArray *)theArray.__r_.__value_.__r.__words[0];
  if (!theArray.__r_.__value_.__r.__words[0])
    goto LABEL_130;
  v24 = CFArrayGetCount((CFArrayRef)theArray.__r_.__value_.__l.__data_);
  v25 = CFArrayGetCount(v23);
  if (!v24)
    goto LABEL_129;
  v26 = v25;
  v27 = 0;
  while (v27 != v26)
  {
    v28 = applesauce::CF::details::at_to<applesauce::CF::StringRef>((applesauce::CF::StringRef *)&v181, v23, v27);
    if (v181.__vftable)
    {
      AMCP::Log::Scope_Registry::get(v28);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v29 = *(std::__shared_weak_count **)v204;
      v30 = **(NSObject ***)buf;
      if (*(_QWORD *)v204)
      {
        v31 = (unint64_t *)(*(_QWORD *)v204 + 8);
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
      {
        v33 = pthread_self();
        v34 = pthread_mach_thread_np(v33);
        v35 = 0;
        v36 = 0;
        v37 = 47;
        do
        {
          v38 = &aLibraryCachesC_54[v35];
          if (v37 == 47)
            v36 = &aLibraryCachesC_54[v35];
          v37 = v38[1];
          if (!v38[1])
            break;
          v18 = v35++ >= 0xFFF;
        }
        while (!v18);
        if (v36)
          v39 = v36 + 1;
        else
          v39 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Audio_Server_PlugIn_Utilities.cpp";
        if (!v190)
        {
          v175 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v175, "Could not construct");
          __cxa_throw(v175, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        applesauce::CF::convert_to<std::string,0>((uint64_t)&v195, (const __CFString *)v190);
        if (SHIBYTE(v196) >= 0)
          v40 = &v195;
        else
          v40 = v195.__vftable;
        if (!v181.__vftable)
        {
          v174 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v174, "Could not construct");
          __cxa_throw(v174, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        applesauce::CF::convert_to<std::string,0>((uint64_t)&__p, (const __CFString *)v181.__vftable);
        v41 = &__p;
        if (v194.__r_.__value_.__s.__data_[15] < 0)
          v41 = __p;
        *(_DWORD *)buf = 67110146;
        *(_DWORD *)&buf[4] = v34;
        *(_WORD *)v204 = 2080;
        *(_QWORD *)&v204[2] = v39;
        v205 = 1024;
        v206 = 124;
        *(_WORD *)v207 = 2080;
        *(_QWORD *)&v207[2] = v40;
        *(_WORD *)&v207[10] = 2080;
        *(_QWORD *)&v207[12] = v41;
        _os_log_impl(&dword_1B57BA000, v30, OS_LOG_TYPE_INFO, "%6u %32s:%-5d The plug-in named %s requires extending the sandbox for the mach service named %s.", buf, 0x2Cu);
        if (v194.__r_.__value_.__s.__data_[15] < 0)
          operator delete(__p);
        if (SHIBYTE(v196) < 0)
          operator delete(v195.__vftable);
      }
      if (!v181.__vftable)
      {
        v171 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v171, "Could not construct");
        __cxa_throw(v171, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::convert_to<std::string,0>((uint64_t)buf, (const __CFString *)v181.__vftable);
      v42 = (AMCP::Log::Scope_Registry *)sandbox_extension_issue_mach();
      v43 = v42;
      if (SHIBYTE(v206) < 0)
      {
        operator delete(*(void **)buf);
        if (!v43)
          goto LABEL_94;
LABEL_91:
        size = (char *)v192.__r_.__value_.__l.__size_;
        if (v192.__r_.__value_.__l.__size_ >= v192.__r_.__value_.__r.__words[2])
        {
          v57 = v192.__r_.__value_.__r.__words[0];
          v58 = (uint64_t)(v192.__r_.__value_.__l.__size_ - v192.__r_.__value_.__r.__words[0]) >> 3;
          v59 = v58 + 1;
          if ((unint64_t)(v58 + 1) >> 61)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          v60 = v192.__r_.__value_.__r.__words[2] - v192.__r_.__value_.__r.__words[0];
          if ((uint64_t)(v192.__r_.__value_.__r.__words[2] - v192.__r_.__value_.__r.__words[0]) >> 2 > v59)
            v59 = v60 >> 2;
          if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8)
            v61 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v61 = v59;
          if (v61)
            v61 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v61);
          else
            v62 = 0;
          v63 = (AMCP::Log::Scope_Registry **)(v61 + 8 * v58);
          *v63 = v43;
          v45 = (std::string::size_type)(v63 + 1);
          if (size != (char *)v57)
          {
            do
            {
              v64 = (AMCP::Log::Scope_Registry *)*((_QWORD *)size - 1);
              size -= 8;
              *--v63 = v64;
            }
            while (size != (char *)v57);
            size = (char *)v192.__r_.__value_.__r.__words[0];
          }
          v192.__r_.__value_.__r.__words[0] = (std::string::size_type)v63;
          v192.__r_.__value_.__r.__words[2] = v61 + 8 * v62;
          if (size)
            operator delete(size);
        }
        else
        {
          *(_QWORD *)v192.__r_.__value_.__l.__size_ = v43;
          v45 = (std::string::size_type)(size + 8);
        }
        v192.__r_.__value_.__l.__size_ = v45;
      }
      else
      {
        if (v42)
          goto LABEL_91;
LABEL_94:
        AMCP::Log::Scope_Registry::get(v42);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v46 = *(std::__shared_weak_count **)v204;
        v47 = **(NSObject ***)buf;
        if (*(_QWORD *)v204)
        {
          v48 = (unint64_t *)(*(_QWORD *)v204 + 8);
          do
            v49 = __ldaxr(v48);
          while (__stlxr(v49 - 1, v48));
          if (!v49)
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }
        if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
        {
          v50 = pthread_self();
          v51 = pthread_mach_thread_np(v50);
          v52 = 0;
          v53 = 0;
          v54 = 47;
          do
          {
            v55 = &aLibraryCachesC_54[v52];
            if (v54 == 47)
              v53 = &aLibraryCachesC_54[v52];
            v54 = v55[1];
            if (!v55[1])
              break;
            v18 = v52++ >= 0xFFF;
          }
          while (!v18);
          *(_DWORD *)buf = 67109634;
          if (v53)
            v56 = v53 + 1;
          else
            v56 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Audio_Server_PlugIn_Utilities.cpp";
          *(_DWORD *)&buf[4] = v51;
          *(_WORD *)v204 = 2080;
          *(_QWORD *)&v204[2] = v56;
          v205 = 1024;
          v206 = 132;
          _os_log_debug_impl(&dword_1B57BA000, v47, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d sandbox_extension_issue_mach not granted.", buf, 0x18u);
        }
      }
      if (v181.__vftable)
        CFRelease(v181.__vftable);
    }
    if (++v27 == v24)
      break;
  }
  v23 = (const __CFArray *)theArray.__r_.__value_.__r.__words[0];
  if (theArray.__r_.__value_.__r.__words[0])
LABEL_129:
    CFRelease(v23);
LABEL_130:
  if (v190)
    CFRelease(v190);
  *(_QWORD *)buf = 0;
  v65 = sandbox_init("com.apple.audio.coreaudiod", 1uLL, (char **)buf);
  if (v65 == -1)
  {
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "sandbox_init: %s\n", *(const char **)buf);
    sandbox_free_error(*(char **)buf);
    goto LABEL_154;
  }
  v67 = v192.__r_.__value_.__l.__size_;
  v66 = (void **)v192.__r_.__value_.__r.__words[0];
  if (v192.__r_.__value_.__r.__words[0] != v192.__r_.__value_.__l.__size_)
  {
    do
    {
      v68 = *v66;
      if (sandbox_extension_consume() == -1)
      {
        v69 = (AMCP::Log::Scope_Registry *)__error();
        v70 = *(_DWORD *)v69;
        AMCP::Log::Scope_Registry::get(v69);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v71 = *(std::__shared_weak_count **)v204;
        v72 = **(NSObject ***)buf;
        if (*(_QWORD *)v204)
        {
          v73 = (unint64_t *)(*(_QWORD *)v204 + 8);
          do
            v74 = __ldaxr(v73);
          while (__stlxr(v74 - 1, v73));
          if (!v74)
          {
            ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
            std::__shared_weak_count::__release_weak(v71);
          }
        }
        if (os_log_type_enabled(v72, OS_LOG_TYPE_DEBUG))
        {
          v75 = pthread_self();
          v76 = pthread_mach_thread_np(v75);
          v77 = 0;
          v78 = 0;
          v79 = 47;
          do
          {
            v80 = &aLibraryCachesC_54[v77];
            if (v79 == 47)
              v78 = &aLibraryCachesC_54[v77];
            v79 = v80[1];
            if (!v80[1])
              break;
            v18 = v77++ >= 0xFFF;
          }
          while (!v18);
          *(_DWORD *)buf = 67109890;
          if (v78)
            v81 = v78 + 1;
          else
            v81 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Audio_Server_PlugIn_Utilities.cpp";
          *(_DWORD *)&buf[4] = v76;
          *(_WORD *)v204 = 2080;
          *(_QWORD *)&v204[2] = v81;
          v205 = 1024;
          v206 = 146;
          *(_WORD *)v207 = 1024;
          *(_DWORD *)&v207[2] = v70;
          _os_log_debug_impl(&dword_1B57BA000, v72, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d sandbox_extension_consume failed with errno = %d", buf, 0x1Eu);
        }
      }
      free(v68);
      ++v66;
    }
    while (v66 != (void **)v67);
LABEL_154:
    v66 = (void **)v192.__r_.__value_.__r.__words[0];
  }
  if (v66)
    operator delete(v66);
  if (v179)
    CFRelease(v179);
  if (v65 == -1)
  {
    if (cf)
      CFRelease(cf);
    if (v185)
      CFRelease(v185);
    if (v186)
      CFRelease(v186);
    return 1;
  }
  else
  {
    mcp_applesauce::CF::BundleRef_proxy::get_bundle_url((applesauce::CF::URLRef *)v183, (__CFBundle *)v186);
    v82 = (const __CFURL *)v183[0];
    if (v183[0])
      CFRetain(v183[0]);
    v182 = v82;
    v83 = CFPlugInCreate(0, v82);
    v84 = (AMCP::Log::Scope_Registry *)mcp_applesauce::CF::BasicRef<mcp_applesauce::CF::PlugInRef_Traits>::BasicRef(&v181, v83);
    if (!v181.__vftable)
    {
      AMCP::Log::Scope_Registry::get(v84);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v107 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v107, OS_LOG_TYPE_ERROR))
      {
        v108 = pthread_self();
        v109 = pthread_mach_thread_np(v108);
        v110 = 0;
        v111 = 0;
        v112 = 47;
        do
        {
          v113 = &aLibraryCachesC_54[v110];
          if (v112 == 47)
            v111 = &aLibraryCachesC_54[v110];
          v112 = v113[1];
          if (!v113[1])
            break;
          v18 = v110++ >= 0xFFF;
        }
        while (!v18);
        if (v111)
          v114 = v111 + 1;
        else
          v114 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Audio_Server_PlugIn_Utilities.cpp";
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v109;
        *(_WORD *)v204 = 2080;
        *(_QWORD *)&v204[2] = v114;
        v205 = 1024;
        v206 = 47;
        *(_WORD *)v207 = 2080;
        *(_QWORD *)&v207[2] = "!plugin.is_valid()";
        _os_log_error_impl(&dword_1B57BA000, v107, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s No plug-in", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v191);
      v115 = __cxa_allocate_exception(0x40uLL);
      std::runtime_error::runtime_error((std::runtime_error *)&theArray, "No plug-in");
      std::runtime_error::runtime_error(&v195, (const std::runtime_error *)&theArray);
      v197 = 0;
      v198 = 0;
      v199 = 0;
      v200 = -1;
      v195.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
      v196 = &unk_1E69A1FE0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v195);
      *(_QWORD *)&v207[8] = "AudioServerPlugInDriverRef get_asp_interface(AMCP::CF::URL)";
      *(_QWORD *)&v207[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Audio_Server_PlugIn_Utilities.cpp";
      v208 = 47;
      applesauce::backtrace::snapshot_N<64>::snapshot_N(&v192.__r_.__value_.__l.__data_);
      v194 = v192;
      __p = off_1E69A20A0;
      memset(&v192, 0, sizeof(v192));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&__p);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v115, (uint64_t)buf);
    }
    v85 = CFUUIDGetConstantUUIDWithBytes(0, 0x44u, 0x3Au, 0xBAu, 0xB8u, 0xE7u, 0xB3u, 0x49u, 0x1Au, 0xB9u, 0x85u, 0xBEu, 0xB9u, 0x18u, 0x70u, 0x30u, 0xDBu);
    mcp_applesauce::CF::PlugInRef_proxy::find_factories_for_type((applesauce::CF::ArrayRef *)&v191, (const __CFUUID *)v181.__vftable, v85);
    if (!v191)
    {
      AMCP::Log::Scope_Registry::get(0);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v116 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v116, OS_LOG_TYPE_ERROR))
      {
        v117 = pthread_self();
        v118 = pthread_mach_thread_np(v117);
        v119 = 0;
        v120 = 0;
        v121 = 47;
        do
        {
          v122 = &aLibraryCachesC_54[v119];
          if (v121 == 47)
            v120 = &aLibraryCachesC_54[v119];
          v121 = v122[1];
          if (!v122[1])
            break;
          v18 = v119++ >= 0xFFF;
        }
        while (!v18);
        if (v120)
          v123 = v120 + 1;
        else
          v123 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Audio_Server_PlugIn_Utilities.cpp";
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v118;
        *(_WORD *)v204 = 2080;
        *(_QWORD *)&v204[2] = v123;
        v205 = 1024;
        v206 = 49;
        *(_WORD *)v207 = 2080;
        *(_QWORD *)&v207[2] = "!factory_array.is_valid()";
        _os_log_error_impl(&dword_1B57BA000, v116, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s No factories array", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v190);
      v124 = __cxa_allocate_exception(0x40uLL);
      std::runtime_error::runtime_error((std::runtime_error *)&theArray, "No factories array");
      std::runtime_error::runtime_error(&v195, (const std::runtime_error *)&theArray);
      v197 = 0;
      v198 = 0;
      v199 = 0;
      v200 = -1;
      v195.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
      v196 = &unk_1E69A1FE0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v195);
      *(_QWORD *)&v207[8] = "AudioServerPlugInDriverRef get_asp_interface(AMCP::CF::URL)";
      *(_QWORD *)&v207[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Audio_Server_PlugIn_Utilities.cpp";
      v208 = 49;
      applesauce::backtrace::snapshot_N<64>::snapshot_N(&v192.__r_.__value_.__l.__data_);
      v194 = v192;
      __p = off_1E69A20A0;
      memset(&v192, 0, sizeof(v192));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&__p);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v124, (uint64_t)buf);
    }
    if (!CFArrayGetCount((CFArrayRef)v191))
    {
      AMCP::Log::Scope_Registry::get(0);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v125 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v125, OS_LOG_TYPE_ERROR))
      {
        v126 = pthread_self();
        v127 = pthread_mach_thread_np(v126);
        v128 = 0;
        v129 = 0;
        v130 = 47;
        do
        {
          v131 = &aLibraryCachesC_54[v128];
          if (v130 == 47)
            v129 = &aLibraryCachesC_54[v128];
          v130 = v131[1];
          if (!v131[1])
            break;
          v18 = v128++ >= 0xFFF;
        }
        while (!v18);
        if (v129)
          v132 = v129 + 1;
        else
          v132 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Audio_Server_PlugIn_Utilities.cpp";
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v127;
        *(_WORD *)v204 = 2080;
        *(_QWORD *)&v204[2] = v132;
        v205 = 1024;
        v206 = 50;
        *(_WORD *)v207 = 2080;
        *(_QWORD *)&v207[2] = "factory_array->get_size() == 0";
        _os_log_error_impl(&dword_1B57BA000, v125, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s No factories", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v190);
      v133 = __cxa_allocate_exception(0x40uLL);
      std::runtime_error::runtime_error((std::runtime_error *)&theArray, "No factories");
      std::runtime_error::runtime_error(&v195, (const std::runtime_error *)&theArray);
      v197 = 0;
      v198 = 0;
      v199 = 0;
      v200 = -1;
      v195.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
      v196 = &unk_1E69A1FE0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v195);
      *(_QWORD *)&v207[8] = "AudioServerPlugInDriverRef get_asp_interface(AMCP::CF::URL)";
      *(_QWORD *)&v207[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Audio_Server_PlugIn_Utilities.cpp";
      v208 = 50;
      applesauce::backtrace::snapshot_N<64>::snapshot_N(&v192.__r_.__value_.__l.__data_);
      v194 = v192;
      __p = off_1E69A20A0;
      memset(&v192, 0, sizeof(v192));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&__p);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v133, (uint64_t)buf);
    }
    if (!v191)
    {
      v178 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v178, "Could not construct");
      __cxa_throw(v178, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v86 = (AMCP::Log::Scope_Registry *)applesauce::CF::details::at_to<applesauce::CF::TypeRef>(&v190, (CFArrayRef)v191, 0);
    v87 = (const __CFUUID *)v190;
    if (!v190)
    {
      AMCP::Log::Scope_Registry::get(v86);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v134 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v134, OS_LOG_TYPE_ERROR))
      {
        v135 = pthread_self();
        v136 = pthread_mach_thread_np(v135);
        v137 = 0;
        v138 = 0;
        v139 = 47;
        do
        {
          v140 = &aLibraryCachesC_54[v137];
          if (v139 == 47)
            v138 = &aLibraryCachesC_54[v137];
          v139 = v140[1];
          if (!v140[1])
            break;
          v18 = v137++ >= 0xFFF;
        }
        while (!v18);
        if (v138)
          v141 = v138 + 1;
        else
          v141 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Audio_Server_PlugIn_Utilities.cpp";
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v136;
        *(_WORD *)v204 = 2080;
        *(_QWORD *)&v204[2] = v141;
        v205 = 1024;
        v206 = 53;
        *(_WORD *)v207 = 2080;
        *(_QWORD *)&v207[2] = "!factory_uuid.is_valid()";
        _os_log_error_impl(&dword_1B57BA000, v134, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Couldn't get the factory uuid", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v189);
      v142 = __cxa_allocate_exception(0x40uLL);
      std::runtime_error::runtime_error((std::runtime_error *)&theArray, "Couldn't find the factory uuid");
      std::runtime_error::runtime_error(&v195, (const std::runtime_error *)&theArray);
      v197 = 0;
      v198 = 0;
      v199 = 0;
      v200 = -1;
      v195.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
      v196 = &unk_1E69A1FE0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v195);
      *(_QWORD *)&v207[8] = "AudioServerPlugInDriverRef get_asp_interface(AMCP::CF::URL)";
      *(_QWORD *)&v207[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Audio_Server_PlugIn_Utilities.cpp";
      v208 = 53;
      applesauce::backtrace::snapshot_N<64>::snapshot_N(&v192.__r_.__value_.__l.__data_);
      v194 = v192;
      __p = off_1E69A20A0;
      memset(&v192, 0, sizeof(v192));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&__p);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v142, (uint64_t)buf);
    }
    v88 = CFUUIDGetConstantUUIDWithBytes(0, 0x44u, 0x3Au, 0xBAu, 0xB8u, 0xE7u, 0xB3u, 0x49u, 0x1Au, 0xB9u, 0x85u, 0xBEu, 0xB9u, 0x18u, 0x70u, 0x30u, 0xDBu);
    v89 = CFPlugInInstanceCreate(0, v87, v88);
    v90 = v89;
    if (!v89)
    {
      AMCP::Log::Scope_Registry::get(0);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v143 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v143, OS_LOG_TYPE_ERROR))
      {
        v144 = pthread_self();
        v145 = pthread_mach_thread_np(v144);
        v146 = 0;
        v147 = 0;
        v148 = 47;
        do
        {
          v149 = &aLibraryCachesC_54[v146];
          if (v148 == 47)
            v147 = &aLibraryCachesC_54[v146];
          v148 = v149[1];
          if (!v149[1])
            break;
          v18 = v146++ >= 0xFFF;
        }
        while (!v18);
        if (v147)
          v150 = v147 + 1;
        else
          v150 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Audio_Server_PlugIn_Utilities.cpp";
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v145;
        *(_WORD *)v204 = 2080;
        *(_QWORD *)&v204[2] = v150;
        v205 = 1024;
        v206 = 56;
        *(_WORD *)v207 = 2080;
        *(_QWORD *)&v207[2] = "(iunknown_interface) == nullptr";
        _os_log_error_impl(&dword_1B57BA000, v143, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Couldn't create the IUnknown interface", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v189);
      v151 = __cxa_allocate_exception(0x40uLL);
      std::runtime_error::runtime_error((std::runtime_error *)&theArray, "Couldn't create the IUnknown interface");
      std::runtime_error::runtime_error(&v195, (const std::runtime_error *)&theArray);
      v197 = 0;
      v198 = 0;
      v199 = 0;
      v200 = -1;
      v195.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
      v196 = &unk_1E69A1FE0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v195);
      *(_QWORD *)&v207[8] = "AudioServerPlugInDriverRef get_asp_interface(AMCP::CF::URL)";
      *(_QWORD *)&v207[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Audio_Server_PlugIn_Utilities.cpp";
      v208 = 56;
      applesauce::backtrace::snapshot_N<64>::snapshot_N(&v192.__r_.__value_.__l.__data_);
      v194 = v192;
      __p = off_1E69A20A0;
      memset(&v192, 0, sizeof(v192));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&__p);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v151, (uint64_t)buf);
    }
    v189 = 0;
    v91 = *(uint64_t (**)(void *, _QWORD, _QWORD, uint64_t *))(*(_QWORD *)v89 + 8);
    v92 = CFUUIDGetConstantUUIDWithBytes(0, 0xEEu, 0xA5u, 0x77u, 0x3Du, 0xCCu, 0x43u, 0x49u, 0xF1u, 0x8Eu, 0, 0x8Fu, 0x96u, 0xE7u, 0xD2u, 0x3Bu, 0x17u);
    v93 = CFUUIDGetUUIDBytes(v92);
    v94 = (AMCP::Log::Scope_Registry *)v91(v90, *(_QWORD *)&v93.byte0, *(_QWORD *)&v93.byte8, &v189);
    v95 = v189;
    if (!v189)
    {
      AMCP::Log::Scope_Registry::get(v94);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v152 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v152, OS_LOG_TYPE_ERROR))
      {
        v153 = pthread_self();
        v154 = pthread_mach_thread_np(v153);
        v155 = 0;
        v156 = 0;
        v157 = 47;
        do
        {
          v158 = &aLibraryCachesC_54[v155];
          if (v157 == 47)
            v156 = &aLibraryCachesC_54[v155];
          v157 = v158[1];
          if (!v158[1])
            break;
          v18 = v155++ >= 0xFFF;
        }
        while (!v18);
        if (v156)
          v159 = v156 + 1;
        else
          v159 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Audio_Server_PlugIn_Utilities.cpp";
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v154;
        *(_WORD *)v204 = 2080;
        *(_QWORD *)&v204[2] = v159;
        v205 = 1024;
        v206 = 61;
        *(_WORD *)v207 = 2080;
        *(_QWORD *)&v207[2] = "(asp_interface) == nullptr";
        _os_log_error_impl(&dword_1B57BA000, v152, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Couldn't find the driver interface", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v188);
      v160 = __cxa_allocate_exception(0x40uLL);
      std::runtime_error::runtime_error((std::runtime_error *)&theArray, "Couldn't find the driver interface");
      std::runtime_error::runtime_error(&v195, (const std::runtime_error *)&theArray);
      v197 = 0;
      v198 = 0;
      v199 = 0;
      v200 = -1;
      v195.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
      v196 = &unk_1E69A1FE0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v195);
      *(_QWORD *)&v207[8] = "AudioServerPlugInDriverRef get_asp_interface(AMCP::CF::URL)";
      *(_QWORD *)&v207[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Audio_Server_PlugIn_Utilities.cpp";
      v208 = 61;
      applesauce::backtrace::snapshot_N<64>::snapshot_N(&v192.__r_.__value_.__l.__data_);
      v194 = v192;
      __p = off_1E69A20A0;
      memset(&v192, 0, sizeof(v192));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&__p);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v160, (uint64_t)buf);
    }
    (*(void (**)(void *))(*(_QWORD *)v90 + 24))(v90);
    CFRelease(v87);
    if (v191)
      CFRelease(v191);
    if (v181.__vftable)
      CFRelease(v181.__vftable);
    if (v82)
      CFRelease(v82);
    if ((v96 & 1) == 0
    {
      qword_1EF131698 = 0;
      AudioServerPlugInRegisterRemoteUsingDriverService(AudioServerPlugInDriverInterface **,void({block_pointer})(void))::connection = 0u;
      unk_1EF131688 = 0u;
      qword_1EF131698 = (uint64_t)dispatch_queue_create("Extrinsic connection queue", 0);
    }
    _Block_copy(&__block_literal_global_15440);
    v97 = objc_claimAutoreleasedReturnValue();
    *(_QWORD *)buf = &off_1E69A1E50;
    *(_QWORD *)v204 = v97;
    *(_QWORD *)v207 = buf;
    v98 = Extrinsic_Driver_Connection_To_Server::register_new_driver((uint64_t)&AudioServerPlugInRegisterRemoteUsingDriverService(AudioServerPlugInDriverInterface **,void({block_pointer})(void))::connection, v95, 1, (uint64_t)buf);
    v99 = *(AMCP::Log::Scope_Registry **)v207;
    if (*(uint8_t **)v207 == buf)
    {
      v100 = 4;
      v99 = (AMCP::Log::Scope_Registry *)buf;
LABEL_187:
      v99 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(void))(*(_QWORD *)v99 + 8 * v100))();
    }
    else if (*(_QWORD *)v207)
    {
      v100 = 5;
      goto LABEL_187;
    }
    if (v98)
    {
      AMCP::Log::Scope_Registry::get(v99);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v161 = **(NSObject ***)buf;
      AMCP::Log::Scope::get_os_log_t(**(id **)buf);
      objc_claimAutoreleasedReturnValue();
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v161, OS_LOG_TYPE_ERROR))
      {
        v162 = pthread_self();
        v163 = pthread_mach_thread_np(v162);
        v164 = 0;
        v165 = 0;
        v166 = 47;
        do
        {
          v167 = &aLibraryCachesC_188[v164];
          if (v166 == 47)
            v165 = &aLibraryCachesC_188[v164];
          v166 = v167[1];
          if (!v167[1])
            break;
          v18 = v164++ >= 0xFFF;
        }
        while (!v18);
        if (v165)
          v168 = v165 + 1;
        else
          v168 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Audio_Server_PlugIn_Registration.mm";
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v163;
        *(_WORD *)v204 = 2080;
        *(_QWORD *)&v204[2] = v168;
        v205 = 1024;
        v206 = 288;
        *(_WORD *)v207 = 2080;
        *(_QWORD *)&v207[2] = "(status) != 0";
        _os_log_error_impl(&dword_1B57BA000, v161, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Error registering remote", buf, 0x22u);
      }

      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v191);
      v169 = __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"Error registering remote", (uint64_t)&v192);
      std::runtime_error::runtime_error(&v181, &v192);
      std::runtime_error::runtime_error(&v195, &v181);
      v197 = 0;
      v198 = 0;
      v199 = 0;
      v200 = -1;
      v195.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
      v196 = &unk_1E69A1FE0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v195);
      *(_QWORD *)&v207[8] = "int AudioServerPlugInMain(int, char ** _Nullable)";
      *(_QWORD *)&v207[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Audio_Server_PlugIn_Registration.mm";
      v208 = 288;
      applesauce::backtrace::snapshot_N<64>::snapshot_N(&theArray.__r_.__value_.__l.__data_);
      v194 = theArray;
      __p = off_1E69A20A0;
      memset(&theArray, 0, sizeof(theArray));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&__p);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v169, (uint64_t)buf);
    }
    get_signal_port();
    v102 = MEMORY[0x1E0C80D38];
    v103 = MEMORY[0x1E0C80D38];
    *(_QWORD *)buf = v102;
    v201[0] = &off_1E69A2230;
    v201[1] = &v187;
    v202 = v201;
    AMCP::Utility::Mach_Port::set_receive_handler((unsigned int *)&get_signal_port(void)::s_signal_port, (dispatch_queue_t *)buf, (uint64_t)v201);
    v104 = v202;
    if (v202 == v201)
    {
      v105 = 4;
      v104 = v201;
LABEL_193:
      (*(void (**)(void))(*v104 + 8 * v105))();
    }
    else if (v202)
    {
      v105 = 5;
      goto LABEL_193;
    }

    *(_QWORD *)buf = signal_handler;
    *(_QWORD *)v204 = 0x200000000;
    sigaction(13, (const sigaction *)buf, 0);
    sigaction(15, (const sigaction *)buf, 0);
    v106 = (const __CFString *)*MEMORY[0x1E0C9B288];
    while (!v187)
      CFRunLoopRunInMode(v106, 1.0e10, 0);
    if (v183[0])
      CFRelease(v183[0]);
    if (cf)
      CFRelease(cf);
    if (v185)
      CFRelease(v185);
    if (v186)
      CFRelease(v186);
    return 0;
  }
}

void sub_1B5CB502C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,const void *a24,uint64_t a25,const void *a26,const void *a27,const void *a28)
{
  void *v28;

  if (a2)
  {

    applesauce::CF::URLRef::~URLRef(&a24);
    applesauce::CF::StringRef::~StringRef(&a26);
    applesauce::CF::DictionaryRef::~DictionaryRef(&a27);
    mcp_applesauce::CF::BasicRef<mcp_applesauce::CF::BundleRef_Traits>::~BasicRef(&a28);
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B5CB4118);
  }
  _Unwind_Resume(a1);
}

void get_signal_port(void)
{
  unsigned __int8 v0;
  AMCP::Utility::Mach_Port *v1;

  if ((v0 & 1) == 0)
  {
    if ((_DWORD)v1)
    {
      get_signal_port(void)::s_signal_port = AMCP::Utility::Mach_Port::create_port(v1);
      word_1EF1316AC = 257;
      qword_1EF1316B0 = 850045863;
      xmmword_1EF1316B8 = 0u;
      unk_1EF1316C8 = 0u;
      xmmword_1EF1316D8 = 0u;
      unk_1EF1316E8 = 0u;
    }
  }
}

void sub_1B5CB59AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void signal_handler(mach_msg_id_t a1)
{
  mach_msg_header_t msg;

  get_signal_port();
  msg.msgh_id = a1;
  if (get_signal_port(void)::s_signal_port)
  {
    *(_QWORD *)&msg.msgh_bits = 0x1800000013;
    msg.msgh_local_port = 0;
    msg.msgh_voucher_port = 0;
    msg.msgh_remote_port = get_signal_port(void)::s_signal_port;
    if (mach_msg(&msg, 1, 0x18u, 0, 0, 0, 0))
    {
      if ((msg.msgh_bits & 0x1F) != 0x13)
        mach_port_deallocate(*MEMORY[0x1E0C83DA0], msg.msgh_remote_port);
    }
  }
}

void std::__function::__func<AudioServerPlugInMain::$_0,std::allocator<AudioServerPlugInMain::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AudioServerPlugInMain::$_0,std::allocator<AudioServerPlugInMain::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E69A2230;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AudioServerPlugInMain::$_0,std::allocator<AudioServerPlugInMain::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E69A2230;
  a2[1] = v2;
  return result;
}

void std::__function::__func<AudioServerPlugInMain::$_0,std::allocator<AudioServerPlugInMain::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  __CFRunLoop *Main;
  mach_msg_header_t v3;

  get_signal_port();
  if (!AMCP::Utility::Mach_Port::receive_message(get_signal_port(void)::s_signal_port, 0x20u, &v3, 0)
    && (v3.msgh_id | 2) == 0xF)
  {
    **(_BYTE **)(a1 + 8) = 1;
    Main = CFRunLoopGetMain();
    CFRunLoopStop(Main);
  }
}

uint64_t std::__function::__func<AudioServerPlugInMain::$_0,std::allocator<AudioServerPlugInMain::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"Z21AudioServerPlugInMainE3$_0"))
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<AudioServerPlugInMain::$_0,std::allocator<AudioServerPlugInMain::$_0>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AudioServerPlugInRegisterRemoteUsingDriverService(AudioServerPlugInDriverInterface **,void({block_pointer})(void))::$_0,std::allocator<AudioServerPlugInRegisterRemoteUsingDriverService(AudioServerPlugInDriverInterface **,void({block_pointer})(void))::$_0>,void ()(void)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<AudioServerPlugInRegisterRemoteUsingDriverService(AudioServerPlugInDriverInterface **,void({block_pointer})(void))::$_0,std::allocator<AudioServerPlugInRegisterRemoteUsingDriverService(AudioServerPlugInDriverInterface **,void({block_pointer})(void))::$_0>,void ()(void)>::~__func(uint64_t a1)
{

  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AudioServerPlugInRegisterRemoteUsingDriverService(AudioServerPlugInDriverInterface **,void({block_pointer})(void))::$_0,std::allocator<AudioServerPlugInRegisterRemoteUsingDriverService(AudioServerPlugInDriverInterface **,void({block_pointer})(void))::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = &off_1E69A1E50;
  v2[1] = _Block_copy(*(const void **)(a1 + 8));
  return v2;
}

void *std::__function::__func<AudioServerPlugInRegisterRemoteUsingDriverService(AudioServerPlugInDriverInterface **,void({block_pointer})(void))::$_0,std::allocator<AudioServerPlugInRegisterRemoteUsingDriverService(AudioServerPlugInDriverInterface **,void({block_pointer})(void))::$_0>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  void *result;

  *a2 = &off_1E69A1E50;
  result = _Block_copy(*(const void **)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<AudioServerPlugInRegisterRemoteUsingDriverService(AudioServerPlugInDriverInterface **,void({block_pointer})(void))::$_0,std::allocator<AudioServerPlugInRegisterRemoteUsingDriverService(AudioServerPlugInDriverInterface **,void({block_pointer})(void))::$_0>,void ()(void)>::destroy(uint64_t a1)
{

}

void std::__function::__func<AudioServerPlugInRegisterRemoteUsingDriverService(AudioServerPlugInDriverInterface **,void({block_pointer})(void))::$_0,std::allocator<AudioServerPlugInRegisterRemoteUsingDriverService(AudioServerPlugInDriverInterface **,void({block_pointer})(void))::$_0>,void ()(void)>::destroy_deallocate(id *a1)
{

  operator delete(a1);
}

void std::__function::__func<AudioServerPlugInRegisterRemoteUsingDriverService(AudioServerPlugInDriverInterface **,void({block_pointer})(void))::$_0,std::allocator<AudioServerPlugInRegisterRemoteUsingDriverService(AudioServerPlugInDriverInterface **,void({block_pointer})(void))::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  void (**v2)(void);

  v2 = *(void (***)(void))(a1 + 8);
  if (v2)
  {
    v2[2]();
    v2 = *(void (***)(void))(a1 + 8);
  }
  _Block_release(v2);
}

uint64_t std::__function::__func<AudioServerPlugInRegisterRemoteUsingDriverService(AudioServerPlugInDriverInterface **,void({block_pointer})(void))::$_0,std::allocator<AudioServerPlugInRegisterRemoteUsingDriverService(AudioServerPlugInDriverInterface **,void({block_pointer})(void))::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZL49AudioServerPlugInRegisterRemoteUsingDriverServicePP32AudioServerPlugInDriverInterfaceU13block_pointerFvvEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AudioServerPlugInRegisterRemoteUsingDriverService(AudioServerPlugInDriverInterface **,void({block_pointer})(void))::$_0,std::allocator<AudioServerPlugInRegisterRemoteUsingDriverService(AudioServerPlugInDriverInterface **,void({block_pointer})(void))::$_0>,void ()(void)>::target_type()
{
}

OSStatus AudioConverterConvertBuffer(AudioConverterRef inAudioConverter, UInt32 inInputDataSize, const void *inInputData, UInt32 *ioOutputDataSize, void *outOutputData)
{
  return MEMORY[0x1E0CFF440](inAudioConverter, *(_QWORD *)&inInputDataSize, inInputData, ioOutputDataSize, outOutputData);
}

OSStatus AudioConverterConvertComplexBuffer(AudioConverterRef inAudioConverter, UInt32 inNumberPCMFrames, const AudioBufferList *inInputData, AudioBufferList *outOutputData)
{
  return MEMORY[0x1E0CFF448](inAudioConverter, *(_QWORD *)&inNumberPCMFrames, inInputData, outOutputData);
}

OSStatus AudioConverterDispose(AudioConverterRef inAudioConverter)
{
  return MEMORY[0x1E0CFF450](inAudioConverter);
}

OSStatus AudioConverterNew(const AudioStreamBasicDescription *inSourceFormat, const AudioStreamBasicDescription *inDestinationFormat, AudioConverterRef *outAudioConverter)
{
  return MEMORY[0x1E0CFF478](inSourceFormat, inDestinationFormat, outAudioConverter);
}

OSStatus AudioConverterReset(AudioConverterRef inAudioConverter)
{
  return MEMORY[0x1E0CFF498](inAudioConverter);
}

OSStatus AudioConverterSetProperty(AudioConverterRef inAudioConverter, AudioConverterPropertyID inPropertyID, UInt32 inPropertyDataSize, const void *inPropertyData)
{
  return MEMORY[0x1E0CFF4A0](inAudioConverter, *(_QWORD *)&inPropertyID, *(_QWORD *)&inPropertyDataSize, inPropertyData);
}

uint64_t CACentralStateDumpRegisterSubsystem()
{
  return MEMORY[0x1E0CFF610]();
}

uint64_t CAReportingClientCreateReporterID()
{
  return MEMORY[0x1E0DDE830]();
}

uint64_t CAReportingClientDestroyReporterID()
{
  return MEMORY[0x1E0DDE848]();
}

uint64_t CAReportingClientSendMessage()
{
  return MEMORY[0x1E0DDE858]();
}

uint64_t CAReportingClientStartReporter()
{
  return MEMORY[0x1E0DDE8A0]();
}

uint64_t CAReportingClientStopReporter()
{
  return MEMORY[0x1E0DDE8A8]();
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  CFAbsoluteTime result;

  MEMORY[0x1E0C97C60]();
  return result;
}

CFGregorianDate CFAbsoluteTimeGetGregorianDate(CFAbsoluteTime at, CFTimeZoneRef tz)
{
  uint64_t v2;
  double v3;
  CFGregorianDate result;

  v2 = MEMORY[0x1E0C97C80](tz, at);
  result.second = v3;
  result.year = v2;
  result.month = BYTE4(v2);
  result.day = BYTE5(v2);
  result.hour = BYTE6(v2);
  result.minute = HIBYTE(v2);
  return result;
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
  MEMORY[0x1E0C97CF0](theArray, value);
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x1E0C97D18](allocator, values, numValues, callBacks);
}

CFArrayRef CFArrayCreateCopy(CFAllocatorRef allocator, CFArrayRef theArray)
{
  return (CFArrayRef)MEMORY[0x1E0C97D28](allocator, theArray);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x1E0C97D40](allocator, capacity, callBacks);
}

CFMutableArrayRef CFArrayCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFArrayRef theArray)
{
  return (CFMutableArrayRef)MEMORY[0x1E0C97D48](allocator, capacity, theArray);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1E0C97D68](theArray);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x1E0C97D88]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1E0C97DA0](theArray, idx);
}

void CFArraySetValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value)
{
  MEMORY[0x1E0C97DD8](theArray, idx, value);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1E0C97FD0]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x1E0C97FD8](BOOLean);
}

CFURLRef CFBundleCopyBundleURL(CFBundleRef bundle)
{
  return (CFURLRef)MEMORY[0x1E0C98008](bundle);
}

CFStringRef CFBundleCopyLocalizedString(CFBundleRef bundle, CFStringRef key, CFStringRef value, CFStringRef tableName)
{
  return (CFStringRef)MEMORY[0x1E0C98058](bundle, key, value, tableName);
}

CFBundleRef CFBundleCreate(CFAllocatorRef allocator, CFURLRef bundleURL)
{
  return (CFBundleRef)MEMORY[0x1E0C980D8](allocator, bundleURL);
}

CFBundleRef CFBundleGetBundleWithIdentifier(CFStringRef bundleID)
{
  return (CFBundleRef)MEMORY[0x1E0C980F0](bundleID);
}

void *__cdecl CFBundleGetFunctionPointerForName(CFBundleRef bundle, CFStringRef functionName)
{
  return (void *)MEMORY[0x1E0C98110](bundle, functionName);
}

CFStringRef CFBundleGetIdentifier(CFBundleRef bundle)
{
  return (CFStringRef)MEMORY[0x1E0C98118](bundle);
}

CFDictionaryRef CFBundleGetInfoDictionary(CFBundleRef bundle)
{
  return (CFDictionaryRef)MEMORY[0x1E0C98128](bundle);
}

CFBundleRef CFBundleGetMainBundle(void)
{
  return (CFBundleRef)MEMORY[0x1E0C98148]();
}

CFTypeID CFBundleGetTypeID(void)
{
  return MEMORY[0x1E0C98178]();
}

Boolean CFBundleLoadExecutableAndReturnError(CFBundleRef bundle, CFErrorRef *error)
{
  return MEMORY[0x1E0C981A0](bundle, error);
}

Boolean CFBundlePreflightExecutable(CFBundleRef bundle, CFErrorRef *error)
{
  return MEMORY[0x1E0C981B0](bundle, error);
}

CFStringRef CFCopyDescription(CFTypeRef cf)
{
  return (CFStringRef)MEMORY[0x1E0C98358](cf);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x1E0C98398](allocator, bytes, length);
}

CFDataRef CFDataCreateCopy(CFAllocatorRef allocator, CFDataRef theData)
{
  return (CFDataRef)MEMORY[0x1E0C983A8](allocator, theData);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x1E0C983E8](theData);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x1E0C98400](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x1E0C98410]();
}

CFComparisonResult CFDateCompare(CFDateRef theDate, CFDateRef otherDate, void *context)
{
  return MEMORY[0x1E0C98438](theDate, otherDate, context);
}

CFDateRef CFDateCreate(CFAllocatorRef allocator, CFAbsoluteTime at)
{
  return (CFDateRef)MEMORY[0x1E0C98450](allocator, at);
}

CFAbsoluteTime CFDateGetAbsoluteTime(CFDateRef theDate)
{
  CFAbsoluteTime result;

  MEMORY[0x1E0C984D0](theDate);
  return result;
}

CFTypeID CFDateGetTypeID(void)
{
  return MEMORY[0x1E0C984F0]();
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C984F8](theDict, key, value);
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x1E0C98510](theDict, key);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x1E0C98528](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFDictionaryRef CFDictionaryCreateCopy(CFAllocatorRef allocator, CFDictionaryRef theDict)
{
  return (CFDictionaryRef)MEMORY[0x1E0C98540](allocator, theDict);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0C98548](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDictionaryRef theDict)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0C98560](allocator, capacity, theDict);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x1E0C98568](theDict);
}

CFIndex CFDictionaryGetCountOfKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x1E0C98580](theDict, key);
}

void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values)
{
  MEMORY[0x1E0C98598](theDict, keys, values);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x1E0C985B0]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1E0C985C0](theDict, key);
}

Boolean CFDictionaryGetValueIfPresent(CFDictionaryRef theDict, const void *key, const void **value)
{
  return MEMORY[0x1E0C985D0](theDict, key, value);
}

void CFDictionaryRemoveAllValues(CFMutableDictionaryRef theDict)
{
  MEMORY[0x1E0C985E0](theDict);
}

void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key)
{
  MEMORY[0x1E0C985F0](theDict, key);
}

void CFDictionaryReplaceValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98600](theDict, key, value);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98608](theDict, key, value);
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x1E0C98618](cf1, cf2);
}

CFIndex CFErrorGetCode(CFErrorRef err)
{
  return MEMORY[0x1E0C98668](err);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1E0C98730](cf);
}

CFComparisonResult CFNumberCompare(CFNumberRef number, CFNumberRef otherNumber, void *context)
{
  return MEMORY[0x1E0C98918](number, otherNumber, context);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1E0C98920](allocator, theType, valuePtr);
}

CFIndex CFNumberGetByteSize(CFNumberRef number)
{
  return MEMORY[0x1E0C98998](number);
}

CFNumberType CFNumberGetType(CFNumberRef number)
{
  return MEMORY[0x1E0C989A0](number);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x1E0C989B0]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x1E0C989C8](number, theType, valuePtr);
}

CFPlugInRef CFPlugInCreate(CFAllocatorRef allocator, CFURLRef plugInURL)
{
  return (CFPlugInRef)MEMORY[0x1E0C989E0](allocator, plugInURL);
}

CFArrayRef CFPlugInFindFactoriesForPlugInTypeInPlugIn(CFUUIDRef typeUUID, CFPlugInRef plugIn)
{
  return (CFArrayRef)MEMORY[0x1E0C989F8](typeUUID, plugIn);
}

CFBundleRef CFPlugInGetBundle(CFPlugInRef plugIn)
{
  return (CFBundleRef)MEMORY[0x1E0C98A08](plugIn);
}

void *__cdecl CFPlugInInstanceCreate(CFAllocatorRef allocator, CFUUIDRef factoryUUID, CFUUIDRef typeUUID)
{
  return (void *)MEMORY[0x1E0C98A18](allocator, factoryUUID, typeUUID);
}

CFDataRef CFPropertyListCreateData(CFAllocatorRef allocator, CFPropertyListRef propertyList, CFPropertyListFormat format, CFOptionFlags options, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x1E0C98AA8](allocator, propertyList, format, options, error);
}

CFPropertyListRef CFPropertyListCreateDeepCopy(CFAllocatorRef allocator, CFPropertyListRef propertyList, CFOptionFlags mutabilityOption)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98AB8](allocator, propertyList, mutabilityOption);
}

CFPropertyListRef CFPropertyListCreateWithData(CFAllocatorRef allocator, CFDataRef data, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98AD8](allocator, data, options, format, error);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x1E0C98BC8](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1E0C98BD8](cf);
}

void CFRunLoopAddSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
  MEMORY[0x1E0C98BF0](rl, source, mode);
}

CFRunLoopRef CFRunLoopGetCurrent(void)
{
  return (CFRunLoopRef)MEMORY[0x1E0C98C38]();
}

CFRunLoopRef CFRunLoopGetMain(void)
{
  return (CFRunLoopRef)MEMORY[0x1E0C98C48]();
}

void CFRunLoopRemoveSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
  MEMORY[0x1E0C98C98](rl, source, mode);
}

CFRunLoopRunResult CFRunLoopRunInMode(CFRunLoopMode mode, CFTimeInterval seconds, Boolean returnAfterSourceHandled)
{
  return MEMORY[0x1E0C98CB8](mode, returnAfterSourceHandled, seconds);
}

void CFRunLoopStop(CFRunLoopRef rl)
{
  MEMORY[0x1E0C98CF8](rl);
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1E0C98F08](theString1, theString2, compareOptions);
}

CFStringRef CFStringCreateCopy(CFAllocatorRef alloc, CFStringRef theString)
{
  return (CFStringRef)MEMORY[0x1E0C98F70](alloc, theString);
}

CFStringRef CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation)
{
  return (CFStringRef)MEMORY[0x1E0C98FC0](alloc, bytes, numBytes, *(_QWORD *)&encoding, isExternalRepresentation);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1E0C98FD8](alloc, cStr, *(_QWORD *)&encoding);
}

CFStringRef CFStringCreateWithCharacters(CFAllocatorRef alloc, const UniChar *chars, CFIndex numChars)
{
  return (CFStringRef)MEMORY[0x1E0C98FF0](alloc, chars, numChars);
}

CFStringRef CFStringCreateWithFileSystemRepresentation(CFAllocatorRef alloc, const char *buffer)
{
  return (CFStringRef)MEMORY[0x1E0C99000](alloc, buffer);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x1E0C99010](alloc, formatOptions, format);
}

CFIndex CFStringGetBytes(CFStringRef theString, CFRange range, CFStringEncoding encoding, UInt8 lossByte, Boolean isExternalRepresentation, UInt8 *buffer, CFIndex maxBufLen, CFIndex *usedBufLen)
{
  return MEMORY[0x1E0C99088](theString, range.location, range.length, *(_QWORD *)&encoding, lossByte, isExternalRepresentation, buffer, maxBufLen);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x1E0C99090](theString, buffer, bufferSize, *(_QWORD *)&encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x1E0C990A8](theString, *(_QWORD *)&encoding);
}

void CFStringGetCharacters(CFStringRef theString, CFRange range, UniChar *buffer)
{
  MEMORY[0x1E0C990B8](theString, range.location, range.length, buffer);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1E0C990F8](theString);
}

CFIndex CFStringGetMaximumSizeForEncoding(CFIndex length, CFStringEncoding encoding)
{
  return MEMORY[0x1E0C99120](length, *(_QWORD *)&encoding);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x1E0C99178]();
}

Boolean CFStringHasPrefix(CFStringRef theString, CFStringRef prefix)
{
  return MEMORY[0x1E0C99188](theString, prefix);
}

CFTimeZoneRef CFTimeZoneCopySystem(void)
{
  return (CFTimeZoneRef)MEMORY[0x1E0C99278]();
}

CFURLRef CFURLCopyAbsoluteURL(CFURLRef relativeURL)
{
  return (CFURLRef)MEMORY[0x1E0C992D0](relativeURL);
}

CFStringRef CFURLCopyFileSystemPath(CFURLRef anURL, CFURLPathStyle pathStyle)
{
  return (CFStringRef)MEMORY[0x1E0C992E0](anURL, pathStyle);
}

CFDataRef CFURLCreateData(CFAllocatorRef allocator, CFURLRef url, CFStringEncoding encoding, Boolean escapeWhitespace)
{
  return (CFDataRef)MEMORY[0x1E0C993A8](allocator, url, *(_QWORD *)&encoding, escapeWhitespace);
}

CFURLRef CFURLCreateFromFileSystemRepresentation(CFAllocatorRef allocator, const UInt8 *buffer, CFIndex bufLen, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1E0C993D0](allocator, buffer, bufLen, isDirectory);
}

CFURLRef CFURLCreateWithBytes(CFAllocatorRef allocator, const UInt8 *URLBytes, CFIndex length, CFStringEncoding encoding, CFURLRef baseURL)
{
  return (CFURLRef)MEMORY[0x1E0C99410](allocator, URLBytes, length, *(_QWORD *)&encoding, baseURL);
}

CFURLRef CFURLCreateWithFileSystemPath(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1E0C99428](allocator, filePath, pathStyle, isDirectory);
}

CFURLRef CFURLCreateWithFileSystemPathRelativeToBase(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory, CFURLRef baseURL)
{
  return (CFURLRef)MEMORY[0x1E0C99430](allocator, filePath, pathStyle, isDirectory, baseURL);
}

CFURLRef CFURLCreateWithString(CFAllocatorRef allocator, CFStringRef URLString, CFURLRef baseURL)
{
  return (CFURLRef)MEMORY[0x1E0C99440](allocator, URLString, baseURL);
}

CFStringRef CFURLGetString(CFURLRef anURL)
{
  return (CFStringRef)MEMORY[0x1E0C994A8](anURL);
}

CFTypeID CFURLGetTypeID(void)
{
  return MEMORY[0x1E0C994B0]();
}

CFUUIDRef CFUUIDCreate(CFAllocatorRef alloc)
{
  return (CFUUIDRef)MEMORY[0x1E0C99510](alloc);
}

CFUUIDRef CFUUIDCreateFromUUIDBytes(CFAllocatorRef alloc, CFUUIDBytes bytes)
{
  return (CFUUIDRef)MEMORY[0x1E0C99528](alloc, *(_QWORD *)&bytes.byte0, *(_QWORD *)&bytes.byte8);
}

CFStringRef CFUUIDCreateString(CFAllocatorRef alloc, CFUUIDRef uuid)
{
  return (CFStringRef)MEMORY[0x1E0C99540](alloc, uuid);
}

CFUUIDRef CFUUIDGetConstantUUIDWithBytes(CFAllocatorRef alloc, UInt8 byte0, UInt8 byte1, UInt8 byte2, UInt8 byte3, UInt8 byte4, UInt8 byte5, UInt8 byte6, UInt8 byte7, UInt8 byte8, UInt8 byte9, UInt8 byte10, UInt8 byte11, UInt8 byte12, UInt8 byte13, UInt8 byte14, UInt8 byte15)
{
  return (CFUUIDRef)MEMORY[0x1E0C99550](alloc, byte0, byte1, byte2, byte3, byte4, byte5, byte6);
}

CFUUIDBytes CFUUIDGetUUIDBytes(CFUUIDRef uuid)
{
  uint64_t v1;
  uint64_t v2;
  CFUUIDBytes result;

  v1 = MEMORY[0x1E0C99570](uuid);
  result.byte8 = v2;
  result.byte9 = BYTE1(v2);
  result.byte10 = BYTE2(v2);
  result.byte11 = BYTE3(v2);
  result.byte12 = BYTE4(v2);
  result.byte13 = BYTE5(v2);
  result.byte14 = BYTE6(v2);
  result.byte15 = HIBYTE(v2);
  result.byte0 = v1;
  result.byte1 = BYTE1(v1);
  result.byte2 = BYTE2(v1);
  result.byte3 = BYTE3(v1);
  result.byte4 = BYTE4(v1);
  result.byte5 = BYTE5(v1);
  result.byte6 = BYTE6(v1);
  result.byte7 = HIBYTE(v1);
  return result;
}

OSStatus ExtAudioFileCreateWithURL(CFURLRef inURL, AudioFileTypeID inFileType, const AudioStreamBasicDescription *inStreamDesc, const AudioChannelLayout *inChannelLayout, UInt32 inFlags, ExtAudioFileRef *outExtAudioFile)
{
  return MEMORY[0x1E0CFF630](inURL, *(_QWORD *)&inFileType, inStreamDesc, inChannelLayout, *(_QWORD *)&inFlags, outExtAudioFile);
}

OSStatus ExtAudioFileDispose(ExtAudioFileRef inExtAudioFile)
{
  return MEMORY[0x1E0CFF638](inExtAudioFile);
}

OSStatus ExtAudioFileGetProperty(ExtAudioFileRef inExtAudioFile, ExtAudioFilePropertyID inPropertyID, UInt32 *ioPropertyDataSize, void *outPropertyData)
{
  return MEMORY[0x1E0CFF640](inExtAudioFile, *(_QWORD *)&inPropertyID, ioPropertyDataSize, outPropertyData);
}

OSStatus ExtAudioFileOpenURL(CFURLRef inURL, ExtAudioFileRef *outExtAudioFile)
{
  return MEMORY[0x1E0CFF650](inURL, outExtAudioFile);
}

OSStatus ExtAudioFileRead(ExtAudioFileRef inExtAudioFile, UInt32 *ioNumberFrames, AudioBufferList *ioData)
{
  return MEMORY[0x1E0CFF658](inExtAudioFile, ioNumberFrames, ioData);
}

OSStatus ExtAudioFileSeek(ExtAudioFileRef inExtAudioFile, SInt64 inFrameOffset)
{
  return MEMORY[0x1E0CFF660](inExtAudioFile, inFrameOffset);
}

OSStatus ExtAudioFileSetProperty(ExtAudioFileRef inExtAudioFile, ExtAudioFilePropertyID inPropertyID, UInt32 inPropertyDataSize, const void *inPropertyData)
{
  return MEMORY[0x1E0CFF668](inExtAudioFile, *(_QWORD *)&inPropertyID, *(_QWORD *)&inPropertyDataSize, inPropertyData);
}

OSStatus ExtAudioFileWriteAsync(ExtAudioFileRef inExtAudioFile, UInt32 inNumberFrames, const AudioBufferList *ioData)
{
  return MEMORY[0x1E0CFF688](inExtAudioFile, *(_QWORD *)&inNumberFrames, ioData);
}

IOReturn IOAllowPowerChange(io_connect_t kernelPort, intptr_t notificationID)
{
  return MEMORY[0x1E0CBAD20](*(_QWORD *)&kernelPort, notificationID);
}

CFDataRef IOCFSerialize(CFTypeRef object, CFOptionFlags options)
{
  return (CFDataRef)MEMORY[0x1E0CBAD30](object, options);
}

CFTypeRef IOCFUnserializeBinary(const char *buffer, size_t bufferSize, CFAllocatorRef allocator, CFOptionFlags options, CFStringRef *errorString)
{
  return (CFTypeRef)MEMORY[0x1E0CBAD40](buffer, bufferSize, allocator, options, errorString);
}

IOReturn IOCancelPowerChange(io_connect_t kernelPort, intptr_t notificationID)
{
  return MEMORY[0x1E0CBAD50](*(_QWORD *)&kernelPort, notificationID);
}

kern_return_t IOConnectAddRef(io_connect_t connect)
{
  return MEMORY[0x1E0CBAD60](*(_QWORD *)&connect);
}

kern_return_t IOConnectCallAsyncMethod(mach_port_t connection, uint32_t selector, mach_port_t wake_port, uint64_t *reference, uint32_t referenceCnt, const uint64_t *input, uint32_t inputCnt, const void *inputStruct, size_t inputStructCnt, uint64_t *output, uint32_t *outputCnt, void *outputStruct, size_t *outputStructCnt)
{
  return MEMORY[0x1E0CBAD68](*(_QWORD *)&connection, *(_QWORD *)&selector, *(_QWORD *)&wake_port, reference, *(_QWORD *)&referenceCnt, input, *(_QWORD *)&inputCnt, inputStruct);
}

kern_return_t IOConnectCallMethod(mach_port_t connection, uint32_t selector, const uint64_t *input, uint32_t inputCnt, const void *inputStruct, size_t inputStructCnt, uint64_t *output, uint32_t *outputCnt, void *outputStruct, size_t *outputStructCnt)
{
  return MEMORY[0x1E0CBAD80](*(_QWORD *)&connection, *(_QWORD *)&selector, input, *(_QWORD *)&inputCnt, inputStruct, inputStructCnt, output, outputCnt);
}

kern_return_t IOConnectMapMemory64(io_connect_t connect, uint32_t memoryType, task_port_t intoTask, mach_vm_address_t *atAddress, mach_vm_size_t *ofSize, IOOptionBits options)
{
  return MEMORY[0x1E0CBADA0](*(_QWORD *)&connect, *(_QWORD *)&memoryType, *(_QWORD *)&intoTask, atAddress, ofSize, *(_QWORD *)&options);
}

kern_return_t IOConnectRelease(io_connect_t connect)
{
  return MEMORY[0x1E0CBADA8](*(_QWORD *)&connect);
}

kern_return_t IOConnectSetNotificationPort(io_connect_t connect, uint32_t type, mach_port_t port, uintptr_t reference)
{
  return MEMORY[0x1E0CBADC0](*(_QWORD *)&connect, *(_QWORD *)&type, *(_QWORD *)&port, reference);
}

kern_return_t IOConnectTrap3(io_connect_t connect, uint32_t index, uintptr_t p1, uintptr_t p2, uintptr_t p3)
{
  return MEMORY[0x1E0CBADD8](*(_QWORD *)&connect, *(_QWORD *)&index, p1, p2, p3);
}

kern_return_t IOConnectTrap4(io_connect_t connect, uint32_t index, uintptr_t p1, uintptr_t p2, uintptr_t p3, uintptr_t p4)
{
  return MEMORY[0x1E0CBADE0](*(_QWORD *)&connect, *(_QWORD *)&index, p1, p2, p3, p4);
}

kern_return_t IOConnectTrap6(io_connect_t connect, uint32_t index, uintptr_t p1, uintptr_t p2, uintptr_t p3, uintptr_t p4, uintptr_t p5, uintptr_t p6)
{
  return MEMORY[0x1E0CBADE8](*(_QWORD *)&connect, *(_QWORD *)&index, p1, p2, p3, p4, p5, p6);
}

kern_return_t IOConnectUnmapMemory64(io_connect_t connect, uint32_t memoryType, task_port_t fromTask, mach_vm_address_t atAddress)
{
  return MEMORY[0x1E0CBADF8](*(_QWORD *)&connect, *(_QWORD *)&memoryType, *(_QWORD *)&fromTask, atAddress);
}

IOReturn IODeregisterForSystemPower(io_object_t *notifier)
{
  return MEMORY[0x1E0CBAE38](notifier);
}

io_object_t IOIteratorNext(io_iterator_t iterator)
{
  return MEMORY[0x1E0CBB668](*(_QWORD *)&iterator);
}

kern_return_t IOMainPort(mach_port_t bootstrapPort, mach_port_t *mainPort)
{
  return MEMORY[0x1E0CBB680](*(_QWORD *)&bootstrapPort, mainPort);
}

IONotificationPortRef IONotificationPortCreate(mach_port_t mainPort)
{
  return (IONotificationPortRef)MEMORY[0x1E0CBB698](*(_QWORD *)&mainPort);
}

void IONotificationPortDestroy(IONotificationPortRef notify)
{
  MEMORY[0x1E0CBB6A0](notify);
}

mach_port_t IONotificationPortGetMachPort(IONotificationPortRef notify)
{
  return MEMORY[0x1E0CBB6A8](notify);
}

void IONotificationPortSetDispatchQueue(IONotificationPortRef notify, dispatch_queue_t queue)
{
  MEMORY[0x1E0CBB6B8](notify, queue);
}

BOOLean_t IOObjectConformsTo(io_object_t object, const io_name_t className)
{
  return MEMORY[0x1E0CBB6C8](*(_QWORD *)&object, className);
}

BOOLean_t IOObjectIsEqualTo(io_object_t object, io_object_t anObject)
{
  return MEMORY[0x1E0CBB6E0](*(_QWORD *)&object, *(_QWORD *)&anObject);
}

kern_return_t IOObjectRelease(io_object_t object)
{
  return MEMORY[0x1E0CBB6F0](*(_QWORD *)&object);
}

kern_return_t IOObjectRetain(io_object_t object)
{
  return MEMORY[0x1E0CBB6F8](*(_QWORD *)&object);
}

IOReturn IOPMAssertionCreateWithProperties(CFDictionaryRef AssertionProperties, IOPMAssertionID *AssertionID)
{
  return MEMORY[0x1E0CBB718](AssertionProperties, AssertionID);
}

IOReturn IOPMAssertionRelease(IOPMAssertionID AssertionID)
{
  return MEMORY[0x1E0CBB738](*(_QWORD *)&AssertionID);
}

IOReturn IOPMAssertionSetProperty(IOPMAssertionID theAssertion, CFStringRef theProperty, CFTypeRef theValue)
{
  return MEMORY[0x1E0CBB748](*(_QWORD *)&theAssertion, theProperty, theValue);
}

uint64_t IOPMGetUserActivityLevel()
{
  return MEMORY[0x1E0CBB7C0]();
}

uint64_t IOPMScheduleUserActivityLevelNotification()
{
  return MEMORY[0x1E0CBB800]();
}

uint64_t IOPMUnregisterNotification()
{
  return MEMORY[0x1E0CBB840]();
}

io_connect_t IORegisterForSystemPower(void *refcon, IONotificationPortRef *thePortRef, IOServiceInterestCallback callback, io_object_t *notifier)
{
  return MEMORY[0x1E0CBB8D8](refcon, thePortRef, callback, notifier);
}

kern_return_t IORegistryEntryCreateCFProperties(io_registry_entry_t entry, CFMutableDictionaryRef *properties, CFAllocatorRef allocator, IOOptionBits options)
{
  return MEMORY[0x1E0CBB8F0](*(_QWORD *)&entry, properties, allocator, *(_QWORD *)&options);
}

CFTypeRef IORegistryEntryCreateCFProperty(io_registry_entry_t entry, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options)
{
  return (CFTypeRef)MEMORY[0x1E0CBB900](*(_QWORD *)&entry, key, allocator, *(_QWORD *)&options);
}

kern_return_t IORegistryEntryGetChildIterator(io_registry_entry_t entry, const io_name_t plane, io_iterator_t *iterator)
{
  return MEMORY[0x1E0CBB920](*(_QWORD *)&entry, plane, iterator);
}

kern_return_t IORegistryEntryGetName(io_registry_entry_t entry, io_name_t name)
{
  return MEMORY[0x1E0CBB938](*(_QWORD *)&entry, name);
}

kern_return_t IORegistryEntryGetParentIterator(io_registry_entry_t entry, const io_name_t plane, io_iterator_t *iterator)
{
  return MEMORY[0x1E0CBB960](*(_QWORD *)&entry, plane, iterator);
}

kern_return_t IORegistryEntrySetCFProperty(io_registry_entry_t entry, CFStringRef propertyName, CFTypeRef property)
{
  return MEMORY[0x1E0CBB9B0](*(_QWORD *)&entry, propertyName, property);
}

kern_return_t IOServiceAddInterestNotification(IONotificationPortRef notifyPort, io_service_t service, const io_name_t interestType, IOServiceInterestCallback callback, void *refCon, io_object_t *notification)
{
  return MEMORY[0x1E0CBB9C0](notifyPort, *(_QWORD *)&service, interestType, callback, refCon, notification);
}

kern_return_t IOServiceAddMatchingNotification(IONotificationPortRef notifyPort, const io_name_t notificationType, CFDictionaryRef matching, IOServiceMatchingCallback callback, void *refCon, io_iterator_t *notification)
{
  return MEMORY[0x1E0CBB9C8](notifyPort, notificationType, matching, callback, refCon, notification);
}

kern_return_t IOServiceClose(io_connect_t connect)
{
  return MEMORY[0x1E0CBB9D0](*(_QWORD *)&connect);
}

kern_return_t IOServiceGetMatchingServices(mach_port_t mainPort, CFDictionaryRef matching, io_iterator_t *existing)
{
  return MEMORY[0x1E0CBB9F0](*(_QWORD *)&mainPort, matching, existing);
}

CFMutableDictionaryRef IOServiceMatching(const char *name)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0CBBA00](name);
}

kern_return_t IOServiceOpen(io_service_t service, task_port_t owningTask, uint32_t type, io_connect_t *connect)
{
  return MEMORY[0x1E0CBBA10](*(_QWORD *)&service, *(_QWORD *)&owningTask, *(_QWORD *)&type, connect);
}

uint64_t MGGetBoolAnswer()
{
  return MEMORY[0x1E0DE2B50]();
}

void NSLog(NSString *format, ...)
{
  MEMORY[0x1E0CB2D88](format);
}

NSString *NSTemporaryDirectory(void)
{
  return (NSString *)MEMORY[0x1E0CB3250]();
}

void *__cdecl OSAtomicDequeue(OSQueueHead *__list, size_t a2)
{
  return (void *)MEMORY[0x1E0C80658](__list, a2);
}

void OSAtomicEnqueue(OSQueueHead *__list, void *__new, size_t a3)
{
  MEMORY[0x1E0C80660](__list, __new, a3);
}

void OSMemoryBarrier(void)
{
  MEMORY[0x1E0C80670]();
}

CFTypeRef SecTaskCopyValueForEntitlement(SecTaskRef task, CFStringRef entitlement, CFErrorRef *error)
{
  return (CFTypeRef)MEMORY[0x1E0CD65F0](task, entitlement, error);
}

SecTaskRef SecTaskCreateFromSelf(CFAllocatorRef allocator)
{
  return (SecTaskRef)MEMORY[0x1E0CD6610](allocator);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1E0C80928](aBlock);
}

void _Block_object_assign(void *a1, const void *a2, const int a3)
{
  MEMORY[0x1E0C80940](a1, a2, *(_QWORD *)&a3);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x1E0C80948](a1, *(_QWORD *)&a2);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x1E0C80958](aBlock);
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x1E0C80A20](exception_object);
}

uint64_t applesauce::xpc::dyn_cast_or_default(applesauce::xpc *this, const object *a2)
{
  return MEMORY[0x1E0CFE1E8](this, a2);
}

{
  return MEMORY[0x1E0CFE1F0](this, a2);
}

uint64_t AUProcessingBlock_DSPGraph::AUProcessingBlock_DSPGraph()
{
  return MEMORY[0x1E0CFF898]();
}

void caulk::concurrent::message::~message(caulk::concurrent::message *this)
{
  MEMORY[0x1E0DDB450](this);
}

uint64_t caulk::concurrent::messenger::enqueue(caulk::concurrent::messenger *this, caulk::concurrent::message *a2)
{
  return MEMORY[0x1E0DDB470](this, a2);
}

uint64_t caulk::concurrent::messenger::messenger()
{
  return MEMORY[0x1E0DDB478]();
}

void caulk::concurrent::messenger::~messenger(caulk::concurrent::messenger *this)
{
  MEMORY[0x1E0DDB488](this);
}

uint64_t caulk::audio_buffer_resource(caulk *this)
{
  return MEMORY[0x1E0DDB4B8](this);
}

uint64_t caulk::rt_safe_memory_resource::rt_allocate(caulk::rt_safe_memory_resource *this)
{
  return MEMORY[0x1E0DDB4E0](this);
}

uint64_t caulk::rt_safe_memory_resource::rt_deallocate(caulk::rt_safe_memory_resource *this, void *a2)
{
  return MEMORY[0x1E0DDB4E8](this, a2);
}

uint64_t caulk::init_realtime_safe_resource(caulk *this)
{
  return MEMORY[0x1E0DDB4F8](this);
}

uint64_t caulk::ipc::mapped_memory::reset(caulk::ipc::mapped_memory *this)
{
  return MEMORY[0x1E0DDB500](this);
}

uint64_t caulk::ipc::mapped_memory::mapped_memory()
{
  return MEMORY[0x1E0DDB508]();
}

uint64_t caulk::ipc::mapped_memory::mapped_memory(caulk::ipc::mapped_memory *this)
{
  return MEMORY[0x1E0DDB510](this);
}

uint64_t caulk::ipc::synchronous_messenger::eventlink_sender::send(caulk::ipc::synchronous_messenger::eventlink_sender *this, double a2)
{
  return MEMORY[0x1E0DDB518](this, a2);
}

uint64_t caulk::ipc::synchronous_messenger::eventlink_sender::stop(caulk::ipc::synchronous_messenger::eventlink_sender *this, double a2)
{
  return MEMORY[0x1E0DDB520](this, a2);
}

uint64_t caulk::ipc::synchronous_messenger::eventlink_sender::start(caulk::ipc::synchronous_messenger::eventlink_sender *this, double a2)
{
  return MEMORY[0x1E0DDB528](this, a2);
}

uint64_t caulk::ipc::synchronous_messenger::eventlink_sender::resynch(caulk::ipc::synchronous_messenger::eventlink_sender *this, double a2)
{
  return MEMORY[0x1E0DDB530](this, a2);
}

uint64_t caulk::ipc::synchronous_messenger::semaphore_sender::send(caulk::ipc::synchronous_messenger::semaphore_sender *this, double a2)
{
  return MEMORY[0x1E0DDB538](this, a2);
}

uint64_t caulk::ipc::synchronous_messenger::semaphore_sender::stop(caulk::ipc::synchronous_messenger::semaphore_sender *this, double a2)
{
  return MEMORY[0x1E0DDB540](this, a2);
}

uint64_t caulk::ipc::synchronous_messenger::semaphore_sender::start(caulk::ipc::synchronous_messenger::semaphore_sender *this, double a2)
{
  return MEMORY[0x1E0DDB548](this, a2);
}

uint64_t caulk::ipc::synchronous_messenger::semaphore_sender::resynch(caulk::ipc::synchronous_messenger::semaphore_sender *this, double a2)
{
  return MEMORY[0x1E0DDB550](this, a2);
}

uint64_t caulk::ipc::synchronous_messenger::eventlink_receiver::ingest_connection_info()
{
  return MEMORY[0x1E0DDB558]();
}

uint64_t caulk::ipc::synchronous_messenger::eventlink_receiver::start()
{
  return MEMORY[0x1E0DDB560]();
}

{
  return MEMORY[0x1E0DDB568]();
}

uint64_t caulk::ipc::synchronous_messenger::semaphore_receiver::ingest_connection_info()
{
  return MEMORY[0x1E0DDB570]();
}

uint64_t caulk::ipc::synchronous_messenger::semaphore_receiver::stop(caulk::ipc::synchronous_messenger::semaphore_receiver *this, double a2)
{
  return MEMORY[0x1E0DDB578](this, a2);
}

uint64_t caulk::ipc::synchronous_messenger::semaphore_receiver::start()
{
  return MEMORY[0x1E0DDB580]();
}

{
  return MEMORY[0x1E0DDB588]();
}

uint64_t caulk::mach::os_eventlink::dissociate(caulk::mach::os_eventlink *this)
{
  return MEMORY[0x1E0DDB5B0](this);
}

uint64_t caulk::mach::os_eventlink::timed_wait_signal_or_error(caulk::mach::os_eventlink *this, double a2)
{
  return MEMORY[0x1E0DDB5C0](this, a2);
}

uint64_t caulk::mach::os_eventlink::make()
{
  return MEMORY[0x1E0DDB5C8]();
}

uint64_t caulk::mach::os_eventlink::associate(caulk::mach::os_eventlink *this)
{
  return MEMORY[0x1E0DDB5D0](this);
}

uint64_t caulk::mach::os_workgroup_managed::join(caulk::mach::os_workgroup_managed *this)
{
  return MEMORY[0x1E0DDB5D8](this);
}

uint64_t caulk::mach::os_workgroup_managed::make()
{
  return MEMORY[0x1E0DDB5E0]();
}

uint64_t caulk::mach::os_workgroup_managed::leave(caulk::mach::os_workgroup_managed *this)
{
  return MEMORY[0x1E0DDB5E8](this);
}

void caulk::mach::os_workgroup_managed::~os_workgroup_managed(caulk::mach::os_workgroup_managed *this)
{
  MEMORY[0x1E0DDB5F0](this);
}

uint64_t caulk::mach::os_workgroup_interval_managed::make_with_workload_id()
{
  return MEMORY[0x1E0DDB5F8]();
}

{
  return MEMORY[0x1E0DDB600]();
}

uint64_t caulk::mach::os_workgroup_interval_managed::start(caulk::mach::os_workgroup_interval_managed *this)
{
  return MEMORY[0x1E0DDB608](this);
}

uint64_t caulk::mach::os_workgroup_interval_managed::start(caulk::mach::os_workgroup_interval_managed *this, uint64_t a2, uint64_t a3, os_workgroup_interval_data_opaque_s *a4)
{
  return MEMORY[0x1E0DDB610](this, a2, a3, a4);
}

uint64_t caulk::mach::os_workgroup_interval_managed::finish(caulk::mach::os_workgroup_interval_managed *this, os_workgroup_interval_data_opaque_s *a2)
{
  return MEMORY[0x1E0DDB618](this, a2);
}

uint64_t caulk::mach::os_workgroup_interval_managed::finish(caulk::mach::os_workgroup_interval_managed *this)
{
  return MEMORY[0x1E0DDB620](this);
}

void caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed(caulk::mach::os_workgroup_interval_managed *this)
{
  MEMORY[0x1E0DDB628](this);
}

uint64_t caulk::mach::details::retain_os_object(caulk::mach::details *this, void *a2)
{
  return MEMORY[0x1E0DDB638](this, a2);
}

uint64_t caulk::mach::details::release_os_object(caulk::mach::details *this, void *a2)
{
  return MEMORY[0x1E0DDB640](this, a2);
}

uint64_t caulk::mach::semaphore::semaphore(caulk::mach::semaphore *this)
{
  return MEMORY[0x1E0DDB668](this);
}

void caulk::mach::semaphore::~semaphore(caulk::mach::semaphore *this)
{
  MEMORY[0x1E0DDB670](this);
}

uint64_t caulk::thread::attributes::apply_to_this_thread(caulk::thread::attributes *this)
{
  return MEMORY[0x1E0DDB6A8](this);
}

uint64_t caulk::thread::start(caulk::thread *this, caulk::thread::attributes *a2, void *(*a3)(void *), void *a4)
{
  return MEMORY[0x1E0DDB6B8](this, a2, a3, a4);
}

void caulk::thread::~thread(caulk::thread *this)
{
  MEMORY[0x1E0DDB6C8](this);
}

uint64_t caulk::platform::process_name(caulk::platform *this)
{
  return MEMORY[0x1E0DDB6F0](this);
}

uint64_t DSPGraph::ABIVersion(DSPGraph *this)
{
  return MEMORY[0x1E0CFF968](this);
}

uint64_t DSPGraph::Interpreter::compileText()
{
  return MEMORY[0x1E0CFF9B0]();
}

void DSPGraph::Interpreter::~Interpreter(DSPGraph::Interpreter *this)
{
  MEMORY[0x1E0CFF9C0](this);
}

uint64_t DSPGraph::NewBoxRegistry::NewBoxRegistry(DSPGraph::NewBoxRegistry *this)
{
  return MEMORY[0x1E0CFF9F0](this);
}

uint64_t DSPGraph::Box::totalLatencyInSeconds(DSPGraph::Box *this)
{
  return MEMORY[0x1E0CFFA38](this);
}

uint64_t DSPGraph::Graph::initialize(DSPGraph::Graph *this)
{
  return MEMORY[0x1E0CFFA68](this);
}

uint64_t DSPGraph::Graph::setAUStrip(DSPGraph::Graph *this, const __CFDictionary *a2)
{
  return MEMORY[0x1E0CFFA70](this, a2);
}

uint64_t DSPGraph::Graph::processMultiple()
{
  return MEMORY[0x1E0CFFAA8]();
}

uint64_t DSPGraph::Graph::setPropertyStrip(DSPGraph::Graph *this, const __CFDictionary *a2)
{
  return MEMORY[0x1E0CFFAB8](this, a2);
}

uint64_t DSPGraph::Graph::setSliceDuration()
{
  return MEMORY[0x1E0CFFAC8]();
}

uint64_t DSPGraph::Graph::reset(DSPGraph::Graph *this)
{
  return MEMORY[0x1E0CFFB00](this);
}

uint64_t DSPGraph::Graph::configure(DSPGraph::Graph *this)
{
  return MEMORY[0x1E0CFFB28](this);
}

uint64_t DSPGraph::Graph::preflight()
{
  return MEMORY[0x1E0CFFB38]();
}

uint64_t caulk::ipc::synchronous_messenger::eventlink_sender::create_connection_info(caulk::ipc::synchronous_messenger::eventlink_sender *this)
{
  return MEMORY[0x1E0DDB730](this);
}

uint64_t caulk::ipc::synchronous_messenger::semaphore_sender::create_connection_info(caulk::ipc::synchronous_messenger::semaphore_sender *this)
{
  return MEMORY[0x1E0DDB738](this);
}

uint64_t caulk::mach::os_eventlink::copy_mach_port(caulk::mach::os_eventlink *this)
{
  return MEMORY[0x1E0DDB740](this);
}

uint64_t caulk::mach::os_workgroup_managed::copy_mach_port(caulk::mach::os_workgroup_managed *this)
{
  return MEMORY[0x1E0DDB748](this);
}

uint64_t DSPGraph::Graph::numOutputs(DSPGraph::Graph *this)
{
  return MEMORY[0x1E0CFFBD8](this);
}

uint64_t DSPGraph::Graph::hasProperty(DSPGraph::Graph *this)
{
  return MEMORY[0x1E0CFFBE0](this);
}

uint64_t DSPGraph::Graph::hasParameter(DSPGraph::Graph *this)
{
  return MEMORY[0x1E0CFFBE8](this);
}

uint64_t DSPGraph::Graph::out(DSPGraph::Graph *this)
{
  return MEMORY[0x1E0CFFC08](this);
}

uint64_t DSPGraph::Exception::print()
{
  return MEMORY[0x1E0CFFC20]();
}

const char *__cdecl std::runtime_error::what(const std::runtime_error *this)
{
  return (const char *)MEMORY[0x1E0DE4190](this);
}

std::string *__cdecl std::error_code::message(std::string *__return_ptr retstr, const std::error_code *this)
{
  return (std::string *)MEMORY[0x1E0DE41A0](retstr, this);
}

std::string *__cdecl std::locale::name(std::string *__return_ptr retstr, const std::locale *this)
{
  return (std::string *)MEMORY[0x1E0DE4240](retstr, this);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x1E0DE4248](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x1E0DE4258](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x1E0DE4288](this, a2);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const std::string *a2)
{
  return (std::logic_error *)MEMORY[0x1E0DE4290](this, a2);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const std::logic_error *a2)
{
  return (std::logic_error *)MEMORY[0x1E0DE4298](this, a2);
}

void std::range_error::~range_error(std::range_error *this)
{
  MEMORY[0x1E0DE42B8](this);
}

void std::domain_error::~domain_error(std::domain_error *this)
{
  MEMORY[0x1E0DE42C0](this);
}

{
  MEMORY[0x1E0DE42C8](this);
}

void std::out_of_range::~out_of_range(std::out_of_range *this)
{
  MEMORY[0x1E0DE42E0](this);
}

{
  MEMORY[0x1E0DE42E8](this);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x1E0DE4308](this, a2);
}

{
  return (std::runtime_error *)MEMORY[0x1E0DE4320](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::string *a2)
{
  return (std::runtime_error *)MEMORY[0x1E0DE4310](this, a2);
}

{
  return (std::runtime_error *)MEMORY[0x1E0DE4328](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::runtime_error *a2)
{
  return (std::runtime_error *)MEMORY[0x1E0DE4330](this, a2);
}

void std::runtime_error::~runtime_error(std::runtime_error *this)
{
  MEMORY[0x1E0DE4338](this);
}

{
  MEMORY[0x1E0DE4340](this);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x1E0DE4388](this);
}

void std::__call_once(std::once_flag::_State_type *a1, void *a2, void (__cdecl *a3)(void *))
{
  MEMORY[0x1E0DE43A8](a1, a2, a3);
}

std::regex_error *__cdecl std::regex_error::regex_error(std::regex_error *this, std::regex_constants::error_type __ecode)
{
  return (std::regex_error *)MEMORY[0x1E0DE43B0](this, *(_QWORD *)&__ecode);
}

void std::this_thread::sleep_for (const std::chrono::nanoseconds *__ns)
{
  MEMORY[0x1E0DE43C0](__ns);
}

std::__sp_mut *__cdecl std::__get_sp_mut(const void *a1)
{
  return (std::__sp_mut *)MEMORY[0x1E0DE43E0](a1);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x1E0DE43E8](__n);
}

void std::string::__grow_by_and_replace(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add, const std::string::value_type *__p_new_stuff)
{
  MEMORY[0x1E0DE43F8](this, __old_cap, __delta_cap, __old_sz, __n_copy, __n_del, __n_add, __p_new_stuff);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4428](this, __s, __n);
}

std::string::iterator std::string::insert(std::string *this, std::string::const_iterator __pos, std::string::value_type __c)
{
  return (std::string::iterator)MEMORY[0x1E0DE4460](this, __pos.__i_, __c);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4470](this, __pos, __s, __n);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  MEMORY[0x1E0DE4480](this, __n, __c);
}

std::string *__cdecl std::string::replace(std::string *this, std::string::size_type __pos, std::string::size_type __n1, const std::string::value_type *__s, std::string::size_type __n2)
{
  return (std::string *)MEMORY[0x1E0DE4490](this, __pos, __n1, __s, __n2);
}

void std::string::__grow_by(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add)
{
  MEMORY[0x1E0DE44B0](this, __old_cap, __delta_cap, __old_sz, __n_copy, __n_del, __n_add);
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
  MEMORY[0x1E0DE44B8](this, __c);
}

std::string *__cdecl std::string::basic_string(std::string *this, const std::string *__str, std::string::size_type __pos, std::string::size_type __n, std::allocator<char> *__a)
{
  return (std::string *)MEMORY[0x1E0DE44C8](this, __str, __pos, __n, __a);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x1E0DE44D8](this, __str);
}

std::system_error *__cdecl std::system_error::system_error(std::system_error *this, std::error_code __ec)
{
  return (std::system_error *)MEMORY[0x1E0DE4558](this, *(_QWORD *)&__ec.__val_, __ec.__cat_);
}

std::system_error *__cdecl std::system_error::system_error(std::system_error *this, int __ev, const std::error_category *__ecat, const char *__what_arg)
{
  return (std::system_error *)MEMORY[0x1E0DE4568](this, *(_QWORD *)&__ev, __ecat, __what_arg);
}

std::system_error *__cdecl std::system_error::system_error(std::system_error *this, int __ev, const std::error_category *__ecat, const std::string *__what_arg)
{
  return (std::system_error *)MEMORY[0x1E0DE4570](this, *(_QWORD *)&__ev, __ecat, __what_arg);
}

void std::system_error::~system_error(std::system_error *this)
{
  MEMORY[0x1E0DE4580](this);
}

{
  MEMORY[0x1E0DE4588](this);
}

uint64_t std::filebuf::open()
{
  return MEMORY[0x1E0DE4590]();
}

uint64_t std::filebuf::basic_filebuf()
{
  return MEMORY[0x1E0DE45A8]();
}

uint64_t std::filebuf::~filebuf()
{
  return MEMORY[0x1E0DE45B0]();
}

uint64_t std::istream::get()
{
  return MEMORY[0x1E0DE45C0]();
}

uint64_t std::istream::sentry::sentry()
{
  return MEMORY[0x1E0DE4608]();
}

uint64_t std::istream::~istream()
{
  return MEMORY[0x1E0DE4628]();
}

uint64_t std::ostream::put()
{
  return MEMORY[0x1E0DE4698]();
}

uint64_t std::ostream::flush()
{
  return MEMORY[0x1E0DE46A0]();
}

uint64_t std::ostream::write()
{
  return MEMORY[0x1E0DE46A8]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x1E0DE46B0]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x1E0DE46B8]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x1E0DE46C8]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x1E0DE46D0]();
}

{
  return MEMORY[0x1E0DE46E8]();
}

{
  return MEMORY[0x1E0DE4700]();
}

{
  return MEMORY[0x1E0DE4708]();
}

{
  return MEMORY[0x1E0DE4718]();
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x1E0DE47A8]();
}

void std::error_category::~error_category(std::error_category *this)
{
  MEMORY[0x1E0DE47C0](this);
}

std::regex_traits<char>::char_class_type std::__get_classname(const char *__s, BOOL __icase)
{
  return MEMORY[0x1E0DE47C8](__s, __icase);
}

std::__thread_struct *__cdecl std::__thread_struct::__thread_struct(std::__thread_struct *this)
{
  return (std::__thread_struct *)MEMORY[0x1E0DE47D0](this);
}

void std::__thread_struct::~__thread_struct(std::__thread_struct *this)
{
  MEMORY[0x1E0DE47D8](this);
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x1E0DE47E0]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x1E0DE47E8]();
}

const std::error_category *std::system_category(void)
{
  return (const std::error_category *)MEMORY[0x1E0DE4848]();
}

const std::error_category *std::generic_category(void)
{
  return (const std::error_category *)MEMORY[0x1E0DE4858]();
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::operator=()
{
  return MEMORY[0x1E0DE4888]();
}

void std::condition_variable::notify_all(std::condition_variable *this)
{
  MEMORY[0x1E0DE4890](this);
}

void std::condition_variable::notify_one(std::condition_variable *this)
{
  MEMORY[0x1E0DE4898](this);
}

void std::condition_variable::__do_timed_wait(std::condition_variable *this, std::unique_lock<std::mutex> *__lk, std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> a3)
{
  MEMORY[0x1E0DE48A0](this, __lk, a3.__d_.__rep_);
}

void std::condition_variable::wait(std::condition_variable *this, std::unique_lock<std::mutex> *__lk)
{
  MEMORY[0x1E0DE48A8](this, __lk);
}

void std::condition_variable::~condition_variable(std::condition_variable *this)
{
  MEMORY[0x1E0DE48B0](this);
}

void std::__shared_mutex_base::lock_shared(std::__shared_mutex_base *this)
{
  MEMORY[0x1E0DE48B8](this);
}

void std::__shared_mutex_base::unlock_shared(std::__shared_mutex_base *this)
{
  MEMORY[0x1E0DE48C0](this);
}

BOOL std::__shared_mutex_base::try_lock_shared(std::__shared_mutex_base *this)
{
  return MEMORY[0x1E0DE48C8](this);
}

void std::__shared_mutex_base::lock(std::__shared_mutex_base *this)
{
  MEMORY[0x1E0DE48D0](this);
}

void std::__shared_mutex_base::unlock(std::__shared_mutex_base *this)
{
  MEMORY[0x1E0DE48D8](this);
}

std::__shared_mutex_base *__cdecl std::__shared_mutex_base::__shared_mutex_base(std::__shared_mutex_base *this)
{
  return (std::__shared_mutex_base *)MEMORY[0x1E0DE48E8](this);
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
  MEMORY[0x1E0DE48F0](this);
}

std::__shared_weak_count *__cdecl std::__shared_weak_count::lock(std::__shared_weak_count *this)
{
  return (std::__shared_weak_count *)MEMORY[0x1E0DE48F8](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
  MEMORY[0x1E0DE4900](this);
}

std::__thread_specific_ptr<std::__thread_struct> *std::__thread_local_data(void)
{
  return (std::__thread_specific_ptr<std::__thread_struct> *)MEMORY[0x1E0DE4908]();
}

std::string *__cdecl std::__get_collation_name(std::string *__return_ptr retstr, const char *__s)
{
  return (std::string *)MEMORY[0x1E0DE4910](retstr, __s);
}

void std::__throw_system_error(int __ev, const char *__what_arg)
{
  MEMORY[0x1E0DE4920](*(_QWORD *)&__ev, __what_arg);
}

uint64_t std::pmr::get_default_resource(std::pmr *this)
{
  return MEMORY[0x1E0DE4950](this);
}

BOOL std::__fs::filesystem::__create_directories(const std::__fs::filesystem::path *a1, std::error_code *a2)
{
  return MEMORY[0x1E0DE4A00](a1, a2);
}

void std::mutex::lock(std::mutex *this)
{
  MEMORY[0x1E0DE4AA0](this);
}

void std::mutex::unlock(std::mutex *this)
{
  MEMORY[0x1E0DE4AA8](this);
}

BOOL std::mutex::try_lock(std::mutex *this)
{
  return MEMORY[0x1E0DE4AB0](this);
}

void std::mutex::~mutex(std::mutex *this)
{
  MEMORY[0x1E0DE4AB8](this);
}

uint64_t std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>()
{
  return MEMORY[0x1E0DE4B00]();
}

uint64_t std::__sort<std::__less<long long,long long> &,long long *>()
{
  return MEMORY[0x1E0DE4B28]();
}

std::chrono::steady_clock::time_point std::chrono::steady_clock::now(void)
{
  return (std::chrono::steady_clock::time_point)MEMORY[0x1E0DE4B38]();
}

std::chrono::system_clock::time_point std::chrono::system_clock::now(void)
{
  return (std::chrono::system_clock::time_point)MEMORY[0x1E0DE4B48]();
}

time_t std::chrono::system_clock::to_time_t(const std::chrono::system_clock::time_point *__t)
{
  return MEMORY[0x1E0DE4B50](__t);
}

const std::locale *std::locale::classic(void)
{
  return (const std::locale *)MEMORY[0x1E0DE4B78]();
}

std::locale *__cdecl std::locale::locale(std::locale *this, const std::locale *a2)
{
  return (std::locale *)MEMORY[0x1E0DE4B88](this, a2);
}

std::locale *__cdecl std::locale::locale(std::locale *this)
{
  return (std::locale *)MEMORY[0x1E0DE4B90](this);
}

void std::locale::~locale(std::locale *this)
{
  MEMORY[0x1E0DE4B98](this);
}

const std::locale *__cdecl std::locale::operator=(std::locale *this, const std::locale *a2)
{
  return (const std::locale *)MEMORY[0x1E0DE4BA0](this, a2);
}

unsigned int std::thread::hardware_concurrency(void)
{
  return MEMORY[0x1E0DE4BB0]();
}

void std::thread::join(std::thread *this)
{
  MEMORY[0x1E0DE4BB8](this);
}

void std::thread::~thread(std::thread *this)
{
  MEMORY[0x1E0DE4BC8](this);
}

void std::__sp_mut::lock(std::__sp_mut *this)
{
  MEMORY[0x1E0DE4C38](this);
}

void std::__sp_mut::unlock(std::__sp_mut *this)
{
  MEMORY[0x1E0DE4C40](this);
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
  MEMORY[0x1E0DE4C50](this);
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
  MEMORY[0x1E0DE4C68](this, __sb);
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
  MEMORY[0x1E0DE4C80](this, *(_QWORD *)&__state);
}

std::locale std::ios_base::imbue(std::ios_base *this, const std::locale *__loc)
{
  return (std::locale)MEMORY[0x1E0DE4C88](this, __loc);
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x1E0DE4D28]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, double __val)
{
  return (std::string *)MEMORY[0x1E0DE4D40](retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, float __val)
{
  return (std::string *)MEMORY[0x1E0DE4D50](retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return (std::string *)MEMORY[0x1E0DE4D58](retstr, *(_QWORD *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unsigned int __val)
{
  return (std::string *)MEMORY[0x1E0DE4D60](retstr, *(_QWORD *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, uint64_t __val)
{
  return (std::string *)MEMORY[0x1E0DE4D68](retstr, __val);
}

{
  return (std::string *)MEMORY[0x1E0DE4D78](retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return (std::string *)MEMORY[0x1E0DE4D70](retstr, __val);
}

uint64_t std::operator+<char>()
{
  return MEMORY[0x1E0DE4D88]();
}

std::bad_cast *__cdecl std::bad_cast::bad_cast(std::bad_cast *this)
{
  return (std::bad_cast *)MEMORY[0x1E0DE4D90](this);
}

{
  return (std::bad_cast *)MEMORY[0x1E0DE4D98](this);
}

void std::bad_cast::~bad_cast(std::bad_cast *this)
{
  MEMORY[0x1E0DE4DA8](this);
}

std::bad_alloc *__cdecl std::bad_alloc::bad_alloc(std::bad_alloc *this)
{
  return (std::bad_alloc *)MEMORY[0x1E0DE4DB0](this);
}

void std::exception::~exception(std::exception *this)
{
  MEMORY[0x1E0DE4DD0](this);
}

{
  MEMORY[0x1E0DE4DD8](this);
}

int std::uncaught_exceptions(void)
{
  return MEMORY[0x1E0DE4E08]();
}

void std::terminate(void)
{
  MEMORY[0x1E0DE4E18]();
}

uint64_t operator delete[]()
{
  return off_1E696A7D8();
}

void operator delete(void *__p)
{
  off_1E696A7E0(__p);
}

void operator delete(void *__p, std::align_val_t a2)
{
  off_1E696A7E8(__p, a2);
}

uint64_t operator delete()
{
  return off_1E696A7F0();
}

uint64_t operator new[]()
{
  return off_1E696A7F8();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_1E696A800(__sz);
}

void *__cdecl operator new(size_t __sz, const std::nothrow_t *a2)
{
  return (void *)off_1E696A808(__sz, a2);
}

void *__cdecl operator new(size_t __sz, std::align_val_t a2)
{
  return (void *)off_1E696A810(__sz, a2);
}

uint64_t operator new()
{
  return off_1E696A818();
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
  MEMORY[0x1E0C80A58](a1, a2, *(_QWORD *)&a3, a4);
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1E0DE5068](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x1E0C80A98](lpfunc, obj, lpdso_handle);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1E0DE5080](a1);
}

char *__cxa_demangle(const char *lpmangled, char *lpout, size_t *lpoutlen, int *lpstatus)
{
  return (char *)MEMORY[0x1E0DE5090](lpmangled, lpout, lpoutlen, lpstatus);
}

void __cxa_end_catch(void)
{
  MEMORY[0x1E0DE5098]();
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x1E0DE50A0](a1);
}

void __cxa_guard_abort(__guard *a1)
{
  MEMORY[0x1E0DE50B0](a1);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1E0DE50B8](a1);
}

void __cxa_guard_release(__guard *a1)
{
  MEMORY[0x1E0DE50C0](a1);
}

void __cxa_rethrow(void)
{
  MEMORY[0x1E0DE50D0]();
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x1E0DE50D8](a1, lptinfo, a3);
}

void *__dynamic_cast(const void *lpsrc, const struct __class_type_info *lpstype, const struct __class_type_info *lpdtype, ptrdiff_t s2d)
{
  return (void *)MEMORY[0x1E0DE50E0](lpsrc, lpstype, lpdtype, s2d);
}

int *__error(void)
{
  return (int *)MEMORY[0x1E0C80AC0]();
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x1E0C80B50](*(_QWORD *)&a1, a2);
}

uint64_t __udivti3()
{
  return MEMORY[0x1E0C80C80]();
}

uint64_t _os_assert_log()
{
  return MEMORY[0x1E0C80FF0]();
}

uint64_t _os_crash()
{
  return MEMORY[0x1E0C81000]();
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x1E0C81010]();
}

uint64_t _os_feature_enabled_simple_impl()
{
  return MEMORY[0x1E0C81018]();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81020](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81038](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81048](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C810D0](dso, log, type, spid, name, format, buf, *(_QWORD *)&size);
}

void abort(void)
{
  MEMORY[0x1E0C813A8]();
}

int access(const char *a1, int a2)
{
  return MEMORY[0x1E0C813D0](a1, *(_QWORD *)&a2);
}

long double atan2(long double __y, long double __x)
{
  long double result;

  MEMORY[0x1E0C81620](__y, __x);
  return result;
}

int atoi(const char *a1)
{
  return MEMORY[0x1E0C81668](a1);
}

int backtrace(void **a1, int a2)
{
  return MEMORY[0x1E0C816B8](a1, *(_QWORD *)&a2);
}

char **__cdecl backtrace_symbols(void *const *a1, int a2)
{
  return (char **)MEMORY[0x1E0C816C8](a1, *(_QWORD *)&a2);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

int close(int a1)
{
  return MEMORY[0x1E0C82688](*(_QWORD *)&a1);
}

int closedir(DIR *a1)
{
  return MEMORY[0x1E0C82698](a1);
}

long double cos(long double __x)
{
  long double result;

  MEMORY[0x1E0C82B40](__x);
  return result;
}

uint64_t debug_syscall_reject()
{
  return MEMORY[0x1E0C82B90]();
}

void dispatch_activate(dispatch_object_t object)
{
  MEMORY[0x1E0C82BC0](object);
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82BC8](when, queue, block);
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
  MEMORY[0x1E0C82BE8](queue);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C00](queue, block);
}

void dispatch_async_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  MEMORY[0x1E0C82C18](queue, context, work);
}

dispatch_block_t dispatch_block_create(dispatch_block_flags_t flags, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x1E0C82C60](flags, block);
}

intptr_t dispatch_block_wait(dispatch_block_t block, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82C98](block, timeout);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1E0C82D00](identifier, flags);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1E0C82D20]();
}

void dispatch_group_enter(dispatch_group_t group)
{
  MEMORY[0x1E0C82D28](group);
}

void dispatch_group_leave(dispatch_group_t group)
{
  MEMORY[0x1E0C82D30](group);
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82D48](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x1E0C82E08](predicate, block);
}

uint64_t dispatch_pthread_root_queue_create()
{
  return MEMORY[0x1E0C82E18]();
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E28](attr, frequency);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E38](attr, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E48](label, attr);
}

dispatch_queue_t dispatch_queue_create_with_target_V2(const char *label, dispatch_queue_attr_t attr, dispatch_queue_t target)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E50](label, attr, target);
}

void dispatch_release(dispatch_object_t object)
{
  MEMORY[0x1E0C82E98](object);
}

void dispatch_resume(dispatch_object_t object)
{
  MEMORY[0x1E0C82EA0](object);
}

void dispatch_retain(dispatch_object_t object)
{
  MEMORY[0x1E0C82EA8](object);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1E0C82EB8](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1E0C82EC8](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82ED8](dsema, timeout);
}

void dispatch_set_target_queue(dispatch_object_t object, dispatch_queue_t queue)
{
  MEMORY[0x1E0C82F08](object, queue);
}

void dispatch_source_cancel(dispatch_source_t source)
{
  MEMORY[0x1E0C82F10](source);
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1E0C82F20](type, handle, mask, queue);
}

void dispatch_source_set_cancel_handler(dispatch_source_t source, dispatch_block_t handler)
{
  MEMORY[0x1E0C82F48](source, handler);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
  MEMORY[0x1E0C82F58](source, handler);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82F90](queue, block);
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1E0C82FB8](when, delta);
}

dispatch_workloop_t dispatch_workloop_create_inactive(const char *label)
{
  return (dispatch_workloop_t)MEMORY[0x1E0C82FE0](label);
}

uint64_t dispatch_workloop_set_scheduler_priority()
{
  return MEMORY[0x1E0C83010]();
}

int dladdr(const void *a1, Dl_info *a2)
{
  return MEMORY[0x1E0C83028](a1, a2);
}

int dlclose(void *__handle)
{
  return MEMORY[0x1E0C83030](__handle);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x1E0C83038]();
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x1E0C83040](__path, *(_QWORD *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1E0C83050](__handle, __symbol);
}

void exit(int a1)
{
  MEMORY[0x1E0C83278](*(_QWORD *)&a1);
}

long double exp(long double __x)
{
  long double result;

  MEMORY[0x1E0C83280](__x);
  return result;
}

long double exp2(long double __x)
{
  long double result;

  MEMORY[0x1E0C83288](__x);
  return result;
}

int fchmod(int a1, mode_t a2)
{
  return MEMORY[0x1E0C832D0](*(_QWORD *)&a1, a2);
}

int fclose(FILE *a1)
{
  return MEMORY[0x1E0C832F8](a1);
}

int fflush(FILE *a1)
{
  return MEMORY[0x1E0C83370](a1);
}

int fileno(FILE *a1)
{
  return MEMORY[0x1E0C833B0](a1);
}

int flock(int a1, int a2)
{
  return MEMORY[0x1E0C83400](*(_QWORD *)&a1, *(_QWORD *)&a2);
}

long double fmod(long double __x, long double __y)
{
  long double result;

  MEMORY[0x1E0C83440](__x, __y);
  return result;
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x1E0C83460](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C83478](a1, a2);
}

int fputc(int a1, FILE *a2)
{
  return MEMORY[0x1E0C83488](*(_QWORD *)&a1, a2);
}

int fputs(const char *a1, FILE *a2)
{
  return MEMORY[0x1E0C83490](a1, a2);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1E0C834A0](__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

int fseek(FILE *a1, uint64_t a2, int a3)
{
  return MEMORY[0x1E0C83530](a1, a2, *(_QWORD *)&a3);
}

uint64_t ftell(FILE *a1)
{
  return MEMORY[0x1E0C83580](a1);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1E0C835E0](__ptr, __size, __nitems, __stream);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x1E0C83660](a1);
}

pid_t getpid(void)
{
  return MEMORY[0x1E0C83760]();
}

int getpriority(int a1, id_t a2)
{
  return MEMORY[0x1E0C83770](*(_QWORD *)&a1, *(_QWORD *)&a2);
}

int gettimeofday(timeval *a1, void *a2)
{
  return MEMORY[0x1E0C83820](a1, a2);
}

long double hypot(long double __x, long double __y)
{
  long double result;

  MEMORY[0x1E0C838E8](__x, __y);
  return result;
}

uint64_t kdebug_trace()
{
  return MEMORY[0x1E0C83A20]();
}

int kill(pid_t a1, int a2)
{
  return MEMORY[0x1E0C83A48](*(_QWORD *)&a1, *(_QWORD *)&a2);
}

tm *__cdecl localtime(const time_t *a1)
{
  return (tm *)MEMORY[0x1E0C83BA8](a1);
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x1E0C83C50]();
}

char *__cdecl mach_error_string(mach_error_t error_value)
{
  return (char *)MEMORY[0x1E0C83C80](*(_QWORD *)&error_value);
}

uint64_t mach_get_times()
{
  return MEMORY[0x1E0C83C88]();
}

mach_msg_return_t mach_msg(mach_msg_header_t *msg, mach_msg_option_t option, mach_msg_size_t send_size, mach_msg_size_t rcv_size, mach_port_name_t rcv_name, mach_msg_timeout_t timeout, mach_port_name_t notify)
{
  return MEMORY[0x1E0C83CB0](msg, *(_QWORD *)&option, *(_QWORD *)&send_size, *(_QWORD *)&rcv_size, *(_QWORD *)&rcv_name, *(_QWORD *)&timeout, *(_QWORD *)&notify);
}

kern_return_t mach_port_allocate(ipc_space_t task, mach_port_right_t right, mach_port_name_t *name)
{
  return MEMORY[0x1E0C83CE0](*(_QWORD *)&task, *(_QWORD *)&right, name);
}

kern_return_t mach_port_deallocate(ipc_space_t task, mach_port_name_t name)
{
  return MEMORY[0x1E0C83CF8](*(_QWORD *)&task, *(_QWORD *)&name);
}

kern_return_t mach_port_get_attributes(ipc_space_read_t task, mach_port_name_t name, mach_port_flavor_t flavor, mach_port_info_t port_info_out, mach_msg_type_number_t *port_info_outCnt)
{
  return MEMORY[0x1E0C83D20](*(_QWORD *)&task, *(_QWORD *)&name, *(_QWORD *)&flavor, port_info_out, port_info_outCnt);
}

kern_return_t mach_port_insert_right(ipc_space_t task, mach_port_name_t name, mach_port_t poly, mach_msg_type_name_t polyPoly)
{
  return MEMORY[0x1E0C83D48](*(_QWORD *)&task, *(_QWORD *)&name, *(_QWORD *)&poly, *(_QWORD *)&polyPoly);
}

kern_return_t mach_port_mod_refs(ipc_space_t task, mach_port_name_t name, mach_port_right_t right, mach_port_delta_t delta)
{
  return MEMORY[0x1E0C83D58](*(_QWORD *)&task, *(_QWORD *)&name, *(_QWORD *)&right, *(_QWORD *)&delta);
}

kern_return_t mach_port_set_attributes(ipc_space_t task, mach_port_name_t name, mach_port_flavor_t flavor, mach_port_info_t port_info, mach_msg_type_number_t port_infoCnt)
{
  return MEMORY[0x1E0C83D78](*(_QWORD *)&task, *(_QWORD *)&name, *(_QWORD *)&flavor, port_info, *(_QWORD *)&port_infoCnt);
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x1E0C83DB8](info);
}

kern_return_t mach_wait_until(uint64_t deadline)
{
  return MEMORY[0x1E0C83E28](deadline);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83EF8](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F00](size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x1E0C84070](__s, *(_QWORD *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1E0C84078](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1E0C840B0](__b, *(_QWORD *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
  MEMORY[0x1E0C840B8](__b, __pattern16, __len);
}

int mkdir(const char *a1, mode_t a2)
{
  return MEMORY[0x1E0C84160](a1, a2);
}

int mkstemps(char *a1, int a2)
{
  return MEMORY[0x1E0C841B0](a1, *(_QWORD *)&a2);
}

char *__cdecl mktemp(char *a1)
{
  return (char *)MEMORY[0x1E0C841C0](a1);
}

int mlock(const void *a1, size_t a2)
{
  return MEMORY[0x1E0C841D0](a1, a2);
}

int munlock(const void *a1, size_t a2)
{
  return MEMORY[0x1E0C84218](a1, a2);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1E0DE7BA8](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1E0DE7BB8]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7BD0](a1);
}

void objc_autoreleasePoolPop(void *context)
{
  MEMORY[0x1E0DE7BD8](context);
}

void *objc_autoreleasePoolPush(void)
{
  return (void *)MEMORY[0x1E0DE7BE0]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7BE8](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1E0DE7BF8]();
}

void objc_copyWeak(id *to, id *from)
{
  MEMORY[0x1E0DE7C38](to, from);
}

void objc_destroyWeak(id *location)
{
  MEMORY[0x1E0DE7C60](location);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x1E0DE7CD0](self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1E0DE7CE0](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1E0DE7D08](location);
}

void objc_moveWeak(id *to, id *from)
{
  MEMORY[0x1E0DE7D18](to, from);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D30](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1E0DE7D38]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1E0DE7D40]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1E0DE7D48]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1E0DE7D50]();
}

void objc_release(id a1)
{
  MEMORY[0x1E0DE7D78](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1E0DE7E50](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7E58](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E60](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1E0DE7E70](a1);
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F90](self, _cmd, newValue, offset);
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7FA0](self, _cmd, newValue, offset);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x1E0DE7FB0](location, obj);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1E0C84480](a1, *(_QWORD *)&a2);
}

DIR *__cdecl opendir(const char *a1)
{
  return (DIR *)MEMORY[0x1E0C844C0](a1);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1E0C84728](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1E0C84780](oslog, type);
}

void os_release(void *object)
{
  MEMORY[0x1E0C84910](object);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x1E0C84920](log);
}

os_signpost_id_t os_signpost_id_generate(os_log_t log)
{
  return MEMORY[0x1E0C84928](log);
}

os_signpost_id_t os_signpost_id_make_with_pointer(os_log_t log, const void *ptr)
{
  return MEMORY[0x1E0C84930](log, ptr);
}

uint64_t os_transaction_create()
{
  return MEMORY[0x1E0C84970]();
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C84998](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C849B0](lock);
}

uint64_t os_unfair_recursive_lock_lock_with_options()
{
  return MEMORY[0x1E0C849B8]();
}

uint64_t os_unfair_recursive_lock_unlock()
{
  return MEMORY[0x1E0C849D0]();
}

uint64_t os_variant_has_internal_diagnostics()
{
  return MEMORY[0x1E0C849F8]();
}

uint64_t os_workgroup_attr_set_interval_type()
{
  return MEMORY[0x1E0C84A28]();
}

uint64_t os_workgroup_attr_set_telemetry_flavor()
{
  return MEMORY[0x1E0C84A30]();
}

uint64_t os_workgroup_interval_data_set_telemetry()
{
  return MEMORY[0x1E0C84A80]();
}

uint64_t pdwriter_close()
{
  return MEMORY[0x1E0DDC808]();
}

uint64_t pdwriter_name()
{
  return MEMORY[0x1E0DDC810]();
}

uint64_t pdwriter_new_value()
{
  return MEMORY[0x1E0DDC830]();
}

uint64_t pdwriter_open()
{
  return MEMORY[0x1E0DDC838]();
}

uint64_t pdwriter_record_variable_dbl()
{
  return MEMORY[0x1E0DDC858]();
}

long double pow(long double __x, long double __y)
{
  long double result;

  MEMORY[0x1E0C84BB8](__x, __y);
  return result;
}

float powf(float a1, float a2)
{
  float result;

  MEMORY[0x1E0C84BC0](a1, a2);
  return result;
}

int printf(const char *a1, ...)
{
  return MEMORY[0x1E0C84BD0](a1);
}

int proc_pidinfo(int pid, int flavor, uint64_t arg, void *buffer, int buffersize)
{
  return MEMORY[0x1E0C84C40](*(_QWORD *)&pid, *(_QWORD *)&flavor, arg, buffer, *(_QWORD *)&buffersize);
}

int proc_regionfilename(int pid, uint64_t address, void *buffer, uint32_t buffersize)
{
  return MEMORY[0x1E0C84C60](*(_QWORD *)&pid, address, buffer, *(_QWORD *)&buffersize);
}

int pthread_attr_destroy(pthread_attr_t *a1)
{
  return MEMORY[0x1E0C84CB0](a1);
}

int pthread_attr_getschedparam(const pthread_attr_t *a1, sched_param *a2)
{
  return MEMORY[0x1E0C84CB8](a1, a2);
}

int pthread_attr_init(pthread_attr_t *a1)
{
  return MEMORY[0x1E0C84CC8](a1);
}

int pthread_attr_setdetachstate(pthread_attr_t *a1, int a2)
{
  return MEMORY[0x1E0C84CD8](a1, *(_QWORD *)&a2);
}

int pthread_attr_setschedparam(pthread_attr_t *a1, const sched_param *a2)
{
  return MEMORY[0x1E0C84CE8](a1, a2);
}

int pthread_attr_setschedpolicy(pthread_attr_t *a1, int a2)
{
  return MEMORY[0x1E0C84CF0](a1, *(_QWORD *)&a2);
}

int pthread_cond_broadcast(pthread_cond_t *a1)
{
  return MEMORY[0x1E0C84D18](a1);
}

int pthread_cond_destroy(pthread_cond_t *a1)
{
  return MEMORY[0x1E0C84D20](a1);
}

int pthread_cond_init(pthread_cond_t *a1, const pthread_condattr_t *a2)
{
  return MEMORY[0x1E0C84D28](a1, a2);
}

int pthread_cond_signal(pthread_cond_t *a1)
{
  return MEMORY[0x1E0C84D30](a1);
}

int pthread_cond_timedwait_relative_np(pthread_cond_t *a1, pthread_mutex_t *a2, const timespec *a3)
{
  return MEMORY[0x1E0C84D40](a1, a2, a3);
}

int pthread_cond_wait(pthread_cond_t *a1, pthread_mutex_t *a2)
{
  return MEMORY[0x1E0C84D48](a1, a2);
}

int pthread_create(pthread_t *a1, const pthread_attr_t *a2, void *(__cdecl *a3)(void *), void *a4)
{
  return MEMORY[0x1E0C84D50](a1, a2, a3, a4);
}

int pthread_equal(pthread_t a1, pthread_t a2)
{
  return MEMORY[0x1E0C84D80](a1, a2);
}

int pthread_getname_np(pthread_t a1, char *a2, size_t a3)
{
  return MEMORY[0x1E0C84DB0](a1, a2, a3);
}

void *__cdecl pthread_getspecific(pthread_key_t a1)
{
  return (void *)MEMORY[0x1E0C84DC0](a1);
}

int pthread_key_create(pthread_key_t *a1, void (__cdecl *a2)(void *))
{
  return MEMORY[0x1E0C84DE0](a1, a2);
}

int pthread_kill(pthread_t a1, int a2)
{
  return MEMORY[0x1E0C84DF8](a1, *(_QWORD *)&a2);
}

mach_port_t pthread_mach_thread_np(pthread_t a1)
{
  return MEMORY[0x1E0C84E00](a1);
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E18](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x1E0C84E20](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E28](a1);
}

int pthread_mutex_trylock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E30](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E38](a1);
}

int pthread_once(pthread_once_t *a1, void (*a2)(void))
{
  return MEMORY[0x1E0C84E68](a1, a2);
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x1E0C84ED8]();
}

int pthread_set_qos_class_self_np(qos_class_t __qos_class, int __relative_priority)
{
  return MEMORY[0x1E0C84EF0](*(_QWORD *)&__qos_class, *(_QWORD *)&__relative_priority);
}

int pthread_setname_np(const char *a1)
{
  return MEMORY[0x1E0C84F08](a1);
}

int pthread_setspecific(pthread_key_t a1, const void *a2)
{
  return MEMORY[0x1E0C84F18](a1, a2);
}

int pthread_threadid_np(pthread_t a1, __uint64_t *a2)
{
  return MEMORY[0x1E0C84F38](a1, a2);
}

int readdir_r(DIR *a1, dirent *a2, dirent **a3)
{
  return MEMORY[0x1E0C85010](a1, a2, a3);
}

uint64_t sandbox_extension_consume()
{
  return MEMORY[0x1E0C851A0]();
}

uint64_t sandbox_extension_issue_iokit_registry_entry_class()
{
  return MEMORY[0x1E0C851D8]();
}

uint64_t sandbox_extension_issue_mach()
{
  return MEMORY[0x1E0C851E8]();
}

void sandbox_free_error(char *errorbuf)
{
  MEMORY[0x1E0C85210](errorbuf);
}

int sandbox_init(const char *profile, uint64_t flags, char **errorbuf)
{
  return MEMORY[0x1E0C85218](profile, flags, errorbuf);
}

int sched_yield(void)
{
  return MEMORY[0x1E0C85270]();
}

kern_return_t semaphore_create(task_t task, semaphore_t *semaphore, int policy, int value)
{
  return MEMORY[0x1E0C852C8](*(_QWORD *)&task, semaphore, *(_QWORD *)&policy, *(_QWORD *)&value);
}

kern_return_t semaphore_destroy(task_t task, semaphore_t semaphore)
{
  return MEMORY[0x1E0C852D0](*(_QWORD *)&task, *(_QWORD *)&semaphore);
}

kern_return_t semaphore_signal(semaphore_t semaphore)
{
  return MEMORY[0x1E0C852D8](*(_QWORD *)&semaphore);
}

kern_return_t semaphore_timedwait(semaphore_t semaphore, mach_timespec_t wait_time)
{
  return ((uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0C852E8])(*(_QWORD *)&semaphore, wait_time);
}

kern_return_t semaphore_wait(semaphore_t semaphore)
{
  return MEMORY[0x1E0C852F0](*(_QWORD *)&semaphore);
}

int sigaction(int a1, const sigaction *a2, sigaction *a3)
{
  return MEMORY[0x1E0C853E0](*(_QWORD *)&a1, a2, a3);
}

long double sin(long double __x)
{
  long double result;

  MEMORY[0x1E0C85418](__x);
  return result;
}

float sinf(float a1)
{
  float result;

  MEMORY[0x1E0C85420](a1);
  return result;
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1E0C85440](__str, __size, __format);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x1E0C854D8](a1, a2);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1E0C85520](__s1, __s2);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1E0C85548](*(_QWORD *)&__errnum);
}

size_t strftime(char *a1, size_t a2, const char *a3, const tm *a4)
{
  return MEMORY[0x1E0C85558](a1, a2, a3, a4);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x1E0C85570](__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1E0C85578](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1E0C855A8](__s1, __s2, __n);
}

char *__cdecl strsep(char **__stringp, const char *__delim)
{
  return (char *)MEMORY[0x1E0C855F0](__stringp, __delim);
}

double strtod(const char *a1, char **a2)
{
  double result;

  MEMORY[0x1E0C85618](a1, a2);
  return result;
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1E0C85658](__str, __endptr, *(_QWORD *)&__base);
}

int sysctl(int *a1, u_int a2, void *a3, size_t *a4, void *a5, size_t a6)
{
  return MEMORY[0x1E0C85798](a1, *(_QWORD *)&a2, a3, a4, a5, a6);
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return MEMORY[0x1E0C857A0](a1, a2, a3, a4, a5);
}

int sysctlnametomib(const char *a1, int *a2, size_t *a3)
{
  return MEMORY[0x1E0C857B0](a1, a2, a3);
}

kern_return_t thread_info(thread_inspect_t target_act, thread_flavor_t flavor, thread_info_t thread_info_out, mach_msg_type_number_t *thread_info_outCnt)
{
  return MEMORY[0x1E0C858F8](*(_QWORD *)&target_act, *(_QWORD *)&flavor, thread_info_out, thread_info_outCnt);
}

kern_return_t thread_policy_get(thread_inspect_t thread, thread_policy_flavor_t flavor, thread_policy_t policy_info, mach_msg_type_number_t *policy_infoCnt, BOOLean_t *get_default)
{
  return MEMORY[0x1E0C85900](*(_QWORD *)&thread, *(_QWORD *)&flavor, policy_info, policy_infoCnt, get_default);
}

kern_return_t thread_policy_set(thread_act_t thread, thread_policy_flavor_t flavor, thread_policy_t policy_info, mach_msg_type_number_t policy_infoCnt)
{
  return MEMORY[0x1E0C85908](*(_QWORD *)&thread, *(_QWORD *)&flavor, policy_info, *(_QWORD *)&policy_infoCnt);
}

time_t time(time_t *a1)
{
  return MEMORY[0x1E0C85950](a1);
}

int usleep(useconds_t a1)
{
  return MEMORY[0x1E0C859E0](*(_QWORD *)&a1);
}

void uuid_generate(uuid_t out)
{
  MEMORY[0x1E0C85A18](out);
}

void uuid_unparse(const uuid_t uu, uuid_string_t out)
{
  MEMORY[0x1E0C85A40](uu, out);
}

void vDSP_vadd(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x1E0C8C368](__A, __IA, __B, __IB, __C, __IC, __N);
}

void vDSP_vfill(const float *__A, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x1E0C8C460](__A, __C, __IC, __N);
}

void vDSP_vsdiv(const float *__A, vDSP_Stride __IA, const float *__B, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x1E0C8C860](__A, __IA, __B, __C, __IC, __N);
}

void vDSP_vsma(const float *__A, vDSP_Stride __IA, const float *__B, const float *__C, vDSP_Stride __IC, float *__D, vDSP_Stride __ID, vDSP_Length __N)
{
  MEMORY[0x1E0C8C888](__A, __IA, __B, __C, __IC, __D, __ID, __N);
}

void vDSP_vsmul(const float *__A, vDSP_Stride __IA, const float *__B, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x1E0C8C8E0](__A, __IA, __B, __C, __IC, __N);
}

kern_return_t vm_allocate(vm_map_t target_task, vm_address_t *address, vm_size_t size, int flags)
{
  return MEMORY[0x1E0C85A80](*(_QWORD *)&target_task, address, size, *(_QWORD *)&flags);
}

kern_return_t vm_deallocate(vm_map_t target_task, vm_address_t address, vm_size_t size)
{
  return MEMORY[0x1E0C85A98](*(_QWORD *)&target_task, address, size);
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return MEMORY[0x1E0C85B98](__str, __size, __format, a4);
}

void vsyslog(int a1, const char *a2, __darwin_va_list a3)
{
  MEMORY[0x1E0C85BB8](*(_QWORD *)&a1, a2, a3);
}

__int32 *__cdecl wmemchr(__int32 *__s, __int32 __c, size_t __n)
{
  return (__int32 *)MEMORY[0x1E0C85CB8](__s, *(_QWORD *)&__c, __n);
}

uint64_t xpc_connection_set_oneshot_instance()
{
  return MEMORY[0x1E0C860A8]();
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return (xpc_object_t)MEMORY[0x1E0C86208](keys, values, count);
}

xpc_object_t xpc_dictionary_get_value(xpc_object_t xdict, const char *key)
{
  return (xpc_object_t)MEMORY[0x1E0C862E0](xdict, key);
}

void xpc_dictionary_set_value(xpc_object_t xdict, const char *key, xpc_object_t value)
{
  MEMORY[0x1E0C863B8](xdict, key, value);
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return (xpc_type_t)MEMORY[0x1E0C86520](object);
}

xpc_object_t xpc_int64_create(int64_t value)
{
  return (xpc_object_t)MEMORY[0x1E0C86568](value);
}

uint64_t xpc_mach_send_copy_right()
{
  return MEMORY[0x1E0C865D8]();
}

uint64_t xpc_mach_send_create()
{
  return MEMORY[0x1E0C865E0]();
}

xpc_object_t xpc_null_create(void)
{
  return (xpc_object_t)MEMORY[0x1E0C86628]();
}

xpc_object_t xpc_shmem_create(void *region, size_t length)
{
  return (xpc_object_t)MEMORY[0x1E0C866F0](region, length);
}

