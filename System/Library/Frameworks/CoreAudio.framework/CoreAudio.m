OSStatus AudioDeviceStop(AudioObjectID inDevice, AudioDeviceIOProcID inProcID)
{
  HALS_ObjectMap *v3;
  HALS_ObjectMap *v4;
  HALS_Object *v5;
  HALS_ObjectMap *v6;
  int v7;
  int v8;
  int v9;
  HALS_Object *v11;
  int v13;
  _DWORD *exception;
  int v15;
  const char *v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v3 = *(HALS_ObjectMap **)&inDevice;
  v19 = *MEMORY[0x1E0C80C00];
  if (AllowHALClientsInThisProcess())
  {
    v4 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(v3);
    v6 = v4;
    if (v4)
    {
      v8 = *((_DWORD *)v4 + 5);
      v7 = *((_DWORD *)v4 + 6);
      if (v8 <= 1701078389)
      {
        if (v8 == 1633773415)
        {
LABEL_11:
          (*(void (**)(HALS_ObjectMap *, AudioDeviceIOProcID))(*(_QWORD *)v4 + 896))(v4, inProcID);
          HALS_ObjectMap::ReleaseObject(v6, v11);
          return 0;
        }
        v9 = 1633969526;
      }
      else
      {
        if (v8 == 1701078390 || v8 == 1701733488)
          goto LABEL_11;
        v9 = 1919182198;
      }
      if (v8 == v9)
        goto LABEL_11;
      if (v8 != v7)
      {
        if (v7 <= 1701078389)
        {
          if (v7 == 1633773415)
            goto LABEL_11;
          v13 = 1633969526;
        }
        else
        {
          if (v7 == 1701078390 || v7 == 1701733488)
            goto LABEL_11;
          v13 = 1919182198;
        }
        if (v7 == v13)
          goto LABEL_11;
      }
      HALS_ObjectMap::ReleaseObject(v4, v5);
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v15 = 136315394;
      v16 = "HALS_Framework-ios-imp.cpp";
      v17 = 1024;
      v18 = 2127;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioDeviceStop: no device with given ID", (uint8_t *)&v15, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 560947818;
  }
  return 560033144;
}

void sub_1B57BB6F0(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1B57BB708(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B57BB5B0);
  }
  JUMPOUT(0x1B57BB6F8);
}

void sub_1B57BB758()
{
  JUMPOUT(0x1B57BB6F8);
}

Boolean AudioObjectHasProperty(AudioObjectID inObjectID, const AudioObjectPropertyAddress *inAddress)
{
  HALS_ObjectMap *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  HALS_Device *v7;
  AudioObjectPropertyAddress *v8;
  HALS_Device *v9;
  int v10;
  int v11;
  unsigned int *v12;
  void *v13;
  Boolean v14;
  HALS_Object *v15;
  HALS_Object *v16;
  HALS_ObjectMap *InternalIOContextID;
  uint64_t v18;
  HALS_ObjectMap *v19;
  HALS_Object *v20;
  Boolean v21;
  int v22;
  int v23;
  _DWORD *exception;
  _DWORD *v25;
  _DWORD *v26;
  unsigned int v28[2];
  int v29;
  AudioObjectPropertyAddress v30;
  std::__shared_weak_count *v31;
  uint8_t buf[4];
  const char *v33;
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;
  uint64_t v38;

  v3 = *(HALS_ObjectMap **)&inObjectID;
  v38 = *MEMORY[0x1E0C80C00];
  if (!AllowHALClientsInThisProcess())
    return 0;
  HALS_System::StartServer((uint64_t *)&v30.mElement, 0);
  v4 = v31;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (!inAddress)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v33 = "HALS_Framework-ios-imp.cpp";
      v34 = 1024;
      v35 = 437;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioObjectHasProperty: the address pointer is NULL", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 1852797029;
  }
  v7 = (HALS_Device *)HALS_ObjectMap::CopyObjectByObjectID(v3);
  v9 = v7;
  if (!v7)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v33 = "HALS_Framework-ios-imp.cpp";
      v34 = 1024;
      v35 = 441;
      v36 = 1024;
      v37 = (int)v3;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioObjectHasProperty: no object with given ID %u", buf, 0x18u);
    }
    v25 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v25 = &off_1E69A1B30;
    v25[2] = 560947818;
  }
  v10 = *((_DWORD *)v7 + 5);
  if (v10 <= 1701078389)
  {
    if (v10 == 1633773415)
      goto LABEL_16;
    v11 = 1633969526;
  }
  else
  {
    if (v10 == 1701078390 || v10 == 1701733488)
      goto LABEL_16;
    v11 = 1919182198;
  }
  if (v10 != v11)
  {
    v22 = *((_DWORD *)v7 + 6);
    if (v10 != v22)
    {
      if (v22 <= 1701078389)
      {
        if (v22 == 1633773415)
          goto LABEL_16;
        v23 = 1633969526;
      }
      else
      {
        if (v22 == 1701078390 || v22 == 1919182198)
          goto LABEL_16;
        v23 = 1701733488;
      }
      if (v22 == v23)
        goto LABEL_16;
    }
    v21 = (*(uint64_t (**)(HALS_Device *, HALS_ObjectMap *, const AudioObjectPropertyAddress *, _QWORD))(*(_QWORD *)v7 + 88))(v7, v3, inAddress, 0);
    goto LABEL_27;
  }
LABEL_16:
  *(_QWORD *)&v30.mSelector = 0;
  v29 = 0;
  *(_QWORD *)v28 = 0;
  HALB_Info::TranslateDeviceAddressToControlAddress((int *)inAddress, (const AudioObjectPropertyAddress *)&v30.mScope, &v30.mSelector, v28, v8);
  if (v30.mScope)
  {
    v12 = (unsigned int *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)v9 + 640))(v9);
    v13 = v9;
    if (v12)
    {
      v3 = (HALS_ObjectMap *)v12[4];
      inAddress = (const AudioObjectPropertyAddress *)v28;
      v13 = v12;
    }
    v14 = (*(uint64_t (**)(void *, HALS_ObjectMap *, const AudioObjectPropertyAddress *, _QWORD))(*(_QWORD *)v13 + 88))(v13, v3, inAddress, 0);
    HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v12, v15);
    goto LABEL_28;
  }
  if (HALB_Info::IsIOContextProperty((HALB_Info *)inAddress->mSelector, 0)
    && (*(unsigned int (**)(HALS_Device *))(*(_QWORD *)v9 + 832))(v9))
  {
    InternalIOContextID = (HALS_ObjectMap *)HALS_Device::GetInternalIOContextID(v9);
    v18 = HALS_ObjectMap::CopyObjectByObjectID(InternalIOContextID);
    v19 = (HALS_ObjectMap *)v18;
    if (!v18)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v33 = "HALS_Framework-ios-imp.cpp";
        v34 = 1024;
        v35 = 475;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioObjectHasProperty: no IO Context with given description", buf, 0x12u);
      }
      v26 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v26 = &off_1E69A1B30;
      v26[2] = 2003332927;
    }
    v14 = (*(uint64_t (**)(uint64_t, HALS_ObjectMap *, const AudioObjectPropertyAddress *, _QWORD))(*(_QWORD *)v18 + 88))(v18, InternalIOContextID, inAddress, 0);
    HALS_ObjectMap::ReleaseObject(v19, v20);
    goto LABEL_28;
  }
  v21 = (*(uint64_t (**)(HALS_Device *, HALS_ObjectMap *, const AudioObjectPropertyAddress *, _QWORD))(*(_QWORD *)v9 + 88))(v9, v3, inAddress, 0);
LABEL_27:
  v14 = v21;
LABEL_28:
  HALS_ObjectMap::ReleaseObject(v9, v16);
  return v14;
}

uint64_t AudioObjectPropertiesChanged(HALS_ObjectMap *a1, const BOOL *a2, uint64_t a3, uint64_t a4)
{
  HALS_ObjectMap *v9;
  HALS_ObjectMap *v10;
  HALS_Object *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _DWORD *exception;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19[2];
  HALS_System *v20;
  std::__shared_weak_count *v21;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if ((AMCP::Feature_Flags::access_run_new_hal(0, a2) & 1) != 0)
    return 1970171760;
  if (!AllowHALClientsInThisProcess())
    return 560033144;
  if ((_DWORD)a3 && !a4)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v23 = "HALS_Framework-ios-imp.cpp";
      v24 = 1024;
      v25 = 2518;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioObjectPropertiesChanged: the number of addresses doesn't match the array size", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 1852797029;
  }
  v19[0] = 0;
  v19[1] = 0;
  HALS_System::GetInstance(&v20, 0, v19);
  if (!v20)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v23 = "HALS_Framework-ios-imp.cpp";
      v24 = 1024;
      v25 = 2522;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioObjectCreate: no system object", buf, 0x12u);
    }
    v17 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v17 = &off_1E69A1B30;
    v17[2] = 1852797029;
  }
  v9 = HALS_System::CopyPlugInByReferenceID(v20, a1);
  v10 = v9;
  if (!v9)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v23 = "HALS_Framework-ios-imp.cpp";
      v24 = 1024;
      v25 = 2526;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioObjectCreate: no plug-in with given reference ID", buf, 0x12u);
    }
    v18 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v18 = &off_1E69A1B30;
    v18[2] = 560947818;
  }
  (*(void (**)(HALS_ObjectMap *, const BOOL *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v9 + 296))(v9, a2, a3, a4, 0);
  HALS_ObjectMap::ReleaseObject(v10, v11);
  v12 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  return 0;
}

void sub_1B57BBF90(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1B57BBFA8(void *a1, int a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  if (a2)
  {
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B57BBD88);
  }
  JUMPOUT(0x1B57BBF98);
}

void sub_1B57BC02C()
{
  JUMPOUT(0x1B57BBF98);
}

double CalculateSafetyViolation_Read(HALS_IOClock **a1, unsigned int a2)
{
  unint64_t v2;
  unint64_t v6;
  double v7;

  v6 = 0;
  v7 = 0.0;
  HALS_IOClock::GetRaw0Time(a1[36], &v7, &v6);
  LODWORD(v2) = *((_DWORD *)a1 + 79);
  return floor(*((double *)a1[36] + 5 * *((unsigned int *)a1[36] + 48) + 26) * (double)(mach_absolute_time() - v6))
       + v7
       - (double)v2
       - (*((double *)a1 + 64)
        + (double)a2);
}

void HALB_Guard::Locker::~Locker(HALB_Mutex **this)
{
  if (!*((_DWORD *)this + 2))
    HALB_Mutex::Unlock(*this);
}

uint64_t HALB_Guard::WaitFor(HALB_Guard *this, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  _opaque_pthread_t *v6;
  __darwin_time_t v7;
  uint64_t v8;
  uint64_t v9;
  timespec v11;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v2 = *((unsigned int *)this + 22);
  if (!(_DWORD)v2)
  {
    v5 = (_QWORD *)((char *)this + 72);
    v6 = (_opaque_pthread_t *)*((_QWORD *)this + 9);
    if (v6 == pthread_self())
    {
      if (a2 >= 0x3B9ACA00)
      {
        v7 = a2 / 0x3B9ACA00;
        a2 %= 0x3B9ACA00uLL;
      }
      else
      {
        v7 = 0;
      }
      v11.tv_sec = v7;
      v11.tv_nsec = a2;
      v8 = *((_QWORD *)this + 10);
      *v5 = 0;
      v5[1] = 0;
      v9 = pthread_cond_timedwait_relative_np((pthread_cond_t *)this + 2, (pthread_mutex_t *)((char *)this + 8), &v11);
      v2 = v9;
      if (!(_DWORD)v9 || (_DWORD)v9 == 60)
        goto LABEL_13;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v13 = "HALB_Mutex.cpp";
        v14 = 1024;
        v15 = 233;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_Guard::Wait: waiting failed", buf, 0x12u);
      }
      if ((_DWORD)v2 == 60)
      {
LABEL_13:
        *((_QWORD *)this + 10) = v8;
        *((_QWORD *)this + 9) = pthread_self();
      }
    }
    else
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        v13 = "HALB_Mutex.cpp";
        v14 = 1024;
        v15 = 242;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALB_Mutex::WaitFor: can't wait with a mutex the thread hasn't locked", buf, 0x12u);
      }
      return 1;
    }
  }
  return v2;
}

void HALB_Guard::NotifyAll(pthread_cond_t *this)
{
  int v1;
  int v2;
  _BYTE v3[5];
  uint8_t buf[4];
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  int v9;
  __int16 v10;
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (!*(_DWORD *)&this[1].__opaque[32])
  {
    v1 = pthread_cond_broadcast(this + 2);
    if (v1)
    {
      v2 = v1;
      v3[0] = HIBYTE(v1);
      v3[1] = BYTE2(v1);
      v3[2] = BYTE1(v1);
      v3[3] = v1;
      v3[4] = 0;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315906;
        v5 = "HALB_Mutex.cpp";
        v6 = 1024;
        v7 = 290;
        v8 = 1024;
        v9 = v2;
        v10 = 2080;
        v11 = v3;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_Guard::NotifyAll: signaling failed, Error: %d (%s)", buf, 0x22u);
      }
    }
  }
}

void HALB_Guard::WaitUntil(HALB_Guard *this, unint64_t a2, BOOL *a3)
{
  _opaque_pthread_t *v6;
  unint64_t v7;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  *a3 = 0;
  if (!*((_DWORD *)this + 22))
  {
    v6 = (_opaque_pthread_t *)*((_QWORD *)this + 9);
    if (v6 == pthread_self())
    {
      mach_absolute_time();
      v7 = __udivti3();
      if (a2 > v7)
      {
        *a3 = 1;
        HALB_Guard::WaitFor(this, a2 - v7);
      }
    }
    else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      v8 = 136315394;
      v9 = "HALB_Mutex.cpp";
      v10 = 1024;
      v11 = 266;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALB_Mutex::WaitUntil: can't wait with a mutex the thread hasn't locked", (uint8_t *)&v8, 0x12u);
    }
  }
}

uint64_t ___ZN11HALS_IOProc4CallEjPK14AudioTimeStampPK15AudioBufferListS2_PS3_S2__block_invoke(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1[4] + 24) + 16))(*(_QWORD *)(a1[4] + 24), a1[5], a1[6], a1[7], a1[8], a1[9]);
}

void sub_1B57BC6EC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void HALS_IOClock::ResetFilter(HALS_IOClock *this, double a2, double a3)
{
  int v3;
  char *v5;
  _BYTE *v6;
  int64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;

  v3 = *((_DWORD *)this + 45);
  if (v3 != 1918990199)
  {
    if (v3 == 1835103847)
    {
      v5 = (char *)*((_QWORD *)this + 68);
      v6 = (_BYTE *)*((_QWORD *)this + 67);
      v7 = v5 - v6;
      v8 = *((unsigned int *)this + 143);
      if (v8 != (v5 - v6) >> 3)
      {
        v9 = v7 >> 3;
        v10 = v8 - (v7 >> 3);
        if (v8 <= v7 >> 3)
        {
          if (v8 < v7 >> 3)
            *((_QWORD *)this + 68) = &v6[8 * v8];
        }
        else
        {
          v11 = *((_QWORD *)this + 69);
          if (v10 <= (v11 - (uint64_t)v5) >> 3)
          {
            v24 = &v5[8 * v10];
            v25 = 8 * v8 - 8 * v9;
            do
            {
              *(_QWORD *)v5 = 0;
              v5 += 8;
              v25 -= 8;
            }
            while (v25);
            *((_QWORD *)this + 68) = v24;
          }
          else
          {
            v12 = (v11 - (uint64_t)v6) >> 2;
            if (v12 <= v8)
              v12 = *((unsigned int *)this + 143);
            if ((unint64_t)(v11 - (_QWORD)v6) >= 0x7FFFFFFFFFFFFFF8)
              v13 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v13 = v12;
            v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v13);
            v16 = &v14[8 * v9];
            v17 = &v14[8 * v8];
            v18 = 8 * v8 - 8 * v9;
            v19 = v16;
            do
            {
              *(_QWORD *)v19 = 0;
              v19 += 8;
              v18 -= 8;
            }
            while (v18);
            v20 = &v14[8 * v15];
            v21 = (char *)*((_QWORD *)this + 68);
            v22 = (char *)*((_QWORD *)this + 67);
            while (v21 != v22)
            {
              v23 = *((_QWORD *)v21 - 1);
              v21 -= 8;
              *((_QWORD *)v16 - 1) = v23;
              v16 -= 8;
            }
            *((_QWORD *)this + 67) = v16;
            *((_QWORD *)this + 68) = v17;
            *((_QWORD *)this + 69) = v20;
            if (v22)
              operator delete(v22);
          }
        }
        v6 = (_BYTE *)*((_QWORD *)this + 67);
        v7 = 8 * *((unsigned int *)this + 143);
      }
      bzero(v6, v7);
      *((_QWORD *)this + 66) = 0;
      *((_QWORD *)this + 70) = 0;
      *((_DWORD *)this + 142) = 0;
    }
    else
    {
      LODWORD(a3) = *((_DWORD *)this + 44);
      *((double *)this + 72) = (double)*(unint64_t *)&a3 * a2;
    }
  }
}

uint64_t HALS_IOClock::Update(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned int *v4;
  double v5;
  unint64_t v6;
  unsigned int v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v12;
  double v13;
  _BOOL4 v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  caulk::concurrent::messenger *v19;
  _opaque_pthread_t *v20;
  mach_port_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  AMCP::Log::Scope_Registry *v26;
  AMCP::Log::Scope_Registry *v27;
  int v28;
  double v29;
  unint64_t v30;
  caulk::concurrent::messenger *v31;
  _opaque_pthread_t *v32;
  mach_port_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  double v38;
  double v39;
  double v40;
  double v41;
  uint64_t v42;
  unint64_t v43;
  caulk::concurrent::messenger *v44;
  _opaque_pthread_t *v45;
  mach_port_t v46;
  double v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  caulk::concurrent::messenger *v54;
  _opaque_pthread_t *v55;
  mach_port_t v56;
  uint64_t v57;
  const char *v58;
  const char *v59;
  unint64_t *v60;
  double v61;
  double v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  double v66;
  double v67;
  int v68;
  unsigned int v69;
  uint64_t v70;
  int v71;
  unsigned int v72;
  int v74;
  unsigned int v75;
  unint64_t v76;
  int v77;
  double v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  double v83;
  double v84;
  int v85;
  double v86;
  uint64_t v87;
  uint64_t v88;
  std::__shared_weak_count *v89;

  v4 = (unsigned int *)(a1 + 192);
  v5 = *(double *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_DWORD *)(a1 + 96);
  if (v6)
    v8 = 1;
  else
    v8 = *(_QWORD *)(a1 + 160) != 0;
  v9 = a1 + 40 * *(unsigned int *)(a1 + 192);
  v10 = *(_QWORD *)(a2 + 16);
  v12 = v5 == 0.0 && v6 == 0;
  v13 = *(double *)(a1 + 152);
  v14 = v5 != v13 || v6 != *(_QWORD *)(a1 + 160);
  LODWORD(v2) = *(_DWORD *)(a1 + 88);
  v15 = *(double *)(v9 + 200);
  v16 = *(_QWORD *)(v9 + 224);
  v87 = *(_QWORD *)(v9 + 232);
  if (!v7)
  {
    v17 = 0;
LABEL_23:
    v18 = 1;
    goto LABEL_24;
  }
  if (v10 != *(_QWORD *)(a1 + 104))
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v88, "com.apple.coreaudio", "AMCP");
    v19 = *(caulk::concurrent::messenger **)(v88 + 8);
    v20 = pthread_self();
    v21 = pthread_mach_thread_np(v20);
    v22 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 48, 8);
    *(_DWORD *)(v22 + 16) = 0;
    *(_BYTE *)(v22 + 20) = 0;
    *(_DWORD *)(v22 + 24) = v21;
    *(_QWORD *)(v22 + 32) = "HALS_IOClock.cpp";
    *(_DWORD *)(v22 + 40) = 134;
    *(_QWORD *)v22 = &off_1E69737F8;
    *(_QWORD *)(v22 + 8) = 0;
    caulk::concurrent::messenger::enqueue(v19, (caulk::concurrent::message *)v22);
    v23 = v89;
    if (v89)
    {
      p_shared_owners = (unint64_t *)&v89->__shared_owners_;
      do
        v25 = __ldaxr(p_shared_owners);
      while (__stlxr(v25 - 1, p_shared_owners));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    kdebug_trace();
    v17 = 1;
    goto LABEL_23;
  }
  v17 = 0;
  v18 = 0;
LABEL_24:
  *(_QWORD *)(a1 + 104) = v10;
  if (!v12 && v8 && v14)
  {
    v26 = *(AMCP::Log::Scope_Registry **)(a1 + 48);
    if (v26
      && (v26 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(AMCP::Log::Scope_Registry *))(*(_QWORD *)v26 + 48))(v26),
          (unint64_t)v26 < v6))
    {
      v27 = v26;
      v26 = (AMCP::Log::Scope_Registry *)kdebug_trace();
      if ((v18 & 1) != 0)
        goto LABEL_35;
    }
    else
    {
      v27 = 0;
      if ((v18 & 1) != 0)
      {
LABEL_35:
        if (v27)
        {
          AMCP::Log::Scope_Registry::get(v26);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v88, "com.apple.coreaudio", "AMCP");
          v31 = *(caulk::concurrent::messenger **)(v88 + 8);
          v32 = pthread_self();
          v33 = pthread_mach_thread_np(v32);
          v34 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 64, 8);
          *(_DWORD *)(v34 + 16) = 0;
          *(_BYTE *)(v34 + 20) = 0;
          *(_DWORD *)(v34 + 24) = v33;
          *(_QWORD *)(v34 + 32) = "HALS_IOClock.cpp";
          *(_DWORD *)(v34 + 40) = 152;
          *(_QWORD *)(v34 + 48) = v6;
          *(_QWORD *)(v34 + 56) = v27;
          *(_QWORD *)v34 = &off_1E6973850;
          *(_QWORD *)(v34 + 8) = 0;
          caulk::concurrent::messenger::enqueue(v31, (caulk::concurrent::message *)v34);
          v17 = v17 | 2;
          v35 = v89;
          if (v89)
          {
            v36 = (unint64_t *)&v89->__shared_owners_;
            do
              v37 = __ldaxr(v36);
            while (__stlxr(v37 - 1, v36));
            if (!v37)
            {
              ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
              std::__shared_weak_count::__release_weak(v35);
            }
          }
        }
        goto LABEL_67;
      }
    }
    if (*(_BYTE *)(a1 + 168))
      goto LABEL_35;
    v38 = (double)v2;
    v39 = *(double *)(a1 + 152);
    v40 = v39 + v38;
    if (v7 < 4)
    {
      if (v5 != v40)
      {
        AMCP::Log::Scope_Registry::get(v26);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v88, "com.apple.coreaudio", "AMCP");
        v44 = *(caulk::concurrent::messenger **)(v88 + 8);
        v45 = pthread_self();
        v46 = pthread_mach_thread_np(v45);
        v47 = *(double *)(a1 + 152);
        v48 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 64, 8);
        *(_DWORD *)(v48 + 16) = 0;
        *(_BYTE *)(v48 + 20) = 0;
        *(_DWORD *)(v48 + 24) = v46;
        *(_QWORD *)(v48 + 32) = "HALS_IOClock.cpp";
        *(_DWORD *)(v48 + 40) = 203;
        *(double *)(v48 + 48) = v38;
        *(double *)(v48 + 56) = v5 - v47;
        *(_QWORD *)v48 = &off_1E6973900;
        *(_QWORD *)(v48 + 8) = 0;
        caulk::concurrent::messenger::enqueue(v44, (caulk::concurrent::message *)v48);
        v49 = v89;
        if (!v89)
        {
LABEL_66:
          kdebug_trace();
          v17 = v17 | 4;
LABEL_67:
          LODWORD(v13) = *(_DWORD *)(a1 + 88);
          v61 = (double)*(unint64_t *)&v13;
          v62 = *(double *)(a1 + 112) * v61;
          *(_DWORD *)(a1 + 96) = 1;
          *(double *)(a1 + 152) = v5;
          *(_QWORD *)(a1 + 160) = v6;
          v63 = vcvtad_u64_f64(v62);
          *(double *)(a1 + 136) = v5 - v61;
          v64 = v6 - v63;
          *(_QWORD *)(a1 + 144) = v6 - v63;
          *(double *)(a1 + 120) = v5 - v61 - v61;
          v65 = v6 - v63 - v63;
          *(_QWORD *)(a1 + 128) = v65;
          v16 = *(_QWORD *)(a1 + 136);
          v30 = v64;
          v66 = (double)*(unsigned int *)(a1 + 176);
          v67 = (double)(v64 - v65);
          goto LABEL_68;
        }
        v50 = (unint64_t *)&v89->__shared_owners_;
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
LABEL_64:
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
        goto LABEL_66;
      }
      v42 = *(_QWORD *)(a1 + 160);
    }
    else
    {
      v41 = round(v15 * v38);
      v42 = *(_QWORD *)(a1 + 160);
      if (v27)
        v6 = v42 + (unint64_t)v41;
      if (*(_BYTE *)(a1 + 92))
        v43 = (unint64_t)v41 - 48000;
      else
        v43 = (v42 - *(_QWORD *)(a1 + 144)) / 0xAuLL;
      v52 = v43 + v42;
      if (v5 != v40 || v6 < v52)
      {
        AMCP::Log::Scope_Registry::get(v26);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v88, "com.apple.coreaudio", "AMCP");
        v54 = *(caulk::concurrent::messenger **)(v88 + 8);
        v55 = pthread_self();
        v56 = pthread_mach_thread_np(v55);
        v57 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 64, 8);
        v58 = "";
        if (v6 >= v52)
          v59 = "";
        else
          v59 = " not";
        *(_DWORD *)(v57 + 16) = 0;
        *(_BYTE *)(v57 + 20) = 0;
        *(_DWORD *)(v57 + 24) = v56;
        if (v5 != v40)
          v58 = " not";
        *(_QWORD *)(v57 + 32) = "HALS_IOClock.cpp";
        *(_DWORD *)(v57 + 40) = 193;
        *(_QWORD *)(v57 + 48) = v58;
        *(_QWORD *)(v57 + 56) = v59;
        *(_QWORD *)v57 = &off_1E69738A8;
        *(_QWORD *)(v57 + 8) = 0;
        caulk::concurrent::messenger::enqueue(v54, (caulk::concurrent::message *)v57);
        v49 = v89;
        if (!v89)
          goto LABEL_66;
        v60 = (unint64_t *)&v89->__shared_owners_;
        do
          v51 = __ldaxr(v60);
        while (__stlxr(v51 - 1, v60));
        goto LABEL_64;
      }
    }
    v74 = *(_DWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a1 + 136);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a1 + 144);
    *(double *)(a1 + 136) = v39;
    *(_QWORD *)(a1 + 144) = v42;
    *(double *)(a1 + 152) = v5;
    *(_QWORD *)(a1 + 160) = v6;
    v75 = v74 + 1;
    *(_DWORD *)(a1 + 96) = v74 + 1;
    if (v74 == -1)
      return v17;
    v16 = *(_QWORD *)(a1 + 136);
    v66 = (double)*(unsigned int *)(a1 + 176);
    v30 = *(_QWORD *)(a1 + 144);
    v76 = v30 - *(_QWORD *)(a1 + 128);
    v67 = (double)v76;
    if (v74)
    {
      v77 = *(_DWORD *)(a1 + 180);
      v78 = (double)v76;
      if (v77 != 1918990199)
      {
        if (v77 == 1835103847)
        {
          v79 = *(_QWORD *)(a1 + 560);
          v80 = *(unsigned int *)(a1 + 572);
          v81 = *(unsigned int *)(a1 + 568);
          v82 = *(_QWORD *)(a1 + 536);
          if (v79 == v80)
            *(double *)(a1 + 528) = *(double *)(a1 + 528) - *(double *)(v82 + 8 * v81);
          else
            ++v79;
          *(double *)(v82 + 8 * v81) = v67;
          v84 = *(double *)(a1 + 528) + v67;
          *(double *)(a1 + 528) = v84;
          *(_QWORD *)(a1 + 560) = v79;
          if ((_DWORD)v81 + 1 == (_DWORD)v80)
            v85 = 0;
          else
            v85 = v81 + 1;
          *(_DWORD *)(a1 + 568) = v85;
          v78 = v84 / (double)v79;
        }
        else
        {
          v83 = 0.25;
          if (v75 >= 5)
          {
            v83 = 0.5;
            if (v75 >= 9)
            {
              v83 = 0.75;
              if (v75 >= 0x11)
                v83 = dbl_1B5D68BD0[v75 < 0x81];
            }
          }
          v78 = (1.0 - v83) * v67 + v83 * *(double *)(a1 + 576);
          *(double *)(a1 + 576) = v78;
        }
      }
      v86 = v78 / v66;
      v30 = v87 + (unint64_t)v67;
      *(double *)(a1 + 592) = v86 - v15;
      *(_QWORD *)(a1 + 600) = (unint64_t)v67 - vcvtad_u64_f64(v15 * v66);
      v29 = v15 + v86 - v15;
      *(_DWORD *)(a1 + 584) = 0;
      goto LABEL_69;
    }
LABEL_68:
    v29 = v67 / v66;
    HALS_IOClock::ResetFilter((HALS_IOClock *)a1, v67 / v66, v67);
    *(_DWORD *)(a1 + 584) = 0;
    *(_OWORD *)(a1 + 592) = 0u;
LABEL_69:
    kdebug_trace();
    kdebug_trace();
    goto LABEL_70;
  }
  if (!*(_DWORD *)(a1 + 96))
    return v17;
  v28 = *(_DWORD *)(a1 + 584);
  if (!v28)
    return v17;
  v29 = v15 + *(double *)(a1 + 592);
  v30 = *(_QWORD *)(a1 + 600) + v87;
  *(_DWORD *)(a1 + 584) = v28 - 1;
LABEL_70:
  v68 = *(_DWORD *)(a1 + 192);
  if ((v68 + 1) < *(_DWORD *)(a1 + 188))
    v69 = v68 + 1;
  else
    v69 = 0;
  v70 = a1 + 40 * v69;
  *(double *)(v70 + 200) = v29;
  *(double *)(v70 + 208) = 1.0 / v29;
  *(double *)(v70 + 216) = v29 / *(double *)(a1 + 112);
  *(_QWORD *)(v70 + 224) = v16;
  *(_QWORD *)(v70 + 232) = v30;
  __dmb(0xBu);
  v71 = *(_DWORD *)(a1 + 192);
  while (1)
  {
    v72 = __ldxr(v4);
    if (v72 != v71)
      break;
    if (!__stxr(v69, v4))
      return v17;
  }
  __clrex();
  return v17;
}

void sub_1B57BD05C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void HALB_IOThread::Locker::~Locker(HALB_IOThread::Locker *this)
{
  if (!*((_DWORD *)this + 2))
    HALB_Mutex::Unlock((HALB_Mutex *)(*(_QWORD *)this + 16));
}

void HALB_IOThread::Unlocker::~Unlocker(HALB_IOThread::Unlocker *this)
{
  if (!*((_DWORD *)this + 2))
    HALB_Mutex::Lock((HALB_Mutex *)(*(_QWORD *)this + 16));
}

uint64_t HALS_IOContext::GetCommandGate(HALS_IOContext *this)
{
  return *((_QWORD *)this + 6);
}

{
  return *((_QWORD *)this + 6);
}

uint64_t HALS_IOEngine2::ProcessInputStreamData()
{
  return 0;
}

uint64_t HALS_IOEngine2::ProcessOutputStreamData()
{
  return 0;
}

uint64_t HALS_IOEngine2::_AnalyzeStreamForEvents(HALS_IOEngine2 *this, HALS_IOEngine2_StreamInfo *a2, AudioTimeStamp *a3, unsigned int a4)
{
  uint64_t result;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  _OWORD v15[2];
  uint64_t v16;
  _OWORD v17[2];
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;

  result = HALS_IOEngine2_StreamInfo::GetPointersForMixBuffer((uint64_t)&v22, (uint64_t)a2, (unint64_t)a3->mSampleTime, a4);
  v8 = v24;
  v9 = v27;
  if (v25)
    v10 = v25 + v26;
  else
    v10 = 0;
  v11 = *(_OWORD *)((char *)a2 + 56);
  v19 = *(_OWORD *)((char *)a2 + 40);
  v20 = v11;
  v21 = *((_QWORD *)a2 + 9);
  if (v22)
  {
    v12 = *((unsigned int *)a2 + 2);
    v13 = *(_OWORD *)((char *)a2 + 56);
    v17[0] = *(_OWORD *)((char *)a2 + 40);
    v17[1] = v13;
    v18 = *((_QWORD *)a2 + 9);
    result = (*(uint64_t (**)(HALS_IOEngine2 *, uint64_t, AudioTimeStamp *, _OWORD *, _QWORD, uint64_t))(*(_QWORD *)this + 1320))(this, v12, a3, v17, v24, v22 + v23);
  }
  if (v10)
  {
    a3->mSampleTime = a3->mSampleTime + (double)v8;
    v14 = *((unsigned int *)a2 + 2);
    v15[0] = v19;
    v15[1] = v20;
    v16 = v21;
    return (*(uint64_t (**)(HALS_IOEngine2 *, uint64_t, AudioTimeStamp *, _OWORD *, uint64_t, uint64_t))(*(_QWORD *)this + 1320))(this, v14, a3, v15, v9, v10);
  }
  return result;
}

uint64_t HALS_IOEngine2::_CalculateSizeForQuantize(HALS_IOEngine2 *this)
{
  unsigned int v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = 2 * (_DWORD)this;
  if ((2 * (_DWORD)this) < 0x10)
    return 16;
  v3 = 64;
  v4 = 128;
  v5 = 256;
  v6 = 512;
  v7 = 1024;
  v8 = 4096;
  if (v1 < 0x800)
    v8 = 2048;
  if (v1 >= 0x400)
    v7 = v8;
  if (v1 >= 0x200)
    v6 = v7;
  if (v1 >= 0x100)
    v5 = v6;
  if (v1 >= 0x80)
    v4 = v5;
  if (v1 >= 0x40)
    v3 = v4;
  if (v1 >= 0x20)
    return v3;
  else
    return 32;
}

void HALS_IOEngine2::AudioIssueDetectorAnalyzeBuffer(HALS_IOEngine2 *this, uint64_t a2, const AudioTimeStamp *a3, AudioStreamBasicDescription *a4, uint64_t a5, void *a6)
{
  UInt32 mChannelsPerFrame;
  UInt32 mBytesPerFrame;
  _QWORD *v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD v15[4];
  void *v16;

  mBytesPerFrame = a4->mBytesPerFrame;
  mChannelsPerFrame = a4->mChannelsPerFrame;
  if ((a4->mFormatFlags & 0x20) != 0)
    mChannelsPerFrame = 1;
  v15[0] = 1;
  v15[2] = mChannelsPerFrame;
  v15[3] = mBytesPerFrame * a5;
  v16 = a6;
  v8 = (_QWORD *)*((_QWORD *)this + 6);
  if (v8)
  {
    v12 = v8[1];
    v13 = v8[2];
    if (v12 != v13)
    {
      while (*(_DWORD *)v12 != (_DWORD)a2)
      {
        v12 += 8;
        if (v12 == v13)
          goto LABEL_10;
      }
    }
    if (v12 == v13 || !*(_BYTE *)(v12 + 4))
    {
LABEL_10:
      v14 = v8[4];
      if (AudioIssueDetectorLibraryLoader(void)::once != -1)
        dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global);
      if (AudioIssueDetectorLibraryLoader(void)::libSym)
        AudioIssueDetectorLibraryLoader(void)::libSym(v14, a2, 0, v15, a5, a3);
    }
  }
}

double HALS_IOEngine2::GetEarliestCurrentPositionForOutputStream(HALS_IOEngine2 *this, int a2, int a3)
{
  HALB_Mutex *v3;
  double v4;
  _QWORD v6[6];
  int v7;
  int v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  int v12;

  v9 = 0;
  v10 = (int *)&v9;
  v11 = 0x2000000000;
  v12 = 0;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 0x40000000;
  v6[2] = ___ZN14HALS_IOEngine241GetEarliestCurrentPositionForOutputStreamEjj_block_invoke;
  v6[3] = &unk_1E698E748;
  v6[4] = &v9;
  v6[5] = this;
  v7 = a2;
  v8 = a3;
  v3 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v3, (uint64_t)v6);
  v4 = (double)v10[6];
  _Block_object_dispose(&v9, 8);
  return v4;
}

void sub_1B57BD434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZN14HALS_IOEngine241GetEarliestCurrentPositionForOutputStreamEjj_block_invoke(uint64_t a1)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = (int)(*(double (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 40) + 1288))(*(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 48), *(unsigned int *)(a1 + 52));
}

_QWORD *HALS_IOEngine2::_GetEarliestCurrentPositionForOutputStream(_QWORD *this, int a2, unsigned int a3, __n128 a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = *(_QWORD *)(this[96] + 48);
  v5 = (*(_QWORD *)(this[96] + 56) - v4) >> 3;
  a4.n128_u64[0] = 0;
  if (v5 > a3)
  {
    if (v5 <= a3)
      std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
    v6 = a3;
    v7 = *(_QWORD *)(v4 + 8 * a3);
    if (v7)
    {
      if (a2)
      {
        v8 = *(_DWORD *)(v7 + 48);
        v9 = *(_DWORD *)(v7 + 52) & 0x40;
        if (v8 == 1819304813 && v9 == 0)
        {
          v11 = (uint64_t *)this[92];
          v12 = (uint64_t *)this[93];
          if (v11 != v12)
          {
            v13 = (uint64_t *)this[92];
            while (1)
            {
              v14 = *v13;
              if (*(_DWORD *)(*(_QWORD *)(*v13 + 32) + 16) == a2)
                break;
              if (++v13 == v12)
                return this;
            }
            v15 = 1.79769313e308;
            do
            {
              if (*(_BYTE *)(*v11 + 48))
              {
                v16 = *(_QWORD *)(*(_QWORD *)(*v11 + 32) + 96);
                this = (_QWORD *)(*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v16 + 152))(v16, a4);
                if ((_DWORD)this)
                {
                  v17 = *v11;
                  if (*v11 != v14)
                  {
                    v19 = v17 + 112;
                    v18 = *(_QWORD *)(v17 + 112);
                    if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v19 + 8) - v18) >> 3) > v6)
                    {
                      v20 = *(_QWORD *)(v18 + 40 * v6 + 32);
                      if (v20 >= 1)
                      {
                        a4.n128_f64[0] = (double)v20;
                        if (v15 > (double)v20)
                          v15 = (double)v20;
                      }
                    }
                  }
                }
              }
              ++v11;
            }
            while (v11 != v12);
          }
        }
      }
    }
  }
  return this;
}

uint64_t HALS_AHPManager::GetCommandGate(HALS_AHPManager *this)
{
  return *((_QWORD *)this + 41);
}

{
  return *((_QWORD *)this + 41);
}

void HALS_AHPManager::ObjectPropertiesChanged(HALS_AHPManager *this, HALS_ObjectMap *a2, unsigned int a3, const AudioObjectPropertyAddress *a4, HALS_Client *a5)
{
  HALB_Mutex *v10;
  uint64_t v11;
  HALS_Object *v12;
  HALS_ObjectMap *v13;
  uint64_t v14;
  _QWORD v15[6];
  int v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;

  v17 = 0;
  v18 = &v17;
  v19 = 0x2000000000;
  if (*((_DWORD *)this + 4) == (_DWORD)a2)
    goto LABEL_3;
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 0x40000000;
  v15[2] = ___ZN15HALS_AHPManager23ObjectPropertiesChangedEjjPK26AudioObjectPropertyAddressP11HALS_Client_block_invoke;
  v15[3] = &unk_1E698ED98;
  v16 = (int)a2;
  v15[4] = &v17;
  v15[5] = this;
  v10 = (HALB_Mutex *)(*(uint64_t (**)(HALS_AHPManager *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v10, (uint64_t)v15);
  if (*((_BYTE *)v18 + 24))
  {
LABEL_3:
    v11 = HALS_ObjectMap::CopyObjectByObjectID(a2);
    v13 = (HALS_ObjectMap *)v11;
    if (v11)
    {
      if (a5)
        v14 = *((unsigned int *)a5 + 4);
      else
        v14 = 0;
      HALS_Object::PropertiesChanged_Sync(this, (HALS_NotificationManager *)*(unsigned int *)(v11 + 16), v14, a3, a4);
    }
    HALS_ObjectMap::ReleaseObject(v13, v12);
  }
  _Block_object_dispose(&v17, 8);
}

void sub_1B57BD6F4(_Unwind_Exception *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  HALS_ObjectMap *v17;

  HALS_ObjectMap::ReleaseObject(v17, a2);
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void HALS_IOProcessor::Process(HALS_IOProcessor *this, double a2, unsigned __int8 *a3, unsigned int *a4, unsigned __int8 *__dst, unsigned int *a6, unsigned __int8 *a7, unsigned __int8 *a8)
{
  unsigned __int8 *v13;
  double v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  uint64_t v19;
  int v20;
  unsigned __int8 *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  HALS_VolumeProcessor *v26;
  HALS_VolumeProcessor *v27;
  unsigned int v28;
  unsigned int v29;
  HALS_DelayProcessor *v30;
  HALS_DelayProcessor *v31;
  int v32;
  HALS_Resampler *v33;
  const unsigned __int8 *v34;
  unsigned int *v35;
  unsigned __int8 *v36;
  unsigned int *v37;
  HALS_DelayProcessor *v38;
  HALS_DelayProcessor *v39;
  HALS_DelayProcessor *v40;
  unsigned __int8 *v41;
  HALS_DelayProcessor *v42;
  HALS_Resampler *v43;
  const unsigned __int8 *v44;
  unsigned int *v45;
  unsigned __int8 *v46;
  unsigned int *v47;
  unsigned __int8 *v48;
  HALS_DelayProcessor *v49;
  HALS_ChannelMapper *v50;
  UInt32 v51;
  unsigned __int8 *v52;
  HALS_DelayProcessor *v53;
  HALS_ChannelMapper *v54;
  UInt32 v55;
  unsigned __int8 *v56;
  unsigned int v57;
  HALS_VolumeProcessor *v58;
  HALS_DelayProcessor *v59;
  HALS_DelayProcessor *v60;
  unsigned int v61;
  unsigned int v62;
  size_t v63;
  unsigned __int8 *v64;
  double v65;
  _QWORD v66[2];
  _QWORD v67[2];
  unsigned __int8 *v68;
  unsigned __int8 *v69;

  v13 = a3;
  v14 = a2;
  if (*((_BYTE *)this + 8))
  {
    v16 = *((_QWORD *)this + 19);
    if (v16)
    {
      v65 = a2;
      v66[0] = a3;
      v66[1] = a4;
      v67[0] = __dst;
      v67[1] = a6;
      v68 = a7;
      v69 = a8;
      v17 = *(_QWORD *)(v16 + 64);
      for (i = *(_QWORD *)(v16 + 72); v17 != i; v17 += 16)
      {
        v19 = *(_QWORD *)(v17 + 8);
        if (v19)
        {
          v20 = *(_DWORD *)(v17 + 4);
          if ((v20 & 0x40) != 0)
            v21 = v68;
          else
            v21 = 0;
          if ((v20 & 8) != 0)
            v22 = v66;
          else
            v22 = 0;
          if ((v20 & 4) != 0)
            v23 = v67;
          else
            v23 = v22;
          if ((v20 & 2) != 0)
            v24 = v66;
          else
            v24 = 0;
          if ((v20 & 1) != 0)
            v25 = v67;
          else
            v25 = v24;
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, unsigned __int8 *, double))(*(_QWORD *)v19 + 16))(v19, v25, v23, v21, v65);
        }
      }
    }
    else
    {
      switch(*((_DWORD *)this + 26))
      {
        case 1:
          v27 = (HALS_VolumeProcessor *)*((_QWORD *)this + 14);
          v28 = *a6;
          if (a3 != __dst)
            goto LABEL_36;
          v29 = *a6;
          goto LABEL_79;
        case 2:
          goto LABEL_40;
        case 3:
          goto LABEL_39;
        case 8:
          v30 = (HALS_DelayProcessor *)*((_QWORD *)this + 17);
          if (a3 == __dst)
            HALS_DelayProcessor::Process(v30, a3, *a6);
          else
            HALS_DelayProcessor::Process(v30, __dst, a3, *a6);
          goto LABEL_80;
        case 9:
          v31 = (HALS_DelayProcessor *)*((_QWORD *)this + 17);
          v32 = *a6;
          if (a3 == __dst)
          {
            HALS_DelayProcessor::Process(v31, a3, v32);
            v27 = (HALS_VolumeProcessor *)*((_QWORD *)this + 14);
            v29 = *a6;
            a2 = v14;
            a3 = v13;
LABEL_79:
            HALS_VolumeProcessor::Process(v27, a2, a3, v29);
          }
          else
          {
            HALS_DelayProcessor::Process(v31, __dst, v32);
            v27 = (HALS_VolumeProcessor *)*((_QWORD *)this + 14);
            v28 = *a6;
LABEL_36:
            HALS_VolumeProcessor::Process(v27, v14, (float *)__dst, v13, v28);
          }
          goto LABEL_80;
        case 0xA:
          HALS_DelayProcessor::Process(*((HALS_DelayProcessor **)this + 17), __dst, *a6);
          goto LABEL_40;
        case 0xB:
          HALS_DelayProcessor::Process(*((HALS_DelayProcessor **)this + 17), __dst, *a6);
LABEL_39:
          HALS_VolumeProcessor::Process(*((HALS_VolumeProcessor **)this + 14), v14, __dst, *a6);
LABEL_40:
          v33 = (HALS_Resampler *)*((_QWORD *)this + 16);
          v34 = __dst;
          v35 = a6;
          v36 = v13;
          v37 = a4;
          goto LABEL_51;
        default:
          if (__dst == a3)
            return;
          if (!*((_BYTE *)this + 10))
          {
            v63 = *((unsigned int *)this + 3);
            v64 = a3;
            a3 = __dst;
            goto LABEL_96;
          }
          memcpy(a3, __dst, *((_DWORD *)this + 3) * *a6);
LABEL_80:
          v61 = *a6;
          break;
      }
LABEL_81:
      *a4 = v61;
    }
  }
  else
  {
    switch(*((_DWORD *)this + 26))
    {
      case 1:
        v26 = (HALS_VolumeProcessor *)*((_QWORD *)this + 14);
        if (__dst != a3)
        {
          HALS_VolumeProcessor::Process(v26, a2, (float *)a3, __dst, *a4);
          goto LABEL_86;
        }
        v62 = *a4;
        goto LABEL_85;
      case 2:
        goto LABEL_50;
      case 3:
        goto LABEL_54;
      case 4:
        goto LABEL_57;
      case 5:
        goto LABEL_61;
      case 6:
        goto LABEL_66;
      case 7:
        goto LABEL_72;
      case 8:
        v38 = (HALS_DelayProcessor *)*((_QWORD *)this + 17);
        if (__dst == a3)
          HALS_DelayProcessor::Process(v38, a3, *a4);
        else
          HALS_DelayProcessor::Process(v38, a3, __dst, *a4);
        goto LABEL_86;
      case 9:
        v39 = (HALS_DelayProcessor *)*((_QWORD *)this + 17);
        if (__dst == a3)
        {
          HALS_DelayProcessor::Process(v39, a3, *a4);
          v26 = (HALS_VolumeProcessor *)*((_QWORD *)this + 14);
          v62 = *a4;
          a2 = v14;
          a3 = v13;
LABEL_85:
          HALS_VolumeProcessor::Process(v26, a2, a3, v62);
          goto LABEL_86;
        }
        HALS_DelayProcessor::Process(v39, a3, __dst, *a4);
LABEL_63:
        v57 = *a4;
        *a6 = *a4;
        v58 = (HALS_VolumeProcessor *)*((_QWORD *)this + 14);
        goto LABEL_76;
      case 0xA:
        v40 = (HALS_DelayProcessor *)*((_QWORD *)this + 17);
        if (!*((_BYTE *)this + 9))
        {
          HALS_DelayProcessor::Process(v40, a3, a7, *a4);
          goto LABEL_67;
        }
        HALS_DelayProcessor::Process(v40, a3, *a4);
LABEL_50:
        v33 = (HALS_Resampler *)*((_QWORD *)this + 16);
        v34 = v13;
        v35 = a4;
        v36 = __dst;
        v37 = a6;
LABEL_51:
        v41 = a7;
        goto LABEL_69;
      case 0xB:
        v42 = (HALS_DelayProcessor *)*((_QWORD *)this + 17);
        if (!*((_BYTE *)this + 9))
        {
          HALS_DelayProcessor::Process(v42, a3, a7, *a4);
          goto LABEL_73;
        }
        HALS_DelayProcessor::Process(v42, a3, *a4);
LABEL_54:
        v43 = (HALS_Resampler *)*((_QWORD *)this + 16);
        v44 = v13;
        v45 = a4;
        v46 = __dst;
        v47 = a6;
        v48 = a7;
        goto LABEL_75;
      case 0xC:
        v49 = (HALS_DelayProcessor *)*((_QWORD *)this + 17);
        if (*((_BYTE *)this + 9))
        {
          HALS_DelayProcessor::Process(v49, a3, *a4);
LABEL_57:
          v50 = (HALS_ChannelMapper *)*((_QWORD *)this + 15);
          v51 = *a4;
          v52 = v13;
        }
        else
        {
          HALS_DelayProcessor::Process(v49, a3, a7, *a4);
          v50 = (HALS_ChannelMapper *)*((_QWORD *)this + 15);
          v51 = *a4;
          v52 = a7;
        }
        HALS_ChannelMapper::Process(v50, v52, __dst, v51);
        goto LABEL_86;
      case 0xD:
        v53 = (HALS_DelayProcessor *)*((_QWORD *)this + 17);
        if (*((_BYTE *)this + 9))
        {
          HALS_DelayProcessor::Process(v53, a3, *a4);
LABEL_61:
          v54 = (HALS_ChannelMapper *)*((_QWORD *)this + 15);
          v55 = *a4;
          v56 = v13;
        }
        else
        {
          HALS_DelayProcessor::Process(v53, a3, a7, *a4);
          v54 = (HALS_ChannelMapper *)*((_QWORD *)this + 15);
          v55 = *a4;
          v56 = a7;
        }
        HALS_ChannelMapper::Process(v54, v56, __dst, v55);
        goto LABEL_63;
      case 0xE:
        v59 = (HALS_DelayProcessor *)*((_QWORD *)this + 17);
        if (*((_BYTE *)this + 9))
        {
          HALS_DelayProcessor::Process(v59, a3, *a4);
LABEL_66:
          HALS_ChannelMapper::Process(*((HALS_ChannelMapper **)this + 15), v13, a7, *a4);
LABEL_67:
          v33 = (HALS_Resampler *)*((_QWORD *)this + 16);
          v34 = a7;
        }
        else
        {
          HALS_DelayProcessor::Process(v59, a3, a7, *a4);
          HALS_ChannelMapper::Process(*((HALS_ChannelMapper **)this + 15), a7, a8, *a4);
          v33 = (HALS_Resampler *)*((_QWORD *)this + 16);
          v34 = a8;
        }
        v35 = a4;
        v36 = __dst;
        v37 = a6;
        v41 = a8;
LABEL_69:
        HALS_Resampler::Process(v33, v34, v35, v36, v37, v41);
        return;
      case 0xF:
        v60 = (HALS_DelayProcessor *)*((_QWORD *)this + 17);
        if (*((_BYTE *)this + 9))
        {
          HALS_DelayProcessor::Process(v60, a3, *a4);
LABEL_72:
          HALS_ChannelMapper::Process(*((HALS_ChannelMapper **)this + 15), v13, a7, *a4);
LABEL_73:
          v43 = (HALS_Resampler *)*((_QWORD *)this + 16);
          v44 = a7;
        }
        else
        {
          HALS_DelayProcessor::Process(v60, a3, a7, *a4);
          HALS_ChannelMapper::Process(*((HALS_ChannelMapper **)this + 15), a7, a8, *a4);
          v43 = (HALS_Resampler *)*((_QWORD *)this + 16);
          v44 = a8;
        }
        v45 = a4;
        v46 = __dst;
        v47 = a6;
        v48 = a8;
LABEL_75:
        HALS_Resampler::Process(v43, v44, v45, v46, v47, v48);
        v58 = (HALS_VolumeProcessor *)*((_QWORD *)this + 14);
        v57 = *a6;
LABEL_76:
        HALS_VolumeProcessor::Process(v58, v14, __dst, v57);
        return;
      default:
        if (__dst == a3)
          return;
        if (!*((_BYTE *)this + 10))
        {
          v63 = *((unsigned int *)this + 3);
          v64 = __dst;
LABEL_96:
          memcpy(v64, a3, v63);
          *a6 = *((_DWORD *)this + 4);
          v61 = *((_DWORD *)this + 4);
          goto LABEL_81;
        }
        memcpy(__dst, a3, *((_DWORD *)this + 3) * *a4);
LABEL_86:
        *a6 = *a4;
        break;
    }
  }
}

BOOL CAPropertyAddress::IsCongruentAddress(CAPropertyAddress *this, const AudioObjectPropertyAddress *a2, const AudioObjectPropertyAddress *a3)
{
  int v3;
  AudioObjectPropertyScope mScope;
  int v7;
  BOOL v8;
  int v10;
  AudioObjectPropertyElement mElement;

  v3 = *((_DWORD *)this + 1);
  mScope = a2->mScope;
  if (mScope != 707406378 && v3 != 707406378 && v3 != mScope)
    return 0;
  v7 = *(_DWORD *)this;
  v8 = a2->mSelector == 707406378 || v7 == 707406378;
  if (!v8 && v7 != a2->mSelector)
    return 0;
  v10 = *((_DWORD *)this + 2);
  mElement = a2->mElement;
  return v10 == -1 || v10 == mElement || mElement == -1;
}

void HALS_VolumeProcessor::Process(HALS_VolumeProcessor *this, double a2, unsigned __int8 *a3, unsigned int a4)
{
  unsigned int v4;
  unsigned __int8 *v5;
  double v7;
  double v8;
  unsigned int v9;
  unsigned int v10;
  double v11;
  float v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  float v22;
  float v24;
  float v26;
  float __B;

  if (!*((_BYTE *)this + 8))
    return;
  v4 = a4;
  v5 = a3;
  v7 = *((double *)this + 4);
  if (v7 == 0.0)
  {
    *((double *)this + 4) = a2;
    v7 = a2;
  }
  v8 = (double)a4 + a2;
  if (v8 < v7)
  {
    v9 = 0;
    v10 = 0;
    goto LABEL_23;
  }
  v11 = v7 + *((double *)this + 5);
  if (v11 <= a2)
  {
LABEL_45:
    if (v4)
    {
      v24 = *((float *)this + 6);
      *((float *)this + 5) = v24;
      if (v24 == 0.0)
      {
        bzero(v5, 4 * *((_DWORD *)this + 4) * v4);
      }
      else if (v24 != 1.0)
      {
        v26 = v24 * v24;
        vDSP_vsmul((const float *)v5, 1, &v26, (float *)v5, 1, *((_DWORD *)this + 4) * v4);
      }
    }
    return;
  }
  if (v7 > a2 && v8 >= v11)
  {
    v4 = (v7 - a2);
    v9 = (v11 - v7);
    v10 = (v8 - v11);
    goto LABEL_23;
  }
  if (v7 <= a2 && v8 < v11)
  {
    v10 = 0;
    v9 = a4;
LABEL_29:
    if (v9)
    {
      v16 = 0;
      v17 = *((unsigned int *)this + 4);
      v18 = 4 * v17;
      while (1)
      {
        if ((_DWORD)v17)
        {
          v19 = 0;
          do
          {
            *(float *)&v5[v19] = (float)(*((float *)this + 5) * *((float *)this + 5)) * *(float *)&v5[v19];
            v19 += 4;
          }
          while (v18 != v19);
        }
        v21 = *((float *)this + 5);
        v20 = *((float *)this + 6);
        v22 = *((float *)this + 7);
        if (v22 >= 0.0)
          break;
        if (v21 > v20)
          goto LABEL_36;
LABEL_37:
        *((float *)this + 5) = v20;
        v5 += v18;
        if (++v16 == v9)
          goto LABEL_44;
      }
      if (v22 <= 0.0 || v21 >= v20)
        goto LABEL_37;
LABEL_36:
      v20 = v21 + v22;
      goto LABEL_37;
    }
LABEL_44:
    v4 = v10;
    goto LABEL_45;
  }
  if (v7 > a2 && v8 >= v7 && v8 < v11)
  {
    v10 = 0;
    v4 = (v7 - a2);
    v9 = (v8 - v7);
LABEL_23:
    if (v4)
    {
      v15 = *((float *)this + 5);
      if (v15 == 0.0)
      {
        bzero(a3, 4 * *((_DWORD *)this + 4) * v4);
      }
      else if (v15 != 1.0)
      {
        __B = v15 * v15;
        vDSP_vsmul((const float *)a3, 1, &__B, (float *)a3, 1, *((_DWORD *)this + 4) * v4);
      }
      v5 += 4 * *((_DWORD *)this + 4) * v4;
    }
    goto LABEL_29;
  }
  if (v7 <= a2 && v11 > a2 && v8 >= v11)
  {
    v9 = (v11 - a2);
    v10 = (v8 - v11);
    goto LABEL_29;
  }
}

uint64_t HALS_IOPrewarmManager::Stop(_QWORD *a1, int a2)
{
  uint64_t v2;

  v2 = a1[1];
  if (v2 || *a1)
  {
    if (a2 == 1)
    {
      if (*a1)
        --*a1;
    }
    else if (!a2)
    {
      if (!v2)
        return *a1 != 0;
      a1[1] = --v2;
    }
    if (v2)
      return 2;
    return *a1 != 0;
  }
  return 0;
}

void HALS_NotificationManager::FindObject(HALS_NotificationManager *this, unsigned int a2)
{
  uint64_t *v4;
  uint64_t *v5;
  HALB_Mutex *v6;
  int v7;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  v6 = (HALB_Mutex *)HALS_NotificationManager::sObjectListLock;
  v7 = HALB_Mutex::Lock((HALB_Mutex *)HALS_NotificationManager::sObjectListLock);
  v4 = *(uint64_t **)HALS_NotificationManager::sObjectList;
  v5 = *(uint64_t **)(HALS_NotificationManager::sObjectList + 8);
  if (*(uint64_t **)HALS_NotificationManager::sObjectList != v5)
  {
    while (*(_DWORD *)*v4 < a2)
    {
      v4 += 2;
      if (v4 == v5)
        goto LABEL_8;
    }
  }
  if (v4 != v5 && *(_DWORD *)*v4 == a2)
    std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100](this, *v4, v4[1]);
LABEL_8:
  HALB_Mutex::Locker::~Locker(&v6);
}

void sub_1B57BE114(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t (***HALS_IOContextDescription::ClearSharedBuffers(HALS_IOContextDescription *this, int a2, int a3))()
{
  uint64_t (***result)();
  uint64_t v4;
  uint64_t (**v5)();
  int v6;
  uint64_t (***v7)();
  uint64_t (**v8)();
  int v9;
  uint64_t (***v10)();
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v8 = &off_1E6996D90;
    v9 = a3;
    v10 = &v8;
    HALS_IOContextDescription::ApplyToInput((uint64_t)this, (uint64_t)&v8);
    result = v10;
    if (v10 == &v8)
    {
      v4 = 4;
      result = &v8;
      return (uint64_t (***)())(*result)[v4]();
    }
  }
  else
  {
    v5 = &off_1E6996E10;
    v6 = a3;
    v7 = &v5;
    VisitableVector<HALS_IOStackDescription>::apply<>((uint64_t *)this + 10, &v5);
    result = v7;
    if (v7 == &v5)
    {
      v4 = 4;
      result = &v5;
      return (uint64_t (***)())(*result)[v4]();
    }
  }
  if (!result)
    return result;
  v4 = 5;
  return (uint64_t (***)())(*result)[v4]();
}

void sub_1B57BE200(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  char *v18;
  uint64_t v19;

  v18 = a13;
  if (a13 == &a10)
  {
    v19 = 4;
    v18 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t HALS_IOContextDescription::GetIOBufferForStreamAtIndex(HALS_IOContextDescription *this, int a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t *v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  BOOL v11;

  if (a2)
  {
    v3 = *((_QWORD *)this + 7);
    if (0x21CFB2B78C13521DLL * ((*((_QWORD *)this + 8) - v3) >> 3) > (unint64_t)a3)
    {
      if (!*(_DWORD *)(v3 + 424 * a3 + 108)
        || ((v4 = *(uint64_t **)(v3 + 424 * a3 + 112), *(uint64_t **)(v3 + 424 * a3 + 120) != v4)
          ? (v5 = v4 == 0)
          : (v5 = 1),
            v5))
      {
        v4 = (uint64_t *)(v3 + 424 * a3 + 408);
      }
      v6 = *v4;
      if (*(_QWORD *)(v6 + 8))
      {
        v7 = v3 + 424 * a3;
        return *(_QWORD *)(v7 + 56) + *(unsigned int *)(v6 + 308);
      }
    }
  }
  else
  {
    v8 = *((_QWORD *)this + 10);
    if (a3 < (unint64_t)((*((_QWORD *)this + 11) - v8) >> 5))
    {
      v9 = *(uint64_t **)(v8 + 32 * a3 + 8);
      if (*(uint64_t **)(v8 + 32 * a3 + 16) != v9)
      {
        v7 = *v9;
        if (-1944890851
           * ((unint64_t)(*(_QWORD *)(*(_QWORD *)(v8 + 32 * a3 + 8) + 8) - v7) >> 3))
        {
          if (!*(_DWORD *)(v7 + 108)
            || ((v10 = *(uint64_t **)(v7 + 112), *(uint64_t **)(v7 + 120) != v10) ? (v11 = v10 == 0) : (v11 = 1), v11))
          {
            v10 = (uint64_t *)(v7 + 408);
          }
          v6 = *v10;
          if (*(_QWORD *)(*v10 + 8))
            return *(_QWORD *)(v7 + 56) + *(unsigned int *)(v6 + 308);
        }
      }
    }
  }
  return 0;
}

uint64_t HALS_IOEngine2_IOContextInfo::GetPointersForOutputStreamAtIndex(uint64_t this, unsigned int a2, unint64_t a3, unsigned int a4, unsigned int *a5, float **a6, unsigned int *a7, float **a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  *a5 = 0;
  *a6 = 0;
  *a7 = 0;
  *a8 = 0;
  v8 = *(_QWORD *)(this + 112);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(this + 120) - v8) >> 3) > a2)
  {
    v9 = *(unsigned int *)(this + 104);
    if ((_DWORD)v9)
    {
      if (v9 >= a4)
      {
        v10 = *(_QWORD *)(v8 + 40 * a2);
        if (v10)
        {
          v11 = a3 % v9;
          v12 = a3 % v9 * *(unsigned int *)(v8 + 40 * a2 + 12);
          if (a3 % v9 + a4 <= v9)
          {
            *a5 = a4;
            *a6 = (float *)(v10 + 4 * v12);
          }
          else
          {
            *a5 = v9 - v11;
            *a6 = (float *)(v10 + 4 * v12);
            *a7 = v11 + a4 - *(_DWORD *)(this + 104);
            *a8 = *(float **)(*(_QWORD *)(this + 112) + 40 * a2);
          }
        }
      }
    }
  }
  return this;
}

void OS::CF::UntypedObject::~UntypedObject(OS::CF::UntypedObject *this)
{
  const void *v1;

  *(_QWORD *)this = &off_1E69A0E58;
  v1 = (const void *)*((_QWORD *)this + 1);
  if (v1)
    CFRelease(v1);
}

{
  OS::CF::UntypedObject::~UntypedObject(this);
  JUMPOUT(0x1B5E50688);
}

uint64_t OS::CF::UntypedObject::operator=(uint64_t a1, uint64_t a2)
{
  const void *v3;

  v3 = *(const void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = a2;
  if (v3)
    CFRelease(v3);
  return a1;
}

uint64_t ca::mach::throw_if_mach_error(uint64_t this, const char *a2)
{
  const char *v2;
  std::runtime_error *exception;
  std::runtime_error *v4;
  std::runtime_error v5[2];
  _BYTE v6[24];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a2)
  {
    *(_QWORD *)v6 = &off_1E6995780;
    MEMORY[0x1B5E5022C](v5, a2, v6, this);
    std::error_category::~error_category((std::error_category *)v6);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v2 = std::runtime_error::what(v5);
      *(_DWORD *)v6 = 136315138;
      *(_QWORD *)&v6[4] = v2;
      _os_log_error_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%s", v6, 0xCu);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x20uLL);
    v4 = std::runtime_error::runtime_error(exception, v5);
    v4->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE4F90] + 16);
    v4[1] = v5[1];
    __cxa_throw(v4, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
  }
  return this;
}

void sub_1B57BE59C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, uint64_t a10, uint64_t a11, std::error_category a12)
{
  std::runtime_error::~runtime_error(&a9);
  _Unwind_Resume(a1);
}

unsigned int *ca::sync::semaphore::signal(unsigned int *this)
{
  unsigned int *v1;
  unsigned int v2;
  const char *v3;

  v1 = this + 2;
  do
    v2 = __ldxr(v1);
  while (__stlxr(v2 + 1, v1));
  if ((v2 & 0x80000000) != 0)
  {
    v3 = (const char *)MEMORY[0x1B5E51270](*this);
    return (unsigned int *)ca::mach::throw_if_mach_error((uint64_t)"semaphore_signal failed", v3);
  }
  return this;
}

uint64_t HALS_Device::HasProperty(HALS_Device ***this, const BOOL *a2, AudioObjectPropertyAddress *a3, AudioObjectPropertyAddress *a4)
{
  signed int mSelector;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  unsigned int HasProperty;
  BOOL v13;
  __int16 v14;
  char v15;
  int v16;
  const BOOL *v17;
  int v18;
  AudioObjectPropertyScope mScope;
  BOOL v20;
  int v21;
  AudioObjectPropertyScope v22;
  const BOOL *v24;
  AudioObjectPropertyScope v25;
  int v26;
  unsigned __int8 v27;
  unsigned int v28;
  unsigned __int8 v30;
  uint64_t v31[2];
  _QWORD v32[2];

  mSelector = a3->mSelector;
  v8 = 1;
  if ((int)a3->mSelector > 1768907635)
  {
    if (mSelector <= 1934647618)
    {
      if (mSelector <= 1853059618)
      {
        if (mSelector <= 1819569762)
        {
          if (mSelector == 1768907636)
            return v8;
          if (mSelector != 1818454126)
          {
            v9 = 1818850926;
            goto LABEL_110;
          }
        }
        else
        {
          if (mSelector > 1836411235)
          {
            if (mSelector != 1852793963)
              return 0;
            goto LABEL_92;
          }
          if (mSelector != 1819569763)
            return 0;
        }
        goto LABEL_101;
      }
      if (mSelector > 1869638758)
      {
        if (mSelector > 1886353265)
        {
          if (mSelector == 1886353266)
            return v8;
          v9 = 1919512167;
        }
        else
        {
          if (mSelector == 1869638759)
            return v8;
          v9 = 1870098020;
        }
        goto LABEL_110;
      }
      if (mSelector != 1853059619 && mSelector != 1853059700)
      {
        v9 = 1869180523;
        goto LABEL_110;
      }
      return v8;
    }
    if (mSelector > 1937007733)
    {
      if (mSelector > 1983996970)
      {
        if (mSelector > 1986622323)
        {
          if (mSelector != 1986622324)
          {
            v9 = 2003136116;
            goto LABEL_110;
          }
          if (!HALS_Device::GetNumberStreamsExcludingReferenceStreams((HALS_Device *)this, 1))
            return 0;
          v8 = 0;
          if (a4 && a3->mScope == 1768845428)
          {
            v30 = atomic_load((unsigned __int8 *)&a4[21].mElement);
            return v30 & 1;
          }
        }
        else
        {
          if (mSelector != 1983996971)
          {
            if (mSelector == 1983997011)
            {
              HasProperty = (unsigned __int16)HALS_Device_HostedDSP::HasProperty(this[76], a3, a4, (HALS_Client *)a4);
              if (HasProperty <= 0x100)
                LOBYTE(HasProperty) = 0;
              v13 = HasProperty == 0;
              return !v13;
            }
            return 0;
          }
          if (a4)
          {
            v27 = atomic_load((unsigned __int8 *)&a4[21].mElement);
            v28 = v27 & 1;
          }
          else
          {
            v28 = 0;
          }
          if (a3->mScope == 1768845428)
            return v28;
          else
            return 0;
        }
      }
      else
      {
        if (mSelector > 1953653101)
        {
          if (mSelector == 1953653102)
            return v8;
          v9 = 1969841184;
          goto LABEL_110;
        }
        if (mSelector == 1937007734)
          return v8;
        if (mSelector != 1937009955)
          return 0;
        mSelector = a3->mScope;
        if (mSelector != 1735159650 && mSelector != 1768845428)
        {
          v9 = 1869968496;
          goto LABEL_110;
        }
      }
      return v8;
    }
    if (mSelector <= 1936092275)
    {
      if (mSelector != 1934647619 && mSelector != 1934647636)
      {
        v11 = 1935763060;
LABEL_100:
        if (mSelector != v11)
          return 0;
LABEL_101:
        mScope = a3->mScope;
        v20 = mScope == 1768845428;
        v21 = 1869968496;
        return v20 || mScope == v21;
      }
      if ((AMCP::Feature_Flags::force_mock_dsp_type(0, a2) & 1) == 0
        && !AMCP::Feature_Flags::allow_adm_dsp_spatial(0, v24))
      {
        return 0;
      }
    }
    else
    {
      if (mSelector > 1936876643)
      {
        if (mSelector == 1936876644)
          goto LABEL_90;
        v10 = 1936879204;
LABEL_89:
        if (mSelector != v10)
          return 0;
        goto LABEL_90;
      }
      if (mSelector != 1936092276)
      {
        v11 = 1936482681;
        goto LABEL_100;
      }
    }
    v25 = a3->mScope;
    v26 = 1869968496;
    return v25 == v26;
  }
  if (mSelector > 1684498540)
  {
    if (mSelector > 1685414762)
    {
      if (mSelector > 1751413615)
      {
        if (mSelector > 1768124269)
          return 0;
        if (mSelector == 1751413616)
          return v8;
        v9 = 1751737454;
      }
      else
      {
        if (mSelector <= 1735356004)
        {
          if (mSelector != 1685414763)
          {
            v9 = 1735354734;
            goto LABEL_110;
          }
          goto LABEL_92;
        }
        if (mSelector == 1735356005)
          return v8;
        v9 = 1751412337;
      }
LABEL_110:
      if (mSelector == v9)
        return v8;
      return 0;
    }
    if (mSelector <= 1684500593)
    {
      if (mSelector != 1684498541 && mSelector != 1684498544)
      {
        if (mSelector != 1684500589)
          return 0;
        v14 = HALS_Device_HostedDSP::HasProperty(this[76], a3, a4, (HALS_Client *)a4);
        v15 = v14;
        v16 = HIBYTE(v14);
        if ((AMCP::Feature_Flags::allow_adm_dsp_graph_parameters(0, v17) & 1) != 0
          || (v31[0] = 0,
              v31[1] = 0,
              HALS_System::GetInstance(v32, 0, v31),
              v18 = g_static_start_options,
              std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v32),
              std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v31),
              v18 == 1))
        {
          if (v16)
          {
            v13 = v15 == 0;
            return !v13;
          }
        }
      }
      goto LABEL_65;
    }
    if (mSelector <= 1685278560)
    {
      if (mSelector != 1684500594)
        return 0;
LABEL_65:
      mScope = a3->mScope;
      v20 = mScope == 1869968496;
      v21 = 1768845428;
      return v20 || mScope == v21;
    }
    if (mSelector != 1685278561)
    {
      if (mSelector == 1685278562)
      {
        if (a4)
          return v8;
        v13 = *((_BYTE *)this + 616) == 0;
        return !v13;
      }
      return 0;
    }
    v25 = a3->mScope;
    v26 = 1768845428;
    return v25 == v26;
  }
  if (mSelector <= 1667523954)
  {
    if (mSelector <= 1634758764)
    {
      if (mSelector == 1634429294)
        return v8;
      if (mSelector == 1634496615)
        return 0;
      v9 = 1634755428;
      goto LABEL_110;
    }
    if (mSelector > 1650682994)
    {
      if (mSelector == 1650682995)
        return v8;
      v9 = 1667330160;
      goto LABEL_110;
    }
    if (mSelector != 1634758765)
    {
      v10 = 1634758774;
      goto LABEL_89;
    }
LABEL_90:
    v22 = a3->mScope;
    if (v22 != 1768845428)
      goto LABEL_93;
    if (((unsigned int (*)(HALS_Device ***, uint64_t, AudioObjectPropertyAddress *))(*this)[67])(this, 1, a4))
    {
      return v8;
    }
LABEL_92:
    v22 = a3->mScope;
LABEL_93:
    if (v22 == 1869968496)
    {
      v13 = ((unsigned int (*)(HALS_Device ***, _QWORD, AudioObjectPropertyAddress *))(*this)[67])(this, 0, a4) == 0;
      return !v13;
    }
    return 0;
  }
  if (mSelector > 1668575851)
  {
    if (mSelector <= 1684301170)
    {
      if (mSelector == 1668575852)
        return v8;
      v10 = 1684236338;
      goto LABEL_89;
    }
    if (mSelector == 1684301171)
      return 0;
    v11 = 1684434036;
    goto LABEL_100;
  }
  if (mSelector != 1667523955 && mSelector != 1668047219)
  {
    v9 = 1668049764;
    goto LABEL_110;
  }
  return v8;
}

void sub_1B57BED54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t HALS_Device::GetDebugDeviceUID(HALS_Device *this)
{
  return (uint64_t)this + 156;
}

uint64_t HALS_Device::AllowClientAccessToProperty()
{
  return 1;
}

uint64_t HALS_Object::HasProperty(uint64_t a1, uint64_t a2, int *a3)
{
  int v3;
  _BOOL4 v4;
  unsigned int v5;
  _BOOL4 v6;

  v3 = *a3;
  v4 = *a3 == 1870098020 || *a3 == 1937007734;
  v5 = v3 == 1869638759 || v4;
  v6 = v3 == 1650682995 || v3 == 1668047219;
  if (v3 <= 1869638758)
    return v6;
  else
    return v5;
}

double HALS_IOClock::GetRaw0Time(HALS_IOClock *this, double *a2, unint64_t *a3)
{
  double result;
  _QWORD *v4;
  _DWORD *exception;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (!*((_DWORD *)this + 24))
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v4 = (_QWORD *)((char *)this + 64);
      if (*((char *)this + 87) < 0)
        v4 = (_QWORD *)*v4;
      *(_DWORD *)buf = 136315650;
      v8 = "HALS_IOClock.cpp";
      v9 = 1024;
      v10 = 404;
      v11 = 2080;
      v12 = v4;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOClock::GetRaw0Time: no anchor for device %s", buf, 0x1Cu);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 1937010544;
  }
  result = *((double *)this + 19);
  *a2 = result;
  *a3 = *((_QWORD *)this + 20);
  return result;
}

uint64_t HALS_IOClock::TranslateTime(uint64_t this, const AudioTimeStamp *a2, AudioTimeStamp *a3)
{
  AudioTimeStampFlags mFlags;
  uint64_t v4;
  double v5;
  Float64 v6;
  double v7;
  UInt64 v8;
  AudioTimeStampFlags v9;
  double mSampleTime;
  UInt64 mHostTime;
  double v12;
  BOOL v13;
  unint64_t v14;
  UInt64 v15;
  double v16;
  _DWORD *exception;
  int v18;
  _QWORD *v19;
  uint64_t v20;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  int v24;
  __int16 v25;
  _QWORD *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  mFlags = a2->mFlags;
  if ((mFlags & 3) == 0)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v22 = "HALS_IOClock.cpp";
      v23 = 1024;
      v24 = 507;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOClock::TranslateTime: have to have either sample time or host time valid on the input", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    v18 = 1852797029;
LABEL_34:
    exception[2] = v18;
  }
  if (!*(_DWORD *)(this + 96))
  {
    v20 = this;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v19 = (_QWORD *)(v20 + 64);
      if (*(char *)(v20 + 87) < 0)
        v19 = (_QWORD *)*v19;
      *(_DWORD *)buf = 136315650;
      v22 = "HALS_IOClock.cpp";
      v23 = 1024;
      v24 = 508;
      v25 = 2080;
      v26 = v19;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOClock::TranslateTime: no anchor for device %s", buf, 0x1Cu);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    v18 = 1937010544;
    goto LABEL_34;
  }
  v4 = this + 40 * *(unsigned int *)(this + 192);
  v5 = *(double *)(v4 + 200);
  v6 = *(double *)(v4 + 216);
  v7 = *(double *)(v4 + 224);
  v8 = *(_QWORD *)(v4 + 232);
  v9 = a3->mFlags;
  if ((v9 & 1) != 0)
  {
    if ((mFlags & 1) != 0)
    {
      mSampleTime = a2->mSampleTime;
    }
    else
    {
      mSampleTime = 0.0;
      if ((mFlags & 2) != 0)
      {
        mHostTime = a2->mHostTime;
        v12 = -(double)(v8 - mHostTime);
        v13 = mHostTime >= v8;
        v14 = mHostTime - v8;
        if (v13)
          v12 = (double)v14;
        mSampleTime = v7 + round(v12 / v5);
      }
    }
    a3->mSampleTime = mSampleTime;
    if ((v9 & 2) == 0)
    {
LABEL_5:
      if ((v9 & 4) == 0)
        return this;
      goto LABEL_6;
    }
  }
  else if ((v9 & 2) == 0)
  {
    goto LABEL_5;
  }
  if ((mFlags & 2) != 0)
  {
    v15 = a2->mHostTime;
  }
  else
  {
    if ((mFlags & 1) == 0)
    {
      a3->mHostTime = 0;
      if ((v9 & 4) == 0)
        return this;
LABEL_6:
      a3->mRateScalar = v6;
      return this;
    }
    v16 = a2->mSampleTime;
    if (a2->mSampleTime >= v7)
      v15 = v8 + vcvtad_u64_f64(v5 * (v16 - v7));
    else
      v15 = v8 - vcvtad_u64_f64(v5 * (v7 - v16));
  }
  a3->mHostTime = v15;
  if ((v9 & 4) != 0)
    goto LABEL_6;
  return this;
}

UInt64 HALS_IOClock::GetCurrentTime(HALS_IOClock *this, AudioTimeStamp *a2)
{
  unsigned int v3;
  uint64_t v4;
  char *v6;
  double v7;
  Float64 v8;
  double v9;
  unint64_t v10;
  UInt64 result;
  AudioTimeStampFlags mFlags;
  double v13;
  _QWORD *v15;
  _DWORD *exception;
  int v17;
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  _QWORD *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (!*((_DWORD *)this + 24))
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v15 = (_QWORD *)((char *)this + 64);
      if (*((char *)this + 87) < 0)
        v15 = (_QWORD *)*v15;
      v17 = 136315650;
      v18 = "HALS_IOClock.cpp";
      v19 = 1024;
      v20 = 454;
      v21 = 2080;
      v22 = v15;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOClock::GetCurrentTime: no anchor for device %s", (uint8_t *)&v17, 0x1Cu);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 1937010544;
  }
  v3 = *((_DWORD *)this + 48);
  v4 = *((_QWORD *)this + 79);
  if (!v4)
    std::__throw_bad_function_call[abi:ne180100]();
  v6 = (char *)this + 40 * v3;
  v7 = *((double *)v6 + 25);
  v8 = *((double *)v6 + 27);
  v9 = *((double *)v6 + 28);
  v10 = *((_QWORD *)v6 + 29);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4);
  mFlags = a2->mFlags;
  if ((mFlags & 2) != 0)
  {
    a2->mHostTime = result;
    if ((mFlags & 1) == 0)
    {
LABEL_5:
      if ((mFlags & 4) == 0)
        return result;
      goto LABEL_6;
    }
  }
  else if ((mFlags & 1) == 0)
  {
    goto LABEL_5;
  }
  v13 = -(double)(v10 - result);
  if (result >= v10)
    v13 = (double)(result - v10);
  a2->mSampleTime = v9 + round(v13 / v7);
  if ((mFlags & 4) != 0)
LABEL_6:
    a2->mRateScalar = v8;
  return result;
}

uint64_t HALB_IOThread::HasBeenStopped(HALB_IOThread *this)
{
  _opaque_pthread_t *v2;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = (_opaque_pthread_t *)*((_QWORD *)this + 11);
  if (v2 != pthread_self() && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v4 = 136315394;
    v5 = "HALB_IOThread.cpp";
    v6 = 1024;
    v7 = 38;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_IOThread::HasBeenStopped: this thread ought to lock the lock", (uint8_t *)&v4, 0x12u);
  }
  return *((unsigned __int8 *)this + 172);
}

void HALB_UCObject::CopyProperty_BOOL(const __CFDictionary **this, const __CFString *a2, BOOL *a3)
{
  const __CFBoolean *v4;
  CFTypeID v5;
  CFTypeID v6;
  BOOL v7;
  const __CFBoolean *v8;
  char v9;
  CFTypeRef cf;
  int valuePtr;

  cf = 0;
  if (HALB_UCObject::CopyProperty_CFType(this, a2, &cf))
  {
    v4 = (const __CFBoolean *)cf;
    v5 = CFGetTypeID(cf);
    if (v5 == CFBooleanGetTypeID())
    {
      *a3 = CFBooleanGetValue(v4) != 0;
    }
    else
    {
      v6 = CFGetTypeID(v4);
      if (v6 == CFNumberGetTypeID())
      {
        v8 = v4;
        v9 = 0;
        valuePtr = 0;
        if (v4)
        {
          CFNumberGetValue(v4, kCFNumberSInt32Type, &valuePtr);
          v7 = valuePtr != 0;
        }
        else
        {
          v7 = 0;
        }
        *a3 = v7;
        CACFNumber::~CACFNumber((CACFNumber *)&v8);
      }
    }
    CFRelease(v4);
  }
}

void sub_1B57BF4A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CACFNumber::~CACFNumber((CACFNumber *)&a9);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOEngine2::GetCommandGate(HALS_IOEngine2 *this)
{
  return *((_QWORD *)this + 89);
}

{
  return *((_QWORD *)this + 89);
}

uint64_t HALS_IOEngine2::GetSafetyOffset(HALS_IOEngine2 *this, char a2)
{
  HALB_Mutex *v2;
  uint64_t v3;
  _QWORD v5[6];
  char v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2000000000;
  v10 = 0;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZNK14HALS_IOEngine215GetSafetyOffsetEb_block_invoke;
  v5[3] = &unk_1E698E100;
  v5[4] = &v7;
  v5[5] = this;
  v6 = a2;
  v2 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v5);
  v3 = *((unsigned int *)v8 + 6);
  _Block_object_dispose(&v7, 8);
  return v3;
}

void sub_1B57BF558(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK14HALS_IOEngine215GetSafetyOffsetEb_block_invoke(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 40) + 768);
  if (v1)
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *(_DWORD *)(v1
                                                                                + 4
                                                                                * *(unsigned __int8 *)(result + 48)
                                                                                + 20);
  return result;
}

uint64_t HALS_IOEngine2::GetNumberStreams(HALS_IOEngine2 *this, char a2)
{
  HALB_Mutex *v2;
  uint64_t v3;
  _QWORD v5[6];
  char v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2000000000;
  v10 = 0;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZNK14HALS_IOEngine216GetNumberStreamsEb_block_invoke;
  v5[3] = &unk_1E698E1C0;
  v5[4] = &v7;
  v5[5] = this;
  v6 = a2;
  v2 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v5);
  v3 = *((unsigned int *)v8 + 6);
  _Block_object_dispose(&v7, 8);
  return v3;
}

void sub_1B57BF630(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK14HALS_IOEngine216GetNumberStreamsEb_block_invoke(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 40) + 768);
  if (v1)
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = (*(_QWORD *)(v1
                                                                                 + 24
                                                                                 * *(unsigned __int8 *)(result + 48)
                                                                                 + 56)
                                                                     - *(_QWORD *)(v1
                                                                                 + 24
                                                                                 * *(unsigned __int8 *)(result + 48)
                                                                                 + 48)) >> 3;
  return result;
}

double HALS_IOEngine2::QuantizeAnchorTime(HALS_IOEngine2 *this, double a2, unsigned int a3, unsigned int a4)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  __int128 v19;
  HALS_IOEngine2 *v20[2];
  uint64_t v21;

  v7 = (uint64_t)a2;
  v21 = 0;
  v19 = 0u;
  *(_OWORD *)v20 = 0u;
  v8 = (*(uint64_t (**)(HALS_IOEngine2 *, _QWORD))(*(_QWORD *)this + 400))(this, 0);
  v9 = *(_QWORD *)this;
  if (v8)
  {
    v10 = (*(uint64_t (**)(HALS_IOEngine2 *, _QWORD))(v9 + 344))(this, 0);
    (*(void (**)(HALS_IOEngine2 *, _QWORD, _QWORD, __int128 *))(*(_QWORD *)this + 432))(this, 0, 0, &v19);
    if (DWORD2(v19) == 1819304813)
    {
      v11 = v20[0];
      v12 = HALS_IOEngine2::_CalculateSizeForQuantize((HALS_IOEngine2 *)LODWORD(v20[0])) / v11;
      v13 = (v7 + a4 + v10) % v12;
      v14 = v12 - v13;
      if (!v13)
        v14 = 0;
      v7 += v14;
    }
  }
  else if ((*(unsigned int (**)(HALS_IOEngine2 *, uint64_t))(v9 + 400))(this, 1))
  {
    v15 = (*(uint64_t (**)(HALS_IOEngine2 *, uint64_t))(*(_QWORD *)this + 344))(this, 1);
    (*(void (**)(HALS_IOEngine2 *, uint64_t, _QWORD, __int128 *))(*(_QWORD *)this + 432))(this, 1, 0, &v19);
    if (DWORD2(v19) == 1819304813)
    {
      v16 = v20[0];
      v17 = HALS_IOEngine2::_CalculateSizeForQuantize((HALS_IOEngine2 *)LODWORD(v20[0]));
      return (double)(a3 + (uint64_t)v15 + (v7 - (a3 + (uint64_t)v15)) / (v17 / v16) * (v17 / v16));
    }
  }
  return (double)v7;
}

uint64_t HALS_IOEngine2::GetStartingChannelForStreamAtIndex(HALS_IOEngine2 *this, char a2, int a3)
{
  HALB_Mutex *v3;
  uint64_t v4;
  _QWORD v6[6];
  int v7;
  char v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;

  v9 = 0;
  v10 = &v9;
  v11 = 0x2000000000;
  v12 = 0;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 0x40000000;
  v6[2] = ___ZNK14HALS_IOEngine234GetStartingChannelForStreamAtIndexEbj_block_invoke;
  v6[3] = &unk_1E698E238;
  v6[4] = &v9;
  v6[5] = this;
  v8 = a2;
  v7 = a3;
  v3 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v3, (uint64_t)v6);
  v4 = *((unsigned int *)v10 + 6);
  _Block_object_dispose(&v9, 8);
  return v4;
}

void sub_1B57BF878(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK14HALS_IOEngine234GetStartingChannelForStreamAtIndexEbj_block_invoke(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  int v6;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 40) + 768);
  if (v1)
  {
    v2 = *(unsigned int *)(result + 48);
    v4 = (uint64_t *)(v1 + 24 * *(unsigned __int8 *)(result + 52) + 48);
    v3 = *v4;
    v5 = (v4[1] - *v4) >> 3;
    if (v2 >= v5)
    {
      v6 = 0;
    }
    else
    {
      if (v5 <= v2)
        std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
      v6 = *(_DWORD *)(*(_QWORD *)(v3 + 8 * v2) + 28);
    }
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = v6;
  }
  return result;
}

uint64_t HALS_AHPManager::GetReferenceID(HALS_AHPManager *this)
{
  return *((_QWORD *)this + 47);
}

BOOL HALS_IOA2Device::HasProperty(const __CFArray **this, unsigned int a2, AudioObjectPropertyAddress *a3, AudioObjectPropertyAddress *a4)
{
  signed int mSelector;
  HALB_Mutex *v8;
  uint64_t HasProperty;
  HALB_Mutex *v10;
  HALB_Mutex *v11;
  HALB_Mutex *v12;
  HALB_Mutex *v13;
  HALB_Mutex *v14;
  OS::CF::UntypedObject *v15;
  HALB_Mutex *v16;
  HALB_Mutex *v17;
  HALB_Mutex *v18;
  HALB_Mutex *v19;
  HALB_Mutex *v20;
  const BOOL *v21;
  unsigned int *v22;
  HALS_Object *v23;
  _QWORD v25[8];
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[8];
  uint64_t v31;
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD v36[6];
  _QWORD v37[6];
  _QWORD v38[7];
  _QWORD v39[7];
  _QWORD v40[6];
  _QWORD v41[6];
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t, uint64_t);
  void (*v46)(uint64_t);
  void (**v47)(OS::CF::String *__hidden);
  uint64_t v48;

  if (!(*((unsigned int (**)(const __CFArray **, AudioObjectPropertyAddress *, AudioObjectPropertyAddress *))*this
         + 22))(this, a3, a4))return 0;
  mSelector = a3->mSelector;
  if ((int)a3->mSelector <= 1819107690)
  {
    if (mSelector > 1668641651)
    {
      if (mSelector > 1818452845)
      {
        if (mSelector == 1818452846)
        {
          v42 = 0;
          v43 = &v42;
          v44 = 0x3802000000;
          v45 = __Block_byref_object_copy__4020;
          v46 = __Block_byref_object_dispose__4021;
          v47 = &off_1E69A0F60;
          v48 = 0;
          v39[0] = MEMORY[0x1E0C809B0];
          v39[1] = 0x40000000;
          v39[2] = ___ZNK15HALS_IOA2Device11HasPropertyEjRK26AudioObjectPropertyAddressP11HALS_Client_block_invoke_3;
          v39[3] = &unk_1E6978B50;
          v39[4] = &v42;
          v39[5] = this;
          v39[6] = a3;
          v19 = (HALB_Mutex *)(*((uint64_t (**)(const __CFArray **))*this + 7))(this);
          HALB_CommandGate::ExecuteCommand(v19, (uint64_t)v39);
        }
        else
        {
          if (mSelector != 1818455662)
            goto LABEL_40;
          v42 = 0;
          v43 = &v42;
          v44 = 0x3802000000;
          v45 = __Block_byref_object_copy__4020;
          v46 = __Block_byref_object_dispose__4021;
          v47 = &off_1E69A0F60;
          v48 = 0;
          v38[0] = MEMORY[0x1E0C809B0];
          v38[1] = 0x40000000;
          v38[2] = ___ZNK15HALS_IOA2Device11HasPropertyEjRK26AudioObjectPropertyAddressP11HALS_Client_block_invoke_4;
          v38[3] = &unk_1E6978B78;
          v38[4] = &v42;
          v38[5] = this;
          v38[6] = a3;
          v11 = (HALB_Mutex *)(*((uint64_t (**)(const __CFArray **))*this + 7))(this);
          HALB_CommandGate::ExecuteCommand(v11, (uint64_t)v38);
        }
        HasProperty = v43[6] != 0;
        _Block_object_dispose(&v42, 8);
        v15 = (OS::CF::UntypedObject *)&v47;
        goto LABEL_47;
      }
      if (mSelector == 1668641652)
        return OS::CF::ArrayBase<__CFArray const*>::GetSize(this[224]) != 0;
      if (mSelector != 1751474532)
        goto LABEL_40;
      v42 = 0;
      v43 = &v42;
      v44 = 0x2000000000;
      LOBYTE(v45) = 0;
      v34[0] = MEMORY[0x1E0C809B0];
      v34[1] = 0x40000000;
      v34[2] = ___ZNK15HALS_IOA2Device11HasPropertyEjRK26AudioObjectPropertyAddressP11HALS_Client_block_invoke_8;
      v34[3] = &unk_1E6978C18;
      v34[4] = &v42;
      v34[5] = this;
      v8 = (HALB_Mutex *)(*((uint64_t (**)(const __CFArray **))*this + 7))(this);
      HALB_CommandGate::ExecuteCommand(v8, (uint64_t)v34);
LABEL_37:
      HasProperty = *((_BYTE *)v43 + 24) != 0;
      _Block_object_dispose(&v42, 8);
      return HasProperty;
    }
    if (mSelector == 1635087471)
    {
      v42 = 0;
      v43 = &v42;
      v44 = 0x2000000000;
      LOBYTE(v45) = 0;
      v32[0] = MEMORY[0x1E0C809B0];
      v32[1] = 0x40000000;
      v32[2] = ___ZNK15HALS_IOA2Device11HasPropertyEjRK26AudioObjectPropertyAddressP11HALS_Client_block_invoke_10;
      v32[3] = &unk_1E6978C68;
      v32[4] = &v42;
      v32[5] = this;
      v16 = (HALB_Mutex *)(*((uint64_t (**)(const __CFArray **))*this + 7))(this);
      HALB_CommandGate::ExecuteCommand(v16, (uint64_t)v32);
      goto LABEL_37;
    }
    if (mSelector == 1667329635)
    {
      v42 = 0;
      v43 = &v42;
      v44 = 0x2000000000;
      LOBYTE(v45) = 0;
      v35[0] = MEMORY[0x1E0C809B0];
      v35[1] = 0x40000000;
      v35[2] = ___ZNK15HALS_IOA2Device11HasPropertyEjRK26AudioObjectPropertyAddressP11HALS_Client_block_invoke_7;
      v35[3] = &unk_1E6978BF0;
      v35[4] = &v42;
      v35[5] = this;
      v17 = (HALB_Mutex *)(*((uint64_t (**)(const __CFArray **))*this + 7))(this);
      HALB_CommandGate::ExecuteCommand(v17, (uint64_t)v35);
      goto LABEL_37;
    }
    if (mSelector != 1667658618)
      goto LABEL_40;
    return 0;
  }
  if (mSelector <= 1851878763)
  {
    if (mSelector <= 1819634019)
    {
      if (mSelector == 1819107691)
      {
        v42 = 0;
        v43 = &v42;
        v44 = 0x3802000000;
        v45 = __Block_byref_object_copy__4020;
        v46 = __Block_byref_object_dispose__4021;
        v47 = &off_1E69A0F60;
        v48 = 0;
        v40[0] = MEMORY[0x1E0C809B0];
        v40[1] = 0x40000000;
        v40[2] = ___ZNK15HALS_IOA2Device11HasPropertyEjRK26AudioObjectPropertyAddressP11HALS_Client_block_invoke_2;
        v40[3] = &unk_1E6978B28;
        v40[4] = &v42;
        v40[5] = this;
        v14 = (HALB_Mutex *)(*((uint64_t (**)(const __CFArray **))*this + 7))(this);
        HALB_CommandGate::ExecuteCommand(v14, (uint64_t)v40);
        goto LABEL_32;
      }
      if (mSelector != 1819173229)
        goto LABEL_40;
      goto LABEL_30;
    }
    if (mSelector != 1819634020)
    {
      if (mSelector == 1836411236)
      {
        v42 = 0;
        v43 = &v42;
        v44 = 0x3802000000;
        v45 = __Block_byref_object_copy__4020;
        v46 = __Block_byref_object_dispose__4021;
        v47 = &off_1E69A0F60;
        v48 = 0;
        v37[0] = MEMORY[0x1E0C809B0];
        v37[1] = 0x40000000;
        v37[2] = ___ZNK15HALS_IOA2Device11HasPropertyEjRK26AudioObjectPropertyAddressP11HALS_Client_block_invoke_5;
        v37[3] = &unk_1E6978BA0;
        v37[4] = &v42;
        v37[5] = this;
        v10 = (HALB_Mutex *)(*((uint64_t (**)(const __CFArray **))*this + 7))(this);
        HALB_CommandGate::ExecuteCommand(v10, (uint64_t)v37);
LABEL_32:
        HasProperty = v43[6] != 0;
        _Block_object_dispose(&v42, 8);
        v15 = (OS::CF::UntypedObject *)&v47;
LABEL_47:
        OS::CF::UntypedObject::~UntypedObject(v15);
        return HasProperty;
      }
      goto LABEL_40;
    }
    v42 = 0;
    v43 = &v42;
    v44 = 0x2000000000;
    LOBYTE(v45) = 0;
    v33[0] = MEMORY[0x1E0C809B0];
    v33[1] = 0x40000000;
    v33[2] = ___ZNK15HALS_IOA2Device11HasPropertyEjRK26AudioObjectPropertyAddressP11HALS_Client_block_invoke_9;
    v33[3] = &unk_1E6978C40;
    v33[4] = &v42;
    v33[5] = this;
    v18 = (HALB_Mutex *)(*((uint64_t (**)(const __CFArray **))*this + 7))(this);
    HALB_CommandGate::ExecuteCommand(v18, (uint64_t)v33);
    goto LABEL_37;
  }
  HasProperty = 1;
  if (mSelector > 1919251301)
  {
    if (mSelector != 1919251302)
    {
      if (mSelector == 1920168547)
      {
        v42 = 0;
        v43 = &v42;
        v44 = 0x3802000000;
        v45 = __Block_byref_object_copy__4020;
        v46 = __Block_byref_object_dispose__4021;
        v47 = &off_1E69A0F60;
        v48 = 0;
        v36[0] = MEMORY[0x1E0C809B0];
        v36[1] = 0x40000000;
        v36[2] = ___ZNK15HALS_IOA2Device11HasPropertyEjRK26AudioObjectPropertyAddressP11HALS_Client_block_invoke_6;
        v36[3] = &unk_1E6978BC8;
        v36[4] = &v42;
        v36[5] = this;
        v12 = (HALB_Mutex *)(*((uint64_t (**)(const __CFArray **))*this + 7))(this);
        HALB_CommandGate::ExecuteCommand(v12, (uint64_t)v36);
        goto LABEL_32;
      }
LABEL_40:
      HALS_IOA2Device::GetCustomPropertyInfoByAddress((HALS_IOA2Device *)v30, (const AudioObjectPropertyAddress *)this, (CAPropertyAddress *)a3);
      if (v31)
      {
        HasProperty = 1;
      }
      else
      {
        v26 = 0;
        v27 = &v26;
        v28 = 0x2000000000;
        v29 = 0;
        v42 = 0;
        v43 = &v42;
        v44 = 0x3802000000;
        v45 = __Block_byref_object_copy__22;
        v46 = (void (*)(uint64_t))__Block_byref_object_dispose__23;
        v47 = 0;
        LODWORD(v48) = 0;
        v25[0] = MEMORY[0x1E0C809B0];
        v25[1] = 0x40000000;
        v25[2] = ___ZNK15HALS_IOA2Device11HasPropertyEjRK26AudioObjectPropertyAddressP11HALS_Client_block_invoke_24;
        v25[3] = &unk_1E6978C90;
        v25[6] = this;
        v25[7] = a3;
        v25[4] = &v26;
        v25[5] = &v42;
        v20 = (HALB_Mutex *)(*((uint64_t (**)(const __CFArray **))*this + 7))(this);
        HALB_CommandGate::ExecuteCommand(v20, (uint64_t)v25);
        v22 = (unsigned int *)v27[3];
        if (v22)
        {
          HasProperty = (*(uint64_t (**)(unsigned int *, _QWORD, uint64_t *, AudioObjectPropertyAddress *))(*(_QWORD *)v22 + 88))(v22, v22[4], v43 + 5, a4);
          HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v27[3], v23);
        }
        else
        {
          HasProperty = HALS_Device::HasProperty((HALS_Device ***)this, v21, a3, a4);
        }
        _Block_object_dispose(&v42, 8);
        _Block_object_dispose(&v26, 8);
      }
      v15 = (OS::CF::UntypedObject *)v30;
      goto LABEL_47;
    }
  }
  else
  {
    if (mSelector == 1851878764)
    {
LABEL_30:
      v42 = 0;
      v43 = &v42;
      v44 = 0x3802000000;
      v45 = __Block_byref_object_copy__4020;
      v46 = __Block_byref_object_dispose__4021;
      v47 = &off_1E69A0F60;
      v48 = 0;
      v41[0] = MEMORY[0x1E0C809B0];
      v41[1] = 0x40000000;
      v41[2] = ___ZNK15HALS_IOA2Device11HasPropertyEjRK26AudioObjectPropertyAddressP11HALS_Client_block_invoke;
      v41[3] = &unk_1E6978B00;
      v41[4] = &v42;
      v41[5] = this;
      v13 = (HALB_Mutex *)(*((uint64_t (**)(const __CFArray **))*this + 7))(this);
      HALB_CommandGate::ExecuteCommand(v13, (uint64_t)v41);
      goto LABEL_32;
    }
    if (mSelector != 1919251299)
      goto LABEL_40;
  }
  return HasProperty;
}

void sub_1B57C010C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose((const void *)(v10 - 104), 8);
  _Block_object_dispose(va, 8);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)va1);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK15HALS_IOA2Device11HasPropertyEjRK26AudioObjectPropertyAddressP11HALS_Client_block_invoke(uint64_t a1)
{
  const __CFDictionary **v2;
  __CFString *v4;

  v2 = (const __CFDictionary **)(*(_QWORD *)(a1 + 40) + 1808);
  v4 = 0;
  HALB_UCObject::CopyProperty_CFString(v2, CFSTR("device name"), (const __CFString **)&v4);
  return OS::CF::UntypedObject::operator=(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40, (uint64_t)v4);
}

void sub_1B57C01E8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void sub_1B57C0238(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void HALS_IOA2Device::GetCustomPropertyInfoByAddress(HALS_IOA2Device *this, const AudioObjectPropertyAddress *a2, CAPropertyAddress *a3)
{
  const __CFArray *Size;
  const __CFArray *v7;
  AudioObjectPropertyElement *p_mElement;
  unint64_t v9;
  const AudioObjectPropertyAddress *v10;
  CFDictionaryRef v11;
  _BYTE v13[16];
  _QWORD v14[2];
  _BYTE v15[16];
  _QWORD v16[2];
  _BYTE v17[20];
  AudioObjectPropertyAddress v18;
  _QWORD v19[2];
  uint64_t v20;
  CFDictionaryRef v21;

  *(_QWORD *)this = &off_1E69A0DE0;
  *((_QWORD *)this + 1) = 0;
  Size = OS::CF::ArrayBase<__CFArray const*>::GetSize(*(const __CFArray **)&a2[149].mScope);
  if (Size)
  {
    v7 = Size;
    p_mElement = &a2[148].mElement;
    v9 = 1;
    do
    {
      OS::CF::ArrayBase<__CFArray const*>::operator[]((const __CFArray *)v19, (uint64_t)p_mElement, v9 - 1);
      OS::CF::UntypedObject::As<OS::CF::Dictionary>(&v20, (uint64_t)v19);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v19);
      OS::CF::DictionaryBase<__CFDictionary const*>::operator[]((uint64_t)v17, v21, CFSTR("property selector"));
      OS::CF::UntypedObject::As<OS::CF::Number>(v19, (uint64_t)v17);
      v18.mSelector = OS::CF::Number::GetValue<unsigned int>((const __CFNumber *)v19[1], 0);
      OS::CF::DictionaryBase<__CFDictionary const*>::operator[]((uint64_t)v15, v21, CFSTR("property scope"));
      OS::CF::UntypedObject::As<OS::CF::Number>(v16, (uint64_t)v15);
      v18.mScope = OS::CF::Number::GetValue<unsigned int>((const __CFNumber *)v16[1], 707406378);
      OS::CF::DictionaryBase<__CFDictionary const*>::operator[]((uint64_t)v13, v21, CFSTR("property element"));
      OS::CF::UntypedObject::As<OS::CF::Number>(v14, (uint64_t)v13);
      v18.mElement = OS::CF::Number::GetValue<unsigned int>((const __CFNumber *)v14[1], 0xFFFFFFFFLL);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v14);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v13);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v16);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v15);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v19);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v17);
      if (CAPropertyAddress::IsCongruentAddress(a3, &v18, v10))
      {
        v11 = v21;
        *((_QWORD *)this + 1) = v21;
        v21 = 0;
      }
      else
      {
        v11 = 0;
      }
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v20);
      if (v11)
        break;
    }
    while (v9++ < (unint64_t)v7);
  }
}

_DWORD *HALS_IOA2Device::_FindCustomControlForDeviceAddress(HALS_IOA2Device *this, const AudioObjectPropertyAddress *a2, AudioObjectPropertyAddress *a3)
{
  _QWORD *v3;
  char *v7;
  char *v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  HALS_ObjectMap *v13;
  _DWORD *result;
  uint64_t v15;
  uint64_t v16;
  unint64_t i;
  int v18;
  AudioObjectPropertySelector v19;
  AudioObjectPropertyAddress v20;

  v20 = *a2;
  v3 = (_QWORD *)*((_QWORD *)this + 176);
  if (!v3)
    return 0;
  v7 = (char *)this + 1408;
  v8 = (char *)this + 1408;
  do
  {
    v9 = *((_QWORD *)this + 181);
    if (!v9)
      goto LABEL_45;
    v10 = (*(uint64_t (**)(uint64_t, uint64_t, AudioObjectPropertyAddress *))(*(_QWORD *)v9 + 48))(v9, (uint64_t)v3 + 28, &v20);
    v11 = v3 + 1;
    if (!v10)
    {
      v11 = v3;
      v8 = (char *)v3;
    }
    v3 = (_QWORD *)*v11;
  }
  while (*v11);
  if (v7 == v8)
    return 0;
  v12 = *((_QWORD *)this + 181);
  if (!v12)
LABEL_45:
    std::__throw_bad_function_call[abi:ne180100]();
  if ((*(unsigned int (**)(uint64_t, AudioObjectPropertyAddress *, char *))(*(_QWORD *)v12 + 48))(v12, &v20, v8 + 28))
  {
    return 0;
  }
  v13 = (HALS_ObjectMap *)*((unsigned int *)v8 + 10);
  if (!(_DWORD)v13)
    return 0;
  result = (_DWORD *)HALS_ObjectMap::CopyObjectByObjectID(v13);
  if (a2->mScope == result[12] && a2->mElement == result[13])
  {
    v15 = result[42];
    if ((_DWORD)v15)
    {
      v16 = 0;
      for (i = 0; v15 != i; ++i)
      {
        if (a2->mSelector == result[i + 43])
        {
          *(_QWORD *)&a3->mScope = 1735159650;
          v18 = result[6];
          if (v18 > 1936483441)
          {
            switch(v18)
            {
              case 1953458028:
                if (!i)
                {
                  v19 = 1650685548;
                  goto LABEL_40;
                }
                break;
              case 1936744814:
                if (!(_DWORD)i)
                {
                  v19 = 1936745334;
                  goto LABEL_40;
                }
                v19 = 1936745315;
                goto LABEL_36;
              case 1936483442:
                if (!(_DWORD)i)
                {
                  v19 = 1935962742;
                  goto LABEL_40;
                }
                v19 = 1935962738;
LABEL_36:
                if ((_DWORD)i != 1)
                  break;
                goto LABEL_40;
            }
          }
          else if (v18 == 1651273579)
          {
            v19 = 1651272546;
            if (!(_DWORD)i)
              goto LABEL_40;
            if ((_DWORD)i == 1)
            {
              v19 = 1651272548;
LABEL_40:
              a3->mSelector = v19;
            }
          }
          else
          {
            if (v18 != 1818588780)
            {
              if (v18 != 1936483188 || i >= 3)
                goto LABEL_41;
              v19 = *(_DWORD *)((char *)&unk_1B5D4A0B8 + (v16 >> 30));
              goto LABEL_40;
            }
            if (i < 6)
            {
              v19 = *(_DWORD *)((char *)&unk_1B5D4A0A0 + (v16 >> 30));
              goto LABEL_40;
            }
          }
        }
LABEL_41:
        v16 += 0x100000000;
      }
    }
  }
  return result;
}

void HALB_CommandGate::ExecuteCommand(HALB_Mutex *a1, uint64_t a2)
{
  int v3;
  int v4;
  _BYTE v5[5];
  HALB_Mutex *v6;
  int v7;
  uint8_t buf[4];
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  int v13;
  __int16 v14;
  _BYTE *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v6 = a1;
  v3 = HALB_Mutex::Lock(a1);
  v7 = v3;
  if (v3)
  {
    v4 = v3;
    v5[0] = HIBYTE(v3);
    v5[1] = BYTE2(v3);
    v5[2] = BYTE1(v3);
    v5[3] = v3;
    v5[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      v9 = "HALB_CommandGate.cpp";
      v10 = 1024;
      v11 = 55;
      v12 = 1024;
      v13 = v4;
      v14 = 2080;
      v15 = v5;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_CommandGate::ExecuteCommand: locking the mutex failed, Error: %d (%s)", buf, 0x22u);
    }
  }
  (*(void (**)(uint64_t))(a2 + 16))(a2);
  HALB_Mutex::Locker::~Locker(&v6);
}

void sub_1B57C075C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  HALB_Mutex::Locker::~Locker((HALB_Mutex **)va);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOProcessor::DriftCorrection_IsEnabled(HALS_IOProcessor *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(HALS_IOProcessor *))(*(_QWORD *)this + 24))(this);
  if ((_DWORD)result)
    return *(_BYTE *)(*((_QWORD *)this + 16) + 9) != 0;
  return result;
}

uint64_t HALS_DeviceManager::GetReferenceID(HALS_DeviceManager *this)
{
  return 0;
}

uint64_t HALS_DeviceManager::WantsOwnedObjectPropertiesChanged(HALS_DeviceManager *this)
{
  return 1;
}

_QWORD *AMCP::IO_Core::Play_State_Manager::get_debug_string(AMCP::IO_Core::Play_State_Manager *this, uint64_t a2, uint64_t a3)
{
  const char *v4;
  char __str[100];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v4 = "Prewarmed";
  if (!a2)
    v4 = "Stopped";
  if (a3)
    v4 = "Running";
  snprintf(__str, 0x64uLL, "Prewarm: %llu Play: %llu State: %s", a2, a3, v4);
  return std::string::basic_string[abi:ne180100]<0>(this, __str);
}

uint64_t HALS_IOContextDescription::GetNumberStreams(HALS_IOContextDescription *this, int a2)
{
  uint64_t v3;
  uint64_t v4;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v3 = 0x21CFB2B78C13521DLL * ((uint64_t)(*((_QWORD *)this + 8) - *((_QWORD *)this + 7)) >> 3);
    v4 = v3;
  }
  else
  {
    v4 = (uint64_t)(*((_QWORD *)this + 11) - *((_QWORD *)this + 10)) >> 5;
    v3 = 0x21CFB2B78C13521DLL * ((uint64_t)(*((_QWORD *)this + 8) - *((_QWORD *)this + 7)) >> 3);
  }
  if (v3 != *((_DWORD *)this + 34) && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v6 = 136315394;
    v7 = "HALS_IOContextDescription.cpp";
    v8 = 1024;
    v9 = 1370;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Extra items in mStreamActiveState", (uint8_t *)&v6, 0x12u);
  }
  if (*((_DWORD *)this + 28) != (uint64_t)(*((_QWORD *)this + 11) - *((_QWORD *)this + 10)) >> 5
    && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v6 = 136315394;
    v7 = "HALS_IOContextDescription.cpp";
    v8 = 1024;
    v9 = 1371;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Extra items in mStreamActiveState", (uint8_t *)&v6, 0x12u);
  }
  return v4;
}

double HALS_IOContextDescription::GetStreamInfoAtIndex(_QWORD *a1, int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  double result;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  int v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t *v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t *v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  __int128 v47;
  __int128 v48;
  int v49;
  unsigned int v50;
  int v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;

  *(_DWORD *)a4 = 0;
  *(_DWORD *)(a4 + 4) = a2;
  v5 = a4 + 16;
  result = 0.0;
  *(_OWORD *)(a4 + 8) = 0u;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 40) = 0u;
  if (a2)
  {
    v8 = a1[7];
    if (0x21CFB2B78C13521DLL * ((a1[8] - v8) >> 3) > (unint64_t)a3)
    {
      v9 = v8 + 424 * a3;
      v11 = *(_DWORD *)(v9 + 108);
      v10 = (_DWORD *)(v9 + 108);
      if (!v11
        || ((v12 = *(_QWORD *)(v8 + 424 * a3 + 112), *(_QWORD *)(v8 + 424 * a3 + 120) != v12)
          ? (v13 = v12 == 0)
          : (v13 = 1),
            v13))
      {
        v12 = v8 + 424 * a3 + 408;
      }
      v14 = *(_QWORD *)v12;
      v15 = *(_QWORD *)(*(_QWORD *)v12 + 8);
      if (v15)
      {
        v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 320))(v15);
        if (v16)
          v17 = *(_DWORD *)(v16 + 16);
        else
          v17 = 0;
        *(_DWORD *)a4 = v17;
        v30 = v8 + 424 * a3;
        *(_DWORD *)(a4 + 4) = *(unsigned __int8 *)(v30 + 8);
        *(_DWORD *)(a4 + 8) = *(_DWORD *)(v30 + 104);
        *(_DWORD *)(a4 + 12) = *(_DWORD *)(v14 + 308);
        if (*v10)
        {
          HALS_IODSPInfo::GetClientFormat((HALS_IODSPInfo *)&v53, (uint64_t *)(v8 + 424 * a3 + 112));
        }
        else
        {
          v31 = v8 + 424 * a3;
          v32 = *(_OWORD *)(v31 + 384);
          v53 = *(_OWORD *)(v31 + 368);
          v54 = v32;
          v55 = *(_QWORD *)(v31 + 400);
        }
        result = *(double *)&v53;
        v33 = v54;
        *(_OWORD *)v5 = v53;
        *(_OWORD *)(v5 + 16) = v33;
        *(_QWORD *)(v5 + 32) = v55;
      }
    }
    return result;
  }
  v18 = a1[10];
  if (a3 >= (unint64_t)((a1[11] - v18) >> 5))
    return result;
  v19 = v18 + 32 * a3;
  v20 = *(uint64_t **)(v19 + 8);
  v21 = *(_QWORD *)(v19 + 16) - (_QWORD)v20;
  if (!v21)
    return result;
  v22 = -1431655765 * (v21 >> 3);
  if (!v22)
    return result;
  if (v22 == 1)
  {
    v23 = *v20;
    if (!*(_DWORD *)(*v20 + 108)
      || ((v24 = *(uint64_t **)(v23 + 112), *(uint64_t **)(v23 + 120) != v24) ? (v25 = v24 == 0) : (v25 = 1), v25))
    {
      v24 = (uint64_t *)(v23 + 408);
    }
    v26 = *v24;
    v27 = *(_QWORD *)(*v24 + 8);
    if (v27)
    {
      v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 320))(v27);
      v29 = v28 ? *(_DWORD *)(v28 + 16) : 0;
      *(_DWORD *)a4 = v29;
      *(_DWORD *)(a4 + 4) = *(unsigned __int8 *)(v23 + 8);
      *(_DWORD *)(a4 + 8) = *(_DWORD *)(v23 + 104);
      *(_DWORD *)(a4 + 12) = *(_DWORD *)(v26 + 308);
      if (*(_DWORD *)(v23 + 108))
      {
        HALS_IODSPInfo::GetClientFormat((HALS_IODSPInfo *)&v53, (uint64_t *)(v23 + 112));
      }
      else
      {
        v41 = *(_OWORD *)(v23 + 384);
        v53 = *(_OWORD *)(v23 + 368);
        v54 = v41;
        v55 = *(_QWORD *)(v23 + 400);
      }
      result = *(double *)&v53;
      v42 = v54;
      *(_OWORD *)v5 = v53;
      *(_OWORD *)(v5 + 16) = v42;
      *(_QWORD *)(v5 + 32) = v55;
      if (*(_DWORD *)(a4 + 24) == 1819304813 && !*(_DWORD *)(v23 + 108))
      {
        v43 = *(_OWORD *)(v23 + 384);
        v53 = *(_OWORD *)(v23 + 368);
        v54 = v43;
        v55 = *(_QWORD *)(v23 + 400);
        v44 = *(_DWORD *)v19;
        if ((BYTE12(v53) & 0x20) != 0)
        {
          v45 = 1;
        }
        else
        {
          v45 = HIDWORD(v54);
          if (!HIDWORD(v54))
          {
            v46 = (v55 + 7) >> 3;
LABEL_60:
            if ((BYTE12(v53) & 0x20) != 0)
              v51 = 1;
            else
              v51 = *(_DWORD *)v19;
            DWORD2(v54) = v46 * v51;
            HIDWORD(v54) = v44;
            LODWORD(v54) = v46 * v51;
            DWORD1(v54) = 1;
            *(_QWORD *)(v5 + 32) = v55;
            result = *(double *)&v53;
            v52 = v54;
            *(_OWORD *)v5 = v53;
            *(_OWORD *)(v5 + 16) = v52;
            return result;
          }
        }
        v46 = DWORD2(v54) / v45;
        goto LABEL_60;
      }
    }
  }
  else
  {
    v34 = *v20;
    if (!*(_DWORD *)(*v20 + 108)
      || ((v35 = *(uint64_t **)(v34 + 112), *(uint64_t **)(v34 + 120) != v35) ? (v36 = v35 == 0) : (v36 = 1), v36))
    {
      v35 = (uint64_t *)(v34 + 408);
    }
    v37 = *v35;
    v38 = *(_QWORD *)(*v35 + 8);
    if (v38)
    {
      v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 320))(v38);
      v40 = v39 ? *(_DWORD *)(v39 + 16) : 0;
      *(_DWORD *)a4 = v40;
      *(_DWORD *)(a4 + 4) = *(unsigned __int8 *)(v34 + 8);
      *(_DWORD *)(a4 + 8) = *(_DWORD *)(v34 + 104);
      *(_DWORD *)(a4 + 12) = *(_DWORD *)(v37 + 308);
      if (*(_DWORD *)(v34 + 108))
      {
        HALS_IODSPInfo::GetClientFormat((HALS_IODSPInfo *)&v53, (uint64_t *)(v34 + 112));
      }
      else
      {
        v47 = *(_OWORD *)(v34 + 384);
        v53 = *(_OWORD *)(v34 + 368);
        v54 = v47;
        v55 = *(_QWORD *)(v34 + 400);
      }
      result = *(double *)&v53;
      v48 = v54;
      *(_OWORD *)v5 = v53;
      *(_OWORD *)(v5 + 16) = v48;
      *(_QWORD *)(v5 + 32) = v55;
      if (*(_DWORD *)(a4 + 24) == 1819304813)
      {
        v49 = *(_DWORD *)v19;
        v50 = (((8 * *(_DWORD *)(a4 + 40)) / *(_DWORD *)(a4 + 44)) >> 3) * *(_DWORD *)v19;
        *(_DWORD *)(a4 + 40) = v50;
        *(_DWORD *)(a4 + 44) = v49;
        *(_DWORD *)(a4 + 32) = v50;
      }
    }
  }
  return result;
}

uint64_t HALS_IOContextDescription::GetNumberActiveStreams(HALS_IOContextDescription *this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  int8x8_t *v4;

  v2 = 112;
  v3 = 104;
  if (a2)
    v3 = 128;
  v4 = *(int8x8_t **)((char *)this + v3);
  if (a2)
    v2 = 136;
  return std::__count[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<BOOL>,true,BOOL,std::__identity,0>(v4, 0, (uint64_t)&v4[*(_QWORD *)((char *)this + v2) >> 6], *(_QWORD *)((_BYTE *)this + v2) & 0x3F, 1);
}

uint64_t HALS_IOContextDescription::IsStreamEnabledAtIndex(HALS_IOContextDescription *this, int a2, unsigned int a3)
{
  char *v3;

  if (a2)
  {
    if (*((_QWORD *)this + 17) > (unint64_t)a3)
    {
      v3 = (char *)this + 128;
      return (*(_QWORD *)(*(_QWORD *)v3 + (((unint64_t)a3 >> 3) & 0x1FFFFFF8)) >> a3) & 1;
    }
  }
  else if (*((_QWORD *)this + 14) > (unint64_t)a3)
  {
    v3 = (char *)this + 104;
    return (*(_QWORD *)(*(_QWORD *)v3 + (((unint64_t)a3 >> 3) & 0x1FFFFFF8)) >> a3) & 1;
  }
  return 1;
}

uint64_t HALB_IOBufferManager_Server::GetIOStatus(HALB_IOBufferManager_Server *this)
{
  uint64_t v2;
  uint64_t result;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 7);
  if (!v2)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      return 0;
    v4 = 136315394;
    v5 = "HALB_IOBufferManager.cpp";
    v6 = 1024;
    v7 = 225;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_IOBufferManager_Server::GetIOStatus: no shared buffer", (uint8_t *)&v4, 0x12u);
    v2 = *((_QWORD *)this + 7);
    if (!v2)
      return 0;
  }
  result = *(_QWORD *)(v2 + 8);
  if (result)
    return result;
  if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    return 0;
  v4 = 136315394;
  v5 = "HALB_IOBufferManager.cpp";
  v6 = 1024;
  v7 = 228;
  _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_IOBufferManager_Server::GetIOStatus: the shared buffer isn't valid", (uint8_t *)&v4, 0x12u);
  return *(_QWORD *)(*((_QWORD *)this + 7) + 8);
}

CFTypeID OS::CF::UntypedObject::As<OS::CF::Dictionary>(_QWORD *a1, uint64_t a2)
{
  const void *TypeID;
  CFTypeID result;
  const void *v6;

  TypeID = OS::CF::UntypedObject::GetTypeID(*(const void **)(a2 + 8));
  result = CFDictionaryGetTypeID();
  if (TypeID == (const void *)result)
  {
    v6 = *(const void **)(a2 + 8);
    if (v6)
      result = (CFTypeID)CFRetain(v6);
    a1[1] = v6;
  }
  else
  {
    a1[1] = 0;
  }
  *a1 = &off_1E69A0DE0;
  return result;
}

CFTypeID OS::CF::UntypedObject::As<OS::CF::Number>(_QWORD *a1, uint64_t a2)
{
  const void *TypeID;
  CFTypeID result;
  const void *v6;

  TypeID = OS::CF::UntypedObject::GetTypeID(*(const void **)(a2 + 8));
  result = CFNumberGetTypeID();
  if (TypeID == (const void *)result)
  {
    v6 = *(const void **)(a2 + 8);
    if (v6)
      result = (CFTypeID)CFRetain(v6);
    a1[1] = v6;
  }
  else
  {
    a1[1] = 0;
  }
  *a1 = &off_1E69A0F10;
  return result;
}

const void *OS::CF::UntypedObject::GetTypeID(const void *this)
{
  if (this)
    return (const void *)CFGetTypeID(this);
  return this;
}

uint64_t OS::CF::DictionaryBase<__CFDictionary const*>::operator[](uint64_t result, CFDictionaryRef theDict, void *key)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *value;

  *(_QWORD *)result = &off_1E69A0E58;
  *(_QWORD *)(result + 8) = 0;
  if (theDict)
  {
    v3 = result;
    value = 0;
    result = CFDictionaryGetValueIfPresent(theDict, key, (const void **)&value);
    if ((_DWORD)result)
    {
      v4 = value;
      if (value)
      {
        CFRetain(value);
        v5 = v3;
        v6 = (uint64_t)v4;
      }
      else
      {
        v5 = v3;
        v6 = 0;
      }
      return OS::CF::UntypedObject::operator=(v5, v6);
    }
  }
  return result;
}

uint64_t OS::CF::Number::GetValue<unsigned int>(const __CFNumber *a1, uint64_t a2)
{
  unsigned int valuePtr;

  valuePtr = a2;
  if (a1)
  {
    CFNumberGetValue(a1, kCFNumberSInt32Type, &valuePtr);
    return valuePtr;
  }
  return a2;
}

const __CFArray *OS::CF::ArrayBase<__CFArray const*>::GetSize(const __CFArray *result)
{
  if (result)
    return (const __CFArray *)CFArrayGetCount(result);
  return result;
}

const __CFArray *OS::CF::ArrayBase<__CFArray const*>::operator[](const __CFArray *result, uint64_t a2, CFIndex a3)
{
  const __CFArray *v4;
  const void *ValueAtIndex;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)result = &off_1E69A0E58;
  *((_QWORD *)result + 1) = 0;
  if ((a3 & 0x8000000000000000) == 0)
  {
    v4 = result;
    result = *(const __CFArray **)(a2 + 8);
    if (result)
    {
      result = (const __CFArray *)CFArrayGetCount(result);
      if ((uint64_t)result > a3)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 8), a3);
        v7 = (uint64_t)ValueAtIndex;
        if (ValueAtIndex)
        {
          CFRetain(ValueAtIndex);
          v8 = (uint64_t)v4;
          v9 = v7;
        }
        else
        {
          v8 = (uint64_t)v4;
          v9 = 0;
        }
        return (const __CFArray *)OS::CF::UntypedObject::operator=(v8, v9);
      }
    }
  }
  return result;
}

float MonoMultiCoefsSRC_Neon(_OWORD *a1, uint64_t a2, float *a3, int a4, int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9)
{
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t *v13;
  float32x4_t *v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t *v17;
  float32x4_t v18;
  float32x4_t v19;
  int v20;
  float32x4_t *v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t *v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float result;

  do
  {
    v9 = 0uLL;
    v10 = 0uLL;
    v11 = 0uLL;
    v12 = 0uLL;
    v13 = (float32x4_t *)(a2 + 4 * (unsigned __int16)(a7 * a9));
    v15 = *(float32x4_t *)a1;
    v16 = *((float32x4_t *)a1 + 1);
    v14 = (float32x4_t *)(a1 + 2);
    v18 = *v13;
    v19 = v13[1];
    v17 = v13 + 2;
    v20 = a9 - 16;
    if (a9 != 16)
    {
      do
      {
        v22 = *v14;
        v23 = v14[1];
        v21 = v14 + 2;
        v9 = vmlaq_f32(v9, v15, v18);
        v20 -= 16;
        v25 = *v17;
        v26 = v17[1];
        v24 = v17 + 2;
        v10 = vmlaq_f32(v10, v16, v19);
        v15 = *v21;
        v16 = v21[1];
        v14 = v21 + 2;
        v11 = vmlaq_f32(v11, v22, v25);
        v18 = *v24;
        v19 = v24[1];
        v17 = v24 + 2;
        v12 = vmlaq_f32(v12, v23, v26);
      }
      while (v20);
    }
    a1 = (_OWORD *)((char *)a1 + 4 * (unsigned __int16)a6);
    a7 += HIWORD(a6);
    v27 = vaddq_f32(vmlaq_f32(v9, v15, v18), vmlaq_f32(v10, v16, v19));
    v28 = vaddq_f32(vmlaq_f32(v11, *v14, *v17), vmlaq_f32(v12, v14[1], v17[1]));
    if (a7 >= a8)
    {
      a7 -= a8;
      a1 = (_OWORD *)((char *)a1 + 4);
    }
    v29 = vaddq_f32(v27, v28);
    result = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v29, v29));
    --a4;
    *a3 = result;
    a3 += a5;
  }
  while (a4);
  return result;
}

float StereoMultiCoefsSRC_Neon(_OWORD *a1, _OWORD *a2, uint64_t a3, float *a4, float *a5, int a6, int a7, unsigned int a8, unsigned int a9, unsigned int a10, int a11)
{
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t *v20;
  float32x4_t *v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t *v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t *v27;
  float32x4_t v28;
  float32x4_t v29;
  int v30;
  float32x4_t *v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t *v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t *v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float result;

  do
  {
    v12 = 0uLL;
    v13 = 0uLL;
    v14 = 0uLL;
    v15 = 0uLL;
    v16 = 0uLL;
    v17 = 0uLL;
    v18 = 0uLL;
    v19 = 0uLL;
    v20 = (float32x4_t *)(a3 + 4 * (unsigned __int16)(a9 * a11));
    v22 = *(float32x4_t *)a1;
    v23 = *((float32x4_t *)a1 + 1);
    v21 = (float32x4_t *)(a1 + 2);
    v25 = *(float32x4_t *)a2;
    v26 = *((float32x4_t *)a2 + 1);
    v24 = (float32x4_t *)(a2 + 2);
    v28 = *v20;
    v29 = v20[1];
    v27 = v20 + 2;
    v30 = a11 - 16;
    if (a11 != 16)
    {
      do
      {
        v32 = *v21;
        v33 = v21[1];
        v31 = v21 + 2;
        v12 = vmlaq_f32(v12, v22, v28);
        v35 = *v24;
        v36 = v24[1];
        v34 = v24 + 2;
        v16 = vmlaq_f32(v16, v25, v28);
        v30 -= 16;
        v38 = *v27;
        v39 = v27[1];
        v37 = v27 + 2;
        v13 = vmlaq_f32(v13, v23, v29);
        v17 = vmlaq_f32(v17, v26, v29);
        v22 = *v31;
        v23 = v31[1];
        v21 = v31 + 2;
        v14 = vmlaq_f32(v14, v32, v38);
        v25 = *v34;
        v26 = v34[1];
        v24 = v34 + 2;
        v18 = vmlaq_f32(v18, v35, v38);
        v28 = *v37;
        v29 = v37[1];
        v27 = v37 + 2;
        v15 = vmlaq_f32(v15, v33, v39);
        v19 = vmlaq_f32(v19, v36, v39);
      }
      while (v30);
    }
    v40 = v27[1];
    a1 = (_OWORD *)((char *)a1 + 4 * (unsigned __int16)a8);
    a2 = (_OWORD *)((char *)a2 + 4 * (unsigned __int16)a8);
    a9 += HIWORD(a8);
    v41 = vaddq_f32(vmlaq_f32(v12, v22, v28), vmlaq_f32(v13, v23, v29));
    v42 = vaddq_f32(vmlaq_f32(v16, v25, v28), vmlaq_f32(v17, v26, v29));
    v43 = vaddq_f32(vmlaq_f32(v14, *v21, *v27), vmlaq_f32(v15, v21[1], v40));
    v44 = vaddq_f32(vmlaq_f32(v18, *v24, *v27), vmlaq_f32(v19, v24[1], v40));
    if (a9 >= a10)
    {
      a9 -= a10;
      a1 = (_OWORD *)((char *)a1 + 4);
      a2 = (_OWORD *)((char *)a2 + 4);
    }
    v45 = vaddq_f32(v41, v43);
    v46 = vaddq_f32(v42, v44);
    result = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v45, v45));
    --a6;
    *a4 = result;
    *a5 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v46, v46));
    a4 += a7;
    a5 += a7;
  }
  while (a6);
  return result;
}

uint64_t AMCP::DAL::Audio_Samples_Data::allocate(AMCP::DAL::Audio_Samples_Data *this, uint64_t a2)
{
  AMCP::DAL::Audio_Samples_Data *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v3 = this;
  if (*(_QWORD *)this && !*((_DWORD *)this + 4))
  {
    v6 = caulk::audio_buffer_resource(this);
    this = (AMCP::DAL::Audio_Samples_Data *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v6 + 24))(v6, *(_QWORD *)v3, a2, 8);
    if (a2)
      goto LABEL_4;
LABEL_6:
    result = 0;
    goto LABEL_7;
  }
  if (!a2)
    goto LABEL_6;
LABEL_4:
  v4 = caulk::audio_buffer_resource(this);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, a2, 8);
LABEL_7:
  *(_QWORD *)v3 = result;
  *((_QWORD *)v3 + 1) = a2;
  *((_DWORD *)v3 + 4) = 0;
  return result;
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void AMCP::DAL::Audio_Samples_Data::~Audio_Samples_Data(AMCP::DAL::Audio_Samples_Data *this)
{
  uint64_t v2;

  if (*(_QWORD *)this)
  {
    if (!*((_DWORD *)this + 4))
    {
      v2 = caulk::audio_buffer_resource(this);
      (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v2 + 24))(v2, *(_QWORD *)this, *((_QWORD *)this + 1), 8);
    }
  }
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x1B5E50688);
}

uint64_t HALS_MetaDevice_HostedDSP::VisitSubdevices(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int i;
  uint64_t v10;
  uint64_t v11;

  if (*(_QWORD *)(a2 + 24))
  {
    v2 = result;
    v3 = *(uint64_t **)(*(_QWORD *)result + 1344);
    v4 = *(uint64_t **)(*(_QWORD *)result + 1352);
    if (v3 != v4)
    {
      v6 = 0;
      do
      {
        v8 = *v3;
        v7 = v3[1];
        v3 += 3;
        v6 += (unint64_t)(v7 - v8) >> 3;
      }
      while (v3 != v4);
      if (v6)
      {
        for (i = 0; i != v6; ++i)
        {
          result = HALS_MetaDeviceDescription::GetSubDeviceByIndex(*(uint64_t ***)(*(_QWORD *)v2 + 1344), *(HALS_MetaDeviceDescription **)(*(_QWORD *)v2 + 1352), i);
          if (result)
          {
            v11 = result;
            v10 = *(_QWORD *)(a2 + 24);
            if (!v10)
              std::__throw_bad_function_call[abi:ne180100]();
            result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v10 + 48))(v10, &v11);
          }
        }
      }
    }
  }
  return result;
}

uint64_t HALS_MetaDevice_HostedDSP::HasProperty(HALS_MetaDevice_HostedDSP *this, _DWORD *a2, const AudioObjectPropertyAddress *a3, HALS_Client *a4)
{
  uint64_t v5;
  HALB_Mutex *v6;
  uint64_t v7;
  NSObject *v9;
  _opaque_pthread_t *v11;
  mach_port_t v12;
  _QWORD v13[8];
  uint8_t buf[8];
  __int128 v15;
  __int16 v16;
  const char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (*a2 != 1685278561 && *a2 != 1685278578)
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v9 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v11 = pthread_self();
      v12 = pthread_mach_thread_np(v11);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v12;
      LOWORD(v15) = 2080;
      *(_QWORD *)((char *)&v15 + 2) = "HALS_MetaDevice_HostedDSP.cpp";
      WORD5(v15) = 1024;
      HIDWORD(v15) = 60;
      v16 = 2080;
      v17 = "HandlesProperty(inAddress, inClient)";
      _os_log_error_impl(&dword_1B57BA000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s This property is not processed by HALS_MetaDevice_HostedDSP", buf, 0x22u);
    }
    abort();
  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)&v15 = buf;
  *((_QWORD *)&v15 + 1) = 0x2000000000;
  LOBYTE(v16) = 0;
  v5 = *(_QWORD *)this;
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 0x40000000;
  v13[2] = ___ZNK25HALS_MetaDevice_HostedDSP11HasPropertyEjRK26AudioObjectPropertyAddressP11HALS_Client_block_invoke;
  v13[3] = &unk_1E696B238;
  v13[6] = a2;
  v13[7] = a3;
  v13[4] = buf;
  v13[5] = this;
  v6 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 56))(v5);
  HALB_CommandGate::ExecuteCommand(v6, (uint64_t)v13);
  v7 = *(unsigned __int8 *)(v15 + 24);
  _Block_object_dispose(buf, 8);
  return v7;
}

void sub_1B57C173C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void AMCP::Log::Scope_Registry::fetch(AMCP::Log::Scope_Registry *this, char *__s, char *a3)
{
  char *v4;
  unsigned __int8 *v6;
  unint64_t v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  int v17;
  int v18;
  void **v19;
  int v20;
  void **v21;
  _QWORD *v22;
  _QWORD *v23;
  void **v24;
  void **v25;
  uint64_t v26;
  __int128 v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  std::string *v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  std::string::size_type size;
  std::string::size_type v49;
  char *v50;
  __int128 v51;
  __int128 v52;
  int64x2_t v53;
  uint64_t v54;
  std::string::size_type v55;
  std::string::size_type v56;
  uint64_t v57;
  uint64_t v58;
  std::string::size_type v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  std::string::size_type v65;
  uint64_t v66;
  std::string::size_type v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  size_t v73;
  size_t v74;
  uint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *p_shared_owners;
  unint64_t v80;
  uint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  char *__sa;
  char *v85;
  __int128 v86;
  void *v87[2];
  char v88;
  void *v89[2];
  char v90;
  void *v91;
  char v92;
  std::string __p;
  uint64_t v94;
  uint64_t *v95;
  std::string v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  uint64_t *v100;

  v4 = __s;
  if (*((_QWORD *)&AMCP::Log::Scope_Registry::get(void)::s_registry + 1) == strlen(__s)
    && !memcmp((const void *)AMCP::Log::Scope_Registry::get(void)::s_registry, v4, *((size_t *)&AMCP::Log::Scope_Registry::get(void)::s_registry + 1))&& *((_QWORD *)&xmmword_1EDB87F10 + 1) == strlen(a3)&& !memcmp((const void *)xmmword_1EDB87F10, a3, *((size_t *)&xmmword_1EDB87F10 + 1)))
  {
    v81 = *((_QWORD *)&xmmword_1EDB87F20 + 1);
    *(_QWORD *)this = xmmword_1EDB87F20;
    *((_QWORD *)this + 1) = v81;
    if (v81)
    {
      v82 = (unint64_t *)(v81 + 8);
      do
        v83 = __ldxr(v82);
      while (__stxr(v83 + 1, v82));
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v87, v4);
    std::string::basic_string[abi:ne180100]<0>(v89, a3);
    v96.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EDB87F48;
    v96.__r_.__value_.__s.__data_[8] = 1;
    std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)&unk_1EDB87F48);
    v85 = v4;
    __sa = a3;
    v6 = (unsigned __int8 *)xmmword_1EDB87F30;
    if (*((_QWORD *)&xmmword_1EDB87F30 + 1) != (_QWORD)xmmword_1EDB87F30)
    {
      v7 = (uint64_t)(*((_QWORD *)&xmmword_1EDB87F30 + 1) - xmmword_1EDB87F30) >> 6;
      do
      {
        v8 = &v6[64 * (v7 >> 1)];
        v9 = (char)std::operator<=>[abi:ne180100]<std::string,std::string,std::string,std::string>(v8, v87);
        if (v9 >= 0)
          v7 >>= 1;
        else
          v7 += ~(v7 >> 1);
        if (v9 < 0)
          v6 = v8 + 64;
      }
      while (v7);
    }
    if ((AMCP::Log::Scope_Registry::was_found((unsigned __int8 *)v87, v6) & 1) != 0)
    {
      *(_QWORD *)this = *((_QWORD *)v6 + 6);
      v10 = *((_QWORD *)v6 + 7);
      *((_QWORD *)this + 1) = v10;
      if (v10)
      {
        v11 = (unint64_t *)(v10 + 8);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
    }
    else
    {
      *(_QWORD *)this = 0;
      *((_QWORD *)this + 1) = 0;
    }
    std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)&v96);
    v13 = *(_QWORD *)this;
    if (!*(_QWORD *)this)
    {
      do
      {
        v91 = &unk_1EDB87F48;
        v92 = 1;
        std::__shared_mutex_base::lock((std::__shared_mutex_base *)&unk_1EDB87F48);
        v14 = xmmword_1EDB87F30;
        if (*((_QWORD *)&xmmword_1EDB87F30 + 1) != (_QWORD)xmmword_1EDB87F30)
        {
          v15 = (uint64_t)(*((_QWORD *)&xmmword_1EDB87F30 + 1) - xmmword_1EDB87F30) >> 6;
          do
          {
            v16 = (_QWORD *)(v14 + (v15 >> 1 << 6));
            v17 = (char)std::operator<=>[abi:ne180100]<std::string,std::string,std::string,std::string>(v16, v87);
            if (v17 >= 0)
              v15 >>= 1;
            else
              v15 += ~(v15 >> 1);
            if (v17 < 0)
              v14 = (uint64_t)(v16 + 8);
          }
          while (v15);
        }
        if (!AMCP::Log::Scope_Registry::was_found((unsigned __int8 *)v87, (unsigned __int8 *)v14))
        {
          v18 = v88;
          v19 = (void **)v87[0];
          v20 = v90;
          v21 = (void **)v89[0];
          v22 = operator new(0x30uLL);
          v23 = v22;
          if (v20 >= 0)
            v24 = v89;
          else
            v24 = v21;
          v22[2] = 0;
          if (v18 >= 0)
            v25 = v87;
          else
            v25 = v19;
          *v23 = &off_1E69A1D40;
          v23[1] = 0;
          v23[3] = os_log_create((const char *)v25, (const char *)v24);
          v23[4] = 0;
          *((_DWORD *)v23 + 10) = 2;
          std::string::basic_string[abi:ne180100]<0>(&__p, "AMCP Logging Spool");
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(&v96, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
            LOBYTE(v97) = 1;
            v98 = -4294967279;
            LODWORD(v99) = 0;
            BYTE4(v99) = 1;
            BYTE8(v99) = 0;
            BYTE12(v99) = 0;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
          }
          else
          {
            v96 = __p;
            LOBYTE(v97) = 1;
            v98 = -4294967279;
            LODWORD(v99) = 0;
            BYTE4(v99) = 1;
            BYTE8(v99) = 0;
            BYTE12(v99) = 0;
          }
          v26 = operator new();
          MEMORY[0x1B5E4FD34](v26, 0, &v96);
          std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100](v23 + 4, v26);
          if ((_BYTE)v97 && SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v96.__r_.__value_.__l.__data_);
          *(_QWORD *)&v27 = v23 + 3;
          *((_QWORD *)&v27 + 1) = v23;
          v86 = v27;
          if (*((_QWORD *)&xmmword_1EDB87F30 + 1) >= (unint64_t)qword_1EDB87F40)
          {
            v33 = xmmword_1EDB87F30;
            v34 = ((uint64_t)(*((_QWORD *)&xmmword_1EDB87F30 + 1) - xmmword_1EDB87F30) >> 6) + 1;
            if (v34 >> 58)
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            v35 = qword_1EDB87F40 - xmmword_1EDB87F30;
            if ((qword_1EDB87F40 - (uint64_t)xmmword_1EDB87F30) >> 5 > v34)
              v34 = v35 >> 5;
            if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFC0)
              v36 = 0x3FFFFFFFFFFFFFFLL;
            else
              v36 = v34;
            v95 = &qword_1EDB87F40;
            if (v36)
            {
              v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>>(v36);
            }
            else
            {
              v38 = 0;
              v37 = 0;
            }
            v41 = v14 - v33;
            v42 = (v14 - v33) >> 6;
            v43 = (std::string *)&v38[64 * v42];
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)v43;
            __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v43;
            v94 = (uint64_t)&v38[64 * v37];
            if (v42 == v37)
            {
              if (v41 < 1)
              {
                if (v14 == v33)
                  v45 = 1;
                else
                  v45 = v41 >> 5;
                v98 = (uint64_t)v95;
                v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>>(v45);
                size = __p.__r_.__value_.__l.__size_;
                if (__p.__r_.__value_.__r.__words[2] == __p.__r_.__value_.__l.__size_)
                {
                  v53 = vdupq_n_s64(__p.__r_.__value_.__l.__size_);
                  v49 = (std::string::size_type)&v46[64 * (v45 >> 2)];
                }
                else
                {
                  v49 = (std::string::size_type)&v46[64 * (v45 >> 2)
                                                   + __p.__r_.__value_.__r.__words[2]
                                                   - __p.__r_.__value_.__l.__size_];
                  v50 = &v46[64 * (v45 >> 2)];
                  do
                  {
                    v51 = *(_OWORD *)size;
                    *((_QWORD *)v50 + 2) = *(_QWORD *)(size + 16);
                    *(_OWORD *)v50 = v51;
                    *(_QWORD *)(size + 8) = 0;
                    *(_QWORD *)(size + 16) = 0;
                    *(_QWORD *)size = 0;
                    v52 = *(_OWORD *)(size + 24);
                    *((_QWORD *)v50 + 5) = *(_QWORD *)(size + 40);
                    *(_OWORD *)(v50 + 24) = v52;
                    *(_QWORD *)(size + 32) = 0;
                    *(_QWORD *)(size + 40) = 0;
                    *(_QWORD *)(size + 24) = 0;
                    *((_OWORD *)v50 + 3) = *(_OWORD *)(size + 48);
                    *(_QWORD *)(size + 48) = 0;
                    *(_QWORD *)(size + 56) = 0;
                    v50 += 64;
                    size += 64;
                  }
                  while (v50 != (char *)v49);
                  v53 = *(int64x2_t *)&__p.__r_.__value_.__r.__words[1];
                }
                v54 = v94;
                v96.__r_.__value_.__r.__words[0] = __p.__r_.__value_.__r.__words[0];
                __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v46;
                __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v46[64 * (v45 >> 2)];
                *(int64x2_t *)&v96.__r_.__value_.__r.__words[1] = v53;
                __p.__r_.__value_.__r.__words[2] = v49;
                v94 = (uint64_t)&v46[64 * v47];
                v97 = v54;
                std::__split_buffer<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::~__split_buffer((uint64_t)&v96);
                v43 = (std::string *)__p.__r_.__value_.__r.__words[2];
              }
              else
              {
                v44 = v42 + 2;
                if (v42 >= -1)
                  v44 = v42 + 1;
                v43 = (std::string *)((char *)v43 - 64 * (v44 >> 1));
                __p.__r_.__value_.__l.__size_ = (std::string::size_type)v43;
                __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v43;
              }
            }
            *(_OWORD *)&std::pair<std::string,std::string>::pair[abi:ne180100](v43, (__int128 *)v87)[2].__r_.__value_.__l.__data_ = v86;
            v55 = __p.__r_.__value_.__l.__size_;
            v56 = __p.__r_.__value_.__r.__words[2] + 64;
            __p.__r_.__value_.__r.__words[2] += 64;
            v57 = xmmword_1EDB87F30;
            if ((_QWORD)xmmword_1EDB87F30 == v14)
            {
              v59 = __p.__r_.__value_.__l.__size_;
            }
            else
            {
              v58 = v14;
              v59 = __p.__r_.__value_.__l.__size_;
              do
              {
                v60 = *(_OWORD *)(v58 - 64);
                *(_QWORD *)(v59 - 48) = *(_QWORD *)(v58 - 48);
                *(_OWORD *)(v59 - 64) = v60;
                *(_QWORD *)(v58 - 56) = 0;
                *(_QWORD *)(v58 - 48) = 0;
                *(_QWORD *)(v58 - 64) = 0;
                v61 = *(_OWORD *)(v58 - 40);
                *(_QWORD *)(v59 - 24) = *(_QWORD *)(v58 - 24);
                *(_OWORD *)(v59 - 40) = v61;
                *(_QWORD *)(v58 - 32) = 0;
                *(_QWORD *)(v58 - 24) = 0;
                *(_QWORD *)(v58 - 40) = 0;
                *(_OWORD *)(v59 - 16) = *(_OWORD *)(v58 - 16);
                v59 -= 64;
                *(_QWORD *)(v58 - 16) = 0;
                *(_QWORD *)(v58 - 8) = 0;
                v58 -= 64;
              }
              while (v58 != v57);
              v56 = __p.__r_.__value_.__r.__words[2];
            }
            __p.__r_.__value_.__l.__size_ = v59;
            v62 = *((_QWORD *)&xmmword_1EDB87F30 + 1);
            if (*((_QWORD *)&xmmword_1EDB87F30 + 1) != v14)
            {
              do
              {
                v63 = *(_OWORD *)v14;
                *(_QWORD *)(v56 + 16) = *(_QWORD *)(v14 + 16);
                *(_OWORD *)v56 = v63;
                *(_QWORD *)(v14 + 8) = 0;
                *(_QWORD *)(v14 + 16) = 0;
                *(_QWORD *)v14 = 0;
                v64 = *(_OWORD *)(v14 + 24);
                *(_QWORD *)(v56 + 40) = *(_QWORD *)(v14 + 40);
                *(_OWORD *)(v56 + 24) = v64;
                *(_QWORD *)(v14 + 32) = 0;
                *(_QWORD *)(v14 + 40) = 0;
                *(_QWORD *)(v14 + 24) = 0;
                *(_OWORD *)(v56 + 48) = *(_OWORD *)(v14 + 48);
                *(_QWORD *)(v14 + 48) = 0;
                *(_QWORD *)(v14 + 56) = 0;
                v56 += 64;
                v14 += 64;
              }
              while (v14 != v62);
              v59 = __p.__r_.__value_.__l.__size_;
              v14 = *((_QWORD *)&xmmword_1EDB87F30 + 1);
            }
            v65 = xmmword_1EDB87F30;
            *(_QWORD *)&xmmword_1EDB87F30 = v59;
            *((_QWORD *)&xmmword_1EDB87F30 + 1) = v56;
            v66 = qword_1EDB87F40;
            qword_1EDB87F40 = v94;
            __p.__r_.__value_.__r.__words[2] = v14;
            v94 = v66;
            __p.__r_.__value_.__r.__words[0] = v65;
            __p.__r_.__value_.__l.__size_ = v65;
            std::__split_buffer<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::~__split_buffer((uint64_t)&__p);
            v14 = v55;
          }
          else if (v14 == *((_QWORD *)&xmmword_1EDB87F30 + 1))
          {
            std::pair<std::string,std::string>::pair[abi:ne180100]((std::string *)v14, (__int128 *)v87);
            *(_OWORD *)(v14 + 48) = v86;
            *((_QWORD *)&xmmword_1EDB87F30 + 1) = v14 + 64;
          }
          else
          {
            v100 = &qword_1EDB87F40;
            std::pair<std::string,std::string>::pair[abi:ne180100](&v96, (__int128 *)v87);
            v99 = v86;
            v28 = *((_QWORD *)&xmmword_1EDB87F30 + 1);
            v29 = *((_QWORD *)&xmmword_1EDB87F30 + 1) - 64;
            v30 = *((_QWORD *)&xmmword_1EDB87F30 + 1);
            while (v29 < v28)
            {
              v31 = *(_OWORD *)v29;
              *(_QWORD *)(v30 + 16) = *(_QWORD *)(v29 + 16);
              *(_OWORD *)v30 = v31;
              *(_QWORD *)(v29 + 8) = 0;
              *(_QWORD *)(v29 + 16) = 0;
              *(_QWORD *)v29 = 0;
              v32 = *(_OWORD *)(v29 + 24);
              *(_QWORD *)(v30 + 40) = *(_QWORD *)(v29 + 40);
              *(_OWORD *)(v30 + 24) = v32;
              *(_QWORD *)(v29 + 32) = 0;
              *(_QWORD *)(v29 + 40) = 0;
              *(_QWORD *)(v29 + 24) = 0;
              *(_OWORD *)(v30 + 48) = *(_OWORD *)(v29 + 48);
              *(_QWORD *)(v29 + 48) = 0;
              *(_QWORD *)(v29 + 56) = 0;
              v30 += 64;
              v29 += 64;
            }
            *((_QWORD *)&xmmword_1EDB87F30 + 1) = v30;
            if (v28 != v14 + 64)
            {
              v39 = v28 - 16;
              v40 = (uint64_t)(v28 - (v14 + 64)) >> 6 << 6;
              do
              {
                std::pair<std::string,std::string>::operator=[abi:ne180100](v39 - 48, (__int128 *)(v14 + v40 - 64));
                std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100](v39, (__int128 *)(v14 + v40 - 16));
                v39 -= 64;
                v40 -= 64;
              }
              while (v40);
            }
            std::pair<std::string,std::string>::operator=[abi:ne180100](v14, (__int128 *)&v96);
            std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100](v14 + 48, &v99);
            std::__destroy_at[abi:ne180100]<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>,0>((uint64_t)&v96);
          }
        }
        v67 = *(_QWORD *)(v14 + 56);
        v96.__r_.__value_.__r.__words[0] = *(_QWORD *)(v14 + 48);
        v96.__r_.__value_.__l.__size_ = v67;
        if (v67)
        {
          v68 = (unint64_t *)(v67 + 8);
          do
            v69 = __ldxr(v68);
          while (__stxr(v69 + 1, v68));
        }
        std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v91);
        std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100]((uint64_t)this, (__int128 *)&v96);
        v70 = (std::__shared_weak_count *)v96.__r_.__value_.__l.__size_;
        if (v96.__r_.__value_.__l.__size_)
        {
          v71 = (unint64_t *)(v96.__r_.__value_.__l.__size_ + 8);
          do
            v72 = __ldaxr(v71);
          while (__stlxr(v72 - 1, v71));
          if (!v72)
          {
            ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
            std::__shared_weak_count::__release_weak(v70);
          }
        }
        v13 = *(_QWORD *)this;
      }
      while (!*(_QWORD *)this);
      v4 = v85;
    }
    v73 = strlen(v4);
    *(_QWORD *)&AMCP::Log::Scope_Registry::get(void)::s_registry = v4;
    *((_QWORD *)&AMCP::Log::Scope_Registry::get(void)::s_registry + 1) = v73;
    v74 = strlen(__sa);
    *(_QWORD *)&xmmword_1EDB87F10 = __sa;
    *((_QWORD *)&xmmword_1EDB87F10 + 1) = v74;
    v75 = *((_QWORD *)this + 1);
    if (v75)
    {
      v76 = (unint64_t *)(v75 + 8);
      do
        v77 = __ldxr(v76);
      while (__stxr(v77 + 1, v76));
    }
    v78 = (std::__shared_weak_count *)*((_QWORD *)&xmmword_1EDB87F20 + 1);
    *(_QWORD *)&xmmword_1EDB87F20 = v13;
    *((_QWORD *)&xmmword_1EDB87F20 + 1) = v75;
    if (v78)
    {
      p_shared_owners = (unint64_t *)&v78->__shared_owners_;
      do
        v80 = __ldaxr(p_shared_owners);
      while (__stlxr(v80 - 1, p_shared_owners));
      if (!v80)
      {
        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
        std::__shared_weak_count::__release_weak(v78);
      }
    }
    if (v90 < 0)
      operator delete(v89[0]);
    if (v88 < 0)
      operator delete(v87[0]);
  }
}

void sub_1B57C1FAC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (a21 < 0)
    operator delete(__p);
  __clang_call_terminate(a1);
}

uint64_t std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void sub_1B57C2164(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void _ZNSt3__110__function6__funcIZZNK25HALS_MetaDevice_HostedDSP11HasPropertyEjRK26AudioObjectPropertyAddressP11HALS_ClientEUb_E3__0NS_9allocatorIS8_EEFvPK18HALS_MetaSubDeviceEED0Ev()
{
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZZNK25HALS_MetaDevice_HostedDSP11HasPropertyEjRK26AudioObjectPropertyAddressP11HALS_ClientEUb_E3__0NS_9allocatorIS8_EEFvPK18HALS_MetaSubDeviceEE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E696B300;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZNK25HALS_MetaDevice_HostedDSP11HasPropertyEjRK26AudioObjectPropertyAddressP11HALS_ClientEUb_E3__0NS_9allocatorIS8_EEFvPK18HALS_MetaSubDeviceEE7__cloneEPNS0_6__baseISE_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E696B300;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZNK25HALS_MetaDevice_HostedDSP11HasPropertyEjRK26AudioObjectPropertyAddressP11HALS_ClientEUb_E3__0NS_9allocatorIS8_EEFvPK18HALS_MetaSubDeviceEEclEOSD_(uint64_t result, HALS_MetaSubDevice **a2)
{
  HALS_MetaSubDevice *v2;
  uint64_t v3;
  uint64_t RealDeviceObjectID;

  v2 = *a2;
  if (*a2)
  {
    v3 = result;
    RealDeviceObjectID = HALS_MetaSubDevice::GetRealDeviceObjectID(*a2);
    result = (*(uint64_t (**)(HALS_MetaSubDevice *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v2 + 88))(v2, RealDeviceObjectID, v3 + 16, *(_QWORD *)(v3 + 32));
    **(_BYTE **)(v3 + 8) |= result;
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZNK25HALS_MetaDevice_HostedDSP11HasPropertyEjRK26AudioObjectPropertyAddressP11HALS_ClientEUb_E3__0NS_9allocatorIS8_EEFvPK18HALS_MetaSubDeviceEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZZNK25HALS_MetaDevice_HostedDSP11HasPropertyEjRK26AudioObjectPropertyAddressP11HALS_ClientEUb_E3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZNK25HALS_MetaDevice_HostedDSP11HasPropertyEjRK26AudioObjectPropertyAddressP11HALS_ClientEUb_E3__0NS_9allocatorIS8_EEFvPK18HALS_MetaSubDeviceEE11target_typeEv()
{
  return &_ZTIZZNK25HALS_MetaDevice_HostedDSP11HasPropertyEjRK26AudioObjectPropertyAddressP11HALS_ClientEUb_E3__0;
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a1 == a2)
    return 1;
  if ((a2 & a1) < 0 != __OFSUB__(a1, a2))
    return strcmp((const char *)(a1 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(a2 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

uint64_t std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100](uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

uint64_t std::operator<=>[abi:ne180100]<std::string,std::string,std::string,std::string>(_QWORD *a1, _QWORD *a2)
{
  uint64_t result;

  result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, a2);
  if (!(_BYTE)result)
    return std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1 + 3, a2 + 3);
  return result;
}

uint64_t AMCP::Log::Scope_Registry::was_found(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  const void **v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  BOOL v24;
  uint64_t result;

  if (*((unsigned __int8 **)&xmmword_1EDB87F30 + 1) == a2)
    return 0;
  v2 = a2;
  v4 = a1[23];
  if ((v4 & 0x80u) == 0)
    v5 = a1[23];
  else
    v5 = *((_QWORD *)a1 + 1);
  v6 = a2[23];
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *((_QWORD *)a2 + 1);
  if (v5 != v6)
    return 0;
  if (v7 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)))
      return 0;
  }
  else if (a1[23])
  {
    v8 = a1;
    while (*v8 == *a2)
    {
      ++v8;
      ++a2;
      if (!--v4)
        goto LABEL_17;
    }
    return 0;
  }
LABEL_17:
  v9 = a1[47];
  if ((v9 & 0x80u) == 0)
    v10 = a1[47];
  else
    v10 = *((_QWORD *)a1 + 4);
  v11 = v2[47];
  v12 = (char)v11;
  if ((v11 & 0x80u) != 0)
    v11 = *((_QWORD *)v2 + 4);
  if (v10 != v11)
    return 0;
  v13 = (const void **)(a1 + 24);
  v16 = (unsigned __int8 *)*((_QWORD *)v2 + 3);
  v15 = v2 + 24;
  v14 = v16;
  if (v12 >= 0)
    v17 = v15;
  else
    v17 = v14;
  if ((v9 & 0x80) != 0)
    return memcmp(*v13, v17, *((_QWORD *)a1 + 4)) == 0;
  if (!a1[47])
    return 1;
  v18 = v9 - 1;
  do
  {
    v20 = *(unsigned __int8 *)v13;
    v13 = (const void **)((char *)v13 + 1);
    v19 = v20;
    v22 = *v17++;
    v21 = v22;
    v24 = v18-- != 0;
    result = v19 == v21;
  }
  while (v19 == v21 && v24);
  return result;
}

uint64_t std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    std::__shared_mutex_base::unlock(*(std::__shared_mutex_base **)a1);
  return a1;
}

std::string *std::pair<std::string,std::string>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_1B57C2584(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::string,std::string>::operator=[abi:ne180100](uint64_t a1, __int128 *a2)
{
  __int128 v4;
  void **v5;
  __int128 v6;

  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  v5 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*v5);
  v6 = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  *(_OWORD *)v5 = v6;
  *((_BYTE *)a2 + 47) = 0;
  *((_BYTE *)a2 + 24) = 0;
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>,0>(uint64_t a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 48);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>>(unint64_t a1)
{
  if (a1 >> 58)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(a1 << 6);
}

uint64_t std::__split_buffer<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 64;
    std::__destroy_at[abi:ne180100]<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>,0>(i - 64);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E0DE4E98], MEMORY[0x1E0DE4390]);
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E696A660, MEMORY[0x1E0DE42D0]);
}

void sub_1B57C2764(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5020] + 16);
  return result;
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

void std::__shared_ptr_emplace<AMCP::Log::Scope>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69A1D40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::Log::Scope>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69A1D40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

void std::__shared_ptr_emplace<AMCP::Log::Scope>::__on_zero_shared(uint64_t a1)
{
  void *v2;

  std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100]((uint64_t *)(a1 + 32), 0);
  v2 = *(void **)(a1 + 24);
  if (v2)
    os_release(v2);
}

uint64_t std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    MEMORY[0x1B5E4FD40]();
    JUMPOUT(0x1B5E50688);
  }
  return result;
}

uint64_t std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, _QWORD *a2)
{
  size_t v2;
  size_t v3;
  size_t v4;
  size_t v5;
  size_t v6;
  int v7;

  v2 = a1[1];
  if (*((char *)a1 + 23) >= 0)
  {
    v3 = *((unsigned __int8 *)a1 + 23);
  }
  else
  {
    a1 = (_QWORD *)*a1;
    v3 = v2;
  }
  v4 = a2[1];
  if (*((char *)a2 + 23) >= 0)
  {
    v5 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = (_QWORD *)*a2;
    v5 = v4;
  }
  if (v5 >= v3)
    v6 = v3;
  else
    v6 = v5;
  v7 = memcmp(a1, a2, v6);
  if (v7)
  {
    if ((v7 & 0x80000000) == 0)
      return 1;
  }
  else
  {
    if (v3 == v5)
      return 0;
    if (v3 >= v5)
      return 1;
  }
  return 255;
}

uint64_t std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    std::__shared_mutex_base::unlock_shared(*(std::__shared_mutex_base **)a1);
  return a1;
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void sub_1B57C2B3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void _ZNSt3__110__function6__funcIZZNK25HALS_MetaDevice_HostedDSP18IsPropertySettableEjRK26AudioObjectPropertyAddressP11HALS_ClientEUb0_E3__1NS_9allocatorIS8_EEFvPK18HALS_MetaSubDeviceEED0Ev()
{
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZZNK25HALS_MetaDevice_HostedDSP18IsPropertySettableEjRK26AudioObjectPropertyAddressP11HALS_ClientEUb0_E3__1NS_9allocatorIS8_EEFvPK18HALS_MetaSubDeviceEE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E696B390;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZNK25HALS_MetaDevice_HostedDSP18IsPropertySettableEjRK26AudioObjectPropertyAddressP11HALS_ClientEUb0_E3__1NS_9allocatorIS8_EEFvPK18HALS_MetaSubDeviceEE7__cloneEPNS0_6__baseISE_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E696B390;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZNK25HALS_MetaDevice_HostedDSP18IsPropertySettableEjRK26AudioObjectPropertyAddressP11HALS_ClientEUb0_E3__1NS_9allocatorIS8_EEFvPK18HALS_MetaSubDeviceEEclEOSD_(uint64_t result, HALS_MetaSubDevice **a2)
{
  HALS_MetaSubDevice *v2;
  uint64_t v3;
  uint64_t RealDeviceObjectID;
  uint64_t v5;

  v2 = *a2;
  if (*a2)
  {
    v3 = result;
    RealDeviceObjectID = HALS_MetaSubDevice::GetRealDeviceObjectID(*a2);
    result = (*(uint64_t (**)(HALS_MetaSubDevice *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v2 + 88))(v2, RealDeviceObjectID, v3 + 16, *(_QWORD *)(v3 + 32));
    if ((_DWORD)result)
    {
      v5 = HALS_MetaSubDevice::GetRealDeviceObjectID(v2);
      result = (*(uint64_t (**)(HALS_MetaSubDevice *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v2 + 96))(v2, v5, v3 + 16, *(_QWORD *)(v3 + 32));
      **(_BYTE **)(v3 + 8) |= result;
    }
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZNK25HALS_MetaDevice_HostedDSP18IsPropertySettableEjRK26AudioObjectPropertyAddressP11HALS_ClientEUb0_E3__1NS_9allocatorIS8_EEFvPK18HALS_MetaSubDeviceEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZZNK25HALS_MetaDevice_HostedDSP18IsPropertySettableEjRK26AudioObjectPropertyAddressP11HALS_ClientEUb0_E3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZNK25HALS_MetaDevice_HostedDSP18IsPropertySettableEjRK26AudioObjectPropertyAddressP11HALS_ClientEUb0_E3__1NS_9allocatorIS8_EEFvPK18HALS_MetaSubDeviceEE11target_typeEv()
{
  return &_ZTIZZNK25HALS_MetaDevice_HostedDSP18IsPropertySettableEjRK26AudioObjectPropertyAddressP11HALS_ClientEUb0_E3__1;
}

void sub_1B57C2DB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void _ZNSt3__110__function6__funcIZZNK25HALS_MetaDevice_HostedDSP19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_ClientEUb1_E3__2NS_9allocatorISA_EEFvPK18HALS_MetaSubDeviceEED0Ev()
{
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZZNK25HALS_MetaDevice_HostedDSP19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_ClientEUb1_E3__2NS_9allocatorISA_EEFvPK18HALS_MetaSubDeviceEE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E696B410;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZNK25HALS_MetaDevice_HostedDSP19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_ClientEUb1_E3__2NS_9allocatorISA_EEFvPK18HALS_MetaSubDeviceEE7__cloneEPNS0_6__baseISG_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E696B410;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZNK25HALS_MetaDevice_HostedDSP19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_ClientEUb1_E3__2NS_9allocatorISA_EEFvPK18HALS_MetaSubDeviceEEclEOSF_(uint64_t result, HALS_MetaSubDevice **a2)
{
  HALS_MetaSubDevice *v2;
  uint64_t v3;
  uint64_t RealDeviceObjectID;
  uint64_t v5;

  v2 = *a2;
  if (*a2)
  {
    v3 = result;
    RealDeviceObjectID = HALS_MetaSubDevice::GetRealDeviceObjectID(*a2);
    result = (*(uint64_t (**)(HALS_MetaSubDevice *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v2 + 88))(v2, RealDeviceObjectID, v3 + 16, *(_QWORD *)(v3 + 40));
    if ((_DWORD)result)
    {
      if (!**(_DWORD **)(v3 + 8))
      {
        v5 = HALS_MetaSubDevice::GetRealDeviceObjectID(v2);
        result = (*(uint64_t (**)(HALS_MetaSubDevice *, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v2 + 104))(v2, v5, v3 + 16, *(unsigned int *)(v3 + 28), *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40));
        **(_DWORD **)(v3 + 8) = result;
      }
    }
  }
  return result;
}

void sub_1B57C2F10(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t _ZNKSt3__110__function6__funcIZZNK25HALS_MetaDevice_HostedDSP19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_ClientEUb1_E3__2NS_9allocatorISA_EEFvPK18HALS_MetaSubDeviceEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZZNK25HALS_MetaDevice_HostedDSP19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_ClientEUb1_E3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZNK25HALS_MetaDevice_HostedDSP19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_ClientEUb1_E3__2NS_9allocatorISA_EEFvPK18HALS_MetaSubDeviceEE11target_typeEv()
{
  return &_ZTIZZNK25HALS_MetaDevice_HostedDSP19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_ClientEUb1_E3__2;
}

void sub_1B57C3064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void _ZNSt3__110__function6__funcIZZNK25HALS_MetaDevice_HostedDSP15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_ClientEUb2_E3__3NS_9allocatorISC_EEFvPK18HALS_MetaSubDeviceEED0Ev()
{
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZZNK25HALS_MetaDevice_HostedDSP15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_ClientEUb2_E3__3NS_9allocatorISC_EEFvPK18HALS_MetaSubDeviceEE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x48uLL);
  *(_QWORD *)v2 = &off_1E696B490;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZNK25HALS_MetaDevice_HostedDSP15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_ClientEUb2_E3__3NS_9allocatorISC_EEFvPK18HALS_MetaSubDeviceEE7__cloneEPNS0_6__baseISI_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_1E696B490;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZNK25HALS_MetaDevice_HostedDSP15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_ClientEUb2_E3__3NS_9allocatorISC_EEFvPK18HALS_MetaSubDeviceEEclEOSH_(uint64_t result, HALS_MetaSubDevice **a2)
{
  HALS_MetaSubDevice *v2;
  uint64_t v3;
  uint64_t RealDeviceObjectID;
  uint64_t v5;

  v2 = *a2;
  if (*a2)
  {
    v3 = result;
    RealDeviceObjectID = HALS_MetaSubDevice::GetRealDeviceObjectID(*a2);
    result = (*(uint64_t (**)(HALS_MetaSubDevice *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v2 + 88))(v2, RealDeviceObjectID, v3 + 16, *(_QWORD *)(v3 + 64));
    if ((_DWORD)result)
    {
      if (!**(_BYTE **)(v3 + 8))
      {
        v5 = HALS_MetaSubDevice::GetRealDeviceObjectID(v2);
        result = (*(uint64_t (**)(HALS_MetaSubDevice *, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v2 + 112))(v2, v5, v3 + 16, *(unsigned int *)(v3 + 28), *(_QWORD *)(v3 + 32), **(_QWORD **)(v3 + 40), *(unsigned int *)(v3 + 48), *(_QWORD *)(v3 + 56), *(_QWORD *)(v3 + 64));
        **(_BYTE **)(v3 + 8) = 1;
      }
    }
  }
  return result;
}

void sub_1B57C31F0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t _ZNKSt3__110__function6__funcIZZNK25HALS_MetaDevice_HostedDSP15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_ClientEUb2_E3__3NS_9allocatorISC_EEFvPK18HALS_MetaSubDeviceEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZZNK25HALS_MetaDevice_HostedDSP15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_ClientEUb2_E3$_3"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZNK25HALS_MetaDevice_HostedDSP15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_ClientEUb2_E3__3NS_9allocatorISC_EEFvPK18HALS_MetaSubDeviceEE11target_typeEv()
{
  return &_ZTIZZNK25HALS_MetaDevice_HostedDSP15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_ClientEUb2_E3__3;
}

void sub_1B57C33C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void _ZNSt3__110__function6__funcIZZN25HALS_MetaDevice_HostedDSP15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS7_P11HALS_ClientEUb3_E3__4NS_9allocatorISA_EEFvP18HALS_MetaSubDeviceEED0Ev()
{
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZZN25HALS_MetaDevice_HostedDSP15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS7_P11HALS_ClientEUb3_E3__4NS_9allocatorISA_EEFvP18HALS_MetaSubDeviceEE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &off_1E696B510;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZN25HALS_MetaDevice_HostedDSP15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS7_P11HALS_ClientEUb3_E3__4NS_9allocatorISA_EEFvP18HALS_MetaSubDeviceEE7__cloneEPNS0_6__baseISF_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_1E696B510;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZN25HALS_MetaDevice_HostedDSP15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS7_P11HALS_ClientEUb3_E3__4NS_9allocatorISA_EEFvP18HALS_MetaSubDeviceEEclEOSE_(uint64_t result, HALS_MetaSubDevice **a2)
{
  HALS_MetaSubDevice *v2;
  uint64_t v3;
  uint64_t RealDeviceObjectID;
  uint64_t v5;

  v2 = *a2;
  if (*a2)
  {
    v3 = result;
    RealDeviceObjectID = HALS_MetaSubDevice::GetRealDeviceObjectID(*a2);
    result = (*(uint64_t (**)(HALS_MetaSubDevice *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v2 + 96))(v2, RealDeviceObjectID, v3 + 16, *(_QWORD *)(v3 + 56));
    if ((_DWORD)result)
    {
      v5 = HALS_MetaSubDevice::GetRealDeviceObjectID(v2);
      result = (*(uint64_t (**)(HALS_MetaSubDevice *, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v2 + 120))(v2, v5, v3 + 16, *(unsigned int *)(v3 + 28), *(_QWORD *)(v3 + 32), *(unsigned int *)(v3 + 40), *(_QWORD *)(v3 + 48), *(_QWORD *)(v3 + 56));
      **(_BYTE **)(v3 + 8) = 1;
    }
  }
  return result;
}

void sub_1B57C353C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B57C3520);
}

uint64_t _ZNKSt3__110__function6__funcIZZN25HALS_MetaDevice_HostedDSP15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS7_P11HALS_ClientEUb3_E3__4NS_9allocatorISA_EEFvP18HALS_MetaSubDeviceEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZZN25HALS_MetaDevice_HostedDSP15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_ClientEUb3_E3$_4"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN25HALS_MetaDevice_HostedDSP15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS7_P11HALS_ClientEUb3_E3__4NS_9allocatorISA_EEFvP18HALS_MetaSubDeviceEE11target_typeEv()
{
  return &_ZTIZZN25HALS_MetaDevice_HostedDSP15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_ClientEUb3_E3__4;
}

void AMCP::Device::~Device(AMCP::Device *this)
{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = &off_1E696F358;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = &off_1E696F358;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1B5E50688);
}

{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = &off_1E696F358;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

uint64_t AMCP::Device::Device(uint64_t a1, uint64_t a2, unsigned int a3)
{
  AMCP::Object *v4;
  uint64_t v5;
  NSObject *v7;
  _opaque_pthread_t *v8;
  mach_port_t v9;
  NSObject **v10;
  __int16 v11;
  char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  const char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = (AMCP::Object *)AMCP::Clock::Clock(a1, a2, a3);
  *(_QWORD *)v4 = &off_1E696B5A0;
  v5 = AMCP::Object::constructed_correct_class(v4, (AMCP *)0x61646576);
  if ((v5 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
    v7 = *v10;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v10);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = pthread_self();
      v9 = pthread_mach_thread_np(v8);
      LODWORD(v10) = 67109890;
      HIDWORD(v10) = v9;
      v11 = 2080;
      v12 = "Device.cpp";
      v13 = 1024;
      v14 = 27;
      v15 = 2080;
      v16 = "constructed_correct_class(k_class_id_device)";
      _os_log_error_impl(&dword_1B57BA000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s the core is not of the proper class", (uint8_t *)&v10, 0x22u);
    }
    abort();
  }
  return a1;
}

void sub_1B57C3734(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  *v1 = &off_1E696F358;
  v3 = (std::__shared_weak_count *)v1[3];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Device::Device(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_mutex_base *v5;
  uint64_t v6;
  int v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v17;
  _opaque_pthread_t *v18;
  mach_port_t v19;
  _QWORD v20[2];
  uint8_t buf[8];
  _BYTE v22[10];
  __int16 v23;
  int v24;
  _QWORD v25[3];

  v25[2] = *MEMORY[0x1E0C80C00];
  v5 = *(std::__shared_mutex_base **)(**(_QWORD **)a2 + 16);
  *(_QWORD *)buf = &off_1E696B5C0;
  *(_QWORD *)v22 = a3;
  v25[0] = buf;
  AMCP::Core::Broker::fetch_first_core_if (v20, v5, (uint64_t)buf);
  *(_QWORD *)a1 = &off_1E696F358;
  v6 = v20[0];
  if (v20[0])
    v7 = *(_DWORD *)v20[0];
  else
    v7 = 0;
  *(_DWORD *)(a1 + 8) = v7;
  v8 = (std::__shared_weak_count *)v20[1];
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v8;
  if (v8)
  {
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
    *(_QWORD *)(a1 + 32) = a2;
    *(_QWORD *)a1 = &off_1E6974888;
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 32) = a2;
    *(_QWORD *)a1 = &off_1E6974888;
  }
  v13 = (uint8_t *)v25[0];
  if ((uint8_t *)v25[0] == buf)
  {
    v14 = 4;
    v13 = buf;
  }
  else
  {
    if (!v25[0])
      goto LABEL_17;
    v14 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v13 + 8 * v14))();
LABEL_17:
  *(_QWORD *)a1 = &off_1E696B5A0;
  v15 = AMCP::Object::constructed_correct_class((AMCP::Object *)a1, (AMCP *)0x61646576);
  if ((v15 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v15);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v17 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      v18 = pthread_self();
      v19 = pthread_mach_thread_np(v18);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v19;
      *(_WORD *)v22 = 2080;
      *(_QWORD *)&v22[2] = "Device.cpp";
      v23 = 1024;
      v24 = 43;
      LOWORD(v25[0]) = 2080;
      *(_QWORD *)((char *)v25 + 2) = "constructed_correct_class(k_class_id_device)";
      _os_log_error_impl(&dword_1B57BA000, v17, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s the core is not of the proper class", buf, 0x22u);
    }
    abort();
  }
  return a1;
}

void sub_1B57C3988(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  std::__shared_weak_count *v4;

  *v1 = v2;
  v4 = (std::__shared_weak_count *)v1[3];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<AMCP::Device::Device(AMCP::System_Context &,applesauce::CF::StringRef)::$_0,std::allocator<AMCP::Device::Device(AMCP::System_Context &,applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Device::Device(AMCP::System_Context &,applesauce::CF::StringRef)::$_0,std::allocator<AMCP::Device::Device(AMCP::System_Context &,applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E696B5C0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::Device::Device(AMCP::System_Context &,applesauce::CF::StringRef)::$_0,std::allocator<AMCP::Device::Device(AMCP::System_Context &,applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E696B5C0;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<AMCP::Device::Device(AMCP::System_Context &,applesauce::CF::StringRef)::$_0,std::allocator<AMCP::Device::Device(AMCP::System_Context &,applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::operator()(uint64_t a1, AMCP::Core::Core **a2)
{
  unsigned int simple_required;
  _BOOL8 v5;
  CFTypeRef cf;

  simple_required = AMCP::Core::Core::get_simple_required_property<1650682995u>(*a2);
  if (!AMCP::is_base_of((AMCP *)0x61646576, simple_required))
    return 0;
  AMCP::Core::Core::get_simple_required_property<1969841184u>(&cf, *a2);
  v5 = applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(**(const __CFString ***)(a1 + 8), (const __CFString **)&cf) == kCFCompareEqualTo;
  if (cf)
    CFRelease(cf);
  return v5;
}

uint64_t std::__function::__func<AMCP::Device::Device(AMCP::System_Context &,applesauce::CF::StringRef)::$_0,std::allocator<AMCP::Device::Device(AMCP::System_Context &,applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP6DeviceC1ERNS_14System_ContextEN10applesauce2CF9StringRefEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Device::Device(AMCP::System_Context &,applesauce::CF::StringRef)::$_0,std::allocator<AMCP::Device::Device(AMCP::System_Context &,applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::target_type()
{
}

unint64_t AMCP::Core::Core::get_simple_required_property<1650682995u>(AMCP::Core::Core *a1)
{
  unint64_t result;
  NSObject *v2;
  _opaque_pthread_t *v3;
  mach_port_t v4;
  void *__p[2];
  char v6;
  _BYTE buf[10];
  char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  void **v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  strcpy(buf, "slcbbolg");
  buf[9] = 0;
  LOWORD(v8) = 0;
  result = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>(a1, (const AMCP::Address *)buf);
  if (!HIDWORD(result))
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)result);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v2 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      v3 = pthread_self();
      v4 = pthread_mach_thread_np(v3);
      v6 = 4;
      strcpy((char *)__p, "bcls");
      *(_DWORD *)buf = 67110658;
      *(_DWORD *)&buf[4] = v4;
      *(_WORD *)&buf[8] = 2080;
      v8 = "Core.h";
      v9 = 1024;
      v10 = 391;
      v11 = 2080;
      v12 = "optional_value.operator BOOL() == true";
      v13 = 2080;
      v14 = __p;
      v15 = 1024;
      v16 = 1735159650;
      v17 = 1024;
      v18 = 0;
      _os_log_error_impl(&dword_1B57BA000, v2, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
      if (v6 < 0)
        operator delete(__p[0]);
    }
    abort();
  }
  return result;
}

void sub_1B57C3C44(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t AMCP::is_base_of(AMCP *this, unsigned int a2)
{
  uint64_t result;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *__p;
  char v10;

  if (!a2)
    return 0;
  result = 1;
  if ((_DWORD)this && (_DWORD)this != a2)
  {
    AMCP::get_class_traits((AMCP *)&v6, a2);
    v5 = HIDWORD(v6);
    if (v10 < 0)
      operator delete(__p);
    if (v7)
    {
      v8 = v7;
      operator delete(v7);
    }
    return AMCP::is_base_of(this, v5, v4);
  }
  return result;
}

uint64_t AMCP::Core::Core::get_simple_required_property<1969841184u>(_QWORD *a1, AMCP::Core::Core *a2)
{
  AMCP::Log::Scope_Registry *v3;
  CFTypeRef v4;
  NSObject *v6;
  _opaque_pthread_t *v7;
  mach_port_t v8;
  void *__p[2];
  char v10;
  CFTypeRef cf;
  char v12;
  _BYTE buf[10];
  char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  void **v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  strcpy(buf, " diubolg");
  buf[9] = 0;
  LOWORD(v14) = 0;
  AMCP::Core::Core::get_typed_property_value<applesauce::CF::StringRef,std::enable_if<true,void>>(&cf, a2, (const AMCP::Address *)buf);
  if (!v12)
  {
    AMCP::Log::Scope_Registry::get(v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v6 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v7 = pthread_self();
      v8 = pthread_mach_thread_np(v7);
      v10 = 4;
      strcpy((char *)__p, "uid ");
      *(_DWORD *)buf = 67110658;
      *(_DWORD *)&buf[4] = v8;
      *(_WORD *)&buf[8] = 2080;
      v14 = "Core.h";
      v15 = 1024;
      v16 = 391;
      v17 = 2080;
      v18 = "optional_value.operator BOOL() == true";
      v19 = 2080;
      v20 = __p;
      v21 = 1024;
      v22 = 1735159650;
      v23 = 1024;
      v24 = 0;
      _os_log_error_impl(&dword_1B57BA000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
      if (v10 < 0)
        operator delete(__p[0]);
    }
    abort();
  }
  v4 = cf;
  if (cf)
    CFRetain(cf);
  *a1 = v4;
  return std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
}

void sub_1B57C3E58(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

CFComparisonResult applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(const __CFString *cf, const __CFString **a2)
{
  const __CFString *v4;
  CFComparisonResult v5;

  if (cf)
  {
    CFRetain(cf);
    v4 = *a2;
    if (!v4)
    {
      v5 = kCFCompareGreaterThan;
LABEL_9:
      CFRelease(cf);
      return v5;
    }
  }
  else
  {
    v4 = *a2;
    if (!*a2)
      return 0;
  }
  CFRetain(v4);
  if (cf)
    v5 = CFStringCompare(cf, v4, 0);
  else
    v5 = kCFCompareLessThan;
  CFRelease(v4);
  if (cf)
    goto LABEL_9;
  return v5;
}

void AMCP::Core::Core::get_typed_property_value<applesauce::CF::StringRef,std::enable_if<true,void>>(_BYTE *a1, AMCP::Core::Core *a2, const AMCP::Address *a3)
{
  _QWORD *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  _QWORD v14[4];
  void (*v15)(_QWORD, _QWORD *, _QWORD, _QWORD);
  _QWORD *v16;
  std::__shared_weak_count *v17;

  if (!AMCP::Core::Core::has_property(a2, a3))
  {
LABEL_16:
    *a1 = 0;
    a1[8] = 0;
    return;
  }
  AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v16, (int8x8_t *)a2, (unsigned int *)a3);
  v6 = v16;
  if (!v16)
    goto LABEL_9;
  v7 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::StringRef ()(void)>>();
  if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v6, v7))
  {
    AMCP::Core::Operation::call_function<applesauce::CF::StringRef>((uint64_t)v14, v6);
    v8 = 0;
    *(_QWORD *)a1 = v14[0];
    a1[8] = 1;
    goto LABEL_10;
  }
  v9 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v6, v9))
  {
    AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)v14, v6);
    AMCP::Thing::convert_to<applesauce::CF::StringRef>(&v13, (uint64_t)v14);
    *(_QWORD *)a1 = v13;
    a1[8] = 1;
    if (v15)
      v15(0, v14, 0, 0);
    v8 = 0;
  }
  else
  {
LABEL_9:
    v8 = 1;
  }
LABEL_10:
  v10 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v8)
    goto LABEL_16;
}

uint64_t std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  const void *v2;

  if (*(_BYTE *)(a1 + 8))
  {
    v2 = *(const void **)a1;
    if (*(_QWORD *)a1)
      CFRelease(v2);
  }
  return a1;
}

uint64_t AMCP::Core::Core::has_property(AMCP::Core::Core *this, const AMCP::Address *a2)
{
  uint64_t v4;
  unint64_t Has_Property;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  NSObject *v11;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  AMCP::Log::Scope_Registry *v14;
  _BYTE v15[10];
  __int16 v16;
  int v17;
  __int16 v18;
  const char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)a2 == 707406378 || *((_DWORD *)a2 + 1) == 707406378 || *((_DWORD *)a2 + 2) == -1)
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v14, "com.apple.coreaudio", "AMCP");
    v11 = *(NSObject **)v14;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v14);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v12 = pthread_self();
      v13 = pthread_mach_thread_np(v12);
      LODWORD(v14) = 67109890;
      HIDWORD(v14) = v13;
      *(_WORD *)v15 = 2080;
      *(_QWORD *)&v15[2] = "Core.h";
      v16 = 1024;
      v17 = 224;
      v18 = 2080;
      v19 = "!in_address.has_wildcards()";
      _os_log_error_impl(&dword_1B57BA000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s ", (uint8_t *)&v14, 0x22u);
    }
    abort();
  }
  AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v14, (int8x8_t *)this, (unsigned int *)a2);
  v4 = (uint64_t)v14;
  if (v14)
  {
    Has_Property = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
    if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>((_QWORD *)v4, Has_Property))
    {
      v4 = AMCP::Core::Operation::call_function<BOOL,AMCP::Core::Has_Property_Function>((_QWORD *)v4);
    }
    else
    {
      v6 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
      v4 = std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>((_QWORD *)v4, v6) != 0;
    }
  }
  v7 = *(std::__shared_weak_count **)v15;
  if (*(_QWORD *)v15)
  {
    v8 = (unint64_t *)(*(_QWORD *)v15 + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v4;
}

void sub_1B57C423C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t AMCP::Core::Core::find_operation(AMCP::Core::Core *this, int8x8_t *a2, unsigned int *a3)
{
  int8x8_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  uint8x8_t v11;
  uint64_t v12;
  uint64_t **v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  int8x8_t *v20;
  char v21;

  v20 = a2 + 6;
  v21 = 1;
  caulk::concurrent::shared_spin_lock::lock_shared((unsigned int *)&a2[6]);
  v6 = a2[2];
  if (!*(_QWORD *)&v6)
    goto LABEL_18;
  v7 = *a3;
  v8 = a3[1];
  v9 = a3[2];
  v10 = v8 & 0xFF000000 | (unint64_t)(v7 << 32) | *(_QWORD *)&v9 & 0xFFFFFFLL;
  v11 = (uint8x8_t)vcnt_s8(v6);
  v11.i16[0] = vaddlv_u8(v11);
  if (v11.u32[0] > 1uLL)
  {
    v12 = v8 & 0xFF000000 | (unint64_t)(v7 << 32) | *(_QWORD *)&v9 & 0xFFFFFFLL;
    if (v10 >= *(_QWORD *)&v6)
      v12 = v10 % *(_QWORD *)&v6;
  }
  else
  {
    v12 = v10 & (*(_QWORD *)&v6 - 1);
  }
  v13 = *(uint64_t ***)(*(_QWORD *)&a2[1] + 8 * v12);
  if (!v13 || (v14 = *v13) == 0)
  {
LABEL_18:
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
    return std::shared_lock<caulk::concurrent::shared_spin_lock>::~shared_lock[abi:ne180100]((uint64_t)&v20);
  }
  while (1)
  {
    v15 = v14[1];
    if (v10 == v15)
      break;
    if (v11.u32[0] > 1uLL)
    {
      if (v15 >= *(_QWORD *)&v6)
        v15 %= *(_QWORD *)&v6;
    }
    else
    {
      v15 &= *(_QWORD *)&v6 - 1;
    }
    if (v15 != v12)
      goto LABEL_18;
LABEL_17:
    v14 = (uint64_t *)*v14;
    if (!v14)
      goto LABEL_18;
  }
  if (v14[2] != __PAIR64__(v8, v7) || *((_DWORD *)v14 + 6) != v9)
    goto LABEL_17;
  v17 = v14[5];
  *(_QWORD *)this = v14[4];
  *((_QWORD *)this + 1) = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  return std::shared_lock<caulk::concurrent::shared_spin_lock>::~shared_lock[abi:ne180100]((uint64_t)&v20);
}

uint64_t AMCP::Core::Operation::call_function<applesauce::CF::StringRef>(uint64_t a1, _QWORD *a2)
{
  unint64_t v3;
  AMCP::Log::Scope_Registry *v4;
  AMCP::Log::Scope_Registry *v5;
  uint64_t v6;
  NSObject *v8;
  _opaque_pthread_t *v9;
  mach_port_t v10;
  void *v11;
  NSObject *v12;
  _opaque_pthread_t *v13;
  mach_port_t v14;
  void *exception;
  __int128 v16;
  uint64_t v17;
  uint64_t (**v18)();
  __int128 v19;
  uint64_t v20;
  std::string v21;
  std::runtime_error v22;
  std::runtime_error v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  char v29;
  uint8_t buf[8];
  __int16 v31;
  char *v32;
  __int16 v33;
  int v34;
  const char *v35;
  const char *v36;
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v3 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::StringRef ()(void)>>();
  v4 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(a2, v3);
  if (!v4)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v12 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = pthread_self();
      v14 = pthread_mach_thread_np(v13);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v14;
      v31 = 2080;
      v32 = "Operation.h";
      v33 = 1024;
      v34 = 154;
      _os_log_error_impl(&dword_1B57BA000, v12, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v29);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v21);
    std::runtime_error::runtime_error(&v22, &v21);
    std::runtime_error::runtime_error(&v23, &v22);
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = -1;
    v23.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v24 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v23);
    v35 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = applesauce::CF::Strin"
          "gRef, Argument_Types = <>]";
    v36 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v37 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v16);
    v19 = v16;
    v20 = v17;
    v16 = 0uLL;
    v17 = 0;
    v18 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v18);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v5 = v4;
  if (!*((_QWORD *)v4 + 7)
    || (*(_QWORD *)buf = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::StringRef ()(void)>>(),
        (v4 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, _QWORD, uint8_t *))v5 + 7))(4, (uint64_t)v5 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v8 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v9 = pthread_self();
      v10 = pthread_mach_thread_np(v9);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v10;
      v31 = 2080;
      v32 = "Operation.h";
      v33 = 1024;
      v34 = 161;
      _os_log_error_impl(&dword_1B57BA000, v8, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v29);
    v11 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v21);
    std::runtime_error::runtime_error(&v22, &v21);
    std::runtime_error::runtime_error(&v23, &v22);
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = -1;
    v23.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v24 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v23);
    v35 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = applesauce::CF::Strin"
          "gRef, Argument_Types = <>]";
    v36 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v37 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v16);
    v19 = v16;
    v20 = v17;
    v16 = 0uLL;
    v17 = 0;
    v18 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v18);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v11, (uint64_t)buf);
  }
  v6 = *((_QWORD *)v4 + 3);
  if (!v6)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6);
}

void sub_1B57C4770(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,std::runtime_error a23,uint64_t a24,uint64_t a25)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Core::Operation::call_function<AMCP::Thing>(uint64_t a1, _QWORD *a2)
{
  unint64_t v3;
  AMCP::Log::Scope_Registry *v4;
  AMCP::Log::Scope_Registry *v5;
  uint64_t v6;
  NSObject *v8;
  _opaque_pthread_t *v9;
  mach_port_t v10;
  void *v11;
  NSObject *v12;
  _opaque_pthread_t *v13;
  mach_port_t v14;
  void *exception;
  __int128 v16;
  uint64_t v17;
  uint64_t (**v18)();
  __int128 v19;
  uint64_t v20;
  std::string v21;
  std::runtime_error v22;
  std::runtime_error v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  char v29;
  uint8_t buf[8];
  __int16 v31;
  char *v32;
  __int16 v33;
  int v34;
  const char *v35;
  const char *v36;
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v3 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  v4 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(a2, v3);
  if (!v4)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v12 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = pthread_self();
      v14 = pthread_mach_thread_np(v13);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v14;
      v31 = 2080;
      v32 = "Operation.h";
      v33 = 1024;
      v34 = 154;
      _os_log_error_impl(&dword_1B57BA000, v12, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v29);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v21);
    std::runtime_error::runtime_error(&v22, &v21);
    std::runtime_error::runtime_error(&v23, &v22);
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = -1;
    v23.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v24 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v23);
    v35 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = AMCP::Thing, Argument_Types = <>]";
    v36 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v37 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v16);
    v19 = v16;
    v20 = v17;
    v16 = 0uLL;
    v17 = 0;
    v18 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v18);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v5 = v4;
  if (!*((_QWORD *)v4 + 7)
    || (*(_QWORD *)buf = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>(),
        (v4 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, _QWORD, uint8_t *))v5 + 7))(4, (uint64_t)v5 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v8 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v9 = pthread_self();
      v10 = pthread_mach_thread_np(v9);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v10;
      v31 = 2080;
      v32 = "Operation.h";
      v33 = 1024;
      v34 = 161;
      _os_log_error_impl(&dword_1B57BA000, v8, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v29);
    v11 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v21);
    std::runtime_error::runtime_error(&v22, &v21);
    std::runtime_error::runtime_error(&v23, &v22);
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = -1;
    v23.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v24 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v23);
    v35 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = AMCP::Thing, Argument_Types = <>]";
    v36 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v37 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v16);
    v19 = v16;
    v20 = v17;
    v16 = 0uLL;
    v17 = 0;
    v18 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v18);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v11, (uint64_t)buf);
  }
  v6 = *((_QWORD *)v4 + 3);
  if (!v6)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6);
}

void sub_1B57C4CD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,std::runtime_error a23,uint64_t a24,uint64_t a25)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

CFTypeRef *AMCP::Thing::convert_to<applesauce::CF::StringRef>(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, _QWORD, _QWORD);
  CFTypeRef *result;
  CFTypeRef v7;
  CFTypeRef v8;
  std::bad_cast *exception;
  std::bad_cast *v10;
  std::bad_cast *v11;
  std::bad_cast *v12;
  std::bad_cast *v13;
  std::bad_cast *v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[2];
  uint64_t (*v18)(uint64_t, _OWORD *, _QWORD, uint64_t *);
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, _QWORD, _QWORD);

  if (!*(_QWORD *)(a2 + 32))
    goto LABEL_16;
  v4 = AMCP::Implementation::get_type_marker<applesauce::CF::StringRef>();
  v5 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a2 + 32);
  v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))v4)
  {
    v19 = v4;
    result = (CFTypeRef *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (result)
    {
      v7 = *result;
      if (*result)
        result = (CFTypeRef *)CFRetain(*result);
      *a1 = v7;
      return result;
    }
LABEL_16:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v16 = AMCP::Implementation::get_type_marker<applesauce::CF::StringRef>();
  memset(v17, 0, sizeof(v17));
  v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v15 = v4;
  result = (CFTypeRef *)v18(4, v17, 0, &v15);
  if (!result)
  {
    v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v8 = *result;
  if (*result)
    result = (CFTypeRef *)CFRetain(*result);
  *a1 = v8;
  if (v18)
    return (CFTypeRef *)v18(0, v17, 0, 0);
  return result;
}

void sub_1B57C4FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::get_type_marker<applesauce::CF::StringRef>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return v1[163];
}

void AMCP::Thing::~Thing(AMCP::Thing *this)
{
  void (*v1)(_QWORD, AMCP::Thing *, _QWORD, _QWORD);

  v1 = (void (*)(_QWORD, AMCP::Thing *, _QWORD, _QWORD))*((_QWORD *)this + 4);
  if (v1)
    v1(0, this, 0, 0);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return v1[78];
}

_QWORD *std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(_QWORD *a1, unint64_t a2)
{
  int8x8_t v2;
  uint8x8_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *result;
  unint64_t v7;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (*(_QWORD *)&v2 <= a2)
      v4 = a2 % *(_QWORD *)&v2;
  }
  else
  {
    v4 = (*(_QWORD *)&v2 - 1) & a2;
  }
  v5 = *(_QWORD **)(*a1 + 8 * v4);
  if (!v5)
    return 0;
  result = (_QWORD *)*v5;
  if (*v5)
  {
    do
    {
      v7 = result[1];
      if (v7 == a2)
      {
        if (result[2] == a2)
          return result;
      }
      else
      {
        if (v3.u32[0] > 1uLL)
        {
          if (v7 >= *(_QWORD *)&v2)
            v7 %= *(_QWORD *)&v2;
        }
        else
        {
          v7 &= *(_QWORD *)&v2 - 1;
        }
        if (v7 != v4)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

AMCP::Utility::With_Realtime_Disabled *AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled(AMCP::Utility::With_Realtime_Disabled *this)
{
  _opaque_pthread_t *v2;
  _opaque_pthread_t *v3;
  _BOOL4 is_thread_configured_for_realtime;
  _opaque_pthread_t *v5;
  _opaque_pthread_t *v6;

  *(_BYTE *)this = 0;
  v2 = pthread_self();
  is_thread_configured_for_realtime = AMCP::Utility::is_thread_configured_for_realtime(v2, v3);
  *(_BYTE *)this = is_thread_configured_for_realtime;
  if (is_thread_configured_for_realtime)
  {
    v5 = pthread_self();
    AMCP::Utility::configure_thread_for_normal_priority(v5, v6);
  }
  return this;
}

void caulk::make_string(caulk *this@<X0>, uint64_t a2@<X8>, ...)
{
  int v5;
  int v6;
  char *v7;
  size_t v8;
  int v9;
  va_list va;

  va_start(va, a2);
  v5 = vsnprintf(0, 0, (const char *)this, va);
  if (v5 <= 0)
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    std::string::resize((std::string *)a2, (v5 + 1), 0);
    v6 = *(char *)(a2 + 23);
    if (v6 >= 0)
      v7 = (char *)a2;
    else
      v7 = *(char **)a2;
    if (v6 >= 0)
      v8 = *(unsigned __int8 *)(a2 + 23);
    else
      v8 = *(_QWORD *)(a2 + 8);
    v9 = vsnprintf(v7, v8, (const char *)this, va);
    std::string::resize((std::string *)a2, v9, 0);
  }
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)(a1 + 56) = &unk_1E69A1F88;
  std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 16) = &unk_1E69A2000;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)a1 = &off_1E69A1EE8;
  *(_QWORD *)(a1 + 16) = &unk_1E69A1F20;
  *(_QWORD *)(a1 + 56) = &unk_1E69A1F58;
  boost::exception_detail::copy_boost_exception(a1 + 16, a2 + 16);
  return a1;
}

{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)(a1 + 56) = &unk_1E69A1F88;
  std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = &unk_1E69A2000;
  *(_QWORD *)(a1 + 24) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)a1 = &off_1E69A1EE8;
  *(_QWORD *)(a1 + 16) = &unk_1E69A1F20;
  *(_QWORD *)(a1 + 56) = &unk_1E69A1F58;
  return a1;
}

void sub_1B57C534C(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

char **applesauce::backtrace::snapshot_N<64>::snapshot_N(char **a1)
{
  int v2;

  std::vector<void *>::vector(a1);
  v2 = backtrace((void **)*a1, (unint64_t)(a1[1] - *a1) >> 3);
  std::vector<void *>::resize(a1, v2);
  return a1;
}

uint64_t boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (**v6)(boost::exception_detail::error_info_container_impl *__hidden, const char *);
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  void *v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  unsigned int *v15;

  v4 = operator new();
  *(_QWORD *)v4 = off_1E69A20A0;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  boost::shared_ptr<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::shared_ptr<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>(&v14, v4);
  v5 = *(_QWORD *)(a1 + 24);
  if (!v5)
  {
    v5 = operator new();
    v6 = &off_1E69A2168;
    *(_QWORD *)(v5 + 24) = 0;
    *(_QWORD *)(v5 + 32) = 0;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)v5 = &off_1E69A2168;
    *(_QWORD *)(v5 + 8) = v5 + 16;
    *(_QWORD *)(v5 + 40) = 0;
    *(_QWORD *)(v5 + 48) = 0;
    *(_DWORD *)(v5 + 56) = 0;
    v7 = *(_QWORD *)(a1 + 24);
    if (v7)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
      v6 = *(uint64_t (***)(boost::exception_detail::error_info_container_impl *__hidden, const char *))v5;
    }
    *(_QWORD *)(a1 + 24) = v5;
    ((void (*)(uint64_t))v6[3])(v5);
  }
  v12 = v14;
  v13 = v15;
  if (v15)
  {
    v8 = v15 + 2;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  (*(void (**)(uint64_t, uint64_t *, void **))(*(_QWORD *)v5 + 16))(v5, &v12, &v11);
  boost::detail::shared_count::~shared_count(&v13);
  boost::detail::shared_count::~shared_count(&v15);
  return a1;
}

void sub_1B57C5504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, unsigned int *a14)
{
  unsigned int **v14;

  boost::detail::shared_count::~shared_count(v14);
  boost::detail::shared_count::~shared_count(&a14);
  _Unwind_Resume(a1);
}

void sub_1B57C55AC(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &unk_1E69A2000;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
}

{
  *(_QWORD *)(a1 + 16) = &unk_1E69A2000;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
  JUMPOUT(0x1B5E50688);
}

void AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled(AMCP::Utility::With_Realtime_Disabled *this)
{
  _opaque_pthread_t *v1;

  if (*(_BYTE *)this)
  {
    v1 = pthread_self();
    AMCP::Utility::configure_thread_for_realtime(v1, (_opaque_pthread_t *)0x880DE, 0);
  }
}

void sub_1B57C5630(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B57C5620);
}

uint64_t *boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    *a1 = 0;
  return a1;
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone(uint64_t a1)
{
  uint64_t v2;
  std::runtime_error *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = operator new();
  *(_QWORD *)(v2 + 56) = &unk_1E69A1F88;
  v3 = std::runtime_error::runtime_error((std::runtime_error *)v2, (const std::runtime_error *)a1);
  v3[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
  v4 = (uint64_t)&v3[1];
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v2 + 24) = v5;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  *(_OWORD *)(v2 + 32) = *(_OWORD *)(a1 + 32);
  *(_DWORD *)(v2 + 48) = *(_DWORD *)(a1 + 48);
  *(_QWORD *)v2 = &off_1E69A1EE8;
  *(_QWORD *)(v2 + 16) = &unk_1E69A1F20;
  *(_QWORD *)(v2 + 56) = &unk_1E69A1F58;
  boost::exception_detail::copy_boost_exception(v4, a1 + 16);
  return v2 + *(_QWORD *)(*(_QWORD *)v2 - 24);
}

void sub_1B57C5794(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  MEMORY[0x1B5E50688]();
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, a1);
}

void sub_1B57C580C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl(_QWORD *a1)
{
  std::runtime_error *v1;

  v1 = (std::runtime_error *)(a1 - 2);
  *a1 = &unk_1E69A2000;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::runtime_error::~runtime_error(v1);
}

void `non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl(uint64_t a1)
{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl(a1 - 16);
}

uint64_t `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone(_QWORD *a1)
{
  return boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
}

void `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::rethrow(_QWORD *a1)
{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::rethrow((uint64_t)a1 + *(_QWORD *)(*a1 - 32));
}

void `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 40);
  *((_QWORD *)v1 + 2) = &unk_1E69A2000;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)v1 + 3);
  std::runtime_error::~runtime_error((std::runtime_error *)v1);
}

{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl((uint64_t)a1 + *(_QWORD *)(*a1 - 40));
}

uint64_t boost::exception_detail::copy_boost_exception(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v4 + 40))(&v7);
    v5 = v7;
    if (v7)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    }
  }
  else
  {
    v5 = 0;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  result = *(_QWORD *)(a1 + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  *(_QWORD *)(a1 + 8) = v5;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
  }
  return result;
}

void sub_1B57C5998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 32))(a10);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
  _Unwind_Resume(exception_object);
}

_QWORD *boost::shared_ptr<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::shared_ptr<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  unsigned int *v5;
  unsigned int *v7;

  *a1 = a2;
  a1[1] = 0;
  v4 = (_QWORD *)operator new();
  v4[1] = 0x100000001;
  *v4 = &off_1E69A20F8;
  v4[2] = a2;
  v5 = (unsigned int *)a1[1];
  a1[1] = v4;
  v7 = v5;
  boost::detail::shared_count::~shared_count(&v7);
  return a1;
}

void sub_1B57C5A78(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  __cxa_rethrow();
}

void sub_1B57C5A98(_Unwind_Exception *a1)
{
  unsigned int **v1;

  __cxa_end_catch();
  boost::detail::shared_count::~shared_count(v1);
  _Unwind_Resume(a1);
}

void boost::detail::shared_count::~shared_count(unsigned int **this)
{
  unsigned int *v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v1 = *this;
  if (*this)
  {
    v2 = v1 + 2;
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v1 + 16))(v1);
      v5 = v1 + 3;
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
        (*(void (**)(unsigned int *))(*(_QWORD *)v1 + 24))(v1);
    }
  }
}

uint64_t boost::exception_detail::error_info_container_impl::diagnostic_information(boost::exception_detail::error_info_container_impl *this, const char *a2)
{
  size_t v4;
  boost::exception_detail::error_info_container_impl *v5;
  void (***v6)(void **__return_ptr);
  void **v7;
  uint64_t v8;
  boost::exception_detail::error_info_container_impl *v9;
  boost::exception_detail::error_info_container_impl *v10;
  BOOL v11;
  uint64_t v12;
  __int128 v13;
  uint64_t result;
  void *__p[2];
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[10];
  char v19;
  uint64_t v20;

  if (a2)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v17);
    v4 = strlen(a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)a2, v4);
    v5 = (boost::exception_detail::error_info_container_impl *)*((_QWORD *)this + 1);
    if (v5 != (boost::exception_detail::error_info_container_impl *)((char *)this + 16))
    {
      do
      {
        v6 = (void (***)(void **__return_ptr))*((_QWORD *)v5 + 5);
        if (!v6)
          __assert_rtn("operator*", "shared_ptr.hpp", 780, "px != 0");
        (**v6)(__p);
        if (v16 >= 0)
          v7 = __p;
        else
          v7 = (void **)__p[0];
        if (v16 >= 0)
          v8 = HIBYTE(v16);
        else
          v8 = (uint64_t)__p[1];
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)v7, v8);
        if (SHIBYTE(v16) < 0)
          operator delete(__p[0]);
        v9 = (boost::exception_detail::error_info_container_impl *)*((_QWORD *)v5 + 1);
        if (v9)
        {
          do
          {
            v10 = v9;
            v9 = *(boost::exception_detail::error_info_container_impl **)v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            v10 = (boost::exception_detail::error_info_container_impl *)*((_QWORD *)v5 + 2);
            v11 = *(_QWORD *)v10 == (_QWORD)v5;
            v5 = v10;
          }
          while (!v11);
        }
        v5 = v10;
      }
      while (v10 != (boost::exception_detail::error_info_container_impl *)((char *)this + 16));
    }
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>(__p, (uint64_t)v18);
    v12 = v16;
    v13 = *(_OWORD *)__p;
    *(_OWORD *)__p = *((_OWORD *)this + 2);
    v16 = *((_QWORD *)this + 6);
    *((_OWORD *)this + 2) = v13;
    *((_QWORD *)this + 6) = v12;
    if (SHIBYTE(v16) < 0)
      operator delete(__p[0]);
    v17 = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)&v18[-1] + *(_QWORD *)(v17 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v18[0] = MEMORY[0x1E0DE4FB8] + 16;
    if (v19 < 0)
      operator delete((void *)v18[8]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1B5E50598](&v20);
  }
  result = (uint64_t)this + 32;
  if (*((char *)this + 55) < 0)
    return *(_QWORD *)result;
  return result;
}

void sub_1B57C5CF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::error_info_container_impl::get@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;

  v4 = (_QWORD *)(result + 16);
  v5 = *(_QWORD **)(result + 16);
  if (!v5)
    goto LABEL_12;
  v6 = *a2;
  v7 = (_QWORD *)(result + 16);
  do
  {
    v8 = v5[4];
    if (v8 == v6)
    {
      v7 = v5;
    }
    else
    {
      result = strcmp((const char *)(*(_QWORD *)(v8 + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(v6 + 8) & 0x7FFFFFFFFFFFFFFFLL));
      if ((int)result < 0)
        ++v5;
      else
        v7 = v5;
    }
    v5 = (_QWORD *)*v5;
  }
  while (v5);
  if (v4 != v7
    && ((v9 = v7[4], v6 == v9)
     || (result = strcmp((const char *)(*(_QWORD *)(v6 + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(v9 + 8) & 0x7FFFFFFFFFFFFFFFLL)), (result & 0x80000000) == 0)))
  {
    v10 = v7[6];
    *a3 = v7[5];
    a3[1] = v10;
    if (v10)
    {
      v11 = (unsigned int *)(v10 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
  }
  else
  {
LABEL_12:
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

void boost::exception_detail::error_info_container_impl::set(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t **v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  __int128 v15;
  __int128 v16;
  char v17;
  uint64_t v18;

  if (!*a2)
    __assert_rtn("set", "info.hpp", 77, "x");
  v6 = (uint64_t **)(a1 + 8);
  v7 = (uint64_t **)std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__find_equal<boost::exception_detail::type_info_>(a1 + 8, &v18, *a3);
  v8 = *v7;
  if (!*v7)
  {
    v9 = v7;
    v8 = (uint64_t *)operator new(0x38uLL);
    *((_QWORD *)&v16 + 1) = a1 + 16;
    v10 = *a3;
    v8[5] = 0;
    v8[6] = 0;
    v8[4] = v10;
    v17 = 1;
    std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__insert_node_at(v6, v18, v9, v8);
    *(_QWORD *)&v16 = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v16);
  }
  v12 = *a2;
  v11 = a2[1];
  if (v11)
  {
    v13 = (unsigned int *)(v11 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = *(_OWORD *)(v8 + 5);
  v8[5] = v12;
  v8[6] = v11;
  v16 = v15;
  boost::detail::shared_count::~shared_count((unsigned int **)&v16 + 1);
  if (*(char *)(a1 + 55) < 0)
  {
    **(_BYTE **)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 32) = 0;
    *(_BYTE *)(a1 + 55) = 0;
  }
}

uint64_t boost::exception_detail::error_info_container_impl::add_ref(uint64_t this)
{
  ++*(_DWORD *)(this + 56);
  return this;
}

BOOL boost::exception_detail::error_info_container_impl::release(boost::exception_detail::error_info_container_impl *this)
{
  int v1;

  v1 = *((_DWORD *)this + 14) - 1;
  *((_DWORD *)this + 14) = v1;
  if (this && !v1)
  {
    if (*((char *)this + 55) < 0)
      operator delete(*((void **)this + 4));
    std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::destroy(*((unsigned int ***)this + 2));
    MEMORY[0x1B5E50688](this, 0x10B3C409A6CECE4);
  }
  return v1 == 0;
}

void boost::exception_detail::error_info_container_impl::clone(boost::exception_detail::error_info_container_impl *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  unsigned int *v5;
  uint64_t **v6;
  boost::exception_detail::error_info_container_impl *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t **v15;
  uint64_t **v16;
  char *v17;
  boost::exception_detail::error_info_container_impl *v18;
  boost::exception_detail::error_info_container_impl *v19;
  BOOL v20;
  __int128 v21;
  __int128 v22;
  unsigned int *v23[2];
  char v24;
  uint64_t v25;

  *a2 = 0;
  v4 = operator new();
  *(_QWORD *)v4 = &off_1E69A2168;
  *(_QWORD *)(v4 + 16) = 0;
  v5 = (unsigned int *)(v4 + 16);
  *(_QWORD *)(v4 + 8) = v4 + 16;
  v6 = (uint64_t **)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *a2 = v4;
  *(_DWORD *)(v4 + 56) = 1;
  v7 = (boost::exception_detail::error_info_container_impl *)*((_QWORD *)this + 1);
  if (v7 != (boost::exception_detail::error_info_container_impl *)((char *)this + 16))
  {
    do
    {
      v8 = *((_QWORD *)v7 + 5);
      if (!v8)
        __assert_rtn("operator->", "shared_ptr.hpp", 786, "px != 0");
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      v22 = (unint64_t)v9;
      v23[0] = 0;
      v10 = (_QWORD *)operator new();
      v10[1] = 0x100000001;
      *v10 = &off_1E69A21D0;
      v10[2] = v9;
      v11 = (unsigned int *)*((_QWORD *)&v22 + 1);
      *((_QWORD *)&v22 + 1) = v10;
      v23[0] = v11;
      boost::detail::shared_count::~shared_count(v23);
      v12 = *((_QWORD *)v7 + 4);
      v21 = v22;
      if (*((_QWORD *)&v22 + 1))
      {
        v13 = (unsigned int *)(*((_QWORD *)&v22 + 1) + 8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      v15 = (uint64_t **)std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__find_equal<boost::exception_detail::type_info_>((uint64_t)v6, &v25, v12);
      if (!*v15)
      {
        v16 = v15;
        v17 = (char *)operator new(0x38uLL);
        v23[1] = v5;
        *((_QWORD *)v17 + 4) = v12;
        *(_OWORD *)(v17 + 40) = v21;
        v21 = 0uLL;
        v24 = 1;
        std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__insert_node_at(v6, v25, v16, (uint64_t *)v17);
        v23[0] = 0;
        std::unique_ptr<std::__tree_node<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,void *>>>>::reset[abi:ne180100]((uint64_t)v23);
      }
      boost::detail::shared_count::~shared_count((unsigned int **)&v21 + 1);
      boost::detail::shared_count::~shared_count((unsigned int **)&v22 + 1);
      v18 = (boost::exception_detail::error_info_container_impl *)*((_QWORD *)v7 + 1);
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = *(boost::exception_detail::error_info_container_impl **)v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (boost::exception_detail::error_info_container_impl *)*((_QWORD *)v7 + 2);
          v20 = *(_QWORD *)v19 == (_QWORD)v7;
          v7 = v19;
        }
        while (!v20);
      }
      v7 = v19;
    }
    while (v19 != (boost::exception_detail::error_info_container_impl *)((char *)this + 16));
  }
}

void sub_1B57C61AC()
{
  __break(1u);
}

void sub_1B57C61EC()
{
  __cxa_end_catch();
  JUMPOUT(0x1B57C61F4);
}

_QWORD *std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__find_equal<boost::exception_detail::type_info_>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  const char *v8;
  const char *v9;
  _QWORD *v10;

  v4 = (_QWORD *)(a1 + 8);
  v5 = *(_QWORD **)(a1 + 8);
  if (v5)
  {
    v7 = v5[4];
    if (v7 != a3)
    {
      v8 = (const char *)(*(_QWORD *)(a3 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      do
      {
        v9 = (const char *)(*(_QWORD *)(v7 + 8) & 0x7FFFFFFFFFFFFFFFLL);
        if (strcmp(v8, v9) < 0)
        {
          v10 = (_QWORD *)*v5;
          v4 = v5;
          if (!*v5)
            break;
        }
        else
        {
          if ((strcmp(v9, v8) & 0x80000000) == 0)
            break;
          v4 = v5 + 1;
          v10 = (_QWORD *)v5[1];
          if (!v10)
            break;
        }
        v7 = v10[4];
        v5 = v10;
      }
      while (v7 != a3);
    }
  }
  else
  {
    v5 = (_QWORD *)(a1 + 8);
  }
  *a2 = v5;
  return v4;
}

uint64_t *std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

void std::unique_ptr<std::__tree_node<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  unsigned int **v1;

  v1 = *(unsigned int ***)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      boost::detail::shared_count::~shared_count(v1 + 6);
    operator delete(v1);
  }
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void boost::detail::sp_counted_impl_p<boost::exception_detail::error_info_base>::~sp_counted_impl_p()
{
  JUMPOUT(0x1B5E50688);
}

uint64_t boost::detail::sp_counted_impl_p<boost::exception_detail::error_info_base>::dispose(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

uint64_t boost::detail::sp_counted_base::destroy(uint64_t this)
{
  if (this)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  return this;
}

uint64_t boost::detail::sp_counted_impl_p<boost::exception_detail::error_info_base>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::exception_detail::error_info_base>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::exception_detail::error_info_base>::get_untyped_deleter()
{
  return 0;
}

void std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::destroy(unsigned int **a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::destroy(*a1);
    std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::destroy(a1[1]);
    boost::detail::shared_count::~shared_count(a1 + 6);
    operator delete(a1);
  }
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;

  v2 = MEMORY[0x1E0DE4FE0];
  v3 = MEMORY[0x1E0DE4FE0] + 64;
  *(_QWORD *)(a1 + 112) = MEMORY[0x1E0DE4FE0] + 64;
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + *(_QWORD *)(v4 - 24)) = v5;
  v6 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 8));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 112) = v3;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_1B57C6658(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1B5E50598](v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  int64_t v16;
  std::locale *v17;
  uint64_t v18;
  _BYTE v20[16];
  std::locale __b;
  char v22;

  MEMORY[0x1B5E502C8](v20, a1);
  if (v20[0])
  {
    v6 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *((_QWORD *)v6 + 5);
    v8 = *((_DWORD *)v6 + 2);
    v9 = *((_DWORD *)v6 + 36);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&__b, MEMORY[0x1E0DE4A90]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&__b);
      *((_DWORD *)v6 + 36) = v9;
    }
    v11 = a2 + a3;
    if ((v8 & 0xB0) == 0x20)
      v12 = a2 + a3;
    else
      v12 = a2;
    if (!v7)
      goto LABEL_23;
    v13 = *((_QWORD *)v6 + 3);
    v14 = v13 <= a3;
    v15 = v13 - a3;
    v16 = v14 ? 0 : v15;
    if (v12 - a2 >= 1
      && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 96))(v7, a2, v12 - a2) != v12 - a2)
    {
      goto LABEL_23;
    }
    if (v16 >= 1)
    {
      std::string::basic_string[abi:ne180100](&__b, v16, (char)v9);
      v17 = v22 >= 0 ? &__b : (std::locale *)__b.__locale_;
      v18 = (*(uint64_t (**)(uint64_t, std::locale *, int64_t))(*(_QWORD *)v7 + 96))(v7, v17, v16);
      if (v22 < 0)
        operator delete(__b.__locale_);
      if (v18 != v16)
        goto LABEL_23;
    }
    if (v11 - v12 < 1
      || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 96))(v7, v12, v11 - v12) == v11 - v12)
    {
      *((_QWORD *)v6 + 3) = 0;
    }
    else
    {
LABEL_23:
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x1B5E502D4](v20);
  return a1;
}

void sub_1B57C6844(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  _QWORD *v17;

  if (a17 < 0)
    operator delete(__p);
  MEMORY[0x1B5E502D4](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v17 + *(_QWORD *)(*v17 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x1B57C6820);
}

void sub_1B57C68A4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *std::stringbuf::str[abi:ne180100]<std::allocator<char>>(_QWORD *__dst, uint64_t a2)
{
  _QWORD *v2;
  int v3;
  size_t v4;
  unint64_t v5;
  unint64_t v6;
  const void **v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v2 = __dst;
  v3 = *(_DWORD *)(a2 + 96);
  if ((v3 & 0x10) != 0)
  {
    v5 = *(_QWORD *)(a2 + 88);
    v6 = *(_QWORD *)(a2 + 48);
    if (v5 < v6)
    {
      *(_QWORD *)(a2 + 88) = v6;
      v5 = v6;
    }
    v7 = (const void **)(a2 + 40);
  }
  else
  {
    if ((v3 & 8) == 0)
    {
      v4 = 0;
      *((_BYTE *)__dst + 23) = 0;
      goto LABEL_16;
    }
    v7 = (const void **)(a2 + 16);
    v5 = *(_QWORD *)(a2 + 32);
  }
  v8 = *v7;
  v4 = v5 - (_QWORD)*v7;
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v4 >= 0x17)
  {
    v9 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v9 = v4 | 7;
    v10 = v9 + 1;
    v11 = operator new(v9 + 1);
    v2[1] = v4;
    v2[2] = v10 | 0x8000000000000000;
    *v2 = v11;
    v2 = v11;
  }
  else
  {
    *((_BYTE *)__dst + 23) = v4;
    if (!v4)
      goto LABEL_16;
  }
  __dst = memmove(v2, v8, v4);
LABEL_16:
  *((_BYTE *)v2 + v4) = 0;
  return __dst;
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F60];
  v3 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1B5E50598](a1 + 112);
  return a1;
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

void boost::detail::sp_counted_impl_p<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::~sp_counted_impl_p()
{
  JUMPOUT(0x1B5E50688);
}

uint64_t boost::detail::sp_counted_impl_p<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::dispose(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

uint64_t boost::detail::sp_counted_impl_p<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::get_untyped_deleter()
{
  return 0;
}

void boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>::name_value_string(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  char *v4;
  char *v5;
  char *v6;
  std::string::const_iterator v7;
  std::string *v8;
  __int128 v9;
  std::string *p_status;
  std::string::size_type size;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  void *v16[2];
  unsigned __int8 v17;
  std::string v18;
  std::string v19;
  std::string v20;
  std::string v21;
  size_t outlen;
  _QWORD v23[10];
  char v24;
  uint64_t v25;
  std::string status;

  LODWORD(status.__r_.__value_.__l.__data_) = 0;
  outlen = 0;
  v4 = __cxa_demangle((const char *)((unint64_t)"PN10applesauce10exceptions13tag_backtraceE" & 0x7FFFFFFFFFFFFFFFLL), 0, &outlen, (int *)&status);
  v5 = v4;
  if (v4)
    v6 = v4;
  else
    v6 = (char *)((unint64_t)"PN10applesauce10exceptions13tag_backtraceE" & 0x7FFFFFFFFFFFFFFFLL);
  std::string::basic_string[abi:ne180100]<0>(&v18, v6);
  free(v5);
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v18;
  else
    v7.__i_ = (std::__wrap_iter<const char *>::iterator_type)v18.__r_.__value_.__r.__words[0];
  std::string::insert(&v18, v7, 91);
  v19 = v18;
  memset(&v18, 0, sizeof(v18));
  v8 = std::string::append(&v19, "] = ", 4uLL);
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&outlen);
  applesauce::backtrace::detail::symbolicate_snapshot(&status, a1 + 8);
  if ((status.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_status = &status;
  else
    p_status = (std::string *)status.__r_.__value_.__r.__words[0];
  if ((status.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(status.__r_.__value_.__r.__words[2]);
  else
    size = status.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&outlen, (uint64_t)p_status, size);
  if (SHIBYTE(status.__r_.__value_.__r.__words[2]) < 0)
    operator delete(status.__r_.__value_.__l.__data_);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(v16, (uint64_t)v23);
  outlen = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)&v23[-1] + *(_QWORD *)(outlen - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v23[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v24 < 0)
    operator delete((void *)v23[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1B5E50598](&v25);
  if ((v17 & 0x80u) == 0)
    v12 = v16;
  else
    v12 = (void **)v16[0];
  if ((v17 & 0x80u) == 0)
    v13 = v17;
  else
    v13 = (std::string::size_type)v16[1];
  v14 = std::string::append(&v20, (const std::string::value_type *)v12, v13);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  std::string::push_back(&v21, 10);
  *a2 = v21;
  memset(&v21, 0, sizeof(v21));
  if ((char)v17 < 0)
    operator delete(v16[0]);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
}

void sub_1B57C6D34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (a40 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if (a33 < 0)
    operator delete(a28);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

_QWORD *boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>::clone(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  uint64_t v7;

  v2 = (_QWORD *)operator new();
  *v2 = off_1E69A20A0;
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 3);
    v2[1] = v6;
    v2[2] = v6;
    v2[3] = &v6[8 * v7];
    memmove(v6, v4, v5);
    v2[2] = &v6[8 * (v5 >> 3)];
  }
  return v2;
}

void sub_1B57C6EE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E50688](v1, 0x81C4018A671A6);
  _Unwind_Resume(a1);
}

_QWORD *boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>::~error_info(_QWORD *a1)
{
  void *v2;

  *a1 = off_1E69A20A0;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>::~error_info(_QWORD *a1)
{
  void *v2;

  *a1 = off_1E69A20A0;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1B5E50688);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(unint64_t a1)
{
  if (a1 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a1);
}

void applesauce::backtrace::detail::symbolicate_snapshot(std::string *a1, uint64_t a2)
{
  std::string *v3;
  unint64_t v4;
  uint64_t v5;
  const void *v6;
  size_t v7;
  BOOL v8;
  std::string *v9;
  std::string *v10;
  __int128 v11;
  void **v12;
  std::string::size_type v13;
  void *v14;
  std::string *v15;
  char *v16;
  char *v17;
  int data;
  char *dli_sname;
  size_t v20;
  __int128 *p_dst;
  _BYTE *dli_saddr;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  std::string::size_type size;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char **v37;
  uint64_t v38;
  std::string v39;
  std::string status;
  std::string outlen;
  std::string v42;
  void *__p[2];
  int64_t v44;
  char v45;
  Dl_info v46;
  __int128 __dst;
  int64_t v48;
  char __str[64];
  uint64_t v50;

  v3 = a1;
  v50 = *MEMORY[0x1E0C80C00];
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  v4 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  v37 = backtrace_symbols(*(void *const **)a2, v4 >> 3);
  if ((int)(v4 >> 3) < 1)
    goto LABEL_72;
  v36 = v4 >> 3;
  v5 = 0;
  v38 = (v4 >> 3);
  do
  {
    v6 = *(const void **)(*(_QWORD *)a2 + 8 * v5);
    snprintf(__str, 0x40uLL, "%-3d\t%*p\t", v5, 18, v6);
    v7 = strlen(__str);
    std::string::append(v3, __str, v7);
    memset(&v46, 0, sizeof(v46));
    if (dladdr(v6, &v46))
      v8 = v46.dli_sname == 0;
    else
      v8 = 1;
    if (!v8)
    {
      std::string::basic_string[abi:ne180100]<0>(&v42, (char *)v46.dli_sname);
      LODWORD(status.__r_.__value_.__l.__data_) = 0;
      outlen.__r_.__value_.__r.__words[0] = 0;
      if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v15 = &v42;
      else
        v15 = (std::string *)v42.__r_.__value_.__r.__words[0];
      v16 = __cxa_demangle((const char *)v15, 0, (size_t *)&outlen, (int *)&status);
      v17 = v16;
      data = (int)status.__r_.__value_.__l.__data_;
      if (LODWORD(status.__r_.__value_.__l.__data_))
      {
        LOBYTE(__p[0]) = 0;
        v45 = 0;
        if (!v16)
          goto LABEL_24;
        goto LABEL_23;
      }
      v20 = outlen.__r_.__value_.__r.__words[0] - 1;
      if (outlen.__r_.__value_.__r.__words[0] - 1 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      if (v20 >= 0x17)
      {
        v33 = v3;
        v34 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v20 | 7) != 0x17)
          v34 = v20 | 7;
        v35 = v34 + 1;
        p_dst = (__int128 *)operator new(v34 + 1);
        *((_QWORD *)&__dst + 1) = v20;
        v48 = v35 | 0x8000000000000000;
        *(_QWORD *)&__dst = p_dst;
        v3 = v33;
      }
      else
      {
        HIBYTE(v48) = outlen.__r_.__value_.__s.__data_[0] - 1;
        p_dst = &__dst;
        if (outlen.__r_.__value_.__r.__words[0] == 1)
        {
LABEL_68:
          *((_BYTE *)p_dst + v20) = 0;
          *(_OWORD *)__p = __dst;
          v44 = v48;
          v45 = 1;
          if (!v17)
          {
LABEL_24:
            if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v42.__r_.__value_.__l.__data_);
              if (data)
              {
LABEL_26:
                dli_sname = (char *)v46.dli_sname;
                if (!v46.dli_sname)
                  dli_sname = v37[v5];
LABEL_36:
                dli_saddr = v46.dli_saddr;
                std::string::basic_string[abi:ne180100]<0>(&status, dli_sname);
                v23 = std::string::append(&status, " + ", 3uLL);
                v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
                outlen.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
                *(_OWORD *)&outlen.__r_.__value_.__l.__data_ = v24;
                v23->__r_.__value_.__l.__size_ = 0;
                v23->__r_.__value_.__r.__words[2] = 0;
                v23->__r_.__value_.__r.__words[0] = 0;
                std::to_string(&v39, (_BYTE *)v6 - dli_saddr);
                if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v25 = &v39;
                else
                  v25 = (std::string *)v39.__r_.__value_.__r.__words[0];
                if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
                else
                  size = v39.__r_.__value_.__l.__size_;
                v27 = std::string::append(&outlen, (const std::string::value_type *)v25, size);
                v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
                v42.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v28;
                v27->__r_.__value_.__l.__size_ = 0;
                v27->__r_.__value_.__r.__words[2] = 0;
                v27->__r_.__value_.__r.__words[0] = 0;
                v29 = std::string::append(&v42, "\n", 1uLL);
                v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
                v48 = v29->__r_.__value_.__r.__words[2];
                __dst = v30;
                v29->__r_.__value_.__l.__size_ = 0;
                v29->__r_.__value_.__r.__words[2] = 0;
                v29->__r_.__value_.__r.__words[0] = 0;
                if (v48 >= 0)
                  v31 = (const std::string::value_type *)&__dst;
                else
                  v31 = (const std::string::value_type *)__dst;
                if (v48 >= 0)
                  v32 = HIBYTE(v48);
                else
                  v32 = *((_QWORD *)&__dst + 1);
                std::string::append(v3, v31, v32);
                if (SHIBYTE(v48) < 0)
                  operator delete((void *)__dst);
                if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v42.__r_.__value_.__l.__data_);
                if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v39.__r_.__value_.__l.__data_);
                if (SHIBYTE(outlen.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(outlen.__r_.__value_.__l.__data_);
                if (SHIBYTE(status.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(status.__r_.__value_.__l.__data_);
                if (!data && SHIBYTE(v44) < 0)
                {
                  v14 = __p[0];
                  goto LABEL_61;
                }
                goto LABEL_62;
              }
            }
            else if (data)
            {
              goto LABEL_26;
            }
            if (v44 >= 0)
              dli_sname = (char *)__p;
            else
              dli_sname = (char *)__p[0];
            goto LABEL_36;
          }
LABEL_23:
          free(v17);
          goto LABEL_24;
        }
      }
      memmove(p_dst, v17, v20);
      goto LABEL_68;
    }
    v9 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&__dst, v37[v5]);
    v10 = std::string::append(v9, "\n", 1uLL);
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v44 = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if (v44 >= 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    if (v44 >= 0)
      v13 = HIBYTE(v44);
    else
      v13 = (std::string::size_type)__p[1];
    std::string::append(v3, (const std::string::value_type *)v12, v13);
    if (SHIBYTE(v44) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v48) < 0)
    {
      v14 = (void *)__dst;
LABEL_61:
      operator delete(v14);
    }
LABEL_62:
    ++v5;
  }
  while (v38 != v5);
  if ((_DWORD)v36 == 64)
    std::string::append(v3, "[truncated?]\n", 0xDuLL);
LABEL_72:
  if (v37)
    free(v37);
}

void sub_1B57C7418(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

_QWORD *std::vector<void *>::vector(_QWORD *a1)
{
  _OWORD *v2;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x200uLL);
  a1[2] = v2 + 32;
  *v2 = 0u;
  v2[1] = 0u;
  v2[2] = 0u;
  v2[3] = 0u;
  v2[4] = 0u;
  v2[5] = 0u;
  v2[6] = 0u;
  v2[7] = 0u;
  v2[8] = 0u;
  v2[9] = 0u;
  v2[10] = 0u;
  v2[11] = 0u;
  v2[12] = 0u;
  v2[13] = 0u;
  v2[14] = 0u;
  v2[15] = 0u;
  v2[16] = 0u;
  v2[17] = 0u;
  v2[18] = 0u;
  v2[19] = 0u;
  v2[20] = 0u;
  v2[21] = 0u;
  v2[22] = 0u;
  v2[23] = 0u;
  v2[24] = 0u;
  v2[25] = 0u;
  v2[26] = 0u;
  v2[27] = 0u;
  v2[28] = 0u;
  v2[29] = 0u;
  v2[30] = 0u;
  v2[31] = 0u;
  *a1 = v2;
  a1[1] = v2 + 32;
  return a1;
}

void std::vector<void *>::resize(char **a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;

  v3 = *a1;
  v4 = a1[1];
  v5 = (v4 - *a1) >> 3;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v19 = &v3[8 * a2];
    goto LABEL_17;
  }
  v6 = a2 - v5;
  v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 3)
  {
    bzero(a1[1], 8 * v6);
    v19 = &v4[8 * v6];
LABEL_17:
    a1[1] = v19;
    return;
  }
  if (a2 >> 61)
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  v8 = v7 - v3;
  v9 = v8 >> 2;
  if (v8 >> 2 <= a2)
    v9 = a2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
    v10 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v10 = v9;
  v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v10);
  v12 = &v11[8 * v5];
  v14 = &v11[8 * v13];
  bzero(v12, 8 * v6);
  v15 = &v12[8 * v6];
  v17 = *a1;
  v16 = a1[1];
  if (v16 != *a1)
  {
    do
    {
      v18 = *((_QWORD *)v16 - 1);
      v16 -= 8;
      *((_QWORD *)v12 - 1) = v18;
      v12 -= 8;
    }
    while (v16 != v17);
    v16 = *a1;
  }
  *a1 = v12;
  a1[1] = v15;
  a1[2] = v14;
  if (v16)
    operator delete(v16);
}

void boost::exception_detail::error_info_injector<std::runtime_error>::~error_info_injector(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &unk_1E69A2000;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
}

{
  *(_QWORD *)(a1 + 16) = &unk_1E69A2000;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
  JUMPOUT(0x1B5E50688);
}

void `non-virtual thunk to'boost::exception_detail::error_info_injector<std::runtime_error>::~error_info_injector(_QWORD *a1)
{
  std::runtime_error *v1;

  v1 = (std::runtime_error *)(a1 - 2);
  *a1 = &unk_1E69A2000;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::runtime_error::~runtime_error(v1);
}

void `non-virtual thunk to'boost::exception_detail::error_info_injector<std::runtime_error>::~error_info_injector(uint64_t a1)
{
  boost::exception_detail::error_info_injector<std::runtime_error>::~error_info_injector(a1 - 16);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<applesauce::CF::StringRef ()(void)>>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return v1[82];
}

unsigned int *caulk::concurrent::shared_spin_lock::lock_shared(unsigned int *this)
{
  unsigned int *v1;
  unsigned int i;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;

  v1 = this;
  for (i = 0; ; ++i)
  {
    v3 = atomic_load(v1);
    if (v3 <= 0x7FFFFFFE)
      break;
LABEL_7:
    if (i >= 0x65)
    {
      v5 = mach_absolute_time();
      this = (unsigned int *)mach_wait_until(v5 + 24000);
    }
  }
  do
  {
    while (1)
    {
      v4 = __ldaxr(v1);
      if (v4 == v3)
        break;
      __clrex();
      v3 = v4;
      if (v4 >= 0x7FFFFFFF)
        goto LABEL_7;
    }
  }
  while (__stlxr(v3 + 1, v1));
  return this;
}

uint64_t std::shared_lock<caulk::concurrent::shared_spin_lock>::~shared_lock[abi:ne180100](uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  int v3;
  unsigned int v4;
  unsigned int v5;

  if (*(_BYTE *)(result + 8))
  {
    v1 = *(unsigned int **)result;
    v2 = atomic_load(*(unsigned int **)result);
    v3 = v2 & 0x7FFFFFFF;
    if ((v2 & 0x7FFFFFFF) != 0)
    {
      while ((v2 & 0x80000000) == 0)
      {
        v4 = v3 - 1;
        while (1)
        {
          v5 = __ldaxr(v1);
          if (v5 != v2)
            break;
          if (!__stlxr(v4, v1))
            return result;
        }
        __clrex();
        v2 = v5;
        v3 = v5 & 0x7FFFFFFF;
        if (!v3)
          goto LABEL_9;
      }
      _os_assert_log();
      result = _os_crash();
      __break(1u);
    }
    else
    {
LABEL_9:
      _os_assert_log();
      result = _os_crash();
      __break(1u);
    }
  }
  return result;
}

uint64_t AMCP::Core::Operation::call_function<BOOL,AMCP::Core::Has_Property_Function>(_QWORD *a1)
{
  unint64_t Has_Property;
  AMCP::Log::Scope_Registry *v3;
  AMCP::Log::Scope_Registry *v4;
  uint64_t v5;
  NSObject *v7;
  _opaque_pthread_t *v8;
  mach_port_t v9;
  void *v10;
  NSObject *v11;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  void *exception;
  __int128 v15;
  uint64_t v16;
  uint64_t (**v17)();
  __int128 v18;
  uint64_t v19;
  std::string v20;
  std::runtime_error v21;
  std::runtime_error v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  char v28;
  uint8_t buf[8];
  __int16 v30;
  char *v31;
  __int16 v32;
  int v33;
  const char *v34;
  const char *v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  Has_Property = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
  v3 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(a1, Has_Property);
  if (!v3)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v11 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v12 = pthread_self();
      v13 = pthread_mach_thread_np(v12);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v13;
      v30 = 2080;
      v31 = "Operation.h";
      v32 = 1024;
      v33 = 154;
      _os_log_error_impl(&dword_1B57BA000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v28);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v20);
    std::runtime_error::runtime_error(&v21, &v20);
    std::runtime_error::runtime_error(&v22, &v21);
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = -1;
    v22.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v23 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v22);
    v34 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = BOOL, Argument_Types "
          "= <AMCP::Core::Has_Property_Function>]";
    v35 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v36 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v15);
    v18 = v15;
    v19 = v16;
    v15 = 0uLL;
    v16 = 0;
    v17 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v17);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v4 = v3;
  if (!*((_QWORD *)v3 + 7)
    || (*(_QWORD *)buf = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>(),
        (v3 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, _QWORD, uint8_t *))v4 + 7))(4, (uint64_t)v4 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v7 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = pthread_self();
      v9 = pthread_mach_thread_np(v8);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v9;
      v30 = 2080;
      v31 = "Operation.h";
      v32 = 1024;
      v33 = 161;
      _os_log_error_impl(&dword_1B57BA000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v28);
    v10 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v20);
    std::runtime_error::runtime_error(&v21, &v20);
    std::runtime_error::runtime_error(&v22, &v21);
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = -1;
    v22.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v23 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v22);
    v34 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = BOOL, Argument_Types "
          "= <AMCP::Core::Has_Property_Function>]";
    v35 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v36 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v15);
    v18 = v15;
    v19 = v16;
    v15 = 0uLL;
    v16 = 0;
    v17 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v17);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v10, (uint64_t)buf);
  }
  v5 = *((_QWORD *)v3 + 3);
  if (!v5)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint8_t *))(*(_QWORD *)v5 + 48))(v5, buf);
}

void sub_1B57C7BE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,std::runtime_error a23,uint64_t a24,uint64_t a25)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return v1[74];
}

void AMCP::get_class_traits(AMCP *this, unsigned int a2)
{
  _QWORD *stock_class_traits_list;
  _DWORD *v5;
  _DWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int *v9;
  _DWORD *v10;
  unsigned int v11;
  uint64_t v12;
  std::string *v13;
  __int128 v14;
  _DWORD *v15;

  stock_class_traits_list = (_QWORD *)AMCP::get_stock_class_traits_list(this);
  v6 = (_DWORD *)*stock_class_traits_list;
  v5 = (_DWORD *)stock_class_traits_list[1];
  if (v5 != (_DWORD *)*stock_class_traits_list)
  {
    v7 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v5 - *stock_class_traits_list) >> 4);
    do
    {
      v8 = v7 >> 1;
      v9 = &v6[20 * (v7 >> 1)];
      v11 = *v9;
      v10 = v9 + 20;
      v7 += ~(v7 >> 1);
      if (v11 < a2)
        v6 = v10;
      else
        v7 = v8;
    }
    while (v7);
  }
  if (v6 == v5 || *v6 != a2)
  {
    *(_DWORD *)this = a2;
    *((_DWORD *)this + 1) = 0;
    *((_BYTE *)this + 8) = 0;
    *((_QWORD *)this + 3) = 0;
    *((_QWORD *)this + 4) = 0;
    *((_QWORD *)this + 2) = 0;
    v15 = operator new(4uLL);
    *((_QWORD *)this + 2) = v15;
    *v15++ = 1735159650;
    *((_QWORD *)this + 3) = v15;
    *((_QWORD *)this + 4) = v15;
    *((_DWORD *)this + 10) = -1;
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 6, "Unknown");
    *((_DWORD *)this + 18) = 0;
  }
  else
  {
    v12 = *(_QWORD *)v6;
    *((_BYTE *)this + 8) = *((_BYTE *)v6 + 8);
    *(_QWORD *)this = v12;
    *((_QWORD *)this + 2) = 0;
    *((_QWORD *)this + 3) = 0;
    *((_QWORD *)this + 4) = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)this + 2, *((const void **)v6 + 2), *((_QWORD *)v6 + 3), (uint64_t)(*((_QWORD *)v6 + 3) - *((_QWORD *)v6 + 2)) >> 2);
    *((_DWORD *)this + 10) = v6[10];
    v13 = (std::string *)((char *)this + 48);
    if (*((char *)v6 + 71) < 0)
    {
      std::string::__init_copy_ctor_external(v13, *((const std::string::value_type **)v6 + 6), *((_QWORD *)v6 + 7));
    }
    else
    {
      v14 = *((_OWORD *)v6 + 3);
      *((_QWORD *)this + 8) = *((_QWORD *)v6 + 8);
      *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
    }
    *((_DWORD *)this + 18) = v6[18];
  }
}

void sub_1B57C7F04(void *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  __clang_call_terminate(a1);
}

_QWORD *std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned int>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B57C7F8C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned int>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(unint64_t a1)
{
  if (a1 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(4 * a1);
}

uint64_t AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>(AMCP::Core::Core *a1, const AMCP::Address *a2)
{
  unsigned int v2;
  _QWORD *v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  _BYTE v14[32];
  void (*v15)(_QWORD, _BYTE *, _QWORD, _QWORD);
  _QWORD *v16;
  std::__shared_weak_count *v17;

  if (!AMCP::Core::Core::has_property(a1, a2))
    goto LABEL_16;
  AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v16, (int8x8_t *)a1, (unsigned int *)a2);
  v5 = v16;
  if (!v16)
    goto LABEL_10;
  v6 = AMCP::Implementation::get_type_marker<std::function<unsigned int ()(void)>>();
  if (!std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v5, v6))
  {
    v8 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
    if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v5, v8))
    {
      AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)v14, v5);
      LODWORD(v5) = AMCP::Thing::convert_to<unsigned int>((uint64_t)v14);
      if (v15)
        v15(0, v14, 0, 0);
      goto LABEL_5;
    }
    LOBYTE(v5) = 0;
LABEL_10:
    v7 = 1;
    goto LABEL_11;
  }
  LODWORD(v5) = AMCP::Core::Operation::call_function<unsigned int>(v5);
LABEL_5:
  v7 = 0;
  v2 = v5 >> 8;
LABEL_11:
  v9 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      if (v7)
        goto LABEL_16;
LABEL_18:
      v12 = 0x100000000;
      return v12 | v5 | (v2 << 8);
    }
  }
  if (!v7)
    goto LABEL_18;
LABEL_16:
  v12 = 0;
  LOBYTE(v5) = 0;
  return v12 | v5 | (v2 << 8);
}

uint64_t AMCP::Core::Operation::call_function<unsigned int>(_QWORD *a1)
{
  unint64_t v2;
  AMCP::Log::Scope_Registry *v3;
  AMCP::Log::Scope_Registry *v4;
  uint64_t v5;
  NSObject *v7;
  _opaque_pthread_t *v8;
  mach_port_t v9;
  void *v10;
  NSObject *v11;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  void *exception;
  __int128 v15;
  uint64_t v16;
  uint64_t (**v17)();
  __int128 v18;
  uint64_t v19;
  std::string v20;
  std::runtime_error v21;
  std::runtime_error v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  char v28;
  uint8_t buf[8];
  __int16 v30;
  char *v31;
  __int16 v32;
  int v33;
  const char *v34;
  const char *v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v2 = AMCP::Implementation::get_type_marker<std::function<unsigned int ()(void)>>();
  v3 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(a1, v2);
  if (!v3)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v11 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v12 = pthread_self();
      v13 = pthread_mach_thread_np(v12);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v13;
      v30 = 2080;
      v31 = "Operation.h";
      v32 = 1024;
      v33 = 154;
      _os_log_error_impl(&dword_1B57BA000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v28);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v20);
    std::runtime_error::runtime_error(&v21, &v20);
    std::runtime_error::runtime_error(&v22, &v21);
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = -1;
    v22.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v23 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v22);
    v34 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = unsigned int, Argument_Types = <>]";
    v35 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v36 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v15);
    v18 = v15;
    v19 = v16;
    v15 = 0uLL;
    v16 = 0;
    v17 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v17);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v4 = v3;
  if (!*((_QWORD *)v3 + 7)
    || (*(_QWORD *)buf = AMCP::Implementation::get_type_marker<std::function<unsigned int ()(void)>>(),
        (v3 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, _QWORD, uint8_t *))v4 + 7))(4, (uint64_t)v4 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v7 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = pthread_self();
      v9 = pthread_mach_thread_np(v8);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v9;
      v30 = 2080;
      v31 = "Operation.h";
      v32 = 1024;
      v33 = 161;
      _os_log_error_impl(&dword_1B57BA000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v28);
    v10 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v20);
    std::runtime_error::runtime_error(&v21, &v20);
    std::runtime_error::runtime_error(&v22, &v21);
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = -1;
    v22.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v23 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v22);
    v34 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = unsigned int, Argument_Types = <>]";
    v35 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v36 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v15);
    v18 = v15;
    v19 = v16;
    v15 = 0uLL;
    v16 = 0;
    v17 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v17);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v10, (uint64_t)buf);
  }
  v5 = *((_QWORD *)v3 + 3);
  if (!v5)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
}

void sub_1B57C8518(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,std::runtime_error a23,uint64_t a24,uint64_t a25)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Thing::convert_to<unsigned int>(uint64_t a1)
{
  uint64_t type;
  void (*v3)(uint64_t, uint64_t, _QWORD, _QWORD);
  unsigned int *v4;
  uint64_t v5;
  unsigned int *v6;
  std::bad_cast *exception;
  std::bad_cast *v9;
  std::bad_cast *v10;
  std::bad_cast *v11;
  std::bad_cast *v12;
  std::bad_cast *v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t (*v17)(uint64_t, _OWORD *, _QWORD, uint64_t *);
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, _QWORD, _QWORD);

  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_12;
  type = AMCP::Implementation::get_type_marker<unsigned int>();
  v3 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a1 + 32);
  v19 = 0;
  if (v3)
  {
    v3(3, a1, 0, &v19);
    v3 = v19;
  }
  if (v3 == (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))type)
  {
    v18 = type;
    v4 = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a1 + 32))(4, a1, 0, &v18);
    if (v4)
      return *v4;
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v9 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v9, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v15 = AMCP::Implementation::get_type_marker<unsigned int>();
  memset(v16, 0, sizeof(v16));
  v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a1 + 32))(6, a1, v16, &v15);
  if (!v17)
  {
    v10 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v11 = std::bad_cast::bad_cast(v10);
    __cxa_throw(v11, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v14 = type;
  v6 = (unsigned int *)v17(4, v16, 0, &v14);
  if (!v6)
  {
    v12 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v13 = std::bad_cast::bad_cast(v12);
    __cxa_throw(v13, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v5 = *v6;
  if (v17)
    v17(0, v16, 0, 0);
  return v5;
}

void sub_1B57C8800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::get_type_marker<unsigned int>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      AMCP::Implementation::get_type_marker<unsigned int>(void)::s_type_marker = AMCP::Implementation::generate_type_marker(MEMORY[0x1E0DE4EF8], v4);
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return v1[185];
}

uint64_t AMCP::Implementation::get_type_marker<std::function<unsigned int ()(void)>>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return v1[76];
}

unint64_t AMCP::Device::get_input_safety_offset(AMCP::Device *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  AMCP::Core::Core *v5;
  unint64_t simple_required;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
  if (v5)
    simple_required = AMCP::Core::Core::get_simple_required_property<1935763060u>(v5, 1768845428);
  else
    simple_required = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return simple_required;
}

unint64_t AMCP::Core::Core::get_simple_required_property<1935763060u>(AMCP::Core::Core *a1, int a2)
{
  unint64_t result;
  NSObject *v4;
  _opaque_pthread_t *v5;
  mach_port_t v6;
  void *__p[2];
  char v8;
  uint8_t buf[8];
  _BYTE v10[10];
  __int16 v11;
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  void **v16;
  __int16 v17;
  int v18;
  __int16 v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)buf = 1935763060;
  *(_DWORD *)&buf[4] = a2;
  *(_DWORD *)v10 = 0;
  result = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>(a1, (const AMCP::Address *)buf);
  if (!HIDWORD(result))
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)result);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v4 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = pthread_self();
      v6 = pthread_mach_thread_np(v5);
      v8 = 4;
      strcpy((char *)__p, "saft");
      *(_DWORD *)buf = 67110658;
      *(_DWORD *)&buf[4] = v6;
      *(_WORD *)v10 = 2080;
      *(_QWORD *)&v10[2] = "Core.h";
      v11 = 1024;
      v12 = 391;
      v13 = 2080;
      v14 = "optional_value.operator BOOL() == true";
      v15 = 2080;
      v16 = __p;
      v17 = 1024;
      v18 = a2;
      v19 = 1024;
      v20 = 0;
      _os_log_error_impl(&dword_1B57BA000, v4, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
      if (v8 < 0)
        operator delete(__p[0]);
    }
    abort();
  }
  return result;
}

void sub_1B57C8B18(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

unint64_t AMCP::Device::get_output_safety_offset(AMCP::Device *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  AMCP::Core::Core *v5;
  unint64_t simple_required;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
  if (v5)
    simple_required = AMCP::Core::Core::get_simple_required_property<1935763060u>(v5, 1869968496);
  else
    simple_required = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return simple_required;
}

void AMCP::Device::get_stream_list(AMCP::Device *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  AMCP::Core::Core *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v5 && (v7 = std::__shared_weak_count::lock(v5)) != 0)
  {
    v8 = v7;
    v9 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
    if (v9)
    {
      AMCP::Core::Core::get_simple_required_property<1937009955u>(a3, v9, a2);
    }
    else
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
    }
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

void AMCP::Core::Core::get_simple_required_property<1937009955u>(_QWORD *a1, AMCP::Core::Core *a2, int a3)
{
  AMCP::Log::Scope_Registry *v5;
  void *v6;
  NSObject *v7;
  _opaque_pthread_t *v8;
  mach_port_t v9;
  void *__p[2];
  char v11;
  void *v12;
  uint64_t v13;
  char v14;
  uint8_t buf[8];
  _BYTE v16[10];
  __int16 v17;
  int v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  void **v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)buf = 1937009955;
  *(_DWORD *)&buf[4] = a3;
  *(_DWORD *)v16 = 0;
  AMCP::Core::Core::get_typed_property_value<std::vector<unsigned int>,std::enable_if<true,void>>((uint64_t)&v12, a2, (AMCP::Address *)buf);
  if (!v14)
  {
    AMCP::Log::Scope_Registry::get(v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v7 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = pthread_self();
      v9 = pthread_mach_thread_np(v8);
      v11 = 4;
      strcpy((char *)__p, "stm#");
      *(_DWORD *)buf = 67110658;
      *(_DWORD *)&buf[4] = v9;
      *(_WORD *)v16 = 2080;
      *(_QWORD *)&v16[2] = "Core.h";
      v17 = 1024;
      v18 = 391;
      v19 = 2080;
      v20 = "optional_value.operator BOOL() == true";
      v21 = 2080;
      v22 = __p;
      v23 = 1024;
      v24 = a3;
      v25 = 1024;
      v26 = 0;
      _os_log_error_impl(&dword_1B57BA000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
      if (v11 < 0)
        operator delete(__p[0]);
    }
    abort();
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v6 = v12;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a1, v12, v13, (v13 - (uint64_t)v12) >> 2);
  if (v6)
    operator delete(v6);
}

void sub_1B57C8E18(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void AMCP::Core::Core::get_typed_property_value<std::vector<unsigned int>,std::enable_if<true,void>>(uint64_t a1, AMCP::Core::Core *this, AMCP::Address *a3)
{
  _QWORD *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  void (*v17)(_QWORD, __int128 *, _QWORD, _QWORD);
  _QWORD *v18;
  std::__shared_weak_count *v19;

  if (!AMCP::Core::Core::has_property(this, a3))
  {
LABEL_16:
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
    return;
  }
  AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v18, (int8x8_t *)this, (unsigned int *)a3);
  v6 = v18;
  if (!v18)
    goto LABEL_9;
  v7 = AMCP::Implementation::get_type_marker<std::function<std::vector<unsigned int> ()(void)>>();
  if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v6, v7))
  {
    AMCP::Core::Operation::call_function<std::vector<unsigned int>>((uint64_t)&v15, v6);
    v8 = 0;
    *(_OWORD *)a1 = v15;
    *(_QWORD *)(a1 + 16) = v16;
    *(_BYTE *)(a1 + 24) = 1;
    goto LABEL_10;
  }
  v9 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v6, v9))
  {
    AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)&v15, v6);
    AMCP::Thing::convert_to<std::vector<unsigned int>>(&v13, (uint64_t)&v15);
    *(_OWORD *)a1 = v13;
    *(_QWORD *)(a1 + 16) = v14;
    *(_BYTE *)(a1 + 24) = 1;
    if (v17)
      v17(0, &v15, 0, 0);
    v8 = 0;
  }
  else
  {
LABEL_9:
    v8 = 1;
  }
LABEL_10:
  v10 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v8)
    goto LABEL_16;
}

uint64_t AMCP::Core::Operation::call_function<std::vector<unsigned int>>(uint64_t a1, _QWORD *a2)
{
  unint64_t v3;
  AMCP::Log::Scope_Registry *v4;
  AMCP::Log::Scope_Registry *v5;
  uint64_t v6;
  NSObject *v8;
  _opaque_pthread_t *v9;
  mach_port_t v10;
  void *v11;
  NSObject *v12;
  _opaque_pthread_t *v13;
  mach_port_t v14;
  void *exception;
  __int128 v16;
  uint64_t v17;
  uint64_t (**v18)();
  __int128 v19;
  uint64_t v20;
  std::string v21;
  std::runtime_error v22;
  std::runtime_error v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  char v29;
  uint8_t buf[8];
  __int16 v31;
  char *v32;
  __int16 v33;
  int v34;
  const char *v35;
  const char *v36;
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v3 = AMCP::Implementation::get_type_marker<std::function<std::vector<unsigned int> ()(void)>>();
  v4 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(a2, v3);
  if (!v4)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v12 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = pthread_self();
      v14 = pthread_mach_thread_np(v13);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v14;
      v31 = 2080;
      v32 = "Operation.h";
      v33 = 1024;
      v34 = 154;
      _os_log_error_impl(&dword_1B57BA000, v12, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v29);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v21);
    std::runtime_error::runtime_error(&v22, &v21);
    std::runtime_error::runtime_error(&v23, &v22);
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = -1;
    v23.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v24 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v23);
    v35 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = std::vector<unsigned "
          "int>, Argument_Types = <>]";
    v36 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v37 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v16);
    v19 = v16;
    v20 = v17;
    v16 = 0uLL;
    v17 = 0;
    v18 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v18);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v5 = v4;
  if (!*((_QWORD *)v4 + 7)
    || (*(_QWORD *)buf = AMCP::Implementation::get_type_marker<std::function<std::vector<unsigned int> ()(void)>>(),
        (v4 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, _QWORD, uint8_t *))v5 + 7))(4, (uint64_t)v5 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v8 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v9 = pthread_self();
      v10 = pthread_mach_thread_np(v9);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v10;
      v31 = 2080;
      v32 = "Operation.h";
      v33 = 1024;
      v34 = 161;
      _os_log_error_impl(&dword_1B57BA000, v8, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v29);
    v11 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v21);
    std::runtime_error::runtime_error(&v22, &v21);
    std::runtime_error::runtime_error(&v23, &v22);
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = -1;
    v23.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v24 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v23);
    v35 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = std::vector<unsigned "
          "int>, Argument_Types = <>]";
    v36 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v37 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v16);
    v19 = v16;
    v20 = v17;
    v16 = 0uLL;
    v17 = 0;
    v18 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v18);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v11, (uint64_t)buf);
  }
  v6 = *((_QWORD *)v4 + 3);
  if (!v6)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6);
}

void sub_1B57C9358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,std::runtime_error a23,uint64_t a24,uint64_t a25)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *AMCP::Thing::convert_to<std::vector<unsigned int>>(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  std::bad_cast *exception;
  std::bad_cast *v10;
  std::bad_cast *v11;
  std::bad_cast *v12;
  std::bad_cast *v13;
  std::bad_cast *v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[2];
  uint64_t (*v18)(uint64_t, _OWORD *, _QWORD, uint64_t *);
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, _QWORD, _QWORD);

  if (!*(_QWORD *)(a2 + 32))
    goto LABEL_12;
  v4 = AMCP::Implementation::get_type_marker<std::vector<unsigned int>>();
  v5 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a2 + 32);
  v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))v4)
  {
    v19 = v4;
    v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (v6)
    {
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
      return std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a1, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 2);
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v16 = AMCP::Implementation::get_type_marker<std::vector<unsigned int>>();
  memset(v17, 0, sizeof(v17));
  v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v15 = v4;
  v8 = v18(4, v17, 0, &v15);
  if (!v8)
  {
    v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a1, *(const void **)v8, *(_QWORD *)(v8 + 8), (uint64_t)(*(_QWORD *)(v8 + 8) - *(_QWORD *)v8) >> 2);
  if (v18)
    return (_QWORD *)v18(0, v17, 0, 0);
  return result;
}

void sub_1B57C9678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::get_type_marker<std::vector<unsigned int>>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return v1[115];
}

uint64_t AMCP::Implementation::get_type_marker<std::function<std::vector<unsigned int> ()(void)>>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return v1[80];
}

uint64_t AMCP::Device::get_stream(AMCP::Device *a1, int a2, unsigned int a3)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t *v7;
  unint64_t v8;
  int v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  uint64_t v14;
  char v16[28];
  int v17;
  void (**v18)(AMCP::Object *__hidden);
  unsigned int v19;
  std::__shared_weak_count *v20;
  unsigned int *v21;
  unsigned int *v22;
  uint64_t *v23[2];

  v4 = (uint64_t **)*((_QWORD *)a1 + 4);
  v6 = *v4;
  v5 = v4[1];
  v23[0] = v6;
  v23[1] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 1);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  if (a2)
    v9 = 1768845428;
  else
    v9 = 1869968496;
  AMCP::Device::get_stream_list(a1, v9, &v21);
  v10 = v21;
  v11 = v22;
  if (v21 == v22)
  {
LABEL_13:
    v14 = 0;
  }
  else
  {
    v12 = 0;
    v13 = v21;
    while (1)
    {
      AMCP::Stream::Stream((uint64_t)&v18, (uint64_t)v23, *v13);
      AMCP::Stream::get_current_format((AMCP::Stream *)&v18, (uint64_t)v16);
      v12 += v17;
      if (v12 >= a3)
        break;
      v18 = &off_1E696F358;
      if (v20)
        std::__shared_weak_count::__release_weak(v20);
      if (++v13 == v11)
        goto LABEL_13;
    }
    v14 = v19;
    v18 = &off_1E696F358;
    if (v20)
      std::__shared_weak_count::__release_weak(v20);
  }
  if (v10)
    operator delete(v10);
  AMCP::System_Context::~System_Context(v23);
  return v14;
}

uint64_t AMCP::Device::count_channels(AMCP::Device *this, int a2)
{
  unsigned int *v3;
  unsigned int *v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  char v9[28];
  unsigned int v10;
  _QWORD v11[3];
  std::__shared_weak_count *v12;
  unsigned int *v13;
  unsigned int *v14;

  AMCP::Device::get_stream_list(this, a2, &v13);
  v3 = v13;
  v4 = v14;
  if (v13 == v14)
  {
    v5 = 0;
    if (!v13)
      return v5;
    goto LABEL_7;
  }
  v5 = 0;
  v6 = v13;
  do
  {
    AMCP::Stream::Stream((uint64_t)v11, *((_QWORD *)this + 4), *v6);
    AMCP::Stream::get_current_format((AMCP::Stream *)v11, (uint64_t)v9);
    v7 = v10;
    v11[0] = &off_1E696F358;
    if (v12)
      std::__shared_weak_count::__release_weak(v12);
    v5 += v7;
    ++v6;
  }
  while (v6 != v4);
  if (v3)
LABEL_7:
    operator delete(v3);
  return v5;
}

BOOL AMCP::Device::can_be_default_input_device(AMCP::Device *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  AMCP::Core::Core *v5;
  _BOOL8 simple_required;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
  if (v5)
    simple_required = AMCP::Core::Core::get_simple_required_property<1684434036u>(v5, 1768845428);
  else
    simple_required = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return simple_required;
}

BOOL AMCP::Core::Core::get_simple_required_property<1684434036u>(AMCP::Core::Core *a1, int a2)
{
  AMCP::Log::Scope_Registry *v3;
  NSObject *v5;
  _opaque_pthread_t *v6;
  mach_port_t v7;
  void *__p[2];
  char v9;
  uint8_t buf[8];
  _BYTE v11[10];
  __int16 v12;
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  void **v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)buf = 1684434036;
  *(_DWORD *)&buf[4] = a2;
  *(_DWORD *)v11 = 0;
  v3 = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::get_typed_property_value<BOOL,std::enable_if<true,void>>(a1, (const AMCP::Address *)buf);
  if ((unsigned __int16)v3 <= 0xFFu)
  {
    AMCP::Log::Scope_Registry::get(v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v5 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6 = pthread_self();
      v7 = pthread_mach_thread_np(v6);
      v9 = 4;
      strcpy((char *)__p, "dflt");
      *(_DWORD *)buf = 67110658;
      *(_DWORD *)&buf[4] = v7;
      *(_WORD *)v11 = 2080;
      *(_QWORD *)&v11[2] = "Core.h";
      v12 = 1024;
      v13 = 391;
      v14 = 2080;
      v15 = "optional_value.operator BOOL() == true";
      v16 = 2080;
      v17 = __p;
      v18 = 1024;
      v19 = a2;
      v20 = 1024;
      v21 = 0;
      _os_log_error_impl(&dword_1B57BA000, v5, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
      if (v9 < 0)
        operator delete(__p[0]);
    }
    abort();
  }
  return v3 != 0;
}

void sub_1B57C9B34(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t AMCP::Core::Core::get_typed_property_value<BOOL,std::enable_if<true,void>>(AMCP::Core::Core *a1, const AMCP::Address *a2)
{
  _QWORD *v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  _BYTE v13[32];
  void (*v14)(_QWORD, _BYTE *, _QWORD, _QWORD);
  _QWORD *v15;
  std::__shared_weak_count *v16;

  if (!AMCP::Core::Core::has_property(a1, a2))
    goto LABEL_15;
  AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v15, (int8x8_t *)a1, (unsigned int *)a2);
  v4 = v15;
  if (!v15)
    goto LABEL_9;
  v5 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(void)>>();
  if (!std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v4, v5))
  {
    v7 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
    if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v4, v7))
    {
      AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)v13, v4);
      LOBYTE(v4) = AMCP::Thing::convert_to<BOOL>((uint64_t)v13);
      if (v14)
        v14(0, v13, 0, 0);
      goto LABEL_5;
    }
LABEL_9:
    v6 = 1;
    goto LABEL_10;
  }
  LOBYTE(v4) = AMCP::Core::Operation::call_function<BOOL>(v4);
LABEL_5:
  v6 = 0;
LABEL_10:
  v8 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      if (v6)
        goto LABEL_15;
LABEL_17:
      v11 = 1;
      return v4 | (v11 << 8);
    }
  }
  if (!v6)
    goto LABEL_17;
LABEL_15:
  LOBYTE(v4) = 0;
  v11 = 0;
  return v4 | (v11 << 8);
}

uint64_t AMCP::Core::Operation::call_function<BOOL>(_QWORD *a1)
{
  unint64_t v2;
  AMCP::Log::Scope_Registry *v3;
  AMCP::Log::Scope_Registry *v4;
  uint64_t v5;
  NSObject *v7;
  _opaque_pthread_t *v8;
  mach_port_t v9;
  void *v10;
  NSObject *v11;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  void *exception;
  __int128 v15;
  uint64_t v16;
  uint64_t (**v17)();
  __int128 v18;
  uint64_t v19;
  std::string v20;
  std::runtime_error v21;
  std::runtime_error v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  char v28;
  uint8_t buf[8];
  __int16 v30;
  char *v31;
  __int16 v32;
  int v33;
  const char *v34;
  const char *v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v2 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(void)>>();
  v3 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(a1, v2);
  if (!v3)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v11 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v12 = pthread_self();
      v13 = pthread_mach_thread_np(v12);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v13;
      v30 = 2080;
      v31 = "Operation.h";
      v32 = 1024;
      v33 = 154;
      _os_log_error_impl(&dword_1B57BA000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v28);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v20);
    std::runtime_error::runtime_error(&v21, &v20);
    std::runtime_error::runtime_error(&v22, &v21);
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = -1;
    v22.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v23 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v22);
    v34 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = BOOL, Argument_Types = <>]";
    v35 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v36 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v15);
    v18 = v15;
    v19 = v16;
    v15 = 0uLL;
    v16 = 0;
    v17 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v17);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v4 = v3;
  if (!*((_QWORD *)v3 + 7)
    || (*(_QWORD *)buf = AMCP::Implementation::get_type_marker<std::function<BOOL ()(void)>>(),
        (v3 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, _QWORD, uint8_t *))v4 + 7))(4, (uint64_t)v4 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v7 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = pthread_self();
      v9 = pthread_mach_thread_np(v8);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v9;
      v30 = 2080;
      v31 = "Operation.h";
      v32 = 1024;
      v33 = 161;
      _os_log_error_impl(&dword_1B57BA000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v28);
    v10 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v20);
    std::runtime_error::runtime_error(&v21, &v20);
    std::runtime_error::runtime_error(&v22, &v21);
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = -1;
    v22.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v23 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v22);
    v34 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = BOOL, Argument_Types = <>]";
    v35 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v36 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v15);
    v18 = v15;
    v19 = v16;
    v15 = 0uLL;
    v16 = 0;
    v17 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v17);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v10, (uint64_t)buf);
  }
  v5 = *((_QWORD *)v3 + 3);
  if (!v5)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
}

void sub_1B57CA038(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,std::runtime_error a23,uint64_t a24,uint64_t a25)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

BOOL AMCP::Thing::convert_to<BOOL>(uint64_t a1)
{
  uint64_t type;
  void (*v3)(uint64_t, uint64_t, _QWORD, _QWORD);
  unsigned __int8 *v4;
  int v5;
  unsigned __int8 *v6;
  std::bad_cast *exception;
  std::bad_cast *v9;
  std::bad_cast *v10;
  std::bad_cast *v11;
  std::bad_cast *v12;
  std::bad_cast *v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t (*v17)(uint64_t, _OWORD *, _QWORD, uint64_t *);
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, _QWORD, _QWORD);

  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_12;
  type = AMCP::Implementation::get_type_marker<BOOL>();
  v3 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a1 + 32);
  v19 = 0;
  if (v3)
  {
    v3(3, a1, 0, &v19);
    v3 = v19;
  }
  if (v3 == (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))type)
  {
    v18 = type;
    v4 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a1 + 32))(4, a1, 0, &v18);
    if (v4)
    {
      v5 = *v4;
      return v5 != 0;
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v9 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v9, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v15 = AMCP::Implementation::get_type_marker<BOOL>();
  memset(v16, 0, sizeof(v16));
  v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a1 + 32))(6, a1, v16, &v15);
  if (!v17)
  {
    v10 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v11 = std::bad_cast::bad_cast(v10);
    __cxa_throw(v11, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v14 = type;
  v6 = (unsigned __int8 *)v17(4, v16, 0, &v14);
  if (!v6)
  {
    v12 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v13 = std::bad_cast::bad_cast(v12);
    __cxa_throw(v13, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v5 = *v6;
  if (v17)
    v17(0, v16, 0, 0);
  return v5 != 0;
}

void sub_1B57CA324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::get_type_marker<BOOL>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      AMCP::Implementation::get_type_marker<BOOL>(void)::s_type_marker = AMCP::Implementation::generate_type_marker(MEMORY[0x1E0DE4EC0], v4);
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return v1[95];
}

uint64_t AMCP::Implementation::get_type_marker<std::function<BOOL ()(void)>>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return v1[2];
}

BOOL AMCP::Device::can_be_default_output_device(AMCP::Device *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  AMCP::Core::Core *v5;
  _BOOL8 simple_required;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
  if (v5)
    simple_required = AMCP::Core::Core::get_simple_required_property<1684434036u>(v5, 1869968496);
  else
    simple_required = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return simple_required;
}

BOOL AMCP::Device::can_be_default_system_output_device(AMCP::Device *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  AMCP::Core::Core *v5;
  AMCP::Log::Scope_Registry *v6;
  _BOOL8 v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  NSObject *v11;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  void *__p[2];
  char v15;
  _BYTE buf[10];
  char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  void **v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
  if (v5)
  {
    strcpy(buf, "tlfsptuo");
    buf[9] = 0;
    LOWORD(v17) = 0;
    v6 = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::get_typed_property_value<BOOL,std::enable_if<true,void>>(v5, (const AMCP::Address *)buf);
    if ((unsigned __int16)v6 <= 0xFFu)
    {
      AMCP::Log::Scope_Registry::get(v6);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v11 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        v12 = pthread_self();
        v13 = pthread_mach_thread_np(v12);
        v15 = 4;
        strcpy((char *)__p, "sflt");
        *(_DWORD *)buf = 67110658;
        *(_DWORD *)&buf[4] = v13;
        *(_WORD *)&buf[8] = 2080;
        v17 = "Core.h";
        v18 = 1024;
        v19 = 391;
        v20 = 2080;
        v21 = "optional_value.operator BOOL() == true";
        v22 = 2080;
        v23 = __p;
        v24 = 1024;
        v25 = 1869968496;
        v26 = 1024;
        v27 = 0;
        _os_log_error_impl(&dword_1B57BA000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
        if (v15 < 0)
          operator delete(__p[0]);
      }
      abort();
    }
    v7 = v6 != 0;
  }
  else
  {
    v7 = 0;
  }
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v7;
}

void sub_1B57CA674(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t AMCP::Device::wants_display_routing(AMCP::Device *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  AMCP::Core::Core *v5;
  __int16 v6;
  unsigned __int8 v7;
  int v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v12;
  int v13;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v2 && (v3 = std::__shared_weak_count::lock(v2)) != 0)
  {
    v4 = v3;
    v5 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
    if (v5)
    {
      v12 = 0x676C6F6264727465;
      v13 = 0;
      v6 = AMCP::Core::Core::get_typed_property_value<BOOL,std::enable_if<true,void>>(v5, (const AMCP::Address *)&v12);
      v7 = v6;
      v8 = HIBYTE(v6);
    }
    else
    {
      v8 = 0;
      v7 = 0;
    }
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  return v7 | (v8 << 8);
}

uint64_t AMCP::Device::wants_display_routing(AMCP::Device *this, char a2)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  int8x8_t *v7;
  _QWORD *v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v18;
  int v19;
  _BYTE v20[32];
  void (*v21)(_QWORD, _BYTE *, _QWORD, _QWORD);
  _QWORD *v22;
  std::__shared_weak_count *v23;

  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v4)
    return a2 & 1;
  v5 = std::__shared_weak_count::lock(v4);
  if (!v5)
    return a2 & 1;
  v6 = v5;
  v7 = (int8x8_t *)*((_QWORD *)this + 2);
  if (v7)
  {
    v18 = 0x676C6F6264727465;
    v19 = 0;
    if (AMCP::Core::Core::has_property((AMCP::Core::Core *)v7, (const AMCP::Address *)&v18))
    {
      AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v22, v7, (unsigned int *)&v18);
      v8 = v22;
      if (v22)
      {
        v9 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(void)>>();
        if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v9))
        {
          LOBYTE(v8) = AMCP::Core::Operation::call_function<BOOL>(v8);
LABEL_8:
          v10 = 0;
          goto LABEL_13;
        }
        v11 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
        if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v11))
        {
          AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)v20, v8);
          LOBYTE(v8) = AMCP::Thing::convert_to<BOOL>((uint64_t)v20);
          if (v21)
            v21(0, v20, 0, 0);
          goto LABEL_8;
        }
      }
      v10 = 1;
LABEL_13:
      v12 = v23;
      if (v23)
      {
        p_shared_owners = (unint64_t *)&v23->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      if (!v10)
        a2 = (char)v8;
    }
  }
  v15 = (unint64_t *)&v6->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return a2 & 1;
}

void AMCP::Device::get_channel_layout(AMCP::Device *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  int8x8_t *v9;
  _QWORD *v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unsigned int v19[3];
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  void (*v24)(_QWORD, __int128 *, _QWORD, _QWORD);
  _QWORD *v25;
  std::__shared_weak_count *v26;

  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v5 || (v7 = std::__shared_weak_count::lock(v5)) == 0)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 24) = 0;
    return;
  }
  v8 = v7;
  v9 = (int8x8_t *)*((_QWORD *)this + 2);
  if (v9)
  {
    v19[0] = 1936879204;
    v19[1] = a2;
    v19[2] = 0;
    if (AMCP::Core::Core::has_property((AMCP::Core::Core *)v9, (const AMCP::Address *)v19))
    {
      AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v25, v9, v19);
      v10 = v25;
      if (v25)
      {
        v11 = AMCP::Implementation::get_type_marker<std::function<CA::ChannelLayout ()(void)>>();
        if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v10, v11))
        {
          AMCP::Core::Operation::call_function<CA::ChannelLayout>((uint64_t)&v22, v10);
          v12 = 0;
          *(_OWORD *)a3 = v22;
          *(_QWORD *)(a3 + 16) = v23;
          *(_BYTE *)(a3 + 24) = 1;
          goto LABEL_14;
        }
        v13 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
        if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v10, v13))
        {
          AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)&v22, v10);
          AMCP::Thing::convert_to<CA::ChannelLayout>(&v20, (uint64_t)&v22);
          *(_OWORD *)a3 = v20;
          *(_QWORD *)(a3 + 16) = v21;
          *(_BYTE *)(a3 + 24) = 1;
          if (v24)
            v24(0, &v22, 0, 0);
          v12 = 0;
LABEL_14:
          v14 = v26;
          if (v26)
          {
            p_shared_owners = (unint64_t *)&v26->__shared_owners_;
            do
              v16 = __ldaxr(p_shared_owners);
            while (__stlxr(v16 - 1, p_shared_owners));
            if (!v16)
            {
              ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
              std::__shared_weak_count::__release_weak(v14);
            }
          }
          if (!v12)
            goto LABEL_21;
          goto LABEL_20;
        }
      }
      v12 = 1;
      goto LABEL_14;
    }
  }
LABEL_20:
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 24) = 0;
LABEL_21:
  v17 = (unint64_t *)&v8->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

uint64_t AMCP::Core::Operation::call_function<CA::ChannelLayout>(uint64_t a1, _QWORD *a2)
{
  unint64_t v3;
  AMCP::Log::Scope_Registry *v4;
  AMCP::Log::Scope_Registry *v5;
  uint64_t v6;
  NSObject *v8;
  _opaque_pthread_t *v9;
  mach_port_t v10;
  void *v11;
  NSObject *v12;
  _opaque_pthread_t *v13;
  mach_port_t v14;
  void *exception;
  __int128 v16;
  uint64_t v17;
  uint64_t (**v18)();
  __int128 v19;
  uint64_t v20;
  std::string v21;
  std::runtime_error v22;
  std::runtime_error v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  char v29;
  uint8_t buf[8];
  __int16 v31;
  char *v32;
  __int16 v33;
  int v34;
  const char *v35;
  const char *v36;
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v3 = AMCP::Implementation::get_type_marker<std::function<CA::ChannelLayout ()(void)>>();
  v4 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(a2, v3);
  if (!v4)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v12 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = pthread_self();
      v14 = pthread_mach_thread_np(v13);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v14;
      v31 = 2080;
      v32 = "Operation.h";
      v33 = 1024;
      v34 = 154;
      _os_log_error_impl(&dword_1B57BA000, v12, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v29);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v21);
    std::runtime_error::runtime_error(&v22, &v21);
    std::runtime_error::runtime_error(&v23, &v22);
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = -1;
    v23.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v24 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v23);
    v35 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = CA::ChannelLayout, Ar"
          "gument_Types = <>]";
    v36 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v37 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v16);
    v19 = v16;
    v20 = v17;
    v16 = 0uLL;
    v17 = 0;
    v18 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v18);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v5 = v4;
  if (!*((_QWORD *)v4 + 7)
    || (*(_QWORD *)buf = AMCP::Implementation::get_type_marker<std::function<CA::ChannelLayout ()(void)>>(),
        (v4 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, _QWORD, uint8_t *))v5 + 7))(4, (uint64_t)v5 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v8 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v9 = pthread_self();
      v10 = pthread_mach_thread_np(v9);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v10;
      v31 = 2080;
      v32 = "Operation.h";
      v33 = 1024;
      v34 = 161;
      _os_log_error_impl(&dword_1B57BA000, v8, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v29);
    v11 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v21);
    std::runtime_error::runtime_error(&v22, &v21);
    std::runtime_error::runtime_error(&v23, &v22);
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = -1;
    v23.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v24 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v23);
    v35 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = CA::ChannelLayout, Ar"
          "gument_Types = <>]";
    v36 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v37 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v16);
    v19 = v16;
    v20 = v17;
    v16 = 0uLL;
    v17 = 0;
    v18 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v18);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v11, (uint64_t)buf);
  }
  v6 = *((_QWORD *)v4 + 3);
  if (!v6)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6);
}

void sub_1B57CAE54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,std::runtime_error a23,uint64_t a24,uint64_t a25)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *AMCP::Thing::convert_to<CA::ChannelLayout>(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  std::bad_cast *exception;
  std::bad_cast *v10;
  std::bad_cast *v11;
  std::bad_cast *v12;
  std::bad_cast *v13;
  std::bad_cast *v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[2];
  uint64_t (*v18)(uint64_t, _OWORD *, _QWORD, uint64_t *);
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, _QWORD, _QWORD);

  if (!*(_QWORD *)(a2 + 32))
    goto LABEL_12;
  v4 = AMCP::Implementation::get_type_marker<CA::ChannelLayout>();
  v5 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a2 + 32);
  v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))v4)
  {
    v19 = v4;
    v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (v6)
    {
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
      return std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(a1, *(const void **)v6, *(_QWORD *)(v6 + 8), *(_QWORD *)(v6 + 8) - *(_QWORD *)v6);
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v16 = AMCP::Implementation::get_type_marker<CA::ChannelLayout>();
  memset(v17, 0, sizeof(v17));
  v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v15 = v4;
  v8 = v18(4, v17, 0, &v15);
  if (!v8)
  {
    v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(a1, *(const void **)v8, *(_QWORD *)(v8 + 8), *(_QWORD *)(v8 + 8) - *(_QWORD *)v8);
  if (v18)
    return (_QWORD *)v18(0, v17, 0, 0);
  return result;
}

void sub_1B57CB16C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::get_type_marker<CA::ChannelLayout>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return v1[155];
}

_QWORD *std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(_QWORD *result, const void *a2, uint64_t a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (__sz)
  {
    v6 = result;
    result = std::vector<char>::__vallocate[abi:ne180100](result, __sz);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B57CB24C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<char>::__vallocate[abi:ne180100](_QWORD *a1, size_t __sz)
{
  char *result;

  if ((__sz & 0x8000000000000000) != 0)
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

uint64_t AMCP::Implementation::get_type_marker<std::function<CA::ChannelLayout ()(void)>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const std::type_info *v4;

  v1 = &unk_1EF130000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EF130000;
    if (v3)
    {
      v1 = (_QWORD *)&unk_1EF130000;
    }
  }
  return v1[268];
}

void AMCP::Device::get_channel_layout(AMCP::Device *this@<X0>, const CA::ChannelLayout *a2@<X2>, unsigned int a3@<W1>, _QWORD *a4@<X8>)
{
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v9;
  int8x8_t *v10;
  _QWORD *v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unsigned int v20[3];
  _BYTE v21[32];
  void (*v22)(_QWORD, _BYTE *, _QWORD, _QWORD);
  _QWORD *v23;
  std::__shared_weak_count *v24;

  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v7)
  {
    v9 = 0;
    goto LABEL_10;
  }
  v9 = std::__shared_weak_count::lock(v7);
  if (!v9 || (v10 = (int8x8_t *)*((_QWORD *)this + 2)) == 0)
  {
LABEL_10:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(a4, *(const void **)a2, *((_QWORD *)a2 + 1), *((_QWORD *)a2 + 1) - *(_QWORD *)a2);
    if (!v9)
      return;
    goto LABEL_23;
  }
  v20[0] = 1936879204;
  v20[1] = a3;
  v20[2] = 0;
  if (AMCP::Core::Core::has_property((AMCP::Core::Core *)v10, (const AMCP::Address *)v20))
  {
    AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v23, v10, v20);
    v11 = v23;
    if (v23)
    {
      v12 = AMCP::Implementation::get_type_marker<std::function<CA::ChannelLayout ()(void)>>();
      if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v11, v12))
      {
        AMCP::Core::Operation::call_function<CA::ChannelLayout>((uint64_t)a4, v11);
LABEL_8:
        v13 = 0;
LABEL_16:
        v15 = v24;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v17 = __ldaxr(p_shared_owners);
          while (__stlxr(v17 - 1, p_shared_owners));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        if (!v13)
          goto LABEL_23;
        goto LABEL_22;
      }
      v14 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
      if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v11, v14))
      {
        AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)v21, v11);
        AMCP::Thing::convert_to<CA::ChannelLayout>(a4, (uint64_t)v21);
        if (v22)
          v22(0, v21, 0, 0);
        goto LABEL_8;
      }
    }
    v13 = 1;
    goto LABEL_16;
  }
LABEL_22:
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(a4, *(const void **)a2, *((_QWORD *)a2 + 1), *((_QWORD *)a2 + 1) - *(_QWORD *)a2);
LABEL_23:
  v18 = (unint64_t *)&v9->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void ___Z34LogVolumeChangeForClientSideDeviceNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj26AudioObjectPropertyAddressjPKv_block_invoke(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  _QWORD *v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  _QWORD *v17;
  __int16 v18;
  _QWORD *v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  _QWORD *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v2 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v2 = (_QWORD *)*v2;
    v3 = (_QWORD *)(a1 + 64);
    if (*(char *)(a1 + 87) < 0)
      v3 = (_QWORD *)*v3;
    v4 = (_QWORD *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0)
      v4 = (_QWORD *)*v4;
    v5 = *(_QWORD *)(a1 + 56);
    v6 = *(_QWORD *)(a1 + 112);
    v7 = (_QWORD *)(a1 + 120);
    if (*(char *)(a1 + 143) < 0)
      v7 = (_QWORD *)*v7;
    v8 = 136316930;
    v9 = "HALB_Logging.cpp";
    v10 = 1024;
    v11 = 31;
    v12 = 2080;
    v13 = v2;
    v14 = 2048;
    v15 = v5;
    v16 = 2080;
    v17 = v3;
    v18 = 2080;
    v19 = v4;
    v20 = 2048;
    v21 = v6;
    v22 = 2080;
    v23 = v7;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  LogVolumeChangeForClientSideDevice from %s: device id %lu, property address ['%s', '%s', %lu], volume %s", (uint8_t *)&v8, 0x4Eu);
  }
}

void __copy_helper_block_e8_32c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE88c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE120c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;

  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v4;
  }
  if (*(char *)(a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 64), *(const std::string::value_type **)(a2 + 64), *(_QWORD *)(a2 + 72));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = v5;
  }
  if (*(char *)(a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 88), *(const std::string::value_type **)(a2 + 88), *(_QWORD *)(a2 + 96));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = v6;
  }
  v7 = (std::string *)(a1 + 120);
  if (*(char *)(a2 + 143) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a2 + 120), *(_QWORD *)(a2 + 128));
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
}

void sub_1B57CB6E8(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v2;
  void **v3;
  void **v4;

  if (v2[111] < 0)
    operator delete(*v4);
  if (v2[87] < 0)
    operator delete(*v3);
  if (v2[55] < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE88c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE120c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 143) < 0)
    operator delete(*(void **)(a1 + 120));
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void LogVolumeChangeForServerSideControl(uint64_t a1, unsigned int a2, unint64_t a3, unsigned int a4, int a5, float *a6, HALS_ObjectMap *a7, unsigned int a8, unsigned int a9, uint64_t a10)
{
  uint64_t v18;
  HALS_Object *v19;
  HALS_ObjectMap *v20;
  char *v21;
  _QWORD v22[4];
  std::string v23;
  uint64_t v24;
  void *v25;
  char v26;
  void *v27;
  char v28;
  uint64_t v29;
  std::string v30;
  std::string v31;
  void *v32;
  char v33;
  uint64_t v34;
  std::string __p;
  std::string v36;
  std::string v37;

  std::string::basic_string[abi:ne180100]<0>(&v37, "(nullptr)");
  if (a5 == 4 && a6)
  {
    std::to_string(&v36, *a6);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v37.__r_.__value_.__l.__data_);
    v37 = v36;
  }
  v18 = HALS_ObjectMap::CopyObjectByObjectID(a7);
  v20 = (HALS_ObjectMap *)v18;
  if (v18)
  {
    v21 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 216))(v18);
    std::string::basic_string[abi:ne180100]<0>(&v36, v21);
    v22[0] = MEMORY[0x1E0C809B0];
    v22[1] = 1174405120;
    v22[2] = ___Z35LogVolumeChangeForServerSideControlNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj26AudioObjectPropertyAddressjPKvjjjS5__block_invoke;
    v22[3] = &__block_descriptor_tmp_3;
    if (*(char *)(a1 + 23) < 0)
      std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    else
      v23 = *(std::string *)a1;
    v24 = a2;
    v25 = (void *)bswap32(a3);
    v26 = 5;
    v27 = (void *)((a3 >> 40) & 0xFF00 | HIBYTE(a3) | (a3 >> 24) & 0xFF0000 | (a3 >> 8) & 0xFF000000);
    v28 = 5;
    v29 = a4;
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v30, v36.__r_.__value_.__l.__data_, v36.__r_.__value_.__l.__size_);
    else
      v30 = v36;
    if (*(char *)(a10 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)a10, *(_QWORD *)(a10 + 8));
    }
    else
    {
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)a10;
      v31.__r_.__value_.__r.__words[2] = *(_QWORD *)(a10 + 16);
    }
    v32 = (void *)bswap32(a8);
    v33 = 5;
    v34 = a9;
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v37.__r_.__value_.__l.__data_, v37.__r_.__value_.__l.__size_);
    else
      __p = v37;
    AMCP::Utility::Dispatch_Queue::async_on_global(v22);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v33 < 0)
      operator delete(v32);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
    if (v28 < 0)
      operator delete(v27);
    if (v26 < 0)
      operator delete(v25);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v36.__r_.__value_.__l.__data_);
  }
  HALS_ObjectMap::ReleaseObject(v20, v19);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
}

void sub_1B57CBA50(_Unwind_Exception *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  HALS_ObjectMap *v51;
  uint64_t v52;

  if (a51 < 0)
    operator delete(__p);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
    operator delete(a34);
  if (a32 < 0)
    operator delete(a27);
  if (a26 < 0)
    operator delete(a21);
  if (a19 < 0)
    operator delete(a14);
  if (*(char *)(v52 - 113) < 0)
    operator delete(*(void **)(v52 - 136));
  HALS_ObjectMap::ReleaseObject(v51, a2);
  if (*(char *)(v52 - 89) < 0)
    operator delete(*(void **)(v52 - 112));
  _Unwind_Resume(a1);
}

void ___Z35LogVolumeChangeForServerSideControlNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj26AudioObjectPropertyAddressjPKvjjjS5__block_invoke(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  _QWORD *v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  _QWORD *v21;
  __int16 v22;
  _QWORD *v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  _QWORD *v27;
  __int16 v28;
  _QWORD *v29;
  __int16 v30;
  _QWORD *v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  _QWORD *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v2 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v2 = (_QWORD *)*v2;
    v3 = (_QWORD *)(a1 + 64);
    if (*(char *)(a1 + 87) < 0)
      v3 = (_QWORD *)*v3;
    v4 = (_QWORD *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0)
      v4 = (_QWORD *)*v4;
    v5 = (_QWORD *)(a1 + 120);
    if (*(char *)(a1 + 143) < 0)
      v5 = (_QWORD *)*v5;
    v6 = (_QWORD *)(a1 + 144);
    if (*(char *)(a1 + 167) < 0)
      v6 = (_QWORD *)*v6;
    v7 = (_QWORD *)(a1 + 168);
    if (*(char *)(a1 + 191) < 0)
      v7 = (_QWORD *)*v7;
    v8 = *(_QWORD *)(a1 + 56);
    v9 = *(_QWORD *)(a1 + 112);
    v10 = *(_QWORD *)(a1 + 192);
    v11 = (_QWORD *)(a1 + 200);
    if (*(char *)(a1 + 223) < 0)
      v11 = (_QWORD *)*v11;
    v12 = 136317954;
    v13 = "HALB_Logging.cpp";
    v14 = 1024;
    v15 = 53;
    v16 = 2080;
    v17 = v2;
    v18 = 2048;
    v19 = v8;
    v20 = 2080;
    v21 = v3;
    v22 = 2080;
    v23 = v4;
    v24 = 2048;
    v25 = v9;
    v26 = 2080;
    v27 = v5;
    v28 = 2080;
    v29 = v6;
    v30 = 2080;
    v31 = v7;
    v32 = 2048;
    v33 = v10;
    v34 = 2080;
    v35 = v11;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  LogVolumeChangeForServerSideControl from %s: control id %lu, property address ['%s', '%s', %lu], owning device UID %s, control type %s, control scope '%s', control element %lu, volume %s", (uint8_t *)&v12, 0x76u);
  }
}

void __copy_helper_block_e8_32c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE88c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE120c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE144c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE168c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE200c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;

  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v4;
  }
  if (*(char *)(a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 64), *(const std::string::value_type **)(a2 + 64), *(_QWORD *)(a2 + 72));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = v5;
  }
  if (*(char *)(a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 88), *(const std::string::value_type **)(a2 + 88), *(_QWORD *)(a2 + 96));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = v6;
  }
  if (*(char *)(a2 + 143) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 120), *(const std::string::value_type **)(a2 + 120), *(_QWORD *)(a2 + 128));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 120) = v7;
  }
  if (*(char *)(a2 + 167) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 144), *(const std::string::value_type **)(a2 + 144), *(_QWORD *)(a2 + 152));
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 144) = v8;
  }
  if (*(char *)(a2 + 191) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 168), *(const std::string::value_type **)(a2 + 168), *(_QWORD *)(a2 + 176));
  }
  else
  {
    v9 = *(_OWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 168) = v9;
  }
  v10 = (std::string *)(a1 + 200);
  if (*(char *)(a2 + 223) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)(a2 + 200), *(_QWORD *)(a2 + 208));
  }
  else
  {
    v11 = *(_OWORD *)(a2 + 200);
    *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
  }
}

void sub_1B57CBE24(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;
  void **v7;

  if (v2[191] < 0)
    operator delete(*v7);
  if (v2[167] < 0)
    operator delete(*v6);
  if (v2[143] < 0)
    operator delete(*v5);
  if (v2[111] < 0)
    operator delete(*v4);
  if (v2[87] < 0)
    operator delete(*v3);
  if (v2[55] < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE88c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE120c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE144c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE168c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE200c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 223) < 0)
    operator delete(*(void **)(a1 + 200));
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  if (*(char *)(a1 + 167) < 0)
    operator delete(*(void **)(a1 + 144));
  if (*(char *)(a1 + 143) < 0)
    operator delete(*(void **)(a1 + 120));
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void AMCP::Graph::Meta_Timebase::~Meta_Timebase(void **this)
{
  AMCP::Graph::Meta_Timebase::~Meta_Timebase(this);
  JUMPOUT(0x1B5E50688);
}

{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(this + 5));
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

uint64_t AMCP::Graph::Meta_Timebase::get_clock_id(AMCP::Graph::Meta_Timebase *this)
{
  return (uint64_t)this + 8;
}

uint64_t AMCP::Graph::Meta_Timebase::get_underlying_device_uid(AMCP::Graph::Meta_Timebase *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 24))(*((_QWORD *)this + 5));
}

double AMCP::Graph::Meta_Timebase::get_current_time@<D0>(AMCP::Graph::Meta_Timebase *this@<X0>, uint64_t a2@<X8>)
{
  double v4;
  double v5;
  double v6;
  double result;

  (*(void (**)(_QWORD *__return_ptr))(**((_QWORD **)this + 5) + 32))((_QWORD *)a2);
  v4 = *(double *)a2;
  v5 = *((double *)this + 4);
  *(double *)a2 = v4
                * (v5
                 / (*(double (**)(_QWORD))(**((_QWORD **)this + 5) + 152))(*((_QWORD *)this + 5)));
  v6 = *((double *)this + 4);
  result = *(double *)(a2 + 16)
         * (v6
          / (*(double (**)(_QWORD))(**((_QWORD **)this + 5) + 152))(*((_QWORD *)this + 5)));
  *(double *)(a2 + 16) = result;
  return result;
}

double AMCP::Graph::Meta_Timebase::get_last_zero_time_stamp@<D0>(AMCP::Graph::Meta_Timebase *this@<X0>, uint64_t a2@<X8>)
{
  double v4;
  double v5;
  double v6;
  double result;

  (*(void (**)(_QWORD *__return_ptr))(**((_QWORD **)this + 5) + 40))((_QWORD *)a2);
  v4 = *(double *)a2;
  v5 = *((double *)this + 4);
  *(double *)a2 = v4
                * (v5
                 / (*(double (**)(_QWORD))(**((_QWORD **)this + 5) + 152))(*((_QWORD *)this + 5)));
  v6 = *((double *)this + 4);
  result = *(double *)(a2 + 16)
         * (v6
          / (*(double (**)(_QWORD))(**((_QWORD **)this + 5) + 152))(*((_QWORD *)this + 5)));
  *(double *)(a2 + 16) = result;
  return result;
}

uint64_t AMCP::Graph::Meta_Timebase::get_clock_domain(AMCP::Graph::Meta_Timebase *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 48))(*((_QWORD *)this + 5));
}

uint64_t AMCP::Graph::Meta_Timebase::convert_sample_to_host_time(AMCP::Graph::Meta_Timebase *this, double a2)
{
  uint64_t v2;
  double v3;

  v2 = *((_QWORD *)this + 5);
  v3 = (*(double (**)(uint64_t))(*(_QWORD *)v2 + 152))(v2) / *((double *)this + 4) * a2;
  return (*(uint64_t (**)(uint64_t, double))(*(_QWORD *)v2 + 56))(v2, v3);
}

double AMCP::Graph::Meta_Timebase::convert_host_to_sample_time(AMCP::Graph::Meta_Timebase *this)
{
  double v2;
  double v3;

  v2 = (*(double (**)(_QWORD))(**((_QWORD **)this + 5) + 64))(*((_QWORD *)this + 5));
  v3 = *((double *)this + 4);
  return v2 * (v3 / (*(double (**)(_QWORD))(**((_QWORD **)this + 5) + 152))(*((_QWORD *)this + 5)));
}

double AMCP::Graph::Meta_Timebase::get_host_ticks_per_frame(AMCP::Graph::Meta_Timebase *this)
{
  double v2;

  v2 = (*(double (**)(_QWORD))(**((_QWORD **)this + 5) + 72))(*((_QWORD *)this + 5));
  return v2
       * ((*(double (**)(_QWORD))(**((_QWORD **)this + 5) + 152))(*((_QWORD *)this + 5))
        / *((double *)this + 4));
}

uint64_t AMCP::Graph::Meta_Timebase::start(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 80))(*(_QWORD *)(a1 + 40));
}

uint64_t AMCP::Graph::Meta_Timebase::begin_cycle(AMCP::Graph::Meta_Timebase *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 88))(*((_QWORD *)this + 5));
}

uint64_t AMCP::Graph::Meta_Timebase::advance(uint64_t a1, double a2)
{
  uint64_t v2;
  double v3;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = (*(double (**)(uint64_t))(*(_QWORD *)v2 + 152))(v2)
     / *(double *)(a1 + 32)
     * (double)(uint64_t)floor(a2);
  return (*(uint64_t (**)(uint64_t, double))(*(_QWORD *)v2 + 96))(v2, v3);
}

uint64_t AMCP::Graph::Meta_Timebase::advance_to_time(uint64_t a1, double a2)
{
  uint64_t v2;
  double v3;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = (*(double (**)(uint64_t))(*(_QWORD *)v2 + 152))(v2)
     / *(double *)(a1 + 32)
     * (double)(uint64_t)floor(a2);
  return (*(uint64_t (**)(uint64_t, double))(*(_QWORD *)v2 + 104))(v2, v3);
}

uint64_t AMCP::Graph::Meta_Timebase::stop(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 112))(*(_QWORD *)(a1 + 40));
}

uint64_t AMCP::Graph::Meta_Timebase::is_running(AMCP::Graph::Meta_Timebase *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 120))(*((_QWORD *)this + 5));
}

uint64_t AMCP::Graph::Meta_Timebase::get_state(AMCP::Graph::Meta_Timebase *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 128))(*((_QWORD *)this + 5));
}

uint64_t AMCP::Graph::Meta_Timebase::get_anchor_time(AMCP::Graph::Meta_Timebase *this)
{
  char v2;
  double v3;
  char v4;
  double v5;
  uint64_t result;

  (*(void (**)(_QWORD))(**((_QWORD **)this + 5) + 136))(*((_QWORD *)this + 5));
  if (v2)
  {
    v3 = COERCE_DOUBLE((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 136))(*((_QWORD *)this + 5)));
    if (!v4)
      std::__throw_bad_optional_access[abi:ne180100]();
    v5 = *((double *)this + 4);
    *(double *)&result = v5
                       / (*(double (**)(_QWORD))(**((_QWORD **)this + 5) + 152))(*((_QWORD *)this + 5))
                       * (double)(uint64_t)floor(v3);
  }
  else
  {
    *(double *)&result = 0.0;
  }
  return result;
}

unint64_t AMCP::Graph::Meta_Timebase::get_engine_info(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  double v4;
  uint64_t v5;
  double v6;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 144))(*(_QWORD *)(a1 + 40));
  v3 = HIDWORD(v2);
  v4 = *(double *)(a1 + 32);
  v5 = (v4
                    / (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 152))(*(_QWORD *)(a1 + 40))
                    * (double)v2);
  v6 = *(double *)(a1 + 32);
  return v5 | ((unint64_t)(v6
                                              / (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 152))(*(_QWORD *)(a1 + 40))
                                              * (double)v3) << 32);
}

double AMCP::Graph::Meta_Timebase::get_sample_rate(AMCP::Graph::Meta_Timebase *this)
{
  return *((double *)this + 4);
}

uint64_t AMCP::Graph::Meta_Timebase::get_rate_scalar(AMCP::Graph::Meta_Timebase *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 160))(*((_QWORD *)this + 5));
}

uint64_t AMCP::Graph::Meta_Timebase::is_valid(AMCP::Graph::Meta_Timebase *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 168))(*((_QWORD *)this + 5));
}

uint64_t AMCP::Graph::Meta_Timebase::supports_past_data(AMCP::Graph::Meta_Timebase *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 176))(*((_QWORD *)this + 5));
}

uint64_t AMCP::Graph::Meta_Timebase::available_past_data(AMCP::Graph::Meta_Timebase *this)
{
  unsigned int v2;
  double v3;

  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 184))(*((_QWORD *)this + 5));
  v3 = *((double *)this + 4);
  return (v3
                      / (*(double (**)(_QWORD))(**((_QWORD **)this + 5) + 152))(*((_QWORD *)this + 5))
                      * (double)v2);
}

uint64_t AMCP::Graph::Meta_Timebase::get_engine_ptr(AMCP::Graph::Meta_Timebase *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 192))(*((_QWORD *)this + 5));
}

AMCP::Log::Scope_Registry *AMCP::Graph::Meta_Timebase::wait_for_time_to_start(uint64_t a1)
{
  AMCP::Log::Scope_Registry *v2;
  AMCP::Log::Scope_Registry *v3;
  std::__shared_weak_count *v4;
  NSObject *v5;
  unint64_t *v6;
  unint64_t v7;
  _opaque_pthread_t *v9;
  mach_port_t v10;
  void **v11;
  void *__p[2];
  char v13;
  uint8_t buf[8];
  _BYTE v15[10];
  __int16 v16;
  int v17;
  __int16 v18;
  void **v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v2 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 200))(*(_QWORD *)(a1 + 40));
  v3 = v2;
  if ((_DWORD)v2 == 1)
  {
    AMCP::Log::Scope_Registry::get(v2);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v4 = *(std::__shared_weak_count **)v15;
    v5 = **(NSObject ***)buf;
    if (*(_QWORD *)v15)
    {
      v6 = (unint64_t *)(*(_QWORD *)v15 + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v9 = pthread_self();
      v10 = pthread_mach_thread_np(v9);
      (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1 + 40) + 24))(__p);
      if (v13 >= 0)
        v11 = __p;
      else
        v11 = (void **)__p[0];
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v10;
      *(_WORD *)v15 = 2080;
      *(_QWORD *)&v15[2] = "Meta_Timebase.cpp";
      v16 = 1024;
      v17 = 143;
      v18 = 2080;
      v19 = v11;
      _os_log_error_impl(&dword_1B57BA000, v5, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Failure to start underlying hardware for Meta_Timebase: %s", buf, 0x22u);
      if (v13 < 0)
        operator delete(__p[0]);
    }
  }
  return v3;
}

uint64_t AMCP::Graph::Meta_Timebase::set_clock_anchor_time(AMCP::Graph::Meta_Timebase *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 208))(*((_QWORD *)this + 5));
}

uint64_t AMCP::Graph::Meta_Timebase::reset_clock_anchor_time(AMCP::Graph::Meta_Timebase *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 216))(*((_QWORD *)this + 5));
}

double AMCP::Graph::Meta_Timebase::get_max_io_buffer_frame_size(AMCP::Graph::Meta_Timebase *this)
{
  double v2;
  double v3;

  v2 = (double)(uint64_t)floor((*(double (**)(_QWORD))(**((_QWORD **)this + 5) + 224))(*((_QWORD *)this + 5)));
  v3 = *((double *)this + 4);
  return v3 / (*(double (**)(_QWORD))(**((_QWORD **)this + 5) + 152))(*((_QWORD *)this + 5)) * v2;
}

uint64_t AMCP::Graph::Meta_Timebase::take_power_assertions(AMCP::Graph::Meta_Timebase *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 232))(*((_QWORD *)this + 5));
}

uint64_t AMCP::Graph::Meta_Timebase::release_power_assertions(AMCP::Graph::Meta_Timebase *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 240))(*((_QWORD *)this + 5));
}

void AMCP::Graph::Meta_Timebase::get_private_transport_state(AMCP::Graph::Meta_Timebase *this)
{
  std::__shared_weak_count *v1;
  NSObject *v2;
  unint64_t *v3;
  unint64_t v4;
  _opaque_pthread_t *v5;
  mach_port_t v6;
  NSObject **v7;
  _BYTE v8[10];
  __int16 v9;
  int v10;
  __int16 v11;
  const char *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  AMCP::Log::Scope_Registry::get(this);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v7, "com.apple.coreaudio", "AMCP");
  v1 = *(std::__shared_weak_count **)v8;
  v2 = *v7;
  if (*(_QWORD *)v8)
  {
    v3 = (unint64_t *)(*(_QWORD *)v8 + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    v5 = pthread_self();
    v6 = pthread_mach_thread_np(v5);
    LODWORD(v7) = 67109890;
    HIDWORD(v7) = v6;
    *(_WORD *)v8 = 2080;
    *(_QWORD *)&v8[2] = "Meta_Timebase.cpp";
    v9 = 1024;
    v10 = 300;
    v11 = 2080;
    v12 = "false";
    _os_log_error_impl(&dword_1B57BA000, v2, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s This should not be called outside of tests", (uint8_t *)&v7, 0x22u);
  }
  abort();
}

void std::__throw_bad_optional_access[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x1E0DE5048] + 16;
  __cxa_throw(exception, MEMORY[0x1E0DE4E90], MEMORY[0x1E0DE4380]);
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a2 > 0x16)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v4 = a2 | 7;
    v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

uint64_t std::pair<std::pair<double,std::string> const,std::shared_ptr<AMCP::Graph::Timebase>>::~pair(uint64_t a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 32);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

unint64_t std::hash<std::pair<double,std::string>>::operator()(double *a1)
{
  char *v1;
  double v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = *a1;
  v1 = (char *)(a1 + 1);
  v3 = 0xC6A4A7935BD1E995 * *(_QWORD *)&v2;
  if (v2 == 0.0)
    v3 = 0;
  v4 = 0x35A98F4D286A90B9 * (v3 ^ (v3 >> 47)) + 3864292196u;
  v5 = boost::hash<std::string>::operator()(v1);
  return 3864292196u
       - 0x395B586CA42E166BLL
       * (v4 ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v5) ^ ((0xC6A4A7935BD1E995 * v5) >> 47))));
}

uint64_t std::equal_to<std::pair<double,std::string>>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  const void **v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  BOOL v16;
  uint64_t result;

  if (*(double *)a1 != *(double *)a2)
    return 0;
  v2 = *(unsigned __int8 *)(a1 + 31);
  if ((v2 & 0x80u) == 0)
    v3 = *(unsigned __int8 *)(a1 + 31);
  else
    v3 = *(_QWORD *)(a1 + 16);
  v4 = *(unsigned __int8 *)(a2 + 31);
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a2 + 16);
  if (v3 != v4)
    return 0;
  v6 = (const void **)(a1 + 8);
  v9 = *(unsigned __int8 **)(a2 + 8);
  v7 = (unsigned __int8 *)(a2 + 8);
  v8 = v9;
  if (v5 < 0)
    v7 = v8;
  if ((v2 & 0x80) != 0)
    return memcmp(*v6, v7, *(_QWORD *)(a1 + 16)) == 0;
  if (!*(_BYTE *)(a1 + 31))
    return 1;
  v10 = v2 - 1;
  do
  {
    v12 = *(unsigned __int8 *)v6;
    v6 = (const void **)((char *)v6 + 1);
    v11 = v12;
    v14 = *v7++;
    v13 = v14;
    v16 = v10-- != 0;
    result = v11 == v13;
  }
  while (v11 == v13 && v16);
  return result;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::pair<double,std::string>,std::shared_ptr<AMCP::Graph::Timebase>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::pair<double,std::string>,std::shared_ptr<AMCP::Graph::Timebase>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::pair<double,std::string> const,std::shared_ptr<AMCP::Graph::Timebase>>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::pair<double,std::string> const,std::shared_ptr<AMCP::Graph::Timebase>>,0>(uint64_t a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 32);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

unint64_t boost::hash<std::string>::operator()(char *a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  unint64_t result;
  uint64_t v5;

  v1 = a1[23];
  v2 = *((_QWORD *)a1 + 1);
  if ((v1 & 0x80u) == 0)
    v3 = a1;
  else
    v3 = *(char **)a1;
  result = 0;
  if ((v1 & 0x80u) != 0)
    v1 = v2;
  for (; v1; --v1)
  {
    v5 = *v3++;
    result = 3864292196u
           - 0x395B586CA42E166BLL
           * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v5) ^ ((0xC6A4A7935BD1E995 * v5) >> 47))) ^ result);
  }
  return result;
}

void **std::unique_ptr<AMCP::Graph::Meta_Timebase>::reset[abi:ne180100](void ***a1)
{
  void **result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    AMCP::Graph::Meta_Timebase::~Meta_Timebase(result);
    JUMPOUT(0x1B5E50688);
  }
  return result;
}

void std::__shared_ptr_pointer<AMCP::Graph::Meta_Timebase *,std::shared_ptr<AMCP::Graph::Meta_Timebase>::__shared_ptr_default_delete<AMCP::Graph::Meta_Timebase,AMCP::Graph::Meta_Timebase>,std::allocator<AMCP::Graph::Meta_Timebase>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

void **std::__shared_ptr_pointer<AMCP::Graph::Meta_Timebase *,std::shared_ptr<AMCP::Graph::Meta_Timebase>::__shared_ptr_default_delete<AMCP::Graph::Meta_Timebase,AMCP::Graph::Meta_Timebase>,std::allocator<AMCP::Graph::Meta_Timebase>>::__on_zero_shared(uint64_t a1)
{
  void **result;

  result = *(void ***)(a1 + 24);
  if (result)
  {
    AMCP::Graph::Meta_Timebase::~Meta_Timebase(result);
    JUMPOUT(0x1B5E50688);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<AMCP::Graph::Meta_Timebase *,std::shared_ptr<AMCP::Graph::Meta_Timebase>::__shared_ptr_default_delete<AMCP::Graph::Meta_Timebase,AMCP::Graph::Meta_Timebase>,std::allocator<AMCP::Graph::Meta_Timebase>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIN4AMCP5Graph13Meta_TimebaseEE27__shared_ptr_default_deleteIS3_S3_EE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1B57CCC54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1B57CCEA8(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1B57CD0EC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100](_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  if (a3)
  {
    v4 = (unint64_t *)(a3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = (std::__shared_weak_count *)a1[1];
  *a1 = a2;
  a1[1] = a3;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return a1;
}

uint64_t __copy_helper_block_ea8_40c47_ZTSNSt3__110shared_ptrI19HALS_UCRemotePlugInEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_40c47_ZTSNSt3__110shared_ptrI19HALS_UCRemotePlugInEE(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 40);
}

uint64_t __copy_helper_block_ea8_48c47_ZTSNSt3__110shared_ptrI19HALS_UCRemotePlugInEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 56) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_48c47_ZTSNSt3__110shared_ptrI19HALS_UCRemotePlugInEE(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 48);
}

void sub_1B57CD9C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  mcp_applesauce::CF::PropertyListRef::~PropertyListRef((const void **)va);
  _Unwind_Resume(a1);
}

mcp_applesauce::CF::PropertyListRef *mcp_applesauce::CF::PropertyListRef::from_get(mcp_applesauce::CF::PropertyListRef *this, CFTypeRef cf)
{
  mcp_applesauce::CF::PropertyListRef *v2;

  v2 = this;
  if (cf)
  {
    CFRetain(cf);
    return mcp_applesauce::CF::PropertyListRef::PropertyListRef(v2, cf);
  }
  else
  {
    *(_QWORD *)this = 0;
  }
  return this;
}

void mcp_applesauce::CF::PropertyListRef::~PropertyListRef(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

mcp_applesauce::CF::PropertyListRef *mcp_applesauce::CF::PropertyListRef::PropertyListRef(mcp_applesauce::CF::PropertyListRef *this, CFTypeRef cf)
{
  CFTypeID v3;
  std::runtime_error *exception;

  *(_QWORD *)this = cf;
  if (cf)
  {
    v3 = CFGetTypeID(cf);
    if (v3 != CFStringGetTypeID()
      && v3 != CFDataGetTypeID()
      && v3 != CFNumberGetTypeID()
      && v3 != CFBooleanGetTypeID()
      && v3 != CFDateGetTypeID()
      && v3 != CFArrayGetTypeID()
      && v3 != CFDictionaryGetTypeID())
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  return this;
}

void sub_1B57CDB10(_Unwind_Exception *a1)
{
  const void **v1;

  applesauce::CF::ObjectRef<void const*>::~ObjectRef(v1);
  _Unwind_Resume(a1);
}

const void **applesauce::CF::ObjectRef<void const*>::~ObjectRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void sub_1B57CDED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v9;
  va_list va;

  va_start(va, a6);
  do
    v9 = __ldaxr(v7);
  while (__stlxr(v9 - 1, v7));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  std::unique_ptr<-[Remote_Driver_Host_Delegate request_config_change:change_action:change_token:]::$_8>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<unsigned long long>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E696BB28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<unsigned long long>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E696BB28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

void sub_1B57CE190(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);

  std::unique_ptr<-[Remote_Driver_Host_Delegate object_properties_changed:data:]::$_7>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void HALS_UCRemotePlugIn::~HALS_UCRemotePlugIn(HALS_UCRemotePlugIn *this, HALS_Object *a2)
{
  HALS_UCRemotePlugIn::~HALS_UCRemotePlugIn(this, a2);
  JUMPOUT(0x1B5E50688);
}

{
  _QWORD *v3;
  _QWORD **v4;
  HALS_ObjectMap **i;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t j;
  const void *v10;
  const void *v11;
  std::__shared_weak_count *v12;
  void **v13;

  *(_QWORD *)this = &off_1E696B8C0;
  v3 = (_QWORD *)((char *)this + 760);
  v4 = (_QWORD **)((char *)this + 776);
  for (i = (HALS_ObjectMap **)((char *)this + 776); ; HALS_ObjectMap::ReleaseObject(i[3], a2))
  {
    i = (HALS_ObjectMap **)*i;
    if (!i)
      break;
  }
  if (*((_QWORD *)this + 98))
  {
    v6 = *v4;
    if (*v4)
    {
      do
      {
        v7 = (_QWORD *)*v6;
        operator delete(v6);
        v6 = v7;
      }
      while (v7);
    }
    *((_QWORD *)this + 97) = 0;
    v8 = *((_QWORD *)this + 96);
    if (v8)
    {
      for (j = 0; j != v8; ++j)
        *(_QWORD *)(*v3 + 8 * j) = 0;
    }
    *((_QWORD *)this + 98) = 0;
  }
  std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>,std::__unordered_map_hasher<AMCP::Portal::IPC::shared_buffer_info_t,std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>,std::hash<AMCP::Portal::IPC::shared_buffer_info_t>,std::equal_to<AMCP::Portal::IPC::shared_buffer_info_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::shared_buffer_info_t,std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>,std::equal_to<AMCP::Portal::IPC::shared_buffer_info_t>,std::hash<AMCP::Portal::IPC::shared_buffer_info_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>>>::~__hash_table((uint64_t)this + 840);
  std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::__unordered_map_hasher<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>>>::~__hash_table((uint64_t)this + 800);
  std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table((uint64_t)v3);
  v13 = (void **)((char *)this + 728);
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v13);

  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)((char *)this + 376));
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)((char *)this + 48));
  v10 = (const void *)*((_QWORD *)this + 5);
  if (v10)
    CFRelease(v10);
  v11 = (const void *)*((_QWORD *)this + 4);
  if (v11)
    CFRelease(v11);
  v12 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
}

uint64_t HALS_UCRemotePlugIn::IsNub(HALS_UCRemotePlugIn *this)
{
  return 0;
}

uint64_t HALS_UCRemotePlugIn::IsOldStyle(HALS_UCRemotePlugIn *this)
{
  return 0;
}

uint64_t HALS_UCRemotePlugIn::SupportsIsolatedIO(HALS_UCRemotePlugIn *this)
{
  return 0;
}

uint64_t HALS_UCRemotePlugIn::GetBundleID(HALS_UCRemotePlugIn *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t HALS_UCRemotePlugIn::GetBundleLocation(HALS_UCRemotePlugIn *this)
{
  return *((_QWORD *)this + 5);
}

uint64_t HALS_UCRemotePlugIn::Initialize(HALS_UCRemotePlugIn *this, const AudioServerPlugInHostInterface *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  Remote_Driver_Host_Delegate *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  Core_Audio_Driver_Host *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;

  v4 = *((_QWORD *)this + 2);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  v28 = v4;
  if (!v3 || (v6 = std::__shared_weak_count::lock(v3), (v29 = v6) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = [Remote_Driver_Host_Delegate alloc];
  v26 = v4;
  v27 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  v11 = -[Remote_Driver_Host_Delegate init_with_remote_plugin:](v8, "init_with_remote_plugin:", &v26);
  v12 = (void *)*((_QWORD *)this + 88);
  *((_QWORD *)this + 88) = v11;

  v13 = v27;
  if (v27)
  {
    v14 = (unint64_t *)&v27->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = [Core_Audio_Driver_Host alloc];
  v17 = -[Core_Audio_Driver_Host init_with_delegate:](v16, "init_with_delegate:", *((_QWORD *)this + 88), v26);
  v18 = (void *)*((_QWORD *)this + 89);
  *((_QWORD *)this + 89) = v17;

  objc_msgSend(*((id *)this + 89), "setDriver_endpoint:", *((_QWORD *)this + 46));
  *((_QWORD *)this + 90) = a2;
  v19 = (void *)*((_QWORD *)this + 89);
  objc_msgSend(v19, "driver_endpoint");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = objc_msgSend(v19, "initialize_driver:", v20);

  v22 = v29;
  if (v29)
  {
    v23 = (unint64_t *)&v29->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  return v21;
}

void sub_1B57CE3AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t HALS_UCRemotePlugIn::Initialize()
{
  return 1970171760;
}

void HALS_UCRemotePlugIn::Teardown(HALS_UCRemotePlugIn *this)
{
  unsigned __int8 v1;
  _QWORD block[5];

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN19HALS_UCRemotePlugIn8TeardownEv_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = this;
  v1 = atomic_load((unsigned __int8 *)this + 408);
  if ((v1 & 1) != 0)
    atomic_store(1u, (unsigned __int8 *)this + 409);
  dispatch_sync(*((dispatch_queue_t *)this + 47), block);
}

uint64_t HALS_UCRemotePlugIn::AddDeviceClient(HALS_UCRemotePlugIn *this, uint64_t a2, const AudioServerPlugInClientInfo *a3)
{
  return objc_msgSend(*((id *)this + 89), "add_device_client:client_info:", a2, a3);
}

void sub_1B57CE4B8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int16 a10, __int16 a11, int a12, uint64_t a13)
{
  int v13;
  int *v14;
  int v15;

  if (a2)
  {
    __cxa_begin_catch(a1);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v15 = *v14;
      LODWORD(a9) = 136315906;
      *(_QWORD *)((char *)&a9 + 4) = "HALS_UCRemotePlugIn.mm";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 323;
      a11 = 1024;
      a12 = v13;
      LOWORD(a13) = 1024;
      *(_DWORD *)((char *)&a13 + 2) = v15;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Failed to AddDeviceClient for device id %u, client id %u", (uint8_t *)&a9, 0x1Eu);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B57CE48CLL);
  }
  _Unwind_Resume(a1);
}

uint64_t HALS_UCRemotePlugIn::RemoveDeviceClient(HALS_UCRemotePlugIn *this, uint64_t a2, const AudioServerPlugInClientInfo *a3)
{
  return objc_msgSend(*((id *)this + 89), "remove_device_client:client_info:", a2, a3);
}

void sub_1B57CE5B0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int16 a10, __int16 a11, int a12, uint64_t a13)
{
  int v13;
  int *v14;
  int v15;

  if (a2)
  {
    __cxa_begin_catch(a1);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v15 = *v14;
      LODWORD(a9) = 136315906;
      *(_QWORD *)((char *)&a9 + 4) = "HALS_UCRemotePlugIn.mm";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 338;
      a11 = 1024;
      a12 = v13;
      LOWORD(a13) = 1024;
      *(_DWORD *)((char *)&a13 + 2) = v15;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Failed to RemoveDeviceClient for device id %u, client id %u", (uint8_t *)&a9, 0x1Eu);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B57CE584);
  }
  _Unwind_Resume(a1);
}

uint64_t HALS_UCRemotePlugIn::PerformDeviceConfigChange(HALS_UCRemotePlugIn *this, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;

  v6 = objc_msgSend(*((id *)this + 89), "perform_device_configuration_change:action:change:", a2, a3, *a4);
  v7 = (__int128 *)*((_QWORD *)this + 91);
  v8 = *((_QWORD *)this + 92);
  if (v7 != (__int128 *)v8)
  {
    while (*(_QWORD **)v7 != a4)
    {
      if (++v7 == (__int128 *)v8)
        return v6;
    }
  }
  if (v7 != (__int128 *)v8)
  {
    if (v7 + 1 != (__int128 *)v8)
    {
      do
        v9 = (uint64_t)v7++;
      while (std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100](v9, v7) + 32 != v8);
      v8 = *((_QWORD *)this + 92);
    }
    while ((__int128 *)v8 != v7)
    {
      v8 -= 16;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v8);
    }
    *((_QWORD *)this + 92) = v7;
  }
  return v6;
}

uint64_t HALS_UCRemotePlugIn::AbortDeviceConfigChange(HALS_UCRemotePlugIn *this, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;

  v6 = objc_msgSend(*((id *)this + 89), "perform_device_configuration_change:action:change:", a2, a3, *a4);
  v7 = (__int128 *)*((_QWORD *)this + 91);
  v8 = *((_QWORD *)this + 92);
  if (v7 != (__int128 *)v8)
  {
    while (*(_QWORD **)v7 != a4)
    {
      if (++v7 == (__int128 *)v8)
        return v6;
    }
  }
  if (v7 != (__int128 *)v8)
  {
    if (v7 + 1 != (__int128 *)v8)
    {
      do
        v9 = (uint64_t)v7++;
      while (std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100](v9, v7) + 32 != v8);
      v8 = *((_QWORD *)this + 92);
    }
    while ((__int128 *)v8 != v7)
    {
      v8 -= 16;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v8);
    }
    *((_QWORD *)this + 92) = v7;
  }
  return v6;
}

uint64_t HALS_UCRemotePlugIn::CreateDevice(HALS_UCRemotePlugIn *this, const __CFDictionary *a2, const AudioServerPlugInClientInfo *a3, unsigned int *a4)
{
  return objc_msgSend(*((id *)this + 89), "create_device:client_info:out_object_id:", a2, a3, a4);
}

void sub_1B57CE834(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int16 a10, __int16 a11, int a12)
{
  int *v12;
  int v13;

  if (a2)
  {
    __cxa_begin_catch(a1);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v13 = *v12;
      LODWORD(a9) = 136315650;
      *(_QWORD *)((char *)&a9 + 4) = "HALS_UCRemotePlugIn.mm";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 387;
      a11 = 1024;
      a12 = v13;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Failed to CreateDevice for device id %u", (uint8_t *)&a9, 0x18u);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B57CE808);
  }
  _Unwind_Resume(a1);
}

uint64_t HALS_UCRemotePlugIn::DestroyDevice(HALS_UCRemotePlugIn *this, uint64_t a2)
{
  return objc_msgSend(*((id *)this + 89), "destroy_device:", a2);
}

void sub_1B57CE91C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int16 a10, __int16 a11, int a12)
{
  int v12;

  if (a2)
  {
    __cxa_begin_catch(a1);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LODWORD(a9) = 136315650;
      *(_QWORD *)((char *)&a9 + 4) = "HALS_UCRemotePlugIn.mm";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 402;
      a11 = 1024;
      a12 = v12;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Failed to DestroyDevice for device id %u", (uint8_t *)&a9, 0x18u);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B57CE8F0);
  }
  _Unwind_Resume(a1);
}

uint64_t HALS_UCRemotePlugIn::ObjectWasDestroyed(HALS_UCRemotePlugIn *this, uint64_t a2)
{
  return objc_msgSend(*((id *)this + 89), "object_was_destroyed:", a2);
}

void sub_1B57CE9FC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int16 a10, __int16 a11, int a12)
{
  int v12;

  if (a2)
  {
    __cxa_begin_catch(a1);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LODWORD(a9) = 136315650;
      *(_QWORD *)((char *)&a9 + 4) = "HALS_UCRemotePlugIn.mm";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 417;
      a11 = 1024;
      a12 = v12;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Failed to tell remote driver that ObjectWasDestroyed for object id %u", (uint8_t *)&a9, 0x18u);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B57CE9D0);
  }
  _Unwind_Resume(a1);
}

HALS_PlugInEngine *HALS_UCRemotePlugIn::CreateEngine(HALS_UCRemotePlugIn *this, HALS_PlugIn *a2, HALS_IODevice *a3)
{
  unint64_t v3;
  HALS_PlugInEngine *v7;
  uint64_t v8;
  HALS_Object *v9;
  HALS_Object *v10;
  HALS_IODevice *v11;
  unsigned int OwningPlugInDeviceUCID;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  uint8x8_t v16;
  uint64_t **v17;
  uint64_t *i;
  unint64_t v19;
  _QWORD *v20;
  float v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  int8x8_t prime;
  void *v27;
  void *v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint8x8_t v32;
  unint64_t v33;
  uint8x8_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  void *v43;

  v7 = (HALS_PlugInEngine *)operator new();
  HALS_PlugInEngine::HALS_PlugInEngine(v7, a2, a3, v8, v9);
  *(_QWORD *)v7 = off_1E698D380;
  HALS_ObjectMap::RetainObject(v7, v10);
  OwningPlugInDeviceUCID = HALS_PlugInEngine::GetOwningPlugInDeviceUCID(a3, v11);
  v13 = OwningPlugInDeviceUCID;
  v14 = OwningPlugInDeviceUCID;
  v15 = *((_QWORD *)this + 96);
  if (v15)
  {
    v16 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
    v16.i16[0] = vaddlv_u8(v16);
    if (v16.u32[0] > 1uLL)
    {
      v3 = OwningPlugInDeviceUCID;
      if (v15 <= OwningPlugInDeviceUCID)
        v3 = OwningPlugInDeviceUCID % v15;
    }
    else
    {
      v3 = ((_DWORD)v15 - 1) & OwningPlugInDeviceUCID;
    }
    v17 = *(uint64_t ***)(*((_QWORD *)this + 95) + 8 * v3);
    if (v17)
    {
      for (i = *v17; i; i = (uint64_t *)*i)
      {
        v19 = i[1];
        if (v19 == OwningPlugInDeviceUCID)
        {
          if (*((_DWORD *)i + 4) == OwningPlugInDeviceUCID)
            return v7;
        }
        else
        {
          if (v16.u32[0] > 1uLL)
          {
            if (v19 >= v15)
              v19 %= v15;
          }
          else
          {
            v19 &= v15 - 1;
          }
          if (v19 != v3)
            break;
        }
      }
    }
  }
  v20 = operator new(0x20uLL);
  *v20 = 0;
  v20[1] = v14;
  *((_DWORD *)v20 + 4) = v13;
  v20[3] = v7;
  v21 = (float)(unint64_t)(*((_QWORD *)this + 98) + 1);
  v22 = *((float *)this + 198);
  if (v15 && (float)(v22 * (float)v15) >= v21)
  {
    v14 = v3;
    goto LABEL_64;
  }
  v23 = 1;
  if (v15 >= 3)
    v23 = (v15 & (v15 - 1)) != 0;
  v24 = v23 | (2 * v15);
  v25 = vcvtps_u32_f32(v21 / v22);
  if (v24 <= v25)
    prime = (int8x8_t)v25;
  else
    prime = (int8x8_t)v24;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v15 = *((_QWORD *)this + 96);
  }
  if (*(_QWORD *)&prime <= v15)
  {
    if (*(_QWORD *)&prime >= v15)
      goto LABEL_60;
    v33 = vcvtps_u32_f32((float)*((unint64_t *)this + 98) / *((float *)this + 198));
    if (v15 < 3 || (v34 = (uint8x8_t)vcnt_s8((int8x8_t)v15), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
    {
      v33 = std::__next_prime(v33);
    }
    else
    {
      v35 = 1 << -(char)__clz(v33 - 1);
      if (v33 >= 2)
        v33 = v35;
    }
    if (*(_QWORD *)&prime <= v33)
      prime = (int8x8_t)v33;
    if (*(_QWORD *)&prime >= v15)
    {
      v15 = *((_QWORD *)this + 96);
      goto LABEL_60;
    }
    if (!*(_QWORD *)&prime)
    {
      v43 = (void *)*((_QWORD *)this + 95);
      *((_QWORD *)this + 95) = 0;
      if (v43)
        operator delete(v43);
      v15 = 0;
      *((_QWORD *)this + 96) = 0;
      goto LABEL_60;
    }
  }
  if (*(_QWORD *)&prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v27 = operator new(8 * *(_QWORD *)&prime);
  v28 = (void *)*((_QWORD *)this + 95);
  *((_QWORD *)this + 95) = v27;
  if (v28)
    operator delete(v28);
  v29 = 0;
  *((int8x8_t *)this + 96) = prime;
  do
    *(_QWORD *)(*((_QWORD *)this + 95) + 8 * v29++) = 0;
  while (*(_QWORD *)&prime != v29);
  v30 = (_QWORD *)*((_QWORD *)this + 97);
  if (v30)
  {
    v31 = v30[1];
    v32 = (uint8x8_t)vcnt_s8(prime);
    v32.i16[0] = vaddlv_u8(v32);
    if (v32.u32[0] > 1uLL)
    {
      if (v31 >= *(_QWORD *)&prime)
        v31 %= *(_QWORD *)&prime;
    }
    else
    {
      v31 &= *(_QWORD *)&prime - 1;
    }
    *(_QWORD *)(*((_QWORD *)this + 95) + 8 * v31) = (char *)this + 776;
    v36 = (_QWORD *)*v30;
    if (*v30)
    {
      do
      {
        v37 = v36[1];
        if (v32.u32[0] > 1uLL)
        {
          if (v37 >= *(_QWORD *)&prime)
            v37 %= *(_QWORD *)&prime;
        }
        else
        {
          v37 &= *(_QWORD *)&prime - 1;
        }
        if (v37 != v31)
        {
          v38 = *((_QWORD *)this + 95);
          if (!*(_QWORD *)(v38 + 8 * v37))
          {
            *(_QWORD *)(v38 + 8 * v37) = v30;
            goto LABEL_56;
          }
          *v30 = *v36;
          *v36 = **(_QWORD **)(*((_QWORD *)this + 95) + 8 * v37);
          **(_QWORD **)(*((_QWORD *)this + 95) + 8 * v37) = v36;
          v36 = v30;
        }
        v37 = v31;
LABEL_56:
        v30 = v36;
        v36 = (_QWORD *)*v36;
        v31 = v37;
      }
      while (v36);
    }
  }
  v15 = (unint64_t)prime;
LABEL_60:
  if ((v15 & (v15 - 1)) != 0)
  {
    if (v15 <= v14)
      v14 %= v15;
  }
  else
  {
    v14 = ((_DWORD)v15 - 1) & v14;
  }
LABEL_64:
  v39 = *((_QWORD *)this + 95);
  v40 = *(_QWORD **)(v39 + 8 * v14);
  if (v40)
  {
    *v20 = *v40;
LABEL_72:
    *v40 = v20;
    goto LABEL_73;
  }
  *v20 = *((_QWORD *)this + 97);
  *((_QWORD *)this + 97) = v20;
  *(_QWORD *)(v39 + 8 * v14) = (char *)this + 776;
  if (*v20)
  {
    v41 = *(_QWORD *)(*v20 + 8);
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v41 >= v15)
        v41 %= v15;
    }
    else
    {
      v41 &= v15 - 1;
    }
    v40 = (_QWORD *)(*((_QWORD *)this + 95) + 8 * v41);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)this + 98);
  return v7;
}

void sub_1B57CEEAC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void HALS_UCRemotePlugIn::DestroyEngine(HALS_UCRemotePlugIn *this, HALS_Object *a2)
{
  unint64_t v2;
  uint8x8_t v4;
  unint64_t v5;
  _DWORD **v6;
  _DWORD *i;
  unint64_t v8;
  int8x8_t v9;
  unint64_t v10;
  uint8x8_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;

  v2 = *((_QWORD *)this + 96);
  if (v2)
  {
    v4 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = a2;
      if (v2 <= a2)
        v5 = a2 % v2;
    }
    else
    {
      v5 = ((_DWORD)v2 - 1) & a2;
    }
    v6 = *(_DWORD ***)(*((_QWORD *)this + 95) + 8 * v5);
    if (v6)
    {
      for (i = *v6; i; i = *(_DWORD **)i)
      {
        v8 = *((_QWORD *)i + 1);
        if (v8 == a2)
        {
          if (i[4] == (_DWORD)a2)
          {
            HALS_ObjectMap::ReleaseObject(*((HALS_ObjectMap **)i + 3), a2);
            v9 = *(int8x8_t *)((char *)this + 768);
            v10 = *((_QWORD *)i + 1);
            v11 = (uint8x8_t)vcnt_s8(v9);
            v11.i16[0] = vaddlv_u8(v11);
            if (v11.u32[0] > 1uLL)
            {
              if (v10 >= *(_QWORD *)&v9)
                v10 %= *(_QWORD *)&v9;
            }
            else
            {
              v10 &= *(_QWORD *)&v9 - 1;
            }
            v12 = *((_QWORD *)this + 95);
            v13 = *(_QWORD **)(v12 + 8 * v10);
            do
            {
              v14 = v13;
              v13 = (_QWORD *)*v13;
            }
            while (v13 != (_QWORD *)i);
            if (v14 == (_QWORD *)((char *)this + 776))
              goto LABEL_35;
            v15 = v14[1];
            if (v11.u32[0] > 1uLL)
            {
              if (v15 >= *(_QWORD *)&v9)
                v15 %= *(_QWORD *)&v9;
            }
            else
            {
              v15 &= *(_QWORD *)&v9 - 1;
            }
            if (v15 != v10)
            {
LABEL_35:
              if (!*(_QWORD *)i)
                goto LABEL_36;
              v16 = *(_QWORD *)(*(_QWORD *)i + 8);
              if (v11.u32[0] > 1uLL)
              {
                if (v16 >= *(_QWORD *)&v9)
                  v16 %= *(_QWORD *)&v9;
              }
              else
              {
                v16 &= *(_QWORD *)&v9 - 1;
              }
              if (v16 != v10)
LABEL_36:
                *(_QWORD *)(v12 + 8 * v10) = 0;
            }
            v17 = *(_QWORD *)i;
            if (*(_QWORD *)i)
            {
              v18 = *(_QWORD *)(v17 + 8);
              if (v11.u32[0] > 1uLL)
              {
                if (v18 >= *(_QWORD *)&v9)
                  v18 %= *(_QWORD *)&v9;
              }
              else
              {
                v18 &= *(_QWORD *)&v9 - 1;
              }
              if (v18 != v10)
              {
                *(_QWORD *)(*((_QWORD *)this + 95) + 8 * v18) = v14;
                v17 = *(_QWORD *)i;
              }
            }
            *v14 = v17;
            *(_QWORD *)i = 0;
            --*((_QWORD *)this + 98);
            operator delete(i);
            return;
          }
        }
        else
        {
          if (v4.u32[0] > 1uLL)
          {
            if (v8 >= v2)
              v8 %= v2;
          }
          else
          {
            v8 &= v2 - 1;
          }
          if (v8 != v5)
            return;
        }
      }
    }
  }
}

void HALS_UCRemotePlugIn::create_mcp_engine(HALS_UCRemotePlugIn *this@<X0>, HALS_PlugIn *a2@<X1>, const HALS_IODevice *a3@<X2>, unsigned int *a4@<X3>, _OWORD *a5@<X8>)
{
  const void *v10;
  id *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v21;
  unsigned __int8 v22;
  __int128 v23;
  __int128 v24;
  void *__p[3];
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  double v32;
  CFTypeRef cf;
  id obj[41];

  obj[40] = *(id *)MEMORY[0x1E0C80C00];
  v10 = (const void *)(*(uint64_t (**)(const HALS_IODevice *))(*(_QWORD *)a3 + 208))(a3);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v10);
  v32 = (*(double (**)(const HALS_IODevice *))(*(_QWORD *)a3 + 264))(a3);
  v31 = (*(uint64_t (**)(const HALS_IODevice *))(*(_QWORD *)a3 + 296))(a3);
  v30 = (*(uint64_t (**)(const HALS_IODevice *))(*(_QWORD *)a3 + 320))(a3);
  v29 = (*(uint64_t (**)(const HALS_IODevice *, uint64_t))(*(_QWORD *)a3 + 312))(a3, 1);
  v28 = (*(uint64_t (**)(const HALS_IODevice *, _QWORD))(*(_QWORD *)a3 + 312))(a3, 0);
  v27 = (*(uint64_t (**)(const HALS_IODevice *, uint64_t))(*(_QWORD *)a3 + 304))(a3, 1);
  v26 = (*(uint64_t (**)(const HALS_IODevice *, _QWORD))(*(_QWORD *)a3 + 304))(a3, 0);
  AMCP::Utility::Dispatch_Queue::create_serial_with_workloop((AMCP::Utility::Dispatch_Queue *)obj, "ASP::Engine Queue");
  v11 = (id *)((char *)this + 48);
  objc_storeStrong(v11, obj[0]);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)obj);
  make_stream_list((const HALS_IODevice *)obj, a3, 1);
  make_stream_list((const HALS_IODevice *)__p, a3, 0);
  v23 = 0uLL;
  v22 = 1;
  v12 = *((_QWORD *)a2 + 51);
  *(_QWORD *)&v21 = *((_QWORD *)a2 + 50);
  *((_QWORD *)&v21 + 1) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  std::allocate_shared[abi:ne180100]<AMCP::ASP::Engine,std::allocator<AMCP::ASP::Engine>,std::shared_ptr<AMCP::ASP::PlugIn>,BOOL,std::shared_ptr<HALS_UCPlugInBase>,unsigned int const&,applesauce::CF::StringRef &,double &,unsigned int &,unsigned int &,unsigned int &,unsigned int &,unsigned int &,unsigned int &,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> &,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> &,AMCP::Utility::Dispatch_Queue &,void>(&v24, &v23, &v22, &v21, (int *)a4, &cf, &v32, &v31, &v30, &v29, &v28, &v27, &v26, (uint64_t)obj, (uint64_t)__p, (dispatch_queue_t *)v11);
  *a5 = v24;
  v24 = 0uLL;
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
  if (*((_QWORD *)&v21 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
  if (*((_QWORD *)&v23 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (__p[0])
    operator delete(__p[0]);
  if (obj[0])
    operator delete(obj[0]);
  if (cf)
    CFRelease(cf);
}

void sub_1B57CF370(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,void *a34)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1B57CF3E8()
{
  JUMPOUT(0x1B57CF3E0);
}

AMCP::Log::Scope_Registry *HALS_UCRemotePlugIn::RegisterIOBuffer(HALS_UCRemotePlugIn *this, int64_t a2, int64_t a3, int64_t a4, BOOL a5, size_t length, void *region)
{
  return HALS_UCRemotePlugIn::register_shared_buffer((uint64_t)this, a2, a4, a3, 1u, region, length);
}

void HALS_UCRemotePlugIn::UnregisterIOBuffer(HALS_UCRemotePlugIn *this, unsigned int a2, unsigned int a3, unsigned int a4, BOOL a5, unsigned int a6, void *a7)
{
  HALS_UCRemotePlugIn::unregister_shared_buffer((uint64_t)this, a2, a4, a3, 1u);
}

void sub_1B57CF490(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int16 a10, __int16 a11, int a12, uint64_t a13, int a14, int a15, __int16 a16, __int16 a17)
{
  int v17;
  int v18;
  int v19;
  int v20;

  if (a2)
  {
    __cxa_begin_catch(a1);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LODWORD(a9) = 136316674;
      *(_QWORD *)((char *)&a9 + 4) = "HALS_UCRemotePlugIn.mm";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 579;
      a11 = 1024;
      a12 = v20;
      LOWORD(a13) = 1024;
      *(_DWORD *)((char *)&a13 + 2) = v19;
      HIWORD(a13) = 1024;
      a14 = v18;
      LOWORD(a15) = 1024;
      *(int *)((char *)&a15 + 2) = v17;
      a17 = 2048;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Failed to unregister IO buffer, device ID:%u, stream ID:%u, client ID %u, is input:%d, ioBuffer %p", (uint8_t *)&a9, 0x34u);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B57CF45CLL);
  }
  _Unwind_Resume(a1);
}

uint64_t HALS_UCRemotePlugIn::Register_IOThread(HALS_UCRemotePlugIn *this, uint64_t a2, unsigned int a3, double a4, unsigned int a5, uint64_t a6)
{
  void **v12;
  char *v13;
  unint64_t *v14;
  unsigned __int8 v15;
  const BOOL *v16;
  _QWORD *v17;
  AMCP::Log::Scope_Registry *v18;
  const BOOL *v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  unsigned int v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  __int128 v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _BOOL8 is_valid;
  const BOOL *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (**v36)();
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint8x8_t v40;
  uint64_t **v41;
  uint64_t *v42;
  unint64_t v43;
  char *v45;
  _QWORD *v46;
  float v47;
  float v48;
  uint64_t v49;
  _BOOL8 v50;
  unint64_t v51;
  unint64_t v52;
  int8x8_t prime;
  void *v54;
  void *v55;
  uint64_t v56;
  _QWORD *v57;
  unint64_t v58;
  uint8x8_t v59;
  unint64_t v60;
  uint8x8_t v61;
  uint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  unint64_t v67;
  void *v68;
  void *v69;
  caulk::mach::details *v70;
  uint64_t v71;
  void *v72;
  const BOOL *v73;
  unsigned __int8 v74;
  uint64_t v75;
  const BOOL *v76;
  uint64_t v77;
  unsigned __int8 v78;
  const std::string::value_type *v79;
  std::string::size_type v80;
  const std::string::value_type *v81;
  std::string::size_type imp_high;
  AMCP::Log::Scope_Registry *v83;
  unint64_t *v84;
  unint64_t v85;
  void *v86;
  std::__shared_weak_count *v87;
  NSObject *v88;
  unint64_t *v89;
  unint64_t v90;
  _opaque_pthread_t *v91;
  mach_port_t v92;
  std::string *v93;
  const char *v94;
  std::__shared_weak_count *v95;
  NSObject *v96;
  unint64_t *v97;
  unint64_t v98;
  _opaque_pthread_t *v99;
  mach_port_t v100;
  void *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v108;
  NSObject *v109;
  unint64_t *v110;
  unint64_t v111;
  _opaque_pthread_t *v112;
  mach_port_t v113;
  std::runtime_error *v114;
  int v115;
  uint64_t v116;
  std::runtime_error v117;
  _opaque_pthread_t *v118;
  mach_port_t v119;
  std::string *v120;
  std::__shared_weak_count *v121;
  NSObject *v122;
  unint64_t *v123;
  unint64_t v124;
  _opaque_pthread_t *v125;
  mach_port_t v126;
  std::runtime_error *v127;
  int v128;
  uint64_t v129;
  std::runtime_error v130;
  std::runtime_error *exception;
  _QWORD *v132;
  unsigned int v133;
  os_unfair_lock_s *lock;
  uint64_t v135;
  unsigned int v136;
  std::runtime_error v137;
  uint64_t v138;
  std::runtime_error v139;
  char v140;
  std::string v141;
  uint64_t v142;
  void *__p[2];
  uint64_t v144;
  uint64_t (**v145)();
  std::runtime_error v146;
  __int128 v147;
  uint64_t v148;
  int v149;
  _BYTE out[48];
  int v151;
  uint64_t v152;

  v152 = *MEMORY[0x1E0C80C00];
  lock = (os_unfair_lock_s *)((char *)this + 752);
  os_unfair_lock_lock((os_unfair_lock_t)this + 188);
  v12 = (void **)((char *)this + 800);
  v136 = a3;
  v135 = a2;
  if (std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::__unordered_map_hasher<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>>>::find<AMCP::Portal::IPC::io_messenger_id_t>((_QWORD *)this + 100, a2, a3))
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)out = 136315394;
      *(_QWORD *)&out[4] = "HALS_UCRemotePlugIn.mm";
      *(_WORD *)&out[12] = 1024;
      *(_DWORD *)&out[14] = 668;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  io sender already exists", out, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "io sender already exists");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v13 = (char *)operator new(0x60uLL);
  *((_QWORD *)v13 + 1) = 0;
  v14 = (unint64_t *)(v13 + 8);
  *((_QWORD *)v13 + 2) = 0;
  *(_QWORD *)v13 = &off_1E696BB78;
  *((_QWORD *)v13 + 3) = &off_1E6974C10;
  v15 = *((_BYTE *)this + 696);
  *((_OWORD *)v13 + 2) = 0u;
  v132 = v13 + 32;
  *((_OWORD *)v13 + 3) = 0u;
  *((_QWORD *)v13 + 8) = 0;
  *((_DWORD *)v13 + 18) = a2;
  *((_DWORD *)v13 + 19) = a3;
  *((_QWORD *)v13 + 10) = 0x40E5888000000000;
  *((_WORD *)v13 + 44) = v15;
  v133 = a5;
  if (AMCP::Feature_Flags::access_event_link_oop_io(0, v16))
  {
    caulk::make_string((caulk *)"IO Sender: %u", (uint64_t)__p, a2);
    v17 = operator new(0x58uLL);
    v17[1] = 0;
    v17[2] = 0;
    *v17 = &off_1E6974C40;
    MEMORY[0x1B5E4FD94](v17 + 3, 320, 0);
    MEMORY[0x1B5E4FD94](v17 + 6, 4, 0);
    v18 = (AMCP::Log::Scope_Registry *)caulk::mach::os_eventlink::make();
    *((_BYTE *)v17 + 80) = 0;
    *(_QWORD *)&v20 = v17 + 3;
    *((_QWORD *)&v20 + 1) = v17;
    v21 = (std::__shared_weak_count *)*((_QWORD *)v13 + 5);
    *((_OWORD *)v13 + 2) = v20;
    v22 = a2;
    if (v21)
    {
      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
      do
        v24 = __ldaxr(p_shared_owners);
      while (__stlxr(v24 - 1, p_shared_owners));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v25 = (_QWORD *)*v132;
    if (!*(_QWORD *)*v132 || !v25[1] || !v25[3] || !v25[4] || !v25[6])
    {
      AMCP::Log::Scope_Registry::get(v18);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)out, "com.apple.coreaudio", "AMCP");
      v108 = *(std::__shared_weak_count **)&out[8];
      v109 = **(NSObject ***)out;
      if (*(_QWORD *)&out[8])
      {
        v110 = (unint64_t *)(*(_QWORD *)&out[8] + 8);
        do
          v111 = __ldaxr(v110);
        while (__stlxr(v111 - 1, v110));
        if (!v111)
        {
          ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
          std::__shared_weak_count::__release_weak(v108);
        }
      }
      if (os_log_type_enabled(v109, OS_LOG_TYPE_ERROR))
      {
        v112 = pthread_self();
        v113 = pthread_mach_thread_np(v112);
        *(_DWORD *)out = 67109890;
        *(_DWORD *)&out[4] = v113;
        *(_WORD *)&out[8] = 2080;
        *(_QWORD *)&out[10] = "IO_Sender.cpp";
        *(_WORD *)&out[18] = 1024;
        *(_DWORD *)&out[20] = 99;
        *(_WORD *)&out[24] = 2080;
        *(_QWORD *)&out[26] = "!m_event_link_sender->is_valid()";
        _os_log_error_impl(&dword_1B57BA000, v109, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to create io sender", out, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v140);
      v114 = (std::runtime_error *)__cxa_allocate_exception(0x40uLL);
      std::runtime_error::runtime_error(&v139, "Failed to create io sender");
      std::runtime_error::runtime_error((std::runtime_error *)&v145, &v139);
      v147 = 0uLL;
      v148 = 0;
      v149 = -1;
      v145 = &off_1E69A1FB8;
      v146.__imp_.__imp_ = (const char *)&unk_1E69A1FE0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)out, (uint64_t)&v145);
      *(_QWORD *)&out[32] = "AMCP::Portal::IPC::IO_Sender::IO_Sender(AudioObjectID, AudioObjectID, Emulated_Driver_Translation, double)";
      *(_QWORD *)&out[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Server/IO_Sender.cpp";
      v151 = 99;
      std::vector<void *>::vector(&v137);
      v115 = backtrace((void **)&v137.~runtime_error, (unint64_t)(v137.__imp_.__imp_ - (const char *)v137.__vftable) >> 3);
      std::vector<void *>::resize((char **)&v137, v115);
      v141.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A20A0;
      *(std::runtime_error *)&v141.__r_.__value_.__r.__words[1] = v137;
      v142 = v138;
      v137.__vftable = 0;
      v137.__imp_.__imp_ = 0;
      v138 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)out, (uint64_t)&v141);
      v114[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
      std::runtime_error::runtime_error(v114, (const std::runtime_error *)out);
      v114[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
      v116 = *(_QWORD *)&out[24];
      v114[1].__imp_.__imp_ = *(const char **)&out[24];
      if (v116)
        (*(void (**)(uint64_t))(*(_QWORD *)v116 + 24))(v116);
      v117 = *(std::runtime_error *)&out[32];
      LODWORD(v114[3].__vftable) = v151;
      v114[2] = v117;
      v114->__vftable = (std::runtime_error_vtbl *)&off_1E69A1EE8;
      v114[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1F20;
      v114[3].__imp_.__imp_ = (const char *)&unk_1E69A1F58;
    }
    if (SHIBYTE(v144) < 0)
      operator delete(__p[0]);
  }
  else
  {
    v26 = operator new(0x60uLL);
    v26[1] = 0;
    v26[2] = 0;
    *v26 = &off_1E6974C90;
    MEMORY[0x1B5E4FD94](v26 + 3, 320, 0);
    MEMORY[0x1B5E4FD94](v26 + 6, 4, 0);
    MEMORY[0x1B5E4FF20](v26 + 9);
    MEMORY[0x1B5E4FF20](v26 + 10);
    *((_BYTE *)v26 + 88) = 0;
    *(_QWORD *)&v27 = v26 + 3;
    *((_QWORD *)&v27 + 1) = v26;
    v28 = (std::__shared_weak_count *)*((_QWORD *)v13 + 7);
    *((_OWORD *)v13 + 3) = v27;
    v22 = a2;
    if (v28)
    {
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    is_valid = caulk::ipc::synchronous_messenger::semaphore_sender::is_valid(*((caulk::ipc::synchronous_messenger::semaphore_sender **)v13
                                                                             + 6));
    if (!is_valid)
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)is_valid);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)out, "com.apple.coreaudio", "AMCP");
      v121 = *(std::__shared_weak_count **)&out[8];
      v122 = **(NSObject ***)out;
      if (*(_QWORD *)&out[8])
      {
        v123 = (unint64_t *)(*(_QWORD *)&out[8] + 8);
        do
          v124 = __ldaxr(v123);
        while (__stlxr(v124 - 1, v123));
        if (!v124)
        {
          ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
          std::__shared_weak_count::__release_weak(v121);
        }
      }
      if (os_log_type_enabled(v122, OS_LOG_TYPE_ERROR))
      {
        v125 = pthread_self();
        v126 = pthread_mach_thread_np(v125);
        *(_DWORD *)out = 67109890;
        *(_DWORD *)&out[4] = v126;
        *(_WORD *)&out[8] = 2080;
        *(_QWORD *)&out[10] = "IO_Sender.cpp";
        *(_WORD *)&out[18] = 1024;
        *(_DWORD *)&out[20] = 104;
        *(_WORD *)&out[24] = 2080;
        *(_QWORD *)&out[26] = "!m_semaphore_sender->is_valid()";
        _os_log_error_impl(&dword_1B57BA000, v122, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to create io sender", out, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v139);
      v127 = (std::runtime_error *)__cxa_allocate_exception(0x40uLL);
      std::runtime_error::runtime_error(&v137, "Failed to create io sender");
      std::runtime_error::runtime_error((std::runtime_error *)&v145, &v137);
      v147 = 0uLL;
      v148 = 0;
      v149 = -1;
      v145 = &off_1E69A1FB8;
      v146.__imp_.__imp_ = (const char *)&unk_1E69A1FE0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)out, (uint64_t)&v145);
      *(_QWORD *)&out[32] = "AMCP::Portal::IPC::IO_Sender::IO_Sender(AudioObjectID, AudioObjectID, Emulated_Driver_Translation, double)";
      *(_QWORD *)&out[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Server/IO_Sender.cpp";
      v151 = 104;
      std::vector<void *>::vector(__p);
      v128 = backtrace((void **)__p[0], (unint64_t)((char *)__p[1] - (char *)__p[0]) >> 3);
      std::vector<void *>::resize((char **)__p, v128);
      v141.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A20A0;
      *(_OWORD *)&v141.__r_.__value_.__r.__words[1] = *(_OWORD *)__p;
      v142 = v144;
      __p[0] = 0;
      __p[1] = 0;
      v144 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)out, (uint64_t)&v141);
      v127[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
      std::runtime_error::runtime_error(v127, (const std::runtime_error *)out);
      v127[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
      v129 = *(_QWORD *)&out[24];
      v127[1].__imp_.__imp_ = *(const char **)&out[24];
      if (v129)
        (*(void (**)(uint64_t))(*(_QWORD *)v129 + 24))(v129);
      v130 = *(std::runtime_error *)&out[32];
      LODWORD(v127[3].__vftable) = v151;
      v127[2] = v130;
      v127->__vftable = (std::runtime_error_vtbl *)&off_1E69A1EE8;
      v127[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1F20;
      v127[3].__imp_.__imp_ = (const char *)&unk_1E69A1F58;
    }
  }
  if (AMCP::Feature_Flags::access_collect_io_perfdata(0, v19))
  {
    v33 = (void *)operator new();
    bzero(v33, 0xC018uLL);
    v34 = *((_QWORD *)v13 + 8);
    *((_QWORD *)v13 + 8) = v33;
    if (v34)
      MEMORY[0x1B5E50688](v34, 0x1020C401EC519C5);
  }
  v35 = v22;
  v36 = (uint64_t (**)())(v22 | ((unint64_t)v136 << 32));
  v145 = v36;
  v146.__vftable = (std::runtime_error_vtbl *)(v13 + 24);
  v146.__imp_.__imp_ = v13;
  do
    v37 = __ldxr(v14);
  while (__stxr(v37 + 1, v14));
  v38 = 0xC6A4A7935BD1E995
      * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v136) ^ ((0xC6A4A7935BD1E995 * v136) >> 47))) ^ (0x35A98F4D286A90B9 * ((0xC6A4A7935BD1E995 * v35) ^ ((0xC6A4A7935BD1E995 * v35) >> 47)) + 3864292196u))
      + 3864292196u;
  v39 = *((_QWORD *)this + 101);
  if (!v39)
    goto LABEL_47;
  v40 = (uint8x8_t)vcnt_s8((int8x8_t)v39);
  v40.i16[0] = vaddlv_u8(v40);
  if (v40.u32[0] > 1uLL)
  {
    v14 = (unint64_t *)(0xC6A4A7935BD1E995
                             * ((0xC6A4A7935BD1E995
                               * ((0xC6A4A7935BD1E995 * v136) ^ ((0xC6A4A7935BD1E995 * v136) >> 47))) ^ (0x35A98F4D286A90B9 * ((0xC6A4A7935BD1E995 * v35) ^ ((0xC6A4A7935BD1E995 * v35) >> 47)) + 3864292196u))
                             + 3864292196u);
    if (v38 >= v39)
      v14 = (unint64_t *)(v38 % v39);
  }
  else
  {
    v14 = (unint64_t *)(v38 & (v39 - 1));
  }
  v41 = (uint64_t **)*((_QWORD *)*v12 + (_QWORD)v14);
  if (!v41 || (v42 = *v41) == 0)
  {
LABEL_47:
    v45 = (char *)operator new(0x28uLL);
    v46 = (_QWORD *)((char *)this + 816);
    *(_QWORD *)out = v45;
    *(_QWORD *)&out[8] = (char *)this + 816;
    *(_QWORD *)v45 = 0;
    *((_QWORD *)v45 + 1) = v38;
    *((_QWORD *)v45 + 2) = v36;
    *(std::runtime_error *)(v45 + 24) = v146;
    v146 = (std::runtime_error)0;
    out[16] = 1;
    v47 = (float)(unint64_t)(*((_QWORD *)this + 103) + 1);
    v48 = *((float *)this + 208);
    if (v39 && (float)(v48 * (float)v39) >= v47)
    {
      v49 = v135;
      goto LABEL_94;
    }
    v50 = 1;
    if (v39 >= 3)
      v50 = (v39 & (v39 - 1)) != 0;
    v51 = v50 | (2 * v39);
    v52 = vcvtps_u32_f32(v47 / v48);
    if (v51 <= v52)
      prime = (int8x8_t)v52;
    else
      prime = (int8x8_t)v51;
    v49 = v135;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v39 = *((_QWORD *)this + 101);
    }
    if (*(_QWORD *)&prime <= v39)
    {
      if (*(_QWORD *)&prime >= v39)
        goto LABEL_89;
      v60 = vcvtps_u32_f32((float)*((unint64_t *)this + 103) / *((float *)this + 208));
      if (v39 < 3 || (v61 = (uint8x8_t)vcnt_s8((int8x8_t)v39), v61.i16[0] = vaddlv_u8(v61), v61.u32[0] > 1uLL))
      {
        v60 = std::__next_prime(v60);
      }
      else
      {
        v62 = 1 << -(char)__clz(v60 - 1);
        if (v60 >= 2)
          v60 = v62;
      }
      if (*(_QWORD *)&prime <= v60)
        prime = (int8x8_t)v60;
      if (*(_QWORD *)&prime >= v39)
      {
        v39 = *((_QWORD *)this + 101);
        goto LABEL_89;
      }
      if (!*(_QWORD *)&prime)
      {
        v86 = *v12;
        *v12 = 0;
        if (v86)
          operator delete(v86);
        v39 = 0;
        *((_QWORD *)this + 101) = 0;
        goto LABEL_89;
      }
    }
    if (*(_QWORD *)&prime >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v54 = operator new(8 * *(_QWORD *)&prime);
    v55 = *v12;
    *v12 = v54;
    if (v55)
      operator delete(v55);
    v56 = 0;
    *((int8x8_t *)this + 101) = prime;
    do
      *((_QWORD *)*v12 + v56++) = 0;
    while (*(_QWORD *)&prime != v56);
    v57 = (_QWORD *)*v46;
    if (*v46)
    {
      v58 = v57[1];
      v59 = (uint8x8_t)vcnt_s8(prime);
      v59.i16[0] = vaddlv_u8(v59);
      if (v59.u32[0] > 1uLL)
      {
        if (v58 >= *(_QWORD *)&prime)
          v58 %= *(_QWORD *)&prime;
      }
      else
      {
        v58 &= *(_QWORD *)&prime - 1;
      }
      *((_QWORD *)*v12 + v58) = v46;
      v63 = (_QWORD *)*v57;
      if (*v57)
      {
        do
        {
          v64 = v63[1];
          if (v59.u32[0] > 1uLL)
          {
            if (v64 >= *(_QWORD *)&prime)
              v64 %= *(_QWORD *)&prime;
          }
          else
          {
            v64 &= *(_QWORD *)&prime - 1;
          }
          if (v64 != v58)
          {
            if (!*((_QWORD *)*v12 + v64))
            {
              *((_QWORD *)*v12 + v64) = v57;
              goto LABEL_85;
            }
            *v57 = *v63;
            *v63 = **((_QWORD **)*v12 + v64);
            **((_QWORD **)*v12 + v64) = v63;
            v63 = v57;
          }
          v64 = v58;
LABEL_85:
          v57 = v63;
          v63 = (_QWORD *)*v63;
          v58 = v64;
        }
        while (v63);
      }
    }
    v39 = (unint64_t)prime;
LABEL_89:
    if ((v39 & (v39 - 1)) != 0)
    {
      if (v38 >= v39)
        v14 = (unint64_t *)(v38 % v39);
      else
        v14 = (unint64_t *)v38;
    }
    else
    {
      v14 = (unint64_t *)((v39 - 1) & v38);
    }
LABEL_94:
    v65 = (_QWORD *)*((_QWORD *)*v12 + (_QWORD)v14);
    v66 = *(_QWORD *)out;
    if (v65)
    {
      **(_QWORD **)out = *v65;
    }
    else
    {
      **(_QWORD **)out = *v46;
      *v46 = v66;
      *((_QWORD *)*v12 + (_QWORD)v14) = v46;
      if (!*(_QWORD *)v66)
      {
LABEL_103:
        *(_QWORD *)out = 0;
        ++*((_QWORD *)this + 103);
        std::unique_ptr<std::__hash_node<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,void *>>>>::reset[abi:ne180100]((uint64_t)out);
        goto LABEL_104;
      }
      v67 = *(_QWORD *)(*(_QWORD *)v66 + 8);
      if ((v39 & (v39 - 1)) != 0)
      {
        if (v67 >= v39)
          v67 %= v39;
      }
      else
      {
        v67 &= v39 - 1;
      }
      v65 = (char *)*v12 + 8 * v67;
    }
    *v65 = v66;
    goto LABEL_103;
  }
  while (1)
  {
    v43 = v42[1];
    if (v43 == v38)
      break;
    if (v40.u32[0] > 1uLL)
    {
      if (v43 >= v39)
        v43 %= v39;
    }
    else
    {
      v43 &= v39 - 1;
    }
    if ((unint64_t *)v43 != v14)
      goto LABEL_47;
LABEL_46:
    v42 = (uint64_t *)*v42;
    if (!v42)
      goto LABEL_47;
  }
  if (*((_DWORD *)v42 + 4) != (_DWORD)a2 || *((_DWORD *)v42 + 5) != v136)
    goto LABEL_46;
  v84 = (unint64_t *)(v13 + 8);
  do
    v85 = __ldaxr(v84);
  while (__stlxr(v85 - 1, v84));
  v49 = a2;
  if (!v85)
  {
    (*(void (**)(char *))(*(_QWORD *)v13 + 16))(v13);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v13);
  }
LABEL_104:
  v68 = (void *)*((_QWORD *)this + 89);
  if (AMCP::Feature_Flags::access_event_link_oop_io(0, v32))
    caulk::ipc::synchronous_messenger::eventlink_sender::create_connection_info(*((caulk::ipc::synchronous_messenger::eventlink_sender **)v13
                                                                                + 4));
  else
    caulk::ipc::synchronous_messenger::semaphore_sender::create_connection_info(*((caulk::ipc::synchronous_messenger::semaphore_sender **)v13
                                                                                + 6));
  v70 = *(caulk::mach::details **)out;
  *(_QWORD *)out = 0;
  caulk::mach::details::release_os_object(0, v69);
  v71 = objc_msgSend(v68, "start_synchronous_messenger:client_id:nominal_sample_rate:io_buffer_frame_size:work_group_port:io_messenger:", v49, v136, v133, a6, v70, a4);
  caulk::mach::details::release_os_object(v70, v72);
  if (!(_DWORD)v71)
  {
    v74 = atomic_load((unsigned __int8 *)v13 + 89);
    if ((v74 & 1) != 0)
    {
      v71 = 1768911973;
    }
    else
    {
      if (AMCP::Feature_Flags::access_event_link_oop_io(0, v73))
        v75 = caulk::ipc::synchronous_messenger::eventlink_sender::start(*((caulk::ipc::synchronous_messenger::eventlink_sender **)v13 + 4), 5.0);
      else
        v75 = caulk::ipc::synchronous_messenger::semaphore_sender::start(*((caulk::ipc::synchronous_messenger::semaphore_sender **)v13 + 6), 5.0);
      if ((v75 & 0xFF00000000) == 0 || !(_BYTE)v75)
      {
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v75);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)out, "com.apple.coreaudio", "AMCP");
        v95 = *(std::__shared_weak_count **)&out[8];
        v96 = **(NSObject ***)out;
        if (*(_QWORD *)&out[8])
        {
          v97 = (unint64_t *)(*(_QWORD *)&out[8] + 8);
          do
            v98 = __ldaxr(v97);
          while (__stlxr(v98 - 1, v97));
          if (!v98)
          {
            ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
            std::__shared_weak_count::__release_weak(v95);
          }
        }
        if (os_log_type_enabled(v96, OS_LOG_TYPE_ERROR))
        {
          v99 = pthread_self();
          v100 = pthread_mach_thread_np(v99);
          *(_DWORD *)out = 67109890;
          *(_DWORD *)&out[4] = v100;
          *(_WORD *)&out[8] = 2080;
          *(_QWORD *)&out[10] = "IO_Sender.cpp";
          *(_WORD *)&out[18] = 1024;
          *(_DWORD *)&out[20] = 267;
          *(_WORD *)&out[24] = 2080;
          *(_QWORD *)&out[26] = "result.value_or(false) != true";
          _os_log_error_impl(&dword_1B57BA000, v96, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to start io sender", out, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v139);
        v101 = __cxa_allocate_exception(0x40uLL);
        std::runtime_error::runtime_error(&v137, "Failed to start io sender");
        std::runtime_error::runtime_error((std::runtime_error *)&v145, &v137);
        v147 = 0uLL;
        v148 = 0;
        v149 = -1;
        v145 = &off_1E69A1FB8;
        v146.__imp_.__imp_ = (const char *)&unk_1E69A1FE0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)out, (uint64_t)&v145);
        *(_QWORD *)&out[32] = "OSStatus AMCP::Portal::IPC::IO_Sender::start()";
        *(_QWORD *)&out[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Server/IO_Sender.cpp";
        v151 = 267;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)__p);
        v141.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A20A0;
        *(_OWORD *)&v141.__r_.__value_.__r.__words[1] = *(_OWORD *)__p;
        v142 = v144;
        __p[0] = 0;
        __p[1] = 0;
        v144 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)out, (uint64_t)&v141);
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v101, (uint64_t)out);
      }
      if (AMCP::Feature_Flags::access_collect_io_perfdata(0, v76))
      {
        v77 = *((_QWORD *)v13 + 8);
        v78 = atomic_load((unsigned __int8 *)(v77 + 8));
        if ((v78 & 1) == 0 && !*(_QWORD *)v77)
        {
          memset(&v141, 0, sizeof(v141));
          get_temporary_folder((std::string *)out);
          if (out[23] >= 0)
            v79 = out;
          else
            v79 = *(const std::string::value_type **)out;
          if (out[23] >= 0)
            v80 = out[23];
          else
            v80 = *(_QWORD *)&out[8];
          std::string::append(&v141, v79, v80);
          if ((out[23] & 0x80000000) != 0)
            operator delete(*(void **)out);
          std::string::append(&v141, "HAL_IO_perfdata_", 0x10uLL);
          __p[0] = 0;
          __p[1] = 0;
          MEMORY[0x1B5E5139C](__p);
          memset(out, 0, 37);
          uuid_unparse((const unsigned __int8 *)__p, out);
          std::string::basic_string[abi:ne180100]<0>(&v145, out);
          if (SHIBYTE(v146.__imp_.__imp_) >= 0)
            v81 = (const std::string::value_type *)&v145;
          else
            v81 = (const std::string::value_type *)v145;
          if (SHIBYTE(v146.__imp_.__imp_) >= 0)
            imp_high = HIBYTE(v146.__imp_.__imp_);
          else
            imp_high = (std::string::size_type)v146.__vftable;
          std::string::append(&v141, v81, imp_high);
          if (SHIBYTE(v146.__imp_.__imp_) < 0)
            operator delete(v145);
          std::string::append(&v141, ".pdj", 4uLL);
          if (MEMORY[0x1E0DDC810] && (int)pdwriter_name() >= 1 && MEMORY[0x1E0DDC838])
          {
            v83 = (AMCP::Log::Scope_Registry *)pdwriter_open();
            *(_QWORD *)v77 = v83;
          }
          else
          {
            v83 = *(AMCP::Log::Scope_Registry **)v77;
          }
          if (v83)
          {
            AMCP::Log::Scope_Registry::get(v83);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v145, "com.apple.coreaudio", "AMCP");
            v87 = (std::__shared_weak_count *)v146.__vftable;
            v88 = *v145;
            if (v146.__vftable)
            {
              v89 = (unint64_t *)&v146.~runtime_error_0;
              do
                v90 = __ldaxr(v89);
              while (__stlxr(v90 - 1, v89));
              if (!v90)
              {
                ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
                std::__shared_weak_count::__release_weak(v87);
              }
            }
            if (os_log_type_enabled(v88, OS_LOG_TYPE_DEBUG))
            {
              v91 = pthread_self();
              v92 = pthread_mach_thread_np(v91);
              v93 = &v141;
              if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v93 = (std::string *)v141.__r_.__value_.__r.__words[0];
              LODWORD(v145) = 67109890;
              HIDWORD(v145) = v92;
              LOWORD(v146.__vftable) = 2080;
              *(std::runtime_error_vtbl **)((char *)&v146.__vftable + 2) = (std::runtime_error_vtbl *)"Performance_Data_Writer.cpp";
              WORD1(v146.__imp_.__imp_) = 1024;
              HIDWORD(v146.__imp_.__imp_) = 53;
              LOWORD(v147) = 2080;
              *(_QWORD *)((char *)&v147 + 2) = v93;
              v94 = "%6u %32s:%-5d Performance_Data_Writer: SUCCESS: Created file %s";
              goto LABEL_197;
            }
          }
          else
          {
            AMCP::Log::Scope_Registry::get(0);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v145, "com.apple.coreaudio", "AMCP");
            v102 = (std::__shared_weak_count *)v146.__vftable;
            v88 = *v145;
            if (v146.__vftable)
            {
              v103 = (unint64_t *)&v146.~runtime_error_0;
              do
                v104 = __ldaxr(v103);
              while (__stlxr(v104 - 1, v103));
              if (!v104)
              {
                ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
                std::__shared_weak_count::__release_weak(v102);
              }
            }
            if (os_log_type_enabled(v88, OS_LOG_TYPE_DEBUG))
            {
              v118 = pthread_self();
              v119 = pthread_mach_thread_np(v118);
              v120 = &v141;
              if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v120 = (std::string *)v141.__r_.__value_.__r.__words[0];
              LODWORD(v145) = 67109890;
              HIDWORD(v145) = v119;
              LOWORD(v146.__vftable) = 2080;
              *(std::runtime_error_vtbl **)((char *)&v146.__vftable + 2) = (std::runtime_error_vtbl *)"Performance_Data_Writer.cpp";
              WORD1(v146.__imp_.__imp_) = 1024;
              HIDWORD(v146.__imp_.__imp_) = 49;
              LOWORD(v147) = 2080;
              *(_QWORD *)((char *)&v147 + 2) = v120;
              v94 = "%6u %32s:%-5d Performance_Data_Writer: FAILURE: Could not create file %s";
LABEL_197:
              _os_log_debug_impl(&dword_1B57BA000, v88, OS_LOG_TYPE_DEBUG, v94, (uint8_t *)&v145, 0x22u);
            }
          }
          if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v141.__r_.__value_.__l.__data_);
        }
      }
      v71 = 0;
    }
  }
  if (v13)
  {
    v105 = (unint64_t *)(v13 + 8);
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      (*(void (**)(char *))(*(_QWORD *)v13 + 16))(v13);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v13);
    }
  }
  os_unfair_lock_unlock(lock);
  return v71;
}

void sub_1B57D0814(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, os_unfair_lock_t lock, uint64_t a15, int a16, int a17, char a18, uint64_t a19, std::runtime_error a20,uint64_t a21,std::runtime_error a22,int a23,__int16 a24,char a25,char a26,void *__p,void *a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,id *buf,__int128 a42,uint64_t a43,uint64_t a44,int a45)
{
  std::__shared_weak_count *v45;
  uint64_t shared_weak_owners;
  void *v48;
  AMCP::Log::Scope_Registry *v49;
  NSObject *v50;
  _opaque_pthread_t *v51;
  mach_port_t v52;

  if (!a2)
    _Unwind_Resume(exception_object);
  shared_weak_owners = v45[2].__shared_weak_owners_;
  v45[2].__shared_weak_owners_ = 0;
  if (shared_weak_owners)
    MEMORY[0x1B5E50688](shared_weak_owners, 0x1020C401EC519C5);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a11);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a12);
  std::__shared_weak_count::~__shared_weak_count(v45);
  operator delete(v48);
  os_unfair_lock_unlock(lock);
  v49 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
  AMCP::Log::Scope_Registry::get(v49);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
  v50 = *buf;
  AMCP::Log::Scope::get_os_log_t(*buf);
  objc_claimAutoreleasedReturnValue();
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&buf);
  if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
  {
    v51 = pthread_self();
    v52 = pthread_mach_thread_np(v51);
    LODWORD(buf) = 67110146;
    HIDWORD(buf) = v52;
    LOWORD(a42) = 2080;
    *(_QWORD *)((char *)&a42 + 2) = "HALS_UCRemotePlugIn.mm";
    WORD5(a42) = 1024;
    HIDWORD(a42) = 683;
    LOWORD(a43) = 1024;
    *(_DWORD *)((char *)&a43 + 2) = a15;
    HIWORD(a43) = 1024;
    LODWORD(a44) = a17;
    _os_log_error_impl(&dword_1B57BA000, v50, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Caught exception while registering IO Thread, deviceID %u, clientID %u", (uint8_t *)&buf, 0x24u);
  }

  __cxa_end_catch();
  JUMPOUT(0x1B57D022CLL);
}

void sub_1B57D0CEC()
{
  void *v0;

  __cxa_end_catch();
  JUMPOUT(0x1B57D0B28);
}

void sub_1B57D0D00()
{
  JUMPOUT(0x1B57D0B28);
}

void sub_1B57D0D08(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::runtime_error a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,std::runtime_error a32,void *a33,uint64_t a34)
{
  int v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;

  if (a2)
  {
    if (__p)
      operator delete(__p);
    if (a28)
    {
      a29 = (uint64_t)a28;
      operator delete(a28);
    }
    *(_QWORD *)(v36 - 176) = &unk_1E69A2000;
    v37 = *(_QWORD *)(v36 - 168);
    if (v37 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v37 + 32))(v37))
      *(_QWORD *)(v36 - 168) = 0;
    std::runtime_error::~runtime_error((std::runtime_error *)(v36 - 192));
    a33 = &unk_1E69A2000;
    if (a34 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a34 + 32))(a34))
      a34 = 0;
    std::runtime_error::~runtime_error(&a32);
    std::runtime_error::~runtime_error(&a19);
    if (v34)
      __cxa_free_exception(v35);
    AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&a21);
    JUMPOUT(0x1B57D0DD8);
  }
  JUMPOUT(0x1B57D0B28);
}

void sub_1B57D0DF0(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1B57D0B28);
  JUMPOUT(0x1B57D09B8);
}

uint64_t HALS_UCRemotePlugIn::Unregister_IOThread(HALS_UCRemotePlugIn *this, uint64_t a2, uint64_t a3)
{
  os_unfair_lock_s *v6;
  _QWORD *v7;
  uint64_t *v8;
  const BOOL *v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned __int8 v12;
  const BOOL *v13;
  uint64_t v14;
  unsigned __int8 v15;
  unint64_t v16;
  unint64_t i;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int8x8_t v23;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t *v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  std::runtime_error *exception;
  os_unfair_lock_s *v34;
  _BYTE buf[36];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v6 = (os_unfair_lock_s *)((char *)this + 752);
  os_unfair_lock_lock((os_unfair_lock_t)this + 188);
  v7 = (_QWORD *)((char *)this + 800);
  v8 = std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::__unordered_map_hasher<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>>>::find<AMCP::Portal::IPC::io_messenger_id_t>((_QWORD *)this + 100, a2, a3);
  if (!v8)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "HALS_UCRemotePlugIn.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 698;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Could not find io sender for device id", buf, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "could not find io sender");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v10 = v8;
  v11 = v8[3];
  v12 = atomic_load((unsigned __int8 *)(v11 + 65));
  if ((v12 & 1) == 0)
  {
    if (AMCP::Feature_Flags::access_event_link_oop_io(0, v9))
      caulk::ipc::synchronous_messenger::eventlink_sender::stop(*(caulk::ipc::synchronous_messenger::eventlink_sender **)(v11 + 8), 5.0);
    else
      caulk::ipc::synchronous_messenger::semaphore_sender::stop(*(caulk::ipc::synchronous_messenger::semaphore_sender **)(v11 + 24), 5.0);
    if (AMCP::Feature_Flags::access_collect_io_perfdata(0, v13))
    {
      v34 = v6;
      v14 = *(_QWORD *)(v11 + 40);
      if (*(_QWORD *)v14)
      {
        v15 = atomic_load((unsigned __int8 *)(v14 + 8));
        if ((v15 & 1) == 0)
        {
          v16 = atomic_load((unint64_t *)(v14 + 16));
          if (v16 <= 0x1000 && MEMORY[0x1E0DDC858] && MEMORY[0x1E0DDC830] != 0)
          {
            if (atomic_load((unint64_t *)(v14 + 16)))
            {
              for (i = 0; i < v20; ++i)
              {
                pdwriter_new_value();
                pdwriter_record_variable_dbl();
                v20 = atomic_load((unint64_t *)(v14 + 16));
                if (i > 0xFFE)
                  break;
              }
            }
          }
        }
      }
      v21 = *(_QWORD *)(v11 + 40);
      if (*(_QWORD *)v21)
      {
        if (MEMORY[0x1E0DDC808])
          pdwriter_close();
        *(_QWORD *)v21 = 0;
      }
      atomic_store(1u, (unsigned __int8 *)(v21 + 8));
      v6 = v34;
    }
  }
  v22 = objc_msgSend(*((id *)this + 89), "stop_synchronous_messenger:client_id:", a2, a3);
  v23 = *(int8x8_t *)((char *)this + 808);
  v24 = v10[1];
  v25 = (uint8x8_t)vcnt_s8(v23);
  v25.i16[0] = vaddlv_u8(v25);
  if (v25.u32[0] > 1uLL)
  {
    if (v24 >= *(_QWORD *)&v23)
      v24 %= *(_QWORD *)&v23;
  }
  else
  {
    v24 &= *(_QWORD *)&v23 - 1;
  }
  v26 = *(uint64_t **)(*v7 + 8 * v24);
  do
  {
    v27 = v26;
    v26 = (uint64_t *)*v26;
  }
  while (v26 != v10);
  if (v27 == (uint64_t *)((char *)this + 816))
    goto LABEL_40;
  v28 = v27[1];
  if (v25.u32[0] > 1uLL)
  {
    if (v28 >= *(_QWORD *)&v23)
      v28 %= *(_QWORD *)&v23;
  }
  else
  {
    v28 &= *(_QWORD *)&v23 - 1;
  }
  if (v28 != v24)
  {
LABEL_40:
    if (!*v10)
      goto LABEL_41;
    v29 = *(_QWORD *)(*v10 + 8);
    if (v25.u32[0] > 1uLL)
    {
      if (v29 >= *(_QWORD *)&v23)
        v29 %= *(_QWORD *)&v23;
    }
    else
    {
      v29 &= *(_QWORD *)&v23 - 1;
    }
    if (v29 != v24)
LABEL_41:
      *(_QWORD *)(*v7 + 8 * v24) = 0;
  }
  v30 = *v10;
  if (*v10)
  {
    v31 = *(_QWORD *)(v30 + 8);
    if (v25.u32[0] > 1uLL)
    {
      if (v31 >= *(_QWORD *)&v23)
        v31 %= *(_QWORD *)&v23;
    }
    else
    {
      v31 &= *(_QWORD *)&v23 - 1;
    }
    if (v31 != v24)
    {
      *(_QWORD *)(*v7 + 8 * v31) = v27;
      v30 = *v10;
    }
  }
  *v27 = v30;
  *v10 = 0;
  --*((_QWORD *)this + 103);
  *(_QWORD *)buf = v10;
  *(_QWORD *)&buf[8] = (char *)this + 816;
  buf[16] = 1;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,void *>>>>::reset[abi:ne180100]((uint64_t)buf);
  os_unfair_lock_unlock(v6);
  return v22;
}

void sub_1B57D11C4(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B57D0F98);
  }
  _Unwind_Resume(a1);
}

uint64_t HALS_UCRemotePlugIn::Start(HALS_UCRemotePlugIn *this, uint64_t a2, uint64_t a3)
{
  std::runtime_error *exception;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend(*((id *)this + 89), "start_io:client_info:", a2, a3))
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v6 = 136315394;
      v7 = "HALS_UCRemotePlugIn.mm";
      v8 = 1024;
      v9 = 719;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Failed calling start_io on remote driver", (uint8_t *)&v6, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed calling start_io on remote driver");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  objc_msgSend(*((id *)this + 89), "retain_reply_for_process_boost");
  return 0;
}

void sub_1B57D13AC(_Unwind_Exception *exception_object, int a2)
{
  void *v2;

  if (a2)
  {
    __cxa_free_exception(v2);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1B57D12E8);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_UCRemotePlugIn::Stop(HALS_UCRemotePlugIn *this, uint64_t a2, uint64_t a3)
{
  return objc_msgSend(*((id *)this + 89), "stop_io:client_info:", a2, a3);
}

void sub_1B57D144C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int16 a10, __int16 a11, int a12)
{
  int v12;

  if (a2)
  {
    __cxa_begin_catch(a1);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LODWORD(a9) = 136315650;
      *(_QWORD *)((char *)&a9 + 4) = "HALS_UCRemotePlugIn.mm";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 742;
      a11 = 1024;
      a12 = v12;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Failed to stop IO sender for device id %u", (uint8_t *)&a9, 0x18u);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B57D1420);
  }
  _Unwind_Resume(a1);
}

AMCP::Log::Scope_Registry *HALS_UCRemotePlugIn::GetZeroTimeStamp(HALS_UCRemotePlugIn *this, unsigned int a2, unsigned int a3, double *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  AMCP::Log::Scope_Registry *v13;
  unint64_t v14;
  NSObject *v16;
  _opaque_pthread_t *v17;
  mach_port_t v18;
  void *v19;
  std::runtime_error *exception;
  __int128 v21;
  uint64_t v22;
  uint64_t (**v23)();
  __int128 v24;
  uint64_t v25;
  std::runtime_error v26;
  std::runtime_error v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  char v33;
  __int128 v34;
  unint64_t v35;
  unint64_t v36;
  __int16 v37;
  uint64_t v38;
  uint8_t buf[8];
  __int16 v40;
  char *v41;
  __int16 v42;
  int v43;
  __int16 v44;
  _BYTE v45[14];
  const char *v46;
  int v47;
  _BYTE v48[12];
  __int16 v49;
  _BYTE v50[10];
  int v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v9 = std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::__unordered_map_hasher<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>>>::find<AMCP::Portal::IPC::io_messenger_id_t>((_QWORD *)this + 100, a2, a3);
  if (!v9)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v48 = 136315394;
      *(_QWORD *)&v48[4] = "HALS_UCRemotePlugIn.mm";
      v49 = 1024;
      *(_DWORD *)v50 = 755;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Could not find io sender for device id", v48, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "could not find io sender");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v10 = 1768911973;
  v11 = v9[3];
  v12 = atomic_load((unsigned __int8 *)(v11 + 65));
  if ((v12 & 1) == 0)
  {
    *(_DWORD *)&v48[8] = 0;
    *(_QWORD *)&v50[2] = 0;
    v51 = 0;
    v52 = 0u;
    v53 = 0u;
    v54 = 0u;
    v55 = 0u;
    v56 = 0u;
    v57 = 0u;
    v58 = 0u;
    v59 = 0u;
    v60 = 0u;
    v61 = 0u;
    v62 = 0u;
    v63 = 0u;
    v64 = 0u;
    v65 = 0u;
    v66 = 0u;
    *(_QWORD *)v48 = 3;
    *(_QWORD *)((char *)&v65 + 4) = *(_QWORD *)(v11 + 48);
    LODWORD(v34) = 0;
    v38 = 0;
    v35 = 0;
    v36 = 0;
    *((_QWORD *)&v34 + 1) = 0;
    v37 = 0;
    v13 = (AMCP::Log::Scope_Registry *)AMCP::Portal::IPC::IO_Sender::send_and_receive_io_message(v11, v48, &v34, &AMCP::Portal::IPC::k_default_timeout);
    if ((_DWORD)v13 == 1768911973)
    {
      AMCP::Log::Scope_Registry::get(v13);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v16 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        v17 = pthread_self();
        v18 = pthread_mach_thread_np(v17);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v18;
        v40 = 2080;
        v41 = "IO_Sender.cpp";
        v42 = 1024;
        v43 = 335;
        v44 = 2080;
        *(_QWORD *)v45 = "status == k_io_message_terminate_error";
        _os_log_error_impl(&dword_1B57BA000, v16, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s IO Sender timed out sending message", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v33);
      v19 = __cxa_allocate_exception(0x40uLL);
      std::runtime_error::runtime_error(&v26, "IO Sender timed out sending message");
      std::runtime_error::runtime_error(&v27, &v26);
      v29 = 0;
      v30 = 0;
      v31 = 0;
      v32 = -1;
      v27.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
      v28 = &unk_1E69A1FE0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v27);
      *(_QWORD *)&v45[6] = "OSStatus AMCP::Portal::IPC::IO_Sender::get_zero_time_stamp(Float64 &, UInt64 &, UInt64 &)";
      v46 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Server/IO_Sender.cpp";
      v47 = 335;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v21);
      v23 = off_1E69A20A0;
      v24 = v21;
      v25 = v22;
      v21 = 0uLL;
      v22 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v23);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v19, (uint64_t)buf);
    }
    *a4 = *((double *)&v34 + 1);
    v14 = v36;
    *a5 = v35;
    *a6 = v14;
    return v13;
  }
  return (AMCP::Log::Scope_Registry *)v10;
}

void sub_1B57D182C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, std::runtime_error a17, std::runtime_error a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,std::runtime_error a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint8_t buf,int a42,int a43,__int16 a44,__int16 a45,__int16 a46,__int16 a47,int a48)
{
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    *v50 = 0;
    *v49 = 0;
    *v48 = 0;
    __cxa_end_catch();
    JUMPOUT(0x1B57D15C4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_UCRemotePlugIn::WillDo_IOThread(HALS_UCRemotePlugIn *this, unsigned int a2, unsigned int a3, BOOL *a4)
{
  uint64_t *v5;
  std::runtime_error *exception;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v5 = std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::__unordered_map_hasher<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>>>::find<AMCP::Portal::IPC::io_messenger_id_t>((_QWORD *)this + 100, a2, a3);
  if (!v5)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v8 = 136315394;
      v9 = "HALS_UCRemotePlugIn.mm";
      v10 = 1024;
      v11 = 773;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Could not find io sender", (uint8_t *)&v8, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "could not find io sender");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return AMCP::Portal::IPC::IO_Sender::will_do_io_operation((AMCP::Portal::IPC::IO_Sender *)v5[3], kAudioServerPlugInIOOperationThread, a4, (BOOL *)&v8);
}

void sub_1B57D1B10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, __int16 a10, __int16 a11, int a12, uint64_t a13)
{
  int v13;
  int v14;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LODWORD(a9) = 136315906;
      *(_QWORD *)((char *)&a9 + 4) = "HALS_UCRemotePlugIn.mm";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 779;
      a11 = 1024;
      a12 = v14;
      LOWORD(a13) = 1024;
      *(_DWORD *)((char *)&a13 + 2) = v13;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Failed to send WillDo_IOThread message for device id %u, client id %u", (uint8_t *)&a9, 0x1Eu);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B57D1A48);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_UCRemotePlugIn::Begin_IOThread(HALS_UCRemotePlugIn *this, unsigned int a2, unsigned int a3, AudioServerPlugInIOCycleInfo *a4)
{
  uint64_t *v5;
  const AudioServerPlugInIOCycleInfo *v6;
  std::runtime_error *exception;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v5 = std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::__unordered_map_hasher<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>>>::find<AMCP::Portal::IPC::io_messenger_id_t>((_QWORD *)this + 100, a2, a3);
  if (!v5)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v9 = 136315394;
      v10 = "HALS_UCRemotePlugIn.mm";
      v11 = 1024;
      v12 = 792;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Could not find io sender", (uint8_t *)&v9, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "could not find io sender");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return AMCP::Portal::IPC::IO_Sender::begin_io_operation((AMCP::Portal::IPC::IO_Sender *)v5[3], 1953002084, (AMCP::Portal::IPC::IO_Sender *)a4, v6);
}

void sub_1B57D1CDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, __int16 a10, __int16 a11, int a12, uint64_t a13)
{
  int v13;
  int v14;
  void *v15;

  if (a2)
  {
    __cxa_free_exception(v15);
    __cxa_begin_catch(exception_object);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LODWORD(a9) = 136315906;
      *(_QWORD *)((char *)&a9 + 4) = "HALS_UCRemotePlugIn.mm";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 797;
      a11 = 1024;
      a12 = v14;
      LOWORD(a13) = 1024;
      *(_DWORD *)((char *)&a13 + 2) = v13;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Failed to send Begin_IOThread message for device id %u, client id %u", (uint8_t *)&a9, 0x1Eu);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B57D1C14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_UCRemotePlugIn::End_IOThread(HALS_UCRemotePlugIn *this, unsigned int a2, unsigned int a3, AudioServerPlugInIOCycleInfo *a4)
{
  uint64_t *v5;
  const AudioServerPlugInIOCycleInfo *v6;
  std::runtime_error *exception;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v5 = std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::__unordered_map_hasher<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>>>::find<AMCP::Portal::IPC::io_messenger_id_t>((_QWORD *)this + 100, a2, a3);
  if (!v5)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v9 = 136315394;
      v10 = "HALS_UCRemotePlugIn.mm";
      v11 = 1024;
      v12 = 810;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Could not find io sender", (uint8_t *)&v9, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "could not find io sender");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return AMCP::Portal::IPC::IO_Sender::end_io_operation((AMCP::Portal::IPC::IO_Sender *)v5[3], 1953002084, (AMCP::Portal::IPC::IO_Sender *)a4, v6);
}

void sub_1B57D1EA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, __int16 a10, __int16 a11, int a12, uint64_t a13)
{
  int v13;
  int v14;
  void *v15;

  if (a2)
  {
    __cxa_free_exception(v15);
    __cxa_begin_catch(exception_object);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LODWORD(a9) = 136315906;
      *(_QWORD *)((char *)&a9 + 4) = "HALS_UCRemotePlugIn.mm";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 815;
      a11 = 1024;
      a12 = v14;
      LOWORD(a13) = 1024;
      *(_DWORD *)((char *)&a13 + 2) = v13;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Failed to send End_IOThread message for device id %u, client id %u", (uint8_t *)&a9, 0x1Eu);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B57D1DDCLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_UCRemotePlugIn::WillDo_IOCycle(HALS_UCRemotePlugIn *this, unsigned int a2, unsigned int a3, BOOL *a4)
{
  uint64_t *v5;
  std::runtime_error *exception;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v5 = std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::__unordered_map_hasher<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>>>::find<AMCP::Portal::IPC::io_messenger_id_t>((_QWORD *)this + 100, a2, a3);
  if (!v5)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v8 = 136315394;
      v9 = "HALS_UCRemotePlugIn.mm";
      v10 = 1024;
      v11 = 828;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Could not find io sender", (uint8_t *)&v8, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "could not find io sender");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return AMCP::Portal::IPC::IO_Sender::will_do_io_operation((AMCP::Portal::IPC::IO_Sender *)v5[3], kAudioServerPlugInIOOperationCycle, a4, (BOOL *)&v8);
}

void sub_1B57D2070(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, __int16 a10, __int16 a11, int a12, uint64_t a13)
{
  int v13;
  int v14;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LODWORD(a9) = 136315906;
      *(_QWORD *)((char *)&a9 + 4) = "HALS_UCRemotePlugIn.mm";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 834;
      a11 = 1024;
      a12 = v14;
      LOWORD(a13) = 1024;
      *(_DWORD *)((char *)&a13 + 2) = v13;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Failed to send WillDo_IOCycle message for device id %u, client id %u", (uint8_t *)&a9, 0x1Eu);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B57D1FA8);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_UCRemotePlugIn::Begin_IOCycle(HALS_UCRemotePlugIn *this, unsigned int a2, unsigned int a3, AudioServerPlugInIOCycleInfo *a4)
{
  uint64_t *v5;
  const AudioServerPlugInIOCycleInfo *v6;
  std::runtime_error *exception;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v5 = std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::__unordered_map_hasher<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>>>::find<AMCP::Portal::IPC::io_messenger_id_t>((_QWORD *)this + 100, a2, a3);
  if (!v5)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v9 = 136315394;
      v10 = "HALS_UCRemotePlugIn.mm";
      v11 = 1024;
      v12 = 847;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Could not find io sender", (uint8_t *)&v9, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "could not find io sender");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return AMCP::Portal::IPC::IO_Sender::begin_io_operation((AMCP::Portal::IPC::IO_Sender *)v5[3], 1668899692, (AMCP::Portal::IPC::IO_Sender *)a4, v6);
}

void sub_1B57D223C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, __int16 a10, __int16 a11, int a12, uint64_t a13)
{
  int v13;
  int v14;
  void *v15;

  if (a2)
  {
    __cxa_free_exception(v15);
    __cxa_begin_catch(exception_object);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LODWORD(a9) = 136315906;
      *(_QWORD *)((char *)&a9 + 4) = "HALS_UCRemotePlugIn.mm";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 852;
      a11 = 1024;
      a12 = v14;
      LOWORD(a13) = 1024;
      *(_DWORD *)((char *)&a13 + 2) = v13;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Failed to send Begin_IOCycle message for device id %u, client id %u", (uint8_t *)&a9, 0x1Eu);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B57D2174);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_UCRemotePlugIn::End_IOCycle(HALS_UCRemotePlugIn *this, unsigned int a2, unsigned int a3, AudioServerPlugInIOCycleInfo *a4)
{
  uint64_t *v5;
  const AudioServerPlugInIOCycleInfo *v6;
  std::runtime_error *exception;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v5 = std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::__unordered_map_hasher<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>>>::find<AMCP::Portal::IPC::io_messenger_id_t>((_QWORD *)this + 100, a2, a3);
  if (!v5)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v9 = 136315394;
      v10 = "HALS_UCRemotePlugIn.mm";
      v11 = 1024;
      v12 = 865;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Could not find io sender", (uint8_t *)&v9, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "could not find io sender");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return AMCP::Portal::IPC::IO_Sender::end_io_operation((AMCP::Portal::IPC::IO_Sender *)v5[3], 1668899692, (AMCP::Portal::IPC::IO_Sender *)a4, v6);
}

void sub_1B57D2404(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, __int16 a10, __int16 a11, int a12, uint64_t a13)
{
  int v13;
  int v14;
  void *v15;

  if (a2)
  {
    __cxa_free_exception(v15);
    __cxa_begin_catch(exception_object);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LODWORD(a9) = 136315906;
      *(_QWORD *)((char *)&a9 + 4) = "HALS_UCRemotePlugIn.mm";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 870;
      a11 = 1024;
      a12 = v14;
      LOWORD(a13) = 1024;
      *(_DWORD *)((char *)&a13 + 2) = v13;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Failed to send End_IOCycle message for device id %u, client id %u", (uint8_t *)&a9, 0x1Eu);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B57D233CLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_UCRemotePlugIn::WillDo_ReadInput(HALS_UCRemotePlugIn *this, unsigned int a2, unsigned int a3, BOOL *a4)
{
  uint64_t *v5;
  std::runtime_error *exception;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v5 = std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::__unordered_map_hasher<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>>>::find<AMCP::Portal::IPC::io_messenger_id_t>((_QWORD *)this + 100, a2, a3);
  if (!v5)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v8 = 136315394;
      v9 = "HALS_UCRemotePlugIn.mm";
      v10 = 1024;
      v11 = 883;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Could not find io sender", (uint8_t *)&v8, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "could not find io sender");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return AMCP::Portal::IPC::IO_Sender::will_do_io_operation((AMCP::Portal::IPC::IO_Sender *)v5[3], kAudioServerPlugInIOOperationReadInput, a4, (BOOL *)&v8);
}

void sub_1B57D25D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, __int16 a10, __int16 a11, int a12, uint64_t a13)
{
  int v13;
  int v14;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LODWORD(a9) = 136315906;
      *(_QWORD *)((char *)&a9 + 4) = "HALS_UCRemotePlugIn.mm";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 889;
      a11 = 1024;
      a12 = v14;
      LOWORD(a13) = 1024;
      *(_DWORD *)((char *)&a13 + 2) = v13;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Failed to send WillDo_ReadInput message for device id %u, client id %u", (uint8_t *)&a9, 0x1Eu);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B57D2508);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_UCRemotePlugIn::Begin_ReadInput(HALS_UCRemotePlugIn *this, unsigned int a2, unsigned int a3, unsigned int a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return 0;
}

uint64_t HALS_UCRemotePlugIn::Do_ReadInput(uint64_t a1, unsigned int a2, int a3, unsigned int a4, unsigned int a5, AMCP::Portal::IPC::IO_Sender *a6, uint64_t a7)
{
  uint64_t *v14;
  uint64_t *v15;
  int buffer_type;
  std::runtime_error *exception;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v14 = std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::__unordered_map_hasher<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>>>::find<AMCP::Portal::IPC::io_messenger_id_t>((_QWORD *)(a1 + 800), a2, a4);
  if (!v14)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v20 = "HALS_UCRemotePlugIn.mm";
      v21 = 1024;
      v22 = 908;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Could not find io sender", buf, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "could not find io sender");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v15 = v14;
  buffer_type = HALS_UCRemotePlugIn::get_buffer_type(a1, a2, a3, a4, *(_QWORD *)a7);
  return AMCP::Portal::IPC::IO_Sender::do_io_operation(v15[3], a3, (AudioServerPlugInIOCycleInfo *)0x72656164, a6, a5, buffer_type, *(_DWORD *)(a7 + 8), 0, 0);
}

void sub_1B57D27FC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 buf, __int16 a12, __int16 a13, int a14, uint64_t a15)
{
  int v15;
  int v16;

  if (a2)
  {
    __cxa_begin_catch(a1);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 136315906;
      *(_QWORD *)((char *)&buf + 4) = "HALS_UCRemotePlugIn.mm";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 915;
      a13 = 1024;
      a14 = v16;
      LOWORD(a15) = 1024;
      *(_DWORD *)((char *)&a15 + 2) = v15;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Failed to send Do_ReadInput message for device id %u, client id %u", (uint8_t *)&buf, 0x1Eu);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B57D272CLL);
  }
  _Unwind_Resume(a1);
}

uint64_t HALS_UCRemotePlugIn::Do_IsolatedReadInput(HALS_UCRemotePlugIn *this, unsigned int a2, unsigned int a3, unsigned int a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return 1970171760;
}

uint64_t HALS_UCRemotePlugIn::Do_SetupForIsolatedIO(HALS_UCRemotePlugIn *this)
{
  return 1970171760;
}

uint64_t HALS_UCRemotePlugIn::Do_TeardownForIsolatedIO(HALS_UCRemotePlugIn *this)
{
  return 1970171760;
}

uint64_t HALS_UCRemotePlugIn::End_ReadInput(HALS_UCRemotePlugIn *this, unsigned int a2, unsigned int a3, unsigned int a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return 0;
}

uint64_t HALS_UCRemotePlugIn::WillDo_ConvertInput(HALS_UCRemotePlugIn *this, unsigned int a2, unsigned int a3, BOOL *a4, BOOL *a5)
{
  uint64_t *v7;
  std::runtime_error *exception;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v7 = std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::__unordered_map_hasher<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>>>::find<AMCP::Portal::IPC::io_messenger_id_t>((_QWORD *)this + 100, a2, a3);
  if (!v7)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v10 = 136315394;
      v11 = "HALS_UCRemotePlugIn.mm";
      v12 = 1024;
      v13 = 955;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Could not find io sender", (uint8_t *)&v10, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "could not find io sender");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return AMCP::Portal::IPC::IO_Sender::will_do_io_operation((AMCP::Portal::IPC::IO_Sender *)v7[3], kAudioServerPlugInIOOperationConvertInput, a4, a5);
}

void sub_1B57D29FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, __int16 a10, __int16 a11, int a12, uint64_t a13)
{
  int v13;
  int v14;
  void *v15;

  if (a2)
  {
    __cxa_free_exception(v15);
    __cxa_begin_catch(exception_object);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LODWORD(a9) = 136315906;
      *(_QWORD *)((char *)&a9 + 4) = "HALS_UCRemotePlugIn.mm";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 960;
      a11 = 1024;
      a12 = v14;
      LOWORD(a13) = 1024;
      *(_DWORD *)((char *)&a13 + 2) = v13;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Failed to send WillDo_ConvertInput message for device id %u, client id %u", (uint8_t *)&a9, 0x1Eu);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B57D2934);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_UCRemotePlugIn::Begin_ConvertInput(HALS_UCRemotePlugIn *this, unsigned int a2, unsigned int a3, unsigned int a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return 0;
}

uint64_t HALS_UCRemotePlugIn::Do_ConvertInput(uint64_t a1, unsigned int a2, int a3, unsigned int a4, unsigned int a5, AMCP::Portal::IPC::IO_Sender *a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v16;
  uint64_t *v17;
  int buffer_type;
  int v19;
  std::runtime_error *exception;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v16 = std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::__unordered_map_hasher<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>>>::find<AMCP::Portal::IPC::io_messenger_id_t>((_QWORD *)(a1 + 800), a2, a4);
  if (!v16)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v23 = "HALS_UCRemotePlugIn.mm";
      v24 = 1024;
      v25 = 979;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Could not find io sender", buf, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "could not find io sender");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v17 = v16;
  buffer_type = HALS_UCRemotePlugIn::get_buffer_type(a1, a2, a3, a4, *(_QWORD *)a7);
  v19 = HALS_UCRemotePlugIn::get_buffer_type(a1, a2, a3, a4, *(_QWORD *)a8);
  return AMCP::Portal::IPC::IO_Sender::do_io_operation(v17[3], a3, (AudioServerPlugInIOCycleInfo *)0x63696E70, a6, a5, buffer_type, *(_DWORD *)(a7 + 8), v19, *(_DWORD *)(a8 + 8));
}

void sub_1B57D2C50(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 buf, __int16 a12, __int16 a13, int a14, uint64_t a15)
{
  int v15;
  int v16;

  if (a2)
  {
    __cxa_begin_catch(a1);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 136315906;
      *(_QWORD *)((char *)&buf + 4) = "HALS_UCRemotePlugIn.mm";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 987;
      a13 = 1024;
      a14 = v16;
      LOWORD(a15) = 1024;
      *(_DWORD *)((char *)&a15 + 2) = v15;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Failed to send Do_ProcessOutput message for device id %u, client id %u", (uint8_t *)&buf, 0x1Eu);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B57D2B7CLL);
  }
  _Unwind_Resume(a1);
}

uint64_t HALS_UCRemotePlugIn::End_ConvertInput(HALS_UCRemotePlugIn *this, unsigned int a2, unsigned int a3, unsigned int a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return 0;
}

uint64_t HALS_UCRemotePlugIn::WillDo_ProcessInput(HALS_UCRemotePlugIn *this, unsigned int a2, unsigned int a3, BOOL *a4, BOOL *a5)
{
  uint64_t *v7;
  std::runtime_error *exception;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v7 = std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::__unordered_map_hasher<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>>>::find<AMCP::Portal::IPC::io_messenger_id_t>((_QWORD *)this + 100, a2, a3);
  if (!v7)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v10 = 136315394;
      v11 = "HALS_UCRemotePlugIn.mm";
      v12 = 1024;
      v13 = 1006;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Could not find io sender", (uint8_t *)&v10, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "could not find io sender");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return AMCP::Portal::IPC::IO_Sender::will_do_io_operation((AMCP::Portal::IPC::IO_Sender *)v7[3], kAudioServerPlugInIOOperationProcessInput, a4, a5);
}

void sub_1B57D2E2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, __int16 a10, __int16 a11, int a12, uint64_t a13)
{
  int v13;
  int v14;
  void *v15;

  if (a2)
  {
    __cxa_free_exception(v15);
    __cxa_begin_catch(exception_object);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LODWORD(a9) = 136315906;
      *(_QWORD *)((char *)&a9 + 4) = "HALS_UCRemotePlugIn.mm";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 1011;
      a11 = 1024;
      a12 = v14;
      LOWORD(a13) = 1024;
      *(_DWORD *)((char *)&a13 + 2) = v13;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Failed to send WillDo_ProcessInput message for device id %u, client id %u", (uint8_t *)&a9, 0x1Eu);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B57D2D64);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_UCRemotePlugIn::Begin_ProcessInput(HALS_UCRemotePlugIn *this, unsigned int a2, unsigned int a3, unsigned int a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return 0;
}

uint64_t HALS_UCRemotePlugIn::Do_ProcessInput(uint64_t a1, unsigned int a2, int a3, unsigned int a4, unsigned int a5, AMCP::Portal::IPC::IO_Sender *a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v16;
  uint64_t *v17;
  int buffer_type;
  int v19;
  std::runtime_error *exception;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v16 = std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::__unordered_map_hasher<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>>>::find<AMCP::Portal::IPC::io_messenger_id_t>((_QWORD *)(a1 + 800), a2, a4);
  if (!v16)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v23 = "HALS_UCRemotePlugIn.mm";
      v24 = 1024;
      v25 = 1030;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Could not find io sender", buf, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "could not find io sender");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v17 = v16;
  buffer_type = HALS_UCRemotePlugIn::get_buffer_type(a1, a2, a3, a4, *(_QWORD *)a7);
  v19 = HALS_UCRemotePlugIn::get_buffer_type(a1, a2, a3, a4, *(_QWORD *)a8);
  return AMCP::Portal::IPC::IO_Sender::do_io_operation(v17[3], a3, (AudioServerPlugInIOCycleInfo *)0x70696E70, a6, a5, buffer_type, *(_DWORD *)(a7 + 8), v19, *(_DWORD *)(a8 + 8));
}

void sub_1B57D3080(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 buf, __int16 a12, __int16 a13, int a14, uint64_t a15)
{
  int v15;
  int v16;

  if (a2)
  {
    __cxa_begin_catch(a1);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 136315906;
      *(_QWORD *)((char *)&buf + 4) = "HALS_UCRemotePlugIn.mm";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 1038;
      a13 = 1024;
      a14 = v16;
      LOWORD(a15) = 1024;
      *(_DWORD *)((char *)&a15 + 2) = v15;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Failed to send Do_ProcessOutput message for device id %u, client id %u", (uint8_t *)&buf, 0x1Eu);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B57D2FACLL);
  }
  _Unwind_Resume(a1);
}

uint64_t HALS_UCRemotePlugIn::End_ProcessInput(HALS_UCRemotePlugIn *this, unsigned int a2, unsigned int a3, unsigned int a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return 0;
}

uint64_t HALS_UCRemotePlugIn::WillDo_ProcessOutput(HALS_UCRemotePlugIn *this, unsigned int a2, unsigned int a3, BOOL *a4, BOOL *a5)
{
  uint64_t *v7;
  std::runtime_error *exception;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v7 = std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::__unordered_map_hasher<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>>>::find<AMCP::Portal::IPC::io_messenger_id_t>((_QWORD *)this + 100, a2, a3);
  if (!v7)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v10 = 136315394;
      v11 = "HALS_UCRemotePlugIn.mm";
      v12 = 1024;
      v13 = 1057;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Could not find io sender", (uint8_t *)&v10, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "could not find io sender");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return AMCP::Portal::IPC::IO_Sender::will_do_io_operation((AMCP::Portal::IPC::IO_Sender *)v7[3], kAudioServerPlugInIOOperationProcessOutput, a4, a5);
}

void sub_1B57D325C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, __int16 a10, __int16 a11, int a12, uint64_t a13)
{
  int v13;
  int v14;
  void *v15;

  if (a2)
  {
    __cxa_free_exception(v15);
    __cxa_begin_catch(exception_object);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LODWORD(a9) = 136315906;
      *(_QWORD *)((char *)&a9 + 4) = "HALS_UCRemotePlugIn.mm";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 1062;
      a11 = 1024;
      a12 = v14;
      LOWORD(a13) = 1024;
      *(_DWORD *)((char *)&a13 + 2) = v13;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Failed to send WillDo_ProcessOutput message for device id %u, client id %u", (uint8_t *)&a9, 0x1Eu);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B57D3194);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_UCRemotePlugIn::Begin_ProcessOutput(HALS_UCRemotePlugIn *this, unsigned int a2, unsigned int a3, unsigned int a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return 0;
}

uint64_t HALS_UCRemotePlugIn::Do_ProcessOutput(uint64_t a1, unsigned int a2, int a3, unsigned int a4, unsigned int a5, AMCP::Portal::IPC::IO_Sender *a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v16;
  uint64_t *v17;
  int buffer_type;
  int v19;
  std::runtime_error *exception;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v16 = std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::__unordered_map_hasher<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>>>::find<AMCP::Portal::IPC::io_messenger_id_t>((_QWORD *)(a1 + 800), a2, a4);
  if (!v16)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v23 = "HALS_UCRemotePlugIn.mm";
      v24 = 1024;
      v25 = 1081;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Could not find io sender", buf, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "could not find io sender");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v17 = v16;
  buffer_type = HALS_UCRemotePlugIn::get_buffer_type(a1, a2, a3, a4, *(_QWORD *)a7);
  v19 = HALS_UCRemotePlugIn::get_buffer_type(a1, a2, a3, a4, *(_QWORD *)a8);
  return AMCP::Portal::IPC::IO_Sender::do_io_operation(v17[3], a3, (AudioServerPlugInIOCycleInfo *)0x706F7574, a6, a5, buffer_type, *(_DWORD *)(a7 + 8), v19, *(_DWORD *)(a8 + 8));
}

void sub_1B57D34B0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 buf, __int16 a12, __int16 a13, int a14, uint64_t a15)
{
  int v15;
  int v16;

  if (a2)
  {
    __cxa_begin_catch(a1);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 136315906;
      *(_QWORD *)((char *)&buf + 4) = "HALS_UCRemotePlugIn.mm";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 1089;
      a13 = 1024;
      a14 = v16;
      LOWORD(a15) = 1024;
      *(_DWORD *)((char *)&a15 + 2) = v15;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Failed to send Do_ProcessOutput message for device id %u, client id %u", (uint8_t *)&buf, 0x1Eu);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B57D33DCLL);
  }
  _Unwind_Resume(a1);
}

uint64_t HALS_UCRemotePlugIn::End_ProcessOutput(HALS_UCRemotePlugIn *this, unsigned int a2, unsigned int a3, unsigned int a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return 0;
}

uint64_t HALS_UCRemotePlugIn::WillDo_MixOutput(HALS_UCRemotePlugIn *this, unsigned int a2, unsigned int a3, BOOL *a4)
{
  uint64_t *v5;
  std::runtime_error *exception;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v5 = std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::__unordered_map_hasher<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>>>::find<AMCP::Portal::IPC::io_messenger_id_t>((_QWORD *)this + 100, a2, a3);
  if (!v5)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v8 = 136315394;
      v9 = "HALS_UCRemotePlugIn.mm";
      v10 = 1024;
      v11 = 1108;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Could not find io sender", (uint8_t *)&v8, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "could not find io sender");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return AMCP::Portal::IPC::IO_Sender::will_do_io_operation((AMCP::Portal::IPC::IO_Sender *)v5[3], kAudioServerPlugInIOOperationMixOutput, a4, (BOOL *)&v8);
}

void sub_1B57D3688(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, __int16 a10, __int16 a11, int a12, uint64_t a13)
{
  int v13;
  int v14;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LODWORD(a9) = 136315906;
      *(_QWORD *)((char *)&a9 + 4) = "HALS_UCRemotePlugIn.mm";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 1114;
      a11 = 1024;
      a12 = v14;
      LOWORD(a13) = 1024;
      *(_DWORD *)((char *)&a13 + 2) = v13;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Failed to send WillDo_MixOutput message for device id %u, client id %u", (uint8_t *)&a9, 0x1Eu);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B57D35C0);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_UCRemotePlugIn::Begin_MixOutput(HALS_UCRemotePlugIn *this, unsigned int a2, unsigned int a3, unsigned int a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return 0;
}

uint64_t HALS_UCRemotePlugIn::Do_MixOutput(uint64_t a1, unsigned int a2, int a3, unsigned int a4, unsigned int a5, AMCP::Portal::IPC::IO_Sender *a6, uint64_t a7)
{
  uint64_t *v14;
  uint64_t *v15;
  int buffer_type;
  std::runtime_error *exception;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v14 = std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::__unordered_map_hasher<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>>>::find<AMCP::Portal::IPC::io_messenger_id_t>((_QWORD *)(a1 + 800), a2, a4);
  if (!v14)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v20 = "HALS_UCRemotePlugIn.mm";
      v21 = 1024;
      v22 = 1133;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Could not find io sender", buf, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "could not find io sender");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v15 = v14;
  buffer_type = HALS_UCRemotePlugIn::get_buffer_type(a1, a2, a3, a4, *(_QWORD *)a7);
  return AMCP::Portal::IPC::IO_Sender::do_io_operation(v15[3], a3, (AudioServerPlugInIOCycleInfo *)0x6D69786F, a6, a5, buffer_type, *(_DWORD *)(a7 + 8), 0, 0);
}

void sub_1B57D38B4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 buf, __int16 a12, __int16 a13, int a14, uint64_t a15)
{
  int v15;
  int v16;

  if (a2)
  {
    __cxa_begin_catch(a1);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 136315906;
      *(_QWORD *)((char *)&buf + 4) = "HALS_UCRemotePlugIn.mm";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 1140;
      a13 = 1024;
      a14 = v16;
      LOWORD(a15) = 1024;
      *(_DWORD *)((char *)&a15 + 2) = v15;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Failed to send Do_MixOutput message for device id %u, client id %u", (uint8_t *)&buf, 0x1Eu);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B57D37E4);
  }
  _Unwind_Resume(a1);
}

uint64_t HALS_UCRemotePlugIn::End_MixOutput(HALS_UCRemotePlugIn *this, unsigned int a2, unsigned int a3, unsigned int a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return 0;
}

uint64_t HALS_UCRemotePlugIn::WillDo_ProcessMix(HALS_UCRemotePlugIn *this, unsigned int a2, unsigned int a3, BOOL *a4, BOOL *a5)
{
  uint64_t *v7;
  std::runtime_error *exception;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v7 = std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::__unordered_map_hasher<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>>>::find<AMCP::Portal::IPC::io_messenger_id_t>((_QWORD *)this + 100, a2, a3);
  if (!v7)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v10 = 136315394;
      v11 = "HALS_UCRemotePlugIn.mm";
      v12 = 1024;
      v13 = 1159;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Could not find io sender", (uint8_t *)&v10, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "could not find io sender");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return AMCP::Portal::IPC::IO_Sender::will_do_io_operation((AMCP::Portal::IPC::IO_Sender *)v7[3], kAudioServerPlugInIOOperationProcessMix, a4, a5);
}

void sub_1B57D3A90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, __int16 a10, __int16 a11, int a12, uint64_t a13)
{
  int v13;
  int v14;
  void *v15;

  if (a2)
  {
    __cxa_free_exception(v15);
    __cxa_begin_catch(exception_object);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LODWORD(a9) = 136315906;
      *(_QWORD *)((char *)&a9 + 4) = "HALS_UCRemotePlugIn.mm";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 1164;
      a11 = 1024;
      a12 = v14;
      LOWORD(a13) = 1024;
      *(_DWORD *)((char *)&a13 + 2) = v13;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Failed to send WillDo_ProcessMix message for device id %u, client id %u", (uint8_t *)&a9, 0x1Eu);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B57D39C8);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_UCRemotePlugIn::Begin_ProcessMix(HALS_UCRemotePlugIn *this, unsigned int a2, unsigned int a3, unsigned int a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return 0;
}

uint64_t HALS_UCRemotePlugIn::Do_ProcessMix(uint64_t a1, unsigned int a2, int a3, unsigned int a4, unsigned int a5, AMCP::Portal::IPC::IO_Sender *a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v16;
  uint64_t *v17;
  int buffer_type;
  int v19;
  std::runtime_error *exception;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v16 = std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::__unordered_map_hasher<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>>>::find<AMCP::Portal::IPC::io_messenger_id_t>((_QWORD *)(a1 + 800), a2, a4);
  if (!v16)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v23 = "HALS_UCRemotePlugIn.mm";
      v24 = 1024;
      v25 = 1183;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Could not find io sender", buf, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "could not find io sender");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v17 = v16;
  buffer_type = HALS_UCRemotePlugIn::get_buffer_type(a1, a2, a3, a4, *(_QWORD *)a7);
  v19 = HALS_UCRemotePlugIn::get_buffer_type(a1, a2, a3, a4, *(_QWORD *)a8);
  return AMCP::Portal::IPC::IO_Sender::do_io_operation(v17[3], a3, (AudioServerPlugInIOCycleInfo *)0x706D6978, a6, a5, buffer_type, *(_DWORD *)(a7 + 8), v19, *(_DWORD *)(a8 + 8));
}

void sub_1B57D3CE4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 buf, __int16 a12, __int16 a13, int a14, uint64_t a15)
{
  int v15;
  int v16;

  if (a2)
  {
    __cxa_begin_catch(a1);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 136315906;
      *(_QWORD *)((char *)&buf + 4) = "HALS_UCRemotePlugIn.mm";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 1191;
      a13 = 1024;
      a14 = v16;
      LOWORD(a15) = 1024;
      *(_DWORD *)((char *)&a15 + 2) = v15;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Failed to send Do_ProcessMix message for device id %u, client id %u", (uint8_t *)&buf, 0x1Eu);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B57D3C10);
  }
  _Unwind_Resume(a1);
}

uint64_t HALS_UCRemotePlugIn::End_ProcessMix(HALS_UCRemotePlugIn *this, unsigned int a2, unsigned int a3, unsigned int a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return 0;
}

uint64_t HALS_UCRemotePlugIn::WillDo_ConvertMix(HALS_UCRemotePlugIn *this, unsigned int a2, unsigned int a3, BOOL *a4, BOOL *a5)
{
  uint64_t *v7;
  std::runtime_error *exception;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v7 = std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::__unordered_map_hasher<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>>>::find<AMCP::Portal::IPC::io_messenger_id_t>((_QWORD *)this + 100, a2, a3);
  if (!v7)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v10 = 136315394;
      v11 = "HALS_UCRemotePlugIn.mm";
      v12 = 1024;
      v13 = 1210;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Could not find io sender", (uint8_t *)&v10, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "could not find io sender");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return AMCP::Portal::IPC::IO_Sender::will_do_io_operation((AMCP::Portal::IPC::IO_Sender *)v7[3], kAudioServerPlugInIOOperationConvertMix, a4, a5);
}

void sub_1B57D3EC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, __int16 a10, __int16 a11, int a12, uint64_t a13)
{
  int v13;
  int v14;
  void *v15;

  if (a2)
  {
    __cxa_free_exception(v15);
    __cxa_begin_catch(exception_object);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LODWORD(a9) = 136315906;
      *(_QWORD *)((char *)&a9 + 4) = "HALS_UCRemotePlugIn.mm";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 1215;
      a11 = 1024;
      a12 = v14;
      LOWORD(a13) = 1024;
      *(_DWORD *)((char *)&a13 + 2) = v13;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Failed to send WillDo_ConvertMix message for device id %u, client id %u", (uint8_t *)&a9, 0x1Eu);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B57D3DF8);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_UCRemotePlugIn::Begin_ConvertMix(HALS_UCRemotePlugIn *this, unsigned int a2, unsigned int a3, unsigned int a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return 0;
}

uint64_t HALS_UCRemotePlugIn::Do_ConvertMix(uint64_t a1, unsigned int a2, int a3, unsigned int a4, unsigned int a5, AMCP::Portal::IPC::IO_Sender *a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v16;
  uint64_t *v17;
  int buffer_type;
  int v19;
  std::runtime_error *exception;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v16 = std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::__unordered_map_hasher<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>>>::find<AMCP::Portal::IPC::io_messenger_id_t>((_QWORD *)(a1 + 800), a2, a4);
  if (!v16)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v23 = "HALS_UCRemotePlugIn.mm";
      v24 = 1024;
      v25 = 1234;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Could not find io sender", buf, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "could not find io sender");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v17 = v16;
  buffer_type = HALS_UCRemotePlugIn::get_buffer_type(a1, a2, a3, a4, *(_QWORD *)a7);
  v19 = HALS_UCRemotePlugIn::get_buffer_type(a1, a2, a3, a4, *(_QWORD *)a8);
  return AMCP::Portal::IPC::IO_Sender::do_io_operation(v17[3], a3, (AudioServerPlugInIOCycleInfo *)0x636D6978, a6, a5, buffer_type, *(_DWORD *)(a7 + 8), v19, *(_DWORD *)(a8 + 8));
}

void sub_1B57D4114(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 buf, __int16 a12, __int16 a13, int a14, uint64_t a15)
{
  int v15;
  int v16;

  if (a2)
  {
    __cxa_begin_catch(a1);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 136315906;
      *(_QWORD *)((char *)&buf + 4) = "HALS_UCRemotePlugIn.mm";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 1242;
      a13 = 1024;
      a14 = v16;
      LOWORD(a15) = 1024;
      *(_DWORD *)((char *)&a15 + 2) = v15;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Failed to send Do_ConvertMix message for device id %u, client id %u", (uint8_t *)&buf, 0x1Eu);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B57D4040);
  }
  _Unwind_Resume(a1);
}

uint64_t HALS_UCRemotePlugIn::End_ConvertMix(HALS_UCRemotePlugIn *this, unsigned int a2, unsigned int a3, unsigned int a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return 0;
}

uint64_t HALS_UCRemotePlugIn::WillDo_WriteMix(HALS_UCRemotePlugIn *this, unsigned int a2, unsigned int a3, BOOL *a4)
{
  uint64_t *v5;
  std::runtime_error *exception;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v5 = std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::__unordered_map_hasher<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>>>::find<AMCP::Portal::IPC::io_messenger_id_t>((_QWORD *)this + 100, a2, a3);
  if (!v5)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v8 = 136315394;
      v9 = "HALS_UCRemotePlugIn.mm";
      v10 = 1024;
      v11 = 1261;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Could not find io sender", (uint8_t *)&v8, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "could not find io sender");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return AMCP::Portal::IPC::IO_Sender::will_do_io_operation((AMCP::Portal::IPC::IO_Sender *)v5[3], kAudioServerPlugInIOOperationWriteMix, a4, (BOOL *)&v8);
}

void sub_1B57D42EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, __int16 a10, __int16 a11, int a12, uint64_t a13)
{
  int v13;
  int v14;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LODWORD(a9) = 136315906;
      *(_QWORD *)((char *)&a9 + 4) = "HALS_UCRemotePlugIn.mm";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 1267;
      a11 = 1024;
      a12 = v14;
      LOWORD(a13) = 1024;
      *(_DWORD *)((char *)&a13 + 2) = v13;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Failed to send WillDo_WriteMix message for device id %u, client id %u", (uint8_t *)&a9, 0x1Eu);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B57D4224);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_UCRemotePlugIn::Begin_WriteMix(HALS_UCRemotePlugIn *this, unsigned int a2, unsigned int a3, unsigned int a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return 0;
}

uint64_t HALS_UCRemotePlugIn::Do_WriteMix(uint64_t a1, unsigned int a2, int a3, unsigned int a4, unsigned int a5, AMCP::Portal::IPC::IO_Sender *a6, uint64_t a7)
{
  uint64_t *v14;
  uint64_t *v15;
  int buffer_type;
  std::runtime_error *exception;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v14 = std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::__unordered_map_hasher<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>>>::find<AMCP::Portal::IPC::io_messenger_id_t>((_QWORD *)(a1 + 800), a2, a4);
  if (!v14)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v20 = "HALS_UCRemotePlugIn.mm";
      v21 = 1024;
      v22 = 1286;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Could not find io sender", buf, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "could not find io sender");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v15 = v14;
  buffer_type = HALS_UCRemotePlugIn::get_buffer_type(a1, a2, a3, a4, *(_QWORD *)a7);
  return AMCP::Portal::IPC::IO_Sender::do_io_operation(v15[3], a3, (AudioServerPlugInIOCycleInfo *)0x72697465, a6, a5, buffer_type, *(_DWORD *)(a7 + 8), 0, 0);
}

void sub_1B57D4518(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 buf, __int16 a12, __int16 a13, int a14, uint64_t a15)
{
  int v15;
  int v16;

  if (a2)
  {
    __cxa_begin_catch(a1);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 136315906;
      *(_QWORD *)((char *)&buf + 4) = "HALS_UCRemotePlugIn.mm";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 1293;
      a13 = 1024;
      a14 = v16;
      LOWORD(a15) = 1024;
      *(_DWORD *)((char *)&a15 + 2) = v15;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Failed to send Do_WriteMix message for device id %u, client id %u", (uint8_t *)&buf, 0x1Eu);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B57D4448);
  }
  _Unwind_Resume(a1);
}

uint64_t HALS_UCRemotePlugIn::End_WriteMix(HALS_UCRemotePlugIn *this, unsigned int a2, unsigned int a3, unsigned int a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return 0;
}

BOOL HALS_UCRemotePlugIn::ObjectHasProperty(HALS_UCRemotePlugIn *this, int a2, int a3, const AudioObjectPropertyAddress *a4)
{
  void *v4;
  BOOL v5;
  _DWORD v7[2];
  AudioObjectPropertyAddress v8;
  char v9;

  v9 = 0;
  v4 = (void *)*((_QWORD *)this + 89);
  v7[0] = a2;
  v7[1] = a3;
  v8 = *a4;
  if (objc_msgSend(v4, "has_property:out_has_property:", v7, &v9))
    v5 = 1;
  else
    v5 = v9 == 0;
  return !v5;
}

BOOL HALS_UCRemotePlugIn::ObjectIsPropertySettable(HALS_UCRemotePlugIn *this, int a2, int a3, const AudioObjectPropertyAddress *a4)
{
  void *v6;
  int v7;
  uint8x8_t v8;
  int v9;
  void *v11;
  int16x8_t v12;
  int16x8_t v13;
  uint64_t mElement;
  _DWORD *exception;
  _BYTE v16[5];
  unsigned __int32 v17;
  char v18;
  __int32 v19;
  char v20;
  _DWORD v21[2];
  AudioObjectPropertyAddress v22;
  char v23;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  __int32 *v29;
  __int16 v30;
  unsigned __int32 *v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  int v35;
  __int16 v36;
  _BYTE *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v23 = 0;
  v6 = (void *)*((_QWORD *)this + 89);
  v21[0] = a2;
  v21[1] = a3;
  v22 = *a4;
  v7 = objc_msgSend(v6, "is_property_settable:out_settable:", v21, &v23);
  v9 = v7;
  if (v7)
  {
    if (v7 == 1768911973)
    {
      objc_msgSend(*((id *)this + 89), "connection_to_driver");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "invalidate");

    }
    v8.i32[0] = a4->mSelector;
    v12 = (int16x8_t)vmovl_u8(v8);
    *(int16x4_t *)v12.i8 = vrev64_s16(*(int16x4_t *)v12.i8);
    *(int8x8_t *)v12.i8 = vmovn_s16(v12);
    v19 = v12.i32[0];
    v20 = 0;
    v12.i32[0] = a4->mScope;
    v13 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v12.i8);
    *(int16x4_t *)v13.i8 = vrev64_s16(*(int16x4_t *)v13.i8);
    v17 = vmovn_s16(v13).u32[0];
    v18 = 0;
    v16[0] = HIBYTE(v9);
    v16[1] = BYTE2(v9);
    v16[2] = BYTE1(v9);
    v16[3] = v9;
    v16[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      mElement = a4->mElement;
      *(_DWORD *)buf = 136316674;
      v25 = "HALS_UCRemotePlugIn.mm";
      v26 = 1024;
      v27 = 1326;
      v28 = 2080;
      v29 = &v19;
      v30 = 2080;
      v31 = &v17;
      v32 = 2048;
      v33 = mElement;
      v34 = 1024;
      v35 = v9;
      v36 = 2080;
      v37 = v16;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_UCRemotePlugIn::ObjectIsPropertySettable: failed:  [%s/%s/%lu], Error: %d (%s)", buf, 0x40u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = v9;
  }
  return v23 != 0;
}

void sub_1B57D4808(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t HALS_UCRemotePlugIn::ObjectGetPropertyDataSize(HALS_UCRemotePlugIn *this, int a2, int a3, const AudioObjectPropertyAddress *a4, uint64_t a5, const void *a6)
{
  void *v8;
  int v9;
  uint8x8_t v10;
  int v11;
  void *v13;
  int16x8_t v14;
  int16x8_t v15;
  uint64_t mElement;
  _DWORD *exception;
  _BYTE v18[5];
  unsigned __int32 v19;
  char v20;
  __int32 v21;
  char v22;
  _DWORD v23[2];
  AudioObjectPropertyAddress v24;
  unsigned int v25;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  int v29;
  __int16 v30;
  __int32 *v31;
  __int16 v32;
  unsigned __int32 *v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  int v37;
  __int16 v38;
  _BYTE *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v8 = (void *)*((_QWORD *)this + 89);
  v23[0] = a2;
  v23[1] = a3;
  v24 = *a4;
  v25 = 0;
  v9 = objc_msgSend(v8, "get_property_data_size:qualifier_data_size:qualifier_data:out_size:", v23, a5, a6, &v25);
  v11 = v9;
  if (v9)
  {
    if (v9 == 1768911973)
    {
      objc_msgSend(*((id *)this + 89), "connection_to_driver");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "invalidate");

    }
    v10.i32[0] = a4->mSelector;
    v14 = (int16x8_t)vmovl_u8(v10);
    *(int16x4_t *)v14.i8 = vrev64_s16(*(int16x4_t *)v14.i8);
    *(int8x8_t *)v14.i8 = vmovn_s16(v14);
    v21 = v14.i32[0];
    v22 = 0;
    v14.i32[0] = a4->mScope;
    v15 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v14.i8);
    *(int16x4_t *)v15.i8 = vrev64_s16(*(int16x4_t *)v15.i8);
    v19 = vmovn_s16(v15).u32[0];
    v20 = 0;
    v18[0] = HIBYTE(v11);
    v18[1] = BYTE2(v11);
    v18[2] = BYTE1(v11);
    v18[3] = v11;
    v18[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      mElement = a4->mElement;
      *(_DWORD *)buf = 136316674;
      v27 = "HALS_UCRemotePlugIn.mm";
      v28 = 1024;
      v29 = 1338;
      v30 = 2080;
      v31 = &v21;
      v32 = 2080;
      v33 = &v19;
      v34 = 2048;
      v35 = mElement;
      v36 = 1024;
      v37 = v11;
      v38 = 2080;
      v39 = v18;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_UCRemotePlugIn::ObjectGetPropertyDataSize: failed:  [%s/%s/%lu], Error: %d (%s)", buf, 0x40u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = v11;
  }
  return v25;
}

void sub_1B57D4A04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t HALS_UCRemotePlugIn::ObjectGetPropertyData(HALS_UCRemotePlugIn *this, int a2, int a3, const AudioObjectPropertyAddress *a4, uint64_t a5, const void *a6, uint64_t a7, unsigned int *a8, void *a9)
{
  void *v11;
  uint64_t result;
  uint8x8_t v13;
  int v14;
  void *v15;
  int16x8_t v16;
  int16x8_t v17;
  uint64_t mElement;
  _DWORD *exception;
  _BYTE v20[5];
  unsigned __int32 v21;
  char v22;
  __int32 v23;
  char v24;
  _DWORD v25[2];
  AudioObjectPropertyAddress v26;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  int v30;
  __int16 v31;
  __int32 *v32;
  __int16 v33;
  unsigned __int32 *v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  int v38;
  __int16 v39;
  _BYTE *v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v11 = (void *)*((_QWORD *)this + 89);
  v25[0] = a2;
  v25[1] = a3;
  v26 = *a4;
  result = objc_msgSend(v11, "get_property_data:qualifier_data_size:qualifier_data:data_size:out_data_size:out_data:", v25, a5, a6, a7, a8, a9);
  v14 = result;
  if ((_DWORD)result)
  {
    if ((_DWORD)result == 1768911973)
    {
      objc_msgSend(*((id *)this + 89), "connection_to_driver");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "invalidate");

    }
    v13.i32[0] = a4->mSelector;
    v16 = (int16x8_t)vmovl_u8(v13);
    *(int16x4_t *)v16.i8 = vrev64_s16(*(int16x4_t *)v16.i8);
    *(int8x8_t *)v16.i8 = vmovn_s16(v16);
    v23 = v16.i32[0];
    v24 = 0;
    v16.i32[0] = a4->mScope;
    v17 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v16.i8);
    *(int16x4_t *)v17.i8 = vrev64_s16(*(int16x4_t *)v17.i8);
    v21 = vmovn_s16(v17).u32[0];
    v22 = 0;
    v20[0] = HIBYTE(v14);
    v20[1] = BYTE2(v14);
    v20[2] = BYTE1(v14);
    v20[3] = v14;
    v20[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      mElement = a4->mElement;
      *(_DWORD *)buf = 136316674;
      v28 = "HALS_UCRemotePlugIn.mm";
      v29 = 1024;
      v30 = 1349;
      v31 = 2080;
      v32 = &v23;
      v33 = 2080;
      v34 = &v21;
      v35 = 2048;
      v36 = mElement;
      v37 = 1024;
      v38 = v14;
      v39 = 2080;
      v40 = v20;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_UCRemotePlugIn::ObjectGetPropertyData: failed:  [%s/%s/%lu], Error: %d (%s)", buf, 0x40u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = v14;
  }
  return result;
}

void sub_1B57D4C04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t HALS_UCRemotePlugIn::ObjectSetPropertyData(HALS_UCRemotePlugIn *this, int a2, int a3, const AudioObjectPropertyAddress *a4, uint64_t a5, const void *a6, uint64_t a7, const void *a8)
{
  void *v10;
  uint64_t result;
  uint8x8_t v12;
  int v13;
  void *v14;
  int16x8_t v15;
  int16x8_t v16;
  uint64_t mElement;
  _DWORD *exception;
  _BYTE v19[5];
  unsigned __int32 v20;
  char v21;
  __int32 v22;
  char v23;
  _DWORD v24[2];
  AudioObjectPropertyAddress v25;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  int v29;
  __int16 v30;
  __int32 *v31;
  __int16 v32;
  unsigned __int32 *v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  int v37;
  __int16 v38;
  _BYTE *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v10 = (void *)*((_QWORD *)this + 89);
  v24[0] = a2;
  v24[1] = a3;
  v25 = *a4;
  result = objc_msgSend(v10, "set_property_data:qualifier_data_size:qualifier_data:data_size:data:", v24, a5, a6, a7, a8);
  v13 = result;
  if ((_DWORD)result)
  {
    if ((_DWORD)result == 1768911973)
    {
      objc_msgSend(*((id *)this + 89), "connection_to_driver");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "invalidate");

    }
    v12.i32[0] = a4->mSelector;
    v15 = (int16x8_t)vmovl_u8(v12);
    *(int16x4_t *)v15.i8 = vrev64_s16(*(int16x4_t *)v15.i8);
    *(int8x8_t *)v15.i8 = vmovn_s16(v15);
    v22 = v15.i32[0];
    v23 = 0;
    v15.i32[0] = a4->mScope;
    v16 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v15.i8);
    *(int16x4_t *)v16.i8 = vrev64_s16(*(int16x4_t *)v16.i8);
    v20 = vmovn_s16(v16).u32[0];
    v21 = 0;
    v19[0] = HIBYTE(v13);
    v19[1] = BYTE2(v13);
    v19[2] = BYTE1(v13);
    v19[3] = v13;
    v19[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      mElement = a4->mElement;
      *(_DWORD *)buf = 136316674;
      v27 = "HALS_UCRemotePlugIn.mm";
      v28 = 1024;
      v29 = 1359;
      v30 = 2080;
      v31 = &v22;
      v32 = 2080;
      v33 = &v20;
      v34 = 2048;
      v35 = mElement;
      v36 = 1024;
      v37 = v13;
      v38 = 2080;
      v39 = v19;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_UCRemotePlugIn::ObjectSetPropertyData: failed:  [%s/%s/%lu], Error: %d (%s)", buf, 0x40u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = v13;
  }
  return result;
}

void sub_1B57D4DFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::__unordered_map_hasher<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>>>::find<AMCP::Portal::IPC::io_messenger_id_t>(_QWORD *a1, unsigned int a2, unsigned int a3)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;
  uint64_t **v7;
  uint64_t *result;
  unint64_t v9;

  v3 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v3)
    return 0;
  v4 = 0xC6A4A7935BD1E995
     * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * a3) ^ ((0xC6A4A7935BD1E995 * a3) >> 47))) ^ (0x35A98F4D286A90B9 * ((0xC6A4A7935BD1E995 * a2) ^ ((0xC6A4A7935BD1E995 * a2) >> 47)) + 3864292196u))
     + 3864292196u;
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0xC6A4A7935BD1E995
       * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * a3) ^ ((0xC6A4A7935BD1E995 * a3) >> 47))) ^ (0x35A98F4D286A90B9 * ((0xC6A4A7935BD1E995 * a2) ^ ((0xC6A4A7935BD1E995 * a2) >> 47)) + 3864292196u))
       + 3864292196u;
    if (v4 >= *(_QWORD *)&v3)
      v6 = v4 % *(_QWORD *)&v3;
  }
  else
  {
    v6 = v4 & (*(_QWORD *)&v3 - 1);
  }
  v7 = *(uint64_t ***)(*a1 + 8 * v6);
  if (!v7)
    return 0;
  for (result = *v7; result; result = (uint64_t *)*result)
  {
    v9 = result[1];
    if (v9 == v4)
    {
      if (*((_DWORD *)result + 4) == a2 && *((_DWORD *)result + 5) == a3)
        return result;
    }
    else
    {
      if (v5.u32[0] > 1uLL)
      {
        if (v9 >= *(_QWORD *)&v3)
          v9 %= *(_QWORD *)&v3;
      }
      else
      {
        v9 &= *(_QWORD *)&v3 - 1;
      }
      if (v9 != v6)
        return 0;
    }
  }
  return result;
}

uint64_t HALS_UCRemotePlugIn::get_buffer_type(uint64_t a1, int a2, int a3, int a4, uint64_t a5)
{
  uint64_t v6;
  _QWORD *v7;
  unsigned int *v8;
  uint64_t *v9;
  _DWORD v11[9];
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;

  v6 = 0;
  v17 = *MEMORY[0x1E0C80C00];
  v11[0] = a2;
  v11[1] = a4;
  v11[2] = a3;
  v11[3] = 1;
  v11[4] = a2;
  v11[5] = 0;
  v11[6] = a3;
  v11[7] = 2;
  v11[8] = a2;
  v12 = 0;
  v13 = 3;
  v14 = a2;
  v15 = 0;
  v7 = (_QWORD *)(a1 + 840);
  v8 = v11;
  v16 = 4;
  while (1)
  {
    v9 = std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>,std::__unordered_map_hasher<AMCP::Portal::IPC::shared_buffer_info_t,std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>,std::hash<AMCP::Portal::IPC::shared_buffer_info_t>,std::equal_to<AMCP::Portal::IPC::shared_buffer_info_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::shared_buffer_info_t,std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>,std::equal_to<AMCP::Portal::IPC::shared_buffer_info_t>,std::hash<AMCP::Portal::IPC::shared_buffer_info_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>>>::find<AMCP::Portal::IPC::shared_buffer_info_t>(v7, v8);
    if (v9)
    {
      if (v9[7] == a5)
        break;
    }
    ++v6;
    v8 += 4;
    if (v6 == 4)
      return 0;
  }
  return v11[4 * v6 + 3];
}

uint64_t *std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>,std::__unordered_map_hasher<AMCP::Portal::IPC::shared_buffer_info_t,std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>,std::hash<AMCP::Portal::IPC::shared_buffer_info_t>,std::equal_to<AMCP::Portal::IPC::shared_buffer_info_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::shared_buffer_info_t,std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>,std::equal_to<AMCP::Portal::IPC::shared_buffer_info_t>,std::hash<AMCP::Portal::IPC::shared_buffer_info_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>>>::find<AMCP::Portal::IPC::shared_buffer_info_t>(_QWORD *a1, unsigned int *a2)
{
  unint64_t v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  uint64_t *i;
  unint64_t v9;

  v4 = std::hash<AMCP::Portal::IPC::shared_buffer_info_t>::operator()(a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v7 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v7 = (*(_QWORD *)&v5 - 1) & v4;
  }
  i = *(uint64_t **)(*a1 + 8 * v7);
  if (i)
  {
    for (i = (uint64_t *)*i; i; i = (uint64_t *)*i)
    {
      v9 = i[1];
      if (v9 == v4)
      {
        if (*((_DWORD *)i + 4) == *a2
          && *((_DWORD *)i + 5) == a2[1]
          && *((_DWORD *)i + 6) == a2[2]
          && *((_DWORD *)i + 7) == a2[3])
        {
          return i;
        }
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v9 >= *(_QWORD *)&v5)
            v9 %= *(_QWORD *)&v5;
        }
        else
        {
          v9 &= *(_QWORD *)&v5 - 1;
        }
        if (v9 != v7)
          return 0;
      }
    }
  }
  return i;
}

unint64_t std::hash<AMCP::Portal::IPC::shared_buffer_info_t>::operator()(unsigned int *a1)
{
  return 0xC6A4A7935BD1E995
       * ((0xC6A4A7935BD1E995
         * ((0xC6A4A7935BD1E995
           * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * a1[1]) ^ ((0xC6A4A7935BD1E995 * a1[1]) >> 47))) ^ (0x35A98F4D286A90B9 * ((0xC6A4A7935BD1E995 * *a1) ^ ((0xC6A4A7935BD1E995 * *a1) >> 47)) + 3864292196u))
           + 3864292196u) ^ (0xC6A4A7935BD1E995
                           * ((0xC6A4A7935BD1E995 * a1[2]) ^ ((0xC6A4A7935BD1E995 * a1[2]) >> 47))))
         + 3864292196u) ^ (0xC6A4A7935BD1E995
                         * ((0xC6A4A7935BD1E995 * (int)a1[3]) ^ ((0xC6A4A7935BD1E995 * (int)a1[3]) >> 47))))
       + 3864292196u;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v1 + 24);
    operator delete(v1);
  }
}

void std::__shared_ptr_emplace<AMCP::Portal::IPC::IO_Sender>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E696BB78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::Portal::IPC::IO_Sender>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E696BB78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_emplace<AMCP::Portal::IPC::IO_Sender>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void HALS_UCRemotePlugIn::unregister_shared_buffer(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  os_unfair_lock_s *v6;
  _QWORD *v7;
  uint64_t *v8;
  id *v9;
  int8x8_t v10;
  unint64_t v11;
  uint8x8_t v12;
  id *v13;
  id *v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  std::runtime_error *exception;
  unint64_t v20;
  unint64_t v21;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v20 = __PAIR64__(a3, a2);
  v21 = __PAIR64__(a5, a4);
  v6 = (os_unfair_lock_s *)(a1 + 752);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 752));
  v7 = (_QWORD *)(a1 + 840);
  v8 = std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>,std::__unordered_map_hasher<AMCP::Portal::IPC::shared_buffer_info_t,std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>,std::hash<AMCP::Portal::IPC::shared_buffer_info_t>,std::equal_to<AMCP::Portal::IPC::shared_buffer_info_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::shared_buffer_info_t,std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>,std::equal_to<AMCP::Portal::IPC::shared_buffer_info_t>,std::hash<AMCP::Portal::IPC::shared_buffer_info_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>>>::find<AMCP::Portal::IPC::shared_buffer_info_t>((_QWORD *)(a1 + 840), (unsigned int *)&v20);
  if (!v8)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v23 = "HALS_UCRemotePlugIn.mm";
      v24 = 1024;
      v25 = 558;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Invalid shared buffer", buf, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid shared buffer");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v9 = (id *)v8;
  objc_msgSend(*(id *)(a1 + 712), "unregister_buffer:", v8[4], v20, v21);
  v10 = *(int8x8_t *)(a1 + 848);
  v11 = (unint64_t)v9[1];
  v12 = (uint8x8_t)vcnt_s8(v10);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    if (v11 >= *(_QWORD *)&v10)
      v11 %= *(_QWORD *)&v10;
  }
  else
  {
    v11 &= *(_QWORD *)&v10 - 1;
  }
  v13 = *(id **)(*v7 + 8 * v11);
  do
  {
    v14 = v13;
    v13 = (id *)*v13;
  }
  while (v13 != v9);
  if (v14 == (id *)(a1 + 856))
    goto LABEL_19;
  v15 = (unint64_t)v14[1];
  if (v12.u32[0] > 1uLL)
  {
    if (v15 >= *(_QWORD *)&v10)
      v15 %= *(_QWORD *)&v10;
  }
  else
  {
    v15 &= *(_QWORD *)&v10 - 1;
  }
  if (v15 != v11)
  {
LABEL_19:
    if (!*v9)
      goto LABEL_20;
    v16 = *((_QWORD *)*v9 + 1);
    if (v12.u32[0] > 1uLL)
    {
      if (v16 >= *(_QWORD *)&v10)
        v16 %= *(_QWORD *)&v10;
    }
    else
    {
      v16 &= *(_QWORD *)&v10 - 1;
    }
    if (v16 != v11)
LABEL_20:
      *(_QWORD *)(*v7 + 8 * v11) = 0;
  }
  v17 = *v9;
  if (*v9)
  {
    v18 = v17[1];
    if (v12.u32[0] > 1uLL)
    {
      if (v18 >= *(_QWORD *)&v10)
        v18 %= *(_QWORD *)&v10;
    }
    else
    {
      v18 &= *(_QWORD *)&v10 - 1;
    }
    if (v18 != v11)
    {
      *(_QWORD *)(*v7 + 8 * v18) = v14;
      v17 = *v9;
    }
  }
  *v14 = v17;
  *v9 = 0;
  --*(_QWORD *)(a1 + 864);
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>,void *>>>::operator()[abi:ne180100](1, v9);
  os_unfair_lock_unlock(v6);
}

void sub_1B57D5468(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>,void *>>>::operator()[abi:ne180100](char a1, id *a2)
{
  if (a1)
  {
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a2 + 5));

  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

AMCP::Log::Scope_Registry *HALS_UCRemotePlugIn::register_shared_buffer(uint64_t a1, int64_t a2, int64_t a3, int64_t a4, unsigned int a5, void *region, size_t length)
{
  xpc_object_t v12;
  void *v13;
  xpc_object_t v14;
  xpc_object_t v15;
  applesauce::xpc::object *v16;
  applesauce::xpc::object *v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  id v23;
  xpc_object_t v24;
  void *v25;
  id v26;
  id v27;
  void *v28;
  applesauce::xpc::object *v29;
  void *v30;
  id v31;
  __int128 v32;
  uint64_t *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  AMCP::Log::Scope_Registry *v43;
  AMCP::Log::Scope_Registry *v44;
  NSObject *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  void *v49;
  id v50;
  id v52;
  __int128 v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  _opaque_pthread_t *v63;
  mach_port_t v64;
  os_unfair_lock_s *lock;
  __int128 v67;
  applesauce::xpc::object *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  void *v71;
  id v72;
  caulk::mach::details *v73;
  __int128 v74;
  id v75;
  id v76;
  id v77;
  void *v78;
  id v79;
  void *v80;
  id v81;
  void *v82;
  id v83;
  _BYTE buf[24];
  _BYTE v85[28];
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  v12 = xpc_shmem_create(region, length);
  caulk::mach::details::release_os_object(0, v13);
  v14 = xpc_dictionary_create(0, 0, 0);
  v15 = v14;
  if (!v14)
    v15 = xpc_null_create();

  v16 = v15;
  v17 = v16;
  v68 = v16;
  if (!v16 || MEMORY[0x1B5E5145C](v16) != MEMORY[0x1E0C812F8])
  {
    v68 = (applesauce::xpc::object *)xpc_null_create();

  }
  applesauce::xpc::object::object((applesauce::xpc::object *)&v83, a2);
  *(_QWORD *)buf = &v68;
  *(_QWORD *)&buf[8] = "buffer device id";
  applesauce::xpc::dict::object_proxy::operator=(&v67, (uint64_t)buf, &v83);
  v18 = (void *)v67;
  *(_QWORD *)&v67 = 0;

  v19 = v83;
  v83 = 0;

  applesauce::xpc::object::object((applesauce::xpc::object *)&v81, a3);
  *(_QWORD *)buf = &v68;
  *(_QWORD *)&buf[8] = "buffer client id";
  applesauce::xpc::dict::object_proxy::operator=(&v82, (uint64_t)buf, &v81);
  v20 = v82;
  v82 = 0;

  v21 = v81;
  v81 = 0;

  applesauce::xpc::object::object((applesauce::xpc::object *)&v79, a4);
  *(_QWORD *)buf = &v68;
  *(_QWORD *)&buf[8] = "buffer stream id";
  applesauce::xpc::dict::object_proxy::operator=(&v80, (uint64_t)buf, &v79);
  v22 = v80;
  v80 = 0;

  v23 = v79;
  v79 = 0;

  v24 = xpc_int64_create(a5);
  v77 = v24;
  if (!v24)
    v77 = xpc_null_create();

  *(_QWORD *)buf = &v68;
  *(_QWORD *)&buf[8] = "buffer type";
  applesauce::xpc::dict::object_proxy::operator=(&v78, (uint64_t)buf, &v77);
  v25 = v78;
  v78 = 0;

  v26 = v77;
  v77 = 0;

  v27 = v12;
  v75 = v27;
  if (!v27)
    v75 = xpc_null_create();

  *(_QWORD *)buf = &v68;
  *(_QWORD *)&buf[8] = "buffer shared memory";
  applesauce::xpc::dict::object_proxy::operator=(&v76, (uint64_t)buf, &v75);

  applesauce::xpc::object::object((applesauce::xpc::object *)&v72, v68);
  v73 = (caulk::mach::details *)caulk::mach::details::retain_os_object((caulk::mach::details *)v27, v28);
  *(_QWORD *)&v74 = __PAIR64__(a3, a2);
  *((_QWORD *)&v74 + 1) = __PAIR64__(a5, a4);
  v29 = v68;
  v68 = 0;

  caulk::mach::details::release_os_object((caulk::mach::details *)v27, v30);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 752));
  v31 = v72;
  std::allocate_shared[abi:ne180100]<caulk::ipc::mapped_memory,std::allocator<caulk::ipc::mapped_memory>,caulk::mach::xpc_object const&,void>((uint64_t *)&v67, (uint64_t)&v73);
  v32 = v67;
  v33 = (uint64_t *)(a1 + 840);
  v67 = 0uLL;
  *(_OWORD *)buf = v74;
  *(_OWORD *)v85 = v32;
  v70 = 0;
  v71 = region;
  v68 = 0;
  v69 = 0;
  *(_QWORD *)&buf[16] = v31;
  *(_QWORD *)&v85[16] = region;
  std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>,std::__unordered_map_hasher<AMCP::Portal::IPC::shared_buffer_info_t,std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>,std::hash<AMCP::Portal::IPC::shared_buffer_info_t>,std::equal_to<AMCP::Portal::IPC::shared_buffer_info_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::shared_buffer_info_t,std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>,std::equal_to<AMCP::Portal::IPC::shared_buffer_info_t>,std::hash<AMCP::Portal::IPC::shared_buffer_info_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>>>::__emplace_unique_key_args<AMCP::Portal::IPC::shared_buffer_info_t,std::pair<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>>((uint64_t *)(a1 + 840), (unsigned int *)buf, (__int128 *)buf);
  v34 = *(std::__shared_weak_count **)&v85[8];
  if (*(_QWORD *)&v85[8])
  {
    v35 = (unint64_t *)(*(_QWORD *)&v85[8] + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }

  v37 = v70;
  if (v70)
  {
    p_shared_owners = (unint64_t *)&v70->__shared_owners_;
    do
      v39 = __ldaxr(p_shared_owners);
    while (__stlxr(v39 - 1, p_shared_owners));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }

  v40 = (std::__shared_weak_count *)*((_QWORD *)&v67 + 1);
  if (*((_QWORD *)&v67 + 1))
  {
    v41 = (unint64_t *)(*((_QWORD *)&v67 + 1) + 8);
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v43 = (AMCP::Log::Scope_Registry *)objc_msgSend(*(id *)(a1 + 712), "register_buffer:", v72, a1 + 752);
  v44 = v43;
  if ((_DWORD)v43)
  {
    AMCP::Log::Scope_Registry::get(v43);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v45 = **(NSObject ***)buf;
    AMCP::Log::Scope::get_os_log_t(**(id **)buf);
    objc_claimAutoreleasedReturnValue();
    v46 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v47 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
    {
      v63 = pthread_self();
      v64 = pthread_mach_thread_np(v63);
      *(_DWORD *)buf = 67110658;
      *(_DWORD *)&buf[4] = v64;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "HALS_UCRemotePlugIn.mm";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 547;
      *(_WORD *)v85 = 1024;
      *(_DWORD *)&v85[2] = a2;
      *(_WORD *)&v85[6] = 1024;
      *(_DWORD *)&v85[8] = a4;
      *(_WORD *)&v85[12] = 1024;
      *(_DWORD *)&v85[14] = a3;
      *(_WORD *)&v85[18] = 2048;
      *(_QWORD *)&v85[20] = region;
      _os_log_error_impl(&dword_1B57BA000, v45, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Failed to register IO buffer, device ID:%u, stream ID:%u, client ID %u, ioBuffer %p", buf, 0x34u);
    }

  }
  else
  {
    v52 = v72;
    std::allocate_shared[abi:ne180100]<caulk::ipc::mapped_memory,std::allocator<caulk::ipc::mapped_memory>,caulk::mach::xpc_object const&,void>((uint64_t *)&v67, (uint64_t)&v73);
    v53 = v67;
    v67 = 0uLL;
    *(_OWORD *)buf = v74;
    *(_OWORD *)v85 = v53;
    v70 = 0;
    v71 = region;
    v68 = 0;
    v69 = 0;
    *(_QWORD *)&buf[16] = v52;
    *(_QWORD *)&v85[16] = region;
    std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>,std::__unordered_map_hasher<AMCP::Portal::IPC::shared_buffer_info_t,std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>,std::hash<AMCP::Portal::IPC::shared_buffer_info_t>,std::equal_to<AMCP::Portal::IPC::shared_buffer_info_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::shared_buffer_info_t,std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>,std::equal_to<AMCP::Portal::IPC::shared_buffer_info_t>,std::hash<AMCP::Portal::IPC::shared_buffer_info_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>>>::__emplace_unique_key_args<AMCP::Portal::IPC::shared_buffer_info_t,std::pair<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>>(v33, (unsigned int *)buf, (__int128 *)buf);
    v54 = *(std::__shared_weak_count **)&v85[8];
    if (*(_QWORD *)&v85[8])
    {
      v55 = (unint64_t *)(*(_QWORD *)&v85[8] + 8);
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }

    v57 = v70;
    if (v70)
    {
      v58 = (unint64_t *)&v70->__shared_owners_;
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }

    v60 = (std::__shared_weak_count *)*((_QWORD *)&v67 + 1);
    if (*((_QWORD *)&v67 + 1))
    {
      v61 = (unint64_t *)(*((_QWORD *)&v67 + 1) + 8);
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
    }
  }
  os_unfair_lock_unlock(lock);
  caulk::mach::details::release_os_object(v73, v49);
  v50 = v72;
  v72 = 0;

  return v44;
}

void sub_1B57D5B84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, os_unfair_lock_t lock, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v22;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v19);

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v18);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  os_unfair_lock_unlock(lock);
  std::tuple<applesauce::xpc::dict,caulk::mach::xpc_object,AMCP::Portal::IPC::shared_buffer_info_t>::~tuple((uint64_t)&a18, v22);
  _Unwind_Resume(a1);
}

applesauce::xpc::object *applesauce::xpc::object::object(applesauce::xpc::object *this, int64_t value)
{
  xpc_object_t v3;
  xpc_object_t v4;
  void *v5;

  v3 = xpc_int64_create(value);
  *(_QWORD *)this = v3;
  if (!v3)
  {
    v4 = xpc_null_create();
    v5 = *(void **)this;
    *(_QWORD *)this = v4;

  }
  return this;
}

void applesauce::xpc::dict::object_proxy::operator=(_QWORD *a1, uint64_t a2, id *a3)
{
  void *v6;
  const char *v7;
  id v8;
  xpc_object_t v9;
  id v10;

  v6 = **(void ***)a2;
  AMCP::Log::Scope::get_os_log_t(v6);
  objc_claimAutoreleasedReturnValue();
  v7 = *(const char **)(a2 + 8);
  v8 = *a3;
  xpc_dictionary_set_value(v6, v7, v8);

  *a1 = *a3;
  v9 = xpc_null_create();
  v10 = *a3;
  *a3 = v9;

}

applesauce::xpc::object *applesauce::xpc::object::object(applesauce::xpc::object *this, const applesauce::xpc::object *a2)
{
  const applesauce::xpc::object *v3;
  xpc_object_t v4;
  void *v5;

  v3 = a2;
  *(_QWORD *)this = v3;
  if (!v3)
  {
    v4 = xpc_null_create();
    v5 = *(void **)this;
    *(_QWORD *)this = v4;

  }
  return this;
}

uint64_t std::allocate_shared[abi:ne180100]<caulk::ipc::mapped_memory,std::allocator<caulk::ipc::mapped_memory>,caulk::mach::xpc_object const&,void>(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t result;

  v4 = operator new(0x30uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E69939B8;
  result = MEMORY[0x1B5E4FD88](v4 + 3, a2);
  *a1 = result;
  a1[1] = (uint64_t)v4;
  return result;
}

void sub_1B57D5DE8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>,std::__unordered_map_hasher<AMCP::Portal::IPC::shared_buffer_info_t,std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>,std::hash<AMCP::Portal::IPC::shared_buffer_info_t>,std::equal_to<AMCP::Portal::IPC::shared_buffer_info_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::shared_buffer_info_t,std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>,std::equal_to<AMCP::Portal::IPC::shared_buffer_info_t>,std::hash<AMCP::Portal::IPC::shared_buffer_info_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>>>::__emplace_unique_key_args<AMCP::Portal::IPC::shared_buffer_info_t,std::pair<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>>(uint64_t *a1, unsigned int *a2, __int128 *a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  uint64_t **v11;
  uint64_t *i;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  int8x8_t prime;
  void *v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint8x8_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  void *v40;

  v7 = std::hash<AMCP::Portal::IPC::shared_buffer_info_t>::operator()(a2);
  v8 = v7;
  v9 = a1[1];
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v11 = *(uint64_t ***)(*a1 + 8 * v3);
    if (v11)
    {
      for (i = *v11; i; i = (uint64_t *)*i)
      {
        v13 = i[1];
        if (v13 == v7)
        {
          if (*((_DWORD *)i + 4) == *a2
            && *((_DWORD *)i + 5) == a2[1]
            && *((_DWORD *)i + 6) == a2[2]
            && *((_DWORD *)i + 7) == a2[3])
          {
            return;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  v14 = a1 + 2;
  v15 = operator new(0x40uLL);
  v16 = *a3;
  v17 = a3[1];
  *((_QWORD *)a3 + 2) = 0;
  *((_QWORD *)a3 + 3) = 0;
  v18 = *((_QWORD *)a3 + 4);
  v19 = *((_QWORD *)a3 + 5);
  *((_QWORD *)a3 + 4) = 0;
  *v15 = 0;
  v15[1] = v8;
  *((_OWORD *)v15 + 1) = v16;
  *((_OWORD *)v15 + 2) = v17;
  v15[6] = v18;
  v15[7] = v19;
  v20 = (float)(unint64_t)(a1[3] + 1);
  v21 = *((float *)a1 + 8);
  if (!v9 || (float)(v21 * (float)v9) < v20)
  {
    v22 = 1;
    if (v9 >= 3)
      v22 = (v9 & (v9 - 1)) != 0;
    v23 = v22 | (2 * v9);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      prime = (int8x8_t)v24;
    else
      prime = (int8x8_t)v23;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v9 = a1[1];
    if (*(_QWORD *)&prime > v9)
      goto LABEL_33;
    if (*(_QWORD *)&prime < v9)
    {
      v32 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v9 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        v32 = std::__next_prime(v32);
      }
      else
      {
        v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2)
          v32 = v34;
      }
      if (*(_QWORD *)&prime <= v32)
        prime = (int8x8_t)v32;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v26 = operator new(8 * *(_QWORD *)&prime);
          v27 = (void *)*a1;
          *a1 = (uint64_t)v26;
          if (v27)
            operator delete(v27);
          v28 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(_QWORD *)(*a1 + 8 * v28++) = 0;
          while (*(_QWORD *)&prime != v28);
          v29 = (_QWORD *)*v14;
          if (*v14)
          {
            v30 = v29[1];
            v31 = (uint8x8_t)vcnt_s8(prime);
            v31.i16[0] = vaddlv_u8(v31);
            if (v31.u32[0] > 1uLL)
            {
              if (v30 >= *(_QWORD *)&prime)
                v30 %= *(_QWORD *)&prime;
            }
            else
            {
              v30 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*a1 + 8 * v30) = v14;
            v35 = (_QWORD *)*v29;
            if (*v29)
            {
              do
              {
                v36 = v35[1];
                if (v31.u32[0] > 1uLL)
                {
                  if (v36 >= *(_QWORD *)&prime)
                    v36 %= *(_QWORD *)&prime;
                }
                else
                {
                  v36 &= *(_QWORD *)&prime - 1;
                }
                if (v36 != v30)
                {
                  if (!*(_QWORD *)(*a1 + 8 * v36))
                  {
                    *(_QWORD *)(*a1 + 8 * v36) = v29;
                    goto LABEL_58;
                  }
                  *v29 = *v35;
                  *v35 = **(_QWORD **)(*a1 + 8 * v36);
                  **(_QWORD **)(*a1 + 8 * v36) = v35;
                  v35 = v29;
                }
                v36 = v30;
LABEL_58:
                v29 = v35;
                v35 = (_QWORD *)*v35;
                v30 = v36;
              }
              while (v35);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_62;
        }
        v40 = (void *)*a1;
        *a1 = 0;
        if (v40)
          operator delete(v40);
        v9 = 0;
        a1[1] = 0;
      }
    }
LABEL_62:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v37 = *a1;
  v38 = *(_QWORD **)(*a1 + 8 * v3);
  if (v38)
  {
    *v15 = *v38;
LABEL_75:
    *v38 = v15;
    goto LABEL_76;
  }
  *v15 = *v14;
  *v14 = v15;
  *(_QWORD *)(v37 + 8 * v3) = v14;
  if (*v15)
  {
    v39 = *(_QWORD *)(*v15 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v39 >= v9)
        v39 %= v9;
    }
    else
    {
      v39 &= v9 - 1;
    }
    v38 = (_QWORD *)(*a1 + 8 * v39);
    goto LABEL_75;
  }
LABEL_76:
  ++a1[3];
}

void sub_1B57D621C(_Unwind_Exception *a1)
{
  id *v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

uint64_t std::tuple<applesauce::xpc::dict,caulk::mach::xpc_object,AMCP::Portal::IPC::shared_buffer_info_t>::~tuple(uint64_t a1, void *a2)
{
  id v3;

  caulk::mach::details::release_os_object(*(caulk::mach::details **)(a1 + 8), a2);
  v3 = *(id *)a1;
  *(_QWORD *)a1 = 0;

  return a1;
}

void std::__shared_ptr_emplace<caulk::ipc::mapped_memory>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69939B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<caulk::ipc::mapped_memory>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69939B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_emplace<caulk::ipc::mapped_memory>::__on_zero_shared(uint64_t a1)
{
  return caulk::ipc::mapped_memory::reset((caulk::ipc::mapped_memory *)(a1 + 24));
}

applesauce::CF::StringRef *applesauce::CF::StringRef::StringRef(applesauce::CF::StringRef *this, CFTypeRef cf)
{
  CFTypeID v3;
  std::runtime_error *exception;

  *(_QWORD *)this = cf;
  if (cf)
  {
    v3 = CFGetTypeID(cf);
    if (v3 != CFStringGetTypeID())
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  return this;
}

void sub_1B57D6338(_Unwind_Exception *a1)
{
  CFTypeRef *v1;
  void *v2;

  __cxa_free_exception(v2);
  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(a1);
}

void make_stream_list(const HALS_IODevice *a1, HALS_IODevice *this, char a3)
{
  char v3;
  const HALS_IODevice *v4;
  unsigned int NumberStreams;
  int v6;
  unsigned int *v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  _DWORD *v21;
  _DWORD *v22;
  unsigned int v23;
  int v24;
  _DWORD *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  char v37;
  const HALS_IODevice *v38;
  int v39;
  int v40;
  int v41;
  int v42;
  unsigned int v43;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  int v55;
  int v56;

  v3 = a3;
  v4 = a1;
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  NumberStreams = HALS_IODevice::GetNumberStreams(this, a3);
  std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>::reserve((void **)v4, NumberStreams);
  if (NumberStreams)
  {
    v6 = 0;
    v43 = NumberStreams;
    v38 = v4;
    v37 = v3;
    do
    {
      v7 = (unsigned int *)HALS_IODevice::CopyStreamByIndex(this, v3, v6);
      v8 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v7 + 200))(v7);
      v9 = v7[21];
      v10 = v7[4];
      v54 = 0x676C6F6270667420;
      v55 = 0;
      v56 = 0;
      (*(void (**)(unsigned int *, uint64_t, uint64_t *, uint64_t, int *, uint64_t *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v7 + 112))(v7, v10, &v54, 40, &v56, &v45, 0, 0, 0);
      v11 = v46;
      v12 = v47;
      v13 = v48;
      v14 = v49;
      v16 = v50;
      v15 = v51;
      v17 = v52;
      if (v46 == 1819304813 && (v47 & 0x40) == 0)
      {
        v16 = 4 * v51;
        v17 = 32;
        v12 = 9;
        v14 = 1;
        v13 = 4 * v51;
      }
      v18 = v45;
      v19 = v53;
      v21 = (_DWORD *)*((_QWORD *)v4 + 1);
      v20 = *((_QWORD *)v4 + 2);
      if ((unint64_t)v21 >= v20)
      {
        v39 = v53;
        v40 = v51;
        v41 = v17;
        v42 = v6;
        v24 = v46;
        v25 = *(_DWORD **)v4;
        v26 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v21 - *(_QWORD *)v4) >> 3);
        v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) > 0x492492492492492)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v28 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v20 - (_QWORD)v25) >> 3);
        if (2 * v28 > v27)
          v27 = 2 * v28;
        if (v28 >= 0x249249249249249)
          v29 = 0x492492492492492;
        else
          v29 = v27;
        v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>>(v29);
        v32 = &v30[56 * v26];
        *(_DWORD *)v32 = v8;
        *((_DWORD *)v32 + 1) = v9;
        *((_DWORD *)v32 + 2) = 0;
        *((_QWORD *)v32 + 2) = v18;
        *((_DWORD *)v32 + 6) = v24;
        *((_DWORD *)v32 + 7) = v12;
        *((_DWORD *)v32 + 8) = v13;
        *((_DWORD *)v32 + 9) = v14;
        *((_DWORD *)v32 + 10) = v16;
        *((_DWORD *)v32 + 11) = v40;
        *((_DWORD *)v32 + 12) = v41;
        *((_DWORD *)v32 + 13) = v39;
        v33 = v32;
        if (v21 == v25)
        {
          v4 = v38;
          v6 = v42;
          v23 = v43;
        }
        else
        {
          v4 = v38;
          v6 = v42;
          v23 = v43;
          do
          {
            v34 = *(_OWORD *)(v21 - 14);
            v35 = *(_OWORD *)(v21 - 10);
            v36 = *(_OWORD *)(v21 - 6);
            *((_QWORD *)v33 - 1) = *((_QWORD *)v21 - 1);
            *(_OWORD *)(v33 - 24) = v36;
            *(_OWORD *)(v33 - 40) = v35;
            *(_OWORD *)(v33 - 56) = v34;
            v33 -= 56;
            v21 -= 14;
          }
          while (v21 != v25);
          v21 = v25;
        }
        v22 = v32 + 56;
        *(_QWORD *)v4 = v33;
        *((_QWORD *)v4 + 1) = v32 + 56;
        *((_QWORD *)v4 + 2) = &v30[56 * v31];
        v3 = v37;
        if (v21)
          operator delete(v21);
      }
      else
      {
        *v21 = v8;
        v21[1] = v9;
        v21[2] = 0;
        *((_QWORD *)v21 + 2) = v18;
        v21[6] = v11;
        v21[7] = v12;
        v21[8] = v13;
        v21[9] = v14;
        v21[10] = v16;
        v21[11] = v15;
        v22 = v21 + 14;
        v21[12] = v17;
        v21[13] = v19;
        v23 = v43;
      }
      *((_QWORD *)v4 + 1) = v22;
      ++v6;
    }
    while (v6 != v23);
  }
}

void sub_1B57D6614(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  void *v13;

  v13 = *(void **)v11;
  if (*(_QWORD *)v11)
  {
    *(_QWORD *)(v11 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<AMCP::ASP::Engine,std::allocator<AMCP::ASP::Engine>,std::shared_ptr<AMCP::ASP::PlugIn>,BOOL,std::shared_ptr<HALS_UCPlugInBase>,unsigned int const&,applesauce::CF::StringRef &,double &,unsigned int &,unsigned int &,unsigned int &,unsigned int &,unsigned int &,unsigned int &,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> &,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> &,AMCP::Utility::Dispatch_Queue &,void>(_QWORD *a1, _OWORD *a2, unsigned __int8 *a3, __int128 *a4, int *a5, CFTypeRef *a6, double *a7, int *a8, int *a9, int *a10, int *a11, int *a12, int *a13, uint64_t a14, uint64_t a15, dispatch_queue_t *a16)
{
  char *v21;
  int v22;
  int v23;
  CFTypeRef v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  __int128 v30;
  CFTypeRef v34;
  __int128 v35;
  uint64_t v36[4];

  v21 = (char *)operator new(0x328uLL);
  *(_OWORD *)(v21 + 8) = 0u;
  *(_QWORD *)v21 = &off_1E6988C28;
  *(_OWORD *)v36 = *a2;
  *a2 = 0u;
  v22 = *a3;
  v30 = *a4;
  v35 = *a4;
  *a4 = 0u;
  v23 = *a5;
  v24 = *a6;
  if (*a6)
    CFRetain(*a6);
  v34 = v24;
  AMCP::ASP::Engine::Engine((uint64_t)(v21 + 24), v36, v22 != 0, (uint64_t *)&v35, v23, &v34, *a8, *a9, *a7, *a10, *a11, *a12, *a13, a14, a15, a16);
  if (v24)
    CFRelease(v24);
  if (*((_QWORD *)&v30 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v30 + 1) + 16))(*((_QWORD *)&v30 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v30 + 1));
    }
  }
  v27 = (std::__shared_weak_count *)v36[1];
  if (v36[1])
  {
    v28 = (unint64_t *)(v36[1] + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  *a1 = v21 + 24;
  a1[1] = v21;
  std::shared_ptr<AMCP::ASP::Engine>::__enable_weak_this[abi:ne180100]<AMCP::Core::Engine,AMCP::ASP::Engine,void>((uint64_t)a1, (_QWORD *)v21 + 4, (uint64_t)(v21 + 24));
}

void sub_1B57D6828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  std::__shared_weak_count *v16;
  uint64_t v17;
  void *v19;
  const void *v20;
  va_list va;
  va_list va1;

  va_start(va1, a16);
  va_start(va, a16);
  v20 = va_arg(va1, const void *);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v17 - 112);
  std::__shared_weak_count::~__shared_weak_count(v16);
  operator delete(v19);
  _Unwind_Resume(a1);
}

void applesauce::CF::StringRef::~StringRef(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

void std::shared_ptr<AMCP::ASP::Engine>::__enable_weak_this[abi:ne180100]<AMCP::Core::Engine,AMCP::ASP::Engine,void>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  if (a2)
  {
    v4 = (std::__shared_weak_count *)a2[1];
    if (!v4 || v4->__shared_owners_ == -1)
    {
      v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
        p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
        do
          v9 = __ldxr(p_shared_weak_owners);
        while (__stxr(v9 + 1, p_shared_weak_owners));
        v4 = (std::__shared_weak_count *)a2[1];
      }
      *a2 = a3;
      a2[1] = v5;
      if (v4)
        std::__shared_weak_count::__release_weak(v4);
      if (v5)
      {
        v10 = (unint64_t *)&v5->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
  }
}

void std::__shared_ptr_emplace<AMCP::ASP::Engine>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6988C28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::ASP::Engine>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6988C28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_emplace<AMCP::ASP::Engine>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  if (0x6DB6DB6DB6DB6DB7 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) < a2)
  {
    if (a2 >= 0x492492492492493)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v3 = ((_BYTE *)a1[1] - (_BYTE *)*a1) / 56;
    v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>>(a2);
    v5 = &v4[56 * v3];
    v7 = &v4[56 * v6];
    v9 = (char *)*a1;
    v8 = (char *)a1[1];
    v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        v11 = *(_OWORD *)(v8 - 56);
        v12 = *(_OWORD *)(v8 - 40);
        v13 = *(_OWORD *)(v8 - 24);
        *((_QWORD *)v10 - 1) = *((_QWORD *)v8 - 1);
        *(_OWORD *)(v10 - 24) = v13;
        *(_OWORD *)(v10 - 40) = v12;
        *(_OWORD *)(v10 - 56) = v11;
        v10 -= 56;
        v8 -= 56;
      }
      while (v8 != v9);
      v8 = (char *)*a1;
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
      operator delete(v8);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>>(unint64_t a1)
{
  if (a1 >= 0x492492492492493)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(56 * a1);
}

void ___ZN19HALS_UCRemotePlugIn8TeardownEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(void **)(v1 + 704);
  if (v2)
  {
    objc_msgSend(v2, "teardown");
    v3 = *(void **)(v1 + 704);
    *(_QWORD *)(v1 + 704) = 0;

    *(_QWORD *)(v1 + 720) = 0;
  }
}

void std::__throw_bad_weak_ptr[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x1E0DE4F80] + 16;
  __cxa_throw(exception, MEMORY[0x1E0DE4E28], MEMORY[0x1E0DE43F0]);
}

uint64_t std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>,std::__unordered_map_hasher<AMCP::Portal::IPC::shared_buffer_info_t,std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>,std::hash<AMCP::Portal::IPC::shared_buffer_info_t>,std::equal_to<AMCP::Portal::IPC::shared_buffer_info_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::shared_buffer_info_t,std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>,std::equal_to<AMCP::Portal::IPC::shared_buffer_info_t>,std::hash<AMCP::Portal::IPC::shared_buffer_info_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>>>::~__hash_table(uint64_t a1)
{
  id *v2;
  id *v3;
  void *v4;

  v2 = *(id **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (id *)*v2;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(v2 + 5));

      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::__unordered_map_hasher<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(v2 + 3));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v4 - 16);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

applesauce::CF::URLRef *applesauce::CF::URLRef::URLRef(applesauce::CF::URLRef *this, CFTypeRef cf)
{
  CFTypeID v3;
  std::runtime_error *exception;

  *(_QWORD *)this = cf;
  if (cf)
  {
    v3 = CFGetTypeID(cf);
    if (v3 != CFURLGetTypeID())
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  return this;
}

void sub_1B57D6E50(_Unwind_Exception *a1)
{
  CFTypeRef *v1;
  void *v2;

  __cxa_free_exception(v2);
  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Utility::Dispatch_Queue::Dispatch_Queue(uint64_t a1, char *a2)
{
  void *v4[41];

  v4[40] = *(void **)MEMORY[0x1E0C80C00];
  AMCP::Utility::Dispatch_Queue::create_serial_with_workloop((AMCP::Utility::Dispatch_Queue *)v4, a2);
  AMCP::Utility::Dispatch_Queue::Dispatch_Queue(a1, v4[0]);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v4);
  return a1;
}

void applesauce::CF::URLRef::~URLRef(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

uint64_t AMCP::Utility::Dispatch_Queue::Dispatch_Queue(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 850045863;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_QWORD *)(a1 + 152) = 850045863;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_QWORD *)(a1 + 240) = 850045863;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_QWORD *)(a1 + 312) = dispatch_semaphore_create(0);
  return a1;
}

uint64_t std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  return a1;
}

{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

void std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("vector");
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E696A668, (void (*)(void *))MEMORY[0x1E0DE42E0]);
}

void sub_1B57D7060(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
  return result;
}

void LogError(const char *a1, ...)
{
  va_list va;

  va_start(va, a1);
  vsyslog(3, "Couldn't find physical format in PDP format list.", va);
}

uint64_t ADS::BaseObject::Activate(uint64_t this)
{
  *(_BYTE *)(this + 48) = 1;
  return this;
}

uint64_t ADS::BaseObject::Deactivate(uint64_t this)
{
  *(_BYTE *)(this + 48) = 0;
  return this;
}

void ADS::Simulator::~Simulator(ADS::Simulator *this)
{
  ADS::Simulator::~Simulator(this);
  JUMPOUT(0x1B5E50688);
}

{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = off_1E696BBC8;
  v2 = (void *)*((_QWORD *)this + 24);
  if (v2)
  {
    *((_QWORD *)this + 25) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 21);
  if (v3)
  {
    *((_QWORD *)this + 22) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 18);
  if (v4)
  {
    *((_QWORD *)this + 19) = v4;
    operator delete(v4);
  }
  *((_QWORD *)this + 7) = &off_1E69985F8;
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 80));
  ADS::BaseObject::~BaseObject(this);
}

BOOL ADS::Simulator::HasProperty(ADS::Simulator *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4)
{
  signed int mSelector;
  _BOOL8 v5;
  BOOL v6;
  int v7;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  mSelector = a4->mSelector;
  v5 = 1;
  if ((int)a4->mSelector > 1819173228)
  {
    if (mSelector <= 1969841250)
    {
      v6 = mSelector == 1819173229 || mSelector == 1870098020;
      v7 = 1920168547;
LABEL_12:
      if (!v6 && mSelector != v7)
        return ADS::BaseObject::HasProperty(this, a2, a3, a4);
      return v5;
    }
    if ((mSelector - 1969841251) < 2)
      return v5;
  }
  else
  {
    if (mSelector <= 1684370978)
    {
      v6 = mSelector == 1651472419 || mSelector == 1668049699;
      v7 = 1668641652;
      goto LABEL_12;
    }
    switch(mSelector)
    {
      case 1684370979:
        return v5;
      case 1684371021:
        v16 = 0;
        v17 = 0;
        HALS_System::GetInstance(&v18, 0, &v16);
        v10 = v19;
        v5 = *(_BYTE *)(v18 + 1280) != 0;
        if (v19)
        {
          p_shared_owners = (unint64_t *)&v19->__shared_owners_;
          do
            v12 = __ldaxr(p_shared_owners);
          while (__stlxr(v12 - 1, p_shared_owners));
          if (!v12)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
        v13 = v17;
        if (v17)
        {
          v14 = (unint64_t *)&v17->__shared_owners_;
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 - 1, v14));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        return v5;
      case 1819107691:
        return v5;
    }
  }
  return ADS::BaseObject::HasProperty(this, a2, a3, a4);
}

void sub_1B57D72A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ADS::Simulator::IsPropertySettable(ADS::Simulator *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4)
{
  uint64_t result;
  signed int mSelector;
  BOOL v7;
  int v8;

  result = 0;
  mSelector = a4->mSelector;
  if ((int)a4->mSelector > 1819173228)
  {
    if (mSelector > 1969841250)
    {
      if ((mSelector - 1969841251) < 2)
        return result;
      return ADS::BaseObject::IsPropertySettable(this, a2, a3, a4);
    }
    if (mSelector != 1819173229)
    {
      v7 = mSelector == 1870098020;
      v8 = 1920168547;
      goto LABEL_10;
    }
    return 1;
  }
  if (mSelector > 1684370978)
  {
    if (mSelector == 1684370979)
      return result;
    if (mSelector != 1684371021)
    {
      if (mSelector == 1819107691)
        return result;
      return ADS::BaseObject::IsPropertySettable(this, a2, a3, a4);
    }
    return 1;
  }
  v7 = mSelector == 1651472419 || mSelector == 1668049699;
  v8 = 1668641652;
LABEL_10:
  if (!v7 && mSelector != v8)
    return ADS::BaseObject::IsPropertySettable(this, a2, a3, a4);
  return result;
}

uint64_t ADS::Simulator::GetPropertyDataSize(ADS::Simulator *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4, unsigned int a5, int *a6)
{
  int *v6;
  signed int mSelector;
  uint64_t v10;
  _DWORD *v11;
  int v12;
  char *v13;
  int v14;
  char *v16;
  int v17;
  _DWORD *v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  char *v24;
  char *v25;
  _DWORD *exception;
  int v27;
  const char *v28;
  __int16 v29;
  int v30;
  uint64_t v31;

  v6 = a6;
  v31 = *MEMORY[0x1E0C80C00];
  mSelector = a4->mSelector;
  v10 = 8;
  if ((int)a4->mSelector > 1819173228)
  {
    if (mSelector > 1920168546)
    {
      if (mSelector <= 1969841250)
      {
        if (mSelector == 1920168547)
          return v10;
        v12 = 1936618861;
        goto LABEL_26;
      }
      if (mSelector != 1969841251 && mSelector != 1969841252)
        return ADS::BaseObject::GetPropertyDataSize(this, a2, a3, a4, a5, a6);
      return 4;
    }
    if (mSelector == 1819173229)
      return v10;
    if (mSelector == 1819569763)
      return 4;
    if (mSelector != 1870098020)
      return ADS::BaseObject::GetPropertyDataSize(this, a2, a3, a4, a5, a6);
    v13 = (char *)this + 56;
    v14 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 7) + 16))((char *)this + 56);
    if (*((_BYTE *)this + 216))
      goto LABEL_23;
    if (!a5 || !v6)
    {
      v10 = 4
          * (((*((_DWORD *)this + 44) - *((_DWORD *)this + 42)) >> 2)
           + ((*((_DWORD *)this + 38) - *((_DWORD *)this + 36)) >> 2)
           + ((*((_DWORD *)this + 50) - *((_DWORD *)this + 48)) >> 2));
LABEL_55:
      if (v14)
        (*(void (**)(char *))(*(_QWORD *)v13 + 24))((char *)this + 56);
      return v10;
    }
    if (a5 < 4)
    {
LABEL_23:
      v10 = 0;
      goto LABEL_55;
    }
    v10 = 0;
    v21 = a5 >> 2;
    while (1)
    {
      v23 = *v6++;
      v22 = v23;
      if (v23 == 1633841016)
      {
        v24 = (char *)this + 200;
        v25 = (char *)this + 192;
      }
      else
      {
        v24 = (char *)this + 152;
        v25 = (char *)this + 144;
        if (v22 != 1633969526)
        {
          v24 = (char *)this + 176;
          v25 = (char *)this + 168;
          if (v22 != 1633905771)
            goto LABEL_52;
        }
      }
      v10 = v10 + ((*(_QWORD *)v24 - *(_QWORD *)v25) >> 2);
LABEL_52:
      if (!--v21)
        goto LABEL_55;
    }
  }
  if (mSelector <= 1684370978)
  {
    switch(mSelector)
    {
      case 1651472419:
        v18 = (_DWORD *)((char *)this + 56);
        v19 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 7) + 16))((char *)this + 56);
        v10 = (v18[36] - v18[34]) & 0xFFFFFFFC;
        if (!v19)
          return v10;
        break;
      case 1668049699:
        v18 = (_DWORD *)((char *)this + 56);
        v20 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 7) + 16))((char *)this + 56);
        v10 = (v18[30] - v18[28]) & 0xFFFFFFFC;
        if (!v20)
          return v10;
        break;
      case 1668641652:
        return 12 * ((*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 4) + 12;
      default:
        return ADS::BaseObject::GetPropertyDataSize(this, a2, a3, a4, a5, a6);
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 24))(v18);
    return v10;
  }
  if (mSelector > 1719105133)
  {
    if (mSelector == 1719105134)
      return v10;
    v12 = 1819107691;
LABEL_26:
    if (mSelector != v12)
      return ADS::BaseObject::GetPropertyDataSize(this, a2, a3, a4, a5, a6);
    return v10;
  }
  if (mSelector == 1684370979)
  {
    v16 = (char *)this + 56;
    v17 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 7) + 16))((char *)this + 56);
    if (*((_BYTE *)this + 216))
    {
      v10 = 0;
      if (v17)
        goto LABEL_41;
    }
    else
    {
      v10 = (*((_DWORD *)this + 38) - *((_DWORD *)this + 36)) & 0xFFFFFFFC;
      if (v17)
LABEL_41:
        (*(void (**)(char *))(*(_QWORD *)v16 + 24))((char *)this + 56);
    }
    return v10;
  }
  if (mSelector == 1684371021)
  {
    if (a5 != 8)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        v27 = 136315394;
        v28 = "ADS_Simulator.cpp";
        v29 = 1024;
        v30 = 315;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Simulator::GetPropertyDataSize: the qualifier is the wrong size for kAudioFakeDevicePropertyManageDevices", (uint8_t *)&v27, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69A1B30;
      exception[2] = 561211770;
    }
    if (!a6)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        v27 = 136315394;
        v28 = "ADS_Simulator.cpp";
        v29 = 1024;
        v30 = 316;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Simulator::GetPropertyDataSize: no qualifier for kAudioFakeDevicePropertyManageDevices", (uint8_t *)&v27, 0x12u);
      }
      v11 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v11 = &off_1E69A1B30;
      v11[2] = 561211770;
    }
    return v10;
  }
  return ADS::BaseObject::GetPropertyDataSize(this, a2, a3, a4, a5, a6);
}

void sub_1B57D78A8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void ADS::Simulator::GetPropertyData(ADS::Simulator *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4, unsigned int a5, uint64_t *a6, unsigned int a7, unsigned int *a8, char *a9)
{
  unsigned int *v9;
  char *v13;
  signed int mSelector;
  const __CFString *v15;
  int v16;
  _QWORD *v17;
  int v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int v26;
  char *v27;
  int v28;
  unsigned int *v29;
  unsigned int *v30;
  CFTypeRef *v31;
  uint64_t v32;
  uint64_t v33;
  ADS::BaseObject *v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  int v38;
  unsigned int *v39;
  unsigned int *v40;
  CFTypeRef *v41;
  uint64_t v42;
  uint64_t v43;
  ADS::BaseObject *v44;
  unsigned int v45;
  _QWORD *v46;
  int v47;
  unint64_t v48;
  int *v49;
  _DWORD *v50;
  _BOOL4 v51;
  unsigned int v52;
  int v53;
  unint64_t v54;
  int *v55;
  unint64_t v56;
  int v57;
  unsigned int v58;
  unint64_t v59;
  int v60;
  unint64_t v61;
  int *v62;
  _DWORD *v63;
  _BOOL4 v64;
  _BOOL4 v65;
  _BOOL4 v66;
  unint64_t v67;
  uint64_t v68;
  int *v69;
  char *v70;
  int v71;
  unint64_t v72;
  int v73;
  _DWORD *v74;
  _DWORD *v75;
  _DWORD *v76;
  _DWORD *v77;
  _DWORD *v78;
  _DWORD *v79;
  _DWORD *v80;
  _DWORD *exception;
  _DWORD *v82;
  _DWORD *v83;
  _DWORD *v84;
  _DWORD *v85;
  _DWORD *v86;
  _DWORD *v87;
  _DWORD *v88;
  _DWORD *v89;
  int v90;
  int v91;
  unsigned int *v92;
  unsigned int *v93;
  _BYTE buf[18];
  uint64_t v95;

  v9 = a8;
  v13 = a9;
  v95 = *MEMORY[0x1E0C80C00];
  mSelector = a4->mSelector;
  if ((int)a4->mSelector > 1819173228)
  {
    if (mSelector <= 1920168546)
    {
      if (mSelector == 1819173229)
      {
        if (a7 <= 7)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "ADS_Simulator.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 361;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Simulator::GetPropertyData: not enough space for the return value of kAudioObjectPropertyName", buf, 0x12u);
          }
          exception = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)exception = &off_1E69A1B30;
          exception[2] = 561211770;
        }
        v15 = CFSTR("PluginSimulator");
        goto LABEL_74;
      }
      if (mSelector != 1819569763)
      {
        if (mSelector != 1870098020)
          goto LABEL_83;
        v17 = (_QWORD *)((char *)this + 56);
        v18 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 7) + 16))((char *)this + 56);
        v19 = (int *)*((_QWORD *)this + 18);
        v20 = *((_QWORD *)this + 19) - (_QWORD)v19;
        v21 = *((_QWORD *)this + 24);
        if (((uint64_t)(*((_QWORD *)this + 22) - *((_QWORD *)this + 21)) >> 2)
           + (v20 >> 2)
           + ((*((_QWORD *)this + 25) - v21) >> 2) >= (unint64_t)(a7 >> 2))
          v22 = a7 >> 2;
        else
          v22 = ((uint64_t)(v17[15] - v17[14]) >> 2) + (v20 >> 2) + ((v17[18] - v21) >> 2);
        if ((_DWORD)v22)
        {
          v23 = v20 >> 2;
          v24 = v22;
          v25 = a9;
          while (v23)
          {
            v26 = *v19++;
            *(_DWORD *)v25 = v26;
            v25 += 4;
            --v23;
            if (!--v24)
              goto LABEL_122;
          }
          v67 = (unint64_t)v20 >> 2;
        }
        else
        {
          v66 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT);
          LODWORD(v67) = 0;
          if (v66)
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "ADS_Simulator.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 378;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Simulator::GetPropertyData: inDataSize too small for any of kAudioObjectPropertyOwnedObjects to be returned", buf, 0x12u);
            LODWORD(v67) = 0;
          }
        }
        v68 = (v22 - v67);
        if (v22 <= v67)
        {
          LODWORD(v22) = v67;
        }
        else
        {
          v69 = (int *)*((_QWORD *)this + 21);
          v70 = &a9[4 * v67];
          do
          {
            v71 = *v69++;
            *(_DWORD *)v70 = v71;
            v70 += 4;
            --v68;
          }
          while (v68);
        }
LABEL_122:
        *v9 = 4 * v22;
        if (v18)
        {
LABEL_51:
          (*(void (**)(char *))(*v17 + 24))((char *)this + 56);
          return;
        }
        return;
      }
      if (a7 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "ADS_Simulator.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 355;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_ClockDevice::GetPropertyData: bad property data size for kAudioDevicePropertyLatency", buf, 0x12u);
        }
        v82 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v82 = &off_1E69A1B30;
        v82[2] = 561211770;
      }
      *(_DWORD *)a9 = 0;
    }
    else
    {
      if (mSelector <= 1969841250)
      {
        if (mSelector == 1920168547)
        {
          if (a7 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "ADS_Simulator.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 529;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  SA_GetPlugInPropertyData: not enough space for the return value of kAudioPlugInPropertyResourceBundle", buf, 0x12u);
            }
            v74 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v74 = &off_1E69A1B30;
            v74[2] = 561211770;
          }
          v15 = &stru_1E69A2360;
          goto LABEL_74;
        }
        if (mSelector == 1936618861)
        {
          if (a7 <= 7)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "ADS_Simulator.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 340;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Simulator::GetPropertyData: not enough space for the return value of kAudioObjectPropertySerialNumber", buf, 0x12u);
            }
            v78 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v78 = &off_1E69A1B30;
            v78[2] = 561211770;
          }
          v15 = CFSTR("001");
          goto LABEL_74;
        }
        goto LABEL_83;
      }
      if (mSelector == 1969841251)
      {
        if (a5 <= 7)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "ADS_Simulator.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 503;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Simulator::GetPropertyData: the qualifier size is too small for kAudioPlugInPropertyTranslateUIDToClockDevice", buf, 0x12u);
          }
          v76 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v76 = &off_1E69A1B30;
          v76[2] = 561211770;
        }
        if (a7 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "ADS_Simulator.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 504;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Simulator::GetPropertyData: not enough space for the return value of kAudioPlugInPropertyTranslateUIDToClockDevice", buf, 0x12u);
          }
          v84 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v84 = &off_1E69A1B30;
          v84[2] = 561211770;
        }
        if (!a6)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "ADS_Simulator.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 505;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Simulator::GetPropertyData: no qualifier specified for kAudioPlugInPropertyTranslateUIDToClockDevice", buf, 0x12u);
          }
          v87 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v87 = &off_1E69A1B30;
          v87[2] = 2003332927;
        }
        v27 = (char *)this + 56;
        v38 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 7) + 16))((char *)this + 56);
        v39 = (unsigned int *)*((_QWORD *)this + 21);
        v40 = (unsigned int *)*((_QWORD *)this + 22);
        if (v39 == v40)
          goto LABEL_84;
        v91 = v38;
        v93 = v9;
        while (1)
        {
          v41 = (CFTypeRef *)ADS::ObjectManager::CopyObjectByObjectID((ADS::ObjectManager *)*v39);
          OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)buf, v41[12]);
          *(_QWORD *)buf = &off_1E69A0F60;
          v42 = *(_QWORD *)&buf[8];
          v43 = *a6;
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
          ADS::ObjectManager::ReleaseObject((ADS::ObjectManager *)v41, v44);
          if (v42 == v43)
            break;
          if (++v39 == v40)
          {
            v39 = v40;
            break;
          }
        }
        v9 = v93;
        v38 = v91;
        if (v39 == *((unsigned int **)this + 22))
LABEL_84:
          v45 = 0;
        else
          v45 = *v39;
        *(_DWORD *)a9 = v45;
        if (!v38)
          goto LABEL_90;
        goto LABEL_89;
      }
      if (mSelector != 1969841252)
        goto LABEL_83;
      if (a5 <= 7)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "ADS_Simulator.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 435;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Simulator::GetPropertyData: the qualifier size is too small for kAudioPlugInPropertyTranslateUIDToDevice", buf, 0x12u);
        }
        v80 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v80 = &off_1E69A1B30;
        v80[2] = 561211770;
      }
      if (a7 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "ADS_Simulator.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 436;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Simulator::GetPropertyData: not enough space for the return value of kAudioPlugInPropertyTranslateUIDToDevice", buf, 0x12u);
        }
        v86 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v86 = &off_1E69A1B30;
        v86[2] = 561211770;
      }
      if (!a6)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "ADS_Simulator.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 437;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Simulator::GetPropertyData: no qualifier specified for kAudioPlugInPropertyTranslateUIDToDevice", buf, 0x12u);
        }
        v89 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v89 = &off_1E69A1B30;
        v89[2] = 2003332927;
      }
      v27 = (char *)this + 56;
      v28 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 7) + 16))((char *)this + 56);
      v29 = (unsigned int *)*((_QWORD *)this + 18);
      v30 = (unsigned int *)*((_QWORD *)this + 19);
      if (v29 == v30)
        goto LABEL_87;
      v90 = v28;
      v92 = v9;
      while (1)
      {
        v31 = (CFTypeRef *)ADS::ObjectManager::CopyObjectByObjectID((ADS::ObjectManager *)*v29);
        OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)buf, v31[12]);
        *(_QWORD *)buf = &off_1E69A0F60;
        v32 = *(_QWORD *)&buf[8];
        v33 = *a6;
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
        ADS::ObjectManager::ReleaseObject((ADS::ObjectManager *)v31, v34);
        if (v32 == v33)
          break;
        if (++v29 == v30)
        {
          v29 = v30;
          break;
        }
      }
      v9 = v92;
      v28 = v90;
      if (v29 == *((unsigned int **)this + 19))
LABEL_87:
        v35 = 0;
      else
        v35 = *v29;
      *(_DWORD *)a9 = v35;
      if (v28)
LABEL_89:
        (*(void (**)(char *))(*(_QWORD *)v27 + 24))((char *)this + 56);
    }
LABEL_90:
    v16 = 4;
    goto LABEL_91;
  }
  if (mSelector > 1684370978)
  {
    if (mSelector > 1719105133)
    {
      if (mSelector == 1719105134)
      {
        if (a7 <= 7)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "ADS_Simulator.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 348;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Simulator::GetPropertyData: not enough space for the return value of kAudioObjectPropertyFirmwareVersion", buf, 0x12u);
          }
          v75 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v75 = &off_1E69A1B30;
          v75[2] = 561211770;
        }
        v15 = CFSTR("1.0");
        goto LABEL_74;
      }
      if (mSelector == 1819107691)
      {
        if (a7 <= 7)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "ADS_Simulator.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 333;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Simulator::GetPropertyData: not enough space for the return value of kAudioObjectPropertyManufacturer", buf, 0x12u);
          }
          v79 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v79 = &off_1E69A1B30;
          v79[2] = 561211770;
        }
        v15 = CFSTR("Apple Inc.");
        goto LABEL_74;
      }
LABEL_83:
      ADS::BaseObject::GetPropertyData(this, a2, a3, a4, a5, a6, a7, a8, a9);
      return;
    }
    if (mSelector != 1684370979)
    {
      if (mSelector == 1684371021)
      {
        if (a7 <= 7)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "ADS_Simulator.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 552;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Simulator::GetPropertyData: not enough space for the return value of kAudioFakeDevicePropertyManageDevices", buf, 0x12u);
          }
          v77 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v77 = &off_1E69A1B30;
          v77[2] = 561211770;
        }
        if (a5 != 8)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "ADS_Simulator.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 553;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Simulator::GetPropertyData: the qualifier is the wrong size for kAudioFakeDevicePropertyManageDevices", buf, 0x12u);
          }
          v85 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v85 = &off_1E69A1B30;
          v85[2] = 561211770;
        }
        if (!a6)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "ADS_Simulator.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 554;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Simulator::GetPropertyData: no qualifier for kAudioFakeDevicePropertyManageDevices", buf, 0x12u);
          }
          v88 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v88 = &off_1E69A1B30;
          v88[2] = 561211770;
        }
        v15 = CFSTR("PlugIn Custom Property");
LABEL_74:
        *(_QWORD *)a9 = v15;
        v16 = 8;
LABEL_91:
        *v9 = v16;
        return;
      }
      goto LABEL_83;
    }
    v17 = (_QWORD *)((char *)this + 56);
    v36 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 7) + 16))((char *)this + 56);
    if (*((_BYTE *)this + 216))
      goto LABEL_49;
    v61 = a7 >> 2;
    v62 = (int *)*((_QWORD *)this + 18);
    v63 = (_DWORD *)*((_QWORD *)this + 19);
    if (v63 - v62 < v61)
      v61 = v63 - v62;
    if (v63 == v62 || (_DWORD)v61)
    {
      if (!(_DWORD)v61)
        goto LABEL_49;
      v72 = v61;
      do
      {
        v73 = *v62++;
        *(_DWORD *)v13 = v73;
        v13 += 4;
        --v72;
      }
      while (v72);
      v37 = 4 * v61;
    }
    else
    {
      v64 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT);
      v37 = 0;
      if (v64)
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "ADS_Simulator.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 416;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Simulator::GetPropertyData: inDataSize too small for any of kAudioPlugInPropertyDeviceList to be returned", buf, 0x12u);
LABEL_49:
        v37 = 0;
      }
    }
    *v9 = v37;
    if (!v36)
      return;
    goto LABEL_51;
  }
  if (mSelector == 1651472419)
  {
    v46 = (_QWORD *)((char *)this + 56);
    v47 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 7) + 16))((char *)this + 56);
    v48 = a7 >> 2;
    v49 = (int *)v46[17];
    v50 = (_DWORD *)v46[18];
    if (v50 - v49 < v48)
      v48 = v50 - v49;
    if (v50 == v49 || (_DWORD)v48)
    {
      if ((_DWORD)v48)
      {
        v59 = v48;
        do
        {
          v60 = *v49++;
          *(_DWORD *)v13 = v60;
          v13 += 4;
          --v59;
        }
        while (v59);
        v52 = 4 * v48;
LABEL_98:
        *v9 = v52;
        if (v47)
          goto LABEL_99;
        return;
      }
    }
    else
    {
      v51 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT);
      v52 = 0;
      if (!v51)
        goto LABEL_98;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "ADS_Simulator.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 465;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Simulator::GetPropertyData: inDataSize too small for any of kAudioPlugInPropertyBoxList to be returned", buf, 0x12u);
    }
    v52 = 0;
    goto LABEL_98;
  }
  if (mSelector != 1668049699)
  {
    if (mSelector == 1668641652)
    {
      if (a7 <= 0xB)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "ADS_Simulator.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 539;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Simulator::GetPropertyData: not enough space for the return value of kAudioObjectPropertyCustomPropertyInfoList", buf, 0x12u);
        }
        v83 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v83 = &off_1E69A1B30;
        v83[2] = 561211770;
      }
      qmemcpy(a9, "Mvedtslptsfc", 12);
      *(_DWORD *)buf = *a8 - 12;
      ADS::BaseObject::GetPropertyData(this, a2, a3, a4, a5, a6, a7, (unsigned int *)buf, a9 + 24);
      v16 = *(_DWORD *)buf + 12;
      goto LABEL_91;
    }
    goto LABEL_83;
  }
  v46 = (_QWORD *)((char *)this + 56);
  v53 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 7) + 16))((char *)this + 56);
  v54 = a7 >> 2;
  v55 = (int *)v46[14];
  if ((uint64_t)(v46[15] - (_QWORD)v55) >> 2 < v54)
    v54 = (uint64_t)(v46[15] - (_QWORD)v55) >> 2;
  if ((_DWORD)v54)
  {
    v56 = v54;
    do
    {
      v57 = *v55++;
      *(_DWORD *)v13 = v57;
      v13 += 4;
      --v56;
    }
    while (v56);
    v58 = 4 * v54;
  }
  else
  {
    v65 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT);
    v58 = 0;
    if (v65)
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "ADS_Simulator.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 488;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Simulator::GetPropertyData: inDataSize too small for any of kAudioPlugInPropertyClockDeviceList to be returned", buf, 0x12u);
      v58 = 0;
    }
  }
  *v9 = v58;
  if (v53)
LABEL_99:
    (*(void (**)(_QWORD *))(*v46 + 24))(v46);
}

void sub_1B57D8B08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, int a12)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void ADS::Simulator::SetPropertyData(uint64_t a1, int a2, uint64_t a3, uint64_t *a4, uint64_t a5, const __CFString **a6, uint64_t a7, const __CFString **a8, _DWORD *a9, unint64_t *a10, unsigned __int8 a11)
{
  int v12;
  uint64_t v14;
  int v15;
  const __CFString *v16;
  CFDictionaryRef v17;
  std::string::size_type size;
  std::string *p_buf;
  int data_low;
  int v21;
  BOOL v22;
  CFDictionaryRef v23;
  CFDictionaryRef v24;
  ADS::Simulator *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  ADS::BaseObject *v29;
  ADS::ObjectManager *v30;
  ADS::ObjectManager *v31;
  ADS::ObjectManager *NextObjectID;
  uint64_t v33;
  int v34;
  ADS::BaseObject *v35;
  ADS::BaseObject *v36;
  int v37;
  unint64_t v38;
  char *v39;
  _DWORD *v40;
  unsigned int *v41;
  int v42;
  ADS::BaseObject *v43;
  unint64_t v44;
  _DWORD *v45;
  int *v46;
  _DWORD *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  BOOL v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  int v60;
  unint64_t v61;
  int *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  int v70;
  ADS::BaseObject *v71;
  _DWORD *v72;
  unint64_t v73;
  int v74;
  unint64_t v75;
  _DWORD *v76;
  _DWORD *v77;
  _DWORD *v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  int v85;
  unint64_t v86;
  _DWORD *v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  int v95;
  _DWORD *exception;
  _DWORD *v97;
  NSObject *v98;
  _DWORD *v99;
  _DWORD *v100;
  _DWORD *v101;
  _DWORD *v102;
  int v103;
  void (**v104)(OS::CF::String *__hidden);
  CFTypeRef cf;
  _QWORD v106[2];
  void (**v107)(OS::CF::UntypedObject *__hidden);
  CFTypeRef v108;
  _BYTE v109[18];
  std::string buf;
  uint64_t v111;

  v12 = a7;
  v111 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)a4 != 1684371021)
  {
    ADS::BaseObject::SetPropertyData(a1, a2, a3, a4, a5, (uint64_t)a6, a7, (uint64_t)a8, a9, a10, a11);
    return;
  }
  if ((_DWORD)a5 != 8)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADS_Simulator.cpp";
      WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = 572;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Simulator::SetPropertyData: the qualifier is the wrong size for kAudioFakeDevicePropertyManageDevices", (uint8_t *)&buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 561211770;
  }
  if (!a6)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADS_Simulator.cpp";
      WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = 573;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Simulator::SetPropertyData: no qualifier for kAudioFakeDevicePropertyManageDevices", (uint8_t *)&buf, 0x12u);
    }
    v97 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v97 = &off_1E69A1B30;
    v97[2] = 561211770;
  }
  v14 = a1 + 56;
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 56) + 16))(a1 + 56);
  v16 = *a6;
  if (CFStringCompare(v16, CFSTR("create"), 1uLL) == kCFCompareEqualTo)
  {
    if (v12 == 8)
    {
      v17 = PropertyListDeepImmutableCopy(*a8);
      v107 = &off_1E69A0DE0;
      v108 = v17;
      if (!v17)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADS_Simulator.cpp";
          WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = 680;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Simulator::AddDeviceWithProperties: no properties dictionary for device creation", (uint8_t *)&buf, 0x12u);
        }
        v99 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v99 = &off_1E69A1B30;
        v99[2] = 1852797029;
      }
      OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)v109, v17, CFSTR("type"));
      OS::CF::String::AsStdString(&buf, (uint64_t)v109);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v109);
      size = HIBYTE(buf.__r_.__value_.__r.__words[2]);
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = buf.__r_.__value_.__l.__size_;
      if (size == 3
        && ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? (p_buf = &buf)
          : (p_buf = (std::string *)buf.__r_.__value_.__r.__words[0]),
            (data_low = LOWORD(p_buf->__r_.__value_.__l.__data_),
             v21 = p_buf->__r_.__value_.__s.__data_[2],
             data_low == 28514)
          ? (v22 = v21 == 120)
          : (v22 = 0),
            v22))
      {
        v30 = (ADS::ObjectManager *)ADS::ObjectManager::CopyObjectByObjectID((ADS::ObjectManager *)1);
        v31 = v30;
        if (!v30)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v109 = 136315394;
            *(_QWORD *)&v109[4] = "ADS_Simulator.cpp";
            *(_WORD *)&v109[12] = 1024;
            *(_DWORD *)&v109[14] = 700;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Simulator::AddBox: no plug-in object", v109, 0x12u);
          }
          v102 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v102 = &off_1E69A1B30;
          v102[2] = 1852797029;
        }
        NextObjectID = (ADS::ObjectManager *)ADS::ObjectManager::GetNextObjectID(v30);
        v33 = operator new();
        v34 = *((_DWORD *)v31 + 2);
        *(_DWORD *)(v33 + 8) = (_DWORD)NextObjectID;
        *(_QWORD *)(v33 + 12) = 0x616F626A61626F78;
        *(_DWORD *)(v33 + 20) = v34;
        *(_QWORD *)(v33 + 32) = 0;
        *(_QWORD *)(v33 + 40) = 0;
        *(_QWORD *)(v33 + 24) = 0;
        *(_BYTE *)(v33 + 48) = 0;
        *(_QWORD *)v33 = off_1E697F970;
        OS::CF::String::String((OS::CF::String *)(v33 + 56), "Unnamed Box");
        OS::CF::String::String((OS::CF::String *)(v33 + 72), "ADS_Box_UID");
        ADS::ObjectManager::MapObject(NextObjectID, v33, v35);
        v37 = (*(uint64_t (**)(uint64_t))(*((_QWORD *)v31 + 7) + 16))((uint64_t)v31 + 56);
        v39 = (char *)*((_QWORD *)v31 + 25);
        v38 = *((_QWORD *)v31 + 26);
        if ((unint64_t)v39 >= v38)
        {
          v52 = (char *)*((_QWORD *)v31 + 24);
          v53 = (v39 - v52) >> 2;
          v54 = v53 + 1;
          if ((unint64_t)(v53 + 1) >> 62)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          v55 = v38 - (_QWORD)v52;
          if (v55 >> 1 > v54)
            v54 = v55 >> 1;
          v56 = (unint64_t)v55 >= 0x7FFFFFFFFFFFFFFCLL;
          v57 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v56)
            v57 = v54;
          if (v57)
          {
            v57 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v57);
            v52 = (char *)*((_QWORD *)v31 + 24);
            v39 = (char *)*((_QWORD *)v31 + 25);
          }
          else
          {
            v36 = 0;
          }
          v72 = (_DWORD *)(v57 + 4 * v53);
          v73 = v57 + 4 * (_QWORD)v36;
          *v72 = (_DWORD)NextObjectID;
          v40 = v72 + 1;
          while (v39 != v52)
          {
            v74 = *((_DWORD *)v39 - 1);
            v39 -= 4;
            *--v72 = v74;
          }
          *((_QWORD *)v31 + 24) = v72;
          *((_QWORD *)v31 + 25) = v40;
          *((_QWORD *)v31 + 26) = v73;
          if (v52)
            operator delete(v52);
        }
        else
        {
          *(_DWORD *)v39 = (_DWORD)NextObjectID;
          v40 = v39 + 4;
        }
        *((_QWORD *)v31 + 25) = v40;
        if (v37)
          (*(void (**)(uint64_t))(*((_QWORD *)v31 + 7) + 24))((uint64_t)v31 + 56);
        *a9 = 2;
        v76 = (_DWORD *)a10[1];
        v75 = a10[2];
        if ((unint64_t)v76 >= v75)
        {
          v78 = (_DWORD *)*a10;
          v79 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v76 - *a10) >> 2);
          v80 = v79 + 1;
          if (v79 + 1 > 0x1555555555555555)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          v81 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v75 - (_QWORD)v78) >> 2);
          if (2 * v81 > v80)
            v80 = 2 * v81;
          if (v81 >= 0xAAAAAAAAAAAAAAALL)
            v82 = 0x1555555555555555;
          else
            v82 = v80;
          if (v82)
          {
            v82 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v82);
            v78 = (_DWORD *)*a10;
            v76 = (_DWORD *)a10[1];
          }
          else
          {
            v36 = 0;
          }
          v83 = v82 + 12 * v79;
          v75 = v82 + 12 * (_QWORD)v36;
          *(_QWORD *)v83 = 0x676C6F626F776E64;
          *(_DWORD *)(v83 + 8) = 0;
          v77 = (_DWORD *)(v83 + 12);
          if (v76 != v78)
          {
            do
            {
              v84 = *(_QWORD *)(v76 - 3);
              v76 -= 3;
              v85 = v76[2];
              *(_QWORD *)(v83 - 12) = v84;
              v83 -= 12;
              *(_DWORD *)(v83 + 8) = v85;
            }
            while (v76 != v78);
            v78 = (_DWORD *)*a10;
          }
          *a10 = v83;
          a10[1] = (unint64_t)v77;
          a10[2] = v75;
          if (v78)
          {
            operator delete(v78);
            v75 = a10[2];
          }
        }
        else
        {
          *(_QWORD *)v76 = 0x676C6F626F776E64;
          v76[2] = 0;
          v77 = v76 + 3;
        }
        a10[1] = (unint64_t)v77;
        if ((unint64_t)v77 >= v75)
        {
          v87 = (_DWORD *)*a10;
          v88 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v77 - *a10) >> 2);
          v89 = v88 + 1;
          if (v88 + 1 > 0x1555555555555555)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          v90 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v75 - (_QWORD)v87) >> 2);
          if (2 * v90 > v89)
            v89 = 2 * v90;
          if (v90 >= 0xAAAAAAAAAAAAAAALL)
            v91 = 0x1555555555555555;
          else
            v91 = v89;
          if (v91)
          {
            v91 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v91);
            v87 = (_DWORD *)*a10;
            v77 = (_DWORD *)a10[1];
          }
          else
          {
            v36 = 0;
          }
          v92 = v91 + 12 * v88;
          v93 = v91 + 12 * (_QWORD)v36;
          *(_QWORD *)v92 = 0x676C6F62626F7823;
          *(_DWORD *)(v92 + 8) = 0;
          v86 = v92 + 12;
          if (v77 != v87)
          {
            do
            {
              v94 = *(_QWORD *)(v77 - 3);
              v77 -= 3;
              v95 = v77[2];
              *(_QWORD *)(v92 - 12) = v94;
              v92 -= 12;
              *(_DWORD *)(v92 + 8) = v95;
            }
            while (v77 != v87);
            v87 = (_DWORD *)*a10;
          }
          *a10 = v92;
          a10[1] = v86;
          a10[2] = v93;
          if (v87)
            operator delete(v87);
        }
        else
        {
          *(_QWORD *)v77 = 0x676C6F62626F7823;
          v77[2] = 0;
          v86 = (unint64_t)(v77 + 3);
        }
        a10[1] = v86;
        ADS::ObjectManager::ReleaseObject(v31, v36);
      }
      else
      {
        ADS::Simulator::AddDeviceWithProperties((uint64_t)&v107, a9, (uint64_t)a10);
      }
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v107);
      goto LABEL_26;
    }
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
LABEL_151:
      v100 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v100 = &off_1E69A1B30;
      v100[2] = 561211770;
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADS_Simulator.cpp";
    WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = 580;
    v98 = MEMORY[0x1E0C81028];
LABEL_150:
    _os_log_impl(&dword_1B57BA000, v98, OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Simulator::SetPropertyData: not enough space for the return value of kAudioFakeDevicePropertyManageDevices", (uint8_t *)&buf, 0x12u);
    goto LABEL_151;
  }
  if (CFStringCompare(v16, CFSTR("destroy"), 1uLL))
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADS_Simulator.cpp";
      WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = 595;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Simulator::SetPropertyData: Unsupported operation", (uint8_t *)&buf, 0x12u);
      if (!v15)
        return;
      goto LABEL_27;
    }
LABEL_26:
    if (!v15)
      return;
    goto LABEL_27;
  }
  if (v12 != 8)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_151;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADS_Simulator.cpp";
    WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = 587;
    v98 = MEMORY[0x1E0C81028];
    goto LABEL_150;
  }
  v23 = PropertyListDeepImmutableCopy(*a8);
  v24 = v23;
  v106[0] = &off_1E69A0F60;
  v106[1] = v23;
  if (v23)
    CFRetain(v23);
  v104 = &off_1E69A0F60;
  cf = v24;
  v25 = (ADS::Simulator *)ADS::ObjectManager::CopyObjectByObjectID((ADS::ObjectManager *)1);
  if (!v25)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADS_Simulator.cpp";
      WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = 787;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  SA_PlugIn::IOServiceInterestHandler: no plug-in object", (uint8_t *)&buf, 0x12u);
    }
    v101 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v101 = &off_1E69A1B30;
    v101[2] = 1852797029;
  }
  v107 = &off_1E69A0E58;
  v26 = (uint64_t)cf;
  if (cf)
    CFRetain(cf);
  v107 = &off_1E69A0F60;
  v108 = cf;
  pthread_once(&ADS::ObjectManager::sStaticInitializer, (void (*)(void))ADS::ObjectManager::StaticInitializer);
  if (cf)
  {
    v27 = ADS::ObjectManager::sMutex;
    if (ADS::ObjectManager::sMutex)
    {
      v103 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)ADS::ObjectManager::sMutex + 16))(ADS::ObjectManager::sMutex);
      v26 = (uint64_t)v108;
    }
    else
    {
      v103 = 0;
    }
    v28 = ADS::ObjectManager::sInstance;
    CFRetain((CFTypeRef)v26);
    *(_QWORD *)v109 = &off_1E69A0F60;
    *(_QWORD *)&v109[8] = v26;
    OS::CF::String::AsStdString(&buf, (uint64_t)v109);
    v26 = (uint64_t)std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned int>>>>::find<std::string>((_QWORD *)(v28 + 40), (unsigned __int8 *)&buf);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    if (v26)
    {
      v41 = *(unsigned int **)(v26 + 40);
      if (*(unsigned int **)(v26 + 48) == v41)
        std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
      v26 = ADS::ObjectManager::CopyObjectByObjectID((ADS::ObjectManager *)*v41);
    }
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v109);
    if (v103)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 24))(v27);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v107);
    if (v26)
    {
      if (*(_DWORD *)(v26 + 12) == 1633905771)
        v42 = 1668049699;
      else
        v42 = 1684370979;
      ADS::Simulator::RemoveDevice(v25, (ADS::Device *)v26);
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
      ADS::ObjectManager::ReleaseObject((ADS::ObjectManager *)v26, v43);
      *a9 = 2;
      v45 = (_DWORD *)a10[1];
      v44 = a10[2];
      if ((unint64_t)v45 >= v44)
      {
        v47 = (_DWORD *)*a10;
        v48 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v45 - *a10) >> 2);
        v49 = v48 + 1;
        if (v48 + 1 > 0x1555555555555555)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v50 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v44 - (_QWORD)v47) >> 2);
        if (2 * v50 > v49)
          v49 = 2 * v50;
        if (v50 >= 0xAAAAAAAAAAAAAAALL)
          v51 = 0x1555555555555555;
        else
          v51 = v49;
        if (v51)
        {
          v51 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v51);
          v47 = (_DWORD *)*a10;
          v45 = (_DWORD *)a10[1];
        }
        else
        {
          v29 = 0;
        }
        v58 = v51 + 12 * v48;
        v44 = v51 + 12 * (_QWORD)v29;
        *(_QWORD *)v58 = 0x676C6F626F776E64;
        *(_DWORD *)(v58 + 8) = 0;
        v46 = (int *)(v58 + 12);
        if (v45 != v47)
        {
          do
          {
            v59 = *(_QWORD *)(v45 - 3);
            v45 -= 3;
            v60 = v45[2];
            *(_QWORD *)(v58 - 12) = v59;
            v58 -= 12;
            *(_DWORD *)(v58 + 8) = v60;
          }
          while (v45 != v47);
          v47 = (_DWORD *)*a10;
        }
        *a10 = v58;
        a10[1] = (unint64_t)v46;
        a10[2] = v44;
        if (v47)
        {
          operator delete(v47);
          v44 = a10[2];
        }
      }
      else
      {
        *(_QWORD *)v45 = 0x676C6F626F776E64;
        v45[2] = 0;
        v46 = v45 + 3;
      }
      a10[1] = (unint64_t)v46;
      if ((unint64_t)v46 >= v44)
      {
        v62 = (int *)*a10;
        v63 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v46 - *a10) >> 2);
        v64 = v63 + 1;
        if (v63 + 1 > 0x1555555555555555)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v65 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v44 - (_QWORD)v62) >> 2);
        if (2 * v65 > v64)
          v64 = 2 * v65;
        if (v65 >= 0xAAAAAAAAAAAAAAALL)
          v66 = 0x1555555555555555;
        else
          v66 = v64;
        if (v66)
        {
          v66 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v66);
          v62 = (int *)*a10;
          v46 = (int *)a10[1];
        }
        else
        {
          v29 = 0;
        }
        v67 = v66 + 12 * v63;
        v68 = v66 + 12 * (_QWORD)v29;
        *(_DWORD *)v67 = v42;
        *(_QWORD *)(v67 + 4) = 1735159650;
        v61 = v67 + 12;
        if (v46 != v62)
        {
          do
          {
            v69 = *(_QWORD *)(v46 - 3);
            v46 -= 3;
            v70 = v46[2];
            *(_QWORD *)(v67 - 12) = v69;
            v67 -= 12;
            *(_DWORD *)(v67 + 8) = v70;
          }
          while (v46 != v62);
          v62 = (int *)*a10;
        }
        *a10 = v67;
        a10[1] = v61;
        a10[2] = v68;
        if (v62)
          operator delete(v62);
      }
      else
      {
        *v46 = v42;
        *(_QWORD *)(v46 + 1) = 1735159650;
        v61 = (unint64_t)(v46 + 3);
      }
      a10[1] = v61;
    }
  }
  else
  {
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v107);
  }
  ADS::ObjectManager::ReleaseObject((ADS::ObjectManager *)v26, v29);
  ADS::ObjectManager::ReleaseObject(v25, v71);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v104);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v106);
  if (v15)
LABEL_27:
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
}

void sub_1B57D9930(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

OS::CF::UntypedObject *OS::CF::UntypedObject::UntypedObject(OS::CF::UntypedObject *this, CFTypeRef cf)
{
  *(_QWORD *)this = &off_1E69A0E58;
  if (cf)
    CFRetain(cf);
  *((_QWORD *)this + 1) = cf;
  return this;
}

void ADS::Simulator::RemoveDevice(ADS::Simulator *this, ADS::Device *a2)
{
  char *v4;
  int v5;
  int v6;
  BOOL v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  ADS::BaseObject *v12;
  char *v13;
  int64_t v14;
  _DWORD *exception;
  int v17;
  const char *v18;
  __int16 v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v4 = (char *)this + 56;
  v5 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 7) + 16))((char *)this + 56);
  if (a2)
  {
    v6 = *((_DWORD *)a2 + 3);
    v7 = v6 == 1633905771 || v6 == 1633969526;
    if (!v7)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        v17 = 136315394;
        v18 = "ADS_Simulator.cpp";
        v19 = 1024;
        v20 = 866;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Simulator::_RemoveDevice: Trying to remove a device that is neither a 'device' nor a 'clockdevice'", (uint8_t *)&v17, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69A1B30;
      exception[2] = 1852797029;
    }
    v7 = v6 == 1633969526;
    v8 = 168;
    if (v7)
    {
      v8 = 144;
      v9 = (char *)this + 144;
    }
    else
    {
      v9 = (char *)this + 168;
    }
    v10 = *(char **)((char *)this + v8);
    v11 = (char *)*((_QWORD *)v9 + 1);
    if (v10 != v11)
    {
      while (*(_DWORD *)v10 != *((_DWORD *)a2 + 2))
      {
        v10 += 4;
        if (v10 == v11)
          goto LABEL_18;
      }
    }
    if (v10 == v11)
    {
LABEL_18:
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        v17 = 136315394;
        v18 = "ADS_Simulator.cpp";
        v19 = 1024;
        v20 = 883;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  Device not found on ADS remove", (uint8_t *)&v17, 0x12u);
      }
    }
    else
    {
      (*(void (**)(ADS::Device *))(*(_QWORD *)a2 + 8))(a2);
      ADS::ObjectManager::ReleaseObject(a2, v12);
      *(_DWORD *)v10 = 0;
      v13 = (char *)*((_QWORD *)v9 + 1);
      v14 = v13 - (v10 + 4);
      if (v13 != v10 + 4)
        memmove(v10, v10 + 4, v13 - (v10 + 4));
      *((_QWORD *)v9 + 1) = &v10[v14];
    }
  }
  if (v5)
    (*(void (**)(char *))(*(_QWORD *)v4 + 24))(v4);
}

void sub_1B57D9E0C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(unint64_t a1)
{
  if (a1 >= 0x1555555555555556)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(12 * a1);
}

void OS::CF::String::~String(OS::CF::String *this)
{
  OS::CF::UntypedObject::~UntypedObject(this);
  JUMPOUT(0x1B5E50688);
}

uint64_t OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>(uint64_t result, CFDictionaryRef theDict, void *key)
{
  uint64_t v3;
  CFTypeID v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *value;

  *(_QWORD *)result = &off_1E69A0F60;
  *(_QWORD *)(result + 8) = 0;
  if (theDict)
  {
    v3 = result;
    value = 0;
    result = CFDictionaryGetValueIfPresent(theDict, key, (const void **)&value);
    if ((_DWORD)result)
    {
      v4 = value ? CFGetTypeID(value) : 0;
      result = CFStringGetTypeID();
      if (v4 == result)
      {
        v5 = value;
        if (value)
        {
          CFRetain(value);
          v6 = v3;
          v7 = (uint64_t)v5;
        }
        else
        {
          v6 = v3;
          v7 = 0;
        }
        return OS::CF::UntypedObject::operator=(v6, v7);
      }
    }
  }
  return result;
}

void OS::CF::String::AsStdString(std::string *this, uint64_t a2)
{
  const __CFString *v3;
  const char *CStringPtr;
  const __CFString *v6;
  const __CFString *v7;
  std::vector<char> v8;
  CFIndex maxBufLen;
  CFRange v10;
  CFRange v11;

  this->__r_.__value_.__r.__words[0] = 0;
  this->__r_.__value_.__l.__size_ = 0;
  this->__r_.__value_.__r.__words[2] = 0;
  v3 = *(const __CFString **)(a2 + 8);
  if (v3)
  {
    CStringPtr = CFStringGetCStringPtr(v3, 0x8000100u);
    if (CStringPtr)
    {
      std::string::__assign_external(this, CStringPtr);
    }
    else
    {
      maxBufLen = 0;
      v6 = *(const __CFString **)(a2 + 8);
      v10.length = CFStringGetLength(v6);
      v10.location = 0;
      CFStringGetBytes(v6, v10, 0x8000100u, 0, 0, 0, 0, &maxBufLen);
      std::vector<char>::vector(&v8, maxBufLen + 1);
      v7 = *(const __CFString **)(a2 + 8);
      v11.length = CFStringGetLength(v7);
      v11.location = 0;
      CFStringGetBytes(v7, v11, 0x8000100u, 0, 0, (UInt8 *)v8.__begin_, maxBufLen, &maxBufLen);
      v8.__begin_[maxBufLen] = 0;
      std::string::__assign_external(this, v8.__begin_);
      if (v8.__begin_)
      {
        v8.__end_ = v8.__begin_;
        operator delete(v8.__begin_);
      }
    }
  }
}

uint64_t ADS::Simulator::AddDeviceWithProperties(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  ADS::ObjectManager *v6;
  ADS::ObjectManager *v7;
  ADS::ObjectManager *NextObjectID;
  uint64_t v9;
  int v10;
  ADS::BaseObject *v11;
  int v12;
  int v13;
  int v14;
  unint64_t v15;
  char *v16;
  _DWORD *v17;
  unint64_t v18;
  char *v19;
  _DWORD *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  BOOL v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  unint64_t v35;
  int v36;
  _DWORD *v37;
  unint64_t v38;
  int v39;
  ADS::BaseObject *v40;
  unint64_t v41;
  int *v42;
  int *v43;
  int *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  _DWORD *v52;
  int *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  int v61;
  NSObject *v63;
  const char *v64;
  _DWORD *exception;
  _QWORD v66[2];
  uint8_t buf[4];
  const char *v68;
  __int16 v69;
  int v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v6 = (ADS::ObjectManager *)ADS::ObjectManager::CopyObjectByObjectID((ADS::ObjectManager *)1);
  v7 = v6;
  if (!v6)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_79;
    *(_DWORD *)buf = 136315394;
    v68 = "ADS_Simulator.cpp";
    v69 = 1024;
    v70 = 736;
    v63 = MEMORY[0x1E0C81028];
    v64 = "%25s:%-5d  ADS::Simulator::AddDeviceWithProperties: no plug-in object";
    goto LABEL_78;
  }
  if (!*(_QWORD *)(a1 + 8))
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_79;
    *(_DWORD *)buf = 136315394;
    v68 = "ADS_Simulator.cpp";
    v69 = 1024;
    v70 = 737;
    v63 = MEMORY[0x1E0C81028];
    v64 = "%25s:%-5d  ADS::Simulator::AddDeviceWithProperties: no properties dictionary for device creation";
LABEL_78:
    _os_log_impl(&dword_1B57BA000, v63, OS_LOG_TYPE_ERROR, v64, buf, 0x12u);
LABEL_79:
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 1852797029;
  }
  NextObjectID = (ADS::ObjectManager *)ADS::ObjectManager::GetNextObjectID(v6);
  v9 = operator new();
  v10 = *((_DWORD *)v7 + 2);
  OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)v66, *(CFTypeRef *)(a1 + 8));
  v66[0] = &off_1E69A0DE0;
  ADS::Device::Device(v9, (uint64_t)NextObjectID, v10, (uint64_t)v66);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v66);
  if (*(_DWORD *)(v9 + 12) == 1633905771)
    v12 = 1668049699;
  else
    v12 = 1684370979;
  ADS::ObjectManager::MapObject(NextObjectID, v9, v11);
  v13 = (*(uint64_t (**)(uint64_t))(*((_QWORD *)v7 + 7) + 16))((uint64_t)v7 + 56);
  v14 = *(_DWORD *)(v9 + 8);
  if (*(_DWORD *)(v9 + 12) != 1633905771)
  {
    v19 = (char *)*((_QWORD *)v7 + 19);
    v18 = *((_QWORD *)v7 + 20);
    if ((unint64_t)v19 >= v18)
    {
      v28 = (char *)*((_QWORD *)v7 + 18);
      v29 = (v19 - v28) >> 2;
      v30 = v29 + 1;
      if ((unint64_t)(v29 + 1) >> 62)
        goto LABEL_80;
      v31 = v18 - (_QWORD)v28;
      if (v31 >> 1 > v30)
        v30 = v31 >> 1;
      v25 = (unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL;
      v32 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v25)
        v32 = v30;
      if (v32)
      {
        v32 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v32);
        v28 = (char *)*((_QWORD *)v7 + 18);
        v19 = (char *)*((_QWORD *)v7 + 19);
      }
      else
      {
        v33 = 0;
      }
      v37 = (_DWORD *)(v32 + 4 * v29);
      v38 = v32 + 4 * v33;
      *v37 = v14;
      v20 = v37 + 1;
      while (v19 != v28)
      {
        v39 = *((_DWORD *)v19 - 1);
        v19 -= 4;
        *--v37 = v39;
      }
      *((_QWORD *)v7 + 18) = v37;
      *((_QWORD *)v7 + 19) = v20;
      *((_QWORD *)v7 + 20) = v38;
      if (v28)
        operator delete(v28);
    }
    else
    {
      *(_DWORD *)v19 = v14;
      v20 = v19 + 4;
    }
    *((_QWORD *)v7 + 19) = v20;
    if (!v13)
      goto LABEL_41;
    goto LABEL_40;
  }
  v16 = (char *)*((_QWORD *)v7 + 22);
  v15 = *((_QWORD *)v7 + 23);
  if ((unint64_t)v16 < v15)
  {
    *(_DWORD *)v16 = v14;
    v17 = v16 + 4;
    goto LABEL_31;
  }
  v21 = (char *)*((_QWORD *)v7 + 21);
  v22 = (v16 - v21) >> 2;
  v23 = v22 + 1;
  if ((unint64_t)(v22 + 1) >> 62)
LABEL_80:
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  v24 = v15 - (_QWORD)v21;
  if (v24 >> 1 > v23)
    v23 = v24 >> 1;
  v25 = (unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL;
  v26 = 0x3FFFFFFFFFFFFFFFLL;
  if (!v25)
    v26 = v23;
  if (v26)
  {
    v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v26);
    v21 = (char *)*((_QWORD *)v7 + 21);
    v16 = (char *)*((_QWORD *)v7 + 22);
  }
  else
  {
    v27 = 0;
  }
  v34 = (_DWORD *)(v26 + 4 * v22);
  v35 = v26 + 4 * v27;
  *v34 = v14;
  v17 = v34 + 1;
  while (v16 != v21)
  {
    v36 = *((_DWORD *)v16 - 1);
    v16 -= 4;
    *--v34 = v36;
  }
  *((_QWORD *)v7 + 21) = v34;
  *((_QWORD *)v7 + 22) = v17;
  *((_QWORD *)v7 + 23) = v35;
  if (v21)
    operator delete(v21);
LABEL_31:
  *((_QWORD *)v7 + 22) = v17;
  if (v13)
LABEL_40:
    (*(void (**)(uint64_t))(*((_QWORD *)v7 + 7) + 24))((uint64_t)v7 + 56);
LABEL_41:
  (**(void (***)(uint64_t))v9)(v9);
  *a2 = 2;
  v42 = *(int **)(a3 + 8);
  v41 = *(_QWORD *)(a3 + 16);
  if ((unint64_t)v42 >= v41)
  {
    v44 = *(int **)a3;
    v45 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v42 - *(_QWORD *)a3) >> 2);
    v46 = v45 + 1;
    if (v45 + 1 > 0x1555555555555555)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v41 - (_QWORD)v44) >> 2);
    if (2 * v47 > v46)
      v46 = 2 * v47;
    if (v47 >= 0xAAAAAAAAAAAAAAALL)
      v48 = 0x1555555555555555;
    else
      v48 = v46;
    if (v48)
    {
      v48 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v48);
      v44 = *(int **)a3;
      v42 = *(int **)(a3 + 8);
    }
    else
    {
      v40 = 0;
    }
    v49 = v48 + 12 * v45;
    v41 = v48 + 12 * (_QWORD)v40;
    *(_QWORD *)v49 = 0x676C6F626F776E64;
    *(_DWORD *)(v49 + 8) = 0;
    v43 = (int *)(v49 + 12);
    if (v42 != v44)
    {
      do
      {
        v50 = *(_QWORD *)(v42 - 3);
        v42 -= 3;
        v51 = v42[2];
        *(_QWORD *)(v49 - 12) = v50;
        v49 -= 12;
        *(_DWORD *)(v49 + 8) = v51;
      }
      while (v42 != v44);
      v44 = *(int **)a3;
    }
    *(_QWORD *)a3 = v49;
    *(_QWORD *)(a3 + 8) = v43;
    *(_QWORD *)(a3 + 16) = v41;
    if (v44)
    {
      operator delete(v44);
      v41 = *(_QWORD *)(a3 + 16);
    }
  }
  else
  {
    *(_QWORD *)v42 = 0x676C6F626F776E64;
    v42[2] = 0;
    v43 = v42 + 3;
  }
  *(_QWORD *)(a3 + 8) = v43;
  if ((unint64_t)v43 >= v41)
  {
    v53 = *(int **)a3;
    v54 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v43 - *(_QWORD *)a3) >> 2);
    v55 = v54 + 1;
    if (v54 + 1 > 0x1555555555555555)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v56 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v41 - (_QWORD)v53) >> 2);
    if (2 * v56 > v55)
      v55 = 2 * v56;
    if (v56 >= 0xAAAAAAAAAAAAAAALL)
      v57 = 0x1555555555555555;
    else
      v57 = v55;
    if (v57)
    {
      v57 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v57);
      v53 = *(int **)a3;
      v43 = *(int **)(a3 + 8);
    }
    else
    {
      v40 = 0;
    }
    v58 = v57 + 12 * v54;
    v59 = v57 + 12 * (_QWORD)v40;
    *(_DWORD *)v58 = v12;
    *(_QWORD *)(v58 + 4) = 1735159650;
    v52 = (_DWORD *)(v58 + 12);
    if (v43 != v53)
    {
      do
      {
        v60 = *(_QWORD *)(v43 - 3);
        v43 -= 3;
        v61 = v43[2];
        *(_QWORD *)(v58 - 12) = v60;
        v58 -= 12;
        *(_DWORD *)(v58 + 8) = v61;
      }
      while (v43 != v53);
      v53 = *(int **)a3;
    }
    *(_QWORD *)a3 = v58;
    *(_QWORD *)(a3 + 8) = v52;
    *(_QWORD *)(a3 + 16) = v59;
    if (v53)
      operator delete(v53);
  }
  else
  {
    *v43 = v12;
    *(_QWORD *)(v43 + 1) = 1735159650;
    v52 = v43 + 3;
  }
  *(_QWORD *)(a3 + 8) = v52;
  return ADS::ObjectManager::ReleaseObject(v7, v40);
}

void sub_1B57DA648(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1B57DA6D4(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1B57DA6DCLL);
  JUMPOUT(0x1B57DA6C4);
}

void sub_1B57DA768()
{
  __cxa_end_catch();
  JUMPOUT(0x1B57DA6B0);
}

void ADS::Simulator::_RemoveBox(ADS::Simulator *this, int a2)
{
  _QWORD *v4;
  int v5;
  char *v6;
  char *v7;
  int64_t v8;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = (_QWORD *)((char *)this + 56);
  v5 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 7) + 16))((char *)this + 56);
  v7 = (char *)v4[17];
  v6 = (char *)v4[18];
  if (v7 != v6)
  {
    while (*(_DWORD *)v7 != a2)
    {
      v7 += 4;
      if (v7 == v6)
        goto LABEL_9;
    }
  }
  if (v7 == v6)
  {
LABEL_9:
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      v9 = 136315394;
      v10 = "ADS_Simulator.cpp";
      v11 = 1024;
      v12 = 911;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  Device not found on ADS remove", (uint8_t *)&v9, 0x12u);
    }
  }
  else
  {
    v8 = v6 - (v7 + 4);
    if (v6 != v7 + 4)
      memmove(v7, v7 + 4, v6 - (v7 + 4));
    *((_QWORD *)this + 25) = &v7[v8];
  }
  if (v5)
    (*(void (**)(_QWORD *))(*v4 + 24))(v4);
}

void sub_1B57DA8C0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s)
{
  size_t v4;

  v4 = strlen(__s);
  return std::string::__assign_external(this, __s, v4);
}

std::vector<char> *__cdecl std::vector<char>::vector(std::vector<char> *this, std::vector<char>::size_type __n)
{
  std::vector<char>::pointer end;
  char *v5;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<char>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    v5 = &end[__n];
    bzero(end, __n);
    this->__end_ = v5;
  }
  return this;
}

void sub_1B57DA954(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  unint64_t v6;
  std::string *v7;
  std::string::size_type size;
  unint64_t v9;
  unint64_t v10;

  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    v10 = this->__r_.__value_.__r.__words[2];
    v9 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v9 < __n)
    {
      size = this->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }
    v6 = HIBYTE(v10);
    v7 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    v7 = this;
    if (__n > 0x16)
    {
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      v9 = 22;
LABEL_6:
      std::string::__grow_by_and_replace(this, v9, __n - v9, size, 0, size, __n, __s);
      return this;
    }
  }
  if (__n)
  {
    memmove(v7, __s, __n);
    LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0)
    this->__r_.__value_.__l.__size_ = __n;
  else
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __n & 0x7F;
  v7->__r_.__value_.__s.__data_[__n] = 0;
  return this;
}

void OS::CF::Dictionary::~Dictionary(OS::CF::Dictionary *this)
{
  OS::CF::UntypedObject::~UntypedObject(this);
  JUMPOUT(0x1B5E50688);
}

uint64_t Simulator_QueryInterface(_UNKNOWN **a1, CFUUIDBytes a2, _QWORD *a3)
{
  CFUUIDRef v4;
  CFUUIDRef v5;
  CFUUIDRef v6;
  int v8;
  _DWORD *exception;
  int v10;
  NSObject *v11;
  const char *v12;
  _DWORD *v13;
  CFUUIDRef v14;
  char v15;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (a1 != &gAudioServerPlugInDriverInterfacePtr)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v17 = "ADS_Simulator.cpp";
      v18 = 1024;
      v19 = 1056;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_QueryInterface: bad driver reference", buf, 0x12u);
    }
    v8 = 560947818;
LABEL_14:
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = v8;
  }
  if (!a3)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v17 = "ADS_Simulator.cpp";
      v18 = 1024;
      v19 = 1057;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_QueryInterface: no place to store the returned interface", buf, 0x12u);
    }
    v8 = 1852797029;
    goto LABEL_14;
  }
  v4 = CFUUIDCreateFromUUIDBytes(0, a2);
  v14 = v4;
  v15 = 1;
  if (!v4)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v17 = "ADS_Simulator.cpp";
      v18 = 1024;
      v19 = 1061;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_QueryInterface: failed to create the CFUUIDRef", buf, 0x12u);
    }
    v10 = 1852797029;
LABEL_24:
    v13 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v13 = &off_1E69A1B30;
    v13[2] = v10;
  }
  v5 = CFUUIDGetConstantUUIDWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE28], 0, 0, 0, 0, 0, 0, 0, 0, 0xC0u, 0, 0, 0, 0, 0, 0, 0x46u);
  if (!CFEqual(v4, v5))
  {
    v6 = CFUUIDGetConstantUUIDWithBytes(0, 0xEEu, 0xA5u, 0x77u, 0x3Du, 0xCCu, 0x43u, 0x49u, 0xF1u, 0x8Eu, 0, 0x8Fu, 0x96u, 0xE7u, 0xD2u, 0x3Bu, 0x17u);
    if (!CFEqual(v14, v6))
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v17 = "ADS_Simulator.cpp";
        v18 = 1024;
        v19 = 1066;
        v11 = MEMORY[0x1E0C81028];
        v12 = "%25s:%-5d  Simulator_QueryInterface: requested interface is unsupported";
        goto LABEL_22;
      }
LABEL_23:
      v10 = -2147483644;
      goto LABEL_24;
    }
  }
  if (gAudioServerPlugInDriverRefCount == -1)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v17 = "ADS_Simulator.cpp";
      v18 = 1024;
      v19 = 1067;
      v11 = MEMORY[0x1E0C81028];
      v12 = "%25s:%-5d  Simulator_QueryInterface: the ref count is maxxed out";
LABEL_22:
      _os_log_impl(&dword_1B57BA000, v11, OS_LOG_TYPE_ERROR, v12, buf, 0x12u);
      goto LABEL_23;
    }
    goto LABEL_23;
  }
  ++gAudioServerPlugInDriverRefCount;
  *a3 = &gAudioServerPlugInDriverInterfacePtr;
  CACFObject<__CFUUID const*>::~CACFObject((uint64_t)&v14);
  return 0;
}

void sub_1B57DAE88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1B57DABE4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Simulator_AddRef(_UNKNOWN **a1)
{
  uint64_t result;
  NSObject *v2;
  const char *v3;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (a1 != &gAudioServerPlugInDriverInterfacePtr)
  {
    result = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
    if (!(_DWORD)result)
      return result;
    v4 = 136315394;
    v5 = "ADS_Simulator.cpp";
    v6 = 1024;
    v7 = 1095;
    v2 = MEMORY[0x1E0C81028];
    v3 = "%25s:%-5d  Simulator_AddRef: bad driver reference";
    goto LABEL_4;
  }
  if (gAudioServerPlugInDriverRefCount != -1)
    return ++gAudioServerPlugInDriverRefCount;
  result = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
  if ((_DWORD)result)
  {
    v4 = 136315394;
    v5 = "ADS_Simulator.cpp";
    v6 = 1024;
    v7 = 1096;
    v2 = MEMORY[0x1E0C81028];
    v3 = "%25s:%-5d  Simulator_AddRef: out of references";
LABEL_4:
    _os_log_impl(&dword_1B57BA000, v2, OS_LOG_TYPE_ERROR, v3, (uint8_t *)&v4, 0x12u);
    return 0;
  }
  return result;
}

uint64_t Simulator_Release(_UNKNOWN **a1)
{
  uint64_t result;
  NSObject *v2;
  const char *v3;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (a1 != &gAudioServerPlugInDriverInterfacePtr)
  {
    result = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
    if (!(_DWORD)result)
      return result;
    v4 = 136315394;
    v5 = "ADS_Simulator.cpp";
    v6 = 1024;
    v7 = 1115;
    v2 = MEMORY[0x1E0C81028];
    v3 = "%25s:%-5d  Simulator_Release: bad driver reference";
    goto LABEL_4;
  }
  if (gAudioServerPlugInDriverRefCount != -1)
    return --gAudioServerPlugInDriverRefCount;
  result = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
  if ((_DWORD)result)
  {
    v4 = 136315394;
    v5 = "ADS_Simulator.cpp";
    v6 = 1024;
    v7 = 1116;
    v2 = MEMORY[0x1E0C81028];
    v3 = "%25s:%-5d  Simulator_Release: out of references";
LABEL_4:
    _os_log_impl(&dword_1B57BA000, v2, OS_LOG_TYPE_ERROR, v3, (uint8_t *)&v4, 0x12u);
    return 0;
  }
  return result;
}

uint64_t Simulator_Initialize(_UNKNOWN **a1, uint64_t a2)
{
  uint64_t result;
  _DWORD *exception;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (a1 != &gAudioServerPlugInDriverInterfacePtr)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v5 = 136315394;
      v6 = "ADS_Simulator.cpp";
      v7 = 1024;
      v8 = 1146;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_Initialize: bad driver reference", (uint8_t *)&v5, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 560947818;
  }
  pthread_once(&ADS::Simulator::sStaticInitializer, (void (*)(void))ADS::Simulator::StaticInitializer);
  result = 0;
  ADS::Simulator::sHost = a2;
  return result;
}

void sub_1B57DB278(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B57DB1B0);
  }
  _Unwind_Resume(a1);
}

uint64_t Simulator_CreateDevice()
{
  return 1970171760;
}

uint64_t Simulator_DestroyDevice()
{
  return 1970171760;
}

uint64_t Simulator_AddDeviceClient()
{
  return 0;
}

uint64_t Simulator_RemoveDeviceClient()
{
  return 0;
}

uint64_t Simulator_PerformDeviceConfigurationChange(_UNKNOWN **a1, ADS::ObjectManager *this, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  ADS::ObjectManager *v7;
  ADS::BaseObject *v8;
  _DWORD *exception;
  _DWORD *v11;
  int v12;
  const char *v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1 != &gAudioServerPlugInDriverInterfacePtr)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v12 = 136315394;
      v13 = "ADS_Simulator.cpp";
      v14 = 1024;
      v15 = 1227;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_PerformDeviceConfigurationChange: bad driver reference", (uint8_t *)&v12, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 560947818;
  }
  v6 = ADS::ObjectManager::CopyObjectByObjectID(this);
  v7 = (ADS::ObjectManager *)v6;
  if (!v6)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v12 = 136315394;
      v13 = "ADS_Simulator.cpp";
      v14 = 1024;
      v15 = 1231;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_PerformDeviceConfigurationChange: unknown device", (uint8_t *)&v12, 0x12u);
    }
    v11 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v11 = &off_1E69A1B30;
    v11[2] = 560947818;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 72))(v6, a3, a4);
  ADS::ObjectManager::ReleaseObject(v7, v8);
  return 0;
}

void sub_1B57DB4B4(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1B57DB4CC(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B57DB348);
  }
  JUMPOUT(0x1B57DB4BCLL);
}

void sub_1B57DB520()
{
  JUMPOUT(0x1B57DB4BCLL);
}

uint64_t Simulator_AbortDeviceConfigurationChange(_UNKNOWN **a1, ADS::ObjectManager *this, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  ADS::ObjectManager *v7;
  ADS::BaseObject *v8;
  _DWORD *exception;
  _DWORD *v11;
  int v12;
  const char *v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1 != &gAudioServerPlugInDriverInterfacePtr)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v12 = 136315394;
      v13 = "ADS_Simulator.cpp";
      v14 = 1024;
      v15 = 1259;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_PerformDeviceConfigurationChange: bad driver reference", (uint8_t *)&v12, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 560947818;
  }
  v6 = ADS::ObjectManager::CopyObjectByObjectID(this);
  v7 = (ADS::ObjectManager *)v6;
  if (!v6)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v12 = 136315394;
      v13 = "ADS_Simulator.cpp";
      v14 = 1024;
      v15 = 1263;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_PerformDeviceConfigurationChange: unknown device", (uint8_t *)&v12, 0x12u);
    }
    v11 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v11 = &off_1E69A1B30;
    v11[2] = 560947818;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 80))(v6, a3, a4);
  ADS::ObjectManager::ReleaseObject(v7, v8);
  return 0;
}

void sub_1B57DB704(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1B57DB71C(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B57DB598);
  }
  JUMPOUT(0x1B57DB70CLL);
}

void sub_1B57DB770()
{
  JUMPOUT(0x1B57DB70CLL);
}

uint64_t Simulator_HasProperty(_UNKNOWN **a1, ADS::ObjectManager *this, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  ADS::ObjectManager *v8;
  uint64_t v9;
  ADS::BaseObject *v10;
  _DWORD *exception;
  int v13;
  _DWORD *v14;
  _DWORD *v15;
  int v16;
  const char *v17;
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (!(_DWORD)this)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v16 = 136315394;
      v17 = "ADS_Simulator.cpp";
      v18 = 1024;
      v19 = 1285;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_HasProperty: unknown AudioObjectID", (uint8_t *)&v16, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 560947818;
  }
  if (a1 != &gAudioServerPlugInDriverInterfacePtr)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v16 = 136315394;
      v17 = "ADS_Simulator.cpp";
      v18 = 1024;
      v19 = 1293;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_HasProperty: bad driver reference", (uint8_t *)&v16, 0x12u);
    }
    v13 = 560947818;
LABEL_15:
    v14 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v14 = &off_1E69A1B30;
    v14[2] = v13;
  }
  if (!a4)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v16 = 136315394;
      v17 = "ADS_Simulator.cpp";
      v18 = 1024;
      v19 = 1294;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_HasProperty: no address", (uint8_t *)&v16, 0x12u);
    }
    v13 = 1852797029;
    goto LABEL_15;
  }
  v7 = ADS::ObjectManager::CopyObjectByObjectID(this);
  v8 = (ADS::ObjectManager *)v7;
  if (!v7)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v16 = 136315394;
      v17 = "ADS_Simulator.cpp";
      v18 = 1024;
      v19 = 1298;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_HasProperty: unknown object", (uint8_t *)&v16, 0x12u);
    }
    v15 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v15 = &off_1E69A1B30;
    v15[2] = 560947818;
  }
  v9 = (*(uint64_t (**)(uint64_t, ADS::ObjectManager *, uint64_t, uint64_t))(*(_QWORD *)v7 + 32))(v7, this, a3, a4);
  ADS::ObjectManager::ReleaseObject(v8, v10);
  return v9;
}

void sub_1B57DBA70(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t Simulator_IsPropertySettable(_UNKNOWN **a1, ADS::ObjectManager *this, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  uint64_t v9;
  ADS::ObjectManager *v10;
  ADS::BaseObject *v11;
  uint64_t v12;
  int v14;
  NSObject *v15;
  const char *v16;
  _DWORD *exception;
  _DWORD *v18;
  int v19;
  const char *v20;
  __int16 v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (a1 != &gAudioServerPlugInDriverInterfacePtr)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v19 = 136315394;
      v20 = "ADS_Simulator.cpp";
      v21 = 1024;
      v22 = 1326;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_IsPropertySettable: bad driver reference", (uint8_t *)&v19, 0x12u);
    }
    v14 = 560947818;
LABEL_18:
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = v14;
  }
  if (!a4)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v19 = 136315394;
      v20 = "ADS_Simulator.cpp";
      v21 = 1024;
      v22 = 1327;
      v15 = MEMORY[0x1E0C81028];
      v16 = "%25s:%-5d  Simulator_IsPropertySettable: no address";
LABEL_16:
      _os_log_impl(&dword_1B57BA000, v15, OS_LOG_TYPE_ERROR, v16, (uint8_t *)&v19, 0x12u);
    }
LABEL_17:
    v14 = 1852797029;
    goto LABEL_18;
  }
  if (!a5)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v19 = 136315394;
      v20 = "ADS_Simulator.cpp";
      v21 = 1024;
      v22 = 1328;
      v15 = MEMORY[0x1E0C81028];
      v16 = "%25s:%-5d  Simulator_IsPropertySettable: no place to put the return value";
      goto LABEL_16;
    }
    goto LABEL_17;
  }
  v9 = ADS::ObjectManager::CopyObjectByObjectID(this);
  v10 = (ADS::ObjectManager *)v9;
  if (!v9)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v19 = 136315394;
      v20 = "ADS_Simulator.cpp";
      v21 = 1024;
      v22 = 1332;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_IsPropertySettable: unknown object", (uint8_t *)&v19, 0x12u);
    }
    v18 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v18 = &off_1E69A1B30;
    v18[2] = 560947818;
  }
  if ((*(unsigned int (**)(uint64_t, ADS::ObjectManager *, uint64_t, uint64_t))(*(_QWORD *)v9 + 32))(v9, this, a3, a4))
  {
    v12 = 0;
    *a5 = (*(uint64_t (**)(ADS::ObjectManager *, ADS::ObjectManager *, uint64_t, uint64_t))(*(_QWORD *)v10 + 40))(v10, this, a3, a4);
  }
  else
  {
    v12 = 2003332927;
  }
  ADS::ObjectManager::ReleaseObject(v10, v11);
  return v12;
}

void sub_1B57DBDB8(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1B57DBDD0(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B57DBB80);
  }
  JUMPOUT(0x1B57DBDC0);
}

void sub_1B57DBE18()
{
  JUMPOUT(0x1B57DBDC0);
}

uint64_t Simulator_GetPropertyDataSize(_UNKNOWN **a1, ADS::ObjectManager *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _DWORD *a7)
{
  uint64_t v13;
  ADS::ObjectManager *v14;
  ADS::BaseObject *v15;
  uint64_t v16;
  int v18;
  NSObject *v19;
  const char *v20;
  _DWORD *exception;
  _DWORD *v22;
  int v23;
  const char *v24;
  __int16 v25;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (a1 != &gAudioServerPlugInDriverInterfacePtr)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v23 = 136315394;
      v24 = "ADS_Simulator.cpp";
      v25 = 1024;
      v26 = 1366;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_GetPropertyDataSize: bad driver reference", (uint8_t *)&v23, 0x12u);
    }
    v18 = 560947818;
LABEL_18:
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = v18;
  }
  if (!a4)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v23 = 136315394;
      v24 = "ADS_Simulator.cpp";
      v25 = 1024;
      v26 = 1367;
      v19 = MEMORY[0x1E0C81028];
      v20 = "%25s:%-5d  Simulator_GetPropertyDataSize: no address";
LABEL_16:
      _os_log_impl(&dword_1B57BA000, v19, OS_LOG_TYPE_ERROR, v20, (uint8_t *)&v23, 0x12u);
    }
LABEL_17:
    v18 = 1852797029;
    goto LABEL_18;
  }
  if (!a7)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v23 = 136315394;
      v24 = "ADS_Simulator.cpp";
      v25 = 1024;
      v26 = 1368;
      v19 = MEMORY[0x1E0C81028];
      v20 = "%25s:%-5d  Simulator_GetPropertyDataSize: no place to put the return value";
      goto LABEL_16;
    }
    goto LABEL_17;
  }
  v13 = ADS::ObjectManager::CopyObjectByObjectID(this);
  v14 = (ADS::ObjectManager *)v13;
  if (!v13)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v23 = 136315394;
      v24 = "ADS_Simulator.cpp";
      v25 = 1024;
      v26 = 1372;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_GetPropertyDataSize: unknown object", (uint8_t *)&v23, 0x12u);
    }
    v22 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v22 = &off_1E69A1B30;
    v22[2] = 560947818;
  }
  if ((*(unsigned int (**)(uint64_t, ADS::ObjectManager *, uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, this, a3, a4))
  {
    v16 = 0;
    *a7 = (*(uint64_t (**)(ADS::ObjectManager *, ADS::ObjectManager *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 48))(v14, this, a3, a4, a5, a6);
  }
  else
  {
    v16 = 2003332927;
  }
  ADS::ObjectManager::ReleaseObject(v14, v15);
  return v16;
}

void sub_1B57DC12C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1B57DC144(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B57DBEF0);
  }
  JUMPOUT(0x1B57DC134);
}

void sub_1B57DC18C()
{
  JUMPOUT(0x1B57DC134);
}

uint64_t Simulator_GetPropertyData(_UNKNOWN **a1, ADS::ObjectManager *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v16;
  ADS::ObjectManager *v17;
  ADS::BaseObject *v18;
  uint64_t v19;
  int v21;
  NSObject *v22;
  const char *v23;
  _DWORD *exception;
  _DWORD *v25;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (a1 != &gAudioServerPlugInDriverInterfacePtr)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v27 = "ADS_Simulator.cpp";
      v28 = 1024;
      v29 = 1406;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_GetPropertyData: bad driver reference", buf, 0x12u);
    }
    v21 = 560947818;
LABEL_21:
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = v21;
  }
  if (!a4)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_20;
    *(_DWORD *)buf = 136315394;
    v27 = "ADS_Simulator.cpp";
    v28 = 1024;
    v29 = 1407;
    v22 = MEMORY[0x1E0C81028];
    v23 = "%25s:%-5d  Simulator_GetPropertyData: no address";
LABEL_19:
    _os_log_impl(&dword_1B57BA000, v22, OS_LOG_TYPE_ERROR, v23, buf, 0x12u);
    goto LABEL_20;
  }
  if (!a8)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_20;
    *(_DWORD *)buf = 136315394;
    v27 = "ADS_Simulator.cpp";
    v28 = 1024;
    v29 = 1408;
    v22 = MEMORY[0x1E0C81028];
    v23 = "%25s:%-5d  Simulator_GetPropertyData: no place to put the return value size";
    goto LABEL_19;
  }
  if (!a9)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v27 = "ADS_Simulator.cpp";
      v28 = 1024;
      v29 = 1409;
      v22 = MEMORY[0x1E0C81028];
      v23 = "%25s:%-5d  Simulator_GetPropertyData: no place to put the return value";
      goto LABEL_19;
    }
LABEL_20:
    v21 = 1852797029;
    goto LABEL_21;
  }
  v16 = ADS::ObjectManager::CopyObjectByObjectID(this);
  v17 = (ADS::ObjectManager *)v16;
  if (!v16)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v27 = "ADS_Simulator.cpp";
      v28 = 1024;
      v29 = 1412;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_GetPropertyData: unknown object", buf, 0x12u);
    }
    v25 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v25 = &off_1E69A1B30;
    v25[2] = 560947818;
  }
  if ((*(unsigned int (**)(uint64_t, ADS::ObjectManager *, uint64_t, uint64_t))(*(_QWORD *)v16 + 32))(v16, this, a3, a4))
  {
    (*(void (**)(ADS::ObjectManager *, ADS::ObjectManager *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v17 + 56))(v17, this, a3, a4, a5, a6, a7, a8, a9);
    v19 = 0;
  }
  else
  {
    v19 = 2003332927;
  }
  ADS::ObjectManager::ReleaseObject(v17, v18);
  return v19;
}

void sub_1B57DC514(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1B57DC52C(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B57DC27CLL);
  }
  JUMPOUT(0x1B57DC51CLL);
}

void sub_1B57DC574()
{
  JUMPOUT(0x1B57DC51CLL);
}

uint64_t Simulator_SetPropertyData(_UNKNOWN **a1, ADS::ObjectManager *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15;
  ADS::ObjectManager *v16;
  ADS::BaseObject *v17;
  dispatch_queue_t *v18;
  unsigned __int8 v19;
  uint64_t v20;
  int v22;
  _DWORD *exception;
  _DWORD *v24;
  _QWORD block[4];
  void *__p;
  void *v27;
  uint64_t v28;
  int v29;
  int v30;
  void *v31;
  _BYTE *v32;
  uint64_t v33;
  int v34;
  uint8_t buf[4];
  const char *v36;
  __int16 v37;
  int v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v34 = 0;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  if (a1 != &gAudioServerPlugInDriverInterfacePtr)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v36 = "ADS_Simulator.cpp";
      v37 = 1024;
      v38 = 1448;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_SetPropertyData: bad driver reference", buf, 0x12u);
    }
    v22 = 560947818;
LABEL_25:
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = v22;
  }
  if (!a4)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v36 = "ADS_Simulator.cpp";
      v37 = 1024;
      v38 = 1449;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_SetPropertyData: no address", buf, 0x12u);
    }
    v22 = 1852797029;
    goto LABEL_25;
  }
  v15 = ADS::ObjectManager::CopyObjectByObjectID(this);
  v16 = (ADS::ObjectManager *)v15;
  if (!v15)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v36 = "ADS_Simulator.cpp";
      v37 = 1024;
      v38 = 1453;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_SetPropertyData: unknown object", buf, 0x12u);
    }
    v24 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v24 = &off_1E69A1B30;
    v24[2] = 560947818;
  }
  if ((*(unsigned int (**)(uint64_t, ADS::ObjectManager *, uint64_t, uint64_t))(*(_QWORD *)v15 + 32))(v15, this, a3, a4))
  {
    if ((*(unsigned int (**)(ADS::ObjectManager *, ADS::ObjectManager *, uint64_t, uint64_t))(*(_QWORD *)v16 + 40))(v16, this, a3, a4))
    {
      (*(void (**)(ADS::ObjectManager *, ADS::ObjectManager *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int *, void **, _BYTE))(*(_QWORD *)v16 + 64))(v16, this, a3, a4, a5, a6, a7, a8, &v34, &v31, 0);
      if (v34)
      {
        pthread_once(&ADS::Simulator::sStaticInitializer, (void (*)(void))ADS::Simulator::StaticInitializer);
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 1174405120;
        block[2] = __Simulator_SetPropertyData_block_invoke;
        block[3] = &__block_descriptor_tmp_31;
        v29 = (int)this;
        v30 = v34;
        v27 = 0;
        v28 = 0;
        __p = 0;
        std::vector<AudioObjectPropertyAddress>::__init_with_size[abi:ne180100]<AudioObjectPropertyAddress*,AudioObjectPropertyAddress*>(&__p, v31, (uint64_t)v32, 0xAAAAAAAAAAAAAAABLL * ((v32 - (_BYTE *)v31) >> 2));
        v18 = (dispatch_queue_t *)ADS::Simulator::sServerHighPriorityQueue;
        if (ADS::Simulator::sServerHighPriorityQueue)
        {
          v19 = atomic_load((unsigned __int8 *)(ADS::Simulator::sServerHighPriorityQueue + 32));
          if ((v19 & 1) != 0)
            atomic_store(1u, (unsigned __int8 *)(ADS::Simulator::sServerHighPriorityQueue + 33));
          dispatch_async(*v18, block);
        }
        if (__p)
        {
          v27 = __p;
          operator delete(__p);
        }
      }
      v20 = 0;
    }
    else
    {
      v20 = 1970171760;
    }
  }
  else
  {
    v20 = 2003332927;
  }
  ADS::ObjectManager::ReleaseObject(v16, v17);
  if (v31)
  {
    v32 = v31;
    operator delete(v31);
  }
  return v20;
}

void sub_1B57DC948(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1B57DC960(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B57DC754);
  }
  JUMPOUT(0x1B57DC950);
}

void sub_1B57DC9B4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (__p)
    operator delete(__p);
  JUMPOUT(0x1B57DC950);
}

uint64_t Simulator_StartIO(_UNKNOWN **a1, ADS::ObjectManager *this)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  ADS::BaseObject *v5;
  unsigned __int8 v6;
  uint64_t v7;
  int v8;
  unsigned int *v9;
  char v10;
  char v11;
  uint64_t v12;
  UInt32 v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int *v17;
  uint64_t v18;
  ADS::ObjectManager *v19;
  int v20;
  uint64_t v21;
  __int128 v22;
  tm *v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  std::string::size_type size;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  __int128 v31;
  std::string *v32;
  std::string::size_type v33;
  std::string *v34;
  __int128 v35;
  std::string *v36;
  __int128 v37;
  std::string *v38;
  std::string::size_type v39;
  std::string *v40;
  __int128 v41;
  std::string *v42;
  __int128 v43;
  std::string *v44;
  std::string::size_type v45;
  std::string *v46;
  __int128 v47;
  std::string *v48;
  __int128 v49;
  std::string *v50;
  std::string::size_type v51;
  std::string *v52;
  __int128 v53;
  std::string *v54;
  std::string *v55;
  const __CFString *v56;
  const __CFURL *v57;
  OSStatus v58;
  ADS::BaseObject *v59;
  ExtAudioFileRef *v60;
  unint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  ExtAudioFileRef *v69;
  char *v70;
  char *v71;
  OpaqueExtAudioFile *v72;
  NSObject *v73;
  const char *v74;
  _DWORD *v75;
  _DWORD *exception;
  _DWORD *v77;
  unsigned int v78;
  std::string *v79;
  _DWORD *v80;
  int v81;
  const __CFAllocator *alloc;
  std::string v83;
  std::string v84;
  std::string v85;
  std::string v86;
  std::string v87;
  std::string v88;
  std::string v89;
  std::string v90;
  std::string v91;
  std::string v92;
  std::string v93;
  std::string v94;
  std::string v95;
  std::string v96;
  std::string v97;
  time_t v98;
  ExtAudioFileRef outExtAudioFile;
  std::string v100;
  AudioStreamBasicDescription buf;
  uint64_t v102;

  v102 = *MEMORY[0x1E0C80C00];
  if (a1 != &gAudioServerPlugInDriverInterfacePtr)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.mSampleRate) = 136315394;
      *(_QWORD *)((char *)&buf.mSampleRate + 4) = "ADS_Simulator.cpp";
      LOWORD(buf.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 1511;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_StartIO: bad driver reference", (uint8_t *)&buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 560947818;
  }
  v2 = ADS::ObjectManager::CopyObjectByObjectID(this);
  v3 = v2;
  if (!v2)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.mSampleRate) = 136315394;
      *(_QWORD *)((char *)&buf.mSampleRate + 4) = "ADS_Simulator.cpp";
      LOWORD(buf.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 1515;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_StartIO: unknown device", (uint8_t *)&buf, 0x12u);
    }
    v77 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v77 = &off_1E69A1B30;
    v77[2] = 560947818;
  }
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 + 120) + 16))(v2 + 120);
  v6 = atomic_load((unsigned __int8 *)(v3 + 436));
  v81 = v4;
  if ((v6 & 1) != 0)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.mSampleRate) = 136315394;
      *(_QWORD *)((char *)&buf.mSampleRate + 4) = "ADS_Device.cpp";
      LOWORD(buf.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 1278;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::StartIO: config change is in progress, cannot start IO", (uint8_t *)&buf, 0x12u);
    }
    v8 = 1852990585;
    goto LABEL_141;
  }
  v7 = *(_QWORD *)(v3 + 440);
  if (!v7)
  {
    v9 = (unsigned int *)(v3 + 744);
    v10 = atomic_load((unsigned int *)(v3 + 744));
    if ((v10 & 2) == 0)
      goto LABEL_10;
    v78 = atomic_load(v9);
    atomic_store(v78 & 0xFFFFFFFD, v9);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      OS::CF::String::AsStdString(&v97, v3 + 88);
      v79 = (v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v97
          : (std::string *)v97.__r_.__value_.__r.__words[0];
      LODWORD(buf.mSampleRate) = 136315650;
      *(_QWORD *)((char *)&buf.mSampleRate + 4) = "ADS_Device.cpp";
      LOWORD(buf.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 1292;
      HIWORD(buf.mBytesPerPacket) = 2080;
      *(_QWORD *)&buf.mFramesPerPacket = v79;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  %s: Neglecting to start IO due to Device Behavior", (uint8_t *)&buf, 0x1Cu);
      if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v97.__r_.__value_.__l.__data_);
    }
    v8 = 2003329396;
LABEL_141:
    v80 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v80 = &off_1E69A1B30;
    v80[2] = v8;
  }
  if (v7 == -1)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.mSampleRate) = 136315394;
      *(_QWORD *)((char *)&buf.mSampleRate + 4) = "ADS_Device.cpp";
      LOWORD(buf.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 1281;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::StartIO: failed to start because the ref count was maxxed out already", (uint8_t *)&buf, 0x12u);
    }
    v8 = 1852797029;
    goto LABEL_141;
  }
LABEL_10:
  v11 = atomic_load((unsigned int *)(v3 + 744));
  if (v11 < 0)
    usleep(0x2625A0u);
  v12 = *(_QWORD *)(v3 + 440);
  *(_QWORD *)(v3 + 440) = v12 + 1;
  if (!v12)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      v14 = *(_DWORD *)(v3 + 8);
      LODWORD(buf.mSampleRate) = 136315650;
      *(_QWORD *)((char *)&buf.mSampleRate + 4) = "ADS_Device.cpp";
      LOWORD(buf.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 1306;
      HIWORD(buf.mBytesPerPacket) = 1024;
      buf.mFramesPerPacket = v14;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  Device %d starting IO.\n", (uint8_t *)&buf, 0x18u);
    }
    *(_QWORD *)(v3 + 448) = 0;
    *(_QWORD *)(v3 + 456) = 0;
    if (*(_BYTE *)(v3 + 545))
    {
      v15 = *(_QWORD *)(v3 + 552);
      *(_QWORD *)(v3 + 448) = v15;
      *(_QWORD *)(v3 + 456) = v15;
    }
    *(_QWORD *)(v3 + 688) = 0;
    *(_QWORD *)(v3 + 464) = mach_absolute_time();
    *(_QWORD *)(v3 + 680) = 0;
    if (*(_BYTE *)(v3 + 544))
    {
      v16 = *(unsigned int **)(v3 + 384);
      v17 = *(unsigned int **)(v3 + 392);
      if (v16 != v17)
      {
        v18 = v3 + 208;
        alloc = (const __CFAllocator *)*MEMORY[0x1E0C9AE08];
        while (1)
        {
          v19 = (ADS::ObjectManager *)*v16;
          v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v3 + 208);
          v21 = ADS::ObjectManager::CopyObjectByObjectID(v19);
          v22 = *(_OWORD *)(v21 + 72);
          *(_OWORD *)&buf.mSampleRate = *(_OWORD *)(v21 + 56);
          *(_OWORD *)&buf.mBytesPerPacket = v22;
          *(_QWORD *)&buf.mBitsPerChannel = *(_QWORD *)(v21 + 88);
          v98 = 0;
          outExtAudioFile = 0;
          v98 = time(0);
          v23 = localtime(&v98);
          std::to_string(&v88, v23->tm_year + 1900);
          v24 = std::string::append(&v88, "_", 1uLL);
          v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
          v89.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v25;
          v24->__r_.__value_.__l.__size_ = 0;
          v24->__r_.__value_.__r.__words[2] = 0;
          v24->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v87, v23->tm_mon + 1);
          if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v26 = &v87;
          else
            v26 = (std::string *)v87.__r_.__value_.__r.__words[0];
          if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v87.__r_.__value_.__r.__words[2]);
          else
            size = v87.__r_.__value_.__l.__size_;
          v28 = std::string::append(&v89, (const std::string::value_type *)v26, size);
          v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
          v90.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v29;
          v28->__r_.__value_.__l.__size_ = 0;
          v28->__r_.__value_.__r.__words[2] = 0;
          v28->__r_.__value_.__r.__words[0] = 0;
          v30 = std::string::append(&v90, "_", 1uLL);
          v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
          v91.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v31;
          v30->__r_.__value_.__l.__size_ = 0;
          v30->__r_.__value_.__r.__words[2] = 0;
          v30->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v86, v23->tm_mday);
          if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v32 = &v86;
          else
            v32 = (std::string *)v86.__r_.__value_.__r.__words[0];
          if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v33 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
          else
            v33 = v86.__r_.__value_.__l.__size_;
          v34 = std::string::append(&v91, (const std::string::value_type *)v32, v33);
          v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
          v92.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v35;
          v34->__r_.__value_.__l.__size_ = 0;
          v34->__r_.__value_.__r.__words[2] = 0;
          v34->__r_.__value_.__r.__words[0] = 0;
          v36 = std::string::append(&v92, "_", 1uLL);
          v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
          v93.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v37;
          v36->__r_.__value_.__l.__size_ = 0;
          v36->__r_.__value_.__r.__words[2] = 0;
          v36->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v85, v23->tm_hour);
          if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v38 = &v85;
          else
            v38 = (std::string *)v85.__r_.__value_.__r.__words[0];
          if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v39 = HIBYTE(v85.__r_.__value_.__r.__words[2]);
          else
            v39 = v85.__r_.__value_.__l.__size_;
          v40 = std::string::append(&v93, (const std::string::value_type *)v38, v39);
          v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
          v94.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v41;
          v40->__r_.__value_.__l.__size_ = 0;
          v40->__r_.__value_.__r.__words[2] = 0;
          v40->__r_.__value_.__r.__words[0] = 0;
          v42 = std::string::append(&v94, ".", 1uLL);
          v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
          v95.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v43;
          v42->__r_.__value_.__l.__size_ = 0;
          v42->__r_.__value_.__r.__words[2] = 0;
          v42->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v84, v23->tm_min);
          if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v44 = &v84;
          else
            v44 = (std::string *)v84.__r_.__value_.__r.__words[0];
          if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v45 = HIBYTE(v84.__r_.__value_.__r.__words[2]);
          else
            v45 = v84.__r_.__value_.__l.__size_;
          v46 = std::string::append(&v95, (const std::string::value_type *)v44, v45);
          v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
          v96.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v47;
          v46->__r_.__value_.__l.__size_ = 0;
          v46->__r_.__value_.__r.__words[2] = 0;
          v46->__r_.__value_.__r.__words[0] = 0;
          v48 = std::string::append(&v96, ".", 1uLL);
          v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
          v100.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v49;
          v48->__r_.__value_.__l.__size_ = 0;
          v48->__r_.__value_.__r.__words[2] = 0;
          v48->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v83, v23->tm_sec);
          if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v50 = &v83;
          else
            v50 = (std::string *)v83.__r_.__value_.__r.__words[0];
          if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v51 = HIBYTE(v83.__r_.__value_.__r.__words[2]);
          else
            v51 = v83.__r_.__value_.__l.__size_;
          v52 = std::string::append(&v100, (const std::string::value_type *)v50, v51);
          v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
          v97.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v53;
          v52->__r_.__value_.__l.__size_ = 0;
          v52->__r_.__value_.__r.__words[2] = 0;
          v52->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v83.__r_.__value_.__l.__data_);
          if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v100.__r_.__value_.__l.__data_);
          if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v96.__r_.__value_.__l.__data_);
          if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v84.__r_.__value_.__l.__data_);
          if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v95.__r_.__value_.__l.__data_);
          if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v94.__r_.__value_.__l.__data_);
          if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v85.__r_.__value_.__l.__data_);
          if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v93.__r_.__value_.__l.__data_);
          if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v92.__r_.__value_.__l.__data_);
          if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v86.__r_.__value_.__l.__data_);
          if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v91.__r_.__value_.__l.__data_);
          if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v90.__r_.__value_.__l.__data_);
          if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v87.__r_.__value_.__l.__data_);
          if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v89.__r_.__value_.__l.__data_);
          if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v88.__r_.__value_.__l.__data_);
          OS::CF::String::AsStdString(&v100, v3 + 528);
          v54 = &v100;
          if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v54 = (std::string *)v100.__r_.__value_.__r.__words[0];
          v55 = &v97;
          if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v55 = (std::string *)v97.__r_.__value_.__r.__words[0];
          v56 = CFStringCreateWithFormat(alloc, 0, CFSTR("%s/Out_Stream_%d(%s).caf"), v54, v19, v55);
          if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v100.__r_.__value_.__l.__data_);
          v57 = CFURLCreateWithFileSystemPath(0, v56, kCFURLPOSIXPathStyle, 0);
          CFRelease(v56);
          v58 = ExtAudioFileCreateWithURL(v57, 0x63616666u, &buf, 0, 1u, &outExtAudioFile);
          if (v58)
            break;
          CFRelease(v57);
          v58 = ExtAudioFileSetProperty(outExtAudioFile, 0x63666D74u, 0x28u, &buf);
          if (v58)
          {
            if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              goto LABEL_122;
            LODWORD(v100.__r_.__value_.__l.__data_) = 136315394;
            *(std::string::size_type *)((char *)v100.__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADS_Device.cpp";
            WORD2(v100.__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&v100.__r_.__value_.__r.__words[1] + 6) = 1259;
            v73 = MEMORY[0x1E0C81028];
            v74 = "%25s:%-5d  ADS::Device::prepareAudioFile: Could not set the properties for the destination audio file";
LABEL_121:
            _os_log_impl(&dword_1B57BA000, v73, OS_LOG_TYPE_ERROR, v74, (uint8_t *)&v100, 0x12u);
            goto LABEL_122;
          }
          v58 = ExtAudioFileWriteAsync(outExtAudioFile, 0, 0);
          if (v58)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              LODWORD(v100.__r_.__value_.__l.__data_) = 136315394;
              *(std::string::size_type *)((char *)v100.__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADS_Device.cpp";
              WORD2(v100.__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&v100.__r_.__value_.__r.__words[1] + 6) = 1263;
              v73 = MEMORY[0x1E0C81028];
              v74 = "%25s:%-5d  ADS::Device::prepareAudioFile: Could not prime the async writing mechanism.";
              goto LABEL_121;
            }
LABEL_122:
            v75 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v75 = &off_1E69A1B30;
            v75[2] = v58;
          }
          v60 = *(ExtAudioFileRef **)(v3 + 512);
          v61 = *(_QWORD *)(v3 + 520);
          if ((unint64_t)v60 >= v61)
          {
            v63 = *(_QWORD *)(v3 + 504);
            v64 = ((uint64_t)v60 - v63) >> 3;
            if ((unint64_t)(v64 + 1) >> 61)
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            v65 = v61 - v63;
            v66 = v65 >> 2;
            if (v65 >> 2 <= (unint64_t)(v64 + 1))
              v66 = v64 + 1;
            if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF8)
              v67 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v67 = v66;
            if (v67)
            {
              if (v67 >> 61)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v68 = (char *)operator new(8 * v67);
            }
            else
            {
              v68 = 0;
            }
            v69 = (ExtAudioFileRef *)&v68[8 * v64];
            *v69 = outExtAudioFile;
            v62 = v69 + 1;
            v71 = *(char **)(v3 + 504);
            v70 = *(char **)(v3 + 512);
            if (v70 != v71)
            {
              do
              {
                v72 = (OpaqueExtAudioFile *)*((_QWORD *)v70 - 1);
                v70 -= 8;
                *--v69 = v72;
              }
              while (v70 != v71);
              v70 = *(char **)(v3 + 504);
            }
            *(_QWORD *)(v3 + 504) = v69;
            *(_QWORD *)(v3 + 512) = v62;
            *(_QWORD *)(v3 + 520) = &v68[8 * v67];
            if (v70)
              operator delete(v70);
          }
          else
          {
            *v60 = outExtAudioFile;
            v62 = v60 + 1;
          }
          *(_QWORD *)(v3 + 512) = v62;
          if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v97.__r_.__value_.__l.__data_);
          ADS::ObjectManager::ReleaseObject((ADS::ObjectManager *)v21, v59);
          if (v20)
            (*(void (**)(uint64_t))(*(_QWORD *)v18 + 24))(v3 + 208);
          if (++v16 == v17)
            goto LABEL_13;
        }
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          goto LABEL_122;
        LODWORD(v100.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)v100.__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADS_Device.cpp";
        WORD2(v100.__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&v100.__r_.__value_.__r.__words[1] + 6) = 1254;
        v73 = MEMORY[0x1E0C81028];
        v74 = "%25s:%-5d  ADS::Device::prepareAudioFile: Call to ExtAudioFileCreateWithURL failed";
        goto LABEL_121;
      }
    }
  }
LABEL_13:
  if (v81)
    (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 120) + 24))(v3 + 120);
  ADS::ObjectManager::ReleaseObject((ADS::ObjectManager *)v3, v5);
  return 0;
}

void sub_1B57DD5A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1B57DD600(void *a1, ADS::BaseObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  void *a65;
  char a70;
  void *a71;
  char a72;
  void *a73;
  char a74;
  void *a75;
  char a76;
  void *a77;
  char a78;
  ADS::ObjectManager *v78;
  uint64_t v79;
  int v80;
  ADS::ObjectManager *v81;
  uint64_t v82;
  ADS::BaseObject *v84;

  if ((_DWORD)a2)
  {
    if (*(char *)(v82 - 233) < 0)
      operator delete(*(void **)(v82 - 256));
    if (a26 < 0)
      operator delete(__p);
    if (a78 < 0)
      operator delete(a77);
    if (a76 < 0)
      operator delete(a75);
    if (a32 < 0)
      operator delete(a27);
    if (a74 < 0)
      operator delete(a73);
    if (a72 < 0)
      operator delete(a71);
    if (a38 < 0)
      operator delete(a33);
    if (a70 < 0)
      operator delete(a65);
    if (a63 < 0)
      operator delete(a58);
    if (a44 < 0)
      operator delete(a39);
    if (a56 < 0)
      operator delete(a51);
    if (a50 < 0)
      operator delete(a45);
    ADS::ObjectManager::ReleaseObject(v81, a2);
    if (v80)
      (*(void (**)(uint64_t))(*(_QWORD *)v79 + 24))(v79);
    if (a15)
      (*(void (**)(uint64_t))(*(_QWORD *)a13 + 24))(a13);
    ADS::ObjectManager::ReleaseObject(v78, v84);
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B57DCB28);
  }
  JUMPOUT(0x1B57DD5F0);
}

void sub_1B57DD8E8()
{
  JUMPOUT(0x1B57DD5F0);
}

uint64_t Simulator_StopIO(_UNKNOWN **a1, ADS::ObjectManager *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  ADS::BaseObject *v6;
  int v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  ExtAudioFileRef *v12;
  ExtAudioFileRef *v13;
  OSStatus v14;
  char v15;
  _DWORD *v17;
  _DWORD *exception;
  _DWORD *v19;
  int v20;
  _DWORD *v21;
  int v22;
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (a1 != &gAudioServerPlugInDriverInterfacePtr)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v22 = 136315394;
      v23 = "ADS_Simulator.cpp";
      v24 = 1024;
      v25 = 1545;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_StopIO: bad driver reference", (uint8_t *)&v22, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 560947818;
  }
  v2 = ADS::ObjectManager::CopyObjectByObjectID(this);
  v3 = v2;
  if (!v2)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v22 = 136315394;
      v23 = "ADS_Simulator.cpp";
      v24 = 1024;
      v25 = 1549;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_StopIO: unknown device", (uint8_t *)&v22, 0x12u);
    }
    v19 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v19 = &off_1E69A1B30;
    v19[2] = 560947818;
  }
  v4 = v2 + 120;
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 + 120) + 16))(v2 + 120);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 208) + 16))(v3 + 208);
  v8 = atomic_load((unsigned __int8 *)(v3 + 436));
  if ((v8 & 1) != 0)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v22 = 136315394;
      v23 = "ADS_Device.cpp";
      v24 = 1024;
      v25 = 1334;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::StopIO: config change is in progress, cannot start IO", (uint8_t *)&v22, 0x12u);
    }
    v20 = 1852990585;
LABEL_35:
    v21 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v21 = &off_1E69A1B30;
    v21[2] = v20;
  }
  v9 = *(_QWORD *)(v3 + 440);
  if (!v9)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v22 = 136315394;
      v23 = "ADS_Device.cpp";
      v24 = 1024;
      v25 = 1336;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::StopIO: failed to stop because IO was not running", (uint8_t *)&v22, 0x12u);
    }
    v20 = 1852797029;
    goto LABEL_35;
  }
  v10 = v9 - 1;
  *(_QWORD *)(v3 + 440) = v10;
  if (!v10)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      v11 = *(_DWORD *)(v3 + 8);
      v22 = 136315650;
      v23 = "ADS_Device.cpp";
      v24 = 1024;
      v25 = 1340;
      v26 = 1024;
      v27 = v11;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  Device %d stopping IO.\n", (uint8_t *)&v22, 0x18u);
    }
    v12 = *(ExtAudioFileRef **)(v3 + 504);
    v13 = *(ExtAudioFileRef **)(v3 + 512);
    if (v12 != v13)
    {
      do
      {
        v14 = ExtAudioFileDispose(*v12);
        if (v14)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            v22 = 136315394;
            v23 = "ADS_Device.cpp";
            v24 = 1024;
            v25 = 1344;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::StopIO: could not dispose of given ExtAudioFileRef", (uint8_t *)&v22, 0x12u);
          }
          v17 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v17 = &off_1E69A1B30;
          v17[2] = v14;
        }
        ++v12;
      }
      while (v12 != v13);
      v12 = *(ExtAudioFileRef **)(v3 + 504);
    }
    *(_QWORD *)(v3 + 512) = v12;
  }
  v15 = atomic_load((unsigned int *)(v3 + 744));
  if (v15 < 0)
    usleep(0x2625A0u);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 208) + 24))(v3 + 208);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v3 + 120);
  ADS::ObjectManager::ReleaseObject((ADS::ObjectManager *)v3, v6);
  return 0;
}

void sub_1B57DDD8C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1B57DDDAC(void *a1, ADS::BaseObject *a2)
{
  ADS::ObjectManager *v2;
  uint64_t v3;
  int v4;

  if ((_DWORD)a2)
  {
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
    ADS::ObjectManager::ReleaseObject(v2, a2);
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B57DDA78);
  }
  JUMPOUT(0x1B57DDD9CLL);
}

void sub_1B57DDE58()
{
  JUMPOUT(0x1B57DDD9CLL);
}

uint64_t Simulator_GetZeroTimeStamp(_UNKNOWN **a1, ADS::ObjectManager *this, uint64_t a3, double *a4, _QWORD *a5, _QWORD *a6)
{
  uint64_t v9;
  ADS::BaseObject *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  uint64_t v24;
  unsigned int *v25;
  char v26;
  unsigned int v27;
  __int16 v28;
  unsigned int v29;
  int v31;
  NSObject *v32;
  const char *v33;
  _DWORD *exception;
  _DWORD *v35;
  int v36;
  const char *v37;
  __int16 v38;
  int v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if (a1 != &gAudioServerPlugInDriverInterfacePtr)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v36 = 136315394;
      v37 = "ADS_Simulator.cpp";
      v38 = 1024;
      v39 = 1582;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_GetZeroTimeStamp: bad driver reference", (uint8_t *)&v36, 0x12u);
    }
    v31 = 560947818;
LABEL_33:
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = v31;
  }
  if (!a4)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_32;
    v36 = 136315394;
    v37 = "ADS_Simulator.cpp";
    v38 = 1024;
    v39 = 1583;
    v32 = MEMORY[0x1E0C81028];
    v33 = "%25s:%-5d  Simulator_GetZeroTimeStamp: no place to put the sample time";
LABEL_31:
    _os_log_impl(&dword_1B57BA000, v32, OS_LOG_TYPE_ERROR, v33, (uint8_t *)&v36, 0x12u);
    goto LABEL_32;
  }
  if (!a5)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_32;
    v36 = 136315394;
    v37 = "ADS_Simulator.cpp";
    v38 = 1024;
    v39 = 1584;
    v32 = MEMORY[0x1E0C81028];
    v33 = "%25s:%-5d  Simulator_GetZeroTimeStamp: no place to put the host time";
    goto LABEL_31;
  }
  if (!a6)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v36 = 136315394;
      v37 = "ADS_Simulator.cpp";
      v38 = 1024;
      v39 = 1585;
      v32 = MEMORY[0x1E0C81028];
      v33 = "%25s:%-5d  Simulator_GetZeroTimeStamp: no place to put the seed";
      goto LABEL_31;
    }
LABEL_32:
    v31 = 1852797029;
    goto LABEL_33;
  }
  v9 = ADS::ObjectManager::CopyObjectByObjectID(this);
  v11 = v9;
  if (!v9)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v36 = 136315394;
      v37 = "ADS_Simulator.cpp";
      v38 = 1024;
      v39 = 1589;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_GetZeroTimeStamp: unknown device", (uint8_t *)&v36, 0x12u);
    }
    v35 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v35 = &off_1E69A1B30;
    v35[2] = 560947818;
  }
  v12 = atomic_load((unsigned int *)(v9 + 744));
  if ((v12 & 4) != 0)
  {
    *(_OWORD *)(v9 + 664) = 0u;
    *a4 = 0.0;
    *a5 = 0;
    *(_QWORD *)(v9 + 680) = 0;
    *a6 = 0;
    *(_QWORD *)(v9 + 456) = 0;
  }
  else
  {
    v13 = v9 + 208;
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v9 + 208) + 16))(v9 + 208);
    v15 = mach_absolute_time();
    v16 = *(unsigned int *)(v11 + 652);
    v17 = *(double *)(v11 + 472) * (double)v16;
    v18 = *(_QWORD *)(v11 + 448);
    v19 = *(_QWORD *)(v11 + 464);
    if (v19 + (unint64_t)(v17 * (double)(v18 + 1)) <= v15)
    {
      v20 = *(_QWORD *)(v11 + 456) + 1;
      *(_QWORD *)(v11 + 448) = v18 + 1;
      *(_QWORD *)(v11 + 456) = v20;
      ++v18;
    }
    else
    {
      v20 = *(_QWORD *)(v11 + 456);
    }
    v21 = (double)(unint64_t)(v20 * v16);
    *(double *)(v11 + 664) = v21;
    *a4 = v21;
    if (*(_DWORD *)(v11 + 616))
    {
      LODWORD(v21) = *(_DWORD *)(v11 + 620);
      v22 = (double)*(unint64_t *)&v21;
    }
    else
    {
      v22 = 0.0;
    }
    v23 = v22 + *(double *)(v11 + 664);
    *(double *)(v11 + 664) = v23;
    *a4 = v23;
    v24 = v19 + (unint64_t)(v17 * (double)v18);
    *(_QWORD *)(v11 + 672) = v24;
    *a5 = v24;
    *a6 = *(_QWORD *)(v11 + 680);
    if (*(_QWORD *)(v11 + 448) == 2)
    {
      v25 = (unsigned int *)(v11 + 744);
      v26 = atomic_load((unsigned int *)(v11 + 744));
      if ((v26 & 8) != 0)
      {
        *(_QWORD *)(v11 + 456) = 0;
        *a4 = 0.0;
        v27 = atomic_load(v25);
        atomic_store(v27 & 0xFFFFFFF7, v25);
      }
      v28 = atomic_load(v25);
      if ((v28 & 0x800) != 0)
      {
        *(_QWORD *)(v11 + 680) = 1;
        *a6 = 1;
        v29 = atomic_load((unsigned int *)(v11 + 744));
        atomic_store(v29 & 0xFFFFF7FF, (unsigned int *)(v11 + 744));
      }
    }
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v11 + 208);
  }
  ADS::ObjectManager::ReleaseObject((ADS::ObjectManager *)v11, v10);
  return 0;
}

void sub_1B57DE2B0(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1B57DE2F8(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1B57DE304);
  JUMPOUT(0x1B57DE2E4);
}

void sub_1B57DE314(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1B57DE320);
  JUMPOUT(0x1B57DE2E4);
}

void sub_1B57DE348()
{
  JUMPOUT(0x1B57DE2E4);
}

uint64_t Simulator_WillDoIOOperation(_UNKNOWN **a1, ADS::ObjectManager *this, uint64_t a3, int a4, BOOL *a5, _BYTE *a6)
{
  ADS::ObjectManager *v9;
  ADS::BaseObject *v10;
  BOOL v11;
  int v13;
  NSObject *v14;
  const char *v15;
  _DWORD *exception;
  _DWORD *v17;
  int v18;
  const char *v19;
  __int16 v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (a1 != &gAudioServerPlugInDriverInterfacePtr)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v18 = 136315394;
      v19 = "ADS_Simulator.cpp";
      v20 = 1024;
      v21 = 1618;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_WillDoIOOperation: bad driver reference", (uint8_t *)&v18, 0x12u);
    }
    v13 = 560947818;
LABEL_19:
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = v13;
  }
  if (!a5)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v18 = 136315394;
      v19 = "ADS_Simulator.cpp";
      v20 = 1024;
      v21 = 1619;
      v14 = MEMORY[0x1E0C81028];
      v15 = "%25s:%-5d  Simulator_WillDoIOOperation: no place to put the will-do return value";
LABEL_17:
      _os_log_impl(&dword_1B57BA000, v14, OS_LOG_TYPE_ERROR, v15, (uint8_t *)&v18, 0x12u);
    }
LABEL_18:
    v13 = 1852797029;
    goto LABEL_19;
  }
  if (!a6)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v18 = 136315394;
      v19 = "ADS_Simulator.cpp";
      v20 = 1024;
      v21 = 1620;
      v14 = MEMORY[0x1E0C81028];
      v15 = "%25s:%-5d  Simulator_WillDoIOOperation: no place to put the in-place return value";
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  v9 = (ADS::ObjectManager *)ADS::ObjectManager::CopyObjectByObjectID(this);
  if (!v9)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v18 = 136315394;
      v19 = "ADS_Simulator.cpp";
      v20 = 1024;
      v21 = 1624;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_WillDoIOOperation: unknown device", (uint8_t *)&v18, 0x12u);
    }
    v17 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v17 = &off_1E69A1B30;
    v17[2] = 560947818;
  }
  if (a4 == 1919246692)
  {
    v11 = 1;
  }
  else
  {
    v11 = 1;
    if (a4 != 1919513701)
      v11 = *((_QWORD *)v9 + 70) != 0;
  }
  *a5 = v11;
  *a6 = 1;
  ADS::ObjectManager::ReleaseObject(v9, v10);
  return 0;
}

void sub_1B57DE624(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1B57DE63C(void *a1, ADS::BaseObject *a2)
{
  if ((_DWORD)a2)
  {
    ADS::ObjectManager::ReleaseObject(0, a2);
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B57DE3F0);
  }
  JUMPOUT(0x1B57DE62CLL);
}

void sub_1B57DE69C()
{
  JUMPOUT(0x1B57DE62CLL);
}

uint64_t Simulator_BeginIOOperation(_UNKNOWN **a1, ADS::ObjectManager *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  ADS::ObjectManager *v6;
  ADS::BaseObject *v7;
  int v9;
  _DWORD *exception;
  _DWORD *v11;
  int v12;
  const char *v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1 != &gAudioServerPlugInDriverInterfacePtr)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v12 = 136315394;
      v13 = "ADS_Simulator.cpp";
      v14 = 1024;
      v15 = 1659;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_BeginIOOperation: bad driver reference", (uint8_t *)&v12, 0x12u);
    }
    v9 = 560947818;
LABEL_11:
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = v9;
  }
  if (!a6)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v12 = 136315394;
      v13 = "ADS_Simulator.cpp";
      v14 = 1024;
      v15 = 1660;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_BeginIOOperation: no cycle info", (uint8_t *)&v12, 0x12u);
    }
    v9 = 1852797029;
    goto LABEL_11;
  }
  v6 = (ADS::ObjectManager *)ADS::ObjectManager::CopyObjectByObjectID(this);
  if (!v6)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v12 = 136315394;
      v13 = "ADS_Simulator.cpp";
      v14 = 1024;
      v15 = 1664;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_BeginIOOperation: unknown device", (uint8_t *)&v12, 0x12u);
    }
    v11 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v11 = &off_1E69A1B30;
    v11[2] = 560947818;
  }
  ADS::ObjectManager::ReleaseObject(v6, v7);
  return 0;
}

void sub_1B57DE8C4(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1B57DE8DC(void *a1, ADS::BaseObject *a2)
{
  if ((_DWORD)a2)
  {
    ADS::ObjectManager::ReleaseObject(0, a2);
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B57DE6ECLL);
  }
  JUMPOUT(0x1B57DE8CCLL);
}

void sub_1B57DE93C()
{
  JUMPOUT(0x1B57DE8CCLL);
}

uint64_t Simulator_DoIOOperation(_UNKNOWN **a1, ADS::ObjectManager *this, unsigned int a3, int a4, unsigned int a5, uint64_t a6, ADS::ObjectManager *a7, void *a8, uint64_t a9)
{
  unsigned int *v13;
  ADS::BaseObject *v14;
  unsigned int *v15;
  char v16;
  double v17;
  uint64_t v18;
  double v19;
  unsigned int v20;
  AMCP::Log::Scope_Registry *v21;
  double v22;
  caulk::concurrent::messenger *v23;
  _opaque_pthread_t *v24;
  mach_port_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  const __CFString *v30;
  uint64_t v31;
  const __CFString *v32;
  AMCP::Log::Scope_Registry *v33;
  uint64_t v34;
  char v35;
  double v36;
  uint64_t v37;
  double v38;
  unsigned int v39;
  double v40;
  caulk::concurrent::messenger *v41;
  _opaque_pthread_t *v42;
  mach_port_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  __int16 v48;
  OpaqueExtAudioFile **v49;
  OpaqueExtAudioFile **i;
  OpaqueExtAudioFile *v51;
  OSStatus Property;
  OSStatus v53;
  std::__shared_weak_count *v54;
  NSObject *v55;
  unint64_t *v56;
  unint64_t v57;
  _opaque_pthread_t *v58;
  mach_port_t v59;
  double v60;
  ADS::ObjectManager *v61;
  ADS::BaseObject *v62;
  int v63;
  int v64;
  uint64_t v65;
  unsigned int v66;
  int v67;
  int v68;
  unsigned int v69;
  uint64_t v70;
  unsigned int *v71;
  int v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  unsigned int *v76;
  ExtAudioFileRef *v77;
  const __CFString *v78;
  int v79;
  const char *v80;
  const char *v81;
  CFIndex v82;
  const __CFURL *v83;
  const __CFURL *v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  ADS::BaseObject *v91;
  std::__shared_weak_count *v92;
  NSObject *v93;
  unint64_t *v94;
  unint64_t v95;
  _opaque_pthread_t *v96;
  mach_port_t v97;
  AudioBufferList *v98;
  std::__shared_weak_count *v99;
  NSObject *v100;
  unint64_t *v101;
  unint64_t v102;
  _opaque_pthread_t *v103;
  mach_port_t v104;
  AudioBufferList *v105;
  unsigned int v106;
  int v107;
  double v108;
  unsigned int v109;
  uint64_t v110;
  unsigned int v111;
  int v112;
  int v113;
  unsigned int v114;
  uint64_t v115;
  unsigned int v116;
  unsigned int v117;
  float v118;
  float v119;
  float v120;
  unsigned int v121;
  uint64_t v122;
  unsigned int v123;
  int v124;
  unsigned int v125;
  uint64_t v126;
  unsigned int v127;
  int v128;
  unsigned int v129;
  uint64_t v130;
  void (*v131)(_QWORD, _QWORD, uint64_t, ADS::ObjectManager *, void *, uint64_t);
  _DWORD *v133;
  _DWORD *v134;
  int v135;
  _DWORD *exception;
  _DWORD *v137;
  std::runtime_error *v138;
  _DWORD *v139;
  std::runtime_error *v140;
  CAXException *v141;
  NSObject *v142;
  const char *v143;
  _DWORD *v144;
  uint64_t v145;
  int v146;
  ExtAudioFileRef *outExtAudioFile;
  int v148;
  ADS::ObjectManager *v149;
  int v150;
  ADS::ObjectManager *v151;
  int v152;
  unsigned int v153;
  ADS::ObjectManager *v155;
  _BYTE __p[12];
  __int16 v157;
  int v158;
  char v159;
  UInt32 ioPropertyDataSize[2];
  AudioBufferList ioData;
  _BYTE outPropertyData[40];
  uint64_t v163;

  v163 = *MEMORY[0x1E0C80C00];
  if (a1 != &gAudioServerPlugInDriverInterfacePtr)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)outPropertyData = 136315394;
      *(_QWORD *)&outPropertyData[4] = "ADS_Simulator.cpp";
      *(_WORD *)&outPropertyData[12] = 1024;
      *(_DWORD *)&outPropertyData[14] = 1788;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_DoIOOperation: bad driver reference", outPropertyData, 0x12u);
    }
    v135 = 560947818;
LABEL_159:
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = v135;
  }
  if (!a7)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)outPropertyData = 136315394;
      *(_QWORD *)&outPropertyData[4] = "ADS_Simulator.cpp";
      *(_WORD *)&outPropertyData[12] = 1024;
      *(_DWORD *)&outPropertyData[14] = 1789;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_DoIOOperation: no cycle info", outPropertyData, 0x12u);
    }
    v135 = 1852797029;
    goto LABEL_159;
  }
  v13 = (unsigned int *)ADS::ObjectManager::CopyObjectByObjectID(this);
  v15 = v13;
  if (!v13)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)outPropertyData = 136315394;
      *(_QWORD *)&outPropertyData[4] = "ADS_Simulator.cpp";
      *(_WORD *)&outPropertyData[12] = 1024;
      *(_DWORD *)&outPropertyData[14] = 1793;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_EndIOOperation: unknown device", outPropertyData, 0x12u);
    }
    v137 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v137 = &off_1E69A1B30;
    v137[2] = 560947818;
  }
  v155 = a7;
  v153 = a5;
  if (a5 == 1919513701)
  {
    v35 = atomic_load(v13 + 186);
    if ((v35 & 0x10) != 0)
    {
      *(_QWORD *)&ioData.mNumberBuffers = 0;
      *(_QWORD *)__p = 0;
      *(_QWORD *)ioPropertyDataSize = 0;
      ADS::Device::getCurrentZTS((ADS::Device *)v13, (double *)&ioData.mNumberBuffers, (unint64_t *)__p, (unint64_t *)ioPropertyDataSize);
      v36 = *(double *)&ioData.mNumberBuffers;
      v37 = *(_QWORD *)__p;
      v38 = *((double *)v15 + 59);
      v39 = v15[164];
      v13 = (unsigned int *)mach_absolute_time();
      v40 = *((double *)v155 + 18) - (floor(1.0 / v38 * (double)((unint64_t)v13 - v37)) + v36 + (double)v39);
      if (v40 < 0.0)
      {
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v13);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)outPropertyData, "com.apple.coreaudio", "AMCP");
        v41 = *(caulk::concurrent::messenger **)(*(_QWORD *)outPropertyData + 8);
        v42 = pthread_self();
        v43 = pthread_mach_thread_np(v42);
        v44 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 56, 8);
        *(_DWORD *)(v44 + 16) = 0;
        *(_BYTE *)(v44 + 20) = 16;
        *(_DWORD *)(v44 + 24) = v43;
        *(_QWORD *)(v44 + 32) = "ADS_Device.cpp";
        *(_DWORD *)(v44 + 40) = 3395;
        *(double *)(v44 + 48) = v40;
        *(_QWORD *)v44 = &off_1E6977888;
        *(_QWORD *)(v44 + 8) = 0;
        v13 = (unsigned int *)caulk::concurrent::messenger::enqueue(v41, (caulk::concurrent::message *)v44);
        v45 = *(std::__shared_weak_count **)&outPropertyData[8];
        if (*(_QWORD *)&outPropertyData[8])
        {
          v46 = (unint64_t *)(*(_QWORD *)&outPropertyData[8] + 8);
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
        }
        v15[172] = 1;
      }
    }
    if (!*((_QWORD *)v15 + 55))
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v13);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)outPropertyData, "com.apple.coreaudio", "AMCP");
      v54 = *(std::__shared_weak_count **)&outPropertyData[8];
      v55 = **(NSObject ***)outPropertyData;
      if (*(_QWORD *)&outPropertyData[8])
      {
        v56 = (unint64_t *)(*(_QWORD *)&outPropertyData[8] + 8);
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
      {
        v58 = pthread_self();
        v59 = pthread_mach_thread_np(v58);
        *(_DWORD *)outPropertyData = 67109634;
        *(_DWORD *)&outPropertyData[4] = v59;
        *(_WORD *)&outPropertyData[8] = 2080;
        *(_QWORD *)&outPropertyData[10] = "ADS_Device.cpp";
        *(_WORD *)&outPropertyData[18] = 1024;
        *(_DWORD *)&outPropertyData[20] = 1708;
        _os_log_error_impl(&dword_1B57BA000, v55, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d ADS::Device::WriteOutputData - mStartCount is 0 - this means the device thinks it should not be running!!!", outPropertyData, 0x18u);
      }
      goto LABEL_144;
    }
    v48 = atomic_load(v15 + 186);
    if ((v48 & 0x200) != 0)
      usleep(((double)a6 / *((double *)v15 + 79) / 3.0 * 1000.0 * 1000.0));
    if (!*((_BYTE *)v15 + 544))
      goto LABEL_144;
    v150 = (*(uint64_t (**)(unsigned int *))(*((_QWORD *)v15 + 26) + 16))(v15 + 52);
    v49 = (OpaqueExtAudioFile **)*((_QWORD *)v15 + 63);
    for (i = (OpaqueExtAudioFile **)*((_QWORD *)v15 + 64); v49 != i; ++v49)
    {
      v51 = *v49;
      ioPropertyDataSize[0] = 40;
      Property = ExtAudioFileGetProperty(v51, 0x66666D74u, ioPropertyDataSize, outPropertyData);
      if (Property)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          ioData.mNumberBuffers = 136315394;
          *(_QWORD *)(&ioData.mNumberBuffers + 1) = "ADS_Device.cpp";
          LOWORD(ioData.mBuffers[0].mDataByteSize) = 1024;
          *(UInt32 *)((char *)&ioData.mBuffers[0].mDataByteSize + 2) = 1728;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::WriteOutputData: could not get the file format for the given audio file", (uint8_t *)&ioData, 0x12u);
        }
        v134 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v134 = &off_1E69A1B30;
        v134[2] = Property;
      }
      ioData.mNumberBuffers = 1;
      ioData.mBuffers[0].mNumberChannels = *(_DWORD *)&outPropertyData[28];
      ioData.mBuffers[0].mDataByteSize = *(_DWORD *)&outPropertyData[24] * a6;
      ioData.mBuffers[0].mData = a8;
      v53 = ExtAudioFileWriteAsync(v51, a6, &ioData);
      if (v53)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__p = 136315394;
          *(_QWORD *)&__p[4] = "ADS_Device.cpp";
          v157 = 1024;
          v158 = 1742;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::WriteOutputData: could not write audio buffer to file", __p, 0x12u);
        }
        v133 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v133 = &off_1E69A1B30;
        v133[2] = v53;
      }
    }
    if (!v150)
      goto LABEL_144;
LABEL_143:
    (*(void (**)(unsigned int *))(*((_QWORD *)v15 + 26) + 24))(v15 + 52);
    goto LABEL_144;
  }
  if (a5 != 1919246692)
    goto LABEL_144;
  v16 = atomic_load(v13 + 186);
  if ((v16 & 0x20) != 0)
  {
    *(_QWORD *)&ioData.mNumberBuffers = 0;
    *(_QWORD *)__p = 0;
    *(_QWORD *)ioPropertyDataSize = 0;
    ADS::Device::getCurrentZTS((ADS::Device *)v13, (double *)&ioData.mNumberBuffers, (unint64_t *)__p, (unint64_t *)ioPropertyDataSize);
    v17 = *(double *)&ioData.mNumberBuffers;
    v18 = *(_QWORD *)__p;
    v19 = *((double *)v15 + 59);
    v20 = v15[164];
    v21 = (AMCP::Log::Scope_Registry *)mach_absolute_time();
    v22 = floor(1.0 / v19 * (double)((unint64_t)v21 - v18))
        + v17
        - (double)v20
        - (*((double *)v155 + 10)
         + (double)a6);
    if (v22 < 0.0)
    {
      AMCP::Log::Scope_Registry::get(v21);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)outPropertyData, "com.apple.coreaudio", "AMCP");
      v23 = *(caulk::concurrent::messenger **)(*(_QWORD *)outPropertyData + 8);
      v24 = pthread_self();
      v25 = pthread_mach_thread_np(v24);
      v26 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 56, 8);
      *(_DWORD *)(v26 + 16) = 0;
      *(_BYTE *)(v26 + 20) = 16;
      *(_DWORD *)(v26 + 24) = v25;
      *(_QWORD *)(v26 + 32) = "ADS_Device.cpp";
      *(_DWORD *)(v26 + 40) = 3414;
      *(double *)(v26 + 48) = v22;
      *(_QWORD *)v26 = &off_1E69778E0;
      *(_QWORD *)(v26 + 8) = 0;
      caulk::concurrent::messenger::enqueue(v23, (caulk::concurrent::message *)v26);
      v27 = *(std::__shared_weak_count **)&outPropertyData[8];
      if (*(_QWORD *)&outPropertyData[8])
      {
        v28 = (unint64_t *)(*(_QWORD *)&outPropertyData[8] + 8);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      v15[173] = 1;
    }
  }
  v30 = (const __CFString *)*((_QWORD *)v15 + 74);
  if (!v30)
  {
LABEL_163:
    v138 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v138, "Could not construct");
    __cxa_throw(v138, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::convert_to<std::string,0>((uint64_t)outPropertyData, v30);
  if (outPropertyData[23] >= 0)
    v31 = outPropertyData[23];
  else
    v31 = *(_QWORD *)&outPropertyData[8];
  if ((outPropertyData[23] & 0x80000000) == 0)
  {
    if (v31)
      goto LABEL_20;
LABEL_53:
    v60 = *((double *)v155 + 10);
    v148 = (*(uint64_t (**)(unsigned int *))(*((_QWORD *)v15 + 26) + 16))(v15 + 52);
    v61 = (ADS::ObjectManager *)ADS::ObjectManager::CopyObjectByObjectID((ADS::ObjectManager *)a3);
    v151 = v61;
    if (!v61)
      goto LABEL_142;
    if (*((_QWORD *)v15 + 55))
    {
      v63 = *((_DWORD *)v61 + 17);
      v65 = *((unsigned int *)v61 + 21);
      v64 = *((_DWORD *)v61 + 22);
      bzero(a8, (*((_DWORD *)v61 + 20) * a6));
      if ((v63 & 1) != 0)
      {
        if (v64 == 32)
        {
          if ((_DWORD)a6)
          {
            v116 = 0;
            v117 = 0;
            v118 = v60;
            do
            {
              if ((_DWORD)v65)
              {
                v119 = *((double *)v15 + 79);
                v120 = sin((float)(v118 + (float)v117) * 2764.60154 / v119);
                v121 = v116;
                v122 = v65;
                do
                {
                  *((float *)a8 + v121++) = v120;
                  --v122;
                }
                while (v122);
              }
              ++v117;
              v116 += v65;
            }
            while (v117 != (_DWORD)a6);
          }
        }
        else
        {
          if (v64 != 64)
          {
            if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              goto LABEL_178;
            *(_DWORD *)outPropertyData = 136315394;
            *(_QWORD *)&outPropertyData[4] = "ADS_Device.cpp";
            *(_WORD *)&outPropertyData[12] = 1024;
            *(_DWORD *)&outPropertyData[14] = 1608;
            v142 = MEMORY[0x1E0C81028];
            v143 = "%25s:%-5d  Reading input currently only supports 32- and 64-bit floats";
            goto LABEL_177;
          }
          if ((_DWORD)a6)
          {
            v106 = 0;
            v107 = 0;
            v108 = 0.0;
            do
            {
              if ((_DWORD)v65)
              {
                v109 = v106;
                v110 = v65;
                do
                {
                  *((long double *)a8 + v109++) = sin((v60 + v108) * 2764.60154 / *((double *)v15 + 79));
                  --v110;
                }
                while (v110);
              }
              v108 = v108 + 1.0;
              ++v107;
              v106 += v65;
            }
            while (v107 != (_DWORD)a6);
          }
        }
      }
      else if ((v63 & 4) != 0)
      {
        if (v64 == 8)
        {
          if ((_DWORD)a6)
          {
            v127 = 0;
            v128 = 0;
            do
            {
              if ((_DWORD)v65)
              {
                v129 = v127;
                v130 = v65;
                do
                {
                  *((_BYTE *)a8 + v129++) = (int)sin((double)(v128 + (int)v60)* 2764.60154/ (double)(int)*((double *)v15 + 79));
                  --v130;
                }
                while (v130);
              }
              ++v128;
              v127 += v65;
            }
            while (v128 != (_DWORD)a6);
          }
        }
        else
        {
          if (v64 != 16)
          {
            if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              goto LABEL_178;
            *(_DWORD *)outPropertyData = 136315394;
            *(_QWORD *)&outPropertyData[4] = "ADS_Device.cpp";
            *(_WORD *)&outPropertyData[12] = 1024;
            *(_DWORD *)&outPropertyData[14] = 1623;
            v142 = MEMORY[0x1E0C81028];
            v143 = "%25s:%-5d  Reading input currently only supports 16- and 8-bit SInts";
            goto LABEL_177;
          }
          if ((_DWORD)a6)
          {
            v111 = 0;
            v112 = 0;
            do
            {
              if ((_DWORD)v65)
              {
                v113 = (int)sin((double)(v112 + (int)v60) * 2764.60154 / (double)(int)*((double *)v15 + 79));
                v114 = v111;
                v115 = v65;
                do
                {
                  *((_WORD *)a8 + v114++) = v113;
                  --v115;
                }
                while (v115);
              }
              ++v112;
              v111 += v65;
            }
            while (v112 != (_DWORD)a6);
          }
        }
      }
      else
      {
        if (v64 != 8)
        {
          if (v64 == 16)
          {
            if ((_DWORD)a6)
            {
              v66 = 0;
              v67 = 0;
              do
              {
                if ((_DWORD)v65)
                {
                  v68 = (int)sin((double)(v67 + (int)v60)* 2764.60154/ (double)(int)*((double *)v15 + 79));
                  v69 = v66;
                  v70 = v65;
                  do
                  {
                    *((_WORD *)a8 + v69++) = v68;
                    --v70;
                  }
                  while (v70);
                }
                ++v67;
                v66 += v65;
              }
              while (v67 != (_DWORD)a6);
            }
            goto LABEL_142;
          }
          if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
LABEL_178:
            v144 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v144 = &off_1E69A1B30;
            v144[2] = 560226676;
          }
          *(_DWORD *)outPropertyData = 136315394;
          *(_QWORD *)&outPropertyData[4] = "ADS_Device.cpp";
          *(_WORD *)&outPropertyData[12] = 1024;
          *(_DWORD *)&outPropertyData[14] = 1638;
          v142 = MEMORY[0x1E0C81028];
          v143 = "%25s:%-5d  Reading input currently only supports 16- and 8-bit UInts";
LABEL_177:
          _os_log_impl(&dword_1B57BA000, v142, OS_LOG_TYPE_ERROR, v143, outPropertyData, 0x12u);
          goto LABEL_178;
        }
        if ((_DWORD)a6)
        {
          v123 = 0;
          v124 = 0;
          do
          {
            if ((_DWORD)v65)
            {
              v125 = v123;
              v126 = v65;
              do
              {
                *((_BYTE *)a8 + v125++) = (int)sin((double)(v124 + (int)v60)* 2764.60154/ (double)(int)*((double *)v15 + 79));
                --v126;
              }
              while (v126);
            }
            ++v124;
            v123 += v65;
          }
          while (v124 != (_DWORD)a6);
        }
      }
    }
    else
    {
      AMCP::Log::Scope_Registry::get(v61);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)outPropertyData, "com.apple.coreaudio", "AMCP");
      v99 = *(std::__shared_weak_count **)&outPropertyData[8];
      v100 = **(NSObject ***)outPropertyData;
      if (*(_QWORD *)&outPropertyData[8])
      {
        v101 = (unint64_t *)(*(_QWORD *)&outPropertyData[8] + 8);
        do
          v102 = __ldaxr(v101);
        while (__stlxr(v102 - 1, v101));
        if (!v102)
        {
          ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
          std::__shared_weak_count::__release_weak(v99);
        }
      }
      if (os_log_type_enabled(v100, OS_LOG_TYPE_ERROR))
      {
        v103 = pthread_self();
        v104 = pthread_mach_thread_np(v103);
        OS::CF::String::AsStdString((std::string *)&ioData, (uint64_t)(v15 + 22));
        v105 = SHIBYTE(ioData.mBuffers[0].mData) >= 0 ? &ioData : *(AudioBufferList **)&ioData.mNumberBuffers;
        *(_DWORD *)outPropertyData = 67109890;
        *(_DWORD *)&outPropertyData[4] = v104;
        *(_WORD *)&outPropertyData[8] = 2080;
        *(_QWORD *)&outPropertyData[10] = "ADS_Device.cpp";
        *(_WORD *)&outPropertyData[18] = 1024;
        *(_DWORD *)&outPropertyData[20] = 1590;
        *(_WORD *)&outPropertyData[24] = 2080;
        *(_QWORD *)&outPropertyData[26] = v105;
        _os_log_error_impl(&dword_1B57BA000, v100, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d ADS::Device::ReadInputData - mStartCount is 0 - this means the device thinks it should not be running: %s", outPropertyData, 0x22u);
        if (SHIBYTE(ioData.mBuffers[0].mData) < 0)
          operator delete(*(void **)&ioData.mNumberBuffers);
      }
    }
LABEL_142:
    ADS::ObjectManager::ReleaseObject(v151, v62);
    if (!v148)
      goto LABEL_144;
    goto LABEL_143;
  }
  operator delete(*(void **)outPropertyData);
  if (!v31)
    goto LABEL_53;
LABEL_20:
  v32 = (const __CFString *)*((_QWORD *)v15 + 74);
  if (!v32)
    goto LABEL_163;
  v33 = (AMCP::Log::Scope_Registry *)applesauce::CF::convert_to<std::string,0>((uint64_t)outPropertyData, v32);
  if (outPropertyData[23] >= 0)
    v34 = outPropertyData[23];
  else
    v34 = *(_QWORD *)&outPropertyData[8];
  if ((outPropertyData[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)outPropertyData);
    if (!v34)
      goto LABEL_144;
  }
  else if (!v34)
  {
    goto LABEL_144;
  }
  if (*((_QWORD *)v15 + 55))
  {
    v71 = v15 + 52;
    v72 = (*(uint64_t (**)(unsigned int *))(*((_QWORD *)v15 + 26) + 16))(v15 + 52);
    v73 = ADS::ObjectManager::CopyObjectByObjectID((ADS::ObjectManager *)a3);
    ioData = *(AudioBufferList *)(v73 + 56);
    v74 = *(_DWORD *)(v73 + 80);
    v152 = *(_DWORD *)(v73 + 84);
    v149 = (ADS::ObjectManager *)v73;
    v75 = *(_QWORD *)(v73 + 88);
    bzero(a8, (v74 * a6));
    v76 = v15 + 150;
    v77 = (ExtAudioFileRef *)(v15 + 152);
    if (!*((_QWORD *)v15 + 76))
    {
      v145 = v75;
      v78 = (const __CFString *)*((_QWORD *)v15 + 74);
      v146 = v72;
      if (!v78)
      {
        v140 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v140, "Could not construct");
        __cxa_throw(v140, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      outExtAudioFile = (ExtAudioFileRef *)(v15 + 152);
      applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v78);
      v79 = v159;
      v80 = *(const char **)__p;
      CAExtAudioFile::Close((CAExtAudioFile *)(v15 + 150));
      if (v79 >= 0)
        v81 = __p;
      else
        v81 = v80;
      v82 = strlen(v81);
      v83 = CFURLCreateFromFileSystemRepresentation((CFAllocatorRef)*MEMORY[0x1E0C9AE08], (const UInt8 *)v81, v82, 0);
      v84 = v83;
      if (!v83)
      {
        if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
        {
          CAX4CCString::CAX4CCString((CAX4CCString *)ioPropertyDataSize);
          *(_DWORD *)outPropertyData = 136315906;
          *(_QWORD *)&outPropertyData[4] = "CAExtAudioFile.h";
          *(_WORD *)&outPropertyData[12] = 1024;
          *(_DWORD *)&outPropertyData[14] = 42;
          *(_WORD *)&outPropertyData[18] = 2080;
          *(_QWORD *)&outPropertyData[20] = ioPropertyDataSize;
          *(_WORD *)&outPropertyData[28] = 2080;
          *(_QWORD *)&outPropertyData[30] = "couldn't convert path to CFURLRef";
          _os_log_impl(&dword_1B57BA000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", outPropertyData, 0x26u);
        }
        v141 = (CAXException *)__cxa_allocate_exception(0x110uLL);
        CAXException::CAXException(v141, "couldn't convert path to CFURLRef", -1);
      }
      v85 = ExtAudioFileOpenURL(v83, outExtAudioFile);
      CFRelease(v84);
      (*(void (**)(unsigned int *, uint64_t, const char *))(*(_QWORD *)v76 + 16))(v15 + 150, v85, "ExtAudioFileOpenURL");
      v71 = v15 + 52;
      v72 = v146;
      if (v159 < 0)
        operator delete(*(void **)__p);
      *(AudioBufferList *)outPropertyData = ioData;
      *(_DWORD *)&outPropertyData[24] = v74;
      *(_DWORD *)&outPropertyData[28] = v152;
      *(_QWORD *)&outPropertyData[32] = v145;
      v77 = (ExtAudioFileRef *)(v15 + 152);
      v86 = ExtAudioFileSetProperty(*outExtAudioFile, 0x63666D74u, 0x28u, outPropertyData);
      (*(void (**)(unsigned int *, uint64_t, const char *, uint64_t))(*(_QWORD *)v76 + 24))(v15 + 150, v86, "ExtAudioFileSetProperty", 1667657076);
    }
    v87 = malloc_type_calloc(1uLL, 0x18uLL, 0xC517D68uLL);
    v88 = v87;
    if (!v87)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)outPropertyData = 136315394;
        *(_QWORD *)&outPropertyData[4] = "ADS_Device.cpp";
        *(_WORD *)&outPropertyData[12] = 1024;
        *(_DWORD *)&outPropertyData[14] = 1679;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::inputFileBasedHardwareIOProc: couldn't allocate AudioBufferList", outPropertyData, 0x12u);
      }
      v139 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v139 = &off_1E69A1B30;
      v139[2] = 1852797029;
    }
    *(_DWORD *)v87 = 1;
    v87[2] = a8;
    *((_DWORD *)v87 + 2) = v152;
    *((_DWORD *)v87 + 3) = v74 * a6;
    *(_DWORD *)outPropertyData = a6;
    v89 = ExtAudioFileRead(*v77, (UInt32 *)outPropertyData, (AudioBufferList *)v87);
    (*(void (**)(unsigned int *, uint64_t, const char *))(*(_QWORD *)v76 + 16))(v15 + 150, v89, "ExtAudioFileRead");
    if (!*(_DWORD *)outPropertyData)
    {
      v90 = ExtAudioFileSeek(*v77, 0);
      (*(void (**)(unsigned int *, uint64_t, const char *))(*(_QWORD *)v76 + 16))(v15 + 150, v90, "ExtAudioFileSeek");
    }
    MEMORY[0x1B5E50688](v88, 0x1080C404ACF7207);
    ADS::ObjectManager::ReleaseObject(v149, v91);
    if (v72)
      (*(void (**)(unsigned int *))(*(_QWORD *)v71 + 24))(v71);
  }
  else
  {
    AMCP::Log::Scope_Registry::get(v33);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)outPropertyData, "com.apple.coreaudio", "AMCP");
    v92 = *(std::__shared_weak_count **)&outPropertyData[8];
    v93 = **(NSObject ***)outPropertyData;
    if (*(_QWORD *)&outPropertyData[8])
    {
      v94 = (unint64_t *)(*(_QWORD *)&outPropertyData[8] + 8);
      do
        v95 = __ldaxr(v94);
      while (__stlxr(v95 - 1, v94));
      if (!v95)
      {
        ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
        std::__shared_weak_count::__release_weak(v92);
      }
    }
    if (os_log_type_enabled(v93, OS_LOG_TYPE_ERROR))
    {
      v96 = pthread_self();
      v97 = pthread_mach_thread_np(v96);
      OS::CF::String::AsStdString((std::string *)&ioData, (uint64_t)(v15 + 22));
      v98 = SHIBYTE(ioData.mBuffers[0].mData) >= 0 ? &ioData : *(AudioBufferList **)&ioData.mNumberBuffers;
      *(_DWORD *)outPropertyData = 67109890;
      *(_DWORD *)&outPropertyData[4] = v97;
      *(_WORD *)&outPropertyData[8] = 2080;
      *(_QWORD *)&outPropertyData[10] = "ADS_Device.cpp";
      *(_WORD *)&outPropertyData[18] = 1024;
      *(_DWORD *)&outPropertyData[20] = 1653;
      *(_WORD *)&outPropertyData[24] = 2080;
      *(_QWORD *)&outPropertyData[26] = v98;
      _os_log_error_impl(&dword_1B57BA000, v93, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d ADS::Device::inputFileBasedHardwareIOProc - mStartCount is 0 - this means the device thinks it should not be running: %s", outPropertyData, 0x22u);
      if (SHIBYTE(ioData.mBuffers[0].mData) < 0)
        operator delete(*(void **)&ioData.mNumberBuffers);
    }
  }
LABEL_144:
  v131 = (void (*)(_QWORD, _QWORD, uint64_t, ADS::ObjectManager *, void *, uint64_t))*((_QWORD *)v15 + 70);
  if (v131)
    v131(a3, v153, a6, v155, a8, a9);
  ADS::ObjectManager::ReleaseObject((ADS::ObjectManager *)v15, v14);
  return 0;
}

void sub_1B57DFC9C(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12, uint64_t a13, ADS::ObjectManager *a14, ADS::ObjectManager *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,__int128 buf,__int128 a32)
{
  ADS::ObjectManager *v32;
  void *v33;
  ADS::BaseObject *v36;
  ADS::BaseObject *v37;
  _DWORD *v38;
  uint64_t v39;
  _DWORD *exception;
  int v41;

  if (a2)
  {
    __cxa_free_exception(v33);
    if (a23 < 0)
      operator delete(__p);
    ADS::ObjectManager::ReleaseObject(a14, v36);
    if (a12)
      (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
    if (a2 == 3)
    {
      v38 = __cxa_begin_catch(a1);
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        v39 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v38 + 16))(v38);
        LODWORD(buf) = 136315650;
        *(_QWORD *)((char *)&buf + 4) = "ADS_Device.cpp";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 1697;
        WORD1(a32) = 2080;
        *(_QWORD *)((char *)&a32 + 4) = v39;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::inputFileBasedHardwareIOProc error in CAExtAudioFile: %s", (uint8_t *)&buf, 0x1Cu);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      v41 = v38[66];
      *(_QWORD *)exception = &off_1E69A1B30;
      exception[2] = v41;
    }
    ADS::ObjectManager::ReleaseObject(v32, v37);
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B57DF650);
  }
  JUMPOUT(0x1B57DFF38);
}

void sub_1B57DFF18(void *a1, int a2)
{
  ADS::ObjectManager *v2;
  ADS::BaseObject *v4;

  if (a2)
  {
    __cxa_end_catch();
    ADS::ObjectManager::ReleaseObject(v2, v4);
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B57DF650);
  }
  JUMPOUT(0x1B57DFF38);
}

void sub_1B57DFF30(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1B57DFF48(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1B57DFFB0);
  JUMPOUT(0x1B57DFF38);
}

void sub_1B57DFF5C(void *a1, ADS::BaseObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14)
{
  ADS::ObjectManager *v14;
  uint64_t v15;

  if ((_DWORD)a2)
  {
    if (a14)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15);
    ADS::ObjectManager::ReleaseObject(v14, a2);
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B57DF650);
  }
  JUMPOUT(0x1B57DFF38);
}

void sub_1B57DFF9C(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1B57DFFA8);
  JUMPOUT(0x1B57DFF38);
}

void sub_1B57DFFDC()
{
  JUMPOUT(0x1B57DFF38);
}

uint64_t Simulator_EndIOOperation(_UNKNOWN **a1, ADS::ObjectManager *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  ADS::ObjectManager *v6;
  ADS::BaseObject *v7;
  int v9;
  _DWORD *exception;
  _DWORD *v11;
  int v12;
  const char *v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1 != &gAudioServerPlugInDriverInterfacePtr)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v12 = 136315394;
      v13 = "ADS_Simulator.cpp";
      v14 = 1024;
      v15 = 1822;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_EndIOOperation: bad driver reference", (uint8_t *)&v12, 0x12u);
    }
    v9 = 560947818;
LABEL_11:
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = v9;
  }
  if (!a6)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v12 = 136315394;
      v13 = "ADS_Simulator.cpp";
      v14 = 1024;
      v15 = 1823;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_EndIOOperation: no cycle info", (uint8_t *)&v12, 0x12u);
    }
    v9 = 1852797029;
    goto LABEL_11;
  }
  v6 = (ADS::ObjectManager *)ADS::ObjectManager::CopyObjectByObjectID(this);
  if (!v6)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v12 = 136315394;
      v13 = "ADS_Simulator.cpp";
      v14 = 1024;
      v15 = 1827;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_EndIOOperation: unknown device", (uint8_t *)&v12, 0x12u);
    }
    v11 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v11 = &off_1E69A1B30;
    v11[2] = 560947818;
  }
  ADS::ObjectManager::ReleaseObject(v6, v7);
  return 0;
}

void sub_1B57E0204(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1B57E021C(void *a1, ADS::BaseObject *a2)
{
  if ((_DWORD)a2)
  {
    ADS::ObjectManager::ReleaseObject(0, a2);
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B57E002CLL);
  }
  JUMPOUT(0x1B57E020CLL);
}

void sub_1B57E027C()
{
  JUMPOUT(0x1B57E020CLL);
}

void ADS::Simulator::StaticInitializer(ADS::Simulator *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  ADS::BaseObject *v4;
  std::__shared_weak_count *v5;
  char v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __CFBundle *BundleWithIdentifier;
  CFDictionaryRef InfoDictionary;
  const __CFDictionary *v20;
  uint64_t v21;
  unsigned __int8 v22;
  int v23;
  char v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  void (**v27)(OS::CF::Dictionary *__hidden);
  std::__shared_weak_count *v28;
  _BYTE block[24];
  void *v30;
  void *__p;
  void *v32;
  uint64_t v33;
  int v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v1 = operator new();
  *(_QWORD *)(v1 + 8) = 0x61706C6700000001;
  *(_DWORD *)(v1 + 16) = 1634689642;
  *(_QWORD *)(v1 + 20) = 0;
  *(_QWORD *)(v1 + 36) = 0;
  *(_QWORD *)(v1 + 28) = 0;
  *(_QWORD *)(v1 + 41) = 0;
  *(_QWORD *)v1 = off_1E696BBC8;
  CADeprecated::CAMutex::CAMutex((CADeprecated::CAMutex *)(v1 + 56), "Simulator");
  *(_OWORD *)(v1 + 201) = 0u;
  *(_OWORD *)(v1 + 176) = 0u;
  *(_OWORD *)(v1 + 192) = 0u;
  *(_OWORD *)(v1 + 144) = 0u;
  *(_OWORD *)(v1 + 160) = 0u;
  ADS::Simulator::sInstance = v1;
  v2 = operator new();
  ADS::Simulator::sServerHighPriorityQueue = AMCP::Utility::Dispatch_Queue::Dispatch_Queue(v2, "ADS Simulator High Priority Server Queue");
  v3 = operator new();
  ADS::Simulator::sServerDefaultPriorityQueue = AMCP::Utility::Dispatch_Queue::Dispatch_Queue(v3, "ADS Simulator Default Priority Server Queue");
  ADS::ObjectManager::MapObject((ADS::ObjectManager *)1, ADS::Simulator::sInstance, v4);
  if (g_static_start_options != 1)
  {
    v27 = 0;
    v28 = 0;
    HALS_System::GetInstance(block, 0, (uint64_t *)&v27);
    v5 = *(std::__shared_weak_count **)&block[8];
    v6 = *(_BYTE *)(*(_QWORD *)block + 1280);
    if (*(_QWORD *)&block[8])
    {
      v7 = (unint64_t *)(*(_QWORD *)&block[8] + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v9 = v28;
    if (v28)
    {
      p_shared_owners = (unint64_t *)&v28->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v24 = v6;
    v25 = 0;
    v26 = 0;
    HALS_System::GetInstance(block, 0, &v25);
    v12 = *(std::__shared_weak_count **)&block[8];
    *(_BYTE *)(*(_QWORD *)block + 1280) = 1;
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v15 = v26;
    if (v26)
    {
      v16 = (unint64_t *)&v26->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    BundleWithIdentifier = CFBundleGetBundleWithIdentifier(CFSTR("com.apple.audio.CoreAudio"));
    if (BundleWithIdentifier)
    {
      InfoDictionary = CFBundleGetInfoDictionary(BundleWithIdentifier);
      v20 = InfoDictionary;
      if (InfoDictionary)
      {
        CFRetain(InfoDictionary);
        v27 = &off_1E69A0DE0;
        v28 = (std::__shared_weak_count *)v20;
        OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Dictionary>((uint64_t)&v25, v20, CFSTR("NullAudioDriverConfiguration"));
        if (v26)
        {
          v23 = 0;
          v35 = 0;
          v36 = 0;
          v37 = 0;
          ADS::Simulator::AddDeviceWithProperties((uint64_t)&v25, &v23, (uint64_t)&v35);
          v21 = ADS::Simulator::sServerHighPriorityQueue;
          *(_QWORD *)block = MEMORY[0x1E0C809B0];
          *(_QWORD *)&block[8] = 1174405120;
          *(_QWORD *)&block[16] = ___ZN3ADS9Simulator14LoadNullDeviceEv_block_invoke;
          v30 = &__block_descriptor_tmp_98;
          v34 = v23;
          v32 = 0;
          v33 = 0;
          __p = 0;
          std::vector<AudioObjectPropertyAddress>::__init_with_size[abi:ne180100]<AudioObjectPropertyAddress*,AudioObjectPropertyAddress*>(&__p, v35, v36, 0xAAAAAAAAAAAAAAABLL * ((v36 - (uint64_t)v35) >> 2));
          v22 = atomic_load((unsigned __int8 *)(v21 + 32));
          if ((v22 & 1) != 0)
            atomic_store(1u, (unsigned __int8 *)(v21 + 33));
          dispatch_async(*(dispatch_queue_t *)v21, block);
          if (__p)
          {
            v32 = __p;
            operator delete(__p);
          }
          if (v35)
            operator delete(v35);
        }
        else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)block = 136315394;
          *(_QWORD *)&block[4] = "ADS_Simulator.cpp";
          *(_WORD *)&block[12] = 1024;
          *(_DWORD *)&block[14] = 109;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  NullAudioDriverConfiguration not found", block, 0x12u);
        }
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v25);
      }
      else
      {
        v27 = &off_1E69A0DE0;
        v28 = 0;
      }
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v27);
    }
    HALS_System::WithADSEnabled::~WithADSEnabled((HALS_System::WithADSEnabled *)&v24);
  }
}

void sub_1B57E067C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1B57E0694(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, char a16)
{
  uint64_t v16;
  void *v18;

  if (a2)
  {
    v18 = *(void **)(v16 - 64);
    if (v18)
      operator delete(v18);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a14);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a16);
    HALS_System::WithADSEnabled::~WithADSEnabled((HALS_System::WithADSEnabled *)&a13);
    __cxa_begin_catch(a1);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)(v16 - 64) = 136315394;
      *(_QWORD *)(v16 - 60) = "ADS_Simulator.cpp";
      *(_WORD *)(v16 - 52) = 1024;
      *(_DWORD *)(v16 - 50) = 134;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Simulator::StaticInitializer: failed to create the plug-in", (uint8_t *)(v16 - 64), 0x12u);
    }
    if (ADS::Simulator::sInstance)
      (*(void (**)(uint64_t))(*(_QWORD *)ADS::Simulator::sInstance + 24))(ADS::Simulator::sInstance);
    ADS::Simulator::sInstance = 0;
    if (ADS::Simulator::sServerHighPriorityQueue)
    {
      AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)ADS::Simulator::sServerHighPriorityQueue);
      MEMORY[0x1B5E50688]();
    }
    ADS::Simulator::sServerHighPriorityQueue = 0;
    if (ADS::Simulator::sServerDefaultPriorityQueue)
    {
      AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)ADS::Simulator::sServerDefaultPriorityQueue);
      MEMORY[0x1B5E50688]();
    }
    ADS::Simulator::sServerDefaultPriorityQueue = 0;
    __cxa_end_catch();
    JUMPOUT(0x1B57E064CLL);
  }
  JUMPOUT(0x1B57E0684);
}

void sub_1B57E0808()
{
  JUMPOUT(0x1B57E0684);
}

void sub_1B57E0878(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

_QWORD *std::vector<AudioObjectPropertyAddress>::__init_with_size[abi:ne180100]<AudioObjectPropertyAddress*,AudioObjectPropertyAddress*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<AudioObjectPropertyAddress>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B57E08EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<AudioObjectPropertyAddress>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x1555555555555556)
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[12 * v4];
  return result;
}

_QWORD *__copy_helper_block_e8_32c68_ZTSNSt3__16vectorI26AudioObjectPropertyAddressNS_9allocatorIS1_EEEE(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v2 = (_QWORD *)(a1 + 32);
  v2[2] = 0;
  return std::vector<AudioObjectPropertyAddress>::__init_with_size[abi:ne180100]<AudioObjectPropertyAddress*,AudioObjectPropertyAddress*>(v2, *(const void **)(a2 + 32), *(_QWORD *)(a2 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 2));
}

void __destroy_helper_block_e8_32c68_ZTSNSt3__16vectorI26AudioObjectPropertyAddressNS_9allocatorIS1_EEEE(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
}

uint64_t OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Dictionary>(uint64_t result, CFDictionaryRef theDict, void *key)
{
  uint64_t v3;
  CFTypeID v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *value;

  *(_QWORD *)result = &off_1E69A0DE0;
  *(_QWORD *)(result + 8) = 0;
  if (theDict)
  {
    v3 = result;
    value = 0;
    result = CFDictionaryGetValueIfPresent(theDict, key, (const void **)&value);
    if ((_DWORD)result)
    {
      v4 = value ? CFGetTypeID(value) : 0;
      result = CFDictionaryGetTypeID();
      if (v4 == result)
      {
        v5 = value;
        if (value)
        {
          CFRetain(value);
          v6 = v3;
          v7 = (uint64_t)v5;
        }
        else
        {
          v6 = v3;
          v7 = 0;
        }
        return OS::CF::UntypedObject::operator=(v6, v7);
      }
    }
  }
  return result;
}

uint64_t ___ZN3ADS9Simulator14LoadNullDeviceEv_block_invoke(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t, uint64_t);

  if (ADS::Simulator::sHost)
  {
    v1 = *(unsigned int *)(ADS::Simulator::sInstance + 8);
    v2 = *(unsigned int *)(result + 56);
    v3 = *(_QWORD *)(result + 32);
    v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))ADS::Simulator::sHost;
    pthread_once(&ADS::Simulator::sStaticInitializer, (void (*)(void))ADS::Simulator::StaticInitializer);
    return v4(ADS::Simulator::sHost, v1, v2, v3);
  }
  return result;
}

void sub_1B57E0AB4(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void HALS_System::WithADSEnabled::~WithADSEnabled(HALS_System::WithADSEnabled *this)
{
  char v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  _QWORD v10[2];

  v1 = *(_BYTE *)this;
  v8 = 0;
  v9 = 0;
  HALS_System::GetInstance(v10, 0, &v8);
  v2 = (std::__shared_weak_count *)v10[1];
  *(_BYTE *)(v10[0] + 1280) = v1;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = v9;
  if (v9)
  {
    v6 = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

uint64_t CACFObject<__CFUUID const*>::~CACFObject(uint64_t a1)
{
  const void *v2;

  if (*(_BYTE *)(a1 + 8))
  {
    v2 = *(const void **)a1;
    if (*(_QWORD *)a1)
    {
      CFRelease(v2);
      *(_QWORD *)a1 = 0;
    }
  }
  return a1;
}

uint64_t Simulator_SetupForIsolatedIO(_UNKNOWN **a1, ADS::ObjectManager *this, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  ADS::ObjectManager *v9;
  __int32 *v10;
  __int32 *v11;
  ADS::BaseObject *v12;
  __int32 *v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  _DWORD *exception;
  NSObject *v18;
  const char *v19;
  _DWORD *v20;
  int v21;
  const char *v22;
  __int16 v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (a1 != &gAudioServerPlugInIsolatedDriverInterfacePtr)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v21 = 136315394;
      v22 = "ADS_Simulator.cpp";
      v23 = 1024;
      v24 = 1691;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_SetupForIsolatedIO: bad driver reference", (uint8_t *)&v21, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 560947818;
  }
  v8 = ADS::ObjectManager::CopyObjectByObjectID(this);
  v9 = (ADS::ObjectManager *)v8;
  if (!v8)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_19;
    v21 = 136315394;
    v22 = "ADS_Simulator.cpp";
    v23 = 1024;
    v24 = 1694;
    v18 = MEMORY[0x1E0C81028];
    v19 = "%25s:%-5d  Simulator_SetupForIsolatedIO: unknown device";
    goto LABEL_18;
  }
  v10 = *(__int32 **)(v8 + 368);
  v11 = wmemchr(*(__int32 **)(v8 + 360), a3, ((uint64_t)v10 - *(_QWORD *)(v8 + 360)) >> 2);
  if (v11)
    v13 = v11;
  else
    v13 = v10;
  if (v10 == v13)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_19;
    v21 = 136315394;
    v22 = "ADS_Device.cpp";
    v23 = 1024;
    v24 = 1463;
    v18 = MEMORY[0x1E0C81028];
    v19 = "%25s:%-5d  DoSetupForIsolatedIO bad inStreamObjectID";
LABEL_18:
    _os_log_impl(&dword_1B57BA000, v18, OS_LOG_TYPE_ERROR, v19, (uint8_t *)&v21, 0x12u);
LABEL_19:
    v20 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v20 = &off_1E69A1B30;
    v20[2] = 560947818;
  }
  v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))*((_QWORD *)v9 + 72);
  if (v14)
    v15 = v14(a3, a4, a5);
  else
    v15 = 0;
  ADS::ObjectManager::ReleaseObject(v9, v12);
  return v15;
}

void sub_1B57E0E34(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1B57E0E4C(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B57E0C6CLL);
  }
  JUMPOUT(0x1B57E0E3CLL);
}

void sub_1B57E0EA0()
{
  JUMPOUT(0x1B57E0E3CLL);
}

uint64_t Simulator_TeardownForIsolatedIO(_UNKNOWN **a1, ADS::ObjectManager *this, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  ADS::ObjectManager *v7;
  __int32 *v8;
  __int32 *v9;
  ADS::BaseObject *v10;
  __int32 *v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  _DWORD *exception;
  NSObject *v16;
  const char *v17;
  _DWORD *v18;
  int v19;
  const char *v20;
  __int16 v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (a1 != &gAudioServerPlugInIsolatedDriverInterfacePtr)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v19 = 136315394;
      v20 = "ADS_Simulator.cpp";
      v21 = 1024;
      v22 = 1720;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_TeardownForIsolatedIO: bad driver reference", (uint8_t *)&v19, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 560947818;
  }
  v6 = ADS::ObjectManager::CopyObjectByObjectID(this);
  v7 = (ADS::ObjectManager *)v6;
  if (!v6)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_19;
    v19 = 136315394;
    v20 = "ADS_Simulator.cpp";
    v21 = 1024;
    v22 = 1723;
    v16 = MEMORY[0x1E0C81028];
    v17 = "%25s:%-5d  Simulator_TeardownForIsolatedIO: unknown device";
    goto LABEL_18;
  }
  v8 = *(__int32 **)(v6 + 368);
  v9 = wmemchr(*(__int32 **)(v6 + 360), a3, ((uint64_t)v8 - *(_QWORD *)(v6 + 360)) >> 2);
  if (v9)
    v11 = v9;
  else
    v11 = v8;
  if (v8 == v11)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_19;
    v19 = 136315394;
    v20 = "ADS_Device.cpp";
    v21 = 1024;
    v22 = 1477;
    v16 = MEMORY[0x1E0C81028];
    v17 = "%25s:%-5d  DoTeardownForIsolatedIO bad inStreamObjectID";
LABEL_18:
    _os_log_impl(&dword_1B57BA000, v16, OS_LOG_TYPE_ERROR, v17, (uint8_t *)&v19, 0x12u);
LABEL_19:
    v18 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v18 = &off_1E69A1B30;
    v18[2] = 560947818;
  }
  v12 = (uint64_t (*)(uint64_t, uint64_t))*((_QWORD *)v7 + 73);
  if (v12)
    v13 = v12(a3, a4);
  else
    v13 = 0;
  ADS::ObjectManager::ReleaseObject(v7, v10);
  return v13;
}

void sub_1B57E1104(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1B57E111C(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B57E0F40);
  }
  JUMPOUT(0x1B57E110CLL);
}

void sub_1B57E1170()
{
  JUMPOUT(0x1B57E110CLL);
}

uint64_t Simulator_DoIsolatedIOOperation(_UNKNOWN **a1, ADS::ObjectManager *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  ADS::ObjectManager *v13;
  __int32 *v14;
  __int32 *v15;
  ADS::BaseObject *v16;
  __int32 *v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  int v21;
  _DWORD *exception;
  NSObject *v23;
  const char *v24;
  _DWORD *v25;
  int v26;
  const char *v27;
  __int16 v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (a1 != &gAudioServerPlugInIsolatedDriverInterfacePtr)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v26 = 136315394;
      v27 = "ADS_Simulator.cpp";
      v28 = 1024;
      v29 = 1753;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_DoIsolatedIOOperation: bad driver reference", (uint8_t *)&v26, 0x12u);
    }
    v21 = 560947818;
LABEL_18:
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = v21;
  }
  if (!a7)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v26 = 136315394;
      v27 = "ADS_Simulator.cpp";
      v28 = 1024;
      v29 = 1754;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_DoIsolatedIOOperation: no cycle info", (uint8_t *)&v26, 0x12u);
    }
    v21 = 1852797029;
    goto LABEL_18;
  }
  v12 = ADS::ObjectManager::CopyObjectByObjectID(this);
  v13 = (ADS::ObjectManager *)v12;
  if (!v12)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_24;
    v26 = 136315394;
    v27 = "ADS_Simulator.cpp";
    v28 = 1024;
    v29 = 1758;
    v23 = MEMORY[0x1E0C81028];
    v24 = "%25s:%-5d  Simulator_DoIsolatedIOOperation: unknown device";
    goto LABEL_23;
  }
  v14 = *(__int32 **)(v12 + 368);
  v15 = wmemchr(*(__int32 **)(v12 + 360), a3, ((uint64_t)v14 - *(_QWORD *)(v12 + 360)) >> 2);
  if (v15)
    v17 = v15;
  else
    v17 = v14;
  if (v14 == v17)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_24;
    v26 = 136315394;
    v27 = "ADS_Device.cpp";
    v28 = 1024;
    v29 = 1448;
    v23 = MEMORY[0x1E0C81028];
    v24 = "%25s:%-5d  DoIsolatedIOOperation bad inStreamObjectID";
LABEL_23:
    _os_log_impl(&dword_1B57BA000, v23, OS_LOG_TYPE_ERROR, v24, (uint8_t *)&v26, 0x12u);
LABEL_24:
    v25 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v25 = &off_1E69A1B30;
    v25[2] = 560947818;
  }
  v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))*((_QWORD *)v13 + 71);
  if (v18)
    v19 = v18(a3, a4, a5, a6, a7);
  else
    v19 = 0;
  ADS::ObjectManager::ReleaseObject(v13, v16);
  return v19;
}

void sub_1B57E1470(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1B57E1488(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B57E1234);
  }
  JUMPOUT(0x1B57E1478);
}

void sub_1B57E14DC()
{
  JUMPOUT(0x1B57E1478);
}

void ADS::Simulator::FlushAllQueues(ADS::Simulator *this)
{
  if (ADS::Simulator::sServerHighPriorityQueue)
    AMCP::Utility::Dispatch_Queue::flush_all_work((AMCP::Utility::Dispatch_Queue *)ADS::Simulator::sServerHighPriorityQueue);
  if (ADS::Simulator::sServerDefaultPriorityQueue)
    AMCP::Utility::Dispatch_Queue::flush_all_work((AMCP::Utility::Dispatch_Queue *)ADS::Simulator::sServerDefaultPriorityQueue);
}

_QWORD *OS::CF::Dictionary::Dictionary(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  CFDictionaryRef v8;
  void **values[3];
  void **keys[3];

  *a1 = &off_1E69A0DE0;
  a1[1] = 0;
  std::vector<void const*>::vector(keys, a3);
  std::vector<void const*>::vector(values, a3);
  if (a3)
  {
    v6 = 0;
    v7 = a2 + 16 * a3;
    do
    {
      keys[0][v6] = *(void **)a2;
      values[0][v6++] = *(void **)(a2 + 8);
      a2 += 16;
    }
    while (a2 != v7);
  }
  v8 = CFDictionaryCreate(0, (const void **)keys[0], (const void **)values[0], a3, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
  OS::CF::UntypedObject::operator=((uint64_t)a1, (uint64_t)v8);
  if (values[0])
  {
    values[1] = values[0];
    operator delete(values[0]);
  }
  if (keys[0])
  {
    keys[1] = keys[0];
    operator delete(keys[0]);
  }
  return a1;
}

void sub_1B57E15F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  OS::CF::UntypedObject *v13;

  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  OS::CF::UntypedObject::~UntypedObject(v13);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<void const*>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<void const*>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1B57E1694(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<void const*>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void HALS_PlugIn::Activate(std::runtime_error_vtbl *this)
{
  uint64_t v2;
  unsigned __int8 v3;
  NSObject *v4;
  AMCP::Log::Scope_Registry *v5;
  const AudioObjectPropertyAddress *v6;
  HALS_Client *v7;
  const AudioObjectPropertyAddress *v8;
  const AudioObjectPropertyAddress *v9;
  HALS_Client *v10;
  const AudioObjectPropertyAddress *v11;
  const AudioObjectPropertyAddress *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  NSObject *v22;
  _opaque_pthread_t *v23;
  mach_port_t v24;
  void *exception;
  uint64_t v26;
  std::__shared_weak_count *v27;
  void *__p;
  void *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t (**v33)();
  __int128 v34;
  uint64_t v35;
  std::runtime_error v36;
  std::runtime_error v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  char v43;
  int v44;
  _BYTE block[40];
  const char *v46;
  int v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  __p = 0;
  v29 = 0;
  v30 = 0;
  v44 = 0;
  v2 = (*((uint64_t (**)(std::runtime_error_vtbl *))this->~runtime_error + 8))(this);
  v37.__vftable = this;
  v37.__imp_.__imp_ = (const char *)&__p;
  v38 = &v44;
  v3 = atomic_load((unsigned __int8 *)(v2 + 32));
  if ((v3 & 1) != 0)
    atomic_store(1u, (unsigned __int8 *)(v2 + 33));
  v4 = *(NSObject **)v2;
  *(_QWORD *)block = MEMORY[0x1E0C809B0];
  *(_QWORD *)&block[8] = 0x40000000;
  *(_QWORD *)&block[16] = ___ZN10applesauce8dispatch2v19sync_implIRZN11HALS_PlugIn31_InitializePlugInAndAndActivateERNSt3__16vectorIjNS4_9allocatorIjEEEEE3__0EEvP16dispatch_queue_sOT_NS4_17integral_constantIbLb1EEE_block_invoke;
  *(_QWORD *)&block[24] = &__block_descriptor_tmp_60;
  *(_QWORD *)&block[32] = &v37;
  dispatch_sync(v4, block);
  if (v44)
  {
    AMCP::Log::Scope_Registry::get(v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)block, "com.apple.coreaudio", "AMCP");
    v22 = **(NSObject ***)block;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)block);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      v23 = pthread_self();
      v24 = pthread_mach_thread_np(v23);
      *(_DWORD *)block = 67109890;
      *(_DWORD *)&block[4] = v24;
      *(_WORD *)&block[8] = 2080;
      *(_QWORD *)&block[10] = "HALS_PlugIn.cpp";
      *(_WORD *)&block[18] = 1024;
      *(_DWORD *)&block[20] = 165;
      *(_WORD *)&block[24] = 2080;
      *(_QWORD *)&block[26] = "theError != kAudioHardwareNoError";
      _os_log_error_impl(&dword_1B57BA000, v22, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Device activation failed", block, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v43);
    exception = __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v36, "Device activation failed");
    std::runtime_error::runtime_error(&v37, &v36);
    v39 = 0;
    v40 = 0;
    v41 = 0;
    v42 = -1;
    v37.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v38 = (int *)&unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)block, (uint64_t)&v37);
    *(_QWORD *)&block[32] = "void HALS_PlugIn::_InitializePlugInAndAndActivate(std::vector<AudioObjectID> &)";
    v46 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/PlugIn/HALS_PlugIn.cpp";
    v47 = 165;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v31);
    v33 = off_1E69A20A0;
    v34 = v31;
    v35 = v32;
    v31 = 0uLL;
    v32 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)block, (uint64_t)&v33);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)block);
  }
  memset(block, 0, 32);
  v37.__vftable = (std::runtime_error_vtbl *)0x676C6F62706C6723;
  LODWORD(v37.__imp_.__imp_) = 0;
  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)block, (AudioObjectPropertyAddress *)&v37, v6);
  if (HALS_DeviceManager::GetNumberDevices((HALS_DeviceManager *)this, 0, v7))
  {
    v37.__vftable = (std::runtime_error_vtbl *)0x676C6F6264657623;
    LODWORD(v37.__imp_.__imp_) = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)block, (AudioObjectPropertyAddress *)&v37, v8);
  }
  if (HALS_PlugIn::GetNumberEndPoints((HALS_PlugIn *)this, 0))
  {
    v37.__vftable = (std::runtime_error_vtbl *)0x676C6F62656E6423;
    LODWORD(v37.__imp_.__imp_) = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)block, (AudioObjectPropertyAddress *)&v37, v9);
  }
  if (HALS_DeviceManager::GetNumberBoxes((HALS_DeviceManager *)this, 0))
  {
    v37.__vftable = (std::runtime_error_vtbl *)0x676C6F62626F7823;
    LODWORD(v37.__imp_.__imp_) = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)block, (AudioObjectPropertyAddress *)&v37, v11);
  }
  if (HALS_DeviceManager::GetNumberClockDevices((HALS_DeviceManager *)this, v10))
  {
    v37.__vftable = (std::runtime_error_vtbl *)0x676C6F62636C6B23;
    LODWORD(v37.__imp_.__imp_) = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)block, (AudioObjectPropertyAddress *)&v37, v12);
  }
  v13 = *(void **)block;
  v14 = -1431655765 * ((*(_QWORD *)&block[8] - *(_QWORD *)block) >> 2);
  if ((_DWORD)v14)
    HALS_Object::PropertiesChanged((HALS_Object *)this, (HALS_NotificationManager *)LODWORD(this->what), 0, v14, *(const AudioObjectPropertyAddress **)block);
  if (v13)
    operator delete(v13);
  v15 = v29;
  if (v29 != __p)
  {
    v26 = 0;
    v27 = 0;
    HALS_System::GetInstance(block, 0, &v26);
    HALS_System::CheckForDefaultDeviceChanges(*(HALS_PlatformBehaviors **)block, (uint64_t)&__p);
    v16 = *(std::__shared_weak_count **)&block[8];
    if (*(_QWORD *)&block[8])
    {
      v17 = (unint64_t *)(*(_QWORD *)&block[8] + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = v27;
    if (v27)
    {
      p_shared_owners = (unint64_t *)&v27->__shared_owners_;
      do
        v21 = __ldaxr(p_shared_owners);
      while (__stlxr(v21 - 1, p_shared_owners));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v15 = __p;
  }
  if (v15)
  {
    v29 = v15;
    operator delete(v15);
  }
}

void sub_1B57E1B18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,std::runtime_error a23,std::runtime_error a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v26 - 112);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void HALS_PlugIn::~HALS_PlugIn(HALS_PlugIn *this)
{
  HALS_PlugIn::~HALS_PlugIn(this);
  JUMPOUT(0x1B5E50688);
}

{
  const void *v2;
  const void *v3;
  const void *v4;
  uint64_t v5;
  const void *v6;
  HALB_Mutex *v7;
  AMCP::Utility::Dispatch_Queue *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  *(_QWORD *)this = off_1E696BCA8;
  *((_QWORD *)this + 41) = &unk_1E696BDF0;
  v2 = (const void *)*((_QWORD *)this + 59);
  if (v2)
    _Block_release(v2);
  v3 = (const void *)*((_QWORD *)this + 60);
  if (v3)
    _Block_release(v3);
  v4 = (const void *)*((_QWORD *)this + 61);
  if (v4)
    _Block_release(v4);
  (*(void (**)(_QWORD))(**((_QWORD **)this + 50) + 72))(*((_QWORD *)this + 50));
  if (*((_BYTE *)this + 384))
  {
    v5 = *((_QWORD *)this + 49);
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    *((_BYTE *)this + 384) = 1;
    *((_QWORD *)this + 49) = 0;
  }
  v6 = (const void *)*((_QWORD *)this + 58);
  if (v6)
    CFRelease(v6);
  v7 = (HALB_Mutex *)*((_QWORD *)this + 46);
  if (v7)
  {
    HALB_Mutex::~HALB_Mutex(v7);
    MEMORY[0x1B5E50688]();
  }
  v8 = (AMCP::Utility::Dispatch_Queue *)*((_QWORD *)this + 47);
  if (v8)
  {
    AMCP::Utility::Dispatch_Queue::~Dispatch_Queue(v8);
    MEMORY[0x1B5E50688]();
  }
  v9 = (void *)*((_QWORD *)this + 71);
  if (v9)
  {
    *((_QWORD *)this + 72) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 68);
  if (v10)
  {
    *((_QWORD *)this + 69) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 65);
  if (v11)
  {
    *((_QWORD *)this + 66) = v11;
    operator delete(v11);
  }
  v12 = (void *)*((_QWORD *)this + 62);
  if (v12)
  {
    *((_QWORD *)this + 63) = v12;
    operator delete(v12);
  }
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 400);
  HALS_PlugInObject::~HALS_PlugInObject((HALS_PlugIn *)((char *)this + 328));
  *(_QWORD *)this = off_1E6985A90;
  CACFString::~CACFString((HALS_PlugIn *)((char *)this + 48));
  HALS_Object::~HALS_Object(this);
}

void HALS_PlugIn::_Deactivate(HALS_PlugIn *this)
{
  HALS_ObjectMap **v2;
  HALS_ObjectMap **v3;
  HALS_Object *v4;
  HALS_ObjectMap **v5;
  HALS_ObjectMap **v6;
  HALS_Object *v7;
  uint64_t v8;
  HALS_NotificationManager *v9;
  AudioObjectPropertyAddress v10;

  *((_DWORD *)this + 2) = 0;
  v2 = (HALS_ObjectMap **)*((_QWORD *)this + 62);
  v3 = (HALS_ObjectMap **)*((_QWORD *)this + 63);
  if (v2 != v3)
  {
    do
    {
      if (*v2)
      {
        (*(void (**)(HALS_ObjectMap *))(*(_QWORD *)*v2 + 8))(*v2);
        HALS_ObjectMap::ReleaseObject(*v2, v4);
      }
      ++v2;
    }
    while (v2 != v3);
    v2 = (HALS_ObjectMap **)*((_QWORD *)this + 62);
  }
  *((_QWORD *)this + 63) = v2;
  v5 = (HALS_ObjectMap **)*((_QWORD *)this + 68);
  v6 = (HALS_ObjectMap **)*((_QWORD *)this + 69);
  if (v5 != v6)
  {
    do
    {
      if (*v5)
      {
        (*(void (**)(HALS_ObjectMap *))(*(_QWORD *)*v5 + 8))(*v5);
        HALS_ObjectMap::ReleaseObject(*v5, v7);
      }
      ++v5;
    }
    while (v5 != v6);
    v5 = (HALS_ObjectMap **)*((_QWORD *)this + 68);
  }
  *((_QWORD *)this + 69) = v5;
  (*(void (**)(_QWORD))(**((_QWORD **)this + 50) + 72))(*((_QWORD *)this + 50));
  if (*((_BYTE *)this + 384))
  {
    v8 = *((_QWORD *)this + 49);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    *((_BYTE *)this + 384) = 1;
    *((_QWORD *)this + 49) = 0;
  }
  v9 = (HALS_NotificationManager *)*((unsigned int *)this + 4);
  *(_QWORD *)&v10.mSelector = 0x676C6F62706C6723;
  v10.mElement = 0;
  HALS_Object::PropertiesChanged(this, v9, 0, 1, &v10);
}

uint64_t HALS_PlugIn::GetCommandGate(HALS_PlugIn *this)
{
  return *((_QWORD *)this + 46);
}

{
  return *((_QWORD *)this + 46);
}

uint64_t HALS_PlugIn::GetMIGDispatchQueue(HALS_PlugIn *this)
{
  return *((_QWORD *)this + 47);
}

{
  return *((_QWORD *)this + 47);
}

uint64_t HALS_PlugIn::CopyResourceBundle(HALS_PlugIn *this)
{
  HALB_Mutex *v1;
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v8 = 0;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK11HALS_PlugIn18CopyResourceBundleEv_block_invoke;
  v4[3] = &unk_1E696BE80;
  v4[4] = &v5;
  v4[5] = this;
  v1 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PlugIn *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v1, (uint64_t)v4);
  v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1B57E1E34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t HALS_PlugIn::HasProperty(HALS_PlugIn *this, HALS_Client *a2, const AudioObjectPropertyAddress *a3, HALS_Client *a4)
{
  AudioObjectPropertySelector mSelector;
  int v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;

  mSelector = a3->mSelector;
  if ((int)a3->mSelector <= 1920168546)
  {
    if (mSelector == 1668641652)
      return *((_DWORD *)this + 90) != 0;
    v8 = 1701733411;
  }
  else
  {
    if (mSelector == 1920168547)
      return HALS_PlugInObject::HasResourceBundle((uint64_t)this + 328, (uint64_t)a4);
    if (mSelector == 1953653102)
    {
      if (*((_DWORD *)this + 5) == 1953656941)
      {
        v11 = *((_QWORD *)this + 42);
        v12 = *(_QWORD *)(v11 + 400);
        v13 = *(std::__shared_weak_count **)(v11 + 408);
        if (v13)
        {
          p_shared_owners = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldxr(p_shared_owners);
          while (__stxr(v15 + 1, p_shared_owners));
        }
        if (a4)
          v16 = *((unsigned int *)a4 + 58);
        else
          v16 = 0;
        v9 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, const AudioObjectPropertyAddress *))(*(_QWORD *)v12 + 544))(v12, *((unsigned int *)this + 87), v16, a3);
        if (!v13)
          return v9;
        v22 = (unint64_t *)&v13->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
LABEL_35:
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        return v9;
      }
      return 0;
    }
    v8 = 1969841253;
  }
  if (mSelector != v8)
  {
    if (HALS_DeviceManager::HasProperty(this, a2, a3, a4))
      return 1;
    if ((*(unsigned int (**)(char *, _QWORD))(*((_QWORD *)this + 41) + 24))((char *)this + 328, a3->mSelector))
    {
      v17 = *((_QWORD *)this + 42);
      v18 = *(_QWORD *)(v17 + 400);
      v13 = *(std::__shared_weak_count **)(v17 + 408);
      if (v13)
      {
        v19 = (unint64_t *)&v13->__shared_owners_;
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }
      if (a4)
        v21 = *((unsigned int *)a4 + 58);
      else
        v21 = 0;
      v9 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, const AudioObjectPropertyAddress *))(*(_QWORD *)v18 + 544))(v18, *((unsigned int *)this + 87), v21, a3);
      if (!v13)
        return v9;
      v24 = (unint64_t *)&v13->__shared_owners_;
      do
        v23 = __ldaxr(v24);
      while (__stlxr(v23 - 1, v24));
      goto LABEL_35;
    }
    return 0;
  }
  return *((_DWORD *)this + 5) == 1953656941;
}

void sub_1B57E2060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t HALS_PlugIn::IsPropertySettable(HALS_PlugIn *this, HALS_Client *a2, AudioObjectPropertyAddress *a3, HALS_Client *a4)
{
  uint64_t v8;
  AudioObjectPropertySelector mSelector;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  std::__shared_weak_count *v35;

  v8 = 0;
  mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1920168546)
  {
    if (mSelector == 1920168547 || mSelector == 1953653102 || mSelector == 1969841253)
      return v8;
  }
  else
  {
    if (mSelector == 1668641652 || mSelector == 1701733411)
      return v8;
    if (mSelector == 1819173229)
    {
      v11 = *((_QWORD *)this + 42);
      v12 = *(_QWORD *)(v11 + 400);
      v13 = *(std::__shared_weak_count **)(v11 + 408);
      v34 = v12;
      v35 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
      }
      v16 = *((unsigned int *)this + 87);
      if (a4)
        v17 = *((unsigned int *)a4 + 58);
      else
        v17 = 0;
      v32 = 0x676C6F626C6E616DLL;
      v33 = 0;
      v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v12 + 552))(v12, v16, v17, &v32);
      if (!v13)
        return v8;
      v27 = (unint64_t *)&v13->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (v28)
        return v8;
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      v29 = v13;
      goto LABEL_42;
    }
  }
  if (!HALS_DeviceManager::HasProperty(this, a2, a3, a4))
  {
    if (!(*(unsigned int (**)(char *, _QWORD))(*((_QWORD *)this + 41) + 24))((char *)this + 328, a3->mSelector))return 0;
    v21 = *((_QWORD *)this + 42);
    v22 = *(_QWORD *)(v21 + 400);
    v23 = *(std::__shared_weak_count **)(v21 + 408);
    v34 = v22;
    v35 = v23;
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
    if (a4)
      v26 = *((unsigned int *)a4 + 58);
    else
      v26 = 0;
    v8 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *))(*(_QWORD *)v22 + 552))(v22, *((unsigned int *)this + 87), v26, a3);
    if (!v23)
      return v8;
    v30 = (unint64_t *)&v23->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (v31)
      return v8;
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    v29 = v23;
LABEL_42:
    std::__shared_weak_count::__release_weak(v29);
    return v8;
  }
  return HALS_DeviceManager::IsPropertySettable((uint64_t)this, (uint64_t)a2, (int *)a3);
}

void sub_1B57E229C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t HALS_PlugIn::GetPropertyDataSize(HALS_PlugIn *this, HALS_Client *a2, AudioObjectPropertyAddress *a3, uint64_t a4, _DWORD *a5, HALS_Client *a6)
{
  signed int mSelector;
  int v13;
  uint64_t v14;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  mSelector = a3->mSelector;
  if ((int)a3->mSelector <= 1851878763)
  {
    if (mSelector == 1668641652)
      return (12 * *((_DWORD *)this + 90));
    if (mSelector == 1701733411)
      return 4 * HALS_PlugIn::GetNumberEndPoints(this, a6);
    v13 = 1819173229;
  }
  else
  {
    if (mSelector > 1953653101)
    {
      if (mSelector == 1953653102 || mSelector == 1969841253)
        return 4;
      goto LABEL_19;
    }
    if (mSelector == 1851878764)
      return 8;
    v13 = 1920168547;
  }
  if (mSelector == v13)
    return 8;
LABEL_19:
  if (!HALS_DeviceManager::HasProperty(this, a2, a3, a6))
  {
    if (!(*(unsigned int (**)(char *, _QWORD))(*((_QWORD *)this + 41) + 24))((char *)this + 328, a3->mSelector))return 0;
    v17 = *((_QWORD *)this + 42);
    v18 = *(_QWORD *)(v17 + 400);
    v19 = *(std::__shared_weak_count **)(v17 + 408);
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(p_shared_owners);
      while (__stxr(v21 + 1, p_shared_owners));
    }
    if (a6)
      v22 = *((unsigned int *)a6 + 58);
    else
      v22 = 0;
    v14 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *, uint64_t, _DWORD *))(*(_QWORD *)v18 + 560))(v18, *((unsigned int *)this + 87), v22, a3, a4, a5);
    if (v19)
    {
      v23 = (unint64_t *)&v19->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    return v14;
  }
  return HALS_DeviceManager::GetPropertyDataSize(this, a2, a3, a4, a5, a6);
}

void sub_1B57E24B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void HALS_PlugIn::GetPropertyData(HALS_PlugIn *this, HALS_Client *a2, AudioObjectPropertyAddress *a3, uint64_t a4, unsigned int *a5, uint64_t *a6, uint64_t a7, const __CFString **a8, HALS_Client *a9)
{
  AudioObjectPropertySelector mSelector;
  HALS_ObjectMap *v18;
  HALS_Object *v19;
  int v20;
  unsigned int NumberEndPoints;
  uint64_t v22;
  uint64_t i;
  HALS_ObjectMap *v24;
  HALS_Object *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  _DWORD *exception;
  _DWORD *v48;
  _DWORD *v49;
  _DWORD *v50;
  _BYTE buf[18];
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  mSelector = a3->mSelector;
  if ((int)a3->mSelector <= 1920168546)
  {
    if (mSelector == 1668641652)
    {
      v33 = a4 / 0xC;
      if (*((_DWORD *)this + 90) < a4 / 0xC)
        v33 = *((_DWORD *)this + 90);
      if (v33)
      {
        v34 = 0;
        v35 = 0;
        do
        {
          if (v35 < *((unsigned int *)this + 90))
          {
            v36 = (char *)a6 + v34;
            v37 = (uint64_t *)(*((_QWORD *)this + 44) + v34);
            v38 = *v37;
            *((_DWORD *)v36 + 2) = *((_DWORD *)v37 + 2);
            *(_QWORD *)v36 = v38;
          }
          ++v35;
          v34 += 12;
        }
        while (12 * v33 != v34);
      }
      v26 = 12 * v33;
    }
    else
    {
      if (mSelector != 1701733411)
        goto LABEL_35;
      NumberEndPoints = HALS_PlugIn::GetNumberEndPoints(this, a9);
      if (a4 >> 2 >= NumberEndPoints)
        v22 = NumberEndPoints;
      else
        v22 = a4 >> 2;
      if ((_DWORD)v22)
      {
        for (i = 0; i != v22; ++i)
        {
          v24 = HALS_PlugIn::CopyEndPointByIndex(this, i, a9);
          *((_DWORD *)a6 + i) = *((_DWORD *)v24 + 4);
          HALS_ObjectMap::ReleaseObject(v24, v25);
        }
      }
      v26 = 4 * v22;
    }
LABEL_34:
    *a5 = v26;
    return;
  }
  if (mSelector == 1920168547)
  {
    if (a4 <= 7)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "HALS_PlugIn.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 591;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioDevicePropertyResourceBundle", buf, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69A1B30;
      exception[2] = 561211770;
    }
    *a6 = (uint64_t)HALS_PlugInObject::CopyResourceBundlePath((uint64_t)this + 328, (uint64_t)a9);
    v26 = 8;
    goto LABEL_34;
  }
  if (mSelector != 1953653102)
  {
    if (mSelector == 1969841253)
    {
      if (a7 <= 7)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_PlugIn.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 558;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugIn::GetPropertyData: the qualifier is the wrong size for kAudioTransportManagerPropertyTranslateUIDToEndPoint", buf, 0x12u);
        }
        v48 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v48 = &off_1E69A1B30;
        v48[2] = 1852797029;
      }
      if (!a8)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_PlugIn.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 559;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugIn::GetPropertyData: no qualifier data for kAudioHardwarePropertyDeviceForUID", buf, 0x12u);
        }
        v49 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v49 = &off_1E69A1B30;
        v49[2] = 1852797029;
      }
      if (a4 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_PlugIn.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 564;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugIn::GetPropertyData: bad property data size for kAudioTransportManagerPropertyTranslateUIDToEndPoint", buf, 0x12u);
        }
        v50 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v50 = &off_1E69A1B30;
        v50[2] = 561211770;
      }
      v18 = HALS_PlugIn::CopyEndPointByUID(this, *a8, a9);
      if (v18)
        v20 = *((_DWORD *)v18 + 4);
      else
        v20 = 0;
      *(_DWORD *)a6 = v20;
      *a5 = 4;
      HALS_ObjectMap::ReleaseObject(v18, v19);
      return;
    }
LABEL_35:
    if (HALS_DeviceManager::HasProperty(this, a2, a3, a9))
    {
      HALS_DeviceManager::GetPropertyData(this, (uint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
      return;
    }
    if ((*(unsigned int (**)(char *, _QWORD))(*((_QWORD *)this + 41) + 24))((char *)this + 328, a3->mSelector))
    {
      v39 = *((_QWORD *)this + 42);
      v40 = *(_QWORD *)(v39 + 400);
      v29 = *(std::__shared_weak_count **)(v39 + 408);
      *(_QWORD *)buf = v40;
      *(_QWORD *)&buf[8] = v29;
      if (v29)
      {
        p_shared_owners = (unint64_t *)&v29->__shared_owners_;
        do
          v42 = __ldxr(p_shared_owners);
        while (__stxr(v42 + 1, p_shared_owners));
      }
      v43 = a9 ? *((unsigned int *)a9 + 58) : 0;
      (*(void (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *, uint64_t, const __CFString **, uint64_t, unsigned int *, uint64_t *))(*(_QWORD *)v40 + 568))(v40, *((unsigned int *)this + 87), v43, a3, a7, a8, a4, a5, a6);
      if (v29)
      {
        v46 = (unint64_t *)&v29->__shared_owners_;
        do
          v45 = __ldaxr(v46);
        while (__stlxr(v45 - 1, v46));
        goto LABEL_47;
      }
    }
    return;
  }
  v27 = *((_QWORD *)this + 42);
  v28 = *(_QWORD *)(v27 + 400);
  v29 = *(std::__shared_weak_count **)(v27 + 408);
  *(_QWORD *)buf = v28;
  *(_QWORD *)&buf[8] = v29;
  if (v29)
  {
    v30 = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  if (a9)
    v32 = *((unsigned int *)a9 + 58);
  else
    v32 = 0;
  (*(void (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *, uint64_t, const __CFString **, uint64_t, unsigned int *, uint64_t *))(*(_QWORD *)v28 + 568))(v28, *((unsigned int *)this + 87), v32, a3, a7, a8, a4, a5, a6);
  if (v29)
  {
    v44 = (unint64_t *)&v29->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
LABEL_47:
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
}

void sub_1B57E2AEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void HALS_PlugIn::SetPropertyData(HALS_PlugIn *this, HALS_Client *a2, AudioObjectPropertyAddress *a3, uint64_t a4, const void *a5, uint64_t a6, const void *a7, HALS_Client *a8)
{
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  std::__shared_weak_count *v41;

  if (a3->mSelector == 1819173229)
  {
    v12 = *((_QWORD *)this + 42);
    v13 = *(_QWORD *)(v12 + 400);
    v14 = *(std::__shared_weak_count **)(v12 + 408);
    v40 = v13;
    v41 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
    }
    v17 = *((unsigned int *)this + 87);
    if (a8)
      v18 = *((unsigned int *)a8 + 58);
    else
      v18 = 0;
    v38 = 0x676C6F626C6E616DLL;
    v39 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD, _QWORD, uint64_t, const void *))(*(_QWORD *)v13 + 576))(v13, v17, v18, &v38, 0, 0, a4, a5);
    if (v14)
    {
      v33 = (unint64_t *)&v14->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        v35 = v14;
LABEL_27:
        std::__shared_weak_count::__release_weak(v35);
      }
    }
  }
  else
  {
    if (HALS_DeviceManager::HasProperty(this, a2, a3, a8)
      && HALS_DeviceManager::IsPropertySettable((uint64_t)this, (uint64_t)a2, (int *)a3))
    {
      HALS_Object::SetPropertyData((uint64_t)this, (uint64_t)a2, (uint64_t)a3, v23, v24, v25, v26, (uint64_t)a8);
    }
    if ((*(unsigned int (**)(char *, _QWORD))(*((_QWORD *)this + 41) + 24))((char *)this + 328, a3->mSelector))
    {
      v27 = *((_QWORD *)this + 42);
      v28 = *(_QWORD *)(v27 + 400);
      v29 = *(std::__shared_weak_count **)(v27 + 408);
      v40 = v28;
      v41 = v29;
      if (v29)
      {
        v30 = (unint64_t *)&v29->__shared_owners_;
        do
          v31 = __ldxr(v30);
        while (__stxr(v31 + 1, v30));
      }
      v32 = a8 ? *((unsigned int *)a8 + 58) : 0;
      (*(void (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *, uint64_t, const void *, uint64_t, const void *))(*(_QWORD *)v28 + 576))(v28, *((unsigned int *)this + 87), v32, a3, a6, a7, a4, a5);
      if (v29)
      {
        v36 = (unint64_t *)&v29->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          v35 = v29;
          goto LABEL_27;
        }
      }
    }
  }
}

void sub_1B57E2D0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t HALS_Object::AllowClientAccessToProperty()
{
  return 1;
}

uint64_t HALS_Object::GetLocalizedStringKey(HALS_Object *this, const AudioObjectPropertyAddress *a2)
{
  return 0;
}

void HALS_PlugIn::FlushAllQueues(AMCP::Utility::Dispatch_Queue **this)
{
  AMCP::Utility::Dispatch_Queue::flush_all_work(this[47]);
}

uint64_t HALS_PlugIn::DoAnyQueuesHaveWorkAfterFlush(HALS_PlugIn *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(*((_QWORD *)this + 47) + 33));
  return v1 & 1;
}

void HALS_PlugIn::_CopyBoxList(uint64_t a1, void **a2)
{
  HALS_ObjectMap **v2;
  HALS_ObjectMap **v3;
  void **v4;
  HALS_ObjectMap *v5;
  unint64_t v6;
  HALS_ObjectMap **v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  HALS_ObjectMap **v13;
  char *v14;
  char *v15;
  HALS_ObjectMap *v16;

  v2 = *(HALS_ObjectMap ***)(a1 + 568);
  v3 = *(HALS_ObjectMap ***)(a1 + 576);
  if (v2 != v3)
  {
    v4 = a2;
    do
    {
      HALS_ObjectMap::RetainObject(*v2, (HALS_Object *)a2);
      v5 = *v2;
      v7 = (HALS_ObjectMap **)v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 >= v6)
      {
        v9 = ((char *)v7 - (_BYTE *)*v4) >> 3;
        if ((unint64_t)(v9 + 1) >> 61)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v10 = v6 - (_QWORD)*v4;
        v11 = v10 >> 2;
        if (v10 >> 2 <= (unint64_t)(v9 + 1))
          v11 = v9 + 1;
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
          v12 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v12 = v11;
        if (v12)
          v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v12);
        else
          a2 = 0;
        v13 = (HALS_ObjectMap **)(v12 + 8 * v9);
        *v13 = v5;
        v8 = v13 + 1;
        v15 = (char *)*v4;
        v14 = (char *)v4[1];
        if (v14 != *v4)
        {
          do
          {
            v16 = (HALS_ObjectMap *)*((_QWORD *)v14 - 1);
            v14 -= 8;
            *--v13 = v16;
          }
          while (v14 != v15);
          v14 = (char *)*v4;
        }
        *v4 = v13;
        v4[1] = v8;
        v4[2] = (void *)(v12 + 8 * (_QWORD)a2);
        if (v14)
          operator delete(v14);
      }
      else
      {
        *v7 = v5;
        v8 = v7 + 1;
      }
      v4[1] = v8;
      ++v2;
    }
    while (v2 != v3);
  }
}

void HALS_PlugIn::_CopyClockDeviceList(uint64_t a1, void **a2)
{
  HALS_ObjectMap **v2;
  HALS_ObjectMap **v3;
  void **v4;
  HALS_ObjectMap *v5;
  unint64_t v6;
  HALS_ObjectMap **v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  HALS_ObjectMap **v13;
  char *v14;
  char *v15;
  HALS_ObjectMap *v16;

  v2 = *(HALS_ObjectMap ***)(a1 + 544);
  v3 = *(HALS_ObjectMap ***)(a1 + 552);
  if (v2 != v3)
  {
    v4 = a2;
    do
    {
      HALS_ObjectMap::RetainObject(*v2, (HALS_Object *)a2);
      v5 = *v2;
      v7 = (HALS_ObjectMap **)v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 >= v6)
      {
        v9 = ((char *)v7 - (_BYTE *)*v4) >> 3;
        if ((unint64_t)(v9 + 1) >> 61)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v10 = v6 - (_QWORD)*v4;
        v11 = v10 >> 2;
        if (v10 >> 2 <= (unint64_t)(v9 + 1))
          v11 = v9 + 1;
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
          v12 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v12 = v11;
        if (v12)
          v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v12);
        else
          a2 = 0;
        v13 = (HALS_ObjectMap **)(v12 + 8 * v9);
        *v13 = v5;
        v8 = v13 + 1;
        v15 = (char *)*v4;
        v14 = (char *)v4[1];
        if (v14 != *v4)
        {
          do
          {
            v16 = (HALS_ObjectMap *)*((_QWORD *)v14 - 1);
            v14 -= 8;
            *--v13 = v16;
          }
          while (v14 != v15);
          v14 = (char *)*v4;
        }
        *v4 = v13;
        v4[1] = v8;
        v4[2] = (void *)(v12 + 8 * (_QWORD)a2);
        if (v14)
          operator delete(v14);
      }
      else
      {
        *v7 = v5;
        v8 = v7 + 1;
      }
      v4[1] = v8;
      ++v2;
    }
    while (v2 != v3);
  }
}

void HALS_PlugIn::_CopyIODeviceList(_QWORD *a1, void **a2)
{
  void **v2;
  HALS_ObjectMap **v4;
  HALS_ObjectMap **i;
  HALS_ObjectMap *v6;
  unint64_t v7;
  HALS_ObjectMap **v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  HALS_ObjectMap **v14;
  char *v15;
  char *v16;
  HALS_ObjectMap *v17;
  HALS_ObjectMap **j;
  HALS_ObjectMap **v19;
  HALS_ObjectMap *v20;
  unint64_t v21;
  HALS_ObjectMap **v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  HALS_ObjectMap **v28;
  char *v29;
  char *v30;
  HALS_ObjectMap *v31;

  v2 = a2;
  v4 = (HALS_ObjectMap **)a1[68];
  for (i = (HALS_ObjectMap **)a1[69]; v4 != i; ++v4)
  {
    HALS_ObjectMap::RetainObject(*v4, (HALS_Object *)a2);
    v6 = *v4;
    v8 = (HALS_ObjectMap **)v2[1];
    v7 = (unint64_t)v2[2];
    if ((unint64_t)v8 >= v7)
    {
      v10 = ((char *)v8 - (_BYTE *)*v2) >> 3;
      if ((unint64_t)(v10 + 1) >> 61)
LABEL_38:
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v11 = v7 - (_QWORD)*v2;
      v12 = v11 >> 2;
      if (v11 >> 2 <= (unint64_t)(v10 + 1))
        v12 = v10 + 1;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
        v13 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      if (v13)
        v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v13);
      else
        a2 = 0;
      v14 = (HALS_ObjectMap **)(v13 + 8 * v10);
      *v14 = v6;
      v9 = v14 + 1;
      v16 = (char *)*v2;
      v15 = (char *)v2[1];
      if (v15 != *v2)
      {
        do
        {
          v17 = (HALS_ObjectMap *)*((_QWORD *)v15 - 1);
          v15 -= 8;
          *--v14 = v17;
        }
        while (v15 != v16);
        v15 = (char *)*v2;
      }
      *v2 = v14;
      v2[1] = v9;
      v2[2] = (void *)(v13 + 8 * (_QWORD)a2);
      if (v15)
        operator delete(v15);
    }
    else
    {
      *v8 = v6;
      v9 = v8 + 1;
    }
    v2[1] = v9;
  }
  v19 = (HALS_ObjectMap **)a1[62];
  for (j = (HALS_ObjectMap **)a1[63]; v19 != j; ++v19)
  {
    HALS_ObjectMap::RetainObject(*v19, (HALS_Object *)a2);
    v20 = *v19;
    v22 = (HALS_ObjectMap **)v2[1];
    v21 = (unint64_t)v2[2];
    if ((unint64_t)v22 >= v21)
    {
      v24 = ((char *)v22 - (_BYTE *)*v2) >> 3;
      if ((unint64_t)(v24 + 1) >> 61)
        goto LABEL_38;
      v25 = v21 - (_QWORD)*v2;
      v26 = v25 >> 2;
      if (v25 >> 2 <= (unint64_t)(v24 + 1))
        v26 = v24 + 1;
      if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
        v27 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v27 = v26;
      if (v27)
        v27 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v27);
      else
        a2 = 0;
      v28 = (HALS_ObjectMap **)(v27 + 8 * v24);
      *v28 = v20;
      v23 = v28 + 1;
      v30 = (char *)*v2;
      v29 = (char *)v2[1];
      if (v29 != *v2)
      {
        do
        {
          v31 = (HALS_ObjectMap *)*((_QWORD *)v29 - 1);
          v29 -= 8;
          *--v28 = v31;
        }
        while (v29 != v30);
        v29 = (char *)*v2;
      }
      *v2 = v28;
      v2[1] = v23;
      v2[2] = (void *)(v27 + 8 * (_QWORD)a2);
      if (v29)
        operator delete(v29);
    }
    else
    {
      *v22 = v20;
      v23 = v22 + 1;
    }
    v2[1] = v23;
  }
}

uint64_t HALS_DeviceManager::CopyMetaDeviceByIsolatedUseCaseID()
{
  return 0;
}

void HALS_PlugIn::_CopyDeviceList(uint64_t a1, void **a2)
{
  HALS_ObjectMap **v2;
  HALS_ObjectMap **v3;
  void **v4;
  HALS_ObjectMap *v5;
  unint64_t v6;
  HALS_ObjectMap **v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  HALS_ObjectMap **v13;
  char *v14;
  char *v15;
  HALS_ObjectMap *v16;

  v2 = *(HALS_ObjectMap ***)(a1 + 496);
  v3 = *(HALS_ObjectMap ***)(a1 + 504);
  if (v2 != v3)
  {
    v4 = a2;
    do
    {
      HALS_ObjectMap::RetainObject(*v2, (HALS_Object *)a2);
      v5 = *v2;
      v7 = (HALS_ObjectMap **)v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 >= v6)
      {
        v9 = ((char *)v7 - (_BYTE *)*v4) >> 3;
        if ((unint64_t)(v9 + 1) >> 61)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v10 = v6 - (_QWORD)*v4;
        v11 = v10 >> 2;
        if (v10 >> 2 <= (unint64_t)(v9 + 1))
          v11 = v9 + 1;
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
          v12 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v12 = v11;
        if (v12)
          v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v12);
        else
          a2 = 0;
        v13 = (HALS_ObjectMap **)(v12 + 8 * v9);
        *v13 = v5;
        v8 = v13 + 1;
        v15 = (char *)*v4;
        v14 = (char *)v4[1];
        if (v14 != *v4)
        {
          do
          {
            v16 = (HALS_ObjectMap *)*((_QWORD *)v14 - 1);
            v14 -= 8;
            *--v13 = v16;
          }
          while (v14 != v15);
          v14 = (char *)*v4;
        }
        *v4 = v13;
        v4[1] = v8;
        v4[2] = (void *)(v12 + 8 * (_QWORD)a2);
        if (v14)
          operator delete(v14);
      }
      else
      {
        *v7 = v5;
        v8 = v7 + 1;
      }
      v4[1] = v8;
      ++v2;
    }
    while (v2 != v3);
  }
}

void HALS_PlugIn::HandlePlugIn_PropertiesChanged(HALS_PlugIn *this, uint64_t a2, const AudioObjectPropertyAddress *a3)
{
  uint64_t v6;
  int v7;
  char v8;
  int v9;
  char v10;
  const AudioObjectPropertyAddress *v11;
  AudioObjectPropertySelector v12;
  AudioObjectPropertySelector mSelector;
  int v14;
  int v15;
  int v16;
  __int128 v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  void *__p[2];
  uint64_t v35;

  __p[0] = 0;
  __p[1] = 0;
  v35 = 0;
  if ((_DWORD)a2)
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    do
    {
      v11 = &a3[v6];
      while (1)
      {
        mSelector = v11->mSelector;
        ++v11;
        v12 = mSelector;
        if (mSelector != 1684370979)
          break;
        ++v6;
        v10 = 1;
        if (a2 == v6)
          goto LABEL_20;
      }
      if (v12 == 1668049699)
        v14 = 1;
      else
        v14 = v7;
      if (v12 == 1701733411)
        v15 = 1;
      else
        v15 = v9;
      if (v12 == 1701733411)
        v14 = v7;
      if (v12 == 1651472419)
      {
        v8 = 1;
      }
      else
      {
        v9 = v15;
        v7 = v14;
      }
      ++v6;
    }
    while (v6 != a2);
    if ((v10 & 1) != 0)
    {
LABEL_20:
      HALS_PlugIn::RebuildDeviceList((HALS_PlugIn *)&v32, (uint64_t)this);
      *(_OWORD *)__p = v32;
      v35 = v33;
      v16 = 1;
      if ((v9 & 1) == 0)
        goto LABEL_22;
      goto LABEL_21;
    }
    v16 = 0;
    if ((v9 & 1) != 0)
LABEL_21:
      HALS_PlugIn::RebuildEndPointList((uint64_t)this);
LABEL_22:
    if ((v8 & 1) != 0)
      HALS_PlugIn::RebuildBoxList(this);
    if ((v7 & 1) != 0)
      HALS_PlugIn::RebuildClockDeviceList(this);
  }
  else
  {
    v16 = 0;
  }
  HALS_Object::PropertiesChanged(this, (HALS_NotificationManager *)*((unsigned int *)this + 4), 0, a2, a3);
  if (v16)
  {
    v30 = 0;
    v31 = 0;
    HALS_System::GetInstance(&v32, 0, &v30);
    v17 = v32;
    if (*((_QWORD *)&v32 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v17 + 1) + 16))(*((_QWORD *)&v17 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v17 + 1));
      }
    }
    if (!v31)
      goto LABEL_37;
    v20 = (unint64_t *)(v31 + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v17 + 1) + 16))(*((_QWORD *)&v17 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v17 + 1));
      if (!(_QWORD)v17)
        goto LABEL_49;
    }
    else
    {
LABEL_37:
      if (!(_QWORD)v17)
        goto LABEL_49;
    }
    v28 = 0;
    v29 = 0;
    HALS_System::GetInstance(&v32, 0, &v28);
    HALS_System::CheckForDefaultDeviceChanges((HALS_PlatformBehaviors *)v32, (uint64_t)__p);
    v22 = (std::__shared_weak_count *)*((_QWORD *)&v32 + 1);
    if (*((_QWORD *)&v32 + 1))
    {
      v23 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v25 = v29;
    if (v29)
    {
      p_shared_owners = (unint64_t *)&v29->__shared_owners_;
      do
        v27 = __ldaxr(p_shared_owners);
      while (__stlxr(v27 - 1, p_shared_owners));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
  }
LABEL_49:
  if (__p[0])
    operator delete(__p[0]);
}

void sub_1B57E34DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'HALS_PlugIn::~HALS_PlugIn(HALS_PlugIn *this)
{
  HALS_PlugIn::~HALS_PlugIn((HALS_PlugIn *)((char *)this - 328));
}

{
  HALS_PlugIn::~HALS_PlugIn((HALS_PlugIn *)((char *)this - 328));
  JUMPOUT(0x1B5E50688);
}

void `non-virtual thunk to'HALS_PlugIn::HandlePlugIn_PropertiesChanged(HALS_PlugIn *this, uint64_t a2, const AudioObjectPropertyAddress *a3)
{
  HALS_PlugIn::HandlePlugIn_PropertiesChanged((HALS_PlugIn *)((char *)this - 328), a2, a3);
}

uint64_t HALS_PlugIn::RebuildDeviceList(HALS_PlugIn *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  HALS_ObjectMap **v14;
  HALS_ObjectMap **v15;
  int v16;
  HALS_ObjectMap **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  HALS_ObjectMap **v21;
  HALS_ObjectMap **v22;
  unsigned int v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  int v27;
  uint64_t v29;
  int *v30;
  int v31;
  HALS_Object *v32;
  HALS_Device *v33;
  HALB_Mutex *v34;
  uint64_t v35;
  HALS_Object *v36;
  HALS_ObjectMap *v37;
  uint64_t v38;
  uint64_t v39;
  HALB_Info *v40;
  HALS_PlugInDevice *v41;
  int v42;
  unint64_t v43;
  _DWORD *v44;
  _DWORD *v45;
  HALS_PlugIn *v46;
  _DWORD *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _DWORD *v52;
  int v53;
  HALS_Object *v54;
  uint64_t v56;
  uint64_t v57;
  HALS_PlugIn *v58;
  HALS_ObjectMap **v59;
  HALS_ObjectMap **v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(uint64_t);
  void *v66;
  uint64_t v67;
  HALS_Device *v68;
  int v69;
  unsigned int v70;
  uint8_t buf[10];
  __int16 v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  v4 = *(_QWORD *)(a2 + 400);
  v5 = *(unsigned int *)(a2 + 348);
  v63 = 0x676C6F6264657623;
  LODWORD(v64) = 0;
  v62 = (*(unsigned int (**)(uint64_t, uint64_t, _QWORD, uint64_t *, _QWORD, _QWORD))(*(_QWORD *)v4 + 560))(v4, v5, 0, &v63, 0, 0) >> 2;
  v6 = operator new[]();
  v7 = *(_QWORD *)(a2 + 400);
  v8 = *(unsigned int *)(a2 + 348);
  v63 = 0x676C6F6264657623;
  LODWORD(v64) = 0;
  v58 = this;
  (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t *, _QWORD, _QWORD, _QWORD, unsigned int *, uint64_t))(*(_QWORD *)v7 + 568))(v7, v8, 0, &v63, 0, 0, 4 * v62, &v62, v6);
  v62 >>= 2;
  v59 = 0;
  v60 = 0;
  v61 = 0;
  HALS_DeviceManager::CopyDeviceList((HALS_DeviceManager *)a2, (HALS_DeviceManager::BasicDeviceList *)&v59, 1, 0);
  v9 = operator new[]();
  v10 = v9;
  v11 = v62;
  if (v62)
  {
    v12 = 0;
    LODWORD(v13) = 0;
    v14 = v59;
    v15 = v60;
    do
    {
      v16 = *(_DWORD *)(v6 + 4 * v12);
      v17 = v14;
      while (v17 != v15)
      {
        v18 = (uint64_t)*v17++;
        if (v16 == *(_DWORD *)(v18 + 1324))
          goto LABEL_8;
      }
      *(_DWORD *)(v9 + 4 * v13) = v16;
      LODWORD(v13) = v13 + 1;
LABEL_8:
      ++v12;
    }
    while (v12 != v11);
  }
  else
  {
    LODWORD(v13) = 0;
  }
  v19 = operator new[]();
  v20 = v19;
  v21 = v59;
  v22 = v60;
  v57 = v19;
  if (v59 != v60)
  {
    v23 = 0;
    v24 = v62;
    do
    {
      v25 = *((_DWORD *)*v21 + 331);
      if (!(_DWORD)v24)
        goto LABEL_21;
      v26 = 0;
      do
        v27 = *(_DWORD *)(v6 + 4 * v26++);
      while (v25 != v27 && v26 < v24);
      if (v25 != v27)
LABEL_21:
        *(_DWORD *)(v19 + 4 * v23++) = v25;
      ++v21;
    }
    while (v21 != v22);
    if (v23)
    {
      v29 = v23;
      v30 = (int *)v19;
      do
      {
        v31 = *v30++;
        v33 = (HALS_Device *)HALS_PlugIn::CopyDeviceByUCID((HALS_PlugIn *)a2, v31);
        if (v33)
        {
          HALS_System::DeviceDied(*(HALS_System **)(a2 + 320), v33);
          (*(void (**)(HALS_Device *))(*(_QWORD *)v33 + 456))(v33);
          (*(void (**)(HALS_Device *))(*(_QWORD *)v33 + 8))(v33);
          v63 = MEMORY[0x1E0C809B0];
          v64 = 0x40000000;
          v65 = ___ZN11HALS_PlugIn12RemoveDeviceEP17HALS_PlugInDevice_block_invoke;
          v66 = &__block_descriptor_tmp_20;
          v67 = a2;
          v68 = v33;
          v34 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
          HALB_CommandGate::ExecuteCommand(v34, (uint64_t)&v63);
        }
        HALS_ObjectMap::ReleaseObject(v33, v32);
        --v29;
      }
      while (v29);
    }
  }
  if ((_DWORD)v13)
  {
    v35 = 0;
    v13 = v13;
    v56 = v13;
    do
    {
      v37 = (HALS_ObjectMap *)HALS_PlugIn::CopyDeviceByUCID((HALS_PlugIn *)a2, *(_DWORD *)(v10 + 4 * v35));
      if (!v37)
      {
        v38 = *(_QWORD *)(a2 + 400);
        v39 = *(unsigned int *)(v10 + 4 * v35);
        strcpy((char *)buf, "salcbolg");
        buf[9] = 0;
        v72 = 0;
        v70 = 0;
        v69 = 0;
        (*(void (**)(uint64_t, uint64_t, _QWORD, uint8_t *, _QWORD, _QWORD, uint64_t, int *, unsigned int *))(*(_QWORD *)v38 + 568))(v38, v39, 0, buf, 0, 0, 4, &v69, &v70);
        v40 = (HALB_Info *)v70;
        v41 = (HALS_PlugInDevice *)operator new();
        HALS_PlugInDevice::HALS_PlugInDevice(v41, v40, (HALS_PlugIn *)a2, *(unsigned int *)(v10 + 4 * v35));
        (**(void (***)(HALS_PlugInDevice *))v41)(v41);
        HALS_PlugIn::AddDevice((HALS_PlugIn *)a2, v41);
        HALS_Device::UpdateInternalIOContext(v41);
        HALS_System::DeviceArrived(*(os_unfair_lock_s ***)(a2 + 320), v41);
        v42 = *((_DWORD *)v41 + 4);
        v44 = (_DWORD *)*((_QWORD *)v58 + 1);
        v43 = *((_QWORD *)v58 + 2);
        if ((unint64_t)v44 >= v43)
        {
          v47 = *(_DWORD **)v58;
          v48 = ((uint64_t)v44 - *(_QWORD *)v58) >> 2;
          v49 = v48 + 1;
          if ((unint64_t)(v48 + 1) >> 62)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          v50 = v43 - (_QWORD)v47;
          if (v50 >> 1 > v49)
            v49 = v50 >> 1;
          if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL)
            v51 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v51 = v49;
          if (v51)
            v51 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v51);
          else
            v36 = 0;
          v52 = (_DWORD *)(v51 + 4 * v48);
          *v52 = v42;
          v45 = v52 + 1;
          if (v44 == v47)
          {
            v46 = v58;
            v13 = v56;
          }
          else
          {
            v46 = v58;
            v13 = v56;
            do
            {
              v53 = *--v44;
              *--v52 = v53;
            }
            while (v44 != v47);
          }
          *(_QWORD *)v46 = v52;
          *((_QWORD *)v46 + 1) = v45;
          *((_QWORD *)v46 + 2) = v51 + 4 * (_QWORD)v36;
          if (v47)
            operator delete(v47);
        }
        else
        {
          *v44 = v42;
          v45 = v44 + 1;
          v46 = v58;
        }
        *((_QWORD *)v46 + 1) = v45;
        v20 = v57;
      }
      HALS_ObjectMap::ReleaseObject(v37, v36);
      ++v35;
    }
    while (v35 != v13);
  }
  MEMORY[0x1B5E50664](v20, 0x1000C8052888210);
  MEMORY[0x1B5E50664](v10, 0x1000C8052888210);
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(&v59, v54);
  return MEMORY[0x1B5E50664](v6, 0x1000C8052888210);
}

void sub_1B57E3E14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  uint64_t v10;
  HALS_Object *v11;
  void *v12;
  _Unwind_Exception *v13;
  va_list va;

  va_start(va, a9);
  __cxa_end_catch();
  MEMORY[0x1B5E50664](a8, 0x1000C8052888210);
  MEMORY[0x1B5E50664](v10, 0x1000C8052888210);
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList((HALS_ObjectMap ***)va, v11);
  MEMORY[0x1B5E50664](v9, 0x1000C8052888210);
  v12 = *(void **)a9;
  if (*(_QWORD *)a9)
  {
    *(_QWORD *)(a9 + 8) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(v13);
}

void sub_1B57E3ECC()
{
  _Unwind_Exception *v0;

  _Unwind_Resume(v0);
}

void sub_1B57E3ED8(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1B57E3EE4);
  JUMPOUT(0x1B57E3EECLL);
}

uint64_t HALS_PlugIn::RebuildEndPointList(uint64_t this)
{
  HALS_PlugIn *v1;
  int v2;
  int v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(HALS_PlugIn *);
  HALB_Mutex *v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t *v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unint64_t v28;
  int v29;
  unint64_t v30;
  int v31;
  uint64_t v33;
  int *v34;
  int v35;
  uint64_t v36;
  HALS_Object *v37;
  HALS_ObjectMap *v38;
  HALB_Mutex *v39;
  uint64_t v40;
  int *v41;
  HALS_Object *v42;
  HALS_ObjectMap *v43;
  HALS_PlugInDevice *v44;
  HALB_Mutex *v45;
  HALS_Object *v46;
  _QWORD v47[6];
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  __n128 (*v51)(_QWORD *, uint64_t);
  void (*v52)(uint64_t, HALS_Object *);
  HALS_ObjectMap **v53[3];
  unsigned int v54;
  _QWORD v55[6];
  _QWORD v56[7];
  _QWORD v57[3];
  int v58;

  v1 = (HALS_PlugIn *)this;
  v3 = *(_DWORD *)(this + 20);
  v2 = *(_DWORD *)(this + 24);
  if (v3 == v2 || v3 == 1953656941)
  {
    if (v3 != 1953656941 && v3 == v2)
      return this;
  }
  else if (v2 != 1953656941)
  {
    return this;
  }
  v54 = 0;
  v6 = *(_QWORD *)(this + 400);
  v7 = *((unsigned int *)v1 + 87);
  v48 = 0x676C6F62656E6423;
  LODWORD(v49) = 0;
  v54 = (*(unsigned int (**)(uint64_t, uint64_t, _QWORD, uint64_t *, _QWORD, _QWORD))(*(_QWORD *)v6 + 560))(v6, v7, 0, &v48, 0, 0) >> 2;
  v8 = operator new[]();
  v9 = *((_QWORD *)v1 + 50);
  v10 = *((unsigned int *)v1 + 87);
  v48 = 0x676C6F62656E6423;
  LODWORD(v49) = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t *, _QWORD, _QWORD, _QWORD, unsigned int *, uint64_t))(*(_QWORD *)v9 + 568))(v9, v10, 0, &v48, 0, 0, 4 * v54, &v54, v8);
  v54 >>= 2;
  v48 = 0;
  v49 = &v48;
  v50 = 0x4002000000;
  v51 = __Block_byref_object_copy__23;
  v52 = __Block_byref_object_dispose__24;
  memset(v53, 0, sizeof(v53));
  v47[1] = 0x40000000;
  v47[2] = ___ZN11HALS_PlugIn19RebuildEndPointListEv_block_invoke;
  v47[3] = &unk_1E696C000;
  v47[4] = &v48;
  v47[5] = v1;
  v11 = *(uint64_t (**)(HALS_PlugIn *))(*(_QWORD *)v1 + 56);
  v47[0] = MEMORY[0x1E0C809B0];
  v12 = (HALB_Mutex *)v11(v1);
  HALB_CommandGate::ExecuteCommand(v12, (uint64_t)v47);
  v13 = operator new[]();
  v14 = (int *)v13;
  v15 = v54;
  if (v54)
  {
    v16 = 0;
    v17 = 0;
    v18 = (uint64_t *)v49[5];
    v19 = (uint64_t *)v49[6];
    do
    {
      v20 = *(_DWORD *)(v8 + 4 * v16);
      v21 = v18;
      while (v21 != v19)
      {
        v22 = *v21++;
        if (v20 == *(_DWORD *)(v22 + 1324))
          goto LABEL_20;
      }
      *(_DWORD *)(v13 + 4 * v17++) = v20;
LABEL_20:
      ++v16;
    }
    while (v16 != v15);
  }
  else
  {
    v17 = 0;
  }
  v23 = operator new[]();
  v24 = v23;
  v25 = v49[5];
  v26 = v49[6];
  if (v25 != v26)
  {
    v27 = 0;
    v28 = v54;
    do
    {
      v29 = *(_DWORD *)(*(_QWORD *)v25 + 1324);
      if (!(_DWORD)v28)
        goto LABEL_33;
      v30 = 0;
      do
        v31 = *(_DWORD *)(v8 + 4 * v30++);
      while (v29 != v31 && v30 < v28);
      if (v29 != v31)
LABEL_33:
        *(_DWORD *)(v23 + 4 * v27++) = v29;
      v25 += 8;
    }
    while (v25 != v26);
    if (v27)
    {
      v33 = v27;
      v34 = (int *)v23;
      do
      {
        v35 = *v34++;
        v36 = HALS_PlugIn::CopyEndPointByUCID(v1, v35);
        v38 = (HALS_ObjectMap *)v36;
        if (v36)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
          v55[0] = MEMORY[0x1E0C809B0];
          v55[1] = 0x40000000;
          v55[2] = ___ZN11HALS_PlugIn14RemoveEndPointEP17HALS_PlugInDevice_block_invoke;
          v55[3] = &__block_descriptor_tmp_34;
          v55[4] = v1;
          v55[5] = v38;
          v39 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PlugIn *))(*(_QWORD *)v1 + 56))(v1);
          HALB_CommandGate::ExecuteCommand(v39, (uint64_t)v55);
        }
        HALS_ObjectMap::ReleaseObject(v38, v37);
        --v33;
      }
      while (v33);
    }
  }
  if (v17)
  {
    v40 = v17;
    v41 = v14;
    do
    {
      v43 = (HALS_ObjectMap *)HALS_PlugIn::CopyEndPointByUCID(v1, *v41);
      if (!v43)
      {
        v44 = (HALS_PlugInDevice *)operator new();
        HALS_PlugInDevice::HALS_PlugInDevice(v44, (HALB_Info *)0x656E6470, v1, *v41);
        (**(void (***)(HALS_PlugInDevice *))v44)(v44);
        v57[0] = 0;
        v57[1] = v57;
        v57[2] = 0x2000000000;
        v58 = 0;
        v56[0] = MEMORY[0x1E0C809B0];
        v56[1] = 0x40000000;
        v56[2] = ___ZN11HALS_PlugIn11AddEndPointEP17HALS_PlugInDevice_block_invoke;
        v56[3] = &unk_1E696C050;
        v56[4] = v57;
        v56[5] = v1;
        v56[6] = v44;
        v45 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PlugIn *))(*(_QWORD *)v1 + 56))(v1);
        HALB_CommandGate::ExecuteCommand(v45, (uint64_t)v56);
        _Block_object_dispose(v57, 8);
      }
      HALS_ObjectMap::ReleaseObject(v43, v42);
      ++v41;
      --v40;
    }
    while (v40);
  }
  MEMORY[0x1B5E50664](v24, 0x1000C8052888210);
  MEMORY[0x1B5E50664](v14, 0x1000C8052888210);
  _Block_object_dispose(&v48, 8);
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(v53, v46);
  return MEMORY[0x1B5E50664](v8, 0x1000C8052888210);
}

void sub_1B57E4408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, HALS_ObjectMap ***a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  HALS_Object *v22;

  MEMORY[0x1B5E50664](v20, 0x1000C8052888210);
  MEMORY[0x1B5E50664](v19, 0x1000C8052888210);
  _Block_object_dispose(&a18, 8);
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(a11, v22);
  MEMORY[0x1B5E50664](v18, 0x1000C8052888210);
  _Unwind_Resume(a1);
}

void HALS_PlugIn::RebuildBoxList(HALS_PlugIn *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  HALB_Mutex *v9;
  _QWORD v10[6];
  void *__p;
  void *v12;
  uint64_t v13;
  std::vector<unsigned int>::value_type __x[2];
  int v15;
  std::vector<unsigned int> v16;
  unsigned int v17;
  _QWORD v18[3];
  char v19;

  v18[0] = 0;
  v18[1] = v18;
  v18[2] = 0x2000000000;
  v19 = 0;
  v2 = *((_QWORD *)this + 50);
  v3 = *((unsigned int *)this + 87);
  v16.__begin_ = (std::vector<unsigned int>::pointer)0x676C6F62626F7823;
  LODWORD(v16.__end_) = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD, std::vector<unsigned int> *))(*(_QWORD *)v2 + 544))(v2, v3, 0, &v16))
  {
    v4 = *((_QWORD *)this + 50);
    v5 = *((unsigned int *)this + 87);
    v16.__begin_ = (std::vector<unsigned int>::pointer)0x676C6F62626F7823;
    LODWORD(v16.__end_) = 0;
    v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, std::vector<unsigned int> *, _QWORD, _QWORD))(*(_QWORD *)v4 + 560))(v4, v5, 0, &v16, 0, 0);
    v17 = v6 >> 2;
    __x[0] = 0;
    std::vector<unsigned int>::vector(&v16, v6 >> 2, __x);
    if (v6 >= 4)
    {
      v7 = *((_QWORD *)this + 50);
      v8 = *((unsigned int *)this + 87);
      *(_QWORD *)__x = 0x676C6F62626F7823;
      v15 = 0;
      (*(void (**)(uint64_t, uint64_t, _QWORD, std::vector<unsigned int>::value_type *, _QWORD, _QWORD, _QWORD, unsigned int *, std::vector<unsigned int>::pointer))(*(_QWORD *)v7 + 568))(v7, v8, 0, __x, 0, 0, v6 & 0xFFFFFFFC, &v17, v16.__begin_);
      v17 >>= 2;
    }
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 1174405120;
    v10[2] = ___ZN11HALS_PlugIn14RebuildBoxListEv_block_invoke;
    v10[3] = &unk_1E696C098;
    v10[4] = v18;
    v10[5] = this;
    v12 = 0;
    v13 = 0;
    __p = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v16.__begin_, (uint64_t)v16.__end_, v16.__end_ - v16.__begin_);
    v9 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PlugIn *))(*(_QWORD *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v9, (uint64_t)v10);
    if (__p)
    {
      v12 = __p;
      operator delete(__p);
    }
    if (v16.__begin_)
    {
      v16.__end_ = v16.__begin_;
      operator delete(v16.__begin_);
    }
  }
  _Block_object_dispose(v18, 8);
}

void sub_1B57E4654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  uint64_t v22;

  if (__p)
    operator delete(__p);
  _Block_object_dispose((const void *)(v22 - 64), 8);
  _Unwind_Resume(a1);
}

void HALS_PlugIn::RebuildClockDeviceList(HALS_PlugIn *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  HALB_Mutex *v8;
  HALS_Object *v9;
  std::vector<unsigned int>::pointer begin;
  std::vector<unsigned int>::pointer end;
  unsigned int *v12;
  unint64_t v13;
  unsigned int *v14;
  HALS_ObjectMap **v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  HALS_ObjectMap **v21;
  HALS_ObjectMap **v22;
  int *v23;
  int *v24;
  unint64_t v25;
  int *v26;
  unsigned int *v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  int *v32;
  int v33;
  int *v34;
  unsigned int *v35;
  HALS_Object *v36;
  HALS_ObjectMap *v37;
  HALS_System *v38;
  const BOOL *v39;
  unsigned int v40;
  const __CFString *v41;
  HALB_Mutex *v42;
  HALS_PlugIn *v43;
  int *v44;
  HALS_Object *v45;
  HALS_ObjectMap *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *p_shared_owners;
  unint64_t v52;
  uint64_t v53;
  HALS_Object *v54;
  HALS_Object *v55;
  unint64_t *v56;
  unint64_t v57;
  char *v58;
  HALB_Mutex *v59;
  int v60;
  AMCP::Log::Scope_Registry *v61;
  HALS_System *v62;
  const BOOL *v63;
  unsigned int v64;
  const __CFString *v65;
  NSObject *v66;
  _opaque_pthread_t *v67;
  mach_port_t v68;
  void *exception;
  uint64_t v70;
  void *v71;
  std::runtime_error_vtbl *v72;
  std::runtime_error_vtbl *v73;
  HALS_PlugIn *v74;
  unsigned int *v75;
  std::runtime_error v76;
  char v77;
  HALS_ObjectMap **v78;
  HALS_ObjectMap **v79;
  uint64_t v80;
  std::vector<unsigned int> v81;
  unsigned int v82;
  _QWORD v83[6];
  void *__p[2];
  void *v85;
  std::runtime_error v86;
  void *v87;
  _QWORD v88[3];
  int v89;
  void *v90;
  char v91;
  uint64_t v92;
  uint64_t (**v93)();
  __int128 v94;
  void *v95;
  std::vector<unsigned int>::value_type *v96;
  HALS_PlugIn *v97;
  uint64_t v98;
  std::vector<unsigned int>::value_type __x[2];
  __int128 v100;
  __int128 v101;
  const char *v102;
  int v103;
  uint64_t v104;

  v104 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 50);
  v3 = *((unsigned int *)this + 87);
  *(_QWORD *)__x = 0x676C6F62636C6B23;
  LODWORD(v100) = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD, std::vector<unsigned int>::value_type *))(*(_QWORD *)v2 + 544))(v2, v3, 0, __x))
  {
    v82 = 0;
    v4 = *((_QWORD *)this + 50);
    v5 = *((unsigned int *)this + 87);
    *(_QWORD *)__x = 0x676C6F62636C6B23;
    LODWORD(v100) = 0;
    v82 = (*(unsigned int (**)(uint64_t, uint64_t, _QWORD, std::vector<unsigned int>::value_type *, _QWORD, _QWORD))(*(_QWORD *)v4 + 560))(v4, v5, 0, __x, 0, 0) >> 2;
    __x[0] = 0;
    std::vector<unsigned int>::vector(&v81, v82, __x);
    if (v82)
    {
      v6 = *((_QWORD *)this + 50);
      v7 = *((unsigned int *)this + 87);
      *(_QWORD *)__x = 0x676C6F62636C6B23;
      LODWORD(v100) = 0;
      (*(void (**)(uint64_t, uint64_t, _QWORD, std::vector<unsigned int>::value_type *, _QWORD, _QWORD, _QWORD, unsigned int *, std::vector<unsigned int>::pointer))(*(_QWORD *)v6 + 568))(v6, v7, 0, __x, 0, 0, 4 * v82, &v82, v81.__begin_);
      v82 >>= 2;
    }
    v78 = 0;
    v79 = 0;
    v80 = 0;
    *(_QWORD *)__x = MEMORY[0x1E0C809B0];
    *(_QWORD *)&v100 = 0x40000000;
    *((_QWORD *)&v100 + 1) = ___ZNK18HALS_DeviceManager19CopyClockDeviceListERNS_20BasicClockDeviceListEP11HALS_Client_block_invoke;
    *(_QWORD *)&v101 = &__block_descriptor_tmp_7_8182;
    *((_QWORD *)&v101 + 1) = this;
    v102 = (const char *)&v78;
    v8 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PlugIn *))(*(_QWORD *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v8, (uint64_t)__x);
    v74 = this;
    begin = v81.__begin_;
    end = v81.__end_;
    if (v81.__begin_ == v81.__end_)
    {
      v12 = 0;
      v75 = 0;
    }
    else
    {
      v12 = 0;
      v75 = 0;
      v13 = 0;
      v14 = 0;
      do
      {
        v15 = v78;
        if (v78 == v79)
        {
LABEL_9:
          if ((unint64_t)v14 >= v13)
          {
            v16 = v14 - v12;
            v17 = v16 + 1;
            if ((unint64_t)(v16 + 1) >> 62)
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            if ((uint64_t)(v13 - (_QWORD)v12) >> 1 > v17)
              v17 = (uint64_t)(v13 - (_QWORD)v12) >> 1;
            if (v13 - (unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
              v18 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v18 = v17;
            if (v18)
            {
              v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v18);
              v14 = v75;
            }
            else
            {
              v9 = 0;
            }
            v19 = (unsigned int *)(v18 + 4 * v16);
            *v19 = *begin;
            v75 = v19 + 1;
            while (v14 != v12)
            {
              v20 = *--v14;
              *--v19 = v20;
            }
            v13 = v18 + 4 * (_QWORD)v9;
            if (v12)
              operator delete(v12);
            v12 = v19;
            v14 = v75;
          }
          else
          {
            *v14++ = *begin;
            v75 = v14;
          }
        }
        else
        {
          while (*((_DWORD *)*v15 + 11) != *begin)
          {
            if (++v15 == v79)
              goto LABEL_9;
          }
        }
        ++begin;
      }
      while (begin != end);
    }
    v21 = v78;
    v22 = v79;
    if (v78 == v79)
    {
      v23 = 0;
    }
    else
    {
      v23 = 0;
      v24 = 0;
      v25 = 0;
      v26 = 0;
      do
      {
        v27 = v81.__begin_;
        if (v81.__begin_ == v81.__end_)
        {
LABEL_34:
          v28 = *((_DWORD *)*v21 + 11);
          if ((unint64_t)v26 >= v25)
          {
            v29 = v26 - v23;
            v30 = v29 + 1;
            if ((unint64_t)(v29 + 1) >> 62)
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            if ((uint64_t)(v25 - (_QWORD)v23) >> 1 > v30)
              v30 = (uint64_t)(v25 - (_QWORD)v23) >> 1;
            if (v25 - (unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL)
              v31 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v31 = v30;
            if (v31)
            {
              v31 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v31);
              v26 = v24;
            }
            else
            {
              v9 = 0;
            }
            v32 = (int *)(v31 + 4 * v29);
            *v32 = v28;
            v24 = v32 + 1;
            while (v26 != v23)
            {
              v33 = *--v26;
              *--v32 = v33;
            }
            v25 = v31 + 4 * (_QWORD)v9;
            if (v23)
              operator delete(v23);
            v23 = v32;
            v26 = v24;
          }
          else
          {
            *v26++ = v28;
            v24 = v26;
          }
        }
        else
        {
          while (*((_DWORD *)*v21 + 11) != *v27)
          {
            if (++v27 == v81.__end_)
              goto LABEL_34;
          }
        }
        ++v21;
      }
      while (v21 != v22);
      if (v23 != v26)
      {
        v34 = v23;
        do
        {
          v35 = (unsigned int *)HALS_PlugIn::CopyObjectByUCID(v74, *v34);
          v37 = (HALS_ObjectMap *)v35;
          if (v35)
          {
            v38 = (HALS_System *)*((_QWORD *)v74 + 40);
            v39 = (const BOOL *)v35[4];
            v40 = v35[7];
            v41 = (const __CFString *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v35 + 200))(v35);
            HALS_System::ClockDeviceDied(v38, v39, v40, v41);
            (*(void (**)(HALS_ObjectMap *))(*(_QWORD *)v37 + 8))(v37);
            v83[0] = MEMORY[0x1E0C809B0];
            v83[1] = 0x40000000;
            v83[2] = ___ZN11HALS_PlugIn17RemoveClockDeviceEP22HALS_PlugInClockDevice_block_invoke;
            v83[3] = &__block_descriptor_tmp_37;
            v83[4] = v74;
            v83[5] = v37;
            v42 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PlugIn *))(*(_QWORD *)v74 + 56))(v74);
            HALB_CommandGate::ExecuteCommand(v42, (uint64_t)v83);
          }
          HALS_ObjectMap::ReleaseObject(v37, v36);
          ++v34;
        }
        while (v34 != v26);
      }
    }
    v43 = v74;
    if (v12 != v75)
    {
      v73 = (std::runtime_error_vtbl *)*MEMORY[0x1E0DE4F50];
      v71 = *(void **)(MEMORY[0x1E0DE4F50] + 72);
      v72 = *(std::runtime_error_vtbl **)(MEMORY[0x1E0DE4F50] + 64);
      v70 = MEMORY[0x1E0DE4FB8] + 16;
      v44 = (int *)v12;
      do
      {
        v46 = (HALS_ObjectMap *)HALS_PlugIn::CopyClockDeviceByUCID(v43, *v44);
        if (!v46)
        {
          v47 = operator new();
          v48 = *v44;
          v49 = *((_QWORD *)v43 + 50);
          v50 = (std::__shared_weak_count *)*((_QWORD *)v43 + 51);
          if (v50)
          {
            p_shared_owners = (unint64_t *)&v50->__shared_owners_;
            do
              v52 = __ldxr(p_shared_owners);
            while (__stxr(v52 + 1, p_shared_owners));
          }
          v86.__vftable = (std::runtime_error_vtbl *)0x676C6F6263756964;
          LODWORD(v86.__imp_.__imp_) = 0;
          __p[0] = 0;
          LODWORD(v76.__vftable) = 0;
          (*(void (**)(uint64_t, uint64_t, _QWORD, std::runtime_error *, _QWORD, _QWORD, uint64_t, std::runtime_error *, void **))(*(_QWORD *)v49 + 568))(v49, v48, 0, &v86, 0, 0, 8, &v76, __p);
          HALS_ClockDevice::HALS_ClockDevice((HALS_ClockDevice *)v47, v43, (const __CFString *)__p[0], v53, v54);
          if (v50)
          {
            v56 = (unint64_t *)&v50->__shared_owners_;
            do
              v57 = __ldaxr(v56);
            while (__stlxr(v57 - 1, v56));
            if (!v57)
            {
              ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
              std::__shared_weak_count::__release_weak(v50);
            }
          }
          *(_QWORD *)(v47 + 368) = off_1E6996080;
          *(_QWORD *)(v47 + 376) = v43;
          *(_DWORD *)(v47 + 384) = *((_DWORD *)v43 + 4);
          *(_DWORD *)(v47 + 388) = v48;
          *(_QWORD *)(v47 + 392) = 0;
          *(_DWORD *)(v47 + 400) = 0;
          if ((HALS_PlugIn *)((char *)v74 + 328) != (HALS_PlugIn *)(v47 + 368))
            HALS_ObjectMap::RetainObject(v43, v55);
          *(_QWORD *)v47 = off_1E6984EC8;
          *(_QWORD *)(v47 + 368) = &unk_1E69850A8;
          *(_QWORD *)(v47 + 456) = 0;
          *(_QWORD *)(v47 + 464) = 0;
          *(_OWORD *)(v47 + 408) = 0u;
          *(_OWORD *)(v47 + 424) = 0u;
          *(_OWORD *)(v47 + 434) = 0u;
          *(_QWORD *)(v47 + 472) = 0;
          *(_QWORD *)(v47 + 480) = 850045863;
          *(_OWORD *)(v47 + 488) = 0u;
          *(_OWORD *)(v47 + 504) = 0u;
          *(_OWORD *)(v47 + 520) = 0u;
          *(_OWORD *)(v47 + 536) = 0u;
          *(_OWORD *)(v47 + 552) = 0u;
          *(_QWORD *)(v47 + 568) = 850045863;
          *(_OWORD *)(v47 + 576) = 0u;
          *(_OWORD *)(v47 + 592) = 0u;
          *(_OWORD *)(v47 + 608) = 0u;
          *(_OWORD *)(v47 + 624) = 0u;
          *(_OWORD *)(v47 + 640) = 0u;
          *(_QWORD *)(v47 + 656) = 850045863;
          *(_OWORD *)(v47 + 712) = 0u;
          *(_OWORD *)(v47 + 696) = 0u;
          *(_OWORD *)(v47 + 680) = 0u;
          *(_OWORD *)(v47 + 664) = 0u;
          *(_QWORD *)(v47 + 728) = dispatch_semaphore_create(0);
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v86);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v87, (uint64_t)"PlugInClockDevice Change Queue ", 31);
          std::ostream::operator<<();
          std::stringbuf::str[abi:ne180100]<std::allocator<char>>(__p, (uint64_t)v88);
          if (SHIBYTE(v85) >= 0)
            v58 = (char *)__p;
          else
            v58 = (char *)__p[0];
          AMCP::Utility::Dispatch_Queue::Dispatch_Queue((uint64_t)__x, v58);
          AMCP::Utility::Dispatch_Queue::operator=((NSObject **)(v47 + 416), *(dispatch_object_t *)__x);
          AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)__x);
          if (SHIBYTE(v85) < 0)
            operator delete(__p[0]);
          *(_DWORD *)(v47 + 44) = v48;
          v86.__vftable = v73;
          *(std::runtime_error_vtbl **)((char *)&v86.__vftable + (unint64_t)v73[-1].~runtime_error) = v72;
          v87 = v71;
          v88[0] = v70;
          if (v91 < 0)
            operator delete(v90);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x1B5E50598](&v92);
          *(_QWORD *)__x = 0;
          *(_QWORD *)&v100 = __x;
          *((_QWORD *)&v100 + 1) = 0x2000000000;
          LODWORD(v101) = 0;
          v93 = (uint64_t (**)())MEMORY[0x1E0C809B0];
          *(_QWORD *)&v94 = 0x40000000;
          *((_QWORD *)&v94 + 1) = ___ZN11HALS_PlugIn14AddClockDeviceEP22HALS_PlugInClockDevice_block_invoke;
          v95 = &unk_1E696C110;
          v97 = v43;
          v96 = __x;
          v98 = v47;
          v59 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PlugIn *))(*(_QWORD *)v43 + 56))(v43);
          HALB_CommandGate::ExecuteCommand(v59, (uint64_t)&v93);
          v60 = *(_DWORD *)(v100 + 24);
          _Block_object_dispose(__x, 8);
          if (v60)
          {
            AMCP::Log::Scope_Registry::get(v61);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__x, "com.apple.coreaudio", "AMCP");
            v66 = **(NSObject ***)__x;
            std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)__x);
            if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
            {
              v67 = pthread_self();
              v68 = pthread_mach_thread_np(v67);
              __x[0] = 67109890;
              __x[1] = v68;
              LOWORD(v100) = 2080;
              *(_QWORD *)((char *)&v100 + 2) = "HALS_PlugIn.cpp";
              WORD5(v100) = 1024;
              HIDWORD(v100) = 2356;
              LOWORD(v101) = 2080;
              *(_QWORD *)((char *)&v101 + 2) = "error != kAudioHardwareNoError";
              _os_log_error_impl(&dword_1B57BA000, v66, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to add clock device", (uint8_t *)__x, 0x22u);
            }
            AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v77);
            exception = __cxa_allocate_exception(0x40uLL);
            std::runtime_error::runtime_error(&v76, "Failed to add clock device");
            std::runtime_error::runtime_error(&v86, &v76);
            memset(v88, 0, sizeof(v88));
            v89 = -1;
            v86.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
            v87 = &unk_1E69A1FE0;
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)__x, (uint64_t)&v86);
            *((_QWORD *)&v101 + 1) = "BOOL HALS_PlugIn::RebuildClockDeviceList()";
            v102 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/PlugIn/HALS_PlugIn.cpp";
            v103 = 2356;
            applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)__p);
            v94 = *(_OWORD *)__p;
            v93 = off_1E69A20A0;
            v95 = v85;
            __p[0] = 0;
            __p[1] = 0;
            v85 = 0;
            boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)__x, (uint64_t)&v93);
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)__x);
          }
          v43 = v74;
          (**(void (***)(uint64_t))v47)(v47);
          v62 = (HALS_System *)*((_QWORD *)v74 + 40);
          v63 = (const BOOL *)*(unsigned int *)(v47 + 16);
          v64 = *(_DWORD *)(v47 + 28);
          v65 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 200))(v47);
          HALS_System::ClockDeviceArrived(v62, v63, v64, v65);
        }
        HALS_ObjectMap::ReleaseObject(v46, v45);
        ++v44;
      }
      while (v44 != (int *)v75);
    }
    if (v23)
      operator delete(v23);
    if (v12)
      operator delete(v12);
    HALS_DeviceManager::BasicClockDeviceList::~BasicClockDeviceList(&v78, v9);
    if (v81.__begin_)
    {
      v81.__end_ = v81.__begin_;
      operator delete(v81.__begin_);
    }
  }
}

void sub_1B57E5450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,HALS_ObjectMap **a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32)
{
  void *v32;
  void *v33;
  HALS_Object *v35;

  __cxa_end_catch();
  if (v32)
    operator delete(v32);
  if (v33)
    operator delete(v33);
  HALS_DeviceManager::BasicClockDeviceList::~BasicClockDeviceList(&a28, v35);
  if (__p)
  {
    a32 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B57E54E8(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1B57E54F4);
  JUMPOUT(0x1B57E54FCLL);
}

std::vector<unsigned int> *__cdecl std::vector<unsigned int>::vector(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n, const std::vector<unsigned int>::value_type *__x)
{
  std::vector<unsigned int>::pointer end;
  unsigned int *v7;
  std::vector<unsigned int>::size_type v8;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<unsigned int>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    v7 = &end[__n];
    v8 = 4 * __n;
    do
    {
      *end++ = *__x;
      v8 -= 4;
    }
    while (v8);
    this->__end_ = v7;
  }
  return this;
}

void sub_1B57E5568(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

HALS_ObjectMap *HALS_PlugIn::CopyObjectByUCID(HALS_PlugIn *this, int a2)
{
  HALS_Object *v3;
  HALS_ObjectMap **v4;
  HALS_ObjectMap **v5;
  HALS_IODevice *v6;
  char v7;
  char v8;
  unsigned int v9;
  unsigned int v10;
  HALS_ObjectMap *v11;
  HALS_Object *v12;
  HALS_ObjectMap *v13;
  HALS_ObjectMap *v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  HALS_ObjectMap *v19;
  HALS_Object *v20;
  HALS_ObjectMap *v21;
  unsigned int NumberEndPoints;
  unsigned int v23;
  HALS_ObjectMap *v24;
  HALS_Object *v25;
  HALS_IODevice *v26;
  char v27;
  char v28;
  unsigned int NumberStreams;
  unsigned int v30;
  HALS_ObjectMap *v31;
  HALS_Object *v32;
  HALS_ObjectMap *v33;
  char v34;
  unsigned int v35;
  unsigned int v36;
  HALS_ObjectMap *v37;
  HALS_Object *v38;
  HALS_ObjectMap *v39;
  uint64_t v40;
  HALB_Mutex *v41;
  HALS_Object *v42;
  HALS_ObjectMap **i;
  HALB_Mutex *v44;
  HALS_Object *v45;
  HALS_ObjectMap **j;
  HALS_Object *v47;
  HALS_ObjectMap **v50;
  HALS_ObjectMap **v51;
  uint64_t v52;
  HALS_ObjectMap **v53;
  HALS_ObjectMap **v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t (*v58)(uint64_t);
  void *v59;
  HALS_PlugIn *v60;
  HALS_ObjectMap ***v61;
  uint64_t v62;

  v53 = 0;
  v54 = 0;
  v55 = 0;
  HALS_DeviceManager::CopyDeviceList(this, (HALS_DeviceManager::BasicDeviceList *)&v53, 1, 0);
  v4 = v53;
  v5 = v54;
  while (1)
  {
    if (v4 == v5)
    {
      NumberEndPoints = HALS_PlugIn::GetNumberEndPoints(this, 0);
      if (!NumberEndPoints)
      {
LABEL_62:
        v50 = 0;
        v51 = 0;
        v52 = 0;
        v40 = MEMORY[0x1E0C809B0];
        v56 = MEMORY[0x1E0C809B0];
        v57 = 0x40000000;
        v58 = ___ZNK18HALS_DeviceManager11CopyBoxListERNS_12BasicBoxListEP11HALS_Client_block_invoke;
        v59 = &__block_descriptor_tmp_8181;
        v60 = this;
        v61 = &v50;
        v62 = 0;
        v41 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PlugIn *))(*(_QWORD *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v41, (uint64_t)&v56);
        for (i = v50; i != v51; ++i)
        {
          v14 = *i;
          if (*((_DWORD *)*i + 89) == a2)
          {
            HALS_ObjectMap::RetainObject(*i, v42);
            HALS_DeviceManager::BasicBoxList::~BasicBoxList(&v50, v47);
            goto LABEL_75;
          }
        }
        HALS_DeviceManager::BasicBoxList::~BasicBoxList(&v50, v42);
        v50 = 0;
        v51 = 0;
        v52 = 0;
        v56 = v40;
        v57 = 0x40000000;
        v58 = ___ZNK18HALS_DeviceManager19CopyClockDeviceListERNS_20BasicClockDeviceListEP11HALS_Client_block_invoke;
        v59 = &__block_descriptor_tmp_7_8182;
        v60 = this;
        v61 = &v50;
        v44 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PlugIn *))(*(_QWORD *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v44, (uint64_t)&v56);
        for (j = v50; ; ++j)
        {
          if (j == v51)
          {
            v14 = 0;
            goto LABEL_74;
          }
          v14 = *j;
          if (*((_DWORD *)*j + 97) == a2)
            break;
        }
        HALS_ObjectMap::RetainObject(*j, v45);
LABEL_74:
        HALS_DeviceManager::BasicClockDeviceList::~BasicClockDeviceList(&v50, v45);
        break;
      }
      v23 = 0;
      while (1)
      {
        v24 = HALS_PlugIn::CopyEndPointByIndex(this, v23, 0);
        v26 = v24;
        if (v24)
        {
          if (*((_DWORD *)v24 + 331) == a2)
          {
            HALS_ObjectMap::RetainObject(v24, v25);
            v14 = v26;
            goto LABEL_59;
          }
          v27 = 0;
          v28 = 1;
          do
          {
            NumberStreams = HALS_IODevice::GetNumberStreams(v26, v27 & 1);
            if (NumberStreams)
            {
              v30 = 1;
              do
              {
                v31 = (HALS_ObjectMap *)HALS_IODevice::CopyStreamByIndex(v26, v27 & 1, v30 - 1);
                v33 = v31;
                if (v31 && *((_DWORD *)v31 + 21) == a2)
                {
                  HALS_ObjectMap::RetainObject(v31, v32);
                  v14 = v33;
                }
                else
                {
                  v14 = 0;
                }
                HALS_ObjectMap::ReleaseObject(v33, v32);
                if (v14)
                  break;
                v15 = v30++ >= NumberStreams;
              }
              while (!v15);
            }
            else
            {
              v14 = 0;
            }
            v34 = (v14 == 0) & v28;
            v27 = 1;
            v28 = 0;
          }
          while ((v34 & 1) != 0);
          if (v14)
            goto LABEL_59;
          v35 = (*(uint64_t (**)(HALS_IODevice *))(*(_QWORD *)v26 + 624))(v26);
          if (v35)
          {
            v36 = 1;
            do
            {
              v37 = (HALS_ObjectMap *)(*(uint64_t (**)(HALS_IODevice *, _QWORD))(*(_QWORD *)v26 + 632))(v26, v36 - 1);
              v39 = v37;
              if (v37 && *((_DWORD *)v37 + 23) == a2)
              {
                HALS_ObjectMap::RetainObject(v37, v38);
                v14 = v39;
              }
              else
              {
                v14 = 0;
              }
              HALS_ObjectMap::ReleaseObject(v39, v38);
              if (v14)
                break;
              v15 = v36++ >= v35;
            }
            while (!v15);
            goto LABEL_59;
          }
        }
        v14 = 0;
LABEL_59:
        HALS_ObjectMap::ReleaseObject(v26, v25);
        if (!v14 && ++v23 < NumberEndPoints)
          continue;
        if (!v14)
          goto LABEL_62;
        goto LABEL_75;
      }
    }
    v6 = *v4;
    if (*((_DWORD *)*v4 + 331) == a2)
    {
      HALS_ObjectMap::RetainObject(*v4, v3);
      v14 = v6;
      break;
    }
    v7 = 0;
    v8 = 1;
    do
    {
      v9 = HALS_IODevice::GetNumberStreams(v6, v7 & 1);
      if (v9)
      {
        v10 = 1;
        do
        {
          v11 = (HALS_ObjectMap *)HALS_IODevice::CopyStreamByIndex(v6, v7 & 1, v10 - 1);
          v13 = v11;
          if (v11 && *((_DWORD *)v11 + 21) == a2)
          {
            HALS_ObjectMap::RetainObject(v11, v12);
            v14 = v13;
          }
          else
          {
            v14 = 0;
          }
          HALS_ObjectMap::ReleaseObject(v13, v12);
          if (v14)
            break;
          v15 = v10++ >= v9;
        }
        while (!v15);
      }
      else
      {
        v14 = 0;
      }
      v16 = (v14 == 0) & v8;
      v7 = 1;
      v8 = 0;
    }
    while ((v16 & 1) != 0);
    if (v14)
      break;
    v17 = (*(uint64_t (**)(HALS_IODevice *))(*(_QWORD *)v6 + 624))(v6);
    if (v17)
    {
      v18 = 1;
      do
      {
        v19 = (HALS_ObjectMap *)(*(uint64_t (**)(HALS_IODevice *, _QWORD))(*(_QWORD *)v6 + 632))(v6, v18 - 1);
        v21 = v19;
        if (v19 && *((_DWORD *)v19 + 23) == a2)
        {
          HALS_ObjectMap::RetainObject(v19, v20);
          v14 = v21;
        }
        else
        {
          v14 = 0;
        }
        HALS_ObjectMap::ReleaseObject(v21, v20);
        if (v14)
          break;
        v15 = v18++ >= v17;
      }
      while (!v15);
      if (v14)
        break;
    }
    ++v4;
  }
LABEL_75:
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(&v53, v3);
  return v14;
}

void sub_1B57E59D0(_Unwind_Exception *a1, HALS_Object *a2, uint64_t a3, ...)
{
  HALS_Object *v4;
  HALS_ObjectMap **v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, HALS_ObjectMap **);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  HALS_DeviceManager::BasicClockDeviceList::~BasicClockDeviceList((HALS_ObjectMap ***)va, a2);
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList((HALS_ObjectMap ***)va1, v4);
  _Unwind_Resume(a1);
}

void ___ZN11HALS_PlugIn17RemoveClockDeviceEP22HALS_PlugInClockDevice_block_invoke(uint64_t a1)
{
  HALS_ObjectMap *v1;
  uint64_t v2;
  HALS_ObjectMap **v3;
  HALS_ObjectMap **v4;
  void *v5;
  int64_t v6;

  v2 = *(_QWORD *)(a1 + 32);
  v1 = *(HALS_ObjectMap **)(a1 + 40);
  v3 = *(HALS_ObjectMap ***)(v2 + 544);
  v4 = *(HALS_ObjectMap ***)(v2 + 552);
  if (v3 != v4)
  {
    while (*v3 != v1)
    {
      if (++v3 == v4)
      {
        v3 = *(HALS_ObjectMap ***)(v2 + 552);
        break;
      }
    }
  }
  if (v4 != v3)
  {
    v5 = v3 + 1;
    v6 = (char *)v4 - (char *)(v3 + 1);
    if (v4 != v3 + 1)
      memmove(v3, v5, (char *)v4 - (char *)(v3 + 1));
    *(_QWORD *)(v2 + 552) = (char *)v3 + v6;
    HALS_ObjectMap::ReleaseObject(v1, (HALS_Object *)v5);
  }
}

uint64_t HALS_PlugIn::CopyClockDeviceByUCID(HALS_PlugIn *this, int a2)
{
  HALB_Mutex *v2;
  uint64_t v3;
  _QWORD v5[6];
  int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2000000000;
  v10 = 0;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZNK11HALS_PlugIn21CopyClockDeviceByUCIDEj_block_invoke;
  v5[3] = &unk_1E696C138;
  v5[4] = &v7;
  v5[5] = this;
  v6 = a2;
  v2 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PlugIn *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v5);
  v3 = v8[3];
  _Block_object_dispose(&v7, 8);
  return v3;
}

void sub_1B57E5BD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void HALS_PlugIn::RemoveClockDevice(HALS_PlugIn *this, HALS_PlugInClockDevice *a2)
{
  HALB_Mutex *v2;
  _QWORD v3[6];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = ___ZN11HALS_PlugIn17RemoveClockDeviceEP22HALS_PlugInClockDevice_block_invoke;
  v3[3] = &__block_descriptor_tmp_37;
  v3[4] = this;
  v3[5] = a2;
  v2 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PlugIn *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v3);
}

void ___ZN11HALS_PlugIn14AddClockDeviceEP22HALS_PlugInClockDevice_block_invoke(_QWORD *a1)
{
  HALS_PlugIn *v2;
  int *v3;
  HALS_Object *v4;
  HALS_ObjectMap *v5;
  uint64_t v6;
  int v7;
  int **v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  int **v17;
  int *v18;
  int v19;
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v2 = (HALS_PlugIn *)a1[5];
  v3 = (int *)a1[6];
  v5 = HALS_PlugIn::_CopyClockDeviceByUCID(v2, v3[97]);
  if (v5)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      v6 = (*(uint64_t (**)(int *))(*(_QWORD *)v3 + 216))(v3);
      v19 = 136315650;
      v20 = "HALS_PlugIn.cpp";
      v21 = 1024;
      v22 = 2245;
      v23 = 2082;
      v24 = v6;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_PlugInManager::_AddClockDevice: there is already a clcok device with the UID, %{public}s", (uint8_t *)&v19, 0x1Cu);
    }
    v7 = 1852797029;
  }
  else
  {
    v8 = (int **)*((_QWORD *)v2 + 69);
    v9 = *((_QWORD *)v2 + 70);
    if ((unint64_t)v8 >= v9)
    {
      v11 = (_QWORD *)*((_QWORD *)v2 + 68);
      v12 = v8 - (int **)v11;
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 61)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v14 = v9 - (_QWORD)v11;
      if (v14 >> 2 > v13)
        v13 = v14 >> 2;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
        v15 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v15 = v13;
      if (v15)
      {
        if (v15 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v16 = (char *)operator new(8 * v15);
      }
      else
      {
        v16 = 0;
      }
      v17 = (int **)&v16[8 * v12];
      *v17 = v3;
      v10 = v17 + 1;
      if (v8 != v11)
      {
        do
        {
          v18 = *--v8;
          *--v17 = v18;
        }
        while (v8 != v11);
        v8 = (int **)*((_QWORD *)v2 + 68);
      }
      *((_QWORD *)v2 + 68) = v17;
      *((_QWORD *)v2 + 69) = v10;
      *((_QWORD *)v2 + 70) = &v16[8 * v15];
      if (v8)
        operator delete(v8);
    }
    else
    {
      *v8 = v3;
      v10 = v8 + 1;
    }
    v7 = 0;
    *((_QWORD *)v2 + 69) = v10;
  }
  HALS_ObjectMap::ReleaseObject(v5, v4);
  *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = v7;
}

void sub_1B57E5E34(_Unwind_Exception *exception_object, HALS_Object *a2)
{
  HALS_ObjectMap *v2;

  if ((_DWORD)a2)
  {
    HALS_ObjectMap::ReleaseObject(v2, a2);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1B57E5DE0);
  }
  _Unwind_Resume(exception_object);
}

HALS_ObjectMap *HALS_PlugIn::_CopyClockDeviceByUCID(HALS_PlugIn *this, int a2)
{
  HALB_Mutex *v3;
  HALS_Object *v4;
  HALS_ObjectMap **v5;
  HALS_ObjectMap *v6;
  HALS_ObjectMap *v7;
  HALS_ObjectMap *v8;
  HALS_Object *v9;
  HALS_ObjectMap **v11;
  HALS_ObjectMap **v12;
  uint64_t v13;
  _QWORD v14[6];

  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 0x40000000;
  v14[2] = ___ZNK18HALS_DeviceManager19CopyClockDeviceListERNS_20BasicClockDeviceListEP11HALS_Client_block_invoke;
  v14[3] = &__block_descriptor_tmp_7_8182;
  v14[4] = this;
  v14[5] = &v11;
  v3 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PlugIn *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v3, (uint64_t)v14);
  v5 = v11;
  if (v11 == v12)
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    do
    {
      v8 = *v5++;
      v7 = v8;
      if (*((_DWORD *)v8 + 97) == a2)
        v6 = v7;
    }
    while (v5 != v12);
  }
  HALS_ObjectMap::RetainObject(v6, v4);
  HALS_DeviceManager::BasicClockDeviceList::~BasicClockDeviceList(&v11, v9);
  return v6;
}

void sub_1B57E5F64(_Unwind_Exception *a1, HALS_Object *a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  HALS_DeviceManager::BasicClockDeviceList::~BasicClockDeviceList((HALS_ObjectMap ***)va, a2);
  _Unwind_Resume(a1);
}

unint64_t HALS_PlugIn::GetNumberEndPoints(HALS_PlugIn *this, HALS_Client *a2)
{
  HALB_Mutex *v2;
  unint64_t v3;
  HALS_Object *v4;
  _QWORD v6[7];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  __n128 (*v10)(_QWORD *, uint64_t);
  void (*v11)(uint64_t, HALS_Object *);
  HALS_ObjectMap **v12[3];

  v7 = 0;
  v8 = &v7;
  v9 = 0x4002000000;
  v10 = __Block_byref_object_copy__23;
  v11 = __Block_byref_object_dispose__24;
  memset(v12, 0, sizeof(v12));
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 0x40000000;
  v6[2] = ___ZNK11HALS_PlugIn18GetNumberEndPointsEP11HALS_Client_block_invoke;
  v6[3] = &unk_1E696BF88;
  v6[4] = &v7;
  v6[5] = this;
  v6[6] = a2;
  v2 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PlugIn *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v6);
  v3 = (unint64_t)(v8[6] - v8[5]) >> 3;
  _Block_object_dispose(&v7, 8);
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(v12, v4);
  return v3;
}

void sub_1B57E6070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  HALS_ObjectMap ***v9;
  HALS_Object *v11;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(v9, v11);
  _Unwind_Resume(a1);
}

HALS_ObjectMap *HALS_PlugIn::CopyEndPointByIndex(HALS_PlugIn *this, unsigned int a2, HALS_Client *a3)
{
  HALB_Mutex *v4;
  HALS_Object *v5;
  uint64_t v6;
  HALS_ObjectMap *v7;
  HALS_Object *v8;
  _QWORD v10[7];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  __n128 (*v14)(_QWORD *, uint64_t);
  void (*v15)(uint64_t, HALS_Object *);
  HALS_ObjectMap **v16[3];

  v11 = 0;
  v12 = &v11;
  v13 = 0x4002000000;
  v14 = __Block_byref_object_copy__23;
  v15 = __Block_byref_object_dispose__24;
  memset(v16, 0, sizeof(v16));
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 0x40000000;
  v10[2] = ___ZNK11HALS_PlugIn19CopyEndPointByIndexEjP11HALS_Client_block_invoke;
  v10[3] = &unk_1E696BFB0;
  v10[4] = &v11;
  v10[5] = this;
  v10[6] = a3;
  v4 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PlugIn *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v4, (uint64_t)v10);
  v6 = v12[5];
  if (a2 >= (unint64_t)((v12[6] - v6) >> 3))
    v7 = 0;
  else
    v7 = *(HALS_ObjectMap **)(v6 + 8 * a2);
  HALS_ObjectMap::RetainObject(v7, v5);
  _Block_object_dispose(&v11, 8);
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(v16, v8);
  return v7;
}

void sub_1B57E6174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  HALS_ObjectMap ***v9;
  HALS_Object *v11;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(v9, v11);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__23(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__24(uint64_t a1, HALS_Object *a2)
{
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList((HALS_ObjectMap ***)(a1 + 40), a2);
}

void ___ZNK11HALS_PlugIn19CopyEndPointByIndexEjP11HALS_Client_block_invoke(uint64_t a1)
{
  HALS_PlugIn::_CopyEndPointList(*(_QWORD *)(a1 + 40), (void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));
}

void sub_1B57E61E4(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void HALS_PlugIn::_CopyEndPointList(uint64_t a1, void **a2)
{
  HALS_ObjectMap **v2;
  void **v3;
  int v5;
  HALS_ObjectMap *v6;
  unint64_t v7;
  HALS_ObjectMap **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  HALS_ObjectMap **v17;
  char *v18;
  char *v19;
  HALS_ObjectMap *v20;
  char *v21;
  HALS_ObjectMap *v22;

  v2 = *(HALS_ObjectMap ***)(a1 + 520);
  if (v2 != *(HALS_ObjectMap ***)(a1 + 528))
  {
    v3 = a2;
    do
    {
      v5 = *((unsigned __int8 *)*v2 + 432);
      HALS_ObjectMap::RetainObject(*v2, (HALS_Object *)a2);
      v6 = *v2;
      v8 = (HALS_ObjectMap **)v3[1];
      v7 = (unint64_t)v3[2];
      if (v5)
      {
        if ((unint64_t)v8 >= v7)
        {
          v9 = ((char *)v8 - (_BYTE *)*v3) >> 3;
          if ((unint64_t)(v9 + 1) >> 61)
            goto LABEL_35;
          v10 = v7 - (_QWORD)*v3;
          v11 = v10 >> 2;
          if (v10 >> 2 <= (unint64_t)(v9 + 1))
            v11 = v9 + 1;
          if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
            v12 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v12 = v11;
          if (v12)
            v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v12);
          else
            a2 = 0;
          v17 = (HALS_ObjectMap **)(v12 + 8 * v9);
          *v17 = v6;
          v13 = v17 + 1;
          v19 = (char *)*v3;
          v18 = (char *)v3[1];
          if (v18 != *v3)
          {
            do
            {
              v20 = (HALS_ObjectMap *)*((_QWORD *)v18 - 1);
              v18 -= 8;
              *--v17 = v20;
            }
            while (v18 != v19);
            goto LABEL_30;
          }
          goto LABEL_31;
        }
      }
      else if ((unint64_t)v8 >= v7)
      {
        v14 = ((char *)v8 - (_BYTE *)*v3) >> 3;
        if ((unint64_t)(v14 + 1) >> 61)
LABEL_35:
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v15 = v7 - (_QWORD)*v3;
        v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1))
          v16 = v14 + 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
          v12 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v12 = v16;
        if (v12)
          v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v12);
        else
          a2 = 0;
        v17 = (HALS_ObjectMap **)(v12 + 8 * v14);
        *v17 = v6;
        v13 = v17 + 1;
        v21 = (char *)*v3;
        v18 = (char *)v3[1];
        if (v18 != *v3)
        {
          do
          {
            v22 = (HALS_ObjectMap *)*((_QWORD *)v18 - 1);
            v18 -= 8;
            *--v17 = v22;
          }
          while (v18 != v21);
LABEL_30:
          v18 = (char *)*v3;
        }
LABEL_31:
        *v3 = v17;
        v3[1] = v13;
        v3[2] = (void *)(v12 + 8 * (_QWORD)a2);
        if (v18)
          operator delete(v18);
        goto LABEL_33;
      }
      *v8 = v6;
      v13 = v8 + 1;
LABEL_33:
      v3[1] = v13;
      ++v2;
    }
    while (v2 != *(HALS_ObjectMap ***)(a1 + 528));
  }
}

void ___ZNK11HALS_PlugIn18GetNumberEndPointsEP11HALS_Client_block_invoke(uint64_t a1)
{
  HALS_PlugIn::_CopyEndPointList(*(_QWORD *)(a1 + 40), (void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));
}

void sub_1B57E6398(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZN11HALS_PlugIn14RebuildBoxListEv_block_invoke(_QWORD *a1)
{
  _DWORD *v1;
  uint64_t v2;
  _DWORD *v3;
  char *v4;
  char *v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  unint64_t v20;
  char *v21;
  _DWORD *v22;
  _DWORD *v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  int v30;
  HALS_ObjectMap **v31;
  char *v32;
  HALS_ObjectMap **v33;
  HALS_Object *v34;
  HALS_ObjectMap **v35;
  int64_t v36;
  char *v37;
  unsigned int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  uint64_t v45;
  HALS_Object *v46;
  HALS_Object *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t *v50;
  unint64_t v51;
  uint64_t (**v52)(HALS_PlugInBox *__hidden);
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  uint64_t *v60;
  uint64_t v61;
  BOOL v63;
  char *__p;
  unsigned int *v65;
  uint64_t v67;
  uint64_t v68;
  __CFString *v69;

  v2 = a1[5];
  v1 = (_DWORD *)a1[6];
  v3 = (_DWORD *)a1[7];
  if (v1 == v3)
  {
    v4 = 0;
    v5 = 0;
    v7 = 0;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = *(_QWORD *)(v2 + 568);
      v9 = *(_QWORD *)(v2 + 576);
      if (v8 == v9)
      {
LABEL_6:
        if ((unint64_t)v7 >= v6)
        {
          v10 = (v7 - v4) >> 2;
          v11 = v10 + 1;
          if ((unint64_t)(v10 + 1) >> 62)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          if ((uint64_t)(v6 - (_QWORD)v4) >> 1 > v11)
            v11 = (uint64_t)(v6 - (_QWORD)v4) >> 1;
          if (v6 - (unint64_t)v4 >= 0x7FFFFFFFFFFFFFFCLL)
            v12 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v12 = v11;
          if (v12)
          {
            v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v12);
            v7 = v5;
          }
          else
          {
            v13 = 0;
          }
          v14 = (char *)(v12 + 4 * v10);
          *(_DWORD *)v14 = *v1;
          v5 = v14 + 4;
          while (v7 != v4)
          {
            v15 = *((_DWORD *)v7 - 1);
            v7 -= 4;
            *((_DWORD *)v14 - 1) = v15;
            v14 -= 4;
          }
          v6 = v12 + 4 * v13;
          if (v4)
            operator delete(v4);
          v4 = v14;
          v7 = v5;
        }
        else
        {
          *(_DWORD *)v7 = *v1;
          v7 += 4;
          v5 = v7;
        }
      }
      else
      {
        while (*(_DWORD *)(*(_QWORD *)v8 + 44) != *v1)
        {
          v8 += 8;
          if (v8 == v9)
            goto LABEL_6;
        }
      }
      ++v1;
    }
    while (v1 != v3);
  }
  v65 = (unsigned int *)v5;
  v16 = *(_QWORD *)(v2 + 568);
  v17 = *(_QWORD *)(v2 + 576);
  __p = v4;
  v18 = 0;
  if (v16 == v17)
  {
    v21 = 0;
    v37 = (char *)v65;
  }
  else
  {
    v19 = 0;
    v20 = 0;
    v21 = 0;
    do
    {
      v22 = (_DWORD *)a1[6];
      v23 = (_DWORD *)a1[7];
      if (v22 == v23)
      {
LABEL_31:
        v24 = *(_DWORD *)(*(_QWORD *)v16 + 44);
        if ((unint64_t)v21 >= v20)
        {
          v25 = (v21 - v18) >> 2;
          v26 = v25 + 1;
          if ((unint64_t)(v25 + 1) >> 62)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          if ((uint64_t)(v20 - (_QWORD)v18) >> 1 > v26)
            v26 = (uint64_t)(v20 - (_QWORD)v18) >> 1;
          if (v20 - (unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
            v27 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v27 = v26;
          if (v27)
          {
            v27 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v27);
            v21 = v19;
          }
          else
          {
            v28 = 0;
          }
          v29 = (char *)(v27 + 4 * v25);
          *(_DWORD *)v29 = v24;
          v19 = v29 + 4;
          while (v21 != v18)
          {
            v30 = *((_DWORD *)v21 - 1);
            v21 -= 4;
            *((_DWORD *)v29 - 1) = v30;
            v29 -= 4;
          }
          v20 = v27 + 4 * v28;
          if (v18)
            operator delete(v18);
          v18 = v29;
          v21 = v19;
        }
        else
        {
          *(_DWORD *)v21 = v24;
          v21 += 4;
          v19 = v21;
        }
      }
      else
      {
        while (*(_DWORD *)(*(_QWORD *)v16 + 44) != *v22)
        {
          if (++v22 == v23)
            goto LABEL_31;
        }
      }
      v16 += 8;
    }
    while (v16 != v17);
    if (v18 == v21)
    {
      v37 = (char *)v65;
      v7 = (char *)v65;
      v21 = v18;
      v4 = __p;
    }
    else
    {
      v31 = *(HALS_ObjectMap ***)(v2 + 576);
      v32 = v18;
      v4 = __p;
      do
      {
        v33 = *(HALS_ObjectMap ***)(v2 + 568);
        if (v33 != v31)
        {
          while (*((_DWORD *)*v33 + 11) != *(_DWORD *)v32)
          {
            if (++v33 == v31)
              goto LABEL_58;
          }
          (*(void (**)(HALS_ObjectMap *))(*(_QWORD *)*v33 + 8))(*v33);
          HALS_ObjectMap::ReleaseObject(*v33, v34);
          v35 = *(HALS_ObjectMap ***)(v2 + 576);
          v36 = (char *)v35 - (char *)(v33 + 1);
          if (v35 != v33 + 1)
            memmove(v33, v33 + 1, (char *)v35 - (char *)(v33 + 1));
          v31 = (HALS_ObjectMap **)((char *)v33 + v36);
          *(_QWORD *)(v2 + 576) = (char *)v33 + v36;
        }
LABEL_58:
        v32 += 4;
      }
      while (v32 != v21);
      v37 = (char *)v65;
      v7 = (char *)v65;
    }
  }
  if (v4 != v37)
  {
    v38 = (unsigned int *)__p;
    do
    {
      v39 = operator new();
      v40 = *v38;
      v41 = *(_QWORD *)(v2 + 400);
      v42 = *(std::__shared_weak_count **)(v2 + 408);
      if (v42)
      {
        p_shared_owners = (unint64_t *)&v42->__shared_owners_;
        do
          v44 = __ldxr(p_shared_owners);
        while (__stxr(v44 + 1, p_shared_owners));
      }
      v67 = 0x676C6F6262756964;
      v68 = 0;
      v69 = 0;
      (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t *, _QWORD, _QWORD, uint64_t, char *, __CFString **))(*(_QWORD *)v41 + 568))(v41, v40, 0, &v67, 0, 0, 8, (char *)&v68 + 4, &v69);
      HALS_Box::HALS_Box((HALS_Box *)v39, (HALS_DeviceManager *)v2, v69, v45, v46);
      if (v42)
      {
        v48 = (unint64_t *)&v42->__shared_owners_;
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      *(_QWORD *)(v39 + 336) = off_1E6996080;
      *(_QWORD *)(v39 + 344) = v2;
      *(_DWORD *)(v39 + 352) = *(_DWORD *)(v2 + 16);
      *(_DWORD *)(v39 + 356) = v40;
      *(_QWORD *)(v39 + 360) = 0;
      *(_DWORD *)(v39 + 368) = 0;
      if (!v2 || v2 + 328 != v39 + 336)
        HALS_ObjectMap::RetainObject((HALS_ObjectMap *)v2, v47);
      *(_QWORD *)v39 = off_1E69767B8;
      *(_QWORD *)(v39 + 336) = &unk_1E69768B8;
      *(_QWORD *)(v39 + 384) = 0;
      *(_QWORD *)(v39 + 392) = 0;
      *(_QWORD *)(v39 + 376) = 0;
      *(_DWORD *)(v39 + 44) = v40;
      v50 = *(uint64_t **)(v2 + 576);
      v51 = *(_QWORD *)(v2 + 584);
      if ((unint64_t)v50 >= v51)
      {
        v54 = *(_QWORD **)(v2 + 568);
        v55 = v50 - v54;
        v56 = v55 + 1;
        if ((unint64_t)(v55 + 1) >> 61)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v57 = v51 - (_QWORD)v54;
        if (v57 >> 2 > v56)
          v56 = v57 >> 2;
        if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8)
          v58 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v58 = v56;
        if (v58)
        {
          if (v58 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v59 = (char *)operator new(8 * v58);
        }
        else
        {
          v59 = 0;
        }
        v60 = (uint64_t *)&v59[8 * v55];
        *v60 = v39;
        v53 = v60 + 1;
        if (v50 != v54)
        {
          do
          {
            v61 = *--v50;
            *--v60 = v61;
          }
          while (v50 != v54);
          v50 = *(uint64_t **)(v2 + 568);
        }
        *(_QWORD *)(v2 + 568) = v60;
        *(_QWORD *)(v2 + 576) = v53;
        *(_QWORD *)(v2 + 584) = &v59[8 * v58];
        if (v50)
        {
          operator delete(v50);
          v52 = *(uint64_t (***)(HALS_PlugInBox *__hidden))v39;
        }
        else
        {
          v52 = off_1E69767B8;
        }
      }
      else
      {
        *v50 = v39;
        v52 = off_1E69767B8;
        v53 = v50 + 1;
      }
      *(_QWORD *)(v2 + 576) = v53;
      (*v52)((HALS_PlugInBox *)v39);
      ++v38;
    }
    while (v38 != v65);
  }
  if (v18)
    operator delete(v18);
  if (__p)
    operator delete(__p);
  v63 = v7 != __p || v21 != v18;
  *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = v63;
}

void sub_1B57E6918(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  void *v10;

  if (v10)
    operator delete(v10);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *__copy_helper_block_e8_48c39_ZTSNSt3__16vectorIjNS_9allocatorIjEEEE(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v2 = (_QWORD *)(a1 + 48);
  v2[2] = 0;
  return std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v2, *(const void **)(a2 + 48), *(_QWORD *)(a2 + 56), (uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 2);
}

void __destroy_helper_block_e8_48c39_ZTSNSt3__16vectorIjNS_9allocatorIjEEEE(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void ___ZN11HALS_PlugIn19RebuildEndPointListEv_block_invoke(uint64_t a1)
{
  HALS_PlugIn::_CopyEndPointList(*(_QWORD *)(a1 + 40), (void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));
}

void sub_1B57E6A1C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t HALS_PlugIn::CopyEndPointByUCID(HALS_PlugIn *this, int a2)
{
  HALB_Mutex *v2;
  uint64_t v3;
  _QWORD v5[6];
  int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2000000000;
  v10 = 0;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZNK11HALS_PlugIn18CopyEndPointByUCIDEj_block_invoke;
  v5[3] = &unk_1E696C028;
  v5[4] = &v7;
  v5[5] = this;
  v6 = a2;
  v2 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PlugIn *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v5);
  v3 = v8[3];
  _Block_object_dispose(&v7, 8);
  return v3;
}

void sub_1B57E6AC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void ___ZN11HALS_PlugIn14RemoveEndPointEP17HALS_PlugInDevice_block_invoke(uint64_t a1)
{
  uint64_t v1;
  HALS_ObjectMap **v2;
  HALS_ObjectMap **v3;
  HALS_ObjectMap *v4;
  void *v5;
  int64_t v6;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(HALS_ObjectMap ***)(v1 + 520);
  v3 = *(HALS_ObjectMap ***)(v1 + 528);
  if (v2 != v3)
  {
    v4 = *(HALS_ObjectMap **)(a1 + 40);
    while (*v2 != v4)
    {
      if (++v2 == v3)
        return;
    }
    *v2 = 0;
    v5 = v2 + 1;
    v6 = (char *)v3 - (char *)(v2 + 1);
    if (v3 != v2 + 1)
      memmove(v2, v5, (char *)v3 - (char *)(v2 + 1));
    *(_QWORD *)(v1 + 528) = (char *)v2 + v6;
    HALS_ObjectMap::ReleaseObject(v4, (HALS_Object *)v5);
  }
}

void sub_1B57E6B58(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void HALS_PlugIn::RemoveEndPoint(HALS_PlugIn *this, HALS_PlugInDevice *a2)
{
  HALB_Mutex *v2;
  _QWORD v3[6];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = ___ZN11HALS_PlugIn14RemoveEndPointEP17HALS_PlugInDevice_block_invoke;
  v3[3] = &__block_descriptor_tmp_34;
  v3[4] = this;
  v3[5] = a2;
  v2 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PlugIn *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v3);
}

void ___ZN11HALS_PlugIn11AddEndPointEP17HALS_PlugInDevice_block_invoke(_QWORD *a1)
{
  HALS_PlugIn *v2;
  uint64_t v3;
  const __CFString *v4;
  HALS_ObjectMap *v5;
  HALS_Object *v6;
  int v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  int v19;
  const char *v20;
  __int16 v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v2 = (HALS_PlugIn *)a1[5];
  v3 = a1[6];
  v4 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 200))(v3);
  v5 = HALS_PlugIn::CopyEndPointByUID(v2, v4, 0);
  if (v5)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      v19 = 136315394;
      v20 = "HALS_PlugIn.cpp";
      v21 = 1024;
      v22 = 2042;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_PlugInManager::_AddEndPoint: there is already a endpoint with this UID", (uint8_t *)&v19, 0x12u);
    }
    HALS_ObjectMap::ReleaseObject(v5, v6);
    v7 = 1852797029;
  }
  else
  {
    v8 = (_QWORD *)*((_QWORD *)v2 + 66);
    v9 = *((_QWORD *)v2 + 67);
    if ((unint64_t)v8 >= v9)
    {
      v11 = (_QWORD *)*((_QWORD *)v2 + 65);
      v12 = v8 - v11;
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 61)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v14 = v9 - (_QWORD)v11;
      if (v14 >> 2 > v13)
        v13 = v14 >> 2;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
        v15 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v15 = v13;
      if (v15)
      {
        if (v15 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v16 = (char *)operator new(8 * v15);
      }
      else
      {
        v16 = 0;
      }
      v17 = &v16[8 * v12];
      *(_QWORD *)v17 = v3;
      v10 = v17 + 8;
      if (v8 != v11)
      {
        do
        {
          v18 = *--v8;
          *((_QWORD *)v17 - 1) = v18;
          v17 -= 8;
        }
        while (v8 != v11);
        v8 = (_QWORD *)*((_QWORD *)v2 + 65);
      }
      *((_QWORD *)v2 + 65) = v17;
      *((_QWORD *)v2 + 66) = v10;
      *((_QWORD *)v2 + 67) = &v16[8 * v15];
      if (v8)
        operator delete(v8);
    }
    else
    {
      *v8 = v3;
      v10 = v8 + 1;
    }
    v7 = 0;
    *((_QWORD *)v2 + 66) = v10;
  }
  *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = v7;
}

void sub_1B57E6DAC(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B57E6D58);
  }
  _Unwind_Resume(a1);
}

HALS_ObjectMap *HALS_PlugIn::CopyEndPointByUID(HALS_PlugIn *this, const __CFString *a2, HALS_Client *a3)
{
  HALB_Mutex *v4;
  HALS_Object *v5;
  HALS_ObjectMap **v6;
  HALS_ObjectMap *v7;
  const __CFString *v8;
  HALS_Object *v9;
  _QWORD v11[7];
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  __n128 (*v15)(_QWORD *, uint64_t);
  void (*v16)(uint64_t, HALS_Object *);
  HALS_ObjectMap **v17[3];

  v12 = 0;
  v13 = &v12;
  v14 = 0x4002000000;
  v15 = __Block_byref_object_copy__23;
  v16 = __Block_byref_object_dispose__24;
  memset(v17, 0, sizeof(v17));
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 0x40000000;
  v11[2] = ___ZNK11HALS_PlugIn17CopyEndPointByUIDEPK10__CFStringP11HALS_Client_block_invoke;
  v11[3] = &unk_1E696BFD8;
  v11[4] = &v12;
  v11[5] = this;
  v11[6] = a3;
  v4 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PlugIn *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v4, (uint64_t)v11);
  v6 = (HALS_ObjectMap **)v13[5];
  while (v6 != (HALS_ObjectMap **)v13[6])
  {
    v7 = *v6;
    v8 = (const __CFString *)(*(uint64_t (**)(HALS_ObjectMap *))(*(_QWORD *)*v6 + 200))(*v6);
    ++v6;
    if (CFStringCompare(v8, a2, 0) == kCFCompareEqualTo)
      goto LABEL_6;
  }
  v7 = 0;
LABEL_6:
  HALS_ObjectMap::RetainObject(v7, v5);
  _Block_object_dispose(&v12, 8);
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(v17, v9);
  return v7;
}

void sub_1B57E6EFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  HALS_ObjectMap ***v9;
  HALS_Object *v11;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(v9, v11);
  _Unwind_Resume(a1);
}

void ___ZNK11HALS_PlugIn17CopyEndPointByUIDEPK10__CFStringP11HALS_Client_block_invoke(uint64_t a1)
{
  HALS_PlugIn::_CopyEndPointList(*(_QWORD *)(a1 + 40), (void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));
}

void sub_1B57E6F44(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t HALS_PlugIn::CopyDeviceByUCID(HALS_PlugIn *this, int a2)
{
  HALB_Mutex *v2;
  uint64_t v3;
  _QWORD v5[6];
  int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2000000000;
  v10 = 0;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZNK11HALS_PlugIn16CopyDeviceByUCIDEj_block_invoke;
  v5[3] = &unk_1E696BEA8;
  v5[4] = &v7;
  v5[5] = this;
  v6 = a2;
  v2 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PlugIn *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v5);
  v3 = v8[3];
  _Block_object_dispose(&v7, 8);
  return v3;
}

void sub_1B57E7070(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void ___ZN11HALS_PlugIn12RemoveDeviceEP17HALS_PlugInDevice_block_invoke(uint64_t a1)
{
  _QWORD *v1;
  char *v2;
  HALS_ObjectMap **v3;
  HALS_ObjectMap *v4;
  HALS_ObjectMap **v5;
  void *v6;
  int64_t v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD **)(a1 + 32);
  v2 = (char *)v1[62];
  v3 = (HALS_ObjectMap **)v1[63];
  if (v2 != (char *)v3)
  {
    v4 = *(HALS_ObjectMap **)(a1 + 40);
    v5 = (HALS_ObjectMap **)v1[62];
    while (*v5 != v4)
    {
      if (++v5 == v3)
        return;
    }
    *v5 = 0;
    v6 = v5 + 1;
    v7 = (char *)v3 - (char *)(v5 + 1);
    if (v3 != v5 + 1)
    {
      memmove(v5, v6, (char *)v3 - (char *)(v5 + 1));
      v2 = (char *)v1[62];
    }
    v8 = (char *)v5 + v7;
    v1[63] = (char *)v5 + v7;
    v9 = v1[64];
    if ((((char *)v5 + v7 - v2) >> 3) + 20 >= (unint64_t)((v9 - (uint64_t)v2) >> 3))
      goto LABEL_19;
    v10 = (_BYTE *)v1[62];
    v11 = (v8 - v10) >> 3;
    if (v11 >= (v9 - (uint64_t)v10) >> 3)
      goto LABEL_19;
    if (v8 == v10)
    {
      v15 = 0;
      v14 = 8 * v11;
    }
    else
    {
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((v8 - v10) >> 3);
      v13 = (char *)v1[62];
      v8 = (char *)v1[63];
      v14 = (uint64_t)&v12[8 * v11];
      v15 = &v12[8 * (_QWORD)v6];
      if (v8 != v13)
      {
        v16 = v14;
        do
        {
          v17 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          *(_QWORD *)(v16 - 8) = v17;
          v16 -= 8;
        }
        while (v8 != v13);
        v8 = (char *)v1[62];
        goto LABEL_17;
      }
    }
    v16 = v14;
LABEL_17:
    v1[62] = v16;
    v1[63] = v14;
    v1[64] = v15;
    if (v8)
      operator delete(v8);
LABEL_19:
    HALS_ObjectMap::ReleaseObject(v4, (HALS_Object *)v6);
  }
}

void sub_1B57E71A0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B57E7188);
}

void sub_1B57E71B0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void HALS_PlugIn::AddDevice(HALS_PlugIn *this, HALS_PlugInDevice *a2)
{
  HALB_Mutex *v2;
  _QWORD v3[7];
  _QWORD v4[3];
  int v5;

  v4[0] = 0;
  v4[1] = v4;
  v4[2] = 0x2000000000;
  v5 = 0;
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = ___ZN11HALS_PlugIn9AddDeviceEP17HALS_PlugInDevice_block_invoke;
  v3[3] = &unk_1E696BED0;
  v3[4] = v4;
  v3[5] = this;
  v3[6] = a2;
  v2 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PlugIn *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v3);
  _Block_object_dispose(v4, 8);
}

void sub_1B57E7250(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void HALS_PlugIn::RemoveDevice(HALS_PlugIn *this, HALS_PlugInDevice *a2)
{
  HALB_Mutex *v2;
  _QWORD v3[6];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = ___ZN11HALS_PlugIn12RemoveDeviceEP17HALS_PlugInDevice_block_invoke;
  v3[3] = &__block_descriptor_tmp_20;
  v3[4] = this;
  v3[5] = a2;
  v2 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PlugIn *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v3);
}

void ___ZN11HALS_PlugIn9AddDeviceEP17HALS_PlugInDevice_block_invoke(_QWORD *a1)
{
  HALS_DeviceManager *v2;
  uint64_t v3;
  const __CFString *v4;
  HALS_ObjectMap *v5;
  HALS_Object *v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  int v23;
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v2 = (HALS_DeviceManager *)a1[5];
  v3 = a1[6];
  v4 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 200))(v3);
  v5 = HALS_DeviceManager::CopyDeviceByUID(v2, v4, 0);
  if (v5)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 216))(v3);
      v23 = 136315650;
      v24 = "HALS_PlugIn.cpp";
      v25 = 1024;
      v26 = 1665;
      v27 = 2082;
      v28 = v7;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_PlugInManager::_AddDevice: there is already a device with the UID, %{public}s", (uint8_t *)&v23, 0x1Cu);
    }
    HALS_ObjectMap::ReleaseObject(v5, v6);
    v8 = 1852797029;
  }
  else
  {
    v10 = (_QWORD *)*((_QWORD *)v2 + 63);
    v9 = *((_QWORD *)v2 + 64);
    if ((unint64_t)v10 >= v9)
    {
      v12 = *((_QWORD *)v2 + 62);
      v13 = ((uint64_t)v10 - v12) >> 3;
      if ((unint64_t)(v13 + 1) >> 61)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v14 = v9 - v12;
      v15 = v14 >> 2;
      if (v14 >> 2 <= (unint64_t)(v13 + 1))
        v15 = v13 + 1;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
        v16 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v16 = v15;
      if (v16)
        v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v16);
      else
        v17 = 0;
      v18 = (_QWORD *)(v16 + 8 * v13);
      v19 = v16 + 8 * v17;
      *v18 = v3;
      v11 = v18 + 1;
      v21 = (char *)*((_QWORD *)v2 + 62);
      v20 = (char *)*((_QWORD *)v2 + 63);
      if (v20 != v21)
      {
        do
        {
          v22 = *((_QWORD *)v20 - 1);
          v20 -= 8;
          *--v18 = v22;
        }
        while (v20 != v21);
        v20 = (char *)*((_QWORD *)v2 + 62);
      }
      *((_QWORD *)v2 + 62) = v18;
      *((_QWORD *)v2 + 63) = v11;
      *((_QWORD *)v2 + 64) = v19;
      if (v20)
        operator delete(v20);
    }
    else
    {
      *v10 = v3;
      v11 = v10 + 1;
    }
    v8 = 0;
    *((_QWORD *)v2 + 63) = v11;
  }
  *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = v8;
}

void sub_1B57E7494(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B57E7450);
  }
  _Unwind_Resume(a1);
}

void ___ZNK11HALS_PlugIn16CopyDeviceByUCIDEj_block_invoke(uint64_t a1)
{
  HALS_DeviceManager *v2;
  int v3;
  HALS_Object *v4;
  HALS_ObjectMap **v5;
  HALS_ObjectMap *v6;
  HALS_ObjectMap *v7;
  HALS_ObjectMap *v8;
  HALS_Object *v9;
  HALS_ObjectMap **v10;
  HALS_ObjectMap **v11;
  uint64_t v12;

  v2 = *(HALS_DeviceManager **)(a1 + 40);
  v3 = *(_DWORD *)(a1 + 48);
  v10 = 0;
  v11 = 0;
  v12 = 0;
  HALS_DeviceManager::CopyDeviceList(v2, (HALS_DeviceManager::BasicDeviceList *)&v10, 1, 0);
  v5 = v10;
  if (v10 == v11)
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    do
    {
      v8 = *v5++;
      v7 = v8;
      if (*((_DWORD *)v8 + 331) == v3)
        v6 = v7;
    }
    while (v5 != v11);
  }
  HALS_ObjectMap::RetainObject(v6, v4);
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(&v10, v9);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v6;
}

void sub_1B57E7574(_Unwind_Exception *a1, HALS_Object *a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList((HALS_ObjectMap ***)va, a2);
  _Unwind_Resume(a1);
}

void ___ZNK11HALS_PlugIn18CopyResourceBundleEv_block_invoke(uint64_t a1)
{
  uint64_t v2;
  const __CFString *v3;
  uint64_t v4;
  const __CFURL *v5;
  uint64_t v6;
  _DWORD *exception;
  CFURLRef bundleURL;
  char v9;
  const __CFString *v10;
  char v11;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 40);
  if (!*(_BYTE *)(v2 + 384))
  {
    *(_BYTE *)(v2 + 384) = 1;
    if (HALS_PlugInObject::HasResourceBundle(v2 + 328, 0))
    {
      v3 = (const __CFString *)HALS_PlugInObject::CopyResourceBundlePath(v2 + 328, 0);
      v10 = v3;
      v11 = 1;
      if (v3)
      {
        bundleURL = CFURLCreateWithFileSystemPath(0, v3, kCFURLPOSIXPathStyle, 1u);
        v9 = 1;
        if (!bundleURL)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            v13 = "HALS_PlugIn.cpp";
            v14 = 1024;
            v15 = 721;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugIn::_InitializeResourceBundle: Can't create a URL for the given path to the resource bundle", buf, 0x12u);
          }
          exception = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)exception = &off_1E69A1B30;
          exception[2] = 2003329396;
        }
        v4 = operator new();
        v5 = bundleURL;
        *(_QWORD *)v4 = &off_1E6971AA0;
        *(_QWORD *)(v4 + 8) = CFBundleCreate(0, v5);
        *(_BYTE *)(v4 + 16) = 1;
        *(_QWORD *)(v2 + 392) = v4;
        CACFObject<__CFURL const*>::~CACFObject((uint64_t)&bundleURL);
      }
      CACFString::~CACFString((CACFString *)&v10);
    }
  }
  v6 = *(_QWORD *)(v2 + 392);
  if (v6)
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_QWORD *)(v6 + 8);
    CFRetain(*(CFTypeRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
  }
}

void sub_1B57E7788(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  uint64_t v12;

  if (a2)
  {
    MEMORY[0x1B5E50688](v11, 0x10A1C4047070A01);
    CACFObject<__CFURL const*>::~CACFObject((uint64_t)&a9);
    CACFString::~CACFString((CACFString *)&a11);
    __cxa_begin_catch(exception_object);
    *(_QWORD *)(v12 + 392) = 0;
    __cxa_end_catch();
    JUMPOUT(0x1B57E766CLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CACFObject<__CFURL const*>::~CACFObject(uint64_t a1)
{
  const void *v2;

  if (*(_BYTE *)(a1 + 8))
  {
    v2 = *(const void **)a1;
    if (*(_QWORD *)a1)
    {
      CFRelease(v2);
      *(_QWORD *)a1 = 0;
    }
  }
  return a1;
}

void CACFString::~CACFString(CACFString *this)
{
  const void *v2;

  if (*((_BYTE *)this + 8))
  {
    v2 = *(const void **)this;
    if (*(_QWORD *)this)
      CFRelease(v2);
  }
}

void CAPropertyAddressList::AppendUniqueItem(CAPropertyAddressList *this, AudioObjectPropertyAddress *a2, const AudioObjectPropertyAddress *a3)
{
  uint64_t v5;
  AudioObjectPropertyAddress *v6;
  const AudioObjectPropertyAddress *v7;
  unint64_t v8;
  uint64_t v9;
  AudioObjectPropertyAddress *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  AudioObjectPropertyElement mElement;

  v5 = *(_QWORD *)this;
  v6 = (AudioObjectPropertyAddress *)*((_QWORD *)this + 1);
  if (*(AudioObjectPropertyAddress **)this == v6)
  {
    v6 = *(AudioObjectPropertyAddress **)this;
LABEL_8:
    v21 = *(_QWORD *)&a2->mSelector;
    mElement = a2->mElement;
    v8 = *((_QWORD *)this + 2);
    if ((unint64_t)v6 >= v8)
    {
      v11 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v6 - v5) >> 2) + 1;
      if (v11 > 0x1555555555555555)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - v5) >> 2);
      if (2 * v12 > v11)
        v11 = 2 * v12;
      if (v12 >= 0xAAAAAAAAAAAAAAALL)
        v13 = 0x1555555555555555;
      else
        v13 = v11;
      if (v13)
        v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v13);
      else
        v14 = 0;
      v15 = v13 + 4 * (((uint64_t)v6 - v5) >> 2);
      v16 = v13 + 12 * v14;
      *(_QWORD *)v15 = v21;
      *(_DWORD *)(v15 + 8) = mElement;
      v10 = (AudioObjectPropertyAddress *)(v15 + 12);
      v18 = *(_DWORD **)this;
      v17 = (_DWORD *)*((_QWORD *)this + 1);
      if (v17 != *(_DWORD **)this)
      {
        do
        {
          v19 = *(_QWORD *)(v17 - 3);
          v17 -= 3;
          v20 = v17[2];
          *(_QWORD *)(v15 - 12) = v19;
          v15 -= 12;
          *(_DWORD *)(v15 + 8) = v20;
        }
        while (v17 != v18);
        v17 = *(_DWORD **)this;
      }
      *(_QWORD *)this = v15;
      *((_QWORD *)this + 1) = v10;
      *((_QWORD *)this + 2) = v16;
      if (v17)
        operator delete(v17);
    }
    else
    {
      v9 = *(_QWORD *)&a2->mSelector;
      v6->mElement = a2->mElement;
      *(_QWORD *)&v6->mSelector = v9;
      v10 = v6 + 1;
    }
    *((_QWORD *)this + 1) = v10;
    return;
  }
  v7 = *(const AudioObjectPropertyAddress **)this;
  while (!CAPropertyAddress::IsCongruentAddress((CAPropertyAddress *)a2, v7, a3))
  {
    if (++v7 == v6)
      goto LABEL_8;
  }
  if (v7 == v6)
    goto LABEL_8;
}

void ___ZN10applesauce8dispatch2v19sync_implIRZN11HALS_PlugIn31_InitializePlugInAndAndActivateERNSt3__16vectorIjNS4_9allocatorIjEEEEE3__0EEvP16dispatch_queue_sOT_NS4_17integral_constantIbLb1EEE_block_invoke(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  HALS_Object *v5;
  uint64_t v6;
  void *v7;
  __int128 v8;
  uint64_t v9;

  v1 = *(uint64_t **)(a1 + 32);
  v2 = *v1;
  v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v1 + 400) + 24))(*(_QWORD *)(*v1 + 400));
  v4 = **(_QWORD **)(v2 + 400);
  if ((v3 & 1) != 0)
    (*(void (**)(void))(v4 + 64))();
  else
    (*(void (**)(void))(v4 + 56))();
  HALS_Object::Activate((HALS_Object *)v2, v5);
  (*(void (**)(uint64_t))(*(_QWORD *)(v2 + 328) + 32))(v2 + 328);
  HALS_PlugIn::RebuildDeviceList((HALS_PlugIn *)&v8, v2);
  v6 = v1[1];
  v7 = *(void **)v6;
  if (*(_QWORD *)v6)
  {
    *(_QWORD *)(v6 + 8) = v7;
    operator delete(v7);
  }
  *(_OWORD *)v6 = v8;
  *(_QWORD *)(v6 + 16) = v9;
  HALS_PlugIn::RebuildEndPointList(v2);
  HALS_PlugIn::RebuildBoxList((HALS_PlugIn *)v2);
  HALS_PlugIn::RebuildClockDeviceList((HALS_PlugIn *)v2);
}

void sub_1B57E7AAC(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  **(_DWORD **)(v1 + 16) = 2003329396;
  __cxa_end_catch();
}

uint64_t HALS_PlugIn::HALS_PlugIn(uint64_t a1, HALS_System *a2, uint64_t a3, uint64_t a4, HALS_Object *a5)
{
  char v5;
  uint64_t v8;
  _QWORD *v9;
  const void *v10;
  _QWORD *v11;
  unsigned int *v12;
  int v13;
  char *v14;
  size_t v15;
  HALB_Mutex *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  _DWORD *exception;
  uint64_t v22;
  _QWORD v24[5];
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, const HALS_Object *, int, uint64_t, uint64_t);
  void *v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  int v32;
  _BYTE aBlock[24];
  void *v34;
  uint64_t v35;
  uint64_t v36;

  v5 = a4;
  v36 = *MEMORY[0x1E0C80C00];
  HALS_DeviceManager::HALS_DeviceManager((HALS_DeviceManager *)a1, a2, CFSTR("temporary"), a4, a5);
  *(_DWORD *)(v8 + 344) = *(_DWORD *)(v8 + 16);
  *(_DWORD *)(v8 + 348) = 1;
  *(_QWORD *)(v8 + 352) = 0;
  *(_DWORD *)(v8 + 360) = 0;
  *(_QWORD *)v8 = off_1E696BCA8;
  *(_QWORD *)(v8 + 328) = &unk_1E696BDF0;
  *(_QWORD *)(v8 + 336) = v8;
  *(_QWORD *)(v8 + 392) = 0;
  v9 = (_QWORD *)(v8 + 400);
  *(_QWORD *)(v8 + 368) = 0;
  *(_QWORD *)(v8 + 376) = 0;
  *(_BYTE *)(v8 + 384) = 0;
  *(_OWORD *)(v8 + 400) = *(_OWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_OWORD *)(v8 + 560) = 0u;
  *(_OWORD *)(v8 + 576) = 0u;
  *(_OWORD *)(v8 + 528) = 0u;
  *(_OWORD *)(v8 + 544) = 0u;
  *(_OWORD *)(v8 + 496) = 0u;
  *(_OWORD *)(v8 + 512) = 0u;
  *(_OWORD *)(v8 + 464) = 0u;
  *(_OWORD *)(v8 + 480) = 0u;
  *(_OWORD *)(v8 + 432) = 0u;
  *(_OWORD *)(v8 + 448) = 0u;
  *(_OWORD *)(v8 + 416) = 0u;
  *(_DWORD *)(v8 + 44) = 1;
  v10 = (const void *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8 + 400) + 40))(*(_QWORD *)(v8 + 400));
  v11 = (_QWORD *)CACFString::operator=(a1 + 48, v10);
  if (!*v11)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)aBlock = 136315394;
      *(_QWORD *)&aBlock[4] = "HALS_PlugIn.cpp";
      *(_WORD *)&aBlock[12] = 1024;
      *(_DWORD *)&aBlock[14] = 252;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugIn::InitializeCommon: all plugins have to have a bundle ID", aBlock, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 1852797029;
  }
  *(_QWORD *)(a1 + 464) = CFStringCreateWithFormat(0, 0, CFSTR("Plug-In.%@"), *v11);
  *(_DWORD *)aBlock = 256;
  CACFString::GetCString(*(const __CFString **)(a1 + 48), (__CFString *)(a1 + 64), aBlock, v12);
  v13 = *(_DWORD *)aBlock;
  v14 = (char *)operator new[]();
  v15 = (v13 + 31);
  snprintf(v14, v15, "com.apple.audio.manager.%s", (const char *)(a1 + 64));
  v16 = (HALB_Mutex *)operator new();
  HALB_Mutex::HALB_Mutex(v16);
  *(_QWORD *)(a1 + 368) = v16;
  snprintf(v14, v15, "com.apple.audio.manager.%s.event", (const char *)(a1 + 64));
  v17 = operator new();
  *(_QWORD *)(a1 + 376) = AMCP::Utility::Dispatch_Queue::Dispatch_Queue(v17, v14);
  MEMORY[0x1B5E50664](v14, 0x1000C8077774924);
  if ((v5 & 1) != 0 || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v9 + 24))(*v9) & 1) == 0)
  {
    *(_QWORD *)(a1 + 416) = HALS_PlugIn::HostInterface_PropertiesChanged;
    *(_QWORD *)(a1 + 424) = HALS_PlugIn::HostInterface_CopyFromStorage;
    *(_QWORD *)(a1 + 432) = HALS_PlugIn::HostInterface_WriteToStorage;
    *(_QWORD *)(a1 + 440) = HALS_PlugIn::HostInterface_DeleteFromStorage;
    *(_QWORD *)(a1 + 448) = HALS_PlugIn::HostInterface_RequestDeviceConfigurationChange;
    *(_QWORD *)(a1 + 456) = a1;
  }
  else
  {
    v18 = MEMORY[0x1E0C809B0];
    *(_DWORD *)(a1 + 348) = 2;
    *(_QWORD *)aBlock = v18;
    *(_QWORD *)&aBlock[8] = 0x40000000;
    *(_QWORD *)&aBlock[16] = ___ZN11HALS_PlugIn18InitializeHostInfoEv_block_invoke;
    v34 = &__block_descriptor_tmp_149;
    v35 = a1;
    *(_QWORD *)(a1 + 472) = _Block_copy(aBlock);
    v25 = v18;
    v26 = 0x40000000;
    v27 = ___ZN11HALS_PlugIn18InitializeHostInfoEv_block_invoke_2;
    v28 = &__block_descriptor_tmp_13;
    v29 = a1;
    *(_QWORD *)(a1 + 480) = _Block_copy(&v25);
    v24[0] = v18;
    v24[1] = 0x40000000;
    v24[2] = ___ZN11HALS_PlugIn18InitializeHostInfoEv_block_invoke_3;
    v24[3] = &__block_descriptor_tmp_15;
    v24[4] = a1;
    *(_QWORD *)(a1 + 488) = _Block_copy(v24);
  }
  if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v9 + 24))(*v9) & 1) == 0)
  {
    v19 = *v9;
    v25 = 0x676C6F62636C6173;
    LODWORD(v26) = 0;
    v30 = 0;
    v31 = 0;
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t *, _QWORD, _QWORD, uint64_t, int *, unsigned int *))(*(_QWORD *)v19 + 568))(v19, 1, 0, &v25, 0, 0, 4, &v30, &v31);
    v20 = v31;
    if ((HALB_Info::IsStandardClass((HALB_Info *)v31) & 1) != 0)
    {
      if (v20 != 1953656941)
        return a1;
      goto LABEL_14;
    }
    v22 = *v9;
    strcpy(aBlock, "slcbbolg");
    aBlock[9] = 0;
    *(_WORD *)&aBlock[10] = 0;
    LODWORD(v24[0]) = 0;
    v32 = 0;
    (*(void (**)(uint64_t, uint64_t, _QWORD, _BYTE *, _QWORD, _QWORD, uint64_t, int *, _QWORD *))(*(_QWORD *)v22 + 568))(v22, 1, 0, aBlock, 0, 0, 4, &v32, v24);
    if (LODWORD(v24[0]) == 1953656941)
LABEL_14:
      *(int32x2_t *)(a1 + 20) = vdup_n_s32(0x7472706Du);
  }
  return a1;
}

void sub_1B57E7F78(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B57E7F38);
  }
  _Unwind_Resume(a1);
}

void sub_1B57E7F90()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  MEMORY[0x1B5E50688](v3, 0x10A0C40CF3E2C79);
  MEMORY[0x1B5E50664](v2, 0x1000C8077774924);
  v4 = (void *)v0[71];
  if (v4)
  {
    v0[72] = v4;
    operator delete(v4);
  }
  v5 = (void *)v0[68];
  if (v5)
  {
    v0[69] = v5;
    operator delete(v5);
  }
  v6 = (void *)v0[65];
  if (v6)
  {
    v0[66] = v6;
    operator delete(v6);
  }
  v7 = (void *)v0[62];
  if (v7)
  {
    v0[63] = v7;
    operator delete(v7);
  }
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v1);
  HALS_PlugInObject::~HALS_PlugInObject((HALS_PlugInObject *)(v0 + 41));
  *v0 = off_1E6985A90;
  CACFString::~CACFString((CACFString *)(v0 + 6));
  HALS_Object::~HALS_Object((HALS_Object *)v0);
  JUMPOUT(0x1B57E8044);
}

uint64_t HALS_PlugIn::HostInterface_PropertiesChanged(HALS_PlugIn *this, const AudioServerPlugInHostInterface *a2, unsigned int a3, const void *a4, const AudioObjectPropertyAddress *a5)
{
  const AudioObjectPropertyAddress *v6;
  _anonymous_namespace_ *v7;
  _anonymous_namespace_ *v8;
  _anonymous_namespace_ *v9;
  _anonymous_namespace_ *i;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  void **v21;
  const void *v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t *v25;
  unint64_t v26;
  int v27;
  int v28;
  uint64_t (*v29)(void);
  uint64_t v30;
  unsigned __int8 v31;
  NSObject *v32;
  uint64_t v33;
  unsigned __int8 v34;
  NSObject *v35;
  _QWORD *v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t j;
  void *v48;
  void *v50;
  int v51;
  char *v52;
  std::__shared_weak_count *v53;
  __int128 v54;
  char *v55;
  std::__shared_weak_count *v56;
  void *__p;
  _anonymous_namespace_ *v58;
  uint64_t v59;
  uint64_t block[5];
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  _QWORD v67[4];

  v51 = (int)a2;
  v67[2] = *MEMORY[0x1E0C80C00];
  __p = 0;
  v58 = 0;
  v59 = 0;
  std::vector<AudioObjectPropertyAddress>::__init_with_size[abi:ne180100]<AudioObjectPropertyAddress const*,AudioObjectPropertyAddress const*>(&__p, a4, (uint64_t)a4 + 12 * a3, a3);
  v7 = (_anonymous_namespace_ *)__p;
  v8 = v58;
  v9 = (_anonymous_namespace_ *)__p;
  if (__p != v58)
  {
    v9 = (_anonymous_namespace_ *)__p;
    while ((AMCP::HAL::is_config_change_property((AMCP::HAL *)*(unsigned int *)v9) & 1) == 0)
    {
      v9 = (_anonymous_namespace_ *)((char *)v9 + 12);
      if (v9 == v8)
        goto LABEL_14;
    }
    if (v9 != v8)
    {
      for (i = (_anonymous_namespace_ *)((char *)v9 + 12); i != v8; i = (_anonymous_namespace_ *)((char *)i + 12))
      {
        if ((AMCP::HAL::is_config_change_property((AMCP::HAL *)*(unsigned int *)i) & 1) == 0)
        {
          v11 = *(_QWORD *)i;
          *((_DWORD *)v9 + 2) = *((_DWORD *)i + 2);
          *(_QWORD *)v9 = v11;
          v9 = (_anonymous_namespace_ *)((char *)v9 + 12);
        }
      }
    }
  }
  if (v9 != v8)
  {
    v6 = (const AudioObjectPropertyAddress *)v8;
    v8 = v9;
    v58 = v9;
  }
LABEL_14:
  if (v8 != v7)
  {
    {
LABEL_16:
      v7 = (_anonymous_namespace_ *)((char *)v7 + 12);
      if (v7 == v8)
        goto LABEL_22;
    }
    while (1)
    {
      v8 = (_anonymous_namespace_ *)((char *)v8 - 12);
      if (v8 == v7)
        break;
      {
        v12 = *(void **)v7;
        LODWORD(v62) = *((_DWORD *)v7 + 2);
        v61 = v12;
        v13 = *(_QWORD *)v8;
        *((_DWORD *)v7 + 2) = *((_DWORD *)v8 + 2);
        *(_QWORD *)v7 = v13;
        v14 = v61;
        *((_DWORD *)v8 + 2) = v62;
        *(_QWORD *)v8 = v14;
        goto LABEL_16;
      }
    }
  }
  v8 = v7;
LABEL_22:
  v62 = 0;
  v63 = 0;
  v61 = 0;
  std::vector<AudioObjectPropertyAddress>::__init_with_size[abi:ne180100]<std::__wrap_iter<AudioObjectPropertyAddress*>,std::__wrap_iter<AudioObjectPropertyAddress*>>(&v61, __p, (uint64_t)v8, 0xAAAAAAAAAAAAAAABLL * ((v8 - (_anonymous_namespace_ *)__p) >> 2));
  v15 = v61;
  v16 = v62;
  v62 = 0;
  v63 = 0;
  v61 = 0;
  std::vector<AudioObjectPropertyAddress>::__init_with_size[abi:ne180100]<std::__wrap_iter<AudioObjectPropertyAddress*>,std::__wrap_iter<AudioObjectPropertyAddress*>>(&v61, v8, (uint64_t)v58, 0xAAAAAAAAAAAAAAABLL * ((v58 - v8) >> 2));
  v17 = v61;
  v18 = v62;
  LODWORD(v61) = 0;
  v63 = 0;
  v64 = 0;
  v62 = 0;
  v50 = v17;
  std::vector<AudioObjectPropertyAddress>::__init_with_size[abi:ne180100]<AudioObjectPropertyAddress*,AudioObjectPropertyAddress*>(&v62, v15, v16, 0xAAAAAAAAAAAAAAABLL * ((v16 - (uint64_t)v15) >> 2));
  v65 = 1;
  v67[0] = 0;
  v67[1] = 0;
  v66 = 0;
  std::vector<AudioObjectPropertyAddress>::__init_with_size[abi:ne180100]<AudioObjectPropertyAddress*,AudioObjectPropertyAddress*>(&v66, v17, v18, 0xAAAAAAAAAAAAAAABLL * ((v18 - (uint64_t)v17) >> 2));
  v19 = 0;
  v20 = &v61;
  do
  {
    v21 = &v61 + 4 * v19;
    v22 = v21[1];
    v23 = (uint64_t)v21[2];
    if (v22 != (const void *)v23)
    {
      v24 = operator new(0x30uLL);
      *(_OWORD *)(v24 + 1) = 0u;
      v25 = v24 + 1;
      *v24 = &off_1E6974468;
      v24[3] = 0;
      *((_OWORD *)v24 + 2) = 0u;
      std::vector<AudioObjectPropertyAddress>::__init_with_size[abi:ne180100]<AudioObjectPropertyAddress*,AudioObjectPropertyAddress*>(v24 + 3, v22, v23, 0xAAAAAAAAAAAAAAABLL * ((v23 - (uint64_t)v22) >> 2));
      v55 = (char *)(v24 + 3);
      v56 = (std::__shared_weak_count *)v24;
      v52 = (char *)(v24 + 3);
      v53 = (std::__shared_weak_count *)v24;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
      LODWORD(v54) = v51;
      *((_QWORD *)&v54 + 1) = this;
      v27 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 40))(*((_QWORD *)this + 5));
      if (*(_DWORD *)v20)
        v28 = 0;
      else
        v28 = v27;
      v29 = *(uint64_t (**)(void))(**((_QWORD **)this + 5) + 64);
      if (v28 == 1)
      {
        v30 = v29();
        v31 = atomic_load((unsigned __int8 *)(v30 + 32));
        if ((v31 & 1) != 0)
          atomic_store(1u, (unsigned __int8 *)(v30 + 33));
        v32 = *(NSObject **)v30;
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 0x40000000;
        block[2] = (uint64_t)___ZN10applesauce8dispatch2v19sync_implIRZN11HALS_PlugIn31HostInterface_PropertiesChangedEPK30AudioServerPlugInHostInterfacejjPK26AudioObjectPropertyAddressE3__0EEvP16dispatch_queue_sOT_NSt3__117integral_constantIbLb1EEE_block_invoke;
        block[3] = (uint64_t)&__block_descriptor_tmp_61;
        block[4] = (uint64_t)&v52;
        dispatch_sync(v32, block);
      }
      else
      {
        v33 = v29();
        v34 = atomic_load((unsigned __int8 *)(v33 + 32));
        if ((v34 & 1) != 0)
          atomic_store(1u, (unsigned __int8 *)(v33 + 33));
        v35 = *(NSObject **)v33;
        v36 = (_QWORD *)operator new();
        v37 = v53;
        *v36 = v52;
        v36[1] = v37;
        if (v37)
        {
          p_shared_owners = (unint64_t *)&v37->__shared_owners_;
          do
            v39 = __ldxr(p_shared_owners);
          while (__stxr(v39 + 1, p_shared_owners));
        }
        *((_OWORD *)v36 + 1) = v54;
        block[0] = 0;
        dispatch_async_f(v35, v36, (dispatch_function_t)applesauce::dispatch::v1::async<HALS_PlugIn::HostInterface_PropertiesChanged(AudioServerPlugInHostInterface const*,unsigned int,unsigned int,AudioObjectPropertyAddress const*)::$_0 &>(dispatch_queue_s *,HALS_PlugIn::HostInterface_PropertiesChanged(AudioServerPlugInHostInterface const*,unsigned int,unsigned int,AudioObjectPropertyAddress const*)::$_0 &)::{lambda(void *)#1}::__invoke);
        std::unique_ptr<HALS_PlugIn::HostInterface_PropertiesChanged(AudioServerPlugInHostInterface const*,unsigned int,unsigned int,AudioObjectPropertyAddress const*)::$_0,std::default_delete<HALS_PlugIn::HostInterface_PropertiesChanged(AudioServerPlugInHostInterface const*,unsigned int,unsigned int,AudioObjectPropertyAddress const*)::$_0>>::~unique_ptr[abi:ne180100](block);
      }
      v40 = v53;
      if (v53)
      {
        v41 = (unint64_t *)&v53->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      v43 = v56;
      if (v56)
      {
        v44 = (unint64_t *)&v56->__shared_owners_;
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
    }
    v46 = v19 + 1;
    v20 = &v61 + 4 * v19 + 4;
    v19 = 1;
  }
  while (v46 != 2);
  for (j = 0; j != -8; j -= 4)
  {
    v48 = (void *)v67[j - 1];
    if (v48)
    {
      v67[j] = v48;
      operator delete(v48);
    }
  }
  if (v50)
    operator delete(v50);
  if (v15)
    operator delete(v15);
  if (__p)
    operator delete(__p);
  return 0;
}

void sub_1B57E8538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,void *__p,uint64_t a29)
{
  if (a2)
  {
    if (__p)
      operator delete(__p);
    if (a10)
      operator delete(a10);
    if (a11)
      operator delete(a11);
    if (a19)
      operator delete(a19);
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B57E84F4);
  }
  _Unwind_Resume(a1);
}

void sub_1B57E8634()
{
  JUMPOUT(0x1B57E858CLL);
}

__CFString *HALS_PlugIn::HostInterface_CopyFromStorage(HALS_PlugIn *this, const AudioServerPlugInHostInterface *a2, __CFString *a3, const void **a4)
{
  __CFString *v4;
  const __CFDictionary *Setting;
  CFTypeID v8;
  void *Value;
  CFDictionaryRef v11;
  __int16 v12;
  CFDictionaryRef theDict;
  char v14;

  v4 = a3;
  if (a3)
  {
    a3->isa = 0;
    Setting = (const __CFDictionary *)HALS_SettingsManager::ReadSetting(*(HALS_SettingsManager **)(*(_QWORD *)(*((_QWORD *)this + 5) + 320) + 1408), *(const __CFString **)(*((_QWORD *)this + 5) + 464));
    theDict = Setting;
    v14 = 1;
    if (Setting)
    {
      v8 = CFGetTypeID(Setting);
      if (v8 == CFDictionaryGetTypeID())
      {
        v11 = theDict;
        v12 = 0;
        if (theDict)
        {
          Value = (void *)CFDictionaryGetValue(theDict, a2);
          v4->isa = Value;
          if (!Value)
            goto LABEL_10;
        }
        else
        {
          Value = v4->isa;
          if (!v4->isa)
          {
LABEL_10:
            CACFDictionary::~CACFDictionary((CACFDictionary *)&v11);
            goto LABEL_11;
          }
        }
        CFRetain(Value);
        goto LABEL_10;
      }
      HALS_SettingsManager::DeleteSetting(*(HALS_SettingsManager **)(*(_QWORD *)(*((_QWORD *)this + 5) + 320) + 1408), *(CFTypeRef *)(*((_QWORD *)this + 5) + 464));
    }
LABEL_11:
    CACFObject<void const*>::~CACFObject((uint64_t)&theDict);
    return 0;
  }
  return v4;
}

void sub_1B57E8710(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  CACFDictionary::~CACFDictionary((CACFDictionary *)&a9);
  CACFObject<void const*>::~CACFObject((uint64_t)&a11);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B57E86F8);
}

uint64_t HALS_PlugIn::HostInterface_WriteToStorage(HALS_PlugIn *this, const AudioServerPlugInHostInterface *a2, const __CFString *a3, const void *a4)
{
  const __CFDictionary *Setting;
  CFTypeID v8;
  CFMutableDictionaryRef v9;
  CFDictionaryRef v11;
  char v12;
  CFMutableDictionaryRef theDict;
  __int16 v14;

  theDict = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
  v14 = 257;
  Setting = (const __CFDictionary *)HALS_SettingsManager::ReadSetting(*(HALS_SettingsManager **)(*(_QWORD *)(*((_QWORD *)this + 5) + 320) + 1408), *(const __CFString **)(*((_QWORD *)this + 5) + 464));
  v11 = Setting;
  v12 = 1;
  if (Setting)
  {
    v8 = CFGetTypeID(Setting);
    if (v8 == CFDictionaryGetTypeID())
      CACFDictionary::SetCFMutableDictionaryFromCopy((CACFDictionary *)&theDict, v11);
    else
      HALS_SettingsManager::DeleteSetting(*(HALS_SettingsManager **)(*(_QWORD *)(*((_QWORD *)this + 5) + 320) + 1408), *(CFTypeRef *)(*((_QWORD *)this + 5) + 464));
  }
  v9 = theDict;
  if (HIBYTE(v14) && a3 && theDict)
  {
    CFDictionarySetValue(theDict, a2, a3);
    v9 = theDict;
  }
  HALS_SettingsManager::WriteSetting(*(HALS_SettingsManager **)(*(_QWORD *)(*((_QWORD *)this + 5) + 320) + 1408), *(CFTypeRef *)(*((_QWORD *)this + 5) + 464), v9);
  CACFObject<void const*>::~CACFObject((uint64_t)&v11);
  CACFDictionary::~CACFDictionary((CACFDictionary *)&theDict);
  return 0;
}

void sub_1B57E886C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B57E8854);
}

uint64_t HALS_PlugIn::HostInterface_DeleteFromStorage(HALS_PlugIn *this, const AudioServerPlugInHostInterface *a2, const __CFString *a3)
{
  const __CFDictionary *Setting;
  CFTypeID v6;
  CFMutableDictionaryRef v7;
  CFMutableDictionaryRef theDict;
  __int16 v10;
  CFDictionaryRef v11;
  char v12;

  Setting = (const __CFDictionary *)HALS_SettingsManager::ReadSetting(*(HALS_SettingsManager **)(*(_QWORD *)(*((_QWORD *)this + 5) + 320) + 1408), *(const __CFString **)(*((_QWORD *)this + 5) + 464));
  v11 = Setting;
  v12 = 1;
  if (Setting)
  {
    v6 = CFGetTypeID(Setting);
    if (v6 == CFDictionaryGetTypeID())
    {
      theDict = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
      v10 = 257;
      CACFDictionary::SetCFMutableDictionaryFromCopy((CACFDictionary *)&theDict, v11);
      v7 = theDict;
      if (HIBYTE(v10) && theDict)
      {
        CFDictionaryRemoveValue(theDict, a2);
        v7 = theDict;
      }
      HALS_SettingsManager::WriteSetting(*(HALS_SettingsManager **)(*(_QWORD *)(*((_QWORD *)this + 5) + 320) + 1408), *(CFTypeRef *)(*((_QWORD *)this + 5) + 464), v7);
      CACFDictionary::~CACFDictionary((CACFDictionary *)&theDict);
    }
    else
    {
      HALS_SettingsManager::DeleteSetting(*(HALS_SettingsManager **)(*(_QWORD *)(*((_QWORD *)this + 5) + 320) + 1408), *(CFTypeRef *)(*((_QWORD *)this + 5) + 464));
    }
  }
  CACFObject<void const*>::~CACFObject((uint64_t)&v11);
  return 0;
}

void sub_1B57E89BC(void *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  CACFObject<void const*>::~CACFObject((uint64_t)va);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B57E89A4);
}

uint64_t HALS_PlugIn::HostInterface_RequestDeviceConfigurationChange(HALS_PlugIn **this, const AudioServerPlugInHostInterface *a2, uint64_t a3, uint64_t a4, void *a5)
{
  HALS_ObjectMap *v9;
  HALS_Object *v10;
  HALS_PlugIn *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  HALS_Object *v24;
  HALS_PlugIn *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  _DWORD *exception;
  __int128 v33;
  char v34;
  _BYTE block[24];
  void *v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v9 = (HALS_ObjectMap *)HALS_PlugIn::CopyDeviceByUCID(this[5], (int)a2);
  if (v9 || (v9 = (HALS_ObjectMap *)HALS_PlugIn::CopyEndPointByUCID(this[5], (int)a2)) != 0)
  {
    if ((*(unsigned int (**)(HALS_ObjectMap *))(*(_QWORD *)v9 + 40))(v9))
    {
      *(_QWORD *)&v33 = a3;
      *((_QWORD *)&v33 + 1) = a4;
      v34 = 1;
      HALS_PlugInDevice::HandlePlugIn_RequestConfigChange((uint64_t)v9, &v33);
    }
    else
    {
      v11 = this[5];
      v12 = *((_QWORD *)v11 + 50);
      v13 = (std::__shared_weak_count *)*((_QWORD *)v11 + 51);
      *(_QWORD *)block = v12;
      *(_QWORD *)&block[8] = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
      }
      (*(void (**)(uint64_t, const AudioServerPlugInHostInterface *, uint64_t, uint64_t))(*(_QWORD *)v12 + 104))(v12, a2, a3, a4);
      if (v13)
      {
        v16 = (unint64_t *)&v13->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
    HALS_ObjectMap::ReleaseObject(v9, v10);
  }
  else
  {
    v19 = HALS_PlugIn::CopyClockDeviceByUCID(this[5], (int)a2);
    v20 = v19;
    if (!v19)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)block = 136315394;
        *(_QWORD *)&block[4] = "HALS_PlugIn.cpp";
        *(_WORD *)&block[12] = 1024;
        *(_DWORD *)&block[14] = 1069;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugIn::HostInterface_RequestDeviceConfigurationChange: can't find a device/endpoint with that ID", block, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69A1B30;
      exception[2] = 560227702;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19))
    {
      v21 = *(_DWORD *)(v20 + 16);
      v22 = *(_DWORD *)(v20 + 388);
      v23 = *(_DWORD *)(*(_QWORD *)(v20 + 376) + 16);
      *(_QWORD *)block = MEMORY[0x1E0C809B0];
      *(_QWORD *)&block[8] = 0x40000000;
      *(_QWORD *)&block[16] = ___ZN22HALS_PlugInClockDevice32HandlePlugIn_RequestConfigChangeENS_19ConfigChangePayloadEb_block_invoke;
      v36 = &__block_descriptor_tmp_7619;
      v40 = v23;
      v41 = v21;
      v37 = a3;
      v38 = a4;
      v39 = 1;
      v42 = v22;
      LOBYTE(v22) = atomic_load((unsigned __int8 *)(v20 + 448));
      if ((v22 & 1) != 0)
        atomic_store(1u, (unsigned __int8 *)(v20 + 449));
      dispatch_async(*(dispatch_queue_t *)(v20 + 416), block);
    }
    else
    {
      v25 = this[5];
      v26 = *((_QWORD *)v25 + 50);
      v27 = (std::__shared_weak_count *)*((_QWORD *)v25 + 51);
      *(_QWORD *)block = v26;
      *(_QWORD *)&block[8] = v27;
      if (v27)
      {
        v28 = (unint64_t *)&v27->__shared_owners_;
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      (*(void (**)(uint64_t, const AudioServerPlugInHostInterface *, uint64_t, uint64_t))(*(_QWORD *)v26 + 104))(v26, a2, a3, a4);
      if (v27)
      {
        v30 = (unint64_t *)&v27->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
    }
    HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v20, v24);
  }
  return 0;
}

void sub_1B57E8D04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  HALS_ObjectMap *v13;
  HALS_Object *v15;

  if (a2)
  {
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
    HALS_ObjectMap::ReleaseObject(v13, v15);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1B57E8B18);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B57E8DCC()
{
  JUMPOUT(0x1B57E8D6CLL);
}

CFMutableDictionaryRef CACFDictionary::SetCFMutableDictionaryFromCopy(CACFDictionary *this, CFDictionaryRef theDict)
{
  const void *v4;
  CFMutableDictionaryRef result;

  if (*((_BYTE *)this + 8))
  {
    v4 = *(const void **)this;
    if (*(_QWORD *)this)
      CFRelease(v4);
  }
  result = CFDictionaryCreateMutableCopy(0, 0, theDict);
  *(_QWORD *)this = result;
  *((_WORD *)this + 4) = 257;
  return result;
}

void CACFDictionary::~CACFDictionary(CACFDictionary *this)
{
  const void *v2;

  if (*((_BYTE *)this + 8))
  {
    v2 = *(const void **)this;
    if (*(_QWORD *)this)
      CFRelease(v2);
  }
}

uint64_t CACFObject<void const*>::~CACFObject(uint64_t a1)
{
  const void *v2;

  if (*(_BYTE *)(a1 + 8))
  {
    v2 = *(const void **)a1;
    if (*(_QWORD *)a1)
    {
      CFRelease(v2);
      *(_QWORD *)a1 = 0;
    }
  }
  return a1;
}

_QWORD *std::vector<AudioObjectPropertyAddress>::__init_with_size[abi:ne180100]<AudioObjectPropertyAddress const*,AudioObjectPropertyAddress const*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<AudioObjectPropertyAddress>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B57E8EF4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t `anonymous namespace'::ShouldDispatchSynchronously(_anonymous_namespace_ *this, const AudioObjectPropertyAddress *a2)
{
  int v2;
  uint64_t result;
  BOOL v4;
  int v5;

  v2 = *(_DWORD *)this;
  result = 1;
  if (v2 > 1684370978)
  {
    v4 = v2 == 1684370979;
    v5 = 1701733411;
  }
  else
  {
    v4 = v2 == 1651472419;
    v5 = 1668049699;
  }
  if (!v4 && v2 != v5)
    return 0;
  return result;
}

_QWORD *std::vector<AudioObjectPropertyAddress>::__init_with_size[abi:ne180100]<std::__wrap_iter<AudioObjectPropertyAddress*>,std::__wrap_iter<AudioObjectPropertyAddress*>>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<AudioObjectPropertyAddress>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B57E8FC4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN10applesauce8dispatch2v19sync_implIRZN11HALS_PlugIn31HostInterface_PropertiesChangedEPK30AudioServerPlugInHostInterfacejjPK26AudioObjectPropertyAddressE3__0EEvP16dispatch_queue_sOT_NSt3__117integral_constantIbLb1EEE_block_invoke(uint64_t a1)
{
  HALS_PlugIn::HostInterface_PropertiesChanged(AudioServerPlugInHostInterface const*,unsigned int,unsigned int,AudioObjectPropertyAddress const*)::$_0::operator()(*(uint64_t ***)(a1 + 32));
}

uint64_t *applesauce::dispatch::v1::async<HALS_PlugIn::HostInterface_PropertiesChanged(AudioServerPlugInHostInterface const*,unsigned int,unsigned int,AudioObjectPropertyAddress const*)::$_0 &>(dispatch_queue_s *,HALS_PlugIn::HostInterface_PropertiesChanged(AudioServerPlugInHostInterface const*,unsigned int,unsigned int,AudioObjectPropertyAddress const*)::$_0 &)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t **v2;

  v2 = a1;
  HALS_PlugIn::HostInterface_PropertiesChanged(AudioServerPlugInHostInterface const*,unsigned int,unsigned int,AudioObjectPropertyAddress const*)::$_0::operator()(a1);
  return std::unique_ptr<HALS_PlugIn::HostInterface_PropertiesChanged(AudioServerPlugInHostInterface const*,unsigned int,unsigned int,AudioObjectPropertyAddress const*)::$_0,std::default_delete<HALS_PlugIn::HostInterface_PropertiesChanged(AudioServerPlugInHostInterface const*,unsigned int,unsigned int,AudioObjectPropertyAddress const*)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)&v2);
}

void sub_1B57E9018(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<HALS_PlugIn::HostInterface_PropertiesChanged(AudioServerPlugInHostInterface const*,unsigned int,unsigned int,AudioObjectPropertyAddress const*)::$_0,std::default_delete<HALS_PlugIn::HostInterface_PropertiesChanged(AudioServerPlugInHostInterface const*,unsigned int,unsigned int,AudioObjectPropertyAddress const*)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<HALS_PlugIn::HostInterface_PropertiesChanged(AudioServerPlugInHostInterface const*,unsigned int,unsigned int,AudioObjectPropertyAddress const*)::$_0,std::default_delete<HALS_PlugIn::HostInterface_PropertiesChanged(AudioServerPlugInHostInterface const*,unsigned int,unsigned int,AudioObjectPropertyAddress const*)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v2);
    MEMORY[0x1B5E50688](v3, 0x1060C4005D4F44ELL);
  }
  return a1;
}

void HALS_PlugIn::HostInterface_PropertiesChanged(AudioServerPlugInHostInterface const*,unsigned int,unsigned int,AudioObjectPropertyAddress const*)::$_0::operator()(uint64_t **a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  HALS_PlugIn *v5;
  AMCP::Log::Scope_Registry *v6;
  HALS_ObjectMap *v7;
  unsigned int *v8;
  AMCP::Log::Scope_Registry *v9;
  HALS_Object *v10;
  HALB_Info *v11;
  BOOL v13;
  BOOL v14;
  int v15;
  std::__shared_weak_count *v16;
  NSObject *v17;
  unint64_t *v18;
  unint64_t v19;
  _opaque_pthread_t *v20;
  mach_port_t v21;
  std::__shared_weak_count *v22;
  NSObject *v23;
  unint64_t *v24;
  unint64_t v25;
  HALS_Object *v26;
  _opaque_pthread_t *v27;
  mach_port_t v28;
  std::__shared_weak_count *v29;
  NSObject *v30;
  unint64_t *v31;
  unint64_t v32;
  _opaque_pthread_t *v33;
  mach_port_t v34;
  HALS_Object *v36;
  BOOL v37;
  int v38;
  NSObject **v40;
  _BYTE v41[10];
  __int16 v42;
  int v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v2 = **a1;
  v3 = -1431655765 * ((unint64_t)((*a1)[1] - v2) >> 2);
  v4 = *((_DWORD *)a1 + 4);
  v5 = (HALS_PlugIn *)a1[3][5];
  if (v4 != 1)
  {
    v7 = HALS_PlugIn::CopyObjectByUCID(v5, v4);
    v8 = (unsigned int *)v7;
    if (v7)
    {
      v9 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(HALS_ObjectMap *))(*(_QWORD *)v7 + 40))(v7);
      if ((v9 & 1) != 0)
      {
        v10 = (HALS_Object *)v8[5];
        v11 = (HALB_Info *)v8[6];
        if ((_DWORD)v10 == (_DWORD)v11 || (_DWORD)v10 == 1633841016)
        {
          v13 = (_DWORD)v10 == (_DWORD)v11;
          if ((_DWORD)v10 == 1633841016)
            v13 = 0;
          if (!v13)
            goto LABEL_69;
        }
        else if ((_DWORD)v11 == 1633841016)
        {
LABEL_69:
          (*(void (**)(unsigned int *, uint64_t, uint64_t))(*(_QWORD *)v8 + 232))(v8, v3, v2);
          goto LABEL_50;
        }
        if ((int)v10 <= 1701078389)
        {
          v14 = (_DWORD)v10 == 1633773415;
          v15 = 1633969526;
        }
        else
        {
          v14 = (_DWORD)v10 == 1701078390 || (_DWORD)v10 == 1701733488;
          v15 = 1919182198;
        }
        if (!v14 && (_DWORD)v10 != v15)
        {
          if ((_DWORD)v10 == (_DWORD)v11)
          {
            if ((_DWORD)v10 == 1634956402)
              goto LABEL_69;
LABEL_68:
            if (!HALS_Object::IsSubClass((HALS_Object *)v8[5], (HALB_Info *)v8[6], 1633907820))
            {
              if (HALS_Object::IsSubClass(v10, v11, 1633905771))
                (*(void (**)(unsigned int *, uint64_t, uint64_t))(*(_QWORD *)v8 + 456))(v8, v3, v2);
              goto LABEL_50;
            }
            goto LABEL_69;
          }
          if ((int)v11 <= 1701078389)
          {
            v37 = (_DWORD)v11 == 1633773415;
            v38 = 1633969526;
          }
          else
          {
            v37 = (_DWORD)v11 == 1701078390 || (_DWORD)v11 == 1919182198;
            v38 = 1701733488;
          }
          if (!v37 && (_DWORD)v11 != v38)
          {
            if ((_DWORD)v10 == (_DWORD)v11 || (_DWORD)v10 == 1634956402 || (_DWORD)v11 == 1634956402)
              goto LABEL_69;
            goto LABEL_68;
          }
        }
        (*(void (**)(unsigned int *, uint64_t, uint64_t))(*(_QWORD *)v8 + 952))(v8, v3, v2);
LABEL_50:
        HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v8, v36);
        return;
      }
      AMCP::Log::Scope_Registry::get(v9);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v40, "com.apple.coreaudio", "AMCP");
      v29 = *(std::__shared_weak_count **)v41;
      v30 = *v40;
      if (*(_QWORD *)v41)
      {
        v31 = (unint64_t *)(*(_QWORD *)v41 + 8);
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        v33 = pthread_self();
        v34 = pthread_mach_thread_np(v33);
        LODWORD(v40) = 67109634;
        HIDWORD(v40) = v34;
        *(_WORD *)v41 = 2080;
        *(_QWORD *)&v41[2] = "HALS_PlugIn.cpp";
        v42 = 1024;
        v43 = 840;
        _os_log_impl(&dword_1B57BA000, v30, OS_LOG_TYPE_DEFAULT, "%6u %32s:%-5d HALS_PlugIn::HostInterface_PropertiesChanged: the object is not active yet", (uint8_t *)&v40, 0x18u);
      }
    }
    else
    {
      AMCP::Log::Scope_Registry::get(0);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v40, "com.apple.coreaudio", "AMCP");
      v22 = *(std::__shared_weak_count **)v41;
      v23 = *v40;
      if (*(_QWORD *)v41)
      {
        v24 = (unint64_t *)(*(_QWORD *)v41 + 8);
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        v27 = pthread_self();
        v28 = pthread_mach_thread_np(v27);
        LODWORD(v40) = 67109634;
        HIDWORD(v40) = v28;
        *(_WORD *)v41 = 2080;
        *(_QWORD *)&v41[2] = "HALS_PlugIn.cpp";
        v42 = 1024;
        v43 = 834;
        _os_log_error_impl(&dword_1B57BA000, v23, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d HALS_PlugIn::HostInterface_PropertiesChanged: the object is not valid", (uint8_t *)&v40, 0x18u);
      }
    }
    HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v8, v26);
    return;
  }
  v6 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(HALS_PlugIn *))(*(_QWORD *)v5 + 40))(v5);
  if ((v6 & 1) != 0)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3][5] + 304))(a1[3][5], v3, v2);
  }
  else
  {
    AMCP::Log::Scope_Registry::get(v6);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v40, "com.apple.coreaudio", "AMCP");
    v16 = *(std::__shared_weak_count **)v41;
    v17 = *v40;
    if (*(_QWORD *)v41)
    {
      v18 = (unint64_t *)(*(_QWORD *)v41 + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      v20 = pthread_self();
      v21 = pthread_mach_thread_np(v20);
      LODWORD(v40) = 67109634;
      HIDWORD(v40) = v21;
      *(_WORD *)v41 = 2080;
      *(_QWORD *)&v41[2] = "HALS_PlugIn.cpp";
      v42 = 1024;
      v43 = 822;
      _os_log_impl(&dword_1B57BA000, v17, OS_LOG_TYPE_DEFAULT, "%6u %32s:%-5d HALS_PlugIn::HostInterface_PropertiesChanged: the plug-in is not active yet", (uint8_t *)&v40, 0x18u);
    }
  }
}

void sub_1B57E9594(_Unwind_Exception *exception_object, HALS_Object *a2)
{
  HALS_ObjectMap *v2;

  if ((_DWORD)a2)
  {
    HALS_ObjectMap::ReleaseObject(v2, a2);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1B57E9448);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B57E9604()
{
  JUMPOUT(0x1B57E95C0);
}

uint64_t HALS_Object::IsSubClass(HALS_Object *this, HALB_Info *a2, int a3)
{
  int v5;
  uint64_t result;
  char v7;

  v5 = (int)this;
  LODWORD(result) = HALB_Info::IsSubClass(this, a3);
  v7 = result;
  if (v5 == (_DWORD)a2)
    result = result;
  else
    result = 1;
  if (v5 != (_DWORD)a2 && (v7 & 1) == 0)
    return HALB_Info::IsSubClass(a2, a3);
  return result;
}

void std::__shared_ptr_emplace<std::vector<AudioObjectPropertyAddress>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6974468;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<AudioObjectPropertyAddress>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6974468;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

void std::__shared_ptr_emplace<std::vector<AudioObjectPropertyAddress>>::__on_zero_shared(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

uint64_t ___ZN11HALS_PlugIn18InitializeHostInfoEv_block_invoke(uint64_t a1, const HALS_Object *a2, unsigned int a3, uint64_t a4, unsigned int a5, int *a6)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  HALS_Object *v14;
  HALS_Device *v15;
  HALB_Mutex *v16;
  uint64_t v17;
  uint64_t v18;
  HALS_Object *v19;
  HALS_ObjectMap *v20;
  HALS_PlugInDevice *v21;
  int v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  int v31;
  HALS_NotificationManager *v32;
  void *__p;
  char *v35;
  unint64_t v36;
  _QWORD v37[6];
  AudioObjectPropertyAddress v38;

  v10 = *(_QWORD *)(a1 + 32);
  if (HALS_ObjectMap::IsObjectMapped(v10, a2))
  {
    if (a5)
    {
      v11 = a5;
      v12 = MEMORY[0x1E0C809B0];
      do
      {
        v13 = *a6++;
        v15 = (HALS_Device *)HALS_PlugIn::CopyDeviceByUCID((HALS_PlugIn *)v10, v13);
        if (v15)
        {
          HALS_System::DeviceDied(*(HALS_System **)(v10 + 320), v15);
          (*(void (**)(HALS_Device *))(*(_QWORD *)v15 + 8))(v15);
          v37[0] = v12;
          v37[1] = 0x40000000;
          v37[2] = ___ZN11HALS_PlugIn12RemoveDeviceEP17HALS_PlugInDevice_block_invoke;
          v37[3] = &__block_descriptor_tmp_20;
          v37[4] = v10;
          v37[5] = v15;
          v16 = (HALB_Mutex *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v10 + 56))(v10);
          HALB_CommandGate::ExecuteCommand(v16, (uint64_t)v37);
        }
        HALS_ObjectMap::ReleaseObject(v15, v14);
        --v11;
      }
      while (v11);
    }
    __p = 0;
    v35 = 0;
    v36 = 0;
    if (a3)
    {
      v17 = 0;
      v18 = a3;
      do
      {
        v20 = (HALS_ObjectMap *)HALS_PlugIn::CopyDeviceByUCID((HALS_PlugIn *)v10, *(_DWORD *)(a4 + 4 * v17));
        if (!v20)
        {
          v21 = (HALS_PlugInDevice *)operator new();
          HALS_PlugInDevice::HALS_PlugInDevice(v21, (HALB_Info *)0x61646576, (HALS_PlugIn *)v10, *(unsigned int *)(a4 + 4 * v17));
          (**(void (***)(HALS_PlugInDevice *))v21)(v21);
          HALS_PlugIn::AddDevice((HALS_PlugIn *)v10, v21);
          HALS_Device::UpdateInternalIOContext(v21);
          HALS_System::DeviceArrived(*(os_unfair_lock_s ***)(v10 + 320), v21);
          v22 = *((_DWORD *)v21 + 4);
          v23 = v35;
          if ((unint64_t)v35 >= v36)
          {
            v25 = (char *)__p;
            v26 = (v35 - (_BYTE *)__p) >> 2;
            v27 = v26 + 1;
            if ((unint64_t)(v26 + 1) >> 62)
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            v28 = v36 - (_QWORD)__p;
            if ((uint64_t)(v36 - (_QWORD)__p) >> 1 > v27)
              v27 = v28 >> 1;
            if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL)
              v29 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v29 = v27;
            if (v29)
              v29 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v29);
            else
              v19 = 0;
            v30 = (char *)(v29 + 4 * v26);
            *(_DWORD *)v30 = v22;
            v24 = v30 + 4;
            while (v23 != v25)
            {
              v31 = *((_DWORD *)v23 - 1);
              v23 -= 4;
              *((_DWORD *)v30 - 1) = v31;
              v30 -= 4;
            }
            __p = v30;
            v36 = v29 + 4 * (_QWORD)v19;
            if (v25)
              operator delete(v25);
          }
          else
          {
            *(_DWORD *)v35 = v22;
            v24 = v23 + 4;
          }
          v35 = v24;
        }
        HALS_ObjectMap::ReleaseObject(v20, v19);
        ++v17;
      }
      while (v17 != v18);
    }
    v32 = (HALS_NotificationManager *)*(unsigned int *)(v10 + 16);
    *(_QWORD *)&v38.mSelector = 0x676C6F6264657623;
    v38.mElement = 0;
    HALS_Object::PropertiesChanged((HALS_Object *)v10, v32, 0, 1, &v38);
    HALS_System::CheckForDefaultDeviceChanges(*(HALS_PlatformBehaviors **)(v10 + 320), (uint64_t)&__p);
    if (__p)
      operator delete(__p);
  }
  return 0;
}

void sub_1B57E9A08(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B57E99DCLL);
}

void sub_1B57E9A74(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B57E99D8);
}

uint64_t ___ZN11HALS_PlugIn18InitializeHostInfoEv_block_invoke_2(uint64_t a1, const HALS_Object *a2, int a3, uint64_t a4, uint64_t a5)
{
  HALS_PlugIn *v8;
  HALS_ObjectMap *v9;
  HALS_Object *v10;
  HALS_ObjectMap *v11;
  int v12;
  BOOL v13;
  int v14;
  HALB_Info *v17;
  BOOL v18;
  int v19;
  BOOL IsSubClass;

  v8 = *(HALS_PlugIn **)(a1 + 32);
  if (HALS_ObjectMap::IsObjectMapped((unint64_t)v8, a2))
  {
    v9 = HALS_PlugIn::CopyObjectByUCID(v8, a3);
    v11 = v9;
    if (v9)
    {
      v12 = *((_DWORD *)v9 + 5);
      if (v12 <= 1701078389)
      {
        v13 = v12 == 1633773415;
        v14 = 1633969526;
      }
      else
      {
        v13 = v12 == 1701078390 || v12 == 1701733488;
        v14 = 1919182198;
      }
      if (!v13 && v12 != v14)
      {
        v17 = (HALB_Info *)*((unsigned int *)v9 + 6);
        if (v12 == (_DWORD)v17)
        {
          if (v12 == 1634956402)
          {
LABEL_19:
            (*(void (**)(HALS_ObjectMap *, uint64_t, uint64_t))(*(_QWORD *)v9 + 232))(v9, a4, a5);
            goto LABEL_15;
          }
          if (((v12 != (_DWORD)v17) | HALB_Info::IsSubClass((HALB_Info *)*((unsigned int *)v9 + 5), 1633907820)) != 1)
            goto LABEL_15;
LABEL_26:
          (*(void (**)(HALS_ObjectMap *, uint64_t, uint64_t))(*(_QWORD *)v11 + 232))(v11, a4, a5);
          goto LABEL_15;
        }
        if ((int)v17 <= 1701078389)
        {
          v18 = (_DWORD)v17 == 1633773415;
          v19 = 1633969526;
        }
        else
        {
          v18 = (_DWORD)v17 == 1701078390 || (_DWORD)v17 == 1919182198;
          v19 = 1701733488;
        }
        if (!v18 && (_DWORD)v17 != v19)
        {
          if (v12 == (_DWORD)v17 || v12 == 1634956402 || (_DWORD)v17 == 1634956402)
            goto LABEL_19;
          IsSubClass = HALB_Info::IsSubClass((HALB_Info *)*((unsigned int *)v9 + 5), 1633907820);
          if (v12 != (_DWORD)v17 && !IsSubClass && !HALB_Info::IsSubClass(v17, 1633907820))
            goto LABEL_15;
          goto LABEL_26;
        }
      }
      (*(void (**)(HALS_ObjectMap *, uint64_t, uint64_t))(*(_QWORD *)v9 + 952))(v9, a4, a5);
    }
LABEL_15:
    HALS_ObjectMap::ReleaseObject(v11, v10);
  }
  return 0;
}

void sub_1B57E9C7C(void *a1, HALS_Object *a2)
{
  HALS_ObjectMap *v2;

  HALS_ObjectMap::ReleaseObject(v2, a2);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B57E9B44);
}

void sub_1B57E9CD0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B57E9B40);
}

uint64_t ___ZN11HALS_PlugIn18InitializeHostInfoEv_block_invoke_3(uint64_t a1, const HALS_Object *a2, int a3, unsigned int a4, uint64_t a5)
{
  HALS_PlugIn *v8;
  uint64_t v9;
  HALS_ObjectMap *v10;
  HALS_Object *v11;
  _DWORD *exception;
  _BYTE v14[18];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v8 = *(HALS_PlugIn **)(a1 + 32);
  if (HALS_ObjectMap::IsObjectMapped((unint64_t)v8, a2))
  {
    v9 = HALS_PlugIn::CopyDeviceByUCID(v8, a3);
    v10 = (HALS_ObjectMap *)v9;
    if (!v9)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v14 = 136315394;
        *(_QWORD *)&v14[4] = "HALS_PlugIn.cpp";
        *(_WORD *)&v14[12] = 1024;
        *(_DWORD *)&v14[14] = 1220;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugIn::HostInfo_RequestDeviceConfigChange: no device with the given UC ID", v14, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69A1B30;
      exception[2] = 560947818;
    }
    *(_QWORD *)v14 = a4;
    *(_QWORD *)&v14[8] = a5;
    v14[16] = 1;
    HALS_PlugInDevice::HandlePlugIn_RequestConfigChange(v9, (__int128 *)v14);
    HALS_ObjectMap::ReleaseObject(v10, v11);
  }
  return 0;
}

void sub_1B57E9E28(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1B57E9E40(void *a1, HALS_Object *a2)
{
  if ((_DWORD)a2)
  {
    HALS_ObjectMap::ReleaseObject(0, a2);
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B57E9D58);
  }
  JUMPOUT(0x1B57E9E30);
}

void sub_1B57E9E90(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B57E9D54);
  }
  JUMPOUT(0x1B57E9E30);
}

uint64_t CACFString::operator=(uint64_t a1, CFTypeRef cf)
{
  CFTypeRef v4;
  BOOL v5;

  v4 = *(CFTypeRef *)a1;
  if (v4 != cf)
  {
    if (v4)
      v5 = *(_BYTE *)(a1 + 8) == 0;
    else
      v5 = 1;
    if (!v5)
      CFRelease(v4);
    *(_QWORD *)a1 = cf;
  }
  *(_BYTE *)(a1 + 8) = 1;
  if (cf)
    CFRetain(cf);
  return a1;
}

void ___ZN11HALS_PlugIn25RemoveAllDevicesAndNotifyEv_block_invoke(uint64_t a1)
{
  HALS_System **v1;
  HALB_Mutex *v2;
  uint64_t v3;
  HALS_Device **v4;
  HALS_Device **i;
  HALS_Device *v6;
  HALB_Mutex *v7;
  HALB_Mutex *v8;
  HALS_ObjectMap **v9;
  HALS_ObjectMap **j;
  HALS_ObjectMap *v11;
  HALS_System *v12;
  const BOOL *v13;
  unsigned int v14;
  const __CFString *v15;
  HALB_Mutex *v16;
  HALB_Mutex *v17;
  HALS_ObjectMap **v18;
  HALS_ObjectMap **k;
  HALS_ObjectMap *v20;
  HALB_Mutex *v21;
  HALB_Mutex *v22;
  _QWORD *v23;
  _QWORD *m;
  uint64_t v25;
  HALB_Mutex *v26;
  HALS_Object *v27;
  HALS_Object *v28;
  HALS_Object *v29;
  HALS_NotificationManager *v30;
  _QWORD v31[6];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __n128 (*v35)(_QWORD *, uint64_t);
  void (*v36)(uint64_t, HALS_Object *);
  HALS_ObjectMap ***v37;
  uint64_t v38;
  uint64_t v39;
  HALS_ObjectMap **v40;
  HALS_ObjectMap **v41;
  uint64_t v42;
  HALS_ObjectMap **v43;
  HALS_ObjectMap **v44;
  uint64_t v45;
  _QWORD v46[6];
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  __n128 (*v50)(_QWORD *, uint64_t);
  void (*v51)(uint64_t);
  void *__p;
  void *v53;
  uint64_t v54;
  _QWORD v55[6];
  _QWORD v56[6];
  _QWORD v57[6];
  _QWORD v58[7];

  v1 = *(HALS_System ***)(a1 + 32);
  v47 = 0;
  v48 = &v47;
  v49 = 0x4002000000;
  v50 = __Block_byref_object_copy_;
  v51 = __Block_byref_object_dispose_;
  v53 = 0;
  v54 = 0;
  __p = 0;
  v2 = (HALB_Mutex *)(*((uint64_t (**)(HALS_System **))*v1 + 6))(v1);
  v3 = MEMORY[0x1E0C809B0];
  v46[0] = MEMORY[0x1E0C809B0];
  v46[1] = 0x40000000;
  v46[2] = ___ZN11HALS_PlugIn17_RemoveAllDevicesEv_block_invoke;
  v46[3] = &unk_1E696BF38;
  v46[4] = &v47;
  v46[5] = v1;
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v46);
  v4 = (HALS_Device **)v48[5];
  for (i = (HALS_Device **)v48[6]; v4 != i; ++v4)
  {
    v6 = *v4;
    if (*v4)
    {
      HALS_System::DeviceDied(v1[40], *v4);
      (*(void (**)(HALS_Device *))(*(_QWORD *)v6 + 456))(v6);
      (*(void (**)(HALS_Device *))(*(_QWORD *)v6 + 8))(v6);
      v55[0] = v3;
      v55[1] = 0x40000000;
      v55[2] = ___ZN11HALS_PlugIn12RemoveDeviceEP17HALS_PlugInDevice_block_invoke;
      v55[3] = &__block_descriptor_tmp_20;
      v55[4] = v1;
      v55[5] = v6;
      v7 = (HALB_Mutex *)(*((uint64_t (**)(HALS_System **))*v1 + 7))(v1);
      HALB_CommandGate::ExecuteCommand(v7, (uint64_t)v55);
    }
  }
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v32 = v3;
  v33 = 0x40000000;
  v34 = (uint64_t)___ZNK18HALS_DeviceManager19CopyClockDeviceListERNS_20BasicClockDeviceListEP11HALS_Client_block_invoke;
  v35 = (__n128 (*)(_QWORD *, uint64_t))&__block_descriptor_tmp_7_8182;
  v36 = (void (*)(uint64_t, HALS_Object *))v1;
  v37 = &v43;
  v8 = (HALB_Mutex *)(*((uint64_t (**)(HALS_System **))*v1 + 7))(v1);
  HALB_CommandGate::ExecuteCommand(v8, (uint64_t)&v32);
  v9 = v43;
  for (j = v44; v9 != j; ++v9)
  {
    v11 = *v9;
    v12 = v1[40];
    v13 = (const BOOL *)*((unsigned int *)*v9 + 4);
    v14 = *((_DWORD *)*v9 + 7);
    v15 = (const __CFString *)(*(uint64_t (**)(HALS_ObjectMap *))(*(_QWORD *)*v9 + 200))(*v9);
    HALS_System::ClockDeviceDied(v12, v13, v14, v15);
    (*(void (**)(HALS_ObjectMap *))(*(_QWORD *)v11 + 8))(v11);
    v56[0] = v3;
    v56[1] = 0x40000000;
    v56[2] = ___ZN11HALS_PlugIn17RemoveClockDeviceEP22HALS_PlugInClockDevice_block_invoke;
    v56[3] = &__block_descriptor_tmp_37;
    v56[4] = v1;
    v56[5] = v11;
    v16 = (HALB_Mutex *)(*((uint64_t (**)(HALS_System **))*v1 + 7))(v1);
    HALB_CommandGate::ExecuteCommand(v16, (uint64_t)v56);
  }
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v32 = v3;
  v33 = 0x40000000;
  v34 = (uint64_t)___ZNK18HALS_DeviceManager11CopyBoxListERNS_12BasicBoxListEP11HALS_Client_block_invoke;
  v35 = (__n128 (*)(_QWORD *, uint64_t))&__block_descriptor_tmp_8181;
  v36 = (void (*)(uint64_t, HALS_Object *))v1;
  v37 = &v40;
  v38 = 0;
  v17 = (HALB_Mutex *)(*((uint64_t (**)(HALS_System **))*v1 + 7))(v1);
  HALB_CommandGate::ExecuteCommand(v17, (uint64_t)&v32);
  v18 = v40;
  for (k = v41; v18 != k; ++v18)
  {
    v20 = *v18;
    (*(void (**)(HALS_ObjectMap *))(*(_QWORD *)*v18 + 8))(*v18);
    v57[0] = v3;
    v57[1] = 0x40000000;
    v57[2] = ___ZN11HALS_PlugIn9RemoveBoxEP14HALS_PlugInBox_block_invoke;
    v57[3] = &__block_descriptor_tmp_36;
    v57[4] = v1;
    v57[5] = v20;
    v21 = (HALB_Mutex *)(*((uint64_t (**)(HALS_System **))*v1 + 7))(v1);
    HALB_CommandGate::ExecuteCommand(v21, (uint64_t)v57);
  }
  v32 = 0;
  v33 = (uint64_t)&v32;
  v34 = 0x4002000000;
  v35 = __Block_byref_object_copy__23;
  v36 = __Block_byref_object_dispose__24;
  v38 = 0;
  v39 = 0;
  v37 = 0;
  v31[0] = v3;
  v31[1] = 0x40000000;
  v31[2] = ___ZN11HALS_PlugIn17_RemoveAllDevicesEv_block_invoke_25;
  v31[3] = &unk_1E696BF60;
  v31[4] = &v32;
  v31[5] = v1;
  v22 = (HALB_Mutex *)(*((uint64_t (**)(HALS_System **))*v1 + 7))(v1);
  HALB_CommandGate::ExecuteCommand(v22, (uint64_t)v31);
  v23 = *(_QWORD **)(v33 + 40);
  for (m = *(_QWORD **)(v33 + 48); v23 != m; ++v23)
  {
    v25 = *v23;
    (*(void (**)(_QWORD))(*(_QWORD *)*v23 + 8))(*v23);
    v58[0] = v3;
    v58[1] = 0x40000000;
    v58[2] = ___ZN11HALS_PlugIn14RemoveEndPointEP17HALS_PlugInDevice_block_invoke;
    v58[3] = &__block_descriptor_tmp_34;
    v58[4] = v1;
    v58[5] = v25;
    v26 = (HALB_Mutex *)(*((uint64_t (**)(HALS_System **))*v1 + 7))(v1);
    HALB_CommandGate::ExecuteCommand(v26, (uint64_t)v58);
  }
  _Block_object_dispose(&v32, 8);
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList((HALS_ObjectMap ***)&v37, v27);
  HALS_DeviceManager::BasicBoxList::~BasicBoxList(&v40, v28);
  HALS_DeviceManager::BasicClockDeviceList::~BasicClockDeviceList(&v43, v29);
  _Block_object_dispose(&v47, 8);
  if (__p)
  {
    v53 = __p;
    operator delete(__p);
  }
  v30 = (HALS_NotificationManager *)*((unsigned int *)v1 + 4);
  v47 = 0x676C6F6264657623;
  LODWORD(v48) = 0;
  HALS_Object::PropertiesChanged((HALS_Object *)v1, v30, 0, 1, (const AudioObjectPropertyAddress *)&v47);
  HALS_System::CheckForDefaultDeviceChanges(v1[40]);
}

void sub_1B57EA350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,HALS_ObjectMap **a24,uint64_t a25,uint64_t a26,HALS_ObjectMap **a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42)
{
  HALS_ObjectMap ***v42;
  HALS_Object *v44;
  HALS_Object *v45;
  HALS_Object *v46;

  _Block_object_dispose(&a16, 8);
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(v42, v44);
  HALS_DeviceManager::BasicBoxList::~BasicBoxList(&a24, v45);
  HALS_DeviceManager::BasicClockDeviceList::~BasicClockDeviceList(&a27, v46);
  _Block_object_dispose(&a36, 8);
  if (__p)
  {
    a42 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy_(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void ___ZN11HALS_PlugIn17_RemoveAllDevicesEv_block_invoke_25(uint64_t a1)
{
  HALS_PlugIn::_CopyEndPointList(*(_QWORD *)(a1 + 40), (void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));
}

void sub_1B57EA554(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZN11HALS_PlugIn9RemoveBoxEP14HALS_PlugInBox_block_invoke(uint64_t a1, HALS_Object *a2)
{
  uint64_t v2;
  HALS_ObjectMap **v3;
  HALS_ObjectMap **v4;
  HALS_ObjectMap **v5;
  int64_t v6;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(HALS_ObjectMap ***)(v2 + 568);
  v4 = *(HALS_ObjectMap ***)(v2 + 576);
  if (v3 != v4)
  {
    while (*v3 != *(HALS_ObjectMap **)(a1 + 40))
    {
      if (++v3 == v4)
      {
        v3 = *(HALS_ObjectMap ***)(v2 + 576);
        break;
      }
    }
  }
  if (v3 != v4)
  {
    HALS_ObjectMap::ReleaseObject(*v3, a2);
    v5 = *(HALS_ObjectMap ***)(v2 + 576);
    v6 = (char *)v5 - (char *)(v3 + 1);
    if (v5 != v3 + 1)
      memmove(v3, v3 + 1, (char *)v5 - (char *)(v3 + 1));
    *(_QWORD *)(v2 + 576) = (char *)v3 + v6;
  }
}

void asbd_to_dictionary(const CA::StreamDescription *a1, uint64_t *a2)
{
  uint64_t v4;
  const void *v5;
  const void *v6;
  std::runtime_error *exception;
  std::runtime_error *v8;
  std::runtime_error *v9;
  std::runtime_error *v10;
  std::runtime_error *v11;
  std::runtime_error *v12;
  _QWORD v13[2];
  uint64_t valuePtr;
  _BYTE v15[8];
  uint64_t v17;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v26;
  _BYTE v28[16];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)v15, "SampleRate");
  valuePtr = *a2;
  if (!CFNumberCreate(0, kCFNumberDoubleType, &valuePtr))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)&v17, "FormatID");
  LODWORD(valuePtr) = *((_DWORD *)a2 + 2);
  if (!CFNumberCreate(0, kCFNumberIntType, &valuePtr))
  {
    v8 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v8, "Could not construct");
    __cxa_throw(v8, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)&v19, "FormatFlags");
  LODWORD(valuePtr) = *((_DWORD *)a2 + 3);
  if (!CFNumberCreate(0, kCFNumberIntType, &valuePtr))
  {
    v9 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v9, "Could not construct");
    __cxa_throw(v9, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[15],unsigned int const&>((applesauce::CF::TypeRef *)&v21, "BytesPerPacket", (int *)a2 + 4);
  applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)&v22, "FramesPerPacket");
  LODWORD(valuePtr) = *((_DWORD *)a2 + 5);
  if (!CFNumberCreate(0, kCFNumberIntType, &valuePtr))
  {
    v10 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v10, "Could not construct");
    __cxa_throw(v10, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)&v24, "BytesPerFrame");
  LODWORD(valuePtr) = *((_DWORD *)a2 + 6);
  if (!CFNumberCreate(0, kCFNumberIntType, &valuePtr))
  {
    v11 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v11, "Could not construct");
    __cxa_throw(v11, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)&v26, "ChannelsPerFrame");
  LODWORD(valuePtr) = *((_DWORD *)a2 + 7);
  if (!CFNumberCreate(0, kCFNumberIntType, &valuePtr))
  {
    v12 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v12, "Could not construct");
    __cxa_throw(v12, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[15],unsigned int const&>((applesauce::CF::TypeRef *)v28, "BitsPerChannel", (int *)a2 + 8);
  v13[0] = v15;
  v13[1] = 8;
  v4 = 0;
  *(_QWORD *)a1 = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v13);
  do
  {
    v5 = *(const void **)&v28[v4 + 8];
    if (v5)
      CFRelease(v5);
    v6 = *(const void **)&v28[v4];
    if (v6)
      CFRelease(v6);
    v4 -= 16;
  }
  while (v4 != -128);
}

void sub_1B57EA940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, CFTypeRef a13, uint64_t a14, CFTypeRef a15, uint64_t a16, CFTypeRef a17, uint64_t a18, uint64_t a19, uint64_t a20,CFTypeRef a21,uint64_t a22,CFTypeRef a23,uint64_t a24,CFTypeRef cf)
{
  const void **v25;

  if (cf)
    CFRelease(cf);
  applesauce::CF::TypeRef::~TypeRef(v25);
  do
  {
    v25 -= 2;
    applesauce::CF::TypeRefPair::~TypeRefPair((applesauce::CF::TypeRefPair *)v25);
  }
  while (v25 != (const void **)&a12);
  _Unwind_Resume(a1);
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[15],unsigned int const&>(applesauce::CF::TypeRef *a1, char *a2, int *a3)
{
  CFNumberRef v5;
  std::runtime_error *exception;
  int valuePtr;

  applesauce::CF::TypeRef::TypeRef(a1, a2);
  valuePtr = *a3;
  v5 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  *((_QWORD *)a1 + 1) = v5;
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return a1;
}

void sub_1B57EAB54(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 8);
  if (v3)
    CFRelease(v3);
  applesauce::CF::TypeRef::~TypeRef((const void **)v1);
  _Unwind_Resume(a1);
}

CFDictionaryRef applesauce::CF::details::make_CFDictionaryRef(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  void *v6;
  void **v7;
  void **v8;
  void **v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void **v15;
  void *v16;
  void *v17;
  void **v18;
  void **v19;
  void **v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void **v26;
  void *v27;
  void **v28;
  void **v29;
  CFDictionaryRef v30;
  std::runtime_error *exception;
  void **values;
  void **v34;
  unint64_t v35;
  void **keys;
  void **v37;
  unint64_t v38;

  v2 = *(_QWORD *)(a1 + 8);
  keys = 0;
  v37 = 0;
  v38 = 0;
  std::vector<void const*>::reserve((void **)&keys, v2);
  values = 0;
  v34 = 0;
  v35 = 0;
  std::vector<void const*>::reserve((void **)&values, v2);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    v4 = *(void ***)a1;
    v5 = *(_QWORD *)a1 + 16 * v3;
    do
    {
      v6 = *v4;
      v7 = v37;
      if ((unint64_t)v37 >= v38)
      {
        v9 = keys;
        v10 = v37 - keys;
        v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 61)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v12 = v38 - (_QWORD)keys;
        if ((uint64_t)(v38 - (_QWORD)keys) >> 2 > v11)
          v11 = v12 >> 2;
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
          v13 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v13 = v11;
        if (v13)
          v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v13);
        else
          v14 = 0;
        v15 = (void **)(v13 + 8 * v10);
        *v15 = v6;
        v8 = v15 + 1;
        if (v7 != v9)
        {
          do
          {
            v16 = *--v7;
            *--v15 = v16;
          }
          while (v7 != v9);
          v7 = keys;
        }
        keys = v15;
        v38 = v13 + 8 * v14;
        if (v7)
          operator delete(v7);
      }
      else
      {
        *v37 = v6;
        v8 = v7 + 1;
      }
      v37 = v8;
      v17 = v4[1];
      v18 = v34;
      if ((unint64_t)v34 >= v35)
      {
        v20 = values;
        v21 = v34 - values;
        v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 61)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v23 = v35 - (_QWORD)values;
        if ((uint64_t)(v35 - (_QWORD)values) >> 2 > v22)
          v22 = v23 >> 2;
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
          v24 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v24 = v22;
        if (v24)
          v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v24);
        else
          v25 = 0;
        v26 = (void **)(v24 + 8 * v21);
        *v26 = v17;
        v19 = v26 + 1;
        if (v18 != v20)
        {
          do
          {
            v27 = *--v18;
            *--v26 = v27;
          }
          while (v18 != v20);
          v18 = values;
        }
        values = v26;
        v35 = v24 + 8 * v25;
        if (v18)
          operator delete(v18);
      }
      else
      {
        *v34 = v17;
        v19 = v18 + 1;
      }
      v34 = v19;
      v4 += 2;
    }
    while (v4 != (void **)v5);
  }
  v28 = keys;
  v29 = values;
  v30 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, v2, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
  if (!v30)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (v29)
    operator delete(v29);
  if (v28)
    operator delete(v28);
  return v30;
}

void sub_1B57EADF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;

  __cxa_free_exception(v12);
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(a1);
}

void applesauce::CF::TypeRefPair::~TypeRefPair(applesauce::CF::TypeRefPair *this)
{
  const void *v2;

  v2 = (const void *)*((_QWORD *)this + 1);
  if (v2)
    CFRelease(v2);
  if (*(_QWORD *)this)
    CFRelease(*(CFTypeRef *)this);
}

void std::vector<void const*>::reserve(void **a1, unint64_t a2)
{
  int64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;

  if (a2 > ((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v3 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a2);
    v5 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    v7 = &v4[8 * v6];
    v9 = (char *)*a1;
    v8 = (char *)a1[1];
    v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        v11 = *((_QWORD *)v8 - 1);
        v8 -= 8;
        *((_QWORD *)v10 - 1) = v11;
        v10 -= 8;
      }
      while (v8 != v9);
      v8 = (char *)*a1;
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
      operator delete(v8);
  }
}

applesauce::CF::TypeRef *applesauce::CF::TypeRef::TypeRef(applesauce::CF::TypeRef *this, char *a2)
{
  void **v3;
  CFIndex v4;
  CFStringRef v5;
  std::runtime_error *exception;
  void *__p[2];
  unsigned __int8 v9;

  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  if ((v9 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v9 & 0x80u) == 0)
    v4 = v9;
  else
    v4 = (CFIndex)__p[1];
  v5 = CFStringCreateWithBytes(0, (const UInt8 *)v3, v4, 0x8000100u, 0);
  *(_QWORD *)this = v5;
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if ((char)v9 < 0)
    operator delete(__p[0]);
  return this;
}

void sub_1B57EAFD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  CFTypeRef *v15;

  if (*v15)
    CFRelease(*v15);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void applesauce::CF::TypeRef::~TypeRef(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

unint64_t dictionary_to_asbd(const applesauce::CF::DictionaryRef *a1, const __CFDictionary **a2)
{
  const __CFDictionary *v2;
  const __CFNumber *Value;
  unint64_t v6;
  char v7;
  std::runtime_error *exception;
  double v9;
  const __CFNumber *v10;
  unint64_t v11;
  int v12;
  const __CFNumber *v13;
  unint64_t v14;
  int v15;
  const __CFDictionary *v16;
  const __CFDictionary *v17;
  const __CFNumber *v18;
  unint64_t v19;
  int v20;
  const __CFDictionary *v21;
  const __CFNumber *v22;
  unint64_t v23;
  int v24;
  const __CFDictionary *v25;
  const __CFNumber *v26;
  unint64_t v27;
  int v28;
  const __CFDictionary *v29;
  unint64_t result;
  void *key;

  *((_QWORD *)a1 + 4) = 0;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  v2 = *a2;
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    goto LABEL_55;
  }
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&key, "SampleRate");
  Value = (const __CFNumber *)CFDictionaryGetValue(v2, key);
  if (key)
    CFRelease(key);
  if (Value)
  {
    v6 = applesauce::CF::convert_as<double,0>(Value);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v9 = *(double *)&v6;
  if (!v7)
    v9 = 0.0;
  *(double *)a1 = v9;
  if (!*a2)
    goto LABEL_54;
  v10 = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[9]>(*a2, "FormatID");
  if (v10)
  {
    v11 = applesauce::CF::convert_as<unsigned int,0>(v10);
    v12 = 0;
    if (v11 > 0x100000000)
      v12 = v11;
  }
  else
  {
    v12 = 0;
  }
  *((_DWORD *)a1 + 2) = v12;
  if (!*a2)
    goto LABEL_54;
  v13 = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[12]>(*a2, "FormatFlags");
  if (v13)
  {
    v14 = applesauce::CF::convert_as<unsigned int,0>(v13);
    v15 = 0;
    if (v14 > 0x100000000)
      v15 = v14;
  }
  else
  {
    v15 = 0;
  }
  *((_DWORD *)a1 + 3) = v15;
  v16 = *a2;
  if (!*a2)
    goto LABEL_54;
  LODWORD(key) = 0;
  *((_DWORD *)a1 + 4) = applesauce::CF::at_or<unsigned int,char const(&)[15]>(v16, "BytesPerPacket", (unsigned int *)&key);
  v17 = *a2;
  if (!*a2)
    goto LABEL_54;
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&key, "FramesPerPacket");
  v18 = (const __CFNumber *)CFDictionaryGetValue(v17, key);
  if (key)
    CFRelease(key);
  if (v18)
  {
    v19 = applesauce::CF::convert_as<unsigned int,0>(v18);
    v20 = 0;
    if (v19 > 0x100000000)
      v20 = v19;
  }
  else
  {
    v20 = 0;
  }
  *((_DWORD *)a1 + 5) = v20;
  v21 = *a2;
  if (!*a2)
    goto LABEL_54;
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&key, "BytesPerFrame");
  v22 = (const __CFNumber *)CFDictionaryGetValue(v21, key);
  if (key)
    CFRelease(key);
  if (v22)
  {
    v23 = applesauce::CF::convert_as<unsigned int,0>(v22);
    v24 = 0;
    if (v23 > 0x100000000)
      v24 = v23;
  }
  else
  {
    v24 = 0;
  }
  *((_DWORD *)a1 + 6) = v24;
  v25 = *a2;
  if (!*a2)
    goto LABEL_54;
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&key, "ChannelsPerFrame");
  v26 = (const __CFNumber *)CFDictionaryGetValue(v25, key);
  if (key)
    CFRelease(key);
  if (v26)
  {
    v27 = applesauce::CF::convert_as<unsigned int,0>(v26);
    v28 = 0;
    if (v27 > 0x100000000)
      v28 = v27;
  }
  else
  {
    v28 = 0;
  }
  *((_DWORD *)a1 + 7) = v28;
  v29 = *a2;
  if (!*a2)
  {
LABEL_54:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
LABEL_55:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  LODWORD(key) = 0;
  result = applesauce::CF::at_or<unsigned int,char const(&)[15]>(v29, "BitsPerChannel", (unsigned int *)&key);
  *((_DWORD *)a1 + 8) = result;
  return result;
}

std::runtime_error *applesauce::CF::construct_error(std::runtime_error *this)
{
  return std::runtime_error::runtime_error(this, "Could not construct");
}

unint64_t applesauce::CF::at_or<unsigned int,char const(&)[15]>(const __CFDictionary *a1, char *a2, unsigned int *a3)
{
  const __CFNumber *Value;
  unint64_t result;
  void *key;

  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&key, a2);
  Value = (const __CFNumber *)CFDictionaryGetValue(a1, key);
  if (key)
    CFRelease(key);
  if (!Value)
    return *a3;
  result = applesauce::CF::convert_as<unsigned int,0>(Value);
  if (HIDWORD(result))
    return result;
  else
    return *a3;
}

uint64_t applesauce::CF::convert_as<unsigned int,0>(const __CFNumber *a1)
{
  CFTypeID TypeID;
  int Value;
  CFTypeID v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned __int8 v12;
  int v13;
  uint64_t v14;
  double valuePtr;

  TypeID = CFNumberGetTypeID();
  if (TypeID == CFGetTypeID(a1))
  {
    switch(CFNumberGetType(a1))
    {
      case kCFNumberSInt8Type:
        LOBYTE(valuePtr) = 0;
        Value = CFNumberGetValue(a1, kCFNumberSInt8Type, &valuePtr);
        goto LABEL_14;
      case kCFNumberSInt16Type:
        LOWORD(valuePtr) = 0;
        v9 = CFNumberGetValue(a1, kCFNumberSInt16Type, &valuePtr);
        goto LABEL_21;
      case kCFNumberSInt32Type:
        LODWORD(valuePtr) = 0;
        v10 = CFNumberGetValue(a1, kCFNumberSInt32Type, &valuePtr);
        goto LABEL_32;
      case kCFNumberSInt64Type:
        valuePtr = 0.0;
        v10 = CFNumberGetValue(a1, kCFNumberSInt64Type, &valuePtr);
        goto LABEL_32;
      case kCFNumberFloat32Type:
        LODWORD(valuePtr) = 0;
        v10 = CFNumberGetValue(a1, kCFNumberFloat32Type, &valuePtr);
        goto LABEL_28;
      case kCFNumberFloat64Type:
        valuePtr = 0.0;
        v10 = CFNumberGetValue(a1, kCFNumberFloat64Type, &valuePtr);
        goto LABEL_34;
      case kCFNumberCharType:
        LOBYTE(valuePtr) = 0;
        Value = CFNumberGetValue(a1, kCFNumberCharType, &valuePtr);
LABEL_14:
        v11 = Value != 0;
        if (Value)
          v12 = LOBYTE(valuePtr);
        else
          v12 = 0;
        v13 = -256;
        if ((v11 & (SLOBYTE(valuePtr) < 0)) == 0)
          v13 = 0;
        v8 = v11 << 32;
        LODWORD(v5) = v13 & 0xFFFFFF00 | v12;
        v7 = v5 & 0xFFFFFF00;
        break;
      case kCFNumberShortType:
        LOWORD(valuePtr) = 0;
        v9 = CFNumberGetValue(a1, kCFNumberShortType, &valuePtr);
LABEL_21:
        if (v9)
          v5 = SLOWORD(valuePtr) & 0xFFFFFFFFLL | 0x100000000;
        else
          v5 = 0;
        goto LABEL_37;
      case kCFNumberIntType:
        LODWORD(valuePtr) = 0;
        v10 = CFNumberGetValue(a1, kCFNumberIntType, &valuePtr);
        goto LABEL_32;
      case kCFNumberLongType:
        valuePtr = 0.0;
        v10 = CFNumberGetValue(a1, kCFNumberLongType, &valuePtr);
        goto LABEL_32;
      case kCFNumberLongLongType:
        valuePtr = 0.0;
        v10 = CFNumberGetValue(a1, kCFNumberLongLongType, &valuePtr);
        goto LABEL_32;
      case kCFNumberFloatType:
        LODWORD(valuePtr) = 0;
        v10 = CFNumberGetValue(a1, kCFNumberFloatType, &valuePtr);
LABEL_28:
        v14 = *(float *)&valuePtr;
        goto LABEL_35;
      case kCFNumberDoubleType:
        valuePtr = 0.0;
        v10 = CFNumberGetValue(a1, kCFNumberDoubleType, &valuePtr);
        goto LABEL_34;
      case kCFNumberCFIndexType:
        valuePtr = 0.0;
        v10 = CFNumberGetValue(a1, kCFNumberCFIndexType, &valuePtr);
        goto LABEL_32;
      case kCFNumberNSIntegerType:
        valuePtr = 0.0;
        v10 = CFNumberGetValue(a1, kCFNumberNSIntegerType, &valuePtr);
LABEL_32:
        v14 = LODWORD(valuePtr);
        goto LABEL_35;
      case kCFNumberCGFloatType:
        valuePtr = 0.0;
        v10 = CFNumberGetValue(a1, kCFNumberCGFloatType, &valuePtr);
LABEL_34:
        v14 = valuePtr;
LABEL_35:
        v5 = v14 | 0x100000000;
        if (!v10)
          v5 = 0;
LABEL_37:
        v7 = v5 & 0xFFFFFF00;
        v8 = v5 & 0x100000000;
        break;
      default:
        v7 = 0;
        v8 = 0;
        LOBYTE(v5) = 0;
        break;
    }
    v6 = v8 | v7 & 0xFFFFFF00;
    v5 = v5;
  }
  else
  {
    v4 = CFBooleanGetTypeID();
    if (v4 == CFGetTypeID(a1))
    {
      v5 = CFBooleanGetValue(a1);
      v6 = 0x100000000;
    }
    else
    {
      v5 = 0;
      v6 = 0;
    }
  }
  return v6 | v5;
}

applesauce::CF::StringRef *applesauce::CF::StringRef::StringRef(applesauce::CF::StringRef *this, char *a2)
{
  void **v3;
  CFIndex v4;
  CFStringRef v5;
  std::runtime_error *exception;
  void *__p[2];
  unsigned __int8 v9;

  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  if ((v9 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v9 & 0x80u) == 0)
    v4 = v9;
  else
    v4 = (CFIndex)__p[1];
  v5 = CFStringCreateWithBytes(0, (const UInt8 *)v3, v4, 0x8000100u, 0);
  *(_QWORD *)this = v5;
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if ((char)v9 < 0)
    operator delete(__p[0]);
  return this;
}

void sub_1B57EB848(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  CFTypeRef *v15;

  if (*v15)
    CFRelease(*v15);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

const void *applesauce::CF::details::at_key<char const(&)[12]>(const __CFDictionary *a1, char *a2)
{
  const void *Value;
  void *key;

  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&key, a2);
  Value = CFDictionaryGetValue(a1, key);
  if (key)
    CFRelease(key);
  return Value;
}

void sub_1B57EB8DC(void *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B57EB8C4);
}

const void *applesauce::CF::details::at_key<char const(&)[9]>(const __CFDictionary *a1, char *a2)
{
  const void *Value;
  void *key;

  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&key, a2);
  Value = CFDictionaryGetValue(a1, key);
  if (key)
    CFRelease(key);
  return Value;
}

void sub_1B57EB958(void *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B57EB940);
}

unint64_t applesauce::CF::convert_as<double,0>(const __CFNumber *a1)
{
  CFTypeID TypeID;
  int Value;
  CFTypeID v4;
  unint64_t result;
  unint64_t v6;
  double v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  double v15;
  uint64_t valuePtr;

  TypeID = CFNumberGetTypeID();
  if (TypeID == CFGetTypeID(a1))
  {
    switch(CFNumberGetType(a1))
    {
      case kCFNumberSInt8Type:
        LOBYTE(valuePtr) = 0;
        Value = CFNumberGetValue(a1, kCFNumberSInt8Type, &valuePtr);
        goto LABEL_14;
      case kCFNumberSInt16Type:
        LOWORD(valuePtr) = 0;
        v8 = CFNumberGetValue(a1, kCFNumberSInt16Type, &valuePtr);
        goto LABEL_16;
      case kCFNumberSInt32Type:
        LODWORD(valuePtr) = 0;
        v9 = CFNumberGetValue(a1, kCFNumberSInt32Type, &valuePtr);
        goto LABEL_18;
      case kCFNumberSInt64Type:
        valuePtr = 0;
        v10 = CFNumberGetValue(a1, kCFNumberSInt64Type, &valuePtr);
        goto LABEL_27;
      case kCFNumberFloat32Type:
        LODWORD(valuePtr) = 0;
        v11 = CFNumberGetValue(a1, kCFNumberFloat32Type, &valuePtr);
        goto LABEL_23;
      case kCFNumberFloat64Type:
        valuePtr = 0;
        v12 = CFNumberGetValue(a1, kCFNumberFloat64Type, &valuePtr);
        goto LABEL_36;
      case kCFNumberCharType:
        LOBYTE(valuePtr) = 0;
        Value = CFNumberGetValue(a1, kCFNumberCharType, &valuePtr);
LABEL_14:
        v13 = Value == 0;
        v14 = (char)valuePtr;
        goto LABEL_19;
      case kCFNumberShortType:
        LOWORD(valuePtr) = 0;
        v8 = CFNumberGetValue(a1, kCFNumberShortType, &valuePtr);
LABEL_16:
        v13 = v8 == 0;
        v14 = (__int16)valuePtr;
        goto LABEL_19;
      case kCFNumberIntType:
        LODWORD(valuePtr) = 0;
        v9 = CFNumberGetValue(a1, kCFNumberIntType, &valuePtr);
LABEL_18:
        v13 = v9 == 0;
        v14 = valuePtr;
LABEL_19:
        v15 = (double)v14;
        goto LABEL_28;
      case kCFNumberLongType:
        valuePtr = 0;
        v10 = CFNumberGetValue(a1, kCFNumberLongType, &valuePtr);
        goto LABEL_27;
      case kCFNumberLongLongType:
        valuePtr = 0;
        v10 = CFNumberGetValue(a1, kCFNumberLongLongType, &valuePtr);
        goto LABEL_27;
      case kCFNumberFloatType:
        LODWORD(valuePtr) = 0;
        v11 = CFNumberGetValue(a1, kCFNumberFloatType, &valuePtr);
LABEL_23:
        v13 = v11 == 0;
        v15 = *(float *)&valuePtr;
        goto LABEL_28;
      case kCFNumberDoubleType:
        valuePtr = 0;
        v12 = CFNumberGetValue(a1, kCFNumberDoubleType, &valuePtr);
        goto LABEL_36;
      case kCFNumberCFIndexType:
        valuePtr = 0;
        v10 = CFNumberGetValue(a1, kCFNumberCFIndexType, &valuePtr);
        goto LABEL_27;
      case kCFNumberNSIntegerType:
        valuePtr = 0;
        v10 = CFNumberGetValue(a1, kCFNumberNSIntegerType, &valuePtr);
LABEL_27:
        v13 = v10 == 0;
        v15 = (double)valuePtr;
LABEL_28:
        v7 = v15;
        goto LABEL_29;
      case kCFNumberCGFloatType:
        valuePtr = 0;
        v12 = CFNumberGetValue(a1, kCFNumberCGFloatType, &valuePtr);
LABEL_36:
        v13 = v12 == 0;
        v7 = *(double *)&valuePtr;
LABEL_29:
        if (v13)
          v7 = 0.0;
        v6 = *(_QWORD *)&v7 & 0xFFFFFFFFFFFFFF00;
        break;
      default:
        v6 = 0;
        LOBYTE(v7) = 0;
        break;
    }
    return LOBYTE(v7) | v6;
  }
  else
  {
    v4 = CFBooleanGetTypeID();
    if (v4 == CFGetTypeID(a1))
      *(double *)&result = (double)CFBooleanGetValue(a1);
    else
      *(double *)&result = 0.0;
  }
  return result;
}

void get_temporary_folder(std::string *a1)
{
  char *v2;
  char *v3;
  std::string::size_type size;
  std::string *v5;

  v2 = "/Library/Preferences/Audio/";
  if (access("/Library/Preferences/Audio/", 6))
  {
    v3 = getenv("TMPDIR");
    if (v3)
      v2 = v3;
    else
      v2 = "/tmp/";
  }
  std::string::basic_string[abi:ne180100]<0>(a1, v2);
  if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0)
  {
    size = a1->__r_.__value_.__l.__size_;
    if (!size)
      return;
    v5 = (std::string *)a1->__r_.__value_.__r.__words[0];
  }
  else
  {
    size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
    if (!*((_BYTE *)&a1->__r_.__value_.__s + 23))
      return;
    v5 = a1;
  }
  if (v5->__r_.__value_.__s.__data_[size - 1] != 47)
    std::string::push_back(a1, 47);
}

void sub_1B57EBCC4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void get_audio_capture_folder(_QWORD *a1)
{
  std::string *p_p;
  _BOOL4 v3;
  std::string *v4;
  int v5;
  void *v6;
  std::string *v7;
  std::string *v8;
  __int128 v9;
  std::string v10;
  std::string v11;
  std::string __p;

  get_temporary_folder(&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (access((const char *)p_p, 6))
  {
    v3 = 1;
  }
  else
  {
    get_temporary_folder(&v10);
    v4 = std::string::append(&v10, "AudioCapture/", 0xDuLL);
    v11 = *v4;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    v5 = SHIBYTE(v11.__r_.__value_.__r.__words[2]);
    v6 = (void *)v11.__r_.__value_.__r.__words[0];
    if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v7 = &v11;
    else
      v7 = (std::string *)v11.__r_.__value_.__r.__words[0];
    v3 = access((const char *)v7, 6) != 0;
    if (v5 < 0)
      operator delete(v6);
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v3)
      goto LABEL_15;
  }
  else if (v3)
  {
LABEL_15:
    std::string::basic_string[abi:ne180100]<0>(a1, "/private/var/mobile/tmp/com.apple.audiomxd/AudioCapture/HAL/");
    return;
  }
  get_temporary_folder(&__p);
  v8 = std::string::append(&__p, "AudioCapture/HAL/", 0x11uLL);
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  a1[2] = *((_QWORD *)&v8->__r_.__value_.__l + 2);
  *(_OWORD *)a1 = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1B57EBE20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a15 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(exception_object);
}

void AMCP::Graph::File_Capture_Settings::instance(AMCP::Graph::File_Capture_Settings *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      byte_1EF12F85C = 0;
      AMCP::Graph::File_Capture_Settings::instance(void)::s_instance = 0;
    }
  }
}

void AMCP::Utility::Settings_Storage::at_or<applesauce::CF::BooleanRef,applesauce::CF::StringRef const&>(_QWORD *a1, uint64_t a2, const void **a3, _QWORD *a4)
{
  std::mutex *v8;
  const __CFDictionary *v9;
  CFTypeRef v10;
  std::runtime_error *exception;
  CFTypeRef cf;
  char v13;

  v8 = (std::mutex *)(a2 + 16);
  std::mutex::lock((std::mutex *)(a2 + 16));
  v9 = *(const __CFDictionary **)(a2 + 112);
  if (!v9)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::BooleanRef,applesauce::CF::StringRef const&>(&cf, v9, *a3);
  if (v13)
  {
    v10 = cf;
    if (cf)
      CFRetain(cf);
    *a1 = v10;
  }
  else
  {
    *a1 = *a4;
    *a4 = 0;
  }
  std::__optional_destruct_base<applesauce::CF::BooleanRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
  std::mutex::unlock(v8);
}

void sub_1B57EBF78(void *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  __clang_call_terminate(a1);
}

BOOL applesauce::CF::convert_to<BOOL,0>(const __CFBoolean *a1)
{
  CFTypeID TypeID;
  int Value;
  CFTypeID v4;
  std::runtime_error *exception;

  TypeID = CFBooleanGetTypeID();
  if (TypeID == CFGetTypeID(a1))
  {
    Value = CFBooleanGetValue(a1);
  }
  else
  {
    v4 = CFNumberGetTypeID();
    if (v4 != CFGetTypeID(a1)
      || (LOWORD(Value) = applesauce::CF::details::number_convert_as<BOOL>(a1), (unsigned __int16)Value <= 0xFFu))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      applesauce::CF::convert_error(exception);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    Value = Value;
  }
  return Value != 0;
}

void sub_1B57EC034(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void applesauce::CF::BooleanRef::~BooleanRef(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

uint64_t applesauce::CF::details::number_convert_as<BOOL>(const __CFNumber *a1)
{
  const __CFNumber *v2;
  CFNumberType v3;
  int v4;
  const __CFNumber *v5;
  CFNumberType v6;
  const __CFNumber *v7;
  CFNumberType v8;
  const __CFNumber *v9;
  CFNumberType v10;
  const __CFNumber *v11;
  CFNumberType v12;
  const __CFNumber *v13;
  CFNumberType v14;
  int Value;
  BOOL v16;
  int v17;
  BOOL v18;
  BOOL v19;
  int v20;
  double valuePtr;

  switch(CFNumberGetType(a1))
  {
    case kCFNumberSInt8Type:
      LOBYTE(valuePtr) = 0;
      v2 = a1;
      v3 = kCFNumberSInt8Type;
      goto LABEL_10;
    case kCFNumberSInt16Type:
      LOWORD(valuePtr) = 0;
      v5 = a1;
      v6 = kCFNumberSInt16Type;
      goto LABEL_12;
    case kCFNumberSInt32Type:
      LODWORD(valuePtr) = 0;
      v7 = a1;
      v8 = kCFNumberSInt32Type;
      goto LABEL_14;
    case kCFNumberSInt64Type:
      valuePtr = 0.0;
      v9 = a1;
      v10 = kCFNumberSInt64Type;
      goto LABEL_25;
    case kCFNumberFloat32Type:
      LODWORD(valuePtr) = 0;
      v11 = a1;
      v12 = kCFNumberFloat32Type;
      goto LABEL_21;
    case kCFNumberFloat64Type:
      valuePtr = 0.0;
      v13 = a1;
      v14 = kCFNumberFloat64Type;
      goto LABEL_29;
    case kCFNumberCharType:
      LOBYTE(valuePtr) = 0;
      v2 = a1;
      v3 = kCFNumberCharType;
LABEL_10:
      Value = CFNumberGetValue(v2, v3, &valuePtr);
      v16 = Value == 0;
      v17 = LOBYTE(valuePtr);
      goto LABEL_15;
    case kCFNumberShortType:
      LOWORD(valuePtr) = 0;
      v5 = a1;
      v6 = kCFNumberShortType;
LABEL_12:
      Value = CFNumberGetValue(v5, v6, &valuePtr);
      v16 = Value == 0;
      v17 = LOWORD(valuePtr);
      goto LABEL_15;
    case kCFNumberIntType:
      LODWORD(valuePtr) = 0;
      v7 = a1;
      v8 = kCFNumberIntType;
LABEL_14:
      Value = CFNumberGetValue(v7, v8, &valuePtr);
      v16 = Value == 0;
      v17 = LODWORD(valuePtr);
LABEL_15:
      v18 = v16 || v17 == 0;
      goto LABEL_33;
    case kCFNumberLongType:
      valuePtr = 0.0;
      v9 = a1;
      v10 = kCFNumberLongType;
      goto LABEL_25;
    case kCFNumberLongLongType:
      valuePtr = 0.0;
      v9 = a1;
      v10 = kCFNumberLongLongType;
      goto LABEL_25;
    case kCFNumberFloatType:
      LODWORD(valuePtr) = 0;
      v11 = a1;
      v12 = kCFNumberFloatType;
LABEL_21:
      Value = CFNumberGetValue(v11, v12, &valuePtr);
      v19 = *(float *)&valuePtr == 0.0;
      goto LABEL_30;
    case kCFNumberDoubleType:
      valuePtr = 0.0;
      v13 = a1;
      v14 = kCFNumberDoubleType;
      goto LABEL_29;
    case kCFNumberCFIndexType:
      valuePtr = 0.0;
      v9 = a1;
      v10 = kCFNumberCFIndexType;
      goto LABEL_25;
    case kCFNumberNSIntegerType:
      valuePtr = 0.0;
      v9 = a1;
      v10 = kCFNumberNSIntegerType;
LABEL_25:
      Value = CFNumberGetValue(v9, v10, &valuePtr);
      if (Value)
        v18 = *(_QWORD *)&valuePtr == 0;
      else
        v18 = 1;
      goto LABEL_33;
    case kCFNumberCGFloatType:
      valuePtr = 0.0;
      v13 = a1;
      v14 = kCFNumberCGFloatType;
LABEL_29:
      Value = CFNumberGetValue(v13, v14, &valuePtr);
      v19 = valuePtr == 0.0;
LABEL_30:
      v18 = v19 || Value == 0;
LABEL_33:
      v4 = !v18;
      if (!Value)
        goto LABEL_38;
      v20 = 256;
      break;
    default:
      v4 = 0;
LABEL_38:
      v20 = 0;
      break;
  }
  return v20 | v4;
}

std::runtime_error *applesauce::CF::convert_error(std::runtime_error *this)
{
  return std::runtime_error::runtime_error(this, "Could not convert");
}

void applesauce::CF::details::find_at_key_or_optional<applesauce::CF::BooleanRef,applesauce::CF::StringRef const&>(_BYTE *a1, const __CFDictionary *a2, const void *a3)
{
  const void *v4;
  const void *v5;
  CFTypeID v6;
  char v7;

  v4 = applesauce::CF::details::at_key<applesauce::CF::StringRef const&>(a2, a3);
  if (!v4)
    goto LABEL_5;
  v5 = v4;
  CFRetain(v4);
  v6 = CFGetTypeID(v5);
  if (v6 != CFBooleanGetTypeID())
  {
    CFRelease(v5);
LABEL_5:
    v7 = 0;
    *a1 = 0;
    goto LABEL_6;
  }
  *(_QWORD *)a1 = v5;
  v7 = 1;
LABEL_6:
  a1[8] = v7;
}

uint64_t std::__optional_destruct_base<applesauce::CF::BooleanRef,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  const void *v2;

  if (*(_BYTE *)(a1 + 8))
  {
    v2 = *(const void **)a1;
    if (*(_QWORD *)a1)
      CFRelease(v2);
  }
  return a1;
}

const void *applesauce::CF::details::at_key<applesauce::CF::StringRef const&>(const __CFDictionary *a1, const void *a2)
{
  if (a2)
    return CFDictionaryGetValue(a1, a2);
  else
    return 0;
}

void sub_1B57EC410(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B57EC6D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  void *v28;

  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(a1);
}

void sub_1B57ECACC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  void *v19;
  void *v20;

  if (a2)
  {

    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1B57ECA60);
  }
  _Unwind_Resume(exception_object);
}

void std::function<void ()(NSString *)>::operator()(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;

  v4 = a2;
  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, id *))(*(_QWORD *)v3 + 48))(v3, &v4);

}

void sub_1B57ECE88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__216(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__217(uint64_t a1)
{

}

void sub_1B57ED324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::vector<Registrar_Connection_Info>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;
  void *v5;

  for (i = *(_QWORD *)(a1 + 8); i != a2; i -= 16)
  {

    v5 = *(void **)(i - 16);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

void std::__shared_ptr_emplace<std::vector<Registrar_Connection_Info>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E696C1F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<Registrar_Connection_Info>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E696C1F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

void std::__shared_ptr_emplace<std::vector<Registrar_Connection_Info>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1;
  void **v2;

  v2 = (void **)(a1 + 24);
  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
  {
    std::vector<Registrar_Connection_Info>::__base_destruct_at_end[abi:ne180100](a1 + 24, v1);
    operator delete(*v2);
  }
}

void AMCP::DAL::Multi_Reader_Ring_Buffer::~Multi_Reader_Ring_Buffer(AMCP::DAL::Multi_Reader_Ring_Buffer *this)
{
  char *v2;

  *(_QWORD *)this = off_1E6993620;
  v2 = (char *)this + 72;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 88);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v2);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 32);
}

{
  char *v2;

  *(_QWORD *)this = off_1E6993620;
  v2 = (char *)this + 72;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 88);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v2);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 32);
  JUMPOUT(0x1B5E50688);
}

uint64_t AMCP::DAL::DAL_Buffer::is_silent(AMCP::DAL::DAL_Buffer *this)
{
  return 0;
}

uint64_t AMCP::DAL::Ring_Buffer_Base::get_container@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 96);
  *a2 = *(_QWORD *)(this + 88);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

void AMCP::DAL::Multi_Reader_Ring_Buffer::get_time_range(AMCP::DAL::Multi_Reader_Ring_Buffer *this@<X0>, uint64_t a2@<X8>)
{
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  v4 = (os_unfair_lock_s *)((char *)this + 104);
  os_unfair_lock_lock((os_unfair_lock_t)this + 26);
  *(_OWORD *)a2 = *(_OWORD *)((char *)this + 8);
  v5 = *((_QWORD *)this + 4);
  *(_QWORD *)(a2 + 16) = *((_QWORD *)this + 3);
  *(_QWORD *)(a2 + 24) = v5;
  v6 = *((_QWORD *)this + 5);
  *(_QWORD *)(a2 + 32) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *(_OWORD *)(a2 + 40) = *((_OWORD *)this + 3);
  v9 = *((_QWORD *)this + 9);
  *(_QWORD *)(a2 + 56) = *((_QWORD *)this + 8);
  *(_QWORD *)(a2 + 64) = v9;
  v10 = *((_QWORD *)this + 10);
  *(_QWORD *)(a2 + 72) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  os_unfair_lock_unlock(v4);
}

void AMCP::DAL::Multi_Reader_Ring_Buffer::get_allowed_read_range(AMCP::DAL::Multi_Reader_Ring_Buffer *this@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  if (*((_DWORD *)this + 27))
  {
    AMCP::DAL::DAL_Buffer::get_timebase((AMCP::DAL::DAL_Buffer *)&v6, (uint64_t)this);
    AMCP::DAL::DAL_Time_Range::DAL_Time_Range(a2, &v6, 0.0, 4294967300.0);
    v3 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
  else
  {
    (*(void (**)(AMCP::DAL::Multi_Reader_Ring_Buffer *))(*(_QWORD *)this + 64))(this);
  }
}

void sub_1B57ED650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

double AMCP::DAL::Ring_Buffer_Base::get_format@<D0>(AMCP::DAL::Ring_Buffer_Base *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v2 = *((_QWORD *)this + 11);
  if (v2)
  {
    v3 = *(_OWORD *)(v2 + 8);
    v4 = *(_OWORD *)(v2 + 24);
    *(_OWORD *)a2 = v3;
    *(_OWORD *)(a2 + 16) = v4;
    *(_QWORD *)(a2 + 32) = *(_QWORD *)(v2 + 40);
  }
  else
  {
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)&v3 = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return *(double *)&v3;
}

void AMCP::DAL::Multi_Reader_Ring_Buffer::set_anchor_time_and_nominal_buffer_size(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  os_unfair_lock_s *v7;
  AMCP::Log::Scope_Registry *v8;
  uint64_t v9;
  int v10;
  NSObject *v11;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  void *exception;
  NSObject *v15;
  _opaque_pthread_t *v16;
  mach_port_t v17;
  void *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t (**v21)();
  __int128 v22;
  uint64_t v23;
  std::string v24;
  std::logic_error v25;
  std::logic_error v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  char v32;
  uint8_t buf[8];
  __int16 v34;
  char *v35;
  __int16 v36;
  int v37;
  __int16 v38;
  _BYTE v39[14];
  const char *v40;
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v7 = (os_unfair_lock_s *)(a1 + 104);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 104));
  v10 = *(_DWORD *)(a1 + 112);
  if (v10 < 0)
  {
    AMCP::Log::Scope_Registry::get(v8);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v11 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v12 = pthread_self();
      v13 = pthread_mach_thread_np(v12);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v13;
      v34 = 2080;
      v35 = "Multi_Reader_Ring_Buffer.cpp";
      v36 = 1024;
      v37 = 62;
      v38 = 2080;
      *(_QWORD *)v39 = "not (m_refcount >= 0)";
      _os_log_error_impl(&dword_1B57BA000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v32);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v24);
    std::logic_error::logic_error(&v25, &v24);
    v25.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v26, &v25);
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v31 = -1;
    v26.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v27 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v26);
    *(_QWORD *)&v39[6] = "virtual void AMCP::DAL::Multi_Reader_Ring_Buffer::set_anchor_time_and_nominal_buffer_size(const"
                         " Source_ID &, const DAL_Time_Range &, Buffer_Alignment)";
    v40 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Multi_Reader_Ring_Buffer.cpp";
    v41 = 62;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v19);
    v22 = v19;
    v23 = v20;
    v19 = 0uLL;
    v20 = 0;
    v21 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v21);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  if (a4 != 1)
  {
    AMCP::Log::Scope_Registry::get(v8);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v15 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      v16 = pthread_self();
      v17 = pthread_mach_thread_np(v16);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v17;
      v34 = 2080;
      v35 = "Multi_Reader_Ring_Buffer.cpp";
      v36 = 1024;
      v37 = 63;
      v38 = 2080;
      *(_QWORD *)v39 = "not (buffer_alignment == Buffer_Alignment::Aligned_For_Input)";
      _os_log_error_impl(&dword_1B57BA000, v15, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Multi_Reader_Ring_Buffer should only be used for input", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v32);
    v18 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Multi_Reader_Ring_Buffer should only be used for input", (uint64_t)&v24);
    std::logic_error::logic_error(&v25, &v24);
    v25.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v26, &v25);
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v31 = -1;
    v26.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v27 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v26);
    *(_QWORD *)&v39[6] = "virtual void AMCP::DAL::Multi_Reader_Ring_Buffer::set_anchor_time_and_nominal_buffer_size(const"
                         " Source_ID &, const DAL_Time_Range &, Buffer_Alignment)";
    v40 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Multi_Reader_Ring_Buffer.cpp";
    v41 = 63;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v19);
    v22 = v19;
    v23 = v20;
    v19 = 0uLL;
    v20 = 0;
    v21 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v21);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v18, (uint64_t)buf);
  }
  if (v10 == 1 || *(_BYTE *)(a1 + 116))
  {
    *(_BYTE *)(a1 + 116) = 0;
    AMCP::DAL::Ring_Buffer_Base::set_anchor_time_and_nominal_buffer_size(a1, v9, a3);
  }
  os_unfair_lock_unlock(v7);
}

void sub_1B57EDA94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  os_unfair_lock_s *v27;

  os_unfair_lock_unlock(v27);
  _Unwind_Resume(a1);
}

void AMCP::DAL::Multi_Reader_Ring_Buffer::commit_direct_write(os_unfair_lock_s *a1, uint64_t a2, uint64_t a3)
{
  os_unfair_lock_s *v5;
  uint64_t v6;

  v5 = a1 + 26;
  os_unfair_lock_lock(a1 + 26);
  AMCP::DAL::Ring_Buffer_Base::commit_direct_write((uint64_t)a1, v6, a3);
  os_unfair_lock_unlock(v5);
}

void sub_1B57EDC74(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void AMCP::DAL::Multi_Reader_Ring_Buffer::add_source(os_unfair_lock_s *a1, uint64_t a2, int a3)
{
  os_unfair_lock_s *v4;
  AMCP::Log::Scope_Registry *v5;
  uint32_t os_unfair_lock_opaque;
  NSObject *v7;
  _opaque_pthread_t *v8;
  mach_port_t v9;
  void *exception;
  NSObject *v11;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  void *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t (**v17)();
  __int128 v18;
  uint64_t v19;
  std::string v20;
  std::logic_error v21;
  std::logic_error v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  char v28;
  uint8_t buf[8];
  __int16 v30;
  char *v31;
  __int16 v32;
  int v33;
  __int16 v34;
  _BYTE v35[14];
  const char *v36;
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (a3 != 1)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v7 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = pthread_self();
      v9 = pthread_mach_thread_np(v8);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v9;
      v30 = 2080;
      v31 = "Multi_Reader_Ring_Buffer.cpp";
      v32 = 1024;
      v33 = 19;
      v34 = 2080;
      *(_QWORD *)v35 = "not (buffer_alignment == Buffer_Alignment::Aligned_For_Input)";
      _os_log_error_impl(&dword_1B57BA000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Multi_Reader_Ring_Buffer has a source that's output aligned", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v28);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Multi_Reader_Ring_Buffer has a source that's output aligned", (uint64_t)&v20);
    std::logic_error::logic_error(&v21, &v20);
    v21.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v22, &v21);
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = -1;
    v22.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v23 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v22);
    *(_QWORD *)&v35[6] = "virtual void AMCP::DAL::Multi_Reader_Ring_Buffer::add_source(const Source_ID &, Buffer_Alignment)";
    v36 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Multi_Reader_Ring_Buffer.cpp";
    v37 = 19;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v15);
    v18 = v15;
    v19 = v16;
    v15 = 0uLL;
    v16 = 0;
    v17 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v17);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v4 = a1 + 26;
  os_unfair_lock_lock(a1 + 26);
  os_unfair_lock_opaque = a1[28]._os_unfair_lock_opaque;
  if ((os_unfair_lock_opaque & 0x80000000) != 0)
  {
    AMCP::Log::Scope_Registry::get(v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v11 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v12 = pthread_self();
      v13 = pthread_mach_thread_np(v12);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v13;
      v30 = 2080;
      v31 = "Multi_Reader_Ring_Buffer.cpp";
      v32 = 1024;
      v33 = 21;
      v34 = 2080;
      *(_QWORD *)v35 = "not (m_refcount >= 0)";
      _os_log_error_impl(&dword_1B57BA000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v28);
    v14 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v20);
    std::logic_error::logic_error(&v21, &v20);
    v21.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v22, &v21);
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = -1;
    v22.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v23 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v22);
    *(_QWORD *)&v35[6] = "virtual void AMCP::DAL::Multi_Reader_Ring_Buffer::add_source(const Source_ID &, Buffer_Alignment)";
    v36 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Multi_Reader_Ring_Buffer.cpp";
    v37 = 21;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v15);
    v18 = v15;
    v19 = v16;
    v15 = 0uLL;
    v16 = 0;
    v17 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v17);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v14, (uint64_t)buf);
  }
  a1[28]._os_unfair_lock_opaque = os_unfair_lock_opaque + 1;
  os_unfair_lock_unlock(v4);
}

void sub_1B57EE064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  os_unfair_lock_s *v27;

  os_unfair_lock_unlock(v27);
  _Unwind_Resume(a1);
}

uint64_t AMCP::DAL::Multi_Reader_Ring_Buffer::remove_source(uint64_t a1, uint64_t a2, int a3)
{
  os_unfair_lock_s *v4;
  AMCP::Log::Scope_Registry *v5;
  int v6;
  NSObject *v7;
  _opaque_pthread_t *v8;
  mach_port_t v9;
  void *v10;
  NSObject *v12;
  _opaque_pthread_t *v13;
  mach_port_t v14;
  void *exception;
  __int128 v16;
  uint64_t v17;
  uint64_t (**v18)();
  __int128 v19;
  uint64_t v20;
  std::string v21;
  std::logic_error v22;
  std::logic_error v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  char v29;
  uint8_t buf[8];
  __int16 v31;
  char *v32;
  __int16 v33;
  int v34;
  __int16 v35;
  _BYTE v36[14];
  const char *v37;
  int v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (a3 != 1)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v12 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = pthread_self();
      v14 = pthread_mach_thread_np(v13);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v14;
      v31 = 2080;
      v32 = "Multi_Reader_Ring_Buffer.cpp";
      v33 = 1024;
      v34 = 29;
      v35 = 2080;
      *(_QWORD *)v36 = "not (buffer_alignment == Buffer_Alignment::Aligned_For_Input)";
      _os_log_error_impl(&dword_1B57BA000, v12, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Multi_Reader_Ring_Buffer has a source that's output aligned", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v29);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Multi_Reader_Ring_Buffer has a source that's output aligned", (uint64_t)&v21);
    std::logic_error::logic_error(&v22, &v21);
    v22.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v23, &v22);
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = -1;
    v23.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v24 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v23);
    *(_QWORD *)&v36[6] = "virtual BOOL AMCP::DAL::Multi_Reader_Ring_Buffer::remove_source(const Source_ID &, Buffer_Alignment)";
    v37 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Multi_Reader_Ring_Buffer.cpp";
    v38 = 29;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v16);
    v19 = v16;
    v20 = v17;
    v16 = 0uLL;
    v17 = 0;
    v18 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v18);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v4 = (os_unfair_lock_s *)(a1 + 104);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 104));
  v6 = *(_DWORD *)(a1 + 112);
  *(_DWORD *)(a1 + 112) = v6 - 1;
  if (v6 == 1)
  {
    *(_BYTE *)(a1 + 116) = 1;
  }
  else if (v6 <= 0)
  {
    AMCP::Log::Scope_Registry::get(v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v7 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = pthread_self();
      v9 = pthread_mach_thread_np(v8);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v9;
      v31 = 2080;
      v32 = "Multi_Reader_Ring_Buffer.cpp";
      v33 = 1024;
      v34 = 36;
      v35 = 2080;
      *(_QWORD *)v36 = "not (m_refcount >= 0)";
      _os_log_error_impl(&dword_1B57BA000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v29);
    v10 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v21);
    std::logic_error::logic_error(&v22, &v21);
    v22.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v23, &v22);
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = -1;
    v23.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v24 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v23);
    *(_QWORD *)&v36[6] = "virtual BOOL AMCP::DAL::Multi_Reader_Ring_Buffer::remove_source(const Source_ID &, Buffer_Alignment)";
    v37 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Multi_Reader_Ring_Buffer.cpp";
    v38 = 36;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v16);
    v19 = v16;
    v20 = v17;
    v16 = 0uLL;
    v17 = 0;
    v18 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v18);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v10, (uint64_t)buf);
  }
  os_unfair_lock_unlock(v4);
  return 0;
}

void sub_1B57EE630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  os_unfair_lock_s *v27;

  os_unfair_lock_unlock(v27);
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl(uint64_t a1, uint64_t a2)
{
  std::logic_error *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  *(_QWORD *)(a1 + 56) = &unk_1E69A1F88;
  v4 = std::logic_error::logic_error((std::logic_error *)a1, (const std::logic_error *)a2);
  v4->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
  v4[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
  v5 = (uint64_t)&v4[1];
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  v7 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v7;
  *(_QWORD *)a1 = off_1E69A1168;
  *(_QWORD *)(a1 + 16) = &unk_1E69A11A0;
  *(_QWORD *)(a1 + 56) = &unk_1E69A11D8;
  boost::exception_detail::copy_boost_exception(v5, a2 + 16);
  return a1;
}

{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)(a1 + 56) = &unk_1E69A1F88;
  std::logic_error::logic_error((std::logic_error *)a1, (const std::logic_error *)a2)->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = &unk_1E69A2000;
  *(_QWORD *)(a1 + 24) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)a1 = off_1E69A1168;
  *(_QWORD *)(a1 + 16) = &unk_1E69A11A0;
  *(_QWORD *)(a1 + 56) = &unk_1E69A11D8;
  return a1;
}

void sub_1B57EE8C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E500E8](v1);
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (**v6)(boost::exception_detail::error_info_container_impl *__hidden, const char *);
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  void *v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  unsigned int *v15;

  v4 = operator new();
  *(_QWORD *)v4 = off_1E69A20A0;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  boost::shared_ptr<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::shared_ptr<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>(&v14, v4);
  v5 = *(_QWORD *)(a1 + 24);
  if (!v5)
  {
    v5 = operator new();
    v6 = &off_1E69A2168;
    *(_QWORD *)(v5 + 24) = 0;
    *(_QWORD *)(v5 + 32) = 0;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)v5 = &off_1E69A2168;
    *(_QWORD *)(v5 + 8) = v5 + 16;
    *(_QWORD *)(v5 + 40) = 0;
    *(_QWORD *)(v5 + 48) = 0;
    *(_DWORD *)(v5 + 56) = 0;
    v7 = *(_QWORD *)(a1 + 24);
    if (v7)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
      v6 = *(uint64_t (***)(boost::exception_detail::error_info_container_impl *__hidden, const char *))v5;
    }
    *(_QWORD *)(a1 + 24) = v5;
    ((void (*)(uint64_t))v6[3])(v5);
  }
  v12 = v14;
  v13 = v15;
  if (v15)
  {
    v8 = v15 + 2;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  (*(void (**)(uint64_t, uint64_t *, void **))(*(_QWORD *)v5 + 16))(v5, &v12, &v11);
  boost::detail::shared_count::~shared_count(&v13);
  boost::detail::shared_count::~shared_count(&v15);
  return a1;
}

void sub_1B57EEA3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, unsigned int *a14)
{
  unsigned int **v14;

  boost::detail::shared_count::~shared_count(v14);
  boost::detail::shared_count::~shared_count(&a14);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::~clone_impl(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &unk_1E69A2000;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  JUMPOUT(0x1B5E500E8);
}

{
  *(_QWORD *)(a1 + 16) = &unk_1E69A2000;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  MEMORY[0x1B5E500E8](a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone(uint64_t a1)
{
  uint64_t v2;
  std::logic_error *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = operator new();
  *(_QWORD *)(v2 + 56) = &unk_1E69A1F88;
  v3 = std::logic_error::logic_error((std::logic_error *)v2, (const std::logic_error *)a1);
  v3->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
  v3[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
  v4 = (uint64_t)&v3[1];
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v2 + 24) = v5;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  *(_OWORD *)(v2 + 32) = *(_OWORD *)(a1 + 32);
  *(_DWORD *)(v2 + 48) = *(_DWORD *)(a1 + 48);
  *(_QWORD *)v2 = off_1E69A1168;
  *(_QWORD *)(v2 + 16) = &unk_1E69A11A0;
  *(_QWORD *)(v2 + 56) = &unk_1E69A11D8;
  boost::exception_detail::copy_boost_exception(v4, a1 + 16);
  return v2 + *(_QWORD *)(*(_QWORD *)v2 - 24);
}

void sub_1B57EEC60(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = MEMORY[0x1B5E500E8](v1);
  MEMORY[0x1B5E50688](v3, 0x10F1C40311038C2);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, a1);
}

void sub_1B57EECD8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::~clone_impl(_QWORD *a1)
{
  *a1 = &unk_1E69A2000;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  JUMPOUT(0x1B5E500E8);
}

void `non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::~clone_impl(uint64_t a1)
{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::~clone_impl(a1 - 16);
}

uint64_t `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone(_QWORD *a1)
{
  return boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
}

void `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::rethrow(_QWORD *a1)
{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::rethrow((uint64_t)a1 + *(_QWORD *)(*a1 - 32));
}

void `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::~clone_impl(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 40);
  *((_QWORD *)v1 + 2) = &unk_1E69A2000;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)v1 + 3);
  JUMPOUT(0x1B5E500E8);
}

{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::~clone_impl((uint64_t)a1 + *(_QWORD *)(*a1 - 40));
}

void boost::exception_detail::error_info_injector<std::domain_error>::~error_info_injector(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &unk_1E69A2000;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  JUMPOUT(0x1B5E500E8);
}

{
  *(_QWORD *)(a1 + 16) = &unk_1E69A2000;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  MEMORY[0x1B5E500E8](a1);
  JUMPOUT(0x1B5E50688);
}

void `non-virtual thunk to'boost::exception_detail::error_info_injector<std::domain_error>::~error_info_injector(_QWORD *a1)
{
  *a1 = &unk_1E69A2000;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  JUMPOUT(0x1B5E500E8);
}

void `non-virtual thunk to'boost::exception_detail::error_info_injector<std::domain_error>::~error_info_injector(uint64_t a1)
{
  boost::exception_detail::error_info_injector<std::domain_error>::~error_info_injector(a1 - 16);
}

void AMCP::DAL::DAL_Buffer::get_timebase(AMCP::DAL::DAL_Buffer *this, uint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD v12[4];
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;

  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)a2 + 64))(v12, a2);
  v3 = v13;
  *(_QWORD *)this = v12[3];
  *((_QWORD *)this + 1) = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v6 = v14;
  if (v14)
  {
    v7 = (unint64_t *)&v14->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = v13;
  if (v13)
  {
    v10 = (unint64_t *)&v13->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

uint64_t AMCP::get_clock_property_traits_list(AMCP *this)
{
  unsigned __int8 v1;
  unint64_t v2;
  char v4;
  char **v5;
  char *v6;

  if ((v1 & 1) == 0
  {
    AMCP::get_clock_property_traits_list(void)::s_indesctructible_property_traits_list_ptr = 0;
  }
  v2 = atomic_load(&AMCP::get_clock_property_traits_list(void)::once);
  if (v2 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&AMCP::get_clock_property_traits_list(void)::once, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::get_clock_property_traits_list(void)::$_0 &&>>);
  }
  return AMCP::get_clock_property_traits_list(void)::s_indesctructible_property_traits_list_ptr;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::get_clock_property_traits_list(void)::$_0 &&>>()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  void *v3;
  unsigned int *v4;
  unint64_t v5;
  uint64_t v6;
  void **v7[2];
  char v8;
  int v9[12];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)v9, 1768189556, 1, 1, 0, &AMCP::Property_Traits<1768189556u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1650682995u>::k_valid_scopes, 0, 0, 15);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v10, 1650682995, 1, 1, 0, &AMCP::Property_Traits<1650682995u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668047219u>::k_valid_scopes, 0, 0, 6);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v11, 1668047219, 1, 1, 0, &AMCP::Property_Traits<1668047219u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1870098034u>::k_valid_scopes, 0, 0, 6);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v12, 1870098034, 1, 1, 0, &AMCP::Property_Traits<1870098034u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1869638759u>::k_valid_scopes, 0, 0, 15);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v13, 1869638759, 1, 1, 0, &AMCP::Property_Traits<1869638759u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1870097955u>::k_valid_scopes, 0, 1869638759, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v14, 1870097955, 1, 0, 0, &AMCP::Property_Traits<1870097955u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819173229u>::k_valid_scopes, 0, 1870098020, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v15, 1819173229, 0, 0, 1, &AMCP::Property_Traits<1819173229u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819111268u>::k_valid_scopes, 0, 1819173229, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v16, 1819111268, 0, 0, 0, &AMCP::Property_Traits<1819111268u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819107691u>::k_valid_scopes, 0, 1819111268, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v17, 1819107691, 0, 0, 0, &AMCP::Property_Traits<1819107691u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1768124270u>::k_valid_scopes, 0, 1819107691, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v18, 1768124270, 0, 0, 0, &AMCP::Property_Traits<1768124270u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1667330160u>::k_valid_scopes, 0, 1768124270, 5);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v19, 1667330160, 0, 0, 0, &AMCP::Property_Traits<1667330160u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1936618861u>::k_valid_scopes, 0, 1667330160, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v20, 1936618861, 0, 0, 0, &AMCP::Property_Traits<1936618861u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1719105134u>::k_valid_scopes, 0, 1936618861, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v21, 1719105134, 0, 0, 0, &AMCP::Property_Traits<1719105134u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818454126u>::k_valid_scopes, 0, 1719105134, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v22, 1818454126, 0, 0, 0, AMCP::Property_Traits<1818454126u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818452846u>::k_valid_scopes, -1, 1818454126, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v23, 1818452846, 0, 0, 0, AMCP::Property_Traits<1818452846u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818455662u>::k_valid_scopes, -1, 1818452846, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v24, 1818455662, 0, 0, 0, AMCP::Property_Traits<1818455662u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1920168547u>::k_valid_scopes, -1, 1818455662, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v25, 1920168547, 0, 0, 0, &AMCP::Property_Traits<1920168547u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668575852u>::k_valid_scopes, 0, 0, 5);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v26, 1668575852, 0, 0, 0, &AMCP::Property_Traits<1668575852u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1885956452u>::k_valid_scopes, 0, 1668575852, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v27, 1969841184, 1, 1, 0, &AMCP::Property_Traits<1969841184u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1836411236u>::k_valid_scopes, 0, 1668639076, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v28, 1836411236, 0, 0, 0, &AMCP::Property_Traits<1836411236u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1751737454u>::k_valid_scopes, 0, 1836411236, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v29, 1953653102, 1, 0, 0, &AMCP::Property_Traits<1953653102u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1651007861u>::k_valid_scopes, 0, 1953653102, 23);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v30, 1751737454, 1, 0, 0, &AMCP::Property_Traits<1751737454u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668049764u>::k_valid_scopes, 0, 1751737454, 2);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v31, 1668049764, 1, 0, 0, &AMCP::Property_Traits<1668049764u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1819569763u>::k_valid_scopes, 0, 1668049764, 7);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v32, 1819569763, 1, 0, 0, AMCP::Property_Traits<1819569763u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1853059700u>::k_valid_scopes, 0, 1819569763, 24);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v33, 1853059700, 1, 0, 1, &AMCP::Property_Traits<1853059700u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1853059619u>::k_valid_scopes, 0, 1853059700, 17);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v34, 1853059619, 1, 0, 0, &AMCP::Property_Traits<1853059619u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1935763060u>::k_valid_scopes, 0, 1853059619, 25);
  v0 = operator new();
  *(_QWORD *)v0 = 0;
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)(v0 + 16) = 0;
  v7[1] = (void **)v0;
  v8 = 0;
  v1 = (char *)operator new(0x4E0uLL);
  *(_QWORD *)v0 = v1;
  *(_QWORD *)(v0 + 8) = v1;
  *(_QWORD *)(v0 + 16) = v1 + 1248;
  *(_QWORD *)(v0 + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<AMCP::Live_Property_Traits>,AMCP::Live_Property_Traits const*,AMCP::Live_Property_Traits const*,AMCP::Live_Property_Traits*>(v0 + 16, v9, (int *)&v35, (uint64_t)v1);
  v7[0] = 0;
  std::unique_ptr<std::vector<AMCP::Live_Property_Traits>>::reset[abi:ne180100]((void ***)&AMCP::get_clock_property_traits_list(void)::s_indesctructible_property_traits_list_ptr, (void **)v0);
  std::unique_ptr<std::vector<AMCP::Live_Property_Traits>>::reset[abi:ne180100](v7, 0);
  v2 = 312;
  do
  {
    v3 = *(void **)&v9[v2 - 10];
    if (v3)
    {
      *(_QWORD *)&v9[v2 - 8] = v3;
      operator delete(v3);
    }
    v2 -= 12;
  }
  while (v2 * 4);
  v4 = *(unsigned int **)(AMCP::get_clock_property_traits_list(void)::s_indesctructible_property_traits_list_ptr + 8);
  v5 = 126
     - 2
     * __clz(0xAAAAAAAAAAAAAAABLL* (((uint64_t)v4- *(_QWORD *)AMCP::get_clock_property_traits_list(void)::s_indesctructible_property_traits_list_ptr) >> 4));
  if (v4 == *(unsigned int **)AMCP::get_clock_property_traits_list(void)::s_indesctructible_property_traits_list_ptr)
    v6 = 0;
  else
    v6 = v5;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Property_Traits *,false>(*(unsigned int **)AMCP::get_clock_property_traits_list(void)::s_indesctructible_property_traits_list_ptr, v4, v6, 1);
}

void sub_1B57EF6B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, char a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  void *v19;

  v16 = v15;
  *(_QWORD *)(v14 + 8) = v16;
  std::vector<AMCP::Live_Property_Traits>::__destroy_vector::operator()[abi:ne180100](&a12);
  MEMORY[0x1B5E50688](v14, 0x20C40960023A9);
  v18 = 1248;
  while (1)
  {
    v19 = *(void **)(&a14 + v18 - 40);
    if (v19)
    {
      *(_QWORD *)(&a14 + v18 - 32) = v19;
      operator delete(v19);
    }
    v18 -= 48;
    if (!v18)
      _Unwind_Resume(a1);
  }
}

uint64_t AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>(uint64_t a1, int a2, char a3, char a4, char a5, const void *a6, uint64_t a7, int a8, int a9, int a10)
{
  *(_DWORD *)a1 = a2;
  *(_BYTE *)(a1 + 4) = a3;
  *(_BYTE *)(a1 + 5) = a4;
  *(_BYTE *)(a1 + 6) = a5;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>((_QWORD *)(a1 + 8), a6, a7, (a7 - (uint64_t)a6) >> 2);
  *(_DWORD *)(a1 + 32) = a8;
  *(_DWORD *)(a1 + 36) = a9;
  *(_DWORD *)(a1 + 40) = a10;
  return a1;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<AMCP::Live_Property_Traits>,AMCP::Live_Property_Traits const*,AMCP::Live_Property_Traits const*,AMCP::Live_Property_Traits*>(uint64_t a1, int *a2, int *a3, uint64_t a4)
{
  uint64_t v4;
  int *v6;
  int v7;
  uint64_t v8;
  _QWORD v10[3];
  char v11;
  uint64_t v12;
  uint64_t v13;

  v4 = a4;
  v12 = a4;
  v13 = a4;
  v10[0] = a1;
  v10[1] = &v12;
  v10[2] = &v13;
  v11 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      v7 = *v6;
      *(_DWORD *)(v4 + 3) = *(int *)((char *)v6 + 3);
      *(_DWORD *)v4 = v7;
      *(_QWORD *)(v4 + 16) = 0;
      *(_QWORD *)(v4 + 24) = 0;
      *(_QWORD *)(v4 + 8) = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)(v4 + 8), *((const void **)v6 + 1), *((_QWORD *)v6 + 2), (uint64_t)(*((_QWORD *)v6 + 2) - *((_QWORD *)v6 + 1)) >> 2);
      v8 = *((_QWORD *)v6 + 4);
      *(_DWORD *)(v4 + 40) = v6[10];
      *(_QWORD *)(v4 + 32) = v8;
      v4 = v13 + 48;
      v13 += 48;
      v6 += 12;
    }
    while (v6 != a3);
  }
  v11 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<AMCP::Live_Property_Traits>,AMCP::Live_Property_Traits*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
  return v4;
}

void sub_1B57EF834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<AMCP::Live_Property_Traits>,AMCP::Live_Property_Traits*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::vector<AMCP::Live_Property_Traits>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 5);
        if (v6)
        {
          *((_QWORD *)v4 - 4) = v6;
          operator delete(v6);
        }
        v4 -= 48;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void ***std::unique_ptr<std::vector<AMCP::Live_Property_Traits>>::reset[abi:ne180100](void ***result, void **a2)
{
  void **v2;
  void **v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = v2;
    std::vector<AMCP::Live_Property_Traits>::__destroy_vector::operator()[abi:ne180100](&v3);
    JUMPOUT(0x1B5E50688);
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Property_Traits *,false>(unsigned int *a1, unsigned int *a2, uint64_t a3, char a4)
{
  uint64_t v7;
  _QWORD *v8;
  unsigned int *v9;
  uint64_t v10;
  unint64_t v11;
  int *v12;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  void *v31;
  unsigned int *v32;
  uint64_t v33;
  void *v34;
  BOOL v35;
  BOOL v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int *v41;
  uint64_t v42;
  unint64_t v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  void *v48;
  unsigned int *v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int *v54;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int *v59;
  unsigned int *v60;
  unsigned int v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  void **v71;
  uint64_t v72;
  void *v73;
  int64_t v74;
  int64_t v75;
  int64_t v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int *v85;
  unsigned int v86;
  void *v87;
  uint64_t v88;
  unsigned int v89;
  unsigned int v90;
  void *v91;
  int64_t v92;
  unsigned int *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  void *v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t *v103;
  unsigned int *v104;
  unsigned int v105;
  void *v106;
  unsigned int *v107;
  int v108;
  void *v109;
  uint64_t v110;
  unint64_t v111;
  unsigned int *v112;
  unsigned int v113;
  uint64_t v114;
  unsigned int *v115;
  unsigned int v116;
  void *v117;
  uint64_t v118;
  void *v119;
  void *v120;
  uint64_t v122;
  unsigned int *v123;
  uint64_t v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  unsigned int *v136;
  unsigned int *v137;
  unsigned int *v138;
  uint64_t v140;
  uint64_t v141;
  __int128 v142;
  __int128 v143;
  uint64_t v144;
  __int128 v145;
  uint64_t v146;
  __int128 v147;
  __int128 v148;
  unsigned int *v149;
  unsigned int *v150;
  __int128 v151;
  uint64_t v152;
  __int16 v153;
  __int16 v154;
  __int16 v155;
  __int16 v156;
  uint64_t v157;
  __int16 v158;
  char v159;
  char v160;
  char v161;
  char v162;
  char v163;
  unsigned int v164;
  _BYTE v165[7];
  __int16 v166;
  char v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unsigned int v175;
  unsigned int v176;
  unsigned int v177;
  int v178;
  unsigned int v179;
  unsigned int v180;
  int v181;

  while (2)
  {
    v7 = (uint64_t)a1;
    v136 = a1 + 24;
    v137 = a1 + 12;
    v8 = a1 + 2;
    v9 = a1 + 8;
    v138 = a1 + 1;
LABEL_2:
    v10 = (uint64_t)a2 - v7;
    v11 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - v7) >> 4);
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v53 = *(a2 - 12);
        v52 = (uint64_t)(a2 - 12);
        if (v53 < *(_DWORD *)v7)
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Live_Property_Traits *&,AMCP::Live_Property_Traits *&>(v7, v52);
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Property_Traits *>((unsigned int *)v7, (unsigned int *)(v7 + 48), a2 - 12);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Property_Traits *>((unsigned int *)v7, (unsigned int *)(v7 + 48), (unsigned int *)(v7 + 96), a2 - 12);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Property_Traits *>((unsigned int *)v7, (unsigned int *)(v7 + 48), (unsigned int *)(v7 + 96), (unsigned int *)(v7 + 144), a2 - 12);
        return;
      default:
        if (v10 <= 1151)
        {
          v54 = (unsigned int *)(v7 + 48);
          v56 = (unsigned int *)v7 == a2 || v54 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v56)
            {
              v57 = 0;
              v58 = v7;
              do
              {
                v59 = a2;
                v60 = v54;
                v61 = *(_DWORD *)(v58 + 48);
                if (v61 < *(_DWORD *)v58)
                {
                  v155 = *(_WORD *)(v58 + 52);
                  v161 = *(_BYTE *)(v58 + 54);
                  v62 = *(void **)(v58 + 56);
                  v148 = *(_OWORD *)(v58 + 64);
                  *(_QWORD *)(v58 + 56) = 0;
                  *(_QWORD *)(v58 + 64) = 0;
                  *(_QWORD *)(v58 + 72) = 0;
                  v171 = *(_QWORD *)(v58 + 80);
                  v63 = v57;
                  v178 = *(_DWORD *)(v58 + 88);
                  while (1)
                  {
                    v64 = v7 + v63;
                    *(_DWORD *)(v64 + 48) = *(_DWORD *)(v7 + v63);
                    *(_DWORD *)(v64 + 51) = *(_DWORD *)(v7 + v63 + 3);
                    v65 = *(void **)(v7 + v63 + 56);
                    if (v65)
                    {
                      *(_QWORD *)(v64 + 64) = v65;
                      operator delete(v65);
                      *(_QWORD *)(v64 + 72) = 0;
                    }
                    *(_OWORD *)(v64 + 56) = *(_OWORD *)(v64 + 8);
                    *(_QWORD *)(v64 + 8) = 0;
                    *(_QWORD *)(v64 + 16) = 0;
                    v66 = *(_QWORD *)(v64 + 24);
                    v67 = *(_QWORD *)(v64 + 32);
                    *(_QWORD *)(v64 + 24) = 0;
                    *(_QWORD *)(v64 + 72) = v66;
                    *(_QWORD *)(v64 + 80) = v67;
                    *(_DWORD *)(v64 + 88) = *(_DWORD *)(v64 + 40);
                    if (!v63)
                      break;
                    v68 = v7 + v63;
                    v69 = *(_DWORD *)(v7 + v63 - 48);
                    v63 -= 48;
                    if (v61 >= v69)
                    {
                      v70 = v7 + v63 + 48;
                      v71 = (void **)(v68 + 8);
                      v72 = v68 + 32;
                      goto LABEL_83;
                    }
                  }
                  v71 = (void **)(v7 + 8);
                  v72 = v7 + 32;
                  v70 = v7;
LABEL_83:
                  *(_DWORD *)v70 = v61;
                  *(_WORD *)(v70 + 4) = v155;
                  *(_BYTE *)(v70 + 6) = v161;
                  v73 = *v71;
                  if (*v71)
                  {
                    *(_QWORD *)(v70 + 16) = v73;
                    operator delete(v73);
                  }
                  *v71 = v62;
                  *(_OWORD *)(v70 + 16) = v148;
                  *(_DWORD *)(v72 + 8) = v178;
                  *(_QWORD *)v72 = v171;
                }
                v54 = v60 + 12;
                v57 += 48;
                v58 = (uint64_t)v60;
                a2 = v59;
              }
              while (v54 != v59);
            }
          }
          else if (!v56)
          {
            v122 = v7 + 24;
            do
            {
              v123 = a2;
              v124 = (uint64_t)v54;
              v125 = *(_DWORD *)(v7 + 48);
              if (v125 < *(_DWORD *)v7)
              {
                v158 = *(_WORD *)(v7 + 52);
                v163 = *(_BYTE *)(v7 + 54);
                v151 = *(_OWORD *)(v7 + 56);
                *(_QWORD *)(v7 + 56) = 0;
                *(_QWORD *)(v7 + 64) = 0;
                v127 = *(_QWORD *)(v7 + 72);
                v126 = *(_QWORD *)(v7 + 80);
                *(_QWORD *)(v7 + 72) = 0;
                v174 = v126;
                v128 = v122;
                v181 = *(_DWORD *)(v7 + 88);
                do
                {
                  v129 = v128;
                  *(_DWORD *)(v128 + 24) = *(_DWORD *)(v128 - 24);
                  *(_DWORD *)(v128 + 27) = *(_DWORD *)(v128 - 21);
                  v130 = *(void **)(v128 + 32);
                  if (v130)
                  {
                    *(_QWORD *)(v128 + 40) = v130;
                    operator delete(v130);
                    *(_QWORD *)(v128 + 48) = 0;
                  }
                  v131 = (_QWORD *)(v128 - 16);
                  *(_OWORD *)(v128 + 32) = *(_OWORD *)(v128 - 16);
                  v132 = *(_QWORD *)v128;
                  v131[1] = 0;
                  *(_QWORD *)v128 = 0;
                  *v131 = 0;
                  v133 = *(_QWORD *)(v128 + 8);
                  *(_QWORD *)(v128 + 48) = v132;
                  *(_QWORD *)(v128 + 56) = v133;
                  *(_DWORD *)(v128 + 64) = *(_DWORD *)(v128 + 16);
                  LODWORD(v133) = *(_DWORD *)(v128 - 72);
                  v128 -= 48;
                }
                while (v125 < v133);
                v134 = v129 - 24;
                *(_DWORD *)(v129 - 24) = v125;
                *(_BYTE *)(v134 + 6) = v163;
                *(_WORD *)(v134 + 4) = v158;
                v135 = *(void **)(v129 - 16);
                if (v135)
                {
                  *(_QWORD *)(v129 - 8) = v135;
                  operator delete(v135);
                }
                *(_OWORD *)(v129 - 16) = v151;
                *(_QWORD *)v129 = v127;
                *(_DWORD *)(v129 + 16) = v181;
                *(_QWORD *)(v129 + 8) = v174;
              }
              v54 = (unsigned int *)(v124 + 48);
              v122 += 48;
              v7 = v124;
              a2 = v123;
            }
            while (v54 != v123);
          }
          return;
        }
        if (!a3)
        {
          if ((unsigned int *)v7 == a2)
            return;
          v149 = a2;
          v74 = (v11 - 2) >> 1;
          v75 = v74;
          do
          {
            v76 = v75;
            if (v74 >= v75)
            {
              v77 = (2 * v75) | 1;
              v78 = (unsigned int *)(v7 + 48 * v77);
              if (2 * v76 + 2 >= (uint64_t)v11)
              {
                v79 = *v78;
              }
              else
              {
                v79 = *v78;
                v80 = v78[12];
                if (*v78 <= v80)
                  v79 = v78[12];
                if (*v78 < v80)
                {
                  v78 += 12;
                  v77 = 2 * v76 + 2;
                }
              }
              v81 = v7 + 48 * v76;
              v82 = *(_DWORD *)v81;
              if (v79 >= *(_DWORD *)v81)
              {
                v162 = *(_BYTE *)(v81 + 6);
                v156 = *(_WORD *)(v81 + 4);
                v83 = v7 + 48 * v76;
                v143 = *(_OWORD *)(v83 + 8);
                *(_QWORD *)(v83 + 8) = 0;
                *(_QWORD *)(v83 + 16) = 0;
                v140 = *(_QWORD *)(v83 + 24);
                v84 = *(_QWORD *)(v83 + 32);
                *(_QWORD *)(v83 + 24) = 0;
                v172 = v84;
                v179 = *(_DWORD *)(v83 + 40);
                do
                {
                  v85 = v78;
                  v86 = *v78;
                  *(_DWORD *)(v81 + 3) = *(unsigned int *)((char *)v85 + 3);
                  *(_DWORD *)v81 = v86;
                  v87 = *(void **)(v81 + 8);
                  if (v87)
                  {
                    *(_QWORD *)(v81 + 16) = v87;
                    operator delete(v87);
                    *(_QWORD *)(v81 + 8) = 0;
                    *(_QWORD *)(v81 + 16) = 0;
                    *(_QWORD *)(v81 + 24) = 0;
                  }
                  *(_OWORD *)(v81 + 8) = *(_OWORD *)(v85 + 2);
                  *(_QWORD *)(v81 + 24) = *((_QWORD *)v85 + 3);
                  *((_QWORD *)v85 + 1) = 0;
                  *((_QWORD *)v85 + 2) = 0;
                  *((_QWORD *)v85 + 3) = 0;
                  v88 = *((_QWORD *)v85 + 4);
                  *(_DWORD *)(v81 + 40) = v85[10];
                  *(_QWORD *)(v81 + 32) = v88;
                  if (v74 < v77)
                    break;
                  v78 = (unsigned int *)(v7 + 48 * ((2 * v77) | 1));
                  if (2 * v77 + 2 >= (uint64_t)v11)
                  {
                    v89 = *v78;
                    v77 = (2 * v77) | 1;
                  }
                  else
                  {
                    v89 = *v78;
                    v90 = v78[12];
                    if (*v78 <= v90)
                      v89 = v78[12];
                    if (*v78 >= v90)
                    {
                      v77 = (2 * v77) | 1;
                    }
                    else
                    {
                      v78 += 12;
                      v77 = 2 * v77 + 2;
                    }
                  }
                  v81 = (uint64_t)v85;
                }
                while (v89 >= v82);
                *v85 = v82;
                *((_WORD *)v85 + 2) = v156;
                *((_BYTE *)v85 + 6) = v162;
                v91 = (void *)*((_QWORD *)v85 + 1);
                if (v91)
                {
                  *((_QWORD *)v85 + 2) = v91;
                  operator delete(v91);
                }
                *(_OWORD *)(v85 + 2) = v143;
                *((_QWORD *)v85 + 3) = v140;
                *((_QWORD *)v85 + 4) = v172;
                v85[10] = v179;
              }
            }
            v75 = v76 - 1;
          }
          while (v76);
          v92 = v10 / 0x30uLL;
          v93 = v149;
          while (2)
          {
            if (v92 >= 2)
            {
              v150 = v93;
              v94 = 0;
              *(_DWORD *)&v165[3] = *(_DWORD *)(v7 + 3);
              *(_DWORD *)v165 = *(_DWORD *)v7;
              v95 = *(_QWORD *)(v7 + 8);
              v141 = *(_QWORD *)(v7 + 24);
              v144 = *(_QWORD *)(v7 + 16);
              *(_QWORD *)(v7 + 8) = 0;
              *(_QWORD *)(v7 + 16) = 0;
              v157 = *(_QWORD *)(v7 + 32);
              v164 = *(_DWORD *)(v7 + 40);
              v96 = v7;
              *(_QWORD *)(v7 + 24) = 0;
              do
              {
                v97 = v96 + 48 * v94 + 48;
                v98 = 2 * v94;
                v94 = (2 * v94) | 1;
                if (v98 + 2 < v92 && *(_DWORD *)v97 < *(_DWORD *)(v97 + 48))
                {
                  v97 += 48;
                  v94 = v98 + 2;
                }
                v99 = *(_DWORD *)v97;
                *(_DWORD *)(v96 + 3) = *(_DWORD *)(v97 + 3);
                *(_DWORD *)v96 = v99;
                v100 = *(void **)(v96 + 8);
                if (v100)
                {
                  *(_QWORD *)(v96 + 16) = v100;
                  operator delete(v100);
                  *(_QWORD *)(v96 + 8) = 0;
                  *(_QWORD *)(v96 + 16) = 0;
                  *(_QWORD *)(v96 + 24) = 0;
                }
                v101 = (_QWORD *)(v97 + 8);
                *(_OWORD *)(v96 + 8) = *(_OWORD *)(v97 + 8);
                *(_QWORD *)(v96 + 24) = *(_QWORD *)(v97 + 24);
                *(_QWORD *)(v97 + 8) = 0;
                *(_QWORD *)(v97 + 16) = 0;
                v103 = (uint64_t *)(v97 + 32);
                v102 = *(_QWORD *)(v97 + 32);
                *(_QWORD *)(v97 + 24) = 0;
                *(_DWORD *)(v96 + 40) = *(_DWORD *)(v97 + 40);
                *(_QWORD *)(v96 + 32) = v102;
                v96 = v97;
              }
              while (v94 <= (uint64_t)((unint64_t)(v92 - 2) >> 1));
              v104 = v93 - 12;
              if ((unsigned int *)v97 == v150 - 12)
              {
                *(_DWORD *)(v97 + 3) = *(_DWORD *)&v165[3];
                *(_DWORD *)v97 = *(_DWORD *)v165;
                v120 = *(void **)(v97 + 8);
                if (v120)
                {
                  *(_QWORD *)(v97 + 16) = v120;
                  operator delete(v120);
                }
                *(_QWORD *)(v97 + 8) = v95;
                *(_QWORD *)(v97 + 16) = v144;
                *(_QWORD *)(v97 + 24) = v141;
                *v103 = v157;
                *(_DWORD *)(v97 + 40) = v164;
LABEL_142:
                v93 = v150;
              }
              else
              {
                v105 = *v104;
                *(_DWORD *)(v97 + 3) = *(unsigned int *)((char *)v150 - 45);
                *(_DWORD *)v97 = v105;
                v106 = *(void **)(v97 + 8);
                if (v106)
                {
                  *(_QWORD *)(v97 + 16) = v106;
                  operator delete(v106);
                  *v101 = 0;
                  *(_QWORD *)(v97 + 16) = 0;
                  *(_QWORD *)(v97 + 24) = 0;
                }
                v107 = v150 - 10;
                *(_OWORD *)(v97 + 8) = *(_OWORD *)(v150 - 10);
                *(_QWORD *)(v97 + 24) = *((_QWORD *)v150 - 3);
                *(_QWORD *)v107 = 0;
                *((_QWORD *)v107 + 1) = 0;
                *((_QWORD *)v107 + 2) = 0;
                v108 = *(v150 - 2);
                *v103 = *((_QWORD *)v150 - 2);
                *(_DWORD *)(v97 + 40) = v108;
                *(unsigned int *)((char *)v150 - 45) = *(_DWORD *)&v165[3];
                *v104 = *(_DWORD *)v165;
                v93 = v150;
                v109 = (void *)*((_QWORD *)v150 - 5);
                if (v109)
                {
                  *((_QWORD *)v150 - 4) = v109;
                  operator delete(v109);
                }
                *((_QWORD *)v150 - 5) = v95;
                *((_QWORD *)v150 - 4) = v144;
                *((_QWORD *)v150 - 3) = v141;
                *(v150 - 2) = v164;
                *((_QWORD *)v150 - 2) = v157;
                v110 = v97 + 48 - v7;
                if (v110 >= 49)
                {
                  v111 = (unint64_t)(-2 - 0x5555555555555555 * (v110 >> 4)) >> 1;
                  v112 = (unsigned int *)(v7 + 48 * v111);
                  v113 = *(_DWORD *)v97;
                  if (*v112 < *(_DWORD *)v97)
                  {
                    v167 = *(_BYTE *)(v97 + 6);
                    v166 = *(_WORD *)(v97 + 4);
                    v145 = *(_OWORD *)(v97 + 8);
                    v114 = *(_QWORD *)(v97 + 24);
                    *(_QWORD *)(v97 + 16) = 0;
                    *(_QWORD *)(v97 + 24) = 0;
                    *v101 = 0;
                    v180 = *(_DWORD *)(v97 + 40);
                    v173 = *v103;
                    do
                    {
                      v115 = v112;
                      v116 = *v112;
                      *(_DWORD *)(v97 + 3) = *(unsigned int *)((char *)v115 + 3);
                      *(_DWORD *)v97 = v116;
                      v117 = *(void **)(v97 + 8);
                      if (v117)
                      {
                        *(_QWORD *)(v97 + 16) = v117;
                        operator delete(v117);
                        *(_QWORD *)(v97 + 8) = 0;
                        *(_QWORD *)(v97 + 16) = 0;
                        *(_QWORD *)(v97 + 24) = 0;
                      }
                      *(_OWORD *)(v97 + 8) = *(_OWORD *)(v115 + 2);
                      *(_QWORD *)(v97 + 24) = *((_QWORD *)v115 + 3);
                      *((_QWORD *)v115 + 1) = 0;
                      *((_QWORD *)v115 + 2) = 0;
                      *((_QWORD *)v115 + 3) = 0;
                      v118 = *((_QWORD *)v115 + 4);
                      *(_DWORD *)(v97 + 40) = v115[10];
                      *(_QWORD *)(v97 + 32) = v118;
                      if (!v111)
                        break;
                      v111 = (v111 - 1) >> 1;
                      v112 = (unsigned int *)(v7 + 48 * v111);
                      v97 = (uint64_t)v115;
                    }
                    while (*v112 < v113);
                    *v115 = v113;
                    *((_WORD *)v115 + 2) = v166;
                    *((_BYTE *)v115 + 6) = v167;
                    v119 = (void *)*((_QWORD *)v115 + 1);
                    if (v119)
                    {
                      *((_QWORD *)v115 + 2) = v119;
                      operator delete(v119);
                    }
                    *(_OWORD *)(v115 + 2) = v145;
                    *((_QWORD *)v115 + 3) = v114;
                    *((_QWORD *)v115 + 4) = v173;
                    v115[10] = v180;
                    goto LABEL_142;
                  }
                }
              }
            }
            v93 -= 12;
            if ((unint64_t)v92-- <= 2)
              return;
            continue;
          }
        }
        v12 = (int *)(v7 + 48 * (v11 >> 1));
        if ((unint64_t)v10 < 0x1801)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Property_Traits *>((unsigned int *)(v7 + 48 * (v11 >> 1)), (unsigned int *)v7, a2 - 12);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Property_Traits *>((unsigned int *)v7, (unsigned int *)(v7 + 48 * (v11 >> 1)), a2 - 12);
          v13 = v7 + 48 * (v11 >> 1);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Property_Traits *>(v137, (unsigned int *)(v13 - 48), a2 - 24);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Property_Traits *>(v136, (unsigned int *)(v13 + 48), a2 - 36);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Property_Traits *>((unsigned int *)(v13 - 48), (unsigned int *)v13, (unsigned int *)(v13 + 48));
          *(_DWORD *)((char *)&v152 + 3) = *(_DWORD *)(v7 + 3);
          LODWORD(v152) = *(_DWORD *)v7;
          v14 = *(_OWORD *)(v7 + 8);
          v15 = *(_QWORD *)(v7 + 24);
          *v8 = 0;
          v8[1] = 0;
          v8[2] = 0;
          v168 = *(_QWORD *)v9;
          v175 = v9[2];
          v16 = *v12;
          *(_DWORD *)(v7 + 3) = *(int *)((char *)v12 + 3);
          *(_DWORD *)v7 = v16;
          *(_OWORD *)(v7 + 8) = *(_OWORD *)(v13 + 8);
          v17 = *(_QWORD *)(v13 + 32);
          *(_QWORD *)(v7 + 24) = *(_QWORD *)(v13 + 24);
          *(_QWORD *)(v13 + 24) = 0;
          v9[2] = *(_DWORD *)(v13 + 40);
          *(_QWORD *)v9 = v17;
          *v12 = v152;
          *(int *)((char *)v12 + 3) = *(_DWORD *)((char *)&v152 + 3);
          *(_OWORD *)(v13 + 8) = v14;
          *(_QWORD *)(v13 + 24) = v15;
          *(_DWORD *)(v13 + 40) = v175;
          *(_QWORD *)(v13 + 32) = v168;
        }
        v18 = a3 - 1;
        if ((a4 & 1) == 0)
        {
          v19 = *(_DWORD *)v7;
          if (*(_DWORD *)(v7 - 48) < *(_DWORD *)v7)
            goto LABEL_11;
          v37 = *(_OWORD *)(v7 + 8);
          v154 = *(_WORD *)(v7 + 4);
          v160 = *(_BYTE *)(v7 + 6);
          v38 = *(_QWORD *)(v7 + 24);
          *(_QWORD *)(v7 + 8) = 0;
          *(_QWORD *)(v7 + 16) = 0;
          v39 = *(_QWORD *)(v7 + 32);
          *(_QWORD *)(v7 + 24) = 0;
          v177 = *(_DWORD *)(v7 + 40);
          v170 = v39;
          if (v19 >= *(a2 - 12))
          {
            v41 = (unsigned int *)(v7 + 48);
            do
            {
              a1 = v41;
              if (v41 >= a2)
                break;
              v41 += 12;
            }
            while (v19 >= *a1);
          }
          else
          {
            a1 = (unsigned int *)v7;
            do
            {
              v40 = a1[12];
              a1 += 12;
            }
            while (v19 >= v40);
          }
          v42 = v18;
          v43 = (unint64_t)a2;
          if (a1 < a2)
          {
            v43 = (unint64_t)a2;
            do
            {
              v44 = *(_DWORD *)(v43 - 48);
              v43 -= 48;
            }
            while (v19 < v44);
          }
          v147 = v37;
          while ((unint64_t)a1 < v43)
          {
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Live_Property_Traits *&,AMCP::Live_Property_Traits *&>((uint64_t)a1, v43);
            do
            {
              v45 = a1[12];
              a1 += 12;
            }
            while (v19 >= v45);
            do
            {
              v46 = *(_DWORD *)(v43 - 48);
              v43 -= 48;
            }
            while (v19 < v46);
          }
          a3 = v42;
          if (a1 - 12 != (unsigned int *)v7)
          {
            v47 = *(a1 - 12);
            *(_DWORD *)(v7 + 3) = *(unsigned int *)((char *)a1 - 45);
            *(_DWORD *)v7 = v47;
            v48 = *(void **)(v7 + 8);
            if (v48)
            {
              *(_QWORD *)(v7 + 16) = v48;
              operator delete(v48);
              *(_QWORD *)(v7 + 8) = 0;
              *(_QWORD *)(v7 + 16) = 0;
              *(_QWORD *)(v7 + 24) = 0;
            }
            v49 = a1 - 10;
            *(_OWORD *)(v7 + 8) = *(_OWORD *)(a1 - 10);
            *(_QWORD *)(v7 + 24) = *((_QWORD *)a1 - 3);
            *(_QWORD *)v49 = 0;
            *((_QWORD *)v49 + 1) = 0;
            *((_QWORD *)v49 + 2) = 0;
            v50 = *((_QWORD *)a1 - 2);
            *(_DWORD *)(v7 + 40) = *(a1 - 2);
            *(_QWORD *)(v7 + 32) = v50;
          }
          *(a1 - 12) = v19;
          *((_BYTE *)a1 - 42) = v160;
          *((_WORD *)a1 - 22) = v154;
          v51 = (void *)*((_QWORD *)a1 - 5);
          if (v51)
          {
            *((_QWORD *)a1 - 4) = v51;
            operator delete(v51);
          }
          a4 = 0;
          *(_OWORD *)(a1 - 10) = v147;
          *((_QWORD *)a1 - 3) = v38;
          *(a1 - 2) = v177;
          *((_QWORD *)a1 - 2) = v170;
          continue;
        }
        v19 = *(_DWORD *)v7;
LABEL_11:
        v146 = v18;
        v153 = *(_WORD *)v138;
        v159 = *((_BYTE *)v138 + 2);
        v142 = *(_OWORD *)(v7 + 8);
        v20 = *(_QWORD *)(v7 + 24);
        v8[1] = 0;
        v8[2] = 0;
        *v8 = 0;
        v169 = *(_QWORD *)v9;
        v21 = (unsigned int *)v7;
        v176 = v9[2];
        do
        {
          v22 = v21;
          v23 = v21[12];
          v21 += 12;
        }
        while (v23 < v19);
        v24 = a2;
        if (v22 == (unsigned int *)v7)
        {
          do
          {
            if (v21 >= a2)
              break;
            v26 = *(a2 - 12);
            a2 -= 12;
          }
          while (v26 >= v19);
        }
        else
        {
          do
          {
            v25 = *(a2 - 12);
            a2 -= 12;
          }
          while (v25 >= v19);
        }
        a1 = v21;
        if (v21 < a2)
        {
          v27 = (unint64_t)a2;
          do
          {
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Live_Property_Traits *&,AMCP::Live_Property_Traits *&>((uint64_t)a1, v27);
            do
            {
              v28 = a1[12];
              a1 += 12;
            }
            while (v28 < v19);
            do
            {
              v29 = *(_DWORD *)(v27 - 48);
              v27 -= 48;
            }
            while (v29 >= v19);
          }
          while ((unint64_t)a1 < v27);
        }
        if (a1 - 12 != (unsigned int *)v7)
        {
          v30 = *(a1 - 12);
          *(_DWORD *)(v7 + 3) = *(unsigned int *)((char *)a1 - 45);
          *(_DWORD *)v7 = v30;
          v31 = *(void **)(v7 + 8);
          if (v31)
          {
            *(_QWORD *)(v7 + 16) = v31;
            operator delete(v31);
            *v8 = 0;
            v8[1] = 0;
            v8[2] = 0;
          }
          v32 = a1 - 10;
          *(_OWORD *)(v7 + 8) = *(_OWORD *)(a1 - 10);
          *(_QWORD *)(v7 + 24) = *((_QWORD *)a1 - 3);
          *(_QWORD *)v32 = 0;
          *((_QWORD *)v32 + 1) = 0;
          *((_QWORD *)v32 + 2) = 0;
          v33 = *((_QWORD *)a1 - 2);
          v9[2] = *(a1 - 2);
          *(_QWORD *)v9 = v33;
        }
        *(a1 - 12) = v19;
        *((_BYTE *)a1 - 42) = v159;
        *((_WORD *)a1 - 22) = v153;
        v34 = (void *)*((_QWORD *)a1 - 5);
        if (v34)
        {
          *((_QWORD *)a1 - 4) = v34;
          operator delete(v34);
        }
        *(_OWORD *)(a1 - 10) = v142;
        *((_QWORD *)a1 - 3) = v20;
        *(a1 - 2) = v176;
        *((_QWORD *)a1 - 2) = v169;
        v35 = v21 >= a2;
        a2 = v24;
        a3 = v146;
        if (!v35)
        {
LABEL_36:
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Property_Traits *,false>(v7, a1 - 12, v146, a4 & 1);
          a4 = 0;
          continue;
        }
        v36 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Property_Traits *>((unsigned int *)v7, a1 - 12);
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Property_Traits *>(a1, a2))
        {
          if (v36)
            continue;
          goto LABEL_36;
        }
        a2 = a1 - 12;
        if (!v36)
          goto LABEL_2;
        return;
    }
  }
}

void std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Live_Property_Traits *&,AMCP::Live_Property_Traits *&>(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  void *v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  LODWORD(v12) = *(_DWORD *)a1;
  *(_DWORD *)((char *)&v12 + 3) = *(_DWORD *)(a1 + 3);
  v3 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v5 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = 0;
  v10 = v4;
  v11 = *(_DWORD *)(a1 + 40);
  LODWORD(v4) = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 3) = *(_DWORD *)(a2 + 3);
  *(_DWORD *)a1 = v4;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v6 = a2 + 32;
  v7 = *(_DWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = v7;
  *(_DWORD *)a2 = v12;
  *(_DWORD *)(a2 + 3) = *(_DWORD *)((char *)&v12 + 3);
  v8 = *(void **)(a2 + 8);
  if (v8)
  {
    *(_QWORD *)(a2 + 16) = v8;
    v9 = v3;
    operator delete(v8);
    v3 = v9;
  }
  *(_OWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 24) = v5;
  *(_QWORD *)v6 = v10;
  *(_DWORD *)(v6 + 8) = v11;
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Property_Traits *>(unsigned int *a1, unsigned int *a2, unsigned int *a3)
{
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;

  v5 = a1;
  v6 = *a2;
  v7 = *a3;
  if (*a2 < *a1)
  {
    if (v7 >= v6)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Live_Property_Traits *&,AMCP::Live_Property_Traits *&>((uint64_t)a1, (uint64_t)a2);
      if (*a3 >= *a2)
        return;
      a1 = a2;
    }
    v8 = (uint64_t)a3;
    goto LABEL_9;
  }
  if (v7 < v6)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Live_Property_Traits *&,AMCP::Live_Property_Traits *&>((uint64_t)a2, (uint64_t)a3);
    if (*a2 < *v5)
    {
      a1 = v5;
      v8 = (uint64_t)a2;
LABEL_9:
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Live_Property_Traits *&,AMCP::Live_Property_Traits *&>((uint64_t)a1, v8);
    }
  }
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Property_Traits *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Property_Traits *>(a1, a2, a3);
  if (*a4 < *a3)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Live_Property_Traits *&,AMCP::Live_Property_Traits *&>((uint64_t)a3, (uint64_t)a4);
    if (*a3 < *a2)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Live_Property_Traits *&,AMCP::Live_Property_Traits *&>((uint64_t)a2, (uint64_t)a3);
      if (*a2 < *a1)
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Live_Property_Traits *&,AMCP::Live_Property_Traits *&>((uint64_t)a1, (uint64_t)a2);
    }
  }
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Property_Traits *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Property_Traits *>(a1, a2, a3, a4);
  if (*a5 < *a4)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Live_Property_Traits *&,AMCP::Live_Property_Traits *&>((uint64_t)a4, (uint64_t)a5);
    if (*a4 < *a3)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Live_Property_Traits *&,AMCP::Live_Property_Traits *&>((uint64_t)a3, (uint64_t)a4);
      if (*a3 < *a2)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Live_Property_Traits *&,AMCP::Live_Property_Traits *&>((uint64_t)a2, (uint64_t)a3);
        if (*a2 < *a1)
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Live_Property_Traits *&,AMCP::Live_Property_Traits *&>((uint64_t)a1, (uint64_t)a2);
      }
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Property_Traits *>(unsigned int *a1, unsigned int *a2)
{
  unint64_t v4;
  _BOOL8 result;
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  void *v11;
  uint64_t v12;
  char *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unsigned int v18;
  void **v19;
  uint64_t v20;
  unsigned int *v21;
  void *v22;
  __int128 v23;
  uint64_t v24;
  unsigned int v25;
  __int16 v26;
  char v27;

  v4 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)a1) >> 4);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(a2 - 12) < *a1)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Live_Property_Traits *&,AMCP::Live_Property_Traits *&>((uint64_t)a1, (uint64_t)(a2 - 12));
        return 1;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Property_Traits *>(a1, a1 + 12, a2 - 12);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Property_Traits *>(a1, a1 + 12, a1 + 24, a2 - 12);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Property_Traits *>(a1, a1 + 12, a1 + 24, a1 + 36, a2 - 12);
      return 1;
    default:
      v6 = a1 + 24;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Property_Traits *>(a1, a1 + 12, a1 + 24);
      v7 = a1 + 36;
      if (a1 + 36 == a2)
        return 1;
      v8 = 0;
      v9 = 0;
      break;
  }
  while (1)
  {
    v10 = *v7;
    if (*v7 < *v6)
    {
      v26 = *((_WORD *)v7 + 2);
      v27 = *((_BYTE *)v7 + 6);
      v11 = (void *)*((_QWORD *)v7 + 1);
      v23 = *((_OWORD *)v7 + 1);
      *((_QWORD *)v7 + 1) = 0;
      *((_QWORD *)v7 + 2) = 0;
      *((_QWORD *)v7 + 3) = 0;
      v24 = *((_QWORD *)v7 + 4);
      v12 = v8;
      v25 = v7[10];
      while (1)
      {
        v13 = (char *)a1 + v12;
        *((_DWORD *)v13 + 36) = *(unsigned int *)((char *)a1 + v12 + 96);
        *(_DWORD *)(v13 + 147) = *(unsigned int *)((char *)a1 + v12 + 99);
        v14 = *(void **)((char *)a1 + v12 + 152);
        if (v14)
        {
          *((_QWORD *)v13 + 20) = v14;
          operator delete(v14);
          *((_QWORD *)v13 + 21) = 0;
        }
        *(_OWORD *)(v13 + 152) = *(_OWORD *)(v13 + 104);
        *((_QWORD *)v13 + 13) = 0;
        *((_QWORD *)v13 + 14) = 0;
        v15 = *((_QWORD *)v13 + 15);
        v16 = *((_QWORD *)v13 + 16);
        *((_QWORD *)v13 + 15) = 0;
        *((_QWORD *)v13 + 21) = v15;
        *((_QWORD *)v13 + 22) = v16;
        *((_DWORD *)v13 + 46) = *((_DWORD *)v13 + 34);
        if (v12 == -96)
          break;
        v17 = (char *)a1 + v12;
        v18 = *(unsigned int *)((char *)a1 + v12 + 48);
        v12 -= 48;
        if (v10 >= v18)
        {
          v19 = (void **)(v17 + 104);
          v20 = (uint64_t)a1 + v12 + 144;
          v21 = (unsigned int *)(v17 + 128);
          goto LABEL_14;
        }
      }
      v19 = (void **)(a1 + 2);
      v21 = a1 + 8;
      v20 = (uint64_t)a1;
LABEL_14:
      *(_DWORD *)v20 = v10;
      *(_WORD *)(v20 + 4) = v26;
      *(_BYTE *)(v20 + 6) = v27;
      v22 = *v19;
      if (*v19)
      {
        *(_QWORD *)(v20 + 16) = v22;
        operator delete(v22);
      }
      *v19 = v11;
      *(_OWORD *)(v20 + 16) = v23;
      *(_QWORD *)v21 = v24;
      v21[2] = v25;
      if (++v9 == 8)
        return v7 + 12 == a2;
    }
    v6 = v7;
    v8 += 48;
    v7 += 12;
    if (v7 == a2)
      return 1;
  }
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<AMCP::Live_Property_Traits>,AMCP::Live_Property_Traits*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      v5 = *(void **)(v3 - 40);
      if (v5)
      {
        *(_QWORD *)(v3 - 32) = v5;
        operator delete(v5);
      }
      v3 -= 48;
    }
  }
  return a1;
}

_QWORD *std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned int>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B57F0C84(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::IO_Core::IOContext_Core::~IOContext_Core(AMCP::IO_Core::IOContext_Core *this)
{
  AMCP::IO_Core::IOContext_Core::~IOContext_Core(this);
  JUMPOUT(0x1B5E50688);
}

{
  AMCP::Utility::Dispatch_Queue *v2;
  void *v3;
  std::__shared_weak_count *v4;

  v2 = (AMCP::IO_Core::IOContext_Core *)((char *)this + 272);
  AMCP::Utility::Dispatch_Queue::flush_all_work((AMCP::IO_Core::IOContext_Core *)((char *)this + 272));
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue(v2);
  std::mutex::~mutex((std::mutex *)((char *)this + 200));
  v3 = (void *)*((_QWORD *)this + 22);
  if (v3)
  {
    *((_QWORD *)this + 23) = v3;
    operator delete(v3);
  }
  std::unique_ptr<AMCP::IO_Core::IO_Thread>::reset[abi:ne180100]((uint64_t *)this + 20);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 144);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 128);
  caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((AMCP::IO_Core::IOContext_Core *)((char *)this + 64));
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  AMCP::IO_Core::Node::~Node(this);
}

void AMCP::IO_Core::IOContext_Core::maybe_update_running_iocontext(AMCP::IO_Core::IOContext_Core *this)
{
  std::mutex *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  AMCP::Log::Scope_Registry *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  __n128 *v18;
  unint64_t v19;
  __n128 v20;
  std::__shared_weak_count *size;
  unint64_t *v22;
  unint64_t v23;
  AMCP::Log::Scope_Registry *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  __int128 v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  _BOOL4 v34;
  std::logic_error *v35;
  std::__libcpp_refstring *p_imp;
  void **v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  __n128 v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  double actual_sample_rate;
  unsigned int v61;
  double v62;
  double v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  int v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  const char **v84;
  uint64_t v85;
  unsigned __int8 v86;
  NSObject *v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t (***v104)();
  uint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  NSObject *v115;
  _opaque_pthread_t *v116;
  mach_port_t v117;
  void *exception;
  NSObject *v119;
  _opaque_pthread_t *v120;
  mach_port_t v121;
  void *v122;
  NSObject *v123;
  _opaque_pthread_t *v124;
  mach_port_t v125;
  void *v126;
  __n128 v127;
  __int128 v128;
  uint64_t v129;
  std::__shared_weak_count *v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  std::logic_error v133;
  uint64_t v134;
  std::string v135;
  uint64_t v136;
  std::logic_error v137;
  char v138;
  uint64_t (**v139)();
  __int128 v140;
  __n128 v141;
  std::string v142;
  __n128 *v143;
  std::__shared_weak_count *v144;
  uint64_t (**v145)();
  __int128 v146;
  uint64_t (***v147)();
  std::logic_error v148;
  void *v149;
  uint64_t v150;
  std::__shared_weak_count *v151;
  uint64_t v152;
  int v153;
  uint8_t buf[8];
  __int128 v155;
  __int128 v156;
  const char *v157;
  int v158;
  const char **v159;
  uint64_t v160;

  v160 = *MEMORY[0x1E0C80C00];
  v2 = (std::mutex *)((char *)this + 200);
  std::mutex::lock((std::mutex *)((char *)this + 200));
  v3 = *((_QWORD *)this + 16);
  if (v3)
  {
    v5 = *(_QWORD *)(v3 + 96);
    v4 = *(std::__shared_weak_count **)(v3 + 104);
    v131 = v5;
    v132 = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
  }
  else
  {
    v5 = 0;
    v131 = 0;
    v132 = 0;
  }
  AMCP::IO_Core::IOContext_Core::create_manifest((AMCP::IO_Core::IOContext_Core *)&v129, (uint64_t)this);
  if (v129)
  {
    v9 = *(_QWORD *)(v129 + 72);
    v10 = *(std::__shared_weak_count **)(v129 + 80);
    v143 = (__n128 *)v9;
    v144 = v10;
    if (v10)
    {
      v11 = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    if (!v9)
    {
      AMCP::Log::Scope_Registry::get(v8);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v115 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v115, OS_LOG_TYPE_ERROR))
      {
        v116 = pthread_self();
        v117 = pthread_mach_thread_np(v116);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v117;
        LOWORD(v155) = 2080;
        *(_QWORD *)((char *)&v155 + 2) = "IOContext_Core.cpp";
        WORD5(v155) = 1024;
        HIDWORD(v155) = 761;
        LOWORD(v156) = 2080;
        *(_QWORD *)((char *)&v156 + 2) = "not (inventory)";
        _os_log_error_impl(&dword_1B57BA000, v115, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v137);
      exception = __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)&v135);
      std::logic_error::logic_error(&v133, &v135);
      v133.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      std::logic_error::logic_error(&v148, &v133);
      v150 = 0;
      v151 = 0;
      v152 = 0;
      v153 = -1;
      v148.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
      v149 = &unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v148);
      *((_QWORD *)&v156 + 1) = "void AMCP::IO_Core::IOContext_Core::cache_min_max_buffer_frame_size(const std::shared_ptr<Manifest> &)";
      v157 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/IOContext_Core.cpp";
      v158 = 761;
      applesauce::backtrace::snapshot_N<64>::snapshot_N(&v142.__r_.__value_.__l.__data_);
      v140 = *(_OWORD *)&v142.__r_.__value_.__l.__data_;
      v139 = off_1E69A20A0;
      v141.n128_u64[0] = v142.__r_.__value_.__r.__words[2];
      memset(&v142, 0, sizeof(v142));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v139);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
    }
    v13 = *(_QWORD *)(v9 + 96);
    v14 = *(std::__shared_weak_count **)(v9 + 104);
    if (v14)
    {
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
      do
        v17 = __ldaxr(v15);
      while (__stlxr(v17 - 1, v15));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    if (!v13)
    {
      AMCP::Log::Scope_Registry::get(v8);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v119 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v119, OS_LOG_TYPE_ERROR))
      {
        v120 = pthread_self();
        v121 = pthread_mach_thread_np(v120);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v121;
        LOWORD(v155) = 2080;
        *(_QWORD *)((char *)&v155 + 2) = "IOContext_Core.cpp";
        WORD5(v155) = 1024;
        HIDWORD(v155) = 762;
        LOWORD(v156) = 2080;
        *(_QWORD *)((char *)&v156 + 2) = "not (inventory->get_master_timebase())";
        _os_log_error_impl(&dword_1B57BA000, v119, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v137);
      v122 = __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)&v135);
      std::logic_error::logic_error(&v133, &v135);
      v133.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      std::logic_error::logic_error(&v148, &v133);
      v150 = 0;
      v151 = 0;
      v152 = 0;
      v153 = -1;
      v148.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
      v149 = &unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v148);
      *((_QWORD *)&v156 + 1) = "void AMCP::IO_Core::IOContext_Core::cache_min_max_buffer_frame_size(const std::shared_ptr<Manifest> &)";
      v157 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/IOContext_Core.cpp";
      v158 = 762;
      applesauce::backtrace::snapshot_N<64>::snapshot_N(&v142.__r_.__value_.__l.__data_);
      v140 = *(_OWORD *)&v142.__r_.__value_.__l.__data_;
      v139 = off_1E69A20A0;
      v141.n128_u64[0] = v142.__r_.__value_.__r.__words[2];
      memset(&v142, 0, sizeof(v142));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v139);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v122, (uint64_t)buf);
    }
    v18 = v143;
    v19 = v143[5].n128_u64[0];
    v20 = v143[6];
    *(__n128 *)&v135.__r_.__value_.__l.__data_ = v20;
    size = (std::__shared_weak_count *)v20.n128_u64[1];
    if (v20.n128_u64[1])
    {
      v22 = (unint64_t *)(v20.n128_u64[1] + 8);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    v127 = v20;
    v24 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v20.n128_u64[0]
                                                                                           + 224))(v20.n128_u64[0], v20);
    if (size)
    {
      v26 = (unint64_t *)&size->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    LODWORD(v139) = 2;
    v140 = v25;
    v141 = v127;
    v28 = *(uint64_t **)(v19 + 16);
    if (v28)
    {
      do
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v28[2] + 224))(v28[2]);
        v30 = *((_OWORD *)v28 + 1);
        v31 = v28[3];
        if (v31)
        {
          v32 = (unint64_t *)(v31 + 8);
          do
            v33 = __ldxr(v32);
          while (__stxr(v33 + 1, v32));
        }
        *(_DWORD *)buf = 2;
        v155 = v29;
        v156 = v30;
        AMCP::DAL::DAL_Time_Delta::translate_time_delta((uint64_t)&v148, (AMCP::DAL::DAL_Time_Delta *)buf, (uint64_t *)&v135);
        if (((uint64_t)v148.__vftable & 2) == 0)
          AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)&v148);
        v34 = AMCP::DAL::DAL_Time_Delta::operator<((AMCP::DAL::DAL_Time_Delta *)&v148, (uint64_t)&v139);
        if (v34)
          v35 = &v148;
        else
          v35 = (std::logic_error *)&v139;
        LODWORD(v139) = v35->__vftable;
        p_imp = &v148.__imp_;
        if (!v34)
          p_imp = (std::__libcpp_refstring *)&v140;
        *(std::__libcpp_refstring *)&v140 = (std::__libcpp_refstring)p_imp->__imp_;
        v37 = &v149;
        if (!v34)
          v37 = (void **)&v140 + 1;
        *((_QWORD *)&v140 + 1) = *v37;
        v38 = &v150;
        if (!v34)
          v38 = (uint64_t *)&v141;
        v39 = *v38;
        v40 = (uint64_t *)&v151;
        if (!v34)
          v40 = &v141.n128_i64[1];
        v24 = (AMCP::Log::Scope_Registry *)std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100](&v141, v39, *v40);
        v41 = v151;
        if (v151)
        {
          v42 = (unint64_t *)&v151->__shared_owners_;
          do
            v43 = __ldaxr(v42);
          while (__stlxr(v43 - 1, v42));
          if (!v43)
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
        }
        v44 = (std::__shared_weak_count *)*((_QWORD *)&v156 + 1);
        if (*((_QWORD *)&v156 + 1))
        {
          v45 = (unint64_t *)(*((_QWORD *)&v156 + 1) + 8);
          do
            v46 = __ldaxr(v45);
          while (__stlxr(v46 - 1, v45));
          if (!v46)
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
        }
        v28 = (uint64_t *)*v28;
      }
      while (v28);
      size = (std::__shared_weak_count *)v135.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      v47 = (unint64_t *)&size->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v49 = v141;
    if (v141.n128_u64[1])
    {
      v50 = (unint64_t *)(v141.n128_u64[1] + 8);
      do
        v51 = __ldxr(v50);
      while (__stxr(v51 + 1, v50));
    }
    v53 = v18[6].n128_i64[0];
    v52 = (std::__shared_weak_count *)v18[6].n128_u64[1];
    if (v52)
    {
      v54 = (unint64_t *)&v52->__shared_owners_;
      do
        v55 = __ldxr(v54);
      while (__stxr(v55 + 1, v54));
      do
        v56 = __ldaxr(v54);
      while (__stlxr(v56 - 1, v54));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    if (v49.n128_u64[1])
    {
      v57 = (unint64_t *)(v49.n128_u64[1] + 8);
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v49.n128_u64[1] + 16))(v49.n128_u64[1]);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v49.n128_u64[1]);
      }
    }
    if (v49.n128_u64[0] != v53)
    {
      AMCP::Log::Scope_Registry::get(v24);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v123 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v123, OS_LOG_TYPE_ERROR))
      {
        v124 = pthread_self();
        v125 = pthread_mach_thread_np(v124);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v125;
        LOWORD(v155) = 2080;
        *(_QWORD *)((char *)&v155 + 2) = "IOContext_Core.cpp";
        WORD5(v155) = 1024;
        HIDWORD(v155) = 764;
        LOWORD(v156) = 2080;
        *(_QWORD *)((char *)&v156 + 2) = "not (max_timebase_size.get_clock() == inventory->get_master_timebase())";
        _os_log_error_impl(&dword_1B57BA000, v123, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v138);
      v126 = __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)&v142);
      std::logic_error::logic_error(&v137, &v142);
      v137.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      std::logic_error::logic_error(&v148, &v137);
      v150 = 0;
      v151 = 0;
      v152 = 0;
      v153 = -1;
      v148.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
      v149 = &unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v148);
      *((_QWORD *)&v156 + 1) = "void AMCP::IO_Core::IOContext_Core::cache_min_max_buffer_frame_size(const std::shared_ptr<Manifest> &)";
      v157 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/IOContext_Core.cpp";
      v158 = 764;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v133);
      v135.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A20A0;
      *(std::logic_error *)&v135.__r_.__value_.__r.__words[1] = v133;
      v136 = v134;
      v133.__vftable = 0;
      v133.__imp_.__imp_ = 0;
      v134 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v135);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v126, (uint64_t)buf);
    }
    if ((v139 & 2) == 0)
      AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)&v139);
    v59 = vcvtmd_s64_f64(*(double *)&v140);
    if (v59 <= 4096)
    {
      if ((v139 & 2) == 0)
      {
        AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)&v139);
        LODWORD(v59) = vcvtmd_s64_f64(*(double *)&v140);
      }
    }
    else
    {
      LODWORD(v59) = 4096;
    }
    actual_sample_rate = AMCP::IO_Core::IOContext_Core::get_actual_sample_rate(this);
    v61 = vcvtpd_s64_f64(actual_sample_rate * 0.0003);
    if (actual_sample_rate == 0.0)
      v61 = 16;
    *((_DWORD *)this + 152) = v61;
    *((_DWORD *)this + 153) = v59;
    v62 = (double)v61;
    v63 = round(*((double *)this + 74));
    if (v63 < (double)v61 || (v62 = (double)v59, v63 > (double)v59))
      *((double *)this + 74) = v62;
    v64 = (std::__shared_weak_count *)v141.n128_u64[1];
    if (v141.n128_u64[1])
    {
      v65 = (unint64_t *)(v141.n128_u64[1] + 8);
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
    v67 = v144;
    if (v144)
    {
      v68 = (unint64_t *)&v144->__shared_owners_;
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
    }
    v70 = caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load(*(_QWORD *)(*((_QWORD *)this + 20) + 32));
    if (v70)
    {
      if (v5)
      {
        v71 = *(_QWORD *)(v129 + 72);
        v72 = *(std::__shared_weak_count **)(v129 + 80);
        if (v72)
        {
          v73 = (unint64_t *)&v72->__shared_owners_;
          do
            v74 = __ldxr(v73);
          while (__stxr(v74 + 1, v73));
        }
        v75 = *(_QWORD *)(v71 + 96);
        v76 = *(std::__shared_weak_count **)(v71 + 104);
        if (v76)
        {
          v77 = (unint64_t *)&v76->__shared_owners_;
          do
            v78 = __ldxr(v77);
          while (__stxr(v78 + 1, v77));
          do
            v79 = __ldaxr(v77);
          while (__stlxr(v79 - 1, v77));
          if (!v79)
          {
            ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
            std::__shared_weak_count::__release_weak(v76);
          }
        }
        if (v72)
        {
          v80 = (unint64_t *)&v72->__shared_owners_;
          do
            v81 = __ldaxr(v80);
          while (__stlxr(v81 - 1, v80));
          if (!v81)
          {
            ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
            std::__shared_weak_count::__release_weak(v72);
          }
        }
        if (v5 != v75)
        {
          AMCP::IO_Core::IOContext_Core::pause((uint64_t)this, 0);
          AMCP::IO_Core::IOContext_Core::resume((uint64_t)this, 0);
          goto LABEL_159;
        }
      }
      std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v128, *((_QWORD *)this + 6), *((std::__shared_weak_count **)this + 7));
      v146 = v128;
      v128 = 0uLL;
      v145 = &off_1E696D8C0;
      v147 = &v145;
      std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(buf, *((_QWORD *)this + 6), *((std::__shared_weak_count **)this + 7));
      *((_QWORD *)&v155 + 1) = v129;
      *(_QWORD *)&v156 = v130;
      if (v130)
      {
        v82 = (unint64_t *)&v130->__shared_owners_;
        do
          v83 = __ldxr(v82);
        while (__stxr(v83 + 1, v82));
      }
      DWORD2(v156) = v70;
      v84 = &v157;
      v85 = (uint64_t)v147;
      if (v147)
      {
        if (v147 == &v145)
        {
          v159 = &v157;
          ((void (*)(uint64_t, _QWORD *))v145[3])((uint64_t)&v145, &v157);
LABEL_121:
          v86 = atomic_load((unsigned __int8 *)this + 304);
          if ((v86 & 1) != 0)
            atomic_store(1u, (unsigned __int8 *)this + 305);
          v87 = *((_QWORD *)this + 34);
          v88 = operator new();
          v89 = (_QWORD *)v88;
          v90 = v155;
          *(_QWORD *)v88 = *(_QWORD *)buf;
          *(_QWORD *)(v88 + 8) = v90;
          if (v90)
          {
            v91 = (unint64_t *)(v90 + 8);
            do
              v92 = __ldxr(v91);
            while (__stxr(v92 + 1, v91));
          }
          v93 = v156;
          *(_QWORD *)(v88 + 16) = *((_QWORD *)&v155 + 1);
          *(_QWORD *)(v88 + 24) = v93;
          if (v93)
          {
            v94 = (unint64_t *)(v93 + 8);
            do
              v95 = __ldxr(v94);
            while (__stxr(v95 + 1, v94));
          }
          *(_DWORD *)(v88 + 32) = DWORD2(v156);
          v96 = (uint64_t)v159;
          if (v159)
          {
            if (v159 == &v157)
            {
              v89[8] = v89 + 5;
              (*((void (**)(const char **))v157 + 3))(&v157);
LABEL_134:
              v148.__vftable = 0;
              dispatch_async_f(v87, v89, (dispatch_function_t)applesauce::dispatch::v1::async<AMCP::IO_Core::IOContext_Core::enqueue_manifest_async(std::shared_ptr<AMCP::Graph::Manifest> const&,AMCP::Transport_State,std::function<void ()(std::shared_ptr<AMCP::Graph::Manifest>)>)::$_0 &>(dispatch_queue_s *,AMCP::IO_Core::IOContext_Core::enqueue_manifest_async(std::shared_ptr<AMCP::Graph::Manifest> const&,AMCP::Transport_State,std::function<void ()(std::shared_ptr<AMCP::Graph::Manifest>)>)::$_0 &)::{lambda(void *)#1}::__invoke);
              std::unique_ptr<AMCP::IO_Core::IOContext_Core::enqueue_manifest_async(std::shared_ptr<AMCP::Graph::Manifest> const&,AMCP::Transport_State,std::function<void ()(std::shared_ptr<AMCP::Graph::Manifest>)>)::$_0,std::default_delete<AMCP::IO_Core::IOContext_Core::enqueue_manifest_async(std::shared_ptr<AMCP::Graph::Manifest> const&,AMCP::Transport_State,std::function<void ()(std::shared_ptr<AMCP::Graph::Manifest>)>)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)&v148);
              if (v159 == &v157)
              {
                v97 = 4;
              }
              else
              {
                if (!v159)
                {
LABEL_139:
                  v98 = (std::__shared_weak_count *)v156;
                  if ((_QWORD)v156)
                  {
                    v99 = (unint64_t *)(v156 + 8);
                    do
                      v100 = __ldaxr(v99);
                    while (__stlxr(v100 - 1, v99));
                    if (!v100)
                    {
                      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
                      std::__shared_weak_count::__release_weak(v98);
                    }
                  }
                  v101 = (std::__shared_weak_count *)v155;
                  if ((_QWORD)v155)
                  {
                    v102 = (unint64_t *)(v155 + 8);
                    do
                      v103 = __ldaxr(v102);
                    while (__stlxr(v103 - 1, v102));
                    if (!v103)
                    {
                      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
                      std::__shared_weak_count::__release_weak(v101);
                    }
                  }
                  v104 = v147;
                  if (v147 == &v145)
                  {
                    v105 = 4;
                    v104 = &v145;
                  }
                  else
                  {
                    if (!v147)
                    {
LABEL_154:
                      v106 = (std::__shared_weak_count *)*((_QWORD *)&v128 + 1);
                      if (*((_QWORD *)&v128 + 1))
                      {
                        v107 = (unint64_t *)(*((_QWORD *)&v128 + 1) + 8);
                        do
                          v108 = __ldaxr(v107);
                        while (__stlxr(v108 - 1, v107));
                        if (!v108)
                        {
                          ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
                          std::__shared_weak_count::__release_weak(v106);
                        }
                      }
                      goto LABEL_159;
                    }
                    v105 = 5;
                  }
                  (*v104)[v105]();
                  goto LABEL_154;
                }
                v97 = 5;
                v84 = v159;
              }
              (*(void (**)(const char **))&(*v84)[8 * v97])(v84);
              goto LABEL_139;
            }
            v96 = (*((uint64_t (**)(void))*v159 + 2))();
          }
          v89[8] = v96;
          goto LABEL_134;
        }
        v85 = (*v147)[2]();
      }
      v159 = (const char **)v85;
      goto LABEL_121;
    }
  }
LABEL_159:
  v109 = v130;
  if (v130)
  {
    v110 = (unint64_t *)&v130->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  v112 = v132;
  if (v132)
  {
    v113 = (unint64_t *)&v132->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  std::mutex::unlock(v2);
}

void sub_1B57F1AA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,void *__p,int a27,__int16 a28,char a29,char a30,uint64_t a31,char a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,char a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  AMCP::Log::Scope_Registry *v60;
  uint64_t v61;
  NSObject *v62;
  _opaque_pthread_t *v63;
  mach_port_t v64;

  if (a2)
  {
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v56);
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a50);
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
    v60 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
    v61 = *(_QWORD *)(v55 + 128);
    if (v61)
      v60 = (AMCP::Log::Scope_Registry *)AMCP::Graph::Manifest_Inventory::report_thread_error(*(_QWORD *)(v61 + 192));
    AMCP::Log::Scope_Registry::get(v60);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)(v58 - 240), "com.apple.coreaudio", "AMCP");
    v62 = **(NSObject ***)(v58 - 240);
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v58 - 240);
    if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
    {
      v63 = pthread_self();
      v64 = pthread_mach_thread_np(v63);
      *(_DWORD *)(v58 - 240) = 67109634;
      *(_DWORD *)(v58 - 236) = v64;
      *(_WORD *)(v58 - 232) = 2080;
      *(_QWORD *)(v57 + 130) = "IOContext_Core.cpp";
      *(_WORD *)(v58 - 222) = 1024;
      *(_DWORD *)(v58 - 220) = 751;
      _os_log_error_impl(&dword_1B57BA000, v62, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Exception thrown during Node::maybe_update_running_iocontext()", (uint8_t *)(v58 - 240), 0x18u);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B57F1558);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B57F1F10()
{
  std::mutex *v0;

  __cxa_end_catch();
  std::mutex::unlock(v0);
  JUMPOUT(0x1B57F1AF0);
}

void AMCP::IO_Core::IOContext_Core::pause_io_context_within_work_queue(AMCP::IO_Core::IOContext_Core *this)
{
  std::mutex *v2;

  v2 = (std::mutex *)((char *)this + 200);
  std::mutex::lock((std::mutex *)((char *)this + 200));
  AMCP::IO_Core::IOContext_Core::pause((uint64_t)this, 0);
  std::mutex::unlock(v2);
}

void sub_1B57F1F6C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void AMCP::IO_Core::IOContext_Core::update_core(std::string::size_type a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  __n128 v6;
  uint64_t (***v7)();
  uint64_t v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t (***v18)();
  uint64_t v19;
  unint64_t v20;
  uint64_t (***v21)();
  uint64_t v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  __n128 v32;
  uint64_t (***v33)();
  uint64_t v34;
  __int128 v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  __n128 v44;
  uint64_t (***v45)();
  uint64_t v46;
  unint64_t v47;
  __n128 v48;
  uint64_t (***v49)();
  uint64_t v50;
  __int128 v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  __n128 v60;
  uint64_t (***v61)();
  uint64_t v62;
  __int128 v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t (***v72)();
  uint64_t v73;
  __int128 v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t (***v83)();
  uint64_t v84;
  unint64_t v85;
  uint64_t (**v86)();
  std::string::size_type v87;
  std::string::size_type v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  __int128 v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t (***v101)();
  uint64_t v102;
  __int128 v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t (***v112)();
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t (***v116)();
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t (***v120)();
  uint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  __int128 v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t (***v134)();
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t (***v138)();
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t (***v142)();
  uint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  __int128 v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t (***v156)();
  uint64_t v157;
  __int128 v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t (***v167)();
  uint64_t v168;
  __int128 v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t (***v178)();
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t (***v182)();
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t (**v186)();
  std::string::size_type v187;
  std::string::size_type v188;
  _QWORD *v189;
  _QWORD *v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t (***v194)();
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t (**v198)();
  std::string::size_type v199;
  std::string::size_type v200;
  _QWORD *v201;
  _QWORD *v202;
  uint64_t v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  uint64_t v207;
  unint64_t v208;
  __n128 v209;
  uint64_t (***v210)();
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t (***v214)();
  uint64_t v215;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  unint64_t v218;
  uint64_t v219;
  unint64_t v220;
  __n128 v221;
  uint64_t (***v222)();
  uint64_t v223;
  uint64_t v224;
  unint64_t v225;
  uint64_t (***v226)();
  uint64_t v227;
  std::__shared_weak_count *v228;
  unint64_t *v229;
  unint64_t v230;
  uint64_t v231;
  unint64_t v232;
  __n128 v233;
  uint64_t (***v234)();
  uint64_t v235;
  uint64_t v236;
  unint64_t v237;
  uint64_t (***v238)();
  uint64_t v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  uint64_t v243;
  unint64_t v244;
  __n128 v245;
  uint64_t (***v246)();
  uint64_t v247;
  uint64_t v248;
  unint64_t v249;
  uint64_t (***v250)();
  uint64_t v251;
  std::__shared_weak_count *v252;
  unint64_t *v253;
  unint64_t v254;
  __int128 v255;
  std::__shared_weak_count *v256;
  unint64_t *v257;
  unint64_t v258;
  std::__shared_weak_count *v259;
  unint64_t *v260;
  unint64_t v261;
  uint64_t v262;
  unint64_t v263;
  uint64_t (***v264)();
  uint64_t v265;
  __int128 v266;
  std::__shared_weak_count *v267;
  unint64_t *v268;
  unint64_t v269;
  std::__shared_weak_count *v270;
  unint64_t *v271;
  unint64_t v272;
  uint64_t v273;
  unint64_t v274;
  __n128 v275;
  uint64_t (***v276)();
  uint64_t v277;
  unint64_t v278;
  uint64_t (***v279)();
  uint64_t v280;
  __int128 v281;
  std::__shared_weak_count *v282;
  unint64_t *v283;
  unint64_t v284;
  std::__shared_weak_count *v285;
  unint64_t *v286;
  unint64_t v287;
  uint64_t v288;
  unint64_t v289;
  uint64_t (***v290)();
  uint64_t v291;
  unint64_t v292;
  uint64_t (**v293)();
  std::string::size_type v294;
  std::string::size_type v295;
  _QWORD *v296;
  _QWORD *v297;
  uint64_t v298;
  uint64_t v299;
  unint64_t v300;
  __n128 v301;
  uint64_t (***v302)();
  uint64_t v303;
  uint64_t v304;
  unint64_t v305;
  uint64_t (***v306)();
  uint64_t v307;
  std::__shared_weak_count *v308;
  unint64_t *v309;
  unint64_t v310;
  std::__shared_weak_count *v311;
  unint64_t *v312;
  unint64_t v313;
  uint64_t v314;
  std::__shared_weak_count *v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  double (*v319)(int, uint64_t, AMCP::Thing *, uint64_t *);
  uint64_t v320;
  int v321;
  __int128 v322;
  __int128 v323;
  void (*v324)(int, uint64_t, AMCP::Thing *, uint64_t *);
  uint64_t (**v325)();
  std::string::size_type v326;
  __int128 v327;
  int v328;
  uint64_t v329;
  int v330;
  _BYTE v331[24];
  _BYTE *v332;
  uint64_t v333;

  v333 = *MEMORY[0x1E0C80C00];
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)&v316, 0, 1.58366012e190);
  v4 = v316;
  v5 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(void)>>();
  v325 = &off_1E696C3B8;
  v326 = a1;
  *((_QWORD *)&v327 + 1) = &v325;
  v317 = 0u;
  v318 = 0u;
  v319 = 0;
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)&v317, (uint64_t)&v325);
  v319 = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v4, v5, (AMCP *)&v317);
  if (v319)
    v6.n128_f64[0] = v319(0, (uint64_t)&v317, 0, 0);
  v7 = (uint64_t (***)())*((_QWORD *)&v327 + 1);
  if (*((uint64_t (****)())&v327 + 1) == &v325)
  {
    v8 = 4;
    v7 = &v325;
    goto LABEL_7;
  }
  if (*((_QWORD *)&v327 + 1))
  {
    v8 = 5;
LABEL_7:
    ((void (*)(__n128))(*v7)[v8])(v6);
  }
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v4 + 40), &v316);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)&v317, 0, 1.58366012e190);
  v9 = v317;
  v317 = 0uLL;
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v316 + 1);
  v316 = v9;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v317 + 1);
  if (*((_QWORD *)&v317 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v317 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = v316;
  v17 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(unsigned long long)>>();
  v325 = &off_1E696C438;
  v326 = a1;
  *((_QWORD *)&v327 + 1) = &v325;
  v317 = 0u;
  v318 = 0u;
  v319 = 0;
  std::__function::__value_func<BOOL ()(unsigned long long)>::__value_func[abi:ne180100]((uint64_t)&v317, (uint64_t)&v325);
  v319 = (double (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(unsigned long long)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v16, v17, (AMCP *)&v317);
  if (v319)
    v319(0, (uint64_t)&v317, 0, 0);
  v18 = (uint64_t (***)())*((_QWORD *)&v327 + 1);
  if (*((uint64_t (****)())&v327 + 1) == &v325)
  {
    v19 = 4;
    v18 = &v325;
  }
  else
  {
    if (!*((_QWORD *)&v327 + 1))
      goto LABEL_25;
    v19 = 5;
  }
  (*v18)[v19]();
LABEL_25:
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v16 + 40), &v316);
  v20 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
  v325 = &off_1E696C4C8;
  v326 = a1;
  *((_QWORD *)&v327 + 1) = &v325;
  v317 = 0u;
  v318 = 0u;
  v319 = 0;
  std::__function::__value_func<void ()(AMCP::Thing const&)>::__value_func[abi:ne180100]((uint64_t)&v317, (uint64_t)&v325);
  v319 = (double (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Thing const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v16, v20, (AMCP *)&v317);
  if (v319)
    v319(0, (uint64_t)&v317, 0, 0);
  v21 = (uint64_t (***)())*((_QWORD *)&v327 + 1);
  if (*((uint64_t (****)())&v327 + 1) == &v325)
  {
    v22 = 4;
    v21 = &v325;
    goto LABEL_31;
  }
  if (*((_QWORD *)&v327 + 1))
  {
    v22 = 5;
LABEL_31:
    (*v21)[v22]();
  }
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v16 + 40), &v316);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)&v317, 0, 1.58366012e190);
  v23 = v317;
  v317 = 0uLL;
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v316 + 1);
  v316 = v23;
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = (std::__shared_weak_count *)*((_QWORD *)&v317 + 1);
  if (*((_QWORD *)&v317 + 1))
  {
    v28 = (unint64_t *)(*((_QWORD *)&v317 + 1) + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = v316;
  v31 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(void)>>();
  v325 = &off_1E696C548;
  v326 = a1;
  *((_QWORD *)&v327 + 1) = &v325;
  v317 = 0u;
  v318 = 0u;
  v319 = 0;
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)&v317, (uint64_t)&v325);
  v319 = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v30, v31, (AMCP *)&v317);
  if (v319)
    v32.n128_f64[0] = v319(0, (uint64_t)&v317, 0, 0);
  v33 = (uint64_t (***)())*((_QWORD *)&v327 + 1);
  if (*((uint64_t (****)())&v327 + 1) == &v325)
  {
    v34 = 4;
    v33 = &v325;
    goto LABEL_48;
  }
  if (*((_QWORD *)&v327 + 1))
  {
    v34 = 5;
LABEL_48:
    ((void (*)(__n128))(*v33)[v34])(v32);
  }
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v30 + 40), &v316);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)&v317, 0, 1.58366012e190);
  v35 = v317;
  v317 = 0uLL;
  v36 = (std::__shared_weak_count *)*((_QWORD *)&v316 + 1);
  v316 = v35;
  if (v36)
  {
    v37 = (unint64_t *)&v36->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v39 = (std::__shared_weak_count *)*((_QWORD *)&v317 + 1);
  if (*((_QWORD *)&v317 + 1))
  {
    v40 = (unint64_t *)(*((_QWORD *)&v317 + 1) + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = v316;
  v43 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(void)>>();
  v325 = &off_1E696C5C8;
  v326 = a1;
  *((_QWORD *)&v327 + 1) = &v325;
  v317 = 0u;
  v318 = 0u;
  v319 = 0;
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)&v317, (uint64_t)&v325);
  v319 = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v42, v43, (AMCP *)&v317);
  if (v319)
    v44.n128_f64[0] = v319(0, (uint64_t)&v317, 0, 0);
  v45 = (uint64_t (***)())*((_QWORD *)&v327 + 1);
  if (*((uint64_t (****)())&v327 + 1) == &v325)
  {
    v46 = 4;
    v45 = &v325;
  }
  else
  {
    if (!*((_QWORD *)&v327 + 1))
      goto LABEL_66;
    v46 = 5;
  }
  ((void (*)(__n128))(*v45)[v46])(v44);
LABEL_66:
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v42 + 40), &v316);
  v47 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(void)>>();
  v325 = &off_1E696C648;
  v326 = a1;
  *((_QWORD *)&v327 + 1) = &v325;
  v317 = 0u;
  v318 = 0u;
  v319 = 0;
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)&v317, (uint64_t)&v325);
  v319 = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v42, v47, (AMCP *)&v317);
  if (v319)
    v48.n128_f64[0] = v319(0, (uint64_t)&v317, 0, 0);
  v49 = (uint64_t (***)())*((_QWORD *)&v327 + 1);
  if (*((uint64_t (****)())&v327 + 1) == &v325)
  {
    v50 = 4;
    v49 = &v325;
    goto LABEL_72;
  }
  if (*((_QWORD *)&v327 + 1))
  {
    v50 = 5;
LABEL_72:
    ((void (*)(__n128))(*v49)[v50])(v48);
  }
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v42 + 40), &v316);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)&v317, 0, 1.58366012e190);
  v51 = v317;
  v317 = 0uLL;
  v52 = (std::__shared_weak_count *)*((_QWORD *)&v316 + 1);
  v316 = v51;
  if (v52)
  {
    v53 = (unint64_t *)&v52->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v317 + 1);
  if (*((_QWORD *)&v317 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v317 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  v58 = v316;
  v59 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(void)>>();
  v325 = &off_1E696C6C8;
  v326 = a1;
  *((_QWORD *)&v327 + 1) = &v325;
  v317 = 0u;
  v318 = 0u;
  v319 = 0;
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)&v317, (uint64_t)&v325);
  v319 = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v58, v59, (AMCP *)&v317);
  if (v319)
    v60.n128_f64[0] = v319(0, (uint64_t)&v317, 0, 0);
  v61 = (uint64_t (***)())*((_QWORD *)&v327 + 1);
  if (*((uint64_t (****)())&v327 + 1) == &v325)
  {
    v62 = 4;
    v61 = &v325;
    goto LABEL_89;
  }
  if (*((_QWORD *)&v327 + 1))
  {
    v62 = 5;
LABEL_89:
    ((void (*)(__n128))(*v61)[v62])(v60);
  }
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v58 + 40), &v316);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)&v317, 0, 1.58366009e190);
  v63 = v317;
  v317 = 0uLL;
  v64 = (std::__shared_weak_count *)*((_QWORD *)&v316 + 1);
  v316 = v63;
  if (v64)
  {
    v65 = (unint64_t *)&v64->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  v67 = (std::__shared_weak_count *)*((_QWORD *)&v317 + 1);
  if (*((_QWORD *)&v317 + 1))
  {
    v68 = (unint64_t *)(*((_QWORD *)&v317 + 1) + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = v316;
  v71 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(std::vector<std::shared_ptr<AMCP::Graph::Timebase>> const&)>>();
  v325 = &off_1E696C748;
  v326 = a1;
  *((_QWORD *)&v327 + 1) = &v325;
  v317 = 0u;
  v318 = 0u;
  v319 = 0;
  std::__function::__value_func<BOOL ()(std::vector<std::shared_ptr<AMCP::Graph::Timebase>> const&)>::__value_func[abi:ne180100]((uint64_t)&v317, (uint64_t)&v325);
  v319 = (double (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(std::vector<std::shared_ptr<AMCP::Graph::Timebase>> const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v70, v71, (AMCP *)&v317);
  if (v319)
    v319(0, (uint64_t)&v317, 0, 0);
  v72 = (uint64_t (***)())*((_QWORD *)&v327 + 1);
  if (*((uint64_t (****)())&v327 + 1) == &v325)
  {
    v73 = 4;
    v72 = &v325;
    goto LABEL_106;
  }
  if (*((_QWORD *)&v327 + 1))
  {
    v73 = 5;
LABEL_106:
    (*v72)[v73]();
  }
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v70 + 40), &v316);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)&v317, 0, 1.58366012e190);
  v74 = v317;
  v317 = 0uLL;
  v75 = (std::__shared_weak_count *)*((_QWORD *)&v316 + 1);
  v316 = v74;
  if (v75)
  {
    v76 = (unint64_t *)&v75->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  v78 = (std::__shared_weak_count *)*((_QWORD *)&v317 + 1);
  if (*((_QWORD *)&v317 + 1))
  {
    v79 = (unint64_t *)(*((_QWORD *)&v317 + 1) + 8);
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  v81 = v316;
  v82 = AMCP::Implementation::get_type_marker<std::function<AMCP::Transport_State ()(void)>>();
  v325 = &off_1E696C7D8;
  v326 = a1 + 160;
  *((_QWORD *)&v327 + 1) = &v325;
  v317 = 0u;
  v318 = 0u;
  v319 = 0;
  std::__function::__value_func<AMCP::Transport_State ()(void)>::__value_func[abi:ne180100]((uint64_t)&v317, (uint64_t)&v325);
  v319 = (double (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<AMCP::Transport_State ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v81, v82, (AMCP *)&v317);
  if (v319)
    v319(0, (uint64_t)&v317, 0, 0);
  v83 = (uint64_t (***)())*((_QWORD *)&v327 + 1);
  if (*((uint64_t (****)())&v327 + 1) == &v325)
  {
    v84 = 4;
    v83 = &v325;
  }
  else
  {
    if (!*((_QWORD *)&v327 + 1))
      goto LABEL_124;
    v84 = 5;
  }
  (*v83)[v84]();
LABEL_124:
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v325, v81);
  v329 = *(_QWORD *)(v81 + 40);
  v330 = *(_DWORD *)(v81 + 48);
  v85 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  v86 = v325;
  v87 = v326;
  v325 = 0;
  v326 = 0;
  *(_QWORD *)&v317 = v86;
  *((_QWORD *)&v317 + 1) = v87;
  v318 = v327;
  LODWORD(v319) = v328;
  if (*((_QWORD *)&v327 + 1))
  {
    v88 = *(_QWORD *)(v327 + 8);
    if ((v87 & (v87 - 1)) != 0)
    {
      if (v88 >= v87)
        v88 %= v87;
    }
    else
    {
      v88 &= v87 - 1;
    }
    v86[v88] = (uint64_t (*)())&v318;
    v327 = 0uLL;
  }
  v320 = v329;
  v321 = v330;
  v332 = 0;
  v89 = operator new(0x40uLL);
  *v89 = &off_1E696C868;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v89 + 1), (uint64_t *)&v317);
  v89[6] = v320;
  *((_DWORD *)v89 + 14) = v321;
  v332 = v89;
  v322 = 0u;
  v323 = 0u;
  v324 = 0;
  std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)&v322, (uint64_t)v331);
  v324 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v81, v85, (AMCP *)&v322);
  if (v324)
    v324(0, (uint64_t)&v322, 0, 0);
  v90 = v332;
  if (v332 == v331)
  {
    v91 = 4;
    v90 = v331;
    goto LABEL_136;
  }
  if (v332)
  {
    v91 = 5;
LABEL_136:
    (*(void (**)(void))(*v90 + 8 * v91))();
  }
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v317);
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v325);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v81 + 40), &v316);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)&v317, 0, 1.58366011e190);
  v92 = v317;
  v317 = 0uLL;
  v93 = (std::__shared_weak_count *)*((_QWORD *)&v316 + 1);
  v316 = v92;
  if (v93)
  {
    v94 = (unint64_t *)&v93->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = (std::__shared_weak_count *)*((_QWORD *)&v317 + 1);
  if (*((_QWORD *)&v317 + 1))
  {
    v97 = (unint64_t *)(*((_QWORD *)&v317 + 1) + 8);
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v99 = v316;
  v100 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Pause_Behavior)>>();
  v325 = &off_1E696C8E8;
  v326 = a1;
  *((_QWORD *)&v327 + 1) = &v325;
  v317 = 0u;
  v318 = 0u;
  v319 = 0;
  std::__function::__value_func<void ()(AMCP::Pause_Behavior)>::__value_func[abi:ne180100]((uint64_t)&v317, (uint64_t)&v325);
  v319 = (double (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Pause_Behavior)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v99, v100, (AMCP *)&v317);
  if (v319)
    v319(0, (uint64_t)&v317, 0, 0);
  v101 = (uint64_t (***)())*((_QWORD *)&v327 + 1);
  if (*((uint64_t (****)())&v327 + 1) == &v325)
  {
    v102 = 4;
    v101 = &v325;
    goto LABEL_153;
  }
  if (*((_QWORD *)&v327 + 1))
  {
    v102 = 5;
LABEL_153:
    (*v101)[v102]();
  }
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v99 + 40), &v316);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)&v317, 0, 1.58366012e190);
  v103 = v317;
  v317 = 0uLL;
  v104 = (std::__shared_weak_count *)*((_QWORD *)&v316 + 1);
  v316 = v103;
  if (v104)
  {
    v105 = (unint64_t *)&v104->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = (std::__shared_weak_count *)*((_QWORD *)&v317 + 1);
  if (*((_QWORD *)&v317 + 1))
  {
    v108 = (unint64_t *)(*((_QWORD *)&v317 + 1) + 8);
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  v110 = v316;
  v111 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Resume_Behavior)>>();
  v325 = &off_1E696C978;
  v326 = a1;
  *((_QWORD *)&v327 + 1) = &v325;
  v317 = 0u;
  v318 = 0u;
  v319 = 0;
  std::__function::__value_func<void ()(AMCP::Resume_Behavior)>::__value_func[abi:ne180100]((uint64_t)&v317, (uint64_t)&v325);
  v319 = (double (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Resume_Behavior)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v110, v111, (AMCP *)&v317);
  if (v319)
    v319(0, (uint64_t)&v317, 0, 0);
  v112 = (uint64_t (***)())*((_QWORD *)&v327 + 1);
  if (*((uint64_t (****)())&v327 + 1) == &v325)
  {
    v113 = 4;
    v112 = &v325;
  }
  else
  {
    if (!*((_QWORD *)&v327 + 1))
      goto LABEL_171;
    v113 = 5;
  }
  (*v112)[v113]();
LABEL_171:
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v110 + 40), &v316);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v322, 0, 1.58366008e190);
  v114 = v322;
  v115 = AMCP::Implementation::get_type_marker<std::function<unsigned int ()(void)>>();
  v325 = &off_1E696CA08;
  v326 = a1;
  *((_QWORD *)&v327 + 1) = &v325;
  v317 = 0u;
  v318 = 0u;
  v319 = 0;
  std::__function::__value_func<unsigned int ()(void)>::__value_func[abi:ne180100]((uint64_t)&v317, (uint64_t)&v325);
  v319 = (double (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<unsigned int ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v114, v115, (AMCP *)&v317);
  if (v319)
    v319(0, (uint64_t)&v317, 0, 0);
  v116 = (uint64_t (***)())*((_QWORD *)&v327 + 1);
  if (*((uint64_t (****)())&v327 + 1) == &v325)
  {
    v117 = 4;
    v116 = &v325;
  }
  else
  {
    if (!*((_QWORD *)&v327 + 1))
      goto LABEL_178;
    v117 = 5;
  }
  (*v116)[v117]();
LABEL_178:
  AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>(v322);
  v118 = v322;
  v119 = AMCP::Implementation::get_type_marker<std::function<void ()(unsigned int const&)>>();
  v325 = &off_1E696CA88;
  v326 = a1;
  *((_QWORD *)&v327 + 1) = &v325;
  v317 = 0u;
  v318 = 0u;
  v319 = 0;
  std::__function::__value_func<void ()(unsigned int const&)>::__value_func[abi:ne180100]((uint64_t)&v317, (uint64_t)&v325);
  v319 = (double (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<void ()(unsigned int const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v118, v119, (AMCP *)&v317);
  if (v319)
    v319(0, (uint64_t)&v317, 0, 0);
  v120 = (uint64_t (***)())*((_QWORD *)&v327 + 1);
  if (*((uint64_t (****)())&v327 + 1) == &v325)
  {
    v121 = 4;
    v120 = &v325;
    goto LABEL_184;
  }
  if (*((_QWORD *)&v327 + 1))
  {
    v121 = 5;
LABEL_184:
    (*v120)[v121]();
  }
  AMCP::Core::Operation_Utilities::add_generic_property_setter<unsigned int>(v322);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v322 + 40), &v322);
  v122 = (std::__shared_weak_count *)*((_QWORD *)&v322 + 1);
  if (*((_QWORD *)&v322 + 1))
  {
    v123 = (unint64_t *)(*((_QWORD *)&v322 + 1) + 8);
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)&v317, 0, 1.58366008e190);
  v125 = v317;
  v317 = 0uLL;
  v126 = (std::__shared_weak_count *)*((_QWORD *)&v316 + 1);
  v316 = v125;
  if (v126)
  {
    v127 = (unint64_t *)&v126->__shared_owners_;
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  v129 = (std::__shared_weak_count *)*((_QWORD *)&v317 + 1);
  if (*((_QWORD *)&v317 + 1))
  {
    v130 = (unint64_t *)(*((_QWORD *)&v317 + 1) + 8);
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  v132 = v316;
  v133 = AMCP::Implementation::get_type_marker<std::function<std::tuple<unsigned int,unsigned int> ()(void)>>();
  v325 = &off_1E696CB08;
  v326 = a1;
  *((_QWORD *)&v327 + 1) = &v325;
  v317 = 0u;
  v318 = 0u;
  v319 = 0;
  std::__function::__value_func<std::tuple<unsigned int,unsigned int> ()(void)>::__value_func[abi:ne180100]((uint64_t)&v317, (uint64_t)&v325);
  v319 = (double (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<std::tuple<unsigned int,unsigned int> ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v132, v133, (AMCP *)&v317);
  if (v319)
    v319(0, (uint64_t)&v317, 0, 0);
  v134 = (uint64_t (***)())*((_QWORD *)&v327 + 1);
  if (*((uint64_t (****)())&v327 + 1) == &v325)
  {
    v135 = 4;
    v134 = &v325;
  }
  else
  {
    if (!*((_QWORD *)&v327 + 1))
      goto LABEL_207;
    v135 = 5;
  }
  (*v134)[v135]();
LABEL_207:
  AMCP::Core::Operation_Utilities::add_generic_property_getter<std::tuple<unsigned int,unsigned int>>(v132);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v132 + 40), &v316);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v322, 0, 1.5836601e190);
  v136 = v322;
  v137 = AMCP::Implementation::get_type_marker<std::function<float ()(void)>>();
  v325 = &off_1E696CB88;
  v326 = a1;
  *((_QWORD *)&v327 + 1) = &v325;
  v317 = 0u;
  v318 = 0u;
  v319 = 0;
  std::__function::__value_func<float ()(void)>::__value_func[abi:ne180100]((uint64_t)&v317, (uint64_t)&v325);
  v319 = (double (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<float ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v136, v137, (AMCP *)&v317);
  if (v319)
    v319(0, (uint64_t)&v317, 0, 0);
  v138 = (uint64_t (***)())*((_QWORD *)&v327 + 1);
  if (*((uint64_t (****)())&v327 + 1) == &v325)
  {
    v139 = 4;
    v138 = &v325;
  }
  else
  {
    if (!*((_QWORD *)&v327 + 1))
      goto LABEL_214;
    v139 = 5;
  }
  (*v138)[v139]();
LABEL_214:
  AMCP::Core::Operation_Utilities::add_generic_property_getter<float>(v322);
  v140 = v322;
  v141 = AMCP::Implementation::get_type_marker<std::function<void ()(float const&)>>();
  v325 = &off_1E696CC08;
  v326 = a1;
  *((_QWORD *)&v327 + 1) = &v325;
  v317 = 0u;
  v318 = 0u;
  v319 = 0;
  std::__function::__value_func<void ()(float const&)>::__value_func[abi:ne180100]((uint64_t)&v317, (uint64_t)&v325);
  v319 = (double (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<void ()(float const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v140, v141, (AMCP *)&v317);
  if (v319)
    v319(0, (uint64_t)&v317, 0, 0);
  v142 = (uint64_t (***)())*((_QWORD *)&v327 + 1);
  if (*((uint64_t (****)())&v327 + 1) == &v325)
  {
    v143 = 4;
    v142 = &v325;
    goto LABEL_220;
  }
  if (*((_QWORD *)&v327 + 1))
  {
    v143 = 5;
LABEL_220:
    (*v142)[v143]();
  }
  AMCP::Core::Operation_Utilities::add_generic_property_setter<float>(v322);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v322 + 40), &v322);
  v144 = (std::__shared_weak_count *)*((_QWORD *)&v322 + 1);
  if (*((_QWORD *)&v322 + 1))
  {
    v145 = (unint64_t *)(*((_QWORD *)&v322 + 1) + 8);
    do
      v146 = __ldaxr(v145);
    while (__stlxr(v146 - 1, v145));
    if (!v146)
    {
      ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
      std::__shared_weak_count::__release_weak(v144);
    }
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)&v317, 0, 1.58366006e190);
  v147 = v317;
  v317 = 0uLL;
  v148 = (std::__shared_weak_count *)*((_QWORD *)&v316 + 1);
  v316 = v147;
  if (v148)
  {
    v149 = (unint64_t *)&v148->__shared_owners_;
    do
      v150 = __ldaxr(v149);
    while (__stlxr(v150 - 1, v149));
    if (!v150)
    {
      ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
      std::__shared_weak_count::__release_weak(v148);
    }
  }
  v151 = (std::__shared_weak_count *)*((_QWORD *)&v317 + 1);
  if (*((_QWORD *)&v317 + 1))
  {
    v152 = (unint64_t *)(*((_QWORD *)&v317 + 1) + 8);
    do
      v153 = __ldaxr(v152);
    while (__stlxr(v153 - 1, v152));
    if (!v153)
    {
      ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
      std::__shared_weak_count::__release_weak(v151);
    }
  }
  v154 = v316;
  v155 = AMCP::Implementation::get_type_marker<std::function<double ()(void)>>();
  v325 = &off_1E696CC88;
  v326 = a1;
  *((_QWORD *)&v327 + 1) = &v325;
  v317 = 0u;
  v318 = 0u;
  v319 = 0;
  std::__function::__value_func<double ()(void)>::__value_func[abi:ne180100]((uint64_t)&v317, (uint64_t)&v325);
  v319 = (double (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<double ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v154, v155, (AMCP *)&v317);
  if (v319)
    v319(0, (uint64_t)&v317, 0, 0);
  v156 = (uint64_t (***)())*((_QWORD *)&v327 + 1);
  if (*((uint64_t (****)())&v327 + 1) == &v325)
  {
    v157 = 4;
    v156 = &v325;
    goto LABEL_242;
  }
  if (*((_QWORD *)&v327 + 1))
  {
    v157 = 5;
LABEL_242:
    (*v156)[v157]();
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<double>(v154);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v154 + 40), &v316);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)&v317, 0, 1.5836601e190);
  v158 = v317;
  v317 = 0uLL;
  v159 = (std::__shared_weak_count *)*((_QWORD *)&v316 + 1);
  v316 = v158;
  if (v159)
  {
    v160 = (unint64_t *)&v159->__shared_owners_;
    do
      v161 = __ldaxr(v160);
    while (__stlxr(v161 - 1, v160));
    if (!v161)
    {
      ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
      std::__shared_weak_count::__release_weak(v159);
    }
  }
  v162 = (std::__shared_weak_count *)*((_QWORD *)&v317 + 1);
  if (*((_QWORD *)&v317 + 1))
  {
    v163 = (unint64_t *)(*((_QWORD *)&v317 + 1) + 8);
    do
      v164 = __ldaxr(v163);
    while (__stlxr(v164 - 1, v163));
    if (!v164)
    {
      ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
      std::__shared_weak_count::__release_weak(v162);
    }
  }
  v165 = v316;
  v166 = AMCP::Implementation::get_type_marker<std::function<unsigned int ()(void)>>();
  v325 = &off_1E696CD08;
  v326 = a1;
  *((_QWORD *)&v327 + 1) = &v325;
  v317 = 0u;
  v318 = 0u;
  v319 = 0;
  std::__function::__value_func<unsigned int ()(void)>::__value_func[abi:ne180100]((uint64_t)&v317, (uint64_t)&v325);
  v319 = (double (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<unsigned int ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v165, v166, (AMCP *)&v317);
  if (v319)
    v319(0, (uint64_t)&v317, 0, 0);
  v167 = (uint64_t (***)())*((_QWORD *)&v327 + 1);
  if (*((uint64_t (****)())&v327 + 1) == &v325)
  {
    v168 = 4;
    v167 = &v325;
    goto LABEL_259;
  }
  if (*((_QWORD *)&v327 + 1))
  {
    v168 = 5;
LABEL_259:
    (*v167)[v168]();
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>(v165);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v165 + 40), &v316);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)&v317, 0, 1.58366012e190);
  v169 = v317;
  v317 = 0uLL;
  v170 = (std::__shared_weak_count *)*((_QWORD *)&v316 + 1);
  v316 = v169;
  if (v170)
  {
    v171 = (unint64_t *)&v170->__shared_owners_;
    do
      v172 = __ldaxr(v171);
    while (__stlxr(v172 - 1, v171));
    if (!v172)
    {
      ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
      std::__shared_weak_count::__release_weak(v170);
    }
  }
  v173 = (std::__shared_weak_count *)*((_QWORD *)&v317 + 1);
  if (*((_QWORD *)&v317 + 1))
  {
    v174 = (unint64_t *)(*((_QWORD *)&v317 + 1) + 8);
    do
      v175 = __ldaxr(v174);
    while (__stlxr(v175 - 1, v174));
    if (!v175)
    {
      ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
      std::__shared_weak_count::__release_weak(v173);
    }
  }
  v176 = v316;
  v177 = AMCP::Implementation::get_type_marker<std::function<unsigned int ()(void)>>();
  v325 = &off_1E696CD88;
  v326 = a1;
  *((_QWORD *)&v327 + 1) = &v325;
  v317 = 0u;
  v318 = 0u;
  v319 = 0;
  std::__function::__value_func<unsigned int ()(void)>::__value_func[abi:ne180100]((uint64_t)&v317, (uint64_t)&v325);
  v319 = (double (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<unsigned int ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v176, v177, (AMCP *)&v317);
  if (v319)
    v319(0, (uint64_t)&v317, 0, 0);
  v178 = (uint64_t (***)())*((_QWORD *)&v327 + 1);
  if (*((uint64_t (****)())&v327 + 1) == &v325)
  {
    v179 = 4;
    v178 = &v325;
  }
  else
  {
    if (!*((_QWORD *)&v327 + 1))
      goto LABEL_277;
    v179 = 5;
  }
  (*v178)[v179]();
LABEL_277:
  AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>(v176);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v176 + 40), &v316);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(&v314, 0, 1.58366013e190);
  v180 = v314;
  v181 = AMCP::Implementation::get_type_marker<std::function<caulk::mach::os_workgroup_interval_managed ()(void)>>();
  v325 = &off_1E696CE08;
  v326 = a1;
  *((_QWORD *)&v327 + 1) = &v325;
  v317 = 0u;
  v318 = 0u;
  v319 = 0;
  std::__function::__value_func<caulk::mach::os_workgroup_interval_managed ()(void)>::__value_func[abi:ne180100]((uint64_t)&v317, (uint64_t)&v325);
  v319 = (double (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<caulk::mach::os_workgroup_interval_managed ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v180, v181, (AMCP *)&v317);
  if (v319)
    v319(0, (uint64_t)&v317, 0, 0);
  v182 = (uint64_t (***)())*((_QWORD *)&v327 + 1);
  if (*((uint64_t (****)())&v327 + 1) == &v325)
  {
    v183 = 4;
    v182 = &v325;
  }
  else
  {
    if (!*((_QWORD *)&v327 + 1))
      goto LABEL_284;
    v183 = 5;
  }
  (*v182)[v183]();
LABEL_284:
  v184 = v314;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v325, v314);
  v329 = *(_QWORD *)(v184 + 40);
  v330 = *(_DWORD *)(v184 + 48);
  v185 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  v186 = v325;
  v187 = v326;
  v325 = 0;
  v326 = 0;
  *(_QWORD *)&v317 = v186;
  *((_QWORD *)&v317 + 1) = v187;
  v318 = v327;
  LODWORD(v319) = v328;
  if (*((_QWORD *)&v327 + 1))
  {
    v188 = *(_QWORD *)(v327 + 8);
    if ((v187 & (v187 - 1)) != 0)
    {
      if (v188 >= v187)
        v188 %= v187;
    }
    else
    {
      v188 &= v187 - 1;
    }
    v186[v188] = (uint64_t (*)())&v318;
    v327 = 0uLL;
  }
  v320 = v329;
  v321 = v330;
  v332 = 0;
  v189 = operator new(0x40uLL);
  *v189 = &off_1E696CE98;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v189 + 1), (uint64_t *)&v317);
  v189[6] = v320;
  *((_DWORD *)v189 + 14) = v321;
  v332 = v189;
  v322 = 0u;
  v323 = 0u;
  v324 = 0;
  std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)&v322, (uint64_t)v331);
  v324 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v184, v185, (AMCP *)&v322);
  if (v324)
    v324(0, (uint64_t)&v322, 0, 0);
  v190 = v332;
  if (v332 == v331)
  {
    v191 = 4;
    v190 = v331;
  }
  else
  {
    if (!v332)
      goto LABEL_297;
    v191 = 5;
  }
  (*(void (**)(void))(*v190 + 8 * v191))();
LABEL_297:
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v317);
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v325);
  v192 = v314;
  v193 = AMCP::Implementation::get_type_marker<std::function<void ()(caulk::mach::os_workgroup_interval_managed const&)>>();
  v325 = &off_1E696CF18;
  v326 = a1;
  *((_QWORD *)&v327 + 1) = &v325;
  v317 = 0u;
  v318 = 0u;
  v319 = 0;
  std::__function::__value_func<void ()(caulk::mach::os_workgroup_interval_managed const&)>::__value_func[abi:ne180100]((uint64_t)&v317, (uint64_t)&v325);
  v319 = (double (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<void ()(caulk::mach::os_workgroup_interval_managed const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v192, v193, (AMCP *)&v317);
  if (v319)
    v319(0, (uint64_t)&v317, 0, 0);
  v194 = (uint64_t (***)())*((_QWORD *)&v327 + 1);
  if (*((uint64_t (****)())&v327 + 1) == &v325)
  {
    v195 = 4;
    v194 = &v325;
  }
  else
  {
    if (!*((_QWORD *)&v327 + 1))
      goto LABEL_304;
    v195 = 5;
  }
  (*v194)[v195]();
LABEL_304:
  v196 = v314;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v325, v314);
  v329 = *(_QWORD *)(v196 + 40);
  v330 = *(_DWORD *)(v196 + 48);
  v197 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
  v198 = v325;
  v199 = v326;
  v325 = 0;
  v326 = 0;
  *(_QWORD *)&v317 = v198;
  *((_QWORD *)&v317 + 1) = v199;
  v318 = v327;
  LODWORD(v319) = v328;
  if (*((_QWORD *)&v327 + 1))
  {
    v200 = *(_QWORD *)(v327 + 8);
    if ((v199 & (v199 - 1)) != 0)
    {
      if (v200 >= v199)
        v200 %= v199;
    }
    else
    {
      v200 &= v199 - 1;
    }
    v198[v200] = (uint64_t (*)())&v318;
    v327 = 0uLL;
  }
  v320 = v329;
  v321 = v330;
  v332 = 0;
  v201 = operator new(0x40uLL);
  *v201 = &off_1E696CFA8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v201 + 1), (uint64_t *)&v317);
  v201[6] = v320;
  *((_DWORD *)v201 + 14) = v321;
  v332 = v201;
  v322 = 0u;
  v323 = 0u;
  v324 = 0;
  std::__function::__value_func<void ()(AMCP::Thing const&)>::__value_func[abi:ne180100]((uint64_t)&v322, (uint64_t)v331);
  v324 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Thing const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v196, v197, (AMCP *)&v322);
  if (v324)
    v324(0, (uint64_t)&v322, 0, 0);
  v202 = v332;
  if (v332 == v331)
  {
    v203 = 4;
    v202 = v331;
    goto LABEL_316;
  }
  if (v332)
  {
    v203 = 5;
LABEL_316:
    (*(void (**)(void))(*v202 + 8 * v203))();
  }
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v317);
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v325);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v314 + 40), &v314);
  v204 = v315;
  if (v315)
  {
    v205 = (unint64_t *)&v315->__shared_owners_;
    do
      v206 = __ldaxr(v205);
    while (__stlxr(v206 - 1, v205));
    if (!v206)
    {
      ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
      std::__shared_weak_count::__release_weak(v204);
    }
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v322, 0, 1.58366008e190);
  v207 = v322;
  v208 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(void)>>();
  v325 = &off_1E696D028;
  v326 = a1;
  *((_QWORD *)&v327 + 1) = &v325;
  v317 = 0u;
  v318 = 0u;
  v319 = 0;
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)&v317, (uint64_t)&v325);
  v319 = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v207, v208, (AMCP *)&v317);
  if (v319)
    v209.n128_f64[0] = v319(0, (uint64_t)&v317, 0, 0);
  v210 = (uint64_t (***)())*((_QWORD *)&v327 + 1);
  if (*((uint64_t (****)())&v327 + 1) == &v325)
  {
    v211 = 4;
    v210 = &v325;
  }
  else
  {
    if (!*((_QWORD *)&v327 + 1))
      goto LABEL_329;
    v211 = 5;
  }
  ((void (*)(__n128))(*v210)[v211])(v209);
LABEL_329:
  AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>(v322);
  v212 = v322;
  v213 = AMCP::Implementation::get_type_marker<std::function<void ()(BOOL const&)>>();
  v325 = &off_1E696D0A8;
  v326 = a1;
  *((_QWORD *)&v327 + 1) = &v325;
  v317 = 0u;
  v318 = 0u;
  v319 = 0;
  std::__function::__value_func<void ()(BOOL const&)>::__value_func[abi:ne180100]((uint64_t)&v317, (uint64_t)&v325);
  v319 = (double (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<void ()(BOOL const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v212, v213, (AMCP *)&v317);
  if (v319)
    v319(0, (uint64_t)&v317, 0, 0);
  v214 = (uint64_t (***)())*((_QWORD *)&v327 + 1);
  if (*((uint64_t (****)())&v327 + 1) == &v325)
  {
    v215 = 4;
    v214 = &v325;
    goto LABEL_335;
  }
  if (*((_QWORD *)&v327 + 1))
  {
    v215 = 5;
LABEL_335:
    (*v214)[v215]();
  }
  AMCP::Core::Operation_Utilities::add_generic_property_setter<BOOL>(v322);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v322 + 40), &v322);
  v216 = (std::__shared_weak_count *)*((_QWORD *)&v322 + 1);
  if (*((_QWORD *)&v322 + 1))
  {
    v217 = (unint64_t *)(*((_QWORD *)&v322 + 1) + 8);
    do
      v218 = __ldaxr(v217);
    while (__stlxr(v218 - 1, v217));
    if (!v218)
    {
      ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
      std::__shared_weak_count::__release_weak(v216);
    }
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v322, 0, 1.58366009e190);
  v219 = v322;
  v220 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(void)>>();
  v325 = &off_1E696D128;
  v326 = a1;
  *((_QWORD *)&v327 + 1) = &v325;
  v317 = 0u;
  v318 = 0u;
  v319 = 0;
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)&v317, (uint64_t)&v325);
  v319 = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v219, v220, (AMCP *)&v317);
  if (v319)
    v221.n128_f64[0] = v319(0, (uint64_t)&v317, 0, 0);
  v222 = (uint64_t (***)())*((_QWORD *)&v327 + 1);
  if (*((uint64_t (****)())&v327 + 1) == &v325)
  {
    v223 = 4;
    v222 = &v325;
  }
  else
  {
    if (!*((_QWORD *)&v327 + 1))
      goto LABEL_348;
    v223 = 5;
  }
  ((void (*)(__n128))(*v222)[v223])(v221);
LABEL_348:
  AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>(v322);
  v224 = v322;
  v225 = AMCP::Implementation::get_type_marker<std::function<void ()(BOOL const&)>>();
  v325 = &off_1E696D1A8;
  v326 = a1;
  *((_QWORD *)&v327 + 1) = &v325;
  v317 = 0u;
  v318 = 0u;
  v319 = 0;
  std::__function::__value_func<void ()(BOOL const&)>::__value_func[abi:ne180100]((uint64_t)&v317, (uint64_t)&v325);
  v319 = (double (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<void ()(BOOL const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v224, v225, (AMCP *)&v317);
  if (v319)
    v319(0, (uint64_t)&v317, 0, 0);
  v226 = (uint64_t (***)())*((_QWORD *)&v327 + 1);
  if (*((uint64_t (****)())&v327 + 1) == &v325)
  {
    v227 = 4;
    v226 = &v325;
    goto LABEL_354;
  }
  if (*((_QWORD *)&v327 + 1))
  {
    v227 = 5;
LABEL_354:
    (*v226)[v227]();
  }
  AMCP::Core::Operation_Utilities::add_generic_property_setter<BOOL>(v322);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v322 + 40), &v322);
  v228 = (std::__shared_weak_count *)*((_QWORD *)&v322 + 1);
  if (*((_QWORD *)&v322 + 1))
  {
    v229 = (unint64_t *)(*((_QWORD *)&v322 + 1) + 8);
    do
      v230 = __ldaxr(v229);
    while (__stlxr(v230 - 1, v229));
    if (!v230)
    {
      ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
      std::__shared_weak_count::__release_weak(v228);
    }
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v322, 0, 1.58366011e190);
  v231 = v322;
  v232 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(void)>>();
  v325 = &off_1E696D228;
  v326 = a1;
  *((_QWORD *)&v327 + 1) = &v325;
  v317 = 0u;
  v318 = 0u;
  v319 = 0;
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)&v317, (uint64_t)&v325);
  v319 = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v231, v232, (AMCP *)&v317);
  if (v319)
    v233.n128_f64[0] = v319(0, (uint64_t)&v317, 0, 0);
  v234 = (uint64_t (***)())*((_QWORD *)&v327 + 1);
  if (*((uint64_t (****)())&v327 + 1) == &v325)
  {
    v235 = 4;
    v234 = &v325;
  }
  else
  {
    if (!*((_QWORD *)&v327 + 1))
      goto LABEL_367;
    v235 = 5;
  }
  ((void (*)(__n128))(*v234)[v235])(v233);
LABEL_367:
  AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>(v322);
  v236 = v322;
  v237 = AMCP::Implementation::get_type_marker<std::function<void ()(BOOL const&)>>();
  v325 = &off_1E696D2A8;
  v326 = a1;
  *((_QWORD *)&v327 + 1) = &v325;
  v317 = 0u;
  v318 = 0u;
  v319 = 0;
  std::__function::__value_func<void ()(BOOL const&)>::__value_func[abi:ne180100]((uint64_t)&v317, (uint64_t)&v325);
  v319 = (double (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<void ()(BOOL const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v236, v237, (AMCP *)&v317);
  if (v319)
    v319(0, (uint64_t)&v317, 0, 0);
  v238 = (uint64_t (***)())*((_QWORD *)&v327 + 1);
  if (*((uint64_t (****)())&v327 + 1) == &v325)
  {
    v239 = 4;
    v238 = &v325;
    goto LABEL_373;
  }
  if (*((_QWORD *)&v327 + 1))
  {
    v239 = 5;
LABEL_373:
    (*v238)[v239]();
  }
  AMCP::Core::Operation_Utilities::add_generic_property_setter<BOOL>(v322);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v322 + 40), &v322);
  v240 = (std::__shared_weak_count *)*((_QWORD *)&v322 + 1);
  if (*((_QWORD *)&v322 + 1))
  {
    v241 = (unint64_t *)(*((_QWORD *)&v322 + 1) + 8);
    do
      v242 = __ldaxr(v241);
    while (__stlxr(v242 - 1, v241));
    if (!v242)
    {
      ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
      std::__shared_weak_count::__release_weak(v240);
    }
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v322, 0, 1.58366011e190);
  v243 = v322;
  v244 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(void)>>();
  v325 = &off_1E696D328;
  v326 = a1;
  *((_QWORD *)&v327 + 1) = &v325;
  v317 = 0u;
  v318 = 0u;
  v319 = 0;
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)&v317, (uint64_t)&v325);
  v319 = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v243, v244, (AMCP *)&v317);
  if (v319)
    v245.n128_f64[0] = v319(0, (uint64_t)&v317, 0, 0);
  v246 = (uint64_t (***)())*((_QWORD *)&v327 + 1);
  if (*((uint64_t (****)())&v327 + 1) == &v325)
  {
    v247 = 4;
    v246 = &v325;
  }
  else
  {
    if (!*((_QWORD *)&v327 + 1))
      goto LABEL_386;
    v247 = 5;
  }
  ((void (*)(__n128))(*v246)[v247])(v245);
LABEL_386:
  AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>(v322);
  v248 = v322;
  v249 = AMCP::Implementation::get_type_marker<std::function<void ()(BOOL const&)>>();
  v325 = &off_1E696D3A8;
  v326 = a1;
  *((_QWORD *)&v327 + 1) = &v325;
  v317 = 0u;
  v318 = 0u;
  v319 = 0;
  std::__function::__value_func<void ()(BOOL const&)>::__value_func[abi:ne180100]((uint64_t)&v317, (uint64_t)&v325);
  v319 = (double (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<void ()(BOOL const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v248, v249, (AMCP *)&v317);
  if (v319)
    v319(0, (uint64_t)&v317, 0, 0);
  v250 = (uint64_t (***)())*((_QWORD *)&v327 + 1);
  if (*((uint64_t (****)())&v327 + 1) == &v325)
  {
    v251 = 4;
    v250 = &v325;
    goto LABEL_392;
  }
  if (*((_QWORD *)&v327 + 1))
  {
    v251 = 5;
LABEL_392:
    (*v250)[v251]();
  }
  AMCP::Core::Operation_Utilities::add_generic_property_setter<BOOL>(v322);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v322 + 40), &v322);
  v252 = (std::__shared_weak_count *)*((_QWORD *)&v322 + 1);
  if (*((_QWORD *)&v322 + 1))
  {
    v253 = (unint64_t *)(*((_QWORD *)&v322 + 1) + 8);
    do
      v254 = __ldaxr(v253);
    while (__stlxr(v254 - 1, v253));
    if (!v254)
    {
      ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
      std::__shared_weak_count::__release_weak(v252);
    }
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)&v317, 0, 1.58366009e190);
  v255 = v317;
  v317 = 0uLL;
  v256 = (std::__shared_weak_count *)*((_QWORD *)&v316 + 1);
  v316 = v255;
  if (v256)
  {
    v257 = (unint64_t *)&v256->__shared_owners_;
    do
      v258 = __ldaxr(v257);
    while (__stlxr(v258 - 1, v257));
    if (!v258)
    {
      ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
      std::__shared_weak_count::__release_weak(v256);
    }
  }
  v259 = (std::__shared_weak_count *)*((_QWORD *)&v317 + 1);
  if (*((_QWORD *)&v317 + 1))
  {
    v260 = (unint64_t *)(*((_QWORD *)&v317 + 1) + 8);
    do
      v261 = __ldaxr(v260);
    while (__stlxr(v261 - 1, v260));
    if (!v261)
    {
      ((void (*)(std::__shared_weak_count *))v259->__on_zero_shared)(v259);
      std::__shared_weak_count::__release_weak(v259);
    }
  }
  v262 = v316;
  v263 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Power_State)>>();
  v325 = &off_1E696D428;
  v326 = a1;
  *((_QWORD *)&v327 + 1) = &v325;
  v317 = 0u;
  v318 = 0u;
  v319 = 0;
  std::__function::__value_func<void ()(AMCP::Power_State)>::__value_func[abi:ne180100]((uint64_t)&v317, (uint64_t)&v325);
  v319 = (double (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Power_State)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v262, v263, (AMCP *)&v317);
  if (v319)
    v319(0, (uint64_t)&v317, 0, 0);
  v264 = (uint64_t (***)())*((_QWORD *)&v327 + 1);
  if (*((uint64_t (****)())&v327 + 1) == &v325)
  {
    v265 = 4;
    v264 = &v325;
    goto LABEL_414;
  }
  if (*((_QWORD *)&v327 + 1))
  {
    v265 = 5;
LABEL_414:
    (*v264)[v265]();
  }
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v262 + 40), &v316);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)&v317, 0, 1.5836601e190);
  v266 = v317;
  v317 = 0uLL;
  v267 = (std::__shared_weak_count *)*((_QWORD *)&v316 + 1);
  v316 = v266;
  if (v267)
  {
    v268 = (unint64_t *)&v267->__shared_owners_;
    do
      v269 = __ldaxr(v268);
    while (__stlxr(v269 - 1, v268));
    if (!v269)
    {
      ((void (*)(std::__shared_weak_count *))v267->__on_zero_shared)(v267);
      std::__shared_weak_count::__release_weak(v267);
    }
  }
  v270 = (std::__shared_weak_count *)*((_QWORD *)&v317 + 1);
  if (*((_QWORD *)&v317 + 1))
  {
    v271 = (unint64_t *)(*((_QWORD *)&v317 + 1) + 8);
    do
      v272 = __ldaxr(v271);
    while (__stlxr(v272 - 1, v271));
    if (!v272)
    {
      ((void (*)(std::__shared_weak_count *))v270->__on_zero_shared)(v270);
      std::__shared_weak_count::__release_weak(v270);
    }
  }
  v273 = v316;
  v274 = AMCP::Implementation::get_type_marker<std::function<std::shared_ptr<AMCP::Graph::Timebase> ()(void)>>();
  v325 = &off_1E696D500;
  v326 = a1;
  *((_QWORD *)&v327 + 1) = &v325;
  v317 = 0u;
  v318 = 0u;
  v319 = 0;
  std::__function::__value_func<std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::__value_func[abi:ne180100]((uint64_t)&v317, (uint64_t)&v325);
  v319 = AMCP::Implementation::In_Place_Storage<std::function<std::shared_ptr<AMCP::Graph::Timebase> ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v273, v274, (AMCP *)&v317);
  if (v319)
    v275.n128_f64[0] = v319(0, (uint64_t)&v317, 0, 0);
  v276 = (uint64_t (***)())*((_QWORD *)&v327 + 1);
  if (*((uint64_t (****)())&v327 + 1) == &v325)
  {
    v277 = 4;
    v276 = &v325;
  }
  else
  {
    if (!*((_QWORD *)&v327 + 1))
      goto LABEL_432;
    v277 = 5;
  }
  ((void (*)(__n128))(*v276)[v277])(v275);
LABEL_432:
  v278 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  v325 = &off_1E696D580;
  v326 = a1;
  *((_QWORD *)&v327 + 1) = &v325;
  v317 = 0u;
  v318 = 0u;
  v319 = 0;
  std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)&v317, (uint64_t)&v325);
  v319 = (double (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v273, v278, (AMCP *)&v317);
  if (v319)
    v319(0, (uint64_t)&v317, 0, 0);
  v279 = (uint64_t (***)())*((_QWORD *)&v327 + 1);
  if (*((uint64_t (****)())&v327 + 1) == &v325)
  {
    v280 = 4;
    v279 = &v325;
    goto LABEL_438;
  }
  if (*((_QWORD *)&v327 + 1))
  {
    v280 = 5;
LABEL_438:
    (*v279)[v280]();
  }
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v273 + 40), &v316);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)&v317, 0, 1.58366012e190);
  v281 = v317;
  v317 = 0uLL;
  v282 = (std::__shared_weak_count *)*((_QWORD *)&v316 + 1);
  v316 = v281;
  if (v282)
  {
    v283 = (unint64_t *)&v282->__shared_owners_;
    do
      v284 = __ldaxr(v283);
    while (__stlxr(v284 - 1, v283));
    if (!v284)
    {
      ((void (*)(std::__shared_weak_count *))v282->__on_zero_shared)(v282);
      std::__shared_weak_count::__release_weak(v282);
    }
  }
  v285 = (std::__shared_weak_count *)*((_QWORD *)&v317 + 1);
  if (*((_QWORD *)&v317 + 1))
  {
    v286 = (unint64_t *)(*((_QWORD *)&v317 + 1) + 8);
    do
      v287 = __ldaxr(v286);
    while (__stlxr(v287 - 1, v286));
    if (!v287)
    {
      ((void (*)(std::__shared_weak_count *))v285->__on_zero_shared)(v285);
      std::__shared_weak_count::__release_weak(v285);
    }
  }
  v288 = v316;
  v289 = AMCP::Implementation::get_type_marker<std::function<AMCP::Graph::Timebase_Set ()(void)>>();
  v325 = &off_1E696D600;
  v326 = a1;
  *((_QWORD *)&v327 + 1) = &v325;
  v317 = 0u;
  v318 = 0u;
  v319 = 0;
  std::__function::__value_func<AMCP::Graph::Timebase_Set ()(void)>::__value_func[abi:ne180100]((uint64_t)&v317, (uint64_t)&v325);
  v319 = (double (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<AMCP::Graph::Timebase_Set ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v288, v289, (AMCP *)&v317);
  if (v319)
    v319(0, (uint64_t)&v317, 0, 0);
  v290 = (uint64_t (***)())*((_QWORD *)&v327 + 1);
  if (*((uint64_t (****)())&v327 + 1) == &v325)
  {
    v291 = 4;
    v290 = &v325;
  }
  else
  {
    if (!*((_QWORD *)&v327 + 1))
      goto LABEL_456;
    v291 = 5;
  }
  (*v290)[v291]();
LABEL_456:
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v325, v288);
  v329 = *(_QWORD *)(v288 + 40);
  v330 = *(_DWORD *)(v288 + 48);
  v292 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  v293 = v325;
  v294 = v326;
  v325 = 0;
  v326 = 0;
  *(_QWORD *)&v317 = v293;
  *((_QWORD *)&v317 + 1) = v294;
  v318 = v327;
  LODWORD(v319) = v328;
  if (*((_QWORD *)&v327 + 1))
  {
    v295 = *(_QWORD *)(v327 + 8);
    if ((v294 & (v294 - 1)) != 0)
    {
      if (v295 >= v294)
        v295 %= v294;
    }
    else
    {
      v295 &= v294 - 1;
    }
    v293[v295] = (uint64_t (*)())&v318;
    v327 = 0uLL;
  }
  v320 = v329;
  v321 = v330;
  v332 = 0;
  v296 = operator new(0x40uLL);
  *v296 = &off_1E696D690;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v296 + 1), (uint64_t *)&v317);
  v296[6] = v320;
  *((_DWORD *)v296 + 14) = v321;
  v332 = v296;
  v322 = 0u;
  v323 = 0u;
  v324 = 0;
  std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)&v322, (uint64_t)v331);
  v324 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v288, v292, (AMCP *)&v322);
  if (v324)
    v324(0, (uint64_t)&v322, 0, 0);
  v297 = v332;
  if (v332 == v331)
  {
    v298 = 4;
    v297 = v331;
  }
  else
  {
    if (!v332)
      goto LABEL_469;
    v298 = 5;
  }
  (*(void (**)(void))(*v297 + 8 * v298))();
LABEL_469:
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v317);
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v325);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v288 + 40), &v316);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v322, 0, 1.58366012e190);
  v299 = v322;
  v300 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(void)>>();
  v325 = &off_1E696D720;
  v326 = a1;
  *((_QWORD *)&v327 + 1) = &v325;
  v317 = 0u;
  v318 = 0u;
  v319 = 0;
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)&v317, (uint64_t)&v325);
  v319 = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v299, v300, (AMCP *)&v317);
  if (v319)
    v301.n128_f64[0] = v319(0, (uint64_t)&v317, 0, 0);
  v302 = (uint64_t (***)())*((_QWORD *)&v327 + 1);
  if (*((uint64_t (****)())&v327 + 1) == &v325)
  {
    v303 = 4;
    v302 = &v325;
  }
  else
  {
    if (!*((_QWORD *)&v327 + 1))
      goto LABEL_476;
    v303 = 5;
  }
  ((void (*)(__n128))(*v302)[v303])(v301);
LABEL_476:
  AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>(v299);
  v304 = v322;
  v305 = AMCP::Implementation::get_type_marker<std::function<void ()(BOOL const&)>>();
  v325 = &off_1E696D7A0;
  v326 = a1;
  *((_QWORD *)&v327 + 1) = &v325;
  v317 = 0u;
  v318 = 0u;
  v319 = 0;
  std::__function::__value_func<void ()(BOOL const&)>::__value_func[abi:ne180100]((uint64_t)&v317, (uint64_t)&v325);
  v319 = (double (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<void ()(BOOL const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v304, v305, (AMCP *)&v317);
  if (v319)
    v319(0, (uint64_t)&v317, 0, 0);
  v306 = (uint64_t (***)())*((_QWORD *)&v327 + 1);
  if (*((uint64_t (****)())&v327 + 1) == &v325)
  {
    v307 = 4;
    v306 = &v325;
    goto LABEL_482;
  }
  if (*((_QWORD *)&v327 + 1))
  {
    v307 = 5;
LABEL_482:
    (*v306)[v307]();
  }
  AMCP::Core::Operation_Utilities::add_generic_property_setter<BOOL>(v322);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v322 + 40), &v322);
  v308 = (std::__shared_weak_count *)*((_QWORD *)&v322 + 1);
  if (*((_QWORD *)&v322 + 1))
  {
    v309 = (unint64_t *)(*((_QWORD *)&v322 + 1) + 8);
    do
      v310 = __ldaxr(v309);
    while (__stlxr(v310 - 1, v309));
    if (!v310)
    {
      ((void (*)(std::__shared_weak_count *))v308->__on_zero_shared)(v308);
      std::__shared_weak_count::__release_weak(v308);
    }
  }
  AMCP::IO_Core::Node::update_core(a1, a2);
  v311 = (std::__shared_weak_count *)*((_QWORD *)&v316 + 1);
  if (*((_QWORD *)&v316 + 1))
  {
    v312 = (unint64_t *)(*((_QWORD *)&v316 + 1) + 8);
    do
      v313 = __ldaxr(v312);
    while (__stlxr(v313 - 1, v312));
    if (!v313)
    {
      ((void (*)(std::__shared_weak_count *))v311->__on_zero_shared)(v311);
      std::__shared_weak_count::__release_weak(v311);
    }
  }
}

void sub_1B57F4834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::IO_Core::IOContext_Core::get_class_id(AMCP::IO_Core::IOContext_Core *this)
{
  return 1768907630;
}

uint64_t std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>(uint64_t *a1, int a2, double a3)
{
  _QWORD *v6;
  uint64_t result;
  double v8;
  int v9;

  v6 = operator new(0x50uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E699FA88;
  v8 = a3;
  v9 = a2;
  result = AMCP::Core::Operation::Operation((uint64_t)(v6 + 3), (int *)&v8);
  *a1 = result;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1B57F4ABC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

double AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(void)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  double result;
  _QWORD *v7;
  uint64_t v8;
  _OWORD v9[2];
  void (*v10)(_QWORD, _OWORD *, _QWORD, _QWORD);

  switch(a1)
  {
    case 0:
      goto LABEL_4;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(void)>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(void)>>::dispatch;
LABEL_4:
      v7 = *(_QWORD **)(a2 + 24);
      if (v7 == (_QWORD *)a2)
      {
        v8 = 4;
        v7 = (_QWORD *)a2;
      }
      else
      {
        if (!v7)
          goto LABEL_14;
        v8 = 5;
      }
      (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_14:
      *(_QWORD *)(a2 + 32) = 0;
      result = 0.0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      *a4 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(void)>>();
      return result;
    case 4:
      AMCP::Implementation::get_type_marker<std::function<BOOL ()(void)>>();
      return result;
    case 6:
      v10 = 0;
      memset(v9, 0, sizeof(v9));
      AMCP::swap((AMCP::Thing *)v9, a3, a3);
      if (v10)
        v10(0, v9, 0, 0);
      return result;
    default:
      return result;
  }
}

void std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(uint64_t a1, unint64_t a2, AMCP *this)
{
  unint64_t v3;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *i;
  unint64_t v11;
  char *v12;
  void (*v13)(uint64_t, AMCP *, char *, _QWORD);
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = (_QWORD *)*v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2)
          {
            AMCP::swap(this, (AMCP::Thing *)(i + 3), this);
            return;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = (char *)operator new(0x40uLL);
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = a2;
  *((_QWORD *)v12 + 2) = a2;
  *(_OWORD *)(v12 + 24) = 0u;
  *(_OWORD *)(v12 + 40) = 0u;
  *((_QWORD *)v12 + 7) = 0;
  v13 = (void (*)(uint64_t, AMCP *, char *, _QWORD))*((_QWORD *)this + 4);
  if (v13)
    v13(2, this, v12 + 24, 0);
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>(a1, v19);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2)
        v3 = a2 % v7;
      else
        v3 = a2;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v21)
  {
    *(_QWORD *)v12 = *v21;
LABEL_40:
    *v21 = v12;
    goto LABEL_41;
  }
  *(_QWORD *)v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v20 + 8 * v3) = a1 + 16;
  if (*(_QWORD *)v12)
  {
    v22 = *(_QWORD *)(*(_QWORD *)v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v22 >= v7)
        v22 %= v7;
    }
    else
    {
      v22 &= v7 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_40;
  }
LABEL_41:
  ++*(_QWORD *)(a1 + 24);
}

void sub_1B57F4EBC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(uint64_t a1, unsigned int *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  float v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  _QWORD v37[2];
  char v38;

  v7 = *a2;
  v8 = a2[1];
  v9 = a2[2];
  v10 = v8 & 0xFF000000 | (unint64_t)(v7 << 32) | *(_QWORD *)&v9 & 0xFFFFFFLL;
  v11 = *(_QWORD *)(a1 + 8);
  if (!v11)
    goto LABEL_19;
  v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    v3 = v8 & 0xFF000000 | (unint64_t)(v7 << 32) | *(_QWORD *)&v9 & 0xFFFFFFLL;
    if (v10 >= v11)
      v3 = v10 % v11;
  }
  else
  {
    v3 = v10 & (v11 - 1);
  }
  v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
  if (!v13 || (v14 = *v13) == 0)
  {
LABEL_19:
    v16 = (_QWORD *)(a1 + 16);
    v17 = operator new(0x30uLL);
    v37[0] = v17;
    v37[1] = a1 + 16;
    *v17 = 0;
    v17[1] = v10;
    v17[2] = *(_QWORD *)a2;
    *((_DWORD *)v17 + 6) = v9;
    v18 = a3[1];
    v17[4] = *a3;
    v17[5] = v18;
    if (v18)
    {
      v19 = (unint64_t *)(v18 + 8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    v38 = 1;
    v21 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
    v22 = *(float *)(a1 + 32);
    if (!v11 || (float)(v22 * (float)v11) < v21)
    {
      v23 = 1;
      if (v11 >= 3)
        v23 = (v11 & (v11 - 1)) != 0;
      v24 = v23 | (2 * v11);
      v25 = vcvtps_u32_f32(v21 / v22);
      if (v24 <= v25)
        v26 = v25;
      else
        v26 = v24;
      std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>(a1, v26);
      v11 = *(_QWORD *)(a1 + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v10 >= v11)
          v3 = v10 % v11;
        else
          v3 = v10;
      }
      else
      {
        v3 = (v11 - 1) & v10;
      }
    }
    v27 = *(_QWORD *)a1;
    v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v28)
    {
      *v17 = *v28;
    }
    else
    {
      *v17 = *v16;
      *v16 = v17;
      *(_QWORD *)(v27 + 8 * v3) = v16;
      if (!*v17)
      {
LABEL_43:
        v37[0] = 0;
        ++*(_QWORD *)(a1 + 24);
        std::unique_ptr<std::__hash_node<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,void *>>>>::reset[abi:ne180100]((uint64_t)v37);
        return;
      }
      v29 = *(_QWORD *)(*v17 + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v29 >= v11)
          v29 %= v11;
      }
      else
      {
        v29 &= v11 - 1;
      }
      v28 = (_QWORD *)(*(_QWORD *)a1 + 8 * v29);
    }
    *v28 = v17;
    goto LABEL_43;
  }
  while (1)
  {
    v15 = v14[1];
    if (v15 == v10)
      break;
    if (v12.u32[0] > 1uLL)
    {
      if (v15 >= v11)
        v15 %= v11;
    }
    else
    {
      v15 &= v11 - 1;
    }
    if (v15 != v3)
      goto LABEL_19;
LABEL_18:
    v14 = (uint64_t *)*v14;
    if (!v14)
      goto LABEL_19;
  }
  if (v14[2] != __PAIR64__(v8, v7) || *((_DWORD *)v14 + 6) != v9)
    goto LABEL_18;
  v31 = *a3;
  v30 = a3[1];
  if (v30)
  {
    v32 = (unint64_t *)(v30 + 8);
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  v34 = (std::__shared_weak_count *)v14[5];
  v14[4] = v31;
  v14[5] = v30;
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldaxr(p_shared_owners);
    while (__stlxr(v36 - 1, p_shared_owners));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
}

void sub_1B57F51C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<BOOL ()(unsigned long long)>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const std::type_info *v4;

  v1 = &unk_1EF130000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EF130000;
    if (v3)
    {
      v1 = (_QWORD *)&unk_1EF130000;
    }
  }
  return v1[282];
}

uint64_t std::__function::__value_func<BOOL ()(unsigned long long)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(unsigned long long)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  void (*v14)(_QWORD, _OWORD *, _QWORD, _QWORD);

  result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      v9 = *(_QWORD *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((_QWORD *)a3 + 3) = a3;
          (*(void (**)(_QWORD, AMCP::Thing *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a3);
        }
        else
        {
          *((_QWORD *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        }
      }
      result = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(unsigned long long)>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<BOOL ()(unsigned long long)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(unsigned long long)>>::dispatch;
LABEL_6:
      v10 = *(_QWORD **)(a2 + 24);
      if (v10 == (_QWORD *)a2)
      {
        v11 = 4;
        v10 = (_QWORD *)a2;
      }
      else
      {
        if (!v10)
          goto LABEL_18;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_18:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      v12 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(unsigned long long)>>();
      result = 0;
      *a4 = v12;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<BOOL ()(unsigned long long)>>())
        return a2;
      else
        return 0;
    case 6:
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      AMCP::swap((AMCP::Thing *)v13, a3, a3);
      if (v14)
        v14(0, v13, 0, 0);
      return 0;
    default:
      return result;
  }
}

uint64_t AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const std::type_info *v4;

  v1 = &unk_1EF130000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EF130000;
    if (v3)
    {
      v1 = (_QWORD *)&unk_1EF130000;
    }
  }
  return v1[352];
}

uint64_t std::__function::__value_func<void ()(AMCP::Thing const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Thing const&)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  void (*v14)(_QWORD, _OWORD *, _QWORD, _QWORD);

  result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      v9 = *(_QWORD *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((_QWORD *)a3 + 3) = a3;
          (*(void (**)(_QWORD, AMCP::Thing *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a3);
        }
        else
        {
          *((_QWORD *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        }
      }
      result = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Thing const&)>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<void ()(AMCP::Thing const&)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Thing const&)>>::dispatch;
LABEL_6:
      v10 = *(_QWORD **)(a2 + 24);
      if (v10 == (_QWORD *)a2)
      {
        v11 = 4;
        v10 = (_QWORD *)a2;
      }
      else
      {
        if (!v10)
          goto LABEL_18;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_18:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      v12 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
      result = 0;
      *a4 = v12;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>())
        return a2;
      else
        return 0;
    case 6:
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      AMCP::swap((AMCP::Thing *)v13, a3, a3);
      if (v14)
        v14(0, v13, 0, 0);
      return 0;
    default:
      return result;
  }
}

uint64_t AMCP::Implementation::get_type_marker<std::function<BOOL ()(std::vector<std::shared_ptr<AMCP::Graph::Timebase>> const&)>>()
{
  unsigned __int8 v0;
  int *v1;
  int v3;
  const std::type_info *v4;

  v1 = &OBJC_IVAR___DSP_HAL_Mock_IOProcessor__processorProperties;
  if ((v0 & 1) == 0)
  {
    v1 = &OBJC_IVAR___DSP_HAL_Mock_IOProcessor__processorProperties;
    if (v3)
    {
      v1 = &OBJC_IVAR___DSP_HAL_Mock_IOProcessor__processorProperties;
    }
  }
  return *((_QWORD *)v1 + 356);
}

uint64_t std::__function::__value_func<BOOL ()(std::vector<std::shared_ptr<AMCP::Graph::Timebase>> const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(std::vector<std::shared_ptr<AMCP::Graph::Timebase>> const&)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  void (*v14)(_QWORD, _OWORD *, _QWORD, _QWORD);

  result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      v9 = *(_QWORD *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((_QWORD *)a3 + 3) = a3;
          (*(void (**)(_QWORD, AMCP::Thing *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a3);
        }
        else
        {
          *((_QWORD *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        }
      }
      result = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(std::vector<std::shared_ptr<AMCP::Graph::Timebase>> const&)>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<BOOL ()(std::vector<std::shared_ptr<AMCP::Graph::Timebase>> const&)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(std::vector<std::shared_ptr<AMCP::Graph::Timebase>> const&)>>::dispatch;
LABEL_6:
      v10 = *(_QWORD **)(a2 + 24);
      if (v10 == (_QWORD *)a2)
      {
        v11 = 4;
        v10 = (_QWORD *)a2;
      }
      else
      {
        if (!v10)
          goto LABEL_18;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_18:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      v12 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(std::vector<std::shared_ptr<AMCP::Graph::Timebase>> const&)>>();
      result = 0;
      *a4 = v12;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<BOOL ()(std::vector<std::shared_ptr<AMCP::Graph::Timebase>> const&)>>())
        return a2;
      else
        return 0;
    case 6:
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      AMCP::swap((AMCP::Thing *)v13, a3, a3);
      if (v14)
        v14(0, v13, 0, 0);
      return 0;
    default:
      return result;
  }
}

uint64_t AMCP::Implementation::get_type_marker<std::function<AMCP::Transport_State ()(void)>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const std::type_info *v4;

  v1 = &unk_1EF130000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EF130000;
    if (v3)
    {
      v1 = (_QWORD *)&unk_1EF130000;
    }
  }
  return v1[278];
}

uint64_t std::__function::__value_func<AMCP::Transport_State ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<AMCP::Transport_State ()(void)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  void (*v14)(_QWORD, _OWORD *, _QWORD, _QWORD);

  result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      v9 = *(_QWORD *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((_QWORD *)a3 + 3) = a3;
          (*(void (**)(_QWORD, AMCP::Thing *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a3);
        }
        else
        {
          *((_QWORD *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        }
      }
      result = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Transport_State ()(void)>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<AMCP::Transport_State ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Transport_State ()(void)>>::dispatch;
LABEL_6:
      v10 = *(_QWORD **)(a2 + 24);
      if (v10 == (_QWORD *)a2)
      {
        v11 = 4;
        v10 = (_QWORD *)a2;
      }
      else
      {
        if (!v10)
          goto LABEL_18;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_18:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      v12 = AMCP::Implementation::get_type_marker<std::function<AMCP::Transport_State ()(void)>>();
      result = 0;
      *a4 = v12;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<AMCP::Transport_State ()(void)>>())
        return a2;
      else
        return 0;
    case 6:
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      AMCP::swap((AMCP::Thing *)v13, a3, a3);
      if (v14)
        v14(0, v13, 0, 0);
      return 0;
    default:
      return result;
  }
}

uint64_t AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Pause_Behavior)>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const std::type_info *v4;

  v1 = &unk_1EF130000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EF130000;
    if (v3)
    {
      v1 = (_QWORD *)&unk_1EF130000;
    }
  }
  return v1[490];
}

uint64_t std::__function::__value_func<void ()(AMCP::Pause_Behavior)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Pause_Behavior)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  void (*v14)(_QWORD, _OWORD *, _QWORD, _QWORD);

  result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      v9 = *(_QWORD *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((_QWORD *)a3 + 3) = a3;
          (*(void (**)(_QWORD, AMCP::Thing *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a3);
        }
        else
        {
          *((_QWORD *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        }
      }
      result = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Pause_Behavior)>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<void ()(AMCP::Pause_Behavior)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Pause_Behavior)>>::dispatch;
LABEL_6:
      v10 = *(_QWORD **)(a2 + 24);
      if (v10 == (_QWORD *)a2)
      {
        v11 = 4;
        v10 = (_QWORD *)a2;
      }
      else
      {
        if (!v10)
          goto LABEL_18;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_18:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      v12 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Pause_Behavior)>>();
      result = 0;
      *a4 = v12;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Pause_Behavior)>>())
        return a2;
      else
        return 0;
    case 6:
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      AMCP::swap((AMCP::Thing *)v13, a3, a3);
      if (v14)
        v14(0, v13, 0, 0);
      return 0;
    default:
      return result;
  }
}

uint64_t AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Resume_Behavior)>>()
{
  unsigned __int8 v0;
  int *v1;
  int v3;
  const std::type_info *v4;

  v1 = &OBJC_IVAR___DSP_HAL_Mock_IOProcessor__processorProperties;
  if ((v0 & 1) == 0)
  {
    v1 = &OBJC_IVAR___DSP_HAL_Mock_IOProcessor__processorProperties;
    if (v3)
    {
      v1 = &OBJC_IVAR___DSP_HAL_Mock_IOProcessor__processorProperties;
    }
  }
  return *((_QWORD *)v1 + 358);
}

uint64_t std::__function::__value_func<void ()(AMCP::Resume_Behavior)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Resume_Behavior)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  void (*v14)(_QWORD, _OWORD *, _QWORD, _QWORD);

  result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      v9 = *(_QWORD *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((_QWORD *)a3 + 3) = a3;
          (*(void (**)(_QWORD, AMCP::Thing *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a3);
        }
        else
        {
          *((_QWORD *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        }
      }
      result = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Resume_Behavior)>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<void ()(AMCP::Resume_Behavior)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Resume_Behavior)>>::dispatch;
LABEL_6:
      v10 = *(_QWORD **)(a2 + 24);
      if (v10 == (_QWORD *)a2)
      {
        v11 = 4;
        v10 = (_QWORD *)a2;
      }
      else
      {
        if (!v10)
          goto LABEL_18;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_18:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      v12 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Resume_Behavior)>>();
      result = 0;
      *a4 = v12;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Resume_Behavior)>>())
        return a2;
      else
        return 0;
    case 6:
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      AMCP::swap((AMCP::Thing *)v13, a3, a3);
      if (v14)
        v14(0, v13, 0, 0);
      return 0;
    default:
      return result;
  }
}

uint64_t std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(uint64_t *a1, int a2, double a3)
{
  _QWORD *v6;
  uint64_t result;
  double v8;
  int v9;

  v6 = operator new(0x50uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E699FA88;
  v8 = a3;
  v9 = a2;
  result = AMCP::Core::Operation::Operation((uint64_t)(v6 + 3), (int *)&v8);
  *a1 = result;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1B57F5FD8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<unsigned int ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<unsigned int ()(void)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  void (*v14)(_QWORD, _OWORD *, _QWORD, _QWORD);

  result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      v9 = *(_QWORD *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((_QWORD *)a3 + 3) = a3;
          (*(void (**)(_QWORD, AMCP::Thing *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a3);
        }
        else
        {
          *((_QWORD *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        }
      }
      result = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<unsigned int ()(void)>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<unsigned int ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<unsigned int ()(void)>>::dispatch;
LABEL_6:
      v10 = *(_QWORD **)(a2 + 24);
      if (v10 == (_QWORD *)a2)
      {
        v11 = 4;
        v10 = (_QWORD *)a2;
      }
      else
      {
        if (!v10)
          goto LABEL_18;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_18:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      v12 = AMCP::Implementation::get_type_marker<std::function<unsigned int ()(void)>>();
      result = 0;
      *a4 = v12;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<unsigned int ()(void)>>())
        return a2;
      else
        return 0;
    case 6:
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      AMCP::swap((AMCP::Thing *)v13, a3, a3);
      if (v14)
        v14(0, v13, 0, 0);
      return 0;
    default:
      return result;
  }
}

uint64_t AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20[2];
  _QWORD v21[2];
  int v22;
  uint64_t v23;
  int v24;
  _OWORD v25[2];
  void (*v26)(int, uint64_t, AMCP::Thing *, uint64_t *);
  _BYTE v27[24];
  _BYTE *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v13, a1);
  v18 = *(_QWORD *)(a1 + 40);
  v19 = *(_DWORD *)(a1 + 48);
  v2 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  v3 = v13;
  v4 = v14;
  v13 = 0;
  v14 = 0;
  v20[0] = v3;
  v20[1] = v4;
  v21[0] = v15;
  v21[1] = v16;
  v22 = v17;
  if (v16)
  {
    v5 = *(_QWORD *)(v15 + 8);
    if ((v4 & (v4 - 1)) != 0)
    {
      if (v5 >= v4)
        v5 %= v4;
    }
    else
    {
      v5 &= v4 - 1;
    }
    *(_QWORD *)(v3 + 8 * v5) = v21;
    v15 = 0;
    v16 = 0;
  }
  v23 = v18;
  v24 = v19;
  v28 = 0;
  v6 = operator new(0x40uLL);
  *v6 = &off_1E699FE18;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v6 + 1), v20);
  v6[6] = v23;
  *((_DWORD *)v6 + 14) = v24;
  v28 = v6;
  memset(v25, 0, sizeof(v25));
  v26 = 0;
  std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)v25, (uint64_t)v27);
  v26 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(a1, v2, (AMCP *)v25);
  if (v26)
    v26(0, (uint64_t)v25, 0, 0);
  v10 = v28;
  if (v28 == v27)
  {
    v11 = 4;
    v10 = v27;
    goto LABEL_13;
  }
  if (v28)
  {
    v11 = 5;
LABEL_13:
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v10 + 8 * v11))(v10, v7, v8, v9);
  }
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v20);
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v13);
}

void sub_1B57F6384(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<void ()(unsigned int const&)>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const std::type_info *v4;

  v1 = &unk_1EF130000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EF130000;
    if (v3)
    {
      v1 = (_QWORD *)&unk_1EF130000;
    }
  }
  return v1[350];
}

uint64_t std::__function::__value_func<void ()(unsigned int const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<void ()(unsigned int const&)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  void (*v14)(_QWORD, _OWORD *, _QWORD, _QWORD);

  result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      v9 = *(_QWORD *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((_QWORD *)a3 + 3) = a3;
          (*(void (**)(_QWORD, AMCP::Thing *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a3);
        }
        else
        {
          *((_QWORD *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        }
      }
      result = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(unsigned int const&)>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<void ()(unsigned int const&)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(unsigned int const&)>>::dispatch;
LABEL_6:
      v10 = *(_QWORD **)(a2 + 24);
      if (v10 == (_QWORD *)a2)
      {
        v11 = 4;
        v10 = (_QWORD *)a2;
      }
      else
      {
        if (!v10)
          goto LABEL_18;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_18:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      v12 = AMCP::Implementation::get_type_marker<std::function<void ()(unsigned int const&)>>();
      result = 0;
      *a4 = v12;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<void ()(unsigned int const&)>>())
        return a2;
      else
        return 0;
    case 6:
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      AMCP::swap((AMCP::Thing *)v13, a3, a3);
      if (v14)
        v14(0, v13, 0, 0);
      return 0;
    default:
      return result;
  }
}

uint64_t AMCP::Core::Operation_Utilities::add_generic_property_setter<unsigned int>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20[2];
  _QWORD v21[2];
  int v22;
  uint64_t v23;
  int v24;
  _OWORD v25[2];
  void (*v26)(int, uint64_t, AMCP::Thing *, uint64_t *);
  _BYTE v27[24];
  _BYTE *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v13, a1);
  v18 = *(_QWORD *)(a1 + 40);
  v19 = *(_DWORD *)(a1 + 48);
  v2 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
  v3 = v13;
  v4 = v14;
  v13 = 0;
  v14 = 0;
  v20[0] = v3;
  v20[1] = v4;
  v21[0] = v15;
  v21[1] = v16;
  v22 = v17;
  if (v16)
  {
    v5 = *(_QWORD *)(v15 + 8);
    if ((v4 & (v4 - 1)) != 0)
    {
      if (v5 >= v4)
        v5 %= v4;
    }
    else
    {
      v5 &= v4 - 1;
    }
    *(_QWORD *)(v3 + 8 * v5) = v21;
    v15 = 0;
    v16 = 0;
  }
  v23 = v18;
  v24 = v19;
  v28 = 0;
  v6 = operator new(0x40uLL);
  *v6 = &off_1E6999110;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v6 + 1), v20);
  v6[6] = v23;
  *((_DWORD *)v6 + 14) = v24;
  v28 = v6;
  memset(v25, 0, sizeof(v25));
  v26 = 0;
  std::__function::__value_func<void ()(AMCP::Thing const&)>::__value_func[abi:ne180100]((uint64_t)v25, (uint64_t)v27);
  v26 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Thing const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(a1, v2, (AMCP *)v25);
  if (v26)
    v26(0, (uint64_t)v25, 0, 0);
  v10 = v28;
  if (v28 == v27)
  {
    v11 = 4;
    v10 = v27;
    goto LABEL_13;
  }
  if (v28)
  {
    v11 = 5;
LABEL_13:
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v10 + 8 * v11))(v10, v7, v8, v9);
  }
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v20);
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v13);
}

void sub_1B57F6794(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<std::tuple<unsigned int,unsigned int> ()(void)>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const std::type_info *v4;

  v1 = &unk_1EF130000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EF130000;
    if (v3)
    {
      v1 = (_QWORD *)&unk_1EF130000;
    }
  }
  return v1[354];
}

uint64_t std::__function::__value_func<std::tuple<unsigned int,unsigned int> ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<std::tuple<unsigned int,unsigned int> ()(void)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  void (*v14)(_QWORD, _OWORD *, _QWORD, _QWORD);

  result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      v9 = *(_QWORD *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((_QWORD *)a3 + 3) = a3;
          (*(void (**)(_QWORD, AMCP::Thing *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a3);
        }
        else
        {
          *((_QWORD *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        }
      }
      result = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::tuple<unsigned int,unsigned int> ()(void)>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<std::tuple<unsigned int,unsigned int> ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::tuple<unsigned int,unsigned int> ()(void)>>::dispatch;
LABEL_6:
      v10 = *(_QWORD **)(a2 + 24);
      if (v10 == (_QWORD *)a2)
      {
        v11 = 4;
        v10 = (_QWORD *)a2;
      }
      else
      {
        if (!v10)
          goto LABEL_18;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_18:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      v12 = AMCP::Implementation::get_type_marker<std::function<std::tuple<unsigned int,unsigned int> ()(void)>>();
      result = 0;
      *a4 = v12;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<std::tuple<unsigned int,unsigned int> ()(void)>>())
        return a2;
      else
        return 0;
    case 6:
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      AMCP::swap((AMCP::Thing *)v13, a3, a3);
      if (v14)
        v14(0, v13, 0, 0);
      return 0;
    default:
      return result;
  }
}

uint64_t AMCP::Core::Operation_Utilities::add_generic_property_getter<std::tuple<unsigned int,unsigned int>>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20[2];
  _QWORD v21[2];
  int v22;
  uint64_t v23;
  int v24;
  _OWORD v25[2];
  void (*v26)(int, uint64_t, AMCP::Thing *, uint64_t *);
  _BYTE v27[24];
  _BYTE *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v13, a1);
  v18 = *(_QWORD *)(a1 + 40);
  v19 = *(_DWORD *)(a1 + 48);
  v2 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  v3 = v13;
  v4 = v14;
  v13 = 0;
  v14 = 0;
  v20[0] = v3;
  v20[1] = v4;
  v21[0] = v15;
  v21[1] = v16;
  v22 = v17;
  if (v16)
  {
    v5 = *(_QWORD *)(v15 + 8);
    if ((v4 & (v4 - 1)) != 0)
    {
      if (v5 >= v4)
        v5 %= v4;
    }
    else
    {
      v5 &= v4 - 1;
    }
    *(_QWORD *)(v3 + 8 * v5) = v21;
    v15 = 0;
    v16 = 0;
  }
  v23 = v18;
  v24 = v19;
  v28 = 0;
  v6 = operator new(0x40uLL);
  *v6 = &off_1E6999398;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v6 + 1), v20);
  v6[6] = v23;
  *((_DWORD *)v6 + 14) = v24;
  v28 = v6;
  memset(v25, 0, sizeof(v25));
  v26 = 0;
  std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)v25, (uint64_t)v27);
  v26 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(a1, v2, (AMCP *)v25);
  if (v26)
    v26(0, (uint64_t)v25, 0, 0);
  v10 = v28;
  if (v28 == v27)
  {
    v11 = 4;
    v10 = v27;
    goto LABEL_13;
  }
  if (v28)
  {
    v11 = 5;
LABEL_13:
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v10 + 8 * v11))(v10, v7, v8, v9);
  }
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v20);
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v13);
}

void sub_1B57F6BA4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<float ()(void)>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const std::type_info *v4;

  v1 = &unk_1EF130000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EF130000;
    if (v3)
    {
      v1 = (_QWORD *)&unk_1EF130000;
    }
  }
  return v1[356];
}

uint64_t std::__function::__value_func<float ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<float ()(void)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  void (*v14)(_QWORD, _OWORD *, _QWORD, _QWORD);

  result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      v9 = *(_QWORD *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((_QWORD *)a3 + 3) = a3;
          (*(void (**)(_QWORD, AMCP::Thing *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a3);
        }
        else
        {
          *((_QWORD *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        }
      }
      result = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<float ()(void)>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<float ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<float ()(void)>>::dispatch;
LABEL_6:
      v10 = *(_QWORD **)(a2 + 24);
      if (v10 == (_QWORD *)a2)
      {
        v11 = 4;
        v10 = (_QWORD *)a2;
      }
      else
      {
        if (!v10)
          goto LABEL_18;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_18:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      v12 = AMCP::Implementation::get_type_marker<std::function<float ()(void)>>();
      result = 0;
      *a4 = v12;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<float ()(void)>>())
        return a2;
      else
        return 0;
    case 6:
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      AMCP::swap((AMCP::Thing *)v13, a3, a3);
      if (v14)
        v14(0, v13, 0, 0);
      return 0;
    default:
      return result;
  }
}

uint64_t AMCP::Core::Operation_Utilities::add_generic_property_getter<float>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20[2];
  _QWORD v21[2];
  int v22;
  uint64_t v23;
  int v24;
  _OWORD v25[2];
  void (*v26)(int, uint64_t, AMCP::Thing *, uint64_t *);
  _BYTE v27[24];
  _BYTE *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v13, a1);
  v18 = *(_QWORD *)(a1 + 40);
  v19 = *(_DWORD *)(a1 + 48);
  v2 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  v3 = v13;
  v4 = v14;
  v13 = 0;
  v14 = 0;
  v20[0] = v3;
  v20[1] = v4;
  v21[0] = v15;
  v21[1] = v16;
  v22 = v17;
  if (v16)
  {
    v5 = *(_QWORD *)(v15 + 8);
    if ((v4 & (v4 - 1)) != 0)
    {
      if (v5 >= v4)
        v5 %= v4;
    }
    else
    {
      v5 &= v4 - 1;
    }
    *(_QWORD *)(v3 + 8 * v5) = v21;
    v15 = 0;
    v16 = 0;
  }
  v23 = v18;
  v24 = v19;
  v28 = 0;
  v6 = operator new(0x40uLL);
  *v6 = &off_1E69995A0;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v6 + 1), v20);
  v6[6] = v23;
  *((_DWORD *)v6 + 14) = v24;
  v28 = v6;
  memset(v25, 0, sizeof(v25));
  v26 = 0;
  std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)v25, (uint64_t)v27);
  v26 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(a1, v2, (AMCP *)v25);
  if (v26)
    v26(0, (uint64_t)v25, 0, 0);
  v10 = v28;
  if (v28 == v27)
  {
    v11 = 4;
    v10 = v27;
    goto LABEL_13;
  }
  if (v28)
  {
    v11 = 5;
LABEL_13:
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v10 + 8 * v11))(v10, v7, v8, v9);
  }
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v20);
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v13);
}

void sub_1B57F6FB4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<void ()(float const&)>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const std::type_info *v4;

  v1 = &unk_1EF130000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EF130000;
    if (v3)
    {
      v1 = (_QWORD *)&unk_1EF130000;
    }
  }
  return v1[358];
}

uint64_t std::__function::__value_func<void ()(float const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<void ()(float const&)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  void (*v14)(_QWORD, _OWORD *, _QWORD, _QWORD);

  result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      v9 = *(_QWORD *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((_QWORD *)a3 + 3) = a3;
          (*(void (**)(_QWORD, AMCP::Thing *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a3);
        }
        else
        {
          *((_QWORD *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        }
      }
      result = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(float const&)>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<void ()(float const&)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(float const&)>>::dispatch;
LABEL_6:
      v10 = *(_QWORD **)(a2 + 24);
      if (v10 == (_QWORD *)a2)
      {
        v11 = 4;
        v10 = (_QWORD *)a2;
      }
      else
      {
        if (!v10)
          goto LABEL_18;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_18:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      v12 = AMCP::Implementation::get_type_marker<std::function<void ()(float const&)>>();
      result = 0;
      *a4 = v12;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<void ()(float const&)>>())
        return a2;
      else
        return 0;
    case 6:
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      AMCP::swap((AMCP::Thing *)v13, a3, a3);
      if (v14)
        v14(0, v13, 0, 0);
      return 0;
    default:
      return result;
  }
}

uint64_t AMCP::Core::Operation_Utilities::add_generic_property_setter<float>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20[2];
  _QWORD v21[2];
  int v22;
  uint64_t v23;
  int v24;
  _OWORD v25[2];
  void (*v26)(int, uint64_t, AMCP::Thing *, uint64_t *);
  _BYTE v27[24];
  _BYTE *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v13, a1);
  v18 = *(_QWORD *)(a1 + 40);
  v19 = *(_DWORD *)(a1 + 48);
  v2 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
  v3 = v13;
  v4 = v14;
  v13 = 0;
  v14 = 0;
  v20[0] = v3;
  v20[1] = v4;
  v21[0] = v15;
  v21[1] = v16;
  v22 = v17;
  if (v16)
  {
    v5 = *(_QWORD *)(v15 + 8);
    if ((v4 & (v4 - 1)) != 0)
    {
      if (v5 >= v4)
        v5 %= v4;
    }
    else
    {
      v5 &= v4 - 1;
    }
    *(_QWORD *)(v3 + 8 * v5) = v21;
    v15 = 0;
    v16 = 0;
  }
  v23 = v18;
  v24 = v19;
  v28 = 0;
  v6 = operator new(0x40uLL);
  *v6 = &off_1E6999720;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v6 + 1), v20);
  v6[6] = v23;
  *((_DWORD *)v6 + 14) = v24;
  v28 = v6;
  memset(v25, 0, sizeof(v25));
  v26 = 0;
  std::__function::__value_func<void ()(AMCP::Thing const&)>::__value_func[abi:ne180100]((uint64_t)v25, (uint64_t)v27);
  v26 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Thing const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(a1, v2, (AMCP *)v25);
  if (v26)
    v26(0, (uint64_t)v25, 0, 0);
  v10 = v28;
  if (v28 == v27)
  {
    v11 = 4;
    v10 = v27;
    goto LABEL_13;
  }
  if (v28)
  {
    v11 = 5;
LABEL_13:
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v10 + 8 * v11))(v10, v7, v8, v9);
  }
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v20);
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v13);
}

void sub_1B57F73C4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<double ()(void)>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const std::type_info *v4;

  v1 = &unk_1EF130000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EF130000;
    if (v3)
    {
      v1 = (_QWORD *)&unk_1EF130000;
    }
  }
  return v1[286];
}

uint64_t std::__function::__value_func<double ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<double ()(void)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  void (*v14)(_QWORD, _OWORD *, _QWORD, _QWORD);

  result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      v9 = *(_QWORD *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((_QWORD *)a3 + 3) = a3;
          (*(void (**)(_QWORD, AMCP::Thing *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a3);
        }
        else
        {
          *((_QWORD *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        }
      }
      result = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<double ()(void)>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<double ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<double ()(void)>>::dispatch;
LABEL_6:
      v10 = *(_QWORD **)(a2 + 24);
      if (v10 == (_QWORD *)a2)
      {
        v11 = 4;
        v10 = (_QWORD *)a2;
      }
      else
      {
        if (!v10)
          goto LABEL_18;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_18:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      v12 = AMCP::Implementation::get_type_marker<std::function<double ()(void)>>();
      result = 0;
      *a4 = v12;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<double ()(void)>>())
        return a2;
      else
        return 0;
    case 6:
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      AMCP::swap((AMCP::Thing *)v13, a3, a3);
      if (v14)
        v14(0, v13, 0, 0);
      return 0;
    default:
      return result;
  }
}

uint64_t AMCP::Core::Operation_Utilities::add_generic_property_getter<double>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20[2];
  _QWORD v21[2];
  int v22;
  uint64_t v23;
  int v24;
  _OWORD v25[2];
  void (*v26)(int, uint64_t, AMCP::Thing *, uint64_t *);
  _BYTE v27[24];
  _BYTE *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v13, a1);
  v18 = *(_QWORD *)(a1 + 40);
  v19 = *(_DWORD *)(a1 + 48);
  v2 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  v3 = v13;
  v4 = v14;
  v13 = 0;
  v14 = 0;
  v20[0] = v3;
  v20[1] = v4;
  v21[0] = v15;
  v21[1] = v16;
  v22 = v17;
  if (v16)
  {
    v5 = *(_QWORD *)(v15 + 8);
    if ((v4 & (v4 - 1)) != 0)
    {
      if (v5 >= v4)
        v5 %= v4;
    }
    else
    {
      v5 &= v4 - 1;
    }
    *(_QWORD *)(v3 + 8 * v5) = v21;
    v15 = 0;
    v16 = 0;
  }
  v23 = v18;
  v24 = v19;
  v28 = 0;
  v6 = operator new(0x40uLL);
  *v6 = &off_1E698C6D8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v6 + 1), v20);
  v6[6] = v23;
  *((_DWORD *)v6 + 14) = v24;
  v28 = v6;
  memset(v25, 0, sizeof(v25));
  v26 = 0;
  std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)v25, (uint64_t)v27);
  v26 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(a1, v2, (AMCP *)v25);
  if (v26)
    v26(0, (uint64_t)v25, 0, 0);
  v10 = v28;
  if (v28 == v27)
  {
    v11 = 4;
    v10 = v27;
    goto LABEL_13;
  }
  if (v28)
  {
    v11 = 5;
LABEL_13:
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v10 + 8 * v11))(v10, v7, v8, v9);
  }
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v20);
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v13);
}

void sub_1B57F77D4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<caulk::mach::os_workgroup_interval_managed ()(void)>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const std::type_info *v4;

  v1 = &unk_1EF130000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EF130000;
    if (v3)
    {
      v1 = (_QWORD *)&unk_1EF130000;
    }
  }
  return v1[288];
}

uint64_t std::__function::__value_func<caulk::mach::os_workgroup_interval_managed ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<caulk::mach::os_workgroup_interval_managed ()(void)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  void (*v14)(_QWORD, _OWORD *, _QWORD, _QWORD);

  result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      v9 = *(_QWORD *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((_QWORD *)a3 + 3) = a3;
          (*(void (**)(_QWORD, AMCP::Thing *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a3);
        }
        else
        {
          *((_QWORD *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        }
      }
      result = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<caulk::mach::os_workgroup_interval_managed ()(void)>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<caulk::mach::os_workgroup_interval_managed ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<caulk::mach::os_workgroup_interval_managed ()(void)>>::dispatch;
LABEL_6:
      v10 = *(_QWORD **)(a2 + 24);
      if (v10 == (_QWORD *)a2)
      {
        v11 = 4;
        v10 = (_QWORD *)a2;
      }
      else
      {
        if (!v10)
          goto LABEL_18;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_18:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      v12 = AMCP::Implementation::get_type_marker<std::function<caulk::mach::os_workgroup_interval_managed ()(void)>>();
      result = 0;
      *a4 = v12;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<caulk::mach::os_workgroup_interval_managed ()(void)>>())
        return a2;
      else
        return 0;
    case 6:
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      AMCP::swap((AMCP::Thing *)v13, a3, a3);
      if (v14)
        v14(0, v13, 0, 0);
      return 0;
    default:
      return result;
  }
}

uint64_t AMCP::Implementation::get_type_marker<std::function<void ()(caulk::mach::os_workgroup_interval_managed const&)>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const std::type_info *v4;

  v1 = &unk_1EF130000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EF130000;
    if (v3)
    {
      v1 = (_QWORD *)&unk_1EF130000;
    }
  }
  return v1[292];
}

uint64_t std::__function::__value_func<void ()(caulk::mach::os_workgroup_interval_managed const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<void ()(caulk::mach::os_workgroup_interval_managed const&)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  void (*v14)(_QWORD, _OWORD *, _QWORD, _QWORD);

  result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      v9 = *(_QWORD *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((_QWORD *)a3 + 3) = a3;
          (*(void (**)(_QWORD, AMCP::Thing *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a3);
        }
        else
        {
          *((_QWORD *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        }
      }
      result = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(caulk::mach::os_workgroup_interval_managed const&)>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<void ()(caulk::mach::os_workgroup_interval_managed const&)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(caulk::mach::os_workgroup_interval_managed const&)>>::dispatch;
LABEL_6:
      v10 = *(_QWORD **)(a2 + 24);
      if (v10 == (_QWORD *)a2)
      {
        v11 = 4;
        v10 = (_QWORD *)a2;
      }
      else
      {
        if (!v10)
          goto LABEL_18;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_18:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      v12 = AMCP::Implementation::get_type_marker<std::function<void ()(caulk::mach::os_workgroup_interval_managed const&)>>();
      result = 0;
      *a4 = v12;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<void ()(caulk::mach::os_workgroup_interval_managed const&)>>())
        return a2;
      else
        return 0;
    case 6:
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      AMCP::swap((AMCP::Thing *)v13, a3, a3);
      if (v14)
        v14(0, v13, 0, 0);
      return 0;
    default:
      return result;
  }
}

uint64_t AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20[2];
  _QWORD v21[2];
  int v22;
  uint64_t v23;
  int v24;
  _OWORD v25[2];
  void (*v26)(int, uint64_t, AMCP::Thing *, uint64_t *);
  _BYTE v27[24];
  _BYTE *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v13, a1);
  v18 = *(_QWORD *)(a1 + 40);
  v19 = *(_DWORD *)(a1 + 48);
  v2 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  v3 = v13;
  v4 = v14;
  v13 = 0;
  v14 = 0;
  v20[0] = v3;
  v20[1] = v4;
  v21[0] = v15;
  v21[1] = v16;
  v22 = v17;
  if (v16)
  {
    v5 = *(_QWORD *)(v15 + 8);
    if ((v4 & (v4 - 1)) != 0)
    {
      if (v5 >= v4)
        v5 %= v4;
    }
    else
    {
      v5 &= v4 - 1;
    }
    *(_QWORD *)(v3 + 8 * v5) = v21;
    v15 = 0;
    v16 = 0;
  }
  v23 = v18;
  v24 = v19;
  v28 = 0;
  v6 = operator new(0x40uLL);
  *v6 = &off_1E6999230;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v6 + 1), v20);
  v6[6] = v23;
  *((_DWORD *)v6 + 14) = v24;
  v28 = v6;
  memset(v25, 0, sizeof(v25));
  v26 = 0;
  std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)v25, (uint64_t)v27);
  v26 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(a1, v2, (AMCP *)v25);
  if (v26)
    v26(0, (uint64_t)v25, 0, 0);
  v10 = v28;
  if (v28 == v27)
  {
    v11 = 4;
    v10 = v27;
    goto LABEL_13;
  }
  if (v28)
  {
    v11 = 5;
LABEL_13:
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v10 + 8 * v11))(v10, v7, v8, v9);
  }
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v20);
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v13);
}

void sub_1B57F7E28(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<void ()(BOOL const&)>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const std::type_info *v4;

  v1 = &unk_1EF130000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EF130000;
    if (v3)
    {
      v1 = (_QWORD *)&unk_1EF130000;
    }
  }
  return v1[366];
}

uint64_t std::__function::__value_func<void ()(BOOL const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<void ()(BOOL const&)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  void (*v14)(_QWORD, _OWORD *, _QWORD, _QWORD);

  result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      v9 = *(_QWORD *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((_QWORD *)a3 + 3) = a3;
          (*(void (**)(_QWORD, AMCP::Thing *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a3);
        }
        else
        {
          *((_QWORD *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        }
      }
      result = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(BOOL const&)>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<void ()(BOOL const&)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(BOOL const&)>>::dispatch;
LABEL_6:
      v10 = *(_QWORD **)(a2 + 24);
      if (v10 == (_QWORD *)a2)
      {
        v11 = 4;
        v10 = (_QWORD *)a2;
      }
      else
      {
        if (!v10)
          goto LABEL_18;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_18:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      v12 = AMCP::Implementation::get_type_marker<std::function<void ()(BOOL const&)>>();
      result = 0;
      *a4 = v12;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<void ()(BOOL const&)>>())
        return a2;
      else
        return 0;
    case 6:
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      AMCP::swap((AMCP::Thing *)v13, a3, a3);
      if (v14)
        v14(0, v13, 0, 0);
      return 0;
    default:
      return result;
  }
}

uint64_t AMCP::Core::Operation_Utilities::add_generic_property_setter<BOOL>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20[2];
  _QWORD v21[2];
  int v22;
  uint64_t v23;
  int v24;
  _OWORD v25[2];
  void (*v26)(int, uint64_t, AMCP::Thing *, uint64_t *);
  _BYTE v27[24];
  _BYTE *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v13, a1);
  v18 = *(_QWORD *)(a1 + 40);
  v19 = *(_DWORD *)(a1 + 48);
  v2 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
  v3 = v13;
  v4 = v14;
  v13 = 0;
  v14 = 0;
  v20[0] = v3;
  v20[1] = v4;
  v21[0] = v15;
  v21[1] = v16;
  v22 = v17;
  if (v16)
  {
    v5 = *(_QWORD *)(v15 + 8);
    if ((v4 & (v4 - 1)) != 0)
    {
      if (v5 >= v4)
        v5 %= v4;
    }
    else
    {
      v5 &= v4 - 1;
    }
    *(_QWORD *)(v3 + 8 * v5) = v21;
    v15 = 0;
    v16 = 0;
  }
  v23 = v18;
  v24 = v19;
  v28 = 0;
  v6 = operator new(0x40uLL);
  *v6 = &off_1E6999DD8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v6 + 1), v20);
  v6[6] = v23;
  *((_DWORD *)v6 + 14) = v24;
  v28 = v6;
  memset(v25, 0, sizeof(v25));
  v26 = 0;
  std::__function::__value_func<void ()(AMCP::Thing const&)>::__value_func[abi:ne180100]((uint64_t)v25, (uint64_t)v27);
  v26 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Thing const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(a1, v2, (AMCP *)v25);
  if (v26)
    v26(0, (uint64_t)v25, 0, 0);
  v10 = v28;
  if (v28 == v27)
  {
    v11 = 4;
    v10 = v27;
    goto LABEL_13;
  }
  if (v28)
  {
    v11 = 5;
LABEL_13:
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v10 + 8 * v11))(v10, v7, v8, v9);
  }
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v20);
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v13);
}

void sub_1B57F8238(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Power_State)>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const std::type_info *v4;

  v1 = &unk_1EF130000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EF130000;
    if (v3)
    {
      v1 = (_QWORD *)&unk_1EF130000;
    }
  }
  return v1[310];
}

uint64_t std::__function::__value_func<void ()(AMCP::Power_State)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Power_State)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  void (*v14)(_QWORD, _OWORD *, _QWORD, _QWORD);

  result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      v9 = *(_QWORD *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((_QWORD *)a3 + 3) = a3;
          (*(void (**)(_QWORD, AMCP::Thing *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a3);
        }
        else
        {
          *((_QWORD *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        }
      }
      result = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Power_State)>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<void ()(AMCP::Power_State)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Power_State)>>::dispatch;
LABEL_6:
      v10 = *(_QWORD **)(a2 + 24);
      if (v10 == (_QWORD *)a2)
      {
        v11 = 4;
        v10 = (_QWORD *)a2;
      }
      else
      {
        if (!v10)
          goto LABEL_18;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_18:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      v12 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Power_State)>>();
      result = 0;
      *a4 = v12;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Power_State)>>())
        return a2;
      else
        return 0;
    case 6:
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      AMCP::swap((AMCP::Thing *)v13, a3, a3);
      if (v14)
        v14(0, v13, 0, 0);
      return 0;
    default:
      return result;
  }
}

uint64_t AMCP::Implementation::get_type_marker<std::function<std::shared_ptr<AMCP::Graph::Timebase> ()(void)>>()
{
  unsigned __int8 v0;
  int *v1;
  int v3;
  const std::type_info *v4;

  v1 = &OBJC_IVAR___DSP_HAL_Mock_IOProcessor__processorProperties;
  if ((v0 & 1) == 0)
  {
    v1 = &OBJC_IVAR___DSP_HAL_Mock_IOProcessor__processorProperties;
    if (v3)
    {
      v1 = &OBJC_IVAR___DSP_HAL_Mock_IOProcessor__processorProperties;
    }
  }
  return *((_QWORD *)v1 + 271);
}

uint64_t std::__function::__value_func<std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

double AMCP::Implementation::In_Place_Storage<std::function<std::shared_ptr<AMCP::Graph::Timebase> ()(void)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  double result;
  _QWORD *v7;
  uint64_t v8;
  _OWORD v9[2];
  void (*v10)(_QWORD, _OWORD *, _QWORD, _QWORD);

  switch(a1)
  {
    case 0:
      goto LABEL_4;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::shared_ptr<AMCP::Graph::Timebase> ()(void)>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::shared_ptr<AMCP::Graph::Timebase> ()(void)>>::dispatch;
LABEL_4:
      v7 = *(_QWORD **)(a2 + 24);
      if (v7 == (_QWORD *)a2)
      {
        v8 = 4;
        v7 = (_QWORD *)a2;
      }
      else
      {
        if (!v7)
          goto LABEL_14;
        v8 = 5;
      }
      (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_14:
      *(_QWORD *)(a2 + 32) = 0;
      result = 0.0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      *a4 = AMCP::Implementation::get_type_marker<std::function<std::shared_ptr<AMCP::Graph::Timebase> ()(void)>>();
      return result;
    case 4:
      AMCP::Implementation::get_type_marker<std::function<std::shared_ptr<AMCP::Graph::Timebase> ()(void)>>();
      return result;
    case 6:
      v10 = 0;
      memset(v9, 0, sizeof(v9));
      AMCP::swap((AMCP::Thing *)v9, a3, a3);
      if (v10)
        v10(0, v9, 0, 0);
      return result;
    default:
      return result;
  }
}

uint64_t std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  void (*v14)(_QWORD, _OWORD *, _QWORD, _QWORD);

  result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      v9 = *(_QWORD *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((_QWORD *)a3 + 3) = a3;
          (*(void (**)(_QWORD, AMCP::Thing *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a3);
        }
        else
        {
          *((_QWORD *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        }
      }
      result = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
LABEL_6:
      v10 = *(_QWORD **)(a2 + 24);
      if (v10 == (_QWORD *)a2)
      {
        v11 = 4;
        v10 = (_QWORD *)a2;
      }
      else
      {
        if (!v10)
          goto LABEL_18;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_18:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      v12 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
      result = 0;
      *a4 = v12;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>())
        return a2;
      else
        return 0;
    case 6:
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      AMCP::swap((AMCP::Thing *)v13, a3, a3);
      if (v14)
        v14(0, v13, 0, 0);
      return 0;
    default:
      return result;
  }
}

uint64_t AMCP::Implementation::get_type_marker<std::function<AMCP::Graph::Timebase_Set ()(void)>>()
{
  unsigned __int8 v0;
  int *v1;
  int v3;
  const std::type_info *v4;

  v1 = &OBJC_IVAR___DSP_HAL_Mock_IOProcessor__processorProperties;
  if ((v0 & 1) == 0)
  {
    v1 = &OBJC_IVAR___DSP_HAL_Mock_IOProcessor__processorProperties;
    if (v3)
    {
      v1 = &OBJC_IVAR___DSP_HAL_Mock_IOProcessor__processorProperties;
    }
  }
  return *((_QWORD *)v1 + 351);
}

uint64_t std::__function::__value_func<AMCP::Graph::Timebase_Set ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<AMCP::Graph::Timebase_Set ()(void)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  void (*v14)(_QWORD, _OWORD *, _QWORD, _QWORD);

  result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      v9 = *(_QWORD *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((_QWORD *)a3 + 3) = a3;
          (*(void (**)(_QWORD, AMCP::Thing *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a3);
        }
        else
        {
          *((_QWORD *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        }
      }
      result = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Graph::Timebase_Set ()(void)>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<AMCP::Graph::Timebase_Set ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Graph::Timebase_Set ()(void)>>::dispatch;
LABEL_6:
      v10 = *(_QWORD **)(a2 + 24);
      if (v10 == (_QWORD *)a2)
      {
        v11 = 4;
        v10 = (_QWORD *)a2;
      }
      else
      {
        if (!v10)
          goto LABEL_18;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_18:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      v12 = AMCP::Implementation::get_type_marker<std::function<AMCP::Graph::Timebase_Set ()(void)>>();
      result = 0;
      *a4 = v12;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<AMCP::Graph::Timebase_Set ()(void)>>())
        return a2;
      else
        return 0;
    case 6:
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      AMCP::swap((AMCP::Thing *)v13, a3, a3);
      if (v14)
        v14(0, v13, 0, 0);
      return 0;
    default:
      return result;
  }
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_34,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_34>,void ()(BOOL const&)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_34,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_34>,void ()(BOOL const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E696D7A0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_34,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_34>,void ()(BOOL const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E696D7A0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_34,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_34>,void ()(BOOL const&)>::operator()(uint64_t a1, char *a2)
{
  char v2;
  uint64_t v3;
  std::mutex *v4;
  uint64_t v5;
  __int128 v6;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = (std::mutex *)(v3 + 200);
  std::mutex::lock((std::mutex *)(v3 + 200));
  v5 = *(_QWORD *)(*(_QWORD *)(v3 + 160) + 32);
  LODWORD(v6) = caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load(v5);
  WORD2(v6) = 0;
  DWORD2(v6) = 4;
  BYTE12(v6) = v2;
  caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::store(v5, &v6);
  std::mutex::unlock(v4);
}

void sub_1B57F8BA4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  std::mutex *v16;

  std::mutex::unlock(v16);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_34,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_34>,void ()(BOOL const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core14IOContext_Core11update_coreERNS_4Core13Operation_SetEE4$_34"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_34,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_34>,void ()(BOOL const&)>::target_type()
{
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_33,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_33>,BOOL ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_33,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_33>,BOOL ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E696D720;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_33,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_33>,BOOL ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E696D720;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_33,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_33>,BOOL ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  std::mutex *v2;
  unint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (std::mutex *)(v1 + 200);
  std::mutex::lock((std::mutex *)(v1 + 200));
  caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load(*(_QWORD *)(*(_QWORD *)(v1 + 160)
                                                                                                  + 32));
  v4 = HIDWORD(v3) & 1;
  std::mutex::unlock(v2);
  return v4;
}

void sub_1B57F8CC4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_33,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_33>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core14IOContext_Core11update_coreERNS_4Core13Operation_SetEE4$_33"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_33,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_33>,BOOL ()(void)>::target_type()
{
}

uint64_t std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *i;
  unint64_t v12;
  char *v13;
  void (*v14)(uint64_t, _QWORD *, char *, _QWORD);
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  v5 = *(_QWORD **)(a2 + 16);
  if (v5)
  {
    v6 = (_QWORD *)(a1 + 16);
    do
    {
      v7 = v5[2];
      v8 = *(_QWORD *)(a1 + 8);
      if (v8)
      {
        v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
        v9.i16[0] = vaddlv_u8(v9);
        if (v9.u32[0] > 1uLL)
        {
          v2 = v5[2];
          if (v7 >= v8)
            v2 = v7 % v8;
        }
        else
        {
          v2 = (v8 - 1) & v7;
        }
        v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
        if (v10)
        {
          for (i = (_QWORD *)*v10; i; i = (_QWORD *)*i)
          {
            v12 = i[1];
            if (v12 == v7)
            {
              if (i[2] == v7)
                goto LABEL_43;
            }
            else
            {
              if (v9.u32[0] > 1uLL)
              {
                if (v12 >= v8)
                  v12 %= v8;
              }
              else
              {
                v12 &= v8 - 1;
              }
              if (v12 != v2)
                break;
            }
          }
        }
      }
      v13 = (char *)operator new(0x40uLL);
      *(_QWORD *)v13 = 0;
      *((_QWORD *)v13 + 1) = v7;
      *((_QWORD *)v13 + 2) = v5[2];
      *(_OWORD *)(v13 + 24) = 0u;
      *(_OWORD *)(v13 + 40) = 0u;
      *((_QWORD *)v13 + 7) = 0;
      v14 = (void (*)(uint64_t, _QWORD *, char *, _QWORD))v5[7];
      if (v14)
        v14(1, v5 + 3, v13 + 24, 0);
      v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
      v16 = *(float *)(a1 + 32);
      if (!v8 || (float)(v16 * (float)v8) < v15)
      {
        v17 = (v8 & (v8 - 1)) != 0;
        if (v8 < 3)
          v17 = 1;
        v18 = v17 | (2 * v8);
        v19 = vcvtps_u32_f32(v15 / v16);
        if (v18 <= v19)
          v20 = v19;
        else
          v20 = v18;
        std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>(a1, v20);
        v8 = *(_QWORD *)(a1 + 8);
        if ((v8 & (v8 - 1)) != 0)
        {
          if (v7 >= v8)
            v2 = v7 % v8;
          else
            v2 = v7;
        }
        else
        {
          v2 = (v8 - 1) & v7;
        }
      }
      v21 = *(_QWORD *)a1;
      v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
      if (v22)
      {
        *(_QWORD *)v13 = *v22;
      }
      else
      {
        *(_QWORD *)v13 = *v6;
        *v6 = v13;
        *(_QWORD *)(v21 + 8 * v2) = v6;
        if (!*(_QWORD *)v13)
          goto LABEL_42;
        v23 = *(_QWORD *)(*(_QWORD *)v13 + 8);
        if ((v8 & (v8 - 1)) != 0)
        {
          if (v23 >= v8)
            v23 %= v8;
        }
        else
        {
          v23 &= v8 - 1;
        }
        v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
      }
      *v22 = v13;
LABEL_42:
      ++*(_QWORD *)(a1 + 24);
LABEL_43:
      v5 = (_QWORD *)*v5;
    }
    while (v5);
  }
  return a1;
}

void sub_1B57F8F6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void (*v4)(_QWORD, _QWORD *, _QWORD, _QWORD);
  void *v5;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))v2[7];
      if (v4)
        v4(0, v2 + 3, 0, 0);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v5 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v5)
    operator delete(v5);
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)result = v2;
  *(_QWORD *)(result + 8) = a2[1];
  a2[1] = 0;
  v5 = a2[2];
  v3 = a2 + 2;
  v4 = v5;
  *(_QWORD *)(result + 16) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 24) = v6;
  *(_DWORD *)(result + 32) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 16;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Graph::Timebase_Set>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Graph::Timebase_Set>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E696D690;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Graph::Timebase_Set>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Graph::Timebase_Set>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E696D690;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Graph::Timebase_Set>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Graph::Timebase_Set>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x40uLL);
  *v3 = &off_1E696D690;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(_QWORD *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1B57F9154(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Graph::Timebase_Set>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Graph::Timebase_Set>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a2 = &off_1E696D690;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Graph::Timebase_Set>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Graph::Timebase_Set>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Graph::Timebase_Set>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Graph::Timebase_Set>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Graph::Timebase_Set>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Graph::Timebase_Set>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE v4[40];
  void *__p;
  void *v6;

  AMCP::Core::Operation::call_function<AMCP::Graph::Timebase_Set>((uint64_t)v4, (_QWORD *)(a1 + 8));
  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  AMCP::Implementation::Outboard_Storage<AMCP::Graph::Timebase_Set>::construct<AMCP::Graph::Timebase_Set&>(a2, (uint64_t)v4);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
  return std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::~__hash_table((uint64_t)v4);
}

void sub_1B57F9240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
  {
    a15 = (uint64_t)__p;
    operator delete(__p);
  }
  std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::~__hash_table((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Graph::Timebase_Set>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Graph::Timebase_Set>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities27add_generic_property_getterINS_5Graph12Timebase_SetEEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Graph::Timebase_Set>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Graph::Timebase_Set>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

uint64_t AMCP::Core::Operation::call_function<AMCP::Graph::Timebase_Set>(uint64_t a1, _QWORD *a2)
{
  unint64_t v3;
  AMCP::Log::Scope_Registry *v4;
  AMCP::Log::Scope_Registry *v5;
  uint64_t v6;
  NSObject *v8;
  _opaque_pthread_t *v9;
  mach_port_t v10;
  void *v11;
  NSObject *v12;
  _opaque_pthread_t *v13;
  mach_port_t v14;
  void *exception;
  __int128 v16;
  uint64_t v17;
  uint64_t (**v18)();
  __int128 v19;
  uint64_t v20;
  std::string v21;
  std::runtime_error v22;
  std::runtime_error v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  char v29;
  uint8_t buf[8];
  __int16 v31;
  char *v32;
  __int16 v33;
  int v34;
  const char *v35;
  const char *v36;
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v3 = AMCP::Implementation::get_type_marker<std::function<AMCP::Graph::Timebase_Set ()(void)>>();
  v4 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(a2, v3);
  if (!v4)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v12 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = pthread_self();
      v14 = pthread_mach_thread_np(v13);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v14;
      v31 = 2080;
      v32 = "Operation.h";
      v33 = 1024;
      v34 = 154;
      _os_log_error_impl(&dword_1B57BA000, v12, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v29);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v21);
    std::runtime_error::runtime_error(&v22, &v21);
    std::runtime_error::runtime_error(&v23, &v22);
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = -1;
    v23.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v24 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v23);
    v35 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = AMCP::Graph::Timebase"
          "_Set, Argument_Types = <>]";
    v36 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v37 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v16);
    v19 = v16;
    v20 = v17;
    v16 = 0uLL;
    v17 = 0;
    v18 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v18);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v5 = v4;
  if (!*((_QWORD *)v4 + 7)
    || (*(_QWORD *)buf = AMCP::Implementation::get_type_marker<std::function<AMCP::Graph::Timebase_Set ()(void)>>(),
        (v4 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, _QWORD, uint8_t *))v5 + 7))(4, (uint64_t)v5 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v8 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v9 = pthread_self();
      v10 = pthread_mach_thread_np(v9);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v10;
      v31 = 2080;
      v32 = "Operation.h";
      v33 = 1024;
      v34 = 161;
      _os_log_error_impl(&dword_1B57BA000, v8, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v29);
    v11 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v21);
    std::runtime_error::runtime_error(&v22, &v21);
    std::runtime_error::runtime_error(&v23, &v22);
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = -1;
    v23.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v24 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v23);
    v35 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = AMCP::Graph::Timebase"
          "_Set, Argument_Types = <>]";
    v36 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v37 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v16);
    v19 = v16;
    v20 = v17;
    v16 = 0uLL;
    v17 = 0;
    v18 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v18);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v11, (uint64_t)buf);
  }
  v6 = *((_QWORD *)v4 + 3);
  if (!v6)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6);
}

void sub_1B57F9688(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,std::runtime_error a23,uint64_t a24,uint64_t a25)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *AMCP::Implementation::Outboard_Storage<AMCP::Graph::Timebase_Set>::construct<AMCP::Graph::Timebase_Set&>(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *result;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::Outboard_Storage<AMCP::Graph::Timebase_Set>::dispatch;
  v4 = (_QWORD *)operator new();
  std::unordered_set<std::shared_ptr<AMCP::Graph::Timebase>>::unordered_set((uint64_t)v4, a2);
  v4[5] = 0;
  v4[6] = 0;
  v4[7] = 0;
  result = std::vector<AMCP::IO_Core::Play_State_Manager::Play_Request>::__init_with_size[abi:ne180100]<AMCP::IO_Core::Play_State_Manager::Play_Request*,AMCP::IO_Core::Play_State_Manager::Play_Request*>(v4 + 5, *(const void **)(a2 + 40), *(_QWORD *)(a2 + 48), (uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 2);
  *(_QWORD *)a1 = v4;
  return result;
}

void sub_1B57F9888(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::~__hash_table(v1);
  MEMORY[0x1B5E50688](v1, 0x10A0C4080155EDELL);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t AMCP::Implementation::Outboard_Storage<AMCP::Graph::Timebase_Set>::dispatch(int a1, uint64_t *a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  void (*v14)(_QWORD, _OWORD *, _QWORD, _QWORD);

  result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      AMCP::Implementation::Outboard_Storage<AMCP::Graph::Timebase_Set>::construct<AMCP::Graph::Timebase_Set&>(a3, *a2);
      goto LABEL_15;
    case 2:
      v9 = *a2;
      *a2 = 0;
      v10 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v9;
      if (v10)
        std::default_delete<AMCP::Graph::Timebase_Set>::operator()[abi:ne180100](v10);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::Outboard_Storage<AMCP::Graph::Timebase_Set>::dispatch;
LABEL_6:
      v11 = *a2;
      *a2 = 0;
      if (v11)
        std::default_delete<AMCP::Graph::Timebase_Set>::operator()[abi:ne180100](v11);
      result = 0;
      a2[4] = 0;
      *(_OWORD *)a2 = 0u;
      *((_OWORD *)a2 + 1) = 0u;
      return result;
    case 3:
      v12 = AMCP::Implementation::get_type_marker<AMCP::Graph::Timebase_Set>();
      result = 0;
      *a4 = v12;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<AMCP::Graph::Timebase_Set>())
        return *a2;
      else
        return 0;
    case 6:
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      AMCP::swap((AMCP::Thing *)v13, a3, a3);
      if (v14)
        v14(0, v13, 0, 0);
LABEL_15:
      result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t std::unordered_set<std::shared_ptr<AMCP::Graph::Timebase>>::unordered_set(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  _QWORD *v13;
  _QWORD *i;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD v30[2];
  char v31;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  v5 = *(_QWORD **)(a2 + 16);
  if (v5)
  {
    v6 = (_QWORD *)(a1 + 16);
    do
    {
      v7 = v5[2];
      v8 = 0x9DDFEA08EB382D69 * (((8 * v7) + 8) ^ HIDWORD(v7));
      v9 = 0x9DDFEA08EB382D69 * (HIDWORD(v7) ^ (v8 >> 47) ^ v8);
      v10 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
      v11 = *(_QWORD *)(a1 + 8);
      if (v11)
      {
        v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
        v12.i16[0] = vaddlv_u8(v12);
        if (v12.u32[0] > 1uLL)
        {
          v2 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
          if (v10 >= v11)
            v2 = v10 % v11;
        }
        else
        {
          v2 = v10 & (v11 - 1);
        }
        v13 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
        if (v13)
        {
          for (i = (_QWORD *)*v13; i; i = (_QWORD *)*i)
          {
            v15 = i[1];
            if (v15 == v10)
            {
              if (i[2] == v7)
                goto LABEL_44;
            }
            else
            {
              if (v12.u32[0] > 1uLL)
              {
                if (v15 >= v11)
                  v15 %= v11;
              }
              else
              {
                v15 &= v11 - 1;
              }
              if (v15 != v2)
                break;
            }
          }
        }
      }
      v16 = operator new(0x20uLL);
      v30[0] = v16;
      v30[1] = a1 + 16;
      *v16 = 0;
      v16[1] = v10;
      v16[2] = v5[2];
      v17 = v5[3];
      v16[3] = v17;
      if (v17)
      {
        v18 = (unint64_t *)(v17 + 8);
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      v31 = 1;
      v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
      v21 = *(float *)(a1 + 32);
      if (!v11 || (float)(v21 * (float)v11) < v20)
      {
        v22 = (v11 & (v11 - 1)) != 0;
        if (v11 < 3)
          v22 = 1;
        v23 = v22 | (2 * v11);
        v24 = vcvtps_u32_f32(v20 / v21);
        if (v23 <= v24)
          v25 = v24;
        else
          v25 = v23;
        std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>(a1, v25);
        v11 = *(_QWORD *)(a1 + 8);
        if ((v11 & (v11 - 1)) != 0)
        {
          if (v10 >= v11)
            v2 = v10 % v11;
          else
            v2 = v10;
        }
        else
        {
          v2 = (v11 - 1) & v10;
        }
      }
      v26 = *(_QWORD *)a1;
      v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
      if (v27)
      {
        *v16 = *v27;
      }
      else
      {
        *v16 = *v6;
        *v6 = v16;
        *(_QWORD *)(v26 + 8 * v2) = v6;
        if (!*v16)
          goto LABEL_43;
        v28 = *(_QWORD *)(*v16 + 8);
        if ((v11 & (v11 - 1)) != 0)
        {
          if (v28 >= v11)
            v28 %= v11;
        }
        else
        {
          v28 &= v11 - 1;
        }
        v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
      }
      *v27 = v16;
LABEL_43:
      v30[0] = 0;
      ++*(_QWORD *)(a1 + 24);
      std::unique_ptr<std::__hash_node<std::shared_ptr<AMCP::Graph::Timebase>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<AMCP::Graph::Timebase>,void *>>>>::reset[abi:ne180100]((uint64_t)v30);
LABEL_44:
      v5 = (_QWORD *)*v5;
    }
    while (v5);
  }
  return a1;
}

void sub_1B57F9CD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<AMCP::IO_Core::Play_State_Manager::Play_Request>::__init_with_size[abi:ne180100]<AMCP::IO_Core::Play_State_Manager::Play_Request*,AMCP::IO_Core::Play_State_Manager::Play_Request*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned int>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B57F9D5C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  void *v16;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(_QWORD *)&v4)
  {
    if (prime >= *(_QWORD *)&v4)
      return;
    v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v12 = (uint8x8_t)vcnt_s8(v4), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      v11 = std::__next_prime(v11);
    }
    else
    {
      v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2)
        v11 = v13;
    }
    if (prime <= v11)
      prime = v11;
    if (prime >= *(_QWORD *)&v4)
      return;
    if (!prime)
    {
      v16 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v16)
        operator delete(v16);
      *(_QWORD *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v5 = operator new(8 * prime);
  v6 = *(void **)a1;
  *(_QWORD *)a1 = v5;
  if (v6)
    operator delete(v6);
  v7 = 0;
  *(_QWORD *)(a1 + 8) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  v8 = *(_QWORD **)(a1 + 16);
  if (v8)
  {
    v9 = v8[1];
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= prime)
        v9 %= prime;
    }
    else
    {
      v9 &= prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = a1 + 16;
    v14 = (_QWORD *)*v8;
    if (*v8)
    {
      do
      {
        v15 = v14[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v15 >= prime)
            v15 %= prime;
        }
        else
        {
          v15 &= prime - 1;
        }
        if (v15 != v9)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v15))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v15) = v8;
            goto LABEL_31;
          }
          *v8 = *v14;
          *v14 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v15);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v15) = v14;
          v14 = v8;
        }
        v15 = v9;
LABEL_31:
        v8 = v14;
        v14 = (_QWORD *)*v14;
        v9 = v15;
      }
      while (v14);
    }
  }
}

void std::unique_ptr<std::__hash_node<std::shared_ptr<AMCP::Graph::Timebase>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<AMCP::Graph::Timebase>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

uint64_t std::default_delete<AMCP::Graph::Timebase_Set>::operator()[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  void *v2;

  if (result)
  {
    v1 = result;
    v2 = *(void **)(result + 40);
    if (v2)
    {
      *(_QWORD *)(v1 + 48) = v2;
      operator delete(v2);
    }
    std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::~__hash_table(v1);
    JUMPOUT(0x1B5E50688);
  }
  return result;
}

uint64_t AMCP::Implementation::get_type_marker<AMCP::Graph::Timebase_Set>()
{
  unsigned __int8 v0;
  int *v1;
  int v3;
  const std::type_info *v4;

  v1 = &OBJC_IVAR___DSP_HAL_Mock_IOProcessor__processorProperties;
  if ((v0 & 1) == 0)
  {
    v1 = &OBJC_IVAR___DSP_HAL_Mock_IOProcessor__processorProperties;
    if (v3)
    {
      v1 = &OBJC_IVAR___DSP_HAL_Mock_IOProcessor__processorProperties;
    }
  }
  return *((_QWORD *)v1 + 273);
}

AMCP::Thing *AMCP::swap(AMCP::Thing *this, AMCP::Thing *a2, AMCP::Thing *a3)
{
  AMCP::Thing *v3;
  AMCP::Thing *v4;
  uint64_t (*v5)(uint64_t, AMCP::Thing *, AMCP::Thing *, _QWORD);
  _OWORD v6[2];
  uint64_t (*v7)(uint64_t, _OWORD *, AMCP::Thing *, _QWORD);

  if (this != a2)
  {
    v3 = a2;
    v4 = this;
    v5 = (uint64_t (*)(uint64_t, AMCP::Thing *, AMCP::Thing *, _QWORD))*((_QWORD *)a2 + 4);
    if (*((_QWORD *)this + 4))
    {
      if (v5)
      {
        v7 = 0;
        memset(v6, 0, sizeof(v6));
        v5(2, a2, (AMCP::Thing *)v6, 0);
        (*((void (**)(uint64_t, AMCP::Thing *, AMCP::Thing *, _QWORD))v4 + 4))(2, v4, v3, 0);
        this = (AMCP::Thing *)v7(2, v6, v4, 0);
        if (v7)
          return (AMCP::Thing *)v7(0, v6, 0, 0);
        return this;
      }
      a2 = this;
      v4 = v3;
      v5 = (uint64_t (*)(uint64_t, AMCP::Thing *, AMCP::Thing *, _QWORD))*((_QWORD *)this + 4);
    }
    else if (!v5)
    {
      return this;
    }
    return (AMCP::Thing *)v5(2, a2, v4, 0);
  }
  return this;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,void *>>>::operator()[abi:ne180100](char a1, _QWORD *__p)
{
  void (*v3)(_QWORD, _QWORD *, _QWORD, _QWORD);

  if (a1)
  {
    v3 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))__p[7];
    if (v3)
      v3(0, __p + 3, 0, 0);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_32,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_32>,AMCP::Graph::Timebase_Set ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_32,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_32>,AMCP::Graph::Timebase_Set ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E696D600;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_32,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_32>,AMCP::Graph::Timebase_Set ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E696D600;
  a2[1] = v2;
  return result;
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_32,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_32>,AMCP::Graph::Timebase_Set ()(void)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  std::mutex *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = (std::mutex *)(v3 + 200);
  std::mutex::lock((std::mutex *)(v3 + 200));
  v5 = *(_QWORD *)(v3 + 128);
  if (!v5)
    goto LABEL_15;
  v7 = *(_QWORD *)(v5 + 80);
  v6 = *(std::__shared_weak_count **)(v5 + 88);
  if (!v6)
  {
    if (v7)
      goto LABEL_10;
LABEL_15:
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_DWORD *)(a2 + 32) = 1065353216;
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 56) = 0;
    goto LABEL_16;
  }
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  if (!v7)
  {
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    goto LABEL_15;
  }
LABEL_10:
  std::unordered_set<std::shared_ptr<AMCP::Graph::Timebase>>::unordered_set(a2, v7);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  std::vector<AMCP::IO_Core::Play_State_Manager::Play_Request>::__init_with_size[abi:ne180100]<AMCP::IO_Core::Play_State_Manager::Play_Request*,AMCP::IO_Core::Play_State_Manager::Play_Request*>((_QWORD *)(a2 + 40), *(const void **)(v7 + 40), *(_QWORD *)(v7 + 48), (uint64_t)(*(_QWORD *)(v7 + 48) - *(_QWORD *)(v7 + 40)) >> 2);
  if (v6)
  {
    v11 = (unint64_t *)&v6->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
LABEL_16:
  std::mutex::unlock(v4);
}

void sub_1B57FA314(_Unwind_Exception *a1)
{
  std::mutex *v1;
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v6;

  std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::~__hash_table(v3);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_32,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_32>,AMCP::Graph::Timebase_Set ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core14IOContext_Core11update_coreERNS_4Core13Operation_SetEE4$_32"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_32,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_32>,AMCP::Graph::Timebase_Set ()(void)>::target_type()
{
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_31,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_31>,AMCP::Thing ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_31,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_31>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E696D580;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_31,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_31>,AMCP::Thing ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E696D580;
  a2[1] = v2;
  return result;
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_31,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_31>,AMCP::Thing ()(void)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a1 + 8);
  std::mutex::lock((std::mutex *)(v3 + 200));
  AMCP::IO_Core::IOContext_Core::get_master_timebase((AMCP::IO_Core::IOContext_Core *)&v4, v3);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_OWORD *)a2 = v4;
  *(_QWORD *)(a2 + 32) = AMCP::Implementation::In_Place_Storage<std::shared_ptr<AMCP::Graph::Timebase>>::dispatch;
  std::mutex::unlock((std::mutex *)(v3 + 200));
}

void sub_1B57FA47C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_31,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_31>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core14IOContext_Core11update_coreERNS_4Core13Operation_SetEE4$_31"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_31,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_31>,AMCP::Thing ()(void)>::target_type()
{
}

void AMCP::IO_Core::IOContext_Core::get_master_timebase(AMCP::IO_Core::IOContext_Core *this, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  NSObject *v15;
  _opaque_pthread_t *v16;
  mach_port_t v17;
  void *exception;
  __int128 v19;
  uint64_t v20;
  uint64_t (**v21)();
  __int128 v22;
  uint64_t v23;
  std::string v24;
  std::logic_error v25;
  std::logic_error v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  char v32;
  uint8_t buf[8];
  __int16 v34;
  char *v35;
  __int16 v36;
  int v37;
  __int16 v38;
  _BYTE v39[14];
  const char *v40;
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a2 + 128);
  if (v3)
  {
    v6 = *(_QWORD *)(v3 + 96);
    v5 = *(std::__shared_weak_count **)(v3 + 104);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (!v6)
    {
      AMCP::Log::Scope_Registry::get(this);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v15 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        v16 = pthread_self();
        v17 = pthread_mach_thread_np(v16);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v17;
        v34 = 2080;
        v35 = "IOContext_Core.cpp";
        v36 = 1024;
        v37 = 1040;
        v38 = 2080;
        *(_QWORD *)v39 = "not (m_inventory->get_master_timebase())";
        _os_log_error_impl(&dword_1B57BA000, v15, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v32);
      exception = __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)&v24);
      std::logic_error::logic_error(&v25, &v24);
      v25.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      std::logic_error::logic_error(&v26, &v25);
      v28 = 0;
      v29 = 0;
      v30 = 0;
      v31 = -1;
      v26.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
      v27 = &unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v26);
      *(_QWORD *)&v39[6] = "Timebase_Ref AMCP::IO_Core::IOContext_Core::get_master_timebase() const";
      v40 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/IOContext_Core.cpp";
      v41 = 1040;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v19);
      v22 = v19;
      v23 = v20;
      v19 = 0uLL;
      v20 = 0;
      v21 = off_1E69A20A0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v21);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
    }
    v10 = *(_QWORD *)(a2 + 128);
    v12 = *(_QWORD *)(v10 + 96);
    v11 = *(_QWORD *)(v10 + 104);
    *(_QWORD *)this = v12;
    *((_QWORD *)this + 1) = v11;
    if (v11)
    {
      v13 = (unint64_t *)(v11 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
  }
  else
  {
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
  }
}

void sub_1B57FA764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,void *a26,uint64_t a27)
{
  void *v27;
  int v28;
  uint64_t v29;
  uint64_t v31;

  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  *(_QWORD *)(v29 - 112) = &unk_1E69A2000;
  v31 = *(_QWORD *)(v29 - 104);
  if (v31 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 32))(v31))
    *(_QWORD *)(v29 - 104) = 0;
  MEMORY[0x1B5E500E8](v29 - 128);
  a26 = &unk_1E69A2000;
  if (a27 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a27 + 32))(a27))
    a27 = 0;
  MEMORY[0x1B5E500E8](&a24);
  MEMORY[0x1B5E500DC](&a22);
  if (a21 < 0)
    operator delete(a16);
  if (v28)
    __cxa_free_exception(v27);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v29 - 129));
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::In_Place_Storage<std::shared_ptr<AMCP::Graph::Timebase>>::dispatch(uint64_t result, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, _QWORD, _OWORD *);
  void (*v13)(uint64_t, AMCP::Thing *, _QWORD, _QWORD);
  _QWORD *v14;
  void (*v15)(_QWORD, _QWORD, _QWORD, _QWORD);
  std::__shared_weak_count *v16;
  void (*v17)(_QWORD, _QWORD, _QWORD, _QWORD);
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _OWORD v23[2];
  void (*v24)(_QWORD, _OWORD *, _QWORD, _QWORD);
  void (*v25)(uint64_t, AMCP::Thing *, _QWORD, _QWORD);
  std::__shared_weak_count *v26;

  switch((int)result)
  {
    case 0:
      goto LABEL_7;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      *(_QWORD *)a3 = *(_QWORD *)a2;
      v7 = *(_QWORD *)(a2 + 8);
      *((_QWORD *)a3 + 1) = v7;
      if (v7)
      {
        v8 = (unint64_t *)(v7 + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      result = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::shared_ptr<AMCP::Graph::Timebase>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::shared_ptr<AMCP::Graph::Timebase>>::dispatch;
LABEL_7:
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a2);
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      v10 = AMCP::Implementation::get_type_marker<std::shared_ptr<AMCP::Graph::Timebase>>();
      result = 0;
      *a4 = v10;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::shared_ptr<AMCP::Graph::Timebase>>())
        return a2;
      else
        return 0;
    case 5:
      v11 = AMCP::Implementation::get_type_marker<std::shared_ptr<AMCP::Graph::Timebase>>();
      v12 = *(void (**)(uint64_t, uint64_t, _QWORD, _OWORD *))(a2 + 32);
      *(_QWORD *)&v23[0] = 0;
      if (v12)
      {
        v12(3, a2, 0, v23);
        v12 = *(void (**)(uint64_t, uint64_t, _QWORD, _OWORD *))&v23[0];
      }
      if (v12 != (void (*)(uint64_t, uint64_t, _QWORD, _OWORD *))v11)
        goto LABEL_22;
      v13 = (void (*)(uint64_t, AMCP::Thing *, _QWORD, _QWORD))*((_QWORD *)a3 + 4);
      v25 = 0;
      if (v13)
      {
        v13(3, a3, 0, &v25);
        v13 = v25;
      }
      if (v13 == (void (*)(uint64_t, AMCP::Thing *, _QWORD, _QWORD))v11)
      {
        if (*(_QWORD *)(a2 + 32))
        {
          *(_QWORD *)&v23[0] = AMCP::Implementation::get_type_marker<std::shared_ptr<AMCP::Graph::Timebase>>();
          v14 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _OWORD *))(a2 + 32))(4, a2, 0, v23);
        }
        else
        {
          v14 = 0;
        }
        *(_QWORD *)&v23[0] = AMCP::Implementation::get_type_marker<std::shared_ptr<AMCP::Graph::Timebase>>();
        if (*v14 == *(_QWORD *)(*((uint64_t (**)(uint64_t, AMCP::Thing *, _QWORD, _OWORD *))a3 + 4))(4, a3, 0, v23))return 1;
      }
      else
      {
LABEL_22:
        AMCP::Thing::convert_to<std::shared_ptr<AMCP::Graph::Timebase>>(v23, a2);
        AMCP::Thing::convert_to<std::shared_ptr<AMCP::Graph::Timebase>>(&v25, (uint64_t)a3);
        v15 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))&v23[0];
        v17 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v25;
        v16 = v26;
        if (v26)
        {
          p_shared_owners = (unint64_t *)&v26->__shared_owners_;
          do
            v19 = __ldaxr(p_shared_owners);
          while (__stlxr(v19 - 1, p_shared_owners));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
        v20 = (std::__shared_weak_count *)*((_QWORD *)&v23[0] + 1);
        if (*((_QWORD *)&v23[0] + 1))
        {
          v21 = (unint64_t *)(*((_QWORD *)&v23[0] + 1) + 8);
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
        if (v15 == v17)
          return 1;
      }
      return 0;
    case 6:
      v24 = 0;
      memset(v23, 0, sizeof(v23));
      AMCP::swap((AMCP::Thing *)v23, a3, a3);
      if (v24)
        v24(0, v23, 0, 0);
      return 0;
    default:
      return result;
  }
}

uint64_t AMCP::Implementation::get_type_marker<std::shared_ptr<AMCP::Graph::Timebase>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const std::type_info *v4;

  v1 = &unk_1EF130000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EF130000;
    if (v3)
    {
      v1 = (_QWORD *)&unk_1EF130000;
    }
  }
  return v1[341];
}

_QWORD *AMCP::Thing::convert_to<std::shared_ptr<AMCP::Graph::Timebase>>(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, _QWORD, _QWORD);
  _QWORD *result;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::bad_cast *exception;
  std::bad_cast *v14;
  std::bad_cast *v15;
  std::bad_cast *v16;
  std::bad_cast *v17;
  std::bad_cast *v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD v21[2];
  uint64_t (*v22)(uint64_t, _OWORD *, _QWORD, uint64_t *);
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, _QWORD, _QWORD);

  if (!*(_QWORD *)(a2 + 32))
    goto LABEL_18;
  v4 = AMCP::Implementation::get_type_marker<std::shared_ptr<AMCP::Graph::Timebase>>();
  v5 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a2 + 32);
  v24 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v24);
    v5 = v24;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))v4)
  {
    v23 = v4;
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a2 + 32))(4, a2, 0, &v23);
    if (result)
    {
      v7 = result[1];
      *a1 = *result;
      a1[1] = v7;
      if (v7)
      {
        v8 = (unint64_t *)(v7 + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      return result;
    }
LABEL_18:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v14 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v14, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v20 = AMCP::Implementation::get_type_marker<std::shared_ptr<AMCP::Graph::Timebase>>();
  memset(v21, 0, sizeof(v21));
  v22 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v21, &v20);
  if (!v22)
  {
    v15 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v16 = std::bad_cast::bad_cast(v15);
    __cxa_throw(v16, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v19 = v4;
  result = (_QWORD *)v22(4, v21, 0, &v19);
  if (!result)
  {
    v17 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v18 = std::bad_cast::bad_cast(v17);
    __cxa_throw(v18, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v10 = result[1];
  *a1 = *result;
  a1[1] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  if (v22)
    return (_QWORD *)v22(0, v21, 0, 0);
  return result;
}

void sub_1B57FAD38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_30,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_30>,std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_30,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_30>,std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E696D500;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_30,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_30>,std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E696D500;
  a2[1] = v2;
  return result;
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_30,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_30>,std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::operator()(uint64_t a1@<X0>, AMCP::IO_Core::IOContext_Core *a2@<X8>)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  std::mutex::lock((std::mutex *)(v3 + 200));
  AMCP::IO_Core::IOContext_Core::get_master_timebase(a2, v3);
  std::mutex::unlock((std::mutex *)(v3 + 200));
}

void sub_1B57FAE04(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_30,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_30>,std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core14IOContext_Core11update_coreERNS_4Core13Operation_SetEE4$_30"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_30,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_30>,std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::target_type()
{
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_29,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_29>,void ()(AMCP::Power_State)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_29,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_29>,void ()(AMCP::Power_State)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E696D428;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_29,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_29>,void ()(AMCP::Power_State)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E696D428;
  a2[1] = v2;
  return result;
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_29,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_29>,void ()(AMCP::Power_State)>::operator()(uint64_t a1, int *a2)
{
  int v2;
  uint64_t v3;
  std::mutex *v4;
  uint64_t v5;
  _opaque_pthread_t *v6;
  _opaque_pthread_t *v7;
  _BOOL8 is_thread_configured_for_realtime;
  pthread_cond_t *v9;
  char v10;
  AMCP::Utility::Kernel_Error_Category *v11;
  unsigned int v12;
  AMCP::Log::Scope_Registry *v13;
  NSObject *v14;
  _opaque_pthread_t *v15;
  mach_port_t v16;
  void *exception;
  NSObject *v18;
  _opaque_pthread_t *v19;
  mach_port_t v20;
  void *v21;
  std::logic_error v22;
  char v23;
  __int128 v24;
  uint64_t v25;
  std::string v26;
  uint64_t v27;
  uint64_t (**v28)();
  _BYTE v29[24];
  std::logic_error v30;
  __int128 v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint8_t buf[8];
  _BYTE v38[10];
  __int16 v39;
  int v40;
  __int16 v41;
  _BYTE v42[14];
  const char *v43;
  const char *v44;
  const char *v45;
  int v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = (std::mutex *)(v3 + 200);
  std::mutex::lock((std::mutex *)(v3 + 200));
  v5 = *(_QWORD *)(v3 + 160);
  v6 = pthread_self();
  is_thread_configured_for_realtime = AMCP::Utility::is_thread_configured_for_realtime(v6, v7);
  if (is_thread_configured_for_realtime)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)is_thread_configured_for_realtime);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v14 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      v15 = pthread_self();
      v16 = pthread_mach_thread_np(v15);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v16;
      *(_WORD *)v38 = 2080;
      *(_QWORD *)&v38[2] = "IO_Thread.cpp";
      v39 = 1024;
      v40 = 177;
      v41 = 2080;
      *(_QWORD *)v42 = "not (not AMCP::Utility::is_thread_configured_for_realtime(pthread_self()))";
      _os_log_error_impl(&dword_1B57BA000, v14, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Don't call notify_and_update_power_assertions from a realtime thread", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v23);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Don't call notify_and_update_power_assertions from a realtime thread", (uint64_t)&v26);
    std::logic_error::logic_error(&v22, &v26);
    v22.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v30, &v22);
    *((_QWORD *)&v31 + 1) = 0;
    v32 = 0;
    v33 = 0;
    LODWORD(v34) = -1;
    v30.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    *(_QWORD *)&v31 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v30);
    *(_QWORD *)&v42[6] = "void AMCP::IO_Core::IO_Thread::update_power_state_and_notify(AMCP::Power_State)";
    v43 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/IO_Thread.cpp";
    LODWORD(v44) = 177;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v24);
    v28 = off_1E69A20A0;
    *(_OWORD *)v29 = v24;
    *(_QWORD *)&v29[16] = v25;
    v24 = 0uLL;
    v25 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v28);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  *(_DWORD *)(v5 + 56) = v2;
  v9 = *(pthread_cond_t **)(v5 + 32);
  *(_DWORD *)buf = caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load((uint64_t)v9);
  *(_WORD *)&buf[4] = 0;
  *(_DWORD *)v38 = v2;
  caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load((uint64_t)v9);
  v38[4] = v10 & 1;
  caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::store((uint64_t)v9, buf);
  v11 = (AMCP::Utility::Kernel_Error_Category *)pthread_cond_broadcast(v9 + 4);
  v12 = v11;
  AMCP::Utility::Kernel_Error_Category::get(v11);
  if (v12)
  {
    AMCP::Log::Scope_Registry::get(v13);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v18 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      v19 = pthread_self();
      v20 = pthread_mach_thread_np(v19);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v20;
      *(_WORD *)v38 = 2080;
      *(_QWORD *)&v38[2] = "Thread_Control_State.cpp";
      v39 = 1024;
      v40 = 178;
      v41 = 2080;
      *(_QWORD *)v42 = "kernel_error.operator BOOL()";
      _os_log_error_impl(&dword_1B57BA000, v18, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s failed to set the signaling the condition variable", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v22);
    v21 = __cxa_allocate_exception(0x50uLL);
    MEMORY[0x1B5E50220](&v28, v12, &AMCP::Utility::Kernel_Error_Category::get(void)::s_category);
    std::runtime_error::runtime_error((std::runtime_error *)&v30, (const std::runtime_error *)&v28);
    v31 = *(_OWORD *)&v29[8];
    v34 = 0;
    v35 = 0;
    v36 = -1;
    v30.__vftable = (std::logic_error_vtbl *)&off_1E69A12F8;
    v32 = &unk_1E69A1320;
    v33 = 0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone_impl((uint64_t)buf, (uint64_t)&v30);
    v44 = "void AMCP::IO_Core::Thread_Control_State::power_state_changed(AMCP::Power_State)";
    v45 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Thread_Control_State.cpp";
    v46 = 178;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v24);
    *(_OWORD *)&v26.__r_.__value_.__r.__words[1] = v24;
    v27 = v25;
    v24 = 0uLL;
    v25 = 0;
    v26.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>>((uint64_t)buf, (uint64_t)&v26);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone_impl((uint64_t)v21, (uint64_t)buf);
  }
  std::mutex::unlock(v4);
}

void sub_1B57FB2DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, void *a19, void *__p,int a21,__int16 a22,char a23,char a24,uint64_t a25,std::runtime_error a26,uint64_t a27,uint64_t a28,std::runtime_error a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  std::mutex *v33;
  void *v34;
  int v35;
  uint64_t v36;
  uint64_t v38;

  if (__p)
    operator delete(__p);
  if (a16)
  {
    a17 = (uint64_t)a16;
    operator delete(a16);
  }
  *(_QWORD *)(v36 - 112) = &unk_1E69A2000;
  v38 = *(_QWORD *)(v36 - 104);
  if (v38 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v38 + 32))(v38))
    *(_QWORD *)(v36 - 104) = 0;
  std::runtime_error::~runtime_error((std::runtime_error *)(v36 - 144));
  a32 = &unk_1E69A2000;
  if (a33 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a33 + 32))(a33))
    a33 = 0;
  std::runtime_error::~runtime_error(&a29);
  std::runtime_error::~runtime_error(&a26);
  if (v35)
    __cxa_free_exception(v34);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&a10);
  std::mutex::unlock(v33);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_29,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_29>,void ()(AMCP::Power_State)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core14IOContext_Core11update_coreERNS_4Core13Operation_SetEE4$_29"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_29,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_29>,void ()(AMCP::Power_State)>::target_type()
{
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_28,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_28>,void ()(BOOL const&)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_28,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_28>,void ()(BOOL const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E696D3A8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_28,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_28>,void ()(BOOL const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E696D3A8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_28,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_28>,void ()(BOOL const&)>::operator()(uint64_t result, unsigned __int8 *a2)
{
  int v2;
  uint64_t v3;
  int v4;
  BOOL v6;

  v2 = *a2;
  v3 = *(_QWORD *)(*(_QWORD *)(result + 8) + 160);
  v4 = *(_DWORD *)(v3 + 56);
  *(_BYTE *)(v3 + 61) = v2;
  v6 = v4 == 2 && v2 == 0;
  *(_BYTE *)(v3 + 62) = v6;
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_28,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_28>,void ()(BOOL const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core14IOContext_Core11update_coreERNS_4Core13Operation_SetEE4$_28"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_28,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_28>,void ()(BOOL const&)>::target_type()
{
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_27,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_27>,BOOL ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_27,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_27>,BOOL ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E696D328;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_27,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_27>,BOOL ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E696D328;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_27,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_27>,BOOL ()(void)>::operator()(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 160) + 61);
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_27,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_27>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core14IOContext_Core11update_coreERNS_4Core13Operation_SetEE4$_27"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_27,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_27>,BOOL ()(void)>::target_type()
{
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_26,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_26>,void ()(BOOL const&)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_26,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_26>,void ()(BOOL const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E696D2A8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_26,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_26>,void ()(BOOL const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E696D2A8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_26,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_26>,void ()(BOOL const&)>::operator()(uint64_t result, _BYTE *a2)
{
  uint64_t v2;
  int v3;
  BOOL v4;

  v2 = *(_QWORD *)(*(_QWORD *)(result + 8) + 160);
  v3 = *(_DWORD *)(v2 + 56);
  *(_BYTE *)(v2 + 60) = *a2;
  v4 = v3 == 2 && *(_BYTE *)(v2 + 61) == 0;
  *(_BYTE *)(v2 + 62) = v4;
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_26,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_26>,void ()(BOOL const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core14IOContext_Core11update_coreERNS_4Core13Operation_SetEE4$_26"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_26,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_26>,void ()(BOOL const&)>::target_type()
{
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_25,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_25>,BOOL ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_25,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_25>,BOOL ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E696D228;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_25,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_25>,BOOL ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E696D228;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_25,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_25>,BOOL ()(void)>::operator()(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 160) + 60);
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_25,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_25>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core14IOContext_Core11update_coreERNS_4Core13Operation_SetEE4$_25"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_25,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_25>,BOOL ()(void)>::target_type()
{
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_24,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_24>,void ()(BOOL const&)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_24,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_24>,void ()(BOOL const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E696D1A8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_24,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_24>,void ()(BOOL const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E696D1A8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_24,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_24>,void ()(BOOL const&)>::operator()(uint64_t result, _BYTE *a2)
{
  *(_BYTE *)(*(_QWORD *)(result + 8) + 616) = *a2;
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_24,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_24>,void ()(BOOL const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core14IOContext_Core11update_coreERNS_4Core13Operation_SetEE4$_24"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_24,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_24>,void ()(BOOL const&)>::target_type()
{
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_23,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_23>,BOOL ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_23,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_23>,BOOL ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E696D128;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_23,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_23>,BOOL ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E696D128;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_23,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_23>,BOOL ()(void)>::operator()(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 616);
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_23,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_23>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core14IOContext_Core11update_coreERNS_4Core13Operation_SetEE4$_23"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_23,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_23>,BOOL ()(void)>::target_type()
{
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<BOOL>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<BOOL>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6999DD8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<BOOL>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<BOOL>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6999DD8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<BOOL>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<BOOL>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x40uLL);
  *v3 = &off_1E6999DD8;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(_QWORD *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1B57FBA48(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<BOOL>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<BOOL>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a2 = &off_1E6999DD8;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<BOOL>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<BOOL>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<BOOL>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<BOOL>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<BOOL>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<BOOL>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  BOOL v4;

  v2 = (_QWORD *)(a1 + 8);
  v4 = AMCP::Thing::convert_to<BOOL>(a2);
  return AMCP::Core::Operation::call_function<void,BOOL const&>(v2, (uint64_t)&v4);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<BOOL>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<BOOL>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities27add_generic_property_setterIbEEvRNS0_9OperationEEUlRKNS_5ThingEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<BOOL>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<BOOL>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target_type()
{
}

uint64_t AMCP::Core::Operation::call_function<void,BOOL const&>(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  AMCP::Log::Scope_Registry *v5;
  AMCP::Log::Scope_Registry *v6;
  uint64_t v7;
  NSObject *v9;
  _opaque_pthread_t *v10;
  mach_port_t v11;
  void *v12;
  NSObject *v13;
  _opaque_pthread_t *v14;
  mach_port_t v15;
  void *exception;
  __int128 v17;
  uint64_t v18;
  uint64_t (**v19)();
  __int128 v20;
  uint64_t v21;
  std::string v22;
  std::runtime_error v23;
  std::runtime_error v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  char v30;
  uint8_t buf[8];
  __int16 v32;
  char *v33;
  __int16 v34;
  int v35;
  const char *v36;
  const char *v37;
  int v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v4 = AMCP::Implementation::get_type_marker<std::function<void ()(BOOL const&)>>();
  v5 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(a1, v4);
  if (!v5)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v13 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v14 = pthread_self();
      v15 = pthread_mach_thread_np(v14);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v15;
      v32 = 2080;
      v33 = "Operation.h";
      v34 = 1024;
      v35 = 154;
      _os_log_error_impl(&dword_1B57BA000, v13, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v30);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v22);
    std::runtime_error::runtime_error(&v23, &v22);
    std::runtime_error::runtime_error(&v24, &v23);
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = -1;
    v24.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v25 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v24);
    v36 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void, Argument_Types "
          "= <const BOOL &>]";
    v37 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v38 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v17);
    v20 = v17;
    v21 = v18;
    v17 = 0uLL;
    v18 = 0;
    v19 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v19);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v6 = v5;
  if (!*((_QWORD *)v5 + 7)
    || (*(_QWORD *)buf = AMCP::Implementation::get_type_marker<std::function<void ()(BOOL const&)>>(),
        (v5 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, _QWORD, uint8_t *))v6 + 7))(4, (uint64_t)v6 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v9 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v10 = pthread_self();
      v11 = pthread_mach_thread_np(v10);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v11;
      v32 = 2080;
      v33 = "Operation.h";
      v34 = 1024;
      v35 = 161;
      _os_log_error_impl(&dword_1B57BA000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v30);
    v12 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v22);
    std::runtime_error::runtime_error(&v23, &v22);
    std::runtime_error::runtime_error(&v24, &v23);
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = -1;
    v24.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v25 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v24);
    v36 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void, Argument_Types "
          "= <const BOOL &>]";
    v37 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v38 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v17);
    v20 = v17;
    v21 = v18;
    v17 = 0uLL;
    v18 = 0;
    v19 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v19);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v12, (uint64_t)buf);
  }
  v7 = *((_QWORD *)v5 + 3);
  if (!v7)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 48))(v7, a2);
}

void sub_1B57FBF34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,std::runtime_error a23,uint64_t a24,uint64_t a25)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_22,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_22>,void ()(BOOL const&)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_22,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_22>,void ()(BOOL const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E696D0A8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_22,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_22>,void ()(BOOL const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E696D0A8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_22,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_22>,void ()(BOOL const&)>::operator()(uint64_t result, _BYTE *a2)
{
  *(_BYTE *)(*(_QWORD *)(result + 8) + 604) = *a2;
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_22,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_22>,void ()(BOOL const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core14IOContext_Core11update_coreERNS_4Core13Operation_SetEE4$_22"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_22,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_22>,void ()(BOOL const&)>::target_type()
{
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6999230;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6999230;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x40uLL);
  *v3 = &off_1E6999230;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(_QWORD *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1B57FC23C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a2 = &off_1E6999230;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);
  operator delete(a1);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v3;
  double result;

  v3 = AMCP::Core::Operation::call_function<BOOL>((_QWORD *)(a1 + 8));
  result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_BYTE *)a2 = v3;
  *(_QWORD *)(a2 + 32) = AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
  return result;
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities27add_generic_property_getterIbEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

BOOL AMCP::Implementation::In_Place_Storage<BOOL>::dispatch(_BOOL8 result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  __int128 v7;
  uint64_t type;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, _QWORD, __int128 *);
  void (*v11)(uint64_t, uint64_t, _QWORD, _QWORD);
  unsigned __int8 *v12;
  AMCP::Thing *v13;
  char *v14;
  _BOOL4 v15;
  BOOL (*v16)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  char v17;
  char v18;
  char v19;
  __int16 v20;
  __int16 v21;
  int v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  float v28;
  double v29;
  double v30;
  int v31;
  __int128 v32;
  __int128 v33;
  BOOL (*v34)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  void (*v35)(uint64_t, uint64_t, _QWORD, _QWORD);

  switch(result)
  {
    case 0:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      v7 = 0uLL;
      goto LABEL_7;
    case 1:
      result = 0;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_BYTE *)a3 = *(_BYTE *)a2;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
      return result;
    case 2:
      result = 0;
      v7 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_BYTE *)a3 = *(_BYTE *)a2;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
      *(_QWORD *)(a2 + 32) = 0;
LABEL_7:
      *(_OWORD *)a2 = v7;
      *(_OWORD *)(a2 + 16) = v7;
      return result;
    case 3:
      type = AMCP::Implementation::get_type_marker<BOOL>();
      result = 0;
      *a4 = type;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<BOOL>())
        return a2;
      else
        return 0;
    case 5:
      v9 = AMCP::Implementation::get_type_marker<BOOL>();
      v10 = *(void (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32);
      *(_QWORD *)&v32 = 0;
      if (v10)
      {
        v10(3, a2, 0, &v32);
        v10 = (void (*)(uint64_t, uint64_t, _QWORD, __int128 *))v32;
      }
      if (v10 != (void (*)(uint64_t, uint64_t, _QWORD, __int128 *))v9)
        goto LABEL_22;
      v11 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a3 + 32);
      v35 = 0;
      if (v11)
      {
        v11(3, a3, 0, &v35);
        v11 = v35;
      }
      if (v11 != (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))v9)
      {
LABEL_22:
        v15 = AMCP::Thing::convert_to<BOOL>(a2);
        return v15 == AMCP::Thing::convert_to<BOOL>(a3);
      }
      if (*(_QWORD *)(a2 + 32))
      {
        *(_QWORD *)&v32 = AMCP::Implementation::get_type_marker<BOOL>();
        v12 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32))(4, a2, 0, &v32);
      }
      else
      {
        v12 = 0;
      }
      *(_QWORD *)&v32 = AMCP::Implementation::get_type_marker<BOOL>();
      return *v12 == *(unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a3 + 32))(4, a3, 0, &v32);
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<BOOL>()
        && !AMCP::is_one_of<char,signed char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double,long double,AMCP::Direction,applesauce::CF::BooleanRef,applesauce::CF::NumberRef>(a4))
      {
        goto LABEL_89;
      }
      if (*(_QWORD *)(a2 + 32))
      {
        *(_QWORD *)&v32 = AMCP::Implementation::get_type_marker<BOOL>();
        v14 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32))(4, a2, 0, &v32);
      }
      else
      {
        v14 = 0;
      }
      if (*a4 != AMCP::Implementation::get_type_marker<BOOL>())
      {
        if (*a4 == AMCP::Implementation::get_type_marker<char>())
        {
          if (v14)
          {
            v17 = *v14;
            v32 = 0u;
            v33 = 0u;
            LOBYTE(v32) = v17;
            v16 = AMCP::Implementation::In_Place_Storage<char>::dispatch;
            goto LABEL_80;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<signed char>())
        {
          if (v14)
          {
            v18 = *v14;
            v32 = 0u;
            v33 = 0u;
            LOBYTE(v32) = v18;
            v16 = AMCP::Implementation::In_Place_Storage<signed char>::dispatch;
            goto LABEL_80;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned char>())
        {
          if (v14)
          {
            v19 = *v14;
            v32 = 0u;
            v33 = 0u;
            LOBYTE(v32) = v19;
            v16 = AMCP::Implementation::In_Place_Storage<unsigned char>::dispatch;
            goto LABEL_80;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<short>())
        {
          if (v14)
          {
            v20 = *v14;
            v32 = 0u;
            v33 = 0u;
            LOWORD(v32) = v20;
            v16 = AMCP::Implementation::In_Place_Storage<short>::dispatch;
            goto LABEL_80;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned short>())
        {
          if (v14)
          {
            v21 = *v14;
            v32 = 0u;
            v33 = 0u;
            LOWORD(v32) = v21;
            v16 = AMCP::Implementation::In_Place_Storage<unsigned short>::dispatch;
            goto LABEL_80;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<int>())
        {
          if (v14)
          {
            v22 = *v14;
            v32 = 0u;
            v33 = 0u;
            LODWORD(v32) = v22;
            v16 = AMCP::Implementation::In_Place_Storage<int>::dispatch;
            goto LABEL_80;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned int>())
        {
          if (v14)
          {
            v23 = *v14;
            v32 = 0u;
            v33 = 0u;
            LODWORD(v32) = v23;
            v16 = AMCP::Implementation::In_Place_Storage<unsigned int>::dispatch;
            goto LABEL_80;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<long>())
        {
          if (v14)
          {
            v24 = *v14;
            v33 = 0uLL;
            v32 = v24;
            v16 = AMCP::Implementation::In_Place_Storage<long>::dispatch;
            goto LABEL_80;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned long>())
        {
          if (v14)
          {
            v25 = *v14;
            v33 = 0uLL;
            v32 = v25;
            v16 = AMCP::Implementation::In_Place_Storage<unsigned long>::dispatch;
            goto LABEL_80;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<long long>())
        {
          if (v14)
          {
            v26 = *v14;
            v33 = 0uLL;
            v32 = v26;
            v16 = AMCP::Implementation::In_Place_Storage<long long>::dispatch;
            goto LABEL_80;
          }
        }
        else
        {
          if (*a4 != AMCP::Implementation::get_type_marker<unsigned long long>())
          {
            if (*a4 == AMCP::Implementation::get_type_marker<float>())
            {
              if (v14)
              {
                v28 = 0.0;
                if (*v14)
                  v28 = 1.0;
                v32 = 0u;
                v33 = 0u;
                *(float *)&v32 = v28;
                v16 = AMCP::Implementation::In_Place_Storage<float>::dispatch;
                goto LABEL_80;
              }
              goto LABEL_84;
            }
            if (*a4 == AMCP::Implementation::get_type_marker<double>())
            {
              if (!v14)
                goto LABEL_84;
              v29 = 0.0;
              if (*v14)
                v29 = 1.0;
              *(_QWORD *)&v33 = 0;
              v32 = *(unint64_t *)&v29;
              v16 = AMCP::Implementation::In_Place_Storage<double>::dispatch;
            }
            else
            {
              if (*a4 != AMCP::Implementation::get_type_marker<long double>())
              {
                if (*a4 != AMCP::Implementation::get_type_marker<AMCP::Direction>())
                {
                  if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>())
                  {
                    AMCP::Implementation::create_number_from<BOOL,applesauce::CF::BooleanRef>(&v32, v14);
                  }
                  else if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>())
                  {
                    AMCP::Implementation::create_number_from<BOOL,applesauce::CF::NumberRef>((uint64_t)&v32, v14);
                  }
                  else
                  {
LABEL_89:
                    v34 = 0;
                    v32 = 0u;
                    v33 = 0u;
                  }
                  goto LABEL_90;
                }
                if (v14)
                {
                  v31 = *v14;
                  v32 = 0u;
                  v33 = 0u;
                  LODWORD(v32) = v31;
                  v16 = AMCP::Implementation::In_Place_Storage<AMCP::Direction>::dispatch;
                  goto LABEL_80;
                }
                goto LABEL_84;
              }
              if (!v14)
                goto LABEL_84;
              v30 = 0.0;
              if (*v14)
                v30 = 1.0;
              *(_QWORD *)&v33 = 0;
              v32 = *(unint64_t *)&v30;
              v16 = AMCP::Implementation::In_Place_Storage<long double>::dispatch;
            }
            *((_QWORD *)&v33 + 1) = 0;
            goto LABEL_80;
          }
          if (v14)
          {
            v27 = *v14;
            v33 = 0uLL;
            v32 = v27;
            v16 = AMCP::Implementation::In_Place_Storage<unsigned long long>::dispatch;
            goto LABEL_80;
          }
        }
LABEL_84:
        __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
      }
      if (!v14)
        goto LABEL_84;
      v32 = 0u;
      v33 = 0u;
      LOBYTE(v32) = *v14;
      v16 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
LABEL_80:
      v34 = v16;
LABEL_90:
      AMCP::swap((AMCP::Thing *)&v32, (AMCP::Thing *)a3, v13);
      if (v34)
        v34(0, (uint64_t)&v32, 0, 0);
      return 0;
    default:
      return result;
  }
}

void sub_1B57FC93C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B57FC90CLL);
}

BOOL AMCP::is_one_of<char,signed char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double,long double,AMCP::Direction,applesauce::CF::BooleanRef,applesauce::CF::NumberRef>(_QWORD *a1)
{
  return *a1 == AMCP::Implementation::get_type_marker<char>()
      || *a1 == AMCP::Implementation::get_type_marker<signed char>()
      || *a1 == AMCP::Implementation::get_type_marker<unsigned char>()
      || *a1 == AMCP::Implementation::get_type_marker<short>()
      || *a1 == AMCP::Implementation::get_type_marker<unsigned short>()
      || *a1 == AMCP::Implementation::get_type_marker<int>()
      || *a1 == AMCP::Implementation::get_type_marker<unsigned int>()
      || *a1 == AMCP::Implementation::get_type_marker<long>()
      || AMCP::is_one_of<unsigned long,long long,unsigned long long,float,double,long double,AMCP::Direction,applesauce::CF::BooleanRef,applesauce::CF::NumberRef>(a1);
}

uint64_t AMCP::Implementation::get_type_marker<char>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      AMCP::Implementation::get_type_marker<char>(void)::s_type_marker = AMCP::Implementation::generate_type_marker(MEMORY[0x1E0DE4EC8], v4);
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return v1[173];
}

BOOL AMCP::Implementation::In_Place_Storage<char>::dispatch(_BOOL8 result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  __int128 v7;
  uint64_t type;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, _QWORD, __int128 *);
  void (*v11)(uint64_t, uint64_t, _QWORD, _QWORD);
  unsigned __int8 *v12;
  AMCP::Thing *v13;
  char *v14;
  int v15;
  BOOL v16;
  BOOL (*v17)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  char v18;
  char v19;
  __int16 v20;
  __int16 v21;
  int v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  float v28;
  unint64_t v29;
  unint64_t v30;
  _BOOL4 v31;
  __int128 v32;
  __int128 v33;
  BOOL (*v34)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  void (*v35)(uint64_t, uint64_t, _QWORD, _QWORD);

  switch(result)
  {
    case 0:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      v7 = 0uLL;
      goto LABEL_7;
    case 1:
      result = 0;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_BYTE *)a3 = *(_BYTE *)a2;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<char>::dispatch;
      return result;
    case 2:
      result = 0;
      v7 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_BYTE *)a3 = *(_BYTE *)a2;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<char>::dispatch;
      *(_QWORD *)(a2 + 32) = 0;
LABEL_7:
      *(_OWORD *)a2 = v7;
      *(_OWORD *)(a2 + 16) = v7;
      return result;
    case 3:
      type = AMCP::Implementation::get_type_marker<char>();
      result = 0;
      *a4 = type;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<char>())
        return a2;
      else
        return 0;
    case 5:
      v9 = AMCP::Implementation::get_type_marker<char>();
      v10 = *(void (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32);
      *(_QWORD *)&v32 = 0;
      if (v10)
      {
        v10(3, a2, 0, &v32);
        v10 = (void (*)(uint64_t, uint64_t, _QWORD, __int128 *))v32;
      }
      if (v10 != (void (*)(uint64_t, uint64_t, _QWORD, __int128 *))v9)
        goto LABEL_22;
      v11 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a3 + 32);
      v35 = 0;
      if (v11)
      {
        v11(3, a3, 0, &v35);
        v11 = v35;
      }
      if (v11 != (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))v9)
      {
LABEL_22:
        v15 = AMCP::Thing::convert_to<char>(a2);
        return v15 == AMCP::Thing::convert_to<char>(a3);
      }
      if (*(_QWORD *)(a2 + 32))
      {
        *(_QWORD *)&v32 = AMCP::Implementation::get_type_marker<char>();
        v12 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32))(4, a2, 0, &v32);
      }
      else
      {
        v12 = 0;
      }
      *(_QWORD *)&v32 = AMCP::Implementation::get_type_marker<char>();
      return *v12 == *(unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a3 + 32))(4, a3, 0, &v32);
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<BOOL>()
        && !AMCP::is_one_of<char,signed char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double,long double,AMCP::Direction,applesauce::CF::BooleanRef,applesauce::CF::NumberRef>(a4))
      {
        goto LABEL_83;
      }
      if (*(_QWORD *)(a2 + 32))
      {
        *(_QWORD *)&v32 = AMCP::Implementation::get_type_marker<char>();
        v14 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32))(4, a2, 0, &v32);
      }
      else
      {
        v14 = 0;
      }
      if (*a4 != AMCP::Implementation::get_type_marker<BOOL>())
      {
        if (*a4 == AMCP::Implementation::get_type_marker<char>())
        {
          if (v14)
          {
            v32 = 0u;
            v33 = 0u;
            LOBYTE(v32) = *v14;
            v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<char>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<signed char>())
        {
          if (v14)
          {
            v18 = *v14;
            v32 = 0u;
            v33 = 0u;
            LOBYTE(v32) = v18;
            v17 = AMCP::Implementation::In_Place_Storage<signed char>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned char>())
        {
          if (v14)
          {
            v19 = *v14;
            v32 = 0u;
            v33 = 0u;
            LOBYTE(v32) = v19;
            v17 = AMCP::Implementation::In_Place_Storage<unsigned char>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<short>())
        {
          if (v14)
          {
            v20 = *v14;
            v32 = 0u;
            v33 = 0u;
            LOWORD(v32) = v20;
            v17 = AMCP::Implementation::In_Place_Storage<short>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned short>())
        {
          if (v14)
          {
            v21 = *v14;
            v32 = 0u;
            v33 = 0u;
            LOWORD(v32) = v21;
            v17 = AMCP::Implementation::In_Place_Storage<unsigned short>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<int>())
        {
          if (v14)
          {
            v22 = *v14;
            v32 = 0u;
            v33 = 0u;
            LODWORD(v32) = v22;
            v17 = AMCP::Implementation::In_Place_Storage<int>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned int>())
        {
          if (v14)
          {
            v23 = *v14;
            v32 = 0u;
            v33 = 0u;
            LODWORD(v32) = v23;
            v17 = AMCP::Implementation::In_Place_Storage<unsigned int>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<long>())
        {
          if (v14)
          {
            v24 = *v14;
            v33 = 0uLL;
            v32 = v24;
            v17 = AMCP::Implementation::In_Place_Storage<long>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned long>())
        {
          if (v14)
          {
            v25 = *v14;
            v33 = 0uLL;
            v32 = v25;
            v17 = AMCP::Implementation::In_Place_Storage<unsigned long>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<long long>())
        {
          if (v14)
          {
            v26 = *v14;
            v33 = 0uLL;
            v32 = v26;
            v17 = AMCP::Implementation::In_Place_Storage<long long>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned long long>())
        {
          if (v14)
          {
            v27 = *v14;
            v33 = 0uLL;
            v32 = v27;
            v17 = AMCP::Implementation::In_Place_Storage<unsigned long long>::dispatch;
            goto LABEL_74;
          }
        }
        else
        {
          if (*a4 != AMCP::Implementation::get_type_marker<float>())
          {
            if (*a4 == AMCP::Implementation::get_type_marker<double>())
            {
              if (!v14)
                goto LABEL_78;
              *(double *)&v29 = (double)*v14;
              *(_QWORD *)&v33 = 0;
              v32 = v29;
              v17 = AMCP::Implementation::In_Place_Storage<double>::dispatch;
            }
            else
            {
              if (*a4 != AMCP::Implementation::get_type_marker<long double>())
              {
                if (*a4 != AMCP::Implementation::get_type_marker<AMCP::Direction>())
                {
                  if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>())
                  {
                    AMCP::Implementation::create_number_from<BOOL,applesauce::CF::BooleanRef>(&v32, v14);
                  }
                  else if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>())
                  {
                    AMCP::Implementation::create_number_from<char,applesauce::CF::NumberRef>((uint64_t)&v32, v14);
                  }
                  else
                  {
LABEL_83:
                    v34 = 0;
                    v32 = 0u;
                    v33 = 0u;
                  }
                  goto LABEL_84;
                }
                if (v14)
                {
                  v31 = *v14 != 0;
                  v32 = 0u;
                  v33 = 0u;
                  LODWORD(v32) = v31;
                  v17 = AMCP::Implementation::In_Place_Storage<AMCP::Direction>::dispatch;
                  goto LABEL_74;
                }
                goto LABEL_78;
              }
              if (!v14)
                goto LABEL_78;
              *(double *)&v30 = (double)*v14;
              *(_QWORD *)&v33 = 0;
              v32 = v30;
              v17 = AMCP::Implementation::In_Place_Storage<long double>::dispatch;
            }
            *((_QWORD *)&v33 + 1) = 0;
            goto LABEL_74;
          }
          if (v14)
          {
            v28 = (float)*v14;
            v32 = 0u;
            v33 = 0u;
            *(float *)&v32 = v28;
            v17 = AMCP::Implementation::In_Place_Storage<float>::dispatch;
            goto LABEL_74;
          }
        }
LABEL_78:
        __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
      }
      if (!v14)
        goto LABEL_78;
      v16 = *v14 != 0;
      v32 = 0u;
      v33 = 0u;
      LOBYTE(v32) = v16;
      v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
LABEL_74:
      v34 = v17;
LABEL_84:
      AMCP::swap((AMCP::Thing *)&v32, (AMCP::Thing *)a3, v13);
      if (v34)
        v34(0, (uint64_t)&v32, 0, 0);
      return 0;
    default:
      return result;
  }
}

void sub_1B57FD044(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B57FD014);
}

uint64_t AMCP::Implementation::get_type_marker<signed char>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      AMCP::Implementation::get_type_marker<signed char>(void)::s_type_marker = AMCP::Implementation::generate_type_marker(MEMORY[0x1E0DE4EB8], v4);
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return v1[175];
}

BOOL AMCP::Implementation::In_Place_Storage<signed char>::dispatch(_BOOL8 result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  __int128 v7;
  uint64_t type;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, _QWORD, __int128 *);
  void (*v11)(uint64_t, uint64_t, _QWORD, _QWORD);
  unsigned __int8 *v12;
  AMCP::Thing *v13;
  char *v14;
  int v15;
  BOOL v16;
  BOOL (*v17)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  char v18;
  char v19;
  __int16 v20;
  __int16 v21;
  int v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  float v28;
  unint64_t v29;
  unint64_t v30;
  _BOOL4 v31;
  __int128 v32;
  __int128 v33;
  BOOL (*v34)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  void (*v35)(uint64_t, uint64_t, _QWORD, _QWORD);

  switch(result)
  {
    case 0:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      v7 = 0uLL;
      goto LABEL_7;
    case 1:
      result = 0;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_BYTE *)a3 = *(_BYTE *)a2;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<signed char>::dispatch;
      return result;
    case 2:
      result = 0;
      v7 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_BYTE *)a3 = *(_BYTE *)a2;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<signed char>::dispatch;
      *(_QWORD *)(a2 + 32) = 0;
LABEL_7:
      *(_OWORD *)a2 = v7;
      *(_OWORD *)(a2 + 16) = v7;
      return result;
    case 3:
      type = AMCP::Implementation::get_type_marker<signed char>();
      result = 0;
      *a4 = type;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<signed char>())
        return a2;
      else
        return 0;
    case 5:
      v9 = AMCP::Implementation::get_type_marker<signed char>();
      v10 = *(void (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32);
      *(_QWORD *)&v32 = 0;
      if (v10)
      {
        v10(3, a2, 0, &v32);
        v10 = (void (*)(uint64_t, uint64_t, _QWORD, __int128 *))v32;
      }
      if (v10 != (void (*)(uint64_t, uint64_t, _QWORD, __int128 *))v9)
        goto LABEL_22;
      v11 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a3 + 32);
      v35 = 0;
      if (v11)
      {
        v11(3, a3, 0, &v35);
        v11 = v35;
      }
      if (v11 != (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))v9)
      {
LABEL_22:
        v15 = AMCP::Thing::convert_to<signed char>(a2);
        return v15 == AMCP::Thing::convert_to<signed char>(a3);
      }
      if (*(_QWORD *)(a2 + 32))
      {
        *(_QWORD *)&v32 = AMCP::Implementation::get_type_marker<signed char>();
        v12 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32))(4, a2, 0, &v32);
      }
      else
      {
        v12 = 0;
      }
      *(_QWORD *)&v32 = AMCP::Implementation::get_type_marker<signed char>();
      return *v12 == *(unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a3 + 32))(4, a3, 0, &v32);
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<BOOL>()
        && !AMCP::is_one_of<char,signed char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double,long double,AMCP::Direction,applesauce::CF::BooleanRef,applesauce::CF::NumberRef>(a4))
      {
        goto LABEL_83;
      }
      if (*(_QWORD *)(a2 + 32))
      {
        *(_QWORD *)&v32 = AMCP::Implementation::get_type_marker<signed char>();
        v14 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32))(4, a2, 0, &v32);
      }
      else
      {
        v14 = 0;
      }
      if (*a4 != AMCP::Implementation::get_type_marker<BOOL>())
      {
        if (*a4 == AMCP::Implementation::get_type_marker<char>())
        {
          if (v14)
          {
            v18 = *v14;
            v32 = 0u;
            v33 = 0u;
            LOBYTE(v32) = v18;
            v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<char>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<signed char>())
        {
          if (v14)
          {
            v32 = 0u;
            v33 = 0u;
            LOBYTE(v32) = *v14;
            v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<signed char>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned char>())
        {
          if (v14)
          {
            v19 = *v14;
            v32 = 0u;
            v33 = 0u;
            LOBYTE(v32) = v19;
            v17 = AMCP::Implementation::In_Place_Storage<unsigned char>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<short>())
        {
          if (v14)
          {
            v20 = *v14;
            v32 = 0u;
            v33 = 0u;
            LOWORD(v32) = v20;
            v17 = AMCP::Implementation::In_Place_Storage<short>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned short>())
        {
          if (v14)
          {
            v21 = *v14;
            v32 = 0u;
            v33 = 0u;
            LOWORD(v32) = v21;
            v17 = AMCP::Implementation::In_Place_Storage<unsigned short>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<int>())
        {
          if (v14)
          {
            v22 = *v14;
            v32 = 0u;
            v33 = 0u;
            LODWORD(v32) = v22;
            v17 = AMCP::Implementation::In_Place_Storage<int>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned int>())
        {
          if (v14)
          {
            v23 = *v14;
            v32 = 0u;
            v33 = 0u;
            LODWORD(v32) = v23;
            v17 = AMCP::Implementation::In_Place_Storage<unsigned int>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<long>())
        {
          if (v14)
          {
            v24 = *v14;
            v33 = 0uLL;
            v32 = v24;
            v17 = AMCP::Implementation::In_Place_Storage<long>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned long>())
        {
          if (v14)
          {
            v25 = *v14;
            v33 = 0uLL;
            v32 = v25;
            v17 = AMCP::Implementation::In_Place_Storage<unsigned long>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<long long>())
        {
          if (v14)
          {
            v26 = *v14;
            v33 = 0uLL;
            v32 = v26;
            v17 = AMCP::Implementation::In_Place_Storage<long long>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned long long>())
        {
          if (v14)
          {
            v27 = *v14;
            v33 = 0uLL;
            v32 = v27;
            v17 = AMCP::Implementation::In_Place_Storage<unsigned long long>::dispatch;
            goto LABEL_74;
          }
        }
        else
        {
          if (*a4 != AMCP::Implementation::get_type_marker<float>())
          {
            if (*a4 == AMCP::Implementation::get_type_marker<double>())
            {
              if (!v14)
                goto LABEL_78;
              *(double *)&v29 = (double)*v14;
              *(_QWORD *)&v33 = 0;
              v32 = v29;
              v17 = AMCP::Implementation::In_Place_Storage<double>::dispatch;
            }
            else
            {
              if (*a4 != AMCP::Implementation::get_type_marker<long double>())
              {
                if (*a4 != AMCP::Implementation::get_type_marker<AMCP::Direction>())
                {
                  if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>())
                  {
                    AMCP::Implementation::create_number_from<BOOL,applesauce::CF::BooleanRef>(&v32, v14);
                  }
                  else if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>())
                  {
                    AMCP::Implementation::create_number_from<signed char,applesauce::CF::NumberRef>((uint64_t)&v32, v14);
                  }
                  else
                  {
LABEL_83:
                    v34 = 0;
                    v32 = 0u;
                    v33 = 0u;
                  }
                  goto LABEL_84;
                }
                if (v14)
                {
                  v31 = *v14 != 0;
                  v32 = 0u;
                  v33 = 0u;
                  LODWORD(v32) = v31;
                  v17 = AMCP::Implementation::In_Place_Storage<AMCP::Direction>::dispatch;
                  goto LABEL_74;
                }
                goto LABEL_78;
              }
              if (!v14)
                goto LABEL_78;
              *(double *)&v30 = (double)*v14;
              *(_QWORD *)&v33 = 0;
              v32 = v30;
              v17 = AMCP::Implementation::In_Place_Storage<long double>::dispatch;
            }
            *((_QWORD *)&v33 + 1) = 0;
            goto LABEL_74;
          }
          if (v14)
          {
            v28 = (float)*v14;
            v32 = 0u;
            v33 = 0u;
            *(float *)&v32 = v28;
            v17 = AMCP::Implementation::In_Place_Storage<float>::dispatch;
            goto LABEL_74;
          }
        }
LABEL_78:
        __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
      }
      if (!v14)
        goto LABEL_78;
      v16 = *v14 != 0;
      v32 = 0u;
      v33 = 0u;
      LOBYTE(v32) = v16;
      v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
LABEL_74:
      v34 = v17;
LABEL_84:
      AMCP::swap((AMCP::Thing *)&v32, (AMCP::Thing *)a3, v13);
      if (v34)
        v34(0, (uint64_t)&v32, 0, 0);
      return 0;
    default:
      return result;
  }
}

void sub_1B57FD69C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B57FD66CLL);
}

uint64_t AMCP::Implementation::get_type_marker<unsigned char>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      AMCP::Implementation::get_type_marker<unsigned char>(void)::s_type_marker = AMCP::Implementation::generate_type_marker(MEMORY[0x1E0DE4EE8], v4);
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return v1[177];
}

BOOL AMCP::Implementation::In_Place_Storage<unsigned char>::dispatch(_BOOL8 result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  __int128 v7;
  uint64_t type;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, _QWORD, __int128 *);
  void (*v11)(uint64_t, uint64_t, _QWORD, _QWORD);
  unsigned __int8 *v12;
  AMCP::Thing *v13;
  char *v14;
  int v15;
  BOOL v16;
  BOOL (*v17)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  char v18;
  char v19;
  __int16 v20;
  __int16 v21;
  int v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t v29;
  unint64_t v30;
  _BOOL4 v31;
  __int128 v32;
  __int128 v33;
  BOOL (*v34)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  void (*v35)(uint64_t, uint64_t, _QWORD, _QWORD);

  switch(result)
  {
    case 0:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      v7 = 0uLL;
      goto LABEL_7;
    case 1:
      result = 0;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_BYTE *)a3 = *(_BYTE *)a2;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<unsigned char>::dispatch;
      return result;
    case 2:
      result = 0;
      v7 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_BYTE *)a3 = *(_BYTE *)a2;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<unsigned char>::dispatch;
      *(_QWORD *)(a2 + 32) = 0;
LABEL_7:
      *(_OWORD *)a2 = v7;
      *(_OWORD *)(a2 + 16) = v7;
      return result;
    case 3:
      type = AMCP::Implementation::get_type_marker<unsigned char>();
      result = 0;
      *a4 = type;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<unsigned char>())
        return a2;
      else
        return 0;
    case 5:
      v9 = AMCP::Implementation::get_type_marker<unsigned char>();
      v10 = *(void (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32);
      *(_QWORD *)&v32 = 0;
      if (v10)
      {
        v10(3, a2, 0, &v32);
        v10 = (void (*)(uint64_t, uint64_t, _QWORD, __int128 *))v32;
      }
      if (v10 != (void (*)(uint64_t, uint64_t, _QWORD, __int128 *))v9)
        goto LABEL_22;
      v11 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a3 + 32);
      v35 = 0;
      if (v11)
      {
        v11(3, a3, 0, &v35);
        v11 = v35;
      }
      if (v11 != (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))v9)
      {
LABEL_22:
        v15 = AMCP::Thing::convert_to<unsigned char>(a2);
        return v15 == AMCP::Thing::convert_to<unsigned char>(a3);
      }
      if (*(_QWORD *)(a2 + 32))
      {
        *(_QWORD *)&v32 = AMCP::Implementation::get_type_marker<unsigned char>();
        v12 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32))(4, a2, 0, &v32);
      }
      else
      {
        v12 = 0;
      }
      *(_QWORD *)&v32 = AMCP::Implementation::get_type_marker<unsigned char>();
      return *v12 == *(unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a3 + 32))(4, a3, 0, &v32);
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<BOOL>()
        && !AMCP::is_one_of<char,signed char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double,long double,AMCP::Direction,applesauce::CF::BooleanRef,applesauce::CF::NumberRef>(a4))
      {
        goto LABEL_83;
      }
      if (*(_QWORD *)(a2 + 32))
      {
        *(_QWORD *)&v32 = AMCP::Implementation::get_type_marker<unsigned char>();
        v14 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32))(4, a2, 0, &v32);
      }
      else
      {
        v14 = 0;
      }
      if (*a4 != AMCP::Implementation::get_type_marker<BOOL>())
      {
        if (*a4 == AMCP::Implementation::get_type_marker<char>())
        {
          if (v14)
          {
            v18 = *v14;
            v32 = 0u;
            v33 = 0u;
            LOBYTE(v32) = v18;
            v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<char>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<signed char>())
        {
          if (v14)
          {
            v19 = *v14;
            v32 = 0u;
            v33 = 0u;
            LOBYTE(v32) = v19;
            v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<signed char>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned char>())
        {
          if (v14)
          {
            v32 = 0u;
            v33 = 0u;
            LOBYTE(v32) = *v14;
            v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<unsigned char>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<short>())
        {
          if (v14)
          {
            v20 = *v14;
            v32 = 0u;
            v33 = 0u;
            LOWORD(v32) = v20;
            v17 = AMCP::Implementation::In_Place_Storage<short>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned short>())
        {
          if (v14)
          {
            v21 = *v14;
            v32 = 0u;
            v33 = 0u;
            LOWORD(v32) = v21;
            v17 = AMCP::Implementation::In_Place_Storage<unsigned short>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<int>())
        {
          if (v14)
          {
            v22 = *v14;
            v32 = 0u;
            v33 = 0u;
            LODWORD(v32) = v22;
            v17 = AMCP::Implementation::In_Place_Storage<int>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned int>())
        {
          if (v14)
          {
            v23 = *v14;
            v32 = 0u;
            v33 = 0u;
            LODWORD(v32) = v23;
            v17 = AMCP::Implementation::In_Place_Storage<unsigned int>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<long>())
        {
          if (v14)
          {
            v24 = *v14;
            v33 = 0uLL;
            v32 = v24;
            v17 = AMCP::Implementation::In_Place_Storage<long>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned long>())
        {
          if (v14)
          {
            v25 = *v14;
            v33 = 0uLL;
            v32 = v25;
            v17 = AMCP::Implementation::In_Place_Storage<unsigned long>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<long long>())
        {
          if (v14)
          {
            v26 = *v14;
            v33 = 0uLL;
            v32 = v26;
            v17 = AMCP::Implementation::In_Place_Storage<long long>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned long long>())
        {
          if (v14)
          {
            v27 = *v14;
            v33 = 0uLL;
            v32 = v27;
            v17 = AMCP::Implementation::In_Place_Storage<unsigned long long>::dispatch;
            goto LABEL_74;
          }
        }
        else
        {
          if (*a4 != AMCP::Implementation::get_type_marker<float>())
          {
            if (*a4 == AMCP::Implementation::get_type_marker<double>())
            {
              if (!v14)
                goto LABEL_78;
              LOBYTE(v29) = *v14;
              *(_QWORD *)&v33 = 0;
              v32 = COERCE_UNSIGNED_INT64((double)v29);
              v17 = AMCP::Implementation::In_Place_Storage<double>::dispatch;
            }
            else
            {
              if (*a4 != AMCP::Implementation::get_type_marker<long double>())
              {
                if (*a4 != AMCP::Implementation::get_type_marker<AMCP::Direction>())
                {
                  if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>())
                  {
                    AMCP::Implementation::create_number_from<BOOL,applesauce::CF::BooleanRef>(&v32, v14);
                  }
                  else if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>())
                  {
                    AMCP::Implementation::create_number_from<unsigned char,applesauce::CF::NumberRef>((uint64_t)&v32, v14);
                  }
                  else
                  {
LABEL_83:
                    v34 = 0;
                    v32 = 0u;
                    v33 = 0u;
                  }
                  goto LABEL_84;
                }
                if (v14)
                {
                  v31 = *v14 != 0;
                  v32 = 0u;
                  v33 = 0u;
                  LODWORD(v32) = v31;
                  v17 = AMCP::Implementation::In_Place_Storage<AMCP::Direction>::dispatch;
                  goto LABEL_74;
                }
                goto LABEL_78;
              }
              if (!v14)
                goto LABEL_78;
              LOBYTE(v30) = *v14;
              *(_QWORD *)&v33 = 0;
              v32 = COERCE_UNSIGNED_INT64((double)v30);
              v17 = AMCP::Implementation::In_Place_Storage<long double>::dispatch;
            }
            *((_QWORD *)&v33 + 1) = 0;
            goto LABEL_74;
          }
          if (v14)
          {
            LOBYTE(v28) = *v14;
            v32 = 0u;
            v33 = 0u;
            *(float *)&v32 = (float)v28;
            v17 = AMCP::Implementation::In_Place_Storage<float>::dispatch;
            goto LABEL_74;
          }
        }
LABEL_78:
        __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
      }
      if (!v14)
        goto LABEL_78;
      v16 = *v14 != 0;
      v32 = 0u;
      v33 = 0u;
      LOBYTE(v32) = v16;
      v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
LABEL_74:
      v34 = v17;
LABEL_84:
      AMCP::swap((AMCP::Thing *)&v32, (AMCP::Thing *)a3, v13);
      if (v34)
        v34(0, (uint64_t)&v32, 0, 0);
      return 0;
    default:
      return result;
  }
}

void sub_1B57FDCF4(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B57FDCC4);
}

uint64_t AMCP::Implementation::get_type_marker<short>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      AMCP::Implementation::get_type_marker<short>(void)::s_type_marker = AMCP::Implementation::generate_type_marker(MEMORY[0x1E0DE4F10], v4);
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return v1[179];
}

BOOL AMCP::Implementation::In_Place_Storage<short>::dispatch(_BOOL8 result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  __int128 v7;
  uint64_t type;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, _QWORD, __int128 *);
  void (*v11)(uint64_t, uint64_t, _QWORD, _QWORD);
  unsigned __int16 *v12;
  AMCP::Thing *v13;
  __int16 *v14;
  int v15;
  BOOL v16;
  BOOL (*v17)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  char v18;
  char v19;
  char v20;
  __int16 v21;
  int v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  float v28;
  unint64_t v29;
  unint64_t v30;
  _BOOL4 v31;
  __int128 v32;
  __int128 v33;
  BOOL (*v34)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  void (*v35)(uint64_t, uint64_t, _QWORD, _QWORD);

  switch(result)
  {
    case 0:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      v7 = 0uLL;
      goto LABEL_7;
    case 1:
      result = 0;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_WORD *)a3 = *(_WORD *)a2;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<short>::dispatch;
      return result;
    case 2:
      result = 0;
      v7 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_WORD *)a3 = *(_WORD *)a2;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<short>::dispatch;
      *(_QWORD *)(a2 + 32) = 0;
LABEL_7:
      *(_OWORD *)a2 = v7;
      *(_OWORD *)(a2 + 16) = v7;
      return result;
    case 3:
      type = AMCP::Implementation::get_type_marker<short>();
      result = 0;
      *a4 = type;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<short>())
        return a2;
      else
        return 0;
    case 5:
      v9 = AMCP::Implementation::get_type_marker<short>();
      v10 = *(void (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32);
      *(_QWORD *)&v32 = 0;
      if (v10)
      {
        v10(3, a2, 0, &v32);
        v10 = (void (*)(uint64_t, uint64_t, _QWORD, __int128 *))v32;
      }
      if (v10 != (void (*)(uint64_t, uint64_t, _QWORD, __int128 *))v9)
        goto LABEL_22;
      v11 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a3 + 32);
      v35 = 0;
      if (v11)
      {
        v11(3, a3, 0, &v35);
        v11 = v35;
      }
      if (v11 != (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))v9)
      {
LABEL_22:
        v15 = AMCP::Thing::convert_to<short>(a2);
        return v15 == AMCP::Thing::convert_to<short>(a3);
      }
      if (*(_QWORD *)(a2 + 32))
      {
        *(_QWORD *)&v32 = AMCP::Implementation::get_type_marker<short>();
        v12 = (unsigned __int16 *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32))(4, a2, 0, &v32);
      }
      else
      {
        v12 = 0;
      }
      *(_QWORD *)&v32 = AMCP::Implementation::get_type_marker<short>();
      return *v12 == *(unsigned __int16 *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a3 + 32))(4, a3, 0, &v32);
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<BOOL>()
        && !AMCP::is_one_of<char,signed char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double,long double,AMCP::Direction,applesauce::CF::BooleanRef,applesauce::CF::NumberRef>(a4))
      {
        goto LABEL_83;
      }
      if (*(_QWORD *)(a2 + 32))
      {
        *(_QWORD *)&v32 = AMCP::Implementation::get_type_marker<short>();
        v14 = (__int16 *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32))(4, a2, 0, &v32);
      }
      else
      {
        v14 = 0;
      }
      if (*a4 != AMCP::Implementation::get_type_marker<BOOL>())
      {
        if (*a4 == AMCP::Implementation::get_type_marker<char>())
        {
          if (v14)
          {
            v18 = *(_BYTE *)v14;
            v32 = 0u;
            v33 = 0u;
            LOBYTE(v32) = v18;
            v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<char>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<signed char>())
        {
          if (v14)
          {
            v19 = *(_BYTE *)v14;
            v32 = 0u;
            v33 = 0u;
            LOBYTE(v32) = v19;
            v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<signed char>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned char>())
        {
          if (v14)
          {
            v20 = *(_BYTE *)v14;
            v32 = 0u;
            v33 = 0u;
            LOBYTE(v32) = v20;
            v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<unsigned char>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<short>())
        {
          if (v14)
          {
            v32 = 0u;
            v33 = 0u;
            LOWORD(v32) = *v14;
            v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<short>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned short>())
        {
          if (v14)
          {
            v21 = *v14;
            v32 = 0u;
            v33 = 0u;
            LOWORD(v32) = v21;
            v17 = AMCP::Implementation::In_Place_Storage<unsigned short>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<int>())
        {
          if (v14)
          {
            v22 = *v14;
            v32 = 0u;
            v33 = 0u;
            LODWORD(v32) = v22;
            v17 = AMCP::Implementation::In_Place_Storage<int>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned int>())
        {
          if (v14)
          {
            v23 = *v14;
            v32 = 0u;
            v33 = 0u;
            LODWORD(v32) = v23;
            v17 = AMCP::Implementation::In_Place_Storage<unsigned int>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<long>())
        {
          if (v14)
          {
            v24 = *v14;
            v33 = 0uLL;
            v32 = v24;
            v17 = AMCP::Implementation::In_Place_Storage<long>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned long>())
        {
          if (v14)
          {
            v25 = *v14;
            v33 = 0uLL;
            v32 = v25;
            v17 = AMCP::Implementation::In_Place_Storage<unsigned long>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<long long>())
        {
          if (v14)
          {
            v26 = *v14;
            v33 = 0uLL;
            v32 = v26;
            v17 = AMCP::Implementation::In_Place_Storage<long long>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned long long>())
        {
          if (v14)
          {
            v27 = *v14;
            v33 = 0uLL;
            v32 = v27;
            v17 = AMCP::Implementation::In_Place_Storage<unsigned long long>::dispatch;
            goto LABEL_74;
          }
        }
        else
        {
          if (*a4 != AMCP::Implementation::get_type_marker<float>())
          {
            if (*a4 == AMCP::Implementation::get_type_marker<double>())
            {
              if (!v14)
                goto LABEL_78;
              *(double *)&v29 = (double)*v14;
              *(_QWORD *)&v33 = 0;
              v32 = v29;
              v17 = AMCP::Implementation::In_Place_Storage<double>::dispatch;
            }
            else
            {
              if (*a4 != AMCP::Implementation::get_type_marker<long double>())
              {
                if (*a4 != AMCP::Implementation::get_type_marker<AMCP::Direction>())
                {
                  if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>())
                  {
                    AMCP::Implementation::create_number_from<unsigned short,applesauce::CF::BooleanRef>(&v32, v14);
                  }
                  else if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>())
                  {
                    AMCP::Implementation::create_number_from<short,applesauce::CF::NumberRef>((uint64_t)&v32, v14);
                  }
                  else
                  {
LABEL_83:
                    v34 = 0;
                    v32 = 0u;
                    v33 = 0u;
                  }
                  goto LABEL_84;
                }
                if (v14)
                {
                  v31 = *v14 != 0;
                  v32 = 0u;
                  v33 = 0u;
                  LODWORD(v32) = v31;
                  v17 = AMCP::Implementation::In_Place_Storage<AMCP::Direction>::dispatch;
                  goto LABEL_74;
                }
                goto LABEL_78;
              }
              if (!v14)
                goto LABEL_78;
              *(double *)&v30 = (double)*v14;
              *(_QWORD *)&v33 = 0;
              v32 = v30;
              v17 = AMCP::Implementation::In_Place_Storage<long double>::dispatch;
            }
            *((_QWORD *)&v33 + 1) = 0;
            goto LABEL_74;
          }
          if (v14)
          {
            v28 = (float)*v14;
            v32 = 0u;
            v33 = 0u;
            *(float *)&v32 = v28;
            v17 = AMCP::Implementation::In_Place_Storage<float>::dispatch;
            goto LABEL_74;
          }
        }
LABEL_78:
        __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
      }
      if (!v14)
        goto LABEL_78;
      v16 = *v14 != 0;
      v32 = 0u;
      v33 = 0u;
      LOBYTE(v32) = v16;
      v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
LABEL_74:
      v34 = v17;
LABEL_84:
      AMCP::swap((AMCP::Thing *)&v32, (AMCP::Thing *)a3, v13);
      if (v34)
        v34(0, (uint64_t)&v32, 0, 0);
      return 0;
    default:
      return result;
  }
}

void sub_1B57FE34C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B57FE31CLL);
}

uint64_t AMCP::Implementation::get_type_marker<unsigned short>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      AMCP::Implementation::get_type_marker<unsigned short>(void)::s_type_marker = AMCP::Implementation::generate_type_marker(MEMORY[0x1E0DE4F18], v4);
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return v1[181];
}

BOOL AMCP::Implementation::In_Place_Storage<unsigned short>::dispatch(_BOOL8 result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  __int128 v7;
  uint64_t type;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, _QWORD, __int128 *);
  void (*v11)(uint64_t, uint64_t, _QWORD, _QWORD);
  unsigned __int16 *v12;
  AMCP::Thing *v13;
  __int16 *v14;
  int v15;
  BOOL v16;
  BOOL (*v17)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  char v18;
  char v19;
  char v20;
  __int16 v21;
  int v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t v29;
  unint64_t v30;
  _BOOL4 v31;
  __int128 v32;
  __int128 v33;
  BOOL (*v34)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  void (*v35)(uint64_t, uint64_t, _QWORD, _QWORD);

  switch(result)
  {
    case 0:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      v7 = 0uLL;
      goto LABEL_7;
    case 1:
      result = 0;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_WORD *)a3 = *(_WORD *)a2;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<unsigned short>::dispatch;
      return result;
    case 2:
      result = 0;
      v7 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_WORD *)a3 = *(_WORD *)a2;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<unsigned short>::dispatch;
      *(_QWORD *)(a2 + 32) = 0;
LABEL_7:
      *(_OWORD *)a2 = v7;
      *(_OWORD *)(a2 + 16) = v7;
      return result;
    case 3:
      type = AMCP::Implementation::get_type_marker<unsigned short>();
      result = 0;
      *a4 = type;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<unsigned short>())
        return a2;
      else
        return 0;
    case 5:
      v9 = AMCP::Implementation::get_type_marker<unsigned short>();
      v10 = *(void (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32);
      *(_QWORD *)&v32 = 0;
      if (v10)
      {
        v10(3, a2, 0, &v32);
        v10 = (void (*)(uint64_t, uint64_t, _QWORD, __int128 *))v32;
      }
      if (v10 != (void (*)(uint64_t, uint64_t, _QWORD, __int128 *))v9)
        goto LABEL_22;
      v11 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a3 + 32);
      v35 = 0;
      if (v11)
      {
        v11(3, a3, 0, &v35);
        v11 = v35;
      }
      if (v11 != (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))v9)
      {
LABEL_22:
        v15 = AMCP::Thing::convert_to<unsigned short>(a2);
        return v15 == AMCP::Thing::convert_to<unsigned short>(a3);
      }
      if (*(_QWORD *)(a2 + 32))
      {
        *(_QWORD *)&v32 = AMCP::Implementation::get_type_marker<unsigned short>();
        v12 = (unsigned __int16 *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32))(4, a2, 0, &v32);
      }
      else
      {
        v12 = 0;
      }
      *(_QWORD *)&v32 = AMCP::Implementation::get_type_marker<unsigned short>();
      return *v12 == *(unsigned __int16 *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a3 + 32))(4, a3, 0, &v32);
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<BOOL>()
        && !AMCP::is_one_of<char,signed char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double,long double,AMCP::Direction,applesauce::CF::BooleanRef,applesauce::CF::NumberRef>(a4))
      {
        goto LABEL_83;
      }
      if (*(_QWORD *)(a2 + 32))
      {
        *(_QWORD *)&v32 = AMCP::Implementation::get_type_marker<unsigned short>();
        v14 = (__int16 *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32))(4, a2, 0, &v32);
      }
      else
      {
        v14 = 0;
      }
      if (*a4 != AMCP::Implementation::get_type_marker<BOOL>())
      {
        if (*a4 == AMCP::Implementation::get_type_marker<char>())
        {
          if (v14)
          {
            v18 = *(_BYTE *)v14;
            v32 = 0u;
            v33 = 0u;
            LOBYTE(v32) = v18;
            v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<char>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<signed char>())
        {
          if (v14)
          {
            v19 = *(_BYTE *)v14;
            v32 = 0u;
            v33 = 0u;
            LOBYTE(v32) = v19;
            v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<signed char>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned char>())
        {
          if (v14)
          {
            v20 = *(_BYTE *)v14;
            v32 = 0u;
            v33 = 0u;
            LOBYTE(v32) = v20;
            v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<unsigned char>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<short>())
        {
          if (v14)
          {
            v21 = *v14;
            v32 = 0u;
            v33 = 0u;
            LOWORD(v32) = v21;
            v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<short>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned short>())
        {
          if (v14)
          {
            v32 = 0u;
            v33 = 0u;
            LOWORD(v32) = *v14;
            v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<unsigned short>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<int>())
        {
          if (v14)
          {
            v22 = (unsigned __int16)*v14;
            v32 = 0u;
            v33 = 0u;
            LODWORD(v32) = v22;
            v17 = AMCP::Implementation::In_Place_Storage<int>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned int>())
        {
          if (v14)
          {
            v23 = (unsigned __int16)*v14;
            v32 = 0u;
            v33 = 0u;
            LODWORD(v32) = v23;
            v17 = AMCP::Implementation::In_Place_Storage<unsigned int>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<long>())
        {
          if (v14)
          {
            v24 = (unsigned __int16)*v14;
            v33 = 0uLL;
            v32 = v24;
            v17 = AMCP::Implementation::In_Place_Storage<long>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned long>())
        {
          if (v14)
          {
            v25 = (unsigned __int16)*v14;
            v33 = 0uLL;
            v32 = v25;
            v17 = AMCP::Implementation::In_Place_Storage<unsigned long>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<long long>())
        {
          if (v14)
          {
            v26 = (unsigned __int16)*v14;
            v33 = 0uLL;
            v32 = v26;
            v17 = AMCP::Implementation::In_Place_Storage<long long>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned long long>())
        {
          if (v14)
          {
            v27 = (unsigned __int16)*v14;
            v33 = 0uLL;
            v32 = v27;
            v17 = AMCP::Implementation::In_Place_Storage<unsigned long long>::dispatch;
            goto LABEL_74;
          }
        }
        else
        {
          if (*a4 != AMCP::Implementation::get_type_marker<float>())
          {
            if (*a4 == AMCP::Implementation::get_type_marker<double>())
            {
              if (!v14)
                goto LABEL_78;
              LOWORD(v29) = *v14;
              *(_QWORD *)&v33 = 0;
              v32 = COERCE_UNSIGNED_INT64((double)v29);
              v17 = AMCP::Implementation::In_Place_Storage<double>::dispatch;
            }
            else
            {
              if (*a4 != AMCP::Implementation::get_type_marker<long double>())
              {
                if (*a4 != AMCP::Implementation::get_type_marker<AMCP::Direction>())
                {
                  if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>())
                  {
                    AMCP::Implementation::create_number_from<unsigned short,applesauce::CF::BooleanRef>(&v32, v14);
                  }
                  else if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>())
                  {
                    AMCP::Implementation::create_number_from<unsigned short,applesauce::CF::NumberRef>((uint64_t)&v32, v14);
                  }
                  else
                  {
LABEL_83:
                    v34 = 0;
                    v32 = 0u;
                    v33 = 0u;
                  }
                  goto LABEL_84;
                }
                if (v14)
                {
                  v31 = *v14 != 0;
                  v32 = 0u;
                  v33 = 0u;
                  LODWORD(v32) = v31;
                  v17 = AMCP::Implementation::In_Place_Storage<AMCP::Direction>::dispatch;
                  goto LABEL_74;
                }
                goto LABEL_78;
              }
              if (!v14)
                goto LABEL_78;
              LOWORD(v30) = *v14;
              *(_QWORD *)&v33 = 0;
              v32 = COERCE_UNSIGNED_INT64((double)v30);
              v17 = AMCP::Implementation::In_Place_Storage<long double>::dispatch;
            }
            *((_QWORD *)&v33 + 1) = 0;
            goto LABEL_74;
          }
          if (v14)
          {
            LOWORD(v28) = *v14;
            v32 = 0u;
            v33 = 0u;
            *(float *)&v32 = (float)v28;
            v17 = AMCP::Implementation::In_Place_Storage<float>::dispatch;
            goto LABEL_74;
          }
        }
LABEL_78:
        __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
      }
      if (!v14)
        goto LABEL_78;
      v16 = *v14 != 0;
      v32 = 0u;
      v33 = 0u;
      LOBYTE(v32) = v16;
      v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
LABEL_74:
      v34 = v17;
LABEL_84:
      AMCP::swap((AMCP::Thing *)&v32, (AMCP::Thing *)a3, v13);
      if (v34)
        v34(0, (uint64_t)&v32, 0, 0);
      return 0;
    default:
      return result;
  }
}

void sub_1B57FE9A4(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B57FE974);
}

uint64_t AMCP::Implementation::get_type_marker<int>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      AMCP::Implementation::get_type_marker<int>(void)::s_type_marker = AMCP::Implementation::generate_type_marker(MEMORY[0x1E0DE4EF0], v4);
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return v1[183];
}

BOOL AMCP::Implementation::In_Place_Storage<int>::dispatch(_BOOL8 result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  __int128 v7;
  uint64_t type;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, _QWORD, __int128 *);
  void (*v11)(uint64_t, uint64_t, _QWORD, _QWORD);
  _DWORD *v12;
  AMCP::Thing *v13;
  int *v14;
  int v15;
  BOOL v16;
  BOOL (*v17)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  char v18;
  char v19;
  char v20;
  __int16 v21;
  __int16 v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  float v28;
  unint64_t v29;
  unint64_t v30;
  _BOOL4 v31;
  __int128 v32;
  __int128 v33;
  BOOL (*v34)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  void (*v35)(uint64_t, uint64_t, _QWORD, _QWORD);

  switch(result)
  {
    case 0:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      v7 = 0uLL;
      goto LABEL_7;
    case 1:
      result = 0;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_DWORD *)a3 = *(_DWORD *)a2;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<int>::dispatch;
      return result;
    case 2:
      result = 0;
      v7 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_DWORD *)a3 = *(_DWORD *)a2;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<int>::dispatch;
      *(_QWORD *)(a2 + 32) = 0;
LABEL_7:
      *(_OWORD *)a2 = v7;
      *(_OWORD *)(a2 + 16) = v7;
      return result;
    case 3:
      type = AMCP::Implementation::get_type_marker<int>();
      result = 0;
      *a4 = type;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<int>())
        return a2;
      else
        return 0;
    case 5:
      v9 = AMCP::Implementation::get_type_marker<int>();
      v10 = *(void (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32);
      *(_QWORD *)&v32 = 0;
      if (v10)
      {
        v10(3, a2, 0, &v32);
        v10 = (void (*)(uint64_t, uint64_t, _QWORD, __int128 *))v32;
      }
      if (v10 != (void (*)(uint64_t, uint64_t, _QWORD, __int128 *))v9)
        goto LABEL_22;
      v11 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a3 + 32);
      v35 = 0;
      if (v11)
      {
        v11(3, a3, 0, &v35);
        v11 = v35;
      }
      if (v11 != (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))v9)
      {
LABEL_22:
        v15 = AMCP::Thing::convert_to<int>(a2);
        return v15 == AMCP::Thing::convert_to<int>(a3);
      }
      if (*(_QWORD *)(a2 + 32))
      {
        *(_QWORD *)&v32 = AMCP::Implementation::get_type_marker<int>();
        v12 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32))(4, a2, 0, &v32);
      }
      else
      {
        v12 = 0;
      }
      *(_QWORD *)&v32 = AMCP::Implementation::get_type_marker<int>();
      return *v12 == *(_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a3 + 32))(4, a3, 0, &v32);
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<BOOL>()
        && !AMCP::is_one_of<char,signed char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double,long double,AMCP::Direction,applesauce::CF::BooleanRef,applesauce::CF::NumberRef>(a4))
      {
        goto LABEL_83;
      }
      if (*(_QWORD *)(a2 + 32))
      {
        *(_QWORD *)&v32 = AMCP::Implementation::get_type_marker<int>();
        v14 = (int *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32))(4, a2, 0, &v32);
      }
      else
      {
        v14 = 0;
      }
      if (*a4 != AMCP::Implementation::get_type_marker<BOOL>())
      {
        if (*a4 == AMCP::Implementation::get_type_marker<char>())
        {
          if (v14)
          {
            v18 = *v14;
            v32 = 0u;
            v33 = 0u;
            LOBYTE(v32) = v18;
            v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<char>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<signed char>())
        {
          if (v14)
          {
            v19 = *v14;
            v32 = 0u;
            v33 = 0u;
            LOBYTE(v32) = v19;
            v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<signed char>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned char>())
        {
          if (v14)
          {
            v20 = *v14;
            v32 = 0u;
            v33 = 0u;
            LOBYTE(v32) = v20;
            v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<unsigned char>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<short>())
        {
          if (v14)
          {
            v21 = *v14;
            v32 = 0u;
            v33 = 0u;
            LOWORD(v32) = v21;
            v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<short>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned short>())
        {
          if (v14)
          {
            v22 = *v14;
            v32 = 0u;
            v33 = 0u;
            LOWORD(v32) = v22;
            v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<unsigned short>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<int>())
        {
          if (v14)
          {
            v32 = 0u;
            v33 = 0u;
            LODWORD(v32) = *v14;
            v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<int>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned int>())
        {
          if (v14)
          {
            v23 = *v14;
            v32 = 0u;
            v33 = 0u;
            LODWORD(v32) = v23;
            v17 = AMCP::Implementation::In_Place_Storage<unsigned int>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<long>())
        {
          if (v14)
          {
            v24 = *v14;
            v33 = 0uLL;
            v32 = v24;
            v17 = AMCP::Implementation::In_Place_Storage<long>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned long>())
        {
          if (v14)
          {
            v25 = *v14;
            v33 = 0uLL;
            v32 = v25;
            v17 = AMCP::Implementation::In_Place_Storage<unsigned long>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<long long>())
        {
          if (v14)
          {
            v26 = *v14;
            v33 = 0uLL;
            v32 = v26;
            v17 = AMCP::Implementation::In_Place_Storage<long long>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned long long>())
        {
          if (v14)
          {
            v27 = *v14;
            v33 = 0uLL;
            v32 = v27;
            v17 = AMCP::Implementation::In_Place_Storage<unsigned long long>::dispatch;
            goto LABEL_74;
          }
        }
        else
        {
          if (*a4 != AMCP::Implementation::get_type_marker<float>())
          {
            if (*a4 == AMCP::Implementation::get_type_marker<double>())
            {
              if (!v14)
                goto LABEL_78;
              *(double *)&v29 = (double)*v14;
              *(_QWORD *)&v33 = 0;
              v32 = v29;
              v17 = AMCP::Implementation::In_Place_Storage<double>::dispatch;
            }
            else
            {
              if (*a4 != AMCP::Implementation::get_type_marker<long double>())
              {
                if (*a4 != AMCP::Implementation::get_type_marker<AMCP::Direction>())
                {
                  if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>())
                  {
                    AMCP::Implementation::create_number_from<AMCP::Direction,applesauce::CF::BooleanRef>(&v32, v14);
                  }
                  else if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>())
                  {
                    AMCP::Implementation::create_number_from<int,applesauce::CF::NumberRef>((uint64_t)&v32, v14);
                  }
                  else
                  {
LABEL_83:
                    v34 = 0;
                    v32 = 0u;
                    v33 = 0u;
                  }
                  goto LABEL_84;
                }
                if (v14)
                {
                  v31 = *v14 != 0;
                  v32 = 0u;
                  v33 = 0u;
                  LODWORD(v32) = v31;
                  v17 = AMCP::Implementation::In_Place_Storage<AMCP::Direction>::dispatch;
                  goto LABEL_74;
                }
                goto LABEL_78;
              }
              if (!v14)
                goto LABEL_78;
              *(double *)&v30 = (double)*v14;
              *(_QWORD *)&v33 = 0;
              v32 = v30;
              v17 = AMCP::Implementation::In_Place_Storage<long double>::dispatch;
            }
            *((_QWORD *)&v33 + 1) = 0;
            goto LABEL_74;
          }
          if (v14)
          {
            v28 = (float)*v14;
            v32 = 0u;
            v33 = 0u;
            *(float *)&v32 = v28;
            v17 = AMCP::Implementation::In_Place_Storage<float>::dispatch;
            goto LABEL_74;
          }
        }
LABEL_78:
        __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
      }
      if (!v14)
        goto LABEL_78;
      v16 = *v14 != 0;
      v32 = 0u;
      v33 = 0u;
      LOBYTE(v32) = v16;
      v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
LABEL_74:
      v34 = v17;
LABEL_84:
      AMCP::swap((AMCP::Thing *)&v32, (AMCP::Thing *)a3, v13);
      if (v34)
        v34(0, (uint64_t)&v32, 0, 0);
      return 0;
    default:
      return result;
  }
}

void sub_1B57FEFFC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B57FEFCCLL);
}

BOOL AMCP::Implementation::In_Place_Storage<unsigned int>::dispatch(_BOOL8 result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  __int128 v7;
  uint64_t type;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, _QWORD, __int128 *);
  void (*v11)(uint64_t, uint64_t, _QWORD, _QWORD);
  _DWORD *v12;
  AMCP::Thing *v13;
  int *v14;
  int v15;
  BOOL v16;
  BOOL (*v17)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  char v18;
  char v19;
  char v20;
  __int16 v21;
  __int16 v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  float v28;
  unint64_t v29;
  unint64_t v30;
  _BOOL4 v31;
  __int128 v32;
  __int128 v33;
  BOOL (*v34)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  void (*v35)(uint64_t, uint64_t, _QWORD, _QWORD);

  switch(result)
  {
    case 0:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      v7 = 0uLL;
      goto LABEL_7;
    case 1:
      result = 0;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_DWORD *)a3 = *(_DWORD *)a2;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<unsigned int>::dispatch;
      return result;
    case 2:
      result = 0;
      v7 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_DWORD *)a3 = *(_DWORD *)a2;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<unsigned int>::dispatch;
      *(_QWORD *)(a2 + 32) = 0;
LABEL_7:
      *(_OWORD *)a2 = v7;
      *(_OWORD *)(a2 + 16) = v7;
      return result;
    case 3:
      type = AMCP::Implementation::get_type_marker<unsigned int>();
      result = 0;
      *a4 = type;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<unsigned int>())
        return a2;
      else
        return 0;
    case 5:
      v9 = AMCP::Implementation::get_type_marker<unsigned int>();
      v10 = *(void (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32);
      *(_QWORD *)&v32 = 0;
      if (v10)
      {
        v10(3, a2, 0, &v32);
        v10 = (void (*)(uint64_t, uint64_t, _QWORD, __int128 *))v32;
      }
      if (v10 != (void (*)(uint64_t, uint64_t, _QWORD, __int128 *))v9)
        goto LABEL_22;
      v11 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a3 + 32);
      v35 = 0;
      if (v11)
      {
        v11(3, a3, 0, &v35);
        v11 = v35;
      }
      if (v11 != (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))v9)
      {
LABEL_22:
        v15 = AMCP::Thing::convert_to<unsigned int>(a2);
        return v15 == AMCP::Thing::convert_to<unsigned int>(a3);
      }
      if (*(_QWORD *)(a2 + 32))
      {
        *(_QWORD *)&v32 = AMCP::Implementation::get_type_marker<unsigned int>();
        v12 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32))(4, a2, 0, &v32);
      }
      else
      {
        v12 = 0;
      }
      *(_QWORD *)&v32 = AMCP::Implementation::get_type_marker<unsigned int>();
      return *v12 == *(_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a3 + 32))(4, a3, 0, &v32);
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<BOOL>()
        && !AMCP::is_one_of<char,signed char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double,long double,AMCP::Direction,applesauce::CF::BooleanRef,applesauce::CF::NumberRef>(a4))
      {
        goto LABEL_83;
      }
      if (*(_QWORD *)(a2 + 32))
      {
        *(_QWORD *)&v32 = AMCP::Implementation::get_type_marker<unsigned int>();
        v14 = (int *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32))(4, a2, 0, &v32);
      }
      else
      {
        v14 = 0;
      }
      if (*a4 != AMCP::Implementation::get_type_marker<BOOL>())
      {
        if (*a4 == AMCP::Implementation::get_type_marker<char>())
        {
          if (v14)
          {
            v18 = *v14;
            v32 = 0u;
            v33 = 0u;
            LOBYTE(v32) = v18;
            v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<char>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<signed char>())
        {
          if (v14)
          {
            v19 = *v14;
            v32 = 0u;
            v33 = 0u;
            LOBYTE(v32) = v19;
            v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<signed char>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned char>())
        {
          if (v14)
          {
            v20 = *v14;
            v32 = 0u;
            v33 = 0u;
            LOBYTE(v32) = v20;
            v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<unsigned char>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<short>())
        {
          if (v14)
          {
            v21 = *v14;
            v32 = 0u;
            v33 = 0u;
            LOWORD(v32) = v21;
            v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<short>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned short>())
        {
          if (v14)
          {
            v22 = *v14;
            v32 = 0u;
            v33 = 0u;
            LOWORD(v32) = v22;
            v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<unsigned short>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<int>())
        {
          if (v14)
          {
            v23 = *v14;
            v32 = 0u;
            v33 = 0u;
            LODWORD(v32) = v23;
            v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<int>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned int>())
        {
          if (v14)
          {
            v32 = 0u;
            v33 = 0u;
            LODWORD(v32) = *v14;
            v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<unsigned int>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<long>())
        {
          if (v14)
          {
            v24 = *v14;
            v33 = 0uLL;
            v32 = v24;
            v17 = AMCP::Implementation::In_Place_Storage<long>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned long>())
        {
          if (v14)
          {
            v25 = *v14;
            v33 = 0uLL;
            v32 = v25;
            v17 = AMCP::Implementation::In_Place_Storage<unsigned long>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<long long>())
        {
          if (v14)
          {
            v26 = *v14;
            v33 = 0uLL;
            v32 = v26;
            v17 = AMCP::Implementation::In_Place_Storage<long long>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned long long>())
        {
          if (v14)
          {
            v27 = *v14;
            v33 = 0uLL;
            v32 = v27;
            v17 = AMCP::Implementation::In_Place_Storage<unsigned long long>::dispatch;
            goto LABEL_74;
          }
        }
        else
        {
          if (*a4 != AMCP::Implementation::get_type_marker<float>())
          {
            if (*a4 == AMCP::Implementation::get_type_marker<double>())
            {
              if (!v14)
                goto LABEL_78;
              LODWORD(v29) = *v14;
              *(_QWORD *)&v33 = 0;
              v32 = COERCE_UNSIGNED_INT64((double)v29);
              v17 = AMCP::Implementation::In_Place_Storage<double>::dispatch;
            }
            else
            {
              if (*a4 != AMCP::Implementation::get_type_marker<long double>())
              {
                if (*a4 != AMCP::Implementation::get_type_marker<AMCP::Direction>())
                {
                  if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>())
                  {
                    AMCP::Implementation::create_number_from<AMCP::Direction,applesauce::CF::BooleanRef>(&v32, v14);
                  }
                  else if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>())
                  {
                    AMCP::Implementation::create_number_from<unsigned int,applesauce::CF::NumberRef>((uint64_t)&v32, v14);
                  }
                  else
                  {
LABEL_83:
                    v34 = 0;
                    v32 = 0u;
                    v33 = 0u;
                  }
                  goto LABEL_84;
                }
                if (v14)
                {
                  v31 = *v14 != 0;
                  v32 = 0u;
                  v33 = 0u;
                  LODWORD(v32) = v31;
                  v17 = AMCP::Implementation::In_Place_Storage<AMCP::Direction>::dispatch;
                  goto LABEL_74;
                }
                goto LABEL_78;
              }
              if (!v14)
                goto LABEL_78;
              LODWORD(v30) = *v14;
              *(_QWORD *)&v33 = 0;
              v32 = COERCE_UNSIGNED_INT64((double)v30);
              v17 = AMCP::Implementation::In_Place_Storage<long double>::dispatch;
            }
            *((_QWORD *)&v33 + 1) = 0;
            goto LABEL_74;
          }
          if (v14)
          {
            v28 = (float)*v14;
            v32 = 0u;
            v33 = 0u;
            *(float *)&v32 = v28;
            v17 = AMCP::Implementation::In_Place_Storage<float>::dispatch;
            goto LABEL_74;
          }
        }
LABEL_78:
        __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
      }
      if (!v14)
        goto LABEL_78;
      v16 = *v14 != 0;
      v32 = 0u;
      v33 = 0u;
      LOBYTE(v32) = v16;
      v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
LABEL_74:
      v34 = v17;
LABEL_84:
      AMCP::swap((AMCP::Thing *)&v32, (AMCP::Thing *)a3, v13);
      if (v34)
        v34(0, (uint64_t)&v32, 0, 0);
      return 0;
    default:
      return result;
  }
}

void sub_1B57FF5F0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B57FF5C0);
}

uint64_t AMCP::Implementation::get_type_marker<long>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      AMCP::Implementation::get_type_marker<long>(void)::s_type_marker = AMCP::Implementation::generate_type_marker(MEMORY[0x1E0DE4F00], v4);
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return v1[187];
}

BOOL AMCP::Implementation::In_Place_Storage<long>::dispatch(_BOOL8 result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  __int128 v7;
  uint64_t type;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, _QWORD, __int128 *);
  void (*v11)(uint64_t, uint64_t, _QWORD, _QWORD);
  _QWORD *v12;
  AMCP::Thing *v13;
  uint64_t *v14;
  uint64_t v15;
  BOOL v16;
  BOOL (*v17)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  unint64_t v29;
  unint64_t v30;
  _BOOL4 v31;
  __int128 v32;
  __int128 v33;
  uint64_t (*v34)();
  void (*v35)(uint64_t, uint64_t, _QWORD, _QWORD);

  switch(result)
  {
    case 0:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      v7 = 0uLL;
      goto LABEL_7;
    case 1:
      result = 0;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_QWORD *)a3 = *(_QWORD *)a2;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<long>::dispatch;
      return result;
    case 2:
      result = 0;
      v7 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_QWORD *)a3 = *(_QWORD *)a2;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<long>::dispatch;
      *(_QWORD *)(a2 + 32) = 0;
LABEL_7:
      *(_OWORD *)a2 = v7;
      *(_OWORD *)(a2 + 16) = v7;
      return result;
    case 3:
      type = AMCP::Implementation::get_type_marker<long>();
      result = 0;
      *a4 = type;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<long>())
        return a2;
      else
        return 0;
    case 5:
      v9 = AMCP::Implementation::get_type_marker<long>();
      v10 = *(void (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32);
      *(_QWORD *)&v32 = 0;
      if (v10)
      {
        v10(3, a2, 0, &v32);
        v10 = (void (*)(uint64_t, uint64_t, _QWORD, __int128 *))v32;
      }
      if (v10 != (void (*)(uint64_t, uint64_t, _QWORD, __int128 *))v9)
        goto LABEL_22;
      v11 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a3 + 32);
      v35 = 0;
      if (v11)
      {
        v11(3, a3, 0, &v35);
        v11 = v35;
      }
      if (v11 != (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))v9)
      {
LABEL_22:
        v15 = AMCP::Thing::convert_to<long>(a2);
        return v15 == AMCP::Thing::convert_to<long>(a3);
      }
      if (*(_QWORD *)(a2 + 32))
      {
        *(_QWORD *)&v32 = AMCP::Implementation::get_type_marker<long>();
        v12 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32))(4, a2, 0, &v32);
      }
      else
      {
        v12 = 0;
      }
      *(_QWORD *)&v32 = AMCP::Implementation::get_type_marker<long>();
      return *v12 == *(_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a3 + 32))(4, a3, 0, &v32);
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<BOOL>()
        && !AMCP::is_one_of<char,signed char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double,long double,AMCP::Direction,applesauce::CF::BooleanRef,applesauce::CF::NumberRef>(a4))
      {
        goto LABEL_83;
      }
      if (*(_QWORD *)(a2 + 32))
      {
        *(_QWORD *)&v32 = AMCP::Implementation::get_type_marker<long>();
        v14 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32))(4, a2, 0, &v32);
      }
      else
      {
        v14 = 0;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<BOOL>())
      {
        if (v14)
        {
          v16 = *v14 != 0;
          v32 = 0u;
          v33 = 0u;
          LOBYTE(v32) = v16;
          v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
LABEL_52:
          v34 = (uint64_t (*)())v17;
          goto LABEL_84;
        }
        goto LABEL_78;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<char>())
      {
        if (v14)
        {
          v18 = *v14;
          v32 = 0u;
          v33 = 0u;
          LOBYTE(v32) = v18;
          v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<char>::dispatch;
          goto LABEL_52;
        }
        goto LABEL_78;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<signed char>())
      {
        if (v14)
        {
          v19 = *v14;
          v32 = 0u;
          v33 = 0u;
          LOBYTE(v32) = v19;
          v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<signed char>::dispatch;
          goto LABEL_52;
        }
        goto LABEL_78;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<unsigned char>())
      {
        if (v14)
        {
          v20 = *v14;
          v32 = 0u;
          v33 = 0u;
          LOBYTE(v32) = v20;
          v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<unsigned char>::dispatch;
          goto LABEL_52;
        }
        goto LABEL_78;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<short>())
      {
        if (v14)
        {
          v21 = *v14;
          v32 = 0u;
          v33 = 0u;
          LOWORD(v32) = v21;
          v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<short>::dispatch;
          goto LABEL_52;
        }
        goto LABEL_78;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<unsigned short>())
      {
        if (v14)
        {
          v22 = *v14;
          v32 = 0u;
          v33 = 0u;
          LOWORD(v32) = v22;
          v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<unsigned short>::dispatch;
          goto LABEL_52;
        }
        goto LABEL_78;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<int>())
      {
        if (v14)
        {
          v23 = *v14;
          v32 = 0u;
          v33 = 0u;
          LODWORD(v32) = v23;
          v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<int>::dispatch;
          goto LABEL_52;
        }
        goto LABEL_78;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<unsigned int>())
      {
        if (v14)
        {
          v24 = *v14;
          v32 = 0u;
          v33 = 0u;
          LODWORD(v32) = v24;
          v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<unsigned int>::dispatch;
          goto LABEL_52;
        }
        goto LABEL_78;
      }
      if (*a4 != AMCP::Implementation::get_type_marker<long>())
      {
        if (*a4 == AMCP::Implementation::get_type_marker<unsigned long>())
        {
          if (v14)
          {
            v25 = *v14;
            v33 = 0uLL;
            v32 = (unint64_t)v25;
            v17 = AMCP::Implementation::In_Place_Storage<unsigned long>::dispatch;
            goto LABEL_52;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<long long>())
        {
          if (v14)
          {
            v26 = *v14;
            v33 = 0uLL;
            v32 = (unint64_t)v26;
            v17 = AMCP::Implementation::In_Place_Storage<long long>::dispatch;
            goto LABEL_52;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned long long>())
        {
          if (v14)
          {
            v27 = *v14;
            v33 = 0uLL;
            v32 = (unint64_t)v27;
            v17 = AMCP::Implementation::In_Place_Storage<unsigned long long>::dispatch;
            goto LABEL_52;
          }
        }
        else
        {
          if (*a4 != AMCP::Implementation::get_type_marker<float>())
          {
            if (*a4 == AMCP::Implementation::get_type_marker<double>())
            {
              if (!v14)
                goto LABEL_78;
              *(double *)&v29 = (double)*v14;
              *(_QWORD *)&v33 = 0;
              v32 = v29;
              v17 = AMCP::Implementation::In_Place_Storage<double>::dispatch;
            }
            else
            {
              if (*a4 != AMCP::Implementation::get_type_marker<long double>())
              {
                if (*a4 != AMCP::Implementation::get_type_marker<AMCP::Direction>())
                {
                  if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>())
                  {
                    AMCP::Implementation::create_number_from<unsigned long long,applesauce::CF::BooleanRef>(&v32, v14);
                  }
                  else if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>())
                  {
                    AMCP::Implementation::create_number_from<long,applesauce::CF::NumberRef>((uint64_t)&v32, v14);
                  }
                  else
                  {
LABEL_83:
                    v34 = 0;
                    v32 = 0u;
                    v33 = 0u;
                  }
                  goto LABEL_84;
                }
                if (v14)
                {
                  v31 = *v14 != 0;
                  v32 = 0u;
                  v33 = 0u;
                  LODWORD(v32) = v31;
                  v17 = AMCP::Implementation::In_Place_Storage<AMCP::Direction>::dispatch;
                  goto LABEL_52;
                }
                goto LABEL_78;
              }
              if (!v14)
                goto LABEL_78;
              *(double *)&v30 = (double)*v14;
              *(_QWORD *)&v33 = 0;
              v32 = v30;
              v17 = AMCP::Implementation::In_Place_Storage<long double>::dispatch;
            }
            *((_QWORD *)&v33 + 1) = 0;
            goto LABEL_52;
          }
          if (v14)
          {
            v28 = (float)*v14;
            v32 = 0u;
            v33 = 0u;
            *(float *)&v32 = v28;
            v17 = AMCP::Implementation::In_Place_Storage<float>::dispatch;
            goto LABEL_52;
          }
        }
LABEL_78:
        __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
      }
      if (!v14)
        goto LABEL_78;
      *((_QWORD *)&v32 + 1) = 0;
      v33 = 0uLL;
      *(_QWORD *)&v32 = *v14;
      v34 = AMCP::Implementation::In_Place_Storage<long>::dispatch;
LABEL_84:
      AMCP::swap((AMCP::Thing *)&v32, (AMCP::Thing *)a3, v13);
      if (v34)
        ((void (*)(_QWORD, __int128 *, _QWORD, _QWORD))v34)(0, &v32, 0, 0);
      return 0;
    default:
      return result;
  }
}

void sub_1B57FFC50(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B57FFC20);
}

uint64_t AMCP::Implementation::get_type_marker<unsigned long>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      AMCP::Implementation::get_type_marker<unsigned long>(void)::s_type_marker = AMCP::Implementation::generate_type_marker(MEMORY[0x1E0DE4F08], v4);
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return v1[189];
}

BOOL AMCP::Implementation::In_Place_Storage<unsigned long>::dispatch(_BOOL8 result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  __int128 v7;
  uint64_t type;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, _QWORD, __int128 *);
  void (*v11)(uint64_t, uint64_t, _QWORD, _QWORD);
  _QWORD *v12;
  AMCP::Thing *v13;
  uint64_t *v14;
  uint64_t v15;
  BOOL v16;
  BOOL (*v17)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  unint64_t v29;
  unint64_t v30;
  _BOOL4 v31;
  __int128 v32;
  __int128 v33;
  uint64_t (*v34)();
  void (*v35)(uint64_t, uint64_t, _QWORD, _QWORD);

  switch(result)
  {
    case 0:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      v7 = 0uLL;
      goto LABEL_7;
    case 1:
      result = 0;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_QWORD *)a3 = *(_QWORD *)a2;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<unsigned long>::dispatch;
      return result;
    case 2:
      result = 0;
      v7 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_QWORD *)a3 = *(_QWORD *)a2;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<unsigned long>::dispatch;
      *(_QWORD *)(a2 + 32) = 0;
LABEL_7:
      *(_OWORD *)a2 = v7;
      *(_OWORD *)(a2 + 16) = v7;
      return result;
    case 3:
      type = AMCP::Implementation::get_type_marker<unsigned long>();
      result = 0;
      *a4 = type;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<unsigned long>())
        return a2;
      else
        return 0;
    case 5:
      v9 = AMCP::Implementation::get_type_marker<unsigned long>();
      v10 = *(void (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32);
      *(_QWORD *)&v32 = 0;
      if (v10)
      {
        v10(3, a2, 0, &v32);
        v10 = (void (*)(uint64_t, uint64_t, _QWORD, __int128 *))v32;
      }
      if (v10 != (void (*)(uint64_t, uint64_t, _QWORD, __int128 *))v9)
        goto LABEL_22;
      v11 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a3 + 32);
      v35 = 0;
      if (v11)
      {
        v11(3, a3, 0, &v35);
        v11 = v35;
      }
      if (v11 != (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))v9)
      {
LABEL_22:
        v15 = AMCP::Thing::convert_to<unsigned long>(a2);
        return v15 == AMCP::Thing::convert_to<unsigned long>(a3);
      }
      if (*(_QWORD *)(a2 + 32))
      {
        *(_QWORD *)&v32 = AMCP::Implementation::get_type_marker<unsigned long>();
        v12 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32))(4, a2, 0, &v32);
      }
      else
      {
        v12 = 0;
      }
      *(_QWORD *)&v32 = AMCP::Implementation::get_type_marker<unsigned long>();
      return *v12 == *(_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a3 + 32))(4, a3, 0, &v32);
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<BOOL>()
        && !AMCP::is_one_of<char,signed char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double,long double,AMCP::Direction,applesauce::CF::BooleanRef,applesauce::CF::NumberRef>(a4))
      {
        goto LABEL_83;
      }
      if (*(_QWORD *)(a2 + 32))
      {
        *(_QWORD *)&v32 = AMCP::Implementation::get_type_marker<unsigned long>();
        v14 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32))(4, a2, 0, &v32);
      }
      else
      {
        v14 = 0;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<BOOL>())
      {
        if (v14)
        {
          v16 = *v14 != 0;
          v32 = 0u;
          v33 = 0u;
          LOBYTE(v32) = v16;
          v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
LABEL_55:
          v34 = (uint64_t (*)())v17;
          goto LABEL_84;
        }
        goto LABEL_78;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<char>())
      {
        if (v14)
        {
          v18 = *v14;
          v32 = 0u;
          v33 = 0u;
          LOBYTE(v32) = v18;
          v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<char>::dispatch;
          goto LABEL_55;
        }
        goto LABEL_78;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<signed char>())
      {
        if (v14)
        {
          v19 = *v14;
          v32 = 0u;
          v33 = 0u;
          LOBYTE(v32) = v19;
          v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<signed char>::dispatch;
          goto LABEL_55;
        }
        goto LABEL_78;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<unsigned char>())
      {
        if (v14)
        {
          v20 = *v14;
          v32 = 0u;
          v33 = 0u;
          LOBYTE(v32) = v20;
          v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<unsigned char>::dispatch;
          goto LABEL_55;
        }
        goto LABEL_78;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<short>())
      {
        if (v14)
        {
          v21 = *v14;
          v32 = 0u;
          v33 = 0u;
          LOWORD(v32) = v21;
          v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<short>::dispatch;
          goto LABEL_55;
        }
        goto LABEL_78;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<unsigned short>())
      {
        if (v14)
        {
          v22 = *v14;
          v32 = 0u;
          v33 = 0u;
          LOWORD(v32) = v22;
          v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<unsigned short>::dispatch;
          goto LABEL_55;
        }
        goto LABEL_78;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<int>())
      {
        if (v14)
        {
          v23 = *v14;
          v32 = 0u;
          v33 = 0u;
          LODWORD(v32) = v23;
          v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<int>::dispatch;
          goto LABEL_55;
        }
        goto LABEL_78;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<unsigned int>())
      {
        if (v14)
        {
          v24 = *v14;
          v32 = 0u;
          v33 = 0u;
          LODWORD(v32) = v24;
          v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<unsigned int>::dispatch;
          goto LABEL_55;
        }
        goto LABEL_78;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<long>())
      {
        if (v14)
        {
          v25 = *v14;
          v33 = 0uLL;
          v32 = (unint64_t)v25;
          v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<long>::dispatch;
          goto LABEL_55;
        }
        goto LABEL_78;
      }
      if (*a4 != AMCP::Implementation::get_type_marker<unsigned long>())
      {
        if (*a4 == AMCP::Implementation::get_type_marker<long long>())
        {
          if (v14)
          {
            v26 = *v14;
            v33 = 0uLL;
            v32 = (unint64_t)v26;
            v17 = AMCP::Implementation::In_Place_Storage<long long>::dispatch;
            goto LABEL_55;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned long long>())
        {
          if (v14)
          {
            v27 = *v14;
            v33 = 0uLL;
            v32 = (unint64_t)v27;
            v17 = AMCP::Implementation::In_Place_Storage<unsigned long long>::dispatch;
            goto LABEL_55;
          }
        }
        else
        {
          if (*a4 != AMCP::Implementation::get_type_marker<float>())
          {
            if (*a4 == AMCP::Implementation::get_type_marker<double>())
            {
              if (!v14)
                goto LABEL_78;
              *(double *)&v29 = (double)(unint64_t)*v14;
              *(_QWORD *)&v33 = 0;
              v32 = v29;
              v17 = AMCP::Implementation::In_Place_Storage<double>::dispatch;
            }
            else
            {
              if (*a4 != AMCP::Implementation::get_type_marker<long double>())
              {
                if (*a4 != AMCP::Implementation::get_type_marker<AMCP::Direction>())
                {
                  if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>())
                  {
                    AMCP::Implementation::create_number_from<unsigned long long,applesauce::CF::BooleanRef>(&v32, v14);
                  }
                  else if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>())
                  {
                    AMCP::Implementation::create_number_from<unsigned long,applesauce::CF::NumberRef>((uint64_t)&v32, v14);
                  }
                  else
                  {
LABEL_83:
                    v34 = 0;
                    v32 = 0u;
                    v33 = 0u;
                  }
                  goto LABEL_84;
                }
                if (v14)
                {
                  v31 = *v14 != 0;
                  v32 = 0u;
                  v33 = 0u;
                  LODWORD(v32) = v31;
                  v17 = AMCP::Implementation::In_Place_Storage<AMCP::Direction>::dispatch;
                  goto LABEL_55;
                }
                goto LABEL_78;
              }
              if (!v14)
                goto LABEL_78;
              *(double *)&v30 = (double)(unint64_t)*v14;
              *(_QWORD *)&v33 = 0;
              v32 = v30;
              v17 = AMCP::Implementation::In_Place_Storage<long double>::dispatch;
            }
            *((_QWORD *)&v33 + 1) = 0;
            goto LABEL_55;
          }
          if (v14)
          {
            v28 = (float)(unint64_t)*v14;
            v32 = 0u;
            v33 = 0u;
            *(float *)&v32 = v28;
            v17 = AMCP::Implementation::In_Place_Storage<float>::dispatch;
            goto LABEL_55;
          }
        }
LABEL_78:
        __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
      }
      if (!v14)
        goto LABEL_78;
      *((_QWORD *)&v32 + 1) = 0;
      v33 = 0uLL;
      *(_QWORD *)&v32 = *v14;
      v34 = AMCP::Implementation::In_Place_Storage<unsigned long>::dispatch;
LABEL_84:
      AMCP::swap((AMCP::Thing *)&v32, (AMCP::Thing *)a3, v13);
      if (v34)
        ((void (*)(_QWORD, __int128 *, _QWORD, _QWORD))v34)(0, &v32, 0, 0);
      return 0;
    default:
      return result;
  }
}

void sub_1B58002B0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5800280);
}

uint64_t AMCP::Implementation::get_type_marker<long long>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      AMCP::Implementation::get_type_marker<long long>(void)::s_type_marker = AMCP::Implementation::generate_type_marker(MEMORY[0x1E0DE4F28], v4);
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return v1[191];
}

BOOL AMCP::Implementation::In_Place_Storage<long long>::dispatch(_BOOL8 result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  __int128 v7;
  uint64_t type;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, _QWORD, __int128 *);
  void (*v11)(uint64_t, uint64_t, _QWORD, _QWORD);
  _QWORD *v12;
  AMCP::Thing *v13;
  uint64_t *v14;
  uint64_t v15;
  BOOL v16;
  BOOL (*v17)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  unint64_t v29;
  unint64_t v30;
  _BOOL4 v31;
  __int128 v32;
  __int128 v33;
  uint64_t (*v34)();
  void (*v35)(uint64_t, uint64_t, _QWORD, _QWORD);

  switch(result)
  {
    case 0:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      v7 = 0uLL;
      goto LABEL_7;
    case 1:
      result = 0;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_QWORD *)a3 = *(_QWORD *)a2;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<long long>::dispatch;
      return result;
    case 2:
      result = 0;
      v7 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_QWORD *)a3 = *(_QWORD *)a2;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<long long>::dispatch;
      *(_QWORD *)(a2 + 32) = 0;
LABEL_7:
      *(_OWORD *)a2 = v7;
      *(_OWORD *)(a2 + 16) = v7;
      return result;
    case 3:
      type = AMCP::Implementation::get_type_marker<long long>();
      result = 0;
      *a4 = type;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<long long>())
        return a2;
      else
        return 0;
    case 5:
      v9 = AMCP::Implementation::get_type_marker<long long>();
      v10 = *(void (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32);
      *(_QWORD *)&v32 = 0;
      if (v10)
      {
        v10(3, a2, 0, &v32);
        v10 = (void (*)(uint64_t, uint64_t, _QWORD, __int128 *))v32;
      }
      if (v10 != (void (*)(uint64_t, uint64_t, _QWORD, __int128 *))v9)
        goto LABEL_22;
      v11 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a3 + 32);
      v35 = 0;
      if (v11)
      {
        v11(3, a3, 0, &v35);
        v11 = v35;
      }
      if (v11 != (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))v9)
      {
LABEL_22:
        v15 = AMCP::Thing::convert_to<long long>(a2);
        return v15 == AMCP::Thing::convert_to<long long>(a3);
      }
      if (*(_QWORD *)(a2 + 32))
      {
        *(_QWORD *)&v32 = AMCP::Implementation::get_type_marker<long long>();
        v12 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32))(4, a2, 0, &v32);
      }
      else
      {
        v12 = 0;
      }
      *(_QWORD *)&v32 = AMCP::Implementation::get_type_marker<long long>();
      return *v12 == *(_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a3 + 32))(4, a3, 0, &v32);
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<BOOL>()
        && !AMCP::is_one_of<char,signed char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double,long double,AMCP::Direction,applesauce::CF::BooleanRef,applesauce::CF::NumberRef>(a4))
      {
        goto LABEL_83;
      }
      if (*(_QWORD *)(a2 + 32))
      {
        *(_QWORD *)&v32 = AMCP::Implementation::get_type_marker<long long>();
        v14 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32))(4, a2, 0, &v32);
      }
      else
      {
        v14 = 0;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<BOOL>())
      {
        if (v14)
        {
          v16 = *v14 != 0;
          v32 = 0u;
          v33 = 0u;
          LOBYTE(v32) = v16;
          v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
LABEL_58:
          v34 = (uint64_t (*)())v17;
          goto LABEL_84;
        }
        goto LABEL_78;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<char>())
      {
        if (v14)
        {
          v18 = *v14;
          v32 = 0u;
          v33 = 0u;
          LOBYTE(v32) = v18;
          v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<char>::dispatch;
          goto LABEL_58;
        }
        goto LABEL_78;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<signed char>())
      {
        if (v14)
        {
          v19 = *v14;
          v32 = 0u;
          v33 = 0u;
          LOBYTE(v32) = v19;
          v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<signed char>::dispatch;
          goto LABEL_58;
        }
        goto LABEL_78;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<unsigned char>())
      {
        if (v14)
        {
          v20 = *v14;
          v32 = 0u;
          v33 = 0u;
          LOBYTE(v32) = v20;
          v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<unsigned char>::dispatch;
          goto LABEL_58;
        }
        goto LABEL_78;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<short>())
      {
        if (v14)
        {
          v21 = *v14;
          v32 = 0u;
          v33 = 0u;
          LOWORD(v32) = v21;
          v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<short>::dispatch;
          goto LABEL_58;
        }
        goto LABEL_78;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<unsigned short>())
      {
        if (v14)
        {
          v22 = *v14;
          v32 = 0u;
          v33 = 0u;
          LOWORD(v32) = v22;
          v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<unsigned short>::dispatch;
          goto LABEL_58;
        }
        goto LABEL_78;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<int>())
      {
        if (v14)
        {
          v23 = *v14;
          v32 = 0u;
          v33 = 0u;
          LODWORD(v32) = v23;
          v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<int>::dispatch;
          goto LABEL_58;
        }
        goto LABEL_78;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<unsigned int>())
      {
        if (v14)
        {
          v24 = *v14;
          v32 = 0u;
          v33 = 0u;
          LODWORD(v32) = v24;
          v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<unsigned int>::dispatch;
          goto LABEL_58;
        }
        goto LABEL_78;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<long>())
      {
        if (v14)
        {
          v25 = *v14;
          v33 = 0uLL;
          v32 = (unint64_t)v25;
          v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<long>::dispatch;
          goto LABEL_58;
        }
        goto LABEL_78;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<unsigned long>())
      {
        if (v14)
        {
          v26 = *v14;
          v33 = 0uLL;
          v32 = (unint64_t)v26;
          v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<unsigned long>::dispatch;
          goto LABEL_58;
        }
        goto LABEL_78;
      }
      if (*a4 != AMCP::Implementation::get_type_marker<long long>())
      {
        if (*a4 == AMCP::Implementation::get_type_marker<unsigned long long>())
        {
          if (v14)
          {
            v27 = *v14;
            v33 = 0uLL;
            v32 = (unint64_t)v27;
            v17 = AMCP::Implementation::In_Place_Storage<unsigned long long>::dispatch;
            goto LABEL_58;
          }
        }
        else
        {
          if (*a4 != AMCP::Implementation::get_type_marker<float>())
          {
            if (*a4 == AMCP::Implementation::get_type_marker<double>())
            {
              if (!v14)
                goto LABEL_78;
              *(double *)&v29 = (double)*v14;
              *(_QWORD *)&v33 = 0;
              v32 = v29;
              v17 = AMCP::Implementation::In_Place_Storage<double>::dispatch;
            }
            else
            {
              if (*a4 != AMCP::Implementation::get_type_marker<long double>())
              {
                if (*a4 != AMCP::Implementation::get_type_marker<AMCP::Direction>())
                {
                  if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>())
                  {
                    AMCP::Implementation::create_number_from<unsigned long long,applesauce::CF::BooleanRef>(&v32, v14);
                  }
                  else if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>())
                  {
                    AMCP::Implementation::create_number_from<long long,applesauce::CF::NumberRef>((uint64_t)&v32, v14);
                  }
                  else
                  {
LABEL_83:
                    v34 = 0;
                    v32 = 0u;
                    v33 = 0u;
                  }
                  goto LABEL_84;
                }
                if (v14)
                {
                  v31 = *v14 != 0;
                  v32 = 0u;
                  v33 = 0u;
                  LODWORD(v32) = v31;
                  v17 = AMCP::Implementation::In_Place_Storage<AMCP::Direction>::dispatch;
                  goto LABEL_58;
                }
                goto LABEL_78;
              }
              if (!v14)
                goto LABEL_78;
              *(double *)&v30 = (double)*v14;
              *(_QWORD *)&v33 = 0;
              v32 = v30;
              v17 = AMCP::Implementation::In_Place_Storage<long double>::dispatch;
            }
            *((_QWORD *)&v33 + 1) = 0;
            goto LABEL_58;
          }
          if (v14)
          {
            v28 = (float)*v14;
            v32 = 0u;
            v33 = 0u;
            *(float *)&v32 = v28;
            v17 = AMCP::Implementation::In_Place_Storage<float>::dispatch;
            goto LABEL_58;
          }
        }
LABEL_78:
        __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
      }
      if (!v14)
        goto LABEL_78;
      *((_QWORD *)&v32 + 1) = 0;
      v33 = 0uLL;
      *(_QWORD *)&v32 = *v14;
      v34 = AMCP::Implementation::In_Place_Storage<long long>::dispatch;
LABEL_84:
      AMCP::swap((AMCP::Thing *)&v32, (AMCP::Thing *)a3, v13);
      if (v34)
        ((void (*)(_QWORD, __int128 *, _QWORD, _QWORD))v34)(0, &v32, 0, 0);
      return 0;
    default:
      return result;
  }
}

void sub_1B5800910(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B58008E0);
}

uint64_t AMCP::Implementation::get_type_marker<unsigned long long>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      AMCP::Implementation::get_type_marker<unsigned long long>(void)::s_type_marker = AMCP::Implementation::generate_type_marker(MEMORY[0x1E0DE4F30], v4);
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return v1[93];
}

BOOL AMCP::Implementation::In_Place_Storage<unsigned long long>::dispatch(_BOOL8 result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  __int128 v7;
  uint64_t type;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, _QWORD, __int128 *);
  void (*v11)(uint64_t, uint64_t, _QWORD, _QWORD);
  _QWORD *v12;
  AMCP::Thing *v13;
  uint64_t *v14;
  uint64_t v15;
  BOOL v16;
  BOOL (*v17)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  unint64_t v29;
  unint64_t v30;
  _BOOL4 v31;
  __int128 v32;
  __int128 v33;
  uint64_t (*v34)();
  void (*v35)(uint64_t, uint64_t, _QWORD, _QWORD);

  switch(result)
  {
    case 0:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      v7 = 0uLL;
      goto LABEL_7;
    case 1:
      result = 0;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_QWORD *)a3 = *(_QWORD *)a2;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<unsigned long long>::dispatch;
      return result;
    case 2:
      result = 0;
      v7 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_QWORD *)a3 = *(_QWORD *)a2;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<unsigned long long>::dispatch;
      *(_QWORD *)(a2 + 32) = 0;
LABEL_7:
      *(_OWORD *)a2 = v7;
      *(_OWORD *)(a2 + 16) = v7;
      return result;
    case 3:
      type = AMCP::Implementation::get_type_marker<unsigned long long>();
      result = 0;
      *a4 = type;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<unsigned long long>())
        return a2;
      else
        return 0;
    case 5:
      v9 = AMCP::Implementation::get_type_marker<unsigned long long>();
      v10 = *(void (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32);
      *(_QWORD *)&v32 = 0;
      if (v10)
      {
        v10(3, a2, 0, &v32);
        v10 = (void (*)(uint64_t, uint64_t, _QWORD, __int128 *))v32;
      }
      if (v10 != (void (*)(uint64_t, uint64_t, _QWORD, __int128 *))v9)
        goto LABEL_22;
      v11 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a3 + 32);
      v35 = 0;
      if (v11)
      {
        v11(3, a3, 0, &v35);
        v11 = v35;
      }
      if (v11 != (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))v9)
      {
LABEL_22:
        v15 = AMCP::Thing::convert_to<unsigned long long>(a2);
        return v15 == AMCP::Thing::convert_to<unsigned long long>(a3);
      }
      if (*(_QWORD *)(a2 + 32))
      {
        *(_QWORD *)&v32 = AMCP::Implementation::get_type_marker<unsigned long long>();
        v12 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32))(4, a2, 0, &v32);
      }
      else
      {
        v12 = 0;
      }
      *(_QWORD *)&v32 = AMCP::Implementation::get_type_marker<unsigned long long>();
      return *v12 == *(_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a3 + 32))(4, a3, 0, &v32);
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<BOOL>()
        && !AMCP::is_one_of<char,signed char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double,long double,AMCP::Direction,applesauce::CF::BooleanRef,applesauce::CF::NumberRef>(a4))
      {
        goto LABEL_83;
      }
      if (*(_QWORD *)(a2 + 32))
      {
        *(_QWORD *)&v32 = AMCP::Implementation::get_type_marker<unsigned long long>();
        v14 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32))(4, a2, 0, &v32);
      }
      else
      {
        v14 = 0;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<BOOL>())
      {
        if (v14)
        {
          v16 = *v14 != 0;
          v32 = 0u;
          v33 = 0u;
          LOBYTE(v32) = v16;
          v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
LABEL_61:
          v34 = (uint64_t (*)())v17;
          goto LABEL_84;
        }
        goto LABEL_78;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<char>())
      {
        if (v14)
        {
          v18 = *v14;
          v32 = 0u;
          v33 = 0u;
          LOBYTE(v32) = v18;
          v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<char>::dispatch;
          goto LABEL_61;
        }
        goto LABEL_78;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<signed char>())
      {
        if (v14)
        {
          v19 = *v14;
          v32 = 0u;
          v33 = 0u;
          LOBYTE(v32) = v19;
          v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<signed char>::dispatch;
          goto LABEL_61;
        }
        goto LABEL_78;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<unsigned char>())
      {
        if (v14)
        {
          v20 = *v14;
          v32 = 0u;
          v33 = 0u;
          LOBYTE(v32) = v20;
          v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<unsigned char>::dispatch;
          goto LABEL_61;
        }
        goto LABEL_78;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<short>())
      {
        if (v14)
        {
          v21 = *v14;
          v32 = 0u;
          v33 = 0u;
          LOWORD(v32) = v21;
          v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<short>::dispatch;
          goto LABEL_61;
        }
        goto LABEL_78;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<unsigned short>())
      {
        if (v14)
        {
          v22 = *v14;
          v32 = 0u;
          v33 = 0u;
          LOWORD(v32) = v22;
          v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<unsigned short>::dispatch;
          goto LABEL_61;
        }
        goto LABEL_78;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<int>())
      {
        if (v14)
        {
          v23 = *v14;
          v32 = 0u;
          v33 = 0u;
          LODWORD(v32) = v23;
          v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<int>::dispatch;
          goto LABEL_61;
        }
        goto LABEL_78;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<unsigned int>())
      {
        if (v14)
        {
          v24 = *v14;
          v32 = 0u;
          v33 = 0u;
          LODWORD(v32) = v24;
          v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<unsigned int>::dispatch;
          goto LABEL_61;
        }
        goto LABEL_78;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<long>())
      {
        if (v14)
        {
          v25 = *v14;
          v33 = 0uLL;
          v32 = (unint64_t)v25;
          v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<long>::dispatch;
          goto LABEL_61;
        }
        goto LABEL_78;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<unsigned long>())
      {
        if (v14)
        {
          v26 = *v14;
          v33 = 0uLL;
          v32 = (unint64_t)v26;
          v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<unsigned long>::dispatch;
          goto LABEL_61;
        }
        goto LABEL_78;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<long long>())
      {
        if (v14)
        {
          v27 = *v14;
          v33 = 0uLL;
          v32 = (unint64_t)v27;
          v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<long long>::dispatch;
          goto LABEL_61;
        }
        goto LABEL_78;
      }
      if (*a4 != AMCP::Implementation::get_type_marker<unsigned long long>())
      {
        if (*a4 != AMCP::Implementation::get_type_marker<float>())
        {
          if (*a4 == AMCP::Implementation::get_type_marker<double>())
          {
            if (!v14)
              goto LABEL_78;
            *(double *)&v29 = (double)(unint64_t)*v14;
            *(_QWORD *)&v33 = 0;
            v32 = v29;
            v17 = AMCP::Implementation::In_Place_Storage<double>::dispatch;
          }
          else
          {
            if (*a4 != AMCP::Implementation::get_type_marker<long double>())
            {
              if (*a4 != AMCP::Implementation::get_type_marker<AMCP::Direction>())
              {
                if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>())
                {
                  AMCP::Implementation::create_number_from<unsigned long long,applesauce::CF::BooleanRef>(&v32, v14);
                }
                else if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>())
                {
                  AMCP::Implementation::create_number_from<unsigned long long,applesauce::CF::NumberRef>((uint64_t)&v32, v14);
                }
                else
                {
LABEL_83:
                  v34 = 0;
                  v32 = 0u;
                  v33 = 0u;
                }
                goto LABEL_84;
              }
              if (v14)
              {
                v31 = *v14 != 0;
                v32 = 0u;
                v33 = 0u;
                LODWORD(v32) = v31;
                v17 = AMCP::Implementation::In_Place_Storage<AMCP::Direction>::dispatch;
                goto LABEL_61;
              }
              goto LABEL_78;
            }
            if (!v14)
              goto LABEL_78;
            *(double *)&v30 = (double)(unint64_t)*v14;
            *(_QWORD *)&v33 = 0;
            v32 = v30;
            v17 = AMCP::Implementation::In_Place_Storage<long double>::dispatch;
          }
          *((_QWORD *)&v33 + 1) = 0;
          goto LABEL_61;
        }
        if (v14)
        {
          v28 = (float)(unint64_t)*v14;
          v32 = 0u;
          v33 = 0u;
          *(float *)&v32 = v28;
          v17 = AMCP::Implementation::In_Place_Storage<float>::dispatch;
          goto LABEL_61;
        }
LABEL_78:
        __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
      }
      if (!v14)
        goto LABEL_78;
      *((_QWORD *)&v32 + 1) = 0;
      v33 = 0uLL;
      *(_QWORD *)&v32 = *v14;
      v34 = AMCP::Implementation::In_Place_Storage<unsigned long long>::dispatch;
LABEL_84:
      AMCP::swap((AMCP::Thing *)&v32, (AMCP::Thing *)a3, v13);
      if (v34)
        ((void (*)(_QWORD, __int128 *, _QWORD, _QWORD))v34)(0, &v32, 0, 0);
      return 0;
    default:
      return result;
  }
}

void sub_1B5800F70(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5800F40);
}

uint64_t AMCP::Implementation::get_type_marker<float>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      AMCP::Implementation::get_type_marker<float>(void)::s_type_marker = AMCP::Implementation::generate_type_marker(MEMORY[0x1E0DE4EE0], v4);
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return v1[193];
}

uint64_t AMCP::Implementation::get_type_marker<double>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      AMCP::Implementation::get_type_marker<double>(void)::s_type_marker = AMCP::Implementation::generate_type_marker(MEMORY[0x1E0DE4ED0], v4);
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return v1[195];
}

uint64_t AMCP::Implementation::get_type_marker<long double>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      AMCP::Implementation::get_type_marker<long double>(void)::s_type_marker = AMCP::Implementation::generate_type_marker(MEMORY[0x1E0DE4ED8], v4);
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return v1[197];
}

uint64_t AMCP::Implementation::get_type_marker<AMCP::Direction>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return v1[199];
}

BOOL AMCP::Implementation::In_Place_Storage<AMCP::Direction>::dispatch(_BOOL8 result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, _QWORD, __int128 *);
  void (*v11)(uint64_t, uint64_t, _QWORD, _QWORD);
  _DWORD *v12;
  AMCP::Thing *v13;
  unsigned int *v14;
  int v15;
  BOOL v16;
  BOOL (*v17)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  char v18;
  char v19;
  char v20;
  __int16 v21;
  __int16 v22;
  int v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  float v29;
  unint64_t v30;
  unint64_t v31;
  __int128 v32;
  __int128 v33;
  BOOL (*v34)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  void (*v35)(uint64_t, uint64_t, _QWORD, _QWORD);

  switch(result)
  {
    case 0:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      v7 = 0uLL;
      goto LABEL_7;
    case 1:
      result = 0;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_DWORD *)a3 = *(_DWORD *)a2;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<AMCP::Direction>::dispatch;
      return result;
    case 2:
      result = 0;
      v7 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_DWORD *)a3 = *(_DWORD *)a2;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<AMCP::Direction>::dispatch;
      *(_QWORD *)(a2 + 32) = 0;
LABEL_7:
      *(_OWORD *)a2 = v7;
      *(_OWORD *)(a2 + 16) = v7;
      return result;
    case 3:
      v8 = AMCP::Implementation::get_type_marker<AMCP::Direction>();
      result = 0;
      *a4 = v8;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<AMCP::Direction>())
        return a2;
      else
        return 0;
    case 5:
      v9 = AMCP::Implementation::get_type_marker<AMCP::Direction>();
      v10 = *(void (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32);
      *(_QWORD *)&v32 = 0;
      if (v10)
      {
        v10(3, a2, 0, &v32);
        v10 = (void (*)(uint64_t, uint64_t, _QWORD, __int128 *))v32;
      }
      if (v10 != (void (*)(uint64_t, uint64_t, _QWORD, __int128 *))v9)
        goto LABEL_22;
      v11 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a3 + 32);
      v35 = 0;
      if (v11)
      {
        v11(3, a3, 0, &v35);
        v11 = v35;
      }
      if (v11 != (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))v9)
      {
LABEL_22:
        v15 = AMCP::Thing::convert_to<AMCP::Direction>(a2);
        return v15 == AMCP::Thing::convert_to<AMCP::Direction>(a3);
      }
      if (*(_QWORD *)(a2 + 32))
      {
        *(_QWORD *)&v32 = AMCP::Implementation::get_type_marker<AMCP::Direction>();
        v12 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32))(4, a2, 0, &v32);
      }
      else
      {
        v12 = 0;
      }
      *(_QWORD *)&v32 = AMCP::Implementation::get_type_marker<AMCP::Direction>();
      return *v12 == *(_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a3 + 32))(4, a3, 0, &v32);
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<BOOL>()
        && !AMCP::is_one_of<char,signed char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double,long double,AMCP::Direction,applesauce::CF::BooleanRef,applesauce::CF::NumberRef>(a4))
      {
        goto LABEL_83;
      }
      if (*(_QWORD *)(a2 + 32))
      {
        *(_QWORD *)&v32 = AMCP::Implementation::get_type_marker<AMCP::Direction>();
        v14 = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32))(4, a2, 0, &v32);
      }
      else
      {
        v14 = 0;
      }
      if (*a4 != AMCP::Implementation::get_type_marker<BOOL>())
      {
        if (*a4 == AMCP::Implementation::get_type_marker<char>())
        {
          if (v14)
          {
            v18 = *v14;
            v32 = 0u;
            v33 = 0u;
            LOBYTE(v32) = v18;
            v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<char>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<signed char>())
        {
          if (v14)
          {
            v19 = *v14;
            v32 = 0u;
            v33 = 0u;
            LOBYTE(v32) = v19;
            v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<signed char>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned char>())
        {
          if (v14)
          {
            v20 = *v14;
            v32 = 0u;
            v33 = 0u;
            LOBYTE(v32) = v20;
            v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<unsigned char>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<short>())
        {
          if (v14)
          {
            v21 = *v14;
            v32 = 0u;
            v33 = 0u;
            LOWORD(v32) = v21;
            v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<short>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned short>())
        {
          if (v14)
          {
            v22 = *v14;
            v32 = 0u;
            v33 = 0u;
            LOWORD(v32) = v22;
            v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<unsigned short>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<int>())
        {
          if (v14)
          {
            v23 = *v14;
            v32 = 0u;
            v33 = 0u;
            LODWORD(v32) = v23;
            v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<int>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned int>())
        {
          if (v14)
          {
            v24 = *v14;
            v32 = 0u;
            v33 = 0u;
            LODWORD(v32) = v24;
            v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<unsigned int>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<long>())
        {
          if (v14)
          {
            v25 = *v14;
            v33 = 0uLL;
            v32 = v25;
            v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<long>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned long>())
        {
          if (v14)
          {
            v26 = *v14;
            v33 = 0uLL;
            v32 = v26;
            v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<unsigned long>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<long long>())
        {
          if (v14)
          {
            v27 = *v14;
            v33 = 0uLL;
            v32 = v27;
            v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<long long>::dispatch;
            goto LABEL_74;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned long long>())
        {
          if (v14)
          {
            v28 = *v14;
            v33 = 0uLL;
            v32 = v28;
            v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<unsigned long long>::dispatch;
            goto LABEL_74;
          }
        }
        else
        {
          if (*a4 != AMCP::Implementation::get_type_marker<float>())
          {
            if (*a4 == AMCP::Implementation::get_type_marker<double>())
            {
              if (!v14)
                goto LABEL_78;
              LODWORD(v30) = *v14;
              *(_QWORD *)&v33 = 0;
              v32 = COERCE_UNSIGNED_INT64((double)v30);
              v17 = AMCP::Implementation::In_Place_Storage<double>::dispatch;
            }
            else
            {
              if (*a4 != AMCP::Implementation::get_type_marker<long double>())
              {
                if (*a4 != AMCP::Implementation::get_type_marker<AMCP::Direction>())
                {
                  if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>())
                  {
                    AMCP::Implementation::create_number_from<AMCP::Direction,applesauce::CF::BooleanRef>(&v32, v14);
                  }
                  else if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>())
                  {
                    AMCP::Implementation::create_number_from<AMCP::Direction,applesauce::CF::NumberRef>((CFNumberRef *)&v32, v14);
                  }
                  else
                  {
LABEL_83:
                    v34 = 0;
                    v32 = 0u;
                    v33 = 0u;
                  }
                  goto LABEL_84;
                }
                if (v14)
                {
                  v32 = 0u;
                  v33 = 0u;
                  LODWORD(v32) = *v14;
                  v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<AMCP::Direction>::dispatch;
                  goto LABEL_74;
                }
                goto LABEL_78;
              }
              if (!v14)
                goto LABEL_78;
              LODWORD(v31) = *v14;
              *(_QWORD *)&v33 = 0;
              v32 = COERCE_UNSIGNED_INT64((double)v31);
              v17 = AMCP::Implementation::In_Place_Storage<long double>::dispatch;
            }
            *((_QWORD *)&v33 + 1) = 0;
            goto LABEL_74;
          }
          if (v14)
          {
            v29 = (float)*v14;
            v32 = 0u;
            v33 = 0u;
            *(float *)&v32 = v29;
            v17 = AMCP::Implementation::In_Place_Storage<float>::dispatch;
            goto LABEL_74;
          }
        }
LABEL_78:
        __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
      }
      if (!v14)
        goto LABEL_78;
      v16 = *v14 != 0;
      v32 = 0u;
      v33 = 0u;
      LOBYTE(v32) = v16;
      v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
LABEL_74:
      v34 = v17;
LABEL_84:
      AMCP::swap((AMCP::Thing *)&v32, (AMCP::Thing *)a3, v13);
      if (v34)
        v34(0, (uint64_t)&v32, 0, 0);
      return 0;
    default:
      return result;
  }
}

void sub_1B58016EC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B58016BCLL);
}

uint64_t AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return v1[201];
}

_QWORD *AMCP::Implementation::create_number_from<BOOL,applesauce::CF::BooleanRef>(_QWORD *result, _BYTE *a2)
{
  uint64_t *v2;
  uint64_t v3;

  if (!a2)
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  if (*a2)
    v2 = (uint64_t *)MEMORY[0x1E0C9AE58];
  else
    v2 = (uint64_t *)MEMORY[0x1E0C9AE48];
  v3 = *v2;
  result[2] = 0;
  result[3] = 0;
  *result = v3;
  result[1] = 0;
  result[4] = AMCP::Implementation::In_Place_Storage<applesauce::CF::BooleanRef>::dispatch;
  return result;
}

uint64_t AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return v1[203];
}

void AMCP::Implementation::create_number_from<BOOL,applesauce::CF::NumberRef>(uint64_t a1, char *a2)
{
  CFNumberRef v3;
  CFNumberRef v4;
  std::runtime_error *exception;
  CFNumberRef v6;
  char valuePtr;

  if (!a2)
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  valuePtr = *a2;
  v3 = CFNumberCreate(0, kCFNumberCharType, &valuePtr);
  v6 = v3;
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v4 = v3;
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  AMCP::Implementation::In_Place_Storage<applesauce::CF::NumberRef>::construct<applesauce::CF::NumberRef&>(a1, (CFTypeRef *)&v6);
  CFRelease(v4);
}

void sub_1B58018EC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::In_Place_Storage<applesauce::CF::NumberRef>::construct<applesauce::CF::NumberRef&>(uint64_t a1, CFTypeRef *a2)
{
  CFTypeRef v3;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v3 = *a2;
  if (*a2)
    CFRetain(*a2);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<applesauce::CF::NumberRef>::dispatch;
  return a1;
}

BOOL AMCP::Implementation::In_Place_Storage<applesauce::CF::NumberRef>::dispatch(_BOOL8 result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  CFNumberRef v9;
  CFNumberRef v10;
  CFNumberRef *v11;
  CFTypeRef *v12;
  CFNumberRef v13;
  CFNumberRef v14;
  _BOOL4 v15;
  uint64_t v16;
  AMCP::Thing *v17;
  AMCP::Thing *v18;
  const __CFNumber **v19;
  BOOL v20;
  uint64_t (*v21)();
  char v22;
  char v23;
  const __CFNumber *v24;
  CFComparisonResult v25;
  char v26;
  __int16 v27;
  std::runtime_error *exception;
  CFNumberRef otherNumber[2];
  __int128 v30;
  void (*v31)(_QWORD, CFNumberRef *, _QWORD, _QWORD);
  CFNumberRef number[2];
  __int128 v33;
  uint64_t (*v34)();

  switch(result)
  {
    case 0:
      goto LABEL_7;
    case 1:
      AMCP::Implementation::In_Place_Storage<applesauce::CF::NumberRef>::construct<applesauce::CF::NumberRef const&>(a3, (CFTypeRef *)a2);
      return 0;
    case 2:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_QWORD *)a3 = *(_QWORD *)a2;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<applesauce::CF::NumberRef>::dispatch;
LABEL_7:
      AMCP::Implementation::In_Place_Storage<applesauce::CF::NumberRef>::destruct(a2);
      return 0;
    case 3:
      v7 = AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>();
      result = 0;
      *a4 = v7;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>())
        return a2;
      else
        return 0;
    case 5:
      v8 = AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>();
      v9 = *(CFNumberRef *)(a2 + 32);
      number[0] = 0;
      if (v9)
      {
        ((void (*)(uint64_t, uint64_t, _QWORD, CFNumberRef *))v9)(3, a2, 0, number);
        v9 = number[0];
      }
      if (v9 != (CFNumberRef)v8)
        goto LABEL_28;
      v10 = *(CFNumberRef *)(a3 + 32);
      otherNumber[0] = 0;
      if (v10)
      {
        ((void (*)(uint64_t, uint64_t, _QWORD, CFNumberRef *))v10)(3, a3, 0, otherNumber);
        v10 = otherNumber[0];
      }
      if (v10 != (CFNumberRef)v8)
      {
LABEL_28:
        AMCP::Thing::convert_to<applesauce::CF::NumberRef>(number, a2);
        AMCP::Thing::convert_to<applesauce::CF::NumberRef>(otherNumber, a3);
        v13 = number[0];
        v14 = otherNumber[0];
        if (number[0])
        {
          if (!otherNumber[0])
          {
            v15 = 0;
            goto LABEL_67;
          }
          v15 = CFNumberCompare(number[0], otherNumber[0], 0) == kCFCompareEqualTo;
        }
        else
        {
          if (otherNumber[0])
            v16 = -1;
          else
            v16 = 0;
          v15 = otherNumber[0] == 0;
          if (!otherNumber[0])
            return !v16;
        }
        CFRelease(v14);
        if (!v13)
          return v15;
LABEL_67:
        CFRelease(v13);
        return v15;
      }
      if (*(_QWORD *)(a2 + 32))
      {
        number[0] = (CFNumberRef)AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>();
        v11 = (CFNumberRef *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, CFNumberRef *))(a2 + 32))(4, a2, 0, number);
      }
      else
      {
        v11 = 0;
      }
      number[0] = (CFNumberRef)AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>();
      v24 = *(const __CFNumber **)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, CFNumberRef *))(a3 + 32))(4, a3, 0, number);
      if (*v11)
      {
        if (!v24)
          return 0;
        v25 = CFNumberCompare(*v11, v24, 0);
      }
      else if (v24)
      {
        v25 = kCFCompareLessThan;
      }
      else
      {
        v25 = kCFCompareEqualTo;
      }
      return v25 == kCFCompareEqualTo;
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<mcp_applesauce::CF::PropertyListRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::StringRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DataRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DateRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>()
        || *a4 != AMCP::Implementation::get_type_marker<mcp_applesauce::CF::PropertyListRef>())
      {
        goto LABEL_52;
      }
      if (*(_QWORD *)(a2 + 32))
      {
        number[0] = (CFNumberRef)AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>();
        v12 = (CFTypeRef *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, CFNumberRef *))(a2 + 32))(4, a2, 0, number);
      }
      else
      {
        v12 = 0;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<mcp_applesauce::CF::PropertyListRef>())
      {
        if (v12)
        {
          mcp_applesauce::CF::PropertyListRef::from_get((mcp_applesauce::CF::PropertyListRef *)number, *v12);
          v31 = 0;
          *(_OWORD *)otherNumber = 0u;
          v30 = 0u;
          AMCP::Implementation::In_Place_Storage<mcp_applesauce::CF::PropertyListRef>::construct<mcp_applesauce::CF::PropertyListRef&>((uint64_t)otherNumber, (CFTypeRef *)number);
          if (number[0])
            CFRelease(number[0]);
          if (v31)
            goto LABEL_125;
          goto LABEL_53;
        }
      }
      else if (*a4 != AMCP::Implementation::get_type_marker<applesauce::CF::StringRef>()
             && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DataRef>()
             && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>()
             && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>()
             && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DateRef>()
             && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>()
             && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>()
             || v12)
      {
LABEL_52:
        v31 = 0;
        *(_OWORD *)otherNumber = 0u;
        v30 = 0u;
        if (*a4 != AMCP::Implementation::get_type_marker<BOOL>()
          && !AMCP::is_one_of<char,signed char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double,long double,AMCP::Direction,applesauce::CF::BooleanRef,applesauce::CF::NumberRef>(a4))
        {
          goto LABEL_122;
        }
LABEL_53:
        if (*(_QWORD *)(a2 + 32))
        {
          number[0] = (CFNumberRef)AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>();
          v19 = (const __CFNumber **)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, CFNumberRef *))(a2 + 32))(4, a2, 0, number);
        }
        else
        {
          v19 = 0;
        }
        if (*a4 == AMCP::Implementation::get_type_marker<BOOL>())
        {
          if (v19)
          {
            if (*v19)
            {
              v20 = applesauce::CF::convert_to<BOOL,0>(*v19);
              *(_OWORD *)number = 0u;
              v33 = 0u;
              LOBYTE(number[0]) = v20;
              v21 = AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
LABEL_93:
              v34 = v21;
              goto LABEL_123;
            }
            goto LABEL_129;
          }
          goto LABEL_108;
        }
        if (*a4 == AMCP::Implementation::get_type_marker<char>())
        {
          if (v19)
          {
            if (*v19)
            {
              v22 = applesauce::CF::convert_to<char,0>(*v19);
              *(_OWORD *)number = 0u;
              v33 = 0u;
              LOBYTE(number[0]) = v22;
              v21 = AMCP::Implementation::In_Place_Storage<char>::dispatch;
              goto LABEL_93;
            }
LABEL_129:
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Could not construct");
            __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
LABEL_108:
          __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
        }
        if (*a4 == AMCP::Implementation::get_type_marker<signed char>())
        {
          if (v19)
          {
            if (*v19)
            {
              v23 = applesauce::CF::convert_to<signed char,0>(*v19);
              *(_OWORD *)number = 0u;
              v33 = 0u;
              LOBYTE(number[0]) = v23;
              v21 = AMCP::Implementation::In_Place_Storage<signed char>::dispatch;
              goto LABEL_93;
            }
            goto LABEL_129;
          }
          goto LABEL_108;
        }
        if (*a4 == AMCP::Implementation::get_type_marker<unsigned char>())
        {
          if (v19)
          {
            if (*v19)
            {
              v26 = applesauce::CF::convert_to<unsigned char,0>(*v19);
              *(_OWORD *)number = 0u;
              v33 = 0u;
              LOBYTE(number[0]) = v26;
              v21 = AMCP::Implementation::In_Place_Storage<unsigned char>::dispatch;
              goto LABEL_93;
            }
            goto LABEL_129;
          }
          goto LABEL_108;
        }
        if (*a4 == AMCP::Implementation::get_type_marker<short>())
        {
          if (v19)
          {
            if (*v19)
            {
              v27 = applesauce::CF::convert_to<short,0>(*v19);
              *(_OWORD *)number = 0u;
              v33 = 0u;
              LOWORD(number[0]) = v27;
              v21 = AMCP::Implementation::In_Place_Storage<short>::dispatch;
              goto LABEL_93;
            }
            goto LABEL_129;
          }
          goto LABEL_108;
        }
        if (*a4 == AMCP::Implementation::get_type_marker<unsigned short>())
        {
          AMCP::Implementation::create_number_from<applesauce::CF::NumberRef,unsigned short>((uint64_t)number, v19);
          goto LABEL_123;
        }
        if (*a4 == AMCP::Implementation::get_type_marker<int>())
        {
          AMCP::Implementation::create_number_from<applesauce::CF::NumberRef,int>((uint64_t)number, v19);
          goto LABEL_123;
        }
        if (*a4 == AMCP::Implementation::get_type_marker<unsigned int>())
        {
          AMCP::Implementation::create_number_from<applesauce::CF::NumberRef,unsigned int>((uint64_t)number, v19);
          goto LABEL_123;
        }
        if (*a4 == AMCP::Implementation::get_type_marker<long>())
        {
          AMCP::Implementation::create_number_from<applesauce::CF::NumberRef,long>((unint64_t *)number, v19);
          goto LABEL_123;
        }
        if (*a4 == AMCP::Implementation::get_type_marker<unsigned long>())
        {
          AMCP::Implementation::create_number_from<applesauce::CF::NumberRef,unsigned long>((unint64_t *)number, v19);
          goto LABEL_123;
        }
        if (*a4 == AMCP::Implementation::get_type_marker<long long>())
        {
          AMCP::Implementation::create_number_from<applesauce::CF::NumberRef,long long>((unint64_t *)number, v19);
          goto LABEL_123;
        }
        if (*a4 == AMCP::Implementation::get_type_marker<unsigned long long>())
        {
          AMCP::Implementation::create_number_from<applesauce::CF::NumberRef,unsigned long long>((unint64_t *)number, v19);
          goto LABEL_123;
        }
        if (*a4 == AMCP::Implementation::get_type_marker<float>())
        {
          AMCP::Implementation::create_number_from<applesauce::CF::NumberRef,float>((uint64_t)number, v19);
          goto LABEL_123;
        }
        if (*a4 == AMCP::Implementation::get_type_marker<double>())
        {
          AMCP::Implementation::create_number_from<applesauce::CF::NumberRef,double>((uint64_t)number, v19);
          goto LABEL_123;
        }
        if (*a4 == AMCP::Implementation::get_type_marker<long double>())
        {
          AMCP::Implementation::create_number_from<applesauce::CF::NumberRef,long double>((uint64_t)number, v19);
          goto LABEL_123;
        }
        if (*a4 == AMCP::Implementation::get_type_marker<AMCP::Direction>())
        {
          AMCP::Implementation::create_number_from<applesauce::CF::NumberRef,AMCP::Direction>((uint64_t)number, v19);
          goto LABEL_123;
        }
        if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>())
        {
          AMCP::Implementation::create_number_from<applesauce::CF::NumberRef,applesauce::CF::BooleanRef>(number, v19);
          goto LABEL_123;
        }
        if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>())
        {
          AMCP::Implementation::create_number_from<applesauce::CF::NumberRef,applesauce::CF::NumberRef>((uint64_t)number, (CFTypeRef *)v19);
        }
        else
        {
LABEL_122:
          v34 = 0;
          *(_OWORD *)number = 0u;
          v33 = 0u;
        }
LABEL_123:
        AMCP::swap((AMCP::Thing *)number, (AMCP::Thing *)otherNumber, v18);
        if (v34)
          ((void (*)(_QWORD, CFNumberRef *, _QWORD, _QWORD))v34)(0, number, 0, 0);
LABEL_125:
        AMCP::swap((AMCP::Thing *)otherNumber, (AMCP::Thing *)a3, v17);
        if (v31)
          v31(0, otherNumber, 0, 0);
        return 0;
      }
      __assert_rtn("create_cf_plist_from", "Thing.h", 2434, "in_value_ptr != nullptr");
    default:
      return result;
  }
}

void sub_1B5802164(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  void *v15;

  __cxa_free_exception(v15);
  __clang_call_terminate(a1);
}

double AMCP::Implementation::In_Place_Storage<applesauce::CF::NumberRef>::destruct(uint64_t a1)
{
  const void *v2;
  double result;

  v2 = *(const void **)a1;
  if (v2)
    CFRelease(v2);
  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t AMCP::Implementation::In_Place_Storage<applesauce::CF::NumberRef>::construct<applesauce::CF::NumberRef const&>(uint64_t a1, CFTypeRef *a2)
{
  CFTypeRef v3;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v3 = *a2;
  if (*a2)
    CFRetain(*a2);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<applesauce::CF::NumberRef>::dispatch;
  return a1;
}

CFTypeRef *AMCP::Thing::convert_to<applesauce::CF::NumberRef>(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, _QWORD, _QWORD);
  CFTypeRef *result;
  CFTypeRef v7;
  CFTypeRef v8;
  std::bad_cast *exception;
  std::bad_cast *v10;
  std::bad_cast *v11;
  std::bad_cast *v12;
  std::bad_cast *v13;
  std::bad_cast *v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[2];
  uint64_t (*v18)(uint64_t, _OWORD *, _QWORD, uint64_t *);
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, _QWORD, _QWORD);

  if (!*(_QWORD *)(a2 + 32))
    goto LABEL_16;
  v4 = AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>();
  v5 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a2 + 32);
  v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))v4)
  {
    v19 = v4;
    result = (CFTypeRef *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (result)
    {
      v7 = *result;
      if (*result)
        result = (CFTypeRef *)CFRetain(*result);
      *a1 = v7;
      return result;
    }
LABEL_16:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v16 = AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>();
  memset(v17, 0, sizeof(v17));
  v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v15 = v4;
  result = (CFTypeRef *)v18(4, v17, 0, &v15);
  if (!result)
  {
    v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v8 = *result;
  if (*result)
    result = (CFTypeRef *)CFRetain(*result);
  *a1 = v8;
  if (v18)
    return (CFTypeRef *)v18(0, v17, 0, 0);
  return result;
}

void sub_1B5802408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

void applesauce::CF::NumberRef::~NumberRef(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

BOOL applesauce::CF::convert_to<BOOL,0>(const __CFNumber *a1)
{
  CFTypeID TypeID;
  unsigned __int16 v3;
  CFTypeID v4;
  __int16 v5;
  __int16 v6;
  std::runtime_error *exception;

  TypeID = CFNumberGetTypeID();
  if (TypeID == CFGetTypeID(a1))
  {
    v3 = applesauce::CF::details::number_convert_as<BOOL>(a1);
  }
  else
  {
    v4 = CFBooleanGetTypeID();
    if (v4 == CFGetTypeID(a1))
    {
      v5 = CFBooleanGetValue(a1) != 0;
      v6 = 1;
    }
    else
    {
      v5 = 0;
      v6 = 0;
    }
    v3 = v5 | (v6 << 8);
  }
  if (v3 <= 0xFFu)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return v3 != 0;
}

void sub_1B5802510(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t applesauce::CF::convert_to<char,0>(const __CFNumber *a1)
{
  CFTypeID TypeID;
  int Value;
  CFTypeID v4;
  __int16 v5;
  _BOOL4 v6;
  std::runtime_error *exception;
  uint64_t valuePtr;

  TypeID = CFNumberGetTypeID();
  if (TypeID == CFGetTypeID(a1))
  {
    switch(CFNumberGetType(a1))
    {
      case kCFNumberSInt8Type:
        LOBYTE(valuePtr) = 0;
        Value = CFNumberGetValue(a1, kCFNumberSInt8Type, &valuePtr);
        goto LABEL_20;
      case kCFNumberSInt16Type:
        LOWORD(valuePtr) = 0;
        Value = CFNumberGetValue(a1, kCFNumberSInt16Type, &valuePtr);
        goto LABEL_20;
      case kCFNumberSInt32Type:
        LODWORD(valuePtr) = 0;
        Value = CFNumberGetValue(a1, kCFNumberSInt32Type, &valuePtr);
        goto LABEL_20;
      case kCFNumberSInt64Type:
        valuePtr = 0;
        Value = CFNumberGetValue(a1, kCFNumberSInt64Type, &valuePtr);
        goto LABEL_20;
      case kCFNumberFloat32Type:
        v5 = applesauce::CF::details::handle_case<float,signed char>(a1, kCFNumberFloat32Type);
        goto LABEL_26;
      case kCFNumberFloat64Type:
        v5 = applesauce::CF::details::handle_case<double,signed char>(a1, kCFNumberFloat64Type);
        goto LABEL_26;
      case kCFNumberCharType:
        LOBYTE(valuePtr) = 0;
        Value = CFNumberGetValue(a1, kCFNumberCharType, &valuePtr);
        goto LABEL_20;
      case kCFNumberShortType:
        LOWORD(valuePtr) = 0;
        Value = CFNumberGetValue(a1, kCFNumberShortType, &valuePtr);
        goto LABEL_20;
      case kCFNumberIntType:
        LODWORD(valuePtr) = 0;
        Value = CFNumberGetValue(a1, kCFNumberIntType, &valuePtr);
        goto LABEL_20;
      case kCFNumberLongType:
        valuePtr = 0;
        Value = CFNumberGetValue(a1, kCFNumberLongType, &valuePtr);
        goto LABEL_20;
      case kCFNumberLongLongType:
        valuePtr = 0;
        Value = CFNumberGetValue(a1, kCFNumberLongLongType, &valuePtr);
        goto LABEL_20;
      case kCFNumberFloatType:
        v5 = applesauce::CF::details::handle_case<float,signed char>(a1, kCFNumberFloatType);
        goto LABEL_26;
      case kCFNumberDoubleType:
        v5 = applesauce::CF::details::handle_case<double,signed char>(a1, kCFNumberDoubleType);
        goto LABEL_26;
      case kCFNumberCFIndexType:
        valuePtr = 0;
        Value = CFNumberGetValue(a1, kCFNumberCFIndexType, &valuePtr);
        goto LABEL_20;
      case kCFNumberNSIntegerType:
        valuePtr = 0;
        Value = CFNumberGetValue(a1, kCFNumberNSIntegerType, &valuePtr);
LABEL_20:
        v6 = Value != 0;
        if (Value)
          LOBYTE(v5) = valuePtr;
        else
          LOBYTE(v5) = 0;
        if (v6)
          return (char)v5;
        goto LABEL_27;
      case kCFNumberCGFloatType:
        v5 = applesauce::CF::details::handle_case<double,signed char>(a1, kCFNumberCGFloatType);
LABEL_26:
        if (!HIBYTE(v5))
          goto LABEL_27;
        return (char)v5;
      default:
        goto LABEL_27;
    }
  }
  v4 = CFBooleanGetTypeID();
  if (v4 != CFGetTypeID(a1))
  {
LABEL_27:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  LOBYTE(v5) = CFBooleanGetValue(a1);
  return (char)v5;
}

void sub_1B5802750(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t applesauce::CF::convert_to<signed char,0>(const __CFNumber *a1)
{
  CFTypeID TypeID;
  int Value;
  CFTypeID v4;
  __int16 v5;
  _BOOL4 v6;
  std::runtime_error *exception;
  uint64_t valuePtr;

  TypeID = CFNumberGetTypeID();
  if (TypeID == CFGetTypeID(a1))
  {
    switch(CFNumberGetType(a1))
    {
      case kCFNumberSInt8Type:
        LOBYTE(valuePtr) = 0;
        Value = CFNumberGetValue(a1, kCFNumberSInt8Type, &valuePtr);
        goto LABEL_20;
      case kCFNumberSInt16Type:
        LOWORD(valuePtr) = 0;
        Value = CFNumberGetValue(a1, kCFNumberSInt16Type, &valuePtr);
        goto LABEL_20;
      case kCFNumberSInt32Type:
        LODWORD(valuePtr) = 0;
        Value = CFNumberGetValue(a1, kCFNumberSInt32Type, &valuePtr);
        goto LABEL_20;
      case kCFNumberSInt64Type:
        valuePtr = 0;
        Value = CFNumberGetValue(a1, kCFNumberSInt64Type, &valuePtr);
        goto LABEL_20;
      case kCFNumberFloat32Type:
        v5 = applesauce::CF::details::handle_case<float,signed char>(a1, kCFNumberFloat32Type);
        goto LABEL_26;
      case kCFNumberFloat64Type:
        v5 = applesauce::CF::details::handle_case<double,signed char>(a1, kCFNumberFloat64Type);
        goto LABEL_26;
      case kCFNumberCharType:
        LOBYTE(valuePtr) = 0;
        Value = CFNumberGetValue(a1, kCFNumberCharType, &valuePtr);
        goto LABEL_20;
      case kCFNumberShortType:
        LOWORD(valuePtr) = 0;
        Value = CFNumberGetValue(a1, kCFNumberShortType, &valuePtr);
        goto LABEL_20;
      case kCFNumberIntType:
        LODWORD(valuePtr) = 0;
        Value = CFNumberGetValue(a1, kCFNumberIntType, &valuePtr);
        goto LABEL_20;
      case kCFNumberLongType:
        valuePtr = 0;
        Value = CFNumberGetValue(a1, kCFNumberLongType, &valuePtr);
        goto LABEL_20;
      case kCFNumberLongLongType:
        valuePtr = 0;
        Value = CFNumberGetValue(a1, kCFNumberLongLongType, &valuePtr);
        goto LABEL_20;
      case kCFNumberFloatType:
        v5 = applesauce::CF::details::handle_case<float,signed char>(a1, kCFNumberFloatType);
        goto LABEL_26;
      case kCFNumberDoubleType:
        v5 = applesauce::CF::details::handle_case<double,signed char>(a1, kCFNumberDoubleType);
        goto LABEL_26;
      case kCFNumberCFIndexType:
        valuePtr = 0;
        Value = CFNumberGetValue(a1, kCFNumberCFIndexType, &valuePtr);
        goto LABEL_20;
      case kCFNumberNSIntegerType:
        valuePtr = 0;
        Value = CFNumberGetValue(a1, kCFNumberNSIntegerType, &valuePtr);
LABEL_20:
        v6 = Value != 0;
        if (Value)
          LOBYTE(v5) = valuePtr;
        else
          LOBYTE(v5) = 0;
        if (v6)
          return (char)v5;
        goto LABEL_27;
      case kCFNumberCGFloatType:
        v5 = applesauce::CF::details::handle_case<double,signed char>(a1, kCFNumberCGFloatType);
LABEL_26:
        if (!HIBYTE(v5))
          goto LABEL_27;
        return (char)v5;
      default:
        goto LABEL_27;
    }
  }
  v4 = CFBooleanGetTypeID();
  if (v4 != CFGetTypeID(a1))
  {
LABEL_27:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  LOBYTE(v5) = CFBooleanGetValue(a1);
  return (char)v5;
}

void sub_1B5802990(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t applesauce::CF::convert_to<unsigned char,0>(const __CFNumber *a1)
{
  CFTypeID TypeID;
  int Value;
  CFTypeID v4;
  uint64_t result;
  _BOOL4 v6;
  std::runtime_error *exception;
  uint64_t valuePtr;

  TypeID = CFNumberGetTypeID();
  if (TypeID == CFGetTypeID(a1))
  {
    switch(CFNumberGetType(a1))
    {
      case kCFNumberSInt8Type:
        LOBYTE(valuePtr) = 0;
        Value = CFNumberGetValue(a1, kCFNumberSInt8Type, &valuePtr);
        goto LABEL_20;
      case kCFNumberSInt16Type:
        LOWORD(valuePtr) = 0;
        Value = CFNumberGetValue(a1, kCFNumberSInt16Type, &valuePtr);
        goto LABEL_20;
      case kCFNumberSInt32Type:
        LODWORD(valuePtr) = 0;
        Value = CFNumberGetValue(a1, kCFNumberSInt32Type, &valuePtr);
        goto LABEL_20;
      case kCFNumberSInt64Type:
        valuePtr = 0;
        Value = CFNumberGetValue(a1, kCFNumberSInt64Type, &valuePtr);
        goto LABEL_20;
      case kCFNumberFloat32Type:
        LOWORD(result) = applesauce::CF::details::handle_case<float,unsigned char>(a1, kCFNumberFloat32Type);
        goto LABEL_26;
      case kCFNumberFloat64Type:
        LOWORD(result) = applesauce::CF::details::handle_case<double,unsigned char>(a1, kCFNumberFloat64Type);
        goto LABEL_26;
      case kCFNumberCharType:
        LOBYTE(valuePtr) = 0;
        Value = CFNumberGetValue(a1, kCFNumberCharType, &valuePtr);
        goto LABEL_20;
      case kCFNumberShortType:
        LOWORD(valuePtr) = 0;
        Value = CFNumberGetValue(a1, kCFNumberShortType, &valuePtr);
        goto LABEL_20;
      case kCFNumberIntType:
        LODWORD(valuePtr) = 0;
        Value = CFNumberGetValue(a1, kCFNumberIntType, &valuePtr);
        goto LABEL_20;
      case kCFNumberLongType:
        valuePtr = 0;
        Value = CFNumberGetValue(a1, kCFNumberLongType, &valuePtr);
        goto LABEL_20;
      case kCFNumberLongLongType:
        valuePtr = 0;
        Value = CFNumberGetValue(a1, kCFNumberLongLongType, &valuePtr);
        goto LABEL_20;
      case kCFNumberFloatType:
        LOWORD(result) = applesauce::CF::details::handle_case<float,unsigned char>(a1, kCFNumberFloatType);
        goto LABEL_26;
      case kCFNumberDoubleType:
        LOWORD(result) = applesauce::CF::details::handle_case<double,unsigned char>(a1, kCFNumberDoubleType);
        goto LABEL_26;
      case kCFNumberCFIndexType:
        valuePtr = 0;
        Value = CFNumberGetValue(a1, kCFNumberCFIndexType, &valuePtr);
        goto LABEL_20;
      case kCFNumberNSIntegerType:
        valuePtr = 0;
        Value = CFNumberGetValue(a1, kCFNumberNSIntegerType, &valuePtr);
LABEL_20:
        v6 = Value != 0;
        if (Value)
          LOBYTE(result) = valuePtr;
        else
          LOBYTE(result) = 0;
        if (v6)
          return result;
        goto LABEL_27;
      case kCFNumberCGFloatType:
        LOWORD(result) = applesauce::CF::details::handle_case<double,unsigned char>(a1, kCFNumberCGFloatType);
LABEL_26:
        if (!BYTE1(result))
          goto LABEL_27;
        return result;
      default:
        goto LABEL_27;
    }
  }
  v4 = CFBooleanGetTypeID();
  if (v4 != CFGetTypeID(a1))
  {
LABEL_27:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  LOBYTE(result) = CFBooleanGetValue(a1);
  return result;
}

void sub_1B5802BD0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double AMCP::Implementation::create_number_from<applesauce::CF::NumberRef,unsigned short>(uint64_t a1, const __CFNumber **a2)
{
  __int16 v3;
  double result;
  std::runtime_error *exception;

  if (!a2)
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v3 = applesauce::CF::convert_to<unsigned short,0>(*a2);
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_WORD *)a1 = v3;
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<unsigned short>::dispatch;
  return result;
}

void sub_1B5802C78(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double AMCP::Implementation::create_number_from<applesauce::CF::NumberRef,int>(uint64_t a1, const __CFNumber **a2)
{
  int v3;
  double result;
  std::runtime_error *exception;

  if (!a2)
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v3 = applesauce::CF::convert_to<int,0>(*a2);
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)a1 = v3;
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<int>::dispatch;
  return result;
}

void sub_1B5802D18(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double AMCP::Implementation::create_number_from<applesauce::CF::NumberRef,unsigned int>(uint64_t a1, const __CFNumber **a2)
{
  int v3;
  double result;
  std::runtime_error *exception;

  if (!a2)
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v3 = applesauce::CF::convert_to<unsigned int,0>(*a2);
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)a1 = v3;
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<unsigned int>::dispatch;
  return result;
}

void sub_1B5802DB8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t AMCP::Implementation::create_number_from<applesauce::CF::NumberRef,long>(unint64_t *a1, const __CFNumber **a2)
{
  unint64_t result;
  std::runtime_error *exception;

  if (!a2)
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  result = applesauce::CF::convert_to<long,0>(*a2);
  a1[2] = 0;
  a1[3] = 0;
  *a1 = result;
  a1[1] = 0;
  a1[4] = (unint64_t)AMCP::Implementation::In_Place_Storage<long>::dispatch;
  return result;
}

void sub_1B5802E54(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t AMCP::Implementation::create_number_from<applesauce::CF::NumberRef,unsigned long>(unint64_t *a1, const __CFNumber **a2)
{
  unint64_t result;
  std::runtime_error *exception;

  if (!a2)
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  result = applesauce::CF::convert_to<unsigned long,0>(*a2);
  a1[2] = 0;
  a1[3] = 0;
  *a1 = result;
  a1[1] = 0;
  a1[4] = (unint64_t)AMCP::Implementation::In_Place_Storage<unsigned long>::dispatch;
  return result;
}

void sub_1B5802EF0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t AMCP::Implementation::create_number_from<applesauce::CF::NumberRef,long long>(unint64_t *a1, const __CFNumber **a2)
{
  unint64_t result;
  std::runtime_error *exception;

  if (!a2)
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  result = applesauce::CF::convert_to<long long,0>(*a2);
  a1[2] = 0;
  a1[3] = 0;
  *a1 = result;
  a1[1] = 0;
  a1[4] = (unint64_t)AMCP::Implementation::In_Place_Storage<long long>::dispatch;
  return result;
}

void sub_1B5802F8C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t AMCP::Implementation::create_number_from<applesauce::CF::NumberRef,unsigned long long>(unint64_t *a1, const __CFNumber **a2)
{
  unint64_t result;
  std::runtime_error *exception;

  if (!a2)
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  result = applesauce::CF::convert_to<unsigned long long,0>(*a2);
  a1[2] = 0;
  a1[3] = 0;
  *a1 = result;
  a1[1] = 0;
  a1[4] = (unint64_t)AMCP::Implementation::In_Place_Storage<unsigned long long>::dispatch;
  return result;
}

void sub_1B5803028(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void AMCP::Implementation::create_number_from<applesauce::CF::NumberRef,float>(uint64_t a1, const __CFNumber **a2)
{
  float v3;
  std::runtime_error *exception;

  if (!a2)
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v3 = applesauce::CF::convert_to<float,0>(*a2);
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(float *)a1 = v3;
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<float>::dispatch;
}

void sub_1B58030C8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void AMCP::Implementation::create_number_from<applesauce::CF::NumberRef,double>(uint64_t a1, const __CFNumber **a2)
{
  double v3;
  std::runtime_error *exception;

  if (!a2)
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v3 = applesauce::CF::convert_to<double,0>(*a2);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(double *)a1 = v3;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<double>::dispatch;
}

void sub_1B5803164(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void AMCP::Implementation::create_number_from<applesauce::CF::NumberRef,long double>(uint64_t a1, const __CFNumber **a2)
{
  double v3;
  std::runtime_error *exception;

  if (!a2)
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v3 = applesauce::CF::convert_to<double,0>(*a2);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(double *)a1 = v3;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<long double>::dispatch;
}

void sub_1B5803200(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double AMCP::Implementation::create_number_from<applesauce::CF::NumberRef,AMCP::Direction>(uint64_t a1, const __CFNumber **a2)
{
  _BOOL4 v3;
  double result;
  std::runtime_error *exception;

  if (!a2)
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v3 = applesauce::CF::convert_to<BOOL,0>(*a2);
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)a1 = v3;
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<AMCP::Direction>::dispatch;
  return result;
}

void sub_1B58032A0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL AMCP::Implementation::create_number_from<applesauce::CF::NumberRef,applesauce::CF::BooleanRef>(_QWORD *a1, const __CFNumber **a2)
{
  _BOOL8 result;
  uint64_t *v4;
  uint64_t v5;
  std::runtime_error *exception;

  if (!a2)
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  result = applesauce::CF::convert_to<BOOL,0>(*a2);
  v4 = (uint64_t *)MEMORY[0x1E0C9AE58];
  if (!result)
    v4 = (uint64_t *)MEMORY[0x1E0C9AE48];
  v5 = *v4;
  a1[2] = 0;
  a1[3] = 0;
  *a1 = v5;
  a1[1] = 0;
  a1[4] = AMCP::Implementation::In_Place_Storage<applesauce::CF::BooleanRef>::dispatch;
  return result;
}

void sub_1B5803358(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::create_number_from<applesauce::CF::NumberRef,applesauce::CF::NumberRef>(uint64_t a1, CFTypeRef *a2)
{
  if (!a2)
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return AMCP::Implementation::In_Place_Storage<applesauce::CF::NumberRef>::construct<applesauce::CF::NumberRef const&>(a1, a2);
}

BOOL AMCP::Implementation::In_Place_Storage<applesauce::CF::BooleanRef>::dispatch(_BOOL8 result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  CFBooleanRef v9;
  void (*v10)(uint64_t, uint64_t, _QWORD, CFTypeRef *);
  CFBooleanRef *v11;
  CFTypeRef *v12;
  CFBooleanRef v13;
  const __CFBoolean *v14;
  unsigned int Value;
  _BOOL8 v16;
  uint64_t v17;
  _BOOL4 v18;
  AMCP::Thing *v19;
  AMCP::Thing *v20;
  const __CFBoolean **v21;
  BOOL v22;
  uint64_t (*v23)();
  BOOL v24;
  BOOL v25;
  int v26;
  CFBooleanRef *v27;
  CFBooleanRef v28;
  unsigned int v29;
  int v30;
  BOOL v31;
  __int16 v32;
  std::runtime_error *exception;
  CFTypeRef cf[2];
  __int128 v35;
  void (*v36)(_QWORD, CFTypeRef *, _QWORD, _QWORD);
  CFBooleanRef BOOLean[2];
  __int128 v38;
  uint64_t (*v39)();

  switch(result)
  {
    case 0:
      goto LABEL_7;
    case 1:
      AMCP::Implementation::In_Place_Storage<applesauce::CF::BooleanRef>::construct<applesauce::CF::BooleanRef const&>(a3, (CFTypeRef *)a2);
      return 0;
    case 2:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_QWORD *)a3 = *(_QWORD *)a2;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<applesauce::CF::BooleanRef>::dispatch;
LABEL_7:
      AMCP::Implementation::In_Place_Storage<applesauce::CF::BooleanRef>::destruct(a2);
      return 0;
    case 3:
      v7 = AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>();
      result = 0;
      *a4 = v7;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>())
        return a2;
      else
        return 0;
    case 5:
      v8 = AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>();
      v9 = *(CFBooleanRef *)(a2 + 32);
      BOOLean[0] = 0;
      if (v9)
      {
        ((void (*)(uint64_t, uint64_t, _QWORD, CFBooleanRef *))v9)(3, a2, 0, BOOLean);
        v9 = BOOLean[0];
      }
      if (v9 != (CFBooleanRef)v8)
        goto LABEL_28;
      v10 = *(void (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(a3 + 32);
      cf[0] = 0;
      if (v10)
      {
        v10(3, a3, 0, cf);
        v10 = (void (*)(uint64_t, uint64_t, _QWORD, CFTypeRef *))cf[0];
      }
      if (v10 != (void (*)(uint64_t, uint64_t, _QWORD, CFTypeRef *))v8)
      {
LABEL_28:
        AMCP::Thing::convert_to<applesauce::CF::BooleanRef>(BOOLean, a2);
        AMCP::Thing::convert_to<applesauce::CF::BooleanRef>(cf, a3);
        v13 = BOOLean[0];
        v14 = (const __CFBoolean *)cf[0];
        if (BOOLean[0])
        {
          if (!cf[0])
          {
            v18 = 0;
LABEL_74:
            CFRelease(v13);
            return v18;
          }
          Value = CFBooleanGetValue(BOOLean[0]);
          if (Value >= CFBooleanGetValue(v14))
          {
            v26 = CFBooleanGetValue(v13);
            v16 = v26 != CFBooleanGetValue(v14);
          }
          else
          {
            v16 = 1;
          }
          v18 = !v16;
        }
        else
        {
          if (cf[0])
            v17 = -1;
          else
            v17 = 0;
          v18 = cf[0] == 0;
          if (!cf[0])
            return !v17;
        }
        CFRelease(v14);
        if (!v13)
          return v18;
        goto LABEL_74;
      }
      if (*(_QWORD *)(a2 + 32))
      {
        BOOLean[0] = (CFBooleanRef)AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>();
        v11 = (CFBooleanRef *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, CFBooleanRef *))(a2 + 32))(4, a2, 0, BOOLean);
      }
      else
      {
        v11 = 0;
      }
      if (*(_QWORD *)(a3 + 32))
      {
        BOOLean[0] = (CFBooleanRef)AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>();
        v27 = (CFBooleanRef *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, CFBooleanRef *))(a3 + 32))(4, a3, 0, BOOLean);
      }
      else
      {
        v27 = 0;
      }
      v28 = *v27;
      if (!*v11)
      {
        if (v28)
          v17 = -1;
        else
          v17 = 0;
        return !v17;
      }
      if (v28)
      {
        v29 = CFBooleanGetValue(*v11);
        if (v29 >= CFBooleanGetValue(*v27))
        {
          v30 = CFBooleanGetValue(*v11);
          v17 = v30 != CFBooleanGetValue(*v27);
          return !v17;
        }
      }
      return 0;
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<mcp_applesauce::CF::PropertyListRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::StringRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DataRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DateRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>()
        || *a4 != AMCP::Implementation::get_type_marker<mcp_applesauce::CF::PropertyListRef>())
      {
        goto LABEL_52;
      }
      if (*(_QWORD *)(a2 + 32))
      {
        BOOLean[0] = (CFBooleanRef)AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>();
        v12 = (CFTypeRef *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, CFBooleanRef *))(a2 + 32))(4, a2, 0, BOOLean);
      }
      else
      {
        v12 = 0;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<mcp_applesauce::CF::PropertyListRef>())
      {
        if (v12)
        {
          mcp_applesauce::CF::PropertyListRef::from_get((mcp_applesauce::CF::PropertyListRef *)BOOLean, *v12);
          v36 = 0;
          *(_OWORD *)cf = 0u;
          v35 = 0u;
          AMCP::Implementation::In_Place_Storage<mcp_applesauce::CF::PropertyListRef>::construct<mcp_applesauce::CF::PropertyListRef&>((uint64_t)cf, (CFTypeRef *)BOOLean);
          if (BOOLean[0])
            CFRelease(BOOLean[0]);
          if (v36)
            goto LABEL_130;
          goto LABEL_53;
        }
      }
      else if (*a4 != AMCP::Implementation::get_type_marker<applesauce::CF::StringRef>()
             && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DataRef>()
             && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>()
             && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>()
             && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DateRef>()
             && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>()
             && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>()
             || v12)
      {
LABEL_52:
        v36 = 0;
        *(_OWORD *)cf = 0u;
        v35 = 0u;
        if (*a4 != AMCP::Implementation::get_type_marker<BOOL>()
          && !AMCP::is_one_of<char,signed char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double,long double,AMCP::Direction,applesauce::CF::BooleanRef,applesauce::CF::NumberRef>(a4))
        {
          goto LABEL_127;
        }
LABEL_53:
        if (*(_QWORD *)(a2 + 32))
        {
          BOOLean[0] = (CFBooleanRef)AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>();
          v21 = (const __CFBoolean **)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, CFBooleanRef *))(a2 + 32))(4, a2, 0, BOOLean);
        }
        else
        {
          v21 = 0;
        }
        if (*a4 == AMCP::Implementation::get_type_marker<BOOL>())
        {
          if (v21)
          {
            if (*v21)
            {
              v22 = applesauce::CF::convert_to<BOOL,0>(*v21);
              *(_OWORD *)BOOLean = 0u;
              v38 = 0u;
              LOBYTE(BOOLean[0]) = v22;
              v23 = AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
LABEL_98:
              v39 = v23;
              goto LABEL_128;
            }
            goto LABEL_134;
          }
          goto LABEL_113;
        }
        if (*a4 == AMCP::Implementation::get_type_marker<char>())
        {
          if (v21)
          {
            if (*v21)
            {
              v24 = applesauce::CF::convert_to<BOOL,0>(*v21);
              *(_OWORD *)BOOLean = 0u;
              v38 = 0u;
              LOBYTE(BOOLean[0]) = v24;
              v23 = AMCP::Implementation::In_Place_Storage<char>::dispatch;
              goto LABEL_98;
            }
LABEL_134:
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Could not construct");
            __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
LABEL_113:
          __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
        }
        if (*a4 == AMCP::Implementation::get_type_marker<signed char>())
        {
          if (v21)
          {
            if (*v21)
            {
              v25 = applesauce::CF::convert_to<BOOL,0>(*v21);
              *(_OWORD *)BOOLean = 0u;
              v38 = 0u;
              LOBYTE(BOOLean[0]) = v25;
              v23 = AMCP::Implementation::In_Place_Storage<signed char>::dispatch;
              goto LABEL_98;
            }
            goto LABEL_134;
          }
          goto LABEL_113;
        }
        if (*a4 == AMCP::Implementation::get_type_marker<unsigned char>())
        {
          if (v21)
          {
            if (*v21)
            {
              v31 = applesauce::CF::convert_to<BOOL,0>(*v21);
              *(_OWORD *)BOOLean = 0u;
              v38 = 0u;
              LOBYTE(BOOLean[0]) = v31;
              v23 = AMCP::Implementation::In_Place_Storage<unsigned char>::dispatch;
              goto LABEL_98;
            }
            goto LABEL_134;
          }
          goto LABEL_113;
        }
        if (*a4 == AMCP::Implementation::get_type_marker<short>())
        {
          if (v21)
          {
            if (*v21)
            {
              v32 = applesauce::CF::convert_to<BOOL,0>(*v21);
              *(_OWORD *)BOOLean = 0u;
              v38 = 0u;
              LOWORD(BOOLean[0]) = v32;
              v23 = AMCP::Implementation::In_Place_Storage<short>::dispatch;
              goto LABEL_98;
            }
            goto LABEL_134;
          }
          goto LABEL_113;
        }
        if (*a4 == AMCP::Implementation::get_type_marker<unsigned short>())
        {
          AMCP::Implementation::create_number_from<applesauce::CF::BooleanRef,unsigned short>((uint64_t)BOOLean, v21);
          goto LABEL_128;
        }
        if (*a4 == AMCP::Implementation::get_type_marker<int>())
        {
          AMCP::Implementation::create_number_from<applesauce::CF::BooleanRef,int>((uint64_t)BOOLean, v21);
          goto LABEL_128;
        }
        if (*a4 == AMCP::Implementation::get_type_marker<unsigned int>())
        {
          AMCP::Implementation::create_number_from<applesauce::CF::BooleanRef,unsigned int>((uint64_t)BOOLean, v21);
          goto LABEL_128;
        }
        if (*a4 == AMCP::Implementation::get_type_marker<long>())
        {
          AMCP::Implementation::create_number_from<applesauce::CF::BooleanRef,long>((_BOOL8 *)BOOLean, v21);
          goto LABEL_128;
        }
        if (*a4 == AMCP::Implementation::get_type_marker<unsigned long>())
        {
          AMCP::Implementation::create_number_from<applesauce::CF::BooleanRef,unsigned long>((_BOOL8 *)BOOLean, v21);
          goto LABEL_128;
        }
        if (*a4 == AMCP::Implementation::get_type_marker<long long>())
        {
          AMCP::Implementation::create_number_from<applesauce::CF::BooleanRef,long long>((_BOOL8 *)BOOLean, v21);
          goto LABEL_128;
        }
        if (*a4 == AMCP::Implementation::get_type_marker<unsigned long long>())
        {
          AMCP::Implementation::create_number_from<applesauce::CF::BooleanRef,unsigned long long>((_BOOL8 *)BOOLean, v21);
          goto LABEL_128;
        }
        if (*a4 == AMCP::Implementation::get_type_marker<float>())
        {
          AMCP::Implementation::create_number_from<applesauce::CF::BooleanRef,float>((uint64_t)BOOLean, v21);
          goto LABEL_128;
        }
        if (*a4 == AMCP::Implementation::get_type_marker<double>())
        {
          AMCP::Implementation::create_number_from<applesauce::CF::BooleanRef,double>((uint64_t)BOOLean, v21);
          goto LABEL_128;
        }
        if (*a4 == AMCP::Implementation::get_type_marker<long double>())
        {
          AMCP::Implementation::create_number_from<applesauce::CF::BooleanRef,long double>((uint64_t)BOOLean, v21);
          goto LABEL_128;
        }
        if (*a4 == AMCP::Implementation::get_type_marker<AMCP::Direction>())
        {
          AMCP::Implementation::create_number_from<applesauce::CF::BooleanRef,AMCP::Direction>((uint64_t)BOOLean, v21);
          goto LABEL_128;
        }
        if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>())
        {
          AMCP::Implementation::create_number_from<applesauce::CF::BooleanRef,applesauce::CF::BooleanRef>((uint64_t)BOOLean, (CFTypeRef *)v21);
          goto LABEL_128;
        }
        if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>())
        {
          AMCP::Implementation::create_number_from<applesauce::CF::BooleanRef,applesauce::CF::NumberRef>(BOOLean, v21);
        }
        else
        {
LABEL_127:
          v39 = 0;
          *(_OWORD *)BOOLean = 0u;
          v38 = 0u;
        }
LABEL_128:
        AMCP::swap((AMCP::Thing *)BOOLean, (AMCP::Thing *)cf, v20);
        if (v39)
          ((void (*)(_QWORD, CFBooleanRef *, _QWORD, _QWORD))v39)(0, BOOLean, 0, 0);
LABEL_130:
        AMCP::swap((AMCP::Thing *)cf, (AMCP::Thing *)a3, v19);
        if (v36)
          v36(0, cf, 0, 0);
        return 0;
      }
      __assert_rtn("create_cf_plist_from", "Thing.h", 2434, "in_value_ptr != nullptr");
    default:
      return result;
  }
}

void sub_1B5803C24(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  void *v15;

  __cxa_free_exception(v15);
  __clang_call_terminate(a1);
}

double AMCP::Implementation::In_Place_Storage<applesauce::CF::BooleanRef>::destruct(uint64_t a1)
{
  const void *v2;
  double result;

  v2 = *(const void **)a1;
  if (v2)
    CFRelease(v2);
  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t AMCP::Implementation::In_Place_Storage<applesauce::CF::BooleanRef>::construct<applesauce::CF::BooleanRef const&>(uint64_t a1, CFTypeRef *a2)
{
  CFTypeRef v3;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v3 = *a2;
  if (*a2)
    CFRetain(*a2);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<applesauce::CF::BooleanRef>::dispatch;
  return a1;
}

CFTypeRef *AMCP::Thing::convert_to<applesauce::CF::BooleanRef>(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, _QWORD, _QWORD);
  CFTypeRef *result;
  CFTypeRef v7;
  CFTypeRef v8;
  std::bad_cast *exception;
  std::bad_cast *v10;
  std::bad_cast *v11;
  std::bad_cast *v12;
  std::bad_cast *v13;
  std::bad_cast *v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[2];
  uint64_t (*v18)(uint64_t, _OWORD *, _QWORD, uint64_t *);
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, _QWORD, _QWORD);

  if (!*(_QWORD *)(a2 + 32))
    goto LABEL_16;
  v4 = AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>();
  v5 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a2 + 32);
  v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))v4)
  {
    v19 = v4;
    result = (CFTypeRef *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (result)
    {
      v7 = *result;
      if (*result)
        result = (CFTypeRef *)CFRetain(*result);
      *a1 = v7;
      return result;
    }
LABEL_16:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v16 = AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>();
  memset(v17, 0, sizeof(v17));
  v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v15 = v4;
  result = (CFTypeRef *)v18(4, v17, 0, &v15);
  if (!result)
  {
    v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v8 = *result;
  if (*result)
    result = (CFTypeRef *)CFRetain(*result);
  *a1 = v8;
  if (v18)
    return (CFTypeRef *)v18(0, v17, 0, 0);
  return result;
}

void sub_1B5803EC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

double AMCP::Implementation::create_number_from<applesauce::CF::BooleanRef,unsigned short>(uint64_t a1, const __CFBoolean **a2)
{
  __int16 v3;
  double result;
  std::runtime_error *exception;

  if (!a2)
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v3 = applesauce::CF::convert_to<BOOL,0>(*a2);
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_WORD *)a1 = v3;
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<unsigned short>::dispatch;
  return result;
}

void sub_1B5803F74(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double AMCP::Implementation::create_number_from<applesauce::CF::BooleanRef,int>(uint64_t a1, const __CFBoolean **a2)
{
  _BOOL4 v3;
  double result;
  std::runtime_error *exception;

  if (!a2)
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v3 = applesauce::CF::convert_to<BOOL,0>(*a2);
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)a1 = v3;
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<int>::dispatch;
  return result;
}

void sub_1B5804014(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double AMCP::Implementation::create_number_from<applesauce::CF::BooleanRef,unsigned int>(uint64_t a1, const __CFBoolean **a2)
{
  _BOOL4 v3;
  double result;
  std::runtime_error *exception;

  if (!a2)
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v3 = applesauce::CF::convert_to<BOOL,0>(*a2);
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)a1 = v3;
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<unsigned int>::dispatch;
  return result;
}

void sub_1B58040B4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL AMCP::Implementation::create_number_from<applesauce::CF::BooleanRef,long>(_BOOL8 *a1, const __CFBoolean **a2)
{
  _BOOL8 result;
  std::runtime_error *exception;

  if (!a2)
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  result = applesauce::CF::convert_to<BOOL,0>(*a2);
  a1[2] = 0;
  a1[3] = 0;
  *a1 = result;
  a1[1] = 0;
  a1[4] = (_BOOL8)AMCP::Implementation::In_Place_Storage<long>::dispatch;
  return result;
}

void sub_1B5804154(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL AMCP::Implementation::create_number_from<applesauce::CF::BooleanRef,unsigned long>(_BOOL8 *a1, const __CFBoolean **a2)
{
  _BOOL8 result;
  std::runtime_error *exception;

  if (!a2)
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  result = applesauce::CF::convert_to<BOOL,0>(*a2);
  a1[2] = 0;
  a1[3] = 0;
  *a1 = result;
  a1[1] = 0;
  a1[4] = (_BOOL8)AMCP::Implementation::In_Place_Storage<unsigned long>::dispatch;
  return result;
}

void sub_1B58041F4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL AMCP::Implementation::create_number_from<applesauce::CF::BooleanRef,long long>(_BOOL8 *a1, const __CFBoolean **a2)
{
  _BOOL8 result;
  std::runtime_error *exception;

  if (!a2)
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  result = applesauce::CF::convert_to<BOOL,0>(*a2);
  a1[2] = 0;
  a1[3] = 0;
  *a1 = result;
  a1[1] = 0;
  a1[4] = (_BOOL8)AMCP::Implementation::In_Place_Storage<long long>::dispatch;
  return result;
}

void sub_1B5804294(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL AMCP::Implementation::create_number_from<applesauce::CF::BooleanRef,unsigned long long>(_BOOL8 *a1, const __CFBoolean **a2)
{
  _BOOL8 result;
  std::runtime_error *exception;

  if (!a2)
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  result = applesauce::CF::convert_to<BOOL,0>(*a2);
  a1[2] = 0;
  a1[3] = 0;
  *a1 = result;
  a1[1] = 0;
  a1[4] = (_BOOL8)AMCP::Implementation::In_Place_Storage<unsigned long long>::dispatch;
  return result;
}

void sub_1B5804334(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

float AMCP::Implementation::create_number_from<applesauce::CF::BooleanRef,float>(uint64_t a1, const __CFBoolean **a2)
{
  float result;
  std::runtime_error *exception;

  if (!a2)
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  result = (float)applesauce::CF::convert_to<BOOL,0>(*a2);
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(float *)a1 = result;
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<float>::dispatch;
  return result;
}

void sub_1B58043D8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double AMCP::Implementation::create_number_from<applesauce::CF::BooleanRef,double>(uint64_t a1, const __CFBoolean **a2)
{
  double result;
  std::runtime_error *exception;

  if (!a2)
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  result = (double)applesauce::CF::convert_to<BOOL,0>(*a2);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(double *)a1 = result;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<double>::dispatch;
  return result;
}

void sub_1B5804478(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double AMCP::Implementation::create_number_from<applesauce::CF::BooleanRef,long double>(uint64_t a1, const __CFBoolean **a2)
{
  double result;
  std::runtime_error *exception;

  if (!a2)
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  result = (double)applesauce::CF::convert_to<BOOL,0>(*a2);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(double *)a1 = result;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<long double>::dispatch;
  return result;
}

void sub_1B5804518(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double AMCP::Implementation::create_number_from<applesauce::CF::BooleanRef,AMCP::Direction>(uint64_t a1, const __CFBoolean **a2)
{
  _BOOL4 v3;
  double result;
  std::runtime_error *exception;

  if (!a2)
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v3 = applesauce::CF::convert_to<BOOL,0>(*a2);
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)a1 = v3;
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<AMCP::Direction>::dispatch;
  return result;
}

void sub_1B58045B8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::create_number_from<applesauce::CF::BooleanRef,applesauce::CF::BooleanRef>(uint64_t a1, CFTypeRef *a2)
{
  if (!a2)
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return AMCP::Implementation::In_Place_Storage<applesauce::CF::BooleanRef>::construct<applesauce::CF::BooleanRef const&>(a1, a2);
}

CFNumberRef AMCP::Implementation::create_number_from<applesauce::CF::BooleanRef,applesauce::CF::NumberRef>(CFNumberRef *a1, const __CFBoolean **a2)
{
  CFNumberRef result;
  std::runtime_error *exception;
  BOOL valuePtr;

  if (!a2)
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    goto LABEL_8;
  }
  valuePtr = applesauce::CF::convert_to<BOOL,0>(*a2);
  result = CFNumberCreate(0, kCFNumberCharType, &valuePtr);
  if (!result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
LABEL_8:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  a1[2] = 0;
  a1[3] = 0;
  *a1 = result;
  a1[1] = 0;
  a1[4] = (CFNumberRef)AMCP::Implementation::In_Place_Storage<applesauce::CF::NumberRef>::dispatch;
  return result;
}

void sub_1B58046D0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL AMCP::Implementation::In_Place_Storage<long double>::dispatch(_BOOL8 result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  __int128 v7;
  uint64_t type;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, _QWORD, __int128 *);
  void (*v11)(uint64_t, uint64_t, _QWORD, _QWORD);
  double *v12;
  AMCP::Thing *v13;
  double *v14;
  double v15;
  BOOL v16;
  BOOL (*v17)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  float v28;
  double v29;
  _BOOL4 v30;
  __int128 v31;
  __int128 v32;
  BOOL (*v33)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  void (*v34)(uint64_t, uint64_t, _QWORD, _QWORD);

  switch(result)
  {
    case 0:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      v7 = 0uLL;
      goto LABEL_7;
    case 1:
      result = 0;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_QWORD *)a3 = *(_QWORD *)a2;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<long double>::dispatch;
      return result;
    case 2:
      result = 0;
      v7 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_QWORD *)a3 = *(_QWORD *)a2;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<long double>::dispatch;
      *(_QWORD *)(a2 + 32) = 0;
LABEL_7:
      *(_OWORD *)a2 = v7;
      *(_OWORD *)(a2 + 16) = v7;
      return result;
    case 3:
      type = AMCP::Implementation::get_type_marker<long double>();
      result = 0;
      *a4 = type;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<long double>())
        return a2;
      else
        return 0;
    case 5:
      v9 = AMCP::Implementation::get_type_marker<long double>();
      v10 = *(void (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32);
      *(_QWORD *)&v31 = 0;
      if (v10)
      {
        v10(3, a2, 0, &v31);
        v10 = (void (*)(uint64_t, uint64_t, _QWORD, __int128 *))v31;
      }
      if (v10 != (void (*)(uint64_t, uint64_t, _QWORD, __int128 *))v9)
        goto LABEL_22;
      v11 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a3 + 32);
      v34 = 0;
      if (v11)
      {
        v11(3, a3, 0, &v34);
        v11 = v34;
      }
      if (v11 != (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))v9)
      {
LABEL_22:
        v15 = AMCP::Thing::convert_to<long double>(a2);
        return v15 == AMCP::Thing::convert_to<long double>(a3);
      }
      if (*(_QWORD *)(a2 + 32))
      {
        *(_QWORD *)&v31 = AMCP::Implementation::get_type_marker<long double>();
        v12 = (double *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32))(4, a2, 0, &v31);
      }
      else
      {
        v12 = 0;
      }
      *(_QWORD *)&v31 = AMCP::Implementation::get_type_marker<long double>();
      return *v12 == *(double *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a3 + 32))(4, a3, 0, &v31);
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<BOOL>()
        && !AMCP::is_one_of<char,signed char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double,long double,AMCP::Direction,applesauce::CF::BooleanRef,applesauce::CF::NumberRef>(a4))
      {
        goto LABEL_81;
      }
      if (*(_QWORD *)(a2 + 32))
      {
        *(_QWORD *)&v31 = AMCP::Implementation::get_type_marker<long double>();
        v14 = (double *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32))(4, a2, 0, &v31);
      }
      else
      {
        v14 = 0;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<BOOL>())
      {
        if (v14)
        {
          v16 = *v14 != 0.0;
          v31 = 0u;
          v32 = 0u;
          LOBYTE(v31) = v16;
          v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
LABEL_43:
          v33 = v17;
          goto LABEL_82;
        }
        goto LABEL_76;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<char>())
      {
        if (v14)
        {
          v18 = (int)*v14;
          v31 = 0u;
          v32 = 0u;
          LOBYTE(v31) = v18;
          v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<char>::dispatch;
          goto LABEL_43;
        }
LABEL_76:
        __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
      }
      if (*a4 == AMCP::Implementation::get_type_marker<signed char>())
      {
        if (v14)
        {
          v19 = (int)*v14;
          v31 = 0u;
          v32 = 0u;
          LOBYTE(v31) = v19;
          v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<signed char>::dispatch;
          goto LABEL_43;
        }
        goto LABEL_76;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<unsigned char>())
      {
        if (v14)
        {
          v20 = (int)*v14;
          v31 = 0u;
          v32 = 0u;
          LOBYTE(v31) = v20;
          v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<unsigned char>::dispatch;
          goto LABEL_43;
        }
        goto LABEL_76;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<short>())
      {
        if (v14)
        {
          v21 = (int)*v14;
          v31 = 0u;
          v32 = 0u;
          LOWORD(v31) = v21;
          v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<short>::dispatch;
          goto LABEL_43;
        }
        goto LABEL_76;
      }
      if (*a4 != AMCP::Implementation::get_type_marker<unsigned short>())
      {
        if (*a4 == AMCP::Implementation::get_type_marker<int>())
        {
          if (v14)
          {
            v22 = (int)*v14;
            v31 = 0u;
            v32 = 0u;
            LODWORD(v31) = v22;
            v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<int>::dispatch;
            goto LABEL_43;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned int>())
        {
          if (v14)
          {
            v23 = *v14;
            v31 = 0u;
            v32 = 0u;
            LODWORD(v31) = v23;
            v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<unsigned int>::dispatch;
            goto LABEL_43;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<long>())
        {
          if (v14)
          {
            v24 = (uint64_t)*v14;
            v32 = 0uLL;
            v31 = (unint64_t)v24;
            v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<long>::dispatch;
            goto LABEL_43;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned long>())
        {
          if (v14)
          {
            v25 = (unint64_t)*v14;
            v32 = 0uLL;
            v31 = v25;
            v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<unsigned long>::dispatch;
            goto LABEL_43;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<long long>())
        {
          if (v14)
          {
            v26 = (uint64_t)*v14;
            v32 = 0uLL;
            v31 = (unint64_t)v26;
            v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<long long>::dispatch;
            goto LABEL_43;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned long long>())
        {
          if (v14)
          {
            v27 = (unint64_t)*v14;
            v32 = 0uLL;
            v31 = v27;
            v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<unsigned long long>::dispatch;
            goto LABEL_43;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<float>())
        {
          if (v14)
          {
            v28 = *v14;
            v31 = 0u;
            v32 = 0u;
            *(float *)&v31 = v28;
            v17 = AMCP::Implementation::In_Place_Storage<float>::dispatch;
            goto LABEL_43;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<double>())
        {
          if (v14)
          {
            v29 = *v14;
            v32 = 0uLL;
            v31 = *(unint64_t *)&v29;
            v17 = AMCP::Implementation::In_Place_Storage<double>::dispatch;
            goto LABEL_43;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<long double>())
        {
          if (v14)
          {
            *((_QWORD *)&v31 + 1) = 0;
            v32 = 0uLL;
            *(double *)&v31 = *v14;
            v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<long double>::dispatch;
            goto LABEL_43;
          }
        }
        else
        {
          if (*a4 != AMCP::Implementation::get_type_marker<AMCP::Direction>())
          {
            if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>())
            {
              AMCP::Implementation::create_number_from<long double,applesauce::CF::BooleanRef>(&v31, v14);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>())
            {
              AMCP::Implementation::create_number_from<long double,applesauce::CF::NumberRef>((CFNumberRef *)&v31, (uint64_t *)v14);
            }
            else
            {
LABEL_81:
              v33 = 0;
              v31 = 0u;
              v32 = 0u;
            }
            goto LABEL_82;
          }
          if (v14)
          {
            v30 = *v14 != 0.0;
            v31 = 0u;
            v32 = 0u;
            LODWORD(v31) = v30;
            v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<AMCP::Direction>::dispatch;
            goto LABEL_43;
          }
        }
        goto LABEL_76;
      }
      AMCP::Implementation::create_number_from<long double,unsigned short>((uint64_t)&v31, v14);
LABEL_82:
      AMCP::swap((AMCP::Thing *)&v31, (AMCP::Thing *)a3, v13);
      if (v33)
        v33(0, (uint64_t)&v31, 0, 0);
      return 0;
    default:
      return result;
  }
}

void sub_1B5804CE4(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5804CB0);
}

double AMCP::Thing::convert_to<long double>(uint64_t a1)
{
  uint64_t type;
  void (*v3)(uint64_t, uint64_t, _QWORD, _QWORD);
  _QWORD *v4;
  double v5;
  double *v6;
  std::bad_cast *exception;
  std::bad_cast *v9;
  std::bad_cast *v10;
  std::bad_cast *v11;
  std::bad_cast *v12;
  std::bad_cast *v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t (*v17)(uint64_t, _OWORD *, _QWORD, uint64_t *);
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, _QWORD, _QWORD);

  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_12;
  type = AMCP::Implementation::get_type_marker<long double>();
  v3 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a1 + 32);
  v19 = 0;
  if (v3)
  {
    v3(3, a1, 0, &v19);
    v3 = v19;
  }
  if (v3 == (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))type)
  {
    v18 = type;
    v4 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a1 + 32))(4, a1, 0, &v18);
    if (v4)
      return *(double *)v4;
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v9 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v9, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v15 = AMCP::Implementation::get_type_marker<long double>();
  memset(v16, 0, sizeof(v16));
  v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a1 + 32))(6, a1, v16, &v15);
  if (!v17)
  {
    v10 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v11 = std::bad_cast::bad_cast(v10);
    __cxa_throw(v11, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v14 = type;
  v6 = (double *)v17(4, v16, 0, &v14);
  if (!v6)
  {
    v12 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v13 = std::bad_cast::bad_cast(v12);
    __cxa_throw(v13, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v5 = *v6;
  if (v17)
    v17(0, v16, 0, 0);
  return v5;
}

void sub_1B5804E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

double AMCP::Implementation::create_number_from<long double,unsigned short>(uint64_t a1, double *a2)
{
  int v2;
  double result;

  if (!a2)
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  v2 = (int)*a2;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_WORD *)a1 = v2;
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<unsigned short>::dispatch;
  return result;
}

BOOL AMCP::Implementation::In_Place_Storage<double>::dispatch(_BOOL8 result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  __int128 v7;
  uint64_t type;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, _QWORD, __int128 *);
  void (*v11)(uint64_t, uint64_t, _QWORD, _QWORD);
  double *v12;
  AMCP::Thing *v13;
  double *v14;
  double v15;
  BOOL v16;
  BOOL (*v17)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  float v28;
  double v29;
  _BOOL4 v30;
  __int128 v31;
  __int128 v32;
  BOOL (*v33)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  void (*v34)(uint64_t, uint64_t, _QWORD, _QWORD);

  switch(result)
  {
    case 0:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      v7 = 0uLL;
      goto LABEL_7;
    case 1:
      result = 0;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_QWORD *)a3 = *(_QWORD *)a2;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<double>::dispatch;
      return result;
    case 2:
      result = 0;
      v7 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_QWORD *)a3 = *(_QWORD *)a2;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<double>::dispatch;
      *(_QWORD *)(a2 + 32) = 0;
LABEL_7:
      *(_OWORD *)a2 = v7;
      *(_OWORD *)(a2 + 16) = v7;
      return result;
    case 3:
      type = AMCP::Implementation::get_type_marker<double>();
      result = 0;
      *a4 = type;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<double>())
        return a2;
      else
        return 0;
    case 5:
      v9 = AMCP::Implementation::get_type_marker<double>();
      v10 = *(void (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32);
      *(_QWORD *)&v31 = 0;
      if (v10)
      {
        v10(3, a2, 0, &v31);
        v10 = (void (*)(uint64_t, uint64_t, _QWORD, __int128 *))v31;
      }
      if (v10 != (void (*)(uint64_t, uint64_t, _QWORD, __int128 *))v9)
        goto LABEL_22;
      v11 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a3 + 32);
      v34 = 0;
      if (v11)
      {
        v11(3, a3, 0, &v34);
        v11 = v34;
      }
      if (v11 != (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))v9)
      {
LABEL_22:
        v15 = AMCP::Thing::convert_to<double>(a2);
        return v15 == AMCP::Thing::convert_to<double>(a3);
      }
      if (*(_QWORD *)(a2 + 32))
      {
        *(_QWORD *)&v31 = AMCP::Implementation::get_type_marker<double>();
        v12 = (double *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32))(4, a2, 0, &v31);
      }
      else
      {
        v12 = 0;
      }
      *(_QWORD *)&v31 = AMCP::Implementation::get_type_marker<double>();
      return *v12 == *(double *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a3 + 32))(4, a3, 0, &v31);
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<BOOL>()
        && !AMCP::is_one_of<char,signed char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double,long double,AMCP::Direction,applesauce::CF::BooleanRef,applesauce::CF::NumberRef>(a4))
      {
        goto LABEL_81;
      }
      if (*(_QWORD *)(a2 + 32))
      {
        *(_QWORD *)&v31 = AMCP::Implementation::get_type_marker<double>();
        v14 = (double *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32))(4, a2, 0, &v31);
      }
      else
      {
        v14 = 0;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<BOOL>())
      {
        if (v14)
        {
          v16 = *v14 != 0.0;
          v31 = 0u;
          v32 = 0u;
          LOBYTE(v31) = v16;
          v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
LABEL_43:
          v33 = v17;
          goto LABEL_82;
        }
        goto LABEL_76;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<char>())
      {
        if (v14)
        {
          v18 = (int)*v14;
          v31 = 0u;
          v32 = 0u;
          LOBYTE(v31) = v18;
          v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<char>::dispatch;
          goto LABEL_43;
        }
LABEL_76:
        __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
      }
      if (*a4 == AMCP::Implementation::get_type_marker<signed char>())
      {
        if (v14)
        {
          v19 = (int)*v14;
          v31 = 0u;
          v32 = 0u;
          LOBYTE(v31) = v19;
          v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<signed char>::dispatch;
          goto LABEL_43;
        }
        goto LABEL_76;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<unsigned char>())
      {
        if (v14)
        {
          v20 = (int)*v14;
          v31 = 0u;
          v32 = 0u;
          LOBYTE(v31) = v20;
          v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<unsigned char>::dispatch;
          goto LABEL_43;
        }
        goto LABEL_76;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<short>())
      {
        if (v14)
        {
          v21 = (int)*v14;
          v31 = 0u;
          v32 = 0u;
          LOWORD(v31) = v21;
          v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<short>::dispatch;
          goto LABEL_43;
        }
        goto LABEL_76;
      }
      if (*a4 != AMCP::Implementation::get_type_marker<unsigned short>())
      {
        if (*a4 == AMCP::Implementation::get_type_marker<int>())
        {
          if (v14)
          {
            v22 = (int)*v14;
            v31 = 0u;
            v32 = 0u;
            LODWORD(v31) = v22;
            v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<int>::dispatch;
            goto LABEL_43;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned int>())
        {
          if (v14)
          {
            v23 = *v14;
            v31 = 0u;
            v32 = 0u;
            LODWORD(v31) = v23;
            v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<unsigned int>::dispatch;
            goto LABEL_43;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<long>())
        {
          if (v14)
          {
            v24 = (uint64_t)*v14;
            v32 = 0uLL;
            v31 = (unint64_t)v24;
            v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<long>::dispatch;
            goto LABEL_43;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned long>())
        {
          if (v14)
          {
            v25 = (unint64_t)*v14;
            v32 = 0uLL;
            v31 = v25;
            v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<unsigned long>::dispatch;
            goto LABEL_43;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<long long>())
        {
          if (v14)
          {
            v26 = (uint64_t)*v14;
            v32 = 0uLL;
            v31 = (unint64_t)v26;
            v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<long long>::dispatch;
            goto LABEL_43;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned long long>())
        {
          if (v14)
          {
            v27 = (unint64_t)*v14;
            v32 = 0uLL;
            v31 = v27;
            v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<unsigned long long>::dispatch;
            goto LABEL_43;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<float>())
        {
          if (v14)
          {
            v28 = *v14;
            v31 = 0u;
            v32 = 0u;
            *(float *)&v31 = v28;
            v17 = AMCP::Implementation::In_Place_Storage<float>::dispatch;
            goto LABEL_43;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<double>())
        {
          if (v14)
          {
            *((_QWORD *)&v31 + 1) = 0;
            v32 = 0uLL;
            *(double *)&v31 = *v14;
            v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<double>::dispatch;
            goto LABEL_43;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<long double>())
        {
          if (v14)
          {
            v29 = *v14;
            v32 = 0uLL;
            v31 = *(unint64_t *)&v29;
            v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<long double>::dispatch;
            goto LABEL_43;
          }
        }
        else
        {
          if (*a4 != AMCP::Implementation::get_type_marker<AMCP::Direction>())
          {
            if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>())
            {
              AMCP::Implementation::create_number_from<long double,applesauce::CF::BooleanRef>(&v31, v14);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>())
            {
              AMCP::Implementation::create_number_from<double,applesauce::CF::NumberRef>((uint64_t)&v31, (uint64_t *)v14);
            }
            else
            {
LABEL_81:
              v33 = 0;
              v31 = 0u;
              v32 = 0u;
            }
            goto LABEL_82;
          }
          if (v14)
          {
            v30 = *v14 != 0.0;
            v31 = 0u;
            v32 = 0u;
            LODWORD(v31) = v30;
            v17 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<AMCP::Direction>::dispatch;
            goto LABEL_43;
          }
        }
        goto LABEL_76;
      }
      AMCP::Implementation::create_number_from<long double,unsigned short>((uint64_t)&v31, v14);
LABEL_82:
      AMCP::swap((AMCP::Thing *)&v31, (AMCP::Thing *)a3, v13);
      if (v33)
        v33(0, (uint64_t)&v31, 0, 0);
      return 0;
    default:
      return result;
  }
}

void sub_1B58054D8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B58054A4);
}

_QWORD *AMCP::Implementation::create_number_from<long double,applesauce::CF::BooleanRef>(_QWORD *result, double *a2)
{
  uint64_t *v2;
  uint64_t v3;

  if (!a2)
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  v2 = (uint64_t *)MEMORY[0x1E0C9AE58];
  if (*a2 == 0.0)
    v2 = (uint64_t *)MEMORY[0x1E0C9AE48];
  v3 = *v2;
  result[2] = 0;
  result[3] = 0;
  *result = v3;
  result[1] = 0;
  result[4] = AMCP::Implementation::In_Place_Storage<applesauce::CF::BooleanRef>::dispatch;
  return result;
}

CFNumberRef AMCP::Implementation::create_number_from<long double,applesauce::CF::NumberRef>(CFNumberRef *a1, uint64_t *a2)
{
  CFNumberRef result;
  std::runtime_error *exception;
  uint64_t valuePtr;

  if (!a2)
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  valuePtr = *a2;
  result = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
  if (!result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  a1[2] = 0;
  a1[3] = 0;
  *a1 = result;
  a1[1] = 0;
  a1[4] = (CFNumberRef)AMCP::Implementation::In_Place_Storage<applesauce::CF::NumberRef>::dispatch;
  return result;
}

void sub_1B58055FC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double AMCP::Thing::convert_to<double>(uint64_t a1)
{
  uint64_t type;
  void (*v3)(uint64_t, uint64_t, _QWORD, _QWORD);
  _QWORD *v4;
  double v5;
  double *v6;
  std::bad_cast *exception;
  std::bad_cast *v9;
  std::bad_cast *v10;
  std::bad_cast *v11;
  std::bad_cast *v12;
  std::bad_cast *v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t (*v17)(uint64_t, _OWORD *, _QWORD, uint64_t *);
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, _QWORD, _QWORD);

  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_12;
  type = AMCP::Implementation::get_type_marker<double>();
  v3 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a1 + 32);
  v19 = 0;
  if (v3)
  {
    v3(3, a1, 0, &v19);
    v3 = v19;
  }
  if (v3 == (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))type)
  {
    v18 = type;
    v4 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a1 + 32))(4, a1, 0, &v18);
    if (v4)
      return *(double *)v4;
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v9 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v9, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v15 = AMCP::Implementation::get_type_marker<double>();
  memset(v16, 0, sizeof(v16));
  v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a1 + 32))(6, a1, v16, &v15);
  if (!v17)
  {
    v10 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v11 = std::bad_cast::bad_cast(v10);
    __cxa_throw(v11, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v14 = type;
  v6 = (double *)v17(4, v16, 0, &v14);
  if (!v6)
  {
    v12 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v13 = std::bad_cast::bad_cast(v12);
    __cxa_throw(v13, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v5 = *v6;
  if (v17)
    v17(0, v16, 0, 0);
  return v5;
}

void sub_1B5805780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

void AMCP::Implementation::create_number_from<double,applesauce::CF::NumberRef>(uint64_t a1, uint64_t *a2)
{
  CFNumberRef v3;
  CFNumberRef v4;
  std::runtime_error *exception;
  CFNumberRef v6;
  uint64_t valuePtr;

  if (!a2)
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  valuePtr = *a2;
  v3 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
  v6 = v3;
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v4 = v3;
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  AMCP::Implementation::In_Place_Storage<applesauce::CF::NumberRef>::construct<applesauce::CF::NumberRef&>(a1, (CFTypeRef *)&v6);
  CFRelease(v4);
}

void sub_1B580585C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL AMCP::Implementation::In_Place_Storage<float>::dispatch(_BOOL8 result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  __int128 v7;
  uint64_t type;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, _QWORD, __int128 *);
  void (*v11)(uint64_t, uint64_t, _QWORD, _QWORD);
  float *v12;
  AMCP::Thing *v13;
  float *v14;
  float v15;
  BOOL v16;
  uint64_t (*v17)();
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _BOOL4 v30;
  __int128 v31;
  __int128 v32;
  uint64_t (*v33)();
  void (*v34)(uint64_t, uint64_t, _QWORD, _QWORD);

  switch(result)
  {
    case 0:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      v7 = 0uLL;
      goto LABEL_7;
    case 1:
      result = 0;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_DWORD *)a3 = *(_DWORD *)a2;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<float>::dispatch;
      return result;
    case 2:
      result = 0;
      v7 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_DWORD *)a3 = *(_DWORD *)a2;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<float>::dispatch;
      *(_QWORD *)(a2 + 32) = 0;
LABEL_7:
      *(_OWORD *)a2 = v7;
      *(_OWORD *)(a2 + 16) = v7;
      return result;
    case 3:
      type = AMCP::Implementation::get_type_marker<float>();
      result = 0;
      *a4 = type;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<float>())
        return a2;
      else
        return 0;
    case 5:
      v9 = AMCP::Implementation::get_type_marker<float>();
      v10 = *(void (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32);
      *(_QWORD *)&v31 = 0;
      if (v10)
      {
        v10(3, a2, 0, &v31);
        v10 = (void (*)(uint64_t, uint64_t, _QWORD, __int128 *))v31;
      }
      if (v10 != (void (*)(uint64_t, uint64_t, _QWORD, __int128 *))v9)
        goto LABEL_22;
      v11 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a3 + 32);
      v34 = 0;
      if (v11)
      {
        v11(3, a3, 0, &v34);
        v11 = v34;
      }
      if (v11 != (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))v9)
      {
LABEL_22:
        v15 = AMCP::Thing::convert_to<float>(a2);
        return v15 == AMCP::Thing::convert_to<float>(a3);
      }
      if (*(_QWORD *)(a2 + 32))
      {
        *(_QWORD *)&v31 = AMCP::Implementation::get_type_marker<float>();
        v12 = (float *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32))(4, a2, 0, &v31);
      }
      else
      {
        v12 = 0;
      }
      *(_QWORD *)&v31 = AMCP::Implementation::get_type_marker<float>();
      return *v12 == *(float *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a3 + 32))(4, a3, 0, &v31);
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<BOOL>()
        && !AMCP::is_one_of<char,signed char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double,long double,AMCP::Direction,applesauce::CF::BooleanRef,applesauce::CF::NumberRef>(a4))
      {
        goto LABEL_82;
      }
      if (*(_QWORD *)(a2 + 32))
      {
        *(_QWORD *)&v31 = AMCP::Implementation::get_type_marker<float>();
        v14 = (float *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32))(4, a2, 0, &v31);
      }
      else
      {
        v14 = 0;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<BOOL>())
      {
        if (v14)
        {
          v16 = *v14 != 0.0;
          v31 = 0u;
          v32 = 0u;
          LOBYTE(v31) = v16;
          v17 = AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
LABEL_43:
          v33 = v17;
          goto LABEL_83;
        }
        goto LABEL_77;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<char>())
      {
        if (v14)
        {
          v18 = (int)*v14;
          v31 = 0u;
          v32 = 0u;
          LOBYTE(v31) = v18;
          v17 = AMCP::Implementation::In_Place_Storage<char>::dispatch;
          goto LABEL_43;
        }
        goto LABEL_77;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<signed char>())
      {
        if (v14)
        {
          v19 = (int)*v14;
          v31 = 0u;
          v32 = 0u;
          LOBYTE(v31) = v19;
          v17 = AMCP::Implementation::In_Place_Storage<signed char>::dispatch;
          goto LABEL_43;
        }
        goto LABEL_77;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<unsigned char>())
      {
        if (v14)
        {
          v20 = (int)*v14;
          v31 = 0u;
          v32 = 0u;
          LOBYTE(v31) = v20;
          v17 = AMCP::Implementation::In_Place_Storage<unsigned char>::dispatch;
          goto LABEL_43;
        }
        goto LABEL_77;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<short>())
      {
        if (v14)
        {
          v21 = (int)*v14;
          v31 = 0u;
          v32 = 0u;
          LOWORD(v31) = v21;
          v17 = AMCP::Implementation::In_Place_Storage<short>::dispatch;
          goto LABEL_43;
        }
        goto LABEL_77;
      }
      if (*a4 != AMCP::Implementation::get_type_marker<unsigned short>())
      {
        if (*a4 == AMCP::Implementation::get_type_marker<int>())
        {
          if (v14)
          {
            v22 = (int)*v14;
            v31 = 0u;
            v32 = 0u;
            LODWORD(v31) = v22;
            v17 = AMCP::Implementation::In_Place_Storage<int>::dispatch;
            goto LABEL_43;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned int>())
        {
          if (v14)
          {
            v23 = *v14;
            v31 = 0u;
            v32 = 0u;
            LODWORD(v31) = v23;
            v17 = AMCP::Implementation::In_Place_Storage<unsigned int>::dispatch;
            goto LABEL_43;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<long>())
        {
          if (v14)
          {
            v24 = (uint64_t)*v14;
            v32 = 0uLL;
            v31 = (unint64_t)v24;
            v17 = AMCP::Implementation::In_Place_Storage<long>::dispatch;
            goto LABEL_43;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned long>())
        {
          if (v14)
          {
            v25 = (unint64_t)*v14;
            v32 = 0uLL;
            v31 = v25;
            v17 = AMCP::Implementation::In_Place_Storage<unsigned long>::dispatch;
            goto LABEL_43;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<long long>())
        {
          if (v14)
          {
            v26 = (uint64_t)*v14;
            v32 = 0uLL;
            v31 = (unint64_t)v26;
            v17 = AMCP::Implementation::In_Place_Storage<long long>::dispatch;
            goto LABEL_43;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned long long>())
        {
          if (v14)
          {
            v27 = (unint64_t)*v14;
            v32 = 0uLL;
            v31 = v27;
            v17 = AMCP::Implementation::In_Place_Storage<unsigned long long>::dispatch;
            goto LABEL_43;
          }
        }
        else
        {
          if (*a4 != AMCP::Implementation::get_type_marker<float>())
          {
            if (*a4 == AMCP::Implementation::get_type_marker<double>())
            {
              if (!v14)
                goto LABEL_77;
              *(double *)&v28 = *v14;
              *(_QWORD *)&v32 = 0;
              v31 = v28;
              v17 = AMCP::Implementation::In_Place_Storage<double>::dispatch;
            }
            else
            {
              if (*a4 != AMCP::Implementation::get_type_marker<long double>())
              {
                if (*a4 != AMCP::Implementation::get_type_marker<AMCP::Direction>())
                {
                  if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>())
                  {
                    AMCP::Implementation::create_number_from<float,applesauce::CF::BooleanRef>(&v31, v14);
                  }
                  else if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>())
                  {
                    AMCP::Implementation::create_number_from<float,applesauce::CF::NumberRef>((uint64_t)&v31, (int *)v14);
                  }
                  else
                  {
LABEL_82:
                    v33 = 0;
                    v31 = 0u;
                    v32 = 0u;
                  }
                  goto LABEL_83;
                }
                if (v14)
                {
                  v30 = *v14 != 0.0;
                  v31 = 0u;
                  v32 = 0u;
                  LODWORD(v31) = v30;
                  v17 = AMCP::Implementation::In_Place_Storage<AMCP::Direction>::dispatch;
                  goto LABEL_43;
                }
                goto LABEL_77;
              }
              if (!v14)
                goto LABEL_77;
              *(double *)&v29 = *v14;
              *(_QWORD *)&v32 = 0;
              v31 = v29;
              v17 = AMCP::Implementation::In_Place_Storage<long double>::dispatch;
            }
            *((_QWORD *)&v32 + 1) = 0;
            goto LABEL_43;
          }
          if (v14)
          {
            v31 = 0u;
            v32 = 0u;
            *(float *)&v31 = *v14;
            v17 = AMCP::Implementation::In_Place_Storage<float>::dispatch;
            goto LABEL_43;
          }
        }
LABEL_77:
        __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
      }
      AMCP::Implementation::create_number_from<float,unsigned short>((uint64_t)&v31, v14);
LABEL_83:
      AMCP::swap((AMCP::Thing *)&v31, (AMCP::Thing *)a3, v13);
      if (v33)
        ((void (*)(_QWORD, __int128 *, _QWORD, _QWORD))v33)(0, &v31, 0, 0);
      return 0;
    default:
      return result;
  }
}

void sub_1B5805E70(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5805E3CLL);
}

float AMCP::Thing::convert_to<float>(uint64_t a1)
{
  uint64_t type;
  void (*v3)(uint64_t, uint64_t, _QWORD, _QWORD);
  _DWORD *v4;
  float v5;
  float *v6;
  std::bad_cast *exception;
  std::bad_cast *v9;
  std::bad_cast *v10;
  std::bad_cast *v11;
  std::bad_cast *v12;
  std::bad_cast *v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t (*v17)(uint64_t, _OWORD *, _QWORD, uint64_t *);
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, _QWORD, _QWORD);

  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_12;
  type = AMCP::Implementation::get_type_marker<float>();
  v3 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a1 + 32);
  v19 = 0;
  if (v3)
  {
    v3(3, a1, 0, &v19);
    v3 = v19;
  }
  if (v3 == (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))type)
  {
    v18 = type;
    v4 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a1 + 32))(4, a1, 0, &v18);
    if (v4)
      return *(float *)v4;
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v9 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v9, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v15 = AMCP::Implementation::get_type_marker<float>();
  memset(v16, 0, sizeof(v16));
  v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a1 + 32))(6, a1, v16, &v15);
  if (!v17)
  {
    v10 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v11 = std::bad_cast::bad_cast(v10);
    __cxa_throw(v11, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v14 = type;
  v6 = (float *)v17(4, v16, 0, &v14);
  if (!v6)
  {
    v12 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v13 = std::bad_cast::bad_cast(v12);
    __cxa_throw(v13, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v5 = *v6;
  if (v17)
    v17(0, v16, 0, 0);
  return v5;
}

void sub_1B5805FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

double AMCP::Implementation::create_number_from<float,unsigned short>(uint64_t a1, float *a2)
{
  int v2;
  double result;

  if (!a2)
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  v2 = (int)*a2;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_WORD *)a1 = v2;
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<unsigned short>::dispatch;
  return result;
}

_QWORD *AMCP::Implementation::create_number_from<float,applesauce::CF::BooleanRef>(_QWORD *result, float *a2)
{
  uint64_t *v2;
  uint64_t v3;

  if (!a2)
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  v2 = (uint64_t *)MEMORY[0x1E0C9AE58];
  if (*a2 == 0.0)
    v2 = (uint64_t *)MEMORY[0x1E0C9AE48];
  v3 = *v2;
  result[2] = 0;
  result[3] = 0;
  *result = v3;
  result[1] = 0;
  result[4] = AMCP::Implementation::In_Place_Storage<applesauce::CF::BooleanRef>::dispatch;
  return result;
}

void AMCP::Implementation::create_number_from<float,applesauce::CF::NumberRef>(uint64_t a1, int *a2)
{
  CFNumberRef v3;
  CFNumberRef v4;
  std::runtime_error *exception;
  CFNumberRef v6;
  int valuePtr;

  if (!a2)
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  valuePtr = *a2;
  v3 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  v6 = v3;
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v4 = v3;
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  AMCP::Implementation::In_Place_Storage<applesauce::CF::NumberRef>::construct<applesauce::CF::NumberRef&>(a1, (CFTypeRef *)&v6);
  CFRelease(v4);
}

void sub_1B580618C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::get_type_marker<mcp_applesauce::CF::PropertyListRef>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return v1[97];
}

uint64_t AMCP::Implementation::get_type_marker<applesauce::CF::DataRef>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return v1[165];
}

uint64_t AMCP::Implementation::get_type_marker<applesauce::CF::DateRef>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return v1[167];
}

uint64_t AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return v1[169];
}

uint64_t AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return v1[171];
}

uint64_t AMCP::Implementation::In_Place_Storage<mcp_applesauce::CF::PropertyListRef>::construct<mcp_applesauce::CF::PropertyListRef&>(uint64_t a1, CFTypeRef *a2)
{
  CFTypeRef v3;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v3 = *a2;
  if (*a2)
    CFRetain(*a2);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<mcp_applesauce::CF::PropertyListRef>::dispatch;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<mcp_applesauce::CF::PropertyListRef>::dispatch(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, _QWORD, CFTypeRef *);
  void (*v10)(uint64_t, uint64_t, _QWORD, CFTypeRef *);
  unint64_t *v11;
  AMCP::Thing *v12;
  CFTypeRef *v13;
  CFTypeRef v14;
  CFTypeRef v15;
  _BOOL4 v16;
  CFTypeID TypeID;
  CFTypeRef v18;
  CFTypeID v19;
  CFTypeRef v20;
  CFTypeID v21;
  CFTypeRef v22;
  unint64_t *v23;
  CFTypeID v24;
  CFTypeRef v25;
  CFTypeRef v26;
  CFTypeRef cf[2];
  __int128 v28;
  uint64_t (*v29)();
  void (*v30)(uint64_t, uint64_t, _QWORD, CFTypeRef *);
  char v31;

  switch((int)result)
  {
    case 0:
      goto LABEL_7;
    case 1:
      AMCP::Implementation::In_Place_Storage<mcp_applesauce::CF::PropertyListRef>::construct<mcp_applesauce::CF::PropertyListRef const&>(a3, (CFTypeRef *)a2);
      return 0;
    case 2:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_QWORD *)a3 = *(_QWORD *)a2;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<mcp_applesauce::CF::PropertyListRef>::dispatch;
LABEL_7:
      AMCP::Implementation::In_Place_Storage<mcp_applesauce::CF::PropertyListRef>::destruct(a2);
      return 0;
    case 3:
      v7 = AMCP::Implementation::get_type_marker<mcp_applesauce::CF::PropertyListRef>();
      result = 0;
      *a4 = v7;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<mcp_applesauce::CF::PropertyListRef>())
        return a2;
      else
        return 0;
    case 5:
      v8 = AMCP::Implementation::get_type_marker<mcp_applesauce::CF::PropertyListRef>();
      v9 = *(void (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(a2 + 32);
      cf[0] = 0;
      if (v9)
      {
        v9(3, a2, 0, cf);
        v9 = (void (*)(uint64_t, uint64_t, _QWORD, CFTypeRef *))cf[0];
      }
      if (v9 != (void (*)(uint64_t, uint64_t, _QWORD, CFTypeRef *))v8)
        goto LABEL_27;
      v10 = *(void (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(a3 + 32);
      v30 = 0;
      if (v10)
      {
        v10(3, a3, 0, (CFTypeRef *)&v30);
        v10 = v30;
      }
      if (v10 == (void (*)(uint64_t, uint64_t, _QWORD, CFTypeRef *))v8)
      {
        if (*(_QWORD *)(a2 + 32))
        {
          cf[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<mcp_applesauce::CF::PropertyListRef>();
          v11 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(a2 + 32))(4, a2, 0, cf);
        }
        else
        {
          v11 = 0;
        }
        cf[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<mcp_applesauce::CF::PropertyListRef>();
        v23 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(a3 + 32))(4, a3, 0, cf);
        if (mcp_applesauce::CF::operator==(*v11, *v23))
          return 1;
      }
      else
      {
LABEL_27:
        AMCP::Thing::convert_to<mcp_applesauce::CF::PropertyListRef>(cf, a2);
        AMCP::Thing::convert_to<mcp_applesauce::CF::PropertyListRef>(&v30, a3);
        v14 = cf[0];
        v15 = v30;
        v16 = mcp_applesauce::CF::operator==((unint64_t)cf[0], (unint64_t)v30);
        if (v15)
          CFRelease(v15);
        if (v14)
          CFRelease(v14);
        if (v16)
          return 1;
      }
      return 0;
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<mcp_applesauce::CF::PropertyListRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::StringRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DataRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DateRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>())
      {
        goto LABEL_84;
      }
      if (*(_QWORD *)(a2 + 32))
      {
        cf[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<mcp_applesauce::CF::PropertyListRef>();
        v13 = (CFTypeRef *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(a2 + 32))(4, a2, 0, cf);
      }
      else
      {
        v13 = 0;
      }
      if (*a4 != AMCP::Implementation::get_type_marker<mcp_applesauce::CF::PropertyListRef>())
      {
        if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::StringRef>())
        {
          if (v13)
          {
            if (*v13 && (TypeID = CFStringGetTypeID(), TypeID == CFGetTypeID(*v13)))
            {
              v18 = *v13;
              if (v18)
                CFRetain(v18);
              applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)cf, v18);
              v30 = (void (*)(uint64_t, uint64_t, _QWORD, CFTypeRef *))cf[0];
              v31 = 1;
              *(_OWORD *)cf = 0u;
              v28 = 0u;
              v29 = 0;
              AMCP::Implementation::In_Place_Storage<applesauce::CF::StringRef>::construct<applesauce::CF::StringRef&>((uint64_t)cf, (CFTypeRef *)&v30);
            }
            else
            {
              LOBYTE(v30) = 0;
              v31 = 0;
              *(_OWORD *)cf = 0u;
              v28 = 0u;
              v29 = 0;
            }
            std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v30);
            goto LABEL_85;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::DataRef>())
        {
          if (v13)
          {
            if (*v13 && (v19 = CFDataGetTypeID(), v19 == CFGetTypeID(*v13)))
            {
              v20 = *v13;
              if (v20)
                CFRetain(v20);
              applesauce::CF::DataRef::DataRef((applesauce::CF::DataRef *)cf, v20);
              v30 = (void (*)(uint64_t, uint64_t, _QWORD, CFTypeRef *))cf[0];
              v31 = 1;
              *(_OWORD *)cf = 0u;
              v28 = 0u;
              v29 = 0;
              AMCP::Implementation::In_Place_Storage<applesauce::CF::DataRef>::construct<applesauce::CF::DataRef&>((uint64_t)cf, (CFTypeRef *)&v30);
            }
            else
            {
              LOBYTE(v30) = 0;
              v31 = 0;
              *(_OWORD *)cf = 0u;
              v28 = 0u;
              v29 = 0;
            }
            std::__optional_destruct_base<applesauce::CF::DataRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v30);
            goto LABEL_85;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>())
        {
          if (v13)
          {
            if (*v13 && (v21 = CFNumberGetTypeID(), v21 == CFGetTypeID(*v13)))
            {
              v22 = *v13;
              if (v22)
                CFRetain(v22);
              applesauce::CF::NumberRef::NumberRef((applesauce::CF::NumberRef *)cf, v22);
              v30 = (void (*)(uint64_t, uint64_t, _QWORD, CFTypeRef *))cf[0];
              v31 = 1;
              *(_OWORD *)cf = 0u;
              v28 = 0u;
              v29 = 0;
              AMCP::Implementation::In_Place_Storage<applesauce::CF::NumberRef>::construct<applesauce::CF::NumberRef&>(cf, &v30);
            }
            else
            {
              LOBYTE(v30) = 0;
              v31 = 0;
              *(_OWORD *)cf = 0u;
              v28 = 0u;
              v29 = 0;
            }
            std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v30);
            goto LABEL_85;
          }
        }
        else
        {
          if (*a4 != AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>())
          {
            if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::DateRef>())
            {
              AMCP::Implementation::create_cf_plist_from<mcp_applesauce::CF::PropertyListRef,applesauce::CF::DateRef>((uint64_t)cf, v13);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
            {
              AMCP::Implementation::create_cf_plist_from<mcp_applesauce::CF::PropertyListRef,applesauce::CF::ArrayRef>((uint64_t)cf, v13);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>())
            {
              AMCP::Implementation::create_cf_plist_from<mcp_applesauce::CF::PropertyListRef,applesauce::CF::DictionaryRef>((uint64_t)cf, v13);
            }
            else
            {
LABEL_84:
              v29 = 0;
              *(_OWORD *)cf = 0u;
              v28 = 0u;
            }
            goto LABEL_85;
          }
          if (v13)
          {
            if (*v13 && (v24 = CFBooleanGetTypeID(), v24 == CFGetTypeID(*v13)))
            {
              v25 = *v13;
              if (v25)
                CFRetain(v25);
              applesauce::CF::BooleanRef::BooleanRef((applesauce::CF::BooleanRef *)cf, v25);
              v26 = cf[0];
              v30 = (void (*)(uint64_t, uint64_t, _QWORD, CFTypeRef *))cf[0];
              v31 = 1;
              *(_OWORD *)cf = 0u;
              v28 = 0u;
              v29 = 0;
              if (v30)
                CFRetain(v26);
              cf[0] = v26;
              v29 = AMCP::Implementation::In_Place_Storage<applesauce::CF::BooleanRef>::dispatch;
            }
            else
            {
              LOBYTE(v30) = 0;
              v31 = 0;
              *(_OWORD *)cf = 0u;
              v28 = 0u;
              v29 = 0;
            }
            std::__optional_destruct_base<applesauce::CF::BooleanRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v30);
            goto LABEL_85;
          }
        }
LABEL_89:
        __assert_rtn("create_cf_plist_from", "Thing.h", 2434, "in_value_ptr != nullptr");
      }
      if (!v13)
        goto LABEL_89;
      v29 = 0;
      *(_OWORD *)cf = 0u;
      v28 = 0u;
      AMCP::Implementation::In_Place_Storage<mcp_applesauce::CF::PropertyListRef>::construct<mcp_applesauce::CF::PropertyListRef const&>((uint64_t)cf, v13);
LABEL_85:
      AMCP::swap((AMCP::Thing *)cf, (AMCP::Thing *)a3, v12);
      if (v29)
        ((void (*)(_QWORD, CFTypeRef *, _QWORD, _QWORD))v29)(0, cf, 0, 0);
      return 0;
    default:
      return result;
  }
}

void sub_1B5806A38(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  mcp_applesauce::CF::PropertyListRef::~PropertyListRef(&a9);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B58069A8);
}

double AMCP::Implementation::In_Place_Storage<mcp_applesauce::CF::PropertyListRef>::destruct(uint64_t a1)
{
  const void *v2;
  double result;

  v2 = *(const void **)a1;
  if (v2)
    CFRelease(v2);
  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t AMCP::Implementation::In_Place_Storage<mcp_applesauce::CF::PropertyListRef>::construct<mcp_applesauce::CF::PropertyListRef const&>(uint64_t a1, CFTypeRef *a2)
{
  CFTypeRef v3;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v3 = *a2;
  if (*a2)
    CFRetain(*a2);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<mcp_applesauce::CF::PropertyListRef>::dispatch;
  return a1;
}

BOOL mcp_applesauce::CF::operator==(unint64_t cf1, unint64_t a2)
{
  _BOOL8 result;

  result = (cf1 | a2) == 0;
  if (cf1)
  {
    if (a2)
      return CFEqual((CFTypeRef)cf1, (CFTypeRef)a2) != 0;
  }
  return result;
}

CFTypeRef *AMCP::Thing::convert_to<mcp_applesauce::CF::PropertyListRef>(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, _QWORD, _QWORD);
  CFTypeRef *result;
  CFTypeRef v7;
  CFTypeRef v8;
  std::bad_cast *exception;
  std::bad_cast *v10;
  std::bad_cast *v11;
  std::bad_cast *v12;
  std::bad_cast *v13;
  std::bad_cast *v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[2];
  uint64_t (*v18)(uint64_t, _OWORD *, _QWORD, uint64_t *);
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, _QWORD, _QWORD);

  if (!*(_QWORD *)(a2 + 32))
    goto LABEL_16;
  v4 = AMCP::Implementation::get_type_marker<mcp_applesauce::CF::PropertyListRef>();
  v5 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a2 + 32);
  v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))v4)
  {
    v19 = v4;
    result = (CFTypeRef *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (result)
    {
      v7 = *result;
      if (*result)
        result = (CFTypeRef *)CFRetain(*result);
      *a1 = v7;
      return result;
    }
LABEL_16:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v16 = AMCP::Implementation::get_type_marker<mcp_applesauce::CF::PropertyListRef>();
  memset(v17, 0, sizeof(v17));
  v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v15 = v4;
  result = (CFTypeRef *)v18(4, v17, 0, &v15);
  if (!result)
  {
    v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v8 = *result;
  if (*result)
    result = (CFTypeRef *)CFRetain(*result);
  *a1 = v8;
  if (v18)
    return (CFTypeRef *)v18(0, v17, 0, 0);
  return result;
}

void sub_1B5806CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::In_Place_Storage<applesauce::CF::StringRef>::construct<applesauce::CF::StringRef&>(uint64_t a1, CFTypeRef *a2)
{
  CFTypeRef v3;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v3 = *a2;
  if (*a2)
    CFRetain(*a2);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<applesauce::CF::StringRef>::dispatch;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<applesauce::CF::DataRef>::construct<applesauce::CF::DataRef&>(uint64_t a1, CFTypeRef *a2)
{
  CFTypeRef v3;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v3 = *a2;
  if (*a2)
    CFRetain(*a2);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<applesauce::CF::DataRef>::dispatch;
  return a1;
}

uint64_t std::__optional_destruct_base<applesauce::CF::DataRef,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  const void *v2;

  if (*(_BYTE *)(a1 + 8))
  {
    v2 = *(const void **)a1;
    if (*(_QWORD *)a1)
      CFRelease(v2);
  }
  return a1;
}

uint64_t std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  const void *v2;

  if (*(_BYTE *)(a1 + 8))
  {
    v2 = *(const void **)a1;
    if (*(_QWORD *)a1)
      CFRelease(v2);
  }
  return a1;
}

double AMCP::Implementation::create_cf_plist_from<mcp_applesauce::CF::PropertyListRef,applesauce::CF::DateRef>(uint64_t a1, CFTypeRef *a2)
{
  CFTypeID TypeID;
  CFTypeRef v5;
  CFTypeID v6;
  double result;
  std::runtime_error *exception;

  if (!a2)
    __assert_rtn("create_cf_plist_from", "Thing.h", 2434, "in_value_ptr != nullptr");
  if (*a2 && (TypeID = CFDateGetTypeID(), TypeID == CFGetTypeID(*a2)))
  {
    v5 = *a2;
    if (v5)
    {
      CFRetain(v5);
      v6 = CFGetTypeID(v5);
      if (v6 != CFDateGetTypeID())
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      *(_QWORD *)(a1 + 32) = 0;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      CFRetain(v5);
      *(_QWORD *)a1 = v5;
      *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<applesauce::CF::DateRef>::dispatch;
      CFRelease(v5);
    }
    else
    {
      result = 0.0;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<applesauce::CF::DateRef>::dispatch;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

void sub_1B5806F08(void *a1)
{
  const void *v1;
  void *v2;

  __cxa_free_exception(v2);
  CFRelease(v1);
  __clang_call_terminate(a1);
}

uint64_t AMCP::Implementation::create_cf_plist_from<mcp_applesauce::CF::PropertyListRef,applesauce::CF::ArrayRef>(uint64_t a1, CFTypeRef *a2)
{
  CFTypeID TypeID;
  CFTypeRef v5;
  CFTypeRef v7;
  char v8;
  const void *v9;

  if (!a2)
    __assert_rtn("create_cf_plist_from", "Thing.h", 2434, "in_value_ptr != nullptr");
  if (*a2 && (TypeID = CFArrayGetTypeID(), TypeID == CFGetTypeID(*a2)))
  {
    v5 = *a2;
    if (v5)
      CFRetain(v5);
    applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&v9, v5);
    v7 = v9;
    v8 = 1;
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::construct<applesauce::CF::ArrayRef&>(a1, &v7);
  }
  else
  {
    LOBYTE(v7) = 0;
    v8 = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_QWORD *)(a1 + 32) = 0;
  }
  return std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v7);
}

uint64_t AMCP::Implementation::create_cf_plist_from<mcp_applesauce::CF::PropertyListRef,applesauce::CF::DictionaryRef>(uint64_t a1, CFTypeRef *a2)
{
  CFTypeID TypeID;
  CFTypeRef v5;
  CFTypeRef v7;
  char v8;
  const void *v9;

  if (!a2)
    __assert_rtn("create_cf_plist_from", "Thing.h", 2434, "in_value_ptr != nullptr");
  if (*a2 && (TypeID = CFDictionaryGetTypeID(), TypeID == CFGetTypeID(*a2)))
  {
    v5 = *a2;
    if (v5)
      CFRetain(v5);
    applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v9, v5);
    v7 = v9;
    v8 = 1;
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    AMCP::Implementation::In_Place_Storage<applesauce::CF::DictionaryRef>::construct<applesauce::CF::DictionaryRef&>(a1, &v7);
  }
  else
  {
    LOBYTE(v7) = 0;
    v8 = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_QWORD *)(a1 + 32) = 0;
  }
  return std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v7);
}

uint64_t AMCP::Implementation::In_Place_Storage<applesauce::CF::DictionaryRef>::construct<applesauce::CF::DictionaryRef&>(uint64_t a1, CFTypeRef *a2)
{
  CFTypeRef v3;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v3 = *a2;
  if (*a2)
    CFRetain(*a2);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<applesauce::CF::DictionaryRef>::dispatch;
  return a1;
}

uint64_t std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  const void *v2;

  if (*(_BYTE *)(a1 + 8))
  {
    v2 = *(const void **)a1;
    if (*(_QWORD *)a1)
      CFRelease(v2);
  }
  return a1;
}

BOOL AMCP::Implementation::In_Place_Storage<applesauce::CF::DictionaryRef>::dispatch(_BOOL8 result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, _QWORD, CFTypeRef *);
  void (*v10)(uint64_t, uint64_t, _QWORD, CFTypeRef *);
  const void **v11;
  CFTypeRef *v12;
  CFTypeRef v13;
  CFTypeRef v14;
  BOOL v15;
  AMCP::Thing *v16;
  AMCP::Thing *v17;
  CFDictionaryRef *v18;
  unsigned int v19;
  unsigned int v20;
  CFTypeRef v21;
  const void *v22;
  AMCP::Thing *v23;
  const __CFDictionary **v24;
  const void **v25;
  unint64_t v26;
  unint64_t v27;
  const __CFNumber *v28;
  double v29;
  const __CFNumber *v30;
  double v31;
  double v32;
  AMCP::Thing *v33;
  const __CFDictionary **v34;
  const __CFNumber *v35;
  double v36;
  const __CFNumber *v37;
  double v38;
  double v39;
  const __CFNumber *v40;
  double v41;
  const __CFNumber *v42;
  double v43;
  double v44;
  AMCP::Thing *v45;
  AMCP::Thing *v46;
  AMCP::Thing *v47;
  std::runtime_error *exception;
  std::runtime_error *v49;
  std::runtime_error *v50;
  std::runtime_error *v51;
  std::runtime_error *v52;
  std::runtime_error *v53;
  std::runtime_error *v54;
  std::runtime_error *v55;
  std::runtime_error *v56;
  std::runtime_error *v57;
  std::runtime_error *v58;
  std::runtime_error *v59;
  std::runtime_error *v60;
  std::runtime_error *v61;
  std::runtime_error *v62;
  std::runtime_error *v63;
  std::runtime_error *v64;
  std::runtime_error *v65;
  std::runtime_error *v66;
  std::runtime_error *v67;
  std::runtime_error *v68;
  std::runtime_error *v69;
  CFTypeRef cf2[2];
  __int128 v71;
  void (*v72)(_QWORD, CFTypeRef *, _QWORD, _QWORD);
  CFTypeRef cf1[2];
  __int128 v74;
  void *v75;
  CFTypeRef valuePtr;
  CFTypeRef cf;
  char v78;
  const __CFNumber *v79;
  char v80;
  const __CFNumber *v81;
  char v82;

  switch(result)
  {
    case 0:
      goto LABEL_7;
    case 1:
      AMCP::Implementation::In_Place_Storage<applesauce::CF::DictionaryRef>::construct<applesauce::CF::DictionaryRef const&>(a3, (CFTypeRef *)a2);
      return 0;
    case 2:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_QWORD *)a3 = *(_QWORD *)a2;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<applesauce::CF::DictionaryRef>::dispatch;
LABEL_7:
      AMCP::Implementation::In_Place_Storage<applesauce::CF::DictionaryRef>::destruct(a2);
      return 0;
    case 3:
      v7 = AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>();
      result = 0;
      *a4 = v7;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>())
        return a2;
      else
        return 0;
    case 5:
      v8 = AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>();
      v9 = *(void (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(a2 + 32);
      cf1[0] = 0;
      if (v9)
      {
        v9(3, a2, 0, cf1);
        v9 = (void (*)(uint64_t, uint64_t, _QWORD, CFTypeRef *))cf1[0];
      }
      if (v9 != (void (*)(uint64_t, uint64_t, _QWORD, CFTypeRef *))v8)
        goto LABEL_28;
      v10 = *(void (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(a3 + 32);
      cf2[0] = 0;
      if (v10)
      {
        v10(3, a3, 0, cf2);
        v10 = (void (*)(uint64_t, uint64_t, _QWORD, CFTypeRef *))cf2[0];
      }
      if (v10 != (void (*)(uint64_t, uint64_t, _QWORD, CFTypeRef *))v8)
      {
LABEL_28:
        AMCP::Thing::convert_to<applesauce::CF::DictionaryRef>(cf1, a2);
        AMCP::Thing::convert_to<applesauce::CF::DictionaryRef>(cf2, a3);
        v13 = cf1[0];
        v14 = cf2[0];
        v15 = ((uint64_t)cf1[0] | (uint64_t)cf2[0]) == 0;
        if (cf1[0] && cf2[0])
        {
          v15 = CFEqual(cf1[0], cf2[0]) != 0;
        }
        else if (!cf2[0])
        {
          goto LABEL_33;
        }
        CFRelease(v14);
LABEL_33:
        if (v13)
          CFRelease(v13);
        return v15;
      }
      if (*(_QWORD *)(a2 + 32))
      {
        cf1[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>();
        v11 = (const void **)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(a2 + 32))(4, a2, 0, cf1);
      }
      else
      {
        v11 = 0;
      }
      cf1[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>();
      v25 = (const void **)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(a3 + 32))(4, a3, 0, cf1);
      v26 = (unint64_t)*v11;
      v27 = (unint64_t)*v25;
      if (!*v11 || !v27)
        return !(v26 | v27);
      return CFEqual((CFTypeRef)v26, (CFTypeRef)v27) != 0;
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<mcp_applesauce::CF::PropertyListRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::StringRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DataRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DateRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>()
        || *a4 != AMCP::Implementation::get_type_marker<mcp_applesauce::CF::PropertyListRef>())
      {
        goto LABEL_52;
      }
      if (*(_QWORD *)(a2 + 32))
      {
        cf1[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>();
        v12 = (CFTypeRef *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(a2 + 32))(4, a2, 0, cf1);
      }
      else
      {
        v12 = 0;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<mcp_applesauce::CF::PropertyListRef>())
      {
        if (v12)
        {
          mcp_applesauce::CF::PropertyListRef::from_get((mcp_applesauce::CF::PropertyListRef *)cf1, *v12);
          v72 = 0;
          *(_OWORD *)cf2 = 0u;
          v71 = 0u;
          AMCP::Implementation::In_Place_Storage<mcp_applesauce::CF::PropertyListRef>::construct<mcp_applesauce::CF::PropertyListRef&>(cf2, cf1);
          if (cf1[0])
            CFRelease(cf1[0]);
          if (v72)
            goto LABEL_184;
          goto LABEL_53;
        }
      }
      else if (*a4 != AMCP::Implementation::get_type_marker<applesauce::CF::StringRef>()
             && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DataRef>()
             && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>()
             && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>()
             && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DateRef>()
             && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>()
             && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>()
             || v12)
      {
LABEL_52:
        v72 = 0;
        *(_OWORD *)cf2 = 0u;
        v71 = 0u;
        if (*a4 != AMCP::Implementation::get_type_marker<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>()
          && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>())
        {
          goto LABEL_75;
        }
LABEL_53:
        if (*(_QWORD *)(a2 + 32))
        {
          cf1[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>();
          v18 = (CFDictionaryRef *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(a2 + 32))(4, a2, 0, cf1);
        }
        else
        {
          v18 = 0;
        }
        if (*a4 == AMCP::Implementation::get_type_marker<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>())
        {
          if (v18)
          {
            if (!*v18)
            {
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(exception, "Could not construct");
              __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)cf1, "item id");
            applesauce::CF::details::find_at_key_or_optional<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v81, *v18, cf1[0]);
            if (cf1[0])
              CFRelease(cf1[0]);
            if (!*v18)
            {
              v49 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v49, "Could not construct");
              __cxa_throw(v49, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)cf1, "kind");
            applesauce::CF::details::find_at_key_or_optional<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v79, *v18, cf1[0]);
            if (cf1[0])
              CFRelease(cf1[0]);
            if (!*v18)
            {
              v50 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v50, "Could not construct");
              __cxa_throw(v50, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)cf1, "name");
            applesauce::CF::details::find_at_key_or_optional<applesauce::CF::StringRef,applesauce::CF::StringRef>(&cf, *v18, cf1[0]);
            if (cf1[0])
              CFRelease(cf1[0]);
            if (v82)
            {
              if (!v81)
              {
                v51 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v51, "Could not construct");
                __cxa_throw(v51, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              v19 = applesauce::CF::convert_to<unsigned int,0>(v81);
            }
            else
            {
              v19 = 0;
            }
            if (v80)
            {
              if (!v79)
              {
                v52 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v52, "Could not construct");
                __cxa_throw(v52, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              v20 = applesauce::CF::convert_to<unsigned int,0>(v79);
            }
            else
            {
              v20 = 0;
            }
            if (v78)
            {
              v21 = cf;
              if (cf)
                CFRetain(cf);
              valuePtr = v21;
              if (v21)
                goto LABEL_85;
            }
            else
            {
              applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&valuePtr, "");
              v21 = valuePtr;
              if (valuePtr)
              {
LABEL_85:
                CFRetain(v21);
                v22 = valuePtr;
LABEL_88:
                cf1[0] = (CFTypeRef)__PAIR64__(v20, v19);
                cf1[1] = v21;
                v74 = 0uLL;
                v75 = AMCP::Implementation::In_Place_Storage<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::dispatch;
                if (v22)
                  CFRelease(v22);
                std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
                std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v79);
                std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v81);
                goto LABEL_91;
              }
            }
            v22 = 0;
            goto LABEL_88;
          }
LABEL_189:
          __assert_rtn("create_selector_item_from", "Thing.h", 1366, "in_value_ptr != nullptr");
        }
        if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>())
        {
          if (!v18)
            goto LABEL_189;
          v75 = 0;
          *(_OWORD *)cf1 = 0u;
          v74 = 0u;
          AMCP::Implementation::In_Place_Storage<applesauce::CF::DictionaryRef>::construct<applesauce::CF::DictionaryRef const&>((uint64_t)cf1, (CFTypeRef *)v18);
        }
        else
        {
LABEL_75:
          v75 = 0;
          *(_OWORD *)cf1 = 0u;
          v74 = 0u;
        }
LABEL_91:
        AMCP::swap((AMCP::Thing *)cf1, (AMCP::Thing *)cf2, v17);
        if (v75)
          ((void (*)(_QWORD, CFTypeRef *, _QWORD, _QWORD))v75)(0, cf1, 0, 0);
        if (v72)
          goto LABEL_184;
        if (*a4 != AMCP::Implementation::get_type_marker<std::tuple<unsigned int,unsigned int>>()
          && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>())
        {
          goto LABEL_126;
        }
        if (*(_QWORD *)(a2 + 32))
        {
          cf1[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>();
          v24 = (const __CFDictionary **)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(a2 + 32))(4, a2, 0, cf1);
        }
        else
        {
          v24 = 0;
        }
        if (*a4 == AMCP::Implementation::get_type_marker<std::tuple<unsigned int,unsigned int>>())
        {
          if (v24)
          {
            if (!*v24)
            {
              v53 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v53, "Could not construct");
              __cxa_throw(v53, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)cf1, "u32 minimum");
            LODWORD(cf) = 0;
            v79 = CFNumberCreate(0, kCFNumberIntType, &cf);
            if (!v79)
            {
              v54 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v54, "Could not construct");
              __cxa_throw(v54, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v81, *v24, cf1[0], &v79);
            if (v79)
              CFRelease(v79);
            if (cf1[0])
              CFRelease(cf1[0]);
            if (!*v24)
            {
              v55 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v55, "Could not construct");
              __cxa_throw(v55, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)cf1, "u32 maximum");
            LODWORD(valuePtr) = 0;
            cf = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
            if (!cf)
            {
              v56 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v56, "Could not construct");
              __cxa_throw(v56, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v79, *v24, cf1[0], &cf);
            if (cf)
              CFRelease(cf);
            if (cf1[0])
              CFRelease(cf1[0]);
            v28 = v81;
            if (!v81)
            {
              v57 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v57, "Could not construct");
              __cxa_throw(v57, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            v29 = applesauce::CF::convert_to<double,0>(v81);
            v30 = v79;
            if (!v79)
            {
              v58 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v58, "Could not construct");
              __cxa_throw(v58, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            v31 = v29;
            v32 = applesauce::CF::convert_to<double,0>(v79);
            v74 = 0uLL;
            cf1[0] = (CFTypeRef)(v31 | ((unint64_t)v32 << 32));
            cf1[1] = 0;
            v75 = AMCP::Implementation::In_Place_Storage<std::tuple<unsigned int,unsigned int>>::dispatch;
            CFRelease(v30);
            CFRelease(v28);
            goto LABEL_127;
          }
LABEL_190:
          __assert_rtn("create_min_max_u32_from", "Thing.h", 1502, "in_value_ptr != nullptr");
        }
        if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>())
        {
          if (!v24)
            goto LABEL_190;
          v75 = 0;
          *(_OWORD *)cf1 = 0u;
          v74 = 0u;
          AMCP::Implementation::In_Place_Storage<applesauce::CF::DictionaryRef>::construct<applesauce::CF::DictionaryRef const&>((uint64_t)cf1, (CFTypeRef *)v24);
        }
        else
        {
LABEL_126:
          v75 = 0;
          *(_OWORD *)cf1 = 0u;
          v74 = 0u;
        }
LABEL_127:
        AMCP::swap((AMCP::Thing *)cf1, (AMCP::Thing *)cf2, v23);
        if (v75)
          ((void (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))v75)(0, (uint64_t)cf1, 0, 0);
        if (v72)
          goto LABEL_184;
        if (*a4 != AMCP::Implementation::get_type_marker<AudioValueRange>()
          && *a4 != AMCP::Implementation::get_type_marker<CA::ValueRange>()
          && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>())
        {
          goto LABEL_173;
        }
        if (*(_QWORD *)(a2 + 32))
        {
          cf1[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>();
          v34 = (const __CFDictionary **)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(a2 + 32))(4, a2, 0, cf1);
        }
        else
        {
          v34 = 0;
        }
        if (*a4 == AMCP::Implementation::get_type_marker<AudioValueRange>())
        {
          if (v34)
          {
            if (*v34)
            {
              applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)cf1, "float minimum");
              LODWORD(cf) = 0;
              v79 = CFNumberCreate(0, kCFNumberIntType, &cf);
              if (!v79)
              {
                v59 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v59, "Could not construct");
                __cxa_throw(v59, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v81, *v34, cf1[0], &v79);
              if (v79)
                CFRelease(v79);
              if (cf1[0])
                CFRelease(cf1[0]);
              if (!*v34)
              {
                v60 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v60, "Could not construct");
                __cxa_throw(v60, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)cf1, "float maximum");
              LODWORD(valuePtr) = 0;
              cf = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
              if (!cf)
              {
                v61 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v61, "Could not construct");
                __cxa_throw(v61, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v79, *v34, cf1[0], &cf);
              if (cf)
                CFRelease(cf);
              if (cf1[0])
                CFRelease(cf1[0]);
              v35 = v81;
              if (!v81)
              {
                v62 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v62, "Could not construct");
                __cxa_throw(v62, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              v36 = applesauce::CF::convert_to<double,0>(v81);
              v37 = v79;
              if (!v79)
              {
                v63 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v63, "Could not construct");
                __cxa_throw(v63, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              v38 = v36;
              v39 = applesauce::CF::convert_to<double,0>(v79);
              v74 = 0uLL;
              cf1[0] = *(CFTypeRef *)&v38;
              cf1[1] = *(CFTypeRef *)&v39;
              v75 = AMCP::Implementation::In_Place_Storage<AudioValueRange>::dispatch;
              CFRelease(v37);
              CFRelease(v35);
              goto LABEL_174;
            }
LABEL_209:
            v64 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v64, "Could not construct");
            __cxa_throw(v64, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          goto LABEL_191;
        }
        if (*a4 == AMCP::Implementation::get_type_marker<CA::ValueRange>())
        {
          if (v34)
          {
            if (*v34)
            {
              applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)cf1, "float minimum");
              LODWORD(cf) = 0;
              v79 = CFNumberCreate(0, kCFNumberIntType, &cf);
              if (!v79)
              {
                v65 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v65, "Could not construct");
                __cxa_throw(v65, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v81, *v34, cf1[0], &v79);
              if (v79)
                CFRelease(v79);
              if (cf1[0])
                CFRelease(cf1[0]);
              if (!*v34)
              {
                v66 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v66, "Could not construct");
                __cxa_throw(v66, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)cf1, "float maximum");
              LODWORD(valuePtr) = 0;
              cf = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
              if (!cf)
              {
                v67 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v67, "Could not construct");
                __cxa_throw(v67, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v79, *v34, cf1[0], &cf);
              if (cf)
                CFRelease(cf);
              if (cf1[0])
                CFRelease(cf1[0]);
              v40 = v81;
              if (!v81)
              {
                v68 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v68, "Could not construct");
                __cxa_throw(v68, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              v41 = applesauce::CF::convert_to<double,0>(v81);
              v42 = v79;
              if (!v79)
              {
                v69 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v69, "Could not construct");
                __cxa_throw(v69, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              v43 = v41;
              v44 = applesauce::CF::convert_to<double,0>(v79);
              v74 = 0uLL;
              cf1[0] = *(CFTypeRef *)&v43;
              cf1[1] = *(CFTypeRef *)&v44;
              v75 = AMCP::Implementation::In_Place_Storage<CA::ValueRange>::dispatch;
              CFRelease(v42);
              CFRelease(v40);
              goto LABEL_174;
            }
            goto LABEL_209;
          }
LABEL_191:
          __assert_rtn("create_value_range_from", "Thing.h", 1563, "in_value_ptr != nullptr");
        }
        if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>())
        {
          if (!v34)
            goto LABEL_191;
          v75 = 0;
          *(_OWORD *)cf1 = 0u;
          v74 = 0u;
          AMCP::Implementation::In_Place_Storage<applesauce::CF::DictionaryRef>::construct<applesauce::CF::DictionaryRef const&>((uint64_t)cf1, (CFTypeRef *)v34);
        }
        else
        {
LABEL_173:
          v75 = 0;
          *(_OWORD *)cf1 = 0u;
          v74 = 0u;
        }
LABEL_174:
        AMCP::swap((AMCP::Thing *)cf1, (AMCP::Thing *)cf2, v33);
        if (v75)
          ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t *))v75)(0, (uint64_t)cf1, 0, 0);
        if (!v72)
        {
          AMCP::Implementation::create_acl_from<applesauce::CF::DictionaryRef>((uint64_t)cf1, a2, a4);
          AMCP::swap((AMCP::Thing *)cf1, (AMCP::Thing *)cf2, v45);
          if (v75)
            ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t *))v75)(0, (uint64_t)cf1, 0, 0);
          if (!v72)
          {
            AMCP::Implementation::create_asbd_from<applesauce::CF::DictionaryRef>((uint64_t)cf1, a2, a4);
            AMCP::swap((AMCP::Thing *)cf1, (AMCP::Thing *)cf2, v46);
            if (v75)
              ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t *))v75)(0, (uint64_t)cf1, 0, 0);
            if (!v72)
            {
              AMCP::Implementation::create_available_format_from<applesauce::CF::DictionaryRef>((uint64_t)cf1, a2, a4);
              AMCP::swap((AMCP::Thing *)cf1, (AMCP::Thing *)cf2, v47);
              AMCP::Thing::~Thing((AMCP::Thing *)cf1);
            }
          }
        }
LABEL_184:
        AMCP::swap((AMCP::Thing *)cf2, (AMCP::Thing *)a3, v16);
        if (v72)
          v72(0, cf2, 0, 0);
        return 0;
      }
      __assert_rtn("create_cf_plist_from", "Thing.h", 2434, "in_value_ptr != nullptr");
    default:
      return result;
  }
}

void sub_1B5808270(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  void *v21;
  uint64_t v22;

  __cxa_free_exception(v21);
  applesauce::CF::NumberRef::~NumberRef((const void **)(v22 - 96));
  applesauce::CF::NumberRef::~NumberRef((const void **)(v22 - 80));
  __clang_call_terminate(a1);
}

double AMCP::Implementation::In_Place_Storage<applesauce::CF::DictionaryRef>::destruct(uint64_t a1)
{
  const void *v2;
  double result;

  v2 = *(const void **)a1;
  if (v2)
    CFRelease(v2);
  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t AMCP::Implementation::In_Place_Storage<applesauce::CF::DictionaryRef>::construct<applesauce::CF::DictionaryRef const&>(uint64_t a1, CFTypeRef *a2)
{
  CFTypeRef v3;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v3 = *a2;
  if (*a2)
    CFRetain(*a2);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<applesauce::CF::DictionaryRef>::dispatch;
  return a1;
}

CFTypeRef *AMCP::Thing::convert_to<applesauce::CF::DictionaryRef>(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, _QWORD, _QWORD);
  CFTypeRef *result;
  CFTypeRef v7;
  CFTypeRef v8;
  std::bad_cast *exception;
  std::bad_cast *v10;
  std::bad_cast *v11;
  std::bad_cast *v12;
  std::bad_cast *v13;
  std::bad_cast *v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[2];
  uint64_t (*v18)(uint64_t, _OWORD *, _QWORD, uint64_t *);
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, _QWORD, _QWORD);

  if (!*(_QWORD *)(a2 + 32))
    goto LABEL_16;
  v4 = AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>();
  v5 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a2 + 32);
  v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))v4)
  {
    v19 = v4;
    result = (CFTypeRef *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (result)
    {
      v7 = *result;
      if (*result)
        result = (CFTypeRef *)CFRetain(*result);
      *a1 = v7;
      return result;
    }
LABEL_16:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v16 = AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>();
  memset(v17, 0, sizeof(v17));
  v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v15 = v4;
  result = (CFTypeRef *)v18(4, v17, 0, &v15);
  if (!result)
  {
    v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v8 = *result;
  if (*result)
    result = (CFTypeRef *)CFRetain(*result);
  *a1 = v8;
  if (v18)
    return (CFTypeRef *)v18(0, v17, 0, 0);
  return result;
}

void sub_1B58086FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

void applesauce::CF::DictionaryRef::~DictionaryRef(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

double AMCP::Implementation::create_acl_from<applesauce::CF::DictionaryRef>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  CFTypeRef *v6;
  CFArrayRef v7;
  const __CFArray *v8;
  CFIndex Count;
  const __CFNumber *v10;
  CFIndex v11;
  int v12;
  CFTypeRef v13;
  int v14;
  int v15;
  unsigned int v16;
  std::vector<char>::pointer begin;
  uint64_t v18;
  unint64_t v19;
  const CFArrayCallBacks *v20;
  CFDictionaryRef v21;
  const __CFDictionary *v22;
  CFTypeRef v23;
  int v24;
  unint64_t v25;
  CFTypeRef v26;
  int v27;
  unint64_t v28;
  CFArrayRef v29;
  const __CFArray *v30;
  CFTypeRef v31;
  float v32;
  unint64_t v33;
  CFTypeRef v34;
  float v35;
  unint64_t v36;
  CFTypeRef v37;
  float v38;
  unint64_t v39;
  double result;
  std::runtime_error *v41;
  std::runtime_error *v42;
  std::runtime_error *v43;
  std::runtime_error *v44;
  std::runtime_error *v45;
  std::logic_error *v46;
  std::logic_error *v47;
  std::runtime_error *v48;
  std::runtime_error *v49;
  std::runtime_error *v50;
  std::runtime_error *v51;
  std::runtime_error *v52;
  std::logic_error *v53;
  std::logic_error *v54;
  std::runtime_error *v55;
  std::runtime_error *v56;
  std::logic_error *v57;
  std::runtime_error *exception;
  std::runtime_error *v59;
  std::runtime_error *v60;
  std::runtime_error *v61;
  std::runtime_error *v62;
  std::runtime_error *v63;
  std::runtime_error *v64;
  std::runtime_error *v65;
  CFTypeRef v66;
  int v67[2];
  CFTypeRef v68;
  CFTypeRef v69;
  CFTypeRef v70;
  std::vector<char> v71;
  CFTypeRef v72;
  CFNumberRef valuePtr;
  CFTypeRef cf;
  const __CFNumber *v75;
  int v76;

  if (*a3 != AMCP::Implementation::get_type_marker<CA::ChannelLayout>()
    && *a3 != AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>())
  {
    goto LABEL_83;
  }
  if (*(_QWORD *)(a2 + 32))
  {
    v71.__begin_ = (std::vector<char>::pointer)AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>();
    v6 = (CFTypeRef *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, std::vector<char> *))(a2 + 32))(4, a2, 0, &v71);
  }
  else
  {
    v6 = 0;
  }
  if (*a3 != AMCP::Implementation::get_type_marker<CA::ChannelLayout>())
  {
    if (*a3 == AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>())
    {
      if (v6)
      {
        *(_QWORD *)(a1 + 32) = 0;
        *(_OWORD *)a1 = 0u;
        *(_OWORD *)(a1 + 16) = 0u;
        AMCP::Implementation::In_Place_Storage<applesauce::CF::DictionaryRef>::construct<applesauce::CF::DictionaryRef const&>(a1, v6);
        return result;
      }
LABEL_90:
      __assert_rtn("create_acl_from", "Thing.h", 1632, "in_value_ptr != nullptr");
    }
LABEL_83:
    *(_QWORD *)(a1 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    return result;
  }
  if (!v6)
    goto LABEL_90;
  if (!*v6)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v71, "channel layout tag");
  LODWORD(valuePtr) = 0;
  cf = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!cf)
  {
    v59 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v59, "Could not construct");
    __cxa_throw(v59, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v75, (const __CFDictionary *)*v6, v71.__begin_, &cf);
  if (cf)
    CFRelease(cf);
  if (v71.__begin_)
    CFRelease(v71.__begin_);
  if (!*v6)
  {
    v60 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v60, "Could not construct");
    __cxa_throw(v60, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v71, "channel bitmap");
  LODWORD(v72) = 0;
  valuePtr = CFNumberCreate(0, kCFNumberIntType, &v72);
  if (!valuePtr)
  {
    v61 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v61, "Could not construct");
    __cxa_throw(v61, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&cf, (const __CFDictionary *)*v6, v71.__begin_, &valuePtr);
  if (valuePtr)
    CFRelease(valuePtr);
  if (v71.__begin_)
    CFRelease(v71.__begin_);
  if (!*v6)
  {
    v62 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v62, "Could not construct");
    __cxa_throw(v62, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v71, "channel descriptions");
  v7 = CFArrayCreate(0, 0, 0, MEMORY[0x1E0C9B380]);
  applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&v72, v7);
  applesauce::CF::at_or<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(&valuePtr, (const __CFDictionary *)*v6, v71.__begin_, &v72);
  if (v72)
    CFRelease(v72);
  *(_QWORD *)v67 = a1;
  if (v71.__begin_)
    CFRelease(v71.__begin_);
  v8 = valuePtr;
  if (!valuePtr)
  {
    v63 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v63, "Could not construct");
    __cxa_throw(v63, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  Count = CFArrayGetCount(valuePtr);
  v10 = v75;
  if (!v75)
  {
    v64 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v64, "Could not construct");
    __cxa_throw(v64, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v11 = Count;
  v12 = applesauce::CF::convert_to<unsigned int,0>(v75);
  v13 = cf;
  if (!cf)
  {
    v65 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v65, "Could not construct");
    __cxa_throw(v65, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v14 = v12;
  v15 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)cf);
  if (v11 <= 1)
    v16 = 1;
  else
    v16 = v11;
  LOBYTE(v72) = 0;
  std::vector<char>::vector(&v71, 20 * v16 + 12, (const std::vector<char>::value_type *)&v72);
  begin = v71.__begin_;
  *(_DWORD *)v71.__begin_ = v14;
  *((_DWORD *)begin + 1) = v15;
  *((_DWORD *)begin + 2) = v11;
  if (v11)
  {
    v66 = v13;
    v18 = 0;
    v19 = 0;
    v20 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B380];
    do
    {
      v21 = CFDictionaryCreate(0, 0, 0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
      applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v70, v21);
      applesauce::CF::at_or<applesauce::CF::DictionaryRef>(&v72, v8, v19, &v70);
      if (v70)
        CFRelease(v70);
      v22 = (const __CFDictionary *)v72;
      if (!v72)
      {
        v41 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v41, "Could not construct");
        __cxa_throw(v41, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v69, "channel label");
      v76 = -1;
      v68 = CFNumberCreate(0, kCFNumberIntType, &v76);
      if (!v68)
      {
        v42 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v42, "Could not construct");
        __cxa_throw(v42, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v70, v22, v69, &v68);
      v23 = v70;
      if (!v70)
      {
        v43 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v43, "Could not construct");
        __cxa_throw(v43, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v24 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v70);
      v25 = *((unsigned int *)v71.__begin_ + 2);
      if (v25 > (v71.__end_ - v71.__begin_ - 12) / 0x14uLL)
        __assert_rtn("GetNumberChannelDescriptions", "CoreAudioBaseTypes.hpp", 2237, "GetAudioChannelLayout().mNumberChannelDescriptions <= (mStorage.size() - kHeaderSize) / sizeof(AudioChannelDescription)");
      if (v19 >= v25)
      {
        v46 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v46, "accessing a CA::ChannelLayout with an out-of-range index");
        v46->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
        __cxa_throw(v46, (struct type_info *)off_1E696A668, (void (*)(void *))MEMORY[0x1E0DE42E0]);
      }
      *(_DWORD *)&v71.__begin_[v18 + 12] = v24;
      CFRelease(v23);
      if (v68)
        CFRelease(v68);
      if (v69)
        CFRelease(v69);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v69, "channel flags");
      v76 = 0;
      v68 = CFNumberCreate(0, kCFNumberIntType, &v76);
      if (!v68)
      {
        v44 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v44, "Could not construct");
        __cxa_throw(v44, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v70, v22, v69, &v68);
      v26 = v70;
      if (!v70)
      {
        v45 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v45, "Could not construct");
        __cxa_throw(v45, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v27 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v70);
      v28 = *((unsigned int *)v71.__begin_ + 2);
      if (v28 > (v71.__end_ - v71.__begin_ - 12) / 0x14uLL)
        __assert_rtn("GetNumberChannelDescriptions", "CoreAudioBaseTypes.hpp", 2237, "GetAudioChannelLayout().mNumberChannelDescriptions <= (mStorage.size() - kHeaderSize) / sizeof(AudioChannelDescription)");
      if (v19 >= v28)
      {
        v47 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v47, "accessing a CA::ChannelLayout with an out-of-range index");
        v47->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
        __cxa_throw(v47, (struct type_info *)off_1E696A668, (void (*)(void *))MEMORY[0x1E0DE42E0]);
      }
      *(_DWORD *)&v71.__begin_[v18 + 16] = v27;
      CFRelease(v26);
      if (v68)
        CFRelease(v68);
      if (v69)
        CFRelease(v69);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v69, "coordinates");
      v29 = CFArrayCreate(0, 0, 0, v20);
      applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&v68, v29);
      applesauce::CF::at_or<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(&v70, v22, v69, &v68);
      if (v68)
        CFRelease(v68);
      if (v69)
        CFRelease(v69);
      v30 = (const __CFArray *)v70;
      if (!v70)
      {
        v49 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v49, "Could not construct");
        __cxa_throw(v49, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v76 = 0;
      v68 = CFNumberCreate(0, kCFNumberIntType, &v76);
      if (!v68)
      {
        v50 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v50, "Could not construct");
        __cxa_throw(v50, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::at_or<applesauce::CF::NumberRef>(&v69, v30, 0, &v68);
      v31 = v69;
      if (!v69)
      {
        v48 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v48, "Could not construct");
        __cxa_throw(v48, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v32 = applesauce::CF::convert_to<float,0>((const __CFNumber *)v69);
      v33 = *((unsigned int *)v71.__begin_ + 2);
      if (v33 > (v71.__end_ - v71.__begin_ - 12) / 0x14uLL)
        __assert_rtn("GetNumberChannelDescriptions", "CoreAudioBaseTypes.hpp", 2237, "GetAudioChannelLayout().mNumberChannelDescriptions <= (mStorage.size() - kHeaderSize) / sizeof(AudioChannelDescription)");
      if (v19 >= v33)
      {
        v53 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v53, "accessing a CA::ChannelLayout with an out-of-range index");
        v53->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
        __cxa_throw(v53, (struct type_info *)off_1E696A668, (void (*)(void *))MEMORY[0x1E0DE42E0]);
      }
      *(float *)&v71.__begin_[v18 + 20] = v32;
      CFRelease(v31);
      if (v68)
        CFRelease(v68);
      v76 = 0;
      v68 = CFNumberCreate(0, kCFNumberIntType, &v76);
      if (!v68)
      {
        v52 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v52, "Could not construct");
        __cxa_throw(v52, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::at_or<applesauce::CF::NumberRef>(&v69, v30, 1uLL, &v68);
      v34 = v69;
      if (!v69)
      {
        v51 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v51, "Could not construct");
        __cxa_throw(v51, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v35 = applesauce::CF::convert_to<float,0>((const __CFNumber *)v69);
      v36 = *((unsigned int *)v71.__begin_ + 2);
      if (v36 > (v71.__end_ - v71.__begin_ - 12) / 0x14uLL)
        __assert_rtn("GetNumberChannelDescriptions", "CoreAudioBaseTypes.hpp", 2237, "GetAudioChannelLayout().mNumberChannelDescriptions <= (mStorage.size() - kHeaderSize) / sizeof(AudioChannelDescription)");
      if (v19 >= v36)
      {
        v54 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v54, "accessing a CA::ChannelLayout with an out-of-range index");
        v54->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
        __cxa_throw(v54, (struct type_info *)off_1E696A668, (void (*)(void *))MEMORY[0x1E0DE42E0]);
      }
      *(float *)&v71.__begin_[v18 + 24] = v35;
      CFRelease(v34);
      if (v68)
        CFRelease(v68);
      v76 = 0;
      v68 = CFNumberCreate(0, kCFNumberIntType, &v76);
      if (!v68)
      {
        v56 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v56, "Could not construct");
        __cxa_throw(v56, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::at_or<applesauce::CF::NumberRef>(&v69, v30, 2uLL, &v68);
      v37 = v69;
      if (!v69)
      {
        v55 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v55, "Could not construct");
        __cxa_throw(v55, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v38 = applesauce::CF::convert_to<float,0>((const __CFNumber *)v69);
      v39 = *((unsigned int *)v71.__begin_ + 2);
      if (v39 > (v71.__end_ - v71.__begin_ - 12) / 0x14uLL)
        __assert_rtn("GetNumberChannelDescriptions", "CoreAudioBaseTypes.hpp", 2237, "GetAudioChannelLayout().mNumberChannelDescriptions <= (mStorage.size() - kHeaderSize) / sizeof(AudioChannelDescription)");
      if (v19 >= v39)
      {
        v57 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v57, "accessing a CA::ChannelLayout with an out-of-range index");
        v57->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
        __cxa_throw(v57, (struct type_info *)off_1E696A668, (void (*)(void *))MEMORY[0x1E0DE42E0]);
      }
      *(float *)&v71.__begin_[v18 + 28] = v38;
      CFRelease(v37);
      if (v68)
        CFRelease(v68);
      CFRelease(v30);
      CFRelease(v22);
      ++v19;
      v18 += 20;
    }
    while (v11 != v19);
    begin = v71.__begin_;
    v13 = v66;
  }
  *(_QWORD *)(*(_QWORD *)v67 + 32) = 0;
  **(_OWORD **)v67 = 0u;
  *(_OWORD *)(*(_QWORD *)v67 + 16) = 0u;
  std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(*(_QWORD **)v67, begin, (uint64_t)v71.__end_, v71.__end_ - begin);
  *(_QWORD *)(*(_QWORD *)v67 + 32) = AMCP::Implementation::In_Place_Storage<CA::ChannelLayout>::dispatch;
  if (v71.__begin_)
  {
    v71.__end_ = v71.__begin_;
    operator delete(v71.__begin_);
  }
  CFRelease(v8);
  CFRelease(v13);
  CFRelease(v10);
  return result;
}

void sub_1B580942C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,uint64_t a23,char a24,int a25,const void *a26,const void *a27,const void *a28)
{
  void *v28;

  __cxa_free_exception(v28);
  applesauce::CF::ArrayRef::~ArrayRef(&a26);
  applesauce::CF::NumberRef::~NumberRef(&a27);
  applesauce::CF::NumberRef::~NumberRef(&a28);
  __clang_call_terminate(a1);
}

void AMCP::Implementation::create_asbd_from<applesauce::CF::DictionaryRef>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  const __CFDictionary **v6;
  const __CFNumber *v7;
  double v8;
  double v9;
  int v10;
  CFTypeRef v11;
  int v12;
  int v13;
  CFNumberRef v14;
  int v15;
  int v16;
  CFTypeRef v17;
  CFTypeRef v18;
  uint64_t v19;
  int v20;
  CFTypeRef v21;
  int v22;
  int v23;
  CFTypeRef v24;
  int v25;
  int v26;
  uint64_t v27;
  const __CFNumber *v28;
  double v29;
  double v30;
  int v31;
  CFTypeRef v32;
  int v33;
  int v34;
  CFNumberRef v35;
  int v36;
  int v37;
  CFTypeRef v38;
  CFTypeRef v39;
  uint64_t v40;
  int v41;
  CFTypeRef v42;
  int v43;
  int v44;
  CFTypeRef v45;
  int v46;
  int v47;
  uint64_t v48;
  std::runtime_error *exception;
  std::runtime_error *v50;
  std::runtime_error *v51;
  std::runtime_error *v52;
  std::runtime_error *v53;
  std::runtime_error *v54;
  std::runtime_error *v55;
  std::runtime_error *v56;
  std::runtime_error *v57;
  std::runtime_error *v58;
  std::runtime_error *v59;
  std::runtime_error *v60;
  std::runtime_error *v61;
  std::runtime_error *v62;
  std::runtime_error *v63;
  std::runtime_error *v64;
  std::runtime_error *v65;
  std::runtime_error *v66;
  std::runtime_error *v67;
  std::runtime_error *v68;
  std::runtime_error *v69;
  std::runtime_error *v70;
  std::runtime_error *v71;
  std::runtime_error *v72;
  std::runtime_error *v73;
  std::runtime_error *v74;
  std::runtime_error *v75;
  std::runtime_error *v76;
  std::runtime_error *v77;
  std::runtime_error *v78;
  std::runtime_error *v79;
  std::runtime_error *v80;
  std::runtime_error *v81;
  std::runtime_error *v82;
  std::runtime_error *v83;
  std::runtime_error *v84;
  std::runtime_error *v85;
  std::runtime_error *v86;
  std::runtime_error *v87;
  std::runtime_error *v88;
  std::runtime_error *v89;
  std::runtime_error *v90;
  std::runtime_error *v91;
  std::runtime_error *v92;
  std::runtime_error *v93;
  std::runtime_error *v94;
  std::runtime_error *v95;
  const __CFNumber *v96;
  const __CFNumber *v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  CFTypeRef v106;
  CFTypeRef v107;
  CFTypeRef v108;
  CFTypeRef v109;
  CFTypeRef v110;
  CFTypeRef v111;
  CFTypeRef v112;
  CFTypeRef v113;
  CFNumberRef valuePtr;
  CFTypeRef cf;
  CFTypeRef v116;
  const __CFNumber *v117;
  int v118;

  if (*a3 != AMCP::Implementation::get_type_marker<AudioStreamBasicDescription>()
    && *a3 != AMCP::Implementation::get_type_marker<CA::StreamDescription>()
    && *a3 != AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>())
  {
    goto LABEL_128;
  }
  if (*(_QWORD *)(a2 + 32))
  {
    v117 = (const __CFNumber *)AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>();
    v6 = (const __CFDictionary **)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, const __CFNumber **))(a2 + 32))(4, a2, 0, &v117);
  }
  else
  {
    v6 = 0;
  }
  if (*a3 == AMCP::Implementation::get_type_marker<AudioStreamBasicDescription>())
  {
    if (v6)
    {
      if (*v6)
      {
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v116, "sample rate");
        LODWORD(valuePtr) = 0;
        cf = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
        if (!cf)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
          __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v117, *v6, v116, &cf);
        if (cf)
          CFRelease(cf);
        if (v116)
          CFRelease(v116);
        if (!*v6)
        {
          v50 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v50, "Could not construct");
          __cxa_throw(v50, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "format id");
        LODWORD(v113) = 0;
        valuePtr = CFNumberCreate(0, kCFNumberIntType, &v113);
        if (!valuePtr)
        {
          v51 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v51, "Could not construct");
          __cxa_throw(v51, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v116, *v6, cf, &valuePtr);
        if (valuePtr)
          CFRelease(valuePtr);
        if (cf)
          CFRelease(cf);
        if (!*v6)
        {
          v52 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v52, "Could not construct");
          __cxa_throw(v52, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&valuePtr, "format flags");
        LODWORD(v112) = 0;
        v113 = CFNumberCreate(0, kCFNumberIntType, &v112);
        if (!v113)
        {
          v53 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v53, "Could not construct");
          __cxa_throw(v53, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&cf, *v6, valuePtr, &v113);
        if (v113)
          CFRelease(v113);
        if (valuePtr)
          CFRelease(valuePtr);
        if (!*v6)
        {
          v54 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v54, "Could not construct");
          __cxa_throw(v54, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v113, "bytes per packet");
        LODWORD(v111) = 0;
        v112 = CFNumberCreate(0, kCFNumberIntType, &v111);
        if (!v112)
        {
          v55 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v55, "Could not construct");
          __cxa_throw(v55, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&valuePtr, *v6, v113, &v112);
        if (v112)
          CFRelease(v112);
        if (v113)
          CFRelease(v113);
        if (!*v6)
        {
          v56 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v56, "Could not construct");
          __cxa_throw(v56, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v112, "frames per packet");
        LODWORD(v110) = 0;
        v111 = CFNumberCreate(0, kCFNumberIntType, &v110);
        if (!v111)
        {
          v57 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v57, "Could not construct");
          __cxa_throw(v57, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v113, *v6, v112, &v111);
        if (v111)
          CFRelease(v111);
        if (v112)
          CFRelease(v112);
        if (!*v6)
        {
          v58 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v58, "Could not construct");
          __cxa_throw(v58, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v111, "bytes per frame");
        LODWORD(v109) = 0;
        v110 = CFNumberCreate(0, kCFNumberIntType, &v109);
        if (!v110)
        {
          v59 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v59, "Could not construct");
          __cxa_throw(v59, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v112, *v6, v111, &v110);
        if (v110)
          CFRelease(v110);
        if (v111)
          CFRelease(v111);
        if (!*v6)
        {
          v60 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v60, "Could not construct");
          __cxa_throw(v60, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v110, "channels per frame");
        LODWORD(v108) = 0;
        v109 = CFNumberCreate(0, kCFNumberIntType, &v108);
        if (!v109)
        {
          v61 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v61, "Could not construct");
          __cxa_throw(v61, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v111, *v6, v110, &v109);
        if (v109)
          CFRelease(v109);
        if (v110)
          CFRelease(v110);
        if (!*v6)
        {
          v62 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v62, "Could not construct");
          __cxa_throw(v62, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v109, "bits per channel");
        v118 = 0;
        v108 = CFNumberCreate(0, kCFNumberIntType, &v118);
        if (!v108)
        {
          v63 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v63, "Could not construct");
          __cxa_throw(v63, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v110, *v6, v109, &v108);
        if (v108)
          CFRelease(v108);
        if (v109)
          CFRelease(v109);
        v7 = v117;
        if (!v117)
        {
          v64 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v64, "Could not construct");
          __cxa_throw(v64, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v8 = applesauce::CF::convert_to<double,0>(v117);
        if (!v116)
        {
          v65 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v65, "Could not construct");
          __cxa_throw(v65, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v9 = v8;
        v106 = v116;
        v10 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v116);
        v11 = cf;
        if (!cf)
        {
          v66 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v66, "Could not construct");
          __cxa_throw(v66, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v12 = v10;
        v13 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)cf);
        v14 = valuePtr;
        if (!valuePtr)
        {
          v67 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v67, "Could not construct");
          __cxa_throw(v67, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v15 = v13;
        v16 = applesauce::CF::convert_to<unsigned int,0>(valuePtr);
        v17 = v113;
        if (!v113)
        {
          v68 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v68, "Could not construct");
          __cxa_throw(v68, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v100 = v16;
        v102 = v15;
        v104 = v12;
        v98 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v113);
        v18 = v112;
        if (!v112)
        {
          v69 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v69, "Could not construct");
          __cxa_throw(v69, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v19 = a1;
        v20 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v112);
        v21 = v111;
        if (!v111)
        {
          v70 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v70, "Could not construct");
          __cxa_throw(v70, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v22 = v20;
        v96 = v7;
        v23 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v111);
        v24 = v110;
        if (!v110)
        {
          v71 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v71, "Could not construct");
          __cxa_throw(v71, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v25 = v23;
        v26 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v110);
        *(_OWORD *)v19 = 0u;
        *(_OWORD *)(v19 + 16) = 0u;
        *(_QWORD *)(v19 + 32) = AMCP::Implementation::Outboard_Storage<AudioStreamBasicDescription>::dispatch;
        v27 = operator new();
        *(double *)v27 = v9;
        *(_DWORD *)(v27 + 8) = v104;
        *(_DWORD *)(v27 + 12) = v102;
        *(_DWORD *)(v27 + 16) = v100;
        *(_DWORD *)(v27 + 20) = v98;
        *(_DWORD *)(v27 + 24) = v22;
        *(_DWORD *)(v27 + 28) = v25;
        *(_DWORD *)(v27 + 32) = v26;
        *(_DWORD *)(v27 + 36) = 0;
        *(_QWORD *)v19 = v27;
        CFRelease(v24);
        CFRelease(v21);
        CFRelease(v18);
        CFRelease(v17);
        CFRelease(v14);
        CFRelease(v11);
        CFRelease(v106);
        CFRelease(v96);
        return;
      }
LABEL_154:
      v72 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v72, "Could not construct");
      __cxa_throw(v72, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
LABEL_129:
    __assert_rtn("create_asbd_from", "Thing.h", 1718, "in_value_ptr != nullptr");
  }
  if (*a3 != AMCP::Implementation::get_type_marker<CA::StreamDescription>())
  {
    if (*a3 == AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>())
    {
      if (v6)
      {
        *(_QWORD *)(a1 + 32) = 0;
        *(_OWORD *)a1 = 0u;
        *(_OWORD *)(a1 + 16) = 0u;
        AMCP::Implementation::In_Place_Storage<applesauce::CF::DictionaryRef>::construct<applesauce::CF::DictionaryRef const&>(a1, (CFTypeRef *)v6);
        return;
      }
      goto LABEL_129;
    }
LABEL_128:
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    return;
  }
  if (!v6)
    goto LABEL_129;
  if (!*v6)
    goto LABEL_154;
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v116, "sample rate");
  LODWORD(valuePtr) = 0;
  cf = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!cf)
  {
    v73 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v73, "Could not construct");
    __cxa_throw(v73, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v117, *v6, v116, &cf);
  if (cf)
    CFRelease(cf);
  if (v116)
    CFRelease(v116);
  if (!*v6)
  {
    v74 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v74, "Could not construct");
    __cxa_throw(v74, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "format id");
  LODWORD(v113) = 0;
  valuePtr = CFNumberCreate(0, kCFNumberIntType, &v113);
  if (!valuePtr)
  {
    v75 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v75, "Could not construct");
    __cxa_throw(v75, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v116, *v6, cf, &valuePtr);
  if (valuePtr)
    CFRelease(valuePtr);
  if (cf)
    CFRelease(cf);
  if (!*v6)
  {
    v76 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v76, "Could not construct");
    __cxa_throw(v76, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&valuePtr, "format flags");
  LODWORD(v112) = 0;
  v113 = CFNumberCreate(0, kCFNumberIntType, &v112);
  if (!v113)
  {
    v77 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v77, "Could not construct");
    __cxa_throw(v77, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&cf, *v6, valuePtr, &v113);
  if (v113)
    CFRelease(v113);
  if (valuePtr)
    CFRelease(valuePtr);
  if (!*v6)
  {
    v78 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v78, "Could not construct");
    __cxa_throw(v78, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v113, "bytes per packet");
  LODWORD(v111) = 0;
  v112 = CFNumberCreate(0, kCFNumberIntType, &v111);
  if (!v112)
  {
    v79 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v79, "Could not construct");
    __cxa_throw(v79, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&valuePtr, *v6, v113, &v112);
  if (v112)
    CFRelease(v112);
  if (v113)
    CFRelease(v113);
  if (!*v6)
  {
    v80 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v80, "Could not construct");
    __cxa_throw(v80, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v112, "frames per packet");
  LODWORD(v110) = 0;
  v111 = CFNumberCreate(0, kCFNumberIntType, &v110);
  if (!v111)
  {
    v81 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v81, "Could not construct");
    __cxa_throw(v81, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v113, *v6, v112, &v111);
  if (v111)
    CFRelease(v111);
  if (v112)
    CFRelease(v112);
  if (!*v6)
  {
    v82 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v82, "Could not construct");
    __cxa_throw(v82, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v111, "bytes per frame");
  LODWORD(v109) = 0;
  v110 = CFNumberCreate(0, kCFNumberIntType, &v109);
  if (!v110)
  {
    v83 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v83, "Could not construct");
    __cxa_throw(v83, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v112, *v6, v111, &v110);
  if (v110)
    CFRelease(v110);
  if (v111)
    CFRelease(v111);
  if (!*v6)
  {
    v84 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v84, "Could not construct");
    __cxa_throw(v84, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v110, "channels per frame");
  LODWORD(v108) = 0;
  v109 = CFNumberCreate(0, kCFNumberIntType, &v108);
  if (!v109)
  {
    v85 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v85, "Could not construct");
    __cxa_throw(v85, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v111, *v6, v110, &v109);
  if (v109)
    CFRelease(v109);
  if (v110)
    CFRelease(v110);
  if (!*v6)
  {
    v86 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v86, "Could not construct");
    __cxa_throw(v86, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v109, "bits per channel");
  v118 = 0;
  v108 = CFNumberCreate(0, kCFNumberIntType, &v118);
  if (!v108)
  {
    v87 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v87, "Could not construct");
    __cxa_throw(v87, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v110, *v6, v109, &v108);
  if (v108)
    CFRelease(v108);
  if (v109)
    CFRelease(v109);
  v28 = v117;
  if (!v117)
  {
    v88 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v88, "Could not construct");
    __cxa_throw(v88, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v29 = applesauce::CF::convert_to<double,0>(v117);
  if (!v116)
  {
    v89 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v89, "Could not construct");
    __cxa_throw(v89, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v30 = v29;
  v107 = v116;
  v31 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v116);
  v32 = cf;
  if (!cf)
  {
    v90 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v90, "Could not construct");
    __cxa_throw(v90, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v33 = v31;
  v34 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)cf);
  v35 = valuePtr;
  if (!valuePtr)
  {
    v91 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v91, "Could not construct");
    __cxa_throw(v91, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v36 = v34;
  v37 = applesauce::CF::convert_to<unsigned int,0>(valuePtr);
  v38 = v113;
  if (!v113)
  {
    v92 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v92, "Could not construct");
    __cxa_throw(v92, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v101 = v37;
  v103 = v36;
  v105 = v33;
  v99 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v113);
  v39 = v112;
  if (!v112)
  {
    v93 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v93, "Could not construct");
    __cxa_throw(v93, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v40 = a1;
  v41 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v112);
  v42 = v111;
  if (!v111)
  {
    v94 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v94, "Could not construct");
    __cxa_throw(v94, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v43 = v41;
  v97 = v28;
  v44 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v111);
  v45 = v110;
  if (!v110)
  {
    v95 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v95, "Could not construct");
    __cxa_throw(v95, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v46 = v44;
  v47 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v110);
  *(_OWORD *)v40 = 0u;
  *(_OWORD *)(v40 + 16) = 0u;
  *(_QWORD *)(v40 + 32) = AMCP::Implementation::Outboard_Storage<CA::StreamDescription>::dispatch;
  v48 = operator new();
  *(double *)v48 = v30;
  *(_DWORD *)(v48 + 8) = v105;
  *(_DWORD *)(v48 + 12) = v103;
  *(_DWORD *)(v48 + 16) = v101;
  *(_DWORD *)(v48 + 20) = v99;
  *(_DWORD *)(v48 + 24) = v43;
  *(_DWORD *)(v48 + 28) = v46;
  *(_DWORD *)(v48 + 32) = v47;
  *(_DWORD *)(v48 + 36) = 0;
  *(_QWORD *)v40 = v48;
  CFRelease(v45);
  CFRelease(v42);
  CFRelease(v39);
  CFRelease(v38);
  CFRelease(v35);
  CFRelease(v32);
  CFRelease(v107);
  CFRelease(v97);
}

void sub_1B580AA60(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, int a16, const void *a17, const void *a18, const void *a19, const void *a20,const void *a21,const void *a22,const void *a23,const void *a24)
{
  void *v24;

  __cxa_free_exception(v24);
  applesauce::CF::NumberRef::~NumberRef(&a17);
  applesauce::CF::NumberRef::~NumberRef(&a18);
  applesauce::CF::NumberRef::~NumberRef(&a19);
  applesauce::CF::NumberRef::~NumberRef(&a20);
  applesauce::CF::NumberRef::~NumberRef(&a21);
  applesauce::CF::NumberRef::~NumberRef(&a22);
  applesauce::CF::NumberRef::~NumberRef(&a23);
  applesauce::CF::NumberRef::~NumberRef(&a24);
  __clang_call_terminate(a1);
}

void AMCP::Implementation::create_available_format_from<applesauce::CF::DictionaryRef>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  CFTypeRef *v6;
  CFIndex Count;
  CFIndex v8;
  CFIndex v9;
  unint64_t i;
  CFTypeRef v11;
  double v12;
  CFTypeRef v13;
  double v14;
  const __CFDictionary *v15;
  const void *v16;
  double v17;
  CFNumberRef v18;
  double v19;
  unsigned int v20;
  CFNumberRef v21;
  unsigned int v22;
  unsigned int v23;
  CFTypeRef v24;
  CFTypeRef v25;
  CFTypeRef v26;
  unsigned int v27;
  CFTypeRef v28;
  unsigned int v29;
  unsigned int v30;
  CFTypeRef v31;
  unsigned int v32;
  unsigned int v33;
  double *v34;
  uint64_t v35;
  __int128 v36;
  std::runtime_error *v37;
  std::runtime_error *v38;
  std::runtime_error *v39;
  std::runtime_error *v40;
  std::runtime_error *v41;
  std::runtime_error *v42;
  std::runtime_error *exception;
  std::runtime_error *v44;
  std::runtime_error *v45;
  std::runtime_error *v46;
  std::runtime_error *v47;
  std::runtime_error *v48;
  std::runtime_error *v49;
  std::runtime_error *v50;
  std::runtime_error *v51;
  std::runtime_error *v52;
  std::runtime_error *v53;
  std::runtime_error *v54;
  std::runtime_error *v55;
  std::runtime_error *v56;
  std::runtime_error *v57;
  std::runtime_error *v58;
  std::runtime_error *v59;
  std::runtime_error *v60;
  std::runtime_error *v61;
  const __CFDictionary *v62;
  CFTypeRef v63;
  CFNumberRef v64;
  CFNumberRef v65;
  unsigned int v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  const __CFArray *theArray;
  CFTypeRef cf[2];
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  CFTypeRef v76;
  CFTypeRef v77;
  CFTypeRef v78;
  CFTypeRef v79;
  CFTypeRef v80;
  CFTypeRef v81;
  CFNumberRef valuePtr;
  CFNumberRef v83;
  const void *v84;
  const __CFDictionary *v85;
  CFArrayRef v86;
  double *v87;
  uint64_t v88;
  uint64_t v89;
  _DWORD v90[3];

  if (*a3 != AMCP::Implementation::get_type_marker<std::tuple<CA::ValueRangeList,CA::StreamDescription>>()
    && *a3 != AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>())
  {
    goto LABEL_95;
  }
  if (*(_QWORD *)(a2 + 32))
  {
    cf[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>();
    v6 = (CFTypeRef *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(a2 + 32))(4, a2, 0, cf);
  }
  else
  {
    v6 = 0;
  }
  if (*a3 != AMCP::Implementation::get_type_marker<std::tuple<CA::ValueRangeList,CA::StreamDescription>>())
  {
    if (*a3 == AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>())
    {
      if (v6)
      {
        *(_QWORD *)(a1 + 32) = 0;
        *(_OWORD *)a1 = 0u;
        *(_OWORD *)(a1 + 16) = 0u;
        AMCP::Implementation::In_Place_Storage<applesauce::CF::DictionaryRef>::construct<applesauce::CF::DictionaryRef const&>(a1, v6);
        return;
      }
LABEL_97:
      __assert_rtn("create_available_format_from", "Thing.h", 2115, "in_value_ptr != nullptr");
    }
LABEL_95:
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    return;
  }
  if (!v6)
    goto LABEL_97;
  v87 = 0;
  v88 = 0;
  v89 = 0;
  if (!*v6)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)cf, "sample rate range list");
  v85 = 0;
  applesauce::CF::at_or<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(&v86, (const __CFDictionary *)*v6, cf[0], &v85);
  if (v85)
    CFRelease(v85);
  if (cf[0])
    CFRelease(cf[0]);
  theArray = v86;
  if (v86)
  {
    Count = CFArrayGetCount(v86);
    v8 = CFArrayGetCount(theArray);
    if (Count)
    {
      v9 = v8;
      for (i = 0; i != Count; ++i)
      {
        if (v9 == i)
          break;
        applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&v85, theArray, i);
        if (!v85)
        {
          v37 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v37, "Could not construct");
          __cxa_throw(v37, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v84, "minimum");
        LODWORD(valuePtr) = 0;
        v83 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
        if (!v83)
        {
          v40 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v40, "Could not construct");
          __cxa_throw(v40, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(cf, v85, v84, &v83);
        v11 = cf[0];
        if (!cf[0])
        {
          v38 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v38, "Could not construct");
          __cxa_throw(v38, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v12 = applesauce::CF::convert_to<double,0>((const __CFNumber *)cf[0]);
        CFRelease(v11);
        if (v83)
          CFRelease(v83);
        if (v84)
          CFRelease(v84);
        if (!v85)
        {
          v41 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v41, "Could not construct");
          __cxa_throw(v41, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v84, "maximum");
        LODWORD(valuePtr) = 0;
        v83 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
        if (!v83)
        {
          v39 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v39, "Could not construct");
          __cxa_throw(v39, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(cf, v85, v84, &v83);
        v13 = cf[0];
        if (!cf[0])
        {
          v42 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v42, "Could not construct");
          __cxa_throw(v42, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v14 = applesauce::CF::convert_to<double,0>((const __CFNumber *)cf[0]);
        CFRelease(v13);
        if (v83)
          CFRelease(v83);
        if (v84)
          CFRelease(v84);
        cf[0] = *(CFTypeRef *)&v12;
        cf[1] = *(CFTypeRef *)&v14;
        CA::ValueRangeList::AddRange(&v87, (double *)cf);
        if (v85)
          CFRelease(v85);
      }
    }
  }
  if (!*v6)
  {
    v44 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v44, "Could not construct");
    __cxa_throw(v44, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)cf, "format");
  v84 = 0;
  applesauce::CF::at_or<applesauce::CF::DictionaryRef,applesauce::CF::StringRef>(&v85, (const __CFDictionary *)*v6, cf[0], &v84);
  if (v84)
    CFRelease(v84);
  if (cf[0])
    CFRelease(cf[0]);
  v15 = v85;
  if (!v85)
  {
    v45 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v45, "Could not construct");
    __cxa_throw(v45, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)cf, "sample rate");
  LODWORD(valuePtr) = 0;
  v83 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v83)
  {
    v46 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v46, "Could not construct");
    __cxa_throw(v46, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v84, v15, cf[0], &v83);
  if (v83)
    CFRelease(v83);
  if (cf[0])
    CFRelease(cf[0]);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)cf, "format id");
  LODWORD(v81) = 0;
  valuePtr = CFNumberCreate(0, kCFNumberIntType, &v81);
  if (!valuePtr)
  {
    v47 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v47, "Could not construct");
    __cxa_throw(v47, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v83, v15, cf[0], &valuePtr);
  if (valuePtr)
    CFRelease(valuePtr);
  if (cf[0])
    CFRelease(cf[0]);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)cf, "format flags");
  LODWORD(v80) = 0;
  v81 = CFNumberCreate(0, kCFNumberIntType, &v80);
  if (!v81)
  {
    v48 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v48, "Could not construct");
    __cxa_throw(v48, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&valuePtr, v15, cf[0], &v81);
  if (v81)
    CFRelease(v81);
  if (cf[0])
    CFRelease(cf[0]);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)cf, "bytes per packet");
  LODWORD(v79) = 0;
  v80 = CFNumberCreate(0, kCFNumberIntType, &v79);
  if (!v80)
  {
    v49 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v49, "Could not construct");
    __cxa_throw(v49, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v81, v15, cf[0], &v80);
  if (v80)
    CFRelease(v80);
  if (cf[0])
    CFRelease(cf[0]);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)cf, "frames per packet");
  LODWORD(v78) = 0;
  v79 = CFNumberCreate(0, kCFNumberIntType, &v78);
  if (!v79)
  {
    v50 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v50, "Could not construct");
    __cxa_throw(v50, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v80, v15, cf[0], &v79);
  if (v79)
    CFRelease(v79);
  if (cf[0])
    CFRelease(cf[0]);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)cf, "bytes per frame");
  LODWORD(v77) = 0;
  v78 = CFNumberCreate(0, kCFNumberIntType, &v77);
  if (!v78)
  {
    v51 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v51, "Could not construct");
    __cxa_throw(v51, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v79, v15, cf[0], &v78);
  if (v78)
    CFRelease(v78);
  if (cf[0])
    CFRelease(cf[0]);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)cf, "channels per frame");
  LODWORD(v76) = 0;
  v77 = CFNumberCreate(0, kCFNumberIntType, &v76);
  if (!v77)
  {
    v52 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v52, "Could not construct");
    __cxa_throw(v52, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v78, v15, cf[0], &v77);
  if (v77)
    CFRelease(v77);
  if (cf[0])
    CFRelease(cf[0]);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)cf, "bits per channel");
  v90[0] = 0;
  v76 = CFNumberCreate(0, kCFNumberIntType, v90);
  if (!v76)
  {
    v53 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v53, "Could not construct");
    __cxa_throw(v53, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v77, v15, cf[0], &v76);
  if (v76)
    CFRelease(v76);
  if (cf[0])
    CFRelease(cf[0]);
  v16 = v84;
  if (!v84)
  {
    v54 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v54, "Could not construct");
    __cxa_throw(v54, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v17 = applesauce::CF::convert_to<double,0>((const __CFNumber *)v84);
  v18 = v83;
  if (!v83)
  {
    v55 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v55, "Could not construct");
    __cxa_throw(v55, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v19 = v17;
  v20 = applesauce::CF::convert_to<unsigned int,0>(v83);
  v21 = valuePtr;
  if (!valuePtr)
  {
    v56 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v56, "Could not construct");
    __cxa_throw(v56, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v22 = v20;
  v23 = applesauce::CF::convert_to<unsigned int,0>(valuePtr);
  v24 = v81;
  if (!v81)
  {
    v57 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v57, "Could not construct");
    __cxa_throw(v57, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v69 = v23;
  v68 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v81);
  v25 = v80;
  if (!v80)
  {
    v58 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v58, "Could not construct");
    __cxa_throw(v58, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v67 = a1;
  v66 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v80);
  v26 = v79;
  if (!v79)
  {
    v59 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v59, "Could not construct");
    __cxa_throw(v59, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v64 = v21;
  v27 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v79);
  v28 = v78;
  if (!v78)
  {
    v60 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v60, "Could not construct");
    __cxa_throw(v60, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v29 = v27;
  v65 = v18;
  v30 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v78);
  v31 = v77;
  if (!v77)
  {
    v61 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v61, "Could not construct");
    __cxa_throw(v61, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v32 = v30;
  v62 = v15;
  v63 = v16;
  v33 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v77);
  cf[0] = 0;
  cf[1] = 0;
  v72 = 0;
  v34 = v87;
  std::vector<CA::ValueRange>::__init_with_size[abi:ne180100]<CA::ValueRange*,CA::ValueRange*>(cf, v87, v88, (v88 - (uint64_t)v87) >> 4);
  *(double *)&v73 = v19;
  *((_QWORD *)&v73 + 1) = __PAIR64__(v69, v22);
  *(_QWORD *)&v74 = __PAIR64__(v66, v68);
  *((_QWORD *)&v74 + 1) = __PAIR64__(v32, v29);
  v75 = v33;
  *(_OWORD *)v67 = 0u;
  *(_OWORD *)(v67 + 16) = 0u;
  *(_QWORD *)(v67 + 32) = AMCP::Implementation::Outboard_Storage<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::dispatch;
  v35 = operator new();
  *(_OWORD *)v35 = *(_OWORD *)cf;
  *(_QWORD *)(v35 + 16) = v72;
  v36 = v74;
  *(_OWORD *)(v35 + 24) = v73;
  *(_OWORD *)(v35 + 40) = v36;
  *(_QWORD *)(v35 + 56) = v75;
  *(_QWORD *)v67 = v35;
  CFRelease(v31);
  CFRelease(v28);
  CFRelease(v26);
  CFRelease(v25);
  CFRelease(v24);
  CFRelease(v64);
  CFRelease(v65);
  CFRelease(v63);
  CFRelease(v62);
  if (theArray)
    CFRelease(theArray);
  if (v34)
    operator delete(v34);
}

void sub_1B580BB68(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,const void *a26,const void *a27,const void *a28,const void *a29,const void *a30,const void *a31)
{
  void *v31;
  uint64_t v32;
  void *v34;

  __cxa_free_exception(v31);
  applesauce::CF::NumberRef::~NumberRef(&a26);
  applesauce::CF::NumberRef::~NumberRef(&a27);
  applesauce::CF::NumberRef::~NumberRef(&a28);
  applesauce::CF::NumberRef::~NumberRef(&a29);
  applesauce::CF::NumberRef::~NumberRef(&a30);
  applesauce::CF::NumberRef::~NumberRef(&a31);
  applesauce::CF::NumberRef::~NumberRef((const void **)(v32 - 168));
  applesauce::CF::NumberRef::~NumberRef((const void **)(v32 - 160));
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v32 - 152));
  applesauce::CF::ArrayRef::~ArrayRef((const void **)(v32 - 144));
  v34 = *(void **)(v32 - 136);
  if (v34)
    operator delete(v34);
  __clang_call_terminate(a1);
}

uint64_t AMCP::Implementation::get_type_marker<std::tuple<CA::ValueRangeList,CA::StreamDescription>>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return v1[161];
}

uint64_t applesauce::CF::at_or<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(_QWORD *a1, const __CFDictionary *a2, const void *a3, _QWORD *a4)
{
  CFTypeRef v6;
  CFTypeRef cf;
  char v9;

  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(&cf, a2, a3);
  if (v9)
  {
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a1 = v6;
  }
  else
  {
    *a1 = *a4;
    *a4 = 0;
  }
  return std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
}

applesauce::CF::DictionaryRef *applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>(applesauce::CF::DictionaryRef *a1, CFArrayRef theArray, unint64_t a3)
{
  const void *ValueAtIndex;
  const void *v7;
  std::runtime_error *exception;

  if (!theArray
    || CFArrayGetCount(theArray) <= a3
    || (ValueAtIndex = CFArrayGetValueAtIndex(theArray, a3), (v7 = ValueAtIndex) == 0))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  CFRetain(ValueAtIndex);
  return applesauce::CF::DictionaryRef::DictionaryRef(a1, v7);
}

void sub_1B580C068(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(_QWORD *a1, const __CFDictionary *a2, const void *a3, _QWORD *a4)
{
  CFTypeRef v6;
  CFTypeRef cf;
  char v9;

  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&cf, a2, a3);
  if (v9)
  {
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a1 = v6;
  }
  else
  {
    *a1 = *a4;
    *a4 = 0;
  }
  return std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
}

double applesauce::CF::convert_to<double,0>(const __CFNumber *a1)
{
  double v1;
  char v2;
  std::runtime_error *exception;

  v1 = COERCE_DOUBLE(applesauce::CF::convert_as<double,0>(a1));
  if (!v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return v1;
}

void sub_1B580C134(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void CA::ValueRangeList::AddRange(double **a1, double *a2)
{
  double *v2;
  double *v4;
  double *v5;
  double *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  BOOL v13;
  double *v14;
  double v15;
  double v16;
  double *v17;
  double v18;
  double v19;
  BOOL v22;
  double v23;
  int64_t v24;
  double *v25;
  double *v26;
  unint64_t v27;
  double *v28;
  double *v29;
  double *v30;
  __int128 v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  double *v45;
  double *v46;
  double *v47;
  char *v48;
  double *v49;
  int64_t v50;
  double *v51;

  v2 = a2;
  v5 = *a1;
  v4 = a1[1];
  v6 = *a1;
  if (*a1 != v4)
  {
    v8 = *a2;
    v7 = a2[1];
    v6 = *a1;
    while (1)
    {
      v9 = *v6;
      if (v7 >= *v6)
      {
        v10 = v6[1];
        if (v8 < v9 && v7 <= v10)
          break;
        if (v8 < v9 && v7 > v10)
          break;
        v13 = v8 == v9 && v7 == v10;
        if (v13 || v8 > v9 && v7 < v10 || v8 >= v9 && v8 <= v10 && v7 > v10)
          break;
      }
      v6 += 2;
      if (v6 == v4)
        goto LABEL_59;
    }
  }
  if (v6 == v4)
  {
LABEL_59:
    if (v5 == v4)
    {
      v26 = *a1;
    }
    else
    {
      v26 = *a1;
      while (a2[1] >= *v26)
      {
        v26 += 2;
        if (v26 == v4)
        {
          v26 = a1[1];
          break;
        }
      }
    }
    v27 = (unint64_t)a1[2];
    if ((unint64_t)v4 >= v27)
    {
      v32 = (((char *)v4 - (char *)v5) >> 4) + 1;
      if (v32 >> 60)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v33 = (char *)v26 - (char *)v5;
      v34 = ((char *)v26 - (char *)v5) >> 4;
      v35 = v27 - (_QWORD)v5;
      if (v35 >> 3 > v32)
        v32 = v35 >> 3;
      if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF0)
        v36 = 0xFFFFFFFFFFFFFFFLL;
      else
        v36 = v32;
      if (v36)
      {
        v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v36);
      }
      else
      {
        v38 = 0;
        v37 = 0;
      }
      v39 = &v38[16 * v34];
      v40 = &v38[16 * v37];
      if (v34 == v37)
      {
        if (v33 < 1)
        {
          if (v5 == v26)
            v42 = 1;
          else
            v42 = v33 >> 3;
          v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v42);
          v39 = &v43[16 * (v42 >> 2)];
          v40 = &v43[16 * v44];
          if (v38)
            operator delete(v38);
        }
        else
        {
          v41 = v34 + 2;
          if (v34 >= -1)
            v41 = v34 + 1;
          v39 -= 16 * (v41 >> 1);
        }
      }
      *(_OWORD *)v39 = *(_OWORD *)v2;
      v45 = *a1;
      v46 = (double *)v39;
      if (*a1 != v26)
      {
        v47 = v26;
        v48 = v39;
        do
        {
          v46 = (double *)(v48 - 16);
          *((_OWORD *)v48 - 1) = *((_OWORD *)v47 - 1);
          v47 -= 2;
          v48 -= 16;
        }
        while (v47 != v45);
      }
      v49 = a1[1];
      v50 = (char *)v49 - (char *)v26;
      if (v49 != v26)
        memmove(v39 + 16, v26, (char *)v49 - (char *)v26);
      v51 = *a1;
      *a1 = v46;
      a1[1] = (double *)&v39[v50 + 16];
      a1[2] = (double *)v40;
      if (v51)
        operator delete(v51);
    }
    else
    {
      if (v26 == v4)
      {
        *(_OWORD *)v4 = *(_OWORD *)a2;
        v25 = v4 + 2;
LABEL_87:
        a1[1] = v25;
        return;
      }
      v28 = v26 + 2;
      v29 = v4 - 2;
      v30 = a1[1];
      while (v29 < v4)
      {
        v31 = *(_OWORD *)v29;
        v29 += 2;
        *(_OWORD *)v30 = v31;
        v30 += 2;
      }
      a1[1] = v30;
      if (v4 != v28)
        memmove(&v4[-2 * (((char *)v4 - (char *)v28) >> 4)], v26, (char *)v4 - (char *)v28);
      if (v26 <= v2)
        v2 += 2 * (a1[1] > v2);
      *(_OWORD *)v26 = *(_OWORD *)v2;
    }
  }
  else
  {
    v14 = v6 + 2;
    v15 = *a2;
    if (v6 + 2 == v4)
    {
LABEL_49:
      v17 = a1[1];
    }
    else
    {
      v16 = a2[1];
      v17 = v6 + 2;
      while (1)
      {
        v18 = *v17;
        if (v16 < *v17)
          break;
        v19 = v17[1];
        if ((v15 >= v18 || v16 > v19) && (v15 >= v18 || v16 <= v19))
        {
          v22 = v15 == v18 && v16 == v19;
          if (!v22 && (v15 <= v18 || v16 >= v19) && (v15 < v18 || v15 > v19 || v16 <= v19))
            break;
        }
        v17 += 2;
        if (v17 == v4)
          goto LABEL_49;
      }
    }
    if (v15 >= *v6)
      v15 = *v6;
    *v6 = v15;
    v23 = a2[1];
    if (v6 == v17 - 2)
    {
      if (v6[1] >= v23)
        v23 = v6[1];
      v6[1] = v23;
    }
    else
    {
      if (*(v17 - 1) >= v23)
        v23 = *(v17 - 1);
      v6[1] = v23;
      if (v14 != v17)
      {
        v24 = (char *)v4 - (char *)v17;
        if (v4 != v17)
          memmove(v14, v17, (char *)v4 - (char *)v17);
        v25 = (double *)((char *)v14 + v24);
        goto LABEL_87;
      }
    }
  }
}

void sub_1B580C508(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t applesauce::CF::at_or<applesauce::CF::DictionaryRef,applesauce::CF::StringRef>(_QWORD *a1, const __CFDictionary *a2, const void *a3, _QWORD *a4)
{
  CFTypeRef v6;
  CFTypeRef cf;
  char v9;

  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::DictionaryRef,applesauce::CF::StringRef>(&cf, a2, a3);
  if (v9)
  {
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a1 = v6;
  }
  else
  {
    *a1 = *a4;
    *a4 = 0;
  }
  return std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
}

unint64_t applesauce::CF::convert_to<unsigned int,0>(const __CFNumber *a1)
{
  unint64_t result;
  std::runtime_error *exception;

  result = applesauce::CF::convert_as<unsigned int,0>(a1);
  if (!HIDWORD(result))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1B580C5D4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<CA::ValueRange>::__init_with_size[abi:ne180100]<CA::ValueRange*,CA::ValueRange*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  _QWORD *v7;
  uint64_t v8;
  size_t v9;

  if (a4)
  {
    v4 = result;
    if (a4 >> 60)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(a4);
    v7 = result;
    *v4 = result;
    v4[1] = result;
    v4[2] = &result[2 * v8];
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memmove(result, a2, v9);
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_1B580C660(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Implementation::Outboard_Storage<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::dispatch(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, _QWORD, void **);
  void (*v17)(uint64_t, uint64_t, _QWORD, void **);
  uint64_t v18;
  AMCP::Thing *v19;
  uint64_t v20;
  _BOOL4 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  CFMutableArrayRef Mutable;
  void **v26;
  void **v27;
  const CFDictionaryKeyCallBacks *v28;
  const CFDictionaryValueCallBacks *v29;
  __CFDictionary *v30;
  __CFArray *v31;
  CFNumberRef v32;
  CFNumberRef v33;
  __CFDictionary *v34;
  CFNumberRef v35;
  CFNumberRef v36;
  CFNumberRef v37;
  CFNumberRef v38;
  CFNumberRef v39;
  CFNumberRef v40;
  CFNumberRef v41;
  CFNumberRef v42;
  CFMutableDictionaryRef v43;
  uint64_t v44;
  std::runtime_error *exception;
  std::runtime_error *v46;
  std::runtime_error *v47;
  std::runtime_error *v48;
  std::runtime_error *v49;
  std::runtime_error *v50;
  std::runtime_error *v51;
  std::runtime_error *v52;
  std::runtime_error *v53;
  std::runtime_error *v54;
  uint64_t v55;
  void *__p[8];
  void *valuePtr[2];
  __int128 v58;
  uint64_t (*v59)();
  const void *v60;
  CFMutableDictionaryRef v61;
  __CFDictionary *v62;

  switch((int)result)
  {
    case 0:
      goto LABEL_9;
    case 1:
      v7 = *(_QWORD *)a2;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::Outboard_Storage<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::dispatch;
      v8 = operator new();
      *(_QWORD *)(v8 + 8) = 0;
      *(_QWORD *)(v8 + 16) = 0;
      *(_QWORD *)v8 = 0;
      std::vector<CA::ValueRange>::__init_with_size[abi:ne180100]<CA::ValueRange*,CA::ValueRange*>((_QWORD *)v8, *(const void **)v7, *(_QWORD *)(v7 + 8), (uint64_t)(*(_QWORD *)(v7 + 8) - *(_QWORD *)v7) >> 4);
      result = 0;
      v9 = *(_OWORD *)(v7 + 24);
      v10 = *(_OWORD *)(v7 + 40);
      *(_QWORD *)(v8 + 56) = *(_QWORD *)(v7 + 56);
      *(_OWORD *)(v8 + 40) = v10;
      *(_OWORD *)(v8 + 24) = v9;
      *(_QWORD *)a3 = v8;
      return result;
    case 2:
      v11 = *(_QWORD *)a2;
      *(_QWORD *)a2 = 0;
      v12 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v11;
      if (v12)
        std::default_delete<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::operator()[abi:ne180100](v12);
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::Outboard_Storage<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::dispatch;
LABEL_9:
      v13 = *(_QWORD *)a2;
      *(_QWORD *)a2 = 0;
      if (v13)
        std::default_delete<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::operator()[abi:ne180100](v13);
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      v14 = AMCP::Implementation::get_type_marker<std::tuple<CA::ValueRangeList,CA::StreamDescription>>();
      result = 0;
      *a4 = v14;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::tuple<CA::ValueRangeList,CA::StreamDescription>>())
        return *(_QWORD *)a2;
      else
        return 0;
    case 5:
      v15 = AMCP::Implementation::get_type_marker<std::tuple<CA::ValueRangeList,CA::StreamDescription>>();
      v16 = *(void (**)(uint64_t, uint64_t, _QWORD, void **))(a2 + 32);
      valuePtr[0] = 0;
      if (v16)
      {
        v16(3, a2, 0, valuePtr);
        v16 = (void (*)(uint64_t, uint64_t, _QWORD, void **))valuePtr[0];
      }
      if (v16 != (void (*)(uint64_t, uint64_t, _QWORD, void **))v15)
        goto LABEL_25;
      v17 = *(void (**)(uint64_t, uint64_t, _QWORD, void **))(a3 + 32);
      __p[0] = 0;
      if (v17)
      {
        v17(3, a3, 0, __p);
        v17 = (void (*)(uint64_t, uint64_t, _QWORD, void **))__p[0];
      }
      if (v17 == (void (*)(uint64_t, uint64_t, _QWORD, void **))v15)
      {
        if (*(_QWORD *)(a2 + 32))
        {
          valuePtr[0] = (void *)AMCP::Implementation::get_type_marker<std::tuple<CA::ValueRangeList,CA::StreamDescription>>();
          v18 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, void **))(a2 + 32))(4, a2, 0, valuePtr);
        }
        else
        {
          v18 = 0;
        }
        valuePtr[0] = (void *)AMCP::Implementation::get_type_marker<std::tuple<CA::ValueRangeList,CA::StreamDescription>>();
        v44 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, void **))(a3 + 32))(4, a3, 0, valuePtr);
        if (std::__tuple_equal<2ul>::operator()[abi:ne180100]<std::tuple<CA::ValueRangeList,CA::StreamDescription>,std::tuple<CA::ValueRangeList,CA::StreamDescription>>(v18, v44))
        {
          return 1;
        }
      }
      else
      {
LABEL_25:
        AMCP::Thing::convert_to<std::tuple<CA::ValueRangeList,CA::StreamDescription>>((uint64_t)valuePtr, a2);
        AMCP::Thing::convert_to<std::tuple<CA::ValueRangeList,CA::StreamDescription>>((uint64_t)__p, a3);
        v21 = std::__tuple_equal<2ul>::operator()[abi:ne180100]<std::tuple<CA::ValueRangeList,CA::StreamDescription>,std::tuple<CA::ValueRangeList,CA::StreamDescription>>((uint64_t)valuePtr, (uint64_t)__p);
        if (__p[0])
          operator delete(__p[0]);
        if (valuePtr[0])
          operator delete(valuePtr[0]);
        if (v21)
          return 1;
      }
      return 0;
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<std::tuple<CA::ValueRangeList,CA::StreamDescription>>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>())
      {
        goto LABEL_88;
      }
      if (*(_QWORD *)(a2 + 32))
      {
        valuePtr[0] = (void *)AMCP::Implementation::get_type_marker<std::tuple<CA::ValueRangeList,CA::StreamDescription>>();
        v20 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, void **))(a2 + 32))(4, a2, 0, valuePtr);
      }
      else
      {
        v20 = 0;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<std::tuple<CA::ValueRangeList,CA::StreamDescription>>())
      {
        if (v20)
        {
          *(_OWORD *)valuePtr = 0u;
          v58 = 0u;
          v59 = AMCP::Implementation::Outboard_Storage<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::dispatch;
          v22 = operator new();
          *(_QWORD *)v22 = 0;
          *(_QWORD *)(v22 + 8) = 0;
          *(_QWORD *)(v22 + 16) = 0;
          std::vector<CA::ValueRange>::__init_with_size[abi:ne180100]<CA::ValueRange*,CA::ValueRange*>((_QWORD *)v22, *(const void **)v20, *(_QWORD *)(v20 + 8), (uint64_t)(*(_QWORD *)(v20 + 8) - *(_QWORD *)v20) >> 4);
          v23 = *(_OWORD *)(v20 + 24);
          v24 = *(_OWORD *)(v20 + 40);
          *(_QWORD *)(v22 + 56) = *(_QWORD *)(v20 + 56);
          *(_OWORD *)(v22 + 40) = v24;
          *(_OWORD *)(v22 + 24) = v23;
          valuePtr[0] = (void *)v22;
          goto LABEL_89;
        }
LABEL_96:
        __assert_rtn("create_available_format_from", "Thing.h", 2115, "in_value_ptr != nullptr");
      }
      if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>())
      {
        if (v20)
        {
          Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B380]);
          v55 = v20;
          __p[0] = Mutable;
          v27 = *(void ***)v20;
          v26 = *(void ***)(v20 + 8);
          if (*(void ***)v20 != v26)
          {
            v28 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B398];
            v29 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A8];
            do
            {
              v30 = CFDictionaryCreateMutable(0, 0, v28, v29);
              v31 = Mutable;
              v62 = v30;
              applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v61, "minimum");
              valuePtr[0] = *v27;
              v32 = CFNumberCreate(0, kCFNumberDoubleType, valuePtr);
              if (!v32)
              {
                exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(exception, "Could not construct");
                __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v30, v61, v32);
              CFRelease(v32);
              if (v61)
                CFRelease(v61);
              applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v61, "maximum");
              valuePtr[0] = v27[1];
              v33 = CFNumberCreate(0, kCFNumberDoubleType, valuePtr);
              if (!v33)
              {
                v46 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v46, "Could not construct");
                __cxa_throw(v46, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v30, v61, v33);
              CFRelease(v33);
              Mutable = v31;
              if (v61)
                CFRelease(v61);
              mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)valuePtr, v30);
              mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::DictionaryRef>(v31, valuePtr[0]);
              if (valuePtr[0])
                CFRelease(valuePtr[0]);
              if (v30)
                CFRelease(v30);
              v27 += 2;
            }
            while (v27 != v26);
          }
          v34 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
          v62 = v34;
          applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v61, "sample rate");
          valuePtr[0] = *(void **)(v55 + 24);
          v35 = CFNumberCreate(0, kCFNumberDoubleType, valuePtr);
          if (!v35)
          {
            v47 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v47, "Could not construct");
            __cxa_throw(v47, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v34, v61, v35);
          CFRelease(v35);
          if (v61)
            CFRelease(v61);
          applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)valuePtr, "format id");
          LODWORD(v61) = *(_DWORD *)(v55 + 32);
          v36 = CFNumberCreate(0, kCFNumberIntType, &v61);
          if (!v36)
          {
            v48 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v48, "Could not construct");
            __cxa_throw(v48, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v34, valuePtr[0], v36);
          CFRelease(v36);
          if (valuePtr[0])
            CFRelease(valuePtr[0]);
          applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)valuePtr, "format flags");
          LODWORD(v61) = *(_DWORD *)(v55 + 36);
          v37 = CFNumberCreate(0, kCFNumberIntType, &v61);
          if (!v37)
          {
            v49 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v49, "Could not construct");
            __cxa_throw(v49, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v34, valuePtr[0], v37);
          CFRelease(v37);
          if (valuePtr[0])
            CFRelease(valuePtr[0]);
          applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)valuePtr, "bytes per packet");
          LODWORD(v61) = *(_DWORD *)(v55 + 40);
          v38 = CFNumberCreate(0, kCFNumberIntType, &v61);
          if (!v38)
          {
            v50 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v50, "Could not construct");
            __cxa_throw(v50, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v34, valuePtr[0], v38);
          CFRelease(v38);
          if (valuePtr[0])
            CFRelease(valuePtr[0]);
          applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)valuePtr, "frames per packet");
          LODWORD(v61) = *(_DWORD *)(v55 + 44);
          v39 = CFNumberCreate(0, kCFNumberIntType, &v61);
          if (!v39)
          {
            v51 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v51, "Could not construct");
            __cxa_throw(v51, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v34, valuePtr[0], v39);
          CFRelease(v39);
          if (valuePtr[0])
            CFRelease(valuePtr[0]);
          applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)valuePtr, "bytes per frame");
          LODWORD(v61) = *(_DWORD *)(v55 + 48);
          v40 = CFNumberCreate(0, kCFNumberIntType, &v61);
          if (!v40)
          {
            v52 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v52, "Could not construct");
            __cxa_throw(v52, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v34, valuePtr[0], v40);
          CFRelease(v40);
          if (valuePtr[0])
            CFRelease(valuePtr[0]);
          applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)valuePtr, "channels per frame");
          LODWORD(v61) = *(_DWORD *)(v55 + 52);
          v41 = CFNumberCreate(0, kCFNumberIntType, &v61);
          if (!v41)
          {
            v53 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v53, "Could not construct");
            __cxa_throw(v53, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v34, valuePtr[0], v41);
          CFRelease(v41);
          if (valuePtr[0])
            CFRelease(valuePtr[0]);
          applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)valuePtr, "bits per channel");
          LODWORD(v61) = *(_DWORD *)(v55 + 56);
          v42 = CFNumberCreate(0, kCFNumberIntType, &v61);
          if (!v42)
          {
            v54 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v54, "Could not construct");
            __cxa_throw(v54, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v34, valuePtr[0], v42);
          CFRelease(v42);
          if (valuePtr[0])
            CFRelease(valuePtr[0]);
          v43 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
          v61 = v43;
          applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)valuePtr, "sample rate range list");
          mcp_applesauce::CF::Array_Builder::get_array((applesauce::CF::ArrayRef *)&v60, Mutable);
          mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::ArrayRef>(v43, valuePtr[0], v60);
          if (v60)
            CFRelease(v60);
          if (valuePtr[0])
            CFRelease(valuePtr[0]);
          applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)valuePtr, "format");
          mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v60, v34);
          mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::DictionaryRef>(v43, valuePtr[0], v60);
          if (v60)
            CFRelease(v60);
          if (valuePtr[0])
            CFRelease(valuePtr[0]);
          mcp_applesauce::CF::Dictionary_Builder::copy_dictionary((applesauce::CF::DictionaryRef *)valuePtr, v43);
          valuePtr[1] = 0;
          v58 = 0uLL;
          v59 = AMCP::Implementation::In_Place_Storage<applesauce::CF::DictionaryRef>::dispatch;
          if (v43)
            CFRelease(v43);
          if (v34)
            CFRelease(v34);
          if (Mutable)
            CFRelease(Mutable);
          goto LABEL_89;
        }
        goto LABEL_96;
      }
LABEL_88:
      v59 = 0;
      *(_OWORD *)valuePtr = 0u;
      v58 = 0u;
LABEL_89:
      AMCP::swap((AMCP::Thing *)valuePtr, (AMCP::Thing *)a3, v19);
      if (v59)
        ((void (*)(_QWORD, void **, _QWORD, _QWORD))v59)(0, valuePtr, 0, 0);
      return 0;
    default:
      return result;
  }
}

void sub_1B580D130(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, const void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p)
{
  uint64_t v19;

  applesauce::CF::StringRef::~StringRef((const void **)&__p);
  mcp_applesauce::CF::Dictionary_Builder::~Dictionary_Builder((const void **)(v19 - 96));
  mcp_applesauce::CF::Array_Builder::~Array_Builder(&a11);
  __clang_call_terminate(a1);
}

void applesauce::CF::ArrayRef::~ArrayRef(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

void std::default_delete<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::operator()[abi:ne180100](uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1B5E50688);
}

BOOL std::__tuple_equal<2ul>::operator()[abi:ne180100]<std::tuple<CA::ValueRangeList,CA::StreamDescription>,std::tuple<CA::ValueRangeList,CA::StreamDescription>>(uint64_t a1, uint64_t a2)
{
  double *v4;
  double *v5;
  double *i;
  _BOOL8 result;

  v4 = *(double **)a1;
  v5 = *(double **)(a1 + 8);
  if (*(double **)a1 == v5)
  {
    return *(double *)(a1 + 24) == *(double *)(a2 + 24)
        && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32)
        && *(_DWORD *)(a1 + 36) == *(_DWORD *)(a2 + 36)
        && *(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40)
        && *(_DWORD *)(a1 + 44) == *(_DWORD *)(a2 + 44)
        && *(_DWORD *)(a1 + 48) == *(_DWORD *)(a2 + 48)
        && *(_DWORD *)(a1 + 52) == *(_DWORD *)(a2 + 52)
        && *(_DWORD *)(a1 + 56) == *(_DWORD *)(a2 + 56);
  }
  else
  {
    for (i = *(double **)a2; ; i += 2)
    {
      result = CA::operator==(*v4, v4[1], *i, i[1]);
      if (!result)
        break;
      v4 += 2;
      if (v4 == v5)
        return *(double *)(a1 + 24) == *(double *)(a2 + 24)
            && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32)
            && *(_DWORD *)(a1 + 36) == *(_DWORD *)(a2 + 36)
            && *(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40)
            && *(_DWORD *)(a1 + 44) == *(_DWORD *)(a2 + 44)
            && *(_DWORD *)(a1 + 48) == *(_DWORD *)(a2 + 48)
            && *(_DWORD *)(a1 + 52) == *(_DWORD *)(a2 + 52)
            && *(_DWORD *)(a1 + 56) == *(_DWORD *)(a2 + 56);
    }
  }
  return result;
}

_QWORD *AMCP::Thing::convert_to<std::tuple<CA::ValueRangeList,CA::StreamDescription>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  std::bad_cast *exception;
  std::bad_cast *v12;
  std::bad_cast *v13;
  std::bad_cast *v14;
  std::bad_cast *v15;
  std::bad_cast *v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD v19[2];
  uint64_t (*v20)(uint64_t, _OWORD *, _QWORD, uint64_t *);
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, _QWORD, _QWORD);

  if (!*(_QWORD *)(a2 + 32))
    goto LABEL_12;
  v4 = AMCP::Implementation::get_type_marker<std::tuple<CA::ValueRangeList,CA::StreamDescription>>();
  v5 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a2 + 32);
  v22 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v22);
    v5 = v22;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))v4)
  {
    v21 = v4;
    v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a2 + 32))(4, a2, 0, &v21);
    if (v6)
    {
      v7 = v6;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      result = std::vector<CA::ValueRange>::__init_with_size[abi:ne180100]<CA::ValueRange*,CA::ValueRange*>((_QWORD *)a1, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 4);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(v7 + 24);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(v7 + 40);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(v7 + 56);
      return result;
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v12 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v12, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v18 = AMCP::Implementation::get_type_marker<std::tuple<CA::ValueRangeList,CA::StreamDescription>>();
  memset(v19, 0, sizeof(v19));
  v20 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v19, &v18);
  if (!v20)
  {
    v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v17 = v4;
  v9 = v20(4, v19, 0, &v17);
  v10 = v9;
  if (!v9)
  {
    v15 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v16 = std::bad_cast::bad_cast(v15);
    __cxa_throw(v16, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  result = std::vector<CA::ValueRange>::__init_with_size[abi:ne180100]<CA::ValueRange*,CA::ValueRange*>((_QWORD *)a1, *(const void **)v9, *(_QWORD *)(v9 + 8), (uint64_t)(*(_QWORD *)(v9 + 8) - *(_QWORD *)v9) >> 4);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v10 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(v10 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(v10 + 56);
  if (v20)
    return (_QWORD *)v20(0, v19, 0, 0);
  return result;
}

void sub_1B580D668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

void mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(__CFDictionary *a1, const void *a2, const void *a3)
{
  if (a1)
    CFDictionarySetValue(a1, a2, a3);
}

applesauce::CF::DictionaryRef *mcp_applesauce::CF::Dictionary_Builder::get_dictionary(applesauce::CF::DictionaryRef *this, const void *a2)
{
  applesauce::CF::DictionaryRef *v2;

  v2 = this;
  if (a2)
  {
    CFRetain(a2);
    return applesauce::CF::DictionaryRef::DictionaryRef(v2, a2);
  }
  else
  {
    *(_QWORD *)this = 0;
  }
  return this;
}

void mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::DictionaryRef>(__CFArray *a1, const void *a2)
{
  if (a1)
    CFArrayAppendValue(a1, a2);
}

void mcp_applesauce::CF::Dictionary_Builder::~Dictionary_Builder(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

applesauce::CF::ArrayRef *mcp_applesauce::CF::Array_Builder::get_array(applesauce::CF::ArrayRef *this, const void *a2)
{
  applesauce::CF::ArrayRef *v2;

  v2 = this;
  if (a2)
  {
    CFRetain(a2);
    return applesauce::CF::ArrayRef::ArrayRef(v2, a2);
  }
  else
  {
    *(_QWORD *)this = 0;
  }
  return this;
}

void mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::ArrayRef>(__CFDictionary *a1, const void *a2, const void *a3)
{
  if (a1)
    CFDictionarySetValue(a1, a2, a3);
}

void mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::DictionaryRef>(__CFDictionary *a1, const void *a2, const void *a3)
{
  if (a1)
    CFDictionarySetValue(a1, a2, a3);
}

applesauce::CF::DictionaryRef *mcp_applesauce::CF::Dictionary_Builder::copy_dictionary(applesauce::CF::DictionaryRef *this, const __CFDictionary *a2)
{
  applesauce::CF::DictionaryRef *v2;
  CFDictionaryRef Copy;

  v2 = this;
  if (a2)
  {
    Copy = CFDictionaryCreateCopy(0, a2);
    return applesauce::CF::DictionaryRef::DictionaryRef(v2, Copy);
  }
  else
  {
    *(_QWORD *)this = 0;
  }
  return this;
}

void mcp_applesauce::CF::Array_Builder::~Array_Builder(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

applesauce::CF::DictionaryRef *applesauce::CF::DictionaryRef::DictionaryRef(applesauce::CF::DictionaryRef *this, CFTypeRef cf)
{
  CFTypeID v3;
  std::runtime_error *exception;

  *(_QWORD *)this = cf;
  if (cf)
  {
    v3 = CFGetTypeID(cf);
    if (v3 != CFDictionaryGetTypeID())
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  return this;
}

void sub_1B580D8A4(_Unwind_Exception *a1)
{
  CFTypeRef *v1;
  void *v2;

  __cxa_free_exception(v2);
  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(a1);
}

applesauce::CF::ArrayRef *applesauce::CF::ArrayRef::ArrayRef(applesauce::CF::ArrayRef *this, CFTypeRef cf)
{
  CFTypeID v3;
  std::runtime_error *exception;

  *(_QWORD *)this = cf;
  if (cf)
  {
    v3 = CFGetTypeID(cf);
    if (v3 != CFArrayGetTypeID())
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  return this;
}

void sub_1B580D950(_Unwind_Exception *a1)
{
  CFTypeRef *v1;
  void *v2;

  __cxa_free_exception(v2);
  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(a1);
}

BOOL CA::operator==(double a1, double a2, double a3, double a4)
{
  BOOL v4;

  if (a2 < a3)
    return 0;
  v4 = a1 >= a3 || a2 > a4;
  if (!v4 || a1 < a3 && a2 > a4)
    return 0;
  if (a2 == a4)
    return a1 == a3;
  return 0;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(unint64_t a1)
{
  if (a1 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a1);
}

void applesauce::CF::details::find_at_key_or_optional<applesauce::CF::DictionaryRef,applesauce::CF::StringRef>(_BYTE *a1, CFDictionaryRef theDict, const void *a3)
{
  const void *v4;
  const void *v5;
  CFTypeID v6;
  char v7;

  v4 = applesauce::CF::details::at_key<applesauce::CF::StringRef>(theDict, a3);
  if (!v4)
    goto LABEL_5;
  v5 = v4;
  CFRetain(v4);
  v6 = CFGetTypeID(v5);
  if (v6 != CFDictionaryGetTypeID())
  {
    CFRelease(v5);
LABEL_5:
    v7 = 0;
    *a1 = 0;
    goto LABEL_6;
  }
  *(_QWORD *)a1 = v5;
  v7 = 1;
LABEL_6:
  a1[8] = v7;
}

const void *applesauce::CF::details::at_key<applesauce::CF::StringRef>(CFDictionaryRef theDict, const void *a2)
{
  const void *result;

  result = 0;
  if (theDict)
  {
    if (a2)
      return CFDictionaryGetValue(theDict, a2);
  }
  return result;
}

void applesauce::CF::details::find_at_key_or_optional<applesauce::CF::NumberRef,applesauce::CF::StringRef>(_BYTE *a1, CFDictionaryRef theDict, const void *a3)
{
  const void *v4;
  const void *v5;
  CFTypeID v6;
  char v7;

  v4 = applesauce::CF::details::at_key<applesauce::CF::StringRef>(theDict, a3);
  if (!v4)
    goto LABEL_5;
  v5 = v4;
  CFRetain(v4);
  v6 = CFGetTypeID(v5);
  if (v6 != CFNumberGetTypeID())
  {
    CFRelease(v5);
LABEL_5:
    v7 = 0;
    *a1 = 0;
    goto LABEL_6;
  }
  *(_QWORD *)a1 = v5;
  v7 = 1;
LABEL_6:
  a1[8] = v7;
}

std::runtime_error *applesauce::CF::not_found(std::runtime_error *this)
{
  return std::runtime_error::runtime_error(this, "Could not find item");
}

void applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(_BYTE *a1, CFDictionaryRef theDict, const void *a3)
{
  const void *v4;
  const void *v5;
  CFTypeID v6;
  char v7;

  v4 = applesauce::CF::details::at_key<applesauce::CF::StringRef>(theDict, a3);
  if (!v4)
    goto LABEL_5;
  v5 = v4;
  CFRetain(v4);
  v6 = CFGetTypeID(v5);
  if (v6 != CFArrayGetTypeID())
  {
    CFRelease(v5);
LABEL_5:
    v7 = 0;
    *a1 = 0;
    goto LABEL_6;
  }
  *(_QWORD *)a1 = v5;
  v7 = 1;
LABEL_6:
  a1[8] = v7;
}

uint64_t std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  const void *v2;

  if (*(_BYTE *)(a1 + 8))
  {
    v2 = *(const void **)a1;
    if (*(_QWORD *)a1)
      CFRelease(v2);
  }
  return a1;
}

uint64_t AMCP::Implementation::get_type_marker<AudioStreamBasicDescription>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return v1[157];
}

uint64_t AMCP::Implementation::get_type_marker<CA::StreamDescription>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return v1[159];
}

uint64_t AMCP::Implementation::Outboard_Storage<CA::StreamDescription>::dispatch(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, _QWORD, __int128 *);
  void (*v17)(uint64_t, uint64_t, _QWORD, CFTypeRef *);
  uint64_t v18;
  AMCP::Thing *v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __CFDictionary *Mutable;
  CFNumberRef v28;
  CFNumberRef v29;
  CFNumberRef v30;
  CFNumberRef v31;
  CFNumberRef v32;
  CFNumberRef v33;
  CFNumberRef v34;
  CFNumberRef v35;
  uint64_t v36;
  std::runtime_error *exception;
  std::runtime_error *v38;
  std::runtime_error *v39;
  std::runtime_error *v40;
  std::runtime_error *v41;
  std::runtime_error *v42;
  std::runtime_error *v43;
  std::runtime_error *v44;
  CFTypeRef cf[2];
  __int128 v46;
  uint64_t (*v47)(uint64_t, uint64_t, uint64_t, uint64_t *);
  __int128 valuePtr;
  __int128 v49;
  uint64_t v50;
  __CFDictionary *v51;

  switch((int)result)
  {
    case 0:
      goto LABEL_9;
    case 1:
      v7 = *(_QWORD *)a2;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::Outboard_Storage<CA::StreamDescription>::dispatch;
      v8 = operator new();
      result = 0;
      v9 = *(_QWORD *)(v7 + 32);
      v10 = *(_OWORD *)(v7 + 16);
      *(_OWORD *)v8 = *(_OWORD *)v7;
      *(_OWORD *)(v8 + 16) = v10;
      *(_QWORD *)(v8 + 32) = v9;
      *(_QWORD *)a3 = v8;
      return result;
    case 2:
      v11 = *(_QWORD *)a2;
      *(_QWORD *)a2 = 0;
      v12 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v11;
      if (v12)
        MEMORY[0x1B5E50688](v12, 0x1000C400A747E1ELL);
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::Outboard_Storage<CA::StreamDescription>::dispatch;
LABEL_9:
      v13 = *(_QWORD *)a2;
      *(_QWORD *)a2 = 0;
      if (v13)
        MEMORY[0x1B5E50688](v13, 0x1000C400A747E1ELL);
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      v14 = AMCP::Implementation::get_type_marker<CA::StreamDescription>();
      result = 0;
      *a4 = v14;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<CA::StreamDescription>())
        return *(_QWORD *)a2;
      else
        return 0;
    case 5:
      v15 = AMCP::Implementation::get_type_marker<CA::StreamDescription>();
      v16 = *(void (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32);
      *(_QWORD *)&valuePtr = 0;
      if (v16)
      {
        v16(3, a2, 0, &valuePtr);
        v16 = (void (*)(uint64_t, uint64_t, _QWORD, __int128 *))valuePtr;
      }
      if (v16 != (void (*)(uint64_t, uint64_t, _QWORD, __int128 *))v15)
        goto LABEL_26;
      v17 = *(void (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(a3 + 32);
      cf[0] = 0;
      if (v17)
      {
        v17(3, a3, 0, cf);
        v17 = (void (*)(uint64_t, uint64_t, _QWORD, CFTypeRef *))cf[0];
      }
      if (v17 == (void (*)(uint64_t, uint64_t, _QWORD, CFTypeRef *))v15)
      {
        if (*(_QWORD *)(a2 + 32))
        {
          *(_QWORD *)&valuePtr = AMCP::Implementation::get_type_marker<CA::StreamDescription>();
          v18 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32))(4, a2, 0, &valuePtr);
        }
        else
        {
          v18 = 0;
        }
        if (*(_QWORD *)(a3 + 32))
        {
          *(_QWORD *)&valuePtr = AMCP::Implementation::get_type_marker<CA::StreamDescription>();
          v36 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a3 + 32))(4, a3, 0, &valuePtr);
        }
        else
        {
          v36 = 0;
        }
        if (*(double *)v18 != *(double *)v36
          || *(_DWORD *)(v18 + 8) != *(_DWORD *)(v36 + 8)
          || *(_DWORD *)(v18 + 12) != *(_DWORD *)(v36 + 12)
          || *(_DWORD *)(v18 + 16) != *(_DWORD *)(v36 + 16)
          || *(_DWORD *)(v18 + 20) != *(_DWORD *)(v36 + 20)
          || *(_DWORD *)(v18 + 24) != *(_DWORD *)(v36 + 24)
          || *(_DWORD *)(v18 + 28) != *(_DWORD *)(v36 + 28))
        {
          return 0;
        }
        v21 = *(_DWORD *)(v18 + 32);
        v22 = *(_DWORD *)(v36 + 32);
      }
      else
      {
LABEL_26:
        AMCP::Thing::convert_to<CA::StreamDescription>((uint64_t)&valuePtr, a2);
        AMCP::Thing::convert_to<CA::StreamDescription>((uint64_t)cf, a3);
        if (*(double *)&valuePtr != *(double *)cf
          || *((CFTypeRef *)&valuePtr + 1) != cf[1]
          || (_DWORD)v49 != (_DWORD)v46
          || *(_QWORD *)((char *)&v49 + 4) != *(_QWORD *)((char *)&v46 + 4)
          || HIDWORD(v49) != HIDWORD(v46))
        {
          return 0;
        }
        v21 = v50;
        v22 = (int)v47;
      }
      return v21 == v22;
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<AudioStreamBasicDescription>()
        && *a4 != AMCP::Implementation::get_type_marker<CA::StreamDescription>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>())
      {
        goto LABEL_68;
      }
      if (*(_QWORD *)(a2 + 32))
      {
        *(_QWORD *)&valuePtr = AMCP::Implementation::get_type_marker<CA::StreamDescription>();
        v20 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32))(4, a2, 0, &valuePtr);
      }
      else
      {
        v20 = 0;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<AudioStreamBasicDescription>())
      {
        if (v20)
        {
          valuePtr = *(_OWORD *)v20;
          v49 = *(_OWORD *)(v20 + 16);
          v50 = *(_QWORD *)(v20 + 32);
          *(_OWORD *)cf = 0u;
          v46 = 0u;
          v47 = AMCP::Implementation::Outboard_Storage<AudioStreamBasicDescription>::dispatch;
          v23 = operator new();
          v24 = v49;
          *(_OWORD *)v23 = valuePtr;
          *(_OWORD *)(v23 + 16) = v24;
          *(_QWORD *)(v23 + 32) = v50;
LABEL_39:
          cf[0] = (CFTypeRef)v23;
          goto LABEL_69;
        }
        goto LABEL_87;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<CA::StreamDescription>())
      {
        if (v20)
        {
          *(_OWORD *)cf = 0u;
          v46 = 0u;
          v47 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::Outboard_Storage<CA::StreamDescription>::dispatch;
          v23 = operator new();
          v25 = *(_OWORD *)v20;
          v26 = *(_OWORD *)(v20 + 16);
          *(_QWORD *)(v23 + 32) = *(_QWORD *)(v20 + 32);
          *(_OWORD *)v23 = v25;
          *(_OWORD *)(v23 + 16) = v26;
          goto LABEL_39;
        }
LABEL_87:
        __assert_rtn("create_asbd_from", "Thing.h", 1718, "in_value_ptr != nullptr");
      }
      if (*a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>())
      {
LABEL_68:
        v47 = 0;
        *(_OWORD *)cf = 0u;
        v46 = 0u;
        goto LABEL_69;
      }
      if (!v20)
        goto LABEL_87;
      Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
      v51 = Mutable;
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)cf, "sample rate");
      *(_QWORD *)&valuePtr = *(_QWORD *)v20;
      v28 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
      if (!v28)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(Mutable, cf[0], v28);
      CFRelease(v28);
      if (cf[0])
        CFRelease(cf[0]);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&valuePtr, "format id");
      LODWORD(cf[0]) = *(_DWORD *)(v20 + 8);
      v29 = CFNumberCreate(0, kCFNumberIntType, cf);
      if (!v29)
      {
        v38 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v38, "Could not construct");
        __cxa_throw(v38, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(Mutable, (const void *)valuePtr, v29);
      CFRelease(v29);
      if ((_QWORD)valuePtr)
        CFRelease((CFTypeRef)valuePtr);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&valuePtr, "format flags");
      LODWORD(cf[0]) = *(_DWORD *)(v20 + 12);
      v30 = CFNumberCreate(0, kCFNumberIntType, cf);
      if (!v30)
      {
        v39 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v39, "Could not construct");
        __cxa_throw(v39, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(Mutable, (const void *)valuePtr, v30);
      CFRelease(v30);
      if ((_QWORD)valuePtr)
        CFRelease((CFTypeRef)valuePtr);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&valuePtr, "bytes per packet");
      LODWORD(cf[0]) = *(_DWORD *)(v20 + 16);
      v31 = CFNumberCreate(0, kCFNumberIntType, cf);
      if (!v31)
      {
        v40 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v40, "Could not construct");
        __cxa_throw(v40, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(Mutable, (const void *)valuePtr, v31);
      CFRelease(v31);
      if ((_QWORD)valuePtr)
        CFRelease((CFTypeRef)valuePtr);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&valuePtr, "frames per packet");
      LODWORD(cf[0]) = *(_DWORD *)(v20 + 20);
      v32 = CFNumberCreate(0, kCFNumberIntType, cf);
      if (!v32)
      {
        v41 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v41, "Could not construct");
        __cxa_throw(v41, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(Mutable, (const void *)valuePtr, v32);
      CFRelease(v32);
      if ((_QWORD)valuePtr)
        CFRelease((CFTypeRef)valuePtr);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&valuePtr, "bytes per frame");
      LODWORD(cf[0]) = *(_DWORD *)(v20 + 24);
      v33 = CFNumberCreate(0, kCFNumberIntType, cf);
      if (!v33)
      {
        v42 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v42, "Could not construct");
        __cxa_throw(v42, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(Mutable, (const void *)valuePtr, v33);
      CFRelease(v33);
      if ((_QWORD)valuePtr)
        CFRelease((CFTypeRef)valuePtr);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&valuePtr, "channels per frame");
      LODWORD(cf[0]) = *(_DWORD *)(v20 + 28);
      v34 = CFNumberCreate(0, kCFNumberIntType, cf);
      if (!v34)
      {
        v43 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v43, "Could not construct");
        __cxa_throw(v43, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(Mutable, (const void *)valuePtr, v34);
      CFRelease(v34);
      if ((_QWORD)valuePtr)
        CFRelease((CFTypeRef)valuePtr);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&valuePtr, "bits per channel");
      LODWORD(cf[0]) = *(_DWORD *)(v20 + 32);
      v35 = CFNumberCreate(0, kCFNumberIntType, cf);
      if (!v35)
      {
        v44 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v44, "Could not construct");
        __cxa_throw(v44, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(Mutable, (const void *)valuePtr, v35);
      CFRelease(v35);
      if ((_QWORD)valuePtr)
        CFRelease((CFTypeRef)valuePtr);
      mcp_applesauce::CF::Dictionary_Builder::copy_dictionary((applesauce::CF::DictionaryRef *)cf, Mutable);
      cf[1] = 0;
      v46 = 0uLL;
      v47 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<applesauce::CF::DictionaryRef>::dispatch;
      if (Mutable)
        CFRelease(Mutable);
LABEL_69:
      AMCP::swap((AMCP::Thing *)cf, (AMCP::Thing *)a3, v19);
      if (v47)
        v47(0, (uint64_t)cf, 0, 0);
      return 0;
    default:
      return result;
  }
}

void sub_1B580E600(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  mcp_applesauce::CF::Dictionary_Builder::~Dictionary_Builder((const void **)(v7 - 40));
  __clang_call_terminate(a1);
}

uint64_t AMCP::Thing::convert_to<CA::StreamDescription>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t result;
  __int128 v7;
  __int128 v8;
  std::bad_cast *exception;
  std::bad_cast *v10;
  std::bad_cast *v11;
  std::bad_cast *v12;
  std::bad_cast *v13;
  std::bad_cast *v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[2];
  uint64_t (*v18)(uint64_t, _OWORD *, _QWORD, uint64_t *);
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, _QWORD, _QWORD);

  if (!*(_QWORD *)(a2 + 32))
    goto LABEL_12;
  v4 = AMCP::Implementation::get_type_marker<CA::StreamDescription>();
  v5 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a2 + 32);
  v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))v4)
  {
    v19 = v4;
    result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (result)
    {
      v7 = *(_OWORD *)(result + 16);
      *(_OWORD *)a1 = *(_OWORD *)result;
      *(_OWORD *)(a1 + 16) = v7;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(result + 32);
      return result;
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v16 = AMCP::Implementation::get_type_marker<CA::StreamDescription>();
  memset(v17, 0, sizeof(v17));
  v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v15 = v4;
  result = v18(4, v17, 0, &v15);
  if (!result)
  {
    v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v8 = *(_OWORD *)(result + 16);
  *(_OWORD *)a1 = *(_OWORD *)result;
  *(_OWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(result + 32);
  if (v18)
    return v18(0, v17, 0, 0);
  return result;
}

void sub_1B580E8B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::Outboard_Storage<AudioStreamBasicDescription>::dispatch(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t type;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, _QWORD, __int128 *);
  void (*v17)(uint64_t, uint64_t, _QWORD, CFTypeRef *);
  uint64_t v18;
  AMCP::Thing *v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __CFDictionary *Mutable;
  CFNumberRef v28;
  CFNumberRef v29;
  CFNumberRef v30;
  CFNumberRef v31;
  CFNumberRef v32;
  CFNumberRef v33;
  CFNumberRef v34;
  CFNumberRef v35;
  uint64_t v36;
  std::runtime_error *exception;
  std::runtime_error *v38;
  std::runtime_error *v39;
  std::runtime_error *v40;
  std::runtime_error *v41;
  std::runtime_error *v42;
  std::runtime_error *v43;
  std::runtime_error *v44;
  CFTypeRef cf[2];
  __int128 v46;
  uint64_t (*v47)();
  __int128 valuePtr;
  __int128 v49;
  uint64_t v50;
  __CFDictionary *v51;

  switch((int)result)
  {
    case 0:
      goto LABEL_9;
    case 1:
      v7 = *(_QWORD *)a2;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::Outboard_Storage<AudioStreamBasicDescription>::dispatch;
      v8 = operator new();
      result = 0;
      v9 = *(_QWORD *)(v7 + 32);
      v10 = *(_OWORD *)(v7 + 16);
      *(_OWORD *)v8 = *(_OWORD *)v7;
      *(_OWORD *)(v8 + 16) = v10;
      *(_QWORD *)(v8 + 32) = v9;
      *(_QWORD *)a3 = v8;
      return result;
    case 2:
      v11 = *(_QWORD *)a2;
      *(_QWORD *)a2 = 0;
      v12 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v11;
      if (v12)
        MEMORY[0x1B5E50688](v12, 0x1000C400A747E1ELL);
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::Outboard_Storage<AudioStreamBasicDescription>::dispatch;
LABEL_9:
      v13 = *(_QWORD *)a2;
      *(_QWORD *)a2 = 0;
      if (v13)
        MEMORY[0x1B5E50688](v13, 0x1000C400A747E1ELL);
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      type = AMCP::Implementation::get_type_marker<AudioStreamBasicDescription>();
      result = 0;
      *a4 = type;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<AudioStreamBasicDescription>())
        return *(_QWORD *)a2;
      else
        return 0;
    case 5:
      v15 = AMCP::Implementation::get_type_marker<AudioStreamBasicDescription>();
      v16 = *(void (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32);
      *(_QWORD *)&valuePtr = 0;
      if (v16)
      {
        v16(3, a2, 0, &valuePtr);
        v16 = (void (*)(uint64_t, uint64_t, _QWORD, __int128 *))valuePtr;
      }
      if (v16 != (void (*)(uint64_t, uint64_t, _QWORD, __int128 *))v15)
        goto LABEL_26;
      v17 = *(void (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(a3 + 32);
      cf[0] = 0;
      if (v17)
      {
        v17(3, a3, 0, cf);
        v17 = (void (*)(uint64_t, uint64_t, _QWORD, CFTypeRef *))cf[0];
      }
      if (v17 == (void (*)(uint64_t, uint64_t, _QWORD, CFTypeRef *))v15)
      {
        if (*(_QWORD *)(a2 + 32))
        {
          *(_QWORD *)&valuePtr = AMCP::Implementation::get_type_marker<AudioStreamBasicDescription>();
          v18 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32))(4, a2, 0, &valuePtr);
        }
        else
        {
          v18 = 0;
        }
        if (*(_QWORD *)(a3 + 32))
        {
          *(_QWORD *)&valuePtr = AMCP::Implementation::get_type_marker<AudioStreamBasicDescription>();
          v36 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a3 + 32))(4, a3, 0, &valuePtr);
        }
        else
        {
          v36 = 0;
        }
        if (*(double *)v18 != *(double *)v36
          || *(_DWORD *)(v18 + 8) != *(_DWORD *)(v36 + 8)
          || *(_DWORD *)(v18 + 12) != *(_DWORD *)(v36 + 12)
          || *(_DWORD *)(v18 + 16) != *(_DWORD *)(v36 + 16)
          || *(_DWORD *)(v18 + 20) != *(_DWORD *)(v36 + 20)
          || *(_DWORD *)(v18 + 24) != *(_DWORD *)(v36 + 24)
          || *(_DWORD *)(v18 + 28) != *(_DWORD *)(v36 + 28))
        {
          return 0;
        }
        v21 = *(_DWORD *)(v18 + 32);
        v22 = *(_DWORD *)(v36 + 32);
      }
      else
      {
LABEL_26:
        v50 = 0;
        valuePtr = 0u;
        v49 = 0u;
        AMCP::Thing::convert_to<AudioStreamBasicDescription>((uint64_t)&valuePtr, a2);
        v47 = 0;
        *(_OWORD *)cf = 0u;
        v46 = 0u;
        AMCP::Thing::convert_to<AudioStreamBasicDescription>((uint64_t)cf, a3);
        if (*(double *)&valuePtr != *(double *)cf
          || *((CFTypeRef *)&valuePtr + 1) != cf[1]
          || (_DWORD)v49 != (_DWORD)v46
          || *(_QWORD *)((char *)&v49 + 4) != *(_QWORD *)((char *)&v46 + 4)
          || HIDWORD(v49) != HIDWORD(v46))
        {
          return 0;
        }
        v21 = v50;
        v22 = (int)v47;
      }
      return v21 == v22;
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<AudioStreamBasicDescription>()
        && *a4 != AMCP::Implementation::get_type_marker<CA::StreamDescription>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>())
      {
        goto LABEL_68;
      }
      if (*(_QWORD *)(a2 + 32))
      {
        *(_QWORD *)&valuePtr = AMCP::Implementation::get_type_marker<AudioStreamBasicDescription>();
        v20 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32))(4, a2, 0, &valuePtr);
      }
      else
      {
        v20 = 0;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<AudioStreamBasicDescription>())
      {
        if (v20)
        {
          *(_OWORD *)cf = 0u;
          v46 = 0u;
          v47 = AMCP::Implementation::Outboard_Storage<AudioStreamBasicDescription>::dispatch;
          v23 = operator new();
          v24 = *(_OWORD *)v20;
          v25 = *(_OWORD *)(v20 + 16);
          *(_QWORD *)(v23 + 32) = *(_QWORD *)(v20 + 32);
          *(_OWORD *)v23 = v24;
          *(_OWORD *)(v23 + 16) = v25;
LABEL_39:
          cf[0] = (CFTypeRef)v23;
          goto LABEL_69;
        }
        goto LABEL_87;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<CA::StreamDescription>())
      {
        if (v20)
        {
          valuePtr = *(_OWORD *)v20;
          v49 = *(_OWORD *)(v20 + 16);
          v50 = *(_QWORD *)(v20 + 32);
          *(_OWORD *)cf = 0u;
          v46 = 0u;
          v47 = AMCP::Implementation::Outboard_Storage<CA::StreamDescription>::dispatch;
          v23 = operator new();
          v26 = v49;
          *(_OWORD *)v23 = valuePtr;
          *(_OWORD *)(v23 + 16) = v26;
          *(_QWORD *)(v23 + 32) = v50;
          goto LABEL_39;
        }
LABEL_87:
        __assert_rtn("create_asbd_from", "Thing.h", 1718, "in_value_ptr != nullptr");
      }
      if (*a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>())
      {
LABEL_68:
        v47 = 0;
        *(_OWORD *)cf = 0u;
        v46 = 0u;
        goto LABEL_69;
      }
      if (!v20)
        goto LABEL_87;
      Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
      v51 = Mutable;
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)cf, "sample rate");
      *(_QWORD *)&valuePtr = *(_QWORD *)v20;
      v28 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
      if (!v28)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(Mutable, cf[0], v28);
      CFRelease(v28);
      if (cf[0])
        CFRelease(cf[0]);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&valuePtr, "format id");
      LODWORD(cf[0]) = *(_DWORD *)(v20 + 8);
      v29 = CFNumberCreate(0, kCFNumberIntType, cf);
      if (!v29)
      {
        v38 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v38, "Could not construct");
        __cxa_throw(v38, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(Mutable, (const void *)valuePtr, v29);
      CFRelease(v29);
      if ((_QWORD)valuePtr)
        CFRelease((CFTypeRef)valuePtr);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&valuePtr, "format flags");
      LODWORD(cf[0]) = *(_DWORD *)(v20 + 12);
      v30 = CFNumberCreate(0, kCFNumberIntType, cf);
      if (!v30)
      {
        v39 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v39, "Could not construct");
        __cxa_throw(v39, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(Mutable, (const void *)valuePtr, v30);
      CFRelease(v30);
      if ((_QWORD)valuePtr)
        CFRelease((CFTypeRef)valuePtr);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&valuePtr, "bytes per packet");
      LODWORD(cf[0]) = *(_DWORD *)(v20 + 16);
      v31 = CFNumberCreate(0, kCFNumberIntType, cf);
      if (!v31)
      {
        v40 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v40, "Could not construct");
        __cxa_throw(v40, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(Mutable, (const void *)valuePtr, v31);
      CFRelease(v31);
      if ((_QWORD)valuePtr)
        CFRelease((CFTypeRef)valuePtr);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&valuePtr, "frames per packet");
      LODWORD(cf[0]) = *(_DWORD *)(v20 + 20);
      v32 = CFNumberCreate(0, kCFNumberIntType, cf);
      if (!v32)
      {
        v41 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v41, "Could not construct");
        __cxa_throw(v41, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(Mutable, (const void *)valuePtr, v32);
      CFRelease(v32);
      if ((_QWORD)valuePtr)
        CFRelease((CFTypeRef)valuePtr);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&valuePtr, "bytes per frame");
      LODWORD(cf[0]) = *(_DWORD *)(v20 + 24);
      v33 = CFNumberCreate(0, kCFNumberIntType, cf);
      if (!v33)
      {
        v42 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v42, "Could not construct");
        __cxa_throw(v42, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(Mutable, (const void *)valuePtr, v33);
      CFRelease(v33);
      if ((_QWORD)valuePtr)
        CFRelease((CFTypeRef)valuePtr);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&valuePtr, "channels per frame");
      LODWORD(cf[0]) = *(_DWORD *)(v20 + 28);
      v34 = CFNumberCreate(0, kCFNumberIntType, cf);
      if (!v34)
      {
        v43 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v43, "Could not construct");
        __cxa_throw(v43, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(Mutable, (const void *)valuePtr, v34);
      CFRelease(v34);
      if ((_QWORD)valuePtr)
        CFRelease((CFTypeRef)valuePtr);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&valuePtr, "bits per channel");
      LODWORD(cf[0]) = *(_DWORD *)(v20 + 32);
      v35 = CFNumberCreate(0, kCFNumberIntType, cf);
      if (!v35)
      {
        v44 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v44, "Could not construct");
        __cxa_throw(v44, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(Mutable, (const void *)valuePtr, v35);
      CFRelease(v35);
      if ((_QWORD)valuePtr)
        CFRelease((CFTypeRef)valuePtr);
      mcp_applesauce::CF::Dictionary_Builder::copy_dictionary((applesauce::CF::DictionaryRef *)cf, Mutable);
      cf[1] = 0;
      v46 = 0uLL;
      v47 = AMCP::Implementation::In_Place_Storage<applesauce::CF::DictionaryRef>::dispatch;
      if (Mutable)
        CFRelease(Mutable);
LABEL_69:
      AMCP::swap((AMCP::Thing *)cf, (AMCP::Thing *)a3, v19);
      if (v47)
        ((void (*)(_QWORD, CFTypeRef *, _QWORD, _QWORD))v47)(0, cf, 0, 0);
      return 0;
    default:
      return result;
  }
}

void sub_1B580F238(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  mcp_applesauce::CF::Dictionary_Builder::~Dictionary_Builder((const void **)(v7 - 40));
  __clang_call_terminate(a1);
}

uint64_t AMCP::Thing::convert_to<AudioStreamBasicDescription>(uint64_t a1, uint64_t a2)
{
  uint64_t type;
  void (*v5)(uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t result;
  __int128 v7;
  __int128 v8;
  std::bad_cast *exception;
  std::bad_cast *v10;
  std::bad_cast *v11;
  std::bad_cast *v12;
  std::bad_cast *v13;
  std::bad_cast *v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[2];
  uint64_t (*v18)(uint64_t, _OWORD *, _QWORD, uint64_t *);
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, _QWORD, _QWORD);

  if (!*(_QWORD *)(a2 + 32))
    goto LABEL_12;
  type = AMCP::Implementation::get_type_marker<AudioStreamBasicDescription>();
  v5 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a2 + 32);
  v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))type)
  {
    v19 = type;
    result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (result)
    {
      v7 = *(_OWORD *)(result + 16);
      *(_OWORD *)a1 = *(_OWORD *)result;
      *(_OWORD *)(a1 + 16) = v7;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(result + 32);
      return result;
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v16 = AMCP::Implementation::get_type_marker<AudioStreamBasicDescription>();
  memset(v17, 0, sizeof(v17));
  v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v15 = type;
  result = v18(4, v17, 0, &v15);
  if (!result)
  {
    v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v8 = *(_OWORD *)(result + 16);
  *(_OWORD *)a1 = *(_OWORD *)result;
  *(_OWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(result + 32);
  if (v18)
    return v18(0, v17, 0, 0);
  return result;
}

void sub_1B580F4F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

std::vector<char> *__cdecl std::vector<char>::vector(std::vector<char> *this, std::vector<char>::size_type __n, const std::vector<char>::value_type *__x)
{
  std::vector<char>::size_type v5;
  std::vector<char>::pointer end;
  char *v7;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    v5 = __n;
    std::vector<char>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    v7 = &end[v5];
    do
    {
      *end++ = *__x;
      --v5;
    }
    while (v5);
    this->__end_ = v7;
  }
  return this;
}

void sub_1B580F570(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t applesauce::CF::at_or<applesauce::CF::DictionaryRef>(_QWORD *a1, const __CFArray *a2, unint64_t a3, _QWORD *a4)
{
  CFTypeRef v6;
  CFTypeRef cf;
  char v9;

  applesauce::CF::details::at_as<applesauce::CF::DictionaryRef>(&cf, a2, a3);
  if (v9)
  {
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a1 = v6;
  }
  else
  {
    *a1 = *a4;
    *a4 = 0;
  }
  return std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
}

uint64_t applesauce::CF::at_or<applesauce::CF::NumberRef>(_QWORD *a1, const __CFArray *a2, unint64_t a3, _QWORD *a4)
{
  CFTypeRef v6;
  CFTypeRef cf;
  char v9;

  applesauce::CF::details::at_as<applesauce::CF::NumberRef>(&cf, a2, a3);
  if (v9)
  {
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a1 = v6;
  }
  else
  {
    *a1 = *a4;
    *a4 = 0;
  }
  return std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
}

float applesauce::CF::convert_to<float,0>(const __CFNumber *a1)
{
  CFTypeID TypeID;
  int Value;
  CFTypeID v4;
  float v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  float v10;
  uint64_t v11;
  std::runtime_error *exception;
  double valuePtr;

  TypeID = CFNumberGetTypeID();
  if (TypeID == CFGetTypeID(a1))
  {
    switch(CFNumberGetType(a1))
    {
      case kCFNumberSInt8Type:
        LOBYTE(valuePtr) = 0;
        Value = CFNumberGetValue(a1, kCFNumberSInt8Type, &valuePtr);
        goto LABEL_13;
      case kCFNumberSInt16Type:
        LOWORD(valuePtr) = 0;
        Value = CFNumberGetValue(a1, kCFNumberSInt16Type, &valuePtr);
        goto LABEL_15;
      case kCFNumberSInt32Type:
        LODWORD(valuePtr) = 0;
        Value = CFNumberGetValue(a1, kCFNumberSInt32Type, &valuePtr);
        goto LABEL_18;
      case kCFNumberSInt64Type:
        valuePtr = 0.0;
        Value = CFNumberGetValue(a1, kCFNumberSInt64Type, &valuePtr);
        goto LABEL_26;
      case kCFNumberFloat32Type:
        LODWORD(valuePtr) = 0;
        Value = CFNumberGetValue(a1, kCFNumberFloat32Type, &valuePtr);
        goto LABEL_22;
      case kCFNumberFloat64Type:
        valuePtr = 0.0;
        Value = CFNumberGetValue(a1, kCFNumberFloat64Type, &valuePtr);
        goto LABEL_28;
      case kCFNumberCharType:
        LOBYTE(valuePtr) = 0;
        Value = CFNumberGetValue(a1, kCFNumberCharType, &valuePtr);
LABEL_13:
        v9 = SLOBYTE(valuePtr);
        goto LABEL_16;
      case kCFNumberShortType:
        LOWORD(valuePtr) = 0;
        Value = CFNumberGetValue(a1, kCFNumberShortType, &valuePtr);
LABEL_15:
        v9 = SLOWORD(valuePtr);
LABEL_16:
        v10 = (float)v9;
        goto LABEL_29;
      case kCFNumberIntType:
        LODWORD(valuePtr) = 0;
        Value = CFNumberGetValue(a1, kCFNumberIntType, &valuePtr);
LABEL_18:
        v10 = (float)SLODWORD(valuePtr);
        goto LABEL_29;
      case kCFNumberLongType:
        valuePtr = 0.0;
        Value = CFNumberGetValue(a1, kCFNumberLongType, &valuePtr);
        goto LABEL_26;
      case kCFNumberLongLongType:
        valuePtr = 0.0;
        Value = CFNumberGetValue(a1, kCFNumberLongLongType, &valuePtr);
        goto LABEL_26;
      case kCFNumberFloatType:
        LODWORD(valuePtr) = 0;
        Value = CFNumberGetValue(a1, kCFNumberFloatType, &valuePtr);
LABEL_22:
        v11 = LODWORD(valuePtr);
        goto LABEL_30;
      case kCFNumberDoubleType:
        valuePtr = 0.0;
        Value = CFNumberGetValue(a1, kCFNumberDoubleType, &valuePtr);
        goto LABEL_28;
      case kCFNumberCFIndexType:
        valuePtr = 0.0;
        Value = CFNumberGetValue(a1, kCFNumberCFIndexType, &valuePtr);
        goto LABEL_26;
      case kCFNumberNSIntegerType:
        valuePtr = 0.0;
        Value = CFNumberGetValue(a1, kCFNumberNSIntegerType, &valuePtr);
LABEL_26:
        v10 = (float)*(uint64_t *)&valuePtr;
        goto LABEL_29;
      case kCFNumberCGFloatType:
        valuePtr = 0.0;
        Value = CFNumberGetValue(a1, kCFNumberCGFloatType, &valuePtr);
LABEL_28:
        v10 = valuePtr;
LABEL_29:
        v11 = LODWORD(v10);
LABEL_30:
        v8 = v11 | 0x100000000;
        if (!Value)
          v8 = 0;
        v6 = v8 & 0xFFFFFF00;
        v7 = v8 & 0x100000000;
        break;
      default:
        v6 = 0;
        v7 = 0;
        LOBYTE(v8) = 0;
        break;
    }
    if (HIDWORD(v7))
    {
      LODWORD(v5) = v7 | v6 & 0xFFFFFF00 | v8;
      return v5;
    }
LABEL_36:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v4 = CFBooleanGetTypeID();
  if (v4 != CFGetTypeID(a1))
    goto LABEL_36;
  return (float)CFBooleanGetValue(a1);
}

void sub_1B580F904(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::In_Place_Storage<CA::ChannelLayout>::dispatch(int a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  void *v9;
  __int128 v10;
  AMCP::Thing *v11;
  const void **v12;
  uint64_t v13;
  CFMutableArrayRef Mutable;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  CFMutableDictionaryRef v19;
  unint64_t v20;
  CFNumberRef v21;
  unint64_t v22;
  CFNumberRef v23;
  CFMutableArrayRef v24;
  unint64_t v25;
  CFNumberRef v26;
  unint64_t v27;
  CFNumberRef v28;
  unint64_t v29;
  CFNumberRef v30;
  CFMutableDictionaryRef v31;
  CFNumberRef v32;
  CFNumberRef v33;
  std::logic_error *exception;
  std::runtime_error *v35;
  std::runtime_error *v36;
  std::logic_error *v37;
  std::logic_error *v38;
  std::runtime_error *v39;
  std::runtime_error *v40;
  std::logic_error *v41;
  std::runtime_error *v42;
  std::logic_error *v43;
  std::runtime_error *v44;
  std::runtime_error *v45;
  CFTypeRef v46[2];
  __int128 v47;
  uint64_t (*v48)();
  CFTypeRef v49;
  const void *valuePtr;
  CFTypeRef cf[2];

  result = 0;
  switch(a1)
  {
    case 0:
      v9 = *(void **)a2;
      if (*(_QWORD *)a2)
      {
        *(_QWORD *)(a2 + 8) = v9;
        operator delete(v9);
      }
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      v10 = 0uLL;
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>((_QWORD *)a3, *(const void **)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
      result = 0;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<CA::ChannelLayout>::dispatch;
      return result;
    case 2:
      result = 0;
      v10 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<CA::ChannelLayout>::dispatch;
      *(_QWORD *)(a2 + 32) = 0;
LABEL_6:
      *(_OWORD *)a2 = v10;
      *(_OWORD *)(a2 + 16) = v10;
      return result;
    case 3:
      v13 = AMCP::Implementation::get_type_marker<CA::ChannelLayout>();
      result = 0;
      *a4 = v13;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<CA::ChannelLayout>())
        return a2;
      else
        return 0;
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<CA::ChannelLayout>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>())
      {
        goto LABEL_56;
      }
      if (*(_QWORD *)(a2 + 32))
      {
        v46[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<CA::ChannelLayout>();
        v12 = (const void **)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(a2 + 32))(4, a2, 0, v46);
      }
      else
      {
        v12 = 0;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<CA::ChannelLayout>())
      {
        if (v12)
        {
          v48 = 0;
          *(_OWORD *)v46 = 0u;
          v47 = 0u;
          std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(v46, *v12, (uint64_t)v12[1], (_BYTE *)v12[1] - (_BYTE *)*v12);
          v48 = (uint64_t (*)())AMCP::Implementation::In_Place_Storage<CA::ChannelLayout>::dispatch;
          goto LABEL_57;
        }
LABEL_80:
        __assert_rtn("create_acl_from", "Thing.h", 1632, "in_value_ptr != nullptr");
      }
      if (*a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>())
      {
LABEL_56:
        v48 = 0;
        *(_OWORD *)v46 = 0u;
        v47 = 0u;
        goto LABEL_57;
      }
      if (!v12)
        goto LABEL_80;
      Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B380]);
      cf[1] = Mutable;
      v15 = *((unsigned int *)*v12 + 2);
      if (v15 > ((_BYTE *)v12[1] - (_BYTE *)*v12 - 12) / 0x14uLL)
LABEL_55:
        __assert_rtn("GetNumberChannelDescriptions", "CoreAudioBaseTypes.hpp", 2237, "GetAudioChannelLayout().mNumberChannelDescriptions <= (mStorage.size() - kHeaderSize) / sizeof(AudioChannelDescription)");
      v16 = 0;
      v17 = -1;
      while (1)
      {
        v18 = v17 + 1;
        if (v17 + 1 >= v15)
          break;
        v19 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
        v46[0] = v19;
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)cf, "channel label");
        v20 = *((unsigned int *)*v12 + 2);
        if (v20 > ((_BYTE *)v12[1] - (_BYTE *)*v12 - 12) / 0x14uLL)
          __assert_rtn("GetNumberChannelDescriptions", "CoreAudioBaseTypes.hpp", 2237, "GetAudioChannelLayout().mNumberChannelDescriptions <= (mStorage.size() - kHeaderSize) / sizeof(AudioChannelDescription)");
        if (v18 >= v20)
        {
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "accessing a CA::ChannelLayout with an out-of-range index");
          exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
          __cxa_throw(exception, (struct type_info *)off_1E696A668, (void (*)(void *))MEMORY[0x1E0DE42E0]);
        }
        LODWORD(valuePtr) = *(_DWORD *)((char *)*v12 + v16 + 12);
        v21 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
        if (!v21)
        {
          v35 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v35, "Could not construct");
          __cxa_throw(v35, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v19, cf[0], v21);
        CFRelease(v21);
        if (cf[0])
          CFRelease(cf[0]);
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)cf, "channel flags");
        v22 = *((unsigned int *)*v12 + 2);
        if (v22 > ((_BYTE *)v12[1] - (_BYTE *)*v12 - 12) / 0x14uLL)
          __assert_rtn("GetNumberChannelDescriptions", "CoreAudioBaseTypes.hpp", 2237, "GetAudioChannelLayout().mNumberChannelDescriptions <= (mStorage.size() - kHeaderSize) / sizeof(AudioChannelDescription)");
        if (v18 >= v22)
        {
          v37 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v37, "accessing a CA::ChannelLayout with an out-of-range index");
          v37->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
          __cxa_throw(v37, (struct type_info *)off_1E696A668, (void (*)(void *))MEMORY[0x1E0DE42E0]);
        }
        LODWORD(valuePtr) = *(_DWORD *)((char *)*v12 + v16 + 16);
        v23 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
        if (!v23)
        {
          v36 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v36, "Could not construct");
          __cxa_throw(v36, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v19, cf[0], v23);
        CFRelease(v23);
        if (cf[0])
          CFRelease(cf[0]);
        v24 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B380]);
        cf[0] = v24;
        v25 = *((unsigned int *)*v12 + 2);
        if (v25 > ((_BYTE *)v12[1] - (_BYTE *)*v12 - 12) / 0x14uLL)
          __assert_rtn("GetNumberChannelDescriptions", "CoreAudioBaseTypes.hpp", 2237, "GetAudioChannelLayout().mNumberChannelDescriptions <= (mStorage.size() - kHeaderSize) / sizeof(AudioChannelDescription)");
        if (v18 >= v25)
        {
          v38 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v38, "accessing a CA::ChannelLayout with an out-of-range index");
          v38->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
          __cxa_throw(v38, (struct type_info *)off_1E696A668, (void (*)(void *))MEMORY[0x1E0DE42E0]);
        }
        LODWORD(valuePtr) = *(_DWORD *)((char *)*v12 + v16 + 20);
        v26 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
        if (!v26)
        {
          v39 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v39, "Could not construct");
          __cxa_throw(v39, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::NumberRef>(v24, v26);
        CFRelease(v26);
        v27 = *((unsigned int *)*v12 + 2);
        if (v27 > ((_BYTE *)v12[1] - (_BYTE *)*v12 - 12) / 0x14uLL)
          __assert_rtn("GetNumberChannelDescriptions", "CoreAudioBaseTypes.hpp", 2237, "GetAudioChannelLayout().mNumberChannelDescriptions <= (mStorage.size() - kHeaderSize) / sizeof(AudioChannelDescription)");
        if (v18 >= v27)
        {
          v41 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v41, "accessing a CA::ChannelLayout with an out-of-range index");
          v41->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
          __cxa_throw(v41, (struct type_info *)off_1E696A668, (void (*)(void *))MEMORY[0x1E0DE42E0]);
        }
        LODWORD(valuePtr) = *(_DWORD *)((char *)*v12 + v16 + 24);
        v28 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
        if (!v28)
        {
          v40 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v40, "Could not construct");
          __cxa_throw(v40, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::NumberRef>(v24, v28);
        CFRelease(v28);
        v29 = *((unsigned int *)*v12 + 2);
        if (v29 > ((_BYTE *)v12[1] - (_BYTE *)*v12 - 12) / 0x14uLL)
          __assert_rtn("GetNumberChannelDescriptions", "CoreAudioBaseTypes.hpp", 2237, "GetAudioChannelLayout().mNumberChannelDescriptions <= (mStorage.size() - kHeaderSize) / sizeof(AudioChannelDescription)");
        if (++v17 >= v29)
        {
          v43 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v43, "accessing a CA::ChannelLayout with an out-of-range index");
          v43->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
          __cxa_throw(v43, (struct type_info *)off_1E696A668, (void (*)(void *))MEMORY[0x1E0DE42E0]);
        }
        LODWORD(valuePtr) = *(_DWORD *)((char *)*v12 + v16 + 28);
        v30 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
        if (!v30)
        {
          v42 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v42, "Could not construct");
          __cxa_throw(v42, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::NumberRef>(v24, v30);
        CFRelease(v30);
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&valuePtr, "coordinates");
        mcp_applesauce::CF::Array_Builder::copy_array((applesauce::CF::ArrayRef *)&v49, v24);
        mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::ArrayRef>(v19, valuePtr, v49);
        if (v49)
          CFRelease(v49);
        if (valuePtr)
          CFRelease(valuePtr);
        mcp_applesauce::CF::Dictionary_Builder::copy_dictionary((applesauce::CF::DictionaryRef *)&valuePtr, v19);
        mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::DictionaryRef>(Mutable, valuePtr);
        if (valuePtr)
          CFRelease(valuePtr);
        if (v24)
          CFRelease(v24);
        if (v19)
          CFRelease(v19);
        v16 += 20;
        v15 = *((unsigned int *)*v12 + 2);
        if (v15 > ((_BYTE *)v12[1] - (_BYTE *)*v12 - 12) / 0x14uLL)
          goto LABEL_55;
      }
      v31 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
      cf[0] = v31;
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v46, "channel layout tag");
      LODWORD(valuePtr) = *(_DWORD *)*v12;
      v32 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
      if (!v32)
      {
        v44 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v44, "Could not construct");
        __cxa_throw(v44, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v31, v46[0], v32);
      CFRelease(v32);
      if (v46[0])
        CFRelease(v46[0]);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v46, "channel bitmap");
      LODWORD(valuePtr) = *((_DWORD *)*v12 + 1);
      v33 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
      if (!v33)
      {
        v45 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v45, "Could not construct");
        __cxa_throw(v45, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v31, v46[0], v33);
      CFRelease(v33);
      if (v46[0])
        CFRelease(v46[0]);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v46, "channel descriptions");
      mcp_applesauce::CF::Array_Builder::copy_array((applesauce::CF::ArrayRef *)&valuePtr, Mutable);
      mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::ArrayRef>(v31, v46[0], valuePtr);
      if (valuePtr)
        CFRelease(valuePtr);
      if (v46[0])
        CFRelease(v46[0]);
      mcp_applesauce::CF::Dictionary_Builder::copy_dictionary((applesauce::CF::DictionaryRef *)v46, v31);
      v46[1] = 0;
      v47 = 0uLL;
      v48 = AMCP::Implementation::In_Place_Storage<applesauce::CF::DictionaryRef>::dispatch;
      if (v31)
        CFRelease(v31);
      if (Mutable)
        CFRelease(Mutable);
LABEL_57:
      AMCP::swap((AMCP::Thing *)v46, (AMCP::Thing *)a3, v11);
      if (v48)
        ((void (*)(_QWORD, CFTypeRef *, _QWORD, _QWORD))v48)(0, v46, 0, 0);
      return 0;
    default:
      return result;
  }
}

void sub_1B581036C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, const void *a17, const void *a18)
{
  applesauce::CF::StringRef::~StringRef(&a9);
  mcp_applesauce::CF::Dictionary_Builder::~Dictionary_Builder(&a17);
  mcp_applesauce::CF::Array_Builder::~Array_Builder(&a18);
  __clang_call_terminate(a1);
}

void mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::NumberRef>(__CFArray *a1, const void *a2)
{
  if (a1)
    CFArrayAppendValue(a1, a2);
}

applesauce::CF::ArrayRef *mcp_applesauce::CF::Array_Builder::copy_array(applesauce::CF::ArrayRef *this, const __CFArray *a2)
{
  applesauce::CF::ArrayRef *v2;
  CFArrayRef Copy;

  v2 = this;
  if (a2)
  {
    Copy = CFArrayCreateCopy(0, a2);
    return applesauce::CF::ArrayRef::ArrayRef(v2, Copy);
  }
  else
  {
    *(_QWORD *)this = 0;
  }
  return this;
}

void applesauce::CF::details::at_as<applesauce::CF::NumberRef>(_BYTE *a1, CFArrayRef theArray, unint64_t a3)
{
  const void *ValueAtIndex;
  const void *v7;
  CFTypeID v8;
  char v9;

  if (!theArray)
    goto LABEL_7;
  if (CFArrayGetCount(theArray) <= a3)
    goto LABEL_7;
  ValueAtIndex = CFArrayGetValueAtIndex(theArray, a3);
  v7 = ValueAtIndex;
  if (!ValueAtIndex)
    goto LABEL_7;
  CFRetain(ValueAtIndex);
  v8 = CFGetTypeID(v7);
  if (v8 != CFNumberGetTypeID())
  {
    CFRelease(v7);
LABEL_7:
    v9 = 0;
    *a1 = 0;
    goto LABEL_8;
  }
  *(_QWORD *)a1 = v7;
  v9 = 1;
LABEL_8:
  a1[8] = v9;
}

void applesauce::CF::details::at_as<applesauce::CF::DictionaryRef>(_BYTE *a1, CFArrayRef theArray, unint64_t a3)
{
  const void *ValueAtIndex;
  const void *v7;
  CFTypeID v8;
  char v9;

  if (!theArray)
    goto LABEL_7;
  if (CFArrayGetCount(theArray) <= a3)
    goto LABEL_7;
  ValueAtIndex = CFArrayGetValueAtIndex(theArray, a3);
  v7 = ValueAtIndex;
  if (!ValueAtIndex)
    goto LABEL_7;
  CFRetain(ValueAtIndex);
  v8 = CFGetTypeID(v7);
  if (v8 != CFDictionaryGetTypeID())
  {
    CFRelease(v7);
LABEL_7:
    v9 = 0;
    *a1 = 0;
    goto LABEL_8;
  }
  *(_QWORD *)a1 = v7;
  v9 = 1;
LABEL_8:
  a1[8] = v9;
}

uint64_t AMCP::Implementation::get_type_marker<AudioValueRange>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return v1[151];
}

uint64_t AMCP::Implementation::get_type_marker<CA::ValueRange>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return v1[153];
}

uint64_t AMCP::Implementation::In_Place_Storage<CA::ValueRange>::dispatch(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, _QWORD, __int128 *);
  __CFDictionary *v11;
  double *v12;
  AMCP::Thing *v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  BOOL (*v21)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  __CFDictionary *Mutable;
  CFNumberRef v23;
  CFNumberRef v24;
  double *v25;
  std::runtime_error *exception;
  std::runtime_error *v27;
  __int128 v28;
  __int128 v29;
  uint64_t (*v30)();
  CFTypeRef cf;
  __CFDictionary *v32;

  switch((int)result)
  {
    case 0:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      v7 = 0uLL;
      goto LABEL_7;
    case 1:
      result = 0;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<CA::ValueRange>::dispatch;
      return result;
    case 2:
      result = 0;
      v7 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<CA::ValueRange>::dispatch;
      *(_QWORD *)(a2 + 32) = 0;
LABEL_7:
      *(_OWORD *)a2 = v7;
      *(_OWORD *)(a2 + 16) = v7;
      return result;
    case 3:
      v8 = AMCP::Implementation::get_type_marker<CA::ValueRange>();
      result = 0;
      *a4 = v8;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<CA::ValueRange>())
        return a2;
      else
        return 0;
    case 5:
      v9 = AMCP::Implementation::get_type_marker<CA::ValueRange>();
      v10 = *(void (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32);
      *(_QWORD *)&v28 = 0;
      if (v10)
      {
        v10(3, a2, 0, &v28);
        v10 = (void (*)(uint64_t, uint64_t, _QWORD, __int128 *))v28;
      }
      if (v10 != (void (*)(uint64_t, uint64_t, _QWORD, __int128 *))v9)
        goto LABEL_23;
      v11 = *(__CFDictionary **)(a3 + 32);
      v32 = 0;
      if (v11)
      {
        ((void (*)(uint64_t, uint64_t, _QWORD, __CFDictionary **))v11)(3, a3, 0, &v32);
        v11 = v32;
      }
      if (v11 == (__CFDictionary *)v9)
      {
        if (*(_QWORD *)(a2 + 32))
        {
          *(_QWORD *)&v28 = AMCP::Implementation::get_type_marker<CA::ValueRange>();
          v12 = (double *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32))(4, a2, 0, &v28);
        }
        else
        {
          v12 = 0;
        }
        *(_QWORD *)&v28 = AMCP::Implementation::get_type_marker<CA::ValueRange>();
        v25 = (double *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a3 + 32))(4, a3, 0, &v28);
        if (CA::operator==(*v12, v12[1], *v25, v25[1]))
          return 1;
      }
      else
      {
LABEL_23:
        v15 = AMCP::Thing::convert_to<CA::ValueRange>(a2);
        v17 = v16;
        v18 = AMCP::Thing::convert_to<CA::ValueRange>(a3);
        if (v17 >= v18 && (v15 >= v18 || v17 > v19) && (v15 >= v18 || v17 <= v19) && v17 == v19 && v15 == v18)
          return 1;
      }
      return 0;
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<AudioValueRange>()
        && *a4 != AMCP::Implementation::get_type_marker<CA::ValueRange>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>())
      {
        goto LABEL_52;
      }
      if (*(_QWORD *)(a2 + 32))
      {
        *(_QWORD *)&v28 = AMCP::Implementation::get_type_marker<CA::ValueRange>();
        v14 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32))(4, a2, 0, &v28);
      }
      else
      {
        v14 = 0;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<AudioValueRange>())
      {
        if (v14)
        {
          v28 = *(_OWORD *)v14;
          v29 = 0uLL;
          v21 = AMCP::Implementation::In_Place_Storage<AudioValueRange>::dispatch;
LABEL_41:
          v30 = (uint64_t (*)())v21;
          goto LABEL_53;
        }
        goto LABEL_60;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<CA::ValueRange>())
      {
        if (v14)
        {
          v29 = 0uLL;
          v28 = *(_OWORD *)v14;
          v21 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<CA::ValueRange>::dispatch;
          goto LABEL_41;
        }
LABEL_60:
        __assert_rtn("create_value_range_from", "Thing.h", 1563, "in_value_ptr != nullptr");
      }
      if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>())
      {
        if (v14)
        {
          Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
          v32 = Mutable;
          applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "float minimum");
          *(_QWORD *)&v28 = *(_QWORD *)v14;
          v23 = CFNumberCreate(0, kCFNumberDoubleType, &v28);
          if (!v23)
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Could not construct");
            __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(Mutable, cf, v23);
          CFRelease(v23);
          if (cf)
            CFRelease(cf);
          applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "float maximum");
          *(_QWORD *)&v28 = *(_QWORD *)(v14 + 8);
          v24 = CFNumberCreate(0, kCFNumberDoubleType, &v28);
          if (!v24)
          {
            v27 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v27, "Could not construct");
            __cxa_throw(v27, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(Mutable, cf, v24);
          CFRelease(v24);
          if (cf)
            CFRelease(cf);
          mcp_applesauce::CF::Dictionary_Builder::copy_dictionary((applesauce::CF::DictionaryRef *)&v28, Mutable);
          *((_QWORD *)&v28 + 1) = 0;
          v29 = 0uLL;
          v30 = AMCP::Implementation::In_Place_Storage<applesauce::CF::DictionaryRef>::dispatch;
          if (Mutable)
            CFRelease(Mutable);
          goto LABEL_53;
        }
        goto LABEL_60;
      }
LABEL_52:
      v30 = 0;
      v28 = 0u;
      v29 = 0u;
LABEL_53:
      AMCP::swap((AMCP::Thing *)&v28, (AMCP::Thing *)a3, v13);
      if (v30)
        ((void (*)(_QWORD, __int128 *, _QWORD, _QWORD))v30)(0, &v28, 0, 0);
      return 0;
    default:
      return result;
  }
}

void sub_1B5810C0C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  const void *v8;
  va_list va;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, const void *);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  mcp_applesauce::CF::Dictionary_Builder::~Dictionary_Builder((const void **)va1);
  __clang_call_terminate(a1);
}

double AMCP::Thing::convert_to<CA::ValueRange>(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, _QWORD, _QWORD);
  _QWORD *v4;
  double v5;
  double *v6;
  std::bad_cast *exception;
  std::bad_cast *v9;
  std::bad_cast *v10;
  std::bad_cast *v11;
  std::bad_cast *v12;
  std::bad_cast *v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t (*v17)(uint64_t, _OWORD *, _QWORD, uint64_t *);
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, _QWORD, _QWORD);

  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_12;
  v2 = AMCP::Implementation::get_type_marker<CA::ValueRange>();
  v3 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a1 + 32);
  v19 = 0;
  if (v3)
  {
    v3(3, a1, 0, &v19);
    v3 = v19;
  }
  if (v3 == (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))v2)
  {
    v18 = v2;
    v4 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a1 + 32))(4, a1, 0, &v18);
    if (v4)
      return *(double *)v4;
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v9 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v9, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v15 = AMCP::Implementation::get_type_marker<CA::ValueRange>();
  memset(v16, 0, sizeof(v16));
  v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a1 + 32))(6, a1, v16, &v15);
  if (!v17)
  {
    v10 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v11 = std::bad_cast::bad_cast(v10);
    __cxa_throw(v11, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v14 = v2;
  v6 = (double *)v17(4, v16, 0, &v14);
  if (!v6)
  {
    v12 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v13 = std::bad_cast::bad_cast(v12);
    __cxa_throw(v13, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v5 = *v6;
  if (v17)
    v17(0, v16, 0, 0);
  return v5;
}

void sub_1B5810E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

BOOL AMCP::Implementation::In_Place_Storage<AudioValueRange>::dispatch(_BOOL8 result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  __int128 v7;
  uint64_t type;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, _QWORD, __int128 *);
  __CFDictionary *v11;
  double *v12;
  AMCP::Thing *v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  uint64_t (*v21)();
  __CFDictionary *Mutable;
  CFNumberRef v23;
  CFNumberRef v24;
  double *v25;
  double v26;
  double v27;
  double v28;
  double v29;
  std::runtime_error *exception;
  std::runtime_error *v32;
  __int128 v33;
  __int128 v34;
  uint64_t (*v35)();
  CFTypeRef cf;
  __CFDictionary *v37;

  switch(result)
  {
    case 0:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      v7 = 0uLL;
      goto LABEL_7;
    case 1:
      result = 0;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<AudioValueRange>::dispatch;
      return result;
    case 2:
      result = 0;
      v7 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<AudioValueRange>::dispatch;
      *(_QWORD *)(a2 + 32) = 0;
LABEL_7:
      *(_OWORD *)a2 = v7;
      *(_OWORD *)(a2 + 16) = v7;
      return result;
    case 3:
      type = AMCP::Implementation::get_type_marker<AudioValueRange>();
      result = 0;
      *a4 = type;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<AudioValueRange>())
        return a2;
      else
        return 0;
    case 5:
      v9 = AMCP::Implementation::get_type_marker<AudioValueRange>();
      v10 = *(void (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32);
      *(_QWORD *)&v33 = 0;
      if (v10)
      {
        v10(3, a2, 0, &v33);
        v10 = (void (*)(uint64_t, uint64_t, _QWORD, __int128 *))v33;
      }
      if (v10 != (void (*)(uint64_t, uint64_t, _QWORD, __int128 *))v9)
        goto LABEL_23;
      v11 = *(__CFDictionary **)(a3 + 32);
      v37 = 0;
      if (v11)
      {
        ((void (*)(uint64_t, uint64_t, _QWORD, __CFDictionary **))v11)(3, a3, 0, &v37);
        v11 = v37;
      }
      if (v11 != (__CFDictionary *)v9)
      {
LABEL_23:
        v15 = AMCP::Thing::convert_to<AudioValueRange>(a2);
        v17 = v16;
        v18 = AMCP::Thing::convert_to<AudioValueRange>(a3);
        if (v17 < v18 || v15 < v18 && v17 <= v19)
          return 0;
        if (v15 < v18 && v17 > v19)
          return 0;
        return v17 == v19 && v15 == v18;
      }
      if (*(_QWORD *)(a2 + 32))
      {
        *(_QWORD *)&v33 = AMCP::Implementation::get_type_marker<AudioValueRange>();
        v12 = (double *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32))(4, a2, 0, &v33);
      }
      else
      {
        v12 = 0;
      }
      if (*(_QWORD *)(a3 + 32))
      {
        *(_QWORD *)&v33 = AMCP::Implementation::get_type_marker<AudioValueRange>();
        v25 = (double *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a3 + 32))(4, a3, 0, &v33);
      }
      else
      {
        v25 = 0;
      }
      v26 = v12[1];
      v27 = *v25;
      if (v26 >= *v25)
      {
        v28 = *v12;
        v29 = v25[1];
        if ((*v12 >= v27 || v26 > v29) && (v28 >= v27 || v26 <= v29) && v26 == v29 && v28 == v27)
          return 1;
      }
      return 0;
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<AudioValueRange>()
        && *a4 != AMCP::Implementation::get_type_marker<CA::ValueRange>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>())
      {
        goto LABEL_52;
      }
      if (*(_QWORD *)(a2 + 32))
      {
        *(_QWORD *)&v33 = AMCP::Implementation::get_type_marker<AudioValueRange>();
        v14 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32))(4, a2, 0, &v33);
      }
      else
      {
        v14 = 0;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<AudioValueRange>())
      {
        if (v14)
        {
          v34 = 0uLL;
          v33 = *(_OWORD *)v14;
          v21 = AMCP::Implementation::In_Place_Storage<AudioValueRange>::dispatch;
LABEL_41:
          v35 = v21;
          goto LABEL_53;
        }
      }
      else if (*a4 == AMCP::Implementation::get_type_marker<CA::ValueRange>())
      {
        if (v14)
        {
          v33 = *(_OWORD *)v14;
          v34 = 0uLL;
          v21 = AMCP::Implementation::In_Place_Storage<CA::ValueRange>::dispatch;
          goto LABEL_41;
        }
      }
      else
      {
        if (*a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>())
        {
LABEL_52:
          v35 = 0;
          v33 = 0u;
          v34 = 0u;
LABEL_53:
          AMCP::swap((AMCP::Thing *)&v33, (AMCP::Thing *)a3, v13);
          if (v35)
            ((void (*)(_QWORD, __int128 *, _QWORD, _QWORD))v35)(0, &v33, 0, 0);
          return 0;
        }
        if (v14)
        {
          Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
          v37 = Mutable;
          applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "float minimum");
          *(_QWORD *)&v33 = *(_QWORD *)v14;
          v23 = CFNumberCreate(0, kCFNumberDoubleType, &v33);
          if (!v23)
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Could not construct");
            __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(Mutable, cf, v23);
          CFRelease(v23);
          if (cf)
            CFRelease(cf);
          applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "float maximum");
          *(_QWORD *)&v33 = *(_QWORD *)(v14 + 8);
          v24 = CFNumberCreate(0, kCFNumberDoubleType, &v33);
          if (!v24)
          {
            v32 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v32, "Could not construct");
            __cxa_throw(v32, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(Mutable, cf, v24);
          CFRelease(v24);
          if (cf)
            CFRelease(cf);
          mcp_applesauce::CF::Dictionary_Builder::copy_dictionary((applesauce::CF::DictionaryRef *)&v33, Mutable);
          *((_QWORD *)&v33 + 1) = 0;
          v34 = 0uLL;
          v35 = AMCP::Implementation::In_Place_Storage<applesauce::CF::DictionaryRef>::dispatch;
          if (Mutable)
            CFRelease(Mutable);
          goto LABEL_53;
        }
      }
      __assert_rtn("create_value_range_from", "Thing.h", 1563, "in_value_ptr != nullptr");
    default:
      return result;
  }
}

void sub_1B5811318(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  const void *v8;
  va_list va;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, const void *);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  mcp_applesauce::CF::Dictionary_Builder::~Dictionary_Builder((const void **)va1);
  __clang_call_terminate(a1);
}

double AMCP::Thing::convert_to<AudioValueRange>(uint64_t a1)
{
  uint64_t type;
  void (*v3)(uint64_t, uint64_t, _QWORD, _QWORD);
  _QWORD *v4;
  double v5;
  double *v6;
  std::bad_cast *exception;
  std::bad_cast *v9;
  std::bad_cast *v10;
  std::bad_cast *v11;
  std::bad_cast *v12;
  std::bad_cast *v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t (*v17)(uint64_t, _OWORD *, _QWORD, uint64_t *);
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, _QWORD, _QWORD);

  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_12;
  type = AMCP::Implementation::get_type_marker<AudioValueRange>();
  v3 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a1 + 32);
  v19 = 0;
  if (v3)
  {
    v3(3, a1, 0, &v19);
    v3 = v19;
  }
  if (v3 == (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))type)
  {
    v18 = type;
    v4 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a1 + 32))(4, a1, 0, &v18);
    if (v4)
      return *(double *)v4;
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v9 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v9, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v15 = AMCP::Implementation::get_type_marker<AudioValueRange>();
  memset(v16, 0, sizeof(v16));
  v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a1 + 32))(6, a1, v16, &v15);
  if (!v17)
  {
    v10 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v11 = std::bad_cast::bad_cast(v10);
    __cxa_throw(v11, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v14 = type;
  v6 = (double *)v17(4, v16, 0, &v14);
  if (!v6)
  {
    v12 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v13 = std::bad_cast::bad_cast(v12);
    __cxa_throw(v13, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v5 = *v6;
  if (v17)
    v17(0, v16, 0, 0);
  return v5;
}

void sub_1B5811518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::get_type_marker<std::tuple<unsigned int,unsigned int>>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return v1[149];
}

BOOL AMCP::Implementation::In_Place_Storage<std::tuple<unsigned int,unsigned int>>::dispatch(_BOOL8 result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, _QWORD, CFTypeRef *);
  __CFDictionary *v11;
  _DWORD *v12;
  AMCP::Thing *v13;
  uint64_t v14;
  uint64_t v15;
  __CFDictionary *Mutable;
  CFNumberRef v17;
  CFNumberRef v18;
  _DWORD *v19;
  std::runtime_error *exception;
  std::runtime_error *v22;
  CFTypeRef cf[2];
  __int128 v24;
  uint64_t (*v25)();
  __CFDictionary *v26;
  int valuePtr;

  switch(result)
  {
    case 0:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      v7 = 0uLL;
      goto LABEL_7;
    case 1:
      result = 0;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_QWORD *)a3 = *(_QWORD *)a2;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::tuple<unsigned int,unsigned int>>::dispatch;
      return result;
    case 2:
      result = 0;
      v7 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_QWORD *)a3 = *(_QWORD *)a2;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::tuple<unsigned int,unsigned int>>::dispatch;
      *(_QWORD *)(a2 + 32) = 0;
LABEL_7:
      *(_OWORD *)a2 = v7;
      *(_OWORD *)(a2 + 16) = v7;
      return result;
    case 3:
      v8 = AMCP::Implementation::get_type_marker<std::tuple<unsigned int,unsigned int>>();
      result = 0;
      *a4 = v8;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::tuple<unsigned int,unsigned int>>())
        return a2;
      else
        return 0;
    case 5:
      v9 = AMCP::Implementation::get_type_marker<std::tuple<unsigned int,unsigned int>>();
      v10 = *(void (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(a2 + 32);
      cf[0] = 0;
      if (v10)
      {
        v10(3, a2, 0, cf);
        v10 = (void (*)(uint64_t, uint64_t, _QWORD, CFTypeRef *))cf[0];
      }
      if (v10 != (void (*)(uint64_t, uint64_t, _QWORD, CFTypeRef *))v9)
        goto LABEL_22;
      v11 = *(__CFDictionary **)(a3 + 32);
      v26 = 0;
      if (v11)
      {
        ((void (*)(uint64_t, uint64_t, _QWORD, __CFDictionary **))v11)(3, a3, 0, &v26);
        v11 = v26;
      }
      if (v11 != (__CFDictionary *)v9)
      {
LABEL_22:
        v15 = AMCP::Thing::convert_to<std::tuple<unsigned int,unsigned int>>(a2);
        return v15 == AMCP::Thing::convert_to<std::tuple<unsigned int,unsigned int>>(a3);
      }
      if (*(_QWORD *)(a2 + 32))
      {
        cf[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<std::tuple<unsigned int,unsigned int>>();
        v12 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(a2 + 32))(4, a2, 0, cf);
      }
      else
      {
        v12 = 0;
      }
      cf[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<std::tuple<unsigned int,unsigned int>>();
      v19 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(a3 + 32))(4, a3, 0, cf);
      return v12[1] == v19[1] && *v12 == *v19;
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<std::tuple<unsigned int,unsigned int>>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>())
      {
        goto LABEL_38;
      }
      if (*(_QWORD *)(a2 + 32))
      {
        cf[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<std::tuple<unsigned int,unsigned int>>();
        v14 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(a2 + 32))(4, a2, 0, cf);
      }
      else
      {
        v14 = 0;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<std::tuple<unsigned int,unsigned int>>())
      {
        if (v14)
        {
          cf[1] = 0;
          v24 = 0uLL;
          cf[0] = *(CFTypeRef *)v14;
          v25 = AMCP::Implementation::In_Place_Storage<std::tuple<unsigned int,unsigned int>>::dispatch;
          goto LABEL_39;
        }
      }
      else
      {
        if (*a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>())
        {
LABEL_38:
          v25 = 0;
          *(_OWORD *)cf = 0u;
          v24 = 0u;
LABEL_39:
          AMCP::swap((AMCP::Thing *)cf, (AMCP::Thing *)a3, v13);
          if (v25)
            ((void (*)(_QWORD, CFTypeRef *, _QWORD, _QWORD))v25)(0, cf, 0, 0);
          return 0;
        }
        if (v14)
        {
          Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
          v26 = Mutable;
          applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)cf, "u32 minimum");
          valuePtr = *(_DWORD *)v14;
          v17 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
          if (!v17)
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Could not construct");
            __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(Mutable, cf[0], v17);
          CFRelease(v17);
          if (cf[0])
            CFRelease(cf[0]);
          applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)cf, "u32 maximum");
          valuePtr = *(_DWORD *)(v14 + 4);
          v18 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
          if (!v18)
          {
            v22 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v22, "Could not construct");
            __cxa_throw(v22, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(Mutable, cf[0], v18);
          CFRelease(v18);
          if (cf[0])
            CFRelease(cf[0]);
          mcp_applesauce::CF::Dictionary_Builder::copy_dictionary((applesauce::CF::DictionaryRef *)cf, Mutable);
          cf[1] = 0;
          v24 = 0uLL;
          v25 = AMCP::Implementation::In_Place_Storage<applesauce::CF::DictionaryRef>::dispatch;
          if (Mutable)
            CFRelease(Mutable);
          goto LABEL_39;
        }
      }
      __assert_rtn("create_min_max_u32_from", "Thing.h", 1502, "in_value_ptr != nullptr");
    default:
      return result;
  }
}

void sub_1B58119C8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, const void *a15)
{
  applesauce::CF::StringRef::~StringRef(&a9);
  mcp_applesauce::CF::Dictionary_Builder::~Dictionary_Builder(&a15);
  __clang_call_terminate(a1);
}

uint64_t AMCP::Thing::convert_to<std::tuple<unsigned int,unsigned int>>(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  std::bad_cast *exception;
  std::bad_cast *v9;
  std::bad_cast *v10;
  std::bad_cast *v11;
  std::bad_cast *v12;
  std::bad_cast *v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t (*v17)(uint64_t, _OWORD *, _QWORD, uint64_t *);
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, _QWORD, _QWORD);

  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_12;
  v2 = AMCP::Implementation::get_type_marker<std::tuple<unsigned int,unsigned int>>();
  v3 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a1 + 32);
  v19 = 0;
  if (v3)
  {
    v3(3, a1, 0, &v19);
    v3 = v19;
  }
  if (v3 == (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))v2)
  {
    v18 = v2;
    v4 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a1 + 32))(4, a1, 0, &v18);
    if (v4)
      return *(_QWORD *)v4;
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v9 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v9, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v15 = AMCP::Implementation::get_type_marker<std::tuple<unsigned int,unsigned int>>();
  memset(v16, 0, sizeof(v16));
  v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a1 + 32))(6, a1, v16, &v15);
  if (!v17)
  {
    v10 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v11 = std::bad_cast::bad_cast(v10);
    __cxa_throw(v11, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v14 = v2;
  v6 = (uint64_t *)v17(4, v16, 0, &v14);
  if (!v6)
  {
    v12 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v13 = std::bad_cast::bad_cast(v12);
    __cxa_throw(v13, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v5 = *v6;
  if (v17)
    v17(0, v16, 0, 0);
  return v5;
}

void sub_1B5811BBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::get_type_marker<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return v1[147];
}

void applesauce::CF::details::find_at_key_or_optional<applesauce::CF::StringRef,applesauce::CF::StringRef>(_BYTE *a1, CFDictionaryRef theDict, const void *a3)
{
  const void *v4;
  const void *v5;
  CFTypeID v6;
  char v7;

  v4 = applesauce::CF::details::at_key<applesauce::CF::StringRef>(theDict, a3);
  if (!v4)
    goto LABEL_5;
  v5 = v4;
  CFRetain(v4);
  v6 = CFGetTypeID(v5);
  if (v6 != CFStringGetTypeID())
  {
    CFRelease(v5);
LABEL_5:
    v7 = 0;
    *a1 = 0;
    goto LABEL_6;
  }
  *(_QWORD *)a1 = v5;
  v7 = 1;
LABEL_6:
  a1[8] = v7;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::dispatch(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, _QWORD, CFTypeRef *);
  __CFDictionary *v10;
  uint64_t v11;
  AMCP::Thing *v12;
  uint64_t v13;
  BOOL v14;
  __CFDictionary *Mutable;
  CFNumberRef v16;
  CFNumberRef v17;
  uint64_t v18;
  std::runtime_error *exception;
  std::runtime_error *v20;
  CFTypeRef v21[5];
  __CFDictionary *v22;
  CFTypeRef cf;
  int valuePtr;

  switch((int)result)
  {
    case 0:
      goto LABEL_7;
    case 1:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_DWORD *)a3 = *(_DWORD *)a2;
      *(_DWORD *)(a3 + 4) = *(_DWORD *)(a2 + 4);
      std::__tuple_leaf<2ul,applesauce::CF::StringRef,false>::__tuple_leaf[abi:ne180100]((_QWORD *)(a3 + 8), *(CFTypeRef *)(a2 + 8));
      result = 0;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_DWORD *)a3 = *(_DWORD *)a2;
      *(_DWORD *)(a3 + 4) = *(_DWORD *)(a2 + 4);
      *(_QWORD *)(a3 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::dispatch;
LABEL_7:
      AMCP::Implementation::In_Place_Storage<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::destruct(a2);
      return 0;
    case 3:
      v7 = AMCP::Implementation::get_type_marker<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>();
      result = 0;
      *a4 = v7;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>())
        return a2;
      else
        return 0;
    case 5:
      v8 = AMCP::Implementation::get_type_marker<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>();
      v9 = *(void (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(a2 + 32);
      v21[0] = 0;
      if (v9)
      {
        v9(3, a2, 0, v21);
        v9 = (void (*)(uint64_t, uint64_t, _QWORD, CFTypeRef *))v21[0];
      }
      if (v9 != (void (*)(uint64_t, uint64_t, _QWORD, CFTypeRef *))v8)
        goto LABEL_21;
      v10 = *(__CFDictionary **)(a3 + 32);
      v22 = 0;
      if (v10)
      {
        ((void (*)(uint64_t, uint64_t, _QWORD, __CFDictionary **))v10)(3, a3, 0, &v22);
        v10 = v22;
      }
      if (v10 == (__CFDictionary *)v8)
      {
        if (*(_QWORD *)(a2 + 32))
        {
          v21[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>();
          v11 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(a2 + 32))(4, a2, 0, v21);
        }
        else
        {
          v11 = 0;
        }
        v18 = *(_QWORD *)(a3 + 32);
        if (v18)
        {
          v21[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>();
          v18 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(a3 + 32))(4, a3, 0, v21);
        }
        result = 0;
        if (*(_DWORD *)v11 != *(_DWORD *)v18 || *(_DWORD *)(v11 + 4) != *(_DWORD *)(v18 + 4))
          return result;
        if (applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*(const __CFString **)(v11 + 8), (const __CFString **)(v18 + 8)) == kCFCompareEqualTo)return 1;
      }
      else
      {
LABEL_21:
        AMCP::Thing::convert_to<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>((uint64_t)v21, a2);
        AMCP::Thing::convert_to<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>((uint64_t)&v22, a3);
        v14 = 0;
        if (v21[0] == v22)
          v14 = applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>((const __CFString *)v21[1], (const __CFString **)&cf) == kCFCompareEqualTo;
        if (cf)
          CFRelease(cf);
        if (v21[1])
          CFRelease(v21[1]);
        if (v14)
          return 1;
      }
      return 0;
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>())
      {
        goto LABEL_45;
      }
      if (*(_QWORD *)(a2 + 32))
      {
        v21[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>();
        v13 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(a2 + 32))(4, a2, 0, v21);
      }
      else
      {
        v13 = 0;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>())
      {
        if (v13)
        {
          memset(&v21[1], 0, 32);
          v21[0] = *(CFTypeRef *)v13;
          std::__tuple_leaf<2ul,applesauce::CF::StringRef,false>::__tuple_leaf[abi:ne180100](&v21[1], *(CFTypeRef *)(v13 + 8));
          v21[4] = AMCP::Implementation::In_Place_Storage<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::dispatch;
          goto LABEL_46;
        }
LABEL_57:
        __assert_rtn("create_selector_item_from", "Thing.h", 1366, "in_value_ptr != nullptr");
      }
      if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>())
      {
        if (v13)
        {
          Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
          v22 = Mutable;
          applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v21, "item id");
          valuePtr = *(_DWORD *)v13;
          v16 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
          if (!v16)
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Could not construct");
            __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(Mutable, v21[0], v16);
          CFRelease(v16);
          if (v21[0])
            CFRelease(v21[0]);
          applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v21, "kind");
          valuePtr = *(_DWORD *)(v13 + 4);
          v17 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
          if (!v17)
          {
            v20 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v20, "Could not construct");
            __cxa_throw(v20, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(Mutable, v21[0], v17);
          CFRelease(v17);
          if (v21[0])
            CFRelease(v21[0]);
          applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v21, "name");
          mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::StringRef>(Mutable, v21[0], *(const void **)(v13 + 8));
          if (v21[0])
            CFRelease(v21[0]);
          mcp_applesauce::CF::Dictionary_Builder::copy_dictionary((applesauce::CF::DictionaryRef *)v21, Mutable);
          memset(&v21[1], 0, 24);
          v21[4] = AMCP::Implementation::In_Place_Storage<applesauce::CF::DictionaryRef>::dispatch;
          if (Mutable)
            CFRelease(Mutable);
          goto LABEL_46;
        }
        goto LABEL_57;
      }
LABEL_45:
      memset(v21, 0, sizeof(v21));
LABEL_46:
      AMCP::swap((AMCP::Thing *)v21, (AMCP::Thing *)a3, v12);
      if (v21[4])
        ((void (*)(_QWORD, CFTypeRef *, _QWORD, _QWORD))v21[4])(0, v21, 0, 0);
      return 0;
    default:
      return result;
  }
}

void sub_1B58121C4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, const void *a14)
{
  applesauce::CF::StringRef::~StringRef(&a9);
  mcp_applesauce::CF::Dictionary_Builder::~Dictionary_Builder(&a14);
  __clang_call_terminate(a1);
}

double AMCP::Implementation::In_Place_Storage<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::destruct(uint64_t a1)
{
  const void *v2;
  double result;

  v2 = *(const void **)(a1 + 8);
  if (v2)
    CFRelease(v2);
  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

_QWORD *std::__tuple_leaf<2ul,applesauce::CF::StringRef,false>::__tuple_leaf[abi:ne180100](_QWORD *a1, CFTypeRef cf)
{
  if (cf)
    CFRetain(cf);
  *a1 = cf;
  return a1;
}

_QWORD *AMCP::Thing::convert_to<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  std::bad_cast *exception;
  std::bad_cast *v10;
  std::bad_cast *v11;
  std::bad_cast *v12;
  std::bad_cast *v13;
  std::bad_cast *v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[2];
  uint64_t (*v18)(uint64_t, _OWORD *, _QWORD, uint64_t *);
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, _QWORD, _QWORD);

  if (!*(_QWORD *)(a2 + 32))
    goto LABEL_12;
  v4 = AMCP::Implementation::get_type_marker<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>();
  v5 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a2 + 32);
  v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))v4)
  {
    v19 = v4;
    v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (v6)
    {
      *(_DWORD *)a1 = *(_DWORD *)v6;
      *(_DWORD *)(a1 + 4) = *(_DWORD *)(v6 + 4);
      return std::__tuple_leaf<2ul,applesauce::CF::StringRef,false>::__tuple_leaf[abi:ne180100]((_QWORD *)(a1 + 8), *(CFTypeRef *)(v6 + 8));
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v16 = AMCP::Implementation::get_type_marker<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>();
  memset(v17, 0, sizeof(v17));
  v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v15 = v4;
  v8 = v18(4, v17, 0, &v15);
  if (!v8)
  {
    v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  *(_DWORD *)a1 = *(_DWORD *)v8;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(v8 + 4);
  result = std::__tuple_leaf<2ul,applesauce::CF::StringRef,false>::__tuple_leaf[abi:ne180100]((_QWORD *)(a1 + 8), *(CFTypeRef *)(v8 + 8));
  if (v18)
    return (_QWORD *)v18(0, v17, 0, 0);
  return result;
}

void sub_1B581248C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

uint64_t std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>::~tuple(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 8);
  if (v2)
    CFRelease(v2);
  return a1;
}

void mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::StringRef>(__CFDictionary *a1, const void *a2, const void *a3)
{
  if (a1)
    CFDictionarySetValue(a1, a2, a3);
}

uint64_t AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::construct<applesauce::CF::ArrayRef&>(uint64_t a1, CFTypeRef *a2)
{
  CFTypeRef v3;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v3 = *a2;
  if (*a2)
    CFRetain(*a2);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::dispatch;
  return a1;
}

BOOL AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::dispatch(_BOOL8 result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, _QWORD, CFTypeRef *);
  void (*v10)(uint64_t, uint64_t, _QWORD, CFTypeRef *);
  const void **v11;
  AMCP::Thing *v12;
  CFTypeRef v13;
  CFTypeRef v14;
  BOOL v15;
  const void **v16;
  unint64_t v17;
  unint64_t v18;
  CFTypeRef cf1[4];
  void (*v20)(_QWORD, CFTypeRef *, _QWORD, _QWORD);
  CFTypeRef cf2;

  switch(result)
  {
    case 0:
      goto LABEL_4;
    case 1:
      AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::construct<applesauce::CF::ArrayRef const&>(a3, (CFTypeRef *)a2);
      return 0;
    case 2:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_QWORD *)a3 = *(_QWORD *)a2;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::dispatch;
LABEL_4:
      AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::destruct(a2);
      return 0;
    case 3:
      v7 = AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>();
      result = 0;
      *a4 = v7;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
        return a2;
      else
        return 0;
    case 5:
      v8 = AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>();
      v9 = *(void (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(a2 + 32);
      cf1[0] = 0;
      if (v9)
      {
        v9(3, a2, 0, cf1);
        v9 = (void (*)(uint64_t, uint64_t, _QWORD, CFTypeRef *))cf1[0];
      }
      if (v9 != (void (*)(uint64_t, uint64_t, _QWORD, CFTypeRef *))v8)
        goto LABEL_19;
      v10 = *(void (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(a3 + 32);
      cf2 = 0;
      if (v10)
      {
        v10(3, a3, 0, &cf2);
        v10 = (void (*)(uint64_t, uint64_t, _QWORD, CFTypeRef *))cf2;
      }
      if (v10 != (void (*)(uint64_t, uint64_t, _QWORD, CFTypeRef *))v8)
      {
LABEL_19:
        AMCP::Thing::convert_to<applesauce::CF::ArrayRef>(cf1, a2);
        AMCP::Thing::convert_to<applesauce::CF::ArrayRef>(&cf2, a3);
        v13 = cf1[0];
        v14 = cf2;
        v15 = ((unint64_t)cf1[0] | (unint64_t)cf2) == 0;
        if (cf1[0] && cf2)
        {
          v15 = CFEqual(cf1[0], cf2) != 0;
        }
        else if (!cf2)
        {
          goto LABEL_24;
        }
        CFRelease(v14);
LABEL_24:
        if (v13)
          CFRelease(v13);
        return v15;
      }
      if (*(_QWORD *)(a2 + 32))
      {
        cf1[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>();
        v11 = (const void **)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(a2 + 32))(4, a2, 0, cf1);
      }
      else
      {
        v11 = 0;
      }
      cf1[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>();
      v16 = (const void **)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(a3 + 32))(4, a3, 0, cf1);
      v17 = (unint64_t)*v11;
      v18 = (unint64_t)*v16;
      if (*v11 && v18)
        return CFEqual((CFTypeRef)v17, (CFTypeRef)v18) != 0;
      return !(v17 | v18);
    case 6:
      AMCP::Implementation::create_thing_from<applesauce::CF::ArrayRef>((uint64_t)cf1, a2, a4);
      AMCP::swap((AMCP::Thing *)cf1, (AMCP::Thing *)a3, v12);
      if (v20)
        v20(0, cf1, 0, 0);
      return 0;
    default:
      return result;
  }
}

void sub_1B58127B4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  applesauce::CF::ArrayRef::~ArrayRef(&a9);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5812778);
}

double AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::destruct(uint64_t a1)
{
  const void *v2;
  double result;

  v2 = *(const void **)a1;
  if (v2)
    CFRelease(v2);
  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::construct<applesauce::CF::ArrayRef const&>(uint64_t a1, CFTypeRef *a2)
{
  CFTypeRef v3;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v3 = *a2;
  if (*a2)
    CFRetain(*a2);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::dispatch;
  return a1;
}

CFTypeRef *AMCP::Thing::convert_to<applesauce::CF::ArrayRef>(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, _QWORD, _QWORD);
  CFTypeRef *result;
  CFTypeRef v7;
  CFTypeRef v8;
  std::bad_cast *exception;
  std::bad_cast *v10;
  std::bad_cast *v11;
  std::bad_cast *v12;
  std::bad_cast *v13;
  std::bad_cast *v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[2];
  uint64_t (*v18)(uint64_t, _OWORD *, _QWORD, uint64_t *);
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, _QWORD, _QWORD);

  if (!*(_QWORD *)(a2 + 32))
    goto LABEL_16;
  v4 = AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>();
  v5 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a2 + 32);
  v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))v4)
  {
    v19 = v4;
    result = (CFTypeRef *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (result)
    {
      v7 = *result;
      if (*result)
        result = (CFTypeRef *)CFRetain(*result);
      *a1 = v7;
      return result;
    }
LABEL_16:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v16 = AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>();
  memset(v17, 0, sizeof(v17));
  v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v15 = v4;
  result = (CFTypeRef *)v18(4, v17, 0, &v15);
  if (!result)
  {
    v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v8 = *result;
  if (*result)
    result = (CFTypeRef *)CFRetain(*result);
  *a1 = v8;
  if (v18)
    return (CFTypeRef *)v18(0, v17, 0, 0);
  return result;
}

void sub_1B58129F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

void AMCP::Implementation::create_thing_from<applesauce::CF::ArrayRef>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  CFTypeRef *v5;
  AMCP::Thing *v6;
  CFArrayRef *v7;
  CFIndex v8;
  unint64_t i;
  _BOOL4 v10;
  std::vector<std::string>::pointer end;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  std::string::size_type v16;
  std::vector<std::string>::pointer begin;
  CFIndex Count;
  CFIndex v19;
  std::string *v20;
  unint64_t v21;
  std::string *v22;
  std::string *v23;
  std::string::value_type v24;
  std::string::value_type v25;
  uint64_t v26;
  uint64_t v27;
  size_t v28;
  std::string *v29;
  std::string *v30;
  _BYTE *v31;
  char v32;
  CFIndex v33;
  CFIndex v34;
  std::string *v35;
  unint64_t v36;
  std::string *v37;
  std::string::value_type v38;
  std::string::value_type v39;
  uint64_t v40;
  uint64_t v41;
  size_t v42;
  std::string *v43;
  std::string *v44;
  _BYTE *v45;
  char v46;
  CFIndex v47;
  CFIndex v48;
  std::string *v49;
  unint64_t v50;
  std::string *v51;
  std::string::value_type v52;
  std::string::value_type v53;
  uint64_t v54;
  uint64_t v55;
  size_t v56;
  std::string *v57;
  std::string *v58;
  _BYTE *v59;
  char v60;
  uint64_t (*v61)(uint64_t, uint64_t, uint64_t, uint64_t *);
  CFIndex v62;
  CFIndex v63;
  std::string *v64;
  unint64_t v65;
  uint64_t v66;
  std::string *v67;
  __int16 v68;
  __int16 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  std::string *v76;
  __int16 v77;
  uint64_t v78;
  AMCP::Thing *v79;
  CFTypeRef *v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  const __CFArray *v85;
  const __CFString *ValueAtIndex;
  const __CFString *v87;
  CFTypeID v88;
  std::vector<std::string>::pointer v89;
  __int128 v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  std::string *v96;
  __int128 v97;
  std::string *v98;
  __int128 *v99;
  __int128 *v100;
  AMCP::Thing *v101;
  CFArrayRef *v102;
  unint64_t v103;
  unint64_t v104;
  std::string *v105;
  uint64_t v106;
  std::string *value;
  std::vector<std::string>::pointer v108;
  std::vector<std::string>::pointer v109;
  std::string *v110;
  int v111;
  int64x2_t v112;
  std::string *v113;
  unint64_t v114;
  int v115;
  int v116;
  CFTypeRef v117;
  AMCP::Thing *v118;
  AMCP::Thing *v119;
  AMCP::Thing *v120;
  AMCP::Thing *v121;
  std::runtime_error *v122;
  std::runtime_error *v123;
  std::runtime_error *exception;
  std::runtime_error *v125;
  std::runtime_error *v126;
  std::runtime_error *v127;
  std::runtime_error *v128;
  std::runtime_error *v129;
  std::runtime_error *v130;
  std::runtime_error *v131;
  std::runtime_error *v132;
  std::runtime_error *v133;
  std::runtime_error *v134;
  std::runtime_error *v135;
  std::runtime_error *v136;
  std::runtime_error *v137;
  std::runtime_error *v138;
  std::runtime_error *v139;
  std::runtime_error *v140;
  std::runtime_error *v141;
  uint64_t v142;
  void *__p[2];
  std::string::size_type v146;
  int v147;
  int v148;
  CFTypeRef v149;
  CFTypeRef v150;
  char v151;
  CFTypeRef v152;
  char v153;
  std::vector<std::string> v154;
  std::__split_buffer<std::string> cf;

  if (*a3 != AMCP::Implementation::get_type_marker<mcp_applesauce::CF::PropertyListRef>()
    && *a3 != AMCP::Implementation::get_type_marker<applesauce::CF::StringRef>()
    && *a3 != AMCP::Implementation::get_type_marker<applesauce::CF::DataRef>()
    && *a3 != AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>()
    && *a3 != AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>()
    && *a3 != AMCP::Implementation::get_type_marker<applesauce::CF::DateRef>()
    && *a3 != AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>()
    && *a3 != AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>()
    || *a3 != AMCP::Implementation::get_type_marker<mcp_applesauce::CF::PropertyListRef>())
  {
    goto LABEL_27;
  }
  if (*(_QWORD *)(a2 + 32))
  {
    cf.__first_ = (std::__split_buffer<std::string>::pointer)AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>();
    v5 = (CFTypeRef *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, std::__split_buffer<std::string> *))(a2 + 32))(4, a2, 0, &cf);
  }
  else
  {
    v5 = 0;
  }
  if (*a3 != AMCP::Implementation::get_type_marker<mcp_applesauce::CF::PropertyListRef>())
  {
    if ((*a3 == AMCP::Implementation::get_type_marker<applesauce::CF::StringRef>()
       || *a3 == AMCP::Implementation::get_type_marker<applesauce::CF::DataRef>()
       || *a3 == AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>()
       || *a3 == AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>()
       || *a3 == AMCP::Implementation::get_type_marker<applesauce::CF::DateRef>()
       || *a3 == AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>()
       || *a3 == AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>())
      && !v5)
    {
LABEL_315:
      __assert_rtn("create_cf_plist_from", "Thing.h", 2434, "in_value_ptr != nullptr");
    }
LABEL_27:
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    goto LABEL_28;
  }
  if (!v5)
    goto LABEL_315;
  mcp_applesauce::CF::PropertyListRef::from_get((mcp_applesauce::CF::PropertyListRef *)&cf, *v5);
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  AMCP::Implementation::In_Place_Storage<mcp_applesauce::CF::PropertyListRef>::construct<mcp_applesauce::CF::PropertyListRef&>(a1, &cf);
  if (cf.__first_)
    CFRelease(cf.__first_);
  if (*(_QWORD *)(a1 + 32))
    return;
LABEL_28:
  if (*a3 != AMCP::Implementation::get_type_marker<std::vector<BOOL>>()
    && *a3 != AMCP::Implementation::get_type_marker<std::vector<char>>()
    && *a3 != AMCP::Implementation::get_type_marker<std::vector<signed char>>()
    && *a3 != AMCP::Implementation::get_type_marker<std::vector<unsigned char>>()
    && *a3 != AMCP::Implementation::get_type_marker<std::vector<short>>()
    && *a3 != AMCP::Implementation::get_type_marker<std::vector<unsigned short>>()
    && *a3 != AMCP::Implementation::get_type_marker<std::vector<int>>()
    && !AMCP::is_one_of<std::vector<unsigned int>,std::vector<long>,std::vector<unsigned long>,std::vector<long long>,std::vector<unsigned long long>,std::vector<float>,std::vector<double>,std::vector<long double>,applesauce::CF::ArrayRef>(a3))
  {
    goto LABEL_326;
  }
  if (*(_QWORD *)(a2 + 32))
  {
    cf.__first_ = (std::__split_buffer<std::string>::pointer)AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>();
    v7 = (CFArrayRef *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, std::__split_buffer<std::string> *))(a2 + 32))(4, a2, 0, &cf);
  }
  else
  {
    v7 = 0;
  }
  if (*a3 != AMCP::Implementation::get_type_marker<std::vector<BOOL>>())
  {
    v142 = a1;
    if (*a3 == AMCP::Implementation::get_type_marker<std::vector<char>>())
    {
      if (v7)
      {
        if (*v7)
        {
          Count = CFArrayGetCount(*v7);
          v19 = Count;
          if (Count)
          {
            if (Count < 0)
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            v20 = (std::string *)operator new(Count);
            v21 = 0;
            v22 = (std::string *)((char *)v20 + v19);
            v23 = v20;
            while (1)
            {
              if (!*v7)
              {
                exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(exception, "Could not construct");
                __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              applesauce::CF::details::at_as<applesauce::CF::NumberRef>(&cf, *v7, v21);
              if (LOBYTE(cf.__begin_))
              {
                if (!cf.__first_)
                {
                  v125 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v125, "Could not construct");
                  __cxa_throw(v125, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                }
                v24 = applesauce::CF::convert_to<char,0>((const __CFNumber *)cf.__first_);
                v25 = v24;
                if (v20 >= v22)
                {
                  v27 = (char *)v20 - (char *)v23 + 1;
                  if (v27 < 0)
                    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                  if (2 * ((char *)v22 - (char *)v23) > (unint64_t)v27)
                    v27 = 2 * ((char *)v22 - (char *)v23);
                  if ((unint64_t)((char *)v22 - (char *)v23) >= 0x3FFFFFFFFFFFFFFFLL)
                    v28 = 0x7FFFFFFFFFFFFFFFLL;
                  else
                    v28 = v27;
                  if (v28)
                    v29 = (std::string *)operator new(v28);
                  else
                    v29 = 0;
                  v30 = (std::string *)((char *)v29 + (char *)v20 - (char *)v23);
                  v30->__r_.__value_.__s.__data_[0] = v25;
                  v26 = (uint64_t)v30->__r_.__value_.__r.__words + 1;
                  if (v20 != v23)
                  {
                    v31 = (char *)v20 + ~(unint64_t)v23;
                    do
                    {
                      v32 = HIBYTE(v20[-1].__r_.__value_.__r.__words[2]);
                      v20 = (std::string *)((char *)v20 - 1);
                      (v31--)[(_QWORD)v29] = v32;
                    }
                    while (v20 != v23);
                    v30 = v29;
                  }
                  v22 = (std::string *)((char *)v29 + v28);
                  if (v23)
                    operator delete(v23);
                  v23 = v30;
                  goto LABEL_90;
                }
                v20->__r_.__value_.__s.__data_[0] = v24;
                v20 = (std::string *)((char *)v20 + 1);
              }
              v26 = (uint64_t)v20;
LABEL_90:
              std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
              ++v21;
              v20 = (std::string *)v26;
              if (v21 == v19)
                goto LABEL_153;
            }
          }
          v23 = 0;
          v26 = 0;
LABEL_153:
          memset(&cf, 0, sizeof(cf));
          std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(&cf, v23, v26, v26 - (_QWORD)v23);
          v61 = AMCP::Implementation::In_Place_Storage<std::vector<char>>::dispatch;
LABEL_194:
          cf.__end_cap_.__value_ = (std::allocator<std::string> *)v61;
          a1 = v142;
          if (!v23)
            goto LABEL_197;
          begin = v23;
          goto LABEL_196;
        }
LABEL_361:
        v141 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v141, "Could not construct");
        __cxa_throw(v141, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
LABEL_314:
      __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
    }
    if (*a3 == AMCP::Implementation::get_type_marker<std::vector<signed char>>())
    {
      if (!v7)
        goto LABEL_314;
      if (!*v7)
        goto LABEL_361;
      v33 = CFArrayGetCount(*v7);
      v34 = v33;
      if (!v33)
      {
        v23 = 0;
        v40 = 0;
LABEL_185:
        memset(&cf, 0, sizeof(cf));
        std::vector<signed char>::__init_with_size[abi:ne180100]<signed char *,signed char *>(&cf, v23, v40, v40 - (_QWORD)v23);
        v61 = AMCP::Implementation::In_Place_Storage<std::vector<signed char>>::dispatch;
        goto LABEL_194;
      }
      if (v33 < 0)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v35 = (std::string *)operator new(v33);
      v36 = 0;
      v37 = (std::string *)((char *)v35 + v34);
      v23 = v35;
      while (1)
      {
        if (!*v7)
        {
          v127 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v127, "Could not construct");
          __cxa_throw(v127, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        applesauce::CF::details::at_as<applesauce::CF::NumberRef>(&cf, *v7, v36);
        if (LOBYTE(cf.__begin_))
        {
          if (!cf.__first_)
          {
            v128 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v128, "Could not construct");
            __cxa_throw(v128, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          v38 = applesauce::CF::convert_to<signed char,0>((const __CFNumber *)cf.__first_);
          v39 = v38;
          if (v35 >= v37)
          {
            v41 = (char *)v35 - (char *)v23 + 1;
            if (v41 < 0)
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            if (2 * ((char *)v37 - (char *)v23) > (unint64_t)v41)
              v41 = 2 * ((char *)v37 - (char *)v23);
            if ((unint64_t)((char *)v37 - (char *)v23) >= 0x3FFFFFFFFFFFFFFFLL)
              v42 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v42 = v41;
            if (v42)
              v43 = (std::string *)operator new(v42);
            else
              v43 = 0;
            v44 = (std::string *)((char *)v43 + (char *)v35 - (char *)v23);
            v44->__r_.__value_.__s.__data_[0] = v39;
            v40 = (uint64_t)v44->__r_.__value_.__r.__words + 1;
            if (v35 != v23)
            {
              v45 = (char *)v35 + ~(unint64_t)v23;
              do
              {
                v46 = HIBYTE(v35[-1].__r_.__value_.__r.__words[2]);
                v35 = (std::string *)((char *)v35 - 1);
                (v45--)[(_QWORD)v43] = v46;
              }
              while (v35 != v23);
              v44 = v43;
            }
            v37 = (std::string *)((char *)v43 + v42);
            if (v23)
              operator delete(v23);
            v23 = v44;
            goto LABEL_120;
          }
          v35->__r_.__value_.__s.__data_[0] = v38;
          v35 = (std::string *)((char *)v35 + 1);
        }
        v40 = (uint64_t)v35;
LABEL_120:
        std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
        ++v36;
        v35 = (std::string *)v40;
        if (v36 == v34)
          goto LABEL_185;
      }
    }
    if (*a3 == AMCP::Implementation::get_type_marker<std::vector<unsigned char>>())
    {
      if (!v7)
        goto LABEL_314;
      if (!*v7)
        goto LABEL_361;
      v47 = CFArrayGetCount(*v7);
      v48 = v47;
      if (!v47)
      {
        v23 = 0;
        v54 = 0;
LABEL_189:
        memset(&cf, 0, sizeof(cf));
        std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&cf, v23, v54, v54 - (_QWORD)v23);
        v61 = AMCP::Implementation::In_Place_Storage<std::vector<unsigned char>>::dispatch;
        goto LABEL_194;
      }
      if (v47 < 0)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v49 = (std::string *)operator new(v47);
      v50 = 0;
      v51 = (std::string *)((char *)v49 + v48);
      v23 = v49;
      while (1)
      {
        if (!*v7)
        {
          v129 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v129, "Could not construct");
          __cxa_throw(v129, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        applesauce::CF::details::at_as<applesauce::CF::NumberRef>(&cf, *v7, v50);
        if (LOBYTE(cf.__begin_))
        {
          if (!cf.__first_)
          {
            v131 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v131, "Could not construct");
            __cxa_throw(v131, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          v52 = applesauce::CF::convert_to<unsigned char,0>((const __CFNumber *)cf.__first_);
          v53 = v52;
          if (v49 >= v51)
          {
            v55 = (char *)v49 - (char *)v23 + 1;
            if (v55 < 0)
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            if (2 * ((char *)v51 - (char *)v23) > (unint64_t)v55)
              v55 = 2 * ((char *)v51 - (char *)v23);
            if ((unint64_t)((char *)v51 - (char *)v23) >= 0x3FFFFFFFFFFFFFFFLL)
              v56 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v56 = v55;
            if (v56)
              v57 = (std::string *)operator new(v56);
            else
              v57 = 0;
            v58 = (std::string *)((char *)v57 + (char *)v49 - (char *)v23);
            v58->__r_.__value_.__s.__data_[0] = v53;
            v54 = (uint64_t)v58->__r_.__value_.__r.__words + 1;
            if (v49 != v23)
            {
              v59 = (char *)v49 + ~(unint64_t)v23;
              do
              {
                v60 = HIBYTE(v49[-1].__r_.__value_.__r.__words[2]);
                v49 = (std::string *)((char *)v49 - 1);
                (v59--)[(_QWORD)v57] = v60;
              }
              while (v49 != v23);
              v58 = v57;
            }
            v51 = (std::string *)((char *)v57 + v56);
            if (v23)
              operator delete(v23);
            v23 = v58;
            goto LABEL_150;
          }
          v49->__r_.__value_.__s.__data_[0] = v52;
          v49 = (std::string *)((char *)v49 + 1);
        }
        v54 = (uint64_t)v49;
LABEL_150:
        std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
        ++v50;
        v49 = (std::string *)v54;
        if (v50 == v48)
          goto LABEL_189;
      }
    }
    if (*a3 == AMCP::Implementation::get_type_marker<std::vector<short>>())
    {
      if (!v7)
        goto LABEL_314;
      if (!*v7)
        goto LABEL_361;
      v62 = CFArrayGetCount(*v7);
      v63 = v62;
      if (!v62)
      {
        v70 = 0;
        v23 = 0;
LABEL_193:
        memset(&cf, 0, sizeof(cf));
        std::vector<short>::__init_with_size[abi:ne180100]<short *,short *>(&cf, v23, v70, (v70 - (uint64_t)v23) >> 1);
        v61 = AMCP::Implementation::In_Place_Storage<std::vector<short>>::dispatch;
        goto LABEL_194;
      }
      if (v62 < 0)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v64 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v62);
      v65 = 0;
      v23 = v64;
      v67 = (std::string *)((char *)v64 + 2 * v66);
      while (1)
      {
        if (!*v7)
        {
          v135 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v135, "Could not construct");
          __cxa_throw(v135, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        applesauce::CF::details::at_as<applesauce::CF::NumberRef>(&cf, *v7, v65);
        if (LOBYTE(cf.__begin_))
        {
          if (!cf.__first_)
          {
            v138 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v138, "Could not construct");
            __cxa_throw(v138, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          v68 = applesauce::CF::convert_to<short,0>((const __CFNumber *)cf.__first_);
          v69 = v68;
          if (v64 >= v67)
          {
            v71 = (char *)v64 - (char *)v23;
            if ((char *)v64 - (char *)v23 <= -3)
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            v72 = v71 >> 1;
            if ((char *)v67 - (char *)v23 <= (unint64_t)((v71 >> 1) + 1))
              v73 = v72 + 1;
            else
              v73 = (char *)v67 - (char *)v23;
            if ((unint64_t)((char *)v67 - (char *)v23) >= 0x7FFFFFFFFFFFFFFELL)
              v74 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v74 = v73;
            if (v74)
              v74 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v74);
            else
              v75 = 0;
            v76 = (std::string *)(v74 + 2 * v72);
            LOWORD(v76->__r_.__value_.__l.__data_) = v69;
            v70 = (uint64_t)v76->__r_.__value_.__r.__words + 2;
            while (v64 != v23)
            {
              v77 = HIWORD(v64[-1].__r_.__value_.__r.__words[2]);
              v64 = (std::string *)((char *)v64 - 2);
              HIWORD(v76[-1].__r_.__value_.__r.__words[2]) = v77;
              v76 = (std::string *)((char *)v76 - 2);
            }
            v67 = (std::string *)(v74 + 2 * v75);
            if (v23)
              operator delete(v23);
            v23 = v76;
            goto LABEL_182;
          }
          LOWORD(v64->__r_.__value_.__l.__data_) = v68;
          v64 = (std::string *)((char *)v64 + 2);
        }
        v70 = (uint64_t)v64;
LABEL_182:
        std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
        ++v65;
        v64 = (std::string *)v70;
        if (v65 == v63)
          goto LABEL_193;
      }
    }
    if (*a3 == AMCP::Implementation::get_type_marker<std::vector<unsigned short>>())
    {
      AMCP::Implementation::create_vector_of_numbers_from<applesauce::CF::ArrayRef,std::vector<unsigned short>>((uint64_t)&cf, v7);
      goto LABEL_197;
    }
    if (*a3 == AMCP::Implementation::get_type_marker<std::vector<int>>())
    {
      AMCP::Implementation::create_vector_of_numbers_from<applesauce::CF::ArrayRef,std::vector<int>>((uint64_t)&cf, v7);
      goto LABEL_197;
    }
    if (*a3 == AMCP::Implementation::get_type_marker<std::vector<unsigned int>>())
    {
      AMCP::Implementation::create_vector_of_numbers_from<applesauce::CF::ArrayRef,std::vector<unsigned int>>((uint64_t)&cf, v7);
      goto LABEL_197;
    }
    if (*a3 == AMCP::Implementation::get_type_marker<std::vector<long>>())
    {
      AMCP::Implementation::create_vector_of_numbers_from<applesauce::CF::ArrayRef,std::vector<long>>((uint64_t)&cf, v7);
      goto LABEL_197;
    }
    if (*a3 == AMCP::Implementation::get_type_marker<std::vector<unsigned long>>())
    {
      AMCP::Implementation::create_vector_of_numbers_from<applesauce::CF::ArrayRef,std::vector<unsigned long>>((uint64_t)&cf, v7);
      goto LABEL_197;
    }
    if (*a3 == AMCP::Implementation::get_type_marker<std::vector<long long>>())
    {
      AMCP::Implementation::create_vector_of_numbers_from<applesauce::CF::ArrayRef,std::vector<long long>>((uint64_t)&cf, v7);
      goto LABEL_197;
    }
    if (*a3 == AMCP::Implementation::get_type_marker<std::vector<unsigned long long>>())
    {
      AMCP::Implementation::create_vector_of_numbers_from<applesauce::CF::ArrayRef,std::vector<unsigned long long>>((uint64_t)&cf, v7);
      goto LABEL_197;
    }
    if (*a3 == AMCP::Implementation::get_type_marker<std::vector<float>>())
    {
      AMCP::Implementation::create_vector_of_numbers_from<applesauce::CF::ArrayRef,std::vector<float>>((uint64_t)&cf, v7);
      goto LABEL_197;
    }
    if (*a3 == AMCP::Implementation::get_type_marker<std::vector<double>>())
    {
      AMCP::Implementation::create_vector_of_numbers_from<applesauce::CF::ArrayRef,std::vector<double>>((uint64_t)&cf, v7);
      goto LABEL_197;
    }
    if (*a3 == AMCP::Implementation::get_type_marker<std::vector<long double>>())
    {
      AMCP::Implementation::create_vector_of_numbers_from<applesauce::CF::ArrayRef,std::vector<long double>>((uint64_t)&cf, v7);
      goto LABEL_197;
    }
    if (*a3 == AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
    {
      AMCP::Implementation::create_vector_of_numbers_from<applesauce::CF::ArrayRef,applesauce::CF::ArrayRef>((uint64_t)&cf, (CFTypeRef *)v7);
      goto LABEL_197;
    }
LABEL_326:
    memset(&cf, 0, sizeof(cf));
    goto LABEL_197;
  }
  if (!v7)
    goto LABEL_314;
  if (!*v7)
    goto LABEL_361;
  v8 = CFArrayGetCount(*v7);
  memset(&v154, 0, sizeof(v154));
  std::vector<BOOL>::reserve((uint64_t)&v154, v8);
  if (v8)
  {
    for (i = 0; i != v8; ++i)
    {
      if (!*v7)
      {
        v122 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v122, "Could not construct");
        __cxa_throw(v122, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::details::at_as<applesauce::CF::NumberRef>(&cf, *v7, i);
      if (LOBYTE(cf.__begin_))
      {
        if (!cf.__first_)
        {
          v123 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v123, "Could not construct");
          __cxa_throw(v123, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v10 = applesauce::CF::convert_to<BOOL,0>((const __CFNumber *)cf.__first_);
        end = v154.__end_;
        if (v154.__end_ == (std::vector<std::string>::pointer)((uint64_t)v154.__end_cap_.__value_ << 6))
        {
          if ((uint64_t)v154.__end_->__r_.__value_.__r.__words + 1 < 0)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          v12 = (uint64_t)v154.__end_cap_.__value_ << 7;
          if ((uint64_t)v154.__end_cap_.__value_ << 7 <= ((unint64_t)v154.__end_ & 0xFFFFFFFFFFFFFFC0) + 64)
            v12 = ((unint64_t)v154.__end_ & 0xFFFFFFFFFFFFFFC0) + 64;
          if (v154.__end_ <= (std::vector<std::string>::pointer)0x3FFFFFFFFFFFFFFELL)
            v13 = v12;
          else
            v13 = 0x7FFFFFFFFFFFFFFFLL;
          std::vector<BOOL>::reserve((uint64_t)&v154, v13);
          end = v154.__end_;
        }
        v154.__end_ = (std::vector<std::string>::pointer)((char *)&end->__r_.__value_.__l.__data_ + 1);
        v14 = (unint64_t)end >> 6;
        v15 = 1 << (char)end;
        if (v10)
          v16 = v154.__begin_->__r_.__value_.__r.__words[v14] | v15;
        else
          v16 = v154.__begin_->__r_.__value_.__r.__words[v14] & ~v15;
        v154.__begin_->__r_.__value_.__r.__words[v14] = v16;
      }
      std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
    }
  }
  memset(&cf, 0, sizeof(cf));
  std::vector<BOOL>::vector(&cf, (uint64_t)&v154);
  cf.__end_cap_.__value_ = (std::allocator<std::string> *)AMCP::Implementation::In_Place_Storage<std::vector<BOOL>>::dispatch;
  begin = v154.__begin_;
  if (v154.__begin_)
LABEL_196:
    operator delete(begin);
LABEL_197:
  AMCP::swap((AMCP::Thing *)&cf, (AMCP::Thing *)a1, v6);
  if (cf.__end_cap_.__value_)
    ((void (*)(_QWORD, std::__split_buffer<std::string> *, _QWORD, _QWORD))cf.__end_cap_.__value_)(0, &cf, 0, 0);
  v78 = a2;
  if (*(_QWORD *)(a1 + 32))
    return;
  if (*a3 != AMCP::Implementation::get_type_marker<std::vector<std::string>>()
    && *a3 != AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
  {
    memset(&cf, 0, sizeof(cf));
    goto LABEL_239;
  }
  if (*(_QWORD *)(a2 + 32))
  {
    cf.__first_ = (std::__split_buffer<std::string>::pointer)AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>();
    v80 = (CFTypeRef *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, std::__split_buffer<std::string> *))(a2 + 32))(4, a2, 0, &cf);
  }
  else
  {
    v80 = 0;
  }
  if (*a3 != AMCP::Implementation::get_type_marker<std::vector<std::string>>())
  {
    if (*a3 != AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
    {
      memset(&cf, 0, sizeof(cf));
      v78 = a2;
      goto LABEL_239;
    }
    v78 = a2;
    if (v80)
    {
      memset(&cf, 0, sizeof(cf));
      AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::construct<applesauce::CF::ArrayRef const&>((uint64_t)&cf, v80);
      goto LABEL_239;
    }
LABEL_320:
    __assert_rtn("create_vector_of_strings_from", "Thing.h", 1300, "in_value_ptr != nullptr");
  }
  v78 = a2;
  if (!v80)
    goto LABEL_320;
  if (!*v80)
  {
    v139 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v139, "Could not construct");
    __cxa_throw(v139, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v81 = CFArrayGetCount((CFArrayRef)*v80);
  v82 = v81;
  memset(&v154, 0, sizeof(v154));
  if (v81)
  {
    if (v81 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    cf.__end_cap_.__value_ = (std::allocator<std::string> *)&v154.__end_cap_;
    cf.__first_ = (std::__split_buffer<std::string>::pointer)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v81);
    cf.__begin_ = cf.__first_;
    cf.__end_ = cf.__first_;
    cf.__end_cap_.__value_ = &cf.__first_[v83];
    std::vector<std::string>::__swap_out_circular_buffer(&v154, &cf);
    std::__split_buffer<std::string>::~__split_buffer(&cf);
    v84 = 0;
    while (1)
    {
      v85 = (const __CFArray *)*v80;
      if (!*v80)
      {
        v126 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v126, "Could not construct");
        __cxa_throw(v126, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      if (CFArrayGetCount((CFArrayRef)*v80) > v84)
      {
        ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v85, v84);
        v87 = ValueAtIndex;
        if (ValueAtIndex)
        {
          CFRetain(ValueAtIndex);
          v88 = CFGetTypeID(v87);
          if (v88 == CFStringGetTypeID())
          {
            v152 = v87;
            v153 = 1;
            applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v87);
            v89 = v154.__end_;
            if (v154.__end_ >= v154.__end_cap_.__value_)
            {
              v91 = a1;
              v92 = 0xAAAAAAAAAAAAAAABLL * (((char *)v154.__end_ - (char *)v154.__begin_) >> 3);
              v93 = v92 + 1;
              if (v92 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * (((char *)v154.__end_cap_.__value_ - (char *)v154.__begin_) >> 3) > v93)
                v93 = 0x5555555555555556 * (((char *)v154.__end_cap_.__value_ - (char *)v154.__begin_) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * (((char *)v154.__end_cap_.__value_ - (char *)v154.__begin_) >> 3) >= 0x555555555555555)
                v94 = 0xAAAAAAAAAAAAAAALL;
              else
                v94 = v93;
              cf.__end_cap_.__value_ = (std::allocator<std::string> *)&v154.__end_cap_;
              if (v94)
                v94 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v94);
              else
                v95 = 0;
              v96 = (std::string *)(v94 + 24 * v92);
              cf.__first_ = (std::__split_buffer<std::string>::pointer)v94;
              cf.__begin_ = v96;
              cf.__end_cap_.__value_ = (std::string *)(v94 + 24 * v95);
              v97 = *(_OWORD *)__p;
              v96->__r_.__value_.__r.__words[2] = v146;
              *(_OWORD *)&v96->__r_.__value_.__l.__data_ = v97;
              __p[1] = 0;
              v146 = 0;
              __p[0] = 0;
              cf.__end_ = v96 + 1;
              std::vector<std::string>::__swap_out_circular_buffer(&v154, &cf);
              v98 = v154.__end_;
              std::__split_buffer<std::string>::~__split_buffer(&cf);
              v154.__end_ = v98;
              a1 = v91;
              v78 = a2;
              if (SHIBYTE(v146) < 0)
                operator delete(__p[0]);
            }
            else
            {
              v90 = *(_OWORD *)__p;
              v154.__end_->__r_.__value_.__r.__words[2] = v146;
              *(_OWORD *)&v89->__r_.__value_.__l.__data_ = v90;
              v154.__end_ = v89 + 1;
            }
            goto LABEL_219;
          }
          CFRelease(v87);
        }
      }
      LOBYTE(v152) = 0;
      v153 = 0;
LABEL_219:
      std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v152);
      if (v82 == ++v84)
      {
        v99 = (__int128 *)v154.__begin_;
        v100 = (__int128 *)v154.__end_;
        goto LABEL_238;
      }
    }
  }
  v100 = 0;
  v99 = 0;
LABEL_238:
  memset(&cf, 0, sizeof(cf));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&cf, v99, v100, 0xAAAAAAAAAAAAAAABLL * (((char *)v100 - (char *)v99) >> 3));
  cf.__end_cap_.__value_ = (std::allocator<std::string> *)AMCP::Implementation::In_Place_Storage<std::vector<std::string>>::dispatch;
  __p[0] = &v154;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_239:
  AMCP::swap((AMCP::Thing *)&cf, (AMCP::Thing *)a1, v79);
  if (cf.__end_cap_.__value_)
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t *))cf.__end_cap_.__value_)(0, (uint64_t)&cf, 0, 0);
  if (!*(_QWORD *)(a1 + 32))
  {
    if (*a3 == AMCP::Implementation::get_type_marker<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>()
      || *a3 == AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
    {
      if (*(_QWORD *)(v78 + 32))
      {
        cf.__first_ = (std::__split_buffer<std::string>::pointer)AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>();
        v102 = (CFArrayRef *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, std::__split_buffer<std::string> *))(v78 + 32))(4, v78, 0, &cf);
      }
      else
      {
        v102 = 0;
      }
      if (*a3 == AMCP::Implementation::get_type_marker<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>())
      {
        v78 = a2;
        if (v102)
        {
          if (!*v102)
          {
            v140 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v140, "Could not construct");
            __cxa_throw(v140, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          v103 = CFArrayGetCount(*v102);
          v104 = v103;
          memset(&v154, 0, sizeof(v154));
          if (v103)
          {
            if (v103 >> 60)
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            cf.__end_cap_.__value_ = (std::allocator<std::string> *)&v154.__end_cap_;
            v105 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v103);
            value = (std::string *)((char *)v105 + 16 * v106);
            cf.__end_ = v105;
            cf.__end_cap_.__value_ = value;
            v109 = v154.__begin_;
            v108 = v154.__end_;
            if (v154.__end_ == v154.__begin_)
            {
              v112 = vdupq_n_s64((unint64_t)v154.__end_);
              v110 = v105;
            }
            else
            {
              v110 = v105;
              do
              {
                v111 = v108[-1].__r_.__value_.__r.__words[1];
                v108 = (std::vector<std::string>::pointer)((char *)v108 - 16);
                LODWORD(v110[-1].__r_.__value_.__r.__words[1]) = v111;
                v110 = (std::string *)((char *)v110 - 16);
                HIDWORD(v110->__r_.__value_.__r.__words[0]) = HIDWORD(v108->__r_.__value_.__r.__words[0]);
                v110->__r_.__value_.__l.__size_ = v108->__r_.__value_.__l.__size_;
                v108->__r_.__value_.__l.__size_ = 0;
              }
              while (v108 != v109);
              v112 = *(int64x2_t *)&v154.__begin_;
              value = cf.__end_cap_.__value_;
              v105 = cf.__end_;
            }
            v154.__begin_ = v110;
            v154.__end_ = v105;
            *(int64x2_t *)&cf.__begin_ = v112;
            v113 = v154.__end_cap_.__value_;
            v154.__end_cap_.__value_ = value;
            cf.__end_cap_.__value_ = v113;
            cf.__first_ = (std::__split_buffer<std::string>::pointer)v112.i64[0];
            std::__split_buffer<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::~__split_buffer((uint64_t)&cf);
            v114 = 0;
            do
            {
              if (!*v102)
              {
                v130 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v130, "Could not construct");
                __cxa_throw(v130, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              applesauce::CF::details::at_as<applesauce::CF::DictionaryRef>(&cf, *v102, v114);
              if (LOBYTE(cf.__begin_))
              {
                if (!cf.__first_)
                {
                  v134 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v134, "Could not construct");
                  __cxa_throw(v134, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                }
                applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v152, "item id");
                applesauce::CF::details::find_at_key_or_optional<applesauce::CF::NumberRef,applesauce::CF::StringRef>(__p, (CFDictionaryRef)cf.__first_, v152);
                if (v152)
                  CFRelease(v152);
                if (!cf.__first_)
                {
                  v132 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v132, "Could not construct");
                  __cxa_throw(v132, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                }
                applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v150, "kind");
                applesauce::CF::details::find_at_key_or_optional<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v152, (CFDictionaryRef)cf.__first_, v150);
                if (v150)
                  CFRelease(v150);
                if (!cf.__first_)
                {
                  v133 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v133, "Could not construct");
                  __cxa_throw(v133, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                }
                applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v149, "name");
                applesauce::CF::details::find_at_key_or_optional<applesauce::CF::StringRef,applesauce::CF::StringRef>(&v150, (CFDictionaryRef)cf.__first_, v149);
                if (v149)
                  CFRelease(v149);
                if (LOBYTE(__p[1]))
                {
                  if (!__p[0])
                  {
                    v137 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::runtime_error::runtime_error(v137, "Could not construct");
                    __cxa_throw(v137, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                  }
                  v115 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)__p[0]);
                }
                else
                {
                  v115 = 0;
                }
                v148 = v115;
                if (v153)
                {
                  if (!v152)
                  {
                    v136 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::runtime_error::runtime_error(v136, "Could not construct");
                    __cxa_throw(v136, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                  }
                  v116 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v152);
                }
                else
                {
                  v116 = 0;
                }
                v147 = v116;
                if (v151)
                {
                  v117 = v150;
                  if (v150)
                    CFRetain(v150);
                  v149 = v117;
                }
                else
                {
                  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v149, "");
                }
                std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::emplace_back<unsigned int &,unsigned int &,applesauce::CF::StringRef&>((uint64_t *)&v154, &v148, &v147, &v149);
                if (v149)
                  CFRelease(v149);
                std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v150);
                std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v152);
                std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)__p);
              }
              std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
              ++v114;
            }
            while (v104 != v114);
          }
          memset(&cf, 0, sizeof(cf));
          std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__init_with_size[abi:ne180100]<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>*,std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>*>(&cf, (uint64_t)v154.__begin_, (uint64_t)v154.__end_, ((char *)v154.__end_ - (char *)v154.__begin_) >> 4);
          cf.__end_cap_.__value_ = (std::allocator<std::string> *)AMCP::Implementation::In_Place_Storage<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>::dispatch;
          __p[0] = &v154;
          std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          goto LABEL_292;
        }
LABEL_323:
        __assert_rtn("create_vector_of_selector_items_from", "Thing.h", 1426, "in_value_ptr != nullptr");
      }
      if (*a3 == AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
      {
        v78 = a2;
        if (!v102)
          goto LABEL_323;
        memset(&cf, 0, sizeof(cf));
        AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::construct<applesauce::CF::ArrayRef const&>((uint64_t)&cf, (CFTypeRef *)v102);
      }
      else
      {
        memset(&cf, 0, sizeof(cf));
        v78 = a2;
      }
    }
    else
    {
      memset(&cf, 0, sizeof(cf));
    }
LABEL_292:
    AMCP::swap((AMCP::Thing *)&cf, (AMCP::Thing *)a1, v101);
    if (cf.__end_cap_.__value_)
      ((void (*)(int, uint64_t *, uint64_t, uint64_t *))cf.__end_cap_.__value_)(0, (uint64_t *)&cf, 0, 0);
    if (!*(_QWORD *)(a1 + 32))
    {
      AMCP::Implementation::create_vector_of_asbds_from<applesauce::CF::ArrayRef>((uint64_t)&cf, v78, a3);
      AMCP::swap((AMCP::Thing *)&cf, (AMCP::Thing *)a1, v118);
      if (cf.__end_cap_.__value_)
        ((void (*)(int, uint64_t *, uint64_t, uint64_t *))cf.__end_cap_.__value_)(0, (uint64_t *)&cf, 0, 0);
      if (!*(_QWORD *)(a1 + 32))
      {
        AMCP::Implementation::create_vector_of_asrds_from<applesauce::CF::ArrayRef>((uint64_t)&cf, v78, a3);
        AMCP::swap((AMCP::Thing *)&cf, (AMCP::Thing *)a1, v119);
        if (cf.__end_cap_.__value_)
          ((void (*)(int, uint64_t *, uint64_t, uint64_t *))cf.__end_cap_.__value_)(0, (uint64_t *)&cf, 0, 0);
        if (!*(_QWORD *)(a1 + 32))
        {
          AMCP::Implementation::create_vector_of_available_formats_from<applesauce::CF::ArrayRef>((uint64_t)&cf, v78, a3);
          AMCP::swap((AMCP::Thing *)&cf, (AMCP::Thing *)a1, v120);
          AMCP::Thing::~Thing((AMCP::Thing *)&cf);
          if (!*(_QWORD *)(a1 + 32))
          {
            AMCP::Implementation::create_value_range_list_from<applesauce::CF::ArrayRef>((uint64_t)&cf, v78, a3);
            AMCP::swap((AMCP::Thing *)&cf, (AMCP::Thing *)a1, v121);
            AMCP::Thing::~Thing((AMCP::Thing *)&cf);
          }
        }
      }
    }
  }
}

void sub_1B5814220(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, char a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  void *v31;

  __cxa_free_exception(v31);
  __clang_call_terminate(a1);
}

void AMCP::Implementation::create_vector_of_asbds_from<applesauce::CF::ArrayRef>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unint64_t Count;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  const __CFArray *v9;
  const __CFDictionary *v10;
  double v11;
  double v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  CFTypeRef v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  __int128 v31;
  __int128 v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  void *v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  const __CFArray *v41;
  const __CFDictionary *v42;
  double v43;
  double v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  void *v53;
  char *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  __int128 v62;
  __int128 v63;
  char *v64;
  std::runtime_error *exception;
  std::runtime_error *v66;
  std::runtime_error *v67;
  std::runtime_error *v68;
  std::runtime_error *v69;
  std::runtime_error *v70;
  std::runtime_error *v71;
  std::runtime_error *v72;
  std::runtime_error *v73;
  std::runtime_error *v74;
  std::runtime_error *v75;
  std::runtime_error *v76;
  std::runtime_error *v77;
  std::runtime_error *v78;
  std::runtime_error *v79;
  std::runtime_error *v80;
  std::runtime_error *v81;
  std::runtime_error *v82;
  std::runtime_error *v83;
  std::runtime_error *v84;
  std::runtime_error *v85;
  std::runtime_error *v86;
  std::runtime_error *v87;
  std::runtime_error *v88;
  std::runtime_error *v89;
  std::runtime_error *v90;
  std::runtime_error *v91;
  std::runtime_error *v92;
  std::runtime_error *v93;
  std::runtime_error *v94;
  std::runtime_error *v95;
  std::runtime_error *v96;
  std::runtime_error *v97;
  std::runtime_error *v98;
  std::runtime_error *v99;
  std::runtime_error *v100;
  std::runtime_error *v101;
  unint64_t v103;
  CFArrayRef *v104;
  char *v105;
  char *v106;
  char *__p;
  void *__pa;
  unint64_t v109;
  char *v110;
  CFTypeRef v111;
  CFTypeRef v112;
  CFTypeRef v113;
  CFTypeRef v114;
  CFTypeRef v115;
  CFTypeRef v116;
  CFNumberRef valuePtr;
  CFTypeRef v118;
  CFTypeRef v119;
  CFTypeRef cf;
  const __CFDictionary *v121;
  _DWORD v122[3];

  if (*a3 != AMCP::Implementation::get_type_marker<std::vector<AudioStreamBasicDescription>>()
    && *a3 != AMCP::Implementation::get_type_marker<std::vector<CA::StreamDescription>>()
    && *a3 != AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
  {
    goto LABEL_202;
  }
  if (*(_QWORD *)(a2 + 32))
  {
    v121 = (const __CFDictionary *)AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>();
    v104 = (CFArrayRef *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, const __CFDictionary **))(a2 + 32))(4, a2, 0, &v121);
  }
  else
  {
    v104 = 0;
  }
  if (*a3 == AMCP::Implementation::get_type_marker<std::vector<AudioStreamBasicDescription>>())
  {
    if (v104)
    {
      if (*v104)
      {
        Count = CFArrayGetCount(*v104);
        v6 = Count;
        if (Count)
        {
          if (Count > 0x666666666666666)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          __p = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(Count);
          v109 = 0;
          v105 = &__p[40 * v7];
          v8 = (unint64_t)__p;
          v103 = v6;
          while (1)
          {
            v9 = *v104;
            if (!*v104)
            {
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(exception, "Could not construct");
              __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            cf = 0;
            applesauce::CF::at_or<applesauce::CF::DictionaryRef>(&v121, v9, v109, &cf);
            if (cf)
              CFRelease(cf);
            v10 = v121;
            if (!v121)
            {
              v66 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v66, "Could not construct");
              __cxa_throw(v66, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v119, "sample rate");
            LODWORD(valuePtr) = 0;
            v118 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
            if (!v118)
            {
              v67 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v67, "Could not construct");
              __cxa_throw(v67, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&cf, v10, v119, &v118);
            if (v118)
              CFRelease(v118);
            if (v119)
              CFRelease(v119);
            applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v118, "format id");
            LODWORD(v116) = 0;
            valuePtr = CFNumberCreate(0, kCFNumberIntType, &v116);
            if (!valuePtr)
            {
              v68 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v68, "Could not construct");
              __cxa_throw(v68, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v119, v10, v118, &valuePtr);
            if (valuePtr)
              CFRelease(valuePtr);
            if (v118)
              CFRelease(v118);
            applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&valuePtr, "format flags");
            LODWORD(v115) = 0;
            v116 = CFNumberCreate(0, kCFNumberIntType, &v115);
            if (!v116)
            {
              v69 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v69, "Could not construct");
              __cxa_throw(v69, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v118, v10, valuePtr, &v116);
            if (v116)
              CFRelease(v116);
            if (valuePtr)
              CFRelease(valuePtr);
            applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v116, "bytes per packet");
            LODWORD(v114) = 0;
            v115 = CFNumberCreate(0, kCFNumberIntType, &v114);
            if (!v115)
            {
              v70 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v70, "Could not construct");
              __cxa_throw(v70, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&valuePtr, v10, v116, &v115);
            if (v115)
              CFRelease(v115);
            if (v116)
              CFRelease(v116);
            applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v115, "frames per packet");
            LODWORD(v113) = 0;
            v114 = CFNumberCreate(0, kCFNumberIntType, &v113);
            if (!v114)
            {
              v71 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v71, "Could not construct");
              __cxa_throw(v71, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v116, v10, v115, &v114);
            if (v114)
              CFRelease(v114);
            if (v115)
              CFRelease(v115);
            applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v114, "bytes per frame");
            LODWORD(v112) = 0;
            v113 = CFNumberCreate(0, kCFNumberIntType, &v112);
            if (!v113)
            {
              v72 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v72, "Could not construct");
              __cxa_throw(v72, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v115, v10, v114, &v113);
            if (v113)
              CFRelease(v113);
            if (v114)
              CFRelease(v114);
            applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v113, "channels per frame");
            LODWORD(v111) = 0;
            v112 = CFNumberCreate(0, kCFNumberIntType, &v111);
            if (!v112)
            {
              v73 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v73, "Could not construct");
              __cxa_throw(v73, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v114, v10, v113, &v112);
            if (v112)
              CFRelease(v112);
            if (v113)
              CFRelease(v113);
            applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v112, "bits per channel");
            v122[0] = 0;
            v111 = CFNumberCreate(0, kCFNumberIntType, v122);
            if (!v111)
            {
              v74 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v74, "Could not construct");
              __cxa_throw(v74, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v113, v10, v112, &v111);
            if (v111)
              CFRelease(v111);
            if (v112)
              CFRelease(v112);
            if (!cf)
            {
              v75 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v75, "Could not construct");
              __cxa_throw(v75, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            v11 = applesauce::CF::convert_to<double,0>((const __CFNumber *)cf);
            if (!v119)
            {
              v76 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v76, "Could not construct");
              __cxa_throw(v76, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            v12 = v11;
            v13 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v119);
            if (!v118)
            {
              v77 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v77, "Could not construct");
              __cxa_throw(v77, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            v14 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v118);
            if (!valuePtr)
            {
              v78 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v78, "Could not construct");
              __cxa_throw(v78, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            v15 = applesauce::CF::convert_to<unsigned int,0>(valuePtr);
            if (!v116)
            {
              v79 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v79, "Could not construct");
              __cxa_throw(v79, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            v16 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v116);
            if (!v115)
            {
              v80 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v80, "Could not construct");
              __cxa_throw(v80, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            v17 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v115);
            if (!v114)
            {
              v81 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v81, "Could not construct");
              __cxa_throw(v81, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            v18 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v114);
            v19 = v113;
            if (!v113)
            {
              v82 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v82, "Could not construct");
              __cxa_throw(v82, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            v20 = v18;
            v21 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v113);
            v22 = v21;
            if (v8 < (unint64_t)v105)
            {
              *(double *)v8 = v12;
              *(_DWORD *)(v8 + 8) = v13;
              *(_DWORD *)(v8 + 12) = v14;
              *(_DWORD *)(v8 + 16) = v15;
              *(_DWORD *)(v8 + 20) = v16;
              *(_DWORD *)(v8 + 24) = v17;
              *(_DWORD *)(v8 + 28) = v20;
              *(_QWORD *)(v8 + 32) = v21;
              v8 += 40;
              v23 = __p;
LABEL_82:
              CFRelease(v19);
              goto LABEL_83;
            }
            v24 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v8 - (_QWORD)__p) >> 3) + 1;
            if (v24 > 0x666666666666666)
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            if (0x999999999999999ALL * ((v105 - __p) >> 3) > v24)
              v24 = 0x999999999999999ALL * ((v105 - __p) >> 3);
            if (0xCCCCCCCCCCCCCCCDLL * ((v105 - __p) >> 3) >= 0x333333333333333)
              v25 = 0x666666666666666;
            else
              v25 = v24;
            if (v25)
            {
              v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v25);
            }
            else
            {
              v27 = 0;
              v26 = 0;
            }
            v28 = &v27[8 * ((uint64_t)(v8 - (_QWORD)__p) >> 3)];
            *(double *)v28 = v12;
            *((_DWORD *)v28 + 2) = v13;
            *((_DWORD *)v28 + 3) = v14;
            *((_DWORD *)v28 + 4) = v15;
            *((_DWORD *)v28 + 5) = v16;
            *((_DWORD *)v28 + 6) = v17;
            *((_DWORD *)v28 + 7) = v20;
            *((_DWORD *)v28 + 8) = v22;
            *((_DWORD *)v28 + 9) = 0;
            if ((char *)v8 == __p)
            {
              v23 = &v27[8 * ((uint64_t)(v8 - (_QWORD)__p) >> 3)];
              v30 = __p;
              if (__p)
                goto LABEL_80;
            }
            else
            {
              v29 = &v27[8 * ((uint64_t)(v8 - (_QWORD)__p) >> 3)];
              v30 = __p;
              do
              {
                v31 = *(_OWORD *)(v8 - 40);
                v32 = *(_OWORD *)(v8 - 24);
                v23 = v29 - 40;
                *((_QWORD *)v29 - 1) = *(_QWORD *)(v8 - 8);
                *(_OWORD *)(v29 - 24) = v32;
                *(_OWORD *)(v29 - 40) = v31;
                v8 -= 40;
                v29 -= 40;
              }
              while ((char *)v8 != __p);
              if (__p)
              {
LABEL_80:
                v33 = v27;
                v34 = v26;
                operator delete(v30);
                v26 = v34;
                v27 = v33;
                v19 = v113;
              }
            }
            v105 = &v27[40 * v26];
            v8 = (unint64_t)(v28 + 40);
            v6 = v103;
            if (v19)
              goto LABEL_82;
LABEL_83:
            if (v114)
              CFRelease(v114);
            if (v115)
              CFRelease(v115);
            if (v116)
              CFRelease(v116);
            if (valuePtr)
              CFRelease(valuePtr);
            if (v118)
              CFRelease(v118);
            if (v119)
              CFRelease(v119);
            if (cf)
              CFRelease(cf);
            if (v121)
              CFRelease(v121);
            __p = v23;
            if (++v109 == v6)
              goto LABEL_204;
          }
        }
        v23 = 0;
        v8 = 0;
LABEL_204:
        *(_QWORD *)(a1 + 32) = 0;
        *(_OWORD *)a1 = 0u;
        *(_OWORD *)(a1 + 16) = 0u;
        std::vector<AudioStreamBasicDescription>::__init_with_size[abi:ne180100]<AudioStreamBasicDescription*,AudioStreamBasicDescription*>((_QWORD *)a1, v23, v8, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v8 - (_QWORD)v23) >> 3));
        *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<AudioStreamBasicDescription>>::dispatch;
        if (v23)
        {
          v64 = v23;
LABEL_209:
          operator delete(v64);
          return;
        }
        return;
      }
LABEL_252:
      v101 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v101, "Could not construct");
      __cxa_throw(v101, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
LABEL_211:
    __assert_rtn("create_vector_of_asbds_from", "Thing.h", 1807, "in_value_ptr != nullptr");
  }
  if (*a3 != AMCP::Implementation::get_type_marker<std::vector<CA::StreamDescription>>())
  {
    if (*a3 == AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
    {
      if (v104)
      {
        *(_QWORD *)(a1 + 32) = 0;
        *(_OWORD *)a1 = 0u;
        *(_OWORD *)(a1 + 16) = 0u;
        AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::construct<applesauce::CF::ArrayRef const&>(a1, (CFTypeRef *)v104);
        return;
      }
      goto LABEL_211;
    }
LABEL_202:
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    return;
  }
  if (!v104)
    goto LABEL_211;
  if (!*v104)
    goto LABEL_252;
  v35 = CFArrayGetCount(*v104);
  v36 = (void *)v35;
  if (v35)
  {
    if (v35 > 0x666666666666666)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v35);
    v38 = 0;
    __pa = v36;
    v110 = &v37[40 * v39];
    v40 = v37;
    do
    {
      v41 = *v104;
      if (!*v104)
      {
        v83 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v83, "Could not construct");
        __cxa_throw(v83, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      cf = 0;
      applesauce::CF::at_or<applesauce::CF::DictionaryRef>(&v121, v41, v38, &cf);
      if (cf)
        CFRelease(cf);
      v42 = v121;
      if (!v121)
      {
        v84 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v84, "Could not construct");
        __cxa_throw(v84, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v119, "sample rate");
      LODWORD(valuePtr) = 0;
      v118 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
      if (!v118)
      {
        v85 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v85, "Could not construct");
        __cxa_throw(v85, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&cf, v42, v119, &v118);
      if (v118)
        CFRelease(v118);
      if (v119)
        CFRelease(v119);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v118, "format id");
      LODWORD(v116) = 0;
      valuePtr = CFNumberCreate(0, kCFNumberIntType, &v116);
      if (!valuePtr)
      {
        v86 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v86, "Could not construct");
        __cxa_throw(v86, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v119, v42, v118, &valuePtr);
      if (valuePtr)
        CFRelease(valuePtr);
      if (v118)
        CFRelease(v118);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&valuePtr, "format flags");
      LODWORD(v115) = 0;
      v116 = CFNumberCreate(0, kCFNumberIntType, &v115);
      if (!v116)
      {
        v87 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v87, "Could not construct");
        __cxa_throw(v87, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v118, v42, valuePtr, &v116);
      if (v116)
        CFRelease(v116);
      if (valuePtr)
        CFRelease(valuePtr);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v116, "bytes per packet");
      LODWORD(v114) = 0;
      v115 = CFNumberCreate(0, kCFNumberIntType, &v114);
      if (!v115)
      {
        v88 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v88, "Could not construct");
        __cxa_throw(v88, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&valuePtr, v42, v116, &v115);
      if (v115)
        CFRelease(v115);
      if (v116)
        CFRelease(v116);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v115, "frames per packet");
      LODWORD(v113) = 0;
      v114 = CFNumberCreate(0, kCFNumberIntType, &v113);
      if (!v114)
      {
        v89 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v89, "Could not construct");
        __cxa_throw(v89, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v116, v42, v115, &v114);
      if (v114)
        CFRelease(v114);
      if (v115)
        CFRelease(v115);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v114, "bytes per frame");
      LODWORD(v112) = 0;
      v113 = CFNumberCreate(0, kCFNumberIntType, &v112);
      if (!v113)
      {
        v90 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v90, "Could not construct");
        __cxa_throw(v90, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v115, v42, v114, &v113);
      if (v113)
        CFRelease(v113);
      if (v114)
        CFRelease(v114);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v113, "channels per frame");
      LODWORD(v111) = 0;
      v112 = CFNumberCreate(0, kCFNumberIntType, &v111);
      if (!v112)
      {
        v91 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v91, "Could not construct");
        __cxa_throw(v91, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v114, v42, v113, &v112);
      if (v112)
        CFRelease(v112);
      if (v113)
        CFRelease(v113);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v112, "bits per channel");
      v122[0] = 0;
      v111 = CFNumberCreate(0, kCFNumberIntType, v122);
      if (!v111)
      {
        v92 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v92, "Could not construct");
        __cxa_throw(v92, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v113, v42, v112, &v111);
      if (v111)
        CFRelease(v111);
      if (v112)
        CFRelease(v112);
      if (!cf)
      {
        v93 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v93, "Could not construct");
        __cxa_throw(v93, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v43 = applesauce::CF::convert_to<double,0>((const __CFNumber *)cf);
      if (!v119)
      {
        v94 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v94, "Could not construct");
        __cxa_throw(v94, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v44 = v43;
      v45 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v119);
      if (!v118)
      {
        v95 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v95, "Could not construct");
        __cxa_throw(v95, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v46 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v118);
      if (!valuePtr)
      {
        v96 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v96, "Could not construct");
        __cxa_throw(v96, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v47 = applesauce::CF::convert_to<unsigned int,0>(valuePtr);
      if (!v116)
      {
        v97 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v97, "Could not construct");
        __cxa_throw(v97, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v48 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v116);
      if (!v115)
      {
        v98 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v98, "Could not construct");
        __cxa_throw(v98, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v49 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v115);
      if (!v114)
      {
        v99 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v99, "Could not construct");
        __cxa_throw(v99, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v50 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v114);
      if (!v113)
      {
        v100 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v100, "Could not construct");
        __cxa_throw(v100, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v51 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v113);
      v52 = v51;
      if (v37 >= v110)
      {
        v54 = v40;
        v55 = 0xCCCCCCCCCCCCCCCDLL * ((v37 - v40) >> 3);
        v56 = v55 + 1;
        v106 = v54;
        if (v55 + 1 > 0x666666666666666)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v57 = 0xCCCCCCCCCCCCCCCDLL * ((v110 - v54) >> 3);
        if (2 * v57 > v56)
          v56 = 2 * v57;
        if (v57 >= 0x333333333333333)
          v58 = 0x666666666666666;
        else
          v58 = v56;
        if (v58)
          v58 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v58);
        else
          v59 = 0;
        v60 = v58 + 40 * v55;
        *(double *)v60 = v44;
        *(_DWORD *)(v60 + 8) = v45;
        *(_DWORD *)(v60 + 12) = v46;
        *(_DWORD *)(v60 + 16) = v47;
        *(_DWORD *)(v60 + 20) = v48;
        *(_DWORD *)(v60 + 24) = v49;
        *(_DWORD *)(v60 + 28) = v50;
        *(_DWORD *)(v60 + 32) = v52;
        *(_DWORD *)(v60 + 36) = 0;
        if (v37 == v106)
        {
          v40 = (char *)(v58 + 40 * v55);
          v53 = __pa;
        }
        else
        {
          v61 = v58 + 40 * v55;
          v53 = __pa;
          do
          {
            v62 = *(_OWORD *)(v37 - 40);
            v63 = *(_OWORD *)(v37 - 24);
            v40 = (char *)(v61 - 40);
            *(_QWORD *)(v61 - 8) = *((_QWORD *)v37 - 1);
            *(_OWORD *)(v61 - 24) = v63;
            *(_OWORD *)(v61 - 40) = v62;
            v37 -= 40;
            v61 -= 40;
          }
          while (v37 != v106);
        }
        v110 = (char *)(v58 + 40 * v59);
        v37 = (char *)(v60 + 40);
        if (v106)
          operator delete(v106);
      }
      else
      {
        *(double *)v37 = v44;
        *((_DWORD *)v37 + 2) = v45;
        *((_DWORD *)v37 + 3) = v46;
        *((_DWORD *)v37 + 4) = v47;
        *((_DWORD *)v37 + 5) = v48;
        *((_DWORD *)v37 + 6) = v49;
        *((_DWORD *)v37 + 7) = v50;
        *((_QWORD *)v37 + 4) = v51;
        v37 += 40;
        v53 = __pa;
      }
      if (v113)
        CFRelease(v113);
      if (v114)
        CFRelease(v114);
      if (v115)
        CFRelease(v115);
      if (v116)
        CFRelease(v116);
      if (valuePtr)
        CFRelease(valuePtr);
      if (v118)
        CFRelease(v118);
      if (v119)
        CFRelease(v119);
      if (cf)
        CFRelease(cf);
      if (v121)
        CFRelease(v121);
      ++v38;
    }
    while ((void *)v38 != v53);
  }
  else
  {
    v40 = 0;
    v37 = 0;
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<CA::StreamDescription>::__init_with_size[abi:ne180100]<CA::StreamDescription*,CA::StreamDescription*>((_QWORD *)a1, v40, (uint64_t)v37, 0xCCCCCCCCCCCCCCCDLL * ((v37 - v40) >> 3));
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<CA::StreamDescription>>::dispatch;
  if (v40)
  {
    v64 = v40;
    goto LABEL_209;
  }
}

void sub_1B58159A4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25,int a26,__int16 a27,char a28,char a29,int a30,__int16 a31,char a32,char a33,int a34,__int16 a35,char a36,char a37,int a38,__int16 a39,char a40,char a41,int a42,__int16 a43,char a44,char a45,int a46,__int16 a47,char a48,char a49)
{
  void *v49;

  __cxa_free_exception(v49);
  __clang_call_terminate(a1);
}

void AMCP::Implementation::create_vector_of_asrds_from<applesauce::CF::ArrayRef>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  CFArrayRef *v6;
  unint64_t Count;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  const __CFArray *v12;
  const __CFDictionary *v13;
  void *v14;
  double v15;
  double v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  double v24;
  CFTypeRef v25;
  double v26;
  double v27;
  double v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  __int128 *v45;
  const __CFArray *v46;
  const __CFDictionary *v47;
  double v48;
  double v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  double v57;
  CFTypeRef v58;
  double v59;
  double v60;
  double v61;
  __int128 *v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  __int128 *v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  char *v73;
  uint64_t v74;
  __int128 *v75;
  std::runtime_error *v76;
  std::runtime_error *v77;
  std::runtime_error *exception;
  std::runtime_error *v79;
  std::runtime_error *v80;
  std::runtime_error *v81;
  std::runtime_error *v82;
  std::runtime_error *v83;
  std::runtime_error *v84;
  std::runtime_error *v85;
  std::runtime_error *v86;
  std::runtime_error *v87;
  std::runtime_error *v88;
  std::runtime_error *v89;
  std::runtime_error *v90;
  std::runtime_error *v91;
  std::runtime_error *v92;
  std::runtime_error *v93;
  std::runtime_error *v94;
  std::runtime_error *v95;
  std::runtime_error *v96;
  std::runtime_error *v97;
  std::runtime_error *v98;
  std::runtime_error *v99;
  std::runtime_error *v100;
  std::runtime_error *v101;
  std::runtime_error *v102;
  std::runtime_error *v103;
  std::runtime_error *v104;
  std::runtime_error *v105;
  std::runtime_error *v106;
  std::runtime_error *v107;
  std::runtime_error *v108;
  std::runtime_error *v109;
  std::runtime_error *v110;
  std::runtime_error *v111;
  std::runtime_error *v112;
  std::runtime_error *v113;
  std::runtime_error *v114;
  std::runtime_error *v115;
  std::runtime_error *v116;
  std::runtime_error *v117;
  std::runtime_error *v118;
  std::runtime_error *v119;
  std::runtime_error *v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  char *v124;
  const __CFArray **v125;
  const __CFArray **v126;
  char *v127;
  char *v128;
  void *v129;
  __int128 *v130;
  char *__p;
  char *__pa;
  CFTypeRef v133;
  CFTypeRef v134;
  CFTypeRef v135;
  CFTypeRef v136;
  CFTypeRef v137;
  CFTypeRef v138;
  CFTypeRef v139;
  CFTypeRef v140;
  CFNumberRef valuePtr;
  CFTypeRef v142;
  CFTypeRef v143;
  CFTypeRef cf;
  const __CFDictionary *v145;
  _DWORD v146[3];

  if (*a3 != AMCP::Implementation::get_type_marker<std::vector<AudioStreamRangedDescription>>()
    && *a3 != AMCP::Implementation::get_type_marker<std::vector<CA::RangedStreamDescription>>()
    && *a3 != AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
  {
    goto LABEL_234;
  }
  if (*(_QWORD *)(a2 + 32))
  {
    v145 = (const __CFDictionary *)AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>();
    v6 = (CFArrayRef *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, const __CFDictionary **))(a2 + 32))(4, a2, 0, &v145);
  }
  else
  {
    v6 = 0;
  }
  if (*a3 == AMCP::Implementation::get_type_marker<std::vector<AudioStreamRangedDescription>>())
  {
    if (v6)
    {
      if (*v6)
      {
        v121 = a1;
        Count = CFArrayGetCount(*v6);
        if (Count)
        {
          if (Count > 0x492492492492492)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          v123 = Count;
          v125 = v6;
          v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>>(Count);
          v9 = 0;
          v127 = &v8[56 * v10];
          __p = v8;
          v11 = (unint64_t)v8;
          while (1)
          {
            v12 = *v125;
            if (!*v125)
            {
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(exception, "Could not construct");
              __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            cf = 0;
            v129 = (void *)v9;
            applesauce::CF::at_or<applesauce::CF::DictionaryRef>(&v145, v12, v9, &cf);
            if (cf)
              CFRelease(cf);
            v13 = v145;
            if (!v145)
            {
              v76 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v76, "Could not construct");
              __cxa_throw(v76, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v143, "sample rate");
            LODWORD(valuePtr) = 0;
            v142 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
            if (!v142)
            {
              v77 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v77, "Could not construct");
              __cxa_throw(v77, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&cf, v13, v143, &v142);
            if (v142)
              CFRelease(v142);
            if (v143)
              CFRelease(v143);
            applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v142, "format id");
            LODWORD(v140) = 0;
            valuePtr = CFNumberCreate(0, kCFNumberIntType, &v140);
            if (!valuePtr)
            {
              v79 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v79, "Could not construct");
              __cxa_throw(v79, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v143, v13, v142, &valuePtr);
            if (valuePtr)
              CFRelease(valuePtr);
            if (v142)
              CFRelease(v142);
            applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&valuePtr, "format flags");
            LODWORD(v139) = 0;
            v140 = CFNumberCreate(0, kCFNumberIntType, &v139);
            if (!v140)
            {
              v80 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v80, "Could not construct");
              __cxa_throw(v80, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v142, v13, valuePtr, &v140);
            if (v140)
              CFRelease(v140);
            if (valuePtr)
              CFRelease(valuePtr);
            applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v140, "bytes per packet");
            LODWORD(v138) = 0;
            v139 = CFNumberCreate(0, kCFNumberIntType, &v138);
            if (!v139)
            {
              v81 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v81, "Could not construct");
              __cxa_throw(v81, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&valuePtr, v13, v140, &v139);
            if (v139)
              CFRelease(v139);
            if (v140)
              CFRelease(v140);
            applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v139, "frames per packet");
            LODWORD(v137) = 0;
            v138 = CFNumberCreate(0, kCFNumberIntType, &v137);
            if (!v138)
            {
              v82 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v82, "Could not construct");
              __cxa_throw(v82, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v140, v13, v139, &v138);
            if (v138)
              CFRelease(v138);
            if (v139)
              CFRelease(v139);
            applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v138, "bytes per frame");
            LODWORD(v136) = 0;
            v137 = CFNumberCreate(0, kCFNumberIntType, &v136);
            if (!v137)
            {
              v83 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v83, "Could not construct");
              __cxa_throw(v83, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v139, v13, v138, &v137);
            if (v137)
              CFRelease(v137);
            if (v138)
              CFRelease(v138);
            applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v137, "channels per frame");
            LODWORD(v135) = 0;
            v136 = CFNumberCreate(0, kCFNumberIntType, &v135);
            if (!v136)
            {
              v84 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v84, "Could not construct");
              __cxa_throw(v84, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v138, v13, v137, &v136);
            if (v136)
              CFRelease(v136);
            if (v137)
              CFRelease(v137);
            applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v136, "bits per channel");
            LODWORD(v134) = 0;
            v135 = CFNumberCreate(0, kCFNumberIntType, &v134);
            if (!v135)
            {
              v85 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v85, "Could not construct");
              __cxa_throw(v85, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v137, v13, v136, &v135);
            if (v135)
              CFRelease(v135);
            if (v136)
              CFRelease(v136);
            applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v135, "minimum");
            LODWORD(v133) = 0;
            v134 = CFNumberCreate(0, kCFNumberIntType, &v133);
            if (!v134)
            {
              v86 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v86, "Could not construct");
              __cxa_throw(v86, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v136, v13, v135, &v134);
            if (v134)
              CFRelease(v134);
            if (v135)
              CFRelease(v135);
            applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v134, "maximum");
            v146[0] = 0;
            v133 = CFNumberCreate(0, kCFNumberIntType, v146);
            if (!v133)
            {
              v87 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v87, "Could not construct");
              __cxa_throw(v87, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v135, v13, v134, &v133);
            if (v133)
              CFRelease(v133);
            v14 = v129;
            if (v134)
              CFRelease(v134);
            if (!cf)
            {
              v88 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v88, "Could not construct");
              __cxa_throw(v88, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            v15 = applesauce::CF::convert_to<double,0>((const __CFNumber *)cf);
            if (!v143)
            {
              v89 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v89, "Could not construct");
              __cxa_throw(v89, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            v16 = v15;
            v17 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v143);
            if (!v142)
            {
              v90 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v90, "Could not construct");
              __cxa_throw(v90, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            v18 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v142);
            if (!valuePtr)
            {
              v91 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v91, "Could not construct");
              __cxa_throw(v91, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            v19 = applesauce::CF::convert_to<unsigned int,0>(valuePtr);
            if (!v140)
            {
              v92 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v92, "Could not construct");
              __cxa_throw(v92, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            v20 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v140);
            if (!v139)
            {
              v93 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v93, "Could not construct");
              __cxa_throw(v93, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            v21 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v139);
            if (!v138)
            {
              v94 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v94, "Could not construct");
              __cxa_throw(v94, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            v22 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v138);
            if (!v137)
            {
              v95 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v95, "Could not construct");
              __cxa_throw(v95, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            v23 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v137);
            if (!v136)
            {
              v96 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v96, "Could not construct");
              __cxa_throw(v96, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            v24 = applesauce::CF::convert_to<double,0>((const __CFNumber *)v136);
            v25 = v135;
            if (!v135)
            {
              v97 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v97, "Could not construct");
              __cxa_throw(v97, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            v26 = v24;
            v27 = applesauce::CF::convert_to<double,0>((const __CFNumber *)v135);
            v28 = v27;
            if (v11 < (unint64_t)v127)
            {
              *(double *)v11 = v16;
              *(_DWORD *)(v11 + 8) = v17;
              *(_DWORD *)(v11 + 12) = v18;
              *(_DWORD *)(v11 + 16) = v19;
              *(_DWORD *)(v11 + 20) = v20;
              *(_DWORD *)(v11 + 24) = v21;
              *(_DWORD *)(v11 + 28) = v22;
              *(_DWORD *)(v11 + 32) = v23;
              *(_DWORD *)(v11 + 36) = 0;
              *(double *)(v11 + 40) = v26;
              *(double *)(v11 + 48) = v27;
              v11 += 56;
              v29 = __p;
LABEL_94:
              CFRelease(v25);
              goto LABEL_95;
            }
            v30 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v11 - (_QWORD)__p) >> 3) + 1;
            if (v30 > 0x492492492492492)
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            if (0xDB6DB6DB6DB6DB6ELL * ((v127 - __p) >> 3) > v30)
              v30 = 0xDB6DB6DB6DB6DB6ELL * ((v127 - __p) >> 3);
            if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v127 - __p) >> 3)) >= 0x249249249249249)
              v31 = 0x492492492492492;
            else
              v31 = v30;
            if (v31)
            {
              v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>>(v31);
            }
            else
            {
              v33 = 0;
              v32 = 0;
            }
            v34 = &v33[8 * ((uint64_t)(v11 - (_QWORD)__p) >> 3)];
            *(double *)v34 = v16;
            *((_DWORD *)v34 + 2) = v17;
            *((_DWORD *)v34 + 3) = v18;
            *((_DWORD *)v34 + 4) = v19;
            *((_DWORD *)v34 + 5) = v20;
            *((_DWORD *)v34 + 6) = v21;
            *((_DWORD *)v34 + 7) = v22;
            *((_DWORD *)v34 + 8) = v23;
            *((_DWORD *)v34 + 9) = 0;
            *((double *)v34 + 5) = v26;
            *((double *)v34 + 6) = v28;
            if ((char *)v11 == __p)
            {
              v29 = &v33[8 * ((uint64_t)(v11 - (_QWORD)__p) >> 3)];
              v36 = __p;
              if (__p)
                goto LABEL_92;
            }
            else
            {
              v35 = &v33[8 * ((uint64_t)(v11 - (_QWORD)__p) >> 3)];
              v36 = __p;
              do
              {
                v37 = *(_OWORD *)(v11 - 56);
                v38 = *(_OWORD *)(v11 - 40);
                v39 = *(_OWORD *)(v11 - 24);
                v29 = v35 - 56;
                *((_QWORD *)v35 - 1) = *(_QWORD *)(v11 - 8);
                *(_OWORD *)(v35 - 24) = v39;
                *(_OWORD *)(v35 - 40) = v38;
                *(_OWORD *)(v35 - 56) = v37;
                v11 -= 56;
                v35 -= 56;
              }
              while ((char *)v11 != __p);
              if (__p)
              {
LABEL_92:
                v40 = v33;
                v41 = v32;
                operator delete(v36);
                v32 = v41;
                v33 = v40;
                v25 = v135;
              }
            }
            v127 = &v33[56 * v32];
            v11 = (unint64_t)(v34 + 56);
            v14 = v129;
            if (v25)
              goto LABEL_94;
LABEL_95:
            if (v136)
              CFRelease(v136);
            if (v137)
              CFRelease(v137);
            if (v138)
              CFRelease(v138);
            if (v139)
              CFRelease(v139);
            if (v140)
              CFRelease(v140);
            if (valuePtr)
              CFRelease(valuePtr);
            if (v142)
              CFRelease(v142);
            if (v143)
              CFRelease(v143);
            if (cf)
              CFRelease(cf);
            if (v145)
              CFRelease(v145);
            v9 = (unint64_t)v14 + 1;
            __p = v29;
            if (v9 == v123)
              goto LABEL_236;
          }
        }
        v29 = 0;
        v11 = 0;
LABEL_236:
        *(_QWORD *)(v121 + 32) = 0;
        *(_OWORD *)v121 = 0u;
        *(_OWORD *)(v121 + 16) = 0u;
        std::vector<AudioStreamRangedDescription>::__init_with_size[abi:ne180100]<AudioStreamRangedDescription*,AudioStreamRangedDescription*>((_QWORD *)v121, v29, v11, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v11 - (_QWORD)v29) >> 3));
        *(_QWORD *)(v121 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<AudioStreamRangedDescription>>::dispatch;
        if (v29)
        {
          v75 = (__int128 *)v29;
LABEL_241:
          operator delete(v75);
          return;
        }
        return;
      }
LABEL_292:
      v120 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v120, "Could not construct");
      __cxa_throw(v120, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
LABEL_243:
    __assert_rtn("create_vector_of_asrds_from", "Thing.h", 2005, "in_value_ptr != nullptr");
  }
  if (*a3 != AMCP::Implementation::get_type_marker<std::vector<CA::RangedStreamDescription>>())
  {
    if (*a3 == AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
    {
      if (v6)
      {
        *(_QWORD *)(a1 + 32) = 0;
        *(_OWORD *)a1 = 0u;
        *(_OWORD *)(a1 + 16) = 0u;
        AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::construct<applesauce::CF::ArrayRef const&>(a1, (CFTypeRef *)v6);
        return;
      }
      goto LABEL_243;
    }
LABEL_234:
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    return;
  }
  if (!v6)
    goto LABEL_243;
  if (!*v6)
    goto LABEL_292;
  v122 = a1;
  v42 = CFArrayGetCount(*v6);
  v43 = (char *)v42;
  if (v42)
  {
    if (v42 > 0x492492492492492)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v126 = v6;
    v130 = (__int128 *)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>>(v42);
    __pa = 0;
    v128 = (char *)v130 + 56 * v44;
    v45 = v130;
    v124 = v43;
    while (1)
    {
      v46 = *v126;
      if (!*v126)
      {
        v100 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v100, "Could not construct");
        __cxa_throw(v100, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      cf = 0;
      applesauce::CF::at_or<applesauce::CF::DictionaryRef>(&v145, v46, (unint64_t)__pa, &cf);
      if (cf)
        CFRelease(cf);
      v47 = v145;
      if (!v145)
      {
        v98 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v98, "Could not construct");
        __cxa_throw(v98, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v143, "sample rate");
      LODWORD(valuePtr) = 0;
      v142 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
      if (!v142)
      {
        v99 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v99, "Could not construct");
        __cxa_throw(v99, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&cf, v47, v143, &v142);
      if (v142)
        CFRelease(v142);
      if (v143)
        CFRelease(v143);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v142, "format id");
      LODWORD(v140) = 0;
      valuePtr = CFNumberCreate(0, kCFNumberIntType, &v140);
      if (!valuePtr)
      {
        v101 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v101, "Could not construct");
        __cxa_throw(v101, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v143, v47, v142, &valuePtr);
      if (valuePtr)
        CFRelease(valuePtr);
      if (v142)
        CFRelease(v142);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&valuePtr, "format flags");
      LODWORD(v139) = 0;
      v140 = CFNumberCreate(0, kCFNumberIntType, &v139);
      if (!v140)
      {
        v102 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v102, "Could not construct");
        __cxa_throw(v102, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v142, v47, valuePtr, &v140);
      if (v140)
        CFRelease(v140);
      if (valuePtr)
        CFRelease(valuePtr);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v140, "bytes per packet");
      LODWORD(v138) = 0;
      v139 = CFNumberCreate(0, kCFNumberIntType, &v138);
      if (!v139)
      {
        v103 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v103, "Could not construct");
        __cxa_throw(v103, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&valuePtr, v47, v140, &v139);
      if (v139)
        CFRelease(v139);
      if (v140)
        CFRelease(v140);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v139, "frames per packet");
      LODWORD(v137) = 0;
      v138 = CFNumberCreate(0, kCFNumberIntType, &v137);
      if (!v138)
      {
        v104 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v104, "Could not construct");
        __cxa_throw(v104, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v140, v47, v139, &v138);
      if (v138)
        CFRelease(v138);
      if (v139)
        CFRelease(v139);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v138, "bytes per frame");
      LODWORD(v136) = 0;
      v137 = CFNumberCreate(0, kCFNumberIntType, &v136);
      if (!v137)
      {
        v105 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v105, "Could not construct");
        __cxa_throw(v105, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v139, v47, v138, &v137);
      if (v137)
        CFRelease(v137);
      if (v138)
        CFRelease(v138);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v137, "channels per frame");
      LODWORD(v135) = 0;
      v136 = CFNumberCreate(0, kCFNumberIntType, &v135);
      if (!v136)
      {
        v106 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v106, "Could not construct");
        __cxa_throw(v106, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v138, v47, v137, &v136);
      if (v136)
        CFRelease(v136);
      if (v137)
        CFRelease(v137);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v136, "bits per channel");
      LODWORD(v134) = 0;
      v135 = CFNumberCreate(0, kCFNumberIntType, &v134);
      if (!v135)
      {
        v107 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v107, "Could not construct");
        __cxa_throw(v107, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v137, v47, v136, &v135);
      if (v135)
        CFRelease(v135);
      if (v136)
        CFRelease(v136);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v135, "minimum");
      LODWORD(v133) = 0;
      v134 = CFNumberCreate(0, kCFNumberIntType, &v133);
      if (!v134)
      {
        v108 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v108, "Could not construct");
        __cxa_throw(v108, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v136, v47, v135, &v134);
      if (v134)
        CFRelease(v134);
      if (v135)
        CFRelease(v135);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v134, "maximum");
      v146[0] = 0;
      v133 = CFNumberCreate(0, kCFNumberIntType, v146);
      if (!v133)
      {
        v109 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v109, "Could not construct");
        __cxa_throw(v109, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v135, v47, v134, &v133);
      if (v133)
        CFRelease(v133);
      if (v134)
        CFRelease(v134);
      if (!cf)
      {
        v110 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v110, "Could not construct");
        __cxa_throw(v110, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v48 = applesauce::CF::convert_to<double,0>((const __CFNumber *)cf);
      if (!v143)
      {
        v111 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v111, "Could not construct");
        __cxa_throw(v111, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v49 = v48;
      v50 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v143);
      if (!v142)
      {
        v112 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v112, "Could not construct");
        __cxa_throw(v112, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v51 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v142);
      if (!valuePtr)
      {
        v113 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v113, "Could not construct");
        __cxa_throw(v113, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v52 = applesauce::CF::convert_to<unsigned int,0>(valuePtr);
      if (!v140)
      {
        v114 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v114, "Could not construct");
        __cxa_throw(v114, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v53 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v140);
      if (!v139)
      {
        v115 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v115, "Could not construct");
        __cxa_throw(v115, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v54 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v139);
      if (!v138)
      {
        v116 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v116, "Could not construct");
        __cxa_throw(v116, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v55 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v138);
      if (!v137)
      {
        v117 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v117, "Could not construct");
        __cxa_throw(v117, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v56 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v137);
      if (!v136)
      {
        v118 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v118, "Could not construct");
        __cxa_throw(v118, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v57 = applesauce::CF::convert_to<double,0>((const __CFNumber *)v136);
      v58 = v135;
      if (!v135)
      {
        v119 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v119, "Could not construct");
        __cxa_throw(v119, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v59 = v57;
      v60 = applesauce::CF::convert_to<double,0>((const __CFNumber *)v135);
      v61 = v60;
      if (v45 < (__int128 *)v128)
      {
        *(double *)v45 = v49;
        *((_DWORD *)v45 + 2) = v50;
        *((_DWORD *)v45 + 3) = v51;
        *((_DWORD *)v45 + 4) = v52;
        *((_DWORD *)v45 + 5) = v53;
        *((_DWORD *)v45 + 6) = v54;
        *((_DWORD *)v45 + 7) = v55;
        *((_DWORD *)v45 + 8) = v56;
        *((_DWORD *)v45 + 9) = 0;
        *((double *)v45 + 5) = v59;
        *((double *)v45 + 6) = v60;
        v45 = (__int128 *)((char *)v45 + 56);
        v62 = v130;
LABEL_206:
        CFRelease(v58);
        goto LABEL_207;
      }
      v63 = 0x6DB6DB6DB6DB6DB7 * (((char *)v45 - (char *)v130) >> 3) + 1;
      if (v63 > 0x492492492492492)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      if (0xDB6DB6DB6DB6DB6ELL * ((v128 - (char *)v130) >> 3) > v63)
        v63 = 0xDB6DB6DB6DB6DB6ELL * ((v128 - (char *)v130) >> 3);
      if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v128 - (char *)v130) >> 3)) >= 0x249249249249249)
        v64 = 0x492492492492492;
      else
        v64 = v63;
      if (v64)
      {
        v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>>(v64);
      }
      else
      {
        v66 = 0;
        v65 = 0;
      }
      v67 = &v66[8 * (((char *)v45 - (char *)v130) >> 3)];
      *(double *)v67 = v49;
      *((_DWORD *)v67 + 2) = v50;
      *((_DWORD *)v67 + 3) = v51;
      *((_DWORD *)v67 + 4) = v52;
      *((_DWORD *)v67 + 5) = v53;
      *((_DWORD *)v67 + 6) = v54;
      *((_DWORD *)v67 + 7) = v55;
      *((_DWORD *)v67 + 8) = v56;
      *((_DWORD *)v67 + 9) = 0;
      *((double *)v67 + 5) = v59;
      *((double *)v67 + 6) = v61;
      if (v45 == v130)
      {
        v62 = (__int128 *)&v66[8 * (((char *)v45 - (char *)v130) >> 3)];
        v69 = v130;
        if (v130)
          goto LABEL_204;
      }
      else
      {
        v68 = &v66[8 * (((char *)v45 - (char *)v130) >> 3)];
        v69 = v130;
        do
        {
          v62 = (__int128 *)(v68 - 56);
          v70 = *(__int128 *)((char *)v45 - 56);
          v71 = *(__int128 *)((char *)v45 - 40);
          v72 = *(__int128 *)((char *)v45 - 24);
          *((_QWORD *)v68 - 1) = *((_QWORD *)v45 - 1);
          *(_OWORD *)(v68 - 24) = v72;
          *(_OWORD *)(v68 - 40) = v71;
          *(_OWORD *)(v68 - 56) = v70;
          v45 = (__int128 *)((char *)v45 - 56);
          v68 -= 56;
        }
        while (v45 != v130);
        if (v130)
        {
LABEL_204:
          v73 = v66;
          v74 = v65;
          operator delete(v69);
          v65 = v74;
          v66 = v73;
          v58 = v135;
        }
      }
      v128 = &v66[56 * v65];
      v45 = (__int128 *)(v67 + 56);
      v43 = v124;
      if (v58)
        goto LABEL_206;
LABEL_207:
      if (v136)
        CFRelease(v136);
      if (v137)
        CFRelease(v137);
      if (v138)
        CFRelease(v138);
      if (v139)
        CFRelease(v139);
      if (v140)
        CFRelease(v140);
      if (valuePtr)
        CFRelease(valuePtr);
      if (v142)
        CFRelease(v142);
      if (v143)
        CFRelease(v143);
      if (cf)
        CFRelease(cf);
      if (v145)
        CFRelease(v145);
      v130 = v62;
      if (++__pa == v43)
        goto LABEL_239;
    }
  }
  v62 = 0;
  v45 = 0;
LABEL_239:
  *(_QWORD *)(v122 + 32) = 0;
  *(_OWORD *)v122 = 0u;
  *(_OWORD *)(v122 + 16) = 0u;
  std::vector<CA::RangedStreamDescription>::__init_with_size[abi:ne180100]<CA::RangedStreamDescription*,CA::RangedStreamDescription*>((char *)v122, v62, v45, 0x6DB6DB6DB6DB6DB7 * (((char *)v45 - (char *)v62) >> 3));
  *(_QWORD *)(v122 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<CA::RangedStreamDescription>>::dispatch;
  if (v62)
  {
    v75 = v62;
    goto LABEL_241;
  }
}

void sub_1B5817828(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, char a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25,int a26,__int16 a27,char a28,char a29,int a30,__int16 a31,char a32,char a33,int a34,__int16 a35,char a36,char a37,int a38,__int16 a39,char a40,char a41,int a42,__int16 a43,char a44,char a45,int a46,__int16 a47,char a48,char a49,int a50,__int16 a51,char a52,char a53,int a54,__int16 a55,char a56,char a57)
{
  void *v57;

  __cxa_free_exception(v57);
  __clang_call_terminate(a1);
}

double AMCP::Implementation::create_vector_of_available_formats_from<applesauce::CF::ArrayRef>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  CFArrayRef *v6;
  double result;
  uint64_t v8;

  if (*a3 != AMCP::Implementation::get_type_marker<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>()
    && *a3 != AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
  {
    goto LABEL_11;
  }
  if (*(_QWORD *)(a2 + 32))
  {
    v8 = AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>();
    v6 = (CFArrayRef *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a2 + 32))(4, a2, 0, &v8);
  }
  else
  {
    v6 = 0;
  }
  if (*a3 == AMCP::Implementation::get_type_marker<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>())
  {
    AMCP::Implementation::create_vector_of_available_formats_from<applesauce::CF::ArrayRef,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(a1, v6);
    return result;
  }
  if (*a3 == AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
  {
    if (!v6)
      __assert_rtn("create_vector_of_available_formats_from", "Thing.h", 2208, "in_value_ptr != nullptr");
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::construct<applesauce::CF::ArrayRef const&>(a1, (CFTypeRef *)v6);
  }
  else
  {
LABEL_11:
    *(_QWORD *)(a1 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

void AMCP::Implementation::create_value_range_list_from<applesauce::CF::ArrayRef>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  CFTypeRef *v6;
  const __CFArray *v7;
  CFIndex Count;
  CFIndex v9;
  const __CFArray *v10;
  CFIndex v11;
  unint64_t v12;
  const __CFNumber *v13;
  double v14;
  const __CFNumber *v15;
  double v16;
  uint64_t v17;
  std::runtime_error *exception;
  std::runtime_error *v19;
  std::runtime_error *v20;
  std::runtime_error *v21;
  std::runtime_error *v22;
  std::runtime_error *v23;
  const __CFNumber *v24[2];
  CFTypeRef cf;
  CFTypeRef v26;
  CFTypeRef v27;
  const __CFArray *v28;
  uint64_t v29;
  uint64_t v30;
  int valuePtr;

  if (*a3 != AMCP::Implementation::get_type_marker<CA::ValueRangeList>()
    && *a3 != AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
  {
    goto LABEL_35;
  }
  if (*(_QWORD *)(a2 + 32))
  {
    v28 = (const __CFArray *)AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>();
    v6 = (CFTypeRef *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, const __CFArray **))(a2 + 32))(4, a2, 0, &v28);
  }
  else
  {
    v6 = 0;
  }
  if (*a3 != AMCP::Implementation::get_type_marker<CA::ValueRangeList>())
  {
    if (*a3 == AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
    {
      if (v6)
      {
        *(_QWORD *)(a1 + 32) = 0;
        *(_OWORD *)a1 = 0u;
        *(_OWORD *)(a1 + 16) = 0u;
        AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::construct<applesauce::CF::ArrayRef const&>(a1, v6);
        return;
      }
LABEL_42:
      __assert_rtn("create_value_range_list_from", "Thing.h", 2316, "in_value_ptr != nullptr");
    }
LABEL_35:
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    return;
  }
  if (!v6)
    goto LABEL_42;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v7 = (const __CFArray *)*v6;
  if (*v6)
  {
    Count = CFArrayGetCount((CFArrayRef)*v6);
    v9 = Count;
    v10 = (const __CFArray *)*v6;
    if (v10)
    {
      v11 = CFArrayGetCount(v10);
      if (v9)
        goto LABEL_11;
    }
    else
    {
      v11 = 0;
      if (Count)
      {
LABEL_11:
        v12 = 0;
        do
        {
          if (v7 == v10 && v11 == v12)
            break;
          applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&v27, v7, v12);
          if (!v27)
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Could not construct");
            __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v26, "minimum");
          valuePtr = 0;
          cf = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
          if (!cf)
          {
            v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v21, "Could not construct");
            __cxa_throw(v21, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(v24, (const __CFDictionary *)v27, v26, &cf);
          v13 = v24[0];
          if (!v24[0])
          {
            v19 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v19, "Could not construct");
            __cxa_throw(v19, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          v14 = applesauce::CF::convert_to<double,0>(v24[0]);
          CFRelease(v13);
          if (cf)
            CFRelease(cf);
          if (v26)
            CFRelease(v26);
          if (!v27)
          {
            v22 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v22, "Could not construct");
            __cxa_throw(v22, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v26, "maximum");
          valuePtr = 0;
          cf = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
          if (!cf)
          {
            v20 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v20, "Could not construct");
            __cxa_throw(v20, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(v24, (const __CFDictionary *)v27, v26, &cf);
          v15 = v24[0];
          if (!v24[0])
          {
            v23 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v23, "Could not construct");
            __cxa_throw(v23, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          v16 = applesauce::CF::convert_to<double,0>(v24[0]);
          CFRelease(v15);
          if (cf)
            CFRelease(cf);
          if (v26)
            CFRelease(v26);
          v24[0] = *(const __CFNumber **)&v14;
          v24[1] = *(const __CFNumber **)&v16;
          CA::ValueRangeList::AddRange((double **)&v28, (double *)v24);
          if (v27)
            CFRelease(v27);
          ++v12;
        }
        while (v9 != v12);
        v7 = v28;
        v17 = v29;
        goto LABEL_39;
      }
    }
    v17 = 0;
    v7 = 0;
  }
  else
  {
    v17 = 0;
  }
LABEL_39:
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<CA::ValueRange>::__init_with_size[abi:ne180100]<CA::ValueRange*,CA::ValueRange*>((_QWORD *)a1, v7, v17, (v17 - (uint64_t)v7) >> 4);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<CA::ValueRangeList>::dispatch;
  if (v7)
    operator delete(v7);
}

void sub_1B5818478(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16, int a17, __int16 a18, char a19, char a20,void *__p)
{
  if (__p)
    operator delete(__p);
  __clang_call_terminate(a1);
}

uint64_t AMCP::Implementation::get_type_marker<CA::ValueRangeList>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return v1[145];
}

BOOL AMCP::Implementation::In_Place_Storage<CA::ValueRangeList>::dispatch(_BOOL8 result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  void *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, _QWORD, CFTypeRef *);
  void (*v12)(uint64_t, uint64_t, _QWORD, _QWORD *);
  uint64_t v13;
  AMCP::Thing *v14;
  uint64_t v15;
  void *v16;
  double *v17;
  void *v18;
  double *v19;
  double *v20;
  double v21;
  double v22;
  double v23;
  double v24;
  _BOOL4 v25;
  int v27;
  __CFArray *Mutable;
  CFTypeRef *v29;
  CFTypeRef *v30;
  const CFDictionaryKeyCallBacks *v31;
  const CFDictionaryValueCallBacks *v32;
  CFMutableDictionaryRef v33;
  CFNumberRef v34;
  CFNumberRef v35;
  double **v36;
  double *v37;
  double *v38;
  double *v39;
  std::runtime_error *exception;
  std::runtime_error *v41;
  CFTypeRef v42[2];
  __int128 v43;
  uint64_t (*v44)();
  _QWORD v45[3];
  CFTypeRef cf[2];

  switch(result)
  {
    case 0:
      v7 = *(void **)a2;
      if (*(_QWORD *)a2)
      {
        *(_QWORD *)(a2 + 8) = v7;
        operator delete(v7);
      }
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      v8 = 0uLL;
      goto LABEL_9;
    case 1:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      std::vector<CA::ValueRange>::__init_with_size[abi:ne180100]<CA::ValueRange*,CA::ValueRange*>((_QWORD *)a3, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
      result = 0;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<CA::ValueRangeList>::dispatch;
      return result;
    case 2:
      result = 0;
      v8 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<CA::ValueRangeList>::dispatch;
      *(_QWORD *)(a2 + 32) = 0;
LABEL_9:
      *(_OWORD *)a2 = v8;
      *(_OWORD *)(a2 + 16) = v8;
      return result;
    case 3:
      v9 = AMCP::Implementation::get_type_marker<CA::ValueRangeList>();
      result = 0;
      *a4 = v9;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<CA::ValueRangeList>())
        return a2;
      else
        return 0;
    case 5:
      v10 = AMCP::Implementation::get_type_marker<CA::ValueRangeList>();
      v11 = *(void (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(a2 + 32);
      v42[0] = 0;
      if (v11)
      {
        v11(3, a2, 0, v42);
        v11 = (void (*)(uint64_t, uint64_t, _QWORD, CFTypeRef *))v42[0];
      }
      if (v11 == (void (*)(uint64_t, uint64_t, _QWORD, CFTypeRef *))v10)
      {
        v12 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD *))(a3 + 32);
        v45[0] = 0;
        if (v12)
        {
          v12(3, a3, 0, v45);
          v12 = (void (*)(uint64_t, uint64_t, _QWORD, _QWORD *))v45[0];
        }
        if (v12 == (void (*)(uint64_t, uint64_t, _QWORD, _QWORD *))v10)
        {
          if (*(_QWORD *)(a2 + 32))
          {
            v42[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<CA::ValueRangeList>();
            v13 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(a2 + 32))(4, a2, 0, v42);
          }
          else
          {
            v13 = 0;
          }
          if (*(_QWORD *)(a3 + 32))
          {
            v42[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<CA::ValueRangeList>();
            v36 = (double **)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(a3 + 32))(4, a3, 0, v42);
          }
          else
          {
            v36 = 0;
          }
          v37 = *(double **)v13;
          v38 = *(double **)(v13 + 8);
          if (v37 != v38)
          {
            v39 = *v36;
            do
            {
              if (!CA::operator==(*v37, v37[1], *v39, v39[1]))
                return 0;
              v37 += 2;
              v39 += 2;
            }
            while (v37 != v38);
          }
          return 1;
        }
      }
      AMCP::Thing::convert_to<CA::ValueRangeList>(v42, a2);
      AMCP::Thing::convert_to<CA::ValueRangeList>(v45, a3);
      v16 = (void *)v42[0];
      v17 = (double *)v42[1];
      v18 = (void *)v45[0];
      if (v42[0] == v42[1])
      {
        v27 = 1;
        if (v45[0])
LABEL_32:
          operator delete(v18);
      }
      else
      {
        v19 = (double *)v45[0];
        v20 = (double *)v42[0];
        do
        {
          v21 = *v20;
          v22 = v20[1];
          v20 += 2;
          v23 = *v19;
          v24 = v19[1];
          v19 += 2;
          v25 = CA::operator==(v21, v22, v23, v24);
        }
        while (v25 && v20 != v17);
        v27 = v25;
        if (v18)
          goto LABEL_32;
      }
      if (v16)
        operator delete(v16);
      return v27 != 0;
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<CA::ValueRangeList>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
      {
        goto LABEL_58;
      }
      if (*(_QWORD *)(a2 + 32))
      {
        v42[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<CA::ValueRangeList>();
        v15 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(a2 + 32))(4, a2, 0, v42);
      }
      else
      {
        v15 = 0;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<CA::ValueRangeList>())
      {
        if (v15)
        {
          v44 = 0;
          *(_OWORD *)v42 = 0u;
          v43 = 0u;
          std::vector<CA::ValueRange>::__init_with_size[abi:ne180100]<CA::ValueRange*,CA::ValueRange*>(v42, *(const void **)v15, *(_QWORD *)(v15 + 8), (uint64_t)(*(_QWORD *)(v15 + 8) - *(_QWORD *)v15) >> 4);
          v44 = AMCP::Implementation::In_Place_Storage<CA::ValueRangeList>::dispatch;
          goto LABEL_59;
        }
LABEL_74:
        __assert_rtn("create_value_range_list_from", "Thing.h", 2316, "in_value_ptr != nullptr");
      }
      if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
      {
        if (v15)
        {
          Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B380]);
          v45[0] = Mutable;
          v29 = *(CFTypeRef **)v15;
          v30 = *(CFTypeRef **)(v15 + 8);
          if (*(CFTypeRef **)v15 != v30)
          {
            v31 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B398];
            v32 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A8];
            do
            {
              v33 = CFDictionaryCreateMutable(0, 0, v31, v32);
              cf[1] = v33;
              applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)cf, "minimum");
              v42[0] = *v29;
              v34 = CFNumberCreate(0, kCFNumberDoubleType, v42);
              if (!v34)
              {
                exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(exception, "Could not construct");
                __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v33, cf[0], v34);
              CFRelease(v34);
              if (cf[0])
                CFRelease(cf[0]);
              applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)cf, "maximum");
              v42[0] = v29[1];
              v35 = CFNumberCreate(0, kCFNumberDoubleType, v42);
              if (!v35)
              {
                v41 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v41, "Could not construct");
                __cxa_throw(v41, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v33, cf[0], v35);
              CFRelease(v35);
              if (cf[0])
                CFRelease(cf[0]);
              mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)v42, v33);
              mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::DictionaryRef>(Mutable, v42[0]);
              if (v42[0])
                CFRelease(v42[0]);
              if (v33)
                CFRelease(v33);
              v29 += 2;
            }
            while (v29 != v30);
          }
          mcp_applesauce::CF::Array_Builder::copy_array((applesauce::CF::ArrayRef *)v42, Mutable);
          v42[1] = 0;
          v43 = 0uLL;
          v44 = AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::dispatch;
          if (Mutable)
            CFRelease(Mutable);
          goto LABEL_59;
        }
        goto LABEL_74;
      }
LABEL_58:
      v44 = 0;
      *(_OWORD *)v42 = 0u;
      v43 = 0u;
LABEL_59:
      AMCP::swap((AMCP::Thing *)v42, (AMCP::Thing *)a3, v14);
      if (v44)
        ((void (*)(_QWORD, CFTypeRef *, _QWORD, _QWORD))v44)(0, v42, 0, 0);
      return 0;
    default:
      return result;
  }
}

void sub_1B5818B48(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (__p)
    operator delete(__p);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5818A04);
}

void sub_1B5818B70(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  const void *v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  va_list va1;
  va_list va2;

  va_start(va2, a6);
  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, const void *);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, const void *);
  applesauce::CF::StringRef::~StringRef((const void **)va1);
  mcp_applesauce::CF::Dictionary_Builder::~Dictionary_Builder((const void **)va2);
  mcp_applesauce::CF::Array_Builder::~Array_Builder((const void **)va);
  __clang_call_terminate(a1);
}

_QWORD *AMCP::Thing::convert_to<CA::ValueRangeList>(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  std::bad_cast *exception;
  std::bad_cast *v10;
  std::bad_cast *v11;
  std::bad_cast *v12;
  std::bad_cast *v13;
  std::bad_cast *v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[2];
  uint64_t (*v18)(uint64_t, _OWORD *, _QWORD, uint64_t *);
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, _QWORD, _QWORD);

  if (!*(_QWORD *)(a2 + 32))
    goto LABEL_12;
  v4 = AMCP::Implementation::get_type_marker<CA::ValueRangeList>();
  v5 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a2 + 32);
  v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))v4)
  {
    v19 = v4;
    v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (v6)
    {
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
      return std::vector<CA::ValueRange>::__init_with_size[abi:ne180100]<CA::ValueRange*,CA::ValueRange*>(a1, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 4);
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v16 = AMCP::Implementation::get_type_marker<CA::ValueRangeList>();
  memset(v17, 0, sizeof(v17));
  v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v15 = v4;
  v8 = v18(4, v17, 0, &v15);
  if (!v8)
  {
    v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = std::vector<CA::ValueRange>::__init_with_size[abi:ne180100]<CA::ValueRange*,CA::ValueRange*>(a1, *(const void **)v8, *(_QWORD *)(v8 + 8), (uint64_t)(*(_QWORD *)(v8 + 8) - *(_QWORD *)v8) >> 4);
  if (v18)
    return (_QWORD *)v18(0, v17, 0, 0);
  return result;
}

void sub_1B5818D88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::get_type_marker<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return v1[143];
}

void AMCP::Implementation::create_vector_of_available_formats_from<applesauce::CF::ArrayRef,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(uint64_t a1, CFArrayRef *a2)
{
  unint64_t Count;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  const __CFArray *v8;
  const __CFDictionary *v9;
  const __CFArray *v10;
  CFIndex v11;
  CFIndex v12;
  CFIndex v13;
  unint64_t i;
  void **v15;
  double v16;
  void **v17;
  double v18;
  const __CFDictionary *v19;
  double v20;
  double v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  CFTypeRef v28;
  int v29;
  int v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  std::runtime_error *v40;
  std::runtime_error *v41;
  std::runtime_error *v42;
  std::runtime_error *v43;
  std::runtime_error *v44;
  std::runtime_error *v45;
  std::runtime_error *v46;
  std::runtime_error *v47;
  std::runtime_error *v48;
  std::runtime_error *v49;
  std::runtime_error *v50;
  std::runtime_error *v51;
  std::runtime_error *v52;
  std::runtime_error *v53;
  std::runtime_error *v54;
  std::runtime_error *v55;
  std::runtime_error *v56;
  std::runtime_error *v57;
  std::runtime_error *v58;
  std::runtime_error *v59;
  std::runtime_error *v60;
  std::runtime_error *v61;
  std::runtime_error *v62;
  std::runtime_error *v63;
  std::runtime_error *v64;
  std::runtime_error *exception;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  CFTypeRef v69;
  CFTypeRef v70;
  CFTypeRef v71;
  CFTypeRef v72;
  CFTypeRef v73;
  CFTypeRef v74;
  CFNumberRef valuePtr;
  CFTypeRef v76;
  CFTypeRef v77;
  CFTypeRef cf;
  CFArrayRef theArray;
  void *__p;
  uint64_t v81;
  uint64_t v82;
  CFTypeRef v83;
  uint64_t v84;
  _QWORD *v85;
  unint64_t v86;
  int v87;
  double v88;
  void **v89;
  void **v90;
  void **v91;
  unint64_t *v92;

  if (!a2)
    __assert_rtn("create_vector_of_available_formats_from", "Thing.h", 2208, "in_value_ptr != nullptr");
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  Count = CFArrayGetCount(*a2);
  v5 = Count;
  v84 = 0;
  v85 = 0;
  v86 = 0;
  if (!Count)
  {
    v39 = 0;
    v38 = 0;
    goto LABEL_126;
  }
  if (Count >> 58)
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  v92 = &v86;
  v66 = a1;
  v88 = COERCE_DOUBLE(std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>>(Count));
  v89 = *(void ***)&v88;
  v90 = *(void ***)&v88;
  v91 = (void **)(*(_QWORD *)&v88 + (v6 << 6));
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__swap_out_circular_buffer(&v84, &v88);
  std::__split_buffer<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::~__split_buffer((uint64_t)&v88);
  v7 = 0;
  v67 = v5;
  do
  {
    v8 = *a2;
    if (!*a2)
    {
      v46 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v46, "Could not construct");
      __cxa_throw(v46, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v88 = 0.0;
    applesauce::CF::at_or<applesauce::CF::DictionaryRef>(&v83, v8, v7, &v88);
    if (v88 != 0.0)
      CFRelease(*(CFTypeRef *)&v88);
    __p = 0;
    v81 = 0;
    v82 = 0;
    v9 = (const __CFDictionary *)v83;
    if (!v83)
    {
      v47 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v47, "Could not construct");
      __cxa_throw(v47, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v88, "sample rate range list");
    cf = 0;
    applesauce::CF::at_or<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(&theArray, v9, *(const void **)&v88, &cf);
    if (cf)
      CFRelease(cf);
    v68 = v7;
    if (v88 != 0.0)
      CFRelease(*(CFTypeRef *)&v88);
    v10 = theArray;
    if (theArray)
    {
      v11 = CFArrayGetCount(theArray);
      v12 = CFArrayGetCount(v10);
      if (v11)
      {
        v13 = v12;
        for (i = 0; i != v11; ++i)
        {
          if (v13 == i)
            break;
          applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&cf, v10, i);
          if (!cf)
          {
            v40 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v40, "Could not construct");
            __cxa_throw(v40, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v77, "minimum");
          LODWORD(valuePtr) = 0;
          v76 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
          if (!v76)
          {
            v43 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v43, "Could not construct");
            __cxa_throw(v43, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v88, (const __CFDictionary *)cf, v77, &v76);
          v15 = *(void ***)&v88;
          if (v88 == 0.0)
          {
            v41 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v41, "Could not construct");
            __cxa_throw(v41, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          v16 = applesauce::CF::convert_to<double,0>(*(const __CFNumber **)&v88);
          CFRelease(v15);
          if (v76)
            CFRelease(v76);
          if (v77)
            CFRelease(v77);
          if (!cf)
          {
            v45 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v45, "Could not construct");
            __cxa_throw(v45, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v77, "maximum");
          LODWORD(valuePtr) = 0;
          v76 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
          if (!v76)
          {
            v42 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v42, "Could not construct");
            __cxa_throw(v42, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v88, (const __CFDictionary *)cf, v77, &v76);
          v17 = *(void ***)&v88;
          if (v88 == 0.0)
          {
            v44 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v44, "Could not construct");
            __cxa_throw(v44, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          v18 = applesauce::CF::convert_to<double,0>(*(const __CFNumber **)&v88);
          CFRelease(v17);
          if (v76)
            CFRelease(v76);
          if (v77)
            CFRelease(v77);
          v88 = v16;
          v89 = *(void ***)&v18;
          CA::ValueRangeList::AddRange((double **)&__p, &v88);
          if (cf)
            CFRelease(cf);
        }
      }
    }
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v88, "format");
    v77 = 0;
    applesauce::CF::at_or<applesauce::CF::DictionaryRef,applesauce::CF::StringRef>(&cf, v9, *(const void **)&v88, &v77);
    if (v77)
      CFRelease(v77);
    if (v88 != 0.0)
      CFRelease(*(CFTypeRef *)&v88);
    v19 = (const __CFDictionary *)cf;
    if (!cf)
    {
      v51 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v51, "Could not construct");
      __cxa_throw(v51, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v88, "sample rate");
    LODWORD(valuePtr) = 0;
    v76 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (!v76)
    {
      v52 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v52, "Could not construct");
      __cxa_throw(v52, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v77, v19, *(const void **)&v88, &v76);
    if (v76)
      CFRelease(v76);
    if (v88 != 0.0)
      CFRelease(*(CFTypeRef *)&v88);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v88, "format id");
    LODWORD(v74) = 0;
    valuePtr = CFNumberCreate(0, kCFNumberIntType, &v74);
    if (!valuePtr)
    {
      v48 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v48, "Could not construct");
      __cxa_throw(v48, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v76, v19, *(const void **)&v88, &valuePtr);
    if (valuePtr)
      CFRelease(valuePtr);
    if (v88 != 0.0)
      CFRelease(*(CFTypeRef *)&v88);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v88, "format flags");
    LODWORD(v73) = 0;
    v74 = CFNumberCreate(0, kCFNumberIntType, &v73);
    if (!v74)
    {
      v49 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v49, "Could not construct");
      __cxa_throw(v49, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&valuePtr, v19, *(const void **)&v88, &v74);
    if (v74)
      CFRelease(v74);
    if (v88 != 0.0)
      CFRelease(*(CFTypeRef *)&v88);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v88, "bytes per packet");
    LODWORD(v72) = 0;
    v73 = CFNumberCreate(0, kCFNumberIntType, &v72);
    if (!v73)
    {
      v50 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v50, "Could not construct");
      __cxa_throw(v50, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v74, v19, *(const void **)&v88, &v73);
    if (v73)
      CFRelease(v73);
    if (v88 != 0.0)
      CFRelease(*(CFTypeRef *)&v88);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v88, "frames per packet");
    LODWORD(v71) = 0;
    v72 = CFNumberCreate(0, kCFNumberIntType, &v71);
    if (!v72)
    {
      v57 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v57, "Could not construct");
      __cxa_throw(v57, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v73, v19, *(const void **)&v88, &v72);
    if (v72)
      CFRelease(v72);
    if (v88 != 0.0)
      CFRelease(*(CFTypeRef *)&v88);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v88, "bytes per frame");
    LODWORD(v70) = 0;
    v71 = CFNumberCreate(0, kCFNumberIntType, &v70);
    if (!v71)
    {
      v58 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v58, "Could not construct");
      __cxa_throw(v58, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v72, v19, *(const void **)&v88, &v71);
    if (v71)
      CFRelease(v71);
    if (v88 != 0.0)
      CFRelease(*(CFTypeRef *)&v88);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v88, "channels per frame");
    LODWORD(v69) = 0;
    v70 = CFNumberCreate(0, kCFNumberIntType, &v69);
    if (!v70)
    {
      v61 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v61, "Could not construct");
      __cxa_throw(v61, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v71, v19, *(const void **)&v88, &v70);
    if (v70)
      CFRelease(v70);
    if (v88 != 0.0)
      CFRelease(*(CFTypeRef *)&v88);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v88, "bits per channel");
    v87 = 0;
    v69 = CFNumberCreate(0, kCFNumberIntType, &v87);
    if (!v69)
    {
      v59 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v59, "Could not construct");
      __cxa_throw(v59, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v70, v19, *(const void **)&v88, &v69);
    if (v69)
      CFRelease(v69);
    if (v88 != 0.0)
      CFRelease(*(CFTypeRef *)&v88);
    if (!v77)
    {
      v62 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v62, "Could not construct");
      __cxa_throw(v62, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v20 = applesauce::CF::convert_to<double,0>((const __CFNumber *)v77);
    if (!v76)
    {
      v64 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v64, "Could not construct");
      __cxa_throw(v64, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v21 = v20;
    v22 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v76);
    if (!valuePtr)
    {
      v63 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v63, "Could not construct");
      __cxa_throw(v63, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v23 = applesauce::CF::convert_to<unsigned int,0>(valuePtr);
    if (!v74)
    {
      v60 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v60, "Could not construct");
      __cxa_throw(v60, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v24 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v74);
    if (!v73)
    {
      v53 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v53, "Could not construct");
      __cxa_throw(v53, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v25 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v73);
    if (!v72)
    {
      v54 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v54, "Could not construct");
      __cxa_throw(v54, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v26 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v72);
    if (!v71)
    {
      v55 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v55, "Could not construct");
      __cxa_throw(v55, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v27 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v71);
    v28 = v70;
    if (!v70)
    {
      v56 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v56, "Could not construct");
      __cxa_throw(v56, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v29 = v27;
    v30 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v70);
    v31 = v85;
    if ((unint64_t)v85 < v86)
    {
      *v85 = 0;
      v31[1] = 0;
      v31[2] = 0;
      std::vector<CA::ValueRange>::__init_with_size[abi:ne180100]<CA::ValueRange*,CA::ValueRange*>(v31, __p, v81, (v81 - (uint64_t)__p) >> 4);
      *((double *)v31 + 3) = v21;
      *((_DWORD *)v31 + 8) = v22;
      *((_DWORD *)v31 + 9) = v23;
      *((_DWORD *)v31 + 10) = v24;
      *((_DWORD *)v31 + 11) = v25;
      *((_DWORD *)v31 + 12) = v26;
      *((_DWORD *)v31 + 13) = v29;
      *((_DWORD *)v31 + 14) = v30;
      *((_DWORD *)v31 + 15) = 0;
      v85 = v31 + 8;
LABEL_100:
      CFRelease(v28);
      goto LABEL_101;
    }
    v32 = ((uint64_t)v85 - v84) >> 6;
    if ((unint64_t)(v32 + 1) >> 58)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v33 = (uint64_t)(v86 - v84) >> 5;
    if (v33 <= v32 + 1)
      v33 = v32 + 1;
    if (v86 - v84 >= 0x7FFFFFFFFFFFFFC0)
      v34 = 0x3FFFFFFFFFFFFFFLL;
    else
      v34 = v33;
    v92 = &v86;
    if (v34)
      v34 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>>(v34);
    else
      v35 = 0;
    v36 = v34 + (v32 << 6);
    v88 = *(double *)&v34;
    v89 = (void **)v36;
    v90 = (void **)v36;
    v91 = (void **)(v34 + (v35 << 6));
    *(_QWORD *)v36 = 0;
    *(_QWORD *)(v36 + 8) = 0;
    *(_QWORD *)(v36 + 16) = 0;
    std::vector<CA::ValueRange>::__init_with_size[abi:ne180100]<CA::ValueRange*,CA::ValueRange*>((_QWORD *)v36, __p, v81, (v81 - (uint64_t)__p) >> 4);
    *(double *)(v36 + 24) = v21;
    *(_DWORD *)(v36 + 32) = v22;
    *(_DWORD *)(v36 + 36) = v23;
    *(_DWORD *)(v36 + 40) = v24;
    *(_DWORD *)(v36 + 44) = v25;
    *(_DWORD *)(v36 + 48) = v26;
    *(_DWORD *)(v36 + 52) = v29;
    *(_DWORD *)(v36 + 56) = v30;
    *(_DWORD *)(v36 + 60) = 0;
    v90 += 8;
    std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__swap_out_circular_buffer(&v84, &v88);
    v37 = v85;
    std::__split_buffer<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::~__split_buffer((uint64_t)&v88);
    v28 = v70;
    v85 = v37;
    if (v70)
      goto LABEL_100;
LABEL_101:
    if (v71)
      CFRelease(v71);
    if (v72)
      CFRelease(v72);
    if (v73)
      CFRelease(v73);
    if (v74)
      CFRelease(v74);
    if (valuePtr)
      CFRelease(valuePtr);
    if (v76)
      CFRelease(v76);
    if (v77)
      CFRelease(v77);
    if (cf)
      CFRelease(cf);
    if (theArray)
      CFRelease(theArray);
    if (__p)
      operator delete(__p);
    if (v83)
      CFRelease(v83);
    v7 = v68 + 1;
  }
  while (v68 + 1 != v67);
  v38 = v84;
  v39 = (uint64_t)v85;
  a1 = v66;
LABEL_126:
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__init_with_size[abi:ne180100]<std::tuple<CA::ValueRangeList,CA::StreamDescription>*,std::tuple<CA::ValueRangeList,CA::StreamDescription>*>(a1, v38, v39, (v39 - v38) >> 6);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>::dispatch;
  v88 = COERCE_DOUBLE(&v84);
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v88);
}

void sub_1B5819B84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, int a16, __int16 a17, char a18, char a19, int a20,__int16 a21,char a22,char a23,int a24,__int16 a25,char a26,char a27,int a28,__int16 a29,char a30,char a31,int a32,__int16 a33,char a34,char a35,int a36,__int16 a37,char a38,char a39,int a40,__int16 a41,char a42,char a43,int a44,__int16 a45,char a46,char a47,int a48,__int16 a49,char a50,char a51,void *__p,uint64_t a53,uint64_t a54,char a55,int a56,__int16 a57,char a58,char a59,uint64_t a60)
{
  void *v60;

  __cxa_free_exception(v60);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__init_with_size[abi:ne180100]<std::tuple<CA::ValueRangeList,CA::StreamDescription>*,std::tuple<CA::ValueRangeList,CA::StreamDescription>*>(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  __int128 v11;
  __int128 v12;
  _QWORD v13[3];
  char v14;
  char *v15;
  char *v16;

  if (a4)
  {
    if (a4 >> 58)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (_QWORD *)result;
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>>(a4);
    v8 = v7;
    *v6 = v7;
    v6[1] = v7;
    v6[2] = &v7[64 * v9];
    v15 = v7;
    v16 = v7;
    v13[0] = v6 + 2;
    v13[1] = &v15;
    v13[2] = &v16;
    v14 = 0;
    if (a2 != a3)
    {
      v10 = v7;
      do
      {
        *(_QWORD *)v10 = 0;
        *((_QWORD *)v10 + 1) = 0;
        *((_QWORD *)v10 + 2) = 0;
        std::vector<CA::ValueRange>::__init_with_size[abi:ne180100]<CA::ValueRange*,CA::ValueRange*>(v10, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
        v11 = *(_OWORD *)(a2 + 24);
        v12 = *(_OWORD *)(a2 + 40);
        *((_QWORD *)v10 + 7) = *(_QWORD *)(a2 + 56);
        *(_OWORD *)(v10 + 40) = v12;
        *(_OWORD *)(v10 + 24) = v11;
        v10 = v16 + 64;
        v16 += 64;
        a2 += 64;
      }
      while (a2 != a3);
      v8 = v10;
    }
    v14 = 1;
    result = std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<CA::ValueRangeList,CA::StreamDescription>>,std::tuple<CA::ValueRangeList,CA::StreamDescription>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
    v6[1] = v8;
  }
  return result;
}

void sub_1B581A07C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::In_Place_Storage<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>::dispatch(int a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  AMCP::Thing *v6;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t *, _QWORD, __int128 *);
  void **v10;
  uint64_t *v11;
  AMCP::Thing *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  void **Mutable;
  uint64_t v18;
  const CFDictionaryKeyCallBacks *v19;
  const CFDictionaryValueCallBacks *v20;
  void **v21;
  _QWORD *v22;
  _QWORD *v23;
  __CFDictionary *v24;
  CFNumberRef v25;
  CFNumberRef v26;
  __CFDictionary *v27;
  CFNumberRef v28;
  CFNumberRef v29;
  CFNumberRef v30;
  CFNumberRef v31;
  CFNumberRef v32;
  CFNumberRef v33;
  CFNumberRef v34;
  CFNumberRef v35;
  __CFDictionary *v36;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  std::runtime_error *exception;
  std::runtime_error *v44;
  std::runtime_error *v45;
  std::runtime_error *v46;
  std::runtime_error *v47;
  std::runtime_error *v48;
  std::runtime_error *v49;
  std::runtime_error *v50;
  std::runtime_error *v51;
  std::runtime_error *v52;
  AMCP::Thing *v53;
  uint64_t v54;
  __int128 valuePtr;
  __int128 v56;
  uint64_t (*v57)();
  void **v58[3];
  CFTypeRef v59;
  CFTypeRef cf;
  __CFDictionary *v61;
  void ***v62;

  v6 = (AMCP::Thing *)a3;
  switch(a1)
  {
    case 0:
      goto LABEL_7;
    case 1:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__init_with_size[abi:ne180100]<std::tuple<CA::ValueRangeList,CA::StreamDescription>*,std::tuple<CA::ValueRangeList,CA::StreamDescription>*>(a3, *a2, a2[1], (a2[1] - *a2) >> 6);
      v4 = 0;
      *((_QWORD *)v6 + 4) = AMCP::Implementation::In_Place_Storage<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>::dispatch;
      return v4;
    case 2:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(_QWORD *)(a3 + 16) = a2[2];
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>::dispatch;
LABEL_7:
      *(_QWORD *)&valuePtr = a2;
      std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)&valuePtr);
      v4 = 0;
      a2[4] = 0;
      *(_OWORD *)a2 = 0u;
      *((_OWORD *)a2 + 1) = 0u;
      return v4;
    case 3:
      v4 = 0;
      *a4 = AMCP::Implementation::get_type_marker<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>();
      return v4;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>())
        return (uint64_t)a2;
      else
        return 0;
    case 5:
      v8 = AMCP::Implementation::get_type_marker<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>();
      v9 = (void (*)(uint64_t, uint64_t *, _QWORD, __int128 *))a2[4];
      *(_QWORD *)&valuePtr = 0;
      if (v9)
      {
        v9(3, a2, 0, &valuePtr);
        v9 = (void (*)(uint64_t, uint64_t *, _QWORD, __int128 *))valuePtr;
      }
      if (v9 != (void (*)(uint64_t, uint64_t *, _QWORD, __int128 *))v8)
        goto LABEL_21;
      v10 = (void **)*((_QWORD *)v6 + 4);
      v58[0] = 0;
      if (v10)
      {
        ((void (*)(uint64_t, AMCP::Thing *, _QWORD, void ***))v10)(3, v6, 0, v58);
        v10 = v58[0];
      }
      if (v10 != (void **)v8)
      {
LABEL_21:
        AMCP::Thing::convert_to<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(&valuePtr, (uint64_t)a2);
        AMCP::Thing::convert_to<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(v58, (uint64_t)v6);
        v15 = *((_QWORD *)&valuePtr + 1);
        v14 = valuePtr;
        v16 = v58[0];
        if ((void **)(*((_QWORD *)&valuePtr + 1) - valuePtr) != (void **)((char *)v58[1] - (char *)v58[0]))
        {
LABEL_25:
          v62 = v58;
          std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v62);
          v58[0] = (void **)&valuePtr;
          std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100](v58);
          return 0;
        }
        while (v14 != v15)
        {
          if (!std::__tuple_equal<2ul>::operator()[abi:ne180100]<std::tuple<CA::ValueRangeList,CA::StreamDescription>,std::tuple<CA::ValueRangeList,CA::StreamDescription>>(v14, (uint64_t)v16))goto LABEL_25;
          v14 += 64;
          v16 += 8;
        }
        v62 = v58;
        std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v62);
        v58[0] = (void **)&valuePtr;
        std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100](v58);
        return 1;
      }
      if (a2[4])
      {
        *(_QWORD *)&valuePtr = AMCP::Implementation::get_type_marker<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>();
        v11 = (uint64_t *)((uint64_t (*)(uint64_t, uint64_t *, _QWORD, __int128 *))a2[4])(4, a2, 0, &valuePtr);
      }
      else
      {
        v11 = 0;
      }
      *(_QWORD *)&valuePtr = AMCP::Implementation::get_type_marker<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>();
      v38 = (uint64_t *)(*((uint64_t (**)(uint64_t, AMCP::Thing *, _QWORD, __int128 *))v6 + 4))(4, v6, 0, &valuePtr);
      v39 = *v11;
      v40 = v11[1];
      v41 = v40 - *v11;
      v42 = *v38;
      if (v41 == v38[1] - *v38)
      {
        if (v39 != v40)
        {
          v4 = 1;
          while (std::__tuple_equal<2ul>::operator()[abi:ne180100]<std::tuple<CA::ValueRangeList,CA::StreamDescription>,std::tuple<CA::ValueRangeList,CA::StreamDescription>>(v39, v42))
          {
            v39 += 64;
            v42 += 64;
            if (v39 == v40)
              return v4;
          }
          return 0;
        }
        return 1;
      }
      return 0;
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
      {
        goto LABEL_90;
      }
      if (a2[4])
      {
        *(_QWORD *)&valuePtr = AMCP::Implementation::get_type_marker<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>();
        v13 = (uint64_t *)((uint64_t (*)(uint64_t, uint64_t *, _QWORD, __int128 *))a2[4])(4, a2, 0, &valuePtr);
      }
      else
      {
        v13 = 0;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>())
      {
        if (v13)
        {
          v57 = 0;
          valuePtr = 0u;
          v56 = 0u;
          std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__init_with_size[abi:ne180100]<std::tuple<CA::ValueRangeList,CA::StreamDescription>*,std::tuple<CA::ValueRangeList,CA::StreamDescription>*>((uint64_t)&valuePtr, *v13, v13[1], (v13[1] - *v13) >> 6);
          v57 = AMCP::Implementation::In_Place_Storage<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>::dispatch;
          goto LABEL_91;
        }
LABEL_104:
        __assert_rtn("create_vector_of_available_formats_from", "Thing.h", 2208, "in_value_ptr != nullptr");
      }
      if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
      {
        if (v13)
        {
          Mutable = (void **)CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B380]);
          v58[0] = Mutable;
          v18 = *v13;
          v53 = v6;
          v54 = v13[1];
          if (*v13 != v54)
          {
            v19 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B398];
            v20 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A8];
            do
            {
              v21 = (void **)CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B380]);
              v62 = (void ***)v21;
              v23 = *(_QWORD **)v18;
              v22 = *(_QWORD **)(v18 + 8);
              while (v23 != v22)
              {
                v24 = CFDictionaryCreateMutable(0, 0, v19, v20);
                v61 = v24;
                applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "minimum");
                *(_QWORD *)&valuePtr = *v23;
                v25 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
                if (!v25)
                {
                  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(exception, "Could not construct");
                  __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                }
                mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v24, cf, v25);
                CFRelease(v25);
                if (cf)
                  CFRelease(cf);
                applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "maximum");
                *(_QWORD *)&valuePtr = v23[1];
                v26 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
                if (!v26)
                {
                  v44 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v44, "Could not construct");
                  __cxa_throw(v44, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                }
                mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v24, cf, v26);
                CFRelease(v26);
                if (cf)
                  CFRelease(cf);
                mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&valuePtr, v24);
                mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::DictionaryRef>((__CFArray *)v21, (const void *)valuePtr);
                if ((_QWORD)valuePtr)
                  CFRelease((CFTypeRef)valuePtr);
                if (v24)
                  CFRelease(v24);
                v23 += 2;
              }
              v27 = CFDictionaryCreateMutable(0, 0, v19, v20);
              v61 = v27;
              applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "sample rate");
              *(_QWORD *)&valuePtr = *(_QWORD *)(v18 + 24);
              v28 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
              if (!v28)
              {
                v45 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v45, "Could not construct");
                __cxa_throw(v45, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v27, cf, v28);
              CFRelease(v28);
              if (cf)
                CFRelease(cf);
              applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&valuePtr, "format id");
              LODWORD(cf) = *(_DWORD *)(v18 + 32);
              v29 = CFNumberCreate(0, kCFNumberIntType, &cf);
              if (!v29)
              {
                v46 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v46, "Could not construct");
                __cxa_throw(v46, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v27, (const void *)valuePtr, v29);
              CFRelease(v29);
              if ((_QWORD)valuePtr)
                CFRelease((CFTypeRef)valuePtr);
              applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&valuePtr, "format flags");
              LODWORD(cf) = *(_DWORD *)(v18 + 36);
              v30 = CFNumberCreate(0, kCFNumberIntType, &cf);
              if (!v30)
              {
                v47 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v47, "Could not construct");
                __cxa_throw(v47, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v27, (const void *)valuePtr, v30);
              CFRelease(v30);
              if ((_QWORD)valuePtr)
                CFRelease((CFTypeRef)valuePtr);
              applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&valuePtr, "bytes per packet");
              LODWORD(cf) = *(_DWORD *)(v18 + 40);
              v31 = CFNumberCreate(0, kCFNumberIntType, &cf);
              if (!v31)
              {
                v48 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v48, "Could not construct");
                __cxa_throw(v48, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v27, (const void *)valuePtr, v31);
              CFRelease(v31);
              if ((_QWORD)valuePtr)
                CFRelease((CFTypeRef)valuePtr);
              applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&valuePtr, "frames per packet");
              LODWORD(cf) = *(_DWORD *)(v18 + 44);
              v32 = CFNumberCreate(0, kCFNumberIntType, &cf);
              if (!v32)
              {
                v49 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v49, "Could not construct");
                __cxa_throw(v49, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v27, (const void *)valuePtr, v32);
              CFRelease(v32);
              if ((_QWORD)valuePtr)
                CFRelease((CFTypeRef)valuePtr);
              applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&valuePtr, "bytes per frame");
              LODWORD(cf) = *(_DWORD *)(v18 + 48);
              v33 = CFNumberCreate(0, kCFNumberIntType, &cf);
              if (!v33)
              {
                v50 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v50, "Could not construct");
                __cxa_throw(v50, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v27, (const void *)valuePtr, v33);
              CFRelease(v33);
              if ((_QWORD)valuePtr)
                CFRelease((CFTypeRef)valuePtr);
              applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&valuePtr, "channels per frame");
              LODWORD(cf) = *(_DWORD *)(v18 + 52);
              v34 = CFNumberCreate(0, kCFNumberIntType, &cf);
              if (!v34)
              {
                v51 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v51, "Could not construct");
                __cxa_throw(v51, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v27, (const void *)valuePtr, v34);
              CFRelease(v34);
              if ((_QWORD)valuePtr)
                CFRelease((CFTypeRef)valuePtr);
              applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&valuePtr, "bits per channel");
              LODWORD(cf) = *(_DWORD *)(v18 + 56);
              v35 = CFNumberCreate(0, kCFNumberIntType, &cf);
              if (!v35)
              {
                v52 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v52, "Could not construct");
                __cxa_throw(v52, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v27, (const void *)valuePtr, v35);
              CFRelease(v35);
              if ((_QWORD)valuePtr)
                CFRelease((CFTypeRef)valuePtr);
              v36 = CFDictionaryCreateMutable(0, 0, v19, v20);
              *(_QWORD *)&valuePtr = v36;
              applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "sample rate range list");
              mcp_applesauce::CF::Array_Builder::get_array((applesauce::CF::ArrayRef *)&v59, v21);
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::ArrayRef>(v36, cf, v59);
              if (v59)
                CFRelease(v59);
              if (cf)
                CFRelease(cf);
              applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "format");
              mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v59, v27);
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::DictionaryRef>(v36, cf, v59);
              if (v59)
                CFRelease(v59);
              if (cf)
                CFRelease(cf);
              mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&cf, v36);
              mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::DictionaryRef>((__CFArray *)Mutable, cf);
              if (cf)
                CFRelease(cf);
              if (v36)
                CFRelease(v36);
              if (v27)
                CFRelease(v27);
              if (v21)
                CFRelease(v21);
              v18 += 64;
            }
            while (v18 != v54);
          }
          mcp_applesauce::CF::Array_Builder::copy_array((applesauce::CF::ArrayRef *)&valuePtr, (const __CFArray *)Mutable);
          *((_QWORD *)&valuePtr + 1) = 0;
          v56 = 0uLL;
          v57 = AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::dispatch;
          v6 = v53;
          if (Mutable)
            CFRelease(Mutable);
          goto LABEL_91;
        }
        goto LABEL_104;
      }
LABEL_90:
      v57 = 0;
      valuePtr = 0u;
      v56 = 0u;
LABEL_91:
      AMCP::swap((AMCP::Thing *)&valuePtr, v6, v12);
      if (v57)
        ((void (*)(_QWORD, __int128 *, _QWORD, _QWORD))v57)(0, &valuePtr, 0, 0);
      return 0;
    default:
      return v4;
  }
}

void sub_1B581ABC8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16)
{
  a16 = (void **)&a11;
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100](&a16);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B581A8C4);
}

void sub_1B581ABF4(void *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  const void *v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  va_list va1;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, const void *);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, const void *);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  mcp_applesauce::CF::Dictionary_Builder::~Dictionary_Builder((const void **)va2);
  mcp_applesauce::CF::Array_Builder::~Array_Builder((const void **)(v3 - 88));
  mcp_applesauce::CF::Array_Builder::~Array_Builder((const void **)va1);
  __clang_call_terminate(a1);
}

void std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 64);
      v4 -= 64;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 56) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

uint64_t AMCP::Thing::convert_to<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t *v6;
  uint64_t result;
  uint64_t *v8;
  std::bad_cast *exception;
  std::bad_cast *v10;
  std::bad_cast *v11;
  std::bad_cast *v12;
  std::bad_cast *v13;
  std::bad_cast *v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[2];
  uint64_t (*v18)(uint64_t, _OWORD *, _QWORD, uint64_t *);
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, _QWORD, _QWORD);

  if (!*(_QWORD *)(a2 + 32))
    goto LABEL_12;
  v4 = AMCP::Implementation::get_type_marker<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>();
  v5 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a2 + 32);
  v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))v4)
  {
    v19 = v4;
    v6 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (v6)
    {
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
      return std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__init_with_size[abi:ne180100]<std::tuple<CA::ValueRangeList,CA::StreamDescription>*,std::tuple<CA::ValueRangeList,CA::StreamDescription>*>((uint64_t)a1, *v6, v6[1], (v6[1] - *v6) >> 6);
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v16 = AMCP::Implementation::get_type_marker<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>();
  memset(v17, 0, sizeof(v17));
  v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v15 = v4;
  v8 = (uint64_t *)v18(4, v17, 0, &v15);
  if (!v8)
  {
    v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__init_with_size[abi:ne180100]<std::tuple<CA::ValueRangeList,CA::StreamDescription>*,std::tuple<CA::ValueRangeList,CA::StreamDescription>*>((uint64_t)a1, *v8, v8[1], (v8[1] - *v8) >> 6);
  if (v18)
    return v18(0, v17, 0, 0);
  return result;
}

void sub_1B581AFC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::tuple<CA::ValueRangeList,CA::StreamDescription>>,std::reverse_iterator<std::tuple<CA::ValueRangeList,CA::StreamDescription>*>,std::reverse_iterator<std::tuple<CA::ValueRangeList,CA::StreamDescription>*>,std::reverse_iterator<std::tuple<CA::ValueRangeList,CA::StreamDescription>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = result;
  v5 = *a1;
  *a1 = result;
  a2[1] = v5;
  v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    v4 = *(void **)(v2 - 64);
    *(_QWORD *)(a1 + 16) = v2 - 64;
    if (v4)
    {
      *(_QWORD *)(v2 - 56) = v4;
      operator delete(v4);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 64;
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::tuple<CA::ValueRangeList,CA::StreamDescription>>,std::reverse_iterator<std::tuple<CA::ValueRangeList,CA::StreamDescription>*>,std::reverse_iterator<std::tuple<CA::ValueRangeList,CA::StreamDescription>*>,std::reverse_iterator<std::tuple<CA::ValueRangeList,CA::StreamDescription>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;

  result = a7;
  if (a3 != a5)
  {
    v8 = 0;
    do
    {
      v9 = a7 + v8;
      v10 = a3 + v8;
      *(_QWORD *)(v9 - 64) = 0;
      *(_QWORD *)(v9 - 56) = 0;
      *(_QWORD *)(v9 - 48) = 0;
      *(_OWORD *)(v9 - 64) = *(_OWORD *)(a3 + v8 - 64);
      *(_QWORD *)(v9 - 48) = *(_QWORD *)(a3 + v8 - 48);
      *(_QWORD *)(v10 - 64) = 0;
      *(_QWORD *)(v10 - 56) = 0;
      *(_QWORD *)(v10 - 48) = 0;
      v11 = *(_OWORD *)(a3 + v8 - 40);
      v12 = *(_OWORD *)(a3 + v8 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 + v8 - 8);
      *(_OWORD *)(v9 - 24) = v12;
      *(_OWORD *)(v9 - 40) = v11;
      v8 -= 64;
    }
    while (a3 + v8 != a5);
    return a7 + v8;
  }
  return result;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<CA::ValueRangeList,CA::StreamDescription>>,std::tuple<CA::ValueRangeList,CA::StreamDescription>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  if (!*(_BYTE *)(a1 + 24))
  {
    v2 = **(_QWORD **)(a1 + 16);
    v3 = **(_QWORD **)(a1 + 8);
    if (v2 != v3)
    {
      v4 = **(_QWORD **)(a1 + 16);
      do
      {
        v6 = *(void **)(v4 - 64);
        v4 -= 64;
        v5 = v6;
        if (v6)
        {
          *(_QWORD *)(v2 - 56) = v5;
          operator delete(v5);
        }
        v2 = v4;
      }
      while (v4 != v3);
    }
  }
  return a1;
}

uint64_t AMCP::Implementation::get_type_marker<std::vector<AudioStreamRangedDescription>>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return v1[139];
}

uint64_t AMCP::Implementation::get_type_marker<std::vector<CA::RangedStreamDescription>>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return v1[141];
}

char *std::vector<CA::RangedStreamDescription>::__init_with_size[abi:ne180100]<CA::RangedStreamDescription*,CA::RangedStreamDescription*>(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  if (a4)
  {
    v6 = result;
    result = std::vector<CA::RangedStreamDescription>::__vallocate[abi:ne180100](result, a4);
    v7 = *((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2;
      v9 = a2[1];
      v10 = a2[2];
      *(_QWORD *)(v7 + 48) = *((_QWORD *)a2 + 6);
      *(_OWORD *)(v7 + 16) = v9;
      *(_OWORD *)(v7 + 32) = v10;
      *(_OWORD *)v7 = v8;
      v7 += 56;
      a2 = (__int128 *)((char *)a2 + 56);
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1B581B2B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL AMCP::Implementation::In_Place_Storage<std::vector<CA::RangedStreamDescription>>::dispatch(_BOOL8 result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  __int128 *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, _QWORD, CFTypeRef *);
  void (*v12)(uint64_t, uint64_t, _QWORD, _QWORD *);
  uint64_t *v13;
  AMCP::Thing *v14;
  __int128 **v15;
  void *v16;
  char *v17;
  void *v18;
  uint64_t v19;
  char *v20;
  _BOOL4 v21;
  char v22;
  __int128 *v23;
  __int128 *v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  BOOL (*v33)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  __CFArray *Mutable;
  __int128 *v35;
  __int128 *v36;
  CFMutableDictionaryRef v37;
  CFNumberRef v38;
  CFNumberRef v39;
  CFNumberRef v40;
  CFNumberRef v41;
  CFNumberRef v42;
  CFNumberRef v43;
  CFNumberRef v44;
  CFNumberRef v45;
  CFNumberRef v46;
  CFNumberRef v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  std::runtime_error *exception;
  std::runtime_error *v54;
  std::runtime_error *v55;
  std::runtime_error *v56;
  std::runtime_error *v57;
  std::runtime_error *v58;
  std::runtime_error *v59;
  std::runtime_error *v60;
  std::runtime_error *v61;
  std::runtime_error *v62;
  CFTypeRef v63[2];
  __int128 v64;
  uint64_t (*v65)();
  _QWORD v66[3];
  CFTypeRef cf[2];

  switch(result)
  {
    case 0:
      v7 = *(__int128 **)a2;
      if (*(_QWORD *)a2)
      {
        *(_QWORD *)(a2 + 8) = v7;
        operator delete(v7);
      }
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      v8 = 0uLL;
      goto LABEL_9;
    case 1:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      std::vector<CA::RangedStreamDescription>::__init_with_size[abi:ne180100]<CA::RangedStreamDescription*,CA::RangedStreamDescription*>((char *)a3, *(__int128 **)a2, *(__int128 **)(a2 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
      result = 0;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<CA::RangedStreamDescription>>::dispatch;
      return result;
    case 2:
      result = 0;
      v8 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<CA::RangedStreamDescription>>::dispatch;
      *(_QWORD *)(a2 + 32) = 0;
LABEL_9:
      *(_OWORD *)a2 = v8;
      *(_OWORD *)(a2 + 16) = v8;
      return result;
    case 3:
      v9 = AMCP::Implementation::get_type_marker<std::vector<CA::RangedStreamDescription>>();
      result = 0;
      *a4 = v9;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::vector<CA::RangedStreamDescription>>())
        return a2;
      else
        return 0;
    case 5:
      v10 = AMCP::Implementation::get_type_marker<std::vector<CA::RangedStreamDescription>>();
      v11 = *(void (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(a2 + 32);
      v63[0] = 0;
      if (v11)
      {
        v11(3, a2, 0, v63);
        v11 = (void (*)(uint64_t, uint64_t, _QWORD, CFTypeRef *))v63[0];
      }
      if (v11 != (void (*)(uint64_t, uint64_t, _QWORD, CFTypeRef *))v10)
        goto LABEL_25;
      v12 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD *))(a3 + 32);
      v66[0] = 0;
      if (v12)
      {
        v12(3, a3, 0, v66);
        v12 = (void (*)(uint64_t, uint64_t, _QWORD, _QWORD *))v66[0];
      }
      if (v12 != (void (*)(uint64_t, uint64_t, _QWORD, _QWORD *))v10)
      {
LABEL_25:
        AMCP::Thing::convert_to<std::vector<CA::RangedStreamDescription>>((uint64_t)v63, a2);
        AMCP::Thing::convert_to<std::vector<CA::RangedStreamDescription>>((uint64_t)v66, a3);
        v16 = (void *)v63[0];
        v17 = (char *)v63[1];
        v18 = (void *)v66[0];
        if ((char *)v63[1] - (char *)v63[0] == v66[1] - v66[0])
        {
          if (v63[0] == v63[1])
          {
            v22 = 1;
            if (!v66[0])
            {
LABEL_34:
              if (v16)
                operator delete(v16);
              return (v22 & 1) != 0;
            }
LABEL_33:
            operator delete(v18);
            goto LABEL_34;
          }
          v19 = v66[0];
          v20 = (char *)v63[0];
          do
          {
            v21 = std::__equal_to::operator()[abi:ne180100]<CA::RangedStreamDescription,CA::RangedStreamDescription>((uint64_t)v20, v19);
            v22 = v21;
            if (!v21)
              break;
            v20 += 56;
            v19 += 56;
          }
          while (v20 != v17);
        }
        else
        {
          v22 = 0;
        }
        if (!v18)
          goto LABEL_34;
        goto LABEL_33;
      }
      if (*(_QWORD *)(a2 + 32))
      {
        v63[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<std::vector<CA::RangedStreamDescription>>();
        v13 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(a2 + 32))(4, a2, 0, v63);
      }
      else
      {
        v13 = 0;
      }
      v63[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<std::vector<CA::RangedStreamDescription>>();
      v48 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(a3 + 32))(4, a3, 0, v63);
      v49 = *v13;
      v50 = v13[1];
      v51 = v50 - *v13;
      v52 = *v48;
      if (v51 == v48[1] - *v48)
      {
        while (v49 != v50)
        {
          if (!std::__equal_to::operator()[abi:ne180100]<CA::RangedStreamDescription,CA::RangedStreamDescription>(v49, v52))return 0;
          v49 += 56;
          v52 += 56;
        }
        return 1;
      }
      return 0;
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<std::vector<AudioStreamRangedDescription>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<CA::RangedStreamDescription>>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
      {
        goto LABEL_89;
      }
      if (*(_QWORD *)(a2 + 32))
      {
        v63[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<std::vector<CA::RangedStreamDescription>>();
        v15 = (__int128 **)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(a2 + 32))(4, a2, 0, v63);
      }
      else
      {
        v15 = 0;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<std::vector<AudioStreamRangedDescription>>())
      {
        if (v15)
        {
          v23 = *v15;
          v24 = v15[1];
          v25 = (char *)v24 - (char *)*v15;
          if (v24 == *v15)
          {
            v28 = 0uLL;
          }
          else
          {
            v26 = 0x6DB6DB6DB6DB6DB7 * (v25 >> 3);
            if (v26 >= 0x492492492492493)
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            v27 = std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>>(v26);
            *(_QWORD *)&v28 = v27;
            v25 = (uint64_t)&v27[7 * v29];
            do
            {
              v30 = *v23;
              v31 = v23[1];
              v32 = v23[2];
              v27[6] = *((_QWORD *)v23 + 6);
              *((_OWORD *)v27 + 1) = v31;
              *((_OWORD *)v27 + 2) = v32;
              *(_OWORD *)v27 = v30;
              v27 += 7;
              v23 = (__int128 *)((char *)v23 + 56);
            }
            while (v23 != v24);
            *((_QWORD *)&v28 + 1) = v27;
          }
          *(_OWORD *)v63 = v28;
          v64 = (unint64_t)v25;
          v33 = AMCP::Implementation::In_Place_Storage<std::vector<AudioStreamRangedDescription>>::dispatch;
          goto LABEL_92;
        }
      }
      else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<CA::RangedStreamDescription>>())
      {
        if (v15)
        {
          v65 = 0;
          *(_OWORD *)v63 = 0u;
          v64 = 0u;
          std::vector<CA::RangedStreamDescription>::__init_with_size[abi:ne180100]<CA::RangedStreamDescription*,CA::RangedStreamDescription*>((char *)v63, *v15, v15[1], 0x6DB6DB6DB6DB6DB7 * (((char *)v15[1] - (char *)*v15) >> 3));
          v33 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<std::vector<CA::RangedStreamDescription>>::dispatch;
LABEL_92:
          v65 = (uint64_t (*)())v33;
LABEL_93:
          AMCP::swap((AMCP::Thing *)v63, (AMCP::Thing *)a3, v14);
          if (v65)
            ((void (*)(_QWORD, CFTypeRef *, _QWORD, _QWORD))v65)(0, v63, 0, 0);
          return 0;
        }
      }
      else
      {
        if (*a4 != AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
        {
LABEL_89:
          v65 = 0;
          *(_OWORD *)v63 = 0u;
          v64 = 0u;
          goto LABEL_93;
        }
        if (v15)
        {
          Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B380]);
          v66[0] = Mutable;
          v35 = *v15;
          v36 = v15[1];
          if (*v15 != v36)
          {
            do
            {
              v37 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
              cf[1] = v37;
              applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)cf, "sample rate");
              v63[0] = *(CFTypeRef *)v35;
              v38 = CFNumberCreate(0, kCFNumberDoubleType, v63);
              if (!v38)
              {
                exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(exception, "Could not construct");
                __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v37, cf[0], v38);
              CFRelease(v38);
              if (cf[0])
                CFRelease(cf[0]);
              applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v63, "format id");
              LODWORD(cf[0]) = *((_DWORD *)v35 + 2);
              v39 = CFNumberCreate(0, kCFNumberIntType, cf);
              if (!v39)
              {
                v54 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v54, "Could not construct");
                __cxa_throw(v54, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v37, v63[0], v39);
              CFRelease(v39);
              if (v63[0])
                CFRelease(v63[0]);
              applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v63, "format flags");
              LODWORD(cf[0]) = *((_DWORD *)v35 + 3);
              v40 = CFNumberCreate(0, kCFNumberIntType, cf);
              if (!v40)
              {
                v55 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v55, "Could not construct");
                __cxa_throw(v55, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v37, v63[0], v40);
              CFRelease(v40);
              if (v63[0])
                CFRelease(v63[0]);
              applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v63, "bytes per packet");
              LODWORD(cf[0]) = *((_DWORD *)v35 + 4);
              v41 = CFNumberCreate(0, kCFNumberIntType, cf);
              if (!v41)
              {
                v56 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v56, "Could not construct");
                __cxa_throw(v56, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v37, v63[0], v41);
              CFRelease(v41);
              if (v63[0])
                CFRelease(v63[0]);
              applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v63, "frames per packet");
              LODWORD(cf[0]) = *((_DWORD *)v35 + 5);
              v42 = CFNumberCreate(0, kCFNumberIntType, cf);
              if (!v42)
              {
                v57 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v57, "Could not construct");
                __cxa_throw(v57, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v37, v63[0], v42);
              CFRelease(v42);
              if (v63[0])
                CFRelease(v63[0]);
              applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v63, "bytes per frame");
              LODWORD(cf[0]) = *((_DWORD *)v35 + 6);
              v43 = CFNumberCreate(0, kCFNumberIntType, cf);
              if (!v43)
              {
                v58 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v58, "Could not construct");
                __cxa_throw(v58, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v37, v63[0], v43);
              CFRelease(v43);
              if (v63[0])
                CFRelease(v63[0]);
              applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v63, "channels per frame");
              LODWORD(cf[0]) = *((_DWORD *)v35 + 7);
              v44 = CFNumberCreate(0, kCFNumberIntType, cf);
              if (!v44)
              {
                v59 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v59, "Could not construct");
                __cxa_throw(v59, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v37, v63[0], v44);
              CFRelease(v44);
              if (v63[0])
                CFRelease(v63[0]);
              applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v63, "bits per channel");
              LODWORD(cf[0]) = *((_DWORD *)v35 + 8);
              v45 = CFNumberCreate(0, kCFNumberIntType, cf);
              if (!v45)
              {
                v60 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v60, "Could not construct");
                __cxa_throw(v60, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v37, v63[0], v45);
              CFRelease(v45);
              if (v63[0])
                CFRelease(v63[0]);
              applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)cf, "minimum");
              v63[0] = *((CFTypeRef *)v35 + 5);
              v46 = CFNumberCreate(0, kCFNumberDoubleType, v63);
              if (!v46)
              {
                v61 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v61, "Could not construct");
                __cxa_throw(v61, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v37, cf[0], v46);
              CFRelease(v46);
              if (cf[0])
                CFRelease(cf[0]);
              applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)cf, "maximum");
              v63[0] = *((CFTypeRef *)v35 + 6);
              v47 = CFNumberCreate(0, kCFNumberDoubleType, v63);
              if (!v47)
              {
                v62 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v62, "Could not construct");
                __cxa_throw(v62, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v37, cf[0], v47);
              CFRelease(v47);
              if (cf[0])
                CFRelease(cf[0]);
              mcp_applesauce::CF::Dictionary_Builder::copy_dictionary((applesauce::CF::DictionaryRef *)v63, v37);
              mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::DictionaryRef>(Mutable, v63[0]);
              if (v63[0])
                CFRelease(v63[0]);
              if (v37)
                CFRelease(v37);
              v35 = (__int128 *)((char *)v35 + 56);
            }
            while (v35 != v36);
          }
          mcp_applesauce::CF::Array_Builder::copy_array((applesauce::CF::ArrayRef *)v63, Mutable);
          v63[1] = 0;
          v64 = 0uLL;
          v65 = AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::dispatch;
          if (Mutable)
            CFRelease(Mutable);
          goto LABEL_93;
        }
      }
      __assert_rtn("create_vector_of_asrds_from", "Thing.h", 2005, "in_value_ptr != nullptr");
    default:
      return result;
  }
}

void sub_1B581BD88(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, int a18, __int16 a19, char a20,char a21)
{
  __clang_call_terminate(a1);
}

BOOL std::__equal_to::operator()[abi:ne180100]<CA::RangedStreamDescription,CA::RangedStreamDescription>(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  BOOL v6;
  BOOL v7;
  BOOL v8;

  v2 = *(double *)(a1 + 48);
  v3 = *(double *)(a2 + 40);
  if (v2 >= v3
    && ((v4 = *(double *)(a1 + 40), v5 = *(double *)(a2 + 48), v4 < v3) ? (v6 = v2 > v5) : (v6 = 1),
        v6
     && (v4 < v3 ? (v7 = v2 <= v5) : (v7 = 1),
         v7
      && (v4 == v3 ? (v8 = v2 == v5) : (v8 = 0),
          v8
       && *(double *)a1 == *(double *)a2
       && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
       && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
       && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16)
       && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20)
       && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)
       && *(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 28)))))
  {
    return *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32);
  }
  else
  {
    return 0;
  }
}

char *AMCP::Thing::convert_to<std::vector<CA::RangedStreamDescription>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, _QWORD, _QWORD);
  __int128 **v6;
  char *result;
  __int128 **v8;
  std::bad_cast *exception;
  std::bad_cast *v10;
  std::bad_cast *v11;
  std::bad_cast *v12;
  std::bad_cast *v13;
  std::bad_cast *v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[2];
  uint64_t (*v18)(uint64_t, _OWORD *, _QWORD, uint64_t *);
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, _QWORD, _QWORD);

  if (!*(_QWORD *)(a2 + 32))
    goto LABEL_12;
  v4 = AMCP::Implementation::get_type_marker<std::vector<CA::RangedStreamDescription>>();
  v5 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a2 + 32);
  v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))v4)
  {
    v19 = v4;
    v6 = (__int128 **)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (v6)
    {
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      return std::vector<CA::RangedStreamDescription>::__init_with_size[abi:ne180100]<CA::RangedStreamDescription*,CA::RangedStreamDescription*>((char *)a1, *v6, v6[1], 0x6DB6DB6DB6DB6DB7 * (((char *)v6[1] - (char *)*v6) >> 3));
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v16 = AMCP::Implementation::get_type_marker<std::vector<CA::RangedStreamDescription>>();
  memset(v17, 0, sizeof(v17));
  v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v15 = v4;
  v8 = (__int128 **)v18(4, v17, 0, &v15);
  if (!v8)
  {
    v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  result = std::vector<CA::RangedStreamDescription>::__init_with_size[abi:ne180100]<CA::RangedStreamDescription*,CA::RangedStreamDescription*>((char *)a1, *v8, v8[1], 0x6DB6DB6DB6DB6DB7 * (((char *)v8[1] - (char *)*v8) >> 3));
  if (v18)
    return (char *)v18(0, v17, 0, 0);
  return result;
}

void sub_1B581C1A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

BOOL AMCP::Implementation::In_Place_Storage<std::vector<AudioStreamRangedDescription>>::dispatch(_BOOL8 result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  void *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, _QWORD, CFTypeRef *);
  void (*v12)(uint64_t, uint64_t, _QWORD, _QWORD *);
  uint64_t *v13;
  AMCP::Thing *v14;
  uint64_t v15;
  void *v16;
  char *v17;
  void *v18;
  uint64_t v19;
  char *v20;
  _BOOL4 v21;
  char v22;
  uint64_t (*v23)();
  _OWORD *v24;
  _OWORD *v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __CFArray *Mutable;
  CFTypeRef *v35;
  CFTypeRef *v36;
  CFMutableDictionaryRef v37;
  CFNumberRef v38;
  CFNumberRef v39;
  CFNumberRef v40;
  CFNumberRef v41;
  CFNumberRef v42;
  CFNumberRef v43;
  CFNumberRef v44;
  CFNumberRef v45;
  CFNumberRef v46;
  CFNumberRef v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  std::runtime_error *exception;
  std::runtime_error *v54;
  std::runtime_error *v55;
  std::runtime_error *v56;
  std::runtime_error *v57;
  std::runtime_error *v58;
  std::runtime_error *v59;
  std::runtime_error *v60;
  std::runtime_error *v61;
  std::runtime_error *v62;
  CFTypeRef v63[2];
  __int128 v64;
  uint64_t (*v65)();
  _QWORD v66[3];
  CFTypeRef cf[2];

  switch(result)
  {
    case 0:
      v7 = *(void **)a2;
      if (*(_QWORD *)a2)
      {
        *(_QWORD *)(a2 + 8) = v7;
        operator delete(v7);
      }
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      v8 = 0uLL;
      goto LABEL_9;
    case 1:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      std::vector<AudioStreamRangedDescription>::__init_with_size[abi:ne180100]<AudioStreamRangedDescription*,AudioStreamRangedDescription*>((_QWORD *)a3, *(const void **)a2, *(_QWORD *)(a2 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
      result = 0;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<AudioStreamRangedDescription>>::dispatch;
      return result;
    case 2:
      result = 0;
      v8 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<AudioStreamRangedDescription>>::dispatch;
      *(_QWORD *)(a2 + 32) = 0;
LABEL_9:
      *(_OWORD *)a2 = v8;
      *(_OWORD *)(a2 + 16) = v8;
      return result;
    case 3:
      v9 = AMCP::Implementation::get_type_marker<std::vector<AudioStreamRangedDescription>>();
      result = 0;
      *a4 = v9;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::vector<AudioStreamRangedDescription>>())
        return a2;
      else
        return 0;
    case 5:
      v10 = AMCP::Implementation::get_type_marker<std::vector<AudioStreamRangedDescription>>();
      v11 = *(void (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(a2 + 32);
      v63[0] = 0;
      if (v11)
      {
        v11(3, a2, 0, v63);
        v11 = (void (*)(uint64_t, uint64_t, _QWORD, CFTypeRef *))v63[0];
      }
      if (v11 != (void (*)(uint64_t, uint64_t, _QWORD, CFTypeRef *))v10)
        goto LABEL_25;
      v12 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD *))(a3 + 32);
      v66[0] = 0;
      if (v12)
      {
        v12(3, a3, 0, v66);
        v12 = (void (*)(uint64_t, uint64_t, _QWORD, _QWORD *))v66[0];
      }
      if (v12 != (void (*)(uint64_t, uint64_t, _QWORD, _QWORD *))v10)
      {
LABEL_25:
        AMCP::Thing::convert_to<std::vector<AudioStreamRangedDescription>>(v63, a2);
        AMCP::Thing::convert_to<std::vector<AudioStreamRangedDescription>>(v66, a3);
        v16 = (void *)v63[0];
        v17 = (char *)v63[1];
        v18 = (void *)v66[0];
        if ((char *)v63[1] - (char *)v63[0] == v66[1] - v66[0])
        {
          if (v63[0] == v63[1])
          {
            v22 = 1;
            if (!v66[0])
            {
LABEL_34:
              if (v16)
                operator delete(v16);
              return (v22 & 1) != 0;
            }
LABEL_33:
            operator delete(v18);
            goto LABEL_34;
          }
          v19 = v66[0];
          v20 = (char *)v63[0];
          do
          {
            v21 = std::__equal_to::operator()[abi:ne180100]<CA::RangedStreamDescription,CA::RangedStreamDescription>((uint64_t)v20, v19);
            v22 = v21;
            if (!v21)
              break;
            v20 += 56;
            v19 += 56;
          }
          while (v20 != v17);
        }
        else
        {
          v22 = 0;
        }
        if (!v18)
          goto LABEL_34;
        goto LABEL_33;
      }
      if (*(_QWORD *)(a2 + 32))
      {
        v63[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<std::vector<AudioStreamRangedDescription>>();
        v13 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(a2 + 32))(4, a2, 0, v63);
      }
      else
      {
        v13 = 0;
      }
      v63[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<std::vector<AudioStreamRangedDescription>>();
      v48 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(a3 + 32))(4, a3, 0, v63);
      v49 = *v13;
      v50 = v13[1];
      v51 = v50 - *v13;
      v52 = *v48;
      if (v51 == v48[1] - *v48)
      {
        while (v49 != v50)
        {
          if (!std::__equal_to::operator()[abi:ne180100]<CA::RangedStreamDescription,CA::RangedStreamDescription>(v49, v52))return 0;
          v49 += 56;
          v52 += 56;
        }
        return 1;
      }
      return 0;
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<std::vector<AudioStreamRangedDescription>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<CA::RangedStreamDescription>>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
      {
        goto LABEL_89;
      }
      if (*(_QWORD *)(a2 + 32))
      {
        v63[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<std::vector<AudioStreamRangedDescription>>();
        v15 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(a2 + 32))(4, a2, 0, v63);
      }
      else
      {
        v15 = 0;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<std::vector<AudioStreamRangedDescription>>())
      {
        if (v15)
        {
          v65 = 0;
          *(_OWORD *)v63 = 0u;
          v64 = 0u;
          std::vector<AudioStreamRangedDescription>::__init_with_size[abi:ne180100]<AudioStreamRangedDescription*,AudioStreamRangedDescription*>(v63, *(const void **)v15, *(_QWORD *)(v15 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v15 + 8) - *(_QWORD *)v15) >> 3));
          v23 = AMCP::Implementation::In_Place_Storage<std::vector<AudioStreamRangedDescription>>::dispatch;
LABEL_99:
          v65 = v23;
LABEL_100:
          AMCP::swap((AMCP::Thing *)v63, (AMCP::Thing *)a3, v14);
          if (v65)
            ((void (*)(_QWORD, CFTypeRef *, _QWORD, _QWORD))v65)(0, v63, 0, 0);
          return 0;
        }
      }
      else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<CA::RangedStreamDescription>>())
      {
        if (v15)
        {
          v24 = *(_OWORD **)v15;
          v25 = *(_OWORD **)(v15 + 8);
          v26 = (uint64_t)v25 - *(_QWORD *)v15;
          if (v25 == *(_OWORD **)v15)
          {
            v29 = 0uLL;
          }
          else
          {
            v27 = 0x6DB6DB6DB6DB6DB7 * (v26 >> 3);
            if (v27 >= 0x492492492492493)
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            v28 = std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>>(v27);
            *(_QWORD *)&v29 = v28;
            v26 = (uint64_t)&v28[7 * v30];
            do
            {
              v31 = *v24;
              v32 = v24[1];
              v33 = v24[2];
              v28[6] = *((_QWORD *)v24 + 6);
              *((_OWORD *)v28 + 1) = v32;
              *((_OWORD *)v28 + 2) = v33;
              *(_OWORD *)v28 = v31;
              v28 += 7;
              v24 = (_OWORD *)((char *)v24 + 56);
            }
            while (v24 != v25);
            *((_QWORD *)&v29 + 1) = v28;
          }
          *(_OWORD *)v63 = v29;
          v64 = (unint64_t)v26;
          v23 = AMCP::Implementation::In_Place_Storage<std::vector<CA::RangedStreamDescription>>::dispatch;
          goto LABEL_99;
        }
      }
      else
      {
        if (*a4 != AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
        {
LABEL_89:
          v65 = 0;
          *(_OWORD *)v63 = 0u;
          v64 = 0u;
          goto LABEL_100;
        }
        if (v15)
        {
          Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B380]);
          v66[0] = Mutable;
          v35 = *(CFTypeRef **)v15;
          v36 = *(CFTypeRef **)(v15 + 8);
          if (*(CFTypeRef **)v15 != v36)
          {
            do
            {
              v37 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
              cf[1] = v37;
              applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)cf, "sample rate");
              v63[0] = *v35;
              v38 = CFNumberCreate(0, kCFNumberDoubleType, v63);
              if (!v38)
              {
                exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(exception, "Could not construct");
                __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v37, cf[0], v38);
              CFRelease(v38);
              if (cf[0])
                CFRelease(cf[0]);
              applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v63, "format id");
              LODWORD(cf[0]) = *((_DWORD *)v35 + 2);
              v39 = CFNumberCreate(0, kCFNumberIntType, cf);
              if (!v39)
              {
                v54 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v54, "Could not construct");
                __cxa_throw(v54, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v37, v63[0], v39);
              CFRelease(v39);
              if (v63[0])
                CFRelease(v63[0]);
              applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v63, "format flags");
              LODWORD(cf[0]) = *((_DWORD *)v35 + 3);
              v40 = CFNumberCreate(0, kCFNumberIntType, cf);
              if (!v40)
              {
                v55 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v55, "Could not construct");
                __cxa_throw(v55, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v37, v63[0], v40);
              CFRelease(v40);
              if (v63[0])
                CFRelease(v63[0]);
              applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v63, "bytes per packet");
              LODWORD(cf[0]) = *((_DWORD *)v35 + 4);
              v41 = CFNumberCreate(0, kCFNumberIntType, cf);
              if (!v41)
              {
                v56 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v56, "Could not construct");
                __cxa_throw(v56, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v37, v63[0], v41);
              CFRelease(v41);
              if (v63[0])
                CFRelease(v63[0]);
              applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v63, "frames per packet");
              LODWORD(cf[0]) = *((_DWORD *)v35 + 5);
              v42 = CFNumberCreate(0, kCFNumberIntType, cf);
              if (!v42)
              {
                v57 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v57, "Could not construct");
                __cxa_throw(v57, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v37, v63[0], v42);
              CFRelease(v42);
              if (v63[0])
                CFRelease(v63[0]);
              applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v63, "bytes per frame");
              LODWORD(cf[0]) = *((_DWORD *)v35 + 6);
              v43 = CFNumberCreate(0, kCFNumberIntType, cf);
              if (!v43)
              {
                v58 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v58, "Could not construct");
                __cxa_throw(v58, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v37, v63[0], v43);
              CFRelease(v43);
              if (v63[0])
                CFRelease(v63[0]);
              applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v63, "channels per frame");
              LODWORD(cf[0]) = *((_DWORD *)v35 + 7);
              v44 = CFNumberCreate(0, kCFNumberIntType, cf);
              if (!v44)
              {
                v59 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v59, "Could not construct");
                __cxa_throw(v59, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v37, v63[0], v44);
              CFRelease(v44);
              if (v63[0])
                CFRelease(v63[0]);
              applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v63, "bits per channel");
              LODWORD(cf[0]) = *((_DWORD *)v35 + 8);
              v45 = CFNumberCreate(0, kCFNumberIntType, cf);
              if (!v45)
              {
                v60 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v60, "Could not construct");
                __cxa_throw(v60, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v37, v63[0], v45);
              CFRelease(v45);
              if (v63[0])
                CFRelease(v63[0]);
              applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)cf, "minimum");
              v63[0] = v35[5];
              v46 = CFNumberCreate(0, kCFNumberDoubleType, v63);
              if (!v46)
              {
                v61 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v61, "Could not construct");
                __cxa_throw(v61, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v37, cf[0], v46);
              CFRelease(v46);
              if (cf[0])
                CFRelease(cf[0]);
              applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)cf, "maximum");
              v63[0] = v35[6];
              v47 = CFNumberCreate(0, kCFNumberDoubleType, v63);
              if (!v47)
              {
                v62 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v62, "Could not construct");
                __cxa_throw(v62, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v37, cf[0], v47);
              CFRelease(v47);
              if (cf[0])
                CFRelease(cf[0]);
              mcp_applesauce::CF::Dictionary_Builder::copy_dictionary((applesauce::CF::DictionaryRef *)v63, v37);
              mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::DictionaryRef>(Mutable, v63[0]);
              if (v63[0])
                CFRelease(v63[0]);
              if (v37)
                CFRelease(v37);
              v35 += 7;
            }
            while (v35 != v36);
          }
          mcp_applesauce::CF::Array_Builder::copy_array((applesauce::CF::ArrayRef *)v63, Mutable);
          v63[1] = 0;
          v64 = 0uLL;
          v65 = AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::dispatch;
          if (Mutable)
            CFRelease(Mutable);
          goto LABEL_100;
        }
      }
      __assert_rtn("create_vector_of_asrds_from", "Thing.h", 2005, "in_value_ptr != nullptr");
    default:
      return result;
  }
}

void sub_1B581CC78(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, int a18, __int16 a19, char a20,char a21)
{
  __clang_call_terminate(a1);
}

_QWORD *std::vector<AudioStreamRangedDescription>::__init_with_size[abi:ne180100]<AudioStreamRangedDescription*,AudioStreamRangedDescription*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<CA::RangedStreamDescription>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B581CE5C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *AMCP::Thing::convert_to<std::vector<AudioStreamRangedDescription>>(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  std::bad_cast *exception;
  std::bad_cast *v10;
  std::bad_cast *v11;
  std::bad_cast *v12;
  std::bad_cast *v13;
  std::bad_cast *v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[2];
  uint64_t (*v18)(uint64_t, _OWORD *, _QWORD, uint64_t *);
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, _QWORD, _QWORD);

  if (!*(_QWORD *)(a2 + 32))
    goto LABEL_12;
  v4 = AMCP::Implementation::get_type_marker<std::vector<AudioStreamRangedDescription>>();
  v5 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a2 + 32);
  v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))v4)
  {
    v19 = v4;
    v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (v6)
    {
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
      return std::vector<AudioStreamRangedDescription>::__init_with_size[abi:ne180100]<AudioStreamRangedDescription*,AudioStreamRangedDescription*>(a1, *(const void **)v6, *(_QWORD *)(v6 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 3));
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v16 = AMCP::Implementation::get_type_marker<std::vector<AudioStreamRangedDescription>>();
  memset(v17, 0, sizeof(v17));
  v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v15 = v4;
  v8 = v18(4, v17, 0, &v15);
  if (!v8)
  {
    v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = std::vector<AudioStreamRangedDescription>::__init_with_size[abi:ne180100]<AudioStreamRangedDescription*,AudioStreamRangedDescription*>(a1, *(const void **)v8, *(_QWORD *)(v8 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v8 + 8) - *(_QWORD *)v8) >> 3));
  if (v18)
    return (_QWORD *)v18(0, v17, 0, 0);
  return result;
}

void sub_1B581D040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

char *std::vector<CA::RangedStreamDescription>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x492492492492493)
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[56 * v4];
  return result;
}

uint64_t AMCP::Implementation::get_type_marker<std::vector<AudioStreamBasicDescription>>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return v1[135];
}

uint64_t AMCP::Implementation::get_type_marker<std::vector<CA::StreamDescription>>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return v1[137];
}

_QWORD *std::vector<CA::StreamDescription>::__init_with_size[abi:ne180100]<CA::StreamDescription*,CA::StreamDescription*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<CA::StreamDescription>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B581D1D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(unint64_t a1)
{
  if (a1 >= 0x666666666666667)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(40 * a1);
}

BOOL AMCP::Implementation::In_Place_Storage<std::vector<CA::StreamDescription>>::dispatch(_BOOL8 result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  void *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, _QWORD, CFTypeRef *);
  void (*v12)(uint64_t, uint64_t, _QWORD, _QWORD *);
  uint64_t *v13;
  AMCP::Thing *v14;
  uint64_t v15;
  void *v16;
  char *v17;
  void *v18;
  uint64_t v19;
  char *v20;
  _BOOL4 v21;
  char v22;
  char *v23;
  char *v24;
  unint64_t v25;
  char *v26;
  void *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __CFArray *Mutable;
  CFTypeRef *v34;
  CFTypeRef *v35;
  CFMutableDictionaryRef v36;
  CFNumberRef v37;
  CFNumberRef v38;
  CFNumberRef v39;
  CFNumberRef v40;
  CFNumberRef v41;
  CFNumberRef v42;
  CFNumberRef v43;
  CFNumberRef v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  std::runtime_error *exception;
  std::runtime_error *v51;
  std::runtime_error *v52;
  std::runtime_error *v53;
  std::runtime_error *v54;
  std::runtime_error *v55;
  std::runtime_error *v56;
  std::runtime_error *v57;
  CFTypeRef v58[2];
  __int128 v59;
  BOOL (*v60)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  _QWORD v61[3];
  CFTypeRef cf[2];

  switch(result)
  {
    case 0:
      v7 = *(void **)a2;
      if (*(_QWORD *)a2)
      {
        *(_QWORD *)(a2 + 8) = v7;
        operator delete(v7);
      }
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      v8 = 0uLL;
      goto LABEL_9;
    case 1:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      std::vector<CA::StreamDescription>::__init_with_size[abi:ne180100]<CA::StreamDescription*,CA::StreamDescription*>((_QWORD *)a3, *(const void **)a2, *(_QWORD *)(a2 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
      result = 0;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<CA::StreamDescription>>::dispatch;
      return result;
    case 2:
      result = 0;
      v8 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<CA::StreamDescription>>::dispatch;
      *(_QWORD *)(a2 + 32) = 0;
LABEL_9:
      *(_OWORD *)a2 = v8;
      *(_OWORD *)(a2 + 16) = v8;
      return result;
    case 3:
      v9 = AMCP::Implementation::get_type_marker<std::vector<CA::StreamDescription>>();
      result = 0;
      *a4 = v9;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::vector<CA::StreamDescription>>())
        return a2;
      else
        return 0;
    case 5:
      v10 = AMCP::Implementation::get_type_marker<std::vector<CA::StreamDescription>>();
      v11 = *(void (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(a2 + 32);
      v58[0] = 0;
      if (v11)
      {
        v11(3, a2, 0, v58);
        v11 = (void (*)(uint64_t, uint64_t, _QWORD, CFTypeRef *))v58[0];
      }
      if (v11 != (void (*)(uint64_t, uint64_t, _QWORD, CFTypeRef *))v10)
        goto LABEL_25;
      v12 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD *))(a3 + 32);
      v61[0] = 0;
      if (v12)
      {
        v12(3, a3, 0, v61);
        v12 = (void (*)(uint64_t, uint64_t, _QWORD, _QWORD *))v61[0];
      }
      if (v12 != (void (*)(uint64_t, uint64_t, _QWORD, _QWORD *))v10)
      {
LABEL_25:
        AMCP::Thing::convert_to<std::vector<CA::StreamDescription>>(v58, a2);
        AMCP::Thing::convert_to<std::vector<CA::StreamDescription>>(v61, a3);
        v16 = (void *)v58[0];
        v17 = (char *)v58[1];
        v18 = (void *)v61[0];
        if ((char *)v58[1] - (char *)v58[0] == v61[1] - v61[0])
        {
          if (v58[0] == v58[1])
          {
            v22 = 1;
            if (!v61[0])
            {
LABEL_34:
              if (v16)
                operator delete(v16);
              return (v22 & 1) != 0;
            }
LABEL_33:
            operator delete(v18);
            goto LABEL_34;
          }
          v19 = v61[0];
          v20 = (char *)v58[0];
          do
          {
            v21 = std::__equal_to::operator()[abi:ne180100]<CA::StreamDescription,CA::StreamDescription>((uint64_t)v20, v19);
            v22 = v21;
            if (!v21)
              break;
            v20 += 40;
            v19 += 40;
          }
          while (v20 != v17);
        }
        else
        {
          v22 = 0;
        }
        if (!v18)
          goto LABEL_34;
        goto LABEL_33;
      }
      if (*(_QWORD *)(a2 + 32))
      {
        v58[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<std::vector<CA::StreamDescription>>();
        v13 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(a2 + 32))(4, a2, 0, v58);
      }
      else
      {
        v13 = 0;
      }
      v58[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<std::vector<CA::StreamDescription>>();
      v45 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(a3 + 32))(4, a3, 0, v58);
      v46 = *v13;
      v47 = v13[1];
      v48 = v47 - *v13;
      v49 = *v45;
      if (v48 == v45[1] - *v45)
      {
        while (v46 != v47)
        {
          if (!std::__equal_to::operator()[abi:ne180100]<CA::StreamDescription,CA::StreamDescription>(v46, v49))
            return 0;
          v46 += 40;
          v49 += 40;
        }
        return 1;
      }
      return 0;
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<std::vector<AudioStreamBasicDescription>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<CA::StreamDescription>>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
      {
        goto LABEL_83;
      }
      if (*(_QWORD *)(a2 + 32))
      {
        v58[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<std::vector<CA::StreamDescription>>();
        v15 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(a2 + 32))(4, a2, 0, v58);
      }
      else
      {
        v15 = 0;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<std::vector<AudioStreamBasicDescription>>())
      {
        if (v15)
        {
          v24 = *(char **)v15;
          v23 = *(char **)(v15 + 8);
          if (v23 == v24)
          {
            v27 = 0;
            v32 = 0;
          }
          else
          {
            v25 = 0xCCCCCCCCCCCCCCCDLL * ((v23 - v24) >> 3);
            if (v25 >= 0x666666666666667)
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v25);
            v27 = v26;
            v28 = 0;
            do
            {
              v29 = &v26[v28];
              v30 = *(_OWORD *)&v24[v28];
              v31 = *(_OWORD *)&v24[v28 + 16];
              *((_QWORD *)v29 + 4) = *(_QWORD *)&v24[v28 + 32];
              *(_OWORD *)v29 = v30;
              *((_OWORD *)v29 + 1) = v31;
              v28 += 40;
            }
            while (&v24[v28] != v23);
            v32 = (uint64_t)&v26[v28];
          }
          v60 = 0;
          *(_OWORD *)v58 = 0u;
          v59 = 0u;
          std::vector<AudioStreamBasicDescription>::__init_with_size[abi:ne180100]<AudioStreamBasicDescription*,AudioStreamBasicDescription*>(v58, v27, v32, 0xCCCCCCCCCCCCCCCDLL * ((v32 - (uint64_t)v27) >> 3));
          v60 = AMCP::Implementation::In_Place_Storage<std::vector<AudioStreamBasicDescription>>::dispatch;
          if (v27)
            operator delete(v27);
          goto LABEL_87;
        }
LABEL_98:
        __assert_rtn("create_vector_of_asbds_from", "Thing.h", 1807, "in_value_ptr != nullptr");
      }
      if (*a4 == AMCP::Implementation::get_type_marker<std::vector<CA::StreamDescription>>())
      {
        if (!v15)
          goto LABEL_98;
        v60 = 0;
        *(_OWORD *)v58 = 0u;
        v59 = 0u;
        std::vector<CA::StreamDescription>::__init_with_size[abi:ne180100]<CA::StreamDescription*,CA::StreamDescription*>(v58, *(const void **)v15, *(_QWORD *)(v15 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v15 + 8) - *(_QWORD *)v15) >> 3));
        v60 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<std::vector<CA::StreamDescription>>::dispatch;
      }
      else
      {
        if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
        {
          if (v15)
          {
            Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B380]);
            v61[0] = Mutable;
            v34 = *(CFTypeRef **)v15;
            v35 = *(CFTypeRef **)(v15 + 8);
            if (*(CFTypeRef **)v15 != v35)
            {
              do
              {
                v36 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
                cf[1] = v36;
                applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)cf, "sample rate");
                v58[0] = *v34;
                v37 = CFNumberCreate(0, kCFNumberDoubleType, v58);
                if (!v37)
                {
                  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(exception, "Could not construct");
                  __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                }
                mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v36, cf[0], v37);
                CFRelease(v37);
                if (cf[0])
                  CFRelease(cf[0]);
                applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v58, "format id");
                LODWORD(cf[0]) = *((_DWORD *)v34 + 2);
                v38 = CFNumberCreate(0, kCFNumberIntType, cf);
                if (!v38)
                {
                  v51 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v51, "Could not construct");
                  __cxa_throw(v51, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                }
                mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v36, v58[0], v38);
                CFRelease(v38);
                if (v58[0])
                  CFRelease(v58[0]);
                applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v58, "format flags");
                LODWORD(cf[0]) = *((_DWORD *)v34 + 3);
                v39 = CFNumberCreate(0, kCFNumberIntType, cf);
                if (!v39)
                {
                  v52 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v52, "Could not construct");
                  __cxa_throw(v52, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                }
                mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v36, v58[0], v39);
                CFRelease(v39);
                if (v58[0])
                  CFRelease(v58[0]);
                applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v58, "bytes per packet");
                LODWORD(cf[0]) = *((_DWORD *)v34 + 4);
                v40 = CFNumberCreate(0, kCFNumberIntType, cf);
                if (!v40)
                {
                  v53 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v53, "Could not construct");
                  __cxa_throw(v53, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                }
                mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v36, v58[0], v40);
                CFRelease(v40);
                if (v58[0])
                  CFRelease(v58[0]);
                applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v58, "frames per packet");
                LODWORD(cf[0]) = *((_DWORD *)v34 + 5);
                v41 = CFNumberCreate(0, kCFNumberIntType, cf);
                if (!v41)
                {
                  v54 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v54, "Could not construct");
                  __cxa_throw(v54, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                }
                mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v36, v58[0], v41);
                CFRelease(v41);
                if (v58[0])
                  CFRelease(v58[0]);
                applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v58, "bytes per frame");
                LODWORD(cf[0]) = *((_DWORD *)v34 + 6);
                v42 = CFNumberCreate(0, kCFNumberIntType, cf);
                if (!v42)
                {
                  v55 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v55, "Could not construct");
                  __cxa_throw(v55, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                }
                mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v36, v58[0], v42);
                CFRelease(v42);
                if (v58[0])
                  CFRelease(v58[0]);
                applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v58, "channels per frame");
                LODWORD(cf[0]) = *((_DWORD *)v34 + 7);
                v43 = CFNumberCreate(0, kCFNumberIntType, cf);
                if (!v43)
                {
                  v56 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v56, "Could not construct");
                  __cxa_throw(v56, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                }
                mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v36, v58[0], v43);
                CFRelease(v43);
                if (v58[0])
                  CFRelease(v58[0]);
                applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v58, "bits per channel");
                LODWORD(cf[0]) = *((_DWORD *)v34 + 8);
                v44 = CFNumberCreate(0, kCFNumberIntType, cf);
                if (!v44)
                {
                  v57 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v57, "Could not construct");
                  __cxa_throw(v57, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                }
                mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v36, v58[0], v44);
                CFRelease(v44);
                if (v58[0])
                  CFRelease(v58[0]);
                mcp_applesauce::CF::Dictionary_Builder::copy_dictionary((applesauce::CF::DictionaryRef *)v58, v36);
                mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::DictionaryRef>(Mutable, v58[0]);
                if (v58[0])
                  CFRelease(v58[0]);
                if (v36)
                  CFRelease(v36);
                v34 += 5;
              }
              while (v34 != v35);
            }
            mcp_applesauce::CF::Array_Builder::copy_array((applesauce::CF::ArrayRef *)v58, Mutable);
            v58[1] = 0;
            v59 = 0uLL;
            v60 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::dispatch;
            if (Mutable)
              CFRelease(Mutable);
            goto LABEL_87;
          }
          goto LABEL_98;
        }
LABEL_83:
        v60 = 0;
        *(_OWORD *)v58 = 0u;
        v59 = 0u;
      }
LABEL_87:
      AMCP::swap((AMCP::Thing *)v58, (AMCP::Thing *)a3, v14);
      if (v60)
        v60(0, (uint64_t)v58, 0, 0);
      return 0;
    default:
      return result;
  }
}

void sub_1B581DBF4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;

  if (v21)
    operator delete(v21);
  __clang_call_terminate(a1);
}

BOOL std::__equal_to::operator()[abi:ne180100]<CA::StreamDescription,CA::StreamDescription>(uint64_t a1, uint64_t a2)
{
  return *(double *)a1 == *(double *)a2
      && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
      && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
      && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16)
      && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20)
      && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)
      && *(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 28)
      && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32);
}

_QWORD *AMCP::Thing::convert_to<std::vector<CA::StreamDescription>>(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  std::bad_cast *exception;
  std::bad_cast *v10;
  std::bad_cast *v11;
  std::bad_cast *v12;
  std::bad_cast *v13;
  std::bad_cast *v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[2];
  uint64_t (*v18)(uint64_t, _OWORD *, _QWORD, uint64_t *);
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, _QWORD, _QWORD);

  if (!*(_QWORD *)(a2 + 32))
    goto LABEL_12;
  v4 = AMCP::Implementation::get_type_marker<std::vector<CA::StreamDescription>>();
  v5 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a2 + 32);
  v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))v4)
  {
    v19 = v4;
    v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (v6)
    {
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
      return std::vector<CA::StreamDescription>::__init_with_size[abi:ne180100]<CA::StreamDescription*,CA::StreamDescription*>(a1, *(const void **)v6, *(_QWORD *)(v6 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 3));
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v16 = AMCP::Implementation::get_type_marker<std::vector<CA::StreamDescription>>();
  memset(v17, 0, sizeof(v17));
  v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v15 = v4;
  v8 = v18(4, v17, 0, &v15);
  if (!v8)
  {
    v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = std::vector<CA::StreamDescription>::__init_with_size[abi:ne180100]<CA::StreamDescription*,CA::StreamDescription*>(a1, *(const void **)v8, *(_QWORD *)(v8 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v8 + 8) - *(_QWORD *)v8) >> 3));
  if (v18)
    return (_QWORD *)v18(0, v17, 0, 0);
  return result;
}

void sub_1B581DFA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<AudioStreamBasicDescription>::__init_with_size[abi:ne180100]<AudioStreamBasicDescription*,AudioStreamBasicDescription*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<CA::StreamDescription>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B581E01C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL AMCP::Implementation::In_Place_Storage<std::vector<AudioStreamBasicDescription>>::dispatch(_BOOL8 result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  void *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, _QWORD, CFTypeRef *);
  void (*v12)(uint64_t, uint64_t, _QWORD, _QWORD *);
  uint64_t *v13;
  AMCP::Thing *v14;
  uint64_t v15;
  void *v16;
  char *v17;
  void *v18;
  uint64_t v19;
  char *v20;
  _BOOL4 v21;
  char v22;
  char *v23;
  char *v24;
  unint64_t v25;
  char *v26;
  void *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __CFArray *Mutable;
  CFTypeRef *v34;
  CFTypeRef *v35;
  CFMutableDictionaryRef v36;
  CFNumberRef v37;
  CFNumberRef v38;
  CFNumberRef v39;
  CFNumberRef v40;
  CFNumberRef v41;
  CFNumberRef v42;
  CFNumberRef v43;
  CFNumberRef v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  std::runtime_error *exception;
  std::runtime_error *v51;
  std::runtime_error *v52;
  std::runtime_error *v53;
  std::runtime_error *v54;
  std::runtime_error *v55;
  std::runtime_error *v56;
  std::runtime_error *v57;
  CFTypeRef v58[2];
  __int128 v59;
  uint64_t (*v60)();
  _QWORD v61[3];
  CFTypeRef cf[2];

  switch(result)
  {
    case 0:
      v7 = *(void **)a2;
      if (*(_QWORD *)a2)
      {
        *(_QWORD *)(a2 + 8) = v7;
        operator delete(v7);
      }
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      v8 = 0uLL;
      goto LABEL_9;
    case 1:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      std::vector<AudioStreamBasicDescription>::__init_with_size[abi:ne180100]<AudioStreamBasicDescription*,AudioStreamBasicDescription*>((_QWORD *)a3, *(const void **)a2, *(_QWORD *)(a2 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
      result = 0;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<AudioStreamBasicDescription>>::dispatch;
      return result;
    case 2:
      result = 0;
      v8 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<AudioStreamBasicDescription>>::dispatch;
      *(_QWORD *)(a2 + 32) = 0;
LABEL_9:
      *(_OWORD *)a2 = v8;
      *(_OWORD *)(a2 + 16) = v8;
      return result;
    case 3:
      v9 = AMCP::Implementation::get_type_marker<std::vector<AudioStreamBasicDescription>>();
      result = 0;
      *a4 = v9;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::vector<AudioStreamBasicDescription>>())
        return a2;
      else
        return 0;
    case 5:
      v10 = AMCP::Implementation::get_type_marker<std::vector<AudioStreamBasicDescription>>();
      v11 = *(void (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(a2 + 32);
      v58[0] = 0;
      if (v11)
      {
        v11(3, a2, 0, v58);
        v11 = (void (*)(uint64_t, uint64_t, _QWORD, CFTypeRef *))v58[0];
      }
      if (v11 != (void (*)(uint64_t, uint64_t, _QWORD, CFTypeRef *))v10)
        goto LABEL_25;
      v12 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD *))(a3 + 32);
      v61[0] = 0;
      if (v12)
      {
        v12(3, a3, 0, v61);
        v12 = (void (*)(uint64_t, uint64_t, _QWORD, _QWORD *))v61[0];
      }
      if (v12 != (void (*)(uint64_t, uint64_t, _QWORD, _QWORD *))v10)
      {
LABEL_25:
        AMCP::Thing::convert_to<std::vector<AudioStreamBasicDescription>>(v58, a2);
        AMCP::Thing::convert_to<std::vector<AudioStreamBasicDescription>>(v61, a3);
        v16 = (void *)v58[0];
        v17 = (char *)v58[1];
        v18 = (void *)v61[0];
        if ((char *)v58[1] - (char *)v58[0] == v61[1] - v61[0])
        {
          if (v58[0] == v58[1])
          {
            v22 = 1;
            if (!v61[0])
            {
LABEL_34:
              if (v16)
                operator delete(v16);
              return (v22 & 1) != 0;
            }
LABEL_33:
            operator delete(v18);
            goto LABEL_34;
          }
          v19 = v61[0];
          v20 = (char *)v58[0];
          do
          {
            v21 = std::__equal_to::operator()[abi:ne180100]<CA::StreamDescription,CA::StreamDescription>((uint64_t)v20, v19);
            v22 = v21;
            if (!v21)
              break;
            v20 += 40;
            v19 += 40;
          }
          while (v20 != v17);
        }
        else
        {
          v22 = 0;
        }
        if (!v18)
          goto LABEL_34;
        goto LABEL_33;
      }
      if (*(_QWORD *)(a2 + 32))
      {
        v58[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<std::vector<AudioStreamBasicDescription>>();
        v13 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(a2 + 32))(4, a2, 0, v58);
      }
      else
      {
        v13 = 0;
      }
      v58[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<std::vector<AudioStreamBasicDescription>>();
      v45 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(a3 + 32))(4, a3, 0, v58);
      v46 = *v13;
      v47 = v13[1];
      v48 = v47 - *v13;
      v49 = *v45;
      if (v48 == v45[1] - *v45)
      {
        while (v46 != v47)
        {
          if (!std::__equal_to::operator()[abi:ne180100]<CA::StreamDescription,CA::StreamDescription>(v46, v49))
            return 0;
          v46 += 40;
          v49 += 40;
        }
        return 1;
      }
      return 0;
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<std::vector<AudioStreamBasicDescription>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<CA::StreamDescription>>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
      {
        goto LABEL_83;
      }
      if (*(_QWORD *)(a2 + 32))
      {
        v58[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<std::vector<AudioStreamBasicDescription>>();
        v15 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(a2 + 32))(4, a2, 0, v58);
      }
      else
      {
        v15 = 0;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<std::vector<AudioStreamBasicDescription>>())
      {
        if (v15)
        {
          v60 = 0;
          *(_OWORD *)v58 = 0u;
          v59 = 0u;
          std::vector<AudioStreamBasicDescription>::__init_with_size[abi:ne180100]<AudioStreamBasicDescription*,AudioStreamBasicDescription*>(v58, *(const void **)v15, *(_QWORD *)(v15 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v15 + 8) - *(_QWORD *)v15) >> 3));
          v60 = AMCP::Implementation::In_Place_Storage<std::vector<AudioStreamBasicDescription>>::dispatch;
          goto LABEL_94;
        }
      }
      else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<CA::StreamDescription>>())
      {
        if (v15)
        {
          v24 = *(char **)v15;
          v23 = *(char **)(v15 + 8);
          if (v23 == v24)
          {
            v27 = 0;
            v32 = 0;
          }
          else
          {
            v25 = 0xCCCCCCCCCCCCCCCDLL * ((v23 - v24) >> 3);
            if (v25 >= 0x666666666666667)
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v25);
            v27 = v26;
            v28 = 0;
            do
            {
              v29 = &v26[v28];
              v30 = *(_OWORD *)&v24[v28];
              v31 = *(_OWORD *)&v24[v28 + 16];
              *((_QWORD *)v29 + 4) = *(_QWORD *)&v24[v28 + 32];
              *(_OWORD *)v29 = v30;
              *((_OWORD *)v29 + 1) = v31;
              v28 += 40;
            }
            while (&v24[v28] != v23);
            v32 = (uint64_t)&v26[v28];
          }
          v60 = 0;
          *(_OWORD *)v58 = 0u;
          v59 = 0u;
          std::vector<CA::StreamDescription>::__init_with_size[abi:ne180100]<CA::StreamDescription*,CA::StreamDescription*>(v58, v27, v32, 0xCCCCCCCCCCCCCCCDLL * ((v32 - (uint64_t)v27) >> 3));
          v60 = AMCP::Implementation::In_Place_Storage<std::vector<CA::StreamDescription>>::dispatch;
          if (v27)
            operator delete(v27);
          goto LABEL_94;
        }
      }
      else
      {
        if (*a4 != AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
        {
LABEL_83:
          v60 = 0;
          *(_OWORD *)v58 = 0u;
          v59 = 0u;
LABEL_94:
          AMCP::swap((AMCP::Thing *)v58, (AMCP::Thing *)a3, v14);
          if (v60)
            ((void (*)(_QWORD, CFTypeRef *, _QWORD, _QWORD))v60)(0, v58, 0, 0);
          return 0;
        }
        if (v15)
        {
          Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B380]);
          v61[0] = Mutable;
          v34 = *(CFTypeRef **)v15;
          v35 = *(CFTypeRef **)(v15 + 8);
          if (*(CFTypeRef **)v15 != v35)
          {
            do
            {
              v36 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
              cf[1] = v36;
              applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)cf, "sample rate");
              v58[0] = *v34;
              v37 = CFNumberCreate(0, kCFNumberDoubleType, v58);
              if (!v37)
              {
                exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(exception, "Could not construct");
                __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v36, cf[0], v37);
              CFRelease(v37);
              if (cf[0])
                CFRelease(cf[0]);
              applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v58, "format id");
              LODWORD(cf[0]) = *((_DWORD *)v34 + 2);
              v38 = CFNumberCreate(0, kCFNumberIntType, cf);
              if (!v38)
              {
                v51 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v51, "Could not construct");
                __cxa_throw(v51, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v36, v58[0], v38);
              CFRelease(v38);
              if (v58[0])
                CFRelease(v58[0]);
              applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v58, "format flags");
              LODWORD(cf[0]) = *((_DWORD *)v34 + 3);
              v39 = CFNumberCreate(0, kCFNumberIntType, cf);
              if (!v39)
              {
                v52 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v52, "Could not construct");
                __cxa_throw(v52, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v36, v58[0], v39);
              CFRelease(v39);
              if (v58[0])
                CFRelease(v58[0]);
              applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v58, "bytes per packet");
              LODWORD(cf[0]) = *((_DWORD *)v34 + 4);
              v40 = CFNumberCreate(0, kCFNumberIntType, cf);
              if (!v40)
              {
                v53 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v53, "Could not construct");
                __cxa_throw(v53, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v36, v58[0], v40);
              CFRelease(v40);
              if (v58[0])
                CFRelease(v58[0]);
              applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v58, "frames per packet");
              LODWORD(cf[0]) = *((_DWORD *)v34 + 5);
              v41 = CFNumberCreate(0, kCFNumberIntType, cf);
              if (!v41)
              {
                v54 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v54, "Could not construct");
                __cxa_throw(v54, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v36, v58[0], v41);
              CFRelease(v41);
              if (v58[0])
                CFRelease(v58[0]);
              applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v58, "bytes per frame");
              LODWORD(cf[0]) = *((_DWORD *)v34 + 6);
              v42 = CFNumberCreate(0, kCFNumberIntType, cf);
              if (!v42)
              {
                v55 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v55, "Could not construct");
                __cxa_throw(v55, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v36, v58[0], v42);
              CFRelease(v42);
              if (v58[0])
                CFRelease(v58[0]);
              applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v58, "channels per frame");
              LODWORD(cf[0]) = *((_DWORD *)v34 + 7);
              v43 = CFNumberCreate(0, kCFNumberIntType, cf);
              if (!v43)
              {
                v56 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v56, "Could not construct");
                __cxa_throw(v56, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v36, v58[0], v43);
              CFRelease(v43);
              if (v58[0])
                CFRelease(v58[0]);
              applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v58, "bits per channel");
              LODWORD(cf[0]) = *((_DWORD *)v34 + 8);
              v44 = CFNumberCreate(0, kCFNumberIntType, cf);
              if (!v44)
              {
                v57 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v57, "Could not construct");
                __cxa_throw(v57, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v36, v58[0], v44);
              CFRelease(v44);
              if (v58[0])
                CFRelease(v58[0]);
              mcp_applesauce::CF::Dictionary_Builder::copy_dictionary((applesauce::CF::DictionaryRef *)v58, v36);
              mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::DictionaryRef>(Mutable, v58[0]);
              if (v58[0])
                CFRelease(v58[0]);
              if (v36)
                CFRelease(v36);
              v34 += 5;
            }
            while (v34 != v35);
          }
          mcp_applesauce::CF::Array_Builder::copy_array((applesauce::CF::ArrayRef *)v58, Mutable);
          v58[1] = 0;
          v59 = 0uLL;
          v60 = AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::dispatch;
          if (Mutable)
            CFRelease(Mutable);
          goto LABEL_94;
        }
      }
      __assert_rtn("create_vector_of_asbds_from", "Thing.h", 1807, "in_value_ptr != nullptr");
    default:
      return result;
  }
}

void sub_1B581E9F0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;

  if (v21)
    operator delete(v21);
  __clang_call_terminate(a1);
}

_QWORD *AMCP::Thing::convert_to<std::vector<AudioStreamBasicDescription>>(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  std::bad_cast *exception;
  std::bad_cast *v10;
  std::bad_cast *v11;
  std::bad_cast *v12;
  std::bad_cast *v13;
  std::bad_cast *v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[2];
  uint64_t (*v18)(uint64_t, _OWORD *, _QWORD, uint64_t *);
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, _QWORD, _QWORD);

  if (!*(_QWORD *)(a2 + 32))
    goto LABEL_12;
  v4 = AMCP::Implementation::get_type_marker<std::vector<AudioStreamBasicDescription>>();
  v5 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a2 + 32);
  v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))v4)
  {
    v19 = v4;
    v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (v6)
    {
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
      return std::vector<AudioStreamBasicDescription>::__init_with_size[abi:ne180100]<AudioStreamBasicDescription*,AudioStreamBasicDescription*>(a1, *(const void **)v6, *(_QWORD *)(v6 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 3));
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v16 = AMCP::Implementation::get_type_marker<std::vector<AudioStreamBasicDescription>>();
  memset(v17, 0, sizeof(v17));
  v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v15 = v4;
  v8 = v18(4, v17, 0, &v15);
  if (!v8)
  {
    v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = std::vector<AudioStreamBasicDescription>::__init_with_size[abi:ne180100]<AudioStreamBasicDescription*,AudioStreamBasicDescription*>(a1, *(const void **)v8, *(_QWORD *)(v8 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v8 + 8) - *(_QWORD *)v8) >> 3));
  if (v18)
    return (_QWORD *)v18(0, v17, 0, 0);
  return result;
}

void sub_1B581ED18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

char *std::vector<CA::StreamDescription>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x666666666666667)
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[40 * v4];
  return result;
}

uint64_t AMCP::Implementation::get_type_marker<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return v1[133];
}

_QWORD *std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__init_with_size[abi:ne180100]<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>*,std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  if (a4)
  {
    if (a4 >> 60)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = result;
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(a4);
    v7 = result;
    *v6 = result;
    v6[1] = result;
    v6[2] = &result[2 * v8];
    while (a2 != a3)
    {
      *(_DWORD *)v7 = *(_DWORD *)a2;
      *((_DWORD *)v7 + 1) = *(_DWORD *)(a2 + 4);
      result = std::__tuple_leaf<2ul,applesauce::CF::StringRef,false>::__tuple_leaf[abi:ne180100](v7 + 1, *(CFTypeRef *)(a2 + 8));
      v7 += 2;
      a2 += 16;
    }
    v6[1] = v7;
  }
  return result;
}

void sub_1B581EE84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::emplace_back<unsigned int &,unsigned int &,applesauce::CF::StringRef&>(uint64_t *a1, _DWORD *a2, _DWORD *a3, CFTypeRef *a4)
{
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD v19[5];

  v8 = a1 + 2;
  v9 = a1[2];
  v10 = a1[1];
  if (v10 >= v9)
  {
    v13 = (uint64_t)(v10 - *a1) >> 4;
    if ((unint64_t)(v13 + 1) >> 60)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v14 = v9 - *a1;
    v15 = v14 >> 3;
    if (v14 >> 3 <= (unint64_t)(v13 + 1))
      v15 = v13 + 1;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v16 = 0xFFFFFFFFFFFFFFFLL;
    else
      v16 = v15;
    v19[4] = v8;
    if (v16)
      v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v16);
    else
      v17 = 0;
    v18 = v16 + 16 * v13;
    v19[0] = v16;
    v19[1] = v18;
    v19[3] = v16 + 16 * v17;
    *(_DWORD *)v18 = *a2;
    *(_DWORD *)(v18 + 4) = *a3;
    std::__tuple_leaf<2ul,applesauce::CF::StringRef,false>::__tuple_leaf[abi:ne180100]<applesauce::CF::StringRef&,void>((_QWORD *)(v18 + 8), *a4);
    v19[2] = v18 + 16;
    std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__swap_out_circular_buffer(a1, v19);
    v12 = a1[1];
    result = std::__split_buffer<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::~__split_buffer((uint64_t)v19);
  }
  else
  {
    *(_DWORD *)v10 = *a2;
    *(_DWORD *)(v10 + 4) = *a3;
    result = (uint64_t)std::__tuple_leaf<2ul,applesauce::CF::StringRef,false>::__tuple_leaf[abi:ne180100]<applesauce::CF::StringRef&,void>((_QWORD *)(v10 + 8), *a4);
    v12 = v10 + 16;
  }
  a1[1] = v12;
  return result;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>::dispatch(int a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t *, _QWORD, __int128 *);
  void **v10;
  _QWORD *v11;
  AMCP::Thing *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  void **v18;
  void **Mutable;
  uint64_t v20;
  uint64_t v21;
  const CFDictionaryValueCallBacks *v22;
  __CFDictionary *v23;
  CFNumberRef v24;
  CFNumberRef v25;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v33;
  std::runtime_error *exception;
  std::runtime_error *v35;
  __int128 v36;
  __int128 v37;
  uint64_t (*v38)();
  void **v39[3];
  CFTypeRef cf;
  int valuePtr;

  switch(a1)
  {
    case 0:
      goto LABEL_7;
    case 1:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__init_with_size[abi:ne180100]<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>*,std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>*>((_QWORD *)a3, *a2, a2[1], (a2[1] - *a2) >> 4);
      v4 = 0;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>::dispatch;
      return v4;
    case 2:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(_QWORD *)(a3 + 16) = a2[2];
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>::dispatch;
LABEL_7:
      *(_QWORD *)&v36 = a2;
      std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
      v4 = 0;
      a2[4] = 0;
      *(_OWORD *)a2 = 0u;
      *((_OWORD *)a2 + 1) = 0u;
      return v4;
    case 3:
      v4 = 0;
      *a4 = AMCP::Implementation::get_type_marker<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>();
      return v4;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>())
        return (uint64_t)a2;
      else
        return 0;
    case 5:
      v8 = AMCP::Implementation::get_type_marker<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>();
      v9 = (void (*)(uint64_t, uint64_t *, _QWORD, __int128 *))a2[4];
      *(_QWORD *)&v36 = 0;
      if (v9)
      {
        v9(3, a2, 0, &v36);
        v9 = (void (*)(uint64_t, uint64_t *, _QWORD, __int128 *))v36;
      }
      if (v9 != (void (*)(uint64_t, uint64_t *, _QWORD, __int128 *))v8)
        goto LABEL_21;
      v10 = *(void ***)(a3 + 32);
      v39[0] = 0;
      if (v10)
      {
        ((void (*)(uint64_t, uint64_t, _QWORD, void ***))v10)(3, a3, 0, v39);
        v10 = v39[0];
      }
      if (v10 != (void **)v8)
      {
LABEL_21:
        AMCP::Thing::convert_to<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(&v36, (uint64_t)a2);
        AMCP::Thing::convert_to<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(v39, a3);
        v14 = *((_QWORD *)&v36 + 1);
        v15 = v36;
        v16 = v39[0];
        if ((void **)(*((_QWORD *)&v36 + 1) - v36) != (void **)((char *)v39[1] - (char *)v39[0]))
        {
LABEL_30:
          cf = v39;
          std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__destroy_vector::operator()[abi:ne180100]((void ***)&cf);
          v39[0] = (void **)&v36;
          std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__destroy_vector::operator()[abi:ne180100](v39);
          return 0;
        }
        while (v15 != v14)
        {
          if (*(_DWORD *)v15 != *(_DWORD *)v16 || *(_DWORD *)(v15 + 4) != *((_DWORD *)v16 + 1))
            goto LABEL_30;
          v18 = v16 + 1;
          if (applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*(const __CFString **)(v15 + 8), (const __CFString **)v16 + 1))
          {
            goto LABEL_30;
          }
          v15 += 16;
          v16 = v18 + 1;
        }
        cf = v39;
        std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__destroy_vector::operator()[abi:ne180100]((void ***)&cf);
        v39[0] = (void **)&v36;
        std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__destroy_vector::operator()[abi:ne180100](v39);
        return 1;
      }
      if (a2[4])
      {
        *(_QWORD *)&v36 = AMCP::Implementation::get_type_marker<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>();
        v11 = (_QWORD *)((uint64_t (*)(uint64_t, uint64_t *, _QWORD, __int128 *))a2[4])(4, a2, 0, &v36);
      }
      else
      {
        v11 = 0;
      }
      *(_QWORD *)&v36 = AMCP::Implementation::get_type_marker<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>();
      v27 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a3 + 32))(4, a3, 0, &v36);
      v30 = v11;
      v28 = *v11;
      v29 = v30[1];
      v31 = *v27;
      if (v29 - v28 == v27[1] - *v27)
      {
        if (v28 != v29)
        {
          v4 = 1;
          while (*(_DWORD *)v28 == *(_DWORD *)v31 && *(_DWORD *)(v28 + 4) == *(_DWORD *)(v31 + 4))
          {
            v33 = v31 + 8;
            if (applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*(const __CFString **)(v28 + 8), (const __CFString **)(v31 + 8)))
            {
              break;
            }
            v28 += 16;
            v31 = v33 + 8;
            if (v28 == v29)
              return v4;
          }
          return 0;
        }
        return 1;
      }
      return 0;
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
      {
        goto LABEL_54;
      }
      if (a2[4])
      {
        *(_QWORD *)&v36 = AMCP::Implementation::get_type_marker<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>();
        v13 = (uint64_t *)((uint64_t (*)(uint64_t, uint64_t *, _QWORD, __int128 *))a2[4])(4, a2, 0, &v36);
      }
      else
      {
        v13 = 0;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>())
      {
        if (v13)
        {
          v38 = 0;
          v36 = 0u;
          v37 = 0u;
          std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__init_with_size[abi:ne180100]<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>*,std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>*>(&v36, *v13, v13[1], (v13[1] - *v13) >> 4);
          v38 = AMCP::Implementation::In_Place_Storage<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>::dispatch;
          goto LABEL_55;
        }
LABEL_73:
        __assert_rtn("create_vector_of_selector_items_from", "Thing.h", 1426, "in_value_ptr != nullptr");
      }
      if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
      {
        if (v13)
        {
          Mutable = (void **)CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B380]);
          v39[0] = Mutable;
          v21 = *v13;
          v20 = v13[1];
          if (*v13 != v20)
          {
            v22 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A8];
            do
            {
              v23 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], v22);
              *(_QWORD *)&v36 = v23;
              applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "item id");
              valuePtr = *(_DWORD *)v21;
              v24 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
              if (!v24)
              {
                exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(exception, "Could not construct");
                __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v23, cf, v24);
              CFRelease(v24);
              if (cf)
                CFRelease(cf);
              applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "kind");
              valuePtr = *(_DWORD *)(v21 + 4);
              v25 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
              if (!v25)
              {
                v35 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v35, "Could not construct");
                __cxa_throw(v35, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v23, cf, v25);
              CFRelease(v25);
              if (cf)
                CFRelease(cf);
              applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "name");
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::StringRef>(v23, cf, *(const void **)(v21 + 8));
              if (cf)
                CFRelease(cf);
              mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&cf, v23);
              mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::DictionaryRef>((__CFArray *)Mutable, cf);
              if (cf)
                CFRelease(cf);
              if (v23)
                CFRelease(v23);
              v21 += 16;
            }
            while (v21 != v20);
          }
          mcp_applesauce::CF::Array_Builder::copy_array((applesauce::CF::ArrayRef *)&v36, (const __CFArray *)Mutable);
          *((_QWORD *)&v36 + 1) = 0;
          v37 = 0uLL;
          v38 = AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::dispatch;
          if (Mutable)
            CFRelease(Mutable);
          goto LABEL_55;
        }
        goto LABEL_73;
      }
LABEL_54:
      v38 = 0;
      v36 = 0u;
      v37 = 0u;
LABEL_55:
      AMCP::swap((AMCP::Thing *)&v36, (AMCP::Thing *)a3, v12);
      if (v38)
        ((void (*)(_QWORD, __int128 *, _QWORD, _QWORD))v38)(0, &v36, 0, 0);
      return 0;
    default:
      return v4;
  }
}

void sub_1B581F5B8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a9;
  std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__destroy_vector::operator()[abi:ne180100](&a14);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B581F43CLL);
}

void sub_1B581F5E4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, const void *a14, uint64_t a15, uint64_t a16, const void *a17)
{
  applesauce::CF::StringRef::~StringRef(&a17);
  mcp_applesauce::CF::Dictionary_Builder::~Dictionary_Builder(&a9);
  mcp_applesauce::CF::Array_Builder::~Array_Builder(&a14);
  __clang_call_terminate(a1);
}

void std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  const void **v2;
  const void **v4;
  void *v5;
  const void **v6;

  v1 = *a1;
  v2 = (const void **)**a1;
  if (v2)
  {
    v4 = (const void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 2;
        std::__destroy_at[abi:ne180100]<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>,0>(*(v4 - 1));
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__destroy_at[abi:ne180100]<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>,0>(const void *a1)
{
  if (a1)
    CFRelease(a1);
}

_QWORD *AMCP::Thing::convert_to<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t *v6;
  _QWORD *result;
  uint64_t *v8;
  std::bad_cast *exception;
  std::bad_cast *v10;
  std::bad_cast *v11;
  std::bad_cast *v12;
  std::bad_cast *v13;
  std::bad_cast *v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[2];
  uint64_t (*v18)(uint64_t, _OWORD *, _QWORD, uint64_t *);
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, _QWORD, _QWORD);

  if (!*(_QWORD *)(a2 + 32))
    goto LABEL_12;
  v4 = AMCP::Implementation::get_type_marker<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>();
  v5 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a2 + 32);
  v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))v4)
  {
    v19 = v4;
    v6 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (v6)
    {
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
      return std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__init_with_size[abi:ne180100]<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>*,std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>*>(a1, *v6, v6[1], (v6[1] - *v6) >> 4);
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v16 = AMCP::Implementation::get_type_marker<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>();
  memset(v17, 0, sizeof(v17));
  v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v15 = v4;
  v8 = (uint64_t *)v18(4, v17, 0, &v15);
  if (!v8)
  {
    v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__init_with_size[abi:ne180100]<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>*,std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>*>(a1, *v8, v8[1], (v8[1] - *v8) >> 4);
  if (v18)
    return (_QWORD *)v18(0, v17, 0, 0);
  return result;
}

void sub_1B581F894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__tuple_leaf<2ul,applesauce::CF::StringRef,false>::__tuple_leaf[abi:ne180100]<applesauce::CF::StringRef&,void>(_QWORD *a1, CFTypeRef cf)
{
  if (cf)
    CFRetain(cf);
  *a1 = cf;
  return a1;
}

uint64_t *std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    v5 = *(_DWORD *)(v2 - 16);
    v2 -= 16;
    *(_DWORD *)(v4 - 16) = v5;
    v4 -= 16;
    *(_DWORD *)(v4 + 4) = *(_DWORD *)(v2 + 4);
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(v2 + 8);
    *(_QWORD *)(v2 + 8) = 0;
  }
  a2[1] = v4;
  v6 = *result;
  *result = v4;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    std::__destroy_at[abi:ne180100]<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>,0>(*(const void **)(i - 8));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t AMCP::Implementation::get_type_marker<std::vector<std::string>>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return v1[131];
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1B581FA70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *applesauce::CF::convert_to<std::string,0>(uint64_t a1, const __CFString *a2)
{
  CFTypeID TypeID;
  std::runtime_error *exception;

  if (!a2 || (TypeID = CFStringGetTypeID(), TypeID != CFGetTypeID(a2)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return applesauce::CF::details::CFString_get_value<true>(a1, a2);
}

void sub_1B581FB04(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(unint64_t a1)
{
  if (a1 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a1);
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::string *v4;
  std::string *begin;
  std::string *end;
  std::string *value;

  v4 = (std::string *)std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::pointer end;
  std::__split_buffer<std::string>::pointer begin;
  std::__split_buffer<std::string>::pointer v4;

  begin = this->__begin_;
  end = this->__end_;
  if (end != begin)
  {
    do
    {
      v4 = end - 1;
      this->__end_ = end - 1;
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v4->__r_.__value_.__l.__data_);
        v4 = this->__end_;
      }
      end = v4;
    }
    while (v4 != begin);
  }
  if (this->__first_)
    operator delete(this->__first_);
}

uint64_t AMCP::Implementation::In_Place_Storage<std::vector<std::string>>::dispatch(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, _QWORD, __int128 *);
  void (*v10)(uint64_t, uint64_t, _QWORD, std::string *);
  uint64_t v11;
  AMCP::Thing *v12;
  __int128 **v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  _BOOL4 v17;
  BOOL v18;
  __CFArray *Mutable;
  __int128 *v20;
  __int128 *v21;
  int v22;
  const UInt8 *v23;
  CFIndex v24;
  CFStringRef v25;
  uint64_t v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  std::runtime_error *exception;
  __int128 v32;
  __int128 v33;
  uint64_t (*v34)();
  std::string v35;
  std::string *v36;

  switch((int)result)
  {
    case 0:
      goto LABEL_7;
    case 1:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)a3, *(__int128 **)a2, *(__int128 **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
      result = 0;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<std::string>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<std::string>>::dispatch;
LABEL_7:
      *(_QWORD *)&v32 = a2;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      v7 = AMCP::Implementation::get_type_marker<std::vector<std::string>>();
      result = 0;
      *a4 = v7;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::vector<std::string>>())
        return a2;
      else
        return 0;
    case 5:
      v8 = AMCP::Implementation::get_type_marker<std::vector<std::string>>();
      v9 = *(void (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32);
      *(_QWORD *)&v32 = 0;
      if (v9)
      {
        v9(3, a2, 0, &v32);
        v9 = (void (*)(uint64_t, uint64_t, _QWORD, __int128 *))v32;
      }
      if (v9 != (void (*)(uint64_t, uint64_t, _QWORD, __int128 *))v8)
        goto LABEL_21;
      v10 = *(void (**)(uint64_t, uint64_t, _QWORD, std::string *))(a3 + 32);
      v35.__r_.__value_.__r.__words[0] = 0;
      if (v10)
      {
        v10(3, a3, 0, &v35);
        v10 = (void (*)(uint64_t, uint64_t, _QWORD, std::string *))v35.__r_.__value_.__r.__words[0];
      }
      if (v10 == (void (*)(uint64_t, uint64_t, _QWORD, std::string *))v8)
      {
        if (*(_QWORD *)(a2 + 32))
        {
          *(_QWORD *)&v32 = AMCP::Implementation::get_type_marker<std::vector<std::string>>();
          v11 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32))(4, a2, 0, &v32);
        }
        else
        {
          v11 = 0;
        }
        *(_QWORD *)&v32 = AMCP::Implementation::get_type_marker<std::vector<std::string>>();
        v26 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a3 + 32))(4, a3, 0, &v32);
        v27 = *(unsigned __int8 **)v11;
        v28 = *(unsigned __int8 **)(v11 + 8);
        v29 = &v28[-*(_QWORD *)v11];
        v30 = *(unsigned __int8 **)v26;
        if (v29 == (unsigned __int8 *)(*(_QWORD *)(v26 + 8) - *(_QWORD *)v26))
        {
          while (v27 != v28)
          {
            if (!std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(v27, v30))
              return 0;
            v27 += 24;
            v30 += 24;
          }
          return 1;
        }
      }
      else
      {
LABEL_21:
        AMCP::Thing::convert_to<std::vector<std::string>>((std::string *)&v32, a2);
        AMCP::Thing::convert_to<std::vector<std::string>>(&v35, a3);
        v15 = (unsigned __int8 *)*((_QWORD *)&v32 + 1);
        v14 = (unsigned __int8 *)v32;
        v16 = (unsigned __int8 *)v35.__r_.__value_.__r.__words[0];
        if (*((_QWORD *)&v32 + 1) - (_QWORD)v32 != v35.__r_.__value_.__l.__size_ - v35.__r_.__value_.__r.__words[0])
        {
          v36 = &v35;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
          v35.__r_.__value_.__r.__words[0] = (std::string::size_type)&v32;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
          return 0;
        }
        if ((_QWORD)v32 == *((_QWORD *)&v32 + 1))
        {
          v36 = &v35;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
          v35.__r_.__value_.__r.__words[0] = (std::string::size_type)&v32;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
          return 1;
        }
        do
        {
          v17 = std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(v14, v16);
          v18 = v17;
          if (!v17)
            break;
          v14 += 24;
          v16 += 24;
        }
        while (v14 != v15);
        v36 = &v35;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
        v35.__r_.__value_.__r.__words[0] = (std::string::size_type)&v32;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
        if (v18)
          return 1;
      }
      return 0;
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<std::vector<std::string>>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
      {
        goto LABEL_44;
      }
      if (*(_QWORD *)(a2 + 32))
      {
        *(_QWORD *)&v32 = AMCP::Implementation::get_type_marker<std::vector<std::string>>();
        v13 = (__int128 **)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32))(4, a2, 0, &v32);
      }
      else
      {
        v13 = 0;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<std::vector<std::string>>())
      {
        if (v13)
        {
          v34 = 0;
          v32 = 0u;
          v33 = 0u;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v32, *v13, v13[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v13[1] - (char *)*v13) >> 3));
          v34 = AMCP::Implementation::In_Place_Storage<std::vector<std::string>>::dispatch;
          goto LABEL_47;
        }
LABEL_58:
        __assert_rtn("create_vector_of_strings_from", "Thing.h", 1300, "in_value_ptr != nullptr");
      }
      if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
      {
        if (v13)
        {
          Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B380]);
          v35.__r_.__value_.__r.__words[0] = (std::string::size_type)Mutable;
          v21 = *v13;
          v20 = v13[1];
          while (v21 != v20)
          {
            v22 = *((char *)v21 + 23);
            if (v22 >= 0)
              v23 = (const UInt8 *)v21;
            else
              v23 = *(const UInt8 **)v21;
            if (v22 >= 0)
              v24 = *((unsigned __int8 *)v21 + 23);
            else
              v24 = *((_QWORD *)v21 + 1);
            v25 = CFStringCreateWithBytes(0, v23, v24, 0x8000100u, 0);
            if (!v25)
            {
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(exception, "Could not construct");
              __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::StringRef>(Mutable, v25);
            CFRelease(v25);
            v21 = (__int128 *)((char *)v21 + 24);
          }
          mcp_applesauce::CF::Array_Builder::copy_array((applesauce::CF::ArrayRef *)&v32, Mutable);
          *((_QWORD *)&v32 + 1) = 0;
          v33 = 0uLL;
          v34 = AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::dispatch;
          if (Mutable)
            CFRelease(Mutable);
          goto LABEL_47;
        }
        goto LABEL_58;
      }
LABEL_44:
      v34 = 0;
      v32 = 0u;
      v33 = 0u;
LABEL_47:
      AMCP::swap((AMCP::Thing *)&v32, (AMCP::Thing *)a3, v12);
      if (v34)
        ((void (*)(_QWORD, __int128 *, _QWORD, _QWORD))v34)(0, &v32, 0, 0);
      return 0;
    default:
      return result;
  }
}

void sub_1B582010C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15)
{
  a15 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a15);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B581FFF4);
}

void sub_1B5820138(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  mcp_applesauce::CF::Array_Builder::~Array_Builder((const void **)va);
  __clang_call_terminate(a1);
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

BOOL std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  BOOL v12;
  BOOL v13;
  _BOOL8 v14;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
    return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) == 0;
  if (!a1[23])
    return 1;
  v6 = v2 - 1;
  do
  {
    v8 = *a1++;
    v7 = v8;
    v10 = *a2++;
    v9 = v10;
    v12 = v6-- != 0;
    v13 = v7 == v9;
    v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

std::string *AMCP::Thing::convert_to<std::vector<std::string>>(std::string *a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, _QWORD, _QWORD);
  __int128 **v6;
  std::string *result;
  __int128 **v8;
  std::bad_cast *exception;
  std::bad_cast *v10;
  std::bad_cast *v11;
  std::bad_cast *v12;
  std::bad_cast *v13;
  std::bad_cast *v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[2];
  uint64_t (*v18)(uint64_t, _OWORD *, _QWORD, uint64_t *);
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, _QWORD, _QWORD);

  if (!*(_QWORD *)(a2 + 32))
    goto LABEL_12;
  v4 = AMCP::Implementation::get_type_marker<std::vector<std::string>>();
  v5 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a2 + 32);
  v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))v4)
  {
    v19 = v4;
    v6 = (__int128 **)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (v6)
    {
      a1->__r_.__value_.__r.__words[0] = 0;
      a1->__r_.__value_.__l.__size_ = 0;
      a1->__r_.__value_.__r.__words[2] = 0;
      return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a1, *v6, v6[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v6[1] - (char *)*v6) >> 3));
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v16 = AMCP::Implementation::get_type_marker<std::vector<std::string>>();
  memset(v17, 0, sizeof(v17));
  v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v15 = v4;
  v8 = (__int128 **)v18(4, v17, 0, &v15);
  if (!v8)
  {
    v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  result = std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a1, *v8, v8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v8[1] - (char *)*v8) >> 3));
  if (v18)
    return (std::string *)v18(0, v17, 0, 0);
  return result;
}

void sub_1B5820450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

void mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::StringRef>(__CFArray *a1, const void *a2)
{
  if (a1)
    CFArrayAppendValue(a1, a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;
  __int128 v8;

  for (result = a7; a3 != a5; a3 -= 24)
  {
    v8 = *(_OWORD *)(a3 - 24);
    *(_QWORD *)(result - 8) = *(_QWORD *)(a3 - 8);
    *(_OWORD *)(result - 24) = v8;
    result -= 24;
    *(_QWORD *)(a3 - 16) = 0;
    *(_QWORD *)(a3 - 8) = 0;
    *(_QWORD *)(a3 - 24) = 0;
  }
  return result;
}

_QWORD *applesauce::CF::details::CFString_get_value<true>(uint64_t a1, CFStringRef theString)
{
  char *CStringPtr;
  CFIndex Length;
  UInt8 *v7;
  CFIndex maxBufLen;
  CFRange v9;
  CFRange v10;

  CStringPtr = (char *)CFStringGetCStringPtr(theString, 0x8000100u);
  if (CStringPtr)
    return std::string::basic_string[abi:ne180100]<0>((_QWORD *)a1, CStringPtr);
  Length = CFStringGetLength(theString);
  maxBufLen = 0;
  v9.location = 0;
  v9.length = Length;
  CFStringGetBytes(theString, v9, 0x8000100u, 0, 0, 0, 0, &maxBufLen);
  std::string::basic_string[abi:ne180100]((_QWORD *)a1, maxBufLen, 0);
  if (*(char *)(a1 + 23) >= 0)
    v7 = (UInt8 *)a1;
  else
    v7 = *(UInt8 **)a1;
  v10.location = 0;
  v10.length = Length;
  return (_QWORD *)CFStringGetBytes(theString, v10, 0x8000100u, 0, 0, v7, maxBufLen, &maxBufLen);
}

void sub_1B58205AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

char *std::vector<std::string>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v12 = ++v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1B58206BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 - 1) < 0)
        operator delete(*(void **)(v3 - 24));
      v3 -= 24;
    }
  }
  return a1;
}

uint64_t AMCP::Implementation::get_type_marker<std::vector<BOOL>>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return v1[101];
}

uint64_t AMCP::Implementation::get_type_marker<std::vector<char>>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return v1[103];
}

uint64_t AMCP::Implementation::get_type_marker<std::vector<signed char>>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return v1[105];
}

uint64_t AMCP::Implementation::get_type_marker<std::vector<unsigned char>>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return v1[107];
}

uint64_t AMCP::Implementation::get_type_marker<std::vector<short>>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return v1[109];
}

uint64_t AMCP::Implementation::get_type_marker<std::vector<unsigned short>>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return v1[111];
}

uint64_t AMCP::Implementation::get_type_marker<std::vector<int>>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return v1[113];
}

BOOL AMCP::is_one_of<std::vector<unsigned int>,std::vector<long>,std::vector<unsigned long>,std::vector<long long>,std::vector<unsigned long long>,std::vector<float>,std::vector<double>,std::vector<long double>,applesauce::CF::ArrayRef>(_QWORD *a1)
{
  return *a1 == AMCP::Implementation::get_type_marker<std::vector<unsigned int>>()
      || *a1 == AMCP::Implementation::get_type_marker<std::vector<long>>()
      || *a1 == AMCP::Implementation::get_type_marker<std::vector<unsigned long>>()
      || *a1 == AMCP::Implementation::get_type_marker<std::vector<long long>>()
      || *a1 == AMCP::Implementation::get_type_marker<std::vector<unsigned long long>>()
      || *a1 == AMCP::Implementation::get_type_marker<std::vector<float>>()
      || *a1 == AMCP::Implementation::get_type_marker<std::vector<double>>()
      || *a1 == AMCP::Implementation::get_type_marker<std::vector<long double>>()
      || *a1 == AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>();
}

void AMCP::Implementation::create_vector_of_numbers_from<applesauce::CF::ArrayRef,std::vector<unsigned short>>(uint64_t a1, CFArrayRef *a2)
{
  CFIndex Count;
  CFIndex v5;
  char *v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  __int16 v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  __int16 v20;
  std::runtime_error *v21;
  std::runtime_error *v22;
  std::runtime_error *exception;
  const __CFNumber *v24;
  char v25;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  Count = CFArrayGetCount(*a2);
  v5 = Count;
  if (Count)
  {
    if (Count < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(Count);
    v7 = 0;
    v8 = v6;
    v10 = &v6[2 * v9];
    while (1)
    {
      if (!*a2)
      {
        v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v21, "Could not construct");
        __cxa_throw(v21, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::details::at_as<applesauce::CF::NumberRef>(&v24, *a2, v7);
      if (v25)
      {
        if (!v24)
        {
          v22 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v22, "Could not construct");
          __cxa_throw(v22, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v11 = applesauce::CF::convert_to<unsigned short,0>(v24);
        v12 = v11;
        if (v6 >= v10)
        {
          v14 = v6 - v8;
          if (v6 - v8 <= -3)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          v15 = v14 >> 1;
          if (v10 - v8 <= (unint64_t)((v14 >> 1) + 1))
            v16 = v15 + 1;
          else
            v16 = v10 - v8;
          if ((unint64_t)(v10 - v8) >= 0x7FFFFFFFFFFFFFFELL)
            v17 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v17 = v16;
          if (v17)
            v17 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v17);
          else
            v18 = 0;
          v19 = (char *)(v17 + 2 * v15);
          *(_WORD *)v19 = v12;
          v13 = (uint64_t)(v19 + 2);
          while (v6 != v8)
          {
            v20 = *((_WORD *)v6 - 1);
            v6 -= 2;
            *((_WORD *)v19 - 1) = v20;
            v19 -= 2;
          }
          v10 = (char *)(v17 + 2 * v18);
          if (v8)
            operator delete(v8);
          v8 = v19;
          goto LABEL_28;
        }
        *(_WORD *)v6 = v11;
        v6 += 2;
      }
      v13 = (uint64_t)v6;
LABEL_28:
      std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v24);
      ++v7;
      v6 = (char *)v13;
      if (v7 == v5)
        goto LABEL_31;
    }
  }
  v8 = 0;
  v13 = 0;
LABEL_31:
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>((_QWORD *)a1, v8, v13, (v13 - (uint64_t)v8) >> 1);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned short>>::dispatch;
  if (v8)
    operator delete(v8);
}

void sub_1B5820CF4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void AMCP::Implementation::create_vector_of_numbers_from<applesauce::CF::ArrayRef,std::vector<int>>(uint64_t a1, CFArrayRef *a2)
{
  unint64_t Count;
  unint64_t v5;
  char *v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  int v19;
  std::runtime_error *v20;
  std::runtime_error *v21;
  std::runtime_error *exception;
  const __CFNumber *v23;
  char v24;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  Count = CFArrayGetCount(*a2);
  v5 = Count;
  if (Count)
  {
    if (Count >> 62)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(Count);
    v7 = 0;
    v8 = v6;
    v10 = &v6[4 * v9];
    while (1)
    {
      if (!*a2)
      {
        v20 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v20, "Could not construct");
        __cxa_throw(v20, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::details::at_as<applesauce::CF::NumberRef>(&v23, *a2, v7);
      if (v24)
      {
        if (!v23)
        {
          v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v21, "Could not construct");
          __cxa_throw(v21, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v11 = applesauce::CF::convert_to<int,0>(v23);
        v12 = v11;
        if (v6 >= v10)
        {
          v14 = (v6 - v8) >> 2;
          v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 62)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          if ((v10 - v8) >> 1 > v15)
            v15 = (v10 - v8) >> 1;
          if ((unint64_t)(v10 - v8) >= 0x7FFFFFFFFFFFFFFCLL)
            v16 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v16 = v15;
          if (v16)
            v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v16);
          else
            v17 = 0;
          v18 = (char *)(v16 + 4 * v14);
          *(_DWORD *)v18 = v12;
          v13 = (uint64_t)(v18 + 4);
          while (v6 != v8)
          {
            v19 = *((_DWORD *)v6 - 1);
            v6 -= 4;
            *((_DWORD *)v18 - 1) = v19;
            v18 -= 4;
          }
          v10 = (char *)(v16 + 4 * v17);
          if (v8)
            operator delete(v8);
          v8 = v18;
          goto LABEL_27;
        }
        *(_DWORD *)v6 = v11;
        v6 += 4;
      }
      v13 = (uint64_t)v6;
LABEL_27:
      std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v23);
      ++v7;
      v6 = (char *)v13;
      if (v7 == v5)
        goto LABEL_30;
    }
  }
  v8 = 0;
  v13 = 0;
LABEL_30:
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)a1, v8, v13, (v13 - (uint64_t)v8) >> 2);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<int>>::dispatch;
  if (v8)
    operator delete(v8);
}

void sub_1B5820FB8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void AMCP::Implementation::create_vector_of_numbers_from<applesauce::CF::ArrayRef,std::vector<unsigned int>>(uint64_t a1, CFArrayRef *a2)
{
  std::vector<unsigned int>::size_type Count;
  unsigned int *begin;
  unint64_t v6;
  unsigned int *value;
  unsigned int v8;
  unsigned int v9;
  std::vector<unsigned int>::pointer end;
  unsigned int *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  std::runtime_error *v18;
  std::runtime_error *v19;
  std::runtime_error *exception;
  const __CFNumber *v21;
  char v22;
  std::vector<unsigned int> v23;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  Count = CFArrayGetCount(*a2);
  memset(&v23, 0, sizeof(v23));
  std::vector<unsigned int>::reserve(&v23, Count);
  begin = v23.__begin_;
  if (Count)
  {
    v6 = 0;
    value = v23.__end_cap_.__value_;
    do
    {
      if (!*a2)
      {
        v23.__end_cap_.__value_ = value;
        v23.__begin_ = begin;
        v18 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v18, "Could not construct");
        __cxa_throw(v18, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::details::at_as<applesauce::CF::NumberRef>(&v21, *a2, v6);
      if (v22)
      {
        if (!v21)
        {
          v23.__end_cap_.__value_ = value;
          v23.__begin_ = begin;
          v19 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v19, "Could not construct");
          __cxa_throw(v19, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v8 = applesauce::CF::convert_to<unsigned int,0>(v21);
        v9 = v8;
        end = v23.__end_;
        if (v23.__end_ >= value)
        {
          v12 = v23.__end_ - begin;
          v13 = v12 + 1;
          if ((unint64_t)(v12 + 1) >> 62)
          {
            v23.__end_cap_.__value_ = value;
            v23.__begin_ = begin;
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          if (((char *)value - (char *)begin) >> 1 > v13)
            v13 = ((char *)value - (char *)begin) >> 1;
          if ((unint64_t)((char *)value - (char *)begin) >= 0x7FFFFFFFFFFFFFFCLL)
            v14 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v14 = v13;
          if (v14)
            v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v14);
          else
            v15 = 0;
          v16 = (unsigned int *)(v14 + 4 * v12);
          *v16 = v9;
          v11 = v16 + 1;
          while (end != begin)
          {
            v17 = *--end;
            *--v16 = v17;
          }
          value = (unsigned int *)(v14 + 4 * v15);
          v23.__end_ = v11;
          if (begin)
            operator delete(begin);
          begin = v16;
        }
        else
        {
          *v23.__end_ = v8;
          v11 = end + 1;
        }
        v23.__end_ = v11;
      }
      std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v21);
      ++v6;
    }
    while (v6 != Count);
    v23.__end_cap_.__value_ = value;
    v23.__begin_ = begin;
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)a1, begin, (uint64_t)v23.__end_, v23.__end_ - begin);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned int>>::dispatch;
  if (v23.__begin_)
    operator delete(v23.__begin_);
}

void sub_1B5821288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14)
{
  void *v14;

  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::get_type_marker<std::vector<long>>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return v1[117];
}

void AMCP::Implementation::create_vector_of_numbers_from<applesauce::CF::ArrayRef,std::vector<long>>(uint64_t a1, CFArrayRef *a2)
{
  unint64_t Count;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::runtime_error *v20;
  std::runtime_error *v21;
  std::runtime_error *exception;
  const __CFNumber *v23;
  char v24;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  Count = CFArrayGetCount(*a2);
  v5 = Count;
  if (Count)
  {
    if (Count >> 61)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (unint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(Count);
    v7 = 0;
    v8 = v6;
    v10 = &v6[v9];
    while (1)
    {
      if (!*a2)
      {
        v20 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v20, "Could not construct");
        __cxa_throw(v20, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::details::at_as<applesauce::CF::NumberRef>(&v23, *a2, v7);
      if (v24)
      {
        if (!v23)
        {
          v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v21, "Could not construct");
          __cxa_throw(v21, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v11 = applesauce::CF::convert_to<long,0>(v23);
        v12 = v11;
        if (v6 >= v10)
        {
          v14 = v6 - v8;
          v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 61)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          if (((char *)v10 - (char *)v8) >> 2 > v15)
            v15 = ((char *)v10 - (char *)v8) >> 2;
          if ((unint64_t)((char *)v10 - (char *)v8) >= 0x7FFFFFFFFFFFFFF8)
            v16 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v16 = v15;
          if (v16)
            v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v16);
          else
            v17 = 0;
          v18 = (unint64_t *)(v16 + 8 * v14);
          *v18 = v12;
          v13 = (uint64_t)(v18 + 1);
          while (v6 != v8)
          {
            v19 = *--v6;
            *--v18 = v19;
          }
          v10 = (unint64_t *)(v16 + 8 * v17);
          if (v8)
            operator delete(v8);
          v8 = v18;
          goto LABEL_27;
        }
        *v6++ = v11;
      }
      v13 = (uint64_t)v6;
LABEL_27:
      std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v23);
      ++v7;
      v6 = (unint64_t *)v13;
      if (v7 == v5)
        goto LABEL_30;
    }
  }
  v8 = 0;
  v13 = 0;
LABEL_30:
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>((_QWORD *)a1, v8, v13, (v13 - (uint64_t)v8) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long>>::dispatch;
  if (v8)
    operator delete(v8);
}

void sub_1B58215C8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::get_type_marker<std::vector<unsigned long>>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return v1[119];
}

void AMCP::Implementation::create_vector_of_numbers_from<applesauce::CF::ArrayRef,std::vector<unsigned long>>(uint64_t a1, CFArrayRef *a2)
{
  unint64_t Count;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::runtime_error *v20;
  std::runtime_error *v21;
  std::runtime_error *exception;
  const __CFNumber *v23;
  char v24;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  Count = CFArrayGetCount(*a2);
  v5 = Count;
  if (Count)
  {
    if (Count >> 61)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (unint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(Count);
    v7 = 0;
    v8 = v6;
    v10 = &v6[v9];
    while (1)
    {
      if (!*a2)
      {
        v20 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v20, "Could not construct");
        __cxa_throw(v20, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::details::at_as<applesauce::CF::NumberRef>(&v23, *a2, v7);
      if (v24)
      {
        if (!v23)
        {
          v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v21, "Could not construct");
          __cxa_throw(v21, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v11 = applesauce::CF::convert_to<unsigned long,0>(v23);
        v12 = v11;
        if (v6 >= v10)
        {
          v14 = v6 - v8;
          v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 61)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          if (((char *)v10 - (char *)v8) >> 2 > v15)
            v15 = ((char *)v10 - (char *)v8) >> 2;
          if ((unint64_t)((char *)v10 - (char *)v8) >= 0x7FFFFFFFFFFFFFF8)
            v16 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v16 = v15;
          if (v16)
            v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v16);
          else
            v17 = 0;
          v18 = (unint64_t *)(v16 + 8 * v14);
          *v18 = v12;
          v13 = (uint64_t)(v18 + 1);
          while (v6 != v8)
          {
            v19 = *--v6;
            *--v18 = v19;
          }
          v10 = (unint64_t *)(v16 + 8 * v17);
          if (v8)
            operator delete(v8);
          v8 = v18;
          goto LABEL_27;
        }
        *v6++ = v11;
      }
      v13 = (uint64_t)v6;
LABEL_27:
      std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v23);
      ++v7;
      v6 = (unint64_t *)v13;
      if (v7 == v5)
        goto LABEL_30;
    }
  }
  v8 = 0;
  v13 = 0;
LABEL_30:
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)a1, v8, v13, (v13 - (uint64_t)v8) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned long>>::dispatch;
  if (v8)
    operator delete(v8);
}

void sub_1B58218F0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::get_type_marker<std::vector<long long>>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return v1[121];
}

void AMCP::Implementation::create_vector_of_numbers_from<applesauce::CF::ArrayRef,std::vector<long long>>(uint64_t a1, CFArrayRef *a2)
{
  unint64_t Count;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::runtime_error *v20;
  std::runtime_error *v21;
  std::runtime_error *exception;
  const __CFNumber *v23;
  char v24;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  Count = CFArrayGetCount(*a2);
  v5 = Count;
  if (Count)
  {
    if (Count >> 61)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (unint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(Count);
    v7 = 0;
    v8 = v6;
    v10 = &v6[v9];
    while (1)
    {
      if (!*a2)
      {
        v20 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v20, "Could not construct");
        __cxa_throw(v20, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::details::at_as<applesauce::CF::NumberRef>(&v23, *a2, v7);
      if (v24)
      {
        if (!v23)
        {
          v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v21, "Could not construct");
          __cxa_throw(v21, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v11 = applesauce::CF::convert_to<long long,0>(v23);
        v12 = v11;
        if (v6 >= v10)
        {
          v14 = v6 - v8;
          v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 61)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          if (((char *)v10 - (char *)v8) >> 2 > v15)
            v15 = ((char *)v10 - (char *)v8) >> 2;
          if ((unint64_t)((char *)v10 - (char *)v8) >= 0x7FFFFFFFFFFFFFF8)
            v16 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v16 = v15;
          if (v16)
            v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v16);
          else
            v17 = 0;
          v18 = (unint64_t *)(v16 + 8 * v14);
          *v18 = v12;
          v13 = (uint64_t)(v18 + 1);
          while (v6 != v8)
          {
            v19 = *--v6;
            *--v18 = v19;
          }
          v10 = (unint64_t *)(v16 + 8 * v17);
          if (v8)
            operator delete(v8);
          v8 = v18;
          goto LABEL_27;
        }
        *v6++ = v11;
      }
      v13 = (uint64_t)v6;
LABEL_27:
      std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v23);
      ++v7;
      v6 = (unint64_t *)v13;
      if (v7 == v5)
        goto LABEL_30;
    }
  }
  v8 = 0;
  v13 = 0;
LABEL_30:
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((_QWORD *)a1, v8, v13, (v13 - (uint64_t)v8) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long long>>::dispatch;
  if (v8)
    operator delete(v8);
}

void sub_1B5821C18(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::get_type_marker<std::vector<unsigned long long>>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return v1[123];
}

void AMCP::Implementation::create_vector_of_numbers_from<applesauce::CF::ArrayRef,std::vector<unsigned long long>>(uint64_t a1, CFArrayRef *a2)
{
  unint64_t Count;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::runtime_error *v20;
  std::runtime_error *v21;
  std::runtime_error *exception;
  const __CFNumber *v23;
  char v24;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  Count = CFArrayGetCount(*a2);
  v5 = Count;
  if (Count)
  {
    if (Count >> 61)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (unint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(Count);
    v7 = 0;
    v8 = v6;
    v10 = &v6[v9];
    while (1)
    {
      if (!*a2)
      {
        v20 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v20, "Could not construct");
        __cxa_throw(v20, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::details::at_as<applesauce::CF::NumberRef>(&v23, *a2, v7);
      if (v24)
      {
        if (!v23)
        {
          v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v21, "Could not construct");
          __cxa_throw(v21, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v11 = applesauce::CF::convert_to<unsigned long long,0>(v23);
        v12 = v11;
        if (v6 >= v10)
        {
          v14 = v6 - v8;
          v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 61)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          if (((char *)v10 - (char *)v8) >> 2 > v15)
            v15 = ((char *)v10 - (char *)v8) >> 2;
          if ((unint64_t)((char *)v10 - (char *)v8) >= 0x7FFFFFFFFFFFFFF8)
            v16 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v16 = v15;
          if (v16)
            v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v16);
          else
            v17 = 0;
          v18 = (unint64_t *)(v16 + 8 * v14);
          *v18 = v12;
          v13 = (uint64_t)(v18 + 1);
          while (v6 != v8)
          {
            v19 = *--v6;
            *--v18 = v19;
          }
          v10 = (unint64_t *)(v16 + 8 * v17);
          if (v8)
            operator delete(v8);
          v8 = v18;
          goto LABEL_27;
        }
        *v6++ = v11;
      }
      v13 = (uint64_t)v6;
LABEL_27:
      std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v23);
      ++v7;
      v6 = (unint64_t *)v13;
      if (v7 == v5)
        goto LABEL_30;
    }
  }
  v8 = 0;
  v13 = 0;
LABEL_30:
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>((_QWORD *)a1, v8, v13, (v13 - (uint64_t)v8) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned long long>>::dispatch;
  if (v8)
    operator delete(v8);
}

void sub_1B5821F40(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::get_type_marker<std::vector<float>>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return v1[125];
}

void AMCP::Implementation::create_vector_of_numbers_from<applesauce::CF::ArrayRef,std::vector<float>>(uint64_t a1, CFArrayRef *a2)
{
  unint64_t Count;
  unint64_t v5;
  float *v6;
  unint64_t v7;
  float *v8;
  uint64_t v9;
  float *v10;
  float v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  float *v18;
  int v19;
  std::runtime_error *v20;
  std::runtime_error *v21;
  std::runtime_error *exception;
  const __CFNumber *v23;
  char v24;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  Count = CFArrayGetCount(*a2);
  v5 = Count;
  if (Count)
  {
    if (Count >> 62)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (float *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(Count);
    v7 = 0;
    v8 = v6;
    v10 = &v6[v9];
    while (1)
    {
      if (!*a2)
      {
        v20 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v20, "Could not construct");
        __cxa_throw(v20, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::details::at_as<applesauce::CF::NumberRef>(&v23, *a2, v7);
      if (v24)
      {
        if (!v23)
        {
          v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v21, "Could not construct");
          __cxa_throw(v21, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v11 = applesauce::CF::convert_to<float,0>(v23);
        v12 = v11;
        if (v6 >= v10)
        {
          v14 = v6 - v8;
          v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 62)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          if (((char *)v10 - (char *)v8) >> 1 > v15)
            v15 = ((char *)v10 - (char *)v8) >> 1;
          if ((unint64_t)((char *)v10 - (char *)v8) >= 0x7FFFFFFFFFFFFFFCLL)
            v16 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v16 = v15;
          if (v16)
            v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v16);
          else
            v17 = 0;
          v18 = (float *)(v16 + 4 * v14);
          *v18 = v12;
          v13 = (uint64_t)(v18 + 1);
          while (v6 != v8)
          {
            v19 = *((_DWORD *)v6-- - 1);
            *((_DWORD *)v18-- - 1) = v19;
          }
          v10 = (float *)(v16 + 4 * v17);
          if (v8)
            operator delete(v8);
          v8 = v18;
          goto LABEL_27;
        }
        *v6++ = v11;
      }
      v13 = (uint64_t)v6;
LABEL_27:
      std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v23);
      ++v7;
      v6 = (float *)v13;
      if (v7 == v5)
        goto LABEL_30;
    }
  }
  v8 = 0;
  v13 = 0;
LABEL_30:
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)a1, v8, v13, (v13 - (uint64_t)v8) >> 2);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<float>>::dispatch;
  if (v8)
    operator delete(v8);
}

void sub_1B5822270(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::get_type_marker<std::vector<double>>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return v1[127];
}

void AMCP::Implementation::create_vector_of_numbers_from<applesauce::CF::ArrayRef,std::vector<double>>(uint64_t a1, CFArrayRef *a2)
{
  unint64_t Count;
  unint64_t v5;
  double *v6;
  unint64_t v7;
  double *v8;
  uint64_t v9;
  double *v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  double *v18;
  uint64_t v19;
  std::runtime_error *v20;
  std::runtime_error *v21;
  std::runtime_error *exception;
  const __CFNumber *v23;
  char v24;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  Count = CFArrayGetCount(*a2);
  v5 = Count;
  if (Count)
  {
    if (Count >> 61)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (double *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(Count);
    v7 = 0;
    v8 = v6;
    v10 = &v6[v9];
    while (1)
    {
      if (!*a2)
      {
        v20 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v20, "Could not construct");
        __cxa_throw(v20, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::details::at_as<applesauce::CF::NumberRef>(&v23, *a2, v7);
      if (v24)
      {
        if (!v23)
        {
          v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v21, "Could not construct");
          __cxa_throw(v21, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v11 = applesauce::CF::convert_to<double,0>(v23);
        v12 = v11;
        if (v6 >= v10)
        {
          v14 = v6 - v8;
          v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 61)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          if (((char *)v10 - (char *)v8) >> 2 > v15)
            v15 = ((char *)v10 - (char *)v8) >> 2;
          if ((unint64_t)((char *)v10 - (char *)v8) >= 0x7FFFFFFFFFFFFFF8)
            v16 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v16 = v15;
          if (v16)
            v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v16);
          else
            v17 = 0;
          v18 = (double *)(v16 + 8 * v14);
          *v18 = v12;
          v13 = (uint64_t)(v18 + 1);
          while (v6 != v8)
          {
            v19 = *((_QWORD *)v6-- - 1);
            *((_QWORD *)v18-- - 1) = v19;
          }
          v10 = (double *)(v16 + 8 * v17);
          if (v8)
            operator delete(v8);
          v8 = v18;
          goto LABEL_27;
        }
        *v6++ = v11;
      }
      v13 = (uint64_t)v6;
LABEL_27:
      std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v23);
      ++v7;
      v6 = (double *)v13;
      if (v7 == v5)
        goto LABEL_30;
    }
  }
  v8 = 0;
  v13 = 0;
LABEL_30:
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((_QWORD *)a1, v8, v13, (v13 - (uint64_t)v8) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<double>>::dispatch;
  if (v8)
    operator delete(v8);
}

void sub_1B58225A0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::get_type_marker<std::vector<long double>>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return v1[129];
}

void AMCP::Implementation::create_vector_of_numbers_from<applesauce::CF::ArrayRef,std::vector<long double>>(uint64_t a1, CFArrayRef *a2)
{
  unint64_t Count;
  unint64_t v5;
  double *v6;
  unint64_t v7;
  double *v8;
  uint64_t v9;
  double *v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  double *v18;
  uint64_t v19;
  std::runtime_error *v20;
  std::runtime_error *v21;
  std::runtime_error *exception;
  const __CFNumber *v23;
  char v24;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  Count = CFArrayGetCount(*a2);
  v5 = Count;
  if (Count)
  {
    if (Count >> 61)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (double *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(Count);
    v7 = 0;
    v8 = v6;
    v10 = &v6[v9];
    while (1)
    {
      if (!*a2)
      {
        v20 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v20, "Could not construct");
        __cxa_throw(v20, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::details::at_as<applesauce::CF::NumberRef>(&v23, *a2, v7);
      if (v24)
      {
        if (!v23)
        {
          v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v21, "Could not construct");
          __cxa_throw(v21, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v11 = applesauce::CF::convert_to<double,0>(v23);
        v12 = v11;
        if (v6 >= v10)
        {
          v14 = v6 - v8;
          v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 61)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          if (((char *)v10 - (char *)v8) >> 2 > v15)
            v15 = ((char *)v10 - (char *)v8) >> 2;
          if ((unint64_t)((char *)v10 - (char *)v8) >= 0x7FFFFFFFFFFFFFF8)
            v16 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v16 = v15;
          if (v16)
            v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v16);
          else
            v17 = 0;
          v18 = (double *)(v16 + 8 * v14);
          *v18 = v12;
          v13 = (uint64_t)(v18 + 1);
          while (v6 != v8)
          {
            v19 = *((_QWORD *)v6-- - 1);
            *((_QWORD *)v18-- - 1) = v19;
          }
          v10 = (double *)(v16 + 8 * v17);
          if (v8)
            operator delete(v8);
          v8 = v18;
          goto LABEL_27;
        }
        *v6++ = v11;
      }
      v13 = (uint64_t)v6;
LABEL_27:
      std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v23);
      ++v7;
      v6 = (double *)v13;
      if (v7 == v5)
        goto LABEL_30;
    }
  }
  v8 = 0;
  v13 = 0;
LABEL_30:
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long double>::__init_with_size[abi:ne180100]<long double *,long double *>((_QWORD *)a1, v8, v13, (v13 - (uint64_t)v8) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long double>>::dispatch;
  if (v8)
    operator delete(v8);
}

void sub_1B58228D0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::create_vector_of_numbers_from<applesauce::CF::ArrayRef,applesauce::CF::ArrayRef>(uint64_t a1, CFTypeRef *a2)
{
  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::construct<applesauce::CF::ArrayRef const&>(a1, a2);
}

_QWORD *std::vector<long double>::__init_with_size[abi:ne180100]<long double *,long double *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<void const*>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B58229D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL AMCP::Implementation::In_Place_Storage<std::vector<long double>>::dispatch(_BOOL8 result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  void *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, _QWORD, __int128 *);
  char *v12;
  uint64_t v13;
  AMCP::Thing *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  double *v18;
  double v19;
  _BOOL4 v20;
  BOOL v21;
  double *v22;
  double *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  double *v29;
  double *v30;
  uint64_t v31;
  _BYTE *v32;
  _BYTE *v33;
  double v34;
  double *v35;
  double *v36;
  uint64_t v37;
  _BYTE *v38;
  double v39;
  double *v40;
  double *v41;
  uint64_t v42;
  _BYTE *v43;
  double v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  double *v53;
  double *v54;
  double *v55;
  uint64_t (*v56)();
  double *v57;
  double *v58;
  uint64_t v59;
  char *v60;
  double v61;
  __int128 v62;
  __int128 v63;
  uint64_t (*v64)();
  char *v65;
  unint64_t v66;
  uint64_t v67;

  switch(result)
  {
    case 0:
      v7 = *(void **)a2;
      if (*(_QWORD *)a2)
      {
        *(_QWORD *)(a2 + 8) = v7;
        operator delete(v7);
      }
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      v8 = 0uLL;
      goto LABEL_9;
    case 1:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      std::vector<long double>::__init_with_size[abi:ne180100]<long double *,long double *>((_QWORD *)a3, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
      result = 0;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long double>>::dispatch;
      return result;
    case 2:
      result = 0;
      v8 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long double>>::dispatch;
      *(_QWORD *)(a2 + 32) = 0;
LABEL_9:
      *(_OWORD *)a2 = v8;
      *(_OWORD *)(a2 + 16) = v8;
      return result;
    case 3:
      v9 = AMCP::Implementation::get_type_marker<std::vector<long double>>();
      result = 0;
      *a4 = v9;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long double>>())
        return a2;
      else
        return 0;
    case 5:
      v10 = AMCP::Implementation::get_type_marker<std::vector<long double>>();
      v11 = *(void (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32);
      *(_QWORD *)&v62 = 0;
      if (v11)
      {
        v11(3, a2, 0, &v62);
        v11 = (void (*)(uint64_t, uint64_t, _QWORD, __int128 *))v62;
      }
      if (v11 != (void (*)(uint64_t, uint64_t, _QWORD, __int128 *))v10)
        goto LABEL_30;
      v12 = *(char **)(a3 + 32);
      v65 = 0;
      if (v12)
      {
        ((void (*)(uint64_t, uint64_t, _QWORD, char **))v12)(3, a3, 0, &v65);
        v12 = v65;
      }
      if (v12 != (char *)v10)
      {
LABEL_30:
        AMCP::Thing::convert_to<std::vector<long double>>(&v62, a2);
        AMCP::Thing::convert_to<std::vector<long double>>(&v65, a3);
        v16 = (void *)v62;
        if (*((_QWORD *)&v62 + 1) - (_QWORD)v62 == v66 - (_QWORD)v65)
        {
          if ((_QWORD)v62 == *((_QWORD *)&v62 + 1))
          {
            v20 = 1;
            if (!v65)
            {
LABEL_42:
              if (v16)
                operator delete(v16);
              return v20;
            }
LABEL_41:
            operator delete(v65);
            goto LABEL_42;
          }
          v17 = v62 + 8;
          v18 = (double *)v65;
          do
          {
            v19 = *v18++;
            v20 = *(double *)(v17 - 8) == v19;
            v21 = *(double *)(v17 - 8) != v19 || v17 == *((_QWORD *)&v62 + 1);
            v17 += 8;
          }
          while (!v21);
        }
        else
        {
          v20 = 0;
        }
        if (!v65)
          goto LABEL_42;
        goto LABEL_41;
      }
      if (*(_QWORD *)(a2 + 32))
      {
        *(_QWORD *)&v62 = AMCP::Implementation::get_type_marker<std::vector<long double>>();
        v13 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32))(4, a2, 0, &v62);
      }
      else
      {
        v13 = 0;
      }
      *(_QWORD *)&v62 = AMCP::Implementation::get_type_marker<std::vector<long double>>();
      v52 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a3 + 32))(4, a3, 0, &v62);
      v54 = *(double **)v13;
      v53 = *(double **)(v13 + 8);
      v55 = *(double **)v52;
      if ((double *)((char *)v53 - *(_QWORD *)v13) == (double *)(*(_QWORD *)(v52 + 8) - *(_QWORD *)v52))
      {
        while (v54 != v53)
        {
          if (*v54 != *v55)
            return 0;
          ++v54;
          ++v55;
        }
        return 1;
      }
      return 0;
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<std::vector<BOOL>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<signed char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<unsigned char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<short>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<unsigned short>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<int>>()
        && !AMCP::is_one_of<std::vector<unsigned int>,std::vector<long>,std::vector<unsigned long>,std::vector<long long>,std::vector<unsigned long long>,std::vector<float>,std::vector<double>,std::vector<long double>,applesauce::CF::ArrayRef>(a4))
      {
        goto LABEL_141;
      }
      if (*(_QWORD *)(a2 + 32))
      {
        *(_QWORD *)&v62 = AMCP::Implementation::get_type_marker<std::vector<long double>>();
        v15 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32))(4, a2, 0, &v62);
      }
      else
      {
        v15 = 0;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<std::vector<BOOL>>())
      {
        if (v15)
        {
          v23 = *(double **)v15;
          v22 = *(double **)(v15 + 8);
          v66 = 0;
          v67 = 0;
          v65 = 0;
          v24 = (char *)v22 - (char *)v23;
          if (v22 == v23)
            goto LABEL_89;
          v25 = v24 >> 3;
          std::vector<BOOL>::__vallocate[abi:ne180100](&v65, v24 >> 3);
          v26 = v66;
          v27 = v66 + v25;
          v66 += v25;
          if (v26)
          {
            v28 = v27 - 1;
            if (((v27 - 1) ^ (v26 - 1)) < 0x40)
              goto LABEL_81;
          }
          else
          {
            v28 = v27 - 1;
          }
          v45 = v28 >> 6;
          if (v27 >= 0x41)
            v46 = v45;
          else
            v46 = 0;
          *(_QWORD *)&v65[8 * v46] = 0;
LABEL_81:
          v47 = v26 & 0x3F;
          v48 = &v65[8 * (v26 >> 6)];
          do
          {
            v49 = 1 << v47;
            if (*v23 == 0.0)
              v50 = *(_QWORD *)v48 & ~v49;
            else
              v50 = *(_QWORD *)v48 | v49;
            *(_QWORD *)v48 = v50;
            ++v23;
            v48 += 8 * (v47 == 63);
            if (v47 == 63)
              v47 = 0;
            else
              ++v47;
          }
          while (v23 != v22);
LABEL_89:
          v64 = 0;
          v62 = 0u;
          v63 = 0u;
          std::vector<BOOL>::vector(&v62, (uint64_t)&v65);
          v64 = AMCP::Implementation::In_Place_Storage<std::vector<BOOL>>::dispatch;
          v51 = v65;
          if (!v65)
          {
LABEL_118:
            AMCP::swap((AMCP::Thing *)&v62, (AMCP::Thing *)a3, v14);
            if (v64)
              ((void (*)(_QWORD, __int128 *, _QWORD, _QWORD))v64)(0, &v62, 0, 0);
            return 0;
          }
LABEL_117:
          operator delete(v51);
          goto LABEL_118;
        }
LABEL_132:
        __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
      }
      if (*a4 == AMCP::Implementation::get_type_marker<std::vector<char>>())
      {
        if (!v15)
          goto LABEL_132;
        v30 = *(double **)v15;
        v29 = *(double **)(v15 + 8);
        v31 = (char *)v29 - (char *)v30;
        if (v29 == v30)
        {
          v32 = 0;
          v33 = 0;
        }
        else
        {
          if (v31 < 0)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          v32 = operator new(v31 >> 3);
          v33 = v32;
          do
          {
            v34 = *v30++;
            *v33++ = (int)v34;
          }
          while (v30 != v29);
        }
        v64 = 0;
        v62 = 0u;
        v63 = 0u;
        std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(&v62, v32, (uint64_t)v33, v33 - v32);
        v56 = (uint64_t (*)())AMCP::Implementation::In_Place_Storage<std::vector<char>>::dispatch;
      }
      else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<signed char>>())
      {
        if (!v15)
          goto LABEL_132;
        v36 = *(double **)v15;
        v35 = *(double **)(v15 + 8);
        v37 = (char *)v35 - (char *)v36;
        if (v35 == v36)
        {
          v32 = 0;
          v38 = 0;
        }
        else
        {
          if (v37 < 0)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          v32 = operator new(v37 >> 3);
          v38 = v32;
          do
          {
            v39 = *v36++;
            *v38++ = (int)v39;
          }
          while (v36 != v35);
        }
        v64 = 0;
        v62 = 0u;
        v63 = 0u;
        std::vector<signed char>::__init_with_size[abi:ne180100]<signed char *,signed char *>(&v62, v32, (uint64_t)v38, v38 - v32);
        v56 = (uint64_t (*)())AMCP::Implementation::In_Place_Storage<std::vector<signed char>>::dispatch;
      }
      else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned char>>())
      {
        if (!v15)
          goto LABEL_132;
        v41 = *(double **)v15;
        v40 = *(double **)(v15 + 8);
        v42 = (char *)v40 - (char *)v41;
        if (v40 == v41)
        {
          v32 = 0;
          v43 = 0;
        }
        else
        {
          if (v42 < 0)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          v32 = operator new(v42 >> 3);
          v43 = v32;
          do
          {
            v44 = *v41++;
            *v43++ = (int)v44;
          }
          while (v41 != v40);
        }
        v64 = 0;
        v62 = 0u;
        v63 = 0u;
        std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v62, v32, (uint64_t)v43, v43 - v32);
        v56 = (uint64_t (*)())AMCP::Implementation::In_Place_Storage<std::vector<unsigned char>>::dispatch;
      }
      else
      {
        if (*a4 != AMCP::Implementation::get_type_marker<std::vector<short>>())
        {
          if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned short>>())
          {
            AMCP::Implementation::create_vector_of_numbers_from<std::vector<long double>,std::vector<unsigned short>>((uint64_t)&v62, (double **)v15);
          }
          else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<int>>())
          {
            AMCP::Implementation::create_vector_of_numbers_from<std::vector<long double>,std::vector<int>>((uint64_t)&v62, (double **)v15);
          }
          else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned int>>())
          {
            AMCP::Implementation::create_vector_of_numbers_from<std::vector<long double>,std::vector<unsigned int>>((uint64_t)&v62, (double **)v15);
          }
          else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long>>())
          {
            AMCP::Implementation::create_vector_of_numbers_from<std::vector<long double>,std::vector<long>>((uint64_t)&v62, (uint64_t *)v15);
          }
          else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned long>>())
          {
            AMCP::Implementation::create_vector_of_numbers_from<std::vector<long double>,std::vector<unsigned long>>((uint64_t)&v62, (uint64_t *)v15);
          }
          else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long long>>())
          {
            AMCP::Implementation::create_vector_of_numbers_from<std::vector<long double>,std::vector<long long>>((uint64_t)&v62, (uint64_t *)v15);
          }
          else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned long long>>())
          {
            AMCP::Implementation::create_vector_of_numbers_from<std::vector<long double>,std::vector<unsigned long long>>((uint64_t)&v62, (uint64_t *)v15);
          }
          else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<float>>())
          {
            AMCP::Implementation::create_vector_of_numbers_from<std::vector<long double>,std::vector<float>>((uint64_t)&v62, (double **)v15);
          }
          else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<double>>())
          {
            AMCP::Implementation::create_vector_of_numbers_from<std::vector<long double>,std::vector<double>>((uint64_t)&v62, (uint64_t *)v15);
          }
          else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long double>>())
          {
            AMCP::Implementation::create_vector_of_numbers_from<std::vector<long double>,std::vector<long double>>((uint64_t)&v62, v15);
          }
          else if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
          {
            AMCP::Implementation::create_vector_of_numbers_from<std::vector<long double>,applesauce::CF::ArrayRef>(&v62, (uint64_t **)v15);
          }
          else
          {
LABEL_141:
            v64 = 0;
            v62 = 0u;
            v63 = 0u;
          }
          goto LABEL_118;
        }
        if (!v15)
          goto LABEL_132;
        v58 = *(double **)v15;
        v57 = *(double **)(v15 + 8);
        v59 = (char *)v57 - (char *)v58;
        if (v57 == v58)
        {
          v32 = 0;
          v60 = 0;
        }
        else
        {
          if (v59 < 0)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          v32 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v59 >> 3);
          v60 = v32;
          do
          {
            v61 = *v58++;
            *(_WORD *)v60 = (int)v61;
            v60 += 2;
          }
          while (v58 != v57);
        }
        v64 = 0;
        v62 = 0u;
        v63 = 0u;
        std::vector<short>::__init_with_size[abi:ne180100]<short *,short *>(&v62, v32, (uint64_t)v60, (v60 - v32) >> 1);
        v56 = AMCP::Implementation::In_Place_Storage<std::vector<short>>::dispatch;
      }
      v64 = v56;
      if (!v32)
        goto LABEL_118;
      v51 = v32;
      goto LABEL_117;
    default:
      return result;
  }
}

void sub_1B5823204(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  void *v14;

  if (v14)
    operator delete(v14);
  __clang_call_terminate(a1);
}

_QWORD *AMCP::Thing::convert_to<std::vector<long double>>(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  std::bad_cast *exception;
  std::bad_cast *v10;
  std::bad_cast *v11;
  std::bad_cast *v12;
  std::bad_cast *v13;
  std::bad_cast *v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[2];
  uint64_t (*v18)(uint64_t, _OWORD *, _QWORD, uint64_t *);
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, _QWORD, _QWORD);

  if (!*(_QWORD *)(a2 + 32))
    goto LABEL_12;
  v4 = AMCP::Implementation::get_type_marker<std::vector<long double>>();
  v5 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a2 + 32);
  v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))v4)
  {
    v19 = v4;
    v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (v6)
    {
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
      return std::vector<long double>::__init_with_size[abi:ne180100]<long double *,long double *>(a1, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 3);
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v16 = AMCP::Implementation::get_type_marker<std::vector<long double>>();
  memset(v17, 0, sizeof(v17));
  v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v15 = v4;
  v8 = v18(4, v17, 0, &v15);
  if (!v8)
  {
    v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = std::vector<long double>::__init_with_size[abi:ne180100]<long double *,long double *>(a1, *(const void **)v8, *(_QWORD *)(v8 + 8), (uint64_t)(*(_QWORD *)(v8 + 8) - *(_QWORD *)v8) >> 3);
  if (v18)
    return (_QWORD *)v18(0, v17, 0, 0);
  return result;
}

void sub_1B5823434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<BOOL>::vector(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  int v13;
  int v14;
  _QWORD *v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(_QWORD *)(a2 + 8);
  if (!v4)
    return a1;
  std::vector<BOOL>::__vallocate[abi:ne180100](a1, v4);
  v5 = *(_QWORD **)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = a1[1];
  v8 = v7 + v6;
  a1[1] = v7 + v6;
  if (v7)
  {
    v9 = v8 - 1;
    if (((v8 - 1) ^ (v7 - 1)) < 0x40)
      goto LABEL_10;
  }
  else
  {
    v9 = v8 - 1;
  }
  v10 = v9 >> 6;
  if (v8 >= 0x41)
    v11 = v10;
  else
    v11 = 0;
  *(_QWORD *)(*a1 + 8 * v11) = 0;
LABEL_10:
  v12 = v6 & 0x3F;
  if (v6 > 0x3F || (v6 & 0x3F) != 0)
  {
    v13 = 0;
    v14 = 0;
    v15 = &v5[v6 >> 6];
    v16 = v7 & 0x3F;
    v17 = (uint64_t *)(*a1 + 8 * (v7 >> 6));
    do
    {
      v18 = 1 << v16;
      if (((*v5 >> v14) & 1) != 0)
        v19 = *v17 | v18;
      else
        v19 = *v17 & ~v18;
      *v17 = v19;
      ++v14;
      v5 += v13 == 63;
      if (v13 == 63)
        v14 = 0;
      v17 += v16 == 63;
      if (v16 == 63)
        v16 = 0;
      else
        ++v16;
      v13 = v14;
    }
    while (v5 != v15 || v12 != v14);
  }
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::vector<BOOL>>::dispatch(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, _QWORD, void **);
  _QWORD *v11;
  uint64_t v12;
  AMCP::Thing *v13;
  _QWORD *v14;
  _QWORD *v15;
  char v16;
  unint64_t v17;
  _QWORD *v18;
  void *v19;
  void *v20;
  _BYTE *v21;
  int v22;
  _QWORD *v23;
  unint64_t v25;
  _QWORD *v26;
  void *v27;
  _BYTE *v28;
  int v29;
  _QWORD *v30;
  unint64_t v32;
  _QWORD *v33;
  void *v34;
  _BYTE *v35;
  int v36;
  _QWORD *v37;
  uint64_t v39;
  unint64_t v40;
  int v41;
  uint64_t (*v42)(uint64_t, uint64_t, uint64_t, uint64_t *);
  unint64_t v43;
  _QWORD *v44;
  void *v45;
  char *v46;
  int v47;
  _QWORD *v48;
  void *__p[2];
  __int128 v51;
  uint64_t (*v52)();
  _QWORD *v53[3];

  switch((int)result)
  {
    case 0:
      if (*(_QWORD *)a2)
        operator delete(*(void **)a2);
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      v7 = 0uLL;
      goto LABEL_9;
    case 1:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      std::vector<BOOL>::vector((_QWORD *)a3, a2);
      result = 0;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<BOOL>>::dispatch;
      return result;
    case 2:
      result = 0;
      v7 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_QWORD *)a3 = *(_QWORD *)a2;
      *(_QWORD *)(a3 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<BOOL>>::dispatch;
      *(_QWORD *)(a2 + 32) = 0;
LABEL_9:
      *(_OWORD *)a2 = v7;
      *(_OWORD *)(a2 + 16) = v7;
      return result;
    case 3:
      v8 = AMCP::Implementation::get_type_marker<std::vector<BOOL>>();
      result = 0;
      *a4 = v8;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::vector<BOOL>>())
        return a2;
      else
        return 0;
    case 5:
      v9 = AMCP::Implementation::get_type_marker<std::vector<BOOL>>();
      v10 = *(void (**)(uint64_t, uint64_t, _QWORD, void **))(a2 + 32);
      __p[0] = 0;
      if (v10)
      {
        v10(3, a2, 0, __p);
        v10 = (void (*)(uint64_t, uint64_t, _QWORD, void **))__p[0];
      }
      if (v10 != (void (*)(uint64_t, uint64_t, _QWORD, void **))v9)
        goto LABEL_30;
      v11 = *(_QWORD **)(a3 + 32);
      v53[0] = 0;
      if (v11)
      {
        ((void (*)(uint64_t, uint64_t, _QWORD, _QWORD **))v11)(3, a3, 0, v53);
        v11 = v53[0];
      }
      if (v11 == (_QWORD *)v9)
      {
        if (*(_QWORD *)(a2 + 32))
        {
          __p[0] = (void *)AMCP::Implementation::get_type_marker<std::vector<BOOL>>();
          v12 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, void **))(a2 + 32))(4, a2, 0, __p);
        }
        else
        {
          v12 = 0;
        }
        if (*(_QWORD *)(a3 + 32))
        {
          __p[0] = (void *)AMCP::Implementation::get_type_marker<std::vector<BOOL>>();
          v39 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, void **))(a3 + 32))(4, a3, 0, __p);
        }
        else
        {
          v39 = 0;
        }
        v40 = *(_QWORD *)(v12 + 8);
        if (v40 == *(_QWORD *)(v39 + 8))
        {
          v41 = std::__equal_aligned[abi:ne180100]<std::vector<BOOL>,true,true>(*(_QWORD **)v12, 0, *(_QWORD *)v12 + 8 * (v40 >> 6), v40 & 0x3F, *(_QWORD **)v39);
          result = 0;
          if (!v41)
            return result;
          return 1;
        }
      }
      else
      {
LABEL_30:
        AMCP::Thing::convert_to<std::vector<BOOL>>(__p, a2);
        AMCP::Thing::convert_to<std::vector<BOOL>>(v53, a3);
        v15 = v53[0];
        if (__p[1] == v53[1])
          v16 = std::__equal_aligned[abi:ne180100]<std::vector<BOOL>,true,true>((_QWORD *)__p[0], 0, (uint64_t)__p[0] + 8 * ((unint64_t)__p[1] >> 6), (uint64_t)__p[1] & 0x3F, v53[0]);
        else
          v16 = 0;
        if (v15)
          operator delete(v15);
        if (__p[0])
          operator delete(__p[0]);
        if ((v16 & 1) != 0)
          return 1;
      }
      return 0;
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<std::vector<BOOL>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<signed char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<unsigned char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<short>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<unsigned short>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<int>>()
        && !AMCP::is_one_of<std::vector<unsigned int>,std::vector<long>,std::vector<unsigned long>,std::vector<long long>,std::vector<unsigned long long>,std::vector<float>,std::vector<double>,std::vector<long double>,applesauce::CF::ArrayRef>(a4))
      {
        goto LABEL_151;
      }
      if (*(_QWORD *)(a2 + 32))
      {
        __p[0] = (void *)AMCP::Implementation::get_type_marker<std::vector<BOOL>>();
        v14 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, void **))(a2 + 32))(4, a2, 0, __p);
      }
      else
      {
        v14 = 0;
      }
      if (*a4 != AMCP::Implementation::get_type_marker<std::vector<BOOL>>())
      {
        if (*a4 == AMCP::Implementation::get_type_marker<std::vector<char>>())
        {
          if (v14)
          {
            v17 = v14[1];
            if (v17)
            {
              if ((v17 & 0x8000000000000000) != 0)
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              v18 = (_QWORD *)*v14;
              v19 = operator new(v14[1]);
              v20 = v19;
              if (v17 > 0x3F || (v21 = v19, (v17 & 0x3F) != 0))
              {
                v22 = 0;
                v23 = &v18[v17 >> 6];
                v21 = v19;
                do
                {
                  *v21++ = (*v18 >> v22) & 1;
                  v18 += v22 == 63;
                  if (v22 == 63)
                    v22 = 0;
                  else
                    ++v22;
                }
                while (v18 != v23 || v22 != (v17 & 0x3F));
              }
            }
            else
            {
              v20 = 0;
              v21 = 0;
            }
            v52 = 0;
            *(_OWORD *)__p = 0u;
            v51 = 0u;
            std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(__p, v20, (uint64_t)v21, v21 - (_BYTE *)v20);
            v42 = AMCP::Implementation::In_Place_Storage<std::vector<char>>::dispatch;
LABEL_126:
            v52 = (uint64_t (*)())v42;
            if (v20)
              operator delete(v20);
            goto LABEL_128;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<signed char>>())
        {
          if (v14)
          {
            v25 = v14[1];
            if (v25)
            {
              if ((v25 & 0x8000000000000000) != 0)
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              v26 = (_QWORD *)*v14;
              v27 = operator new(v14[1]);
              v20 = v27;
              if (v25 > 0x3F || (v28 = v27, (v25 & 0x3F) != 0))
              {
                v29 = 0;
                v30 = &v26[v25 >> 6];
                v28 = v27;
                do
                {
                  *v28++ = (*v26 >> v29) & 1;
                  v26 += v29 == 63;
                  if (v29 == 63)
                    v29 = 0;
                  else
                    ++v29;
                }
                while (v26 != v30 || v29 != (v25 & 0x3F));
              }
            }
            else
            {
              v20 = 0;
              v28 = 0;
            }
            v52 = 0;
            *(_OWORD *)__p = 0u;
            v51 = 0u;
            std::vector<signed char>::__init_with_size[abi:ne180100]<signed char *,signed char *>(__p, v20, (uint64_t)v28, v28 - (_BYTE *)v20);
            v42 = AMCP::Implementation::In_Place_Storage<std::vector<signed char>>::dispatch;
            goto LABEL_126;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned char>>())
        {
          if (v14)
          {
            v32 = v14[1];
            if (v32)
            {
              if ((v32 & 0x8000000000000000) != 0)
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              v33 = (_QWORD *)*v14;
              v34 = operator new(v14[1]);
              v20 = v34;
              if (v32 > 0x3F || (v35 = v34, (v32 & 0x3F) != 0))
              {
                v36 = 0;
                v37 = &v33[v32 >> 6];
                v35 = v34;
                do
                {
                  *v35++ = (*v33 >> v36) & 1;
                  v33 += v36 == 63;
                  if (v36 == 63)
                    v36 = 0;
                  else
                    ++v36;
                }
                while (v33 != v37 || v36 != (v32 & 0x3F));
              }
            }
            else
            {
              v20 = 0;
              v35 = 0;
            }
            v52 = 0;
            *(_OWORD *)__p = 0u;
            v51 = 0u;
            std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(__p, v20, (uint64_t)v35, v35 - (_BYTE *)v20);
            v42 = AMCP::Implementation::In_Place_Storage<std::vector<unsigned char>>::dispatch;
            goto LABEL_126;
          }
        }
        else
        {
          if (*a4 != AMCP::Implementation::get_type_marker<std::vector<short>>())
          {
            if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned short>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<BOOL>,std::vector<unsigned short>>((uint64_t)__p, (uint64_t)v14);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<int>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<BOOL>,std::vector<int>>((uint64_t)__p, (uint64_t)v14);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned int>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<BOOL>,std::vector<unsigned int>>((uint64_t)__p, (uint64_t)v14);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<BOOL>,std::vector<long>>((uint64_t)__p, (uint64_t)v14);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<BOOL>,std::vector<unsigned long>>((uint64_t)__p, (uint64_t)v14);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<BOOL>,std::vector<long long>>((uint64_t)__p, (uint64_t)v14);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned long long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<BOOL>,std::vector<unsigned long long>>((uint64_t)__p, (uint64_t)v14);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<float>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<BOOL>,std::vector<float>>((uint64_t)__p, (uint64_t)v14);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<double>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<BOOL>,std::vector<double>>((uint64_t)__p, (uint64_t)v14);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long double>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<BOOL>,std::vector<long double>>((uint64_t)__p, (uint64_t)v14);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<BOOL>,applesauce::CF::ArrayRef>(__p, (uint64_t)v14);
            }
            else
            {
LABEL_151:
              v52 = 0;
              *(_OWORD *)__p = 0u;
              v51 = 0u;
            }
            goto LABEL_128;
          }
          if (v14)
          {
            v43 = v14[1];
            if (v43)
            {
              if ((v43 & 0x8000000000000000) != 0)
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              v44 = (_QWORD *)*v14;
              v45 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v14[1]);
              v20 = v45;
              if (v43 > 0x3F || (v46 = (char *)v45, (v43 & 0x3F) != 0))
              {
                v47 = 0;
                v48 = &v44[v43 >> 6];
                v46 = (char *)v45;
                do
                {
                  *(_WORD *)v46 = (*v44 >> v47) & 1;
                  v46 += 2;
                  v44 += v47 == 63;
                  if (v47 == 63)
                    v47 = 0;
                  else
                    ++v47;
                }
                while (v44 != v48 || v47 != (v43 & 0x3F));
              }
            }
            else
            {
              v20 = 0;
              v46 = 0;
            }
            v52 = 0;
            *(_OWORD *)__p = 0u;
            v51 = 0u;
            std::vector<short>::__init_with_size[abi:ne180100]<short *,short *>(__p, v20, (uint64_t)v46, (v46 - (_BYTE *)v20) >> 1);
            v42 = AMCP::Implementation::In_Place_Storage<std::vector<short>>::dispatch;
            goto LABEL_126;
          }
        }
LABEL_142:
        __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
      }
      if (!v14)
        goto LABEL_142;
      v52 = 0;
      *(_OWORD *)__p = 0u;
      v51 = 0u;
      std::vector<BOOL>::vector(__p, (uint64_t)v14);
      v52 = AMCP::Implementation::In_Place_Storage<std::vector<BOOL>>::dispatch;
LABEL_128:
      AMCP::swap((AMCP::Thing *)__p, (AMCP::Thing *)a3, v13);
      if (v52)
        ((void (*)(_QWORD, void **, _QWORD, _QWORD))v52)(0, __p, 0, 0);
      return 0;
    default:
      return result;
  }
}

void sub_1B5823D98(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  void *v9;

  if (v9)
    operator delete(v9);
  __clang_call_terminate(a1);
}

uint64_t AMCP::Implementation::In_Place_Storage<std::vector<char>>::dispatch(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  void *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, _QWORD, __int128 *);
  char *v12;
  uint64_t v13;
  AMCP::Thing *v14;
  uint64_t v15;
  void *v16;
  char *v17;
  BOOL v18;
  _BYTE *v19;
  _BYTE *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  size_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  _BYTE *v33;
  size_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  size_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  __int16 v51;
  uint64_t (*v52)(uint64_t, uint64_t, uint64_t, uint64_t *);
  __int128 v53;
  __int128 v54;
  uint64_t (*v55)();
  char *v56;
  unint64_t v57;
  uint64_t v58;

  switch((int)result)
  {
    case 0:
      v7 = *(void **)a2;
      if (*(_QWORD *)a2)
      {
        *(_QWORD *)(a2 + 8) = v7;
        operator delete(v7);
      }
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      v8 = 0uLL;
      goto LABEL_9;
    case 1:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>((_QWORD *)a3, *(const void **)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
      result = 0;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<char>>::dispatch;
      return result;
    case 2:
      result = 0;
      v8 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<char>>::dispatch;
      *(_QWORD *)(a2 + 32) = 0;
LABEL_9:
      *(_OWORD *)a2 = v8;
      *(_OWORD *)(a2 + 16) = v8;
      return result;
    case 3:
      v9 = AMCP::Implementation::get_type_marker<std::vector<char>>();
      result = 0;
      *a4 = v9;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::vector<char>>())
        return a2;
      else
        return 0;
    case 5:
      v10 = AMCP::Implementation::get_type_marker<std::vector<char>>();
      v11 = *(void (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32);
      *(_QWORD *)&v53 = 0;
      if (v11)
      {
        v11(3, a2, 0, &v53);
        v11 = (void (*)(uint64_t, uint64_t, _QWORD, __int128 *))v53;
      }
      if (v11 != (void (*)(uint64_t, uint64_t, _QWORD, __int128 *))v10)
        goto LABEL_30;
      v12 = *(char **)(a3 + 32);
      v56 = 0;
      if (v12)
      {
        ((void (*)(uint64_t, uint64_t, _QWORD, char **))v12)(3, a3, 0, &v56);
        v12 = v56;
      }
      if (v12 == (char *)v10)
      {
        if (*(_QWORD *)(a2 + 32))
        {
          *(_QWORD *)&v53 = AMCP::Implementation::get_type_marker<std::vector<char>>();
          v13 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32))(4, a2, 0, &v53);
        }
        else
        {
          v13 = 0;
        }
        *(_QWORD *)&v53 = AMCP::Implementation::get_type_marker<std::vector<char>>();
        v45 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a3 + 32))(4, a3, 0, &v53);
        v46 = *(_QWORD *)(v13 + 8) - *(_QWORD *)v13;
        if (v46 == *(_QWORD *)(v45 + 8) - *(_QWORD *)v45 && !memcmp(*(const void **)v13, *(const void **)v45, v46))
          return 1;
      }
      else
      {
LABEL_30:
        AMCP::Thing::convert_to<std::vector<char>>(&v53, a2);
        AMCP::Thing::convert_to<std::vector<char>>(&v56, a3);
        v16 = (void *)v53;
        v17 = v56;
        v18 = *((_QWORD *)&v53 + 1) - (_QWORD)v53 == v57 - (_QWORD)v56
           && memcmp((const void *)v53, v56, *((_QWORD *)&v53 + 1) - v53) == 0;
        if (v17)
          operator delete(v17);
        if (v16)
          operator delete(v16);
        if (v18)
          return 1;
      }
      return 0;
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<std::vector<BOOL>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<signed char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<unsigned char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<short>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<unsigned short>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<int>>()
        && !AMCP::is_one_of<std::vector<unsigned int>,std::vector<long>,std::vector<unsigned long>,std::vector<long long>,std::vector<unsigned long long>,std::vector<float>,std::vector<double>,std::vector<long double>,applesauce::CF::ArrayRef>(a4))
      {
        goto LABEL_125;
      }
      if (*(_QWORD *)(a2 + 32))
      {
        *(_QWORD *)&v53 = AMCP::Implementation::get_type_marker<std::vector<char>>();
        v15 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32))(4, a2, 0, &v53);
      }
      else
      {
        v15 = 0;
      }
      if (*a4 != AMCP::Implementation::get_type_marker<std::vector<BOOL>>())
      {
        if (*a4 == AMCP::Implementation::get_type_marker<std::vector<char>>())
        {
          if (v15)
          {
            v55 = 0;
            v53 = 0u;
            v54 = 0u;
            std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(&v53, *(const void **)v15, *(_QWORD *)(v15 + 8), *(_QWORD *)(v15 + 8) - *(_QWORD *)v15);
            v55 = (uint64_t (*)())AMCP::Implementation::In_Place_Storage<std::vector<char>>::dispatch;
            goto LABEL_102;
          }
LABEL_116:
          __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
        }
        if (*a4 == AMCP::Implementation::get_type_marker<std::vector<signed char>>())
        {
          if (!v15)
            goto LABEL_116;
          v26 = *(_BYTE **)v15;
          v25 = *(_BYTE **)(v15 + 8);
          v27 = v25 - v26;
          if (v25 == v26)
          {
            v29 = 0;
            v31 = 0;
          }
          else
          {
            if ((v27 & 0x8000000000000000) != 0)
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            v28 = operator new(v27);
            v29 = v28;
            v30 = 0;
            do
            {
              *((_BYTE *)v28 + v30) = v26[v30];
              ++v30;
            }
            while (&v26[v30] != v25);
            v31 = (uint64_t)v28 + v30;
          }
          v55 = 0;
          v53 = 0u;
          v54 = 0u;
          std::vector<signed char>::__init_with_size[abi:ne180100]<signed char *,signed char *>(&v53, v29, v31, v31 - (_QWORD)v29);
          v52 = AMCP::Implementation::In_Place_Storage<std::vector<signed char>>::dispatch;
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned char>>())
        {
          if (!v15)
            goto LABEL_116;
          v33 = *(_BYTE **)v15;
          v32 = *(_BYTE **)(v15 + 8);
          v34 = v32 - v33;
          if (v32 == v33)
          {
            v29 = 0;
            v37 = 0;
          }
          else
          {
            if ((v34 & 0x8000000000000000) != 0)
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            v35 = operator new(v34);
            v29 = v35;
            v36 = 0;
            do
            {
              *((_BYTE *)v35 + v36) = v33[v36];
              ++v36;
            }
            while (&v33[v36] != v32);
            v37 = (uint64_t)v35 + v36;
          }
          v55 = 0;
          v53 = 0u;
          v54 = 0u;
          std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v53, v29, v37, v37 - (_QWORD)v29);
          v52 = AMCP::Implementation::In_Place_Storage<std::vector<unsigned char>>::dispatch;
        }
        else
        {
          if (*a4 != AMCP::Implementation::get_type_marker<std::vector<short>>())
          {
            if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned short>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<char>,std::vector<unsigned short>>((uint64_t)&v53, (_QWORD *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<int>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<char>,std::vector<int>>((uint64_t)&v53, (_QWORD *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned int>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<char>,std::vector<unsigned int>>((uint64_t)&v53, (_QWORD *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<char>,std::vector<long>>((uint64_t)&v53, (_QWORD *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<char>,std::vector<unsigned long>>((uint64_t)&v53, (_QWORD *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<char>,std::vector<long long>>((uint64_t)&v53, (_QWORD *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned long long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<char>,std::vector<unsigned long long>>((uint64_t)&v53, (_QWORD *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<float>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<char>,std::vector<float>>((uint64_t)&v53, (_QWORD *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<double>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<char>,std::vector<double>>((uint64_t)&v53, (_QWORD *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long double>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<char>,std::vector<long double>>((uint64_t)&v53, (_QWORD *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<char>,applesauce::CF::ArrayRef>(&v53, v15);
            }
            else
            {
LABEL_125:
              v55 = 0;
              v53 = 0u;
              v54 = 0u;
            }
            goto LABEL_102;
          }
          if (!v15)
            goto LABEL_116;
          v48 = *(char **)v15;
          v47 = *(char **)(v15 + 8);
          v49 = v47 - v48;
          if (v47 == v48)
          {
            v29 = 0;
            v50 = 0;
          }
          else
          {
            if (v49 < 0)
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            v29 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v49);
            v50 = (char *)v29;
            do
            {
              v51 = *v48++;
              *(_WORD *)v50 = v51;
              v50 += 2;
            }
            while (v48 != v47);
          }
          v55 = 0;
          v53 = 0u;
          v54 = 0u;
          std::vector<short>::__init_with_size[abi:ne180100]<short *,short *>(&v53, v29, (uint64_t)v50, (v50 - (_BYTE *)v29) >> 1);
          v52 = AMCP::Implementation::In_Place_Storage<std::vector<short>>::dispatch;
        }
        v55 = (uint64_t (*)())v52;
        if (!v29)
          goto LABEL_102;
        v44 = (char *)v29;
        goto LABEL_101;
      }
      if (!v15)
        goto LABEL_116;
      v20 = *(_BYTE **)v15;
      v19 = *(_BYTE **)(v15 + 8);
      v57 = 0;
      v58 = 0;
      v56 = 0;
      v21 = v19 - v20;
      if (v19 == v20)
        goto LABEL_76;
      std::vector<BOOL>::__vallocate[abi:ne180100](&v56, v19 - v20);
      v22 = v57;
      v23 = v57 + v21;
      v57 += v21;
      if (v22)
      {
        v24 = v23 - 1;
        if (((v23 - 1) ^ (v22 - 1)) < 0x40)
          goto LABEL_68;
      }
      else
      {
        v24 = v23 - 1;
      }
      v38 = v24 >> 6;
      if (v23 >= 0x41)
        v39 = v38;
      else
        v39 = 0;
      *(_QWORD *)&v56[8 * v39] = 0;
LABEL_68:
      v40 = v22 & 0x3F;
      v41 = &v56[8 * (v22 >> 6)];
      do
      {
        v42 = 1 << v40;
        if (*v20)
          v43 = *(_QWORD *)v41 | v42;
        else
          v43 = *(_QWORD *)v41 & ~v42;
        *(_QWORD *)v41 = v43;
        ++v20;
        v41 += 8 * (v40 == 63);
        if (v40 == 63)
          v40 = 0;
        else
          ++v40;
      }
      while (v20 != v19);
LABEL_76:
      v55 = 0;
      v53 = 0u;
      v54 = 0u;
      std::vector<BOOL>::vector(&v53, (uint64_t)&v56);
      v55 = AMCP::Implementation::In_Place_Storage<std::vector<BOOL>>::dispatch;
      v44 = v56;
      if (v56)
LABEL_101:
        operator delete(v44);
LABEL_102:
      AMCP::swap((AMCP::Thing *)&v53, (AMCP::Thing *)a3, v14);
      if (v55)
        ((void (*)(_QWORD, __int128 *, _QWORD, _QWORD))v55)(0, &v53, 0, 0);
      return 0;
    default:
      return result;
  }
}

void sub_1B58245A8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  void *v14;

  if (v14)
    operator delete(v14);
  __clang_call_terminate(a1);
}

_QWORD *std::vector<signed char>::__init_with_size[abi:ne180100]<signed char *,signed char *>(_QWORD *result, const void *a2, uint64_t a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (__sz)
  {
    v6 = result;
    result = std::vector<char>::__vallocate[abi:ne180100](result, __sz);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B582468C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Implementation::In_Place_Storage<std::vector<signed char>>::dispatch(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  void *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, _QWORD, __int128 *);
  char *v12;
  uint64_t v13;
  AMCP::Thing *v14;
  uint64_t v15;
  void *v16;
  char *v17;
  BOOL v18;
  _BYTE *v19;
  _BYTE *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  size_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  _BYTE *v33;
  size_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  size_t v46;
  uint64_t (*v47)(uint64_t, uint64_t, uint64_t, uint64_t *);
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  __int16 v52;
  __int128 v53;
  __int128 v54;
  uint64_t (*v55)();
  char *v56;
  unint64_t v57;
  uint64_t v58;

  switch((int)result)
  {
    case 0:
      v7 = *(void **)a2;
      if (*(_QWORD *)a2)
      {
        *(_QWORD *)(a2 + 8) = v7;
        operator delete(v7);
      }
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      v8 = 0uLL;
      goto LABEL_9;
    case 1:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      std::vector<signed char>::__init_with_size[abi:ne180100]<signed char *,signed char *>((_QWORD *)a3, *(const void **)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
      result = 0;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<signed char>>::dispatch;
      return result;
    case 2:
      result = 0;
      v8 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<signed char>>::dispatch;
      *(_QWORD *)(a2 + 32) = 0;
LABEL_9:
      *(_OWORD *)a2 = v8;
      *(_OWORD *)(a2 + 16) = v8;
      return result;
    case 3:
      v9 = AMCP::Implementation::get_type_marker<std::vector<signed char>>();
      result = 0;
      *a4 = v9;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::vector<signed char>>())
        return a2;
      else
        return 0;
    case 5:
      v10 = AMCP::Implementation::get_type_marker<std::vector<signed char>>();
      v11 = *(void (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32);
      *(_QWORD *)&v53 = 0;
      if (v11)
      {
        v11(3, a2, 0, &v53);
        v11 = (void (*)(uint64_t, uint64_t, _QWORD, __int128 *))v53;
      }
      if (v11 != (void (*)(uint64_t, uint64_t, _QWORD, __int128 *))v10)
        goto LABEL_30;
      v12 = *(char **)(a3 + 32);
      v56 = 0;
      if (v12)
      {
        ((void (*)(uint64_t, uint64_t, _QWORD, char **))v12)(3, a3, 0, &v56);
        v12 = v56;
      }
      if (v12 == (char *)v10)
      {
        if (*(_QWORD *)(a2 + 32))
        {
          *(_QWORD *)&v53 = AMCP::Implementation::get_type_marker<std::vector<signed char>>();
          v13 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32))(4, a2, 0, &v53);
        }
        else
        {
          v13 = 0;
        }
        *(_QWORD *)&v53 = AMCP::Implementation::get_type_marker<std::vector<signed char>>();
        v45 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a3 + 32))(4, a3, 0, &v53);
        v46 = *(_QWORD *)(v13 + 8) - *(_QWORD *)v13;
        if (v46 == *(_QWORD *)(v45 + 8) - *(_QWORD *)v45 && !memcmp(*(const void **)v13, *(const void **)v45, v46))
          return 1;
      }
      else
      {
LABEL_30:
        AMCP::Thing::convert_to<std::vector<signed char>>(&v53, a2);
        AMCP::Thing::convert_to<std::vector<signed char>>(&v56, a3);
        v16 = (void *)v53;
        v17 = v56;
        v18 = *((_QWORD *)&v53 + 1) - (_QWORD)v53 == v57 - (_QWORD)v56
           && memcmp((const void *)v53, v56, *((_QWORD *)&v53 + 1) - v53) == 0;
        if (v17)
          operator delete(v17);
        if (v16)
          operator delete(v16);
        if (v18)
          return 1;
      }
      return 0;
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<std::vector<BOOL>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<signed char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<unsigned char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<short>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<unsigned short>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<int>>()
        && !AMCP::is_one_of<std::vector<unsigned int>,std::vector<long>,std::vector<unsigned long>,std::vector<long long>,std::vector<unsigned long long>,std::vector<float>,std::vector<double>,std::vector<long double>,applesauce::CF::ArrayRef>(a4))
      {
        goto LABEL_125;
      }
      if (*(_QWORD *)(a2 + 32))
      {
        *(_QWORD *)&v53 = AMCP::Implementation::get_type_marker<std::vector<signed char>>();
        v15 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32))(4, a2, 0, &v53);
      }
      else
      {
        v15 = 0;
      }
      if (*a4 != AMCP::Implementation::get_type_marker<std::vector<BOOL>>())
      {
        if (*a4 == AMCP::Implementation::get_type_marker<std::vector<char>>())
        {
          if (v15)
          {
            v26 = *(_BYTE **)v15;
            v25 = *(_BYTE **)(v15 + 8);
            v27 = v25 - v26;
            if (v25 == v26)
            {
              v29 = 0;
              v31 = 0;
            }
            else
            {
              if ((v27 & 0x8000000000000000) != 0)
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              v28 = operator new(v27);
              v29 = v28;
              v30 = 0;
              do
              {
                *((_BYTE *)v28 + v30) = v26[v30];
                ++v30;
              }
              while (&v26[v30] != v25);
              v31 = (uint64_t)v28 + v30;
            }
            v55 = 0;
            v53 = 0u;
            v54 = 0u;
            std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(&v53, v29, v31, v31 - (_QWORD)v29);
            v47 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<std::vector<char>>::dispatch;
LABEL_84:
            v55 = (uint64_t (*)())v47;
            if (!v29)
              goto LABEL_87;
            v44 = (char *)v29;
            goto LABEL_86;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<signed char>>())
        {
          if (v15)
          {
            v55 = 0;
            v53 = 0u;
            v54 = 0u;
            std::vector<signed char>::__init_with_size[abi:ne180100]<signed char *,signed char *>(&v53, *(const void **)v15, *(_QWORD *)(v15 + 8), *(_QWORD *)(v15 + 8) - *(_QWORD *)v15);
            v55 = (uint64_t (*)())AMCP::Implementation::In_Place_Storage<std::vector<signed char>>::dispatch;
            goto LABEL_87;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned char>>())
        {
          if (v15)
          {
            v33 = *(_BYTE **)v15;
            v32 = *(_BYTE **)(v15 + 8);
            v34 = v32 - v33;
            if (v32 == v33)
            {
              v29 = 0;
              v37 = 0;
            }
            else
            {
              if ((v34 & 0x8000000000000000) != 0)
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              v35 = operator new(v34);
              v29 = v35;
              v36 = 0;
              do
              {
                *((_BYTE *)v35 + v36) = v33[v36];
                ++v36;
              }
              while (&v33[v36] != v32);
              v37 = (uint64_t)v35 + v36;
            }
            v55 = 0;
            v53 = 0u;
            v54 = 0u;
            std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v53, v29, v37, v37 - (_QWORD)v29);
            v47 = AMCP::Implementation::In_Place_Storage<std::vector<unsigned char>>::dispatch;
            goto LABEL_84;
          }
        }
        else
        {
          if (*a4 != AMCP::Implementation::get_type_marker<std::vector<short>>())
          {
            if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned short>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<signed char>,std::vector<unsigned short>>((uint64_t)&v53, (_QWORD *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<int>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<signed char>,std::vector<int>>((uint64_t)&v53, (_QWORD *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned int>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<signed char>,std::vector<unsigned int>>((uint64_t)&v53, (_QWORD *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<signed char>,std::vector<long>>((uint64_t)&v53, (_QWORD *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<signed char>,std::vector<unsigned long>>((uint64_t)&v53, (_QWORD *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<signed char>,std::vector<long long>>((uint64_t)&v53, (_QWORD *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned long long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<signed char>,std::vector<unsigned long long>>((uint64_t)&v53, (_QWORD *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<float>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<signed char>,std::vector<float>>((uint64_t)&v53, (_QWORD *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<double>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<signed char>,std::vector<double>>((uint64_t)&v53, (_QWORD *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long double>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<signed char>,std::vector<long double>>((uint64_t)&v53, (_QWORD *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<signed char>,applesauce::CF::ArrayRef>(&v53, v15);
            }
            else
            {
LABEL_125:
              v55 = 0;
              v53 = 0u;
              v54 = 0u;
            }
            goto LABEL_87;
          }
          if (v15)
          {
            v49 = *(char **)v15;
            v48 = *(char **)(v15 + 8);
            v50 = v48 - v49;
            if (v48 == v49)
            {
              v29 = 0;
              v51 = 0;
            }
            else
            {
              if (v50 < 0)
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              v29 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v50);
              v51 = (char *)v29;
              do
              {
                v52 = *v49++;
                *(_WORD *)v51 = v52;
                v51 += 2;
              }
              while (v49 != v48);
            }
            v55 = 0;
            v53 = 0u;
            v54 = 0u;
            std::vector<short>::__init_with_size[abi:ne180100]<short *,short *>(&v53, v29, (uint64_t)v51, (v51 - (_BYTE *)v29) >> 1);
            v47 = AMCP::Implementation::In_Place_Storage<std::vector<short>>::dispatch;
            goto LABEL_84;
          }
        }
LABEL_116:
        __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
      }
      if (!v15)
        goto LABEL_116;
      v20 = *(_BYTE **)v15;
      v19 = *(_BYTE **)(v15 + 8);
      v57 = 0;
      v58 = 0;
      v56 = 0;
      v21 = v19 - v20;
      if (v19 == v20)
        goto LABEL_76;
      std::vector<BOOL>::__vallocate[abi:ne180100](&v56, v19 - v20);
      v22 = v57;
      v23 = v57 + v21;
      v57 += v21;
      if (v22)
      {
        v24 = v23 - 1;
        if (((v23 - 1) ^ (v22 - 1)) < 0x40)
          goto LABEL_68;
      }
      else
      {
        v24 = v23 - 1;
      }
      v38 = v24 >> 6;
      if (v23 >= 0x41)
        v39 = v38;
      else
        v39 = 0;
      *(_QWORD *)&v56[8 * v39] = 0;
LABEL_68:
      v40 = v22 & 0x3F;
      v41 = &v56[8 * (v22 >> 6)];
      do
      {
        v42 = 1 << v40;
        if (*v20)
          v43 = *(_QWORD *)v41 | v42;
        else
          v43 = *(_QWORD *)v41 & ~v42;
        *(_QWORD *)v41 = v43;
        ++v20;
        v41 += 8 * (v40 == 63);
        if (v40 == 63)
          v40 = 0;
        else
          ++v40;
      }
      while (v20 != v19);
LABEL_76:
      v55 = 0;
      v53 = 0u;
      v54 = 0u;
      std::vector<BOOL>::vector(&v53, (uint64_t)&v56);
      v55 = AMCP::Implementation::In_Place_Storage<std::vector<BOOL>>::dispatch;
      v44 = v56;
      if (v56)
LABEL_86:
        operator delete(v44);
LABEL_87:
      AMCP::swap((AMCP::Thing *)&v53, (AMCP::Thing *)a3, v14);
      if (v55)
        ((void (*)(_QWORD, __int128 *, _QWORD, _QWORD))v55)(0, &v53, 0, 0);
      return 0;
    default:
      return result;
  }
}

void sub_1B5824E3C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  void *v14;

  if (v14)
    operator delete(v14);
  __clang_call_terminate(a1);
}

_QWORD *std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(_QWORD *result, const void *a2, uint64_t a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (__sz)
  {
    v6 = result;
    result = std::vector<char>::__vallocate[abi:ne180100](result, __sz);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B5824F20(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Implementation::In_Place_Storage<std::vector<unsigned char>>::dispatch(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  void *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, _QWORD, __int128 *);
  char *v12;
  uint64_t v13;
  AMCP::Thing *v14;
  uint64_t v15;
  void *v16;
  char *v17;
  BOOL v18;
  _BYTE *v19;
  _BYTE *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  size_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  _BYTE *v33;
  size_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  size_t v46;
  uint64_t (*v47)(uint64_t, uint64_t, uint64_t, uint64_t *);
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  uint64_t v50;
  char *v51;
  __int16 v52;
  __int128 v53;
  __int128 v54;
  uint64_t (*v55)();
  char *v56;
  unint64_t v57;
  uint64_t v58;

  switch((int)result)
  {
    case 0:
      v7 = *(void **)a2;
      if (*(_QWORD *)a2)
      {
        *(_QWORD *)(a2 + 8) = v7;
        operator delete(v7);
      }
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      v8 = 0uLL;
      goto LABEL_9;
    case 1:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)a3, *(const void **)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
      result = 0;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned char>>::dispatch;
      return result;
    case 2:
      result = 0;
      v8 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned char>>::dispatch;
      *(_QWORD *)(a2 + 32) = 0;
LABEL_9:
      *(_OWORD *)a2 = v8;
      *(_OWORD *)(a2 + 16) = v8;
      return result;
    case 3:
      v9 = AMCP::Implementation::get_type_marker<std::vector<unsigned char>>();
      result = 0;
      *a4 = v9;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned char>>())
        return a2;
      else
        return 0;
    case 5:
      v10 = AMCP::Implementation::get_type_marker<std::vector<unsigned char>>();
      v11 = *(void (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32);
      *(_QWORD *)&v53 = 0;
      if (v11)
      {
        v11(3, a2, 0, &v53);
        v11 = (void (*)(uint64_t, uint64_t, _QWORD, __int128 *))v53;
      }
      if (v11 != (void (*)(uint64_t, uint64_t, _QWORD, __int128 *))v10)
        goto LABEL_30;
      v12 = *(char **)(a3 + 32);
      v56 = 0;
      if (v12)
      {
        ((void (*)(uint64_t, uint64_t, _QWORD, char **))v12)(3, a3, 0, &v56);
        v12 = v56;
      }
      if (v12 == (char *)v10)
      {
        if (*(_QWORD *)(a2 + 32))
        {
          *(_QWORD *)&v53 = AMCP::Implementation::get_type_marker<std::vector<unsigned char>>();
          v13 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32))(4, a2, 0, &v53);
        }
        else
        {
          v13 = 0;
        }
        *(_QWORD *)&v53 = AMCP::Implementation::get_type_marker<std::vector<unsigned char>>();
        v45 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a3 + 32))(4, a3, 0, &v53);
        v46 = *(_QWORD *)(v13 + 8) - *(_QWORD *)v13;
        if (v46 == *(_QWORD *)(v45 + 8) - *(_QWORD *)v45 && !memcmp(*(const void **)v13, *(const void **)v45, v46))
          return 1;
      }
      else
      {
LABEL_30:
        AMCP::Thing::convert_to<std::vector<unsigned char>>(&v53, a2);
        AMCP::Thing::convert_to<std::vector<unsigned char>>(&v56, a3);
        v16 = (void *)v53;
        v17 = v56;
        v18 = *((_QWORD *)&v53 + 1) - (_QWORD)v53 == v57 - (_QWORD)v56
           && memcmp((const void *)v53, v56, *((_QWORD *)&v53 + 1) - v53) == 0;
        if (v17)
          operator delete(v17);
        if (v16)
          operator delete(v16);
        if (v18)
          return 1;
      }
      return 0;
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<std::vector<BOOL>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<signed char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<unsigned char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<short>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<unsigned short>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<int>>()
        && !AMCP::is_one_of<std::vector<unsigned int>,std::vector<long>,std::vector<unsigned long>,std::vector<long long>,std::vector<unsigned long long>,std::vector<float>,std::vector<double>,std::vector<long double>,applesauce::CF::ArrayRef>(a4))
      {
        goto LABEL_125;
      }
      if (*(_QWORD *)(a2 + 32))
      {
        *(_QWORD *)&v53 = AMCP::Implementation::get_type_marker<std::vector<unsigned char>>();
        v15 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32))(4, a2, 0, &v53);
      }
      else
      {
        v15 = 0;
      }
      if (*a4 != AMCP::Implementation::get_type_marker<std::vector<BOOL>>())
      {
        if (*a4 == AMCP::Implementation::get_type_marker<std::vector<char>>())
        {
          if (v15)
          {
            v26 = *(_BYTE **)v15;
            v25 = *(_BYTE **)(v15 + 8);
            v27 = v25 - v26;
            if (v25 == v26)
            {
              v29 = 0;
              v31 = 0;
            }
            else
            {
              if ((v27 & 0x8000000000000000) != 0)
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              v28 = operator new(v27);
              v29 = v28;
              v30 = 0;
              do
              {
                *((_BYTE *)v28 + v30) = v26[v30];
                ++v30;
              }
              while (&v26[v30] != v25);
              v31 = (uint64_t)v28 + v30;
            }
            v55 = 0;
            v53 = 0u;
            v54 = 0u;
            std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(&v53, v29, v31, v31 - (_QWORD)v29);
            v47 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<std::vector<char>>::dispatch;
LABEL_93:
            v55 = (uint64_t (*)())v47;
            if (!v29)
              goto LABEL_96;
            v44 = (char *)v29;
            goto LABEL_95;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<signed char>>())
        {
          if (v15)
          {
            v33 = *(_BYTE **)v15;
            v32 = *(_BYTE **)(v15 + 8);
            v34 = v32 - v33;
            if (v32 == v33)
            {
              v29 = 0;
              v37 = 0;
            }
            else
            {
              if ((v34 & 0x8000000000000000) != 0)
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              v35 = operator new(v34);
              v29 = v35;
              v36 = 0;
              do
              {
                *((_BYTE *)v35 + v36) = v33[v36];
                ++v36;
              }
              while (&v33[v36] != v32);
              v37 = (uint64_t)v35 + v36;
            }
            v55 = 0;
            v53 = 0u;
            v54 = 0u;
            std::vector<signed char>::__init_with_size[abi:ne180100]<signed char *,signed char *>(&v53, v29, v37, v37 - (_QWORD)v29);
            v47 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<std::vector<signed char>>::dispatch;
            goto LABEL_93;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned char>>())
        {
          if (v15)
          {
            v55 = 0;
            v53 = 0u;
            v54 = 0u;
            std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v53, *(const void **)v15, *(_QWORD *)(v15 + 8), *(_QWORD *)(v15 + 8) - *(_QWORD *)v15);
            v55 = (uint64_t (*)())AMCP::Implementation::In_Place_Storage<std::vector<unsigned char>>::dispatch;
            goto LABEL_96;
          }
        }
        else
        {
          if (*a4 != AMCP::Implementation::get_type_marker<std::vector<short>>())
          {
            if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned short>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned char>,std::vector<unsigned short>>((uint64_t)&v53, (_QWORD *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<int>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned char>,std::vector<int>>((uint64_t)&v53, (_QWORD *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned int>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned char>,std::vector<unsigned int>>((uint64_t)&v53, (_QWORD *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned char>,std::vector<long>>((uint64_t)&v53, (_QWORD *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned char>,std::vector<unsigned long>>((uint64_t)&v53, (_QWORD *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned char>,std::vector<long long>>((uint64_t)&v53, (_QWORD *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned long long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned char>,std::vector<unsigned long long>>((uint64_t)&v53, (_QWORD *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<float>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned char>,std::vector<float>>((uint64_t)&v53, (_QWORD *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<double>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned char>,std::vector<double>>((uint64_t)&v53, (_QWORD *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long double>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned char>,std::vector<long double>>((uint64_t)&v53, (_QWORD *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned char>,applesauce::CF::ArrayRef>(&v53, v15);
            }
            else
            {
LABEL_125:
              v55 = 0;
              v53 = 0u;
              v54 = 0u;
            }
            goto LABEL_96;
          }
          if (v15)
          {
            v49 = *(unsigned __int8 **)v15;
            v48 = *(unsigned __int8 **)(v15 + 8);
            v50 = v48 - v49;
            if (v48 == v49)
            {
              v29 = 0;
              v51 = 0;
            }
            else
            {
              if (v50 < 0)
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              v29 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v50);
              v51 = (char *)v29;
              do
              {
                v52 = *v49++;
                *(_WORD *)v51 = v52;
                v51 += 2;
              }
              while (v49 != v48);
            }
            v55 = 0;
            v53 = 0u;
            v54 = 0u;
            std::vector<short>::__init_with_size[abi:ne180100]<short *,short *>(&v53, v29, (uint64_t)v51, (v51 - (_BYTE *)v29) >> 1);
            v47 = AMCP::Implementation::In_Place_Storage<std::vector<short>>::dispatch;
            goto LABEL_93;
          }
        }
LABEL_116:
        __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
      }
      if (!v15)
        goto LABEL_116;
      v20 = *(_BYTE **)v15;
      v19 = *(_BYTE **)(v15 + 8);
      v57 = 0;
      v58 = 0;
      v56 = 0;
      v21 = v19 - v20;
      if (v19 == v20)
        goto LABEL_76;
      std::vector<BOOL>::__vallocate[abi:ne180100](&v56, v19 - v20);
      v22 = v57;
      v23 = v57 + v21;
      v57 += v21;
      if (v22)
      {
        v24 = v23 - 1;
        if (((v23 - 1) ^ (v22 - 1)) < 0x40)
          goto LABEL_68;
      }
      else
      {
        v24 = v23 - 1;
      }
      v38 = v24 >> 6;
      if (v23 >= 0x41)
        v39 = v38;
      else
        v39 = 0;
      *(_QWORD *)&v56[8 * v39] = 0;
LABEL_68:
      v40 = v22 & 0x3F;
      v41 = &v56[8 * (v22 >> 6)];
      do
      {
        v42 = 1 << v40;
        if (*v20)
          v43 = *(_QWORD *)v41 | v42;
        else
          v43 = *(_QWORD *)v41 & ~v42;
        *(_QWORD *)v41 = v43;
        ++v20;
        v41 += 8 * (v40 == 63);
        if (v40 == 63)
          v40 = 0;
        else
          ++v40;
      }
      while (v20 != v19);
LABEL_76:
      v55 = 0;
      v53 = 0u;
      v54 = 0u;
      std::vector<BOOL>::vector(&v53, (uint64_t)&v56);
      v55 = AMCP::Implementation::In_Place_Storage<std::vector<BOOL>>::dispatch;
      v44 = v56;
      if (v56)
LABEL_95:
        operator delete(v44);
LABEL_96:
      AMCP::swap((AMCP::Thing *)&v53, (AMCP::Thing *)a3, v14);
      if (v55)
        ((void (*)(_QWORD, __int128 *, _QWORD, _QWORD))v55)(0, &v53, 0, 0);
      return 0;
    default:
      return result;
  }
}

void sub_1B58256D0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  void *v14;

  if (v14)
    operator delete(v14);
  __clang_call_terminate(a1);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<long double>,std::vector<unsigned short>>(uint64_t a1, double **a2)
{
  double *v3;
  double *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  double v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if (v5 < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v5 >> 3);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *(_WORD *)v7 = (int)v8;
      v7 += 2;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>((_QWORD *)a1, v6, (uint64_t)v7, (v7 - v6) >> 1);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned short>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B5825828(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<long double>,std::vector<int>>(uint64_t a1, double **a2)
{
  double *v3;
  double *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  double v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if (v5 < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5 >> 3);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *(_DWORD *)v7 = (int)v8;
      v7 += 4;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)a1, v6, (uint64_t)v7, (v7 - v6) >> 2);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<int>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B5825910(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<long double>,std::vector<unsigned int>>(uint64_t a1, double **a2)
{
  double *v3;
  double *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  double v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if (v5 < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5 >> 3);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *(_DWORD *)v7 = v8;
      v7 += 4;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)a1, v6, (uint64_t)v7, (v7 - v6) >> 2);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned int>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B58259F8(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<long double>,std::vector<long>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  if (v4 == *a2)
  {
    v7 = 0;
    v9 = 0;
  }
  else
  {
    if (v5 < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 3);
    v7 = v6;
    v8 = 0;
    do
    {
      *(_QWORD *)&v6[v8] = (uint64_t)*(double *)(v3 + v8);
      v8 += 8;
    }
    while (v3 + v8 != v4);
    v9 = (uint64_t)&v6[v8];
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>((_QWORD *)a1, v7, v9, (v9 - (uint64_t)v7) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long>>::dispatch;
  if (v7)
    operator delete(v7);
}

void sub_1B5825AEC(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<long double>,std::vector<unsigned long>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  if (v4 == *a2)
  {
    v7 = 0;
    v9 = 0;
  }
  else
  {
    if (v5 < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 3);
    v7 = v6;
    v8 = 0;
    do
    {
      *(_QWORD *)&v6[v8] = (unint64_t)*(double *)(v3 + v8);
      v8 += 8;
    }
    while (v3 + v8 != v4);
    v9 = (uint64_t)&v6[v8];
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)a1, v7, v9, (v9 - (uint64_t)v7) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned long>>::dispatch;
  if (v7)
    operator delete(v7);
}

void sub_1B5825BE0(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<long double>,std::vector<long long>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  if (v4 == *a2)
  {
    v7 = 0;
    v9 = 0;
  }
  else
  {
    if (v5 < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 3);
    v7 = v6;
    v8 = 0;
    do
    {
      *(_QWORD *)&v6[v8] = (uint64_t)*(double *)(v3 + v8);
      v8 += 8;
    }
    while (v3 + v8 != v4);
    v9 = (uint64_t)&v6[v8];
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((_QWORD *)a1, v7, v9, (v9 - (uint64_t)v7) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long long>>::dispatch;
  if (v7)
    operator delete(v7);
}

void sub_1B5825CD4(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<long double>,std::vector<unsigned long long>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  if (v4 == *a2)
  {
    v7 = 0;
    v9 = 0;
  }
  else
  {
    if (v5 < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 3);
    v7 = v6;
    v8 = 0;
    do
    {
      *(_QWORD *)&v6[v8] = (unint64_t)*(double *)(v3 + v8);
      v8 += 8;
    }
    while (v3 + v8 != v4);
    v9 = (uint64_t)&v6[v8];
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>((_QWORD *)a1, v7, v9, (v9 - (uint64_t)v7) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned long long>>::dispatch;
  if (v7)
    operator delete(v7);
}

void sub_1B5825DC8(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<long double>,std::vector<float>>(uint64_t a1, double **a2)
{
  double *v3;
  double *v4;
  uint64_t v5;
  float *v6;
  float *v7;
  double v8;
  float v9;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if (v5 < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (float *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5 >> 3);
    v7 = v6;
    do
    {
      v8 = *v3++;
      v9 = v8;
      *v7++ = v9;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)a1, v6, (uint64_t)v7, v7 - v6);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<float>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B5825EB0(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<long double>,std::vector<double>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  if (v4 == *a2)
  {
    v7 = 0;
    v9 = 0;
  }
  else
  {
    if (v5 < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 3);
    v7 = v6;
    v8 = 0;
    do
    {
      *(_QWORD *)&v6[v8] = *(_QWORD *)(v3 + v8);
      v8 += 8;
    }
    while (v3 + v8 != v4);
    v9 = (uint64_t)&v6[v8];
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((_QWORD *)a1, v7, v9, (v9 - (uint64_t)v7) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<double>>::dispatch;
  if (v7)
    operator delete(v7);
}

void sub_1B5825FA0(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

_QWORD *AMCP::Implementation::create_vector_of_numbers_from<std::vector<long double>,std::vector<long double>>(uint64_t a1, uint64_t a2)
{
  _QWORD *result;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  result = std::vector<long double>::__init_with_size[abi:ne180100]<long double *,long double *>((_QWORD *)a1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long double>>::dispatch;
  return result;
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<long double>,applesauce::CF::ArrayRef>(_QWORD *a1, uint64_t **a2)
{
  __CFArray *Mutable;
  uint64_t *v5;
  uint64_t *v6;
  CFNumberRef v7;
  std::runtime_error *exception;
  uint64_t valuePtr;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B380]);
  v5 = *a2;
  v6 = a2[1];
  while (v5 != v6)
  {
    valuePtr = *v5;
    v7 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
    if (!v7)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::NumberRef>(Mutable, v7);
    CFRelease(v7);
    ++v5;
  }
  mcp_applesauce::CF::Array_Builder::copy_array((applesauce::CF::ArrayRef *)&valuePtr, Mutable);
  a1[2] = 0;
  a1[3] = 0;
  *a1 = valuePtr;
  a1[1] = 0;
  a1[4] = AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::dispatch;
  if (Mutable)
    CFRelease(Mutable);
}

void sub_1B582614C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  mcp_applesauce::CF::Array_Builder::~Array_Builder(&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<void const*>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B58261D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL AMCP::Implementation::In_Place_Storage<std::vector<double>>::dispatch(_BOOL8 result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  void *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, _QWORD, __int128 *);
  char *v12;
  uint64_t v13;
  AMCP::Thing *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  double *v18;
  double v19;
  _BOOL4 v20;
  BOOL v21;
  double *v22;
  double *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  double *v29;
  double *v30;
  uint64_t v31;
  _BYTE *v32;
  _BYTE *v33;
  double v34;
  double *v35;
  double *v36;
  uint64_t v37;
  _BYTE *v38;
  double v39;
  double *v40;
  double *v41;
  uint64_t v42;
  _BYTE *v43;
  double v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  double *v53;
  double *v54;
  double *v55;
  uint64_t (*v56)();
  double *v57;
  double *v58;
  uint64_t v59;
  char *v60;
  double v61;
  __int128 v62;
  __int128 v63;
  uint64_t (*v64)();
  char *v65;
  unint64_t v66;
  uint64_t v67;

  switch(result)
  {
    case 0:
      v7 = *(void **)a2;
      if (*(_QWORD *)a2)
      {
        *(_QWORD *)(a2 + 8) = v7;
        operator delete(v7);
      }
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      v8 = 0uLL;
      goto LABEL_9;
    case 1:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((_QWORD *)a3, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
      result = 0;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<double>>::dispatch;
      return result;
    case 2:
      result = 0;
      v8 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<double>>::dispatch;
      *(_QWORD *)(a2 + 32) = 0;
LABEL_9:
      *(_OWORD *)a2 = v8;
      *(_OWORD *)(a2 + 16) = v8;
      return result;
    case 3:
      v9 = AMCP::Implementation::get_type_marker<std::vector<double>>();
      result = 0;
      *a4 = v9;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::vector<double>>())
        return a2;
      else
        return 0;
    case 5:
      v10 = AMCP::Implementation::get_type_marker<std::vector<double>>();
      v11 = *(void (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32);
      *(_QWORD *)&v62 = 0;
      if (v11)
      {
        v11(3, a2, 0, &v62);
        v11 = (void (*)(uint64_t, uint64_t, _QWORD, __int128 *))v62;
      }
      if (v11 != (void (*)(uint64_t, uint64_t, _QWORD, __int128 *))v10)
        goto LABEL_30;
      v12 = *(char **)(a3 + 32);
      v65 = 0;
      if (v12)
      {
        ((void (*)(uint64_t, uint64_t, _QWORD, char **))v12)(3, a3, 0, &v65);
        v12 = v65;
      }
      if (v12 != (char *)v10)
      {
LABEL_30:
        AMCP::Thing::convert_to<std::vector<double>>(&v62, a2);
        AMCP::Thing::convert_to<std::vector<double>>(&v65, a3);
        v16 = (void *)v62;
        if (*((_QWORD *)&v62 + 1) - (_QWORD)v62 == v66 - (_QWORD)v65)
        {
          if ((_QWORD)v62 == *((_QWORD *)&v62 + 1))
          {
            v20 = 1;
            if (!v65)
            {
LABEL_42:
              if (v16)
                operator delete(v16);
              return v20;
            }
LABEL_41:
            operator delete(v65);
            goto LABEL_42;
          }
          v17 = v62 + 8;
          v18 = (double *)v65;
          do
          {
            v19 = *v18++;
            v20 = *(double *)(v17 - 8) == v19;
            v21 = *(double *)(v17 - 8) != v19 || v17 == *((_QWORD *)&v62 + 1);
            v17 += 8;
          }
          while (!v21);
        }
        else
        {
          v20 = 0;
        }
        if (!v65)
          goto LABEL_42;
        goto LABEL_41;
      }
      if (*(_QWORD *)(a2 + 32))
      {
        *(_QWORD *)&v62 = AMCP::Implementation::get_type_marker<std::vector<double>>();
        v13 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32))(4, a2, 0, &v62);
      }
      else
      {
        v13 = 0;
      }
      *(_QWORD *)&v62 = AMCP::Implementation::get_type_marker<std::vector<double>>();
      v52 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a3 + 32))(4, a3, 0, &v62);
      v54 = *(double **)v13;
      v53 = *(double **)(v13 + 8);
      v55 = *(double **)v52;
      if ((double *)((char *)v53 - *(_QWORD *)v13) == (double *)(*(_QWORD *)(v52 + 8) - *(_QWORD *)v52))
      {
        while (v54 != v53)
        {
          if (*v54 != *v55)
            return 0;
          ++v54;
          ++v55;
        }
        return 1;
      }
      return 0;
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<std::vector<BOOL>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<signed char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<unsigned char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<short>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<unsigned short>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<int>>()
        && !AMCP::is_one_of<std::vector<unsigned int>,std::vector<long>,std::vector<unsigned long>,std::vector<long long>,std::vector<unsigned long long>,std::vector<float>,std::vector<double>,std::vector<long double>,applesauce::CF::ArrayRef>(a4))
      {
        goto LABEL_141;
      }
      if (*(_QWORD *)(a2 + 32))
      {
        *(_QWORD *)&v62 = AMCP::Implementation::get_type_marker<std::vector<double>>();
        v15 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32))(4, a2, 0, &v62);
      }
      else
      {
        v15 = 0;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<std::vector<BOOL>>())
      {
        if (v15)
        {
          v23 = *(double **)v15;
          v22 = *(double **)(v15 + 8);
          v66 = 0;
          v67 = 0;
          v65 = 0;
          v24 = (char *)v22 - (char *)v23;
          if (v22 == v23)
            goto LABEL_89;
          v25 = v24 >> 3;
          std::vector<BOOL>::__vallocate[abi:ne180100](&v65, v24 >> 3);
          v26 = v66;
          v27 = v66 + v25;
          v66 += v25;
          if (v26)
          {
            v28 = v27 - 1;
            if (((v27 - 1) ^ (v26 - 1)) < 0x40)
              goto LABEL_81;
          }
          else
          {
            v28 = v27 - 1;
          }
          v45 = v28 >> 6;
          if (v27 >= 0x41)
            v46 = v45;
          else
            v46 = 0;
          *(_QWORD *)&v65[8 * v46] = 0;
LABEL_81:
          v47 = v26 & 0x3F;
          v48 = &v65[8 * (v26 >> 6)];
          do
          {
            v49 = 1 << v47;
            if (*v23 == 0.0)
              v50 = *(_QWORD *)v48 & ~v49;
            else
              v50 = *(_QWORD *)v48 | v49;
            *(_QWORD *)v48 = v50;
            ++v23;
            v48 += 8 * (v47 == 63);
            if (v47 == 63)
              v47 = 0;
            else
              ++v47;
          }
          while (v23 != v22);
LABEL_89:
          v64 = 0;
          v62 = 0u;
          v63 = 0u;
          std::vector<BOOL>::vector(&v62, (uint64_t)&v65);
          v64 = AMCP::Implementation::In_Place_Storage<std::vector<BOOL>>::dispatch;
          v51 = v65;
          if (!v65)
          {
LABEL_118:
            AMCP::swap((AMCP::Thing *)&v62, (AMCP::Thing *)a3, v14);
            if (v64)
              ((void (*)(_QWORD, __int128 *, _QWORD, _QWORD))v64)(0, &v62, 0, 0);
            return 0;
          }
LABEL_117:
          operator delete(v51);
          goto LABEL_118;
        }
LABEL_132:
        __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
      }
      if (*a4 == AMCP::Implementation::get_type_marker<std::vector<char>>())
      {
        if (!v15)
          goto LABEL_132;
        v30 = *(double **)v15;
        v29 = *(double **)(v15 + 8);
        v31 = (char *)v29 - (char *)v30;
        if (v29 == v30)
        {
          v32 = 0;
          v33 = 0;
        }
        else
        {
          if (v31 < 0)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          v32 = operator new(v31 >> 3);
          v33 = v32;
          do
          {
            v34 = *v30++;
            *v33++ = (int)v34;
          }
          while (v30 != v29);
        }
        v64 = 0;
        v62 = 0u;
        v63 = 0u;
        std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(&v62, v32, (uint64_t)v33, v33 - v32);
        v56 = (uint64_t (*)())AMCP::Implementation::In_Place_Storage<std::vector<char>>::dispatch;
      }
      else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<signed char>>())
      {
        if (!v15)
          goto LABEL_132;
        v36 = *(double **)v15;
        v35 = *(double **)(v15 + 8);
        v37 = (char *)v35 - (char *)v36;
        if (v35 == v36)
        {
          v32 = 0;
          v38 = 0;
        }
        else
        {
          if (v37 < 0)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          v32 = operator new(v37 >> 3);
          v38 = v32;
          do
          {
            v39 = *v36++;
            *v38++ = (int)v39;
          }
          while (v36 != v35);
        }
        v64 = 0;
        v62 = 0u;
        v63 = 0u;
        std::vector<signed char>::__init_with_size[abi:ne180100]<signed char *,signed char *>(&v62, v32, (uint64_t)v38, v38 - v32);
        v56 = (uint64_t (*)())AMCP::Implementation::In_Place_Storage<std::vector<signed char>>::dispatch;
      }
      else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned char>>())
      {
        if (!v15)
          goto LABEL_132;
        v41 = *(double **)v15;
        v40 = *(double **)(v15 + 8);
        v42 = (char *)v40 - (char *)v41;
        if (v40 == v41)
        {
          v32 = 0;
          v43 = 0;
        }
        else
        {
          if (v42 < 0)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          v32 = operator new(v42 >> 3);
          v43 = v32;
          do
          {
            v44 = *v41++;
            *v43++ = (int)v44;
          }
          while (v41 != v40);
        }
        v64 = 0;
        v62 = 0u;
        v63 = 0u;
        std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v62, v32, (uint64_t)v43, v43 - v32);
        v56 = (uint64_t (*)())AMCP::Implementation::In_Place_Storage<std::vector<unsigned char>>::dispatch;
      }
      else
      {
        if (*a4 != AMCP::Implementation::get_type_marker<std::vector<short>>())
        {
          if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned short>>())
          {
            AMCP::Implementation::create_vector_of_numbers_from<std::vector<double>,std::vector<unsigned short>>((uint64_t)&v62, (double **)v15);
          }
          else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<int>>())
          {
            AMCP::Implementation::create_vector_of_numbers_from<std::vector<double>,std::vector<int>>((uint64_t)&v62, (double **)v15);
          }
          else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned int>>())
          {
            AMCP::Implementation::create_vector_of_numbers_from<std::vector<double>,std::vector<unsigned int>>((uint64_t)&v62, (double **)v15);
          }
          else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long>>())
          {
            AMCP::Implementation::create_vector_of_numbers_from<std::vector<double>,std::vector<long>>((uint64_t)&v62, (uint64_t *)v15);
          }
          else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned long>>())
          {
            AMCP::Implementation::create_vector_of_numbers_from<std::vector<double>,std::vector<unsigned long>>((uint64_t)&v62, (uint64_t *)v15);
          }
          else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long long>>())
          {
            AMCP::Implementation::create_vector_of_numbers_from<std::vector<double>,std::vector<long long>>((uint64_t)&v62, (uint64_t *)v15);
          }
          else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned long long>>())
          {
            AMCP::Implementation::create_vector_of_numbers_from<std::vector<double>,std::vector<unsigned long long>>((uint64_t)&v62, (uint64_t *)v15);
          }
          else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<float>>())
          {
            AMCP::Implementation::create_vector_of_numbers_from<std::vector<double>,std::vector<float>>((uint64_t)&v62, (double **)v15);
          }
          else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<double>>())
          {
            AMCP::Implementation::create_vector_of_numbers_from<std::vector<double>,std::vector<double>>((uint64_t)&v62, v15);
          }
          else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long double>>())
          {
            AMCP::Implementation::create_vector_of_numbers_from<std::vector<double>,std::vector<long double>>((uint64_t)&v62, (uint64_t *)v15);
          }
          else if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
          {
            AMCP::Implementation::create_vector_of_numbers_from<std::vector<double>,applesauce::CF::ArrayRef>(&v62, (uint64_t **)v15);
          }
          else
          {
LABEL_141:
            v64 = 0;
            v62 = 0u;
            v63 = 0u;
          }
          goto LABEL_118;
        }
        if (!v15)
          goto LABEL_132;
        v58 = *(double **)v15;
        v57 = *(double **)(v15 + 8);
        v59 = (char *)v57 - (char *)v58;
        if (v57 == v58)
        {
          v32 = 0;
          v60 = 0;
        }
        else
        {
          if (v59 < 0)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          v32 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v59 >> 3);
          v60 = v32;
          do
          {
            v61 = *v58++;
            *(_WORD *)v60 = (int)v61;
            v60 += 2;
          }
          while (v58 != v57);
        }
        v64 = 0;
        v62 = 0u;
        v63 = 0u;
        std::vector<short>::__init_with_size[abi:ne180100]<short *,short *>(&v62, v32, (uint64_t)v60, (v60 - v32) >> 1);
        v56 = AMCP::Implementation::In_Place_Storage<std::vector<short>>::dispatch;
      }
      v64 = v56;
      if (!v32)
        goto LABEL_118;
      v51 = v32;
      goto LABEL_117;
    default:
      return result;
  }
}

void sub_1B5826A08(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  void *v14;

  if (v14)
    operator delete(v14);
  __clang_call_terminate(a1);
}

_QWORD *AMCP::Thing::convert_to<std::vector<double>>(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  std::bad_cast *exception;
  std::bad_cast *v10;
  std::bad_cast *v11;
  std::bad_cast *v12;
  std::bad_cast *v13;
  std::bad_cast *v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[2];
  uint64_t (*v18)(uint64_t, _OWORD *, _QWORD, uint64_t *);
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, _QWORD, _QWORD);

  if (!*(_QWORD *)(a2 + 32))
    goto LABEL_12;
  v4 = AMCP::Implementation::get_type_marker<std::vector<double>>();
  v5 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a2 + 32);
  v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))v4)
  {
    v19 = v4;
    v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (v6)
    {
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
      return std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(a1, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 3);
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v16 = AMCP::Implementation::get_type_marker<std::vector<double>>();
  memset(v17, 0, sizeof(v17));
  v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v15 = v4;
  v8 = v18(4, v17, 0, &v15);
  if (!v8)
  {
    v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(a1, *(const void **)v8, *(_QWORD *)(v8 + 8), (uint64_t)(*(_QWORD *)(v8 + 8) - *(_QWORD *)v8) >> 3);
  if (v18)
    return (_QWORD *)v18(0, v17, 0, 0);
  return result;
}

void sub_1B5826C38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<double>,std::vector<unsigned short>>(uint64_t a1, double **a2)
{
  double *v3;
  double *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  double v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if (v5 < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v5 >> 3);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *(_WORD *)v7 = (int)v8;
      v7 += 2;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>((_QWORD *)a1, v6, (uint64_t)v7, (v7 - v6) >> 1);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned short>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B5826D28(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<double>,std::vector<int>>(uint64_t a1, double **a2)
{
  double *v3;
  double *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  double v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if (v5 < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5 >> 3);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *(_DWORD *)v7 = (int)v8;
      v7 += 4;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)a1, v6, (uint64_t)v7, (v7 - v6) >> 2);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<int>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B5826E10(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<double>,std::vector<unsigned int>>(uint64_t a1, double **a2)
{
  double *v3;
  double *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  double v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if (v5 < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5 >> 3);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *(_DWORD *)v7 = v8;
      v7 += 4;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)a1, v6, (uint64_t)v7, (v7 - v6) >> 2);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned int>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B5826EF8(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<double>,std::vector<long>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  if (v4 == *a2)
  {
    v7 = 0;
    v9 = 0;
  }
  else
  {
    if (v5 < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 3);
    v7 = v6;
    v8 = 0;
    do
    {
      *(_QWORD *)&v6[v8] = (uint64_t)*(double *)(v3 + v8);
      v8 += 8;
    }
    while (v3 + v8 != v4);
    v9 = (uint64_t)&v6[v8];
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>((_QWORD *)a1, v7, v9, (v9 - (uint64_t)v7) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long>>::dispatch;
  if (v7)
    operator delete(v7);
}

void sub_1B5826FEC(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<double>,std::vector<unsigned long>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  if (v4 == *a2)
  {
    v7 = 0;
    v9 = 0;
  }
  else
  {
    if (v5 < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 3);
    v7 = v6;
    v8 = 0;
    do
    {
      *(_QWORD *)&v6[v8] = (unint64_t)*(double *)(v3 + v8);
      v8 += 8;
    }
    while (v3 + v8 != v4);
    v9 = (uint64_t)&v6[v8];
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)a1, v7, v9, (v9 - (uint64_t)v7) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned long>>::dispatch;
  if (v7)
    operator delete(v7);
}

void sub_1B58270E0(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<double>,std::vector<long long>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  if (v4 == *a2)
  {
    v7 = 0;
    v9 = 0;
  }
  else
  {
    if (v5 < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 3);
    v7 = v6;
    v8 = 0;
    do
    {
      *(_QWORD *)&v6[v8] = (uint64_t)*(double *)(v3 + v8);
      v8 += 8;
    }
    while (v3 + v8 != v4);
    v9 = (uint64_t)&v6[v8];
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((_QWORD *)a1, v7, v9, (v9 - (uint64_t)v7) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long long>>::dispatch;
  if (v7)
    operator delete(v7);
}

void sub_1B58271D4(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<double>,std::vector<unsigned long long>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  if (v4 == *a2)
  {
    v7 = 0;
    v9 = 0;
  }
  else
  {
    if (v5 < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 3);
    v7 = v6;
    v8 = 0;
    do
    {
      *(_QWORD *)&v6[v8] = (unint64_t)*(double *)(v3 + v8);
      v8 += 8;
    }
    while (v3 + v8 != v4);
    v9 = (uint64_t)&v6[v8];
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>((_QWORD *)a1, v7, v9, (v9 - (uint64_t)v7) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned long long>>::dispatch;
  if (v7)
    operator delete(v7);
}

void sub_1B58272C8(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<double>,std::vector<float>>(uint64_t a1, double **a2)
{
  double *v3;
  double *v4;
  uint64_t v5;
  float *v6;
  float *v7;
  double v8;
  float v9;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if (v5 < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (float *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5 >> 3);
    v7 = v6;
    do
    {
      v8 = *v3++;
      v9 = v8;
      *v7++ = v9;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)a1, v6, (uint64_t)v7, v7 - v6);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<float>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B58273B0(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

_QWORD *AMCP::Implementation::create_vector_of_numbers_from<std::vector<double>,std::vector<double>>(uint64_t a1, uint64_t a2)
{
  _QWORD *result;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  result = std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((_QWORD *)a1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<double>>::dispatch;
  return result;
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<double>,std::vector<long double>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  if (v4 == *a2)
  {
    v7 = 0;
    v9 = 0;
  }
  else
  {
    if (v5 < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 3);
    v7 = v6;
    v8 = 0;
    do
    {
      *(_QWORD *)&v6[v8] = *(_QWORD *)(v3 + v8);
      v8 += 8;
    }
    while (v3 + v8 != v4);
    v9 = (uint64_t)&v6[v8];
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long double>::__init_with_size[abi:ne180100]<long double *,long double *>((_QWORD *)a1, v7, v9, (v9 - (uint64_t)v7) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long double>>::dispatch;
  if (v7)
    operator delete(v7);
}

void sub_1B582750C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<double>,applesauce::CF::ArrayRef>(_QWORD *a1, uint64_t **a2)
{
  __CFArray *Mutable;
  uint64_t *v5;
  uint64_t *v6;
  CFNumberRef v7;
  std::runtime_error *exception;
  uint64_t valuePtr;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B380]);
  v5 = *a2;
  v6 = a2[1];
  while (v5 != v6)
  {
    valuePtr = *v5;
    v7 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
    if (!v7)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::NumberRef>(Mutable, v7);
    CFRelease(v7);
    ++v5;
  }
  mcp_applesauce::CF::Array_Builder::copy_array((applesauce::CF::ArrayRef *)&valuePtr, Mutable);
  a1[2] = 0;
  a1[3] = 0;
  *a1 = valuePtr;
  a1[1] = 0;
  a1[4] = AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::dispatch;
  if (Mutable)
    CFRelease(Mutable);
}

void sub_1B582764C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  mcp_applesauce::CF::Array_Builder::~Array_Builder(&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned int>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B58276D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL AMCP::Implementation::In_Place_Storage<std::vector<float>>::dispatch(_BOOL8 result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  void *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, _QWORD, __int128 *);
  char *v12;
  uint64_t v13;
  AMCP::Thing *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  float *v18;
  float v19;
  _BOOL4 v20;
  BOOL v21;
  float *v22;
  float *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  float *v29;
  float *v30;
  uint64_t v31;
  _BYTE *v32;
  _BYTE *v33;
  float v34;
  float *v35;
  float *v36;
  uint64_t v37;
  _BYTE *v38;
  float v39;
  float *v40;
  float *v41;
  uint64_t v42;
  _BYTE *v43;
  float v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  float *v53;
  float *v54;
  float *v55;
  uint64_t (*v56)();
  float *v57;
  float *v58;
  uint64_t v59;
  char *v60;
  float v61;
  __int128 v62;
  __int128 v63;
  uint64_t (*v64)();
  char *v65;
  unint64_t v66;
  uint64_t v67;

  switch(result)
  {
    case 0:
      v7 = *(void **)a2;
      if (*(_QWORD *)a2)
      {
        *(_QWORD *)(a2 + 8) = v7;
        operator delete(v7);
      }
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      v8 = 0uLL;
      goto LABEL_9;
    case 1:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)a3, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
      result = 0;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<float>>::dispatch;
      return result;
    case 2:
      result = 0;
      v8 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<float>>::dispatch;
      *(_QWORD *)(a2 + 32) = 0;
LABEL_9:
      *(_OWORD *)a2 = v8;
      *(_OWORD *)(a2 + 16) = v8;
      return result;
    case 3:
      v9 = AMCP::Implementation::get_type_marker<std::vector<float>>();
      result = 0;
      *a4 = v9;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::vector<float>>())
        return a2;
      else
        return 0;
    case 5:
      v10 = AMCP::Implementation::get_type_marker<std::vector<float>>();
      v11 = *(void (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32);
      *(_QWORD *)&v62 = 0;
      if (v11)
      {
        v11(3, a2, 0, &v62);
        v11 = (void (*)(uint64_t, uint64_t, _QWORD, __int128 *))v62;
      }
      if (v11 != (void (*)(uint64_t, uint64_t, _QWORD, __int128 *))v10)
        goto LABEL_30;
      v12 = *(char **)(a3 + 32);
      v65 = 0;
      if (v12)
      {
        ((void (*)(uint64_t, uint64_t, _QWORD, char **))v12)(3, a3, 0, &v65);
        v12 = v65;
      }
      if (v12 != (char *)v10)
      {
LABEL_30:
        AMCP::Thing::convert_to<std::vector<float>>(&v62, a2);
        AMCP::Thing::convert_to<std::vector<float>>(&v65, a3);
        v16 = (void *)v62;
        if (*((_QWORD *)&v62 + 1) - (_QWORD)v62 == v66 - (_QWORD)v65)
        {
          if ((_QWORD)v62 == *((_QWORD *)&v62 + 1))
          {
            v20 = 1;
            if (!v65)
            {
LABEL_42:
              if (v16)
                operator delete(v16);
              return v20;
            }
LABEL_41:
            operator delete(v65);
            goto LABEL_42;
          }
          v17 = v62 + 4;
          v18 = (float *)v65;
          do
          {
            v19 = *v18++;
            v20 = *(float *)(v17 - 4) == v19;
            v21 = *(float *)(v17 - 4) != v19 || v17 == *((_QWORD *)&v62 + 1);
            v17 += 4;
          }
          while (!v21);
        }
        else
        {
          v20 = 0;
        }
        if (!v65)
          goto LABEL_42;
        goto LABEL_41;
      }
      if (*(_QWORD *)(a2 + 32))
      {
        *(_QWORD *)&v62 = AMCP::Implementation::get_type_marker<std::vector<float>>();
        v13 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32))(4, a2, 0, &v62);
      }
      else
      {
        v13 = 0;
      }
      *(_QWORD *)&v62 = AMCP::Implementation::get_type_marker<std::vector<float>>();
      v52 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a3 + 32))(4, a3, 0, &v62);
      v54 = *(float **)v13;
      v53 = *(float **)(v13 + 8);
      v55 = *(float **)v52;
      if ((float *)((char *)v53 - *(_QWORD *)v13) == (float *)(*(_QWORD *)(v52 + 8) - *(_QWORD *)v52))
      {
        while (v54 != v53)
        {
          if (*v54 != *v55)
            return 0;
          ++v54;
          ++v55;
        }
        return 1;
      }
      return 0;
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<std::vector<BOOL>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<signed char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<unsigned char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<short>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<unsigned short>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<int>>()
        && !AMCP::is_one_of<std::vector<unsigned int>,std::vector<long>,std::vector<unsigned long>,std::vector<long long>,std::vector<unsigned long long>,std::vector<float>,std::vector<double>,std::vector<long double>,applesauce::CF::ArrayRef>(a4))
      {
        goto LABEL_141;
      }
      if (*(_QWORD *)(a2 + 32))
      {
        *(_QWORD *)&v62 = AMCP::Implementation::get_type_marker<std::vector<float>>();
        v15 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32))(4, a2, 0, &v62);
      }
      else
      {
        v15 = 0;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<std::vector<BOOL>>())
      {
        if (v15)
        {
          v23 = *(float **)v15;
          v22 = *(float **)(v15 + 8);
          v66 = 0;
          v67 = 0;
          v65 = 0;
          v24 = (char *)v22 - (char *)v23;
          if (v22 == v23)
            goto LABEL_89;
          v25 = v24 >> 2;
          std::vector<BOOL>::__vallocate[abi:ne180100](&v65, v24 >> 2);
          v26 = v66;
          v27 = v66 + v25;
          v66 += v25;
          if (v26)
          {
            v28 = v27 - 1;
            if (((v27 - 1) ^ (v26 - 1)) < 0x40)
              goto LABEL_81;
          }
          else
          {
            v28 = v27 - 1;
          }
          v45 = v28 >> 6;
          if (v27 >= 0x41)
            v46 = v45;
          else
            v46 = 0;
          *(_QWORD *)&v65[8 * v46] = 0;
LABEL_81:
          v47 = v26 & 0x3F;
          v48 = &v65[8 * (v26 >> 6)];
          do
          {
            v49 = 1 << v47;
            if (*v23 == 0.0)
              v50 = *(_QWORD *)v48 & ~v49;
            else
              v50 = *(_QWORD *)v48 | v49;
            *(_QWORD *)v48 = v50;
            ++v23;
            v48 += 8 * (v47 == 63);
            if (v47 == 63)
              v47 = 0;
            else
              ++v47;
          }
          while (v23 != v22);
LABEL_89:
          v64 = 0;
          v62 = 0u;
          v63 = 0u;
          std::vector<BOOL>::vector(&v62, (uint64_t)&v65);
          v64 = AMCP::Implementation::In_Place_Storage<std::vector<BOOL>>::dispatch;
          v51 = v65;
          if (!v65)
          {
LABEL_118:
            AMCP::swap((AMCP::Thing *)&v62, (AMCP::Thing *)a3, v14);
            if (v64)
              ((void (*)(_QWORD, __int128 *, _QWORD, _QWORD))v64)(0, &v62, 0, 0);
            return 0;
          }
LABEL_117:
          operator delete(v51);
          goto LABEL_118;
        }
LABEL_132:
        __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
      }
      if (*a4 == AMCP::Implementation::get_type_marker<std::vector<char>>())
      {
        if (!v15)
          goto LABEL_132;
        v30 = *(float **)v15;
        v29 = *(float **)(v15 + 8);
        v31 = (char *)v29 - (char *)v30;
        if (v29 == v30)
        {
          v32 = 0;
          v33 = 0;
        }
        else
        {
          if (v31 < 0)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          v32 = operator new(v31 >> 2);
          v33 = v32;
          do
          {
            v34 = *v30++;
            *v33++ = (int)v34;
          }
          while (v30 != v29);
        }
        v64 = 0;
        v62 = 0u;
        v63 = 0u;
        std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(&v62, v32, (uint64_t)v33, v33 - v32);
        v56 = (uint64_t (*)())AMCP::Implementation::In_Place_Storage<std::vector<char>>::dispatch;
      }
      else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<signed char>>())
      {
        if (!v15)
          goto LABEL_132;
        v36 = *(float **)v15;
        v35 = *(float **)(v15 + 8);
        v37 = (char *)v35 - (char *)v36;
        if (v35 == v36)
        {
          v32 = 0;
          v38 = 0;
        }
        else
        {
          if (v37 < 0)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          v32 = operator new(v37 >> 2);
          v38 = v32;
          do
          {
            v39 = *v36++;
            *v38++ = (int)v39;
          }
          while (v36 != v35);
        }
        v64 = 0;
        v62 = 0u;
        v63 = 0u;
        std::vector<signed char>::__init_with_size[abi:ne180100]<signed char *,signed char *>(&v62, v32, (uint64_t)v38, v38 - v32);
        v56 = (uint64_t (*)())AMCP::Implementation::In_Place_Storage<std::vector<signed char>>::dispatch;
      }
      else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned char>>())
      {
        if (!v15)
          goto LABEL_132;
        v41 = *(float **)v15;
        v40 = *(float **)(v15 + 8);
        v42 = (char *)v40 - (char *)v41;
        if (v40 == v41)
        {
          v32 = 0;
          v43 = 0;
        }
        else
        {
          if (v42 < 0)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          v32 = operator new(v42 >> 2);
          v43 = v32;
          do
          {
            v44 = *v41++;
            *v43++ = (int)v44;
          }
          while (v41 != v40);
        }
        v64 = 0;
        v62 = 0u;
        v63 = 0u;
        std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v62, v32, (uint64_t)v43, v43 - v32);
        v56 = (uint64_t (*)())AMCP::Implementation::In_Place_Storage<std::vector<unsigned char>>::dispatch;
      }
      else
      {
        if (*a4 != AMCP::Implementation::get_type_marker<std::vector<short>>())
        {
          if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned short>>())
          {
            AMCP::Implementation::create_vector_of_numbers_from<std::vector<float>,std::vector<unsigned short>>((uint64_t)&v62, (float **)v15);
          }
          else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<int>>())
          {
            AMCP::Implementation::create_vector_of_numbers_from<std::vector<float>,std::vector<int>>((uint64_t)&v62, (uint64_t *)v15);
          }
          else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned int>>())
          {
            AMCP::Implementation::create_vector_of_numbers_from<std::vector<float>,std::vector<unsigned int>>((uint64_t)&v62, (uint64_t *)v15);
          }
          else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long>>())
          {
            AMCP::Implementation::create_vector_of_numbers_from<std::vector<float>,std::vector<long>>((uint64_t)&v62, (float **)v15);
          }
          else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned long>>())
          {
            AMCP::Implementation::create_vector_of_numbers_from<std::vector<float>,std::vector<unsigned long>>((uint64_t)&v62, (float **)v15);
          }
          else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long long>>())
          {
            AMCP::Implementation::create_vector_of_numbers_from<std::vector<float>,std::vector<long long>>((uint64_t)&v62, (float **)v15);
          }
          else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned long long>>())
          {
            AMCP::Implementation::create_vector_of_numbers_from<std::vector<float>,std::vector<unsigned long long>>((uint64_t)&v62, (float **)v15);
          }
          else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<float>>())
          {
            AMCP::Implementation::create_vector_of_numbers_from<std::vector<float>,std::vector<float>>((uint64_t)&v62, v15);
          }
          else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<double>>())
          {
            AMCP::Implementation::create_vector_of_numbers_from<std::vector<float>,std::vector<double>>((uint64_t)&v62, (float **)v15);
          }
          else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long double>>())
          {
            AMCP::Implementation::create_vector_of_numbers_from<std::vector<float>,std::vector<long double>>((uint64_t)&v62, (float **)v15);
          }
          else if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
          {
            AMCP::Implementation::create_vector_of_numbers_from<std::vector<float>,applesauce::CF::ArrayRef>(&v62, v15);
          }
          else
          {
LABEL_141:
            v64 = 0;
            v62 = 0u;
            v63 = 0u;
          }
          goto LABEL_118;
        }
        if (!v15)
          goto LABEL_132;
        v58 = *(float **)v15;
        v57 = *(float **)(v15 + 8);
        v59 = (char *)v57 - (char *)v58;
        if (v57 == v58)
        {
          v32 = 0;
          v60 = 0;
        }
        else
        {
          if (v59 < 0)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          v32 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v59 >> 2);
          v60 = v32;
          do
          {
            v61 = *v58++;
            *(_WORD *)v60 = (int)v61;
            v60 += 2;
          }
          while (v58 != v57);
        }
        v64 = 0;
        v62 = 0u;
        v63 = 0u;
        std::vector<short>::__init_with_size[abi:ne180100]<short *,short *>(&v62, v32, (uint64_t)v60, (v60 - v32) >> 1);
        v56 = AMCP::Implementation::In_Place_Storage<std::vector<short>>::dispatch;
      }
      v64 = v56;
      if (!v32)
        goto LABEL_118;
      v51 = v32;
      goto LABEL_117;
    default:
      return result;
  }
}

void sub_1B5827F08(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  void *v14;

  if (v14)
    operator delete(v14);
  __clang_call_terminate(a1);
}

_QWORD *AMCP::Thing::convert_to<std::vector<float>>(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  std::bad_cast *exception;
  std::bad_cast *v10;
  std::bad_cast *v11;
  std::bad_cast *v12;
  std::bad_cast *v13;
  std::bad_cast *v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[2];
  uint64_t (*v18)(uint64_t, _OWORD *, _QWORD, uint64_t *);
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, _QWORD, _QWORD);

  if (!*(_QWORD *)(a2 + 32))
    goto LABEL_12;
  v4 = AMCP::Implementation::get_type_marker<std::vector<float>>();
  v5 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a2 + 32);
  v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))v4)
  {
    v19 = v4;
    v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (v6)
    {
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
      return std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a1, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 2);
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v16 = AMCP::Implementation::get_type_marker<std::vector<float>>();
  memset(v17, 0, sizeof(v17));
  v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v15 = v4;
  v8 = v18(4, v17, 0, &v15);
  if (!v8)
  {
    v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a1, *(const void **)v8, *(_QWORD *)(v8 + 8), (uint64_t)(*(_QWORD *)(v8 + 8) - *(_QWORD *)v8) >> 2);
  if (v18)
    return (_QWORD *)v18(0, v17, 0, 0);
  return result;
}

void sub_1B5828138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<float>,std::vector<unsigned short>>(uint64_t a1, float **a2)
{
  float *v3;
  float *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  float v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if (v5 < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v5 >> 2);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *(_WORD *)v7 = (int)v8;
      v7 += 2;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>((_QWORD *)a1, v6, (uint64_t)v7, (v7 - v6) >> 1);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned short>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B5828228(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<float>,std::vector<int>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  if (v4 == *a2)
  {
    v7 = 0;
    v9 = 0;
  }
  else
  {
    if (v5 < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5 >> 2);
    v7 = v6;
    v8 = 0;
    do
    {
      *(_DWORD *)&v6[v8] = (int)*(float *)(v3 + v8);
      v8 += 4;
    }
    while (v3 + v8 != v4);
    v9 = (uint64_t)&v6[v8];
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)a1, v7, v9, (v9 - (uint64_t)v7) >> 2);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<int>>::dispatch;
  if (v7)
    operator delete(v7);
}

void sub_1B582831C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<float>,std::vector<unsigned int>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  if (v4 == *a2)
  {
    v7 = 0;
    v9 = 0;
  }
  else
  {
    if (v5 < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5 >> 2);
    v7 = v6;
    v8 = 0;
    do
    {
      *(_DWORD *)&v6[v8] = *(float *)(v3 + v8);
      v8 += 4;
    }
    while (v3 + v8 != v4);
    v9 = (uint64_t)&v6[v8];
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)a1, v7, v9, (v9 - (uint64_t)v7) >> 2);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned int>>::dispatch;
  if (v7)
    operator delete(v7);
}

void sub_1B5828410(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<float>,std::vector<long>>(uint64_t a1, float **a2)
{
  float *v3;
  float *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  float v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if ((unint64_t)v5 >= 0x7FFFFFFFFFFFFFFDLL)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 2);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *(_QWORD *)v7 = (uint64_t)v8;
      v7 += 8;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>((_QWORD *)a1, v6, (uint64_t)v7, (v7 - v6) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B5828504(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<float>,std::vector<unsigned long>>(uint64_t a1, float **a2)
{
  float *v3;
  float *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  float v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if ((unint64_t)v5 >= 0x7FFFFFFFFFFFFFFDLL)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 2);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *(_QWORD *)v7 = (unint64_t)v8;
      v7 += 8;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)a1, v6, (uint64_t)v7, (v7 - v6) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned long>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B58285F8(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<float>,std::vector<long long>>(uint64_t a1, float **a2)
{
  float *v3;
  float *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  float v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if ((unint64_t)v5 >= 0x7FFFFFFFFFFFFFFDLL)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 2);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *(_QWORD *)v7 = (uint64_t)v8;
      v7 += 8;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((_QWORD *)a1, v6, (uint64_t)v7, (v7 - v6) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long long>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B58286EC(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<float>,std::vector<unsigned long long>>(uint64_t a1, float **a2)
{
  float *v3;
  float *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  float v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if ((unint64_t)v5 >= 0x7FFFFFFFFFFFFFFDLL)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 2);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *(_QWORD *)v7 = (unint64_t)v8;
      v7 += 8;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>((_QWORD *)a1, v6, (uint64_t)v7, (v7 - v6) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned long long>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B58287E0(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

_QWORD *AMCP::Implementation::create_vector_of_numbers_from<std::vector<float>,std::vector<float>>(uint64_t a1, uint64_t a2)
{
  _QWORD *result;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  result = std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)a1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<float>>::dispatch;
  return result;
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<float>,std::vector<double>>(uint64_t a1, float **a2)
{
  float *v3;
  float *v4;
  uint64_t v5;
  double *v6;
  double *v7;
  float v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if ((unint64_t)v5 >= 0x7FFFFFFFFFFFFFFDLL)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (double *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 2);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *v7++ = v8;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((_QWORD *)a1, v6, (uint64_t)v7, v7 - v6);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<double>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B5828940(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<float>,std::vector<long double>>(uint64_t a1, float **a2)
{
  float *v3;
  float *v4;
  uint64_t v5;
  double *v6;
  double *v7;
  float v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if ((unint64_t)v5 >= 0x7FFFFFFFFFFFFFFDLL)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (double *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 2);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *v7++ = v8;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long double>::__init_with_size[abi:ne180100]<long double *,long double *>((_QWORD *)a1, v6, (uint64_t)v7, v7 - v6);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long double>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B5828A34(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<float>,applesauce::CF::ArrayRef>(_QWORD *a1, uint64_t a2)
{
  __CFArray *Mutable;
  _DWORD *v5;
  _DWORD *v6;
  CFNumberRef v7;
  std::runtime_error *exception;
  _QWORD v9[2];

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B380]);
  v9[1] = Mutable;
  v5 = *(_DWORD **)a2;
  v6 = *(_DWORD **)(a2 + 8);
  while (v5 != v6)
  {
    LODWORD(v9[0]) = *v5;
    v7 = CFNumberCreate(0, kCFNumberFloatType, v9);
    if (!v7)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::NumberRef>(Mutable, v7);
    CFRelease(v7);
    ++v5;
  }
  mcp_applesauce::CF::Array_Builder::copy_array((applesauce::CF::ArrayRef *)v9, Mutable);
  a1[2] = 0;
  a1[3] = 0;
  *a1 = v9[0];
  a1[1] = 0;
  a1[4] = AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::dispatch;
  if (Mutable)
    CFRelease(Mutable);
}

void sub_1B5828B74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  mcp_applesauce::CF::Array_Builder::~Array_Builder((const void **)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<void const*>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B5828BFC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Implementation::In_Place_Storage<std::vector<unsigned long long>>::dispatch(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  void *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, _QWORD, __int128 *);
  char *v12;
  uint64_t v13;
  AMCP::Thing *v14;
  uint64_t v15;
  void *v16;
  char *v17;
  BOOL v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  _BYTE *v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  size_t v50;
  uint64_t (*v51)();
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  uint64_t (*v59)();
  char *v60;
  unint64_t v61;
  uint64_t v62;

  switch((int)result)
  {
    case 0:
      v7 = *(void **)a2;
      if (*(_QWORD *)a2)
      {
        *(_QWORD *)(a2 + 8) = v7;
        operator delete(v7);
      }
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      v8 = 0uLL;
      goto LABEL_9;
    case 1:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>((_QWORD *)a3, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
      result = 0;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned long long>>::dispatch;
      return result;
    case 2:
      result = 0;
      v8 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned long long>>::dispatch;
      *(_QWORD *)(a2 + 32) = 0;
LABEL_9:
      *(_OWORD *)a2 = v8;
      *(_OWORD *)(a2 + 16) = v8;
      return result;
    case 3:
      v9 = AMCP::Implementation::get_type_marker<std::vector<unsigned long long>>();
      result = 0;
      *a4 = v9;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned long long>>())
        return a2;
      else
        return 0;
    case 5:
      v10 = AMCP::Implementation::get_type_marker<std::vector<unsigned long long>>();
      v11 = *(void (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32);
      *(_QWORD *)&v57 = 0;
      if (v11)
      {
        v11(3, a2, 0, &v57);
        v11 = (void (*)(uint64_t, uint64_t, _QWORD, __int128 *))v57;
      }
      if (v11 != (void (*)(uint64_t, uint64_t, _QWORD, __int128 *))v10)
        goto LABEL_30;
      v12 = *(char **)(a3 + 32);
      v60 = 0;
      if (v12)
      {
        ((void (*)(uint64_t, uint64_t, _QWORD, char **))v12)(3, a3, 0, &v60);
        v12 = v60;
      }
      if (v12 == (char *)v10)
      {
        if (*(_QWORD *)(a2 + 32))
        {
          *(_QWORD *)&v57 = AMCP::Implementation::get_type_marker<std::vector<unsigned long long>>();
          v13 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32))(4, a2, 0, &v57);
        }
        else
        {
          v13 = 0;
        }
        *(_QWORD *)&v57 = AMCP::Implementation::get_type_marker<std::vector<unsigned long long>>();
        v49 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a3 + 32))(4, a3, 0, &v57);
        v50 = *(_QWORD *)(v13 + 8) - *(_QWORD *)v13;
        if (v50 == *(_QWORD *)(v49 + 8) - *(_QWORD *)v49 && !memcmp(*(const void **)v13, *(const void **)v49, v50))
          return 1;
      }
      else
      {
LABEL_30:
        AMCP::Thing::convert_to<std::vector<unsigned long long>>(&v57, a2);
        AMCP::Thing::convert_to<std::vector<unsigned long long>>(&v60, a3);
        v16 = (void *)v57;
        v17 = v60;
        v18 = *((_QWORD *)&v57 + 1) - (_QWORD)v57 == v61 - (_QWORD)v60
           && memcmp((const void *)v57, v60, *((_QWORD *)&v57 + 1) - v57) == 0;
        if (v17)
          operator delete(v17);
        if (v16)
          operator delete(v16);
        if (v18)
          return 1;
      }
      return 0;
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<std::vector<BOOL>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<signed char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<unsigned char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<short>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<unsigned short>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<int>>()
        && !AMCP::is_one_of<std::vector<unsigned int>,std::vector<long>,std::vector<unsigned long>,std::vector<long long>,std::vector<unsigned long long>,std::vector<float>,std::vector<double>,std::vector<long double>,applesauce::CF::ArrayRef>(a4))
      {
        goto LABEL_131;
      }
      if (*(_QWORD *)(a2 + 32))
      {
        *(_QWORD *)&v57 = AMCP::Implementation::get_type_marker<std::vector<unsigned long long>>();
        v15 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32))(4, a2, 0, &v57);
      }
      else
      {
        v15 = 0;
      }
      if (*a4 != AMCP::Implementation::get_type_marker<std::vector<BOOL>>())
      {
        if (*a4 == AMCP::Implementation::get_type_marker<std::vector<char>>())
        {
          if (v15)
          {
            v27 = *(uint64_t **)v15;
            v26 = *(uint64_t **)(v15 + 8);
            v28 = (char *)v26 - (char *)v27;
            if (v26 == v27)
            {
              v29 = 0;
              v30 = 0;
            }
            else
            {
              if (v28 < 0)
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              v29 = operator new(v28 >> 3);
              v30 = v29;
              do
              {
                v31 = *v27++;
                *v30++ = v31;
              }
              while (v27 != v26);
            }
            v59 = 0;
            v57 = 0u;
            v58 = 0u;
            std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(&v57, v29, (uint64_t)v30, v30 - v29);
            v51 = (uint64_t (*)())AMCP::Implementation::In_Place_Storage<std::vector<char>>::dispatch;
LABEL_105:
            v59 = v51;
            if (!v29)
              goto LABEL_108;
            v48 = v29;
            goto LABEL_107;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<signed char>>())
        {
          if (v15)
          {
            v33 = *(uint64_t **)v15;
            v32 = *(uint64_t **)(v15 + 8);
            v34 = (char *)v32 - (char *)v33;
            if (v32 == v33)
            {
              v29 = 0;
              v35 = 0;
            }
            else
            {
              if (v34 < 0)
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              v29 = operator new(v34 >> 3);
              v35 = v29;
              do
              {
                v36 = *v33++;
                *v35++ = v36;
              }
              while (v33 != v32);
            }
            v59 = 0;
            v57 = 0u;
            v58 = 0u;
            std::vector<signed char>::__init_with_size[abi:ne180100]<signed char *,signed char *>(&v57, v29, (uint64_t)v35, v35 - v29);
            v51 = (uint64_t (*)())AMCP::Implementation::In_Place_Storage<std::vector<signed char>>::dispatch;
            goto LABEL_105;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned char>>())
        {
          if (v15)
          {
            v38 = *(uint64_t **)v15;
            v37 = *(uint64_t **)(v15 + 8);
            v39 = (char *)v37 - (char *)v38;
            if (v37 == v38)
            {
              v29 = 0;
              v40 = 0;
            }
            else
            {
              if (v39 < 0)
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              v29 = operator new(v39 >> 3);
              v40 = v29;
              do
              {
                v41 = *v38++;
                *v40++ = v41;
              }
              while (v38 != v37);
            }
            v59 = 0;
            v57 = 0u;
            v58 = 0u;
            std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v57, v29, (uint64_t)v40, v40 - v29);
            v51 = (uint64_t (*)())AMCP::Implementation::In_Place_Storage<std::vector<unsigned char>>::dispatch;
            goto LABEL_105;
          }
        }
        else
        {
          if (*a4 != AMCP::Implementation::get_type_marker<std::vector<short>>())
          {
            if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned short>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long long>,std::vector<unsigned short>>((uint64_t)&v57, (uint64_t **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<int>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long long>,std::vector<int>>((uint64_t)&v57, (uint64_t **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned int>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long long>,std::vector<unsigned int>>((uint64_t)&v57, (uint64_t **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long long>,std::vector<long>>((uint64_t)&v57, (uint64_t *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long long>,std::vector<unsigned long>>((uint64_t)&v57, (uint64_t *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long long>,std::vector<long long>>((uint64_t)&v57, (uint64_t *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned long long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long long>,std::vector<unsigned long long>>((uint64_t)&v57, v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<float>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long long>,std::vector<float>>((uint64_t)&v57, (unint64_t **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<double>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long long>,std::vector<double>>((uint64_t)&v57, (uint64_t *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long double>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long long>,std::vector<long double>>((uint64_t)&v57, (uint64_t *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long long>,applesauce::CF::ArrayRef>(&v57, (uint64_t **)v15);
            }
            else
            {
LABEL_131:
              v59 = 0;
              v57 = 0u;
              v58 = 0u;
            }
            goto LABEL_108;
          }
          if (v15)
          {
            v53 = *(uint64_t **)v15;
            v52 = *(uint64_t **)(v15 + 8);
            v54 = (char *)v52 - (char *)v53;
            if (v52 == v53)
            {
              v29 = 0;
              v55 = 0;
            }
            else
            {
              if (v54 < 0)
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              v29 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v54 >> 3);
              v55 = v29;
              do
              {
                v56 = *v53++;
                *(_WORD *)v55 = v56;
                v55 += 2;
              }
              while (v53 != v52);
            }
            v59 = 0;
            v57 = 0u;
            v58 = 0u;
            std::vector<short>::__init_with_size[abi:ne180100]<short *,short *>(&v57, v29, (uint64_t)v55, (v55 - v29) >> 1);
            v51 = AMCP::Implementation::In_Place_Storage<std::vector<short>>::dispatch;
            goto LABEL_105;
          }
        }
LABEL_122:
        __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
      }
      if (!v15)
        goto LABEL_122;
      v20 = *(uint64_t **)v15;
      v19 = *(uint64_t **)(v15 + 8);
      v61 = 0;
      v62 = 0;
      v60 = 0;
      v21 = (char *)v19 - (char *)v20;
      if (v19 == v20)
        goto LABEL_80;
      v22 = v21 >> 3;
      std::vector<BOOL>::__vallocate[abi:ne180100](&v60, v21 >> 3);
      v23 = v61;
      v24 = v61 + v22;
      v61 += v22;
      if (v23)
      {
        v25 = v24 - 1;
        if (((v24 - 1) ^ (v23 - 1)) < 0x40)
          goto LABEL_72;
      }
      else
      {
        v25 = v24 - 1;
      }
      v42 = v25 >> 6;
      if (v24 >= 0x41)
        v43 = v42;
      else
        v43 = 0;
      *(_QWORD *)&v60[8 * v43] = 0;
LABEL_72:
      v44 = v23 & 0x3F;
      v45 = &v60[8 * (v23 >> 6)];
      do
      {
        v46 = 1 << v44;
        if (*v20)
          v47 = *(_QWORD *)v45 | v46;
        else
          v47 = *(_QWORD *)v45 & ~v46;
        *(_QWORD *)v45 = v47;
        ++v20;
        v45 += 8 * (v44 == 63);
        if (v44 == 63)
          v44 = 0;
        else
          ++v44;
      }
      while (v20 != v19);
LABEL_80:
      v59 = 0;
      v57 = 0u;
      v58 = 0u;
      std::vector<BOOL>::vector(&v57, (uint64_t)&v60);
      v59 = AMCP::Implementation::In_Place_Storage<std::vector<BOOL>>::dispatch;
      v48 = v60;
      if (v60)
LABEL_107:
        operator delete(v48);
LABEL_108:
      AMCP::swap((AMCP::Thing *)&v57, (AMCP::Thing *)a3, v14);
      if (v59)
        ((void (*)(_QWORD, __int128 *, _QWORD, _QWORD))v59)(0, &v57, 0, 0);
      return 0;
    default:
      return result;
  }
}

void sub_1B58293E8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  void *v14;

  if (v14)
    operator delete(v14);
  __clang_call_terminate(a1);
}

_QWORD *AMCP::Thing::convert_to<std::vector<unsigned long long>>(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  std::bad_cast *exception;
  std::bad_cast *v10;
  std::bad_cast *v11;
  std::bad_cast *v12;
  std::bad_cast *v13;
  std::bad_cast *v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[2];
  uint64_t (*v18)(uint64_t, _OWORD *, _QWORD, uint64_t *);
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, _QWORD, _QWORD);

  if (!*(_QWORD *)(a2 + 32))
    goto LABEL_12;
  v4 = AMCP::Implementation::get_type_marker<std::vector<unsigned long long>>();
  v5 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a2 + 32);
  v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))v4)
  {
    v19 = v4;
    v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (v6)
    {
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
      return std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(a1, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 3);
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v16 = AMCP::Implementation::get_type_marker<std::vector<unsigned long long>>();
  memset(v17, 0, sizeof(v17));
  v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v15 = v4;
  v8 = v18(4, v17, 0, &v15);
  if (!v8)
  {
    v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(a1, *(const void **)v8, *(_QWORD *)(v8 + 8), (uint64_t)(*(_QWORD *)(v8 + 8) - *(_QWORD *)v8) >> 3);
  if (v18)
    return (_QWORD *)v18(0, v17, 0, 0);
  return result;
}

void sub_1B5829618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long long>,std::vector<unsigned short>>(uint64_t a1, uint64_t **a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if (v5 < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v5 >> 3);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *(_WORD *)v7 = v8;
      v7 += 2;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>((_QWORD *)a1, v6, (uint64_t)v7, (v7 - v6) >> 1);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned short>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B5829704(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long long>,std::vector<int>>(uint64_t a1, uint64_t **a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if (v5 < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5 >> 3);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *(_DWORD *)v7 = v8;
      v7 += 4;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)a1, v6, (uint64_t)v7, (v7 - v6) >> 2);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<int>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B58297E8(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long long>,std::vector<unsigned int>>(uint64_t a1, uint64_t **a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if (v5 < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5 >> 3);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *(_DWORD *)v7 = v8;
      v7 += 4;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)a1, v6, (uint64_t)v7, (v7 - v6) >> 2);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned int>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B58298CC(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long long>,std::vector<long>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  if (v4 == *a2)
  {
    v7 = 0;
    v9 = 0;
  }
  else
  {
    if (v5 < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 3);
    v7 = v6;
    v8 = 0;
    do
    {
      *(_QWORD *)&v6[v8] = *(_QWORD *)(v3 + v8);
      v8 += 8;
    }
    while (v3 + v8 != v4);
    v9 = (uint64_t)&v6[v8];
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>((_QWORD *)a1, v7, v9, (v9 - (uint64_t)v7) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long>>::dispatch;
  if (v7)
    operator delete(v7);
}

void sub_1B58299BC(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long long>,std::vector<unsigned long>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  if (v4 == *a2)
  {
    v7 = 0;
    v9 = 0;
  }
  else
  {
    if (v5 < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 3);
    v7 = v6;
    v8 = 0;
    do
    {
      *(_QWORD *)&v6[v8] = *(_QWORD *)(v3 + v8);
      v8 += 8;
    }
    while (v3 + v8 != v4);
    v9 = (uint64_t)&v6[v8];
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)a1, v7, v9, (v9 - (uint64_t)v7) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned long>>::dispatch;
  if (v7)
    operator delete(v7);
}

void sub_1B5829AAC(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long long>,std::vector<long long>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  if (v4 == *a2)
  {
    v7 = 0;
    v9 = 0;
  }
  else
  {
    if (v5 < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 3);
    v7 = v6;
    v8 = 0;
    do
    {
      *(_QWORD *)&v6[v8] = *(_QWORD *)(v3 + v8);
      v8 += 8;
    }
    while (v3 + v8 != v4);
    v9 = (uint64_t)&v6[v8];
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((_QWORD *)a1, v7, v9, (v9 - (uint64_t)v7) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long long>>::dispatch;
  if (v7)
    operator delete(v7);
}

void sub_1B5829B9C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

_QWORD *AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long long>,std::vector<unsigned long long>>(uint64_t a1, uint64_t a2)
{
  _QWORD *result;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  result = std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>((_QWORD *)a1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned long long>>::dispatch;
  return result;
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long long>,std::vector<float>>(uint64_t a1, unint64_t **a2)
{
  unint64_t *v3;
  unint64_t *v4;
  uint64_t v5;
  float *v6;
  float *v7;
  unint64_t v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if (v5 < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (float *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5 >> 3);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *v7++ = (float)v8;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)a1, v6, (uint64_t)v7, v7 - v6);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<float>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B5829CF0(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long long>,std::vector<double>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  if (v4 == *a2)
  {
    v7 = 0;
    v9 = 0;
  }
  else
  {
    if (v5 < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 3);
    v7 = v6;
    v8 = 0;
    do
    {
      *(double *)&v6[v8] = (double)*(unint64_t *)(v3 + v8);
      v8 += 8;
    }
    while (v3 + v8 != v4);
    v9 = (uint64_t)&v6[v8];
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((_QWORD *)a1, v7, v9, (v9 - (uint64_t)v7) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<double>>::dispatch;
  if (v7)
    operator delete(v7);
}

void sub_1B5829DE4(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long long>,std::vector<long double>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  if (v4 == *a2)
  {
    v7 = 0;
    v9 = 0;
  }
  else
  {
    if (v5 < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 3);
    v7 = v6;
    v8 = 0;
    do
    {
      *(double *)&v6[v8] = (double)*(unint64_t *)(v3 + v8);
      v8 += 8;
    }
    while (v3 + v8 != v4);
    v9 = (uint64_t)&v6[v8];
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long double>::__init_with_size[abi:ne180100]<long double *,long double *>((_QWORD *)a1, v7, v9, (v9 - (uint64_t)v7) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long double>>::dispatch;
  if (v7)
    operator delete(v7);
}

void sub_1B5829ED8(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long long>,applesauce::CF::ArrayRef>(_QWORD *a1, uint64_t **a2)
{
  __CFArray *Mutable;
  uint64_t *v5;
  uint64_t *v6;
  CFNumberRef v7;
  std::runtime_error *exception;
  uint64_t valuePtr;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B380]);
  v5 = *a2;
  v6 = a2[1];
  while (v5 != v6)
  {
    valuePtr = *v5;
    v7 = CFNumberCreate(0, kCFNumberLongLongType, &valuePtr);
    if (!v7)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::NumberRef>(Mutable, v7);
    CFRelease(v7);
    ++v5;
  }
  mcp_applesauce::CF::Array_Builder::copy_array((applesauce::CF::ArrayRef *)&valuePtr, Mutable);
  a1[2] = 0;
  a1[3] = 0;
  *a1 = valuePtr;
  a1[1] = 0;
  a1[4] = AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::dispatch;
  if (Mutable)
    CFRelease(Mutable);
}

void sub_1B582A018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  mcp_applesauce::CF::Array_Builder::~Array_Builder(&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<void const*>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B582A0A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Implementation::In_Place_Storage<std::vector<long long>>::dispatch(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  void *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, _QWORD, __int128 *);
  char *v12;
  uint64_t v13;
  AMCP::Thing *v14;
  uint64_t v15;
  void *v16;
  char *v17;
  BOOL v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  _BYTE *v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  size_t v50;
  uint64_t (*v51)();
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  uint64_t (*v59)();
  char *v60;
  unint64_t v61;
  uint64_t v62;

  switch((int)result)
  {
    case 0:
      v7 = *(void **)a2;
      if (*(_QWORD *)a2)
      {
        *(_QWORD *)(a2 + 8) = v7;
        operator delete(v7);
      }
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      v8 = 0uLL;
      goto LABEL_9;
    case 1:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((_QWORD *)a3, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
      result = 0;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long long>>::dispatch;
      return result;
    case 2:
      result = 0;
      v8 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long long>>::dispatch;
      *(_QWORD *)(a2 + 32) = 0;
LABEL_9:
      *(_OWORD *)a2 = v8;
      *(_OWORD *)(a2 + 16) = v8;
      return result;
    case 3:
      v9 = AMCP::Implementation::get_type_marker<std::vector<long long>>();
      result = 0;
      *a4 = v9;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long long>>())
        return a2;
      else
        return 0;
    case 5:
      v10 = AMCP::Implementation::get_type_marker<std::vector<long long>>();
      v11 = *(void (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32);
      *(_QWORD *)&v57 = 0;
      if (v11)
      {
        v11(3, a2, 0, &v57);
        v11 = (void (*)(uint64_t, uint64_t, _QWORD, __int128 *))v57;
      }
      if (v11 != (void (*)(uint64_t, uint64_t, _QWORD, __int128 *))v10)
        goto LABEL_30;
      v12 = *(char **)(a3 + 32);
      v60 = 0;
      if (v12)
      {
        ((void (*)(uint64_t, uint64_t, _QWORD, char **))v12)(3, a3, 0, &v60);
        v12 = v60;
      }
      if (v12 == (char *)v10)
      {
        if (*(_QWORD *)(a2 + 32))
        {
          *(_QWORD *)&v57 = AMCP::Implementation::get_type_marker<std::vector<long long>>();
          v13 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32))(4, a2, 0, &v57);
        }
        else
        {
          v13 = 0;
        }
        *(_QWORD *)&v57 = AMCP::Implementation::get_type_marker<std::vector<long long>>();
        v49 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a3 + 32))(4, a3, 0, &v57);
        v50 = *(_QWORD *)(v13 + 8) - *(_QWORD *)v13;
        if (v50 == *(_QWORD *)(v49 + 8) - *(_QWORD *)v49 && !memcmp(*(const void **)v13, *(const void **)v49, v50))
          return 1;
      }
      else
      {
LABEL_30:
        AMCP::Thing::convert_to<std::vector<long long>>(&v57, a2);
        AMCP::Thing::convert_to<std::vector<long long>>(&v60, a3);
        v16 = (void *)v57;
        v17 = v60;
        v18 = *((_QWORD *)&v57 + 1) - (_QWORD)v57 == v61 - (_QWORD)v60
           && memcmp((const void *)v57, v60, *((_QWORD *)&v57 + 1) - v57) == 0;
        if (v17)
          operator delete(v17);
        if (v16)
          operator delete(v16);
        if (v18)
          return 1;
      }
      return 0;
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<std::vector<BOOL>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<signed char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<unsigned char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<short>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<unsigned short>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<int>>()
        && !AMCP::is_one_of<std::vector<unsigned int>,std::vector<long>,std::vector<unsigned long>,std::vector<long long>,std::vector<unsigned long long>,std::vector<float>,std::vector<double>,std::vector<long double>,applesauce::CF::ArrayRef>(a4))
      {
        goto LABEL_131;
      }
      if (*(_QWORD *)(a2 + 32))
      {
        *(_QWORD *)&v57 = AMCP::Implementation::get_type_marker<std::vector<long long>>();
        v15 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32))(4, a2, 0, &v57);
      }
      else
      {
        v15 = 0;
      }
      if (*a4 != AMCP::Implementation::get_type_marker<std::vector<BOOL>>())
      {
        if (*a4 == AMCP::Implementation::get_type_marker<std::vector<char>>())
        {
          if (v15)
          {
            v27 = *(uint64_t **)v15;
            v26 = *(uint64_t **)(v15 + 8);
            v28 = (char *)v26 - (char *)v27;
            if (v26 == v27)
            {
              v29 = 0;
              v30 = 0;
            }
            else
            {
              if (v28 < 0)
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              v29 = operator new(v28 >> 3);
              v30 = v29;
              do
              {
                v31 = *v27++;
                *v30++ = v31;
              }
              while (v27 != v26);
            }
            v59 = 0;
            v57 = 0u;
            v58 = 0u;
            std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(&v57, v29, (uint64_t)v30, v30 - v29);
            v51 = (uint64_t (*)())AMCP::Implementation::In_Place_Storage<std::vector<char>>::dispatch;
LABEL_105:
            v59 = v51;
            if (!v29)
              goto LABEL_108;
            v48 = v29;
            goto LABEL_107;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<signed char>>())
        {
          if (v15)
          {
            v33 = *(uint64_t **)v15;
            v32 = *(uint64_t **)(v15 + 8);
            v34 = (char *)v32 - (char *)v33;
            if (v32 == v33)
            {
              v29 = 0;
              v35 = 0;
            }
            else
            {
              if (v34 < 0)
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              v29 = operator new(v34 >> 3);
              v35 = v29;
              do
              {
                v36 = *v33++;
                *v35++ = v36;
              }
              while (v33 != v32);
            }
            v59 = 0;
            v57 = 0u;
            v58 = 0u;
            std::vector<signed char>::__init_with_size[abi:ne180100]<signed char *,signed char *>(&v57, v29, (uint64_t)v35, v35 - v29);
            v51 = (uint64_t (*)())AMCP::Implementation::In_Place_Storage<std::vector<signed char>>::dispatch;
            goto LABEL_105;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned char>>())
        {
          if (v15)
          {
            v38 = *(uint64_t **)v15;
            v37 = *(uint64_t **)(v15 + 8);
            v39 = (char *)v37 - (char *)v38;
            if (v37 == v38)
            {
              v29 = 0;
              v40 = 0;
            }
            else
            {
              if (v39 < 0)
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              v29 = operator new(v39 >> 3);
              v40 = v29;
              do
              {
                v41 = *v38++;
                *v40++ = v41;
              }
              while (v38 != v37);
            }
            v59 = 0;
            v57 = 0u;
            v58 = 0u;
            std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v57, v29, (uint64_t)v40, v40 - v29);
            v51 = (uint64_t (*)())AMCP::Implementation::In_Place_Storage<std::vector<unsigned char>>::dispatch;
            goto LABEL_105;
          }
        }
        else
        {
          if (*a4 != AMCP::Implementation::get_type_marker<std::vector<short>>())
          {
            if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned short>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<long long>,std::vector<unsigned short>>((uint64_t)&v57, (uint64_t **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<int>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<long long>,std::vector<int>>((uint64_t)&v57, (uint64_t **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned int>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<long long>,std::vector<unsigned int>>((uint64_t)&v57, (uint64_t **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<long long>,std::vector<long>>((uint64_t)&v57, (uint64_t *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<long long>,std::vector<unsigned long>>((uint64_t)&v57, (uint64_t *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<long long>,std::vector<long long>>((uint64_t)&v57, v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned long long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<long long>,std::vector<unsigned long long>>((uint64_t)&v57, (uint64_t *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<float>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<long long>,std::vector<float>>((uint64_t)&v57, (uint64_t **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<double>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<long long>,std::vector<double>>((uint64_t)&v57, (uint64_t *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long double>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<long long>,std::vector<long double>>((uint64_t)&v57, (uint64_t *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<long long>,applesauce::CF::ArrayRef>(&v57, (uint64_t **)v15);
            }
            else
            {
LABEL_131:
              v59 = 0;
              v57 = 0u;
              v58 = 0u;
            }
            goto LABEL_108;
          }
          if (v15)
          {
            v53 = *(uint64_t **)v15;
            v52 = *(uint64_t **)(v15 + 8);
            v54 = (char *)v52 - (char *)v53;
            if (v52 == v53)
            {
              v29 = 0;
              v55 = 0;
            }
            else
            {
              if (v54 < 0)
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              v29 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v54 >> 3);
              v55 = v29;
              do
              {
                v56 = *v53++;
                *(_WORD *)v55 = v56;
                v55 += 2;
              }
              while (v53 != v52);
            }
            v59 = 0;
            v57 = 0u;
            v58 = 0u;
            std::vector<short>::__init_with_size[abi:ne180100]<short *,short *>(&v57, v29, (uint64_t)v55, (v55 - v29) >> 1);
            v51 = AMCP::Implementation::In_Place_Storage<std::vector<short>>::dispatch;
            goto LABEL_105;
          }
        }
LABEL_122:
        __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
      }
      if (!v15)
        goto LABEL_122;
      v20 = *(uint64_t **)v15;
      v19 = *(uint64_t **)(v15 + 8);
      v61 = 0;
      v62 = 0;
      v60 = 0;
      v21 = (char *)v19 - (char *)v20;
      if (v19 == v20)
        goto LABEL_80;
      v22 = v21 >> 3;
      std::vector<BOOL>::__vallocate[abi:ne180100](&v60, v21 >> 3);
      v23 = v61;
      v24 = v61 + v22;
      v61 += v22;
      if (v23)
      {
        v25 = v24 - 1;
        if (((v24 - 1) ^ (v23 - 1)) < 0x40)
          goto LABEL_72;
      }
      else
      {
        v25 = v24 - 1;
      }
      v42 = v25 >> 6;
      if (v24 >= 0x41)
        v43 = v42;
      else
        v43 = 0;
      *(_QWORD *)&v60[8 * v43] = 0;
LABEL_72:
      v44 = v23 & 0x3F;
      v45 = &v60[8 * (v23 >> 6)];
      do
      {
        v46 = 1 << v44;
        if (*v20)
          v47 = *(_QWORD *)v45 | v46;
        else
          v47 = *(_QWORD *)v45 & ~v46;
        *(_QWORD *)v45 = v47;
        ++v20;
        v45 += 8 * (v44 == 63);
        if (v44 == 63)
          v44 = 0;
        else
          ++v44;
      }
      while (v20 != v19);
LABEL_80:
      v59 = 0;
      v57 = 0u;
      v58 = 0u;
      std::vector<BOOL>::vector(&v57, (uint64_t)&v60);
      v59 = AMCP::Implementation::In_Place_Storage<std::vector<BOOL>>::dispatch;
      v48 = v60;
      if (v60)
LABEL_107:
        operator delete(v48);
LABEL_108:
      AMCP::swap((AMCP::Thing *)&v57, (AMCP::Thing *)a3, v14);
      if (v59)
        ((void (*)(_QWORD, __int128 *, _QWORD, _QWORD))v59)(0, &v57, 0, 0);
      return 0;
    default:
      return result;
  }
}

void sub_1B582A88C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  void *v14;

  if (v14)
    operator delete(v14);
  __clang_call_terminate(a1);
}

_QWORD *AMCP::Thing::convert_to<std::vector<long long>>(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  std::bad_cast *exception;
  std::bad_cast *v10;
  std::bad_cast *v11;
  std::bad_cast *v12;
  std::bad_cast *v13;
  std::bad_cast *v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[2];
  uint64_t (*v18)(uint64_t, _OWORD *, _QWORD, uint64_t *);
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, _QWORD, _QWORD);

  if (!*(_QWORD *)(a2 + 32))
    goto LABEL_12;
  v4 = AMCP::Implementation::get_type_marker<std::vector<long long>>();
  v5 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a2 + 32);
  v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))v4)
  {
    v19 = v4;
    v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (v6)
    {
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
      return std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(a1, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 3);
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v16 = AMCP::Implementation::get_type_marker<std::vector<long long>>();
  memset(v17, 0, sizeof(v17));
  v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v15 = v4;
  v8 = v18(4, v17, 0, &v15);
  if (!v8)
  {
    v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(a1, *(const void **)v8, *(_QWORD *)(v8 + 8), (uint64_t)(*(_QWORD *)(v8 + 8) - *(_QWORD *)v8) >> 3);
  if (v18)
    return (_QWORD *)v18(0, v17, 0, 0);
  return result;
}

void sub_1B582AABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<long long>,std::vector<unsigned short>>(uint64_t a1, uint64_t **a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if (v5 < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v5 >> 3);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *(_WORD *)v7 = v8;
      v7 += 2;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>((_QWORD *)a1, v6, (uint64_t)v7, (v7 - v6) >> 1);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned short>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B582ABA8(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<long long>,std::vector<int>>(uint64_t a1, uint64_t **a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if (v5 < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5 >> 3);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *(_DWORD *)v7 = v8;
      v7 += 4;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)a1, v6, (uint64_t)v7, (v7 - v6) >> 2);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<int>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B582AC8C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<long long>,std::vector<unsigned int>>(uint64_t a1, uint64_t **a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if (v5 < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5 >> 3);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *(_DWORD *)v7 = v8;
      v7 += 4;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)a1, v6, (uint64_t)v7, (v7 - v6) >> 2);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned int>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B582AD70(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<long long>,std::vector<long>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  if (v4 == *a2)
  {
    v7 = 0;
    v9 = 0;
  }
  else
  {
    if (v5 < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 3);
    v7 = v6;
    v8 = 0;
    do
    {
      *(_QWORD *)&v6[v8] = *(_QWORD *)(v3 + v8);
      v8 += 8;
    }
    while (v3 + v8 != v4);
    v9 = (uint64_t)&v6[v8];
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>((_QWORD *)a1, v7, v9, (v9 - (uint64_t)v7) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long>>::dispatch;
  if (v7)
    operator delete(v7);
}

void sub_1B582AE60(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<long long>,std::vector<unsigned long>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  if (v4 == *a2)
  {
    v7 = 0;
    v9 = 0;
  }
  else
  {
    if (v5 < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 3);
    v7 = v6;
    v8 = 0;
    do
    {
      *(_QWORD *)&v6[v8] = *(_QWORD *)(v3 + v8);
      v8 += 8;
    }
    while (v3 + v8 != v4);
    v9 = (uint64_t)&v6[v8];
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)a1, v7, v9, (v9 - (uint64_t)v7) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned long>>::dispatch;
  if (v7)
    operator delete(v7);
}

void sub_1B582AF50(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

_QWORD *AMCP::Implementation::create_vector_of_numbers_from<std::vector<long long>,std::vector<long long>>(uint64_t a1, uint64_t a2)
{
  _QWORD *result;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  result = std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((_QWORD *)a1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long long>>::dispatch;
  return result;
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<long long>,std::vector<unsigned long long>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  if (v4 == *a2)
  {
    v7 = 0;
    v9 = 0;
  }
  else
  {
    if (v5 < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 3);
    v7 = v6;
    v8 = 0;
    do
    {
      *(_QWORD *)&v6[v8] = *(_QWORD *)(v3 + v8);
      v8 += 8;
    }
    while (v3 + v8 != v4);
    v9 = (uint64_t)&v6[v8];
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>((_QWORD *)a1, v7, v9, (v9 - (uint64_t)v7) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned long long>>::dispatch;
  if (v7)
    operator delete(v7);
}

void sub_1B582B0AC(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<long long>,std::vector<float>>(uint64_t a1, uint64_t **a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  float *v6;
  float *v7;
  uint64_t v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if (v5 < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (float *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5 >> 3);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *v7++ = (float)v8;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)a1, v6, (uint64_t)v7, v7 - v6);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<float>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B582B194(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<long long>,std::vector<double>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  if (v4 == *a2)
  {
    v7 = 0;
    v9 = 0;
  }
  else
  {
    if (v5 < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 3);
    v7 = v6;
    v8 = 0;
    do
    {
      *(double *)&v6[v8] = (double)*(uint64_t *)(v3 + v8);
      v8 += 8;
    }
    while (v3 + v8 != v4);
    v9 = (uint64_t)&v6[v8];
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((_QWORD *)a1, v7, v9, (v9 - (uint64_t)v7) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<double>>::dispatch;
  if (v7)
    operator delete(v7);
}

void sub_1B582B288(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<long long>,std::vector<long double>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  if (v4 == *a2)
  {
    v7 = 0;
    v9 = 0;
  }
  else
  {
    if (v5 < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 3);
    v7 = v6;
    v8 = 0;
    do
    {
      *(double *)&v6[v8] = (double)*(uint64_t *)(v3 + v8);
      v8 += 8;
    }
    while (v3 + v8 != v4);
    v9 = (uint64_t)&v6[v8];
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long double>::__init_with_size[abi:ne180100]<long double *,long double *>((_QWORD *)a1, v7, v9, (v9 - (uint64_t)v7) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long double>>::dispatch;
  if (v7)
    operator delete(v7);
}

void sub_1B582B37C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<long long>,applesauce::CF::ArrayRef>(_QWORD *a1, uint64_t **a2)
{
  __CFArray *Mutable;
  uint64_t *v5;
  uint64_t *v6;
  CFNumberRef v7;
  std::runtime_error *exception;
  uint64_t valuePtr;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B380]);
  v5 = *a2;
  v6 = a2[1];
  while (v5 != v6)
  {
    valuePtr = *v5;
    v7 = CFNumberCreate(0, kCFNumberLongLongType, &valuePtr);
    if (!v7)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::NumberRef>(Mutable, v7);
    CFRelease(v7);
    ++v5;
  }
  mcp_applesauce::CF::Array_Builder::copy_array((applesauce::CF::ArrayRef *)&valuePtr, Mutable);
  a1[2] = 0;
  a1[3] = 0;
  *a1 = valuePtr;
  a1[1] = 0;
  a1[4] = AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::dispatch;
  if (Mutable)
    CFRelease(Mutable);
}

void sub_1B582B4BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  mcp_applesauce::CF::Array_Builder::~Array_Builder(&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<void const*>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B582B544(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Implementation::In_Place_Storage<std::vector<unsigned long>>::dispatch(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  void *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, _QWORD, __int128 *);
  char *v12;
  uint64_t v13;
  AMCP::Thing *v14;
  uint64_t v15;
  void *v16;
  char *v17;
  BOOL v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  _BYTE *v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  size_t v50;
  uint64_t (*v51)();
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  uint64_t (*v59)();
  char *v60;
  unint64_t v61;
  uint64_t v62;

  switch((int)result)
  {
    case 0:
      v7 = *(void **)a2;
      if (*(_QWORD *)a2)
      {
        *(_QWORD *)(a2 + 8) = v7;
        operator delete(v7);
      }
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      v8 = 0uLL;
      goto LABEL_9;
    case 1:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)a3, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
      result = 0;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned long>>::dispatch;
      return result;
    case 2:
      result = 0;
      v8 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned long>>::dispatch;
      *(_QWORD *)(a2 + 32) = 0;
LABEL_9:
      *(_OWORD *)a2 = v8;
      *(_OWORD *)(a2 + 16) = v8;
      return result;
    case 3:
      v9 = AMCP::Implementation::get_type_marker<std::vector<unsigned long>>();
      result = 0;
      *a4 = v9;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned long>>())
        return a2;
      else
        return 0;
    case 5:
      v10 = AMCP::Implementation::get_type_marker<std::vector<unsigned long>>();
      v11 = *(void (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32);
      *(_QWORD *)&v57 = 0;
      if (v11)
      {
        v11(3, a2, 0, &v57);
        v11 = (void (*)(uint64_t, uint64_t, _QWORD, __int128 *))v57;
      }
      if (v11 != (void (*)(uint64_t, uint64_t, _QWORD, __int128 *))v10)
        goto LABEL_30;
      v12 = *(char **)(a3 + 32);
      v60 = 0;
      if (v12)
      {
        ((void (*)(uint64_t, uint64_t, _QWORD, char **))v12)(3, a3, 0, &v60);
        v12 = v60;
      }
      if (v12 == (char *)v10)
      {
        if (*(_QWORD *)(a2 + 32))
        {
          *(_QWORD *)&v57 = AMCP::Implementation::get_type_marker<std::vector<unsigned long>>();
          v13 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32))(4, a2, 0, &v57);
        }
        else
        {
          v13 = 0;
        }
        *(_QWORD *)&v57 = AMCP::Implementation::get_type_marker<std::vector<unsigned long>>();
        v49 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a3 + 32))(4, a3, 0, &v57);
        v50 = *(_QWORD *)(v13 + 8) - *(_QWORD *)v13;
        if (v50 == *(_QWORD *)(v49 + 8) - *(_QWORD *)v49 && !memcmp(*(const void **)v13, *(const void **)v49, v50))
          return 1;
      }
      else
      {
LABEL_30:
        AMCP::Thing::convert_to<std::vector<unsigned long>>(&v57, a2);
        AMCP::Thing::convert_to<std::vector<unsigned long>>(&v60, a3);
        v16 = (void *)v57;
        v17 = v60;
        v18 = *((_QWORD *)&v57 + 1) - (_QWORD)v57 == v61 - (_QWORD)v60
           && memcmp((const void *)v57, v60, *((_QWORD *)&v57 + 1) - v57) == 0;
        if (v17)
          operator delete(v17);
        if (v16)
          operator delete(v16);
        if (v18)
          return 1;
      }
      return 0;
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<std::vector<BOOL>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<signed char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<unsigned char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<short>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<unsigned short>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<int>>()
        && !AMCP::is_one_of<std::vector<unsigned int>,std::vector<long>,std::vector<unsigned long>,std::vector<long long>,std::vector<unsigned long long>,std::vector<float>,std::vector<double>,std::vector<long double>,applesauce::CF::ArrayRef>(a4))
      {
        goto LABEL_131;
      }
      if (*(_QWORD *)(a2 + 32))
      {
        *(_QWORD *)&v57 = AMCP::Implementation::get_type_marker<std::vector<unsigned long>>();
        v15 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32))(4, a2, 0, &v57);
      }
      else
      {
        v15 = 0;
      }
      if (*a4 != AMCP::Implementation::get_type_marker<std::vector<BOOL>>())
      {
        if (*a4 == AMCP::Implementation::get_type_marker<std::vector<char>>())
        {
          if (v15)
          {
            v27 = *(uint64_t **)v15;
            v26 = *(uint64_t **)(v15 + 8);
            v28 = (char *)v26 - (char *)v27;
            if (v26 == v27)
            {
              v29 = 0;
              v30 = 0;
            }
            else
            {
              if (v28 < 0)
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              v29 = operator new(v28 >> 3);
              v30 = v29;
              do
              {
                v31 = *v27++;
                *v30++ = v31;
              }
              while (v27 != v26);
            }
            v59 = 0;
            v57 = 0u;
            v58 = 0u;
            std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(&v57, v29, (uint64_t)v30, v30 - v29);
            v51 = (uint64_t (*)())AMCP::Implementation::In_Place_Storage<std::vector<char>>::dispatch;
LABEL_105:
            v59 = v51;
            if (!v29)
              goto LABEL_108;
            v48 = v29;
            goto LABEL_107;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<signed char>>())
        {
          if (v15)
          {
            v33 = *(uint64_t **)v15;
            v32 = *(uint64_t **)(v15 + 8);
            v34 = (char *)v32 - (char *)v33;
            if (v32 == v33)
            {
              v29 = 0;
              v35 = 0;
            }
            else
            {
              if (v34 < 0)
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              v29 = operator new(v34 >> 3);
              v35 = v29;
              do
              {
                v36 = *v33++;
                *v35++ = v36;
              }
              while (v33 != v32);
            }
            v59 = 0;
            v57 = 0u;
            v58 = 0u;
            std::vector<signed char>::__init_with_size[abi:ne180100]<signed char *,signed char *>(&v57, v29, (uint64_t)v35, v35 - v29);
            v51 = (uint64_t (*)())AMCP::Implementation::In_Place_Storage<std::vector<signed char>>::dispatch;
            goto LABEL_105;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned char>>())
        {
          if (v15)
          {
            v38 = *(uint64_t **)v15;
            v37 = *(uint64_t **)(v15 + 8);
            v39 = (char *)v37 - (char *)v38;
            if (v37 == v38)
            {
              v29 = 0;
              v40 = 0;
            }
            else
            {
              if (v39 < 0)
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              v29 = operator new(v39 >> 3);
              v40 = v29;
              do
              {
                v41 = *v38++;
                *v40++ = v41;
              }
              while (v38 != v37);
            }
            v59 = 0;
            v57 = 0u;
            v58 = 0u;
            std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v57, v29, (uint64_t)v40, v40 - v29);
            v51 = (uint64_t (*)())AMCP::Implementation::In_Place_Storage<std::vector<unsigned char>>::dispatch;
            goto LABEL_105;
          }
        }
        else
        {
          if (*a4 != AMCP::Implementation::get_type_marker<std::vector<short>>())
          {
            if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned short>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long>,std::vector<unsigned short>>((uint64_t)&v57, (uint64_t **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<int>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long>,std::vector<int>>((uint64_t)&v57, (uint64_t **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned int>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long>,std::vector<unsigned int>>((uint64_t)&v57, (uint64_t **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long>,std::vector<long>>((uint64_t)&v57, (uint64_t *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long>,std::vector<unsigned long>>((uint64_t)&v57, v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long>,std::vector<long long>>((uint64_t)&v57, (uint64_t *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned long long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long>,std::vector<unsigned long long>>((uint64_t)&v57, (uint64_t *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<float>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long>,std::vector<float>>((uint64_t)&v57, (unint64_t **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<double>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long>,std::vector<double>>((uint64_t)&v57, (uint64_t *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long double>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long>,std::vector<long double>>((uint64_t)&v57, (uint64_t *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long>,applesauce::CF::ArrayRef>(&v57, (uint64_t **)v15);
            }
            else
            {
LABEL_131:
              v59 = 0;
              v57 = 0u;
              v58 = 0u;
            }
            goto LABEL_108;
          }
          if (v15)
          {
            v53 = *(uint64_t **)v15;
            v52 = *(uint64_t **)(v15 + 8);
            v54 = (char *)v52 - (char *)v53;
            if (v52 == v53)
            {
              v29 = 0;
              v55 = 0;
            }
            else
            {
              if (v54 < 0)
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              v29 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v54 >> 3);
              v55 = v29;
              do
              {
                v56 = *v53++;
                *(_WORD *)v55 = v56;
                v55 += 2;
              }
              while (v53 != v52);
            }
            v59 = 0;
            v57 = 0u;
            v58 = 0u;
            std::vector<short>::__init_with_size[abi:ne180100]<short *,short *>(&v57, v29, (uint64_t)v55, (v55 - v29) >> 1);
            v51 = AMCP::Implementation::In_Place_Storage<std::vector<short>>::dispatch;
            goto LABEL_105;
          }
        }
LABEL_122:
        __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
      }
      if (!v15)
        goto LABEL_122;
      v20 = *(uint64_t **)v15;
      v19 = *(uint64_t **)(v15 + 8);
      v61 = 0;
      v62 = 0;
      v60 = 0;
      v21 = (char *)v19 - (char *)v20;
      if (v19 == v20)
        goto LABEL_80;
      v22 = v21 >> 3;
      std::vector<BOOL>::__vallocate[abi:ne180100](&v60, v21 >> 3);
      v23 = v61;
      v24 = v61 + v22;
      v61 += v22;
      if (v23)
      {
        v25 = v24 - 1;
        if (((v24 - 1) ^ (v23 - 1)) < 0x40)
          goto LABEL_72;
      }
      else
      {
        v25 = v24 - 1;
      }
      v42 = v25 >> 6;
      if (v24 >= 0x41)
        v43 = v42;
      else
        v43 = 0;
      *(_QWORD *)&v60[8 * v43] = 0;
LABEL_72:
      v44 = v23 & 0x3F;
      v45 = &v60[8 * (v23 >> 6)];
      do
      {
        v46 = 1 << v44;
        if (*v20)
          v47 = *(_QWORD *)v45 | v46;
        else
          v47 = *(_QWORD *)v45 & ~v46;
        *(_QWORD *)v45 = v47;
        ++v20;
        v45 += 8 * (v44 == 63);
        if (v44 == 63)
          v44 = 0;
        else
          ++v44;
      }
      while (v20 != v19);
LABEL_80:
      v59 = 0;
      v57 = 0u;
      v58 = 0u;
      std::vector<BOOL>::vector(&v57, (uint64_t)&v60);
      v59 = AMCP::Implementation::In_Place_Storage<std::vector<BOOL>>::dispatch;
      v48 = v60;
      if (v60)
LABEL_107:
        operator delete(v48);
LABEL_108:
      AMCP::swap((AMCP::Thing *)&v57, (AMCP::Thing *)a3, v14);
      if (v59)
        ((void (*)(_QWORD, __int128 *, _QWORD, _QWORD))v59)(0, &v57, 0, 0);
      return 0;
    default:
      return result;
  }
}

void sub_1B582BD30(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  void *v14;

  if (v14)
    operator delete(v14);
  __clang_call_terminate(a1);
}

_QWORD *AMCP::Thing::convert_to<std::vector<unsigned long>>(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  std::bad_cast *exception;
  std::bad_cast *v10;
  std::bad_cast *v11;
  std::bad_cast *v12;
  std::bad_cast *v13;
  std::bad_cast *v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[2];
  uint64_t (*v18)(uint64_t, _OWORD *, _QWORD, uint64_t *);
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, _QWORD, _QWORD);

  if (!*(_QWORD *)(a2 + 32))
    goto LABEL_12;
  v4 = AMCP::Implementation::get_type_marker<std::vector<unsigned long>>();
  v5 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a2 + 32);
  v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))v4)
  {
    v19 = v4;
    v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (v6)
    {
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
      return std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a1, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 3);
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v16 = AMCP::Implementation::get_type_marker<std::vector<unsigned long>>();
  memset(v17, 0, sizeof(v17));
  v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v15 = v4;
  v8 = v18(4, v17, 0, &v15);
  if (!v8)
  {
    v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a1, *(const void **)v8, *(_QWORD *)(v8 + 8), (uint64_t)(*(_QWORD *)(v8 + 8) - *(_QWORD *)v8) >> 3);
  if (v18)
    return (_QWORD *)v18(0, v17, 0, 0);
  return result;
}

void sub_1B582BF60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long>,std::vector<unsigned short>>(uint64_t a1, uint64_t **a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if (v5 < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v5 >> 3);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *(_WORD *)v7 = v8;
      v7 += 2;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>((_QWORD *)a1, v6, (uint64_t)v7, (v7 - v6) >> 1);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned short>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B582C04C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long>,std::vector<int>>(uint64_t a1, uint64_t **a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if (v5 < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5 >> 3);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *(_DWORD *)v7 = v8;
      v7 += 4;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)a1, v6, (uint64_t)v7, (v7 - v6) >> 2);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<int>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B582C130(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long>,std::vector<unsigned int>>(uint64_t a1, uint64_t **a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if (v5 < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5 >> 3);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *(_DWORD *)v7 = v8;
      v7 += 4;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)a1, v6, (uint64_t)v7, (v7 - v6) >> 2);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned int>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B582C214(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long>,std::vector<long>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  if (v4 == *a2)
  {
    v7 = 0;
    v9 = 0;
  }
  else
  {
    if (v5 < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 3);
    v7 = v6;
    v8 = 0;
    do
    {
      *(_QWORD *)&v6[v8] = *(_QWORD *)(v3 + v8);
      v8 += 8;
    }
    while (v3 + v8 != v4);
    v9 = (uint64_t)&v6[v8];
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>((_QWORD *)a1, v7, v9, (v9 - (uint64_t)v7) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long>>::dispatch;
  if (v7)
    operator delete(v7);
}

void sub_1B582C304(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

_QWORD *AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long>,std::vector<unsigned long>>(uint64_t a1, uint64_t a2)
{
  _QWORD *result;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  result = std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)a1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned long>>::dispatch;
  return result;
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long>,std::vector<long long>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  if (v4 == *a2)
  {
    v7 = 0;
    v9 = 0;
  }
  else
  {
    if (v5 < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 3);
    v7 = v6;
    v8 = 0;
    do
    {
      *(_QWORD *)&v6[v8] = *(_QWORD *)(v3 + v8);
      v8 += 8;
    }
    while (v3 + v8 != v4);
    v9 = (uint64_t)&v6[v8];
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((_QWORD *)a1, v7, v9, (v9 - (uint64_t)v7) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long long>>::dispatch;
  if (v7)
    operator delete(v7);
}

void sub_1B582C460(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long>,std::vector<unsigned long long>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  if (v4 == *a2)
  {
    v7 = 0;
    v9 = 0;
  }
  else
  {
    if (v5 < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 3);
    v7 = v6;
    v8 = 0;
    do
    {
      *(_QWORD *)&v6[v8] = *(_QWORD *)(v3 + v8);
      v8 += 8;
    }
    while (v3 + v8 != v4);
    v9 = (uint64_t)&v6[v8];
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>((_QWORD *)a1, v7, v9, (v9 - (uint64_t)v7) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned long long>>::dispatch;
  if (v7)
    operator delete(v7);
}

void sub_1B582C550(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long>,std::vector<float>>(uint64_t a1, unint64_t **a2)
{
  unint64_t *v3;
  unint64_t *v4;
  uint64_t v5;
  float *v6;
  float *v7;
  unint64_t v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if (v5 < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (float *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5 >> 3);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *v7++ = (float)v8;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)a1, v6, (uint64_t)v7, v7 - v6);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<float>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B582C638(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long>,std::vector<double>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  if (v4 == *a2)
  {
    v7 = 0;
    v9 = 0;
  }
  else
  {
    if (v5 < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 3);
    v7 = v6;
    v8 = 0;
    do
    {
      *(double *)&v6[v8] = (double)*(unint64_t *)(v3 + v8);
      v8 += 8;
    }
    while (v3 + v8 != v4);
    v9 = (uint64_t)&v6[v8];
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((_QWORD *)a1, v7, v9, (v9 - (uint64_t)v7) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<double>>::dispatch;
  if (v7)
    operator delete(v7);
}

void sub_1B582C72C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long>,std::vector<long double>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  if (v4 == *a2)
  {
    v7 = 0;
    v9 = 0;
  }
  else
  {
    if (v5 < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 3);
    v7 = v6;
    v8 = 0;
    do
    {
      *(double *)&v6[v8] = (double)*(unint64_t *)(v3 + v8);
      v8 += 8;
    }
    while (v3 + v8 != v4);
    v9 = (uint64_t)&v6[v8];
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long double>::__init_with_size[abi:ne180100]<long double *,long double *>((_QWORD *)a1, v7, v9, (v9 - (uint64_t)v7) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long double>>::dispatch;
  if (v7)
    operator delete(v7);
}

void sub_1B582C820(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long>,applesauce::CF::ArrayRef>(_QWORD *a1, uint64_t **a2)
{
  __CFArray *Mutable;
  uint64_t *v5;
  uint64_t *v6;
  CFNumberRef v7;
  std::runtime_error *exception;
  uint64_t valuePtr;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B380]);
  v5 = *a2;
  v6 = a2[1];
  while (v5 != v6)
  {
    valuePtr = *v5;
    v7 = CFNumberCreate(0, kCFNumberLongType, &valuePtr);
    if (!v7)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::NumberRef>(Mutable, v7);
    CFRelease(v7);
    ++v5;
  }
  mcp_applesauce::CF::Array_Builder::copy_array((applesauce::CF::ArrayRef *)&valuePtr, Mutable);
  a1[2] = 0;
  a1[3] = 0;
  *a1 = valuePtr;
  a1[1] = 0;
  a1[4] = AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::dispatch;
  if (Mutable)
    CFRelease(Mutable);
}

void sub_1B582C960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  mcp_applesauce::CF::Array_Builder::~Array_Builder(&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<void const*>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B582C9E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Implementation::In_Place_Storage<std::vector<long>>::dispatch(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  void *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, _QWORD, __int128 *);
  char *v12;
  uint64_t v13;
  AMCP::Thing *v14;
  uint64_t v15;
  void *v16;
  char *v17;
  BOOL v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  _BYTE *v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  size_t v50;
  uint64_t (*v51)();
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  uint64_t (*v59)();
  char *v60;
  unint64_t v61;
  uint64_t v62;

  switch((int)result)
  {
    case 0:
      v7 = *(void **)a2;
      if (*(_QWORD *)a2)
      {
        *(_QWORD *)(a2 + 8) = v7;
        operator delete(v7);
      }
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      v8 = 0uLL;
      goto LABEL_9;
    case 1:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>((_QWORD *)a3, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
      result = 0;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long>>::dispatch;
      return result;
    case 2:
      result = 0;
      v8 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long>>::dispatch;
      *(_QWORD *)(a2 + 32) = 0;
LABEL_9:
      *(_OWORD *)a2 = v8;
      *(_OWORD *)(a2 + 16) = v8;
      return result;
    case 3:
      v9 = AMCP::Implementation::get_type_marker<std::vector<long>>();
      result = 0;
      *a4 = v9;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long>>())
        return a2;
      else
        return 0;
    case 5:
      v10 = AMCP::Implementation::get_type_marker<std::vector<long>>();
      v11 = *(void (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32);
      *(_QWORD *)&v57 = 0;
      if (v11)
      {
        v11(3, a2, 0, &v57);
        v11 = (void (*)(uint64_t, uint64_t, _QWORD, __int128 *))v57;
      }
      if (v11 != (void (*)(uint64_t, uint64_t, _QWORD, __int128 *))v10)
        goto LABEL_30;
      v12 = *(char **)(a3 + 32);
      v60 = 0;
      if (v12)
      {
        ((void (*)(uint64_t, uint64_t, _QWORD, char **))v12)(3, a3, 0, &v60);
        v12 = v60;
      }
      if (v12 == (char *)v10)
      {
        if (*(_QWORD *)(a2 + 32))
        {
          *(_QWORD *)&v57 = AMCP::Implementation::get_type_marker<std::vector<long>>();
          v13 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32))(4, a2, 0, &v57);
        }
        else
        {
          v13 = 0;
        }
        *(_QWORD *)&v57 = AMCP::Implementation::get_type_marker<std::vector<long>>();
        v49 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a3 + 32))(4, a3, 0, &v57);
        v50 = *(_QWORD *)(v13 + 8) - *(_QWORD *)v13;
        if (v50 == *(_QWORD *)(v49 + 8) - *(_QWORD *)v49 && !memcmp(*(const void **)v13, *(const void **)v49, v50))
          return 1;
      }
      else
      {
LABEL_30:
        AMCP::Thing::convert_to<std::vector<long>>(&v57, a2);
        AMCP::Thing::convert_to<std::vector<long>>(&v60, a3);
        v16 = (void *)v57;
        v17 = v60;
        v18 = *((_QWORD *)&v57 + 1) - (_QWORD)v57 == v61 - (_QWORD)v60
           && memcmp((const void *)v57, v60, *((_QWORD *)&v57 + 1) - v57) == 0;
        if (v17)
          operator delete(v17);
        if (v16)
          operator delete(v16);
        if (v18)
          return 1;
      }
      return 0;
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<std::vector<BOOL>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<signed char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<unsigned char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<short>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<unsigned short>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<int>>()
        && !AMCP::is_one_of<std::vector<unsigned int>,std::vector<long>,std::vector<unsigned long>,std::vector<long long>,std::vector<unsigned long long>,std::vector<float>,std::vector<double>,std::vector<long double>,applesauce::CF::ArrayRef>(a4))
      {
        goto LABEL_131;
      }
      if (*(_QWORD *)(a2 + 32))
      {
        *(_QWORD *)&v57 = AMCP::Implementation::get_type_marker<std::vector<long>>();
        v15 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32))(4, a2, 0, &v57);
      }
      else
      {
        v15 = 0;
      }
      if (*a4 != AMCP::Implementation::get_type_marker<std::vector<BOOL>>())
      {
        if (*a4 == AMCP::Implementation::get_type_marker<std::vector<char>>())
        {
          if (v15)
          {
            v27 = *(uint64_t **)v15;
            v26 = *(uint64_t **)(v15 + 8);
            v28 = (char *)v26 - (char *)v27;
            if (v26 == v27)
            {
              v29 = 0;
              v30 = 0;
            }
            else
            {
              if (v28 < 0)
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              v29 = operator new(v28 >> 3);
              v30 = v29;
              do
              {
                v31 = *v27++;
                *v30++ = v31;
              }
              while (v27 != v26);
            }
            v59 = 0;
            v57 = 0u;
            v58 = 0u;
            std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(&v57, v29, (uint64_t)v30, v30 - v29);
            v51 = (uint64_t (*)())AMCP::Implementation::In_Place_Storage<std::vector<char>>::dispatch;
LABEL_105:
            v59 = v51;
            if (!v29)
              goto LABEL_108;
            v48 = v29;
            goto LABEL_107;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<signed char>>())
        {
          if (v15)
          {
            v33 = *(uint64_t **)v15;
            v32 = *(uint64_t **)(v15 + 8);
            v34 = (char *)v32 - (char *)v33;
            if (v32 == v33)
            {
              v29 = 0;
              v35 = 0;
            }
            else
            {
              if (v34 < 0)
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              v29 = operator new(v34 >> 3);
              v35 = v29;
              do
              {
                v36 = *v33++;
                *v35++ = v36;
              }
              while (v33 != v32);
            }
            v59 = 0;
            v57 = 0u;
            v58 = 0u;
            std::vector<signed char>::__init_with_size[abi:ne180100]<signed char *,signed char *>(&v57, v29, (uint64_t)v35, v35 - v29);
            v51 = (uint64_t (*)())AMCP::Implementation::In_Place_Storage<std::vector<signed char>>::dispatch;
            goto LABEL_105;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned char>>())
        {
          if (v15)
          {
            v38 = *(uint64_t **)v15;
            v37 = *(uint64_t **)(v15 + 8);
            v39 = (char *)v37 - (char *)v38;
            if (v37 == v38)
            {
              v29 = 0;
              v40 = 0;
            }
            else
            {
              if (v39 < 0)
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              v29 = operator new(v39 >> 3);
              v40 = v29;
              do
              {
                v41 = *v38++;
                *v40++ = v41;
              }
              while (v38 != v37);
            }
            v59 = 0;
            v57 = 0u;
            v58 = 0u;
            std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v57, v29, (uint64_t)v40, v40 - v29);
            v51 = (uint64_t (*)())AMCP::Implementation::In_Place_Storage<std::vector<unsigned char>>::dispatch;
            goto LABEL_105;
          }
        }
        else
        {
          if (*a4 != AMCP::Implementation::get_type_marker<std::vector<short>>())
          {
            if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned short>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<long>,std::vector<unsigned short>>((uint64_t)&v57, (uint64_t **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<int>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<long>,std::vector<int>>((uint64_t)&v57, (uint64_t **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned int>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<long>,std::vector<unsigned int>>((uint64_t)&v57, (uint64_t **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<long>,std::vector<long>>((uint64_t)&v57, v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<long>,std::vector<unsigned long>>((uint64_t)&v57, (uint64_t *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<long>,std::vector<long long>>((uint64_t)&v57, (uint64_t *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned long long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<long>,std::vector<unsigned long long>>((uint64_t)&v57, (uint64_t *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<float>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<long>,std::vector<float>>((uint64_t)&v57, (uint64_t **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<double>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<long>,std::vector<double>>((uint64_t)&v57, (uint64_t *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long double>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<long>,std::vector<long double>>((uint64_t)&v57, (uint64_t *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<long>,applesauce::CF::ArrayRef>(&v57, (uint64_t **)v15);
            }
            else
            {
LABEL_131:
              v59 = 0;
              v57 = 0u;
              v58 = 0u;
            }
            goto LABEL_108;
          }
          if (v15)
          {
            v53 = *(uint64_t **)v15;
            v52 = *(uint64_t **)(v15 + 8);
            v54 = (char *)v52 - (char *)v53;
            if (v52 == v53)
            {
              v29 = 0;
              v55 = 0;
            }
            else
            {
              if (v54 < 0)
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              v29 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v54 >> 3);
              v55 = v29;
              do
              {
                v56 = *v53++;
                *(_WORD *)v55 = v56;
                v55 += 2;
              }
              while (v53 != v52);
            }
            v59 = 0;
            v57 = 0u;
            v58 = 0u;
            std::vector<short>::__init_with_size[abi:ne180100]<short *,short *>(&v57, v29, (uint64_t)v55, (v55 - v29) >> 1);
            v51 = AMCP::Implementation::In_Place_Storage<std::vector<short>>::dispatch;
            goto LABEL_105;
          }
        }
LABEL_122:
        __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
      }
      if (!v15)
        goto LABEL_122;
      v20 = *(uint64_t **)v15;
      v19 = *(uint64_t **)(v15 + 8);
      v61 = 0;
      v62 = 0;
      v60 = 0;
      v21 = (char *)v19 - (char *)v20;
      if (v19 == v20)
        goto LABEL_80;
      v22 = v21 >> 3;
      std::vector<BOOL>::__vallocate[abi:ne180100](&v60, v21 >> 3);
      v23 = v61;
      v24 = v61 + v22;
      v61 += v22;
      if (v23)
      {
        v25 = v24 - 1;
        if (((v24 - 1) ^ (v23 - 1)) < 0x40)
          goto LABEL_72;
      }
      else
      {
        v25 = v24 - 1;
      }
      v42 = v25 >> 6;
      if (v24 >= 0x41)
        v43 = v42;
      else
        v43 = 0;
      *(_QWORD *)&v60[8 * v43] = 0;
LABEL_72:
      v44 = v23 & 0x3F;
      v45 = &v60[8 * (v23 >> 6)];
      do
      {
        v46 = 1 << v44;
        if (*v20)
          v47 = *(_QWORD *)v45 | v46;
        else
          v47 = *(_QWORD *)v45 & ~v46;
        *(_QWORD *)v45 = v47;
        ++v20;
        v45 += 8 * (v44 == 63);
        if (v44 == 63)
          v44 = 0;
        else
          ++v44;
      }
      while (v20 != v19);
LABEL_80:
      v59 = 0;
      v57 = 0u;
      v58 = 0u;
      std::vector<BOOL>::vector(&v57, (uint64_t)&v60);
      v59 = AMCP::Implementation::In_Place_Storage<std::vector<BOOL>>::dispatch;
      v48 = v60;
      if (v60)
LABEL_107:
        operator delete(v48);
LABEL_108:
      AMCP::swap((AMCP::Thing *)&v57, (AMCP::Thing *)a3, v14);
      if (v59)
        ((void (*)(_QWORD, __int128 *, _QWORD, _QWORD))v59)(0, &v57, 0, 0);
      return 0;
    default:
      return result;
  }
}

void sub_1B582D1D4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  void *v14;

  if (v14)
    operator delete(v14);
  __clang_call_terminate(a1);
}

_QWORD *AMCP::Thing::convert_to<std::vector<long>>(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  std::bad_cast *exception;
  std::bad_cast *v10;
  std::bad_cast *v11;
  std::bad_cast *v12;
  std::bad_cast *v13;
  std::bad_cast *v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[2];
  uint64_t (*v18)(uint64_t, _OWORD *, _QWORD, uint64_t *);
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, _QWORD, _QWORD);

  if (!*(_QWORD *)(a2 + 32))
    goto LABEL_12;
  v4 = AMCP::Implementation::get_type_marker<std::vector<long>>();
  v5 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a2 + 32);
  v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))v4)
  {
    v19 = v4;
    v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (v6)
    {
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
      return std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>(a1, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 3);
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v16 = AMCP::Implementation::get_type_marker<std::vector<long>>();
  memset(v17, 0, sizeof(v17));
  v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v15 = v4;
  v8 = v18(4, v17, 0, &v15);
  if (!v8)
  {
    v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>(a1, *(const void **)v8, *(_QWORD *)(v8 + 8), (uint64_t)(*(_QWORD *)(v8 + 8) - *(_QWORD *)v8) >> 3);
  if (v18)
    return (_QWORD *)v18(0, v17, 0, 0);
  return result;
}

void sub_1B582D404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<long>,std::vector<unsigned short>>(uint64_t a1, uint64_t **a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if (v5 < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v5 >> 3);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *(_WORD *)v7 = v8;
      v7 += 2;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>((_QWORD *)a1, v6, (uint64_t)v7, (v7 - v6) >> 1);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned short>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B582D4F0(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<long>,std::vector<int>>(uint64_t a1, uint64_t **a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if (v5 < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5 >> 3);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *(_DWORD *)v7 = v8;
      v7 += 4;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)a1, v6, (uint64_t)v7, (v7 - v6) >> 2);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<int>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B582D5D4(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<long>,std::vector<unsigned int>>(uint64_t a1, uint64_t **a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if (v5 < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5 >> 3);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *(_DWORD *)v7 = v8;
      v7 += 4;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)a1, v6, (uint64_t)v7, (v7 - v6) >> 2);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned int>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B582D6B8(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

_QWORD *AMCP::Implementation::create_vector_of_numbers_from<std::vector<long>,std::vector<long>>(uint64_t a1, uint64_t a2)
{
  _QWORD *result;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  result = std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>((_QWORD *)a1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long>>::dispatch;
  return result;
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<long>,std::vector<unsigned long>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  if (v4 == *a2)
  {
    v7 = 0;
    v9 = 0;
  }
  else
  {
    if (v5 < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 3);
    v7 = v6;
    v8 = 0;
    do
    {
      *(_QWORD *)&v6[v8] = *(_QWORD *)(v3 + v8);
      v8 += 8;
    }
    while (v3 + v8 != v4);
    v9 = (uint64_t)&v6[v8];
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)a1, v7, v9, (v9 - (uint64_t)v7) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned long>>::dispatch;
  if (v7)
    operator delete(v7);
}

void sub_1B582D814(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<long>,std::vector<long long>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  if (v4 == *a2)
  {
    v7 = 0;
    v9 = 0;
  }
  else
  {
    if (v5 < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 3);
    v7 = v6;
    v8 = 0;
    do
    {
      *(_QWORD *)&v6[v8] = *(_QWORD *)(v3 + v8);
      v8 += 8;
    }
    while (v3 + v8 != v4);
    v9 = (uint64_t)&v6[v8];
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((_QWORD *)a1, v7, v9, (v9 - (uint64_t)v7) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long long>>::dispatch;
  if (v7)
    operator delete(v7);
}

void sub_1B582D904(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<long>,std::vector<unsigned long long>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  if (v4 == *a2)
  {
    v7 = 0;
    v9 = 0;
  }
  else
  {
    if (v5 < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 3);
    v7 = v6;
    v8 = 0;
    do
    {
      *(_QWORD *)&v6[v8] = *(_QWORD *)(v3 + v8);
      v8 += 8;
    }
    while (v3 + v8 != v4);
    v9 = (uint64_t)&v6[v8];
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>((_QWORD *)a1, v7, v9, (v9 - (uint64_t)v7) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned long long>>::dispatch;
  if (v7)
    operator delete(v7);
}

void sub_1B582D9F4(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<long>,std::vector<float>>(uint64_t a1, uint64_t **a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  float *v6;
  float *v7;
  uint64_t v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if (v5 < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (float *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5 >> 3);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *v7++ = (float)v8;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)a1, v6, (uint64_t)v7, v7 - v6);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<float>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B582DADC(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<long>,std::vector<double>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  if (v4 == *a2)
  {
    v7 = 0;
    v9 = 0;
  }
  else
  {
    if (v5 < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 3);
    v7 = v6;
    v8 = 0;
    do
    {
      *(double *)&v6[v8] = (double)*(uint64_t *)(v3 + v8);
      v8 += 8;
    }
    while (v3 + v8 != v4);
    v9 = (uint64_t)&v6[v8];
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((_QWORD *)a1, v7, v9, (v9 - (uint64_t)v7) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<double>>::dispatch;
  if (v7)
    operator delete(v7);
}

void sub_1B582DBD0(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<long>,std::vector<long double>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  if (v4 == *a2)
  {
    v7 = 0;
    v9 = 0;
  }
  else
  {
    if (v5 < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 3);
    v7 = v6;
    v8 = 0;
    do
    {
      *(double *)&v6[v8] = (double)*(uint64_t *)(v3 + v8);
      v8 += 8;
    }
    while (v3 + v8 != v4);
    v9 = (uint64_t)&v6[v8];
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long double>::__init_with_size[abi:ne180100]<long double *,long double *>((_QWORD *)a1, v7, v9, (v9 - (uint64_t)v7) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long double>>::dispatch;
  if (v7)
    operator delete(v7);
}

void sub_1B582DCC4(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<long>,applesauce::CF::ArrayRef>(_QWORD *a1, uint64_t **a2)
{
  __CFArray *Mutable;
  uint64_t *v5;
  uint64_t *v6;
  CFNumberRef v7;
  std::runtime_error *exception;
  uint64_t valuePtr;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B380]);
  v5 = *a2;
  v6 = a2[1];
  while (v5 != v6)
  {
    valuePtr = *v5;
    v7 = CFNumberCreate(0, kCFNumberLongType, &valuePtr);
    if (!v7)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::NumberRef>(Mutable, v7);
    CFRelease(v7);
    ++v5;
  }
  mcp_applesauce::CF::Array_Builder::copy_array((applesauce::CF::ArrayRef *)&valuePtr, Mutable);
  a1[2] = 0;
  a1[3] = 0;
  *a1 = valuePtr;
  a1[1] = 0;
  a1[4] = AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::dispatch;
  if (Mutable)
    CFRelease(Mutable);
}

void sub_1B582DE04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  mcp_applesauce::CF::Array_Builder::~Array_Builder(&a9);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::In_Place_Storage<std::vector<unsigned int>>::dispatch(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  void *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, _QWORD, __int128 *);
  char *v12;
  uint64_t v13;
  AMCP::Thing *v14;
  uint64_t v15;
  void *v16;
  char *v17;
  BOOL v18;
  int *v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int *v26;
  int *v27;
  uint64_t v28;
  _BYTE *v29;
  _BYTE *v30;
  int v31;
  int *v32;
  int *v33;
  uint64_t v34;
  _BYTE *v35;
  int v36;
  int *v37;
  int *v38;
  uint64_t v39;
  _BYTE *v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  size_t v50;
  uint64_t (*v51)();
  int *v52;
  int *v53;
  uint64_t v54;
  char *v55;
  int v56;
  __int128 v57;
  __int128 v58;
  uint64_t (*v59)();
  char *v60;
  unint64_t v61;
  uint64_t v62;

  switch((int)result)
  {
    case 0:
      v7 = *(void **)a2;
      if (*(_QWORD *)a2)
      {
        *(_QWORD *)(a2 + 8) = v7;
        operator delete(v7);
      }
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      v8 = 0uLL;
      goto LABEL_9;
    case 1:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)a3, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
      result = 0;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned int>>::dispatch;
      return result;
    case 2:
      result = 0;
      v8 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned int>>::dispatch;
      *(_QWORD *)(a2 + 32) = 0;
LABEL_9:
      *(_OWORD *)a2 = v8;
      *(_OWORD *)(a2 + 16) = v8;
      return result;
    case 3:
      v9 = AMCP::Implementation::get_type_marker<std::vector<unsigned int>>();
      result = 0;
      *a4 = v9;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned int>>())
        return a2;
      else
        return 0;
    case 5:
      v10 = AMCP::Implementation::get_type_marker<std::vector<unsigned int>>();
      v11 = *(void (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32);
      *(_QWORD *)&v57 = 0;
      if (v11)
      {
        v11(3, a2, 0, &v57);
        v11 = (void (*)(uint64_t, uint64_t, _QWORD, __int128 *))v57;
      }
      if (v11 != (void (*)(uint64_t, uint64_t, _QWORD, __int128 *))v10)
        goto LABEL_30;
      v12 = *(char **)(a3 + 32);
      v60 = 0;
      if (v12)
      {
        ((void (*)(uint64_t, uint64_t, _QWORD, char **))v12)(3, a3, 0, &v60);
        v12 = v60;
      }
      if (v12 == (char *)v10)
      {
        if (*(_QWORD *)(a2 + 32))
        {
          *(_QWORD *)&v57 = AMCP::Implementation::get_type_marker<std::vector<unsigned int>>();
          v13 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32))(4, a2, 0, &v57);
        }
        else
        {
          v13 = 0;
        }
        *(_QWORD *)&v57 = AMCP::Implementation::get_type_marker<std::vector<unsigned int>>();
        v49 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a3 + 32))(4, a3, 0, &v57);
        v50 = *(_QWORD *)(v13 + 8) - *(_QWORD *)v13;
        if (v50 == *(_QWORD *)(v49 + 8) - *(_QWORD *)v49 && !memcmp(*(const void **)v13, *(const void **)v49, v50))
          return 1;
      }
      else
      {
LABEL_30:
        AMCP::Thing::convert_to<std::vector<unsigned int>>(&v57, a2);
        AMCP::Thing::convert_to<std::vector<unsigned int>>(&v60, a3);
        v16 = (void *)v57;
        v17 = v60;
        v18 = *((_QWORD *)&v57 + 1) - (_QWORD)v57 == v61 - (_QWORD)v60
           && memcmp((const void *)v57, v60, *((_QWORD *)&v57 + 1) - v57) == 0;
        if (v17)
          operator delete(v17);
        if (v16)
          operator delete(v16);
        if (v18)
          return 1;
      }
      return 0;
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<std::vector<BOOL>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<signed char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<unsigned char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<short>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<unsigned short>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<int>>()
        && !AMCP::is_one_of<std::vector<unsigned int>,std::vector<long>,std::vector<unsigned long>,std::vector<long long>,std::vector<unsigned long long>,std::vector<float>,std::vector<double>,std::vector<long double>,applesauce::CF::ArrayRef>(a4))
      {
        goto LABEL_131;
      }
      if (*(_QWORD *)(a2 + 32))
      {
        *(_QWORD *)&v57 = AMCP::Implementation::get_type_marker<std::vector<unsigned int>>();
        v15 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32))(4, a2, 0, &v57);
      }
      else
      {
        v15 = 0;
      }
      if (*a4 != AMCP::Implementation::get_type_marker<std::vector<BOOL>>())
      {
        if (*a4 == AMCP::Implementation::get_type_marker<std::vector<char>>())
        {
          if (v15)
          {
            v27 = *(int **)v15;
            v26 = *(int **)(v15 + 8);
            v28 = (char *)v26 - (char *)v27;
            if (v26 == v27)
            {
              v29 = 0;
              v30 = 0;
            }
            else
            {
              if (v28 < 0)
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              v29 = operator new(v28 >> 2);
              v30 = v29;
              do
              {
                v31 = *v27++;
                *v30++ = v31;
              }
              while (v27 != v26);
            }
            v59 = 0;
            v57 = 0u;
            v58 = 0u;
            std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(&v57, v29, (uint64_t)v30, v30 - v29);
            v51 = (uint64_t (*)())AMCP::Implementation::In_Place_Storage<std::vector<char>>::dispatch;
LABEL_105:
            v59 = v51;
            if (!v29)
              goto LABEL_108;
            v48 = v29;
            goto LABEL_107;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<signed char>>())
        {
          if (v15)
          {
            v33 = *(int **)v15;
            v32 = *(int **)(v15 + 8);
            v34 = (char *)v32 - (char *)v33;
            if (v32 == v33)
            {
              v29 = 0;
              v35 = 0;
            }
            else
            {
              if (v34 < 0)
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              v29 = operator new(v34 >> 2);
              v35 = v29;
              do
              {
                v36 = *v33++;
                *v35++ = v36;
              }
              while (v33 != v32);
            }
            v59 = 0;
            v57 = 0u;
            v58 = 0u;
            std::vector<signed char>::__init_with_size[abi:ne180100]<signed char *,signed char *>(&v57, v29, (uint64_t)v35, v35 - v29);
            v51 = (uint64_t (*)())AMCP::Implementation::In_Place_Storage<std::vector<signed char>>::dispatch;
            goto LABEL_105;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned char>>())
        {
          if (v15)
          {
            v38 = *(int **)v15;
            v37 = *(int **)(v15 + 8);
            v39 = (char *)v37 - (char *)v38;
            if (v37 == v38)
            {
              v29 = 0;
              v40 = 0;
            }
            else
            {
              if (v39 < 0)
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              v29 = operator new(v39 >> 2);
              v40 = v29;
              do
              {
                v41 = *v38++;
                *v40++ = v41;
              }
              while (v38 != v37);
            }
            v59 = 0;
            v57 = 0u;
            v58 = 0u;
            std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v57, v29, (uint64_t)v40, v40 - v29);
            v51 = (uint64_t (*)())AMCP::Implementation::In_Place_Storage<std::vector<unsigned char>>::dispatch;
            goto LABEL_105;
          }
        }
        else
        {
          if (*a4 != AMCP::Implementation::get_type_marker<std::vector<short>>())
          {
            if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned short>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned int>,std::vector<unsigned short>>((uint64_t)&v57, (int **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<int>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned int>,std::vector<int>>((uint64_t)&v57, (uint64_t *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned int>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned int>,std::vector<unsigned int>>((uint64_t)&v57, v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned int>,std::vector<long>>((uint64_t)&v57, (unsigned int **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned int>,std::vector<unsigned long>>((uint64_t)&v57, (unsigned int **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned int>,std::vector<long long>>((uint64_t)&v57, (unsigned int **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned long long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned int>,std::vector<unsigned long long>>((uint64_t)&v57, (unsigned int **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<float>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned int>,std::vector<float>>((uint64_t)&v57, (uint64_t *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<double>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned int>,std::vector<double>>((uint64_t)&v57, (unsigned int **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long double>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned int>,std::vector<long double>>((uint64_t)&v57, (unsigned int **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned int>,applesauce::CF::ArrayRef>(&v57, v15);
            }
            else
            {
LABEL_131:
              v59 = 0;
              v57 = 0u;
              v58 = 0u;
            }
            goto LABEL_108;
          }
          if (v15)
          {
            v53 = *(int **)v15;
            v52 = *(int **)(v15 + 8);
            v54 = (char *)v52 - (char *)v53;
            if (v52 == v53)
            {
              v29 = 0;
              v55 = 0;
            }
            else
            {
              if (v54 < 0)
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              v29 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v54 >> 2);
              v55 = v29;
              do
              {
                v56 = *v53++;
                *(_WORD *)v55 = v56;
                v55 += 2;
              }
              while (v53 != v52);
            }
            v59 = 0;
            v57 = 0u;
            v58 = 0u;
            std::vector<short>::__init_with_size[abi:ne180100]<short *,short *>(&v57, v29, (uint64_t)v55, (v55 - v29) >> 1);
            v51 = AMCP::Implementation::In_Place_Storage<std::vector<short>>::dispatch;
            goto LABEL_105;
          }
        }
LABEL_122:
        __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
      }
      if (!v15)
        goto LABEL_122;
      v20 = *(int **)v15;
      v19 = *(int **)(v15 + 8);
      v61 = 0;
      v62 = 0;
      v60 = 0;
      v21 = (char *)v19 - (char *)v20;
      if (v19 == v20)
        goto LABEL_80;
      v22 = v21 >> 2;
      std::vector<BOOL>::__vallocate[abi:ne180100](&v60, v21 >> 2);
      v23 = v61;
      v24 = v61 + v22;
      v61 += v22;
      if (v23)
      {
        v25 = v24 - 1;
        if (((v24 - 1) ^ (v23 - 1)) < 0x40)
          goto LABEL_72;
      }
      else
      {
        v25 = v24 - 1;
      }
      v42 = v25 >> 6;
      if (v24 >= 0x41)
        v43 = v42;
      else
        v43 = 0;
      *(_QWORD *)&v60[8 * v43] = 0;
LABEL_72:
      v44 = v23 & 0x3F;
      v45 = &v60[8 * (v23 >> 6)];
      do
      {
        v46 = 1 << v44;
        if (*v20)
          v47 = *(_QWORD *)v45 | v46;
        else
          v47 = *(_QWORD *)v45 & ~v46;
        *(_QWORD *)v45 = v47;
        ++v20;
        v45 += 8 * (v44 == 63);
        if (v44 == 63)
          v44 = 0;
        else
          ++v44;
      }
      while (v20 != v19);
LABEL_80:
      v59 = 0;
      v57 = 0u;
      v58 = 0u;
      std::vector<BOOL>::vector(&v57, (uint64_t)&v60);
      v59 = AMCP::Implementation::In_Place_Storage<std::vector<BOOL>>::dispatch;
      v48 = v60;
      if (v60)
LABEL_107:
        operator delete(v48);
LABEL_108:
      AMCP::swap((AMCP::Thing *)&v57, (AMCP::Thing *)a3, v14);
      if (v59)
        ((void (*)(_QWORD, __int128 *, _QWORD, _QWORD))v59)(0, &v57, 0, 0);
      return 0;
    default:
      return result;
  }
}

void sub_1B582E600(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  void *v14;

  if (v14)
    operator delete(v14);
  __clang_call_terminate(a1);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned int>,std::vector<unsigned short>>(uint64_t a1, int **a2)
{
  int *v3;
  int *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  int v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if (v5 < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v5 >> 2);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *(_WORD *)v7 = v8;
      v7 += 2;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>((_QWORD *)a1, v6, (uint64_t)v7, (v7 - v6) >> 1);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned short>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B582E75C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned int>,std::vector<int>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  if (v4 == *a2)
  {
    v7 = 0;
    v9 = 0;
  }
  else
  {
    if (v5 < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5 >> 2);
    v7 = v6;
    v8 = 0;
    do
    {
      *(_DWORD *)&v6[v8] = *(_DWORD *)(v3 + v8);
      v8 += 4;
    }
    while (v3 + v8 != v4);
    v9 = (uint64_t)&v6[v8];
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)a1, v7, v9, (v9 - (uint64_t)v7) >> 2);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<int>>::dispatch;
  if (v7)
    operator delete(v7);
}

void sub_1B582E84C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

_QWORD *AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned int>,std::vector<unsigned int>>(uint64_t a1, uint64_t a2)
{
  _QWORD *result;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  result = std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)a1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned int>>::dispatch;
  return result;
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned int>,std::vector<long>>(uint64_t a1, unsigned int **a2)
{
  unsigned int *v3;
  unsigned int *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  unsigned int v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if ((unint64_t)v5 >= 0x7FFFFFFFFFFFFFFDLL)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 2);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *(_QWORD *)v7 = v8;
      v7 += 8;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>((_QWORD *)a1, v6, (uint64_t)v7, (v7 - v6) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B582E9A8(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned int>,std::vector<unsigned long>>(uint64_t a1, unsigned int **a2)
{
  unsigned int *v3;
  unsigned int *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  unsigned int v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if ((unint64_t)v5 >= 0x7FFFFFFFFFFFFFFDLL)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 2);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *(_QWORD *)v7 = v8;
      v7 += 8;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)a1, v6, (uint64_t)v7, (v7 - v6) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned long>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B582EA98(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned int>,std::vector<long long>>(uint64_t a1, unsigned int **a2)
{
  unsigned int *v3;
  unsigned int *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  unsigned int v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if ((unint64_t)v5 >= 0x7FFFFFFFFFFFFFFDLL)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 2);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *(_QWORD *)v7 = v8;
      v7 += 8;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((_QWORD *)a1, v6, (uint64_t)v7, (v7 - v6) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long long>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B582EB88(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned int>,std::vector<unsigned long long>>(uint64_t a1, unsigned int **a2)
{
  unsigned int *v3;
  unsigned int *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  unsigned int v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if ((unint64_t)v5 >= 0x7FFFFFFFFFFFFFFDLL)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 2);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *(_QWORD *)v7 = v8;
      v7 += 8;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>((_QWORD *)a1, v6, (uint64_t)v7, (v7 - v6) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned long long>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B582EC78(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned int>,std::vector<float>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  if (v4 == *a2)
  {
    v7 = 0;
    v9 = 0;
  }
  else
  {
    if (v5 < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5 >> 2);
    v7 = v6;
    v8 = 0;
    do
    {
      *(float *)&v6[v8] = (float)*(unsigned int *)(v3 + v8);
      v8 += 4;
    }
    while (v3 + v8 != v4);
    v9 = (uint64_t)&v6[v8];
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)a1, v7, v9, (v9 - (uint64_t)v7) >> 2);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<float>>::dispatch;
  if (v7)
    operator delete(v7);
}

void sub_1B582ED6C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned int>,std::vector<double>>(uint64_t a1, unsigned int **a2)
{
  unsigned int *v3;
  unsigned int *v4;
  uint64_t v5;
  double *v6;
  double *v7;
  unsigned int v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if ((unint64_t)v5 >= 0x7FFFFFFFFFFFFFFDLL)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (double *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 2);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *v7++ = (double)v8;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((_QWORD *)a1, v6, (uint64_t)v7, v7 - v6);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<double>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B582EE60(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned int>,std::vector<long double>>(uint64_t a1, unsigned int **a2)
{
  unsigned int *v3;
  unsigned int *v4;
  uint64_t v5;
  double *v6;
  double *v7;
  unsigned int v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if ((unint64_t)v5 >= 0x7FFFFFFFFFFFFFFDLL)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (double *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 2);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *v7++ = (double)v8;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long double>::__init_with_size[abi:ne180100]<long double *,long double *>((_QWORD *)a1, v6, (uint64_t)v7, v7 - v6);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long double>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B582EF54(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned int>,applesauce::CF::ArrayRef>(_QWORD *a1, uint64_t a2)
{
  __CFArray *Mutable;
  _DWORD *v5;
  _DWORD *v6;
  CFNumberRef v7;
  std::runtime_error *exception;
  _QWORD v9[2];

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B380]);
  v9[1] = Mutable;
  v5 = *(_DWORD **)a2;
  v6 = *(_DWORD **)(a2 + 8);
  while (v5 != v6)
  {
    LODWORD(v9[0]) = *v5;
    v7 = CFNumberCreate(0, kCFNumberIntType, v9);
    if (!v7)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::NumberRef>(Mutable, v7);
    CFRelease(v7);
    ++v5;
  }
  mcp_applesauce::CF::Array_Builder::copy_array((applesauce::CF::ArrayRef *)v9, Mutable);
  a1[2] = 0;
  a1[3] = 0;
  *a1 = v9[0];
  a1[1] = 0;
  a1[4] = AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::dispatch;
  if (Mutable)
    CFRelease(Mutable);
}

void sub_1B582F094(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  mcp_applesauce::CF::Array_Builder::~Array_Builder((const void **)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned int>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B582F11C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Implementation::In_Place_Storage<std::vector<int>>::dispatch(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  void *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, _QWORD, __int128 *);
  char *v12;
  uint64_t v13;
  AMCP::Thing *v14;
  uint64_t v15;
  void *v16;
  char *v17;
  BOOL v18;
  int *v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int *v26;
  int *v27;
  uint64_t v28;
  _BYTE *v29;
  _BYTE *v30;
  int v31;
  int *v32;
  int *v33;
  uint64_t v34;
  _BYTE *v35;
  int v36;
  int *v37;
  int *v38;
  uint64_t v39;
  _BYTE *v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  size_t v50;
  uint64_t (*v51)();
  int *v52;
  int *v53;
  uint64_t v54;
  char *v55;
  int v56;
  __int128 v57;
  __int128 v58;
  uint64_t (*v59)();
  char *v60;
  unint64_t v61;
  uint64_t v62;

  switch((int)result)
  {
    case 0:
      v7 = *(void **)a2;
      if (*(_QWORD *)a2)
      {
        *(_QWORD *)(a2 + 8) = v7;
        operator delete(v7);
      }
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      v8 = 0uLL;
      goto LABEL_9;
    case 1:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)a3, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
      result = 0;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<int>>::dispatch;
      return result;
    case 2:
      result = 0;
      v8 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<int>>::dispatch;
      *(_QWORD *)(a2 + 32) = 0;
LABEL_9:
      *(_OWORD *)a2 = v8;
      *(_OWORD *)(a2 + 16) = v8;
      return result;
    case 3:
      v9 = AMCP::Implementation::get_type_marker<std::vector<int>>();
      result = 0;
      *a4 = v9;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::vector<int>>())
        return a2;
      else
        return 0;
    case 5:
      v10 = AMCP::Implementation::get_type_marker<std::vector<int>>();
      v11 = *(void (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32);
      *(_QWORD *)&v57 = 0;
      if (v11)
      {
        v11(3, a2, 0, &v57);
        v11 = (void (*)(uint64_t, uint64_t, _QWORD, __int128 *))v57;
      }
      if (v11 != (void (*)(uint64_t, uint64_t, _QWORD, __int128 *))v10)
        goto LABEL_30;
      v12 = *(char **)(a3 + 32);
      v60 = 0;
      if (v12)
      {
        ((void (*)(uint64_t, uint64_t, _QWORD, char **))v12)(3, a3, 0, &v60);
        v12 = v60;
      }
      if (v12 == (char *)v10)
      {
        if (*(_QWORD *)(a2 + 32))
        {
          *(_QWORD *)&v57 = AMCP::Implementation::get_type_marker<std::vector<int>>();
          v13 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32))(4, a2, 0, &v57);
        }
        else
        {
          v13 = 0;
        }
        *(_QWORD *)&v57 = AMCP::Implementation::get_type_marker<std::vector<int>>();
        v49 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a3 + 32))(4, a3, 0, &v57);
        v50 = *(_QWORD *)(v13 + 8) - *(_QWORD *)v13;
        if (v50 == *(_QWORD *)(v49 + 8) - *(_QWORD *)v49 && !memcmp(*(const void **)v13, *(const void **)v49, v50))
          return 1;
      }
      else
      {
LABEL_30:
        AMCP::Thing::convert_to<std::vector<int>>(&v57, a2);
        AMCP::Thing::convert_to<std::vector<int>>(&v60, a3);
        v16 = (void *)v57;
        v17 = v60;
        v18 = *((_QWORD *)&v57 + 1) - (_QWORD)v57 == v61 - (_QWORD)v60
           && memcmp((const void *)v57, v60, *((_QWORD *)&v57 + 1) - v57) == 0;
        if (v17)
          operator delete(v17);
        if (v16)
          operator delete(v16);
        if (v18)
          return 1;
      }
      return 0;
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<std::vector<BOOL>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<signed char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<unsigned char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<short>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<unsigned short>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<int>>()
        && !AMCP::is_one_of<std::vector<unsigned int>,std::vector<long>,std::vector<unsigned long>,std::vector<long long>,std::vector<unsigned long long>,std::vector<float>,std::vector<double>,std::vector<long double>,applesauce::CF::ArrayRef>(a4))
      {
        goto LABEL_131;
      }
      if (*(_QWORD *)(a2 + 32))
      {
        *(_QWORD *)&v57 = AMCP::Implementation::get_type_marker<std::vector<int>>();
        v15 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32))(4, a2, 0, &v57);
      }
      else
      {
        v15 = 0;
      }
      if (*a4 != AMCP::Implementation::get_type_marker<std::vector<BOOL>>())
      {
        if (*a4 == AMCP::Implementation::get_type_marker<std::vector<char>>())
        {
          if (v15)
          {
            v27 = *(int **)v15;
            v26 = *(int **)(v15 + 8);
            v28 = (char *)v26 - (char *)v27;
            if (v26 == v27)
            {
              v29 = 0;
              v30 = 0;
            }
            else
            {
              if (v28 < 0)
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              v29 = operator new(v28 >> 2);
              v30 = v29;
              do
              {
                v31 = *v27++;
                *v30++ = v31;
              }
              while (v27 != v26);
            }
            v59 = 0;
            v57 = 0u;
            v58 = 0u;
            std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(&v57, v29, (uint64_t)v30, v30 - v29);
            v51 = (uint64_t (*)())AMCP::Implementation::In_Place_Storage<std::vector<char>>::dispatch;
LABEL_105:
            v59 = v51;
            if (!v29)
              goto LABEL_108;
            v48 = v29;
            goto LABEL_107;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<signed char>>())
        {
          if (v15)
          {
            v33 = *(int **)v15;
            v32 = *(int **)(v15 + 8);
            v34 = (char *)v32 - (char *)v33;
            if (v32 == v33)
            {
              v29 = 0;
              v35 = 0;
            }
            else
            {
              if (v34 < 0)
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              v29 = operator new(v34 >> 2);
              v35 = v29;
              do
              {
                v36 = *v33++;
                *v35++ = v36;
              }
              while (v33 != v32);
            }
            v59 = 0;
            v57 = 0u;
            v58 = 0u;
            std::vector<signed char>::__init_with_size[abi:ne180100]<signed char *,signed char *>(&v57, v29, (uint64_t)v35, v35 - v29);
            v51 = (uint64_t (*)())AMCP::Implementation::In_Place_Storage<std::vector<signed char>>::dispatch;
            goto LABEL_105;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned char>>())
        {
          if (v15)
          {
            v38 = *(int **)v15;
            v37 = *(int **)(v15 + 8);
            v39 = (char *)v37 - (char *)v38;
            if (v37 == v38)
            {
              v29 = 0;
              v40 = 0;
            }
            else
            {
              if (v39 < 0)
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              v29 = operator new(v39 >> 2);
              v40 = v29;
              do
              {
                v41 = *v38++;
                *v40++ = v41;
              }
              while (v38 != v37);
            }
            v59 = 0;
            v57 = 0u;
            v58 = 0u;
            std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v57, v29, (uint64_t)v40, v40 - v29);
            v51 = (uint64_t (*)())AMCP::Implementation::In_Place_Storage<std::vector<unsigned char>>::dispatch;
            goto LABEL_105;
          }
        }
        else
        {
          if (*a4 != AMCP::Implementation::get_type_marker<std::vector<short>>())
          {
            if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned short>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<int>,std::vector<unsigned short>>((uint64_t)&v57, (int **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<int>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<int>,std::vector<int>>((uint64_t)&v57, v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned int>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<int>,std::vector<unsigned int>>((uint64_t)&v57, (uint64_t *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<int>,std::vector<long>>((uint64_t)&v57, (int **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<int>,std::vector<unsigned long>>((uint64_t)&v57, (int **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<int>,std::vector<long long>>((uint64_t)&v57, (int **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned long long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<int>,std::vector<unsigned long long>>((uint64_t)&v57, (int **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<float>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<int>,std::vector<float>>((uint64_t)&v57, (uint64_t *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<double>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<int>,std::vector<double>>((uint64_t)&v57, (int **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long double>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<int>,std::vector<long double>>((uint64_t)&v57, (int **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<int>,applesauce::CF::ArrayRef>(&v57, v15);
            }
            else
            {
LABEL_131:
              v59 = 0;
              v57 = 0u;
              v58 = 0u;
            }
            goto LABEL_108;
          }
          if (v15)
          {
            v53 = *(int **)v15;
            v52 = *(int **)(v15 + 8);
            v54 = (char *)v52 - (char *)v53;
            if (v52 == v53)
            {
              v29 = 0;
              v55 = 0;
            }
            else
            {
              if (v54 < 0)
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              v29 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v54 >> 2);
              v55 = v29;
              do
              {
                v56 = *v53++;
                *(_WORD *)v55 = v56;
                v55 += 2;
              }
              while (v53 != v52);
            }
            v59 = 0;
            v57 = 0u;
            v58 = 0u;
            std::vector<short>::__init_with_size[abi:ne180100]<short *,short *>(&v57, v29, (uint64_t)v55, (v55 - v29) >> 1);
            v51 = AMCP::Implementation::In_Place_Storage<std::vector<short>>::dispatch;
            goto LABEL_105;
          }
        }
LABEL_122:
        __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
      }
      if (!v15)
        goto LABEL_122;
      v20 = *(int **)v15;
      v19 = *(int **)(v15 + 8);
      v61 = 0;
      v62 = 0;
      v60 = 0;
      v21 = (char *)v19 - (char *)v20;
      if (v19 == v20)
        goto LABEL_80;
      v22 = v21 >> 2;
      std::vector<BOOL>::__vallocate[abi:ne180100](&v60, v21 >> 2);
      v23 = v61;
      v24 = v61 + v22;
      v61 += v22;
      if (v23)
      {
        v25 = v24 - 1;
        if (((v24 - 1) ^ (v23 - 1)) < 0x40)
          goto LABEL_72;
      }
      else
      {
        v25 = v24 - 1;
      }
      v42 = v25 >> 6;
      if (v24 >= 0x41)
        v43 = v42;
      else
        v43 = 0;
      *(_QWORD *)&v60[8 * v43] = 0;
LABEL_72:
      v44 = v23 & 0x3F;
      v45 = &v60[8 * (v23 >> 6)];
      do
      {
        v46 = 1 << v44;
        if (*v20)
          v47 = *(_QWORD *)v45 | v46;
        else
          v47 = *(_QWORD *)v45 & ~v46;
        *(_QWORD *)v45 = v47;
        ++v20;
        v45 += 8 * (v44 == 63);
        if (v44 == 63)
          v44 = 0;
        else
          ++v44;
      }
      while (v20 != v19);
LABEL_80:
      v59 = 0;
      v57 = 0u;
      v58 = 0u;
      std::vector<BOOL>::vector(&v57, (uint64_t)&v60);
      v59 = AMCP::Implementation::In_Place_Storage<std::vector<BOOL>>::dispatch;
      v48 = v60;
      if (v60)
LABEL_107:
        operator delete(v48);
LABEL_108:
      AMCP::swap((AMCP::Thing *)&v57, (AMCP::Thing *)a3, v14);
      if (v59)
        ((void (*)(_QWORD, __int128 *, _QWORD, _QWORD))v59)(0, &v57, 0, 0);
      return 0;
    default:
      return result;
  }
}

void sub_1B582F908(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  void *v14;

  if (v14)
    operator delete(v14);
  __clang_call_terminate(a1);
}

_QWORD *AMCP::Thing::convert_to<std::vector<int>>(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  std::bad_cast *exception;
  std::bad_cast *v10;
  std::bad_cast *v11;
  std::bad_cast *v12;
  std::bad_cast *v13;
  std::bad_cast *v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[2];
  uint64_t (*v18)(uint64_t, _OWORD *, _QWORD, uint64_t *);
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, _QWORD, _QWORD);

  if (!*(_QWORD *)(a2 + 32))
    goto LABEL_12;
  v4 = AMCP::Implementation::get_type_marker<std::vector<int>>();
  v5 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a2 + 32);
  v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))v4)
  {
    v19 = v4;
    v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (v6)
    {
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
      return std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a1, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 2);
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v16 = AMCP::Implementation::get_type_marker<std::vector<int>>();
  memset(v17, 0, sizeof(v17));
  v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v15 = v4;
  v8 = v18(4, v17, 0, &v15);
  if (!v8)
  {
    v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a1, *(const void **)v8, *(_QWORD *)(v8 + 8), (uint64_t)(*(_QWORD *)(v8 + 8) - *(_QWORD *)v8) >> 2);
  if (v18)
    return (_QWORD *)v18(0, v17, 0, 0);
  return result;
}

void sub_1B582FB38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<int>,std::vector<unsigned short>>(uint64_t a1, int **a2)
{
  int *v3;
  int *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  int v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if (v5 < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v5 >> 2);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *(_WORD *)v7 = v8;
      v7 += 2;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>((_QWORD *)a1, v6, (uint64_t)v7, (v7 - v6) >> 1);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned short>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B582FC24(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

_QWORD *AMCP::Implementation::create_vector_of_numbers_from<std::vector<int>,std::vector<int>>(uint64_t a1, uint64_t a2)
{
  _QWORD *result;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)a1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<int>>::dispatch;
  return result;
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<int>,std::vector<unsigned int>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  if (v4 == *a2)
  {
    v7 = 0;
    v9 = 0;
  }
  else
  {
    if (v5 < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5 >> 2);
    v7 = v6;
    v8 = 0;
    do
    {
      *(_DWORD *)&v6[v8] = *(_DWORD *)(v3 + v8);
      v8 += 4;
    }
    while (v3 + v8 != v4);
    v9 = (uint64_t)&v6[v8];
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)a1, v7, v9, (v9 - (uint64_t)v7) >> 2);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned int>>::dispatch;
  if (v7)
    operator delete(v7);
}

void sub_1B582FD80(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<int>,std::vector<long>>(uint64_t a1, int **a2)
{
  int *v3;
  int *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if ((unint64_t)v5 >= 0x7FFFFFFFFFFFFFFDLL)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 2);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *(_QWORD *)v7 = v8;
      v7 += 8;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>((_QWORD *)a1, v6, (uint64_t)v7, (v7 - v6) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B582FE70(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<int>,std::vector<unsigned long>>(uint64_t a1, int **a2)
{
  int *v3;
  int *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if ((unint64_t)v5 >= 0x7FFFFFFFFFFFFFFDLL)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 2);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *(_QWORD *)v7 = v8;
      v7 += 8;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)a1, v6, (uint64_t)v7, (v7 - v6) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned long>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B582FF60(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<int>,std::vector<long long>>(uint64_t a1, int **a2)
{
  int *v3;
  int *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if ((unint64_t)v5 >= 0x7FFFFFFFFFFFFFFDLL)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 2);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *(_QWORD *)v7 = v8;
      v7 += 8;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((_QWORD *)a1, v6, (uint64_t)v7, (v7 - v6) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long long>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B5830050(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<int>,std::vector<unsigned long long>>(uint64_t a1, int **a2)
{
  int *v3;
  int *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if ((unint64_t)v5 >= 0x7FFFFFFFFFFFFFFDLL)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 2);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *(_QWORD *)v7 = v8;
      v7 += 8;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>((_QWORD *)a1, v6, (uint64_t)v7, (v7 - v6) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned long long>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B5830140(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<int>,std::vector<float>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  if (v4 == *a2)
  {
    v7 = 0;
    v9 = 0;
  }
  else
  {
    if (v5 < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5 >> 2);
    v7 = v6;
    v8 = 0;
    do
    {
      *(float *)&v6[v8] = (float)*(int *)(v3 + v8);
      v8 += 4;
    }
    while (v3 + v8 != v4);
    v9 = (uint64_t)&v6[v8];
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)a1, v7, v9, (v9 - (uint64_t)v7) >> 2);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<float>>::dispatch;
  if (v7)
    operator delete(v7);
}

void sub_1B5830234(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<int>,std::vector<double>>(uint64_t a1, int **a2)
{
  int *v3;
  int *v4;
  uint64_t v5;
  double *v6;
  double *v7;
  int v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if ((unint64_t)v5 >= 0x7FFFFFFFFFFFFFFDLL)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (double *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 2);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *v7++ = (double)v8;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((_QWORD *)a1, v6, (uint64_t)v7, v7 - v6);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<double>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B5830328(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<int>,std::vector<long double>>(uint64_t a1, int **a2)
{
  int *v3;
  int *v4;
  uint64_t v5;
  double *v6;
  double *v7;
  int v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if ((unint64_t)v5 >= 0x7FFFFFFFFFFFFFFDLL)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (double *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 2);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *v7++ = (double)v8;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long double>::__init_with_size[abi:ne180100]<long double *,long double *>((_QWORD *)a1, v6, (uint64_t)v7, v7 - v6);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long double>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B583041C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<int>,applesauce::CF::ArrayRef>(_QWORD *a1, uint64_t a2)
{
  __CFArray *Mutable;
  _DWORD *v5;
  _DWORD *v6;
  CFNumberRef v7;
  std::runtime_error *exception;
  _QWORD v9[2];

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B380]);
  v9[1] = Mutable;
  v5 = *(_DWORD **)a2;
  v6 = *(_DWORD **)(a2 + 8);
  while (v5 != v6)
  {
    LODWORD(v9[0]) = *v5;
    v7 = CFNumberCreate(0, kCFNumberIntType, v9);
    if (!v7)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::NumberRef>(Mutable, v7);
    CFRelease(v7);
    ++v5;
  }
  mcp_applesauce::CF::Array_Builder::copy_array((applesauce::CF::ArrayRef *)v9, Mutable);
  a1[2] = 0;
  a1[3] = 0;
  *a1 = v9[0];
  a1[1] = 0;
  a1[4] = AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::dispatch;
  if (Mutable)
    CFRelease(Mutable);
}

void sub_1B583055C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  mcp_applesauce::CF::Array_Builder::~Array_Builder((const void **)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>(_QWORD *result, const void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned short>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B58305E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Implementation::In_Place_Storage<std::vector<unsigned short>>::dispatch(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  void *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, _QWORD, __int128 *);
  char *v12;
  uint64_t v13;
  AMCP::Thing *v14;
  uint64_t v15;
  void *v16;
  char *v17;
  BOOL v18;
  unsigned __int16 *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned __int16 *v26;
  unsigned __int16 *v27;
  uint64_t v28;
  _BYTE *v29;
  _BYTE *v30;
  char v31;
  unsigned __int16 *v32;
  unsigned __int16 *v33;
  uint64_t v34;
  _BYTE *v35;
  char v36;
  unsigned __int16 *v37;
  unsigned __int16 *v38;
  uint64_t v39;
  _BYTE *v40;
  char v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  size_t v50;
  uint64_t (*v51)(uint64_t, uint64_t, uint64_t, uint64_t *);
  unsigned __int16 *v52;
  unsigned __int16 *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  uint64_t (*v60)(uint64_t, uint64_t, uint64_t, uint64_t *);
  char *v61;
  unint64_t v62;
  uint64_t v63;

  switch((int)result)
  {
    case 0:
      v7 = *(void **)a2;
      if (*(_QWORD *)a2)
      {
        *(_QWORD *)(a2 + 8) = v7;
        operator delete(v7);
      }
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      v8 = 0uLL;
      goto LABEL_9;
    case 1:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>((_QWORD *)a3, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 1);
      result = 0;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned short>>::dispatch;
      return result;
    case 2:
      result = 0;
      v8 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned short>>::dispatch;
      *(_QWORD *)(a2 + 32) = 0;
LABEL_9:
      *(_OWORD *)a2 = v8;
      *(_OWORD *)(a2 + 16) = v8;
      return result;
    case 3:
      v9 = AMCP::Implementation::get_type_marker<std::vector<unsigned short>>();
      result = 0;
      *a4 = v9;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned short>>())
        return a2;
      else
        return 0;
    case 5:
      v10 = AMCP::Implementation::get_type_marker<std::vector<unsigned short>>();
      v11 = *(void (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32);
      *(_QWORD *)&v58 = 0;
      if (v11)
      {
        v11(3, a2, 0, &v58);
        v11 = (void (*)(uint64_t, uint64_t, _QWORD, __int128 *))v58;
      }
      if (v11 != (void (*)(uint64_t, uint64_t, _QWORD, __int128 *))v10)
        goto LABEL_30;
      v12 = *(char **)(a3 + 32);
      v61 = 0;
      if (v12)
      {
        ((void (*)(uint64_t, uint64_t, _QWORD, char **))v12)(3, a3, 0, &v61);
        v12 = v61;
      }
      if (v12 == (char *)v10)
      {
        if (*(_QWORD *)(a2 + 32))
        {
          *(_QWORD *)&v58 = AMCP::Implementation::get_type_marker<std::vector<unsigned short>>();
          v13 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32))(4, a2, 0, &v58);
        }
        else
        {
          v13 = 0;
        }
        *(_QWORD *)&v58 = AMCP::Implementation::get_type_marker<std::vector<unsigned short>>();
        v49 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a3 + 32))(4, a3, 0, &v58);
        v50 = *(_QWORD *)(v13 + 8) - *(_QWORD *)v13;
        if (v50 == *(_QWORD *)(v49 + 8) - *(_QWORD *)v49 && !memcmp(*(const void **)v13, *(const void **)v49, v50))
          return 1;
      }
      else
      {
LABEL_30:
        AMCP::Thing::convert_to<std::vector<unsigned short>>(&v58, a2);
        AMCP::Thing::convert_to<std::vector<unsigned short>>(&v61, a3);
        v16 = (void *)v58;
        v17 = v61;
        v18 = *((_QWORD *)&v58 + 1) - (_QWORD)v58 == v62 - (_QWORD)v61
           && memcmp((const void *)v58, v61, *((_QWORD *)&v58 + 1) - v58) == 0;
        if (v17)
          operator delete(v17);
        if (v16)
          operator delete(v16);
        if (v18)
          return 1;
      }
      return 0;
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<std::vector<BOOL>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<signed char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<unsigned char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<short>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<unsigned short>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<int>>()
        && !AMCP::is_one_of<std::vector<unsigned int>,std::vector<long>,std::vector<unsigned long>,std::vector<long long>,std::vector<unsigned long long>,std::vector<float>,std::vector<double>,std::vector<long double>,applesauce::CF::ArrayRef>(a4))
      {
        goto LABEL_131;
      }
      if (*(_QWORD *)(a2 + 32))
      {
        *(_QWORD *)&v58 = AMCP::Implementation::get_type_marker<std::vector<unsigned short>>();
        v15 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32))(4, a2, 0, &v58);
      }
      else
      {
        v15 = 0;
      }
      if (*a4 != AMCP::Implementation::get_type_marker<std::vector<BOOL>>())
      {
        if (*a4 == AMCP::Implementation::get_type_marker<std::vector<char>>())
        {
          if (v15)
          {
            v27 = *(unsigned __int16 **)v15;
            v26 = *(unsigned __int16 **)(v15 + 8);
            v28 = (char *)v26 - (char *)v27;
            if (v26 == v27)
            {
              v29 = 0;
              v30 = 0;
            }
            else
            {
              if (v28 < 0)
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              v29 = operator new(v28 >> 1);
              v30 = v29;
              do
              {
                v31 = *(_BYTE *)v27++;
                *v30++ = v31;
              }
              while (v27 != v26);
            }
            v60 = 0;
            v58 = 0u;
            v59 = 0u;
            std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(&v58, v29, (uint64_t)v30, v30 - v29);
            v51 = AMCP::Implementation::In_Place_Storage<std::vector<char>>::dispatch;
LABEL_105:
            v60 = v51;
            if (!v29)
              goto LABEL_108;
            v48 = v29;
            goto LABEL_107;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<signed char>>())
        {
          if (v15)
          {
            v33 = *(unsigned __int16 **)v15;
            v32 = *(unsigned __int16 **)(v15 + 8);
            v34 = (char *)v32 - (char *)v33;
            if (v32 == v33)
            {
              v29 = 0;
              v35 = 0;
            }
            else
            {
              if (v34 < 0)
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              v29 = operator new(v34 >> 1);
              v35 = v29;
              do
              {
                v36 = *(_BYTE *)v33++;
                *v35++ = v36;
              }
              while (v33 != v32);
            }
            v60 = 0;
            v58 = 0u;
            v59 = 0u;
            std::vector<signed char>::__init_with_size[abi:ne180100]<signed char *,signed char *>(&v58, v29, (uint64_t)v35, v35 - v29);
            v51 = AMCP::Implementation::In_Place_Storage<std::vector<signed char>>::dispatch;
            goto LABEL_105;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned char>>())
        {
          if (v15)
          {
            v38 = *(unsigned __int16 **)v15;
            v37 = *(unsigned __int16 **)(v15 + 8);
            v39 = (char *)v37 - (char *)v38;
            if (v37 == v38)
            {
              v29 = 0;
              v40 = 0;
            }
            else
            {
              if (v39 < 0)
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              v29 = operator new(v39 >> 1);
              v40 = v29;
              do
              {
                v41 = *(_BYTE *)v38++;
                *v40++ = v41;
              }
              while (v38 != v37);
            }
            v60 = 0;
            v58 = 0u;
            v59 = 0u;
            std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v58, v29, (uint64_t)v40, v40 - v29);
            v51 = AMCP::Implementation::In_Place_Storage<std::vector<unsigned char>>::dispatch;
            goto LABEL_105;
          }
        }
        else
        {
          if (*a4 != AMCP::Implementation::get_type_marker<std::vector<short>>())
          {
            if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned short>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned short>,std::vector<unsigned short>>((uint64_t)&v58, v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<int>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned short>,std::vector<int>>((uint64_t)&v58, (unsigned __int16 **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned int>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned short>,std::vector<unsigned int>>((uint64_t)&v58, (unsigned __int16 **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned short>,std::vector<long>>((uint64_t)&v58, (unsigned __int16 **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned short>,std::vector<unsigned long>>((uint64_t)&v58, (unsigned __int16 **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned short>,std::vector<long long>>((uint64_t)&v58, (unsigned __int16 **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned long long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned short>,std::vector<unsigned long long>>((uint64_t)&v58, (unsigned __int16 **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<float>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned short>,std::vector<float>>((uint64_t)&v58, (unsigned __int16 **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<double>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned short>,std::vector<double>>((uint64_t)&v58, (unsigned __int16 **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long double>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned short>,std::vector<long double>>((uint64_t)&v58, (unsigned __int16 **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned short>,applesauce::CF::ArrayRef>(&v58, v15);
            }
            else
            {
LABEL_131:
              v60 = 0;
              v58 = 0u;
              v59 = 0u;
            }
            goto LABEL_108;
          }
          if (v15)
          {
            v53 = *(unsigned __int16 **)v15;
            v52 = *(unsigned __int16 **)(v15 + 8);
            v54 = (char *)v52 - (char *)v53;
            if (v52 == v53)
            {
              v29 = 0;
              v57 = 0;
            }
            else
            {
              if (v54 < 0)
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v54 >> 1);
              v29 = v55;
              v56 = 0;
              do
              {
                *(_WORD *)&v55[v56 * 2] = v53[v56];
                ++v56;
              }
              while (&v53[v56] != v52);
              v57 = (uint64_t)&v55[v56 * 2];
            }
            v60 = 0;
            v58 = 0u;
            v59 = 0u;
            std::vector<short>::__init_with_size[abi:ne180100]<short *,short *>(&v58, v29, v57, (v57 - (uint64_t)v29) >> 1);
            v51 = AMCP::Implementation::In_Place_Storage<std::vector<short>>::dispatch;
            goto LABEL_105;
          }
        }
LABEL_122:
        __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
      }
      if (!v15)
        goto LABEL_122;
      v20 = *(unsigned __int16 **)v15;
      v19 = *(unsigned __int16 **)(v15 + 8);
      v62 = 0;
      v63 = 0;
      v61 = 0;
      v21 = (char *)v19 - (char *)v20;
      if (v19 == v20)
        goto LABEL_80;
      v22 = v21 >> 1;
      std::vector<BOOL>::__vallocate[abi:ne180100](&v61, v21 >> 1);
      v23 = v62;
      v24 = v62 + v22;
      v62 += v22;
      if (v23)
      {
        v25 = v24 - 1;
        if (((v24 - 1) ^ (v23 - 1)) < 0x40)
          goto LABEL_72;
      }
      else
      {
        v25 = v24 - 1;
      }
      v42 = v25 >> 6;
      if (v24 >= 0x41)
        v43 = v42;
      else
        v43 = 0;
      *(_QWORD *)&v61[8 * v43] = 0;
LABEL_72:
      v44 = v23 & 0x3F;
      v45 = &v61[8 * (v23 >> 6)];
      do
      {
        v46 = 1 << v44;
        if (*v20)
          v47 = *(_QWORD *)v45 | v46;
        else
          v47 = *(_QWORD *)v45 & ~v46;
        *(_QWORD *)v45 = v47;
        ++v20;
        v45 += 8 * (v44 == 63);
        if (v44 == 63)
          v44 = 0;
        else
          ++v44;
      }
      while (v20 != v19);
LABEL_80:
      v60 = 0;
      v58 = 0u;
      v59 = 0u;
      std::vector<BOOL>::vector(&v58, (uint64_t)&v61);
      v60 = AMCP::Implementation::In_Place_Storage<std::vector<BOOL>>::dispatch;
      v48 = v61;
      if (v61)
LABEL_107:
        operator delete(v48);
LABEL_108:
      AMCP::swap((AMCP::Thing *)&v58, (AMCP::Thing *)a3, v14);
      if (v60)
        v60(0, (uint64_t)&v58, 0, 0);
      return 0;
    default:
      return result;
  }
}

void sub_1B5830DDC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  void *v14;

  if (v14)
    operator delete(v14);
  __clang_call_terminate(a1);
}

_QWORD *AMCP::Thing::convert_to<std::vector<unsigned short>>(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  std::bad_cast *exception;
  std::bad_cast *v10;
  std::bad_cast *v11;
  std::bad_cast *v12;
  std::bad_cast *v13;
  std::bad_cast *v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[2];
  uint64_t (*v18)(uint64_t, _OWORD *, _QWORD, uint64_t *);
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, _QWORD, _QWORD);

  if (!*(_QWORD *)(a2 + 32))
    goto LABEL_12;
  v4 = AMCP::Implementation::get_type_marker<std::vector<unsigned short>>();
  v5 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a2 + 32);
  v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))v4)
  {
    v19 = v4;
    v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (v6)
    {
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
      return std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>(a1, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 1);
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v16 = AMCP::Implementation::get_type_marker<std::vector<unsigned short>>();
  memset(v17, 0, sizeof(v17));
  v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v15 = v4;
  v8 = v18(4, v17, 0, &v15);
  if (!v8)
  {
    v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>(a1, *(const void **)v8, *(_QWORD *)(v8 + 8), (uint64_t)(*(_QWORD *)(v8 + 8) - *(_QWORD *)v8) >> 1);
  if (v18)
    return (_QWORD *)v18(0, v17, 0, 0);
  return result;
}

void sub_1B583100C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

_QWORD *AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned short>,std::vector<unsigned short>>(uint64_t a1, uint64_t a2)
{
  _QWORD *result;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  result = std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>((_QWORD *)a1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 1);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned short>>::dispatch;
  return result;
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned short>,std::vector<int>>(uint64_t a1, unsigned __int16 **a2)
{
  unsigned __int16 *v3;
  unsigned __int16 *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  int v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if ((unint64_t)v5 >= 0x7FFFFFFFFFFFFFFFLL)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5 >> 1);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *(_DWORD *)v7 = v8;
      v7 += 4;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)a1, v6, (uint64_t)v7, (v7 - v6) >> 2);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<int>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B583116C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned short>,std::vector<unsigned int>>(uint64_t a1, unsigned __int16 **a2)
{
  unsigned __int16 *v3;
  unsigned __int16 *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  int v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if ((unint64_t)v5 >= 0x7FFFFFFFFFFFFFFFLL)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5 >> 1);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *(_DWORD *)v7 = v8;
      v7 += 4;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)a1, v6, (uint64_t)v7, (v7 - v6) >> 2);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned int>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B5831258(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned short>,std::vector<long>>(uint64_t a1, unsigned __int16 **a2)
{
  unsigned __int16 *v3;
  unsigned __int16 *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  unsigned int v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if ((unint64_t)v5 >= 0x3FFFFFFFFFFFFFFFLL)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 1);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *(_QWORD *)v7 = v8;
      v7 += 8;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>((_QWORD *)a1, v6, (uint64_t)v7, (v7 - v6) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B5831344(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned short>,std::vector<unsigned long>>(uint64_t a1, unsigned __int16 **a2)
{
  unsigned __int16 *v3;
  unsigned __int16 *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  unsigned int v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if ((unint64_t)v5 >= 0x3FFFFFFFFFFFFFFFLL)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 1);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *(_QWORD *)v7 = v8;
      v7 += 8;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)a1, v6, (uint64_t)v7, (v7 - v6) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned long>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B5831430(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned short>,std::vector<long long>>(uint64_t a1, unsigned __int16 **a2)
{
  unsigned __int16 *v3;
  unsigned __int16 *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  unsigned int v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if ((unint64_t)v5 >= 0x3FFFFFFFFFFFFFFFLL)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 1);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *(_QWORD *)v7 = v8;
      v7 += 8;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((_QWORD *)a1, v6, (uint64_t)v7, (v7 - v6) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long long>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B583151C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned short>,std::vector<unsigned long long>>(uint64_t a1, unsigned __int16 **a2)
{
  unsigned __int16 *v3;
  unsigned __int16 *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  unsigned int v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if ((unint64_t)v5 >= 0x3FFFFFFFFFFFFFFFLL)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 1);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *(_QWORD *)v7 = v8;
      v7 += 8;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>((_QWORD *)a1, v6, (uint64_t)v7, (v7 - v6) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned long long>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B5831608(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned short>,std::vector<float>>(uint64_t a1, unsigned __int16 **a2)
{
  unsigned __int16 *v3;
  unsigned __int16 *v4;
  uint64_t v5;
  float *v6;
  float *v7;
  unsigned int v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if ((unint64_t)v5 >= 0x7FFFFFFFFFFFFFFFLL)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (float *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5 >> 1);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *v7++ = (float)v8;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)a1, v6, (uint64_t)v7, v7 - v6);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<float>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B58316F8(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned short>,std::vector<double>>(uint64_t a1, unsigned __int16 **a2)
{
  unsigned __int16 *v3;
  unsigned __int16 *v4;
  uint64_t v5;
  double *v6;
  double *v7;
  unsigned int v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if ((unint64_t)v5 >= 0x3FFFFFFFFFFFFFFFLL)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (double *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 1);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *v7++ = (double)v8;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((_QWORD *)a1, v6, (uint64_t)v7, v7 - v6);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<double>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B58317E8(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned short>,std::vector<long double>>(uint64_t a1, unsigned __int16 **a2)
{
  unsigned __int16 *v3;
  unsigned __int16 *v4;
  uint64_t v5;
  double *v6;
  double *v7;
  unsigned int v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if ((unint64_t)v5 >= 0x3FFFFFFFFFFFFFFFLL)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (double *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 1);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *v7++ = (double)v8;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long double>::__init_with_size[abi:ne180100]<long double *,long double *>((_QWORD *)a1, v6, (uint64_t)v7, v7 - v6);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long double>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B58318D8(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned short>,applesauce::CF::ArrayRef>(_QWORD *a1, uint64_t a2)
{
  __CFArray *Mutable;
  _WORD *v5;
  _WORD *v6;
  CFNumberRef v7;
  std::runtime_error *exception;
  _QWORD v9[2];

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B380]);
  v9[1] = Mutable;
  v5 = *(_WORD **)a2;
  v6 = *(_WORD **)(a2 + 8);
  while (v5 != v6)
  {
    LOWORD(v9[0]) = *v5;
    v7 = CFNumberCreate(0, kCFNumberShortType, v9);
    if (!v7)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::NumberRef>(Mutable, v7);
    CFRelease(v7);
    ++v5;
  }
  mcp_applesauce::CF::Array_Builder::copy_array((applesauce::CF::ArrayRef *)v9, Mutable);
  a1[2] = 0;
  a1[3] = 0;
  *a1 = v9[0];
  a1[1] = 0;
  a1[4] = AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::dispatch;
  if (Mutable)
    CFRelease(Mutable);
}

