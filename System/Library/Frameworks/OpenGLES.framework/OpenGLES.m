llvm::raw_ostream *llvm::LLT::dump(llvm::LLT *this)
{
  llvm::raw_ostream *v2;
  llvm *v3;
  llvm::raw_ostream *result;
  _BYTE *v5;

  v2 = (llvm::raw_ostream *)llvm::dbgs(this);
  v3 = (llvm *)llvm::LLT::print(this, v2);
  result = (llvm::raw_ostream *)llvm::dbgs(v3);
  v5 = (_BYTE *)*((_QWORD *)result + 4);
  if ((unint64_t)v5 >= *((_QWORD *)result + 3))
    return (llvm::raw_ostream *)llvm::raw_ostream::write(result);
  *((_QWORD *)result + 4) = v5 + 1;
  *v5 = 10;
  return result;
}

uint64_t cvmsPluginAllocate(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 32))(*a1);
}

uint64_t oglCodeGenServiceGenerateIR(uint64_t a1, _DWORD *a2, unint64_t a3)
{
  char v3;
  uint64_t v5;
  llvm::MemoryBuffer *v6;
  uint64_t v7[2];
  uint64_t v8;
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  switch(*a2)
  {
    case 0:
      if (a3 <= 3)
        oglCodeGenServiceGenerateIR_cold_1();
      goto LABEL_5;
    case 1:
      return glpVertexStateToLLVMModule((uint64_t)(a2 + 1), a1);
    case 2:
      return glpFragmentStateToLLVMModule((uint64_t)(a2 + 1), a1);
    case 3:
      return glpGenerateLLVMIRModule(a2 + 1, (int)a3 - 4, a1);
    case 4:
      return glpARBProgramInfoToLLVMModule(a1, (uint64_t)a2);
    default:
      if (*a2 != 186106078)
        return 0;
LABEL_5:
      llvm::MemoryBuffer::getMemBuffer();
      llvm::MemoryBuffer::getMemBufferRef(v6);
      llvm::parseBitcodeFile();
      llvm::expectedToErrorOrAndEmitErrors<std::unique_ptr<llvm::Module>>(v7, (uint64_t)&v8);
      llvm::Expected<std::unique_ptr<llvm::Module>>::~Expected((uint64_t)v7);
      v3 = v9;
      if ((v9 & 1) != 0)
      {
        if ((_DWORD)v8)
        {
          v5 = 0;
          goto LABEL_16;
        }
      }
      else
      {
        std::system_category();
        v3 = v9;
      }
      if ((v3 & 1) != 0)
        oglCodeGenServiceGenerateIR_cold_2();
      v5 = v8;
LABEL_16:
      if (v6)
        (*(void (**)())(*(_QWORD *)v6 + 8))();
      return v5;
  }
}

void llvm::expectedToErrorOrAndEmitErrors<std::unique_ptr<llvm::Module>>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if ((a1[1] & 1) != 0)
  {
    v4 = *a1;
    *a1 = 0;
    v7 = v4;
    v5 = llvm::errorToErrorCodeAndEmitErrors();
    *(_BYTE *)(a2 + 16) |= 1u;
    *(_QWORD *)a2 = v5;
    *(_QWORD *)(a2 + 8) = v6;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  else
  {
    *(_BYTE *)(a2 + 16) &= ~1u;
    v3 = *a1;
    *a1 = 0;
    *(_QWORD *)a2 = v3;
  }
}

_QWORD *cvmsPluginServiceInitialize()
{
  _QWORD *v0;

  v0 = malloc_type_calloc(1uLL, 8uLL, 0x2004093837F09uLL);
  *v0 = LLVMContextCreate();
  return v0;
}

void cvmsPluginServiceTerminate(uint64_t a1)
{
  _QWORD *v1;

  v1 = *(_QWORD **)(a1 + 56);
  if (*v1)
    LLVMContextDispose();
  free(v1);
}

uint64_t cvmsPluginElementBuild(_QWORD *a1)
{
  __int16 **v1;
  int v2;
  __int16 *v4;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  _DWORD *v9;
  char v10[1024];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v1 = (__int16 **)a1[1];
  v2 = **v1;
  if ((v2 - 20) > 4)
    return 540;
  v4 = v1[2];
  if ((v2 - 22) < 2)
  {
    v7 = *(_DWORD *)v4;
    v6 = v4 + 4;
    v8 = (v7 - 4);
    if (v2 == 22)
      v9 = &cvmsPluginBuild(_cvms_plugin_element_s const*)::shaderindex;
    else
      v9 = &cvmsPluginBuild(_cvms_plugin_element_s const*)::shaderindex;
    if (v2 == 22)
      snprintf_l(v10, 0x400uLL, 0, "/tmp/vertex_shader_llvm_ir%d.txt");
    else
      snprintf_l(v10, 0x400uLL, 0, "/tmp/fragment_shader_llvm_ir%d.txt");
    glpDumpLLVMIR(v10, v6, v8);
    ++*v9;
    (*(void (**)(_QWORD *, uint64_t))(*a1 + 32))(a1, 4);
    return 0;
  }
  if ((v2 - 20) > 1)
    return 540;
  *(_QWORD *)v10 = a1;
  if (v2 == 20)
    glpVertexStateToLLVMIR(v4, (uint64_t (*)(uint64_t, _QWORD))cvmsPluginAllocate, (uint64_t)v10);
  else
    glpFragmentStateToLLVMIR((uint64_t)v4, (uint64_t (*)(uint64_t, _QWORD))cvmsPluginAllocate, (uint64_t)v10);
  return 0;
}

void llvm::function_ref<llvm::Optional<std::string> ()(llvm::StringRef)>::callback_fn<llvm::$_0>(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[24] = 0;
}

uint64_t llvm::Expected<std::unique_ptr<llvm::Module>>::~Expected(uint64_t a1)
{
  uint64_t v2;

  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    v2 = *(_QWORD *)a1;
    *(_QWORD *)a1 = 0;
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  else
  {
    std::unique_ptr<llvm::Module>::reset[abi:nn180100]((uint64_t *)a1, 0);
  }
  return a1;
}

uint64_t std::unique_ptr<llvm::Module>::reset[abi:nn180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    MEMORY[0x22E317030]();
    JUMPOUT(0x22E3170D8);
  }
  return result;
}

void std::__throw_bad_array_new_length[abi:nn180100]()
{
  abort();
}

void *PPParserMacroCreate()
{
  void *result;

  result = malloc_type_calloc(0x38uLL, 1uLL, 0x55E18C5uLL);
  if (!result)
    abort();
  return result;
}

_QWORD *PPParserMacroCreateFromMacro(uint64_t a1)
{
  _QWORD *v2;
  unsigned int v3;
  void *v4;
  unsigned int v5;
  void *v6;
  unint64_t v7;

  v2 = PPParserMacroCreate();
  v3 = strlen(*(const char **)a1);
  v4 = malloc_type_calloc(v3 + 1, 1uLL, 0x55E18C5uLL);
  if (!v4
    || (*v2 = v4,
        memmove(v4, *(const void **)a1, v3),
        v5 = strlen(*(const char **)(a1 + 8)),
        (v6 = malloc_type_calloc(v5 + 1, 1uLL, 0x55E18C5uLL)) == 0))
  {
    abort();
  }
  v2[1] = v6;
  memmove(v6, *(const void **)(a1 + 8), v5);
  PPParserMacroSetParamStringsCount((uint64_t)v2, *(unsigned int *)(a1 + 16));
  if (*(_DWORD *)(a1 + 16))
  {
    v7 = 0;
    do
    {
      PPParserMacroSetParamString((uint64_t)v2, v7, *(char **)(*(_QWORD *)(a1 + 24) + 8 * v7));
      ++v7;
    }
    while (v7 < *(unsigned int *)(a1 + 16));
  }
  return v2;
}

void *PPParserMacroSetParamStringsCount(uint64_t a1, size_t size)
{
  int v2;
  void *result;

  v2 = size;
  result = malloc_type_calloc(8uLL, size, 0x55E18C5uLL);
  if (!result)
    abort();
  *(_QWORD *)(a1 + 24) = result;
  *(_DWORD *)(a1 + 16) = v2;
  return result;
}

void *PPParserMacroSetParamString(uint64_t a1, unsigned int a2, char *__s)
{
  unsigned int v6;
  void *v7;
  void *result;

  v6 = strlen(__s);
  v7 = malloc_type_malloc(v6 + 1, 0x1B2F740uLL);
  if (!v7)
    abort();
  *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * a2) = v7;
  result = memmove(*(void **)(*(_QWORD *)(a1 + 24) + 8 * a2), __s, v6);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * a2) + v6) = 0;
  return result;
}

void PPParserMacroFree(uint64_t a1)
{
  unint64_t v2;
  unint64_t i;
  void *v4;
  void *v5;

  free(*(void **)a1);
  free(*(void **)(a1 + 8));
  v2 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v2)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(void **)(*(_QWORD *)(a1 + 24) + 8 * i);
      if (v4)
      {
        free(v4);
        v2 = *(unsigned int *)(a1 + 16);
      }
    }
  }
  v5 = *(void **)(a1 + 24);
  if (v5)
    free(v5);
  free((void *)a1);
}

void PPParserMacroSetSearchString(uint64_t a1, void **a2, const void *a3, unsigned int a4)
{
  void *v7;

  if (*a2)
  {
    free(*a2);
    *a2 = 0;
  }
  if (a3)
  {
    v7 = malloc_type_malloc(a4 + 1, 0x1B2F740uLL);
    if (!v7)
      abort();
    *a2 = v7;
    memmove(v7, a3, a4);
    *((_BYTE *)*a2 + a4) = 0;
  }
}

void *__abort_malloc(size_t a1)
{
  void *result;

  result = malloc_type_malloc(a1, 0x1B2F740uLL);
  if (!result)
    abort();
  return result;
}

uint64_t PPParserMacroGetReplaceString(uint64_t a1, uint64_t a2, const char **a3, uint64_t a4)
{
  uint64_t v4;
  const char *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  const char *v11;
  int v12;
  uint64_t v13;
  const char **v14;
  const char **v15;
  int v16;

  v4 = a4;
  v5 = *(const char **)(a1 + 8);
  v6 = *(unsigned __int8 *)v5;
  if (!*v5)
  {
    v8 = 0;
    if (!a4)
      return v8;
    goto LABEL_20;
  }
  v7 = a1;
  LODWORD(v8) = 0;
  do
  {
    v9 = 0;
    while (v6 != 10 && v6 != 32)
      v6 = v5[++v9];
    v10 = *(unsigned int *)(v7 + 16);
    v11 = v5;
    v12 = v9;
    if ((_DWORD)v10)
    {
      v13 = v7;
      v14 = *(const char ***)(v7 + 24);
      v15 = a3;
      while (strlen(*v14) != v9 || strncmp(v5, *v14, v9))
      {
        ++v15;
        ++v14;
        if (!--v10)
        {
          v11 = v5;
          v12 = v9;
          goto LABEL_14;
        }
      }
      v11 = *v15;
      v12 = strlen(*v15);
LABEL_14:
      v7 = v13;
      v4 = a4;
    }
    if (v4)
    {
      memmove((void *)(v4 + v8), v11, (v12 + 1));
      v16 = v12 + v8;
      *(_BYTE *)(v4 + (v12 + v8)) = v6;
    }
    else
    {
      v16 = v8 + v12;
    }
    v8 = (v16 + 1);
    v5 += v9 + 1;
    v6 = *(unsigned __int8 *)v5;
  }
  while (*v5);
  if (v4)
LABEL_20:
    *(_BYTE *)(v4 + v8) = 0;
  return v8;
}

_DWORD *PPParserIdentifierCreate()
{
  _DWORD *result;

  result = malloc_type_calloc(0x30uLL, 1uLL, 0x55E18C5uLL);
  if (!result)
    abort();
  result[2] = 1;
  *((_BYTE *)result + 21) = -1;
  return result;
}

void **PPParserIdentifierCreateFromIdentifier(uint64_t a1)
{
  void **v2;

  v2 = (void **)PPParserIdentifierCreate();
  PPParserIdentifierSetName(v2, *(char **)a1);
  v2[1] = *(void **)(a1 + 8);
  *((_DWORD *)v2 + 4) = *(_DWORD *)(a1 + 16);
  *((_WORD *)v2 + 10) = *(_WORD *)(a1 + 20);
  return v2;
}

uint64_t PPParserIdentifierSetName(void **a1, char *__s)
{
  void *v4;
  unsigned int v5;
  void *v6;

  v4 = *a1;
  if (v4)
  {
    free(v4);
    *a1 = 0;
  }
  if (!__s)
    return 1;
  v5 = strlen(__s);
  v6 = malloc_type_calloc(v5 + 1, 1uLL, 0x55E18C5uLL);
  if (!v6)
    abort();
  *a1 = v6;
  memmove(v6, __s, v5);
  return 0;
}

void PPParserIdentifierFree(void **a1)
{
  void *v2;

  v2 = *a1;
  if (v2)
    free(v2);
  free(a1);
}

void *PPParserScopeCreate()
{
  void *v0;
  void *v1;
  void **v2;
  int v3;
  _QWORD *v4;
  void **v5;
  void **v6;
  int v7;
  _QWORD *v8;
  void **v9;

  v0 = malloc_type_calloc(0x38uLL, 1uLL, 0x55E18C5uLL);
  if (!v0)
    abort();
  v1 = v0;
  v2 = (void **)PPParserMacroCreate();
  PPParserMacroSetSearchString((uint64_t)v2, v2, "MVMULT", 6u);
  PPParserMacroSetParamStringsCount((uint64_t)v2, 3uLL);
  PPParserMacroSetParamString((uint64_t)v2, 0, "dst");
  PPParserMacroSetParamString((uint64_t)v2, 1u, "mat");
  v3 = PPParserMacroSetParamString((uint64_t)v2, 2u, "vec");
  v2[1] = PPParserPreprocessString(v3, "DP4 dst.x, mat[0], vec;\nDP4 dst.y, mat[1], vec;\nDP4 dst.z, mat[2], vec;\nDP4 dst.w, mat[3], vec;",
            0);
  v5 = (void **)*((_QWORD *)v1 + 2);
  v4 = (_QWORD *)*((_QWORD *)v1 + 3);
  if (!v5)
    v5 = v2;
  *((_QWORD *)v1 + 2) = v5;
  if (v4)
  {
    v4[6] = v2;
    v2[5] = v4;
  }
  *((_QWORD *)v1 + 3) = v2;
  v6 = (void **)PPParserMacroCreate();
  PPParserMacroSetSearchString((uint64_t)v6, v6, "TMVMULT", 7u);
  PPParserMacroSetParamStringsCount((uint64_t)v6, 4uLL);
  PPParserMacroSetParamString((uint64_t)v6, 0, "dst");
  PPParserMacroSetParamString((uint64_t)v6, 1u, "mat");
  PPParserMacroSetParamString((uint64_t)v6, 2u, "vec");
  v7 = PPParserMacroSetParamString((uint64_t)v6, 3u, "tmp");
  v6[1] = PPParserPreprocessString(v7, "MUL tmp, mat[0], vec.x;\n"
            "MAD tmp, mat[1], vec.y, tmp;\n"
            "MAD tmp, mat[2], vec.z, tmp;\n"
            "MAD dst, mat[3], vec.w, tmp;\n",
            0);
  v9 = (void **)*((_QWORD *)v1 + 2);
  v8 = (_QWORD *)*((_QWORD *)v1 + 3);
  if (!v9)
    v9 = v6;
  *((_QWORD *)v1 + 2) = v9;
  if (v8)
  {
    v8[6] = v6;
    v6[5] = v8;
  }
  *((_QWORD *)v1 + 3) = v6;
  return v1;
}

_BYTE *PPParserPreprocessString(int a1, char *__s, int a3)
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  char *v31;
  unsigned int v32;
  int v33;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  BOOL v44;
  BOOL v46;
  unsigned int v47;
  int v48;
  _BYTE *result;
  uint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  char *v53;
  char v54;
  unsigned int v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  char v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v72;
  int v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  char *v77;
  unsigned int v78;
  int v79;
  unsigned int v81;
  uint64_t v82;
  int v84;
  unsigned int v85;
  unsigned int v87;

  v5 = strlen(__s);
  v6 = v5;
  if (a3)
  {
    if (v5 >= 0xA)
      v7 = 10;
    else
      v7 = v5;
    if (v5 < 0xB
      || ((v8 = __s[v7], v9 = v8 > 0x23, v10 = (1 << v8) & 0x900002600, !v9)
        ? (v11 = v10 == 0)
        : (v11 = 1),
          !v11))
    {
      v12 = 0;
      v13 = v7;
      goto LABEL_13;
    }
    v13 = v7 + 1;
  }
  else
  {
    v7 = 0;
    v13 = 0;
  }
  v12 = 1;
LABEL_13:
  if (v7 < v5)
  {
    v14 = 0;
    v15 = 0;
    v16 = v5 - 1;
    while (1)
    {
      v17 = __s[v7];
      if (v15)
        break;
      v20 = v17 - 9;
      v21 = 0;
      v19 = 1;
      v15 = 1;
      v22 = 1;
      switch(v20)
      {
        case 0:
        case 23:
          if ((_BYTE)v12)
          {
            v15 = 0;
            goto LABEL_82;
          }
          v40 = v7 + 1;
          if (v40 < v6)
          {
            v41 = __s[v40];
            v9 = v41 > 0x23;
            v42 = (1 << v41) & 0x900002600;
            if (v9 || v42 == 0)
              goto LABEL_83;
          }
          goto LABEL_81;
        case 1:
LABEL_83:
          v15 = 0;
          v21 = 0;
          ++v13;
          break;
        case 4:
          ++v13;
          v35 = v7 + 1;
          if (v35 >= v6)
          {
            v15 = 0;
            v21 = 0;
          }
          else
          {
            v15 = 0;
            v21 = 0;
            if (__s[v35] == 10)
              v19 = 2;
            else
              v19 = 1;
          }
          goto LABEL_85;
        case 26:
          break;
        case 31:
        case 32:
        case 35:
        case 49:
        case 50:
        case 52:
          if ((_BYTE)v12)
            v23 = v13;
          else
            v23 = v13 + 1;
          v13 = v23 + 1;
          v24 = v7 + 1;
          if (v24 >= v6)
            goto LABEL_40;
          v25 = __s[v24];
          v9 = v25 > 0x23;
          v26 = (1 << v25) & 0x900002600;
          if (!v9 && v26 != 0)
            goto LABEL_40;
          goto LABEL_75;
        case 34:
        case 36:
          if (v12 | v14)
            v23 = v13;
          else
            v23 = v13 + 1;
          v13 = v23 + 1;
          v28 = v7 + 1;
          if (v28 >= v6)
          {
LABEL_40:
            v15 = 0;
            v22 = 0;
            v21 = 0;
            goto LABEL_41;
          }
          v29 = __s[v28];
          if (v29 - 58 > 0xFFFFFFF5 || v29 <= 0x2E && ((1 << v29) & 0x400900002600) != 0)
          {
            v30 = 0;
            v19 = v6 - v7;
            v31 = &__s[v28];
            do
            {
              v32 = v31[v30];
              v33 = v30 + 1;
              if (v32 != 32 && v32 != 9)
              {
                v21 = v32 == 46 || v32 - 48 < 0xA;
                if (v32 - 58 >= 0xFFFFFFF6 || v32 <= 0x2E && ((1 << v32) & 0x400800002400) != 0)
                {
                  v15 = 0;
                  v22 = 0;
                  v19 = v30 + 1;
                }
                else
                {
                  v15 = 0;
                  v22 = 0;
                  v19 = v30;
                }
                goto LABEL_30;
              }
              ++v30;
            }
            while (v16 - v7 != v33);
LABEL_81:
            v15 = 0;
            v22 = 0;
LABEL_82:
            v21 = 0;
          }
          else
          {
LABEL_75:
            v15 = 0;
            v21 = 0;
            v13 = v23 + 2;
            v19 = 1;
LABEL_85:
            v22 = 1;
          }
          break;
        case 37:
          v36 = v7 + 1;
          if (v36 >= v6)
          {
            v15 = 0;
            v22 = 0;
            if ((_BYTE)v12)
              v44 = 1;
            else
              v44 = v14 == 1;
            if (!v44)
              ++v13;
LABEL_91:
            ++v13;
            goto LABEL_92;
          }
          v37 = __s[v36];
          if (v37 == 46)
          {
            if ((_BYTE)v12)
              v38 = v13;
            else
              v38 = v13 + 1;
            v13 = v38 + 2;
            if (v7 + 2 >= v6
              || (v39 = __s[v7 + 2], v39 <= 0x23) && ((1 << v39) & 0x900002600) != 0)
            {
              v15 = 0;
              v22 = 0;
              v21 = 0;
            }
            else
            {
              v15 = 0;
              v21 = 0;
              v13 = v38 + 3;
            }
            v19 = 2;
          }
          else
          {
            if ((_BYTE)v12)
              v46 = 1;
            else
              v46 = v14 == 1;
            if (v46)
              v47 = v13;
            else
              v47 = v13 + 1;
            v13 = v47 + 1;
            if (v37 - 48 >= 0xA)
            {
              if (v37 <= 0x23 && ((1 << v37) & 0x900002600) != 0)
              {
                v15 = 0;
                v22 = 0;
              }
              else
              {
                v15 = 0;
                v13 = v47 + 2;
              }
LABEL_92:
              v19 = 1;
              goto LABEL_29;
            }
            v15 = 0;
            v22 = 0;
            v21 = 3;
LABEL_41:
            v19 = 1;
          }
          break;
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
          v15 = 0;
          v22 = 0;
          ++v13;
          v21 = v14 | v12;
          break;
        case 60:
          v15 = 0;
          v22 = 0;
          goto LABEL_91;
        default:
          v15 = 0;
          v22 = 0;
          v21 = 0;
          ++v13;
          goto LABEL_41;
      }
LABEL_30:
      v7 += v19;
      v14 = v21;
      v12 = v22;
      if (v7 >= v6)
        goto LABEL_118;
    }
    if (v17 == 10)
    {
      v15 = 0;
      ++v13;
    }
    else
    {
      if (v17 != 13)
      {
        v19 = 1;
        v15 = 1;
        goto LABEL_28;
      }
      ++v13;
      v18 = v7 + 1;
      if (v18 < v6)
      {
        v15 = 0;
        if (__s[v18] == 10)
          v19 = 2;
        else
          v19 = 1;
LABEL_28:
        v22 = v12;
LABEL_29:
        v21 = v14;
        goto LABEL_30;
      }
      v15 = 0;
    }
    v19 = 1;
    goto LABEL_28;
  }
  LOBYTE(v22) = v12;
LABEL_118:
  if ((_BYTE)v22)
    v48 = 1;
  else
    v48 = 2;
  result = malloc_type_calloc(v48 + v13, 1uLL, 0x55E18C5uLL);
  if (!result)
    abort();
  if (a3)
  {
    if (v6 >= 0xA)
      v50 = 10;
    else
      v50 = v6;
    if ((_DWORD)v50)
    {
      v51 = v50;
      v52 = result;
      v53 = __s;
      do
      {
        v54 = *v53++;
        *v52++ = v54;
        --v51;
      }
      while (v51);
    }
    if (v6 < 0xB
      || ((v55 = __s[v50], v9 = v55 > 0x23, v56 = (1 << v55) & 0x900002600, !v9)
        ? (v57 = v56 == 0)
        : (v57 = 1),
          !v57))
    {
      v58 = 0;
      v59 = v50;
      goto LABEL_137;
    }
    v59 = v50 + 1;
    result[v50] = 32;
  }
  else
  {
    LODWORD(v50) = 0;
    v59 = 0;
  }
  v58 = 1;
LABEL_137:
  if (v50 < v6)
  {
    v60 = 0;
    v61 = 0;
    while (1)
    {
      v62 = __s[v50];
      if (!v61)
      {
        v64 = __s[v50];
        v65 = v62 - 9;
        v66 = 0;
        v63 = 1;
        v61 = 1;
        v67 = 1;
        switch(v65)
        {
          case 0:
          case 23:
            if ((_BYTE)v58)
            {
              v61 = 0;
              goto LABEL_203;
            }
            if ((int)v50 + 1 >= v6)
              goto LABEL_202;
            v81 = __s[v50 + 1];
            v9 = v81 > 0x23;
            v82 = (1 << v81) & 0x900002600;
            if (!v9 && v82 != 0)
              goto LABEL_202;
            v61 = 0;
            v66 = 0;
            result[v59] = 32;
            goto LABEL_174;
          case 1:
            v61 = 0;
            v66 = 0;
            result[v59] = 10;
LABEL_174:
            ++v59;
            goto LABEL_164;
          case 4:
            result[v59] = 10;
            if ((int)v50 + 1 >= v6)
            {
              v61 = 0;
              v66 = 0;
            }
            else
            {
              v61 = 0;
              v66 = 0;
              if (__s[v50 + 1] == 10)
                v63 = 2;
              else
                v63 = 1;
            }
            ++v59;
            goto LABEL_164;
          case 26:
            goto LABEL_164;
          case 31:
          case 32:
          case 35:
          case 49:
          case 50:
          case 52:
            if ((_BYTE)v58)
            {
              v68 = v59;
            }
            else
            {
              v68 = v59 + 1;
              result[v59] = 32;
              v64 = __s[v50];
            }
            v59 = v68 + 1;
            result[v68] = v64;
            if ((int)v50 + 1 >= v6)
              goto LABEL_162;
            v69 = __s[v50 + 1];
            v9 = v69 > 0x23;
            v70 = (1 << v69) & 0x900002600;
            if (!v9 && v70 != 0)
              goto LABEL_162;
            goto LABEL_196;
          case 34:
          case 36:
            if (v58 | v60)
            {
              v68 = v59;
            }
            else
            {
              v68 = v59 + 1;
              result[v59] = 32;
              v64 = __s[v50];
            }
            v59 = v68 + 1;
            result[v68] = v64;
            v74 = v50 + 1;
            if ((int)v50 + 1 >= v6)
            {
LABEL_162:
              v61 = 0;
              v67 = 0;
              v66 = 0;
              goto LABEL_163;
            }
            v75 = __s[v74];
            if (v75 - 58 <= 0xFFFFFFF5 && (v75 > 0x2E || ((1 << v75) & 0x400900002600) == 0))
            {
LABEL_196:
              v61 = 0;
              v66 = 0;
              result[v59] = 32;
              v59 = v68 + 2;
              v63 = 1;
              v67 = 1;
              goto LABEL_164;
            }
            v76 = 0;
            v63 = v6 - v50;
            v77 = &__s[v74];
            break;
          case 37:
            v72 = v50 + 1;
            if ((int)v50 + 1 < v6 && __s[v72] == 46)
            {
              if ((_BYTE)v58)
              {
                v73 = v59;
              }
              else
              {
                v73 = v59 + 1;
                result[v59] = 32;
              }
              result[v73] = 46;
              v59 = v73 + 2;
              result[v73 + 1] = 46;
              if ((int)v50 + 2 >= v6
                || (v87 = __s[v50 + 2], v87 <= 0x23)
                && ((1 << v87) & 0x900002600) != 0)
              {
                v61 = 0;
                v67 = 0;
                v66 = 0;
              }
              else
              {
                v61 = 0;
                v66 = 0;
                result[v59] = 32;
                v59 = v73 + 3;
              }
              v63 = 2;
              goto LABEL_164;
            }
            if ((_BYTE)v58 || v60 == 1)
            {
              v84 = v59;
            }
            else
            {
              v84 = v59 + 1;
              result[v59] = 32;
            }
            v59 = v84 + 1;
            result[v84] = 46;
            if (v72 >= v6)
            {
              v61 = 0;
              v67 = 0;
              goto LABEL_151;
            }
            v85 = __s[v72];
            if (v85 - 48 >= 0xA)
            {
              if (v85 <= 0x23 && ((1 << v85) & 0x900002600) != 0)
              {
                v61 = 0;
                v67 = 0;
              }
              else
              {
                v61 = 0;
                result[v59] = 32;
                v59 = v84 + 2;
              }
LABEL_171:
              v63 = 1;
              goto LABEL_151;
            }
            v61 = 0;
            v67 = 0;
            v66 = 3;
LABEL_163:
            v63 = 1;
            goto LABEL_164;
          case 39:
          case 40:
          case 41:
          case 42:
          case 43:
          case 44:
          case 45:
          case 46:
          case 47:
          case 48:
            v61 = 0;
            v67 = 0;
            result[v59++] = v64;
            v66 = v60 | v58;
            goto LABEL_164;
          case 60:
            v61 = 0;
            v67 = 0;
            result[v59++] = v64;
            goto LABEL_171;
          default:
            v61 = 0;
            v67 = 0;
            v66 = 0;
            result[v59++] = v64;
            goto LABEL_163;
        }
        do
        {
          v78 = v77[v76];
          v79 = v76 + 1;
          if (v78 != 32 && v78 != 9)
          {
            v66 = v78 == 46 || v78 - 48 < 0xA;
            if (v78 - 58 >= 0xFFFFFFF6 || v78 <= 0x2E && ((1 << v78) & 0x400800002400) != 0)
            {
              v61 = 0;
              v67 = 0;
              v63 = v76 + 1;
            }
            else
            {
              v61 = 0;
              v67 = 0;
              v63 = v76;
            }
            goto LABEL_164;
          }
          ++v76;
        }
        while (v6 - 1 - (_DWORD)v50 != v79);
LABEL_202:
        v61 = 0;
        v67 = 0;
LABEL_203:
        v66 = 0;
        goto LABEL_164;
      }
      if (v62 == 10)
        break;
      if (v62 != 13)
      {
        v63 = 1;
        v61 = 1;
LABEL_150:
        v67 = v58;
LABEL_151:
        v66 = v60;
        goto LABEL_164;
      }
      result[v59] = 10;
      if ((int)v50 + 1 >= v6)
      {
        v61 = 0;
        v63 = 1;
      }
      else
      {
        v61 = 0;
        if (__s[v50 + 1] == 10)
          v63 = 2;
        else
          v63 = 1;
      }
      v67 = v58;
      v66 = v60;
      ++v59;
LABEL_164:
      LODWORD(v50) = v63 + v50;
      v60 = v66;
      v58 = v67;
      if (v50 >= v6)
        goto LABEL_238;
    }
    v61 = 0;
    result[v59++] = 10;
    v63 = 1;
    goto LABEL_150;
  }
  LOBYTE(v67) = v58;
LABEL_238:
  if (!(_BYTE)v67)
    result[v59] = 32;
  return result;
}

uint64_t *PPParserScopeCreateFromScope(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  void **v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;

  v2 = *a1;
  v3 = a1[2];
  v4 = (uint64_t *)malloc_type_calloc(0x38uLL, 1uLL, 0x55E18C5uLL);
  if (!v4)
    abort();
  v5 = v4;
  for (v4[4] = a1[4]; v2; v2 = *(_QWORD *)(v2 + 40))
  {
    v6 = PPParserIdentifierCreateFromIdentifier(v2);
    PPParserScopeAddIdentifier(v5, (uint64_t)v6);
  }
  for (; v3; v3 = *(_QWORD *)(v3 + 48))
  {
    v7 = PPParserMacroCreateFromMacro(v3);
    v9 = (_QWORD *)v5[2];
    v8 = v5[3];
    if (!v9)
      v9 = v7;
    v5[2] = (uint64_t)v9;
    if (v8)
    {
      *(_QWORD *)(v8 + 48) = v7;
      v7[5] = v8;
    }
    v5[3] = (uint64_t)v7;
  }
  return v5;
}

uint64_t PPParserScopeAddIdentifier(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  if (PPParserScopeFindIdentifier(a1, *(char **)a2))
    return 1;
  v6 = *a1;
  v5 = a1[1];
  if (!*a1)
    v6 = a2;
  *a1 = v6;
  if (v5)
  {
    *(_QWORD *)(v5 + 40) = a2;
    *(_QWORD *)(a2 + 32) = v5;
  }
  result = 0;
  a1[1] = a2;
  return result;
}

void PPParserScopeFree(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v2 = *a1;
  if (v2)
  {
    do
    {
      v3 = *(_QWORD *)(v2 + 32);
      v4 = *(_QWORD *)(v2 + 40);
      if (v3)
      {
        *(_QWORD *)(v3 + 40) = v4;
        v4 = *(_QWORD *)(v2 + 40);
      }
      else
      {
        *a1 = v4;
      }
      if (v4)
        v5 = (_QWORD *)(v4 + 32);
      else
        v5 = a1 + 1;
      *v5 = v3;
      PPParserIdentifierFree((void **)v2);
      v2 = *a1;
    }
    while (*a1);
  }
  for (i = a1[2]; i; i = a1[2])
  {
    v7 = *(_QWORD *)(i + 40);
    v8 = *(_QWORD *)(i + 48);
    if (v7)
    {
      *(_QWORD *)(v7 + 48) = v8;
      v8 = *(_QWORD *)(i + 48);
    }
    else
    {
      a1[2] = v8;
    }
    if (v8)
      v9 = (_QWORD *)(v8 + 40);
    else
      v9 = a1 + 3;
    *v9 = v7;
    PPParserMacroFree(i);
  }
  free(a1);
}

uint64_t PPParserScopeFindIdentifier(uint64_t *a1, char *__s2)
{
  uint64_t i;

  for (i = *a1; i; i = *(_QWORD *)(i + 40))
  {
    if (*(_QWORD *)i && !strcmp(*(const char **)i, __s2))
      break;
  }
  return i;
}

uint64_t PPParserScopeFindMacro(uint64_t a1, char *__s2)
{
  uint64_t i;

  for (i = *(_QWORD *)(a1 + 16); i; i = *(_QWORD *)(i + 48))
  {
    if (*(_QWORD *)i && !strcmp(*(const char **)i, __s2))
      break;
  }
  return i;
}

_DWORD *PPParserCreate(int a1)
{
  _DWORD *v2;
  _DWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = malloc_type_calloc(0x588uLL, 1uLL, 0x55E18C5uLL);
  if (!v2)
    abort();
  v3 = v2;
  v2[92] = a1;
  v2[93] = -1;
  *((_QWORD *)v2 + 1) = -1;
  *((_QWORD *)v2 + 2) = -1;
  v4 = PPParserScopeCreate();
  v6 = (_QWORD *)*((_QWORD *)v3 + 3);
  v5 = *((_QWORD *)v3 + 4);
  if (!v6)
    v6 = v4;
  *((_QWORD *)v3 + 3) = v6;
  if (v5)
  {
    *(_QWORD *)(v5 + 48) = v4;
    v4[5] = v5;
  }
  *((_QWORD *)v3 + 4) = v4;
  return v3;
}

void PPParserShutdown(uint64_t a1)
{
  uint64_t *i;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;

  for (i = *(uint64_t **)(a1 + 24); i; i = *(uint64_t **)(a1 + 24))
  {
    v3 = i[5];
    v4 = i[6];
    if (v3)
    {
      *(_QWORD *)(v3 + 48) = v4;
      v4 = i[6];
    }
    else
    {
      *(_QWORD *)(a1 + 24) = v4;
    }
    if (v4)
      v5 = (uint64_t *)(v4 + 40);
    else
      v5 = (uint64_t *)(a1 + 32);
    *v5 = v3;
    PPParserScopeFree(i);
  }
  if (*(_QWORD *)a1)
  {
    free(*(void **)a1);
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 336) = 0;
  }
}

void PPParserAttachString(uint64_t a1, char *__s, int a3)
{
  char *v4;
  const char *v6;
  unsigned int v7;
  void *v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  int v12;

  v4 = *(char **)a1;
  if (v4)
  {
    free(v4);
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 336) = 0;
  }
  else if (__s)
  {
    if (a3)
    {
      v6 = PPParserPreprocessString(0, __s, 1);
      *(_QWORD *)a1 = v6;
    }
    else
    {
      v7 = strlen(__s);
      v8 = malloc_type_calloc(v7 + 1, 1uLL, 0x55E18C5uLL);
      if (!v8)
        abort();
      *(_QWORD *)a1 = v8;
      memmove(v8, __s, v7);
      v6 = *(const char **)a1;
    }
    v9 = strlen(v6);
    *(_QWORD *)(a1 + 336) = v9;
    if (v9)
    {
      v10 = 0;
      v11 = v9;
      do
      {
        v12 = *(unsigned __int8 *)v6++;
        if (v12 == 10)
          *(_DWORD *)(a1 + 340) = ++v10;
        --v11;
      }
      while (v11);
    }
  }
}

void PPParserFree(uint64_t a1)
{
  PPParserShutdown(a1);
  free(*(void **)(a1 + 96));
  *(_QWORD *)(a1 + 96) = 0;
  free(*(void **)(a1 + 104));
  *(_QWORD *)(a1 + 104) = 0;
  PPParserLabelsFree(*(void ***)(a1 + 112));
  *(_QWORD *)(a1 + 112) = 0;
  free(*(void **)(a1 + 136));
  *(_QWORD *)(a1 + 136) = 0;
  free(*(void **)(a1 + 144));
  *(_QWORD *)(a1 + 144) = 0;
  PPParserLabelsFree(*(void ***)(a1 + 152));
  free((void *)a1);
}

void PPParserLabelsFree(void **a1)
{
  unint64_t v2;

  if (a1 && *(_DWORD *)a1)
  {
    v2 = 1;
    do
      free(a1[v2]);
    while (v2++ < *(unsigned int *)a1);
  }
  free(a1);
}

void PPParserAttachStream(_QWORD *a1, uint64_t a2)
{
  _DWORD **v4;

  v4 = (_DWORD **)a1[5];
  if (v4)
    PPStreamFree(v4);
  a1[5] = a2;
  a1[20] = glpProgram_PPStreamSetTarget;
  a1[21] = glpProgram_PPStreamAddOperation;
  a1[22] = glpProgram_PPStreamAddTempUsage;
  a1[23] = glpProgram_PPStreamAddAddressUsage;
  a1[24] = glpProgram_PPStreamAddParamBinding;
  a1[25] = glpProgram_PPStreamAddParamBindingArray;
  a1[26] = glpProgram_PPStreamAddAttribBinding;
  a1[27] = glpProgram_PPStreamAddOutputBinding;
  a1[28] = glpProgram_PPStreamAddOption;
  a1[29] = glpProgram_PPStreamAddConstant;
  a1[30] = glpProgram_PPStreamAddLabel;
  a1[31] = glpProgram_PPStreamResolveBranches;
}

uint64_t glpProgram_PPStreamSetTarget(uint64_t result, __int16 a2)
{
  **(_WORD **)(result + 40) = a2;
  return result;
}

char *glpProgram_PPStreamAddOperation(uint64_t a1, unint64_t *a2, const void *a3)
{
  uint64_t v4;
  char *result;

  v4 = *a2 & 7;
  *a2 = *a2 & 0xFFFFFFFFFFFFFFC7 | (8 * (*(_DWORD *)(a1 + 124) & 7));
  *(_DWORD *)(a1 + 124) = v4;
  result = PPStreamAddOperation(*(_QWORD *)(a1 + 40), (uint64_t)a2, a3);
  ++*(_DWORD *)(a1 + 120);
  return result;
}

char *glpProgram_PPStreamAddTempUsage(uint64_t a1, _OWORD *a2)
{
  return PPStreamAddTempUsage(*(_QWORD *)(a1 + 40), a2);
}

_BYTE *glpProgram_PPStreamAddAddressUsage(uint64_t a1, _DWORD *a2)
{
  return PPStreamAddAddressUsage(*(_QWORD *)(a1 + 40), a2);
}

char *glpProgram_PPStreamAddParamBinding(uint64_t a1, _OWORD *a2)
{
  return PPStreamAddParamBinding(*(_QWORD *)(a1 + 40), a2);
}

_BYTE *glpProgram_PPStreamAddParamBindingArray(uint64_t a1, _QWORD *a2)
{
  return PPStreamAddParamBindingArray(*(_QWORD *)(a1 + 40), a2);
}

char *glpProgram_PPStreamAddAttribBinding(uint64_t a1, uint64_t a2)
{
  int v4;
  char *result;

  v4 = *(_DWORD *)(a1 + 348);
  *(_DWORD *)(a1 + 348) = v4 + 1;
  *(_DWORD *)(a2 + 8) = v4;
  result = PPStreamAddAttribBinding(*(_QWORD *)(a1 + 40), (_OWORD *)a2);
  if ((*(_BYTE *)(a1 + 368) & 2) == 0)
    return (char *)GLDAttribBindingsAddAttribBinding((int **)(a1 + 144), (uint64_t *)a2);
  return result;
}

int *glpProgram_PPStreamAddOutputBinding(uint64_t a1, uint64_t a2)
{
  int v4;

  v4 = *(_DWORD *)(a1 + 352);
  *(_DWORD *)(a1 + 352) = v4 + 1;
  *(_DWORD *)(a2 + 8) = v4;
  PPStreamAddOutputBinding(*(_QWORD *)(a1 + 40), (_OWORD *)a2);
  return PPParserOutputBindingsAddOutputBinding((int **)(a1 + 136), (_QWORD *)a2);
}

_BYTE *glpProgram_PPStreamAddOption(uint64_t a1, char a2)
{
  return PPStreamAddOption(*(_QWORD *)(a1 + 40), a2);
}

_BYTE *glpProgram_PPStreamAddConstant(uint64_t a1, _DWORD *a2)
{
  return PPStreamAddConstant(*(_QWORD *)(a1 + 40), a2);
}

char *glpProgram_PPStreamAddLabel(uint64_t a1, const void *a2, unsigned int a3)
{
  PPStreamAddLabel(*(_QWORD *)(a1 + 40), a2, a3);
  return PPParserLabelsAddLabel((int **)(a1 + 152), (const char *)a2, a3);
}

uint64_t glpProgram_PPStreamResolveBranches(uint64_t a1)
{
  return PPStreamResolveBranches(*(_QWORD *)(a1 + 40));
}

uint64_t llvmir_PPStreamSetTarget(uint64_t result, int a2)
{
  *(_DWORD *)(result + 84) = a2;
  return result;
}

void llvmir_PPStreamAddOperation(uint64_t a1, uint64_t a2, const char *a3)
{
  if (a3 && *(_DWORD *)(a2 + 72))
    PPParserLabelsAddLabel((int **)(a1 + 112), a3, *(_DWORD *)(a2 + 72));
  gleLLVMAddOperation(*(_QWORD *)(a1 + 48), a2, 1);
  ++*(_DWORD *)(a1 + 120);
}

_DWORD *llvmir_PPStreamAddParamBinding(uint64_t a1, _QWORD *a2)
{
  int *v4;
  int v5;
  int v6;
  _DWORD *result;

  v4 = *(int **)(a1 + 104);
  if (v4)
    v5 = *v4;
  else
    v5 = 0;
  v6 = v5 + 1;
  result = malloc_type_realloc(v4, 8 * (v5 + 1) + 16, 0xD9DAF1EDuLL);
  if (!result)
    abort();
  *(_QWORD *)(a1 + 104) = result;
  *result = v6;
  result[1] = 0;
  result[2] = v6;
  *(_QWORD *)&result[2 * v5 + 4] = *a2;
  return result;
}

int **llvmir_PPStreamAddAttribBinding(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int **result;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  int v10;

  v4 = GLDAttribBindingForPPStreamToken(*(_QWORD *)a2);
  result = (int **)(a1 + 144);
  v6 = *(unsigned int **)(a1 + 144);
  if (v6 && (v7 = *v6, (_DWORD)v7))
  {
    v8 = 0;
    v9 = v6 + 2;
    while (*(_QWORD *)&v9[2 * v8] != v4)
    {
      if (v7 == ++v8)
        goto LABEL_6;
    }
    *(_DWORD *)(a2 + 8) = v8;
  }
  else
  {
LABEL_6:
    v10 = *(_DWORD *)(a1 + 348);
    *(_DWORD *)(a1 + 348) = v10 + 1;
    *(_DWORD *)(a2 + 8) = v10;
    return (int **)GLDAttribBindingsAddAttribBinding(result, (uint64_t *)a2);
  }
  return result;
}

int *llvmir_PPStreamAddOutputBinding(int *result, uint64_t a2)
{
  unint64_t v2;
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  int v7;

  v2 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 0x1F00) == 0xA00)
  {
    v2 = (v2 >> 2) & 0x700000000 | v2 & 0xFFFFFFE0FFFFFFFFLL;
    *(_QWORD *)a2 = v2;
  }
  v3 = (unsigned int *)*((_QWORD *)result + 17);
  if (v3 && (v4 = *v3, (_DWORD)v4))
  {
    v5 = 0;
    v6 = v3 + 2;
    while (*(_QWORD *)&v6[2 * v5] != v2)
    {
      if (v4 == ++v5)
        goto LABEL_8;
    }
    *(_DWORD *)(a2 + 8) = v5;
  }
  else
  {
LABEL_8:
    v7 = result[88];
    result[88] = v7 + 1;
    *(_DWORD *)(a2 + 8) = v7;
    return PPParserOutputBindingsAddOutputBinding((int **)result + 17, (_QWORD *)a2);
  }
  return result;
}

uint64_t llvmir_PPStreamAddOption(uint64_t result, char a2)
{
  *(_DWORD *)(result + 88) |= 1 << a2;
  return result;
}

__n128 llvmir_PPStreamAddConstant(uint64_t a1, __n128 *a2)
{
  int *v3;
  int v4;
  uint64_t v5;
  _DWORD *v6;
  __n128 result;
  __n128 v8;

  v3 = *(int **)(a1 + 96);
  if (v3)
    v4 = *v3;
  else
    v4 = 0;
  v8 = *a2;
  v5 = (v4 + 1);
  v6 = malloc_type_realloc(v3, (16 * v5) | 8, 0xD9DAF1EDuLL);
  if (!v6)
    abort();
  *(_QWORD *)(a1 + 96) = v6;
  *v6 = v5;
  result = v8;
  *(__n128 *)&v6[4 * v4 + 2] = v8;
  return result;
}

char *llvmir_PPStreamAddLabel(uint64_t a1, const char *a2, unsigned int a3)
{
  return PPParserLabelsAddLabel((int **)(a1 + 152), a2, a3);
}

BOOL llvmir_PPStreamResolveBranches(uint64_t a1)
{
  _DWORD *v1;
  unsigned int v2;
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  const char *v8;
  uint64_t v9;
  const char **v10;
  const char *v11;
  const char **v13;

  v1 = *(_DWORD **)(a1 + 152);
  if (v1)
    v2 = *v1;
  else
    v2 = 0;
  v3 = *(unsigned int **)(a1 + 112);
  if (!v3)
    return 0;
  v4 = *v3;
  if (!(_DWORD)v4)
    return 0;
  v5 = 0;
  v13 = (const char **)(v1 + 2);
  v6 = 1;
  do
  {
    v7 = 0;
    if (v2)
    {
      v8 = *(const char **)&v3[2 * v5 + 2];
      v9 = v2;
      v10 = v13;
      do
      {
        v11 = *v10++;
        if (!strcmp(v11, v8))
          v7 = 1;
        --v9;
      }
      while (v9);
    }
    v6 &= v7;
    ++v5;
  }
  while (v5 != v4);
  return v6 == 0;
}

uint64_t PPParserGetCharacter(uint64_t a1, _BYTE *a2)
{
  unsigned int v2;
  uint64_t v3;
  char v4;
  char v5;

  v2 = *(_DWORD *)(a1 + 320);
  if (v2 == *(_DWORD *)(a1 + 336))
    return 1;
  v4 = 1;
  while (1)
  {
    v5 = v4;
    *a2 = *(_BYTE *)(*(_QWORD *)a1 + v2);
    v2 = *(_DWORD *)(a1 + 320) + 1;
    *(_DWORD *)(a1 + 320) = v2;
    if (*a2 != 10)
      break;
    v4 = 0;
    ++*(_DWORD *)(a1 + 324);
    if (v2 == *(_DWORD *)(a1 + 336))
    {
      *a2 = 32;
      break;
    }
  }
  v3 = 0;
  if ((v5 & 1) == 0)
  {
    *a2 = 32;
    --*(_DWORD *)(a1 + 320);
  }
  return v3;
}

uint64_t PPParserReturnCharacter(uint64_t a1, _BYTE *a2)
{
  int v2;
  char v3;
  char v4;
  uint64_t v5;

  v2 = *(_DWORD *)(a1 + 320);
  if (!v2)
    return 1;
  v3 = 1;
  while (1)
  {
    v4 = v3;
    *a2 = *(_BYTE *)(*(_QWORD *)a1 + (v2 - 1));
    v2 = *(_DWORD *)(a1 + 320) - 1;
    *(_DWORD *)(a1 + 320) = v2;
    if (*a2 != 10)
      break;
    v3 = 0;
    --*(_DWORD *)(a1 + 324);
    if (!v2)
    {
      *a2 = 32;
      break;
    }
  }
  v5 = 0;
  if ((v4 & 1) == 0)
  {
    *a2 = 32;
    ++*(_DWORD *)(a1 + 320);
  }
  return v5;
}

uint64_t PPParserGetPart(uint64_t a1, char *a2, int a3)
{
  uint64_t v6;
  uint64_t result;
  uint64_t Macro;
  uint64_t v9;
  unsigned int ReplaceString;
  unsigned int v11;
  char *v12;
  char *v13;
  unsigned int v14;
  char *v15;
  uint64_t v16;
  _BYTE __src[256];
  uint64_t v18;

  v6 = 0;
  v18 = *MEMORY[0x24BDAC8D0];
  v16 = *(_QWORD *)(a1 + 320);
  while (!PPParserGetCharacter(a1, &a2[v6]) && a2[v6] != 32)
  {
    if (++v6 == 255)
    {
      result = 0;
      a2[255] = 0;
      return result;
    }
  }
  result = 0;
  a2[v6] = 0;
  if ((_DWORD)v6 && (_DWORD)v6 != 255)
  {
    if (a3 && (Macro = PPParserScopeFindMacro(*(_QWORD *)(a1 + 32), a2)) != 0 && !*(_DWORD *)(Macro + 16))
    {
      ReplaceString = PPParserMacroGetReplaceString(Macro, v9, 0, (uint64_t)__src);
      v11 = ReplaceString + *(_DWORD *)(a1 + 336);
      v12 = (char *)malloc_type_calloc(v11 - v6, 1uLL, 0x55E18C5uLL);
      if (!v12)
        abort();
      v13 = v12;
      v14 = ~(_DWORD)v6 + v11;
      memmove(v12, *(const void **)a1, v16);
      v15 = &v13[v16];
      memmove(v15, __src, ReplaceString);
      memmove(&v15[ReplaceString], (const void *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 320)), (*(_DWORD *)(a1 + 336) - *(_DWORD *)(a1 + 320)));
      free(*(void **)a1);
      *(_DWORD *)(a1 + 336) = v14;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 320) = v16;
      return PPParserGetPart(a1, a2, 0);
    }
    else
    {
      return v6;
    }
  }
  return result;
}

uint64_t PPParserReturnPart(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v4 = 0;
  v2 = 0;
  if (!PPParserReturnCharacter(a1, &v4))
  {
    v2 = 0;
    if (!PPParserReturnCharacter(a1, &v4))
    {
      while (v4 != 32)
      {
        v2 = (v2 + 1);
        if (PPParserReturnCharacter(a1, &v4))
          return v2;
      }
      PPParserGetCharacter(a1, &v4);
    }
  }
  return v2;
}

uint64_t PPParserDeclareNVAddressRegisters(uint64_t a1)
{
  _DWORD *v2;

  v2 = PPParserIdentifierCreate();
  PPParserIdentifierSetName((void **)v2, "A0");
  *(_QWORD *)(v2 + 3) = 0xFFFFFFFF00000000;
  return PPParserScopeAddIdentifier(*(uint64_t **)(a1 + 32), (uint64_t)v2);
}

uint64_t PPParserGetInteger(uint64_t a1, _DWORD *a2)
{
  int Part;
  int v4;
  char *v6;
  char v7[256];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v6 = 0;
  Part = PPParserGetPart(a1, v7, 1);
  if (!Part)
    return 46;
  v4 = Part;
  *a2 = strtol_l(v7, &v6, 0, 0);
  if (v6 == &v7[v4])
    return 0;
  else
    return 21;
}

uint64_t PPParserGetScalars(uint64_t a1, float *a2, int a3)
{
  int Part;
  int v7;
  uint64_t v8;
  float v9;
  char *v11;
  char v12[256];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v11 = 0;
  Part = PPParserGetPart(a1, v12, 1);
  if (!Part)
    return 46;
  v7 = Part;
  v8 = (a3 - 1) + 1;
  while (1)
  {
    v9 = glp_strtod(v12, &v11);
    *a2 = v9;
    if (v11 != &v12[v7])
      return 21;
    if (!--v8)
      break;
    if (!PPParserGetPart(a1, v12, 0))
      return 46;
    if (v12[0] != 44)
    {
      PPParserReturnPart(a1);
      return 0;
    }
    ++a2;
    v11 = 0;
    v7 = PPParserGetPart(a1, v12, 1);
    if (!v7)
      return 46;
  }
  return 0;
}

uint64_t PPParserParseOptionIdentifier(uint64_t a1)
{
  uint64_t result;
  int v29;
  __int128 v30;
  _BYTE v31[28];
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (!PPParserGetPart(a1, v31, 0))
    return 46;
  if ((*(_BYTE *)(a1 + 368) & 2) == 0)
  {
    if (*(_QWORD *)v31 == 0x69736F705F425241
      && *(_QWORD *)&v31[8] == 0x766E695F6E6F6974
      && *(_QWORD *)&v31[15] == 0x746E6169726176)
    {
      *(_BYTE *)(a1 + 380) |= 1u;
      if ((*(_WORD *)(a1 + 376) & 1) == 0)
      {
        (*(void (**)(uint64_t, _QWORD))(a1 + 224))(a1, 0);
        v30 = xmmword_22D805A60;
        (*(void (**)(uint64_t, __int128 *))(a1 + 208))(a1, &v30);
      }
      return 0;
    }
    if (*(_QWORD *)v31 == 0x65747265765F564ELL
      && *(_QWORD *)&v31[8] == 0x6172676F72705F78
      && *(_QWORD *)&v31[11] == 0x326D6172676F72)
    {
      *(_DWORD *)(a1 + 368) = 49;
      (*(void (**)(uint64_t, uint64_t))(a1 + 224))(a1, 10);
      return 0;
    }
    if (*(_QWORD *)v31 == 0x65747265765F564ELL
      && *(_QWORD *)&v31[8] == 0x6172676F72705F78
      && *(_QWORD *)&v31[11] == 0x336D6172676F72)
    {
      *(_DWORD *)(a1 + 368) = 52;
      (*(void (**)(uint64_t, uint64_t))(a1 + 224))(a1, 11);
      return 0;
    }
    if (*(_QWORD *)v31 == 0x65765F454C505041
      && *(_QWORD *)&v31[8] == 0x696F705F78657472
      && *(_QWORD *)&v31[16] == 0x657A69735F746ELL)
    {
      result = 0;
      *(_BYTE *)(a1 + 379) |= 8u;
      return result;
    }
    goto LABEL_31;
  }
  if (*(_QWORD *)v31 == 0x5F676F665F425241 && *(_DWORD *)&v31[8] == 7370853)
  {
    v29 = *(unsigned __int8 *)(a1 + 381) | 2;
    if (v29 != 2)
      return 39;
    result = 0;
LABEL_112:
    *(_BYTE *)(a1 + 381) = v29;
    return result;
  }
  if (*(_QWORD *)v31 == 0x5F676F665F425241 && *(_QWORD *)&v31[5] == 0x327078655F676FLL)
  {
    if (*(_BYTE *)(a1 + 381) != 3 && *(_BYTE *)(a1 + 381))
      return 39;
    result = 0;
    LOBYTE(v29) = 3;
    goto LABEL_112;
  }
  if (*(_QWORD *)v31 == 0x5F676F665F425241 && *(_QWORD *)&v31[7] == 0x7261656E696C5FLL)
  {
    if (*(unsigned __int8 *)(a1 + 381) > 1u)
      return 39;
    result = 0;
    LOBYTE(v29) = 1;
    goto LABEL_112;
  }
  if (!(*(_QWORD *)v31 ^ 0x6F665F454C505041 | *(_QWORD *)&v31[8] ^ 0x64656E6769735F67 | v31[16]))
  {
    result = 0;
    *(_BYTE *)(a1 + 385) = 1;
    return result;
  }
  if (*(_QWORD *)v31 == 0x636572705F425241
    && *(_QWORD *)&v31[8] == 0x69685F6E6F697369
    && *(_QWORD *)&v31[16] == 0x65747361665F746ELL
    && *(_QWORD *)&v31[19] == 0x74736574736166)
  {
    if ((*(unsigned __int8 *)(a1 + 382) | 4) == 4)
    {
      *(_BYTE *)(a1 + 382) = 4;
      (*(void (**)(uint64_t, uint64_t))(a1 + 224))(a1, 4);
      return 0;
    }
    return 39;
  }
  if (*(_QWORD *)v31 == 0x636572705F425241
    && *(_QWORD *)&v31[8] == 0x69685F6E6F697369
    && *(_QWORD *)&v31[16] == 0x736563696E5F746ELL
    && *(unsigned __int16 *)&v31[24] == 116)
  {
    if (*(_BYTE *)(a1 + 382) == 5 || !*(_BYTE *)(a1 + 382))
    {
      *(_BYTE *)(a1 + 382) = 5;
      (*(void (**)(uint64_t, uint64_t))(a1 + 224))(a1, 5);
      return 0;
    }
    return 39;
  }
  if (*(_QWORD *)v31 == 0x6D676172665F564ELL
    && *(_QWORD *)&v31[8] == 0x676F72705F746E65
    && *(_DWORD *)&v31[16] == 7168370)
  {
    *(_DWORD *)(a1 + 368) = 51;
    (*(void (**)(uint64_t, uint64_t))(a1 + 224))(a1, 8);
    return 0;
  }
  if (*(_QWORD *)v31 == 0x6D676172665F564ELL
    && *(_QWORD *)&v31[8] == 0x676F72705F746E65
    && *(_QWORD *)&v31[13] == 0x326D6172676F72)
  {
    *(_DWORD *)(a1 + 368) = 54;
    (*(void (**)(uint64_t, uint64_t))(a1 + 224))(a1, 9);
    PPParserDeclareNVAddressRegisters(a1);
    return 0;
  }
  if (*(_QWORD *)v31 == 0x676172665F425241
    && *(_QWORD *)&v31[8] == 0x6F72705F746E656DLL
    && *(_QWORD *)&v31[16] == 0x6168735F6D617267
    && *(_DWORD *)&v31[24] == 7827300)
  {
    *(_BYTE *)(a1 + 384) = 1;
    (*(void (**)(uint64_t, uint64_t))(a1 + 224))(a1, 13);
    return 0;
  }
  if (!(*(_QWORD *)v31 ^ 0x776172645F425241 | *(_QWORD *)&v31[8] ^ 0x737265666675625FLL | v31[16])
    || !(*(_QWORD *)v31 ^ 0x776172645F495441 | *(_QWORD *)&v31[8] ^ 0x737265666675625FLL | v31[16]))
  {
    *(_BYTE *)(a1 + 383) = 1;
    (*(void (**)(uint64_t, uint64_t))(a1 + 224))(a1, 12);
    return 0;
  }
LABEL_31:
  if (!(*(_QWORD *)v31 ^ 0x6F6E5F454C505041 | *(_QWORD *)&v31[8] ^ 0x656D69746E75725FLL | *(_QWORD *)&v31[16] ^ 0x656C69706D6F635FLL | v31[24]))
    return 0;
  if (*(_QWORD *)v31 != 0x70735F454C505041
    || *(_QWORD *)&v31[8] != 0x706F5F6C61696365
    || *(unsigned __int16 *)&v31[16] != 115)
  {
    return 5;
  }
  result = 0;
  *(_BYTE *)(a1 + 380) |= 2u;
  return result;
}

uint64_t PPParserParseBlock(uint64_t a1)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  __int16 v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (!PPParserGetPart(a1, (char *)&v11, 0))
    return 46;
  if (v11 != 1380013139 || v12 != 84)
  {
    if (v11 != 4476485)
      return 7;
    goto LABEL_13;
  }
  v4 = PPParserScopeCreate();
  v6 = *(_QWORD **)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  if (!v6)
    v6 = v4;
  *(_QWORD *)(a1 + 24) = v6;
  if (v5)
  {
    *(_QWORD *)(v5 + 48) = v4;
    v4[5] = v5;
  }
  *(_QWORD *)(a1 + 32) = v4;
  if (v11 == 4476485)
  {
LABEL_13:
    v8 = (uint64_t *)(a1 + 32);
    v7 = *(uint64_t **)(a1 + 32);
    v9 = v7[5];
    v10 = v7[6];
    if (v9)
    {
      *(_QWORD *)(v9 + 48) = v10;
      v10 = v7[6];
    }
    else
    {
      *(_QWORD *)(a1 + 24) = v10;
    }
    if (v10)
      v8 = (uint64_t *)(v10 + 40);
    *v8 = v9;
    PPParserScopeFree(v7);
  }
  if (!PPParserGetPart(a1, (char *)&v11, 0))
    return 46;
  if (v11 == 59)
    return 0;
  else
    return 30;
}

uint64_t PPParserParseArray(uint64_t a1, _DWORD *a2)
{
  uint64_t result;
  char v5[256];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  if (!PPParserGetPart(a1, v5, 0))
    return 46;
  if (v5[0] != 91)
    return 11;
  result = PPParserGetInteger(a1, a2);
  if ((_DWORD)result)
    return result;
  if ((*a2 & 0x80000000) != 0)
    return 35;
  if (!PPParserGetPart(a1, v5, 0))
    return 46;
  if (v5[0] == 93)
    return 0;
  else
    return 11;
}

uint64_t PPParserParseDefaultArray(uint64_t a1, _DWORD *a2)
{
  uint64_t result;
  char v5[256];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  if (!PPParserGetPart(a1, v5, 0))
    return 46;
  if (v5[0] != 91)
    return 11;
  if (!PPParserGetPart(a1, v5, 0))
    return 46;
  if (v5[0] == 93)
  {
    result = 0;
    *a2 = 0;
    return result;
  }
  PPParserReturnPart(a1);
  result = PPParserGetInteger(a1, a2);
  if (!(_DWORD)result)
  {
    if ((*a2 & 0x80000000) != 0)
      return 35;
    if (PPParserGetPart(a1, v5, 0))
    {
      if (v5[0] == 93)
        return 0;
      else
        return 11;
    }
    return 46;
  }
  return result;
}

uint64_t PPParserParseRangeArray(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t result;
  unsigned __int16 v7;
  unsigned __int8 v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (!PPParserGetPart(a1, (char *)&v7, 0))
    return 46;
  if (v7 != 91)
    return 11;
  result = PPParserGetInteger(a1, a2);
  if ((_DWORD)result)
    return result;
  if ((*a2 & 0x80000000) != 0)
    return 35;
  if (!PPParserGetPart(a1, (char *)&v7, 0))
    return 46;
  if (v7 == 93)
  {
    result = 0;
    *a3 = *a2;
    return result;
  }
  if (v7 ^ 0x2E2E | v8)
    return 11;
  result = PPParserGetInteger(a1, a3);
  if (!(_DWORD)result)
  {
    if (*a3 < *a2)
      return 35;
    if (PPParserGetPart(a1, (char *)&v7, 0))
    {
      if (v7 == 93)
        return 0;
      else
        return 11;
    }
    return 46;
  }
  return result;
}

uint64_t PPParserParseIndirectArray(uint64_t a1, unint64_t *a2, _DWORD *a3)
{
  uint64_t Identifier;
  uint64_t v7;
  uint64_t result;
  int Part;
  int v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  char __s2[256];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (!PPParserGetPart(a1, __s2, 0))
    return 46;
  if (__s2[0] != 91)
    return 11;
  if (!PPParserGetInteger(a1, a3))
  {
    if ((*a3 & 0x80000000) != 0)
      return 35;
    goto LABEL_10;
  }
  v14 = 0;
  PPParserReturnPart(a1);
  if (!PPParserGetPart(a1, __s2, 0))
    return 46;
  Identifier = PPParserScopeFindIdentifier(*(uint64_t **)(a1 + 32), __s2);
  if (!Identifier)
    return 26;
  v7 = Identifier;
  if (*(_DWORD *)(Identifier + 16) != -1)
    return 22;
  Part = PPParserGetPart(a1, __s2, 0);
  if (!Part)
    return 46;
  v10 = Part;
  result = 13;
  if (v10 == 1 && __s2[0] == 46)
  {
    v11 = PPParserGetPart(a1, __s2, 0);
    if (!v11)
      return 46;
    if (v11 != 1)
      return 13;
    if ((*(_BYTE *)(a1 + 368) & 0x10) != 0)
    {
      switch(__s2[0])
      {
        case 'w':
          v12 = *a2 | 0xC;
          goto LABEL_32;
        case 'x':
          goto LABEL_29;
        case 'y':
          v12 = *a2 & 0xFFFFFFFFFFFFFFF3 | 4;
          goto LABEL_32;
        case 'z':
          v12 = *a2 & 0xFFFFFFFFFFFFFFF3 | 8;
          goto LABEL_32;
        default:
          return 13;
      }
    }
    if (__s2[0] != 120)
      return 13;
LABEL_29:
    v12 = *a2 & 0xFFFFFFFFFFFFFFF3;
LABEL_32:
    *a2 = v12;
    if (PPParserGetInteger(a1, &v14))
    {
      PPParserReturnPart(a1);
      v14 = 0;
    }
    if ((*(_BYTE *)(a1 + 368) & 0x10) != 0)
    {
      if ((v14 - 256) < 0xFFFFFE00)
        return 36;
    }
    else if ((v14 - 64) <= 0xFFFFFF7F)
    {
      return 36;
    }
    v13 = *a2 & 0xFFFFFFFF00FFFFFFLL | (v14 << 24);
    *a2 = v13;
    *a2 = v13 & 0xFFFFFFFFFFFFFFFCLL | (2 * (*(_DWORD *)(v7 + 12) & 1)) | 1;
LABEL_10:
    if (PPParserGetPart(a1, __s2, 0))
    {
      if (__s2[0] == 93)
        return 0;
      else
        return 11;
    }
    return 46;
  }
  return result;
}

uint64_t PPParserParseAddressDeclaration(uint64_t a1)
{
  int v2;
  void **v3;
  uint64_t v4;
  int v5;
  uint64_t v7;
  int v8;
  char __s[256];
  uint64_t v10;

  v2 = 0;
  v10 = *MEMORY[0x24BDAC8D0];
  do
  {
    if (!PPParserGetPart(a1, __s, 0))
      return 46;
    if (PPParserValidateName(a1, __s))
      return 18;
    v3 = (void **)PPParserIdentifierCreate();
    PPParserIdentifierSetName(v3, __s);
    *((_DWORD *)v3 + 4) = -1;
    v4 = *(_QWORD *)(a1 + 32);
    *((_DWORD *)v3 + 3) = v2 + *(_DWORD *)(v4 + 32);
    if (PPParserScopeAddIdentifier((uint64_t *)v4, (uint64_t)v3))
    {
      PPParserIdentifierFree(v3);
      return 28;
    }
    if (!PPParserGetPart(a1, __s, 0))
      return 46;
    ++v2;
  }
  while (__s[0] == 44);
  if (__s[0] != 59)
    return 31;
  v5 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 32);
  if ((v5 + v2) > *(_DWORD *)(a1 + 284))
    return 56;
  for (; v2; --v2)
  {
    v8 = v5;
    (*(void (**)(uint64_t, int *))(a1 + 184))(a1, &v8);
    v7 = *(_QWORD *)(a1 + 32);
    v5 = *(_DWORD *)(v7 + 32) + 1;
    *(_DWORD *)(v7 + 32) = v5;
  }
  return 0;
}

uint64_t PPParserValidateName(uint64_t a1, char *__s)
{
  char **v4;
  int v5;
  const char *v6;
  const char **v7;
  const char *v8;
  unsigned int v9;
  uint64_t result;
  const char **v11;
  uint64_t v12;
  int v13;
  char **v14;
  char **v15;
  int v16;
  const char *v17;
  int v18;
  int v19;
  const char *v20;
  int v21;
  const char *v22;
  char __s2[16];
  const char **v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v4 = &fpDclList;
  v5 = *(_DWORD *)(a1 + 368);
  if ((v5 & 2) == 0)
    v4 = &vpDclList;
  v6 = *v4;
  if (!*v4)
  {
LABEL_7:
    if ((v5 | 2) == 2)
    {
      v9 = strlen(__s);
      result = 0;
      if (v9 > 8 || ((1 << v9) & 0x198) == 0)
        return result;
    }
    v25 = 0u;
    v26 = 0u;
    if ((v5 & 2) != 0)
      v11 = (const char **)&OpsList_ARBfp10;
    else
      v11 = (const char **)&OpsList_ARBvp10;
    v24 = v11;
    v12 = 1;
    v13 = 2;
    v14 = &OpsList_NVvp20;
    switch(v5)
    {
      case '1':
        goto LABEL_18;
      case '3':
        v14 = &OpsList_NVfp10;
        v12 = 1;
        goto LABEL_18;
      case '4':
        *(_QWORD *)&v25 = &OpsList_NVvp20;
        v13 = 3;
        v14 = &OpsList_NVvp30;
        goto LABEL_17;
      case '6':
        *(_QWORD *)&v25 = &OpsList_NVfp10;
        v13 = 3;
        v14 = &OpsList_NVfp20;
LABEL_17:
        v12 = 2;
LABEL_18:
        (&v24)[v12] = (const char **)v14;
        LODWORD(v12) = v13;
        break;
      default:
        break;
    }
    if ((*(_BYTE *)(a1 + 380) & 2) != 0)
    {
      v15 = &OpsList_fpSpecial;
      if ((v5 & 2) == 0)
        v15 = &OpsList_vpSpecial;
      (&v24)[v12] = (const char **)v15;
      LODWORD(v12) = v12 + 1;
    }
    v16 = 0;
    (&v24)[v12] = 0;
    while (1)
    {
      v17 = *v11;
      if (*v11)
        break;
LABEL_58:
      v11 = (&v24)[++v16];
      if (!v11)
        return 0;
    }
    while (1)
    {
      if (!strcmp(__s, v17))
        return 18;
      v18 = *(_DWORD *)(a1 + 368);
      if ((v18 & 0x10) != 0)
      {
        sprintf_l(__s2, 0, "%sC", v17);
        if (!strcmp(__s, __s2))
          return 18;
        v18 = *(_DWORD *)(a1 + 368);
        if (v18 == 52)
        {
          sprintf_l(__s2, 0, "%sC0", *v11);
          if (!strcmp(__s, __s2))
            return 18;
          sprintf_l(__s2, 0, "%sC1", *v11);
          if (!strcmp(__s, __s2))
            return 18;
          sprintf_l(__s2, 0, "%s_SAT", *v11);
          if (!strcmp(__s, __s2))
            return 18;
          sprintf_l(__s2, 0, "%sC_SAT", *v11);
          if (!strcmp(__s, __s2))
            return 18;
          sprintf_l(__s2, 0, "%sC0_SAT", *v11);
          if (!strcmp(__s, __s2))
            return 18;
          sprintf_l(__s2, 0, "%sC1_SAT", *v11);
          if (!strcmp(__s, __s2))
            return 18;
          v18 = *(_DWORD *)(a1 + 368);
        }
      }
      if ((v18 & 2) != 0)
      {
        sprintf_l(__s2, 0, "%s_SAT", *v11);
        if (!strcmp(__s, __s2))
          return 18;
        if ((*(_BYTE *)(a1 + 368) & 0x10) != 0)
        {
          sprintf_l(__s2, 0, "%sC_SAT", *v11);
          if (!strcmp(__s, __s2))
            return 18;
          v19 = strlen(__s);
          v20 = *v11;
          v21 = strlen(*v11);
          if (v21 + 1 == v19)
          {
            sprintf_l(__s2, 0, "%sR", v20);
            if (!strcmp(__s, __s2))
              return 18;
            sprintf_l(__s2, 0, "%sH", *v11);
            if (!strcmp(__s, __s2))
              return 18;
            sprintf_l(__s2, 0, "%sX");
LABEL_56:
            if (!strcmp(__s, __s2))
              return 18;
            goto LABEL_57;
          }
          if (v21 + 2 == v19)
          {
            sprintf_l(__s2, 0, "%sRC", v20);
            if (!strcmp(__s, __s2))
              return 18;
            sprintf_l(__s2, 0, "%sHC", *v11);
            if (!strcmp(__s, __s2))
              return 18;
            sprintf_l(__s2, 0, "%sXC");
            goto LABEL_56;
          }
          if (v21 + 5 == v19)
          {
            sprintf_l(__s2, 0, "%sR_SAT", v20);
            if (!strcmp(__s, __s2))
              return 18;
            sprintf_l(__s2, 0, "%sH_SAT", *v11);
            if (!strcmp(__s, __s2))
              return 18;
            sprintf_l(__s2, 0, "%sX_SAT");
            goto LABEL_56;
          }
          if (v21 + 6 == v19)
          {
            sprintf_l(__s2, 0, "%sRC_SAT", v20);
            if (!strcmp(__s, __s2))
              return 18;
            sprintf_l(__s2, 0, "%sHC_SAT", *v11);
            if (!strcmp(__s, __s2))
              return 18;
            sprintf_l(__s2, 0, "%sXC_SAT");
            goto LABEL_56;
          }
        }
      }
LABEL_57:
      v22 = v11[2];
      v11 += 2;
      v17 = v22;
      if (!v22)
        goto LABEL_58;
    }
  }
  v7 = (const char **)(v4 + 2);
  while (strcmp(__s, v6))
  {
    v8 = *v7;
    v7 += 2;
    v6 = v8;
    if (!v8)
      goto LABEL_7;
  }
  return 18;
}

uint64_t PPParserParseTempDeclaration(uint64_t a1, int a2)
{
  int v4;
  int v5;
  void **v6;
  uint64_t v7;
  int v8;
  uint64_t result;
  int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char __s[256];
  uint64_t v19;

  v4 = 0;
  v19 = *MEMORY[0x24BDAC8D0];
  v17 = 0;
  v15 = 0;
  v16 = 0;
  do
  {
    v5 = v4;
    if (!PPParserGetPart(a1, __s, 0))
      return 46;
    if (PPParserValidateName(a1, __s))
      return 18;
    v6 = (void **)PPParserIdentifierCreate();
    PPParserIdentifierSetName(v6, __s);
    *((_DWORD *)v6 + 4) = 1;
    *((_DWORD *)v6 + 6) = a2;
    v7 = *(_QWORD *)(a1 + 32);
    *((_DWORD *)v6 + 3) = *(_DWORD *)(v7 + 36) + v5;
    if (PPParserScopeAddIdentifier((uint64_t *)v7, (uint64_t)v6))
    {
      PPParserIdentifierFree(v6);
      return 28;
    }
    if (!PPParserGetPart(a1, __s, 0))
      return 46;
    v8 = __s[0];
    if (__s[0] == 91)
    {
      PPParserReturnPart(a1);
      result = PPParserParseArray(a1, &v17);
      if ((_DWORD)result)
        return result;
      *((_BYTE *)v6 + 20) = 1;
      *((_DWORD *)v6 + 2) = v17;
      if (!PPParserGetPart(a1, __s, 0))
        return 46;
      v8 = __s[0];
    }
    v10 = *((_DWORD *)v6 + 2);
    v4 = v10 + v5;
  }
  while (v8 == 44);
  if (v8 != 59)
    return 31;
  v11 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 36);
  if (v11 + v4 > *(_DWORD *)(a1 + 272))
    return 52;
  if (v4)
  {
    v12 = a2 & 7 | 0xC0u;
    v13 = v5 + v10;
    do
    {
      v15 = v12;
      v16 = v11;
      (*(void (**)(uint64_t, uint64_t *))(a1 + 176))(a1, &v15);
      v14 = *(_QWORD *)(a1 + 32);
      v11 = *(_DWORD *)(v14 + 36) + 1;
      *(_DWORD *)(v14 + 36) = v11;
      --v13;
    }
    while (v13);
  }
  return 0;
}

uint64_t PPParserParseParamBinding(uint64_t a1, int a2, _DWORD *a3)
{
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  BOOL v14;
  uint64_t result;
  int Part;
  int v17;
  BOOL v19;
  int v20;
  int v21;
  BOOL v22;
  BOOL v27;
  int v28;
  int v29;
  int v30;
  int v32;
  int v33;
  unint64_t v35;
  BOOL v36;
  int v37;
  int v38;
  int v39;
  BOOL v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v47;
  char v48;
  BOOL v49;
  int v50;
  int v51;
  int v52;
  int v53;
  unint64_t v55;
  int v56;
  int v57;
  int v59;
  int v60;
  unint64_t v61;
  unint64_t v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  unint64_t v77;
  int v78;
  int v79;
  uint64_t v82;
  uint64_t v84;
  int v88;
  int v89;
  char v93;
  int v94;
  BOOL v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v102;
  int v103;
  int v105;
  int v106;
  int v108;
  int v109;
  unint64_t v111;
  unint64_t v112;
  int v113;
  int v114;
  unint64_t v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  uint64_t v122;
  int v123;
  unint64_t v124;
  __int128 v125;
  uint64_t v126;
  __int128 v127;
  _BYTE v128[252];
  uint64_t v129;

  v129 = *MEMORY[0x24BDAC8D0];
  v126 = 0;
  v125 = 0uLL;
  v6 = *(_DWORD *)(a1 + 368);
  if (!a2)
    goto LABEL_4;
  if (!PPParserGetPart(a1, v128, 0))
    return 46;
  if (v128[0] == 123)
  {
LABEL_4:
    v7 = 0;
    v8 = 0;
    v124 = (*(_DWORD *)(a1 + 344) << 16);
    v9 = -1;
    v10 = -1;
    while (1)
    {
      v11 = v7;
      if (!PPParserGetPart(a1, v128, 1))
        return 46;
      v12 = *(_DWORD *)(a1 + 344);
      v125 = xmmword_22D805A70;
      DWORD2(v125) = v12;
      if (*(_QWORD *)v128 == 0x6D6172676F7270)
      {
        Part = PPParserGetPart(a1, v128, 0);
        if (!Part)
          return 46;
        v17 = Part;
        result = 10;
        if (v17 != 1 || v128[0] != 46)
          return result;
        if (!PPParserGetPart(a1, v128, 0))
          return 46;
        if (*(_DWORD *)v128 == 7761509)
        {
          *(_QWORD *)&v125 = v125 & 0xFFFFFFFFFFFFE0FFLL | 0x500;
          if (a2)
          {
            result = PPParserParseRangeArray(a1, (_DWORD *)&v126 + 1, &v126);
          }
          else
          {
            result = PPParserParseArray(a1, (_DWORD *)&v126 + 1);
            LODWORD(v126) = HIDWORD(v126);
          }
          if (v9 == -1)
            v9 = (v125 >> 8) & 0x1F;
          if (v8)
            v36 = 0;
          else
            v36 = v9 == ((v125 >> 8) & 0x1F);
          v8 = !v36;
          if ((_DWORD)result)
            return result;
          v37 = HIDWORD(v126);
          if (HIDWORD(v126) >= *(_DWORD *)(a1 + 256))
            return 47;
          v38 = v126;
          v11 = v11 + v126 - HIDWORD(v126);
          while (1)
          {
            *(_QWORD *)&v125 = v125 & 0xFFFFC000FFFFFFFFLL | ((unint64_t)(v37 & 0x3FFF) << 32);
            (*(void (**)(uint64_t, __int128 *))(a1 + 192))(a1, &v125);
            if (v38 == v37)
              break;
            v39 = *(_DWORD *)(a1 + 344) + 1;
            *(_DWORD *)(a1 + 344) = v39;
            DWORD2(v125) = v39;
            if (++v37 >= *(_DWORD *)(a1 + 256))
              return 47;
          }
        }
        else if (*(_DWORD *)v128 == 1633906540 && *(unsigned __int16 *)&v128[4] == 108)
        {
          *(_QWORD *)&v125 = v125 & 0xFFFFFFFFFFFFE0FFLL | 0x100;
          if (a2)
          {
            result = PPParserParseRangeArray(a1, (_DWORD *)&v126 + 1, &v126);
          }
          else
          {
            result = PPParserParseArray(a1, (_DWORD *)&v126 + 1);
            LODWORD(v126) = HIDWORD(v126);
          }
          if (v9 == -1)
            v9 = (v125 >> 8) & 0x1F;
          if (v8)
            v49 = 0;
          else
            v49 = v9 == ((v125 >> 8) & 0x1F);
          v8 = !v49;
          if (v10 != -1 && v10 + 1 != HIDWORD(v126))
            v8 = 1;
          if ((_DWORD)result)
            return result;
          v50 = HIDWORD(v126);
          if (HIDWORD(v126) >= *(_DWORD *)(a1 + 260))
            return 48;
          v10 = v126;
          v11 = v11 + v126 - HIDWORD(v126);
          while (1)
          {
            *(_QWORD *)&v125 = v125 & 0xFFFFC000FFFFFFFFLL | ((unint64_t)(v50 & 0x3FFF) << 32);
            (*(void (**)(uint64_t, __int128 *))(a1 + 192))(a1, &v125);
            if (v10 == v50)
              break;
            v51 = *(_DWORD *)(a1 + 344) + 1;
            *(_DWORD *)(a1 + 344) = v51;
            DWORD2(v125) = v51;
            if (++v50 >= *(_DWORD *)(a1 + 260))
              return 48;
          }
        }
        else
        {
          if ((*(_BYTE *)(a1 + 380) & 2) == 0 || *(_QWORD *)v128 != 0x6D726F66696E75)
            return 10;
          *(_QWORD *)&v125 = v125 & 0xFFFFFFFFFFFFE0FFLL | 0x200;
          if (a2)
          {
            result = PPParserParseRangeArray(a1, (_DWORD *)&v126 + 1, &v126);
          }
          else
          {
            result = PPParserParseArray(a1, (_DWORD *)&v126 + 1);
            LODWORD(v126) = HIDWORD(v126);
          }
          if (v9 == -1)
            v9 = (v125 >> 8) & 0x1F;
          if (v8)
            v40 = 0;
          else
            v40 = v9 == ((v125 >> 8) & 0x1F);
          v8 = !v40;
          if (v10 != -1 && v10 + 1 != HIDWORD(v126))
            v8 = 1;
          if ((_DWORD)result)
            return result;
          v41 = HIDWORD(v126);
          if (HIDWORD(v126) >= *(_DWORD *)(a1 + 260))
            return 48;
          v10 = v126;
          v11 = v11 + v126 - HIDWORD(v126);
          while (1)
          {
            *(_QWORD *)&v125 = v125 & 0xFFFFC000FFFFFFFFLL | ((unint64_t)(v41 & 0x3FFF) << 32);
            (*(void (**)(uint64_t, __int128 *))(a1 + 192))(a1, &v125);
            if (v10 == v41)
              break;
            v42 = *(_DWORD *)(a1 + 344) + 1;
            *(_DWORD *)(a1 + 344) = v42;
            DWORD2(v125) = v42;
            if (++v41 >= *(_DWORD *)(a1 + 260))
              return 48;
          }
        }
        goto LABEL_412;
      }
      if (*(_DWORD *)v128 != 1952543859 || *(unsigned __int16 *)&v128[4] != 101)
      {
        if (v128[0] == 123)
        {
          *(_QWORD *)&v125 = 1728;
          if (v9 == -1)
            v9 = 6;
          if (v8)
            v14 = 0;
          else
            v14 = v9 == 6;
          v8 = !v14;
          v127 = xmmword_22D805A80;
          result = PPParserGetScalars(a1, (float *)&v127, 4);
          if ((_DWORD)result)
            return result;
          if (!PPParserGetPart(a1, v128, 0))
            return 46;
          if (v128[0] != 125)
            return 10;
        }
        else
        {
          PPParserReturnPart(a1);
          *(_QWORD *)&v125 = 1728;
          if (PPParserGetScalars(a1, (float *)&v127, 1))
            return 10;
          if (v9 == -1)
            v9 = 6;
          if (v8)
            v27 = 0;
          else
            v27 = v9 == 6;
          v8 = !v27;
          DWORD1(v127) = v127;
          DWORD2(v127) = v127;
          HIDWORD(v127) = v127;
        }
        (*(void (**)(uint64_t, __int128 *))(a1 + 232))(a1, &v127);
        v28 = *(_DWORD *)(a1 + 356);
        *(_DWORD *)(a1 + 356) = v28 + 1;
        WORD2(v125) = v28;
        goto LABEL_411;
      }
      if (v9 == -1)
        v9 = 5;
      if (v8)
        v19 = 0;
      else
        v19 = v9 == 5;
      v8 = !v19;
      v20 = PPParserGetPart(a1, v128, 0);
      if (!v20)
        return 46;
      v21 = v20;
      result = 10;
      if (v21 != 1 || v128[0] != 46)
        return result;
      if (!PPParserGetPart(a1, v128, 0))
        return 46;
      if (!(*(_QWORD *)v128 ^ 0x6C6169726574616DLL | v128[8]))
      {
        *(_QWORD *)&v125 = v125 & 0xFFFFFFFEFFFFE0FFLL | 0x1200;
        v29 = PPParserGetPart(a1, v128, 0);
        if (!v29)
          return 46;
        v30 = v29;
        result = 10;
        if (v30 != 1 || v128[0] != 46)
          return result;
        if (!PPParserGetPart(a1, v128, 0))
          return 46;
        if (*(_DWORD *)v128 == 1852797542 && *(unsigned __int16 *)&v128[4] == 116)
        {
LABEL_100:
          v32 = PPParserGetPart(a1, v128, 0);
          if (!v32)
            return 46;
          v33 = v32;
          result = 10;
          if (v33 != 1 || v128[0] != 46)
            return result;
          if (!PPParserGetPart(a1, v128, 0))
            return 46;
        }
        else if (!(*(_DWORD *)v128 ^ 0x6B636162 | v128[4]))
        {
          *(_QWORD *)&v125 = v125 | 0x100000000;
          goto LABEL_100;
        }
        if (*(_QWORD *)v128 == 0x746E6569626D61)
        {
          v35 = v125 & 0xFFFFFFF1FFFFFFFFLL;
        }
        else if (*(_QWORD *)v128 == 0x65737566666964)
        {
          v35 = v125 & 0xFFFFFFF1FFFFFFFFLL | 0x200000000;
        }
        else if (*(_QWORD *)v128 ^ 0x72616C7563657073 | v128[8])
        {
          if (*(_QWORD *)v128 ^ 0x6E6F697373696D65 | v128[8])
          {
            if (*(_QWORD *)v128 != 0x73656E696E696873 || *(unsigned __int16 *)&v128[8] != 115)
              return 10;
            v35 = v125 & 0xFFFFFFF1FFFFFFFFLL | 0x800000000;
          }
          else
          {
            v35 = v125 & 0xFFFFFFF1FFFFFFFFLL | 0x600000000;
          }
        }
        else
        {
          v35 = v125 & 0xFFFFFFF1FFFFFFFFLL | 0x400000000;
        }
        goto LABEL_410;
      }
      if ((*(_BYTE *)(a1 + 380) & 2) != 0
        && (*(_QWORD *)v128 == 0x63736C616D726F6ELL ? (v22 = *(_DWORD *)&v128[8] == 6646881) : (v22 = 0), v22))
      {
        v35 = v125 | 0x1F00;
      }
      else
      {
        if (*(_DWORD *)v128 == 1751607660 && *(unsigned __int16 *)&v128[4] == 116)
        {
          *(_QWORD *)&v125 = v125 & 0xFFFFFFFFFFFFE0FFLL | 0x1000;
          result = PPParserParseArray(a1, (_DWORD *)&v126 + 1);
          if ((_DWORD)result)
            return result;
          if (HIDWORD(v126) >= *(_DWORD *)(a1 + 308))
            return 61;
          BYTE4(v125) = BYTE4(v126);
          v43 = PPParserGetPart(a1, v128, 0);
          if (!v43)
            return 46;
          v44 = v43;
          result = 10;
          if (v44 != 1 || v128[0] != 46)
            return result;
          if (!PPParserGetPart(a1, v128, 0))
            return 46;
          if (*(_QWORD *)v128 == 0x746E6569626D61)
          {
            v35 = v125 & 0xFFFFF0FFFFFFFFFFLL;
            goto LABEL_410;
          }
          if (*(_QWORD *)v128 == 0x65737566666964)
          {
            v65 = v125 & 0xFFFFF0FFFFFFFFFFLL;
LABEL_243:
            v35 = v65 | 0x10000000000;
            goto LABEL_410;
          }
          if (!(*(_QWORD *)v128 ^ 0x72616C7563657073 | v128[8]))
          {
            v77 = v125 & 0xFFFFF0FFFFFFFFFFLL;
LABEL_297:
            v35 = v77 | 0x20000000000;
            goto LABEL_410;
          }
          if (!(*(_QWORD *)v128 ^ 0x6E6F697469736F70 | v128[8]))
          {
            v35 = v125 & 0xFFFFF0FFFFFFFFFFLL | 0x30000000000;
            goto LABEL_410;
          }
          if (*(_QWORD *)v128 == 0x7461756E65747461 && *(_DWORD *)&v128[8] == 7237481)
          {
            v47 = v125;
            v48 = 5;
LABEL_364:
            v35 = v47 & 0xFFFFF0FFFFFFFFFFLL | ((unint64_t)(v48 & 0xF) << 40);
            goto LABEL_410;
          }
          if (*(_DWORD *)v128 ^ 0x746F7073 | v128[4])
          {
            if (!(*(_DWORD *)v128 ^ 0x666C6168 | v128[4]))
            {
              v35 = v125 & 0xFFFFF0FFFFFFFFFFLL | 0x60000000000;
              goto LABEL_410;
            }
            if (*(_QWORD *)v128 != 0x6F747563746F7073 || *(_QWORD *)&v128[3] != 0x66666F74756374)
              return 10;
            v47 = v125;
            v48 = 9;
            goto LABEL_364;
          }
          v108 = PPParserGetPart(a1, v128, 0);
          if (!v108)
            return 46;
          v109 = v108;
          result = 10;
          if (v109 != 1 || v128[0] != 46)
            return result;
          if (!PPParserGetPart(a1, v128, 0))
            return 46;
          if (*(_QWORD *)v128 != 0x6F69746365726964 || *(unsigned __int16 *)&v128[8] != 110)
            return 10;
          v61 = v125 & 0xFFFFF0FFFFFFFFFFLL;
          goto LABEL_220;
        }
        if (*(_QWORD *)v128 != 0x646F6D746867696CLL || *(_QWORD *)&v128[3] != 0x6C65646F6D7468)
        {
          if (*(_QWORD *)v128 != 0x6F7270746867696CLL || *(unsigned __int16 *)&v128[8] != 100)
          {
            if ((v6 & 2) != 0)
            {
              if ((*(_BYTE *)(a1 + 380) & 2) == 0)
                goto LABEL_226;
              if (*(_DWORD *)v128 != 1735943540 || *(_DWORD *)&v128[3] != 7234919)
                goto LABEL_226;
            }
            else if (*(_DWORD *)v128 != 1735943540 || *(_DWORD *)&v128[3] != 7234919)
            {
              if ((*(_BYTE *)(a1 + 380) & 2) != 0)
              {
LABEL_226:
                if (*(_DWORD *)v128 == 1702389108 && *(_DWORD *)&v128[3] == 7761509)
                {
                  *(_QWORD *)&v125 = v125 & 0xFFFFFF80FFFFE0FFLL | 0x1600;
                  v70 = PPParserGetPart(a1, v128, 0);
                  if (!v70)
                    return 46;
                  v71 = v128[0];
                  if (v128[0] == 91)
                  {
                    PPParserReturnPart(a1);
                    result = PPParserParseArray(a1, (_DWORD *)&v126 + 1);
                    if ((_DWORD)result)
                      return result;
                    *(_QWORD *)&v125 = v125 & 0xFFFFFF80FFFFFFFFLL | ((unint64_t)(BYTE4(v126) & 0x7F) << 32);
                    if (HIDWORD(v126) >= *(_DWORD *)(a1 + 288))
                      return 57;
                    v72 = PPParserGetPart(a1, v128, 0);
                    if (!v72)
                      return 46;
                    v73 = v72;
                    v71 = v128[0];
                  }
                  else
                  {
                    v73 = v70;
                  }
                  result = 10;
                  if (v73 != 1 || v71 != 46)
                    return result;
                  if (!PPParserGetPart(a1, v128, 0))
                    return 46;
                  v94 = *(unsigned __int16 *)&v128[4];
                  v95 = *(_DWORD *)v128 == 1869377379;
                  v96 = 114;
                  goto LABEL_371;
                }
                if (*(_DWORD *)v128 != 6778726)
                {
                  if ((v6 & 2) != 0)
                  {
                    if (*(_DWORD *)v128 == 1953523044 && *(unsigned __int16 *)&v128[4] == 104)
                    {
LABEL_366:
                      *(_QWORD *)&v125 = v125 & 0xFFFFFFFFFFFFE0FFLL | 0x1E00;
                      v102 = PPParserGetPart(a1, v128, 0);
                      if (!v102)
                        return 46;
                      v103 = v102;
                      result = 10;
                      if (v103 != 1 || v128[0] != 46)
                        return result;
                      if (!PPParserGetPart(a1, v128, 0))
                        return 46;
                      v94 = *(unsigned __int16 *)&v128[4];
                      v95 = *(_DWORD *)v128 == 1735287154;
                      v96 = 101;
LABEL_371:
                      if (!v95 || v94 != v96)
                        return 10;
                      goto LABEL_411;
                    }
                    if ((*(_BYTE *)(a1 + 380) & 2) == 0)
                      goto LABEL_308;
                  }
                  else if ((*(_BYTE *)(a1 + 380) & 2) != 0
                         && *(_DWORD *)v128 == 1953523044
                         && *(unsigned __int16 *)&v128[4] == 104)
                  {
                    goto LABEL_366;
                  }
                  goto LABEL_303;
                }
LABEL_269:
                v78 = PPParserGetPart(a1, v128, 0);
                if (!v78)
                  return 46;
                v79 = v78;
                result = 10;
                if (v79 != 1 || v128[0] != 46)
                  return result;
                if (!PPParserGetPart(a1, v128, 0))
                  return 46;
                if (*(_DWORD *)v128 == 1869377379 && *(unsigned __int16 *)&v128[4] == 114)
                {
                  v82 = 6400;
                }
                else
                {
                  if (*(_DWORD *)v128 != 1634886000 || *(_DWORD *)&v128[3] != 7564641)
                    return 10;
                  v82 = 6656;
                }
              }
              else
              {
                if (*(_DWORD *)v128 == 6778726)
                  goto LABEL_269;
LABEL_303:
                if (!(*(_DWORD *)v128 ^ 0x70696C63 | v128[4]))
                {
                  result = PPParserParseArray(a1, (_DWORD *)&v126 + 1);
                  if ((_DWORD)result)
                    return result;
                  if (HIDWORD(v126) >= *(_DWORD *)(a1 + 304))
                    return 60;
                  BYTE4(v125) = BYTE4(v126);
                  v99 = PPParserGetPart(a1, v128, 0);
                  if (!v99)
                    return 46;
                  v100 = v99;
                  result = 10;
                  if (v100 != 1 || v128[0] != 46)
                    return result;
                  if (!PPParserGetPart(a1, v128, 0))
                    return 46;
                  if (*(_DWORD *)v128 != 1851878512 || *(unsigned __int16 *)&v128[4] != 101)
                    return 10;
                  v35 = v125 & 0xFFFFFFFFFFFFE0FFLL | 0x1800;
                  goto LABEL_410;
                }
                if (*(_DWORD *)v128 != 1852403568 || *(unsigned __int16 *)&v128[4] != 116)
                {
LABEL_308:
                  if (*(_DWORD *)v128 != 1920229741 || *(_DWORD *)&v128[3] != 7891314)
                    return 10;
                  *(_QWORD *)&v125 = v125 & 0xFFFFFCFFFFFFE0FFLL | 0xF00;
                  v88 = PPParserGetPart(a1, v128, 0);
                  if (!v88)
                    return 46;
                  v89 = v88;
                  result = 10;
                  if (v89 != 1 || v128[0] != 46)
                    return result;
                  if (!PPParserGetPart(a1, v128, 0))
                    return 46;
                  if (*(_QWORD *)v128 != 0x6569766C65646F6DLL || *(unsigned __int16 *)&v128[8] != 119)
                  {
                    if (*(_QWORD *)v128 == 0x697463656A6F7270 && *(_QWORD *)&v128[3] == 0x6E6F697463656ALL)
                    {
                      v112 = v125 & 0xFFFF8FFFFFFFFFFFLL | 0x100000000000;
                    }
                    else if (*(_DWORD *)v128 == 7370349)
                    {
                      v112 = v125 & 0xFFFF8FFFFFFFFFFFLL;
                    }
                    else if (*(_DWORD *)v128 == 1869377379 && *(unsigned __int16 *)&v128[4] == 114)
                    {
                      v112 = v125 & 0xFFFF8FFFFFFFFFFFLL | 0x200000000000;
                    }
                    else
                    {
                      if (*(_QWORD *)v128 != 0x65727574786574)
                      {
                        if (*(_QWORD *)v128 != 0x6D6172676F7270)
                          return 10;
                        *(_QWORD *)&v125 = v125 & 0xFFFF8FFFFFFFFFFFLL | 0x500000000000;
                        result = PPParserParseArray(a1, (_DWORD *)&v126 + 1);
                        if ((_DWORD)result)
                          return result;
                        v93 = BYTE4(v126);
                        if (HIDWORD(v126) >= *(_DWORD *)(a1 + 264))
                          return 49;
LABEL_403:
                        BYTE4(v125) = v93;
LABEL_419:
                        v113 = PPParserGetPart(a1, v128, 0);
                        if (!v113)
                          return 46;
                        v114 = v128[0];
                        if (v113 == 1 && v128[0] == 46)
                        {
                          if (!PPParserGetPart(a1, v128, 0))
                            return 46;
                          if (*(_QWORD *)v128 == 0x65737265766E69)
                          {
                            v116 = v125 & 0xFFFFFCFFFFFFFFFFLL | 0x20000000000;
                          }
                          else if (*(_QWORD *)v128 == 0x736F70736E617274 && *(unsigned __int16 *)&v128[8] == 101)
                          {
                            v116 = v125 & 0xFFFFFCFFFFFFFFFFLL | 0x10000000000;
                          }
                          else
                          {
                            if (*(_QWORD *)v128 ^ 0x736E617274766E69 | v128[8])
                            {
                              PPParserReturnPart(a1);
                              v114 = 46;
                              strcpy(v128, ".");
                              v113 = 1;
                              goto LABEL_435;
                            }
                            v116 = v125 | 0x30000000000;
                          }
                          *(_QWORD *)&v125 = v116;
                          v113 = PPParserGetPart(a1, v128, 0);
                          if (!v113)
                            return 46;
                          v114 = v128[0];
                        }
LABEL_435:
                        v126 = 3;
                        if (v113 == 1 && v114 == 46)
                        {
                          if (!PPParserGetPart(a1, v128, 0))
                            return 46;
                          if (*(_DWORD *)v128 != 7827314)
                            return 10;
                          if (a2)
                          {
                            result = PPParserParseRangeArray(a1, (_DWORD *)&v126 + 1, &v126);
                          }
                          else
                          {
                            result = PPParserParseArray(a1, (_DWORD *)&v126 + 1);
                            LODWORD(v126) = HIDWORD(v126);
                          }
                          if ((_DWORD)result)
                            return result;
                          v118 = v126;
                          v117 = HIDWORD(v126);
                        }
                        else
                        {
                          if (!a2)
                            return 10;
                          PPParserReturnPart(a1);
                          v117 = 0;
                          v118 = 3;
                        }
                        result = 10;
                        v123 = v117;
                        if (v117 > 3 || v118 > 3)
                          return result;
                        *(_QWORD *)&v125 = v125 & 0xFFFFF3FFFFFFFFFFLL | ((unint64_t)(v117 & 3) << 42);
                        (*(void (**)(uint64_t, __int128 *))(a1 + 192))(a1, &v125);
                        if (v123 != v118)
                        {
                          v119 = v11 + v118;
                          v120 = v123;
                          do
                          {
                            v121 = *(_DWORD *)(a1 + 344) + 1;
                            *(_DWORD *)(a1 + 344) = v121;
                            DWORD2(v125) = v121;
                            *(_QWORD *)&v125 = v125 & 0xFFFFF3FFFFFFFFFFLL | ((unint64_t)(++v120 & 3) << 42);
                            (*(void (**)(uint64_t, __int128 *))(a1 + 192))(a1, &v125);
                          }
                          while (v118 != v120);
                          v11 = v119 - v123;
                        }
                        goto LABEL_412;
                      }
                      v111 = v125 & 0xFFFF8FFFFFFFFFFFLL | 0x400000000000;
LABEL_399:
                      *(_QWORD *)&v125 = v111;
                      if (!PPParserGetPart(a1, v128, 0))
                        return 46;
                      PPParserReturnPart(a1);
                      if (v128[0] == 91)
                      {
                        result = PPParserParseArray(a1, (_DWORD *)&v126 + 1);
                        if ((_DWORD)result)
                          return result;
                        v93 = BYTE4(v126);
                        goto LABEL_403;
                      }
                      v112 = v125 & 0xFFFFFF00FFFFFFFFLL;
                    }
                    *(_QWORD *)&v125 = v112;
                    goto LABEL_419;
                  }
                  v111 = v125 & 0xFFFF8FFFFFFFFFFFLL | 0x300000000000;
                  goto LABEL_399;
                }
                v105 = PPParserGetPart(a1, v128, 0);
                if (!v105)
                  return 46;
                v106 = v105;
                result = 10;
                if (v106 != 1 || v128[0] != 46)
                  return result;
                if (!PPParserGetPart(a1, v128, 0))
                  return 46;
                if (*(_DWORD *)v128 ^ 0x657A6973 | v128[4])
                {
                  if (*(_QWORD *)v128 != 0x7461756E65747461 || *(_DWORD *)&v128[8] != 7237481)
                    return 10;
                  v82 = 7424;
                }
                else
                {
                  v82 = 7168;
                }
              }
              v35 = v125 & 0xFFFFFFFFFFFFE0FFLL | v82;
              goto LABEL_410;
            }
            v66 = PPParserGetPart(a1, v128, 0);
            if (!v66)
              return 46;
            v67 = v128[0];
            if (v128[0] == 91)
            {
              PPParserReturnPart(a1);
              result = PPParserParseArray(a1, (_DWORD *)&v126 + 1);
              if ((_DWORD)result)
                return result;
              if (HIDWORD(v126) >= *(_DWORD *)(a1 + 288))
                return 57;
              *(_QWORD *)&v125 = v125 & 0xFFFFFF80FFFFFFFFLL | ((unint64_t)(BYTE4(v126) & 0x7F) << 32);
              v68 = PPParserGetPart(a1, v128, 0);
              if (!v68)
                return 46;
              v69 = v68;
              v67 = v128[0];
            }
            else
            {
              v69 = v66;
              *(_QWORD *)&v125 = v125 & 0xFFFFFF80FFFFFFFFLL;
            }
            result = 10;
            if (v69 != 1 || v67 != 46)
              return result;
            if (!PPParserGetPart(a1, v128, 0))
              return 46;
            if (*(_DWORD *)v128 == 6650213)
            {
              v84 = 5120;
            }
            else
            {
              if (*(_DWORD *)v128 != 1701470831 || *(_DWORD *)&v128[3] != 7627621)
                return 10;
              v84 = 5376;
            }
            *(_QWORD *)&v125 = v125 & 0xFFFFFFFFFFFFE0FFLL | v84;
            v97 = PPParserGetPart(a1, v128, 0);
            if (!v97)
              return 46;
            v98 = v97;
            result = 10;
            if (v98 != 1 || v128[0] != 46)
              return result;
            if (!PPParserGetPart(a1, v128, 0))
              return 46;
            if (*(unsigned __int16 *)v128 == 115)
            {
              v35 = v125 & 0xFFFFFC7FFFFFFFFFLL;
              goto LABEL_410;
            }
            if (*(unsigned __int16 *)v128 == 116)
            {
              v35 = v125 & 0xFFFFFC7FFFFFFFFFLL | 0x8000000000;
              goto LABEL_410;
            }
            if (*(unsigned __int16 *)v128 != 114)
            {
              if (*(unsigned __int16 *)v128 != 113)
                return 17;
              v35 = v125 & 0xFFFFFC7FFFFFFFFFLL | 0x18000000000;
              goto LABEL_410;
            }
            v65 = v125 & 0xFFFFFC7FFFFFFFFFLL;
            goto LABEL_243;
          }
          *(_QWORD *)&v125 = v125 & 0xFFFFFEFFFFFFE0FFLL | 0x1100;
          result = PPParserParseArray(a1, (_DWORD *)&v126 + 1);
          if ((_DWORD)result)
            return result;
          BYTE4(v125) = BYTE4(v126);
          v56 = PPParserGetPart(a1, v128, 0);
          if (!v56)
            return 46;
          v57 = v56;
          result = 10;
          if (v57 != 1 || v128[0] != 46)
            return result;
          if (!PPParserGetPart(a1, v128, 0))
            return 46;
          if (*(_DWORD *)v128 == 1852797542 && *(unsigned __int16 *)&v128[4] == 116)
          {
LABEL_212:
            v59 = PPParserGetPart(a1, v128, 0);
            if (!v59)
              return 46;
            v60 = v59;
            result = 10;
            if (v60 != 1 || v128[0] != 46)
              return result;
            if (!PPParserGetPart(a1, v128, 0))
              return 46;
          }
          else if (!(*(_DWORD *)v128 ^ 0x6B636162 | v128[4]))
          {
            *(_QWORD *)&v125 = v125 | 0x10000000000;
            goto LABEL_212;
          }
          if (*(_QWORD *)v128 == 0x746E6569626D61)
          {
            v35 = v125 & 0xFFFFF9FFFFFFFFFFLL;
            goto LABEL_410;
          }
          if (*(_QWORD *)v128 == 0x65737566666964)
          {
            v77 = v125 & 0xFFFFF9FFFFFFFFFFLL;
            goto LABEL_297;
          }
          if (*(_QWORD *)v128 ^ 0x72616C7563657073 | v128[8])
            return 10;
          v61 = v125 & 0xFFFFF9FFFFFFFFFFLL;
LABEL_220:
          v35 = v61 | 0x40000000000;
          goto LABEL_410;
        }
        v52 = PPParserGetPart(a1, v128, 0);
        if (!v52)
          return 46;
        v53 = v52;
        result = 10;
        if (v53 != 1 || v128[0] != 46)
          return result;
        if (!PPParserGetPart(a1, v128, 0))
          return 46;
        if (*(_QWORD *)v128 != 0x746E6569626D61)
        {
          if (*(_DWORD *)v128 == 1852797542 && *(unsigned __int16 *)&v128[4] == 116)
          {
            v55 = v125 & 0xFFFFFFFEFFFFFFFFLL;
LABEL_258:
            *(_QWORD *)&v125 = v55;
            v74 = PPParserGetPart(a1, v128, 0);
            if (!v74)
              return 46;
            v75 = v74;
            result = 10;
            if (v75 != 1 || v128[0] != 46)
              return result;
            if (!PPParserGetPart(a1, v128, 0))
              return 46;
          }
          else if (!(*(_DWORD *)v128 ^ 0x6B636162 | v128[4]))
          {
            v55 = v125 | 0x100000000;
            goto LABEL_258;
          }
          if (*(_QWORD *)v128 != 0x6C6F63656E656373 || *(_QWORD *)&v128[3] != 0x726F6C6F63656ELL)
            return 10;
          v35 = v125 & 0xFFFFFFF1FFFFE0FFLL | 0xA00001200;
          goto LABEL_410;
        }
        v35 = v125 & 0xFFFFFFFFFFFFE0FFLL | 0x1300;
      }
LABEL_410:
      *(_QWORD *)&v125 = v35;
LABEL_411:
      (*(void (**)(uint64_t, __int128 *))(a1 + 192))(a1, &v125);
LABEL_412:
      ++*(_DWORD *)(a1 + 344);
      v7 = v11 + 1;
      if (!a2)
        goto LABEL_458;
      if (!PPParserGetPart(a1, v128, 0))
        return 46;
      if (v128[0] != 44)
      {
        if (v128[0] != 125)
          return 10;
LABEL_458:
        if (*a3)
        {
          if (*a3 != v7)
            return 37;
        }
        else
        {
          *a3 = v7;
        }
        v122 = 0x8000;
        if (!v8)
          v122 = 0;
        v124 = v124 & 0xFFFFFFFF7FFFLL | ((unint64_t)(*(_DWORD *)(a1 + 344) - 1) << 48) | v122;
        if ((v11 & 0x80000000) == 0)
          (*(void (**)(uint64_t, unint64_t *))(a1 + 200))(a1, &v124);
        return 0;
      }
    }
  }
  return 10;
}

uint64_t PPParserParseParameterDeclaration(uint64_t a1)
{
  uint64_t result;
  void **v3;
  int v4;
  int v5;
  int v6;
  char __s[256];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v6 = 1;
  if (!PPParserGetPart(a1, __s, 0))
    return 46;
  if (PPParserValidateName(a1, __s))
    return 18;
  v3 = (void **)PPParserIdentifierCreate();
  PPParserIdentifierSetName(v3, __s);
  *((_DWORD *)v3 + 4) = 2;
  if (PPParserScopeAddIdentifier(*(uint64_t **)(a1 + 32), (uint64_t)v3))
  {
    PPParserIdentifierFree(v3);
    return 28;
  }
  if (!PPParserGetPart(a1, __s, 0))
    return 46;
  v4 = __s[0];
  if (__s[0] == 91)
  {
    PPParserReturnPart(a1);
    result = PPParserParseDefaultArray(a1, &v6);
    if ((_DWORD)result)
      return result;
    *((_BYTE *)v3 + 20) = 1;
    if (!PPParserGetPart(a1, __s, 0))
      return 46;
    v4 = __s[0];
    v5 = 1;
  }
  else
  {
    v5 = 0;
  }
  if (v4 != 61)
    return 10;
  *((_DWORD *)v3 + 3) = *(_DWORD *)(a1 + 344);
  result = PPParserParseParamBinding(a1, v5, &v6);
  if (!(_DWORD)result)
  {
    *((_DWORD *)v3 + 2) = v6;
    if (PPParserGetPart(a1, __s, 0))
    {
      if (__s[0] == 59)
        return 0;
      else
        return 10;
    }
    return 46;
  }
  return result;
}

uint64_t PPParserParseAttributeBinding(uint64_t a1, int *a2, _DWORD *a3)
{
  int v6;
  uint64_t result;
  int Part;
  int v10;
  BOOL v16;
  int v17;
  int v18;
  int v20;
  int v22;
  unint64_t v23;
  unsigned __int8 v24;
  int v25;
  uint64_t v26;
  int v27;
  int64x2_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  BOOL v36;
  unint64_t v37;
  unint64_t v38;
  unsigned int *v39;
  uint64_t v40;
  BOOL v42;
  unint64_t *v43;
  __int16 v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  BOOL v48;
  BOOL v49;
  unint64_t v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  int8x16_t v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  int v65;
  int v66;
  unsigned int v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int16 v71;
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  v67 = 0;
  v6 = *(_DWORD *)(a1 + 368);
  if (!PPParserGetPart(a1, (char *)&v70, 0))
    return 46;
  *a3 = -1;
  v69 = 0;
  if ((v6 & 2) != 0)
  {
    if (v70 ^ 0x746E656D67617266 | v71)
      return 10;
  }
  else if ((_DWORD)v70 != 1953654134 || *(_DWORD *)((char *)&v70 + 3) != 7890292)
  {
    return 10;
  }
  v68 = 192;
  Part = PPParserGetPart(a1, (char *)&v70, 0);
  if (!Part)
    return 46;
  v10 = Part;
  result = 10;
  if (v10 != 1 || v70 != 46)
    return result;
  if (!PPParserGetPart(a1, (char *)&v70, 0))
    return 46;
  if ((v6 & 2) != 0)
  {
    if (!(v70 ^ 0x6E6F697469736F70 | v71))
    {
      v23 = v68 & 0xFFFFFFFFFFFF83FFLL | 0x400;
LABEL_77:
      v68 = v23;
      goto LABEL_78;
    }
    if ((_DWORD)v70 != 1869377379 || WORD2(v70) != 114)
      goto LABEL_44;
    v30 = v68 & 0xFFFFFFFFFFFF83FFLL | 0x800;
    goto LABEL_96;
  }
  if ((_DWORD)v70 == 1920234593 && *(_DWORD *)((char *)&v70 + 3) == 6449522)
  {
    v68 = v68 & 0xFFFFFFFFFFFF83FFLL | 0x7000;
    result = PPParserParseArray(a1, &v67);
    if ((_DWORD)result)
      return result;
    if (v67 >= *(_DWORD *)(a1 + 312))
      return 62;
    v68 = v68 & 0xFFFFFFC0FFFFFFFFLL | ((unint64_t)(((_BYTE)v67 + 16) & 0x3F) << 32);
    goto LABEL_119;
  }
  if (!(v70 ^ 0x6E6F697469736F70 | v71))
  {
    v29 = v68 & 0xFFFFFFC0FFFF83FFLL | 0x7000;
LABEL_89:
    v68 = v29;
    goto LABEL_119;
  }
  if ((_DWORD)v70 == 1836216174 && *(_DWORD *)((char *)&v70 + 3) == 7102829)
  {
    v32 = v68;
    v33 = 0x100007000;
LABEL_88:
    v29 = v32 | v33;
    goto LABEL_89;
  }
  if ((_DWORD)v70 == 1869377379 && WORD2(v70) == 114)
  {
    v30 = v68 & 0xFFFFFFC0FFFF83FFLL | 0x200007000;
LABEL_96:
    v68 = v30;
    v34 = PPParserGetPart(a1, (char *)&v70, 0);
    if (!v34)
      return 46;
    if (v34 != 1 || v70 != 46)
    {
LABEL_106:
      PPParserReturnPart(a1);
      goto LABEL_118;
    }
    if (!PPParserGetPart(a1, (char *)&v70, 0))
      return 46;
    if (v70 != 0x7261646E6F636573 || v71 != 121)
    {
      if (v70 == 0x7972616D697270)
        goto LABEL_118;
      PPParserReturnPart(a1);
      goto LABEL_106;
    }
    if ((v6 & 2) != 0)
    {
      v23 = v68 & 0xFFFFFFFFFFFF83FFLL | 0xC00;
      goto LABEL_77;
    }
    v32 = v68 & 0xFFFFFFC0FFFF83FFLL;
    v33 = 0x300007000;
    goto LABEL_88;
  }
  if ((_DWORD)v70 == 1734960503 && *(_DWORD *)((char *)&v70 + 3) == 7628903)
  {
    v68 = v68 & 0xFFFFFF80FFFF83FFLL | 0x4400007000;
    if (!PPParserGetPart(a1, (char *)&v70, 0))
      return 46;
    PPParserReturnPart(a1);
    if (v70 == 91)
    {
      result = PPParserParseArray(a1, &v67);
      if ((_DWORD)result)
        return result;
      if (v67 >= *(_DWORD *)(a1 + 296))
        return 58;
    }
    goto LABEL_119;
  }
LABEL_44:
  if (v70 ^ 0x64726F6F63676F66 | v71)
  {
    if ((*(_BYTE *)(a1 + 379) & 8) != 0 && (v70 == 0x7A6973746E696F70 ? (v16 = v71 == 101) : (v16 = 0), v16))
    {
      v37 = v68 & 0xFFFFFFC0FFFF83FFLL | 0x600007000;
    }
    else
    {
      if (v70 ^ 0x64726F6F63786574 | v71)
      {
        if ((v6 & 2) == 0)
        {
          if (!(v70 ^ 0x6C6169726574616DLL | v71))
          {
            v68 = v68 & 0xFFFFFFFFFFFF83FFLL | 0x7000;
            v17 = PPParserGetPart(a1, (char *)&v70, 0);
            if (v17)
            {
              v18 = v17;
              result = 10;
              if (v18 != 1 || v70 != 46)
                return result;
              if (PPParserGetPart(a1, (char *)&v70, 0))
              {
                if ((_DWORD)v70 == 1852797542 && WORD2(v70) == 116)
                {
                  v52 = PPParserGetPart(a1, (char *)&v70, 0);
                  if (v52)
                  {
                    v53 = v52;
                    result = 10;
                    if (v53 != 1 || v70 != 46)
                      return result;
                    v54 = PPParserGetPart(a1, (char *)&v70, 0);
                    v20 = 0;
                    if (v54)
                      goto LABEL_63;
                  }
                }
                else
                {
                  if (v70 ^ 0x6B636162 | BYTE4(v70))
                  {
                    v20 = 0;
LABEL_63:
                    if (v70 == 0x746E6569626D61)
                    {
                      v57 = v20 | 0x20u;
                    }
                    else
                    {
                      if (v70 == 0x65737566666964)
                      {
                        v22 = 34;
                      }
                      else if (v70 ^ 0x72616C7563657073 | v71)
                      {
                        if (v70 ^ 0x6E6F697373696D65 | v71)
                        {
                          if (v70 != 0x73656E696E696873 || v71 != 115)
                            return 10;
                          v22 = 40;
                        }
                        else
                        {
                          v22 = 38;
                        }
                      }
                      else
                      {
                        v22 = 36;
                      }
                      v57 = v20 | v22;
                    }
                    v29 = v68 & 0xFFFFFFC0FFFFFFFFLL | (v57 << 32);
                    goto LABEL_89;
                  }
                  v55 = PPParserGetPart(a1, (char *)&v70, 0);
                  if (v55)
                  {
                    v56 = v55;
                    result = 10;
                    if (v56 != 1 || v70 != 46)
                      return result;
                    if (PPParserGetPart(a1, (char *)&v70, 0))
                    {
                      v20 = 1;
                      goto LABEL_63;
                    }
                  }
                }
              }
            }
            return 46;
          }
          return 10;
        }
        v36 = (_DWORD)v70 == 1768120678 && *(_DWORD *)((char *)&v70 + 3) == 6778473;
        if (!v36 || *(_DWORD *)(a1 + 368) != 54)
          return 10;
        v23 = v68 & 0xFFFFFFFFFFFF83FFLL | 0x2C00;
        goto LABEL_77;
      }
      v68 = v68 & 0xFFFFFFFFFFFF83FFLL | 0x7000;
      if (!PPParserGetPart(a1, (char *)&v70, 0))
        return 46;
      PPParserReturnPart(a1);
      if (v70 == 91)
      {
        result = PPParserParseArray(a1, &v67);
        if ((_DWORD)result)
          return result;
        if (v67 >= *(_DWORD *)(a1 + 288))
          return 57;
        v68 = v68 & 0xFFFFFFC0FFFFFFFFLL | ((unint64_t)(((_BYTE)v67 + 8) & 0x3F) << 32);
LABEL_118:
        if ((v6 & 2) == 0)
          goto LABEL_119;
LABEL_78:
        (*(void (**)(uint64_t, unint64_t *))(a1 + 208))(a1, &v68);
        *a3 = v69;
        v24 = v68;
        if ((v68 & 0x3F00007C00) == 0x500007000)
        {
          v25 = *(_DWORD *)(a1 + 372);
          if (v25 == -1)
          {
            v26 = *(_QWORD *)(a1 + 32);
            v27 = *(_DWORD *)(v26 + 36);
            *(_DWORD *)(a1 + 372) = v27;
            v64 = v24 & 0xF8;
            v66 = 0;
            *(_DWORD *)(v26 + 36) = v27 + 1;
            v65 = v27;
            (*(void (**)(uint64_t, uint64_t *))(a1 + 176))(a1, &v64);
            v62 = 0u;
            v63 = 0u;
            v61 = 0u;
            v58 = 0x3100011042;
            if (*(_BYTE *)(a1 + 378) == 1)
            {
              v58 = 0x3100015042;
              *(_BYTE *)(a1 + 378) = 2;
            }
            v60 = 2307915776;
            v28.i64[0] = *(unsigned int *)(a1 + 372);
            v28.i64[1] = *a3;
            v59 = vorrq_s8((int8x16_t)vshlq_n_s64(v28, 0x30uLL), (int8x16_t)xmmword_22D805A90);
            (*(void (**)(uint64_t, uint64_t *, _QWORD))(a1 + 168))(a1, &v58, 0);
            v25 = *(_DWORD *)(a1 + 372);
          }
          goto LABEL_164;
        }
LABEL_163:
        v25 = -1;
LABEL_164:
        result = 0;
        *a2 = v25;
        return result;
      }
      v37 = v68 & 0xFFFFFFC0FFFFFFFFLL | 0x800000000;
    }
    v68 = v37;
    goto LABEL_118;
  }
  v31 = v68 & 0xFFFFFFC0FFFF83FFLL | 0x500007000;
  v68 = v31;
  if ((v6 & 2) != 0)
  {
    v23 = v31 & 0xFFFFFFC5FFFFF33FLL;
    goto LABEL_77;
  }
LABEL_119:
  v38 = GLDAttribBindingForPPStreamToken(v68);
  v39 = *(unsigned int **)(a1 + 144);
  if (!v39 || (v40 = *v39, !(_DWORD)v40))
  {
LABEL_162:
    (*(void (**)(uint64_t, unint64_t *))(a1 + 208))(a1, &v68);
    *a3 = v69;
    goto LABEL_163;
  }
  v42 = (v38 & 0x1F00) == 0x1C00 && (BYTE4(v38) & 0x30) == 16;
  v43 = (unint64_t *)(v39 + 2);
  while (1)
  {
    v45 = *v43++;
    v44 = v45;
    v46 = HIDWORD(v45);
    v47 = BYTE4(v45) & 0x30;
    v48 = (v45 & 0x1F00) == 0x1C00 && v47 == 16;
    v49 = v48;
    if (!v42)
      break;
    v50 = HIDWORD(v38);
    if (!v49)
      goto LABEL_138;
LABEL_139:
    if (!--v40)
      goto LABEL_162;
  }
  LOBYTE(v50) = v46;
  v46 = HIDWORD(v38);
  v44 = v38;
  if (!v49)
    goto LABEL_139;
LABEL_138:
  v51 = (v50 & 0x3F) - 16;
  switch(v51)
  {
    case 0:
      if ((v44 & 0x1F00) != 0x1C00 || (v46 & 0x3F) != 0)
        goto LABEL_139;
      break;
    case 1:
      if ((v44 & 0x1F00) != 0x1C00 || (v46 & 0x3F) != 4)
        goto LABEL_139;
      break;
    case 2:
      if ((v44 & 0x1F00) != 0x1C00 || (v46 & 0x3F) != 1)
        goto LABEL_139;
      break;
    case 3:
      if ((v44 & 0x1F00) != 0x1C00 || (v46 & 0x3F) != 2)
        goto LABEL_139;
      break;
    case 4:
      if ((v44 & 0x1F00) != 0x1C00 || (v46 & 0x3F) != 3)
        goto LABEL_139;
      break;
    case 5:
      if ((v44 & 0x1F00) != 0x1C00 || (v46 & 0x3F) != 5)
        goto LABEL_139;
      break;
    case 6:
    case 7:
      goto LABEL_139;
    default:
      if ((v44 & 0x1F00) != 0x1C00 || (v46 & 0x3F) != v51)
        goto LABEL_139;
      break;
  }
  return 19;
}

uint64_t GLDAttribBindingForPPStreamToken(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (a1 >> 10) & 0x1F;
  v2 = a1 & 0x100000000;
  v3 = a1 & 0x1FF00000000;
  if (v1 != 28)
    v3 = 0;
  if (v1 == 3)
    v3 = a1 & 0x100000000;
  if (v1 != 2)
    v2 = v3;
  return v2 | a1 | (v1 << 8) | (a1 >> 2) & 0x2000;
}

uint64_t PPParserParseAttributeDeclaration(uint64_t a1)
{
  uint64_t result;
  void **v3;
  int v4;
  char __s[256];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  if (!PPParserGetPart(a1, __s, 0))
    return 46;
  if (PPParserValidateName(a1, __s))
    return 18;
  v3 = (void **)PPParserIdentifierCreate();
  PPParserIdentifierSetName(v3, __s);
  if (PPParserScopeAddIdentifier(*(uint64_t **)(a1 + 32), (uint64_t)v3))
  {
    PPParserIdentifierFree(v3);
    return 28;
  }
  if (!PPParserGetPart(a1, __s, 0))
    return 46;
  if (__s[0] != 61)
    return 10;
  v4 = 0;
  *((_DWORD *)v3 + 4) = 0;
  result = PPParserParseAttributeBinding(a1, &v4, (_DWORD *)v3 + 3);
  if (!(_DWORD)result)
  {
    if (v4 != -1)
    {
      *((_DWORD *)v3 + 4) = 1;
      *((_DWORD *)v3 + 3) = *(_DWORD *)(a1 + 372);
    }
    if (PPParserGetPart(a1, __s, 0))
    {
      if (__s[0] == 59)
        return 0;
      else
        return 10;
    }
    return 46;
  }
  return result;
}

uint64_t PPParserParseOutputBinding(uint64_t a1, char a2, _DWORD *a3, _BYTE *a4)
{
  int v8;
  uint64_t result;
  int Part;
  int v12;
  uint64_t v13;
  int v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v30;
  unsigned int v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v8 = *(_DWORD *)(a1 + 368);
  if (!PPParserGetPart(a1, (char *)&v35, 0))
    return 46;
  *a3 = -1;
  *a4 = -1;
  v33 = 0;
  v34 = 0;
  if ((_DWORD)v35 != 1970496882 || *(_DWORD *)((char *)&v35 + 3) != 7629941)
    return 10;
  Part = PPParserGetPart(a1, (char *)&v35, 0);
  if (!Part)
    return 46;
  v12 = Part;
  result = 10;
  if (v12 != 1 || v35 != 46)
    return result;
  if (!PPParserGetPart(a1, (char *)&v35, 0))
    return 46;
  v13 = a2 & 7 | 0xC0u;
  v32 = 0;
  if ((v8 & 2) != 0)
  {
    if ((_DWORD)v35 != 1869377379 || WORD2(v35) != 114)
    {
      if ((_DWORD)v35 != 1953523044 || WORD2(v35) != 104)
        return 10;
      v23 = 1792;
      goto LABEL_70;
    }
    v33 = a2 & 7 | 0x4C0;
    if (*(_BYTE *)(a1 + 383))
    {
      if (!PPParserGetPart(a1, (char *)&v35, 0))
        return 46;
      PPParserReturnPart(a1);
      if (v35 == 91)
      {
        result = PPParserParseArray(a1, &v32);
        if ((_DWORD)result)
          return result;
        v33 = a2 & 7 | 0x4C0 | ((unint64_t)(v32 & 7) << 33);
        if (v32 >= *(_DWORD *)(a1 + 316))
          return 64;
        v25 = *(unsigned __int8 *)(a1 + 386) | (1 << v32);
LABEL_74:
        *(_BYTE *)(a1 + 386) = v25;
        goto LABEL_75;
      }
      v33 = a2 & 7 | 0x4C0;
    }
    LOBYTE(v25) = *(_BYTE *)(a1 + 386) | 1;
    goto LABEL_74;
  }
  if (!(v35 ^ 0x6E6F697469736F70 | v36))
  {
    if ((*(_BYTE *)(a1 + 380) & 1) == 0)
    {
      if ((*(_BYTE *)(a1 + 380) & 4) == 0)
      {
        *(_BYTE *)(a1 + 379) |= 4u;
        v24 = a2 & 7 | 0x1C0;
        goto LABEL_71;
      }
      return 41;
    }
    return 34;
  }
  if ((*(_BYTE *)(a1 + 380) & 2) != 0 && (_DWORD)v35 == 1684957559 && *(_DWORD *)((char *)&v35 + 3) == 7827300)
  {
    if ((*(_BYTE *)(a1 + 380) & 1) == 0)
    {
      if ((*(_BYTE *)(a1 + 379) & 4) == 0)
      {
        *(_BYTE *)(a1 + 380) |= 4u;
        v30 = 0x100000100;
        goto LABEL_81;
      }
      return 41;
    }
    return 34;
  }
  if ((_DWORD)v35 == 1869377379 && WORD2(v35) == 114)
  {
    v26 = a2 & 7 | 0x4C0;
    v33 = v26;
    v27 = PPParserGetPart(a1, (char *)&v35, 0);
    if (!v27)
      return 46;
    v28 = v35;
    if (v27 == 1 && v35 == 46)
    {
      if (!PPParserGetPart(a1, (char *)&v35, 0))
        return 46;
      if (v35 ^ 0x6B636162 | BYTE4(v35))
      {
        if ((_DWORD)v35 != 1852797542 || WORD2(v35) != 116)
        {
          PPParserReturnPart(a1);
          v28 = 46;
          LOWORD(v35) = 46;
          v27 = 1;
          goto LABEL_85;
        }
      }
      else
      {
        v26 = (a2 & 7 | 0x1000001C0) + 768;
        v33 = v26;
      }
      v27 = PPParserGetPart(a1, (char *)&v35, 0);
      if (!v27)
        return 46;
      v28 = v35;
    }
LABEL_85:
    if (v27 == 1 && v28 == 46)
    {
      if (!PPParserGetPart(a1, (char *)&v35, 0))
        return 46;
      if (v35 == 0x7261646E6F636573 && v36 == 121)
      {
        v19 = v26 & 0xFFFFFFFFFFFFE1FFLL;
        v20 = 1280;
        goto LABEL_99;
      }
      if (v35 == 0x7972616D697270)
        goto LABEL_75;
      PPParserReturnPart(a1);
    }
    PPParserReturnPart(a1);
    goto LABEL_75;
  }
  if (!(v35 ^ 0x64726F6F63676F66 | v36))
  {
    v23 = 0x500001100;
LABEL_70:
    v24 = v23 & 0xFFFFFFFFFFFFFFF8 | a2 & 7;
    goto LABEL_71;
  }
  if (v35 == 0x7A6973746E696F70 && v36 == 101)
  {
    v23 = 768;
    goto LABEL_70;
  }
  if (!(v35 ^ 0x64726F6F63786574 | v36))
  {
    if (PPParserGetPart(a1, (char *)&v35, 0))
    {
      PPParserReturnPart(a1);
      if (v35 == 91)
      {
        result = PPParserParseArray(a1, &v32);
        if ((_DWORD)result)
          return result;
        v24 = a2 & 7 | 0x11C0 | ((unint64_t)(((_BYTE)v32 + 8) & 0x3F) << 32);
LABEL_71:
        v33 = v24;
LABEL_75:
        (*(void (**)(uint64_t, unint64_t *))(a1 + 216))(a1, &v33);
        result = 0;
        *a3 = v34;
        return result;
      }
      v30 = 0x800001100;
LABEL_81:
      v24 = v13 | v30;
      goto LABEL_71;
    }
    return 46;
  }
  if (v35 ^ 0x70696C63 | BYTE4(v35))
    return 10;
  v17 = *(_DWORD *)(a1 + 368);
  if (v17 != 52 && v17 != 49)
    return 10;
  result = PPParserParseArray(a1, &v32);
  if (!(_DWORD)result)
  {
    v18 = v32;
    if (v32 < *(_DWORD *)(a1 + 304))
    {
      *a4 = v32;
      v19 = v13 | ((unint64_t)(v18 & 0x1F) << 32);
      v20 = 2560;
LABEL_99:
      v24 = v19 | v20;
      goto LABEL_71;
    }
    return 60;
  }
  return result;
}

uint64_t PPParserParseOutputDeclaration(uint64_t a1, int a2)
{
  uint64_t result;
  void **v5;
  char __s[256];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (!PPParserGetPart(a1, __s, 0))
    return 46;
  if (PPParserValidateName(a1, __s))
    return 18;
  v5 = (void **)PPParserIdentifierCreate();
  PPParserIdentifierSetName(v5, __s);
  *((_DWORD *)v5 + 6) = a2;
  *((_DWORD *)v5 + 4) = 3;
  if (PPParserScopeAddIdentifier(*(uint64_t **)(a1 + 32), (uint64_t)v5))
  {
    PPParserIdentifierFree(v5);
    return 28;
  }
  if (!PPParserGetPart(a1, __s, 0))
    return 46;
  if (__s[0] != 61)
    return 10;
  result = PPParserParseOutputBinding(a1, a2, (_DWORD *)v5 + 3, (_BYTE *)v5 + 21);
  if (!(_DWORD)result)
  {
    if (PPParserGetPart(a1, __s, 0))
    {
      if (__s[0] == 59)
        return 0;
      else
        return 10;
    }
    return 46;
  }
  return result;
}

uint64_t PPParserParseDestinationMask(uint64_t a1, unint64_t *a2)
{
  unsigned int Part;
  char v5;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  int v10;
  int v11;
  char v12;
  uint64_t v13;
  char v14[256];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  Part = PPParserGetPart(a1, v14, 0);
  if (!Part)
    return 46;
  v5 = 0;
  v6 = *a2 & 0xFFFFFFFFFFF87FFFLL;
  *a2 = v6;
  v7 = Part;
  v8 = v14;
  result = 12;
  do
  {
    v11 = *v8++;
    v10 = v11;
    if (v11 > 113)
    {
      switch(v10)
      {
        case 'r':
          if ((v6 & 0x40000) != 0)
            return 12;
          v12 = 2;
          goto LABEL_16;
        case 'w':
          if ((v6 & 0x8000) != 0)
            return 12;
          v12 = 1;
          goto LABEL_24;
        case 'x':
          if ((v6 & 0x40000) != 0)
            return 12;
          v12 = 1;
LABEL_16:
          v13 = 0x40000;
          goto LABEL_28;
        case 'y':
          if ((v6 & 0x20000) != 0)
            return 12;
          v12 = 1;
          goto LABEL_19;
        case 'z':
          if ((v6 & 0x10000) != 0)
            return 12;
          v12 = 1;
          goto LABEL_27;
        default:
          return result;
      }
    }
    switch(v10)
    {
      case 'a':
        if ((v6 & 0x8000) != 0)
          return 12;
        v12 = 2;
LABEL_24:
        v13 = 0x8000;
        break;
      case 'b':
        if ((v6 & 0x10000) != 0)
          return 12;
        v12 = 2;
LABEL_27:
        v13 = 0x10000;
        break;
      case 'g':
        if ((v6 & 0x20000) != 0)
          return 12;
        v12 = 2;
LABEL_19:
        v13 = 0x20000;
        break;
      default:
        return result;
    }
LABEL_28:
    v5 |= v12;
    v6 |= v13;
    *a2 = v6;
    --v7;
  }
  while (v7);
  if (v5 == 3 || v5 == 2 && (*(_BYTE *)(a1 + 368) & 2) == 0)
    return 12;
  return 0;
}

uint64_t PPParserParseSourceSwizzle(uint64_t a1, _QWORD *a2, _DWORD *a3)
{
  int Part;
  char v7;
  int v8;
  char *v9;
  int v10;
  int v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  char v17[256];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  Part = PPParserGetPart(a1, v17, 0);
  if (Part)
  {
    if (Part != 4)
    {
      if (Part != 1)
        return 13;
      *a3 = 1;
      *a2 &= 0xFFFFFFFFFFE7FFFFLL;
    }
    v7 = 0;
    v8 = 0;
    v9 = v17;
    while (1)
    {
      v10 = *v9;
      if (v10 > 113)
        break;
      switch(v10)
      {
        case 'a':
          v13 = 2;
LABEL_18:
          v12 = 3;
          break;
        case 'b':
          v12 = 2;
          v13 = 2;
          break;
        case 'g':
          v13 = 2;
LABEL_15:
          v12 = 1;
          break;
        default:
          return 13;
      }
LABEL_20:
      v7 |= v13;
      v14 = -1537;
      v15 = 9;
      switch(v8)
      {
        case 0:
          goto LABEL_23;
        case 1:
          v14 = -6145;
          v15 = 11;
          goto LABEL_23;
        case 2:
          v14 = -24577;
          v15 = 13;
LABEL_23:
          *a2 = *a2 & v14 | (v12 << v15);
          goto LABEL_24;
        case 3:
          *a2 = *a2 & 0xFFFFFFFFFFFE7FFFLL | ((unint64_t)(v12 & 3) << 15);
          if (v7 == 3 || v7 == 2 && (*(_BYTE *)(a1 + 368) & 2) == 0)
            return 13;
          return 0;
        default:
LABEL_24:
          v9 += Part != 1;
          ++v8;
          break;
      }
    }
    v11 = v10 - 114;
    v12 = 0;
    v13 = 1;
    switch(v11)
    {
      case 0:
        v12 = 0;
        v13 = 2;
        goto LABEL_20;
      case 5:
        v13 = 1;
        goto LABEL_18;
      case 6:
        goto LABEL_20;
      case 7:
        v13 = 1;
        goto LABEL_15;
      case 8:
        v13 = 1;
        v12 = 2;
        goto LABEL_20;
      default:
        return 13;
    }
    return 13;
  }
  return 46;
}

uint64_t PPParserParseLabel(uint64_t a1, const char *a2, uint64_t a3)
{
  unsigned int *v6;
  uint64_t v7;
  size_t v8;
  const char **v9;
  char v11[256];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (!PPParserGetPart(a1, v11, 0))
    return 3;
  if (v11[0] != 58)
  {
    PPParserReturnPart(a1);
    return 3;
  }
  v6 = *(unsigned int **)(a1 + 152);
  if (v6)
  {
    v7 = *v6;
    if ((_DWORD)v7)
    {
      v8 = a3;
      v9 = (const char **)(v6 + 2);
      while (strlen(*v9) != (_DWORD)a3 || strncmp(a2, *v9, a3))
      {
        ++v9;
        if (!--v7)
          goto LABEL_13;
      }
      return 29;
    }
  }
  v8 = a3;
LABEL_13:
  if (!strncmp(a2, "start", v8) || !strncmp(a2, "main", v8))
  {
    if (*(_BYTE *)(a1 + 378))
      return 29;
    *(_BYTE *)(a1 + 378) = 1;
  }
  (*(void (**)(uint64_t, const char *, uint64_t))(a1 + 240))(a1, a2, a3);
  return 0;
}

uint64_t PPParserParseAddressDestination(uint64_t a1, unint64_t *a2)
{
  uint64_t Identifier;
  uint64_t v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int Part;
  char __s2[256];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (!PPParserGetPart(a1, __s2, 0))
    return 46;
  Identifier = PPParserScopeFindIdentifier(*(uint64_t **)(a1 + 32), __s2);
  if (!Identifier)
    return 25;
  v5 = Identifier;
  if (*(_DWORD *)(Identifier + 16) != -1)
    return 22;
  v7 = *a2;
  v8 = *a2 | 0x40000;
  *a2 = v8;
  v9 = v8 & 0xFFFFFFFFFFFC7FFFLL;
  v10 = v7 | 0x78000;
  if ((*(_DWORD *)(a1 + 368) & 0x10) == 0)
    v10 = v9;
  *a2 = v10;
  Part = PPParserGetPart(a1, __s2, 0);
  if (!Part)
    return 46;
  if (Part == 1 && __s2[0] == 46)
  {
    result = PPParserParseDestinationMask(a1, a2);
    if ((_DWORD)result)
      return result;
    if ((*(_BYTE *)(a1 + 368) & 0x10) == 0)
    {
      if ((*a2 & 0x78000) == 0x40000)
        goto LABEL_21;
      return 12;
    }
  }
  else
  {
    if ((*(_BYTE *)(a1 + 368) & 0x10) == 0)
      return 12;
    PPParserReturnPart(a1);
    if ((*(_BYTE *)(a1 + 368) & 0x10) == 0)
    {
LABEL_21:
      result = 0;
      *a2 = *a2 & 0xFFFFFFFF8FFFLL | ((unint64_t)*(unsigned int *)(v5 + 12) << 48) | 0x4000;
      return result;
    }
  }
  result = PPParserParseBranchCondition(a1, a2, 0);
  if (!(_DWORD)result)
    goto LABEL_21;
  return result;
}

uint64_t PPParserParseBranchCondition(uint64_t a1, _QWORD *a2, int a3)
{
  int Part;
  unint64_t v7;
  uint64_t result;
  unint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  __int16 v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  if (a3 == 79 || a3 == 85)
    goto LABEL_5;
  if (!PPParserGetPart(a1, (char *)&v19, 0))
    return 46;
  if (v19 == 40)
  {
LABEL_5:
    Part = PPParserGetPart(a1, (char *)&v19, 0);
    if (!Part)
      return 46;
    if (*(_DWORD *)(a1 + 368) == 52)
    {
      if ((Part - 4) < 0xFFFFFFFE)
        return 16;
    }
    else if (Part != 2)
    {
      return 16;
    }
    switch(v19)
    {
      case 21076:
        v7 = *a2 & 0xFFFFFFFFFFFFFFF1;
        goto LABEL_28;
      case 20805:
        v7 = *a2 & 0xFFFFFFFFFFFFFFF1 | 2;
        goto LABEL_28;
      case 17735:
        v7 = *a2 & 0xFFFFFFFFFFFFFFF1 | 4;
        goto LABEL_28;
      case 21575:
        v7 = *a2 & 0xFFFFFFFFFFFFFFF1 | 6;
        goto LABEL_28;
      case 17740:
        v7 = *a2 & 0xFFFFFFFFFFFFFFF1 | 8;
        goto LABEL_28;
      case 21580:
        v7 = *a2 & 0xFFFFFFFFFFFFFFF1 | 0xA;
        goto LABEL_28;
      case 17742:
        v7 = *a2 & 0xFFFFFFFFFFFFFFF1 | 0xC;
        goto LABEL_28;
      case 19526:
        v7 = *a2 | 0xELL;
LABEL_28:
        *a2 = v7;
        if (Part == 3 && *(_DWORD *)(a1 + 368) == 52)
        {
          if (v20 == 49)
          {
            v9 = v7 | 1;
          }
          else
          {
            if (v20 != 48)
              goto LABEL_35;
            v9 = v7 & 0xFFFFFFFFFFFFFFFELL;
          }
          *a2 = v9;
        }
LABEL_35:
        v10 = PPParserGetPart(a1, (char *)&v19, 0);
        if (v10)
        {
          if (v19 == 41)
          {
            result = 16;
            if (a3 != 79 && a3 != 85)
            {
              result = 0;
              *a2 = *a2 & 0xFFFFFFFFFFFFF00FLL | 0xE40;
            }
            return result;
          }
          v11 = v10;
          result = 16;
          if (v11 != 1 || v19 != 46)
            return result;
          v12 = PPParserGetPart(a1, (char *)&v19, 0);
          if (v12)
          {
            if (v12 == 4 || v12 == 1)
            {
              v13 = 0;
              v14 = (char *)&v19;
              while (1)
              {
                v15 = *v14 - 119;
                if (v15 > 3)
                  break;
                v16 = qword_22D805A38[v15];
                v17 = -49;
                v18 = 4;
                switch(v13)
                {
                  case 0:
                    goto LABEL_50;
                  case 1:
                    v17 = -193;
                    v18 = 6;
                    goto LABEL_50;
                  case 2:
                    v17 = -769;
                    v18 = 8;
LABEL_50:
                    *a2 = *a2 & v17 | (v16 << v18);
                    break;
                  case 3:
                    *a2 = *a2 & 0xFFFFFFFFFFFFF3FFLL | (v16 << 10);
                    if (a3 == 79 || a3 == 85)
                      return 0;
                    if (!PPParserGetPart(a1, (char *)&v19, 0))
                      return 46;
                    if (v19 != 41)
                      return 16;
                    return 0;
                  default:
                    break;
                }
                v14 += v12 == 4;
                ++v13;
              }
            }
            return 16;
          }
        }
        return 46;
    }
    return 16;
  }
  PPParserReturnPart(a1);
  return 0;
}

uint64_t PPParserParseDestination(uint64_t a1, unint64_t *a2, int a3)
{
  uint64_t Identifier;
  uint64_t v7;
  uint64_t result;
  __int16 v9;
  unint64_t v11;
  unint64_t v12;
  int v13;
  int Part;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  unint64_t v19;
  uint32x4_t v20;
  int64x2_t v21;
  int8x16_t v22;
  int8x16_t v23;
  unsigned int v24;
  char v25;
  char __s2[256];
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  if (!PPParserGetPart(a1, __s2, 1))
    return 46;
  Identifier = PPParserScopeFindIdentifier(*(uint64_t **)(a1 + 32), __s2);
  v25 = -1;
  if (Identifier)
  {
    v7 = Identifier;
    v24 = 0;
    if ((a3 & 0xFFFFFFFC) == 0x5C && *(_DWORD *)(Identifier + 24) == 2)
      return 45;
    if (!PPParserGetPart(a1, __s2, 0))
      return 46;
    PPParserReturnPart(a1);
    v9 = *(unsigned __int8 *)(v7 + 20);
    if (__s2[0] != 91)
    {
      if (*(_BYTE *)(v7 + 20))
        return 33;
      goto LABEL_21;
    }
    if (!*(_BYTE *)(v7 + 20))
      return 32;
    result = PPParserParseArray(a1, &v24);
    if (!(_DWORD)result)
    {
      v9 = v24;
      if (v24 >= *(_DWORD *)(v7 + 8))
      {
        PPParserReturnPart(a1);
        return 35;
      }
LABEL_21:
      v12 = *a2 & 0xFFFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)(v9 + *(_DWORD *)(v7 + 12)) << 48);
      *a2 = v12;
      v13 = *(_DWORD *)(v7 + 16);
      if (v13 != 1)
      {
        if (v13 != 3)
          return 24;
        v25 = *(_BYTE *)(v7 + 21);
      }
      v11 = v12 & 0xFFFFFFFFFFFF8FFFLL | ((unint64_t)(v13 & 7) << 12);
LABEL_25:
      *a2 = v11 & 0xFFFFFFFF80187001 | 0x72678000;
      Part = PPParserGetPart(a1, __s2, 0);
      if (Part)
      {
        if (Part == 1 && __s2[0] == 46)
        {
          result = PPParserParseDestinationMask(a1, a2);
          if ((_DWORD)result)
            return result;
        }
        else
        {
          PPParserReturnPart(a1);
        }
        v15 = *(_DWORD *)(a1 + 368);
        if ((v15 & 0x22) == 0)
          goto LABEL_52;
        v16 = *a2;
        if ((*a2 & 0x7000) != 0x3000)
          goto LABEL_52;
        v17 = *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * HIWORD(v16) + 8);
        v18 = (v17 >> 8) & 0x1F;
        if (v18 == 4)
        {
          if ((v15 & 2) != 0 && *(_BYTE *)(a1 + 381))
          {
            v19 = v16 & 0xFFFFFFFF8FFFLL | (((v17 >> 33) & 7) << 48) | 0x1000;
            goto LABEL_51;
          }
        }
        else if (v18 == 10)
        {
          if ((v15 & 0x20) != 0)
          {
            v20 = vmovl_u16((uint16x4_t)vceq_s16(vdup_n_s16(v25 & 3), (int16x4_t)0x3000200010000));
            v21.i64[0] = v20.u32[0];
            v21.i64[1] = v20.u32[1];
            v22 = (int8x16_t)vshrq_n_s64(vshlq_n_s64(v21, 0x38uLL), 0x38uLL);
            v21.i64[0] = v20.u32[2];
            v21.i64[1] = v20.u32[3];
            v23 = vorrq_s8(vandq_s8(v22, (int8x16_t)xmmword_22D805AB0), vandq_s8((int8x16_t)vshrq_n_s64(vshlq_n_s64(v21, 0x38uLL), 0x38uLL), (int8x16_t)xmmword_22D805AA0));
            v19 = *(_QWORD *)&vorr_s8(*(int8x8_t *)v23.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL)) | v16 & 0xFFFFFFFF80787FFFLL;
            goto LABEL_51;
          }
        }
        else if (v18 == 7 && (v15 & 2) != 0)
        {
          if ((v16 & 0x10000) != 0)
          {
            v19 = v16 & 0xFFFFFFFF807BFFFFLL | 0x55040000;
            goto LABEL_51;
          }
          if ((v16 & 0x40000) != 0)
          {
            *a2 = v16 & 0xFFFFFFFFFFFBFFFFLL;
            if ((v16 & 0x28000) == 0)
            {
              v19 = v16 & 0xFFFFFFFFFFF9FFFFLL | 0x20000;
LABEL_51:
              *a2 = v19;
            }
          }
        }
LABEL_52:
        if ((*(_BYTE *)(a1 + 368) & 0x10) == 0)
          return 0;
        result = PPParserParseBranchCondition(a1, a2, 0);
        if (!(_DWORD)result)
          return 0;
        return result;
      }
      return 46;
    }
  }
  else
  {
    if (*(_DWORD *)__s2 != 1970496882 || *(_DWORD *)&__s2[3] != 7629941)
      return 25;
    v24 = 0;
    PPParserReturnPart(a1);
    result = PPParserParseOutputBinding(a1, 0, &v24, &v25);
    if (!(_DWORD)result)
    {
      v11 = *a2 & 0xFFFFFFFF8FFFLL | ((unint64_t)v24 << 48) | 0x3000;
      goto LABEL_25;
    }
  }
  return result;
}

uint64_t PPParserParseSourceVar(uint64_t a1, unint64_t *a2, int a3, _DWORD *a4)
{
  int Part;
  int v9;
  uint64_t Identifier;
  uint64_t v11;
  uint64_t result;
  __int16 v13;
  BOOL v14;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unsigned int v22;
  char *v23;
  char __s2[8];
  unsigned __int8 v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  Part = PPParserGetPart(a1, __s2, 1);
  if (!Part)
    return 46;
  v9 = Part;
  Identifier = PPParserScopeFindIdentifier(*(uint64_t **)(a1 + 32), __s2);
  if (!Identifier)
  {
    if ((*(_BYTE *)(a1 + 368) & 2) != 0)
    {
      if (*(_QWORD *)__s2 ^ 0x746E656D67617266 | v25)
        goto LABEL_19;
    }
    else
    {
      v14 = *(_DWORD *)__s2 == 1953654134 && *(_DWORD *)&__s2[3] == 7890292;
      if (!v14)
      {
LABEL_19:
        if (__s2[0] != 123
          && *(_QWORD *)__s2 != 0x6D6172676F7270
          && (*(_DWORD *)__s2 != 1952543859 || *(unsigned __int16 *)&__s2[4] != 101))
        {
          v23 = 0;
          glp_strtod(__s2, &v23);
          v14 = v23 == &__s2[v9];
          *a4 = v14;
          if (!v14)
            return 26;
        }
        LODWORD(v23) = 1;
        *a2 = *a2 & 0xFFFFFFFFFE3FLL | ((unint64_t)*(unsigned int *)(a1 + 344) << 48) | 0x80;
        PPParserReturnPart(a1);
        result = PPParserParseParamBinding(a1, 0, &v23);
        if (!(_DWORD)result)
          goto LABEL_38;
        return result;
      }
    }
    v22 = 0;
    LODWORD(v23) = 0;
    PPParserReturnPart(a1);
    result = PPParserParseAttributeBinding(a1, (int *)&v23, &v22);
    if ((_DWORD)result)
      return result;
    v16 = *a2 & 0xFFFFFFFFFE3FLL | ((unint64_t)v22 << 48);
    *a2 = v16;
    if ((_DWORD)v23 == -1)
      goto LABEL_38;
    v17 = v16 | 0x40;
    *a2 = v17;
    v18 = v17 & 0xFFFFFFFFFE7FLL | ((unint64_t)*(unsigned int *)(a1 + 372) << 48);
    goto LABEL_37;
  }
  v11 = Identifier;
  LODWORD(v23) = 0;
  if ((a3 & 0xFFFFFFFC) == 0x64 && *(_DWORD *)(Identifier + 24) == 2)
    return 44;
  if (!PPParserGetPart(a1, __s2, 0))
    return 46;
  PPParserReturnPart(a1);
  v13 = *(unsigned __int8 *)(v11 + 20);
  if (__s2[0] != 91)
  {
    if (*(_BYTE *)(v11 + 20))
      return 33;
    goto LABEL_35;
  }
  if (!*(_BYTE *)(v11 + 20))
    return 32;
  result = PPParserParseIndirectArray(a1, a2, &v23);
  if (!(_DWORD)result)
  {
    v13 = (__int16)v23;
    if (v23 >= *(_DWORD *)(v11 + 8))
    {
      PPParserReturnPart(a1);
      return 35;
    }
LABEL_35:
    v19 = *a2 & 0xFFFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)(v13 + *(_DWORD *)(v11 + 12)) << 48);
    *a2 = v19;
    v20 = *(_DWORD *)(v11 + 16);
    if (v20 >= 3)
      return 23;
    v18 = v19 & 0xFFFFFFFFFFFFFE3FLL | ((unint64_t)(v20 & 7) << 6);
LABEL_37:
    *a2 = v18;
LABEL_38:
    result = 0;
    if (*a4)
      v21 = *a2 & 0xFFFFFFFFFFE601FFLL;
    else
      v21 = *a2 & 0xFFFFFFFFFFE601FFLL | 0x19C800;
    *a2 = v21;
  }
  return result;
}

uint64_t PPParserParseSwizzleSourceVar(uint64_t a1, unint64_t *a2, int a3, _DWORD *a4)
{
  uint64_t result;
  int Part;
  char v10[256];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (!PPParserGetPart(a1, v10, 0))
    return 46;
  if (*(unsigned __int16 *)v10 == 45)
  {
    *a2 |= 0x10uLL;
  }
  else if (*(unsigned __int16 *)v10 != 43)
  {
    PPParserReturnPart(a1);
  }
  if ((*(_BYTE *)(a1 + 368) & 0x20) == 0)
    goto LABEL_11;
  if (!PPParserGetPart(a1, v10, 0))
    return 46;
  if (*(unsigned __int16 *)v10 == 124)
    *a2 |= 0x20uLL;
  else
    PPParserReturnPart(a1);
LABEL_11:
  result = PPParserParseSourceVar(a1, a2, a3, a4);
  if ((_DWORD)result)
    return result;
  Part = PPParserGetPart(a1, v10, 0);
  if (!Part)
    return 46;
  if (Part == 1 && v10[0] == 46)
  {
    result = PPParserParseSourceSwizzle(a1, a2, a4);
    if ((_DWORD)result)
      return result;
  }
  else
  {
    PPParserReturnPart(a1);
  }
  if ((*(_BYTE *)(a1 + 368) & 0x20) == 0 || (*(_BYTE *)a2 & 0x20) == 0)
    return 0;
  if (!PPParserGetPart(a1, v10, 0))
    return 46;
  if (*(unsigned __int16 *)v10 == 124)
    return 0;
  return 23;
}

uint64_t PPParserParseSwizzleCode(uint64_t a1, _QWORD *a2)
{
  unsigned int Part;
  int v5;
  int v6;
  char v7;
  int v8;
  int v9;
  uint64_t result;
  int v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  Part = PPParserGetPart(a1, &v14, 0);
  if (!Part)
    return 46;
  v5 = 0;
  v6 = 0;
  while (2)
  {
    if (Part > 2)
      return 15;
    v7 = v14;
    if (v14 != 43)
    {
      if (v14 == 45)
      {
        v8 = 1;
        goto LABEL_8;
      }
      if (Part != 2)
      {
        v8 = 0;
        goto LABEL_14;
      }
      return 15;
    }
    v8 = 0;
LABEL_8:
    if (Part == 2)
    {
      v7 = v15;
      v14 = v15;
      goto LABEL_14;
    }
    v9 = PPParserGetPart(a1, &v14, 0);
    if (v9 == 1)
    {
      v7 = v14;
LABEL_14:
      result = 15;
      if (v7 > 97)
      {
        switch(v7)
        {
          case 'r':
            v5 |= 2u;
            goto LABEL_33;
          case 's':
          case 't':
          case 'u':
          case 'v':
            return result;
          case 'w':
            v5 |= 1u;
            goto LABEL_29;
          case 'x':
            v5 |= 1u;
LABEL_33:
            v11 = 4 * v8;
            break;
          case 'y':
            v5 |= 1u;
            goto LABEL_35;
          case 'z':
            v5 |= 1u;
            goto LABEL_40;
          default:
            if (v7 == 98)
            {
              v5 |= 2u;
LABEL_40:
              if (v8)
                v11 = 6;
              else
                v11 = 2;
            }
            else
            {
              if (v7 != 103)
                return result;
              v5 |= 2u;
LABEL_35:
              if (v8)
                v11 = 5;
              else
                v11 = 1;
            }
            break;
        }
      }
      else
      {
        switch(v7)
        {
          case '0':
            v11 = 9;
            break;
          case '1':
            if (v8)
              v11 = 10;
            else
              v11 = 8;
            break;
          case 'a':
            v5 |= 2u;
LABEL_29:
            if (v8)
              v11 = 7;
            else
              v11 = 3;
            break;
          default:
            return result;
        }
      }
      if (v5 == 2)
      {
        if ((*(_BYTE *)(a1 + 368) & 2) == 0)
          return 13;
      }
      else if (v5 == 3)
      {
        return 13;
      }
      v12 = -983041;
      v13 = 16;
      switch(v6)
      {
        case 0:
          goto LABEL_50;
        case 1:
          v12 = -15728641;
          v13 = 20;
          goto LABEL_50;
        case 2:
          v12 = -251658241;
          v13 = 24;
LABEL_50:
          *a2 = *a2 & v12 | (v11 << v13);
          goto LABEL_51;
        case 3:
          result = 0;
          *a2 = *a2 & 0xFFFFFFFF0FFFFFFFLL | (v11 << 28);
          return result;
        default:
LABEL_51:
          if (!PPParserGetPart(a1, &v14, 0))
            return 46;
          if (v14 != 44)
            return 15;
          ++v6;
          Part = PPParserGetPart(a1, &v14, 0);
          if (!Part)
            return 46;
          continue;
      }
    }
    break;
  }
  if (v9)
    return 15;
  else
    return 46;
}

uint64_t PPParserParseTextureSourceVar(uint64_t a1, unint64_t *a2)
{
  uint64_t result;
  int v5;
  char v6;
  unint64_t v7;
  unsigned int v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _BYTE v16[253];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (!PPParserGetPart(a1, v16, 0))
    return 46;
  if (*(_QWORD *)v16 != 0x65727574786574)
    return 14;
  if (!PPParserGetPart(a1, v16, 0))
    return 46;
  v5 = v16[0];
  if (v16[0] == 91)
  {
    v15 = 0;
    PPParserReturnPart(a1);
    result = PPParserParseArray(a1, &v15);
    if ((_DWORD)result)
      return result;
    v6 = v15;
    result = 57;
    if (v15 > 15 || v15 >= *(_DWORD *)(a1 + 292))
      return result;
    if (PPParserGetPart(a1, v16, 0))
    {
      v5 = v16[0];
      goto LABEL_12;
    }
    return 46;
  }
  v6 = 0;
LABEL_12:
  if (v5 != 44)
    return 31;
  if (!PPParserGetPart(a1, v16, 0))
    return 46;
  v7 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)v16 ^ 0x45425543 | v16[4])
  {
    if (*(unsigned __int16 *)v16 ^ 0x4433 | v16[2])
    {
      if (*(_DWORD *)v16 ^ 0x54434552 | v16[4])
      {
        if (*(unsigned __int16 *)v16 ^ 0x4432 | v16[2])
        {
          if (*(unsigned __int16 *)v16 ^ 0x4431 | v16[2])
          {
            if (!*(_BYTE *)(a1 + 384))
              return 14;
            if (*(_QWORD *)v16 == 0x4552574F44414853 && *(_QWORD *)&v16[3] == 0x54434552574F44)
            {
              v9 = 5;
              v10 = 2;
            }
            else if (*(_QWORD *)v16 ^ 0x4432574F44414853 | v16[8])
            {
              if (*(_QWORD *)v16 ^ 0x4431574F44414853 | v16[8])
                return 14;
              v9 = 7;
              v10 = 4;
            }
            else
            {
              v9 = 6;
              v10 = 3;
            }
            goto LABEL_36;
          }
          v10 = 4;
        }
        else
        {
          v10 = 3;
        }
      }
      else
      {
        v10 = 2;
      }
      v9 = v10;
    }
    else
    {
      v9 = 1;
      v10 = 1;
    }
  }
  else
  {
    v9 = 0;
    v10 = 0;
  }
LABEL_36:
  v11 = 4 * v6;
  v12 = (v7 >> (4 * v6)) & 0xF;
  if ((_DWORD)v12 == 15)
  {
    v13 = v7 & ~(15 << v11);
    v14 = v9;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & ~(15 << v11) | (v10 << v11);
    *(_QWORD *)(a1 + 16) = ((unint64_t)v9 << v11) | v13;
LABEL_40:
    result = 0;
    *a2 = *a2 & 0xFFFFFF80FFFFFFE0 | v14 | ((unint64_t)(v6 & 0x7F) << 32);
    return result;
  }
  if ((_DWORD)v12 == v9)
  {
    v14 = v9;
    goto LABEL_40;
  }
  return 40;
}

uint64_t PPParserParseAddressSourceVar(uint64_t a1, unint64_t *a2)
{
  uint64_t Identifier;
  uint64_t v5;
  uint64_t result;
  char __s2[256];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (!PPParserGetPart(a1, __s2, 0))
    return 46;
  Identifier = PPParserScopeFindIdentifier(*(uint64_t **)(a1 + 32), __s2);
  if (!Identifier)
    return 26;
  v5 = Identifier;
  if (*(_DWORD *)(Identifier + 16) != -1)
    return 22;
  result = 0;
  *a2 = *a2 & 0xFFFFFFFFFE3FLL | ((unint64_t)*(unsigned int *)(v5 + 12) << 48) | 0x100;
  return result;
}

uint64_t PPParserParseOperation(uint64_t a1, int a2, int a3, char a4, char a5, char a6)
{
  int v9;
  int Part;
  unint64_t v11;
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  uint64_t result;
  int v17;
  char v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  int v25;
  int v26;
  unint64_t v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  unint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  char v40[256];
  char v41[256];
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v38 = 0u;
  v39 = 0;
  v37 = 0u;
  v36 = 0u;
  v35 = 0u;
  v9 = *(_DWORD *)(a1 + 332);
  HIDWORD(v38) = v9;
  if ((*(_BYTE *)(a1 + 379) & 1) == 0)
    HIDWORD(v38) = *(_DWORD *)(a1 + 324) + v9;
  Part = 0;
  v11 = (a2 << 6) | ((unint64_t)(a4 & 1) << 41) | ((unint64_t)(a6 & 1) << 42) | ((unint64_t)(a5 & 1) << 43);
  v34 = v11;
  v12 = 1;
  v13 = a2;
  v14 = 0;
  v15 = 0;
  switch(a2)
  {
    case 0:
    case 1:
    case 2:
    case 4:
    case 5:
    case 7:
    case 21:
    case 80:
    case 81:
    case 92:
    case 93:
    case 94:
    case 95:
      Part = 0;
      goto LABEL_8;
    case 3:
    case 6:
    case 8:
    case 9:
    case 10:
    case 11:
    case 18:
    case 22:
    case 23:
    case 27:
    case 28:
    case 29:
    case 30:
    case 33:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 57:
    case 59:
    case 61:
    case 64:
    case 69:
    case 71:
    case 78:
    case 99:
      goto LABEL_10;
    case 12:
      v14 = 1;
      Part = 2;
      goto LABEL_9;
    case 13:
    case 14:
      if ((*(_BYTE *)(a1 + 380) & 2) != 0)
        Part = 2;
      else
        Part = 1;
      v19 = *(_DWORD *)(a1 + 368);
      if ((v19 == 54 || v19 == 51) && a3 == 2)
        a3 = 3;
      if (!a3)
        LOBYTE(a3) = 2;
      goto LABEL_8;
    case 15:
    case 16:
    case 17:
    case 19:
    case 20:
    case 24:
    case 25:
    case 26:
    case 100:
    case 101:
    case 102:
    case 103:
      Part = 1;
LABEL_8:
      v14 = 1;
LABEL_9:
      v15 = 1;
      goto LABEL_10;
    case 31:
    case 32:
    case 34:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 58:
    case 65:
    case 66:
    case 67:
    case 68:
    case 70:
    case 82:
      Part = 0;
      v15 = 2;
      goto LABEL_5;
    case 56:
      v14 = 1;
      if ((*(_BYTE *)(a1 + 380) & 2) != 0)
        Part = 2;
      else
        Part = 1;
      v15 = 2;
      goto LABEL_10;
    case 60:
    case 62:
    case 63:
    case 83:
    case 104:
      Part = 0;
      v15 = 3;
      goto LABEL_5;
    case 72:
      Part = ((*(_DWORD *)(a1 + 368) >> 4) & 1) == 0;
      goto LABEL_85;
    case 73:
    case 74:
LABEL_85:
      v34 = v11 | ((a3 & 7) << 19) | 0x100000000;
      result = PPParserParseAddressDestination(a1, (unint64_t *)&v35);
      v14 = 1;
      goto LABEL_11;
    case 75:
    case 76:
      Part = PPParserGetPart(a1, v40, 0);
      v13 = a2;
      if (Part)
        goto LABEL_31;
      return 46;
    case 77:
    case 84:
    case 85:
      goto LABEL_31;
    case 79:
      v28 = *(_DWORD *)(a1 + 368);
      if (v28 != 54 && v28 != 51)
        goto LABEL_19;
      v29 = PPParserGetPart(a1, v41, 0);
      if (!v29)
        return 46;
      v30 = v29;
      PPParserReturnPart(a1);
      if (v30 != 2)
      {
LABEL_19:
        Part = 0;
        goto LABEL_33;
      }
      if (*(unsigned __int16 *)v41 == 21076
        || *(unsigned __int16 *)v41 == 20805
        || *(unsigned __int16 *)v41 == 17735
        || *(unsigned __int16 *)v41 == 21575
        || *(unsigned __int16 *)v41 == 17740
        || *(unsigned __int16 *)v41 == 21580
        || *(unsigned __int16 *)v41 == 17742)
      {
        Part = 0;
      }
      else
      {
        Part = 0;
        if (*(unsigned __int16 *)v41 != 19526)
          goto LABEL_33;
      }
      v13 = 79;
LABEL_31:
      result = PPParserParseBranchCondition(a1, &v35, v13);
      if ((_DWORD)result)
        return result;
      v12 = 0;
      v11 = v34;
LABEL_33:
      v34 = v11 & 0xFFFFFFCEFFC7FFFFLL | ((a3 & 7) << 19) | 0x3000000000;
      if ((v12 & 1) == 0)
        goto LABEL_70;
      v17 = 0;
      v18 = 1;
      goto LABEL_35;
    case 86:
    case 87:
    case 96:
    case 97:
      goto LABEL_33;
    case 88:
    case 89:
    case 90:
    case 91:
      v12 = 0;
      goto LABEL_19;
    case 98:
      Part = 0;
      v15 = 4;
LABEL_5:
      v14 = 1;
      goto LABEL_10;
    default:
      v14 = 0;
      v15 = 0;
LABEL_10:
      v34 = v11 | ((a3 & 7) << 19) | 0x100000000;
      result = PPParserParseDestination(a1, (unint64_t *)&v35, a2);
      v12 = v15;
LABEL_11:
      v17 = Part;
      if ((_DWORD)result)
        return result;
      Part = 0;
      v18 = 0;
      if (v17)
      {
        if (!v14)
          goto LABEL_70;
      }
      else
      {
        v34 |= 0x3000000000uLL;
        if ((v14 & 1) == 0)
          goto LABEL_70;
      }
LABEL_35:
      v20 = 0;
      if (v12 <= 1)
        v21 = 1;
      else
        v21 = v12;
      v22 = 8 * v21;
      v31 = a2 - 74;
      v32 = a2 - 66;
      break;
  }
  do
  {
    v33 = 0;
    if ((v18 & 1) == 0)
    {
      if (!PPParserGetPart(a1, v41, 0))
        return 46;
      if (v41[0] != 44)
        return 31;
    }
    if (a2 == 65)
    {
      if (v20)
      {
        v34 |= 0x10000uLL;
        result = PPParserParseSwizzleCode(a1, &v36);
        if ((_DWORD)result)
          return result;
      }
      else
      {
        result = PPParserParseSourceVar(a1, (unint64_t *)&v35 + 1, 65, &v33);
        if ((_DWORD)result)
          return result;
      }
      goto LABEL_64;
    }
    if (a2 == 98 && v20 == 24)
    {
      v34 |= 0x8000uLL;
      v23 = a1;
      v24 = (unint64_t *)&v37;
      goto LABEL_53;
    }
    if (v20 == 8)
    {
      if (v32 > 0x1F)
        goto LABEL_63;
      v25 = 1 << v32;
      if (((1 << v32) & 0x17) != 0)
      {
        v34 |= 0x8000uLL;
        v23 = a1;
        v24 = (unint64_t *)&v36;
LABEL_53:
        result = PPParserParseTextureSourceVar(v23, v24);
        if ((_DWORD)result)
          return result;
        goto LABEL_64;
      }
      v26 = -1073741568;
    }
    else
    {
      if (v31 > 0x17)
        goto LABEL_63;
      v25 = 1 << v31;
      v26 = 12582913;
    }
    if ((v25 & v26) != 0)
    {
      result = PPParserParseAddressSourceVar(a1, (unint64_t *)&v35 + 1);
      if ((_DWORD)result)
        return result;
      goto LABEL_64;
    }
LABEL_63:
    result = PPParserParseSwizzleSourceVar(a1, (unint64_t *)((char *)&v35 + v20 + 8), a2, &v33);
    if ((_DWORD)result)
      return result;
LABEL_64:
    if (!v33)
    {
      if (v17 == 2)
      {
        v34 |= 0x3000000000uLL;
      }
      else if (v17 == 1)
      {
        return 20;
      }
    }
    v20 += 8;
  }
  while (v22 != v20);
LABEL_70:
  if (!PPParserGetPart(a1, v41, 0))
    return 46;
  if (v41[0] != 59)
    return 30;
  if (*(_DWORD *)(a1 + 120) >= *(_DWORD *)(a1 + 268))
    return 51;
  v27 = v34 & 0xFFFFFFFFFFFFFFF8 | v12;
  v34 = v27;
  LODWORD(v39) = Part;
  if (*(_BYTE *)(a1 + 378) == 1)
  {
    v34 = v27 | 0x4000;
    *(_BYTE *)(a1 + 378) = 2;
  }
  (*(void (**)(uint64_t, unint64_t *, char *))(a1 + 168))(a1, &v34, v40);
  return 0;
}

uint64_t PPParserParseMacroDeclaration(_QWORD *a1)
{
  unsigned int Part;
  unsigned int v3;
  void **v4;
  size_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  size_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  _QWORD *v14;
  void **v15;
  uint64_t result;
  char __s[256];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (!PPParserGetPart((uint64_t)a1, __s, 0))
    return 46;
  if (__s[0] == 123)
  {
    Part = PPParserGetPart((uint64_t)a1, __s, 0);
    if (Part)
    {
      v3 = Part;
      v4 = (void **)PPParserMacroCreate();
      PPParserMacroSetSearchString((uint64_t)v4, v4, __s, v3);
      LODWORD(v5) = 0;
      v6 = a1[40];
      while (PPParserGetPart((uint64_t)a1, __s, 0) && PPParserGetPart((uint64_t)a1, __s, 0))
      {
        v5 = (v5 + 1);
        if (__s[0] != 44)
        {
          if (__s[0] != 125)
            return 31;
          PPParserMacroSetParamStringsCount((uint64_t)v4, v5);
          a1[40] = v6;
          if ((_DWORD)v5)
          {
            v7 = 0;
            do
            {
              PPParserGetPart((uint64_t)a1, __s, 0);
              PPParserMacroSetParamString((uint64_t)v4, v7, __s);
              if ((_DWORD)v5 - 1 != v7)
                PPParserGetPart((uint64_t)a1, __s, 0);
              ++v7;
            }
            while ((_DWORD)v5 != v7);
          }
          if (PPParserGetPart((uint64_t)a1, __s, 0))
          {
            if (__s[0] != 125)
              return 10;
            if (PPParserGetPart((uint64_t)a1, __s, 0))
            {
              if (__s[0] != 61)
                return 10;
              if (PPParserGetPart((uint64_t)a1, __s, 0))
              {
                if (__s[0] != 123)
                  return 10;
                v4[4] = (void *)a1[40];
                v8 = *((unsigned int *)a1 + 80);
                while (PPParserGetPart((uint64_t)a1, __s, 0))
                {
                  if (__s[0] == 125)
                  {
                    v9 = *((_DWORD *)a1 + 80) - v8;
                    v10 = (v9 - 2);
                    v11 = __abort_malloc((v9 - 1));
                    memmove(v11, (const void *)(*a1 + v8), v10);
                    *((_BYTE *)v11 + v10) = 0;
                    v12 = v4[1];
                    if (v12)
                      free(v12);
                    v4[1] = v11;
                    if (PPParserGetPart((uint64_t)a1, __s, 0))
                    {
                      if (__s[0] != 59)
                        return 30;
                      v13 = a1[4];
                      v15 = *(void ***)(v13 + 16);
                      v14 = *(_QWORD **)(v13 + 24);
                      if (!v15)
                        v15 = v4;
                      *(_QWORD *)(v13 + 16) = v15;
                      if (v14)
                      {
                        v14[6] = v4;
                        v4[5] = v14;
                      }
                      result = 0;
                      *(_QWORD *)(v13 + 24) = v4;
                      return result;
                    }
                    return 46;
                  }
                }
              }
            }
          }
          return 46;
        }
      }
    }
    return 46;
  }
  return 10;
}

uint64_t PPParserParseAliasDeclaration(uint64_t a1)
{
  unsigned int Part;
  unsigned int v3;
  void **v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t result;
  char *v9;
  char *v10;
  int v11;
  int v12;
  uint64_t v13;
  char *v14;
  int v15;
  void *v16;
  uint64_t v17;
  _QWORD *v18;
  void **v19;
  char v20[256];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  Part = PPParserGetPart(a1, v20, 0);
  if (!Part)
    return 46;
  v3 = Part;
  v4 = (void **)PPParserMacroCreate();
  PPParserMacroSetSearchString((uint64_t)v4, v4, v20, v3);
  if (!PPParserGetPart(a1, v20, 0))
    return 46;
  if (v20[0] != 61)
    return 10;
  v5 = *(_QWORD *)(a1 + 320);
  v6 = PPParserGetPart(a1, v20, 0);
  if (!v6)
    return 46;
  v7 = 0;
  while (v20[0] != 59)
  {
    v7 += v6 + 1;
    v6 = PPParserGetPart(a1, v20, 0);
    if (!v6)
      return 46;
  }
  if (!v7)
    return 10;
  *(_QWORD *)(a1 + 320) = v5;
  v9 = (char *)malloc_type_malloc((v7 + 2), 0x1B2F740uLL);
  if (!v9)
    abort();
  v10 = v9;
  v11 = PPParserGetPart(a1, v9, 0);
  if (!v11)
    return 46;
  v12 = v11;
  LODWORD(v13) = 0;
  v14 = v10;
  while (*v14 != 59)
  {
    v15 = v12 + v13;
    v13 = (v15 + 1);
    v10[v15] = 32;
    v14 = &v10[v13];
    v12 = PPParserGetPart(a1, &v10[v13], 0);
    result = 46;
    if (!v12)
      return result;
  }
  *v14 = 0;
  v16 = v4[1];
  if (v16)
    free(v16);
  v4[1] = v10;
  v17 = *(_QWORD *)(a1 + 32);
  v19 = *(void ***)(v17 + 16);
  v18 = *(_QWORD **)(v17 + 24);
  if (!v19)
    v19 = v4;
  *(_QWORD *)(v17 + 16) = v19;
  if (v18)
  {
    v18[6] = v4;
    v4[5] = v18;
  }
  result = 0;
  *(_QWORD *)(v17 + 24) = v4;
  return result;
}

uint64_t PPParserExpandMacro(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  size_t v6;
  const char **v7;
  uint64_t v8;
  const char **v9;
  uint64_t v10;
  const char *v11;
  int ReplaceString;
  char *v13;
  uint64_t v14;
  char *v15;
  void **v16;
  void *v17;
  _DWORD *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v27;
  int v28;
  char __s2[256];
  uint64_t v30;

  v4 = 0;
  v30 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a1 + 320);
  do
  {
    if (!PPParserGetPart(a1, __s2, 0))
      return 46;
    if (__s2[0] == 44)
      ++v4;
  }
  while (__s2[0] != 59);
  v6 = (v4 + 1);
  if ((_DWORD)v6 != *(_DWORD *)(a2 + 16))
    return 38;
  v7 = (const char **)malloc_type_calloc(8uLL, v6, 0x55E18C5uLL);
  if (!v7)
    goto LABEL_34;
  v9 = v7;
  *(_QWORD *)(a1 + 320) = v5;
  if ((_DWORD)v6)
  {
    v10 = 0;
    while (1)
    {
      v11 = (const char *)malloc_type_calloc(0x100uLL, 1uLL, 0x55E18C5uLL);
      if (!v11)
        break;
      v9[v10] = v11;
      PPParserGetPart(a1, __s2, 0);
      if (__s2[0] != 44 && __s2[0] != 59)
      {
        while (1)
        {
          strcat((char *)v9[v10], __s2);
          PPParserGetPart(a1, __s2, 0);
          if (__s2[0] == 44 || __s2[0] == 59)
            break;
          *(_WORD *)&v9[v10][strlen(v9[v10])] = 32;
        }
      }
      if (++v10 == v6)
        goto LABEL_18;
    }
LABEL_34:
    abort();
  }
LABEL_18:
  ReplaceString = PPParserMacroGetReplaceString(a2, v8, v9, 0);
  v13 = (char *)malloc_type_malloc((ReplaceString + 1), 0x1B2F740uLL);
  if (!v13)
    goto LABEL_34;
  v15 = v13;
  PPParserMacroGetReplaceString(a2, v14, v9, (uint64_t)v13);
  if ((_DWORD)v6)
  {
    v16 = (void **)v9;
    do
    {
      v17 = *v16++;
      free(v17);
      --v6;
    }
    while (v6);
  }
  free(v9);
  v18 = PPParserCreate(*(_DWORD *)(a1 + 368));
  v19 = *(_OWORD *)(a1 + 304);
  v21 = *(_OWORD *)(a1 + 256);
  v20 = *(_OWORD *)(a1 + 272);
  *((_OWORD *)v18 + 18) = *(_OWORD *)(a1 + 288);
  *((_OWORD *)v18 + 19) = v19;
  *((_OWORD *)v18 + 16) = v21;
  *((_OWORD *)v18 + 17) = v20;
  PPParserInherit((uint64_t)v18, a1);
  v22 = PPParserScopeCreateFromScope(*(uint64_t **)(a1 + 32));
  v24 = (uint64_t *)*((_QWORD *)v18 + 3);
  v23 = *((_QWORD *)v18 + 4);
  if (!v24)
    v24 = v22;
  *((_QWORD *)v18 + 3) = v24;
  if (v23)
  {
    *(_QWORD *)(v23 + 48) = v22;
    v22[5] = v23;
  }
  *((_QWORD *)v18 + 4) = v22;
  PPParserAttachString((uint64_t)v18, v15, 0);
  if (*(_DWORD *)(a1 + 80))
  {
    v25 = *(_QWORD *)(a1 + 72);
    *(_OWORD *)(v18 + 14) = *(_OWORD *)(a1 + 56);
    *((_QWORD *)v18 + 9) = v25;
    v18[20] = 1;
    *((_QWORD *)v18 + 20) = llvmir_PPStreamSetTarget;
    *((_QWORD *)v18 + 21) = llvmir_PPStreamAddOperation;
    *((_QWORD *)v18 + 22) = llvmir_PPStreamAddTempUsage;
    *((_QWORD *)v18 + 23) = llvmir_PPStreamAddAddressUsage;
    *((_QWORD *)v18 + 24) = llvmir_PPStreamAddParamBinding;
    *((_QWORD *)v18 + 25) = llvmir_PPStreamAddParamBindingArray;
    *((_QWORD *)v18 + 26) = llvmir_PPStreamAddAttribBinding;
    *((_QWORD *)v18 + 27) = llvmir_PPStreamAddOutputBinding;
    *((_QWORD *)v18 + 28) = llvmir_PPStreamAddOption;
    *((_QWORD *)v18 + 29) = llvmir_PPStreamAddConstant;
    *((_QWORD *)v18 + 30) = llvmir_PPStreamAddLabel;
    *((_QWORD *)v18 + 31) = llvmir_PPStreamResolveBranches;
  }
  else
  {
    PPParserAttachStream(v18, *(_QWORD *)(a1 + 40));
  }
  *((_QWORD *)v18 + 41) = *(_QWORD *)(a1 + 320);
  *((_BYTE *)v18 + 379) |= 3u;
  v27 = PPParserParse(v18);
  if ((_DWORD)v27)
  {
    PPParserBuildErrorString((uint64_t)v18, v27, *(_QWORD *)a2);
    v28 = strlen((const char *)v18 + 392);
    memmove((void *)(a1 + 392), v18 + 98, v28);
    PPParserFree((uint64_t)v18);
    return 2;
  }
  else
  {
    PPParserInherit(a1, (uint64_t)v18);
    PPParserFree((uint64_t)v18);
    free(v15);
    return 0;
  }
}

uint64_t PPParserParse(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  BOOL v27;
  char v28;
  int v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _OWORD v43[4];

  if ((*(_BYTE *)(a1 + 379) & 2) != 0 || (v2 = PPParserParseVersion(a1), !(_DWORD)v2))
  {
    do
      v3 = PPParserParseOption(a1);
    while (!(_DWORD)v3);
    v2 = v3;
  }
  if ((*(_BYTE *)(a1 + 380) & 1) != 0 && (*(_WORD *)(a1 + 376) & 1) != 0)
  {
    v39 = 0uLL;
    v41 = xmmword_22D805A60;
    (*(void (**)(uint64_t, __int128 *))(a1 + 208))(a1, &v41);
    v4 = 0;
    v5 = 4032;
    if ((*(_WORD *)(a1 + 376) & 2) == 0)
      v5 = 0x10000000FC0;
    v40 = (unint64_t)v5;
    v6 = 4;
    do
    {
      *(_QWORD *)&v40 = v40 & 0xFFFFF3FFFFFFFFFFLL | v4;
      v7 = *(_DWORD *)(a1 + 344);
      *(_DWORD *)(a1 + 344) = v7 + 1;
      DWORD2(v40) = v7;
      (*(void (**)(uint64_t, __int128 *))(a1 + 192))(a1, &v40);
      v4 += 0x40000000000;
      --v6;
    }
    while (v6);
    v8 = 0;
    *(_QWORD *)&v40 = v40 & 0xFFFF8FFFFFFFFFFFLL | 0x300000000000;
    v9 = 4;
    do
    {
      *(_QWORD *)&v40 = v40 & 0xFFFFF3FFFFFFFFFFLL | v8;
      v10 = *(_DWORD *)(a1 + 344);
      *(_DWORD *)(a1 + 344) = v10 + 1;
      DWORD2(v40) = v10;
      (*(void (**)(uint64_t, __int128 *))(a1 + 192))(a1, &v40);
      v8 += 0x40000000000;
      --v9;
    }
    while (v9);
    v39 = xmmword_22D805AC0;
    (*(void (**)(uint64_t, __int128 *))(a1 + 216))(a1, &v39);
    *(_QWORD *)&v39 = v39 & 0xFFFFFFFFFFFFE0FFLL | 0x900;
    (*(void (**)(uint64_t, __int128 *))(a1 + 216))(a1, &v39);
    if ((*(_WORD *)(a1 + 376) & 2) != 0)
    {
      v43[0] = xmmword_22D805AD0;
      memset(&v43[1], 0, 48);
      *(_QWORD *)&v42 = 0x3100000A42;
      *((_QWORD *)&v42 + 1) = 1919168512;
      (*(void (**)(uint64_t, __int128 *, _QWORD))(a1 + 168))(a1, &v42, 0);
      v43[0] = xmmword_22D805AE0;
      memset(&v43[1], 0, 48);
      *(_QWORD *)&v42 = (8 * (v42 & 7)) | 0x3100000A42;
      *((_QWORD *)&v42 + 1) = 1919037440;
      (*(void (**)(uint64_t, __int128 *, _QWORD))(a1 + 168))(a1, &v42, 0);
      v43[0] = xmmword_22D805AF0;
      memset(&v43[1], 0, 48);
      *(_QWORD *)&v42 = (8 * (v42 & 7)) | 0x3100000A42;
      *((_QWORD *)&v42 + 1) = 1918971904;
      (*(void (**)(uint64_t, __int128 *, _QWORD))(a1 + 168))(a1, &v42, 0);
      v43[0] = xmmword_22D805B00;
      memset(&v43[1], 0, 48);
      *(_QWORD *)&v42 = (8 * (v42 & 7)) | 0x3100000A42;
      *((_QWORD *)&v42 + 1) = 1918939136;
      (*(void (**)(uint64_t, __int128 *, _QWORD))(a1 + 168))(a1, &v42, 0);
      v43[0] = xmmword_22D805B10;
      memset(&v43[1], 0, 48);
      *(_QWORD *)&v42 = (8 * (v42 & 7)) | 0x3100000A42;
      *((_QWORD *)&v42 + 1) = 0x1000072643000;
      (*(void (**)(uint64_t, __int128 *, _QWORD))(a1 + 168))(a1, &v42, 0);
      v43[0] = xmmword_22D805B20;
      memset(&v43[1], 0, 48);
      *(_QWORD *)&v42 = (8 * (v42 & 7)) | 0x3100000A42;
      *((_QWORD *)&v42 + 1) = 0x1000072623000;
      (*(void (**)(uint64_t, __int128 *, _QWORD))(a1 + 168))(a1, &v42, 0);
      v43[0] = xmmword_22D805B30;
      memset(&v43[1], 0, 48);
      *(_QWORD *)&v42 = (8 * (v42 & 7)) | 0x3100000A42;
      *((_QWORD *)&v42 + 1) = 0x1000072613000;
      (*(void (**)(uint64_t, __int128 *, _QWORD))(a1 + 168))(a1, &v42, 0);
      v43[0] = xmmword_22D805B40;
      memset(&v43[1], 0, 48);
      *(_QWORD *)&v42 = (8 * (v42 & 7)) | 0x3100000A42;
      *((_QWORD *)&v42 + 1) = 0x100007260B000;
    }
    else
    {
      v38 = xmmword_22D805A70;
      v11 = *(_QWORD *)(a1 + 32);
      v12 = *(_DWORD *)(v11 + 36);
      *(_DWORD *)(v11 + 36) = v12 + 1;
      DWORD2(v38) = v12;
      (*(void (**)(uint64_t, __int128 *))(a1 + 176))(a1, &v38);
      v43[0] = xmmword_22D805B50;
      memset(&v43[1], 0, 48);
      *(_QWORD *)&v42 = 0x3100000882;
      *((_QWORD *)&v42 + 1) = 1919389696;
      (*(void (**)(uint64_t, __int128 *, _QWORD))(a1 + 168))(a1, &v42, 0);
      memset((char *)&v43[1] + 8, 0, 40);
      v43[0] = xmmword_22D805B60;
      *(_QWORD *)&v43[1] = 1689664;
      *(_QWORD *)&v42 = (8 * (v42 & 7)) | 0x3100000FC3;
      *((_QWORD *)&v42 + 1) = 1919389696;
      (*(void (**)(uint64_t, __int128 *, _QWORD))(a1 + 168))(a1, &v42, 0);
      memset((char *)&v43[1] + 8, 0, 40);
      v43[0] = xmmword_22D805B70;
      *(_QWORD *)&v43[1] = 1689664;
      *(_QWORD *)&v42 = (8 * (v42 & 7)) | 0x3100000FC3;
      *((_QWORD *)&v42 + 1) = 1919389696;
      (*(void (**)(uint64_t, __int128 *, _QWORD))(a1 + 168))(a1, &v42, 0);
      memset((char *)&v43[1] + 8, 0, 40);
      v43[0] = xmmword_22D805B80;
      *(_QWORD *)&v43[1] = 1689664;
      *(_QWORD *)&v42 = (8 * (v42 & 7)) | 0x3100000FC3;
      *((_QWORD *)&v42 + 1) = 1919397888;
      (*(void (**)(uint64_t, __int128 *, _QWORD))(a1 + 168))(a1, &v42, 0);
      v43[0] = xmmword_22D805B90;
      memset(&v43[1], 0, 48);
      *(_QWORD *)&v42 = (8 * (v42 & 7)) | 0x3100000882;
      *((_QWORD *)&v42 + 1) = 1919389696;
      (*(void (**)(uint64_t, __int128 *, _QWORD))(a1 + 168))(a1, &v42, 0);
      memset((char *)&v43[1] + 8, 0, 40);
      v43[0] = xmmword_22D805BA0;
      *(_QWORD *)&v43[1] = 1689664;
      *(_QWORD *)&v42 = (8 * (v42 & 7)) | 0x3100000FC3;
      *((_QWORD *)&v42 + 1) = 1919389696;
      (*(void (**)(uint64_t, __int128 *, _QWORD))(a1 + 168))(a1, &v42, 0);
      memset((char *)&v43[1] + 8, 0, 40);
      v43[0] = xmmword_22D805BB0;
      *(_QWORD *)&v43[1] = 1689664;
      *(_QWORD *)&v42 = (8 * (v42 & 7)) | 0x3100000FC3;
      *((_QWORD *)&v42 + 1) = 1919389696;
      (*(void (**)(uint64_t, __int128 *, _QWORD))(a1 + 168))(a1, &v42, 0);
      memset((char *)&v43[1] + 8, 0, 40);
      v43[0] = xmmword_22D805BC0;
      *(_QWORD *)&v43[1] = 1689664;
      *(_QWORD *)&v42 = (8 * (v42 & 7)) | 0x3100000FC3;
      *((_QWORD *)&v42 + 1) = 0x100007267B000;
    }
    (*(void (**)(uint64_t, __int128 *, _QWORD))(a1 + 168))(a1, &v42, 0);
  }
  if (*(_BYTE *)(a1 + 381))
  {
    v42 = 0uLL;
    if (*(_BYTE *)(a1 + 383))
    {
      v13 = *(_DWORD *)(a1 + 316);
      if (v13 < 0)
      {
LABEL_23:
        v41 = xmmword_22D805BD0;
        (*(void (**)(uint64_t, __int128 *))(a1 + 208))(a1, &v41);
        v17 = *(_DWORD *)(a1 + 344);
        *(_DWORD *)(a1 + 344) = v17 + 1;
        v40 = xmmword_22D805BE0;
        DWORD2(v40) = v17;
        (*(void (**)(uint64_t, __int128 *))(a1 + 192))(a1, &v40);
        v18 = *(_DWORD *)(a1 + 344);
        *(_DWORD *)(a1 + 344) = v18 + 1;
        DWORD2(v40) = v18;
        *(_QWORD *)&v40 = v40 & 0xFFFFFFFFFFFFE0FFLL | 0x1A00;
        (*(void (**)(uint64_t, __int128 *))(a1 + 192))(a1, &v40);
        v19 = *(_DWORD *)(a1 + 344);
        *(_DWORD *)(a1 + 344) = v19 + 1;
        DWORD2(v40) = v19;
        *(_QWORD *)&v40 = v40 & 0xFFFFFFFFFFFFE0FFLL | 0x1B00;
        (*(void (**)(uint64_t, __int128 *))(a1 + 192))(a1, &v40);
        goto LABEL_24;
      }
      v14 = v13 + 1;
    }
    else
    {
      v14 = 2;
    }
    do
    {
      v42 = xmmword_22D805A70;
      v15 = *(_QWORD *)(a1 + 32);
      v16 = *(_DWORD *)(v15 + 36);
      *(_DWORD *)(v15 + 36) = v16 + 1;
      DWORD2(v42) = v16;
      (*(void (**)(uint64_t, __int128 *))(a1 + 176))(a1, &v42);
      --v14;
    }
    while (v14);
    goto LABEL_23;
  }
LABEL_24:
  if ((_DWORD)v2 == 3 || !(_DWORD)v2)
  {
    do
      v20 = PPParserParseStatement(a1);
    while (!(_DWORD)v20);
    v2 = v20;
  }
  if ((*(_BYTE *)(a1 + 379) & 2) != 0)
  {
    if ((_DWORD)v2 == 1)
      return 0;
  }
  else
  {
    if ((_DWORD)v2 == 6)
      LODWORD(v2) = PPParserParseEnd(a1);
    if ((_DWORD)v2 == 1)
      v2 = 46;
    else
      v2 = v2;
    if (!(_DWORD)v2)
    {
      if (!*(_BYTE *)(a1 + 381))
        goto LABEL_77;
      if (*(_BYTE *)(a1 + 383))
      {
        v21 = *(unsigned int *)(a1 + 316);
        if ((int)v21 < 1)
        {
LABEL_77:
          if ((*(_BYTE *)(a1 + 368) & 0x10) != 0 && (*(unsigned int (**)(uint64_t))(a1 + 248))(a1))
          {
            v2 = 27;
            goto LABEL_41;
          }
          if (!*(_DWORD *)(a1 + 80) && !*(_BYTE *)(a1 + 378))
          {
            v37 = **(_QWORD **)(*(_QWORD *)(a1 + 40) + 104);
            if (v37)
            {
              v2 = 0;
              *(_QWORD *)(v37 + 24) |= 0x4000uLL;
              *(_BYTE *)(a1 + 378) = 2;
              return v2;
            }
          }
          return 0;
        }
      }
      else
      {
        v21 = 1;
      }
      v22 = 0;
      while (1)
      {
        memset(v43, 0, sizeof(v43));
        v42 = 0u;
        if (((*(unsigned __int8 *)(a1 + 386) >> v22) & 1) != 0)
          break;
LABEL_76:
        v22 = (v22 + 1);
        if ((_DWORD)v22 == (_DWORD)v21)
          goto LABEL_77;
      }
      v23 = *(unsigned int **)(a1 + 136);
      if (v23)
      {
        v24 = *v23;
        if ((_DWORD)v24)
        {
          v25 = 0;
          v26 = v23 + 2;
          while (1)
          {
            v27 = (*(_QWORD *)&v26[2 * v25] & 0x1F00) == 0x400
               && ((*(_QWORD *)&v26[2 * v25] >> 33) & 7) == (_DWORD)v22;
            if (v27)
              break;
            if (v24 == ++v25)
              goto LABEL_56;
          }
          v24 = v25;
        }
      }
      else
      {
        v24 = 0;
      }
LABEL_56:
      v28 = *(_DWORD *)(a1 + 124);
      memset((char *)v43 + 8, 0, 56);
      *(_QWORD *)&v42 = (8 * (v28 & 7)) | 0x3100000001;
      *((_QWORD *)&v42 + 1) = (((unint64_t)(unsigned __int16)v24 << 48) | 0x72679000) + 0x2000;
      *(_QWORD *)&v43[0] = (v22 << 48) | 0x19C840;
      (*(void (**)(uint64_t, __int128 *, _QWORD))(a1 + 168))(a1, &v42, 0);
      v29 = *(unsigned __int8 *)(a1 + 381);
      switch(v29)
      {
        case 3:
          memset(&v43[1], 0, 48);
          v43[0] = xmmword_22D805BF0;
          *(_QWORD *)&v42 = (8 * (v42 & 7)) | 0x3100000882;
          *((_QWORD *)&v42 + 1) = ((unint64_t)(unsigned __int16)v21 << 48) | 0x72679000;
          (*(void (**)(uint64_t, __int128 *, _QWORD))(a1 + 168))(a1, &v42, 0);
          memset(&v43[1], 0, 48);
          *(_QWORD *)&v43[0] = ((unint64_t)(unsigned __int16)v21 << 48) | 0x19C840;
          *((_QWORD *)&v43[0] + 1) = *(_QWORD *)&v43[0];
          *(_QWORD *)&v42 = (8 * (v42 & 7)) | 0x3100000882;
          *((_QWORD *)&v42 + 1) = ((unint64_t)(unsigned __int16)v21 << 48) | 0x72679000;
          (*(void (**)(uint64_t, __int128 *, _QWORD))(a1 + 168))(a1, &v42, 0);
          memset((char *)v43 + 8, 0, 56);
          v32 = 8 * (v42 & 7);
          v33 = 0x100000401;
          break;
        case 2:
          v34 = *(unsigned __int8 *)(a1 + 385);
          if (!*(_BYTE *)(a1 + 385))
          {
            *((_QWORD *)&v42 + 1) = ((unint64_t)(unsigned __int16)v21 << 48) | 0x72679000;
            memset(v43, 0, sizeof(v43));
            *(_QWORD *)&v42 = (8 * (v42 & 7)) | 0x3100000081;
            (*(void (**)(uint64_t, __int128 *, _QWORD))(a1 + 168))(a1, &v42, 0);
            v34 = *(unsigned __int8 *)(a1 + 385);
          }
          memset(&v43[1], 0, 48);
          if (v34)
            v35 = 0;
          else
            v35 = ((unint64_t)(unsigned __int16)v21 << 48) | 0x19C840;
          *(_QWORD *)&v43[0] = v35;
          *((_QWORD *)&v43[0] + 1) = 0x2000000000080;
          *(_QWORD *)&v42 = (8 * (v42 & 7)) | 0x3100000882;
          *((_QWORD *)&v42 + 1) = ((unint64_t)(unsigned __int16)v21 << 48) | 0x72679000;
          (*(void (**)(uint64_t, __int128 *, _QWORD))(a1 + 168))(a1, &v42, 0);
          memset((char *)v43 + 8, 0, 56);
          v32 = 8 * (v42 & 7);
          *(_QWORD *)&v42 = v32 | 0x100000401;
          if (!*(_BYTE *)(a1 + 385))
          {
LABEL_73:
            *(_QWORD *)&v43[0] = (v21 << 48) | 0x50;
            goto LABEL_74;
          }
          v33 = 0x80100000401;
          break;
        case 1:
          v30 = *(unsigned __int8 *)(a1 + 385);
          if (!*(_BYTE *)(a1 + 385))
          {
            *((_QWORD *)&v42 + 1) = ((unint64_t)(unsigned __int16)v21 << 48) | 0x72679000;
            memset(v43, 0, sizeof(v43));
            *(_QWORD *)&v42 = (8 * (v42 & 7)) | 0x3100000081;
            (*(void (**)(uint64_t, __int128 *, _QWORD))(a1 + 168))(a1, &v42, 0);
            v30 = *(unsigned __int8 *)(a1 + 385);
          }
          memset((char *)&v43[1] + 8, 0, 40);
          v27 = v30 == 0;
          v31 = ((unint64_t)(unsigned __int16)v21 << 48) | 0x19C850;
          if (!v27)
            v31 = 16;
          *(_QWORD *)&v42 = (8 * (v42 & 7)) | 0x83100000FC3;
          *(_QWORD *)&v43[0] = v31;
          *(_OWORD *)((char *)v43 + 8) = xmmword_22D805C00;
LABEL_74:
          *((_QWORD *)&v42 + 1) = ((unint64_t)(unsigned __int16)v21 << 48) | 0x72679000;
          (*(void (**)(uint64_t, __int128 *, _QWORD))(a1 + 168))(a1, &v42, 0);
          goto LABEL_75;
        default:
LABEL_75:
          memset((char *)&v43[1] + 8, 0, 40);
          *(_QWORD *)&v43[0] = ((unint64_t)(unsigned __int16)v21 << 48) | 0x19C840;
          *((_QWORD *)&v43[0] + 1) = (v22 << 48) | 0x19C840;
          *(_QWORD *)&v43[1] = 1689728;
          *(_QWORD *)&v42 = (8 * (v42 & 7)) | 0x3100000F03;
          *((_QWORD *)&v42 + 1) = (v24 << 48) | 0x72673000;
          (*(void (**)(uint64_t, __int128 *, _QWORD))(a1 + 168))(a1, &v42, 0);
          goto LABEL_76;
      }
      *(_QWORD *)&v42 = v32 | v33;
      goto LABEL_73;
    }
  }
  if ((_DWORD)v2 != 2)
LABEL_41:
    PPParserBuildErrorString(a1, v2, 0);
  return v2;
}

uint64_t PPParserBuildErrorString(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  char v7;
  char v8[256];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v7 = 0;
  PPParserReturnPart(a1);
  PPParserGetPart(a1, v8, 0);
  PPParserReturnCharacter(a1, &v7);
  PPParserGetCharacter(a1, &v7);
  v5 = (char *)(a1 + 392);
  if (a3)
    return sprintf_l(v5, 0, "Error in macro %s on line %u: %s (hint: '%s')");
  else
    return sprintf_l(v5, 0, "Error on line %u: %s (hint: '%s')");
}

__n128 PPParserInherit(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)(a1 + 84) = *(_QWORD *)(a2 + 84);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 360) = *(_DWORD *)(a2 + 360);
  result = *(__n128 *)(a2 + 344);
  *(__n128 *)(a1 + 344) = result;
  return result;
}

uint64_t PPParserParseVersion(uint64_t a1)
{
  int v3;
  uint64_t v4;
  _QWORD v7[33];

  v7[32] = *MEMORY[0x24BDAC8D0];
  if (!PPParserGetPart(a1, (char *)v7, 0))
    return 4;
  if ((*(_BYTE *)(a1 + 368) & 2) != 0)
  {
    if (v7[0] != 0x3170664252412121 || *(_QWORD *)((char *)v7 + 3) != 0x302E3170664252)
      return 4;
    v4 = 34820;
    v3 = 2;
  }
  else
  {
    if (v7[0] != 0x3170764252412121 || *(_QWORD *)((char *)v7 + 3) != 0x302E3170764252)
      return 4;
    v3 = 0;
    v4 = 34336;
  }
  *(_DWORD *)(a1 + 368) = v3;
  (*(void (**)(uint64_t, uint64_t))(a1 + 160))(a1, v4);
  return 0;
}

uint64_t PPParserParseOption(uint64_t a1)
{
  uint64_t result;
  char v4[256];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  if (!PPParserGetPart(a1, v4, 0))
    return 1;
  if (*(_DWORD *)v4 == 1230262351 && *(_DWORD *)&v4[3] == 5132105)
  {
    result = PPParserParseOptionIdentifier(a1);
    if (!(_DWORD)result)
    {
      if (PPParserGetPart(a1, v4, 0))
      {
        if (v4[0] == 59)
          return 0;
        else
          return 30;
      }
      else
      {
        return 46;
      }
    }
  }
  else
  {
    PPParserReturnPart(a1);
    return 3;
  }
  return result;
}

uint64_t PPParserParseStatement(uint64_t a1)
{
  uint64_t Part;
  uint64_t v3;
  int v5;
  uint64_t result;
  int v8;
  char **v14;
  uint64_t v15;
  int v16;
  char **v17;
  char **v18;
  int v19;
  const char *v20;
  char **v21;
  int v22;
  int v23;
  const char *v24;
  int v25;
  uint64_t Macro;
  char v27;
  char v28;
  char v29;
  int v30;
  uint64_t v31;
  int v32;
  char __s2[16];
  char __s1[8];
  char **v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  Part = PPParserGetPart(a1, __s1, 0);
  if (!(_DWORD)Part)
    return 1;
  v3 = Part;
  if ((*(_BYTE *)(a1 + 368) & 0x22) == 0)
  {
LABEL_8:
    v5 = 0;
    goto LABEL_12;
  }
  if (*(_DWORD *)__s1 ^ 0x474E4F4C | __s1[4])
  {
    if (*(_DWORD *)__s1 != 1380927571 || *(unsigned __int16 *)&__s1[4] != 84)
      goto LABEL_8;
    v5 = 2;
  }
  else
  {
    v5 = 1;
  }
  v3 = PPParserGetPart(a1, __s1, 0);
  if (!(_DWORD)v3)
    return 1;
LABEL_12:
  if (!(*(_DWORD *)__s1 ^ 0x504D4554 | __s1[4]))
    return PPParserParseTempDeclaration(a1, v5);
  if (*(_DWORD *)__s1 == 1347704143 && *(_DWORD *)&__s1[3] == 5526864)
    return PPParserParseOutputDeclaration(a1, v5);
  if (v5)
    return 43;
  v8 = *(_DWORD *)(a1 + 368);
  if ((v8 & 2) == 0 && *(_QWORD *)__s1 == 0x53534552444441)
    return PPParserParseAddressDeclaration(a1);
  if (*(_DWORD *)__s1 == 1095909712 && *(unsigned __int16 *)&__s1[4] == 77)
    return PPParserParseParameterDeclaration(a1);
  if (*(_DWORD *)__s1 == 1381258305 && *(_DWORD *)&__s1[3] == 4344146)
    return PPParserParseAttributeDeclaration(a1);
  if (*(_DWORD *)__s1 == 1095322689 && *(unsigned __int16 *)&__s1[4] == 83)
    return PPParserParseAliasDeclaration(a1);
  if (*(_DWORD *)__s1 == 1380139341 && *(unsigned __int16 *)&__s1[4] == 79)
    return PPParserParseMacroDeclaration((_QWORD *)a1);
  if (*(_DWORD *)__s1 == 1129270338 && *(unsigned __int16 *)&__s1[4] == 75)
    return PPParserParseBlock(a1);
  v37 = 0u;
  v38 = 0u;
  v14 = &OpsList_ARBfp10;
  if ((v8 & 2) == 0)
    v14 = &OpsList_ARBvp10;
  v36 = v14;
  v15 = 1;
  v16 = 2;
  v17 = &OpsList_NVvp20;
  switch(v8)
  {
    case '1':
      goto LABEL_58;
    case '3':
      v17 = &OpsList_NVfp10;
      v15 = 1;
      goto LABEL_58;
    case '4':
      *(_QWORD *)&v37 = &OpsList_NVvp20;
      v16 = 3;
      v17 = &OpsList_NVvp30;
      goto LABEL_57;
    case '6':
      *(_QWORD *)&v37 = &OpsList_NVfp10;
      v16 = 3;
      v17 = &OpsList_NVfp20;
LABEL_57:
      v15 = 2;
LABEL_58:
      (&v36)[v15] = v17;
      LODWORD(v15) = v16;
      break;
    default:
      break;
  }
  if ((*(_BYTE *)(a1 + 380) & 2) != 0)
  {
    if ((v8 & 2) != 0)
      v18 = &OpsList_fpSpecial;
    else
      v18 = &OpsList_vpSpecial;
    (&v36)[v15] = v18;
    LODWORD(v15) = v15 + 1;
  }
  v19 = 0;
  (&v36)[v15] = 0;
  while (1)
  {
    v20 = *v14;
    if (*v14)
      break;
LABEL_102:
    v14 = (&v36)[++v19];
    if (!v14)
    {
      if ((*(_BYTE *)(a1 + 368) & 0x10) == 0 || (result = PPParserParseLabel(a1, __s1, v3), (_DWORD)result == 3))
      {
        Macro = PPParserScopeFindMacro(*(_QWORD *)(a1 + 32), __s1);
        if (Macro)
        {
          return PPParserExpandMacro(a1, Macro);
        }
        else if (*(_DWORD *)__s1 == 1230262351 && *(_DWORD *)&__s1[3] == 5132105)
        {
          return 8;
        }
        else
        {
          PPParserReturnPart(a1);
          return 6;
        }
      }
      return result;
    }
  }
  v21 = v14 + 1;
  while (1)
  {
    if (!strcmp(__s1, v20))
    {
      v30 = *(_DWORD *)v21;
      v31 = a1;
      v32 = 0;
      goto LABEL_108;
    }
    v22 = *(_DWORD *)(a1 + 368);
    if ((v22 & 0x10) != 0)
    {
      sprintf_l(__s2, 0, "%sC", v20);
      if (!strcmp(__s1, __s2))
        goto LABEL_109;
      v22 = *(_DWORD *)(a1 + 368);
      if (v22 == 52)
        break;
    }
LABEL_78:
    if ((v22 & 2) != 0)
    {
      sprintf_l(__s2, 0, "%s_SAT", *(v21 - 1));
      if (!strcmp(__s1, __s2))
      {
LABEL_112:
        v30 = *(_DWORD *)v21;
        v31 = a1;
        v32 = 0;
        goto LABEL_113;
      }
      if ((*(_BYTE *)(a1 + 368) & 0x10) != 0)
      {
        sprintf_l(__s2, 0, "%sC_SAT", *(v21 - 1));
        if (!strcmp(__s1, __s2))
          goto LABEL_114;
        v23 = strlen(__s1);
        v24 = *(v21 - 1);
        v25 = strlen(v24);
        if (v25 + 1 == v23)
        {
          sprintf_l(__s2, 0, "%sR", v24);
          if (!strcmp(__s1, __s2))
          {
            v30 = *(_DWORD *)v21;
            v31 = a1;
            v32 = 1;
            goto LABEL_108;
          }
          sprintf_l(__s2, 0, "%sH", *(v21 - 1));
          if (!strcmp(__s1, __s2))
          {
            v30 = *(_DWORD *)v21;
            v31 = a1;
            v32 = 2;
            goto LABEL_108;
          }
          sprintf_l(__s2, 0, "%sX", *(v21 - 1));
          if (!strcmp(__s1, __s2))
          {
            v30 = *(_DWORD *)v21;
            v31 = a1;
            v32 = 3;
LABEL_108:
            v27 = 0;
LABEL_111:
            v28 = 0;
            goto LABEL_117;
          }
        }
        else
        {
          if (v25 + 2 != v23)
          {
            if (v25 + 5 == v23)
            {
              sprintf_l(__s2, 0, "%sR_SAT", v24);
              if (!strcmp(__s1, __s2))
              {
                v30 = *(_DWORD *)v21;
                v31 = a1;
                v32 = 1;
                goto LABEL_113;
              }
              sprintf_l(__s2, 0, "%sH_SAT", *(v21 - 1));
              if (!strcmp(__s1, __s2))
              {
                v30 = *(_DWORD *)v21;
                v31 = a1;
                v32 = 2;
                goto LABEL_113;
              }
              sprintf_l(__s2, 0, "%sX_SAT", *(v21 - 1));
              if (!strcmp(__s1, __s2))
              {
                v30 = *(_DWORD *)v21;
                v31 = a1;
                v32 = 3;
LABEL_113:
                v27 = 0;
                goto LABEL_116;
              }
            }
            else if (v25 + 6 == v23)
            {
              sprintf_l(__s2, 0, "%sRC_SAT", v24);
              if (!strcmp(__s1, __s2))
              {
                v30 = *(_DWORD *)v21;
                v31 = a1;
                v32 = 1;
                goto LABEL_115;
              }
              sprintf_l(__s2, 0, "%sHC_SAT", *(v21 - 1));
              if (!strcmp(__s1, __s2))
              {
                v30 = *(_DWORD *)v21;
                v31 = a1;
                v32 = 2;
                goto LABEL_115;
              }
              sprintf_l(__s2, 0, "%sXC_SAT", *(v21 - 1));
              if (!strcmp(__s1, __s2))
              {
                v30 = *(_DWORD *)v21;
                v31 = a1;
                v32 = 3;
LABEL_115:
                v27 = 1;
LABEL_116:
                v28 = 1;
LABEL_117:
                v29 = 0;
                return PPParserParseOperation(v31, v30, v32, v27, v28, v29);
              }
            }
            goto LABEL_101;
          }
          sprintf_l(__s2, 0, "%sRC", v24);
          if (!strcmp(__s1, __s2))
          {
            v30 = *(_DWORD *)v21;
            v31 = a1;
            v32 = 1;
LABEL_110:
            v27 = 1;
            goto LABEL_111;
          }
          sprintf_l(__s2, 0, "%sHC", *(v21 - 1));
          if (!strcmp(__s1, __s2))
          {
            v30 = *(_DWORD *)v21;
            v31 = a1;
            v32 = 2;
            goto LABEL_110;
          }
          sprintf_l(__s2, 0, "%sXC", *(v21 - 1));
          if (!strcmp(__s1, __s2))
          {
            v30 = *(_DWORD *)v21;
            v31 = a1;
            v32 = 3;
            goto LABEL_110;
          }
        }
      }
    }
LABEL_101:
    v20 = v21[1];
    v21 += 2;
    if (!v20)
      goto LABEL_102;
  }
  sprintf_l(__s2, 0, "%sC0", *(v21 - 1));
  if (!strcmp(__s1, __s2))
  {
LABEL_109:
    v30 = *(_DWORD *)v21;
    v31 = a1;
    v32 = 0;
    goto LABEL_110;
  }
  sprintf_l(__s2, 0, "%sC1", *(v21 - 1));
  if (strcmp(__s1, __s2))
  {
    sprintf_l(__s2, 0, "%s_SAT", *(v21 - 1));
    if (!strcmp(__s1, __s2))
      goto LABEL_112;
    sprintf_l(__s2, 0, "%sC_SAT", *(v21 - 1));
    if (!strcmp(__s1, __s2) || (sprintf_l(__s2, 0, "%sC0_SAT", *(v21 - 1)), !strcmp(__s1, __s2)))
    {
LABEL_114:
      v30 = *(_DWORD *)v21;
      v31 = a1;
      v32 = 0;
      goto LABEL_115;
    }
    sprintf_l(__s2, 0, "%sC1_SAT", *(v21 - 1));
    if (!strcmp(__s1, __s2))
    {
      v30 = *(_DWORD *)v21;
      v31 = a1;
      v32 = 0;
      v27 = 1;
      v28 = 1;
      goto LABEL_121;
    }
    v22 = *(_DWORD *)(a1 + 368);
    goto LABEL_78;
  }
  v30 = *(_DWORD *)v21;
  v31 = a1;
  v32 = 0;
  v27 = 1;
  v28 = 0;
LABEL_121:
  v29 = 1;
  return PPParserParseOperation(v31, v30, v32, v27, v28, v29);
}

uint64_t PPParserParseEnd(uint64_t a1)
{
  char v3[256];
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  if (!PPParserGetPart(a1, v3, 0))
    return 46;
  if (*(_DWORD *)v3 != 4476485)
    return 6;
  if (PPParserGetPart(a1, v3, 0))
    return 9;
  return 0;
}

uint64_t glpARBProgramInfoToLLVMModule(uint64_t a1, uint64_t a2)
{
  int v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  __int128 *v15;
  char *v16;
  _DWORD *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  int *v27;
  uint64_t v28;
  int *v29;
  __int16 v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  int *v38;
  uint64_t v39;
  int *v40;
  int v41;
  int v42;
  int v43;
  char v44;
  uint64_t v45;
  int v46;
  char v47;
  uint64_t v48;
  unsigned int *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _BYTE v54[4];
  int v55;
  int *v56;
  _BYTE *v57;
  uint64_t v58;
  _QWORD *v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;

  v77 = *MEMORY[0x24BDAC8D0];
  v60 = *(_DWORD *)(a2 + 4);
  v4 = *(_DWORD *)(a2 + 74);
  v5 = *(_QWORD *)(a2 + (v4 + 79));
  LODWORD(v59) = *(unsigned __int16 *)(a2 + 8);
  v6 = *(unsigned int *)(a2 + (v4 + 87));
  v7 = 8 * v6;
  v8 = (unsigned int *)malloc_type_malloc(8 * v6 + 8, 0x1B2F740uLL);
  if (!v8)
    goto LABEL_42;
  v9 = v8;
  v58 = a1;
  v10 = (v4 + 91);
  *v8 = v6;
  memcpy(v8 + 2, (const void *)(a2 + v10), 8 * v6);
  v11 = v10 + v7;
  v12 = *(unsigned int *)(a2 + (v10 + v7));
  v13 = (unsigned int *)malloc_type_malloc(8 * v12 + 8, 0x1B2F740uLL);
  if (!v13)
LABEL_42:
    abort();
  v14 = v13;
  v15 = (__int128 *)(a2 + 10);
  v16 = (char *)(a2 + 78);
  *v13 = v12;
  memcpy(v13 + 2, (const void *)(a2 + (v11 + 4)), 8 * v12);
  v75 = 0u;
  v76 = 0u;
  v73 = 0u;
  v74 = 0u;
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v67 = 0u;
  v68 = 0u;
  v65 = 0u;
  v66 = 0u;
  v63 = 0u;
  v64 = 0u;
  v61 = 0;
  v62 = 0;
  v17 = PPParserCreate(v60);
  *((_WORD *)v17 + 188) = (_WORD)v59;
  v18 = v15[3];
  v20 = *v15;
  v19 = v15[1];
  *((_OWORD *)v17 + 18) = v15[2];
  *((_OWORD *)v17 + 19) = v18;
  *((_OWORD *)v17 + 16) = v20;
  *((_OWORD *)v17 + 17) = v19;
  PPParserAttachString((uint64_t)v17, v16, 0);
  v57 = v54;
  *((_QWORD *)v17 + 7) = 0;
  v59 = v17 + 14;
  *((_QWORD *)v17 + 8) = &v62;
  *((_QWORD *)v17 + 9) = &v61;
  v17[20] = 1;
  *((_QWORD *)v17 + 20) = llvmir_PPStreamSetTarget;
  *((_QWORD *)v17 + 21) = llvmir_PPStreamAddOperation;
  *((_QWORD *)v17 + 22) = llvmir_PPStreamAddTempUsage;
  *((_QWORD *)v17 + 23) = llvmir_PPStreamAddAddressUsage;
  *((_QWORD *)v17 + 24) = llvmir_PPStreamAddParamBinding;
  *((_QWORD *)v17 + 25) = llvmir_PPStreamAddParamBindingArray;
  *((_QWORD *)v17 + 26) = llvmir_PPStreamAddAttribBinding;
  *((_QWORD *)v17 + 27) = llvmir_PPStreamAddOutputBinding;
  *((_QWORD *)v17 + 28) = llvmir_PPStreamAddOption;
  *((_QWORD *)v17 + 29) = llvmir_PPStreamAddConstant;
  *((_QWORD *)v17 + 30) = llvmir_PPStreamAddLabel;
  *((_QWORD *)v17 + 31) = llvmir_PPStreamResolveBranches;
  v55 = v17[71];
  v21 = v17[68];
  v22 = v17[69];
  v23 = *v9;
  MEMORY[0x24BDAC7A8](v24);
  v26 = (int *)&v54[-((v25 + 15) & 0x7FFFFFFF0)];
  if ((_DWORD)v23)
  {
    v27 = (int *)(v9 + 2);
    v28 = v23;
    v29 = v26;
    while (1)
    {
      v31 = *v27;
      v27 += 2;
      v30 = v31;
      v32 = v31 >> 6;
      if (!(v31 >> 6))
        break;
      if (v32 == 3)
      {
        v33 = 7;
LABEL_9:
        *v29 = v33;
      }
      if ((v30 & 0x1F00) == 0xB00)
        *v29 = 0;
      ++v29;
      if (!--v28)
        goto LABEL_13;
    }
    v33 = 4;
    goto LABEL_9;
  }
LABEL_13:
  v56 = v26;
  free(v9);
  v34 = *v14;
  MEMORY[0x24BDAC7A8](v35);
  v37 = (int *)&v54[-((v36 + 15) & 0x7FFFFFFF0)];
  if ((_DWORD)v34)
  {
    v38 = (int *)(v14 + 2);
    v39 = v34;
    v40 = v37;
    while (1)
    {
      v41 = *v38;
      v38 += 2;
      v42 = v41 >> 6;
      if (!(v41 >> 6))
        break;
      if (v42 == 3)
      {
        v43 = 7;
LABEL_19:
        *v40 = v43;
      }
      ++v40;
      if (!--v39)
        goto LABEL_21;
    }
    v43 = 4;
    goto LABEL_19;
  }
LABEL_21:
  free(v14);
  gleLLVMInitBuildContext((uint64_t)&v63, v58, (uint64_t)"ARB_Program", v55, v21, v22, v23, v34, 0, 16);
  v44 = 0;
  v45 = 0;
  v46 = 0;
  LODWORD(v63) = (v60 >> 1) & 1;
  *((_QWORD *)&v74 + 1) = v17;
  *(_QWORD *)&v75 = glpARBProgram_OutputToFunction;
  *((_QWORD *)&v75 + 1) = glpARBProgram_AttribToFunction;
  *(_QWORD *)&v76 = glpARBProgram_ParamCountFunction;
  *((_QWORD *)&v76 + 1) = 0x100000001;
  *((_QWORD *)v17 + 6) = &v63;
  while (2)
  {
    v47 = 0;
    v48 = 0;
    switch((v5 >> v44) & 0xF)
    {
      case 0uLL:
        v48 = 0;
        v47 = 1;
        goto LABEL_34;
      case 1uLL:
        v48 = 0;
        v47 = 2;
        goto LABEL_34;
      case 2uLL:
        v48 = 0;
        goto LABEL_29;
      case 3uLL:
        v48 = 0;
        goto LABEL_31;
      case 4uLL:
        v48 = 0;
        goto LABEL_33;
      case 5uLL:
        v48 = 1;
LABEL_29:
        v47 = 3;
        goto LABEL_34;
      case 6uLL:
        v48 = 1;
LABEL_31:
        v47 = 4;
        goto LABEL_34;
      case 7uLL:
        v48 = 1;
LABEL_33:
        v47 = 5;
        goto LABEL_34;
      case 8uLL:
      case 9uLL:
      case 0xAuLL:
      case 0xBuLL:
      case 0xCuLL:
      case 0xDuLL:
      case 0xEuLL:
        goto LABEL_34;
      case 0xFuLL:
        goto LABEL_35;
      default:
        v48 = 0;
LABEL_34:
        ++v46;
        gleLLVMAddTexture((uint64_t)&v63, v45, v47, v48, v48);
LABEL_35:
        ++v45;
        v44 += 4;
        if (v45 != 16)
          continue;
        gleLLVMBeginMain(*((_QWORD *)v17 + 6), (uint64_t)"#main", v56, v23, v37, v34, v46);
        PPParserParse((uint64_t)v17);
        v49 = (unsigned int *)*((_QWORD *)v17 + 13);
        if (v49)
          v50 = *v49;
        else
          v50 = 0;
        glpARBProgram_GenerateMetadata((uint64_t)v17, v46);
        gleLLVMFinishMain((uint64_t)&v63, v50, v46);
        v51 = *((_QWORD *)&v64 + 1);
        *((_QWORD *)&v64 + 1) = 0;
        gleLLVMDestroyBuildContext((uint64_t)&v63);
        v52 = v59;
        *v59 = 0;
        v52[1] = 0;
        v52[2] = 0;
        v17[20] = 1;
        *((_QWORD *)v17 + 20) = llvmir_PPStreamSetTarget;
        *((_QWORD *)v17 + 21) = llvmir_PPStreamAddOperation;
        *((_QWORD *)v17 + 22) = llvmir_PPStreamAddTempUsage;
        *((_QWORD *)v17 + 23) = llvmir_PPStreamAddAddressUsage;
        *((_QWORD *)v17 + 24) = llvmir_PPStreamAddParamBinding;
        *((_QWORD *)v17 + 25) = llvmir_PPStreamAddParamBindingArray;
        *((_QWORD *)v17 + 26) = llvmir_PPStreamAddAttribBinding;
        *((_QWORD *)v17 + 27) = llvmir_PPStreamAddOutputBinding;
        *((_QWORD *)v17 + 28) = llvmir_PPStreamAddOption;
        *((_QWORD *)v17 + 29) = llvmir_PPStreamAddConstant;
        *((_QWORD *)v17 + 30) = llvmir_PPStreamAddLabel;
        *((_QWORD *)v17 + 31) = llvmir_PPStreamResolveBranches;
        PPParserFree((uint64_t)v17);
        return v51;
    }
  }
}

uint64_t glpARBProgram_OutputToFunction(uint64_t result, int a2, _DWORD *a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;

  v6 = *(_QWORD **)(result + 48);
  v7 = *(_QWORD *)(*(_QWORD *)(result + 136) + 8 * a2 + 8);
  if (!v6[20])
  {
    result = MEMORY[0x22E316E2C](v6[21]);
    v6[20] = result;
  }
  if ((v7 & 0xC0) == 0)
  {
    if (!v6[19])
      v6[19] = LLVMInt32TypeInContext();
    LLVMConstInt();
    result = LLVMBuildExtractElement();
    a4 = result;
  }
  if (a4)
  {
    result = LLVMBuildInsertValue();
    v6[20] = result;
    ++*a3;
  }
  return result;
}

uint64_t glpARBProgram_AttribToFunction(uint64_t a1, int a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a1 + 144) + 8 * a2 + 8) & 0x1F00) != 0xB00)
    return 0;
  LLVMGetParam();
  LLVMFloatTypeInContext();
  llvm::ConstantFP::get();
  llvm::ConstantFP::get();
  llvm::ConstantFP::get();
  llvm::ConstantFP::get();
  LLVMConstVector();
  llvm::ConstantFP::get();
  llvm::ConstantFP::get();
  llvm::ConstantFP::get();
  llvm::ConstantFP::get();
  LLVMConstVector();
  return LLVMBuildSelect();
}

uint64_t glpARBProgram_ParamCountFunction(uint64_t a1)
{
  return gleLLVMGetConstantInt32(*(_QWORD *)(a1 + 48));
}

uint64_t glpARBProgram_GenerateMetadata(uint64_t a1, int a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  int *v8;
  int v9;
  int v10;
  int v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v2 = a2;
  v17 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 144))
  {
    a1 = MEMORY[0x24BDAC7A8]();
    v6 = (char *)&v16 - v5;
    if ((_DWORD)v3)
    {
      v7 = 0;
      v8 = (int *)(v4 + 8);
      while (1)
      {
        v9 = *v8;
        v8 += 2;
        v10 = v9 >> 6;
        if (!(v9 >> 6))
          break;
        if (v10 == 3)
        {
          v11 = 7;
LABEL_8:
          *(_DWORD *)&v6[v7] = v11;
        }
        v7 += 4;
        if (4 * v3 == v7)
          goto LABEL_12;
      }
      v11 = 4;
      goto LABEL_8;
    }
  }
  else
  {
    LODWORD(v3) = 0;
    v6 = (char *)&v16 + 4;
  }
LABEL_12:
  v12 = *(unsigned int **)(a1 + 136);
  if (v12)
  {
    v13 = *v12;
    if ((_DWORD)v13)
    {
      v14 = *v12;
      do
        --v14;
      while (v14);
    }
  }
  else
  {
    v13 = 0;
  }
  if (**(_DWORD **)(a1 + 48))
    return glpFragProgram_GenerateMetadata((_QWORD *)a1, (uint64_t)v6, v3, v13, v2);
  else
    return glpVertProgram_GenerateMetadata(a1, (uint64_t)v6, v3, v13, v2);
}

uint64_t GLDAttribBindingsAddAttribBinding(int **a1, uint64_t *a2)
{
  int *v4;
  int v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t result;

  v4 = *a1;
  if (v4)
    v5 = *v4;
  else
    v5 = 0;
  v6 = malloc_type_realloc(v4, 8 * (v5 + 1) + 8, 0xD9DAF1EDuLL);
  if (!v6)
    abort();
  v7 = v6;
  *a1 = v6;
  *v6 = v5 + 1;
  result = GLDAttribBindingForPPStreamToken(*a2);
  *(_QWORD *)&v7[2 * v5 + 2] = result;
  return result;
}

int *PPParserOutputBindingsAddOutputBinding(int **a1, _QWORD *a2)
{
  int *v4;
  int v5;
  int *result;

  v4 = *a1;
  if (v4)
    v5 = *v4;
  else
    v5 = 0;
  result = (int *)malloc_type_realloc(v4, 8 * (v5 + 1) + 8, 0xD9DAF1EDuLL);
  if (!result)
    abort();
  *a1 = result;
  *result = v5 + 1;
  *(_QWORD *)&result[2 * v5 + 2] = *a2;
  return result;
}

char *PPParserLabelsAddLabel(int **a1, const char *a2, unsigned int a3)
{
  int *v6;
  int v7;
  _DWORD *v8;
  _DWORD *v9;
  char *result;

  v6 = *a1;
  if (v6)
    v7 = *v6;
  else
    v7 = 0;
  v8 = malloc_type_realloc(v6, 8 * (v7 + 1) + 8, 0xD9DAF1EDuLL);
  if (!v8)
    abort();
  v9 = v8;
  *a1 = v8;
  *v8 = v7 + 1;
  result = strndup(a2, a3);
  *(_QWORD *)&v9[2 * v7 + 2] = result;
  return result;
}

uint64_t glpFragProgram_GenerateMetadata(_QWORD *a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  _BYTE *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  const char *v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int *v23;
  uint64_t v24;
  int v25;
  size_t v26;
  uint64_t v27;
  _BYTE *v28;
  size_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v36[12];
  unsigned int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  char __str[32];
  uint64_t v48;

  v41 = a4;
  v48 = *MEMORY[0x24BDAC8D0];
  v8 = a1[6];
  v39 = a5;
  v37 = (2 * a5) | 1;
  v38 = v37 + a3;
  v9 = 8 * v38;
  MEMORY[0x24BDAC7A8]();
  v11 = &v36[-v10];
  if ((unint64_t)(8 * v38) >= 0x200)
    v12 = 512;
  else
    v12 = 8 * v38;
  bzero(v11, v12);
  bzero(v11, v9);
  LODWORD(v40) = a3;
  if (a3 >= 1)
  {
    v13 = 0;
    v14 = v40;
    v15 = 8;
    do
    {
      v16 = (unsigned int *)(a1[18] + v15);
      v17 = *v16;
      v18 = v16[1];
      v19 = gleLLVMGetArgTypeName(*(_DWORD *)(a2 + 4 * v13));
      v20 = 0;
      v21 = (v17 >> 8) & 0x1F;
      if (v21 > 0xA)
      {
        if (v21 == 11)
        {
          if (*(_DWORD *)(v8 + 220))
          {
            v42 = 0u;
            v43 = 0u;
            *(_QWORD *)&v42 = gleLLVMGetConstantInt32(v8);
            *((_QWORD *)&v42 + 1) = LLVMMDStringInContext();
            *(_QWORD *)&v43 = LLVMMDStringInContext();
            strlen(v19);
            *((_QWORD *)&v43 + 1) = LLVMMDStringInContext();
          }
          else
          {
            v42 = 0uLL;
            *(_QWORD *)&v42 = gleLLVMGetConstantInt32(v8);
            *((_QWORD *)&v42 + 1) = LLVMMDStringInContext();
          }
          goto LABEL_33;
        }
        if (v21 == 28)
        {
LABEL_12:
          memset(__str, 0, sizeof(__str));
          switch(v21)
          {
            case 0x1Cu:
              v22 = v18 & 0x3F;
              if ((v18 & 0x38) == 8)
              {
                if (!*(_DWORD *)(v8 + 220))
                  goto LABEL_30;
                snprintf(__str, 0x1FuLL, "user(tex_coord%u)", v22 - 8);
              }
              break;
            case 3u:
              if (*(_DWORD *)(v8 + 220))
              {
                strcpy(__str, "user(sec_front_color)");
                v22 = 3;
                goto LABEL_26;
              }
LABEL_30:
              v43 = 0u;
              v44 = 0u;
              v42 = 0u;
              *(_QWORD *)&v42 = gleLLVMGetConstantInt32(v8);
              *((_QWORD *)&v42 + 1) = LLVMMDStringInContext();
              *(_QWORD *)&v43 = LLVMMDStringInContext();
              if (!*(_QWORD *)(v8 + 152))
                *(_QWORD *)(v8 + 152) = LLVMInt32TypeInContext();
              *((_QWORD *)&v43 + 1) = LLVMConstInt();
              *(_QWORD *)&v44 = LLVMMDStringInContext();
              *((_QWORD *)&v44 + 1) = LLVMMDStringInContext();
              goto LABEL_33;
            case 2u:
              if (*(_DWORD *)(v8 + 220))
              {
                strcpy(__str, "user(front_color)");
                v22 = 2;
LABEL_26:
                if (!__str[0])
                  snprintf(__str, 0x1FuLL, "user(slot%u)", v22);
                v46 = 0;
                v44 = 0u;
                v45 = 0u;
                v42 = 0u;
                v43 = 0u;
                *(_QWORD *)&v42 = gleLLVMGetConstantInt32(v8);
                *((_QWORD *)&v42 + 1) = LLVMMDStringInContext();
                strlen(__str);
                *(_QWORD *)&v43 = LLVMMDStringInContext();
                *((_QWORD *)&v43 + 1) = LLVMMDStringInContext();
                *(_QWORD *)&v44 = LLVMMDStringInContext();
                *((_QWORD *)&v44 + 1) = LLVMMDStringInContext();
                strlen(v19);
                *(_QWORD *)&v45 = LLVMMDStringInContext();
                *((_QWORD *)&v45 + 1) = LLVMMDStringInContext();
                strlen(__str);
                v46 = LLVMMDStringInContext();
                goto LABEL_33;
              }
              goto LABEL_30;
            default:
              v22 = 0;
              break;
          }
          if (*(_DWORD *)(v8 + 220))
            goto LABEL_26;
          goto LABEL_30;
        }
      }
      else
      {
        if (v21 - 2 < 2)
          goto LABEL_12;
        if (v21 == 1)
        {
          v44 = 0u;
          v45 = 0u;
          v42 = 0u;
          v43 = 0u;
          *(_QWORD *)&v42 = gleLLVMGetConstantInt32(v8);
          *((_QWORD *)&v42 + 1) = LLVMMDStringInContext();
          *(_QWORD *)&v43 = LLVMMDStringInContext();
          *((_QWORD *)&v43 + 1) = LLVMMDStringInContext();
          *(_QWORD *)&v44 = LLVMMDStringInContext();
          strlen(v19);
          *((_QWORD *)&v44 + 1) = LLVMMDStringInContext();
          *(_QWORD *)&v45 = LLVMMDStringInContext();
          *((_QWORD *)&v45 + 1) = LLVMMDStringInContext();
LABEL_33:
          v20 = LLVMMDNodeInContext();
        }
      }
      *(_QWORD *)&v11[8 * v13++] = v20;
      v15 += 8;
    }
    while (v14 != v13);
  }
  v23 = (unsigned int *)a1[13];
  if (v23)
    v24 = *v23;
  else
    v24 = 0;
  gleLLVMAddCommonMetaData(v8, (uint64_t *)&v11[8 * (int)v40], v37, v40, v24, v39);
  v40 = LLVMMDNodeInContext();
  v25 = v41;
  v26 = 8 * v41;
  MEMORY[0x24BDAC7A8]();
  v28 = &v36[-v27];
  if (v26 >= 0x200)
    v29 = 512;
  else
    v29 = v26;
  bzero(v28, v29);
  bzero(v28, v26);
  if (v25 >= 1)
  {
    v30 = 0;
    v31 = 8 * v41;
    do
    {
      v32 = (*(_QWORD *)(a1[17] + v30 + 8) >> 8) & 0x1F;
      if (v32 == 7)
      {
        *(_QWORD *)&v43 = 0;
        v42 = 0uLL;
        *(_QWORD *)&v42 = LLVMMDStringInContext();
        *((_QWORD *)&v42 + 1) = LLVMMDStringInContext();
        v33 = LLVMMDStringInContext();
      }
      else
      {
        if (v32 != 4)
        {
          v34 = 0;
          goto LABEL_53;
        }
        *(_QWORD *)&v43 = 0;
        v42 = 0uLL;
        *(_QWORD *)&v42 = LLVMMDStringInContext();
        if (!*(_QWORD *)(v8 + 152))
          *(_QWORD *)(v8 + 152) = LLVMInt32TypeInContext();
        *((_QWORD *)&v42 + 1) = LLVMConstInt();
        if (!*(_QWORD *)(v8 + 152))
          *(_QWORD *)(v8 + 152) = LLVMInt32TypeInContext();
        v33 = LLVMConstInt();
      }
      *(_QWORD *)&v43 = v33;
      v34 = LLVMMDNodeInContext();
LABEL_53:
      *(_QWORD *)&v28[v30] = v34;
      v30 += 8;
    }
    while (v31 != v30);
  }
  LLVMMDNodeInContext();
  return gleLLVMCreateFunctionMetadata(v8, "air.fragment");
}

uint64_t glpVertProgram_GenerateMetadata(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  _BYTE *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  const char *v16;
  unsigned int *v17;
  uint64_t v18;
  int v19;
  size_t v20;
  uint64_t v21;
  _BYTE *v22;
  size_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  int v31;
  _BYTE v33[4];
  unsigned int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  char __str[32];
  uint64_t v46;

  v38 = a4;
  v46 = *MEMORY[0x24BDAC8D0];
  v39 = a1;
  v8 = *(_QWORD *)(a1 + 48);
  if (!*(_QWORD *)(v8 + 152))
    *(_QWORD *)(v8 + 152) = LLVMInt32TypeInContext();
  v36 = a5;
  v34 = (2 * a5) | 1;
  v35 = v34 + a3;
  v9 = 8 * v35;
  MEMORY[0x24BDAC7A8]();
  v11 = &v33[-v10];
  if ((unint64_t)(8 * v35) >= 0x200)
    v12 = 512;
  else
    v12 = 8 * (v34 + a3);
  bzero(v11, v12);
  bzero(v11, v9);
  LODWORD(v37) = a3;
  if (a3 >= 1)
  {
    v13 = 0;
    v14 = v37;
    do
    {
      v15 = gleLLVMGetArgTypeName(*(_DWORD *)(a2 + 4 * v13));
      if (*(_DWORD *)(v8 + 220))
      {
        v16 = v15;
        memset(__str, 0, sizeof(__str));
        snprintf(__str, 0x1FuLL, "attr%d", v13);
        v44 = 0;
        v42 = 0u;
        v43 = 0u;
        v40 = 0u;
        v41 = 0u;
        *(_QWORD *)&v40 = gleLLVMGetConstantInt32(v8);
        *((_QWORD *)&v40 + 1) = LLVMMDStringInContext();
        *(_QWORD *)&v41 = LLVMMDStringInContext();
        *((_QWORD *)&v41 + 1) = LLVMConstInt();
        *(_QWORD *)&v42 = LLVMConstInt();
        *((_QWORD *)&v42 + 1) = LLVMMDStringInContext();
        strlen(v16);
        *(_QWORD *)&v43 = LLVMMDStringInContext();
        *((_QWORD *)&v43 + 1) = LLVMMDStringInContext();
        strlen(__str);
        v44 = LLVMMDStringInContext();
      }
      else
      {
        v40 = 0u;
        v41 = 0u;
        *(_QWORD *)&v40 = gleLLVMGetConstantInt32(v8);
        *((_QWORD *)&v40 + 1) = LLVMMDStringInContext();
        v41 = (unint64_t)LLVMMDStringInContext();
      }
      *(_QWORD *)&v11[8 * v13++] = LLVMMDNodeInContext();
    }
    while (v14 != v13);
  }
  v17 = *(unsigned int **)(v39 + 104);
  if (v17)
    v18 = *v17;
  else
    v18 = 0;
  gleLLVMAddCommonMetaData(v8, (uint64_t *)&v11[8 * (int)v37], v34, v37, v18, v36);
  v37 = LLVMMDNodeInContext();
  v19 = v38;
  v20 = 8 * v38;
  MEMORY[0x24BDAC7A8]();
  v22 = &v33[-v21];
  if (v20 >= 0x200)
    v23 = 512;
  else
    v23 = v20;
  bzero(v22, v23);
  bzero(v22, v20);
  if (v19 >= 1)
  {
    v24 = 0;
    v25 = 8 * v38;
    while (1)
    {
      v26 = 0;
      v27 = *(_QWORD *)(*(_QWORD *)(v39 + 136) + v24 + 8);
      v28 = (v27 >> 8) & 0x1F;
      switch(v28)
      {
        case 1u:
          *(_QWORD *)&v41 = 0;
          v40 = 0uLL;
          goto LABEL_30;
        case 3u:
          *(_QWORD *)&v41 = 0;
          v40 = 0uLL;
          goto LABEL_30;
        case 4u:
        case 5u:
        case 0x11u:
          memset(__str, 0, sizeof(__str));
          switch(v28)
          {
            case 0x11u:
              v30 = HIDWORD(v27) & 0x3F;
              if ((BYTE4(v27) & 0x38) == 8)
              {
                if (!*(_DWORD *)(v8 + 220))
                  goto LABEL_48;
                snprintf(__str, 0x1FuLL, "user(tex_coord%u)", v30 - 8);
              }
LABEL_39:
              if (!*(_DWORD *)(v8 + 220))
                goto LABEL_48;
              break;
            case 5u:
              v31 = *(_DWORD *)(v8 + 220);
              if ((v27 & 0x100000000) != 0)
              {
                if (!v31)
                  goto LABEL_48;
                strcpy(__str, "user(sec_back_color)");
                LODWORD(v30) = 4;
              }
              else
              {
                if (!v31)
                  goto LABEL_48;
                strcpy(__str, "user(sec_front_color)");
                LODWORD(v30) = 3;
              }
              break;
            case 4u:
              v29 = *(_DWORD *)(v8 + 220);
              if ((v27 & 0x100000000) != 0)
              {
                if (!v29)
                {
LABEL_48:
                  *(_QWORD *)&v42 = 0;
                  v40 = 0u;
                  v41 = 0u;
                  *(_QWORD *)&v40 = LLVMMDStringInContext();
                  *((_QWORD *)&v40 + 1) = LLVMMDStringInContext();
                  *(_QWORD *)&v41 = LLVMConstInt();
                  *((_QWORD *)&v41 + 1) = LLVMMDStringInContext();
                  *(_QWORD *)&v42 = LLVMMDStringInContext();
                  goto LABEL_49;
                }
                strcpy(__str, "user(back_color)");
                LODWORD(v30) = 1;
              }
              else
              {
                if (!v29)
                  goto LABEL_48;
                strcpy(__str, "user(front_color)");
                LODWORD(v30) = 2;
              }
              break;
            default:
              LODWORD(v30) = 0;
              goto LABEL_39;
          }
          if (!__str[0])
            snprintf(__str, 0x1FuLL, "user(slot%u)", v30);
          v40 = 0u;
          v41 = 0u;
          *(_QWORD *)&v40 = LLVMMDStringInContext();
          strlen(__str);
          *((_QWORD *)&v40 + 1) = LLVMMDStringInContext();
          *(_QWORD *)&v41 = LLVMMDStringInContext();
          *((_QWORD *)&v41 + 1) = LLVMMDStringInContext();
LABEL_49:
          v26 = LLVMMDNodeInContext();
LABEL_50:
          *(_QWORD *)&v22[v24] = v26;
          v24 += 8;
          if (v25 == v24)
            goto LABEL_51;
          break;
        case 9u:
          *(_QWORD *)&v41 = 0;
          v40 = 0uLL;
LABEL_30:
          *(_QWORD *)&v40 = LLVMMDStringInContext();
          *((_QWORD *)&v40 + 1) = LLVMMDStringInContext();
          *(_QWORD *)&v41 = LLVMMDStringInContext();
          goto LABEL_49;
        case 0xAu:
          v41 = 0u;
          v42 = 0u;
          v40 = 0u;
          *(_QWORD *)&v40 = LLVMMDStringInContext();
          *((_QWORD *)&v40 + 1) = LLVMConstInt();
          *(_QWORD *)&v41 = LLVMMDStringInContext();
          *((_QWORD *)&v41 + 1) = LLVMConstInt();
          *(_QWORD *)&v42 = LLVMMDStringInContext();
          *((_QWORD *)&v42 + 1) = LLVMMDStringInContext();
          goto LABEL_49;
        default:
          goto LABEL_50;
      }
    }
  }
LABEL_51:
  LLVMMDNodeInContext();
  return gleLLVMCreateFunctionMetadata(v8, "air.vertex");
}

double glp_strtod(char *a1, char **a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  double v6;
  int v7;
  double result;
  BOOL v9;
  int v11;
  unsigned __int8 *v12;
  int v13;
  char *v14;
  double v15;
  int v16;
  unint64_t v17;
  unsigned __int8 *v18;
  double v19;
  unint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  int v24;
  int v25;
  unint64_t v26;
  BOOL v27;
  unint64_t v28;
  int v29;
  int v30;
  unsigned __int8 *v31;
  double v32;
  double v33;
  int v34;
  unsigned int v35;
  double v36;
  unsigned int v37;
  BOOL v38;
  unsigned int v39;
  BOOL v40;
  unsigned int v41;
  double *v42;

  v2 = 0;
  v3 = *a1;
  if (v3 != 43)
  {
    if (v3 != 45)
      goto LABEL_5;
    v2 = 1;
  }
  v4 = *++a1;
  v3 = v4;
LABEL_5:
  if (v3 == 105)
  {
    v7 = *++a1;
    if (v7 == 110)
      ++a1;
    v6 = INFINITY;
    goto LABEL_13;
  }
  if (v3 == 110)
  {
    v5 = *++a1;
    if (v5 == 97)
      ++a1;
    v6 = NAN;
LABEL_13:
    result = v6;
    goto LABEL_71;
  }
  if (v3)
    v9 = v3 == 46;
  else
    v9 = 1;
  v11 = !v9 && (v3 & 0xFFFFFFDF) != 69;
  result = 0.0;
  if (((v3 - 46) > 0x37 || ((1 << (v3 - 46)) & 0x80000000800001) == 0) && v3)
  {
    v12 = (unsigned __int8 *)(a1 - 1);
    do
    {
      v13 = *++v12;
      v3 = v13;
    }
    while ((v13 - 48) < 0xA);
    v14 = (char *)(v12 - 1);
    if (v12 - 1 >= (unsigned __int8 *)a1)
    {
      result = 0.0;
      v15 = 1.0;
      do
      {
        v16 = *v14--;
        result = result + (double)(v16 - 48) * v15;
        v15 = v15 * 10.0;
      }
      while (v14 >= a1);
    }
    a1 = (char *)v12;
  }
  if (v3 == 46)
  {
    v17 = 0;
    do
      v3 = a1[++v17];
    while ((v3 - 48) < 0xA);
    v18 = (unsigned __int8 *)&a1[v17];
    v19 = 0.0;
    if (v17 >= 2)
    {
      v20 = v17 - 1;
      do
      {
        v19 = (double)(a1[v20] - 48) + v19 * 0.1;
        v21 = v20-- + 1;
      }
      while (v21 > 2);
      v19 = v19 * 0.1;
    }
    result = result + v19;
    v11 = 1;
    a1 = (char *)v18;
  }
  if (v11 && (v3 & 0xFFFFFFDF) == 0x45)
  {
    v22 = (unsigned __int8 *)(a1 + 2);
    v25 = a1[1];
    v23 = (unsigned __int8 *)(a1 + 1);
    v24 = v25;
    if (v25 == 43)
      v26 = (unint64_t)v22;
    else
      v26 = (unint64_t)v23;
    v27 = v24 == 45;
    if (v24 == 45)
      v28 = (unint64_t)v22;
    else
      v28 = v26;
    v29 = v27;
    a1 = (char *)(v28 - 1);
    do
      v30 = *++a1;
    while ((v30 - 48) < 0xA);
    v31 = (unsigned __int8 *)(a1 - 1);
    v32 = 0.0;
    if ((unint64_t)(a1 - 1) >= v28)
    {
      v33 = 1.0;
      do
      {
        v34 = (char)*v31--;
        v32 = v32 + (double)(v34 - 48) * v33;
        v33 = v33 * 10.0;
      }
      while ((unint64_t)v31 >= v28);
    }
    if (v29)
      v32 = -v32;
    v35 = (int)v32;
    v36 = 1.0;
    if ((int)v35 < 1)
    {
      if ((v35 & 0x80000000) == 0)
      {
LABEL_70:
        result = result * v36;
        goto LABEL_71;
      }
      if (v35 > 0xFFFFFFDF)
      {
        v39 = v35;
      }
      else
      {
        do
        {
          v36 = v36 * 1.0e-32;
          v39 = v35 + 32;
          v40 = __CFADD__(v35, 64);
          v35 += 32;
        }
        while (!v40);
      }
      v41 = ~v39;
      v42 = (double *)&pow_10_down;
    }
    else
    {
      if (v35 < 0x21)
      {
        v37 = v35;
      }
      else
      {
        do
        {
          v36 = v36 * 1.0e32;
          v37 = v35 - 32;
          v38 = v35 > 0x40;
          v35 -= 32;
        }
        while (v38);
      }
      v41 = v37 - 1;
      v42 = (double *)&pow_10_up;
    }
    v36 = v36 * v42[v41];
    goto LABEL_70;
  }
LABEL_71:
  if (a2)
    *a2 = a1;
  if (v2)
    return -result;
  return result;
}

uint64_t glpStringHashPut(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, double a5)
{
  unsigned int v9;
  int v10;
  unsigned int v11;

  LODWORD(a5) = *(_DWORD *)(a1 + 36);
  v9 = *(_DWORD *)(a1 + 32);
  if ((double)*(unint64_t *)&a5 / (double)v9 > 0.65)
  {
    v10 = 0;
    do
      v11 = HT_PRIMES[v10++];
    while (v11 <= v9);
    _glpStringHashRehash((_QWORD *)a1, v11);
  }
  return _glpStringHashRealPut(a1, a2, a3, a4);
}

uint64_t _glpStringHashRehash(_QWORD *a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  size_t v5;
  void *v6;
  uint64_t *v7;
  uint64_t v8;

  v3 = *((unsigned int *)a1 + 8);
  v4 = a1[5];
  *((_DWORD *)a1 + 8) = a2;
  *((_DWORD *)a1 + 9) = 0;
  v5 = 32 * a2;
  v6 = (void *)((uint64_t (*)(_QWORD, size_t, const char *))a1[1])(*a1, v5, "Hash Storage (String, growth)");
  a1[5] = v6;
  bzero(v6, v5);
  if ((_DWORD)v3)
  {
    v7 = (uint64_t *)(v4 + 16);
    do
    {
      v8 = *(v7 - 2);
      if (v8)
        _glpStringHashRealPut((uint64_t)a1, (const char *)*(v7 - 1), *v7, v8);
      v7 += 4;
      --v3;
    }
    while (v3);
  }
  return ((uint64_t (*)(_QWORD, uint64_t))a1[3])(*a1, v4);
}

uint64_t _glpStringHashRealPut(uint64_t result, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;

  v7 = result;
  v8 = (HIDWORD(a3) % *(_DWORD *)(result + 32));
  for (i = *(_QWORD *)(result + 40); *(_QWORD *)(i + 32 * v8); i = *(_QWORD *)(v7 + 40))
  {
    result = glpStringsEqual(a2, a3, *(char **)(i + 32 * v8 + 8), *(_QWORD *)(i + 32 * v8 + 16));
    if ((_DWORD)result)
    {
      --*(_DWORD *)(v7 + 36);
      i = *(_QWORD *)(v7 + 40);
      break;
    }
    v8 = (v8 + 1) % *(_DWORD *)(v7 + 32);
  }
  v10 = i + 32 * v8;
  *(_QWORD *)(v10 + 8) = a2;
  *(_QWORD *)(v10 + 16) = a3;
  *(_QWORD *)(*(_QWORD *)(v7 + 40) + 32 * v8) = a4;
  ++*(_DWORD *)(v7 + 36);
  return result;
}

uint64_t glpStringHashGet(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = (HIDWORD(a3) % *(_DWORD *)(a1 + 32));
  v4 = *(_QWORD *)(a1 + 40);
  if (!*(_QWORD *)(v4 + 32 * v3))
    return 0;
  while (!glpStringsEqual(a2, a3, *(char **)(v4 + 32 * v3 + 8), *(_QWORD *)(v4 + 32 * v3 + 16)))
  {
    v3 = (v3 + 1) % *(_DWORD *)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 40);
    if (!*(_QWORD *)(v4 + 32 * v3))
      return 0;
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 40) + 32 * v3);
}

uint64_t glpMakePointerHash(_QWORD *a1)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  void *v5;

  v2 = ((uint64_t (*)(_QWORD, uint64_t, const char *))a1[1])(*a1, 56, "Hash (Pointer)");
  v3 = *((_OWORD *)a1 + 1);
  *(_OWORD *)v2 = *(_OWORD *)a1;
  *(_OWORD *)(v2 + 16) = v3;
  v4 = HT_PRIMES;
  *(_QWORD *)(v2 + 32) = HT_PRIMES;
  v5 = (void *)((uint64_t (*)(_QWORD, uint64_t, const char *))a1[1])(*a1, 24 * v4, "Hash Storage (Pointer)");
  *(_QWORD *)(v2 + 40) = v5;
  bzero(v5, 24 * HT_PRIMES);
  *(_BYTE *)(v2 + 48) = 1;
  return v2;
}

uint64_t glpDestroyPointerHash(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = result;
    if (*(_BYTE *)(result + 48))
    {
      (*(void (**)(_QWORD, _QWORD))(result + 24))(*(_QWORD *)result, *(_QWORD *)(result + 40));
      return (*(uint64_t (**)(_QWORD, uint64_t))(v1 + 24))(*(_QWORD *)v1, v1);
    }
  }
  return result;
}

uint64_t glpPointerHashPut(uint64_t a1, unint64_t a2, uint64_t a3, double a4)
{
  unsigned int v7;
  int v8;
  unsigned int v9;

  LODWORD(a4) = *(_DWORD *)(a1 + 36);
  v7 = *(_DWORD *)(a1 + 32);
  if ((double)*(unint64_t *)&a4 / (double)v7 > 0.65)
  {
    v8 = 0;
    do
      v9 = HT_PRIMES[v8++];
    while (v9 <= v7);
    _glpPointerHashRehash((_QWORD *)a1, v9);
  }
  return _glpPointerHashRealPut(a1, a2, a3);
}

uint64_t _glpPointerHashRehash(_QWORD *a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  size_t v5;
  void *v6;
  unint64_t *v7;
  uint64_t v8;

  v3 = *((unsigned int *)a1 + 8);
  v4 = a1[5];
  *((_DWORD *)a1 + 8) = a2;
  *((_DWORD *)a1 + 9) = 0;
  v5 = 24 * a2;
  v6 = (void *)((uint64_t (*)(_QWORD, size_t, const char *))a1[1])(*a1, v5, "Hash Storage (Pointer, growth)");
  a1[5] = v6;
  bzero(v6, v5);
  if ((_DWORD)v3)
  {
    v7 = (unint64_t *)(v4 + 8);
    do
    {
      v8 = *(v7 - 1);
      if (v8)
        _glpPointerHashRealPut((uint64_t)a1, *v7, v8);
      v7 += 3;
      --v3;
    }
    while (v3);
  }
  return ((uint64_t (*)(_QWORD, uint64_t))a1[3])(*a1, v4);
}

uint64_t _glpPointerHashRealPut(uint64_t result, unint64_t a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  _QWORD *v6;

  v3 = *(_DWORD *)(result + 32);
  v4 = *(_QWORD *)(result + 40);
  v5 = (a2 >> 4) % v3;
  v6 = (_QWORD *)(v4 + 24 * v5);
  if (*v6)
  {
    while (*(_QWORD *)(v4 + 24 * v5 + 8) != a2)
    {
      if (v5 + 1 == v3)
        v5 = 0;
      else
        ++v5;
      v6 = (_QWORD *)(v4 + 24 * v5);
      if (!*v6)
        goto LABEL_9;
    }
    --*(_DWORD *)(result + 36);
  }
LABEL_9:
  *(_QWORD *)(v4 + 24 * v5 + 8) = a2;
  *v6 = a3;
  ++*(_DWORD *)(result + 36);
  return result;
}

uint64_t glpPointerHashGet(uint64_t a1, unint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t result;

  v2 = *(_DWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = (a2 >> 4) % v2;
  for (result = *(_QWORD *)(v3 + 24 * v4);
        result && *(_QWORD *)(v3 + 24 * v4 + 8) != a2;
        result = *(_QWORD *)(v3 + 24 * v4))
  {
    if (v4 + 1 == v2)
      v4 = 0;
    else
      ++v4;
  }
  return result;
}

uint64_t glpMakeDataHash(_QWORD *a1)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  void *v5;

  v2 = ((uint64_t (*)(_QWORD, uint64_t, const char *))a1[1])(*a1, 56, "Hash (Data)");
  v3 = *((_OWORD *)a1 + 1);
  *(_OWORD *)v2 = *(_OWORD *)a1;
  *(_OWORD *)(v2 + 16) = v3;
  v4 = HT_PRIMES;
  *(_QWORD *)(v2 + 32) = HT_PRIMES;
  v5 = (void *)((uint64_t (*)(_QWORD, uint64_t, const char *))a1[1])(*a1, 32 * v4, "Hash Storage (Data)");
  *(_QWORD *)(v2 + 40) = v5;
  bzero(v5, 32 * HT_PRIMES);
  *(_BYTE *)(v2 + 48) = 1;
  return v2;
}

uint64_t glpInvalidTypeSize()
{
  return 0xFFFFFFFFLL;
}

BOOL glpTypeSizeIsValid(int a1)
{
  return a1 != -1;
}

uint64_t glpAlignTypeSize(uint64_t result, unsigned int a2)
{
  if ((_DWORD)result != -1)
    return (result + a2 - 1) / a2 * a2;
  return result;
}

uint64_t glpABIGetTypeSize(unsigned int a1, uint64_t a2, uint64_t a3)
{
  return ((uint64_t (*)(uint64_t, uint64_t))ABIs[6 * a1])(a2, a3);
}

uint64_t glpABIGetTypeAlign(unsigned int a1, uint64_t a2, uint64_t a3)
{
  return ((uint64_t (*)(uint64_t, uint64_t))ABIs[6 * a1 + 1])(a2, a3);
}

uint64_t glpABIGetMinimumStructAlignment(unsigned int a1)
{
  return ABIs[6 * a1 + 5]();
}

uint64_t glpABIGetMinimumBufferBytesForType(unsigned int a1, uint64_t a2, uint64_t a3)
{
  uint64_t (**v3)();
  unsigned int v4;

  v3 = &ABIs[6 * a1];
  v4 = ((uint64_t (*)(uint64_t, uint64_t))*v3)(a2, a3);
  return (((unsigned int (*)(_QWORD))v3[4])(v4) + 15) & 0xFFFFFFF0;
}

uint64_t applevec4TypeSize(unsigned int *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t PrimitiveType;
  uint64_t ElementType;
  int v8;
  int ElementCount;
  int Columns;
  uint64_t ColumnType;
  unsigned int v13;

  v4 = 1;
  switch(glpTypeGetKind(a1))
  {
    case 0u:
      PrimitiveType = glpPrimitiveTypeGetPrimitiveType((uint64_t)a1);
      switch(glpPrimitiveTypeGetCategory(PrimitiveType))
      {
        case 1u:
        case 2u:
          return glpPrimitiveTypeGetNumVec4s(PrimitiveType);
        case 3u:
          Columns = glpPrimitiveMatrixGetColumns(PrimitiveType);
          ColumnType = glpPrimitiveMatrixGetColumnType(PrimitiveType);
          return glpPrimitiveTypeGetNumVec4s(ColumnType) * Columns;
        case 4u:
          return v4;
        default:
          goto LABEL_14;
      }
    case 1u:
      v13 = 0;
      glpStructTypeGetSizesAndAlignments(0, (uint64_t)a1, a2, &v13, 0, 0);
      v4 = v13;
      break;
    case 2u:
      v4 = 0xFFFFFFFFLL;
      if (glpArrayTypeGetElementCount((uint64_t)a1) != -1)
      {
        ElementType = glpArrayTypeGetElementType((uint64_t)a1);
        v8 = applevec4TypeSize(ElementType, a2);
        ElementCount = glpArrayTypeGetElementCount((uint64_t)a1);
        if (ElementCount == -1 || v8 == -1)
          v4 = 0xFFFFFFFFLL;
        else
          v4 = (ElementCount * v8);
      }
      break;
    case 5u:
      return v4;
    default:
LABEL_14:
      abort();
  }
  return v4;
}

uint64_t applevec4TypeAlign()
{
  return 1;
}

uint64_t applevec4MatrixStride(int a1)
{
  uint64_t ColumnType;

  ColumnType = glpPrimitiveMatrixGetColumnType(a1);
  return glpPrimitiveTypeGetNumVec4s(ColumnType);
}

uint64_t applevec4SizeToBytes(int a1)
{
  return (16 * a1);
}

uint64_t applevec4MinimumStructAlignment()
{
  return 1;
}

uint64_t std140TypeSize(unsigned int *a1, uint64_t a2)
{
  int Kind;
  uint64_t PrimitiveType;
  uint64_t v7;
  uint64_t ElementType;
  int v9;
  unsigned int v10;
  int ElementCount;
  unsigned int v13;

  Kind = glpTypeGetKind(a1);
  if (Kind == 2)
  {
    v7 = 0xFFFFFFFFLL;
    if (glpArrayTypeGetElementCount((uint64_t)a1) != -1)
    {
      ElementType = glpArrayTypeGetElementType((uint64_t)a1);
      v9 = std140TypeSize(ElementType, a2);
      if (v9 == -1)
        v10 = -1;
      else
        v10 = (v9 + 15) & 0xFFFFFFF0;
      ElementCount = glpArrayTypeGetElementCount((uint64_t)a1);
      if (ElementCount == -1 || v9 == -1)
        return 0xFFFFFFFFLL;
      else
        return v10 * ElementCount;
    }
    return v7;
  }
  if (Kind == 1)
  {
    v13 = 0;
    glpStructTypeGetSizesAndAlignments(1u, (uint64_t)a1, a2, &v13, 0, 0);
    return v13;
  }
  if (Kind)
    abort();
  PrimitiveType = glpPrimitiveTypeGetPrimitiveType((uint64_t)a1);
  return std140PrimitiveTypeSize(PrimitiveType, a2);
}

uint64_t std140TypeAlign(unsigned int *a1, uint64_t a2)
{
  int Kind;
  uint64_t PrimitiveType;
  uint64_t ElementType;
  unsigned int v8;

  Kind = glpTypeGetKind(a1);
  if (Kind == 2)
  {
    ElementType = glpArrayTypeGetElementType((uint64_t)a1);
    return (std140TypeAlign(ElementType, a2) + 15) & 0xFFFFFFF0;
  }
  else if (Kind == 1)
  {
    v8 = 0;
    glpStructTypeGetSizesAndAlignments(1u, (uint64_t)a1, a2, 0, &v8, 0);
    return v8;
  }
  else
  {
    if (Kind)
      abort();
    PrimitiveType = glpPrimitiveTypeGetPrimitiveType((uint64_t)a1);
    return std140PrimitiveTypeAlign(PrimitiveType);
  }
}

uint64_t std140MatrixStride(int a1, __int16 a2)
{
  uint64_t RowType;

  if ((a2 & 0x400) != 0)
    RowType = glpPrimitiveMatrixGetRowType(a1);
  else
    RowType = glpPrimitiveMatrixGetColumnType(a1);
  return (std140PrimitiveTypeAlign(RowType) + 15) & 0xFFFFFFF0;
}

uint64_t std140ArrayStrideForElementType(unsigned int *a1, uint64_t a2)
{
  return (std140TypeSize(a1, a2) + 15) & 0xFFFFFFF0;
}

uint64_t std140MinimumStructAlignment()
{
  return 16;
}

uint64_t std140PrimitiveTypeSize(uint64_t a1, uint64_t a2)
{
  int Category;
  uint64_t result;
  int Length;
  uint64_t ElementType;
  int v8;
  int Rows;

  Category = glpPrimitiveTypeGetCategory(a1);
  result = 0xFFFFFFFFLL;
  switch(Category)
  {
    case 1:
      if ((_DWORD)a1 == 62)
        result = 8;
      else
        result = 4;
      break;
    case 2:
      Length = glpPrimitiveVectorGetLength(a1);
      ElementType = glpPrimitiveVectorGetElementType(a1);
      v8 = std140PrimitiveTypeSize(ElementType, a2);
      if (v8 == -1 || Length == -1)
        result = 0xFFFFFFFFLL;
      else
        result = (v8 * Length);
      break;
    case 3:
      if ((a2 & 0x400) != 0)
        Rows = glpPrimitiveMatrixGetRows(a1);
      else
        Rows = glpPrimitiveMatrixGetColumns(a1);
      result = std140MatrixStride(a1, a2) * Rows;
      break;
    case 4:
      return result;
    default:
      abort();
  }
  return result;
}

uint64_t std140PrimitiveTypeAlign(uint64_t a1)
{
  int Category;
  uint64_t result;
  int Length;
  uint64_t ElementType;
  int v6;
  char v7;
  uint64_t ColumnType;

  Category = glpPrimitiveTypeGetCategory(a1);
  result = 0;
  switch(Category)
  {
    case 1:
      if ((_DWORD)a1 == 62)
        result = 8;
      else
        result = 4;
      break;
    case 2:
      Length = glpPrimitiveVectorGetLength(a1);
      ElementType = glpPrimitiveVectorGetElementType(a1);
      v6 = std140PrimitiveTypeAlign(ElementType);
      if (Length == 2)
        v7 = 1;
      else
        v7 = 2;
      result = (v6 << v7);
      break;
    case 3:
      ColumnType = glpPrimitiveMatrixGetColumnType(a1);
      result = (std140PrimitiveTypeAlign(ColumnType) + 15) & 0xFFFFFFF0;
      break;
    case 4:
      return result;
    default:
      abort();
  }
  return result;
}

void *glpMallocAlloc(int a1, size_t size)
{
  void *result;

  result = malloc_type_malloc(size, 0x1B2F740uLL);
  if (!result)
    abort();
  return result;
}

void *glpMallocRealloc(int a1, void *ptr, size_t size)
{
  void *result;

  result = malloc_type_realloc(ptr, size, 0xD9DAF1EDuLL);
  if (!result)
    abort();
  return result;
}

void glpMallocFree(int a1, void *a2)
{
  free(a2);
}

_QWORD *glpInitPoolAllocator(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *result;

  v6 = malloc_type_malloc(0x20uLL, 0x1B2F740uLL);
  if (!v6)
    abort();
  v7 = v6;
  v8 = sysconf(29);
  *v7 = (a2 + v8 - 1) / v8 * v8;
  v9 = sysconf(29);
  result = makePoolNode((a1 + v9 - 1) / v9 * v9, 0);
  v7[1] = result;
  *((_BYTE *)v7 + 24) = 0;
  *a3 = v7;
  a3[1] = poolAlloc;
  a3[2] = poolRealloc;
  a3[3] = poolFree;
  return result;
}

_QWORD *makePoolNode(size_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  void *v6;

  v4 = malloc_type_malloc(0x28uLL, 0x1B2F740uLL);
  if (!v4)
    abort();
  v5 = v4;
  v6 = mmap(0, a1, 3, 4098, 1107296256, 0);
  *v5 = v6;
  v5[1] = v6;
  v5[2] = a1;
  v5[3] = a1;
  v5[4] = a2;
  return v5;
}

size_t poolAlloc(size_t *a1, uint64_t a2)
{
  unint64_t v3;
  size_t v4;
  unint64_t v5;
  _QWORD *PoolNode;
  size_t result;

  v3 = (a2 + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = *a1;
  if (v3 > v4)
  {
    v5 = sysconf(29);
    v4 = (v3 + v5 - 1) / v5 * v5;
    PoolNode = (_QWORD *)a1[1];
LABEL_4:
    PoolNode = makePoolNode(v4, (uint64_t)PoolNode);
    a1[1] = (size_t)PoolNode;
    goto LABEL_5;
  }
  PoolNode = (_QWORD *)a1[1];
  if (PoolNode[3] < v3)
    goto LABEL_4;
LABEL_5:
  result = PoolNode[1];
  a1[2] = result;
  PoolNode[1] = result + v3;
  PoolNode[3] -= v3;
  return result;
}

uint64_t poolRealloc()
{
  return 0;
}

uint64_t poolFree(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  if (*(_BYTE *)(result + 24))
  {
    if (*(_QWORD *)(result + 16) == a2)
    {
      v2 = *(_QWORD *)(result + 8);
      *(_QWORD *)(v2 + 24) += *(_QWORD *)(v2 + 8) - a2;
      *(_QWORD *)(v2 + 8) = a2;
    }
  }
  return result;
}

_QWORD *glpInitTempPoolAllocator(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *result;

  result = glpInitPoolAllocator(a1, a2, a3);
  *(_BYTE *)(*a3 + 24) = 1;
  return result;
}

void glpDestroyPoolAllocator(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(void **)a1;
  v2 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  if (v2)
  {
    do
    {
      v3 = *(_QWORD *)(v2 + 32);
      munmap(*(void **)v2, *(_QWORD *)(v2 + 16));
      free((void *)v2);
      v2 = v3;
    }
    while (v3);
  }
  free(v1);
}

double glpLLVMAllocVariableExtra(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  double result;

  if (!*(_QWORD *)(a2 + 144))
  {
    v3 = (*(uint64_t (**)(_QWORD, uint64_t, const char *))(a1 + 8))(*(_QWORD *)a1, 40, "llvm codegen extra");
    *(_QWORD *)(a2 + 144) = v3;
    result = 0.0;
    *(_OWORD *)v3 = 0u;
    *(_OWORD *)(v3 + 16) = 0u;
    *(_QWORD *)(v3 + 32) = 0;
  }
  return result;
}

uint64_t glpLLVMCGTopLevel(uint64_t a1, uint64_t a2)
{
  GLPDebugInfoContext *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  uint64_t GlobalTypeQualifier;
  uint64_t *Layout;
  unsigned int v14;
  uint64_t Def;
  unsigned int v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  _DWORD *v27;
  GLPDebugInfoContext *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void **BitCodeStorage;
  size_t v37;
  _DWORD *v38;
  _DWORD *v39;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  if ((*(_WORD *)(a1 + 832) & 4) != 0)
  {
    glpInitTempPoolAllocator(0x4000, 0x4000, (_QWORD *)(a1 + 360));
    *(_QWORD *)(a1 + 392) = glpMakeDataHash((_QWORD *)(a1 + 360));
  }
  *(_QWORD *)(a1 + 8) = LLVMModuleCreateWithNameInContext();
  glpLLVMSetupModule();
  *(_QWORD *)(a1 + 32) = LLVMInt64TypeInContext();
  *(_QWORD *)(a1 + 40) = LLVMInt32TypeInContext();
  *(_QWORD *)(a1 + 48) = LLVMInt16TypeInContext();
  *(_QWORD *)(a1 + 56) = LLVMInt8TypeInContext();
  *(_QWORD *)(a1 + 64) = LLVMInt1TypeInContext();
  *(_QWORD *)(a1 + 72) = LLVMFloatTypeInContext();
  *(_QWORD *)(a1 + 80) = LLVMHalfTypeInContext();
  *(_QWORD *)(a1 + 88) = LLVMVoidTypeInContext();
  *(_QWORD *)(a1 + 96) = LLVMDoubleTypeInContext();
  if (*(_DWORD *)(a1 + 788))
  {
    v4 = (GLPDebugInfoContext *)glpLLVMDIBuilderCreate(*(uint64_t **)(a1 + 8));
    *(_QWORD *)(a1 + 24) = v4;
    glpLLVMDIBuilderCreateCompileUnit(v4, "0");
    glpLLVMDIBuilderCreateFile(*(GLPDebugInfoContext **)(a1 + 24), "0");
  }
  v5 = *(_DWORD *)(a1 + 116);
  if (v5 > 0x10)
  {
    if (v5 > 0x20)
      v6 = 0;
    else
      v6 = *(_QWORD *)(a1 + 40);
  }
  else
  {
    v6 = LLVMInt16TypeInContext();
  }
  *(_QWORD *)(a1 + 456) = v6;
  v7 = *(_DWORD *)(a1 + 120);
  if (v7 > 0x10)
  {
    if (v7 > 0x20)
      v8 = 0;
    else
      v8 = *(_QWORD *)(a1 + 40);
  }
  else
  {
    v8 = LLVMInt16TypeInContext();
  }
  *(_QWORD *)(a1 + 464) = v8;
  v9 = *(_DWORD *)(a1 + 124);
  if (v9 > 0x10)
  {
    if (v9 > 0x20)
      v10 = 0;
    else
      v10 = *(_QWORD *)(a1 + 40);
  }
  else
  {
    v10 = LLVMInt16TypeInContext();
  }
  *(_QWORD *)(a1 + 472) = v10;
  *(_QWORD *)(a1 + 480) = glpLLVMGetFloatTypeFromBits(a1, *(_DWORD *)(a1 + 104));
  *(_QWORD *)(a1 + 488) = glpLLVMGetFloatTypeFromBits(a1, *(_DWORD *)(a1 + 108));
  *(_QWORD *)(a1 + 496) = glpLLVMGetFloatTypeFromBits(a1, *(_DWORD *)(a1 + 112));
  if (*(_DWORD *)(a1 + 320) == 3)
  {
    v42 = 0u;
    v43 = 0u;
    v41 = 0u;
    glpLinkedProgramGetOverrides(*(_QWORD *)(a1 + 136), (uint64_t)&v41);
    if (SHIDWORD(v41) > 3)
    {
      if (HIDWORD(v41) == 4)
      {
        v11 = 3;
        goto LABEL_31;
      }
      if (HIDWORD(v41) == 10)
      {
        v11 = 4;
        goto LABEL_31;
      }
    }
    else
    {
      if (!HIDWORD(v41))
      {
        v11 = 1;
        goto LABEL_31;
      }
      if (HIDWORD(v41) == 1)
      {
        v11 = 2;
        goto LABEL_31;
      }
    }
    v11 = 6;
LABEL_31:
    *(_DWORD *)(a1 + 792) = v11;
    GlobalTypeQualifier = glpTopLevelNodeGetGlobalTypeQualifier(a2, 0x20000000);
    if (GlobalTypeQualifier)
    {
      Layout = (uint64_t *)glpGlobalTypeQualifierNodeGetLayout(GlobalTypeQualifier);
      glpLayoutObjectGetGeomInOut(Layout, (_DWORD *)(a1 + 792), 0, 0, 0, 0);
    }
  }
  glpLLVMBuildSubroutinesTypeClasses(a1, a2);
  if (glpTopLevelNodeGetDefCount(a2))
  {
    v14 = 0;
    do
    {
      Def = glpTopLevelNodeGetDef(a2, v14);
      if (*(_WORD *)(a1 + 834))
        glpLLVMCleanUpASTObjects((_QWORD *)a1, Def);
      glpLLVMCGFindSamplersAndBuffers(a1, Def);
      ++v14;
    }
    while (v14 < glpTopLevelNodeGetDefCount(a2));
  }
  if (glpTopLevelNodeGetDefCount(a2))
  {
    v16 = 0;
    do
    {
      v17 = glpTopLevelNodeGetDef(a2, v16);
      glpLLVMCGNode(a1, v17, 0);
      ++v16;
    }
    while (v16 < glpTopLevelNodeGetDefCount(a2));
  }
  switch(*(_DWORD *)(a1 + 320))
  {
    case 0:
      if (*(_WORD *)(a1 + 834))
        v18 = 0;
      else
        v18 = glpLLVMCreateAttributeDescription(a1);
      glpLLVMVertexMetaData(a1, "air.vertex");
      goto LABEL_49;
    case 1:
      *(_QWORD *)&v41 = *(_QWORD *)(a1 + 168);
      v19 = LLVMMDNodeInContext();
      v20 = *(_QWORD *)(a1 + 192);
      *((_QWORD *)&v41 + 1) = v19;
      *(_QWORD *)&v42 = v20;
      v21 = LLVMMDNodeInContext();
      v22 = *(_QWORD *)(a1 + 8);
      v23 = "air.tess_control";
      goto LABEL_47;
    case 2:
      glpLLVMVertexMetaData(a1, "air.tess_evaluation");
      goto LABEL_48;
    case 3:
      *(_QWORD *)&v41 = *(_QWORD *)(a1 + 168);
      v24 = LLVMMDNodeInContext();
      v25 = *(_QWORD *)(a1 + 192);
      *((_QWORD *)&v41 + 1) = v24;
      *(_QWORD *)&v42 = v25;
      v21 = LLVMMDNodeInContext();
      v22 = *(_QWORD *)(a1 + 8);
      v23 = "air.geometry";
LABEL_47:
      glpAddNamedMetadataOperand(v22, v23, v21);
      goto LABEL_48;
    case 4:
      if ((*(_WORD *)(a1 + 832) & 1) != 0 && !*(_WORD *)(a1 + 834))
        v18 = glpLLVMCreateAttributeDescription(a1);
      else
        v18 = 0;
      glpLLVMFragmentMetaData(a1);
      goto LABEL_49;
    default:
LABEL_48:
      v18 = 0;
LABEL_49:
      if (*(_WORD *)(a1 + 834))
      {
        v26 = 0;
        v27 = 0;
      }
      else
      {
        v27 = glpLLVMCreateIRBindings(*(_QWORD *)(a1 + 504), *(_DWORD *)(a1 + 824));
        v26 = glpLLVMCreateIRBindings(*(_QWORD *)(a1 + 512), *(_DWORD *)(a1 + 828));
      }
      v28 = *(GLPDebugInfoContext **)(a1 + 24);
      if (v28)
        glpLLVMDIBuilderDelete(v28);
      if ((*(_WORD *)(a1 + 832) & 1) != 0)
      {
        v42 = 0uLL;
        *(_QWORD *)&v41 = LLVMMDStringInContext();
        v29 = *(_QWORD *)(a1 + 528);
        if (!v29)
        {
          v29 = LLVMConstInt();
          *(_QWORD *)(a1 + 528) = v29;
        }
        *((_QWORD *)&v41 + 1) = v29;
        v30 = *(_QWORD *)(a1 + 520);
        if (v30)
        {
          *(_QWORD *)&v42 = *(_QWORD *)(a1 + 520);
        }
        else
        {
          v30 = LLVMConstInt();
          *(_QWORD *)(a1 + 520) = v30;
          *(_QWORD *)&v42 = v30;
          if (!v30)
          {
            v30 = LLVMConstInt();
            *(_QWORD *)(a1 + 520) = v30;
          }
        }
        *((_QWORD *)&v42 + 1) = v30;
        v31 = LLVMMDNodeInContext();
        glpAddNamedMetadataOperand(*(_QWORD *)(a1 + 8), "air.language_version", v31);
      }
      *(_QWORD *)&v41 = LLVMMDStringInContext();
      v32 = LLVMMDNodeInContext();
      glpAddNamedMetadataOperand(*(_QWORD *)(a1 + 8), "air.compile_options", v32);
      *(_QWORD *)&v41 = LLVMMDStringInContext();
      v33 = LLVMMDNodeInContext();
      glpAddNamedMetadataOperand(*(_QWORD *)(a1 + 8), "air.compile_options", v33);
      *(_QWORD *)&v41 = LLVMMDStringInContext();
      v34 = LLVMMDNodeInContext();
      glpAddNamedMetadataOperand(*(_QWORD *)(a1 + 8), "air.compile_options", v34);
      v35 = *(_QWORD *)(a1 + 144);
      BitCodeStorage = (void **)createBitCodeStorage();
      v37 = writeByteCode(*(_QWORD *)(a1 + 8), (uint64_t)BitCodeStorage) + 8;
      v38 = malloc_type_malloc(v37, 0x1B2F740uLL);
      if (!v38)
        abort();
      v39 = v38;
      copyBitCodeStorage(BitCodeStorage, v38, v37, 0);
      deleteBitCodeStorage(BitCodeStorage);
      LLVMDisposeModule();
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      if (*(_WORD *)(a1 + 834))
      {
        *(_QWORD *)(v35 + 40) = *(_QWORD *)v35;
        *(_QWORD *)v35 = v39;
      }
      else
      {
        *(_QWORD *)v35 = v39;
        *(_QWORD *)(v35 + 8) = v18;
        *(_QWORD *)(v35 + 16) = v27;
        *(_QWORD *)(v35 + 24) = v26;
        *(_QWORD *)(v35 + 32) = 0;
        *(_DWORD *)(v35 + 48) = *(_DWORD *)(a1 + 760);
        *(_QWORD *)(v35 + 72) = *(_QWORD *)(a1 + 744);
        *(_QWORD *)(v35 + 80) = *(_QWORD *)(a1 + 752);
        *(_DWORD *)(v35 + 52) = *(_DWORD *)(a1 + 764);
        *(_OWORD *)(v35 + 56) = *(_OWORD *)(a1 + 768);
      }
      return 0;
  }
}

uint64_t glpLLVMGetFloatTypeFromBits(uint64_t a1, unsigned int a2)
{
  if (a2 <= 0x10)
    return LLVMHalfTypeInContext();
  if (a2 > 0x20)
    return 0;
  return LLVMFloatTypeInContext();
}

void glpLLVMBuildSubroutinesTypeClasses(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t PointerHash;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t Def;
  uint64_t v9;
  uint64_t Prototype;
  uint64_t Extra;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  double v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, const char *);
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  unsigned int *v31;
  unint64_t v32;
  int v33;
  double v34;
  unsigned int v35;
  unint64_t v37;
  unsigned int *v38;
  int v39;
  int v40;
  int v41;
  unsigned int *v42;
  int v43;
  _QWORD *v44;
  unsigned int *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  size_t v49;
  double v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unsigned int *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;

  v2 = a2;
  v64 = a1;
  v66 = *MEMORY[0x24BDAC8D0];
  if (glpTopLevelNodeGetDefCount(a2))
  {
    v3 = 0;
    PointerHash = 0;
    v63 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v61 = v2;
    do
    {
      Def = glpTopLevelNodeGetDef(v2, v7);
      if (Def)
      {
        v9 = Def;
        if (glpASTNodeGetKind(Def) == 51)
        {
          Prototype = glpFunctionDefinitionNodeGetPrototype(v9);
          Extra = glpFunctionPrototypeNodeGetExtra(Prototype);
          if ((*(_BYTE *)(Extra + 10) & 0x10) != 0)
          {
            v12 = Extra;
            if (!PointerHash)
            {
              PointerHash = glpMakePointerHash(*(_QWORD **)(v64 + 152));
              v6 = (unsigned int *)(*(uint64_t (**)(_QWORD, uint64_t, const char *))(*(_QWORD *)(v64 + 152)
                                                                                            + 8))(**(_QWORD **)(v64 + 152), 32, "Vector Storage (unsigned)");
              v5 = 0;
              v63 = 8;
            }
            v13 = *(unsigned int *)(v12 + 96);
            if ((_DWORD)v13 == 1)
            {
              v14 = **(_QWORD **)(v12 + 104);
              if (!glpPointerHashGet(PointerHash, v14))
              {
                v62 = v3;
                v16 = (v3 + 1);
                glpPointerHashPut(PointerHash, v14, (int)v16, v15);
                v17 = v5;
                v5 = (v5 + 1);
                if (v5 <= v63)
                {
                  v25 = v17;
                }
                else
                {
                  if ((int)v63 <= 1)
                    v18 = 1;
                  else
                    v18 = v63;
                  v19 = 2 * v18;
                  if (v19 <= (int)v5)
                    v20 = v5;
                  else
                    v20 = v19;
                  v21 = *(uint64_t **)(v64 + 152);
                  v22 = *v21;
                  v23 = (uint64_t (*)(uint64_t, uint64_t, const char *))v21[1];
                  v63 = v20;
                  v24 = (unsigned int *)v23(v22, 4 * v20, "Vector Storage (unsigned, growth)");
                  v25 = v17;
                  memcpy(v24, v6, 4 * v17);
                  ((void (*)(_QWORD, unsigned int *))v21[3])(*v21, v6);
                  v6 = v24;
                }
                v6[v25] = v62;
                v3 = v16;
              }
            }
            else
            {
              if ((int)v13 < 1)
                goto LABEL_38;
              v26 = v5;
              v27 = 0;
              v62 = v3;
              v28 = v3;
              do
              {
                v29 = glpPointerHashGet(PointerHash, *(_QWORD *)(*(_QWORD *)(v12 + 104) + v27));
                if (v29 && v6[v29 - 1] < v28)
                  v28 = v6[v29 - 1];
                v27 += 8;
              }
              while (8 * v13 != v27);
              v30 = 0;
              v65 = v26;
              do
              {
                v31 = v6;
                v32 = *(_QWORD *)(*(_QWORD *)(v12 + 104) + 8 * v30);
                v33 = glpPointerHashGet(PointerHash, v32);
                if (v33)
                {
                  v6 = v31;
                  v35 = v31[v33 - 1];
                  if (v35 != v28 && (_DWORD)v26 != 0)
                  {
                    v37 = v65;
                    v38 = v31;
                    do
                    {
                      if (*v38 == v35)
                        *v38 = v28;
                      ++v38;
                      --v37;
                    }
                    while (v37);
                  }
                }
                else
                {
                  glpPointerHashPut(PointerHash, v32, v28 + 1, v34);
                  v6 = v31;
                }
                ++v30;
              }
              while (v30 != v13);
              v2 = v61;
              v3 = v62;
              v5 = v26;
              if (v28 == (_DWORD)v62)
              {
LABEL_38:
                v39 = v5 + 1;
                if ((int)v5 + 1 <= v63)
                {
                  v5 = v5;
                }
                else
                {
                  if ((int)v63 <= 1)
                    v40 = 1;
                  else
                    v40 = v63;
                  v41 = 2 * v40;
                  v42 = v6;
                  v43 = v3;
                  if (v41 <= v39)
                    v3 = v39;
                  else
                    v3 = v41;
                  v44 = *(_QWORD **)(v64 + 152);
                  v45 = (unsigned int *)((uint64_t (*)(_QWORD, uint64_t, const char *))v44[1])(*v44, 4 * v3, "Vector Storage (unsigned, growth)");
                  v5 = v5;
                  memcpy(v45, v42, 4 * v5);
                  ((void (*)(_QWORD, unsigned int *))v44[3])(*v44, v42);
                  v63 = v3;
                  LODWORD(v3) = v43;
                  v6 = v45;
                }
                v6[v5] = v3;
                v3 = (v3 + 1);
                v5 = (v5 + 1);
              }
            }
          }
        }
      }
      ++v7;
    }
    while (v7 < glpTopLevelNodeGetDefCount(v2));
    if (PointerHash)
    {
      v46 = glpMakePointerHash(*(_QWORD **)(v64 + 152));
      v65 = (unint64_t)&v61;
      *(_QWORD *)(v64 + 400) = v46;
      MEMORY[0x24BDAC7A8](v46);
      v48 = (char *)&v61 - v47;
      v49 = 8 * (unint64_t)v3 >= 0x200 ? 512 : 8 * v3;
      bzero(v48, v49);
      bzero(v48, 8 * v3);
      v51 = *(unsigned int *)(PointerHash + 32);
      if ((_DWORD)v51)
      {
        v52 = 0;
        v53 = 0;
        v54 = v64;
        do
        {
          v55 = *(_QWORD *)(PointerHash + 40);
          v56 = *(_QWORD *)(v55 + v52);
          if (v56)
          {
            v57 = *(_QWORD *)(v55 + v52 + 8);
            v58 = v6;
            v59 = v6[(v56 - 1)];
            v60 = *(_QWORD *)&v48[8 * v59];
            if (!v60)
            {
              v60 = (*(uint64_t (**)(_QWORD, uint64_t, const char *))(*(_QWORD *)(v54 + 152) + 8))(**(_QWORD **)(v54 + 152), 16, "functionParameters");
              *(_QWORD *)v60 = glpMakePointerHash(*(_QWORD **)(v54 + 152));
              *(_DWORD *)(v60 + 8) = 0;
              *(_QWORD *)&v48[8 * v59] = v60;
            }
            glpPointerHashPut(*(_QWORD *)(v64 + 400), v57, v60, v50);
            v51 = *(unsigned int *)(PointerHash + 32);
            v6 = v58;
          }
          ++v53;
          v52 += 24;
        }
        while (v53 < v51);
      }
    }
  }
}

_QWORD *glpLLVMCleanUpASTObjects(_QWORD *result, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int i;
  uint64_t Child;
  uint64_t Body;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t Extra;
  _QWORD *v13;
  uint64_t v14;

  if (!a2)
    return result;
  v3 = (uint64_t)result;
  result = (_QWORD *)glpASTNodeGetKind(a2);
  if ((int)result <= 50)
  {
    if ((_DWORD)result == 44)
    {
      Extra = glpParameterDeclarationNodeGetExtra(a2);
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v3 + 152) + 24))(**(_QWORD **)(v3 + 152), *(_QWORD *)(Extra + 144));
      *(_QWORD *)(Extra + 144) = 0;
    }
    else if ((_DWORD)result != 46)
    {
LABEL_9:
      result = (_QWORD *)glpASTNodeGetChildCount(a2);
      if ((_DWORD)result)
      {
        v4 = (int)result;
        for (i = 0; i != v4; ++i)
        {
          Child = glpASTNodeGetChild(a2, i);
          result = (_QWORD *)glpLLVMCleanUpASTObjects(v3, Child);
        }
      }
      return result;
    }
    result = (_QWORD *)glpVariableDeclarationNodeGetExtra(a2);
    v13 = result;
    v14 = result[6];
    if ((v14 & 0x100000000) != 0)
    {
      if ((v14 & 0x400000000) != 0)
        *(_DWORD *)(result[11] + 24) = 0;
    }
    else
    {
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v3 + 152) + 24))(**(_QWORD **)(v3 + 152), result[18]);
      v13[18] = 0;
    }
  }
  else
  {
    if ((_DWORD)result == 51)
    {
      Body = glpFunctionDefinitionNodeGetBody(a2);
      return (_QWORD *)glpLLVMCleanUpFunctionVariableObjects(v3, Body);
    }
    if ((_DWORD)result != 57)
    {
      if ((_DWORD)result == 85)
        return result;
      goto LABEL_9;
    }
    v8 = glpInterfaceBlockNodeGetExtra(a2);
    result = (_QWORD *)glpInterfaceBlockObjectGetVariableObjectCount(v8);
    if ((_DWORD)result)
    {
      v9 = 0;
      v10 = 8 * result;
      do
      {
        v11 = *(_QWORD *)(*(_QWORD *)(v8 + 72) + v9);
        if ((*(_BYTE *)(v11 + 52) & 8) != 0)
        {
          *(_DWORD *)(*(_QWORD *)(v11 + 88) + 24) = 0;
        }
        else
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v3 + 152) + 24))(**(_QWORD **)(v3 + 152), *(_QWORD *)(v11 + 144));
          *(_QWORD *)(v11 + 144) = 0;
        }
        v9 += 8;
      }
      while (v10 != v9);
    }
  }
  return result;
}

void glpLLVMCGFindSamplersAndBuffers(uint64_t a1, uint64_t a2)
{
  int Kind;
  uint64_t Prototype;
  uint64_t v6;
  const char *Name;
  uint64_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  int v16;
  unsigned int v17;
  _QWORD *v18;
  char *v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t Extra;
  unsigned int VariableObjectCount;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int ChildCount;
  int v32;
  unsigned int i;
  uint64_t Child;
  uint64_t v35;
  uint64_t Body;
  uint64_t v37;
  uint64_t *v38;
  __int128 v39;
  __int128 v40;

  if (!a2)
    return;
  Kind = glpASTNodeGetKind(a2);
  if (Kind > 56)
  {
    if (Kind == 57)
    {
      Extra = glpInterfaceBlockNodeGetExtra(a2);
      VariableObjectCount = glpInterfaceBlockObjectGetVariableObjectCount(Extra);
      if (VariableObjectCount)
      {
        v28 = 0;
        v29 = 8 * VariableObjectCount;
        do
        {
          v30 = *(_QWORD *)(*(_QWORD *)(Extra + 72) + v28);
          if ((*(_BYTE *)(v30 + 52) & 8) != 0)
            glpLLVMCGDeclareUniformBufferObject((_DWORD *)a1, *(_DWORD **)(v30 + 88));
          v28 += 8;
        }
        while (v29 != v28);
      }
    }
    else
    {
      if (Kind != 85)
      {
LABEL_29:
        ChildCount = glpASTNodeGetChildCount(a2);
        if (ChildCount)
        {
          v32 = ChildCount;
          for (i = 0; i != v32; ++i)
          {
            Child = glpASTNodeGetChild(a2, i);
            glpLLVMCGFindSamplersAndBuffers(a1, Child);
          }
        }
        return;
      }
      v11 = glpSubroutineUniformNodeGetExtra(a2);
      v12 = *(_QWORD *)(v11 + 16);
      v13 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, const char *))(*(_QWORD *)(a1 + 152) + 8))(**(_QWORD **)(a1 + 152), 24, "subroutines");
      v13[1] = 0;
      v13[2] = 0;
      *v13 = 0;
      *v13 = v12;
      *((_DWORD *)v13 + 4) = *(_DWORD *)(v11 + 40);
      v14 = *(unsigned int *)(a1 + 612);
      *(_DWORD *)(v11 + 24) = v14;
      v15 = *(_DWORD *)(a1 + 608);
      if ((int)v14 + 1 <= v15)
      {
        v19 = *(char **)(a1 + 616);
        v20 = v14;
      }
      else
      {
        if (v15 <= 1)
          v15 = 1;
        v16 = 2 * v15;
        if (v16 <= (int)v14 + 1)
          v17 = v14 + 1;
        else
          v17 = v16;
        v18 = *(_QWORD **)(a1 + 152);
        v19 = (char *)((uint64_t (*)(_QWORD, uint64_t, const char *))v18[1])(*v18, 8 * v17, "Vector Storage (GLPLLVMSubroutine *, growth)");
        memcpy(v19, *(const void **)(a1 + 616), 8 * *(unsigned int *)(a1 + 612));
        ((void (*)(_QWORD, _QWORD))v18[3])(*v18, *(_QWORD *)(a1 + 616));
        *(_DWORD *)(a1 + 608) = v17;
        *(_QWORD *)(a1 + 616) = v19;
        v20 = *(_DWORD *)(a1 + 612);
      }
      memmove(&v19[8 * v14 + 8], &v19[8 * v14], 8 * (v20 - v14));
      *(_QWORD *)(*(_QWORD *)(a1 + 616) + 8 * v14) = v13;
      ++*(_DWORD *)(a1 + 612);
    }
  }
  else
  {
    if (Kind != 46)
    {
      if (Kind == 51)
      {
        Prototype = glpFunctionDefinitionNodeGetPrototype(a2);
        v6 = glpFunctionPrototypeNodeGetExtra(Prototype);
        Name = (const char *)glpFunctionPrototypeNodeGetName(Prototype);
        v9 = glpStringsEqual(Name, v8, "main", 0x83863A00000004);
        if (!*(_WORD *)(a1 + 834))
        {
          if (v9)
          {
            v10 = (*(uint64_t (**)(_QWORD, uint64_t, const char *))(*(_QWORD *)(a1 + 152) + 8))(**(_QWORD **)(a1 + 152), 16, "functionParameters");
            *(_QWORD *)v10 = 0;
            *(_DWORD *)(v10 + 8) = 15;
            *(_QWORD *)(v6 + 152) = v10;
          }
          else
          {
            Body = glpFunctionDefinitionNodeGetBody(a2);
            v37 = glpLLVMAllocateFunctionParameters(a1, 0);
            glpLLVMGetFunctionGlobalVariableUse(a1, Body, *(_QWORD *)v37, (int *)(v37 + 8));
            *(_QWORD *)(v6 + 152) = v37;
          }
        }
        return;
      }
      goto LABEL_29;
    }
    v21 = (uint64_t *)glpVariableDeclarationNodeGetExtra(a2);
    v22 = (uint64_t)v21;
    v23 = v21[6];
    if ((v23 & 0x100000000) != 0)
    {
      v38 = v21;
      if ((int)glpTypeGetSamplerCount(*v21) > 0)
      {
        v35 = *(_QWORD *)(*(_QWORD *)(v38[18] + 8) + 8);
        *(_DWORD *)(v35 + 4) = *(_DWORD *)(a1 + 596);
        v39 = 0u;
        v40 = 0u;
        DWORD1(v40) = *(_DWORD *)(v35 + 12);
        glpLLVMGetTextureTypeFromSampler(a1, &v39, SDWORD1(v40));
      }
      if ((*((_BYTE *)v38 + 52) & 4) != 0)
        glpLLVMCGDeclareUniformBufferObject((_DWORD *)a1, (_DWORD *)v38[11]);
    }
    else if ((v23 & 0x80000000) != 0)
    {
      v24 = (uint64_t *)v21[1];
      if (v24)
      {
        v25 = glpLayoutObjectFind(v24, 46);
        if (v25)
        {
          if (*((_DWORD *)v25 + 4) == 10)
            glpLLVMCGDeclareTFBuffer(a1, v22);
        }
      }
    }
  }
}

llvm::Function *glpLLVMCGNode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Expr;
  int Kind;
  llvm::Function *result;
  uint64_t Extra;

  if (!a2)
    return 0;
  Expr = a2;
  while (2)
  {
    if (*(_DWORD *)(a1 + 332))
      return 0;
    Kind = glpASTNodeGetKind(Expr);
    switch(Kind)
    {
      case 10:
      case 18:
      case 41:
      case 63:
      case 85:
        return 0;
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 40:
      case 48:
      case 49:
      case 50:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 64:
      case 76:
      case 77:
      case 80:
      case 83:
        goto LABEL_38;
      case 16:
        return (llvm::Function *)glpLLVMCGNegate(a1, Expr);
      case 17:
        return (llvm::Function *)glpLLVMCGLogicalNot(a1, Expr);
      case 39:
        return (llvm::Function *)glpLLVMCGAssign((uint64_t *)a1, Expr);
      case 42:
        glpLLVMWriteOutput(a1, Expr);
        return 0;
      case 43:
        return (llvm::Function *)glpLLVMCGCommaExpr((uint64_t *)a1, Expr, a3);
      case 44:
        glpLLVMCGParameterDeclaration(a1, Expr);
        return 0;
      case 45:
        return (llvm::Function *)glpLLVMCGFunctionPrototype(a1, Expr);
      case 46:
        Extra = glpVariableDeclarationNodeGetExtra(Expr);
        return (llvm::Function *)glpLLVMCGDeclareVariable(a1, Extra);
      case 47:
        glpLLVMCGVariableDeclarationGroup(a1, Expr);
        return 0;
      case 51:
        return glpLLVMCGFunctionDefinition(a1, Expr);
      case 57:
        glpLLVMCGInterfaceBlock(a1, Expr);
        return 0;
      case 65:
        Expr = glpExpressionStatementNodeGetExpr(Expr);
        if (!Expr)
          return 0;
        continue;
      case 66:
        glpLLVMCGBlock((_QWORD *)a1, Expr);
        return 0;
      case 67:
        glpLLVMCGIfStatement(a1, Expr);
        return 0;
      case 68:
        glpLLVMCGLoopStatement(a1, Expr);
        return 0;
      case 69:
        glpLLVMCGSwitchStatement(a1, Expr);
        return 0;
      case 70:
        glpLLVMCGCaseStatement(a1, Expr);
      case 71:
        glpLLVMCGDefaultStatement(a1, Expr);
        return 0;
      case 72:
        glpLLVMCGBreakStatement(a1, Expr);
        return 0;
      case 73:
        glpLLVMCGContinueStatement(a1, Expr);
        return 0;
      case 74:
        return (llvm::Function *)glpLLVMCGDiscardStatement(a1, Expr);
      case 75:
        glpLLVMCGReturnStatement(a1, Expr);
      case 78:
        return (llvm::Function *)glpLLVMCGRawCallNode(a1, Expr);
      case 79:
        glpLLVMCGSubroutineRawCall(a1, Expr);
        return 0;
      case 81:
        return (llvm::Function *)glpLLVMCGLValue((uint64_t *)a1, Expr, a3);
      case 82:
        return (llvm::Function *)glpLLVMCGRValue(a1, Expr);
      case 84:
        return (llvm::Function *)glpLLVMCGPPStreamOpNode(a1, Expr);
      default:
        if (Kind == 3)
        {
          result = (llvm::Function *)glpLLVMCGConstant((_QWORD *)a1, Expr);
        }
        else
        {
          if (Kind)
LABEL_38:
            abort();
          result = (llvm::Function *)glpLLVMCGImplicitConversion((_QWORD *)a1, Expr, a3);
        }
        break;
    }
    return result;
  }
}

_DWORD *glpLLVMCreateAttributeDescription(uint64_t a1)
{
  uint64_t v2;
  size_t v3;
  _DWORD *v4;
  _DWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  unint64_t v10;
  uint64_t PrimitiveType;
  uint64_t v12;
  unint64_t v13;
  int v14;
  int Category;
  int ElementType;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;

  v2 = *(unsigned int *)(a1 + 644);
  v3 = 8 * (int)v2 + 8;
  v4 = malloc_type_malloc(v3, 0x1B2F740uLL);
  if (!v4)
    abort();
  v5 = v4;
  bzero(v4, v3);
  *v5 = v2;
  if ((int)v2 >= 1)
  {
    v6 = 0;
    v7 = 8 * v2;
    while (1)
    {
      v8 = *(_QWORD *)(*(_QWORD *)(a1 + 648) + v6);
      v9 = &v5[v6 / 4];
      v5[v6 / 4 + 2] = v5[v6 / 4 + 2] & 0xFFFFC000 | 0xC0;
      v10 = *(_QWORD *)(v8 + 48);
      PrimitiveType = glpPrimitiveTypeGetPrimitiveType(*(_QWORD *)v8);
      v12 = PrimitiveType;
      v13 = (__ROR8__(v10, 2) & 0xC000000000000007) - 1;
      v14 = v13 > 3 ? 0 : dword_22D805E70[v13];
      v9[2] = v9[2] & 0xFFFFFFF8 | v14;
      Category = glpPrimitiveTypeGetCategory(PrimitiveType);
      if (Category == 1)
        break;
      if (Category == 2)
      {
        ElementType = glpPrimitiveVectorGetElementType(v12);
        v17 = v9[2] & 0xFFFFFF3F | (((((glpPrimitiveVectorGetLength(v12) << 6) + 192) >> 6) & 3) << 6);
        LODWORD(v12) = ElementType;
LABEL_11:
        v18 = v17 & 0xFFFFFFC7;
        v19 = v17 & 0xFFFFFFC7 | 8;
        v20 = v17 & 0xFFFFFFC7 | 0x18;
        v21 = v17 & 0xFFFFFFC7 | 0x20;
        if ((_DWORD)v12 != 62)
          v21 = v17;
        if ((_DWORD)v12 != 36)
          v20 = v21;
        if ((_DWORD)v12 != 9)
          v19 = v20;
        if ((_DWORD)v12 == 5)
          v17 = v18 | 0x10;
        if ((_DWORD)v12 == 1)
          v17 = v18;
        if ((int)v12 > 8)
          v17 = v19;
        goto LABEL_25;
      }
      v17 = v9[2];
LABEL_25:
      v9[2] = (v10 >> 27) & 0xC000 | (v10 >> 23) & 0x2000 | v17 & 0xFFFF1FFF;
      v22 = glpLayoutObjectFind(*(uint64_t **)(v8 + 8), 34);
      if (v22)
        v9[2] = v9[2] & 0xFFFFE0FF | ((v22[2] & 0x1F) << 8);
      v23 = glpLayoutObjectFind(*(uint64_t **)(v8 + 8), 35);
      if (v23)
        v5[v6 / 4 + 3] = v5[v6 / 4 + 3] & 0xFFFFFFC0 | v23[2] & 0x3F;
      v24 = glpLayoutObjectFind(*(uint64_t **)(v8 + 8), 36);
      if (v24)
        v5[v6 / 4 + 3] = v5[v6 / 4 + 3] & 0xFFFFFFBF | ((v24[2] & 1) << 6);
      v25 = glpLayoutObjectFind(*(uint64_t **)(v8 + 8), 37);
      if (v25)
        v5[v6 / 4 + 3] = v5[v6 / 4 + 3] & 0xFFFFFF7F | ((v25[2] & 1) << 7);
      v26 = glpLayoutObjectFind(*(uint64_t **)(v8 + 8), 38);
      if (v26)
        v5[v6 / 4 + 3] = v5[v6 / 4 + 3] & 0xFFFFFEFF | ((v26[2] & 1) << 8);
      v27 = glpLayoutObjectFind(*(uint64_t **)(v8 + 8), 41);
      if (v27)
        v5[v6 / 4 + 3] = v5[v6 / 4 + 3] & 0xFFFFFFFE | v27[2] & 1;
      v28 = glpLayoutObjectFind(*(uint64_t **)(v8 + 8), 42);
      if (v28)
        v5[v6 / 4 + 3] = v5[v6 / 4 + 3] & 0xFFFFFFFE | v28[2] & 1;
      v29 = glpLayoutObjectFind(*(uint64_t **)(v8 + 8), 43);
      if (v29)
        v5[v6 / 4 + 3] = v5[v6 / 4 + 3] & 0xFFFFFFE0 | v29[2] & 0x1F;
      v6 += 8;
      if (v7 == v6)
        return v5;
    }
    v17 = v9[2] & 0xFFFFFF3F;
    goto LABEL_11;
  }
  return v5;
}

uint64_t glpLLVMVertexMetaData(uint64_t a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[4];

  v12[3] = *MEMORY[0x24BDAC8D0];
  v4 = *(unsigned int *)(a1 + 692);
  v5 = 8 * v4;
  MEMORY[0x24BDAC7A8](a1);
  if ((unint64_t)(8 * v4) >= 0x200)
    v6 = 512;
  else
    v6 = 8 * v4;
  bzero((char *)v12 - ((v5 + 15) & 0xFFFFFFFF0), v6);
  if ((int)v4 >= 1)
  {
    v7 = 0;
    do
    {
      *(_QWORD *)((char *)&v12[v7 / 8] - ((8 * v4 + 15) & 0xFFFFFFFF0)) = glpLLVMVertexGeometryMetadata(a1, *(_QWORD *)(*(_QWORD *)(a1 + 696) + v7), 0xFFFFFFFF);
      v7 += 8;
    }
    while (v5 != v7);
  }
  v12[0] = *(_QWORD *)(a1 + 168);
  v8 = LLVMMDNodeInContext();
  v9 = *(_QWORD *)(a1 + 192);
  v12[1] = v8;
  v12[2] = v9;
  v10 = LLVMMDNodeInContext();
  return glpAddNamedMetadataOperand(*(_QWORD *)(a1 + 8), a2, v10);
}

uint64_t glpLLVMFragmentMetaData(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v2 = *(unsigned int *)(a1 + 692);
  v3 = 8 * v2;
  MEMORY[0x24BDAC7A8](a1);
  if ((unint64_t)(8 * v2) >= 0x200)
    v4 = 512;
  else
    v4 = 8 * v2;
  bzero((char *)&v22 - ((v3 + 15) & 0xFFFFFFFF0), v4);
  if ((int)v2 >= 1)
  {
    v5 = 0;
    while (1)
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a1 + 696) + v5);
      v7 = *((_DWORD *)glpLayoutObjectFind(*(uint64_t **)(v6 + 8), 68) + 4);
      if (v7 == 15)
        break;
      if (v7 == 7)
      {
        v22 = 0;
        v23 = 0;
        v24 = 0;
        v22 = LLVMMDStringInContext();
        v23 = LLVMMDStringInContext();
        v14 = LLVMMDStringInContext();
        goto LABEL_21;
      }
      if (v7 == 4)
      {
        v8 = glpLayoutObjectFind(*(uint64_t **)(v6 + 8), 72);
        v9 = glpLayoutObjectFind(*(uint64_t **)(v6 + 8), 73);
        v22 = 0;
        v23 = 0;
        v24 = 0;
        v22 = LLVMMDStringInContext();
        v10 = *((unsigned int *)v8 + 4);
        if (v10 > 7)
        {
          v12 = LLVMConstInt();
        }
        else
        {
          v11 = a1 + 8 * v10;
          v12 = *(_QWORD *)(v11 + 520);
          if (!v12)
          {
            v13 = (uint64_t *)(v11 + 520);
            v12 = LLVMConstInt();
            *v13 = v12;
          }
        }
        v23 = v12;
        if (v9)
        {
          v15 = *((_DWORD *)v9 + 4);
          if (v15 > 7)
          {
            v14 = LLVMConstInt();
            goto LABEL_21;
          }
        }
        else
        {
          v15 = 0;
        }
        v16 = a1 + 8 * v15;
        v14 = *(_QWORD *)(v16 + 520);
        if (!v14)
        {
          v17 = (uint64_t *)(v16 + 520);
          v14 = LLVMConstInt();
          *v17 = v14;
        }
LABEL_21:
        v24 = v14;
LABEL_22:
        *(uint64_t *)((char *)&v22 + v5 - ((8 * v2 + 15) & 0xFFFFFFFF0)) = LLVMMDNodeInContext();
      }
      v5 += 8;
      if (v3 == v5)
        goto LABEL_24;
    }
    v22 = 0;
    v22 = LLVMMDStringInContext();
    goto LABEL_22;
  }
LABEL_24:
  v22 = *(_QWORD *)(a1 + 168);
  v18 = LLVMMDNodeInContext();
  v19 = *(_QWORD *)(a1 + 192);
  v23 = v18;
  v24 = v19;
  v20 = LLVMMDNodeInContext();
  return glpAddNamedMetadataOperand(*(_QWORD *)(a1 + 8), "air.fragment", v20);
}

_DWORD *glpLLVMCreateIRBindings(uint64_t a1, unsigned int a2)
{
  _DWORD *result;
  uint64_t v5;

  if (!a2)
    return 0;
  result = malloc_type_malloc(4 * a2 + 4, 0x1B2F740uLL);
  if (!result)
    abort();
  v5 = 0;
  *result = a2;
  do
  {
    result[v5 + 1] = *(_DWORD *)(a1 + v5 * 4);
    ++v5;
  }
  while (a2 != v5);
  return result;
}

uint64_t glpLLVMStringMetadata(int a1, char *__s)
{
  strlen(__s);
  return LLVMMDStringInContext();
}

uint64_t glpGetConstantInt32(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  if (a2 > 7)
    return LLVMConstInt();
  v2 = a1 + 8 * a2;
  v3 = *(_QWORD *)(v2 + 520);
  if (!v3)
  {
    v4 = (uint64_t *)(v2 + 520);
    v3 = LLVMConstInt();
    *v4 = v3;
  }
  return v3;
}

uint64_t glpLLVMAllocateFunctionParameters(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t PointerHash;
  int v6;

  v4 = (*(uint64_t (**)(_QWORD, uint64_t, const char *))(*(_QWORD *)(a1 + 152) + 8))(**(_QWORD **)(a1 + 152), 16, "functionParameters");
  if (a2)
  {
    PointerHash = 0;
    v6 = 15;
  }
  else
  {
    PointerHash = glpMakePointerHash(*(_QWORD **)(a1 + 152));
    v6 = 0;
  }
  *(_QWORD *)v4 = PointerHash;
  *(_DWORD *)(v4 + 8) = v6;
  return v4;
}

uint64_t glpLLVMCleanUpFunctionVariableObjects(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t Extra;
  int v5;
  unsigned int i;
  uint64_t Child;

  if (a2)
  {
    v3 = result;
    if (glpASTNodeGetKind(a2) == 46)
    {
      Extra = glpVariableDeclarationNodeGetExtra(a2);
      result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v3 + 152) + 24))(**(_QWORD **)(v3 + 152), *(_QWORD *)(Extra + 144));
      *(_QWORD *)(Extra + 144) = 0;
    }
    else
    {
      result = glpASTNodeGetChildCount(a2);
      if ((_DWORD)result)
      {
        v5 = result;
        for (i = 0; i != v5; ++i)
        {
          Child = glpASTNodeGetChild(a2, i);
          result = glpLLVMCleanUpFunctionVariableObjects(v3, Child);
        }
      }
    }
  }
  return result;
}

_DWORD *glpLLVMCGDeclareUniformBufferObject(_DWORD *result, _DWORD *a2)
{
  _DWORD *v3;
  int v4;
  int i;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  _QWORD *v11;
  char *v12;
  int v13;

  if (!a2[6])
  {
    v3 = result;
    a2[6] = result[177] + 1;
    v4 = a2[3];
    if (v4 >= 1)
    {
      for (i = 0; i != v4; ++i)
      {
        v6 = glpLinkerPoolAlloc(*((_QWORD *)v3 + 16));
        *(_DWORD *)v6 = i + a2[7];
        *(_DWORD *)(v6 + 4) = glpBufferObjectGetMinimumBufferSize((uint64_t)a2);
        *(_QWORD *)(v6 + 8) = 0;
        v7 = v3[177];
        v8 = v3[176];
        if ((int)v7 + 1 <= v8)
        {
          v12 = (char *)*((_QWORD *)v3 + 89);
          v13 = v3[177];
        }
        else
        {
          if (v8 <= 1)
            v8 = 1;
          v9 = 2 * v8;
          if (v9 <= (int)v7 + 1)
            v10 = v7 + 1;
          else
            v10 = v9;
          v11 = (_QWORD *)*((_QWORD *)v3 + 19);
          v12 = (char *)((uint64_t (*)(_QWORD, uint64_t, const char *))v11[1])(*v11, 8 * v10, "Vector Storage (GLPLLVMBufferDescription *, growth)");
          memcpy(v12, *((const void **)v3 + 89), 8 * v3[177]);
          ((void (*)(_QWORD, _QWORD))v11[3])(*v11, *((_QWORD *)v3 + 89));
          v3[176] = v10;
          *((_QWORD *)v3 + 89) = v12;
          v13 = v3[177];
        }
        result = memmove(&v12[8 * v7 + 8], &v12[8 * v7], 8 * (v13 - v7));
        *(_QWORD *)(*((_QWORD *)v3 + 89) + 8 * v7) = v6;
        ++v3[177];
      }
    }
  }
  return result;
}

void glpLLVMCGDeclareTFBuffer(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  _QWORD *v13;
  char *v14;
  int v15;
  _QWORD *v16;

  if ((*(_DWORD *)(a1 + 320) & 0xFFFFFFFE) == 2 || (*(_WORD *)(a1 + 832) & 2) != 0)
  {
    v4 = (int *)glpLinkerPoolAlloc(*(_QWORD *)(a1 + 128));
    v5 = glpLayoutObjectFind(*(uint64_t **)(a2 + 8), 65);
    v6 = glpLayoutObjectFind(*(uint64_t **)(a2 + 8), 66);
    v7 = glpLayoutObjectFind(*(uint64_t **)(a2 + 8), 67);
    v8 = *((_DWORD *)v5 + 4);
    *v4 = v8;
    v4[1] = *((_DWORD *)v6 + 4);
    v4[2] = *((_DWORD *)v7 + 4);
    *((_QWORD *)v4 + 2) = 0;
    *(_DWORD *)(a1 + 764) |= 1 << v8;
    v9 = *(unsigned int *)(a1 + 724);
    v10 = *(_DWORD *)(a1 + 720);
    if ((int)v9 + 1 <= v10)
    {
      v14 = *(char **)(a1 + 728);
      v15 = *(_DWORD *)(a1 + 724);
    }
    else
    {
      if (v10 <= 1)
        v10 = 1;
      v11 = 2 * v10;
      if (v11 <= (int)v9 + 1)
        v12 = v9 + 1;
      else
        v12 = v11;
      v13 = *(_QWORD **)(a1 + 152);
      v14 = (char *)((uint64_t (*)(_QWORD, uint64_t, const char *))v13[1])(*v13, 8 * v12, "Vector Storage (GLPLLVMTFBufferDescription *, growth)");
      memcpy(v14, *(const void **)(a1 + 728), 8 * *(unsigned int *)(a1 + 724));
      ((void (*)(_QWORD, _QWORD))v13[3])(*v13, *(_QWORD *)(a1 + 728));
      *(_DWORD *)(a1 + 720) = v12;
      *(_QWORD *)(a1 + 728) = v14;
      v15 = *(_DWORD *)(a1 + 724);
    }
    memmove(&v14[8 * v9 + 8], &v14[8 * v9], 8 * (v15 - v9));
    *(_QWORD *)(*(_QWORD *)(a1 + 728) + 8 * v9) = v4;
    ++*(_DWORD *)(a1 + 724);
    *(_DWORD *)(a1 + 4 * *v4 + 768) = v4[2];
    glpLLVMAllocVariableExtra(*(_QWORD *)(a1 + 152), a2);
    v16 = *(_QWORD **)(a2 + 144);
    *v16 = 0;
    v16[2] = v4;
  }
}

uint64_t glpLLVMGetFunctionGlobalVariableUse(uint64_t result, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t SubroutineUniformHash;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t Def;
  uint64_t v23;
  uint64_t Prototype;
  uint64_t Extra;
  uint64_t v26;
  uint64_t VariableExtra;
  uint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  int v33;
  unsigned int i;
  uint64_t Child;

  if (a2)
  {
    v7 = result;
    switch(glpASTNodeGetKind(a2))
    {
      case 'N':
        v8 = *(_QWORD *)(glpRawCallNodeGetExtra(a2) + 152);
        glpLLVMAddSortedParameters(a3, *(_QWORD *)v8);
        v9 = *a4 | *(_DWORD *)(v8 + 8);
        goto LABEL_34;
      case 'O':
        *a4 |= 1u;
        v10 = glpSubroutineRawCallNodeGetExtra(a2);
        SubroutineUniformHash = glpLinkedProgramGetSubroutineUniformHash(*(_QWORD *)(v7 + 136), *(_DWORD *)(v7 + 320));
        v12 = 0;
        v13 = *(unsigned int *)(SubroutineUniformHash + 32);
        v14 = *(uint64_t **)(SubroutineUniformHash + 40);
        do
        {
          v15 = *v14;
          if (*v14)
          {
            v16 = *(_DWORD *)(v15 + 4);
            v17 = v15 + 64;
            if (v16 == *(_DWORD *)(v10 + 40))
              v12 = v17;
          }
          v14 += 4;
          --v13;
        }
        while (v13);
        if (*(_DWORD *)(v12 + 4))
        {
          v18 = 0;
          do
          {
            v19 = *(_DWORD *)(*(_QWORD *)(v12 + 8) + 4 * v18);
            glpTopLevelNodeGetDefCount(*(_QWORD *)(*(_QWORD *)(v7 + 128) + 8 * *(unsigned int *)(v7 + 320) + 184));
            v20 = 0;
            v21 = 0;
            do
            {
              Def = glpTopLevelNodeGetDef(*(_QWORD *)(*(_QWORD *)(v7 + 128) + 8 * *(unsigned int *)(v7 + 320) + 184), v20);
              if (Def)
              {
                v23 = Def;
                if (glpASTNodeGetKind(Def) == 51)
                {
                  Prototype = glpFunctionDefinitionNodeGetPrototype(v23);
                  Extra = glpFunctionPrototypeNodeGetExtra(Prototype);
                  if ((*(_BYTE *)(Extra + 10) & 0x10) != 0 && *(_DWORD *)(Extra + 160) == v19)
                    v21 = Extra;
                }
              }
              ++v20;
            }
            while (v20 < glpTopLevelNodeGetDefCount(*(_QWORD *)(*(_QWORD *)(v7 + 128)
                                                                             + 8 * *(unsigned int *)(v7 + 320)
                                                                             + 184)));
            v26 = *(_QWORD *)(v21 + 152);
            glpLLVMAddSortedParameters(a3, *(_QWORD *)v26);
            *a4 |= *(_DWORD *)(v26 + 8);
            ++v18;
          }
          while (v18 < *(unsigned int *)(v12 + 4));
        }
        goto LABEL_35;
      case 'Q':
        VariableExtra = glpLValueNodeGetVariableExtra(a2);
        v28 = *(_QWORD *)(VariableExtra + 48);
        if ((v28 & 0x100000000) != 0)
        {
          v32 = *a4;
          if ((v28 & 0x800000000) != 0)
            v9 = v32 | 2;
          else
            v9 = v32 | 1;
LABEL_34:
          *a4 = v9;
        }
        else if ((v28 & 0x86000000) != 0)
        {
          v29 = VariableExtra;
          v30 = *(uint64_t **)(VariableExtra + 8);
          if (!v30 || !glpLayoutObjectFind(v30, 28))
          {
            v31 = *(_QWORD *)(v29 + 144);
            if (!v31 || !*(_QWORD *)(v31 + 16))
              glpLLVMAddParameterToHash(v29, a3);
          }
        }
LABEL_35:
        result = glpASTNodeGetChildCount(a2);
        if ((_DWORD)result)
        {
          v33 = result;
          for (i = 0; i != v33; ++i)
          {
            Child = glpASTNodeGetChild(a2, i);
            result = glpLLVMGetFunctionGlobalVariableUse(v7, Child, a3, a4);
          }
        }
        break;
      case 'T':
        if (glpPPStreamOpNodeGetHasSrctex(a2))
          *a4 |= 8u;
        if (glpPPStreamOpNodeGetOpcode(a2) != 153)
          goto LABEL_35;
        v9 = *a4 | 4;
        goto LABEL_34;
      default:
        goto LABEL_35;
    }
  }
  return result;
}

void glpLLVMGetTextureTypeFromSampler(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v4;

  if (glpPrimitiveSamplerGetPPTextarget(a3) < 0x12)
  {
    v4 = glpLLVMGetNamedTypeInner();
    *a2 = MEMORY[0x22E316EC8](v4, 2);
    glpLLVMGetNamedTypeInner();
    JUMPOUT(0x22E316EC8);
  }
  abort();
}

uint64_t glpLLVMAddParameterToHash(unint64_t a1, uint64_t a2)
{
  uint64_t result;
  double v5;

  result = glpPointerHashGet(a2, a1);
  if (!result)
    return glpPointerHashPut(a2, a1, (*(_DWORD *)(a2 + 36) + 1), v5);
  return result;
}

void glpLLVMAddSortedParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  size_t v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  double v12;
  _QWORD v13[2];

  v13[1] = *MEMORY[0x24BDAC8D0];
  v4 = *(unsigned int *)(a2 + 36);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (_QWORD *)((char *)v13 - ((v5 + 15) & 0xFFFFFFFF0));
  if (v5 >= 0x200)
    v7 = 512;
  else
    v7 = v5;
  bzero((char *)v13 - ((v5 + 15) & 0xFFFFFFFF0), v7);
  v8 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v8)
  {
    v9 = (unint64_t *)(*(_QWORD *)(a2 + 40) + 8);
    do
    {
      v10 = *(v9 - 1);
      if (v10)
        *(unint64_t *)((char *)v6 + (((v10 << 32) - 0x100000000) >> 29)) = *v9;
      v9 += 3;
      --v8;
    }
    while (v8);
  }
  if ((int)v4 >= 1)
  {
    do
    {
      v11 = *v6;
      if (!glpPointerHashGet(a1, *v6))
        glpPointerHashPut(a1, v11, (*(_DWORD *)(a1 + 36) + 1), v12);
      ++v6;
      --v4;
    }
    while (v4);
  }
}

uint64_t glpLLVMCGImplicitConversion(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t Expr;
  uint64_t v7;
  uint64_t SaType;
  uint64_t PrimitiveType;
  char SaFlags;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  int ScalarType;
  int v21;
  int Length;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  char v26;
  _DWORD *v27;
  char v28;
  int v29;

  glpLLVMAddLineInformation((uint64_t)a1, a2);
  Expr = glpUnaryOperatorNodeGetExpr(a2);
  v7 = glpLLVMCGNode(a1, Expr, a3);
  SaType = glpASTNodeGetSaType(Expr);
  PrimitiveType = glpPrimitiveTypeGetPrimitiveType(SaType);
  SaFlags = glpASTNodeGetSaFlags(Expr);
  v11 = glpPrecisionIndexFromSAFlags(SaFlags);
  v12 = glpTypeConversionNodeGetToType(a2);
  v13 = glpPrimitiveTypeGetPrimitiveType(v12);
  v14 = glpASTNodeGetSaFlags(a2);
  v15 = glpPrecisionIndexFromSAFlags(v14);
  v16 = v15;
  v17 = glpPrimitiveTypeToLLVMType(a1, v13, v15);
  v18 = LLVMTypeOf();
  if (glpPrimitiveTypeGetCategory(v13) == 4)
    return v7;
  ScalarType = glpPrimitiveTypeGetScalarType(PrimitiveType);
  v21 = glpPrimitiveTypeGetScalarType(v13);
  if (v21 == 9)
  {
    if (ScalarType == 62 || ScalarType == 1)
    {
      MEMORY[0x22E316D18](v18);
      return LLVMBuildFCmp();
    }
    else
    {
      MEMORY[0x22E316D18](v18);
      return LLVMBuildICmp();
    }
  }
  if (ScalarType == 1 || ScalarType == 62)
  {
    if (v21 == 62 || v21 == 1)
      return LLVMBuildFPCast();
    goto LABEL_18;
  }
  if (v21 == 1 || v21 == 62)
  {
    if (ScalarType == 9)
    {
      if (glpPrimitiveTypeGetCategory(PrimitiveType) == 2)
      {
        Length = glpPrimitiveVectorGetLength(PrimitiveType);
        PrimitiveType = glpGetVectorType(36, Length);
      }
      else
      {
        PrimitiveType = 36;
      }
      glpPrimitiveTypeToLLVMType(a1, PrimitiveType, v11);
      v24 = LLVMBuildZExt();
      v23 = (uint64_t)a1;
      return glpLLVMBuildConversion(v23, v24, v17, PrimitiveType, v11, v13, v16);
    }
LABEL_18:
    v23 = (uint64_t)a1;
    v24 = v7;
    return glpLLVMBuildConversion(v23, v24, v17, PrimitiveType, v11, v13, v16);
  }
  if (ScalarType == 9)
    return LLVMBuildZExt();
  switch((int)v11)
  {
    case 0:
    case 3:
      v25 = (_DWORD *)a1 + 31;
      goto LABEL_28;
    case 1:
      v25 = (_DWORD *)a1 + 29;
      goto LABEL_28;
    case 2:
      v25 = a1 + 15;
LABEL_28:
      if (*v25 <= 0x10u)
        goto LABEL_29;
      v26 = 0;
      break;
    default:
LABEL_29:
      v26 = 1;
      break;
  }
  switch(v16)
  {
    case 0:
    case 3:
      v27 = (_DWORD *)a1 + 31;
      goto LABEL_35;
    case 1:
      v27 = (_DWORD *)a1 + 29;
      goto LABEL_35;
    case 2:
      v27 = a1 + 15;
LABEL_35:
      v28 = v26 ^ 1;
      if (*v27 < 0x11u)
        v28 = 1;
      if ((v28 & 1) != 0)
        return LLVMBuildTrunc();
      v29 = glpPrimitiveTypeGetScalarType(PrimitiveType);
      if (v29 == 36 || v29 == 9)
        return LLVMBuildZExt();
      result = LLVMBuildSExt();
      break;
    default:
      return LLVMBuildTrunc();
  }
  return result;
}

uint64_t glpLLVMCGConstant(_QWORD *a1, uint64_t a2)
{
  char SaFlags;
  uint64_t v5;
  unsigned int *Type;
  uint64_t Value;
  int Kind;
  uint64_t PrimitiveType;
  uint64_t ColumnType;
  unsigned int v12;
  uint64_t Size;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  size_t v17;
  _QWORD v18[2];

  v18[1] = *MEMORY[0x24BDAC8D0];
  SaFlags = glpASTNodeGetSaFlags(a2);
  v5 = glpPrecisionIndexFromSAFlags(SaFlags);
  Type = (unsigned int *)glpConstantNodeGetType(a2);
  Value = glpConstantNodeGetValue(a2);
  Kind = glpTypeGetKind(Type);
  if ((Kind - 1) < 2)
    return glpLLVMAggregateConstant(a1, Type, v5, Value);
  if (Kind)
    abort();
  PrimitiveType = glpPrimitiveTypeGetPrimitiveType((uint64_t)Type);
  if (glpPrimitiveTypeGetCategory(PrimitiveType) == 3)
  {
    if (glpPrimitiveTypeGetScalarType(PrimitiveType) == 62)
      return glpLLVMAggregateConstant(a1, Type, v5, Value);
    ColumnType = glpPrimitiveMatrixGetColumnType(PrimitiveType);
    v12 = glpABIGetTypeSize(0, (uint64_t)Type, 0);
    Size = glpTypeSizeGetSize(v12);
    MEMORY[0x24BDAC7A8](Size);
    v16 = (char *)v18 - v15;
    if (v14 >= 0x200)
      v17 = 512;
    else
      v17 = v14;
    bzero((char *)v18 - v15, v17);
    glpLLVMPrimitiveConstant(a1, Value, (uint64_t)v16, 0, PrimitiveType, ColumnType, v5);
    glpPrimitiveTypeToLLVMType(a1, ColumnType, v5);
    return LLVMConstArray();
  }
  else
  {
    v18[0] = 0;
    glpLLVMPrimitiveConstant(a1, Value, (uint64_t)v18, 0, PrimitiveType, PrimitiveType, v5);
    return v18[0];
  }
}

uint64_t glpLLVMCGPPStreamOpNode(uint64_t a1, uint64_t a2)
{
  int Opcode;
  int v5;
  uint64_t Child;
  int HasSrctex;
  uint64_t ChildCount;
  unint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t *v12;
  uint64_t OpPrimitiveType;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;
  uint64_t SaType;
  int PrimitiveType;
  char SaFlags;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  int v28;
  uint64_t v29;
  uint64_t ReturnPrimitiveType;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t LODOperation;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t OffsetExpr;
  int v42;
  uint64_t v43;
  int v45;
  uint64_t v46;
  int *v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  const char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  const char *v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int ScalarType;
  char v109;
  int v110;
  uint64_t v111;
  unint64_t VariableExtra;
  uint64_t v113;
  const char *v114;
  int v115;
  uint64_t v116;
  const char *v117;
  uint64_t *v118;
  uint64_t *v119;
  uint64_t v120;
  unsigned int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  const char *v127;
  uint64_t v128;
  unsigned int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  int v134;
  uint64_t v135;
  unsigned int v136;
  uint64_t *v137;
  BOOL v138;
  const char *v139;
  const char *v140;
  _BOOL4 v142;
  BOOL v143;
  uint64_t ComponentCount;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t ConstantInt32;
  uint64_t *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  int ScalarCount;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  BOOL v178;
  const char *v179;
  const char *v180;
  int v181;
  uint64_t v182;
  int v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  int v189;
  uint64_t v190;
  int v191;
  uint64_t Element;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  int Length;
  uint64_t v199;
  uint64_t v200;
  const char *v201;
  uint64_t v202;
  uint64_t v203;
  int v204;
  uint64_t v205;
  int v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t Offset;
  uint64_t v218;
  uint64_t v219;
  unsigned int Swizzle;
  uint64_t VectorElementExpr;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t *v229;
  uint64_t v230;
  unsigned int *v231;
  uint64_t v232;
  const char *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  _QWORD v243[3];

  v243[1] = *MEMORY[0x24BDAC8D0];
  glpLLVMAddLineInformation(a1, a2);
  Opcode = glpPPStreamOpNodeGetOpcode(a2);
  v5 = 0;
  if (Opcode > 166)
  {
    LODWORD(v230) = Opcode;
    if ((Opcode - 167) < 3)
    {
      Child = glpASTNodeGetChild(a2, 0);
      v5 = HIBYTE(*(_DWORD *)(glpLValueNodeGetVariableExtra(Child) + 48)) & 1;
    }
    goto LABEL_10;
  }
  if (Opcode != 78)
  {
    if (Opcode == 121)
    {
      v43 = glpASTNodeGetChild(a2, 0);
      glpLLVMCGNode(a1, v43, 1);
      if (!*(_QWORD *)(a1 + 584))
      {
        LLVMTypeOf();
        *(_QWORD *)(a1 + 584) = glpBuildAlloca();
      }
      LLVMBuildStore();
    }
    else
    {
      LODWORD(v230) = Opcode;
      if (Opcode != 153)
      {
LABEL_10:
        HasSrctex = glpPPStreamOpNodeGetHasSrctex(a2);
        ChildCount = glpASTNodeGetChildCount(a2);
        v229 = &v226;
        MEMORY[0x24BDAC7A8](ChildCount);
        if (v9 >= 0x200)
          v11 = 512;
        else
          v11 = v9;
        v12 = (uint64_t *)((char *)&v226 - v10);
        bzero((char *)&v226 - v10, v11);
        OpPrimitiveType = glpPPStreamOpNodeGetOpPrimitiveType(a2);
        if ((_DWORD)OpPrimitiveType)
        {
          OpPrimitiveType = glpPrimitiveTypeGetScalarType(OpPrimitiveType);
          LODWORD(v227) = OpPrimitiveType;
        }
        else
        {
          LODWORD(v227) = 0;
        }
        v14 = MEMORY[0x24BDAC7A8](OpPrimitiveType);
        v231 = (unsigned int *)((char *)&v226 - ((v15 + 15) & 0x7FFFFFFF0));
        MEMORY[0x24BDAC7A8](v14);
        v17 = (int *)((char *)&v226 - v16);
        v228 = ChildCount;
        v18 = (ChildCount - HasSrctex);
        if ((_DWORD)v18)
        {
          for (i = 0; i != v18; ++i)
          {
            if (!v5 || i)
            {
              v20 = glpASTNodeGetChild(a2, i);
              v12[i] = glpLLVMCGNode(a1, v20, 1);
              SaType = glpASTNodeGetSaType(v20);
              PrimitiveType = glpPrimitiveTypeGetPrimitiveType(SaType);
              v231[i] = PrimitiveType;
              SaFlags = glpASTNodeGetSaFlags(v20);
              v17[i] = glpPrecisionIndexFromSAFlags(SaFlags);
              v24 = (unsigned int *)glpASTNodeGetSaType(v20);
              if (!glpTypeGetKind(v24))
              {
                v25 = glpPrimitiveTypeGetPrimitiveType((uint64_t)v24);
                glpPrimitiveTypeGetScalarType(v25);
              }
            }
          }
        }
        v26 = a1;
        v27 = v12;
        if (HasSrctex)
        {
          v28 = v228;
          v29 = glpASTNodeGetChild(a2, (int)v228 - 1);
          v12[v28 - 1] = glpLLVMCGSamplerNode(a1, v29, &v12[v28]);
        }
        ReturnPrimitiveType = glpPPStreamOpNodeGetReturnPrimitiveType(a2);
        v31 = glpASTNodeGetSaFlags(a2);
        v32 = glpPrecisionIndexFromSAFlags(v31);
        v33 = glpPrimitiveTypeToLLVMType((_QWORD *)a1, ReturnPrimitiveType, v32);
        v243[0] = 0;
        v34 = v33;
        switch((int)v230)
        {
          case 2:
            if ((_DWORD)v228 == 2)
              glpMatchInputSize(v26, (uint64_t)v12, v231);
            if (v227 <= 0x24 && ((1 << v227) & 0x1000000220) != 0)
            {
              v127 = "air.abs";
              v128 = v26;
              v129 = 1;
              goto LABEL_282;
            }
            v114 = "air.fabs";
            goto LABEL_255;
          case 3:
            v114 = "air.ceil";
            goto LABEL_255;
          case 4:
            v114 = "air.fract";
            goto LABEL_255;
          case 5:
            v114 = "air.floor";
            goto LABEL_255;
          case 6:
            v114 = "air.fwidth";
            goto LABEL_255;
          case 7:
            if (v227 <= 0x24 && ((1 << v227) & 0x1000000220) != 0)
            {
              v130 = *v231;
              v131 = *v17;
              glpBuildConstantIntVector((_QWORD *)v26, v130, v131);
              glpBuildConstantIntVector((_QWORD *)v26, v130, v131);
              glpBuildConstantIntVector((_QWORD *)v26, v130, v131);
              LLVMBuildICmp();
              LLVMBuildSelect();
              LLVMBuildICmp();
              goto LABEL_382;
            }
            v114 = "air.sign";
LABEL_255:
            v135 = v26;
            v136 = 1;
            goto LABEL_256;
          case 8:
            v132 = *(_QWORD *)(v26 + 64);
            v133 = *v231;
            v134 = *v17;
            v114 = "air.any";
            goto LABEL_82;
          case 9:
            v132 = *(_QWORD *)(v26 + 64);
            v133 = *v231;
            v134 = *v17;
            v114 = "air.all";
LABEL_82:
            v135 = v26;
            v136 = 1;
            v137 = v12;
            goto LABEL_259;
          case 10:
            LODOperation = LLVMBuildNot();
            goto LABEL_260;
          case 11:
            if (glpPrimitiveTypeGetCategory(ReturnPrimitiveType) == 1)
            {
              v133 = *v231;
              v134 = *v17;
              v114 = "air.noise1";
            }
            else
            {
              Length = glpPrimitiveVectorGetLength(ReturnPrimitiveType);
              switch(Length)
              {
                case 4:
                  v133 = *v231;
                  v134 = *v17;
                  v114 = "air.noise4";
                  break;
                case 3:
                  v133 = *v231;
                  v134 = *v17;
                  v114 = "air.noise3";
                  break;
                case 2:
                  v133 = *v231;
                  v134 = *v17;
                  v114 = "air.noise2";
                  break;
                default:
                  return v243[0];
              }
            }
LABEL_191:
            v135 = v26;
            v136 = 1;
LABEL_192:
            v137 = v12;
            v132 = v34;
            goto LABEL_259;
          case 12:
            if ((_DWORD)v32)
              v138 = (_DWORD)v32 == 3;
            else
              v138 = 1;
            v139 = "air.fast_sqrt";
            v140 = "air.sqrt";
            goto LABEL_252;
          case 16:
            if ((_DWORD)v32)
              v138 = (_DWORD)v32 == 3;
            else
              v138 = 1;
            v139 = "air.fast_exp2";
            v140 = "air.exp2";
            goto LABEL_252;
          case 18:
            LODOperation = glpLLVMBuildLength(v26, v12, (int *)v231, v32, v33);
            goto LABEL_260;
          case 19:
            if ((_DWORD)v32)
              v138 = (_DWORD)v32 == 3;
            else
              v138 = 1;
            v139 = "air.fast_log2";
            v140 = "air.log2";
            goto LABEL_252;
          case 21:
            LODOperation = glpLLVMBuildNormalize(v26, v12, (int *)v231, v32);
            goto LABEL_260;
          case 22:
          case 23:
            LODOperation = glpLLVMBuildConvert(v26, (uint64_t)v12, v231);
            goto LABEL_260;
          case 25:
            if ((_DWORD)v32)
              v138 = (_DWORD)v32 == 3;
            else
              v138 = 1;
            v139 = "air.fast_sin";
            v140 = "air.sin";
            goto LABEL_252;
          case 26:
            if ((_DWORD)v32)
              v138 = (_DWORD)v32 == 3;
            else
              v138 = 1;
            v139 = "air.fast_cos";
            v140 = "air.cos";
            goto LABEL_252;
          case 27:
            if ((_DWORD)v32)
              v138 = (_DWORD)v32 == 3;
            else
              v138 = 1;
            v139 = "air.fast_tan";
            v140 = "air.tan";
            goto LABEL_252;
          case 28:
            if ((_DWORD)v32)
              v138 = (_DWORD)v32 == 3;
            else
              v138 = 1;
            v139 = "air.fast_asin";
            v140 = "air.asin";
            goto LABEL_252;
          case 29:
            if ((_DWORD)v32)
              v138 = (_DWORD)v32 == 3;
            else
              v138 = 1;
            v139 = "air.fast_acos";
            v140 = "air.acos";
            goto LABEL_252;
          case 30:
            v142 = (_DWORD)v32 != 3 && (_DWORD)v32 != 0;
            v133 = *v231;
            v136 = v228;
            if ((_DWORD)v228 == 2)
            {
              if (v142)
                v114 = "air.atan2";
              else
                v114 = "air.fast_atan2";
              v135 = v26;
            }
            else
            {
              if (v142)
                v114 = "air.atan";
              else
                v114 = "air.fast_atan";
              v135 = v26;
            }
            goto LABEL_369;
          case 31:
            glpMatchInputSize(v26, (uint64_t)v12, v231);
            if (v227 <= 0x24 && ((1 << v227) & 0x1000000220) != 0)
              LODOperation = LLVMBuildAdd();
            else
              LODOperation = LLVMBuildFAdd();
            goto LABEL_260;
          case 32:
            glpMatchInputSize(v26, (uint64_t)v12, v231);
            if (v227 <= 0x24 && ((1 << v227) & 0x1000000220) != 0)
              goto LABEL_358;
            LODOperation = LLVMBuildFSub();
            goto LABEL_260;
          case 33:
            glpMatchInputSize(v26, (uint64_t)v12, v231);
            if (v227 <= 0x24 && ((1 << v227) & 0x1000000220) != 0)
            {
              if ((_DWORD)v227 == 5)
                LODOperation = LLVMBuildSRem();
              else
                LODOperation = LLVMBuildURem();
              goto LABEL_260;
            }
            v133 = *v231;
            v114 = "air.mod";
            v135 = v26;
            v136 = 2;
LABEL_369:
            v137 = v12;
            v132 = v34;
            goto LABEL_258;
          case 34:
            glpMatchInputSize(v26, (uint64_t)v12, v231);
            if (v227 <= 0x24 && ((1 << v227) & 0x1000000220) != 0)
              LODOperation = LLVMBuildMul();
            else
              LODOperation = LLVMBuildFMul();
            goto LABEL_260;
          case 36:
          case 125:
            glpMatchInputSize(v26, (uint64_t)v12, v231);
            LODOperation = LLVMBuildAnd();
            goto LABEL_260;
          case 37:
          case 126:
            glpMatchInputSize(v26, (uint64_t)v12, v231);
            LODOperation = LLVMBuildOr();
            goto LABEL_260;
          case 38:
          case 127:
            glpMatchInputSize(v26, (uint64_t)v12, v231);
            goto LABEL_215;
          case 39:
            v133 = *v231;
            v134 = *v17;
            v114 = "air.dot";
            goto LABEL_165;
          case 44:
            if ((_DWORD)v228 == 2)
              glpMatchInputSize(v26, (uint64_t)v12, v231);
            if (v227 <= 0x24 && ((1 << v227) & 0x1000000220) != 0)
            {
              v127 = "air.min";
              goto LABEL_281;
            }
            if ((_DWORD)v32)
              v178 = (_DWORD)v32 == 3;
            else
              v178 = 1;
            v179 = "air.fast_fmin";
            v180 = "air.fmin";
            goto LABEL_276;
          case 45:
            if ((_DWORD)v228 == 2)
              glpMatchInputSize(v26, (uint64_t)v12, v231);
            if (v227 <= 0x24 && ((1 << v227) & 0x1000000220) != 0)
            {
              v127 = "air.max";
LABEL_281:
              v128 = v26;
              v129 = 2;
              goto LABEL_282;
            }
            if ((_DWORD)v32)
              v178 = (_DWORD)v32 == 3;
            else
              v178 = 1;
            v179 = "air.fast_fmax";
            v180 = "air.fmax";
LABEL_276:
            if (v178)
              v114 = v179;
            else
              v114 = v180;
            v135 = v26;
            v136 = 2;
            goto LABEL_256;
          case 46:
            LODOperation = glpLLVMBuildCross(v26);
            goto LABEL_260;
          case 47:
            LODOperation = glpLLVMBuildReflect(v26, (uint64_t)v12, (uint64_t)v231, v32);
            goto LABEL_260;
          case 49:
          case 50:
          case 51:
          case 52:
          case 53:
          case 54:
            v104 = v230;
            glpMatchInputSize(v26, (uint64_t)v12, v231);
            v105 = glpASTNodeGetChild(a2, 0);
            v106 = glpASTNodeGetSaType(v105);
            v107 = glpPrimitiveTypeGetPrimitiveType(v106);
            ScalarType = glpPrimitiveTypeGetScalarType(v107);
            v109 = 1;
            if (ScalarType > 35)
            {
              if (ScalarType != 62)
                goto LABEL_295;
            }
            else if (ScalarType != 1)
            {
              goto LABEL_295;
            }
            v109 = 0;
LABEL_295:
            if ((v109 & 1) != 0)
              v187 = LLVMBuildICmp();
            else
              v187 = LLVMBuildFCmp();
            v188 = v187;
            if (glpPrimitiveTypeGetCategory(ReturnPrimitiveType) == 2)
              v189 = glpPrimitiveVectorGetLength(ReturnPrimitiveType);
            else
              v189 = 1;
            v190 = *v231;
            if (glpPrimitiveTypeGetCategory(*v231) == 2)
            {
              v191 = glpPrimitiveVectorGetLength(v190);
              if (v189 < v191)
              {
                if (v191 < 1)
                {
                  Element = 0;
                  goto LABEL_319;
                }
LABEL_308:
                v193 = 0;
                v194 = 0;
                v195 = v191;
                v196 = v26 + 520;
                do
                {
                  if (v193 > 7)
                  {
                    LLVMConstInt();
                  }
                  else if (!*(_QWORD *)(v196 + 8 * v193))
                  {
                    *(_QWORD *)(v196 + 8 * v193) = LLVMConstInt();
                  }
                  Element = LLVMBuildExtractElement();
                  if (v194)
                  {
                    if (v104 == 49)
                      v197 = LLVMBuildAnd();
                    else
                      v197 = LLVMBuildOr();
                    Element = v197;
                  }
                  ++v193;
                  v194 = Element;
                }
                while (v195 != v193);
LABEL_319:
                v243[0] = Element;
                return v243[0];
              }
            }
            else if (v189 < 1)
            {
              v191 = 1;
              goto LABEL_308;
            }
            Element = v188;
            goto LABEL_319;
          case 56:
            if ((_DWORD)v32)
              v143 = (_DWORD)v32 == 3;
            else
              v143 = 1;
            if (v143)
              v114 = "air.fast_powr";
            else
              v114 = "air.powr";
            v133 = *v231;
            v134 = *v17;
LABEL_165:
            v135 = v26;
            v136 = 2;
            goto LABEL_192;
          case 57:
            LLVMBuildExtractElement();
            ComponentCount = glpGetComponentCount(*v231);
            if (!*(_QWORD *)(v26 + 520))
              *(_QWORD *)(v26 + 520) = LLVMConstInt();
            v145 = LLVMTypeOf();
            MEMORY[0x22E316E2C](v145);
            LLVMBuildInsertElement();
            v146 = MEMORY[0x22E316F4C](*(_QWORD *)(v26 + 40), ComponentCount);
            MEMORY[0x22E316D18](v146);
            LODOperation = LLVMBuildShuffleVector();
            goto LABEL_260;
          case 58:
            glpMatchInputSize(v26, (uint64_t)v12, v231);
            if (v227 <= 0x24 && ((1 << v227) & 0x1000000220) != 0)
            {
              if ((_DWORD)v227 == 5)
                LODOperation = LLVMBuildSDiv();
              else
                LODOperation = LLVMBuildUDiv();
            }
            else
            {
              LODOperation = LLVMBuildFDiv();
            }
            goto LABEL_260;
          case 59:
            LODOperation = glpLLVMBuildFaceForward(v26, (uint64_t)v12, v231, v32);
            goto LABEL_260;
          case 60:
            LODOperation = glpLLVMBuildMix(v26, v12, v231, v33, v32);
            goto LABEL_260;
          case 61:
            glpMatchInputSize3(v26, (uint64_t)v12, v231);
            if (v227 <= 0x24 && ((1 << v227) & 0x1000000220) != 0)
            {
              v127 = "air.clamp";
              v128 = v26;
              v129 = 3;
LABEL_282:
              LODOperation = glpLLVMBuildBuiltinWithPrefix(v128, v127, v129, (uint64_t)v12, v34, ReturnPrimitiveType, v32);
            }
            else
            {
              v114 = "air.clamp";
LABEL_183:
              v135 = v26;
              v136 = 3;
LABEL_256:
              v137 = v12;
LABEL_257:
              v132 = v34;
              v133 = ReturnPrimitiveType;
LABEL_258:
              v134 = v32;
LABEL_259:
              LODOperation = glpLLVMBuildBuiltinNoPrefix(v135, v114, v136, (uint64_t)v137, v132, v133, v134);
            }
            goto LABEL_260;
          case 62:
            if (v227 <= 0x24 && ((1 << v227) & 0x1000000220) != 0)
            {
              if ((_DWORD)v227 == 5 || (_DWORD)v227 == 36 || (_DWORD)v227 == 9)
              {
                v223 = LLVMTypeOf();
                MEMORY[0x22E316D18](v223);
                LLVMBuildICmp();
              }
            }
            else
            {
              v224 = LLVMTypeOf();
              MEMORY[0x22E316D18](v224);
              LLVMBuildFCmp();
            }
            goto LABEL_382;
          case 63:
            v114 = "air.mad";
            goto LABEL_183;
          case 64:
            LODOperation = glpLLVMBuildSmoothStep(v26, v12, v231, v32, v33);
            goto LABEL_260;
          case 66:
          case 67:
          case 68:
          case 69:
          case 70:
          case 71:
          case 98:
          case 99:
          case 130:
          case 165:
          case 166:
            LODOperation = glpBuildTextureOperation(v26, a2, v12, v231, v17, (int)v228 + 1);
            goto LABEL_260;
          case 78:
          case 161:
            v114 = "air.popcount";
            goto LABEL_255;
          case 80:
            v114 = "air.dfdx";
            goto LABEL_255;
          case 81:
            v114 = "air.dfdy";
            goto LABEL_255;
          case 92:
            glpLLVMCastToHalf(v26, *v12, *v231, *v17);
            goto LABEL_49;
          case 93:
            v133 = *v231;
            v134 = *v17;
            v114 = "air.pack.unorm2x16";
            goto LABEL_191;
          case 94:
            v133 = *v231;
            v134 = *v17;
            v114 = "air.pack.snorm4x8";
            goto LABEL_191;
          case 95:
            v133 = *v231;
            v134 = *v17;
            v114 = "air.pack.unorm4x8";
            goto LABEL_191;
          case 100:
            v147 = LLVMHalfTypeInContext();
            MEMORY[0x22E316F4C](v147, 2);
            v243[0] = LLVMBuildBitCast();
            if ((_DWORD)v32 != 3 && (_DWORD)v32)
              return v243[0];
            v237 = 0x300000001;
            LODOperation = glpLLVMCallFunctionInner(v26, (uint64_t)"air.convert.f.v2f32.f.v2f16", v34, (uint64_t)v243, 1u, (int *)&v237, 2u, (uint64_t)"");
            goto LABEL_260;
          case 101:
            v114 = "air.unpack.unorm2x16";
            goto LABEL_255;
          case 102:
            v114 = "air.unpack.snorm4x8";
            goto LABEL_255;
          case 103:
            v114 = "air.unpack.unorm4x8";
            goto LABEL_255;
          case 105:
            LODOperation = glpLLVMBuildRefract(v26, (uint64_t)v12, (uint64_t)v231, v32, v33);
            goto LABEL_260;
          case 112:
            if ((_DWORD)v32)
              v138 = (_DWORD)v32 == 3;
            else
              v138 = 1;
            v139 = "air.fast_exp";
            v140 = "air.exp";
            goto LABEL_252;
          case 113:
            if ((_DWORD)v32)
              v138 = (_DWORD)v32 == 3;
            else
              v138 = 1;
            v139 = "air.fast_log";
            v140 = "air.log";
            goto LABEL_252;
          case 119:
          case 120:
            v234 = *v12;
            v115 = v230;
            v116 = LLVMVoidTypeInContext();
            if (v115 == 119)
              v117 = "air.emit_vertex";
            else
              v117 = "air.end_primitive";
            v237 = 0x300000001;
            v118 = &v234;
            v119 = &v237;
            v120 = v26;
            v121 = 1;
            goto LABEL_290;
          case 123:
            v114 = "air.round";
            goto LABEL_255;
          case 124:
            v114 = "air.trunc";
            goto LABEL_255;
          case 128:
            glpMatchInputSize(v26, (uint64_t)v12, v231);
            LODOperation = LLVMBuildShl();
            goto LABEL_260;
          case 129:
            glpMatchInputSize(v26, (uint64_t)v12, v231);
            if ((_DWORD)v227 == 5)
              LODOperation = LLVMBuildAShr();
            else
              LODOperation = LLVMBuildLShr();
            goto LABEL_260;
          case 131:
            LODOperation = glpBuildTextureSizeOperation((_QWORD *)v26, a2, v12, v228);
            goto LABEL_260;
          case 132:
            v148 = LLVMTypeOf();
            MEMORY[0x22E316CF4](v148);
LABEL_215:
            LODOperation = LLVMBuildXor();
            goto LABEL_260;
          case 133:
            LODOperation = glpLLVMBuildDistance(v26, (uint64_t)v12, (int *)v231, v32, v33);
            goto LABEL_260;
          case 134:
            if ((_DWORD)v32)
              v138 = (_DWORD)v32 == 3;
            else
              v138 = 1;
            v139 = "air.fast_rsqrt";
            v140 = "air.rsqrt";
            goto LABEL_252;
          case 137:
            v114 = "air.rint";
            goto LABEL_255;
          case 138:
            v149 = *v231;
            v237 = glpLLVMf32Extend(v26, *v12, v149, *v17);
            v150 = LLVMTypeOf();
            v237 = glpLLVMBuildBuiltinNoPrefix(v26, "air.fabs", 1u, (uint64_t)&v237, v150, v149, 3);
            LLVMTypeOf();
            glpLLVMGetInfinity();
            v151 = *(_QWORD *)(v26 + 40);
            if (glpPrimitiveTypeGetScalarType(v149) == 62)
              v151 = LLVMInt64TypeInContext();
            v152 = glpGetComponentCount(v149);
            if ((int)v152 >= 2)
              MEMORY[0x22E316F4C](v151, v152);
            v237 = LLVMBuildBitCast();
            LLVMBuildBitCast();
            LODOperation = LLVMBuildICmp();
            goto LABEL_260;
          case 139:
            v153 = *v231;
            v237 = glpLLVMf32Extend(v26, *v12, *v231, *v17);
            v154 = LLVMTypeOf();
            v237 = glpLLVMBuildBuiltinNoPrefix(v26, "air.fabs", 1u, (uint64_t)&v237, v154, v153, 3);
            LLVMTypeOf();
            glpLLVMGetInfinity();
            LODOperation = LLVMBuildFCmp();
            goto LABEL_260;
          case 144:
            if ((_DWORD)v32)
              v138 = (_DWORD)v32 == 3;
            else
              v138 = 1;
            v139 = "air.fast_sinh";
            v140 = "air.sinh";
            goto LABEL_252;
          case 145:
            if ((_DWORD)v32)
              v138 = (_DWORD)v32 == 3;
            else
              v138 = 1;
            v139 = "air.fast_cosh";
            v140 = "air.cosh";
            goto LABEL_252;
          case 146:
            if ((_DWORD)v32)
              v138 = (_DWORD)v32 == 3;
            else
              v138 = 1;
            v139 = "air.fast_tanh";
            v140 = "air.tanh";
            goto LABEL_252;
          case 147:
            if ((_DWORD)v32)
              v138 = (_DWORD)v32 == 3;
            else
              v138 = 1;
            v139 = "air.fast_asinh";
            v140 = "air.asinh";
            goto LABEL_252;
          case 148:
            if ((_DWORD)v32)
              v138 = (_DWORD)v32 == 3;
            else
              v138 = 1;
            v139 = "air.fast_acosh";
            v140 = "air.acosh";
            goto LABEL_252;
          case 149:
            if ((_DWORD)v32)
              v138 = (_DWORD)v32 == 3;
            else
              v138 = 1;
            v139 = "air.fast_atanh";
            v140 = "air.atanh";
LABEL_252:
            if (v138)
              v114 = v139;
            else
              v114 = v140;
            goto LABEL_255;
          case 150:
          case 151:
          case 157:
          case 158:
            goto LABEL_49;
          case 153:
            if ((*(_DWORD *)(v26 + 320) & 0xFFFFFFFE) == 2)
            {
              v155 = glpASTNodeGetChild(a2, 1u);
              v156 = *(_QWORD *)(*(_QWORD *)(glpLValueNodeGetVariableExtra(v155) + 144) + 16);
              v157 = LLVMInt8TypeInContext();
              MEMORY[0x22E316EC8](v157, 1);
              v158 = LLVMBuildPointerCast();
              ConstantInt32 = glpGetConstantInt32(v26, *(_DWORD *)(v156 + 4));
              v160 = v27;
              v161 = v26;
              v162 = glpGetConstantInt32(v26, *(_DWORD *)(v156 + 8));
              LLVMTypeOf();
              glpBuildAlloca();
              LLVMBuildStore();
              v163 = LLVMInt8TypeInContext();
              MEMORY[0x22E316EC8](v163, 0);
              v164 = LLVMBuildPointerCast();
              ScalarCount = glpPrimitiveTypeGetScalarCount(v231[2]);
              v166 = glpGetConstantInt32(v161, 4 * ScalarCount);
              v116 = LLVMVoidTypeInContext();
              v237 = *v160;
              v238 = v158;
              v239 = ConstantInt32;
              v240 = v162;
              v241 = v164;
              v242 = v166;
              v234 = 0x300000001;
              v117 = "air.gs_tf_store";
              v118 = &v237;
              v119 = &v234;
              v120 = v161;
              v121 = 6;
LABEL_290:
              glpLLVMCallFunctionInner(v120, (uint64_t)v117, v116, (uint64_t)v118, v121, (int *)v119, 2u, (uint64_t)"");
              return v243[0];
            }
            if ((*(_WORD *)(v26 + 832) & 2) == 0)
              return v243[0];
            v199 = LLVMFloatTypeInContext();
            MEMORY[0x22E316EC8](v199, 1);
            v230 = LLVMBuildPointerCast();
            LLVMTypeOf();
            LLVMConstInt();
            v237 = LLVMBuildAShr();
            if ((*(_BYTE *)(v26 + 832) & 1) != 0)
            {
              v228 = LLVMBuildLoad();
              v200 = *(_QWORD *)(v26 + 528);
              if (!v200)
              {
                v200 = LLVMConstInt();
                *(_QWORD *)(v26 + 528) = v200;
              }
              v234 = v200;
              LLVMBuildGEP();
              v227 = LLVMBuildLoad();
              v201 = *(const char **)(v26 + 536);
              if (!v201)
              {
                v201 = (const char *)LLVMConstInt();
                *(_QWORD *)(v26 + 536) = v201;
              }
              v233 = v201;
              LLVMBuildGEP();
              LLVMBuildLoad();
              v202 = glpASTNodeGetChild(a2, 1u);
              v203 = *(_QWORD *)(*(_QWORD *)(glpLValueNodeGetVariableExtra(v202) + 144) + 16);
              LLVMGetParam();
              LLVMGetParam();
              LLVMBuildAdd();
              LLVMBuildSub();
              LLVMBuildMul();
              LLVMBuildAdd();
              glpGetConstantInt32(v26, *(int *)(v203 + 8) >> 2);
              LLVMBuildMul();
              v237 = LLVMBuildAdd();
              v27 = v12;
            }
            LLVMBuildGEP();
            v204 = v17[2];
            if (v204 && v204 != 3)
            {
              v205 = v231[2];
              v206 = glpPrimitiveTypeGetScalarType(v205);
              glpPrimitiveTypeToLLVMType((_QWORD *)v26, v205, 3);
              if (v206 > 8)
              {
                if (v206 == 36 || v206 == 9)
                  LLVMBuildZExt();
              }
              else if (v206 == 1)
              {
                LLVMBuildFPCast();
              }
              else if (v206 == 5)
              {
                LLVMBuildSExt();
              }
            }
            v225 = LLVMTypeOf();
            MEMORY[0x22E316EC8](v225, 1);
            LLVMBuildPointerCast();
            LLVMBuildStore();
            v113 = v27[2];
            goto LABEL_52;
          case 154:
            v167 = *v231;
            v168 = glpGetComponentCount(v167);
            if (glpPrimitiveTypeGetScalarType(v167) == 1)
            {
              v169 = *(_QWORD *)(v26 + 40);
              if ((int)v168 >= 2)
                v169 = MEMORY[0x22E316F4C](*(_QWORD *)(v26 + 40), v168);
              LLVMBuildBitCast();
              v170 = LLVMConstInt();
              glpLLVMSplatConstantVector(v170, v168);
              v243[0] = LLVMBuildLShr();
              v171 = LLVMConstInt();
              glpLLVMSplatConstantVector(v171, v168);
              LLVMBuildAnd();
              MEMORY[0x22E316D18](v169);
              LLVMBuildICmp();
              v172 = LLVMConstInt();
              glpLLVMSplatConstantVector(v172, v168);
              LLVMBuildSub();
              MEMORY[0x22E316D18](v169);
LABEL_382:
              LODOperation = LLVMBuildSelect();
            }
            else
            {
              v207 = LLVMInt64TypeInContext();
              v208 = v207;
              if ((int)v168 >= 2)
                v208 = MEMORY[0x22E316F4C](v207, v168);
              LLVMBuildBitCast();
              v209 = LLVMConstInt();
              glpLLVMSplatConstantVector(v209, v168);
              LLVMBuildLShr();
              v210 = LLVMConstInt();
              glpLLVMSplatConstantVector(v210, v168);
              v243[0] = LLVMBuildAnd();
              MEMORY[0x22E316D18](v208);
              LLVMBuildICmp();
              v211 = LLVMConstInt();
              glpLLVMSplatConstantVector(v211, v168);
              LLVMBuildSub();
              MEMORY[0x22E316D18](v208);
              LLVMBuildSelect();
              LODOperation = LLVMBuildTrunc();
            }
            goto LABEL_260;
          case 155:
            v230 = v33;
            v173 = *v231;
            v174 = glpGetComponentCount(v173);
            if (glpPrimitiveTypeGetScalarType(v173) == 1)
            {
              v175 = *(_QWORD *)(v26 + 40);
              if ((int)v174 >= 2)
                v175 = MEMORY[0x22E316F4C](*(_QWORD *)(v26 + 40), v174);
              LLVMBuildBitCast();
              v176 = LLVMConstInt();
              glpLLVMSplatConstantVector(v176, v174);
              LLVMBuildAnd();
              MEMORY[0x22E316D18](v175);
              LLVMBuildICmp();
              LLVMBuildNot();
              LLVMBuildAnd();
              v177 = LLVMConstInt();
              glpLLVMSplatConstantVector(v177, v174);
              LLVMBuildOr();
              MEMORY[0x22E316D18](v175);
            }
            else
            {
              v212 = LLVMInt64TypeInContext();
              v213 = v212;
              if ((int)v174 >= 2)
                v213 = MEMORY[0x22E316F4C](v212, v174);
              v243[0] = LLVMBuildBitCast();
              v214 = LLVMConstInt();
              glpLLVMSplatConstantVector(v214, v174);
              LLVMBuildAnd();
              MEMORY[0x22E316D18](v213);
              LLVMBuildICmp();
              LLVMBuildNot();
              LLVMBuildAnd();
              v215 = LLVMConstInt();
              glpLLVMSplatConstantVector(v215, v174);
              LLVMBuildOr();
              MEMORY[0x22E316D18](v213);
            }
            LLVMBuildSelect();
LABEL_49:
            LODOperation = LLVMBuildBitCast();
            goto LABEL_260;
          case 156:
            if ((_DWORD)v32)
              v178 = (_DWORD)v32 == 3;
            else
              v178 = 1;
            v179 = "air.fast_ldexp";
            v180 = "air.ldexp";
            goto LABEL_276;
          case 159:
            v127 = "air.mul_hi";
            goto LABEL_281;
          case 160:
            v114 = "air.reverse_bits";
            goto LABEL_255;
          case 162:
            v237 = *v12;
            v238 = LLVMConstInt();
            v114 = "air.ctz";
            v137 = &v237;
            v135 = v26;
            v136 = 2;
            goto LABEL_257;
          case 163:
            v181 = ReturnPrimitiveType;
            v182 = *v231;
            v183 = glpGetComponentCount(v182);
            v184 = glpPrimitiveTypeGetScalarType(v182);
            if (v184 == 36)
            {
              v186 = *v12;
LABEL_357:
              v237 = v186;
              v238 = LLVMConstInt();
              v243[0] = glpLLVMBuildBuiltinNoPrefix(v26, "air.clz", 2u, (uint64_t)&v237, v34, v181, v32);
              v222 = LLVMConstInt();
              glpLLVMSplatConstantVector(v222, v183);
LABEL_358:
              LODOperation = LLVMBuildSub();
              goto LABEL_260;
            }
            if (v184 == 5)
            {
              v185 = LLVMConstInt();
              glpLLVMSplatConstantVector(v185, v183);
              LLVMBuildAShr();
              v186 = LLVMBuildXor();
              goto LABEL_357;
            }
            goto LABEL_391;
          case 164:
            LODOperation = glpBuildGetLODOperation((_QWORD *)v26, a2, (uint64_t)v12, v231);
            goto LABEL_260;
          case 167:
          case 168:
          case 169:
            v110 = v230;
            v111 = glpASTNodeGetChild(a2, 0);
            VariableExtra = glpLValueNodeGetVariableExtra(v111);
            if ((*(_BYTE *)(VariableExtra + 51) & 1) == 0)
            {
              v113 = *v12;
LABEL_52:
              v243[0] = v113;
              return v243[0];
            }
            v122 = VariableExtra;
            v123 = glpLLVMGetVariablePointer(v26, VariableExtra);
            v124 = *(_QWORD *)(v122 + 48) & 0x2000000000;
            switch(v110)
            {
              case 169:
                v126 = v124 | 0x800000;
                LLVMFloatTypeInContext();
                v237 = llvm::ConstantFP::get();
                v238 = v237;
                LLVMConstVector();
                v125 = LLVMBuildFAdd();
                break;
              case 168:
                v126 = v124 | 0x40000000000;
                v125 = v27[1];
                break;
              case 167:
                v125 = 0;
                v126 = v124 | 0x4000000000;
                break;
              default:
LABEL_391:
                abort();
            }
            v243[0] = glpBuildInterpolateAt((_QWORD *)v26, v123, v122, v126, "", v125);
            v216 = *(unsigned int *)(*(_QWORD *)(v122 + 144) + 24);
            Offset = glpDerefNodeGetOffset(v111);
            if (!Offset)
              return v243[0];
            v218 = Offset;
            v219 = v243[0];
            Swizzle = glpOffsetNodeGetSwizzle(Offset);
            v243[0] = glpCGSwizzle(v26, 0, 0, v219, v216, Swizzle);
            VectorElementExpr = glpOffsetNodeGetVectorElementExpr(v218);
            if (!VectorElementExpr)
              return v243[0];
            glpLLVMCGNode(v26, VectorElementExpr, 1);
            if (LLVMTypeOf() != *(_QWORD *)(v26 + 40))
              LLVMBuildIntCast();
            LODOperation = LLVMBuildExtractElement();
LABEL_260:
            v243[0] = LODOperation;
            return v243[0];
          case 170:
            v116 = LLVMVoidTypeInContext();
            v237 = 0x300000001;
            v117 = "air.cs_barrier";
            v119 = &v237;
            v120 = v26;
            v118 = 0;
            v121 = 0;
            goto LABEL_290;
          case 171:
            v114 = "air.gamma_compress";
            goto LABEL_255;
          case 172:
            v114 = "air.gamma_expand";
            goto LABEL_255;
          case 173:
            v114 = "air.gamma_compress_xr";
            goto LABEL_255;
          case 174:
            v114 = "air.gamma_expand_xr";
            goto LABEL_255;
          default:
            return v243[0];
        }
      }
      if ((*(_DWORD *)(a1 + 320) & 0xFFFFFFFE) == 2 || (*(_WORD *)(a1 + 832) & 2) != 0)
      {
        v5 = 0;
        goto LABEL_10;
      }
    }
    return 0;
  }
  v36 = (uint64_t *)a1;
  v37 = glpASTNodeGetChild(a2, 0);
  v38 = glpASTNodeGetChild(a2, 1u);
  v39 = glpLValueNodeGetVariableExtra(v37);
  v40 = glpDerefNodeGetOffset(v37);
  if (v40 && (OffsetExpr = glpOffsetNodeGetOffsetExpr(v40), glpIsConstantNode(OffsetExpr)))
    v42 = *(_DWORD *)glpConstantNodeGetValue(OffsetExpr);
  else
    v42 = 0;
  v45 = *(_DWORD *)(v39 + 156) + v42;
  if (!glpFindGep((uint64_t)v36, v39, 0, v45))
  {
    v237 = LLVMConstInt();
    LLVMGetInsertBlock();
    LLVMPositionBuilderAtEnd();
    v46 = LLVMBuildGEP();
    LLVMPositionBuilderAtEnd();
    glpAddGep(v36, v39, 0, v45, v46);
  }
  v47 = (int *)glpLLVMCGNode(v36, v38, 1);
  v48 = glpPPStreamOpNodeGetReturnPrimitiveType(a2);
  v49 = glpASTNodeGetSaFlags(a2);
  v50 = glpPrecisionIndexFromSAFlags(v49);
  v51 = glpPrimitiveTypeToLLVMType(v36, v48, v50);
  v52 = glpASTNodeGetSaType(v38);
  v53 = glpPrimitiveTypeGetPrimitiveType(v52);
  v61 = glpMakeSwizzle(v53, v54, v55, v56, v57, v58, v59, v60, 0);
  glpCGSwizzle((uint64_t)v36, 0, 0, (uint64_t)v47, v53, v61);
  v62 = v36[65];
  if (!v62)
  {
    v62 = LLVMConstInt();
    v36[65] = v62;
  }
  v63 = v50;
  v64 = v48;
  v230 = v51;
  v237 = v62;
  LLVMBuildGEP();
  LLVMBuildLoad();
  v65 = LLVMBuildFMul();
  v73 = glpMakeSwizzle(v65, v66, v67, v68, v69, v70, v71, v72, 1);
  v74 = glpCGSwizzle((uint64_t)v36, 0, 0, (uint64_t)v47, v53, v73);
  v75 = v36[66];
  v231 = (unsigned int *)v47;
  if (!v75)
  {
    v75 = LLVMConstInt();
    v36[66] = v75;
  }
  v232 = v75;
  LLVMBuildGEP();
  v234 = v74;
  v235 = LLVMBuildLoad();
  v236 = v65;
  v76 = glpLLVMGetTypeString(&v233, v64, v63);
  snprintf_l((char *)&v237, 0x200uLL, 0, "%s.%s", "air.fma", v76);
  v243[0] = 0x300000001;
  v77 = v230;
  v78 = glpLLVMCallFunctionInner((uint64_t)v36, (uint64_t)&v237, v230, (uint64_t)&v234, 3u, (int *)v243, 2u, (uint64_t)"");
  v86 = glpMakeSwizzle(v78, v79, v80, v81, v82, v83, v84, v85, 2);
  v87 = glpCGSwizzle((uint64_t)v36, 0, 0, (uint64_t)v231, v53, v86);
  v88 = v36[67];
  if (!v88)
  {
    v88 = LLVMConstInt();
    v36[67] = v88;
  }
  v232 = v88;
  LLVMBuildGEP();
  v89 = LLVMBuildLoad();
  v234 = v87;
  v235 = v89;
  v236 = v78;
  v90 = glpLLVMGetTypeString(&v233, v64, v63);
  snprintf_l((char *)&v237, 0x200uLL, 0, "%s.%s", "air.fma", v90);
  v243[0] = 0x300000001;
  v91 = glpLLVMCallFunctionInner((uint64_t)v36, (uint64_t)&v237, v77, (uint64_t)&v234, 3u, (int *)v243, 2u, (uint64_t)"");
  v99 = glpMakeSwizzle(v91, v92, v93, v94, v95, v96, v97, v98, 3);
  v100 = glpCGSwizzle((uint64_t)v36, 0, 0, (uint64_t)v231, v53, v99);
  v101 = v36[68];
  if (!v101)
  {
    v101 = LLVMConstInt();
    v36[68] = v101;
  }
  v232 = v101;
  LLVMBuildGEP();
  v102 = LLVMBuildLoad();
  v234 = v100;
  v235 = v102;
  v236 = v91;
  v103 = glpLLVMGetTypeString(&v233, v64, v63);
  snprintf_l((char *)&v237, 0x200uLL, 0, "%s.%s", "air.fma", v103);
  v243[0] = 0x300000001;
  return glpLLVMCallFunctionInner((uint64_t)v36, (uint64_t)&v237, v77, (uint64_t)&v234, 3u, (int *)v243, 2u, (uint64_t)"");
}

uint64_t glpLLVMCGNegate(uint64_t a1, uint64_t a2)
{
  uint64_t Expr;
  uint64_t v5;
  uint64_t SaType;
  uint64_t PrimitiveType;
  int ScalarType;

  glpLLVMAddLineInformation(a1, a2);
  Expr = glpUnaryOperatorNodeGetExpr(a2);
  glpLLVMCGNode(a1, Expr, 1);
  v5 = glpUnaryOperatorNodeGetExpr(a2);
  SaType = glpASTNodeGetSaType(v5);
  PrimitiveType = glpPrimitiveTypeGetPrimitiveType(SaType);
  ScalarType = glpPrimitiveTypeGetScalarType(PrimitiveType);
  if (ScalarType == 62 || ScalarType == 1)
    return LLVMBuildFNeg();
  else
    return LLVMBuildNeg();
}

uint64_t glpLLVMCGLogicalNot(uint64_t a1, uint64_t a2)
{
  uint64_t Expr;

  glpLLVMAddLineInformation(a1, a2);
  Expr = glpUnaryOperatorNodeGetExpr(a2);
  glpLLVMCGNode(a1, Expr, 1);
  return LLVMBuildNot();
}

uint64_t glpLLVMCGAssign(uint64_t *a1, uint64_t a2)
{
  uint64_t Lhs;
  uint64_t VariableExtra;
  uint64_t Rhs;
  uint64_t v7;
  uint64_t SaType;
  int PrimitiveType;
  uint64_t v10;
  uint64_t Offset;
  char SaFlags;
  uint64_t v13;
  uint64_t v14;
  unsigned int PreSwizzlePrimitiveType;
  uint64_t v16;
  uint64_t BankIndex;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t OffsetExpr;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  int v30;
  uint64_t VectorElementExpr;
  uint64_t inserted;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  int v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t Swizzle;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  size_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int Category;
  uint64_t v55;
  _BYTE v57[4];
  int v58;
  _BYTE *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  _QWORD v64[4];

  v64[3] = *MEMORY[0x24BDAC8D0];
  glpLLVMAddLineInformation((uint64_t)a1, a2);
  Lhs = glpBinaryOperatorNodeGetLhs(a2);
  VariableExtra = glpLValueNodeGetVariableExtra(Lhs);
  Rhs = glpBinaryOperatorNodeGetRhs(a2);
  v7 = glpLLVMCGNode(a1, Rhs, 1);
  if (v7)
  {
    SaType = glpASTNodeGetSaType(Rhs);
    PrimitiveType = glpPrimitiveTypeGetPrimitiveType(SaType);
    v10 = glpLLVMGetVariablePointer((uint64_t)a1, VariableExtra);
    Offset = glpDerefNodeGetOffset(Lhs);
    SaFlags = glpASTNodeGetSaFlags(Lhs);
    v13 = glpPrecisionIndexFromSAFlags(SaFlags);
    if (!(_DWORD)v13)
    {
      v14 = glpLValueNodeGetVariableExtra(Lhs);
      v13 = glpPrecisionIndexFromSAFlags(*(_QWORD *)(v14 + 48));
    }
    v64[0] = 0;
    LODWORD(v62) = PrimitiveType;
    if (Offset)
    {
      PreSwizzlePrimitiveType = glpOffsetNodeGetPreSwizzlePrimitiveType(Offset);
      if (!PreSwizzlePrimitiveType)
      {
        v16 = glpASTNodeGetSaType(Lhs);
        PreSwizzlePrimitiveType = glpPrimitiveTypeGetPrimitiveType(v16);
      }
      BankIndex = glpOffsetNodeGetBankIndex(Offset);
      if (BankIndex)
      {
        v18 = glpLLVMCGNode(a1, BankIndex, 1);
        v19 = a1[65];
        if (!v19)
        {
          v19 = LLVMConstInt();
          a1[65] = v19;
        }
        v64[1] = v19;
        v64[2] = v18;
        v10 = LLVMBuildGEP();
      }
      else
      {
        v18 = 0;
      }
      OffsetExpr = glpOffsetNodeGetOffsetExpr(Offset);
      if (OffsetExpr)
      {
        v22 = OffsetExpr;
        if (*(_DWORD *)(*(_QWORD *)(VariableExtra + 144) + 24) && (PreSwizzlePrimitiveType & 0xFFFFFFFE) == 0x40)
        {
          v20 = v13;
          v23 = v64;
          v24 = a1;
          v25 = VariableExtra;
          v26 = v10;
        }
        else
        {
          v20 = v13;
          v24 = a1;
          v25 = VariableExtra;
          v26 = v10;
          v23 = 0;
        }
        v10 = glpBuildArrayElementPtr(v24, v25, v26, v22, v23, v18);
      }
      else
      {
        v20 = v13;
      }
    }
    else
    {
      v20 = v13;
      PreSwizzlePrimitiveType = 0;
    }
    v27 = glpASTNodeGetSaType(Lhs);
    v28 = glpPrimitiveTypeGetPrimitiveType(v27);
    v29 = glpASTNodeGetSaFlags(Lhs);
    v30 = glpPrecisionIndexFromSAFlags(v29);
    if (Offset)
    {
      v63 = PreSwizzlePrimitiveType;
      VectorElementExpr = glpOffsetNodeGetVectorElementExpr(Offset);
      if (glpOffsetNodeGetSwizzle(Offset) || (inserted = v7, VectorElementExpr))
      {
        v28 = v63;
        v30 = v20;
        v33 = glpLLVMLoadVector(a1, VariableExtra, v10, v63, v20, *(unsigned int *)(*(_QWORD *)(VariableExtra + 144) + 24), *(_DWORD *)(*(_QWORD *)(VariableExtra + 144) + 28));
        v34 = v33;
        if (VectorElementExpr)
        {
          v62 = v33;
          v35 = glpLLVMCGNode(a1, VectorElementExpr, 1);
          v36 = glpASTNodeGetSaFlags(VectorElementExpr);
          v37 = glpPrecisionIndexFromSAFlags(v36);
          if (v37)
          {
            v38 = v63;
            if (v37 == 3)
              v61 = v35;
            else
              v61 = LLVMBuildIntCast();
          }
          else
          {
            v61 = v35;
            v38 = v63;
          }
          Swizzle = glpOffsetNodeGetSwizzle(Offset);
          if ((_DWORD)Swizzle)
          {
            v41 = Swizzle;
            v58 = v30;
            v59 = v57;
            v42 = Swizzle & 7;
            MEMORY[0x24BDAC7A8](Swizzle);
            v60 = (uint64_t *)&v57[-v43];
            bzero(&v57[-v43], v44);
            if ((_DWORD)v42)
            {
              v45 = 0;
              v46 = 2 * v42;
              v47 = v60;
              do
              {
                v48 = &a1[(v41 >> (v45 + 3)) & 3];
                v49 = v48[65];
                if (!v49)
                {
                  v50 = v48 + 65;
                  v49 = LLVMConstInt();
                  *v50 = v49;
                }
                *v47++ = v49;
                v45 += 2;
              }
              while (v46 != v45);
            }
            LLVMConstVector();
            LLVMBuildExtractElement();
            v30 = v58;
            v38 = v63;
          }
          inserted = LLVMBuildInsertElement();
          v28 = v38;
        }
        else
        {
          v39 = glpOffsetNodeGetSwizzle(Offset);
          inserted = glpCGSwizzle((uint64_t)a1, v34, v63, v7, v62, v39);
        }
      }
    }
    else
    {
      inserted = v7;
    }
    v51 = *(_QWORD *)(VariableExtra + 144);
    v52 = *(unsigned int *)(v51 + 24);
    v53 = *(_DWORD *)(v51 + 28);
    Category = glpPrimitiveTypeGetCategory(v28);
    if ((Category - 1) >= 3)
    {
      if (Category == 4)
      {
        MEMORY[0x22E316EC8](a1[5], 0);
        LLVMBuildPointerCast();
      }
      else if (!Category)
      {
        abort();
      }
    }
    else if ((_DWORD)v52 && !glpLLVMTypesEqual(a1, v52, v53, v28, v30))
    {
      LLVMTypeOf();
      v55 = LLVMGetElementType();
      glpLLVMPackVectorInner((uint64_t)a1, inserted, v55);
    }
    LLVMBuildStore();
  }
  return v7;
}

uint64_t glpLLVMCGCommaExpr(uint64_t *a1, uint64_t a2, int a3)
{
  unsigned int ExprCount;
  unsigned int v7;
  unsigned int v8;
  uint64_t Expr;
  unint64_t v10;
  int *v11;
  unint64_t v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  uint64_t result;
  int v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  unsigned int **v21;
  _OWORD v22[4];
  unsigned int v23[8];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  ExprCount = glpCommaExprNodeGetExprCount(a2);
  if (!ExprCount)
    return 0;
  v7 = ExprCount;
  v8 = 0;
  do
  {
    Expr = glpCommaExprNodeGetExpr(a2, v8);
    v20 = 0;
    v21 = 0;
    memset(v22, 0, sizeof(v22));
    if (Expr)
    {
      v10 = 0;
      v11 = (int *)v23;
      while (1)
      {
        v12 = v10;
        if (!glpIsComponentAssigment(Expr, &v21, (_DWORD *)&v20 + 1, &v20, v11, 0))
        {
          v8 += v12;
          if (!(_DWORD)v12)
            goto LABEL_11;
          goto LABEL_20;
        }
        *((_QWORD *)v22 + v12) = Expr;
        v13 = v8 + v12 + 1;
        if (v13 >= v7)
          break;
        Expr = glpCommaExprNodeGetExpr(a2, v13);
        if (Expr)
        {
          ++v11;
          v10 = v12 + 1;
          if (v12 < 7)
            continue;
        }
        goto LABEL_19;
      }
      Expr = 0;
LABEL_19:
      v17 = v8 + v12++;
      v8 = v17 + 1;
      if (!(_DWORD)v12)
        goto LABEL_11;
LABEL_20:
      if (a3)
        v18 = v8 == v7;
      else
        v18 = 0;
      v19 = v18;
      result = glpProcessComponentWiseVectorAssignment(a1, v21, v20, (uint64_t *)v22, v23, v19, v12);
    }
    else
    {
LABEL_11:
      ++v8;
      if (a3)
        v14 = v8 == v7;
      else
        v14 = 0;
      v15 = v14;
      result = glpLLVMCGNode(a1, Expr, v15);
    }
  }
  while (v8 < v7);
  return result;
}

uint64_t *glpLLVMCGParameterDeclaration(uint64_t a1, uint64_t a2)
{
  uint64_t Extra;

  Extra = glpParameterDeclarationNodeGetExtra(a2);
  if (!*(_QWORD *)(Extra + 144))
    glpLLVMAllocVariableExtra(*(_QWORD *)(a1 + 152), Extra);
  return glpLLVMCGGlobalVariable(a1, Extra);
}

uint64_t glpLLVMCGFunctionPrototype(uint64_t a1, uint64_t a2)
{
  const char *Name;
  uint64_t v5;
  _BOOL4 v6;
  uint64_t Extra;
  int ParameterCount;
  int v9;
  int i;
  uint64_t Parameter;
  uint64_t ReturnOutParam;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t *v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  __int16 v29;
  _BOOL4 v31;
  BOOL v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t result;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  _BOOL4 v43;
  double v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  int v48;
  int v49;
  unint64_t v50;
  _QWORD *v51;
  char *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t j;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  int v67;
  int v68;
  uint64_t v69;
  char *v70;
  size_t v71;
  uint64_t v72;
  __int16 v73;
  const char *v74;
  const char *v75;
  const char *v76;
  uint64_t v77;
  unsigned int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  int v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t *v88;
  __int16 v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t *v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  int v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  int v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  unsigned int v130;
  unsigned int v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t *v136;
  const char *v137;
  BOOL v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t *v143;
  uint64_t v144;
  const char *v145;
  const char *v146;
  const char *v147;
  const char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t *v152;
  unsigned int v153;
  uint64_t *v154;
  _BOOL4 v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  __int16 v168;
  int DefaultUniformLocationCount;
  unsigned int v170;
  uint64_t v171;
  uint64_t v172;
  const char *v173;
  uint64_t *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t *v183;
  uint64_t v184;
  void *v185;
  unint64_t v186;
  unint64_t v187;
  uint64_t v188;
  char *v189;
  unsigned int v190;
  unsigned int v191;
  unsigned int *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t *v204;
  uint64_t v205;
  uint64_t *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t *v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  char *v216;
  unsigned int v217;
  unsigned int *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t *v235;
  uint64_t v236;
  uint64_t *v237;
  unsigned int v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t *v245;
  uint64_t v246;
  void *v247;
  const char *v248;
  unint64_t v249;
  uint64_t *v250;
  char *v251;
  const char *v252;
  unsigned int v253;
  const char *v254;
  uint64_t v255;
  const char *v256;
  int v257;
  unsigned int PPTextarget;
  const char *v259;
  int PPDatatype;
  const char *v261;
  uint64_t v262;
  uint64_t *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t *v266;
  unsigned int v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t *v270;
  uint64_t v271;
  uint64_t v272;
  unsigned int v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t *v281;
  uint64_t v282;
  uint64_t *v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  const char *v287;
  char *v288;
  const char *v289;
  uint64_t v290;
  const char *v291;
  uint64_t *v292;
  uint64_t v293;
  const char *v294;
  char *v295;
  unint64_t v296;
  char *v297;
  uint64_t v298;
  uint64_t v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  uint64_t v304;
  __int128 v305;
  __int128 v306;
  _OWORD v307[32];
  uint64_t v308;

  v308 = *MEMORY[0x24BDAC8D0];
  Name = (const char *)glpFunctionPrototypeNodeGetName(a2);
  v6 = glpStringsEqual(Name, v5, "main", 0x83863A00000004);
  Extra = glpFunctionPrototypeNodeGetExtra(a2);
  ParameterCount = glpFunctionPrototypeNodeGetParameterCount(a2);
  if (ParameterCount)
  {
    v9 = ParameterCount;
    for (i = 0; i != v9; ++i)
    {
      Parameter = glpFunctionPrototypeNodeGetParameter(a2, i);
      glpLLVMCGNode(a1, Parameter, 0);
    }
  }
  ReturnOutParam = glpFunctionPrototypeNodeGetReturnOutParam(a2);
  if (ReturnOutParam)
    glpLLVMCGNode(a1, ReturnOutParam, 0);
  if (!v6)
  {
    v15 = *(_DWORD *)(**(_QWORD **)(Extra + 152) + 36);
    goto LABEL_40;
  }
  v13 = *(unsigned int *)(a1 + 676);
  if ((int)v13 >= 1)
  {
    LODWORD(v292) = v6;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 8 * v13;
    v18 = -1;
    v19 = -1;
    v20 = -1;
    while (1)
    {
      v21 = glpLayoutObjectFind(*(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 680) + v14) + 8), 34);
      v22 = *(_DWORD *)(a1 + 320);
      if ((v22 - 1) < 3)
        goto LABEL_10;
      if (v22 == 4)
      {
        v24 = *((_DWORD *)v21 + 4);
        if (v24 == 23)
          v18 = v15;
        if (v24 == 24)
          v16 = 1;
        else
          ++v15;
        goto LABEL_23;
      }
      if (!v22)
        break;
LABEL_23:
      v14 += 8;
      if (v17 == v14)
      {
        *(_DWORD *)(a1 + 804) = 0;
        if (v16)
        {
          if (v18 == -1)
          {
            *(_DWORD *)(a1 + 804) = 1;
            v18 = v15++;
          }
          v6 = (int)v292;
          *(_DWORD *)(a1 + 800) = v18;
        }
        else
        {
          v6 = (int)v292;
        }
        if ((~*(unsigned __int16 *)(a1 + 832) & 3) == 0)
        {
          if (v20 == -1)
          {
LABEL_36:
            *(_DWORD *)(a1 + 812) = 1;
            v20 = v15++;
          }
          *(_DWORD *)(a1 + 808) = v20;
          if (v19 == -1)
          {
            *(_DWORD *)(a1 + 820) = 1;
            v19 = v15++;
          }
          *(_DWORD *)(a1 + 816) = v19;
        }
        goto LABEL_40;
      }
    }
    v23 = *((_DWORD *)v21 + 4);
    if (v23 != 28)
    {
      if ((*(_WORD *)(a1 + 832) & 1) == 0)
        goto LABEL_23;
      if (v23 == 18)
      {
        v19 = v15;
      }
      else
      {
        if (v23 != 17)
          goto LABEL_23;
        v20 = v15;
      }
    }
LABEL_10:
    ++v15;
    goto LABEL_23;
  }
  v15 = 0;
  *(_DWORD *)(a1 + 804) = 0;
  if ((~*(unsigned __int16 *)(a1 + 832) & 3) == 0)
  {
    v19 = -1;
    goto LABEL_36;
  }
LABEL_40:
  if ((*(_DWORD *)(a1 + 320) | 2) == 3 && v6)
    v25 = *(_DWORD *)(a1 + 692);
  else
    v25 = 0;
  v26 = *(_DWORD *)(*(_QWORD *)(Extra + 152) + 8);
  if ((v26 & 2) != 0)
    v27 = *(unsigned int *)(a1 + 708);
  else
    v27 = 0;
  v292 = *(uint64_t **)(Extra + 152);
  if ((v26 & 4) != 0)
    v28 = *(_DWORD *)(a1 + 724);
  else
    v28 = 0;
  v29 = *(_WORD *)(a1 + 832);
  v31 = (v29 & 2) == 0 || v28 < 1;
  v32 = (v29 & 1) == 0;
  v33 = (v29 & 1) == 0 || v31;
  LODWORD(v295) = v33;
  v34 = !v32 && !v31;
  LODWORD(v294) = v34;
  if ((v26 & 8) != 0)
    v299 = *(unsigned int *)(a1 + 596);
  else
    v299 = 0;
  LODWORD(v296) = v25 + v15;
  LODWORD(v297) = v26 & 1;
  v35 = Extra;
  v37 = *(const char **)(Extra + 40);
  v36 = *(_QWORD *)(Extra + 48);
  result = glpStringHashGet(*(_QWORD *)(a1 + 736), v37, v36);
  LODWORD(v298) = v28;
  if (result)
  {
    if (!v6)
      return result;
LABEL_97:
    v290 = result;
    v66 = v27;
    v67 = v28;
    v68 = (_DWORD)v297 + v296 + v66 + v28 + (_DWORD)v294 + 2 * v299;
    MEMORY[0x24BDAC7A8](result);
    v70 = (char *)&v286 - v69;
    if (8 * (unint64_t)(v68 + 1) >= 0x200)
      v71 = 512;
    else
      v71 = 8 * (v68 + 1);
    bzero(v70, v71);
    v297 = v70;
    bzero(v70, 8 * (v68 + 1));
    v72 = *(unsigned int *)(a1 + 676);
    v73 = *(_WORD *)(a1 + 832);
    if ((v73 & 1) != 0)
      v74 = "air.vertex_id";
    else
      v74 = 0;
    if ((v73 & 1) != 0)
      v75 = "air.instance_id";
    else
      v75 = 0;
    v76 = "air.location_index";
    if ((v73 & 1) == 0)
      v76 = "air.location";
    v294 = v76;
    v289 = (const char *)&v286;
    LODWORD(v288) = v68;
    if ((int)v72 >= 1)
    {
      v287 = v75;
      v291 = v74;
      v293 = v66;
      v77 = 0;
      v296 = 0;
      v78 = 0;
      if ((v73 & 1) != 0)
        v79 = 18;
      else
        v79 = 12;
      LODWORD(v292) = v79;
      v80 = 8 * v72;
      while (1)
      {
        v81 = *(_QWORD *)(*(_QWORD *)(a1 + 680) + v77);
        v82 = glpLayoutObjectFind(*(uint64_t **)(v81 + 8), 34);
        v83 = *(_DWORD *)(a1 + 320);
        if ((v83 - 1) < 3)
        {
          v84 = glpLayoutObjectFind(*(uint64_t **)(v81 + 8), 34);
          if (v78 > 7)
          {
            v86 = LLVMConstInt();
          }
          else
          {
            v85 = a1 + 8 * v78;
            v86 = *(_QWORD *)(v85 + 520);
            if (!v86)
            {
              v87 = (uint64_t *)(v85 + 520);
              v86 = LLVMConstInt();
              *v87 = v86;
            }
          }
          v94 = 0;
          memset((char *)v307 + 8, 0, 56);
          *(_QWORD *)&v307[0] = v86;
          switch(*((_DWORD *)v84 + 4))
          {
            case 1:
            case 0xD:
            case 0xF:
            case 0x10:
            case 0x13:
            case 0x14:
            case 0x15:
            case 0x19:
            case 0x1A:
              *((_QWORD *)&v307[0] + 1) = LLVMMDStringInContext();
              break;
            case 2:
              glpLayoutObjectFind(*(uint64_t **)(v81 + 8), 41);
              *((_QWORD *)&v307[0] + 1) = LLVMMDStringInContext();
              goto LABEL_216;
            case 3:
              glpLayoutObjectFind(*(uint64_t **)(v81 + 8), 42);
              *((_QWORD *)&v307[0] + 1) = LLVMMDStringInContext();
              goto LABEL_216;
            case 0xE:
              v110 = glpLayoutObjectFind(*(uint64_t **)(v81 + 8), 43);
              *((_QWORD *)&v307[0] + 1) = LLVMMDStringInContext();
              v111 = *((unsigned int *)v110 + 4);
              if (v111 > 7)
              {
                v113 = LLVMConstInt();
              }
              else
              {
                v112 = a1 + 8 * v111;
                v113 = *(_QWORD *)(v112 + 520);
                if (!v113)
                {
                  v114 = (uint64_t *)(v112 + 520);
                  v113 = LLVMConstInt();
                  *v114 = v113;
                }
              }
              goto LABEL_217;
            case 0x1C:
              v115 = glpLayoutObjectFind(*(uint64_t **)(v81 + 8), 35);
              *((_QWORD *)&v307[0] + 1) = LLVMMDStringInContext();
              if ((*(_BYTE *)(a1 + 832) & 1) != 0)
              {
                v300 = 0u;
                v301 = 0u;
                v131 = *((_DWORD *)v115 + 4);
                v132 = glpLayoutObjectFind(*(uint64_t **)(v81 + 8), 38);
                if (v132 && *((_DWORD *)v132 + 4) || (v131 >= 8 ? (v138 = v131 > 0xF) : (v138 = 1), v138))
                {
                  if ((*(_BYTE *)(v81 + 53) & 2) != 0)
                    snprintf((char *)&v300, 0x1FuLL, "user(patch%u)");
                  else
                    snprintf((char *)&v300, 0x1FuLL, "user(slot%u)");
                }
                else
                {
                  snprintf((char *)&v300, 0x1FuLL, "user(tex_coord%u)");
                }
                strlen((const char *)&v300);
LABEL_216:
                v113 = LLVMMDStringInContext();
LABEL_217:
                *(_QWORD *)&v307[1] = v113;
              }
              else
              {
                *(_QWORD *)&v307[1] = LLVMMDStringInContext();
                v116 = *((unsigned int *)v115 + 4);
                if (v116 > 7)
                {
                  v118 = LLVMConstInt();
                }
                else
                {
                  v117 = a1 + 8 * v116;
                  v118 = *(_QWORD *)(v117 + 520);
                  if (!v118)
                  {
                    v119 = (uint64_t *)(v117 + 520);
                    v118 = LLVMConstInt();
                    *v119 = v118;
                  }
                }
                *((_QWORD *)&v307[1] + 1) = v118;
              }
              break;
            default:
              goto LABEL_219;
          }
LABEL_218:
          v94 = LLVMMDNodeInContext();
LABEL_219:
          *(_QWORD *)&v297[8 * v78++] = v94;
          goto LABEL_220;
        }
        v88 = v82;
        if (v83 == 4)
        {
          if (*((_DWORD *)v82 + 4) != 24)
          {
            v95 = glpLayoutObjectFind(*(uint64_t **)(v81 + 8), 34);
            v96 = glpPrecisionIndexFromSAFlags(*(_QWORD *)(v81 + 48));
            glpMetalGetArgTypeNameFromASTType((char *)v307, *(unsigned int **)v81, v96, 0);
            v302 = 0u;
            v303 = 0u;
            v300 = 0u;
            v301 = 0u;
            if (v78 > 7)
            {
              v98 = LLVMConstInt();
            }
            else
            {
              v97 = a1 + 8 * v78;
              v98 = *(_QWORD *)(v97 + 520);
              if (!v98)
              {
                v99 = (uint64_t *)(v97 + 520);
                v98 = LLVMConstInt();
                *v99 = v98;
              }
            }
            v94 = 0;
            *(_QWORD *)&v300 = v98;
            v109 = *((_DWORD *)v95 + 4);
            switch(v109)
            {
              case 1:
                *((_QWORD *)&v300 + 1) = LLVMMDStringInContext();
                *(_QWORD *)&v301 = LLVMMDStringInContext();
                *((_QWORD *)&v301 + 1) = LLVMMDStringInContext();
                *(_QWORD *)&v302 = LLVMMDStringInContext();
                strlen((const char *)v307);
                *((_QWORD *)&v302 + 1) = LLVMMDStringInContext();
                goto LABEL_218;
              case 2:
              case 3:
              case 11:
              case 12:
              case 16:
LABEL_191:
                *((_QWORD *)&v300 + 1) = LLVMMDStringInContext();
                *(_QWORD *)&v301 = LLVMMDStringInContext();
                strlen((const char *)v307);
                *((_QWORD *)&v301 + 1) = LLVMMDStringInContext();
                goto LABEL_218;
              case 4:
              case 5:
              case 6:
              case 7:
              case 8:
              case 9:
              case 10:
              case 13:
              case 15:
                goto LABEL_219;
              case 14:
                v136 = glpLayoutObjectFind(*(uint64_t **)(v81 + 8), 43);
LABEL_193:
                *((_QWORD *)&v300 + 1) = LLVMMDStringInContext();
                v139 = *((unsigned int *)v136 + 4);
                if (v139 > 7)
                {
                  v141 = LLVMConstInt();
                }
                else
                {
                  v140 = a1 + 8 * v139;
                  v141 = *(_QWORD *)(v140 + 520);
                  if (!v141)
                  {
                    v142 = (uint64_t *)(v140 + 520);
                    v141 = LLVMConstInt();
                    *v142 = v141;
                  }
                }
                *(_QWORD *)&v301 = v141;
                *((_QWORD *)&v301 + 1) = LLVMMDStringInContext();
                strlen((const char *)v307);
                *(_QWORD *)&v302 = LLVMMDStringInContext();
                goto LABEL_218;
              default:
                switch(v109)
                {
                  case 22:
                  case 23:
                    goto LABEL_191;
                  case 27:
                    v136 = glpLayoutObjectFind(*(uint64_t **)(v81 + 8), 45);
                    goto LABEL_193;
                  case 28:
                    v143 = glpLayoutObjectFind(*(uint64_t **)(v81 + 8), 35);
                    v144 = *(_QWORD *)(v81 + 48);
                    v145 = "air.no_perspective";
                    if ((v144 & 0x2000000000) == 0)
                      v145 = "air.perspective";
                    if ((v144 & 0x1000000000) != 0)
                      v146 = "air.flat";
                    else
                      v146 = v145;
                    v147 = "air.center";
                    if ((v144 & 0x1000000000) == 0)
                    {
                      v147 = "air.interpolation_function";
                      if ((v144 & 0x1000000) == 0)
                      {
                        v148 = "air.sample";
                        if ((v144 & 0x40000000000) == 0)
                          v148 = "air.center";
                        if ((v144 & 0x4000000000) != 0)
                          v147 = "air.centroid";
                        else
                          v147 = v148;
                      }
                    }
                    *((_QWORD *)&v300 + 1) = LLVMMDStringInContext();
                    if ((*(_WORD *)(a1 + 832) & 1) != 0)
                    {
                      v305 = 0u;
                      v306 = 0u;
                      v153 = *((_DWORD *)v143 + 4);
                      v154 = glpLayoutObjectFind(*(uint64_t **)(v81 + 8), 38);
                      if (v154)
                        v155 = *((_DWORD *)v154 + 4) == 0;
                      else
                        v155 = 1;
                      if (v155 && v153 >= 8 && v153 <= 0xF)
                        snprintf((char *)&v305, 0x1FuLL, "user(tex_coord%u)");
                      else
                        snprintf((char *)&v305, 0x1FuLL, "user(slot%u)");
                      strlen((const char *)&v305);
                      *(_QWORD *)&v301 = LLVMMDStringInContext();
                      strlen(v146);
                      *((_QWORD *)&v301 + 1) = LLVMMDStringInContext();
                      strlen(v147);
                      *(_QWORD *)&v302 = LLVMMDStringInContext();
                      *((_QWORD *)&v302 + 1) = LLVMMDStringInContext();
                      strlen((const char *)v307);
                      *(_QWORD *)&v303 = LLVMMDStringInContext();
                      goto LABEL_218;
                    }
                    *(_QWORD *)&v301 = LLVMMDStringInContext();
                    v149 = *((unsigned int *)v143 + 4);
                    if (v149 > 7)
                    {
                      v151 = LLVMConstInt();
                    }
                    else
                    {
                      v150 = a1 + 8 * v149;
                      v151 = *(_QWORD *)(v150 + 520);
                      if (!v151)
                      {
                        v152 = (uint64_t *)(v150 + 520);
                        v151 = LLVMConstInt();
                        *v152 = v151;
                      }
                    }
                    *((_QWORD *)&v301 + 1) = v151;
                    strlen(v146);
                    *(_QWORD *)&v302 = LLVMMDStringInContext();
                    strlen(v147);
                    *((_QWORD *)&v302 + 1) = LLVMMDStringInContext();
                    *(_QWORD *)&v303 = LLVMMDStringInContext();
                    strlen((const char *)v307);
                    *((_QWORD *)&v303 + 1) = LLVMMDStringInContext();
                    v94 = LLVMMDNodeInContext();
                    break;
                  default:
                    goto LABEL_219;
                }
                break;
            }
            goto LABEL_219;
          }
        }
        else if (!v83)
        {
          v89 = *(_WORD *)(a1 + 832);
          if (*((_DWORD *)v82 + 4) == 28)
          {
            if ((v89 & 1) == 0)
            {
              v90 = glpLayoutObjectFind(*(uint64_t **)(v81 + 8), 35);
              memset(v307, 0, 32);
              if (v78 > 7)
              {
                v92 = LLVMConstInt();
              }
              else
              {
                v91 = a1 + 8 * v78;
                v92 = *(_QWORD *)(v91 + 520);
                if (!v92)
                {
                  v93 = (uint64_t *)(v91 + 520);
                  v92 = LLVMConstInt();
                  *v93 = v92;
                }
              }
              *(_QWORD *)&v307[0] = v92;
              *((_QWORD *)&v307[0] + 1) = LLVMMDStringInContext();
              *(_QWORD *)&v307[1] = LLVMMDStringInContext();
              v120 = *((unsigned int *)v90 + 4);
              if (v120 > 7)
              {
                v122 = LLVMConstInt();
              }
              else
              {
                v121 = a1 + 8 * v120;
                v122 = *(_QWORD *)(v121 + 520);
                if (!v122)
                {
                  v123 = (uint64_t *)(v121 + 520);
                  v122 = LLVMConstInt();
                  *v123 = v122;
                }
              }
              *((_QWORD *)&v307[1] + 1) = v122;
              goto LABEL_182;
            }
            v105 = glpPrecisionIndexFromSAFlags(*(_QWORD *)(v81 + 48));
            glpMetalGetArgTypeNameFromASTType((char *)v307, *(unsigned int **)v81, v105, 0);
            v305 = 0u;
            v306 = 0u;
            snprintf((char *)&v305, 0x1FuLL, "attrib%d", v296);
            v304 = 0;
            v302 = 0u;
            v303 = 0u;
            v300 = 0u;
            v301 = 0u;
            if (v78 > 7)
            {
              v107 = LLVMConstInt();
            }
            else
            {
              v106 = a1 + 8 * v78;
              v107 = *(_QWORD *)(v106 + 520);
              if (!v107)
              {
                v108 = (uint64_t *)(v106 + 520);
                v107 = LLVMConstInt();
                *v108 = v107;
              }
            }
            *(_QWORD *)&v300 = v107;
            *((_QWORD *)&v300 + 1) = LLVMMDStringInContext();
            *(_QWORD *)&v301 = LLVMMDStringInContext();
            if (v296 > 7)
            {
              v125 = LLVMConstInt();
            }
            else
            {
              v124 = a1 + 8 * v296;
              v125 = *(_QWORD *)(v124 + 520);
              if (!v125)
              {
                v126 = (uint64_t *)(v124 + 520);
                v125 = LLVMConstInt();
                *v126 = v125;
              }
            }
            *((_QWORD *)&v301 + 1) = v125;
            v127 = *(_QWORD *)(a1 + 528);
            if (!v127)
            {
              v127 = LLVMConstInt();
              *(_QWORD *)(a1 + 528) = v127;
            }
            *(_QWORD *)&v302 = v127;
            *((_QWORD *)&v302 + 1) = LLVMMDStringInContext();
            strlen((const char *)v307);
            *(_QWORD *)&v303 = LLVMMDStringInContext();
            *((_QWORD *)&v303 + 1) = LLVMMDStringInContext();
            strlen((const char *)&v305);
            v304 = LLVMMDStringInContext();
            v128 = LLVMMDNodeInContext();
            v129 = v296;
            *(_QWORD *)&v297[8 * v78] = v128;
            v130 = v78 + 1;
            v296 = (v129 + 1);
LABEL_183:
            v78 = v130;
            goto LABEL_220;
          }
          if ((v89 & 1) != 0)
          {
            v100 = glpPrecisionIndexFromSAFlags(*(_QWORD *)(v81 + 48));
            glpMetalGetArgTypeNameFromASTType((char *)v307, *(unsigned int **)v81, v100, 1);
            v101 = *((_DWORD *)v88 + 4);
            if (v101 == 18)
            {
              v300 = 0u;
              v301 = 0u;
              if (v78 > 7)
              {
                v134 = LLVMConstInt();
              }
              else
              {
                v133 = a1 + 8 * v78;
                v134 = *(_QWORD *)(v133 + 520);
                if (!v134)
                {
                  v135 = (uint64_t *)(v133 + 520);
                  v134 = LLVMConstInt();
                  *v135 = v134;
                }
              }
              *(_QWORD *)&v300 = v134;
              v137 = v287;
LABEL_181:
              strlen(v137);
              *((_QWORD *)&v300 + 1) = LLVMMDStringInContext();
              *(_QWORD *)&v301 = LLVMMDStringInContext();
              strlen((const char *)v307);
              *((_QWORD *)&v301 + 1) = LLVMMDStringInContext();
LABEL_182:
              *(_QWORD *)&v297[8 * v78] = LLVMMDNodeInContext();
              v130 = v78 + 1;
              goto LABEL_183;
            }
            if (v101 == 17)
            {
              v300 = 0u;
              v301 = 0u;
              if (v78 > 7)
              {
                v103 = LLVMConstInt();
              }
              else
              {
                v102 = a1 + 8 * v78;
                v103 = *(_QWORD *)(v102 + 520);
                if (!v103)
                {
                  v104 = (uint64_t *)(v102 + 520);
                  v103 = LLVMConstInt();
                  *v104 = v103;
                }
              }
              *(_QWORD *)&v300 = v103;
              v137 = v291;
              goto LABEL_181;
            }
          }
        }
LABEL_220:
        v77 += 8;
        if (v80 == v77)
        {
          if (*(_DWORD *)(a1 + 804))
          {
            v307[0] = 0uLL;
            if (v78 > 7)
            {
              v157 = LLVMConstInt();
              v67 = v298;
              LODWORD(v66) = v293;
            }
            else
            {
              v67 = v298;
              LODWORD(v66) = v293;
LABEL_238:
              v156 = a1 + 8 * v78;
              v157 = *(_QWORD *)(v156 + 520);
              if (!v157)
              {
                v158 = (uint64_t *)(v156 + 520);
                v157 = LLVMConstInt();
                *v158 = v157;
              }
            }
            *(_QWORD *)&v307[0] = v157;
            *((_QWORD *)&v307[0] + 1) = LLVMMDStringInContext();
            *(_QWORD *)&v297[8 * v78++] = LLVMMDNodeInContext();
          }
          else
          {
            v67 = v298;
            LODWORD(v66) = v293;
          }
          if (*(_DWORD *)(a1 + 812))
          {
            memset(v307, 0, 32);
            if (v78 > 7)
            {
              v159 = LLVMConstInt();
              goto LABEL_250;
            }
LABEL_248:
            v160 = a1 + 8 * v78;
            v159 = *(_QWORD *)(v160 + 520);
            if (!v159)
            {
              v161 = (uint64_t *)(v160 + 520);
              v159 = LLVMConstInt();
              *v161 = v159;
            }
LABEL_250:
            *(_QWORD *)&v307[0] = v159;
            *((_QWORD *)&v307[0] + 1) = LLVMMDStringInContext();
            *(_QWORD *)&v307[1] = LLVMMDStringInContext();
            *((_QWORD *)&v307[1] + 1) = LLVMMDStringInContext();
            *(_QWORD *)&v297[8 * v78++] = LLVMMDNodeInContext();
          }
          if (*(_DWORD *)(a1 + 820))
          {
            memset(v307, 0, 32);
            if (v78 > 7)
            {
              v163 = LLVMConstInt();
            }
            else
            {
LABEL_253:
              v162 = a1 + 8 * v78;
              v163 = *(_QWORD *)(v162 + 520);
              if (!v163)
              {
                v164 = (uint64_t *)(v162 + 520);
                v163 = LLVMConstInt();
                *v164 = v163;
              }
            }
            *(_QWORD *)&v307[0] = v163;
            *((_QWORD *)&v307[0] + 1) = LLVMMDStringInContext();
            *(_QWORD *)&v307[1] = LLVMMDStringInContext();
            *((_QWORD *)&v307[1] + 1) = LLVMMDStringInContext();
            *(_QWORD *)&v297[8 * v78++] = LLVMMDNodeInContext();
          }
          goto LABEL_257;
        }
      }
    }
    if (*(_DWORD *)(a1 + 804))
    {
      v78 = 0;
      v307[0] = 0uLL;
      goto LABEL_238;
    }
    if (*(_DWORD *)(a1 + 812))
    {
      v78 = 0;
      memset(v307, 0, 32);
      goto LABEL_248;
    }
    if (*(_DWORD *)(a1 + 820))
    {
      v78 = 0;
      memset(v307, 0, 32);
      goto LABEL_253;
    }
    v78 = 0;
LABEL_257:
    if ((*(_DWORD *)(a1 + 320) | 2) == 3)
    {
      v165 = *(unsigned int *)(a1 + 692);
      if ((int)v165 >= 1)
      {
        v166 = 0;
        v167 = &v297[8 * v78];
        do
        {
          *(_QWORD *)&v167[8 * v166] = glpLLVMVertexGeometryMetadata(a1, *(_QWORD *)(*(_QWORD *)(a1 + 696) + 8 * v166), v78 + v166);
          ++v166;
        }
        while (v165 != v166);
        v78 += v166;
        v67 = v298;
      }
    }
    v168 = *(_WORD *)(a1 + 832);
    DefaultUniformLocationCount = glpLinkedProgramGetDefaultUniformLocationCount(*(_QWORD *)(a1 + 136));
    v170 = 4 * glpLinkedProgramGetSubroutineUniformLocationCount(*(_QWORD *)(a1 + 136), *(_DWORD *)(a1 + 320))
         + 16 * DefaultUniformLocationCount;
    if ((v168 & 1) != 0)
    {
      memset(v307, 0, 64);
      if (v78 > 7)
      {
        v176 = LLVMConstInt();
        LODWORD(v173) = v299;
      }
      else
      {
        v175 = a1 + 8 * v78;
        v176 = *(_QWORD *)(v175 + 520);
        LODWORD(v173) = v299;
        if (!v176)
        {
          v177 = (uint64_t *)(v175 + 520);
          v176 = LLVMConstInt();
          *v177 = v176;
        }
      }
      *(_QWORD *)&v307[0] = v176;
      *((_QWORD *)&v307[0] + 1) = LLVMMDStringInContext();
      *(_QWORD *)&v307[1] = LLVMMDStringInContext();
      if (v170 > 7)
      {
        v182 = LLVMConstInt();
      }
      else
      {
        v181 = a1 + 8 * v170;
        v182 = *(_QWORD *)(v181 + 520);
        if (!v182)
        {
          v183 = (uint64_t *)(v181 + 520);
          v182 = LLVMConstInt();
          *v183 = v182;
        }
      }
      *((_QWORD *)&v307[1] + 1) = v182;
      *(_QWORD *)&v307[2] = LLVMMDStringInContext();
      *((_QWORD *)&v307[2] + 1) = LLVMConstInt();
      v184 = *(_QWORD *)(a1 + 528);
      if (!v184)
      {
        v184 = LLVMConstInt();
        *(_QWORD *)(a1 + 528) = v184;
      }
      *(_QWORD *)&v307[3] = v184;
      *((_QWORD *)&v307[3] + 1) = LLVMMDStringInContext();
    }
    else
    {
      memset(v307, 0, 32);
      if (v78 > 7)
      {
        v172 = LLVMConstInt();
        LODWORD(v173) = v299;
      }
      else
      {
        v171 = a1 + 8 * v78;
        v172 = *(_QWORD *)(v171 + 520);
        LODWORD(v173) = v299;
        if (!v172)
        {
          v174 = (uint64_t *)(v171 + 520);
          v172 = LLVMConstInt();
          *v174 = v172;
        }
      }
      *(_QWORD *)&v307[0] = v172;
      *((_QWORD *)&v307[0] + 1) = LLVMMDStringInContext();
      *(_QWORD *)&v307[1] = LLVMMDStringInContext();
      if (v170 > 7)
      {
        v179 = LLVMConstInt();
      }
      else
      {
        v178 = a1 + 8 * v170;
        v179 = *(_QWORD *)(v178 + 520);
        if (!v179)
        {
          v180 = (uint64_t *)(v178 + 520);
          v179 = LLVMConstInt();
          *v180 = v179;
        }
      }
      *((_QWORD *)&v307[1] + 1) = v179;
    }
    *(_QWORD *)&v297[8 * v78] = LLVMMDNodeInContext();
    if ((*(_WORD *)(a1 + 832) & 1) != 0)
    {
      *(_DWORD *)(a1 + 824) = v66;
      if (!(_DWORD)v66)
      {
        v186 = v78 + 1;
LABEL_321:
        if (v67 >= 1)
        {
          v214 = 0;
          v215 = v67;
          v216 = &v297[8 * (int)v186];
          v296 = v186;
          do
          {
            v217 = v186 + v214;
            v218 = *(unsigned int **)(*(_QWORD *)(a1 + 728) + 8 * v214);
            v219 = ((int)v186 + v214) & 0xFFFFFFF8;
            if ((*(_WORD *)(a1 + 832) & 1) != 0)
            {
              memset(v307, 0, 48);
              if (v219)
              {
                v221 = LLVMConstInt();
              }
              else
              {
                v236 = a1 + 8 * v217;
                v221 = *(_QWORD *)(v236 + 520);
                if (!v221)
                {
                  v237 = (uint64_t *)(v236 + 520);
                  v221 = LLVMConstInt();
                  *v237 = v221;
                }
              }
              *(_QWORD *)&v307[0] = v221;
              *((_QWORD *)&v307[0] + 1) = LLVMMDStringInContext();
              *(_QWORD *)&v307[1] = LLVMMDStringInContext();
              v238 = *v218 + 32;
              if (v238 > 7)
              {
                v240 = LLVMConstInt();
              }
              else
              {
                v239 = a1 + 8 * v238;
                v240 = *(_QWORD *)(v239 + 520);
                if (!v240)
                {
                  v241 = (uint64_t *)(v239 + 520);
                  v240 = LLVMConstInt();
                  *v241 = v240;
                }
              }
              *((_QWORD *)&v307[1] + 1) = v240;
              v242 = *(_QWORD *)(a1 + 528);
              if (!v242)
              {
                v242 = LLVMConstInt();
                *(_QWORD *)(a1 + 528) = v242;
              }
              *(_QWORD *)&v307[2] = v242;
              *((_QWORD *)&v307[2] + 1) = LLVMMDStringInContext();
            }
            else
            {
              memset(v307, 0, 64);
              if (v219)
              {
                v220 = LLVMConstInt();
              }
              else
              {
                v222 = a1 + 8 * v217;
                v220 = *(_QWORD *)(v222 + 520);
                if (!v220)
                {
                  v223 = (uint64_t *)(v222 + 520);
                  v220 = LLVMConstInt();
                  *v223 = v220;
                }
              }
              *(_QWORD *)&v307[0] = v220;
              *((_QWORD *)&v307[0] + 1) = LLVMMDStringInContext();
              *(_QWORD *)&v307[1] = LLVMMDStringInContext();
              v224 = *v218;
              if (v224 > 7)
              {
                v226 = LLVMConstInt();
              }
              else
              {
                v225 = a1 + 8 * v224;
                v226 = *(_QWORD *)(v225 + 520);
                if (!v226)
                {
                  v227 = (uint64_t *)(v225 + 520);
                  v226 = LLVMConstInt();
                  *v227 = v226;
                }
              }
              *((_QWORD *)&v307[1] + 1) = v226;
              *(_QWORD *)&v307[2] = LLVMMDStringInContext();
              v228 = v218[2];
              if (v228 > 7)
              {
                v230 = LLVMConstInt();
              }
              else
              {
                v229 = a1 + 8 * v228;
                v230 = *(_QWORD *)(v229 + 520);
                if (!v230)
                {
                  v231 = (uint64_t *)(v229 + 520);
                  v230 = LLVMConstInt();
                  *v231 = v230;
                }
              }
              *((_QWORD *)&v307[2] + 1) = v230;
              *(_QWORD *)&v307[3] = LLVMMDStringInContext();
              v232 = v218[1];
              if (v232 > 7)
              {
                v234 = LLVMConstInt();
              }
              else
              {
                v233 = a1 + 8 * v232;
                v234 = *(_QWORD *)(v233 + 520);
                if (!v234)
                {
                  v235 = (uint64_t *)(v233 + 520);
                  v234 = LLVMConstInt();
                  *v235 = v234;
                }
              }
              *((_QWORD *)&v307[3] + 1) = v234;
            }
            *(_QWORD *)&v216[8 * v214++] = LLVMMDNodeInContext();
          }
          while (v215 != v214);
          LODWORD(v186) = v296 + v214;
          LODWORD(v173) = v299;
        }
        if ((v295 & 1) == 0)
        {
          v307[2] = 0uLL;
          if (v186 > 7)
          {
            v244 = LLVMConstInt();
          }
          else
          {
            v243 = a1 + 8 * v186;
            v244 = *(_QWORD *)(v243 + 520);
            if (!v244)
            {
              v245 = (uint64_t *)(v243 + 520);
              v244 = LLVMConstInt();
              *v245 = v244;
            }
          }
          *(_QWORD *)&v307[0] = v244;
          *((_QWORD *)&v307[0] + 1) = LLVMMDStringInContext();
          *(_QWORD *)&v307[1] = LLVMMDStringInContext();
          *((_QWORD *)&v307[1] + 1) = LLVMConstInt();
          v246 = *(_QWORD *)(a1 + 528);
          if (!v246)
          {
            v246 = LLVMConstInt();
            *(_QWORD *)(a1 + 528) = v246;
          }
          *(_QWORD *)&v307[2] = v246;
          *((_QWORD *)&v307[2] + 1) = LLVMMDStringInContext();
          *(_QWORD *)&v297[8 * (int)v186] = LLVMMDNodeInContext();
          LODWORD(v186) = v186 + 1;
        }
        if ((*(_WORD *)(a1 + 832) & 1) == 0)
        {
LABEL_366:
          if ((int)v173 >= 1)
          {
            v248 = 0;
            v249 = 0;
            v250 = (uint64_t *)(int)v186;
            v173 = (const char *)v173;
            v296 = (int)v186 + (unint64_t)v173;
            v295 = &v297[8 * v296];
            v251 = &v297[8 * (int)v186];
            v252 = "air.binding";
            v292 = v250;
            v293 = a1 + 520;
            v291 = (const char *)v173;
            do
            {
              v253 = (_DWORD)v250 + v249;
              v254 = &v248[*(_QWORD *)(a1 + 600)];
              v299 = *((unsigned int *)v254 + 10);
              v298 = (int)v299;
              if ((*(_WORD *)(a1 + 832) & 1) != 0)
              {
                v294 = v248;
                v256 = v252;
                v257 = *((_DWORD *)v254 + 9);
                PPTextarget = glpPrimitiveSamplerGetPPTextarget(v257);
                if (PPTextarget >= 0x12)
                  goto LABEL_424;
                v259 = off_24F9470F8[PPTextarget];
                PPDatatype = glpPrimitiveSamplerGetPPDatatype(v257);
                if (PPDatatype)
                {
                  if (PPDatatype == 3)
                  {
                    v261 = "uint";
                  }
                  else
                  {
                    if (PPDatatype != 2)
                      goto LABEL_424;
                    v261 = "int";
                  }
                }
                else
                {
                  v261 = "float";
                }
                v267 = glpPrimitiveSamplerGetPPTextarget(v257);
                if (v267 >= 0x12)
                {
                  printf("Unsupported PP_TEX_TARGET: %d\n", v267);
                  abort();
                }
                snprintf_l((char *)v307, 0x200uLL, 0, "%s<%s, %s>", v259, v261, off_24F947188[v267]);
                *(_DWORD *)(*(_QWORD *)(a1 + 512) + 4 * v249) = v299;
                v302 = 0u;
                v303 = 0u;
                v300 = 0u;
                v301 = 0u;
                if ((v253 & 0xFFFFFFF8) != 0)
                {
                  v268 = LLVMConstInt();
                  v173 = v291;
                  LODWORD(v250) = (_DWORD)v292;
                  v252 = v256;
                  v248 = v294;
                }
                else
                {
                  v269 = a1 + 8 * v253;
                  v268 = *(_QWORD *)(v269 + 520);
                  v173 = v291;
                  LODWORD(v250) = (_DWORD)v292;
                  v252 = v256;
                  v248 = v294;
                  if (!v268)
                  {
                    v270 = (uint64_t *)(v269 + 520);
                    v268 = LLVMConstInt();
                    *v270 = v268;
                  }
                }
                *(_QWORD *)&v300 = v268;
                *((_QWORD *)&v300 + 1) = LLVMMDStringInContext();
                *(_QWORD *)&v301 = LLVMMDStringInContext();
                if (v249 > 7)
                {
                  v271 = LLVMConstInt();
                }
                else
                {
                  v271 = *(_QWORD *)(v293 + 8 * v249);
                  if (!v271)
                  {
                    v271 = LLVMConstInt();
                    *(_QWORD *)(v293 + 8 * v249) = v271;
                  }
                }
                *((_QWORD *)&v301 + 1) = v271;
                v272 = *(_QWORD *)(a1 + 528);
                if (!v272)
                {
                  v272 = LLVMConstInt();
                  *(_QWORD *)(a1 + 528) = v272;
                }
                *(_QWORD *)&v302 = v272;
                *((_QWORD *)&v302 + 1) = LLVMMDStringInContext();
                *(_QWORD *)&v303 = LLVMMDStringInContext();
                strlen((const char *)v307);
                *((_QWORD *)&v303 + 1) = LLVMMDStringInContext();
              }
              else
              {
                memset(v307, 0, 32);
                if ((((_DWORD)v250 + (_DWORD)v249) & 0xFFFFFFF8) != 0)
                {
                  v255 = LLVMConstInt();
                }
                else
                {
                  v262 = a1 + 8 * v253;
                  v255 = *(_QWORD *)(v262 + 520);
                  if (!v255)
                  {
                    v263 = (uint64_t *)(v262 + 520);
                    v255 = LLVMConstInt();
                    *v263 = v255;
                  }
                }
                *(_QWORD *)&v307[0] = v255;
                *((_QWORD *)&v307[0] + 1) = LLVMMDStringInContext();
                *(_QWORD *)&v307[1] = LLVMMDStringInContext();
                if (v299 > 7)
                {
                  v265 = LLVMConstInt();
                }
                else
                {
                  v264 = a1 + 8 * v299;
                  v265 = *(_QWORD *)(v264 + 520);
                  if (!v265)
                  {
                    v266 = (uint64_t *)(v264 + 520);
                    v265 = LLVMConstInt();
                    *v266 = v265;
                  }
                }
                *((_QWORD *)&v307[1] + 1) = v265;
              }
              *(_QWORD *)&v251[8 * v249] = LLVMMDNodeInContext();
              v273 = v296 + v249;
              v274 = (v296 + v249) & 0xFFFFFFF8;
              if ((*(_WORD *)(a1 + 832) & 1) != 0)
              {
                memset(v307, 0, 40);
                if (v274)
                {
                  v276 = LLVMConstInt();
                }
                else
                {
                  v282 = a1 + 8 * v273;
                  v276 = *(_QWORD *)(v282 + 520);
                  if (!v276)
                  {
                    v283 = (uint64_t *)(v282 + 520);
                    v276 = LLVMConstInt();
                    *v283 = v276;
                  }
                }
                *(_QWORD *)&v307[0] = v276;
                *((_QWORD *)&v307[0] + 1) = LLVMMDStringInContext();
                *(_QWORD *)&v307[1] = LLVMMDStringInContext();
                if (v249 > 7)
                {
                  v284 = LLVMConstInt();
                }
                else
                {
                  v284 = *(_QWORD *)(v293 + 8 * v249);
                  if (!v284)
                  {
                    v284 = LLVMConstInt();
                    *(_QWORD *)(v293 + 8 * v249) = v284;
                  }
                }
                *((_QWORD *)&v307[1] + 1) = v284;
                v285 = *(_QWORD *)(a1 + 528);
                if (!v285)
                {
                  v285 = LLVMConstInt();
                  *(_QWORD *)(a1 + 528) = v285;
                }
                *(_QWORD *)&v307[2] = v285;
              }
              else
              {
                memset(v307, 0, 32);
                if (v274)
                {
                  v275 = LLVMConstInt();
                }
                else
                {
                  v277 = a1 + 8 * v273;
                  v275 = *(_QWORD *)(v277 + 520);
                  if (!v275)
                  {
                    v278 = (uint64_t *)(v277 + 520);
                    v275 = LLVMConstInt();
                    *v278 = v275;
                  }
                }
                *(_QWORD *)&v307[0] = v275;
                *((_QWORD *)&v307[0] + 1) = LLVMMDStringInContext();
                *(_QWORD *)&v307[1] = LLVMMDStringInContext();
                if (v299 > 7)
                {
                  v280 = LLVMConstInt();
                }
                else
                {
                  v279 = a1 + 8 * v299;
                  v280 = *(_QWORD *)(v279 + 520);
                  if (!v280)
                  {
                    v281 = (uint64_t *)(v279 + 520);
                    v280 = LLVMConstInt();
                    *v281 = v280;
                  }
                }
                *((_QWORD *)&v307[1] + 1) = v280;
              }
              *(_QWORD *)&v295[8 * v249++] = LLVMMDNodeInContext();
              v248 += 48;
            }
            while (v173 != (const char *)v249);
          }
          goto LABEL_419;
        }
        *(_DWORD *)(a1 + 828) = (_DWORD)v173;
        if (!(_DWORD)v173)
        {
LABEL_419:
          *(_QWORD *)(a1 + 192) = LLVMMDNodeInContext();
          return v290;
        }
        v247 = malloc_type_malloc(4 * (int)v173, 0x1B2F740uLL);
        if (v247)
        {
          *(_QWORD *)(a1 + 512) = v247;
          bzero(v247, 4 * (int)v173);
          goto LABEL_366;
        }
LABEL_424:
        abort();
      }
      v185 = malloc_type_malloc(4 * (int)v66, 0x1B2F740uLL);
      if (!v185)
        goto LABEL_424;
      *(_QWORD *)(a1 + 504) = v185;
      bzero(v185, 4 * (int)v66);
    }
    v186 = v78 + 1;
    if ((int)v66 >= 1)
    {
      v187 = 0;
      v188 = v66;
      v189 = &v297[8 * (int)v186];
      v296 = v78 + 1;
      v190 = v78 + 1;
      do
      {
        v191 = v190 + v187;
        v192 = *(unsigned int **)(*(_QWORD *)(a1 + 712) + 8 * v187);
        if ((*(_WORD *)(a1 + 832) & 1) != 0)
        {
          *(_DWORD *)(*(_QWORD *)(a1 + 504) + 4 * v187) = *v192;
          memset(v307, 0, 64);
          if (((v190 + (_DWORD)v187) & 0xFFFFFFF8) != 0)
          {
            v194 = LLVMConstInt();
          }
          else
          {
            v205 = a1 + 8 * v191;
            v194 = *(_QWORD *)(v205 + 520);
            if (!v194)
            {
              v206 = (uint64_t *)(v205 + 520);
              v194 = LLVMConstInt();
              *v206 = v194;
            }
          }
          *(_QWORD *)&v307[0] = v194;
          *((_QWORD *)&v307[0] + 1) = LLVMMDStringInContext();
          *(_QWORD *)&v307[1] = LLVMMDStringInContext();
          v207 = v192[1];
          if (v207 > 7)
          {
            v209 = LLVMConstInt();
          }
          else
          {
            v208 = a1 + 8 * v207;
            v209 = *(_QWORD *)(v208 + 520);
            if (!v209)
            {
              v210 = (uint64_t *)(v208 + 520);
              v209 = LLVMConstInt();
              *v210 = v209;
            }
          }
          *((_QWORD *)&v307[1] + 1) = v209;
          *(_QWORD *)&v307[2] = LLVMMDStringInContext();
          if (v187 > 7)
          {
            v212 = LLVMConstInt();
          }
          else
          {
            v211 = a1 + 8 * v187;
            v212 = *(_QWORD *)(v211 + 520);
            if (!v212)
            {
              v212 = LLVMConstInt();
              *(_QWORD *)(v211 + 520) = v212;
            }
          }
          *((_QWORD *)&v307[2] + 1) = v212;
          v213 = *(_QWORD *)(a1 + 528);
          if (!v213)
          {
            v213 = LLVMConstInt();
            *(_QWORD *)(a1 + 528) = v213;
          }
          *(_QWORD *)&v307[3] = v213;
          *((_QWORD *)&v307[3] + 1) = LLVMMDStringInContext();
        }
        else
        {
          memset(v307, 0, 48);
          if (((v190 + (_DWORD)v187) & 0xFFFFFFF8) != 0)
          {
            v193 = LLVMConstInt();
          }
          else
          {
            v195 = a1 + 8 * v191;
            v193 = *(_QWORD *)(v195 + 520);
            if (!v193)
            {
              v196 = (uint64_t *)(v195 + 520);
              v193 = LLVMConstInt();
              *v196 = v193;
            }
          }
          *(_QWORD *)&v307[0] = v193;
          *((_QWORD *)&v307[0] + 1) = LLVMMDStringInContext();
          *(_QWORD *)&v307[1] = LLVMMDStringInContext();
          v197 = *v192;
          if (v197 > 7)
          {
            v199 = LLVMConstInt();
          }
          else
          {
            v198 = a1 + 8 * v197;
            v199 = *(_QWORD *)(v198 + 520);
            if (!v199)
            {
              v200 = (uint64_t *)(v198 + 520);
              v199 = LLVMConstInt();
              *v200 = v199;
            }
          }
          *((_QWORD *)&v307[1] + 1) = v199;
          *(_QWORD *)&v307[2] = LLVMMDStringInContext();
          v201 = v192[1];
          if (v201 > 7)
          {
            v203 = LLVMConstInt();
          }
          else
          {
            v202 = a1 + 8 * v201;
            v203 = *(_QWORD *)(v202 + 520);
            if (!v203)
            {
              v204 = (uint64_t *)(v202 + 520);
              v203 = LLVMConstInt();
              *v204 = v203;
            }
          }
          *((_QWORD *)&v307[2] + 1) = v203;
        }
        *(_QWORD *)&v189[8 * v187++] = LLVMMDNodeInContext();
      }
      while (v188 != v187);
      v186 = (v296 + v187);
      LODWORD(v173) = v299;
      v67 = v298;
    }
    goto LABEL_321;
  }
  LODWORD(v291) = v25;
  v287 = (const char *)v36;
  v289 = v37;
  v39 = strndup(v37, v36);
  if (v6)
  {
    v40 = 0;
    v41 = v35;
    v42 = v292;
  }
  else
  {
    v42 = v292;
    v40 = *v292;
    v41 = v35;
  }
  v43 = v6;
  glpLLVMBuildFunctionType(a1, v40, v6, v15, (int)v291, *((_DWORD *)v42 + 2));
  v288 = v39;
  v290 = LLVMAddFunction();
  glpLLVMAddFunctionAttrInner(a1, v290, 1);
  v45 = v27;
  if ((*(_BYTE *)(v41 + 10) & 0x10) != 0)
  {
    v46 = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, const char *))(*(_QWORD *)(a1 + 152) + 8))(**(_QWORD **)(a1 + 152), 24, "subroutine");
    v46[1] = 0;
    v46[2] = 0;
    *v46 = 0;
    *v46 = v41;
    *((_DWORD *)v46 + 4) = *(_DWORD *)(v41 + 160);
    v46[1] = v290;
    v47 = *(unsigned int *)(a1 + 628);
    v48 = v47 + 1;
    v49 = *(_DWORD *)(a1 + 624);
    if ((int)v47 + 1 <= v49)
    {
      v52 = *(char **)(a1 + 632);
      v53 = *(_DWORD *)(a1 + 628);
    }
    else
    {
      if (v49 <= 1)
        v49 = 1;
      LODWORD(v50) = 2 * v49;
      if ((int)v50 <= v48)
        v50 = v48;
      else
        v50 = v50;
      v292 = (uint64_t *)v50;
      v51 = *(_QWORD **)(a1 + 152);
      v52 = (char *)((uint64_t (*)(_QWORD, uint64_t, const char *))v51[1])(*v51, 8 * v50, "Vector Storage (GLPLLVMSubroutineFunction *, growth)");
      memcpy(v52, *(const void **)(a1 + 632), 8 * *(unsigned int *)(a1 + 628));
      v28 = v298;
      ((void (*)(_QWORD, _QWORD))v51[3])(*v51, *(_QWORD *)(a1 + 632));
      *(_DWORD *)(a1 + 624) = (_DWORD)v292;
      *(_QWORD *)(a1 + 632) = v52;
      v53 = *(_DWORD *)(a1 + 628);
    }
    memmove(&v52[8 * v47 + 8], &v52[8 * v47], 8 * (v53 - v47));
    *(_QWORD *)(*(_QWORD *)(a1 + 632) + 8 * v47) = v46;
    ++*(_DWORD *)(a1 + 628);
  }
  if ((_DWORD)v297)
    v54 = LLVMGetParam();
  else
    v54 = 0;
  LODWORD(v292) = v43;
  *(_QWORD *)(a1 + 440) = v54;
  v293 = v45;
  if ((int)v45 >= 1)
  {
    v55 = 0;
    v56 = v45;
    do
    {
      v57 = *(_QWORD *)(*(_QWORD *)(a1 + 712) + 8 * v55);
      *(_QWORD *)(v57 + 8) = LLVMGetParam();
      ++v55;
    }
    while (v56 != v55);
    v28 = v298;
  }
  if (v28 >= 1)
  {
    for (j = 0; j != v28; ++j)
    {
      v59 = *(_QWORD *)(*(_QWORD *)(a1 + 728) + 8 * j);
      *(_QWORD *)(v59 + 16) = LLVMGetParam();
    }
  }
  v60 = (uint64_t)v287;
  if ((v295 & 1) == 0)
    *(_QWORD *)(a1 + 448) = LLVMGetParam();
  v61 = v290;
  if ((int)v299 >= 1)
  {
    v62 = 0;
    v63 = v299;
    v64 = 8;
    do
    {
      v65 = (uint64_t *)(*(_QWORD *)(a1 + 600) + v64);
      *(v65 - 1) = LLVMGetParam();
      *v65 = LLVMGetParam();
      ++v62;
      v64 += 48;
    }
    while (v63 != v62);
  }
  glpStringHashPut(*(_QWORD *)(a1 + 736), v289, v60, v61, v44);
  free(v288);
  result = v61;
  v28 = v298;
  v27 = v293;
  if ((_DWORD)v292)
    goto LABEL_97;
  return result;
}

uint64_t glpLLVMCGVariableDeclarationGroup(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned int v5;
  uint64_t Declaration;

  result = glpVariableDeclarationGroupNodeGetDeclarationCount(a2);
  if ((_DWORD)result)
  {
    v5 = 0;
    do
    {
      Declaration = glpVariableDeclarationGroupNodeGetDeclaration(a2, v5);
      glpLLVMCGNode(a1, Declaration, 1);
      ++v5;
      result = glpVariableDeclarationGroupNodeGetDeclarationCount(a2);
    }
    while (v5 < result);
  }
  return result;
}

llvm::Function *glpLLVMCGFunctionDefinition(uint64_t a1, uint64_t a2)
{
  uint64_t Prototype;
  uint64_t Extra;
  uint64_t v6;
  llvm::Function *v7;
  uint64_t v8;
  uint64_t v9;
  const char *Name;
  unsigned int v11;
  char *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  _QWORD *v32;
  char *v33;
  int v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t *v58;
  char *v59;
  void (*v60)(uint64_t, _QWORD);
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t i;
  unint64_t v65;
  uint64_t v66;
  double v67;
  uint64_t *v69;
  llvm::Function *v70;
  uint64_t Body;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char __dst[8];
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD v79[3];

  v79[1] = *MEMORY[0x24BDAC8D0];
  Prototype = glpFunctionDefinitionNodeGetPrototype(a2);
  Extra = glpFunctionPrototypeNodeGetExtra(Prototype);
  if ((*(_BYTE *)(Extra + 9) & 0x20) != 0)
    return 0;
  v6 = Extra;
  v7 = (llvm::Function *)glpLLVMCGNode(a1, Prototype, 0);
  *(_QWORD *)(v6 + 144) = v7;
  *(_QWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 160) = v7;
  *(_QWORD *)(a1 + 336) = **(_QWORD **)(v6 + 152);
  v8 = LLVMCreateBuilderInContext();
  *(_QWORD *)(a1 + 16) = v8;
  glpLLVMSetFastMathFlags(v8, *(unsigned __int16 *)(a1 + 326), (*(unsigned __int16 *)(a1 + 832) >> 5) & 1);
  Body = glpFunctionDefinitionNodeGetBody(a2);
  *(_QWORD *)(a1 + 176) = LLVMAppendBasicBlock();
  v9 = LLVMAppendBasicBlock();
  *(_QWORD *)(a1 + 184) = v9;
  LLVMAppendBasicBlock();
  LLVMPositionBuilderAtEnd();
  if (*(_QWORD *)(a1 + 24))
  {
    Name = (const char *)glpFunctionPrototypeNodeGetName(Prototype);
    v12 = strndup(Name, v11);
    glpLLVMDIBuilderCreateSubProgram(*(GLPDebugInfoContext **)(a1 + 24), v7, v12);
    glpLLVMAddLineInformation(a1, a2);
    free(v12);
  }
  v13 = (const char *)glpFunctionPrototypeNodeGetName(Prototype);
  *(_WORD *)(a1 + 324) = glpStringsEqual(v13, v14, "main", 0x83863A00000004);
  *(_QWORD *)(a1 + 344) = glpMakePointerHash(GLP_MALLOC_ALLOCATOR);
  *(_QWORD *)(a1 + 352) = glpMakePointerHash(GLP_MALLOC_ALLOCATOR);
  if (*(_WORD *)(a1 + 324))
  {
    v70 = v7;
    v15 = *(unsigned int *)(a1 + 676);
    if ((int)v15 >= 1)
    {
      v16 = 0;
      v17 = 0;
      v18 = 8 * v15;
      v72 = 0;
      v73 = 8 * v15;
      do
      {
        v19 = *(_QWORD *)(*(_QWORD *)(a1 + 680) + v16);
        v20 = *(_DWORD *)(a1 + 320);
        if ((v20 - 1) >= 3)
        {
          if (v20 == 4)
          {
            v35 = glpLayoutObjectFind(*(uint64_t **)(v19 + 8), 34);
            v36 = glpPrecisionIndexFromSAFlags(*(_QWORD *)(v19 + 48));
            v37 = glpTypeToLLVMType((_QWORD *)a1, *(unsigned int **)v19, v36, (_QWORD *)v19);
            switch(*((_DWORD *)v35 + 4))
            {
              case 1:
                v50 = glpLayoutObjectFind(*(uint64_t **)(v19 + 8), 20);
                LLVMGetParam();
                if (v50 && (*(_WORD *)(a1 + 832) & 1) != 0)
                {
                  LLVMFloatTypeInContext();
                  v51 = llvm::ConstantFP::get();
                  LLVMFloatTypeInContext();
                  *(_QWORD *)__dst = llvm::ConstantFP::get();
                  v76 = *(_QWORD *)__dst;
                  v77 = v51;
                  v78 = v51;
                  LLVMConstVector();
                  LLVMBuildFSub();
                }
                goto LABEL_23;
              case 2:
              case 3:
              case 0xB:
              case 0xC:
              case 0xE:
              case 0x10:
              case 0x16:
              case 0x17:
              case 0x1B:
                goto LABEL_22;
              case 0x18:
                v79[0] = LLVMGetParam();
                v52 = MEMORY[0x22E316F4C](*(_QWORD *)(a1 + 496), 2);
                *(_QWORD *)__dst = 0x300000001;
                glpLLVMCallFunctionInner(a1, (uint64_t)"air.get_sample_position.v2f32", v52, (uint64_t)v79, 1u, (int *)__dst, 2u, (uint64_t)"");
                break;
              case 0x1C:
                if ((*(_BYTE *)(*(_QWORD *)(v19 + 144) + 32) & 1) == 0)
                {
                  v53 = *(unsigned int *)(a1 + 644);
                  v54 = *(_DWORD *)(a1 + 640);
                  if ((int)v53 + 1 <= v54)
                  {
                    v59 = *(char **)(a1 + 648);
                    v62 = *(_DWORD *)(a1 + 644);
                  }
                  else
                  {
                    if (v54 <= 1)
                      v54 = 1;
                    v55 = 2 * v54;
                    if (v55 <= (int)v53 + 1)
                      v56 = v53 + 1;
                    else
                      v56 = v55;
                    v57 = v9;
                    v58 = *(uint64_t **)(a1 + 152);
                    v59 = (char *)((uint64_t (*)(_QWORD, uint64_t, const char *))v58[1])(*v58, 8 * v56, "Vector Storage (GLPVariableObject *, growth)");
                    memcpy(v59, *(const void **)(a1 + 648), 8 * *(unsigned int *)(a1 + 644));
                    v60 = (void (*)(uint64_t, _QWORD))v58[3];
                    v61 = *v58;
                    v9 = v57;
                    v18 = v73;
                    v60(v61, *(_QWORD *)(a1 + 648));
                    *(_DWORD *)(a1 + 640) = v56;
                    *(_QWORD *)(a1 + 648) = v59;
                    v62 = *(_DWORD *)(a1 + 644);
                  }
                  memmove(&v59[8 * v53 + 8], &v59[8 * v53], 8 * (v62 - v53));
                  *(_QWORD *)(*(_QWORD *)(a1 + 648) + 8 * v53) = v19;
                  ++*(_DWORD *)(a1 + 644);
                  *(_DWORD *)(*(_QWORD *)(v19 + 144) + 32) |= 1u;
                }
LABEL_22:
                LLVMGetParam();
LABEL_23:
                ++v17;
                break;
              default:
                break;
            }
            glpLLVMGetVariablePointer(a1, v19);
            MEMORY[0x22E316EC8](v37, 0);
            LLVMBuildPointerCast();
            goto LABEL_25;
          }
          if (!v20)
          {
            v25 = glpLayoutObjectFind(*(uint64_t **)(v19 + 8), 34);
            v26 = glpPrecisionIndexFromSAFlags(*(_QWORD *)(v19 + 48));
            v74 = 0;
            if ((*(_BYTE *)(*(_QWORD *)(v19 + 144) + 32) & 1) == 0)
            {
              v27 = *(unsigned int *)(a1 + 644);
              v28 = *(_DWORD *)(a1 + 640);
              if ((int)v27 + 1 <= v28)
              {
                v33 = *(char **)(a1 + 648);
                v34 = *(_DWORD *)(a1 + 644);
              }
              else
              {
                if (v28 <= 1)
                  v28 = 1;
                v29 = 2 * v28;
                v69 = v25;
                v30 = v9;
                if (v29 <= (int)v27 + 1)
                  v31 = v27 + 1;
                else
                  v31 = v29;
                v32 = *(_QWORD **)(a1 + 152);
                v33 = (char *)((uint64_t (*)(_QWORD, uint64_t, const char *))v32[1])(*v32, 8 * v31, "Vector Storage (GLPVariableObject *, growth)");
                memcpy(v33, *(const void **)(a1 + 648), 8 * *(unsigned int *)(a1 + 644));
                ((void (*)(_QWORD, _QWORD))v32[3])(*v32, *(_QWORD *)(a1 + 648));
                *(_DWORD *)(a1 + 640) = v31;
                v9 = v30;
                v25 = v69;
                *(_QWORD *)(a1 + 648) = v33;
                v34 = *(_DWORD *)(a1 + 644);
              }
              memmove(&v33[8 * v27 + 8], &v33[8 * v27], 8 * (v34 - v27));
              *(_QWORD *)(*(_QWORD *)(a1 + 648) + 8 * v27) = v19;
              ++*(_DWORD *)(a1 + 644);
              *(_DWORD *)(*(_QWORD *)(v19 + 144) + 32) |= 1u;
              v18 = v73;
            }
            v38 = glpTypeToLLVMType((_QWORD *)a1, *(unsigned int **)v19, v26, (_QWORD *)v19);
            v39 = *((_DWORD *)v25 + 4);
            switch(v39)
            {
              case 17:
                if ((*(_WORD *)(a1 + 832) & 1) == 0)
                {
                  if (!v72)
                    strncpy(__dst, "air.get_vertex_id.i32", 0x200uLL);
                  v43 = 0;
                  v44 = *(_QWORD *)(a1 + 40);
                  if (!v72)
                  {
LABEL_45:
                    v79[0] = 0x400000001;
                    v46 = glpLLVMCallFunctionInner(a1, (uint64_t)__dst, v44, (uint64_t)&v74, v43, (int *)v79, 2u, (uint64_t)"");
                    v45 = *((_DWORD *)v25 + 4);
                    v47 = v72;
                    if (v45 == 17)
                      v47 = v46;
                    v72 = v47;
                    goto LABEL_48;
                  }
LABEL_44:
                  v45 = *((_DWORD *)v25 + 4);
LABEL_48:
                  if ((v45 - 17) <= 1 && (_DWORD)v26 != 0 && (_DWORD)v26 != 3)
                    LLVMBuildTrunc();
                  glpLLVMGetVariablePointer(a1, v19);
                  MEMORY[0x22E316EC8](v38, 0);
                  LLVMBuildPointerCast();
                  LLVMBuildStore();
                  v18 = v73;
                  break;
                }
LABEL_42:
                v42 = LLVMGetParam();
LABEL_43:
                ++v17;
                v43 = 1;
                v44 = v38;
                if (!v42)
                  goto LABEL_45;
                goto LABEL_44;
              case 18:
                if ((*(_WORD *)(a1 + 832) & 1) == 0)
                {
                  strncpy(__dst, "air.get_instance_id.i32", 0x200uLL);
                  v43 = 0;
                  v44 = *(_QWORD *)(a1 + 40);
                  goto LABEL_45;
                }
                goto LABEL_42;
              case 28:
                if ((*(_WORD *)(a1 + 832) & 1) != 0)
                  goto LABEL_42;
                v40 = v72;
                if (!v72)
                {
                  v41 = *(_QWORD *)(a1 + 40);
                  *(_QWORD *)__dst = 0x400000001;
                  v40 = glpLLVMCallFunctionInner(a1, (uint64_t)"air.get_vertex_id.i32", v41, (uint64_t)&v74, 0, (int *)__dst, 2u, (uint64_t)"");
                }
                LLVMGetParam();
                v72 = v40;
                *(_QWORD *)__dst = v40;
                LLVMBuildGEP();
                v42 = LLVMBuildLoad();
                goto LABEL_43;
            }
          }
        }
        else
        {
          glpLayoutObjectFind(*(uint64_t **)(v19 + 8), 34);
          v21 = LLVMGetParam();
          ++v17;
          if ((*(_BYTE *)(*(_QWORD *)(v19 + 144) + 32) & 4) == 0)
          {
            glpLLVMGetVariablePointer(a1, v19);
            v23 = glpPrecisionIndexFromSAFlags(*(_QWORD *)(v19 + 48));
            v24 = glpTypeToLLVMType((_QWORD *)a1, *(unsigned int **)v19, v23, (_QWORD *)v19);
            MEMORY[0x22E316EC8](v24, 0);
            LLVMBuildPointerCast();
LABEL_25:
            LLVMBuildStore();
            goto LABEL_57;
          }
          glpPointerHashPut(*(_QWORD *)(a1 + 344), v19, v21, v22);
        }
LABEL_57:
        v16 += 8;
      }
      while (v18 != v16);
    }
    v7 = v70;
    *(_QWORD *)(a1 + 168) = v70;
    *(_QWORD *)(a1 + 208) = 0;
    if ((*(_DWORD *)(a1 + 320) | 2) == 3)
    {
      v63 = *(unsigned int *)(a1 + 692);
      if ((int)v63 >= 1)
      {
        for (i = 0; i != v63; ++i)
        {
          v65 = *(_QWORD *)(*(_QWORD *)(a1 + 696) + 8 * i);
          v66 = LLVMGetParam();
          glpPointerHashPut(*(_QWORD *)(a1 + 344), v65, v66, v67);
        }
      }
    }
  }
  glpLLVMCGNode(a1, Body, 0);
  glpDestroyPointerHash(*(_QWORD *)(a1 + 344));
  *(_QWORD *)(a1 + 344) = 0;
  glpDestroyPointerHash(*(_QWORD *)(a1 + 352));
  *(_QWORD *)(a1 + 352) = 0;
  if (*(_QWORD *)(a1 + 24))
    glpLLVMClearCurrentLineInner();
  *(_DWORD *)(a1 + 332) = 0;
  *(_QWORD *)(a1 + 440) = 0;
  *(_WORD *)(a1 + 324) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  LLVMPositionBuilderAtEnd();
  glpLLVMEmitBranchInnerReal();
  *(_DWORD *)(a1 + 332) = 0;
  LLVMPositionBuilderAtEnd();
  glpLLVMEmitBranchInnerReal();
  *(_DWORD *)(a1 + 332) = 0;
  LLVMDisposeBuilder();
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  return v7;
}

uint64_t glpLLVMCGInterfaceBlock(uint64_t a1, uint64_t a2)
{
  uint64_t Extra;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  Extra = glpInterfaceBlockNodeGetExtra(a2);
  result = glpInterfaceBlockObjectGetVariableObjectCount(Extra);
  if ((_DWORD)result)
  {
    v5 = 0;
    v6 = 8 * result;
    do
    {
      result = glpLLVMCGDeclareVariable(a1, *(_QWORD *)(*(_QWORD *)(Extra + 72) + v5));
      v5 += 8;
    }
    while (v6 != v5);
  }
  return result;
}

uint64_t glpLLVMCGBlock(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  unsigned int v5;
  unsigned int v6;
  uint64_t Statement;
  uint64_t PrimitiveType;
  int *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int IsSimpleComponentAssigment;
  int Length;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  unsigned int **v30;
  int v31[8];
  int v32[8];
  int v33;
  _BYTE v34[36];

  *(_QWORD *)&v34[28] = *MEMORY[0x24BDAC8D0];
  result = glpBlockNodeGetStatementCount(a2);
  if ((_DWORD)result)
  {
    v5 = result;
    v6 = 0;
    while (1)
    {
      Statement = glpBlockNodeGetStatement(a2, v6);
      v29 = 0;
      v30 = 0;
      if (glpIsSimpleComponentAssigment(Statement, &v30, &v29, &v33, v31))
      {
        PrimitiveType = glpPrimitiveTypeGetPrimitiveType((uint64_t)*v30);
        if (glpPrimitiveTypeGetCategory(PrimitiveType) == 2)
        {
          v9 = (int *)v34;
          v10 = v32;
          v11 = 1;
          do
          {
            v12 = v11;
            if (v11 == 8)
              break;
            if (v6 + v11 >= v5)
              break;
            v13 = glpBlockNodeGetStatement(a2, v6 + v11);
            IsSimpleComponentAssigment = glpIsSimpleComponentAssigment(v13, &v30, &v29, v9, v10);
            v11 = v12 + 1;
            ++v10;
            ++v9;
          }
          while (IsSimpleComponentAssigment);
          Length = glpPrimitiveVectorGetLength(PrimitiveType);
          v16 = v29;
          v17 = glpPrimitiveTypeGetPrimitiveType(*v29);
          v18 = glpPrimitiveVectorGetLength(v17);
          if (Length == (_DWORD)v12)
            break;
        }
      }
LABEL_20:
      result = glpLLVMCGNode(a1, Statement, 0);
      LODWORD(v12) = 1;
LABEL_21:
      v6 += v12;
      if (v6 >= v5)
        return result;
    }
    v19 = 0;
    v20 = v18;
    while (v19 == *(_DWORD *)&v34[4 * v19 - 4])
    {
      if (v12 == ++v19)
        goto LABEL_15;
    }
    if ((_DWORD)v12 != (_DWORD)v19)
      goto LABEL_20;
LABEL_15:
    v21 = glpLLVMGetVariablePointer((uint64_t)a1, (unint64_t)v16);
    glpLoadSourceVariable(a1, v21, (uint64_t)v16);
    if (v20 == (_DWORD)v12)
    {
      v22 = 0;
      while (v22 == v31[v22])
      {
        if (v12 == ++v22)
        {
          glpLLVMGetVariablePointer((uint64_t)a1, (unint64_t)v30);
          goto LABEL_35;
        }
      }
      glpLLVMGetVariablePointer((uint64_t)a1, (unint64_t)v30);
      if ((_DWORD)v12 == (_DWORD)v22)
        goto LABEL_35;
    }
    else
    {
      glpLLVMGetVariablePointer((uint64_t)a1, (unint64_t)v30);
    }
    LLVMTypeOf();
    v23 = LLVMGetElementType();
    MEMORY[0x22E316E2C](v23);
    v24 = 0;
    do
    {
      v25 = v31[v24];
      if (v25 > 7)
      {
        LLVMConstInt();
      }
      else
      {
        v26 = &a1[v25];
        if (!v26[65])
          v26[65] = LLVMConstInt();
      }
      LLVMBuildExtractElement();
      v27 = *(unsigned int *)&v34[4 * v24 - 4];
      if (v27 > 7)
      {
        LLVMConstInt();
      }
      else
      {
        v28 = &a1[v27];
        if (!v28[65])
          v28[65] = LLVMConstInt();
      }
      LLVMBuildInsertElement();
      ++v24;
    }
    while (v12 != v24);
LABEL_35:
    result = LLVMBuildStore();
    goto LABEL_21;
  }
  return result;
}

uint64_t glpLLVMCGIfStatement(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t Cond;
  uint64_t ElseStatement;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t IfStatement;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 432);
  Cond = glpIfStatementNodeGetCond(a2);
  glpLLVMCGNode(a1, Cond, 1);
  glpLLVMCGInsertBasicBlock(a1);
  ElseStatement = glpIfStatementNodeGetElseStatement(a2);
  if (ElseStatement)
    v7 = glpLLVMCGInsertBasicBlock(a1);
  else
    v7 = 0;
  v8 = glpLLVMCGInsertBasicBlock(a1);
  glpLLVMClearCurrentLineInner();
  LLVMBuildCondBr();
  LLVMPositionBuilderAtEnd();
  if (v7)
    v9 = v7;
  else
    v9 = v8;
  *(_QWORD *)(a1 + 432) = v9;
  IfStatement = glpIfStatementNodeGetIfStatement(a2);
  glpLLVMCGNode(a1, IfStatement, 0);
  glpLLVMEmitBranchInnerReal();
  *(_DWORD *)(a1 + 332) = 0;
  if (ElseStatement)
  {
    LLVMPositionBuilderAtEnd();
    *(_QWORD *)(a1 + 432) = v8;
    glpLLVMCGNode(a1, ElseStatement, 0);
    glpLLVMEmitBranchInnerReal();
    *(_DWORD *)(a1 + 332) = 0;
  }
  result = LLVMPositionBuilderAtEnd();
  *(_QWORD *)(a1 + 432) = v4;
  return result;
}

uint64_t glpLLVMCGLoopStatement(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t Body0;
  uint64_t Body1;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  __int128 v17;

  glpLLVMAddLineInformation(a1, a2);
  v4 = *(_QWORD *)(a1 + 432);
  Body0 = glpLoopStatementNodeGetBody0(a2);
  Body1 = glpLoopStatementNodeGetBody1(a2);
  v7 = Body1;
  if (!Body0)
  {
    if (Body1)
    {
      v10 = glpLLVMCGInsertBasicBlock(a1);
      goto LABEL_7;
    }
    v11 = 1;
LABEL_12:
    v9 = glpLLVMCGInsertBasicBlock(a1);
    glpLLVMEmitBranchInnerReal();
    *(_DWORD *)(a1 + 332) = 0;
    LLVMPositionBuilderAtEnd();
    goto LABEL_13;
  }
  v8 = glpLLVMCGInsertBasicBlock(a1);
  v9 = v8;
  if (v7)
  {
    v10 = glpLLVMCGInsertBasicBlock(a1);
    if (v9)
    {
      v11 = 0;
      goto LABEL_14;
    }
LABEL_7:
    v11 = 0;
    v9 = v10;
    if (v10)
      goto LABEL_14;
    goto LABEL_12;
  }
  v11 = 1;
  if (!v8)
    goto LABEL_12;
LABEL_13:
  v10 = 0;
LABEL_14:
  v12 = glpLLVMCGInsertBasicBlock(a1);
  v13 = v12;
  v17 = *(_OWORD *)(a1 + 416);
  if (v10)
    v14 = v10;
  else
    v14 = v9;
  *(_QWORD *)(a1 + 416) = v14;
  *(_QWORD *)(a1 + 424) = v12;
  if (Body0)
  {
    glpLLVMEmitBranchInnerReal();
    *(_DWORD *)(a1 + 332) = 0;
    LLVMPositionBuilderAtEnd();
    if (v11)
      v15 = v13;
    else
      v15 = v10;
    *(_QWORD *)(a1 + 432) = v15;
    glpLLVMCGNode(a1, Body0, 0);
  }
  if ((v11 & 1) == 0)
  {
    glpLLVMEmitBranchInnerReal();
    *(_DWORD *)(a1 + 332) = 0;
    LLVMPositionBuilderAtEnd();
    *(_QWORD *)(a1 + 432) = v13;
    glpLLVMCGNode(a1, v7, 0);
  }
  glpLLVMEmitBranchInnerReal();
  *(_DWORD *)(a1 + 332) = 0;
  *(_OWORD *)(a1 + 416) = v17;
  result = LLVMPositionBuilderAtEnd();
  *(_QWORD *)(a1 + 432) = v4;
  return result;
}

uint64_t glpLLVMCGSwitchStatement(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t Expr;
  uint64_t v6;
  uint64_t v7;
  uint64_t Body;
  int ChildCount;
  int v10;
  unsigned int v11;
  int v12;
  uint64_t Child;
  uint64_t v14;
  uint64_t result;

  glpLLVMAddLineInformation(a1, a2);
  v4 = *(_QWORD *)(a1 + 432);
  Expr = glpSwitchStatementNodeGetExpr(a2);
  glpLLVMCGNode(a1, Expr, 1);
  v6 = glpLLVMCGInsertBasicBlock(a1);
  v7 = *(_QWORD *)(a1 + 424);
  *(_QWORD *)(a1 + 424) = v6;
  *(_QWORD *)(a1 + 432) = v6;
  glpLLVMCGInsertBasicBlock(a1);
  Body = glpSwitchStatementNodeGetBody(a2);
  ChildCount = glpASTNodeGetChildCount(Body);
  if (ChildCount >= 1)
  {
    v10 = ChildCount;
    v11 = 0;
    v12 = 0;
    do
    {
      Child = glpASTNodeGetChild(Body, v11);
      if (glpIsCaseStatementNode(Child))
        ++v12;
      ++v11;
    }
    while (v10 != v11);
  }
  v14 = *(_QWORD *)(a1 + 408);
  *(_QWORD *)(a1 + 408) = LLVMBuildSwitch();
  glpLLVMCGNode(a1, Body, 0);
  glpLLVMEmitBranchInnerReal();
  *(_DWORD *)(a1 + 332) = 0;
  LLVMPositionBuilderAtEnd();
  glpLLVMEmitBranchInnerReal();
  *(_DWORD *)(a1 + 332) = 0;
  result = LLVMPositionBuilderAtEnd();
  *(_QWORD *)(a1 + 408) = v14;
  *(_QWORD *)(a1 + 424) = v7;
  *(_QWORD *)(a1 + 432) = v4;
  return result;
}

void glpLLVMCGCaseStatement(uint64_t a1, uint64_t a2)
{
  uint64_t ConstValue;
  uint64_t inserted;

  glpLLVMAddLineInformation(a1, a2);
  ConstValue = glpCaseStatementNodeGetConstValue(a2);
  glpLLVMCGNode(a1, ConstValue, 1);
  inserted = LLVMGetInsertBlock();
  if (!glpLLVMBasicBlockEmpty(inserted))
  {
    glpLLVMCGInsertBasicBlock(a1);
    glpLLVMEmitBranchInnerReal();
    *(_DWORD *)(a1 + 332) = 0;
  }
  LLVMPositionBuilderAtEnd();
  JUMPOUT(0x22E316A48);
}

uint64_t glpLLVMCGDefaultStatement(uint64_t a1, uint64_t a2)
{
  glpLLVMAddLineInformation(a1, a2);
  LLVMGetSwitchDefaultDest();
  glpLLVMEmitBranchInnerReal();
  *(_DWORD *)(a1 + 332) = 0;
  return LLVMPositionBuilderAtEnd();
}

uint64_t glpLLVMCGBreakStatement(uint64_t a1, uint64_t a2)
{
  glpLLVMAddLineInformation(a1, a2);
  glpLLVMClearCurrentLineInner();
  return LLVMBuildBr();
}

uint64_t glpLLVMCGContinueStatement(uint64_t a1, uint64_t a2)
{
  glpLLVMAddLineInformation(a1, a2);
  glpLLVMClearCurrentLineInner();
  return LLVMBuildBr();
}

uint64_t glpLLVMCGDiscardStatement(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v5;

  glpLLVMAddLineInformation(a1, a2);
  v3 = LLVMVoidTypeInContext();
  *(_QWORD *)(a1 + 744) |= 2uLL;
  v5 = 2;
  return glpLLVMCallFunctionInner(a1, (uint64_t)"air.discard_fragment", v3, 0, 0, &v5, (*(_WORD *)(a1 + 832) & 0x10) == 0, (uint64_t)"");
}

void glpLLVMCGReturnStatement(uint64_t a1, uint64_t a2)
{
  glpLLVMAddLineInformation(a1, a2);
  if (!*(_QWORD *)(a1 + 408))
    *(_DWORD *)(a1 + 332) = 1;
  if (*(_WORD *)(a1 + 324) && *(_QWORD *)(a1 + 208))
  {
    *(_QWORD *)(a1 + 208) = 0;
    JUMPOUT(0x22E316C1CLL);
  }
  JUMPOUT(0x22E316C28);
}

uint64_t glpLLVMCGRawCallNode(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t *v10;
  size_t v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  _QWORD v16[2];

  v16[1] = *MEMORY[0x24BDAC8D0];
  glpLLVMAddLineInformation(a1, a2);
  v4 = glpRawCallNodeGetExtra(a2);
  v5 = *(_QWORD *)(v4 + 144);
  v6 = *(_DWORD **)(v4 + 152);
  v7 = *(_QWORD *)v6;
  v8 = *(_DWORD *)(*(_QWORD *)v6 + 36);
  MEMORY[0x24BDAC7A8](v4);
  v10 = (_QWORD *)((char *)v16 - ((v9 + 15) & 0xFFFFFFFF0));
  if (v9 >= 0x200)
    v11 = 512;
  else
    v11 = v9;
  bzero((char *)v16 - ((v9 + 15) & 0xFFFFFFFF0), v11);
  v12 = *(unsigned int *)(v7 + 32);
  if ((_DWORD)v12)
  {
    v13 = (unint64_t *)(*(_QWORD *)(v7 + 40) + 8);
    do
    {
      v14 = *(v13 - 1);
      if (v14)
        *(unint64_t *)((char *)v10 + (((v14 << 32) - 0x100000000) >> 29)) = *v13;
      v13 += 3;
      --v12;
    }
    while (v12);
  }
  return glpLLVMSharedRawCall(a1, v6[2], v5, v10, v8);
}

uint64_t glpLLVMCGSubroutineRawCall(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t SubroutineUniformHash;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t Def;
  uint64_t v24;
  uint64_t Prototype;
  uint64_t Extra;
  uint64_t DefCount;
  _DWORD *v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  unint64_t *v32;
  size_t v33;
  uint64_t v34;
  unint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  glpLLVMAddLineInformation(a1, a2);
  v4 = glpSubroutineRawCallNodeGetExtra(a2);
  v5 = glpSubroutineRawCallNodeGetIndexExpr(a2);
  v6 = *(_QWORD *)(v4 + 16);
  MEMORY[0x22E316EC8](*(_QWORD *)(a1 + 40), 2);
  LLVMBuildPointerCast();
  v7 = *(_DWORD *)(v4 + 40) + 4 * glpLinkedProgramGetDefaultUniformLocationCount(*(_QWORD *)(a1 + 136));
  if (v7 > 7)
  {
    v9 = LLVMConstInt();
  }
  else
  {
    v8 = a1 + 8 * v7;
    v9 = *(_QWORD *)(v8 + 520);
    if (!v9)
    {
      v10 = (uint64_t *)(v8 + 520);
      v9 = LLVMConstInt();
      *v10 = v9;
    }
  }
  v48 = v9;
  if (v5)
  {
    glpArrayTypeGetElementType(v6);
    glpLLVMCGNode(a1, v5, 1);
    v48 = LLVMBuildAdd();
  }
  LLVMBuildGEP();
  LLVMBuildLoad();
  SubroutineUniformHash = glpLinkedProgramGetSubroutineUniformHash(*(_QWORD *)(a1 + 136), *(_DWORD *)(a1 + 320));
  v12 = *(unsigned int *)(SubroutineUniformHash + 32);
  if ((_DWORD)v12)
  {
    v13 = 0;
    v14 = *(uint64_t **)(SubroutineUniformHash + 40);
    do
    {
      v15 = *v14;
      if (*v14)
      {
        v16 = *(_DWORD *)(v15 + 4);
        v17 = v15 + 64;
        if (v16 == *(_DWORD *)(v4 + 40))
          v13 = v17;
      }
      v14 += 4;
      --v12;
    }
    while (v12);
  }
  else
  {
    v13 = 0;
  }
  v47 = glpLLVMCGInsertBasicBlock(a1);
  v46 = LLVMBuildSwitch();
  if (*(_DWORD *)(v13 + 4))
  {
    v18 = 0;
    v45 = v13;
    do
    {
      v19 = *(unsigned int *)(*(_QWORD *)(v13 + 8) + 4 * v18);
      v20 = glpLLVMCGInsertBasicBlock(a1);
      LLVMPositionBuilderAtEnd();
      glpTopLevelNodeGetDefCount(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8 * *(unsigned int *)(a1 + 320) + 184));
      v21 = 0;
      v22 = 0;
      do
      {
        Def = glpTopLevelNodeGetDef(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8 * *(unsigned int *)(a1 + 320) + 184), v21);
        if (Def)
        {
          v24 = Def;
          if (glpASTNodeGetKind(Def) == 51)
          {
            Prototype = glpFunctionDefinitionNodeGetPrototype(v24);
            Extra = glpFunctionPrototypeNodeGetExtra(Prototype);
            if ((*(_BYTE *)(Extra + 10) & 0x10) != 0 && *(_DWORD *)(Extra + 160) == (_DWORD)v19)
              v22 = Extra;
          }
        }
        ++v21;
        DefCount = glpTopLevelNodeGetDefCount(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8 * *(unsigned int *)(a1 + 320) + 184));
      }
      while (v21 < DefCount);
      v28 = *(_DWORD **)(v22 + 152);
      v29 = *(_QWORD *)v28;
      v30 = *(_DWORD *)(*(_QWORD *)v28 + 36);
      MEMORY[0x24BDAC7A8](DefCount);
      v32 = (unint64_t *)((char *)&v44 - ((v31 + 15) & 0xFFFFFFFF0));
      if (v31 >= 0x200)
        v33 = 512;
      else
        v33 = v31;
      bzero((char *)&v44 - ((v31 + 15) & 0xFFFFFFFF0), v33);
      v34 = *(unsigned int *)(v29 + 32);
      if ((_DWORD)v34)
      {
        v35 = (unint64_t *)(*(_QWORD *)(v29 + 40) + 8);
        do
        {
          v36 = *(v35 - 1);
          if (v36)
            *(unint64_t *)((char *)v32 + (((v36 << 32) - 0x100000000) >> 29)) = *v35;
          v35 += 3;
          --v34;
        }
        while (v34);
      }
      v37 = *(unsigned int *)(a1 + 628);
      if ((_DWORD)v37)
      {
        v38 = 0;
        v39 = *(_QWORD *)(a1 + 632);
        do
        {
          if (*(_DWORD *)(*(_QWORD *)v39 + 16) == (_DWORD)v19)
            v38 = *(_QWORD *)(*(_QWORD *)v39 + 8);
          v39 += 8;
          --v37;
        }
        while (v37);
      }
      else
      {
        v38 = 0;
      }
      glpLLVMSharedRawCall(a1, v28[2], v38, v32, v30);
      glpLLVMEmitBranchInnerReal();
      *(_DWORD *)(a1 + 332) = 0;
      if (v19 > 7)
      {
        v41 = LLVMConstInt();
        v13 = v45;
      }
      else
      {
        v40 = a1 + 8 * v19;
        v41 = *(_QWORD *)(v40 + 520);
        v13 = v45;
        if (!v41)
        {
          v42 = (uint64_t *)(v40 + 520);
          v41 = LLVMConstInt();
          *v42 = v41;
        }
      }
      MEMORY[0x22E316A48](v46, v41, v20);
      ++v18;
    }
    while (v18 < *(unsigned int *)(v13 + 4));
  }
  return LLVMPositionBuilderAtEnd();
}

uint64_t glpLLVMCGLValue(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t VariableExtra;
  uint64_t v7;
  uint64_t OffsetExpr;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *SaType;
  char SaFlags;
  unsigned int v17;
  uint64_t v18;
  uint64_t Offset;
  uint64_t v20;
  uint64_t BankIndex;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t inserted;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BOOL4 ConstantOffset;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t Length;
  uint64_t v53;
  uint64_t ScalarType;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  unsigned int Swizzle;
  uint64_t VectorElementExpr;
  unsigned int v61;
  int v62;
  int CompStride;
  uint64_t v64;
  unsigned int v65;
  unsigned int PrimitiveType;
  uint64_t v67;
  uint64_t v68;
  _QWORD v69[3];

  v69[2] = *MEMORY[0x24BDAC8D0];
  glpLLVMAddLineInformation((uint64_t)a1, a2);
  VariableExtra = glpLValueNodeGetVariableExtra(a2);
  v7 = *(_QWORD *)(*(_QWORD *)(VariableExtra + 144) + 16);
  if (v7)
    return *(_QWORD *)(v7 + 16);
  v10 = VariableExtra;
  v11 = *(uint64_t **)(VariableExtra + 8);
  if (v11)
  {
    v12 = glpLayoutObjectFind(v11, 46);
    if (v12)
    {
      if (*((_DWORD *)v12 + 4) == 9)
      {
        v13 = a1[5];
        v69[0] = 0x300000001;
        return glpLLVMCallFunctionInner((uint64_t)a1, (uint64_t)"air.get_num_samples.i32", v13, 0, 0, (int *)v69, 2u, (uint64_t)"");
      }
    }
  }
  v14 = glpLLVMGetVariablePointer((uint64_t)a1, v10);
  SaType = (_DWORD *)glpASTNodeGetSaType(a2);
  SaFlags = glpASTNodeGetSaFlags(a2);
  v17 = glpPrecisionIndexFromSAFlags(SaFlags);
  if (!v17)
  {
    v18 = glpLValueNodeGetVariableExtra(a2);
    v17 = glpPrecisionIndexFromSAFlags(*(_QWORD *)(v18 + 48));
  }
  Offset = glpDerefNodeGetOffset(a2);
  v20 = a1[5];
  if (glpTypeIsAtomic(SaType))
  {
    PrimitiveType = glpPrimitiveTypeGetPrimitiveType((uint64_t)SaType);
    if (Offset)
      goto LABEL_12;
  }
  else
  {
    PrimitiveType = 0;
    if (Offset)
    {
LABEL_12:
      v65 = v17;
      BankIndex = glpOffsetNodeGetBankIndex(Offset);
      if (BankIndex)
        v22 = *(_DWORD *)glpConstantNodeGetValue(BankIndex);
      else
        v22 = 0;
      CompStride = glpOffsetNodeGetCompStride(Offset);
      OffsetExpr = glpOffsetNodeGetOffsetExpr(Offset);
      if (glpOffsetNodeGetPreSwizzlePrimitiveType(Offset))
        PrimitiveType = glpOffsetNodeGetPreSwizzlePrimitiveType(Offset);
      if (!a3)
      {
        if (OffsetExpr)
        {
          glpLLVMCGNode(a1, OffsetExpr, 0);
          return 0;
        }
        return OffsetExpr;
      }
      goto LABEL_21;
    }
  }
  OffsetExpr = 0;
  if (!a3)
    return OffsetExpr;
  v65 = v17;
  v22 = 0;
  CompStride = -1;
LABEL_21:
  if (glpTypeIsAtomic(SaType))
  {
    v69[0] = 0;
    v69[1] = 0;
    v68 = 0;
    if ((*(_BYTE *)(v10 + 52) & 1) == 0)
    {
      if (OffsetExpr)
      {
        v23 = v65;
        v24 = PrimitiveType;
        if ((PrimitiveType & 0xFFFFFFFE) != 0x40 || *(_DWORD *)(*(_QWORD *)(v10 + 144) + 24) == PrimitiveType)
        {
          v26 = a1;
          v27 = v10;
          v28 = v14;
          v29 = OffsetExpr;
          v25 = 0;
        }
        else
        {
          v25 = &v68;
          v26 = a1;
          v27 = v10;
          v28 = v14;
          v29 = OffsetExpr;
        }
        v14 = glpBuildArrayElementPtr(v26, v27, v28, v29, v25, 0);
      }
      else
      {
        v23 = v65;
        v24 = PrimitiveType;
      }
      v35 = glpLLVMLoadVector(a1, v10, v14, v24, v23, *(unsigned int *)(*(_QWORD *)(v10 + 144) + 24), *(_DWORD *)(*(_QWORD *)(v10 + 144) + 28));
      goto LABEL_83;
    }
    v30 = glpASTNodeGetSaType(a2);
    v31 = glpPrimitiveTypeGetPrimitiveType(v30);
    if (glpPrimitiveTypeGetCategory(v31) == 4)
    {
      inserted = LLVMConstInt();
      if (!OffsetExpr)
        return inserted;
      glpLLVMCGNode(a1, OffsetExpr, 1);
      LLVMBuildZExt();
      return LLVMBuildAdd();
    }
    if ((*(_BYTE *)(v10 + 52) & 8) == 0)
    {
      LODWORD(v67) = 0;
      if (OffsetExpr)
      {
        v24 = PrimitiveType;
        if (!glpGetConstantOffset(OffsetExpr, &v67))
        {
          if (glpLLVMCGNode(a1, OffsetExpr, 1))
          {
            LLVMTypeOf();
            LLVMConstInt();
            v46 = LLVMBuildAdd();
          }
          else
          {
            v46 = LLVMConstInt();
          }
          v69[0] = v46;
          v43 = LLVMBuildGEP();
          goto LABEL_63;
        }
        v34 = v67;
      }
      else
      {
        v34 = 0;
        v24 = PrimitiveType;
      }
      v43 = glpBuildUniformElementPtr(a1, v10, a1[55], 0, 0, *(_DWORD *)(v10 + 156) + v34);
LABEL_63:
      v50 = v43;
      v51 = 4;
LABEL_70:
      v62 = v51;
      if (glpPrimitiveTypeGetCategory(v24) == 2)
      {
        Length = glpPrimitiveVectorGetLength(v24);
        if (Length >= 2 && CompStride != -1)
        {
          v53 = Length;
          ScalarType = glpPrimitiveTypeGetScalarType(v24);
          v61 = ScalarType;
          glpLLVMReadUniform(a1, v50, v62, ScalarType, v65);
          v55 = LLVMTypeOf();
          v56 = MEMORY[0x22E316F4C](v55, v53);
          MEMORY[0x22E316E2C](v56);
          v57 = 0;
          v67 = LLVMConstInt();
          v64 = v20;
          do
          {
            if ((_DWORD)v57 && (glpLLVMReadUniform(a1, v50, v62, v61, v65), v57 > 7))
            {
              LLVMConstInt();
            }
            else
            {
              v58 = &a1[v57];
              if (!v58[65])
                v58[65] = LLVMConstInt();
              v20 = v64;
            }
            inserted = LLVMBuildInsertElement();
            v50 = LLVMBuildGEP();
            ++v57;
          }
          while ((_DWORD)v53 != (_DWORD)v57);
          v24 = PrimitiveType;
          goto LABEL_84;
        }
      }
      v35 = glpLLVMReadUniform(a1, v50, v62, v24, v65);
LABEL_83:
      inserted = v35;
LABEL_84:
      if (!Offset)
        return inserted;
      Swizzle = glpOffsetNodeGetSwizzle(Offset);
      inserted = glpCGSwizzle((uint64_t)a1, 0, 0, inserted, v24, Swizzle);
      VectorElementExpr = glpOffsetNodeGetVectorElementExpr(Offset);
      if (!VectorElementExpr)
        return inserted;
      glpLLVMCGNode(a1, VectorElementExpr, 1);
      if (LLVMTypeOf() != v20)
        LLVMBuildIntCast();
      return LLVMBuildExtractElement();
    }
    v36 = *(_QWORD *)(v10 + 88);
    v37 = *(_QWORD *)(a1[89] + 8 * (v22 + *(_DWORD *)(v36 + 24) - 1));
    if (*(_DWORD *)(v36 + 8) == 1)
    {
      v38 = LLVMFloatTypeInContext();
      v39 = MEMORY[0x22E316EC8](v38, 2);
    }
    else
    {
      v39 = 0;
    }
    v24 = PrimitiveType;
    LODWORD(v67) = 0;
    if (!OffsetExpr)
    {
      v42 = 0;
      v41 = *(_QWORD *)(v10 + 88);
      goto LABEL_50;
    }
    ConstantOffset = glpGetConstantOffset(OffsetExpr, &v67);
    v41 = *(_QWORD *)(v10 + 88);
    if (ConstantOffset)
    {
      v42 = v67;
LABEL_50:
      if (*(_DWORD *)(v41 + 8) == 1)
        v44 = v42 >> 2;
      else
        v44 = v42;
      v45 = glpBuildUniformElementPtr(a1, v10, *(_QWORD *)(v37 + 8), v39, v22, v44);
      goto LABEL_67;
    }
    if (*(_DWORD *)(v41 + 8) == 1)
      LLVMBuildPointerCast();
    v47 = glpLLVMCGNode(a1, OffsetExpr, 1);
    if (v47)
    {
      v48 = v47;
      LLVMTypeOf();
      if (*(_DWORD *)(*(_QWORD *)(v10 + 88) + 8) != 1)
      {
LABEL_66:
        v69[0] = v48;
        v45 = LLVMBuildGEP();
LABEL_67:
        v50 = v45;
        if (*(_DWORD *)(*(_QWORD *)(v10 + 88) + 8) == 1)
          v51 = 1;
        else
          v51 = 4;
        goto LABEL_70;
      }
      LLVMConstInt();
      v49 = LLVMBuildAShr();
    }
    else
    {
      v49 = LLVMConstInt();
    }
    v48 = v49;
    goto LABEL_66;
  }
  return LLVMBuildLoad();
}

uint64_t glpLLVMCGRValue(uint64_t a1, uint64_t a2)
{
  _DWORD *SaType;
  uint64_t Base;
  uint64_t v6;
  uint64_t Offset;
  uint64_t v8;
  uint64_t OffsetExpr;
  uint64_t v10;
  uint64_t v11;
  uint64_t PrimitiveType;
  uint64_t v13;
  double v14;
  char SaFlags;
  uint64_t v16;
  unsigned int Swizzle;
  uint64_t VectorElementExpr;
  uint64_t v19;

  SaType = (_DWORD *)glpASTNodeGetSaType(a2);
  if (!glpTypeIsAtomic(SaType))
    return 0;
  glpLLVMAddLineInformation(a1, a2);
  Base = glpRValueNodeGetBase(a2);
  v6 = glpLLVMCGNode(a1, Base, 1);
  Offset = glpDerefNodeGetOffset(a2);
  if (Offset)
  {
    v8 = Offset;
    OffsetExpr = glpOffsetNodeGetOffsetExpr(Offset);
    if (OffsetExpr)
      v10 = glpLLVMCGNode(a1, OffsetExpr, 1);
    else
      v10 = 0;
    v11 = glpASTNodeGetSaType(a2);
    PrimitiveType = glpPrimitiveTypeGetPrimitiveType(v11);
    if (glpOffsetNodeGetPreSwizzlePrimitiveType(v8))
      PrimitiveType = glpOffsetNodeGetPreSwizzlePrimitiveType(v8);
    if (v10)
    {
      if ((*(_WORD *)(a1 + 832) & 8) != 0
        && glpASTNodeGetKind(Base) == 3
        && (glpASTNodeGetSaFlags(Base) & 0x60) != 0)
      {
        if (!glpPointerHashGet(*(_QWORD *)(a1 + 344), v6))
        {
          LLVMTypeOf();
          v13 = LLVMAddGlobalInAddressSpace();
          LLVMSetGlobalConstant();
          v14 = MEMORY[0x22E316F10](v13, v6);
          glpPointerHashPut(*(_QWORD *)(a1 + 344), v6, v13, v14);
        }
      }
      else
      {
        LLVMTypeOf();
        glpBuildAlloca();
        LLVMBuildStore();
      }
      if (!*(_QWORD *)(a1 + 520))
        *(_QWORD *)(a1 + 520) = LLVMConstInt();
      LLVMBuildGEP();
      v6 = LLVMBuildLoad();
      SaFlags = glpASTNodeGetSaFlags(a2);
      v16 = glpPrecisionIndexFromSAFlags(SaFlags);
      glpPrimitiveTypeToLLVMType((_QWORD *)a1, PrimitiveType, v16);
    }
    Swizzle = glpOffsetNodeGetSwizzle(v8);
    v6 = glpCGSwizzle(a1, 0, 0, v6, PrimitiveType, Swizzle);
    VectorElementExpr = glpOffsetNodeGetVectorElementExpr(v8);
    if (VectorElementExpr)
    {
      glpLLVMCGNode(a1, VectorElementExpr, 1);
      v19 = *(_QWORD *)(a1 + 40);
      if (LLVMTypeOf() != v19)
        LLVMBuildIntCast();
      return LLVMBuildExtractElement();
    }
  }
  return v6;
}

unint64_t glpLLVMWriteOutput(uint64_t a1, uint64_t a2)
{
  unint64_t result;
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t i;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t PrimitiveType;
  int Length;
  int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;

  result = glpWriteOutputNodeGetExtra(a2);
  v4 = result;
  v5 = *(_DWORD *)(a1 + 320);
  if (v5 == 4)
  {
    if (!*(_QWORD *)(a1 + 208))
      *(_QWORD *)(a1 + 208) = MEMORY[0x22E316E2C](*(_QWORD *)(a1 + 200));
    v6 = *(unsigned int *)(a1 + 692);
    if ((int)v6 >= 1)
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)(*(_QWORD *)(a1 + 696) + 8 * i) == v4)
          break;
      }
    }
    v8 = glpLayoutObjectFind(*(uint64_t **)(v4 + 8), 68);
    glpLLVMGetVariablePointer(a1, v4);
    v9 = glpPrecisionIndexFromSAFlags(*(_QWORD *)(v4 + 48));
    v10 = glpTypeToLLVMType((_QWORD *)a1, *(unsigned int **)v4, v9, (_QWORD *)v4);
    MEMORY[0x22E316EC8](v10, 0);
    LLVMBuildPointerCast();
    LLVMBuildLoad();
    v11 = glpLayoutObjectFind(*(uint64_t **)(v4 + 8), 77);
    if (v11 && *((_DWORD *)v11 + 4) == 2)
      *(_DWORD *)(a1 + 760) |= 0x1000u;
    if (*((_DWORD *)v8 + 4) != 4)
      goto LABEL_30;
    PrimitiveType = glpPrimitiveTypeGetPrimitiveType(*(_QWORD *)v4);
    if (glpPrimitiveTypeGetCategory(PrimitiveType) == 2)
    {
      Length = glpPrimitiveVectorGetLength(PrimitiveType);
      if (Length > 3)
      {
LABEL_30:
        result = LLVMBuildInsertValue();
        *(_QWORD *)(a1 + 208) = result;
        return result;
      }
      v14 = Length;
      if (Length > 1)
        v10 = LLVMGetElementType();
    }
    else
    {
      v14 = 1;
    }
    v15 = MEMORY[0x22E316F4C](v10, 4);
    MEMORY[0x22E316E2C](v15);
    if (v14 >= 1)
    {
      v16 = 0;
      v17 = a1 + 520;
      do
      {
        if (v16 > 7)
        {
          LLVMConstInt();
        }
        else if (!*(_QWORD *)(v17 + 8 * v16))
        {
          *(_QWORD *)(v17 + 8 * v16) = LLVMConstInt();
        }
        if (v14 != 1)
          LLVMBuildExtractElement();
        LLVMBuildInsertElement();
        ++v16;
      }
      while (v14 != v16);
    }
    goto LABEL_30;
  }
  if (v5 == 2 || !v5)
    return glpLLVMCGWriteVertexOuptut(a1, result);
  return result;
}

void glpLLVMAddLineInformation(uint64_t a1, uint64_t a2)
{
  __n128 v2;
  uint64_t v3;

  if (*(_QWORD *)(a1 + 24))
  {
    v2 = 0uLL;
    v3 = 0;
    glpASTNodeGetLocation(a2, &v2);
    if ((_DWORD)v3 != -1)
      glpLLVMSetCurrentLineInner();
  }
}

uint64_t glpPrimitiveTypeToLLVMType(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t ColumnType;
  uint64_t PrimitiveType;
  unsigned int v9;
  uint64_t ElementType;

  switch(glpPrimitiveTypeGetCategory(a2))
  {
    case 0u:
      return LLVMVoidTypeInContext();
    case 1u:
      if ((int)a2 > 8)
      {
        if ((_DWORD)a2 == 9)
          return a1[8];
        if ((_DWORD)a2 != 36)
        {
          if ((_DWORD)a2 == 62)
            return LLVMDoubleTypeInContext();
LABEL_15:
          glpPrimitiveVectorGetLength(a2);
          ElementType = glpPrimitiveVectorGetElementType(a2);
          glpPrimitiveTypeToLLVMType(a1, ElementType, a3);
          JUMPOUT(0x22E316F4CLL);
        }
        goto LABEL_12;
      }
      if ((_DWORD)a2 != 1)
      {
        if ((_DWORD)a2 != 5)
          goto LABEL_15;
LABEL_12:
        if ((_DWORD)a3 == 2)
          return a1[58];
        if ((_DWORD)a3 == 1)
          return a1[57];
        return a1[59];
      }
      if ((_DWORD)a3 == 2)
        return a1[61];
      if ((_DWORD)a3 == 1)
        return a1[60];
      return a1[62];
    case 2u:
      goto LABEL_15;
    case 3u:
      ColumnType = glpPrimitiveMatrixGetColumnType(a2);
      PrimitiveType = glpGetPrimitiveType(a2);
      v9 = glpABIGetTypeSize(0, PrimitiveType, 0);
      glpTypeSizeGetSize(v9);
      glpPrimitiveTypeToLLVMType(a1, ColumnType, a3);
      return LLVMArrayType();
    case 4u:
      return a1[5];
    default:
      glpPrimitiveTypeToLLVMType_cold_1(a2);
  }
}

uint64_t glpLLVMBuildConversion(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7)
{
  const char *v11;
  const char *v12;
  const char *v14;
  const char *v15;
  uint64_t v16;
  char v17[512];
  _QWORD v18[2];

  v18[1] = *MEMORY[0x24BDAC8D0];
  v15 = 0;
  v16 = a2;
  v11 = glpLLVMGetTypeString(&v15, a4, a5);
  v14 = 0;
  v12 = glpLLVMGetTypeString(&v14, a6, a7);
  snprintf_l(v17, 0x200uLL, 0, "%s%s.%s%s.%s", "air.convert", v14, v12, v15, v11);
  v18[0] = 0x300000001;
  return glpLLVMCallFunctionInner(a1, (uint64_t)v17, a3, (uint64_t)&v16, 1u, (int *)v18, 2u, (uint64_t)"");
}

uint64_t glpTypeGetVec4s(uint64_t a1)
{
  unsigned int v1;

  v1 = glpABIGetTypeSize(0, a1, 0);
  return glpTypeSizeGetSize(v1);
}

const char *glpLLVMGetTypeString(const char **a1, int a2, int a3)
{
  const char *result;
  unsigned int v5;
  const char *v6;
  const char *v7;
  const char *v8;
  const char *v9;
  const char *v10;
  const char *v11;

  *a1 = "";
  result = "i1";
  switch(a2)
  {
    case 1:
      *a1 = ".f";
      v5 = a3 - 1;
      v6 = "f32";
      v7 = "f16";
      goto LABEL_24;
    case 2:
      *a1 = ".f";
      v5 = a3 - 1;
      v6 = "v2f32";
      v7 = "v2f16";
      goto LABEL_24;
    case 3:
      *a1 = ".f";
      v5 = a3 - 1;
      v6 = "v3f32";
      v7 = "v3f16";
      goto LABEL_24;
    case 4:
      *a1 = ".f";
      v5 = a3 - 1;
      v6 = "v4f32";
      v7 = "v4f16";
      goto LABEL_24;
    case 5:
      v8 = ".s";
      goto LABEL_17;
    case 6:
      v9 = ".s";
      goto LABEL_19;
    case 7:
      v10 = ".s";
      goto LABEL_21;
    case 8:
      v11 = ".s";
      goto LABEL_23;
    case 9:
      return result;
    case 10:
      return "v2i1";
    case 11:
      return "v3i1";
    case 12:
      return "v4i1";
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
      return "";
    case 36:
      v8 = ".u";
LABEL_17:
      *a1 = v8;
      v5 = a3 - 1;
      v6 = "i32";
      v7 = "i16";
      goto LABEL_24;
    case 37:
      v9 = ".u";
LABEL_19:
      *a1 = v9;
      v5 = a3 - 1;
      v6 = "v2i32";
      v7 = "v2i16";
      goto LABEL_24;
    case 38:
      v10 = ".u";
LABEL_21:
      *a1 = v10;
      v5 = a3 - 1;
      v6 = "v3i32";
      v7 = "v3i16";
      goto LABEL_24;
    case 39:
      v11 = ".u";
LABEL_23:
      *a1 = v11;
      v5 = a3 - 1;
      v6 = "v4i32";
      v7 = "v4i16";
LABEL_24:
      if (v5 >= 2)
        result = v6;
      else
        result = v7;
      break;
    default:
      switch(a2)
      {
        case '>':
          *a1 = ".f";
          result = "f64";
          break;
        case '?':
          *a1 = ".f";
          result = "v2f64";
          break;
        case '@':
          *a1 = ".f";
          result = "v3f64";
          break;
        case 'A':
          *a1 = ".f";
          result = "v4f64";
          break;
        default:
          return "";
      }
      break;
  }
  return result;
}

uint64_t glpLLVMAggregateConstant(_QWORD *a1, unsigned int *a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t VectorType;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v18 = a3;
  v19 = 1;
  v7 = glpLLVMGetMinCommonType(a2, (int *)&v19, &v18);
  v8 = glpABIGetTypeSize(0, (uint64_t)a2, 0);
  glpTypeSizeGetSize(v8);
  v9 = v19;
  VectorType = glpGetVectorType(v7, v19);
  MEMORY[0x24BDAC7A8](VectorType);
  v13 = (char *)&v18 - v12;
  if (v11 >= 0x200)
    v14 = 512;
  else
    v14 = v11;
  bzero((char *)&v18 - v12, v14);
  v15 = v18;
  glpLLVMCreateConstantVectors(a1, (uint64_t)v13, 0, a4, a2, VectorType, v18);
  v16 = glpPrimitiveTypeToLLVMType(a1, v7, v15);
  if (v9 >= 2)
    MEMORY[0x22E316F4C](v16, v9);
  return LLVMConstArray();
}

uint64_t glpLLVMPrimitiveConstant(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t result;
  unsigned int Length;
  uint64_t ColumnType;
  uint64_t PrimitiveType;
  unsigned int v19;
  int v20;
  unsigned int v21;
  int ElementType;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  size_t v27;
  uint64_t i;
  unsigned int v29;
  char *v30;
  _QWORD v31[2];

  v31[1] = *MEMORY[0x24BDAC8D0];
  v14 = glpPrimitiveTypeToLLVMType(a1, a6, a7);
  result = glpPrimitiveTypeGetCategory(a5);
  if ((result - 1) >= 2)
  {
    if ((_DWORD)result == 3)
    {
      ColumnType = glpPrimitiveMatrixGetColumnType(a5);
      PrimitiveType = glpGetPrimitiveType(a5);
      v19 = glpABIGetTypeSize(0, PrimitiveType, 0);
      result = glpTypeSizeGetSize(v19);
      if ((_DWORD)result)
      {
        v20 = result;
        do
        {
          result = glpLLVMPrimitiveConstant(a1, a2, a3, a4, ColumnType, a6, a7);
          a4 = (a4 + 1);
          a2 += 16;
          --v20;
        }
        while (v20);
      }
    }
  }
  else
  {
    if (glpPrimitiveTypeGetCategory(a6) == 2)
      Length = glpPrimitiveVectorGetLength(a6);
    else
      Length = 1;
    if (glpPrimitiveTypeGetCategory(a5) == 2)
      v21 = glpPrimitiveVectorGetLength(a5);
    else
      v21 = 1;
    if (Length == 1)
    {
      result = glpGetPConst(v14, a6);
      *(_QWORD *)(a3 + 8 * a4) = result;
    }
    else
    {
      ElementType = glpPrimitiveVectorGetElementType(a6);
      v23 = LLVMGetElementType();
      v31[0] = v31;
      MEMORY[0x24BDAC7A8](v23);
      v26 = (char *)v31 - v25;
      if (v24 >= 0x200)
        v27 = 512;
      else
        v27 = v24;
      bzero((char *)v31 - v25, v27);
      if (v21)
      {
        for (i = 0; i != v21; *(_QWORD *)&v26[8 * i++] = glpGetPConst(v23, ElementType))
          ;
      }
      v29 = Length - v21;
      if (Length > v21)
      {
        v30 = &v26[8 * v21];
        do
        {
          *(_QWORD *)v30 = MEMORY[0x22E316E2C](v23);
          v30 += 8;
          --v29;
        }
        while (v29);
      }
      result = LLVMConstVector();
      *(_QWORD *)(a3 + 8 * a4) = result;
    }
  }
  return result;
}

uint64_t glpLLVMGetMinCommonType(unsigned int *a1, int *a2, _DWORD *a3)
{
  uint64_t PrimitiveType;
  int v7;
  int ElementCount;
  int v9;
  unsigned int v10;
  uint64_t v11;
  char ElementFlags;
  uint64_t v13;
  int ElementType;
  int Length;
  uint64_t ColumnType;
  int ScalarType;
  uint64_t v19;

  while (2)
  {
    switch(glpTypeGetKind(a1))
    {
      case 0u:
        PrimitiveType = glpPrimitiveTypeGetPrimitiveType((uint64_t)a1);
        switch(glpPrimitiveTypeGetCategory(PrimitiveType))
        {
          case 1u:
            if ((_DWORD)PrimitiveType == 62)
            {
              v7 = 2;
              goto LABEL_30;
            }
            *a2 = 1;
            return PrimitiveType;
          case 2u:
            ElementType = glpPrimitiveVectorGetElementType(PrimitiveType);
            Length = glpPrimitiveVectorGetLength(PrimitiveType);
            if (ElementType == 62)
              goto LABEL_28;
            *a2 = Length;
            return glpPrimitiveVectorGetElementType(PrimitiveType);
          case 3u:
            ColumnType = glpPrimitiveMatrixGetColumnType(PrimitiveType);
            ScalarType = glpPrimitiveTypeGetScalarType(PrimitiveType);
            Length = glpPrimitiveVectorGetLength(ColumnType);
            if (ScalarType != 62)
            {
              *a2 = Length;
              return glpPrimitiveVectorGetElementType(ColumnType);
            }
LABEL_28:
            v7 = 2 * Length;
            if ((2 * Length) >= 4)
              v7 = 4;
LABEL_30:
            *a2 = v7;
LABEL_32:
            PrimitiveType = 5;
            break;
          case 4u:
            *a2 = 1;
            *a3 = 3;
            goto LABEL_32;
          default:
            goto LABEL_24;
        }
        return PrimitiveType;
      case 1u:
        ElementCount = glpAggregateTypeGetElementCount((uint64_t)a1);
        if (!ElementCount)
          goto LABEL_24;
        v9 = ElementCount;
        v10 = 0;
        LODWORD(PrimitiveType) = 0;
        do
        {
          v11 = glpAggregateTypeGetElementType((uint64_t)a1, v10);
          ElementFlags = glpAggregateTypeGetElementFlags((uint64_t)a1, v10);
          v19 = 0;
          LODWORD(v19) = glpPrecisionIndexFromSAFlags(ElementFlags);
          v13 = glpLLVMGetMinCommonType(v11, (char *)&v19 + 4, &v19);
          if (v10)
          {
            if ((_DWORD)PrimitiveType == (_DWORD)v13)
              PrimitiveType = PrimitiveType;
            else
              PrimitiveType = 5;
            if (!(_DWORD)v19 || (_DWORD)v19 == 3 || (_DWORD)v19 == 2 && *a3 == 1)
              *a3 = v19;
            if (HIDWORD(v19) > *a2)
              *a2 = HIDWORD(v19);
          }
          else
          {
            *a2 = HIDWORD(v19);
            *a3 = v19;
            PrimitiveType = v13;
          }
          ++v10;
        }
        while (v9 != v10);
        break;
      case 2u:
        do
          a1 = (unsigned int *)glpArrayTypeGetElementType((uint64_t)a1);
        while (glpTypeGetKind(a1) == 2);
        continue;
      case 3u:
        a1 = (unsigned int *)glpBankTypeGetElementType((uint64_t)a1);
        continue;
      default:
LABEL_24:
        PrimitiveType = 0;
        break;
    }
    return PrimitiveType;
  }
}

uint64_t glpLLVMCreateConstantVectors(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  int Kind;
  uint64_t PrimitiveType;
  uint64_t result;
  int ElementCount;
  uint64_t ElementType;
  unsigned int v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int Size;
  uint64_t v29;
  unsigned int v30;

  v9 = (uint64_t)a5;
  Kind = glpTypeGetKind(a5);
  if (Kind == 2)
  {
    ElementCount = glpArrayTypeGetElementCount(v9);
    ElementType = glpArrayTypeGetElementType(v9);
    v19 = glpABIGetTypeSize(0, ElementType, 0);
    result = glpTypeSizeGetSize(v19);
    if (ElementCount)
    {
      v20 = result;
      v21 = 16 * result;
      do
      {
        result = glpLLVMCreateConstantVectors(a1, a2, a3, a4, ElementType, a6, a7);
        a3 = (a3 + v20);
        a4 += v21;
        --ElementCount;
      }
      while (ElementCount);
    }
  }
  else if (Kind == 1)
  {
    result = glpAggregateTypeGetElementCount(v9);
    if ((_DWORD)result)
    {
      v22 = 0;
      v30 = result;
      do
      {
        v23 = a6;
        v24 = a7;
        v25 = glpAggregateTypeGetElementType(v9, v22);
        v26 = glpABIGetTypeSize(0, v25, 0);
        v27 = v9;
        Size = glpTypeSizeGetSize(v26);
        v29 = v25;
        a7 = v24;
        a6 = v23;
        glpLLVMCreateConstantVectors(a1, a2, a3, a4, v29, v23, a7);
        result = v30;
        a4 += 16 * Size;
        a3 = Size + a3;
        v9 = v27;
        ++v22;
      }
      while (v30 != v22);
    }
  }
  else
  {
    if (Kind)
      abort();
    PrimitiveType = glpPrimitiveTypeGetPrimitiveType(v9);
    return glpLLVMPrimitiveConstant(a1, a4, a2, a3, PrimitiveType, a6, a7);
  }
  return result;
}

uint64_t glpGetComponentCount(uint64_t a1)
{
  if (glpPrimitiveTypeGetCategory(a1) == 2)
    return glpPrimitiveVectorGetLength(a1);
  else
    return 1;
}

uint64_t glpGetPConst(uint64_t a1, int a2)
{
  if (a2 <= 8)
  {
    if (a2 == 1)
      return llvm::ConstantFP::get();
    if (a2 != 5)
      return 0;
    return LLVMConstInt();
  }
  if (a2 == 9 || a2 == 36)
    return LLVMConstInt();
  if (a2 == 62)
    return llvm::ConstantFP::get();
  return 0;
}

uint64_t glpBuildAlloca()
{
  uint64_t v0;

  LLVMGetInsertBlock();
  LLVMPositionBuilderAtEnd();
  v0 = LLVMBuildAlloca();
  LLVMPositionBuilderAtEnd();
  return v0;
}

uint64_t glpLLVMCGSamplerNode(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unint64_t VariableExtra;
  uint64_t Offset;
  uint64_t OffsetExpr;
  uint64_t v9;
  unsigned int *Value;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  _DWORD *i;
  _QWORD *v22;
  uint64_t v23;
  uint64_t SaType;
  int PrimitiveType;
  uint64_t v26;
  unsigned int v27;
  int v28;
  int *v29;
  int v30;
  _QWORD v32[3];

  v32[2] = *MEMORY[0x24BDAC8D0];
  VariableExtra = glpLValueNodeGetVariableExtra(a2);
  Offset = glpDerefNodeGetOffset(a2);
  if (Offset)
    OffsetExpr = glpOffsetNodeGetOffsetExpr(Offset);
  else
    OffsetExpr = 0;
  if ((*(_BYTE *)(VariableExtra + 52) & 1) == 0)
  {
    glpLLVMGetVariablePointer(a1, VariableExtra);
    v9 = *(_QWORD *)(a1 + 40);
    LLVMTypeOf();
    if (LLVMGetElementType() != v9)
    {
      MEMORY[0x22E316EC8](v9, 0);
      if (OffsetExpr)
      {
        Value = (unsigned int *)glpConstantNodeGetValue(OffsetExpr);
        v11 = *(_QWORD *)(a1 + 520);
        if (!v11)
        {
          v11 = LLVMConstInt();
          *(_QWORD *)(a1 + 520) = v11;
        }
        v32[0] = v11;
        v12 = *Value;
        if (v12 > 7)
        {
          v14 = LLVMConstInt();
        }
        else
        {
          v13 = a1 + 8 * v12;
          v14 = *(_QWORD *)(v13 + 520);
          if (!v14)
          {
            v15 = (uint64_t *)(v13 + 520);
            v14 = LLVMConstInt();
            *v15 = v14;
          }
        }
        v32[1] = v14;
        LLVMBuildGEP();
      }
      LLVMBuildPointerCast();
    }
    LLVMBuildLoad();
    v23 = *(unsigned int *)(a1 + 596);
    SaType = glpASTNodeGetSaType(a2);
    PrimitiveType = glpPrimitiveTypeGetPrimitiveType(SaType);
    if ((int)v23 < 1)
      goto LABEL_33;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = (int *)(*(_QWORD *)(a1 + 600) + 36);
    do
    {
      v30 = *v29;
      v29 += 12;
      if (v30 == PrimitiveType)
      {
        ++v28;
        v27 = v26;
      }
      ++v26;
    }
    while (v23 != v26);
    if (v28 != 1)
    {
LABEL_33:
      v32[0] = 0;
      glpLLVMGetTextureTypeFromSampler(a1, v32, PrimitiveType);
    }
    v22 = (_QWORD *)(*(_QWORD *)(a1 + 600) + 48 * v27);
LABEL_32:
    *a3 = v22[1];
    return *v22;
  }
  v16 = *(_QWORD *)(*(_QWORD *)(VariableExtra + 144) + 8);
  v17 = *(unsigned int *)(v16 + 4);
  if (OffsetExpr)
  {
    if (!glpIsConstantNode(OffsetExpr))
      return 0;
    v18 = *(_DWORD *)(VariableExtra + 156);
    v19 = *(_DWORD *)glpConstantNodeGetValue(OffsetExpr) + v18;
  }
  else
  {
    v19 = *(_DWORD *)(VariableExtra + 156);
  }
  if ((int)v17 >= 1)
  {
    for (i = (_DWORD *)(*(_QWORD *)(v16 + 8) + 8); v19 != *i; i += 4)
    {
      if (!--v17)
        return 0;
    }
    v22 = (_QWORD *)(*(_QWORD *)(a1 + 600) + 48 * *(i - 1));
    goto LABEL_32;
  }
  return 0;
}

uint64_t glpMatchInputSize(uint64_t result, uint64_t a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t v6;
  unsigned int Length;
  uint64_t v8;
  _DWORD v9[2];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v3 = *a3;
  if ((_DWORD)v3 != a3[1])
  {
    v6 = result;
    if (glpPrimitiveTypeGetCategory(*a3) == 2)
      Length = glpPrimitiveVectorGetLength(v3);
    else
      Length = 1;
    v9[0] = Length;
    v8 = a3[1];
    if (glpPrimitiveTypeGetCategory(v8) == 2)
      result = glpPrimitiveVectorGetLength(v8);
    else
      result = 1;
    v9[1] = result;
    if (Length != (_DWORD)result)
    {
      result = glpLLVMSplatScalar(v6, *(_QWORD *)(a2 + 8 * (Length > 1)), v9[Length < 2]);
      *(_QWORD *)(a2 + 8 * (Length > 1)) = result;
    }
  }
  return result;
}

uint64_t glpLLVMBuildBuiltinNoPrefix(uint64_t a1, const char *a2, unsigned int a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  const char *v12;
  const char *v14;
  char v15[512];
  _QWORD v16[2];

  v16[1] = *MEMORY[0x24BDAC8D0];
  v12 = glpLLVMGetTypeString(&v14, a6, a7);
  snprintf_l(v15, 0x200uLL, 0, "%s.%s", a2, v12);
  v16[0] = 0x300000001;
  return glpLLVMCallFunctionInner(a1, (uint64_t)v15, a5, a4, a3, (int *)v16, 2u, (uint64_t)"");
}

uint64_t glpBuildConstantIntVector(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  int Length;
  uint64_t ScalarType;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  size_t v13;
  uint64_t v14;
  _QWORD v16[2];

  v16[1] = *MEMORY[0x24BDAC8D0];
  if (glpPrimitiveTypeGetCategory(a2) == 2)
    Length = glpPrimitiveVectorGetLength(a2);
  else
    Length = 1;
  ScalarType = glpPrimitiveTypeGetScalarType(a2);
  glpPrimitiveTypeToLLVMType(a1, ScalarType, a3);
  v8 = LLVMConstInt();
  v9 = v8;
  if (Length >= 2)
  {
    v10 = 8 * Length;
    MEMORY[0x24BDAC7A8](v8);
    v12 = (char *)v16 - v11;
    if (v10 >= 0x200)
      v13 = 512;
    else
      v13 = 8 * Length;
    bzero(v12, v13);
    v14 = 0;
    do
    {
      *(_QWORD *)&v12[v14] = v9;
      v14 += 8;
    }
    while (v10 != v14);
    return LLVMConstVector();
  }
  return v9;
}

uint64_t glpLLVMCastToHalf(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  const char *v6;
  const char *v7;
  uint64_t v8;
  const char *v10;
  uint64_t v11;
  char v12[512];
  _QWORD v13[2];

  v13[1] = *MEMORY[0x24BDAC8D0];
  v11 = a2;
  if (a4 == 3 || !a4)
  {
    v6 = glpLLVMGetTypeString(&v10, a3, a4);
    v7 = "v2f16";
    if (glpPrimitiveTypeGetCategory(a3) == 2 && glpPrimitiveVectorGetLength(a3) == 4)
      v7 = "v4f16";
    snprintf_l(v12, 0x200uLL, 0, "air.convert.f.%s.f.%s", v7, v6);
    v8 = LLVMHalfTypeInContext();
    v13[0] = 0x300000001;
    return glpLLVMCallFunctionInner(a1, (uint64_t)v12, v8, (uint64_t)&v11, 1u, (int *)v13, 2u, (uint64_t)"");
  }
  return a2;
}

uint64_t glpMatchInputSize3(uint64_t result, uint64_t a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t Length;
  uint64_t v8;

  v3 = *a3;
  if ((_DWORD)v3 != a3[1])
  {
    v6 = result;
    if (glpPrimitiveTypeGetCategory(*a3) == 2)
      Length = glpPrimitiveVectorGetLength(v3);
    else
      Length = 1;
    v8 = a3[1];
    if (glpPrimitiveTypeGetCategory(v8) == 2)
      result = glpPrimitiveVectorGetLength(v8);
    else
      result = 1;
    if ((_DWORD)Length != (_DWORD)result)
    {
      *(_QWORD *)(a2 + 8) = glpLLVMSplatScalar(v6, *(_QWORD *)(a2 + 8), Length);
      result = glpLLVMSplatScalar(v6, *(_QWORD *)(a2 + 16), Length);
      *(_QWORD *)(a2 + 16) = result;
    }
  }
  return result;
}

uint64_t glpLLVMBuildBuiltinWithPrefix(uint64_t a1, const char *a2, unsigned int a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  const char *v12;
  const char *v14;
  char v15[512];
  _QWORD v16[2];

  v16[1] = *MEMORY[0x24BDAC8D0];
  v14 = 0;
  v12 = glpLLVMGetTypeString(&v14, a6, a7);
  snprintf_l(v15, 0x200uLL, 0, "%s%s.%s", a2, v14, v12);
  v16[0] = 0x300000001;
  return glpLLVMCallFunctionInner(a1, (uint64_t)v15, a5, a4, a3, (int *)v16, 2u, (uint64_t)"");
}

uint64_t glpLLVMBuildLength(uint64_t a1, uint64_t *a2, int *a3, int a4, uint64_t a5)
{
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int Length;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int ScalarType;
  BOOL v22;
  const char *v23;
  const char *v24;
  uint64_t v26;
  const char *v27;
  char v28[512];
  _QWORD v29[3];

  v29[1] = *MEMORY[0x24BDAC8D0];
  if (glpPrimitiveTypeGetCategory(*a3) == 1)
  {
    v10 = glpLLVMGetTypeString(&v27, *a3, a4);
    snprintf_l(v28, 0x200uLL, 0, "%s.%s", "air.fabs", v10);
    v29[0] = 0x300000001;
    v11 = a1;
    v12 = a5;
    v13 = a2;
  }
  else
  {
    v14 = *a3;
    if (glpPrimitiveTypeGetCategory(*a3) == 1)
    {
      v15 = LLVMBuildFMul();
    }
    else
    {
      Length = glpPrimitiveVectorGetLength(v14);
      if (Length < 1)
      {
        v15 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        v19 = Length;
        v20 = a1 + 520;
        do
        {
          if (v17 > 7)
          {
            LLVMConstInt();
          }
          else if (!*(_QWORD *)(v20 + 8 * v17))
          {
            *(_QWORD *)(v20 + 8 * v17) = LLVMConstInt();
          }
          LLVMBuildExtractElement();
          v15 = LLVMBuildFMul();
          if (v18)
            v15 = LLVMBuildFAdd();
          ++v17;
          v18 = v15;
        }
        while (v19 != v17);
      }
    }
    v26 = v15;
    ScalarType = glpPrimitiveTypeGetScalarType(*a3);
    if (a4)
      v22 = a4 == 3;
    else
      v22 = 1;
    if (v22)
      v23 = "air.fast_sqrt";
    else
      v23 = "air.sqrt";
    v24 = glpLLVMGetTypeString(&v27, ScalarType, a4);
    snprintf_l(v28, 0x200uLL, 0, "%s.%s", v23, v24);
    v29[0] = 0x300000001;
    v13 = &v26;
    v11 = a1;
    v12 = a5;
  }
  return glpLLVMCallFunctionInner(v11, (uint64_t)v28, v12, (uint64_t)v13, 1u, (int *)v29, 2u, (uint64_t)"");
}

uint64_t glpLLVMBuildNormalize(uint64_t a1, uint64_t *a2, int *a3, int a4)
{
  uint64_t v8;
  uint64_t Length;
  uint64_t v11;
  uint64_t v12;

  if (glpPrimitiveTypeGetCategory(*a3) == 1)
  {
    v8 = LLVMTypeOf();
    MEMORY[0x22E316D18](v8);
    LLVMBuildFCmp();
    llvm::ConstantFP::get();
    llvm::ConstantFP::get();
    return LLVMBuildSelect();
  }
  else
  {
    Length = glpPrimitiveVectorGetLength(*a3);
    v11 = LLVMGetElementType();
    v12 = glpLLVMBuildLength(a1, a2, a3, a4, v11);
    glpLLVMSplatElement(a1, v12, Length);
    return LLVMBuildFDiv();
  }
}

uint64_t glpLLVMBuildConvert(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t Length;
  uint64_t v6;

  if (glpPrimitiveTypeGetCategory(*a3) == 1)
  {
    LLVMTypeOf();
    llvm::ConstantFP::get();
  }
  else
  {
    Length = glpPrimitiveVectorGetLength(*a3);
    LLVMTypeOf();
    LLVMGetElementType();
    v6 = llvm::ConstantFP::get();
    glpLLVMSplatElement(a1, v6, Length);
  }
  return LLVMBuildFMul();
}

uint64_t glpLLVMBuildCross(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  _QWORD v7[3];
  _QWORD v8[4];

  v1 = 0;
  v8[3] = *MEMORY[0x24BDAC8D0];
  memset(v8, 0, 24);
  memset(v7, 0, sizeof(v7));
  v2 = a1 + 520;
  do
  {
    if (!*(_QWORD *)(v2 + 8 * v1))
      *(_QWORD *)(v2 + 8 * v1) = LLVMConstInt();
    v8[v1] = LLVMBuildExtractElement();
    v7[v1++] = LLVMBuildExtractElement();
  }
  while (v1 != 3);
  v3 = LLVMTypeOf();
  MEMORY[0x22E316E2C](v3);
  v4 = 0;
  v5 = 0xFFFFFFFF00000000;
  do
  {
    LLVMBuildFMul();
    LLVMBuildFMul();
    LLVMBuildFSub();
    LLVMConstInt();
    result = LLVMBuildInsertElement();
    v5 += 0x100000000;
    ++v4;
  }
  while (v4 != 3);
  return result;
}

uint64_t glpLLVMBuildReflect(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8;
  uint64_t Length;
  uint64_t v10;
  int v11;
  const char *v12;
  uint64_t v13;
  const char *v15;
  char v16[512];
  _QWORD v17[2];

  v17[1] = *MEMORY[0x24BDAC8D0];
  v8 = *(unsigned int *)(a3 + 4);
  if (glpPrimitiveTypeGetCategory(*(_DWORD *)(a3 + 4)) == 2)
  {
    Length = glpPrimitiveVectorGetLength(v8);
    v10 = LLVMTypeOf();
    if ((int)Length < 2)
    {
      v11 = 0;
    }
    else
    {
      v10 = LLVMGetElementType();
      v11 = 1;
    }
  }
  else
  {
    v10 = LLVMTypeOf();
    v11 = 0;
    Length = 1;
  }
  v12 = glpLLVMGetTypeString(&v15, *(_DWORD *)a3, a4);
  snprintf_l(v16, 0x200uLL, 0, "%s.%s", "air.dot", v12);
  v17[0] = 0x300000001;
  glpLLVMCallFunctionInner(a1, (uint64_t)v16, v10, a2, 2u, (int *)v17, 2u, (uint64_t)"");
  llvm::ConstantFP::get();
  v13 = LLVMBuildFMul();
  if (v11)
    glpLLVMSplatElement(a1, v13, Length);
  LLVMBuildFMul();
  return LLVMBuildFSub();
}

uint64_t glpLLVMBuildFaceForward(uint64_t a1, uint64_t a2, unsigned int *a3, int a4)
{
  uint64_t v8;
  uint64_t Length;
  uint64_t v10;
  int v11;
  const char *v12;
  uint64_t v13;
  const char *v15;
  char v16[512];
  _QWORD v17[2];

  v17[1] = *MEMORY[0x24BDAC8D0];
  v8 = *a3;
  if (glpPrimitiveTypeGetCategory(*a3) == 2)
  {
    Length = glpPrimitiveVectorGetLength(v8);
    v10 = LLVMTypeOf();
    if ((int)Length < 2)
    {
      v11 = 0;
    }
    else
    {
      v10 = LLVMGetElementType();
      v11 = 1;
    }
  }
  else
  {
    v10 = LLVMTypeOf();
    v11 = 0;
    Length = 1;
  }
  v12 = glpLLVMGetTypeString(&v15, *a3, a4);
  snprintf_l(v16, 0x200uLL, 0, "%s.%s", "air.dot", v12);
  v17[0] = 0x300000001;
  glpLLVMCallFunctionInner(a1, (uint64_t)v16, v10, a2 + 8, 2u, (int *)v17, 2u, (uint64_t)"");
  MEMORY[0x22E316D18](v10);
  LLVMBuildFCmp();
  v13 = llvm::ConstantFP::get();
  if (v11)
    glpLLVMSplatElement(a1, v13, Length);
  LLVMBuildFMul();
  return LLVMBuildSelect();
}

uint64_t glpLLVMBuildMix(uint64_t a1, uint64_t *a2, unsigned int *a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t Length;
  int Category;
  const char *v16;
  const char *v17;
  _QWORD v18[3];
  char v19[512];
  _QWORD v20[2];

  v20[1] = *MEMORY[0x24BDAC8D0];
  v10 = *a2;
  v9 = a2[1];
  v11 = a2[2];
  v12 = a3[2];
  if (glpPrimitiveTypeGetCategory(a3[2]) == 2)
    Length = glpPrimitiveVectorGetLength(v12);
  else
    Length = 1;
  Category = glpPrimitiveTypeGetCategory(*a3);
  if (glpPrimitiveTypeGetScalarType(*a3) == 9)
  {
    if (Category == 1)
      glpLLVMSplatElement(a1, v10, Length);
    return LLVMBuildSelect();
  }
  else
  {
    if ((int)Length >= 2 && Category == 1)
      v10 = glpLLVMSplatElement(a1, v10, Length);
    v18[0] = v11;
    v18[1] = v9;
    v18[2] = v10;
    v16 = glpLLVMGetTypeString(&v17, a3[2], a5);
    snprintf_l(v19, 0x200uLL, 0, "%s.%s", "air.mix", v16);
    v20[0] = 0x300000001;
    return glpLLVMCallFunctionInner(a1, (uint64_t)v19, a4, (uint64_t)v18, 3u, (int *)v20, 2u, (uint64_t)"");
  }
}

uint64_t glpLLVMBuildSmoothStep(uint64_t a1, uint64_t *a2, unsigned int *a3, int a4, uint64_t a5)
{
  uint64_t Length;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v17;
  _QWORD v18[3];
  char v19[512];
  _QWORD v20[3];

  v20[1] = *MEMORY[0x24BDAC8D0];
  LLVMTypeOf();
  if (glpPrimitiveTypeGetCategory(a3[2]) == 2)
  {
    Length = glpPrimitiveVectorGetLength(a3[2]);
    LLVMGetElementType();
    if (glpPrimitiveTypeGetCategory(*a3) != 2)
    {
      *a2 = glpLLVMSplatElement(a1, *a2, Length);
      a2[1] = glpLLVMSplatElement(a1, a2[1], Length);
    }
  }
  else
  {
    LODWORD(Length) = 1;
  }
  LLVMBuildFSub();
  LLVMBuildFSub();
  v10 = llvm::ConstantFP::get();
  v11 = llvm::ConstantFP::get();
  if ((int)Length >= 2)
  {
    v10 = glpLLVMSplatConstantVector(v10, Length);
    v11 = glpLLVMSplatConstantVector(v11, Length);
  }
  v18[0] = LLVMBuildFDiv();
  v18[1] = v10;
  v18[2] = v11;
  v12 = glpLLVMGetTypeString(&v17, a3[2], a4);
  snprintf_l(v19, 0x200uLL, 0, "%s.%s", "air.clamp", v12);
  v20[0] = 0x300000001;
  glpLLVMCallFunctionInner(a1, (uint64_t)v19, a5, (uint64_t)v18, 3u, (int *)v20, 2u, (uint64_t)"");
  LLVMBuildFMul();
  v13 = llvm::ConstantFP::get();
  v14 = llvm::ConstantFP::get();
  if ((int)Length >= 2)
  {
    glpLLVMSplatConstantVector(v13, Length);
    glpLLVMSplatConstantVector(v14, Length);
  }
  LLVMBuildFMul();
  LLVMBuildFSub();
  return LLVMBuildFMul();
}

uint64_t glpBuildTextureOperation(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int *a4, int *a5, int a6)
{
  int Opcode;
  uint64_t ReturnPrimitiveType;
  char SaFlags;
  unsigned int v14;
  uint64_t v15;
  int v16;
  int ChildCount;
  uint64_t Child;
  uint64_t SaType;
  uint64_t PPTextarget;
  _BOOL4 v21;
  _BOOL4 v22;
  BOOL v23;
  int v26;
  uint64_t v27;
  int Length;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  _BOOL4 v35;
  int HasOffset;
  _BOOL4 v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t Category;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  size_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int ScalarType;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  unsigned int v67;
  unsigned int v68;
  const char *v69;
  const char *v70;
  char *v71;
  const char *v72;
  char v73;
  unsigned int v74;
  char v75;
  int v76;
  int v77;
  const char *v78;
  const char *v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int *v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  int v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t inserted;
  int v118;
  unsigned int v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _BOOL4 v128;
  BOOL v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  unsigned int v137;
  BOOL v138;
  char v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t Value;
  uint64_t v143;
  uint64_t v144;
  char v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t Element;
  uint64_t v151;
  uint64_t v152;
  _BOOL4 v153;
  unsigned int PrimitiveType;
  int v155;
  uint64_t v156;
  _BOOL4 v157;
  int v158;
  int v159;
  int v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  _BOOL4 v164;
  uint64_t v165;
  unsigned int v166;
  unsigned int v167;
  int v168;
  int v169;
  uint64_t TextureSize;
  int *v171;
  unsigned int *v172;
  unsigned int v173;
  uint64_t v174;
  uint64_t *v175;
  uint64_t v176;
  unsigned int v177;
  const char *v178;
  uint64_t v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  uint64_t v185;
  _QWORD v186[64];
  uint64_t v187;
  uint64_t v188;
  _QWORD v189[3];

  v171 = a5;
  v189[1] = *MEMORY[0x24BDAC8D0];
  Opcode = glpPPStreamOpNodeGetOpcode(a2);
  ReturnPrimitiveType = glpPPStreamOpNodeGetReturnPrimitiveType(a2);
  SaFlags = glpASTNodeGetSaFlags(a2);
  v14 = glpPrecisionIndexFromSAFlags(SaFlags);
  v185 = 0;
  v184 = 0u;
  v182 = 0u;
  v183 = 0u;
  v180 = 0u;
  v181 = 0u;
  v15 = a3[a6 - 2];
  if (Opcode == 130)
  {
    v16 = 1;
  }
  else
  {
    *(_QWORD *)&v180 = a3[a6 - 1];
    v16 = 2;
  }
  v173 = v16;
  v179 = v15;
  v162 = *a3;
  ChildCount = glpASTNodeGetChildCount(a2);
  Child = glpASTNodeGetChild(a2, ChildCount - 1);
  SaType = glpASTNodeGetSaType(Child);
  PrimitiveType = glpPrimitiveTypeGetPrimitiveType(SaType);
  PPTextarget = glpPrimitiveSamplerGetPPTextarget(PrimitiveType);
  if (PPTextarget > 0x10 || (v21 = 1, ((1 << PPTextarget) & 0x10101) == 0))
    v21 = PPTextarget == 17;
  v166 = v14;
  v22 = (PPTextarget - 5) < 8 && ((0xCFu >> (PPTextarget - 5)) & 1) != 0 || PPTextarget == 17;
  v174 = PPTextarget;
  v177 = v22;
  v23 = Opcode == 99 || (Opcode & 0xFFFFFFFB) == 67;
  v26 = (v23 || Opcode == 69) && !v21;
  v168 = v26;
  v172 = a4;
  v27 = *a4;
  if (glpPrimitiveTypeGetCategory(v27) == 2)
    Length = glpPrimitiveVectorGetLength(v27);
  else
    Length = 1;
  v29 = (Length - 1);
  v169 = Opcode;
  if (v168)
  {
    if (v29 > 7)
    {
      LLVMConstInt();
    }
    else
    {
      v30 = a1 + 8 * v29;
      if (!*(_QWORD *)(v30 + 520))
      {
        *(_QWORD *)(v30 + 520) = LLVMConstInt();
        Opcode = v169;
      }
    }
    Element = LLVMBuildExtractElement();
    v29 = (Length - 2);
  }
  else
  {
    Element = 0;
  }
  v31 = v172;
  v156 = v29;
  v32 = v174;
  if (v22)
  {
    v33 = *(_QWORD *)(a1 + 528);
    if (!v33)
    {
      v33 = LLVMConstInt();
      *(_QWORD *)(a1 + 528) = v33;
    }
    v34 = v173;
    *(&v179 + v173) = v33;
    v173 = v34 + 1;
  }
  v164 = v32 > 0x11;
  TextureSize = glpGetTextureSize(v32, (int *)&v177);
  if (v32 > 0x10 || (v35 = 1, ((1 << v32) & 0x10101) == 0))
    v35 = v32 == 17;
  LODWORD(v161) = !v35;
  v155 = *(unsigned __int16 *)(a1 + 832);
  HasOffset = glpPPStreamOpNodeGetHasOffset(a2);
  v37 = 0;
  HIDWORD(v165) = 1;
  v163 = HasOffset;
  if (Opcode > 97)
  {
    if (Opcode > 164)
    {
      if (Opcode != 165)
      {
        v159 = 1;
        v160 = 0;
        HIDWORD(v161) = 0;
        LODWORD(v165) = 0;
        if (Opcode != 166)
          goto LABEL_65;
        v161 = 0;
        v165 = v177;
        v37 = v177 == 0;
        goto LABEL_63;
      }
      v41 = a6 - 3;
      if (!v163)
        v41 = 0;
      HIDWORD(v161) = v41;
      LODWORD(v165) = v177;
      v37 = v177 == 0;
    }
    else
    {
      if ((Opcode - 98) < 2)
      {
        v37 = 0;
        v39 = a6 - 3;
        if (!HasOffset)
          v39 = 0;
        HIDWORD(v161) = v39;
        v165 = 0x100000000;
        v159 = 0;
        v160 = 1;
        goto LABEL_65;
      }
      v159 = 1;
      v160 = 0;
      HIDWORD(v161) = 0;
      LODWORD(v165) = 0;
      if (Opcode != 130)
        goto LABEL_65;
      v37 = 0;
      LODWORD(v165) = 0;
      v40 = a6 - 3;
      if (!HasOffset)
        v40 = 0;
      LODWORD(v161) = 0;
      HIDWORD(v161) = v40;
    }
    HIDWORD(v165) = 1;
LABEL_63:
    v160 = 1;
    goto LABEL_64;
  }
  if ((Opcode - 66) < 2)
  {
    v37 = 0;
    v160 = 0;
    LODWORD(v165) = 0;
    v38 = HasOffset != 0;
    goto LABEL_54;
  }
  if ((Opcode - 68) < 2 || (Opcode - 70) < 2)
  {
    v37 = 0;
    v160 = 0;
    LODWORD(v165) = 0;
    v38 = 2 * (HasOffset != 0);
LABEL_54:
    HIDWORD(v161) = v38;
    HIDWORD(v165) = 1;
LABEL_64:
    v159 = 1;
    goto LABEL_65;
  }
  v159 = 1;
  v160 = 0;
  HIDWORD(v161) = 0;
  LODWORD(v165) = 0;
LABEL_65:
  v157 = v37;
  v158 = a6;
  v42 = *a3;
  if (v168)
  {
    v43 = *v31;
    v44 = *v171;
    v189[0] = *a3;
    v45 = glpLLVMGetTypeString(&v178, v43, 3);
    v46 = glpPrimitiveTypeToLLVMType((_QWORD *)a1, v43, 3);
    snprintf_l((char *)&v187, 0x200uLL, 0, "%s.%s", "air.projective_coordinates", v45);
    if (v44)
    {
      LOBYTE(v32) = v174;
      if (v44 != 3)
      {
        v47 = LLVMFloatTypeInContext();
        if (glpPrimitiveTypeGetCategory(v43) == 2)
          v48 = glpPrimitiveVectorGetLength(v43);
        else
          v48 = 1;
        v46 = MEMORY[0x22E316F4C](v47, v48);
        v189[0] = LLVMBuildFPExt();
      }
    }
    else
    {
      LOBYTE(v32) = v174;
    }
    v186[0] = 0x300000001;
    v42 = glpLLVMCallFunctionInner(a1, (uint64_t)&v187, v46, (uint64_t)v189, 1u, (int *)v186, 2u, (uint64_t)"");
    v31 = v172;
  }
  v49 = *v31;
  Category = glpPrimitiveTypeGetCategory(v49);
  v51 = TextureSize;
  v167 = ReturnPrimitiveType;
  if ((_DWORD)TextureSize == 1)
  {
    if ((_DWORD)Category == 2 && glpPrimitiveVectorGetLength(v49) >= 2)
    {
      if (!*(_QWORD *)(a1 + 520))
        *(_QWORD *)(a1 + 520) = LLVMConstInt();
      v42 = LLVMBuildExtractElement();
    }
  }
  else
  {
    if ((_DWORD)Category == 2)
      Category = glpPrimitiveVectorGetLength(v49);
    v52 = TextureSize;
    MEMORY[0x24BDAC7A8](Category);
    v54 = (char *)&Element - v53;
    bzero((char *)&Element - v53, v55);
    v56 = 0;
    v57 = a1 + 520;
    do
    {
      v58 = *(_QWORD *)(v57 + 8 * v56);
      if (!v58)
      {
        v58 = LLVMConstInt();
        *(_QWORD *)(v57 + 8 * v56) = v58;
      }
      *(_QWORD *)&v54[8 * v56++] = v58;
    }
    while (v52 != v56);
    v51 = TextureSize;
    LLVMConstVector();
    v59 = LLVMTypeOf();
    MEMORY[0x22E316E2C](v59);
    v42 = LLVMBuildShuffleVector();
    ReturnPrimitiveType = v167;
    Opcode = v169;
    LOBYTE(v32) = v174;
  }
  ScalarType = glpPrimitiveTypeGetScalarType(*v172);
  v61 = *v171;
  v175 = a3;
  if (!v61)
    goto LABEL_100;
  v23 = v61 == 3;
  v62 = v163;
  if (!v23)
  {
    if (ScalarType == 5)
    {
      if (v51 >= 2)
        MEMORY[0x22E316F4C](*(_QWORD *)(a1 + 40), v51);
      v63 = LLVMBuildSExt();
LABEL_99:
      v42 = v63;
LABEL_100:
      v62 = v163;
      goto LABEL_101;
    }
    if (ScalarType == 1)
    {
      if (v168)
      {
        v153 = v163 != 0;
LABEL_106:
        v66 = PrimitiveType;
        goto LABEL_111;
      }
      v64 = LLVMFloatTypeInContext();
      if (v51 >= 2)
        MEMORY[0x22E316F4C](v64, v51);
      v63 = LLVMBuildFPExt();
      goto LABEL_99;
    }
  }
LABEL_101:
  v153 = v62 != 0;
  if (Opcode != 130 || !v62)
    goto LABEL_106;
  v65 = v171[SHIDWORD(v161)];
  if (v65 && v65 != 3)
  {
    if (v51 >= 2)
      MEMORY[0x22E316F4C](*(_QWORD *)(a1 + 40), v51);
    v66 = PrimitiveType;
    LLVMBuildSExt();
  }
  else
  {
    v66 = PrimitiveType;
  }
  v42 = LLVMBuildAdd();
  v153 = 1;
LABEL_111:
  v67 = 0x61FFu >> v32;
  *(&v179 + v173) = v42;
  v68 = v177;
  if (!v177)
  {
    switch(Opcode)
    {
      case 130:
        v71 = glpTextureNameFromSamplerType(v66);
        v70 = "air.read_";
        goto LABEL_127;
      case 165:
        v70 = "air.gather_";
        break;
      case 166:
        v70 = "air.gather_offsets_";
        break;
      default:
        v70 = "air.sample_";
        goto LABEL_117;
    }
    v71 = glpTextureNameFromSamplerType(v66);
    v151 = 0;
    v152 = 0;
    v72 = "";
    goto LABEL_132;
  }
  v69 = "air.sample_compare_";
  if (Opcode == 166)
    v69 = "air.gather_compare_offsets_";
  if (Opcode == 165)
    v70 = "air.gather_compare_";
  else
    v70 = v69;
LABEL_117:
  v71 = glpTextureNameFromSamplerType(v66);
  v72 = "";
  v73 = Opcode - 70;
  if ((Opcode - 70) > 0x3C)
  {
    v151 = 0;
    v152 = 0;
    goto LABEL_132;
  }
  if (((1 << v73) & 0x1000000000000003) != 0)
  {
LABEL_127:
    v72 = "";
    v152 = 1;
    v151 = 1;
    goto LABEL_132;
  }
  v152 = 0;
  v151 = 0;
  if (((1 << v73) & 0x30000000) != 0)
    v72 = "_grad";
LABEL_132:
  v74 = v173 + 1;
  v75 = v164 | v67;
  v178 = 0;
  if (v68)
    v76 = 1;
  else
    v76 = ReturnPrimitiveType;
  if (glpPrimitiveTypeGetScalarType(ReturnPrimitiveType) == 1)
    v77 = v166;
  else
    v77 = 3;
  PrimitiveType = v77;
  v78 = glpLLVMGetTypeString(&v178, v76, v77);
  if (glpPrimitiveTypeGetScalarType(ReturnPrimitiveType) == 1)
  {
    v79 = "";
    v178 = "";
  }
  else
  {
    v79 = v178;
  }
  snprintf_l((char *)v186, 0x200uLL, 0, "%s%s%s%s.%s", v70, v71, v72, v79, v78);
  v80 = v174;
  v81 = TextureSize;
  if ((v75 & 1) == 0)
  {
    v82 = a1 + 8 * TextureSize;
    v83 = v172;
    if (!*(_QWORD *)(v82 + 520))
    {
      *(_QWORD *)(v82 + 520) = LLVMConstInt();
      v83 = v172;
    }
    v176 = 0;
    v176 = LLVMBuildExtractElement();
    if (glpPrimitiveTypeGetScalarType(*v83) == 1)
    {
      v84 = LLVMTypeOf();
      llvm::ConstantFP::get();
      v80 = v174;
      v176 = LLVMBuildFAdd();
      snprintf_l((char *)&v187, 0x200uLL, 0, "%s.%s", "air.floor", "f32");
      v189[0] = 0x300000001;
      v81 = TextureSize;
      v176 = glpLLVMCallFunctionInner(a1, (uint64_t)&v187, v84, (uint64_t)&v176, 1u, (int *)v189, 2u, (uint64_t)"");
      v85 = glpLLVMBuildConversion(a1, v176, *(_QWORD *)(a1 + 40), 1, 0, 36, 0);
    }
    else
    {
      v86 = glpPrimitiveTypeGetScalarType(*v83);
      v85 = v176;
      if (v86 == 5)
      {
        v87 = LLVMTypeOf();
        MEMORY[0x22E316D18](v87);
        LLVMBuildICmp();
        v85 = LLVMBuildSelect();
      }
    }
    *(&v179 + (v74 - 12 * ((357913942 * (unint64_t)v74) >> 32))) = v85;
    v74 = v173 + 2;
  }
  if (!v68)
  {
    v89 = v175;
    v88 = v169;
    goto LABEL_166;
  }
  v88 = v169;
  if (v80 == 17 || (_DWORD)v165)
  {
    v89 = v175;
    v91 = v175[1];
    v92 = v171[1];
    if (!v92 || v92 == 3)
      goto LABEL_165;
    v93 = v172[1];
    v94 = LLVMFloatTypeInContext();
    if (glpPrimitiveTypeGetCategory(v93) == 2)
    {
      v95 = glpPrimitiveVectorGetLength(v93);
      MEMORY[0x22E316F4C](v94, v95);
    }
    v81 = TextureSize;
    v96 = LLVMBuildFPCast();
  }
  else
  {
    v89 = v175;
    if (v156 > 7)
    {
      LLVMConstInt();
    }
    else
    {
      v90 = a1 + 8 * v156;
      if (!*(_QWORD *)(v90 + 520))
        *(_QWORD *)(v90 + 520) = LLVMConstInt();
    }
    v91 = LLVMBuildExtractElement();
    if (!v168)
      goto LABEL_165;
    v96 = LLVMBuildFDiv();
  }
  v91 = v96;
LABEL_165:
  *(&v179 + (v74 - 12 * ((357913942 * (unint64_t)v74) >> 32))) = v91;
  ++v74;
LABEL_166:
  if ((v159 & 1) == 0)
  {
    v97 = v89[1];
    v98 = v171[1];
    if (v98 && v98 != 3)
    {
      v99 = v172[1];
      v100 = LLVMFloatTypeInContext();
      if (glpPrimitiveTypeGetCategory(v99) == 2)
      {
        v101 = glpPrimitiveVectorGetLength(v99);
        MEMORY[0x22E316F4C](v100, v101);
      }
      v97 = LLVMBuildFPCast();
      v81 = TextureSize;
    }
    *(&v179 + (v74 - 12 * ((357913942 * (unint64_t)v74) >> 32))) = v97;
    v102 = v175[2];
    v103 = v171[2];
    if (v103 && v103 != 3)
    {
      v104 = v172[2];
      v105 = LLVMFloatTypeInContext();
      if (glpPrimitiveTypeGetCategory(v104) == 2)
      {
        v106 = glpPrimitiveVectorGetLength(v104);
        MEMORY[0x22E316F4C](v105, v106);
      }
      v81 = TextureSize;
      v102 = LLVMBuildFPCast();
    }
    *(&v179 + (v74 + 1 - 12 * ((357913942 * (unint64_t)(v74 + 1)) >> 32))) = v102;
    v107 = LLVMFloatTypeInContext();
    *(&v179 + (v74 + 2 - 12 * ((357913942 * (unint64_t)(v74 + 2)) >> 32))) = MEMORY[0x22E316D18](v107);
    v74 += 3;
    ReturnPrimitiveType = v167;
    v80 = v174;
    v89 = v175;
    v88 = v169;
  }
  if ((_DWORD)v161)
  {
    v108 = HIDWORD(v161);
    *(&v179 + (v74 - 12 * ((357913942 * (unint64_t)v74) >> 32))) = LLVMConstInt();
    if (v108 < 1)
    {
      v110 = *(_QWORD *)(a1 + 40);
      if (v81 >= 2)
        v110 = MEMORY[0x22E316F4C](v110, v81);
      v109 = MEMORY[0x22E316D18](v110);
    }
    else
    {
      v109 = v89[v108];
    }
    *(&v179 + (v74 + 1 - 12 * ((357913942 * (unint64_t)(v74 + 1)) >> 32))) = v109;
    v74 += 2;
  }
  if ((v165 & 0x100000000) == 0)
  {
    MEMORY[0x22E316F4C](*(_QWORD *)(a1 + 40), 2);
    v111 = LLVMArrayType();
    MEMORY[0x22E316E2C](v111);
    v112 = 0;
    v113 = 0;
    v114 = (uint64_t *)(a1 + 528);
    do
    {
      v188 = 0;
      v187 = 0;
      v115 = *(v114 - 1);
      if (!v115)
      {
        v115 = LLVMConstInt();
        *(v114 - 1) = v115;
      }
      v187 = v115;
      v116 = *v114;
      if (!*v114)
      {
        v116 = LLVMConstInt();
        *v114 = v116;
      }
      v188 = v116;
      LLVMConstVector();
      LLVMBuildShuffleVector();
      inserted = LLVMBuildInsertValue();
      ++v113;
      v112 += 2;
      v114 += 2;
    }
    while (v113 != 4);
    *(&v179 + (v74 - 12 * ((357913942 * (unint64_t)v74) >> 32))) = inserted;
    ++v74;
    ReturnPrimitiveType = v167;
    v80 = v174;
    v89 = v175;
    v88 = v169;
  }
  v118 = v158;
  if ((v160 & 1) == 0)
  {
    v119 = v164 | (0x1EFDBu >> v80);
    *(&v179 + (v74 - 12 * ((357913942 * (unint64_t)v74) >> 32))) = LLVMConstInt();
    if ((v152 | ((v88 & 0xFFFFFFFE) == 68) & v119) == 1)
    {
      v120 = v89[1];
      v121 = v171[1];
      if (!v121 || v121 == 3)
        goto LABEL_202;
      v122 = v172[1];
      v123 = LLVMFloatTypeInContext();
      if (glpPrimitiveTypeGetCategory(v122) == 2)
      {
        v124 = glpPrimitiveVectorGetLength(v122);
        MEMORY[0x22E316F4C](v123, v124);
      }
      v80 = v174;
      v125 = LLVMBuildFPCast();
    }
    else
    {
      v126 = LLVMFloatTypeInContext();
      v125 = MEMORY[0x22E316D18](v126);
    }
    v120 = v125;
LABEL_202:
    *(&v179 + (v74 + 1 - 12 * ((357913942 * (unint64_t)(v74 + 1)) >> 32))) = v120;
    v127 = LLVMFloatTypeInContext();
    *(&v179 + (v74 + 2 - 12 * ((357913942 * (unint64_t)(v74 + 2)) >> 32))) = MEMORY[0x22E316D18](v127);
    v74 += 3;
    ReturnPrimitiveType = v167;
    v88 = v169;
  }
  if (!v157)
    goto LABEL_220;
  if (v88 == 165)
  {
    v128 = v118 == 5 && v153;
    if (v163)
      v129 = 0;
    else
      v129 = v118 == 4;
    v130 = 1;
    if (v129 || v128)
      goto LABEL_216;
LABEL_217:
    v131 = *(_QWORD *)(a1 + 520);
    if (!v131)
    {
      v131 = LLVMConstInt();
      *(_QWORD *)(a1 + 520) = v131;
    }
    goto LABEL_219;
  }
  if (v118 != 6)
    goto LABEL_217;
  v130 = 3;
LABEL_216:
  v131 = v89[v130];
LABEL_219:
  *(&v179 + (v74 - 12 * ((357913942 * (unint64_t)v74) >> 32))) = v131;
  ++v74;
LABEL_220:
  if (v88 == 130)
  {
    if (v80 == 13 || v80 == 2)
    {
      v132 = *(_QWORD *)(a1 + 520);
      v134 = PrimitiveType;
      v133 = v155;
      if (!v132)
      {
        v132 = LLVMConstInt();
        *(_QWORD *)(a1 + 520) = v132;
      }
    }
    else
    {
      v132 = v89[1];
      v135 = v171[1];
      if (v135)
      {
        v134 = PrimitiveType;
        v133 = v155;
        if (v135 != 3)
          v132 = LLVMBuildSExt();
      }
      else
      {
        v134 = PrimitiveType;
        v133 = v155;
      }
    }
    *(&v179 + (v74 - 12 * ((357913942 * (unint64_t)v74) >> 32))) = v132;
    ++v74;
  }
  else
  {
    v134 = PrimitiveType;
    v133 = v155;
  }
  v136 = *(_QWORD *)(a1 + 520);
  if (!v136)
  {
    v136 = LLVMConstInt();
    *(_QWORD *)(a1 + 520) = v136;
  }
  *(&v179 + (v74 - 12 * ((357913942 * (unint64_t)v74) >> 32))) = v136;
  v137 = v74 + 1;
  if (v177)
    v138 = (_DWORD)v165 == 0;
  else
    v138 = 0;
  v139 = !v138;
  if (v138)
    v140 = 1;
  else
    v140 = ReturnPrimitiveType;
  v141 = glpPrimitiveTypeToLLVMType((_QWORD *)a1, v140, v134);
  if ((v133 & 1) != 0)
  {
    v187 = v141;
    v188 = LLVMInt8TypeInContext();
    v143 = LLVMStructTypeInContext();
    v187 = 0x400000001;
    glpLLVMCallFunctionInner(a1, (uint64_t)v186, v143, (uint64_t)&v179, v137, (int *)&v187, 2u, (uint64_t)"");
    Value = LLVMBuildExtractValue();
  }
  else
  {
    v187 = 0x400000001;
    Value = glpLLVMCallFunctionInner(a1, (uint64_t)v186, v141, (uint64_t)&v179, v137, (int *)&v187, 2u, (uint64_t)"");
  }
  v144 = Value;
  if ((_DWORD)ReturnPrimitiveType == 1)
    v145 = 1;
  else
    v145 = v139;
  if ((v145 & 1) != 0)
  {
    v146 = v166;
  }
  else
  {
    v147 = glpPrimitiveTypeToLLVMType((_QWORD *)a1, ReturnPrimitiveType, v134);
    MEMORY[0x22E316E2C](v147);
    v146 = v166;
    if (!*(_QWORD *)(a1 + 520))
      *(_QWORD *)(a1 + 520) = LLVMConstInt();
    v144 = LLVMBuildInsertElement();
  }
  if (!glpLLVMTypesEqual((_DWORD *)a1, ReturnPrimitiveType, v134, ReturnPrimitiveType, v146))
  {
    v148 = glpPrimitiveTypeToLLVMType((_QWORD *)a1, ReturnPrimitiveType, v146);
    return glpLLVMBuildConversion(a1, v144, v148, ReturnPrimitiveType, v134, ReturnPrimitiveType, v146);
  }
  return v144;
}

uint64_t glpBuildTextureSizeOperation(_QWORD *a1, uint64_t a2, uint64_t *a3, int a4)
{
  uint64_t ReturnPrimitiveType;
  char SaFlags;
  uint64_t v10;
  int ChildCount;
  uint64_t Child;
  uint64_t SaType;
  int PrimitiveType;
  unsigned int PPTextarget;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int TextureSize;
  unsigned int v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  _BOOL4 v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  size_t v32;
  unsigned int v33;
  uint64_t inserted;
  int v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD v44[2];
  int v45;
  int v46;
  char v47[512];
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[3];

  v50[1] = *MEMORY[0x24BDAC8D0];
  ReturnPrimitiveType = glpPPStreamOpNodeGetReturnPrimitiveType(a2);
  SaFlags = glpASTNodeGetSaFlags(a2);
  v10 = glpPrecisionIndexFromSAFlags(SaFlags);
  ChildCount = glpASTNodeGetChildCount(a2);
  Child = glpASTNodeGetChild(a2, ChildCount - 1);
  SaType = glpASTNodeGetSaType(Child);
  PrimitiveType = glpPrimitiveTypeGetPrimitiveType(SaType);
  PPTextarget = glpPrimitiveSamplerGetPPTextarget(PrimitiveType);
  v48 = 0;
  v49 = 0;
  if (a4 == 1)
  {
    v48 = *a3;
    v16 = a1[65];
    if (!v16)
    {
      v16 = LLVMConstInt();
      a1[65] = v16;
    }
  }
  else
  {
    v16 = *a3;
    v48 = a3[1];
  }
  v49 = v16;
  if (PPTextarget - 13 < 3)
    v17 = 1;
  else
    v17 = 2;
  v18 = glpPrimitiveTypeToLLVMType(a1, ReturnPrimitiveType, v10);
  TextureSize = glpGetTextureSize(PPTextarget, &v46);
  if (((1 << PPTextarget) & 0x30101) != 0)
    v20 = TextureSize - 1;
  else
    v20 = TextureSize;
  if (PPTextarget <= 0x11)
    v21 = v20;
  else
    v21 = TextureSize;
  v22 = glpTextureNameFromSamplerType(PrimitiveType);
  snprintf_l(v47, 0x200uLL, 0, "%s%s", "air.get_width_", v22);
  v45 = PrimitiveType;
  if (PPTextarget <= 0x11 && ((1 << PPTextarget) & 0x39E00) != 0)
  {
    v23 = v21;
    v24 = v21 > 1;
    v25 = 1;
  }
  else
  {
    if (v21 <= 1)
    {
      v50[0] = 0x400000001;
      return glpLLVMCallFunctionInner((uint64_t)a1, (uint64_t)v47, v18, (uint64_t)&v48, v17, (int *)v50, 2u, (uint64_t)"");
    }
    v25 = 0;
    v23 = v21;
    v24 = 1;
  }
  v26 = LLVMGetElementType();
  v50[0] = 0x400000001;
  v27 = v17;
  v28 = glpLLVMCallFunctionInner((uint64_t)a1, (uint64_t)v47, v26, (uint64_t)&v48, v17, (int *)v50, 2u, (uint64_t)"");
  v44[0] = v23;
  v44[1] = v44;
  v29 = (v23 + v25);
  MEMORY[0x24BDAC7A8](v28);
  v31 = (_QWORD *)((char *)v44 - v30);
  bzero((char *)v44 - v30, v32);
  *v31 = v28;
  v33 = v27;
  inserted = MEMORY[0x22E316E2C](v18);
  v35 = v45;
  if (v24)
  {
    v36 = glpTextureNameFromSamplerType(v45);
    snprintf_l(v47, 0x200uLL, 0, "%s%s", "air.get_height_", v36);
    v50[0] = 0x400000001;
    v31[1] = glpLLVMCallFunctionInner((uint64_t)a1, (uint64_t)v47, v26, (uint64_t)&v48, v33, (int *)v50, 2u, (uint64_t)"");
  }
  if (v25)
  {
    v37 = glpTextureNameFromSamplerType(v35);
    snprintf_l(v47, 0x200uLL, 0, "%s%s", "air.get_array_size_", v37);
    v50[0] = 0x400000001;
    v38 = glpLLVMCallFunctionInner((uint64_t)a1, (uint64_t)v47, v26, (uint64_t)&v48, v33, (int *)v50, 2u, (uint64_t)"");
    v39 = v44[0];
  }
  else
  {
    if (LODWORD(v44[0]) < 3)
      goto LABEL_24;
    v40 = glpTextureNameFromSamplerType(v35);
    snprintf_l(v47, 0x200uLL, 0, "%s%s", "air.get_depth_", v40);
    v50[0] = 0x400000001;
    v39 = 2;
    v38 = glpLLVMCallFunctionInner((uint64_t)a1, (uint64_t)v47, v26, (uint64_t)&v48, v33, (int *)v50, 2u, (uint64_t)"");
  }
  v31[v39] = v38;
LABEL_24:
  if ((_DWORD)v29)
  {
    v41 = 0;
    v42 = a1 + 65;
    do
    {
      if (!v42[v41])
        v42[v41] = LLVMConstInt();
      inserted = LLVMBuildInsertElement();
      ++v41;
    }
    while (v29 != v41);
  }
  return inserted;
}

uint64_t glpLLVMBuildRefract(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  int Length;
  uint64_t v12;
  const char *v13;
  BOOL v14;
  const char *v15;
  const char *v16;
  uint64_t v17;
  unsigned int v19;
  uint64_t v21;
  const char *v22;
  char v23[512];
  _QWORD v24[3];

  v24[1] = *MEMORY[0x24BDAC8D0];
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(unsigned int *)(a3 + 4);
  if (glpPrimitiveTypeGetCategory(*(_DWORD *)(a3 + 4)) == 2)
  {
    Length = glpPrimitiveVectorGetLength(v10);
    v12 = LLVMTypeOf();
    v19 = Length;
    if (Length >= 2)
      v12 = LLVMGetElementType();
  }
  else
  {
    v12 = LLVMTypeOf();
    v19 = 1;
  }
  v13 = glpLLVMGetTypeString(&v22, *(_DWORD *)a3, a4);
  snprintf_l(v23, 0x200uLL, 0, "%s.%s", "air.dot", v13);
  v24[0] = 0x300000001;
  glpLLVMCallFunctionInner(a1, (uint64_t)v23, v12, a2, 2u, (int *)v24, 2u, (uint64_t)"");
  LLVMBuildFMul();
  llvm::ConstantFP::get();
  LLVMBuildFMul();
  LLVMBuildFSub();
  LLVMBuildFMul();
  v21 = LLVMBuildFSub();
  MEMORY[0x22E316D18](v12);
  LLVMBuildFCmp();
  if (a4)
    v14 = a4 == 3;
  else
    v14 = 1;
  if (v14)
    v15 = "air.fast_sqrt";
  else
    v15 = "air.sqrt";
  v16 = glpLLVMGetTypeString(&v22, *(_DWORD *)(a3 + 8), a4);
  snprintf_l(v23, 0x200uLL, 0, "%s.%s", v15, v16);
  v24[0] = 0x300000001;
  glpLLVMCallFunctionInner(a1, (uint64_t)v23, v12, (uint64_t)&v21, 1u, (int *)v24, 2u, (uint64_t)"");
  LLVMBuildFMul();
  v17 = LLVMBuildFAdd();
  glpLLVMSplatElement(a1, v17, v19);
  glpLLVMSplatElement(a1, v9, v19);
  LLVMBuildFMul();
  LLVMBuildFMul();
  LLVMBuildFSub();
  MEMORY[0x22E316D18](a5);
  return LLVMBuildSelect();
}

uint64_t glpLLVMBuildDistance(uint64_t a1, uint64_t a2, int *a3, int a4, uint64_t a5)
{
  uint64_t v10;

  v10 = LLVMBuildFSub();
  return glpLLVMBuildLength(a1, &v10, a3, a4, a5);
}

uint64_t glpLLVMf32Extend(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6;
  uint64_t Length;

  if (!a4 || a4 == 3)
    return a2;
  v6 = LLVMFloatTypeInContext();
  if (glpPrimitiveTypeGetCategory(a3) == 2)
  {
    Length = glpPrimitiveVectorGetLength(a3);
    MEMORY[0x22E316F4C](v6, Length);
  }
  return LLVMBuildFPCast();
}

uint64_t glpLLVMSplatConstantVector(uint64_t a1, int a2)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  size_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD v11[2];

  v2 = a1;
  v11[1] = *MEMORY[0x24BDAC8D0];
  if (a2 != 1)
  {
    MEMORY[0x24BDAC7A8](a1);
    v6 = (char *)v11 - v5;
    if (v4 >= 0x200)
      v7 = 512;
    else
      v7 = v4;
    bzero((char *)v11 - v5, v7);
    if (a2 >= 1)
    {
      v8 = a2;
      v9 = v6;
      do
      {
        *v9++ = v2;
        --v8;
      }
      while (v8);
    }
    return LLVMConstVector();
  }
  return v2;
}

uint64_t glpBuildGetLODOperation(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v6;
  uint64_t ReturnPrimitiveType;
  char SaFlags;
  uint64_t v10;
  int v11;
  uint64_t Child;
  uint64_t SaType;
  char *v14;
  int PPTextarget;
  int TextureSize;
  uint64_t v17;
  uint64_t v18;
  uint64_t Category;
  uint64_t v20;
  _BYTE *v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v29[12];
  int v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  char v34[64];
  _QWORD v35[2];

  v6 = a2;
  v35[1] = *MEMORY[0x24BDAC8D0];
  ReturnPrimitiveType = glpPPStreamOpNodeGetReturnPrimitiveType(a2);
  SaFlags = glpASTNodeGetSaFlags(v6);
  v10 = glpPrecisionIndexFromSAFlags(SaFlags);
  v11 = 1;
  Child = glpASTNodeGetChild(v6, 1u);
  SaType = glpASTNodeGetSaType(Child);
  LODWORD(v6) = glpPrimitiveTypeGetPrimitiveType(SaType);
  v14 = glpTextureNameFromSamplerType(v6);
  snprintf_l(v34, 0x40uLL, 0, "air.compute_lod_%s", v14);
  PPTextarget = glpPrimitiveSamplerGetPPTextarget(v6);
  TextureSize = glpGetTextureSize(PPTextarget, &v30);
  v17 = *(_QWORD *)a3;
  v18 = *a4;
  Category = glpPrimitiveTypeGetCategory(v18);
  if ((_DWORD)Category == 2)
  {
    Category = glpPrimitiveVectorGetLength(v18);
    v11 = Category;
  }
  if (TextureSize != v11)
  {
    MEMORY[0x24BDAC7A8](Category);
    v21 = &v29[-v20];
    bzero(&v29[-v20], v22);
    v23 = 0;
    v24 = a1 + 65;
    do
    {
      v25 = v24[v23];
      if (!v25)
      {
        v25 = LLVMConstInt();
        v24[v23] = v25;
      }
      *(_QWORD *)&v21[8 * v23++] = v25;
    }
    while (TextureSize != v23);
    LLVMConstVector();
    v26 = LLVMTypeOf();
    MEMORY[0x22E316E2C](v26);
    v17 = LLVMBuildShuffleVector();
  }
  v31 = *(_OWORD *)(a3 + 8);
  v32 = v17;
  v33 = LLVMConstInt();
  v27 = glpPrimitiveTypeToLLVMType(a1, ReturnPrimitiveType, v10);
  v35[0] = 0x400000001;
  return glpLLVMCallFunctionInner((uint64_t)a1, (uint64_t)v34, v27, (uint64_t)&v31, 4u, (int *)v35, 2u, (uint64_t)"");
}

uint64_t glpLLVMGetVariablePointer(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  double v7;

  v2 = *(_QWORD *)(a2 + 144);
  v3 = *(_QWORD *)v2;
  if (*(_QWORD *)v2 && (*(_BYTE *)(a2 + 51) & 0x86) != 0)
  {
    v3 = glpPointerHashGet(*(_QWORD *)(a1 + 344), a2);
    if (!v3)
    {
      if (*(_WORD *)(a1 + 324))
      {
        LLVMGetElementType();
        v6 = glpBuildAlloca();
      }
      else
      {
        glpPointerHashGet(*(_QWORD *)(a1 + 336), a2);
        v6 = LLVMGetParam();
      }
      v3 = v6;
      glpPointerHashPut(*(_QWORD *)(a1 + 344), a2, v6, v7);
    }
    if ((*(_BYTE *)(v2 + 32) & 4) != 0)
    {
      LLVMBuildLoad();
      if (!*(_QWORD *)(a1 + 520))
        *(_QWORD *)(a1 + 520) = LLVMConstInt();
      return LLVMBuildGEP();
    }
  }
  return v3;
}

uint64_t glpBuildInterpolateAt(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, uint64_t a6)
{
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  unsigned int v16;
  const char *v17;
  const char *v19;
  char v20[512];
  uint64_t v21;
  uint64_t v22;
  char v23[512];
  _QWORD v24[2];

  v24[1] = *MEMORY[0x24BDAC8D0];
  v10 = *(_QWORD *)(a3 + 144);
  v11 = *(_DWORD *)(v10 + 24);
  v12 = *(_DWORD *)(v10 + 28);
  v13 = glpPrimitiveTypeToLLVMType(a1, v11, v12);
  v21 = LLVMBuildLoad();
  v14 = a4 & 0x46000800000;
  if ((a4 & 0x46000800000uLL) > 0x3FFFFFFFFFLL)
  {
    if ((a4 & 0x46000800000uLL) > 0x3FFFFFFFFFFLL)
    {
      if (v14 == 0x40000000000)
      {
        v15 = "air.interpolate_sample_perspective";
      }
      else
      {
        if (v14 != 0x42000000000)
          goto LABEL_24;
        v15 = "air.interpolate_sample_no_perspective";
      }
    }
    else if (v14 == 0x4000000000)
    {
      v15 = "air.interpolate_centroid_perspective";
    }
    else
    {
      if (v14 != 0x6000000000)
        goto LABEL_24;
      v15 = "air.interpolate_centroid_no_perspective";
    }
  }
  else if ((a4 & 0x46000800000uLL) > 0x1FFFFFFFFFLL)
  {
    if (v14 == 0x2000000000)
    {
      v15 = "air.interpolate_center_no_perspective";
    }
    else
    {
      if (v14 != 0x2000800000)
        goto LABEL_24;
      v15 = "air.interpolate_offset_no_perspective";
    }
  }
  else
  {
    if (v14)
    {
      if (v14 == 0x800000)
      {
        v15 = "air.interpolate_offset_perspective";
        goto LABEL_20;
      }
LABEL_24:
      abort();
    }
    v15 = "air.interpolate_center_perspective";
  }
LABEL_20:
  v22 = 0;
  snprintf_l(v20, 0x200uLL, 0, "%s%s", v15, a5);
  if (a6)
  {
    v22 = a6;
    v16 = 2;
  }
  else
  {
    v16 = 1;
  }
  v17 = glpLLVMGetTypeString(&v19, v11, v12);
  snprintf_l(v23, 0x200uLL, 0, "%s.%s", v20, v17);
  v24[0] = 0x300000001;
  return glpLLVMCallFunctionInner((uint64_t)a1, (uint64_t)v23, v13, (uint64_t)&v21, v16, (int *)v24, 2u, (uint64_t)"");
}

uint64_t glpCGSwizzle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  uint64_t Category;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t Length;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  size_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  char *v34;
  size_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  int v50;
  uint64_t v51;
  uint64_t *v52;
  unsigned int *v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t *v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  _QWORD v68[4];
  uint64_t *v69;
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  if (!a6)
    return a4;
  Category = glpPrimitiveTypeGetCategory(a5);
  v13 = Category;
  v14 = a6 & 7;
  if (!a2)
  {
    MEMORY[0x24BDAC7A8](Category);
    v34 = (char *)v68 - v33;
    bzero((char *)v68 - v33, v35);
    if ((a6 & 7) == 0)
      goto LABEL_34;
    v69 = v68;
    v36 = a4;
    v37 = 0;
    v38 = 3;
    do
    {
      v39 = a1 + 8 * ((a6 >> v38) & 3);
      v40 = *(_QWORD *)(v39 + 520);
      if (!v40)
      {
        v41 = (uint64_t *)(v39 + 520);
        v40 = LLVMConstInt();
        *v41 = v40;
      }
      *(_QWORD *)&v34[v37] = v40;
      v38 += 2;
      v37 += 8;
    }
    while (8 * v14 != v37);
    a4 = v36;
    if ((_DWORD)v14 == 1)
    {
      if (v13 != 2)
        return a4;
      return LLVMBuildExtractElement();
    }
    else
    {
LABEL_34:
      if (v13 != 2)
      {
        v45 = LLVMTypeOf();
        v46 = MEMORY[0x22E316F4C](v45, a6 & 7);
        MEMORY[0x22E316E2C](v46);
        LLVMBuildInsertElement();
      }
      LLVMConstVector();
      return LLVMBuildShuffleVector();
    }
  }
  v15 = glpPrimitiveTypeGetCategory(a3);
  if (v13 == 2)
  {
    Length = glpPrimitiveVectorGetLength(a3);
    v68[3] = v68;
    v17 = Length;
    MEMORY[0x24BDAC7A8](Length);
    if (v18 >= 0x200)
      v20 = 512;
    else
      v20 = v18;
    v69 = (_QWORD *)((char *)v68 - v19);
    bzero((char *)v68 - v19, v20);
    MEMORY[0x24BDAC7A8](v21);
    v23 = (unsigned int *)((char *)v68 - v22);
    if ((_DWORD)Length == glpPrimitiveVectorGetLength(a5))
    {
      if ((_DWORD)Length)
      {
        v24 = 0;
        do
        {
          v23[v24] = v24;
          ++v24;
        }
        while (Length != v24);
      }
      if ((a6 & 7) != 0)
      {
        v25 = 0;
        v26 = Length;
        do
        {
          v23[(a6 >> (v25 + 3)) & 3] = v26;
          v25 += 2;
          ++v26;
        }
        while (2 * (_DWORD)v14 != v25);
      }
      if ((_DWORD)Length)
      {
        v27 = v69;
        do
        {
          v29 = *v23++;
          v28 = v29;
          if (v29 > 7)
          {
            v31 = LLVMConstInt();
          }
          else
          {
            v30 = a1 + 8 * v28;
            v31 = *(_QWORD *)(v30 + 520);
            if (!v31)
            {
              v32 = (uint64_t *)(v30 + 520);
              v31 = LLVMConstInt();
              *v32 = v31;
            }
          }
          *v27++ = v31;
          --v17;
        }
        while (v17);
      }
    }
    else
    {
      if ((_DWORD)Length)
      {
        v47 = Length;
        v48 = v23;
        do
        {
          *v48++ = v14;
          --v47;
        }
        while (v47);
      }
      if ((a6 & 7) != 0)
      {
        v49 = 0;
        v50 = 3;
        do
        {
          v23[(a6 >> v50) & 3] = v49++;
          v50 += 2;
        }
        while ((_DWORD)v14 != v49);
      }
      v68[1] = a2;
      v68[2] = a4;
      if ((_DWORD)Length)
      {
        v51 = Length;
        v52 = v69;
        v53 = v23;
        do
        {
          v55 = *v53++;
          v54 = v55;
          if (v55 > 7)
          {
            v57 = LLVMConstInt();
          }
          else
          {
            v56 = a1 + 8 * v54;
            v57 = *(_QWORD *)(v56 + 520);
            if (!v57)
            {
              v58 = (uint64_t *)(v56 + 520);
              v57 = LLVMConstInt();
              *v58 = v57;
            }
          }
          *v52++ = v57;
          --v51;
        }
        while (v51);
      }
      LLVMConstVector();
      v59 = LLVMTypeOf();
      MEMORY[0x22E316E2C](v59);
      LLVMBuildShuffleVector();
      if ((_DWORD)Length)
      {
        v60 = 0;
        do
        {
          v23[v60] = v60;
          ++v60;
        }
        while (Length != v60);
      }
      if ((a6 & 7) != 0)
      {
        v61 = 0;
        do
        {
          v23[(a6 >> (v61 + 3)) & 3] = ((a6 >> (v61 + 3)) & 3) + Length;
          v61 += 2;
        }
        while (2 * (_DWORD)v14 != v61);
      }
      if ((_DWORD)Length)
      {
        v62 = v69;
        do
        {
          v64 = *v23++;
          v63 = v64;
          if (v64 > 7)
          {
            v66 = LLVMConstInt();
          }
          else
          {
            v65 = a1 + 8 * v63;
            v66 = *(_QWORD *)(v65 + 520);
            if (!v66)
            {
              v67 = (uint64_t *)(v65 + 520);
              v66 = LLVMConstInt();
              *v67 = v66;
            }
          }
          *v62++ = v66;
          --v17;
        }
        while (v17);
      }
    }
    LLVMConstVector();
    return LLVMBuildShuffleVector();
  }
  if (v15 != 2)
    return a4;
  v43 = a1 + 8 * ((a6 >> 3) & 3);
  if (!*(_QWORD *)(v43 + 520))
    *(_QWORD *)(v43 + 520) = LLVMConstInt();
  return LLVMBuildInsertElement();
}

BOOL glpGetConstantOffset(uint64_t a1, _DWORD *a2)
{
  _BOOL8 result;

  result = glpIsConstantNode(a1);
  if (result)
  {
    *a2 = *(_DWORD *)glpConstantNodeGetValue(a1);
    return 1;
  }
  return result;
}

uint64_t glpBuildUniformElementPtr(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t Gep;

  Gep = glpFindGep((uint64_t)a1, a2, a5, a6);
  if (!Gep)
  {
    LLVMConstInt();
    LLVMGetInsertBlock();
    LLVMPositionBuilderAtEnd();
    if (a4)
      LLVMBuildPointerCast();
    Gep = LLVMBuildGEP();
    LLVMPositionBuilderAtEnd();
    glpAddGep(a1, a2, a5, a6, Gep);
  }
  return Gep;
}

uint64_t glpMakeSwizzle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  int v9;
  uint64_t result;
  char *v11;
  char *v12;

  v9 = 0;
  v12 = &a9;
  LODWORD(result) = 4;
  do
  {
    v11 = v12;
    v12 += 8;
    result = (*(_DWORD *)v11 << (v9 + 3)) | result & ~(24 << v9);
    v9 += 2;
  }
  while (v9 != 8);
  return result;
}

uint64_t glpFindGep(uint64_t a1, unint64_t a2, int a3, int a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t i;

  result = glpPointerHashGet(*(_QWORD *)(a1 + 352), a2);
  if (result)
  {
    v7 = *(unsigned int *)(result + 4);
    if ((_DWORD)v7)
    {
      for (i = *(_QWORD *)(result + 8) + 8; *(_DWORD *)(i - 4) != a4 || *(_DWORD *)(i - 8) != a3; i += 16)
      {
        if (!--v7)
          return 0;
      }
      return *(_QWORD *)i;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void *glpAddGep(uint64_t *a1, unint64_t a2, int a3, int a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  double v12;
  int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  _QWORD *v17;
  char *v18;
  int v19;
  void *result;
  uint64_t v21;

  v10 = glpPointerHashGet(a1[44], a2);
  if (!v10)
  {
    v10 = glpLinkerPoolAlloc(a1[16]);
    v11 = a1[19];
    *(_QWORD *)v10 = 4;
    *(_QWORD *)(v10 + 8) = (*(uint64_t (**)(_QWORD, uint64_t, const char *))(v11 + 8))(*(_QWORD *)v11, 64, "Vector Storage (GLPGepEntry)");
    glpPointerHashPut(a1[44], a2, v10, v12);
  }
  v13 = *(_DWORD *)v10;
  v14 = *(unsigned int *)(v10 + 4);
  if ((v14 + 1) <= *(_DWORD *)v10)
  {
    v18 = *(char **)(v10 + 8);
    v19 = *(_DWORD *)(v10 + 4);
  }
  else
  {
    if (v13 <= 1)
      v13 = 1;
    v15 = 2 * v13;
    if (v15 <= (int)v14 + 1)
      v16 = v14 + 1;
    else
      v16 = v15;
    v17 = (_QWORD *)a1[19];
    v18 = (char *)((uint64_t (*)(_QWORD, uint64_t, const char *))v17[1])(*v17, 16 * v16, "Vector Storage (GLPGepEntry, growth)");
    memcpy(v18, *(const void **)(v10 + 8), 16 * *(unsigned int *)(v10 + 4));
    ((void (*)(_QWORD, _QWORD))v17[3])(*v17, *(_QWORD *)(v10 + 8));
    *(_DWORD *)v10 = v16;
    *(_QWORD *)(v10 + 8) = v18;
    v19 = *(_DWORD *)(v10 + 4);
  }
  result = memmove(&v18[16 * v14 + 16], &v18[16 * v14], 16 * (v19 - v14));
  v21 = *(_QWORD *)(v10 + 8) + 16 * v14;
  *(_DWORD *)v21 = a3;
  *(_DWORD *)(v21 + 4) = a4;
  *(_QWORD *)(v21 + 8) = a5;
  ++*(_DWORD *)(v10 + 4);
  return result;
}

uint64_t glpLLVMCGInsertBasicBlock(uint64_t a1)
{
  uint64_t v2;

  v2 = LLVMAppendBasicBlock();
  if (*(_QWORD *)(a1 + 432))
    LLVMMoveBasicBlockBefore();
  return v2;
}

uint64_t glpLLVMSplatScalar(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t inserted;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  size_t v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD v16[2];

  v16[1] = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a1 + 520);
  if (!v5)
  {
    v5 = LLVMConstInt();
    *(_QWORD *)(a1 + 520) = v5;
  }
  v6 = LLVMTypeOf();
  v7 = MEMORY[0x22E316F4C](v6, a3);
  MEMORY[0x22E316E2C](v7);
  inserted = LLVMBuildInsertElement();
  MEMORY[0x24BDAC7A8](inserted);
  v11 = (_QWORD *)((char *)v16 - v10);
  if (v9 >= 0x200)
    v12 = 512;
  else
    v12 = v9;
  bzero((char *)v16 - v10, v12);
  if ((_DWORD)a3)
  {
    v13 = a3;
    v14 = v11;
    do
    {
      *v14++ = v5;
      --v13;
    }
    while (v13);
  }
  LLVMConstVector();
  return LLVMBuildShuffleVector();
}

uint64_t glpLLVMSplatElement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t inserted;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  size_t v13;
  uint64_t v14;
  uint64_t *v15;
  _QWORD v17[2];

  v17[1] = *MEMORY[0x24BDAC8D0];
  if ((_DWORD)a3 != 1)
  {
    v6 = LLVMTypeOf();
    v7 = MEMORY[0x22E316F4C](v6, a3);
    MEMORY[0x22E316E2C](v7);
    v8 = *(_QWORD *)(a1 + 520);
    if (!v8)
    {
      v8 = LLVMConstInt();
      *(_QWORD *)(a1 + 520) = v8;
    }
    inserted = LLVMBuildInsertElement();
    MEMORY[0x24BDAC7A8](inserted);
    v12 = (_QWORD *)((char *)v17 - v11);
    if (v10 >= 0x200)
      v13 = 512;
    else
      v13 = v10;
    bzero((char *)v17 - v11, v13);
    if ((int)a3 >= 1)
    {
      v14 = a3;
      v15 = v12;
      do
      {
        *v15++ = v8;
        --v14;
      }
      while (v14);
    }
    LLVMConstVector();
    return LLVMBuildShuffleVector();
  }
  return a2;
}

uint64_t glpGetTextureSize(int a1, int *a2)
{
  int v3;
  uint64_t result;

  v3 = 0;
  result = 2;
  switch(a1)
  {
    case 0:
    case 1:
    case 16:
      goto LABEL_6;
    case 4:
    case 9:
    case 13:
      goto LABEL_4;
    case 5:
    case 6:
    case 12:
      v3 = 1;
      break;
    case 7:
    case 11:
      v3 = 1;
LABEL_4:
      result = 1;
      break;
    case 8:
    case 17:
      v3 = 1;
LABEL_6:
      result = 3;
      break;
    default:
      break;
  }
  *a2 = v3;
  return result;
}

char *glpTextureNameFromSamplerType(int a1)
{
  unsigned int PPTextarget;

  PPTextarget = glpPrimitiveSamplerGetPPTextarget(a1);
  if (PPTextarget >= 0x12)
    abort();
  return off_24F947218[PPTextarget];
}

uint64_t glpLLVMTypesEqual(_DWORD *a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  _BOOL4 v10;
  _BOOL4 v11;
  int Length;
  int v13;
  uint64_t result;
  int ScalarType;
  int v16;
  _DWORD *v17;
  _DWORD *v18;
  int v19;
  _DWORD *v20;
  int v21;

  v10 = glpPrimitiveTypeGetScalarType(a2) == 5 || glpPrimitiveTypeGetScalarType(a2) == 36;
  v11 = glpPrimitiveTypeGetScalarType(a4) == 5 || glpPrimitiveTypeGetScalarType(a4) == 36;
  if (glpPrimitiveTypeGetCategory(a2) == 2)
    Length = glpPrimitiveVectorGetLength(a2);
  else
    Length = 1;
  if (glpPrimitiveTypeGetCategory(a4) == 2)
    v13 = glpPrimitiveVectorGetLength(a4);
  else
    v13 = 1;
  if ((_DWORD)a2 == (_DWORD)a4 || (result = 0, v10 && v11) && Length == v13)
  {
    if (a3 != a5)
    {
      ScalarType = glpPrimitiveTypeGetScalarType(a2);
      v16 = ScalarType;
      if (ScalarType > 8)
      {
        result = 1;
        if (v16 == 9)
          return result;
        if (v16 != 36)
        {
          if (v16 == 62)
            return result;
          return 0;
        }
LABEL_24:
        switch(a3)
        {
          case 0:
          case 3:
            v17 = a1 + 31;
            goto LABEL_30;
          case 1:
            v17 = a1 + 29;
            goto LABEL_30;
          case 2:
            v17 = a1 + 30;
LABEL_30:
            if (*v17 <= 0x10u)
              goto LABEL_31;
            v19 = 32;
            break;
          default:
LABEL_31:
            v19 = 16;
            break;
        }
        switch(a5)
        {
          case 0:
          case 3:
            v20 = a1 + 31;
            goto LABEL_46;
          case 1:
            v20 = a1 + 29;
            goto LABEL_46;
          case 2:
            v20 = a1 + 30;
            goto LABEL_46;
          default:
            goto LABEL_47;
        }
      }
      if (ScalarType != 1)
      {
        if (ScalarType == 5)
          goto LABEL_24;
        return 0;
      }
      switch(a3)
      {
        case 0:
        case 3:
          v18 = a1 + 28;
          goto LABEL_39;
        case 1:
          v18 = a1 + 26;
          goto LABEL_39;
        case 2:
          v18 = a1 + 27;
LABEL_39:
          if (*v18 <= 0x10u)
            goto LABEL_40;
          v19 = 32;
          break;
        default:
LABEL_40:
          v19 = 16;
          break;
      }
      switch(a5)
      {
        case 0:
        case 3:
          v20 = a1 + 28;
          goto LABEL_46;
        case 1:
          v20 = a1 + 26;
          goto LABEL_46;
        case 2:
          v20 = a1 + 27;
LABEL_46:
          if (*v20 <= 0x10u)
            goto LABEL_47;
          v21 = 32;
          break;
        default:
LABEL_47:
          v21 = 16;
          break;
      }
      if (v19 != v21)
        return 0;
    }
    return 1;
  }
  return result;
}

uint64_t glpBuildArrayElementPtr(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  int *Value;
  uint64_t v13;
  uint64_t v14;
  int v15;

  if (glpIsConstantNode(a4) && (Value = (int *)glpConstantNodeGetValue(a4), !a6))
  {
    v15 = *Value;
    v13 = glpBuildArrayElementPtrCst(a1, a2, a3, *Value);
    if (a5)
    {
      v14 = glpBuildArrayElementPtrCst(a1, a2, a3, v15 + 1);
LABEL_11:
      *a5 = v14;
    }
  }
  else
  {
    if (!a1[65])
      a1[65] = LLVMConstInt();
    glpLLVMCGNode(a1, a4, 1);
    v13 = LLVMBuildGEP();
    if (a5)
    {
      if (!a1[66])
        a1[66] = LLVMConstInt();
      LLVMBuildAdd();
      v14 = LLVMBuildGEP();
      goto LABEL_11;
    }
  }
  return v13;
}

uint64_t glpLLVMLoadVector(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t SourceVariable;
  uint64_t v13;
  uint64_t v14;

  SourceVariable = glpLoadSourceVariable(a1, a3, a2);
  v13 = glpPrimitiveTypeToLLVMType(a1, a4, a5);
  if ((_DWORD)a6 && (v14 = v13, !glpLLVMTypesEqual(a1, a6, a7, a4, a5)))
    return glpLLVMUnpackTypeInner((uint64_t)a1, SourceVariable, v14);
  else
    return SourceVariable;
}

uint64_t glpBuildArrayElementPtrCst(uint64_t *a1, unint64_t a2, uint64_t a3, int a4)
{
  uint64_t Gep;

  Gep = glpFindGep((uint64_t)a1, a2, 0, a4);
  if (!Gep)
  {
    if (!a1[65])
      a1[65] = LLVMConstInt();
    LLVMConstInt();
    LLVMGetInsertBlock();
    LLVMPositionBuilderAtEnd();
    Gep = LLVMBuildGEP();
    LLVMPositionBuilderAtEnd();
    glpAddGep(a1, a2, 0, a4, Gep);
  }
  return Gep;
}

uint64_t glpLoadSourceVariable(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v7;
  char __str[16];
  __int128 v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a3 + 51) & 1) == 0)
    return LLVMBuildLoad();
  v7 = glpLayoutObjectFind(*(uint64_t **)(a3 + 8), 35);
  *(_OWORD *)__str = 0u;
  v9 = 0u;
  snprintf(__str, 0x1FuLL, "user(slot%u)", *((_DWORD *)v7 + 4));
  return glpBuildInterpolateAt(a1, a2, a3, *(_QWORD *)(a3 + 48), __str, 0);
}

uint64_t glpIsComponentAssigment(uint64_t result, unsigned int ***a2, _DWORD *a3, _DWORD *a4, int *a5, int a6)
{
  uint64_t v11;
  uint64_t Lhs;
  unsigned int **VariableExtra;
  uint64_t OffsetExpr;
  uint64_t v15;
  int v16;
  unsigned int *v17;
  uint64_t PrimitiveType;
  int Category;

  if (result)
  {
    v11 = result;
    if (glpASTNodeGetKind(result) == 39)
    {
      Lhs = glpBinaryOperatorNodeGetLhs(v11);
      VariableExtra = (unsigned int **)glpLValueNodeGetVariableExtra(Lhs);
      result = glpDerefNodeGetOffset(Lhs);
      if (!result)
        return result;
      OffsetExpr = glpOffsetNodeGetOffsetExpr(result);
      if (OffsetExpr)
      {
        v15 = OffsetExpr;
        result = glpIsConstantNode(OffsetExpr);
        if (!(_DWORD)result)
          return result;
        v16 = *(_DWORD *)glpConstantNodeGetValue(v15);
      }
      else
      {
        v16 = 0;
      }
      if (*a2)
      {
        if (*a2 == VariableExtra && !*a3 && *a4 == v16)
        {
LABEL_20:
          result = glpGetVectorSwizzle(Lhs, a5);
          if ((_DWORD)result)
          {
            *a2 = VariableExtra;
            *a3 = 0;
            result = 1;
            *a4 = v16;
          }
          return result;
        }
      }
      else
      {
        v17 = *VariableExtra;
        if (!glpTypeGetKind(*VariableExtra))
        {
          PrimitiveType = glpPrimitiveTypeGetPrimitiveType((uint64_t)v17);
          Category = glpPrimitiveTypeGetCategory(PrimitiveType);
          if (Category == 2 || Category == 3 && !a6 && glpPrimitiveTypeGetScalarType(PrimitiveType) != 62)
            goto LABEL_20;
        }
      }
    }
    return 0;
  }
  return result;
}

uint64_t glpProcessComponentWiseVectorAssignment(uint64_t *a1, unsigned int **a2, int a3, uint64_t *a4, unsigned int *a5, int a6, uint64_t a7)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t Rhs;
  int Kind;
  uint64_t VariableExtra;
  unsigned int PrimitiveType;
  uint64_t Offset;
  uint64_t VectorElementExpr;
  uint64_t OffsetExpr;
  BOOL v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t inserted;
  uint64_t *v28;
  unsigned int **v29;
  unsigned int *v30;
  uint64_t v31;
  int Length;
  uint64_t v33;
  int Category;
  uint64_t ColumnType;
  uint64_t v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  size_t v43;
  uint64_t v44;
  uint64_t *v45;
  size_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t *v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  char *v58;
  uint64_t *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  unint64_t v73;
  uint64_t v74;
  char *v75;
  size_t v76;
  int v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t *v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  char *v97;
  uint64_t *v98;
  uint64_t v99;
  int v100;
  int v101;
  uint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v107;
  uint64_t *v108;
  uint64_t SourceVariable;
  uint64_t *v110;
  uint64_t *v111;
  unsigned int **v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;

  LODWORD(v111) = a3;
  v112 = a2;
  v114 = a1;
  v116 = *MEMORY[0x24BDAC8D0];
  v9 = (a7 - 1);
  v113 = a7;
  if ((int)a7 >= 1)
  {
    LODWORD(v110) = a6;
    v10 = 0;
    v115 = 0;
    v11 = 1;
    v12 = a7;
    while (1)
    {
      Rhs = glpBinaryOperatorNodeGetRhs(a4[v10]);
      Kind = glpASTNodeGetKind(Rhs);
      if (Kind == 3)
      {
        VectorElementExpr = v11;
      }
      else
      {
        if (Kind != 81
          || (VariableExtra = glpLValueNodeGetVariableExtra(Rhs),
              glpTypeGetKind(*(unsigned int **)VariableExtra))
          || (*(_BYTE *)(VariableExtra + 52) & 1) != 0
          || (PrimitiveType = glpPrimitiveTypeGetPrimitiveType(*(_QWORD *)VariableExtra),
              glpPrimitiveTypeGetCategory(PrimitiveType) != 2)
          || (Offset = glpDerefNodeGetOffset(Rhs),
              VectorElementExpr = glpOffsetNodeGetVectorElementExpr(Offset),
              OffsetExpr = glpOffsetNodeGetOffsetExpr(Offset),
              glpOffsetNodeGetBankIndex(Offset))
          || OffsetExpr
          || VectorElementExpr)
        {
          do
          {
            v23 = *a4++;
            v22 = v23;
            if ((_DWORD)v110)
              v24 = v9 == 0;
            else
              v24 = 0;
            v25 = v24;
            v26 = glpLLVMCGNode(v114, v22, v25);
            --v9;
            --v12;
          }
          while (v12);
          return v26;
        }
        if (v115)
          v20 = v115 == VariableExtra;
        else
          v20 = 1;
        v21 = v20;
        if ((v11 & 1) != 0 && v21)
        {
          glpOffsetNodeGetSwizzle(Offset);
          VectorElementExpr = 1;
          v115 = VariableExtra;
        }
      }
      ++v10;
      v11 = VectorElementExpr;
      if (v10 >= v12)
        goto LABEL_32;
    }
  }
  v115 = 0;
  LODWORD(VectorElementExpr) = 1;
LABEL_32:
  v28 = v114;
  v29 = (unsigned int **)glpLLVMGetVariablePointer((uint64_t)v114, (unint64_t)v112);
  v30 = *v112;
  v31 = glpTypeGetKind(*v112);
  if ((_DWORD)v31)
  {
    Length = 0;
  }
  else
  {
    v33 = glpPrimitiveTypeGetPrimitiveType((uint64_t)v30);
    Category = glpPrimitiveTypeGetCategory(v33);
    if (Category == 3)
    {
      ColumnType = glpPrimitiveMatrixGetColumnType(v33);
      Length = glpPrimitiveVectorGetLength(ColumnType);
      v31 = glpBuildArrayElementPtrCst(v114, (unint64_t)v112, (uint64_t)v29, (int)v111);
      v29 = (unsigned int **)v31;
    }
    else
    {
      if (Category != 2)
        abort();
      v31 = glpPrimitiveVectorGetLength(v33);
      Length = v31;
    }
  }
  LODWORD(v36) = v113;
  if (Length != (_DWORD)v113)
    goto LABEL_59;
  if ((int)v113 < 1)
  {
    v37 = 0;
  }
  else
  {
    v37 = 0;
    v38 = v113 + 1;
    do
    {
      v39 = (v38 - 2);
      v40 = 1 << a5[v39];
      if ((v40 & v37) != 0)
        a4[v39] = 0;
      v37 |= v40;
      --v38;
    }
    while (v38 > 1);
  }
  v41 = ~(-1 << v36);
  if ((_DWORD)VectorElementExpr && v37 == v41)
  {
    v111 = &v107;
    v112 = v29;
    v42 = v36;
    v43 = 8 * v36;
    MEMORY[0x24BDAC7A8](v31);
    v45 = (uint64_t *)((char *)&v107 - v44);
    if (v43 >= 0x200)
      v46 = 512;
    else
      v46 = 8 * v36;
    bzero(v45, v46);
    if ((int)v36 < 1)
    {
      v48 = 0;
    }
    else
    {
      v48 = 0;
      v36 = v36;
      do
      {
        v47 = *a4;
        if (*a4)
        {
          v49 = glpBinaryOperatorNodeGetRhs(v47);
          v45[*a5] = v49;
          v47 = glpASTNodeGetKind(v49);
          if ((_DWORD)v47 == 3)
            ++v48;
        }
        ++a5;
        ++a4;
        --v36;
      }
      while (v36);
    }
    v56 = v113;
    if (v48 == (_DWORD)v113)
    {
      MEMORY[0x24BDAC7A8](v47);
      v58 = (char *)&v107 - ((v57 + 15) & 0xFFFFFFFF0);
      bzero(v58, v46);
      v59 = v114;
      if (v56)
      {
        v60 = v58;
        do
        {
          v61 = *v45++;
          *v60++ = glpLLVMCGNode(v59, v61, 0);
          --v42;
        }
        while (v42);
      }
      LLVMConstVector();
LABEL_123:
      LLVMBuildStore();
      return 0;
    }
    v62 = v114;
    v63 = (uint64_t *)v115;
    v64 = glpLLVMGetVariablePointer((uint64_t)v114, v115);
    SourceVariable = glpLoadSourceVariable(v62, v64, (uint64_t)v63);
    v65 = LLVMTypeOf();
    v110 = &v107;
    MEMORY[0x24BDAC7A8](v65);
    v67 = (char *)&v107 - ((v66 + 15) & 0xFFFFFFFF0);
    bzero(v67, v46);
    bzero(v67, v43);
    v68 = glpPrimitiveTypeGetPrimitiveType(*v63);
    v69 = glpPrimitiveVectorGetLength(v68);
    v70 = MEMORY[0x22E316E2C](v65);
    v71 = 0;
    v115 = v69;
    if (v48)
    {
      v72 = v113;
      if ((int)v69 < v48)
      {
LABEL_94:
        v108 = (uint64_t *)v70;
        if (v72)
        {
          v89 = 0;
          v90 = 2 * v69 - 1;
          v107 = v90;
          v91 = &v114[v90 + 65];
          do
          {
            v92 = v45[v89];
            if (glpASTNodeGetKind(v92) == 81)
            {
              v93 = glpDerefNodeGetOffset(v92);
              v94 = (glpOffsetNodeGetSwizzle(v93) >> 3) & 3;
              v95 = &v114[v94];
              v96 = v95[65];
              if (!v96)
              {
                v97 = v67;
                v98 = v95 + 65;
                v96 = LLVMConstInt();
                *v98 = v96;
                v67 = v97;
              }
              *(_QWORD *)&v67[8 * v89] = v96;
              if (v89 != v94)
                v71 = 1;
            }
            else if (!*(_QWORD *)&v67[8 * v89])
            {
              if (v90 > 7)
              {
                v99 = LLVMConstInt();
              }
              else
              {
                v99 = *v91;
                if (!*v91)
                {
                  v99 = LLVMConstInt();
                  *v91 = v99;
                }
              }
              *(_QWORD *)&v67[8 * v89] = v99;
              v71 = 1;
            }
            ++v89;
          }
          while (v42 != v89);
        }
        v100 = v113;
        v101 = v115;
        if (v71 || (_DWORD)v115 != (_DWORD)v113)
        {
          LLVMConstVector();
          v102 = v114;
          LLVMBuildShuffleVector();
        }
        else
        {
          v102 = v114;
        }
        if (v48 && v101 < v48 && v100)
        {
          v103 = 0;
          do
          {
            v104 = v45[v103];
            if (glpASTNodeGetKind(v104) == 3)
            {
              glpLLVMCGNode(v102, v104, 0);
              if (v103 > 7)
              {
                LLVMConstInt();
              }
              else
              {
                v105 = &v102[v103];
                if (!v105[65])
                  v105[65] = LLVMConstInt();
              }
              LLVMBuildInsertElement();
            }
            ++v103;
          }
          while (v42 != v103);
        }
        goto LABEL_123;
      }
      v107 = (uint64_t)&v107;
      v108 = (uint64_t *)v67;
      MEMORY[0x24BDAC7A8](v70);
      v75 = (char *)&v107 - v74;
      if (v73 >= 0x200)
        v76 = 512;
      else
        v76 = v73;
      bzero((char *)&v107 - v74, v76);
      if (v72)
      {
        v77 = 0;
        v78 = v42;
        v79 = v45;
        v80 = v108;
        v81 = v114;
        do
        {
          v82 = *v79;
          if (glpASTNodeGetKind(*v79) == 3)
          {
            *(_QWORD *)&v75[8 * v77] = glpLLVMCGNode(v81, v82, 0);
            if ((v77 + v115) > 7)
            {
              v84 = LLVMConstInt();
            }
            else
            {
              v83 = &v81[(v77 + v115)];
              v84 = v83[65];
              if (!v84)
              {
                v85 = v83 + 65;
                v84 = LLVMConstInt();
                *v85 = v84;
              }
            }
            *v80 = v84;
            ++v77;
          }
          ++v80;
          ++v79;
          --v78;
        }
        while (v78);
      }
      LODWORD(v69) = v115;
      v86 = v115 - v48;
      if ((int)v115 > v48)
      {
        v87 = 8 * v48;
        do
        {
          v88 = LLVMTypeOf();
          *(_QWORD *)&v75[v87] = MEMORY[0x22E316E2C](v88);
          v87 += 8;
          --v86;
        }
        while (v86);
      }
      v70 = LLVMConstVector();
      v71 = 1;
      v67 = (char *)v108;
    }
    v72 = v113;
    goto LABEL_94;
  }
  if (v37 == v41)
  {
    LLVMTypeOf();
    v55 = LLVMGetElementType();
    v50 = MEMORY[0x22E316E2C](v55);
  }
  else
  {
LABEL_59:
    v50 = LLVMBuildLoad();
  }
  inserted = v50;
  if ((int)v36 >= 1)
  {
    v36 = v36;
    do
    {
      v51 = glpBinaryOperatorNodeGetRhs(*a4);
      glpLLVMCGNode(v28, v51, 1);
      v53 = *a5++;
      v52 = v53;
      if (v53 > 7)
      {
        LLVMConstInt();
      }
      else
      {
        v54 = &v28[v52];
        if (!v54[65])
          v54[65] = LLVMConstInt();
      }
      inserted = LLVMBuildInsertElement();
      ++a4;
      --v36;
    }
    while (v36);
  }
  LLVMBuildStore();
  return inserted;
}

uint64_t glpGetVectorSwizzle(uint64_t a1, int *a2)
{
  uint64_t result;
  uint64_t v4;
  unsigned int Swizzle;

  result = glpDerefNodeGetOffset(a1);
  if (result)
  {
    v4 = result;
    if (glpOffsetNodeGetVectorElementExpr(result))
      return 0;
    Swizzle = glpOffsetNodeGetSwizzle(v4);
    if ((Swizzle & 7) != 1)
    {
      return 0;
    }
    else
    {
      *a2 = (Swizzle >> 3) & 3;
      return 1;
    }
  }
  return result;
}

uint64_t *glpLLVMCGGlobalVariable(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  _QWORD *v12;
  char *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  _QWORD *v20;
  char *v21;
  int v22;
  _QWORD *v23;
  int v24;
  int v25;
  unsigned int v26;
  _QWORD *v27;
  char *v28;
  int v29;
  uint64_t *result;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;

  if ((*(_WORD *)(a2 + 52) & 0x980) != 0)
    *(_WORD *)(a1 + 326) = 1;
  v4 = *(uint64_t **)(a2 + 8);
  if (!v4)
  {
    v15 = 0;
    v16 = 0;
    goto LABEL_41;
  }
  v5 = glpLayoutObjectFind(v4, 33);
  if (v5)
  {
    v6 = *((_DWORD *)v5 + 4);
    switch(v6)
    {
      case 5:
        v7 = (_DWORD *)(a1 + 692);
        v8 = *(unsigned int *)(a1 + 692);
        v17 = *(_DWORD *)(a1 + 688);
        if ((int)v8 + 1 <= v17)
        {
          v21 = *(char **)(a1 + 696);
          v22 = *(_DWORD *)(a1 + 692);
        }
        else
        {
          if (v17 <= 1)
            v17 = 1;
          v18 = 2 * v17;
          if (v18 <= (int)v8 + 1)
            v19 = v8 + 1;
          else
            v19 = v18;
          v20 = *(_QWORD **)(a1 + 152);
          v21 = (char *)((uint64_t (*)(_QWORD, uint64_t, const char *))v20[1])(*v20, 8 * v19, "Vector Storage (GLPVariableObject *, growth)");
          memcpy(v21, *(const void **)(a1 + 696), 8 * *(unsigned int *)(a1 + 692));
          ((void (*)(_QWORD, _QWORD))v20[3])(*v20, *(_QWORD *)(a1 + 696));
          *(_DWORD *)(a1 + 688) = v19;
          *(_QWORD *)(a1 + 696) = v21;
          v22 = *(_DWORD *)(a1 + 692);
        }
        v23 = (_QWORD *)(a1 + 696);
        memmove(&v21[8 * v8 + 8], &v21[8 * v8], 8 * (v22 - v8));
        v16 = 0;
        v15 = 1;
        goto LABEL_38;
      case 3:
        if ((~*(unsigned __int16 *)(a1 + 832) & 3) != 0)
        {
          v7 = (_DWORD *)(a1 + 692);
          v8 = *(unsigned int *)(a1 + 692);
          v24 = *(_DWORD *)(a1 + 688);
          if ((int)v8 + 1 <= v24)
          {
            v28 = *(char **)(a1 + 696);
            v29 = *(_DWORD *)(a1 + 692);
          }
          else
          {
            if (v24 <= 1)
              v24 = 1;
            v25 = 2 * v24;
            if (v25 <= (int)v8 + 1)
              v26 = v8 + 1;
            else
              v26 = v25;
            v27 = *(_QWORD **)(a1 + 152);
            v28 = (char *)((uint64_t (*)(_QWORD, uint64_t, const char *))v27[1])(*v27, 8 * v26, "Vector Storage (GLPVariableObject *, growth)");
            memcpy(v28, *(const void **)(a1 + 696), 8 * *(unsigned int *)(a1 + 692));
            ((void (*)(_QWORD, _QWORD))v27[3])(*v27, *(_QWORD *)(a1 + 696));
            *(_DWORD *)(a1 + 688) = v26;
            *(_QWORD *)(a1 + 696) = v28;
            v29 = *(_DWORD *)(a1 + 692);
          }
          v23 = (_QWORD *)(a1 + 696);
          memmove(&v28[8 * v8 + 8], &v28[8 * v8], 8 * (v29 - v8));
          v15 = 0;
          v16 = 0;
          goto LABEL_38;
        }
        break;
      case 0:
        v7 = (_DWORD *)(a1 + 676);
        v8 = *(unsigned int *)(a1 + 676);
        v9 = *(_DWORD *)(a1 + 672);
        if ((int)v8 + 1 <= v9)
        {
          v13 = *(char **)(a1 + 680);
          v14 = *(_DWORD *)(a1 + 676);
        }
        else
        {
          if (v9 <= 1)
            v9 = 1;
          v10 = 2 * v9;
          if (v10 <= (int)v8 + 1)
            v11 = v8 + 1;
          else
            v11 = v10;
          v12 = *(_QWORD **)(a1 + 152);
          v13 = (char *)((uint64_t (*)(_QWORD, uint64_t, const char *))v12[1])(*v12, 8 * v11, "Vector Storage (GLPVariableObject *, growth)");
          memcpy(v13, *(const void **)(a1 + 680), 8 * *(unsigned int *)(a1 + 676));
          ((void (*)(_QWORD, _QWORD))v12[3])(*v12, *(_QWORD *)(a1 + 680));
          *(_DWORD *)(a1 + 672) = v11;
          *(_QWORD *)(a1 + 680) = v13;
          v14 = *(_DWORD *)(a1 + 676);
        }
        v23 = (_QWORD *)(a1 + 680);
        memmove(&v13[8 * v8 + 8], &v13[8 * v8], 8 * (v14 - v8));
        v15 = 0;
        v16 = 1;
LABEL_38:
        *(_QWORD *)(*v23 + 8 * v8) = a2;
        ++*v7;
        goto LABEL_39;
    }
  }
  v15 = 0;
  v16 = 0;
LABEL_39:
  result = glpLayoutObjectFind(*(uint64_t **)(a2 + 8), 46);
  if (!result || (*((_DWORD *)result + 4) - 9) >= 2)
  {
LABEL_41:
    v31 = glpPrecisionIndexFromSAFlags(*(_QWORD *)(a2 + 48));
    v32 = glpTypeToLLVMType((_QWORD *)a1, *(unsigned int **)a2, v31, (_QWORD *)a2);
    v33 = *(uint64_t **)(a2 + 8);
    if (v33)
      v33 = glpLayoutObjectFind(v33, 83);
    v34 = *(_DWORD *)(a1 + 320);
    switch(v34)
    {
      case 3:
        v36 = 0;
        if (v16 && !v33)
        {
          v36 = 0;
          goto LABEL_58;
        }
        break;
      case 2:
        if (!v16)
          goto LABEL_59;
        v36 = 0;
        if ((*(_BYTE *)(a2 + 53) & 2) == 0 && !v33)
        {
LABEL_58:
          v32 = LLVMArrayType();
          v35 = 4;
LABEL_61:
          result = (uint64_t *)MEMORY[0x22E316EC8](v32, v36);
          v37 = *(_QWORD *)(a2 + 144);
          *(_QWORD *)v37 = result;
          *(_DWORD *)(v37 + 32) = *(_DWORD *)(v37 + 32) & 0xFFFFFFFB | v35;
          return result;
        }
        break;
      case 1:
        v35 = 0;
        if (v15)
          v36 = 3;
        else
          v36 = 0;
        if (!v16 || v33)
          goto LABEL_61;
        goto LABEL_58;
      default:
LABEL_59:
        v36 = 0;
        v35 = 0;
        goto LABEL_61;
    }
    v35 = 0;
    goto LABEL_61;
  }
  return result;
}

uint64_t glpTypeToLLVMType(_QWORD *a1, unsigned int *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t PrimitiveType;
  uint64_t v9;
  uint64_t ElementCount;
  int v11;
  unsigned int v12;
  int v13;
  _DWORD *ElementType;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  size_t v18;
  uint64_t i;
  uint64_t v20;
  char ElementFlags;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v29;
  _QWORD v30[2];

  v30[1] = *MEMORY[0x24BDAC8D0];
  if (a4)
    *(_QWORD *)(a4[18] + 24) = 0;
  switch(glpTypeGetKind(a2))
  {
    case 0u:
      PrimitiveType = glpPrimitiveTypeGetPrimitiveType((uint64_t)a2);
      if (glpPrimitiveTypeGetCategory(PrimitiveType) == 3
        && glpPrimitiveTypeGetScalarType(PrimitiveType) == 62)
      {
        goto LABEL_24;
      }
      v9 = glpPrimitiveTypeToLLVMType(a1, PrimitiveType, a3);
      goto LABEL_25;
    case 1u:
      ElementCount = glpAggregateTypeGetElementCount((uint64_t)a2);
      v11 = ElementCount;
      if ((_DWORD)ElementCount)
      {
        v12 = 0;
        v13 = 1;
        do
        {
          ElementType = (_DWORD *)glpAggregateTypeGetElementType((uint64_t)a2, v12);
          ElementCount = glpTypeIsAtomic(ElementType);
          if ((_DWORD)ElementCount)
          {
            ElementCount = glpPrimitiveTypeGetPrimitiveType((uint64_t)ElementType);
            if ((ElementCount & 0xFFFFFFFE) == 0x40)
              v13 = 0;
          }
          else
          {
            v13 = 0;
          }
          ++v12;
        }
        while (v11 != v12);
        if (!v13)
          goto LABEL_24;
      }
      MEMORY[0x24BDAC7A8](ElementCount);
      v17 = (char *)v30 - v16;
      if (v15 >= 0x200)
        v18 = 512;
      else
        v18 = v15;
      bzero((char *)v30 - v16, v18);
      if (v11)
      {
        for (i = 0; i != v11; *(_QWORD *)&v17[8 * i++] = glpTypeToLLVMType(a1, v20, v22, a4))
        {
          v20 = glpAggregateTypeGetElementType((uint64_t)a2, i);
          ElementFlags = glpAggregateTypeGetElementFlags((uint64_t)a2, i);
          v22 = glpPrecisionIndexFromSAFlags(ElementFlags);
        }
      }
      v23 = LLVMStructTypeInContext();
      if (!a4)
        goto LABEL_23;
      goto LABEL_26;
    case 2u:
LABEL_24:
      v9 = glpLLVMGetAggregateType(a1, a2, a3, (uint64_t)a4);
LABEL_25:
      v23 = v9;
      if (a4)
      {
LABEL_26:
        v25 = (uint64_t *)a4[1];
        if (v25 && (v26 = glpLayoutObjectFind(v25, 34)) != 0)
        {
          v24 = a4[6];
          if (*((_DWORD *)v26 + 4) == 28)
          {
            if ((v24 & 0x1000000) == 0)
              return v23;
            goto LABEL_30;
          }
        }
        else
        {
          v24 = a4[6];
        }
      }
      else
      {
LABEL_23:
        v24 = 0;
      }
      v29 = v24 & 0xFFFFFFFFFEFFFFFFLL;
      a4[6] = v29;
      if ((v29 & 0x1000000) != 0)
      {
LABEL_30:
        *(_DWORD *)(a4[18] + 24) = glpPrimitiveTypeGetPrimitiveType((uint64_t)a2);
        v27 = glpLLVMGetNamedTypeInner();
        return MEMORY[0x22E316EC8](v27, 1);
      }
      return v23;
    default:
      abort();
  }
}

uint64_t glpLLVMGetAggregateType(_QWORD *a1, unsigned int *a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t ElementType;
  unsigned int v9;
  uint64_t v10;
  int VectorType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v16;
  unsigned int v17;

  v16 = a3;
  v17 = 1;
  v7 = glpLLVMGetMinCommonType(a2, (int *)&v17, &v16);
  if (glpTypeGetKind(a2) == 3)
  {
    glpBankTypeGetElementCount((uint64_t)a2);
    ElementType = glpBankTypeGetElementType((uint64_t)a2);
    v9 = glpABIGetTypeSize(0, ElementType, 0);
  }
  else
  {
    v9 = glpABIGetTypeSize(0, (uint64_t)a2, 0);
  }
  glpTypeSizeGetSize(v9);
  v10 = v17;
  VectorType = glpGetVectorType(v7, v17);
  v12 = *(_QWORD *)(a4 + 144);
  v13 = v16;
  *(_DWORD *)(v12 + 24) = VectorType;
  *(_DWORD *)(v12 + 28) = v13;
  v14 = glpPrimitiveTypeToLLVMType(a1, v7, v13);
  if (v10 >= 2)
    MEMORY[0x22E316F4C](v14, v10);
  return LLVMArrayType();
}

uint64_t glpLLVMBuildFunctionType(uint64_t a1, uint64_t a2, int a3, int a4, int a5, char a6)
{
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  __int16 v17;
  _BOOL4 v19;
  BOOL v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  size_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int v36;
  uint64_t v37;
  int v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t i;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  int v46;
  uint64_t v47;
  size_t v48;
  char *v49;
  size_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t PrimitiveType;
  uint64_t ScalarType;
  uint64_t v57;
  uint64_t *v58;
  uint64_t *v59;
  _BOOL4 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  _QWORD *v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  int v76;
  int v77;
  uint64_t v78;
  int v79;
  int v80;
  int v81;
  char *v82;
  uint64_t v83;

  v83 = *MEMORY[0x24BDAC8D0];
  v12 = LLVMVoidTypeInContext();
  v13 = v12;
  if ((a6 & 2) != 0)
  {
    v14 = *(_DWORD *)(a1 + 708);
    if ((a6 & 4) != 0)
      goto LABEL_3;
  }
  else
  {
    v14 = 0;
    if ((a6 & 4) != 0)
    {
LABEL_3:
      v15 = *(_DWORD *)(a1 + 724);
      goto LABEL_6;
    }
  }
  v15 = 0;
LABEL_6:
  v16 = a5 + a4;
  v17 = *(_WORD *)(a1 + 832);
  v19 = (v17 & 2) == 0 || v15 < 1;
  v20 = (v17 & 1) == 0;
  v21 = (v17 & 1) == 0 || v19;
  v80 = v21;
  v22 = !v20 && !v19;
  if ((a6 & 8) != 0)
    v23 = *(_DWORD *)(a1 + 596);
  else
    v23 = 0;
  v79 = a6 & 1;
  v81 = v23;
  v76 = v79 + v16 + v14 + v15 + v22;
  v24 = (v76 + 2 * v23);
  MEMORY[0x24BDAC7A8](v12);
  v27 = (char *)&v72 - v26;
  if (v25 >= 0x200)
    v28 = 512;
  else
    v28 = v25;
  bzero((char *)&v72 - v26, v28);
  v82 = v27;
  if (a3)
  {
    v77 = v16;
    v78 = v24;
    v30 = *(unsigned int *)(a1 + 676);
    if ((int)v30 >= 1)
    {
      v31 = 0;
      v32 = 0;
      v33 = 8 * v30;
      while (1)
      {
        v34 = *(_QWORD *)(*(_QWORD *)(a1 + 680) + v31);
        v35 = glpLayoutObjectFind(*(uint64_t **)(v34 + 8), 34);
        v29 = glpPrecisionIndexFromSAFlags(*(_QWORD *)(v34 + 48));
        v36 = *(_DWORD *)(a1 + 320);
        if ((v36 - 1) < 3)
          break;
        if (v36 == 4)
        {
          if (*((_DWORD *)v35 + 4) != 24)
            goto LABEL_36;
        }
        else if (!v36)
        {
          v38 = *((_DWORD *)v35 + 4);
          if ((v38 - 17) >= 2)
          {
            if (v38 != 28)
              goto LABEL_38;
            v29 = glpTypeToLLVMType((_QWORD *)a1, *(unsigned int **)v34, v29, (_QWORD *)v34);
            if ((*(_WORD *)(a1 + 832) & 1) == 0)
              v29 = MEMORY[0x22E316EC8](v29, 1);
          }
          else
          {
            if ((*(_WORD *)(a1 + 832) & 1) == 0)
              goto LABEL_38;
LABEL_36:
            v29 = glpTypeToLLVMType((_QWORD *)a1, *(unsigned int **)v34, v29, (_QWORD *)v34);
          }
LABEL_37:
          *(_QWORD *)&v27[8 * v32++] = v29;
        }
LABEL_38:
        v31 += 8;
        if (v33 == v31)
          goto LABEL_52;
      }
      v37 = *(_QWORD *)(v34 + 144);
      v29 = *(_QWORD *)v37;
      if ((*(_BYTE *)(v37 + 32) & 4) == 0)
        v29 = LLVMGetElementType();
      goto LABEL_37;
    }
    v32 = 0;
LABEL_52:
    if (*(_DWORD *)(a1 + 804))
      *(_QWORD *)&v27[8 * v32++] = *(_QWORD *)(a1 + 40);
    if (*(_DWORD *)(a1 + 812))
      *(_QWORD *)&v27[8 * v32++] = *(_QWORD *)(a1 + 40);
    v46 = *(_DWORD *)(a1 + 820);
    v75 = v13;
    if (v46)
      *(_QWORD *)&v27[8 * v32++] = *(_QWORD *)(a1 + 40);
    v74 = &v72;
    v47 = *(unsigned int *)(a1 + 692);
    v48 = 8 * v47;
    MEMORY[0x24BDAC7A8](v29);
    v49 = (char *)&v72 - ((8 * v47 + 15) & 0xFFFFFFFF0);
    if ((unint64_t)(8 * v47) >= 0x200)
      v50 = 512;
    else
      v50 = 8 * v47;
    bzero((char *)&v72 - ((v48 + 15) & 0xFFFFFFFF0), v50);
    v73 = v47;
    if ((int)v47 >= 1)
    {
      v51 = 0;
      do
      {
        v52 = *(_QWORD *)(*(_QWORD *)(a1 + 696) + v51);
        v53 = glpPrecisionIndexFromSAFlags(*(_QWORD *)(v52 + 48));
        switch(*(_DWORD *)(a1 + 320))
        {
          case 0:
          case 2:
            if ((*(_WORD *)(a1 + 832) & 1) == 0)
            {
              v54 = glpTypeToLLVMType((_QWORD *)a1, *(unsigned int **)v52, v53, (_QWORD *)v52);
              goto LABEL_81;
            }
            v58 = glpLayoutObjectFind(*(uint64_t **)(v52 + 8), 69);
            v59 = glpLayoutObjectFind(*(uint64_t **)(v52 + 8), 70);
            if (v59)
            {
              v60 = *((_DWORD *)v59 + 4) == 0;
              if (!v58)
                goto LABEL_79;
            }
            else
            {
              v60 = 1;
              if (!v58)
                goto LABEL_79;
            }
            if (*((_DWORD *)v58 + 4) != 5)
              v60 = 0;
            if (!v60)
              goto LABEL_79;
            v54 = glpPrimitiveTypeToLLVMType((_QWORD *)a1, 4, v53);
            goto LABEL_80;
          case 1:
          case 3:
            v54 = **(_QWORD **)(v52 + 144);
            goto LABEL_81;
          case 4:
            if (*((_DWORD *)glpLayoutObjectFind(*(uint64_t **)(v52 + 8), 68) + 4) != 4
              || (PrimitiveType = glpPrimitiveTypeGetPrimitiveType(*(_QWORD *)v52),
                  glpPrimitiveTypeGetCategory(PrimitiveType) == 2)
              && (int)glpPrimitiveVectorGetLength(PrimitiveType) > 3)
            {
LABEL_79:
              v54 = glpTypeToLLVMType((_QWORD *)a1, *(unsigned int **)v52, v53, (_QWORD *)v52);
            }
            else
            {
              ScalarType = glpPrimitiveTypeGetScalarType(PrimitiveType);
              v57 = glpPrimitiveTypeToLLVMType((_QWORD *)a1, ScalarType, v53);
              v54 = MEMORY[0x22E316F4C](v57, 4);
            }
LABEL_80:
            v27 = v82;
LABEL_81:
            *(_QWORD *)&v49[v51] = v54;
            break;
          default:
            break;
        }
        v51 += 8;
      }
      while (v48 != v51);
    }
    if ((*(_DWORD *)(a1 + 320) | 2) == 3)
    {
      memcpy(&v27[8 * v32], (char *)&v72 - ((v48 + 15) & 0xFFFFFFFF0), v48);
      v61 = 0;
      v16 = v77;
    }
    else
    {
      v16 = v77;
      if ((_DWORD)v73)
        v61 = LLVMStructTypeInContext();
      else
        v61 = 0;
    }
    *(_QWORD *)(a1 + 200) = v61;
  }
  else
  {
    v39 = *(unsigned int *)(a2 + 32);
    if ((_DWORD)v39)
    {
      v77 = v16;
      v78 = v24;
      v40 = 0;
      for (i = 0; i < v39; ++i)
      {
        v42 = *(_QWORD *)(a2 + 40);
        v43 = *(_QWORD *)(v42 + v40);
        if (v43)
        {
          v44 = *(_QWORD *)(v42 + v40 + 8);
          v45 = *(_QWORD **)(v44 + 144);
          if (!v45)
          {
            glpLLVMAllocVariableExtra(*(_QWORD *)(a1 + 152), v44);
            glpLLVMCGGlobalVariable(a1, v44);
            v45 = *(_QWORD **)(v44 + 144);
            v39 = *(unsigned int *)(a2 + 32);
          }
          *(_QWORD *)&v82[((v43 << 32) - 0x100000000) >> 29] = *v45;
        }
        v40 += 24;
      }
      v27 = v82;
      v16 = v77;
    }
  }
  v62 = LLVMFloatTypeInContext();
  v63 = MEMORY[0x22E316F4C](v62, 4);
  v64 = v63;
  if (v79)
    *(_QWORD *)&v27[8 * v16++] = MEMORY[0x22E316EC8](v63, 2);
  if (v14 >= 1)
  {
    v65 = &v27[8 * v16];
    v16 += v14;
    do
    {
      *(_QWORD *)v65 = MEMORY[0x22E316EC8](v64, 2);
      v65 += 8;
      --v14;
    }
    while (v14);
  }
  if (v15 >= 1)
  {
    v66 = &v27[8 * v16];
    v16 += v15;
    do
    {
      *(_QWORD *)v66 = MEMORY[0x22E316EC8](v64, 1);
      v66 += 8;
      --v15;
    }
    while (v15);
  }
  if ((v80 & 1) == 0)
    *(_QWORD *)&v27[8 * v16] = MEMORY[0x22E316EC8](*(_QWORD *)(a1 + 40), 1);
  if (v81 >= 1)
  {
    v67 = v81;
    v68 = &v27[8 * v81 + 8 * v76];
    v69 = &v27[8 * v76];
    v70 = (_QWORD *)(*(_QWORD *)(a1 + 600) + 24);
    do
    {
      *(_QWORD *)v69 = *v70;
      v69 += 8;
      *(_QWORD *)v68 = *(v70 - 1);
      v68 += 8;
      v70 += 6;
      --v67;
    }
    while (v67);
  }
  return LLVMFunctionType();
}

uint64_t glpMetalGetArgTypeNameFromASTType(char *a1, unsigned int *a2, int a3, int a4)
{
  uint64_t result;
  uint64_t PrimitiveType;
  int ElementType;
  int ColumnType;

  result = glpTypeGetKind(a2);
  if (!(_DWORD)result)
  {
    PrimitiveType = glpPrimitiveTypeGetPrimitiveType((uint64_t)a2);
    result = glpPrimitiveTypeGetCategory(PrimitiveType);
    switch((int)result)
    {
      case 0:
        result = snprintf_l(a1, 0x200uLL, 0, "void");
        break;
      case 1:
        glpScalarTypeGetMetalArgType(PrimitiveType, a3, a4);
        result = snprintf_l(a1, 0x200uLL, 0, "%s");
        break;
      case 2:
        glpPrimitiveVectorGetLength(PrimitiveType);
        ElementType = glpPrimitiveVectorGetElementType(PrimitiveType);
        glpScalarTypeGetMetalArgType(ElementType, a3, 0);
        result = snprintf_l(a1, 0x200uLL, 0, "%s%u");
        break;
      case 3:
        ColumnType = glpPrimitiveMatrixGetColumnType(PrimitiveType);
        glpPrimitiveMatrixGetColumns(PrimitiveType);
        glpPrimitiveMatrixGetRows(PrimitiveType);
        glpScalarTypeGetMetalArgType(ColumnType, a3, 0);
        result = snprintf_l(a1, 0x200uLL, 0, "%s%ux%u");
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t glpLLVMVertexGeometryMetadata(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v18;
  uint64_t v19;
  const char *v20;
  const char *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  unsigned int v27;
  uint64_t *v28;
  _BOOL4 v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int *ElementType;
  unsigned int Vec4s;
  char __str[16];
  __int128 v35;
  _OWORD v36[4];
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v6 = glpLayoutObjectFind(*(uint64_t **)(a2 + 8), 68);
  memset(v36, 0, sizeof(v36));
  if ((*(_DWORD *)(a1 + 320) | 2) == 3)
  {
    if (a3 > 7)
    {
      v8 = LLVMConstInt();
    }
    else
    {
      v7 = a1 + 8 * a3;
      v8 = *(_QWORD *)(v7 + 520);
      if (!v8)
      {
        v9 = (uint64_t *)(v7 + 520);
        v8 = LLVMConstInt();
        *v9 = v8;
      }
    }
    *(_QWORD *)&v36[0] = v8;
    *((_QWORD *)&v36[0] + 1) = LLVMMDStringInContext();
    v10 = 2;
  }
  else
  {
    v10 = 0;
  }
  switch(*((_DWORD *)v6 + 4))
  {
    case 1:
    case 3:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0x10:
      goto LABEL_15;
    case 4:
      glpLayoutObjectFind(*(uint64_t **)(a2 + 8), 71);
      v11 = v10;
      goto LABEL_29;
    case 5:
      glpLayoutObjectFind(*(uint64_t **)(a2 + 8), 74);
      v11 = v10;
LABEL_29:
      *((_QWORD *)v36 + v11) = LLVMMDStringInContext();
      break;
    case 9:
      *(_QWORD *)(a1 + 744) |= 4uLL;
LABEL_15:
      *((_QWORD *)v36 + v10) = LLVMMDStringInContext();
      break;
    case 0xA:
      v12 = glpLayoutObjectFind(*(uint64_t **)(a2 + 8), 75);
      *((_QWORD *)v36 + v10) = LLVMMDStringInContext();
      v13 = *((unsigned int *)v12 + 4);
      if (v13 > 7)
      {
        v15 = LLVMConstInt();
      }
      else
      {
        v14 = a1 + 8 * v13;
        v15 = *(_QWORD *)(v14 + 520);
        if (!v15)
        {
          v16 = (uint64_t *)(v14 + 520);
          v15 = LLVMConstInt();
          *v16 = v15;
        }
      }
      *((_QWORD *)v36 + (v10 | 1)) = v15;
      break;
    case 0x11:
      v18 = glpLayoutObjectFind(*(uint64_t **)(a2 + 8), 69);
      v19 = *(_QWORD *)(a2 + 48);
      v20 = "air.no_perspective";
      if ((v19 & 0x2000000000) == 0)
        v20 = "air.perspective";
      if ((v19 & 0x1000000000) != 0)
        v21 = "air.flat";
      else
        v21 = v20;
      v22 = "air.center";
      if ((v19 & 0x1000000000) == 0)
      {
        if ((v19 & 0x4000000000) != 0)
        {
          v22 = "air.centroid";
        }
        else if ((v19 & 0x40000000000) != 0)
        {
          v22 = "air.sample";
        }
      }
      if ((*(_DWORD *)(a1 + 320) | 2) == 2)
      {
        *((_QWORD *)v36 + v10) = LLVMMDStringInContext();
        v10 |= 1u;
      }
      if ((*(_WORD *)(a1 + 832) & 1) != 0)
      {
        *(_OWORD *)__str = 0u;
        v35 = 0u;
        v27 = *((_DWORD *)v18 + 4);
        v28 = glpLayoutObjectFind(*(uint64_t **)(a2 + 8), 70);
        if (v28)
          v29 = *((_DWORD *)v28 + 4) == 0;
        else
          v29 = 1;
        if (v29 && v27 >= 8 && v27 <= 0xF)
        {
          snprintf(__str, 0x1FuLL, "user(tex_coord%u)");
        }
        else if ((*(_BYTE *)(a2 + 53) & 2) != 0)
        {
          snprintf(__str, 0x1FuLL, "user(patch%u)");
        }
        else
        {
          snprintf(__str, 0x1FuLL, "user(slot%u)");
        }
        strlen(__str);
        v31 = v10 + 1;
        *((_QWORD *)v36 + v10) = LLVMMDStringInContext();
        if (*(_DWORD *)(a1 + 320) == 1)
        {
          ElementType = *(unsigned int **)a2;
          if (glpTypeGetKind(ElementType) == 3)
            ElementType = (unsigned int *)glpBankTypeGetElementType((uint64_t)ElementType);
          *((_QWORD *)v36 + v31) = glpLLVMStringMetadata(a1, "air.vec4_size");
          Vec4s = glpTypeGetVec4s((uint64_t)ElementType);
          *((_QWORD *)&v36[1] + v10) = glpGetConstantInt32(a1, Vec4s);
          v31 = v10 + 3;
        }
        v30 = v31;
      }
      else
      {
        *((_QWORD *)v36 + v10) = LLVMMDStringInContext();
        v23 = *((unsigned int *)v18 + 4);
        if (v23 > 7)
        {
          v25 = LLVMConstInt();
        }
        else
        {
          v24 = a1 + 8 * v23;
          v25 = *(_QWORD *)(v24 + 520);
          if (!v25)
          {
            v26 = (uint64_t *)(v24 + 520);
            v25 = LLVMConstInt();
            *v26 = v25;
          }
        }
        *((_QWORD *)v36 + v10 + 1) = v25;
        v30 = v10 + 2;
      }
      if ((*(_DWORD *)(a1 + 320) | 2) != 2 || (*(_WORD *)(a1 + 832) & 1) == 0)
      {
        strlen(v21);
        *((_QWORD *)v36 + v30) = LLVMMDStringInContext();
        strlen(v22);
        *((_QWORD *)v36 + v30 + 1) = LLVMMDStringInContext();
      }
      break;
    default:
      return LLVMMDNodeInContext();
  }
  return LLVMMDNodeInContext();
}

const char *glpScalarTypeGetMetalArgType(int a1, int a2, int a3)
{
  BOOL v3;
  int v4;
  unsigned int v6;
  const char *v7;
  const char *v8;

  if (a3)
    v3 = a1 == 5;
  else
    v3 = 0;
  if (v3)
    v4 = 36;
  else
    v4 = a1;
  if (v4 <= 8)
  {
    if (v4 == 1)
    {
      v6 = a2 - 1;
      v7 = "float";
      v8 = "half";
    }
    else
    {
      if (v4 != 5)
        goto LABEL_21;
      v6 = a2 - 1;
      v7 = "int";
      v8 = "short";
    }
  }
  else
  {
    if (v4 == 9)
      return "BOOL";
    if (v4 != 36)
    {
      if (v4 == 62)
        return "double";
LABEL_21:
      abort();
    }
    v6 = a2 - 1;
    v7 = "uint";
    v8 = "ushort";
  }
  if (v6 >= 2)
    return v7;
  else
    return v8;
}

uint64_t glpLLVMCGDeclareVariable(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t result;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  if ((*(_WORD *)(a2 + 52) & 0x980) != 0)
    *(_WORD *)(a1 + 326) = 1;
  v4 = *(uint64_t **)(a2 + 144);
  if (!v4 || (result = *v4) == 0)
  {
    glpLLVMAllocVariableExtra(*(_QWORD *)(a1 + 152), a2);
    v6 = *(uint64_t **)(a2 + 8);
    if ((!v6 || !glpLayoutObjectFind(v6, 28)) && *(_DWORD *)(a2 + 128))
    {
      v7 = *(_QWORD *)(a2 + 48);
      if ((v7 & 0x80000000) == 0)
      {
        v8 = glpPrecisionIndexFromSAFlags(v7);
        glpTypeToLLVMType((_QWORD *)a1, *(unsigned int **)a2, v8, (_QWORD *)a2);
        result = glpBuildAlloca();
        **(_QWORD **)(a2 + 144) = result;
        return result;
      }
      if ((v7 & 0x100000000) != 0)
      {
        result = 0;
        **(_QWORD **)(a2 + 144) = 0;
        return result;
      }
      glpLLVMCGGlobalVariable(a1, a2);
    }
    return 0;
  }
  return result;
}

uint64_t glpIsSimpleComponentAssigment(uint64_t a1, unsigned int ***a2, uint64_t **a3, int *a4, int *a5)
{
  unsigned int **v9;
  uint64_t result;
  uint64_t Rhs;
  unsigned int **VariableExtra;
  uint64_t *v13;
  unsigned int PrimitiveType;
  uint64_t v15;
  unsigned int **v16;

  v9 = *a2;
  v15 = 0;
  v16 = v9;
  result = glpIsComponentAssigment(a1, &v16, (_DWORD *)&v15 + 1, &v15, a4, 1);
  if ((_DWORD)result)
  {
    Rhs = glpBinaryOperatorNodeGetRhs(a1);
    if (glpASTNodeGetKind(Rhs) == 81)
    {
      VariableExtra = (unsigned int **)glpLValueNodeGetVariableExtra(Rhs);
      v13 = (uint64_t *)VariableExtra;
      if (*a3)
      {
        if (*a3 == (uint64_t *)VariableExtra)
        {
LABEL_8:
          result = glpGetVectorSwizzle(Rhs, a5);
          if ((_DWORD)result)
          {
            *a2 = v16;
            *a3 = v13;
            return 1;
          }
          return result;
        }
      }
      else if (!glpTypeGetKind(*VariableExtra))
      {
        PrimitiveType = glpPrimitiveTypeGetPrimitiveType(*v13);
        if (glpPrimitiveTypeGetCategory(PrimitiveType) == 2)
          goto LABEL_8;
      }
    }
    return 0;
  }
  return result;
}

uint64_t glpLLVMSharedRawCall(uint64_t a1, char a2, uint64_t a3, unint64_t *a4, int a5)
{
  int v5;
  int v8;
  int v9;
  int v10;
  __int16 v11;
  _BOOL4 v13;
  int v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  size_t v20;
  int v21;
  uint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  _BYTE v38[4];
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v5 = a5;
  v41 = a3;
  v42 = *MEMORY[0x24BDAC8D0];
  if ((a2 & 2) != 0)
  {
    v8 = *(_DWORD *)(a1 + 708);
    if ((a2 & 4) != 0)
      goto LABEL_3;
  }
  else
  {
    v8 = 0;
    if ((a2 & 4) != 0)
    {
LABEL_3:
      v9 = *(_DWORD *)(a1 + 724);
      goto LABEL_6;
    }
  }
  v9 = 0;
LABEL_6:
  v10 = a2 & 1;
  v11 = *(_WORD *)(a1 + 832);
  v13 = (v11 & 2) == 0 || v9 < 1;
  v14 = (v11 & 1) == 0 || v13;
  if ((a2 & 8) != 0)
    v15 = *(unsigned int *)(a1 + 596);
  else
    v15 = 0;
  v16 = v10 + a5 + v8 + v9 + 2 * v15;
  MEMORY[0x24BDAC7A8](a1);
  v19 = (uint64_t *)&v38[-v18];
  if (v17 >= 0x200)
    v20 = 512;
  else
    v20 = v17;
  bzero(&v38[-v18], v20);
  if (v5 < 1)
  {
    v5 = 0;
    if (v10)
LABEL_25:
      v19[v5++] = *(_QWORD *)(a1 + 440);
  }
  else
  {
    v39 = v14;
    v40 = v15;
    v21 = v10 + v5 + v8 + v9 + 2 * v15;
    v22 = v5;
    v23 = v19;
    do
    {
      v24 = *a4++;
      *v23++ = glpLLVMGetVariablePointer(a1, v24);
      --v22;
    }
    while (v22);
    v16 = v21;
    LODWORD(v15) = v40;
    LOBYTE(v14) = v39;
    if (v10)
      goto LABEL_25;
  }
  if (v8 >= 1)
  {
    v25 = *(uint64_t **)(a1 + 712);
    v26 = &v19[v5];
    v5 += v8;
    v27 = v8;
    do
    {
      v28 = *v25++;
      *v26++ = *(_QWORD *)(v28 + 8);
      --v27;
    }
    while (v27);
  }
  if (v9 >= 1)
  {
    v29 = *(uint64_t **)(a1 + 728);
    v30 = &v19[v5];
    v5 += v9;
    v31 = v9;
    do
    {
      v32 = *v29++;
      *v30++ = *(_QWORD *)(v32 + 16);
      --v31;
    }
    while (v31);
  }
  if ((v14 & 1) == 0)
    v19[v5++] = *(_QWORD *)(a1 + 448);
  if ((int)v15 >= 1)
  {
    v33 = 0;
    v34 = &v19[v5];
    v35 = (uint64_t *)(*(_QWORD *)(a1 + 600) + 8);
    do
    {
      v34[v33] = *(v35 - 1);
      v36 = *v35;
      v35 += 6;
      v34[v15 + v33++] = v36;
    }
    while (v15 != v33);
  }
  return glpLLVMBuildFunctionCallInner(a1, *(_QWORD *)(a1 + 160), v41, v19, v16);
}

uint64_t glpLLVMReadUniform(_QWORD *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  int ScalarType;
  uint64_t v10;
  uint64_t Length;
  uint64_t v12;
  uint64_t v13;

  ScalarType = glpPrimitiveTypeGetScalarType(a4);
  if (ScalarType == 9)
  {
    v10 = a1[5];
    if (glpPrimitiveTypeGetCategory(a4) != 2)
      goto LABEL_11;
    Length = glpPrimitiveVectorGetLength(a4);
    v12 = MEMORY[0x22E316F4C](v10, Length);
LABEL_10:
    v10 = v12;
LABEL_11:
    MEMORY[0x22E316EC8](v10, 2);
    LLVMBuildPointerCast();
    LLVMBuildLoad();
    glpPrimitiveTypeToLLVMType(a1, a4, a5);
    if (ScalarType == 9)
    {
      MEMORY[0x22E316D18](v10);
      return LLVMBuildICmp();
    }
    else if (ScalarType == 1)
    {
      return LLVMBuildFPCast();
    }
    else
    {
      return LLVMBuildIntCast();
    }
  }
  if ((_DWORD)a5 != 3 && (_DWORD)a5)
  {
    v12 = glpPrimitiveTypeToLLVMType(a1, a4, 3);
    goto LABEL_10;
  }
  if (a3 != (_DWORD)a4)
  {
    v13 = glpPrimitiveTypeToLLVMType(a1, a4, a5);
    MEMORY[0x22E316EC8](v13, 2);
    LLVMBuildPointerCast();
  }
  return LLVMBuildLoad();
}

uint64_t glpLLVMCGWriteVertexOuptut(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  _BOOL4 v10;
  uint64_t v11;

  if ((~*(unsigned __int16 *)(result + 832) & 3) != 0)
  {
    v3 = result;
    if (!*(_QWORD *)(result + 208))
      *(_QWORD *)(result + 208) = MEMORY[0x22E316E2C](*(_QWORD *)(result + 200));
    v4 = *(unsigned int *)(v3 + 692);
    if ((int)v4 >= 1)
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)(*(_QWORD *)(v3 + 696) + 8 * i) == a2)
          break;
      }
    }
    glpLLVMGetVariablePointer(v3, a2);
    v6 = glpPrecisionIndexFromSAFlags(*(_QWORD *)(a2 + 48));
    v7 = glpTypeToLLVMType((_QWORD *)v3, *(unsigned int **)a2, v6, (_QWORD *)a2);
    MEMORY[0x22E316EC8](v7, 0);
    LLVMBuildPointerCast();
    LLVMBuildLoad();
    if ((*(_WORD *)(v3 + 832) & 1) == 0)
      goto LABEL_18;
    v8 = glpLayoutObjectFind(*(uint64_t **)(a2 + 8), 69);
    v9 = glpLayoutObjectFind(*(uint64_t **)(a2 + 8), 70);
    if (v9)
    {
      v10 = *((_DWORD *)v9 + 4) == 0;
      if (!v8)
        goto LABEL_18;
    }
    else
    {
      v10 = 1;
      if (!v8)
      {
LABEL_18:
        result = LLVMBuildInsertValue();
        *(_QWORD *)(v3 + 208) = result;
        return result;
      }
    }
    if (*((_DWORD *)v8 + 4) == 5 && v10)
    {
      v11 = MEMORY[0x22E316F4C](v7, 4);
      MEMORY[0x22E316E2C](v11);
      if (!*(_QWORD *)(v3 + 520))
        *(_QWORD *)(v3 + 520) = LLVMConstInt();
      LLVMBuildInsertElement();
    }
    goto LABEL_18;
  }
  return result;
}

void _glpSetCrashLogMessage(uint64_t a1)
{
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_FAULT))
    _glpSetCrashLogMessage_cold_1(a1);
}

void glpSetCrashLogMessagef(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  os_unfair_lock_lock(&message_lock);
  vsnprintf_l(message, 0x400uLL, 0, a1, &a9);
  os_unfair_lock_unlock(&message_lock);
  _glpSetCrashLogMessage((uint64_t)message);
}

uint64_t glpMangleNameLLVM(int a1, char *a2, size_t a3, char *__s, uint64_t a5, uint64_t *a6, unsigned int *a7, int a8)
{
  uint64_t v8;
  int v14;
  uint64_t result;
  unsigned int v16;
  unsigned int *v17;
  uint64_t v18;
  _OWORD v19[15];
  uint64_t v20;

  LODWORD(v8) = a8;
  v14 = strlen(__s);
  result = snprintf_l(a2, a3, 0, "_Z%d%s", v14, __s);
  v20 = 0;
  memset(v19, 0, sizeof(v19));
  if ((_DWORD)v8)
  {
    v16 = result;
    v8 = v8;
    v17 = a7;
    do
    {
      if (a7)
      {
        v18 = *v17;
        if ((v16 & 0x80000000) == 0)
          goto LABEL_7;
      }
      else
      {
        v18 = 0;
        if ((v16 & 0x80000000) == 0)
        {
LABEL_7:
          if (a3 > v16)
          {
            result = glpMangleTypeName(&a2[v16], a3 - v16, *a6, v18, (int *)v19);
            v16 += result & ~((int)result >> 31);
          }
        }
      }
      ++a6;
      ++v17;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t glpMangleTypeName(char *a1, size_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  int v10;
  uint64_t result;
  const char *v12;
  int v13;
  uint64_t v14;
  const char *v15;
  const char *v16;
  uint64_t v17;
  uint64_t *v18;
  unsigned int v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  int v27;

  v10 = LLVMGetTypeKind();
  result = 0xFFFFFFFFLL;
  switch(v10)
  {
    case 0:
      v12 = "v";
      return snprintf_l(a1, a2, 0, v12);
    case 1:
      v12 = "h";
      return snprintf_l(a1, a2, 0, v12);
    case 2:
      v12 = "f";
      return snprintf_l(a1, a2, 0, v12);
    case 8:
      v13 = LLVMGetIntTypeWidth();
      if (v13 == 16)
      {
        if ((_DWORD)a4 == 2)
          v12 = "t";
        else
          v12 = "s";
      }
      else if (v13 == 1)
      {
        v12 = "b";
      }
      else if ((_DWORD)a4 == 2)
      {
        v12 = "j";
      }
      else
      {
        v12 = "i";
      }
      return snprintf_l(a1, a2, 0, v12);
    case 10:
      v14 = LLVMGetStructName();
      v15 = (const char *)glpOpaqueTypeMangling[0];
      if (!glpOpaqueTypeMangling[0])
        return 0xFFFFFFFFLL;
      v16 = (const char *)v14;
      v17 = 0;
      while (strcmp(v16, v15))
      {
        v18 = &glpOpaqueTypeMangling[v17];
        v17 += 2;
        v15 = (const char *)v18[2];
        if (!v15)
          return 0xFFFFFFFFLL;
      }
      return snprintf_l(a1, a2, 0, "%s");
    case 12:
      v19 = snprintf_l(a1, a2, 0, "P");
      goto LABEL_37;
    case 13:
      if (LLVMGetTypeKind() != 13)
        goto LABEL_33;
      LLVMGetElementType();
      v20 = LLVMGetTypeKind();
      v21 = LLVMGetVectorSize();
      LODWORD(v22) = *a5;
      if (*a5 < 1)
        goto LABEL_35;
      v23 = v21;
      v24 = 0;
      break;
    default:
      return result;
  }
  while (1)
  {
    LLVMGetElementType();
    if (v20 == LLVMGetTypeKind()
      && v23 == LLVMGetVectorSize()
      && a5[v24 + 42] == (_DWORD)a4)
    {
      break;
    }
    ++v24;
    v22 = *a5;
    if (v24 >= v22)
      goto LABEL_34;
  }
  if ((v24 & 0x80000000) == 0)
  {
    if ((_DWORD)v24)
      return snprintf_l(a1, a2, 0, "S%d_");
    v12 = "S_";
    return snprintf_l(a1, a2, 0, v12);
  }
LABEL_33:
  LODWORD(v22) = *a5;
LABEL_34:
  if ((int)v22 <= 19)
  {
LABEL_35:
    *(_QWORD *)&a5[2 * (int)v22 + 2] = a3;
    a5[(int)v22 + 42] = a4;
    ++*a5;
  }
  LLVMGetVectorSize();
  v19 = snprintf_l(a1, a2, 0, "Dv%d_");
LABEL_37:
  if ((v19 & 0x80000000) != 0)
    return 0xFFFFFFFFLL;
  v25 = v19;
  if (a2 <= v19)
    return 0xFFFFFFFFLL;
  v26 = LLVMGetElementType();
  v27 = glpMangleTypeName(&a1[v25], a2 - v25, v26, a4, a5);
  if (v27 < 0)
    return 0xFFFFFFFFLL;
  else
    return v27 + v25;
}

uint64_t glpLLVMGetNamedTypeInner()
{
  uint64_t result;

  result = LLVMGetTypeByName();
  if (!result)
    return LLVMStructCreateNamed();
  return result;
}

uint64_t glpLLVMEmitBranchInnerReal()
{
  uint64_t inserted;

  inserted = LLVMGetInsertBlock();
  if (inserted && !glpLLVMBasicBlockGetTerminator(inserted))
  {
    LLVMSetCurrentDebugLocation();
    LLVMBuildBr();
  }
  return LLVMClearInsertionPosition();
}

uint64_t glpLLVMPackVectorInner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t inserted;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  int v14;
  int v15;
  uint64_t v16;
  unsigned int v18;
  uint64_t v19;

  v6 = LLVMTypeOf();
  if (LLVMGetTypeKind() == 13)
    v7 = LLVMGetVectorSize();
  else
    v7 = 1;
  if (LLVMGetTypeKind() == 13)
    v8 = LLVMGetVectorSize();
  else
    v8 = 1;
  if (v7 == (_DWORD)v8)
  {
    inserted = a2;
  }
  else
  {
    v10 = LLVMGetTypeKind();
    v11 = v6;
    if (v10 == 13)
      v11 = LLVMGetElementType();
    v12 = MEMORY[0x22E316F4C](v11, v8);
    inserted = MEMORY[0x22E316E2C](v12);
    if (v7 == 1)
    {
      LLVMConstInt();
      inserted = LLVMBuildInsertElement();
    }
    else if (v7 >= 1)
    {
      for (i = 0; i != v7; ++i)
      {
        LLVMConstInt();
        LLVMBuildExtractElement();
        inserted = LLVMBuildInsertElement();
      }
    }
  }
  if (LLVMTypeOf() == a3)
    return inserted;
  if (LLVMGetTypeKind() == 13)
    LLVMGetElementType();
  v14 = LLVMGetTypeKind();
  if (LLVMGetTypeKind() == 13)
    LLVMGetElementType();
  v15 = LLVMGetTypeKind();
  switch(v14)
  {
    case 1:
      if (v15 == 2)
        return LLVMBuildFPCast();
      if (LLVMGetTypeKind() == 13)
        LLVMGetElementType();
      v18 = LLVMGetIntTypeWidth();
      v19 = LLVMInt16TypeInContext();
      if ((_DWORD)v8 != 1)
        MEMORY[0x22E316F4C](v19, v8);
      inserted = LLVMBuildBitCast();
      if (v18 < 0x11)
        return inserted;
      break;
    case 8:
      if (v15 == 1)
      {
        v16 = LLVMInt16TypeInContext();
        goto LABEL_37;
      }
      if (v15 == 2)
      {
        v16 = *(_QWORD *)(a1 + 40);
LABEL_37:
        if ((_DWORD)v8 != 1)
          MEMORY[0x22E316F4C](v16, v8);
        LLVMBuildIntCast();
        return LLVMBuildBitCast();
      }
      break;
    case 2:
      return LLVMBuildBitCast();
    default:
      return inserted;
  }
  return LLVMBuildIntCast();
}

uint64_t glpLLVMAddFunctionAttrInner(uint64_t a1, uint64_t a2, int a3)
{
  const char *v3;
  size_t v4;

  v3 = glpLLVMConvertAttribute_functionAttribStrings[a3];
  v4 = strlen(v3);
  MEMORY[0x22E316DC0](v3, v4);
  LLVMCreateEnumAttribute();
  return LLVMAddAttributeAtIndex();
}

uint64_t glpLLVMUnpackTypeInner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t Element;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v6 = LLVMTypeOf();
  if (LLVMGetTypeKind() == 13)
  {
    v7 = LLVMGetVectorSize();
    if (LLVMGetTypeKind() != 13)
    {
      if (v7 > 1)
      {
LABEL_14:
        LLVMConstInt();
        Element = LLVMBuildExtractElement();
        goto LABEL_15;
      }
      goto LABEL_13;
    }
  }
  else
  {
    if (LLVMGetTypeKind() != 13)
      goto LABEL_13;
    v7 = 1;
  }
  v8 = LLVMGetVectorSize();
  if ((int)v8 >= v7)
    goto LABEL_13;
  v9 = v8;
  if ((_DWORD)v8 == 1)
    goto LABEL_14;
  v10 = LLVMGetTypeKind();
  v11 = v6;
  if (v10 == 13)
    v11 = LLVMGetElementType();
  MEMORY[0x22E316F4C](v11, v9);
  if (LLVMGetTypeKind() != 13)
    goto LABEL_14;
  LLVMTypeOf();
  v12 = LLVMGetVectorSize();
  v13 = LLVMGetVectorSize();
  if (v12 == (_DWORD)v13)
  {
LABEL_13:
    Element = a2;
    goto LABEL_15;
  }
  v24 = v13;
  v25 = LLVMGetElementType();
  v26 = MEMORY[0x22E316F4C](v25, v24);
  Element = MEMORY[0x22E316E2C](v26);
  if ((int)v24 >= 1)
  {
    v27 = 0;
    do
    {
      LLVMConstInt();
      LLVMBuildExtractElement();
      LLVMConstInt();
      Element = LLVMBuildInsertElement();
      ++v27;
    }
    while (v24 != v27);
  }
LABEL_15:
  LLVMTypeOf();
  if (LLVMGetTypeKind() == 13)
    v15 = LLVMGetVectorSize();
  else
    v15 = 1;
  v16 = v6;
  if (LLVMGetTypeKind() == 13)
    v16 = LLVMGetElementType();
  v17 = a3;
  if (LLVMGetTypeKind() == 13)
    v17 = LLVMGetElementType();
  if (v16 == v17)
    return Element;
  v18 = LLVMGetTypeKind();
  v19 = LLVMGetTypeKind();
  if (v19 == 1)
  {
    if (v18 == 2)
      return LLVMBuildFPCast();
    if (LLVMGetTypeKind() == 13)
      LLVMGetElementType();
    v22 = LLVMGetIntTypeWidth();
    v23 = LLVMInt16TypeInContext();
    if (v22 >= 0x11)
    {
      if ((_DWORD)v15 != 1)
        MEMORY[0x22E316F4C](v23, v15);
      LLVMBuildTrunc();
    }
    return LLVMBuildBitCast();
  }
  if (v19 != 8)
  {
    if (v19 != 2)
      return Element;
    return LLVMBuildBitCast();
  }
  if (v18 == 1)
  {
    v21 = LLVMInt16TypeInContext();
    goto LABEL_40;
  }
  if (v18 == 2)
  {
    v21 = *(_QWORD *)(a1 + 40);
LABEL_40:
    if ((_DWORD)v15 != 1)
      MEMORY[0x22E316F4C](v21, v15);
    LLVMBuildBitCast();
  }
  return LLVMBuildIntCast();
}

uint64_t glpLLVMSetCurrentLineInner()
{
  glpLLVMGetDebugLocation();
  return LLVMSetCurrentDebugLocation();
}

uint64_t glpLLVMClearCurrentLineInner()
{
  return LLVMSetCurrentDebugLocation();
}

uint64_t glpLLVMCallFunctionInner(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, int *a6, unsigned int a7, uint64_t a8)
{
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  size_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _BYTE v23[12];
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;

  v25 = a8;
  v24 = a7;
  v26 = *MEMORY[0x24BDAC8D0];
  MEMORY[0x24BDAC7A8](a1);
  v14 = (uint64_t *)&v23[-v13];
  if (v12 >= 0x200)
    v15 = 512;
  else
    v15 = v12;
  bzero(&v23[-v13], v15);
  if (a5)
  {
    v16 = a5;
    v17 = v14;
    v18 = a4;
    do
    {
      v18 += 8;
      *v17++ = LLVMTypeOf();
      --v16;
    }
    while (v16);
  }
  if (!LLVMGetNamedFunction())
  {
    LLVMFunctionType();
    v19 = LLVMAddFunction();
    if (v24)
    {
      v20 = v24;
      do
      {
        v21 = *a6++;
        glpLLVMAddFunctionAttrInner(a1, v19, v21);
        --v20;
      }
      while (v20);
    }
  }
  return LLVMBuildCall();
}

uint64_t glpLLVMBuildFunctionCallInner(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, int a5)
{
  uint64_t v7;
  int v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  size_t v13;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  _QWORD v19[2];

  v19[1] = *MEMORY[0x24BDAC8D0];
  LLVMTypeOf();
  LLVMGetElementType();
  LLVMCountParamTypes();
  LLVMTypeOf();
  LLVMGetElementType();
  v7 = LLVMCountParamTypes();
  v8 = v7;
  v9 = v7 - a5;
  MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)v19 - v11;
  if (v10 >= 0x200)
    v13 = 512;
  else
    v13 = v10;
  bzero((char *)v19 - v11, v13);
  if (a5 < 1)
  {
    v14 = 0;
  }
  else
  {
    v14 = a5;
    memcpy(v12, a4, 8 * a5);
  }
  if (v9 >= 1)
  {
    v15 = (uint64_t *)&v12[8 * v14];
    v16 = a5 - v8;
    do
      *v15++ = LLVMGetParam();
    while (!__CFADD__(v16++, 1));
  }
  return LLVMBuildCall();
}

uint64_t glpLLVMXXXXTypeInContext(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v4;

  switch(a2)
  {
    case 0:
      result = LLVMInt64TypeInContext();
      break;
    case 1:
      result = LLVMInt32TypeInContext();
      break;
    case 2:
      result = LLVMInt16TypeInContext();
      break;
    case 3:
      result = LLVMInt8TypeInContext();
      break;
    case 4:
      result = LLVMInt1TypeInContext();
      break;
    case 5:
      result = LLVMFloatTypeInContext();
      break;
    case 6:
      result = LLVMHalfTypeInContext();
      break;
    case 7:
      result = LLVMVoidTypeInContext();
      break;
    case 8:
      result = LLVMDoubleTypeInContext();
      break;
    default:
      abort();
  }
  v4 = *(unsigned int *)(a1 + 380);
  *(_DWORD *)(a1 + 380) = v4 + 1;
  *(_QWORD *)(*(_QWORD *)(a1 + 400) + 8 * v4) = result;
  return result;
}

uint64_t glpLLVMVectorType(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v2 = glpDeserializeLLVMType(a1);
  v3 = glpDeserializeuint32(a1);
  result = MEMORY[0x22E316F4C](v2, v3);
  v5 = *(unsigned int *)(a1 + 380);
  *(_DWORD *)(a1 + 380) = v5 + 1;
  *(_QWORD *)(*(_QWORD *)(a1 + 400) + 8 * v5) = result;
  return result;
}

uint64_t glpLLVMPointerType(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v2 = glpDeserializeLLVMType(a1);
  v3 = glpDeserializeuint32(a1);
  v4 = *(unsigned int *)(a1 + 380);
  *(_DWORD *)(a1 + 380) = v4 + 1;
  result = MEMORY[0x22E316EC8](v2, v3);
  *(_QWORD *)(*(_QWORD *)(a1 + 400) + 8 * v4) = result;
  return result;
}

uint64_t glpLLVMFunctionType(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  size_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  _QWORD v13[2];

  v13[1] = *MEMORY[0x24BDAC8D0];
  glpDeserializeLLVMType(a1);
  v2 = glpDeserializeArraySize(a1);
  v3 = v2;
  v4 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v7 = (_QWORD *)((char *)v13 - v6);
  if (v5 >= 0x200)
    v8 = 512;
  else
    v8 = v5;
  bzero((char *)v13 - v6, v8);
  if (v3)
  {
    v9 = v7;
    v10 = v4;
    do
    {
      *v9++ = glpDeserializeLLVMType(a1);
      --v10;
    }
    while (v10);
  }
  v11 = *(unsigned int *)(a1 + 380);
  *(_DWORD *)(a1 + 380) = v11 + 1;
  result = LLVMFunctionType();
  *(_QWORD *)(*(_QWORD *)(a1 + 400) + 8 * v11) = result;
  return result;
}

uint64_t glpLLVMAddFunctionAttr(uint64_t a1)
{
  uint64_t v2;
  int v3;

  v2 = glpDeserializeLLVMValue(a1);
  v3 = glpDeserializeuint32(a1);
  return glpLLVMAddFunctionAttrInner(a1, v2, v3);
}

uint64_t glpLLVMAddFunction(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = *(unsigned int *)(a1 + 364);
  *(_DWORD *)(a1 + 364) = v2 + strnlen((const char *)(*(_QWORD *)(a1 + 352) + v2), *(unsigned int *)(a1 + 360)) + 1;
  glpDeserializeLLVMType(a1);
  result = LLVMAddFunction();
  v4 = *(unsigned int *)(a1 + 384);
  *(_DWORD *)(a1 + 384) = v4 + 1;
  *(_QWORD *)(*(_QWORD *)(a1 + 408) + 8 * v4) = result;
  return result;
}

uint64_t glpLLVMGetNamedFunction(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = *(unsigned int *)(a1 + 364);
  *(_DWORD *)(a1 + 364) = v2 + strnlen((const char *)(*(_QWORD *)(a1 + 352) + v2), *(unsigned int *)(a1 + 360)) + 1;
  result = LLVMGetNamedFunction();
  v4 = *(unsigned int *)(a1 + 384);
  *(_DWORD *)(a1 + 384) = v4 + 1;
  *(_QWORD *)(*(_QWORD *)(a1 + 408) + 8 * v4) = result;
  return result;
}

uint64_t glpLLVMSetGlobalConstant(uint64_t a1)
{
  glpDeserializeLLVMValue(a1);
  glpDeserializeuint32(a1);
  return LLVMSetGlobalConstant();
}

void glpLLVMSetInitializer(uint64_t a1)
{
  glpDeserializeLLVMValue(a1);
  glpDeserializeLLVMValue(a1);
  JUMPOUT(0x22E316F10);
}

uint64_t glpLLVMGetParam(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  glpDeserializeLLVMValue(a1);
  glpDeserializeuint32(a1);
  result = LLVMGetParam();
  v3 = *(unsigned int *)(a1 + 384);
  *(_DWORD *)(a1 + 384) = v3 + 1;
  *(_QWORD *)(*(_QWORD *)(a1 + 408) + 8 * v3) = result;
  return result;
}

uint64_t glpLLVMCreateBuilderInContext(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;

  v2 = LLVMCreateBuilderInContext();
  *(_QWORD *)(a1 + 16) = v2;
  v3 = *(unsigned int *)(a1 + 364);
  if (v3 >= *(_DWORD *)(a1 + 360))
    glpDeserialError(a1 + 104, 1u);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 352) + v3);
  *(_DWORD *)(a1 + 364) = v3 + 1;
  return glpLLVMSetFastMathFlags(v2, *(_DWORD *)(a1 + 396), v4);
}

uint64_t glpLLVMDisposeBuilder(uint64_t a1)
{
  uint64_t result;

  result = LLVMDisposeBuilder();
  *(_QWORD *)(a1 + 16) = 0;
  return result;
}

uint64_t glpLLVMAppendBasicBlock(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  glpDeserializeLLVMValue(a1);
  v2 = *(unsigned int *)(a1 + 364);
  *(_DWORD *)(a1 + 364) = v2 + strnlen((const char *)(*(_QWORD *)(a1 + 352) + v2), *(unsigned int *)(a1 + 360)) + 1;
  v3 = *(unsigned int *)(a1 + 388);
  *(_DWORD *)(a1 + 388) = v3 + 1;
  result = LLVMAppendBasicBlockInContext();
  *(_QWORD *)(*(_QWORD *)(a1 + 416) + 8 * v3) = result;
  return result;
}

uint64_t glpLLVMGetInsertBlock(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = LLVMGetInsertBlock();
  v3 = *(unsigned int *)(a1 + 388);
  *(_DWORD *)(a1 + 388) = v3 + 1;
  *(_QWORD *)(*(_QWORD *)(a1 + 416) + 8 * v3) = result;
  return result;
}

uint64_t glpLLVMMoveBasicBlockBefore(uint64_t a1)
{
  glpDeserializeLLVMBlock(a1);
  glpDeserializeLLVMBlock(a1);
  return LLVMMoveBasicBlockBefore();
}

uint64_t glpLLVMPositionBuilderAtEnd(uint64_t a1)
{
  glpDeserializeLLVMBlock(a1);
  return LLVMPositionBuilderAtEnd();
}

uint64_t glpLLVMBuildRetVoid(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(unsigned int *)(a1 + 384);
  *(_DWORD *)(a1 + 384) = v2 + 1;
  result = MEMORY[0x22E316C28](*(_QWORD *)(a1 + 16));
  *(_QWORD *)(*(_QWORD *)(a1 + 408) + 8 * v2) = result;
  return result;
}

uint64_t glpLLVMBuildRet(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = glpDeserializeLLVMValue(a1);
  v3 = *(unsigned int *)(a1 + 384);
  *(_DWORD *)(a1 + 384) = v3 + 1;
  result = MEMORY[0x22E316C1C](*(_QWORD *)(a1 + 16), v2);
  *(_QWORD *)(*(_QWORD *)(a1 + 408) + 8 * v3) = result;
  return result;
}

uint64_t glpLLVMEmitBranch(uint64_t a1)
{
  glpDeserializeLLVMBlock(a1);
  return glpLLVMEmitBranchInnerReal();
}

uint64_t glpLLVMMDNodeInContext(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  size_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  _QWORD v13[2];

  v13[1] = *MEMORY[0x24BDAC8D0];
  v2 = glpDeserializeArraySize(a1);
  v3 = v2;
  v4 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v7 = (_QWORD *)((char *)v13 - v6);
  if (v5 >= 0x200)
    v8 = 512;
  else
    v8 = v5;
  bzero((char *)v13 - v6, v8);
  if (v3)
  {
    v9 = v7;
    v10 = v4;
    do
    {
      *v9++ = glpDeserializeLLVMValue(a1);
      --v10;
    }
    while (v10);
  }
  v11 = *(unsigned int *)(a1 + 384);
  *(_DWORD *)(a1 + 384) = v11 + 1;
  result = LLVMMDNodeInContext();
  *(_QWORD *)(*(_QWORD *)(a1 + 408) + 8 * v11) = result;
  return result;
}

uint64_t glpLLVMMDStringInContext(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  uint64_t result;

  v2 = *(unsigned int *)(a1 + 364);
  v3 = (const char *)(*(_QWORD *)(a1 + 352) + v2);
  *(_DWORD *)(a1 + 364) = v2 + strnlen(v3, *(unsigned int *)(a1 + 360)) + 1;
  v4 = *(unsigned int *)(a1 + 384);
  *(_DWORD *)(a1 + 384) = v4 + 1;
  strlen(v3);
  result = LLVMMDStringInContext();
  *(_QWORD *)(*(_QWORD *)(a1 + 408) + 8 * v4) = result;
  return result;
}

uint64_t glpLLVMNamedMetadata(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;

  v2 = *(unsigned int *)(a1 + 364);
  v3 = (char *)(*(_QWORD *)(a1 + 352) + v2);
  *(_DWORD *)(a1 + 364) = v2 + strnlen(v3, *(unsigned int *)(a1 + 360)) + 1;
  v4 = glpDeserializeLLVMValue(a1);
  return glpAddNamedMetadataOperand(*(_QWORD *)(a1 + 8), v3, v4);
}

uint64_t glpLLVMConstInt(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  glpDeserializeLLVMType(a1);
  v2 = *(unsigned int *)(a1 + 364);
  v3 = *(_DWORD *)(a1 + 360);
  if (v2 >= v3 || (v4 = *(_QWORD *)(a1 + 352), *(_DWORD *)(a1 + 364) = v2 + 1, (int)v2 + 1 >= v3))
    glpDeserialError(a1 + 104, 1u);
  v5 = *(char *)(v4 + v2 + 1);
  v6 = *(unsigned __int8 *)(v4 + v2 + 1);
  *(_DWORD *)(a1 + 364) = v2 + 2;
  if (v5 < 0)
    __asm { BR              X17 }
  result = LLVMConstInt();
  v8 = *(unsigned int *)(a1 + 384);
  *(_DWORD *)(a1 + 384) = v8 + 1;
  *(_QWORD *)(*(_QWORD *)(a1 + 408) + 8 * v8) = result;
  return result;
}

uint64_t glpLLVMConstUint64(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = *(unsigned int *)(a1 + 364);
  if (v2 + 8 > (unint64_t)*(unsigned int *)(a1 + 360))
    glpDeserialError(a1 + 104, 1u);
  *(_DWORD *)(a1 + 364) = v2 + 8;
  LLVMInt64TypeInContext();
  result = LLVMConstInt();
  v4 = *(unsigned int *)(a1 + 384);
  *(_DWORD *)(a1 + 384) = v4 + 1;
  *(_QWORD *)(*(_QWORD *)(a1 + 408) + 8 * v4) = result;
  return result;
}

uint64_t glpLLVMConstReal(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  glpDeserializeLLVMType(a1);
  deserialize_double(a1 + 104);
  result = llvm::ConstantFP::get();
  v3 = *(unsigned int *)(a1 + 384);
  *(_DWORD *)(a1 + 384) = v3 + 1;
  *(_QWORD *)(*(_QWORD *)(a1 + 408) + 8 * v3) = result;
  return result;
}

uint64_t glpLLVMConstVector(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  size_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  _QWORD v13[2];

  v13[1] = *MEMORY[0x24BDAC8D0];
  v2 = glpDeserializeArraySize(a1);
  v3 = v2;
  v4 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v7 = (_QWORD *)((char *)v13 - v6);
  if (v5 >= 0x200)
    v8 = 512;
  else
    v8 = v5;
  bzero((char *)v13 - v6, v8);
  if (v3)
  {
    v9 = v7;
    v10 = v4;
    do
    {
      *v9++ = glpDeserializeLLVMValue(a1);
      --v10;
    }
    while (v10);
  }
  result = LLVMConstVector();
  v12 = *(unsigned int *)(a1 + 384);
  *(_DWORD *)(a1 + 384) = v12 + 1;
  *(_QWORD *)(*(_QWORD *)(a1 + 408) + 8 * v12) = result;
  return result;
}

uint64_t glpLLVMConstArray(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  size_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  _QWORD v13[2];

  v13[1] = *MEMORY[0x24BDAC8D0];
  glpDeserializeLLVMType(a1);
  v2 = glpDeserializeArraySize(a1);
  v3 = v2;
  v4 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v7 = (_QWORD *)((char *)v13 - v6);
  if (v5 >= 0x200)
    v8 = 512;
  else
    v8 = v5;
  bzero((char *)v13 - v6, v8);
  if (v3)
  {
    v9 = v7;
    v10 = v4;
    do
    {
      *v9++ = glpDeserializeLLVMValue(a1);
      --v10;
    }
    while (v10);
  }
  result = LLVMConstArray();
  v12 = *(unsigned int *)(a1 + 384);
  *(_DWORD *)(a1 + 384) = v12 + 1;
  *(_QWORD *)(*(_QWORD *)(a1 + 408) + 8 * v12) = result;
  return result;
}

uint64_t glpLLVMConstFromType(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = glpDeserializeLLVMType(a1);
  result = ((uint64_t (*)(uint64_t))gOperations[4 * a2 + 3])(v4);
  v6 = *(unsigned int *)(a1 + 384);
  *(_DWORD *)(a1 + 384) = v6 + 1;
  *(_QWORD *)(*(_QWORD *)(a1 + 408) + 8 * v6) = result;
  return result;
}

uint64_t glpLLVMArrayType(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  glpDeserializeLLVMType(a1);
  glpDeserializeuint32(a1);
  result = LLVMArrayType();
  v3 = *(unsigned int *)(a1 + 380);
  *(_DWORD *)(a1 + 380) = v3 + 1;
  *(_QWORD *)(*(_QWORD *)(a1 + 400) + 8 * v3) = result;
  return result;
}

uint64_t glpLLVMStructTypeInContext(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  size_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  _QWORD v17[2];

  v17[1] = *MEMORY[0x24BDAC8D0];
  v2 = glpDeserializeuint32(a1);
  v3 = v2;
  v4 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v7 = (_QWORD *)((char *)v17 - v6);
  if (v5 >= 0x200)
    v8 = 512;
  else
    v8 = v5;
  bzero((char *)v17 - v6, v8);
  if (v3)
  {
    v9 = v4;
    v10 = v7;
    do
    {
      *v10++ = glpDeserializeLLVMType(a1);
      --v9;
    }
    while (v9);
  }
  v11 = *(unsigned int *)(a1 + 364);
  if (v11 >= *(_DWORD *)(a1 + 360))
    glpDeserialError(a1 + 104, 1u);
  v12 = *(_QWORD *)(a1 + 352);
  v13 = *(char *)(v12 + v11);
  v14 = *(unsigned __int8 *)(v12 + v11);
  *(_DWORD *)(a1 + 364) = v11 + 1;
  if (v13 < 0)
    __asm { BR              X16 }
  result = LLVMStructTypeInContext();
  v16 = *(unsigned int *)(a1 + 380);
  *(_DWORD *)(a1 + 380) = v16 + 1;
  *(_QWORD *)(*(_QWORD *)(a1 + 400) + 8 * v16) = result;
  return result;
}

uint64_t glpLLVMTypeOf(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  glpDeserializeLLVMValue(a1);
  result = LLVMTypeOf();
  v3 = *(unsigned int *)(a1 + 380);
  *(_DWORD *)(a1 + 380) = v3 + 1;
  *(_QWORD *)(*(_QWORD *)(a1 + 400) + 8 * v3) = result;
  return result;
}

uint64_t glpLLVMGetElementType(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  glpDeserializeLLVMType(a1);
  result = LLVMGetElementType();
  v3 = *(unsigned int *)(a1 + 380);
  *(_DWORD *)(a1 + 380) = v3 + 1;
  *(_QWORD *)(*(_QWORD *)(a1 + 400) + 8 * v3) = result;
  return result;
}

uint64_t glpLLVMGetNamedType(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = *(unsigned int *)(a1 + 364);
  *(_DWORD *)(a1 + 364) = v2 + strnlen((const char *)(*(_QWORD *)(a1 + 352) + v2), *(unsigned int *)(a1 + 360)) + 1;
  result = glpLLVMGetNamedTypeInner();
  v4 = *(unsigned int *)(a1 + 380);
  *(_DWORD *)(a1 + 380) = v4 + 1;
  *(_QWORD *)(*(_QWORD *)(a1 + 400) + 8 * v4) = result;
  return result;
}

uint64_t glpLLVMBuildFunctionCall(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  size_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  _QWORD v15[2];

  v15[1] = *MEMORY[0x24BDAC8D0];
  v2 = glpDeserializeLLVMValue(a1);
  v3 = glpDeserializeLLVMValue(a1);
  v4 = glpDeserializeArraySize(a1);
  v5 = v4;
  v6 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v9 = (_QWORD *)((char *)v15 - v8);
  if (v7 >= 0x200)
    v10 = 512;
  else
    v10 = v7;
  bzero((char *)v15 - v8, v10);
  if (v5)
  {
    v11 = v9;
    v12 = v6;
    do
    {
      *v11++ = glpDeserializeLLVMValue(a1);
      --v12;
    }
    while (v12);
  }
  result = glpLLVMBuildFunctionCallInner(a1, v2, v3, v9, v6);
  v14 = *(unsigned int *)(a1 + 384);
  *(_DWORD *)(a1 + 384) = v14 + 1;
  *(_QWORD *)(*(_QWORD *)(a1 + 408) + 8 * v14) = result;
  return result;
}

uint64_t glpLLVMBuildAlloca(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  glpDeserializeLLVMType(a1);
  if (*(_DWORD *)(a1 + 392))
  {
    v2 = *(unsigned int *)(a1 + 364);
    *(_DWORD *)(a1 + 364) = v2 + strnlen((const char *)(*(_QWORD *)(a1 + 352) + v2), *(unsigned int *)(a1 + 360)) + 1;
  }
  result = LLVMBuildAlloca();
  v4 = *(unsigned int *)(a1 + 384);
  *(_DWORD *)(a1 + 384) = v4 + 1;
  *(_QWORD *)(*(_QWORD *)(a1 + 408) + 8 * v4) = result;
  return result;
}

uint64_t glpLLVMBuildLoad(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  glpDeserializeLLVMValue(a1);
  if (*(_DWORD *)(a1 + 392))
  {
    v2 = *(unsigned int *)(a1 + 364);
    *(_DWORD *)(a1 + 364) = v2 + strnlen((const char *)(*(_QWORD *)(a1 + 352) + v2), *(unsigned int *)(a1 + 360)) + 1;
  }
  result = LLVMBuildLoad();
  v4 = *(unsigned int *)(a1 + 384);
  *(_DWORD *)(a1 + 384) = v4 + 1;
  *(_QWORD *)(*(_QWORD *)(a1 + 408) + 8 * v4) = result;
  return result;
}

uint64_t glpLLVMBuildStore(uint64_t a1)
{
  glpDeserializeLLVMValue(a1);
  glpDeserializeLLVMValue(a1);
  return LLVMBuildStore();
}

uint64_t glpLLVMBuildExtractElement(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  glpDeserializeLLVMValue(a1);
  glpDeserializeLLVMValue(a1);
  if (*(_DWORD *)(a1 + 392))
  {
    v2 = *(unsigned int *)(a1 + 364);
    *(_DWORD *)(a1 + 364) = v2 + strnlen((const char *)(*(_QWORD *)(a1 + 352) + v2), *(unsigned int *)(a1 + 360)) + 1;
  }
  result = LLVMBuildExtractElement();
  v4 = *(unsigned int *)(a1 + 384);
  *(_DWORD *)(a1 + 384) = v4 + 1;
  *(_QWORD *)(*(_QWORD *)(a1 + 408) + 8 * v4) = result;
  return result;
}

uint64_t glpLLVMBuildInsertElement(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  glpDeserializeLLVMValue(a1);
  glpDeserializeLLVMValue(a1);
  glpDeserializeLLVMValue(a1);
  if (*(_DWORD *)(a1 + 392))
  {
    v2 = *(unsigned int *)(a1 + 364);
    *(_DWORD *)(a1 + 364) = v2 + strnlen((const char *)(*(_QWORD *)(a1 + 352) + v2), *(unsigned int *)(a1 + 360)) + 1;
  }
  result = LLVMBuildInsertElement();
  v4 = *(unsigned int *)(a1 + 384);
  *(_DWORD *)(a1 + 384) = v4 + 1;
  *(_QWORD *)(*(_QWORD *)(a1 + 408) + 8 * v4) = result;
  return result;
}

uint64_t glpLLVMBuildShuffleVector(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  glpDeserializeLLVMValue(a1);
  glpDeserializeLLVMValue(a1);
  glpDeserializeLLVMValue(a1);
  if (*(_DWORD *)(a1 + 392))
  {
    v2 = *(unsigned int *)(a1 + 364);
    *(_DWORD *)(a1 + 364) = v2 + strnlen((const char *)(*(_QWORD *)(a1 + 352) + v2), *(unsigned int *)(a1 + 360)) + 1;
  }
  result = LLVMBuildShuffleVector();
  v4 = *(unsigned int *)(a1 + 384);
  *(_DWORD *)(a1 + 384) = v4 + 1;
  *(_QWORD *)(*(_QWORD *)(a1 + 408) + 8 * v4) = result;
  return result;
}

uint64_t glpLLVMBuildGEP(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  size_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  _QWORD v14[2];

  v14[1] = *MEMORY[0x24BDAC8D0];
  glpDeserializeLLVMValue(a1);
  v2 = glpDeserializeArraySize(a1);
  v3 = v2;
  v4 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v7 = (_QWORD *)((char *)v14 - v6);
  if (v5 >= 0x200)
    v8 = 512;
  else
    v8 = v5;
  bzero((char *)v14 - v6, v8);
  if (v3)
  {
    v9 = v7;
    v10 = v4;
    do
    {
      *v9++ = glpDeserializeLLVMValue(a1);
      --v10;
    }
    while (v10);
  }
  if (*(_DWORD *)(a1 + 392))
  {
    v11 = *(unsigned int *)(a1 + 364);
    *(_DWORD *)(a1 + 364) = v11 + strnlen((const char *)(*(_QWORD *)(a1 + 352) + v11), *(unsigned int *)(a1 + 360)) + 1;
  }
  result = LLVMBuildGEP();
  v13 = *(unsigned int *)(a1 + 384);
  *(_DWORD *)(a1 + 384) = v13 + 1;
  *(_QWORD *)(*(_QWORD *)(a1 + 408) + 8 * v13) = result;
  return result;
}

uint64_t glpLLVMBuildInsertValue(uint64_t a1)
{
  uint64_t v2;
  size_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  glpDeserializeLLVMValue(a1);
  glpDeserializeLLVMValue(a1);
  v2 = *(unsigned int *)(a1 + 364);
  v3 = *(unsigned int *)(a1 + 360);
  if (v2 >= v3)
    glpDeserialError(a1 + 104, 1u);
  v4 = *(_QWORD *)(a1 + 352);
  v5 = *(char *)(v4 + v2);
  v6 = *(unsigned __int8 *)(v4 + v2);
  *(_DWORD *)(a1 + 364) = v2 + 1;
  if (v5 < 0)
    __asm { BR              X14 }
  if (*(_DWORD *)(a1 + 392))
    *(_DWORD *)(a1 + 364) = v2 + 1 + strnlen((const char *)(v4 + (v2 + 1)), v3) + 1;
  result = LLVMBuildInsertValue();
  v8 = *(unsigned int *)(a1 + 384);
  *(_DWORD *)(a1 + 384) = v8 + 1;
  *(_QWORD *)(*(_QWORD *)(a1 + 408) + 8 * v8) = result;
  return result;
}

uint64_t glpLLVMBuildExtractValue(uint64_t a1)
{
  uint64_t v2;
  size_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  glpDeserializeLLVMValue(a1);
  v2 = *(unsigned int *)(a1 + 364);
  v3 = *(unsigned int *)(a1 + 360);
  if (v2 >= v3)
    glpDeserialError(a1 + 104, 1u);
  v4 = *(_QWORD *)(a1 + 352);
  v5 = *(char *)(v4 + v2);
  v6 = *(unsigned __int8 *)(v4 + v2);
  *(_DWORD *)(a1 + 364) = v2 + 1;
  if (v5 < 0)
    __asm { BR              X14 }
  if (*(_DWORD *)(a1 + 392))
    *(_DWORD *)(a1 + 364) = v2 + 1 + strnlen((const char *)(v4 + (v2 + 1)), v3) + 1;
  result = LLVMBuildExtractValue();
  v8 = *(unsigned int *)(a1 + 384);
  *(_DWORD *)(a1 + 384) = v8 + 1;
  *(_QWORD *)(*(_QWORD *)(a1 + 408) + 8 * v8) = result;
  return result;
}

uint64_t glpLLVMBinaryOperation(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t result;
  uint64_t v9;

  v4 = glpDeserializeLLVMValue(a1);
  v5 = glpDeserializeLLVMValue(a1);
  if (*(_DWORD *)(a1 + 392))
  {
    v6 = *(unsigned int *)(a1 + 364);
    v7 = (const char *)(*(_QWORD *)(a1 + 352) + v6);
    *(_DWORD *)(a1 + 364) = v6 + strnlen(v7, *(unsigned int *)(a1 + 360)) + 1;
  }
  else
  {
    v7 = "";
  }
  result = ((uint64_t (*)(_QWORD, uint64_t, uint64_t, const char *))gOperations[4 * a2 + 3])(*(_QWORD *)(a1 + 16), v4, v5, v7);
  v9 = *(unsigned int *)(a1 + 384);
  *(_DWORD *)(a1 + 384) = v9 + 1;
  *(_QWORD *)(*(_QWORD *)(a1 + 408) + 8 * v9) = result;
  return result;
}

uint64_t glpLLVMUnaryOperation(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t result;
  uint64_t v8;

  v4 = glpDeserializeLLVMValue(a1);
  if (*(_DWORD *)(a1 + 392))
  {
    v5 = *(unsigned int *)(a1 + 364);
    v6 = (const char *)(*(_QWORD *)(a1 + 352) + v5);
    *(_DWORD *)(a1 + 364) = v5 + strnlen(v6, *(unsigned int *)(a1 + 360)) + 1;
  }
  else
  {
    v6 = "";
  }
  result = ((uint64_t (*)(_QWORD, uint64_t, const char *))gOperations[4 * a2 + 3])(*(_QWORD *)(a1 + 16), v4, v6);
  v8 = *(unsigned int *)(a1 + 384);
  *(_DWORD *)(a1 + 384) = v8 + 1;
  *(_QWORD *)(*(_QWORD *)(a1 + 408) + 8 * v8) = result;
  return result;
}

uint64_t glpLLVMCastOperation(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t result;
  uint64_t v9;

  v4 = glpDeserializeLLVMValue(a1);
  v5 = glpDeserializeLLVMType(a1);
  if (*(_DWORD *)(a1 + 392))
  {
    v6 = *(unsigned int *)(a1 + 364);
    v7 = (const char *)(*(_QWORD *)(a1 + 352) + v6);
    *(_DWORD *)(a1 + 364) = v6 + strnlen(v7, *(unsigned int *)(a1 + 360)) + 1;
  }
  else
  {
    v7 = "";
  }
  result = LLVMTypeOf();
  if (result != v5)
  {
    result = ((uint64_t (*)(_QWORD, uint64_t, uint64_t, const char *))gOperations[4 * a2 + 3])(*(_QWORD *)(a1 + 16), v4, v5, v7);
    v4 = result;
  }
  v9 = *(unsigned int *)(a1 + 384);
  *(_DWORD *)(a1 + 384) = v9 + 1;
  *(_QWORD *)(*(_QWORD *)(a1 + 408) + 8 * v9) = v4;
  return result;
}

uint64_t glpLLVMBuildICmp(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  glpDeserializeuint32(a1);
  glpDeserializeLLVMValue(a1);
  glpDeserializeLLVMValue(a1);
  if (*(_DWORD *)(a1 + 392))
  {
    v2 = *(unsigned int *)(a1 + 364);
    *(_DWORD *)(a1 + 364) = v2 + strnlen((const char *)(*(_QWORD *)(a1 + 352) + v2), *(unsigned int *)(a1 + 360)) + 1;
  }
  result = LLVMBuildICmp();
  v4 = *(unsigned int *)(a1 + 384);
  *(_DWORD *)(a1 + 384) = v4 + 1;
  *(_QWORD *)(*(_QWORD *)(a1 + 408) + 8 * v4) = result;
  return result;
}

uint64_t glpLLVMBuildFCmp(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  glpDeserializeuint32(a1);
  glpDeserializeLLVMValue(a1);
  glpDeserializeLLVMValue(a1);
  if (*(_DWORD *)(a1 + 392))
  {
    v2 = *(unsigned int *)(a1 + 364);
    *(_DWORD *)(a1 + 364) = v2 + strnlen((const char *)(*(_QWORD *)(a1 + 352) + v2), *(unsigned int *)(a1 + 360)) + 1;
  }
  result = LLVMBuildFCmp();
  v4 = *(unsigned int *)(a1 + 384);
  *(_DWORD *)(a1 + 384) = v4 + 1;
  *(_QWORD *)(*(_QWORD *)(a1 + 408) + 8 * v4) = result;
  return result;
}

uint64_t glpLLVMBuildSelect(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  glpDeserializeLLVMValue(a1);
  glpDeserializeLLVMValue(a1);
  glpDeserializeLLVMValue(a1);
  if (*(_DWORD *)(a1 + 392))
  {
    v2 = *(unsigned int *)(a1 + 364);
    *(_DWORD *)(a1 + 364) = v2 + strnlen((const char *)(*(_QWORD *)(a1 + 352) + v2), *(unsigned int *)(a1 + 360)) + 1;
  }
  result = LLVMBuildSelect();
  v4 = *(unsigned int *)(a1 + 384);
  *(_DWORD *)(a1 + 384) = v4 + 1;
  *(_QWORD *)(*(_QWORD *)(a1 + 408) + 8 * v4) = result;
  return result;
}

uint64_t glpLLVMBuildSwitch(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  glpDeserializeLLVMValue(a1);
  glpDeserializeLLVMBlock(a1);
  glpDeserializeuint32(a1);
  result = LLVMBuildSwitch();
  v3 = *(unsigned int *)(a1 + 384);
  *(_DWORD *)(a1 + 384) = v3 + 1;
  *(_QWORD *)(*(_QWORD *)(a1 + 408) + 8 * v3) = result;
  return result;
}

void glpLLVMAddCase(uint64_t a1)
{
  glpDeserializeLLVMValue(a1);
  glpDeserializeLLVMValue(a1);
  glpDeserializeLLVMBlock(a1);
  JUMPOUT(0x22E316A48);
}

uint64_t glpLLVMBuildPhi(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  glpDeserializeLLVMType(a1);
  if (*(_DWORD *)(a1 + 392))
  {
    v2 = *(unsigned int *)(a1 + 364);
    *(_DWORD *)(a1 + 364) = v2 + strnlen((const char *)(*(_QWORD *)(a1 + 352) + v2), *(unsigned int *)(a1 + 360)) + 1;
  }
  result = LLVMBuildPhi();
  v4 = *(unsigned int *)(a1 + 384);
  *(_DWORD *)(a1 + 384) = v4 + 1;
  *(_QWORD *)(*(_QWORD *)(a1 + 408) + 8 * v4) = result;
  return result;
}

uint64_t glpLLVMAddIncoming(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  _QWORD v13[2];

  v13[1] = *MEMORY[0x24BDAC8D0];
  glpDeserializeLLVMValue(a1);
  v2 = glpDeserializeuint32(a1);
  v3 = v2;
  v4 = v2;
  v5 = 8 * v2;
  MEMORY[0x24BDAC7A8](v2);
  v6 = (v5 + 15) & 0xFFFFFFFF0;
  if (v5 >= 0x200)
    v7 = 512;
  else
    v7 = v5;
  bzero((char *)v13 - v6, v7);
  MEMORY[0x24BDAC7A8](v8);
  bzero((char *)v13 - v6, v7);
  if (v3)
  {
    v9 = v4;
    v10 = (_QWORD *)((char *)v13 - v6);
    v11 = (_QWORD *)((char *)v13 - v6);
    do
    {
      *v10++ = glpDeserializeLLVMValue(a1);
      *v11++ = glpDeserializeLLVMBlock(a1);
      --v9;
    }
    while (v9);
  }
  return LLVMAddIncoming();
}

uint64_t glpLLVMGetSwitchDefaultDest(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  glpDeserializeLLVMValue(a1);
  result = LLVMGetSwitchDefaultDest();
  v3 = *(unsigned int *)(a1 + 388);
  *(_DWORD *)(a1 + 388) = v3 + 1;
  *(_QWORD *)(*(_QWORD *)(a1 + 416) + 8 * v3) = result;
  return result;
}

uint64_t glpLLVMBuildBr(uint64_t a1)
{
  glpDeserializeLLVMBlock(a1);
  return glpLLVMEmitBranchInnerReal();
}

uint64_t glpLLVMBuildCondBr(uint64_t a1)
{
  glpDeserializeLLVMValue(a1);
  glpDeserializeLLVMBlock(a1);
  glpDeserializeLLVMBlock(a1);
  return LLVMBuildCondBr();
}

_QWORD *glpLLVMDIBuilderCreateStub(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = glpLLVMDIBuilderCreate(*(uint64_t **)(a1 + 8));
  *(_QWORD *)(a1 + 24) = result;
  v3 = *(unsigned int *)(a1 + 384);
  *(_DWORD *)(a1 + 384) = v3 + 1;
  *(_QWORD *)(*(_QWORD *)(a1 + 408) + 8 * v3) = 0;
  return result;
}

GLPDebugInfoContext *glpLLVMDIBuilderDeleteStub(uint64_t a1)
{
  GLPDebugInfoContext *result;

  result = glpLLVMDIBuilderDelete(*(GLPDebugInfoContext **)(a1 + 24));
  *(_QWORD *)(a1 + 24) = 0;
  return result;
}

uint64_t glpLLVMDIBuilderCreateCompileUnitStub(uint64_t a1)
{
  uint64_t v2;
  const char *v3;

  v2 = *(unsigned int *)(a1 + 364);
  v3 = (const char *)(*(_QWORD *)(a1 + 352) + v2);
  *(_DWORD *)(a1 + 364) = v2 + strnlen(v3, *(unsigned int *)(a1 + 360)) + 1;
  return glpLLVMDIBuilderCreateCompileUnit(*(GLPDebugInfoContext **)(a1 + 24), v3);
}

uint64_t glpLLVMDIBuilderCreateFileStub(uint64_t a1)
{
  uint64_t v2;
  const char *v3;

  v2 = *(unsigned int *)(a1 + 364);
  v3 = (const char *)(*(_QWORD *)(a1 + 352) + v2);
  *(_DWORD *)(a1 + 364) = v2 + strnlen(v3, *(unsigned int *)(a1 + 360)) + 1;
  return glpLLVMDIBuilderCreateFile(*(GLPDebugInfoContext **)(a1 + 24), v3);
}

void glpLLVMDIBuilderCreateSubProgramStub(uint64_t a1)
{
  llvm::Function *v2;
  uint64_t v3;
  char *v4;

  v2 = (llvm::Function *)glpDeserializeLLVMValue(a1);
  v3 = *(unsigned int *)(a1 + 364);
  v4 = (char *)(*(_QWORD *)(a1 + 352) + v3);
  *(_DWORD *)(a1 + 364) = v3 + strnlen(v4, *(unsigned int *)(a1 + 360)) + 1;
  glpLLVMDIBuilderCreateSubProgram(*(GLPDebugInfoContext **)(a1 + 24), v2, v4);
}

uint64_t glpLLVMSetCurrentLineStub(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  v2 = a1 + 104;
  v3 = *(unsigned int *)(a1 + 364);
  if (v3 >= *(_DWORD *)(a1 + 360))
    glpDeserialError(v2, 1u);
  v4 = *(_QWORD *)(a1 + 352);
  v5 = *(char *)(v4 + v3);
  v6 = *(unsigned __int8 *)(v4 + v3);
  *(_DWORD *)(a1 + 364) = v3 + 1;
  if (v5 < 0)
    __asm { BR              X16 }
  glpLLVMGetDebugLocation();
  return LLVMSetCurrentDebugLocation();
}

uint64_t glpLLVMClearCurrentLineStub()
{
  return LLVMSetCurrentDebugLocation();
}

uint64_t glpLLVMPackVector(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v2 = glpDeserializeLLVMValue(a1);
  v3 = glpDeserializeLLVMType(a1);
  result = glpLLVMPackVectorInner(a1, v2, v3);
  v5 = *(unsigned int *)(a1 + 384);
  *(_DWORD *)(a1 + 384) = v5 + 1;
  *(_QWORD *)(*(_QWORD *)(a1 + 408) + 8 * v5) = result;
  return result;
}

uint64_t glpLLVMUnpackVector(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v2 = glpDeserializeLLVMValue(a1);
  v3 = glpDeserializeLLVMType(a1);
  result = glpLLVMUnpackTypeInner(a1, v2, v3);
  v5 = *(unsigned int *)(a1 + 384);
  *(_DWORD *)(a1 + 384) = v5 + 1;
  *(_QWORD *)(*(_QWORD *)(a1 + 408) + 8 * v5) = result;
  return result;
}

uint64_t glpLLVMCallFunction(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  size_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  const char *v22;
  uint64_t result;
  uint64_t v24;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x24BDAC8D0];
  v2 = *(unsigned int *)(a1 + 364);
  v3 = (const char *)(*(_QWORD *)(a1 + 352) + v2);
  *(_DWORD *)(a1 + 364) = v2 + strnlen(v3, *(unsigned int *)(a1 + 360)) + 1;
  v4 = glpDeserializeLLVMType(a1);
  v5 = glpDeserializeArraySize(a1);
  v6 = v5;
  v7 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v10 = (_QWORD *)((char *)v25 - v9);
  if (v8 >= 0x200)
    v11 = 512;
  else
    v11 = v8;
  bzero((char *)v25 - v9, v11);
  if (v6)
  {
    v12 = v10;
    v13 = v7;
    do
    {
      *v12++ = glpDeserializeLLVMValue(a1);
      --v13;
    }
    while (v13);
  }
  v14 = glpDeserializeuint32(a1);
  v15 = v14;
  v16 = MEMORY[0x24BDAC7A8](v14);
  v18 = (int *)((char *)v25 - v17);
  if (v16)
  {
    v19 = v15;
    v20 = (_DWORD *)((char *)v25 - v17);
    do
    {
      *v20++ = glpDeserializeuint32(a1);
      --v19;
    }
    while (v19);
  }
  if (*(_DWORD *)(a1 + 392))
  {
    v21 = *(unsigned int *)(a1 + 364);
    v22 = (const char *)(*(_QWORD *)(a1 + 352) + v21);
    *(_DWORD *)(a1 + 364) = v21 + strnlen(v22, *(unsigned int *)(a1 + 360)) + 1;
  }
  else
  {
    v22 = "";
  }
  result = glpLLVMCallFunctionInner(a1, (uint64_t)v3, v4, (uint64_t)v10, v7, v18, v15, (uint64_t)v22);
  v24 = *(unsigned int *)(a1 + 384);
  *(_DWORD *)(a1 + 384) = v24 + 1;
  *(_QWORD *)(*(_QWORD *)(a1 + 408) + 8 * v24) = result;
  return result;
}

uint64_t glpLLVMGetInfinityProxy(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  glpDeserializeLLVMType(a1);
  result = glpLLVMGetInfinity();
  v3 = *(unsigned int *)(a1 + 384);
  *(_DWORD *)(a1 + 384) = v3 + 1;
  *(_QWORD *)(*(_QWORD *)(a1 + 408) + 8 * v3) = result;
  return result;
}

uint64_t glpLLVMAddGlobalInAddressSpace(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  glpDeserializeLLVMType(a1);
  if (*(_DWORD *)(a1 + 392))
  {
    v2 = *(unsigned int *)(a1 + 364);
    *(_DWORD *)(a1 + 364) = v2 + strnlen((const char *)(*(_QWORD *)(a1 + 352) + v2), *(unsigned int *)(a1 + 360)) + 1;
  }
  glpDeserializeuint32(a1);
  v3 = LLVMAddGlobalInAddressSpace();
  result = LLVMSetGlobalConstant();
  v5 = *(unsigned int *)(a1 + 384);
  *(_DWORD *)(a1 + 384) = v5 + 1;
  *(_QWORD *)(*(_QWORD *)(a1 + 408) + 8 * v5) = v3;
  return result;
}

uint64_t glpGenerateLLVMIRModule(int *a1, int a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  _OWORD v16[2];
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _QWORD v24[30];
  __int128 v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v25 = 0u;
  v26 = 0;
  memset(v24, 0, sizeof(v24));
  v23 = 0u;
  v22 = 0u;
  v21 = 0u;
  v20 = 0u;
  v19 = 0u;
  v18 = 0u;
  v6 = a1[1];
  v27 = a1[2];
  v28 = v6;
  v29 = a1[3];
  v7 = malloc_type_malloc(8 * v6, 0x1B2F740uLL);
  if (!v7
    || (v8 = v7, v35 = v7, (v9 = malloc_type_malloc(8 * a1[2], 0x1B2F740uLL)) == 0)
    || (v10 = v9, v34 = v9, (v11 = malloc_type_malloc(8 * a1[3], 0x1B2F740uLL)) == 0))
  {
    abort();
  }
  v36 = v11;
  *v8 = 0;
  *v10 = 0;
  *v11 = 0;
  v30 = 1;
  v31 = 0x100000001;
  v12 = a1[4];
  v32 = v12 & 1;
  v33 = (v12 >> 1) & 1;
  v17 = a3;
  *((_QWORD *)&v19 + 1) = LLVMInt64TypeInContext();
  *(_QWORD *)&v20 = LLVMInt32TypeInContext();
  *((_QWORD *)&v20 + 1) = LLVMInt16TypeInContext();
  *(_QWORD *)&v21 = LLVMInt8TypeInContext();
  *((_QWORD *)&v21 + 1) = LLVMInt1TypeInContext();
  *(_QWORD *)&v22 = LLVMFloatTypeInContext();
  *((_QWORD *)&v22 + 1) = LLVMHalfTypeInContext();
  *(_QWORD *)&v23 = LLVMVoidTypeInContext();
  *((_QWORD *)&v23 + 1) = LLVMDoubleTypeInContext();
  memset(v16, 0, sizeof(v16));
  glpInitPoolAllocator(4096, 4096, v16);
  glpInitDeserialContext((uint64_t)v24, (uint64_t)v16, (uint64_t)&GLP_MALLOC_ALLOCATOR, (uint64_t)(a1 + 6), a2 - 24);
  *(_QWORD *)&v18 = LLVMModuleCreateWithNameInContext();
  glpLLVMSetupModule();
  v13 = *a1;
  if (v13 >= 1)
  {
    do
    {
      if (HIDWORD(v26) >= v26)
        glpDeserialError((uint64_t)v24, 1u);
      v14 = *(unsigned __int8 *)(*((_QWORD *)&v25 + 1) + HIDWORD(v26));
      ++HIDWORD(v26);
      gOperations[4 * v14 + 1](&v17);
      --v13;
    }
    while (v13);
  }
  glpDestroyDeserialContext(v24);
  glpDestroyPoolAllocator((uint64_t)v16);
  free(v35);
  free(v34);
  free(v36);
  return v18;
}

uint64_t glpDeserializeLLVMType(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  v1 = *(unsigned int *)(a1 + 364);
  if (v1 >= *(_DWORD *)(a1 + 360))
    glpDeserialError(a1 + 104, 1u);
  v2 = *(_QWORD *)(a1 + 352);
  v3 = *(char *)(v2 + v1);
  v4 = *(unsigned __int8 *)(v2 + v1);
  *(_DWORD *)(a1 + 364) = v1 + 1;
  if (v3 < 0)
    __asm { BR              X17 }
  return *(_QWORD *)(*(_QWORD *)(a1 + 400) + 8 * v4);
}

uint64_t glpDeserializeuint32(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  v1 = *(unsigned int *)(a1 + 364);
  if (v1 >= *(_DWORD *)(a1 + 360))
    glpDeserialError(a1 + 104, 1u);
  v2 = *(_QWORD *)(a1 + 352);
  v3 = *(char *)(v2 + v1);
  v4 = *(unsigned __int8 *)(v2 + v1);
  *(_DWORD *)(a1 + 364) = v1 + 1;
  if (v3 < 0)
    __asm { BR              X17 }
  return v4;
}

uint64_t glpDeserializeArraySize(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  v1 = *(unsigned int *)(a1 + 364);
  if (v1 >= *(_DWORD *)(a1 + 360))
    glpDeserialError(a1 + 104, 1u);
  v2 = *(_QWORD *)(a1 + 352);
  v3 = *(char *)(v2 + v1);
  v4 = *(unsigned __int8 *)(v2 + v1);
  *(_DWORD *)(a1 + 364) = v1 + 1;
  if (v3 < 0)
    __asm { BR              X17 }
  return v4;
}

uint64_t glpDeserializeLLVMValue(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  v1 = *(unsigned int *)(a1 + 364);
  if (v1 >= *(_DWORD *)(a1 + 360))
    glpDeserialError(a1 + 104, 1u);
  v2 = *(_QWORD *)(a1 + 352);
  v3 = *(char *)(v2 + v1);
  v4 = *(unsigned __int8 *)(v2 + v1);
  *(_DWORD *)(a1 + 364) = v1 + 1;
  if (v3 < 0)
    __asm { BR              X17 }
  return *(_QWORD *)(*(_QWORD *)(a1 + 408) + 8 * v4);
}

uint64_t glpDeserializeLLVMBlock(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  v1 = *(unsigned int *)(a1 + 364);
  if (v1 >= *(_DWORD *)(a1 + 360))
    glpDeserialError(a1 + 104, 1u);
  v2 = *(_QWORD *)(a1 + 352);
  v3 = *(char *)(v2 + v1);
  v4 = *(unsigned __int8 *)(v2 + v1);
  *(_DWORD *)(a1 + 364) = v1 + 1;
  if (v3 < 0)
    __asm { BR              X17 }
  return *(_QWORD *)(*(_QWORD *)(a1 + 416) + 8 * v4);
}

uint64_t glpPrecisionIndexFromSAFlags(char a1)
{
  uint64_t result;
  uint64_t v3;

  result = 0;
  v3 = a1 & 0x1F;
  if (v3 <= 7)
  {
    if (!v3)
      return result;
    if (v3 == 4)
      return 1;
LABEL_11:
    abort();
  }
  if (v3 == 8)
    return 2;
  if (v3 == 16)
    return 3;
  if (v3 != 31)
    goto LABEL_11;
  return result;
}

uint64_t glpGetIBVariableObjectCount(uint64_t a1, unsigned int *a2)
{
  uint64_t ElementType;
  int Kind;
  _BOOL8 v6;
  int v7;
  __int128 v9;
  uint64_t v10;

  ElementType = (uint64_t)a2;
  v10 = *MEMORY[0x24BDAC8D0];
  Kind = glpTypeGetKind(a2);
  v6 = a1 == 0x20000000 || a1 == 0x40000000;
  v9 = xmmword_22D805E60;
  v7 = *(_DWORD *)((unint64_t)&v9 | (8 * (Kind == 3)) | (4 * v6));
  if (v7 == 1)
    return glpAggregateTypeGetElementCount(ElementType);
  if (v7 == 3)
  {
    ElementType = glpBankTypeGetElementType(ElementType);
    return glpAggregateTypeGetElementCount(ElementType);
  }
  return 1;
}

uint64_t glpInterfaceBlockObjectGetVariableObjectCount(uint64_t a1)
{
  return glpGetIBVariableObjectCount(*(_QWORD *)(a1 + 40), *(unsigned int **)(a1 + 64));
}

uint64_t glpBufferObjectGetMinimumBufferSize(uint64_t a1)
{
  return glpABIGetMinimumBufferBytesForType(*(_DWORD *)(a1 + 8), *(_QWORD *)a1, 0);
}

uint64_t *glpLayoutObjectFind(uint64_t *result, int a2)
{
  do
    result = (uint64_t *)*result;
  while (result && *((_DWORD *)result + 2) != a2);
  return result;
}

uint64_t *glpLayoutObjectGetGeomInOut(uint64_t *result, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  _BOOL4 v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;

  v6 = result;
  while (1)
  {
    v6 = (uint64_t *)*v6;
    if (!v6)
      break;
    if (!*((_DWORD *)v6 + 2))
    {
      if (a4)
        *a4 = 0;
      if (a5)
        *a5 = 0;
      if (a2)
        *a2 = 1;
      break;
    }
  }
  v7 = result;
  while (1)
  {
    v7 = (uint64_t *)*v7;
    if (!v7)
      break;
    if (*((_DWORD *)v7 + 2) == 1)
    {
      if (a4)
        *a4 = 1;
      if (a2)
        *a2 = 2;
      break;
    }
  }
  v8 = result;
  while (1)
  {
    v8 = (uint64_t *)*v8;
    if (!v8)
      break;
    if (*((_DWORD *)v8 + 2) == 2)
    {
      if (a4)
        *a4 = 10;
      if (a2)
        *a2 = 4;
      break;
    }
  }
  v9 = result;
  while (1)
  {
    v9 = (uint64_t *)*v9;
    if (!v9)
      break;
    if (*((_DWORD *)v9 + 2) == 3)
    {
      if (a4)
        *a4 = 4;
      if (a2)
        *a2 = 3;
      break;
    }
  }
  v10 = result;
  while (1)
  {
    v10 = (uint64_t *)*v10;
    if (!v10)
      break;
    if (*((_DWORD *)v10 + 2) == 4)
    {
      if (a4)
        *a4 = 12;
      if (a2)
        *a2 = 6;
      break;
    }
  }
  v11 = result;
  do
  {
    v11 = (uint64_t *)*v11;
    if (!v11)
    {
      v12 = a5 != 0;
      goto LABEL_45;
    }
  }
  while (*((_DWORD *)v11 + 2) != 6);
  if (a5)
  {
    *a5 = 3;
    v12 = 1;
  }
  else
  {
    v12 = 0;
  }
LABEL_45:
  v13 = result;
  while (1)
  {
    v13 = (uint64_t *)*v13;
    if (!v13)
      break;
    if (*((_DWORD *)v13 + 2) == 7)
    {
      if (v12)
        *a5 = 5;
      break;
    }
  }
  v14 = result;
  while (1)
  {
    v14 = (uint64_t *)*v14;
    if (!v14)
      break;
    if (*((_DWORD *)v14 + 2) == 8)
    {
      if (a3)
      {
        v15 = result;
        do
          v15 = (uint64_t *)*v15;
        while (v15 && *((_DWORD *)v15 + 2) != 8);
        *a3 = *((_DWORD *)v15 + 4);
      }
      break;
    }
  }
  v16 = result;
  while (1)
  {
    v16 = (uint64_t *)*v16;
    if (!v16)
      break;
    if (*((_DWORD *)v16 + 2) == 5)
    {
      if (a6)
      {
        do
          result = (uint64_t *)*result;
        while (result && *((_DWORD *)result + 2) != 5);
        *a6 = *((_DWORD *)result + 4);
      }
      return result;
    }
  }
  return result;
}

uint64_t glpLinkerPoolAlloc(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*(_QWORD *)a1);
}

uint64_t glpLinkedProgramGetSubroutineUniformHash(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(a1 + 8 * a2 + 144);
}

uint64_t glpLinkedProgramGetSubroutineUniformLocationCount(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;

  v2 = *(_QWORD *)(a1 + 8 * a2 + 144);
  v3 = *(unsigned int *)(v2 + 32);
  if (!(_DWORD)v3)
    return 0;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  do
  {
    v7 = *(_QWORD *)(*(_QWORD *)(v2 + 40) + v4);
    if (v7)
    {
      v8 = glpABIGetTypeSize(0, *(_QWORD *)(v7 + 24), 0);
      v6 = glpTypeSizeGetSize(v8) + v6;
      v3 = *(unsigned int *)(v2 + 32);
    }
    ++v5;
    v4 += 32;
  }
  while (v5 < v3);
  return v6;
}

uint64_t glpLinkedProgramGetDefaultUniformLocationCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 224);
}

__n128 glpLinkedProgramGetOverrides(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(a1 + 272);
  v3 = *(_OWORD *)(a1 + 304);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 288);
  *(_OWORD *)(a2 + 32) = v3;
  *(__n128 *)a2 = result;
  return result;
}

char *glpPrimitiveTypeToString(unsigned int a1)
{
  if (a1 >= 0x4F)
    abort();
  return off_24F9472D0[a1];
}

uint64_t glpGetVectorType(int a1, int a2)
{
  char *v2;

  if ((a2 - 5) <= 0xFFFFFFFB)
    goto LABEL_14;
  if (a1 <= 8)
  {
    if (a1 == 1)
    {
      v2 = (char *)&GLP_VECTOR_TYPES + 4 * (a2 - 1);
      return *(unsigned int *)v2;
    }
    if (a1 == 5)
    {
      v2 = (char *)&GLP_VECTOR_TYPES + 4 * (a2 - 1) + 32;
      return *(unsigned int *)v2;
    }
LABEL_14:
    abort();
  }
  if (a1 == 9)
  {
    v2 = (char *)&GLP_VECTOR_TYPES + 4 * (a2 - 1) + 48;
    return *(unsigned int *)v2;
  }
  if (a1 == 36)
  {
    v2 = (char *)&GLP_VECTOR_TYPES + 4 * (a2 - 1) + 64;
    return *(unsigned int *)v2;
  }
  if (a1 != 62)
    goto LABEL_14;
  v2 = (char *)&GLP_VECTOR_TYPES + 4 * (a2 - 1) + 16;
  return *(unsigned int *)v2;
}

uint64_t glpPrimitiveTypeGetCategory(unsigned int a1)
{
  if (a1 >= 0x4F)
    abort();
  return dword_22D806564[a1];
}

uint64_t glpPrimitiveVectorGetLength(uint64_t a1)
{
  int v1;
  uint64_t result;

  v1 = a1;
  result = 2;
  switch(v1)
  {
    case 2:
    case 6:
    case 10:
    case 37:
    case 63:
      return result;
    case 3:
    case 4:
      result = a1;
      break;
    case 7:
    case 11:
    case 38:
    case 64:
      result = 3;
      break;
    case 8:
    case 12:
    case 39:
    case 65:
      result = 4;
      break;
    default:
      abort();
  }
  return result;
}

uint64_t glpPrimitiveVectorGetElementType(int a1)
{
  uint64_t result;

  result = 1;
  switch(a1)
  {
    case 2:
    case 3:
    case 4:
      return result;
    case 6:
    case 7:
    case 8:
      result = 5;
      break;
    case 10:
    case 11:
    case 12:
      result = 9;
      break;
    case 37:
    case 38:
    case 39:
      result = 36;
      break;
    case 63:
    case 64:
    case 65:
      result = 62;
      break;
    default:
      abort();
  }
  return result;
}

uint64_t glpPrimitiveMatrixGetColumns(int a1)
{
  uint64_t result;

  result = 2;
  switch(a1)
  {
    case 13:
    case 22:
    case 23:
    case 66:
    case 69:
    case 70:
      return result;
    case 14:
    case 24:
    case 25:
    case 67:
    case 71:
    case 72:
      result = 3;
      break;
    case 15:
    case 26:
    case 27:
    case 68:
    case 73:
    case 74:
      result = 4;
      break;
    default:
      abort();
  }
  return result;
}

uint64_t glpPrimitiveMatrixGetRows(int a1)
{
  uint64_t result;

  result = 2;
  switch(a1)
  {
    case 13:
    case 24:
    case 26:
    case 66:
    case 71:
    case 73:
      return result;
    case 14:
    case 22:
    case 27:
    case 67:
    case 69:
    case 74:
      result = 3;
      break;
    case 15:
    case 23:
    case 25:
    case 68:
    case 70:
    case 72:
      result = 4;
      break;
    default:
      abort();
  }
  return result;
}

uint64_t glpPrimitiveMatrixGetColumnType(int a1)
{
  uint64_t result;

  result = 2;
  switch(a1)
  {
    case 13:
    case 24:
    case 26:
      return result;
    case 14:
    case 22:
    case 27:
      result = 3;
      break;
    case 15:
    case 23:
    case 25:
      result = 4;
      break;
    case 66:
    case 71:
    case 73:
      result = 63;
      break;
    case 67:
    case 69:
    case 74:
      result = 64;
      break;
    case 68:
    case 70:
    case 72:
      result = 65;
      break;
    default:
      abort();
  }
  return result;
}

uint64_t glpPrimitiveMatrixGetRowType(int a1)
{
  uint64_t result;

  result = 2;
  switch(a1)
  {
    case 13:
    case 22:
    case 23:
      return result;
    case 14:
    case 24:
    case 25:
      result = 3;
      break;
    case 15:
    case 26:
    case 27:
      result = 4;
      break;
    case 66:
    case 69:
    case 70:
      result = 63;
      break;
    case 67:
    case 71:
    case 72:
      result = 64;
      break;
    case 68:
    case 73:
    case 74:
      result = 65;
      break;
    default:
      abort();
  }
  return result;
}

uint64_t glpPrimitiveMatrixGetElementType(int a1)
{
  uint64_t result;

  result = 1;
  switch(a1)
  {
    case 13:
    case 14:
    case 15:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
      return result;
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
      result = 62;
      break;
    default:
      abort();
  }
  return result;
}

uint64_t glpPrimitiveSamplerGetPPTextarget(int a1)
{
  uint64_t result;

  result = 4;
  switch(a1)
  {
    case 16:
    case 40:
    case 48:
      return result;
    case 17:
    case 41:
    case 49:
      result = 3;
      break;
    case 18:
    case 42:
    case 50:
      result = 1;
      break;
    case 19:
    case 43:
    case 51:
      result = 0;
      break;
    case 20:
      result = 7;
      break;
    case 21:
      result = 6;
      break;
    case 28:
    case 44:
    case 52:
      result = 2;
      break;
    case 29:
      result = 5;
      break;
    case 30:
    case 45:
    case 53:
      result = 9;
      break;
    case 31:
    case 46:
    case 54:
      result = 10;
      break;
    case 32:
    case 47:
    case 55:
      result = 13;
      break;
    case 33:
      result = 11;
      break;
    case 34:
      result = 12;
      break;
    case 35:
      result = 8;
      break;
    case 56:
    case 58:
    case 60:
      result = 14;
      break;
    case 57:
    case 59:
    case 61:
      result = 15;
      break;
    case 75:
    case 77:
    case 78:
      result = 16;
      break;
    case 76:
      result = 17;
      break;
    default:
      abort();
  }
  return result;
}

uint64_t glpPrimitiveSamplerGetPPDatatype(int a1)
{
  uint64_t result;

  result = 0;
  switch(a1)
  {
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 56:
    case 57:
    case 75:
    case 76:
      return result;
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 58:
    case 59:
    case 77:
      result = 2;
      break;
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 60:
    case 61:
    case 78:
      result = 3;
      break;
    default:
      abort();
  }
  return result;
}

uint64_t glpPrimitiveTypeGetScalarType(uint64_t a1)
{
  uint64_t result;

  switch(glpPrimitiveTypeGetCategory(a1))
  {
    case 1u:
      result = a1;
      break;
    case 2u:
      result = glpPrimitiveVectorGetElementType(a1);
      break;
    case 3u:
      result = glpPrimitiveMatrixGetElementType(a1);
      break;
    default:
      abort();
  }
  return result;
}

uint64_t glpPrimitiveTypeGetScalarCount(uint64_t a1)
{
  uint64_t result;
  int Columns;

  result = glpPrimitiveTypeGetCategory(a1);
  switch((int)result)
  {
    case 1:
      return result;
    case 2:
      result = glpPrimitiveVectorGetLength(a1);
      break;
    case 3:
      Columns = glpPrimitiveMatrixGetColumns(a1);
      result = glpPrimitiveMatrixGetRows(a1) * Columns;
      break;
    default:
      abort();
  }
  return result;
}

uint64_t glpPrimitiveTypeGetMaxComponentsPerVec4(uint64_t a1)
{
  unsigned int ScalarType;
  unsigned int v2;

  ScalarType = glpPrimitiveTypeGetScalarType(a1);
  if (ScalarType > 0x3E)
    goto LABEL_7;
  if (((1 << ScalarType) & 0x1000000222) == 0)
  {
    if (ScalarType == 62)
    {
      v2 = 8;
      return 0x10 / v2;
    }
LABEL_7:
    abort();
  }
  v2 = 4;
  return 0x10 / v2;
}

uint64_t glpPrimitiveTypeGetNumVec4s(uint64_t a1)
{
  uint64_t ColumnType;
  int Category;
  int Columns;
  char ScalarCount;
  unsigned __int8 MaxComponentsPerVec4;

  ColumnType = a1;
  Category = glpPrimitiveTypeGetCategory(a1);
  if ((Category - 1) >= 2)
  {
    if (Category != 3)
      abort();
    Columns = glpPrimitiveMatrixGetColumns(ColumnType);
    ColumnType = glpPrimitiveMatrixGetColumnType(ColumnType);
  }
  else
  {
    Columns = 1;
  }
  ScalarCount = glpPrimitiveTypeGetScalarCount(ColumnType);
  MaxComponentsPerVec4 = glpPrimitiveTypeGetMaxComponentsPerVec4(ColumnType);
  return Columns * ((ScalarCount + MaxComponentsPerVec4 - 1) / MaxComponentsPerVec4);
}

char *deserialErrorString(unsigned int a1)
{
  if (a1 >= 7)
    abort();
  return off_24F947548[a1];
}

uint64_t glpInitDeserialContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t result;

  *(_QWORD *)(a1 + 200) = a2;
  *(_QWORD *)(a1 + 208) = 4096;
  result = (*(uint64_t (**)(_QWORD, uint64_t, const char *))(a2 + 8))(*(_QWORD *)a2, 0x8000, "Vector Storage (void *)");
  *(_QWORD *)(a1 + 216) = result;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = a3;
  *(_QWORD *)(a1 + 248) = a4;
  *(_DWORD *)(a1 + 256) = a5;
  *(_DWORD *)(a1 + 260) = 0;
  return result;
}

uint64_t glpDestroyDeserialContext(_QWORD *a1)
{
  _QWORD *i;

  for (i = (_QWORD *)a1[28]; i; i = (_QWORD *)a1[28])
  {
    a1[28] = *i;
    (*(void (**)(_QWORD))(a1[25] + 24))(*(_QWORD *)a1[25]);
  }
  return (*(uint64_t (**)(_QWORD, _QWORD))(a1[25] + 24))(*(_QWORD *)a1[25], a1[27]);
}

double deserialize_double(uint64_t a1)
{
  uint64_t v1;
  double result;

  v1 = *(unsigned int *)(a1 + 260);
  if (v1 + 8 > (unint64_t)*(unsigned int *)(a1 + 256))
    glpDeserialError(a1, 1u);
  result = *(double *)(*(_QWORD *)(a1 + 248) + v1);
  *(_DWORD *)(a1 + 260) = v1 + 8;
  return result;
}

void glpDeserialError(uint64_t a1, unsigned int a2)
{
  char v4;
  unsigned __int8 md[17];

  CC_SHA1(*(const void **)(a1 + 248), *(_DWORD *)(a1 + 256), md);
  v4 = deserialErrorString(a2);
  glpSetCrashLogMessagef("GLProgrammability: deserial error (%s) at offset %u into data of length %u with SHA1 %02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x", md[10], md[11], md[12], md[13], md[14], md[15], md[16], v4);
  _longjmp((int *)a1, a2);
}

BOOL glpStringsEqual(const char *a1, uint64_t a2, char *__s2, uint64_t a4)
{
  return a2 == a4 && strncmp(a1, __s2, a2) == 0;
}

uint64_t glpPrimitiveTypeGetPrimitiveType(uint64_t a1)
{
  return *(unsigned int *)(a1 + 4);
}

uint64_t glpTypeGetKind(unsigned int *a1)
{
  return *a1;
}

uint64_t glpAggregateTypeGetElementCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 4);
}

uint64_t glpAggregateTypeGetElementType(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * a2);
}

uint64_t glpAggregateTypeGetElementFlags(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2);
}

uint64_t glpArrayTypeGetElementType(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t glpBankTypeGetElementType(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t glpBankTypeGetElementCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 4);
}

uint64_t glpArrayTypeGetElementCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 4);
}

uint64_t glpTypeGetSamplerCount(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int Category;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int SamplerCount;

  v2 = 0;
  switch(*(_DWORD *)a1)
  {
    case 0:
      Category = glpPrimitiveTypeGetCategory(*(_DWORD *)(a1 + 4));
      if (Category >= 5)
        goto LABEL_21;
      return dword_22D8066BC[Category];
    case 1:
      v8 = *(unsigned int *)(a1 + 4);
      if (!(_DWORD)v8)
        return 0;
      v9 = 0;
      LODWORD(v2) = 0;
      v10 = 8 * v8;
      do
      {
        SamplerCount = glpTypeGetSamplerCount(*(_QWORD *)(*(_QWORD *)(a1 + 8) + v9));
        if (SamplerCount == -1)
          v2 = 0xFFFFFFFFLL;
        else
          v2 = (SamplerCount + v2);
        v9 += 8;
      }
      while (v10 != v9);
      return v2;
    case 2:
    case 3:
      v3 = glpTypeGetSamplerCount(*(_QWORD *)(a1 + 16));
      v4 = *(_DWORD *)(a1 + 4);
      if (v3)
        v5 = -1;
      else
        v5 = 0;
      v6 = v4 * v3;
      if (v3 == -1)
        v6 = -1;
      if (v4 == -1)
        return v5;
      else
        return v6;
    case 5:
      return v2;
    default:
LABEL_21:
      abort();
  }
}

uint64_t glpTypeIsAtomic(_DWORD *a1)
{
  uint64_t result;
  int Category;

  if ((*a1 - 1) >= 2)
  {
    if (!*a1)
    {
      Category = glpPrimitiveTypeGetCategory(a1[1]);
      result = 1;
      switch(Category)
      {
        case 1:
        case 2:
        case 4:
          return result;
        case 3:
          return 0;
        default:
          break;
      }
    }
    abort();
  }
  return 0;
}

uint64_t glpGetPrimitiveType(uint64_t a1)
{
  void *v2;

  if (glpGetPrimitiveType_glProgrammabilityHandle)
  {
    v2 = glpGetPrimitiveType_LIB_glpGetPrimitiveType;
  }
  else
  {
    glpGetPrimitiveType_glProgrammabilityHandle = (uint64_t)dlopen("/System/Library/Frameworks/OpenGLES.framework/libGLProgrammability.dylib", 5);
    v2 = dlsym((void *)glpGetPrimitiveType_glProgrammabilityHandle, "glpGetPrimitiveType");
    glpGetPrimitiveType_LIB_glpGetPrimitiveType = v2;
  }
  return ((uint64_t (*)(uint64_t))v2)(a1);
}

uint64_t glpStructTypeGetSizesAndAlignments(unsigned int a1, uint64_t a2, uint64_t a3, _DWORD *a4, unsigned int *a5, uint64_t a6)
{
  unsigned int TypeSize;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int Size;
  unsigned int v24;
  unsigned int *v25;
  uint64_t result;
  unsigned int *v27;
  _DWORD *v28;
  unsigned int *v29;

  TypeSize = glpMakeTypeSize(0);
  v12 = glpABIGetMinimumStructAlignment(a1);
  v13 = *(unsigned int *)(a2 + 4);
  v28 = a4;
  v29 = a5;
  if ((int)v13 >= 1)
  {
    v14 = 0;
    v15 = 8 * v13;
    do
    {
      v16 = TypeSize;
      if (glpTypeSizeIsValid(TypeSize))
      {
        v17 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + v14);
        v18 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + v14) | a3;
        v19 = glpABIGetTypeSize(a1, v17, v18);
        v20 = v19;
        if (glpTypeSizeIsValid(v19))
        {
          v21 = glpABIGetTypeAlign(a1, v17, v18);
          v22 = (v21 + glpTypeSizeGetSize(v16) - 1) / v21 * v21;
          Size = glpTypeSizeGetSize(v20);
          v24 = Size;
          if (v21 > v12)
            v12 = v21;
          TypeSize = glpMakeTypeSize(v22 + Size);
          if (a6)
          {
            v25 = (unsigned int *)(a6 + v14);
            *v25 = v22;
            v25[1] = v24;
          }
        }
        else
        {
          TypeSize = glpInvalidTypeSize();
        }
      }
      v14 += 8;
    }
    while (v15 != v14);
  }
  result = glpTypeSizeIsValid(TypeSize);
  if ((_DWORD)result)
  {
    if (v28)
    {
      result = glpAlignTypeSize(TypeSize, v12);
      *v28 = result;
    }
    v27 = v29;
    if (!v29)
      return result;
LABEL_20:
    *v27 = v12;
    return result;
  }
  if (v28)
  {
    result = glpInvalidTypeSize();
    *v28 = result;
  }
  v27 = v29;
  if (v29)
  {
    v12 = -1;
    goto LABEL_20;
  }
  return result;
}

_QWORD *createBitCodeStorage()
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  result[1] = 0;
  result[2] = 0;
  *result = result + 3;
  return result;
}

uint64_t writeByteCode(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v6 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 1;
  v8 = 0;
  v9 = 0;
  v7 = 0;
  v5 = MEMORY[0x24BED83E0] + 16;
  v13 = a2;
  llvm::raw_ostream::SetUnbuffered((llvm::raw_ostream *)&v5);
  llvm::WriteBitcodeToFile();
  v3 = *(_QWORD *)(a2 + 8);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v5);
  return v3;
}

void *copyBitCodeStorage(_QWORD *a1, _DWORD *a2, unint64_t a3, int a4)
{
  void *v7;
  const void *v8;
  void *result;

  if (a1[1] + 8 > a3)
    copyBitCodeStorage_cold_1();
  v7 = a2 + 2;
  v8 = (const void *)llvm::SmallString<0u>::c_str(a1);
  result = memcpy(v7, v8, a1[1]);
  *a2 = *((_DWORD *)a1 + 2) + 4;
  a2[1] = a4;
  return result;
}

uint64_t llvm::SmallString<0u>::c_str(_QWORD *a1)
{
  unint64_t v2;

  llvm::SmallVectorTemplateBase<char,true>::push_back((uint64_t)a1, 0);
  v2 = a1[1] - 1;
  if (a1[2] < v2)
    llvm::SmallString<0u>::c_str();
  a1[1] = v2;
  return *a1;
}

void **deleteBitCodeStorage(void **result)
{
  void **v1;
  void **v2;

  if (result)
  {
    v2 = result + 3;
    v1 = (void **)*result;
    if (v1 != v2)
      free(v1);
    JUMPOUT(0x22E3170D8);
  }
  return result;
}

uint64_t glpLLVMSetupModule()
{
  LLVMSetTarget();
  return LLVMSetDataLayout();
}

uint64_t glpAddNamedMetadataOperand(int a1, char *__s, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;

  if (__s)
    strlen(__s);
  result = llvm::Module::getOrInsertNamedMetadata();
  if (a3 && result)
  {
    if (*(_BYTE *)(a3 + 16) == 23)
      v5 = a3;
    else
      v5 = 0;
    v6 = *(_BYTE **)(v5 + 24);
    v7 = v6;
    result = llvm::isa_impl_wrap<llvm::MDNode,llvm::Metadata const*,llvm::Metadata const*>::doit(&v7);
    if ((result & 1) == 0)
      glpAddNamedMetadataOperand_cold_1();
    if (v6)
      return llvm::NamedMDNode::addOperand();
  }
  return result;
}

uint64_t glpLLVMBasicBlockGetTerminator(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1 + 40);
  if (v1 == a1 + 40)
    return 0;
  v2 = v1 - 24;
  if (v1)
    v3 = v1 - 24;
  else
    v3 = 0;
  if (*(unsigned __int8 *)(v3 + 16) - 29 >= 0xB)
    return 0;
  else
    return v2;
}

uint64_t glpLLVMGetInfinity()
{
  return llvm::ConstantFP::get();
}

BOOL glpLLVMBasicBlockEmpty(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40) == a1 + 40;
}

uint64_t glpLLVMSetFastMathFlags(uint64_t result, int a2, int a3)
{
  int v3;

  if (a3)
    v3 = -1;
  else
    v3 = 121;
  if (a2)
    v3 = 24;
  *(_DWORD *)(result + 96) = v3;
  return result;
}

void GLPDebugInfoContext::~GLPDebugInfoContext(GLPDebugInfoContext *this)
{
  void *v2;

  llvm::DIBuilder::finalize(this);
  v2 = (void *)*((_QWORD *)this + 60);
  if (v2)
  {
    *((_QWORD *)this + 61) = v2;
    operator delete(v2);
  }
  llvm::DIBuilder::~DIBuilder(this);
}

uint64_t GLPDebugInfoContext::createCompileUnit(GLPDebugInfoContext *this, const char *__s, const char *a3)
{
  uint64_t result;

  if (!__s)
  {
    if (!a3)
      goto LABEL_5;
    goto LABEL_3;
  }
  strlen(__s);
  if (a3)
LABEL_3:
    strlen(a3);
LABEL_5:
  llvm::DIBuilder::createFile();
  result = llvm::DIBuilder::createCompileUnit();
  *((_QWORD *)this + 58) = result;
  return result;
}

uint64_t GLPDebugInfoContext::createFile(GLPDebugInfoContext *this, const char *__s, const char *a3)
{
  uint64_t result;

  if (!__s)
  {
    if (!a3)
      goto LABEL_5;
    goto LABEL_3;
  }
  strlen(__s);
  if (a3)
LABEL_3:
    strlen(a3);
LABEL_5:
  result = llvm::DIBuilder::createFile();
  *((_QWORD *)this + 57) = result;
  return result;
}

void GLPDebugInfoContext::createFunction(GLPDebugInfoContext *this, const char *__s, llvm::Function *a3)
{
  uint64_t Function;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  if (__s)
    strlen(__s);
  llvm::DIBuilder::getOrCreateTypeArray();
  llvm::DIBuilder::createSubroutineType();
  Function = llvm::DIBuilder::createFunction();
  if (llvm::Function::getSubprogram(a3))
    GLPDebugInfoContext::createFunction();
  llvm::Function::setSubprogram();
  *((_QWORD *)this + 56) = Function;
  v6 = *((_QWORD *)this + 60);
  v7 = (uint64_t *)*((_QWORD *)this + 61);
  v8 = ((uint64_t)v7 - v6) >> 3;
  if (v8)
  {
    if (v8 != 1)
      GLPDebugInfoContext::createFunction();
    *((_QWORD *)this + 61) = --v7;
  }
  v9 = *((_QWORD *)this + 62);
  if ((unint64_t)v7 >= v9)
  {
    v11 = ((uint64_t)v7 - v6) >> 3;
    if ((unint64_t)(v11 + 1) >> 61)
      abort();
    v12 = v9 - v6;
    v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
    {
      v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::MDNode *>>((uint64_t)this + 496, v14);
      Function = *((_QWORD *)this + 56);
    }
    else
    {
      v15 = 0;
    }
    v16 = (uint64_t *)&v15[8 * v11];
    v17 = &v15[8 * v14];
    *v16 = Function;
    v10 = v16 + 1;
    v19 = (char *)*((_QWORD *)this + 60);
    v18 = (char *)*((_QWORD *)this + 61);
    if (v18 != v19)
    {
      do
      {
        v20 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *--v16 = v20;
      }
      while (v18 != v19);
      v18 = (char *)*((_QWORD *)this + 60);
    }
    *((_QWORD *)this + 60) = v16;
    *((_QWORD *)this + 61) = v10;
    *((_QWORD *)this + 62) = v17;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v7 = Function;
    v10 = v7 + 1;
  }
  *((_QWORD *)this + 61) = v10;
}

_QWORD *glpLLVMDIBuilderCreate(uint64_t *a1)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;

  v2 = operator new();
  result = (_QWORD *)MEMORY[0x22E317090](v2, a1, 1, 0);
  v4 = *a1;
  result[58] = 0;
  result[59] = v4;
  result[61] = 0;
  result[62] = 0;
  result[60] = 0;
  return result;
}

uint64_t glpLLVMDIBuilderCreateCompileUnit(GLPDebugInfoContext *a1, const char *a2)
{
  return GLPDebugInfoContext::createCompileUnit(a1, a2, "");
}

uint64_t glpLLVMDIBuilderCreateFile(GLPDebugInfoContext *a1, const char *a2)
{
  return GLPDebugInfoContext::createFile(a1, a2, "");
}

void glpLLVMDIBuilderCreateSubProgram(GLPDebugInfoContext *a1, llvm::Function *a2, char *__s)
{
  if (!a2)
    glpLLVMDIBuilderCreateSubProgram_cold_1();
  if (*((_BYTE *)a2 + 16))
    glpLLVMDIBuilderCreateSubProgram_cold_2();
  GLPDebugInfoContext::createFunction(a1, __s, a2);
}

uint64_t glpLLVMGetDebugLocation()
{
  llvm::DILocation::getImpl();
  return llvm::MetadataAsValue::get();
}

GLPDebugInfoContext *glpLLVMDIBuilderDelete(GLPDebugInfoContext *result)
{
  if (result)
  {
    GLPDebugInfoContext::~GLPDebugInfoContext(result);
    JUMPOUT(0x22E3170D8);
  }
  return result;
}

uint64_t llvm::raw_ostream::SetUnbuffered(llvm::raw_ostream *this)
{
  if (*((_QWORD *)this + 4) != *((_QWORD *)this + 2))
    llvm::raw_ostream::flush_nonempty(this);
  return llvm::raw_ostream::SetBufferAndMode();
}

void llvm::DIBuilder::~DIBuilder(llvm::DIBuilder *this)
{
  char *v2;
  char *v3;
  char *v4;
  void **v5;

  llvm::DenseMapBase<llvm::DenseMap<llvm::MDNode *,llvm::SmallVector<llvm::TypedTrackingMDRef<llvm::MDNode>,1u>,llvm::DenseMapInfo<llvm::MDNode *,void>,llvm::detail::DenseMapPair<llvm::MDNode *,llvm::SmallVector<llvm::TypedTrackingMDRef<llvm::MDNode>,1u>>>,llvm::MDNode *,llvm::SmallVector<llvm::TypedTrackingMDRef<llvm::MDNode>,1u>,llvm::DenseMapInfo<llvm::MDNode *,void>,llvm::detail::DenseMapPair<llvm::MDNode *,llvm::SmallVector<llvm::TypedTrackingMDRef<llvm::MDNode>,1u>>>::destroyAll((char **)this + 53);
  llvm::deallocate_buffer(*((llvm **)this + 53), (void *)(32 * *((unsigned int *)this + 110)));
  llvm::DenseMapBase<llvm::DenseMap<llvm::MDNode *,llvm::SmallVector<llvm::TypedTrackingMDRef<llvm::MDNode>,1u>,llvm::DenseMapInfo<llvm::MDNode *,void>,llvm::detail::DenseMapPair<llvm::MDNode *,llvm::SmallVector<llvm::TypedTrackingMDRef<llvm::MDNode>,1u>>>,llvm::MDNode *,llvm::SmallVector<llvm::TypedTrackingMDRef<llvm::MDNode>,1u>,llvm::DenseMapInfo<llvm::MDNode *,void>,llvm::detail::DenseMapPair<llvm::MDNode *,llvm::SmallVector<llvm::TypedTrackingMDRef<llvm::MDNode>,1u>>>::destroyAll((char **)this + 50);
  llvm::deallocate_buffer(*((llvm **)this + 50), (void *)(32 * *((unsigned int *)this + 104)));
  llvm::SmallVector<llvm::TypedTrackingMDRef<llvm::MDNode>,4u>::~SmallVector((char **)this + 43);
  v5 = (void **)((char *)this + 320);
  std::vector<std::pair<llvm::MDNode *,llvm::SetVector<llvm::Metadata *,std::vector<llvm::Metadata *>,llvm::DenseSet<llvm::Metadata *,llvm::DenseMapInfo<llvm::Metadata *,void>>>>>::__destroy_vector::operator()[abi:nn180100](&v5);
  llvm::deallocate_buffer(*((llvm **)this + 37), (void *)(16 * *((unsigned int *)this + 78)));
  llvm::SmallVector<llvm::TypedTrackingMDRef<llvm::MDNode>,4u>::~SmallVector((char **)this + 31);
  v2 = (char *)*((_QWORD *)this + 25);
  if (v2 != (char *)this + 216)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 19);
  if (v3 != (char *)this + 168)
    free(v3);
  llvm::SmallVector<llvm::TypedTrackingMDRef<llvm::MDNode>,4u>::~SmallVector((char **)this + 13);
  v4 = (char *)*((_QWORD *)this + 7);
  if (v4 != (char *)this + 72)
    free(v4);
}

char **llvm::DenseMapBase<llvm::DenseMap<llvm::MDNode *,llvm::SmallVector<llvm::TypedTrackingMDRef<llvm::MDNode>,1u>,llvm::DenseMapInfo<llvm::MDNode *,void>,llvm::detail::DenseMapPair<llvm::MDNode *,llvm::SmallVector<llvm::TypedTrackingMDRef<llvm::MDNode>,1u>>>,llvm::MDNode *,llvm::SmallVector<llvm::TypedTrackingMDRef<llvm::MDNode>,1u>,llvm::DenseMapInfo<llvm::MDNode *,void>,llvm::detail::DenseMapPair<llvm::MDNode *,llvm::SmallVector<llvm::TypedTrackingMDRef<llvm::MDNode>,1u>>>::destroyAll(char **result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((unsigned int *)result + 4);
  if ((_DWORD)v1)
  {
    v2 = 32 * v1;
    result = (char **)(*result + 8);
    do
    {
      if (((unint64_t)*(result - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
        result = llvm::SmallVector<llvm::TypedTrackingMDRef<llvm::MDNode>,1u>::~SmallVector(result);
      result += 4;
      v2 -= 32;
    }
    while (v2);
  }
  return result;
}

char **llvm::SmallVector<llvm::TypedTrackingMDRef<llvm::MDNode>,1u>::~SmallVector(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 8 * v3;
    v5 = v2 - 8;
    do
    {
      if (*(_QWORD *)&v5[v4])
        llvm::MetadataTracking::untrack();
      v4 -= 8;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

char **llvm::SmallVector<llvm::TypedTrackingMDRef<llvm::MDNode>,4u>::~SmallVector(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 8 * v3;
    v5 = v2 - 8;
    do
    {
      if (*(_QWORD *)&v5[v4])
        llvm::MetadataTracking::untrack();
      v4 -= 8;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

void std::vector<std::pair<llvm::MDNode *,llvm::SetVector<llvm::Metadata *,std::vector<llvm::Metadata *>,llvm::DenseSet<llvm::Metadata *,llvm::DenseMapInfo<llvm::Metadata *,void>>>>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        std::allocator<std::pair<llvm::MDNode *,llvm::SetVector<llvm::Metadata *,std::vector<llvm::Metadata *>,llvm::DenseSet<llvm::Metadata *,llvm::DenseMapInfo<llvm::Metadata *,void>>>>>::destroy[abi:nn180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::allocator<std::pair<llvm::MDNode *,llvm::SetVector<llvm::Metadata *,std::vector<llvm::Metadata *>,llvm::DenseSet<llvm::Metadata *,llvm::DenseMapInfo<llvm::Metadata *,void>>>>>::destroy[abi:nn180100](uint64_t a1, uint64_t a2)
{
  void *v3;

  v3 = *(void **)(a2 + 32);
  if (v3)
  {
    *(_QWORD *)(a2 + 40) = v3;
    operator delete(v3);
  }
  return llvm::deallocate_buffer(*(llvm **)(a2 + 8), (void *)(8 * *(unsigned int *)(a2 + 24)));
}

uint64_t llvm::SmallVectorTemplateBase<char,true>::push_back(uint64_t result, char a2)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;

  v3 = (_QWORD *)result;
  v4 = *(_QWORD *)(result + 8);
  if ((unint64_t)(v4 + 1) > *(_QWORD *)(result + 16))
  {
    result = llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v4 = v3[1];
  }
  *(_BYTE *)(*v3 + v4) = a2;
  v5 = v3[1] + 1;
  if (v3[2] < v5)
    llvm::SmallVectorTemplateBase<char,true>::push_back();
  v3[1] = v5;
  return result;
}

uint64_t llvm::isa_impl_wrap<llvm::MDNode,llvm::Metadata const*,llvm::Metadata const*>::doit(_BYTE **a1)
{
  _BYTE *v1;

  v1 = *a1;
  if (!v1)
    llvm::isa_impl_wrap<llvm::MDNode,llvm::Metadata const*,llvm::Metadata const*>::doit();
  return llvm::MDNode::classof(v1);
}

uint64_t llvm::MDNode::classof(_BYTE *a1)
{
  return (*a1 < 0x23uLL) & (0x7FFFFFFF0uLL >> *a1);
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::MDNode *>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(8 * a2);
}

uint64_t glpASTNodeGetChildCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 4);
}

uint64_t glpASTNodeGetChild(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * a2);
}

uint64_t glpTopLevelNodeGetGlobalTypeQualifier(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *i;
  uint64_t result;

  v2 = *(unsigned int *)(a1 + 64);
  if (!(_DWORD)v2)
    return 0;
  for (i = *(uint64_t **)(a1 + 8); ; ++i)
  {
    result = *i;
    if ((unint64_t)(*i + 1) >= 2
      && *(_DWORD *)(result + 16) == 63
      && *(_QWORD *)(result + 32)
      && (*(_QWORD *)(result + 24) & 0xFFFFFFFFFFFFFF7FLL) == a2)
    {
      break;
    }
    if (!--v2)
      return 0;
  }
  return result;
}

uint64_t glpTopLevelNodeGetDefCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 64);
}

uint64_t glpTopLevelNodeGetDef(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * a2);
}

uint64_t glpASTNodeGetSaType(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t glpASTNodeGetSaFlags(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t glpASTNodeGetKind(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

__n128 glpASTNodeGetLocation@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *(__n128 *)(a1 + 40);
  *a2 = result;
  a2[1].n128_u64[0] = *(_QWORD *)(a1 + 56);
  return result;
}

uint64_t glpUnaryOperatorNodeGetExpr(uint64_t a1)
{
  return **(_QWORD **)(a1 + 8);
}

uint64_t glpBinaryOperatorNodeGetLhs(uint64_t a1)
{
  return **(_QWORD **)(a1 + 8);
}

uint64_t glpBinaryOperatorNodeGetRhs(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
}

uint64_t glpTypeConversionNodeGetToType(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

BOOL glpIsConstantNode(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) == 3;
}

uint64_t glpConstantNodeGetType(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

uint64_t glpConstantNodeGetValue(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t glpWriteOutputNodeGetExtra(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

uint64_t glpCommaExprNodeGetExprCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 68);
}

uint64_t glpCommaExprNodeGetExpr(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * a2);
}

uint64_t glpParameterDeclarationNodeGetExtra(uint64_t a1)
{
  return *(_QWORD *)(a1 + 80);
}

uint64_t glpFunctionPrototypeNodeGetName(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

uint64_t glpFunctionPrototypeNodeGetExtra(uint64_t a1)
{
  return *(_QWORD *)(a1 + 80);
}

uint64_t glpFunctionPrototypeNodeGetReturnOutParam(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
}

uint64_t glpFunctionPrototypeNodeGetParameterCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 88);
}

uint64_t glpFunctionPrototypeNodeGetParameter(uint64_t a1, int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * (a2 + 2));
}

uint64_t glpVariableDeclarationNodeGetExtra(uint64_t a1)
{
  return *(_QWORD *)(a1 + 88);
}

uint64_t glpVariableDeclarationGroupNodeGetDeclarationCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 64);
}

uint64_t glpVariableDeclarationGroupNodeGetDeclaration(uint64_t a1, int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * (a2 + 1));
}

uint64_t glpFunctionDefinitionNodeGetPrototype(uint64_t a1)
{
  return **(_QWORD **)(a1 + 8);
}

uint64_t glpFunctionDefinitionNodeGetBody(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
}

uint64_t glpInterfaceBlockNodeGetExtra(uint64_t a1)
{
  return *(_QWORD *)(a1 + 112);
}

uint64_t glpGlobalTypeQualifierNodeGetLayout(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

uint64_t glpExpressionStatementNodeGetExpr(uint64_t a1)
{
  return **(_QWORD **)(a1 + 8);
}

uint64_t glpBlockNodeGetStatementCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 68);
}

uint64_t glpBlockNodeGetStatement(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * a2);
}

uint64_t glpIfStatementNodeGetCond(uint64_t a1)
{
  return **(_QWORD **)(a1 + 8);
}

uint64_t glpIfStatementNodeGetIfStatement(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
}

uint64_t glpIfStatementNodeGetElseStatement(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
}

uint64_t glpLoopStatementNodeGetBody0(uint64_t a1)
{
  return **(_QWORD **)(a1 + 8);
}

uint64_t glpLoopStatementNodeGetBody1(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
}

uint64_t glpSwitchStatementNodeGetExpr(uint64_t a1)
{
  return **(_QWORD **)(a1 + 8);
}

uint64_t glpSwitchStatementNodeGetBody(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
}

BOOL glpIsCaseStatementNode(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) == 70;
}

uint64_t glpCaseStatementNodeGetConstValue(uint64_t a1)
{
  return **(_QWORD **)(a1 + 8);
}

uint64_t glpRawCallNodeGetExtra(uint64_t a1)
{
  return *(_QWORD *)(a1 + 80);
}

uint64_t glpSubroutineRawCallNodeGetExtra(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

uint64_t glpSubroutineRawCallNodeGetIndexExpr(uint64_t a1)
{
  return **(_QWORD **)(a1 + 8);
}

uint64_t glpOffsetNodeGetSwizzle(uint64_t a1)
{
  return *(unsigned int *)(a1 + 72);
}

uint64_t glpOffsetNodeGetPreSwizzlePrimitiveType(uint64_t a1)
{
  return *(unsigned int *)(a1 + 76);
}

uint64_t glpOffsetNodeGetCompStride(uint64_t a1)
{
  return *(unsigned int *)(a1 + 80);
}

uint64_t glpOffsetNodeGetBankIndex(uint64_t a1)
{
  return **(_QWORD **)(a1 + 8);
}

uint64_t glpOffsetNodeGetOffsetExpr(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
}

uint64_t glpOffsetNodeGetVectorElementExpr(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
}

uint64_t glpDerefNodeGetOffset(uint64_t a1)
{
  return **(_QWORD **)(a1 + 8);
}

uint64_t glpLValueNodeGetVariableExtra(uint64_t a1)
{
  return *(_QWORD *)(a1 + 80);
}

uint64_t glpRValueNodeGetBase(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
}

uint64_t glpPPStreamOpNodeGetReturnPrimitiveType(uint64_t a1)
{
  return *(unsigned int *)(a1 + 72);
}

uint64_t glpPPStreamOpNodeGetOpcode(uint64_t a1)
{
  return *(unsigned int *)(a1 + 76);
}

uint64_t glpPPStreamOpNodeGetOpPrimitiveType(uint64_t a1)
{
  return *(unsigned int *)(a1 + 80);
}

uint64_t glpPPStreamOpNodeGetHasSrctex(uint64_t a1)
{
  return *(unsigned int *)(a1 + 84);
}

uint64_t glpPPStreamOpNodeGetHasOffset(uint64_t a1)
{
  return *(unsigned int *)(a1 + 88);
}

uint64_t glpSubroutineUniformNodeGetExtra(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

void PPStreamChunkListFree(_DWORD *a1)
{
  int v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = a1[4];
  if (v2 >= 1)
  {
    v3 = *(_QWORD **)a1;
    do
    {
      v4 = (_QWORD *)v3[1];
      free(v3);
      v3 = v4;
      --v2;
    }
    while (v2);
  }
  free(a1);
}

void PPStreamFree(_DWORD **a1)
{
  PPStreamChunkListFree(a1[2]);
  PPStreamChunkListFree(a1[3]);
  PPStreamChunkListFree(a1[4]);
  PPStreamChunkListFree(a1[10]);
  PPStreamChunkListFree(a1[5]);
  PPStreamChunkListFree(a1[7]);
  PPStreamChunkListFree(a1[9]);
  PPStreamChunkListFree(a1[6]);
  PPStreamChunkListFree(a1[8]);
  PPStreamChunkListFree(a1[11]);
  PPStreamChunkListFree(a1[13]);
  PPStreamChunkListFree(a1[14]);
  PPStreamChunkListFree(a1[16]);
  PPStreamChunkListFree(a1[15]);
  PPStreamChunkListFree(a1[12]);
  free(a1);
}

void *PPStreamChunkCreate(uint64_t a1)
{
  void *result;

  result = malloc_type_calloc(a1 + 24, 1uLL, 0x55E18C5uLL);
  if (!result)
    abort();
  return result;
}

char *PPStreamAddTempUsage(uint64_t a1, _OWORD *a2)
{
  char *result;
  uint64_t v5;
  uint64_t v6;

  result = (char *)PPStreamChunkCreate(16);
  result[16] = 2;
  *(_OWORD *)(result + 24) = *a2;
  v5 = *(_QWORD *)(a1 + 32);
  if (!*(_QWORD *)v5)
  {
    *(_QWORD *)v5 = result;
    *(_QWORD *)result = 0;
  }
  v6 = *(_QWORD *)(v5 + 8);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = result;
    *(_QWORD *)result = v6;
  }
  *((_QWORD *)result + 1) = 0;
  *(_QWORD *)(v5 + 8) = result;
  ++*(_DWORD *)(v5 + 16);
  return result;
}

_BYTE *PPStreamAddAddressUsage(uint64_t a1, _DWORD *a2)
{
  _BYTE *result;
  uint64_t v5;
  uint64_t v6;

  result = PPStreamChunkCreate(4);
  result[16] = 3;
  *((_DWORD *)result + 6) = *a2;
  v5 = *(_QWORD *)(a1 + 40);
  if (!*(_QWORD *)v5)
  {
    *(_QWORD *)v5 = result;
    *(_QWORD *)result = 0;
  }
  v6 = *(_QWORD *)(v5 + 8);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = result;
    *(_QWORD *)result = v6;
  }
  *((_QWORD *)result + 1) = 0;
  *(_QWORD *)(v5 + 8) = result;
  ++*(_DWORD *)(v5 + 16);
  return result;
}

char *PPStreamAddParamBinding(uint64_t a1, _OWORD *a2)
{
  char *result;
  uint64_t v5;
  uint64_t v6;

  result = (char *)PPStreamChunkCreate(16);
  result[16] = 5;
  *(_OWORD *)(result + 24) = *a2;
  v5 = *(_QWORD *)(a1 + 56);
  if (!*(_QWORD *)v5)
  {
    *(_QWORD *)v5 = result;
    *(_QWORD *)result = 0;
  }
  v6 = *(_QWORD *)(v5 + 8);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = result;
    *(_QWORD *)result = v6;
  }
  *((_QWORD *)result + 1) = 0;
  *(_QWORD *)(v5 + 8) = result;
  ++*(_DWORD *)(v5 + 16);
  return result;
}

_BYTE *PPStreamAddParamBindingArray(uint64_t a1, _QWORD *a2)
{
  _BYTE *result;
  uint64_t v5;
  uint64_t v6;

  result = PPStreamChunkCreate(8);
  result[16] = 7;
  *((_QWORD *)result + 3) = *a2;
  v5 = *(_QWORD *)(a1 + 72);
  if (!*(_QWORD *)v5)
  {
    *(_QWORD *)v5 = result;
    *(_QWORD *)result = 0;
  }
  v6 = *(_QWORD *)(v5 + 8);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = result;
    *(_QWORD *)result = v6;
  }
  *((_QWORD *)result + 1) = 0;
  *(_QWORD *)(v5 + 8) = result;
  ++*(_DWORD *)(v5 + 16);
  return result;
}

char *PPStreamAddAttribBinding(uint64_t a1, _OWORD *a2)
{
  char *result;
  uint64_t v5;
  uint64_t v6;

  result = (char *)PPStreamChunkCreate(16);
  result[16] = 4;
  *(_OWORD *)(result + 24) = *a2;
  v5 = *(_QWORD *)(a1 + 48);
  if (!*(_QWORD *)v5)
  {
    *(_QWORD *)v5 = result;
    *(_QWORD *)result = 0;
  }
  v6 = *(_QWORD *)(v5 + 8);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = result;
    *(_QWORD *)result = v6;
  }
  *((_QWORD *)result + 1) = 0;
  *(_QWORD *)(v5 + 8) = result;
  ++*(_DWORD *)(v5 + 16);
  return result;
}

char *PPStreamAddOutputBinding(uint64_t a1, _OWORD *a2)
{
  char *result;
  uint64_t v5;
  uint64_t v6;

  result = (char *)PPStreamChunkCreate(16);
  result[16] = 6;
  *(_OWORD *)(result + 24) = *a2;
  v5 = *(_QWORD *)(a1 + 64);
  if (!*(_QWORD *)v5)
  {
    *(_QWORD *)v5 = result;
    *(_QWORD *)result = 0;
  }
  v6 = *(_QWORD *)(v5 + 8);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = result;
    *(_QWORD *)result = v6;
  }
  *((_QWORD *)result + 1) = 0;
  *(_QWORD *)(v5 + 8) = result;
  ++*(_DWORD *)(v5 + 16);
  return result;
}

char *PPStreamAddOperation(uint64_t a1, uint64_t a2, const void *a3)
{
  size_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *(unsigned int *)(a2 + 72);
  if ((_DWORD)v6)
    v7 = (v6 + 81);
  else
    v7 = 80;
  v8 = (char *)PPStreamChunkCreate(v7);
  v9 = v8;
  v8[16] = 11;
  *(_OWORD *)(v8 + 24) = *(_OWORD *)a2;
  v10 = *(_OWORD *)(a2 + 48);
  v11 = *(_OWORD *)(a2 + 64);
  v12 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v8 + 40) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v8 + 88) = v11;
  *(_OWORD *)(v8 + 72) = v10;
  *(_OWORD *)(v8 + 56) = v12;
  if (a3 && (_DWORD)v6)
  {
    memmove(v8 + 104, a3, v6);
    v9[v6 + 104] = 0;
  }
  v13 = *(_DWORD *)(a1 + 140);
  *(_DWORD *)(a1 + 140) = v13 + 1;
  *((_DWORD *)v9 + 22) = v13;
  v14 = *(_QWORD *)(a1 + 104);
  if (!*(_QWORD *)v14)
  {
    *(_QWORD *)v14 = v9;
    *(_QWORD *)v9 = 0;
  }
  v15 = *(_QWORD *)(v14 + 8);
  if (v15)
  {
    *(_QWORD *)(v15 + 8) = v9;
    *(_QWORD *)v9 = v15;
  }
  *((_QWORD *)v9 + 1) = 0;
  *(_QWORD *)(v14 + 8) = v9;
  ++*(_DWORD *)(v14 + 16);
  return v9;
}

char *PPStreamAddLabel(uint64_t a1, const void *a2, unsigned int a3)
{
  size_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v6 = a3;
  v7 = (char *)PPStreamChunkCreate(a3 + 9);
  v7[16] = 14;
  *((_DWORD *)v7 + 7) = a3;
  *((_DWORD *)v7 + 6) = *(_DWORD *)(a1 + 140);
  memmove(v7 + 32, a2, v6);
  v7[a3 + 32] = 0;
  v8 = *(_QWORD *)(a1 + 112);
  if (!*(_QWORD *)v8)
  {
    *(_QWORD *)v8 = v7;
    *(_QWORD *)v7 = 0;
  }
  v9 = *(_QWORD *)(v8 + 8);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = v7;
    *(_QWORD *)v7 = v9;
  }
  *((_QWORD *)v7 + 1) = 0;
  *(_QWORD *)(v8 + 8) = v7;
  ++*(_DWORD *)(v8 + 16);
  return v7;
}

_BYTE *PPStreamAddConstant(uint64_t a1, _DWORD *a2)
{
  _BYTE *result;
  uint64_t v5;
  uint64_t v6;

  result = PPStreamChunkCreate(16);
  result[16] = 13;
  *((_DWORD *)result + 6) = *a2;
  *((_DWORD *)result + 7) = a2[1];
  *((_DWORD *)result + 8) = a2[2];
  *((_DWORD *)result + 9) = a2[3];
  v5 = *(_QWORD *)(a1 + 128);
  if (!*(_QWORD *)v5)
  {
    *(_QWORD *)v5 = result;
    *(_QWORD *)result = 0;
  }
  v6 = *(_QWORD *)(v5 + 8);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = result;
    *(_QWORD *)result = v6;
  }
  *((_QWORD *)result + 1) = 0;
  *(_QWORD *)(v5 + 8) = result;
  ++*(_DWORD *)(v5 + 16);
  return result;
}

_BYTE *PPStreamAddOption(uint64_t a1, char a2)
{
  _BYTE *result;
  uint64_t v5;
  uint64_t v6;

  result = PPStreamChunkCreate(8);
  result[16] = 10;
  result[27] = a2;
  v5 = *(_QWORD *)(a1 + 96);
  if (!*(_QWORD *)v5)
  {
    *(_QWORD *)v5 = result;
    *(_QWORD *)result = 0;
  }
  v6 = *(_QWORD *)(v5 + 8);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = result;
    *(_QWORD *)result = v6;
  }
  *((_QWORD *)result + 1) = 0;
  *(_QWORD *)(v5 + 8) = result;
  ++*(_DWORD *)(v5 + 16);
  return result;
}

uint64_t PPStreamResolveBranches(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(uint64_t **)(a1 + 104);
  v2 = *(uint64_t **)(a1 + 112);
  v3 = *v1;
  if (*v1)
  {
    v4 = 0;
    do
    {
      v5 = *(unsigned int *)(v3 + 96);
      if ((_DWORD)v5)
      {
        v6 = *(_QWORD *)(v3 + 24);
        *(_QWORD *)(v3 + 24) = v6 & 0x3FFFFFFFFFFFLL | ((unint64_t)(*((_DWORD *)v1 + 4) + 1) << 46);
        v7 = *v2;
        if (*v2)
        {
          v8 = v6 & 0x3FFFFFFFFFFFLL;
          while ((_DWORD)v5 != *(_DWORD *)(v7 + 28) || strncmp((const char *)(v3 + 104), (const char *)(v7 + 32), v5))
          {
            v7 = *(_QWORD *)(v7 + 8);
            if (!v7)
              goto LABEL_9;
          }
          *(_QWORD *)(v3 + 24) = v8 | ((unint64_t)*(unsigned int *)(v7 + 24) << 46);
        }
        else
        {
LABEL_9:
          v4 = 1;
        }
      }
      v3 = *(_QWORD *)(v3 + 8);
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }
  v9 = *v2;
  if (*v2)
  {
    while (strcmp("main(", (const char *)(v9 + 32)))
    {
      v9 = *(_QWORD *)(v9 + 8);
      if (!v9)
        return v4;
    }
    v10 = *v1;
    if (*v1)
    {
      while (*(_DWORD *)(v9 + 24) != *(_DWORD *)(v10 + 88))
      {
        v10 = *(_QWORD *)(v10 + 8);
        if (!v10)
          return v4;
      }
      *(_QWORD *)(v10 + 24) |= 0x4000uLL;
    }
  }
  return v4;
}

void gleLLVMInitBuildContext(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, int a7, int a8, int a9, int a10)
{
  void *v15;
  int v16;
  size_t v17;
  void *v18;
  void *v19;
  void *v20;
  size_t v21;
  void *v22;
  int v23;
  size_t v24;
  void *v25;
  void *v26;
  void *v27;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 16) = a2;
  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 24) = LLVMModuleCreateWithNameInContext();
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  v15 = malloc_type_malloc(8 * a4, 0x6A632F1uLL);
  *(_QWORD *)(a1 + 64) = v15;
  bzero(v15, 8 * a4);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  v16 = 8 * a5;
  v17 = 8 * a5;
  v18 = malloc_type_malloc(v16, 0x6A632F1uLL);
  *(_QWORD *)(a1 + 88) = v18;
  bzero(v18, v17);
  v19 = malloc_type_malloc(v17, 0x6A632F1uLL);
  *(_QWORD *)(a1 + 96) = v19;
  bzero(v19, v17);
  v20 = malloc_type_malloc(8 * a7, 0x6A632F1uLL);
  *(_QWORD *)(a1 + 112) = v20;
  bzero(v20, 8 * a7);
  v21 = 8 * a9;
  v22 = malloc_type_malloc(v21, 0x6A632F1uLL);
  *(_QWORD *)(a1 + 104) = v22;
  bzero(v22, v21);
  v23 = 8 * a8;
  v24 = 8 * a8;
  v25 = malloc_type_malloc(v23, 0x6A632F1uLL);
  *(_QWORD *)(a1 + 120) = v25;
  bzero(v25, v24);
  v26 = malloc_type_malloc(v24, 0x6A632F1uLL);
  *(_QWORD *)(a1 + 128) = v26;
  bzero(v26, v24);
  *(_DWORD *)(a1 + 4) = a7;
  *(_DWORD *)(a1 + 12) = 0;
  if (a10 < 1)
  {
    *(_QWORD *)(a1 + 176) = 0;
  }
  else
  {
    v27 = malloc_type_malloc(40 * a10, 0x84B8BB23uLL);
    *(_QWORD *)(a1 + 176) = v27;
    bzero(v27, 40 * a10);
  }
  *(_DWORD *)(a1 + 8) = a10;
}

void gleLLVMDestroyBuildContext(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  if (*(_QWORD *)(a1 + 24))
  {
    LLVMDisposeModule();
    *(_QWORD *)(a1 + 24) = 0;
  }
  v2 = *(void **)(a1 + 64);
  if (v2)
  {
    free(v2);
    *(_QWORD *)(a1 + 64) = 0;
  }
  v3 = *(void **)(a1 + 88);
  if (v3)
  {
    free(v3);
    *(_QWORD *)(a1 + 88) = 0;
  }
  v4 = *(void **)(a1 + 112);
  if (v4)
  {
    free(v4);
    *(_QWORD *)(a1 + 112) = 0;
  }
  v5 = *(void **)(a1 + 120);
  if (v5)
  {
    free(v5);
    *(_QWORD *)(a1 + 120) = 0;
  }
  v6 = *(void **)(a1 + 104);
  if (v6)
  {
    free(v6);
    *(_QWORD *)(a1 + 104) = 0;
  }
  v7 = *(void **)(a1 + 96);
  if (v7)
  {
    free(v7);
    *(_QWORD *)(a1 + 96) = 0;
  }
  v8 = *(void **)(a1 + 128);
  if (v8)
  {
    free(v8);
    *(_QWORD *)(a1 + 128) = 0;
  }
  free(*(void **)(a1 + 176));
  *(_QWORD *)(a1 + 176) = 0;
}

uint64_t gleLLVMGetConstantInt32(uint64_t a1)
{
  if (!*(_QWORD *)(a1 + 152))
    *(_QWORD *)(a1 + 152) = LLVMInt32TypeInContext();
  return LLVMConstInt();
}

const char *gleLLVMGetArgTypeName(int a1)
{
  unint64_t v1;

  v1 = a1 & 0xFFFFFFFFFFFF7FFFLL;
  if (v1 > 0xB)
    return "float4";
  else
    return off_24F947580[v1];
}

uint64_t gleLLVMBeginMain(uint64_t a1, uint64_t a2, int *a3, int a4, int *a5, uint64_t a6, int a7)
{
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  size_t v20;
  int v21;
  uint64_t v22;
  uint64_t *v23;
  int v24;
  uint64_t LLVMTypeFromType;
  uint64_t v26;
  int v27;
  uint64_t *v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  size_t v34;
  int v35;
  uint64_t *v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v46[2];
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v49 = a2;
  v50 = *MEMORY[0x24BDAC8D0];
  v13 = a4 + 1;
  v14 = (a4 + 1 + 2 * a7);
  v15 = LLVMFloatTypeInContext();
  v16 = MEMORY[0x22E316F4C](v15, 4);
  v48 = v14;
  ((void (*)(void))MEMORY[0x24BDAC7A8])();
  v19 = (_QWORD *)((char *)v46 - v18);
  if (v17 >= 0x200)
    v20 = 512;
  else
    v20 = v17;
  bzero((char *)v46 - v18, v20);
  v21 = 0;
  if (*(_DWORD *)(a1 + 216) && a4 >= 1)
  {
    v47 = a6;
    v22 = a4;
    v23 = v19;
    do
    {
      v24 = *a3++;
      LLVMTypeFromType = gleGetLLVMTypeFromType(a1, v24);
      if (!*(_DWORD *)a1 && !*(_DWORD *)(a1 + 220))
        LLVMTypeFromType = MEMORY[0x22E316EC8](LLVMTypeFromType, 1);
      *v23++ = LLVMTypeFromType;
      --v22;
    }
    while (v22);
    v21 = a4;
    LODWORD(a6) = v47;
  }
  v19[v21] = MEMORY[0x22E316EC8](v16, 2);
  v26 = *(unsigned int *)(a1 + 8);
  if ((int)v26 >= 1)
  {
    v27 = v21 + 1;
    v28 = (uint64_t *)(*(_QWORD *)(a1 + 176) + 24);
    do
    {
      if (*v28)
      {
        v19[v27] = *v28;
        v29 = v27 + a7;
        ++v27;
        v19[v29] = *(v28 - 1);
      }
      v28 += 5;
      --v26;
    }
    while (v26);
  }
  v30 = LLVMVoidTypeInContext();
  if (*(_DWORD *)(a1 + 216))
  {
    LODWORD(v47) = a4;
    v46[1] = v46;
    MEMORY[0x24BDAC7A8](v30);
    v33 = (_QWORD *)((char *)v46 - v32);
    if (v31 >= 0x200)
      v34 = 512;
    else
      v34 = v31;
    bzero((char *)v46 - v32, v34);
    v35 = a6;
    if ((int)a6 >= 1)
    {
      a6 = a6;
      v36 = v33;
      do
      {
        v37 = *a5++;
        *v36++ = gleGetLLVMTypeFromType(a1, v37);
        --a6;
      }
      while (a6);
    }
    if (v35)
      *(_QWORD *)(a1 + 168) = LLVMStructTypeInContext();
  }
  LLVMFunctionType();
  v38 = LLVMAddFunction();
  MEMORY[0x22E316DC0]("nounwind", 8);
  LLVMCreateEnumAttribute();
  LLVMAddAttributeAtIndex();
  *(_QWORD *)(a1 + 136) = LLVMGetParam();
  v39 = *(_DWORD *)(a1 + 8);
  if (v39 >= 1)
  {
    v40 = 0;
    v41 = 0;
    v42 = *(_QWORD *)(a1 + 176);
    do
    {
      if (*(_QWORD *)(v42 + v40 + 24))
      {
        *(_QWORD *)(*(_QWORD *)(a1 + 176) + v40) = LLVMGetParam();
        v43 = LLVMGetParam();
        v42 = *(_QWORD *)(a1 + 176);
        *(_QWORD *)(v42 + v40 + 8) = v43;
        ++v13;
        v39 = *(_DWORD *)(a1 + 8);
      }
      ++v41;
      v40 += 40;
    }
    while (v41 < v39);
  }
  *(_QWORD *)(a1 + 56) = v38;
  v44 = LLVMCreateBuilderInContext();
  glpLLVMSetFastMathFlags(v44, *(_DWORD *)a1 == 0, 0);
  *(_QWORD *)(a1 + 32) = v44;
  LLVMAppendBasicBlockInContext();
  LLVMAppendBasicBlockInContext();
  LLVMPositionBuilderAtEnd();
  *(_QWORD *)(a1 + 40) = LLVMBuildBr();
  *(_QWORD *)(a1 + 48) = 0;
  return LLVMPositionBuilderAtEnd();
}

uint64_t gleGetLLVMTypeFromType(uint64_t a1, int a2)
{
  __int16 v2;
  unsigned int v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v2 = a2;
  v3 = a2 & 0xFFFF7FFF;
  switch(a2 & 0xFFFF7FFF)
  {
    case 0u:
      result = LLVMInt1TypeInContext();
      break;
    case 1u:
      result = *(_QWORD *)(a1 + 152);
      if (!result)
      {
        result = LLVMInt32TypeInContext();
        *(_QWORD *)(a1 + 152) = result;
      }
      break;
    case 2u:
    case 3u:
      v6 = *(_QWORD *)(a1 + 152);
      if (!v6)
      {
        v6 = LLVMInt32TypeInContext();
        *(_QWORD *)(a1 + 152) = v6;
      }
      v7 = 4;
      goto LABEL_8;
    case 4u:
      result = LLVMFloatTypeInContext();
      break;
    case 5u:
    case 6u:
    case 7u:
      v5 = v3 - 3;
      v6 = LLVMFloatTypeInContext();
      goto LABEL_4;
    case 8u:
      result = LLVMHalfTypeInContext();
      break;
    case 9u:
    case 0xAu:
    case 0xBu:
      v5 = v3 - 7;
      v6 = LLVMHalfTypeInContext();
LABEL_4:
      v7 = v5;
LABEL_8:
      result = MEMORY[0x22E316F4C](v6, v7);
      break;
    default:
      result = 0;
      break;
  }
  if (v2 < 0)
    JUMPOUT(0x22E316EC8);
  return result;
}

uint64_t gleLLVMAddCommonMetaData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  const char *v17;
  BOOL v18;
  char **v19;
  int v20;
  char __s[16];
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 220))
  {
    *(_QWORD *)__s = gleLLVMGetConstantInt32(a1);
    *(_QWORD *)&__s[8] = LLVMMDStringInContext();
    *(_QWORD *)&v22 = LLVMMDStringInContext();
    *((_QWORD *)&v22 + 1) = gleLLVMGetConstantInt32(a1);
    v23 = LLVMMDStringInContext();
    v24 = gleLLVMGetConstantInt32(a1);
    v25 = gleLLVMGetConstantInt32(a1);
    v26 = LLVMMDStringInContext();
  }
  else
  {
    *(_QWORD *)__s = gleLLVMGetConstantInt32(a1);
    *(_QWORD *)&__s[8] = LLVMMDStringInContext();
    *(_QWORD *)&v22 = LLVMMDStringInContext();
    *((_QWORD *)&v22 + 1) = gleLLVMGetConstantInt32(a1);
  }
  result = LLVMMDNodeInContext();
  *a2 = result;
  if (*(int *)(a1 + 8) >= 1)
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v20 = a6 + 1;
    do
    {
      v13 = *(_QWORD *)(a1 + 176);
      if (*(_QWORD *)(v13 + v10 + 24))
      {
        v14 = (int)v12 + 1;
        if (*(_DWORD *)(a1 + 220))
        {
          v15 = *(_DWORD *)(v13 + v10 + 32);
          v16 = (v15 & 7) - 1;
          v17 = "texture2d";
          if (v16 <= 4)
          {
            v18 = (v15 & 8) == 0;
            v19 = off_24F9475E0;
            if (v18)
              v19 = off_24F947608;
            v17 = v19[v16];
          }
          snprintf_l(__s, 0x40uLL, 0, "%s<float, sample>", v17);
          gleLLVMGetConstantInt32(a1);
          LLVMMDStringInContext();
          LLVMMDStringInContext();
          gleLLVMGetConstantInt32(a1);
          gleLLVMGetConstantInt32(a1);
          LLVMMDStringInContext();
          LLVMMDStringInContext();
          strlen(__s);
          LLVMMDStringInContext();
          a2[(int)v14] = LLVMMDNodeInContext();
          gleLLVMGetConstantInt32(a1);
          LLVMMDStringInContext();
          LLVMMDStringInContext();
          gleLLVMGetConstantInt32(a1);
          gleLLVMGetConstantInt32(a1);
          result = LLVMMDNodeInContext();
          a2[v20 + (int)v12] = result;
        }
        else
        {
          *(_OWORD *)__s = 0u;
          v22 = 0u;
          *(_QWORD *)__s = gleLLVMGetConstantInt32(a1);
          *(_QWORD *)&__s[8] = LLVMMDStringInContext();
          *(_QWORD *)&v22 = LLVMMDStringInContext();
          *((_QWORD *)&v22 + 1) = gleLLVMGetConstantInt32(a1);
          a2[v14] = LLVMMDNodeInContext();
          gleLLVMGetConstantInt32(a1);
          LLVMMDStringInContext();
          LLVMMDStringInContext();
          gleLLVMGetConstantInt32(a1);
          gleLLVMGetConstantInt32(a1);
          LLVMMDStringInContext();
          result = LLVMMDNodeInContext();
          a2[v20 + (int)v12] = result;
        }
      }
      else
      {
        v14 = v12;
      }
      ++v11;
      v10 += 40;
      v12 = v14;
    }
    while (v11 < *(int *)(a1 + 8));
  }
  return result;
}

uint64_t gleLLVMCreateFunctionMetadata(uint64_t a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = LLVMMDNodeInContext();
  glpAddNamedMetadataOperand(*(_QWORD *)(a1 + 24), a2, v4);
  if (*(_DWORD *)(a1 + 220))
  {
    LLVMMDStringInContext();
    gleLLVMGetConstantInt32(a1);
    gleLLVMGetConstantInt32(a1);
    gleLLVMGetConstantInt32(a1);
    v5 = LLVMMDNodeInContext();
    glpAddNamedMetadataOperand(*(_QWORD *)(a1 + 24), "air.language_version", v5);
    glpLLVMSetupModule();
  }
  LLVMMDStringInContext();
  v6 = LLVMMDNodeInContext();
  glpAddNamedMetadataOperand(*(_QWORD *)(a1 + 24), "air.compile_options", v6);
  LLVMMDStringInContext();
  v7 = LLVMMDNodeInContext();
  glpAddNamedMetadataOperand(*(_QWORD *)(a1 + 24), "air.compile_options", v7);
  LLVMMDStringInContext();
  v8 = LLVMMDNodeInContext();
  return glpAddNamedMetadataOperand(*(_QWORD *)(a1 + 24), "air.compile_options", v8);
}

uint64_t gleLLVMFinishMain(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  size_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v5 = (2 * a3 + 2);
  MEMORY[0x24BDAC7A8](a1);
  v7 = &v19 - v5;
  if (v6 >= 0x200)
    v8 = 512;
  else
    v8 = v6;
  bzero(&v19 - v5, v8);
  *v7 = *(_QWORD *)(a1 + 56);
  if (!*(_DWORD *)(a1 + 216))
  {
    v19 = v5;
    v20 = LLVMMDStringInContext();
    v21 = LLVMMDStringInContext();
    if (!*(_QWORD *)(a1 + 152))
      *(_QWORD *)(a1 + 152) = LLVMInt32TypeInContext();
    v22 = LLVMConstInt();
    if (!*(_QWORD *)(a1 + 152))
      *(_QWORD *)(a1 + 152) = LLVMInt32TypeInContext();
    v23 = LLVMConstInt();
    v7[1] = LLVMMDNodeInContext();
    v9 = *(_DWORD *)(a1 + 8);
    if (v9 >= 1)
    {
      v10 = 0;
      v11 = 0;
      v12 = 24;
      do
      {
        if (*(_QWORD *)(*(_QWORD *)(a1 + 176) + v12))
        {
          v20 = 0;
          v21 = 0;
          v22 = 0;
          v20 = LLVMMDStringInContext();
          v21 = LLVMMDStringInContext();
          LLVMInt32TypeInContext();
          v22 = LLVMConstInt();
          v7[v11 + 2] = LLVMMDNodeInContext();
          v21 = LLVMMDStringInContext();
          v7[a3 + 2 + v11++] = LLVMMDNodeInContext();
          v9 = *(_DWORD *)(a1 + 8);
        }
        ++v10;
        v12 += 40;
      }
      while (v10 < v9);
    }
    v13 = LLVMMDNodeInContext();
    glpAddNamedMetadataOperand(*(_QWORD *)(a1 + 24), "opengl.kernel_arg_info", v13);
  }
  v14 = *(unsigned int *)(a1 + 12);
  LODWORD(v20) = 0;
  if ((int)v14 >= 1)
  {
    for (i = 0; i != v14; ++i)
    {
      if (*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * i))
      {
        v16 = LLVMBuildLoad();
        (*(void (**)(_QWORD, uint64_t, uint64_t *, uint64_t))(a1 + 192))(*(_QWORD *)(a1 + 184), i, &v20, v16);
      }
    }
  }
  v17 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(a1 + 160))
    MEMORY[0x22E316C1C](v17);
  else
    MEMORY[0x22E316C28](v17);
  result = LLVMDisposeBuilder();
  *(_QWORD *)(a1 + 32) = 0;
  return result;
}

uint64_t gleLLVMCreateVaryingsMetaData(_QWORD *a1, char *a2, int a3, int a4, int a5, int a6, int a7)
{
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  const char *v21;
  uint64_t v22;
  _QWORD v24[2];
  char *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30[8];
  __int128 v31;
  __int128 v32;
  char v33[16];
  char v34[16];
  char __s[16];
  uint64_t v36;

  v25 = a2;
  v36 = *MEMORY[0x24BDAC8D0];
  v11 = (a4 + a3 + a5);
  v29 = a1[2];
  v24[1] = (v11 + 1);
  MEMORY[0x24BDAC7A8](a1);
  v14 = (_QWORD *)((char *)v24 - v13);
  if (v12 >= 0x200)
    v15 = 512;
  else
    v15 = v12;
  bzero((char *)v24 - v13, v15);
  v16 = a1[7];
  v26 = v14;
  *v14 = v16;
  v28 = v11;
  if ((int)v11 >= 1)
  {
    v17 = 0;
    v18 = v34;
    if (a7)
      v18 = v33;
    v27 = a3;
    if (a6)
      v19 = v30;
    else
      v19 = v18;
    v20 = v26 + 1;
    do
    {
      strcpy(__s, "4 x float");
      strcpy(v30, "flat");
      strcpy(v34, "nonperspective");
      strcpy(v33, "perspective");
      if (v17 >= v27)
        v21 = v33;
      else
        v21 = v19;
      v31 = 0u;
      v32 = 0u;
      if (!a1[19])
        a1[19] = LLVMInt32TypeInContext();
      *(_QWORD *)&v31 = LLVMConstInt();
      if (!a1[19])
        a1[19] = LLVMInt32TypeInContext();
      *((_QWORD *)&v31 + 1) = LLVMConstInt();
      strlen(v21);
      *(_QWORD *)&v32 = LLVMMDStringInContext();
      strlen(__s);
      *((_QWORD *)&v32 + 1) = LLVMMDStringInContext();
      v20[v17++] = LLVMMDNodeInContext();
    }
    while (v28 != v17);
  }
  v22 = LLVMMDNodeInContext();
  return glpAddNamedMetadataOperand(a1[3], v25, v22);
}

uint64_t gleLLVMAddTexture(uint64_t a1, int a2, char a3, uint64_t a4, char a5)
{
  uint64_t Named;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  Named = LLVMGetTypeByName();
  if (!Named)
    Named = LLVMStructCreateNamed();
  if (*(_DWORD *)(a1 + 216))
    Named = MEMORY[0x22E316EC8](Named, 1);
  v10 = *(_QWORD *)(a1 + 176) + 40 * a2;
  *(_DWORD *)(v10 + 32) = *(_DWORD *)(v10 + 32) & 0xFFFFFFF8 | a3 & 7;
  v11 = *(_QWORD *)(a1 + 176) + 40 * a2;
  *(_DWORD *)(v11 + 32) = *(_DWORD *)(v11 + 32) & 0xFFFFFFF7 | (8 * (a5 & 1));
  *(_QWORD *)(*(_QWORD *)(a1 + 176) + 40 * a2 + 24) = Named;
  result = LLVMGetTypeByName();
  if (!result)
    result = LLVMStructCreateNamed();
  if (*(_DWORD *)(a1 + 216))
    result = MEMORY[0x22E316EC8](result, 2);
  *(_QWORD *)(*(_QWORD *)(a1 + 176) + 40 * a2 + 16) = result;
  return result;
}

uint64_t gleLLVMCallFunction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, unsigned int a7)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  size_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v19[4];
  unsigned int v20;
  uint64_t v21;

  v20 = a7;
  v21 = *MEMORY[0x24BDAC8D0];
  MEMORY[0x24BDAC7A8]();
  v12 = (uint64_t *)&v19[-v11];
  if (v10 >= 0x200)
    v13 = 512;
  else
    v13 = v10;
  bzero(&v19[-v11], v13);
  if (a5)
  {
    v14 = a5;
    v15 = v12;
    v16 = a4;
    do
    {
      v16 += 8;
      *v15++ = LLVMTypeOf();
      --v14;
    }
    while (v14);
  }
  if (!LLVMGetNamedFunction())
  {
    LLVMFunctionType();
    LLVMAddFunction();
    if (v20)
    {
      v17 = v20;
      do
      {
        a6 += 8;
        LLVMAddAttributeAtIndex();
        --v17;
      }
      while (v17);
    }
  }
  return LLVMBuildCall();
}

uint64_t gleLLVMGetAttribute(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  const char *v14;
  const char *v15;
  uint64_t v17;
  const char *v18;
  char v19[512];
  char v20[64];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v23 = 0;
  v24 = 0;
  v7 = *(_QWORD *)(a1 + 152);
  if (v7)
  {
    v23 = v7;
  }
  else
  {
    v8 = LLVMInt32TypeInContext();
    *(_QWORD *)(a1 + 152) = v8;
    v23 = v8;
    if (!v8)
      *(_QWORD *)(a1 + 152) = LLVMInt32TypeInContext();
  }
  v22 = 0;
  v9 = 1;
  v21 = LLVMConstInt();
  if (*(_DWORD *)a1)
  {
    if (*(_QWORD *)(a1 + 152))
    {
      v24 = *(_QWORD *)(a1 + 152);
    }
    else
    {
      v10 = LLVMInt32TypeInContext();
      *(_QWORD *)(a1 + 152) = v10;
      v24 = v10;
      if (!v10)
        *(_QWORD *)(a1 + 152) = LLVMInt32TypeInContext();
    }
    v22 = LLVMConstInt();
    v9 = 2;
  }
  if (a3 == 2)
  {
    if (!*(_QWORD *)(a1 + 152))
      *(_QWORD *)(a1 + 152) = LLVMInt32TypeInContext();
    v11 = MEMORY[0x22E316F4C]();
    if (*(_DWORD *)a1)
      v12 = "graphics.interpolate.center.4xi";
    else
      v12 = "graphics.vertex.readAttribute.4xi";
  }
  else
  {
    v13 = (a3 - 3);
    if (a4 == 1)
    {
      v11 = LLVMFloatTypeInContext();
      v14 = "f";
    }
    else
    {
      v11 = LLVMHalfTypeInContext();
      v14 = "h";
    }
    if ((int)v13 >= 2)
      v11 = MEMORY[0x22E316F4C](v11, v13);
    if (*(_DWORD *)a1)
    {
      v15 = "graphics.interpolate.center.%dx%s";
      v18 = v14;
    }
    else
    {
      v15 = "graphics.vertex.readAttribute.%dxf";
    }
    v17 = v13;
    v12 = v20;
    snprintf_l(v20, 0x40uLL, 0, v15, v17, v18);
  }
  glpMangleNameLLVM(*(_QWORD *)(a1 + 24), v19, 0x200uLL, v12, v11, &v23, 0, v9);
  if (!LLVMGetNamedFunction())
  {
    LLVMFunctionType();
    LLVMAddFunction();
    MEMORY[0x22E316DC0]("readonly", 8);
    LLVMCreateEnumAttribute();
    LLVMAddAttributeAtIndex();
    MEMORY[0x22E316DC0]("nounwind", 8);
    LLVMCreateEnumAttribute();
    LLVMAddAttributeAtIndex();
  }
  return LLVMBuildCall();
}

uint64_t gleLLVMCreateConstantVec4(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  _OWORD v6[2];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  LLVMFloatTypeInContext();
  if (a3 != 1)
    LLVMHalfTypeInContext();
  v4 = 0;
  memset(v6, 0, sizeof(v6));
  do
    *((_QWORD *)v6 + v4++) = llvm::ConstantFP::get();
  while (v4 != 4);
  return LLVMConstVector();
}

uint64_t gleLLVMClampColor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char *v14;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v4 = LLVMTypeOf();
  if (LLVMGetTypeKind() == 13)
  {
    v5 = LLVMGetVectorSize();
    LLVMGetElementType();
    v6 = llvm::ConstantFP::get();
    v7 = llvm::ConstantFP::get();
    v16 = 0u;
    v17 = 0u;
    if (v5 <= 0)
    {
      v11 = LLVMConstVector();
      v16 = 0u;
      v17 = 0u;
    }
    else
    {
      v8 = v7;
      v9 = 0;
      v10 = v5;
      do
      {
        *(_QWORD *)((char *)&v16 + v9) = v6;
        v9 += 8;
      }
      while (8 * v5 != v9);
      v11 = LLVMConstVector();
      v16 = 0u;
      v17 = 0u;
      v12 = (uint64_t *)&v16;
      do
      {
        *v12++ = v8;
        --v10;
      }
      while (v10);
    }
    v13 = LLVMConstVector();
  }
  else
  {
    v11 = llvm::ConstantFP::get();
    v13 = llvm::ConstantFP::get();
  }
  *(_QWORD *)&v16 = a2;
  *((_QWORD *)&v16 + 1) = v11;
  *(_QWORD *)&v17 = v13;
  if (*(_DWORD *)(a1 + 216))
    v14 = "air.clamp";
  else
    v14 = "clamp";
  return gleStateProgram_BuildOperation(a1, v14, 3, (uint64_t)&v16, v4);
}

uint64_t gleStateProgram_BuildOperation(uint64_t a1, char *a2, int a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  char **v13;
  const char *v14;
  char v16[512];
  uint64_t v17[4];

  v17[3] = *MEMORY[0x24BDAC8D0];
  memset(v17, 0, 24);
  if (a3 >= 1)
  {
    v9 = 0;
    v10 = 8 * a3;
    do
    {
      v17[v9 / 8] = LLVMTypeOf();
      v9 += 8;
    }
    while (v10 != v9);
  }
  if (LLVMGetTypeKind() == 13)
  {
    LLVMGetElementType();
    v11 = LLVMGetVectorSize() - 1;
  }
  else
  {
    v11 = 0;
  }
  v12 = LLVMGetTypeKind();
  switch(v12)
  {
    case 1:
      if (v11 < 3)
      {
        v13 = off_24F947688;
        goto LABEL_16;
      }
      v14 = "v4f16";
      break;
    case 8:
      if (v11 < 3)
      {
        v13 = off_24F9476A0;
        goto LABEL_16;
      }
      v14 = "v4i1";
      break;
    case 2:
      if (v11 < 3)
      {
        v13 = off_24F947670;
LABEL_16:
        v14 = v13[v11];
        break;
      }
      v14 = "v4f32";
      break;
    default:
      abort();
  }
  if (*(_DWORD *)(a1 + 216))
    snprintf_l(v16, 0x200uLL, 0, "%s.%s", a2, v14);
  else
    glpMangleNameLLVM(*(_QWORD *)(a1 + 24), v16, 0x200uLL, a2, a5, v17, 0, a3);
  if (!LLVMGetNamedFunction())
  {
    LLVMFunctionType();
    LLVMAddFunction();
    MEMORY[0x22E316DC0]("nounwind", 8);
    LLVMCreateEnumAttribute();
    LLVMAddAttributeAtIndex();
    MEMORY[0x22E316DC0]("readonly", 8);
    LLVMCreateEnumAttribute();
    LLVMAddAttributeAtIndex();
  }
  return LLVMBuildCall();
}

uint64_t gleLLVMAddFunctionCall(uint64_t a1, char *__s, uint64_t a3, int a4, uint64_t *a5)
{
  char v6[512];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  glpMangleNameLLVM(*(_QWORD *)(a1 + 24), v6, 0x200uLL, __s, a3, a5, 0, a4);
  if (!LLVMGetNamedFunction())
  {
    LLVMFunctionType();
    LLVMAddFunction();
    MEMORY[0x22E316DC0]("nounwind", 8);
    LLVMCreateEnumAttribute();
    LLVMAddAttributeAtIndex();
  }
  return LLVMBuildCall();
}

uint64_t gleLLVMAddVoidFunctionCall(uint64_t a1, char *a2, int a3, uint64_t *a4)
{
  uint64_t v8;

  v8 = LLVMVoidTypeInContext();
  return gleLLVMAddFunctionCall(a1, a2, v8, a3, a4);
}

uint64_t gleStateProgram_TruncateVec4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t inserted;
  uint64_t v8;

  v5 = LLVMFloatTypeInContext();
  v6 = MEMORY[0x22E316F4C](v5, a3);
  inserted = MEMORY[0x22E316E2C](v6);
  if ((int)a3 >= 1)
  {
    v8 = 0;
    do
    {
      if (!*(_QWORD *)(a1 + 152))
        *(_QWORD *)(a1 + 152) = LLVMInt32TypeInContext();
      LLVMConstInt();
      LLVMBuildExtractElement();
      inserted = LLVMBuildInsertElement();
      ++v8;
    }
    while (a3 != v8);
  }
  return inserted;
}

void gleLLVMAddOperation(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t TempValue;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t (*v28)(_QWORD, uint64_t, uint64_t);
  uint64_t v29;
  _QWORD *v30;
  void (*v31)(_QWORD);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  size_t v39;
  unint64_t v40;
  unsigned int v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  __int128 v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t Element;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  char v76;
  const char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  const char *v97;
  const char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  void *v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  _BOOL4 v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t AddressValue;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  const char *v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  uint64_t v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  const char *v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD v166[2];
  char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t inserted;
  _QWORD v175[2];
  _QWORD v176[2];
  _QWORD v177[2];
  __int128 v178;
  __int128 v179;
  uint64_t v180;

  LODWORD(v170) = a3;
  v3 = a1;
  v180 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 32);
  v171 = a2;
  v5 = MEMORY[0x24BDAC7A8]();
  v9 = (char *)v166 - v8;
  v11 = 8 * v10;
  v172 = v10;
  v173 = v5;
  v169 = v4;
  if ((int)v10 > 0)
  {
    memset_pattern16((char *)v166 - v8, &unk_22D806820, 4 * (((__int16)v7 >> 15) + (v7 << 15 >> 31) + v6 - 1) + 4);
    MEMORY[0x24BDAC7A8]();
    v12 = (_QWORD *)((char *)v166 - ((v11 + 15) & 0xFFFFFFFF0));
    if (v11 >= 0x200)
      v13 = 512;
    else
      v13 = v11;
    bzero((char *)v166 - ((v11 + 15) & 0xFFFFFFFF0), v13);
    v14 = 0;
    v15 = v171;
    v167 = v9;
    v168 = (uint64_t)v12;
    while (1)
    {
      v16 = *(_DWORD *)&v9[4 * v14];
      v17 = *(_QWORD *)v15;
      v18 = v15 + 8 * v14;
      v19 = *(_QWORD *)(v18 + 16);
      v20 = HIWORD(v19);
      v177[0] = 0;
      v21 = (v19 >> 6) & 7;
      if (!v21)
        break;
      if (v21 != 2)
      {
        TempValue = 0;
        v3 = v173;
        if (v21 == 1)
        {
          TempValue = readTempValue(v173, v20, 1);
          v177[0] = TempValue;
        }
        goto LABEL_43;
      }
      if ((v19 & 0x1000000000000000) == 0)
      {
        if (!*(_QWORD *)(v173 + 152))
        {
          v23 = v173;
          *(_QWORD *)(v23 + 152) = LLVMInt32TypeInContext();
        }
        v24 = LLVMConstInt();
        if ((v19 & 1) != 0)
        {
          v30 = (_QWORD *)v173;
          readAddressValue(v173, (v19 >> 1) & 1, 1);
          if (!v30[19])
            v30[19] = LLVMInt32TypeInContext();
          LLVMConstInt();
          LLVMBuildExtractElement();
          LLVMConstInt();
          v25 = LLVMBuildAdd();
          v31 = (void (*)(_QWORD))v30[26];
          v3 = (uint64_t)v30;
          if (v31)
          {
            v31(v30[23]);
            LLVMBuildICmp();
            LLVMConstInt();
            v3 = v173;
            v25 = LLVMBuildSelect();
          }
          v9 = v167;
          v12 = (uint64_t *)v168;
        }
        else
        {
          v25 = v24;
          v3 = v173;
        }
        *(_QWORD *)&v178 = v25;
        LLVMBuildGEP();
        TempValue = LLVMBuildLoad();
        if ((_DWORD)v170 != 1)
        {
          v32 = LLVMHalfTypeInContext();
          MEMORY[0x22E316F4C](v32, 4);
          TempValue = LLVMBuildFPTrunc();
        }
        goto LABEL_41;
      }
      v3 = v173;
      TempValue = *(_QWORD *)(*(_QWORD *)(v173 + 104) + 8 * (v20 - 4096));
LABEL_42:
      v177[0] = TempValue;
LABEL_43:
      v36 = gleLLVMApplySwizzle(v3, TempValue, (*(_DWORD *)(v18 + 16) >> 9) & 3, (*(_DWORD *)(v18 + 16) >> 11) & 3, (*(_DWORD *)(v18 + 16) >> 13) & 3, (*(_DWORD *)(v18 + 16) >> 15) & 3);
      v177[0] = v36;
      v37 = *(_QWORD *)(v18 + 16);
      if ((v37 & 0x20) != 0)
      {
        v38 = LLVMTypeOf();
        v36 = gleStateProgram_BuildOperation(v3, "air.fabs", 1, (uint64_t)v177, v38);
        v177[0] = v36;
        v37 = *(_QWORD *)(v18 + 16);
      }
      if ((v37 & 0x10) != 0)
        v36 = LLVMBuildFNeg();
      v12[v14++] = v36;
      if (v172 == v14)
        goto LABEL_53;
    }
    v26 = v16 + 3;
    if ((v17 & 0x3FC0) == 0x1200)
      v27 = 2;
    else
      v27 = v26;
    v3 = v173;
    TempValue = *(_QWORD *)(*(_QWORD *)(v173 + 112) + 8 * v20);
    if (!TempValue)
    {
      v28 = *(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v173 + 200);
      if (!v28 || (TempValue = v28(*(_QWORD *)(v173 + 184), v20, v27)) == 0)
      {
        if (*(_DWORD *)(v3 + 216))
          v29 = LLVMGetParam();
        else
          v29 = gleLLVMGetAttribute(v3, v20, v27, v170);
        TempValue = v29;
      }
    }
    *(_QWORD *)(*(_QWORD *)(v3 + 112) + 8 * v20) = TempValue;
    if ((int)v27 < 5)
    {
      if ((_DWORD)v170 != 1)
      {
        v35 = LLVMHalfTypeInContext();
LABEL_39:
        if (v35 != LLVMTypeOf())
          TempValue = LLVMBuildFPTrunc();
      }
    }
    else
    {
      v33 = (v27 - 3);
      TempValue = gleLLVMVectorExtend(v3, TempValue, v33);
      if ((_DWORD)v170 != 1)
      {
        v34 = LLVMHalfTypeInContext();
        v35 = MEMORY[0x22E316F4C](v34, v33);
        goto LABEL_39;
      }
    }
LABEL_41:
    v15 = v171;
    goto LABEL_42;
  }
  MEMORY[0x24BDAC7A8]();
  v12 = (_QWORD *)((char *)v166 - ((v11 + 15) & 0xFFFFFFFF0));
  if (v11 >= 0x200)
    v39 = 512;
  else
    v39 = v11;
  bzero((char *)v166 - ((v11 + 15) & 0xFFFFFFFF0), v39);
  v15 = v171;
LABEL_53:
  v40 = *(_QWORD *)(v15 + 8);
  v41 = (v40 >> 12) & 7;
  if (v41 == 4)
  {
    v44 = *(_QWORD *)(v3 + 152);
    if (!v44)
    {
      v44 = LLVMInt32TypeInContext();
      *(_QWORD *)(v3 + 152) = v44;
      if (!v44)
        goto LABEL_62;
    }
  }
  else
  {
    v42 = HIWORD(v40);
    if (v41 == 3)
    {
      v43 = *(_QWORD *)(v3 + 128);
    }
    else
    {
      if (v41 != 1)
      {
LABEL_62:
        v44 = LLVMFloatTypeInContext();
        goto LABEL_63;
      }
      v43 = *(_QWORD *)(v3 + 96);
    }
    v44 = *(_QWORD *)(v43 + 8 * v42);
    if (!v44)
      goto LABEL_62;
  }
LABEL_63:
  if ((_DWORD)v170 == 1 && LLVMGetTypeKind() == 1)
    v44 = LLVMFloatTypeInContext();
  inserted = *v12;
  v45 = MEMORY[0x22E316F4C](v44, 4);
  v46 = *(_QWORD *)v15;
  switch((*(_QWORD *)v15 >> 6))
  {
    case 0u:
      inserted = *v12;
      goto LABEL_302;
    case 1u:
      if (!*(_QWORD *)(v3 + 152))
        *(_QWORD *)(v3 + 152) = LLVMInt32TypeInContext();
      v56 = LLVMConstInt();
      if (!*(_QWORD *)(v3 + 152))
        *(_QWORD *)(v3 + 152) = LLVMInt32TypeInContext();
      LLVMConstInt();
      if (!*(_QWORD *)(v3 + 152))
        *(_QWORD *)(v3 + 152) = LLVMInt32TypeInContext();
      v170 = v45;
      v172 = LLVMConstInt();
      if (!*(_QWORD *)(v3 + 152))
        *(_QWORD *)(v3 + 152) = LLVMInt32TypeInContext();
      v168 = LLVMConstInt();
      Element = LLVMBuildExtractElement();
      v58 = LLVMBuildExtractElement();
      v59 = LLVMBuildExtractElement();
      LLVMTypeOf();
      v60 = llvm::ConstantFP::get();
      v167 = (char *)v56;
      v61 = v60;
      LLVMTypeOf();
      v166[1] = llvm::ConstantFP::get();
      LLVMTypeOf();
      v62 = llvm::ConstantFP::get();
      LLVMTypeOf();
      v63 = llvm::ConstantFP::get();
      v177[0] = Element;
      v177[1] = v61;
      v64 = LLVMTypeOf();
      gleStateProgram_BuildOperation(v3, "air.fast_fmax", 2, (uint64_t)v177, v64);
      v176[0] = v58;
      v176[1] = v61;
      v65 = LLVMTypeOf();
      v66 = gleStateProgram_BuildOperation(v173, "air.fast_fmax", 2, (uint64_t)v176, v65);
      *(_QWORD *)&v178 = v59;
      *((_QWORD *)&v178 + 1) = v63;
      *(_QWORD *)&v179 = v62;
      v67 = LLVMTypeOf();
      v68 = gleStateProgram_BuildOperation(v173, "air.clamp", 3, (uint64_t)&v178, v67);
      LLVMBuildFCmp();
      v175[0] = v66;
      v175[1] = v68;
      v69 = LLVMTypeOf();
      gleStateProgram_BuildOperation(v173, "air.fast_powr", 2, (uint64_t)v175, v69);
      LLVMBuildSelect();
      v45 = v170;
      inserted = MEMORY[0x22E316E2C](v170);
      inserted = LLVMBuildInsertElement();
      inserted = LLVMBuildInsertElement();
      inserted = LLVMBuildInsertElement();
      goto LABEL_210;
    case 2u:
      if (*(_DWORD *)(v3 + 216))
        v70 = "air.fabs";
      else
        v70 = "__cl_fabs";
      goto LABEL_299;
    case 4u:
      v70 = "air.fract";
      goto LABEL_299;
    case 5u:
      v70 = "air.floor";
      goto LABEL_299;
    case 0xCu:
      *(_QWORD *)&v178 = 0;
      v71 = (v46 >> 36) & 3;
      if ((_DWORD)v71 == 3)
      {
        *(_QWORD *)&v178 = *v12;
        goto LABEL_331;
      }
      if ((_DWORD)v71)
      {
LABEL_331:
        v72 = 1;
        goto LABEL_332;
      }
      if (!*(_QWORD *)(v3 + 152))
        *(_QWORD *)(v3 + 152) = LLVMInt32TypeInContext();
      LLVMConstInt();
      v72 = 0;
      *(_QWORD *)&v178 = LLVMBuildExtractElement();
LABEL_332:
      v142 = "air.sqrt";
      if ((_DWORD)v170 == 1)
        v142 = "air.fast_sqrt";
      if (*(_DWORD *)(v3 + 216))
        v143 = (char *)v142;
      else
        v143 = "native_sqrt";
      v144 = LLVMTypeOf();
      v145 = gleStateProgram_BuildOperation(v3, v143, 1, (uint64_t)&v178, v144);
      inserted = v145;
      if ((v72 & 1) == 0)
      {
        *(_QWORD *)&v178 = v145;
        v146 = 0;
        inserted = MEMORY[0x22E316E2C](v45);
        do
        {
          if (!*(_QWORD *)(v3 + 152))
            *(_QWORD *)(v3 + 152) = LLVMInt32TypeInContext();
          LLVMConstInt();
          inserted = LLVMBuildInsertElement();
          ++v146;
        }
        while (v146 != 4);
      }
LABEL_212:
      v15 = v171;
LABEL_302:
      v126 = *(_QWORD *)v15;
      if ((*(_QWORD *)v15 & 0x100000000) != 0)
      {
        v127 = *(_QWORD *)(v15 + 8);
        v128 = HIWORD(v127);
        v129 = (~(_DWORD)v127 & 0x78000 | v127 & 0xE | v126 & 0x20000000000) != 0;
        v130 = inserted;
        v131 = v173;
        if ((v126 & 0x80000000000) != 0)
        {
          v130 = gleLLVMClampColor(v173, inserted);
          inserted = v130;
          v127 = *(_QWORD *)(v15 + 8);
        }
        inserted = gleLLVMApplySwizzle(v131, v130, (v127 >> 23) & 3, (v127 >> 25) & 3, (v127 >> 27) & 3, (v127 >> 29) & 3);
        v132 = (*(_DWORD *)(v15 + 8) >> 12) & 7;
        if (v132 == 4)
        {
          v135 = v173;
          AddressValue = readAddressValue(v173, v128, v129);
LABEL_314:
          if (v129)
            inserted = gleLLVMApplyDestMaskAndCC(v135, AddressValue, inserted, v171);
          goto LABEL_328;
        }
        if (v132 != 3)
        {
          if (v132 != 1)
            return;
          v133 = *(_QWORD *)(*(_QWORD *)(v173 + 96) + 8 * v128);
          if (!v133)
            v133 = LLVMFloatTypeInContext();
          v134 = MEMORY[0x22E316F4C](v133, 4);
          if (v134 != LLVMTypeOf())
            inserted = LLVMBuildFPCast();
          v135 = v173;
          AddressValue = readTempValue(v173, v128, v129);
          goto LABEL_314;
        }
        v137 = v173;
        if (*(_DWORD *)(v173 + 12) <= (int)v128)
          *(_DWORD *)(v173 + 12) = v128 + 1;
        if (*(_DWORD *)(v137 + 216))
        {
          v138 = *(_QWORD *)(*(_QWORD *)(v137 + 128) + 8 * v128);
          if (!v138 || (v45 = MEMORY[0x22E316F4C](v138, 4), *(_DWORD *)(v173 + 216)))
          {
            if (LLVMTypeOf() != v45)
              inserted = LLVMBuildFPCast();
          }
        }
        if (*(_QWORD *)(*(_QWORD *)(v173 + 120) + 8 * v128))
        {
          if (!v129)
          {
LABEL_328:
            LLVMBuildStore();
            return;
          }
        }
        else
        {
          v140 = MEMORY[0x22E316E2C](v45);
          v141 = v173;
          *(_QWORD *)(*(_QWORD *)(v141 + 120) + 8 * v128) = allocateVariable(v173, v45, v140);
          if (!v129)
            goto LABEL_328;
        }
        v139 = LLVMBuildLoad();
        inserted = gleLLVMApplyDestMaskAndCC(v173, v139, inserted, v171);
        goto LABEL_328;
      }
      return;
    case 0xDu:
      *(_QWORD *)&v178 = 0;
      v73 = (v46 >> 36) & 3;
      if ((_DWORD)v73 == 3)
      {
        *(_QWORD *)&v178 = *v12;
      }
      else if (!(_DWORD)v73)
      {
        if (!*(_QWORD *)(v3 + 152))
          *(_QWORD *)(v3 + 152) = LLVMInt32TypeInContext();
        LLVMConstInt();
        v74 = 0;
        *(_QWORD *)&v178 = LLVMBuildExtractElement();
LABEL_345:
        v147 = *(_DWORD *)(v3 + 216);
        v148 = LLVMTypeOf();
        if (v147)
        {
          *(_QWORD *)&v178 = gleStateProgram_BuildOperation(v3, "air.fabs", 1, (uint64_t)&v178, v148);
          if ((_DWORD)v170 == 1)
            v149 = "air.fast_rsqrt";
          else
            v149 = "air.rsqrt";
        }
        else
        {
          *(_QWORD *)&v178 = gleStateProgram_BuildOperation(v3, "__cl_fabs", 1, (uint64_t)&v178, v148);
          v149 = "native_rsqrt";
        }
        v150 = LLVMTypeOf();
        v151 = gleStateProgram_BuildOperation(v3, v149, 1, (uint64_t)&v178, v150);
        inserted = v151;
        if ((v74 & 1) == 0)
        {
          *(_QWORD *)&v178 = v151;
          v152 = 0;
          inserted = MEMORY[0x22E316E2C](v45);
          do
          {
            if (!*(_QWORD *)(v3 + 152))
              *(_QWORD *)(v3 + 152) = LLVMInt32TypeInContext();
            LLVMConstInt();
            inserted = LLVMBuildInsertElement();
            ++v152;
          }
          while (v152 != 4);
        }
        goto LABEL_212;
      }
      v74 = 1;
      goto LABEL_345;
    case 0xEu:
      v177[0] = 0;
      v75 = (v46 >> 36) & 3;
      if ((_DWORD)v75 == 3)
      {
        v177[0] = *v12;
      }
      else if (!(_DWORD)v75)
      {
        if (!*(_QWORD *)(v3 + 152))
          *(_QWORD *)(v3 + 152) = LLVMInt32TypeInContext();
        LLVMConstInt();
        v76 = 0;
        v177[0] = LLVMBuildExtractElement();
LABEL_358:
        if (*(_DWORD *)(v3 + 216))
        {
          v153 = llvm::ConstantFP::get();
          LLVMTypeOf();
          if (LLVMGetTypeKind() == 13)
          {
            LLVMTypeOf();
            v154 = LLVMGetVectorSize();
            v178 = 0u;
            v179 = 0u;
            if (v154 >= 1)
            {
              v155 = v154;
              v156 = (uint64_t *)&v178;
              do
              {
                *v156++ = v153;
                --v155;
              }
              while (v155);
            }
            LLVMConstVector();
          }
          v157 = LLVMBuildFDiv();
        }
        else
        {
          v158 = LLVMTypeOf();
          v157 = gleStateProgram_BuildOperation(v3, "native_recip", 1, (uint64_t)v177, v158);
        }
        inserted = v157;
        if ((v76 & 1) == 0)
        {
          v177[0] = v157;
          v159 = 0;
          inserted = MEMORY[0x22E316E2C](v45);
          do
          {
            if (!*(_QWORD *)(v3 + 152))
              *(_QWORD *)(v3 + 152) = LLVMInt32TypeInContext();
            LLVMConstInt();
            inserted = LLVMBuildInsertElement();
            ++v159;
          }
          while (v159 != 4);
        }
        goto LABEL_212;
      }
      v76 = 1;
      goto LABEL_358;
    case 0x10u:
      *(_QWORD *)&v178 = 0;
      if (!*(_QWORD *)(v3 + 152))
        *(_QWORD *)(v3 + 152) = LLVMInt32TypeInContext();
      LLVMConstInt();
      *(_QWORD *)&v178 = LLVMBuildExtractElement();
      v77 = "air.exp2";
      if ((_DWORD)v170 == 1)
        v77 = "air.fast_exp2";
      if (*(_DWORD *)(v3 + 216))
        v78 = (char *)v77;
      else
        v78 = "native_exp2";
      v79 = LLVMTypeOf();
      inserted = gleStateProgram_BuildOperation(v3, v78, 1, (uint64_t)&v178, v79);
      *(_QWORD *)&v178 = inserted;
      v80 = 0;
      inserted = MEMORY[0x22E316E2C](v45);
      do
      {
        if (!*(_QWORD *)(v3 + 152))
          *(_QWORD *)(v3 + 152) = LLVMInt32TypeInContext();
        LLVMConstInt();
        inserted = LLVMBuildInsertElement();
        ++v80;
      }
      while (v80 != 4);
      goto LABEL_212;
    case 0x11u:
      if (!*(_QWORD *)(v3 + 152))
        *(_QWORD *)(v3 + 152) = LLVMInt32TypeInContext();
      LLVMConstInt();
      if (!*(_QWORD *)(v3 + 152))
        *(_QWORD *)(v3 + 152) = LLVMInt32TypeInContext();
      v172 = LLVMConstInt();
      if (!*(_QWORD *)(v3 + 152))
        *(_QWORD *)(v3 + 152) = LLVMInt32TypeInContext();
      v170 = LLVMConstInt();
      if (!*(_QWORD *)(v3 + 152))
        *(_QWORD *)(v3 + 152) = LLVMInt32TypeInContext();
      LLVMConstInt();
      *(_QWORD *)&v178 = LLVMBuildExtractElement();
      v81 = LLVMTypeOf();
      v177[0] = gleStateProgram_BuildOperation(v173, "air.floor", 1, (uint64_t)&v178, v81);
      v82 = LLVMTypeOf();
      gleStateProgram_BuildOperation(v173, "air.fast_exp2", 1, (uint64_t)v177, v82);
      v83 = LLVMTypeOf();
      gleStateProgram_BuildOperation(v173, "air.fract", 1, (uint64_t)&v178, v83);
      v84 = LLVMTypeOf();
      gleStateProgram_BuildOperation(v173, "air.fast_exp2", 1, (uint64_t)&v178, v84);
      LLVMTypeOf();
      llvm::ConstantFP::get();
      inserted = MEMORY[0x22E316E2C](v45);
      inserted = LLVMBuildInsertElement();
      inserted = LLVMBuildInsertElement();
      inserted = LLVMBuildInsertElement();
      goto LABEL_210;
    case 0x13u:
      if (!*(_QWORD *)(v3 + 152))
        *(_QWORD *)(v3 + 152) = LLVMInt32TypeInContext();
      LLVMConstInt();
      if (!*(_QWORD *)(v3 + 152))
        *(_QWORD *)(v3 + 152) = LLVMInt32TypeInContext();
      LLVMConstInt();
      if (!*(_QWORD *)(v3 + 152))
        *(_QWORD *)(v3 + 152) = LLVMInt32TypeInContext();
      LLVMConstInt();
      if (!*(_QWORD *)(v3 + 152))
        *(_QWORD *)(v3 + 152) = LLVMInt32TypeInContext();
      LLVMConstInt();
      *(_QWORD *)&v178 = LLVMBuildExtractElement();
      v85 = LLVMTypeOf();
      gleStateProgram_BuildOperation(v173, "air.fast_log2", 1, (uint64_t)&v178, v85);
      inserted = MEMORY[0x22E316E2C](v45);
      inserted = LLVMBuildInsertElement();
      inserted = LLVMBuildInsertElement();
      inserted = LLVMBuildInsertElement();
      goto LABEL_210;
    case 0x14u:
      if (!*(_QWORD *)(v3 + 152))
        *(_QWORD *)(v3 + 152) = LLVMInt32TypeInContext();
      LLVMConstInt();
      if (!*(_QWORD *)(v3 + 152))
        *(_QWORD *)(v3 + 152) = LLVMInt32TypeInContext();
      v172 = LLVMConstInt();
      if (!*(_QWORD *)(v3 + 152))
        *(_QWORD *)(v3 + 152) = LLVMInt32TypeInContext();
      v170 = LLVMConstInt();
      if (!*(_QWORD *)(v3 + 152))
        *(_QWORD *)(v3 + 152) = LLVMInt32TypeInContext();
      v168 = LLVMConstInt();
      *(_QWORD *)&v178 = 0;
      *(_QWORD *)&v178 = LLVMBuildExtractElement();
      v86 = LLVMTypeOf();
      *(_QWORD *)&v178 = gleStateProgram_BuildOperation(v3, "air.fabs", 1, (uint64_t)&v178, v86);
      if (!*(_QWORD *)(v3 + 152))
        *(_QWORD *)(v3 + 152) = LLVMInt32TypeInContext();
      LLVMBuildBitCast();
      if (!*(_QWORD *)(v3 + 152))
        *(_QWORD *)(v3 + 152) = LLVMInt32TypeInContext();
      LLVMConstInt();
      LLVMBuildLShr();
      if (!*(_QWORD *)(v3 + 152))
        *(_QWORD *)(v3 + 152) = LLVMInt32TypeInContext();
      LLVMConstInt();
      LLVMBuildAnd();
      LLVMTypeOf();
      LLVMBuildUIToFP();
      LLVMTypeOf();
      llvm::ConstantFP::get();
      v87 = v173;
      LLVMBuildFSub();
      if (!*(_QWORD *)(v87 + 152))
        *(_QWORD *)(v87 + 152) = LLVMInt32TypeInContext();
      LLVMConstInt();
      LLVMBuildAnd();
      if (!*(_QWORD *)(v87 + 152))
        *(_QWORD *)(v87 + 152) = LLVMInt32TypeInContext();
      LLVMConstInt();
      LLVMBuildOr();
      LLVMTypeOf();
      LLVMBuildBitCast();
      v88 = LLVMTypeOf();
      gleStateProgram_BuildOperation(v87, "air.fast_log2", 1, (uint64_t)&v178, v88);
      LLVMTypeOf();
      llvm::ConstantFP::get();
      inserted = MEMORY[0x22E316E2C](v45);
      inserted = LLVMBuildInsertElement();
      inserted = LLVMBuildInsertElement();
      inserted = LLVMBuildInsertElement();
      goto LABEL_210;
    case 0x15u:
      *(_QWORD *)&v178 = *v12;
      *((_QWORD *)&v178 + 1) = v178;
      v177[0] = 0;
      v177[0] = gleStateProgram_BuildOperation(v3, "air.dot", 2, (uint64_t)&v178, v44);
      if ((_DWORD)v170 == 1)
        v89 = "air.fast_rsqrt";
      else
        v89 = "air.rsqrt";
      v90 = LLVMTypeOf();
      gleStateProgram_BuildOperation(v3, v89, 1, (uint64_t)v177, v90);
      v91 = 0;
      inserted = MEMORY[0x22E316E2C](v45);
      do
      {
        if (!*(_QWORD *)(v3 + 152))
          *(_QWORD *)(v3 + 152) = LLVMInt32TypeInContext();
        LLVMConstInt();
        inserted = LLVMBuildInsertElement();
        ++v91;
      }
      while (v91 != 4);
      v54 = LLVMBuildFMul();
      goto LABEL_211;
    case 0x18u:
      if (!*(_QWORD *)(v3 + 152))
        *(_QWORD *)(v3 + 152) = LLVMInt32TypeInContext();
      LLVMConstInt();
      if (!*(_QWORD *)(v3 + 152))
        *(_QWORD *)(v3 + 152) = LLVMInt32TypeInContext();
      LLVMConstInt();
      *(_QWORD *)&v178 = LLVMBuildExtractElement();
      v92 = LLVMTypeOf();
      gleStateProgram_BuildOperation(v173, "air.fast_cos", 1, (uint64_t)&v178, v92);
      v93 = LLVMTypeOf();
      gleStateProgram_BuildOperation(v173, "air.fast_sin", 1, (uint64_t)&v178, v93);
      inserted = MEMORY[0x22E316E2C](v45);
      inserted = LLVMBuildInsertElement();
      goto LABEL_210;
    case 0x19u:
      if (!*(_QWORD *)(v3 + 152))
        *(_QWORD *)(v3 + 152) = LLVMInt32TypeInContext();
      LLVMConstInt();
      if (!*(_QWORD *)(v3 + 152))
        *(_QWORD *)(v3 + 152) = LLVMInt32TypeInContext();
      LLVMConstInt();
      if (!*(_QWORD *)(v3 + 152))
        *(_QWORD *)(v3 + 152) = LLVMInt32TypeInContext();
      LLVMConstInt();
      if (!*(_QWORD *)(v3 + 152))
        *(_QWORD *)(v3 + 152) = LLVMInt32TypeInContext();
      LLVMConstInt();
      *(_QWORD *)&v178 = LLVMBuildExtractElement();
      v94 = LLVMTypeOf();
      v95 = "air.fast_sin";
      goto LABEL_197;
    case 0x1Au:
      if (!*(_QWORD *)(v3 + 152))
        *(_QWORD *)(v3 + 152) = LLVMInt32TypeInContext();
      LLVMConstInt();
      if (!*(_QWORD *)(v3 + 152))
        *(_QWORD *)(v3 + 152) = LLVMInt32TypeInContext();
      LLVMConstInt();
      if (!*(_QWORD *)(v3 + 152))
        *(_QWORD *)(v3 + 152) = LLVMInt32TypeInContext();
      LLVMConstInt();
      if (!*(_QWORD *)(v3 + 152))
        *(_QWORD *)(v3 + 152) = LLVMInt32TypeInContext();
      LLVMConstInt();
      *(_QWORD *)&v178 = LLVMBuildExtractElement();
      v94 = LLVMTypeOf();
      v95 = "air.fast_cos";
LABEL_197:
      gleStateProgram_BuildOperation(v173, v95, 1, (uint64_t)&v178, v94);
      inserted = MEMORY[0x22E316E2C](v45);
      inserted = LLVMBuildInsertElement();
      inserted = LLVMBuildInsertElement();
      inserted = LLVMBuildInsertElement();
      goto LABEL_210;
    case 0x1Fu:
      gleLLVMFixPrecision(v3, v170, v12, 2);
      goto LABEL_247;
    case 0x20u:
      gleLLVMFixPrecision(v3, v170, v12, 2);
      v55 = LLVMBuildFSub();
      goto LABEL_301;
    case 0x22u:
      gleLLVMFixPrecision(v3, v170, v12, 2);
      v55 = LLVMBuildFMul();
      goto LABEL_301;
    case 0x28u:
    case 0x29u:
    case 0x2Au:
    case 0x52u:
      v48 = *(_OWORD *)v12;
      v178 = *(_OWORD *)v12;
      if ((v46 & 0x3FC0) == 0xA00)
      {
        *(_QWORD *)&v178 = gleStateProgram_TruncateVec4(v3, v48, 3);
        *((_QWORD *)&v178 + 1) = gleStateProgram_TruncateVec4(v3, *((uint64_t *)&v178 + 1), 3);
        v46 = *(_QWORD *)v15;
      }
      if ((v46 & 0x3FC0) == 0x1480)
      {
        *(_QWORD *)&v178 = gleStateProgram_TruncateVec4(v3, v178, 2);
        *((_QWORD *)&v178 + 1) = gleStateProgram_TruncateVec4(v3, *((uint64_t *)&v178 + 1), 2);
        v46 = *(_QWORD *)v15;
      }
      if ((v46 & 0x3FC0) == 0xA80)
      {
        LLVMFloatTypeInContext();
        llvm::ConstantFP::get();
        if (!*(_QWORD *)(v3 + 152))
          *(_QWORD *)(v3 + 152) = LLVMInt32TypeInContext();
        LLVMConstInt();
        *(_QWORD *)&v178 = LLVMBuildInsertElement();
      }
      if (*(_DWORD *)(v3 + 216))
        v49 = "air.dot";
      else
        v49 = "dot";
      gleStateProgram_BuildOperation(v3, v49, 2, (uint64_t)&v178, v44);
      v50 = 0;
      inserted = MEMORY[0x22E316E2C](v45);
      v51 = v173;
      do
      {
        if (!*(_QWORD *)(v173 + 152))
          *(_QWORD *)(v51 + 152) = LLVMInt32TypeInContext();
        LLVMConstInt();
        inserted = LLVMBuildInsertElement();
        ++v50;
      }
      while (v50 != 4);
      goto LABEL_212;
    case 0x2Bu:
      if (!*(_QWORD *)(v3 + 152))
        *(_QWORD *)(v3 + 152) = LLVMInt32TypeInContext();
      v172 = LLVMConstInt();
      if (!*(_QWORD *)(v3 + 152))
        *(_QWORD *)(v3 + 152) = LLVMInt32TypeInContext();
      LLVMConstInt();
      if (!*(_QWORD *)(v3 + 152))
        *(_QWORD *)(v3 + 152) = LLVMInt32TypeInContext();
      v96 = LLVMConstInt();
      if (!*(_QWORD *)(v3 + 152))
        *(_QWORD *)(v3 + 152) = LLVMInt32TypeInContext();
      LLVMConstInt();
      LLVMBuildExtractElement();
      LLVMBuildExtractElement();
      LLVMBuildExtractElement();
      v170 = v96;
      LLVMBuildExtractElement();
      LLVMBuildFMul();
      LLVMTypeOf();
      llvm::ConstantFP::get();
      inserted = MEMORY[0x22E316E2C](v45);
      inserted = LLVMBuildInsertElement();
      inserted = LLVMBuildInsertElement();
      inserted = LLVMBuildInsertElement();
LABEL_210:
      v54 = LLVMBuildInsertElement();
      goto LABEL_211;
    case 0x2Cu:
      if (*(_DWORD *)(v3 + 216))
      {
        v97 = "air.fmin";
        v98 = "air.fast_fmin";
        goto LABEL_217;
      }
      v70 = "__cl_fmin";
      goto LABEL_293;
    case 0x2Du:
      if (*(_DWORD *)(v3 + 216))
      {
        v97 = "air.fmax";
        v98 = "air.fast_fmax";
LABEL_217:
        if ((_DWORD)v170 == 1)
          v70 = (char *)v98;
        else
          v70 = (char *)v97;
      }
      else
      {
        v70 = "__cl_fmax";
      }
      goto LABEL_293;
    case 0x2Eu:
      if (*(_DWORD *)(v3 + 216))
      {
        if (!*(_QWORD *)(v3 + 152))
          *(_QWORD *)(v3 + 152) = LLVMInt32TypeInContext();
        LLVMConstInt();
        v172 = LLVMBuildExtractElement();
        if (!*(_QWORD *)(v3 + 152))
          *(_QWORD *)(v3 + 152) = LLVMInt32TypeInContext();
        LLVMConstInt();
        LLVMBuildExtractElement();
        if (!*(_QWORD *)(v3 + 152))
          *(_QWORD *)(v3 + 152) = LLVMInt32TypeInContext();
        LLVMConstInt();
        LLVMBuildExtractElement();
        if (!*(_QWORD *)(v3 + 152))
          *(_QWORD *)(v3 + 152) = LLVMInt32TypeInContext();
        v170 = v45;
        LLVMConstInt();
        v168 = LLVMBuildExtractElement();
        if (!*(_QWORD *)(v3 + 152))
          *(_QWORD *)(v3 + 152) = LLVMInt32TypeInContext();
        LLVMConstInt();
        LLVMBuildExtractElement();
        if (!*(_QWORD *)(v3 + 152))
          *(_QWORD *)(v3 + 152) = LLVMInt32TypeInContext();
        LLVMConstInt();
        LLVMBuildExtractElement();
        LLVMBuildFMul();
        LLVMBuildFMul();
        LLVMBuildFSub();
        gleLLVMGetConstantInt32(v3);
        inserted = LLVMBuildInsertElement();
        LLVMBuildFMul();
        LLVMBuildFMul();
        LLVMBuildFSub();
        gleLLVMGetConstantInt32(v3);
        inserted = LLVMBuildInsertElement();
        LLVMBuildFMul();
        LLVMBuildFMul();
        LLVMBuildFSub();
        gleLLVMGetConstantInt32(v3);
        inserted = LLVMBuildInsertElement();
LABEL_261:
        v45 = v170;
        v15 = v171;
        goto LABEL_302;
      }
      v70 = "cross";
LABEL_293:
      v123 = v3;
      v124 = 2;
LABEL_300:
      v55 = gleStateProgram_BuildOperation(v123, v70, v124, (uint64_t)v12, v45);
      goto LABEL_301;
    case 0x30u:
      if (!*(_QWORD *)(v3 + 152))
        *(_QWORD *)(v3 + 152) = LLVMInt32TypeInContext();
      v99 = MEMORY[0x22E316F4C]();
      v55 = MEMORY[0x22E316CF4](v99);
      goto LABEL_301;
    case 0x31u:
    case 0x32u:
    case 0x33u:
    case 0x34u:
    case 0x35u:
    case 0x36u:
      LLVMBuildFCmp();
      v52 = llvm::ConstantFP::get();
      v53 = llvm::ConstantFP::get();
      *(_QWORD *)&v178 = v52;
      *((_QWORD *)&v178 + 1) = v52;
      *(_QWORD *)&v179 = v52;
      *((_QWORD *)&v179 + 1) = v52;
      LLVMConstVector();
      *(_QWORD *)&v178 = v53;
      *((_QWORD *)&v178 + 1) = v53;
      *(_QWORD *)&v179 = v53;
      *((_QWORD *)&v179 + 1) = v53;
      LLVMConstVector();
      v54 = LLVMBuildSelect();
      goto LABEL_211;
    case 0x37u:
      if (!*(_QWORD *)(v3 + 152))
        *(_QWORD *)(v3 + 152) = LLVMInt32TypeInContext();
      v100 = MEMORY[0x22E316F4C]();
      v55 = MEMORY[0x22E316D18](v100);
      goto LABEL_301;
    case 0x38u:
      v178 = 0uLL;
      v101 = (v46 >> 36) & 3;
      if ((_DWORD)v101 == 3)
      {
        v102 = v12[1];
        *(_QWORD *)&v178 = *v12;
        v103 = 1;
      }
      else
      {
        if ((_DWORD)v101)
        {
          v103 = 1;
LABEL_375:
          v160 = "air.powr";
          if ((_DWORD)v170 == 1)
            v160 = "air.fast_powr";
          if (*(_DWORD *)(v3 + 216))
            v161 = (char *)v160;
          else
            v161 = "native_powr";
          v162 = LLVMTypeOf();
          inserted = gleStateProgram_BuildOperation(v3, v161, 2, (uint64_t)&v178, v162);
          v163 = LLVMTypeOf();
          MEMORY[0x22E316D18](v163);
          LLVMBuildFCmp();
          inserted = LLVMBuildSelect();
          if ((v103 & 1) == 0)
          {
            v164 = 0;
            inserted = MEMORY[0x22E316E2C](v45);
            v165 = v173;
            do
            {
              if (!*(_QWORD *)(v173 + 152))
                *(_QWORD *)(v165 + 152) = LLVMInt32TypeInContext();
              LLVMConstInt();
              inserted = LLVMBuildInsertElement();
              ++v164;
            }
            while (v164 != 4);
          }
          goto LABEL_212;
        }
        if (!*(_QWORD *)(v3 + 152))
          *(_QWORD *)(v3 + 152) = LLVMInt32TypeInContext();
        LLVMConstInt();
        *(_QWORD *)&v178 = LLVMBuildExtractElement();
        v102 = LLVMBuildExtractElement();
        v103 = 0;
      }
      *((_QWORD *)&v178 + 1) = v102;
      goto LABEL_375;
    case 0x3Au:
      gleLLVMFixPrecision(v3, v170, v12, 2);
      v55 = LLVMBuildFDiv();
      goto LABEL_301;
    case 0x3Cu:
      gleLLVMFixPrecision(v3, v170, v12, 3);
      LLVMBuildFSub();
      LLVMBuildFMul();
      v15 = v171;
LABEL_247:
      v55 = LLVMBuildFAdd();
      goto LABEL_301;
    case 0x3Eu:
      v104 = LLVMFloatTypeInContext();
      v105 = MEMORY[0x22E316F4C](v104, 4);
      MEMORY[0x22E316D18](v105);
      v15 = v171;
      LLVMBuildFCmp();
      v55 = LLVMBuildSelect();
      goto LABEL_301;
    case 0x3Fu:
      if (*(_DWORD *)(v3 + 216))
        v70 = "air.mad";
      else
        v70 = "mad";
      v123 = v3;
      v124 = 3;
      goto LABEL_300;
    case 0x41u:
      v106 = *(_DWORD *)(v15 + 24);
      *(int8x8_t *)&v178 = vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v106), (uint32x2_t)0xFFFFFFECFFFFFFF0), (int8x8_t)0xF0000000FLL);
      DWORD2(v178) = HIBYTE(v106) & 0xF;
      HIDWORD(v178) = v106 >> 28;
      LLVMFloatTypeInContext();
      v172 = llvm::ConstantFP::get();
      LLVMFloatTypeInContext();
      llvm::ConstantFP::get();
      LLVMFloatTypeInContext();
      llvm::ConstantFP::get();
      v170 = v45;
      v107 = 0;
      inserted = MEMORY[0x22E316E2C](v45);
      do
      {
        v108 = *((_DWORD *)&v178 + v107);
        if (v108 < 8)
        {
          if (!*(_QWORD *)(v3 + 152))
            *(_QWORD *)(v3 + 152) = LLVMInt32TypeInContext();
          LLVMConstInt();
          LLVMBuildExtractElement();
          if ((v108 & 4) != 0)
            LLVMBuildFNeg();
          v3 = v173;
        }
        if (!*(_QWORD *)(v3 + 152))
          *(_QWORD *)(v3 + 152) = LLVMInt32TypeInContext();
        LLVMConstInt();
        inserted = LLVMBuildInsertElement();
        ++v107;
      }
      while (v107 != 4);
      goto LABEL_261;
    case 0x42u:
    case 0x43u:
    case 0x44u:
    case 0x45u:
    case 0x46u:
      if ((int)v172 < 2)
        v47 = 0;
      else
        v47 = v12[1];
      v55 = gleStateProgram_BuildTextureOperation(v3, (_QWORD *)v15, *v12, v47, v44);
      goto LABEL_301;
    case 0x48u:
      v109 = LLVMTypeOf();
      if (!*(_QWORD *)(v3 + 152))
        *(_QWORD *)(v3 + 152) = LLVMInt32TypeInContext();
      v110 = MEMORY[0x22E316F4C]();
      v54 = *v12;
      if (v109 == v110)
      {
LABEL_211:
        inserted = v54;
        goto LABEL_212;
      }
      v111 = LLVMTypeOf();
      inserted = gleStateProgram_BuildOperation(v3, "air.floor", 1, (uint64_t)v12, v111);
      snprintf_l((char *)&v178, 0x200uLL, 0, "%s%s.%s%s.%s", "air.convert", ".s", "v4i32", ".f", "v4f32");
      v15 = v171;
      if (!*(_QWORD *)(v3 + 152))
        *(_QWORD *)(v3 + 152) = LLVMInt32TypeInContext();
      v112 = MEMORY[0x22E316F4C]();
      v55 = gleLLVMCallFunction(v3, (uint64_t)&v178, v112, (uint64_t)&inserted, 1u, 0, 0);
LABEL_301:
      inserted = v55;
      goto LABEL_302;
    case 0x4Fu:
      if ((_DWORD)v172)
      {
        LLVMFloatTypeInContext();
        *(_QWORD *)&v178 = llvm::ConstantFP::get();
        *((_QWORD *)&v178 + 1) = v178;
        *(_QWORD *)&v179 = v178;
        *((_QWORD *)&v179 + 1) = v178;
        LLVMConstVector();
        *(_QWORD *)&v178 = LLVMBuildFCmp();
        v113 = LLVMInt1TypeInContext();
        gleStateProgram_BuildOperation(v3, "air.any", 1, (uint64_t)&v178, v113);
      }
      else
      {
        TestCC_XYZW(v3, v15);
      }
      LLVMAppendBasicBlockInContext();
      LLVMAppendBasicBlockInContext();
      LLVMBuildCondBr();
      LLVMPositionBuilderAtEnd();
      v125 = LLVMVoidTypeInContext();
      MEMORY[0x22E316DC0]("noreturn", 8);
      *(_QWORD *)&v178 = LLVMCreateEnumAttribute();
      gleLLVMCallFunction(v173, (uint64_t)"air.discard_fragment", v125, 0, 0, (uint64_t)&v178, 1u);
      LLVMBuildBr();
      LLVMPositionBuilderAtEnd();
      goto LABEL_212;
    case 0x50u:
      v70 = "air.dfdx";
      goto LABEL_299;
    case 0x51u:
      v70 = "air.dfdy";
      goto LABEL_299;
    case 0x55u:
      v114 = malloc_type_malloc(0x28uLL, 0x20040769AC3DAuLL);
      *v114 = 0;
      v114[1] = LLVMAppendBasicBlockInContext();
      v115 = LLVMAppendBasicBlockInContext();
      v114[2] = v115;
      v114[3] = v115;
      TestCC_XYZW(v3, v171);
      LLVMBuildCondBr();
      LLVMPositionBuilderAtEnd();
      v114[4] = *(_QWORD *)(v3 + 48);
      *(_QWORD *)(v3 + 48) = v114;
      goto LABEL_212;
    case 0x57u:
      v116 = malloc_type_malloc(0x28uLL, 0x20040769AC3DAuLL);
      v117 = *(_QWORD *)(v3 + 152);
      if (!v117)
      {
        v117 = LLVMInt32TypeInContext();
        *(_QWORD *)(v3 + 152) = v117;
      }
      *v116 = allocateVariable(v3, v117, 0);
      v116[1] = LLVMAppendBasicBlockInContext();
      v116[2] = 0;
      v116[3] = LLVMAppendBasicBlockInContext();
      if (!*(_QWORD *)(v3 + 152))
        *(_QWORD *)(v3 + 152) = LLVMInt32TypeInContext();
      LLVMConstInt();
      v177[0] = LLVMBuildExtractElement();
      v118 = LLVMTypeOf();
      v176[0] = gleStateProgram_BuildOperation(v3, "air.floor", 1, (uint64_t)v177, v118);
      snprintf_l((char *)&v178, 0x200uLL, 0, "%s%s.%s%s.%s", "air.convert", ".s", "i32", ".f", "f32");
      v119 = *(_QWORD *)(v3 + 152);
      if (!v119)
      {
        v119 = LLVMInt32TypeInContext();
        *(_QWORD *)(v3 + 152) = v119;
      }
      gleLLVMCallFunction(v3, (uint64_t)&v178, v119, (uint64_t)v176, 1u, 0, 0);
      LLVMBuildStore();
      gleLLVMGetConstantInt32(v3);
      LLVMBuildICmp();
      LLVMBuildCondBr();
      LLVMPositionBuilderAtEnd();
      v116[4] = *(_QWORD *)(v3 + 48);
      *(_QWORD *)(v3 + 48) = v116;
      goto LABEL_212;
    case 0x58u:
      v120 = *(_QWORD *)(v3 + 48);
      *(_QWORD *)(v120 + 24) = LLVMAppendBasicBlockInContext();
      LLVMBuildBr();
      v15 = v171;
      LLVMPositionBuilderAtEnd();
      goto LABEL_302;
    case 0x59u:
      v121 = *(_QWORD **)(v3 + 48);
      LLVMBuildBr();
      LLVMPositionBuilderAtEnd();
      *(_QWORD *)(v3 + 48) = v121[4];
      goto LABEL_283;
    case 0x5Bu:
      v121 = *(_QWORD **)(v3 + 48);
      LLVMBuildLoad();
      gleLLVMGetConstantInt32(v173);
      LLVMBuildSub();
      LLVMBuildStore();
      gleLLVMGetConstantInt32(v173);
      LLVMBuildICmp();
      LLVMBuildCondBr();
      LLVMPositionBuilderAtEnd();
      *(_QWORD *)(v173 + 48) = v121[4];
LABEL_283:
      v122 = v121;
      v15 = v171;
      free(v122);
      goto LABEL_302;
    case 0x6Du:
      v55 = LLVMBuildFPCast();
      goto LABEL_301;
    case 0x70u:
      if (*(_DWORD *)(v3 + 216))
      {
        if ((_DWORD)v170 == 1)
          v70 = "air.fast_exp";
        else
          v70 = "air.exp";
      }
      else
      {
        v70 = "native_exp";
      }
LABEL_299:
      v123 = v3;
      v124 = 1;
      goto LABEL_300;
    default:
      goto LABEL_302;
  }
}

uint64_t readTempValue(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v5 = a2;
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8 * a2);
  if (!v6)
    v6 = LLVMFloatTypeInContext();
  v7 = MEMORY[0x22E316F4C](v6, 4);
  if (*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v5))
  {
    if (a3)
      return LLVMBuildLoad();
  }
  else
  {
    v9 = v7;
    v10 = MEMORY[0x22E316D18]();
    *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v5) = allocateVariable(a1, v9, v10);
    if (a3)
      return LLVMBuildLoad();
  }
  return 0;
}

uint64_t gleLLVMApplySwizzle(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6)
{
  if (a3 || a4 != 1 || a5 != 2 || a6 != 3)
  {
    if (!*(_QWORD *)(a1 + 152))
      *(_QWORD *)(a1 + 152) = LLVMInt32TypeInContext();
    LLVMConstInt();
    LLVMConstInt();
    LLVMConstInt();
    LLVMConstInt();
    LLVMConstVector();
    return LLVMBuildShuffleVector();
  }
  return a2;
}

uint64_t gleLLVMFixPrecision(uint64_t a1, int a2, uint64_t *a3, int a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  result = LLVMFloatTypeInContext();
  if (a2 != 1)
    result = LLVMHalfTypeInContext();
  v8 = result;
  if (a4 >= 1)
  {
    v9 = a4;
    do
    {
      v10 = LLVMTypeOf();
      result = LLVMGetTypeKind();
      v11 = v8;
      if ((_DWORD)result == 13)
      {
        v12 = LLVMGetVectorSize();
        result = MEMORY[0x22E316F4C](v8, v12);
        v11 = result;
      }
      if (v10 != v11)
      {
        result = LLVMBuildFPCast();
        *a3 = result;
      }
      ++a3;
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t gleStateProgram_BuildTextureOperation(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t inserted;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  size_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  const char *v46;
  const char *v47;
  int v48;
  const char *v49;
  char *v50;
  int v51;
  uint64_t Value;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t Element;
  uint64_t v69;
  uint64_t v70;
  char v71[512];
  uint64_t v72;

  v57 = a4;
  v72 = *MEMORY[0x24BDAC8D0];
  v8 = *a2;
  v9 = *a2 & 7;
  v63 = a2;
  v59 = a2[v9 + 1];
  v10 = (v59 & 0x1F) != 0;
  v11 = (v8 >> 6);
  v61 = v11;
  if (v11 != 69 && v11 != 67)
    v10 = 0;
  v12 = 0;
  v62 = *(_DWORD *)(a1 + 216);
  v13 = 1;
  v14 = 0;
  v15 = 1;
  switch(v59 & 0x1F)
  {
    case 0:
    case 1:
      v12 = 0;
      v13 = 0;
      v15 = 3;
      goto LABEL_8;
    case 2:
    case 3:
      goto LABEL_7;
    case 4:
      break;
    case 5:
    case 6:
      v12 = 1;
LABEL_7:
      v13 = 0;
      v15 = 2;
LABEL_8:
      v14 = 1;
      break;
    case 7:
      v14 = 0;
      v12 = 1;
      break;
    default:
      v14 = 0;
      v15 = 1;
      break;
  }
  v60 = v14;
  v67 = v59 & 0x1F;
  v66 = v12;
  if (v10)
  {
    if (!*(_QWORD *)(a1 + 152))
      *(_QWORD *)(a1 + 152) = LLVMInt32TypeInContext();
    LLVMConstInt();
    Element = LLVMBuildExtractElement();
  }
  else
  {
    Element = 0;
  }
  v16 = LLVMFloatTypeInContext();
  v64 = a5;
  v58 = v15;
  if (v13)
  {
    if (!*(_QWORD *)(a1 + 152))
      *(_QWORD *)(a1 + 152) = LLVMInt32TypeInContext();
    LLVMConstInt();
    inserted = LLVMBuildExtractElement();
    if (v10)
      inserted = LLVMBuildFDiv();
  }
  else
  {
    v18 = MEMORY[0x22E316F4C](v16, v15);
    v19 = v18 != LLVMTypeOf() || v10;
    inserted = a3;
    if (v19 == 1)
    {
      MEMORY[0x22E316E2C](v18);
      v20 = 0;
      v21 = v58;
      do
      {
        if (!*(_QWORD *)(a1 + 152))
          *(_QWORD *)(a1 + 152) = LLVMInt32TypeInContext();
        LLVMConstInt();
        LLVMBuildExtractElement();
        if (v10)
          LLVMBuildFDiv();
        inserted = LLVMBuildInsertElement();
        ++v20;
      }
      while (v21 != v20);
    }
  }
  v22 = *(_DWORD *)(a1 + 216);
  v23 = v66;
  if (v66)
    LODWORD(v24) = 5;
  else
    LODWORD(v24) = 4;
  if (v66)
    v25 = 10;
  else
    v25 = 8;
  if (!(_DWORD)v67)
    v25 -= 2;
  v26 = v25 | 1;
  if (v22)
    v24 = v26;
  else
    v24 = v24;
  v65 = v24;
  v27 = 8 * v24;
  MEMORY[0x24BDAC7A8]();
  v29 = (uint64_t *)((char *)&v56 - v28);
  bzero((char *)&v56 - v28, v27);
  v30 = (_QWORD *)(*(_QWORD *)(a1 + 176) + 40 * (HIDWORD(v63[(*v63 & 7) + 1]) & 0x7F));
  *v29 = *v30;
  v29[1] = v30[1];
  if (v23)
  {
    if (!*(_QWORD *)(a1 + 152))
      *(_QWORD *)(a1 + 152) = LLVMInt32TypeInContext();
    v29[2] = LLVMConstInt();
    v29[3] = inserted;
    if (!*(_QWORD *)(a1 + 152))
      *(_QWORD *)(a1 + 152) = LLVMInt32TypeInContext();
    LLVMConstInt();
    v31 = LLVMBuildExtractElement();
    if (v10)
      v31 = LLVMBuildFDiv();
    v29[4] = v31;
    v22 = *(_DWORD *)(a1 + 216);
    v32 = 5;
  }
  else
  {
    v29[2] = inserted;
    v32 = 3;
  }
  if (!v22)
  {
    LLVMFloatTypeInContext();
    v39 = llvm::ConstantFP::get();
    v37 = v65;
    goto LABEL_71;
  }
  LLVMInt1TypeInContext();
  v33 = *(_QWORD *)(a1 + 152);
  if (!v33)
  {
    v33 = LLVMInt32TypeInContext();
    *(_QWORD *)(a1 + 152) = v33;
  }
  if (v60)
    v33 = MEMORY[0x22E316F4C](v33, v58);
  if ((_DWORD)v67)
  {
    v34 = v32 + 1;
    v29[v32] = LLVMConstInt();
    v32 += 2;
    v29[v34] = MEMORY[0x22E316D18](v33);
  }
  v35 = v61;
  v29[v32] = LLVMConstInt();
  if ((v35 - 68) > 2)
  {
    LLVMFloatTypeInContext();
    v38 = llvm::ConstantFP::get();
  }
  else
  {
    v36 = *(_QWORD *)(a1 + 152);
    if (v57)
    {
      v37 = v65;
      if (!v36)
        *(_QWORD *)(a1 + 152) = LLVMInt32TypeInContext();
      LLVMConstInt();
      v38 = LLVMBuildExtractElement();
      goto LABEL_68;
    }
    if (!v36)
      *(_QWORD *)(a1 + 152) = LLVMInt32TypeInContext();
    LLVMConstInt();
    v38 = LLVMBuildExtractElement();
  }
  v37 = v65;
LABEL_68:
  v29[v32 + 1] = v38;
  v40 = v32 + 2;
  v41 = LLVMFloatTypeInContext();
  v32 += 3;
  v29[v40] = MEMORY[0x22E316D18](v41);
  if (!*(_QWORD *)(a1 + 152))
    *(_QWORD *)(a1 + 152) = LLVMInt32TypeInContext();
  v39 = LLVMConstInt();
LABEL_71:
  v29[v32] = v39;
  MEMORY[0x24BDAC7A8]();
  v42 = (char *)&v56 - ((8 * v37 + 15) & 0xFFFFFFFF0);
  bzero(v42, v27);
  v43 = 0;
  do
  {
    *(_QWORD *)&v42[v43] = LLVMTypeOf();
    v43 += 8;
  }
  while (8 * v37 != v43);
  v44 = v66;
  v45 = v64;
  if (*(_DWORD *)(a1 + 216))
  {
    if (v66)
      v46 = "air.sample_compare_";
    else
      v46 = "air.sample_";
    if (v67 >= 0x12)
      abort();
    v47 = off_24F9476B8[v59 & 0x1F];
    v48 = LLVMGetTypeKind();
    if (v44)
    {
      if (v48 == 2)
        v49 = "f32";
      else
        v49 = "f16";
    }
    else
    {
      if (v48 == 2)
        v49 = "v4f32";
      else
        v49 = "v4f16";
      v45 = MEMORY[0x22E316F4C](v45, 4);
    }
    snprintf_l(v71, 0x200uLL, 0, "%s%s.%s", v46, v47, v49);
    v51 = v62;
  }
  else
  {
    if (LLVMGetTypeKind() == 2)
      v50 = "read_imagef";
    else
      v50 = "read_imageh";
    v51 = v62;
    if (!v44)
      v45 = MEMORY[0x22E316F4C](v45, 4);
    glpMangleNameLLVM(*(_QWORD *)(a1 + 24), v71, 0x200uLL, v50, v45, (uint64_t *)v42, 0, v37);
  }
  if (!LLVMGetNamedFunction())
  {
    if (v51)
    {
      v69 = v45;
      v70 = LLVMInt8TypeInContext();
      LLVMStructTypeInContext();
    }
    LLVMFunctionType();
    LLVMAddFunction();
    MEMORY[0x22E316DC0]("readonly", 8);
    LLVMCreateEnumAttribute();
    LLVMAddAttributeAtIndex();
    MEMORY[0x22E316DC0]("nounwind", 8);
    LLVMCreateEnumAttribute();
    LLVMAddAttributeAtIndex();
  }
  Value = LLVMBuildCall();
  if (v51)
    Value = LLVMBuildExtractValue();
  if (v44)
  {
    v53 = LLVMFloatTypeInContext();
    v54 = MEMORY[0x22E316F4C](v53, 4);
    MEMORY[0x22E316E2C](v54);
    gleLLVMGetConstantInt32(a1);
    LLVMBuildInsertElement();
    gleLLVMGetConstantInt32(a1);
    LLVMBuildInsertElement();
    gleLLVMGetConstantInt32(a1);
    LLVMBuildInsertElement();
    gleLLVMGetConstantInt32(a1);
    return LLVMBuildInsertElement();
  }
  return Value;
}

uint64_t TestCC_XYZW(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const float *v5;
  uint64_t result;

  if ((*(_QWORD *)(a2 + 8) & 0xELL) != 0)
    readCCValue(a1, *(_DWORD *)(a2 + 8) & 1);
  LLVMInt1TypeInContext();
  LLVMConstInt();
  v4 = 0;
  v5 = (const float *)(a2 + 8);
  vld1q_dup_f32(v5);
  do
  {
    TestCC(a1, (*(_DWORD *)(a2 + 8) >> 1) & 7);
    result = LLVMBuildOr();
    v4 += 4;
  }
  while (v4 != 16);
  return result;
}

uint64_t allocateVariable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  LLVMGetInsertBlock();
  LLVMPositionBuilderBefore();
  v4 = LLVMBuildAlloca();
  if (a3)
    LLVMBuildStore();
  LLVMPositionBuilderAtEnd();
  return v4;
}

uint64_t gleLLVMApplyDestMaskAndCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t CCValue;
  uint64_t v8;
  const float *v9;
  uint32x4_t v10;
  int8x16_t v11;
  int8x16_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v18;
  uint64_t inserted;
  uint64_t v20;
  int8x16_t v21;
  int8x16_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 216))
    LLVMTypeOf();
  if (!*(_QWORD *)(a1 + 152))
    *(_QWORD *)(a1 + 152) = LLVMInt32TypeInContext();
  if ((*(_QWORD *)(a4 + 8) & 0xELL) != 0)
    readCCValue(a1, *(_DWORD *)(a4 + 8) & 1);
  if ((*(_QWORD *)a4 & 0x20000000000) != 0)
    CCValue = readCCValue(a1, (*(_QWORD *)a4 >> 42) & 1);
  else
    CCValue = 0;
  v8 = 0;
  v9 = (const float *)(a4 + 8);
  v10 = (uint32x4_t)vld1q_dup_f32(v9);
  v11.i64[0] = 0x100000001;
  v11.i64[1] = 0x100000001;
  v12.i64[0] = 0x300000003;
  v12.i64[1] = 0x300000003;
  v21 = vandq_s8((int8x16_t)vshlq_u32(v10, (uint32x4_t)xmmword_22D806810), v12);
  v22 = vandq_s8((int8x16_t)vshlq_u32(v10, (uint32x4_t)xmmword_22D8066D0), v11);
  v18 = a4;
  do
  {
    if (v22.i32[v8])
    {
      LLVMConstInt();
      LLVMBuildExtractElement();
      inserted = LLVMBuildInsertElement();
      if (CCValue)
      {
        v13 = LLVMTypeOf();
        MEMORY[0x22E316D18](v13);
        LLVMTypeOf();
        if (LLVMGetTypeKind() == 2)
        {
          LLVMFloatTypeInContext();
          v20 = LLVMBuildFPCast();
          v14 = LLVMTypeOf();
          v20 = gleStateProgram_BuildOperation(a1, "air.fabs", 1, (uint64_t)&v20, v14);
          LLVMTypeOf();
          llvm::ConstantFP::get();
          if (!*(_QWORD *)(a1 + 152))
            *(_QWORD *)(a1 + 152) = LLVMInt32TypeInContext();
          v20 = LLVMBuildBitCast();
          LLVMBuildBitCast();
          LLVMBuildICmp();
          LLVMBuildFCmp();
          LLVMBuildFCmp();
          if (!*(_QWORD *)(a1 + 152))
            *(_QWORD *)(a1 + 152) = LLVMInt32TypeInContext();
          LLVMConstInt();
          if (!*(_QWORD *)(a1 + 152))
            *(_QWORD *)(a1 + 152) = LLVMInt32TypeInContext();
          LLVMConstInt();
          LLVMBuildSelect();
          if (!*(_QWORD *)(a1 + 152))
            *(_QWORD *)(a1 + 152) = LLVMInt32TypeInContext();
          LLVMConstInt();
          LLVMBuildSelect();
          if (!*(_QWORD *)(a1 + 152))
            *(_QWORD *)(a1 + 152) = LLVMInt32TypeInContext();
        }
        else
        {
          LLVMBuildICmp();
          LLVMBuildICmp();
          if (!*(_QWORD *)(a1 + 152))
            *(_QWORD *)(a1 + 152) = LLVMInt32TypeInContext();
          LLVMConstInt();
          if (!*(_QWORD *)(a1 + 152))
            *(_QWORD *)(a1 + 152) = LLVMInt32TypeInContext();
          LLVMConstInt();
          LLVMBuildSelect();
          if (!*(_QWORD *)(a1 + 152))
            *(_QWORD *)(a1 + 152) = LLVMInt32TypeInContext();
        }
        LLVMConstInt();
        LLVMBuildSelect();
        v15 = LLVMBuildInsertElement();
        a4 = v18;
      }
      else
      {
        v15 = 0;
      }
      v16 = (*(_DWORD *)(a4 + 8) >> 1) & 7;
      if (v16)
      {
        TestCC(a1, v16);
        a2 = LLVMBuildSelect();
        if (CCValue)
          CCValue = LLVMBuildSelect();
        else
          CCValue = v15;
      }
      else
      {
        CCValue = v15;
        a2 = inserted;
      }
    }
    ++v8;
  }
  while (v8 != 4);
  if ((*(_BYTE *)(a4 + 5) & 2) != 0)
    LLVMBuildStore();
  return a2;
}

uint64_t readAddressValue(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  if (!*(_QWORD *)(a1 + 152))
    *(_QWORD *)(a1 + 152) = LLVMInt32TypeInContext();
  v6 = MEMORY[0x22E316F4C]();
  if (*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * a2))
  {
    if (a3)
      return LLVMBuildLoad();
  }
  else
  {
    v8 = v6;
    v9 = MEMORY[0x22E316D18]();
    *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * a2) = allocateVariable(a1, v8, v9);
    if (a3)
      return LLVMBuildLoad();
  }
  return 0;
}

uint64_t gleLLVMVectorExtend(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  size_t v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD v14[2];

  v14[1] = *MEMORY[0x24BDAC8D0];
  v6 = LLVMTypeOf();
  if (LLVMGetTypeKind() == 13)
  {
    if (LLVMGetVectorSize() != (_DWORD)a3)
    {
      if (!*(_QWORD *)(a1 + 152))
        *(_QWORD *)(a1 + 152) = LLVMInt32TypeInContext();
      MEMORY[0x24BDAC7A8]();
      v9 = (char *)v14 - v8;
      if (v7 >= 0x200)
        v10 = 512;
      else
        v10 = v7;
      bzero((char *)v14 - v8, v10);
      if ((int)a3 >= 1)
      {
        v11 = 0;
        do
          *(_QWORD *)&v9[8 * v11++] = LLVMConstInt();
        while (a3 != v11);
      }
      LLVMConstVector();
      return LLVMBuildShuffleVector();
    }
    return a2;
  }
  else
  {
    v13 = MEMORY[0x22E316F4C](v6, a3);
    MEMORY[0x22E316E2C](v13);
    gleLLVMGetConstantInt32(a1);
    return LLVMBuildInsertElement();
  }
}

uint64_t readCCValue(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!*(_QWORD *)(a1 + 152))
    *(_QWORD *)(a1 + 152) = LLVMInt32TypeInContext();
  v4 = MEMORY[0x22E316F4C]();
  v5 = a1 + 8 * a2;
  v7 = *(_QWORD *)(v5 + 72);
  v6 = (uint64_t *)(v5 + 72);
  if (!v7)
  {
    v8 = v4;
    v9 = MEMORY[0x22E316D18]();
    *v6 = allocateVariable(a1, v8, v9);
  }
  return LLVMBuildLoad();
}

uint64_t TestCC(uint64_t a1, int a2)
{
  uint64_t result;

  if (!*(_QWORD *)(a1 + 152))
    *(_QWORD *)(a1 + 152) = LLVMInt32TypeInContext();
  LLVMConstInt();
  LLVMBuildExtractElement();
  switch(a2)
  {
    case 1:
      if (!*(_QWORD *)(a1 + 152))
        *(_QWORD *)(a1 + 152) = LLVMInt32TypeInContext();
      goto LABEL_23;
    case 2:
      if (!*(_QWORD *)(a1 + 152))
        *(_QWORD *)(a1 + 152) = LLVMInt32TypeInContext();
      goto LABEL_15;
    case 3:
      if (!*(_QWORD *)(a1 + 152))
        *(_QWORD *)(a1 + 152) = LLVMInt32TypeInContext();
      goto LABEL_23;
    case 4:
      if (!*(_QWORD *)(a1 + 152))
        *(_QWORD *)(a1 + 152) = LLVMInt32TypeInContext();
LABEL_15:
      LLVMConstInt();
      LLVMBuildICmp();
      if (!*(_QWORD *)(a1 + 152))
        *(_QWORD *)(a1 + 152) = LLVMInt32TypeInContext();
      LLVMConstInt();
      LLVMBuildICmp();
      return LLVMBuildOr();
    case 5:
      if (!*(_QWORD *)(a1 + 152))
        *(_QWORD *)(a1 + 152) = LLVMInt32TypeInContext();
      goto LABEL_23;
    case 6:
      if (!*(_QWORD *)(a1 + 152))
        *(_QWORD *)(a1 + 152) = LLVMInt32TypeInContext();
LABEL_23:
      LLVMConstInt();
      result = LLVMBuildICmp();
      break;
    default:
      LLVMInt1TypeInContext();
      result = LLVMConstInt();
      break;
  }
  return result;
}

uint64_t gleAttribBindingSize(int a1)
{
  return (8 * a1 + 8);
}

uint64_t gleVStateProgram_AttribToFunction(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 + 8);
  if ((*(_BYTE *)(a1 + 2033) & 8) != 0)
    return LLVMGetParam();
  if (!*(_QWORD *)(v1 + 144))
  {
    MEMORY[0x22E316DC0]("nounwind", 8);
    v4[0] = LLVMCreateEnumAttribute();
    MEMORY[0x22E316DC0]("readonly", 8);
    v4[1] = LLVMCreateEnumAttribute();
    v2 = *(_QWORD *)(v1 + 152);
    if (!v2)
    {
      v2 = LLVMInt32TypeInContext();
      *(_QWORD *)(v1 + 152) = v2;
    }
    *(_QWORD *)(v1 + 144) = gleLLVMCallFunction(v1, (uint64_t)"air.get_vertex_id.i32", v2, 0, 0, (uint64_t)v4, 2u);
  }
  LLVMGetParam();
  LLVMBuildGEP();
  return LLVMBuildLoad();
}

uint64_t gleVStateProgram_OutputToFunction(uint64_t a1, int a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int v12;
  uint64_t result;
  uint64_t i;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v7 = *(__int16 *)(a1 + 4 * a2 + 1694);
  v8 = *(_QWORD **)(a1 + 8);
  v9 = v8[19];
  if (!v9)
  {
    v9 = LLVMInt32TypeInContext();
    v8[19] = v9;
  }
  if ((*(_BYTE *)(a1 + 2032) & 1) != 0)
  {
    if (!v8[20])
      v8[20] = MEMORY[0x22E316E2C](v8[21]);
    if (v7 <= 47)
    {
      if ((v7 - 3) >= 4)
      {
        if (v7 == 1)
        {
          gleStateProgram_TruncateVec4((uint64_t)v8, a4, 2);
        }
        else if (v7 == 2)
        {
          LLVMConstInt();
          LLVMBuildExtractElement();
        }
      }
      else
      {
        gleLLVMClampColor((uint64_t)v8, a4);
      }
    }
    result = LLVMBuildInsertValue();
    v8[20] = result;
    ++*a3;
  }
  else
  {
    ++*a3;
    if (v7 <= 46)
    {
      if ((v7 - 3) < 4)
      {
        gleLLVMClampColor((uint64_t)v8, a4);
LABEL_7:
        v15 = v9;
        v16 = v9;
        v17 = LLVMTypeOf();
        LLVMConstInt();
        LLVMConstInt();
        v10 = "graphics.vertex.writeOutput";
        v11 = (uint64_t)v8;
        v12 = 3;
        return gleLLVMAddVoidFunctionCall(v11, v10, v12, &v15);
      }
      if (v7)
      {
        if (v7 == 2)
        {
          LLVMConstInt();
          LLVMBuildExtractElement();
          v15 = LLVMTypeOf();
          result = gleLLVMAddVoidFunctionCall((uint64_t)v8, "graphics.vertex.writePointSize", 1, &v15);
          *(_DWORD *)(a1 + 2032) |= 2u;
          return result;
        }
        goto LABEL_7;
      }
      goto LABEL_30;
    }
    if ((v7 - 48) >= 2)
    {
      if (v7 == 47)
      {
        v15 = LLVMTypeOf();
        v10 = "graphics.vertex.writeClipVertex";
        goto LABEL_33;
      }
      if (v7 != 50)
        goto LABEL_7;
LABEL_30:
      v15 = LLVMTypeOf();
      v10 = "graphics.vertex.writePosition";
LABEL_33:
      v11 = (uint64_t)v8;
      v12 = 1;
      return gleLLVMAddVoidFunctionCall(v11, v10, v12, &v15);
    }
    for (i = 0; i != 4; ++i)
    {
      LLVMConstInt();
      result = LLVMBuildExtractElement();
      if (((1 << (4 * (v7 == 49) + i)) & (*(_DWORD *)(a1 + 2032) >> 3) & 0x3F) != 0)
      {
        v15 = v9;
        v16 = 0;
        v16 = LLVMTypeOf();
        LLVMConstInt();
        result = gleLLVMAddVoidFunctionCall((uint64_t)v8, "graphics.vertex.writeClipDistance", 2, &v15);
      }
    }
  }
  return result;
}

uint64_t glpVertexStateToLLVMModule(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  _QWORD v7[2];
  _BYTE v8[1884];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD v13[4];
  int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;

  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  bzero(v8, 0x7E8uLL);
  *(_QWORD *)&v4 = -1;
  *((_QWORD *)&v4 + 1) = -1;
  *(_OWORD *)((char *)v13 + 14) = v4;
  v12 = v4;
  v13[0] = v4;
  v10 = v4;
  v11 = v4;
  v9 = v4;
  memset(&v8[4], 255, 0x754uLL);
  v7[0] = 0;
  v7[1] = 0;
  v14 = 1;
  gleVertexStateToModule(a1, a2, (uint64_t)&v15, (uint64_t)v7);
  v5 = *((_QWORD *)&v16 + 1);
  *((_QWORD *)&v16 + 1) = 0;
  gleLLVMDestroyBuildContext((uint64_t)&v15);
  return v5;
}

uint64_t gleVertexStateToModule(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t (*v10)(uint64_t);
  int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  unsigned __int16 *v24;
  int *v25;
  uint64_t v26;
  int v27;
  int v28;
  __int16 *v29;
  int *v30;
  int v31;
  int v32;
  unsigned int v33;
  int v34;
  int v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  _QWORD v41[2];

  v41[1] = *MEMORY[0x24BDAC8D0];
  v7 = *(_DWORD *)(a4 + 2032) & 0xFFFFFDFF | (((*(_DWORD *)(a1 + 32) >> 8) & 1) << 9);
  *(_DWORD *)(a4 + 2032) = v7;
  v8 = (v7 & 0xFFFFFBFF | (((*(_DWORD *)(a1 + 32) >> 9) & 1) << 10)) ^ 0x400;
  *(_DWORD *)(a4 + 2032) = v8;
  *(_DWORD *)(a4 + 2032) = v8 & 0xFFFFF7FF | (((*(_DWORD *)(a1 + 32) >> 12) & 1) << 11);
  gleLLVMInitBuildContext(a3, a2, (uint64_t)"Vertex_State_Program", 1, 48, 0, 48, 51, v40, SHIDWORD(v40));
  *(_DWORD *)(a3 + 216) = *(_DWORD *)(a4 + 2032) & 1;
  *(_DWORD *)(a3 + 220) = (*(_DWORD *)(a1 + 32) >> 12) & 1;
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 184) = a4;
  *(_QWORD *)(a3 + 192) = gleVStateProgram_OutputToFunction;
  *(_QWORD *)(a3 + 208) = 0;
  if ((*(_DWORD *)(a4 + 2032) & 1) != 0)
    v10 = gleVStateProgram_AttribToFunction;
  else
    v10 = 0;
  *(_QWORD *)(a3 + 200) = v10;
  **(_QWORD **)(a3 + 104) = 0;
  v11 = *(_DWORD *)(a4 + 2032);
  v12 = v11 & 0xFFFFFE07 | (8 * (HIBYTE(*(_DWORD *)(a1 + 8)) & 0x3F));
  *(_DWORD *)(a4 + 2032) = v12;
  *(_QWORD *)(a4 + 8) = a3;
  *(_WORD *)(a4 + 1664) = 4096;
  if ((v11 & 1) != 0)
  {
    *(_QWORD *)(a4 + 2016) = gleVStateProgram_IgnoreOption;
    gleVStateProgram_AllocateOutputs(a1, a4);
    if ((*(_QWORD *)a1 & 0x100) == 0)
      gleVStateProgram_GetAttrib(a4, 0);
    v9 = gleVStateProgram_Core((_QWORD *)a1, a4);
    v12 = *(_DWORD *)(a4 + 2032);
    if ((v12 & 1) == 0)
    {
      v15 = **(_QWORD **)(*(_QWORD *)a4 + 104);
      if (v15)
      {
        *(_QWORD *)(v15 + 24) |= 0x4000uLL;
        v12 = *(_DWORD *)(a4 + 2032);
      }
    }
    v14 = *(__int16 *)(a4 + 1996);
    v13 = *(__int16 *)(a4 + 2000);
  }
  else
  {
    v13 = 0;
    v14 = 0;
  }
  *(_QWORD *)(a4 + 2016) = gleVStateProgram_LLVMAddOperation;
  if ((v12 & 1) != 0)
  {
    v13 = *(__int16 *)(a4 + 2000) & ~(*(__int16 *)(a4 + 2000) >> 31);
    *(_DWORD *)(a4 + 2036) = v13;
    v18 = MEMORY[0x24BDAC7A8](v9);
    v17 = (int *)((char *)v41 - v19);
    MEMORY[0x24BDAC7A8](v18);
    v23 = (int *)((char *)v41 - v22);
    if (v14 >= 1)
    {
      v24 = (unsigned __int16 *)(a4 + 22);
      v25 = v17;
      v26 = v14;
      do
      {
        v27 = *v24;
        v24 += 2;
        if (v27 == 7)
          v28 = 3;
        else
          v28 = 7;
        *v25++ = v28;
        --v26;
      }
      while (v26);
    }
    if ((__int16)v21 >= 1)
    {
      v29 = (__int16 *)(a4 + 1694);
      v30 = v23;
      do
      {
        v32 = *v29;
        v29 += 2;
        v31 = v32;
        v33 = v32 - 48;
        if (v32 == 1)
          v34 = 5;
        else
          v34 = 7;
        if (v31 == 2)
          v35 = 4;
        else
          v35 = v34;
        if (v33 < 2)
          v35 = 7;
        *v30++ = v35;
        --v21;
      }
      while (v21);
    }
    if ((v20 & 0x800) != 0)
      v36 = "#main";
    else
      v36 = "vertexShader";
    gleLLVMBeginMain(a3, (uint64_t)v36, v17, v14, v23, v13, 0);
    v41[0] = LLVMMDStringInContext();
    v37 = LLVMMDNodeInContext();
    glpAddNamedMetadataOperand(*(_QWORD *)(a3 + 24), "air.compile_options", v37);
  }
  else
  {
    MEMORY[0x24BDAC7A8](v9);
    v17 = (int *)((char *)v41 - v16);
    gleLLVMBeginMain(a3, (uint64_t)"vertexShader", 0, 0, 0, 0, 0);
  }
  if ((*(_BYTE *)(a4 + 2032) & 1) == 0)
    gleVStateProgram_AllocateOutputs(a1, a4);
  if ((*(_QWORD *)a1 & 0x100) == 0)
    gleVStateProgram_GetAttrib(a4, 0);
  gleVStateProgram_Core((_QWORD *)a1, a4);
  if ((*(_BYTE *)(a4 + 2032) & 1) != 0
    || (v38 = **(_QWORD **)(*(_QWORD *)a4 + 104)) != 0
    && (*(_QWORD *)(v38 + 24) |= 0x4000uLL, (*(_BYTE *)(a4 + 2032) & 1) != 0))
  {
    gleVStateProgram_GenerateMetadata(a4, (char *)v17, v14, v13);
  }
  return gleLLVMFinishMain(a3, *(__int16 *)(a4 + 1998), 0);
}

uint64_t glpVertexStateToLLVMIR(_QWORD *a1, uint64_t (*a2)(uint64_t, _QWORD), uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  void **BitCodeStorage;
  int v9;
  unint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t i;
  uint64_t v26;
  _DWORD *v27;
  __int16 v28;
  uint64_t v29;
  _DWORD *v30;
  __int16 *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unsigned int v35;
  unint64_t v36;
  int v37;
  _QWORD v39[2];
  _BYTE v40[1884];
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _OWORD v45[2];
  __int16 v46;
  __int16 v47;
  uint64_t v48;
  int v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;

  v62 = 0u;
  v63 = 0u;
  v60 = 0u;
  v61 = 0u;
  v58 = 0u;
  v59 = 0u;
  v56 = 0u;
  v57 = 0u;
  v54 = 0u;
  v55 = 0u;
  v52 = 0u;
  v53 = 0u;
  v50 = 0u;
  v51 = 0u;
  bzero(v40, 0x7E8uLL);
  *(_QWORD *)&v6 = -1;
  *((_QWORD *)&v6 + 1) = -1;
  *(_OWORD *)((char *)v45 + 14) = v6;
  v44 = v6;
  v45[0] = v6;
  v42 = v6;
  v43 = v6;
  v41 = v6;
  memset(&v40[4], 255, 0x754uLL);
  v39[0] = 0;
  v39[1] = 0;
  v49 = 1;
  v7 = LLVMContextCreate();
  gleVertexStateToModule((uint64_t)a1, v7, (uint64_t)&v50, (uint64_t)v39);
  BitCodeStorage = (void **)createBitCodeStorage();
  v9 = writeByteCode(*((uint64_t *)&v51 + 1), (uint64_t)BitCodeStorage);
  v10 = (v9 + 8);
  v11 = v9 + 8 * v47 + 72;
  v12 = v9 + 56;
  v13 = v11 + 8 * v46 + 8;
  v14 = a2(a3, v13);
  *(_DWORD *)v14 = 48;
  *(_DWORD *)(v14 + 4) = v12;
  *(_DWORD *)(v14 + 8) = v11;
  *(_DWORD *)(v14 + 12) = v13;
  *(_DWORD *)(v14 + 16) = 0;
  copyBitCodeStorage(BitCodeStorage, (_DWORD *)(v14 + 48), v10, 0);
  deleteBitCodeStorage(BitCodeStorage);
  *(_QWORD *)(v14 + 24) = 0;
  v48 = v14;
  v15 = 0x2000000020;
  if ((v49 & 4) == 0)
    v15 = 0;
  *(_QWORD *)(v14 + 32) = ((*a1 >> 60) | (8 * v49)) & 0x14;
  *(_QWORD *)(v48 + 40) = v15;
  v16 = v48;
  *(_DWORD *)(v48 + 16) = (*a1 & 0x100) == 0;
  v17 = v16 + *(int *)(v16 + 4);
  v18 = v47;
  *(_QWORD *)v17 = v47;
  *(_DWORD *)(v17 + 8) = v18;
  if (v18 < 1)
    goto LABEL_23;
  v19 = 0;
  do
  {
    v20 = *(__int16 *)&v40[4 * v19 + 246];
    if (v20 - 144 > 0x10)
    {
      if (v20 > 0x165)
        v26 = 192;
      else
        v26 = qword_22D806840[*(__int16 *)&v40[4 * v19 + 246]];
      *(_QWORD *)(v17 + 8 * v19 + 16) = v26;
    }
    else
    {
      v21 = 0;
      if (v20 >= 0x98)
        v22 = 0x30000000000;
      else
        v22 = 0;
      if (v20 >= 0x98)
        v23 = 0x20000000000;
      else
        v23 = 0x10000000000;
      if ((v20 & 4) == 0)
        v22 = v23;
      v24 = v22 | ((unint64_t)(v20 & 3) << 42) | 0x600000000FC0;
      for (i = 16; i != 104; i += 8)
      {
        v24 = v24 & 0xFFFFFF00FFFFFFFFLL | v21;
        *(_QWORD *)(v17 + 8 * v19 + i) = v24;
        v21 += 0x100000000;
      }
      v19 += 10;
    }
    ++v19;
  }
  while (v19 < v47);
  v16 = v48;
  if (v48)
  {
LABEL_23:
    v27 = (_DWORD *)(v16 + *(int *)(v16 + 8));
    bzero(v27, (8 * v46 + 8));
    v28 = v46;
    *v27 = v46;
  }
  else
  {
    v27 = 0;
    v28 = v46;
  }
  if (v28 >= 1)
  {
    v29 = 0;
    v30 = v27 + 3;
    v31 = (__int16 *)&v40[6];
    while (1)
    {
      v32 = *v31;
      v31 += 2;
      v33 = v32 - 1;
      v34 = (v32 - 1) > 0x3A ? 28864 : qword_22D807370[v33];
      v35 = (v34 >> 10) & 0x1F;
      *(v30 - 1) = *(v30 - 1) & 0xFFFFC000 | v34 & 0x3F | (v35 << 8) | (v34 >> 2) & 0x2000 | 0xC0;
      if (v35 == 14)
        break;
      if (v35 == 28)
      {
        v36 = HIDWORD(v34);
        v37 = -512;
LABEL_34:
        *v30 = *v30 & v37 | v36;
      }
      ++v29;
      v30 += 2;
      if (v29 >= v46)
        goto LABEL_36;
    }
    v36 = HIDWORD(v34) & 0x1F;
    v37 = -32;
    goto LABEL_34;
  }
LABEL_36:
  gleLLVMDestroyBuildContext((uint64_t)&v50);
  return LLVMContextDispose();
}

uint64_t gleVStateProgram_AllocateOutputs(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __int16 v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  int v10;
  unint64_t v11;
  unsigned int v12;
  int v13;
  int v14;
  _WORD *v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  _WORD *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;

  v2 = *(_QWORD *)result;
  if ((*(_QWORD *)result & 0x1800) == 0)
  {
    v7 = 0;
    v5 = *(_QWORD *)(result + 32);
    v6 = *(_QWORD *)(result + 8);
    if ((v2 & 0x2000) != 0)
      goto LABEL_9;
    goto LABEL_8;
  }
  v3 = *(__int16 *)(a2 + 2000);
  *(_WORD *)(a2 + 1704) = v3;
  *(_WORD *)(a2 + 4 * v3 + 1694) = 3;
  v4 = v3 + 1;
  *(_WORD *)(a2 + 2000) = v3 + 1;
  v2 = *(_QWORD *)result;
  if ((*(_QWORD *)result & 0x1000000000000) == 0)
  {
    v5 = *(_QWORD *)(result + 32);
    v6 = *(_QWORD *)(result + 8);
    v7 = 1;
    if ((v2 & 0x2000) != 0)
      goto LABEL_9;
LABEL_8:
    if ((v2 & 0x8000000000000800) != 0x8000000000000800)
      goto LABEL_13;
    goto LABEL_9;
  }
  *(_WORD *)(a2 + 1708) = v4;
  *(_WORD *)(a2 + 4 * v4 + 1694) = 4;
  *(_WORD *)(a2 + 2000) = v3 + 2;
  v5 = *(_QWORD *)(result + 32);
  v2 = *(_QWORD *)result;
  v6 = *(_QWORD *)(result + 8);
  v7 = 2;
  if ((*(_QWORD *)result & 0x2000) == 0)
    goto LABEL_8;
LABEL_9:
  v8 = *(__int16 *)(a2 + 2000);
  *(_WORD *)(a2 + 1712) = v8;
  *(_WORD *)(a2 + 4 * v8 + 1694) = 5;
  v9 = v8 + 1;
  *(_WORD *)(a2 + 2000) = v8 + 1;
  v2 = *(_QWORD *)result;
  if ((*(_QWORD *)result & 0x1000000000000) != 0)
  {
    *(_WORD *)(a2 + 1716) = v9;
    *(_WORD *)(a2 + 4 * v9 + 1694) = 6;
    *(_WORD *)(a2 + 2000) = v8 + 2;
    v7 += 2;
    v5 = *(_QWORD *)(result + 32);
    v2 = *(_QWORD *)result;
  }
  else
  {
    ++v7;
    v5 = *(_QWORD *)(result + 32);
  }
  v6 = *(_QWORD *)(result + 8);
LABEL_13:
  if ((v5 & 3) != 0)
  {
    v2 = *(__int16 *)(a2 + 2000);
    *(_WORD *)(a2 + 1696) = v2;
    v10 = 1;
    *(_WORD *)(a2 + 4 * v2 + 1694) = 1;
    *(_WORD *)(a2 + 2000) = v2 + 1;
    LODWORD(v2) = *(_DWORD *)result;
    LODWORD(v11) = *(_DWORD *)(result + 12);
  }
  else
  {
    v10 = 0;
    v11 = HIDWORD(v6);
  }
  v12 = BYTE2(v2);
  if (!BYTE2(v2))
  {
    v14 = 0;
    if (!(_DWORD)v11)
      goto LABEL_28;
    goto LABEL_24;
  }
  v13 = 0;
  v14 = 0;
  v15 = (_WORD *)(a2 + 1720);
  do
  {
    if ((v12 & 1) != 0)
    {
      v16 = *(__int16 *)(a2 + 2000);
      *v15 = v16;
      *(_WORD *)(a2 + 4 * v16 + 1694) = v13 + 7;
      *(_WORD *)(a2 + 2000) = v16 + 1;
      ++v14;
    }
    ++v13;
    v15 += 2;
    v17 = v12 > 1;
    v12 >>= 1;
  }
  while (v17);
  LODWORD(v11) = *(_DWORD *)(result + 12);
  if ((_DWORD)v11)
  {
LABEL_24:
    v18 = 0;
    v19 = (_WORD *)(a2 + 1752);
    do
    {
      if ((v11 & 1) != 0)
      {
        v20 = *(__int16 *)(a2 + 2000);
        *v19 = v20;
        *(_WORD *)(a2 + 4 * v20 + 1694) = v18 + 15;
        *(_WORD *)(a2 + 2000) = v20 + 1;
        ++v14;
      }
      ++v18;
      v19 += 2;
      v17 = v11 > 1;
      LODWORD(v11) = v11 >> 1;
    }
    while (v17);
  }
LABEL_28:
  v21 = *(_DWORD *)(a2 + 2032);
  if ((v21 & 1) == 0)
  {
    v22 = *(__int16 *)(a2 + 2000);
    v23 = a2 + 1692;
    *(_WORD *)(a2 + 1692) = v22;
    *(_WORD *)(a2 + 1692 + 4 * v22 + 2) = 0;
    *(_WORD *)(a2 + 1892) = v22 + 1;
    *(_WORD *)(a2 + 1692 + 4 * (__int16)(v22 + 1) + 2) = 50;
    *(_WORD *)(a2 + 1700) = v22 + 2;
    *(_WORD *)(a2 + 1692 + 4 * (__int16)(v22 + 2) + 2) = 2;
    v24 = v22 + 3;
    *(_WORD *)(a2 + 2000) = v22 + 3;
    if ((*(_QWORD *)result & 0x4000000000000000) != 0)
    {
      *(_WORD *)(a2 + 1880) = v24;
      *(_WORD *)(a2 + 4 * v24 + 1694) = 47;
      v24 = v22 + 4;
    }
    *(_WORD *)(a2 + 1884) = v24;
    *(_WORD *)(v23 + 4 * v24 + 2) = 48;
    *(_WORD *)(a2 + 1888) = v24 + 1;
    *(_WORD *)(v23 + 4 * (__int16)(v24 + 1) + 2) = 49;
    *(_WORD *)(a2 + 2000) = v24 + 2;
    v21 = *(_DWORD *)(a2 + 2032);
  }
  if ((v21 & 1) == 0)
    return gleLLVMCreateVaryingsMetaData(*(_QWORD **)(a2 + 8), "graphics.vertexOutputs", v7, v10, v14, (*(_QWORD *)(result + 32) >> 8) & 1, (*(_QWORD *)(result + 32) & 0x200) == 0);
  return result;
}

_QWORD *gleVStateProgram_Core(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  _QWORD *v24;
  uint64_t Attrib;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  int v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  int v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  int v108;
  int v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int v122;
  unsigned int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  __int16 v149;
  uint64_t v150;
  int v151;
  int v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  int v171;
  int v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unsigned int v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unsigned int v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unsigned int v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  _WORD *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  char v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  int v240;
  int v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  char v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  char v258;
  char v259;
  char v260;
  uint64_t v261;
  uint64_t v262;
  unsigned int i;
  uint64_t v264;
  unsigned int v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  unsigned int v269;
  int v270;
  uint64_t v271;
  uint64_t v272;
  char v273;
  unsigned int v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  BOOL v281;
  unint64_t v282;
  int v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  unsigned int v287;
  _QWORD *v288;
  _OWORD v289[5];

  v3 = result;
  v4 = result[4];
  v5 = *result;
  v288 = result;
  if ((*result & 0x200) == 0)
  {
    if ((v5 & 0x400) != 0)
      goto LABEL_122;
LABEL_3:
    if ((v5 & 0x100) == 0)
      goto LABEL_243;
LABEL_239:
    if ((v5 & 0xFF0000000000) != 0)
    {
      result = (_QWORD *)gleVStateProgram_MultMatrix4x4(a2, 0, 0, 0, 23, 0, 0, 1, HIBYTE(v5) & 1);
      goto LABEL_243;
    }
    if ((v5 & 4) == 0)
    {
      result = (_QWORD *)gleVStateProgram_MultMatrix4x4(a2, 0, 8, 0, 23, 1, 0, 1, HIBYTE(v5) & 1);
      goto LABEL_243;
    }
    memset((char *)&v289[1] + 8, 0, 56);
    *(_QWORD *)&v289[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
    *(_DWORD *)(a2 + 16) = 1;
    *(_QWORD *)&v289[1] = (gleVStateProgram_GetAttrib(a2, 0) << 48) | 0x19C800;
    if ((*v3 & 0x8000) != 0)
    {
      v148 = *(unsigned __int16 *)(a2 + 1892);
      if ((_DWORD)v148 == 0xFFFF)
      {
        v148 = *(unsigned __int16 *)(a2 + 2000);
        *(_WORD *)(a2 + 1892) = v148;
        v149 = 50;
        goto LABEL_279;
      }
    }
    else
    {
      v148 = *(unsigned __int16 *)(a2 + 1692);
      if ((_DWORD)v148 == 0xFFFF)
      {
        v149 = 0;
        v148 = *(unsigned __int16 *)(a2 + 2000);
        *(_WORD *)(a2 + 1692) = v148;
LABEL_279:
        *(_WORD *)(a2 + 4 * (__int16)v148 + 1694) = v149;
        *(_WORD *)(a2 + 2000) = v148 + 1;
      }
    }
    *((_QWORD *)&v289[0] + 1) = ((v148 << 48) | 0x72679000) + 0x2000;
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v289);
    goto LABEL_243;
  }
  v6 = result[2];
  memset(v289, 0, sizeof(v289));
  if (!(_DWORD)v6)
    goto LABEL_27;
  v7 = -32;
  v8 = 989;
  do
  {
    v9 = v6 >> (v8 + 35);
    if ((v9 & 0x1010101) == 0)
      goto LABEL_25;
    if ((v9 & 1) != 0)
    {
      memset((char *)v289 + 8, 0, 72);
      *(_QWORD *)&v289[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000A42;
      *(_DWORD *)(a2 + 16) = 2;
      *(_QWORD *)&v289[1] = (gleVStateProgram_GetAttrib(a2, 0) << 48) | 0x19C800;
      *((_QWORD *)&v289[1] + 1) = ((gleVStateProgram_GetParam(a2, (int)v7 + 192) << 48) | 0x19C840) + 64;
      v10 = *(unsigned __int16 *)(a2 + 2 * v8);
      if ((_DWORD)v10 == 0xFFFF)
      {
        v10 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 2 * v8) = v10;
        *(_WORD *)(a2 + 2004) = v10 + 1;
      }
      *((_QWORD *)&v289[0] + 1) = (v10 << 48) | 0x72641000;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v289);
      if ((v9 & 0x100) == 0)
      {
LABEL_10:
        if ((v9 & 0x10000) == 0)
          goto LABEL_11;
        goto LABEL_19;
      }
    }
    else if ((v9 & 0x100) == 0)
    {
      goto LABEL_10;
    }
    memset((char *)v289 + 8, 0, 72);
    *(_QWORD *)&v289[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000A42;
    *(_DWORD *)(a2 + 16) = 2;
    *(_QWORD *)&v289[1] = (gleVStateProgram_GetAttrib(a2, 0) << 48) | 0x19C800;
    *((_QWORD *)&v289[1] + 1) = ((gleVStateProgram_GetParam(a2, (int)v7 + 193) << 48) | 0x19C840) + 64;
    v11 = *(unsigned __int16 *)(a2 + 2 * v8);
    if ((_DWORD)v11 == 0xFFFF)
    {
      v11 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 2 * v8) = v11;
      *(_WORD *)(a2 + 2004) = v11 + 1;
    }
    *((_QWORD *)&v289[0] + 1) = (v11 << 48) | 0x72621000;
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v289);
    if ((v9 & 0x10000) == 0)
    {
LABEL_11:
      if ((v9 & 0x1000000) == 0)
        goto LABEL_25;
LABEL_22:
      memset((char *)v289 + 8, 0, 72);
      *(_QWORD *)&v289[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000A42;
      *(_DWORD *)(a2 + 16) = 2;
      *(_QWORD *)&v289[1] = (gleVStateProgram_GetAttrib(a2, 0) << 48) | 0x19C800;
      *((_QWORD *)&v289[1] + 1) = ((gleVStateProgram_GetParam(a2, (int)v7 + 195) << 48) | 0x19C840) + 64;
      v13 = *(unsigned __int16 *)(a2 + 2 * v8);
      if ((_DWORD)v13 == 0xFFFF)
      {
        v13 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 2 * v8) = v13;
        *(_WORD *)(a2 + 2004) = v13 + 1;
      }
      *((_QWORD *)&v289[0] + 1) = (v13 << 48) | 0x72609000;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v289);
      goto LABEL_25;
    }
LABEL_19:
    memset((char *)v289 + 8, 0, 72);
    *(_QWORD *)&v289[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000A42;
    *(_DWORD *)(a2 + 16) = 2;
    *(_QWORD *)&v289[1] = (gleVStateProgram_GetAttrib(a2, 0) << 48) | 0x19C800;
    *((_QWORD *)&v289[1] + 1) = ((gleVStateProgram_GetParam(a2, (int)v7 + 194) << 48) | 0x19C840) + 64;
    v12 = *(unsigned __int16 *)(a2 + 2 * v8);
    if ((_DWORD)v12 == 0xFFFF)
    {
      v12 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 2 * v8) = v12;
      *(_WORD *)(a2 + 2004) = v12 + 1;
    }
    *((_QWORD *)&v289[0] + 1) = (v12 << 48) | 0x72611000;
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v289);
    if ((v9 & 0x1000000) != 0)
      goto LABEL_22;
LABEL_25:
    ++v8;
    v7 += 4;
  }
  while (v7);
  v3 = v288;
  v4 = v288[4];
  v5 = *v288;
LABEL_27:
  if ((v5 & 0xFF0000000000) == 0)
  {
    if ((v5 & 0x40) != 0)
    {
      if ((v5 & 8) == 0)
      {
        result = (_QWORD *)gleVStateProgram_MultMatrix4x4(a2, 0, 16, 0, 0, 1, 0, 0, HIBYTE(v5) & 1);
        goto LABEL_91;
      }
    }
    else
    {
      if ((v5 & 0x80) == 0)
        goto LABEL_91;
      if ((v5 & 8) == 0)
      {
        memset(&v289[2], 0, 48);
        *(_QWORD *)&v289[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000A42;
        *(_DWORD *)(a2 + 16) = 2;
        *(_QWORD *)&v289[1] = (gleVStateProgram_GetAttrib(a2, 0) << 48) | 0x19C800;
        v17 = *(unsigned __int16 *)(a2 + 348);
        if ((_DWORD)v17 == 0xFFFF)
        {
          v18 = *(__int16 *)(a2 + 1998);
          v17 = *(unsigned __int16 *)(a2 + 1998);
          *(_WORD *)(a2 + 348) = v18;
          *(_WORD *)(a2 + 4 * v18 + 262) = 22;
          *(_WORD *)(a2 + 1998) = v18 + 1;
        }
        *((_QWORD *)&v289[1] + 1) = ((v17 << 48) | 0x19C840) + 64;
        v19 = *(unsigned __int16 *)(a2 + 1900);
        if ((_DWORD)v19 == 0xFFFF)
        {
          v19 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1900) = v19;
          *(_WORD *)(a2 + 2004) = v19 + 1;
        }
        v20 = (v19 << 48) | 0x72679000;
LABEL_90:
        *((_QWORD *)&v289[0] + 1) = v20;
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v289);
        goto LABEL_91;
      }
    }
    memset((char *)&v289[1] + 8, 0, 56);
    *(_QWORD *)&v289[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
    *(_DWORD *)(a2 + 16) = 1;
    *(_QWORD *)&v289[1] = (gleVStateProgram_GetAttrib(a2, 0) << 48) | 0x19C800;
    v45 = *(unsigned __int16 *)(a2 + 1900);
    if ((_DWORD)v45 == 0xFFFF)
    {
      v45 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1900) = v45;
      *(_WORD *)(a2 + 2004) = v45 + 1;
    }
    v20 = (v45 << 48) | 0x72679000;
    goto LABEL_90;
  }
  if ((v5 & 2) != 0)
  {
    memset(&v289[2], 0, 48);
    v14 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = 2;
    *(_QWORD *)&v289[0] = (8 * (v14 & 7)) | 0x3100011042;
    *(_QWORD *)&v289[1] = (gleVStateProgram_GetAttrib(a2, 4) << 48) | 0x19C800;
    v15 = *((unsigned __int8 *)v3 + 5) - 1;
    if (v15 > 2)
      v16 = 2182086656;
    else
      v16 = qword_22D807548[(char)v15];
    *((_QWORD *)&v289[1] + 1) = v16;
    v21 = *(unsigned __int16 *)(a2 + 1944);
    if ((_DWORD)v21 == 0xFFFF)
    {
      v21 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1944) = v21;
      *(_WORD *)(a2 + 2004) = v21 + 1;
    }
    *((_QWORD *)&v289[0] + 1) = (v21 << 48) | 0x72679000;
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v289);
    v4 = v3[4];
    v5 = *v3;
  }
  if ((v5 & 0xFF0000000000) != 0)
  {
    v22 = 0;
    v23 = 16;
    do
    {
      if ((v4 & 0x400) != 0)
      {
        memset((char *)&v289[1] + 8, 0, 56);
        *(_QWORD *)&v289[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100001201;
        *(_DWORD *)(a2 + 16) = 1;
        Attrib = gleVStateProgram_GetAttrib(a2, 7);
        *(_WORD *)(a2 + 2002) = 1;
        *((_QWORD *)&v289[0] + 1) = 1919172608;
        *(_QWORD *)&v289[1] = ((unint64_t)(v22 & 3) << 9) | (Attrib << 48) | ((unint64_t)(v22 & 3) << 11) | ((unint64_t)(v22 & 3) << 13) | ((unint64_t)(v22 & 3) << 15);
        (*(void (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v289);
        v24 = v288;
        gleVStateProgram_MultMatrix4x4(a2, 0, 144, 23, 23, 1, 1, 0, *((_BYTE *)v288 + 7) & 1);
      }
      else
      {
        gleVStateProgram_MultMatrix4x4(a2, 0, v23, 23, 23, 1, 0, 0, HIBYTE(v5) & 1);
        v24 = v288;
      }
      if ((*v24 & 2) != 0)
      {
        if (v22 < ((unsigned __int16)WORD2(*v24) >> 8) - 1)
        {
          memset(&v289[1], 0, 64);
          *(_QWORD *)&v289[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000802;
          *(_DWORD *)(a2 + 16) = 2;
          v28 = *(unsigned __int16 *)(a2 + 1944);
          if (v28 == 0xFFFF)
          {
            v32 = *(unsigned __int16 *)(a2 + 2004);
            v33 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1944) = v32;
            v34 = v33 + 1;
            *(_WORD *)(a2 + 2004) = v34;
            *(_QWORD *)&v289[1] = ((unint64_t)(unsigned __int16)v32 << 48) | 0x19C840;
            if ((v34 & 0x10000) != 0)
            {
              v29 = 0;
              *(_WORD *)(a2 + 1944) = v34;
              *(_WORD *)(a2 + 2004) = 1;
            }
            else
            {
              v29 = v32 << 48;
            }
          }
          else
          {
            v29 = v28 << 48;
            *(_QWORD *)&v289[1] = ((unint64_t)(unsigned __int16)v28 << 48) | 0x19C840;
          }
          *((_QWORD *)&v289[1] + 1) = v29 | (43520 * (v22 & 3)) | 0x40;
          *((_QWORD *)&v289[0] + 1) = v29 | 0x72601000;
          v35 = *((unsigned __int8 *)v288 + 5) - 2;
          if (v35 <= 2)
            *((_QWORD *)&v289[0] + 1) = qword_22D807560[(char)v35] | v29;
          (*(void (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v289);
        }
        if (!v22)
        {
          memset(&v289[2], 0, 48);
          *(_QWORD *)&v289[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
          *(_DWORD *)(a2 + 16) = 2;
          v43 = *(unsigned __int16 *)(a2 + 1946);
          if ((_DWORD)v43 == 0xFFFF)
          {
            v43 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1946) = v43;
            *(_WORD *)(a2 + 2004) = v43 + 1;
          }
          *(_QWORD *)&v289[1] = (v43 << 48) | 0x19C840;
          v44 = *(unsigned __int16 *)(a2 + 1944);
          if ((_DWORD)v44 == 0xFFFF)
          {
            v44 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1944) = v44;
            *(_WORD *)(a2 + 2004) = v44 + 1;
          }
          v31 = (v44 << 48) | 0x40;
          goto LABEL_82;
        }
        memset((char *)v289 + 8, 0, 72);
        *(_QWORD *)&v289[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
        *(_DWORD *)(a2 + 16) = 3;
        v36 = *(unsigned __int16 *)(a2 + 1946);
        if ((_DWORD)v36 == 0xFFFF)
        {
          v36 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1946) = v36;
          *(_WORD *)(a2 + 2004) = v36 + 1;
        }
        *(_QWORD *)&v289[1] = (v36 << 48) | 0x19C840;
        v37 = *(unsigned __int16 *)(a2 + 1944);
        if ((_DWORD)v37 == 0xFFFF)
        {
          v37 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1944) = v37;
          *(_WORD *)(a2 + 2004) = v37 + 1;
        }
        v27 = ((unint64_t)(v22 & 3) << 9) | (v37 << 48) | ((unint64_t)(v22 & 3) << 11) | ((unint64_t)(v22 & 3) << 13) | ((unint64_t)(v22 & 3) << 15) | 0x40;
      }
      else
      {
        if (!v22)
        {
          memset(&v289[2], 0, 48);
          *(_QWORD *)&v289[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
          *(_DWORD *)(a2 + 16) = 2;
          v30 = *(unsigned __int16 *)(a2 + 1946);
          if ((_DWORD)v30 == 0xFFFF)
          {
            v30 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1946) = v30;
            *(_WORD *)(a2 + 2004) = v30 + 1;
          }
          *(_QWORD *)&v289[1] = (v30 << 48) | 0x19C840;
          v31 = gleVStateProgram_GetAttrib(a2, 4) << 48;
LABEL_82:
          *((_QWORD *)&v289[1] + 1) = v31;
          v40 = *(unsigned __int16 *)(a2 + 1900);
          if ((_DWORD)v40 == 0xFFFF)
          {
            v40 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1900) = v40;
            *(_WORD *)(a2 + 2004) = v40 + 1;
          }
LABEL_84:
          v39 = v40 << 48;
          goto LABEL_85;
        }
        memset((char *)v289 + 8, 0, 72);
        *(_QWORD *)&v289[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
        *(_DWORD *)(a2 + 16) = 3;
        v26 = *(unsigned __int16 *)(a2 + 1946);
        if ((_DWORD)v26 == 0xFFFF)
        {
          v26 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1946) = v26;
          *(_WORD *)(a2 + 2004) = v26 + 1;
        }
        *(_QWORD *)&v289[1] = (v26 << 48) | 0x19C840;
        v27 = ((unint64_t)(v22 & 3) << 9) | (gleVStateProgram_GetAttrib(a2, 4) << 48) | ((unint64_t)(v22 & 3) << 11) | ((unint64_t)(v22 & 3) << 13) | ((unint64_t)(v22 & 3) << 15);
      }
      *((_QWORD *)&v289[1] + 1) = v27;
      v38 = *(unsigned __int16 *)(a2 + 1900);
      if (v38 == 0xFFFF)
      {
        v40 = *(unsigned __int16 *)(a2 + 2004);
        v41 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1900) = v40;
        v42 = v41 + 1;
        *(_WORD *)(a2 + 2004) = v42;
        *(_QWORD *)&v289[2] = ((unint64_t)(unsigned __int16)v40 << 48) | 0x19C840;
        if ((v42 & 0x10000) == 0)
          goto LABEL_84;
        v39 = 0;
        *(_WORD *)(a2 + 1900) = v42;
        *(_WORD *)(a2 + 2004) = 1;
      }
      else
      {
        v39 = v38 << 48;
        *(_QWORD *)&v289[2] = ((unint64_t)(unsigned __int16)v38 << 48) | 0x19C840;
      }
LABEL_85:
      *((_QWORD *)&v289[0] + 1) = v39 | 0x72679000;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v289);
      ++v22;
      v4 = v288[4];
      v5 = *v288;
      v23 += 8;
    }
    while (v22 < ((unsigned __int16)WORD2(*v288) >> 8));
  }
LABEL_91:
  v3 = v288;
  v46 = v288[2];
  if ((v46 & 0xFFFFFFFF00000000) == 0)
    goto LABEL_121;
  v47 = HIDWORD(v46);
  v48 = -32;
  v49 = 989;
  while (2)
  {
    v50 = v47 >> (v49 + 35);
    if ((v50 & 0x1010101) == 0)
      goto LABEL_119;
    if ((v50 & 1) == 0)
    {
      if ((v50 & 0x100) == 0)
        goto LABEL_96;
LABEL_104:
      memset((char *)v289 + 8, 0, 72);
      *(_QWORD *)&v289[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000A42;
      *(_DWORD *)(a2 + 16) = 2;
      v53 = *(unsigned __int16 *)(a2 + 1900);
      if ((_DWORD)v53 == 0xFFFF)
      {
        v53 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1900) = v53;
        *(_WORD *)(a2 + 2004) = v53 + 1;
      }
      *(_QWORD *)&v289[1] = (v53 << 48) | 0x19C840;
      *((_QWORD *)&v289[1] + 1) = ((gleVStateProgram_GetParam(a2, (int)v48 + 225) << 48) | 0x19C840) + 64;
      v54 = *(unsigned __int16 *)(a2 + 2 * v49);
      if ((_DWORD)v54 == 0xFFFF)
      {
        v54 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 2 * v49) = v54;
        *(_WORD *)(a2 + 2004) = v54 + 1;
      }
      *((_QWORD *)&v289[0] + 1) = (v54 << 48) | 0x72621000;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v289);
      if ((v50 & 0x10000) != 0)
        goto LABEL_109;
LABEL_97:
      if ((v50 & 0x1000000) == 0)
        goto LABEL_119;
LABEL_114:
      memset((char *)v289 + 8, 0, 72);
      *(_QWORD *)&v289[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000A42;
      *(_DWORD *)(a2 + 16) = 2;
      v57 = *(unsigned __int16 *)(a2 + 1900);
      if ((_DWORD)v57 == 0xFFFF)
      {
        v57 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1900) = v57;
        *(_WORD *)(a2 + 2004) = v57 + 1;
      }
      *(_QWORD *)&v289[1] = (v57 << 48) | 0x19C840;
      *((_QWORD *)&v289[1] + 1) = ((gleVStateProgram_GetParam(a2, (int)v48 + 227) << 48) | 0x19C840) + 64;
      v58 = *(unsigned __int16 *)(a2 + 2 * v49);
      if ((_DWORD)v58 == 0xFFFF)
      {
        v58 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 2 * v49) = v58;
        *(_WORD *)(a2 + 2004) = v58 + 1;
      }
      *((_QWORD *)&v289[0] + 1) = (v58 << 48) | 0x72609000;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v289);
      goto LABEL_119;
    }
    memset((char *)v289 + 8, 0, 72);
    *(_QWORD *)&v289[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000A42;
    *(_DWORD *)(a2 + 16) = 2;
    v51 = *(unsigned __int16 *)(a2 + 1900);
    if ((_DWORD)v51 == 0xFFFF)
    {
      v51 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1900) = v51;
      *(_WORD *)(a2 + 2004) = v51 + 1;
    }
    *(_QWORD *)&v289[1] = (v51 << 48) | 0x19C840;
    *((_QWORD *)&v289[1] + 1) = ((gleVStateProgram_GetParam(a2, (int)v48 + 224) << 48) | 0x19C840) + 64;
    v52 = *(unsigned __int16 *)(a2 + 2 * v49);
    if ((_DWORD)v52 == 0xFFFF)
    {
      v52 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 2 * v49) = v52;
      *(_WORD *)(a2 + 2004) = v52 + 1;
    }
    *((_QWORD *)&v289[0] + 1) = (v52 << 48) | 0x72641000;
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v289);
    if ((v50 & 0x100) != 0)
      goto LABEL_104;
LABEL_96:
    if ((v50 & 0x10000) == 0)
      goto LABEL_97;
LABEL_109:
    memset((char *)v289 + 8, 0, 72);
    *(_QWORD *)&v289[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000A42;
    *(_DWORD *)(a2 + 16) = 2;
    v55 = *(unsigned __int16 *)(a2 + 1900);
    if ((_DWORD)v55 == 0xFFFF)
    {
      v55 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1900) = v55;
      *(_WORD *)(a2 + 2004) = v55 + 1;
    }
    *(_QWORD *)&v289[1] = (v55 << 48) | 0x19C840;
    *((_QWORD *)&v289[1] + 1) = ((gleVStateProgram_GetParam(a2, (int)v48 + 226) << 48) | 0x19C840) + 64;
    v56 = *(unsigned __int16 *)(a2 + 2 * v49);
    if ((_DWORD)v56 == 0xFFFF)
    {
      v56 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 2 * v49) = v56;
      *(_WORD *)(a2 + 2004) = v56 + 1;
    }
    *((_QWORD *)&v289[0] + 1) = (v56 << 48) | 0x72611000;
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v289);
    if ((v50 & 0x1000000) != 0)
      goto LABEL_114;
LABEL_119:
    ++v49;
    v48 += 4;
    if (v48)
      continue;
    break;
  }
  v3 = v288;
LABEL_121:
  v4 = v3[4];
  v5 = *v3;
  if ((*v3 & 0x400) == 0)
    goto LABEL_3;
LABEL_122:
  memset(v289, 0, sizeof(v289));
  if ((v5 & 0xFF0000000000) != 0)
  {
    v59 = 0;
    v60 = 48;
    while (1)
    {
      if ((v4 & 0x400) != 0)
      {
        memset((char *)&v289[1] + 8, 0, 56);
        *(_QWORD *)&v289[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100001201;
        *(_DWORD *)(a2 + 16) = 1;
        v62 = gleVStateProgram_GetAttrib(a2, 7);
        *(_WORD *)(a2 + 2002) = 1;
        *((_QWORD *)&v289[0] + 1) = 1919172608;
        *(_QWORD *)&v289[1] = ((unint64_t)(v59 & 3) << 9) | (v62 << 48) | ((unint64_t)(v59 & 3) << 11) | ((unint64_t)(v59 & 3) << 13) | ((unint64_t)(v59 & 3) << 15);
        (*(void (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v289);
        v61 = v288;
        gleVStateProgram_MultMatrix3x3(a2, 152, 23, 23, 1, (*v288 & 0x200000000000000) != 0);
      }
      else
      {
        gleVStateProgram_MultMatrix3x3(a2, v60, 23, 23, 0, (v5 & 0x200000000000000) != 0);
        v61 = v288;
      }
      if ((*v61 & 2) != 0)
      {
        if (!v59)
        {
          memset(&v289[2], 0, 48);
          *(_QWORD *)&v289[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
          *(_DWORD *)(a2 + 16) = 2;
          v74 = *(unsigned __int16 *)(a2 + 1946);
          if ((_DWORD)v74 == 0xFFFF)
          {
            v74 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1946) = v74;
            *(_WORD *)(a2 + 2004) = v74 + 1;
          }
          *(_QWORD *)&v289[1] = (v74 << 48) | 0x19C840;
          v75 = *(unsigned __int16 *)(a2 + 1944);
          if ((_DWORD)v75 == 0xFFFF)
          {
            v75 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1944) = v75;
            *(_WORD *)(a2 + 2004) = v75 + 1;
          }
          v73 = (v75 << 48) | 0x40;
          goto LABEL_150;
        }
        memset((char *)v289 + 8, 0, 72);
        *(_QWORD *)&v289[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
        *(_DWORD *)(a2 + 16) = 3;
        v65 = *(unsigned __int16 *)(a2 + 1946);
        if ((_DWORD)v65 == 0xFFFF)
        {
          v65 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1946) = v65;
          *(_WORD *)(a2 + 2004) = v65 + 1;
        }
        *(_QWORD *)&v289[1] = (v65 << 48) | 0x19C840;
        v66 = *(unsigned __int16 *)(a2 + 1944);
        if ((_DWORD)v66 == 0xFFFF)
        {
          v66 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1944) = v66;
          *(_WORD *)(a2 + 2004) = v66 + 1;
        }
        v64 = ((unint64_t)(v59 & 3) << 9) | (v66 << 48) | ((unint64_t)(v59 & 3) << 11) | ((unint64_t)(v59 & 3) << 13) | ((unint64_t)(v59 & 3) << 15) | 0x40;
      }
      else
      {
        if (!v59)
        {
          memset(&v289[2], 0, 48);
          *(_QWORD *)&v289[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
          *(_DWORD *)(a2 + 16) = 2;
          v72 = *(unsigned __int16 *)(a2 + 1946);
          if ((_DWORD)v72 == 0xFFFF)
          {
            v72 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1946) = v72;
            *(_WORD *)(a2 + 2004) = v72 + 1;
          }
          *(_QWORD *)&v289[1] = (v72 << 48) | 0x19C840;
          v73 = gleVStateProgram_GetAttrib(a2, 4) << 48;
LABEL_150:
          *((_QWORD *)&v289[1] + 1) = v73;
          v69 = *(unsigned __int16 *)(a2 + 1902);
          if ((_DWORD)v69 == 0xFFFF)
          {
            v69 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1902) = v69;
            *(_WORD *)(a2 + 2004) = v69 + 1;
          }
LABEL_152:
          v68 = v69 << 48;
          goto LABEL_153;
        }
        memset((char *)v289 + 8, 0, 72);
        *(_QWORD *)&v289[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
        *(_DWORD *)(a2 + 16) = 3;
        v63 = *(unsigned __int16 *)(a2 + 1946);
        if ((_DWORD)v63 == 0xFFFF)
        {
          v63 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1946) = v63;
          *(_WORD *)(a2 + 2004) = v63 + 1;
        }
        *(_QWORD *)&v289[1] = (v63 << 48) | 0x19C840;
        v64 = ((unint64_t)(v59 & 3) << 9) | (gleVStateProgram_GetAttrib(a2, 4) << 48) | ((unint64_t)(v59 & 3) << 11) | ((unint64_t)(v59 & 3) << 13) | ((unint64_t)(v59 & 3) << 15);
      }
      *((_QWORD *)&v289[1] + 1) = v64;
      v67 = *(unsigned __int16 *)(a2 + 1902);
      if (v67 == 0xFFFF)
      {
        v69 = *(unsigned __int16 *)(a2 + 2004);
        v70 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1902) = v69;
        v71 = v70 + 1;
        *(_WORD *)(a2 + 2004) = v71;
        *(_QWORD *)&v289[2] = ((unint64_t)(unsigned __int16)v69 << 48) | 0x19C840;
        if ((v71 & 0x10000) == 0)
          goto LABEL_152;
        v68 = 0;
        *(_WORD *)(a2 + 1902) = v71;
        *(_WORD *)(a2 + 2004) = 1;
      }
      else
      {
        v68 = v67 << 48;
        *(_QWORD *)&v289[2] = ((unint64_t)(unsigned __int16)v67 << 48) | 0x19C840;
      }
LABEL_153:
      *((_QWORD *)&v289[0] + 1) = v68 | 0x72679000;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v289);
      ++v59;
      v4 = v288[4];
      v5 = *v288;
      v60 += 8;
      if (v59 >= ((unsigned __int16)WORD2(*v288) >> 8))
        goto LABEL_160;
    }
  }
  if ((v5 & 0x10) != 0)
  {
    *((_QWORD *)&v289[4] + 1) = 0;
    *(_OWORD *)((char *)&v289[3] + 8) = 0uLL;
    *(_OWORD *)((char *)&v289[2] + 8) = 0uLL;
    *(_OWORD *)((char *)&v289[1] + 8) = 0uLL;
    *(_QWORD *)&v289[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
    *(_DWORD *)(a2 + 16) = 1;
    *(_QWORD *)&v289[1] = (gleVStateProgram_GetAttrib(a2, 1) << 48) | 0x19C800;
    v76 = *(unsigned __int16 *)(a2 + 1902);
    if ((_DWORD)v76 == 0xFFFF)
    {
      v76 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1902) = v76;
      *(_WORD *)(a2 + 2004) = v76 + 1;
    }
    *((_QWORD *)&v289[0] + 1) = (v76 << 48) | 0x72679000;
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v289);
  }
  else
  {
    result = (_QWORD *)gleVStateProgram_MultMatrix3x3(a2, 48, 1, 1, 0, (v5 & 0x200000000000000) != 0);
  }
LABEL_160:
  v3 = v288;
  v5 = *v288;
  if ((*v288 & 0x20) != 0)
  {
    result = (_QWORD *)gleVStateProgram_NormalizeVector(a2, 1, 1, 23, 23);
    v5 = *v288;
  }
  v77 = v288[3];
  if (v77)
  {
    v78 = HIDWORD(v77) & v77;
    if (HIDWORD(v77))
    {
      gleVStateProgram_NormalizeVector(a2, 0, 23, 27, 27);
      memset(&v289[2], 0, 48);
      *(_QWORD *)&v289[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000A02;
      *(_DWORD *)(a2 + 16) = 2;
      v79 = *(unsigned __int16 *)(a2 + 1902);
      if ((_DWORD)v79 == 0xFFFF)
      {
        v79 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1902) = v79;
        *(_WORD *)(a2 + 2004) = v79 + 1;
      }
      *(_QWORD *)&v289[1] = (v79 << 48) | 0x19C840;
      v80 = *(unsigned __int16 *)(a2 + 1946);
      if ((_DWORD)v80 == 0xFFFF)
      {
        v80 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1946) = v80;
        *(_WORD *)(a2 + 2004) = v80 + 1;
      }
      *((_QWORD *)&v289[1] + 1) = (v80 << 48) | 0x19C840;
      v81 = *(unsigned __int16 *)(a2 + 1954);
      if ((_DWORD)v81 == 0xFFFF)
      {
        v81 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1954) = v81;
        *(_WORD *)(a2 + 2004) = v81 + 1;
      }
      *((_QWORD *)&v289[0] + 1) = (v81 << 48) | 0x72679000;
      (*(void (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v289);
      memset(&v289[1], 0, 64);
      *(_QWORD *)&v289[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x31000007C2;
      *(_DWORD *)(a2 + 16) = 2;
      v82 = *(unsigned __int16 *)(a2 + 1954);
      if (v82 == 0xFFFF)
      {
        v85 = *(unsigned __int16 *)(a2 + 2004);
        v86 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1954) = v85;
        v87 = v86 + 1;
        *(_WORD *)(a2 + 2004) = v86 + 1;
        v84 = ((unint64_t)(unsigned __int16)v85 << 48) | 0x19C840;
        *(_QWORD *)&v289[1] = v84;
        if ((v87 & 0x10000) != 0)
        {
          v83 = 0;
          *(_WORD *)(a2 + 1954) = v87;
          *(_WORD *)(a2 + 2004) = 1;
          v84 = 1689664;
        }
        else
        {
          v83 = v85 << 48;
        }
      }
      else
      {
        v83 = v82 << 48;
        v84 = ((unint64_t)(unsigned __int16)v82 << 48) | 0x19C840;
        *(_QWORD *)&v289[1] = v84;
      }
      *((_QWORD *)&v289[1] + 1) = v84;
      *((_QWORD *)&v289[0] + 1) = v83 | 0x72679000;
      (*(void (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v289);
      memset((char *)v289 + 8, 0, 72);
      *(_QWORD *)&v289[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
      *(_DWORD *)(a2 + 16) = 3;
      v88 = *(unsigned __int16 *)(a2 + 1954);
      if ((_DWORD)v88 == 0xFFFF)
      {
        v88 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1954) = v88;
        *(_WORD *)(a2 + 2004) = v88 + 1;
      }
      *(_QWORD *)&v289[1] = (v88 << 48) | 0x19C840;
      v89 = *(unsigned __int16 *)(a2 + 1902);
      if ((_DWORD)v89 == 0xFFFF)
      {
        v89 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1902) = v89;
        *(_WORD *)(a2 + 2004) = v89 + 1;
      }
      *((_QWORD *)&v289[1] + 1) = ((v89 << 48) | 0x19C840) + 16;
      v90 = *(unsigned __int16 *)(a2 + 1946);
      if (v90 == 0xFFFF)
      {
        v92 = *(unsigned __int16 *)(a2 + 2004);
        v93 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1946) = v92;
        v94 = v93 + 1;
        *(_WORD *)(a2 + 2004) = v94;
        *(_QWORD *)&v289[2] = ((unint64_t)(unsigned __int16)v92 << 48) | 0x19C840;
        if ((v94 & 0x10000) != 0)
        {
          v91 = 0;
          *(_WORD *)(a2 + 1946) = v94;
          *(_WORD *)(a2 + 2004) = 1;
        }
        else
        {
          v91 = v92 << 48;
        }
      }
      else
      {
        v91 = v90 << 48;
        *(_QWORD *)&v289[2] = ((unint64_t)(unsigned __int16)v90 << 48) | 0x19C840;
      }
      *((_QWORD *)&v289[0] + 1) = v91 | 0x72679000;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v289);
      if (v78)
      {
        memset(&v289[2], 0, 48);
        v95 = *(_DWORD *)(a2 + 16);
        *(_DWORD *)(a2 + 16) = 2;
        *(_QWORD *)&v289[0] = (8 * (v95 & 7)) | 0x3100011042;
        v96 = *(unsigned __int16 *)(a2 + 1946);
        if ((_DWORD)v96 == 0xFFFF)
        {
          v96 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1946) = v96;
          *(_WORD *)(a2 + 2004) = v96 + 1;
        }
        *(_QWORD *)&v289[1] = (v96 << 48) | 0x19C840;
        *((_QWORD *)&v289[1] + 1) = 2560163840;
        v97 = *(unsigned __int16 *)(a2 + 1954);
        if ((_DWORD)v97 == 0xFFFF)
        {
          v97 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1954) = v97;
          *(_WORD *)(a2 + 2004) = v97 + 1;
        }
        *((_QWORD *)&v289[0] + 1) = (v97 << 48) | 0x72679000;
        (*(void (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v289);
        memset((char *)v289 + 8, 0, 72);
        *(_QWORD *)&v289[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x31000007C2;
        *(_DWORD *)(a2 + 16) = 2;
        v98 = *(unsigned __int16 *)(a2 + 1946);
        if ((_DWORD)v98 == 0xFFFF)
        {
          v98 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1946) = v98;
          *(_WORD *)(a2 + 2004) = v98 + 1;
        }
        *(_QWORD *)&v289[1] = (v98 << 48) | 0x19C840;
        v99 = *(unsigned __int16 *)(a2 + 1954);
        if (v99 == 0xFFFF)
        {
          v101 = *(unsigned __int16 *)(a2 + 2004);
          v102 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1954) = v101;
          v103 = v102 + 1;
          *(_WORD *)(a2 + 2004) = v103;
          *((_QWORD *)&v289[1] + 1) = ((unint64_t)(unsigned __int16)v101 << 48) | 0x19C840;
          if ((v103 & 0x10000) != 0)
          {
            v100 = 0;
            *(_WORD *)(a2 + 1954) = v103;
            *(_WORD *)(a2 + 2004) = 1;
          }
          else
          {
            v100 = v101 << 48;
          }
        }
        else
        {
          v100 = v99 << 48;
          *((_QWORD *)&v289[1] + 1) = ((unint64_t)(unsigned __int16)v99 << 48) | 0x19C840;
        }
        *((_QWORD *)&v289[0] + 1) = v100 | 0x72679000;
        (*(void (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v289);
        memset(&v289[1], 0, 64);
        *(_QWORD *)&v289[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000A02;
        *(_DWORD *)(a2 + 16) = 2;
        v104 = *(unsigned __int16 *)(a2 + 1954);
        if (v104 == 0xFFFF)
        {
          v107 = *(unsigned __int16 *)(a2 + 2004);
          v108 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1954) = v107;
          v109 = v108 + 1;
          *(_WORD *)(a2 + 2004) = v108 + 1;
          v106 = ((unint64_t)(unsigned __int16)v107 << 48) | 0x19C840;
          *(_QWORD *)&v289[1] = v106;
          if ((v109 & 0x10000) != 0)
          {
            v105 = 0;
            *(_WORD *)(a2 + 1954) = v109;
            *(_WORD *)(a2 + 2004) = 1;
            v106 = 1689664;
          }
          else
          {
            v105 = v107 << 48;
          }
        }
        else
        {
          v105 = v104 << 48;
          v106 = ((unint64_t)(unsigned __int16)v104 << 48) | 0x19C840;
          *(_QWORD *)&v289[1] = v106;
        }
        *((_QWORD *)&v289[1] + 1) = v106;
        *((_QWORD *)&v289[0] + 1) = v105 | 0x72679000;
        (*(void (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v289);
        memset(&v289[1], 0, 64);
        v110 = *(_DWORD *)(a2 + 16);
        *(_DWORD *)(a2 + 16) = 1;
        *(_QWORD *)&v289[0] = (8 * (v110 & 7)) | 0x100100341;
        v111 = *(unsigned __int16 *)(a2 + 1954);
        if (v111 == 0xFFFF)
        {
          v113 = *(unsigned __int16 *)(a2 + 2004);
          v114 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1954) = v113;
          v115 = v114 + 1;
          *(_WORD *)(a2 + 2004) = v115;
          *(_QWORD *)&v289[1] = ((unint64_t)(unsigned __int16)v113 << 48) | 0x19C840;
          if ((v115 & 0x10000) != 0)
          {
            v112 = 0;
            *(_WORD *)(a2 + 1954) = v115;
            *(_WORD *)(a2 + 2004) = 1;
          }
          else
          {
            v112 = v113 << 48;
          }
        }
        else
        {
          v112 = v111 << 48;
          *(_QWORD *)&v289[1] = ((unint64_t)(unsigned __int16)v111 << 48) | 0x19C840;
        }
        *((_QWORD *)&v289[0] + 1) = v112 | 0x72679000;
        (*(void (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v289);
        memset((char *)v289 + 8, 0, 72);
        *(_QWORD *)&v289[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
        *(_DWORD *)(a2 + 16) = 2;
        v116 = *(unsigned __int16 *)(a2 + 1954);
        if ((_DWORD)v116 == 0xFFFF)
        {
          v116 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1954) = v116;
          *(_WORD *)(a2 + 2004) = v116 + 1;
        }
        *(_QWORD *)&v289[1] = (v116 << 48) | 0x19C840;
        *((_QWORD *)&v289[1] + 1) = (gleVStateProgram_GetParam(a2, 351) << 48) | 0x80;
        v117 = *(unsigned __int16 *)(a2 + 1954);
        if ((_DWORD)v117 == 0xFFFF)
        {
          v117 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1954) = v117;
          *(_WORD *)(a2 + 2004) = v117 + 1;
        }
        *((_QWORD *)&v289[0] + 1) = (v117 << 48) | 0x72679000;
        (*(void (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v289);
        memset((char *)v289 + 8, 0, 72);
        *(_QWORD *)&v289[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
        *(_DWORD *)(a2 + 16) = 3;
        v118 = *(unsigned __int16 *)(a2 + 1946);
        if ((_DWORD)v118 == 0xFFFF)
        {
          v118 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1946) = v118;
          *(_WORD *)(a2 + 2004) = v118 + 1;
        }
        *(_QWORD *)&v289[1] = (v118 << 48) | 0x19C840;
        v119 = *(unsigned __int16 *)(a2 + 1954);
        if ((_DWORD)v119 == 0xFFFF)
        {
          v119 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1954) = v119;
          *(_WORD *)(a2 + 2004) = v119 + 1;
        }
        *((_QWORD *)&v289[1] + 1) = (v119 << 48) | 0x19C840;
        *(_QWORD *)&v289[2] = (gleVStateProgram_GetParam(a2, 351) << 48) | 0x80;
        v120 = *(unsigned __int16 *)(a2 + 1954);
        if ((_DWORD)v120 == 0xFFFF)
        {
          v120 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1954) = v120;
          *(_WORD *)(a2 + 2004) = v120 + 1;
        }
        *((_QWORD *)&v289[0] + 1) = (v120 << 48) | 0x72679000;
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v289);
      }
    }
    v121 = 0;
    v122 = v78 ^ v77;
    v123 = v78 ^ HIDWORD(v77);
    do
    {
      if (((v122 >> v121) & 0x1010101) != 0)
      {
        memset((char *)&v289[1] + 8, 0, 56);
        *(_QWORD *)&v289[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
        *(_DWORD *)(a2 + 16) = 1;
        v124 = *(unsigned __int16 *)(a2 + 1902);
        if ((_DWORD)v124 == 0xFFFF)
        {
          v124 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1902) = v124;
          *(_WORD *)(a2 + 2004) = v124 + 1;
        }
        *(_QWORD *)&v289[1] = (v124 << 48) | 0x19C840;
        v125 = a2 + 2 * v121;
        v126 = *(unsigned __int16 *)(v125 + 1978);
        if ((_DWORD)v126 == 0xFFFF)
        {
          v126 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(v125 + 1978) = v126;
          *(_WORD *)(a2 + 2004) = v126 + 1;
        }
        *((_QWORD *)&v289[0] + 1) = (((v122 >> v121) & 1) << 18) | (unint64_t)(v126 << 48) | (v122 >> v121 << 9) & 0x20000 | (unint64_t)((v122 >> v121) & 0x10000) | (v122 >> v121 >> 9) & 0x8000 | 0x72601000;
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v289);
      }
      if (((v123 >> v121) & 0x1010101) != 0)
      {
        memset((char *)&v289[1] + 8, 0, 56);
        *(_QWORD *)&v289[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
        *(_DWORD *)(a2 + 16) = 1;
        v127 = *(unsigned __int16 *)(a2 + 1946);
        if ((_DWORD)v127 == 0xFFFF)
        {
          v127 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1946) = v127;
          *(_WORD *)(a2 + 2004) = v127 + 1;
        }
        *(_QWORD *)&v289[1] = (v127 << 48) | 0x19C840;
        v128 = a2 + 2 * v121;
        v129 = *(unsigned __int16 *)(v128 + 1978);
        if ((_DWORD)v129 == 0xFFFF)
        {
          v129 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(v128 + 1978) = v129;
          *(_WORD *)(a2 + 2004) = v129 + 1;
        }
        *((_QWORD *)&v289[0] + 1) = (((v123 >> v121) & 1) << 18) | (unint64_t)(v129 << 48) | (v123 >> v121 << 9) & 0x20000 | (unint64_t)((v123 >> v121) & 0x10000) | (v123 >> v121 >> 9) & 0x8000 | 0x72601000;
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v289);
      }
      if (((v78 >> v121) & 0x1010101) != 0)
      {
        memset((char *)&v289[1] + 8, 0, 56);
        *(_QWORD *)&v289[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
        *(_DWORD *)(a2 + 16) = 1;
        v130 = *(unsigned __int16 *)(a2 + 1954);
        if ((_DWORD)v130 == 0xFFFF)
        {
          v130 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1954) = v130;
          *(_WORD *)(a2 + 2004) = v130 + 1;
        }
        *(_QWORD *)&v289[1] = (v130 << 48) | 0x19C840;
        v131 = a2 + 2 * v121;
        v132 = *(unsigned __int16 *)(v131 + 1978);
        if ((_DWORD)v132 == 0xFFFF)
        {
          v132 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(v131 + 1978) = v132;
          *(_WORD *)(a2 + 2004) = v132 + 1;
        }
        *((_QWORD *)&v289[0] + 1) = (((v78 >> v121) & 1) << 18) | (unint64_t)(v132 << 48) | (v78 >> v121 << 9) & 0x20000 | (unint64_t)((v78 >> v121) & 0x10000) | (v78 >> v121 >> 9) & 0x8000 | 0x72601000;
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v289);
      }
      ++v121;
    }
    while (v121 != 8);
    v3 = v288;
    v5 = *v288;
  }
  if ((v5 & 0x100) != 0)
    goto LABEL_239;
LABEL_243:
  v133 = *v3;
  if ((*v3 & 0x1000) == 0)
    goto LABEL_247;
  memset((char *)&v289[1] + 8, 0, 56);
  *(_QWORD *)&v289[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
  *(_DWORD *)(a2 + 16) = 1;
  *(_QWORD *)&v289[1] = (gleVStateProgram_GetAttrib(a2, 2) << 48) | 0x19C800;
  v134 = *(unsigned __int16 *)(a2 + 1704);
  if ((_DWORD)v134 == 0xFFFF)
  {
    v135 = *(__int16 *)(a2 + 2000);
    v134 = *(unsigned __int16 *)(a2 + 2000);
    *(_WORD *)(a2 + 1704) = v135;
    *(_WORD *)(a2 + 4 * v135 + 1694) = 3;
    *(_WORD *)(a2 + 2000) = v135 + 1;
  }
  *((_QWORD *)&v289[0] + 1) = ((v134 << 48) | 0x72679000) + 0x2000;
  result = (_QWORD *)(*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v289);
  v133 = *v3;
  if ((*v3 & 0x1000000000000) == 0)
  {
LABEL_247:
    v137 = v3[3];
    v136 = v3[4];
    v138 = v3[1];
    v139 = v3[2];
    if ((v133 & 0x2000) == 0)
      goto LABEL_248;
LABEL_254:
    memset((char *)&v289[1] + 8, 0, 56);
    *(_QWORD *)&v289[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
    *(_DWORD *)(a2 + 16) = 1;
    *(_QWORD *)&v289[1] = (gleVStateProgram_GetAttrib(a2, 3) << 48) | 0x19C800;
    v142 = *(unsigned __int16 *)(a2 + 1712);
    if ((_DWORD)v142 == 0xFFFF)
    {
      v143 = *(__int16 *)(a2 + 2000);
      v142 = *(unsigned __int16 *)(a2 + 2000);
      *(_WORD *)(a2 + 1712) = v143;
      *(_WORD *)(a2 + 4 * v143 + 1694) = 5;
      *(_WORD *)(a2 + 2000) = v143 + 1;
    }
    *((_QWORD *)&v289[0] + 1) = ((v142 << 48) | 0x72679000) + 0x2000;
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v289);
    v133 = *v3;
    if ((*v3 & 0x1000000000000) != 0)
    {
      memset((char *)&v289[1] + 8, 0, 56);
      *(_QWORD *)&v289[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
      *(_DWORD *)(a2 + 16) = 1;
      *(_QWORD *)&v289[1] = (gleVStateProgram_GetAttrib(a2, 3) << 48) | 0x19C800;
      v144 = *(unsigned __int16 *)(a2 + 1716);
      if ((_DWORD)v144 == 0xFFFF)
      {
        v145 = *(__int16 *)(a2 + 2000);
        v144 = *(unsigned __int16 *)(a2 + 2000);
        *(_WORD *)(a2 + 1716) = v145;
        *(_WORD *)(a2 + 4 * v145 + 1694) = 6;
        *(_WORD *)(a2 + 2000) = v145 + 1;
      }
      *((_QWORD *)&v289[0] + 1) = ((v144 << 48) | 0x72679000) + 0x2000;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v289);
      v137 = v3[3];
      v136 = v3[4];
      v138 = v3[1];
      v139 = v3[2];
      v133 = *v3;
      if ((*v3 & 0x4000) != 0)
        goto LABEL_262;
    }
    else
    {
      v137 = v3[3];
      v136 = v3[4];
      v138 = v3[1];
      v139 = v3[2];
      if ((v133 & 0x4000) != 0)
        goto LABEL_262;
    }
LABEL_249:
    if ((v133 & 0x800) == 0)
      goto LABEL_480;
    goto LABEL_479;
  }
  memset((char *)&v289[1] + 8, 0, 56);
  *(_QWORD *)&v289[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
  *(_DWORD *)(a2 + 16) = 1;
  *(_QWORD *)&v289[1] = (gleVStateProgram_GetAttrib(a2, 2) << 48) | 0x19C800;
  v140 = *(unsigned __int16 *)(a2 + 1708);
  if ((_DWORD)v140 == 0xFFFF)
  {
    v141 = *(__int16 *)(a2 + 2000);
    v140 = *(unsigned __int16 *)(a2 + 2000);
    *(_WORD *)(a2 + 1708) = v141;
    *(_WORD *)(a2 + 4 * v141 + 1694) = 4;
    *(_WORD *)(a2 + 2000) = v141 + 1;
  }
  *((_QWORD *)&v289[0] + 1) = ((v140 << 48) | 0x72679000) + 0x2000;
  result = (_QWORD *)(*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v289);
  v137 = v3[3];
  v136 = v3[4];
  v138 = v3[1];
  v139 = v3[2];
  v133 = *v3;
  if ((*v3 & 0x2000) != 0)
    goto LABEL_254;
LABEL_248:
  if ((v133 & 0x4000) == 0)
    goto LABEL_249;
LABEL_262:
  if ((v136 & 0x40) != 0 || (v138 & 0xC0000000) == 0xC0000000)
  {
    memset(&v289[1], 0, 64);
    *(_QWORD *)&v289[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000A02;
    *(_DWORD *)(a2 + 16) = 2;
    v146 = *(unsigned __int16 *)(a2 + 1900);
    if (v146 == 0xFFFF)
    {
      v150 = *(unsigned __int16 *)(a2 + 2004);
      v151 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1900) = v150;
      v152 = v151 + 1;
      *(_WORD *)(a2 + 2004) = v152;
      v147 = (v150 << 48) | 0x19C840;
      *(_QWORD *)&v289[1] = v147;
      if ((v152 & 0x10000) != 0)
      {
        *(_WORD *)(a2 + 1900) = v152;
        *(_WORD *)(a2 + 2004) = 1;
        v147 = 1689664;
      }
    }
    else
    {
      v147 = (v146 << 48) | 0x19C840;
      *(_QWORD *)&v289[1] = v147;
    }
    *((_QWORD *)&v289[1] + 1) = v147;
    v153 = *(unsigned __int16 *)(a2 + 1946);
    if ((_DWORD)v153 == 0xFFFF)
    {
      v153 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1946) = v153;
      *(_WORD *)(a2 + 2004) = v153 + 1;
    }
    *((_QWORD *)&v289[0] + 1) = (v153 << 48) | 0x72679000;
    (*(void (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v289);
    v154 = *v3;
    memset(&v289[1], 0, 64);
    v155 = 8 * (*(_DWORD *)(a2 + 16) & 7);
    *(_DWORD *)(a2 + 16) = 1;
    if ((v154 & 0x1000000000000000) != 0)
    {
      v158 = 0x100100301;
    }
    else
    {
      *(_QWORD *)&v289[0] = v155 | 0x100100341;
      v156 = *(unsigned __int16 *)(a2 + 1946);
      if (v156 == 0xFFFF)
      {
        v159 = *(unsigned __int16 *)(a2 + 2004);
        v160 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1946) = v159;
        v161 = v160 + 1;
        *(_WORD *)(a2 + 2004) = v161;
        *(_QWORD *)&v289[1] = ((unint64_t)(unsigned __int16)v159 << 48) | 0x19C840;
        if ((v161 & 0x10000) != 0)
        {
          v157 = 0;
          *(_WORD *)(a2 + 1946) = v161;
          *(_WORD *)(a2 + 2004) = 1;
        }
        else
        {
          v157 = v159 << 48;
        }
      }
      else
      {
        v157 = v156 << 48;
        *(_QWORD *)&v289[1] = ((unint64_t)(unsigned __int16)v156 << 48) | 0x19C840;
      }
      *((_QWORD *)&v289[0] + 1) = v157 | 0x72679000;
      (*(void (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v289);
      memset((char *)&v289[1] + 8, 0, 56);
      v155 = 8 * (*(_DWORD *)(a2 + 16) & 7);
      *(_DWORD *)(a2 + 16) = 1;
      v158 = 0x100100381;
    }
    *(_QWORD *)&v289[0] = v155 | v158;
    v162 = *(unsigned __int16 *)(a2 + 1946);
    if ((_DWORD)v162 == 0xFFFF)
    {
      v162 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1946) = v162;
      *(_WORD *)(a2 + 2004) = v162 + 1;
    }
    *(_QWORD *)&v289[1] = (v162 << 48) | 0x19C840;
    v163 = *(unsigned __int16 *)(a2 + 1962);
    if ((_DWORD)v163 == 0xFFFF)
    {
      v163 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1962) = v163;
      *(_WORD *)(a2 + 2004) = v163 + 1;
    }
    *((_QWORD *)&v289[0] + 1) = (v163 << 48) | 0x72679000;
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v289);
    v136 = v3[4];
    v133 = *v3;
    v138 = v3[1];
  }
  if ((v136 & 0x40) != 0)
  {
    memset((char *)v289 + 8, 0, 72);
    *(_QWORD *)&v289[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
    *(_DWORD *)(a2 + 16) = 3;
    v167 = *(unsigned __int16 *)(a2 + 1962);
    if ((_DWORD)v167 == 0xFFFF)
    {
      v167 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1962) = v167;
      *(_WORD *)(a2 + 2004) = v167 + 1;
    }
    *(_QWORD *)&v289[1] = (v167 << 48) | 0x19C840;
    v168 = *(unsigned __int16 *)(a2 + 1648);
    if (v168 == 0xFFFF)
    {
      v170 = *(__int16 *)(a2 + 1998);
      v171 = *(unsigned __int16 *)(a2 + 1998);
      *(_WORD *)(a2 + 1648) = v170;
      *(_WORD *)(a2 + 4 * v170 + 262) = 347;
      v172 = v171 + 1;
      *(_WORD *)(a2 + 1998) = v172;
      *((_QWORD *)&v289[1] + 1) = ((unint64_t)(unsigned __int16)v170 << 48) | 0x15480;
      if ((v172 & 0x10000) != 0)
      {
        v169 = 0;
        *(_WORD *)(a2 + 1648) = v172;
        *(_WORD *)(a2 + 4 * (unsigned __int16)v172 + 262) = 347;
        *(_WORD *)(a2 + 1998) = 1;
      }
      else
      {
        v169 = v170 << 48;
      }
    }
    else
    {
      v169 = v168 << 48;
      *((_QWORD *)&v289[1] + 1) = ((unint64_t)(unsigned __int16)v168 << 48) | 0x15480;
    }
    *(_QWORD *)&v289[2] = v169 | 0xAA80;
    v176 = *(unsigned __int16 *)(a2 + 1954);
    if ((_DWORD)v176 == 0xFFFF)
    {
      v176 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1954) = v176;
      *(_WORD *)(a2 + 2004) = v176 + 1;
    }
    *((_QWORD *)&v289[0] + 1) = (v176 << 48) | 0x72679000;
    (*(void (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v289);
    memset((char *)v289 + 8, 0, 72);
    *(_QWORD *)&v289[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
    *(_DWORD *)(a2 + 16) = 3;
    v177 = *(unsigned __int16 *)(a2 + 1962);
    if ((_DWORD)v177 == 0xFFFF)
    {
      v177 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1962) = v177;
      *(_WORD *)(a2 + 2004) = v177 + 1;
    }
    *(_QWORD *)&v289[1] = (v177 << 48) | 0x19C840;
    v178 = *(unsigned __int16 *)(a2 + 1954);
    if ((_DWORD)v178 == 0xFFFF)
    {
      v178 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1954) = v178;
      *(_WORD *)(a2 + 2004) = v178 + 1;
    }
    *((_QWORD *)&v289[1] + 1) = (v178 << 48) | 0x19C840;
    v179 = *(unsigned __int16 *)(a2 + 1648);
    if ((_DWORD)v179 == 0xFFFF)
    {
      v180 = *(__int16 *)(a2 + 1998);
      v179 = *(unsigned __int16 *)(a2 + 1998);
      *(_WORD *)(a2 + 1648) = v180;
      *(_WORD *)(a2 + 4 * v180 + 262) = 347;
      *(_WORD *)(a2 + 1998) = v180 + 1;
      v178 = *(unsigned __int16 *)(a2 + 1954);
    }
    *(_QWORD *)&v289[2] = ((v179 << 48) | 0x19C840) + 64;
    if ((_DWORD)v178 == 0xFFFF)
    {
      v178 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1954) = v178;
      *(_WORD *)(a2 + 2004) = v178 + 1;
    }
    *((_QWORD *)&v289[0] + 1) = (v178 << 48) | 0x72679000;
    (*(void (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v289);
    memset((char *)&v289[1] + 8, 0, 56);
    v181 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = 1;
    *(_QWORD *)&v289[0] = (8 * (v181 & 7)) | 0x100100341;
    v182 = *(unsigned __int16 *)(a2 + 1954);
    if ((_DWORD)v182 == 0xFFFF)
    {
      v182 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1954) = v182;
      *(_WORD *)(a2 + 2004) = v182 + 1;
    }
    *(_QWORD *)&v289[1] = (v182 << 48) | 0x19C840;
    v183 = *(unsigned __int16 *)(a2 + 1946);
    if ((_DWORD)v183 == 0xFFFF)
    {
      v183 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1946) = v183;
      *(_WORD *)(a2 + 2004) = v183 + 1;
    }
    *((_QWORD *)&v289[0] + 1) = (v183 << 48) | 0x72679000;
    (*(void (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v289);
    memset((char *)v289 + 8, 0, 72);
    *(_QWORD *)&v289[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
    *(_DWORD *)(a2 + 16) = 2;
    v184 = *(unsigned __int16 *)(a2 + 1946);
    if ((_DWORD)v184 == 0xFFFF)
    {
      v184 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1946) = v184;
      *(_WORD *)(a2 + 2004) = v184 + 1;
    }
    *(_QWORD *)&v289[1] = (v184 << 48) | 0x19C840;
    if ((v3[4] & 0x20) != 0)
    {
      v187 = gleVStateProgram_GetAttrib(a2, 6) << 48;
    }
    else
    {
      v185 = *(unsigned __int16 *)(a2 + 1652);
      if ((_DWORD)v185 == 0xFFFF)
      {
        v186 = *(__int16 *)(a2 + 1998);
        v185 = *(unsigned __int16 *)(a2 + 1998);
        *(_WORD *)(a2 + 1652) = v186;
        *(_WORD *)(a2 + 4 * v186 + 262) = 348;
        *(_WORD *)(a2 + 1998) = v186 + 1;
      }
      v187 = ((v185 << 48) | 0x19C840) + 64;
    }
    *((_QWORD *)&v289[1] + 1) = v187;
    v188 = *(unsigned __int16 *)(a2 + 1946);
    if ((_DWORD)v188 == 0xFFFF)
    {
      v188 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1946) = v188;
      *(_WORD *)(a2 + 2004) = v188 + 1;
    }
    *((_QWORD *)&v289[0] + 1) = (v188 << 48) | 0x72679000;
    (*(void (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v289);
    memset((char *)&v289[1] + 8, 0, 56);
    *(_QWORD *)&v289[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000B42;
    *(_DWORD *)(a2 + 16) = 2;
    v189 = *(unsigned __int16 *)(a2 + 1946);
    if ((_DWORD)v189 == 0xFFFF)
    {
      v189 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1946) = v189;
      *(_WORD *)(a2 + 2004) = v189 + 1;
    }
    *(_QWORD *)&v289[1] = (v189 << 48) | 0x19C840;
    v190 = *(unsigned __int16 *)(a2 + 1652);
    if ((_DWORD)v190 == 0xFFFF)
    {
      v191 = *(__int16 *)(a2 + 1998);
      v190 = *(unsigned __int16 *)(a2 + 1998);
      *(_WORD *)(a2 + 1652) = v191;
      *(_WORD *)(a2 + 4 * v191 + 262) = 348;
      *(_WORD *)(a2 + 1998) = v191 + 1;
      v189 = *(unsigned __int16 *)(a2 + 1946);
    }
    *((_QWORD *)&v289[1] + 1) = (v190 << 48) | 0xAA80;
    if ((_DWORD)v189 == 0xFFFF)
    {
      v189 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1946) = v189;
      *(_WORD *)(a2 + 2004) = v189 + 1;
    }
    *((_QWORD *)&v289[0] + 1) = (v189 << 48) | 0x72679000;
    (*(void (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v289);
    memset((char *)&v289[1] + 8, 0, 56);
    *(_QWORD *)&v289[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000B02;
    *(_DWORD *)(a2 + 16) = 2;
    v192 = *(unsigned __int16 *)(a2 + 1946);
    if ((_DWORD)v192 == 0xFFFF)
    {
      v192 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1946) = v192;
      *(_WORD *)(a2 + 2004) = v192 + 1;
    }
    *(_QWORD *)&v289[1] = (v192 << 48) | 0x19C840;
    v193 = *(unsigned __int16 *)(a2 + 1652);
    if ((_DWORD)v193 == 0xFFFF)
    {
      v194 = *(__int16 *)(a2 + 1998);
      v193 = *(unsigned __int16 *)(a2 + 1998);
      *(_WORD *)(a2 + 1652) = v194;
      *(_WORD *)(a2 + 4 * v194 + 262) = 348;
      *(_WORD *)(a2 + 1998) = v194 + 1;
    }
    *((_QWORD *)&v289[1] + 1) = (v193 << 48) | 0x15480;
  }
  else
  {
    if ((v136 & 0x80) == 0)
      goto LABEL_353;
    if ((v136 & 0x800) != 0)
    {
      memset((char *)v289 + 8, 0, 72);
      *(_QWORD *)&v289[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x31000007C2;
      *(_DWORD *)(a2 + 16) = 2;
      if ((v3[4] & 0x20) != 0)
      {
        v175 = gleVStateProgram_GetAttrib(a2, 6) << 48;
      }
      else
      {
        v173 = *(unsigned __int16 *)(a2 + 1652);
        if ((_DWORD)v173 == 0xFFFF)
        {
          v174 = *(__int16 *)(a2 + 1998);
          v173 = *(unsigned __int16 *)(a2 + 1998);
          *(_WORD *)(a2 + 1652) = v174;
          *(_WORD *)(a2 + 4 * v174 + 262) = 348;
          *(_WORD *)(a2 + 1998) = v174 + 1;
        }
        v175 = ((v173 << 48) | 0x19C840) + 64;
      }
      *(_QWORD *)&v289[1] = v175;
      *((_QWORD *)&v289[1] + 1) = (gleVStateProgram_GetParam(a2, 351) << 48) | 0x15480;
      v195 = *(unsigned __int16 *)(a2 + 1946);
      if ((_DWORD)v195 == 0xFFFF)
      {
        v195 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1946) = v195;
        *(_WORD *)(a2 + 2004) = v195 + 1;
      }
      *((_QWORD *)&v289[0] + 1) = (v195 << 48) | 0x72679000;
      (*(void (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v289);
      memset((char *)&v289[1] + 8, 0, 56);
      *(_QWORD *)&v289[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
      *(_DWORD *)(a2 + 16) = 1;
      v196 = *(unsigned __int16 *)(a2 + 1946);
      if ((_DWORD)v196 == 0xFFFF)
      {
        v196 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1946) = v196;
        *(_WORD *)(a2 + 2004) = v196 + 1;
      }
      v166 = (v196 << 48) | 0x19C840;
    }
    else
    {
      memset((char *)&v289[1] + 8, 0, 56);
      *(_QWORD *)&v289[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
      *(_DWORD *)(a2 + 16) = 1;
      if ((v3[4] & 0x20) != 0)
      {
        v166 = gleVStateProgram_GetAttrib(a2, 6) << 48;
      }
      else
      {
        v164 = *(unsigned __int16 *)(a2 + 1652);
        if ((_DWORD)v164 == 0xFFFF)
        {
          v165 = *(__int16 *)(a2 + 1998);
          v164 = *(unsigned __int16 *)(a2 + 1998);
          *(_WORD *)(a2 + 1652) = v165;
          *(_WORD *)(a2 + 4 * v165 + 262) = 348;
          *(_WORD *)(a2 + 1998) = v165 + 1;
        }
        v166 = ((v164 << 48) | 0x19C840) + 64;
      }
    }
    *(_QWORD *)&v289[1] = v166;
  }
  v197 = *(unsigned __int16 *)(a2 + 1700);
  if ((_DWORD)v197 == 0xFFFF)
  {
    v198 = *(__int16 *)(a2 + 2000);
    v197 = *(unsigned __int16 *)(a2 + 2000);
    *(_WORD *)(a2 + 1700) = v198;
    *(_WORD *)(a2 + 4 * v198 + 1694) = 2;
    *(_WORD *)(a2 + 2000) = v198 + 1;
  }
  *((_QWORD *)&v289[0] + 1) = (v197 << 48) | 0x72643000;
  result = (_QWORD *)(*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v289);
  *(_DWORD *)(a2 + 2032) |= 2u;
  v136 = v3[4];
  v133 = *v3;
  v138 = v3[1];
LABEL_353:
  if ((v136 & 2) != 0)
  {
    v203 = v138 >> 30;
    if (v203 == 2)
    {
      memset((char *)&v289[1] + 8, 0, 56);
      *(_QWORD *)&v289[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
      *(_DWORD *)(a2 + 16) = 1;
      v205 = *(unsigned __int16 *)(a2 + 1900);
      if ((_DWORD)v205 == 0xFFFF)
      {
        v205 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1900) = v205;
        *(_WORD *)(a2 + 2004) = v205 + 1;
      }
      v206 = (v205 << 48) | 0x15440;
    }
    else
    {
      if (v203 == 1)
      {
        memset((char *)&v289[1] + 8, 0, 56);
        *(_QWORD *)&v289[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
        *(_DWORD *)(a2 + 16) = 1;
        *(_QWORD *)&v289[1] = gleVStateProgram_GetAttrib(a2, 5) << 48;
        v204 = *(unsigned __int16 *)(a2 + 1970);
        goto LABEL_370;
      }
      memset((char *)&v289[1] + 8, 0, 56);
      *(_QWORD *)&v289[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
      *(_DWORD *)(a2 + 16) = 1;
      v207 = *(unsigned __int16 *)(a2 + 1962);
      if ((_DWORD)v207 == 0xFFFF)
      {
        v207 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1962) = v207;
        *(_WORD *)(a2 + 2004) = v207 + 1;
      }
      v206 = (v207 << 48) | 0x19C840;
    }
    *(_QWORD *)&v289[1] = v206;
    v204 = *(unsigned __int16 *)(a2 + 1970);
LABEL_370:
    if ((_DWORD)v204 == 0xFFFF)
    {
      v204 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1970) = v204;
      *(_WORD *)(a2 + 2004) = v204 + 1;
    }
    *((_QWORD *)&v289[0] + 1) = (v204 << 48) | 0x72679000;
    (*(void (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v289);
    v208 = v3[4];
    if ((v208 & 1) != 0)
    {
      memset((char *)&v289[1] + 8, 0, 56);
      *(_QWORD *)&v289[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
      *(_DWORD *)(a2 + 16) = 1;
      v209 = *(unsigned __int16 *)(a2 + 1970);
      if ((_DWORD)v209 == 0xFFFF)
      {
        v209 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1970) = v209;
        *(_WORD *)(a2 + 2004) = v209 + 1;
      }
      *(_QWORD *)&v289[1] = (v209 << 48) | 0x19C840;
      v210 = *(unsigned __int16 *)(a2 + 1696);
      if ((_DWORD)v210 == 0xFFFF)
      {
        v211 = *(__int16 *)(a2 + 2000);
        v210 = *(unsigned __int16 *)(a2 + 2000);
        *(_WORD *)(a2 + 1696) = v211;
        *(_WORD *)(a2 + 4 * v211 + 1694) = 1;
        *(_WORD *)(a2 + 2000) = v211 + 1;
      }
      *((_QWORD *)&v289[0] + 1) = (v210 << 48) | 0x72643000;
      (*(void (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v289);
      v208 = v3[4];
    }
    v212 = (v208 >> 2) & 3;
    if (v212 != 2)
    {
      if (v212 != 1)
      {
        memset(&v289[2], 0, 48);
        *(_QWORD *)&v289[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
        *(_DWORD *)(a2 + 16) = 2;
        v225 = *(unsigned __int16 *)(a2 + 1970);
        if ((_DWORD)v225 == 0xFFFF)
        {
          v225 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1970) = v225;
          *(_WORD *)(a2 + 2004) = v225 + 1;
        }
        *(_QWORD *)&v289[1] = (v225 << 48) | 0x40;
        v226 = *(unsigned __int16 *)(a2 + 1660);
        if ((_DWORD)v226 == 0xFFFF)
        {
          v227 = *(__int16 *)(a2 + 1998);
          v226 = *(unsigned __int16 *)(a2 + 1998);
          *(_WORD *)(a2 + 1660) = v227;
          *(_WORD *)(a2 + 4 * v227 + 262) = 350;
          *(_WORD *)(a2 + 1998) = v227 + 1;
        }
        *((_QWORD *)&v289[1] + 1) = (v226 << 48) | 0xAA80;
        v228 = *(unsigned __int16 *)(a2 + 1954);
        if ((_DWORD)v228 == 0xFFFF)
        {
          v228 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1954) = v228;
          *(_WORD *)(a2 + 2004) = v228 + 1;
        }
        *((_QWORD *)&v289[0] + 1) = (v228 << 48) | 0x72679000;
        (*(void (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v289);
        memset(&v289[1], 0, 64);
        *(_QWORD *)&v289[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
        *(_DWORD *)(a2 + 16) = 2;
        v229 = *(unsigned __int16 *)(a2 + 1954);
        if (v229 == 0xFFFF)
        {
          v239 = *(unsigned __int16 *)(a2 + 2004);
          v240 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1954) = v239;
          v241 = v240 + 1;
          *(_WORD *)(a2 + 2004) = v240 + 1;
          v231 = ((unint64_t)(unsigned __int16)v239 << 48) | 0x19C840;
          *(_QWORD *)&v289[1] = v231;
          if ((v241 & 0x10000) != 0)
          {
            v230 = 0;
            *(_WORD *)(a2 + 1954) = v241;
            *(_WORD *)(a2 + 2004) = 1;
            v231 = 1689664;
          }
          else
          {
            v230 = v239 << 48;
          }
        }
        else
        {
          v230 = v229 << 48;
          v231 = ((unint64_t)(unsigned __int16)v229 << 48) | 0x19C840;
          *(_QWORD *)&v289[1] = v231;
        }
        *((_QWORD *)&v289[1] + 1) = v231;
        *((_QWORD *)&v289[0] + 1) = v230 | 0x72679000;
        (*(void (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v289);
        memset((char *)&v289[1] + 8, 0, 56);
        v252 = *(_DWORD *)(a2 + 16);
        *(_DWORD *)(a2 + 16) = 1;
        *(_QWORD *)&v289[0] = (8 * (v252 & 7)) | 0x100000401;
        v253 = *(unsigned __int16 *)(a2 + 1954);
        if ((_DWORD)v253 == 0xFFFF)
        {
          v253 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1954) = v253;
          *(_WORD *)(a2 + 2004) = v253 + 1;
        }
        *(_QWORD *)&v289[1] = (v253 << 48) | 0x50;
        v235 = *(unsigned __int16 *)(a2 + 1696);
        if ((_DWORD)v235 == 0xFFFF)
        {
          v254 = *(__int16 *)(a2 + 2000);
          v235 = *(unsigned __int16 *)(a2 + 2000);
          *(_WORD *)(a2 + 1696) = v254;
          *(_WORD *)(a2 + 4 * v254 + 1694) = 1;
          *(_WORD *)(a2 + 2000) = v254 + 1;
        }
        v237 = 1919037440;
        goto LABEL_453;
      }
      if ((v208 & 0x10) == 0)
      {
        memset((char *)&v289[1] + 8, 0, 56);
        *(_QWORD *)&v289[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000081;
        *(_DWORD *)(a2 + 16) = 1;
        v213 = *(unsigned __int16 *)(a2 + 1970);
        if ((_DWORD)v213 == 0xFFFF)
        {
          v213 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1970) = v213;
          *(_WORD *)(a2 + 2004) = v213 + 1;
        }
        *(_QWORD *)&v289[1] = (v213 << 48) | 0x40;
        v214 = *(unsigned __int16 *)(a2 + 1954);
        if ((_DWORD)v214 == 0xFFFF)
        {
          v214 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1954) = v214;
          *(_WORD *)(a2 + 2004) = v214 + 1;
        }
        *((_QWORD *)&v289[0] + 1) = (v214 << 48) | 0x72679000;
        (*(void (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v289);
      }
      memset((char *)v289 + 8, 0, 72);
      *(_QWORD *)&v289[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
      *(_DWORD *)(a2 + 16) = 3;
      if ((v3[4] & 0x10) != 0)
      {
        v215 = *(unsigned __int16 *)(a2 + 1970);
        if ((_DWORD)v215 == 0xFFFF)
        {
          v217 = (_WORD *)(a2 + 2004);
          v215 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1970) = v215;
          v216 = 64;
          goto LABEL_429;
        }
        v216 = 64;
      }
      else
      {
        v215 = *(unsigned __int16 *)(a2 + 1954);
        v216 = 1689664;
        if ((_DWORD)v215 == 0xFFFF)
        {
          v217 = (_WORD *)(a2 + 2004);
          v215 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1954) = v215;
          v216 = 1689664;
LABEL_429:
          *v217 = v215 + 1;
        }
      }
      *(_QWORD *)&v289[1] = v216 | (v215 << 48) | 0x10;
      v242 = *(unsigned __int16 *)(a2 + 1656);
      if ((_DWORD)v242 == 0xFFFF)
      {
        v243 = *(__int16 *)(a2 + 1998);
        v242 = *(unsigned __int16 *)(a2 + 1998);
        *(_WORD *)(a2 + 1656) = v243;
        *(_WORD *)(a2 + 4 * v243 + 262) = 349;
        *(_WORD *)(a2 + 1998) = v243 + 1;
      }
      *((_QWORD *)&v289[1] + 1) = (v242 << 48) | 0x1FE80;
      v244 = *(unsigned __int16 *)(a2 + 1660);
      if ((_DWORD)v244 == 0xFFFF)
      {
        v245 = *(__int16 *)(a2 + 1998);
        v244 = *(unsigned __int16 *)(a2 + 1998);
        *(_WORD *)(a2 + 1660) = v245;
        *(_WORD *)(a2 + 4 * v245 + 262) = 350;
        *(_WORD *)(a2 + 1998) = v245 + 1;
      }
      *(_QWORD *)&v289[2] = (v244 << 48) | 0x1FE80;
      v246 = *(unsigned __int16 *)(a2 + 1954);
      if ((_DWORD)v246 == 0xFFFF)
      {
        v246 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1954) = v246;
        *(_WORD *)(a2 + 2004) = v246 + 1;
      }
      *((_QWORD *)&v289[0] + 1) = (v246 << 48) | 0x72679000;
      (*(void (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v289);
      memset((char *)v289 + 8, 0, 72);
      *(_QWORD *)&v289[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000B42;
      *(_DWORD *)(a2 + 16) = 2;
      v247 = *(unsigned __int16 *)(a2 + 1954);
      if ((_DWORD)v247 == 0xFFFF)
      {
        v247 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1954) = v247;
        *(_WORD *)(a2 + 2004) = v247 + 1;
      }
      *(_QWORD *)&v289[1] = (v247 << 48) | 0x19C840;
      *((_QWORD *)&v289[1] + 1) = (gleVStateProgram_GetParam(a2, 351) << 48) | 0xAA80;
      v248 = *(unsigned __int16 *)(a2 + 1954);
      if ((_DWORD)v248 == 0xFFFF)
      {
        v248 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1954) = v248;
        *(_WORD *)(a2 + 2004) = v248 + 1;
      }
      *((_QWORD *)&v289[0] + 1) = (v248 << 48) | 0x72679000;
      (*(void (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v289);
      memset((char *)v289 + 8, 0, 72);
      *(_QWORD *)&v289[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000B02;
      *(_DWORD *)(a2 + 16) = 2;
      v249 = *(unsigned __int16 *)(a2 + 1954);
      if ((_DWORD)v249 == 0xFFFF)
      {
        v249 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1954) = v249;
        *(_WORD *)(a2 + 2004) = v249 + 1;
      }
      *(_QWORD *)&v289[1] = (v249 << 48) | 0x19C840;
      *((_QWORD *)&v289[1] + 1) = (gleVStateProgram_GetParam(a2, 351) << 48) | 0x15480;
LABEL_443:
      v200 = *(unsigned __int16 *)(a2 + 1696);
      if ((_DWORD)v200 == 0xFFFF)
      {
        v250 = *(__int16 *)(a2 + 2000);
        v200 = *(unsigned __int16 *)(a2 + 2000);
        *(_WORD *)(a2 + 1696) = v250;
        *(_WORD *)(a2 + 4 * v250 + 1694) = 1;
        *(_WORD *)(a2 + 2000) = v250 + 1;
      }
      v202 = 1919037440;
      goto LABEL_446;
    }
    if ((v208 & 0x10) != 0)
    {
      memset((char *)v289 + 8, 0, 72);
      *(_QWORD *)&v289[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000B42;
      *(_DWORD *)(a2 + 16) = 2;
      v238 = *(unsigned __int16 *)(a2 + 1970);
      if ((_DWORD)v238 == 0xFFFF)
      {
        v238 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1970) = v238;
        *(_WORD *)(a2 + 2004) = v238 + 1;
      }
      *(_QWORD *)&v289[1] = (v238 << 48) | 0x40;
      *((_QWORD *)&v289[1] + 1) = (gleVStateProgram_GetParam(a2, 351) << 48) | 0xAA80;
      v219 = *(unsigned __int16 *)(a2 + 1954);
      if ((_DWORD)v219 != 0xFFFF)
        goto LABEL_394;
    }
    else
    {
      memset((char *)&v289[1] + 8, 0, 56);
      *(_QWORD *)&v289[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000081;
      *(_DWORD *)(a2 + 16) = 1;
      v218 = *(unsigned __int16 *)(a2 + 1970);
      if ((_DWORD)v218 == 0xFFFF)
      {
        v218 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1970) = v218;
        *(_WORD *)(a2 + 2004) = v218 + 1;
      }
      *(_QWORD *)&v289[1] = (v218 << 48) | 0x40;
      v219 = *(unsigned __int16 *)(a2 + 1954);
      if ((_DWORD)v219 != 0xFFFF)
        goto LABEL_394;
    }
    v219 = *(unsigned __int16 *)(a2 + 2004);
    *(_WORD *)(a2 + 1954) = v219;
    *(_WORD *)(a2 + 2004) = v219 + 1;
LABEL_394:
    *((_QWORD *)&v289[0] + 1) = (v219 << 48) | 0x72679000;
    (*(void (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v289);
    memset(&v289[2], 0, 48);
    *(_QWORD *)&v289[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
    *(_DWORD *)(a2 + 16) = 2;
    v220 = *(unsigned __int16 *)(a2 + 1954);
    if ((_DWORD)v220 == 0xFFFF)
    {
      v220 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1954) = v220;
      *(_WORD *)(a2 + 2004) = v220 + 1;
    }
    *(_QWORD *)&v289[1] = (v220 << 48) | 0x19C840;
    v221 = *(unsigned __int16 *)(a2 + 1660);
    if ((_DWORD)v221 == 0xFFFF)
    {
      v222 = *(__int16 *)(a2 + 1998);
      v221 = *(unsigned __int16 *)(a2 + 1998);
      *(_WORD *)(a2 + 1660) = v222;
      *(_WORD *)(a2 + 4 * v222 + 262) = 350;
      *(_WORD *)(a2 + 1998) = v222 + 1;
      v220 = *(unsigned __int16 *)(a2 + 1954);
    }
    *((_QWORD *)&v289[1] + 1) = (v221 << 48) | 0x80;
    if ((_DWORD)v220 == 0xFFFF)
    {
      v220 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1954) = v220;
      *(_WORD *)(a2 + 2004) = v220 + 1;
    }
    *((_QWORD *)&v289[0] + 1) = (v220 << 48) | 0x72679000;
    (*(void (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v289);
    memset((char *)&v289[1] + 8, 0, 56);
    v223 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = 1;
    *(_QWORD *)&v289[0] = (8 * (v223 & 7)) | 0x100000401;
    v224 = *(unsigned __int16 *)(a2 + 1954);
    if ((_DWORD)v224 == 0xFFFF)
    {
      v224 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1954) = v224;
      *(_WORD *)(a2 + 2004) = v224 + 1;
    }
    *(_QWORD *)&v289[1] = (v224 << 48) | 0x50;
    goto LABEL_443;
  }
  if ((v136 & 1) == 0)
    goto LABEL_455;
  v199 = v138 >> 30;
  if (v199 == 3)
  {
    memset((char *)&v289[1] + 8, 0, 56);
    *(_QWORD *)&v289[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
    *(_DWORD *)(a2 + 16) = 1;
    v232 = *(unsigned __int16 *)(a2 + 1962);
    if ((_DWORD)v232 == 0xFFFF)
    {
      v232 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1962) = v232;
      *(_WORD *)(a2 + 2004) = v232 + 1;
    }
    v233 = (v232 << 48) | 0x19C840;
    goto LABEL_417;
  }
  if (v199 != 1)
  {
    memset((char *)&v289[1] + 8, 0, 56);
    *(_QWORD *)&v289[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
    *(_DWORD *)(a2 + 16) = 1;
    v234 = *(unsigned __int16 *)(a2 + 1900);
    if ((_DWORD)v234 == 0xFFFF)
    {
      v234 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1900) = v234;
      *(_WORD *)(a2 + 2004) = v234 + 1;
    }
    v233 = (v234 << 48) | 0x15440;
LABEL_417:
    *(_QWORD *)&v289[1] = v233;
    v235 = *(unsigned __int16 *)(a2 + 1696);
    if ((_DWORD)v235 == 0xFFFF)
    {
      v236 = *(__int16 *)(a2 + 2000);
      v235 = *(unsigned __int16 *)(a2 + 2000);
      *(_WORD *)(a2 + 1696) = v236;
      *(_WORD *)(a2 + 4 * v236 + 1694) = 1;
      *(_WORD *)(a2 + 2000) = v236 + 1;
    }
    v237 = 1919168512;
LABEL_453:
    v251 = v237 | (v235 << 48);
    goto LABEL_454;
  }
  memset((char *)&v289[1] + 8, 0, 56);
  *(_QWORD *)&v289[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
  *(_DWORD *)(a2 + 16) = 1;
  *(_QWORD *)&v289[1] = gleVStateProgram_GetAttrib(a2, 5) << 48;
  v200 = *(unsigned __int16 *)(a2 + 1696);
  if ((_DWORD)v200 == 0xFFFF)
  {
    v201 = *(__int16 *)(a2 + 2000);
    v200 = *(unsigned __int16 *)(a2 + 2000);
    *(_WORD *)(a2 + 1696) = v201;
    *(_WORD *)(a2 + 4 * v201 + 1694) = 1;
    *(_WORD *)(a2 + 2000) = v201 + 1;
  }
  v202 = 1919168512;
LABEL_446:
  v251 = v202 | (v200 << 48);
LABEL_454:
  *((_QWORD *)&v289[0] + 1) = v251;
  result = (_QWORD *)(*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v289);
  v133 = *v3;
  v138 = v3[1];
LABEL_455:
  if ((v133 & 0x4000000000000000) != 0)
  {
    memset((char *)&v289[1] + 8, 0, 56);
    *(_QWORD *)&v289[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
    *(_DWORD *)(a2 + 16) = 1;
    v255 = *(unsigned __int16 *)(a2 + 1900);
    if ((_DWORD)v255 == 0xFFFF)
    {
      v255 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1900) = v255;
      *(_WORD *)(a2 + 2004) = v255 + 1;
    }
    *(_QWORD *)&v289[1] = (v255 << 48) | 0x19C840;
    v256 = *(unsigned __int16 *)(a2 + 1880);
    if ((_DWORD)v256 == 0xFFFF)
    {
      v257 = *(__int16 *)(a2 + 2000);
      v256 = *(unsigned __int16 *)(a2 + 2000);
      *(_WORD *)(a2 + 1880) = v257;
      *(_WORD *)(a2 + 4 * v257 + 1694) = 47;
      *(_WORD *)(a2 + 2000) = v257 + 1;
    }
    *((_QWORD *)&v289[0] + 1) = ((v256 << 48) | 0x72679000) + 0x2000;
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v289);
    v133 = *v3;
    v138 = v3[1];
  }
  if ((v138 & 0x3F000000) != 0)
  {
    if ((v133 & 0x40) != 0)
    {
      for (i = 0; i != 6; ++i)
      {
        if (((1 << i) & *(_DWORD *)((_BYTE *)v3 + 11) & 0x3F) != 0)
        {
          memset((char *)v289 + 8, 0, 72);
          *(_QWORD *)&v289[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000A42;
          *(_DWORD *)(a2 + 16) = 2;
          v264 = *(unsigned __int16 *)(a2 + 1900);
          if ((_DWORD)v264 == 0xFFFF)
          {
            v264 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1900) = v264;
            *(_WORD *)(a2 + 2004) = v264 + 1;
          }
          *(_QWORD *)&v289[1] = (v264 << 48) | 0x19C840;
          *((_QWORD *)&v289[1] + 1) = ((gleVStateProgram_GetParam(a2, i + 352) << 48) | 0x19C840) + 64;
          v265 = (i >> 2) + 48;
          v266 = a2 + 4 * v265;
          v267 = *(unsigned __int16 *)(v266 + 1692);
          if ((_DWORD)v267 == 0xFFFF)
          {
            v268 = *(__int16 *)(a2 + 2000);
            v267 = *(unsigned __int16 *)(a2 + 2000);
            *(_WORD *)(v266 + 1692) = v268;
            *(_WORD *)(a2 + 4 * v268 + 1694) = v265;
            *(_WORD *)(a2 + 2000) = v268 + 1;
          }
          *((_QWORD *)&v289[0] + 1) = ((unint64_t)((i & 3) == 0) << 18) | (v267 << 48) | ((unint64_t)((i & 3) == 1) << 17) | ((unint64_t)((i & 3) == 2) << 16) | ((unint64_t)((i & 3) == 3) << 15) | 0x72603000;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v289);
        }
      }
    }
    else
    {
      v258 = 0;
      v259 = 1;
      do
      {
        v260 = v259;
        if (((*(_DWORD *)((char *)v3 + 11) >> v258) & 1) != 0)
        {
          memset((char *)&v289[1] + 8, 0, 56);
          *(_QWORD *)&v289[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
          *(_DWORD *)(a2 + 16) = 1;
          *(_QWORD *)&v289[1] = (gleVStateProgram_GetAttrib(a2, 58) << 48) | 0x19C800;
          v261 = *(unsigned __int16 *)(a2 + 1884);
          if ((_DWORD)v261 == 0xFFFF)
          {
            v262 = *(__int16 *)(a2 + 2000);
            v261 = *(unsigned __int16 *)(a2 + 2000);
            *(_WORD *)(a2 + 1884) = v262;
            *(_WORD *)(a2 + 4 * v262 + 1694) = 48;
            *(_WORD *)(a2 + 2000) = v262 + 1;
          }
          *((_QWORD *)&v289[0] + 1) = ((v261 << 48) | 0x72679000) + 0x2000;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v289);
        }
        v259 = 0;
        v258 = 1;
      }
      while ((v260 & 1) != 0);
    }
  }
  v139 = v3[2];
  v137 = v3[3];
  v133 = *v3;
  v138 = v3[1];
  if ((*v3 & 0x800) != 0)
  {
LABEL_479:
    result = (_QWORD *)gleVStateProgram_LightingStage(v3, a2);
    v139 = v3[2];
    v137 = v3[3];
    v133 = *v3;
    v138 = v3[1];
  }
LABEL_480:
  if ((v133 & 0xFF0000) != 0)
  {
    v269 = BYTE2(v133);
    if (BYTE2(v133))
    {
      v287 = v139 | v137 | HIDWORD(v139) | HIDWORD(v137);
      v270 = 80;
      v271 = 989;
      v272 = 1720;
      memset(v289, 0, sizeof(v289));
      do
      {
        if ((v269 & 1) != 0)
        {
          v273 = v271 + 35;
          v274 = v287 >> (v271 + 35);
          if ((v274 & 0x1010101) != 0)
          {
            if ((v274 & 0x1010101) != 0x1010101)
            {
              memset((char *)&v289[1] + 8, 0, 56);
              *(_QWORD *)&v289[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
              *(_DWORD *)(a2 + 16) = 1;
              *(_QWORD *)&v289[1] = (gleVStateProgram_GetAttrib(a2, (int)v271 - 981) << 48) | 0x19C800;
              v275 = *(unsigned __int16 *)(a2 + 2 * v271);
              if ((_DWORD)v275 == 0xFFFF)
              {
                v275 = *(unsigned __int16 *)(a2 + 2004);
                *(_WORD *)(a2 + 2 * v271) = v275;
                *(_WORD *)(a2 + 2004) = v275 + 1;
              }
              *((_QWORD *)&v289[0] + 1) = ~(v274 << 18) & 0x40000 | (unint64_t)(v275 << 48) | ~(v274 << 9) & 0x20000 | (unint64_t)(~v274 & 0x10000) | ~(v274 >> 9) & 0x8000 | 0x72601000;
              (*(void (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v289);
            }
            v3 = v288;
            if (((1 << v273) & BYTE3(*v288)) != 0)
            {
              memset((char *)&v289[1] + 8, 0, 56);
              *(_QWORD *)&v289[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
              *(_DWORD *)(a2 + 16) = 1;
              v276 = *(unsigned __int16 *)(a2 + 2 * v271);
              if ((_DWORD)v276 == 0xFFFF)
              {
                v276 = *(unsigned __int16 *)(a2 + 2004);
                *(_WORD *)(a2 + 2 * v271) = v276;
                *(_WORD *)(a2 + 2004) = v276 + 1;
              }
              *(_QWORD *)&v289[1] = (v276 << 48) | 0x19C840;
              v277 = *(unsigned __int16 *)(a2 + v272);
              if ((_DWORD)v277 == 0xFFFF)
              {
                v278 = *(__int16 *)(a2 + 2000);
                *(_WORD *)(a2 + v272) = v278;
                v277 = (unsigned __int16)v278;
                *(_WORD *)(a2 + 4 * v278 + 1694) = v271 - 982;
                *(_WORD *)(a2 + 2000) = v278 + 1;
              }
              *((_QWORD *)&v289[0] + 1) = ((v277 << 48) | 0x72679000) + 0x2000;
              result = (_QWORD *)(*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v289);
            }
            else
            {
              result = (_QWORD *)gleVStateProgram_MultMatrix4x4(a2, (int)v271 - 950, v270, (int)v271 - 982, 23, 0, 0, 1, HIBYTE(*v288) & 1);
            }
          }
          else if (((1 << v273) & BYTE3(*v288)) != 0)
          {
            memset((char *)&v289[1] + 8, 0, 56);
            *(_QWORD *)&v289[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
            *(_DWORD *)(a2 + 16) = 1;
            *(_QWORD *)&v289[1] = (gleVStateProgram_GetAttrib(a2, (int)v271 - 981) << 48) | 0x19C800;
            v279 = *(unsigned __int16 *)(a2 + v272);
            if ((_DWORD)v279 == 0xFFFF)
            {
              v280 = *(__int16 *)(a2 + 2000);
              *(_WORD *)(a2 + v272) = v280;
              v279 = (unsigned __int16)v280;
              *(_WORD *)(a2 + 4 * v280 + 1694) = v271 - 982;
              *(_WORD *)(a2 + 2000) = v280 + 1;
            }
            *((_QWORD *)&v289[0] + 1) = ((v279 << 48) | 0x72679000) + 0x2000;
            result = (_QWORD *)(*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v289);
            v3 = v288;
          }
          else
          {
            result = (_QWORD *)gleVStateProgram_MultMatrix4x4(a2, (int)v271 - 981, v270, (int)v271 - 982, 23, 1, 0, 1, HIBYTE(*v288) & 1);
            v3 = v288;
          }
        }
        ++v271;
        v272 += 4;
        v270 += 8;
        v281 = v269 > 1;
        v269 >>= 1;
      }
      while (v281);
      v138 = v3[1];
    }
  }
  if ((v138 & 0xFFFFFFFF00000000) != 0)
  {
    v282 = HIDWORD(v138);
    if (HIDWORD(v138))
    {
      v283 = 0;
      v284 = 1752;
      do
      {
        if ((v282 & 1) != 0)
        {
          memset((char *)&v289[1] + 8, 0, 56);
          *(_QWORD *)&v289[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
          *(_DWORD *)(a2 + 16) = 1;
          *(_QWORD *)&v289[1] = (gleVStateProgram_GetAttrib(a2, v283 + 16) << 48) | 0x19C800;
          v285 = *(unsigned __int16 *)(a2 + v284);
          if ((_DWORD)v285 == 0xFFFF)
          {
            v286 = *(__int16 *)(a2 + 2000);
            v285 = *(unsigned __int16 *)(a2 + 2000);
            *(_WORD *)(a2 + v284) = v286;
            *(_WORD *)(a2 + 4 * v286 + 1694) = v283 + 15;
            *(_WORD *)(a2 + 2000) = v286 + 1;
          }
          *((_QWORD *)&v289[0] + 1) = ((v285 << 48) | 0x72679000) + 0x2000;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v289);
        }
        ++v283;
        v284 += 4;
        v281 = v282 > 1;
        LODWORD(v282) = v282 >> 1;
      }
      while (v281);
    }
  }
  return result;
}

void gleVStateProgram_LLVMAddOperation(uint64_t a1, uint64_t a2)
{
  gleLLVMAddOperation(*(_QWORD *)(a1 + 8), a2, 1);
}

uint64_t gleVStateProgram_GenerateMetadata(uint64_t a1, char *a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 *v13;
  const char *v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  __int16 *v19;
  uint64_t *v20;
  int v21;
  int v22;
  int v23;
  const char *v24;
  int v25;
  _QWORD v27[3];
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  char __str[32];
  uint64_t v37;

  v27[2] = a4;
  v30 = (uint64_t *)a2;
  v5 = a1;
  v37 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 8);
  v28 = *(__int16 *)(a1 + 2000);
  if (!*(_QWORD *)(v6 + 152))
  {
    a1 = LLVMInt32TypeInContext();
    *(_QWORD *)(v6 + 152) = a1;
  }
  v27[1] = (a3 + 1);
  MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)v27 - v8;
  if (v7 >= 0x200)
    v10 = 512;
  else
    v10 = v7;
  bzero((char *)v27 - v8, v10);
  LODWORD(v29) = a3;
  if (a3 >= 1)
  {
    v11 = 0;
    v12 = v29;
    v13 = (__int16 *)(v5 + 22);
    do
    {
      if ((*(_BYTE *)(v5 + 2033) & 8) != 0)
      {
        v14 = gleLLVMGetArgTypeName(*((_DWORD *)v30 + v11));
        memset(__str, 0, sizeof(__str));
        snprintf(__str, 0x1FuLL, "attrib%d", v11);
        v35 = 0;
        v33 = 0u;
        v34 = 0u;
        v31 = 0u;
        v32 = 0u;
        *(_QWORD *)&v31 = gleLLVMGetConstantInt32(v6);
        *((_QWORD *)&v31 + 1) = LLVMMDStringInContext();
        *(_QWORD *)&v32 = LLVMMDStringInContext();
        *((_QWORD *)&v32 + 1) = LLVMConstInt();
        *(_QWORD *)&v33 = LLVMConstInt();
        *((_QWORD *)&v33 + 1) = LLVMMDStringInContext();
        strlen(v14);
        *(_QWORD *)&v34 = LLVMMDStringInContext();
        *((_QWORD *)&v34 + 1) = LLVMMDStringInContext();
        strlen(__str);
        v35 = LLVMMDStringInContext();
      }
      else
      {
        v31 = 0u;
        v32 = 0u;
        *(_QWORD *)&v31 = gleLLVMGetConstantInt32(v6);
        *((_QWORD *)&v31 + 1) = LLVMMDStringInContext();
        *(_QWORD *)&v32 = LLVMMDStringInContext();
        gleVStateProgram_VertexCodeFromAttrib(*v13);
        *((_QWORD *)&v32 + 1) = LLVMConstInt();
      }
      *(_QWORD *)&v9[8 * v11++] = LLVMMDNodeInContext();
      v13 += 2;
    }
    while (v12 != v11);
  }
  gleLLVMAddCommonMetaData(v6, (uint64_t *)&v9[8 * (int)v29], 1, v29, *(__int16 *)(v5 + 1998), 0);
  v29 = LLVMMDNodeInContext();
  MEMORY[0x24BDAC7A8](v29);
  if (v15 >= 0x200)
    v17 = 512;
  else
    v17 = v15;
  v30 = (_QWORD *)((char *)v27 - v16);
  bzero((char *)v27 - v16, v17);
  if ((int)v28 >= 1)
  {
    v18 = v28;
    v19 = (__int16 *)(v5 + 1694);
    v20 = v30;
    while (1)
    {
      v22 = *v19;
      v19 += 2;
      v21 = v22;
      if (v22 <= 46)
        break;
      if ((v21 - 48) >= 2)
      {
        if (v21 == 47)
        {
          *(_QWORD *)&v31 = 0;
          *(_QWORD *)&v31 = LLVMMDStringInContext();
          goto LABEL_55;
        }
        v24 = "air.perspective";
        if (v21 != 50)
          goto LABEL_30;
LABEL_34:
        *(_QWORD *)&v32 = 0;
        v31 = 0uLL;
LABEL_35:
        *(_QWORD *)&v31 = LLVMMDStringInContext();
        *((_QWORD *)&v31 + 1) = LLVMMDStringInContext();
        *(_QWORD *)&v32 = LLVMMDStringInContext();
        goto LABEL_55;
      }
      v32 = 0u;
      v33 = 0u;
      v31 = 0u;
      *(_QWORD *)&v31 = LLVMMDStringInContext();
      *((_QWORD *)&v31 + 1) = LLVMConstInt();
      *(_QWORD *)&v32 = LLVMMDStringInContext();
      *((_QWORD *)&v32 + 1) = LLVMConstInt();
      *(_QWORD *)&v33 = LLVMMDStringInContext();
      *((_QWORD *)&v33 + 1) = LLVMMDStringInContext();
LABEL_55:
      *v20++ = LLVMMDNodeInContext();
      if (!--v18)
        goto LABEL_56;
    }
    if ((v21 - 3) < 4)
    {
      v23 = *(_DWORD *)(v5 + 2032);
      v24 = "air.flat";
      if ((v23 & 0x200) == 0)
      {
        if ((v23 & 0x400) != 0)
          v24 = "air.perspective";
        else
          v24 = "air.no_perspective";
      }
LABEL_30:
      memset(__str, 0, sizeof(__str));
      v25 = 5;
      switch(v21)
      {
        case 1:
          break;
        case 3:
          if ((*(_BYTE *)(v5 + 2033) & 8) != 0)
            strcpy(__str, "user(front_color)");
          v25 = 2;
          break;
        case 4:
          if ((*(_BYTE *)(v5 + 2033) & 8) != 0)
            strcpy(__str, "user(back_color)");
          v25 = 1;
          break;
        case 5:
          if ((*(_BYTE *)(v5 + 2033) & 8) != 0)
            strcpy(__str, "user(sec_front_color)");
          v25 = 3;
          break;
        case 6:
          if ((*(_BYTE *)(v5 + 2033) & 8) != 0)
            strcpy(__str, "user(sec_back_color)");
          v25 = 4;
          break;
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
          v25 = v21 + 1;
          if ((*(_BYTE *)(v5 + 2033) & 8) != 0)
            snprintf(__str, 0x1FuLL, "user(tex_coord%u)", v21 - 7);
          break;
        default:
          v25 = v21 - 15;
          break;
      }
      if ((*(_BYTE *)(v5 + 2033) & 8) != 0)
      {
        if (!__str[0])
          snprintf(__str, 0x1FuLL, "user(slot%u)", v25);
        v31 = 0u;
        v32 = 0u;
        *(_QWORD *)&v31 = LLVMMDStringInContext();
        strlen(__str);
        *((_QWORD *)&v31 + 1) = LLVMMDStringInContext();
        strlen(v24);
        *(_QWORD *)&v32 = LLVMMDStringInContext();
        *((_QWORD *)&v32 + 1) = LLVMMDStringInContext();
      }
      else
      {
        *(_QWORD *)&v33 = 0;
        v31 = 0u;
        v32 = 0u;
        *(_QWORD *)&v31 = LLVMMDStringInContext();
        *((_QWORD *)&v31 + 1) = LLVMMDStringInContext();
        *(_QWORD *)&v32 = LLVMConstInt();
        strlen(v24);
        *((_QWORD *)&v32 + 1) = LLVMMDStringInContext();
        *(_QWORD *)&v33 = LLVMMDStringInContext();
      }
      goto LABEL_55;
    }
    if (!v21)
      goto LABEL_34;
    v24 = "air.perspective";
    if (v21 != 2)
      goto LABEL_30;
    *(_QWORD *)&v32 = 0;
    v31 = 0uLL;
    goto LABEL_35;
  }
LABEL_56:
  LLVMMDNodeInContext();
  return gleLLVMCreateFunctionMetadata(v6, "air.vertex");
}

uint64_t gleVStateProgram_GetAttrib(uint64_t a1, signed int a2)
{
  uint64_t v2;
  int v3;
  _WORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v2 = a1 + 4 * a2;
  v5 = *(unsigned __int16 *)(v2 + 20);
  v4 = (_WORD *)(v2 + 20);
  v3 = v5;
  if (*(_QWORD *)a1)
  {
    if (v3 == 0xFFFF)
    {
      v6 = *(__int16 *)(a1 + 1996);
      LOWORD(v3) = *(_WORD *)(a1 + 1996);
      *v4 = v6;
      *(_WORD *)(a1 + 4 * v6 + 22) = a2;
      *(_WORD *)(a1 + 1996) = v6 + 1;
    }
    return (__int16)v3;
  }
  else
  {
    if (v3 == 0xFFFF)
    {
      v8 = *(__int16 *)(a1 + 1996);
      LOWORD(v3) = *(_WORD *)(a1 + 1996);
      *v4 = v8;
      *(_WORD *)(a1 + 4 * v8 + 22) = a2;
      *(_WORD *)(a1 + 1996) = v8 + 1;
    }
    v7 = (__int16)v3;
    v9 = *(_DWORD *)(a1 + 2032);
    if (a2 == 5)
    {
      v9 |= 4u;
      *(_DWORD *)(a1 + 2032) = v9;
    }
    if ((v9 & 1) == 0)
      return gleVStateProgram_VertexCodeFromAttrib(a2);
  }
  return v7;
}

uint64_t gleVStateProgram_VertexCodeFromAttrib(unsigned int a1)
{
  if (a1 < 0x3C && ((0xFFF00000000FFFFuLL >> a1) & 1) != 0)
    return dword_22D807578[a1];
  else
    return a1 - 16;
}

uint64_t gleVStateProgram_LightingStage(unint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  int v57;
  BOOL v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  int v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  unsigned int v68;
  char v69;
  unint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  int v110;
  int v111;
  int v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  unint64_t v131;
  char v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  int v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  int v144;
  unint64_t v145;
  int v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  _WORD *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int8x16_t v156;
  int8x16_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  int8x16_t v165;
  int8x16_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  int8x16_t v172;
  int8x16_t v173;
  unint64_t v174;
  char v175;
  unint64_t v176;
  int v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t j;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  unint64_t v194;
  uint64_t v195;
  unint64_t m;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  char v202;
  uint64_t v203;
  unint64_t v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t k;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  int v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  unint64_t v225;
  char v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  int v234;
  unint64_t i;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t v240;
  char v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  unint64_t v245;
  uint64_t v246;
  int v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  unint64_t v256;
  uint64_t v257;
  int v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  unint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t v268;
  char v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  unint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  int v278;
  uint64_t v279;
  int v280;
  uint64_t v281;
  uint64_t v282;
  char v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  int v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  int v302;
  uint64_t v303;
  unint64_t v304;
  int v305;
  int64x2_t v306;
  uint64_t v307;
  uint64_t v308;
  unint64_t v309;
  int v310;
  int64x2_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  unint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  unint64_t v328;
  int v329;
  uint64_t v330;
  int v331;
  uint64_t v332;
  uint64_t v333;
  unint64_t v334;
  int v335;
  int64x2_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  unint64_t v343;
  int v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  unint64_t n;
  int v350;
  int64x2_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  unint64_t v358;
  int v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  unint64_t ii;
  int v365;
  int64x2_t v366;
  uint64_t v367;
  uint64_t v368;
  unint64_t jj;
  int v370;
  int64x2_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  unint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  unint64_t v388;
  int v389;
  uint64_t v390;
  int v391;
  uint64_t v392;
  uint64_t v393;
  unint64_t kk;
  int v395;
  int64x2_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  unint64_t v403;
  int v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  unint64_t v408;
  uint64_t v409;
  unint64_t mm;
  int v411;
  int64x2_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  unint64_t v419;
  int v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  unint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  unint64_t v436;
  int v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  unint64_t v446;
  int v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  unint64_t i1;
  int v452;
  int64x2_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  unint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  unint64_t nn;
  int v467;
  int64x2_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  unint64_t v479;
  _BOOL4 v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  unint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  int v492;
  unsigned int v493;
  unint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  int v500;
  uint64_t v501;
  uint64_t v502;
  _WORD *v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  int v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  unint64_t v517;
  char *v518;
  int v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  unint64_t v523;
  uint64_t v524;
  uint64_t v525;
  _WORD *v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  int v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  unint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  int v545;
  unint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  int v552;
  uint64_t v553;
  uint64_t v554;
  _WORD *v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  int v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  unint64_t v569;
  char *v570;
  int v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  _WORD *v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  int v583;
  unint64_t i3;
  int v585;
  int64x2_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  unint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  unint64_t i2;
  int v600;
  int64x2_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  unint64_t v612;
  uint64_t v613;
  uint64_t v614;
  int v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  int v619;
  uint64_t v620;
  int v621;
  int v622;
  __int128 v623;
  unint64_t v624;
  int v625;
  int v626;
  BOOL v627;
  int v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  char v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  unint64_t v653;
  int v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  int v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  int v681;
  uint64_t v682;
  uint64_t v683;
  unint64_t v684;
  uint64_t v685;
  int v686;
  int v687;
  uint64_t v688;
  int v689;
  uint64_t v690;
  unint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  unint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  __int128 v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  char v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  int v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  char v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  int v731;
  uint64_t v732;
  int v733;
  uint64_t v734;
  uint64_t v735;
  int64x2_t v736;
  uint64_t v737;
  int64x2_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  int v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  int64x2_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  int v752;
  uint64_t v753;
  int64x2_t v754;
  uint64_t v755;
  int64x2_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  int64x2_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  int64x2_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  int v773;
  unint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  int64x2_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  int64x2_t v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  int v790;
  int v791;
  int v792;
  unint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  int64x2_t v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  int64x2_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  int v809;
  int64x2_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  int v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  int v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  int v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  int v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  int v852;
  uint64_t v853;
  uint64_t v854;
  int v855;
  int v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  BOOL v861;
  int v862;
  int v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t result;
  unint64_t v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  unint64_t v884;
  unint64_t v885;
  uint64_t v886;
  unsigned int v887;
  int v888;
  _BOOL4 v889;
  BOOL v890;
  int v891;
  unint64_t v892;
  unsigned int v893;
  int v894;
  unsigned int v895;
  int v896;
  unsigned int v897;
  unsigned int v899;
  int v900;
  int v901;
  BOOL v902;
  char *v903;
  _WORD *v904;
  int v905;
  unint64_t v906;
  uint64_t v907;
  _OWORD v908[6];
  uint64_t v909;

  v909 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = (*a1 >> 52) & 0xF;
  v892 = v4 & ((uint64_t)(*a1 << 13) >> 63);
  if (*a1 & 0x2000000000000 | *((unsigned __int8 *)a1 + 8))
  {
    memset((char *)v908 + 8, 0, 64);
    v5 = 8 * (*(_DWORD *)(a2 + 16) & 7);
    *(_DWORD *)(a2 + 16) = 1;
    v907 = v5 | 0x100080381;
    v6 = *(unsigned __int16 *)(a2 + 1900);
    if (v6 == 0xFFFF)
    {
      v8 = *(unsigned __int16 *)(a2 + 2004);
      v9 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1900) = v8;
      *(_WORD *)(a2 + 2004) = ++v9;
      *((_QWORD *)&v908[0] + 1) = ((unint64_t)(unsigned __int16)v8 << 48) | 0x1FE40;
      if ((v9 & 0x10000) != 0)
      {
        v8 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1900) = v8;
        *(_WORD *)(a2 + 2004) = v8 + 1;
      }
      v7 = v8 << 48;
    }
    else
    {
      v7 = v6 << 48;
      *((_QWORD *)&v908[0] + 1) = ((unint64_t)(unsigned __int16)v6 << 48) | 0x1FE40;
    }
    *(_QWORD *)&v908[0] = v7 | 0x72609000;
    (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
  }
  v10 = v3 << 12;
  if ((v892 & 1) != 0)
  {
    memset(v908, 0, 72);
    v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
    *(_DWORD *)(a2 + 16) = 3;
    v14 = *(unsigned __int16 *)(a2 + 1644);
    if ((_DWORD)v14 == 0xFFFF)
    {
      v15 = *(__int16 *)(a2 + 1998);
      v14 = *(unsigned __int16 *)(a2 + 1998);
      *(_WORD *)(a2 + 1644) = v15;
      *(_WORD *)(a2 + 4 * v15 + 262) = 346;
      *(_WORD *)(a2 + 1998) = v15 + 1;
    }
    *((_QWORD *)&v908[0] + 1) = ((v14 << 48) | 0x19C840) + 64;
    v16 = *(unsigned __int16 *)(a2 + 1612);
    if ((_DWORD)v16 == 0xFFFF)
    {
      v17 = *(__int16 *)(a2 + 1998);
      v16 = *(unsigned __int16 *)(a2 + 1998);
      *(_WORD *)(a2 + 1612) = v17;
      *(_WORD *)(a2 + 4 * v17 + 262) = 338;
      *(_WORD *)(a2 + 1998) = v17 + 1;
    }
    *(_QWORD *)&v908[1] = ((v16 << 48) | 0x19C840) + 64;
    v18 = (gleVStateProgram_GetAttrib(a2, 2) << 48) | 0x19C800;
    goto LABEL_23;
  }
  if ((v892 & 2) != 0)
  {
    memset(v908, 0, 72);
    v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
    *(_DWORD *)(a2 + 16) = 3;
    v19 = *(unsigned __int16 *)(a2 + 1644);
    if ((_DWORD)v19 == 0xFFFF)
    {
      v20 = *(__int16 *)(a2 + 1998);
      v19 = *(unsigned __int16 *)(a2 + 1998);
      *(_WORD *)(a2 + 1644) = v20;
      *(_WORD *)(a2 + 4 * v20 + 262) = 346;
      *(_WORD *)(a2 + 1998) = v20 + 1;
    }
    *((_QWORD *)&v908[0] + 1) = ((v19 << 48) | 0x19C840) + 64;
    *(_QWORD *)&v908[1] = (gleVStateProgram_GetAttrib(a2, 2) << 48) | 0x19C800;
    v21 = *(unsigned __int16 *)(a2 + 1604);
    if ((_DWORD)v21 == 0xFFFF)
    {
      v22 = *(__int16 *)(a2 + 1998);
      v21 = *(unsigned __int16 *)(a2 + 1998);
      *(_WORD *)(a2 + 1604) = v22;
      *(_WORD *)(a2 + 4 * v22 + 262) = 336;
      *(_WORD *)(a2 + 1998) = v22 + 1;
    }
    v18 = ((v21 << 48) | 0x19C840) + 64;
LABEL_23:
    *((_QWORD *)&v908[1] + 1) = v18;
    v13 = *(unsigned __int16 *)(a2 + 1904);
    goto LABEL_24;
  }
  memset(&v908[1], 0, 56);
  v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
  *(_DWORD *)(a2 + 16) = 1;
  v11 = *(unsigned __int16 *)(a2 + 1636);
  if ((_DWORD)v11 == 0xFFFF)
  {
    v12 = *(__int16 *)(a2 + 1998);
    v11 = *(unsigned __int16 *)(a2 + 1998);
    *(_WORD *)(a2 + 1636) = v12;
    *(_WORD *)(a2 + 4 * v12 + 262) = 344;
    *(_WORD *)(a2 + 1998) = v12 + 1;
  }
  *((_QWORD *)&v908[0] + 1) = ((v11 << 48) | 0x19C840) + 64;
  v13 = *(unsigned __int16 *)(a2 + 1904);
LABEL_24:
  if ((_DWORD)v13 == 0xFFFF)
  {
    v13 = *(unsigned __int16 *)(a2 + 2004);
    *(_WORD *)(a2 + 1904) = v13;
    *(_WORD *)(a2 + 2004) = v13 + 1;
  }
  v23 = v4 & (v10 >> 63);
  *(_QWORD *)&v908[0] = (v13 << 48) | 0x72679000;
  (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
  v24 = *a1;
  if (*a1 & 0x2000000000000 | a1[1])
  {
    memset((char *)v908 + 8, 0, 64);
    v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
    *(_DWORD *)(a2 + 16) = 2;
    v25 = *(unsigned __int16 *)(a2 + 1900);
    if (v25 == 0xFFFF)
    {
      v27 = *(unsigned __int16 *)(a2 + 2004);
      v28 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1900) = v27;
      *(_WORD *)(a2 + 2004) = ++v28;
      *((_QWORD *)&v908[0] + 1) = ((unint64_t)(unsigned __int16)v27 << 48) | 0x19C840;
      if ((v28 & 0x10000) != 0)
      {
        v29 = *(unsigned __int16 *)(a2 + 2004);
        v30 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1900) = v29;
        *(_WORD *)(a2 + 2004) = ++v30;
        *(_QWORD *)&v908[1] = (((unint64_t)(unsigned __int16)v29 << 48) | 0x1FE40) + 16;
        if ((v30 & 0x10000) != 0)
        {
          v29 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1900) = v29;
          *(_WORD *)(a2 + 2004) = v29 + 1;
        }
        v26 = v29 << 48;
        goto LABEL_35;
      }
      v26 = v27 << 48;
    }
    else
    {
      v26 = v25 << 48;
      *((_QWORD *)&v908[0] + 1) = ((unint64_t)(unsigned __int16)v25 << 48) | 0x19C840;
    }
    *(_QWORD *)&v908[1] = v26 | 0x1FE50;
LABEL_35:
    *(_QWORD *)&v908[0] = v26 | 0x72679000;
    (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
    v24 = *a1;
  }
  if ((v24 & 0x1000000000000) == 0)
    goto LABEL_56;
  if ((v23 & 1) != 0)
  {
    memset(v908, 0, 72);
    v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
    *(_DWORD *)(a2 + 16) = 3;
    v34 = *(unsigned __int16 *)(a2 + 1644);
    if ((_DWORD)v34 == 0xFFFF)
    {
      v35 = *(__int16 *)(a2 + 1998);
      v34 = *(unsigned __int16 *)(a2 + 1998);
      *(_WORD *)(a2 + 1644) = v35;
      *(_WORD *)(a2 + 4 * v35 + 262) = 346;
      *(_WORD *)(a2 + 1998) = v35 + 1;
    }
    *((_QWORD *)&v908[0] + 1) = ((v34 << 48) | 0x19C840) + 64;
    v36 = *(unsigned __int16 *)(a2 + 1616);
    if ((_DWORD)v36 == 0xFFFF)
    {
      v37 = *(__int16 *)(a2 + 1998);
      v36 = *(unsigned __int16 *)(a2 + 1998);
      *(_WORD *)(a2 + 1616) = v37;
      *(_WORD *)(a2 + 4 * v37 + 262) = 339;
      *(_WORD *)(a2 + 1998) = v37 + 1;
    }
    *(_QWORD *)&v908[1] = ((v36 << 48) | 0x19C840) + 64;
    v38 = (gleVStateProgram_GetAttrib(a2, 2) << 48) | 0x19C800;
  }
  else
  {
    if ((v23 & 2) == 0)
    {
      memset(&v908[1], 0, 56);
      v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
      *(_DWORD *)(a2 + 16) = 1;
      v31 = *(unsigned __int16 *)(a2 + 1640);
      if ((_DWORD)v31 == 0xFFFF)
      {
        v32 = *(__int16 *)(a2 + 1998);
        v31 = *(unsigned __int16 *)(a2 + 1998);
        *(_WORD *)(a2 + 1640) = v32;
        *(_WORD *)(a2 + 4 * v32 + 262) = 345;
        *(_WORD *)(a2 + 1998) = v32 + 1;
      }
      *((_QWORD *)&v908[0] + 1) = ((v31 << 48) | 0x19C840) + 64;
      v33 = *(unsigned __int16 *)(a2 + 1906);
      goto LABEL_53;
    }
    memset(v908, 0, 72);
    v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
    *(_DWORD *)(a2 + 16) = 3;
    v39 = *(unsigned __int16 *)(a2 + 1644);
    if ((_DWORD)v39 == 0xFFFF)
    {
      v40 = *(__int16 *)(a2 + 1998);
      v39 = *(unsigned __int16 *)(a2 + 1998);
      *(_WORD *)(a2 + 1644) = v40;
      *(_WORD *)(a2 + 4 * v40 + 262) = 346;
      *(_WORD *)(a2 + 1998) = v40 + 1;
    }
    *((_QWORD *)&v908[0] + 1) = ((v39 << 48) | 0x19C840) + 64;
    *(_QWORD *)&v908[1] = (gleVStateProgram_GetAttrib(a2, 2) << 48) | 0x19C800;
    v41 = *(unsigned __int16 *)(a2 + 1608);
    if ((_DWORD)v41 == 0xFFFF)
    {
      v42 = *(__int16 *)(a2 + 1998);
      v41 = *(unsigned __int16 *)(a2 + 1998);
      *(_WORD *)(a2 + 1608) = v42;
      *(_WORD *)(a2 + 4 * v42 + 262) = 337;
      *(_WORD *)(a2 + 1998) = v42 + 1;
    }
    v38 = ((v41 << 48) | 0x19C840) + 64;
  }
  *((_QWORD *)&v908[1] + 1) = v38;
  v33 = *(unsigned __int16 *)(a2 + 1906);
LABEL_53:
  if ((_DWORD)v33 == 0xFFFF)
  {
    v33 = *(unsigned __int16 *)(a2 + 2004);
    *(_WORD *)(a2 + 1906) = v33;
    *(_WORD *)(a2 + 2004) = v33 + 1;
  }
  *(_QWORD *)&v908[0] = (v33 << 48) | 0x72679000;
  (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
LABEL_56:
  v43 = *a1;
  if ((*a1 & 0x2000000000000) == 0)
    goto LABEL_66;
  memset((char *)v908 + 8, 0, 64);
  v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000A02;
  *(_DWORD *)(a2 + 16) = 2;
  v44 = *(unsigned __int16 *)(a2 + 1900);
  if (v44 == 0xFFFF)
  {
    v47 = *(unsigned __int16 *)(a2 + 2004);
    v48 = *(unsigned __int16 *)(a2 + 2004);
    *(_WORD *)(a2 + 1900) = v47;
    v49 = v48 + 1;
    *(_WORD *)(a2 + 2004) = v48 + 1;
    v46 = ((unint64_t)(unsigned __int16)v47 << 48) | 0x19C840;
    *((_QWORD *)&v908[0] + 1) = v46;
    if ((v49 & 0x10000) != 0)
    {
      v50 = *(unsigned __int16 *)(a2 + 2004);
      v51 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1900) = v50;
      *(_WORD *)(a2 + 2004) = ++v51;
      *(_QWORD *)&v908[1] = ((unint64_t)(unsigned __int16)v50 << 48) | 0x19C840;
      if ((v51 & 0x10000) != 0)
      {
        v50 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1900) = v50;
        *(_WORD *)(a2 + 2004) = v50 + 1;
      }
      v45 = v50 << 48;
      goto LABEL_65;
    }
    v45 = v47 << 48;
  }
  else
  {
    v45 = v44 << 48;
    v46 = ((unint64_t)(unsigned __int16)v44 << 48) | 0x19C840;
    *((_QWORD *)&v908[0] + 1) = v46;
  }
  *(_QWORD *)&v908[1] = v46;
LABEL_65:
  *(_QWORD *)&v908[0] = v45 | 0x72609000;
  (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
  v43 = *a1;
LABEL_66:
  v52 = BYTE4(v43);
  v885 = v23;
  if ((v43 & 0x800000000000000) != 0)
  {
    if (!BYTE4(v43))
      goto LABEL_908;
    v56 = 0;
    v57 = 0;
    do
    {
      if ((v52 & 1) != 0)
        *((_DWORD *)&v908[4] + v56++ + 2) = v57;
      ++v57;
      v58 = v52 >= 2;
      v52 >>= 1;
    }
    while (v58);
    if (!v56)
    {
LABEL_908:
      memset(v908, 0, 72);
      v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
      *(_DWORD *)(a2 + 16) = 1;
      *((_QWORD *)&v908[0] + 1) = (gleVStateProgram_GetParam(a2, 351) << 48) | 0xAA80;
      v613 = *(unsigned __int16 *)(a2 + 1908);
      if ((_DWORD)v613 == 0xFFFF)
        goto LABEL_1381;
      goto LABEL_1382;
    }
    v888 = 0;
    v59 = 0;
    v904 = (_WORD *)(a2 + 2004);
    v884 = v23 & 6;
    v60 = a2 + 1924;
    v886 = a2 + 1932;
    while (1)
    {
      v903 = (char *)&v908[4] + 4 * v59 + 8;
      v887 = v56;
      LODWORD(v61) = v56 - v59;
      v61 = v56 - v59 >= 4 ? 4 : v61;
      v893 = v59;
      v906 = v61;
      if (!(_DWORD)v61)
        break;
      v62 = 0;
      v63 = 0;
      v64 = 0;
      v65 = 0;
      v66 = *((_DWORD *)a1 + 2);
      v67 = BYTE1(v66);
      v68 = BYTE2(v66);
      do
      {
        v69 = *(_DWORD *)&v903[4 * v62];
        v65 |= ((*((_DWORD *)a1 + 2) >> v69) & 1) << v62;
        v64 |= ((v67 >> v69) & 1) << v62;
        v63 |= ((v68 >> v69) & 1) << v62++;
      }
      while (v62 < v906);
      v890 = (~v65 & 0xF) == 0;
      v897 = ~v65 & 0xF;
      if (v897)
      {
        v70 = 0;
        do
        {
          if (((v897 >> v70) & 1) != 0)
          {
            v71 = *(_DWORD *)&v903[4 * v70];
            memset(v908, 0, 72);
            v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
            *(_DWORD *)(a2 + 16) = 1;
            *((_QWORD *)&v908[0] + 1) = ((gleVStateProgram_GetParam(a2, v71 + 320) << 48) | 0x19C840) + 64;
            v72 = a2 + 2 * v70;
            v73 = *(unsigned __int16 *)(v72 + 1924);
            if ((_DWORD)v73 == 0xFFFF)
            {
              v73 = (unsigned __int16)*v904;
              *(_WORD *)(v72 + 1924) = v73;
              *v904 = v73 + 1;
            }
            *(_QWORD *)&v908[0] = (v73 << 48) | 0x72679000;
            (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
          }
          ++v70;
        }
        while (v70 < v906);
        v60 = a2 + 1924;
      }
      else
      {
        v897 = 0;
      }
      v895 = v63 & v65;
      v899 = v63 & v65 | v64;
      if (v65)
      {
        v74 = 0;
        do
        {
          if (((v65 >> v74) & 1) != 0)
          {
            v75 = *(_DWORD *)&v903[4 * v74];
            memset(v908, 0, 72);
            v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x31000007C2;
            *(_DWORD *)(a2 + 16) = 2;
            *((_QWORD *)&v908[0] + 1) = ((gleVStateProgram_GetParam(a2, v75 + 320) << 48) | 0x19C840) + 64;
            v76 = *(unsigned __int16 *)(a2 + 1900);
            if ((_DWORD)v76 == 0xFFFF)
            {
              v76 = *(unsigned __int16 *)(a2 + 2004);
              *(_WORD *)(a2 + 1900) = v76;
              *(_WORD *)(a2 + 2004) = v76 + 1;
            }
            *(_QWORD *)&v908[1] = (v76 << 48) | 0x19C840;
            v77 = a2 + 2 * v74;
            v78 = *(unsigned __int16 *)(v77 + 1924);
            if ((_DWORD)v78 == 0xFFFF)
            {
              v78 = (unsigned __int16)*v904;
              *(_WORD *)(v77 + 1924) = v78;
              *v904 = v78 + 1;
            }
            *(_QWORD *)&v908[0] = (v78 << 48) | 0x72679000;
            (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
          }
          ++v74;
        }
        while (v74 < v906);
        v79 = 0;
        v80 = 0;
        do
        {
          if (((v65 >> v79) & 1) != 0)
          {
            memset(v908, 0, 72);
            v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000A02;
            *(_DWORD *)(a2 + 16) = 2;
            v81 = *(unsigned __int16 *)(v60 + 2 * v79);
            if (v81 == 0xFFFF)
            {
              v82 = (unsigned __int16)*v904;
              *(_WORD *)(v60 + 2 * v79) = v82;
              *v904 = v82 + 1;
              v81 = *(unsigned __int16 *)(v60 + 2 * v79);
              *((_QWORD *)&v908[0] + 1) = (v82 << 48) | 0x19C840;
              if ((_DWORD)v81 == 0xFFFF)
              {
                v81 = (unsigned __int16)*v904;
                *(_WORD *)(v60 + 2 * v79) = v81;
                *v904 = v81 + 1;
              }
            }
            else
            {
              *((_QWORD *)&v908[0] + 1) = (v81 << 48) | 0x19C840;
            }
            *(_QWORD *)&v908[1] = (v81 << 48) | 0x19C840;
            v83 = *(unsigned __int16 *)(a2 + 1946);
            if (v80)
            {
              if ((_DWORD)v83 == 0xFFFF)
              {
                v83 = *(unsigned __int16 *)(a2 + 2004);
                *(_WORD *)(a2 + 1946) = v83;
                *(_WORD *)(a2 + 2004) = v83 + 1;
              }
              v84 = ((unint64_t)(v79 == 1) << 17) | (v83 << 48) | ((unint64_t)(v79 == 2) << 16) | ((unint64_t)(v79 == 3) << 15) | 0x72601000;
            }
            else
            {
              if ((_DWORD)v83 == 0xFFFF)
              {
                v83 = *(unsigned __int16 *)(a2 + 2004);
                *(_WORD *)(a2 + 1946) = v83;
                *(_WORD *)(a2 + 2004) = v83 + 1;
              }
              v84 = (v83 << 48) | 0x72679000;
            }
            *(_QWORD *)&v908[0] = v84;
            (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
            v80 = 1;
          }
          ++v79;
        }
        while (v79 < v906);
        v894 = 0;
      }
      else
      {
        v894 = 1;
      }
      v59 = v893;
      if (!v893)
        goto LABEL_121;
LABEL_128:
      if ((v894 & 1) == 0)
      {
        memset(&v908[1], 0, 56);
        v90 = 8 * (*(_DWORD *)(a2 + 16) & 7);
        *(_DWORD *)(a2 + 16) = 1;
        v907 = v90 | 0x3100080341;
        v91 = *(unsigned __int16 *)(a2 + 1946);
        if ((_DWORD)v91 == 0xFFFF)
        {
          v91 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1946) = v91;
          *(_WORD *)(a2 + 2004) = v91 + 1;
        }
        *((_QWORD *)&v908[0] + 1) = (v91 << 48) | 0x19C840;
        v92 = *(unsigned __int16 *)(a2 + 1954);
        if ((_DWORD)v92 == 0xFFFF)
        {
          v92 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1954) = v92;
          *(_WORD *)(a2 + 2004) = v92 + 1;
        }
        *(_QWORD *)&v908[0] = (v92 << 48) | 0x72679000;
        (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
      }
      if (!v59 && (*a1 & 0x2000000000000) != 0)
      {
        memset((char *)v908 + 8, 0, 64);
        v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
        *(_DWORD *)(a2 + 16) = 2;
        v93 = *(unsigned __int16 *)(a2 + 1900);
        if (v93 == 0xFFFF)
        {
          v95 = *(unsigned __int16 *)(a2 + 2004);
          v96 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1900) = v95;
          *(_WORD *)(a2 + 2004) = ++v96;
          *((_QWORD *)&v908[0] + 1) = ((unint64_t)(unsigned __int16)v95 << 48) | 0x19C840;
          if ((v96 & 0x10000) != 0)
          {
            v95 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1900) = v95;
            *(_WORD *)(a2 + 2004) = v95 + 1;
          }
          v94 = v95 << 48;
        }
        else
        {
          v94 = v93 << 48;
          *((_QWORD *)&v908[0] + 1) = ((unint64_t)(unsigned __int16)v93 << 48) | 0x19C840;
        }
        *(_QWORD *)&v908[1] = v94 | 0x1FE40;
        v97 = *(unsigned __int16 *)(a2 + 1942);
        if ((_DWORD)v97 == 0xFFFF)
        {
          v97 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1942) = v97;
          *(_WORD *)(a2 + 2004) = v97 + 1;
        }
        *(_QWORD *)&v908[0] = (v97 << 48) | 0x72679000;
        (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
      }
      if ((v894 & 1) == 0)
      {
        if ((_DWORD)v906)
        {
          v98 = 0;
          v99 = 0;
          v100 = 0;
          v101 = 0;
          v102 = 0;
          do
          {
            if (((v65 >> v102) & 1) != 0)
            {
              memset((char *)&v908[1] + 8, 0, 48);
              v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
              *(_DWORD *)(a2 + 16) = 2;
              v103 = a2 + 2 * v102;
              v104 = *(unsigned __int16 *)(v103 + 1924);
              if ((_DWORD)v104 == 0xFFFF)
              {
                v104 = (unsigned __int16)*v904;
                *(_WORD *)(v103 + 1924) = v104;
                *v904 = v104 + 1;
              }
              *((_QWORD *)&v908[0] + 1) = (v104 << 48) | 0x19C840;
              v105 = *(unsigned __int16 *)(a2 + 1954);
              if ((_DWORD)v105 == 0xFFFF)
              {
                v105 = *(unsigned __int16 *)(a2 + 2004);
                *(_WORD *)(a2 + 1954) = v105;
                *(_WORD *)(a2 + 2004) = v105 + 1;
              }
              *(_QWORD *)&v908[1] = v98 | (v105 << 48) | v99 | v100 | v101 | 0x40;
              v106 = *(unsigned __int16 *)(v103 + 1924);
              if ((_DWORD)v106 == 0xFFFF)
              {
                v106 = (unsigned __int16)*v904;
                *(_WORD *)(v103 + 1924) = v106;
                *v904 = v106 + 1;
              }
              *(_QWORD *)&v908[0] = (v106 << 48) | 0x72679000;
              (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
            }
            ++v102;
            v101 += 0x8000;
            v100 += 0x2000;
            v99 += 2048;
            v98 += 512;
          }
          while (v102 < v906);
        }
        v60 = a2 + 1924;
        if (v895)
        {
          memset((char *)&v908[1] + 8, 0, 48);
          v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
          *(_DWORD *)(a2 + 16) = 2;
          v107 = *(unsigned __int16 *)(a2 + 1946);
          if ((_DWORD)v107 == 0xFFFF)
          {
            v107 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1946) = v107;
            *(_WORD *)(a2 + 2004) = v107 + 1;
          }
          *((_QWORD *)&v908[0] + 1) = ((unint64_t)(unsigned __int16)v107 << 48) | 0x19C840;
          v108 = *(unsigned __int16 *)(a2 + 1954);
          if ((_DWORD)v108 == 0xFFFF)
          {
            v108 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1954) = v108;
            *(_WORD *)(a2 + 2004) = v108 + 1;
          }
          *(_QWORD *)&v908[1] = (v108 << 48) | 0x19C840;
          if ((_DWORD)v107 == 0xFFFF)
          {
            v107 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1946) = v107;
            *(_WORD *)(a2 + 2004) = v107 + 1;
          }
          *(_QWORD *)&v908[0] = (v107 << 48) | 0x72679000;
          (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
          if ((_DWORD)v906)
          {
            v109 = 0;
            v110 = 0;
            do
            {
              if (((v895 >> v109) & 1) != 0)
              {
                v111 = *(_DWORD *)&v903[4 * v109];
                memset(v908, 0, 72);
                v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
                *(_DWORD *)(a2 + 16) = 1;
                v112 = v111 + 312;
                *((_QWORD *)&v908[0] + 1) = ((gleVStateProgram_GetParam(a2, v111 + 312) << 48) | 0x15440) + 64;
                v113 = *(unsigned __int16 *)(a2 + 1954);
                if (v110)
                {
                  if ((_DWORD)v113 == 0xFFFF)
                  {
                    v113 = *(unsigned __int16 *)(a2 + 2004);
                    *(_WORD *)(a2 + 1954) = v113;
                    *(_WORD *)(a2 + 2004) = v113 + 1;
                  }
                  v114 = ((unint64_t)(v109 == 1) << 17) | (v113 << 48) | ((unint64_t)(v109 == 2) << 16) | ((unint64_t)(v109 == 3) << 15) | 0x72601000;
                }
                else
                {
                  if ((_DWORD)v113 == 0xFFFF)
                  {
                    v113 = *(unsigned __int16 *)(a2 + 2004);
                    *(_WORD *)(a2 + 1954) = v113;
                    *(_WORD *)(a2 + 2004) = v113 + 1;
                  }
                  v114 = (v113 << 48) | 0x72679000;
                }
                *(_QWORD *)&v908[0] = v114;
                (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
                memset(v908, 0, 72);
                v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
                *(_DWORD *)(a2 + 16) = 1;
                *((_QWORD *)&v908[0] + 1) = (gleVStateProgram_GetParam(a2, v112) << 48) | 0xAA80;
                v115 = *(unsigned __int16 *)(a2 + 1962);
                if (v110)
                {
                  if ((_DWORD)v115 == 0xFFFF)
                  {
                    v115 = *(unsigned __int16 *)(a2 + 2004);
                    *(_WORD *)(a2 + 1962) = v115;
                    *(_WORD *)(a2 + 2004) = v115 + 1;
                  }
                  v116 = ((unint64_t)(v109 == 1) << 17) | (v115 << 48) | ((unint64_t)(v109 == 2) << 16) | ((unint64_t)(v109 == 3) << 15) | 0x72601000;
                }
                else
                {
                  if ((_DWORD)v115 == 0xFFFF)
                  {
                    v115 = *(unsigned __int16 *)(a2 + 2004);
                    *(_WORD *)(a2 + 1962) = v115;
                    *(_WORD *)(a2 + 2004) = v115 + 1;
                  }
                  v116 = (v115 << 48) | 0x72679000;
                }
                *(_QWORD *)&v908[0] = v116;
                (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
                memset(v908, 0, 72);
                v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
                *(_DWORD *)(a2 + 16) = 1;
                *((_QWORD *)&v908[0] + 1) = (gleVStateProgram_GetParam(a2, v112) << 48) | 0x80;
                v117 = *(unsigned __int16 *)(a2 + 1970);
                if (v110)
                {
                  if ((_DWORD)v117 == 0xFFFF)
                  {
                    v117 = *(unsigned __int16 *)(a2 + 2004);
                    *(_WORD *)(a2 + 1970) = v117;
                    *(_WORD *)(a2 + 2004) = v117 + 1;
                  }
                  v118 = ((unint64_t)(v109 == 1) << 17) | (v117 << 48) | ((unint64_t)(v109 == 2) << 16) | ((unint64_t)(v109 == 3) << 15) | 0x72601000;
                }
                else
                {
                  if ((_DWORD)v117 == 0xFFFF)
                  {
                    v117 = *(unsigned __int16 *)(a2 + 2004);
                    *(_WORD *)(a2 + 1970) = v117;
                    *(_WORD *)(a2 + 2004) = v117 + 1;
                  }
                  v118 = (v117 << 48) | 0x72679000;
                }
                *(_QWORD *)&v908[0] = v118;
                (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
                v110 = 1;
              }
              ++v109;
            }
            while (v109 < v906);
          }
          memset(v908, 0, 72);
          v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
          *(_DWORD *)(a2 + 16) = 3;
          v119 = *(unsigned __int16 *)(a2 + 1946);
          if ((_DWORD)v119 == 0xFFFF)
          {
            v119 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1946) = v119;
            *(_WORD *)(a2 + 2004) = v119 + 1;
          }
          *((_QWORD *)&v908[0] + 1) = (v119 << 48) | 0x19C840;
          v120 = *(unsigned __int16 *)(a2 + 1954);
          v60 = a2 + 1924;
          if ((_DWORD)v120 == 0xFFFF)
          {
            v120 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1954) = v120;
            *(_WORD *)(a2 + 2004) = v120 + 1;
          }
          *(_QWORD *)&v908[1] = ((unint64_t)(unsigned __int16)v120 << 48) | 0x19C840;
          v121 = *(unsigned __int16 *)(a2 + 1962);
          if ((_DWORD)v121 == 0xFFFF)
          {
            v121 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1962) = v121;
            *(_WORD *)(a2 + 2004) = v121 + 1;
          }
          *((_QWORD *)&v908[1] + 1) = (v121 << 48) | 0x19C840;
          if ((_DWORD)v120 == 0xFFFF)
          {
            v120 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1954) = v120;
            *(_WORD *)(a2 + 2004) = v120 + 1;
          }
          *(_QWORD *)&v908[0] = (v120 << 48) | 0x72679000;
          (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
          memset(v908, 0, 72);
          v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
          *(_DWORD *)(a2 + 16) = 3;
          v122 = *(unsigned __int16 *)(a2 + 1946);
          if ((_DWORD)v122 == 0xFFFF)
          {
            v122 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1946) = v122;
            *(_WORD *)(a2 + 2004) = v122 + 1;
          }
          *((_QWORD *)&v908[0] + 1) = (v122 << 48) | 0x19C840;
          v123 = *(unsigned __int16 *)(a2 + 1954);
          if ((_DWORD)v123 == 0xFFFF)
          {
            v123 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1954) = v123;
            *(_WORD *)(a2 + 2004) = v123 + 1;
          }
          *(_QWORD *)&v908[1] = (v123 << 48) | 0x19C840;
          v124 = *(unsigned __int16 *)(a2 + 1970);
          if ((_DWORD)v124 == 0xFFFF)
          {
            v124 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1970) = v124;
            *(_WORD *)(a2 + 2004) = v124 + 1;
          }
          *((_QWORD *)&v908[1] + 1) = (v124 << 48) | 0x19C840;
          v125 = *(unsigned __int16 *)(a2 + 1940);
          if ((_DWORD)v125 == 0xFFFF)
          {
            v125 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1940) = v125;
            *(_WORD *)(a2 + 2004) = v125 + 1;
          }
          *(_QWORD *)&v908[0] = (v125 << 48) | 0x72679000;
          (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
          memset((char *)v908 + 8, 0, 64);
          v126 = *(_DWORD *)(a2 + 16);
          *(_DWORD *)(a2 + 16) = 1;
          v907 = (8 * (v126 & 7)) | 0x3100100381;
          v127 = *(unsigned __int16 *)(a2 + 1940);
          if (v127 == 0xFFFF)
          {
            v129 = *(unsigned __int16 *)(a2 + 2004);
            v130 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1940) = v129;
            *(_WORD *)(a2 + 2004) = ++v130;
            *((_QWORD *)&v908[0] + 1) = ((unint64_t)(unsigned __int16)v129 << 48) | 0x19C840;
            if ((v130 & 0x10000) != 0)
            {
              v129 = *(unsigned __int16 *)(a2 + 2004);
              *(_WORD *)(a2 + 1940) = v129;
              *(_WORD *)(a2 + 2004) = v129 + 1;
            }
            v128 = v129 << 48;
          }
          else
          {
            v128 = v127 << 48;
            *((_QWORD *)&v908[0] + 1) = ((unint64_t)(unsigned __int16)v127 << 48) | 0x19C840;
          }
          *(_QWORD *)&v908[0] = v128 | 0x72679000;
          (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
        }
      }
      if ((_DWORD)v906)
      {
        v131 = 0;
        v132 = 1;
        do
        {
          memset(v908, 0, 72);
          v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000A02;
          *(_DWORD *)(a2 + 16) = 2;
          v133 = *(unsigned __int16 *)(a2 + 1902);
          if ((_DWORD)v133 == 0xFFFF)
          {
            v133 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1902) = v133;
            *(_WORD *)(a2 + 2004) = v133 + 1;
          }
          *((_QWORD *)&v908[0] + 1) = (v133 << 48) | 0x19C840;
          v134 = *(unsigned __int16 *)(v60 + 2 * v131);
          if ((_DWORD)v134 == 0xFFFF)
          {
            v134 = (unsigned __int16)*v904;
            *(_WORD *)(v60 + 2 * v131) = v134;
            *v904 = v134 + 1;
          }
          *(_QWORD *)&v908[1] = (v134 << 48) | 0x19C840;
          v135 = *(unsigned __int16 *)(a2 + 1920);
          if ((v132 & 1) != 0)
          {
            if ((_DWORD)v135 == 0xFFFF)
            {
              v135 = *(unsigned __int16 *)(a2 + 2004);
              *(_WORD *)(a2 + 1920) = v135;
              *(_WORD *)(a2 + 2004) = v135 + 1;
            }
            v136 = (v135 << 48) | 0x72679000;
          }
          else
          {
            if ((_DWORD)v135 == 0xFFFF)
            {
              v135 = *(unsigned __int16 *)(a2 + 2004);
              *(_WORD *)(a2 + 1920) = v135;
              *(_WORD *)(a2 + 2004) = v135 + 1;
            }
            v136 = ((unint64_t)(v131 == 1) << 17) | (v135 << 48) | ((unint64_t)(v131 == 2) << 16) | ((unint64_t)(v131 == 3) << 15) | 0x72601000;
          }
          *(_QWORD *)&v908[0] = v136;
          (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
          v132 = 0;
          ++v131;
        }
        while (v131 < v906);
        if (!v64)
          goto LABEL_300;
        v137 = 0;
        v138 = 0;
        do
        {
          if (((v64 >> v137) & 1) != 0)
          {
            v139 = *(_DWORD *)&v903[4 * v137];
            memset(v908, 0, 72);
            v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000A02;
            *(_DWORD *)(a2 + 16) = 2;
            *((_QWORD *)&v908[0] + 1) = ((gleVStateProgram_GetParam(a2, v139 + 328) << 48) | 0x19C840) + 64;
            v140 = *(unsigned __int16 *)(v60 + 2 * v137);
            if ((_DWORD)v140 == 0xFFFF)
            {
              v140 = (unsigned __int16)*v904;
              *(_WORD *)(v60 + 2 * v137) = v140;
              *v904 = v140 + 1;
            }
            *(_QWORD *)&v908[1] = ((v140 << 48) | 0x19C840) + 16;
            v141 = *(unsigned __int16 *)(a2 + 1954);
            if (v138)
            {
              if ((_DWORD)v141 == 0xFFFF)
              {
                v141 = *(unsigned __int16 *)(a2 + 2004);
                *(_WORD *)(a2 + 1954) = v141;
                *(_WORD *)(a2 + 2004) = v141 + 1;
              }
              v142 = ((unint64_t)(v137 == 1) << 17) | (v141 << 48) | ((unint64_t)(v137 == 2) << 16) | ((unint64_t)(v137 == 3) << 15) | 0x72601000;
            }
            else
            {
              if ((_DWORD)v141 == 0xFFFF)
              {
                v141 = *(unsigned __int16 *)(a2 + 2004);
                *(_WORD *)(a2 + 1954) = v141;
                *(_WORD *)(a2 + 2004) = v141 + 1;
              }
              v142 = (v141 << 48) | 0x72679000;
            }
            *(_QWORD *)&v908[0] = v142;
            (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
            v138 = 1;
          }
          ++v137;
        }
        while (v137 < v906);
        v143 = 0;
        v144 = 0;
        v145 = v906;
        do
        {
          if (((v64 >> v143) & 1) != 0)
          {
            v146 = *(_DWORD *)&v903[4 * v143];
            memset(v908, 0, 72);
            v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
            *(_DWORD *)(a2 + 16) = 1;
            *((_QWORD *)&v908[0] + 1) = ((gleVStateProgram_GetParam(a2, v146 + 296) << 48) | 0x1FE40) + 64;
            v147 = *(unsigned __int16 *)(a2 + 1946);
            if (v144)
            {
              if ((_DWORD)v147 == 0xFFFF)
              {
                v147 = *(unsigned __int16 *)(a2 + 2004);
                *(_WORD *)(a2 + 1946) = v147;
                *(_WORD *)(a2 + 2004) = v147 + 1;
              }
              v148 = ((unint64_t)(v143 == 1) << 17) | (v147 << 48) | ((unint64_t)(v143 == 2) << 16) | ((unint64_t)(v143 == 3) << 15) | 0x72601000;
            }
            else
            {
              if ((_DWORD)v147 == 0xFFFF)
              {
                v147 = *(unsigned __int16 *)(a2 + 2004);
                *(_WORD *)(a2 + 1946) = v147;
                *(_WORD *)(a2 + 2004) = v147 + 1;
              }
              v148 = (v147 << 48) | 0x72679000;
            }
            *(_QWORD *)&v908[0] = v148;
            (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
            memset(v908, 0, 72);
            v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
            *(_DWORD *)(a2 + 16) = 1;
            *((_QWORD *)&v908[0] + 1) = ((gleVStateProgram_GetParam(a2, v146 + 312) << 48) | 0x1FE40) + 64;
            v149 = *(unsigned __int16 *)(a2 + 1962);
            v145 = v906;
            if (v144)
            {
              if ((_DWORD)v149 == 0xFFFF)
              {
                v149 = *(unsigned __int16 *)(a2 + 2004);
                *(_WORD *)(a2 + 1962) = v149;
                *(_WORD *)(a2 + 2004) = v149 + 1;
              }
              v150 = ((unint64_t)(v143 == 1) << 17) | (v149 << 48) | ((unint64_t)(v143 == 2) << 16) | ((unint64_t)(v143 == 3) << 15) | 0x72601000;
            }
            else
            {
              if ((_DWORD)v149 == 0xFFFF)
              {
                v149 = *(unsigned __int16 *)(a2 + 2004);
                *(_WORD *)(a2 + 1962) = v149;
                *(_WORD *)(a2 + 2004) = v149 + 1;
              }
              v150 = (v149 << 48) | 0x72679000;
            }
            *(_QWORD *)&v908[0] = v150;
            (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
            v144 = 1;
          }
          ++v143;
        }
        while (v143 < v145);
      }
      else
      {
        v151 = (_WORD *)(a2 + 1932);
        if (!v64)
        {
          v174 = v906;
          if ((*a1 & 0x400000000000000) != 0)
            goto LABEL_396;
          if ((*a1 & 0x2000000000000) == 0)
            goto LABEL_363;
          goto LABEL_412;
        }
      }
      if ((v64 & ~v895) != 0)
      {
        memset(v908, 0, 72);
        v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000C82;
        *(_DWORD *)(a2 + 16) = 2;
        v152 = *(unsigned __int16 *)(a2 + 1954);
        if ((_DWORD)v152 == 0xFFFF)
        {
          v152 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1954) = v152;
          *(_WORD *)(a2 + 2004) = v152 + 1;
        }
        *((_QWORD *)&v908[0] + 1) = (v152 << 48) | 0x19C840;
        v153 = *(unsigned __int16 *)(a2 + 1946);
        if ((_DWORD)v153 == 0xFFFF)
        {
          v153 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1946) = v153;
          *(_WORD *)(a2 + 2004) = v153 + 1;
        }
        *(_QWORD *)&v908[1] = (v153 << 48) | 0x19C840;
        v154 = *(unsigned __int16 *)(a2 + 1940);
        if (v894)
        {
          if ((_DWORD)v154 == 0xFFFF)
          {
            v154 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1940) = v154;
            *(_WORD *)(a2 + 2004) = v154 + 1;
          }
          v155 = (v154 << 48) | 0x72679000;
        }
        else
        {
          if ((_DWORD)v154 == 0xFFFF)
          {
            v154 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1940) = v154;
            *(_WORD *)(a2 + 2004) = v154 + 1;
          }
          v156 = vandq_s8((int8x16_t)vshlq_u32((uint32x4_t)vdupq_n_s32(v64 & ~v895), (uint32x4_t)xmmword_22D807670), (int8x16_t)xmmword_22D806230);
          *(int8x8_t *)v156.i8 = vorr_s8(*(int8x8_t *)v156.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v156, v156, 8uLL));
          v157.i64[0] = v156.u32[0];
          v157.i64[1] = v156.u32[1];
          v155 = *(_QWORD *)&vorr_s8((int8x8_t)v156.u32[0], (int8x8_t)*(_OWORD *)&vextq_s8(v157, v157, 8uLL)) | (v154 << 48) | 0x72601000;
        }
        *(_QWORD *)&v908[0] = v155;
        (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
      }
      if ((v895 & v64) != 0)
      {
        memset(v908, 0, 72);
        v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000C82;
        *(_DWORD *)(a2 + 16) = 2;
        v158 = *(unsigned __int16 *)(a2 + 1954);
        if ((_DWORD)v158 == 0xFFFF)
        {
          v158 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1954) = v158;
          *(_WORD *)(a2 + 2004) = v158 + 1;
        }
        *((_QWORD *)&v908[0] + 1) = (v158 << 48) | 0x19C840;
        v159 = *(unsigned __int16 *)(a2 + 1946);
        if (v159 == 0xFFFF)
        {
          v161 = *(unsigned __int16 *)(a2 + 2004);
          v162 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1946) = v161;
          *(_WORD *)(a2 + 2004) = ++v162;
          *(_QWORD *)&v908[1] = ((unint64_t)(unsigned __int16)v161 << 48) | 0x19C840;
          if ((v162 & 0x10000) != 0)
          {
            v161 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1946) = v161;
            *(_WORD *)(a2 + 2004) = v161 + 1;
          }
          v160 = v161 << 48;
        }
        else
        {
          v160 = v159 << 48;
          *(_QWORD *)&v908[1] = ((unint64_t)(unsigned __int16)v159 << 48) | 0x19C840;
        }
        *(_QWORD *)&v908[0] = v160 | 0x72679000;
        (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
        memset((char *)&v908[1] + 8, 0, 48);
        v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
        *(_DWORD *)(a2 + 16) = 2;
        v163 = *(unsigned __int16 *)(a2 + 1940);
        if ((_DWORD)v163 == 0xFFFF)
        {
          v163 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1940) = v163;
          *(_WORD *)(a2 + 2004) = v163 + 1;
        }
        *((_QWORD *)&v908[0] + 1) = ((unint64_t)(unsigned __int16)v163 << 48) | 0x19C840;
        v164 = *(unsigned __int16 *)(a2 + 1946);
        if ((_DWORD)v164 == 0xFFFF)
        {
          v164 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1946) = v164;
          *(_WORD *)(a2 + 2004) = v164 + 1;
        }
        *(_QWORD *)&v908[1] = (v164 << 48) | 0x19C840;
        if ((_DWORD)v163 == 0xFFFF)
        {
          v163 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1940) = v163;
          *(_WORD *)(a2 + 2004) = v163 + 1;
        }
        v165 = vandq_s8((int8x16_t)vshlq_u32((uint32x4_t)vdupq_n_s32(v895 & v64), (uint32x4_t)xmmword_22D807670), (int8x16_t)xmmword_22D806230);
        *(int8x8_t *)v165.i8 = vorr_s8(*(int8x8_t *)v165.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v165, v165, 8uLL));
        v166.i64[0] = v165.u32[0];
        v166.i64[1] = v165.u32[1];
        *(_QWORD *)&v908[0] = *(_QWORD *)&vorr_s8((int8x8_t)v165.u32[0], (int8x8_t)*(_OWORD *)&vextq_s8(v166, v166, 8uLL)) | (v163 << 48) | 0x72601000;
        (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
      }
      memset((char *)&v908[1] + 8, 0, 48);
      v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000E02;
      *(_DWORD *)(a2 + 16) = 2;
      v167 = *(unsigned __int16 *)(a2 + 1954);
      if ((_DWORD)v167 == 0xFFFF)
      {
        v167 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1954) = v167;
        *(_WORD *)(a2 + 2004) = v167 + 1;
      }
      *((_QWORD *)&v908[0] + 1) = (v167 << 48) | 0x19C840;
      v168 = *(unsigned __int16 *)(a2 + 1962);
      if ((_DWORD)v168 == 0xFFFF)
      {
        v168 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1962) = v168;
        *(_WORD *)(a2 + 2004) = v168 + 1;
      }
      *(_QWORD *)&v908[1] = (v168 << 48) | 0x19C840;
      v169 = *(unsigned __int16 *)(a2 + 1946);
      if ((_DWORD)v169 == 0xFFFF)
      {
        v169 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1946) = v169;
        *(_WORD *)(a2 + 2004) = v169 + 1;
      }
      *(_QWORD *)&v908[0] = (v169 << 48) | 0x72679000;
      (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
      memset((char *)&v908[1] + 8, 0, 48);
      v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
      *(_DWORD *)(a2 + 16) = 2;
      v170 = *(unsigned __int16 *)(a2 + 1940);
      if ((_DWORD)v170 == 0xFFFF)
      {
        v170 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1940) = v170;
        *(_WORD *)(a2 + 2004) = v170 + 1;
      }
      *((_QWORD *)&v908[0] + 1) = ((unint64_t)(unsigned __int16)v170 << 48) | 0x19C840;
      v171 = *(unsigned __int16 *)(a2 + 1946);
      if ((_DWORD)v171 == 0xFFFF)
      {
        v171 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1946) = v171;
        *(_WORD *)(a2 + 2004) = v171 + 1;
      }
      *(_QWORD *)&v908[1] = (v171 << 48) | 0x19C840;
      if ((_DWORD)v170 == 0xFFFF)
      {
        v170 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1940) = v170;
        *(_WORD *)(a2 + 2004) = v170 + 1;
      }
      v172 = vandq_s8((int8x16_t)vshlq_u32((uint32x4_t)vdupq_n_s32(v64), (uint32x4_t)xmmword_22D807670), (int8x16_t)xmmword_22D806230);
      *(int8x8_t *)v172.i8 = vorr_s8(*(int8x8_t *)v172.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v172, v172, 8uLL));
      v173.i64[0] = v172.u32[0];
      v173.i64[1] = v172.u32[1];
      *(_QWORD *)&v908[0] = *(_QWORD *)&vorr_s8((int8x8_t)v172.u32[0], (int8x8_t)*(_OWORD *)&vextq_s8(v173, v173, 8uLL)) | (v170 << 48) | 0x72601000;
      (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
LABEL_300:
      if ((*a1 & 0x400000000000000) != 0)
      {
        v151 = (_WORD *)(a2 + 1932);
        v174 = v906;
        if (!(_DWORD)v906)
        {
LABEL_396:
          if ((*a1 & 0x2000000000000) != 0)
          {
            if ((_DWORD)v174)
            {
              for (i = 0; i < v174; ++i)
              {
                memset((char *)&v908[1] + 8, 0, 48);
                v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x31000007C2;
                *(_DWORD *)(a2 + 16) = 2;
                v236 = a2 + 2 * i;
                v237 = *(unsigned __int16 *)(v236 + 1932);
                if ((_DWORD)v237 == 0xFFFF)
                {
                  v237 = (unsigned __int16)*v904;
                  *(_WORD *)(v236 + 1932) = v237;
                  *v904 = v237 + 1;
                }
                *((_QWORD *)&v908[0] + 1) = (v237 << 48) | 0x19C840;
                v238 = *(unsigned __int16 *)(v236 + 1924);
                if ((_DWORD)v238 == 0xFFFF)
                {
                  v238 = (unsigned __int16)*v904;
                  *(_WORD *)(v236 + 1924) = v238;
                  *v904 = v238 + 1;
                }
                *(_QWORD *)&v908[1] = (v238 << 48) | 0x19C840;
                v239 = *(unsigned __int16 *)(v236 + 1932);
                if ((_DWORD)v239 == 0xFFFF)
                {
                  v239 = (unsigned __int16)*v904;
                  *(_WORD *)(v236 + 1932) = v239;
                  *v904 = v239 + 1;
                }
                *(_QWORD *)&v908[0] = (v239 << 48) | 0x72679000;
                (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
              }
              v240 = 0;
              v241 = 1;
              do
              {
                memset(v908, 0, 72);
                v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000A02;
                *(_DWORD *)(a2 + 16) = 2;
                v242 = (unsigned __int16)v151[v240];
                if ((_DWORD)v242 == 0xFFFF)
                {
                  v242 = (unsigned __int16)*v904;
                  v151[v240] = v242;
                  *v904 = v242 + 1;
                }
                *((_QWORD *)&v908[0] + 1) = (v242 << 48) | 0x19C840;
                v243 = *(unsigned __int16 *)(a2 + 1942);
                if ((_DWORD)v243 == 0xFFFF)
                {
                  v243 = *(unsigned __int16 *)(a2 + 2004);
                  *(_WORD *)(a2 + 1942) = v243;
                  *(_WORD *)(a2 + 2004) = v243 + 1;
                }
                *(_QWORD *)&v908[1] = (v243 << 48) | 0x19C840;
                v244 = *(unsigned __int16 *)(a2 + 1922);
                if ((v241 & 1) != 0)
                {
                  if ((_DWORD)v244 == 0xFFFF)
                  {
                    v244 = *(unsigned __int16 *)(a2 + 2004);
                    *(_WORD *)(a2 + 1922) = v244;
                    *(_WORD *)(a2 + 2004) = v244 + 1;
                  }
                  v245 = (v244 << 48) | 0x72679000;
                }
                else
                {
                  if ((_DWORD)v244 == 0xFFFF)
                  {
                    v244 = *(unsigned __int16 *)(a2 + 2004);
                    *(_WORD *)(a2 + 1922) = v244;
                    *(_WORD *)(a2 + 2004) = v244 + 1;
                  }
                  v245 = ((unint64_t)(v240 == 1) << 17) | (v244 << 48) | ((unint64_t)(v240 == 2) << 16) | ((unint64_t)(v240 == 3) << 15) | 0x72601000;
                }
                *(_QWORD *)&v908[0] = v245;
                (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
                v241 = 0;
                ++v240;
              }
              while (v240 < v174);
            }
          }
          else if ((_DWORD)v174)
          {
            v225 = 0;
            v226 = 1;
            do
            {
              memset(v908, 0, 72);
              v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x31000007C2;
              *(_DWORD *)(a2 + 16) = 2;
              v227 = (unsigned __int16)*v151;
              if ((_DWORD)v227 == 0xFFFF)
              {
                v227 = (unsigned __int16)*v904;
                *v151 = v227;
                *v904 = v227 + 1;
              }
              *((_QWORD *)&v908[0] + 1) = (v227 << 48) | 0x15440;
              v228 = (unsigned __int16)*(v151 - 4);
              if ((_DWORD)v228 == 0xFFFF)
              {
                v228 = (unsigned __int16)*v904;
                *(v151 - 4) = v228;
                *v904 = v228 + 1;
              }
              *(_QWORD *)&v908[1] = (v228 << 48) | 0x15440;
              v229 = *(unsigned __int16 *)(a2 + 1922);
              if ((v226 & 1) != 0)
              {
                if ((_DWORD)v229 == 0xFFFF)
                {
                  v229 = *(unsigned __int16 *)(a2 + 2004);
                  *(_WORD *)(a2 + 1922) = v229;
                  *(_WORD *)(a2 + 2004) = v229 + 1;
                }
                v230 = (v229 << 48) | 0x72679000;
              }
              else
              {
                if ((_DWORD)v229 == 0xFFFF)
                {
                  v229 = *(unsigned __int16 *)(a2 + 2004);
                  *(_WORD *)(a2 + 1922) = v229;
                  *(_WORD *)(a2 + 2004) = v229 + 1;
                }
                v230 = ((unint64_t)(v225 == 1) << 17) | (v229 << 48) | ((unint64_t)(v225 == 2) << 16) | ((unint64_t)(v225 == 3) << 15) | 0x72601000;
              }
              *(_QWORD *)&v908[0] = v230;
              (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
              v226 = 0;
              ++v225;
              ++v151;
            }
            while (v225 < v174);
          }
          goto LABEL_478;
        }
        for (j = 0; j < v906; ++j)
        {
          memset((char *)&v908[1] + 8, 0, 48);
          v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000B82;
          *(_DWORD *)(a2 + 16) = 2;
          v181 = *(unsigned __int16 *)(a2 + 1902);
          if ((_DWORD)v181 == 0xFFFF)
          {
            v181 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1902) = v181;
            *(_WORD *)(a2 + 2004) = v181 + 1;
          }
          *((_QWORD *)&v908[0] + 1) = (v181 << 48) | 0x19C840;
          v182 = a2 + 2 * j;
          v183 = *(unsigned __int16 *)(v182 + 1924);
          if ((_DWORD)v183 == 0xFFFF)
          {
            v183 = (unsigned __int16)*v904;
            *(_WORD *)(v182 + 1924) = v183;
            *v904 = v183 + 1;
          }
          *(_QWORD *)&v908[1] = (v183 << 48) | 0x19C840;
          v184 = *(unsigned __int16 *)(v182 + 1932);
          if ((_DWORD)v184 == 0xFFFF)
          {
            v184 = (unsigned __int16)*v904;
            *(_WORD *)(v182 + 1932) = v184;
            *v904 = v184 + 1;
          }
          *(_QWORD *)&v908[0] = (v184 << 48) | 0x72679000;
          (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
        }
        v185 = 966;
        do
        {
          memset(v908, 0, 72);
          v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000B82;
          *(_DWORD *)(a2 + 16) = 2;
          v186 = *(unsigned __int16 *)(a2 + 1902);
          if ((_DWORD)v186 == 0xFFFF)
          {
            v186 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1902) = v186;
            *(_WORD *)(a2 + 2004) = v186 + 1;
          }
          *((_QWORD *)&v908[0] + 1) = (v186 << 48) | 0x19C840;
          v187 = *(unsigned __int16 *)(a2 + 2 * v185);
          if (v187 == 0xFFFF)
          {
            v188 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 2 * v185) = v188;
            *(_WORD *)(a2 + 2004) = v188 + 1;
            v187 = *(unsigned __int16 *)(a2 + 2 * v185);
            *(_QWORD *)&v908[1] = (v188 << 48) | 0x19C840;
            if ((_DWORD)v187 == 0xFFFF)
            {
              v187 = *(unsigned __int16 *)(a2 + 2004);
              *(_WORD *)(a2 + 2 * v185) = v187;
              *(_WORD *)(a2 + 2004) = v187 + 1;
            }
          }
          else
          {
            *(_QWORD *)&v908[1] = (v187 << 48) | 0x19C840;
          }
          *(_QWORD *)&v908[0] = (v187 << 48) | 0x72679000;
          (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
          v189 = v185 - 965;
          ++v185;
        }
        while (v189 < v906);
        v190 = 966;
        while (2)
        {
          memset((char *)v908 + 8, 0, 64);
          v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x31000007C2;
          *(_DWORD *)(a2 + 16) = 2;
          v191 = *(unsigned __int16 *)(a2 + 2 * v190);
          if (v191 != 0xFFFF)
          {
            *((_QWORD *)&v908[0] + 1) = (v191 << 48) | 0x19C840;
            goto LABEL_333;
          }
          v192 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 2 * v190) = v192;
          *(_WORD *)(a2 + 2004) = v192 + 1;
          v191 = *(unsigned __int16 *)(a2 + 2 * v190);
          *((_QWORD *)&v908[0] + 1) = (v192 << 48) | 0x19C840;
          if ((_DWORD)v191 == 0xFFFF)
          {
            v195 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 2 * v190) = v195;
            *(_WORD *)(a2 + 2004) = v195 + 1;
            v191 = *(unsigned __int16 *)(a2 + 2 * v190);
            *(_QWORD *)&v908[1] = (v195 << 48) | 0x19C840;
            v193 = v906;
            if ((_DWORD)v191 == 0xFFFF)
            {
              v191 = *(unsigned __int16 *)(a2 + 2004);
              *(_WORD *)(a2 + 2 * v190) = v191;
              *(_WORD *)(a2 + 2004) = v191 + 1;
            }
          }
          else
          {
LABEL_333:
            *(_QWORD *)&v908[1] = (v191 << 48) | 0x19C840;
            v193 = v906;
          }
          *(_QWORD *)&v908[0] = (v191 << 48) | 0x72679000;
          (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
          v194 = v190 - 965;
          ++v190;
          if (v194 >= v193)
            goto LABEL_396;
          continue;
        }
      }
      LODWORD(v174) = v906;
      if ((*a1 & 0x2000000000000) == 0)
      {
        v175 = v890;
        if (!(_DWORD)v906)
          v175 = 1;
        if ((v175 & 1) == 0)
        {
          v176 = 0;
          do
          {
            if (((v897 >> v176) & 1) != 0)
            {
              v177 = *(_DWORD *)&v903[4 * v176];
              memset(v908, 0, 72);
              v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
              *(_DWORD *)(a2 + 16) = 1;
              *((_QWORD *)&v908[0] + 1) = ((gleVStateProgram_GetParam(a2, v177 + 304) << 48) | 0x19C840) + 64;
              v178 = a2 + 2 * v176;
              v179 = *(unsigned __int16 *)(v178 + 1932);
              if ((_DWORD)v179 == 0xFFFF)
              {
                v179 = (unsigned __int16)*v904;
                *(_WORD *)(v178 + 1932) = v179;
                *v904 = v179 + 1;
              }
              *(_QWORD *)&v908[0] = (v179 << 48) | 0x72679000;
              (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
            }
            ++v176;
          }
          while (v176 < v906);
        }
LABEL_363:
        if ((v894 & 1) != 0)
          goto LABEL_464;
        memset((char *)&v908[1] + 8, 0, 48);
        v208 = 8 * (*(_DWORD *)(a2 + 16) & 7);
        *(_DWORD *)(a2 + 16) = 2;
        v907 = v208 | 0x3100011042;
        v209 = *(unsigned __int16 *)(a2 + 1904);
        if ((_DWORD)v209 == 0xFFFF)
        {
          v209 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1904) = v209;
          *(_WORD *)(a2 + 2004) = v209 + 1;
        }
        *((_QWORD *)&v908[0] + 1) = (v209 << 48) | 0x19C840;
        *(_QWORD *)&v908[1] = 2560163840;
        v210 = *(unsigned __int16 *)(a2 + 1946);
        if ((_DWORD)v210 == 0xFFFF)
        {
          v210 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1946) = v210;
          *(_WORD *)(a2 + 2004) = v210 + 1;
        }
        *(_QWORD *)&v908[0] = (v210 << 48) | 0x72679000;
        (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
        LODWORD(v174) = v906;
        if ((_DWORD)v906)
        {
          for (k = 0; k < v906; ++k)
          {
            if (((v65 >> k) & 1) != 0)
            {
              memset((char *)&v908[1] + 8, 0, 48);
              v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x31000007C2;
              *(_DWORD *)(a2 + 16) = 2;
              v212 = *(unsigned __int16 *)(a2 + 1946);
              if ((_DWORD)v212 == 0xFFFF)
              {
                v212 = *(unsigned __int16 *)(a2 + 2004);
                *(_WORD *)(a2 + 1946) = v212;
                *(_WORD *)(a2 + 2004) = v212 + 1;
              }
              *((_QWORD *)&v908[0] + 1) = (v212 << 48) | 0x19C840;
              v213 = a2 + 2 * k;
              v214 = *(unsigned __int16 *)(v213 + 1924);
              if ((_DWORD)v214 == 0xFFFF)
              {
                v214 = (unsigned __int16)*v904;
                *(_WORD *)(v213 + 1924) = v214;
                *v904 = v214 + 1;
              }
              *(_QWORD *)&v908[1] = (v214 << 48) | 0x19C840;
              v215 = *(unsigned __int16 *)(v213 + 1932);
              if ((_DWORD)v215 == 0xFFFF)
              {
                v215 = (unsigned __int16)*v904;
                *(_WORD *)(v213 + 1932) = v215;
                *v904 = v215 + 1;
              }
              *(_QWORD *)&v908[0] = (v215 << 48) | 0x72679000;
              (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
            }
          }
          v216 = 0;
          v217 = 0;
          do
          {
            if (((v65 >> v216) & 1) != 0)
            {
              memset(v908, 0, 72);
              v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000A02;
              *(_DWORD *)(a2 + 16) = 2;
              v218 = *(unsigned __int16 *)(v886 + 2 * v216);
              if (v218 == 0xFFFF)
              {
                v219 = (unsigned __int16)*v904;
                *(_WORD *)(v886 + 2 * v216) = v219;
                *v904 = v219 + 1;
                v218 = *(unsigned __int16 *)(v886 + 2 * v216);
                *((_QWORD *)&v908[0] + 1) = (v219 << 48) | 0x19C840;
                if ((_DWORD)v218 == 0xFFFF)
                {
                  v218 = (unsigned __int16)*v904;
                  *(_WORD *)(v886 + 2 * v216) = v218;
                  *v904 = v218 + 1;
                }
              }
              else
              {
                *((_QWORD *)&v908[0] + 1) = (v218 << 48) | 0x19C840;
              }
              *(_QWORD *)&v908[1] = (v218 << 48) | 0x19C840;
              v220 = *(unsigned __int16 *)(a2 + 1946);
              if (v217)
              {
                if ((_DWORD)v220 == 0xFFFF)
                {
                  v220 = *(unsigned __int16 *)(a2 + 2004);
                  *(_WORD *)(a2 + 1946) = v220;
                  *(_WORD *)(a2 + 2004) = v220 + 1;
                }
                v221 = ((unint64_t)(v216 == 1) << 17) | (v220 << 48) | ((unint64_t)(v216 == 2) << 16) | ((unint64_t)(v216 == 3) << 15) | 0x72601000;
              }
              else
              {
                if ((_DWORD)v220 == 0xFFFF)
                {
                  v220 = *(unsigned __int16 *)(a2 + 2004);
                  *(_WORD *)(a2 + 1946) = v220;
                  *(_WORD *)(a2 + 2004) = v220 + 1;
                }
                v221 = (v220 << 48) | 0x72679000;
              }
              *(_QWORD *)&v908[0] = v221;
              (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
              v217 = 1;
            }
            ++v216;
          }
          while (v216 < v906);
        }
        memset((char *)v908 + 8, 0, 64);
        v222 = 8 * (*(_DWORD *)(a2 + 16) & 7);
        *(_DWORD *)(a2 + 16) = 1;
        v907 = v222 | 0x3100080341;
        v223 = *(unsigned __int16 *)(a2 + 1946);
        if (v223 == 0xFFFF)
        {
          v257 = *(unsigned __int16 *)(a2 + 2004);
          v258 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1946) = v257;
          *(_WORD *)(a2 + 2004) = ++v258;
          *((_QWORD *)&v908[0] + 1) = ((unint64_t)(unsigned __int16)v257 << 48) | 0x19C840;
          if ((v258 & 0x10000) != 0)
          {
            v257 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1946) = v257;
            *(_WORD *)(a2 + 2004) = v257 + 1;
          }
          v224 = v257 << 48;
        }
        else
        {
          v224 = v223 << 48;
          *((_QWORD *)&v908[0] + 1) = ((unint64_t)(unsigned __int16)v223 << 48) | 0x19C840;
        }
        *(_QWORD *)&v908[0] = v224 | 0x72679000;
        (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
        if ((_DWORD)v906)
        {
          v259 = 0;
          v260 = 0;
          v261 = 0;
          v262 = 0;
          v263 = 0;
          do
          {
            if (((v65 >> v263) & 1) != 0)
            {
              memset((char *)&v908[1] + 8, 0, 48);
              v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
              *(_DWORD *)(a2 + 16) = 2;
              v264 = a2 + 2 * v263;
              v265 = *(unsigned __int16 *)(v264 + 1932);
              if ((_DWORD)v265 == 0xFFFF)
              {
                v265 = (unsigned __int16)*v904;
                *(_WORD *)(v264 + 1932) = v265;
                *v904 = v265 + 1;
              }
              *((_QWORD *)&v908[0] + 1) = (v265 << 48) | 0x19C840;
              v266 = *(unsigned __int16 *)(a2 + 1946);
              if ((_DWORD)v266 == 0xFFFF)
              {
                v266 = *(unsigned __int16 *)(a2 + 2004);
                *(_WORD *)(a2 + 1946) = v266;
                *(_WORD *)(a2 + 2004) = v266 + 1;
              }
              *(_QWORD *)&v908[1] = v259 | (v266 << 48) | v260 | v261 | v262 | 0x40;
              v267 = *(unsigned __int16 *)(v264 + 1932);
              if ((_DWORD)v267 == 0xFFFF)
              {
                v267 = (unsigned __int16)*v904;
                *(_WORD *)(v264 + 1932) = v267;
                *v904 = v267 + 1;
              }
              *(_QWORD *)&v908[0] = (v267 << 48) | 0x72679000;
              (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
            }
            ++v263;
            v262 += 0x8000;
            v261 += 0x2000;
            v260 += 2048;
            v259 += 512;
          }
          while (v263 < v906);
LABEL_464:
          LODWORD(v174) = v906;
          if ((_DWORD)v906)
          {
            v268 = 0;
            v269 = 1;
            do
            {
              memset(v908, 0, 72);
              v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000A02;
              *(_DWORD *)(a2 + 16) = 2;
              v270 = *(unsigned __int16 *)(a2 + 1902);
              if ((_DWORD)v270 == 0xFFFF)
              {
                v270 = *(unsigned __int16 *)(a2 + 2004);
                *(_WORD *)(a2 + 1902) = v270;
                *(_WORD *)(a2 + 2004) = v270 + 1;
              }
              *((_QWORD *)&v908[0] + 1) = (v270 << 48) | 0x19C840;
              v271 = *(unsigned __int16 *)(v886 + 2 * v268);
              if ((_DWORD)v271 == 0xFFFF)
              {
                v271 = (unsigned __int16)*v904;
                *(_WORD *)(v886 + 2 * v268) = v271;
                *v904 = v271 + 1;
              }
              *(_QWORD *)&v908[1] = (v271 << 48) | 0x19C840;
              v272 = *(unsigned __int16 *)(a2 + 1922);
              if ((v269 & 1) != 0)
              {
                if ((_DWORD)v272 == 0xFFFF)
                {
                  v272 = *(unsigned __int16 *)(a2 + 2004);
                  *(_WORD *)(a2 + 1922) = v272;
                  *(_WORD *)(a2 + 2004) = v272 + 1;
                }
                v273 = (v272 << 48) | 0x72679000;
              }
              else
              {
                if ((_DWORD)v272 == 0xFFFF)
                {
                  v272 = *(unsigned __int16 *)(a2 + 2004);
                  *(_WORD *)(a2 + 1922) = v272;
                  *(_WORD *)(a2 + 2004) = v272 + 1;
                }
                v273 = ((unint64_t)(v268 == 1) << 17) | (v272 << 48) | ((unint64_t)(v268 == 2) << 16) | ((unint64_t)(v268 == 3) << 15) | 0x72601000;
              }
              *(_QWORD *)&v908[0] = v273;
              (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
              v269 = 0;
              ++v268;
            }
            while (v268 < v906);
          }
          goto LABEL_478;
        }
        goto LABEL_478;
      }
      if ((_DWORD)v906)
      {
        for (m = 0; m < v906; ++m)
        {
          memset((char *)&v908[1] + 8, 0, 48);
          v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x31000007C2;
          *(_DWORD *)(a2 + 16) = 2;
          v197 = *(unsigned __int16 *)(a2 + 1942);
          if ((_DWORD)v197 == 0xFFFF)
          {
            v197 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1942) = v197;
            *(_WORD *)(a2 + 2004) = v197 + 1;
          }
          *((_QWORD *)&v908[0] + 1) = (v197 << 48) | 0x19C840;
          v198 = a2 + 2 * m;
          v199 = *(unsigned __int16 *)(v198 + 1924);
          if ((_DWORD)v199 == 0xFFFF)
          {
            v199 = (unsigned __int16)*v904;
            *(_WORD *)(v198 + 1924) = v199;
            *v904 = v199 + 1;
          }
          *(_QWORD *)&v908[1] = (v199 << 48) | 0x19C840;
          v200 = *(unsigned __int16 *)(v198 + 1932);
          if ((_DWORD)v200 == 0xFFFF)
          {
            v200 = (unsigned __int16)*v904;
            *(_WORD *)(v198 + 1932) = v200;
            *v904 = v200 + 1;
          }
          *(_QWORD *)&v908[0] = (v200 << 48) | 0x72679000;
          (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
        }
        v201 = 0;
        v202 = 1;
        do
        {
          memset(v908, 0, 72);
          v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000A02;
          *(_DWORD *)(a2 + 16) = 2;
          v203 = *(unsigned __int16 *)(v886 + 2 * v201);
          if (v203 == 0xFFFF)
          {
            v205 = (unsigned __int16)*v904;
            *(_WORD *)(v886 + 2 * v201) = v205;
            *v904 = v205 + 1;
            v203 = *(unsigned __int16 *)(v886 + 2 * v201);
            *((_QWORD *)&v908[0] + 1) = (v205 << 48) | 0x19C840;
            v204 = v906;
            if ((_DWORD)v203 == 0xFFFF)
            {
              v203 = (unsigned __int16)*v904;
              *(_WORD *)(v886 + 2 * v201) = v203;
              *v904 = v203 + 1;
            }
          }
          else
          {
            *((_QWORD *)&v908[0] + 1) = (v203 << 48) | 0x19C840;
            v204 = v906;
          }
          *(_QWORD *)&v908[1] = (v203 << 48) | 0x19C840;
          v206 = *(unsigned __int16 *)(a2 + 1946);
          if ((v202 & 1) != 0)
          {
            if ((_DWORD)v206 == 0xFFFF)
            {
              v206 = *(unsigned __int16 *)(a2 + 2004);
              *(_WORD *)(a2 + 1946) = v206;
              *(_WORD *)(a2 + 2004) = v206 + 1;
            }
            v207 = (v206 << 48) | 0x72679000;
          }
          else
          {
            if ((_DWORD)v206 == 0xFFFF)
            {
              v206 = *(unsigned __int16 *)(a2 + 2004);
              *(_WORD *)(a2 + 1946) = v206;
              *(_WORD *)(a2 + 2004) = v206 + 1;
            }
            v207 = ((unint64_t)(v201 == 1) << 17) | (v206 << 48) | ((unint64_t)(v201 == 2) << 16) | ((unint64_t)(v201 == 3) << 15) | 0x72601000;
          }
          *(_QWORD *)&v908[0] = v207;
          (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
          v202 = 0;
          ++v201;
        }
        while (v201 < v204);
      }
LABEL_412:
      memset((char *)v908 + 8, 0, 64);
      v231 = 8 * (*(_DWORD *)(a2 + 16) & 7);
      *(_DWORD *)(a2 + 16) = 1;
      v907 = v231 | 0x3100080341;
      v232 = *(unsigned __int16 *)(a2 + 1946);
      if (v232 == 0xFFFF)
      {
        v246 = *(unsigned __int16 *)(a2 + 2004);
        v247 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1946) = v246;
        *(_WORD *)(a2 + 2004) = ++v247;
        *((_QWORD *)&v908[0] + 1) = ((unint64_t)(unsigned __int16)v246 << 48) | 0x19C840;
        v234 = v174;
        if ((v247 & 0x10000) != 0)
        {
          v246 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1946) = v246;
          *(_WORD *)(a2 + 2004) = v246 + 1;
        }
        v233 = v246 << 48;
      }
      else
      {
        v233 = v232 << 48;
        *((_QWORD *)&v908[0] + 1) = ((unint64_t)(unsigned __int16)v232 << 48) | 0x19C840;
        v234 = v174;
      }
      *(_QWORD *)&v908[0] = v233 | 0x72679000;
      (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
      if (v234)
      {
        v248 = 0;
        v249 = 0;
        v250 = 0;
        v251 = 0;
        v252 = 966;
        do
        {
          memset((char *)&v908[1] + 8, 0, 48);
          v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
          *(_DWORD *)(a2 + 16) = 2;
          v253 = *(unsigned __int16 *)(a2 + 2 * v252);
          if ((_DWORD)v253 == 0xFFFF)
          {
            v253 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 2 * v252) = v253;
            *(_WORD *)(a2 + 2004) = v253 + 1;
          }
          *((_QWORD *)&v908[0] + 1) = (v253 << 48) | 0x19C840;
          v254 = *(unsigned __int16 *)(a2 + 1946);
          if ((_DWORD)v254 == 0xFFFF)
          {
            v254 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1946) = v254;
            *(_WORD *)(a2 + 2004) = v254 + 1;
          }
          *(_QWORD *)&v908[1] = v248 | (v254 << 48) | v249 | v250 | v251 | 0x40;
          v255 = *(unsigned __int16 *)(a2 + 2 * v252);
          if ((_DWORD)v255 == 0xFFFF)
          {
            v255 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 2 * v252) = v255;
            *(_WORD *)(a2 + 2004) = v255 + 1;
          }
          *(_QWORD *)&v908[0] = (v255 << 48) | 0x72679000;
          (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
          v251 += 0x8000;
          v250 += 0x2000;
          v249 += 2048;
          v248 += 512;
          v256 = v252 - 965;
          ++v252;
        }
        while (v256 < v906);
        goto LABEL_464;
      }
LABEL_478:
      if ((*a1 & 0x1000000000000) == 0)
        goto LABEL_490;
      memset(v908, 0, 72);
      v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000F83;
      *(_DWORD *)(a2 + 16) = 3;
      v274 = *(unsigned __int16 *)(a2 + 1920);
      if ((_DWORD)v274 == 0xFFFF)
      {
        v274 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1920) = v274;
        *(_WORD *)(a2 + 2004) = v274 + 1;
      }
      *((_QWORD *)&v908[0] + 1) = (v274 << 48) | 0x19C840;
      v275 = *(unsigned __int16 *)(a2 + 1922);
      if (v275 == 0xFFFF)
      {
        v277 = *(unsigned __int16 *)(a2 + 2004);
        v278 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1922) = v277;
        *(_WORD *)(a2 + 2004) = ++v278;
        *(_QWORD *)&v908[1] = (((unint64_t)(unsigned __int16)v277 << 48) | 0x19C840) + 16;
        if ((v278 & 0x10000) != 0)
        {
          v279 = *(unsigned __int16 *)(a2 + 2004);
          v280 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1922) = v279;
          *(_WORD *)(a2 + 2004) = ++v280;
          *((_QWORD *)&v908[1] + 1) = ((unint64_t)(unsigned __int16)v279 << 48) | 0x19C840;
          if ((v280 & 0x10000) != 0)
          {
            v279 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1922) = v279;
            *(_WORD *)(a2 + 2004) = v279 + 1;
          }
          v276 = v279 << 48;
          goto LABEL_489;
        }
        v276 = v277 << 48;
      }
      else
      {
        v276 = v275 << 48;
        *(_QWORD *)&v908[1] = (((unint64_t)(unsigned __int16)v275 << 48) | 0x19C840) + 16;
      }
      *((_QWORD *)&v908[1] + 1) = v276 | 0x19C840;
LABEL_489:
      *(_QWORD *)&v908[0] = v276 | 0x72679000;
      (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
LABEL_490:
      memset(v908, 0, 72);
      v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000B42;
      *(_DWORD *)(a2 + 16) = 2;
      v281 = *(unsigned __int16 *)(a2 + 1922);
      if ((_DWORD)v281 == 0xFFFF)
      {
        v281 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1922) = v281;
        *(_WORD *)(a2 + 2004) = v281 + 1;
      }
      *((_QWORD *)&v908[0] + 1) = (v281 << 48) | 0x19C840;
      *(_QWORD *)&v908[1] = (gleVStateProgram_GetParam(a2, 351) << 48) | 0xAA80;
      v282 = *(unsigned __int16 *)(a2 + 1922);
      if ((_DWORD)v282 == 0xFFFF)
      {
        v282 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1922) = v282;
        *(_WORD *)(a2 + 2004) = v282 + 1;
      }
      *(_QWORD *)&v908[0] = (v282 << 48) | 0x72679000;
      (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
      if ((*a1 & 0x1000000000000) != 0)
      {
        memset(v908, 0, 72);
        v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000F83;
        *(_DWORD *)(a2 + 16) = 3;
        v287 = *(unsigned __int16 *)(a2 + 1920);
        if ((_DWORD)v287 == 0xFFFF)
        {
          v287 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1920) = v287;
          *(_WORD *)(a2 + 2004) = v287 + 1;
        }
        *((_QWORD *)&v908[0] + 1) = (v287 << 48) | 0x19C840;
        v288 = *(unsigned __int16 *)(a2 + 1632);
        if ((_DWORD)v288 == 0xFFFF)
        {
          v289 = *(__int16 *)(a2 + 1998);
          v288 = *(unsigned __int16 *)(a2 + 1998);
          *(_WORD *)(a2 + 1632) = v289;
          *(_WORD *)(a2 + 4 * v289 + 262) = 343;
          *(_WORD *)(a2 + 1998) = v289 + 1;
        }
        *(_QWORD *)&v908[1] = (v288 << 48) | 0x80;
        v290 = *(unsigned __int16 *)(a2 + 1628);
        if ((_DWORD)v290 == 0xFFFF)
        {
          v291 = *(__int16 *)(a2 + 1998);
          v290 = *(unsigned __int16 *)(a2 + 1998);
          *(_WORD *)(a2 + 1628) = v291;
          *(_WORD *)(a2 + 4 * v291 + 262) = 342;
          *(_WORD *)(a2 + 1998) = v291 + 1;
        }
        *((_QWORD *)&v908[1] + 1) = (v290 << 48) | 0x80;
        v292 = *(unsigned __int16 *)(a2 + 1946);
        if ((_DWORD)v292 == 0xFFFF)
        {
          v292 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1946) = v292;
          *(_WORD *)(a2 + 2004) = v292 + 1;
        }
        *(_QWORD *)&v908[0] = (v292 << 48) | 0x72679000;
        (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
        memset((char *)&v908[1] + 8, 0, 48);
        v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000E02;
        *(_DWORD *)(a2 + 16) = 2;
        v284 = *(unsigned __int16 *)(a2 + 1922);
        if ((_DWORD)v284 == 0xFFFF)
        {
          v284 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1922) = v284;
          *(_WORD *)(a2 + 2004) = v284 + 1;
        }
        *((_QWORD *)&v908[0] + 1) = ((unint64_t)(unsigned __int16)v284 << 48) | 0x19C840;
        v293 = *(unsigned __int16 *)(a2 + 1946);
        if ((_DWORD)v293 == 0xFFFF)
        {
          v293 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1946) = v293;
          *(_WORD *)(a2 + 2004) = v293 + 1;
        }
        *(_QWORD *)&v908[1] = (v293 << 48) | 0x19C840;
        if ((_DWORD)v284 == 0xFFFF)
        {
          v284 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1922) = v284;
          *(_WORD *)(a2 + 2004) = v284 + 1;
        }
      }
      else
      {
        memset((char *)&v908[1] + 8, 0, 48);
        v283 = *(_DWORD *)(a2 + 16);
        *(_DWORD *)(a2 + 16) = 2;
        v907 = (8 * (v283 & 7)) | 0x100000E02;
        v284 = *(unsigned __int16 *)(a2 + 1922);
        if ((_DWORD)v284 == 0xFFFF)
        {
          v284 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1922) = v284;
          *(_WORD *)(a2 + 2004) = v284 + 1;
        }
        *((_QWORD *)&v908[0] + 1) = (v284 << 48) | 0x19C840;
        v285 = *(unsigned __int16 *)(a2 + 1628);
        if ((_DWORD)v285 == 0xFFFF)
        {
          v286 = *(__int16 *)(a2 + 1998);
          v285 = *(unsigned __int16 *)(a2 + 1998);
          *(_WORD *)(a2 + 1628) = v286;
          *(_WORD *)(a2 + 4 * v286 + 262) = 342;
          *(_WORD *)(a2 + 1998) = v286 + 1;
          v284 = *(unsigned __int16 *)(a2 + 1922);
        }
        *(_QWORD *)&v908[1] = (v285 << 48) | 0x80;
        if ((_DWORD)v284 == 0xFFFF)
        {
          v284 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1922) = v284;
          *(_WORD *)(a2 + 2004) = v284 + 1;
        }
      }
      *(_QWORD *)&v908[0] = (v284 << 48) | 0x72679000;
      (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
      memset(v908, 0, 72);
      v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000F83;
      *(_DWORD *)(a2 + 16) = 3;
      v294 = *(unsigned __int16 *)(a2 + 1920);
      if (v294 == 0xFFFF)
      {
        v296 = *(unsigned __int16 *)(a2 + 2004);
        v297 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1920) = v296;
        *(_WORD *)(a2 + 2004) = ++v297;
        *((_QWORD *)&v908[0] + 1) = (((unint64_t)(unsigned __int16)v296 << 48) | 0x19C840) + 16;
        if ((v297 & 0x10000) != 0)
        {
          v296 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1920) = v296;
          *(_WORD *)(a2 + 2004) = v296 + 1;
        }
        v295 = v296 << 48;
      }
      else
      {
        v295 = v294 << 48;
        *((_QWORD *)&v908[0] + 1) = (((unint64_t)(unsigned __int16)v294 << 48) | 0x19C840) + 16;
      }
      *(_QWORD *)&v908[1] = v295 | 0x19C840;
      *((_QWORD *)&v908[1] + 1) = (gleVStateProgram_GetParam(a2, 351) << 48) | 0xAA80;
      v298 = *(unsigned __int16 *)(a2 + 1916);
      if ((_DWORD)v298 == 0xFFFF)
      {
        v298 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1916) = v298;
        *(_WORD *)(a2 + 2004) = v298 + 1;
      }
      *(_QWORD *)&v908[0] = (v298 << 48) | 0x72679000;
      (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
      if ((*a1 & 0x1000000000000) != 0)
      {
        memset(v908, 0, 72);
        v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000F83;
        *(_DWORD *)(a2 + 16) = 3;
        v299 = *(unsigned __int16 *)(a2 + 1920);
        if (v299 == 0xFFFF)
        {
          v301 = *(unsigned __int16 *)(a2 + 2004);
          v302 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1920) = v301;
          *(_WORD *)(a2 + 2004) = ++v302;
          *((_QWORD *)&v908[0] + 1) = ((unint64_t)(unsigned __int16)v301 << 48) | 0x19C840;
          if ((v302 & 0x10000) != 0)
          {
            v301 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1920) = v301;
            *(_WORD *)(a2 + 2004) = v301 + 1;
          }
          v300 = v301 << 48;
        }
        else
        {
          v300 = v299 << 48;
          *((_QWORD *)&v908[0] + 1) = ((unint64_t)(unsigned __int16)v299 << 48) | 0x19C840;
        }
        *(_QWORD *)&v908[1] = v300 | 0x19C850;
        *((_QWORD *)&v908[1] + 1) = (gleVStateProgram_GetParam(a2, 351) << 48) | 0xAA80;
        v303 = *(unsigned __int16 *)(a2 + 1920);
        if ((_DWORD)v303 == 0xFFFF)
        {
          v303 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1920) = v303;
          *(_WORD *)(a2 + 2004) = v303 + 1;
        }
        *(_QWORD *)&v908[0] = (v303 << 48) | 0x72679000;
        (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
      }
      if ((v892 & 6) == 6)
      {
        if ((_DWORD)v174)
        {
          v304 = 0;
          do
          {
            v305 = *(_DWORD *)&v903[4 * v304];
            memset(v908, 0, 72);
            v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
            *(_DWORD *)(a2 + 16) = 2;
            v306.i64[0] = gleVStateProgram_GetParam(a2, v305 + 272);
            v306.i64[1] = gleVStateProgram_GetAttrib(a2, 2);
            *(int8x16_t *)((char *)v908 + 8) = vorrq_s8((int8x16_t)vshlq_n_s64(v306, 0x30uLL), (int8x16_t)xmmword_22D807680);
            v307 = a2 + 2 * v304;
            v308 = *(unsigned __int16 *)(v307 + 1946);
            if ((_DWORD)v308 == 0xFFFF)
            {
              v308 = (unsigned __int16)*v904;
              *(_WORD *)(v307 + 1946) = v308;
              *v904 = v308 + 1;
            }
            *(_QWORD *)&v908[0] = (v308 << 48) | 0x72679000;
            (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
            ++v304;
          }
          while (v304 < v906);
          v309 = 0;
          do
          {
            v310 = *(_DWORD *)&v903[4 * v309];
            memset(v908, 0, 72);
            v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
            *(_DWORD *)(a2 + 16) = 2;
            v311.i64[0] = gleVStateProgram_GetParam(a2, v310 + 280);
            v311.i64[1] = gleVStateProgram_GetAttrib(a2, 2);
            *(int8x16_t *)((char *)v908 + 8) = vorrq_s8((int8x16_t)vshlq_n_s64(v311, 0x30uLL), (int8x16_t)xmmword_22D807680);
            v312 = a2 + 2 * v309;
            v313 = *(unsigned __int16 *)(v312 + 1962);
            if ((_DWORD)v313 == 0xFFFF)
            {
              v313 = (unsigned __int16)*v904;
              *(_WORD *)(v312 + 1962) = v313;
              *v904 = v313 + 1;
            }
            *(_QWORD *)&v908[0] = (v313 << 48) | 0x72679000;
            (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
            ++v309;
          }
          while (v309 < v906);
          v314 = 0;
          v315 = 0;
          v316 = 0;
          v317 = 0;
          v318 = 0;
          do
          {
            memset(v908, 0, 72);
            v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
            *(_DWORD *)(a2 + 16) = 3;
            v319 = *(unsigned __int16 *)(a2 + 1916);
            if ((_DWORD)v319 == 0xFFFF)
            {
              v319 = *(unsigned __int16 *)(a2 + 2004);
              *(_WORD *)(a2 + 1916) = v319;
              *(_WORD *)(a2 + 2004) = v319 + 1;
            }
            *((_QWORD *)&v908[0] + 1) = v314 | (v319 << 48) | v315 | v316 | v317 | 0x40;
            v320 = a2 + 2 * v318;
            v321 = *(unsigned __int16 *)(v320 + 1962);
            if ((_DWORD)v321 == 0xFFFF)
            {
              v321 = (unsigned __int16)*v904;
              *(_WORD *)(v320 + 1962) = v321;
              *v904 = v321 + 1;
            }
            *(_QWORD *)&v908[1] = (v321 << 48) | 0x19C840;
            v322 = *(unsigned __int16 *)(v320 + 1946);
            if (v322 == 0xFFFF)
            {
              v323 = (unsigned __int16)*v904;
              *(_WORD *)(v320 + 1946) = v323;
              *v904 = v323 + 1;
              v322 = *(unsigned __int16 *)(v320 + 1946);
              *((_QWORD *)&v908[1] + 1) = (v323 << 48) | 0x19C840;
              if ((_DWORD)v322 == 0xFFFF)
              {
                v322 = (unsigned __int16)*v904;
                *(_WORD *)(v320 + 1946) = v322;
                *v904 = v322 + 1;
              }
            }
            else
            {
              *((_QWORD *)&v908[1] + 1) = (v322 << 48) | 0x19C840;
            }
            *(_QWORD *)&v908[0] = (v322 << 48) | 0x72679000;
            (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
            ++v318;
            v317 += 0x8000;
            v316 += 0x2000;
            v315 += 2048;
            v314 += 512;
          }
          while (v318 < v906);
        }
      }
      else if ((v892 & 2) != 0)
      {
        if ((_DWORD)v174)
        {
          v334 = 0;
          do
          {
            v335 = *(_DWORD *)&v903[4 * v334];
            memset(v908, 0, 72);
            v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
            *(_DWORD *)(a2 + 16) = 2;
            v336.i64[0] = gleVStateProgram_GetParam(a2, v335 + 272);
            v336.i64[1] = gleVStateProgram_GetAttrib(a2, 2);
            *(int8x16_t *)((char *)v908 + 8) = vorrq_s8((int8x16_t)vshlq_n_s64(v336, 0x30uLL), (int8x16_t)xmmword_22D807680);
            v337 = a2 + 2 * v334;
            v338 = *(unsigned __int16 *)(v337 + 1946);
            if ((_DWORD)v338 == 0xFFFF)
            {
              v338 = (unsigned __int16)*v904;
              *(_WORD *)(v337 + 1946) = v338;
              *v904 = v338 + 1;
            }
            *(_QWORD *)&v908[0] = (v338 << 48) | 0x72679000;
            (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
            ++v334;
          }
          while (v334 < v906);
          v339 = 0;
          v340 = 0;
          v341 = 0;
          v342 = 0;
          v343 = 0;
          do
          {
            v344 = *(_DWORD *)&v903[4 * v343];
            memset(v908, 0, 72);
            v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
            *(_DWORD *)(a2 + 16) = 3;
            v345 = *(unsigned __int16 *)(a2 + 1916);
            if ((_DWORD)v345 == 0xFFFF)
            {
              v345 = *(unsigned __int16 *)(a2 + 2004);
              *(_WORD *)(a2 + 1916) = v345;
              *(_WORD *)(a2 + 2004) = v345 + 1;
            }
            *((_QWORD *)&v908[0] + 1) = v339 | (v345 << 48) | v340 | v341 | v342 | 0x40;
            *(_QWORD *)&v908[1] = ((gleVStateProgram_GetParam(a2, 2 * v344 + 240) << 48) | 0x19C840) + 64;
            v346 = a2 + 2 * v343;
            v347 = *(unsigned __int16 *)(v346 + 1946);
            if (v347 == 0xFFFF)
            {
              v348 = (unsigned __int16)*v904;
              *(_WORD *)(v346 + 1946) = v348;
              *v904 = v348 + 1;
              v347 = *(unsigned __int16 *)(v346 + 1946);
              *((_QWORD *)&v908[1] + 1) = (v348 << 48) | 0x19C840;
              if ((_DWORD)v347 == 0xFFFF)
              {
                v347 = (unsigned __int16)*v904;
                *(_WORD *)(v346 + 1946) = v347;
                *v904 = v347 + 1;
              }
            }
            else
            {
              *((_QWORD *)&v908[1] + 1) = (v347 << 48) | 0x19C840;
            }
            *(_QWORD *)&v908[0] = (v347 << 48) | 0x72679000;
            (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
            ++v343;
            v342 += 0x8000;
            v341 += 0x2000;
            v340 += 2048;
            v339 += 512;
          }
          while (v343 < v906);
        }
      }
      else if ((v892 & 4) != 0)
      {
        if ((_DWORD)v906)
        {
          for (n = 0; n < v906; ++n)
          {
            v350 = *(_DWORD *)&v903[4 * n];
            memset(v908, 0, 72);
            v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
            *(_DWORD *)(a2 + 16) = 2;
            v351.i64[0] = gleVStateProgram_GetParam(a2, v350 + 280);
            v351.i64[1] = gleVStateProgram_GetAttrib(a2, 2);
            *(int8x16_t *)((char *)v908 + 8) = vorrq_s8((int8x16_t)vshlq_n_s64(v351, 0x30uLL), (int8x16_t)xmmword_22D807680);
            v352 = a2 + 2 * n;
            v353 = *(unsigned __int16 *)(v352 + 1962);
            if ((_DWORD)v353 == 0xFFFF)
            {
              v353 = (unsigned __int16)*v904;
              *(_WORD *)(v352 + 1962) = v353;
              *v904 = v353 + 1;
            }
            *(_QWORD *)&v908[0] = (v353 << 48) | 0x72679000;
            (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
          }
          v354 = 0;
          v355 = 0;
          v356 = 0;
          v357 = 0;
          v358 = 0;
          do
          {
            v359 = *(_DWORD *)&v903[4 * v358];
            memset(v908, 0, 72);
            v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
            *(_DWORD *)(a2 + 16) = 3;
            v360 = *(unsigned __int16 *)(a2 + 1916);
            if ((_DWORD)v360 == 0xFFFF)
            {
              v360 = *(unsigned __int16 *)(a2 + 2004);
              *(_WORD *)(a2 + 1916) = v360;
              *(_WORD *)(a2 + 2004) = v360 + 1;
            }
            *((_QWORD *)&v908[0] + 1) = v354 | (v360 << 48) | v355 | v356 | v357 | 0x40;
            v361 = a2 + 2 * v358;
            v362 = *(unsigned __int16 *)(v361 + 1962);
            if ((_DWORD)v362 == 0xFFFF)
            {
              v362 = (unsigned __int16)*v904;
              *(_WORD *)(v361 + 1962) = v362;
              *v904 = v362 + 1;
            }
            *(_QWORD *)&v908[1] = (v362 << 48) | 0x19C840;
            *((_QWORD *)&v908[1] + 1) = ((gleVStateProgram_GetParam(a2, 2 * v359 + 224) << 48) | 0x19C840) + 64;
            v363 = *(unsigned __int16 *)(v361 + 1946);
            if ((_DWORD)v363 == 0xFFFF)
            {
              v363 = (unsigned __int16)*v904;
              *(_WORD *)(v361 + 1946) = v363;
              *v904 = v363 + 1;
            }
            *(_QWORD *)&v908[0] = (v363 << 48) | 0x72679000;
            (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
            ++v358;
            v357 += 0x8000;
            v356 += 0x2000;
            v355 += 2048;
            v354 += 512;
          }
          while (v358 < v906);
        }
      }
      else if ((_DWORD)v906)
      {
        v324 = 0;
        v325 = 0;
        v326 = 0;
        v327 = 0;
        v328 = 0;
        do
        {
          v329 = *(_DWORD *)&v903[4 * v328];
          memset(v908, 0, 72);
          v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
          *(_DWORD *)(a2 + 16) = 3;
          v330 = *(unsigned __int16 *)(a2 + 1916);
          if ((_DWORD)v330 == 0xFFFF)
          {
            v330 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1916) = v330;
            *(_WORD *)(a2 + 2004) = v330 + 1;
          }
          *((_QWORD *)&v908[0] + 1) = v324 | (v330 << 48) | v325 | v326 | v327 | 0x40;
          v331 = 2 * v329;
          *(_QWORD *)&v908[1] = (gleVStateProgram_GetParam(a2, 2 * v329 + 240) << 48) | 0x19C880;
          *((_QWORD *)&v908[1] + 1) = (gleVStateProgram_GetParam(a2, v331 + 224) << 48) | 0x19C880;
          v332 = a2 + 2 * v328;
          v333 = *(unsigned __int16 *)(v332 + 1946);
          if ((_DWORD)v333 == 0xFFFF)
          {
            v333 = (unsigned __int16)*v904;
            *(_WORD *)(v332 + 1946) = v333;
            *v904 = v333 + 1;
          }
          *(_QWORD *)&v908[0] = (v333 << 48) | 0x72679000;
          (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
          ++v328;
          v327 += 0x8000;
          v326 += 0x2000;
          v325 += 2048;
          v324 += 512;
        }
        while (v328 < v906);
      }
      if ((*a1 & 0x1000000000000) != 0)
      {
        if (v884 == 6)
        {
          if ((_DWORD)v906)
          {
            for (ii = 0; ii < v906; ++ii)
            {
              v365 = *(_DWORD *)&v903[4 * ii];
              memset(v908, 0, 72);
              v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
              *(_DWORD *)(a2 + 16) = 2;
              v366.i64[0] = gleVStateProgram_GetParam(a2, v365 + 272);
              v366.i64[1] = gleVStateProgram_GetAttrib(a2, 2);
              *(int8x16_t *)((char *)v908 + 8) = vorrq_s8((int8x16_t)vshlq_n_s64(v366, 0x30uLL), (int8x16_t)xmmword_22D807680);
              v367 = a2 + 2 * ii;
              v368 = *(unsigned __int16 *)(v367 + 1954);
              if ((_DWORD)v368 == 0xFFFF)
              {
                v368 = (unsigned __int16)*v904;
                *(_WORD *)(v367 + 1954) = v368;
                *v904 = v368 + 1;
              }
              *(_QWORD *)&v908[0] = (v368 << 48) | 0x72679000;
              (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
            }
            for (jj = 0; jj < v906; ++jj)
            {
              v370 = *(_DWORD *)&v903[4 * jj];
              memset(v908, 0, 72);
              v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
              *(_DWORD *)(a2 + 16) = 2;
              v371.i64[0] = gleVStateProgram_GetParam(a2, v370 + 280);
              v371.i64[1] = gleVStateProgram_GetAttrib(a2, 2);
              *(int8x16_t *)((char *)v908 + 8) = vorrq_s8((int8x16_t)vshlq_n_s64(v371, 0x30uLL), (int8x16_t)xmmword_22D807680);
              v372 = a2 + 2 * jj;
              v373 = *(unsigned __int16 *)(v372 + 1970);
              if ((_DWORD)v373 == 0xFFFF)
              {
                v373 = (unsigned __int16)*v904;
                *(_WORD *)(v372 + 1970) = v373;
                *v904 = v373 + 1;
              }
              *(_QWORD *)&v908[0] = (v373 << 48) | 0x72679000;
              (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
            }
            v374 = 0;
            v375 = 0;
            v376 = 0;
            v377 = 0;
            v378 = 0;
            do
            {
              memset(v908, 0, 72);
              v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
              *(_DWORD *)(a2 + 16) = 3;
              v379 = *(unsigned __int16 *)(a2 + 1920);
              if ((_DWORD)v379 == 0xFFFF)
              {
                v379 = *(unsigned __int16 *)(a2 + 2004);
                *(_WORD *)(a2 + 1920) = v379;
                *(_WORD *)(a2 + 2004) = v379 + 1;
              }
              *((_QWORD *)&v908[0] + 1) = v374 | (v379 << 48) | v375 | v376 | v377 | 0x40;
              v380 = a2 + 2 * v378;
              v381 = *(unsigned __int16 *)(v380 + 1970);
              if ((_DWORD)v381 == 0xFFFF)
              {
                v381 = (unsigned __int16)*v904;
                *(_WORD *)(v380 + 1970) = v381;
                *v904 = v381 + 1;
              }
              *(_QWORD *)&v908[1] = (v381 << 48) | 0x19C840;
              v382 = *(unsigned __int16 *)(v380 + 1954);
              if (v382 == 0xFFFF)
              {
                v383 = (unsigned __int16)*v904;
                *(_WORD *)(v380 + 1954) = v383;
                *v904 = v383 + 1;
                v382 = *(unsigned __int16 *)(v380 + 1954);
                *((_QWORD *)&v908[1] + 1) = (v383 << 48) | 0x19C840;
                if ((_DWORD)v382 == 0xFFFF)
                {
                  v382 = (unsigned __int16)*v904;
                  *(_WORD *)(v380 + 1954) = v382;
                  *v904 = v382 + 1;
                }
              }
              else
              {
                *((_QWORD *)&v908[1] + 1) = (v382 << 48) | 0x19C840;
              }
              *(_QWORD *)&v908[0] = (v382 << 48) | 0x72679000;
              (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
              ++v378;
              v377 += 0x8000;
              v376 += 0x2000;
              v375 += 2048;
              v374 += 512;
            }
            while (v378 < v906);
          }
        }
        else if ((v885 & 2) != 0)
        {
          if ((_DWORD)v906)
          {
            for (kk = 0; kk < v906; ++kk)
            {
              v395 = *(_DWORD *)&v903[4 * kk];
              memset(v908, 0, 72);
              v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
              *(_DWORD *)(a2 + 16) = 2;
              v396.i64[0] = gleVStateProgram_GetParam(a2, v395 + 272);
              v396.i64[1] = gleVStateProgram_GetAttrib(a2, 2);
              *(int8x16_t *)((char *)v908 + 8) = vorrq_s8((int8x16_t)vshlq_n_s64(v396, 0x30uLL), (int8x16_t)xmmword_22D807680);
              v397 = a2 + 2 * kk;
              v398 = *(unsigned __int16 *)(v397 + 1954);
              if ((_DWORD)v398 == 0xFFFF)
              {
                v398 = (unsigned __int16)*v904;
                *(_WORD *)(v397 + 1954) = v398;
                *v904 = v398 + 1;
              }
              *(_QWORD *)&v908[0] = (v398 << 48) | 0x72679000;
              (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
            }
            v399 = 0;
            v400 = 0;
            v401 = 0;
            v402 = 0;
            v403 = 0;
            do
            {
              v404 = *(_DWORD *)&v903[4 * v403];
              memset(v908, 0, 72);
              v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
              *(_DWORD *)(a2 + 16) = 3;
              v405 = *(unsigned __int16 *)(a2 + 1920);
              if ((_DWORD)v405 == 0xFFFF)
              {
                v405 = *(unsigned __int16 *)(a2 + 2004);
                *(_WORD *)(a2 + 1920) = v405;
                *(_WORD *)(a2 + 2004) = v405 + 1;
              }
              *((_QWORD *)&v908[0] + 1) = v399 | (v405 << 48) | v400 | v401 | v402 | 0x40;
              *(_QWORD *)&v908[1] = ((gleVStateProgram_GetParam(a2, 2 * v404 + 241) << 48) | 0x19C840) + 64;
              v406 = a2 + 2 * v403;
              v407 = *(unsigned __int16 *)(v406 + 1954);
              if (v407 == 0xFFFF)
              {
                v408 = v906;
                v409 = (unsigned __int16)*v904;
                *(_WORD *)(v406 + 1954) = v409;
                *v904 = v409 + 1;
                v407 = *(unsigned __int16 *)(v406 + 1954);
                *((_QWORD *)&v908[1] + 1) = (v409 << 48) | 0x19C840;
                if ((_DWORD)v407 == 0xFFFF)
                {
                  v407 = (unsigned __int16)*v904;
                  *(_WORD *)(v406 + 1954) = v407;
                  *v904 = v407 + 1;
                }
              }
              else
              {
                *((_QWORD *)&v908[1] + 1) = (v407 << 48) | 0x19C840;
                v408 = v906;
              }
              *(_QWORD *)&v908[0] = (v407 << 48) | 0x72679000;
              (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
              ++v403;
              v402 += 0x8000;
              v401 += 0x2000;
              v400 += 2048;
              v399 += 512;
            }
            while (v403 < v408);
          }
        }
        else if ((v885 & 4) != 0)
        {
          if ((_DWORD)v906)
          {
            for (mm = 0; mm < v906; ++mm)
            {
              v411 = *(_DWORD *)&v903[4 * mm];
              memset(v908, 0, 72);
              v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
              *(_DWORD *)(a2 + 16) = 2;
              v412.i64[0] = gleVStateProgram_GetParam(a2, v411 + 280);
              v412.i64[1] = gleVStateProgram_GetAttrib(a2, 2);
              *(int8x16_t *)((char *)v908 + 8) = vorrq_s8((int8x16_t)vshlq_n_s64(v412, 0x30uLL), (int8x16_t)xmmword_22D807680);
              v413 = a2 + 2 * mm;
              v414 = *(unsigned __int16 *)(v413 + 1970);
              if ((_DWORD)v414 == 0xFFFF)
              {
                v414 = (unsigned __int16)*v904;
                *(_WORD *)(v413 + 1970) = v414;
                *v904 = v414 + 1;
              }
              *(_QWORD *)&v908[0] = (v414 << 48) | 0x72679000;
              (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
            }
            v415 = 0;
            v416 = 0;
            v417 = 0;
            v418 = 0;
            v419 = 0;
            do
            {
              v420 = *(_DWORD *)&v903[4 * v419];
              memset(v908, 0, 72);
              v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
              *(_DWORD *)(a2 + 16) = 3;
              v421 = *(unsigned __int16 *)(a2 + 1920);
              if ((_DWORD)v421 == 0xFFFF)
              {
                v421 = *(unsigned __int16 *)(a2 + 2004);
                *(_WORD *)(a2 + 1920) = v421;
                *(_WORD *)(a2 + 2004) = v421 + 1;
              }
              *((_QWORD *)&v908[0] + 1) = v415 | (v421 << 48) | v416 | v417 | v418 | 0x40;
              v422 = a2 + 2 * v419;
              v423 = *(unsigned __int16 *)(v422 + 1970);
              if ((_DWORD)v423 == 0xFFFF)
              {
                v423 = (unsigned __int16)*v904;
                *(_WORD *)(v422 + 1970) = v423;
                *v904 = v423 + 1;
              }
              *(_QWORD *)&v908[1] = (v423 << 48) | 0x19C840;
              *((_QWORD *)&v908[1] + 1) = ((gleVStateProgram_GetParam(a2, 2 * v420 + 225) << 48) | 0x19C840) + 64;
              v424 = *(unsigned __int16 *)(v422 + 1954);
              if ((_DWORD)v424 == 0xFFFF)
              {
                v424 = (unsigned __int16)*v904;
                *(_WORD *)(v422 + 1954) = v424;
                *v904 = v424 + 1;
              }
              *(_QWORD *)&v908[0] = (v424 << 48) | 0x72679000;
              (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
              ++v419;
              v418 += 0x8000;
              v417 += 0x2000;
              v416 += 2048;
              v415 += 512;
            }
            while (v419 < v906);
          }
        }
        else if ((_DWORD)v906)
        {
          v384 = 0;
          v385 = 0;
          v386 = 0;
          v387 = 0;
          v388 = 0;
          do
          {
            v389 = *(_DWORD *)&v903[4 * v388];
            memset(v908, 0, 72);
            v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
            *(_DWORD *)(a2 + 16) = 3;
            v390 = *(unsigned __int16 *)(a2 + 1920);
            if ((_DWORD)v390 == 0xFFFF)
            {
              v390 = *(unsigned __int16 *)(a2 + 2004);
              *(_WORD *)(a2 + 1920) = v390;
              *(_WORD *)(a2 + 2004) = v390 + 1;
            }
            *((_QWORD *)&v908[0] + 1) = v384 | (v390 << 48) | v385 | v386 | v387 | 0x40;
            v391 = 2 * v389;
            *(_QWORD *)&v908[1] = (gleVStateProgram_GetParam(a2, 2 * v389 + 241) << 48) | 0x19C880;
            *((_QWORD *)&v908[1] + 1) = (gleVStateProgram_GetParam(a2, v391 + 225) << 48) | 0x19C880;
            v392 = a2 + 2 * v388;
            v393 = *(unsigned __int16 *)(v392 + 1954);
            if ((_DWORD)v393 == 0xFFFF)
            {
              v393 = (unsigned __int16)*v904;
              *(_WORD *)(v392 + 1954) = v393;
              *v904 = v393 + 1;
            }
            *(_QWORD *)&v908[0] = (v393 << 48) | 0x72679000;
            (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
            ++v388;
            v387 += 0x8000;
            v386 += 0x2000;
            v385 += 2048;
            v384 += 512;
          }
          while (v388 < v906);
        }
      }
      memset(v908, 0, 72);
      v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000F83;
      *(_DWORD *)(a2 + 16) = 3;
      v425 = *(unsigned __int16 *)(a2 + 1916);
      if ((_DWORD)v425 == 0xFFFF)
      {
        v425 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1916) = v425;
        *(_WORD *)(a2 + 2004) = v425 + 1;
      }
      *((_QWORD *)&v908[0] + 1) = ((v425 << 48) | 0x19C840) + 16;
      v426 = *(unsigned __int16 *)(a2 + 1922);
      if ((_DWORD)v426 == 0xFFFF)
      {
        v426 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1922) = v426;
        *(_WORD *)(a2 + 2004) = v426 + 1;
      }
      *(_QWORD *)&v908[1] = (v426 << 48) | 0x19C840;
      *((_QWORD *)&v908[1] + 1) = (gleVStateProgram_GetParam(a2, 351) << 48) | 0xAA80;
      v427 = *(unsigned __int16 *)(a2 + 1918);
      if ((_DWORD)v427 == 0xFFFF)
      {
        v427 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1918) = v427;
        *(_WORD *)(a2 + 2004) = v427 + 1;
      }
      *(_QWORD *)&v908[0] = (v427 << 48) | 0x72679000;
      (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
      v428 = *a1;
      if ((*a1 & 0x1000000000000) != 0)
      {
        memset(v908, 0, 72);
        v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000F83;
        *(_DWORD *)(a2 + 16) = 3;
        v429 = *(unsigned __int16 *)(a2 + 1920);
        if ((_DWORD)v429 == 0xFFFF)
        {
          v429 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1920) = v429;
          *(_WORD *)(a2 + 2004) = v429 + 1;
        }
        *((_QWORD *)&v908[0] + 1) = ((v429 << 48) | 0x19C840) + 16;
        v430 = *(unsigned __int16 *)(a2 + 1922);
        if ((_DWORD)v430 == 0xFFFF)
        {
          v430 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1922) = v430;
          *(_WORD *)(a2 + 2004) = v430 + 1;
        }
        *(_QWORD *)&v908[1] = (v430 << 48) | 0x19C840;
        *((_QWORD *)&v908[1] + 1) = (gleVStateProgram_GetParam(a2, 351) << 48) | 0xAA80;
        v431 = *(unsigned __int16 *)(a2 + 1922);
        if ((_DWORD)v431 == 0xFFFF)
        {
          v431 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1922) = v431;
          *(_WORD *)(a2 + 2004) = v431 + 1;
        }
        *(_QWORD *)&v908[0] = (v431 << 48) | 0x72679000;
        (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
        v428 = *a1;
      }
      if ((v428 & 0x8000000000000000) != 0)
      {
        if (v892 >= 8)
        {
          if ((_DWORD)v906)
          {
            for (nn = 0; nn < v906; ++nn)
            {
              v467 = *(_DWORD *)&v903[4 * nn];
              memset(v908, 0, 72);
              v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
              *(_DWORD *)(a2 + 16) = 2;
              v468.i64[0] = gleVStateProgram_GetParam(a2, v467 + 288);
              v468.i64[1] = gleVStateProgram_GetAttrib(a2, 2);
              *(int8x16_t *)((char *)v908 + 8) = vorrq_s8((int8x16_t)vshlq_n_s64(v468, 0x30uLL), (int8x16_t)xmmword_22D807680);
              v469 = a2 + 2 * nn;
              v470 = *(unsigned __int16 *)(v469 + 1962);
              if ((_DWORD)v470 == 0xFFFF)
              {
                v470 = (unsigned __int16)*v904;
                *(_WORD *)(v469 + 1962) = v470;
                *v904 = v470 + 1;
              }
              *(_QWORD *)&v908[0] = (v470 << 48) | 0x72679000;
              (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
            }
            v471 = 0;
            v472 = 0;
            v473 = 0;
            v474 = 0;
            v475 = 981;
            do
            {
              memset(v908, 0, 72);
              v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
              *(_DWORD *)(a2 + 16) = 2;
              v476 = *(unsigned __int16 *)(a2 + 1918);
              if ((_DWORD)v476 == 0xFFFF)
              {
                v476 = *(unsigned __int16 *)(a2 + 2004);
                *(_WORD *)(a2 + 1918) = v476;
                *(_WORD *)(a2 + 2004) = v476 + 1;
              }
              *((_QWORD *)&v908[0] + 1) = v471 | (v476 << 48) | v472 | v473 | v474 | 0x40;
              v477 = *(unsigned __int16 *)(a2 + 2 * v475);
              if (v477 == 0xFFFF)
              {
                v478 = *(unsigned __int16 *)(a2 + 2004);
                *(_WORD *)(a2 + 2 * v475) = v478;
                *(_WORD *)(a2 + 2004) = v478 + 1;
                v477 = *(unsigned __int16 *)(a2 + 2 * v475);
                *(_QWORD *)&v908[1] = (v478 << 48) | 0x19C840;
                if ((_DWORD)v477 == 0xFFFF)
                {
                  v477 = *(unsigned __int16 *)(a2 + 2004);
                  *(_WORD *)(a2 + 2 * v475) = v477;
                  *(_WORD *)(a2 + 2004) = v477 + 1;
                }
              }
              else
              {
                *(_QWORD *)&v908[1] = (v477 << 48) | 0x19C840;
              }
              *(_QWORD *)&v908[0] = (v477 << 48) | 0x72679000;
              (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
              v474 += 0x8000;
              v473 += 0x2000;
              v472 += 2048;
              v471 += 512;
              v479 = v475 - 980;
              ++v475;
            }
            while (v479 < v906);
          }
        }
        else if ((_DWORD)v906)
        {
          v442 = 0;
          v443 = 0;
          v444 = 0;
          v445 = 0;
          v446 = 0;
          do
          {
            v447 = *(_DWORD *)&v903[4 * v446];
            memset(v908, 0, 72);
            v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
            *(_DWORD *)(a2 + 16) = 2;
            v448 = *(unsigned __int16 *)(a2 + 1918);
            if ((_DWORD)v448 == 0xFFFF)
            {
              v448 = *(unsigned __int16 *)(a2 + 2004);
              *(_WORD *)(a2 + 1918) = v448;
              *(_WORD *)(a2 + 2004) = v448 + 1;
            }
            *((_QWORD *)&v908[0] + 1) = v442 | (v448 << 48) | v443 | v444 | v445 | 0x40;
            *(_QWORD *)&v908[1] = ((gleVStateProgram_GetParam(a2, 2 * v447 + 256) << 48) | 0x19C840) + 64;
            v449 = a2 + 2 * v446;
            v450 = *(unsigned __int16 *)(v449 + 1962);
            if ((_DWORD)v450 == 0xFFFF)
            {
              v450 = (unsigned __int16)*v904;
              *(_WORD *)(v449 + 1962) = v450;
              *v904 = v450 + 1;
            }
            *(_QWORD *)&v908[0] = (v450 << 48) | 0x72679000;
            (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
            ++v446;
            v445 += 0x8000;
            v444 += 0x2000;
            v443 += 2048;
            v442 += 512;
          }
          while (v446 < v906);
        }
      }
      else if (v892 >= 8)
      {
        if ((_DWORD)v906)
        {
          for (i1 = 0; i1 < v906; ++i1)
          {
            v452 = *(_DWORD *)&v903[4 * i1];
            memset(v908, 0, 72);
            v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
            *(_DWORD *)(a2 + 16) = 2;
            v453.i64[0] = gleVStateProgram_GetParam(a2, v452 + 288);
            v453.i64[1] = gleVStateProgram_GetAttrib(a2, 2);
            *(int8x16_t *)((char *)v908 + 8) = vorrq_s8((int8x16_t)vshlq_n_s64(v453, 0x30uLL), (int8x16_t)xmmword_22D807680);
            v454 = a2 + 2 * i1;
            v455 = *(unsigned __int16 *)(v454 + 1962);
            if ((_DWORD)v455 == 0xFFFF)
            {
              v455 = (unsigned __int16)*v904;
              *(_WORD *)(v454 + 1962) = v455;
              *v904 = v455 + 1;
            }
            *(_QWORD *)&v908[0] = (v455 << 48) | 0x72679000;
            (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
          }
          v456 = 0;
          v457 = 0;
          v458 = 0;
          v459 = 0;
          v460 = 0;
          do
          {
            memset(v908, 0, 72);
            v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
            *(_DWORD *)(a2 + 16) = 3;
            v461 = *(unsigned __int16 *)(a2 + 1918);
            if ((_DWORD)v461 == 0xFFFF)
            {
              v461 = *(unsigned __int16 *)(a2 + 2004);
              *(_WORD *)(a2 + 1918) = v461;
              *(_WORD *)(a2 + 2004) = v461 + 1;
            }
            *((_QWORD *)&v908[0] + 1) = v456 | (v461 << 48) | v457 | v458 | v459 | 0x40;
            v462 = a2 + 2 * v460;
            v463 = *(unsigned __int16 *)(v462 + 1962);
            if ((_DWORD)v463 == 0xFFFF)
            {
              v463 = (unsigned __int16)*v904;
              *(_WORD *)(v462 + 1962) = v463;
              *v904 = v463 + 1;
            }
            *(_QWORD *)&v908[1] = (v463 << 48) | 0x19C840;
            v464 = *(unsigned __int16 *)(v462 + 1946);
            if (v464 == 0xFFFF)
            {
              v465 = (unsigned __int16)*v904;
              *(_WORD *)(v462 + 1946) = v465;
              *v904 = v465 + 1;
              v464 = *(unsigned __int16 *)(v462 + 1946);
              *((_QWORD *)&v908[1] + 1) = (v465 << 48) | 0x19C840;
              if ((_DWORD)v464 == 0xFFFF)
              {
                v464 = (unsigned __int16)*v904;
                *(_WORD *)(v462 + 1946) = v464;
                *v904 = v464 + 1;
              }
            }
            else
            {
              *((_QWORD *)&v908[1] + 1) = (v464 << 48) | 0x19C840;
            }
            *(_QWORD *)&v908[0] = (v464 << 48) | 0x72679000;
            (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
            ++v460;
            v459 += 0x8000;
            v458 += 0x2000;
            v457 += 2048;
            v456 += 512;
          }
          while (v460 < v906);
        }
      }
      else if ((_DWORD)v906)
      {
        v432 = 0;
        v433 = 0;
        v434 = 0;
        v435 = 0;
        v436 = 0;
        do
        {
          v437 = *(_DWORD *)&v903[4 * v436];
          memset(v908, 0, 72);
          v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
          *(_DWORD *)(a2 + 16) = 3;
          v438 = *(unsigned __int16 *)(a2 + 1918);
          if ((_DWORD)v438 == 0xFFFF)
          {
            v438 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1918) = v438;
            *(_WORD *)(a2 + 2004) = v438 + 1;
          }
          *((_QWORD *)&v908[0] + 1) = v432 | (v438 << 48) | v433 | v434 | v435 | 0x40;
          *(_QWORD *)&v908[1] = ((gleVStateProgram_GetParam(a2, 2 * v437 + 256) << 48) | 0x19C840) + 64;
          v439 = a2 + 2 * v436;
          v440 = *(unsigned __int16 *)(v439 + 1946);
          if (v440 == 0xFFFF)
          {
            v441 = (unsigned __int16)*v904;
            *(_WORD *)(v439 + 1946) = v441;
            *v904 = v441 + 1;
            v440 = *(unsigned __int16 *)(v439 + 1946);
            *((_QWORD *)&v908[1] + 1) = (v441 << 48) | 0x19C840;
            if ((_DWORD)v440 == 0xFFFF)
            {
              v440 = (unsigned __int16)*v904;
              *(_WORD *)(v439 + 1946) = v440;
              *v904 = v440 + 1;
            }
          }
          else
          {
            *((_QWORD *)&v908[1] + 1) = (v440 << 48) | 0x19C840;
          }
          *(_QWORD *)&v908[0] = (v440 << 48) | 0x72679000;
          (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
          ++v436;
          v435 += 0x8000;
          v434 += 0x2000;
          v433 += 2048;
          v432 += 512;
        }
        while (v436 < v906);
      }
      if ((*a1 & 0x1000000000000) != 0)
      {
        if ((*a1 & 0x8000000000000000) != 0)
        {
          v60 = a2 + 1924;
          if (v885 >= 8)
          {
            v480 = v906;
            if (!(_DWORD)v906)
            {
LABEL_907:
              v891 = 0;
              goto LABEL_730;
            }
            for (i2 = 0; i2 < v906; ++i2)
            {
              v600 = *(_DWORD *)&v903[4 * i2];
              memset(v908, 0, 72);
              v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
              *(_DWORD *)(a2 + 16) = 2;
              v601.i64[0] = gleVStateProgram_GetParam(a2, v600 + 288);
              v601.i64[1] = gleVStateProgram_GetAttrib(a2, 2);
              *(int8x16_t *)((char *)v908 + 8) = vorrq_s8((int8x16_t)vshlq_n_s64(v601, 0x30uLL), (int8x16_t)xmmword_22D807680);
              v602 = a2 + 2 * i2;
              v603 = *(unsigned __int16 *)(v602 + 1970);
              if ((_DWORD)v603 == 0xFFFF)
              {
                v603 = (unsigned __int16)*v904;
                *(_WORD *)(v602 + 1970) = v603;
                *v904 = v603 + 1;
              }
              *(_QWORD *)&v908[0] = (v603 << 48) | 0x72679000;
              (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
            }
            v604 = 0;
            v605 = 0;
            v606 = 0;
            v607 = 0;
            v608 = 985;
            do
            {
              memset(v908, 0, 72);
              v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
              *(_DWORD *)(a2 + 16) = 2;
              v609 = *(unsigned __int16 *)(a2 + 1922);
              if ((_DWORD)v609 == 0xFFFF)
              {
                v609 = *(unsigned __int16 *)(a2 + 2004);
                *(_WORD *)(a2 + 1922) = v609;
                *(_WORD *)(a2 + 2004) = v609 + 1;
              }
              *((_QWORD *)&v908[0] + 1) = v604 | (v609 << 48) | v605 | v606 | v607 | 0x40;
              v610 = *(unsigned __int16 *)(a2 + 2 * v608);
              if (v610 == 0xFFFF)
              {
                v611 = *(unsigned __int16 *)(a2 + 2004);
                *(_WORD *)(a2 + 2 * v608) = v611;
                *(_WORD *)(a2 + 2004) = v611 + 1;
                v610 = *(unsigned __int16 *)(a2 + 2 * v608);
                *(_QWORD *)&v908[1] = (v611 << 48) | 0x19C840;
                if ((_DWORD)v610 == 0xFFFF)
                {
                  v610 = *(unsigned __int16 *)(a2 + 2004);
                  *(_WORD *)(a2 + 2 * v608) = v610;
                  *(_WORD *)(a2 + 2004) = v610 + 1;
                }
              }
              else
              {
                *(_QWORD *)&v908[1] = (v610 << 48) | 0x19C840;
              }
              *(_QWORD *)&v908[0] = (v610 << 48) | 0x72679000;
              (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
              v607 += 0x8000;
              v606 += 0x2000;
              v605 += 2048;
              v604 += 512;
              v612 = v608 - 984;
              ++v608;
            }
            while (v612 < v906);
          }
          else
          {
            v480 = v906;
            if (!(_DWORD)v906)
            {
LABEL_906:
              v891 = 0;
              goto LABEL_730;
            }
            v565 = 0;
            v566 = 0;
            v567 = 0;
            v568 = 0;
            v569 = 0;
            v570 = v903;
            do
            {
              v571 = *(_DWORD *)&v570[4 * v569];
              memset(v908, 0, 72);
              v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
              *(_DWORD *)(a2 + 16) = 2;
              v572 = *(unsigned __int16 *)(a2 + 1922);
              if ((_DWORD)v572 == 0xFFFF)
              {
                v572 = *(unsigned __int16 *)(a2 + 2004);
                *(_WORD *)(a2 + 1922) = v572;
                *(_WORD *)(a2 + 2004) = v572 + 1;
              }
              *((_QWORD *)&v908[0] + 1) = v565 | (v572 << 48) | v566 | v567 | v568 | 0x40;
              *(_QWORD *)&v908[1] = ((gleVStateProgram_GetParam(a2, 2 * v571 + 257) << 48) | 0x19C840) + 64;
              v573 = a2 + 2 * v569;
              v574 = *(unsigned __int16 *)(v573 + 1970);
              if ((_DWORD)v574 == 0xFFFF)
              {
                v574 = (unsigned __int16)*v904;
                *(_WORD *)(v573 + 1970) = v574;
                *v904 = v574 + 1;
              }
              *(_QWORD *)&v908[0] = (v574 << 48) | 0x72679000;
              (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
              ++v569;
              v568 += 0x8000;
              v567 += 0x2000;
              v566 += 2048;
              v565 += 512;
              v570 = v903;
            }
            while (v569 < v906);
          }
        }
        else
        {
          v60 = a2 + 1924;
          if (v885 >= 8)
          {
            v480 = v906;
            if (!(_DWORD)v906)
              goto LABEL_907;
            for (i3 = 0; i3 < v906; ++i3)
            {
              v585 = *(_DWORD *)&v903[4 * i3];
              memset(v908, 0, 72);
              v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
              *(_DWORD *)(a2 + 16) = 2;
              v586.i64[0] = gleVStateProgram_GetParam(a2, v585 + 288);
              v586.i64[1] = gleVStateProgram_GetAttrib(a2, 2);
              *(int8x16_t *)((char *)v908 + 8) = vorrq_s8((int8x16_t)vshlq_n_s64(v586, 0x30uLL), (int8x16_t)xmmword_22D807680);
              v587 = a2 + 2 * i3;
              v588 = *(unsigned __int16 *)(v587 + 1970);
              if ((_DWORD)v588 == 0xFFFF)
              {
                v588 = (unsigned __int16)*v904;
                *(_WORD *)(v587 + 1970) = v588;
                *v904 = v588 + 1;
              }
              *(_QWORD *)&v908[0] = (v588 << 48) | 0x72679000;
              (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
            }
            v589 = 0;
            v590 = 0;
            v591 = 0;
            v592 = 0;
            v593 = 0;
            do
            {
              memset(v908, 0, 72);
              v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
              *(_DWORD *)(a2 + 16) = 3;
              v594 = *(unsigned __int16 *)(a2 + 1922);
              if ((_DWORD)v594 == 0xFFFF)
              {
                v594 = *(unsigned __int16 *)(a2 + 2004);
                *(_WORD *)(a2 + 1922) = v594;
                *(_WORD *)(a2 + 2004) = v594 + 1;
              }
              *((_QWORD *)&v908[0] + 1) = v589 | (v594 << 48) | v590 | v591 | v592 | 0x40;
              v595 = a2 + 2 * v593;
              v596 = *(unsigned __int16 *)(v595 + 1970);
              if ((_DWORD)v596 == 0xFFFF)
              {
                v596 = (unsigned __int16)*v904;
                *(_WORD *)(v595 + 1970) = v596;
                *v904 = v596 + 1;
              }
              *(_QWORD *)&v908[1] = (v596 << 48) | 0x19C840;
              v597 = *(unsigned __int16 *)(v595 + 1954);
              if (v597 == 0xFFFF)
              {
                v598 = (unsigned __int16)*v904;
                *(_WORD *)(v595 + 1954) = v598;
                *v904 = v598 + 1;
                v597 = *(unsigned __int16 *)(v595 + 1954);
                *((_QWORD *)&v908[1] + 1) = (v598 << 48) | 0x19C840;
                if ((_DWORD)v597 == 0xFFFF)
                {
                  v597 = (unsigned __int16)*v904;
                  *(_WORD *)(v595 + 1954) = v597;
                  *v904 = v597 + 1;
                }
              }
              else
              {
                *((_QWORD *)&v908[1] + 1) = (v597 << 48) | 0x19C840;
              }
              *(_QWORD *)&v908[0] = (v597 << 48) | 0x72679000;
              (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
              ++v593;
              v592 += 0x8000;
              v591 += 0x2000;
              v590 += 2048;
              v589 += 512;
            }
            while (v593 < v906);
          }
          else
          {
            v480 = v906;
            if (!(_DWORD)v906)
              goto LABEL_906;
            v513 = 0;
            v514 = 0;
            v515 = 0;
            v516 = 0;
            v517 = 0;
            v518 = v903;
            do
            {
              v519 = *(_DWORD *)&v518[4 * v517];
              memset(v908, 0, 72);
              v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
              *(_DWORD *)(a2 + 16) = 3;
              v520 = *(unsigned __int16 *)(a2 + 1922);
              if ((_DWORD)v520 == 0xFFFF)
              {
                v520 = *(unsigned __int16 *)(a2 + 2004);
                *(_WORD *)(a2 + 1922) = v520;
                *(_WORD *)(a2 + 2004) = v520 + 1;
              }
              *((_QWORD *)&v908[0] + 1) = v513 | (v520 << 48) | v514 | v515 | v516 | 0x40;
              *(_QWORD *)&v908[1] = ((gleVStateProgram_GetParam(a2, 2 * v519 + 257) << 48) | 0x19C840) + 64;
              v521 = a2 + 2 * v517;
              v522 = *(unsigned __int16 *)(v521 + 1954);
              if (v522 == 0xFFFF)
              {
                v523 = v906;
                v524 = (unsigned __int16)*v904;
                *(_WORD *)(v521 + 1954) = v524;
                *v904 = v524 + 1;
                v522 = *(unsigned __int16 *)(v521 + 1954);
                *((_QWORD *)&v908[1] + 1) = (v524 << 48) | 0x19C840;
                if ((_DWORD)v522 == 0xFFFF)
                {
                  v522 = (unsigned __int16)*v904;
                  *(_WORD *)(v521 + 1954) = v522;
                  *v904 = v522 + 1;
                }
              }
              else
              {
                *((_QWORD *)&v908[1] + 1) = (v522 << 48) | 0x19C840;
                v523 = v906;
              }
              *(_QWORD *)&v908[0] = (v522 << 48) | 0x72679000;
              (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
              ++v517;
              v516 += 0x8000;
              v515 += 0x2000;
              v514 += 2048;
              v513 += 512;
              v518 = v903;
            }
            while (v517 < v523);
          }
        }
      }
      v891 = 0;
      v480 = v906 != 0;
      v60 = a2 + 1924;
      if (v899 && (_DWORD)v906)
      {
        v481 = 0;
        v482 = 0;
        v483 = 0;
        v484 = 0;
        v485 = 0;
        do
        {
          if (((v899 >> v485) & 1) != 0)
          {
            memset(v908, 0, 72);
            v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
            *(_DWORD *)(a2 + 16) = 3;
            v486 = *(unsigned __int16 *)(a2 + 1940);
            if ((_DWORD)v486 == 0xFFFF)
            {
              v486 = *(unsigned __int16 *)(a2 + 2004);
              *(_WORD *)(a2 + 1940) = v486;
              *(_WORD *)(a2 + 2004) = v486 + 1;
            }
            *((_QWORD *)&v908[0] + 1) = v481 | (v486 << 48) | v482 | v483 | v484 | 0x40;
            v487 = a2 + 2 * v485;
            v488 = *(unsigned __int16 *)(v487 + 1946);
            if ((_DWORD)v488 == 0xFFFF)
            {
              v488 = (unsigned __int16)*v904;
              *(_WORD *)(v487 + 1946) = v488;
              *v904 = v488 + 1;
            }
            *(_QWORD *)&v908[1] = (v488 << 48) | 0x19C840;
            v489 = *(unsigned __int16 *)(a2 + 1904);
            if (v489 == 0xFFFF)
            {
              v491 = *(unsigned __int16 *)(a2 + 2004);
              v492 = *(unsigned __int16 *)(a2 + 2004);
              *(_WORD *)(a2 + 1904) = v491;
              *(_WORD *)(a2 + 2004) = ++v492;
              *((_QWORD *)&v908[1] + 1) = ((unint64_t)(unsigned __int16)v491 << 48) | 0x19C840;
              if ((v492 & 0x10000) != 0)
              {
                v491 = *(unsigned __int16 *)(a2 + 2004);
                *(_WORD *)(a2 + 1904) = v491;
                *(_WORD *)(a2 + 2004) = v491 + 1;
              }
              v490 = v491 << 48;
            }
            else
            {
              v490 = v489 << 48;
              *((_QWORD *)&v908[1] + 1) = ((unint64_t)(unsigned __int16)v489 << 48) | 0x19C840;
            }
            *(_QWORD *)&v908[0] = v490 | 0x72679000;
            (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
          }
          ++v485;
          v484 += 0x8000;
          v483 += 0x2000;
          v482 += 2048;
          v481 += 512;
        }
        while (v485 < v906);
        v480 = 1;
        v891 = 1;
        v60 = a2 + 1924;
      }
LABEL_730:
      v493 = ~v899 & 0xF;
      if (!v493)
        v480 = 0;
      v889 = v480;
      if (v480)
      {
        v494 = 0;
        do
        {
          if (((v493 >> v494) & 1) != 0)
          {
            memset(v908, 0, 72);
            v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x31000007C2;
            *(_DWORD *)(a2 + 16) = 2;
            v495 = a2 + 2 * v494;
            v496 = *(unsigned __int16 *)(v495 + 1946);
            if ((_DWORD)v496 == 0xFFFF)
            {
              v496 = (unsigned __int16)*v904;
              *(_WORD *)(v495 + 1946) = v496;
              *v904 = v496 + 1;
            }
            *((_QWORD *)&v908[0] + 1) = (v496 << 48) | 0x19C840;
            v497 = *(unsigned __int16 *)(a2 + 1904);
            if (v497 == 0xFFFF)
            {
              v499 = *(unsigned __int16 *)(a2 + 2004);
              v500 = *(unsigned __int16 *)(a2 + 2004);
              *(_WORD *)(a2 + 1904) = v499;
              *(_WORD *)(a2 + 2004) = ++v500;
              *(_QWORD *)&v908[1] = ((unint64_t)(unsigned __int16)v499 << 48) | 0x19C840;
              if ((v500 & 0x10000) != 0)
              {
                v499 = *(unsigned __int16 *)(a2 + 2004);
                *(_WORD *)(a2 + 1904) = v499;
                *(_WORD *)(a2 + 2004) = v499 + 1;
              }
              v498 = v499 << 48;
            }
            else
            {
              v498 = v497 << 48;
              *(_QWORD *)&v908[1] = ((unint64_t)(unsigned __int16)v497 << 48) | 0x19C840;
            }
            *(_QWORD *)&v908[0] = v498 | 0x72679000;
            (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
          }
          ++v494;
        }
        while (v494 < v906);
      }
      if ((*a1 & 0x8000000000000000) != 0)
      {
        if (v891)
        {
          v501 = 0;
          v502 = -v893;
          v503 = (_WORD *)(a2 + 2 * v502 + 1962);
          while (((v899 >> v501) & 1) == 0)
          {
LABEL_763:
            if (++v501 >= v906)
              goto LABEL_779;
          }
          if (v501 == v502)
          {
            memset((char *)&v908[1] + 8, 0, 48);
            v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
            *(_DWORD *)(a2 + 16) = 2;
            v504 = *(unsigned __int16 *)(a2 + 1940);
            if ((_DWORD)v504 == 0xFFFF)
            {
              v504 = *(unsigned __int16 *)(a2 + 2004);
              *(_WORD *)(a2 + 1940) = v504;
              *(_WORD *)(a2 + 2004) = v504 + 1;
            }
            *((_QWORD *)&v908[0] + 1) = ((unint64_t)-v893 << 9) | (v504 << 48) | ((unint64_t)-v893 << 11) | ((unint64_t)-v893 << 13) | ((unint64_t)-v893 << 15) | 0x40;
            v505 = (unsigned __int16)*v503;
            if ((_DWORD)v505 == 0xFFFF)
            {
              v505 = (unsigned __int16)*v904;
              *v503 = v505;
              *v904 = v505 + 1;
            }
            *(_QWORD *)&v908[1] = (v505 << 48) | 0x19C840;
            v506 = *(unsigned __int16 *)(a2 + 1908);
            if ((_DWORD)v506 != 0xFFFF)
              goto LABEL_755;
          }
          else
          {
            memset(v908, 0, 72);
            v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
            *(_DWORD *)(a2 + 16) = 3;
            v508 = *(unsigned __int16 *)(a2 + 1940);
            if ((_DWORD)v508 == 0xFFFF)
            {
              v508 = *(unsigned __int16 *)(a2 + 2004);
              *(_WORD *)(a2 + 1940) = v508;
              *(_WORD *)(a2 + 2004) = v508 + 1;
            }
            *((_QWORD *)&v908[0] + 1) = (v508 << 48) | (v501 << 9) | (v501 << 11) | (v501 << 13) | (v501 << 15) | 0x40;
            v509 = a2 + 2 * v501;
            v510 = *(unsigned __int16 *)(v509 + 1962);
            if ((_DWORD)v510 == 0xFFFF)
            {
              v510 = (unsigned __int16)*v904;
              *(_WORD *)(v509 + 1962) = v510;
              *v904 = v510 + 1;
            }
            *(_QWORD *)&v908[1] = (v510 << 48) | 0x19C840;
            v511 = *(unsigned __int16 *)(a2 + 1908);
            if (v511 != 0xFFFF)
            {
              v507 = v511 << 48;
              *((_QWORD *)&v908[1] + 1) = ((unint64_t)(unsigned __int16)v511 << 48) | 0x19C840;
              goto LABEL_762;
            }
            v506 = *(unsigned __int16 *)(a2 + 2004);
            v512 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1908) = v506;
            *(_WORD *)(a2 + 2004) = ++v512;
            *((_QWORD *)&v908[1] + 1) = ((unint64_t)(unsigned __int16)v506 << 48) | 0x19C840;
            if ((v512 & 0x10000) == 0)
            {
LABEL_755:
              v507 = v506 << 48;
LABEL_762:
              *(_QWORD *)&v908[0] = v507 | 0x72679000;
              (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
              goto LABEL_763;
            }
          }
          v506 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1908) = v506;
          *(_WORD *)(a2 + 2004) = v506 + 1;
          goto LABEL_755;
        }
LABEL_779:
        v60 = a2 + 1924;
        if (v889)
        {
          v525 = 0;
          v526 = (_WORD *)(a2 + 2 * -v893 + 1962);
          while (((v493 >> v525) & 1) == 0)
          {
LABEL_793:
            if (++v525 >= v906)
              goto LABEL_797;
          }
          if (v888 == v525)
          {
            memset(&v908[1], 0, 56);
            v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
            *(_DWORD *)(a2 + 16) = 1;
            v527 = (unsigned __int16)*v526;
            if ((_DWORD)v527 == 0xFFFF)
            {
              v527 = (unsigned __int16)*v904;
              *v526 = v527;
              *v904 = v527 + 1;
            }
            *((_QWORD *)&v908[0] + 1) = (v527 << 48) | 0x19C840;
            v528 = *(unsigned __int16 *)(a2 + 1908);
            if ((_DWORD)v528 == 0xFFFF)
            {
LABEL_786:
              v528 = *(unsigned __int16 *)(a2 + 2004);
              *(_WORD *)(a2 + 1908) = v528;
              *(_WORD *)(a2 + 2004) = v528 + 1;
            }
LABEL_787:
            v529 = v528 << 48;
          }
          else
          {
            memset(v908, 0, 72);
            v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x31000007C2;
            *(_DWORD *)(a2 + 16) = 2;
            v530 = a2 + 2 * v525;
            v531 = *(unsigned __int16 *)(v530 + 1962);
            if ((_DWORD)v531 == 0xFFFF)
            {
              v531 = (unsigned __int16)*v904;
              *(_WORD *)(v530 + 1962) = v531;
              *v904 = v531 + 1;
            }
            *((_QWORD *)&v908[0] + 1) = (v531 << 48) | 0x19C840;
            v532 = *(unsigned __int16 *)(a2 + 1908);
            if (v532 == 0xFFFF)
            {
              v528 = *(unsigned __int16 *)(a2 + 2004);
              v533 = *(unsigned __int16 *)(a2 + 2004);
              *(_WORD *)(a2 + 1908) = v528;
              *(_WORD *)(a2 + 2004) = ++v533;
              *(_QWORD *)&v908[1] = ((unint64_t)(unsigned __int16)v528 << 48) | 0x19C840;
              if ((v533 & 0x10000) != 0)
                goto LABEL_786;
              goto LABEL_787;
            }
            v529 = v532 << 48;
            *(_QWORD *)&v908[1] = ((unint64_t)(unsigned __int16)v532 << 48) | 0x19C840;
          }
          *(_QWORD *)&v908[0] = v529 | 0x72679000;
          (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
          goto LABEL_793;
        }
      }
LABEL_797:
      if ((*a1 & 0x1000000000000) != 0)
      {
        if (v891)
        {
          v534 = 0;
          v535 = 0;
          v536 = 0;
          v537 = 0;
          v538 = 0;
          do
          {
            if (((v899 >> v538) & 1) != 0)
            {
              memset(v908, 0, 72);
              v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
              *(_DWORD *)(a2 + 16) = 3;
              v539 = *(unsigned __int16 *)(a2 + 1940);
              if ((_DWORD)v539 == 0xFFFF)
              {
                v539 = *(unsigned __int16 *)(a2 + 2004);
                *(_WORD *)(a2 + 1940) = v539;
                *(_WORD *)(a2 + 2004) = v539 + 1;
              }
              *((_QWORD *)&v908[0] + 1) = v534 | (v539 << 48) | v535 | v536 | v537 | 0x40;
              v540 = a2 + 2 * v538;
              v541 = *(unsigned __int16 *)(v540 + 1954);
              if ((_DWORD)v541 == 0xFFFF)
              {
                v541 = (unsigned __int16)*v904;
                *(_WORD *)(v540 + 1954) = v541;
                *v904 = v541 + 1;
              }
              *(_QWORD *)&v908[1] = (v541 << 48) | 0x19C840;
              v542 = *(unsigned __int16 *)(a2 + 1906);
              if (v542 == 0xFFFF)
              {
                v544 = *(unsigned __int16 *)(a2 + 2004);
                v545 = *(unsigned __int16 *)(a2 + 2004);
                *(_WORD *)(a2 + 1906) = v544;
                *(_WORD *)(a2 + 2004) = ++v545;
                *((_QWORD *)&v908[1] + 1) = ((unint64_t)(unsigned __int16)v544 << 48) | 0x19C840;
                if ((v545 & 0x10000) != 0)
                {
                  v544 = *(unsigned __int16 *)(a2 + 2004);
                  *(_WORD *)(a2 + 1906) = v544;
                  *(_WORD *)(a2 + 2004) = v544 + 1;
                }
                v543 = v544 << 48;
              }
              else
              {
                v543 = v542 << 48;
                *((_QWORD *)&v908[1] + 1) = ((unint64_t)(unsigned __int16)v542 << 48) | 0x19C840;
              }
              *(_QWORD *)&v908[0] = v543 | 0x72679000;
              (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
            }
            ++v538;
            v537 += 0x8000;
            v536 += 0x2000;
            v535 += 2048;
            v534 += 512;
          }
          while (v538 < v906);
        }
        v60 = a2 + 1924;
        if (v889)
        {
          v546 = 0;
          do
          {
            if (((v493 >> v546) & 1) != 0)
            {
              memset(v908, 0, 72);
              v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x31000007C2;
              *(_DWORD *)(a2 + 16) = 2;
              v547 = a2 + 2 * v546;
              v548 = *(unsigned __int16 *)(v547 + 1954);
              if ((_DWORD)v548 == 0xFFFF)
              {
                v548 = (unsigned __int16)*v904;
                *(_WORD *)(v547 + 1954) = v548;
                *v904 = v548 + 1;
              }
              *((_QWORD *)&v908[0] + 1) = (v548 << 48) | 0x19C840;
              v549 = *(unsigned __int16 *)(a2 + 1906);
              if (v549 == 0xFFFF)
              {
                v551 = *(unsigned __int16 *)(a2 + 2004);
                v552 = *(unsigned __int16 *)(a2 + 2004);
                *(_WORD *)(a2 + 1906) = v551;
                *(_WORD *)(a2 + 2004) = ++v552;
                *(_QWORD *)&v908[1] = ((unint64_t)(unsigned __int16)v551 << 48) | 0x19C840;
                if ((v552 & 0x10000) != 0)
                {
                  v551 = *(unsigned __int16 *)(a2 + 2004);
                  *(_WORD *)(a2 + 1906) = v551;
                  *(_WORD *)(a2 + 2004) = v551 + 1;
                }
                v550 = v551 << 48;
              }
              else
              {
                v550 = v549 << 48;
                *(_QWORD *)&v908[1] = ((unint64_t)(unsigned __int16)v549 << 48) | 0x19C840;
              }
              *(_QWORD *)&v908[0] = v550 | 0x72679000;
              (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
            }
            ++v546;
          }
          while (v546 < v906);
        }
        if ((*a1 & 0x8000000000000000) != 0)
        {
          if (v891)
          {
            v553 = 0;
            v554 = -v893;
            v555 = (_WORD *)(a2 + 2 * v554 + 1970);
            while (((v899 >> v553) & 1) == 0)
            {
LABEL_843:
              if (++v553 >= v906)
                goto LABEL_856;
            }
            if (v553 == v554)
            {
              memset((char *)&v908[1] + 8, 0, 48);
              v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
              *(_DWORD *)(a2 + 16) = 2;
              v556 = *(unsigned __int16 *)(a2 + 1940);
              if ((_DWORD)v556 == 0xFFFF)
              {
                v556 = *(unsigned __int16 *)(a2 + 2004);
                *(_WORD *)(a2 + 1940) = v556;
                *(_WORD *)(a2 + 2004) = v556 + 1;
              }
              *((_QWORD *)&v908[0] + 1) = ((unint64_t)-v893 << 9) | (v556 << 48) | ((unint64_t)-v893 << 11) | ((unint64_t)-v893 << 13) | ((unint64_t)-v893 << 15) | 0x40;
              v557 = (unsigned __int16)*v555;
              if ((_DWORD)v557 == 0xFFFF)
              {
                v557 = (unsigned __int16)*v904;
                *v555 = v557;
                *v904 = v557 + 1;
              }
              *(_QWORD *)&v908[1] = (v557 << 48) | 0x19C840;
              v558 = *(unsigned __int16 *)(a2 + 1910);
              if ((_DWORD)v558 != 0xFFFF)
                goto LABEL_835;
            }
            else
            {
              memset(v908, 0, 72);
              v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
              *(_DWORD *)(a2 + 16) = 3;
              v560 = *(unsigned __int16 *)(a2 + 1940);
              if ((_DWORD)v560 == 0xFFFF)
              {
                v560 = *(unsigned __int16 *)(a2 + 2004);
                *(_WORD *)(a2 + 1940) = v560;
                *(_WORD *)(a2 + 2004) = v560 + 1;
              }
              *((_QWORD *)&v908[0] + 1) = (v560 << 48) | (v553 << 9) | (v553 << 11) | (v553 << 13) | (v553 << 15) | 0x40;
              v561 = a2 + 2 * v553;
              v562 = *(unsigned __int16 *)(v561 + 1970);
              if ((_DWORD)v562 == 0xFFFF)
              {
                v562 = (unsigned __int16)*v904;
                *(_WORD *)(v561 + 1970) = v562;
                *v904 = v562 + 1;
              }
              *(_QWORD *)&v908[1] = (v562 << 48) | 0x19C840;
              v563 = *(unsigned __int16 *)(a2 + 1910);
              if (v563 != 0xFFFF)
              {
                v559 = v563 << 48;
                *((_QWORD *)&v908[1] + 1) = ((unint64_t)(unsigned __int16)v563 << 48) | 0x19C840;
                goto LABEL_842;
              }
              v558 = *(unsigned __int16 *)(a2 + 2004);
              v564 = *(unsigned __int16 *)(a2 + 2004);
              *(_WORD *)(a2 + 1910) = v558;
              *(_WORD *)(a2 + 2004) = ++v564;
              *((_QWORD *)&v908[1] + 1) = ((unint64_t)(unsigned __int16)v558 << 48) | 0x19C840;
              if ((v564 & 0x10000) == 0)
              {
LABEL_835:
                v559 = v558 << 48;
LABEL_842:
                *(_QWORD *)&v908[0] = v559 | 0x72679000;
                (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
                goto LABEL_843;
              }
            }
            v558 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1910) = v558;
            *(_WORD *)(a2 + 2004) = v558 + 1;
            goto LABEL_835;
          }
LABEL_856:
          v60 = a2 + 1924;
          if (v889)
          {
            v575 = 0;
            v576 = (_WORD *)(a2 + 2 * -v893 + 1970);
            while (((v493 >> v575) & 1) == 0)
            {
LABEL_870:
              if (++v575 >= v906)
                goto LABEL_874;
            }
            if (v888 == v575)
            {
              memset(&v908[1], 0, 56);
              v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
              *(_DWORD *)(a2 + 16) = 1;
              v577 = (unsigned __int16)*v576;
              if ((_DWORD)v577 == 0xFFFF)
              {
                v577 = (unsigned __int16)*v904;
                *v576 = v577;
                *v904 = v577 + 1;
              }
              *((_QWORD *)&v908[0] + 1) = (v577 << 48) | 0x19C840;
              v578 = *(unsigned __int16 *)(a2 + 1910);
              if ((_DWORD)v578 == 0xFFFF)
              {
LABEL_863:
                v578 = *(unsigned __int16 *)(a2 + 2004);
                *(_WORD *)(a2 + 1910) = v578;
                *(_WORD *)(a2 + 2004) = v578 + 1;
              }
LABEL_864:
              v579 = v578 << 48;
            }
            else
            {
              memset(v908, 0, 72);
              v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x31000007C2;
              *(_DWORD *)(a2 + 16) = 2;
              v580 = a2 + 2 * v575;
              v581 = *(unsigned __int16 *)(v580 + 1970);
              if ((_DWORD)v581 == 0xFFFF)
              {
                v581 = (unsigned __int16)*v904;
                *(_WORD *)(v580 + 1970) = v581;
                *v904 = v581 + 1;
              }
              *((_QWORD *)&v908[0] + 1) = (v581 << 48) | 0x19C840;
              v582 = *(unsigned __int16 *)(a2 + 1910);
              if (v582 == 0xFFFF)
              {
                v578 = *(unsigned __int16 *)(a2 + 2004);
                v583 = *(unsigned __int16 *)(a2 + 2004);
                *(_WORD *)(a2 + 1910) = v578;
                *(_WORD *)(a2 + 2004) = ++v583;
                *(_QWORD *)&v908[1] = ((unint64_t)(unsigned __int16)v578 << 48) | 0x19C840;
                if ((v583 & 0x10000) != 0)
                  goto LABEL_863;
                goto LABEL_864;
              }
              v579 = v582 << 48;
              *(_QWORD *)&v908[1] = ((unint64_t)(unsigned __int16)v582 << 48) | 0x19C840;
            }
            *(_QWORD *)&v908[0] = v579 | 0x72679000;
            (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
            goto LABEL_870;
          }
        }
      }
LABEL_874:
      v59 = v893 + 4;
      v888 -= 4;
      v56 = v887;
      if (v893 + 4 >= v887)
        goto LABEL_1383;
    }
    v65 = 0;
    v64 = 0;
    v895 = 0;
    v899 = 0;
    v890 = 0;
    v897 = 15;
    v894 = 1;
    if (v59)
      goto LABEL_128;
LABEL_121:
    if ((*a1 & 0x2000000000000) != 0)
    {
      memset((char *)v908 + 8, 0, 64);
      v85 = 8 * (*(_DWORD *)(a2 + 16) & 7);
      *(_DWORD *)(a2 + 16) = 1;
      v907 = v85 | 0x100080341;
      v86 = *(unsigned __int16 *)(a2 + 1900);
      if (v86 == 0xFFFF)
      {
        v88 = *(unsigned __int16 *)(a2 + 2004);
        v89 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1900) = v88;
        *(_WORD *)(a2 + 2004) = ++v89;
        *((_QWORD *)&v908[0] + 1) = ((unint64_t)(unsigned __int16)v88 << 48) | 0x1FE40;
        if ((v89 & 0x10000) != 0)
        {
          v88 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1900) = v88;
          *(_WORD *)(a2 + 2004) = v88 + 1;
        }
        v87 = v88 << 48;
      }
      else
      {
        v87 = v86 << 48;
        *((_QWORD *)&v908[0] + 1) = ((unint64_t)(unsigned __int16)v86 << 48) | 0x1FE40;
      }
      *(_QWORD *)&v908[0] = v87 | 0x72609000;
      (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
    }
    goto LABEL_128;
  }
  if ((v43 & 0x2000000000000) != 0)
  {
    memset((char *)v908 + 8, 0, 64);
    v53 = 8 * (*(_DWORD *)(a2 + 16) & 7);
    *(_DWORD *)(a2 + 16) = 1;
    v907 = v53 | 0x100080341;
    v54 = *(unsigned __int16 *)(a2 + 1900);
    if (v54 == 0xFFFF)
    {
      v614 = *(unsigned __int16 *)(a2 + 2004);
      v615 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1900) = v614;
      *(_WORD *)(a2 + 2004) = ++v615;
      *((_QWORD *)&v908[0] + 1) = ((unint64_t)(unsigned __int16)v614 << 48) | 0x1FE40;
      if ((v615 & 0x10000) != 0)
      {
        v614 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1900) = v614;
        *(_WORD *)(a2 + 2004) = v614 + 1;
      }
      v55 = v614 << 48;
    }
    else
    {
      v55 = v54 << 48;
      *((_QWORD *)&v908[0] + 1) = ((unint64_t)(unsigned __int16)v54 << 48) | 0x1FE40;
    }
    *(_QWORD *)&v908[0] = v55 | 0x72609000;
    (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
    memset((char *)v908 + 8, 0, 64);
    v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
    *(_DWORD *)(a2 + 16) = 2;
    v616 = *(unsigned __int16 *)(a2 + 1900);
    if (v616 == 0xFFFF)
    {
      v618 = *(unsigned __int16 *)(a2 + 2004);
      v619 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1900) = v618;
      *(_WORD *)(a2 + 2004) = ++v619;
      *((_QWORD *)&v908[0] + 1) = ((unint64_t)(unsigned __int16)v618 << 48) | 0x19C840;
      if ((v619 & 0x10000) != 0)
      {
        v618 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1900) = v618;
        *(_WORD *)(a2 + 2004) = v618 + 1;
      }
      v617 = v618 << 48;
    }
    else
    {
      v617 = v616 << 48;
      *((_QWORD *)&v908[0] + 1) = ((unint64_t)(unsigned __int16)v616 << 48) | 0x19C840;
    }
    *(_QWORD *)&v908[1] = v617 | 0x1FE40;
    v620 = *(unsigned __int16 *)(a2 + 1942);
    if ((_DWORD)v620 == 0xFFFF)
    {
      v620 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1942) = v620;
      *(_WORD *)(a2 + 2004) = v620 + 1;
    }
    *(_QWORD *)&v908[0] = (v620 << 48) | 0x72679000;
    (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
  }
  if (!v52)
  {
LABEL_1380:
    memset(v908, 0, 72);
    v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
    *(_DWORD *)(a2 + 16) = 1;
    *((_QWORD *)&v908[0] + 1) = (gleVStateProgram_GetParam(a2, 351) << 48) | 0xAA80;
    v613 = *(unsigned __int16 *)(a2 + 1908);
    if ((_DWORD)v613 == 0xFFFF)
    {
LABEL_1381:
      v613 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1908) = v613;
      *(_WORD *)(a2 + 2004) = v613 + 1;
    }
LABEL_1382:
    *(_QWORD *)&v908[0] = (v613 << 48) | 0x72679000;
    (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
    goto LABEL_1383;
  }
  v900 = 0;
  v621 = 224;
  v622 = 328;
  v623 = 0uLL;
  do
  {
    if ((v52 & 1) == 0)
      goto LABEL_1373;
    v905 = v621;
    v624 = a1[1];
    v625 = (1 << (v622 - 72));
    v626 = v625 & (v624 >> 16);
    if (v626)
      v627 = (v625 & v624) != 0;
    else
      v627 = 0;
    v902 = v627;
    v628 = v622 - 8;
    v908[0] = v623;
    v908[1] = v623;
    v908[2] = v623;
    v908[3] = v623;
    *(_QWORD *)&v908[4] = 0;
    v629 = 8 * (*(_DWORD *)(a2 + 16) & 7);
    v896 = v625 & v624;
    if ((v625 & v624) == 0)
    {
      v907 = v629 | 0x3100000001;
      *(_DWORD *)(a2 + 16) = 1;
      *((_QWORD *)&v908[0] + 1) = ((gleVStateProgram_GetParam(a2, v628) << 48) | 0x19C840) + 64;
      v641 = *(unsigned __int16 *)(a2 + 1924);
      if ((_DWORD)v641 != 0xFFFF)
      {
LABEL_956:
        *(_QWORD *)&v908[0] = (v641 << 48) | 0x72679000;
        (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
        goto LABEL_957;
      }
      v641 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1924) = v641;
LABEL_955:
      *(_WORD *)(a2 + 2004) = v641 + 1;
      goto LABEL_956;
    }
    v907 = v629 | 0x31000007C2;
    *(_DWORD *)(a2 + 16) = 2;
    *((_QWORD *)&v908[0] + 1) = ((gleVStateProgram_GetParam(a2, v628) << 48) | 0x19C840) + 64;
    v630 = *(unsigned __int16 *)(a2 + 1900);
    if ((_DWORD)v630 == 0xFFFF)
    {
      v630 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1900) = v630;
      *(_WORD *)(a2 + 2004) = v630 + 1;
    }
    *(_QWORD *)&v908[1] = (v630 << 48) | 0x19C840;
    v631 = *(unsigned __int16 *)(a2 + 1924);
    if ((_DWORD)v631 == 0xFFFF)
    {
      v631 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1924) = v631;
      *(_WORD *)(a2 + 2004) = v631 + 1;
    }
    *(_QWORD *)&v908[0] = (v631 << 48) | 0x72679000;
    (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
    gleVStateProgram_NormalizeVector(a2, 12, 12, 23, 27);
    if (v626)
    {
      memset((char *)&v908[1] + 8, 0, 48);
      v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
      *(_DWORD *)(a2 + 16) = 2;
      v632 = *(unsigned __int16 *)(a2 + 1946);
      if ((_DWORD)v632 == 0xFFFF)
      {
        v632 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1946) = v632;
        *(_WORD *)(a2 + 2004) = v632 + 1;
      }
      *((_QWORD *)&v908[0] + 1) = ((unint64_t)(unsigned __int16)v632 << 48) | 0x19C840;
      v633 = *(unsigned __int16 *)(a2 + 1954);
      if ((_DWORD)v633 == 0xFFFF)
      {
        v633 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1954) = v633;
        *(_WORD *)(a2 + 2004) = v633 + 1;
      }
      *(_QWORD *)&v908[1] = (v633 << 48) | 0x19C840;
      if ((_DWORD)v632 == 0xFFFF)
      {
        v632 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1946) = v632;
        *(_WORD *)(a2 + 2004) = v632 + 1;
      }
      *(_QWORD *)&v908[0] = (v632 << 48) | 0x72679000;
      (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
      memset(v908, 0, 72);
      v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
      *(_DWORD *)(a2 + 16) = 3;
      v634 = *(unsigned __int16 *)(a2 + 1946);
      if ((_DWORD)v634 == 0xFFFF)
      {
        v634 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1946) = v634;
        *(_WORD *)(a2 + 2004) = v634 + 1;
      }
      *((_QWORD *)&v908[0] + 1) = (v634 << 48) | 0x19C840;
      *(_QWORD *)&v908[1] = ((gleVStateProgram_GetParam(a2, v622 - 16) << 48) | 0x15440) + 64;
      *((_QWORD *)&v908[1] + 1) = (gleVStateProgram_GetParam(a2, v622 - 16) << 48) | 0xAA80;
      v635 = *(unsigned __int16 *)(a2 + 1954);
      if ((_DWORD)v635 == 0xFFFF)
      {
        v635 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1954) = v635;
        *(_WORD *)(a2 + 2004) = v635 + 1;
      }
      *(_QWORD *)&v908[0] = (v635 << 48) | 0x72679000;
      (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
      memset(v908, 0, 72);
      v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
      *(_DWORD *)(a2 + 16) = 3;
      v636 = *(unsigned __int16 *)(a2 + 1946);
      if ((_DWORD)v636 == 0xFFFF)
      {
        v636 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1946) = v636;
        *(_WORD *)(a2 + 2004) = v636 + 1;
      }
      *((_QWORD *)&v908[0] + 1) = (v636 << 48) | 0x19C840;
      v637 = *(unsigned __int16 *)(a2 + 1954);
      if ((_DWORD)v637 == 0xFFFF)
      {
        v637 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1954) = v637;
        *(_WORD *)(a2 + 2004) = v637 + 1;
      }
      *(_QWORD *)&v908[1] = (v637 << 48) | 0x19C840;
      *((_QWORD *)&v908[1] + 1) = (gleVStateProgram_GetParam(a2, v622 - 16) << 48) | 0x80;
      v638 = *(unsigned __int16 *)(a2 + 1954);
      if ((_DWORD)v638 == 0xFFFF)
      {
        v638 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1954) = v638;
        *(_WORD *)(a2 + 2004) = v638 + 1;
      }
      *(_QWORD *)&v908[0] = (v638 << 48) | 0x72679000;
      (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
      memset(&v908[1], 0, 56);
      v639 = *(_DWORD *)(a2 + 16);
      *(_DWORD *)(a2 + 16) = 1;
      v907 = (8 * (v639 & 7)) | 0x100100381;
      v640 = *(unsigned __int16 *)(a2 + 1954);
      if ((_DWORD)v640 == 0xFFFF)
      {
        v640 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1954) = v640;
        *(_WORD *)(a2 + 2004) = v640 + 1;
      }
      *((_QWORD *)&v908[0] + 1) = (v640 << 48) | 0x19C840;
      v641 = *(unsigned __int16 *)(a2 + 1940);
      if ((_DWORD)v641 != 0xFFFF)
        goto LABEL_956;
      v641 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1940) = v641;
      goto LABEL_955;
    }
LABEL_957:
    memset((char *)&v908[1] + 8, 0, 48);
    v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000A02;
    *(_DWORD *)(a2 + 16) = 2;
    v642 = *(unsigned __int16 *)(a2 + 1902);
    if ((_DWORD)v642 == 0xFFFF)
    {
      v642 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1902) = v642;
      *(_WORD *)(a2 + 2004) = v642 + 1;
    }
    *((_QWORD *)&v908[0] + 1) = (v642 << 48) | 0x19C840;
    v643 = *(unsigned __int16 *)(a2 + 1924);
    if ((_DWORD)v643 == 0xFFFF)
    {
      v643 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1924) = v643;
      *(_WORD *)(a2 + 2004) = v643 + 1;
    }
    *(_QWORD *)&v908[1] = (v643 << 48) | 0x19C840;
    v644 = *(unsigned __int16 *)(a2 + 1912);
    if ((_DWORD)v644 == 0xFFFF)
    {
      v644 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1912) = v644;
      *(_WORD *)(a2 + 2004) = v644 + 1;
    }
    *(_QWORD *)&v908[0] = (v644 << 48) | 0x72679000;
    (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
    v901 = BYTE1(v624) >> (v622 - 72);
    if ((v901 & 1) != 0)
    {
      memset(v908, 0, 72);
      v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
      *(_DWORD *)(a2 + 16) = 1;
      *((_QWORD *)&v908[0] + 1) = ((gleVStateProgram_GetParam(a2, v622) << 48) | 0x19C840) + 64;
      v645 = *(unsigned __int16 *)(a2 + 1946);
      if ((_DWORD)v645 == 0xFFFF)
      {
        v645 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1946) = v645;
        *(_WORD *)(a2 + 2004) = v645 + 1;
      }
      *(_QWORD *)&v908[0] = (v645 << 48) | 0x72679000;
      (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
      memset((char *)&v908[1] + 8, 0, 48);
      v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000A02;
      *(_DWORD *)(a2 + 16) = 2;
      v646 = *(unsigned __int16 *)(a2 + 1946);
      if ((_DWORD)v646 == 0xFFFF)
      {
        v646 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1946) = v646;
        *(_WORD *)(a2 + 2004) = v646 + 1;
      }
      *((_QWORD *)&v908[0] + 1) = (v646 << 48) | 0x19C840;
      v647 = *(unsigned __int16 *)(a2 + 1924);
      if ((_DWORD)v647 == 0xFFFF)
      {
        v647 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1924) = v647;
        *(_WORD *)(a2 + 2004) = v647 + 1;
      }
      *(_QWORD *)&v908[1] = ((v647 << 48) | 0x19C840) + 16;
      v648 = *(unsigned __int16 *)(a2 + 1954);
      if ((_DWORD)v648 == 0xFFFF)
      {
        v648 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1954) = v648;
        *(_WORD *)(a2 + 2004) = v648 + 1;
      }
      *(_QWORD *)&v908[0] = (v648 << 48) | 0x72679000;
      (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
      memset(v908, 0, 72);
      v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000C82;
      *(_DWORD *)(a2 + 16) = 2;
      v649 = *(unsigned __int16 *)(a2 + 1954);
      if (v902)
      {
        if ((_DWORD)v649 == 0xFFFF)
        {
          v649 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1954) = v649;
          *(_WORD *)(a2 + 2004) = v649 + 1;
        }
        *((_QWORD *)&v908[0] + 1) = (v649 << 48) | 0x19C840;
        *(_QWORD *)&v908[1] = ((gleVStateProgram_GetParam(a2, v622 - 32) << 48) | 0x1FE40) + 64;
        v650 = *(unsigned __int16 *)(a2 + 1946);
        if ((_DWORD)v650 == 0xFFFF)
        {
          v650 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1946) = v650;
          *(_WORD *)(a2 + 2004) = v650 + 1;
        }
        *(_QWORD *)&v908[0] = (v650 << 48) | 0x72679000;
        (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
        memset((char *)&v908[1] + 8, 0, 48);
        v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
        *(_DWORD *)(a2 + 16) = 2;
        v651 = *(unsigned __int16 *)(a2 + 1940);
        if ((_DWORD)v651 == 0xFFFF)
        {
          v651 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1940) = v651;
          *(_WORD *)(a2 + 2004) = v651 + 1;
        }
        *((_QWORD *)&v908[0] + 1) = ((unint64_t)(unsigned __int16)v651 << 48) | 0x19C840;
        v652 = *(unsigned __int16 *)(a2 + 1946);
        if ((_DWORD)v652 == 0xFFFF)
        {
          v652 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1946) = v652;
          *(_WORD *)(a2 + 2004) = v652 + 1;
        }
        *(_QWORD *)&v908[1] = (v652 << 48) | 0x19C840;
      }
      else
      {
        if ((_DWORD)v649 == 0xFFFF)
        {
          v649 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1954) = v649;
          *(_WORD *)(a2 + 2004) = v649 + 1;
        }
        *((_QWORD *)&v908[0] + 1) = (v649 << 48) | 0x19C840;
        *(_QWORD *)&v908[1] = ((gleVStateProgram_GetParam(a2, v622 - 32) << 48) | 0x1FE40) + 64;
        v651 = *(unsigned __int16 *)(a2 + 1940);
      }
      if ((_DWORD)v651 == 0xFFFF)
      {
        v651 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1940) = v651;
        *(_WORD *)(a2 + 2004) = v651 + 1;
      }
      *(_QWORD *)&v908[0] = (v651 << 48) | 0x72679000;
      (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
      v653 = *a1;
      memset(v908, 0, 72);
      v654 = 8 * *(_DWORD *)(a2 + 16);
      if ((v653 & 0x2000000000000000) != 0)
      {
        v907 = v654 & 0x38 | 0x3100000001;
        *(_DWORD *)(a2 + 16) = 1;
        *((_QWORD *)&v908[0] + 1) = ((gleVStateProgram_GetParam(a2, v622 - 16) << 48) | 0x19C840) + 64;
        v660 = *(unsigned __int16 *)(a2 + 1954);
        if ((_DWORD)v660 == 0xFFFF)
        {
          v660 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1954) = v660;
          *(_WORD *)(a2 + 2004) = v660 + 1;
        }
        *(_QWORD *)&v908[0] = (v660 << 48) | 0x72609000;
        (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
        memset((char *)v908 + 8, 0, 64);
        v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000041;
        *(_DWORD *)(a2 + 16) = 1;
        v661 = *(unsigned __int16 *)(a2 + 1954);
        if (v661 == 0xFFFF)
        {
          v663 = *(unsigned __int16 *)(a2 + 2004);
          v664 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1954) = v663;
          *(_WORD *)(a2 + 2004) = ++v664;
          *((_QWORD *)&v908[0] + 1) = ((unint64_t)(unsigned __int16)v663 << 48) | 0x19C840;
          if ((v664 & 0x10000) != 0)
          {
            v663 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1954) = v663;
            *(_WORD *)(a2 + 2004) = v663 + 1;
          }
          v662 = v663 << 48;
        }
        else
        {
          v662 = v661 << 48;
          *((_QWORD *)&v908[0] + 1) = ((unint64_t)(unsigned __int16)v661 << 48) | 0x19C840;
        }
        *(_QWORD *)&v908[0] = v662 | 0x72611000;
        (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
        memset((char *)&v908[1] + 8, 0, 48);
        v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
        *(_DWORD *)(a2 + 16) = 2;
        v657 = *(unsigned __int16 *)(a2 + 1940);
        if ((_DWORD)v657 == 0xFFFF)
        {
          v657 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1940) = v657;
          *(_WORD *)(a2 + 2004) = v657 + 1;
        }
        *((_QWORD *)&v908[0] + 1) = ((unint64_t)(unsigned __int16)v657 << 48) | 0x19C840;
        v665 = *(unsigned __int16 *)(a2 + 1954);
        if ((_DWORD)v665 == 0xFFFF)
        {
          v665 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1954) = v665;
          *(_WORD *)(a2 + 2004) = v665 + 1;
        }
        v659 = (v665 << 48) | 0x15440;
      }
      else
      {
        *(_DWORD *)(a2 + 16) = 2;
        v907 = v654 & 0x38 | 0x100000E02;
        v655 = *(unsigned __int16 *)(a2 + 1954);
        if ((_DWORD)v655 == 0xFFFF)
        {
          v655 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1954) = v655;
          *(_WORD *)(a2 + 2004) = v655 + 1;
        }
        *((_QWORD *)&v908[0] + 1) = (v655 << 48) | 0x19C840;
        *(_QWORD *)&v908[1] = ((gleVStateProgram_GetParam(a2, v622 - 16) << 48) | 0x1FE40) + 64;
        v656 = *(unsigned __int16 *)(a2 + 1946);
        if ((_DWORD)v656 == 0xFFFF)
        {
          v656 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1946) = v656;
          *(_WORD *)(a2 + 2004) = v656 + 1;
        }
        *(_QWORD *)&v908[0] = (v656 << 48) | 0x72679000;
        (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
        memset((char *)&v908[1] + 8, 0, 48);
        v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
        *(_DWORD *)(a2 + 16) = 2;
        v657 = *(unsigned __int16 *)(a2 + 1940);
        if ((_DWORD)v657 == 0xFFFF)
        {
          v657 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1940) = v657;
          *(_WORD *)(a2 + 2004) = v657 + 1;
        }
        *((_QWORD *)&v908[0] + 1) = ((unint64_t)(unsigned __int16)v657 << 48) | 0x19C840;
        v658 = *(unsigned __int16 *)(a2 + 1946);
        if ((_DWORD)v658 == 0xFFFF)
        {
          v658 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1946) = v658;
          *(_WORD *)(a2 + 2004) = v658 + 1;
        }
        v659 = (v658 << 48) | 0x19C840;
      }
      *(_QWORD *)&v908[1] = v659;
      if ((_DWORD)v657 == 0xFFFF)
      {
        v657 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1940) = v657;
        *(_WORD *)(a2 + 2004) = v657 + 1;
      }
      *(_QWORD *)&v908[0] = (v657 << 48) | 0x72679000;
      (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
    }
    if ((*a1 & 0x400000000000000) == 0)
    {
      if ((*a1 & 0x2000000000000) != 0)
      {
        *(_OWORD *)((char *)&v908[2] + 8) = 0uLL;
        *(_OWORD *)((char *)&v908[3] + 8) = 0uLL;
        *(_OWORD *)((char *)&v908[1] + 8) = 0uLL;
        v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x31000007C2;
        *(_DWORD *)(a2 + 16) = 2;
        v669 = *(unsigned __int16 *)(a2 + 1942);
        if ((_DWORD)v669 == 0xFFFF)
        {
          v669 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1942) = v669;
          goto LABEL_1033;
        }
      }
      else
      {
        if (!v896)
        {
          memset(v908, 0, 72);
          v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
          *(_DWORD *)(a2 + 16) = 1;
          *((_QWORD *)&v908[0] + 1) = ((gleVStateProgram_GetParam(a2, v622 - 24) << 48) | 0x19C840) + 64;
          v690 = *(unsigned __int16 *)(a2 + 1932);
          if ((_DWORD)v690 == 0xFFFF)
          {
            v690 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1932) = v690;
            *(_WORD *)(a2 + 2004) = v690 + 1;
          }
          *(_QWORD *)&v908[0] = (v690 << 48) | 0x72679000;
          (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
          goto LABEL_1039;
        }
        *(_OWORD *)((char *)&v908[2] + 8) = 0uLL;
        *(_OWORD *)((char *)&v908[3] + 8) = 0uLL;
        *(_OWORD *)((char *)&v908[1] + 8) = 0uLL;
        v666 = 8 * (*(_DWORD *)(a2 + 16) & 7);
        *(_DWORD *)(a2 + 16) = 2;
        v907 = v666 | 0x3100011042;
        v667 = *(unsigned __int16 *)(a2 + 1904);
        if ((_DWORD)v667 == 0xFFFF)
        {
          v667 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1904) = v667;
          *(_WORD *)(a2 + 2004) = v667 + 1;
        }
        *((_QWORD *)&v908[0] + 1) = (v667 << 48) | 0x19C840;
        *(_QWORD *)&v908[1] = 2560163840;
        v668 = *(unsigned __int16 *)(a2 + 1946);
        if ((_DWORD)v668 == 0xFFFF)
        {
          v668 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1946) = v668;
          *(_WORD *)(a2 + 2004) = v668 + 1;
        }
        *(_QWORD *)&v908[0] = (v668 << 48) | 0x72679000;
        (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
        memset((char *)&v908[1] + 8, 0, 48);
        v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x31000007C2;
        *(_DWORD *)(a2 + 16) = 2;
        v669 = *(unsigned __int16 *)(a2 + 1946);
        if ((_DWORD)v669 == 0xFFFF)
        {
          v669 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1946) = v669;
LABEL_1033:
          *(_WORD *)(a2 + 2004) = v669 + 1;
        }
      }
      *((_QWORD *)&v908[0] + 1) = (v669 << 48) | 0x19C840;
      v676 = *(unsigned __int16 *)(a2 + 1924);
      if ((_DWORD)v676 == 0xFFFF)
      {
        v676 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1924) = v676;
        *(_WORD *)(a2 + 2004) = v676 + 1;
      }
      *(_QWORD *)&v908[1] = (v676 << 48) | 0x19C840;
      v677 = *(unsigned __int16 *)(a2 + 1932);
      if ((_DWORD)v677 == 0xFFFF)
      {
        v677 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1932) = v677;
        *(_WORD *)(a2 + 2004) = v677 + 1;
      }
      *(_QWORD *)&v908[0] = (v677 << 48) | 0x72679000;
      (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
      gleVStateProgram_NormalizeVector(a2, 16, 16, 23, 23);
LABEL_1039:
      memset((char *)&v908[1] + 8, 0, 48);
      v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000A02;
      *(_DWORD *)(a2 + 16) = 2;
      v678 = *(unsigned __int16 *)(a2 + 1902);
      if ((_DWORD)v678 == 0xFFFF)
      {
        v678 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1902) = v678;
        *(_WORD *)(a2 + 2004) = v678 + 1;
      }
      *((_QWORD *)&v908[0] + 1) = (v678 << 48) | 0x19C840;
      v679 = *(unsigned __int16 *)(a2 + 1932);
      if ((_DWORD)v679 != 0xFFFF)
        goto LABEL_1074;
      v679 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1932) = v679;
LABEL_1073:
      *(_WORD *)(a2 + 2004) = v679 + 1;
LABEL_1074:
      v694 = (v679 << 48) | 0x19C840;
      goto LABEL_1075;
    }
    *(_OWORD *)((char *)&v908[2] + 8) = 0uLL;
    *(_OWORD *)((char *)&v908[3] + 8) = 0uLL;
    *(_OWORD *)((char *)&v908[1] + 8) = 0uLL;
    v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000B82;
    *(_DWORD *)(a2 + 16) = 2;
    v670 = *(unsigned __int16 *)(a2 + 1902);
    if ((_DWORD)v670 == 0xFFFF)
    {
      v670 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1902) = v670;
      *(_WORD *)(a2 + 2004) = v670 + 1;
    }
    *((_QWORD *)&v908[0] + 1) = (v670 << 48) | 0x19C840;
    v671 = *(unsigned __int16 *)(a2 + 1924);
    if ((_DWORD)v671 == 0xFFFF)
    {
      v671 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1924) = v671;
      *(_WORD *)(a2 + 2004) = v671 + 1;
    }
    *(_QWORD *)&v908[1] = (v671 << 48) | 0x19C840;
    v672 = *(unsigned __int16 *)(a2 + 1932);
    if ((_DWORD)v672 == 0xFFFF)
    {
      v672 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1932) = v672;
      *(_WORD *)(a2 + 2004) = v672 + 1;
    }
    *(_QWORD *)&v908[0] = (v672 << 48) | 0x72679000;
    (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
    memset(v908, 0, 72);
    v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000B82;
    *(_DWORD *)(a2 + 16) = 2;
    v673 = *(unsigned __int16 *)(a2 + 1902);
    if ((_DWORD)v673 == 0xFFFF)
    {
      v673 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1902) = v673;
      *(_WORD *)(a2 + 2004) = v673 + 1;
    }
    *((_QWORD *)&v908[0] + 1) = (v673 << 48) | 0x19C840;
    v674 = *(unsigned __int16 *)(a2 + 1932);
    if (v674 == 0xFFFF)
    {
      v680 = *(unsigned __int16 *)(a2 + 2004);
      v681 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1932) = v680;
      *(_WORD *)(a2 + 2004) = ++v681;
      *(_QWORD *)&v908[1] = ((unint64_t)(unsigned __int16)v680 << 48) | 0x19C840;
      if ((v681 & 0x10000) != 0)
      {
        v680 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1932) = v680;
        *(_WORD *)(a2 + 2004) = v680 + 1;
      }
      v675 = v680 << 48;
    }
    else
    {
      v675 = v674 << 48;
      *(_QWORD *)&v908[1] = ((unint64_t)(unsigned __int16)v674 << 48) | 0x19C840;
    }
    *(_QWORD *)&v908[0] = v675 | 0x72679000;
    (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
    memset((char *)v908 + 8, 0, 64);
    v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x31000007C2;
    *(_DWORD *)(a2 + 16) = 2;
    v682 = *(unsigned __int16 *)(a2 + 1932);
    if (v682 != 0xFFFF)
    {
      v683 = v682 << 48;
      v684 = ((unint64_t)(unsigned __int16)v682 << 48) | 0x19C840;
      *((_QWORD *)&v908[0] + 1) = v684;
LABEL_1056:
      *(_QWORD *)&v908[1] = v684;
      goto LABEL_1057;
    }
    v685 = *(unsigned __int16 *)(a2 + 2004);
    v686 = *(unsigned __int16 *)(a2 + 2004);
    *(_WORD *)(a2 + 1932) = v685;
    v687 = v686 + 1;
    *(_WORD *)(a2 + 2004) = v686 + 1;
    v684 = ((unint64_t)(unsigned __int16)v685 << 48) | 0x19C840;
    *((_QWORD *)&v908[0] + 1) = v684;
    if ((v687 & 0x10000) == 0)
    {
      v683 = v685 << 48;
      goto LABEL_1056;
    }
    v688 = *(unsigned __int16 *)(a2 + 2004);
    v689 = *(unsigned __int16 *)(a2 + 2004);
    *(_WORD *)(a2 + 1932) = v688;
    *(_WORD *)(a2 + 2004) = ++v689;
    *(_QWORD *)&v908[1] = ((unint64_t)(unsigned __int16)v688 << 48) | 0x19C840;
    if ((v689 & 0x10000) != 0)
    {
      v688 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1932) = v688;
      *(_WORD *)(a2 + 2004) = v688 + 1;
    }
    v683 = v688 << 48;
LABEL_1057:
    *(_QWORD *)&v908[0] = v683 | 0x72679000;
    (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
    v691 = *a1;
    memset((char *)&v908[1] + 8, 0, 48);
    v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x31000007C2;
    *(_DWORD *)(a2 + 16) = 2;
    v692 = *(unsigned __int16 *)(a2 + 1932);
    if ((v691 & 0x2000000000000) != 0)
    {
      if ((_DWORD)v692 == 0xFFFF)
      {
        v692 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1932) = v692;
        *(_WORD *)(a2 + 2004) = v692 + 1;
      }
      *((_QWORD *)&v908[0] + 1) = ((unint64_t)(unsigned __int16)v692 << 48) | 0x19C840;
      v695 = *(unsigned __int16 *)(a2 + 1924);
      if ((_DWORD)v695 == 0xFFFF)
      {
        v695 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1924) = v695;
        *(_WORD *)(a2 + 2004) = v695 + 1;
      }
      *(_QWORD *)&v908[1] = (v695 << 48) | 0x19C840;
      if ((_DWORD)v692 == 0xFFFF)
      {
        v692 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1932) = v692;
        *(_WORD *)(a2 + 2004) = v692 + 1;
      }
      *(_QWORD *)&v908[0] = (v692 << 48) | 0x72679000;
      (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
      memset((char *)&v908[1] + 8, 0, 48);
      v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000A02;
      *(_DWORD *)(a2 + 16) = 2;
      v696 = *(unsigned __int16 *)(a2 + 1932);
      if ((_DWORD)v696 == 0xFFFF)
      {
        v696 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1932) = v696;
        *(_WORD *)(a2 + 2004) = v696 + 1;
      }
      *((_QWORD *)&v908[0] + 1) = (v696 << 48) | 0x19C840;
      v679 = *(unsigned __int16 *)(a2 + 1942);
      if ((_DWORD)v679 != 0xFFFF)
        goto LABEL_1074;
      v679 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1942) = v679;
      goto LABEL_1073;
    }
    if ((_DWORD)v692 == 0xFFFF)
    {
      v692 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1932) = v692;
      *(_WORD *)(a2 + 2004) = v692 + 1;
    }
    *((_QWORD *)&v908[0] + 1) = (v692 << 48) | 0x15440;
    v693 = *(unsigned __int16 *)(a2 + 1924);
    if ((_DWORD)v693 == 0xFFFF)
    {
      v693 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1924) = v693;
      *(_WORD *)(a2 + 2004) = v693 + 1;
    }
    v694 = (v693 << 48) | 0x15440;
LABEL_1075:
    *(_QWORD *)&v908[1] = v694;
    v697 = *(unsigned __int16 *)(a2 + 1912);
    if ((_DWORD)v697 == 0xFFFF)
    {
      v697 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1912) = v697;
      *(_WORD *)(a2 + 2004) = v697 + 1;
    }
    *(_QWORD *)&v908[0] = (v697 << 48) | 0x72621000;
    (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
    v698 = *a1;
    if ((*a1 & 0x2000000000000000) != 0)
    {
      memset(&v908[1], 0, 56);
      v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
      *(_DWORD *)(a2 + 16) = 1;
      v699 = *(unsigned __int16 *)(a2 + 1628);
      if ((_DWORD)v699 == 0xFFFF)
      {
        v700 = *(__int16 *)(a2 + 1998);
        v699 = *(unsigned __int16 *)(a2 + 1998);
        *(_WORD *)(a2 + 1628) = v700;
        *(_WORD *)(a2 + 4 * v700 + 262) = 342;
        *(_WORD *)(a2 + 1998) = v700 + 1;
      }
      *((_QWORD *)&v908[0] + 1) = (v699 << 48) | 0x80;
      v701 = *(unsigned __int16 *)(a2 + 1912);
      if ((_DWORD)v701 == 0xFFFF)
      {
        v701 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1912) = v701;
        *(_WORD *)(a2 + 2004) = v701 + 1;
      }
      *(_QWORD *)&v908[0] = (v701 << 48) | 0x72609000;
      (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
      v698 = *a1;
    }
    v702 = 0uLL;
    if ((v698 & 0x1000000000000) != 0)
    {
      memset(&v908[1], 0, 56);
      v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
      *(_DWORD *)(a2 + 16) = 1;
      v703 = *(unsigned __int16 *)(a2 + 1912);
      if ((_DWORD)v703 == 0xFFFF)
      {
        v703 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1912) = v703;
        *(_WORD *)(a2 + 2004) = v703 + 1;
      }
      *((_QWORD *)&v908[0] + 1) = ((v703 << 48) | 0x19C840) + 16;
      v704 = *(unsigned __int16 *)(a2 + 1914);
      if ((_DWORD)v704 == 0xFFFF)
      {
        v704 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1914) = v704;
        *(_WORD *)(a2 + 2004) = v704 + 1;
      }
      *(_QWORD *)&v908[0] = (v704 << 48) | 0x72679000;
      (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
      v698 = *a1;
      v702 = 0uLL;
      if ((*a1 & 0x2000000000000000) != 0)
      {
        memset(&v908[1], 0, 56);
        v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
        *(_DWORD *)(a2 + 16) = 1;
        v705 = *(unsigned __int16 *)(a2 + 1632);
        if ((_DWORD)v705 == 0xFFFF)
        {
          v706 = *(__int16 *)(a2 + 1998);
          v705 = *(unsigned __int16 *)(a2 + 1998);
          *(_WORD *)(a2 + 1632) = v706;
          *(_WORD *)(a2 + 4 * v706 + 262) = 343;
          *(_WORD *)(a2 + 1998) = v706 + 1;
        }
        *((_QWORD *)&v908[0] + 1) = (v705 << 48) | 0x80;
        v707 = *(unsigned __int16 *)(a2 + 1914);
        if ((_DWORD)v707 == 0xFFFF)
        {
          v707 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1914) = v707;
          *(_WORD *)(a2 + 2004) = v707 + 1;
        }
        *(_QWORD *)&v908[0] = (v707 << 48) | 0x72609000;
        (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
        v698 = *a1;
        v702 = 0uLL;
      }
    }
    if ((v698 & 0x2000000000000000) == 0)
    {
      *(_QWORD *)&v908[4] = 0;
      v908[2] = v702;
      v908[3] = v702;
      v908[0] = v702;
      v908[1] = v702;
      v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000B42;
      *(_DWORD *)(a2 + 16) = 2;
      v708 = *(unsigned __int16 *)(a2 + 1912);
      if ((_DWORD)v708 == 0xFFFF)
      {
        v708 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1912) = v708;
        *(_WORD *)(a2 + 2004) = v708 + 1;
      }
      *((_QWORD *)&v908[0] + 1) = (v708 << 48) | 0x19C240;
      *(_QWORD *)&v908[1] = (gleVStateProgram_GetParam(a2, 351) << 48) | 0xAA80;
      v709 = *(unsigned __int16 *)(a2 + 1912);
      if ((_DWORD)v709 == 0xFFFF)
      {
        v709 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1912) = v709;
        *(_WORD *)(a2 + 2004) = v709 + 1;
      }
      *(_QWORD *)&v908[0] = (v709 << 48) | 0x72679000;
      (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
      memset((char *)&v908[1] + 8, 0, 48);
      v710 = *(_DWORD *)(a2 + 16);
      *(_DWORD *)(a2 + 16) = 2;
      v907 = (8 * (v710 & 7)) | 0x100000E02;
      v711 = *(unsigned __int16 *)(a2 + 1912);
      if ((_DWORD)v711 == 0xFFFF)
      {
        v711 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1912) = v711;
        *(_WORD *)(a2 + 2004) = v711 + 1;
      }
      *((_QWORD *)&v908[0] + 1) = ((unint64_t)(unsigned __int16)v711 << 48) | 0x40;
      v712 = *(unsigned __int16 *)(a2 + 1628);
      if ((_DWORD)v712 == 0xFFFF)
      {
        v713 = *(__int16 *)(a2 + 1998);
        v712 = *(unsigned __int16 *)(a2 + 1998);
        *(_WORD *)(a2 + 1628) = v713;
        *(_WORD *)(a2 + 4 * v713 + 262) = 342;
        *(_WORD *)(a2 + 1998) = v713 + 1;
      }
      *(_QWORD *)&v908[1] = (v712 << 48) | 0x80;
      if ((_DWORD)v711 == 0xFFFF)
      {
        v711 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1912) = v711;
        *(_WORD *)(a2 + 2004) = v711 + 1;
      }
      *(_QWORD *)&v908[0] = (v711 << 48) | 0x72611000;
      (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
      memset(v908, 0, 72);
      v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000F83;
      *(_DWORD *)(a2 + 16) = 3;
      v714 = *(unsigned __int16 *)(a2 + 1912);
      if (v714 == 0xFFFF)
      {
        v718 = *(unsigned __int16 *)(a2 + 2004);
        v719 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1912) = v718;
        *(_WORD *)(a2 + 2004) = ++v719;
        *((_QWORD *)&v908[0] + 1) = ((unint64_t)(unsigned __int16)v718 << 48) | 0xAA50;
        if ((v719 & 0x10000) != 0)
        {
          v718 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1912) = v718;
          *(_WORD *)(a2 + 2004) = v718 + 1;
        }
        v715 = v718 << 48;
      }
      else
      {
        v715 = v714 << 48;
        *((_QWORD *)&v908[0] + 1) = ((unint64_t)(unsigned __int16)v714 << 48) | 0xAA50;
      }
      *(_QWORD *)&v908[1] = v715 | 0x19C840;
      *((_QWORD *)&v908[1] + 1) = (gleVStateProgram_GetParam(a2, 351) << 48) | 0xAA80;
      v720 = *(unsigned __int16 *)(a2 + 1912);
      if ((_DWORD)v720 != 0xFFFF)
        goto LABEL_1114;
LABEL_1113:
      v720 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1912) = v720;
      *(_WORD *)(a2 + 2004) = v720 + 1;
      goto LABEL_1114;
    }
    *(_OWORD *)((char *)&v908[2] + 8) = v702;
    *(_OWORD *)((char *)&v908[3] + 8) = v702;
    *(_OWORD *)((char *)v908 + 8) = v702;
    *(_OWORD *)((char *)&v908[1] + 8) = v702;
    v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000041;
    *(_DWORD *)(a2 + 16) = 1;
    v716 = *(unsigned __int16 *)(a2 + 1912);
    if (v716 != 0xFFFF)
    {
      v717 = v716 << 48;
      *((_QWORD *)&v908[0] + 1) = ((unint64_t)(unsigned __int16)v716 << 48) | 0x19C840;
      goto LABEL_1115;
    }
    v720 = *(unsigned __int16 *)(a2 + 2004);
    v731 = *(unsigned __int16 *)(a2 + 2004);
    *(_WORD *)(a2 + 1912) = v720;
    *(_WORD *)(a2 + 2004) = ++v731;
    *((_QWORD *)&v908[0] + 1) = ((unint64_t)(unsigned __int16)v720 << 48) | 0x19C840;
    if ((v731 & 0x10000) != 0)
      goto LABEL_1113;
LABEL_1114:
    v717 = v720 << 48;
LABEL_1115:
    *(_QWORD *)&v908[0] = v717 | 0x72679000;
    (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
    if ((*a1 & 0x1000000000000) == 0)
      goto LABEL_1140;
    if ((*a1 & 0x2000000000000000) == 0)
    {
      memset(v908, 0, 72);
      v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000B42;
      *(_DWORD *)(a2 + 16) = 2;
      v721 = *(unsigned __int16 *)(a2 + 1914);
      if ((_DWORD)v721 == 0xFFFF)
      {
        v721 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1914) = v721;
        *(_WORD *)(a2 + 2004) = v721 + 1;
      }
      *((_QWORD *)&v908[0] + 1) = (v721 << 48) | 0x19C240;
      *(_QWORD *)&v908[1] = (gleVStateProgram_GetParam(a2, 351) << 48) | 0xAA80;
      v722 = *(unsigned __int16 *)(a2 + 1914);
      if ((_DWORD)v722 == 0xFFFF)
      {
        v722 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1914) = v722;
        *(_WORD *)(a2 + 2004) = v722 + 1;
      }
      *(_QWORD *)&v908[0] = (v722 << 48) | 0x72679000;
      (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
      memset((char *)&v908[1] + 8, 0, 48);
      v723 = *(_DWORD *)(a2 + 16);
      *(_DWORD *)(a2 + 16) = 2;
      v907 = (8 * (v723 & 7)) | 0x100000E02;
      v724 = *(unsigned __int16 *)(a2 + 1914);
      if ((_DWORD)v724 == 0xFFFF)
      {
        v724 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1914) = v724;
        *(_WORD *)(a2 + 2004) = v724 + 1;
      }
      *((_QWORD *)&v908[0] + 1) = (v724 << 48) | 0x40;
      v725 = *(unsigned __int16 *)(a2 + 1632);
      if ((_DWORD)v725 == 0xFFFF)
      {
        v726 = *(__int16 *)(a2 + 1998);
        v725 = *(unsigned __int16 *)(a2 + 1998);
        *(_WORD *)(a2 + 1632) = v726;
        *(_WORD *)(a2 + 4 * v726 + 262) = 343;
        *(_WORD *)(a2 + 1998) = v726 + 1;
        v724 = *(unsigned __int16 *)(a2 + 1914);
      }
      *(_QWORD *)&v908[1] = (v725 << 48) | 0x80;
      if ((_DWORD)v724 == 0xFFFF)
      {
        v724 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1914) = v724;
        *(_WORD *)(a2 + 2004) = v724 + 1;
      }
      *(_QWORD *)&v908[0] = (v724 << 48) | 0x72611000;
      (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
      memset(v908, 0, 72);
      v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000F83;
      *(_DWORD *)(a2 + 16) = 3;
      v727 = *(unsigned __int16 *)(a2 + 1914);
      if (v727 == 0xFFFF)
      {
        v732 = *(unsigned __int16 *)(a2 + 2004);
        v733 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1914) = v732;
        *(_WORD *)(a2 + 2004) = ++v733;
        *((_QWORD *)&v908[0] + 1) = ((unint64_t)(unsigned __int16)v732 << 48) | 0xAA50;
        if ((v733 & 0x10000) != 0)
        {
          v732 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1914) = v732;
          *(_WORD *)(a2 + 2004) = v732 + 1;
        }
        v728 = v732 << 48;
      }
      else
      {
        v728 = v727 << 48;
        *((_QWORD *)&v908[0] + 1) = ((unint64_t)(unsigned __int16)v727 << 48) | 0xAA50;
      }
      *(_QWORD *)&v908[1] = v728 | 0x19C840;
      *((_QWORD *)&v908[1] + 1) = (gleVStateProgram_GetParam(a2, 351) << 48) | 0xAA80;
      v734 = *(unsigned __int16 *)(a2 + 1914);
      if ((_DWORD)v734 != 0xFFFF)
        goto LABEL_1138;
LABEL_1137:
      v734 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1914) = v734;
      *(_WORD *)(a2 + 2004) = v734 + 1;
LABEL_1138:
      v730 = v734 << 48;
      goto LABEL_1139;
    }
    *(_OWORD *)((char *)&v908[2] + 8) = 0uLL;
    *(_OWORD *)((char *)&v908[3] + 8) = 0uLL;
    *(_OWORD *)((char *)v908 + 8) = 0uLL;
    *(_OWORD *)((char *)&v908[1] + 8) = 0uLL;
    v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000041;
    *(_DWORD *)(a2 + 16) = 1;
    v729 = *(unsigned __int16 *)(a2 + 1914);
    if (v729 == 0xFFFF)
    {
      v734 = *(unsigned __int16 *)(a2 + 2004);
      v791 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1914) = v734;
      *(_WORD *)(a2 + 2004) = ++v791;
      *((_QWORD *)&v908[0] + 1) = ((unint64_t)(unsigned __int16)v734 << 48) | 0x19C840;
      if ((v791 & 0x10000) == 0)
        goto LABEL_1138;
      goto LABEL_1137;
    }
    v730 = v729 << 48;
    *((_QWORD *)&v908[0] + 1) = ((unint64_t)(unsigned __int16)v729 << 48) | 0x19C840;
LABEL_1139:
    *(_QWORD *)&v908[0] = v730 | 0x72679000;
    (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
LABEL_1140:
    memset(v908, 0, 72);
    v735 = 8 * (*(_DWORD *)(a2 + 16) & 7);
    if ((v892 & 6) == 6)
    {
      v907 = v735 | 0x3100000882;
      *(_DWORD *)(a2 + 16) = 2;
      v736.i64[0] = gleVStateProgram_GetParam(a2, v622 - 56);
      v736.i64[1] = gleVStateProgram_GetAttrib(a2, 2);
      *(int8x16_t *)((char *)v908 + 8) = vorrq_s8((int8x16_t)vshlq_n_s64(v736, 0x30uLL), (int8x16_t)xmmword_22D807680);
      v737 = *(unsigned __int16 *)(a2 + 1946);
      if ((_DWORD)v737 == 0xFFFF)
      {
        v737 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1946) = v737;
        *(_WORD *)(a2 + 2004) = v737 + 1;
      }
      *(_QWORD *)&v908[0] = (v737 << 48) | 0x72679000;
      (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
      memset(v908, 0, 72);
      v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
      *(_DWORD *)(a2 + 16) = 2;
      v738.i64[0] = gleVStateProgram_GetParam(a2, v622 - 48);
      v738.i64[1] = gleVStateProgram_GetAttrib(a2, 2);
      *(int8x16_t *)((char *)v908 + 8) = vorrq_s8((int8x16_t)vshlq_n_s64(v738, 0x30uLL), (int8x16_t)xmmword_22D807680);
      v739 = *(unsigned __int16 *)(a2 + 1962);
      if ((_DWORD)v739 == 0xFFFF)
      {
        v739 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1962) = v739;
        *(_WORD *)(a2 + 2004) = v739 + 1;
      }
      *(_QWORD *)&v908[0] = (v739 << 48) | 0x72679000;
      (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
      memset(v908, 0, 72);
      v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
      *(_DWORD *)(a2 + 16) = 3;
      v740 = *(unsigned __int16 *)(a2 + 1912);
      if ((_DWORD)v740 == 0xFFFF)
      {
        v740 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1912) = v740;
        *(_WORD *)(a2 + 2004) = v740 + 1;
      }
      *((_QWORD *)&v908[0] + 1) = (v740 << 48) | 0xAA40;
      v741 = *(unsigned __int16 *)(a2 + 1962);
      v742 = v905;
      if ((_DWORD)v741 == 0xFFFF)
      {
        v741 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1962) = v741;
        *(_WORD *)(a2 + 2004) = v741 + 1;
      }
      v743 = (v741 << 48) | 0x19C840;
      goto LABEL_1162;
    }
    v742 = v905;
    if ((v892 & 2) != 0)
    {
      v907 = v735 | 0x3100000882;
      *(_DWORD *)(a2 + 16) = 2;
      v747.i64[0] = gleVStateProgram_GetParam(a2, v622 - 56);
      v747.i64[1] = gleVStateProgram_GetAttrib(a2, 2);
      *(int8x16_t *)((char *)v908 + 8) = vorrq_s8((int8x16_t)vshlq_n_s64(v747, 0x30uLL), (int8x16_t)xmmword_22D807680);
      v748 = *(unsigned __int16 *)(a2 + 1946);
      if ((_DWORD)v748 == 0xFFFF)
      {
        v748 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1946) = v748;
        *(_WORD *)(a2 + 2004) = v748 + 1;
      }
      *(_QWORD *)&v908[0] = (v748 << 48) | 0x72679000;
      (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
      memset(v908, 0, 72);
      v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
      *(_DWORD *)(a2 + 16) = 3;
      v749 = *(unsigned __int16 *)(a2 + 1912);
      if ((_DWORD)v749 == 0xFFFF)
      {
        v749 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1912) = v749;
        *(_WORD *)(a2 + 2004) = v749 + 1;
      }
      *((_QWORD *)&v908[0] + 1) = (v749 << 48) | 0xAA40;
      v743 = ((gleVStateProgram_GetParam(a2, v905 + 16) << 48) | 0x19C840) + 64;
LABEL_1162:
      *(_QWORD *)&v908[1] = v743;
      v750 = *(unsigned __int16 *)(a2 + 1946);
      if (v750 != 0xFFFF)
      {
        v746 = v750 << 48;
        *((_QWORD *)&v908[1] + 1) = ((unint64_t)(unsigned __int16)v750 << 48) | 0x19C840;
        goto LABEL_1167;
      }
      v751 = *(unsigned __int16 *)(a2 + 2004);
      v752 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1946) = v751;
      *(_WORD *)(a2 + 2004) = ++v752;
      *((_QWORD *)&v908[1] + 1) = ((unint64_t)(unsigned __int16)v751 << 48) | 0x19C840;
      if ((v752 & 0x10000) == 0)
        goto LABEL_1166;
LABEL_1165:
      v751 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1946) = v751;
      *(_WORD *)(a2 + 2004) = v751 + 1;
LABEL_1166:
      v746 = v751 << 48;
      goto LABEL_1167;
    }
    if ((v892 & 4) != 0)
    {
      v907 = v735 | 0x3100000882;
      *(_DWORD *)(a2 + 16) = 2;
      v764.i64[0] = gleVStateProgram_GetParam(a2, v622 - 48);
      v764.i64[1] = gleVStateProgram_GetAttrib(a2, 2);
      *(int8x16_t *)((char *)v908 + 8) = vorrq_s8((int8x16_t)vshlq_n_s64(v764, 0x30uLL), (int8x16_t)xmmword_22D807680);
      v765 = *(unsigned __int16 *)(a2 + 1962);
      if ((_DWORD)v765 == 0xFFFF)
      {
        v765 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1962) = v765;
        *(_WORD *)(a2 + 2004) = v765 + 1;
      }
      *(_QWORD *)&v908[0] = (v765 << 48) | 0x72679000;
      (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
      memset(v908, 0, 72);
      v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
      *(_DWORD *)(a2 + 16) = 3;
      v766 = *(unsigned __int16 *)(a2 + 1912);
      if ((_DWORD)v766 == 0xFFFF)
      {
        v766 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1912) = v766;
        *(_WORD *)(a2 + 2004) = v766 + 1;
      }
      *((_QWORD *)&v908[0] + 1) = (v766 << 48) | 0xAA40;
      v767 = *(unsigned __int16 *)(a2 + 1962);
      if ((_DWORD)v767 == 0xFFFF)
      {
        v767 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1962) = v767;
        *(_WORD *)(a2 + 2004) = v767 + 1;
      }
      *(_QWORD *)&v908[1] = (v767 << 48) | 0x19C840;
      *((_QWORD *)&v908[1] + 1) = ((gleVStateProgram_GetParam(a2, v905) << 48) | 0x19C840) + 64;
      v751 = *(unsigned __int16 *)(a2 + 1946);
      if ((_DWORD)v751 != 0xFFFF)
        goto LABEL_1166;
      goto LABEL_1165;
    }
    v907 = v735 | 0x3100000FC3;
    *(_DWORD *)(a2 + 16) = 3;
    v744 = *(unsigned __int16 *)(a2 + 1912);
    if ((_DWORD)v744 == 0xFFFF)
    {
      v744 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1912) = v744;
      *(_WORD *)(a2 + 2004) = v744 + 1;
    }
    *((_QWORD *)&v908[0] + 1) = (v744 << 48) | 0xAA40;
    *(_QWORD *)&v908[1] = (gleVStateProgram_GetParam(a2, v905 + 16) << 48) | 0x19C880;
    *((_QWORD *)&v908[1] + 1) = (gleVStateProgram_GetParam(a2, v905) << 48) | 0x19C880;
    v745 = *(unsigned __int16 *)(a2 + 1946);
    if ((_DWORD)v745 == 0xFFFF)
    {
      v745 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1946) = v745;
      *(_WORD *)(a2 + 2004) = v745 + 1;
    }
    v746 = v745 << 48;
LABEL_1167:
    *(_QWORD *)&v908[0] = v746 | 0x72679000;
    (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
    if ((*a1 & 0x1000000000000) == 0)
      goto LABEL_1204;
    memset(v908, 0, 72);
    v753 = 8 * (*(_DWORD *)(a2 + 16) & 7);
    if ((v23 & 6) == 6)
    {
      v907 = v753 | 0x3100000882;
      *(_DWORD *)(a2 + 16) = 2;
      v754.i64[0] = gleVStateProgram_GetParam(a2, v622 - 56);
      v754.i64[1] = gleVStateProgram_GetAttrib(a2, 2);
      *(int8x16_t *)((char *)v908 + 8) = vorrq_s8((int8x16_t)vshlq_n_s64(v754, 0x30uLL), (int8x16_t)xmmword_22D807680);
      v755 = *(unsigned __int16 *)(a2 + 1954);
      if ((_DWORD)v755 == 0xFFFF)
      {
        v755 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1954) = v755;
        *(_WORD *)(a2 + 2004) = v755 + 1;
      }
      *(_QWORD *)&v908[0] = (v755 << 48) | 0x72679000;
      (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
      memset(v908, 0, 72);
      v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
      *(_DWORD *)(a2 + 16) = 2;
      v756.i64[0] = gleVStateProgram_GetParam(a2, v622 - 48);
      v756.i64[1] = gleVStateProgram_GetAttrib(a2, 2);
      *(int8x16_t *)((char *)v908 + 8) = vorrq_s8((int8x16_t)vshlq_n_s64(v756, 0x30uLL), (int8x16_t)xmmword_22D807680);
      v757 = *(unsigned __int16 *)(a2 + 1970);
      if ((_DWORD)v757 == 0xFFFF)
      {
        v757 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1970) = v757;
        *(_WORD *)(a2 + 2004) = v757 + 1;
      }
      *(_QWORD *)&v908[0] = (v757 << 48) | 0x72679000;
      (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
      memset(v908, 0, 72);
      v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
      *(_DWORD *)(a2 + 16) = 3;
      v758 = *(unsigned __int16 *)(a2 + 1914);
      if ((_DWORD)v758 == 0xFFFF)
      {
        v758 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1914) = v758;
        *(_WORD *)(a2 + 2004) = v758 + 1;
      }
      *((_QWORD *)&v908[0] + 1) = (v758 << 48) | 0xAA40;
      v759 = *(unsigned __int16 *)(a2 + 1970);
      v742 = v905;
      if ((_DWORD)v759 == 0xFFFF)
      {
        v759 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1970) = v759;
        *(_WORD *)(a2 + 2004) = v759 + 1;
      }
      v760 = (v759 << 48) | 0x19C840;
    }
    else
    {
      if ((v23 & 2) == 0)
      {
        if ((v23 & 4) == 0)
        {
          v907 = v753 | 0x3100000FC3;
          *(_DWORD *)(a2 + 16) = 3;
          v761 = *(unsigned __int16 *)(a2 + 1914);
          if ((_DWORD)v761 == 0xFFFF)
          {
            v761 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1914) = v761;
            *(_WORD *)(a2 + 2004) = v761 + 1;
          }
          *((_QWORD *)&v908[0] + 1) = (v761 << 48) | 0xAA40;
          *(_QWORD *)&v908[1] = (gleVStateProgram_GetParam(a2, v742 + 17) << 48) | 0x19C880;
          *((_QWORD *)&v908[1] + 1) = (gleVStateProgram_GetParam(a2, v742 + 1) << 48) | 0x19C880;
          v762 = *(unsigned __int16 *)(a2 + 1954);
          if ((_DWORD)v762 == 0xFFFF)
          {
            v762 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1954) = v762;
            *(_WORD *)(a2 + 2004) = v762 + 1;
          }
          v763 = v762 << 48;
          goto LABEL_1203;
        }
        v907 = v753 | 0x3100000882;
        *(_DWORD *)(a2 + 16) = 2;
        v810.i64[0] = gleVStateProgram_GetParam(a2, v622 - 48);
        v810.i64[1] = gleVStateProgram_GetAttrib(a2, 2);
        *(int8x16_t *)((char *)v908 + 8) = vorrq_s8((int8x16_t)vshlq_n_s64(v810, 0x30uLL), (int8x16_t)xmmword_22D807680);
        v811 = *(unsigned __int16 *)(a2 + 1970);
        if ((_DWORD)v811 == 0xFFFF)
        {
          v811 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1970) = v811;
          *(_WORD *)(a2 + 2004) = v811 + 1;
        }
        *(_QWORD *)&v908[0] = (v811 << 48) | 0x72679000;
        (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
        memset(v908, 0, 72);
        v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
        *(_DWORD *)(a2 + 16) = 3;
        v812 = *(unsigned __int16 *)(a2 + 1914);
        if ((_DWORD)v812 == 0xFFFF)
        {
          v812 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1914) = v812;
          *(_WORD *)(a2 + 2004) = v812 + 1;
        }
        *((_QWORD *)&v908[0] + 1) = (v812 << 48) | 0xAA40;
        v813 = *(unsigned __int16 *)(a2 + 1970);
        if ((_DWORD)v813 == 0xFFFF)
        {
          v813 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1970) = v813;
          *(_WORD *)(a2 + 2004) = v813 + 1;
        }
        *(_QWORD *)&v908[1] = (v813 << 48) | 0x19C840;
        *((_QWORD *)&v908[1] + 1) = ((gleVStateProgram_GetParam(a2, v742 + 1) << 48) | 0x19C840) + 64;
        v772 = *(unsigned __int16 *)(a2 + 1954);
        if ((_DWORD)v772 != 0xFFFF)
          goto LABEL_1202;
        goto LABEL_1201;
      }
      v907 = v753 | 0x3100000882;
      *(_DWORD *)(a2 + 16) = 2;
      v768.i64[0] = gleVStateProgram_GetParam(a2, v622 - 56);
      v768.i64[1] = gleVStateProgram_GetAttrib(a2, 2);
      *(int8x16_t *)((char *)v908 + 8) = vorrq_s8((int8x16_t)vshlq_n_s64(v768, 0x30uLL), (int8x16_t)xmmword_22D807680);
      v769 = *(unsigned __int16 *)(a2 + 1954);
      if ((_DWORD)v769 == 0xFFFF)
      {
        v769 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1954) = v769;
        *(_WORD *)(a2 + 2004) = v769 + 1;
      }
      *(_QWORD *)&v908[0] = (v769 << 48) | 0x72679000;
      (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
      memset(v908, 0, 72);
      v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
      *(_DWORD *)(a2 + 16) = 3;
      v770 = *(unsigned __int16 *)(a2 + 1914);
      if ((_DWORD)v770 == 0xFFFF)
      {
        v770 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1914) = v770;
        *(_WORD *)(a2 + 2004) = v770 + 1;
      }
      *((_QWORD *)&v908[0] + 1) = (v770 << 48) | 0xAA40;
      v760 = ((gleVStateProgram_GetParam(a2, v742 + 17) << 48) | 0x19C840) + 64;
    }
    *(_QWORD *)&v908[1] = v760;
    v771 = *(unsigned __int16 *)(a2 + 1954);
    if (v771 == 0xFFFF)
    {
      v772 = *(unsigned __int16 *)(a2 + 2004);
      v773 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1954) = v772;
      *(_WORD *)(a2 + 2004) = ++v773;
      *((_QWORD *)&v908[1] + 1) = ((unint64_t)(unsigned __int16)v772 << 48) | 0x19C840;
      if ((v773 & 0x10000) == 0)
      {
LABEL_1202:
        v763 = v772 << 48;
        goto LABEL_1203;
      }
LABEL_1201:
      v772 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1954) = v772;
      *(_WORD *)(a2 + 2004) = v772 + 1;
      goto LABEL_1202;
    }
    v763 = v771 << 48;
    *((_QWORD *)&v908[1] + 1) = ((unint64_t)(unsigned __int16)v771 << 48) | 0x19C840;
LABEL_1203:
    *(_QWORD *)&v908[0] = v763 | 0x72679000;
    (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
LABEL_1204:
    v774 = *a1;
    memset(v908, 0, 72);
    v775 = 8 * (*(_DWORD *)(a2 + 16) & 7);
    if ((v774 & 0x8000000000000000) == 0)
    {
      if (v892 >= 8)
      {
        v907 = v775 | 0x3100000882;
        *(_DWORD *)(a2 + 16) = 2;
        v780.i64[0] = gleVStateProgram_GetParam(a2, v622 - 40);
        v780.i64[1] = gleVStateProgram_GetAttrib(a2, 2);
        *(int8x16_t *)((char *)v908 + 8) = vorrq_s8((int8x16_t)vshlq_n_s64(v780, 0x30uLL), (int8x16_t)xmmword_22D807680);
        v781 = *(unsigned __int16 *)(a2 + 1962);
        if ((_DWORD)v781 == 0xFFFF)
        {
          v781 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1962) = v781;
          *(_WORD *)(a2 + 2004) = v781 + 1;
        }
        *(_QWORD *)&v908[0] = (v781 << 48) | 0x72679000;
        (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
        memset(v908, 0, 72);
        v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
        *(_DWORD *)(a2 + 16) = 3;
        v782 = *(unsigned __int16 *)(a2 + 1912);
        if ((_DWORD)v782 == 0xFFFF)
        {
          v782 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1912) = v782;
          *(_WORD *)(a2 + 2004) = v782 + 1;
        }
        *((_QWORD *)&v908[0] + 1) = (v782 << 48) | 0x15440;
        v783 = *(unsigned __int16 *)(a2 + 1962);
        if ((_DWORD)v783 == 0xFFFF)
        {
          v783 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1962) = v783;
          *(_WORD *)(a2 + 2004) = v783 + 1;
        }
        v777 = (v783 << 48) | 0x19C840;
      }
      else
      {
        v907 = v775 | 0x3100000FC3;
        *(_DWORD *)(a2 + 16) = 3;
        v776 = *(unsigned __int16 *)(a2 + 1912);
        if ((_DWORD)v776 == 0xFFFF)
        {
          v776 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1912) = v776;
          *(_WORD *)(a2 + 2004) = v776 + 1;
        }
        *((_QWORD *)&v908[0] + 1) = (v776 << 48) | 0x15440;
        v777 = ((gleVStateProgram_GetParam(a2, v742 + 32) << 48) | 0x19C840) + 64;
      }
      *(_QWORD *)&v908[1] = v777;
      v784 = *(unsigned __int16 *)(a2 + 1946);
      if (v784 != 0xFFFF)
      {
        v785 = v784 << 48;
        *((_QWORD *)&v908[1] + 1) = ((unint64_t)(unsigned __int16)v784 << 48) | 0x19C840;
        goto LABEL_1237;
      }
      v779 = *(unsigned __int16 *)(a2 + 2004);
      v790 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1946) = v779;
      *(_WORD *)(a2 + 2004) = ++v790;
      *((_QWORD *)&v908[1] + 1) = ((unint64_t)(unsigned __int16)v779 << 48) | 0x19C840;
      if ((v790 & 0x10000) == 0)
        goto LABEL_1236;
      v779 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1946) = v779;
      goto LABEL_1235;
    }
    v907 = v775 | 0x3100000882;
    *(_DWORD *)(a2 + 16) = 2;
    if (v892 < 8)
    {
      v778 = *(unsigned __int16 *)(a2 + 1912);
      if ((_DWORD)v778 == 0xFFFF)
      {
        v778 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1912) = v778;
        *(_WORD *)(a2 + 2004) = v778 + 1;
      }
      *((_QWORD *)&v908[0] + 1) = (v778 << 48) | 0x15440;
      *(_QWORD *)&v908[1] = ((gleVStateProgram_GetParam(a2, v742 + 32) << 48) | 0x19C840) + 64;
      v779 = *(unsigned __int16 *)(a2 + 1962);
      if ((_DWORD)v779 != 0xFFFF)
        goto LABEL_1236;
LABEL_1234:
      v779 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1962) = v779;
LABEL_1235:
      *(_WORD *)(a2 + 2004) = v779 + 1;
      goto LABEL_1236;
    }
    v786.i64[0] = gleVStateProgram_GetParam(a2, v622 - 40);
    v786.i64[1] = gleVStateProgram_GetAttrib(a2, 2);
    *(int8x16_t *)((char *)v908 + 8) = vorrq_s8((int8x16_t)vshlq_n_s64(v786, 0x30uLL), (int8x16_t)xmmword_22D807680);
    v787 = *(unsigned __int16 *)(a2 + 1962);
    if ((_DWORD)v787 == 0xFFFF)
    {
      v787 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1962) = v787;
      *(_WORD *)(a2 + 2004) = v787 + 1;
    }
    *(_QWORD *)&v908[0] = (v787 << 48) | 0x72679000;
    (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
    memset(v908, 0, 72);
    v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
    *(_DWORD *)(a2 + 16) = 2;
    v788 = *(unsigned __int16 *)(a2 + 1912);
    if ((_DWORD)v788 == 0xFFFF)
    {
      v788 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1912) = v788;
      *(_WORD *)(a2 + 2004) = v788 + 1;
    }
    *((_QWORD *)&v908[0] + 1) = (v788 << 48) | 0x15440;
    v789 = *(unsigned __int16 *)(a2 + 1962);
    if (v789 != 0xFFFF)
    {
      v785 = v789 << 48;
      *(_QWORD *)&v908[1] = ((unint64_t)(unsigned __int16)v789 << 48) | 0x19C840;
      goto LABEL_1237;
    }
    v779 = *(unsigned __int16 *)(a2 + 2004);
    v792 = *(unsigned __int16 *)(a2 + 2004);
    *(_WORD *)(a2 + 1962) = v779;
    *(_WORD *)(a2 + 2004) = ++v792;
    *(_QWORD *)&v908[1] = ((unint64_t)(unsigned __int16)v779 << 48) | 0x19C840;
    if ((v792 & 0x10000) != 0)
      goto LABEL_1234;
LABEL_1236:
    v785 = v779 << 48;
LABEL_1237:
    *(_QWORD *)&v908[0] = v785 | 0x72679000;
    (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
    v793 = *a1;
    if ((*a1 & 0x1000000000000) == 0)
      goto LABEL_1278;
    memset(v908, 0, 72);
    v794 = 8 * (*(_DWORD *)(a2 + 16) & 7);
    if ((v793 & 0x8000000000000000) != 0)
    {
      v907 = v794 | 0x3100000882;
      *(_DWORD *)(a2 + 16) = 2;
      if (v23 >= 8)
      {
        v805.i64[0] = gleVStateProgram_GetParam(a2, v622 - 40);
        v805.i64[1] = gleVStateProgram_GetAttrib(a2, 2);
        *(int8x16_t *)((char *)v908 + 8) = vorrq_s8((int8x16_t)vshlq_n_s64(v805, 0x30uLL), (int8x16_t)xmmword_22D807680);
        v806 = *(unsigned __int16 *)(a2 + 1970);
        if ((_DWORD)v806 == 0xFFFF)
        {
          v806 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1970) = v806;
          *(_WORD *)(a2 + 2004) = v806 + 1;
        }
        *(_QWORD *)&v908[0] = (v806 << 48) | 0x72679000;
        (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
        memset(v908, 0, 72);
        v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
        *(_DWORD *)(a2 + 16) = 2;
        v807 = *(unsigned __int16 *)(a2 + 1914);
        if ((_DWORD)v807 == 0xFFFF)
        {
          v807 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1914) = v807;
          *(_WORD *)(a2 + 2004) = v807 + 1;
        }
        *((_QWORD *)&v908[0] + 1) = (v807 << 48) | 0x15440;
        v808 = *(unsigned __int16 *)(a2 + 1970);
        if (v808 != 0xFFFF)
        {
          v804 = v808 << 48;
          *(_QWORD *)&v908[1] = ((unint64_t)(unsigned __int16)v808 << 48) | 0x19C840;
          goto LABEL_1277;
        }
        v798 = *(unsigned __int16 *)(a2 + 2004);
        v814 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1970) = v798;
        *(_WORD *)(a2 + 2004) = ++v814;
        *(_QWORD *)&v908[1] = ((unint64_t)(unsigned __int16)v798 << 48) | 0x19C840;
        if ((v814 & 0x10000) == 0)
          goto LABEL_1276;
      }
      else
      {
        v797 = *(unsigned __int16 *)(a2 + 1914);
        if ((_DWORD)v797 == 0xFFFF)
        {
          v797 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1914) = v797;
          *(_WORD *)(a2 + 2004) = v797 + 1;
        }
        *((_QWORD *)&v908[0] + 1) = (v797 << 48) | 0x15440;
        *(_QWORD *)&v908[1] = ((gleVStateProgram_GetParam(a2, v742 + 33) << 48) | 0x19C840) + 64;
        v798 = *(unsigned __int16 *)(a2 + 1970);
        if ((_DWORD)v798 != 0xFFFF)
          goto LABEL_1276;
      }
      v798 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1970) = v798;
      goto LABEL_1275;
    }
    if (v23 >= 8)
    {
      v907 = v794 | 0x3100000882;
      *(_DWORD *)(a2 + 16) = 2;
      v799.i64[0] = gleVStateProgram_GetParam(a2, v622 - 40);
      v799.i64[1] = gleVStateProgram_GetAttrib(a2, 2);
      *(int8x16_t *)((char *)v908 + 8) = vorrq_s8((int8x16_t)vshlq_n_s64(v799, 0x30uLL), (int8x16_t)xmmword_22D807680);
      v800 = *(unsigned __int16 *)(a2 + 1970);
      if ((_DWORD)v800 == 0xFFFF)
      {
        v800 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1970) = v800;
        *(_WORD *)(a2 + 2004) = v800 + 1;
      }
      *(_QWORD *)&v908[0] = (v800 << 48) | 0x72679000;
      (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
      memset(v908, 0, 72);
      v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
      *(_DWORD *)(a2 + 16) = 3;
      v801 = *(unsigned __int16 *)(a2 + 1914);
      if ((_DWORD)v801 == 0xFFFF)
      {
        v801 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1914) = v801;
        *(_WORD *)(a2 + 2004) = v801 + 1;
      }
      *((_QWORD *)&v908[0] + 1) = (v801 << 48) | 0x15440;
      v802 = *(unsigned __int16 *)(a2 + 1970);
      if ((_DWORD)v802 == 0xFFFF)
      {
        v802 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1970) = v802;
        *(_WORD *)(a2 + 2004) = v802 + 1;
      }
      v796 = (v802 << 48) | 0x19C840;
    }
    else
    {
      v907 = v794 | 0x3100000FC3;
      *(_DWORD *)(a2 + 16) = 3;
      v795 = *(unsigned __int16 *)(a2 + 1914);
      if ((_DWORD)v795 == 0xFFFF)
      {
        v795 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1914) = v795;
        *(_WORD *)(a2 + 2004) = v795 + 1;
      }
      *((_QWORD *)&v908[0] + 1) = (v795 << 48) | 0x15440;
      v796 = ((gleVStateProgram_GetParam(a2, v742 + 33) << 48) | 0x19C840) + 64;
    }
    *(_QWORD *)&v908[1] = v796;
    v803 = *(unsigned __int16 *)(a2 + 1954);
    if (v803 == 0xFFFF)
    {
      v798 = *(unsigned __int16 *)(a2 + 2004);
      v809 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1954) = v798;
      *(_WORD *)(a2 + 2004) = ++v809;
      *((_QWORD *)&v908[1] + 1) = ((unint64_t)(unsigned __int16)v798 << 48) | 0x19C840;
      if ((v809 & 0x10000) != 0)
      {
        v798 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1954) = v798;
LABEL_1275:
        *(_WORD *)(a2 + 2004) = v798 + 1;
      }
LABEL_1276:
      v804 = v798 << 48;
      goto LABEL_1277;
    }
    v804 = v803 << 48;
    *((_QWORD *)&v908[1] + 1) = ((unint64_t)(unsigned __int16)v803 << 48) | 0x19C840;
LABEL_1277:
    *(_QWORD *)&v908[0] = v804 | 0x72679000;
    (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
LABEL_1278:
    memset(v908, 0, 72);
    v815 = 8 * (*(_DWORD *)(a2 + 16) & 7);
    if (((v902 | v901) & 1) != 0)
    {
      v907 = v815 | 0x3100000FC3;
      *(_DWORD *)(a2 + 16) = 3;
      v816 = *(unsigned __int16 *)(a2 + 1940);
      if ((_DWORD)v816 == 0xFFFF)
      {
        v816 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1940) = v816;
        *(_WORD *)(a2 + 2004) = v816 + 1;
      }
      *((_QWORD *)&v908[0] + 1) = (v816 << 48) | 0x19C840;
      v817 = *(unsigned __int16 *)(a2 + 1946);
      if ((_DWORD)v817 == 0xFFFF)
      {
        v817 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1946) = v817;
        *(_WORD *)(a2 + 2004) = v817 + 1;
      }
      *(_QWORD *)&v908[1] = (v817 << 48) | 0x19C840;
      v818 = *(unsigned __int16 *)(a2 + 1904);
      if (v818 == 0xFFFF)
      {
        v823 = *(unsigned __int16 *)(a2 + 2004);
        v824 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1904) = v823;
        *(_WORD *)(a2 + 2004) = ++v824;
        *((_QWORD *)&v908[1] + 1) = ((unint64_t)(unsigned __int16)v823 << 48) | 0x19C840;
        if ((v824 & 0x10000) != 0)
        {
          v823 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1904) = v823;
          *(_WORD *)(a2 + 2004) = v823 + 1;
        }
        v819 = v823 << 48;
      }
      else
      {
        v819 = v818 << 48;
        *((_QWORD *)&v908[1] + 1) = ((unint64_t)(unsigned __int16)v818 << 48) | 0x19C840;
      }
      *(_QWORD *)&v908[0] = v819 | 0x72679000;
      (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
      if ((*a1 & 0x8000000000000000) != 0)
      {
        if (v900)
        {
          memset(v908, 0, 72);
          v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
          *(_DWORD *)(a2 + 16) = 3;
          v825 = *(unsigned __int16 *)(a2 + 1940);
          if ((_DWORD)v825 == 0xFFFF)
          {
            v825 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1940) = v825;
            *(_WORD *)(a2 + 2004) = v825 + 1;
          }
          *((_QWORD *)&v908[0] + 1) = (v825 << 48) | 0x19C840;
          v826 = *(unsigned __int16 *)(a2 + 1962);
          if ((_DWORD)v826 == 0xFFFF)
          {
            v826 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1962) = v826;
            *(_WORD *)(a2 + 2004) = v826 + 1;
          }
          *(_QWORD *)&v908[1] = (v826 << 48) | 0x19C840;
          v827 = *(unsigned __int16 *)(a2 + 1908);
          if (v827 != 0xFFFF)
          {
            v828 = v827 << 48;
            *((_QWORD *)&v908[1] + 1) = ((unint64_t)(unsigned __int16)v827 << 48) | 0x19C840;
LABEL_1320:
            *(_QWORD *)&v908[0] = v828 | 0x72679000;
            (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
            goto LABEL_1321;
          }
          v836 = *(unsigned __int16 *)(a2 + 2004);
          v855 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1908) = v836;
          *(_WORD *)(a2 + 2004) = ++v855;
          *((_QWORD *)&v908[1] + 1) = ((unint64_t)(unsigned __int16)v836 << 48) | 0x19C840;
          if ((v855 & 0x10000) == 0)
            goto LABEL_1319;
          goto LABEL_1318;
        }
        *(_OWORD *)((char *)&v908[2] + 8) = 0uLL;
        *(_OWORD *)((char *)&v908[3] + 8) = 0uLL;
        *(_OWORD *)((char *)&v908[1] + 8) = 0uLL;
        v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
        *(_DWORD *)(a2 + 16) = 2;
        v833 = *(unsigned __int16 *)(a2 + 1940);
        if ((_DWORD)v833 == 0xFFFF)
        {
          v833 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1940) = v833;
          *(_WORD *)(a2 + 2004) = v833 + 1;
        }
        *((_QWORD *)&v908[0] + 1) = (v833 << 48) | 0x19C840;
        v834 = *(unsigned __int16 *)(a2 + 1962);
        if ((_DWORD)v834 == 0xFFFF)
        {
          v834 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1962) = v834;
          *(_WORD *)(a2 + 2004) = v834 + 1;
        }
        *(_QWORD *)&v908[1] = (v834 << 48) | 0x19C840;
        goto LABEL_1317;
      }
    }
    else
    {
      v907 = v815 | 0x31000007C2;
      *(_DWORD *)(a2 + 16) = 2;
      v820 = *(unsigned __int16 *)(a2 + 1946);
      if ((_DWORD)v820 == 0xFFFF)
      {
        v820 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1946) = v820;
        *(_WORD *)(a2 + 2004) = v820 + 1;
      }
      *((_QWORD *)&v908[0] + 1) = (v820 << 48) | 0x19C840;
      v821 = *(unsigned __int16 *)(a2 + 1904);
      if (v821 == 0xFFFF)
      {
        v829 = *(unsigned __int16 *)(a2 + 2004);
        v830 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1904) = v829;
        *(_WORD *)(a2 + 2004) = ++v830;
        *(_QWORD *)&v908[1] = ((unint64_t)(unsigned __int16)v829 << 48) | 0x19C840;
        if ((v830 & 0x10000) != 0)
        {
          v829 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1904) = v829;
          *(_WORD *)(a2 + 2004) = v829 + 1;
        }
        v822 = v829 << 48;
      }
      else
      {
        v822 = v821 << 48;
        *(_QWORD *)&v908[1] = ((unint64_t)(unsigned __int16)v821 << 48) | 0x19C840;
      }
      *(_QWORD *)&v908[0] = v822 | 0x72679000;
      (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
      if ((*a1 & 0x8000000000000000) != 0)
      {
        if (v900)
        {
          memset(v908, 0, 72);
          v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x31000007C2;
          *(_DWORD *)(a2 + 16) = 2;
          v831 = *(unsigned __int16 *)(a2 + 1962);
          if ((_DWORD)v831 == 0xFFFF)
          {
            v831 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1962) = v831;
            *(_WORD *)(a2 + 2004) = v831 + 1;
          }
          *((_QWORD *)&v908[0] + 1) = (v831 << 48) | 0x19C840;
          v832 = *(unsigned __int16 *)(a2 + 1908);
          if (v832 != 0xFFFF)
          {
            v828 = v832 << 48;
            *(_QWORD *)&v908[1] = ((unint64_t)(unsigned __int16)v832 << 48) | 0x19C840;
            goto LABEL_1320;
          }
          v836 = *(unsigned __int16 *)(a2 + 2004);
          v856 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1908) = v836;
          *(_WORD *)(a2 + 2004) = ++v856;
          *(_QWORD *)&v908[1] = ((unint64_t)(unsigned __int16)v836 << 48) | 0x19C840;
          if ((v856 & 0x10000) == 0)
          {
LABEL_1319:
            v828 = v836 << 48;
            goto LABEL_1320;
          }
LABEL_1318:
          v836 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1908) = v836;
          *(_WORD *)(a2 + 2004) = v836 + 1;
          goto LABEL_1319;
        }
        memset(&v908[1], 0, 56);
        v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
        *(_DWORD *)(a2 + 16) = 1;
        v835 = *(unsigned __int16 *)(a2 + 1962);
        if ((_DWORD)v835 == 0xFFFF)
        {
          v835 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1962) = v835;
          *(_WORD *)(a2 + 2004) = v835 + 1;
        }
        *((_QWORD *)&v908[0] + 1) = (v835 << 48) | 0x19C840;
LABEL_1317:
        v836 = *(unsigned __int16 *)(a2 + 1908);
        if ((_DWORD)v836 != 0xFFFF)
          goto LABEL_1319;
        goto LABEL_1318;
      }
    }
LABEL_1321:
    v623 = 0uLL;
    if ((*a1 & 0x1000000000000) == 0)
    {
      v900 = 1;
      v621 = v905;
      goto LABEL_1373;
    }
    memset(v908, 0, 72);
    v837 = 8 * (*(_DWORD *)(a2 + 16) & 7);
    if (((v902 | v901) & 1) != 0)
    {
      v907 = v837 | 0x3100000FC3;
      *(_DWORD *)(a2 + 16) = 3;
      v838 = *(unsigned __int16 *)(a2 + 1940);
      if ((_DWORD)v838 == 0xFFFF)
      {
        v838 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1940) = v838;
        *(_WORD *)(a2 + 2004) = v838 + 1;
      }
      *((_QWORD *)&v908[0] + 1) = (v838 << 48) | 0x19C840;
      v839 = *(unsigned __int16 *)(a2 + 1954);
      v621 = v905;
      if ((_DWORD)v839 == 0xFFFF)
      {
        v839 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1954) = v839;
        *(_WORD *)(a2 + 2004) = v839 + 1;
      }
      *(_QWORD *)&v908[1] = (v839 << 48) | 0x19C840;
      v840 = *(unsigned __int16 *)(a2 + 1906);
      if (v840 == 0xFFFF)
      {
        v845 = *(unsigned __int16 *)(a2 + 2004);
        v846 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1906) = v845;
        *(_WORD *)(a2 + 2004) = ++v846;
        *((_QWORD *)&v908[1] + 1) = ((unint64_t)(unsigned __int16)v845 << 48) | 0x19C840;
        if ((v846 & 0x10000) != 0)
        {
          v845 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1906) = v845;
          *(_WORD *)(a2 + 2004) = v845 + 1;
        }
        v841 = v845 << 48;
      }
      else
      {
        v841 = v840 << 48;
        *((_QWORD *)&v908[1] + 1) = ((unint64_t)(unsigned __int16)v840 << 48) | 0x19C840;
      }
      *(_QWORD *)&v908[0] = v841 | 0x72679000;
      (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
      if ((*a1 & 0x8000000000000000) == 0)
        goto LABEL_1371;
      if (v900)
      {
        memset(v908, 0, 72);
        v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
        *(_DWORD *)(a2 + 16) = 3;
        v847 = *(unsigned __int16 *)(a2 + 1940);
        if ((_DWORD)v847 == 0xFFFF)
        {
          v847 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1940) = v847;
          *(_WORD *)(a2 + 2004) = v847 + 1;
        }
        *((_QWORD *)&v908[0] + 1) = (v847 << 48) | 0x19C840;
        v848 = *(unsigned __int16 *)(a2 + 1970);
        if ((_DWORD)v848 == 0xFFFF)
        {
          v848 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1970) = v848;
          *(_WORD *)(a2 + 2004) = v848 + 1;
        }
        *(_QWORD *)&v908[1] = (v848 << 48) | 0x19C840;
        v849 = *(unsigned __int16 *)(a2 + 1910);
        if (v849 != 0xFFFF)
        {
          v850 = v849 << 48;
          *((_QWORD *)&v908[1] + 1) = ((unint64_t)(unsigned __int16)v849 << 48) | 0x19C840;
LABEL_1370:
          *(_QWORD *)&v908[0] = v850 | 0x72679000;
          (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
LABEL_1371:
          v900 = 1;
          goto LABEL_1372;
        }
        v860 = *(unsigned __int16 *)(a2 + 2004);
        v862 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1910) = v860;
        *(_WORD *)(a2 + 2004) = ++v862;
        *((_QWORD *)&v908[1] + 1) = ((unint64_t)(unsigned __int16)v860 << 48) | 0x19C840;
        if ((v862 & 0x10000) == 0)
          goto LABEL_1369;
        goto LABEL_1368;
      }
      *(_OWORD *)((char *)&v908[2] + 8) = 0uLL;
      *(_OWORD *)((char *)&v908[3] + 8) = 0uLL;
      *(_OWORD *)((char *)&v908[1] + 8) = 0uLL;
      v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
      *(_DWORD *)(a2 + 16) = 2;
      v857 = *(unsigned __int16 *)(a2 + 1940);
      if ((_DWORD)v857 == 0xFFFF)
      {
        v857 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1940) = v857;
        *(_WORD *)(a2 + 2004) = v857 + 1;
      }
      *((_QWORD *)&v908[0] + 1) = (v857 << 48) | 0x19C840;
      v858 = *(unsigned __int16 *)(a2 + 1970);
      if ((_DWORD)v858 == 0xFFFF)
      {
        v858 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1970) = v858;
        *(_WORD *)(a2 + 2004) = v858 + 1;
      }
      *(_QWORD *)&v908[1] = (v858 << 48) | 0x19C840;
      goto LABEL_1367;
    }
    v907 = v837 | 0x31000007C2;
    *(_DWORD *)(a2 + 16) = 2;
    v842 = *(unsigned __int16 *)(a2 + 1954);
    if ((_DWORD)v842 == 0xFFFF)
    {
      v842 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1954) = v842;
      *(_WORD *)(a2 + 2004) = v842 + 1;
    }
    *((_QWORD *)&v908[0] + 1) = (v842 << 48) | 0x19C840;
    v843 = *(unsigned __int16 *)(a2 + 1906);
    if (v843 == 0xFFFF)
    {
      v851 = *(unsigned __int16 *)(a2 + 2004);
      v852 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1906) = v851;
      *(_WORD *)(a2 + 2004) = ++v852;
      *(_QWORD *)&v908[1] = ((unint64_t)(unsigned __int16)v851 << 48) | 0x19C840;
      v621 = v905;
      if ((v852 & 0x10000) != 0)
      {
        v851 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1906) = v851;
        *(_WORD *)(a2 + 2004) = v851 + 1;
      }
      v844 = v851 << 48;
    }
    else
    {
      v844 = v843 << 48;
      *(_QWORD *)&v908[1] = ((unint64_t)(unsigned __int16)v843 << 48) | 0x19C840;
      v621 = v905;
    }
    *(_QWORD *)&v908[0] = v844 | 0x72679000;
    (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
    if ((*a1 & 0x8000000000000000) != 0)
    {
      if (v900)
      {
        memset(v908, 0, 72);
        v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x31000007C2;
        *(_DWORD *)(a2 + 16) = 2;
        v853 = *(unsigned __int16 *)(a2 + 1970);
        if ((_DWORD)v853 == 0xFFFF)
        {
          v853 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1970) = v853;
          *(_WORD *)(a2 + 2004) = v853 + 1;
        }
        *((_QWORD *)&v908[0] + 1) = (v853 << 48) | 0x19C840;
        v854 = *(unsigned __int16 *)(a2 + 1910);
        if (v854 != 0xFFFF)
        {
          v850 = v854 << 48;
          *(_QWORD *)&v908[1] = ((unint64_t)(unsigned __int16)v854 << 48) | 0x19C840;
          goto LABEL_1370;
        }
        v860 = *(unsigned __int16 *)(a2 + 2004);
        v863 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1910) = v860;
        *(_WORD *)(a2 + 2004) = ++v863;
        *(_QWORD *)&v908[1] = ((unint64_t)(unsigned __int16)v860 << 48) | 0x19C840;
        if ((v863 & 0x10000) == 0)
        {
LABEL_1369:
          v850 = v860 << 48;
          goto LABEL_1370;
        }
LABEL_1368:
        v860 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1910) = v860;
        *(_WORD *)(a2 + 2004) = v860 + 1;
        goto LABEL_1369;
      }
      memset(&v908[1], 0, 56);
      v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
      *(_DWORD *)(a2 + 16) = 1;
      v859 = *(unsigned __int16 *)(a2 + 1970);
      if ((_DWORD)v859 == 0xFFFF)
      {
        v859 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1970) = v859;
        *(_WORD *)(a2 + 2004) = v859 + 1;
      }
      *((_QWORD *)&v908[0] + 1) = (v859 << 48) | 0x19C840;
LABEL_1367:
      v860 = *(unsigned __int16 *)(a2 + 1910);
      if ((_DWORD)v860 != 0xFFFF)
        goto LABEL_1369;
      goto LABEL_1368;
    }
    v900 = 1;
LABEL_1372:
    v623 = 0uLL;
LABEL_1373:
    v621 += 2;
    ++v622;
    v861 = v52 > 1;
    v52 >>= 1;
  }
  while (v861);
  if (!v900)
    goto LABEL_1380;
LABEL_1383:
  memset(&v908[1], 0, 56);
  v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
  *(_DWORD *)(a2 + 16) = 1;
  if ((v892 & 4) != 0)
  {
    *((_QWORD *)&v908[0] + 1) = (gleVStateProgram_GetAttrib(a2, 2) << 48) | 0x19C800;
    v866 = *(unsigned __int16 *)(a2 + 1904);
  }
  else
  {
    v864 = *(unsigned __int16 *)(a2 + 1636);
    if ((_DWORD)v864 == 0xFFFF)
    {
      v865 = *(__int16 *)(a2 + 1998);
      v864 = *(unsigned __int16 *)(a2 + 1998);
      *(_WORD *)(a2 + 1636) = v865;
      *(_WORD *)(a2 + 4 * v865 + 262) = 344;
      *(_WORD *)(a2 + 1998) = v865 + 1;
    }
    *((_QWORD *)&v908[0] + 1) = ((v864 << 48) | 0x19C840) + 64;
    v866 = *(unsigned __int16 *)(a2 + 1904);
  }
  if ((_DWORD)v866 == 0xFFFF)
  {
    v866 = *(unsigned __int16 *)(a2 + 2004);
    *(_WORD *)(a2 + 1904) = v866;
    *(_WORD *)(a2 + 2004) = v866 + 1;
  }
  *(_QWORD *)&v908[0] = (v866 << 48) | 0x72609000;
  (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
  memset(&v908[1], 0, 56);
  v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
  *(_DWORD *)(a2 + 16) = 1;
  v867 = *(unsigned __int16 *)(a2 + 1904);
  if ((_DWORD)v867 == 0xFFFF)
  {
    v867 = *(unsigned __int16 *)(a2 + 2004);
    *(_WORD *)(a2 + 1904) = v867;
    *(_WORD *)(a2 + 2004) = v867 + 1;
  }
  *((_QWORD *)&v908[0] + 1) = (v867 << 48) | 0x19C840;
  v868 = *(unsigned __int16 *)(a2 + 1704);
  if ((_DWORD)v868 == 0xFFFF)
  {
    v869 = *(__int16 *)(a2 + 2000);
    v868 = *(unsigned __int16 *)(a2 + 2000);
    *(_WORD *)(a2 + 1704) = v869;
    *(_WORD *)(a2 + 4 * v869 + 1694) = 3;
    *(_WORD *)(a2 + 2000) = v869 + 1;
  }
  *(_QWORD *)&v908[0] = ((v868 << 48) | 0x72679000) + 0x2000;
  result = (*(uint64_t (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
  v871 = *a1;
  if ((*a1 & 0x8000000000000000) != 0)
  {
    memset(&v908[1], 0, 56);
    v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
    *(_DWORD *)(a2 + 16) = 1;
    v872 = *(unsigned __int16 *)(a2 + 1908);
    if ((_DWORD)v872 == 0xFFFF)
    {
      v872 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1908) = v872;
      *(_WORD *)(a2 + 2004) = v872 + 1;
    }
    *((_QWORD *)&v908[0] + 1) = (v872 << 48) | 0x19C840;
    v873 = *(unsigned __int16 *)(a2 + 1712);
    if ((_DWORD)v873 == 0xFFFF)
    {
      v874 = *(__int16 *)(a2 + 2000);
      v873 = *(unsigned __int16 *)(a2 + 2000);
      *(_WORD *)(a2 + 1712) = v874;
      *(_WORD *)(a2 + 4 * v874 + 1694) = 5;
      *(_WORD *)(a2 + 2000) = v874 + 1;
    }
    *(_QWORD *)&v908[0] = ((v873 << 48) | 0x72679000) + 0x2000;
    result = (*(uint64_t (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
    v871 = *a1;
  }
  if ((v871 & 0x1000000000000) != 0)
  {
    memset(&v908[1], 0, 56);
    v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
    *(_DWORD *)(a2 + 16) = 1;
    if ((v885 & 4) != 0)
    {
      *((_QWORD *)&v908[0] + 1) = (gleVStateProgram_GetAttrib(a2, 2) << 48) | 0x19C800;
      v877 = *(unsigned __int16 *)(a2 + 1906);
    }
    else
    {
      v875 = *(unsigned __int16 *)(a2 + 1640);
      if ((_DWORD)v875 == 0xFFFF)
      {
        v876 = *(__int16 *)(a2 + 1998);
        v875 = *(unsigned __int16 *)(a2 + 1998);
        *(_WORD *)(a2 + 1640) = v876;
        *(_WORD *)(a2 + 4 * v876 + 262) = 345;
        *(_WORD *)(a2 + 1998) = v876 + 1;
      }
      *((_QWORD *)&v908[0] + 1) = ((v875 << 48) | 0x19C840) + 64;
      v877 = *(unsigned __int16 *)(a2 + 1906);
    }
    if ((_DWORD)v877 == 0xFFFF)
    {
      v877 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1906) = v877;
      *(_WORD *)(a2 + 2004) = v877 + 1;
    }
    *(_QWORD *)&v908[0] = (v877 << 48) | 0x72609000;
    (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
    memset(&v908[1], 0, 56);
    v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
    *(_DWORD *)(a2 + 16) = 1;
    v878 = *(unsigned __int16 *)(a2 + 1906);
    if ((_DWORD)v878 == 0xFFFF)
    {
      v878 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1906) = v878;
      *(_WORD *)(a2 + 2004) = v878 + 1;
    }
    *((_QWORD *)&v908[0] + 1) = (v878 << 48) | 0x19C840;
    v879 = *(unsigned __int16 *)(a2 + 1708);
    if ((_DWORD)v879 == 0xFFFF)
    {
      v880 = *(__int16 *)(a2 + 2000);
      v879 = *(unsigned __int16 *)(a2 + 2000);
      *(_WORD *)(a2 + 1708) = v880;
      *(_WORD *)(a2 + 4 * v880 + 1694) = 4;
      *(_WORD *)(a2 + 2000) = v880 + 1;
    }
    *(_QWORD *)&v908[0] = ((v879 << 48) | 0x72679000) + 0x2000;
    result = (*(uint64_t (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
    if ((*a1 & 0x8000000000000000) != 0)
    {
      memset(&v908[1], 0, 56);
      v907 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
      *(_DWORD *)(a2 + 16) = 1;
      v881 = *(unsigned __int16 *)(a2 + 1910);
      if ((_DWORD)v881 == 0xFFFF)
      {
        v881 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1910) = v881;
        *(_WORD *)(a2 + 2004) = v881 + 1;
      }
      *((_QWORD *)&v908[0] + 1) = (v881 << 48) | 0x19C840;
      v882 = *(unsigned __int16 *)(a2 + 1716);
      if ((_DWORD)v882 == 0xFFFF)
      {
        v883 = *(__int16 *)(a2 + 2000);
        v882 = *(unsigned __int16 *)(a2 + 2000);
        *(_WORD *)(a2 + 1716) = v883;
        *(_WORD *)(a2 + 4 * v883 + 1694) = 6;
        *(_WORD *)(a2 + 2000) = v883 + 1;
      }
      *(_QWORD *)&v908[0] = ((v882 << 48) | 0x72679000) + 0x2000;
      return (*(uint64_t (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v907);
    }
  }
  return result;
}

uint64_t gleVStateProgram_GetParam(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  __int128 v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (a2 == 351)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (!**(_QWORD **)(v4 + 104))
    {
      v10 = xmmword_22D807690;
      **(_QWORD **)(*(_QWORD *)(a1 + 8) + 104) = gleLLVMCreateConstantVec4(v4, (uint64_t)&v10, 1);
    }
  }
  v5 = a1 + 4 * a2;
  v6 = *(unsigned __int16 *)(v5 + 260);
  if (v6 == 0xFFFF)
  {
    v7 = *(__int16 *)(a1 + 1998);
    LOWORD(v6) = *(_WORD *)(a1 + 1998);
    *(_WORD *)(v5 + 260) = v7;
    *(_WORD *)(a1 + 4 * v7 + 262) = a2;
    v8 = v7 + 11;
    if ((a2 & 0xFFFFFFF0) != 0x90)
      v8 = v7 + 1;
    *(_WORD *)(a1 + 1998) = v8;
  }
  return (__int16)v6;
}

uint64_t gleVStateProgram_MultMatrix4x4(uint64_t a1, signed int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9)
{
  uint64_t v16;
  uint64_t Attrib;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int16 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _WORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;

  v95 = 0;
  v94 = 0u;
  v93 = 0u;
  v92 = 0u;
  v91 = 0u;
  v16 = 8 * (*(_DWORD *)(a1 + 16) & 7);
  if (a9)
  {
    v90 = v16 | 0x3100000A42;
    *(_DWORD *)(a1 + 16) = 2;
    if (a6)
    {
      Attrib = (unsigned __int16)gleVStateProgram_GetAttrib(a1, a2);
      v18 = 1689600;
    }
    else
    {
      v21 = a1 + 2 * a2;
      LODWORD(Attrib) = *(unsigned __int16 *)(v21 + 1900);
      if ((_DWORD)Attrib == 0xFFFF)
      {
        LODWORD(Attrib) = *(unsigned __int16 *)(a1 + 2004);
        *(_WORD *)(v21 + 1900) = Attrib;
        *(_WORD *)(a1 + 2004) = Attrib + 1;
      }
      Attrib = Attrib;
      v18 = 1689664;
    }
    *((_QWORD *)&v91 + 1) = v18 | (Attrib << 48);
    v22 = gleVStateProgram_GetParam(a1, a3 + 7) << 48;
    if (a7)
    {
      v23 = v22 | 0x19C881;
      *(_WORD *)(a1 + 2002) = 1;
    }
    else
    {
      v23 = v22 | 0x19C880;
    }
    *(_QWORD *)&v92 = v23;
    if (a8)
    {
      v24 = a1 + 4 * a4;
      v25 = *(unsigned __int16 *)(v24 + 1692);
      v26 = 1918939136;
      if ((_DWORD)v25 == 0xFFFF)
      {
        v27 = *(__int16 *)(a1 + 2000);
        v25 = *(unsigned __int16 *)(a1 + 2000);
        *(_WORD *)(v24 + 1692) = v27;
        *(_WORD *)(a1 + 4 * v27 + 1694) = a4;
        *(_WORD *)(a1 + 2000) = v27 + 1;
      }
    }
    else
    {
      v28 = a1 + 2 * a4;
      v25 = *(unsigned __int16 *)(v28 + 1900);
      v26 = 1918930944;
      if ((_DWORD)v25 == 0xFFFF)
      {
        v25 = *(unsigned __int16 *)(a1 + 2004);
        *(_WORD *)(v28 + 1900) = v25;
        *(_WORD *)(a1 + 2004) = v25 + 1;
      }
    }
    *(_QWORD *)&v91 = v26 | (v25 << 48);
    (*(void (**)(uint64_t, uint64_t *))(a1 + 2016))(a1, &v90);
    v95 = 0;
    v93 = 0u;
    v94 = 0u;
    v91 = 0u;
    v92 = 0u;
    v90 = (8 * (*(_DWORD *)(a1 + 16) & 7)) | 0x3100000A42;
    *(_DWORD *)(a1 + 16) = 2;
    if (a6)
    {
      v29 = (unsigned __int16)gleVStateProgram_GetAttrib(a1, a2);
      v30 = 1689600;
    }
    else
    {
      v31 = a1 + 2 * a2;
      LODWORD(v29) = *(unsigned __int16 *)(v31 + 1900);
      if ((_DWORD)v29 == 0xFFFF)
      {
        LODWORD(v29) = *(unsigned __int16 *)(a1 + 2004);
        *(_WORD *)(v31 + 1900) = v29;
        *(_WORD *)(a1 + 2004) = v29 + 1;
      }
      v29 = v29;
      v30 = 1689664;
    }
    *((_QWORD *)&v91 + 1) = v30 | (v29 << 48);
    v32 = gleVStateProgram_GetParam(a1, a3 + 6) << 48;
    if (a7)
    {
      v33 = v32 | 0x19C881;
      *(_WORD *)(a1 + 2002) = 1;
    }
    else
    {
      v33 = v32 | 0x19C880;
    }
    *(_QWORD *)&v92 = v33;
    if (a8)
    {
      v34 = a1 + 4 * a4;
      v35 = *(unsigned __int16 *)(v34 + 1692);
      v36 = 1918971904;
      if ((_DWORD)v35 == 0xFFFF)
      {
        v37 = *(__int16 *)(a1 + 2000);
        v35 = *(unsigned __int16 *)(a1 + 2000);
        *(_WORD *)(v34 + 1692) = v37;
        *(_WORD *)(a1 + 4 * v37 + 1694) = a4;
        *(_WORD *)(a1 + 2000) = v37 + 1;
      }
    }
    else
    {
      v38 = a1 + 2 * a4;
      v35 = *(unsigned __int16 *)(v38 + 1900);
      v36 = 1918963712;
      if ((_DWORD)v35 == 0xFFFF)
      {
        v35 = *(unsigned __int16 *)(a1 + 2004);
        *(_WORD *)(v38 + 1900) = v35;
        *(_WORD *)(a1 + 2004) = v35 + 1;
      }
    }
    *(_QWORD *)&v91 = v36 | (v35 << 48);
    (*(void (**)(uint64_t, uint64_t *))(a1 + 2016))(a1, &v90);
    v95 = 0;
    v93 = 0u;
    v94 = 0u;
    v91 = 0u;
    v92 = 0u;
    v90 = (8 * (*(_DWORD *)(a1 + 16) & 7)) | 0x3100000A42;
    *(_DWORD *)(a1 + 16) = 2;
    if (a6)
    {
      v39 = (unsigned __int16)gleVStateProgram_GetAttrib(a1, a2);
      v40 = 1689600;
    }
    else
    {
      v41 = a1 + 2 * a2;
      LODWORD(v39) = *(unsigned __int16 *)(v41 + 1900);
      if ((_DWORD)v39 == 0xFFFF)
      {
        LODWORD(v39) = *(unsigned __int16 *)(a1 + 2004);
        *(_WORD *)(v41 + 1900) = v39;
        *(_WORD *)(a1 + 2004) = v39 + 1;
      }
      v39 = v39;
      v40 = 1689664;
    }
    *((_QWORD *)&v91 + 1) = v40 | (v39 << 48);
    v42 = gleVStateProgram_GetParam(a1, a3 + 5) << 48;
    if (a7)
    {
      v43 = v42 | 0x19C881;
      *(_WORD *)(a1 + 2002) = 1;
    }
    else
    {
      v43 = v42 | 0x19C880;
    }
    *(_QWORD *)&v92 = v43;
    if (a8)
    {
      v44 = a1 + 4 * a4;
      v45 = *(unsigned __int16 *)(v44 + 1692);
      v46 = 1919037440;
      if ((_DWORD)v45 == 0xFFFF)
      {
        v47 = *(__int16 *)(a1 + 2000);
        v45 = *(unsigned __int16 *)(a1 + 2000);
        *(_WORD *)(v44 + 1692) = v47;
        *(_WORD *)(a1 + 4 * v47 + 1694) = a4;
        *(_WORD *)(a1 + 2000) = v47 + 1;
      }
    }
    else
    {
      v48 = a1 + 2 * a4;
      v45 = *(unsigned __int16 *)(v48 + 1900);
      v46 = 1919029248;
      if ((_DWORD)v45 == 0xFFFF)
      {
        v45 = *(unsigned __int16 *)(a1 + 2004);
        *(_WORD *)(v48 + 1900) = v45;
        *(_WORD *)(a1 + 2004) = v45 + 1;
      }
    }
    *(_QWORD *)&v91 = v46 | (v45 << 48);
    (*(void (**)(uint64_t, uint64_t *))(a1 + 2016))(a1, &v90);
    v95 = 0;
    v93 = 0u;
    v94 = 0u;
    v91 = 0u;
    v92 = 0u;
    v90 = (8 * (*(_DWORD *)(a1 + 16) & 7)) | 0x3100000A42;
    *(_DWORD *)(a1 + 16) = 2;
    if (a6)
    {
      v49 = (unsigned __int16)gleVStateProgram_GetAttrib(a1, a2);
      v50 = 1689600;
    }
    else
    {
      v51 = a1 + 2 * a2;
      LODWORD(v49) = *(unsigned __int16 *)(v51 + 1900);
      if ((_DWORD)v49 == 0xFFFF)
      {
        LODWORD(v49) = *(unsigned __int16 *)(a1 + 2004);
        *(_WORD *)(v51 + 1900) = v49;
        *(_WORD *)(a1 + 2004) = v49 + 1;
      }
      v49 = v49;
      v50 = 1689664;
    }
    *((_QWORD *)&v91 + 1) = v50 | (v49 << 48);
    v52 = gleVStateProgram_GetParam(a1, a3 + 4) << 48;
    if (a7)
    {
      v53 = v52 | 0x19C881;
      *(_WORD *)(a1 + 2002) = 1;
    }
    else
    {
      v53 = v52 | 0x19C880;
    }
    *(_QWORD *)&v92 = v53;
    if (a8)
    {
      v54 = a1 + 4 * a4;
      v55 = *(unsigned __int16 *)(v54 + 1692);
      v56 = 1919168512;
      if ((_DWORD)v55 == 0xFFFF)
      {
        v57 = *(__int16 *)(a1 + 2000);
        v55 = *(unsigned __int16 *)(a1 + 2000);
        *(_WORD *)(v54 + 1692) = v57;
        v58 = a1 + 4 * v57;
        v59 = a4;
LABEL_100:
        *(_WORD *)(v58 + 1694) = v59;
        *(_WORD *)(a1 + 2000) = v57 + 1;
        goto LABEL_104;
      }
      goto LABEL_104;
    }
    v60 = a1 + 2 * a4;
    v55 = *(unsigned __int16 *)(v60 + 1900);
    v56 = 1919160320;
LABEL_102:
    if ((_DWORD)v55 == 0xFFFF)
    {
      v55 = *(unsigned __int16 *)(a1 + 2004);
      *(_WORD *)(v60 + 1900) = v55;
      *(_WORD *)(a1 + 2004) = v55 + 1;
    }
    goto LABEL_104;
  }
  v90 = v16 | 0x3100000882;
  *(_DWORD *)(a1 + 16) = 2;
  if (a6)
  {
    v20 = gleVStateProgram_GetAttrib(a1, a2) << 48;
  }
  else
  {
    v61 = a1 + 2 * a2;
    v62 = *(unsigned __int16 *)(v61 + 1900);
    if ((_DWORD)v62 == 0xFFFF)
    {
      v62 = *(unsigned __int16 *)(a1 + 2004);
      *(_WORD *)(v61 + 1900) = v62;
      *(_WORD *)(a1 + 2004) = v62 + 1;
    }
    v20 = (v62 << 48) | 0x40;
  }
  *((_QWORD *)&v91 + 1) = v20;
  v63 = gleVStateProgram_GetParam(a1, a3) << 48;
  if (a7)
  {
    v64 = v63 | 0x19C881;
    *(_WORD *)(a1 + 2002) = 1;
  }
  else
  {
    v64 = v63 | 0x19C880;
  }
  *(_QWORD *)&v92 = v64;
  v65 = (_WORD *)(a1 + 2 * a5 + 1900);
  v66 = (unsigned __int16)*v65;
  if ((_DWORD)v66 == 0xFFFF)
  {
    v66 = *(unsigned __int16 *)(a1 + 2004);
    *v65 = v66;
    *(_WORD *)(a1 + 2004) = v66 + 1;
  }
  v56 = 1919389696;
  *(_QWORD *)&v91 = (v66 << 48) | 0x72679000;
  (*(void (**)(uint64_t, uint64_t *))(a1 + 2016))(a1, &v90);
  v95 = 0;
  v93 = 0u;
  v94 = 0u;
  v91 = 0u;
  v92 = 0u;
  v90 = (8 * (*(_DWORD *)(a1 + 16) & 7)) | 0x3100000FC3;
  *(_DWORD *)(a1 + 16) = 3;
  if (a6)
  {
    v67 = (unsigned __int16)gleVStateProgram_GetAttrib(a1, a2);
    v68 = 43520;
  }
  else
  {
    v69 = a1 + 2 * a2;
    LODWORD(v67) = *(unsigned __int16 *)(v69 + 1900);
    if ((_DWORD)v67 == 0xFFFF)
    {
      LODWORD(v67) = *(unsigned __int16 *)(a1 + 2004);
      *(_WORD *)(v69 + 1900) = v67;
      *(_WORD *)(a1 + 2004) = v67 + 1;
    }
    v67 = v67;
    v68 = 43584;
  }
  *((_QWORD *)&v91 + 1) = v68 | (v67 << 48);
  v70 = gleVStateProgram_GetParam(a1, a3 + 1) << 48;
  if (a7)
  {
    v71 = v70 | 0x19C881;
    *(_WORD *)(a1 + 2002) = 1;
  }
  else
  {
    v71 = v70 | 0x19C880;
  }
  *(_QWORD *)&v92 = v71;
  v72 = (unsigned __int16)*v65;
  if (v72 == 0xFFFF)
  {
    v73 = *(unsigned __int16 *)(a1 + 2004);
    *v65 = v73;
    *(_WORD *)(a1 + 2004) = v73 + 1;
    v72 = (unsigned __int16)*v65;
    *((_QWORD *)&v92 + 1) = (v73 << 48) | 0x19C840;
    if ((_DWORD)v72 == 0xFFFF)
    {
      v72 = *(unsigned __int16 *)(a1 + 2004);
      *v65 = v72;
      *(_WORD *)(a1 + 2004) = v72 + 1;
    }
  }
  else
  {
    *((_QWORD *)&v92 + 1) = (v72 << 48) | 0x19C840;
  }
  v74 = 87040;
  *(_QWORD *)&v91 = (v72 << 48) | 0x72679000;
  (*(void (**)(uint64_t, uint64_t *))(a1 + 2016))(a1, &v90);
  v95 = 0;
  v93 = 0u;
  v94 = 0u;
  v91 = 0u;
  v92 = 0u;
  v90 = (8 * (*(_DWORD *)(a1 + 16) & 7)) | 0x3100000FC3;
  *(_DWORD *)(a1 + 16) = 3;
  if (a6)
  {
    v75 = (unsigned __int16)gleVStateProgram_GetAttrib(a1, a2);
  }
  else
  {
    v76 = a1 + 2 * a2;
    LODWORD(v75) = *(unsigned __int16 *)(v76 + 1900);
    if ((_DWORD)v75 == 0xFFFF)
    {
      LODWORD(v75) = *(unsigned __int16 *)(a1 + 2004);
      *(_WORD *)(v76 + 1900) = v75;
      *(_WORD *)(a1 + 2004) = v75 + 1;
    }
    v75 = v75;
    v74 = 87104;
  }
  *((_QWORD *)&v91 + 1) = v74 | (v75 << 48);
  v77 = gleVStateProgram_GetParam(a1, a3 + 2) << 48;
  if (a7)
  {
    v78 = v77 | 0x19C881;
    *(_WORD *)(a1 + 2002) = 1;
  }
  else
  {
    v78 = v77 | 0x19C880;
  }
  *(_QWORD *)&v92 = v78;
  v79 = (unsigned __int16)*v65;
  if (v79 == 0xFFFF)
  {
    v80 = *(unsigned __int16 *)(a1 + 2004);
    *v65 = v80;
    *(_WORD *)(a1 + 2004) = v80 + 1;
    v79 = (unsigned __int16)*v65;
    *((_QWORD *)&v92 + 1) = (v80 << 48) | 0x19C840;
    if ((_DWORD)v79 == 0xFFFF)
    {
      v79 = *(unsigned __int16 *)(a1 + 2004);
      *v65 = v79;
      *(_WORD *)(a1 + 2004) = v79 + 1;
    }
  }
  else
  {
    *((_QWORD *)&v92 + 1) = (v79 << 48) | 0x19C840;
  }
  *(_QWORD *)&v91 = (v79 << 48) | 0x72679000;
  (*(void (**)(uint64_t, uint64_t *))(a1 + 2016))(a1, &v90);
  v95 = 0;
  v93 = 0u;
  v94 = 0u;
  v91 = 0u;
  v92 = 0u;
  v90 = (8 * (*(_DWORD *)(a1 + 16) & 7)) | 0x3100000FC3;
  *(_DWORD *)(a1 + 16) = 3;
  if (a6)
  {
    v81 = (unsigned __int16)gleVStateProgram_GetAttrib(a1, a2);
    v82 = 130560;
  }
  else
  {
    v83 = a1 + 2 * a2;
    LODWORD(v81) = *(unsigned __int16 *)(v83 + 1900);
    if ((_DWORD)v81 == 0xFFFF)
    {
      LODWORD(v81) = *(unsigned __int16 *)(a1 + 2004);
      *(_WORD *)(v83 + 1900) = v81;
      *(_WORD *)(a1 + 2004) = v81 + 1;
    }
    v81 = v81;
    v82 = 130624;
  }
  *((_QWORD *)&v91 + 1) = v82 | (v81 << 48);
  v84 = gleVStateProgram_GetParam(a1, a3 + 3) << 48;
  if (a7)
  {
    v85 = v84 | 0x19C881;
    *(_WORD *)(a1 + 2002) = 1;
  }
  else
  {
    v85 = v84 | 0x19C880;
  }
  *(_QWORD *)&v92 = v85;
  v86 = (unsigned __int16)*v65;
  if ((_DWORD)v86 == 0xFFFF)
  {
    v86 = *(unsigned __int16 *)(a1 + 2004);
    *v65 = v86;
    *(_WORD *)(a1 + 2004) = v86 + 1;
  }
  *((_QWORD *)&v92 + 1) = (v86 << 48) | 0x19C840;
  v59 = a4;
  if (!a8)
  {
    v60 = a1 + 2 * a4;
    v55 = *(unsigned __int16 *)(v60 + 1900);
    goto LABEL_102;
  }
  v87 = a1 + 4 * a4;
  v55 = *(unsigned __int16 *)(v87 + 1692);
  v56 = 1919397888;
  if ((_DWORD)v55 == 0xFFFF)
  {
    v57 = *(__int16 *)(a1 + 2000);
    v55 = *(unsigned __int16 *)(a1 + 2000);
    *(_WORD *)(v87 + 1692) = v57;
    v58 = a1 + 4 * v57;
    goto LABEL_100;
  }
LABEL_104:
  *(_QWORD *)&v91 = v56 | (v55 << 48);
  return (*(uint64_t (**)(uint64_t, uint64_t *))(a1 + 2016))(a1, &v90);
}

uint64_t gleVStateProgram_MultMatrix3x3(uint64_t a1, int a2, int a3, int a4, int a5, int a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _WORD *v25;
  _WORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  __int128 v38;
  _BYTE v39[56];

  memset(&v39[8], 0, 48);
  v10 = 8 * (*(_DWORD *)(a1 + 16) & 7);
  if (a6)
  {
    v37 = v10 | 0x3100000A02;
    *(_DWORD *)(a1 + 16) = 2;
    *((_QWORD *)&v38 + 1) = ((gleVStateProgram_GetAttrib(a1, 1) << 48) | 0x19C880) - 128;
    v11 = gleVStateProgram_GetParam(a1, a2 + 4) << 48;
    if (a5)
    {
      v12 = v11 | 0x19C881;
      *(_WORD *)(a1 + 2002) = 1;
    }
    else
    {
      v12 = v11 | 0x19C880;
    }
    *(_QWORD *)v39 = v12;
    v16 = (_WORD *)(a1 + 2 * a3 + 1900);
    v17 = (unsigned __int16)*v16;
    if ((_DWORD)v17 == 0xFFFF)
    {
      v17 = *(unsigned __int16 *)(a1 + 2004);
      *v16 = v17;
      *(_WORD *)(a1 + 2004) = v17 + 1;
    }
    *(_QWORD *)&v38 = ((v17 << 48) | 0x72679000) - 229376;
    (*(void (**)(uint64_t, uint64_t *))(a1 + 2016))(a1, &v37);
    memset(v39, 0, sizeof(v39));
    v38 = 0u;
    v37 = (8 * (*(_DWORD *)(a1 + 16) & 7)) | 0x3100000A02;
    *(_DWORD *)(a1 + 16) = 2;
    *((_QWORD *)&v38 + 1) = (gleVStateProgram_GetAttrib(a1, 1) << 48) | 0x19C800;
    v18 = gleVStateProgram_GetParam(a1, a2 + 5) << 48;
    if (a5)
    {
      v19 = v18 | 0x19C881;
      *(_WORD *)(a1 + 2002) = 1;
    }
    else
    {
      v19 = v18 | 0x19C880;
    }
    *(_QWORD *)v39 = v19;
    v20 = (unsigned __int16)*v16;
    if ((_DWORD)v20 == 0xFFFF)
    {
      v20 = *(unsigned __int16 *)(a1 + 2004);
      *v16 = v20;
      *(_WORD *)(a1 + 2004) = v20 + 1;
    }
    *(_QWORD *)&v38 = (v20 << 48) | 0x72621000;
    (*(void (**)(uint64_t, uint64_t *))(a1 + 2016))(a1, &v37);
    v38 = 0u;
    memset(v39, 0, sizeof(v39));
    v37 = (8 * (*(_DWORD *)(a1 + 16) & 7)) | 0x3100000A02;
    *(_DWORD *)(a1 + 16) = 2;
    *((_QWORD *)&v38 + 1) = (gleVStateProgram_GetAttrib(a1, 1) << 48) | 0x19C800;
    v21 = gleVStateProgram_GetParam(a1, a2 + 6) << 48;
    if (a5)
    {
      v22 = v21 | 0x19C881;
      *(_WORD *)(a1 + 2002) = 1;
    }
    else
    {
      v22 = v21 | 0x19C880;
    }
    *(_QWORD *)v39 = v22;
    v23 = (unsigned __int16)*v16;
    v24 = 1918996480;
    if ((_DWORD)v23 == 0xFFFF)
    {
      v25 = (_WORD *)(a1 + 2004);
      v23 = *(unsigned __int16 *)(a1 + 2004);
      *v16 = v23;
LABEL_36:
      *v25 = v23 + 1;
    }
  }
  else
  {
    v37 = v10 | 0x3100000882;
    *(_DWORD *)(a1 + 16) = 2;
    *((_QWORD *)&v38 + 1) = gleVStateProgram_GetAttrib(a1, 1) << 48;
    v14 = gleVStateProgram_GetParam(a1, a2) << 48;
    if (a5)
    {
      v15 = v14 | 0x19C881;
      *(_WORD *)(a1 + 2002) = 1;
    }
    else
    {
      v15 = v14 | 0x19C880;
    }
    *(_QWORD *)v39 = v15;
    v26 = (_WORD *)(a1 + 2 * a4 + 1900);
    v27 = (unsigned __int16)*v26;
    if ((_DWORD)v27 == 0xFFFF)
    {
      v27 = *(unsigned __int16 *)(a1 + 2004);
      *v26 = v27;
      *(_WORD *)(a1 + 2004) = v27 + 1;
    }
    v24 = 1919389696;
    *(_QWORD *)&v38 = (v27 << 48) | 0x72679000;
    (*(void (**)(uint64_t, uint64_t *))(a1 + 2016))(a1, &v37);
    memset(v39, 0, sizeof(v39));
    v38 = 0u;
    v37 = (8 * (*(_DWORD *)(a1 + 16) & 7)) | 0x3100000FC3;
    *(_DWORD *)(a1 + 16) = 3;
    *((_QWORD *)&v38 + 1) = (gleVStateProgram_GetAttrib(a1, 1) << 48) | 0xAA00;
    v28 = gleVStateProgram_GetParam(a1, a2 + 1) << 48;
    if (a5)
    {
      v29 = v28 | 0x19C881;
      *(_WORD *)(a1 + 2002) = 1;
    }
    else
    {
      v29 = v28 | 0x19C880;
    }
    *(_QWORD *)v39 = v29;
    v30 = (unsigned __int16)*v26;
    if (v30 == 0xFFFF)
    {
      v31 = *(unsigned __int16 *)(a1 + 2004);
      *v26 = v31;
      *(_WORD *)(a1 + 2004) = v31 + 1;
      v30 = (unsigned __int16)*v26;
      *(_QWORD *)&v39[8] = (v31 << 48) | 0x19C840;
      if ((_DWORD)v30 == 0xFFFF)
      {
        v30 = *(unsigned __int16 *)(a1 + 2004);
        *v26 = v30;
        *(_WORD *)(a1 + 2004) = v30 + 1;
      }
    }
    else
    {
      *(_QWORD *)&v39[8] = (v30 << 48) | 0x19C840;
    }
    *(_QWORD *)&v38 = (v30 << 48) | 0x72679000;
    (*(void (**)(uint64_t, uint64_t *))(a1 + 2016))(a1, &v37);
    v38 = 0u;
    memset(v39, 0, sizeof(v39));
    v37 = (8 * (*(_DWORD *)(a1 + 16) & 7)) | 0x3100000FC3;
    *(_DWORD *)(a1 + 16) = 3;
    *((_QWORD *)&v38 + 1) = (gleVStateProgram_GetAttrib(a1, 1) << 48) | 0x15400;
    v32 = gleVStateProgram_GetParam(a1, a2 + 2) << 48;
    if (a5)
    {
      v33 = v32 | 0x19C881;
      *(_WORD *)(a1 + 2002) = 1;
    }
    else
    {
      v33 = v32 | 0x19C880;
    }
    *(_QWORD *)v39 = v33;
    v34 = (unsigned __int16)*v26;
    if ((_DWORD)v34 == 0xFFFF)
    {
      v34 = *(unsigned __int16 *)(a1 + 2004);
      *v26 = v34;
      *(_WORD *)(a1 + 2004) = v34 + 1;
    }
    *(_QWORD *)&v39[8] = (v34 << 48) | 0x19C840;
    v35 = a1 + 2 * a3;
    v23 = *(unsigned __int16 *)(v35 + 1900);
    if ((_DWORD)v23 == 0xFFFF)
    {
      v25 = (_WORD *)(a1 + 2004);
      v23 = *(unsigned __int16 *)(a1 + 2004);
      *(_WORD *)(v35 + 1900) = v23;
      goto LABEL_36;
    }
  }
  *(_QWORD *)&v38 = v24 | (v23 << 48);
  return (*(uint64_t (**)(uint64_t, uint64_t *))(a1 + 2016))(a1, &v37);
}

uint64_t gleVStateProgram_NormalizeVector(uint64_t a1, int a2, int a3, int a4, int a5)
{
  _WORD *v8;
  uint64_t v9;
  uint64_t v10;
  _WORD *v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _WORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = ((8 * (*(_DWORD *)(a1 + 16) & 7)) | 0x3100000882) + 384;
  *(_DWORD *)(a1 + 16) = 2;
  v8 = (_WORD *)(a1 + 2 * a2 + 1900);
  v9 = (unsigned __int16)*v8;
  if (v9 == 0xFFFF)
  {
    v10 = *(unsigned __int16 *)(a1 + 2004);
    *v8 = v10;
    *(_WORD *)(a1 + 2004) = v10 + 1;
    v9 = (unsigned __int16)*v8;
    *(_QWORD *)&v24 = (v10 << 48) | 0x19C840;
    if ((_DWORD)v9 == 0xFFFF)
    {
      v9 = *(unsigned __int16 *)(a1 + 2004);
      *v8 = v9;
      *(_WORD *)(a1 + 2004) = v9 + 1;
    }
  }
  else
  {
    *(_QWORD *)&v24 = (v9 << 48) | 0x19C840;
  }
  *((_QWORD *)&v24 + 1) = (v9 << 48) | 0x19C840;
  v11 = (_WORD *)(a1 + 2 * a4 + 1900);
  v12 = (unsigned __int16)*v11;
  if ((_DWORD)v12 == 0xFFFF)
  {
    v12 = *(unsigned __int16 *)(a1 + 2004);
    *v11 = v12;
    *(_WORD *)(a1 + 2004) = v12 + 1;
  }
  v23 = (v12 << 48) | 0x72679000;
  (*(void (**)(uint64_t, uint64_t *))(a1 + 2016))(a1, &v22);
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v13 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 16) = 1;
  v22 = (8 * (v13 & 7)) | 0x100080341;
  v14 = (unsigned __int16)*v11;
  if ((_DWORD)v14 == 0xFFFF)
  {
    v14 = *(unsigned __int16 *)(a1 + 2004);
    *v11 = v14;
    *(_WORD *)(a1 + 2004) = v14 + 1;
  }
  *(_QWORD *)&v24 = (v14 << 48) | 0x19C840;
  v15 = (_WORD *)(a1 + 2 * a5 + 1900);
  v16 = (unsigned __int16)*v15;
  if ((_DWORD)v16 == 0xFFFF)
  {
    v16 = *(unsigned __int16 *)(a1 + 2004);
    *v15 = v16;
    *(_WORD *)(a1 + 2004) = v16 + 1;
  }
  v23 = (v16 << 48) | 0x72679000;
  (*(void (**)(uint64_t, uint64_t *))(a1 + 2016))(a1, &v22);
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = (8 * (*(_DWORD *)(a1 + 16) & 7)) | 0x3100000882;
  *(_DWORD *)(a1 + 16) = 2;
  v17 = (unsigned __int16)*v8;
  if ((_DWORD)v17 == 0xFFFF)
  {
    v17 = *(unsigned __int16 *)(a1 + 2004);
    *v8 = v17;
    *(_WORD *)(a1 + 2004) = v17 + 1;
  }
  *(_QWORD *)&v24 = (v17 << 48) | 0x19C840;
  v18 = (unsigned __int16)*v15;
  if ((_DWORD)v18 == 0xFFFF)
  {
    v18 = *(unsigned __int16 *)(a1 + 2004);
    *v15 = v18;
    *(_WORD *)(a1 + 2004) = v18 + 1;
  }
  *((_QWORD *)&v24 + 1) = (v18 << 48) | 0x19C840;
  v19 = a1 + 2 * a3;
  v20 = *(unsigned __int16 *)(v19 + 1900);
  if ((_DWORD)v20 == 0xFFFF)
  {
    v20 = *(unsigned __int16 *)(a1 + 2004);
    *(_WORD *)(v19 + 1900) = v20;
    *(_WORD *)(a1 + 2004) = v20 + 1;
  }
  v23 = (v20 << 48) | 0x72679000;
  return (*(uint64_t (**)(uint64_t, uint64_t *))(a1 + 2016))(a1, &v22);
}

uint64_t gleFStateProgram_AttribToFunction(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t v10;
  uint64_t v11;

  v4 = *(__int16 *)(a1 + 4 * (int)a2 + 22);
  v5 = *(_QWORD *)(a1 + 8);
  if ((*(_BYTE *)(a1 + 280) & 1) != 0)
  {
    if ((v4 - 1) < 2)
    {
      if (*(_BYTE *)(a1 + 252))
      {
        LLVMGetParam();
        LLVMGetParam();
        LLVMGetParam();
        return LLVMBuildSelect();
      }
    }
    else
    {
      v8 = v4 == 3 || v4 == 13;
      if (!v8 && ((1 << (v4 - 4)) & *(unsigned __int8 *)(*(_QWORD *)(a1 + 264) + 4)) != 0)
        return LLVMGetParam();
    }
  }
  else if ((v4 - 1) >= 2)
  {
    if (v4 != 3 && ((1 << (v4 - 4)) & *(unsigned __int8 *)(*(_QWORD *)(a1 + 264) + 4)) != 0)
    {
      v10 = LLVMFloatTypeInContext();
      v11 = MEMORY[0x22E316F4C](v10, 2);
      return gleLLVMAddFunctionCall(v5, "graphics.pixel.readPointCoordf", v11, 0, 0);
    }
  }
  else if (*(_BYTE *)(a1 + 252))
  {
    v6 = LLVMIntTypeInContext();
    gleLLVMAddFunctionCall(v5, "graphics.pixel.readFrontFacing", v6, 0, 0);
    if (*(_BYTE *)(a1 + 251))
      v7 = 3;
    else
      v7 = 1;
    gleLLVMGetAttribute(v5, a2, 7, v7);
    gleLLVMGetAttribute(v5, (a2 + 1), 7, v7);
    return LLVMBuildSelect();
  }
  return 0;
}

uint64_t gleFStateProgram_OutputToFunction(uint64_t a1, int a2, _DWORD *a3)
{
  int v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  int v9;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14[3];

  v14[2] = *MEMORY[0x24BDAC8D0];
  v4 = *(unsigned __int16 *)(a1 + 4 * a2 + 174);
  v5 = *(_QWORD **)(a1 + 8);
  if ((*(_BYTE *)(a1 + 280) & 1) != 0)
  {
    if (!v5[20])
      v5[20] = MEMORY[0x22E316E2C](v5[21]);
    if (v4 == 8)
    {
      if (!v5[19])
        v5[19] = LLVMInt32TypeInContext();
      LLVMConstInt();
      LLVMBuildExtractElement();
    }
    else if (*(_BYTE *)(a1 + 251))
    {
      v12 = LLVMHalfTypeInContext();
      v13 = MEMORY[0x22E316F4C](v12, 4);
      if (LLVMTypeOf() != v13)
        LLVMBuildFPCast();
    }
    result = LLVMBuildInsertValue();
    v5[20] = result;
  }
  else
  {
    v6 = v5[19];
    if (!v6)
    {
      v6 = LLVMInt32TypeInContext();
      v5[19] = v6;
    }
    if (v4 == 8)
    {
      LLVMConstInt();
      LLVMBuildExtractElement();
      v14[0] = LLVMTypeOf();
      v7 = "graphics.pixel.writeDepth";
      v8 = (uint64_t)v5;
      v9 = 1;
    }
    else
    {
      v14[0] = v6;
      v14[1] = LLVMTypeOf();
      LLVMConstInt();
      v7 = "graphics.pixel.writeOutput";
      v8 = (uint64_t)v5;
      v9 = 2;
    }
    result = gleLLVMAddVoidFunctionCall(v8, v7, v9, v14);
  }
  ++*a3;
  return result;
}

uint64_t glpFragmentStateToLLVMModule(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  uint64_t v3;
  __int128 v5;
  int v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[28];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;

  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  *(_OWORD *)&v19[12] = 0u;
  v20 = 0u;
  v5 = 0u;
  v6 = 0;
  *(_QWORD *)&v19[14] = -1;
  *(_QWORD *)&v2 = -1;
  *((_QWORD *)&v2 + 1) = -1;
  *(_OWORD *)v19 = v2;
  v18 = v2;
  v17 = v2;
  v16 = v2;
  v15 = v2;
  v14 = v2;
  v13 = v2;
  v12 = v2;
  v11 = v2;
  v10 = v2;
  v9 = v2;
  v8 = v2;
  v7 = v2;
  DWORD2(v22) = 1;
  gleFragmentStateToModule(a1, a2, (uint64_t)&v23, (uint64_t)&v5);
  v3 = *((_QWORD *)&v24 + 1);
  *((_QWORD *)&v24 + 1) = 0;
  gleLLVMDestroyBuildContext((uint64_t)&v23);
  return v3;
}

uint64_t gleFragmentStateToModule(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v7;
  uint64_t v8;
  BOOL v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  unint64_t v14;
  float v15;
  float v16;
  float v17;
  unsigned int v18;
  float v19;
  float v20;
  float v21;
  uint64_t v22;
  unsigned int v24;
  int v25;
  unsigned int v26;
  unsigned int FirstActiveTexture;
  int v28;
  uint64_t v29;
  uint64_t Attribs;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  uint64_t i;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  int *v40;
  const char *v41;
  uint64_t v42;
  int *v43;
  int v44;
  uint64_t v45;
  __int16 *v46;
  uint64_t v47;
  int *v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  uint64_t v52;
  unsigned __int16 *v53;
  int *v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t Temp;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  char v70;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  gleLLVMInitBuildContext(a3, a2, (uint64_t)"Fragment_State_Program", 0, 14, 0, 16, 9, v64, SHIDWORD(v64));
  *(_DWORD *)(a3 + 216) = *(_DWORD *)(a4 + 280) & 1;
  *(_DWORD *)(a3 + 220) = (*(_QWORD *)a1 >> 41) & 1;
  *(_DWORD *)a3 = 1;
  *(_QWORD *)(a3 + 184) = a4;
  *(_QWORD *)(a3 + 192) = gleFStateProgram_OutputToFunction;
  *(_QWORD *)(a3 + 200) = gleFStateProgram_AttribToFunction;
  *(_QWORD *)(a3 + 208) = 0;
  *(_QWORD *)(a4 + 264) = a1;
  v7 = *(_DWORD *)(a4 + 280) & 0xFFFFFFF7 | (8 * (((*(_QWORD *)a1 >> 38) >> 3) & 1));
  *(_DWORD *)(a4 + 280) = v7;
  *(_QWORD *)(a4 + 8) = a3;
  *(_BYTE *)(a4 + 252) = *(_BYTE *)(a1 + 3) & 1;
  *(_WORD *)(a4 + 160) = 4096;
  *(_WORD *)(a4 + 164) = 4097;
  *(_WORD *)(a4 + 168) = 4098;
  *(_QWORD *)(a4 + 256) = gleFStateProgram_LLVMAddOperation;
  v8 = *(_QWORD *)a1;
  v10 = (*(_QWORD *)a1 & 0x20000000000) == 0 && gEnablePrecision != 0;
  *(_BYTE *)(a4 + 251) = v10;
  v11 = *(_QWORD *)a1;
  if ((v8 & 0xFF00) != 0)
  {
    v12 = 0.0;
    v13 = 1;
    do
    {
      if ((((unint64_t)BYTE1(v11) >> (v13 - 1)) & 1) != 0)
      {
        v14 = *(_QWORD *)(a1 + 8 * v13);
        if ((v14 & 0x70000000) == 0x50000000)
        {
          v15 = v12;
          switch((v14 >> 21) & 0xF)
          {
            case 0u:
            case 1u:
            case 2u:
              v15 = v12 + 1.0;
              break;
            case 3u:
            case 8u:
            case 9u:
            case 0xAu:
              v15 = v12 + 2.0;
              break;
            case 4u:
              v15 = (float)(v12 + 1.0) + (float)(v12 + 1.0);
              break;
            case 5u:
            case 6u:
              v15 = (float)(v12 + 1.0) * 12.0;
              break;
            default:
              break;
          }
          switch((v14 >> 50) & 0xF)
          {
            case 0uLL:
            case 1uLL:
            case 2uLL:
              v12 = v12 + 1.0;
              break;
            case 3uLL:
            case 8uLL:
            case 9uLL:
            case 0xAuLL:
              v12 = v12 + 2.0;
              break;
            case 4uLL:
              v12 = (float)(v12 + 1.0) + (float)(v12 + 1.0);
              break;
            case 5uLL:
            case 6uLL:
              v12 = (float)(v12 + 1.0) * 12.0;
              break;
            default:
              break;
          }
          v16 = (float)v15;
          v17 = (float)v12;
          if (v16 >= v17)
            v17 = v16;
          v18 = (v14 >> 25) & 3;
          v19 = v17 + v17;
          if (v18 == 2)
            v20 = v17 * 4.0;
          else
            v20 = v17 + v17;
          if (v18 == 1)
            v20 = v17;
          v21 = (float)v20;
          v22 = (v14 >> 54) & 3;
          if ((_DWORD)v22 == 2)
            v19 = v17 * 4.0;
          if ((_DWORD)v22 != 1)
            v17 = v19;
          v12 = (float)v17;
          if (v21 >= v12)
            v12 = v21;
        }
        else
        {
          v12 = v12 + 1.0;
        }
      }
    }
    while (BYTE1(v11) >> v13++);
    if (v12 > 48.0)
    {
      *(_BYTE *)(a4 + 251) = 0;
      v11 = *(_QWORD *)a1;
    }
  }
  if ((v11 & 0x20000) != 0)
    goto LABEL_55;
  v24 = (v11 >> 8) & 1;
  v25 = v24 | 2;
  if ((v11 & 0x400) != 0)
    v25 = 1;
  if ((v11 & 0x200) != 0)
    v24 = v25;
  v26 = (v11 & 0x40000) != 0 ? v24 : BYTE1(v11);
  FirstActiveTexture = gleFStateProgram_GetFirstActiveTexture(v26, a1);
  if ((FirstActiveTexture & 0x80000000) != 0)
  {
LABEL_55:
    v28 = 0;
    if ((v7 & 1) != 0)
      goto LABEL_52;
LABEL_56:
    LODWORD(v32) = 0;
    v33 = 0;
    v34 = (int *)&v70;
LABEL_65:
    v41 = "fragmentShader";
    v42 = a3;
    v43 = 0;
    v44 = 0;
    v40 = 0;
    v45 = 0;
    goto LABEL_91;
  }
  v28 = 0;
  v29 = FirstActiveTexture;
  do
  {
    if (((v26 >> v29) & 1) != 0)
    {
      ++v28;
      gleLLVMAddTexture(*(_QWORD *)(a4 + 8), v29, HIBYTE(*(_QWORD *)(a1 + 8 + 8 * v29)) & 7, (*(_QWORD *)(a1 + 8 + 8 * v29) >> 62) & 1, *(uint64_t *)(a1 + 8 + 8 * v29) < 0);
    }
    ++v29;
  }
  while (v26 >> v29);
  if ((*(_DWORD *)(a4 + 280) & 1) == 0)
    goto LABEL_56;
LABEL_52:
  Attribs = gleFStateProgram_AllocateAttribs(a1, a4);
  if ((*(_QWORD *)a1 & 0x40000) != 0)
  {
    Attribs = gleFStateProgram_AllocateOutput(a4, 0);
    if ((*(_BYTE *)(a1 + 1) & 2) == 0)
      goto LABEL_64;
    v31 = 8;
    goto LABEL_59;
  }
  if ((*(_QWORD *)a1 & 0x20000) == 0)
  {
    v31 = 0;
LABEL_59:
    Attribs = gleFStateProgram_AllocateOutput(a4, v31);
    goto LABEL_64;
  }
  for (i = 0; i != 8; ++i)
  {
    if (((1 << i) & *(_BYTE *)(a1 + 1)) != 0)
      Attribs = gleFStateProgram_AllocateOutput(a4, i);
  }
LABEL_64:
  v32 = *(__int16 *)(a4 + 240);
  v33 = *(__int16 *)(a4 + 244);
  v36 = MEMORY[0x24BDAC7A8](Attribs);
  v34 = (int *)((char *)&v65 - v37);
  MEMORY[0x24BDAC7A8](v36);
  v40 = (int *)((char *)&v65 - v39);
  if ((v38 & 1) == 0)
    goto LABEL_65;
  if ((int)v32 >= 1)
  {
    v46 = (__int16 *)(a4 + 22);
    v47 = v32;
    v48 = v34;
    while (1)
    {
      v50 = *v46;
      v46 += 2;
      v49 = v50;
      if (v50 > 0xF)
        break;
      if (((1 << v49) & 0xC006) != 0)
      {
        if (*(_BYTE *)(a4 + 251))
          v51 = 11;
        else
          v51 = 7;
        goto LABEL_78;
      }
      if (((1 << v49) & 0x1008) != 0)
      {
        v51 = 5;
      }
      else
      {
        if (v49 != 13)
          break;
        v51 = 0;
      }
LABEL_78:
      *v48++ = v51;
      if (!--v47)
        goto LABEL_79;
    }
    v51 = 7;
    goto LABEL_78;
  }
LABEL_79:
  if (*(__int16 *)(a4 + 244) >= 1)
  {
    v52 = *(unsigned __int16 *)(a4 + 244);
    v53 = (unsigned __int16 *)(a4 + 174);
    v54 = (int *)((char *)&v65 - v39);
    do
    {
      v55 = *v53;
      v53 += 2;
      if (v55 == 8)
      {
        v56 = 4;
      }
      else if (*(_BYTE *)(a4 + 251))
      {
        v56 = 11;
      }
      else
      {
        v56 = 7;
      }
      *v54++ = v56;
      --v52;
    }
    while (v52);
  }
  if ((v38 & 8) != 0)
    v41 = "#main";
  else
    v41 = "fragmentShader";
  v42 = a3;
  v43 = v34;
  v44 = v32;
  v45 = v33;
LABEL_91:
  gleLLVMBeginMain(v42, (uint64_t)v41, v43, v44, v40, v45, v28);
  if ((*(_BYTE *)(a4 + 280) & 1) == 0)
    gleFStateProgram_AllocateAttribs(a1, a4);
  gleFStateProgram_Core(a1, a4);
  v68 = 0u;
  v69 = 0u;
  v66 = 0u;
  v67 = 0u;
  v65 = 0u;
  if (!*(_BYTE *)(a4 + 248))
  {
    *(_BYTE *)(a4 + 248) = 1;
    if ((*(_BYTE *)(a1 + 2) & 2) != 0)
    {
LABEL_106:
      *(_BYTE *)(a4 + 250) = 1;
      goto LABEL_107;
    }
    v57 = 1919389696;
    v68 = 0uLL;
    v69 = 0uLL;
    v66 = 0uLL;
    v67 = 0uLL;
    if (*(_BYTE *)(a4 + 251))
      v58 = 0x3100180000;
    else
      v58 = 0x3100080000;
    *(_QWORD *)&v65 = v58 & 0xFFFFFFFFFFFFFFC7 | (8 * (*(_DWORD *)(a4 + 16) & 7)) | 1;
    *(_DWORD *)(a4 + 16) = 1;
    if (*(_BYTE *)(a4 + 249))
    {
      *(_QWORD *)&v66 = ((gleFStateProgram_GetTemp(a4, 0) << 48) | 0x19C800) + 64;
      if (!*(_BYTE *)(a4 + 248))
      {
        Temp = gleFStateProgram_GetTemp(a4, 0);
LABEL_105:
        *((_QWORD *)&v65 + 1) = v57 | (Temp << 48);
        (*(void (**)(uint64_t, __int128 *))(a4 + 256))(a4, &v65);
        goto LABEL_106;
      }
    }
    else
    {
      v60 = *(unsigned __int16 *)(a4 + 24);
      if ((_DWORD)v60 == 0xFFFF)
      {
        v61 = *(__int16 *)(a4 + 240);
        v60 = *(unsigned __int16 *)(a4 + 240);
        *(_WORD *)(a4 + 24) = v61;
        *(_WORD *)(a4 + 4 * v61 + 22) = 1;
        *(_WORD *)(a4 + 240) = v61 + 1;
      }
      *(_QWORD *)&v66 = (v60 << 48) | 0x19C800;
    }
    Temp = gleFStateProgram_GetOutput(a4, 0);
    v57 = 1919397888;
    goto LABEL_105;
  }
LABEL_107:
  if ((*(_BYTE *)(a4 + 280) & 1) != 0
    || (v62 = **(_QWORD **)(*(_QWORD *)a4 + 104)) != 0
    && (*(_QWORD *)(v62 + 24) |= 0x4000uLL, (*(_DWORD *)(a4 + 280) & 1) != 0))
  {
    gleFStateProgram_GenerateMetadata((_QWORD *)a1, a4, (uint64_t)v34, v32, v33, v28);
  }
  return gleLLVMFinishMain(a3, *(__int16 *)(a4 + 242), v28);
}

uint64_t glpFragmentStateToLLVMIR(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD), uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  void **BitCodeStorage;
  int v9;
  unint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int16 *v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  int v35;
  int *v36;
  unsigned int v37;
  __int16 v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  __int16 *v42;
  char v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  int v50;
  int v51;
  __int128 v53;
  int v54;
  _OWORD v55[4];
  _OWORD v56[8];
  _BYTE v57[28];
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;

  v73 = 0u;
  v74 = 0u;
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v67 = 0u;
  v68 = 0u;
  v65 = 0u;
  v66 = 0u;
  v63 = 0u;
  v64 = 0u;
  v61 = 0u;
  v62 = 0u;
  v59 = 0u;
  v60 = 0u;
  *(_OWORD *)&v57[12] = 0u;
  v58 = 0u;
  v53 = 0u;
  v54 = 0;
  *(_QWORD *)&v57[14] = -1;
  *(_QWORD *)&v6 = -1;
  *((_QWORD *)&v6 + 1) = -1;
  *(_OWORD *)v57 = v6;
  v56[7] = v6;
  v56[6] = v6;
  v56[5] = v6;
  v56[4] = v6;
  v56[3] = v6;
  v56[2] = v6;
  v56[1] = v6;
  v56[0] = v6;
  v55[3] = v6;
  v55[2] = v6;
  v55[1] = v6;
  v55[0] = v6;
  DWORD2(v60) = 1;
  v7 = LLVMContextCreate();
  gleFragmentStateToModule(a1, v7, (uint64_t)&v61, (uint64_t)&v53);
  BitCodeStorage = (void **)createBitCodeStorage();
  v9 = writeByteCode(*((uint64_t *)&v62 + 1), (uint64_t)BitCodeStorage);
  v10 = (v9 + 8);
  v11 = v9 + 56;
  v12 = v9 + 8 * SWORD1(v58) + 72;
  v13 = v12 + gleAttribBindingSize((__int16)v58);
  v14 = a2(a3, v13);
  *(_DWORD *)v14 = 48;
  *(_DWORD *)(v14 + 4) = v11;
  *(_DWORD *)(v14 + 8) = v12;
  *(_DWORD *)(v14 + 12) = v13;
  *(_DWORD *)(v14 + 16) = 0;
  copyBitCodeStorage(BitCodeStorage, (_DWORD *)(v14 + 48), v10, 0);
  deleteBitCodeStorage(BitCodeStorage);
  *(_QWORD *)(v14 + 24) = 0;
  *(_QWORD *)&v60 = v14;
  v15 = *(_QWORD *)a1;
  v16 = *(_QWORD *)a1 & 1 ^ 0x100000001;
  if ((*(_QWORD *)a1 & 0x2000000) != 0)
    v16 = 1;
  v17 = 4 * v16;
  if ((BYTE8(v60) & 2) == 0)
    v17 = 0;
  v18 = 8 * v16;
  if ((BYTE8(v60) & 4) == 0)
    v18 = 0;
  v19 = v17 | v18;
  if ((v15 & 0x40) != 0)
    v19 |= 0x2000000020uLL;
  if ((v15 & 0xE0000) == 0)
  {
    v20 = BYTE1(v15);
    if (BYTE1(v15))
    {
      v21 = 0;
      do
      {
        v22 = 0x10000000100 << v21;
        if ((v20 & 1) == 0)
          v22 = 0;
        v19 |= v22;
        ++v21;
        v23 = v20 > 1;
        v20 >>= 1;
      }
      while (v23);
    }
  }
  *(_QWORD *)(v14 + 32) = (unint64_t)((v15 & 0xFF00000000) != 0) << 9;
  *(_QWORD *)(v60 + 40) = v19;
  v24 = v60;
  if ((_QWORD)v60)
  {
    v25 = v60 + *(int *)(v60 + 4);
    v26 = SWORD1(v58);
    v27 = WORD1(v58);
    *(_QWORD *)v25 = SWORD1(v58);
    *(_DWORD *)(v25 + 8) = v26;
  }
  else
  {
    v25 = 0;
    v27 = WORD1(v58);
  }
  if (v27 >= 1)
  {
    v28 = 0;
    v29 = 195;
    if (!BYTE11(v58))
      v29 = 193;
    v30 = (unsigned __int16 *)v56 + 1;
    do
    {
      v32 = *v30;
      v30 += 2;
      v31 = v32;
      if (v32 > 7)
      {
        if ((v31 & 0xFFF8) == 8)
        {
          v33 = v29 | ((unint64_t)(((_BYTE)v31 + 120) & 0x7F) << 32) | 0x1700;
        }
        else
        {
          v34 = v31 - 16;
          v33 = 6849;
          switch(v34)
          {
            case 1u:
              v33 = 7105;
              break;
            case 2u:
              v33 = v29 | 0x1900;
              break;
            case 3u:
              v33 = v29;
              break;
            default:
              break;
          }
        }
      }
      else
      {
        v33 = v29 | ((unint64_t)(v31 & 0x7F) << 32) | 0x1600;
      }
      if (v25)
      {
        *(_QWORD *)(v25 + 16 + 8 * v28) = v33;
        v27 = WORD1(v58);
      }
      ++v28;
    }
    while (v28 < v27);
    v24 = v60;
  }
  v35 = BYTE11(v58);
  if (v24)
  {
    v36 = (int *)(v24 + *(int *)(v24 + 8));
    v37 = gleAttribBindingSize((__int16)v58);
    bzero(v36, v37);
    v38 = v58;
    *v36 = (__int16)v58;
  }
  else
  {
    v36 = 0;
    v38 = v58;
  }
  if (v38 >= 1)
  {
    v39 = 0;
    v40 = 195;
    if (!v35)
      v40 = 193;
    v41 = v36 + 3;
    v42 = (__int16 *)v55 + 1;
    while (1)
    {
      v44 = *v42;
      v42 += 2;
      v43 = v44;
      v45 = 1217;
      switch(v44)
      {
        case 0:
          break;
        case 1:
          v45 = v40 | (*(_QWORD *)a1 >> 10) & 0x8000 | 0x800;
          break;
        case 2:
          v45 = v40 | (*(_QWORD *)a1 >> 10) & 0x8000 | 0xC00;
          break;
        case 3:
          v45 = 0x500007041;
          break;
        case 12:
          v45 = v40 & 3 | 0x3040;
          break;
        case 13:
          v45 = v40 & 3 | 0x2C08;
          break;
        case 14:
          v47 = (*(_QWORD *)a1 >> 10) & 0x8000;
          v48 = v40 | 0x100000800;
          goto LABEL_52;
        case 15:
          v47 = (*(_QWORD *)a1 >> 10) & 0x8000;
          v48 = v40 | 0x100000C00;
LABEL_52:
          v45 = v48 | v47;
          break;
        default:
          v46 = v40 | ((unint64_t)((v43 + 4) & 0x3F) << 32) | 0x7000;
          if (((1 << (v43 - 4)) & *(unsigned __int8 *)(a1 + 4)) != 0)
            v46 = v40 | 0x3000;
          v45 = v46 & 0x3FFFFFFEF8 | 1;
          break;
      }
      v49 = (v45 >> 10) & 0x1F;
      *(v41 - 1) = *(v41 - 1) & 0xFFFFC000 | v45 | (v49 << 8) | (v45 >> 2) & 0x2000;
      if (v49 <= 0xD)
      {
        if (v49 != 2 && v49 != 3)
          goto LABEL_62;
        v50 = -2;
        v51 = 1;
        goto LABEL_61;
      }
      if (v49 == 28)
        break;
      if (v49 == 14)
      {
        v50 = -32;
        v51 = 31;
LABEL_61:
        *v41 = *v41 & v50 | v51 & HIDWORD(v45);
      }
LABEL_62:
      ++v39;
      v41 += 2;
      if (v39 >= (__int16)v58)
        goto LABEL_63;
    }
    v50 = -512;
    v51 = 63;
    goto LABEL_61;
  }
LABEL_63:
  gleLLVMDestroyBuildContext((uint64_t)&v61);
  return LLVMContextDispose();
}

void gleFStateProgram_LLVMAddOperation(uint64_t a1, _DWORD *a2)
{
  gleLLVMAddOperation(*(_QWORD *)(a1 + 8), (uint64_t)a2, (*a2 >> 19) & 7);
}

uint64_t gleFStateProgram_AllocateAttribs(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  __int16 v5;
  uint64_t v6;
  __int16 v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _WORD *v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  __int16 v21;
  _WORD *v22;
  BOOL v23;
  int v24;
  unsigned int v25;
  char v26;
  uint64_t v27;

  v2 = *(_QWORD *)result;
  if ((*(_QWORD *)result & 0x20000) != 0)
  {
    if ((v2 & 0x40) != 0)
    {
      v9 = *(__int16 *)(a2 + 240);
      *(_WORD *)(a2 + 32) = v9;
      *(_WORD *)(a2 + 4 * v9 + 22) = 3;
      *(_WORD *)(a2 + 240) = v9 + 1;
      v8 = 1;
    }
    else
    {
      v8 = 0;
    }
    v10 = 0;
    v11 = 0;
    v12 = (_WORD *)(a2 + 36);
    do
    {
      if (((1 << v10) & *(_BYTE *)(result + 1)) != 0)
      {
        v13 = *(__int16 *)(a2 + 240);
        *v12 = v13;
        *(_WORD *)(a2 + 4 * v13 + 22) = v10 + 4;
        *(_WORD *)(a2 + 240) = v13 + 1;
        ++v11;
      }
      ++v10;
      v12 += 2;
    }
    while (v10 != 8);
    v4 = 0;
  }
  else if ((v2 & 0x40000) != 0)
  {
    if ((v2 & 0x400) != 0)
    {
      v16 = *(__int16 *)(a2 + 240);
      *(_WORD *)(a2 + 24) = v16;
      v4 = 1;
      *(_WORD *)(a2 + 4 * v16 + 22) = 1;
      v17 = v16 + 1;
      *(_WORD *)(a2 + 240) = v16 + 1;
      v2 = *(_QWORD *)result;
      if ((*(_QWORD *)result & 0x1000000) != 0)
      {
        *(_WORD *)(a2 + 76) = v17;
        *(_WORD *)(a2 + 4 * v17 + 22) = 14;
        *(_WORD *)(a2 + 240) = v16 + 2;
        v2 = *(_QWORD *)result;
        v4 = 2;
      }
    }
    else
    {
      v4 = 0;
    }
    if ((v2 & 0x300) != 0)
    {
      v18 = *(__int16 *)(a2 + 240);
      *(_WORD *)(a2 + 36) = v18;
      *(_WORD *)(a2 + 4 * v18 + 22) = 4;
      *(_WORD *)(a2 + 240) = v18 + 1;
      v2 = *(_QWORD *)result;
      v11 = 1;
    }
    else
    {
      v11 = 0;
    }
    v8 = 0;
    if ((v2 & 0x1800) != 0)
    {
      v19 = *(__int16 *)(a2 + 240);
      *(_WORD *)(a2 + 40) = v19;
      *(_WORD *)(a2 + 4 * v19 + 22) = 5;
      *(_WORD *)(a2 + 240) = v19 + 1;
      ++v11;
    }
  }
  else
  {
    if ((v2 & 0x80000) == 0)
    {
      v3 = *(__int16 *)(a2 + 240);
      *(_WORD *)(a2 + 24) = v3;
      v4 = 1;
      *(_WORD *)(a2 + 4 * v3 + 22) = 1;
      v5 = v3 + 1;
      *(_WORD *)(a2 + 240) = v3 + 1;
      v6 = *(_QWORD *)result;
      if ((*(_QWORD *)result & 0x1000000) != 0)
      {
        *(_WORD *)(a2 + 76) = v5;
        *(_WORD *)(a2 + 4 * v5 + 22) = 14;
        v5 = v3 + 2;
        *(_WORD *)(a2 + 240) = v3 + 2;
        v6 = *(_QWORD *)result;
        v4 = 2;
      }
      if ((v6 & 8) != 0)
      {
        *(_WORD *)(a2 + 28) = v5;
        *(_WORD *)(a2 + 4 * v5 + 22) = 2;
        v7 = v5 + 1;
        *(_WORD *)(a2 + 240) = v5 + 1;
        v6 = *(_QWORD *)result;
        if ((*(_QWORD *)result & 0x1000000) != 0)
        {
          *(_WORD *)(a2 + 80) = v7;
          *(_WORD *)(a2 + 4 * v7 + 22) = 15;
          v7 = v5 + 2;
          *(_WORD *)(a2 + 240) = v5 + 2;
          v4 += 2;
          v6 = *(_QWORD *)result;
        }
        else
        {
          ++v4;
        }
      }
      else
      {
        v7 = v5;
      }
      v20 = BYTE1(v2);
      if ((v6 & 0x40) != 0)
      {
        *(_WORD *)(a2 + 32) = v7;
        *(_WORD *)(a2 + 4 * v7++ + 22) = 3;
        *(_WORD *)(a2 + 240) = v7;
        v8 = 1;
        if (v20)
        {
LABEL_34:
          v21 = 0;
          v11 = 0;
          v22 = (_WORD *)(a2 + 36);
          do
          {
            if ((v20 & 1) != 0)
            {
              *v22 = v7;
              *(_WORD *)(a2 + 4 * v7++ + 22) = v21 + 4;
              *(_WORD *)(a2 + 240) = v7;
              ++v11;
            }
            ++v21;
            v22 += 2;
            v23 = v20 > 1;
            v20 >>= 1;
          }
          while (v23);
          goto LABEL_41;
        }
      }
      else
      {
        v8 = 0;
        if (v20)
          goto LABEL_34;
      }
      v11 = 0;
LABEL_41:
      if ((*(_BYTE *)(a2 + 280) & 1) != 0 && *(_BYTE *)(a2 + 252))
      {
        *(_WORD *)(a2 + 72) = v7;
        *(_WORD *)(a2 + 4 * v7 + 22) = 13;
        *(_WORD *)(a2 + 240) = v7 + 1;
      }
      goto LABEL_44;
    }
    v14 = *(__int16 *)(a2 + 240);
    *(_WORD *)(a2 + 24) = v14;
    v4 = 1;
    *(_WORD *)(a2 + 4 * v14 + 22) = 1;
    v15 = v14 + 1;
    *(_WORD *)(a2 + 240) = v14 + 1;
    if ((*(_BYTE *)(result + 3) & 1) != 0)
    {
      *(_WORD *)(a2 + 76) = v15;
      *(_WORD *)(a2 + 4 * v15 + 22) = 14;
      v15 = v14 + 2;
      v4 = 2;
    }
    v8 = 0;
    *(_WORD *)(a2 + 36) = v15;
    *(_WORD *)(a2 + 4 * v15 + 22) = 4;
    *(_WORD *)(a2 + 240) = v15 + 1;
    v11 = 1;
  }
LABEL_44:
  v24 = *(_DWORD *)(a2 + 280);
  if ((v24 & 1) != 0)
  {
    v25 = *(unsigned __int8 *)(result + 1);
    if (*(_BYTE *)(result + 1))
    {
      v26 = 0;
      do
      {
        if ((v25 & 1) != 0 && ((1 << v26) & *(unsigned __int8 *)(*(_QWORD *)(a2 + 264) + 4)) != 0)
        {
          v27 = *(__int16 *)(a2 + 240);
          *(_WORD *)(a2 + 68) = v27;
          *(_WORD *)(a2 + 4 * v27 + 22) = 12;
          *(_WORD *)(a2 + 240) = v27 + 1;
        }
        ++v26;
        v23 = v25 > 1;
        v25 >>= 1;
      }
      while (v23);
      v24 = *(_DWORD *)(a2 + 280);
    }
  }
  if ((v24 & 1) == 0)
    return gleLLVMCreateVaryingsMetaData(*(_QWORD **)(a2 + 8), "graphics.fragmentInputs", v4, v8, v11, (*(_QWORD *)result >> 25) & 1, (*(_QWORD *)result & 1) == 0);
  return result;
}

uint64_t gleFStateProgram_Core(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL4 v12;
  uint64_t Output;
  uint64_t v14;
  uint64_t v15;
  uint64_t (**v16)();
  int v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t Temp;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int v110;
  _OWORD v111[6];

  v3 = result;
  v4 = *(_QWORD *)result;
  if ((*(_QWORD *)result & 0x20000) != 0)
  {
    v25 = 0;
    v26 = 36;
    do
    {
      if (((1 << v25) & *(_BYTE *)(v3 + 1)) != 0)
      {
        memset((char *)v111 + 8, 0, 72);
        v27 = 0x3100180000;
        if (!*(_BYTE *)(a2 + 251))
          v27 = 0x3100080000;
        *(_QWORD *)&v111[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | v27 | 1;
        *(_DWORD *)(a2 + 16) = 1;
        v28 = *(unsigned __int16 *)(a2 + v26);
        if ((_DWORD)v28 == 0xFFFF)
        {
          v29 = *(__int16 *)(a2 + 240);
          *(_WORD *)(a2 + v26) = v29;
          v28 = (unsigned __int16)v29;
          *(_WORD *)(a2 + 4 * v29 + 22) = v25 + 4;
          *(_WORD *)(a2 + 240) = v29 + 1;
        }
        *(_QWORD *)&v111[1] = (v28 << 48) | 0x19C800;
        *((_QWORD *)&v111[0] + 1) = ((gleFStateProgram_GetOutput(a2, v25) << 48) | 0x72679000) + 0x2000;
        result = (*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 256))(a2, v111);
      }
      ++v25;
      v26 += 4;
    }
    while (v25 != 8);
    goto LABEL_116;
  }
  if ((v4 & 0x40000) != 0)
  {
    *(_BYTE *)(a2 + 248) = 1;
    v30 = *(_QWORD *)result;
    if ((*(_QWORD *)result & 0x100) != 0)
    {
      memset(&v111[2], 0, 48);
      v39 = 8 * (*(_DWORD *)(a2 + 16) & 7);
      if (*(_BYTE *)(a2 + 251))
        v40 = 0x3100188000;
      else
        v40 = 0x3100088000;
      *(_DWORD *)(a2 + 16) = 2;
      *(_QWORD *)&v111[0] = v39 | 0x1082 | v40;
      v41 = *(unsigned __int16 *)(a2 + 36);
      if ((_DWORD)v41 == 0xFFFF)
      {
        v42 = *(__int16 *)(a2 + 240);
        v41 = *(unsigned __int16 *)(a2 + 240);
        *(_WORD *)(a2 + 36) = v42;
        *(_WORD *)(a2 + 4 * v42 + 22) = 4;
        *(_WORD *)(a2 + 240) = v42 + 1;
      }
      *(_QWORD *)&v111[1] = (v41 << 48) | 0x19C800;
      *((_QWORD *)&v111[1] + 1) = 2;
      if ((*(_BYTE *)(result + 1) & 0x10) != 0)
      {
        Temp = gleFStateProgram_GetTemp(a2, 1u);
        v44 = 1919389696;
      }
      else
      {
        Temp = gleFStateProgram_GetOutput(a2, 0);
        v44 = 1919397888;
      }
      *((_QWORD *)&v111[0] + 1) = v44 | (Temp << 48);
      result = (*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 256))(a2, v111);
      v30 = *(_QWORD *)v3;
      if ((*(_QWORD *)v3 & 0x200) == 0)
      {
LABEL_65:
        if ((v30 & 0x400) == 0)
          goto LABEL_66;
        goto LABEL_97;
      }
    }
    else if ((v30 & 0x200) == 0)
    {
      goto LABEL_65;
    }
    memset((char *)v111 + 8, 0, 72);
    v45 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = 2;
    *(_QWORD *)&v111[0] = (8 * (v45 & 7)) | 0x3100089082;
    v46 = *(unsigned __int16 *)(a2 + 36);
    if ((_DWORD)v46 == 0xFFFF)
    {
      v47 = *(__int16 *)(a2 + 240);
      v46 = *(unsigned __int16 *)(a2 + 240);
      *(_WORD *)(a2 + 36) = v47;
      *(_WORD *)(a2 + 4 * v47 + 22) = 4;
      *(_WORD *)(a2 + 240) = v47 + 1;
    }
    v48 = (v46 << 48) | 0x19C800;
    v49 = 2;
    if ((*(_QWORD *)v3 & 0x400) == 0)
      v49 = 0x100000002;
    *(_QWORD *)&v111[1] = v48;
    *((_QWORD *)&v111[1] + 1) = v49;
    *((_QWORD *)&v111[0] + 1) = ((gleFStateProgram_GetOutput(a2, 8u) << 48) | 0x72679000) + 0x2000;
    result = (*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 256))(a2, v111);
    v30 = *(_QWORD *)v3;
    if ((*(_QWORD *)v3 & 0x400) == 0)
    {
LABEL_66:
      if ((v30 & 0x800) == 0)
        goto LABEL_67;
      goto LABEL_103;
    }
LABEL_97:
    memset((char *)v111 + 8, 0, 72);
    if (*(_BYTE *)(a2 + 251))
      v50 = 0x3100180000;
    else
      v50 = 0x3100080000;
    *(_QWORD *)&v111[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | v50 | 1;
    *(_DWORD *)(a2 + 16) = 1;
    v51 = *(unsigned __int16 *)(a2 + 24);
    if ((_DWORD)v51 == 0xFFFF)
    {
      v52 = *(__int16 *)(a2 + 240);
      v51 = *(unsigned __int16 *)(a2 + 240);
      *(_WORD *)(a2 + 24) = v52;
      *(_WORD *)(a2 + 4 * v52 + 22) = 1;
      *(_WORD *)(a2 + 240) = v52 + 1;
    }
    *(_QWORD *)&v111[1] = (v51 << 48) | 0x19C800;
    *((_QWORD *)&v111[0] + 1) = ((gleFStateProgram_GetOutput(a2, 0) << 48) | 0x72679000) + 0x2000;
    result = (*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 256))(a2, v111);
    v30 = *(_QWORD *)v3;
    if ((*(_QWORD *)v3 & 0x800) == 0)
    {
LABEL_67:
      if ((v30 & 0x1000) == 0)
        goto LABEL_116;
LABEL_109:
      memset((char *)v111 + 8, 0, 72);
      if (*(_BYTE *)(a2 + 251))
        v56 = 0x3100180000;
      else
        v56 = 0x3100080000;
      *(_QWORD *)&v111[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x882 | v56;
      *(_DWORD *)(a2 + 16) = 2;
      v57 = *(unsigned __int16 *)(a2 + 40);
      if ((_DWORD)v57 == 0xFFFF)
      {
        v58 = *(__int16 *)(a2 + 240);
        v57 = *(unsigned __int16 *)(a2 + 240);
        *(_WORD *)(a2 + 40) = v58;
        *(_WORD *)(a2 + 4 * v58 + 22) = 5;
        *(_WORD *)(a2 + 240) = v58 + 1;
      }
      *(_QWORD *)&v111[1] = (v57 << 48) | 0x19C800;
      *((_QWORD *)&v111[1] + 1) = (gleFStateProgram_GetTemp(a2, 1u) << 48) | 0x19C840;
      goto LABEL_115;
    }
LABEL_103:
    memset((char *)v111 + 8, 0, 72);
    if (*(_BYTE *)(a2 + 251))
      v53 = 0x3100180000;
    else
      v53 = 0x3100080000;
    *(_QWORD *)&v111[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | v53 | 1;
    *(_DWORD *)(a2 + 16) = 1;
    v54 = *(unsigned __int16 *)(a2 + 40);
    if ((_DWORD)v54 == 0xFFFF)
    {
      v55 = *(__int16 *)(a2 + 240);
      v54 = *(unsigned __int16 *)(a2 + 240);
      *(_WORD *)(a2 + 40) = v55;
      *(_WORD *)(a2 + 4 * v55 + 22) = 5;
      *(_WORD *)(a2 + 240) = v55 + 1;
    }
    *(_QWORD *)&v111[1] = (v54 << 48) | 0x19C800;
    *((_QWORD *)&v111[0] + 1) = ((gleFStateProgram_GetOutput(a2, 0) << 48) | 0x72679000) + 0x2000;
    result = (*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 256))(a2, v111);
    if ((*(_QWORD *)v3 & 0x1000) == 0)
      goto LABEL_116;
    goto LABEL_109;
  }
  if ((v4 & 0x80000) != 0)
  {
    *(_BYTE *)(a2 + 248) = 1;
    memset(&v111[2], 0, 48);
    v31 = 8 * (*(_DWORD *)(a2 + 16) & 7);
    if (*(_BYTE *)(a2 + 251))
      v32 = 0x3100188000;
    else
      v32 = 0x3100088000;
    *(_DWORD *)(a2 + 16) = 2;
    *(_QWORD *)&v111[0] = v31 | 0x1082 | v32;
    v33 = *(unsigned __int16 *)(a2 + 36);
    if ((_DWORD)v33 == 0xFFFF)
    {
      v34 = *(__int16 *)(a2 + 240);
      v33 = *(unsigned __int16 *)(a2 + 240);
      *(_WORD *)(a2 + 36) = v34;
      *(_WORD *)(a2 + 4 * v34 + 22) = 4;
      *(_WORD *)(a2 + 240) = v34 + 1;
    }
    *(_QWORD *)&v111[1] = (v33 << 48) | 0x19C800;
    *((_QWORD *)&v111[1] + 1) = 2;
    *((_QWORD *)&v111[0] + 1) = (gleFStateProgram_GetTemp(a2, 1u) << 48) | 0x72679000;
    (*(void (**)(uint64_t, _OWORD *))(a2 + 256))(a2, v111);
    memset((char *)v111 + 8, 0, 72);
    if (*(_BYTE *)(a2 + 251))
      v35 = 0x3100180000;
    else
      v35 = 0x3100080000;
    *(_QWORD *)&v111[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x13C1 | v35;
    *(_DWORD *)(a2 + 16) = 1;
    *(_QWORD *)&v111[1] = (gleFStateProgram_GetTemp(a2, 1u) << 48) | 0x1FE50;
    *(_QWORD *)&v111[0] &= ~0x100000000uLL;
    (*(void (**)(uint64_t, _OWORD *))(a2 + 256))(a2, v111);
    memset((char *)v111 + 8, 0, 72);
    if (*(_BYTE *)(a2 + 251))
      v36 = 0x3100180000;
    else
      v36 = 0x3100080000;
    *(_QWORD *)&v111[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | v36 | 1;
    *(_DWORD *)(a2 + 16) = 1;
    v37 = *(unsigned __int16 *)(a2 + 24);
    if ((_DWORD)v37 == 0xFFFF)
    {
      v38 = *(__int16 *)(a2 + 240);
      v37 = *(unsigned __int16 *)(a2 + 240);
      *(_WORD *)(a2 + 24) = v38;
      *(_WORD *)(a2 + 4 * v38 + 22) = 1;
      *(_WORD *)(a2 + 240) = v38 + 1;
    }
    *(_QWORD *)&v111[1] = (v37 << 48) | 0x19C800;
LABEL_115:
    *((_QWORD *)&v111[0] + 1) = ((gleFStateProgram_GetOutput(a2, 0) << 48) | 0x72679000) + 0x2000;
    result = (*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 256))(a2, v111);
    goto LABEL_116;
  }
  v110 = BYTE1(v4);
  result = gleFStateProgram_GetFirstActiveTexture(BYTE1(v4), result);
  if ((result & 0x80000000) == 0)
  {
    v5 = result;
    while (1)
    {
      v6 = v110 >> (v5 + 1);
      if (((v110 >> v5) & 1) != 0)
        break;
LABEL_52:
      ++v5;
      if (!v6)
        goto LABEL_116;
    }
    v7 = v3 + 8 * v5;
    v8 = *(_QWORD *)(v7 + 8);
    v9 = (v8 >> 59) & 7;
    v10 = (v8 >> 28) & 7;
    if (v10 == 1)
    {
      v12 = v9 < 4;
      if (v6)
        goto LABEL_21;
    }
    else if (v10 == 3)
    {
      v12 = (v8 & 0x3000000000000000) == 0x1000000000000000 || v9 == 5;
      if (v6)
        goto LABEL_21;
    }
    else
    {
      v12 = 0;
      if (v6)
        goto LABEL_21;
    }
    if ((*(_BYTE *)v3 & 0x48) == 0)
    {
      *(_BYTE *)(a2 + 248) = 1;
      *(_BYTE *)(a2 + 250) = 0;
      if (v12)
        goto LABEL_22;
      goto LABEL_27;
    }
LABEL_21:
    if (v12)
    {
LABEL_22:
      if (*(_BYTE *)(a2 + 248))
      {
        Output = gleFStateProgram_GetOutput(a2, 0);
        v14 = 1919397888;
      }
      else
      {
        Output = gleFStateProgram_GetTemp(a2, 0);
        v14 = 1919389696;
      }
      result = gleStateProgram_TextureSampleOp((uint64_t *)v3, a2, v14 | (Output << 48), v5);
LABEL_51:
      *(_WORD *)(a2 + 249) = 257;
      goto LABEL_52;
    }
LABEL_27:
    v15 = gleFStateProgram_GetTemp(a2, 1u);
    gleStateProgram_TextureSampleOp((uint64_t *)v3, a2, (v15 << 48) | 0x72679000, v5);
    if (v10 == 5)
    {
      memset(v111, 0, 80);
      v17 = *(_QWORD *)(v7 + 8) & 0x1F;
      switch(v17)
      {
        case 0:
          v18 = a2;
          v19 = 1;
          goto LABEL_43;
        case 1:
          v22 = a2;
          v23 = v5;
          goto LABEL_49;
        case 2:
          goto LABEL_44;
        case 3:
          if (*(_BYTE *)(a2 + 249))
          {
            v18 = a2;
            v19 = 0;
LABEL_43:
            gleFStateProgram_GetTemp(v18, v19);
          }
          else
          {
LABEL_44:
            if (*(unsigned __int16 *)(a2 + 24) == 0xFFFF)
            {
              v24 = *(__int16 *)(a2 + 240);
              *(_WORD *)(a2 + 24) = v24;
              *(_WORD *)(a2 + 4 * v24 + 22) = 1;
              *(_WORD *)(a2 + 240) = v24 + 1;
            }
          }
LABEL_50:
          __asm { BR              X10 }
          return result;
        case 4:
          gleFStateProgram_GetParam(a2, 19);
          goto LABEL_50;
        case 5:
          v22 = a2;
          v23 = 20;
LABEL_49:
          gleFStateProgram_GetParam(v22, v23);
          goto LABEL_50;
        default:
          v20 = v17 - 6;
          v21 = gleFStateProgram_GetTemp(a2, 7u);
          gleStateProgram_TextureSampleOp((uint64_t *)v3, a2, (v21 << 48) | 0x72679000, v20);
          v18 = a2;
          v19 = 7;
          goto LABEL_43;
      }
    }
    switch(v9)
    {
      case 0uLL:
        v16 = &gleStateProgram_ApplyFuncsA;
        break;
      case 1uLL:
        v16 = &gleStateProgram_ApplyFuncsL;
        break;
      case 2uLL:
        v16 = &gleStateProgram_ApplyFuncsLA;
        break;
      case 3uLL:
        v16 = &gleStateProgram_ApplyFuncsI;
        break;
      case 4uLL:
        v16 = &gleStateProgram_ApplyFuncsRGB;
        break;
      default:
        v16 = &gleStateProgram_ApplyFuncsRGBA;
        break;
    }
    result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v16[v10])(v3, a2, v5);
    goto LABEL_51;
  }
LABEL_116:
  v59 = *(_QWORD *)v3;
  if ((*(_QWORD *)v3 & 8) == 0)
  {
    if ((v59 & 0x40) == 0)
      return result;
LABEL_136:
    *(_BYTE *)(a2 + 248) = 1;
    *(_BYTE *)(a2 + 250) = 0;
    gleStateProgram_CheckDestInit(a2);
    v69 = *(_QWORD *)v3;
    if ((*(_QWORD *)v3 & 0x80) != 0)
    {
LABEL_173:
      memset((char *)v111 + 8, 0, 72);
      if (*(_BYTE *)(a2 + 251))
        v99 = 0x3100180000;
      else
        v99 = 0x3100080000;
      *(_QWORD *)&v111[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0xF03 | v99;
      *(_DWORD *)(a2 + 16) = 3;
      if ((*(_BYTE *)v3 & 0x80) != 0)
      {
        LODWORD(v100) = *(unsigned __int16 *)(a2 + 32);
        if ((_DWORD)v100 == 0xFFFF)
        {
          v102 = *(__int16 *)(a2 + 240);
          LODWORD(v100) = *(unsigned __int16 *)(a2 + 240);
          *(_WORD *)(a2 + 32) = v102;
          *(_WORD *)(a2 + 4 * v102 + 22) = 3;
          *(_WORD *)(a2 + 240) = v102 + 1;
        }
        v100 = v100;
        v101 = 43520;
      }
      else
      {
        v100 = (unsigned __int16)gleFStateProgram_GetTemp(a2, 0xAu);
        v101 = 1689664;
      }
      *(_QWORD *)&v111[1] = v101 | (v100 << 48);
      if (*(_BYTE *)(a2 + 249))
      {
        v103 = (unsigned __int16)gleFStateProgram_GetTemp(a2, 0);
        v104 = 1689664;
      }
      else
      {
        LODWORD(v103) = *(unsigned __int16 *)(a2 + 24);
        if ((_DWORD)v103 == 0xFFFF)
        {
          v105 = *(__int16 *)(a2 + 240);
          LODWORD(v103) = *(unsigned __int16 *)(a2 + 240);
          *(_WORD *)(a2 + 24) = v105;
          *(_WORD *)(a2 + 4 * v105 + 22) = 1;
          *(_WORD *)(a2 + 240) = v105 + 1;
        }
        v103 = v103;
        v104 = 1689600;
      }
      *((_QWORD *)&v111[1] + 1) = v104 | (v103 << 48);
      v106 = *(unsigned __int16 *)(a2 + 156);
      if ((_DWORD)v106 == 0xFFFF)
      {
        v107 = *(__int16 *)(a2 + 242);
        v106 = *(unsigned __int16 *)(a2 + 242);
        *(_WORD *)(a2 + 156) = v107;
        *(_WORD *)(a2 + 4 * v107 + 86) = 18;
        *(_WORD *)(a2 + 242) = v107 + 1;
      }
      *(_QWORD *)&v111[2] = ((v106 << 48) | 0x19C840) + 64;
      if (*(_BYTE *)(a2 + 248))
      {
        v108 = gleFStateProgram_GetOutput(a2, 0);
        v109 = 1918906368;
      }
      else
      {
        v108 = gleFStateProgram_GetTemp(a2, 0);
        v109 = 1918898176;
      }
      *((_QWORD *)&v111[0] + 1) = v109 | (v108 << 48) | 0x70000;
      result = (*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 256))(a2, v111);
      *(_WORD *)(a2 + 249) = 257;
      return result;
    }
    v70 = (v69 >> 1) & 3;
    if (v70 == 2)
    {
      if ((v69 & 0x20) == 0)
      {
        memset((char *)&v111[1] + 8, 0, 56);
        v76 = *(_DWORD *)(a2 + 16);
        *(_DWORD *)(a2 + 16) = 1;
        *(_QWORD *)&v111[0] = (8 * (v76 & 7)) | 0x3100080081;
        v77 = *(unsigned __int16 *)(a2 + 32);
        if ((_DWORD)v77 == 0xFFFF)
        {
          v78 = *(__int16 *)(a2 + 240);
          v77 = *(unsigned __int16 *)(a2 + 240);
          *(_WORD *)(a2 + 32) = v78;
          *(_WORD *)(a2 + 4 * v78 + 22) = 3;
          *(_WORD *)(a2 + 240) = v78 + 1;
        }
        *(_QWORD *)&v111[1] = v77 << 48;
        *((_QWORD *)&v111[0] + 1) = (gleFStateProgram_GetTemp(a2, 0xAu) << 48) | 0x72679000;
        (*(void (**)(uint64_t, _OWORD *))(a2 + 256))(a2, v111);
      }
      memset((char *)v111 + 8, 0, 72);
      v79 = *(_DWORD *)(a2 + 16);
      *(_DWORD *)(a2 + 16) = 2;
      *(_QWORD *)&v111[0] = (8 * (v79 & 7)) | 0x3100080882;
      if ((*(_BYTE *)v3 & 0x20) != 0)
      {
        v94 = *(unsigned __int16 *)(a2 + 32);
        if ((_DWORD)v94 == 0xFFFF)
        {
          v95 = *(__int16 *)(a2 + 240);
          v94 = *(unsigned __int16 *)(a2 + 240);
          *(_WORD *)(a2 + 32) = v95;
          *(_WORD *)(a2 + 4 * v95 + 22) = 3;
          *(_WORD *)(a2 + 240) = v95 + 1;
        }
        v80 = v94 << 48;
      }
      else
      {
        v80 = (gleFStateProgram_GetTemp(a2, 0xAu) << 48) | 0x19C840;
      }
      *(_QWORD *)&v111[1] = v80;
      v96 = *(unsigned __int16 *)(a2 + 152);
      if ((_DWORD)v96 == 0xFFFF)
      {
        v97 = *(__int16 *)(a2 + 242);
        v96 = *(unsigned __int16 *)(a2 + 242);
        *(_WORD *)(a2 + 152) = v97;
        *(_WORD *)(a2 + 4 * v97 + 86) = 17;
        *(_WORD *)(a2 + 242) = v97 + 1;
      }
      *((_QWORD *)&v111[1] + 1) = (v96 << 48) | 0x80;
      *((_QWORD *)&v111[0] + 1) = (gleFStateProgram_GetTemp(a2, 0xAu) << 48) | 0x72679000;
      (*(void (**)(uint64_t, _OWORD *))(a2 + 256))(a2, v111);
      memset((char *)v111 + 8, 0, 72);
      v98 = *(_DWORD *)(a2 + 16);
      *(_DWORD *)(a2 + 16) = 1;
      *(_QWORD *)&v111[0] = (8 * (v98 & 7)) | 0x100080401;
      if ((*(_BYTE *)v3 & 0x20) != 0)
        *(_QWORD *)&v111[0] = (8 * (v98 & 7)) | 0x80100080401;
    }
    else
    {
      if (v70 == 1)
      {
        if ((v69 & 0x20) == 0)
        {
          memset((char *)&v111[1] + 8, 0, 56);
          v71 = *(_DWORD *)(a2 + 16);
          *(_DWORD *)(a2 + 16) = 1;
          *(_QWORD *)&v111[0] = (8 * (v71 & 7)) | 0x3100080081;
          v72 = *(unsigned __int16 *)(a2 + 32);
          if ((_DWORD)v72 == 0xFFFF)
          {
            v73 = *(__int16 *)(a2 + 240);
            v72 = *(unsigned __int16 *)(a2 + 240);
            *(_WORD *)(a2 + 32) = v73;
            *(_WORD *)(a2 + 4 * v73 + 22) = 3;
            *(_WORD *)(a2 + 240) = v73 + 1;
          }
          *(_QWORD *)&v111[1] = v72 << 48;
          *((_QWORD *)&v111[0] + 1) = (gleFStateProgram_GetTemp(a2, 0xAu) << 48) | 0x72679000;
          (*(void (**)(uint64_t, _OWORD *))(a2 + 256))(a2, v111);
        }
        memset((char *)v111 + 8, 0, 72);
        v74 = *(_DWORD *)(a2 + 16);
        *(_DWORD *)(a2 + 16) = 3;
        *(_QWORD *)&v111[0] = (8 * (v74 & 7)) | 0x83100080FC3;
        if ((*(_BYTE *)v3 & 0x20) != 0)
        {
          v88 = *(unsigned __int16 *)(a2 + 32);
          if ((_DWORD)v88 == 0xFFFF)
          {
            v89 = *(__int16 *)(a2 + 240);
            v88 = *(unsigned __int16 *)(a2 + 240);
            *(_WORD *)(a2 + 32) = v89;
            *(_WORD *)(a2 + 4 * v89 + 22) = 3;
            *(_WORD *)(a2 + 240) = v89 + 1;
          }
          v75 = v88 << 48;
        }
        else
        {
          v75 = (gleFStateProgram_GetTemp(a2, 0xAu) << 48) | 0x19C840;
        }
        *(_QWORD *)&v111[1] = v75 | 0x10;
        v90 = *(unsigned __int16 *)(a2 + 148);
        if ((_DWORD)v90 == 0xFFFF)
        {
          v91 = *(__int16 *)(a2 + 242);
          v90 = *(unsigned __int16 *)(a2 + 242);
          *(_WORD *)(a2 + 148) = v91;
          *(_WORD *)(a2 + 4 * v91 + 86) = 16;
          *(_WORD *)(a2 + 242) = v91 + 1;
        }
        *((_QWORD *)&v111[1] + 1) = ((v90 << 48) | 0x1FE40) + 64;
        v92 = *(unsigned __int16 *)(a2 + 152);
        if ((_DWORD)v92 == 0xFFFF)
        {
          v93 = *(__int16 *)(a2 + 242);
          v92 = *(unsigned __int16 *)(a2 + 242);
          *(_WORD *)(a2 + 152) = v93;
          *(_WORD *)(a2 + 4 * v93 + 86) = 17;
          *(_WORD *)(a2 + 242) = v93 + 1;
        }
        *(_QWORD *)&v111[2] = ((v92 << 48) | 0x1FE40) + 64;
        goto LABEL_172;
      }
      memset(&v111[2], 0, 48);
      v81 = *(_DWORD *)(a2 + 16);
      *(_DWORD *)(a2 + 16) = 2;
      *(_QWORD *)&v111[0] = (8 * (v81 & 7)) | 0x3100080882;
      v82 = *(unsigned __int16 *)(a2 + 32);
      if ((_DWORD)v82 == 0xFFFF)
      {
        v83 = *(__int16 *)(a2 + 240);
        v82 = *(unsigned __int16 *)(a2 + 240);
        *(_WORD *)(a2 + 32) = v83;
        *(_WORD *)(a2 + 4 * v83 + 22) = 3;
        *(_WORD *)(a2 + 240) = v83 + 1;
      }
      *(_QWORD *)&v111[1] = v82 << 48;
      v84 = *(unsigned __int16 *)(a2 + 152);
      if ((_DWORD)v84 == 0xFFFF)
      {
        v85 = *(__int16 *)(a2 + 242);
        v84 = *(unsigned __int16 *)(a2 + 242);
        *(_WORD *)(a2 + 152) = v85;
        *(_WORD *)(a2 + 4 * v85 + 86) = 17;
        *(_WORD *)(a2 + 242) = v85 + 1;
      }
      *((_QWORD *)&v111[1] + 1) = (v84 << 48) | 0xAA80;
      *((_QWORD *)&v111[0] + 1) = (gleFStateProgram_GetTemp(a2, 0xAu) << 48) | 0x72679000;
      (*(void (**)(uint64_t, _OWORD *))(a2 + 256))(a2, v111);
      memset((char *)v111 + 8, 0, 72);
      v86 = *(_DWORD *)(a2 + 16);
      *(_DWORD *)(a2 + 16) = 2;
      *(_QWORD *)&v111[0] = (8 * (v86 & 7)) | 0x3100080882;
      *(_QWORD *)&v111[1] = (gleFStateProgram_GetTemp(a2, 0xAu) << 48) | 0x19C840;
      *((_QWORD *)&v111[1] + 1) = (gleFStateProgram_GetTemp(a2, 0xAu) << 48) | 0x19C840;
      *((_QWORD *)&v111[0] + 1) = (gleFStateProgram_GetTemp(a2, 0xAu) << 48) | 0x72679000;
      (*(void (**)(uint64_t, _OWORD *))(a2 + 256))(a2, v111);
      memset((char *)v111 + 8, 0, 72);
      v87 = *(_DWORD *)(a2 + 16);
      *(_DWORD *)(a2 + 16) = 1;
      *(_QWORD *)&v111[0] = (8 * (v87 & 7)) | 0x100080401;
    }
    *(_QWORD *)&v111[1] = (gleFStateProgram_GetTemp(a2, 0xAu) << 48) | 0x50;
LABEL_172:
    *((_QWORD *)&v111[0] + 1) = (gleFStateProgram_GetTemp(a2, 0xAu) << 48) | 0x72679000;
    (*(void (**)(uint64_t, _OWORD *))(a2 + 256))(a2, v111);
    goto LABEL_173;
  }
  *(_BYTE *)(a2 + 248) = (*(_QWORD *)v3 & 0x40) == 0;
  if ((v59 & 0x40) == 0)
    *(_BYTE *)(a2 + 250) = 0;
  gleStateProgram_CheckDestInit(a2);
  memset((char *)v111 + 8, 0, 72);
  v60 = 1572864;
  if (!*(_BYTE *)(a2 + 251))
    v60 = 0x80000;
  v61 = v60 & 0xFFFFFFFFFFFFFFC7 | (8 * (*(_DWORD *)(a2 + 16) & 7));
  *(_QWORD *)&v111[0] = v61 | 0x31000007C2;
  *(_DWORD *)(a2 + 16) = 2;
  if ((*(_BYTE *)v3 & 0x10) != 0)
    *(_QWORD *)&v111[0] = v61 | 0x831000007C2;
  if (*(_BYTE *)(a2 + 249))
  {
    v62 = (unsigned __int16)gleFStateProgram_GetTemp(a2, 0);
    v63 = 1689664;
  }
  else
  {
    LODWORD(v62) = *(unsigned __int16 *)(a2 + 24);
    if ((_DWORD)v62 == 0xFFFF)
    {
      v64 = *(__int16 *)(a2 + 240);
      LODWORD(v62) = *(unsigned __int16 *)(a2 + 240);
      *(_WORD *)(a2 + 24) = v64;
      *(_WORD *)(a2 + 4 * v64 + 22) = 1;
      *(_WORD *)(a2 + 240) = v64 + 1;
    }
    v62 = v62;
    v63 = 1689600;
  }
  *(_QWORD *)&v111[1] = v63 | (v62 << 48);
  v65 = *(unsigned __int16 *)(a2 + 28);
  if ((_DWORD)v65 == 0xFFFF)
  {
    v66 = *(__int16 *)(a2 + 240);
    v65 = *(unsigned __int16 *)(a2 + 240);
    *(_WORD *)(a2 + 28) = v66;
    *(_WORD *)(a2 + 4 * v66 + 22) = 2;
    *(_WORD *)(a2 + 240) = v66 + 1;
  }
  *((_QWORD *)&v111[1] + 1) = (v65 << 48) | 0x19C800;
  if (*(_BYTE *)(a2 + 248))
  {
    v67 = gleFStateProgram_GetOutput(a2, 0);
    v68 = 1918906368;
  }
  else
  {
    v67 = gleFStateProgram_GetTemp(a2, 0);
    v68 = 1918898176;
  }
  *((_QWORD *)&v111[0] + 1) = v68 | (v67 << 48) | 0x70000;
  result = (*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 256))(a2, v111);
  *(_WORD *)(a2 + 249) = 257;
  if ((*(_QWORD *)v3 & 0x40) != 0)
    goto LABEL_136;
  return result;
}

uint64_t gleFStateProgram_GenerateMetadata(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6)
{
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  uint64_t v13;
  __int16 *v14;
  const char *v15;
  int v16;
  int v17;
  const char *v18;
  const char *v19;
  int v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  size_t v26;
  uint64_t v27;
  __int16 *v28;
  uint64_t *v29;
  unsigned int v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  char __str[32];
  uint64_t v46;

  v37 = a5;
  v38 = a1;
  v40 = a3;
  v46 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(a2 + 8);
  v35 = a6;
  v34 = (a4 + 2 * a6 + 1);
  v9 = 8 * v34;
  MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v34 - v10;
  if ((unint64_t)(8 * v34) >= 0x200)
    v12 = 512;
  else
    v12 = 8 * v34;
  bzero(v11, v12);
  bzero(v11, v9);
  v36 = a4;
  if (a4 >= 1)
  {
    v13 = 0;
    v39 = v36;
    v14 = (__int16 *)(a2 + 22);
    do
    {
      v15 = gleLLVMGetArgTypeName(*(_DWORD *)(v40 + 4 * v13));
      v17 = *v14;
      v14 += 2;
      v16 = v17;
      v18 = "air.perspective";
      switch(v17)
      {
        case 0:
          goto LABEL_29;
        case 1:
        case 2:
        case 14:
        case 15:
          v19 = "air.no_perspective";
          if ((*v38 & 1) == 0)
            v19 = "air.perspective";
          if ((*v38 & 0x2000000) != 0)
            v18 = "air.flat";
          else
            v18 = v19;
          goto LABEL_12;
        case 12:
          if ((*(_BYTE *)(a2 + 280) & 8) == 0)
            goto LABEL_26;
          goto LABEL_27;
        case 13:
          if ((*(_BYTE *)(a2 + 280) & 8) != 0)
          {
LABEL_27:
            v41 = 0u;
            v42 = 0u;
            *(_QWORD *)&v41 = gleLLVMGetConstantInt32(v8);
            *((_QWORD *)&v41 + 1) = LLVMMDStringInContext();
            *(_QWORD *)&v42 = LLVMMDStringInContext();
            strlen(v15);
            *((_QWORD *)&v42 + 1) = LLVMMDStringInContext();
          }
          else
          {
LABEL_26:
            v41 = 0uLL;
            *(_QWORD *)&v41 = gleLLVMGetConstantInt32(v8);
            *((_QWORD *)&v41 + 1) = LLVMMDStringInContext();
          }
          break;
        default:
LABEL_12:
          memset(__str, 0, sizeof(__str));
          v20 = 5;
          switch(v16)
          {
            case 1:
              if ((*(_BYTE *)(a2 + 280) & 8) != 0)
                strcpy(__str, "user(front_color)");
              v20 = 2;
              break;
            case 2:
              if ((*(_BYTE *)(a2 + 280) & 8) != 0)
                strcpy(__str, "user(sec_front_color)");
              v20 = 3;
              break;
            case 3:
              break;
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
              if ((*(_BYTE *)(a2 + 280) & 8) != 0)
                snprintf(__str, 0x1FuLL, "user(tex_coord%u)", v16 - 4);
              v20 = v16 + 4;
              break;
            case 14:
              if ((*(_BYTE *)(a2 + 280) & 8) != 0)
                strcpy(__str, "user(back_color)");
              v20 = 1;
              break;
            case 15:
              if ((*(_BYTE *)(a2 + 280) & 8) != 0)
                strcpy(__str, "user(sec_back_color)");
              v20 = 4;
              break;
            default:
              abort();
          }
          if ((*(_BYTE *)(a2 + 280) & 8) != 0)
          {
            if (!__str[0])
              snprintf(__str, 0x1FuLL, "user(slot%u)", v20);
            v44 = 0;
            v42 = 0u;
            v43 = 0u;
            v41 = 0u;
            *(_QWORD *)&v41 = gleLLVMGetConstantInt32(v8);
            *((_QWORD *)&v41 + 1) = LLVMMDStringInContext();
            strlen(__str);
            *(_QWORD *)&v42 = LLVMMDStringInContext();
            strlen(v18);
            *((_QWORD *)&v42 + 1) = LLVMMDStringInContext();
            *(_QWORD *)&v43 = LLVMMDStringInContext();
            *((_QWORD *)&v43 + 1) = LLVMMDStringInContext();
            strlen(v15);
            v44 = LLVMMDStringInContext();
          }
          else
          {
            v42 = 0u;
            v43 = 0u;
            v41 = 0u;
            *(_QWORD *)&v41 = gleLLVMGetConstantInt32(v8);
            *((_QWORD *)&v41 + 1) = LLVMMDStringInContext();
            *(_QWORD *)&v42 = LLVMMDStringInContext();
            if (!*(_QWORD *)(v8 + 152))
              *(_QWORD *)(v8 + 152) = LLVMInt32TypeInContext();
            *((_QWORD *)&v42 + 1) = LLVMConstInt();
            strlen(v18);
            *(_QWORD *)&v43 = LLVMMDStringInContext();
            *((_QWORD *)&v43 + 1) = LLVMMDStringInContext();
          }
          break;
      }
      *(_QWORD *)&v11[8 * v13] = LLVMMDNodeInContext();
LABEL_29:
      ++v13;
    }
    while (v39 != v13);
  }
  gleLLVMAddCommonMetaData(v8, (uint64_t *)&v11[8 * v36], v34 - v36, v36, *(__int16 *)(a2 + 242), v35);
  v21 = LLVMMDNodeInContext();
  v22 = v37;
  MEMORY[0x24BDAC7A8](v21);
  v25 = (uint64_t *)((char *)&v34 - v24);
  if (v23 >= 0x200)
    v26 = 512;
  else
    v26 = v23;
  bzero((char *)&v34 - v24, v26);
  if (v22 >= 1)
  {
    v27 = v37;
    v28 = (__int16 *)(a2 + 174);
    v29 = v25;
    do
    {
      v30 = *v28;
      v28 += 2;
      v31 = v30 == 8;
      if (v30 >= 8)
      {
        if (!v31)
          goto LABEL_55;
        *(_QWORD *)&v42 = 0;
        v41 = 0uLL;
        *(_QWORD *)&v41 = LLVMMDStringInContext();
        *((_QWORD *)&v41 + 1) = LLVMMDStringInContext();
        v32 = LLVMMDStringInContext();
      }
      else
      {
        *(_QWORD *)&v42 = 0;
        v41 = 0uLL;
        *(_QWORD *)&v41 = LLVMMDStringInContext();
        if (!*(_QWORD *)(v8 + 152))
          *(_QWORD *)(v8 + 152) = LLVMInt32TypeInContext();
        *((_QWORD *)&v41 + 1) = LLVMConstInt();
        if (!*(_QWORD *)(v8 + 152))
          *(_QWORD *)(v8 + 152) = LLVMInt32TypeInContext();
        v32 = LLVMConstInt();
      }
      *(_QWORD *)&v42 = v32;
      *v29 = LLVMMDNodeInContext();
LABEL_55:
      ++v29;
      --v27;
    }
    while (v27);
  }
  LLVMMDNodeInContext();
  return gleLLVMCreateFunctionMetadata(v8, "air.fragment");
}

uint64_t gleFStateProgram_GetFirstActiveTexture(unsigned int a1, uint64_t a2)
{
  unsigned int v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v11;
  unsigned int v12;
  BOOL v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  if (!a1)
    return 0xFFFFFFFFLL;
  v2 = a1 & 0xFFFFFF7F;
  if ((a1 & 0xFFFFFF7F) != 0)
  {
    v3 = 128;
    v4 = 8;
    while (1)
    {
      v5 = a1;
      a1 = v2;
      if ((v3 & v5) != 0)
      {
        v6 = *(_QWORD *)(a2 + 8 * v4);
        v7 = (v6 >> 28) & 7;
        if (v7 == 5)
        {
          v11 = v6 & 0x1F;
          v12 = (v6 >> 5) & 0x1F;
          v13 = v11 == 3 || v12 == 3;
          v14 = (v6 >> 10) & 0x1F;
          v15 = v13 || v14 == 3;
          v16 = HIDWORD(v6) & 0x1F;
          v17 = v15 || (_DWORD)v16 == 3;
          v18 = (v6 >> 37) & 0x1F;
          v19 = v17 || (_DWORD)v18 == 3;
          v20 = (v6 >> 42) & 0x1F;
          if (!v19
            && v20 <= 5
            && v18 <= 5
            && v16 <= 5
            && v14 <= 5
            && v12 <= 5
            && v11 <= 5
            && (_DWORD)v20 != 3)
          {
            return (v4 - 1);
          }
        }
        else if (v7 == 3)
        {
          v8 = v6 & 0x3000000000000000;
          v9 = v6 & 0x3800000000000000;
          if (v8 == 0x1000000000000000 || v9 == 0x2800000000000000)
            return (v4 - 1);
        }
      }
      v3 = 1 << (v4 - 2);
      v2 = a1 & ~v3;
      --v4;
      if (!v2)
        return (v4 - 1);
    }
  }
  return 7;
}

uint64_t gleFStateProgram_AllocateOutput(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(__int16 *)(result + 244);
  *(_WORD *)(result + 172 + 4 * a2) = v2;
  *(_WORD *)(result + 172 + 4 * v2 + 2) = a2;
  *(_WORD *)(result + 244) = v2 + 1;
  if (*(_QWORD *)(result + 8))
  {
    v3 = result;
    if (a2 == 8 || !*(_BYTE *)(result + 251))
      result = LLVMFloatTypeInContext();
    else
      result = LLVMHalfTypeInContext();
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 128) + 8 * v2) = result;
  }
  return result;
}

uint64_t gleFStateProgram_GetOutput(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  _WORD *v3;
  __int16 v4;
  int v5;
  uint64_t v7;
  uint64_t v8;

  v2 = a1 + 4 * a2;
  v5 = *(unsigned __int16 *)(v2 + 172);
  v3 = (_WORD *)(v2 + 172);
  v4 = v5;
  if (v5 == 0xFFFF)
  {
    v7 = *(__int16 *)(a1 + 244);
    v4 = *(_WORD *)(a1 + 244);
    *v3 = v7;
    *(_WORD *)(a1 + 4 * v7 + 174) = a2;
    *(_WORD *)(a1 + 244) = v7 + 1;
    if (*(_QWORD *)(a1 + 8))
    {
      if (a2 == 8 || !*(_BYTE *)(a1 + 251))
        v8 = LLVMFloatTypeInContext();
      else
        v8 = LLVMHalfTypeInContext();
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 128) + 8 * v7) = v8;
    }
  }
  return v4;
}

uint64_t gleFStateProgram_GetTemp(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  _WORD *v3;
  __int16 v4;
  int v5;
  uint64_t v7;
  uint64_t v8;

  v2 = a1 + 2 * a2;
  v5 = *(unsigned __int16 *)(v2 + 208);
  v3 = (_WORD *)(v2 + 208);
  v4 = v5;
  if (v5 == 0xFFFF)
  {
    v7 = *(__int16 *)(a1 + 246);
    v4 = *(_WORD *)(a1 + 246);
    *v3 = v7;
    *(_WORD *)(a1 + 246) = v7 + 1;
    if (*(_QWORD *)(a1 + 8))
    {
      if (a2 - 13 <= 0xFFFFFFFC && *(_BYTE *)(a1 + 251))
        v8 = LLVMHalfTypeInContext();
      else
        v8 = LLVMFloatTypeInContext();
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 96) + 8 * v7) = v8;
    }
  }
  return v4;
}

uint64_t gleStateProgram_TextureSampleOp(uint64_t *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _WORD *v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  v6 = a1[a4 + 1];
  v7 = a4;
  v8 = 0;
  switch(HIBYTE(v6) & 7)
  {
    case 1:
      goto LABEL_13;
    case 2:
      v8 = 1;
      goto LABEL_13;
    case 3:
      v10 = (v6 & 0x4000000000000000) == 0;
      v11 = 5;
      v12 = 2;
      goto LABEL_10;
    case 4:
      v10 = (v6 & 0x4000000000000000) == 0;
      v11 = 6;
      v12 = 3;
      goto LABEL_10;
    case 5:
      v10 = (v6 & 0x4000000000000000) == 0;
      v11 = 7;
      v12 = 4;
LABEL_10:
      if (v10)
        v8 = v12;
      else
        v8 = v11;
LABEL_13:
      v13 = 0x3100000002;
      v14 = *a1;
      v15 = 4288;
      if ((int)v6 < 0)
        v15 = 4224;
      v16 = (int)v6 < 0;
      v17 = 4352;
      v18 = 4416;
      if (v16)
        v18 = 4352;
      if ((v14 & 0x10000000000) != 0)
        v19 = 3;
      else
        v19 = 2;
      if ((v14 & 0x10000000000) != 0)
        v13 = 0x3100000003;
      else
        v17 = 4224;
      if ((v14 & 0x10000000000) != 0)
        v20 = v18;
      else
        v20 = v15;
      if (((1 << a4) & BYTE4(v14)) == 0)
        v17 = v20;
      v35 = 0;
      v34 = 0u;
      v33 = 0u;
      v32 = 0u;
      v31 = 0u;
      v21 = v13 | (8 * (*(_DWORD *)(a2 + 16) & 7)) | v17;
      *(_DWORD *)(a2 + 16) = v19;
      v22 = v21;
      v30 = v21 | 0x88000;
      v23 = *a1;
      if ((*a1 & 0x10) != 0)
      {
        v22 = v21;
        v30 = v21 | 0x80000088000;
      }
      v24 = a2 + 4 * (a4 + 4);
      v27 = *(unsigned __int16 *)(v24 + 20);
      v26 = (_WORD *)(v24 + 20);
      v25 = v27;
      if (v27 == 0xFFFF)
      {
        v28 = *(__int16 *)(a2 + 240);
        v25 = *(unsigned __int16 *)(a2 + 240);
        *v26 = v28;
        *(_WORD *)(a2 + 4 * v28 + 22) = a4 + 4;
        *(_WORD *)(a2 + 240) = v28 + 1;
        v23 = *a1;
      }
      *((_QWORD *)&v31 + 1) = (v25 << 48) | 0x19C800;
      if ((v23 & 0x10000000000) != 0)
        *(_QWORD *)&v32 = (gleFStateProgram_GetParam(a2, a4 + 8) << 48) | 0x19C880;
      *(&v30 + (v22 & 7) + 1) = *(&v30 + (v22 & 7) + 1) & 0xFFFFFF80FFFFFFE0 | ((unint64_t)(v7 & 0x7F) << 32) | v8;
      break;
    default:
      v35 = 0;
      v34 = 0u;
      v33 = 0u;
      v32 = 0u;
      if (*(_BYTE *)(a2 + 251))
        v9 = 0x3100180000;
      else
        v9 = 0x3100080000;
      v30 = v9 & 0xFFFFFFFFFFFFFFC7 | (8 * (*(_DWORD *)(a2 + 16) & 7)) | 1;
      *(_DWORD *)(a2 + 16) = 1;
      *((_QWORD *)&v31 + 1) = (gleFStateProgram_GetParam(a2, 20) << 48) | 0x19C880;
      break;
  }
  *(_QWORD *)&v31 = a3;
  return (*(uint64_t (**)(uint64_t, unint64_t *))(a2 + 256))(a2, &v30);
}

uint64_t gleFStateProgram_GetParam(uint64_t a1, int a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  _WORD *v10;
  int v11;
  uint64_t v12;
  __int128 v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 251))
    v4 = 3;
  else
    v4 = 1;
  switch(a2)
  {
    case 21:
      v6 = *(_QWORD *)(a1 + 8);
      if (!*(_QWORD *)(*(_QWORD *)(v6 + 104) + 16))
      {
        v14 = xmmword_22D807780;
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 104) + 16) = gleLLVMCreateConstantVec4(v6, (uint64_t)&v14, 1);
      }
      break;
    case 20:
      v7 = *(_QWORD *)(a1 + 8);
      if (!*(_QWORD *)(*(_QWORD *)(v7 + 104) + 8))
      {
        v14 = 0uLL;
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 104) + 8) = gleLLVMCreateConstantVec4(v7, (uint64_t)&v14, v4);
      }
      break;
    case 19:
      v5 = *(_QWORD *)(a1 + 8);
      if (!**(_QWORD **)(v5 + 104))
      {
        v14 = xmmword_22D807780;
        **(_QWORD **)(*(_QWORD *)(a1 + 8) + 104) = gleLLVMCreateConstantVec4(v5, (uint64_t)&v14, v4);
      }
      break;
  }
  v8 = a1 + 4 * a2;
  v11 = *(unsigned __int16 *)(v8 + 84);
  v10 = (_WORD *)(v8 + 84);
  v9 = v11;
  if (v11 == 0xFFFF)
  {
    v12 = *(__int16 *)(a1 + 242);
    v9 = *(_WORD *)(a1 + 242);
    *v10 = v12;
    *(_WORD *)(a1 + 4 * v12 + 86) = a2;
    *(_WORD *)(a1 + 242) = v12 + 1;
  }
  return v9;
}

uint64_t gleStateProgram_A_MODULATE(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t Temp;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t Output;
  _QWORD v10[2];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  gleStateProgram_CheckDestInit(a2);
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  if (*(_BYTE *)(a2 + 251))
    v3 = 0x3100180000;
  else
    v3 = 0x3100080000;
  v10[0] = v3 & 0xFFFFFFFFFFFFFFC7 | (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x882;
  *(_DWORD *)(a2 + 16) = 2;
  if (*(_BYTE *)(a2 + 249))
  {
    Temp = (unsigned __int16)gleFStateProgram_GetTemp(a2, 0);
    v5 = 1689664;
  }
  else
  {
    LODWORD(Temp) = *(unsigned __int16 *)(a2 + 24);
    if ((_DWORD)Temp == 0xFFFF)
    {
      v6 = *(__int16 *)(a2 + 240);
      LODWORD(Temp) = *(unsigned __int16 *)(a2 + 240);
      *(_WORD *)(a2 + 24) = v6;
      *(_WORD *)(a2 + 4 * v6 + 22) = 1;
      *(_WORD *)(a2 + 240) = v6 + 1;
    }
    Temp = Temp;
    v5 = 1689600;
  }
  v7 = 1918898176;
  *(_QWORD *)&v11 = v5 | (Temp << 48);
  *((_QWORD *)&v11 + 1) = (gleFStateProgram_GetTemp(a2, 1u) << 48) | 0x19C840;
  if (*(_BYTE *)(a2 + 248))
  {
    Output = gleFStateProgram_GetOutput(a2, 0);
    v7 = 1918906368;
  }
  else
  {
    Output = gleFStateProgram_GetTemp(a2, 0);
  }
  v10[1] = v7 | (Output << 48) | 0x8000;
  return (*(uint64_t (**)(uint64_t, _QWORD *))(a2 + 256))(a2, v10);
}

uint64_t gleStateProgram_A_REPLACE(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t Output;
  _QWORD v7[3];
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v3 = 1918898176;
  gleStateProgram_CheckDestInit(a2);
  v11 = 0;
  v10 = 0u;
  v9 = 0u;
  v8 = 0u;
  if (*(_BYTE *)(a2 + 251))
    v4 = 0x3100180000;
  else
    v4 = 0x3100080000;
  v7[0] = v4 & 0xFFFFFFFFFFFFFFC7 | (8 * (*(_DWORD *)(a2 + 16) & 7)) | 1;
  *(_DWORD *)(a2 + 16) = 1;
  v7[2] = (gleFStateProgram_GetTemp(a2, 1u) << 48) | 0x19C840;
  if (*(_BYTE *)(a2 + 248))
  {
    Output = gleFStateProgram_GetOutput(a2, 0);
    v3 = 1918906368;
  }
  else
  {
    Output = gleFStateProgram_GetTemp(a2, 0);
  }
  v7[1] = v3 | (Output << 48) | 0x8000;
  return (*(uint64_t (**)(uint64_t, _QWORD *))(a2 + 256))(a2, v7);
}

uint64_t gleStateProgram_CheckDestInit(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t Temp;
  uint64_t v5;
  uint64_t v6;
  uint64_t Output;
  _QWORD v8[2];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  if (!*(_BYTE *)(result + 250))
  {
    v1 = result;
    v2 = 1689600;
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    if (*(_BYTE *)(result + 251))
      v3 = 0x3100180000;
    else
      v3 = 0x3100080000;
    v8[0] = v3 & 0xFFFFFFFFFFFFFFC7 | (8 * (*(_DWORD *)(result + 16) & 7)) | 1;
    *(_DWORD *)(result + 16) = 1;
    if (*(_BYTE *)(result + 249))
    {
      Temp = (unsigned __int16)gleFStateProgram_GetTemp(result, 0);
      v2 = 1689664;
    }
    else
    {
      LODWORD(Temp) = *(unsigned __int16 *)(result + 24);
      if ((_DWORD)Temp == 0xFFFF)
      {
        v5 = *(__int16 *)(result + 240);
        LODWORD(Temp) = *(unsigned __int16 *)(result + 240);
        *(_WORD *)(result + 24) = v5;
        *(_WORD *)(result + 4 * v5 + 22) = 1;
        *(_WORD *)(result + 240) = v5 + 1;
      }
      Temp = Temp;
    }
    v6 = 1919389696;
    *(_QWORD *)&v9 = v2 | (Temp << 48);
    if (*(_BYTE *)(v1 + 248))
    {
      Output = gleFStateProgram_GetOutput(v1, 0);
      v6 = 1919397888;
    }
    else
    {
      Output = gleFStateProgram_GetTemp(v1, 0);
    }
    v8[1] = v6 | (Output << 48);
    return (*(uint64_t (**)(uint64_t, _QWORD *))(v1 + 256))(v1, v8);
  }
  return result;
}

uint64_t gleStateProgram_RGB_MODULATE(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t Temp;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t Output;
  _QWORD v10[2];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  gleStateProgram_CheckDestInit(a2);
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  if (*(_BYTE *)(a2 + 251))
    v3 = 0x3100180000;
  else
    v3 = 0x3100080000;
  v10[0] = v3 & 0xFFFFFFFFFFFFFFC7 | (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x882;
  *(_DWORD *)(a2 + 16) = 2;
  if (*(_BYTE *)(a2 + 249))
  {
    Temp = (unsigned __int16)gleFStateProgram_GetTemp(a2, 0);
    v5 = 1689664;
  }
  else
  {
    LODWORD(Temp) = *(unsigned __int16 *)(a2 + 24);
    if ((_DWORD)Temp == 0xFFFF)
    {
      v6 = *(__int16 *)(a2 + 240);
      LODWORD(Temp) = *(unsigned __int16 *)(a2 + 240);
      *(_WORD *)(a2 + 24) = v6;
      *(_WORD *)(a2 + 4 * v6 + 22) = 1;
      *(_WORD *)(a2 + 240) = v6 + 1;
    }
    Temp = Temp;
    v5 = 1689600;
  }
  v7 = 1918898176;
  *(_QWORD *)&v11 = v5 | (Temp << 48);
  *((_QWORD *)&v11 + 1) = (gleFStateProgram_GetTemp(a2, 1u) << 48) | 0x19C840;
  if (*(_BYTE *)(a2 + 248))
  {
    Output = gleFStateProgram_GetOutput(a2, 0);
    v7 = 1918906368;
  }
  else
  {
    Output = gleFStateProgram_GetTemp(a2, 0);
  }
  v10[1] = v7 | (Output << 48) | 0x70000;
  return (*(uint64_t (**)(uint64_t, _QWORD *))(a2 + 256))(a2, v10);
}

uint64_t gleStateProgram_RGB_BLEND(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  int64x2_t v7;
  uint64_t Temp;
  uint64_t v9;
  uint64_t v10;
  uint64_t Output;
  _QWORD v13[2];
  int8x16_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v5 = 1689600;
  gleStateProgram_CheckDestInit(a2);
  v16 = 0u;
  v17 = 0u;
  v15 = 0u;
  if (*(_BYTE *)(a2 + 251))
    v6 = 0x3100180000;
  else
    v6 = 0x3100080000;
  v13[0] = v6 & 0xFFFFFFFFFFFFFFC7 | (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0xF03;
  *(_DWORD *)(a2 + 16) = 3;
  v7.i64[0] = gleFStateProgram_GetTemp(a2, 1u);
  v7.i64[1] = gleFStateProgram_GetParam(a2, a3);
  v14 = vorrq_s8((int8x16_t)vshlq_n_s64(v7, 0x30uLL), (int8x16_t)xmmword_22D807760);
  if (*(_BYTE *)(a2 + 249))
  {
    Temp = (unsigned __int16)gleFStateProgram_GetTemp(a2, 0);
    v5 = 1689664;
  }
  else
  {
    LODWORD(Temp) = *(unsigned __int16 *)(a2 + 24);
    if ((_DWORD)Temp == 0xFFFF)
    {
      v9 = *(__int16 *)(a2 + 240);
      LODWORD(Temp) = *(unsigned __int16 *)(a2 + 240);
      *(_WORD *)(a2 + 24) = v9;
      *(_WORD *)(a2 + 4 * v9 + 22) = 1;
      *(_WORD *)(a2 + 240) = v9 + 1;
    }
    Temp = Temp;
  }
  v10 = 1918898176;
  *(_QWORD *)&v15 = v5 | (Temp << 48);
  if (*(_BYTE *)(a2 + 248))
  {
    Output = gleFStateProgram_GetOutput(a2, 0);
    v10 = 1918906368;
  }
  else
  {
    Output = gleFStateProgram_GetTemp(a2, 0);
  }
  v13[1] = v10 | (Output << 48) | 0x70000;
  return (*(uint64_t (**)(uint64_t, _QWORD *))(a2 + 256))(a2, v13);
}

uint64_t gleStateProgram_RGB_REPLACE(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t Output;
  _QWORD v7[3];
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v3 = 1918898176;
  gleStateProgram_CheckDestInit(a2);
  v11 = 0;
  v10 = 0u;
  v9 = 0u;
  v8 = 0u;
  if (*(_BYTE *)(a2 + 251))
    v4 = 0x3100180000;
  else
    v4 = 0x3100080000;
  v7[0] = v4 & 0xFFFFFFFFFFFFFFC7 | (8 * (*(_DWORD *)(a2 + 16) & 7)) | 1;
  *(_DWORD *)(a2 + 16) = 1;
  v7[2] = (gleFStateProgram_GetTemp(a2, 1u) << 48) | 0x19C840;
  if (*(_BYTE *)(a2 + 248))
  {
    Output = gleFStateProgram_GetOutput(a2, 0);
    v3 = 1918906368;
  }
  else
  {
    Output = gleFStateProgram_GetTemp(a2, 0);
  }
  v7[1] = v3 | (Output << 48) | 0x70000;
  return (*(uint64_t (**)(uint64_t, _QWORD *))(a2 + 256))(a2, v7);
}

uint64_t gleStateProgram_RGB_ADD(_BYTE *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t Temp;
  uint64_t v8;
  uint64_t v9;
  uint64_t Output;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  gleStateProgram_CheckDestInit(a2);
  v17 = 0;
  v16 = 0u;
  v15 = 0u;
  v14 = 0u;
  v13 = 0u;
  v4 = 1572864;
  if (!*(_BYTE *)(a2 + 251))
    v4 = 0x80000;
  v5 = v4 & 0xFFFFFFFFFFFFFFC7 | (8 * (*(_DWORD *)(a2 + 16) & 7));
  v12 = v5 | 0x31000007C2;
  *(_DWORD *)(a2 + 16) = 2;
  if ((*a1 & 0x10) != 0)
    v12 = v5 | 0x831000007C2;
  v6 = 1689664;
  *((_QWORD *)&v13 + 1) = (gleFStateProgram_GetTemp(a2, 1u) << 48) | 0x19C840;
  if (*(_BYTE *)(a2 + 249))
  {
    Temp = (unsigned __int16)gleFStateProgram_GetTemp(a2, 0);
  }
  else
  {
    LODWORD(Temp) = *(unsigned __int16 *)(a2 + 24);
    if ((_DWORD)Temp == 0xFFFF)
    {
      v8 = *(__int16 *)(a2 + 240);
      LODWORD(Temp) = *(unsigned __int16 *)(a2 + 240);
      *(_WORD *)(a2 + 24) = v8;
      *(_WORD *)(a2 + 4 * v8 + 22) = 1;
      *(_WORD *)(a2 + 240) = v8 + 1;
    }
    Temp = Temp;
    v6 = 1689600;
  }
  v9 = 1918898176;
  *(_QWORD *)&v14 = v6 | (Temp << 48);
  if (*(_BYTE *)(a2 + 248))
  {
    Output = gleFStateProgram_GetOutput(a2, 0);
    v9 = 1918906368;
  }
  else
  {
    Output = gleFStateProgram_GetTemp(a2, 0);
  }
  *(_QWORD *)&v13 = v9 | (Output << 48) | 0x70000;
  return (*(uint64_t (**)(uint64_t, uint64_t *))(a2 + 256))(a2, &v12);
}

uint64_t gleStateProgram_RGBA_MODULATE(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t Temp;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t Output;
  _QWORD v10[2];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  if (*(_BYTE *)(a2 + 251))
    v3 = 0x3100180000;
  else
    v3 = 0x3100080000;
  v10[0] = v3 & 0xFFFFFFFFFFFFFFC7 | (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x882;
  *(_DWORD *)(a2 + 16) = 2;
  if (*(_BYTE *)(a2 + 249))
  {
    Temp = (unsigned __int16)gleFStateProgram_GetTemp(a2, 0);
    v5 = 1689664;
  }
  else
  {
    LODWORD(Temp) = *(unsigned __int16 *)(a2 + 24);
    if ((_DWORD)Temp == 0xFFFF)
    {
      v6 = *(__int16 *)(a2 + 240);
      LODWORD(Temp) = *(unsigned __int16 *)(a2 + 240);
      *(_WORD *)(a2 + 24) = v6;
      *(_WORD *)(a2 + 4 * v6 + 22) = 1;
      *(_WORD *)(a2 + 240) = v6 + 1;
    }
    Temp = Temp;
    v5 = 1689600;
  }
  v7 = 1919389696;
  *(_QWORD *)&v11 = v5 | (Temp << 48);
  *((_QWORD *)&v11 + 1) = (gleFStateProgram_GetTemp(a2, 1u) << 48) | 0x19C840;
  if (*(_BYTE *)(a2 + 248))
  {
    Output = gleFStateProgram_GetOutput(a2, 0);
    v7 = 1919397888;
  }
  else
  {
    Output = gleFStateProgram_GetTemp(a2, 0);
  }
  v10[1] = v7 | (Output << 48);
  return (*(uint64_t (**)(uint64_t, _QWORD *))(a2 + 256))(a2, v10);
}

uint64_t gleStateProgram_RGBA_BLEND(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t Output;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t Temp;
  uint64_t v15;
  uint64_t v16;
  unint64_t v18;
  __int128 v19;
  _BYTE v20[56];

  memset(&v20[8], 0, 48);
  if (*(_BYTE *)(a2 + 251))
    v5 = 0x3100180000;
  else
    v5 = 0x3100080000;
  v18 = v5 & 0xFFFFFFFFFFFFFFC7 | (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x882;
  *(_DWORD *)(a2 + 16) = 2;
  if (*(_BYTE *)(a2 + 249))
  {
    v6 = (gleFStateProgram_GetTemp(a2, 0) << 48) | 0x40;
  }
  else
  {
    v7 = *(unsigned __int16 *)(a2 + 24);
    if ((_DWORD)v7 == 0xFFFF)
    {
      v8 = *(__int16 *)(a2 + 240);
      v7 = *(unsigned __int16 *)(a2 + 240);
      *(_WORD *)(a2 + 24) = v8;
      *(_WORD *)(a2 + 4 * v8 + 22) = 1;
      *(_WORD *)(a2 + 240) = v8 + 1;
    }
    v6 = v7 << 48;
  }
  v9 = 1918898176;
  *((_QWORD *)&v19 + 1) = v6 | 0x1FE00;
  *(_QWORD *)v20 = (gleFStateProgram_GetTemp(a2, 1u) << 48) | 0x1FE40;
  if (*(_BYTE *)(a2 + 248))
  {
    Output = gleFStateProgram_GetOutput(a2, 0);
    v11 = 1918906368;
  }
  else
  {
    Output = gleFStateProgram_GetTemp(a2, 0);
    v11 = 1918898176;
  }
  v12 = 1689664;
  *(_QWORD *)&v19 = v11 | (Output << 48) | 0x8000;
  (*(void (**)(uint64_t, unint64_t *))(a2 + 256))(a2, &v18);
  memset(v20, 0, sizeof(v20));
  v19 = 0u;
  if (*(_BYTE *)(a2 + 251))
    v13 = 0x3100180000;
  else
    v13 = 0x3100080000;
  v18 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0xF03 | v13;
  *(_DWORD *)(a2 + 16) = 3;
  *((_QWORD *)&v19 + 1) = (gleFStateProgram_GetTemp(a2, 1u) << 48) | 0x19C840;
  *(_QWORD *)v20 = ((gleFStateProgram_GetParam(a2, a3) << 48) | 0x19C840) + 64;
  if (*(_BYTE *)(a2 + 249))
  {
    Temp = (unsigned __int16)gleFStateProgram_GetTemp(a2, 0);
  }
  else
  {
    LODWORD(Temp) = *(unsigned __int16 *)(a2 + 24);
    if ((_DWORD)Temp == 0xFFFF)
    {
      v15 = *(__int16 *)(a2 + 240);
      LODWORD(Temp) = *(unsigned __int16 *)(a2 + 240);
      *(_WORD *)(a2 + 24) = v15;
      *(_WORD *)(a2 + 4 * v15 + 22) = 1;
      *(_WORD *)(a2 + 240) = v15 + 1;
    }
    Temp = Temp;
    v12 = 1689600;
  }
  *(_QWORD *)&v20[8] = v12 | (Temp << 48);
  if (*(_BYTE *)(a2 + 248))
  {
    v16 = gleFStateProgram_GetOutput(a2, 0);
    v9 = 1918906368;
  }
  else
  {
    v16 = gleFStateProgram_GetTemp(a2, 0);
  }
  *(_QWORD *)&v19 = v9 | (v16 << 48) | 0x70000;
  return (*(uint64_t (**)(uint64_t, unint64_t *))(a2 + 256))(a2, &v18);
}

uint64_t gleStateProgram_RGBA_ADD(_BYTE *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t Temp;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t Output;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v22 = 0;
  v21 = 0u;
  v20 = 0u;
  v19 = 0u;
  v18 = 0u;
  v3 = 1572864;
  if (!*(_BYTE *)(a2 + 251))
    v3 = 0x80000;
  v4 = v3 & 0xFFFFFFFFFFFFFFC7 | (8 * (*(_DWORD *)(a2 + 16) & 7));
  v17 = v4 | 0x31000007C2;
  *(_DWORD *)(a2 + 16) = 2;
  if ((*a1 & 0x10) != 0)
    v17 = v4 | 0x831000007C2;
  *((_QWORD *)&v18 + 1) = (gleFStateProgram_GetTemp(a2, 1u) << 48) | 0x19C840;
  if (*(_BYTE *)(a2 + 249))
  {
    Temp = (unsigned __int16)gleFStateProgram_GetTemp(a2, 0);
    v6 = 1689664;
  }
  else
  {
    LODWORD(Temp) = *(unsigned __int16 *)(a2 + 24);
    if ((_DWORD)Temp == 0xFFFF)
    {
      v7 = *(__int16 *)(a2 + 240);
      LODWORD(Temp) = *(unsigned __int16 *)(a2 + 240);
      *(_WORD *)(a2 + 24) = v7;
      *(_WORD *)(a2 + 4 * v7 + 22) = 1;
      *(_WORD *)(a2 + 240) = v7 + 1;
    }
    Temp = Temp;
    v6 = 1689600;
  }
  v8 = 1918898176;
  *(_QWORD *)&v19 = v6 | (Temp << 48);
  if (*(_BYTE *)(a2 + 248))
  {
    Output = gleFStateProgram_GetOutput(a2, 0);
    v10 = 1918906368;
  }
  else
  {
    Output = gleFStateProgram_GetTemp(a2, 0);
    v10 = 1918898176;
  }
  *(_QWORD *)&v18 = v10 | (Output << 48) | 0x70000;
  (*(void (**)(uint64_t, unint64_t *))(a2 + 256))(a2, &v17);
  v22 = 0;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  if (*(_BYTE *)(a2 + 251))
    v11 = 0x3100180000;
  else
    v11 = 0x3100080000;
  v17 = v11 & 0xFFFFFFFFFFFFFFC7 | (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x882;
  *(_DWORD *)(a2 + 16) = 2;
  if (*(_BYTE *)(a2 + 249))
  {
    v12 = (unsigned __int16)gleFStateProgram_GetTemp(a2, 0);
    v13 = 1689664;
  }
  else
  {
    LODWORD(v12) = *(unsigned __int16 *)(a2 + 24);
    if ((_DWORD)v12 == 0xFFFF)
    {
      v14 = *(__int16 *)(a2 + 240);
      LODWORD(v12) = *(unsigned __int16 *)(a2 + 240);
      *(_WORD *)(a2 + 24) = v14;
      *(_WORD *)(a2 + 4 * v14 + 22) = 1;
      *(_WORD *)(a2 + 240) = v14 + 1;
    }
    v12 = v12;
    v13 = 1689600;
  }
  *((_QWORD *)&v18 + 1) = v13 | (v12 << 48);
  *(_QWORD *)&v19 = (gleFStateProgram_GetTemp(a2, 1u) << 48) | 0x19C840;
  if (*(_BYTE *)(a2 + 248))
  {
    v15 = gleFStateProgram_GetOutput(a2, 0);
    v8 = 1918906368;
  }
  else
  {
    v15 = gleFStateProgram_GetTemp(a2, 0);
  }
  *(_QWORD *)&v18 = v8 | (v15 << 48) | 0x8000;
  return (*(uint64_t (**)(uint64_t, unint64_t *))(a2 + 256))(a2, &v17);
}

uint64_t gleStateProgram_I_BLEND(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  int64x2_t v7;
  uint64_t Temp;
  uint64_t v9;
  uint64_t v10;
  uint64_t Output;
  _QWORD v13[2];
  int8x16_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v5 = 1689600;
  v16 = 0u;
  v17 = 0u;
  v15 = 0u;
  if (*(_BYTE *)(a2 + 251))
    v6 = 0x3100180000;
  else
    v6 = 0x3100080000;
  v13[0] = v6 & 0xFFFFFFFFFFFFFFC7 | (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0xF03;
  *(_DWORD *)(a2 + 16) = 3;
  v7.i64[0] = gleFStateProgram_GetTemp(a2, 1u);
  v7.i64[1] = gleFStateProgram_GetParam(a2, a3);
  v14 = vorrq_s8((int8x16_t)vshlq_n_s64(v7, 0x30uLL), (int8x16_t)xmmword_22D807760);
  if (*(_BYTE *)(a2 + 249))
  {
    Temp = (unsigned __int16)gleFStateProgram_GetTemp(a2, 0);
    v5 = 1689664;
  }
  else
  {
    LODWORD(Temp) = *(unsigned __int16 *)(a2 + 24);
    if ((_DWORD)Temp == 0xFFFF)
    {
      v9 = *(__int16 *)(a2 + 240);
      LODWORD(Temp) = *(unsigned __int16 *)(a2 + 240);
      *(_WORD *)(a2 + 24) = v9;
      *(_WORD *)(a2 + 4 * v9 + 22) = 1;
      *(_WORD *)(a2 + 240) = v9 + 1;
    }
    Temp = Temp;
  }
  v10 = 1919389696;
  *(_QWORD *)&v15 = v5 | (Temp << 48);
  if (*(_BYTE *)(a2 + 248))
  {
    Output = gleFStateProgram_GetOutput(a2, 0);
    v10 = 1919397888;
  }
  else
  {
    Output = gleFStateProgram_GetTemp(a2, 0);
  }
  v13[1] = v10 | (Output << 48);
  return (*(uint64_t (**)(uint64_t, _QWORD *))(a2 + 256))(a2, v13);
}

uint64_t gleStateProgram_I_ADD(_BYTE *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t Temp;
  uint64_t v7;
  uint64_t v8;
  uint64_t Output;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v16 = 0;
  v15 = 0u;
  v14 = 0u;
  v13 = 0u;
  v12 = 0u;
  v3 = 1572864;
  if (!*(_BYTE *)(a2 + 251))
    v3 = 0x80000;
  v4 = v3 & 0xFFFFFFFFFFFFFFC7 | (8 * (*(_DWORD *)(a2 + 16) & 7));
  v11 = v4 | 0x31000007C2;
  *(_DWORD *)(a2 + 16) = 2;
  if ((*a1 & 0x10) != 0)
    v11 = v4 | 0x831000007C2;
  v5 = 1689664;
  *((_QWORD *)&v12 + 1) = (gleFStateProgram_GetTemp(a2, 1u) << 48) | 0x19C840;
  if (*(_BYTE *)(a2 + 249))
  {
    Temp = (unsigned __int16)gleFStateProgram_GetTemp(a2, 0);
  }
  else
  {
    LODWORD(Temp) = *(unsigned __int16 *)(a2 + 24);
    if ((_DWORD)Temp == 0xFFFF)
    {
      v7 = *(__int16 *)(a2 + 240);
      LODWORD(Temp) = *(unsigned __int16 *)(a2 + 240);
      *(_WORD *)(a2 + 24) = v7;
      *(_WORD *)(a2 + 4 * v7 + 22) = 1;
      *(_WORD *)(a2 + 240) = v7 + 1;
    }
    Temp = Temp;
    v5 = 1689600;
  }
  v8 = 1919389696;
  *(_QWORD *)&v13 = v5 | (Temp << 48);
  if (*(_BYTE *)(a2 + 248))
  {
    Output = gleFStateProgram_GetOutput(a2, 0);
    v8 = 1919397888;
  }
  else
  {
    Output = gleFStateProgram_GetTemp(a2, 0);
  }
  *(_QWORD *)&v12 = v8 | (Output << 48);
  return (*(uint64_t (**)(uint64_t, uint64_t *))(a2 + 256))(a2, &v11);
}

uint64_t gleStateProgram_RGBA_DECAL(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int64x2_t v5;
  uint64_t Temp;
  uint64_t v7;
  uint64_t v8;
  uint64_t Output;
  _QWORD v11[2];
  int8x16_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v3 = 1689600;
  gleStateProgram_CheckDestInit(a2);
  v14 = 0u;
  v15 = 0u;
  v13 = 0u;
  if (*(_BYTE *)(a2 + 251))
    v4 = 0x3100180000;
  else
    v4 = 0x3100080000;
  v11[0] = v4 & 0xFFFFFFFFFFFFFFC7 | (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0xF03;
  *(_DWORD *)(a2 + 16) = 3;
  v5.i64[0] = gleFStateProgram_GetTemp(a2, 1u);
  v5.i64[1] = gleFStateProgram_GetTemp(a2, 1u);
  v12 = vorrq_s8((int8x16_t)vshlq_n_s64(v5, 0x30uLL), (int8x16_t)xmmword_22D807770);
  if (*(_BYTE *)(a2 + 249))
  {
    Temp = (unsigned __int16)gleFStateProgram_GetTemp(a2, 0);
    v3 = 1689664;
  }
  else
  {
    LODWORD(Temp) = *(unsigned __int16 *)(a2 + 24);
    if ((_DWORD)Temp == 0xFFFF)
    {
      v7 = *(__int16 *)(a2 + 240);
      LODWORD(Temp) = *(unsigned __int16 *)(a2 + 240);
      *(_WORD *)(a2 + 24) = v7;
      *(_WORD *)(a2 + 4 * v7 + 22) = 1;
      *(_WORD *)(a2 + 240) = v7 + 1;
    }
    Temp = Temp;
  }
  v8 = 1918898176;
  *(_QWORD *)&v13 = v3 | (Temp << 48);
  if (*(_BYTE *)(a2 + 248))
  {
    Output = gleFStateProgram_GetOutput(a2, 0);
    v8 = 1918906368;
  }
  else
  {
    Output = gleFStateProgram_GetTemp(a2, 0);
  }
  v11[1] = v8 | (Output << 48) | 0x70000;
  return (*(uint64_t (**)(uint64_t, _QWORD *))(a2 + 256))(a2, v11);
}

void oglCodeGenServiceGenerateIR_cold_1()
{
  __assert_rtn("drop_front", "StringRef.h", 654, "size() >= N && \"Dropping more elements than exist\"");
}

void oglCodeGenServiceGenerateIR_cold_2()
{
  __assert_rtn("getStorage", "ErrorOr.h", 237, "!HasError && \"Cannot get value when an error exists!\"");
}

void glpPrimitiveTypeToLLVMType_cold_1(unsigned int a1)
{
  char *v1;

  v1 = glpPrimitiveTypeToString(a1);
  printf("unhandled primitive type: %s\n", v1);
  abort();
}

void _glpSetCrashLogMessage_cold_1(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *MEMORY[0x24BDAC8D0];
  v1 = 136315138;
  v2 = a1;
  _os_log_fault_impl(&dword_22D7C1000, MEMORY[0x24BDACB70], OS_LOG_TYPE_FAULT, "%s", (uint8_t *)&v1, 0xCu);
}

void copyBitCodeStorage_cold_1()
{
  __assert_rtn("copyBitCodeStorage", "glp_llvm_ir_util.cpp", 235, "storage.size() + headerSize <= bufferSize");
}

void llvm::SmallString<0u>::c_str()
{
  __assert_rtn("set_size", "SmallVector.h", 81, "N <= capacity()");
}

void glpAddNamedMetadataOperand_cold_1()
{
  __assert_rtn("cast", "Casting.h", 269, "isa<X>(Val) && \"cast<Ty>() argument of incompatible type!\"");
}

void GLPDebugInfoContext::createFunction()
{
  __assert_rtn("createFunction", "glp_llvm_ir_util.cpp", 534, "lexicalBlocks.size() == 1");
}

{
  __assert_rtn("createFunction", "glp_llvm_ir_util.cpp", 526, "!function->getSubprogram()");
}

void glpLLVMDIBuilderCreateSubProgram_cold_1()
{
  __assert_rtn("doit", "Casting.h", 104, "Val && \"isa<> used on a null pointer\"");
}

void glpLLVMDIBuilderCreateSubProgram_cold_2()
{
  __assert_rtn("cast", "Casting.h", 269, "isa<X>(Val) && \"cast<Ty>() argument of incompatible type!\"");
}

void llvm::SmallVectorTemplateBase<char,true>::push_back()
{
  __assert_rtn("set_size", "SmallVector.h", 81, "N <= capacity()");
}

void llvm::isa_impl_wrap<llvm::MDNode,llvm::Metadata const*,llvm::Metadata const*>::doit()
{
  __assert_rtn("doit", "Casting.h", 104, "Val && \"isa<> used on a null pointer\"");
}

unsigned __int8 *__cdecl CC_SHA1(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x24BDAC320](data, *(_QWORD *)&len, md);
}

uint64_t LLVMAddAttributeAtIndex()
{
  return MEMORY[0x24BED4EC0]();
}

uint64_t LLVMAddCase()
{
  return MEMORY[0x24BED4EC8]();
}

uint64_t LLVMAddFunction()
{
  return MEMORY[0x24BED4ED0]();
}

uint64_t LLVMAddGlobalInAddressSpace()
{
  return MEMORY[0x24BED4ED8]();
}

uint64_t LLVMAddIncoming()
{
  return MEMORY[0x24BED4EE0]();
}

uint64_t LLVMAppendBasicBlock()
{
  return MEMORY[0x24BED4EE8]();
}

uint64_t LLVMAppendBasicBlockInContext()
{
  return MEMORY[0x24BED4EF0]();
}

uint64_t LLVMArrayType()
{
  return MEMORY[0x24BED4EF8]();
}

uint64_t LLVMBuildAShr()
{
  return MEMORY[0x24BED4F00]();
}

uint64_t LLVMBuildAdd()
{
  return MEMORY[0x24BED4F08]();
}

uint64_t LLVMBuildAlloca()
{
  return MEMORY[0x24BED4F10]();
}

uint64_t LLVMBuildAnd()
{
  return MEMORY[0x24BED4F18]();
}

uint64_t LLVMBuildBitCast()
{
  return MEMORY[0x24BED4F20]();
}

uint64_t LLVMBuildBr()
{
  return MEMORY[0x24BED4F28]();
}

uint64_t LLVMBuildCall()
{
  return MEMORY[0x24BED4F30]();
}

uint64_t LLVMBuildCondBr()
{
  return MEMORY[0x24BED4F38]();
}

uint64_t LLVMBuildExtractElement()
{
  return MEMORY[0x24BED4F40]();
}

uint64_t LLVMBuildExtractValue()
{
  return MEMORY[0x24BED4F48]();
}

uint64_t LLVMBuildFAdd()
{
  return MEMORY[0x24BED4F50]();
}

uint64_t LLVMBuildFCmp()
{
  return MEMORY[0x24BED4F58]();
}

uint64_t LLVMBuildFDiv()
{
  return MEMORY[0x24BED4F60]();
}

uint64_t LLVMBuildFMul()
{
  return MEMORY[0x24BED4F68]();
}

uint64_t LLVMBuildFNeg()
{
  return MEMORY[0x24BED4F70]();
}

uint64_t LLVMBuildFPCast()
{
  return MEMORY[0x24BED4F78]();
}

uint64_t LLVMBuildFPExt()
{
  return MEMORY[0x24BED4F80]();
}

uint64_t LLVMBuildFPTrunc()
{
  return MEMORY[0x24BED4F88]();
}

uint64_t LLVMBuildFSub()
{
  return MEMORY[0x24BED4F90]();
}

uint64_t LLVMBuildGEP()
{
  return MEMORY[0x24BED4F98]();
}

uint64_t LLVMBuildICmp()
{
  return MEMORY[0x24BED4FA0]();
}

uint64_t LLVMBuildInsertElement()
{
  return MEMORY[0x24BED4FA8]();
}

uint64_t LLVMBuildInsertValue()
{
  return MEMORY[0x24BED4FB0]();
}

uint64_t LLVMBuildIntCast()
{
  return MEMORY[0x24BED4FB8]();
}

uint64_t LLVMBuildLShr()
{
  return MEMORY[0x24BED4FC0]();
}

uint64_t LLVMBuildLoad()
{
  return MEMORY[0x24BED4FC8]();
}

uint64_t LLVMBuildMul()
{
  return MEMORY[0x24BED4FD0]();
}

uint64_t LLVMBuildNeg()
{
  return MEMORY[0x24BED4FD8]();
}

uint64_t LLVMBuildNot()
{
  return MEMORY[0x24BED4FE0]();
}

uint64_t LLVMBuildOr()
{
  return MEMORY[0x24BED4FE8]();
}

uint64_t LLVMBuildPhi()
{
  return MEMORY[0x24BED4FF0]();
}

uint64_t LLVMBuildPointerCast()
{
  return MEMORY[0x24BED4FF8]();
}

uint64_t LLVMBuildRet()
{
  return MEMORY[0x24BED5000]();
}

uint64_t LLVMBuildRetVoid()
{
  return MEMORY[0x24BED5008]();
}

uint64_t LLVMBuildSDiv()
{
  return MEMORY[0x24BED5010]();
}

uint64_t LLVMBuildSExt()
{
  return MEMORY[0x24BED5018]();
}

uint64_t LLVMBuildSRem()
{
  return MEMORY[0x24BED5020]();
}

uint64_t LLVMBuildSelect()
{
  return MEMORY[0x24BED5028]();
}

uint64_t LLVMBuildShl()
{
  return MEMORY[0x24BED5030]();
}

uint64_t LLVMBuildShuffleVector()
{
  return MEMORY[0x24BED5038]();
}

uint64_t LLVMBuildStore()
{
  return MEMORY[0x24BED5040]();
}

uint64_t LLVMBuildSub()
{
  return MEMORY[0x24BED5048]();
}

uint64_t LLVMBuildSwitch()
{
  return MEMORY[0x24BED5050]();
}

uint64_t LLVMBuildTrunc()
{
  return MEMORY[0x24BED5058]();
}

uint64_t LLVMBuildUDiv()
{
  return MEMORY[0x24BED5060]();
}

uint64_t LLVMBuildUIToFP()
{
  return MEMORY[0x24BED5068]();
}

uint64_t LLVMBuildURem()
{
  return MEMORY[0x24BED5070]();
}

uint64_t LLVMBuildXor()
{
  return MEMORY[0x24BED5078]();
}

uint64_t LLVMBuildZExt()
{
  return MEMORY[0x24BED5080]();
}

uint64_t LLVMClearInsertionPosition()
{
  return MEMORY[0x24BED5088]();
}

uint64_t LLVMConstAllOnes()
{
  return MEMORY[0x24BED5090]();
}

uint64_t LLVMConstArray()
{
  return MEMORY[0x24BED5098]();
}

uint64_t LLVMConstInt()
{
  return MEMORY[0x24BED50A0]();
}

uint64_t LLVMConstNull()
{
  return MEMORY[0x24BED50A8]();
}

uint64_t LLVMConstReal()
{
  return MEMORY[0x24BED50B0]();
}

uint64_t LLVMConstVector()
{
  return MEMORY[0x24BED50B8]();
}

uint64_t LLVMContextCreate()
{
  return MEMORY[0x24BED50C0]();
}

uint64_t LLVMContextDispose()
{
  return MEMORY[0x24BED50C8]();
}

uint64_t LLVMCountParamTypes()
{
  return MEMORY[0x24BED50D0]();
}

uint64_t LLVMCreateBuilderInContext()
{
  return MEMORY[0x24BED50D8]();
}

uint64_t LLVMCreateEnumAttribute()
{
  return MEMORY[0x24BED50E0]();
}

uint64_t LLVMDisposeBuilder()
{
  return MEMORY[0x24BED5100]();
}

uint64_t LLVMDisposeModule()
{
  return MEMORY[0x24BED5110]();
}

uint64_t LLVMDoubleTypeInContext()
{
  return MEMORY[0x24BED5118]();
}

uint64_t LLVMFloatTypeInContext()
{
  return MEMORY[0x24BED5120]();
}

uint64_t LLVMFunctionType()
{
  return MEMORY[0x24BED5128]();
}

uint64_t LLVMGetElementType()
{
  return MEMORY[0x24BED5140]();
}

uint64_t LLVMGetEnumAttributeKindForName()
{
  return MEMORY[0x24BED5148]();
}

uint64_t LLVMGetInsertBlock()
{
  return MEMORY[0x24BED5150]();
}

uint64_t LLVMGetIntTypeWidth()
{
  return MEMORY[0x24BED5158]();
}

uint64_t LLVMGetNamedFunction()
{
  return MEMORY[0x24BED5160]();
}

uint64_t LLVMGetParam()
{
  return MEMORY[0x24BED5168]();
}

uint64_t LLVMGetStructName()
{
  return MEMORY[0x24BED5170]();
}

uint64_t LLVMGetSwitchDefaultDest()
{
  return MEMORY[0x24BED5178]();
}

uint64_t LLVMGetTypeByName()
{
  return MEMORY[0x24BED5188]();
}

uint64_t LLVMGetTypeKind()
{
  return MEMORY[0x24BED5190]();
}

uint64_t LLVMGetUndef()
{
  return MEMORY[0x24BED5198]();
}

uint64_t LLVMGetVectorSize()
{
  return MEMORY[0x24BED51A0]();
}

uint64_t LLVMHalfTypeInContext()
{
  return MEMORY[0x24BED51A8]();
}

uint64_t LLVMInt16TypeInContext()
{
  return MEMORY[0x24BED51B0]();
}

uint64_t LLVMInt1TypeInContext()
{
  return MEMORY[0x24BED51B8]();
}

uint64_t LLVMInt32TypeInContext()
{
  return MEMORY[0x24BED51C0]();
}

uint64_t LLVMInt64TypeInContext()
{
  return MEMORY[0x24BED51C8]();
}

uint64_t LLVMInt8TypeInContext()
{
  return MEMORY[0x24BED51D0]();
}

uint64_t LLVMIntTypeInContext()
{
  return MEMORY[0x24BED51D8]();
}

uint64_t LLVMMDNodeInContext()
{
  return MEMORY[0x24BED51E0]();
}

uint64_t LLVMMDStringInContext()
{
  return MEMORY[0x24BED51E8]();
}

uint64_t LLVMModuleCreateWithNameInContext()
{
  return MEMORY[0x24BED51F0]();
}

uint64_t LLVMMoveBasicBlockBefore()
{
  return MEMORY[0x24BED51F8]();
}

uint64_t LLVMPointerType()
{
  return MEMORY[0x24BED5200]();
}

uint64_t LLVMPositionBuilderAtEnd()
{
  return MEMORY[0x24BED5208]();
}

uint64_t LLVMPositionBuilderBefore()
{
  return MEMORY[0x24BED5210]();
}

uint64_t LLVMSetCurrentDebugLocation()
{
  return MEMORY[0x24BED5218]();
}

uint64_t LLVMSetDataLayout()
{
  return MEMORY[0x24BED5220]();
}

uint64_t LLVMSetGlobalConstant()
{
  return MEMORY[0x24BED5228]();
}

uint64_t LLVMSetInitializer()
{
  return MEMORY[0x24BED5230]();
}

uint64_t LLVMSetTarget()
{
  return MEMORY[0x24BED5238]();
}

uint64_t LLVMStructCreateNamed()
{
  return MEMORY[0x24BED5240]();
}

uint64_t LLVMStructTypeInContext()
{
  return MEMORY[0x24BED5248]();
}

uint64_t LLVMTypeOf()
{
  return MEMORY[0x24BED5250]();
}

uint64_t LLVMVectorType()
{
  return MEMORY[0x24BED5258]();
}

uint64_t LLVMVoidTypeInContext()
{
  return MEMORY[0x24BED5260]();
}

uint64_t llvm::ConstantFP::get()
{
  return MEMORY[0x24BED5310]();
}

uint64_t llvm::DILocation::getImpl()
{
  return MEMORY[0x24BED5328]();
}

uint64_t llvm::NamedMDNode::addOperand()
{
  return MEMORY[0x24BED56E8]();
}

uint64_t llvm::raw_ostream::flush_nonempty(llvm::raw_ostream *this)
{
  return MEMORY[0x24BED57C8](this);
}

uint64_t llvm::raw_ostream::SetBufferAndMode()
{
  return MEMORY[0x24BED57D0]();
}

uint64_t llvm::raw_ostream::write(llvm::raw_ostream *this)
{
  return MEMORY[0x24BED57E0](this);
}

void llvm::raw_ostream::~raw_ostream(llvm::raw_ostream *this)
{
  MEMORY[0x24BED57F8](this);
}

uint64_t llvm::MemoryBuffer::getMemBuffer()
{
  return MEMORY[0x24BED5990]();
}

uint64_t llvm::MetadataAsValue::get()
{
  return MEMORY[0x24BED5DB0]();
}

uint64_t llvm::SmallVectorBase<unsigned long long>::grow_pod()
{
  return off_24F9462A0();
}

uint64_t llvm::MetadataTracking::untrack()
{
  return MEMORY[0x24BED5FE8]();
}

uint64_t llvm::parseBitcodeFile()
{
  return MEMORY[0x24BED6050]();
}

uint64_t llvm::deallocate_buffer(llvm *this, void *a2)
{
  return MEMORY[0x24BED6130](this, a2);
}

uint64_t llvm::WriteBitcodeToFile()
{
  return MEMORY[0x24BED61D0]();
}

uint64_t llvm::errorToErrorCodeAndEmitErrors()
{
  return MEMORY[0x24BED6608]();
}

uint64_t llvm::dbgs(llvm *this)
{
  return MEMORY[0x24BED6C70](this);
}

uint64_t llvm::Module::getOrInsertNamedMetadata()
{
  return MEMORY[0x24BED7090]();
}

void llvm::Module::~Module(llvm::Module *this)
{
  MEMORY[0x24BED70D8](this);
}

uint64_t llvm::Function::setSubprogram()
{
  return MEMORY[0x24BED7490]();
}

uint64_t llvm::DIBuilder::createFile()
{
  return MEMORY[0x24BED7598]();
}

uint64_t llvm::DIBuilder::createFunction()
{
  return MEMORY[0x24BED75F0]();
}

uint64_t llvm::DIBuilder::createCompileUnit()
{
  return MEMORY[0x24BED7648]();
}

uint64_t llvm::DIBuilder::createSubroutineType()
{
  return MEMORY[0x24BED76C8]();
}

uint64_t llvm::DIBuilder::getOrCreateTypeArray()
{
  return MEMORY[0x24BED76D0]();
}

uint64_t llvm::DIBuilder::finalize(llvm::DIBuilder *this)
{
  return MEMORY[0x24BED7770](this);
}

uint64_t llvm::DIBuilder::DIBuilder()
{
  return MEMORY[0x24BED7778]();
}

uint64_t llvm::MemoryBuffer::getMemBufferRef(llvm::MemoryBuffer *this)
{
  return MEMORY[0x24BED7B38](this);
}

uint64_t llvm::LLT::print(llvm::LLT *this, llvm::raw_ostream *a2)
{
  return MEMORY[0x24BED7D00](this, a2);
}

uint64_t llvm::Function::getSubprogram(llvm::Function *this)
{
  return MEMORY[0x24BED8290](this);
}

const std::error_category *std::system_category(void)
{
  return (const std::error_category *)MEMORY[0x24BEDB0B0]();
}

void operator delete(void *__p)
{
  off_24F946350(__p);
}

uint64_t operator delete()
{
  return off_24F946358();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_24F946360(__sz);
}

uint64_t operator new()
{
  return off_24F946368();
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
  MEMORY[0x24BDAC7A0](a1, a2, *(_QWORD *)&a3, a4);
}

void _longjmp(jmp_buf a1, int a2)
{
  MEMORY[0x24BDACAF8](a1, *(_QWORD *)&a2);
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB88](dso, log, type, format, buf, *(_QWORD *)&size);
}

void abort(void)
{
  MEMORY[0x24BDAD008]();
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x24BDAE070](__path, *(_QWORD *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x24BDAE088](__handle, __symbol);
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED70](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED78](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED88](ptr, size, type_id);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x24BDAEEA8](__b, *(_QWORD *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
  MEMORY[0x24BDAEEB0](__b, __pattern16, __len);
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x24BDAEFA8](a1, a2, *(_QWORD *)&a3, *(_QWORD *)&a4, *(_QWORD *)&a5, a6);
}

int munmap(void *a1, size_t a2)
{
  return MEMORY[0x24BDAEFF0](a1, a2);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x24BDAF460](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x24BDAF488](lock);
}

int printf(const char *a1, ...)
{
  return MEMORY[0x24BDAF6A8](a1);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x24BDAFE40](__str, __size, __format);
}

int snprintf_l(char *a1, size_t a2, locale_t a3, const char *a4, ...)
{
  return MEMORY[0x24BDAFE48](a1, a2, a3, a4);
}

int sprintf_l(char *a1, locale_t a2, const char *a3, ...)
{
  return MEMORY[0x24BDAFE68](a1, a2, a3);
}

char *__cdecl strcat(char *__s1, const char *__s2)
{
  return (char *)MEMORY[0x24BDAFEE0](__s1, __s2);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x24BDAFEF0](__s1, __s2);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x24BDAFF40](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x24BDAFF68](__s1, __s2, __n);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x24BDAFF70](__dst, __src, __n);
}

char *__cdecl strndup(const char *__s1, size_t __n)
{
  return (char *)MEMORY[0x24BDAFF78](__s1, __n);
}

size_t strnlen(const char *__s1, size_t __n)
{
  return MEMORY[0x24BDAFF80](__s1, __n);
}

uint64_t strtol_l(const char *a1, char **a2, int a3, locale_t a4)
{
  return MEMORY[0x24BDB0008](a1, a2, *(_QWORD *)&a3, a4);
}

uint64_t sysconf(int a1)
{
  return MEMORY[0x24BDB00F0](*(_QWORD *)&a1);
}

