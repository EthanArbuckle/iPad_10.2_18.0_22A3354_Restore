uint64_t gliInitializeLibrary(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, int a5)
{
  uint64_t result;

  gfxInitializeLibrary();
  result = ShInitializeLibrary();
  gle_io_data = a4;
  gle_lib_init = a5;
  return result;
}

uint64_t gliGetVersion(_DWORD *a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v3;

  *a1 = 2;
  *a2 = 3;
  *a3 = 0x20000;
  os_unfair_lock_lock(&gliGetVersion_gli_initialize_lock);
  if ((gliGetVersion_gli_initialized & 1) != 0)
  {
    v3 = 1;
  }
  else
  {
    glePreInitGlobals();
    cvmPreInit();
    if (gfxGetPlugins())
    {
      v3 = 1;
      gliGetVersion_gli_initialized = 1;
    }
    else
    {
      v3 = 0;
    }
  }
  os_unfair_lock_unlock(&gliGetVersion_gli_initialize_lock);
  return v3;
}

double glePreInitGlobals()
{
  uint64_t v0;
  int32x4_t v1;
  float32x4_t v2;
  int32x4_t v3;
  __int128 v4;
  double result;

  v0 = 0;
  gle_globals_struct[0] = (uint64_t)gleFeedbackPointsPtr;
  unk_2540C9040 = gleSelectPointsPtr;
  qword_2540C9078 = (uint64_t)gleFeedbackPointsPtr;
  unk_2540C9080 = gleSelectPointsPtr;
  qword_2540C9048 = (uint64_t)gleFeedbackLinesPtr;
  unk_2540C9050 = gleSelectLinesPtr;
  qword_2540C9088 = (uint64_t)gleFeedbackLinesPtr;
  unk_2540C9090 = gleSelectLinesPtr;
  qword_2540C9058 = (uint64_t)gleFeedbackPolygonPtr;
  unk_2540C9060 = gleSelectPolygonPtr;
  qword_2540C9098 = (uint64_t)gleFeedbackPolygonPtr;
  unk_2540C90A0 = gleSelectPolygonPtr;
  qword_2540C9068 = (uint64_t)glePopMaterials;
  unk_2540C9070 = glePopAndCopyMaterials;
  qword_2540C90A8 = (uint64_t)glePopMaterials;
  unk_2540C90B0 = glePopAndCopyMaterials;
  v1 = (int32x4_t)xmmword_21B9A4FA0;
  v2 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  v3.i64[0] = 0x400000004;
  v3.i64[1] = 0x400000004;
  do
  {
    *(float32x4_t *)&gle_globals_struct[v0 + 16] = vmulq_f32(vcvtq_f32_s32(v1), v2);
    v1 = vaddq_s32(v1, v3);
    v0 += 2;
  }
  while (v0 != 128);
  qword_2540C94B8 = 0x101010403040304;
  *(_QWORD *)&v4 = 0x404040404040404;
  *((_QWORD *)&v4 + 1) = 0x404040404040404;
  unk_2540C94D0 = v4;
  unk_2540C94C0 = v4;
  byte_2540C94D9 = 4;
  result = 7.74860419e-304;
  qword_2540C94E0 = 0x101010101010101;
  return result;
}

uint64_t gliChoosePixelFormat(uint64_t **a1, uint64_t a2)
{
  uint64_t Plugins;
  uint64_t v5;
  uint64_t **v6;
  uint64_t v7;
  uint64_t v8;
  int i;
  uint64_t *v10;
  BOOL v11;
  uint64_t *v13;

  if (!a1)
    return 10014;
  *a1 = 0;
  if (!a2)
    return 10014;
  Plugins = gfxGetPlugins();
  if (!Plugins)
    return 10015;
  v5 = Plugins;
  v13 = 0;
  v6 = a1;
  do
  {
    v7 = (*(uint64_t (**)(uint64_t **, uint64_t))(v5 + 1128))(&v13, a2);
    v8 = v7;
    if (v13)
    {
      *v6 = v13;
      v6 = (uint64_t **)v13;
      for (i = *((_DWORD *)v13 + 2); ; i = *((_DWORD *)v10 + 2))
      {
        *((_DWORD *)v6 + 2) = i | 0x20000;
        v10 = *v6;
        if (!*v6)
          break;
        v6 = (uint64_t **)*v6;
        v13 = v10;
      }
    }
    v5 = *(_QWORD *)v5;
    if (v5)
      v11 = (_DWORD)v7 == 0;
    else
      v11 = 0;
  }
  while (v11);
  if ((_DWORD)v7 && *a1)
  {
    j__gliDestroyPixelFormat(*a1);
    *a1 = 0;
  }
  return v8;
}

uint64_t gliDestroyPixelFormat(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  int v4;
  uint64_t PluginWithDriverID;
  unsigned int v6;
  BOOL v7;

  if (!a1)
    return 10014;
  v1 = a1;
  LODWORD(v2) = 0;
  do
  {
    v3 = v1;
    v4 = *((_DWORD *)v1 + 2);
    do
      v1 = (uint64_t *)*v1;
    while (v1 && ((v4 ^ *((_DWORD *)v1 + 2)) & 0xFF00) == 0);
    PluginWithDriverID = gfxGetPluginWithDriverID();
    if (PluginWithDriverID)
      v6 = (*(uint64_t (**)(uint64_t *))(PluginWithDriverID + 1136))(v3);
    else
      v6 = 10015;
    if ((_DWORD)v2)
      v7 = 1;
    else
      v7 = v6 == 0;
    if (v7)
      v2 = v2;
    else
      v2 = v6;
  }
  while (v1);
  return v2;
}

uint64_t gliCreateContext(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  if (!a3)
    return j__gliCreateContextWithShared(a1, a2, a3, a4, a5, a6);
  if (*(_DWORD *)(a3 + 29792) == 878944803)
  {
    a3 = *(_QWORD *)(a3 + 19296);
    return j__gliCreateContextWithShared(a1, a2, a3, a4, a5, a6);
  }
  return 10009;
}

uint64_t gliCreateContextWithShared(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  int v8;
  int v9;
  uint64_t SharedState;
  unint64_t v13;
  int v14;
  int v15;
  uint64_t *v16;
  int v17;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  __int16 v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t i;
  uint64_t *v68;
  char v69;
  uint64_t v70;
  unsigned __int8 *v71;
  uint64_t v72;
  uint64_t v73;
  _DWORD v75[12];
  uint64_t v76;

  v76 = *MEMORY[0x24BDAC8D0];
  if (!a1)
    return 10014;
  *a1 = 0;
  if ((a6 & 0x20) != 0)
    v8 = 3;
  else
    v8 = (a6 >> 3) & 2;
  if ((a6 & 0x40) != 0)
    v9 = 4;
  else
    v9 = v8;
  if (a2)
  {
    SharedState = a3;
    v13 = 0;
    v14 = 0;
    v15 = 255;
    v16 = a2;
    while (1)
    {
      v17 = *((_DWORD *)v16 + 2);
      if ((v17 & 0xFF0000) != 0x20000 || v13 > 0xB)
        break;
      if ((*((_DWORD *)v16 + 3) & 0x40) == 0)
        v14 = 1;
      if ((v16[1] & 0x7F00) == 0x400)
        v15 = v13;
      v75[v13++] = v17;
      v16 = (uint64_t *)*v16;
      if (!v16)
      {
        if ((a6 & 1) != 0 && v14)
        {
          if (v15 == 255)
          {
            if (v13 > 0xB)
              return 10002;
            v75[v13] = *MEMORY[0x24BDE2DD8];
            LOBYTE(v15) = v13;
            LODWORD(v13) = v13 + 1;
          }
        }
        else
        {
          LOBYTE(v15) = -1;
        }
        if (a3)
        {
          if (!gfxCompareSharedState())
            return 10009;
        }
        else
        {
          SharedState = gfxCreateSharedState();
          if (!SharedState)
            return 10002;
        }
        v68 = a1;
        gfxRetainSharedStateAndHash();
        v20 = (char *)malloc_type_calloc(1uLL, (1672 * v13 + 32512), 0x2BF3136CuLL);
        if (!v20)
          abort();
        v21 = (uint64_t)v20;
        v22 = (unsigned __int8 *)(v20 + 32496);
        __CFSetLastAllocationEventName();
        *(_DWORD *)(v21 + 2272) = 65540;
        v69 = a6;
        LODWORD(v23) = a6 >> 26;
        if (a6 >> 26 >= v13)
          v23 = 0;
        else
          v23 = v23;
        v22[2] = v23;
        v22[1] = v15;
        v22[3] = v23;
        v70 = v23;
        v71 = v22;
        v22[4] = v23;
        *v22 = v13;
        *(_QWORD *)(v21 + 28976) = a4;
        *(_QWORD *)(v21 + 28984) = a5;
        v22[5] = v9;
        v24 = 0;
        v72 = SharedState;
        v25 = SharedState + 352;
        v26 = v21 + 32512;
        v73 = getpagesize();
        v27 = 1;
        v28 = a2;
        v29 = a2;
        while (1)
        {
          v30 = v29 ? v29 : v28;
          v31 = v26 + v24;
          *(_DWORD *)(v31 + 1664) = *(_DWORD *)(v25 + 24);
          v32 = v21 + v24;
          v33 = *(_OWORD *)(v25 + 8);
          *(_OWORD *)(v32 + 34160) = v33;
          *(_QWORD *)(v32 + 32520) = *(_QWORD *)v25;
          *(_BYTE *)(v31 + 191) = 8;
          *(_DWORD *)(v31 + 636) = v9;
          *(_DWORD *)(v31 + 600) = 134283263;
          *(_BYTE *)(v31 + 648) = -113;
          *(_BYTE *)(v31 + 652) = -113;
          *(_QWORD *)(v32 + 32664) = 0x338000083F800000;
          *(_WORD *)(v31 + 394) = 1;
          *(_BYTE *)(v31 + 536) = 1;
          *(_BYTE *)(v31 + 41) = *(_BYTE *)(v26 + v24 + 41) & 0x80;
          *(_QWORD *)(v31 + 656) = v73;
          v34 = (*(uint64_t (**)(void))(v33 + 1160))();
          if ((_DWORD)v34)
            break;
          if ((v30[3] & 0x3FFFFFFC) != 0)
            *(_DWORD *)(v26 + v24 + 68) = 538976288;
          v35 = *(_QWORD *)(v31 + 656);
          if (v35 >= 0x4000)
            v35 = 0x4000;
          *(_QWORD *)(v31 + 656) = v35;
          v28 = a2;
          if ((v9 - 2) < 2)
          {
            v36 = v26 + v24;
            *(int32x2_t *)(v26 + v24 + 20) = vmin_s32(*(int32x2_t *)(v26 + v24 + 20), (int32x2_t)0x100000001000);
            v37 = *(unsigned __int16 *)(v26 + v24 + 176);
            if (v37 >= 0x1000)
              LOWORD(v37) = 4096;
            *(_WORD *)(v36 + 176) = v37;
            v38 = *(unsigned __int16 *)(v36 + 182);
            if (v38 >= 0x1000)
              LOWORD(v38) = 4096;
            *(_WORD *)(v36 + 182) = v38;
            v39 = *(unsigned __int16 *)(v36 + 184);
            if (v39 >= 0x1000)
              LOWORD(v39) = 4096;
            *(_WORD *)(v36 + 184) = v39;
            v40 = *(unsigned __int8 *)(v36 + 186);
            if (v40 >= 4)
              LOBYTE(v40) = 4;
            *(_BYTE *)(v36 + 186) = v40;
            v41 = *(unsigned __int16 *)(v36 + 170);
            if (v41 >= 8)
              LOWORD(v41) = 8;
            *(_WORD *)(v36 + 170) = v41;
            v42 = *(unsigned __int8 *)(v31 + 191);
            if (v42 >= 8)
              LOBYTE(v42) = 8;
            *(_BYTE *)(v31 + 191) = v42;
            v43 = *(unsigned __int16 *)(v36 + 172);
            if (v43 >= 8)
              LOWORD(v43) = 8;
            *(_WORD *)(v36 + 172) = v43;
            v44 = *(_DWORD *)(v36 + 360);
            if (v44 >= 0x200)
              v44 = 512;
            *(_DWORD *)(v36 + 360) = v44;
            v45 = *(_DWORD *)(v36 + 464);
            if (v45 >= 0x20)
              v45 = 32;
            *(_DWORD *)(v36 + 464) = v45;
            v46 = *(unsigned __int16 *)(v36 + 348);
            if (v46 >= 0x100)
              LOWORD(v46) = 256;
            *(_WORD *)(v36 + 348) = v46;
            *(_BYTE *)(v36 + 38) = *(_BYTE *)(v36 + 38) != 0;
            *(_BYTE *)(v36 + 37) = *(_BYTE *)(v36 + 37) != 0;
          }
          else if (!v9)
          {
            v47 = 16;
            v48 = 16;
            v49 = v26 + v24;
            if (*(unsigned __int16 *)(v26 + v24 + 170) <= 0x10u)
              v48 = *(_WORD *)(v26 + v24 + 170);
            *(_WORD *)(v49 + 170) = v48;
            v50 = *(unsigned __int8 *)(v31 + 191);
            if (v50 > 0x10)
              LOBYTE(v50) = 16;
            *(_BYTE *)(v31 + 191) = v50;
            v51 = *(unsigned __int16 *)(v49 + 172);
            if (v51 > 0x10)
              LOWORD(v51) = 16;
            *(_WORD *)(v49 + 172) = v51;
            v52 = *(_DWORD *)(v49 + 372);
            if (v52 >= 0x10)
              v52 = 16;
            *(_DWORD *)(v49 + 372) = v52;
            v53 = *(_DWORD *)(v49 + 396);
            if (v53 >= 0x10)
              v53 = 16;
            *(_DWORD *)(v49 + 396) = v53;
            if (*(_DWORD *)(v49 + 420) < 0x10u)
              v47 = *(_DWORD *)(v49 + 420);
            *(_DWORD *)(v49 + 420) = v47;
          }
          v29 = (uint64_t *)*v30;
          ++v27;
          v24 += 1672;
          v25 += 32;
          if (1672 * v13 == v24)
            goto LABEL_85;
        }
        if (1672 * (_DWORD)v13 != (_DWORD)v24)
        {
          v19 = v34;
          if ((int)v27 - 1 >= 1)
          {
            v65 = (_QWORD *)(v32 + 30840);
            do
            {
              (*(void (**)(_QWORD))(v65[206] + 1176))(*v65);
              --v27;
              v65 -= 209;
            }
            while (v27 > 1);
          }
          gfxReleaseSharedStateAndHash();
          free((void *)v21);
          return v19;
        }
LABEL_85:
        v55 = v21 + 1672 * v70;
        v56 = *(_QWORD *)(v55 + 32512);
        *(_QWORD *)(v21 + 29016) = v56;
        v57 = *(_QWORD *)(v72 + 32 * v70 + 352);
        v58 = v55 + 32512;
        *(_QWORD *)(v21 + 29024) = v57;
        v55 += 32528;
        *(_QWORD *)(v21 + 29032) = v55;
        v59 = *(_QWORD *)(v58 + 1648) + 1056;
        *(_QWORD *)(v21 + 29448) = v59;
        v60 = *(_QWORD *)(v58 + 1656) + 32;
        *(_QWORD *)(v21 + 29456) = v60;
        *(_QWORD *)(v21 + 29488) = v21 + 29040;
        *(_QWORD *)(v21 + 29464) = v56;
        *(_QWORD *)(v21 + 29472) = v57;
        *(_QWORD *)(v21 + 29480) = v55;
        *(_QWORD *)(v21 + 29496) = v59;
        *(_QWORD *)(v21 + 29504) = v60;
        *(_QWORD *)(v21 + 19296) = v72;
        gfxSetShaderDetachFunc();
        gleSetSharedFreeFuncs();
        os_unfair_lock_lock((os_unfair_lock_t)&gl_list_lock);
        v61 = v71[5];
        if (!gl_list[v61])
          gleCreateEnableHashTable(v61);
        *(_QWORD *)(v21 + 27648) = 0;
        *(_QWORD *)(v21 + 27752) = 0;
        *(_QWORD *)(v21 + 27744) = 0;
        v19 = gleInitializeContext(v21);
        if (!(_DWORD)v19)
        {
          if ((v69 & 2) == 0 || !gleCreateCmdBufMachine(v21))
          {
            v66 = v71[5];
            *(_QWORD *)(v21 + 29512) = gl_list[v66];
            gl_list[v66] = v21;
            os_unfair_lock_unlock((os_unfair_lock_t)&gl_list_lock);
            for (i = 3630; i != 3655; ++i)
              *(_QWORD *)(v21 + 8 * i) = 8;
            gliInitDispatchTable(v21);
            v19 = 0;
            *v68 = v21;
            return v19;
          }
          gleTerminateContext(v21);
          v19 = 10019;
        }
        if (*v71)
        {
          v62 = 0;
          v63 = (_QWORD *)(v21 + 32512);
          do
          {
            (*(void (**)(_QWORD))(v63[206] + 1176))(*v63);
            ++v62;
            v63 += 209;
          }
          while (v62 < *v71);
        }
        gfxReleaseSharedStateAndHash();
        v64 = v71[5];
        if (!gl_list[v64])
          gleDestroyEnableHashTable(v64);
        free((void *)v21);
        os_unfair_lock_unlock((os_unfair_lock_t)&gl_list_lock);
        return v19;
      }
    }
  }
  return 10002;
}

void gleCreateEnableHashTable(int a1)
{
  char *v2;
  char *v3;
  uint64_t i;
  char *v5;
  void *v6;
  char *v7;
  int v8;

  os_unfair_lock_lock((os_unfair_lock_t)&gle_enable_hash_table_lock);
  if (!gle_enable_hash_table[a1])
  {
    v2 = (char *)malloc_type_malloc(0x2000uLL, 0x577B5147uLL);
    if (!v2)
      abort();
    v3 = v2;
    for (i = 0; i != 0x2000; i += 32)
    {
      v5 = &v2[i];
      *(_DWORD *)v5 = 0;
      *((_QWORD *)v5 + 1) = gleSetEnable_Error;
      *((_QWORD *)v5 + 2) = 0;
    }
    if (a1 != 2)
    {
      if (a1 == 3)
      {
        gleFillEnableHashTableEntriesES2(v2);
      }
      else if (a1 == 4)
      {
        gleFillEnableHashTableEntriesES2(v2);
        gleAddEnableHashFunc(v3, 35977, (uint64_t)gleSetEnable_RASTERIZER_DISCARD_EXT);
        v6 = gleSetEnable_PRIMITIVE_RESTART;
        v7 = v3;
        v8 = 36201;
LABEL_11:
        gleAddEnableHashFunc(v7, v8, (uint64_t)v6);
      }
      gle_enable_hash_table[a1] = v3;
      goto LABEL_13;
    }
    gleAddEnableHashFunc(v2, 34913, (uint64_t)gleSetEnable_POINT_SPRITE_ARB);
    gleAddEnableHashFunc(v3, 2912, (uint64_t)gleSetEnable_FOG);
    gleAddEnableHashFunc(v3, 2896, (uint64_t)gleSetEnable_LIGHTING);
    gleAddEnableHashFunc(v3, 3553, (uint64_t)gleSetEnable_TEXTURE_2D);
    gleAddEnableHashFunc(v3, 2884, (uint64_t)gleSetEnable_CULL_FACE);
    gleAddEnableHashFunc(v3, 3042, (uint64_t)gleSetEnable_BLEND);
    gleAddEnableHashFunc(v3, 3058, (uint64_t)gleSetEnable_COLOR_LOGIC_OP);
    gleAddEnableHashFunc(v3, 3024, (uint64_t)gleSetEnable_DITHER);
    gleAddEnableHashFunc(v3, 2960, (uint64_t)gleSetEnable_STENCIL_TEST);
    gleAddEnableHashFunc(v3, 2929, (uint64_t)gleSetEnable_DEPTH_TEST);
    gleAddEnableHashFunc(v3, 12288, (uint64_t)gleSetEnable_CLIP_PLANE);
    gleAddEnableHashFunc(v3, 12289, (uint64_t)gleSetEnable_CLIP_PLANE);
    gleAddEnableHashFunc(v3, 12290, (uint64_t)gleSetEnable_CLIP_PLANE);
    gleAddEnableHashFunc(v3, 12291, (uint64_t)gleSetEnable_CLIP_PLANE);
    gleAddEnableHashFunc(v3, 12292, (uint64_t)gleSetEnable_CLIP_PLANE);
    gleAddEnableHashFunc(v3, 12293, (uint64_t)gleSetEnable_CLIP_PLANE);
    gleAddEnableHashFunc(v3, 0x4000, (uint64_t)gleSetEnable_LIGHT);
    gleAddEnableHashFunc(v3, 16385, (uint64_t)gleSetEnable_LIGHT);
    gleAddEnableHashFunc(v3, 16386, (uint64_t)gleSetEnable_LIGHT);
    gleAddEnableHashFunc(v3, 16387, (uint64_t)gleSetEnable_LIGHT);
    gleAddEnableHashFunc(v3, 16388, (uint64_t)gleSetEnable_LIGHT);
    gleAddEnableHashFunc(v3, 16389, (uint64_t)gleSetEnable_LIGHT);
    gleAddEnableHashFunc(v3, 16390, (uint64_t)gleSetEnable_LIGHT);
    gleAddEnableHashFunc(v3, 16391, (uint64_t)gleSetEnable_LIGHT);
    gleAddEnableHashFunc(v3, 2832, (uint64_t)gleSetEnable_POINT_SMOOTH);
    gleAddEnableHashFunc(v3, 2848, (uint64_t)gleSetEnable_LINE_SMOOTH);
    gleAddEnableHashFunc(v3, 3089, (uint64_t)gleSetEnable_SCISSOR_TEST);
    gleAddEnableHashFunc(v3, 2903, (uint64_t)gleSetEnable_COLOR_MATERIAL);
    gleAddEnableHashFunc(v3, 2977, (uint64_t)gleSetEnable_NORMALIZE);
    gleAddEnableHashFunc(v3, 32826, (uint64_t)gleSetEnable_RESCALE_NORMAL_EXT);
    gleAddEnableHashFunc(v3, 32823, (uint64_t)gleSetEnable_POLYGON_OFFSET_FILL);
    gleAddEnableHashFunc(v3, 32925, (uint64_t)gleSetEnable_MULTISAMPLE);
    gleAddEnableHashFunc(v3, 32926, (uint64_t)gleSetEnable_SAMPLE_ALPHA_TO_COVERAGE);
    gleAddEnableHashFunc(v3, 32927, (uint64_t)gleSetEnable_SAMPLE_ALPHA_TO_ONE);
    gleAddEnableHashFunc(v3, 32928, (uint64_t)gleSetEnable_SAMPLE_COVERAGE);
    gleAddEnableHashFunc(v3, 34880, (uint64_t)gleSetEnable_MATRIX_PALETTE_OES);
    v6 = gleSetEnable_ALPHA_TEST;
    v7 = v3;
    v8 = 3008;
    goto LABEL_11;
  }
LABEL_13:
  os_unfair_lock_unlock((os_unfair_lock_t)&gle_enable_hash_table_lock);
}

char *gleAddEnableHashFunc(char *result, int a2, uint64_t a3)
{
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;

  v5 = ((a2 + 7) ^ BYTE1(a2));
  v6 = &result[32 * v5];
  if (*(_DWORD *)v6)
  {
    v7 = result;
    result = (char *)malloc_type_malloc(0x20uLL, 0x577B5147uLL);
    if (!result)
      abort();
    *(_DWORD *)result = *(_DWORD *)v6;
    v8 = &v7[32 * v5];
    *(_OWORD *)(result + 8) = *(_OWORD *)(v8 + 8);
    *(_DWORD *)v6 = a2;
    *((_QWORD *)v8 + 1) = a3;
    *((_QWORD *)v8 + 2) = result;
  }
  else
  {
    *(_DWORD *)v6 = a2;
    *((_QWORD *)v6 + 1) = a3;
    *((_QWORD *)v6 + 2) = 0;
  }
  return result;
}

uint64_t gleInitializeContext(uint64_t a1)
{
  int32x4_t *v2;
  uint64_t v3;
  _DWORD *v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  void *v14;
  _DWORD *v15;
  uint64_t v16;
  char v17;
  __int16 v18;
  _BYTE *v19;
  __int16 v20;
  __int16 v21;
  uint64_t v22;

  *(_QWORD *)(a1 + 29632) = 0;
  *(_QWORD *)(a1 + 29008) = 0;
  v2 = (int32x4_t *)(a1 + 29716);
  *(_WORD *)(a1 + 29828) = 0;
  v3 = a1 + 32470;
  v4 = (_DWORD *)(a1 + 27792);
  v5 = (_BYTE *)(a1 + 15196);
  *(_BYTE *)(a1 + 32483) = *(_BYTE *)(*(_QWORD *)(a1 + 29032) + 41);
  *(_QWORD *)(a1 + 19240) = gle_globals_struct;
  *(_DWORD *)(a1 + 29792) = 878944803;
  *(_QWORD *)(a1 + 19288) = 0;
  *(_QWORD *)(a1 + 26000) = 0;
  *(_QWORD *)(a1 + 19304) = 0;
  *(_QWORD *)(a1 + 24192) = 0;
  *(_OWORD *)(a1 + 1432) = 0u;
  *(_QWORD *)(a1 + 1424) = 0;
  *(_OWORD *)(a1 + 1456) = 0u;
  *(_OWORD *)(a1 + 24400) = 0u;
  *(_OWORD *)(a1 + 24416) = 0u;
  *(_OWORD *)(a1 + 24432) = 0u;
  *(_OWORD *)(a1 + 24448) = 0u;
  *(_OWORD *)(a1 + 24464) = 0u;
  *(_OWORD *)(a1 + 24480) = 0u;
  *(_OWORD *)(a1 + 24496) = 0u;
  *(_OWORD *)(a1 + 24512) = 0u;
  *(_OWORD *)(a1 + 24528) = 0u;
  *(_OWORD *)(a1 + 24544) = 0u;
  *(_OWORD *)(a1 + 24560) = 0u;
  *(_OWORD *)(a1 + 24576) = 0u;
  *(_QWORD *)(a1 + 24592) = 0;
  v6 = *(unsigned __int8 *)(a1 + 32496);
  if (*(_BYTE *)(a1 + 32496))
  {
    v7 = a1 + 33504;
    v8 = *(unsigned __int8 *)(a1 + 32496);
    do
    {
      *(_QWORD *)(v7 + 32) = 0;
      *(_OWORD *)v7 = 0uLL;
      *(_OWORD *)(v7 + 16) = 0uLL;
      v7 += 1672;
      --v8;
    }
    while (v8);
  }
  *(_QWORD *)(a1 + 28944) = 0;
  *(_OWORD *)(a1 + 23936) = 0uLL;
  *(_OWORD *)(a1 + 23952) = 0uLL;
  *(_OWORD *)(a1 + 23968) = 0uLL;
  *(_OWORD *)(a1 + 23984) = 0uLL;
  *(_OWORD *)(a1 + 24000) = 0uLL;
  *(_OWORD *)(a1 + 24016) = 0uLL;
  *(_OWORD *)(a1 + 24032) = 0uLL;
  *(_OWORD *)(a1 + 24048) = 0uLL;
  *(_OWORD *)(a1 + 24064) = 0uLL;
  *(_OWORD *)(a1 + 24080) = 0uLL;
  *(_OWORD *)(a1 + 24096) = 0uLL;
  *(_OWORD *)(a1 + 24112) = 0uLL;
  *(_OWORD *)(a1 + 24128) = 0uLL;
  *(_OWORD *)(a1 + 24144) = 0uLL;
  *(_OWORD *)(a1 + 24160) = 0uLL;
  *(_OWORD *)(a1 + 24176) = 0uLL;
  bzero((void *)(a1 + 20776), 0xBB0uLL);
  *(_OWORD *)(a1 + 26384) = 0u;
  v9 = -48;
  do
  {
    v10 = a1 + v9;
    *(_QWORD *)(v10 + 18744) = 0;
    *(_QWORD *)(v10 + 29584) = 0;
    v9 += 16;
  }
  while (v9);
  *(_QWORD *)(a1 + 26304) = 0;
  *(_QWORD *)(a1 + 28952) = 0;
  *(_QWORD *)(a1 + 28968) = 0;
  *(_QWORD *)(a1 + 28960) = 0;
  if ((_DWORD)v6)
  {
    v11 = (_QWORD *)(a1 + 33592);
    do
    {
      *v11 = 0;
      v11[1] = 0;
      v11 += 209;
      --v6;
    }
    while (v6);
  }
  *(_QWORD *)(a1 + 28992) = 0;
  *(_QWORD *)(a1 + 18792) = 0;
  *(_QWORD *)(a1 + 18864) = 0;
  *(_QWORD *)(a1 + 18936) = 0;
  *(_QWORD *)(a1 + 19008) = 0;
  *(_OWORD *)(a1 + 24768) = 0u;
  *(_QWORD *)(a1 + 27872) = glgCreateProcessor();
  gleLLVMInit(a1);
  v12 = gleAllocVertexMachine(a1, 36);
  if ((_DWORD)v12)
    goto LABEL_11;
  v12 = gleAllocMaterials(a1);
  if ((_DWORD)v12)
    goto LABEL_11;
  gleShareEnableHashTable(a1);
  *(_QWORD *)(a1 + 28840) = 0x20000000000000;
  *(_QWORD *)(a1 + 28912) = a1 + 28888;
  *(_QWORD *)(a1 + 28904) = a1 + 28888;
  *(_QWORD *)(a1 + 28896) = a1 + 28888;
  *(_QWORD *)(a1 + 28888) = a1 + 28888;
  *(_QWORD *)(a1 + 28920) = 0;
  *(_QWORD *)(a1 + 28936) = 0;
  *(_QWORD *)(a1 + 28928) = 0;
  *(_OWORD *)(a1 + 28848) = 0u;
  *(_OWORD *)(a1 + 28864) = 0u;
  *(_QWORD *)(a1 + 28880) = 0;
  gleInitConstants(a1);
  v14 = malloc_type_malloc(0x2F00uLL, 0x577B5147uLL);
  if (!v14)
    goto LABEL_25;
  *(_QWORD *)(a1 + 19288) = v14;
  __CFSetLastAllocationEventName();
  if (!*(_QWORD *)(a1 + 19288))
  {
    v12 = 0;
LABEL_11:
    gleTerminateContext(a1);
    return v12;
  }
  v15 = malloc_type_malloc(0x10uLL, 0x577B5147uLL);
  if (!v15)
LABEL_25:
    abort();
  *(_QWORD *)(a1 + 29520) = v15;
  v15[2] = 0;
  *(_QWORD *)v15 = 0;
  *v2 = vdupq_n_s32(0xBFEFFBFE);
  v2[1].i32[0] = -1074791426;
  memset_pattern16((void *)(a1 + 29736), &unk_21B9A5020, 0x20uLL);
  *(_DWORD *)(v3 + 7) = 257;
  v16 = *(unsigned __int8 *)(v3 + 26);
  if (*(_BYTE *)(v3 + 26))
  {
    v17 = 0;
    v18 = 0;
    v19 = (_BYTE *)(v3 + 159);
    v20 = -1;
    do
    {
      v17 |= *v19;
      v21 = *(_WORD *)(v19 - 75);
      v18 |= v21;
      v20 &= v21;
      v19 += 1672;
      --v16;
    }
    while (v16);
    *(_BYTE *)(v3 + 10) = v17;
    v22 = v20 & 0xFB10 | v18 & 0x4EFu;
  }
  else
  {
    LOWORD(v22) = -1264;
  }
  *(_WORD *)(*(_QWORD *)(a1 + 19296) + 346) = v22;
  *(_QWORD *)(a1 + 18992) = a1 + 29640;
  *v4 = 0;
  v4[14] = 0;
  gleInitGLDState(a1 + 2272);
  *v5 = 1;
  *(_QWORD *)(a1 + 29836) = 0;
  *(_WORD *)(a1 + 29844) = 0;
  if (*(unsigned __int8 *)(v3 + 31) - 3 <= 1)
    v5[181] = 1;
  gleInitGLIState(a1);
  *(_OWORD *)(a1 + 1520) = 0u;
  *(_QWORD *)(a1 + 1536) = 0xE800000000000000;
  *(_QWORD *)(a1 + 1544) = 0x7807000001000000;
  *(_OWORD *)(a1 + 2192) = 0u;
  *(_QWORD *)(a1 + 2208) = 0xFFFFFE00000000;
  *(_QWORD *)(a1 + 2216) = 0x89D8E67F00000000;
  v2[5].i32[1] = 0x20000000;
  gleSetBaseTCLState(a1);
  *(_OWORD *)(a1 + 1664) = 0u;
  *(_OWORD *)(a1 + 1648) = 0u;
  *(_OWORD *)(a1 + 1632) = 0u;
  *(_OWORD *)(a1 + 1616) = 0u;
  *(_OWORD *)(a1 + 1600) = 0u;
  *(_OWORD *)(a1 + 1584) = 0u;
  *(_OWORD *)(a1 + 1568) = 0u;
  *(_OWORD *)(a1 + 1552) = 0u;
  *(_OWORD *)(a1 + 1680) = 0u;
  *(_OWORD *)(a1 + 1696) = 0u;
  *(_OWORD *)(a1 + 1712) = 0u;
  *(_OWORD *)(a1 + 1728) = 0u;
  *(_OWORD *)(a1 + 1744) = 0u;
  *(_OWORD *)(a1 + 1760) = 0u;
  *(_OWORD *)(a1 + 1776) = 0u;
  *(_OWORD *)(a1 + 1792) = 0u;
  *(_OWORD *)(a1 + 1808) = 0u;
  *(_OWORD *)(a1 + 1824) = 0u;
  *(_OWORD *)(a1 + 1840) = 0u;
  *(_OWORD *)(a1 + 1856) = 0u;
  *(_OWORD *)(a1 + 1872) = 0u;
  *(_OWORD *)(a1 + 1888) = 0u;
  *(_OWORD *)(a1 + 1904) = 0u;
  *(_OWORD *)(a1 + 1920) = 0u;
  *(_OWORD *)(a1 + 2048) = 0u;
  *(_OWORD *)(a1 + 2032) = 0u;
  *(_OWORD *)(a1 + 2016) = 0u;
  *(_OWORD *)(a1 + 2000) = 0u;
  *(_OWORD *)(a1 + 1984) = 0u;
  *(_OWORD *)(a1 + 1968) = 0u;
  *(_OWORD *)(a1 + 1952) = 0u;
  *(_OWORD *)(a1 + 1936) = 0u;
  *(_OWORD *)(a1 + 2064) = 0u;
  *(_OWORD *)(a1 + 2080) = 0u;
  *(_OWORD *)(a1 + 2096) = 0u;
  *(_OWORD *)(a1 + 2112) = 0u;
  *(_OWORD *)(a1 + 2128) = 0u;
  *(_OWORD *)(a1 + 2144) = 0u;
  *(_OWORD *)(a1 + 2160) = 0u;
  *(_OWORD *)(a1 + 2176) = 0u;
  *(_BYTE *)(v3 + 35) = 0;
  gleInitDerivedState(a1);
  gleInitTextureState(a1);
  gleInitShaderProgramState(a1);
  gleInitHashMachine((_QWORD *)(a1 + 26352));
  gleInitVertexArrayState(a1);
  gleInitPipelineProgramState(a1);
  gleInitBufferState(a1);
  gleInitHashMachine((_QWORD *)(a1 + 25872));
  gleInitQueryMachine(a1);
  gleInitTransformFeedback(a1);
  gleInitDrawCopyPixelsObject(a1);
  gleInitBitmapObject(a1);
  gleInitAccumObject(a1);
  gleUpdateState((int8x16_t *)a1);
  v2[3].i32[2] = 0;
  *(_QWORD *)(a1 + 29816) = 0;
  v2[6].i32[3] = 0;
  *(_BYTE *)(v3 + 33) = 0;
  *(_WORD *)v3 = 0;
  *(_BYTE *)(v3 + 2) = 0;
  *(_OWORD *)(a1 + 19168) = 0u;
  *(_OWORD *)(a1 + 19184) = 0u;
  *(_OWORD *)(a1 + 19200) = 0u;
  *(_BYTE *)(v3 + 3) = *(_BYTE *)(v3 + 13) == 0;
  bzero((void *)(a1 + 26448), 0x368uLL);
  return 0;
}

uint64_t gleAllocVertexMachine(uint64_t a1, int a2)
{
  uint64_t v5;
  uint64_t v6;
  int32x4_t *v7;
  int32x4_t *v8;
  int32x4_t v9;
  uint64_t i64;
  uint64_t v11;
  unint64_t v12;
  int32x4_t v13;

  v5 = a2 + 12;
  v6 = (int)v5 + (uint64_t)a2;
  v7 = (int32x4_t *)malloc_type_malloc(656 * (int)v6 + 3840, 0x577B5147uLL);
  if (!v7)
    abort();
  v8 = v7;
  __CFSetLastAllocationEventName();
  *(_DWORD *)(a1 + 26120) = a2;
  *(_QWORD *)(a1 + 26000) = v8 + 80;
  i64 = (uint64_t)v8[40 * a2 + 80].i64;
  *(_QWORD *)(a1 + 26024) = i64;
  *(_QWORD *)(a1 + 26032) = &v8[40 * v5 + 80];
  v11 = (uint64_t)v8[40 * v6 + 240].i64;
  *(_QWORD *)(a1 + 26088) = v11;
  *(_QWORD *)(a1 + 26096) = v11 + 8 * v6;
  *(_QWORD *)(a1 + 26008) = v8 + 80;
  *(_QWORD *)(a1 + 26016) = i64;
  *(_DWORD *)(a1 + 26104) = 0;
  *(_QWORD *)(a1 + 26112) = 0;
  *(_OWORD *)(a1 + 26056) = 0u;
  *(_OWORD *)(a1 + 26072) = 0u;
  v12 = (unint64_t)&v8[40 * v6 + 80];
  if ((unint64_t)v8 < v12)
  {
    v9.i64[0] = *(_QWORD *)(a1 + 288);
    v13 = vzip1q_s32(v9, v9);
    v13.i32[2] = v9.i32[0];
    do
    {
      v8[6] = v13;
      v8 += 40;
    }
    while ((unint64_t)v8 < v12);
  }
  return 0;
}

uint64_t gleAllocMaterials(uint64_t a1)
{
  *(_QWORD *)(a1 + 1424) = a1 + 13824;
  *(_DWORD *)(a1 + 14340) = 0;
  *(_QWORD *)(a1 + 14332) = 0;
  *(_QWORD *)(a1 + 14324) = 0;
  *(_QWORD *)(a1 + 1432) = a1 + 14352;
  *(_DWORD *)(a1 + 14868) = 0;
  *(_QWORD *)(a1 + 14860) = 0;
  *(_QWORD *)(a1 + 14852) = 0;
  *(_QWORD *)(a1 + 1440) = 0;
  return 0;
}

uint64_t gleShareEnableHashTable(uint64_t result)
{
  *(_QWORD *)(result + 19304) = gle_enable_hash_table[*(unsigned __int8 *)(result + 32501)];
  return result;
}

uint64_t gleInitConstants(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  __int128 v4;
  uint64_t result;
  uint64_t (*v6)(float, float);
  uint64_t v7;
  uint64_t (*v8)(_QWORD, _QWORD, _QWORD);
  uint64_t v9;
  mach_timebase_info info;

  info = 0;
  mach_timebase_info(&info);
  LODWORD(v2) = info.denom;
  LODWORD(v3) = info.numer;
  *(double *)(a1 + 432) = (double)v2 / (double)v3;
  *(_OWORD *)(a1 + 272) = xmmword_21B9A4F70;
  *(_OWORD *)(a1 + 288) = xmmword_21B9A4F80;
  *(_OWORD *)(a1 + 304) = xmmword_21B9A4F90;
  *(int32x4_t *)(a1 + 320) = vdupq_n_s32(0x3C010204u);
  *(_QWORD *)&v4 = 0x3000000030000000;
  *((_QWORD *)&v4 + 1) = 0x3000000030000000;
  *(int32x4_t *)(a1 + 336) = vdupq_n_s32(0x38000100u);
  *(_OWORD *)(a1 + 352) = v4;
  *(int32x4_t *)(a1 + 368) = vdupq_n_s32(0x3B808081u);
  *(int32x4_t *)(a1 + 384) = vdupq_n_s32(0x37800080u);
  *(_OWORD *)(a1 + 400) = v4;
  *(int32x4_t *)(a1 + 416) = vdupq_n_s32(0x37800000u);
  *(_QWORD *)(a1 + 440) = gleFlushAndSubmit;
  *(_QWORD *)(a1 + 448) = gleNoop;
  result = glvmGetConstants();
  *(_QWORD *)(a1 + 456) = result;
  *(_QWORD *)(a1 + 464) = gleClipPoints;
  *(_QWORD *)(a1 + 624) = gleClipPoints;
  *(_QWORD *)(a1 + 632) = gleClipLines;
  *(_QWORD *)(a1 + 472) = gleClipLines;
  *(_QWORD *)(a1 + 480) = gleClipPoly;
  *(_QWORD *)(a1 + 640) = gleClipPoly;
  *(_QWORD *)(a1 + 648) = gleClipPointsPlane;
  *(_QWORD *)(a1 + 488) = gleClipPointsPlane;
  *(_QWORD *)(a1 + 496) = gleClipLinesPlane;
  *(_QWORD *)(a1 + 656) = gleClipLinesPlane;
  *(_QWORD *)(a1 + 664) = gleClipPolyPlane;
  *(_QWORD *)(a1 + 504) = gleClipPolyPlane;
  *(_QWORD *)(a1 + 512) = gleCullPolygonStack;
  *(_QWORD *)(a1 + 672) = gleCullPolygonStack;
  *(_QWORD *)(a1 + 520) = gleCullPolygonPtrStack;
  *(_QWORD *)(a1 + 680) = gleCullPolygonPtrStack;
  *(_QWORD *)(a1 + 528) = gleCullTriangle;
  *(_QWORD *)(a1 + 688) = gleCullTriangle;
  *(_QWORD *)(a1 + 536) = gleCullQuad;
  *(_QWORD *)(a1 + 696) = gleCullQuad;
  *(_QWORD *)(a1 + 544) = gleVPFlipColors;
  *(_QWORD *)(a1 + 704) = gleVPFlipColors;
  v6 = MEMORY[0x24BDAF690];
  *(_QWORD *)(a1 + 560) = MEMORY[0x24BDAF690];
  *(_QWORD *)(a1 + 720) = v6;
  v7 = MEMORY[0x24BDADDC0];
  *(_QWORD *)(a1 + 568) = MEMORY[0x24BDADDC0];
  *(_QWORD *)(a1 + 728) = v7;
  v8 = MEMORY[0x24BDADFF0];
  *(_QWORD *)(a1 + 576) = MEMORY[0x24BDADFF0];
  *(_QWORD *)(a1 + 736) = v8;
  v9 = MEMORY[0x24BDADDF0];
  *(_QWORD *)(a1 + 584) = MEMORY[0x24BDADDF0];
  *(_QWORD *)(a1 + 744) = v9;
  return result;
}

double gleInitGLDState(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  _OWORD *v19;
  __int128 v21;
  _QWORD *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  _WORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int32x2_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int32x2_t v39;
  _QWORD *v40;
  _DWORD *v41;
  double result;

  v2 = 0;
  v3 = a1 + 15712;
  v4 = (_BYTE *)(a1 + 15444);
  v5 = a1 + 12904;
  v6 = a1 + 10244;
  *(_WORD *)(a1 + 4) = 0;
  *(_QWORD *)(a1 + 15544) = 0;
  *(_DWORD *)(a1 + 6928) = 1065353216;
  *(_DWORD *)(a1 + 6932) = 393217;
  *(_DWORD *)(a1 + 6936) = 0;
  do
  {
    v7 = (_OWORD *)(a1 + 6160 + v2);
    v7[2] = xmmword_21B9A4150;
    v7[3] = xmmword_21B9A4150;
    *v7 = xmmword_21B9A4150;
    v7[1] = xmmword_21B9A4150;
    v2 += 64;
  }
  while (v2 != 256);
  *(_DWORD *)(a1 + 6184) = 1065353216;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(a1 + 6192) = _D0;
  *(_DWORD *)(a1 + 6200) = 1065353216;
  *(_DWORD *)(a1 + 6224) = 1065353216;
  *(_DWORD *)(a1 + 6236) = 0;
  *(_DWORD *)(a1 + 6256) = 1065353216;
  v13 = -512;
  do
  {
    v14 = a1 + v13;
    *(_OWORD *)(v14 + 6928) = xmmword_21B9A4150;
    *(_OWORD *)(v14 + 6944) = 0uLL;
    v13 += 32;
  }
  while (v13);
  *(_BYTE *)(a1 + 12734) = 0;
  *(_WORD *)(a1 + 12732) = 519;
  *(_DWORD *)(a1 + 12728) = 0;
  *(_QWORD *)(a1 + 12736) = 0x100000001;
  *(_QWORD *)(a1 + 12840) = 0;
  *(_QWORD *)(a1 + 12832) = 0;
  *(_DWORD *)(a1 + 12744) = -2147057658;
  v15 = a1 + 12758;
  v16 = 7;
  *(_WORD *)(a1 + 12848) = 0;
  do
  {
    *(_QWORD *)(v15 - 10) = 0x100000001;
    *(_DWORD *)(v15 - 2) = -2147057658;
    v15 += 12;
    --v16;
  }
  while (v16);
  *(_OWORD *)(a1 + 12880) = 0u;
  *(_OWORD *)(a1 + 12864) = 0u;
  *(_QWORD *)(a1 + 12856) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 12896) = 0;
  *(_WORD *)(a1 + 12928) = 513;
  *(_WORD *)(a1 + 12932) = 0;
  *(_BYTE *)(a1 + 12934) = 0;
  *(_QWORD *)(a1 + 12936) = 0;
  *(_QWORD *)(a1 + 12944) = 0x3FF0000000000000;
  *(_BYTE *)(a1 + 12952) = 1;
  *(_OWORD *)(a1 + 12956) = 0u;
  *(_OWORD *)(a1 + 12972) = xmmword_21B9A5B70;
  *(_OWORD *)(a1 + 12988) = xmmword_21B9A5B80;
  *(_QWORD *)(a1 + 13004) = 0x855C84520800;
  *(_QWORD *)&v17 = 0x1100110011001100;
  *((_QWORD *)&v17 + 1) = 0x1100110011001100;
  *(_OWORD *)(a1 + 13012) = v17;
  *(_DWORD *)(a1 + 13028) = 285217024;
  *(_QWORD *)(a1 + 13032) = 0x13F800000;
  *(_QWORD *)(a1 + 13040) = 0x15030000FFFFLL;
  *(_QWORD *)(a1 + 13048) = -1;
  *(_QWORD *)(a1 + 13056) = -1;
  *(_DWORD *)(a1 + 13064) = -1;
  *(_BYTE *)(a1 + 13068) = 1;
  *(_QWORD *)(a1 + 16168) = _D0;
  *(_QWORD *)(a1 + 16192) = 0;
  *(_OWORD *)(a1 + 16176) = 0u;
  *(_QWORD *)(a1 + 16200) = 0x400000000;
  *(_OWORD *)(a1 + 16208) = 0u;
  *(_OWORD *)(a1 + 16224) = 0u;
  BYTE1(v17) = 0;
  BYTE3(v17) = 0;
  BYTE5(v17) = 0;
  BYTE7(v17) = 0;
  *(_QWORD *)(a1 + 16288) = v17;
  *(_QWORD *)(a1 + 16240) = 4;
  *(_OWORD *)(a1 + 16248) = xmmword_21B9A5B90;
  *(_OWORD *)(a1 + 16264) = xmmword_21B9A5B90;
  *(_QWORD *)(a1 + 16280) = 0x3F80000000000000;
  *(_DWORD *)(a1 + 16888) = 0;
  *(_QWORD *)(a1 + 16296) = &gle_default_pix_map_i;
  *(_QWORD *)(a1 + 16368) = &gle_default_pix_map_i;
  *(_QWORD *)(a1 + 16304) = &gle_default_pix_map_f;
  *(_QWORD *)(a1 + 16312) = &gle_default_pix_map_f;
  *(_QWORD *)&v18 = 0x100000001;
  *((_QWORD *)&v18 + 1) = 0x100000001;
  *(_QWORD *)(a1 + 16320) = &gle_default_pix_map_f;
  *(_QWORD *)(a1 + 16328) = &gle_default_pix_map_f;
  *(_QWORD *)(a1 + 16336) = &gle_default_pix_map_f;
  *(_QWORD *)(a1 + 16344) = &gle_default_pix_map_f;
  *(_OWORD *)(a1 + 16376) = v18;
  *(_OWORD *)(a1 + 16392) = v18;
  *(_QWORD *)(a1 + 16352) = &gle_default_pix_map_f;
  *(_QWORD *)(a1 + 16360) = &gle_default_pix_map_f;
  *(_QWORD *)(a1 + 16408) = 0x100000001;
  *(_OWORD *)(a1 + 16480) = xmmword_21B9A5BA0;
  *(_OWORD *)(a1 + 16496) = xmmword_21B9A5BA0;
  *(_OWORD *)(a1 + 16552) = xmmword_21B9A5BA0;
  *(_OWORD *)(a1 + 16568) = xmmword_21B9A5BA0;
  *(_OWORD *)(a1 + 16624) = xmmword_21B9A5BA0;
  *(_OWORD *)(a1 + 16640) = xmmword_21B9A5BA0;
  *(_OWORD *)(a1 + 16752) = xmmword_21B9A5BA0;
  *(_OWORD *)(a1 + 16768) = xmmword_21B9A5BA0;
  *(_OWORD *)(a1 + 16688) = xmmword_21B9A5BA0;
  *(_OWORD *)(a1 + 16704) = xmmword_21B9A5BA0;
  *(_OWORD *)(a1 + 16784) = xmmword_21B9A5BA0;
  *(_OWORD *)(a1 + 16800) = xmmword_21B9A5BA0;
  *(_OWORD *)(a1 + 16816) = xmmword_21B9A5BA0;
  *(_OWORD *)(a1 + 16832) = xmmword_21B9A5BA0;
  *(_OWORD *)(a1 + 16848) = xmmword_21B9A5BA0;
  *(_OWORD *)(a1 + 16864) = xmmword_21B9A5BA0;
  *(_DWORD *)(a1 + 16880) = 0;
  *(_DWORD *)(a1 + 16512) = 419987478;
  *(_DWORD *)(a1 + 16584) = 419987478;
  *(_DWORD *)(a1 + 16656) = 419987478;
  *(_OWORD *)(a1 + 16464) = 0u;
  *(_OWORD *)(a1 + 16536) = 0u;
  *(_OWORD *)(a1 + 16608) = 0u;
  *(_QWORD *)(a1 + 16528) = v17;
  *(_QWORD *)(a1 + 16600) = v17;
  *(_QWORD *)(a1 + 16672) = v17;
  *(_DWORD *)(a1 + 16744) = 0;
  *(_WORD *)(a1 + 16748) = 6408;
  *(_BYTE *)(a1 + 16750) = 0;
  *(_QWORD *)(a1 + 16680) = a1 + 7216;
  v19 = *(_OWORD **)(a1 + 16720);
  __asm { FMOV            V3.4S, #1.0 }
  *v19 = _Q3;
  v19[1] = 0u;
  *(_BYTE *)(a1 + 16730) = 0;
  *(_WORD *)(a1 + 16728) = 6408;
  *(_OWORD *)(a1 + 13072) = xmmword_21B9A5B70;
  *(_OWORD *)(a1 + 13088) = xmmword_21B9A5BB0;
  *(_DWORD *)(a1 + 13112) = 0;
  *(_DWORD *)(a1 + 13108) = 36002;
  *(_DWORD *)(a1 + 13104) = 0;
  *(_QWORD *)&v21 = -1;
  *((_QWORD *)&v21 + 1) = -1;
  *(_OWORD *)(a1 + 13116) = v21;
  *(_OWORD *)(a1 + 13132) = v21;
  *(_OWORD *)(a1 + 13148) = v21;
  *(_OWORD *)(a1 + 13164) = v21;
  *(_OWORD *)(a1 + 13180) = v21;
  *(_OWORD *)(a1 + 13196) = v21;
  *(_OWORD *)(a1 + 13212) = v21;
  *(_OWORD *)(a1 + 13228) = v21;
  *(_QWORD *)(a1 + 13244) = 0;
  *(_BYTE *)(a1 + 13266) = 1;
  *(_QWORD *)(a1 + 13252) = 0x40509011B021B02;
  *(_WORD *)(a1 + 13264) = 0;
  *(_DWORD *)(a1 + 13260) = 0;
  *(_OWORD *)(a1 + 13268) = 0u;
  *(_BYTE *)(a1 + 13284) = 0;
  *(_QWORD *)(a1 + 13301) = 0;
  *(_OWORD *)(a1 + 13288) = 0u;
  *(_DWORD *)(a1 + 13320) = 7425;
  *(_DWORD *)(a1 + 15432) = 36430;
  v22 = (_QWORD *)(a1 + 13332);
  v23 = 3;
  do
  {
    *(v22 - 1) = 0xFFFFFFFFLL;
    *v22 = 0x1E001E001E000207;
    v22 += 2;
    --v23;
  }
  while (v23);
  *(_DWORD *)(a1 + 13372) = 0;
  *(_QWORD *)(a1 + 15400) = -3229614080;
  *(_BYTE *)(a1 + 15408) = 1;
  *(_BYTE *)(a1 + 15415) = 0;
  *(_DWORD *)(a1 + 15416) = 0;
  *(_DWORD *)(a1 + 15409) = 0;
  *(_BYTE *)(a1 + 15413) = 0;
  *(_QWORD *)&v24 = -1;
  *((_QWORD *)&v24 + 1) = -1;
  *(_OWORD *)(a1 + 12624) = v24;
  *(_OWORD *)(a1 + 12640) = v24;
  *(_OWORD *)(a1 + 12656) = v24;
  *(_OWORD *)(a1 + 12672) = v24;
  *(_OWORD *)(a1 + 12688) = v24;
  *(_OWORD *)(a1 + 12704) = v24;
  *(_DWORD *)(a1 + 12720) = 0;
  v25 = a1 + 13416;
  v26 = -608;
  *(_BYTE *)(a1 + 12724) = 0;
  do
  {
    v27 = (_WORD *)(v25 + v26);
    *(_OWORD *)(v25 + v26 + 612) = xmmword_21B9A5BC0;
    *(_QWORD *)(v25 + v26 + 628) = 0x302030203000300;
    v27[318] = 770;
    v27[319] = 770;
    v28 = a1 + v26;
    *(_QWORD *)(v28 + 14056) = _D0;
    v27[304] = 8448;
    *(_DWORD *)(v28 + 14020) = 0;
    *(_OWORD *)(v25 + v26 + 572) = 0uLL;
    v26 += 76;
  }
  while (v26);
  v29 = 0;
  *(_OWORD *)(a1 + 14084) = 0u;
  *(_OWORD *)(a1 + 14100) = 0u;
  *(_OWORD *)(a1 + 14052) = 0u;
  *(_OWORD *)(a1 + 14068) = 0u;
  *(_OWORD *)(a1 + 14020) = 0u;
  *(_OWORD *)(a1 + 14036) = 0u;
  *(_OWORD *)(a1 + 13988) = 0u;
  *(_OWORD *)(a1 + 14004) = 0u;
  v30 = a1 + 14188;
  do
  {
    v31 = v30 + v29;
    *(_WORD *)(v31 - 72) = 9216;
    *(_OWORD *)(v31 - 68) = xmmword_21B9A51B0;
    *(_OWORD *)(v31 - 52) = xmmword_21B9A51B0;
    v32 = a1 + v29;
    *(_WORD *)(v31 - 36) = 9216;
    *(_OWORD *)(v31 - 32) = xmmword_21B9A5190;
    *(_OWORD *)(v31 - 16) = xmmword_21B9A5190;
    *(_WORD *)(v30 + v29) = 9216;
    *(_OWORD *)(v32 + 14192) = 0uLL;
    *(_OWORD *)(v32 + 14208) = 0uLL;
    *(_WORD *)(v31 + 36) = 9216;
    *(_DWORD *)(v32 + 14260) = 0;
    *(_OWORD *)(v31 + 40) = 0uLL;
    v29 += 148;
    *(_OWORD *)(v31 + 56) = 0uLL;
  }
  while (v29 != 1184);
  v33 = a1 + 7088;
  *(_BYTE *)(a1 + 15440) = 1;
  *(_WORD *)v6 = 0;
  *(_DWORD *)(a1 + 10240) = 1065353216;
  *(_BYTE *)(a1 + 10246) = 0;
  *(_QWORD *)(a1 + 10248) = 0;
  gleMakeIdentityMatrix(a1 + 10160);
  v34 = 24;
  do
  {
    gleMakeIdentityMatrix(v33);
    gleMakeIdentityMatrix(v33 + 1536);
    v33 += 64;
    --v34;
  }
  while (v34);
  v36 = 0;
  *(_OWORD *)(a1 + 10224) = xmmword_21B9A5BD0;
  *(_DWORD *)(a1 + 12618) = 0;
  *(_DWORD *)(a1 + 12608) = 0;
  *(_BYTE *)(a1 + 12622) = 0;
  *(_DWORD *)(a1 + 15396) = 0;
  *(_OWORD *)(a1 + 15300) = 0u;
  *(_OWORD *)(a1 + 15316) = 0u;
  *(_OWORD *)(a1 + 15332) = 0u;
  *(_OWORD *)(a1 + 15348) = 0u;
  *(_OWORD *)(a1 + 15364) = 0u;
  *(_OWORD *)(a1 + 15380) = 0u;
  *(_DWORD *)(v6 + 2368) = 369230856;
  *(_WORD *)(v6 + 2372) = -32263;
  v37 = a1 + 10272;
  *(_OWORD *)(a1 + 10256) = xmmword_21B9A5BE0;
  do
  {
    v38 = v37 + v36;
    *(_OWORD *)(v37 + v36) = xmmword_21B9A4150;
    if (v36)
      *(float *)v35.i32 = 0.0;
    else
      *(float *)v35.i32 = 1.0;
    v39 = vdup_lane_s32(v35, 0);
    v40 = (_QWORD *)(a1 + 10412 + v36);
    *(int32x2_t *)((char *)v40 - 124) = v39;
    v41 = (_DWORD *)(a1 + v36);
    v41[2574] = v35.i32[0];
    v41[2575] = 1065353216;
    *(int32x2_t *)((char *)v40 - 108) = v39;
    v41[2578] = v35.i32[0];
    *(_OWORD *)(v38 + 44) = xmmword_21B9A5BB0;
    *(_OWORD *)(v38 + 60) = xmmword_21B9A5BF0;
    *(_OWORD *)(v38 + 76) = xmmword_21B9A5C00;
    *(_OWORD *)(v38 + 92) = xmmword_21B9A4150;
    *(_OWORD *)(v38 + 108) = xmmword_21B9A5BF0;
    *(_OWORD *)(v38 + 124) = xmmword_21B9A4150;
    *v40 = 0x433400003F800000;
    v36 += 160;
  }
  while (v36 != 1280);
  *(_OWORD *)(a1 + 6944) = xmmword_21B9A5C10;
  *(_OWORD *)(a1 + 6960) = xmmword_21B9A5C20;
  *(_OWORD *)(a1 + 6976) = xmmword_21B9A5C10;
  *(_OWORD *)(a1 + 6992) = xmmword_21B9A5C20;
  *(_OWORD *)(a1 + 7024) = 0u;
  *(_OWORD *)(a1 + 7040) = 0u;
  *(_OWORD *)(a1 + 7008) = xmmword_21B9A5C30;
  *(_OWORD *)(a1 + 7056) = xmmword_21B9A5C40;
  *(_OWORD *)(a1 + 11552) = xmmword_21B9A5BE0;
  *(_OWORD *)(a1 + 11568) = xmmword_21B9A5C50;
  *(_OWORD *)(a1 + 11584) = xmmword_21B9A4150;
  *(_OWORD *)(a1 + 11600) = xmmword_21B9A4150;
  *(_OWORD *)(a1 + 11616) = xmmword_21B9A4150;
  *(_OWORD *)(a1 + 12080) = xmmword_21B9A5BE0;
  *(_OWORD *)(a1 + 12096) = xmmword_21B9A5C50;
  *(_OWORD *)(a1 + 12112) = xmmword_21B9A4150;
  *(_OWORD *)(a1 + 12128) = xmmword_21B9A4150;
  *(_OWORD *)(a1 + 12144) = xmmword_21B9A4150;
  *(_BYTE *)(v5 + 2516) = 0;
  *(_QWORD *)(a1 + 15560) = a1 + 16;
  *(_QWORD *)(a1 + 15624) = a1 + 4112;
  *(_QWORD *)(a1 + 15608) = 0;
  *(_QWORD *)(a1 + 15424) = 0x101000000000001;
  *(_BYTE *)v3 = 0;
  *(_OWORD *)(a1 + 15720) = 0u;
  *(_OWORD *)(a1 + 15736) = 0u;
  *(_OWORD *)(a1 + 15752) = 0u;
  *(_OWORD *)(a1 + 15768) = 0u;
  *(_WORD *)(v3 + 2) = -1;
  *(_DWORD *)v5 = 16842752;
  *(_OWORD *)(a1 + 12908) = 0u;
  *(_BYTE *)(v5 + 20) = 0;
  *(_WORD *)(v5 + 2532) = 0;
  v4[8] = 3;
  memset_pattern16((void *)(a1 + 15456), &unk_21B9A5180, 0x10uLL);
  memset_pattern16((void *)(a1 + 15472), &unk_21B9A5180, 8uLL);
  *(_DWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 12) = 0;
  *v4 = 0;
  *(_DWORD *)(a1 + 15448) = -1;
  result = 0.0;
  *(_OWORD *)(a1 + 15632) = 0u;
  *(_OWORD *)(a1 + 15648) = 0u;
  *(_OWORD *)(a1 + 15664) = 0u;
  *(_OWORD *)(a1 + 15680) = 0u;
  *(_OWORD *)(a1 + 15696) = 0u;
  return result;
}

uint64_t gleMakeIdentityMatrix(uint64_t result)
{
  *(_DWORD *)result = 1065353216;
  *(_QWORD *)(result + 12) = 0;
  *(_QWORD *)(result + 4) = 0;
  *(_DWORD *)(result + 20) = 1065353216;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_DWORD *)(result + 40) = 1065353216;
  *(_QWORD *)(result + 52) = 0;
  *(_QWORD *)(result + 44) = 0;
  *(_DWORD *)(result + 60) = 1065353216;
  return result;
}

double gleInitGLIState(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  unsigned int v12;
  __int16 v13;
  char *v14;
  double result;

  v2 = 0;
  v3 = a1 + 29596;
  *(_QWORD *)(a1 + 20768) = 0;
  *(_QWORD *)(a1 + 29596) = 1132494848;
  *(_QWORD *)(a1 + 2256) = 0;
  v4 = *(_QWORD *)(a1 + 26000);
  *(_DWORD *)(v4 - 1204) = 1065353216;
  *(_DWORD *)(a1 + 2264) = 0;
  do
  {
    v5 = (_OWORD *)(v4 - 1184 + v2);
    v5[2] = xmmword_21B9A4150;
    v5[3] = xmmword_21B9A4150;
    *v5 = xmmword_21B9A4150;
    v5[1] = xmmword_21B9A4150;
    v2 += 64;
  }
  while (v2 != 256);
  v6 = v4 - 1280;
  *(_DWORD *)(v6 + 120) = 1065353216;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(v6 + 128) = _D0;
  *(_DWORD *)(v6 + 136) = 1065353216;
  *(_DWORD *)(v6 + 160) = 1065353216;
  *(_DWORD *)(v6 + 172) = 0;
  *(_DWORD *)(v6 + 48) = 1065353216;
  *(_OWORD *)(a1 + 29604) = xmmword_21B9A5C60;
  *(int32x2_t *)(a1 + 29620) = vdup_n_s32(0x43808000u);
  *(_DWORD *)(a1 + 29768) = 1;
  *(_QWORD *)(a1 + 19960) = 0x60000000000;
  *(_BYTE *)(a1 + 1452) = 0;
  *(_QWORD *)(a1 + 1488) = gleAllocateMaterial;
  *(_QWORD *)(a1 + 1496) = gleAllocateMaterial;
  *(_QWORD *)(a1 + 1504) = gleUpdateLightRGBASums;
  *(_QWORD *)(a1 + 1512) = gleUpdateLightRGBASums;
  *(_DWORD *)(a1 + 20484) = 4;
  *(_DWORD *)(a1 + 20384) = 4352;
  *(_QWORD *)(a1 + 19992) = &gleESStackOffsets;
  *(_OWORD *)(a1 + 20080) = 0u;
  *(_OWORD *)(a1 + 20064) = 0u;
  *(_OWORD *)(a1 + 20048) = 0u;
  *(_OWORD *)(a1 + 20032) = 0u;
  *(_OWORD *)(a1 + 20016) = 0u;
  *(_OWORD *)(a1 + 20000) = 0u;
  *(_BYTE *)(a1 + 20495) = 0;
  *(_WORD *)(a1 + 29830) = 7168;
  *(_DWORD *)(a1 + 19928) = 0;
  *(_QWORD *)(a1 + 19912) = a1 + 19400;
  *(_DWORD *)(a1 + 23768) = 0;
  *(_QWORD *)(a1 + 23784) = 0;
  *(_WORD *)(a1 + 23772) = 0;
  *(_OWORD *)(a1 + 23808) = 0u;
  *(_OWORD *)(a1 + 23824) = 0u;
  *(_OWORD *)(a1 + 23840) = 0u;
  *(_OWORD *)(a1 + 23856) = 0u;
  *(_OWORD *)(a1 + 23872) = 0u;
  *(_OWORD *)(a1 + 23888) = 0u;
  *(_OWORD *)(a1 + 23904) = 0u;
  *(_OWORD *)(a1 + 23920) = 0u;
  *(_WORD *)(a1 + 26340) = 0;
  *(_QWORD *)(a1 + 26296) = 0;
  *(_DWORD *)(a1 + 26328) = 0;
  *(_QWORD *)(a1 + 26332) = 5126;
  *(_WORD *)(a1 + 29708) = 1;
  v12 = *(unsigned __int8 *)(a1 + 32501) - 5;
  if (v12 >= 0xFFFFFFFE)
    v13 = 0;
  else
    v13 = -30435;
  *(_WORD *)(a1 + 29710) = v13;
  *(_WORD *)(a1 + 29712) = -30435;
  *(_BYTE *)(a1 + 29714) = 1;
  *(_WORD *)(a1 + 29832) = 0;
  *(_OWORD *)(a1 + 29672) = 0uLL;
  *(_OWORD *)(a1 + 29688) = 0uLL;
  *(_DWORD *)(a1 + 29704) = 0;
  *(_OWORD *)(a1 + 19216) = 0uLL;
  *(_BYTE *)(a1 + 29592) = 0;
  *(_OWORD *)(a1 + 29576) = 0uLL;
  *(_WORD *)(a1 + 19232) = 1;
  *(_BYTE *)(a1 + 19234) = 0;
  *(_BYTE *)(a1 + 32506) = 0;
  *(_QWORD *)(a1 + 29776) = 0x300000404;
  *(_DWORD *)(a1 + 29787) = 0;
  *(_DWORD *)(a1 + 29784) = 0;
  v14 = getenv("GL_FORCE_LLVM_IR_OUTPUT");
  if (v14 && *v14 == 49)
    *(_BYTE *)(v3 + 192) = 1;
  *(_BYTE *)(v3 + 2888) = v12 < 0xFFFFFFFE;
  *(_QWORD *)&result = 65793;
  *(_DWORD *)(v3 + 2889) = 65793;
  *(_WORD *)(v3 + 2893) = 0;
  *(_QWORD *)(a1 + 29000) = 0;
  *(_WORD *)(v3 + 2878) = -256;
  *(_BYTE *)(v3 + 2880) = -1;
  return result;
}

uint64_t gleInitDerivedState(uint64_t a1)
{
  uint64_t v2;
  unsigned __int16 *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char *v11;
  uint64_t result;
  int v13;
  int v14;
  uint64_t v15;
  float v16;
  int v17;
  int *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  __int16 v22;

  v2 = 0;
  v3 = (unsigned __int16 *)(a1 + 32493);
  v4 = a1 + 28660;
  *(_BYTE *)(a1 + 32482) = 0;
  v5 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 29032) + 101);
  *(_BYTE *)(a1 + 32481) = v5;
  *(_DWORD *)(a1 + 29796) = (v5 != 0) | 4;
  *(_OWORD *)(a1 + 27832) = 0u;
  *(_OWORD *)(a1 + 27856) = 0u;
  *(_QWORD *)(a1 + 20624) = a1 + 20496;
  *(_QWORD *)(a1 + 20760) = a1 + 20632;
  *(_BYTE *)(a1 + 28744) = 0;
  *(_BYTE *)(a1 + 32491) = 1;
  v6 = *(_QWORD *)(a1 + 26000) - 1280;
  *(_OWORD *)(v6 + 80) = xmmword_21B9A4150;
  *(_OWORD *)(v6 + 96) = xmmword_21B9A4150;
  *(_QWORD *)(v6 + 64) = 0;
  *(_DWORD *)(v6 + 72) = 0;
  *(_QWORD *)(v6 + 112) = 0;
  *(_DWORD *)(v6 + 120) = 1065353216;
  *(_DWORD *)(v6 + 180) = 1065353216;
  *(_DWORD *)v6 = 393472;
  *(_BYTE *)(a1 + 19968) = 0;
  *(_DWORD *)(a1 + 1448) = 0;
  *(_OWORD *)(a1 + 19944) = 0u;
  *(_WORD *)(*(_QWORD *)(a1 + 1424) + 496) = 63;
  *(_WORD *)(*(_QWORD *)(a1 + 1432) + 496) = 63;
  v7 = a1 + 15178;
  do
  {
    v8 = a1 + v2;
    *(_DWORD *)(v8 + 784) = -1082130432;
    *(_DWORD *)(v8 + 804) = 1065353216;
    *(_DWORD *)(a1 + v2 + 809) = 16842752;
    v2 += 80;
  }
  while (v2 != 640);
  *(_DWORD *)(a1 + 20488) = 18;
  *(_BYTE *)(a1 + 20494) = 0;
  *(_QWORD *)(a1 + 19976) = a1 + 9616;
  *(_QWORD *)(a1 + 19984) = a1 + 11152;
  *(_BYTE *)(a1 + 28748) = 1;
  *(_BYTE *)(a1 + 28750) = 2;
  *(_QWORD *)v4 = 0xFFFFFFFFLL;
  *(_WORD *)(a1 + 28668) = 0;
  *(_QWORD *)(a1 + 28648) = 0;
  *(_DWORD *)(a1 + 28656) = -1;
  *(_QWORD *)(a1 + 19920) = 0;
  *(_WORD *)(a1 + 19936) = 0;
  *(_DWORD *)(a1 + 19932) = 0;
  *(_OWORD *)(a1 + 19384) = 0u;
  *(_OWORD *)(a1 + 23792) = 0u;
  *(_QWORD *)(a1 + 26152) = gleSetVertexSubmitFunc;
  *(_QWORD *)(a1 + 26160) = gleSetVertexSubmitFunc;
  *(_QWORD *)(a1 + 26168) = gleSetVertexConvertFunc;
  *(_QWORD *)(a1 + 26176) = gleSetVertexConvertFunc;
  *(_QWORD *)(a1 + 26184) = gleSetVertexArrayFunc;
  *(_QWORD *)(a1 + 26192) = gleSetVertexArrayFunc;
  *(_QWORD *)(a1 + 28676) = 0;
  *(_QWORD *)(a1 + 26200) = gleSetVertexElemFunc;
  *(_QWORD *)(a1 + 26208) = gleSetVertexElemFunc;
  v9 = *(_QWORD *)(a1 + 448);
  *(_QWORD *)(a1 + 26144) = v9;
  *(_QWORD *)(a1 + 26136) = v9;
  *(_WORD *)(a1 + 26124) = 640;
  *(_QWORD *)(a1 + 26048) = 0;
  *(_QWORD *)(a1 + 26280) = 0;
  *(_QWORD *)(a1 + 26288) = 0;
  *(_QWORD *)(a1 + 27880) = gleSetEyeInterpFunc;
  *(_QWORD *)(a1 + 27888) = gleSetEyeInterpFunc;
  *(_QWORD *)(a1 + 27896) = gleSetClipInterpFunc;
  *(_QWORD *)(a1 + 27904) = gleSetClipInterpFunc;
  *(_QWORD *)(a1 + 27912) = gleSetFlatCopyFunc;
  *(_QWORD *)(a1 + 27920) = gleSetFlatCopyFunc;
  *(_OWORD *)(a1 + 28696) = xmmword_21B9A5BA0;
  *(_DWORD *)(a1 + 28712) = 1065353216;
  *(_BYTE *)(a1 + 32492) = 0;
  *(_QWORD *)(a1 + 28716) = 0;
  *(_QWORD *)(a1 + 28724) = 0;
  v10 = (*(unsigned __int16 *)(a1 + 32493) | (*(unsigned __int8 *)(a1 + 32495) << 16)) & 0xF46F00 | 0x18000;
  *v3 = *v3 & 0x6F00 | 0x8000;
  *(_BYTE *)(a1 + 32495) = BYTE2(v10);
  v11 = getenv("GL_LLVM_IR_DISABLE_NORETURN_ON_DISCARD");
  result = os_variant_has_internal_diagnostics();
  if ((result & 1) != 0)
  {
    if (!v11)
    {
      v13 = 0;
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  result = os_variant_has_internal_diagnostics();
  v13 = 0;
  if (v11 && (result & 1) != 0)
LABEL_8:
    v13 = (*v11 == 49) << 18;
LABEL_9:
  v14 = (*v3 | (*((unsigned __int8 *)v3 + 2) << 16)) & 0xFBD8FF | v13;
  *v3 = v14;
  *((_BYTE *)v3 + 2) = BYTE2(v14);
  v15 = *(_QWORD *)(a1 + 29032);
  v16 = *(float *)(v15 + 64);
  if (v16 < *(float *)(v15 + 72))
    v16 = *(float *)(v15 + 72);
  *(float *)(a1 + 15352) = v16;
  *((_BYTE *)v3 + 11) = 0;
  v17 = *(unsigned __int8 *)(v15 + 43);
  *(_BYTE *)(v4 + 3828) = v17;
  *(_BYTE *)(v4 + 3829) = v17;
  LOBYTE(v17) = v17 == 0;
  *(_BYTE *)v7 = v17;
  *(_BYTE *)(v7 + 1) = v17;
  *((_BYTE *)v3 + 9) = 0;
  *(_DWORD *)(v4 + 1144) = 2047;
  v18 = (int *)(v4 + 1148);
  v19 = *(_QWORD *)(a1 + 29480);
  if (*(_BYTE *)(v19 + 56))
    v20 = 257;
  else
    v20 = 1;
  *(_DWORD *)(v4 + 1148) = v20;
  if (*(_BYTE *)(v19 + 57))
    *v18 = v20 | 0x600;
  *(_DWORD *)(v4 + 1152) = 0;
  v21 = *(_QWORD *)(a1 + 28960);
  if (v21)
    v18 = (int *)(v21 + 552);
  *(_WORD *)(v7 + 164) = *(_WORD *)v18 & 0x7FF;
  v22 = *(unsigned __int8 *)(v15 + 101) == 0;
  *(_WORD *)(a1 + 2276) = v22;
  *(_WORD *)(v4 + 1174) = v22;
  return result;
}

_DWORD *gleInitTextureState(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  _DWORD *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;

  v2 = 0;
  v3 = (unsigned __int8 *)(a1 + 32496);
  v4 = a1 + 20776;
  do
  {
    result = gleCreateTextureObject(*(_QWORD *)(a1 + 19296), (unsigned __int16)v2 | 0x1000u, 0);
    if (v3[5] == 4)
      *((_WORD *)result + 461) = 6403;
    v6 = 0;
    *(_QWORD *)(a1 + 8 * v2 + 23592) = result;
    do
    {
      *(_QWORD *)(v4 + v6) = result;
      v6 += 88;
    }
    while (v6 != 2816);
    result[5] += 32;
    ++v2;
    v4 += 8;
  }
  while (v2 != 11);
  v7 = 0;
  v8 = *v3;
  v9 = (_QWORD *)(a1 + 33176);
  do
  {
    if ((_DWORD)v8)
    {
      v10 = v8;
      v11 = v9;
      do
      {
        *v11 = 0;
        v11 += 209;
        --v10;
      }
      while (v10);
    }
    ++v7;
    ++v9;
  }
  while (v7 != 32);
  v12 = -48;
  do
  {
    v13 = (_QWORD *)(a1 + v12);
    v13[3698] = 0;
    v13[3697] = 0x1401190800010000;
    v13[2343] = 0;
    v13[2342] = 0x1401190800000000;
    v12 += 16;
  }
  while (v12);
  *(_QWORD *)(a1 + 23776) = 0;
  return result;
}

_DWORD *gleCreateTextureObject(uint64_t a1, __int16 a2, int a3)
{
  int v5;
  int v6;
  int v8;
  _DWORD *v9;
  _DWORD *v10;
  int v11;

  v5 = a2 & 0xF;
  if ((a2 & 0xF) != 0)
    v6 = 1;
  else
    v6 = 6;
  if ((v5 - 7) < 3 || v5 == 2)
    v8 = 1;
  else
    v8 = 15;
  v9 = malloc_type_malloc((32 * v6 * v8 + 1072), 0x577B5147uLL);
  if (!v9)
    abort();
  v10 = v9;
  *(_QWORD *)v9 = 0;
  if ((a2 & 0x2000) != 0)
    v11 = 2;
  else
    v11 = 3;
  v9[4] = a3;
  v9[5] = 1;
  *((_QWORD *)v9 + 4) = 0;
  v9[6] = v11;
  v9[7] = 0;
  gfxInitializeGLTexture();
  if ((a2 & 0x2000) != 0)
  {
    *((_WORD *)v10 + 296) = -31298;
    *((_WORD *)v10 + 460) = -31298;
    v10[240] = -2127593169;
    *((_WORD *)v10 + 482) = -32465;
    v10[238] = 637543936;
    *((_BYTE *)v10 + 597) = 1;
  }
  *((_BYTE *)v10 + 811) |= 1u;
  gfxCreatePluginTexture();
  return v10;
}

uint64_t gleInitPipelineProgramState(uint64_t a1)
{
  _BYTE *v2;
  uint64_t v3;
  _BYTE *v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  char *PipelineProgramObject;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v2 = malloc_type_malloc(0x600uLL, 0x577B5147uLL);
  if (!v2)
    abort();
  v3 = 0;
  v4 = (_BYTE *)(a1 + 32496);
  *(_QWORD *)(a1 + 24192) = v2;
  *v2 = 0;
  *(_DWORD *)(a1 + 24744) = -1;
  *(_DWORD *)(a1 + 24748) = 0x10000;
  *(_DWORD *)(a1 + 24752) = 0;
  v5 = (_QWORD *)(a1 + 33432);
  v6 = a1 + 24192;
  do
  {
    if ((v3 & 0x7FFFFFFB) != 0)
    {
      v7 = 0;
      PipelineProgramObject = 0;
    }
    else
    {
      PipelineProgramObject = gleCreatePipelineProgramObject(v3, 0);
      gleCreatePluginPipelineProgram(a1, (uint64_t)(PipelineProgramObject + 40));
      v7 = PipelineProgramObject + 608;
      ++*((_DWORD *)PipelineProgramObject + 5);
    }
    *(_QWORD *)(a1 + 8 * v3 + 19248) = v7;
    v9 = (_QWORD *)(v6 + 8 * v3);
    v9[31] = PipelineProgramObject;
    v9[26] = PipelineProgramObject;
    *(_BYTE *)(v6 + v3 + 564) = 0;
    v9[36] = 0;
    v9[41] = 0;
    v9[46] = 0;
    v10 = *v4;
    if (*v4)
    {
      v11 = *v4;
      v12 = v5;
      do
      {
        *v12 = 0;
        v12 += 209;
        --v11;
      }
      while (v11);
    }
    ++v3;
    ++v5;
  }
  while (v3 != 5);
  v13 = 0;
  v14 = (_QWORD *)(a1 + 33472);
  do
  {
    v15 = a1 + 8 * v13;
    *(_QWORD *)(v15 + 24600) = 0;
    *(_QWORD *)(v15 + 24632) = 0;
    if ((_DWORD)v10)
    {
      v16 = v10;
      v17 = v14;
      do
      {
        *v17 = 0;
        v17 += 209;
        --v16;
      }
      while (v16);
    }
    ++v13;
    ++v14;
  }
  while (v13 != 4);
  *(_QWORD *)(a1 + 24200) = gleSetVPTransformFuncAll;
  *(_QWORD *)(a1 + 24208) = gleSetVPTransformFuncAll;
  *(_OWORD *)(a1 + 24216) = 0u;
  *(_OWORD *)(a1 + 24232) = 0u;
  *(_QWORD *)(a1 + 24352) = gleSetGPTransformFuncAll;
  *(_QWORD *)(a1 + 24360) = gleSetGPTransformFuncAll;
  *(_QWORD *)(a1 + 24368) = 0;
  *(_QWORD *)(a1 + 24384) = 0;
  *(_QWORD *)(a1 + 24376) = 0;
  gleReconfigurePipelineProgramState(a1);
  *(_QWORD *)(a1 + 24552) = cvmCreateHashMachine();
  *(_QWORD *)(a1 + 24512) = gleCreateStateProgram(a1, 4, 0, 0, 0, 0, 0, -1);
  return gleFPChanged(a1);
}

char *gleCreatePipelineProgramObject(int a1, int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  size_t v7;
  char *v8;
  char *v9;
  int __pattern4;

  v4 = 4416;
  if (a1 == 4)
    v5 = 67109888;
  else
    v5 = 0;
  if (a1 == 4)
    v4 = 4432;
  if (a1)
    v6 = v5;
  else
    v6 = 67109888;
  if (a1)
    v7 = v4;
  else
    v7 = 4416;
  v8 = (char *)malloc_type_malloc(v7, 0x577B5147uLL);
  if (!v8)
    abort();
  v9 = v8;
  *((_DWORD *)v8 + 4) = a2;
  *(_QWORD *)v8 = 0;
  *(_QWORD *)(v8 + 20) = 0x400000001;
  *(_WORD *)(v8 + 457) = 0;
  *(_OWORD *)(v8 + 44) = 0u;
  *(_OWORD *)(v8 + 60) = 0u;
  *(_OWORD *)(v8 + 76) = 0u;
  *(_OWORD *)(v8 + 92) = 0u;
  *(_OWORD *)(v8 + 108) = 0u;
  *(_OWORD *)(v8 + 124) = 0u;
  *(_OWORD *)(v8 + 140) = 0u;
  *(_OWORD *)(v8 + 156) = 0u;
  *(_OWORD *)(v8 + 172) = 0u;
  *(_OWORD *)(v8 + 188) = 0u;
  *(_OWORD *)(v8 + 204) = 0u;
  *(_OWORD *)(v8 + 220) = 0u;
  *(_OWORD *)(v8 + 236) = 0u;
  *(_OWORD *)(v8 + 252) = 0u;
  *(_OWORD *)(v8 + 28) = 0u;
  *(_OWORD *)(v8 + 268) = 0u;
  *(_OWORD *)(v8 + 284) = 0u;
  *(_OWORD *)(v8 + 300) = 0u;
  *(_OWORD *)(v8 + 316) = 0u;
  *(_OWORD *)(v8 + 332) = 0u;
  *(_OWORD *)(v8 + 348) = 0u;
  *(_OWORD *)(v8 + 364) = 0u;
  *(_OWORD *)(v8 + 380) = 0u;
  *(_OWORD *)(v8 + 396) = 0u;
  *(_OWORD *)(v8 + 412) = 0u;
  *(_OWORD *)(v8 + 428) = 0u;
  *(_OWORD *)(v8 + 440) = 0u;
  __pattern4 = v6;
  memset_pattern4(v8 + 608, &__pattern4, 0xED8uLL);
  if (a1 == 4)
  {
    *((_WORD *)v9 + 2208) = 0;
  }
  else if (a1)
  {
    goto LABEL_18;
  }
  *((_QWORD *)v9 + 551) = 0;
LABEL_18:
  *((_WORD *)v9 + 232) = 0;
  v9[466] = a1;
  v9[467] = v9[467] & 0xFC | (a2 == 0);
  *((_QWORD *)v9 + 59) = 0;
  *((_QWORD *)v9 + 60) = 0;
  *(_OWORD *)(v9 + 520) = 0u;
  *(_OWORD *)(v9 + 536) = 0u;
  *((_QWORD *)v9 + 61) = -1;
  *((_QWORD *)v9 + 62) = -1;
  *((_DWORD *)v9 + 117) = 0;
  *((_QWORD *)v9 + 63) = 0;
  *((_QWORD *)v9 + 64) = 0;
  memset_pattern16(v9 + 560, &unk_21B9A51E0, 0x30uLL);
  return v9;
}

uint64_t gleCreatePluginPipelineProgram(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v2 = (unsigned __int8 *)(result + 32496);
  if (*(_BYTE *)(result + 32496))
  {
    v3 = a2;
    v4 = 0;
    v5 = a2 + 424;
    v6 = (_QWORD *)(result + 32520);
    v7 = a2 + 520;
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v6[205] + 1624))(*v6, v3, v5, v7);
      ++v4;
      v3 += 8;
      v6 += 209;
      v7 += 4;
    }
    while (v4 < *v2);
  }
  return result;
}

double gleInitBufferState(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 19376) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 19360) = 0u;
  *(_OWORD *)(a1 + 19344) = 0u;
  *(_OWORD *)(a1 + 19328) = 0u;
  *(_OWORD *)(a1 + 19312) = 0u;
  *(_QWORD *)(a1 + 26312) = 0;
  *(_QWORD *)(a1 + 26304) = 0;
  return result;
}

uint64_t gleInitVertexArrayState(uint64_t a1)
{
  _BYTE *v2;
  char *VertexArrayHashObject;
  uint64_t *v4;
  uint64_t result;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v2 = (_BYTE *)(a1 + 32496);
  VertexArrayHashObject = gleCreateVertexArrayHashObject(a1, 0);
  v4 = (uint64_t *)(VertexArrayHashObject + 40);
  result = gleCreatePluginVertexArray(a1, (uint64_t)(VertexArrayHashObject + 40));
  *(_QWORD *)(a1 + 26392) = VertexArrayHashObject;
  *(_QWORD *)(a1 + 26384) = VertexArrayHashObject;
  v6 = *v2;
  if (*v2)
  {
    v7 = v2 + 1048;
    do
    {
      v8 = *v4++;
      *v7 = v8;
      v7 += 209;
      --v6;
    }
    while (v6);
  }
  ++*((_DWORD *)VertexArrayHashObject + 5);
  return result;
}

uint64_t gleCreatePluginVertexArray(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v2 = (unsigned __int8 *)(result + 32496);
  if (*(_BYTE *)(result + 32496))
  {
    v3 = a2;
    v4 = 0;
    v5 = a2 + 96;
    v6 = (_QWORD *)(result + 32520);
    v7 = a2 + 1456;
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v6[205] + 1680))(*v6, v3, v5, v7);
      ++v4;
      v3 += 8;
      v6 += 209;
      v7 += 280;
    }
    while (v4 < *v2);
  }
  return result;
}

void gleInitQueryMachine(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = a1 + 25904;
  gleInitHashMachine((_QWORD *)(a1 + 25904));
  v3 = 0;
  *(_OWORD *)(v2 + 76) = 0u;
  *(_OWORD *)(a1 + 25968) = 0u;
  *(_OWORD *)(a1 + 25952) = 0u;
  *(_OWORD *)(a1 + 25936) = 0u;
  v4 = *(unsigned __int8 *)(a1 + 32496);
  v5 = (_QWORD *)(a1 + 33608);
  do
  {
    if ((_DWORD)v4)
    {
      v6 = v4;
      v7 = v5;
      do
      {
        *v7 = 0;
        v7 += 209;
        --v6;
      }
      while (v6);
    }
    ++v3;
    ++v5;
  }
  while (v3 != 12);
}

uint64_t gleUpdateState(int8x16_t *a1)
{
  __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  __int8 v5;
  int v6;
  int i;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  __int32 v25;
  int v26;
  int v27;
  int v28;
  __int32 v29;
  int v30;
  uint64_t result;
  unsigned int v32;
  __int32 v33;
  int v34;
  uint64_t v35;
  uint64_t v36;

  v2 = &a1[1790].i8[12];
  v3 = &a1[1546].u8[14];
  v4 = &a1[930].u8[8];
  a1[1790].i32[3] = 0;
  a1[95] = vorrq_s8(a1[95], (int8x16_t)xmmword_21B9A5000);
  a1[96] = vorrq_s8(a1[96], (int8x16_t)xmmword_21B9A5010);
  a1[1862].i32[2] |= 0xDE3C0478;
  if (!a1[930].i8[10] || a1[1547].i8[4] || (a1[1554].i8[0] & 1) != 0)
    v5 = a1[2031].i8[10];
  else
    v5 = *(unsigned __int16 *)v4 == 33274;
  a1[955].i8[3] = v5;
  gleUpdateViewScissorData((uint64_t)a1);
  gleUpdateLightColorChangeFunc(a1);
  v6 = 0;
  *(_BYTE *)(a1[89].i64[0] + 496) = 63;
  *(_BYTE *)(a1[89].i64[1] + 496) = 63;
  do
  {
    gleUpdateLightPosition((uint64_t)a1, v6);
    gleUpdateLightDirection((uint64_t)a1, v6);
    gleUpdateLightExponents((uint64_t)a1, v6);
    gleUpdateLightAttenuation((uint64_t)a1, v6++);
  }
  while (v6 != 8);
  gleUpdateLightModel((uint64_t)a1);
  gleUpdateClipPlane((uint64_t)a1);
  gleUpdateMatrixMode((uint64_t)a1);
  gleUpdateDepthRangeData((uint64_t)a1);
  gleUpdateTextureCoordGen(a1);
  for (i = 0; i != 8; ++i)
    gleUpdateTextureParams(a1, i);
  gleUpdateAnyDrawBuffersFloat((uint64_t)a1, v8, v9, v10);
  v14 = *((unsigned __int16 *)v2 + 528);
  if (v14 == 35101)
    LOBYTE(v14) = v2[3836] == 0;
  v2[1062] = v14;
  v15 = *((unsigned __int16 *)v2 + 529);
  if (v15 == 35101)
    LOBYTE(v15) = v2[3836] == 0;
  v4[290] = v15;
  v16 = *((unsigned __int16 *)v2 + 530);
  if (v16 == 35101)
    LOBYTE(v16) = v2[3837] == 0;
  v4[291] = v16;
  gleUpdateBufferColorClamping((uint64_t)a1, v11, v12, v13);
  gleUpdateFragmentColorClamping((uint64_t)a1);
  v17 = *(_DWORD *)(v3 + 114);
  if ((v17 & 8) != 0)
  {
    v20 = a1[1548].i64[0];
    if (!v20)
      v20 = *(_QWORD *)(a1[1548].i64[1] + 64);
    if (*(_BYTE *)(v20 + 2326))
      v18 = 0;
    else
      v18 = v2[1062];
    if (!*(_BYTE *)(v20 + 2327))
      goto LABEL_32;
    goto LABEL_29;
  }
  if ((v17 & 1) != 0)
  {
    v21 = a1[1548].i64[0];
    if (!v21)
      v21 = *(_QWORD *)(a1[1548].i64[1] + 40);
    if (*(_BYTE *)(v21 + 214))
      v18 = 0;
    else
      v18 = v2[1062];
    if (!*(_BYTE *)(v21 + 215))
    {
LABEL_32:
      v19 = v2[1062];
      goto LABEL_33;
    }
LABEL_29:
    v19 = 0;
    goto LABEL_33;
  }
  v18 = v2[1062];
  v19 = v18;
LABEL_33:
  if (v18 != v4[2814] || v19 != v4[2815])
  {
    v4[2814] = v18;
    v4[2815] = v19;
    a1[95].i32[1] |= 0x400000u;
    *(_DWORD *)v2 = 0;
    a1[96].i32[3] |= 0x400u;
  }
  gleUpdatePointSmooth((uint64_t)a1);
  if ((v3[114] & 1) != 0)
  {
    gleSetColorMaterialEnable((uint64_t)a1);
    v23 = *(_DWORD *)(v3 + 114) & 9;
    if (v23 || v3[6])
    {
      v24 = v3[1];
    }
    else
    {
      v24 = v4[2];
      if (v4[2])
        v24 = v4[4] != 0;
    }
    if (v24 != v4[2813])
    {
      v4[2813] = v24;
      a1[95].i32[3] |= 0x40000000u;
      *(_DWORD *)v2 = 0;
      v25 = a1[96].i32[3];
      a1[96].i32[3] = v25 | 0x10008400;
      if ((*(_BYTE *)(a1[1814].i64[1] + 25) & 0x7F) != 0)
        a1[96].i32[3] = v25 | 0x10038400;
    }
    if (v23 || v3[6])
    {
      v26 = *v3;
    }
    else if (v4[491])
    {
      v26 = 1;
    }
    else
    {
      v26 = v4[490] != 0;
    }
    v22 = 0;
    if (v26 != v4[2812])
    {
      v4[2812] = v26;
      a1[95].i32[3] |= 0x40000000u;
      *(_DWORD *)v2 = 0;
      a1[96].i32[3] |= 0x10000000u;
    }
  }
  else
  {
    if (v3[6] || a1[1530].i64[0])
      gleVPEnable((uint64_t)a1);
    else
      gleVPDisable((uint64_t)a1);
    v22 = 1;
  }
  if ((v3[114] & 8) != 0)
  {
    gleUpdateInvalidPrimitives((uint64_t)a1);
    v27 = *(_DWORD *)(v3 + 114);
    if ((v27 & 9) != 0 || v3[6])
    {
      v28 = v3[1];
    }
    else
    {
      v28 = v4[2];
      if (v4[2])
        v28 = v4[4] != 0;
    }
    if (v28 != v4[2813])
    {
      v4[2813] = v28;
      a1[95].i32[3] |= 0x40000000u;
      *(_DWORD *)v2 = 0;
      v29 = a1[96].i32[3];
      a1[96].i32[3] = v29 | 0x10008400;
      if ((*(_BYTE *)(a1[1814].i64[1] + 25) & 0x7F) != 0)
        a1[96].i32[3] = v29 | 0x10038400;
    }
    if ((v27 & 9) != 0 || v3[6])
    {
      v30 = *v3;
    }
    else if (v4[491])
    {
      v30 = 1;
    }
    else
    {
      v30 = v4[490] != 0;
    }
    if (v30 != v4[2812])
    {
      v4[2812] = v30;
      a1[95].i32[3] |= 0x40000000u;
      *(_DWORD *)v2 = 0;
      a1[96].i32[3] |= 0x10000000u;
    }
  }
  else
  {
    gleGPDisable((uint64_t)a1);
    v27 = *(_DWORD *)(v3 + 114);
    v22 = 1;
  }
  if ((v27 & 0x10) != 0)
  {
    result = gleUpdateFogData((uint64_t)a1);
    if (!v22)
      result = gleUpdateInverseNeeds((uint64_t)a1);
  }
  else
  {
    result = gleFPChanged((uint64_t)a1);
  }
  if (v4[3])
  {
    *(_DWORD *)v2 = 0;
    v32 = a1[96].i32[2] | 0x2000000;
  }
  else
  {
    v32 = a1[96].i32[2] & 0xFDFFFFFF;
  }
  a1[96].i32[2] = v32;
  v33 = a1[96].i32[1];
  if ((v33 & 0x10000000) != 0 && v2[3832])
    a1[96].i32[1] = v33 & 0xEFFFFFFF;
  v34 = *((_DWORD *)v2 + 287);
  if ((v34 & 0x10000000) != 0)
  {
    if (v2[3834])
    {
      v35 = a1[1810].i64[0];
      if (!v35 || *(_DWORD *)(v35 + 480) != 0xFFFF && !*(_BYTE *)(v35 + 88 * v2[3848] + 640))
      {
        v34 &= ~0x10000000u;
        *((_DWORD *)v2 + 287) = v34;
      }
    }
  }
  if ((v34 & 0x2000000) != 0)
  {
    if (v2[3833])
    {
      v36 = a1[1810].i64[1];
      if (!v36 || *(_DWORD *)(v36 + 480) != 0xFFFF && !*(_BYTE *)(v36 + 88 * v2[3848] + 640))
        *((_DWORD *)v2 + 287) = v34 & 0xFDFFFFFF;
    }
  }
  return result;
}

_QWORD *gleUpdateLightColorChangeFunc(_QWORD *result)
{
  uint64_t v1;
  _QWORD *(*v2)(uint64_t, _QWORD *);
  int v3;
  unsigned int v4;
  _QWORD *(*v5)(uint64_t, _QWORD *);
  unsigned int v6;
  unsigned int v7;

  v1 = (uint64_t)result;
  v2 = (_QWORD *(*)(uint64_t, _QWORD *))result[182];
  v3 = *((unsigned __int16 *)result + 7442);
  if (v3 == 1029)
  {
    v6 = *((unsigned __int16 *)result + 7443);
    if (v6 > 0x1201)
    {
      if (v6 == 4610)
      {
        v5 = gleLightMaterialRGBAChange_B_S;
        goto LABEL_33;
      }
      if (v6 == 5632)
      {
        v5 = gleLightMaterialRGBAChange_B_E;
        goto LABEL_33;
      }
    }
    else
    {
      if (v6 == 4608)
      {
        v5 = gleLightMaterialRGBAChange_B_A;
        goto LABEL_33;
      }
      if (v6 == 4609)
      {
        v5 = gleLightMaterialRGBAChange_B_D;
        goto LABEL_33;
      }
    }
    v5 = gleLightMaterialRGBAChange_B_AD;
  }
  else if (v3 == 1028)
  {
    v4 = *((unsigned __int16 *)result + 7443);
    if (v4 > 0x1201)
    {
      if (v4 == 4610)
      {
        v5 = gleLightMaterialRGBAChange_F_S;
        goto LABEL_33;
      }
      if (v4 == 5632)
      {
        v5 = gleLightMaterialRGBAChange_F_E;
        goto LABEL_33;
      }
    }
    else
    {
      if (v4 == 4608)
      {
        v5 = gleLightMaterialRGBAChange_F_A;
        goto LABEL_33;
      }
      if (v4 == 4609)
      {
        v5 = gleLightMaterialRGBAChange_F_D;
        goto LABEL_33;
      }
    }
    v5 = gleLightMaterialRGBAChange_F_AD;
  }
  else
  {
    v7 = *((unsigned __int16 *)result + 7443);
    if (v7 > 0x1201)
    {
      if (v7 == 4610)
      {
        v5 = gleLightMaterialRGBAChange_FB_S;
        goto LABEL_33;
      }
      if (v7 == 5632)
      {
        v5 = gleLightMaterialRGBAChange_FB_E;
        goto LABEL_33;
      }
    }
    else
    {
      if (v7 == 4608)
      {
        v5 = gleLightMaterialRGBAChange_FB_A;
        goto LABEL_33;
      }
      if (v7 == 4609)
      {
        v5 = gleLightMaterialRGBAChange_FB_D;
        goto LABEL_33;
      }
    }
    v5 = gleLightMaterialRGBAChange_FB_AD;
  }
LABEL_33:
  if (v2 != v5)
  {
    if (*((_BYTE *)result + 14891) && !*((_BYTE *)result + 1452))
      result = v2((uint64_t)result, result + 1058);
    if (*(_BYTE *)(v1 + 1452))
      result = v5(v1, (_QWORD *)(v1 + 8464));
  }
  *(_QWORD *)(v1 + 1456) = v5;
  *(_QWORD *)(v1 + 1464) = v5;
  return result;
}

uint64_t gleSetColorMaterialEnable(uint64_t result)
{
  int v1;

  if (*(_BYTE *)(result + 32481))
    goto LABEL_2;
  v1 = *(unsigned __int8 *)(result + 14891);
  if (*(_BYTE *)(result + 14891))
  {
    if (*(_QWORD *)(result + 24480) || *(_BYTE *)(result + 24756))
    {
LABEL_2:
      v1 = 0;
      goto LABEL_3;
    }
    v1 = (*(_BYTE *)(result + 24864) & 1) == 0;
  }
LABEL_3:
  if (*(unsigned __int8 *)(result + 1452) != v1)
  {
    *(_BYTE *)(result + 1452) = v1;
    if (v1)
      return (*(uint64_t (**)(uint64_t, uint64_t))(result + 1456))(result, result + 8464);
  }
  return result;
}

void gleUpdateLightPosition(uint64_t a1, int a2)
{
  uint64_t v5;
  float32x2_t *v6;
  float32x2_t *v7;
  float32x2_t v8;
  float v9;
  float v10;
  uint64_t v11;
  int v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;

  v5 = a1 + 784;
  v6 = (float32x2_t *)(a1 + 160 * a2);
  v7 = v6 + 1580;
  v8 = v6[1574];
  v6[1580] = v8;
  v9 = v6[1575].f32[0];
  v6[1581].f32[0] = v9;
  v10 = v6[1575].f32[1];
  if (v10 == 0.0)
  {
    v11 = a1 + 160 * a2;
    gleVectorNormalize(a1, (float *)v7, (float *)(v11 + 12672));
    *v7 = *(float32x2_t *)(v11 + 12672);
    v7[1].i32[0] = *(_DWORD *)(v11 + 12680);
    v12 = 1;
  }
  else
  {
    if (v10 != 1.0)
    {
      v13 = 1.0 / v10;
      *v7 = vmul_n_f32(v8, v13);
      v6[1581].f32[0] = v9 * v13;
    }
    gleVectorNormalize(a1, (float *)v7, (float *)(a1 + 160 * a2 + 12672));
    v12 = 0;
  }
  v14 = a1 + 160 * a2;
  *(float *)(v14 + 12680) = *(float *)(v14 + 12680) + 1.0;
  gleVectorNormalize(a1, (float *)(v14 + 12672), (float *)(v14 + 12672));
  v15 = v5 + 80 * a2;
  v17 = *(unsigned __int8 *)(v15 + 25);
  v16 = (_BYTE *)(v15 + 25);
  if (v17 != v12)
  {
    *v16 = v12;
    gleUpdateLightFast(a1, a2);
    *(_DWORD *)(a1 + 28652) = 0;
    *(_DWORD *)(a1 + 1548) |= 0x10020u;
  }
  v18 = *(_QWORD *)(a1 + 19248);
  if (v18)
  {
    v19 = *(unsigned __int16 *)(v18 + 20 * a2 + 2566);
    if (v19 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v19 >> 3) & 0x1FFC) + 1552) |= 1 << v19;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x800000u;
    }
  }
  v20 = *(_QWORD *)(a1 + 19272);
  if (v20)
  {
    v21 = *(unsigned __int16 *)(v20 + 20 * a2 + 2566);
    if (v21 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v21 >> 3) & 0x1FFC) + 1936) |= 1 << v21;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x4000000u;
    }
  }
  v22 = *(_QWORD *)(a1 + 19280);
  if (v22)
  {
    v23 = *(unsigned __int16 *)(v22 + 20 * a2 + 2566);
    if (v23 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v23 >> 3) & 0x1FFC) + 2064) |= 1 << v23;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x8000000u;
    }
  }
  if (v18)
  {
    v24 = *(unsigned __int16 *)(v18 + 20 * a2 + 2572);
    if (v24 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v24 >> 3) & 0x1FFC) + 1552) |= 1 << v24;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x800000u;
    }
  }
  if (v20)
  {
    v25 = *(unsigned __int16 *)(v20 + 20 * a2 + 2572);
    if (v25 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v25 >> 3) & 0x1FFC) + 1936) |= 1 << v25;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x4000000u;
    }
  }
  if (v22)
  {
    v26 = *(unsigned __int16 *)(v22 + 20 * a2 + 2572);
    if (v26 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v26 >> 3) & 0x1FFC) + 2064) |= 1 << v26;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x8000000u;
    }
  }
  if (v18)
  {
    v27 = *(unsigned __int16 *)(v18 + 20 * a2 + 2574);
    if (v27 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v27 >> 3) & 0x1FFC) + 1552) |= 1 << v27;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x800000u;
    }
  }
  if (v20)
  {
    v28 = *(unsigned __int16 *)(v20 + 20 * a2 + 2574);
    if (v28 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v28 >> 3) & 0x1FFC) + 1936) |= 1 << v28;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x4000000u;
    }
  }
  if (v22)
  {
    v29 = *(unsigned __int16 *)(v22 + 20 * a2 + 2574);
    if (v29 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v29 >> 3) & 0x1FFC) + 2064) |= 1 << v29;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x8000000u;
    }
  }
}

uint64_t gleUpdateLightFast(uint64_t result, int a2)
{
  uint64_t v2;
  int v3;
  _BOOL4 v4;
  int v5;

  v2 = result + 784;
  v3 = *(_DWORD *)(result + 1448);
  if ((((unint64_t)*(unsigned int *)(result + 14880) >> a2) & 1) != 0
    && (*(_BYTE *)(v2 + 80 * a2 + 26) || *(_BYTE *)(result + 14893) || !*(_BYTE *)(v2 + 80 * a2 + 25)))
  {
    *(_BYTE *)(v2 + 80 * a2 + 24) = 0;
    *(_DWORD *)(result + 1448) = v3 | (1 << a2);
    if (!v3)
    {
LABEL_8:
      *(_DWORD *)(result + 28652) = 0;
      *(_DWORD *)(result + 1548) |= 0x18000u;
    }
  }
  else
  {
    *(_BYTE *)(v2 + 80 * a2 + 24) = 1;
    v4 = v3 == 0;
    v5 = v3 & ~(1 << a2);
    *(_DWORD *)(result + 1448) = v5;
    if (((v4 ^ (v5 != 0)) & 1) == 0)
      goto LABEL_8;
  }
  return result;
}

void gleUpdateLightDirection(uint64_t a1, int a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  gleVectorNormalize(a1, (float *)(a1 + 160 * a2 + 12608), (float *)(a1 + 160 * a2 + 12656));
  v4 = *(_QWORD *)(a1 + 19248);
  if (v4)
  {
    v5 = *(unsigned __int16 *)(v4 + 20 * a2 + 2568);
    if (v5 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v5 >> 3) & 0x1FFC) + 1552) |= 1 << v5;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x800000u;
    }
  }
  v6 = *(_QWORD *)(a1 + 19272);
  if (v6)
  {
    v7 = *(unsigned __int16 *)(v6 + 20 * a2 + 2568);
    if (v7 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v7 >> 3) & 0x1FFC) + 1936) |= 1 << v7;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x4000000u;
    }
  }
  v8 = *(_QWORD *)(a1 + 19280);
  if (v8)
  {
    v9 = *(unsigned __int16 *)(v8 + 20 * a2 + 2568);
    if (v9 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v9 >> 3) & 0x1FFC) + 2064) |= 1 << v9;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x8000000u;
    }
  }
  if (v4)
  {
    v10 = *(unsigned __int16 *)(v4 + 20 * a2 + 2576);
    if (v10 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v10 >> 3) & 0x1FFC) + 1552) |= 1 << v10;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x800000u;
    }
  }
  if (v6)
  {
    v11 = *(unsigned __int16 *)(v6 + 20 * a2 + 2576);
    if (v11 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v11 >> 3) & 0x1FFC) + 1936) |= 1 << v11;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x4000000u;
    }
  }
  if (v8)
  {
    v12 = *(unsigned __int16 *)(v8 + 20 * a2 + 2576);
    if (v12 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v12 >> 3) & 0x1FFC) + 2064) |= 1 << v12;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x8000000u;
    }
  }
}

void gleUpdateLightExponents(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  float *v7;
  uint64_t v8;
  float v9;
  float *v10;
  __int128 v11;
  float32x2_t *v12;
  float32x2_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v21;
  _BYTE *v22;
  int v23;
  float v24;
  __int128 v25;

  v4 = a2;
  v5 = a1 + 784;
  if (*(float *)(a1 + 160 * a2 + 12688) <= 90.0)
  {
    v7 = (float *)(v5 + 80 * a2);
    v8 = a1 + 160 * a2;
    v9 = *(float *)(v8 + 12636);
    if (*v7 != v9)
    {
      *v7 = v9;
      if (v9 <= 0.000005)
      {
        __asm { FMOV            V0.4S, #1.0 }
        *(_OWORD *)(v5 + 80 * a2 + 4) = _Q0;
        memset_pattern16((void *)(a1 + 80 * a2 + 816), &unk_21B9A5180, 0x2CuLL);
      }
      else
      {
        v10 = (float *)(v8 + 12636);
        *(float *)&v11 = expf(-5.5215 / v9);
        v12 = (float32x2_t *)(v5 + 80 * v4);
        v12->i32[1] = v11;
        v13.f32[0] = 1.0 - *(float *)&v11;
        v24 = 1.0 - *(float *)&v11;
        v25 = v11;
        v13.i32[1] = v11;
        v12[1] = vdiv_f32((float32x2_t)0x3B83126F41200000, v13);
        v14 = 0;
        v12[2].f32[0] = exp2f(v9) + -1.0;
        do
        {
          *(float *)(a1 + 80 * v4 + 816 + v14) = powf(*(float *)&v25, *v10);
          v15 = v25;
          *(float *)&v15 = (float)(v24 / 10.0) + *(float *)&v25;
          v25 = v15;
          v14 += 4;
        }
        while (v14 != 40);
        *(_DWORD *)(v5 + 80 * (int)v4 + 72) = 1065353216;
      }
    }
    v6 = 1;
  }
  else
  {
    v6 = 0;
  }
  v21 = v5 + 80 * (int)v4;
  v23 = *(unsigned __int8 *)(v21 + 26);
  v22 = (_BYTE *)(v21 + 26);
  if (v23 != v6)
  {
    *v22 = v6;
    gleUpdateLightFast(a1, a2);
    *(_DWORD *)(a1 + 28652) = 0;
    *(_DWORD *)(a1 + 1548) |= 0x10020u;
  }
}

uint64_t gleUpdateLightAttenuation(uint64_t result, int a2)
{
  uint64_t v2;
  float v3;
  int v4;
  uint64_t v5;
  _BYTE *v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v2 = result + 784;
  v3 = *(float *)(result + 160 * a2 + 12624);
  if (v3 >= 0.000005 || v3 <= -0.000005)
  {
    if (*(float *)(result + 160 * a2 + 12628) == 0.0 && *(float *)(result + 160 * a2 + 12632) == 0.0)
    {
      *(_BYTE *)(v2 + 80 * a2 + 27) = 1;
      v4 = v3 == 1.0;
    }
    else
    {
      v4 = 0;
      *(_BYTE *)(v2 + 80 * a2 + 27) = 0;
    }
    *(float *)(v2 + 80 * a2 + 20) = 1.0 / v3;
  }
  else
  {
    v4 = 0;
    *(_BYTE *)(v2 + 80 * a2 + 27) = 0;
  }
  v5 = v2 + 80 * a2;
  v7 = *(unsigned __int8 *)(v5 + 28);
  v6 = (_BYTE *)(v5 + 28);
  if (v7 != v4)
  {
    *v6 = v4;
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1548) |= 0x10020u;
  }
  v8 = *(_QWORD *)(result + 19248);
  if (v8)
  {
    v9 = *(unsigned __int16 *)(v8 + 20 * a2 + 2570);
    if (v9 <= 0x3FF)
    {
      *(_DWORD *)(result + ((v9 >> 3) & 0x1FFC) + 1552) |= 1 << v9;
      *(_DWORD *)(result + 28652) = 0;
      *(_DWORD *)(result + 1532) |= 0x800000u;
    }
  }
  v10 = *(_QWORD *)(result + 19272);
  if (v10)
  {
    v11 = *(unsigned __int16 *)(v10 + 20 * a2 + 2570);
    if (v11 <= 0x3FF)
    {
      *(_DWORD *)(result + ((v11 >> 3) & 0x1FFC) + 1936) |= 1 << v11;
      *(_DWORD *)(result + 28652) = 0;
      *(_DWORD *)(result + 1532) |= 0x4000000u;
    }
  }
  v12 = *(_QWORD *)(result + 19280);
  if (v12)
  {
    v13 = *(unsigned __int16 *)(v12 + 20 * a2 + 2570);
    if (v13 <= 0x3FF)
    {
      *(_DWORD *)(result + ((v13 >> 3) & 0x1FFC) + 2064) |= 1 << v13;
      *(_DWORD *)(result + 28652) = 0;
      *(_DWORD *)(result + 1532) |= 0x8000000u;
    }
  }
  return result;
}

uint64_t gleUpdateInverseNeeds(uint64_t result)
{
  _BYTE *v1;
  char v2;
  int v3;
  unsigned int v4;
  _BYTE *v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v1 = *(_BYTE **)(result + 29032);
  v2 = v1[24];
  *(_QWORD *)(result + 2216) = 0x89D8E67F80000000;
  v3 = v1[101];
  if (v1[101])
  {
    v4 = -1073741824;
    *(_DWORD *)(result + 2216) = -1073741824;
  }
  else
  {
    v4 = 0x80000000;
  }
  v5 = (_BYTE *)(result + 32505);
  v6 = -1982011777;
  if ((v2 & 0x20) != 0)
  {
    *(_DWORD *)(result + 2220) = -1982011777;
    if ((v2 & 0x40) == 0)
      goto LABEL_12;
  }
  else
  {
    v6 = -1982273921;
    if ((v2 & 0x40) == 0)
      goto LABEL_12;
  }
  if (v3 || *v5)
    v6 |= 0x30000000u;
  v6 |= 0x40000000u;
  *(_DWORD *)(result + 2220) = v6;
LABEL_12:
  v7 = *(_DWORD *)(result + 24864);
  if ((v7 & 1) != 0)
  {
    v9 = *(_QWORD *)(result + 24768);
    if (!v9)
      v9 = *(_QWORD *)(*(_QWORD *)(result + 24776) + 40);
    v4 |= *(_DWORD *)(v9 + 224);
    goto LABEL_36;
  }
  if (*(_BYTE *)(result + 24756))
  {
    v8 = *(_QWORD *)(result + 24400);
    v4 |= *(_DWORD *)(v8 + 180);
    *(_DWORD *)(result + 2216) = v4;
    if (!v1[103] || !*(_BYTE *)(result + 28744) || !*(_BYTE *)(v8 + 457))
      goto LABEL_37;
    goto LABEL_35;
  }
  v10 = *(unsigned __int8 *)(result + 14890);
  if (*(_BYTE *)(result + 14890) || *(_QWORD *)(result + 23800))
  {
    if (*(_BYTE *)(result + 17699))
    {
      v4 |= 0xFFE0u;
    }
    else if (*(_BYTE *)(result + 17697))
    {
      v4 |= 16 * (0xFFFFFFFF >> -*(_BYTE *)(result + 17696));
    }
    else
    {
      v4 |= 0x10u;
    }
    *(_DWORD *)(result + 2216) = v4;
  }
  if (v3 || *v5)
  {
    v6 |= 0x10000u;
    *(_DWORD *)(result + 2220) = v6;
    if (v10)
    {
      v4 |= 0x1000000u;
      *(_DWORD *)(result + 2216) = v4;
    }
  }
  if (v1[103] && *(_BYTE *)(result + 28744))
  {
LABEL_35:
    v4 |= 8u;
LABEL_36:
    *(_DWORD *)(result + 2216) = v4;
  }
LABEL_37:
  if ((v7 & 8) != 0)
  {
    v11 = *(_QWORD *)(result + 24768);
    if (!v11)
      v11 = *(_QWORD *)(*(_QWORD *)(result + 24776) + 64);
    v4 |= *(_DWORD *)(v11 + 2336);
    *(_DWORD *)(result + 2216) = v4;
  }
  if ((v7 & 0x10) != 0)
  {
    v13 = *(_QWORD *)(result + 24768);
    if (!v13)
      v13 = *(_QWORD *)(*(_QWORD *)(result + 24776) + 72);
    v12 = *(_DWORD *)(v13 + 3040);
    goto LABEL_47;
  }
  if (*(_BYTE *)(result + 24760))
  {
    v12 = *(_DWORD *)(*(_QWORD *)(result + 24432) + 180);
LABEL_47:
    *(_DWORD *)(result + 2216) = v4 | v12;
    return result;
  }
  *(_DWORD *)(result + 2220) = v6 | 0x20000;
  return result;
}

uint64_t gleUpdateLightModel(uint64_t a1)
{
  int i;
  uint64_t result;

  for (i = 0; i != 8; ++i)
    result = gleUpdateLightFast(a1, i);
  *(_DWORD *)(a1 + 28652) = 0;
  *(_DWORD *)(a1 + 1548) |= 0x10020u;
  return result;
}

uint64_t gleUpdateClipPlane(uint64_t result)
{
  int v1;
  int v2;
  int v3;
  uint64_t v4;

  v1 = 0;
  v2 = 0;
  v3 = *(unsigned __int8 *)(result + 28744);
  *(_BYTE *)(result + 28744) = 0;
  do
  {
    if (((*(_DWORD *)(result + 17572) >> v2) & 1) != 0)
    {
      *(_BYTE *)(result + 28744) = 1;
      v4 = result + v1++;
      *(_BYTE *)(v4 + 28736) = v2;
    }
    ++v2;
  }
  while (v2 != 8);
  *(_DWORD *)(result + 28732) = v1;
  if (v3 != *(unsigned __int8 *)(result + 28744))
  {
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1548) |= 0x18200u;
    if (*(_BYTE *)(*(_QWORD *)(result + 29032) + 103))
      return gleUpdateInverseNeeds(result);
  }
  return result;
}

uint64_t gleUpdateMatrixMode(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  v1 = *(int *)(result + 20484);
  if ((int)v1 <= 23)
  {
    v2 = result + (v1 << 6);
    *(_QWORD *)(result + 19976) = v2 + 9360;
    *(_QWORD *)(result + 19984) = v2 + 10896;
    if ((v1 - 3) >= 2)
      v3 = 1 << v1;
    else
      v3 = (1 << v1) | 2;
    *(_DWORD *)(result + 20488) = v3;
  }
  return result;
}

uint64_t gleUpdateDepthRangeData(uint64_t a1)
{
  return gleUpdateDepthRangeDataIndexed(a1, 0);
}

uint64_t gleUpdateTextureCoordGen(_DWORD *a1)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  int *v8;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  _DWORD *v13;
  uint64_t result;
  _DWORD *v15;
  int v16;
  int v17;
  _DWORD *v18;
  int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;

  v2 = 0;
  v3 = 0;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = a1 + 5948;
  v9 = a1[5950];
  v10 = a1[5951];
  v11 = a1[5948];
  v12 = a1[5949];
  *((_QWORD *)a1 + 2974) = 0;
  v13 = a1 + 4124;
  *((_QWORD *)a1 + 2975) = 0;
  result = 9217;
  do
  {
    v15 = &v13[v2];
    if (LOBYTE(v13[v2 + 9]))
    {
      v16 = 1 << v7;
      v17 = *((unsigned __int16 *)v15 - 54);
      if (v17 <= 9217)
      {
        if (v17 == 9216)
        {
          v4 |= v16;
          v8[1] = v4;
        }
        else if (v17 == 9217)
        {
          v3 |= v16;
          *v8 = v3;
        }
      }
      else
      {
        if (v17 == 9218)
        {
          v6 |= v16;
          v5 |= v16;
          v8[2] = v6;
LABEL_16:
          v8[3] = v5;
          goto LABEL_19;
        }
        if (v17 != 34065)
        {
          if (v17 != 34066)
            goto LABEL_19;
          v5 |= v16;
          goto LABEL_16;
        }
        v6 |= v16;
        v8[2] = v6;
      }
    }
    else if (!*((_BYTE *)v15 + 37) && !BYTE2(v13[v2 + 9]) && !HIBYTE(v13[v2 + 9]))
    {
      goto LABEL_47;
    }
LABEL_19:
    v18 = &v13[v2];
    if (BYTE1(v13[v2 + 9]))
    {
      v19 = 256 << v7;
      v20 = *((unsigned __int16 *)v18 - 36);
      if (v20 <= 0x2401)
      {
        if (v20 == 9216)
        {
          v4 |= v19;
          v8[1] = v4;
        }
        else if (v20 == 9217)
        {
          v3 |= v19;
          *v8 = v3;
        }
        goto LABEL_32;
      }
      switch(v20)
      {
        case 0x2402u:
          v6 |= v19;
          v5 |= v19;
          v8[2] = v6;
          goto LABEL_29;
        case 0x8511u:
          v6 |= v19;
          v8[2] = v6;
          break;
        case 0x8512u:
          v5 |= v19;
LABEL_29:
          v8[3] = v5;
          break;
      }
    }
LABEL_32:
    if (*((_BYTE *)v18 + 38))
    {
      v21 = 0x10000 << v7;
      v22 = LOWORD(v13[v2 - 9]);
      if (v22 > 0x8510)
      {
        if (v22 == 34065)
        {
          v6 |= v21;
          v8[2] = v6;
        }
        else if (v22 == 34066)
        {
          v5 |= v21;
          v8[3] = v5;
        }
      }
      else if (v22 == 9216)
      {
        v4 |= v21;
        v8[1] = v4;
      }
      else if (v22 == 9217)
      {
        v3 |= v21;
        *v8 = v3;
      }
    }
    if (HIBYTE(v13[v2 + 9]))
    {
      v23 = 0x1000000 << v7;
      v24 = LOWORD(v13[v2]);
      if (v24 == 9216)
      {
        v4 |= v23;
        v8[1] = v4;
      }
      else if (v24 == 9217)
      {
        v3 |= v23;
        *v8 = v3;
      }
    }
LABEL_47:
    ++v7;
    v2 += 37;
  }
  while (v7 != 8);
  if (((v10 | v9) != 0) == ((v5 | v6) == 0))
  {
    result = gleUpdateInverseNeeds((uint64_t)a1);
    v8[1215] = 0;
    a1[387] |= 0x8002u;
    v3 = *v8;
    v4 = v8[1];
  }
  if (v3 != v11 || v4 != v12)
  {
    v8[1215] = 0;
    v25 = a1[387];
    a1[387] = v25 | 0x18008;
    if (((v4 | v3) ^ (v12 | v11)) >> 24)
      a1[387] = v25 | 0x1C008;
  }
  if (v8[3] != v10 || v8[2] != v9)
  {
    v8[1215] = 0;
    a1[387] |= 0x18010u;
  }
  return result;
}

_DWORD *gleUpdateTextureParams(_DWORD *result, int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;

  v2 = result[5946];
  v3 = 1 << a2;
  if (((result[19 * a2 + 3921] & 0x1F) != 0) == ((v2 & (1 << a2)) == 0))
  {
    v4 = v2 | v3;
    v5 = v2 & ~v3;
    if ((result[19 * a2 + 3921] & 0x1F) != 0)
      v6 = v4;
    else
      v6 = v5;
    result[5946] = v6;
  }
  result[7163] = 0;
  result[387] |= 0x20000u;
  return result;
}

uint64_t gleUpdateFogData(uint64_t result)
{
  _BYTE *v1;
  int v2;
  _BOOL4 v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  char v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;

  v1 = (_BYTE *)(result + 29592);
  v2 = *(_DWORD *)(result + 24864);
  if ((v2 & 1) != 0)
  {
    v4 = 0;
    v3 = 1;
    if ((v2 & 0x10) != 0)
      goto LABEL_9;
  }
  else
  {
    v3 = *(_BYTE *)(result + 24756) != 0;
    if (*(_BYTE *)(result + 24756))
      v4 = 0;
    else
      v4 = -128;
    if ((v2 & 0x10) != 0)
      goto LABEL_9;
  }
  if (*(_BYTE *)(result + 24760) || !*(_BYTE *)(result + 15282))
    goto LABEL_9;
  if (v3 && *(_BYTE *)(result + 32480)
    || *(_WORD *)(result + 15292) == 4354
    || !*(_BYTE *)(*(_QWORD *)(result + 29032) + 104))
  {
    v12 = 8;
  }
  else
  {
    v12 = 16;
  }
  v14 = *(_QWORD *)(result + 26000);
  v15 = v4 | v12;
  if (*(_WORD *)(result + 15280) == 9474)
    v16 = v15 | 4;
  else
    v16 = v15;
  v17 = *(unsigned __int16 *)(result + 15276);
  if (v17 == 2048)
  {
    v4 = v16 | 2;
    if ((v16 & 0x10) == 0)
      goto LABEL_9;
    v20 = *(float *)(v14 - 1104);
    if ((v16 & 4) != 0)
      v21 = fmaxf(v20, *(float *)(result + 288));
    else
      v21 = fabsf(v20);
    v19 = *(float *)(result + 292)
        / (float)(*(float *)(result + 292)
                + (float)((float)-(float)(*(float *)(result + 292)
                                        - (float)((float)(*(float *)(result + 308)
                                                        + (float)((float)-(float)(*(float *)(result + 312)
                                                                                - (float)(*(float *)(result + 316)
                                                                                        * (float)-(float)(*(float *)(result + 15244) * v21)))
                                                                * (float)-(float)(*(float *)(result + 15244) * v21)))
                                                * (float)-(float)(*(float *)(result + 15244) * v21)))
                        * (float)-(float)(*(float *)(result + 15244) * v21)));
  }
  else if (v17 == 9729)
  {
    v4 = v16 | 1;
    if ((v16 & 0x10) == 0)
      goto LABEL_9;
    v18 = *(float *)(v14 - 1104);
    if ((v16 & 4) == 0)
      v18 = fabsf(v18);
    v19 = fminf(fmaxf((float)(*(float *)(result + 15252) - v18) * *(float *)(result + 15256), *(float *)(result + 288)), *(float *)(result + 292));
  }
  else
  {
    v4 = v16 | 3;
    if ((v16 & 0x10) == 0)
      goto LABEL_9;
    v22 = *(float *)(v14 - 1104) * *(float *)(result + 15244);
    v19 = *(float *)(result + 292)
        / (float)(*(float *)(result + 292)
                + (float)((float)-(float)(*(float *)(result + 292)
                                        - (float)((float)(*(float *)(result + 308)
                                                        + (float)((float)-(float)(*(float *)(result + 312)
                                                                                - (float)(*(float *)(result + 316)
                                                                                        * (float)-(float)(v22 * v22)))
                                                                * (float)-(float)(v22 * v22)))
                                                * (float)-(float)(v22 * v22)))
                        * (float)-(float)(v22 * v22)));
  }
  *(float *)(v14 - 1100) = v19;
LABEL_9:
  if (*(unsigned __int16 *)(result + 15278) == 33873)
  {
    v5 = v4 & 0xFFFFFF9F | 0x20;
  }
  else
  {
    v6 = v4 & 0xFFFFFF9F;
    if (*(unsigned __int16 *)(result + 15280) == 34139)
      v5 = v6 | 0x40;
    else
      v5 = v6;
  }
  v7 = *v1;
  if (v7 != v5)
  {
    v8 = (v5 >> 5) & 3;
    if (((v7 & 0x60) != 32) == (v8 == 1))
    {
      *(_DWORD *)(result + 28652) = 0;
      *(_DWORD *)(result + 1548) |= 0x8002u;
    }
    if (((v7 >> 5) & 3) != v8)
    {
      *(_DWORD *)(result + 28652) = 0;
      *(_DWORD *)(result + 1548) |= 0x10008u;
    }
    v9 = v7 ^ v5;
    if ((v9 & 0x18) != 0)
    {
      if ((v5 & 0x80u) != 0)
        v10 = 65544;
      else
        v10 = 520;
      v11 = *(_DWORD *)(result + 1548) | v10;
    }
    else
    {
      if ((v5 & 0x10) != 0 && (v9 & 7) != 0)
      {
        if ((v5 & 0x80u) != 0)
          v13 = 65544;
        else
          v13 = 520;
        *(_DWORD *)(result + 28652) = 0;
        *(_DWORD *)(result + 1548) |= v13;
      }
      if ((v5 & 8) == 0 || (v9 & 7) == 0)
        goto LABEL_40;
      v11 = *(_DWORD *)(result + 1548);
    }
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1548) = v11 | 0x20000;
LABEL_40:
    if ((v9 & 3) != 0)
    {
      *(_DWORD *)(result + 28652) = 0;
      *(_DWORD *)(result + 1548) |= 0x30000000u;
    }
    *v1 = v5;
  }
  return result;
}

uint64_t gleUpdateViewScissorData(uint64_t a1)
{
  return gleUpdateViewScissorDataIndexed(a1, 0);
}

uint64_t gleSelectVertexSubmitFunc(uint64_t result)
{
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  __int16 v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  *(_QWORD *)(result + 26152) = gleSetVertexSubmitFunc;
  *(_QWORD *)(result + 26160) = gleSetVertexSubmitFunc;
  v1 = (_BYTE *)(result + 24756);
  *(_QWORD *)(result + 26168) = gleSetVertexConvertFunc;
  *(_QWORD *)(result + 26176) = gleSetVertexConvertFunc;
  *(_QWORD *)(result + 26184) = gleSetVertexArrayFunc;
  *(_QWORD *)(result + 26192) = gleSetVertexArrayFunc;
  *(_QWORD *)(result + 26200) = gleSetVertexElemFunc;
  *(_QWORD *)(result + 26208) = gleSetVertexElemFunc;
  v2 = *(_QWORD *)(result + 26280);
  if (v2)
  {
    v3 = *(_QWORD *)(result + 26288);
    v4 = 4 * *(unsigned __int8 *)(v2 + 2);
    *(_WORD *)(result + 26132) = v4;
    if (v3)
      v4 = 4 * *(unsigned __int8 *)(v3 + 2);
    *(_WORD *)(result + 26134) = v4;
  }
  if (*(_WORD *)(result + 29830) != 7168 || !v2 || !*(_BYTE *)(result + 32481))
  {
    v5 = *(_QWORD *)(result + 24480);
    if (v5 || *v1 || (*(_BYTE *)(result + 24864) & 1) != 0)
    {
      if ((*(_BYTE *)(result + 24864) & 1) != 0)
      {
        v7 = *(_QWORD *)(result + 24768);
        if (!v7)
          v7 = *(_QWORD *)(*(_QWORD *)(result + 24776) + 40);
        v6 = (uint64_t *)(v7 + 736);
      }
      else if (*v1)
      {
        v6 = (uint64_t *)(*(_QWORD *)(result + 24400) + 472);
      }
      else
      {
        v6 = (uint64_t *)(v5 + 432);
      }
      v8 = *v6;
      if (v8)
      {
        v9 = 16 * *(_DWORD *)(v8 + 48);
        *(_QWORD *)(result + 26016) = (*(_DWORD *)(result + 26120) * v9) + *(_QWORD *)(result + 26000);
        *(_WORD *)(result + 26124) = v9;
      }
    }
    else
    {
      *(_WORD *)(result + 26124) = 640;
      *(_QWORD *)(result + 26016) = *(_QWORD *)(result + 26024);
    }
  }
  return result;
}

uint64_t gliInitDispatchTable(uint64_t result)
{
  unsigned __int8 *v1;
  uint64_t (**v2)(uint64_t);
  uint64_t (**v3)(uint64_t);
  uint64_t v4;
  uint64_t (**v5)(uint64_t);
  int v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD *v92;
  _QWORD *v93;
  _QWORD *v94;
  _QWORD *v95;
  _QWORD *v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  _QWORD *v102;
  _QWORD *v103;
  _QWORD *v104;
  _QWORD *v105;
  _QWORD *v106;
  _QWORD *v107;
  _QWORD *v108;
  _QWORD *v109;
  _QWORD *v110;
  _QWORD *v111;
  _QWORD *v112;
  _QWORD *v113;
  _QWORD *v114;
  _QWORD *v115;
  _QWORD *v116;
  _QWORD *v117;
  _QWORD *v118;
  _QWORD *v119;
  _QWORD *v120;
  _QWORD *v121;
  _QWORD *v122;
  _QWORD *v123;
  _QWORD *v124;
  _QWORD *v125;
  _QWORD *v126;
  _QWORD *v127;
  _QWORD *v128;
  _QWORD *v129;
  _QWORD *v130;
  _QWORD *v131;
  _QWORD *v132;
  _QWORD *v133;
  _QWORD *v134;
  _QWORD *v135;
  _QWORD *v136;
  _QWORD *v137;
  _QWORD *v138;
  _QWORD *v139;
  _QWORD *v140;
  _QWORD *v141;
  _QWORD *v142;
  _QWORD *v143;
  _QWORD *v144;
  _QWORD *v145;
  _QWORD *v146;
  _QWORD *v147;
  _QWORD *v148;
  _QWORD *v149;
  _QWORD *v150;
  _QWORD *v151;
  _QWORD *v152;
  _QWORD *v153;
  _QWORD *v154;
  _QWORD *v155;
  _QWORD *v156;
  _QWORD *v157;
  _QWORD *v158;
  _QWORD *v159;
  _QWORD *v160;
  _QWORD *v161;
  _QWORD *v162;
  _QWORD *v163;
  _QWORD *v164;
  _QWORD *v165;
  _QWORD *v166;
  _QWORD *v167;
  _QWORD *v168;
  _QWORD *v169;
  _QWORD *v170;
  _QWORD *v171;
  _QWORD *v172;
  _QWORD *v173;
  int v174;
  _QWORD *v175;
  _QWORD *v176;
  _QWORD *v177;
  _QWORD *v178;
  _QWORD *v179;
  _QWORD *v180;
  _QWORD *v181;
  _QWORD *v182;
  _QWORD *v183;
  _QWORD *v184;
  _QWORD *v185;
  _QWORD *v186;
  _QWORD *v187;
  _QWORD *v188;
  _QWORD *v189;
  _QWORD *v190;
  _QWORD *v191;
  _QWORD *v192;
  _QWORD *v193;
  _QWORD *v194;
  _QWORD *v195;
  _QWORD *v196;
  _QWORD *v197;
  _QWORD *v198;
  _QWORD *v199;
  _QWORD *v200;
  _QWORD *v201;
  _QWORD *v202;
  _QWORD *v203;
  _QWORD *v204;
  _QWORD *v205;
  _QWORD *v206;
  _QWORD *v207;
  _QWORD *v208;
  _QWORD *v209;
  _QWORD *v210;
  _QWORD *v211;
  _QWORD *v212;
  _QWORD *v213;
  _QWORD *v214;
  _QWORD *v215;
  _QWORD *v216;
  _QWORD *v217;
  _QWORD *v218;
  _QWORD *v219;
  _QWORD *v220;
  _QWORD *v221;
  _QWORD *v222;
  _QWORD *v223;
  _QWORD *v224;
  _QWORD *v225;
  _QWORD *v226;
  _QWORD *v227;
  _QWORD *v228;
  _QWORD *v229;
  _QWORD *v230;
  _QWORD *v231;
  _QWORD *v232;
  _QWORD *v233;
  _QWORD *v234;
  _QWORD *v235;
  _QWORD *v236;
  _QWORD *v237;
  _QWORD *v238;
  _QWORD *v239;
  _QWORD *v240;
  _QWORD *v241;
  _QWORD *v242;
  _QWORD *v243;
  _QWORD *v244;
  _QWORD *v245;
  _QWORD *v246;
  _QWORD *v247;
  _QWORD *v248;
  _QWORD *v249;
  _QWORD *v250;
  _QWORD *v251;
  _QWORD *v252;
  _QWORD *v253;
  _QWORD *v254;
  _QWORD *v255;
  _QWORD *v256;
  _QWORD *v257;
  _QWORD *v258;
  _QWORD *v259;
  _QWORD *v260;
  _QWORD *v261;
  _QWORD *v262;
  _QWORD *v263;
  _QWORD *v264;
  _QWORD *v265;
  uint64_t v266;
  _QWORD *v267;
  _QWORD *v268;
  _QWORD *v269;
  _QWORD *v270;
  _QWORD *v271;
  _QWORD *v272;
  _QWORD *v273;
  _QWORD *v274;
  _QWORD *v275;
  _QWORD *v276;
  _QWORD *v277;
  _QWORD *v278;
  _QWORD *v279;
  _QWORD *v280;
  _QWORD *v281;
  _QWORD *v282;
  _QWORD *v283;
  _QWORD *v284;
  _QWORD *v285;
  _QWORD *v286;
  _QWORD *v287;
  _QWORD *v288;
  _QWORD *v289;
  _QWORD *v290;
  _QWORD *v291;
  _QWORD *v292;
  _QWORD *v293;
  _QWORD *v294;
  _QWORD *v295;
  _QWORD *v296;
  _QWORD *v297;
  _QWORD *v298;
  _QWORD *v299;
  _QWORD *v300;
  _QWORD *v301;
  _QWORD *v302;
  _QWORD *v303;
  _QWORD *v304;
  _QWORD *v305;
  _QWORD *v306;
  _QWORD *v307;
  _QWORD *v308;
  _QWORD *v309;
  _QWORD *v310;
  _QWORD *v311;
  _QWORD *v312;
  _QWORD *v313;
  _QWORD *v314;
  _QWORD *v315;
  _QWORD *v316;
  _QWORD *v317;
  _QWORD *v318;
  _QWORD *v319;
  _QWORD *v320;
  _QWORD *v321;
  _QWORD *v322;
  void *v323;
  _QWORD *v324;
  _QWORD *v325;
  uint64_t v326;
  _QWORD *v327;
  _QWORD *v328;
  _QWORD *v329;
  uint64_t v330;
  _QWORD *v331;
  _QWORD *v332;
  _QWORD *v333;
  _QWORD *v334;
  _QWORD *v335;
  _QWORD *v336;
  _QWORD *v337;
  _QWORD *v338;
  _QWORD *v339;
  _QWORD *v340;
  _QWORD *v341;
  _QWORD *v342;
  _QWORD *v343;
  _QWORD *v344;
  _QWORD *v345;
  _QWORD *v346;
  _QWORD *v347;
  _QWORD *v348;
  _QWORD *v349;
  _QWORD *v350;
  _QWORD *v351;
  _QWORD *v352;
  _QWORD *v353;
  _QWORD *v354;
  _QWORD *v355;
  uint64_t v356;
  _QWORD *v357;
  _QWORD *v358;
  _QWORD *v359;
  _QWORD *v360;
  _QWORD *v361;
  _QWORD *v362;
  _QWORD *v363;
  _QWORD *v364;
  _QWORD *v365;
  _QWORD *v366;
  _QWORD *v367;
  _QWORD *v368;
  _QWORD *v369;
  _QWORD *v370;
  _QWORD *v371;
  _QWORD *v372;
  _QWORD *v373;
  _QWORD *v374;
  _QWORD *v375;
  _QWORD *v376;
  _QWORD *v377;
  _QWORD *v378;
  _QWORD *v379;
  _QWORD *v380;
  _QWORD *v381;
  _QWORD *v382;
  _QWORD *v383;
  _QWORD *v384;
  _QWORD *v385;
  _QWORD *v386;
  _QWORD *v387;
  _QWORD *v388;
  _QWORD *v389;
  _QWORD *v390;
  _QWORD *v391;
  _QWORD *v392;
  _QWORD *v393;
  _QWORD *v394;
  _QWORD *v395;
  _QWORD *v396;
  _QWORD *v397;
  _QWORD *v398;
  _QWORD *v399;
  _QWORD *v400;
  _QWORD *v401;
  _QWORD *v402;
  _QWORD *v403;
  _QWORD *v404;
  _QWORD *v405;
  _QWORD *v406;
  _QWORD *v407;
  _QWORD *v408;
  _QWORD *v409;
  _QWORD *v410;
  _QWORD *v411;
  _QWORD *v412;
  _QWORD *v413;
  _QWORD *v414;
  _QWORD *v415;
  _QWORD *v416;
  _QWORD *v417;
  _QWORD *v418;
  _QWORD *v419;
  _QWORD *v420;
  _QWORD *v421;
  _QWORD *v422;
  _QWORD *v423;
  _QWORD *v424;
  _QWORD *v425;
  _QWORD *v426;
  _QWORD *v427;
  _QWORD *v428;
  uint64_t v429;
  _QWORD *v430;
  _QWORD *v431;
  _QWORD *v432;
  _QWORD *v433;
  _QWORD *v434;
  _QWORD *v435;
  _QWORD *v436;
  _QWORD *v437;
  _QWORD *v438;
  _QWORD *v439;
  _QWORD *v440;
  _QWORD *v441;
  _QWORD *v442;
  _QWORD *v443;
  _QWORD *v444;
  _QWORD *v445;
  _QWORD *v446;
  _QWORD *v447;
  _QWORD *v448;
  _QWORD *v449;
  _QWORD *v450;
  _QWORD *v451;
  _QWORD *v452;
  _QWORD *v453;
  _QWORD *v454;
  _QWORD *v455;
  _QWORD *v456;
  _QWORD *v457;
  _QWORD *v458;
  _QWORD *v459;
  _QWORD *v460;
  _QWORD *v461;
  _QWORD *v462;
  _QWORD *v463;
  _QWORD *v464;
  _QWORD *v465;
  _QWORD *v466;
  _QWORD *v467;
  _QWORD *v468;
  _QWORD *v469;
  _QWORD *v470;
  _QWORD *v471;
  _QWORD *v472;
  _QWORD *v473;
  _QWORD *v474;
  _QWORD *v475;
  _QWORD *v476;
  _QWORD *v477;
  _QWORD *v478;
  _QWORD *v479;
  _QWORD *v480;
  _QWORD *v481;
  _QWORD *v482;
  _QWORD *v483;
  _QWORD *v484;
  _QWORD *v485;
  _QWORD *v486;
  _QWORD *v487;
  _QWORD *v488;
  _QWORD *v489;
  _QWORD *v490;
  _QWORD *v491;
  _QWORD *v492;
  _QWORD *v493;
  _QWORD *v494;
  _QWORD *v495;
  _QWORD *v496;
  _QWORD *v497;
  _QWORD *v498;
  _QWORD *v499;
  _QWORD *v500;
  _QWORD *v501;
  _QWORD *v502;
  _QWORD *v503;
  _QWORD *v504;
  _QWORD *v505;
  _QWORD *v506;
  _QWORD *v507;
  _QWORD *v508;
  _QWORD *v509;
  _QWORD *v510;
  _QWORD *v511;
  _QWORD *v512;
  _QWORD *v513;
  _QWORD *v514;
  _QWORD *v515;
  _QWORD *v516;
  _QWORD *v517;
  _QWORD *v518;
  _QWORD *v519;
  _QWORD *v520;
  _QWORD *v521;
  _QWORD *v522;
  _QWORD *v523;
  _QWORD *v524;
  _QWORD *v525;
  _QWORD *v526;
  _QWORD *v527;
  _QWORD *v528;
  _QWORD *v529;
  uint64_t v530;
  _QWORD *v531;
  _QWORD *v532;
  _QWORD *v533;
  void *v534;
  _QWORD *v535;
  _QWORD *v536;
  _QWORD *v537;
  _QWORD *v538;
  _QWORD *v539;
  _QWORD *v540;
  uint64_t v541;
  _QWORD *v542;
  _QWORD *v543;
  _QWORD *v544;
  _QWORD *v545;
  _QWORD *v546;
  _QWORD *v547;
  _QWORD *v548;
  _QWORD *v549;
  _QWORD *v550;
  _QWORD *v551;
  _QWORD *v552;
  _QWORD *v553;
  _QWORD *v554;
  _QWORD *v555;
  _QWORD *v556;
  _QWORD *v557;
  _QWORD *v558;
  _QWORD *v559;
  _QWORD *v560;
  _QWORD *v561;
  _QWORD *v562;
  _QWORD *v563;
  _QWORD *v564;
  _QWORD *v565;
  _QWORD *v566;
  _QWORD *v567;
  _QWORD *v568;
  _QWORD *v569;
  _QWORD *v570;
  _QWORD *v571;
  _QWORD *v572;
  _QWORD *v573;
  _QWORD *v574;
  _QWORD *v575;
  _QWORD *v576;
  _QWORD *v577;
  _QWORD *v578;
  _QWORD *v579;
  _QWORD *v580;
  _QWORD *v581;
  _QWORD *v582;
  _QWORD *v583;
  _QWORD *v584;
  _QWORD *v585;
  _QWORD *v586;
  _QWORD *v587;
  _QWORD *v588;
  _QWORD *v589;
  _QWORD *v590;
  _QWORD *v591;
  _QWORD *v592;
  _QWORD *v593;
  _QWORD *v594;
  _QWORD *v595;
  _QWORD *v596;
  _QWORD *v597;
  _QWORD *v598;
  _QWORD *v599;
  _QWORD *v600;
  _QWORD *v601;
  _QWORD *v602;
  _QWORD *v603;
  _QWORD *v604;
  _QWORD *v605;
  _QWORD *v606;
  _QWORD *v607;
  _QWORD *v608;
  _QWORD *v609;
  uint64_t v610;
  _QWORD *v611;
  _QWORD *v612;
  _QWORD *v613;
  _QWORD *v614;
  _QWORD *v615;
  _QWORD *v616;
  _QWORD *v617;
  _QWORD *v618;
  _QWORD *v619;
  _QWORD *v620;
  _QWORD *v621;
  _QWORD *v622;
  _QWORD *v623;
  _QWORD *v624;
  _QWORD *v625;
  _QWORD *v626;
  _QWORD *v627;
  _QWORD *v628;
  _QWORD *v629;
  _QWORD *v630;
  _QWORD *v631;
  _QWORD *v632;
  _QWORD *v633;
  _QWORD *v634;
  _QWORD *v635;
  _QWORD *v636;
  _QWORD *v637;
  _QWORD *v638;
  _QWORD *v639;
  _QWORD *v640;
  _QWORD *v641;
  _QWORD *v642;
  _QWORD *v643;
  _QWORD *v644;
  _QWORD *v645;
  _QWORD *v646;
  _QWORD *v647;
  _QWORD *v648;
  _QWORD *v649;
  _QWORD *v650;
  _QWORD *v651;
  _QWORD *v652;
  _QWORD *v653;
  _QWORD *v654;
  _QWORD *v655;
  _QWORD *v656;
  _QWORD *v657;
  _QWORD *v658;
  _QWORD *v659;
  _QWORD *v660;
  _QWORD *v661;
  _QWORD *v662;
  _QWORD *v663;
  _QWORD *v664;
  _QWORD *v665;
  _QWORD *v666;
  _QWORD *v667;
  _QWORD *v668;
  _QWORD *v669;
  _QWORD *v670;
  _QWORD *v671;
  _QWORD *v672;
  _QWORD *v673;
  _QWORD *v674;
  _QWORD *v675;
  _QWORD *v676;
  _QWORD *v677;
  _QWORD *v678;
  _QWORD *v679;
  _QWORD *v680;
  _QWORD *v681;
  _QWORD *v682;
  _QWORD *v683;
  _QWORD *v684;
  _QWORD *v685;
  _QWORD *v686;
  _QWORD *v687;
  _QWORD *v688;
  _QWORD *v689;
  _QWORD *v690;
  _QWORD *v691;
  _QWORD *v692;
  _QWORD *v693;
  _QWORD *v694;
  _QWORD *v695;
  _QWORD *v696;
  _QWORD *v697;
  int v698;
  _QWORD *v699;
  _QWORD *v700;
  _QWORD *v701;
  _QWORD *v702;
  _QWORD *v703;
  _QWORD *v704;
  _QWORD *v705;
  _QWORD *v706;
  _QWORD *v707;
  _QWORD *v708;
  _QWORD *v709;
  _QWORD *v710;
  _QWORD *v711;
  _QWORD *v712;
  _QWORD *v713;
  _QWORD *v714;
  _QWORD *v715;
  _QWORD *v716;
  _QWORD *v717;
  _QWORD *v718;
  _QWORD *v719;
  _QWORD *v720;
  _QWORD *v721;
  _QWORD *v722;
  _QWORD *v723;
  _QWORD *v724;
  _QWORD *v725;
  _QWORD *v726;
  _QWORD *v727;
  _QWORD *v728;
  _QWORD *v729;
  _QWORD *v730;
  _QWORD *v731;
  _QWORD *v732;
  _QWORD *v733;
  _QWORD *v734;
  _QWORD *v735;
  _QWORD *v736;
  _QWORD *v737;
  _QWORD *v738;
  _QWORD *v739;
  _QWORD *v740;
  _QWORD *v741;
  _QWORD *v742;
  _QWORD *v743;
  _QWORD *v744;
  _QWORD *v745;
  _QWORD *v746;
  _QWORD *v747;
  _QWORD *v748;
  _QWORD *v749;
  _QWORD *v750;
  _QWORD *v751;
  _QWORD *v752;
  _QWORD *v753;
  _QWORD *v754;
  _QWORD *v755;
  _QWORD *v756;
  _QWORD *v757;
  _QWORD *v758;
  _QWORD *v759;
  _QWORD *v760;
  _QWORD *v761;
  _QWORD *v762;
  _QWORD *v763;
  _QWORD *v764;
  _QWORD *v765;
  _QWORD *v766;
  _QWORD *v767;
  _QWORD *v768;
  _QWORD *v769;
  _QWORD *v770;
  _QWORD *v771;
  _QWORD *v772;
  _QWORD *v773;
  _QWORD *v774;
  _QWORD *v775;
  _QWORD *v776;
  _QWORD *v777;
  _QWORD *v778;
  _QWORD *v779;
  _QWORD *v780;
  _QWORD *v781;
  _QWORD *v782;
  _QWORD *v783;
  _QWORD *v784;
  _QWORD *v785;
  _QWORD *v786;
  _QWORD *v787;
  _QWORD *v788;
  uint64_t v789;
  _QWORD *v790;
  _QWORD *v791;
  _QWORD *v792;
  _QWORD *v793;
  _QWORD *v794;
  _QWORD *v795;
  _QWORD *v796;
  _QWORD *v797;
  _QWORD *v798;
  _QWORD *v799;
  _QWORD *v800;
  _QWORD *v801;
  _QWORD *v802;
  _QWORD *v803;
  _QWORD *v804;
  _QWORD *v805;
  _QWORD *v806;
  _QWORD *v807;
  _QWORD *v808;
  _QWORD *v809;
  _QWORD *v810;
  _QWORD *v811;
  _QWORD *v812;
  _QWORD *v813;
  _QWORD *v814;
  _QWORD *v815;
  _QWORD *v816;
  _QWORD *v817;
  _QWORD *v818;
  _QWORD *v819;
  _QWORD *v820;
  _QWORD *v821;
  _QWORD *v822;
  _QWORD *v823;
  _QWORD *v824;
  _QWORD *v825;
  _QWORD *v826;
  _QWORD *v827;
  _QWORD *v828;
  _QWORD *v829;
  _QWORD *v830;
  _QWORD *v831;
  _QWORD *v832;
  _QWORD *v833;
  _QWORD *v834;
  _QWORD *v835;
  _QWORD *v836;
  _QWORD *v837;
  _QWORD *v838;
  _QWORD *v839;
  _QWORD *v840;
  _QWORD *v841;
  _QWORD *v842;
  _QWORD *v843;
  _QWORD *v844;
  _QWORD *v845;
  _QWORD *v846;
  _QWORD *v847;
  _QWORD *v848;
  uint64_t v849;
  _QWORD *v850;
  _QWORD *v851;
  _QWORD *v852;
  _QWORD *v853;
  _QWORD *v854;
  _QWORD *v855;
  _QWORD *v856;
  _QWORD *v857;
  _QWORD *v858;
  _QWORD *v859;
  _QWORD *v860;
  _QWORD *v861;
  _QWORD *v862;
  _QWORD *v863;
  _QWORD *v864;
  _QWORD *v865;
  _QWORD *v866;
  _QWORD *v867;
  _QWORD *v868;
  _QWORD *v869;
  _QWORD *v870;
  _QWORD *v871;
  _QWORD *v872;
  _QWORD *v873;
  _QWORD *v874;
  uint64_t v875;
  _QWORD *v876;
  _QWORD *v877;
  _QWORD *v878;
  _QWORD *v879;
  _QWORD *v880;
  _QWORD *v881;
  _QWORD *v882;
  _QWORD *v883;
  _QWORD *v884;
  _QWORD *v885;
  _QWORD *v886;
  _QWORD *v887;
  _QWORD *v888;
  _QWORD *v889;
  _QWORD *v890;
  _QWORD *v891;
  _QWORD *v892;
  _QWORD *v893;
  _QWORD *v894;
  _QWORD *v895;
  _QWORD *v896;
  _QWORD *v897;
  _QWORD *v898;
  _QWORD *v899;
  _QWORD *v900;
  _QWORD *v901;
  _QWORD *v902;
  _QWORD *v903;
  _QWORD *v904;
  _QWORD *v905;
  _QWORD *v906;
  _QWORD *v907;
  _QWORD *v908;
  _QWORD *v909;
  _QWORD *v910;
  _QWORD *v911;
  _QWORD *v912;
  _QWORD *v913;
  _QWORD *v914;
  _QWORD *v915;
  _QWORD *v916;
  _QWORD *v917;
  _QWORD *v918;
  _QWORD *v919;
  _QWORD *v920;
  _QWORD *v921;
  _QWORD *v922;
  _QWORD *v923;
  _QWORD *v924;
  _QWORD *v925;
  _QWORD *v926;
  _QWORD *v927;
  _QWORD *v928;
  _QWORD *v929;
  _QWORD *v930;
  _QWORD *v931;
  _QWORD *v932;
  _QWORD *v933;
  _QWORD *v934;
  _QWORD *v935;
  _QWORD *v936;
  _QWORD *v937;
  _QWORD *v938;
  _QWORD *v939;
  _QWORD *v940;
  _QWORD *v941;
  _QWORD *v942;
  _QWORD *v943;
  _QWORD *v944;
  _QWORD *v945;
  _QWORD *v946;
  _QWORD *v947;
  uint64_t v948;
  _QWORD *v949;
  _QWORD *v950;
  _QWORD *v951;
  _QWORD *v952;
  _QWORD *v953;
  _QWORD *v954;
  _QWORD *v955;
  _QWORD *v956;
  _QWORD *v957;
  _QWORD *v958;
  _QWORD *v959;
  _QWORD *v960;
  _QWORD *v961;
  _QWORD *v962;
  _QWORD *v963;
  _QWORD *v964;
  _QWORD *v965;
  _QWORD *v966;
  _QWORD *v967;
  _QWORD *v968;
  _QWORD *v969;
  _QWORD *v970;
  _QWORD *v971;
  _QWORD *v972;
  _QWORD *v973;
  _QWORD *v974;
  _QWORD *v975;
  _QWORD *v976;
  _QWORD *v977;
  _QWORD *v978;
  _QWORD *v979;
  _QWORD *v980;
  _QWORD *v981;
  _QWORD *v982;
  _QWORD *v983;
  _QWORD *v984;
  _QWORD *v985;
  _QWORD *v986;
  _QWORD *v987;
  _QWORD *v988;
  _QWORD *v989;
  _QWORD *v990;
  _QWORD *v991;
  _QWORD *v992;
  _QWORD *v993;
  _QWORD *v994;
  _QWORD *v995;
  _QWORD *v996;
  _QWORD *v997;
  _QWORD *v998;
  _QWORD *v999;
  _QWORD *v1000;
  _QWORD *v1001;
  _QWORD *v1002;
  _QWORD *v1003;
  _QWORD *v1004;
  _QWORD *v1005;
  _QWORD *v1006;
  _QWORD *v1007;
  _QWORD *v1008;
  _QWORD *v1009;
  _QWORD *v1010;
  _QWORD *v1011;
  _QWORD *v1012;
  _QWORD *v1013;
  _QWORD *v1014;
  _QWORD *v1015;
  _QWORD *v1016;
  _QWORD *v1017;
  _QWORD *v1018;
  _QWORD *v1019;
  _QWORD *v1020;
  _QWORD *v1021;
  _QWORD *v1022;
  _QWORD *v1023;
  _QWORD *v1024;
  _QWORD *v1025;
  _QWORD *v1026;
  _QWORD *v1027;
  _QWORD *v1028;
  _QWORD *v1029;
  _QWORD *v1030;
  _QWORD *v1031;
  _QWORD *v1032;
  _QWORD *v1033;
  _QWORD *v1034;
  _QWORD *v1035;
  _QWORD *v1036;
  _QWORD *v1037;
  _QWORD *v1038;
  _QWORD *v1039;
  _QWORD *v1040;
  _QWORD *v1041;
  _QWORD *v1042;
  _QWORD *v1043;
  _QWORD *v1044;
  _QWORD *v1045;
  _QWORD *v1046;
  _QWORD *v1047;
  uint64_t v1048;
  _QWORD *v1049;
  _QWORD *v1050;
  _QWORD *v1051;
  _QWORD *v1052;
  _QWORD *v1053;
  void (*v1054)(uint64_t, int, uint64_t, unsigned int, int, uint64_t);
  uint64_t v1055;
  void *v1056;
  _BYTE *(*v1057)(uint64_t, int, unsigned int, uint64_t);
  _QWORD *v1058;
  _QWORD *v1059;

  v1 = (unsigned __int8 *)(result + 32492);
  v2 = *(uint64_t (***)(uint64_t))(result + 28976);
  v3 = *(uint64_t (***)(uint64_t))(result + 28984);
  v4 = 1036;
  v5 = v3;
  do
  {
    if (!*v5++)
      v3 = v2;
    *v3 = glInvalidFunction;
    ++v2;
    v3 = v5;
    --v4;
  }
  while (v4);
  v7 = *(unsigned __int8 *)(result + 32501);
  if ((v7 - 3) >= 2)
  {
    if (v7 != 2)
      goto LABEL_3098;
    v324 = *(_QWORD **)(result + 28984);
    v325 = *(_QWORD **)(result + 28976);
    if (v324[1])
      v326 = *(_QWORD *)(result + 28984);
    else
      v326 = *(_QWORD *)(result + 28976);
    if (*(_QWORD *)(result + 27648))
    {
      *(_QWORD *)(v326 + 8) = glAlphaFunc_Comp;
      if (v324[968])
        v327 = v324;
      else
        v327 = v325;
      v327[968] = glAlphaFuncx_PackThread;
      if (v324[7])
        v328 = v324;
      else
        v328 = v325;
      v328[7] = glBlendFunc_Comp;
      if (v324[49])
        v329 = v324;
      else
        v329 = v325;
      v329[49] = glColorMask_Comp;
      v330 = v324[59];
      if (v324[60])
        v331 = v324;
      else
        v331 = v325;
      v331[60] = glDepthFunc_Comp;
      if (v324[61])
        v332 = v324;
      else
        v332 = v325;
      v332[61] = glDepthMask_Comp;
      if (v324[161])
        v333 = v324;
      else
        v333 = v325;
      v333[161] = glLogicOp_Comp;
      if (v324[254])
        v334 = v324;
      else
        v334 = v325;
      v334[254] = glStencilFunc_Comp;
      if (v324[255])
        v335 = v324;
      else
        v335 = v325;
      v335[255] = glStencilMask_Comp;
      if (v324[256])
        v336 = v324;
      else
        v336 = v325;
      v336[256] = glStencilOp_Comp;
      if (v324[251])
        v337 = v324;
      else
        v337 = v325;
      v337[251] = glScissor_Comp;
      if (v324[10])
        v338 = v324;
      else
        v338 = v325;
      v338[10] = glClear_Comp;
      if (v324[12])
        v339 = v324;
      else
        v339 = v325;
      v339[12] = glClearColor_Comp;
      if (v324[969])
        v340 = v324;
      else
        v340 = v325;
      v340[969] = glClearColorx_PackThread;
      if (v324[15])
        v341 = v324;
      else
        v341 = v325;
      v341[15] = glClearStencil_Comp;
      if (v324[878])
        v342 = v324;
      else
        v342 = v325;
      v342[878] = glClearDepthf_PackThread;
      if (v324[970])
        v343 = v324;
      else
        v343 = v325;
      v343[970] = glClearDepthx_PackThread;
      if (v324[37])
        v344 = v324;
      else
        v344 = v325;
      v344[37] = glColor4f_Comp;
      if (v324[43])
        v345 = v324;
      else
        v345 = v325;
      v345[43] = glColor4ub_Comp;
      if (v324[973])
        v346 = v324;
      else
        v346 = v325;
      v346[973] = glColor4x_PackThread;
      if (v324[182])
        v347 = v324;
      else
        v347 = v325;
      v347[182] = glNormal3f_Comp;
      if (v324[995])
        v348 = v324;
      else
        v348 = v325;
      v348[995] = glNormal3x_PackThread;
      if (v324[369])
        v349 = v324;
      else
        v349 = v325;
      v349[369] = glMultiTexCoord4f_Comp;
      if (v324[1007])
        v350 = v324;
      else
        v350 = v325;
      v350[1007] = glMultiTexCoord4x_PackThread;
      if (v324[334])
        v351 = v324;
      else
        v351 = v325;
      v351[334] = glVertexPointer_PackThread;
      if (v324[51])
        v352 = v324;
      else
        v352 = v325;
      v352[51] = glColorPointer_PackThread;
      if (v324[188])
        v353 = v324;
      else
        v353 = v325;
      v353[188] = glNormalPointer_PackThread;
      if (v324[289])
        v354 = v324;
      else
        v354 = v325;
      v354[289] = glTexCoordPointer_PackThread;
      if (v324[341])
        v355 = v324;
      else
        v355 = v325;
      v355[341] = glClientActiveTexture_PackThread;
      v356 = v324[63];
      if (v324[64])
        v357 = v324;
      else
        v357 = v325;
      v357[64] = glDisableClientState_PackThread;
      if (v324[73])
        v358 = v324;
      else
        v358 = v325;
      v358[73] = glEnableClientState_PackThread;
      if (v324[65])
        v359 = v324;
      else
        v359 = v325;
      v359[65] = glDrawArrays_PackThread;
      if (v324[67])
        v360 = v324;
      else
        v360 = v325;
      v360[67] = glDrawElements_PackThread;
      if (v324[98])
        v361 = v324;
      else
        v361 = v325;
      v361[98] = glGenTextures_ExecThread;
      if (v330)
        v362 = v324;
      else
        v362 = v325;
      v362[59] = glDeleteTextures_ExecThread;
      if (v324[5])
        v363 = v324;
      else
        v363 = v325;
      v363[5] = glBindTexture_Comp;
      if (v324[145])
        v364 = v324;
      else
        v364 = v325;
      v364[145] = glIsTexture_ExecThread;
      if (v324[342])
        v365 = v324;
      else
        v365 = v325;
      v365[342] = glActiveTexture_Comp;
      if (v324[54])
        v366 = v324;
      else
        v366 = v325;
      v366[54] = glCopyTexImage2D_Comp;
      if (v324[56])
        v367 = v324;
      else
        v367 = v325;
      v367[56] = glCopyTexSubImage2D_Comp;
      if (v324[301])
        v368 = v324;
      else
        v368 = v325;
      v368[301] = glTexImage2D_PackThread;
      if (v324[307])
        v369 = v324;
      else
        v369 = v325;
      v369[307] = glTexSubImage2D_PackThread;
      if (v324[380])
        v370 = v324;
      else
        v370 = v325;
      v370[380] = glCompressedTexImage2D_PackThread;
      if (v324[383])
        v371 = v324;
      else
        v371 = v325;
      v371[383] = glCompressedTexSubImage2D_PackThread;
      if (v324[302])
        v372 = v324;
      else
        v372 = v325;
      v372[302] = glTexParameterf_Comp;
      if (v324[303])
        v373 = v324;
      else
        v373 = v325;
      v373[303] = glTexParameterfv_Comp;
      if (v324[304])
        v374 = v324;
      else
        v374 = v325;
      v374[304] = glTexParameteri_Comp;
      if (v324[305])
        v375 = v324;
      else
        v375 = v325;
      v375[305] = glTexParameteriv_Comp;
      if (v324[1004])
        v376 = v324;
      else
        v376 = v325;
      v376[1004] = glTexParameterx_PackThread;
      if (v324[1005])
        v377 = v324;
      else
        v377 = v325;
      v377[1005] = glTexParameterxv_PackThread;
      if (v324[126])
        v378 = v324;
      else
        v378 = v325;
      v378[126] = glGetTexParameterfv_ExecThread;
      if (v324[127])
        v379 = v324;
      else
        v379 = v325;
      v379[127] = glGetTexParameteriv_ExecThread;
      if (v324[290])
        v380 = v324;
      else
        v380 = v325;
      v380[290] = glTexEnvf_Comp;
      if (v324[291])
        v381 = v324;
      else
        v381 = v325;
      v381[291] = glTexEnvfv_Comp;
      if (v324[292])
        v382 = v324;
      else
        v382 = v325;
      v382[292] = glTexEnvi_Comp;
      if (v324[293])
        v383 = v324;
      else
        v383 = v325;
      v383[293] = glTexEnviv_Comp;
      if (v324[1002])
        v384 = v324;
      else
        v384 = v325;
      v384[1002] = glTexEnvx_PackThread;
      if (v324[1003])
        v385 = v324;
      else
        v385 = v325;
      v385[1003] = glTexEnvxv_PackThread;
      if (v324[89])
        v386 = v324;
      else
        v386 = v325;
      v386[89] = glFinish_ExecThread;
      if (v324[90])
        v387 = v324;
      else
        v387 = v325;
      v387[90] = glFlush_ExecThread;
      if (v324[99])
        v388 = v324;
      else
        v388 = v325;
      v388[99] = glGetBooleanv_ExecThread;
      if (v324[102])
        v389 = v324;
      else
        v389 = v325;
      v389[102] = glGetError_ExecThread;
      if (v324[103])
        v390 = v324;
      else
        v390 = v325;
      v390[103] = glGetFloatv_ExecThread;
      if (v324[104])
        v391 = v324;
      else
        v391 = v325;
      v391[104] = glGetIntegerv_ExecThread;
      if (v324[105])
        v392 = v324;
      else
        v392 = v325;
      v392[105] = glGetLightfv_ExecThread;
      if (v324[110])
        v393 = v324;
      else
        v393 = v325;
      v393[110] = glGetMaterialfv_ExecThread;
      if (v324[115])
        v394 = v324;
      else
        v394 = v325;
      v394[115] = glGetPointerv_ExecThread;
      if (v324[117])
        v395 = v324;
      else
        v395 = v325;
      v395[117] = glGetString_ExecThread;
      if (v324[118])
        v396 = v324;
      else
        v396 = v325;
      v396[118] = glGetTexEnvfv_ExecThread;
      if (v324[119])
        v397 = v324;
      else
        v397 = v325;
      v397[119] = glGetTexEnviv_ExecThread;
      if (v324[979])
        v398 = v324;
      else
        v398 = v325;
      v398[979] = glGetClipPlanef_ExecThread;
      if (v324[980])
        v399 = v324;
      else
        v399 = v325;
      v399[980] = glGetClipPlanex_ExecThread;
      if (v324[981])
        v400 = v324;
      else
        v400 = v325;
      v400[981] = glGetFixedv_ExecThread;
      if (v324[982])
        v401 = v324;
      else
        v401 = v325;
      v401[982] = glGetLightxv_ExecThread;
      if (v324[983])
        v402 = v324;
      else
        v402 = v325;
      v402[983] = glGetMaterialxv_ExecThread;
      if (v324[984])
        v403 = v324;
      else
        v403 = v325;
      v403[984] = glGetTexEnvxv_ExecThread;
      if (v324[985])
        v404 = v324;
      else
        v404 = v325;
      v404[985] = glGetTexParameterxv_ExecThread;
      if (v324[72])
        v405 = v324;
      else
        v405 = v325;
      v405[72] = glEnable_Comp;
      if (v356)
        v406 = v324;
      else
        v406 = v325;
      v406[63] = glDisable_Comp;
      if (v324[143])
        v407 = v324;
      else
        v407 = v325;
      v407[143] = glIsEnabled_ExecThread;
      if (v324[642])
        v408 = v324;
      else
        v408 = v325;
      v408[642] = glBindBuffer_PackThread;
      if (v324[643])
        v409 = v324;
      else
        v409 = v325;
      v409[643] = glDeleteBuffers_ExecThread;
      if (v324[644])
        v410 = v324;
      else
        v410 = v325;
      v410[644] = glGenBuffers_ExecThread;
      if (v324[645])
        v411 = v324;
      else
        v411 = v325;
      v411[645] = glIsBuffer_ExecThread;
      if (v324[646])
        v412 = v324;
      else
        v412 = v325;
      v412[646] = glBufferData_PackThread;
      if (v324[647])
        v413 = v324;
      else
        v413 = v325;
      v413[647] = glBufferSubData_PackThread;
      if (v324[649])
        v414 = v324;
      else
        v414 = v325;
      v414[649] = glMapBuffer_PackThread;
      if (v324[650])
        v415 = v324;
      else
        v415 = v325;
      v415[650] = glUnmapBuffer_PackThread;
      if (v324[651])
        v416 = v324;
      else
        v416 = v325;
      v416[651] = glGetBufferParameteriv_ExecThread;
      if (v324[652])
        v417 = v324;
      else
        v417 = v325;
      v417[652] = glGetBufferPointerv_ExecThread;
      if (v324[795])
        v418 = v324;
      else
        v418 = v325;
      v418[795] = glMapBufferRange_ExecThread;
      if (v324[796])
        v419 = v324;
      else
        v419 = v325;
      v419[796] = glFlushMappedBufferRange_PackThread;
      if (v324[665])
        v420 = v324;
      else
        v420 = v325;
      v420[665] = glIsRenderbufferEXT_ExecThread;
      if (v324[666])
        v421 = v324;
      else
        v421 = v325;
      v421[666] = glBindRenderbufferEXT_PackThread;
      if (v324[667])
        v422 = v324;
      else
        v422 = v325;
      v422[667] = glDeleteRenderbuffersEXT_ExecThread;
      if (v324[668])
        v423 = v324;
      else
        v423 = v325;
      v423[668] = glGenRenderbuffersEXT_ExecThread;
      if (v324[669])
        v424 = v324;
      else
        v424 = v325;
      v424[669] = glRenderbufferStorageEXT_PackThread;
      if (v324[670])
        v425 = v324;
      else
        v425 = v325;
      v425[670] = glGetRenderbufferParameterivEXT_ExecThread;
      if (v324[671])
        v426 = v324;
      else
        v426 = v325;
      v426[671] = glIsFramebufferEXT_ExecThread;
      if (!v324[672])
        v324 = v325;
      v324[672] = glBindFramebufferEXT_PackThread;
      v427 = *(_QWORD **)(result + 28984);
      v428 = *(_QWORD **)(result + 28976);
      if (v427[673])
        v429 = *(_QWORD *)(result + 28984);
      else
        v429 = *(_QWORD *)(result + 28976);
      *(_QWORD *)(v429 + 5384) = glDeleteFramebuffersEXT_ExecThread;
      if (v427[674])
        v430 = v427;
      else
        v430 = v428;
      v430[674] = glGenFramebuffersEXT_ExecThread;
      if (v427[675])
        v431 = v427;
      else
        v431 = v428;
      v431[675] = glCheckFramebufferStatusEXT_ExecThread;
      if (v427[677])
        v432 = v427;
      else
        v432 = v428;
      v432[677] = glFramebufferTexture2DEXT_PackThread;
      if (v427[679])
        v433 = v427;
      else
        v433 = v428;
      v433[679] = glFramebufferRenderbufferEXT_PackThread;
      if (v427[680])
        v434 = v427;
      else
        v434 = v428;
      v434[680] = glGetFramebufferAttachmentParameterivEXT_ExecThread;
      if (v427[681])
        v435 = v427;
      else
        v435 = v428;
      v435[681] = glGenerateMipmapEXT_PackThread;
      if (v427[155])
        v436 = v427;
      else
        v436 = v428;
      v436[155] = glLineWidth_Comp;
      if (v427[990])
        v437 = v427;
      else
        v437 = v428;
      v437[990] = glLineWidthx_PackThread;
      if (v427[199])
        v438 = v427;
      else
        v438 = v428;
      v438[199] = glPointSize_Comp;
      if (v427[998])
        v439 = v427;
      else
        v439 = v428;
      v439[998] = glPointSizex_PackThread;
      if (v427[540])
        v440 = v427;
      else
        v440 = v428;
      v440[540] = glPointParameterf_Comp;
      if (v427[541])
        v441 = v427;
      else
        v441 = v428;
      v441[541] = glPointParameterfv_Comp;
      if (v427[1009])
        v442 = v427;
      else
        v442 = v428;
      v442[1009] = glPointParameterx_PackThread;
      if (v427[1010])
        v443 = v427;
      else
        v443 = v428;
      v443[1010] = glPointParameterxv_PackThread;
      if (v427[201])
        v444 = v427;
      else
        v444 = v428;
      v444[201] = glPolygonOffset_Comp;
      if (v427[999])
        v445 = v427;
      else
        v445 = v428;
      v445[999] = glPolygonOffsetx_PackThread;
      if (v427[57])
        v446 = v427;
      else
        v446 = v428;
      v446[57] = glCullFace_Comp;
      if (v427[95])
        v447 = v427;
      else
        v447 = v428;
      v447[95] = glFrontFace_Comp;
      if (v427[971])
        v448 = v427;
      else
        v448 = v428;
      v448[971] = glClipPlanef_PackThread;
      if (v427[972])
        v449 = v427;
      else
        v449 = v428;
      v449[972] = glClipPlanex_PackThread;
      if (v427[877])
        v450 = v427;
      else
        v450 = v428;
      v450[877] = glDepthRangef_PackThread;
      if (v427[974])
        v451 = v427;
      else
        v451 = v428;
      v451[974] = glDepthRangex_PackThread;
      if (v427[335])
        v452 = v427;
      else
        v452 = v428;
      v452[335] = glViewport_Comp;
      if (v427[91])
        v453 = v427;
      else
        v453 = v428;
      v453[91] = glFogf_Comp;
      if (v427[92])
        v454 = v427;
      else
        v454 = v428;
      v454[92] = glFogfv_Comp;
      if (v427[975])
        v455 = v427;
      else
        v455 = v428;
      v455[975] = glFogx_PackThread;
      if (v427[976])
        v456 = v427;
      else
        v456 = v428;
      v456[976] = glFogxv_PackThread;
      if (v427[174])
        v457 = v427;
      else
        v457 = v428;
      v457[174] = glMatrixMode_Comp;
      if (v427[157])
        v458 = v427;
      else
        v458 = v428;
      v458[157] = glLoadIdentity_Comp;
      if (v427[159])
        v459 = v427;
      else
        v459 = v428;
      v459[159] = glLoadMatrixf_Comp;
      if (v427[991])
        v460 = v427;
      else
        v460 = v428;
      v460[991] = glLoadMatrixx_PackThread;
      if (v427[176])
        v461 = v427;
      else
        v461 = v428;
      v461[176] = glMultMatrixf_Comp;
      if (v427[994])
        v462 = v427;
      else
        v462 = v428;
      v462[994] = glMultMatrixx_PackThread;
      if (v427[996])
        v463 = v427;
      else
        v463 = v428;
      v463[996] = glOrthof_PackThread;
      if (v427[997])
        v464 = v427;
      else
        v464 = v428;
      v464[997] = glOrthox_PackThread;
      if (v427[248])
        v465 = v427;
      else
        v465 = v428;
      v465[248] = glRotatef_Comp;
      if (v427[1000])
        v466 = v427;
      else
        v466 = v428;
      v466[1000] = glRotatex_PackThread;
      if (v427[250])
        v467 = v427;
      else
        v467 = v428;
      v467[250] = glScalef_Comp;
      if (v427[1001])
        v468 = v427;
      else
        v468 = v428;
      v468[1001] = glScalex_PackThread;
      if (v427[309])
        v469 = v427;
      else
        v469 = v428;
      v469[309] = glTranslatef_Comp;
      if (v427[1006])
        v470 = v427;
      else
        v470 = v428;
      v470[1006] = glTranslatex_PackThread;
      if (v427[977])
        v471 = v427;
      else
        v471 = v428;
      v471[977] = glFrustumf_PackThread;
      if (v427[978])
        v472 = v427;
      else
        v472 = v428;
      v472[978] = glFrustumx_PackThread;
      if (v427[205])
        v473 = v427;
      else
        v473 = v428;
      v473[205] = glPopMatrix_Comp;
      if (v427[210])
        v474 = v427;
      else
        v474 = v428;
      v474[210] = glPushMatrix_Comp;
      if (v427[146])
        v475 = v427;
      else
        v475 = v428;
      v475[146] = glLightModelf_Comp;
      if (v427[147])
        v476 = v427;
      else
        v476 = v428;
      v476[147] = glLightModelfv_Comp;
      if (v427[986])
        v477 = v427;
      else
        v477 = v428;
      v477[986] = glLightModelx_PackThread;
      if (v427[987])
        v478 = v427;
      else
        v478 = v428;
      v478[987] = glLightModelxv_PackThread;
      if (v427[150])
        v479 = v427;
      else
        v479 = v428;
      v479[150] = glLightf_Comp;
      if (v427[151])
        v480 = v427;
      else
        v480 = v428;
      v480[151] = glLightfv_Comp;
      if (v427[988])
        v481 = v427;
      else
        v481 = v428;
      v481[988] = glLightx_PackThread;
      if (v427[989])
        v482 = v427;
      else
        v482 = v428;
      v482[989] = glLightxv_PackThread;
      if (v427[170])
        v483 = v427;
      else
        v483 = v428;
      v483[170] = glMaterialf_Comp;
      if (v427[171])
        v484 = v427;
      else
        v484 = v428;
      v484[171] = glMaterialfv_Comp;
      if (v427[992])
        v485 = v427;
      else
        v485 = v428;
      v485[992] = glMaterialx_PackThread;
      if (v427[993])
        v486 = v427;
      else
        v486 = v428;
      v486[993] = glMaterialxv_PackThread;
      if (v427[459])
        v487 = v427;
      else
        v487 = v428;
      v487[459] = glSampleCoverage_Comp;
      if (v427[1008])
        v488 = v427;
      else
        v488 = v428;
      v488[1008] = glSampleCoveragex_PackThread;
      if (v427[195])
        v489 = v427;
      else
        v489 = v428;
      v489[195] = glPixelStorei_PackThread;
      if (v427[237])
        v490 = v427;
      else
        v490 = v428;
      v490[237] = glReadPixels_PackThread;
      if (v427[253])
        v491 = v427;
      else
        v491 = v428;
      v491[253] = glShadeModel_Comp;
      if (v427[128])
        v492 = v427;
      else
        v492 = v428;
      v492[128] = glHint_Comp;
      if (v427[772])
        v493 = v427;
      else
        v493 = v428;
      v493[772] = glPointSizePointer_PackThread;
      if (v427[1011])
        v494 = v427;
      else
        v494 = v428;
      v494[1011] = glCurrentPaletteMatrixOES_PackThread;
      if (v427[1012])
        v495 = v427;
      else
        v495 = v428;
      v495[1012] = glLoadPaletteFromModelViewMatrixOES_PackThread;
      if (v427[1013])
        v496 = v427;
      else
        v496 = v428;
      v496[1013] = glMatrixIndexPointerOES_PackThread;
      if (v427[1014])
        v497 = v427;
      else
        v497 = v428;
      v497[1014] = glWeightPointerARB_PackThread;
      if (v427[1015])
        v498 = v427;
      else
        v498 = v428;
      v498[1015] = glDrawTexsOES_ExecThread;
      if (v427[1016])
        v499 = v427;
      else
        v499 = v428;
      v499[1016] = glDrawTexiOES_ExecThread;
      if (v427[1017])
        v500 = v427;
      else
        v500 = v428;
      v500[1017] = glDrawTexxOES_ExecThread;
      if (v427[1018])
        v501 = v427;
      else
        v501 = v428;
      v501[1018] = glDrawTexsvOES_ExecThread;
      if (v427[1019])
        v502 = v427;
      else
        v502 = v428;
      v502[1019] = glDrawTexivOES_ExecThread;
      if (v427[1020])
        v503 = v427;
      else
        v503 = v428;
      v503[1020] = glDrawTexxvOES_ExecThread;
      if (v427[1021])
        v504 = v427;
      else
        v504 = v428;
      v504[1021] = glDrawTexfOES_ExecThread;
      if (v427[1022])
        v505 = v427;
      else
        v505 = v428;
      v505[1022] = glDrawTexfvOES_ExecThread;
      if (v427[338])
        v506 = v427;
      else
        v506 = v428;
      v506[338] = glBlendEquation_Comp;
      if (v427[336])
        v507 = v427;
      else
        v507 = v428;
      v507[336] = glBlendFuncSeparate_Comp;
      if (v427[458])
        v508 = v427;
      else
        v508 = v428;
      v508[458] = glBlendEquationSeparateEXT_Comp;
      if (v427[768])
        v509 = v427;
      else
        v509 = v428;
      v509[768] = glBindVertexArray_PackThread;
      if (v427[769])
        v510 = v427;
      else
        v510 = v428;
      v510[769] = glDeleteVertexArrays_ExecThread;
      if (v427[770])
        v511 = v427;
      else
        v511 = v428;
      v511[770] = glGenVertexArrays_ExecThread;
      if (v427[771])
        v512 = v427;
      else
        v512 = v428;
      v512[771] = glIsVertexArray_ExecThread;
      if (v427[463])
        v513 = v427;
      else
        v513 = v428;
      v513[463] = glGenFencesAPPLE_ExecThread;
      if (v427[464])
        v514 = v427;
      else
        v514 = v428;
      v514[464] = glDeleteFencesAPPLE_ExecThread;
      if (v427[466])
        v515 = v427;
      else
        v515 = v428;
      v515[466] = glIsFenceAPPLE_ExecThread;
      if (v427[465])
        v516 = v427;
      else
        v516 = v428;
      v516[465] = glSetFenceAPPLE_PackThread;
      if (v427[467])
        v517 = v427;
      else
        v517 = v428;
      v517[467] = glTestFenceAPPLE_ExecThread;
      if (v427[468])
        v518 = v427;
      else
        v518 = v428;
      v518[468] = glFinishFenceAPPLE_ExecThread;
      if (v427[469])
        v519 = v427;
      else
        v519 = v428;
      v519[469] = glTestObjectAPPLE_ExecThread;
      if (v427[470])
        v520 = v427;
      else
        v520 = v428;
      v520[470] = glFinishObjectAPPLE_ExecThread;
      if (v427[1024])
        v521 = v427;
      else
        v521 = v428;
      v521[1024] = glFramebufferParameterivAPPLE_PackThread;
      if (v427[1025])
        v522 = v427;
      else
        v522 = v428;
      v522[1025] = glGetFramebufferParameterivAPPLE_ExecThread;
      if (v427[756])
        v523 = v427;
      else
        v523 = v428;
      v523[756] = glRenderbufferStorageMultisampleEXT_PackThread;
      if (v427[1026])
        v524 = v427;
      else
        v524 = v428;
      v524[1026] = glResolveMultisampleFramebufferAPPLE_PackThread;
      if (v427[1027])
        v525 = v427;
      else
        v525 = v428;
      v525[1027] = glCopyTextureLevels_PackThread;
      if (v427[1023])
        v526 = v427;
      else
        v526 = v428;
      v526[1023] = glDiscardFramebufferEXT_PackThread;
      if (v427[814])
        v527 = v427;
      else
        v527 = v428;
      v527[814] = glLabelObjectEXT_ExecThread;
      if (!v427[815])
        v427 = v428;
      v427[815] = glGetObjectLabelEXT_ExecThread;
      v528 = *(_QWORD **)(result + 28984);
      v529 = *(_QWORD **)(result + 28976);
      if (v528[816])
        v530 = *(_QWORD *)(result + 28984);
      else
        v530 = *(_QWORD *)(result + 28976);
      *(_QWORD *)(v530 + 6528) = gliNoop;
      if (v528[817])
        v531 = v528;
      else
        v531 = v529;
      v531[817] = gliNoop;
      if (v528[818])
        v532 = v528;
      else
        v532 = v529;
      v532[818] = gliNoop;
      if (v528[1033])
        v533 = v528;
      else
        v533 = v529;
      v533[1033] = glLabelObjectWithResponsibleProcessAPPLE_ExecThread;
      if (!v528[1031])
        v528 = v529;
      v534 = glTexStorage2D_PackThread;
    }
    else
    {
      *(_QWORD *)(v326 + 8) = glAlphaFunc_Exec;
      if (v324[968])
        v846 = v324;
      else
        v846 = v325;
      v846[968] = glAlphaFuncx_Exec;
      if (v324[7])
        v847 = v324;
      else
        v847 = v325;
      v847[7] = glBlendFunc_Exec;
      if (v324[49])
        v848 = v324;
      else
        v848 = v325;
      v848[49] = glColorMask_Exec;
      v849 = v324[59];
      if (v324[60])
        v850 = v324;
      else
        v850 = v325;
      v850[60] = glDepthFunc_Exec;
      if (v324[61])
        v851 = v324;
      else
        v851 = v325;
      v851[61] = glDepthMask_Exec;
      if (v324[161])
        v852 = v324;
      else
        v852 = v325;
      v852[161] = glLogicOp_Exec;
      if (v324[254])
        v853 = v324;
      else
        v853 = v325;
      v853[254] = glStencilFunc_Exec;
      if (v324[255])
        v854 = v324;
      else
        v854 = v325;
      v854[255] = glStencilMask_Exec;
      if (v324[256])
        v855 = v324;
      else
        v855 = v325;
      v855[256] = glStencilOp_Exec;
      if (v324[251])
        v856 = v324;
      else
        v856 = v325;
      v856[251] = glScissor_Exec;
      if (v324[10])
        v857 = v324;
      else
        v857 = v325;
      v857[10] = glClear_Exec;
      if (v324[12])
        v858 = v324;
      else
        v858 = v325;
      v858[12] = glClearColor_Exec;
      if (v324[969])
        v859 = v324;
      else
        v859 = v325;
      v859[969] = glClearColorx_Exec;
      if (v324[15])
        v860 = v324;
      else
        v860 = v325;
      v860[15] = glClearStencil_Exec;
      if (v324[878])
        v861 = v324;
      else
        v861 = v325;
      v861[878] = glClearDepthf_Exec;
      if (v324[970])
        v862 = v324;
      else
        v862 = v325;
      v862[970] = glClearDepthx_Exec;
      if (v324[37])
        v863 = v324;
      else
        v863 = v325;
      v863[37] = glColor4f_Exec;
      if (v324[43])
        v864 = v324;
      else
        v864 = v325;
      v864[43] = glColor4ub_Exec;
      if (v324[973])
        v865 = v324;
      else
        v865 = v325;
      v865[973] = glColor4x_Exec;
      if (v324[182])
        v866 = v324;
      else
        v866 = v325;
      v866[182] = glNormal3f_Exec;
      if (v324[995])
        v867 = v324;
      else
        v867 = v325;
      v867[995] = glNormal3x_Exec;
      if (v324[369])
        v868 = v324;
      else
        v868 = v325;
      v868[369] = glMultiTexCoord4f_Exec;
      if (v324[1007])
        v869 = v324;
      else
        v869 = v325;
      v869[1007] = glMultiTexCoord4x_Exec;
      if (v324[334])
        v870 = v324;
      else
        v870 = v325;
      v870[334] = glVertexPointer_Exec;
      if (v324[51])
        v871 = v324;
      else
        v871 = v325;
      v871[51] = glColorPointer_Exec;
      if (v324[188])
        v872 = v324;
      else
        v872 = v325;
      v872[188] = glNormalPointer_Exec;
      if (v324[289])
        v873 = v324;
      else
        v873 = v325;
      v873[289] = glTexCoordPointer_Exec;
      if (v324[341])
        v874 = v324;
      else
        v874 = v325;
      v874[341] = glClientActiveTexture_Exec;
      v875 = v324[63];
      if (v324[64])
        v876 = v324;
      else
        v876 = v325;
      v876[64] = glDisableClientState_Exec;
      if (v324[73])
        v877 = v324;
      else
        v877 = v325;
      v877[73] = glEnableClientState_Exec;
      if (v324[65])
        v878 = v324;
      else
        v878 = v325;
      v878[65] = glDrawArrays_Exec;
      if (v324[67])
        v879 = v324;
      else
        v879 = v325;
      v879[67] = glDrawElements_Exec;
      if (v324[98])
        v880 = v324;
      else
        v880 = v325;
      v880[98] = glGenTextures_Exec;
      if (v849)
        v881 = v324;
      else
        v881 = v325;
      v881[59] = glDeleteTextures_Exec;
      if (v324[5])
        v882 = v324;
      else
        v882 = v325;
      v882[5] = glBindTexture_Exec;
      if (v324[145])
        v883 = v324;
      else
        v883 = v325;
      v883[145] = glIsTexture_Exec;
      if (v324[342])
        v884 = v324;
      else
        v884 = v325;
      v884[342] = glActiveTexture_Exec;
      if (v324[54])
        v885 = v324;
      else
        v885 = v325;
      v885[54] = glCopyTexImage2D_Exec;
      if (v324[56])
        v886 = v324;
      else
        v886 = v325;
      v886[56] = glCopyTexSubImage2D_Exec;
      if (v324[301])
        v887 = v324;
      else
        v887 = v325;
      v887[301] = glTexImage2D_Exec;
      if (v324[307])
        v888 = v324;
      else
        v888 = v325;
      v888[307] = glTexSubImage2D_Exec;
      if (v324[380])
        v889 = v324;
      else
        v889 = v325;
      v889[380] = glCompressedTexImage2D_Exec;
      if (v324[383])
        v890 = v324;
      else
        v890 = v325;
      v890[383] = glCompressedTexSubImage2D_Exec;
      if (v324[302])
        v891 = v324;
      else
        v891 = v325;
      v891[302] = glTexParameterf_Exec;
      if (v324[303])
        v892 = v324;
      else
        v892 = v325;
      v892[303] = glTexParameterfv_Exec;
      if (v324[304])
        v893 = v324;
      else
        v893 = v325;
      v893[304] = glTexParameteri_Exec;
      if (v324[305])
        v894 = v324;
      else
        v894 = v325;
      v894[305] = glTexParameteriv_Exec;
      if (v324[1004])
        v895 = v324;
      else
        v895 = v325;
      v895[1004] = glTexParameterx_Exec;
      if (v324[1005])
        v896 = v324;
      else
        v896 = v325;
      v896[1005] = glTexParameterxv_Exec;
      if (v324[126])
        v897 = v324;
      else
        v897 = v325;
      v897[126] = glGetTexParameterfv_Exec;
      if (v324[127])
        v898 = v324;
      else
        v898 = v325;
      v898[127] = glGetTexParameteriv_Exec;
      if (v324[290])
        v899 = v324;
      else
        v899 = v325;
      v899[290] = glTexEnvf_Exec;
      if (v324[291])
        v900 = v324;
      else
        v900 = v325;
      v900[291] = glTexEnvfv_Exec;
      if (v324[292])
        v901 = v324;
      else
        v901 = v325;
      v901[292] = glTexEnvi_Exec;
      if (v324[293])
        v902 = v324;
      else
        v902 = v325;
      v902[293] = glTexEnviv_Exec;
      if (v324[1002])
        v903 = v324;
      else
        v903 = v325;
      v903[1002] = glTexEnvx_Exec;
      if (v324[1003])
        v904 = v324;
      else
        v904 = v325;
      v904[1003] = glTexEnvxv_Exec;
      if (v324[89])
        v905 = v324;
      else
        v905 = v325;
      v905[89] = glFinish_Exec;
      if (v324[90])
        v906 = v324;
      else
        v906 = v325;
      v906[90] = glFlush_Exec;
      if (v324[99])
        v907 = v324;
      else
        v907 = v325;
      v907[99] = glGetBooleanv_Exec;
      if (v324[102])
        v908 = v324;
      else
        v908 = v325;
      v908[102] = glGetError_Exec;
      if (v324[103])
        v909 = v324;
      else
        v909 = v325;
      v909[103] = glGetFloatv_Exec;
      if (v324[104])
        v910 = v324;
      else
        v910 = v325;
      v910[104] = glGetIntegerv_Exec;
      if (v324[105])
        v911 = v324;
      else
        v911 = v325;
      v911[105] = glGetLightfv_Exec;
      if (v324[110])
        v912 = v324;
      else
        v912 = v325;
      v912[110] = glGetMaterialfv_Exec;
      if (v324[115])
        v913 = v324;
      else
        v913 = v325;
      v913[115] = glGetPointerv_Exec;
      if (v324[117])
        v914 = v324;
      else
        v914 = v325;
      v914[117] = glGetString_Exec;
      if (v324[118])
        v915 = v324;
      else
        v915 = v325;
      v915[118] = glGetTexEnvfv_Exec;
      if (v324[119])
        v916 = v324;
      else
        v916 = v325;
      v916[119] = glGetTexEnviv_Exec;
      if (v324[979])
        v917 = v324;
      else
        v917 = v325;
      v917[979] = glGetClipPlanef_Exec;
      if (v324[980])
        v918 = v324;
      else
        v918 = v325;
      v918[980] = glGetClipPlanex_Exec;
      if (v324[981])
        v919 = v324;
      else
        v919 = v325;
      v919[981] = glGetFixedv_Exec;
      if (v324[982])
        v920 = v324;
      else
        v920 = v325;
      v920[982] = glGetLightxv_Exec;
      if (v324[983])
        v921 = v324;
      else
        v921 = v325;
      v921[983] = glGetMaterialxv_Exec;
      if (v324[984])
        v922 = v324;
      else
        v922 = v325;
      v922[984] = glGetTexEnvxv_Exec;
      if (v324[985])
        v923 = v324;
      else
        v923 = v325;
      v923[985] = glGetTexParameterxv_Exec;
      if (v324[72])
        v924 = v324;
      else
        v924 = v325;
      v924[72] = glEnable_Exec;
      if (v875)
        v925 = v324;
      else
        v925 = v325;
      v925[63] = glDisable_Exec;
      if (v324[143])
        v926 = v324;
      else
        v926 = v325;
      v926[143] = glIsEnabled_Exec;
      if (v324[642])
        v927 = v324;
      else
        v927 = v325;
      v927[642] = glBindBuffer_Exec;
      if (v324[643])
        v928 = v324;
      else
        v928 = v325;
      v928[643] = glDeleteBuffers_Exec;
      if (v324[644])
        v929 = v324;
      else
        v929 = v325;
      v929[644] = glGenBuffers_Exec;
      if (v324[645])
        v930 = v324;
      else
        v930 = v325;
      v930[645] = glIsBuffer_Exec;
      if (v324[646])
        v931 = v324;
      else
        v931 = v325;
      v931[646] = glBufferData_Exec;
      if (v324[647])
        v932 = v324;
      else
        v932 = v325;
      v932[647] = glBufferSubData_Exec;
      if (v324[649])
        v933 = v324;
      else
        v933 = v325;
      v933[649] = glMapBuffer_Exec;
      if (v324[650])
        v934 = v324;
      else
        v934 = v325;
      v934[650] = glUnmapBuffer_Exec;
      if (v324[651])
        v935 = v324;
      else
        v935 = v325;
      v935[651] = glGetBufferParameteriv_Exec;
      if (v324[652])
        v936 = v324;
      else
        v936 = v325;
      v936[652] = glGetBufferPointerv_Exec;
      if (v324[795])
        v937 = v324;
      else
        v937 = v325;
      v937[795] = glMapBufferRange_Exec;
      if (v324[796])
        v938 = v324;
      else
        v938 = v325;
      v938[796] = glFlushMappedBufferRange_Exec;
      if (v324[665])
        v939 = v324;
      else
        v939 = v325;
      v939[665] = glIsRenderbufferEXT_Exec;
      if (v324[666])
        v940 = v324;
      else
        v940 = v325;
      v940[666] = glBindRenderbuffer_Exec;
      if (v324[667])
        v941 = v324;
      else
        v941 = v325;
      v941[667] = glDeleteRenderbuffersEXT_Exec;
      if (v324[668])
        v942 = v324;
      else
        v942 = v325;
      v942[668] = glGenRenderbuffersEXT_Exec;
      if (v324[669])
        v943 = v324;
      else
        v943 = v325;
      v943[669] = glRenderbufferStorageEXT_Exec;
      if (v324[670])
        v944 = v324;
      else
        v944 = v325;
      v944[670] = glGetRenderbufferParameterivEXT_Exec;
      if (v324[671])
        v945 = v324;
      else
        v945 = v325;
      v945[671] = glIsFramebufferEXT_Exec;
      if (!v324[672])
        v324 = v325;
      v324[672] = glBindFramebuffer_Exec;
      v946 = *(_QWORD **)(result + 28984);
      v947 = *(_QWORD **)(result + 28976);
      if (v946[673])
        v948 = *(_QWORD *)(result + 28984);
      else
        v948 = *(_QWORD *)(result + 28976);
      *(_QWORD *)(v948 + 5384) = glDeleteFramebuffersEXT_Exec;
      if (v946[674])
        v949 = v946;
      else
        v949 = v947;
      v949[674] = glGenFramebuffersEXT_Exec;
      if (v946[675])
        v950 = v946;
      else
        v950 = v947;
      v950[675] = glCheckFramebufferStatusEXT_Exec;
      if (v946[677])
        v951 = v946;
      else
        v951 = v947;
      v951[677] = glFramebufferTexture2DEXT_Exec;
      if (v946[679])
        v952 = v946;
      else
        v952 = v947;
      v952[679] = glFramebufferRenderbufferEXT_Exec;
      if (v946[680])
        v953 = v946;
      else
        v953 = v947;
      v953[680] = glGetFramebufferAttachmentParameterivEXT_Exec;
      if (v946[681])
        v954 = v946;
      else
        v954 = v947;
      v954[681] = glGenerateMipmapEXT_Exec;
      if (v946[155])
        v955 = v946;
      else
        v955 = v947;
      v955[155] = glLineWidth_Exec;
      if (v946[990])
        v956 = v946;
      else
        v956 = v947;
      v956[990] = glLineWidthx_Exec;
      if (v946[199])
        v957 = v946;
      else
        v957 = v947;
      v957[199] = glPointSize_Exec;
      if (v946[998])
        v958 = v946;
      else
        v958 = v947;
      v958[998] = glPointSizex_Exec;
      if (v946[540])
        v959 = v946;
      else
        v959 = v947;
      v959[540] = glPointParameterf_Exec;
      if (v946[541])
        v960 = v946;
      else
        v960 = v947;
      v960[541] = glPointParameterfv_Exec;
      if (v946[1009])
        v961 = v946;
      else
        v961 = v947;
      v961[1009] = glPointParameterx_Exec;
      if (v946[1010])
        v962 = v946;
      else
        v962 = v947;
      v962[1010] = glPointParameterxv_Exec;
      if (v946[201])
        v963 = v946;
      else
        v963 = v947;
      v963[201] = glPolygonOffset_Exec;
      if (v946[999])
        v964 = v946;
      else
        v964 = v947;
      v964[999] = glPolygonOffsetx_Exec;
      if (v946[57])
        v965 = v946;
      else
        v965 = v947;
      v965[57] = glCullFace_Exec;
      if (v946[95])
        v966 = v946;
      else
        v966 = v947;
      v966[95] = glFrontFace_Exec;
      if (v946[971])
        v967 = v946;
      else
        v967 = v947;
      v967[971] = glClipPlanef_Exec;
      if (v946[972])
        v968 = v946;
      else
        v968 = v947;
      v968[972] = glClipPlanex_Exec;
      if (v946[877])
        v969 = v946;
      else
        v969 = v947;
      v969[877] = glDepthRangef_Exec;
      if (v946[974])
        v970 = v946;
      else
        v970 = v947;
      v970[974] = glDepthRangex_Exec;
      if (v946[335])
        v971 = v946;
      else
        v971 = v947;
      v971[335] = glViewport_Exec;
      if (v946[91])
        v972 = v946;
      else
        v972 = v947;
      v972[91] = glFogf_Exec;
      if (v946[92])
        v973 = v946;
      else
        v973 = v947;
      v973[92] = glFogfv_Exec;
      if (v946[975])
        v974 = v946;
      else
        v974 = v947;
      v974[975] = glFogx_Exec;
      if (v946[976])
        v975 = v946;
      else
        v975 = v947;
      v975[976] = glFogxv_Exec;
      if (v946[174])
        v976 = v946;
      else
        v976 = v947;
      v976[174] = glMatrixMode_Exec;
      if (v946[157])
        v977 = v946;
      else
        v977 = v947;
      v977[157] = glLoadIdentity_Exec;
      if (v946[159])
        v978 = v946;
      else
        v978 = v947;
      v978[159] = glLoadMatrixf_Exec;
      if (v946[991])
        v979 = v946;
      else
        v979 = v947;
      v979[991] = glLoadMatrixx_Exec;
      if (v946[176])
        v980 = v946;
      else
        v980 = v947;
      v980[176] = glMultMatrixf_Exec;
      if (v946[994])
        v981 = v946;
      else
        v981 = v947;
      v981[994] = glMultMatrixx_Exec;
      if (v946[996])
        v982 = v946;
      else
        v982 = v947;
      v982[996] = glOrthof_Exec;
      if (v946[997])
        v983 = v946;
      else
        v983 = v947;
      v983[997] = glOrthox_Exec;
      if (v946[248])
        v984 = v946;
      else
        v984 = v947;
      v984[248] = glRotatef_Exec;
      if (v946[1000])
        v985 = v946;
      else
        v985 = v947;
      v985[1000] = glRotatex_Exec;
      if (v946[250])
        v986 = v946;
      else
        v986 = v947;
      v986[250] = glScalef_Exec;
      if (v946[1001])
        v987 = v946;
      else
        v987 = v947;
      v987[1001] = glScalex_Exec;
      if (v946[309])
        v988 = v946;
      else
        v988 = v947;
      v988[309] = glTranslatef_Exec;
      if (v946[1006])
        v989 = v946;
      else
        v989 = v947;
      v989[1006] = glTranslatex_Exec;
      if (v946[977])
        v990 = v946;
      else
        v990 = v947;
      v990[977] = glFrustumf_Exec;
      if (v946[978])
        v991 = v946;
      else
        v991 = v947;
      v991[978] = glFrustumx_Exec;
      if (v946[205])
        v992 = v946;
      else
        v992 = v947;
      v992[205] = glPopMatrix_Exec;
      if (v946[210])
        v993 = v946;
      else
        v993 = v947;
      v993[210] = glPushMatrix_Exec;
      if (v946[146])
        v994 = v946;
      else
        v994 = v947;
      v994[146] = glLightModelf_Exec;
      if (v946[147])
        v995 = v946;
      else
        v995 = v947;
      v995[147] = glLightModelfv_Exec;
      if (v946[986])
        v996 = v946;
      else
        v996 = v947;
      v996[986] = glLightModelx_Exec;
      if (v946[987])
        v997 = v946;
      else
        v997 = v947;
      v997[987] = glLightModelxv_Exec;
      if (v946[150])
        v998 = v946;
      else
        v998 = v947;
      v998[150] = glLightf_Exec;
      if (v946[151])
        v999 = v946;
      else
        v999 = v947;
      v999[151] = glLightfv_Exec;
      if (v946[988])
        v1000 = v946;
      else
        v1000 = v947;
      v1000[988] = glLightx_Exec;
      if (v946[989])
        v1001 = v946;
      else
        v1001 = v947;
      v1001[989] = glLightxv_Exec;
      if (v946[170])
        v1002 = v946;
      else
        v1002 = v947;
      v1002[170] = glMaterialf_Exec;
      if (v946[171])
        v1003 = v946;
      else
        v1003 = v947;
      v1003[171] = glMaterialfv_Exec;
      if (v946[992])
        v1004 = v946;
      else
        v1004 = v947;
      v1004[992] = glMaterialx_Exec;
      if (v946[993])
        v1005 = v946;
      else
        v1005 = v947;
      v1005[993] = glMaterialxv_Exec;
      if (v946[459])
        v1006 = v946;
      else
        v1006 = v947;
      v1006[459] = glSampleCoverage_Exec;
      if (v946[1008])
        v1007 = v946;
      else
        v1007 = v947;
      v1007[1008] = glSampleCoveragex_Exec;
      if (v946[195])
        v1008 = v946;
      else
        v1008 = v947;
      v1008[195] = glPixelStorei_Exec;
      if (v946[237])
        v1009 = v946;
      else
        v1009 = v947;
      v1009[237] = glReadPixels_Exec;
      if (v946[253])
        v1010 = v946;
      else
        v1010 = v947;
      v1010[253] = glShadeModel_Exec;
      if (v946[128])
        v1011 = v946;
      else
        v1011 = v947;
      v1011[128] = glHint_Exec;
      if (v946[772])
        v1012 = v946;
      else
        v1012 = v947;
      v1012[772] = glPointSizePointer_Exec;
      if (v946[1011])
        v1013 = v946;
      else
        v1013 = v947;
      v1013[1011] = glCurrentPaletteMatrixOES_Exec;
      if (v946[1012])
        v1014 = v946;
      else
        v1014 = v947;
      v1014[1012] = glLoadPaletteFromModelViewMatrixOES_Exec;
      if (v946[1013])
        v1015 = v946;
      else
        v1015 = v947;
      v1015[1013] = glMatrixIndexPointerOES_Exec;
      if (v946[1014])
        v1016 = v946;
      else
        v1016 = v947;
      v1016[1014] = glWeightPointerARB_Exec;
      if (v946[1015])
        v1017 = v946;
      else
        v1017 = v947;
      v1017[1015] = glDrawTexsOES_Exec;
      if (v946[1016])
        v1018 = v946;
      else
        v1018 = v947;
      v1018[1016] = glDrawTexiOES_Exec;
      if (v946[1017])
        v1019 = v946;
      else
        v1019 = v947;
      v1019[1017] = glDrawTexxOES_Exec;
      if (v946[1018])
        v1020 = v946;
      else
        v1020 = v947;
      v1020[1018] = glDrawTexsvOES_Exec;
      if (v946[1019])
        v1021 = v946;
      else
        v1021 = v947;
      v1021[1019] = glDrawTexivOES_Exec;
      if (v946[1020])
        v1022 = v946;
      else
        v1022 = v947;
      v1022[1020] = glDrawTexxvOES_Exec;
      if (v946[1021])
        v1023 = v946;
      else
        v1023 = v947;
      v1023[1021] = glDrawTexfOES_Exec;
      if (v946[1022])
        v1024 = v946;
      else
        v1024 = v947;
      v1024[1022] = glDrawTexfvOES_Exec;
      if (v946[338])
        v1025 = v946;
      else
        v1025 = v947;
      v1025[338] = glBlendEquation_Exec;
      if (v946[336])
        v1026 = v946;
      else
        v1026 = v947;
      v1026[336] = glBlendFuncSeparate_Exec;
      if (v946[458])
        v1027 = v946;
      else
        v1027 = v947;
      v1027[458] = glBlendEquationSeparateEXT_Exec;
      if (v946[768])
        v1028 = v946;
      else
        v1028 = v947;
      v1028[768] = glBindVertexArray_Exec;
      if (v946[769])
        v1029 = v946;
      else
        v1029 = v947;
      v1029[769] = glDeleteVertexArrays_Exec;
      if (v946[770])
        v1030 = v946;
      else
        v1030 = v947;
      v1030[770] = glGenVertexArrays_Exec;
      if (v946[771])
        v1031 = v946;
      else
        v1031 = v947;
      v1031[771] = glIsVertexArray_Exec;
      if (v946[463])
        v1032 = v946;
      else
        v1032 = v947;
      v1032[463] = glGenFencesAPPLE_Exec;
      if (v946[464])
        v1033 = v946;
      else
        v1033 = v947;
      v1033[464] = glDeleteFencesAPPLE_Exec;
      if (v946[466])
        v1034 = v946;
      else
        v1034 = v947;
      v1034[466] = glIsFenceAPPLE_Exec;
      if (v946[465])
        v1035 = v946;
      else
        v1035 = v947;
      v1035[465] = glSetFenceAPPLE_Exec;
      if (v946[467])
        v1036 = v946;
      else
        v1036 = v947;
      v1036[467] = glTestFenceAPPLE_Exec;
      if (v946[468])
        v1037 = v946;
      else
        v1037 = v947;
      v1037[468] = glFinishFenceAPPLE_Exec;
      if (v946[469])
        v1038 = v946;
      else
        v1038 = v947;
      v1038[469] = glTestObjectAPPLE_Exec;
      if (v946[470])
        v1039 = v946;
      else
        v1039 = v947;
      v1039[470] = glFinishObjectAPPLE_Exec;
      if (v946[1024])
        v1040 = v946;
      else
        v1040 = v947;
      v1040[1024] = glFramebufferParameterivAPPLE_Exec;
      if (v946[1025])
        v1041 = v946;
      else
        v1041 = v947;
      v1041[1025] = glGetFramebufferParameterivAPPLE_Exec;
      if (v946[756])
        v1042 = v946;
      else
        v1042 = v947;
      v1042[756] = glRenderbufferStorageMultisampleEXT_Exec;
      if (v946[1026])
        v1043 = v946;
      else
        v1043 = v947;
      v1043[1026] = glResolveMultisampleFramebufferAPPLE_Exec;
      if (v946[1027])
        v1044 = v946;
      else
        v1044 = v947;
      v1044[1027] = glCopyTextureLevels_Exec;
      if (v946[1023])
        v1045 = v946;
      else
        v1045 = v947;
      v1045[1023] = glDiscardFramebufferEXT_Exec;
      if (v946[814])
        v1046 = v946;
      else
        v1046 = v947;
      v1046[814] = glLabelObjectEXT_Exec;
      if (!v946[815])
        v946 = v947;
      v946[815] = glGetObjectLabelEXT_Exec;
      v528 = *(_QWORD **)(result + 28984);
      v1047 = *(_QWORD **)(result + 28976);
      if (v528[816])
        v1048 = *(_QWORD *)(result + 28984);
      else
        v1048 = *(_QWORD *)(result + 28976);
      *(_QWORD *)(v1048 + 6528) = gliNoop;
      if (v528[817])
        v1049 = v528;
      else
        v1049 = v1047;
      v1049[817] = gliNoop;
      if (v528[818])
        v1050 = v528;
      else
        v1050 = v1047;
      v1050[818] = gliNoop;
      if (v528[1033])
        v1051 = v528;
      else
        v1051 = v1047;
      v1051[1033] = glLabelObjectWithResponsibleProcessAPPLE_Exec;
      if (!v528[1031])
        v528 = v1047;
      v534 = glTexStorage2D_Exec;
    }
    v528[1031] = v534;
  }
  else
  {
    v8 = *(_QWORD **)(result + 28984);
    v9 = *(_QWORD **)(result + 28976);
    if (v8[251])
      v10 = *(_QWORD *)(result + 28984);
    else
      v10 = *(_QWORD *)(result + 28976);
    if (*(_QWORD *)(result + 27648))
    {
      *(_QWORD *)(v10 + 2008) = glScissor_Comp;
      if (v8[49])
        v11 = v8;
      else
        v11 = v9;
      v11[49] = glColorMask_Comp;
      if (v8[337])
        v12 = v8;
      else
        v12 = v9;
      v12[337] = glBlendColor_Comp;
      if (v8[338])
        v13 = v8;
      else
        v13 = v9;
      v13[338] = glBlendEquation_Comp;
      if (v8[458])
        v14 = v8;
      else
        v14 = v9;
      v14[458] = glBlendEquationSeparateEXT_Comp;
      if (v8[7])
        v15 = v8;
      else
        v15 = v9;
      v15[7] = glBlendFunc_Comp;
      if (v8[336])
        v16 = v8;
      else
        v16 = v9;
      v16[336] = glBlendFuncSeparate_Comp;
      v17 = v8[61];
      if (v8[60])
        v18 = v8;
      else
        v18 = v9;
      v18[60] = glDepthFunc_Comp;
      if (v17)
        v19 = v8;
      else
        v19 = v9;
      v19[61] = glDepthMask_Comp;
      if (v8[254])
        v20 = v8;
      else
        v20 = v9;
      v20[254] = glStencilFunc_Comp;
      if (v8[661])
        v21 = v8;
      else
        v21 = v9;
      v21[661] = glStencilFuncSeparate_Comp;
      if (v8[256])
        v22 = v8;
      else
        v22 = v9;
      v22[256] = glStencilOp_Comp;
      if (v8[586])
        v23 = v8;
      else
        v23 = v9;
      v23[586] = glStencilOpSeparateATI_Comp;
      if (v8[255])
        v24 = v8;
      else
        v24 = v9;
      v24[255] = glStencilMask_Comp;
      if (v8[662])
        v25 = v8;
      else
        v25 = v9;
      v25[662] = glStencilMaskSeparate_Comp;
      if (v8[10])
        v26 = v8;
      else
        v26 = v9;
      v26[10] = glClear_Comp;
      if (v8[12])
        v27 = v8;
      else
        v27 = v9;
      v27[12] = glClearColor_Comp;
      if (v8[878])
        v28 = v8;
      else
        v28 = v9;
      v28[878] = glClearDepthf_PackThread;
      if (v8[15])
        v29 = v8;
      else
        v29 = v9;
      v29[15] = glClearStencil_Comp;
      if (v8[644])
        v30 = v8;
      else
        v30 = v9;
      v30[644] = glGenBuffers_ExecThread;
      if (v8[643])
        v31 = v8;
      else
        v31 = v9;
      v31[643] = glDeleteBuffers_ExecThread;
      if (v8[645])
        v32 = v8;
      else
        v32 = v9;
      v32[645] = glIsBuffer_ExecThread;
      if (v8[642])
        v33 = v8;
      else
        v33 = v9;
      v33[642] = glBindBuffer_PackThread;
      if (v8[646])
        v34 = v8;
      else
        v34 = v9;
      v34[646] = glBufferData_PackThread;
      if (v8[647])
        v35 = v8;
      else
        v35 = v9;
      v35[647] = glBufferSubData_PackThread;
      if (v8[651])
        v36 = v8;
      else
        v36 = v9;
      v36[651] = glGetBufferParameteriv_ExecThread;
      if (v7 != 4)
      {
        if (v8[649])
          v37 = v8;
        else
          v37 = v9;
        v37[649] = glMapBuffer_PackThread;
      }
      if (v8[650])
        v38 = v8;
      else
        v38 = v9;
      v38[650] = glUnmapBuffer_PackThread;
      if (v8[652])
        v39 = v8;
      else
        v39 = v9;
      v39[652] = glGetBufferPointerv_ExecThread;
      if (v8[795])
        v40 = v8;
      else
        v40 = v9;
      v40[795] = glMapBufferRange_ExecThread;
      if (v8[796])
        v41 = v8;
      else
        v41 = v9;
      v41[796] = glFlushMappedBufferRange_PackThread;
      if (v8[98])
        v42 = v8;
      else
        v42 = v9;
      v42[98] = glGenTextures_ExecThread;
      if (v8[59])
        v43 = v8;
      else
        v43 = v9;
      v43[59] = glDeleteTextures_ExecThread;
      if (v8[145])
        v44 = v8;
      else
        v44 = v9;
      v44[145] = glIsTexture_ExecThread;
      if (v8[5])
        v45 = v8;
      else
        v45 = v9;
      v45[5] = glBindTexture_Comp;
      if (v8[342])
        v46 = v8;
      else
        v46 = v9;
      v46[342] = glActiveTexture_Comp;
      if (v8[301])
        v47 = v8;
      else
        v47 = v9;
      v47[301] = glTexImage2D_PackThread;
      if (v8[307])
        v48 = v8;
      else
        v48 = v9;
      v48[307] = glTexSubImage2D_PackThread;
      if (v8[54])
        v49 = v8;
      else
        v49 = v9;
      v49[54] = glCopyTexImage2D_Comp;
      if (v8[56])
        v50 = v8;
      else
        v50 = v9;
      v50[56] = glCopyTexSubImage2D_Comp;
      if (v8[380])
        v51 = v8;
      else
        v51 = v9;
      v51[380] = glCompressedTexImage2D_PackThread;
      if (v8[383])
        v52 = v8;
      else
        v52 = v9;
      v52[383] = glCompressedTexSubImage2D_PackThread;
      if (v8[304])
        v53 = v8;
      else
        v53 = v9;
      v53[304] = glTexParameteri_Comp;
      if (v8[302])
        v54 = v8;
      else
        v54 = v9;
      v54[302] = glTexParameterf_Comp;
      if (v8[305])
        v55 = v8;
      else
        v55 = v9;
      v55[305] = glTexParameteriv_Comp;
      if (v8[303])
        v56 = v8;
      else
        v56 = v9;
      v56[303] = glTexParameterfv_Comp;
      if (v8[127])
        v57 = v8;
      else
        v57 = v9;
      v57[127] = glGetTexParameteriv_ExecThread;
      if (v8[126])
        v58 = v8;
      else
        v58 = v9;
      v58[126] = glGetTexParameterfv_ExecThread;
      if (v8[594])
        v59 = v8;
      else
        v59 = v9;
      v59[594] = glCreateShaderObjectARB_ExecThread;
      if (v8[591])
        v60 = v8;
      else
        v60 = v9;
      v60[591] = glDeleteObjectARB_ExecThread;
      if (v8[655])
        v61 = v8;
      else
        v61 = v9;
      v61[655] = glIsShader_ExecThread;
      if (v8[596])
        v62 = v8;
      else
        v62 = v9;
      v62[596] = glCompileShaderARB_PackThread;
      if (v8[657])
        v63 = v8;
      else
        v63 = v9;
      v63[657] = glGetShaderiv_ExecThread;
      if (v8[659])
        v64 = v8;
      else
        v64 = v9;
      v64[659] = glGetShaderInfoLog_ExecThread;
      if (v8[629])
        v65 = v8;
      else
        v65 = v9;
      v65[629] = glGetShaderSourceARB_ExecThread;
      if (v8[595])
        v66 = v8;
      else
        v66 = v9;
      v66[595] = glShaderSourceARB_ExecThread;
      if (v8[875])
        v67 = v8;
      else
        v67 = v9;
      v67[875] = glShaderBinaryOES_ExecThread;
      if (v8[876])
        v68 = v8;
      else
        v68 = v9;
      v68[876] = glGetShaderPrecisionFormatOES_ExecThread;
      if (v8[874])
        v69 = v8;
      else
        v69 = v9;
      v69[874] = glReleaseShaderCompilerOES_ExecThread;
      if (v8[597])
        v70 = v8;
      else
        v70 = v9;
      v70[597] = glCreateProgramObjectARB_ExecThread;
      if (v8[591])
        v71 = v8;
      else
        v71 = v9;
      v71[591] = glDeleteObjectARB_ExecThread;
      if (v8[656])
        v72 = v8;
      else
        v72 = v9;
      v72[656] = glIsProgram_ExecThread;
      if (v8[598])
        v73 = v8;
      else
        v73 = v9;
      v73[598] = glAttachObjectARB_PackThread;
      if (v8[593])
        v74 = v8;
      else
        v74 = v9;
      v74[593] = glDetachObjectARB_PackThread;
      if (v8[599])
        v75 = v8;
      else
        v75 = v9;
      v75[599] = glLinkProgramARB_PackThread;
      if (v8[601])
        v76 = v8;
      else
        v76 = v9;
      v76[601] = glValidateProgramARB_PackThread;
      if (v8[600])
        v77 = v8;
      else
        v77 = v9;
      v77[600] = glUseProgramObjectARB_Comp;
      if (v8[630])
        v78 = v8;
      else
        v78 = v9;
      v78[630] = glBindAttribLocationARB_PackThread;
      if (v8[626])
        v79 = v8;
      else
        v79 = v9;
      v79[626] = glGetActiveUniformARB_ExecThread;
      if (v8[631])
        v80 = v8;
      else
        v80 = v9;
      v80[631] = glGetActiveAttribARB_ExecThread;
      if (v8[658])
        v81 = v8;
      else
        v81 = v9;
      v81[658] = glGetProgramiv_ExecThread;
      if (v8[660])
        v82 = v8;
      else
        v82 = v9;
      v82[660] = glGetProgramInfoLog_ExecThread;
      if (v8[632])
        v83 = v8;
      else
        v83 = v9;
      v83[632] = glGetAttribLocationARB_ExecThread;
      if (!v8[625])
        v8 = v9;
      v8[625] = glGetUniformLocationARB_ExecThread;
      v84 = *(_QWORD **)(result + 28984);
      v85 = *(_QWORD **)(result + 28976);
      if (v84[759])
        v86 = *(_QWORD *)(result + 28984);
      else
        v86 = *(_QWORD *)(result + 28976);
      *(_QWORD *)(v86 + 6072) = glGetAttachedShaders_ExecThread;
      if (v84[606])
        v87 = v84;
      else
        v87 = v85;
      v87[606] = glUniform1i_Comp;
      if (v84[607])
        v88 = v84;
      else
        v88 = v85;
      v88[607] = glUniform2i_Comp;
      if (v84[608])
        v89 = v84;
      else
        v89 = v85;
      v89[608] = glUniform3i_Comp;
      if (v84[609])
        v90 = v84;
      else
        v90 = v85;
      v90[609] = glUniform4i_Comp;
      if (v84[602])
        v91 = v84;
      else
        v91 = v85;
      v91[602] = glUniform1f_Comp;
      if (v84[603])
        v92 = v84;
      else
        v92 = v85;
      v92[603] = glUniform2f_Comp;
      if (v84[604])
        v93 = v84;
      else
        v93 = v85;
      v93[604] = glUniform3f_Comp;
      if (v84[605])
        v94 = v84;
      else
        v94 = v85;
      v94[605] = glUniform4f_Comp;
      if (v84[614])
        v95 = v84;
      else
        v95 = v85;
      v95[614] = glUniform1iv_Comp;
      if (v84[615])
        v96 = v84;
      else
        v96 = v85;
      v96[615] = glUniform2iv_Comp;
      if (v84[616])
        v97 = v84;
      else
        v97 = v85;
      v97[616] = glUniform3iv_Comp;
      if (v84[617])
        v98 = v84;
      else
        v98 = v85;
      v98[617] = glUniform4iv_Comp;
      if (v84[610])
        v99 = v84;
      else
        v99 = v85;
      v99[610] = glUniform1fv_Comp;
      if (v84[611])
        v100 = v84;
      else
        v100 = v85;
      v100[611] = glUniform2fv_Comp;
      if (v84[612])
        v101 = v84;
      else
        v101 = v85;
      v101[612] = glUniform3fv_Comp;
      if (v84[613])
        v102 = v84;
      else
        v102 = v85;
      v102[613] = glUniform4fv_Comp;
      if (v84[618])
        v103 = v84;
      else
        v103 = v85;
      v103[618] = glUniformMatrix2fv_Comp;
      if (v84[619])
        v104 = v84;
      else
        v104 = v85;
      v104[619] = glUniformMatrix3fv_Comp;
      if (v84[620])
        v105 = v84;
      else
        v105 = v85;
      v105[620] = glUniformMatrix4fv_Comp;
      if (v84[627])
        v106 = v84;
      else
        v106 = v85;
      v106[627] = glGetUniformfvARB_ExecThread;
      if (v84[628])
        v107 = v84;
      else
        v107 = v85;
      v107[628] = glGetUniformivARB_ExecThread;
      if (v84[57])
        v108 = v84;
      else
        v108 = v85;
      v108[57] = glCullFace_Comp;
      if (v84[95])
        v109 = v84;
      else
        v109 = v85;
      v109[95] = glFrontFace_Comp;
      if (v84[877])
        v110 = v84;
      else
        v110 = v85;
      v110[877] = glDepthRangef_PackThread;
      if (v84[335])
        v111 = v84;
      else
        v111 = v85;
      v111[335] = glViewport_Comp;
      if (v84[72])
        v112 = v84;
      else
        v112 = v85;
      v112[72] = glEnable_Comp;
      if (v84[63])
        v113 = v84;
      else
        v113 = v85;
      v113[63] = glDisable_Comp;
      if (v84[143])
        v114 = v84;
      else
        v114 = v85;
      v114[143] = glIsEnabled_ExecThread;
      if (v84[65])
        v115 = v84;
      else
        v115 = v85;
      v115[65] = glDrawArrays_PackThread;
      if (v84[67])
        v116 = v84;
      else
        v116 = v85;
      v116[67] = glDrawElements_PackThread;
      if (v84[511])
        v117 = v84;
      else
        v117 = v85;
      v117[511] = glVertexAttribPointerARB_PackThread;
      if (v84[517])
        v118 = v84;
      else
        v118 = v85;
      v118[517] = glGetVertexAttribPointervARB_ExecThread;
      if (v84[512])
        v119 = v84;
      else
        v119 = v85;
      v119[512] = glEnableVertexAttribArrayARB_PackThread;
      if (v84[513])
        v120 = v84;
      else
        v120 = v85;
      v120[513] = glDisableVertexAttribArrayARB_PackThread;
      if (v84[476])
        v121 = v84;
      else
        v121 = v85;
      v121[476] = glVertexAttrib1fARB_Comp;
      if (v84[479])
        v122 = v84;
      else
        v122 = v85;
      v122[479] = glVertexAttrib2fARB_Comp;
      if (v84[482])
        v123 = v84;
      else
        v123 = v85;
      v123[482] = glVertexAttrib3fARB_Comp;
      if (v84[485])
        v124 = v84;
      else
        v124 = v85;
      v124[485] = glVertexAttrib4fARB_Comp;
      if (v84[489])
        v125 = v84;
      else
        v125 = v85;
      v125[489] = glVertexAttrib1fvARB_Comp;
      if (v84[492])
        v126 = v84;
      else
        v126 = v85;
      v126[492] = glVertexAttrib2fvARB_Comp;
      if (v84[495])
        v127 = v84;
      else
        v127 = v85;
      v127[495] = glVertexAttrib3fvARB_Comp;
      if (v84[503])
        v128 = v84;
      else
        v128 = v85;
      v128[503] = glVertexAttrib4fvARB_Comp;
      if (v84[515])
        v129 = v84;
      else
        v129 = v85;
      v129[515] = glGetVertexAttribfvARB_ExecThread;
      if (v84[516])
        v130 = v84;
      else
        v130 = v85;
      v130[516] = glGetVertexAttribivARB_ExecThread;
      if (v84[761])
        v131 = v84;
      else
        v131 = v85;
      v131[761] = glVertexAttribDivisorARB_PackThread;
      if (v84[762])
        v132 = v84;
      else
        v132 = v85;
      v132[762] = glDrawArraysInstanced_PackThread;
      if (v84[763])
        v133 = v84;
      else
        v133 = v85;
      v133[763] = glDrawElementsInstanced_PackThread;
      if (v84[90])
        v134 = v84;
      else
        v134 = v85;
      v134[90] = glFlush_ExecThread;
      if (v84[89])
        v135 = v84;
      else
        v135 = v85;
      v135[89] = glFinish_ExecThread;
      if (v84[102])
        v136 = v84;
      else
        v136 = v85;
      v136[102] = glGetError_ExecThread;
      if (v84[99])
        v137 = v84;
      else
        v137 = v85;
      v137[99] = glGetBooleanv_ExecThread;
      if (v84[104])
        v138 = v84;
      else
        v138 = v85;
      v138[104] = glGetIntegerv_ExecThread;
      if (v84[103])
        v139 = v84;
      else
        v139 = v85;
      v139[103] = glGetFloatv_ExecThread;
      if (v84[117])
        v140 = v84;
      else
        v140 = v85;
      v140[117] = glGetString_ExecThread;
      if (v84[155])
        v141 = v84;
      else
        v141 = v85;
      v141[155] = glLineWidth_Comp;
      if (v84[201])
        v142 = v84;
      else
        v142 = v85;
      v142[201] = glPolygonOffset_Comp;
      if (v84[665])
        v143 = v84;
      else
        v143 = v85;
      v143[665] = glIsRenderbufferEXT_ExecThread;
      if (v84[666])
        v144 = v84;
      else
        v144 = v85;
      v144[666] = glBindRenderbufferEXT_PackThread;
      if (v84[667])
        v145 = v84;
      else
        v145 = v85;
      v145[667] = glDeleteRenderbuffersEXT_ExecThread;
      if (v84[668])
        v146 = v84;
      else
        v146 = v85;
      v146[668] = glGenRenderbuffersEXT_ExecThread;
      if (v84[669])
        v147 = v84;
      else
        v147 = v85;
      v147[669] = glRenderbufferStorageEXT_PackThread;
      if (v84[670])
        v148 = v84;
      else
        v148 = v85;
      v148[670] = glGetRenderbufferParameterivEXT_ExecThread;
      if (v84[671])
        v149 = v84;
      else
        v149 = v85;
      v149[671] = glIsFramebufferEXT_ExecThread;
      if (v84[672])
        v150 = v84;
      else
        v150 = v85;
      v150[672] = glBindFramebufferEXT_PackThread;
      if (v84[673])
        v151 = v84;
      else
        v151 = v85;
      v151[673] = glDeleteFramebuffersEXT_ExecThread;
      if (v84[674])
        v152 = v84;
      else
        v152 = v85;
      v152[674] = glGenFramebuffersEXT_ExecThread;
      if (v84[675])
        v153 = v84;
      else
        v153 = v85;
      v153[675] = glCheckFramebufferStatusEXT_ExecThread;
      if (v84[677])
        v154 = v84;
      else
        v154 = v85;
      v154[677] = glFramebufferTexture2DEXT_PackThread;
      if (v84[679])
        v155 = v84;
      else
        v155 = v85;
      v155[679] = glFramebufferRenderbufferEXT_PackThread;
      if (v84[680])
        v156 = v84;
      else
        v156 = v85;
      v156[680] = glGetFramebufferAttachmentParameterivEXT_ExecThread;
      if (v84[681])
        v157 = v84;
      else
        v157 = v85;
      v157[681] = glGenerateMipmapEXT_PackThread;
      if (v84[128])
        v158 = v84;
      else
        v158 = v85;
      v158[128] = glHint_Comp;
      if (v84[195])
        v159 = v84;
      else
        v159 = v85;
      v159[195] = glPixelStorei_PackThread;
      if (v84[237])
        v160 = v84;
      else
        v160 = v85;
      v160[237] = glReadPixels_PackThread;
      if (v84[459])
        v161 = v84;
      else
        v161 = v85;
      v161[459] = glSampleCoverage_Comp;
      if (v84[463])
        v162 = v84;
      else
        v162 = v85;
      v162[463] = glGenFencesAPPLE_ExecThread;
      if (v84[464])
        v163 = v84;
      else
        v163 = v85;
      v163[464] = glDeleteFencesAPPLE_ExecThread;
      if (v84[466])
        v164 = v84;
      else
        v164 = v85;
      v164[466] = glIsFenceAPPLE_ExecThread;
      if (v84[465])
        v165 = v84;
      else
        v165 = v85;
      v165[465] = glSetFenceAPPLE_PackThread;
      if (v84[467])
        v166 = v84;
      else
        v166 = v85;
      v166[467] = glTestFenceAPPLE_ExecThread;
      if (v84[468])
        v167 = v84;
      else
        v167 = v85;
      v167[468] = glFinishFenceAPPLE_ExecThread;
      if (v84[469])
        v168 = v84;
      else
        v168 = v85;
      v168[469] = glTestObjectAPPLE_ExecThread;
      if (v84[470])
        v169 = v84;
      else
        v169 = v85;
      v169[470] = glFinishObjectAPPLE_ExecThread;
      if (v84[1024])
        v170 = v84;
      else
        v170 = v85;
      v170[1024] = glFramebufferParameterivAPPLE_PackThread;
      if (v84[1025])
        v171 = v84;
      else
        v171 = v85;
      v171[1025] = glGetFramebufferParameterivAPPLE_ExecThread;
      if (v84[1023])
        v172 = v84;
      else
        v172 = v85;
      v172[1023] = glDiscardFramebufferEXT_PackThread;
      if (v84[756])
        v173 = v84;
      else
        v173 = v85;
      v173[756] = glRenderbufferStorageMultisampleEXT_PackThread;
      v174 = *(unsigned __int8 *)(result + 32501);
      if (v174 != 4)
      {
        if (v84[1026])
          v175 = v84;
        else
          v175 = v85;
        v175[1026] = glResolveMultisampleFramebufferAPPLE_PackThread;
      }
      if (v84[1027])
        v176 = v84;
      else
        v176 = v85;
      v176[1027] = glCopyTextureLevels_PackThread;
      if (v84[768])
        v177 = v84;
      else
        v177 = v85;
      v177[768] = glBindVertexArray_PackThread;
      if (v84[769])
        v178 = v84;
      else
        v178 = v85;
      v178[769] = glDeleteVertexArrays_ExecThread;
      if (v84[770])
        v179 = v84;
      else
        v179 = v85;
      v179[770] = glGenVertexArrays_ExecThread;
      if (v84[771])
        v180 = v84;
      else
        v180 = v85;
      v180[771] = glIsVertexArray_ExecThread;
      if (v84[637])
        v181 = v84;
      else
        v181 = v85;
      v181[637] = glBeginQuery_PackThread;
      if (v84[638])
        v182 = v84;
      else
        v182 = v85;
      v182[638] = glEndQuery_PackThread;
      if (v84[634])
        v183 = v84;
      else
        v183 = v85;
      v183[634] = glGenQueries_ExecThread;
      if (v84[635])
        v184 = v84;
      else
        v184 = v85;
      v184[635] = glDeleteQueries_ExecThread;
      if (v84[636])
        v185 = v84;
      else
        v185 = v85;
      v185[636] = glIsQuery_ExecThread;
      if (v84[639])
        v186 = v84;
      else
        v186 = v85;
      v186[639] = glGetQueryiv_ExecThread;
      if (v84[641])
        v187 = v84;
      else
        v187 = v85;
      v187[641] = glGetQueryObjectuiv_ExecThread;
      if (*v1 <= 5u)
      {
        if (v84[640])
          v188 = v84;
        else
          v188 = v85;
        v188[640] = glGetQueryObjectiv_ExecThread;
      }
      if (v84[814])
        v189 = v84;
      else
        v189 = v85;
      v189[814] = glLabelObjectEXT_ExecThread;
      if (v84[815])
        v190 = v84;
      else
        v190 = v85;
      v190[815] = glGetObjectLabelEXT_ExecThread;
      if (v84[816])
        v191 = v84;
      else
        v191 = v85;
      v191[816] = gliNoop;
      if (v84[817])
        v192 = v84;
      else
        v192 = v85;
      v192[817] = gliNoop;
      if (v84[818])
        v193 = v84;
      else
        v193 = v85;
      v193[818] = gliNoop;
      if (v84[1033])
        v194 = v84;
      else
        v194 = v85;
      v194[1033] = glLabelObjectWithResponsibleProcessAPPLE_ExecThread;
      if (v84[819])
        v195 = v84;
      else
        v195 = v85;
      v195[819] = glUseProgramStages_PackThread;
      if (v84[820])
        v196 = v84;
      else
        v196 = v85;
      v196[820] = glActiveShaderProgram_PackThread;
      if (v84[821])
        v197 = v84;
      else
        v197 = v85;
      v197[821] = glCreateShaderProgramv_ExecThread;
      if (v84[822])
        v198 = v84;
      else
        v198 = v85;
      v198[822] = glBindProgramPipeline_PackThread;
      if (v84[823])
        v199 = v84;
      else
        v199 = v85;
      v199[823] = glDeleteProgramPipelines_ExecThread;
      if (v84[824])
        v200 = v84;
      else
        v200 = v85;
      v200[824] = glGenProgramPipelines_ExecThread;
      if (v84[825])
        v201 = v84;
      else
        v201 = v85;
      v201[825] = glIsProgramPipeline_ExecThread;
      if (v84[689])
        v202 = v84;
      else
        v202 = v85;
      v202[689] = glProgramParameteriEXT_PackThread;
      if (v84[826])
        v203 = v84;
      else
        v203 = v85;
      v203[826] = glGetProgramPipelineiv_ExecThread;
      if (v84[827])
        v204 = v84;
      else
        v204 = v85;
      v204[827] = glValidateProgramPipeline_PackThread;
      if (v84[828])
        v205 = v84;
      else
        v205 = v85;
      v205[828] = glGetProgramPipelineInfoLog_ExecThread;
      if (v84[829])
        v206 = v84;
      else
        v206 = v85;
      v206[829] = glProgramUniform1i_Comp;
      if (v84[830])
        v207 = v84;
      else
        v207 = v85;
      v207[830] = glProgramUniform2i_Comp;
      if (v84[831])
        v208 = v84;
      else
        v208 = v85;
      v208[831] = glProgramUniform3i_Comp;
      if (v84[832])
        v209 = v84;
      else
        v209 = v85;
      v209[832] = glProgramUniform4i_Comp;
      if (v84[833])
        v210 = v84;
      else
        v210 = v85;
      v210[833] = glProgramUniform1f_Comp;
      if (v84[834])
        v211 = v84;
      else
        v211 = v85;
      v211[834] = glProgramUniform2f_Comp;
      if (v84[835])
        v212 = v84;
      else
        v212 = v85;
      v212[835] = glProgramUniform3f_Comp;
      if (v84[836])
        v213 = v84;
      else
        v213 = v85;
      v213[836] = glProgramUniform4f_Comp;
      if (v84[837])
        v214 = v84;
      else
        v214 = v85;
      v214[837] = glProgramUniform1iv_Comp;
      if (v84[838])
        v215 = v84;
      else
        v215 = v85;
      v215[838] = glProgramUniform2iv_Comp;
      if (v84[839])
        v216 = v84;
      else
        v216 = v85;
      v216[839] = glProgramUniform3iv_Comp;
      if (v84[840])
        v217 = v84;
      else
        v217 = v85;
      v217[840] = glProgramUniform4iv_Comp;
      if (v84[841])
        v218 = v84;
      else
        v218 = v85;
      v218[841] = glProgramUniform1fv_Comp;
      if (v84[842])
        v219 = v84;
      else
        v219 = v85;
      v219[842] = glProgramUniform2fv_Comp;
      if (v84[843])
        v220 = v84;
      else
        v220 = v85;
      v220[843] = glProgramUniform3fv_Comp;
      if (v84[844])
        v221 = v84;
      else
        v221 = v85;
      v221[844] = glProgramUniform4fv_Comp;
      if (v84[845])
        v222 = v84;
      else
        v222 = v85;
      v222[845] = glProgramUniformMatrix2fv_Comp;
      if (v84[846])
        v223 = v84;
      else
        v223 = v85;
      v223[846] = glProgramUniformMatrix3fv_Comp;
      if (v84[847])
        v224 = v84;
      else
        v224 = v85;
      v224[847] = glProgramUniformMatrix4fv_Comp;
      if (v84[1031])
        v225 = v84;
      else
        v225 = v85;
      v225[1031] = glTexStorage2D_PackThread;
      if (v84[779])
        v226 = v84;
      else
        v226 = v85;
      v226[779] = glFenceSync_ExecThread;
      if (v84[780])
        v227 = v84;
      else
        v227 = v85;
      v227[780] = glIsSync_ExecThread;
      if (v84[781])
        v228 = v84;
      else
        v228 = v85;
      v228[781] = glDeleteSync_ExecThread;
      if (v84[782])
        v229 = v84;
      else
        v229 = v85;
      v229[782] = glClientWaitSync_ExecThread;
      if (v84[783])
        v230 = v84;
      else
        v230 = v85;
      v230[783] = glWaitSync_Comp;
      if (v84[784])
        v231 = v84;
      else
        v231 = v85;
      v231[784] = glGetInteger64v_ExecThread;
      if (v84[785])
        v232 = v84;
      else
        v232 = v85;
      v232[785] = glGetSynciv_ExecThread;
      if (v84[442])
        v233 = v84;
      else
        v233 = v85;
      v233[442] = glGetActiveUniformsiv_ExecThread;
      if (v174 != 4)
        goto LABEL_3097;
      if (v84[236])
        v234 = v84;
      else
        v234 = v85;
      v234[236] = glReadBuffer_Comp;
      if (v84[438])
        v235 = v84;
      else
        v235 = v85;
      v235[438] = glTexImage3D_PackThread;
      if (v84[439])
        v236 = v84;
      else
        v236 = v85;
      v236[439] = glTexSubImage3D_PackThread;
      if (v84[440])
        v237 = v84;
      else
        v237 = v85;
      v237[440] = glCopyTexSubImage3D_Comp;
      if (v84[379])
        v238 = v84;
      else
        v238 = v85;
      v238[379] = glCompressedTexImage3D_PackThread;
      if (v84[382])
        v239 = v84;
      else
        v239 = v85;
      v239[382] = glCompressedTexSubImage3D_PackThread;
      if (v84[654])
        v240 = v84;
      else
        v240 = v85;
      v240[654] = glDrawBuffersARB_Comp;
      if (v84[749])
        v241 = v84;
      else
        v241 = v85;
      v241[749] = glUniformMatrix2x3fv_Comp;
      if (v84[750])
        v242 = v84;
      else
        v242 = v85;
      v242[750] = glUniformMatrix3x2fv_Comp;
      if (v84[751])
        v243 = v84;
      else
        v243 = v85;
      v243[751] = glUniformMatrix2x4fv_Comp;
      if (v84[752])
        v244 = v84;
      else
        v244 = v85;
      v244[752] = glUniformMatrix4x2fv_Comp;
      if (v84[753])
        v245 = v84;
      else
        v245 = v85;
      v245[753] = glUniformMatrix3x4fv_Comp;
      if (v84[754])
        v246 = v84;
      else
        v246 = v85;
      v246[754] = glUniformMatrix4x3fv_Comp;
      if (v84[755])
        v247 = v84;
      else
        v247 = v85;
      v247[755] = glBlitFramebufferEXT_Comp;
      if (v84[691])
        v248 = v84;
      else
        v248 = v85;
      v248[691] = glFramebufferTextureLayerEXT_PackThread;
      if (v84[700])
        v249 = v84;
      else
        v249 = v85;
      v249[700] = glGetIntegerIndexedv_ExecThread;
      if (v84[696])
        v250 = v84;
      else
        v250 = v85;
      v250[696] = glBeginTransformFeedback_PackThread;
      if (v84[697])
        v251 = v84;
      else
        v251 = v85;
      v251[697] = glEndTransformFeedback_PackThread;
      if (v84[693])
        v252 = v84;
      else
        v252 = v85;
      v252[693] = glBindBufferRange_PackThread;
      if (v84[695])
        v253 = v84;
      else
        v253 = v85;
      v253[695] = glBindBufferBase_PackThread;
      if (v84[698])
        v254 = v84;
      else
        v254 = v85;
      v254[698] = glTransformFeedbackVaryingsEXT_ExecThread;
      if (v84[699])
        v255 = v84;
      else
        v255 = v85;
      v255[699] = glGetTransformFeedbackVaryingEXT_ExecThread;
      if (v84[731])
        v256 = v84;
      else
        v256 = v85;
      v256[731] = glVertexAttribIPointerEXT_PackThread;
      if (v84[732])
        v257 = v84;
      else
        v257 = v85;
      v257[732] = glGetVertexAttribIivEXT_ExecThread;
      if (v84[733])
        v258 = v84;
      else
        v258 = v85;
      v258[733] = glGetVertexAttribIuivEXT_ExecThread;
      if (v84[714])
        v259 = v84;
      else
        v259 = v85;
      v259[714] = glVertexAttribI4iEXT_Comp;
      if (v84[718])
        v260 = v84;
      else
        v260 = v85;
      v260[718] = glVertexAttribI4uiEXT_Comp;
      if (v84[722])
        v261 = v84;
      else
        v261 = v85;
      v261[722] = glVertexAttribI4ivEXT_Comp;
      if (v84[726])
        v262 = v84;
      else
        v262 = v85;
      v262[726] = glVertexAttribI4uivEXT_Comp;
      if (v84[742])
        v263 = v84;
      else
        v263 = v85;
      v263[742] = glGetUniformuivEXT_ExecThread;
      v264 = *(_QWORD **)(result + 28984);
      v265 = *(_QWORD **)(result + 28976);
      if (v264[744])
        v266 = *(_QWORD *)(result + 28984);
      else
        v266 = *(_QWORD *)(result + 28976);
      *(_QWORD *)(v266 + 5952) = glGetFragDataLocationEXT_ExecThread;
      if (v264[734])
        v267 = v264;
      else
        v267 = v265;
      v267[734] = glUniform1ui_Comp;
      if (v264[735])
        v268 = v264;
      else
        v268 = v265;
      v268[735] = glUniform2ui_Comp;
      if (v264[736])
        v269 = v264;
      else
        v269 = v265;
      v269[736] = glUniform3ui_Comp;
      if (v264[737])
        v270 = v264;
      else
        v270 = v265;
      v270[737] = glUniform4ui_Comp;
      if (v264[738])
        v271 = v264;
      else
        v271 = v265;
      v271[738] = glUniform1uiv_Comp;
      if (v264[739])
        v272 = v264;
      else
        v272 = v265;
      v272[739] = glUniform2uiv_Comp;
      if (v264[740])
        v273 = v264;
      else
        v273 = v265;
      v273[740] = glUniform3uiv_Comp;
      if (v264[741])
        v274 = v264;
      else
        v274 = v265;
      v274[741] = glUniform4uiv_Comp;
      if (v264[774])
        v275 = v264;
      else
        v275 = v265;
      v275[774] = glClearBufferiv_PackThread;
      if (v264[775])
        v276 = v264;
      else
        v276 = v265;
      v276[775] = glClearBufferuiv_PackThread;
      if (v264[776])
        v277 = v264;
      else
        v277 = v265;
      v277[776] = glClearBufferfv_PackThread;
      if (v264[777])
        v278 = v264;
      else
        v278 = v265;
      v278[777] = glClearBufferfi_PackThread;
      if (v264[778])
        v279 = v264;
      else
        v279 = v265;
      v279[778] = glGetStringi_ExecThread;
      if (v264[791])
        v280 = v264;
      else
        v280 = v265;
      v280[791] = glCopyBufferSubData_PackThread;
      if (v264[441])
        v281 = v264;
      else
        v281 = v265;
      v281[441] = glGetUniformIndices_ExecThread;
      if (v264[444])
        v282 = v264;
      else
        v282 = v265;
      v282[444] = glGetUniformBlockIndex_ExecThread;
      if (v264[445])
        v283 = v264;
      else
        v283 = v265;
      v283[445] = glGetActiveUniformBlockiv_ExecThread;
      if (v264[446])
        v284 = v264;
      else
        v284 = v265;
      v284[446] = glGetActiveUniformBlockName_ExecThread;
      if (v264[447])
        v285 = v264;
      else
        v285 = v265;
      v285[447] = glUniformBlockBinding_PackThread;
      if (v264[405])
        v286 = v264;
      else
        v286 = v265;
      v286[405] = glDrawRangeElements_PackThread;
      if (v264[798])
        v287 = v264;
      else
        v287 = v265;
      v287[798] = glGetInteger64i_v_ExecThread;
      if (v264[799])
        v288 = v264;
      else
        v288 = v265;
      v288[799] = glGetBufferParameteri64v_ExecThread;
      if (v264[800])
        v289 = v264;
      else
        v289 = v265;
      v289[800] = glGenSamplers_ExecThread;
      if (v264[801])
        v290 = v264;
      else
        v290 = v265;
      v290[801] = glDeleteSamplers_ExecThread;
      if (v264[802])
        v291 = v264;
      else
        v291 = v265;
      v291[802] = glIsSampler_ExecThread;
      if (v264[803])
        v292 = v264;
      else
        v292 = v265;
      v292[803] = glBindSampler_PackThread;
      if (v264[804])
        v293 = v264;
      else
        v293 = v265;
      v293[804] = glSamplerParameteri_PackThread;
      if (v264[805])
        v294 = v264;
      else
        v294 = v265;
      v294[805] = glSamplerParameteriv_PackThread;
      if (v264[806])
        v295 = v264;
      else
        v295 = v265;
      v295[806] = glSamplerParameterf_PackThread;
      if (v264[807])
        v296 = v264;
      else
        v296 = v265;
      v296[807] = glSamplerParameterfv_PackThread;
      if (v264[810])
        v297 = v264;
      else
        v297 = v265;
      v297[810] = glGetSamplerParameteriv_ExecThread;
      if (v264[811])
        v298 = v264;
      else
        v298 = v265;
      v298[811] = glGetSamplerParameterfv_ExecThread;
      if (v264[904])
        v299 = v264;
      else
        v299 = v265;
      v299[904] = glBindTransformFeedback_PackThread;
      if (v264[905])
        v300 = v264;
      else
        v300 = v265;
      v300[905] = glGenTransformFeedbacks_ExecThread;
      if (v264[906])
        v301 = v264;
      else
        v301 = v265;
      v301[906] = glDeleteTransformFeedbacks_ExecThread;
      if (v264[907])
        v302 = v264;
      else
        v302 = v265;
      v302[907] = glPauseTransformFeedback_PackThread;
      if (v264[908])
        v303 = v264;
      else
        v303 = v265;
      v303[908] = glResumeTransformFeedback_PackThread;
      if (v264[909])
        v304 = v264;
      else
        v304 = v265;
      v304[909] = glIsTransformFeedback_ExecThread;
      if (v264[887])
        v305 = v264;
      else
        v305 = v265;
      v305[887] = glGetProgramBinary_ExecThread;
      if (v264[888])
        v306 = v264;
      else
        v306 = v265;
      v306[888] = glProgramBinary_ExecThread;
      if (v264[1028])
        v307 = v264;
      else
        v307 = v265;
      v307[1028] = glInvalidateSubFramebuffer_PackThread;
      if (v264[1029])
        v308 = v264;
      else
        v308 = v265;
      v308[1029] = glGetInternalformativ_ExecThread;
      if (v264[1032])
        v309 = v264;
      else
        v309 = v265;
      v309[1032] = glTexStorage3D_PackThread;
      if (v264[848])
        v310 = v264;
      else
        v310 = v265;
      v310[848] = glProgramUniform1ui_Comp;
      if (v264[849])
        v311 = v264;
      else
        v311 = v265;
      v311[849] = glProgramUniform2ui_Comp;
      if (v264[850])
        v312 = v264;
      else
        v312 = v265;
      v312[850] = glProgramUniform3ui_Comp;
      if (v264[851])
        v313 = v264;
      else
        v313 = v265;
      v313[851] = glProgramUniform4ui_Comp;
      if (v264[852])
        v314 = v264;
      else
        v314 = v265;
      v314[852] = glProgramUniform1uiv_Comp;
      if (v264[853])
        v315 = v264;
      else
        v315 = v265;
      v315[853] = glProgramUniform2uiv_Comp;
      if (v264[854])
        v316 = v264;
      else
        v316 = v265;
      v316[854] = glProgramUniform3uiv_Comp;
      if (v264[855])
        v317 = v264;
      else
        v317 = v265;
      v317[855] = glProgramUniform4uiv_Comp;
      if (v264[856])
        v318 = v264;
      else
        v318 = v265;
      v318[856] = glProgramUniformMatrix2x3fv_Comp;
      if (v264[857])
        v319 = v264;
      else
        v319 = v265;
      v319[857] = glProgramUniformMatrix3x2fv_Comp;
      if (v264[858])
        v320 = v264;
      else
        v320 = v265;
      v320[858] = glProgramUniformMatrix2x4fv_Comp;
      if (v264[859])
        v321 = v264;
      else
        v321 = v265;
      v321[859] = glProgramUniformMatrix4x2fv_Comp;
      if (v264[860])
        v322 = v264;
      else
        v322 = v265;
      v322[860] = glProgramUniformMatrix3x4fv_Comp;
      if (!v264[861])
        v264 = v265;
      v323 = glProgramUniformMatrix4x3fv_Comp;
    }
    else
    {
      *(_QWORD *)(v10 + 2008) = glScissor_Exec;
      if (v8[49])
        v535 = v8;
      else
        v535 = v9;
      v535[49] = glColorMask_Exec;
      if (v8[337])
        v536 = v8;
      else
        v536 = v9;
      v536[337] = glBlendColor_Exec;
      if (v8[338])
        v537 = v8;
      else
        v537 = v9;
      v537[338] = glBlendEquation_Exec;
      if (v8[458])
        v538 = v8;
      else
        v538 = v9;
      v538[458] = glBlendEquationSeparateEXT_Exec;
      if (v8[7])
        v539 = v8;
      else
        v539 = v9;
      v539[7] = glBlendFunc_Exec;
      if (v8[336])
        v540 = v8;
      else
        v540 = v9;
      v540[336] = glBlendFuncSeparate_Exec;
      v541 = v8[61];
      if (v8[60])
        v542 = v8;
      else
        v542 = v9;
      v542[60] = glDepthFunc_Exec;
      if (v541)
        v543 = v8;
      else
        v543 = v9;
      v543[61] = glDepthMask_Exec;
      if (v8[254])
        v544 = v8;
      else
        v544 = v9;
      v544[254] = glStencilFunc_Exec;
      if (v8[661])
        v545 = v8;
      else
        v545 = v9;
      v545[661] = glStencilFuncSeparate_Exec;
      if (v8[256])
        v546 = v8;
      else
        v546 = v9;
      v546[256] = glStencilOp_Exec;
      if (v8[586])
        v547 = v8;
      else
        v547 = v9;
      v547[586] = glStencilOpSeparateATI_Exec;
      if (v8[255])
        v548 = v8;
      else
        v548 = v9;
      v548[255] = glStencilMask_Exec;
      if (v8[662])
        v549 = v8;
      else
        v549 = v9;
      v549[662] = glStencilMaskSeparate_Exec;
      if (v8[10])
        v550 = v8;
      else
        v550 = v9;
      v550[10] = glClear_Exec;
      if (v8[12])
        v551 = v8;
      else
        v551 = v9;
      v551[12] = glClearColor_Exec;
      if (v8[878])
        v552 = v8;
      else
        v552 = v9;
      v552[878] = glClearDepthf_Exec;
      if (v8[15])
        v553 = v8;
      else
        v553 = v9;
      v553[15] = glClearStencil_Exec;
      if (v8[644])
        v554 = v8;
      else
        v554 = v9;
      v554[644] = glGenBuffers_Exec;
      if (v8[643])
        v555 = v8;
      else
        v555 = v9;
      v555[643] = glDeleteBuffers_Exec;
      if (v8[645])
        v556 = v8;
      else
        v556 = v9;
      v556[645] = glIsBuffer_Exec;
      if (v8[642])
        v557 = v8;
      else
        v557 = v9;
      v557[642] = glBindBuffer_Exec;
      if (v8[646])
        v558 = v8;
      else
        v558 = v9;
      v558[646] = glBufferData_Exec;
      if (v8[647])
        v559 = v8;
      else
        v559 = v9;
      v559[647] = glBufferSubData_Exec;
      if (v8[651])
        v560 = v8;
      else
        v560 = v9;
      v560[651] = glGetBufferParameteriv_Exec;
      if (v7 != 4)
      {
        if (v8[649])
          v561 = v8;
        else
          v561 = v9;
        v561[649] = glMapBuffer_Exec;
      }
      if (v8[650])
        v562 = v8;
      else
        v562 = v9;
      v562[650] = glUnmapBuffer_Exec;
      if (v8[652])
        v563 = v8;
      else
        v563 = v9;
      v563[652] = glGetBufferPointerv_Exec;
      if (v8[795])
        v564 = v8;
      else
        v564 = v9;
      v564[795] = glMapBufferRange_Exec;
      if (v8[796])
        v565 = v8;
      else
        v565 = v9;
      v565[796] = glFlushMappedBufferRange_Exec;
      if (v8[98])
        v566 = v8;
      else
        v566 = v9;
      v566[98] = glGenTextures_Exec;
      if (v8[59])
        v567 = v8;
      else
        v567 = v9;
      v567[59] = glDeleteTextures_Exec;
      if (v8[145])
        v568 = v8;
      else
        v568 = v9;
      v568[145] = glIsTexture_Exec;
      if (v8[5])
        v569 = v8;
      else
        v569 = v9;
      v569[5] = glBindTexture_Exec;
      if (v8[342])
        v570 = v8;
      else
        v570 = v9;
      v570[342] = glActiveTexture_Exec;
      if (v8[301])
        v571 = v8;
      else
        v571 = v9;
      v571[301] = glTexImage2D_Exec;
      if (v8[307])
        v572 = v8;
      else
        v572 = v9;
      v572[307] = glTexSubImage2D_Exec;
      if (v8[54])
        v573 = v8;
      else
        v573 = v9;
      v573[54] = glCopyTexImage2D_Exec;
      if (v8[56])
        v574 = v8;
      else
        v574 = v9;
      v574[56] = glCopyTexSubImage2D_Exec;
      if (v8[380])
        v575 = v8;
      else
        v575 = v9;
      v575[380] = glCompressedTexImage2D_Exec;
      if (v8[383])
        v576 = v8;
      else
        v576 = v9;
      v576[383] = glCompressedTexSubImage2D_Exec;
      if (v8[304])
        v577 = v8;
      else
        v577 = v9;
      v577[304] = glTexParameteri_Exec;
      if (v8[302])
        v578 = v8;
      else
        v578 = v9;
      v578[302] = glTexParameterf_Exec;
      if (v8[305])
        v579 = v8;
      else
        v579 = v9;
      v579[305] = glTexParameteriv_Exec;
      if (v8[303])
        v580 = v8;
      else
        v580 = v9;
      v580[303] = glTexParameterfv_Exec;
      if (v8[127])
        v581 = v8;
      else
        v581 = v9;
      v581[127] = glGetTexParameteriv_Exec;
      if (v8[126])
        v582 = v8;
      else
        v582 = v9;
      v582[126] = glGetTexParameterfv_Exec;
      if (v8[594])
        v583 = v8;
      else
        v583 = v9;
      v583[594] = glCreateShaderObjectARB_Exec;
      if (v8[591])
        v584 = v8;
      else
        v584 = v9;
      v584[591] = glDeleteObjectARB_Exec;
      if (v8[655])
        v585 = v8;
      else
        v585 = v9;
      v585[655] = glIsShader_Exec;
      if (v8[596])
        v586 = v8;
      else
        v586 = v9;
      v586[596] = glCompileShaderARB_Exec;
      if (v8[657])
        v587 = v8;
      else
        v587 = v9;
      v587[657] = glGetShaderiv_Exec;
      if (v8[659])
        v588 = v8;
      else
        v588 = v9;
      v588[659] = glGetShaderInfoLog_Exec;
      if (v8[629])
        v589 = v8;
      else
        v589 = v9;
      v589[629] = glGetShaderSourceARB_Exec;
      if (v8[595])
        v590 = v8;
      else
        v590 = v9;
      v590[595] = glShaderSourceARB_Exec;
      if (v8[875])
        v591 = v8;
      else
        v591 = v9;
      v591[875] = glShaderBinaryOES_Exec;
      if (v8[876])
        v592 = v8;
      else
        v592 = v9;
      v592[876] = glGetShaderPrecisionFormatOES_Exec;
      if (v8[874])
        v593 = v8;
      else
        v593 = v9;
      v593[874] = glReleaseShaderCompilerOES_Exec;
      if (v8[597])
        v594 = v8;
      else
        v594 = v9;
      v594[597] = glCreateProgramObjectARB_Exec;
      if (v8[591])
        v595 = v8;
      else
        v595 = v9;
      v595[591] = glDeleteObjectARB_Exec;
      if (v8[656])
        v596 = v8;
      else
        v596 = v9;
      v596[656] = glIsProgram_Exec;
      if (v8[598])
        v597 = v8;
      else
        v597 = v9;
      v597[598] = glAttachObjectARB_Exec;
      if (v8[593])
        v598 = v8;
      else
        v598 = v9;
      v598[593] = glDetachObjectARB_Exec;
      if (v8[599])
        v599 = v8;
      else
        v599 = v9;
      v599[599] = glLinkProgramARB_Exec;
      if (v8[601])
        v600 = v8;
      else
        v600 = v9;
      v600[601] = glValidateProgramARB_Exec;
      if (v8[600])
        v601 = v8;
      else
        v601 = v9;
      v601[600] = glUseProgramObjectARB_Exec;
      if (v8[630])
        v602 = v8;
      else
        v602 = v9;
      v602[630] = glBindAttribLocationARB_Exec;
      if (v8[626])
        v603 = v8;
      else
        v603 = v9;
      v603[626] = glGetActiveUniformARB_Exec;
      if (v8[631])
        v604 = v8;
      else
        v604 = v9;
      v604[631] = glGetActiveAttribARB_Exec;
      if (v8[658])
        v605 = v8;
      else
        v605 = v9;
      v605[658] = glGetProgramiv_Exec;
      if (v8[660])
        v606 = v8;
      else
        v606 = v9;
      v606[660] = glGetProgramInfoLog_Exec;
      if (v8[632])
        v607 = v8;
      else
        v607 = v9;
      v607[632] = glGetAttribLocationARB_Exec;
      if (!v8[625])
        v8 = v9;
      v8[625] = glGetUniformLocationARB_Exec;
      v608 = *(_QWORD **)(result + 28984);
      v609 = *(_QWORD **)(result + 28976);
      if (v608[759])
        v610 = *(_QWORD *)(result + 28984);
      else
        v610 = *(_QWORD *)(result + 28976);
      *(_QWORD *)(v610 + 6072) = glGetAttachedShaders_Exec;
      if (v608[606])
        v611 = v608;
      else
        v611 = v609;
      v611[606] = glUniform1i_Exec;
      if (v608[607])
        v612 = v608;
      else
        v612 = v609;
      v612[607] = glUniform2i_Exec;
      if (v608[608])
        v613 = v608;
      else
        v613 = v609;
      v613[608] = glUniform3i_Exec;
      if (v608[609])
        v614 = v608;
      else
        v614 = v609;
      v614[609] = glUniform4i_Exec;
      if (v608[602])
        v615 = v608;
      else
        v615 = v609;
      v615[602] = glUniform1f_Exec;
      if (v608[603])
        v616 = v608;
      else
        v616 = v609;
      v616[603] = glUniform2f_Exec;
      if (v608[604])
        v617 = v608;
      else
        v617 = v609;
      v617[604] = glUniform3f_Exec;
      if (v608[605])
        v618 = v608;
      else
        v618 = v609;
      v618[605] = glUniform4f_Exec;
      if (v608[614])
        v619 = v608;
      else
        v619 = v609;
      v619[614] = glUniform1iv_Exec;
      if (v608[615])
        v620 = v608;
      else
        v620 = v609;
      v620[615] = glUniform2iv_Exec;
      if (v608[616])
        v621 = v608;
      else
        v621 = v609;
      v621[616] = glUniform3iv_Exec;
      if (v608[617])
        v622 = v608;
      else
        v622 = v609;
      v622[617] = glUniform4iv_Exec;
      if (v608[610])
        v623 = v608;
      else
        v623 = v609;
      v623[610] = glUniform1fv_Exec;
      if (v608[611])
        v624 = v608;
      else
        v624 = v609;
      v624[611] = glUniform2fv_Exec;
      if (v608[612])
        v625 = v608;
      else
        v625 = v609;
      v625[612] = glUniform3fv_Exec;
      if (v608[613])
        v626 = v608;
      else
        v626 = v609;
      v626[613] = glUniform4fv_Exec;
      if (v608[618])
        v627 = v608;
      else
        v627 = v609;
      v627[618] = glUniformMatrix2fv_Exec;
      if (v608[619])
        v628 = v608;
      else
        v628 = v609;
      v628[619] = glUniformMatrix3fv_Exec;
      if (v608[620])
        v629 = v608;
      else
        v629 = v609;
      v629[620] = glUniformMatrix4fv_Exec;
      if (v608[627])
        v630 = v608;
      else
        v630 = v609;
      v630[627] = glGetUniformfvARB_Exec;
      if (v608[628])
        v631 = v608;
      else
        v631 = v609;
      v631[628] = glGetUniformivARB_Exec;
      if (v608[57])
        v632 = v608;
      else
        v632 = v609;
      v632[57] = glCullFace_Exec;
      if (v608[95])
        v633 = v608;
      else
        v633 = v609;
      v633[95] = glFrontFace_Exec;
      if (v608[877])
        v634 = v608;
      else
        v634 = v609;
      v634[877] = glDepthRangef_Exec;
      if (v608[335])
        v635 = v608;
      else
        v635 = v609;
      v635[335] = glViewport_Exec;
      if (v608[72])
        v636 = v608;
      else
        v636 = v609;
      v636[72] = glEnable_Exec;
      if (v608[63])
        v637 = v608;
      else
        v637 = v609;
      v637[63] = glDisable_Exec;
      if (v608[143])
        v638 = v608;
      else
        v638 = v609;
      v638[143] = glIsEnabled_Exec;
      if (v608[65])
        v639 = v608;
      else
        v639 = v609;
      v639[65] = glDrawArrays_ES2Exec;
      if (v608[67])
        v640 = v608;
      else
        v640 = v609;
      v640[67] = glDrawElements_ES2Exec;
      if (v608[511])
        v641 = v608;
      else
        v641 = v609;
      v641[511] = glVertexAttribPointerARB_Exec;
      if (v608[517])
        v642 = v608;
      else
        v642 = v609;
      v642[517] = glGetVertexAttribPointervARB_Exec;
      if (v608[512])
        v643 = v608;
      else
        v643 = v609;
      v643[512] = glEnableVertexAttribArrayARB_Exec;
      if (v608[513])
        v644 = v608;
      else
        v644 = v609;
      v644[513] = glDisableVertexAttribArrayARB_Exec;
      if (v608[476])
        v645 = v608;
      else
        v645 = v609;
      v645[476] = glVertexAttrib1fARB_Exec;
      if (v608[479])
        v646 = v608;
      else
        v646 = v609;
      v646[479] = glVertexAttrib2fARB_Exec;
      if (v608[482])
        v647 = v608;
      else
        v647 = v609;
      v647[482] = glVertexAttrib3fARB_Exec;
      if (v608[485])
        v648 = v608;
      else
        v648 = v609;
      v648[485] = glVertexAttrib4fARB_Exec;
      if (v608[489])
        v649 = v608;
      else
        v649 = v609;
      v649[489] = glVertexAttrib1fvARB_Exec;
      if (v608[492])
        v650 = v608;
      else
        v650 = v609;
      v650[492] = glVertexAttrib2fvARB_Exec;
      if (v608[495])
        v651 = v608;
      else
        v651 = v609;
      v651[495] = glVertexAttrib3fvARB_Exec;
      if (v608[503])
        v652 = v608;
      else
        v652 = v609;
      v652[503] = glVertexAttrib4fvARB_Exec;
      if (v608[515])
        v653 = v608;
      else
        v653 = v609;
      v653[515] = glGetVertexAttribfvARB_Exec;
      if (v608[516])
        v654 = v608;
      else
        v654 = v609;
      v654[516] = glGetVertexAttribivARB_Exec;
      if (v608[761])
        v655 = v608;
      else
        v655 = v609;
      v655[761] = glVertexAttribDivisorARB_Exec;
      if (v608[762])
        v656 = v608;
      else
        v656 = v609;
      v656[762] = glDrawArraysInstanced_ES2Exec;
      if (v608[763])
        v657 = v608;
      else
        v657 = v609;
      v657[763] = glDrawElementsInstanced_ES2Exec;
      if (v608[90])
        v658 = v608;
      else
        v658 = v609;
      v658[90] = glFlush_Exec;
      if (v608[89])
        v659 = v608;
      else
        v659 = v609;
      v659[89] = glFinish_Exec;
      if (v608[102])
        v660 = v608;
      else
        v660 = v609;
      v660[102] = glGetError_Exec;
      if (v608[99])
        v661 = v608;
      else
        v661 = v609;
      v661[99] = glGetBooleanv_Exec;
      if (v608[104])
        v662 = v608;
      else
        v662 = v609;
      v662[104] = glGetIntegerv_Exec;
      if (v608[103])
        v663 = v608;
      else
        v663 = v609;
      v663[103] = glGetFloatv_Exec;
      if (v608[117])
        v664 = v608;
      else
        v664 = v609;
      v664[117] = glGetString_Exec;
      if (v608[155])
        v665 = v608;
      else
        v665 = v609;
      v665[155] = glLineWidth_Exec;
      if (v608[201])
        v666 = v608;
      else
        v666 = v609;
      v666[201] = glPolygonOffset_Exec;
      if (v608[665])
        v667 = v608;
      else
        v667 = v609;
      v667[665] = glIsRenderbufferEXT_Exec;
      if (v608[666])
        v668 = v608;
      else
        v668 = v609;
      v668[666] = glBindRenderbuffer_Exec;
      if (v608[667])
        v669 = v608;
      else
        v669 = v609;
      v669[667] = glDeleteRenderbuffersEXT_Exec;
      if (v608[668])
        v670 = v608;
      else
        v670 = v609;
      v670[668] = glGenRenderbuffersEXT_Exec;
      if (v608[669])
        v671 = v608;
      else
        v671 = v609;
      v671[669] = glRenderbufferStorageEXT_Exec;
      if (v608[670])
        v672 = v608;
      else
        v672 = v609;
      v672[670] = glGetRenderbufferParameterivEXT_Exec;
      if (v608[671])
        v673 = v608;
      else
        v673 = v609;
      v673[671] = glIsFramebufferEXT_Exec;
      if (v608[672])
        v674 = v608;
      else
        v674 = v609;
      v674[672] = glBindFramebuffer_Exec;
      if (v608[673])
        v675 = v608;
      else
        v675 = v609;
      v675[673] = glDeleteFramebuffersEXT_Exec;
      if (v608[674])
        v676 = v608;
      else
        v676 = v609;
      v676[674] = glGenFramebuffersEXT_Exec;
      if (v608[675])
        v677 = v608;
      else
        v677 = v609;
      v677[675] = glCheckFramebufferStatusEXT_Exec;
      if (v608[677])
        v678 = v608;
      else
        v678 = v609;
      v678[677] = glFramebufferTexture2DEXT_Exec;
      if (v608[679])
        v679 = v608;
      else
        v679 = v609;
      v679[679] = glFramebufferRenderbufferEXT_Exec;
      if (v608[680])
        v680 = v608;
      else
        v680 = v609;
      v680[680] = glGetFramebufferAttachmentParameterivEXT_Exec;
      if (v608[681])
        v681 = v608;
      else
        v681 = v609;
      v681[681] = glGenerateMipmapEXT_Exec;
      if (v608[128])
        v682 = v608;
      else
        v682 = v609;
      v682[128] = glHint_Exec;
      if (v608[195])
        v683 = v608;
      else
        v683 = v609;
      v683[195] = glPixelStorei_Exec;
      if (v608[237])
        v684 = v608;
      else
        v684 = v609;
      v684[237] = glReadPixels_Exec;
      if (v608[459])
        v685 = v608;
      else
        v685 = v609;
      v685[459] = glSampleCoverage_Exec;
      if (v608[463])
        v686 = v608;
      else
        v686 = v609;
      v686[463] = glGenFencesAPPLE_Exec;
      if (v608[464])
        v687 = v608;
      else
        v687 = v609;
      v687[464] = glDeleteFencesAPPLE_Exec;
      if (v608[466])
        v688 = v608;
      else
        v688 = v609;
      v688[466] = glIsFenceAPPLE_Exec;
      if (v608[465])
        v689 = v608;
      else
        v689 = v609;
      v689[465] = glSetFenceAPPLE_Exec;
      if (v608[467])
        v690 = v608;
      else
        v690 = v609;
      v690[467] = glTestFenceAPPLE_Exec;
      if (v608[468])
        v691 = v608;
      else
        v691 = v609;
      v691[468] = glFinishFenceAPPLE_Exec;
      if (v608[469])
        v692 = v608;
      else
        v692 = v609;
      v692[469] = glTestObjectAPPLE_Exec;
      if (v608[470])
        v693 = v608;
      else
        v693 = v609;
      v693[470] = glFinishObjectAPPLE_Exec;
      if (v608[1024])
        v694 = v608;
      else
        v694 = v609;
      v694[1024] = glFramebufferParameterivAPPLE_Exec;
      if (v608[1025])
        v695 = v608;
      else
        v695 = v609;
      v695[1025] = glGetFramebufferParameterivAPPLE_Exec;
      if (v608[1023])
        v696 = v608;
      else
        v696 = v609;
      v696[1023] = glDiscardFramebufferEXT_Exec;
      if (v608[756])
        v697 = v608;
      else
        v697 = v609;
      v697[756] = glRenderbufferStorageMultisampleEXT_Exec;
      v698 = *(unsigned __int8 *)(result + 32501);
      if (v698 != 4)
      {
        if (v608[1026])
          v699 = v608;
        else
          v699 = v609;
        v699[1026] = glResolveMultisampleFramebufferAPPLE_Exec;
      }
      if (v608[1027])
        v700 = v608;
      else
        v700 = v609;
      v700[1027] = glCopyTextureLevels_Exec;
      if (v608[768])
        v701 = v608;
      else
        v701 = v609;
      v701[768] = glBindVertexArray_Exec;
      if (v608[769])
        v702 = v608;
      else
        v702 = v609;
      v702[769] = glDeleteVertexArrays_Exec;
      if (v608[770])
        v703 = v608;
      else
        v703 = v609;
      v703[770] = glGenVertexArrays_Exec;
      if (v608[771])
        v704 = v608;
      else
        v704 = v609;
      v704[771] = glIsVertexArray_Exec;
      if (v608[637])
        v705 = v608;
      else
        v705 = v609;
      v705[637] = glBeginQuery_Exec;
      if (v608[638])
        v706 = v608;
      else
        v706 = v609;
      v706[638] = glEndQuery_Exec;
      if (v608[634])
        v707 = v608;
      else
        v707 = v609;
      v707[634] = glGenQueries_Exec;
      if (v608[635])
        v708 = v608;
      else
        v708 = v609;
      v708[635] = glDeleteQueries_Exec;
      if (v608[636])
        v709 = v608;
      else
        v709 = v609;
      v709[636] = glIsQuery_Exec;
      if (v608[639])
        v710 = v608;
      else
        v710 = v609;
      v710[639] = glGetQueryiv_Exec;
      if (v608[641])
        v711 = v608;
      else
        v711 = v609;
      v711[641] = glGetQueryObjectuiv_Exec;
      if (*v1 <= 5u)
      {
        if (v608[640])
          v712 = v608;
        else
          v712 = v609;
        v712[640] = glGetQueryObjectiv_Exec;
      }
      if (v608[814])
        v713 = v608;
      else
        v713 = v609;
      v713[814] = glLabelObjectEXT_Exec;
      if (v608[815])
        v714 = v608;
      else
        v714 = v609;
      v714[815] = glGetObjectLabelEXT_Exec;
      if (v608[816])
        v715 = v608;
      else
        v715 = v609;
      v715[816] = gliNoop;
      if (v608[817])
        v716 = v608;
      else
        v716 = v609;
      v716[817] = gliNoop;
      if (v608[818])
        v717 = v608;
      else
        v717 = v609;
      v717[818] = gliNoop;
      if (v608[1033])
        v718 = v608;
      else
        v718 = v609;
      v718[1033] = glLabelObjectWithResponsibleProcessAPPLE_Exec;
      if (v608[819])
        v719 = v608;
      else
        v719 = v609;
      v719[819] = glUseProgramStages_Exec;
      if (v608[820])
        v720 = v608;
      else
        v720 = v609;
      v720[820] = glActiveShaderProgram_Exec;
      if (v608[821])
        v721 = v608;
      else
        v721 = v609;
      v721[821] = glCreateShaderProgramv_Exec;
      if (v608[822])
        v722 = v608;
      else
        v722 = v609;
      v722[822] = glBindProgramPipeline_Exec;
      if (v608[823])
        v723 = v608;
      else
        v723 = v609;
      v723[823] = glDeleteProgramPipelines_Exec;
      if (v608[824])
        v724 = v608;
      else
        v724 = v609;
      v724[824] = glGenProgramPipelines_Exec;
      if (v608[825])
        v725 = v608;
      else
        v725 = v609;
      v725[825] = glIsProgramPipeline_Exec;
      if (v608[689])
        v726 = v608;
      else
        v726 = v609;
      v726[689] = glProgramParameteriEXT_Exec;
      if (v608[826])
        v727 = v608;
      else
        v727 = v609;
      v727[826] = glGetProgramPipelineiv_Exec;
      if (v608[827])
        v728 = v608;
      else
        v728 = v609;
      v728[827] = glValidateProgramPipeline_Exec;
      if (v608[828])
        v729 = v608;
      else
        v729 = v609;
      v729[828] = glGetProgramPipelineInfoLog_Exec;
      if (v608[829])
        v730 = v608;
      else
        v730 = v609;
      v730[829] = glProgramUniform1i_Exec;
      if (v608[830])
        v731 = v608;
      else
        v731 = v609;
      v731[830] = glProgramUniform2i_Exec;
      if (v608[831])
        v732 = v608;
      else
        v732 = v609;
      v732[831] = glProgramUniform3i_Exec;
      if (v608[832])
        v733 = v608;
      else
        v733 = v609;
      v733[832] = glProgramUniform4i_Exec;
      if (v608[833])
        v734 = v608;
      else
        v734 = v609;
      v734[833] = glProgramUniform1f_Exec;
      if (v608[834])
        v735 = v608;
      else
        v735 = v609;
      v735[834] = glProgramUniform2f_Exec;
      if (v608[835])
        v736 = v608;
      else
        v736 = v609;
      v736[835] = glProgramUniform3f_Exec;
      if (v608[836])
        v737 = v608;
      else
        v737 = v609;
      v737[836] = glProgramUniform4f_Exec;
      if (v608[837])
        v738 = v608;
      else
        v738 = v609;
      v738[837] = glProgramUniform1iv_Exec;
      if (v608[838])
        v739 = v608;
      else
        v739 = v609;
      v739[838] = glProgramUniform2iv_Exec;
      if (v608[839])
        v740 = v608;
      else
        v740 = v609;
      v740[839] = glProgramUniform3iv_Exec;
      if (v608[840])
        v741 = v608;
      else
        v741 = v609;
      v741[840] = glProgramUniform4iv_Exec;
      if (v608[841])
        v742 = v608;
      else
        v742 = v609;
      v742[841] = glProgramUniform1fv_Exec;
      if (v608[842])
        v743 = v608;
      else
        v743 = v609;
      v743[842] = glProgramUniform2fv_Exec;
      if (v608[843])
        v744 = v608;
      else
        v744 = v609;
      v744[843] = glProgramUniform3fv_Exec;
      if (v608[844])
        v745 = v608;
      else
        v745 = v609;
      v745[844] = glProgramUniform4fv_Exec;
      if (v608[845])
        v746 = v608;
      else
        v746 = v609;
      v746[845] = glProgramUniformMatrix2fv_Exec;
      if (v608[846])
        v747 = v608;
      else
        v747 = v609;
      v747[846] = glProgramUniformMatrix3fv_Exec;
      if (v608[847])
        v748 = v608;
      else
        v748 = v609;
      v748[847] = glProgramUniformMatrix4fv_Exec;
      if (v608[1031])
        v749 = v608;
      else
        v749 = v609;
      v749[1031] = glTexStorage2D_Exec;
      if (v608[779])
        v750 = v608;
      else
        v750 = v609;
      v750[779] = glFenceSync_Exec;
      if (v608[780])
        v751 = v608;
      else
        v751 = v609;
      v751[780] = glIsSync_Exec;
      if (v608[781])
        v752 = v608;
      else
        v752 = v609;
      v752[781] = glDeleteSync_Exec;
      if (v608[782])
        v753 = v608;
      else
        v753 = v609;
      v753[782] = glClientWaitSync_Exec;
      if (v608[783])
        v754 = v608;
      else
        v754 = v609;
      v754[783] = glWaitSync_Exec;
      if (v608[784])
        v755 = v608;
      else
        v755 = v609;
      v755[784] = glGetInteger64v_Exec;
      if (v608[785])
        v756 = v608;
      else
        v756 = v609;
      v756[785] = glGetSynciv_Exec;
      if (v608[442])
        v757 = v608;
      else
        v757 = v609;
      v757[442] = glGetActiveUniformsiv_Exec;
      if (v698 != 4)
        goto LABEL_3097;
      if (v608[236])
        v758 = v608;
      else
        v758 = v609;
      v758[236] = glReadBuffer_Exec;
      if (v608[438])
        v759 = v608;
      else
        v759 = v609;
      v759[438] = glTexImage3D_Exec;
      if (v608[439])
        v760 = v608;
      else
        v760 = v609;
      v760[439] = glTexSubImage3D_Exec;
      if (v608[440])
        v761 = v608;
      else
        v761 = v609;
      v761[440] = glCopyTexSubImage3D_Exec;
      if (v608[379])
        v762 = v608;
      else
        v762 = v609;
      v762[379] = glCompressedTexImage3D_Exec;
      if (v608[382])
        v763 = v608;
      else
        v763 = v609;
      v763[382] = glCompressedTexSubImage3D_Exec;
      if (v608[654])
        v764 = v608;
      else
        v764 = v609;
      v764[654] = glDrawBuffersARB_Exec;
      if (v608[749])
        v765 = v608;
      else
        v765 = v609;
      v765[749] = glUniformMatrix2x3fv_Exec;
      if (v608[750])
        v766 = v608;
      else
        v766 = v609;
      v766[750] = glUniformMatrix3x2fv_Exec;
      if (v608[751])
        v767 = v608;
      else
        v767 = v609;
      v767[751] = glUniformMatrix2x4fv_Exec;
      if (v608[752])
        v768 = v608;
      else
        v768 = v609;
      v768[752] = glUniformMatrix4x2fv_Exec;
      if (v608[753])
        v769 = v608;
      else
        v769 = v609;
      v769[753] = glUniformMatrix3x4fv_Exec;
      if (v608[754])
        v770 = v608;
      else
        v770 = v609;
      v770[754] = glUniformMatrix4x3fv_Exec;
      if (v608[755])
        v771 = v608;
      else
        v771 = v609;
      v771[755] = glBlitFramebufferEXT_Exec;
      if (v608[691])
        v772 = v608;
      else
        v772 = v609;
      v772[691] = glFramebufferTextureLayerEXT_Exec;
      if (v608[700])
        v773 = v608;
      else
        v773 = v609;
      v773[700] = glGetIntegerIndexedv_Exec;
      if (v608[696])
        v774 = v608;
      else
        v774 = v609;
      v774[696] = glBeginTransformFeedback_Exec;
      if (v608[697])
        v775 = v608;
      else
        v775 = v609;
      v775[697] = glEndTransformFeedback_Exec;
      if (v608[693])
        v776 = v608;
      else
        v776 = v609;
      v776[693] = glBindBufferRange_Exec;
      if (v608[695])
        v777 = v608;
      else
        v777 = v609;
      v777[695] = glBindBufferBase_Exec;
      if (v608[698])
        v778 = v608;
      else
        v778 = v609;
      v778[698] = glTransformFeedbackVaryingsEXT_Exec;
      if (v608[699])
        v779 = v608;
      else
        v779 = v609;
      v779[699] = glGetTransformFeedbackVaryingEXT_Exec;
      if (v608[731])
        v780 = v608;
      else
        v780 = v609;
      v780[731] = glVertexAttribIPointerEXT_Exec;
      if (v608[732])
        v781 = v608;
      else
        v781 = v609;
      v781[732] = glGetVertexAttribIivEXT_Exec;
      if (v608[733])
        v782 = v608;
      else
        v782 = v609;
      v782[733] = glGetVertexAttribIuivEXT_Exec;
      if (v608[714])
        v783 = v608;
      else
        v783 = v609;
      v783[714] = glVertexAttribI4iEXT_Exec;
      if (v608[718])
        v784 = v608;
      else
        v784 = v609;
      v784[718] = glVertexAttribI4uiEXT_Exec;
      if (v608[722])
        v785 = v608;
      else
        v785 = v609;
      v785[722] = glVertexAttribI4ivEXT_Exec;
      if (v608[726])
        v786 = v608;
      else
        v786 = v609;
      v786[726] = glVertexAttribI4uivEXT_Exec;
      if (v608[742])
        v787 = v608;
      else
        v787 = v609;
      v787[742] = glGetUniformuivEXT_Exec;
      v264 = *(_QWORD **)(result + 28984);
      v788 = *(_QWORD **)(result + 28976);
      if (v264[744])
        v789 = *(_QWORD *)(result + 28984);
      else
        v789 = *(_QWORD *)(result + 28976);
      *(_QWORD *)(v789 + 5952) = glGetFragDataLocationEXT_Exec;
      if (v264[734])
        v790 = v264;
      else
        v790 = v788;
      v790[734] = glUniform1ui_Exec;
      if (v264[735])
        v791 = v264;
      else
        v791 = v788;
      v791[735] = glUniform2ui_Exec;
      if (v264[736])
        v792 = v264;
      else
        v792 = v788;
      v792[736] = glUniform3ui_Exec;
      if (v264[737])
        v793 = v264;
      else
        v793 = v788;
      v793[737] = glUniform4ui_Exec;
      if (v264[738])
        v794 = v264;
      else
        v794 = v788;
      v794[738] = glUniform1uiv_Exec;
      if (v264[739])
        v795 = v264;
      else
        v795 = v788;
      v795[739] = glUniform2uiv_Exec;
      if (v264[740])
        v796 = v264;
      else
        v796 = v788;
      v796[740] = glUniform3uiv_Exec;
      if (v264[741])
        v797 = v264;
      else
        v797 = v788;
      v797[741] = glUniform4uiv_Exec;
      if (v264[774])
        v798 = v264;
      else
        v798 = v788;
      v798[774] = glClearBufferiv_Exec;
      if (v264[775])
        v799 = v264;
      else
        v799 = v788;
      v799[775] = glClearBufferuiv_Exec;
      if (v264[776])
        v800 = v264;
      else
        v800 = v788;
      v800[776] = glClearBufferfv_Exec;
      if (v264[777])
        v801 = v264;
      else
        v801 = v788;
      v801[777] = glClearBufferfi_Exec;
      if (v264[778])
        v802 = v264;
      else
        v802 = v788;
      v802[778] = glGetStringi_Exec;
      if (v264[791])
        v803 = v264;
      else
        v803 = v788;
      v803[791] = glCopyBufferSubData_Exec;
      if (v264[441])
        v804 = v264;
      else
        v804 = v788;
      v804[441] = glGetUniformIndices_Exec;
      if (v264[444])
        v805 = v264;
      else
        v805 = v788;
      v805[444] = glGetUniformBlockIndex_Exec;
      if (v264[445])
        v806 = v264;
      else
        v806 = v788;
      v806[445] = glGetActiveUniformBlockiv_Exec;
      if (v264[446])
        v807 = v264;
      else
        v807 = v788;
      v807[446] = glGetActiveUniformBlockName_Exec;
      if (v264[447])
        v808 = v264;
      else
        v808 = v788;
      v808[447] = glUniformBlockBinding_Exec;
      if (v264[405])
        v809 = v264;
      else
        v809 = v788;
      v809[405] = glDrawRangeElements_ES2Exec;
      if (v264[798])
        v810 = v264;
      else
        v810 = v788;
      v810[798] = glGetInteger64i_v_Exec;
      if (v264[799])
        v811 = v264;
      else
        v811 = v788;
      v811[799] = glGetBufferParameteri64v_Exec;
      if (v264[800])
        v812 = v264;
      else
        v812 = v788;
      v812[800] = glGenSamplers_Exec;
      if (v264[801])
        v813 = v264;
      else
        v813 = v788;
      v813[801] = glDeleteSamplers_Exec;
      if (v264[802])
        v814 = v264;
      else
        v814 = v788;
      v814[802] = glIsSampler_Exec;
      if (v264[803])
        v815 = v264;
      else
        v815 = v788;
      v815[803] = glBindSampler_Exec;
      if (v264[804])
        v816 = v264;
      else
        v816 = v788;
      v816[804] = glSamplerParameteri_Exec;
      if (v264[805])
        v817 = v264;
      else
        v817 = v788;
      v817[805] = glSamplerParameteriv_Exec;
      if (v264[806])
        v818 = v264;
      else
        v818 = v788;
      v818[806] = glSamplerParameterf_Exec;
      if (v264[807])
        v819 = v264;
      else
        v819 = v788;
      v819[807] = glSamplerParameterfv_Exec;
      if (v264[810])
        v820 = v264;
      else
        v820 = v788;
      v820[810] = glGetSamplerParameteriv_Exec;
      if (v264[811])
        v821 = v264;
      else
        v821 = v788;
      v821[811] = glGetSamplerParameterfv_Exec;
      if (v264[904])
        v822 = v264;
      else
        v822 = v788;
      v822[904] = glBindTransformFeedback_GL3Exec;
      if (v264[905])
        v823 = v264;
      else
        v823 = v788;
      v823[905] = glGenTransformFeedbacks_GL3Exec;
      if (v264[906])
        v824 = v264;
      else
        v824 = v788;
      v824[906] = glDeleteTransformFeedbacks_GL3Exec;
      if (v264[907])
        v825 = v264;
      else
        v825 = v788;
      v825[907] = glPauseTransformFeedback_GL3Exec;
      if (v264[908])
        v826 = v264;
      else
        v826 = v788;
      v826[908] = glResumeTransformFeedback_GL3Exec;
      if (v264[909])
        v827 = v264;
      else
        v827 = v788;
      v827[909] = glIsTransformFeedback_GL3Exec;
      if (v264[887])
        v828 = v264;
      else
        v828 = v788;
      v828[887] = glGetProgramBinary_Exec;
      if (v264[888])
        v829 = v264;
      else
        v829 = v788;
      v829[888] = glProgramBinary_Exec;
      if (v264[1028])
        v830 = v264;
      else
        v830 = v788;
      v830[1028] = glInvalidateSubFramebuffer_Exec;
      if (v264[1029])
        v831 = v264;
      else
        v831 = v788;
      v831[1029] = glGetInternalformativ_Exec;
      if (v264[1032])
        v832 = v264;
      else
        v832 = v788;
      v832[1032] = glTexStorage3D_Exec;
      if (v264[848])
        v833 = v264;
      else
        v833 = v788;
      v833[848] = glProgramUniform1ui_Exec;
      if (v264[849])
        v834 = v264;
      else
        v834 = v788;
      v834[849] = glProgramUniform2ui_Exec;
      if (v264[850])
        v835 = v264;
      else
        v835 = v788;
      v835[850] = glProgramUniform3ui_Exec;
      if (v264[851])
        v836 = v264;
      else
        v836 = v788;
      v836[851] = glProgramUniform4ui_Exec;
      if (v264[852])
        v837 = v264;
      else
        v837 = v788;
      v837[852] = glProgramUniform1uiv_Exec;
      if (v264[853])
        v838 = v264;
      else
        v838 = v788;
      v838[853] = glProgramUniform2uiv_Exec;
      if (v264[854])
        v839 = v264;
      else
        v839 = v788;
      v839[854] = glProgramUniform3uiv_Exec;
      if (v264[855])
        v840 = v264;
      else
        v840 = v788;
      v840[855] = glProgramUniform4uiv_Exec;
      if (v264[856])
        v841 = v264;
      else
        v841 = v788;
      v841[856] = glProgramUniformMatrix2x3fv_Exec;
      if (v264[857])
        v842 = v264;
      else
        v842 = v788;
      v842[857] = glProgramUniformMatrix3x2fv_Exec;
      if (v264[858])
        v843 = v264;
      else
        v843 = v788;
      v843[858] = glProgramUniformMatrix2x4fv_Exec;
      if (v264[859])
        v844 = v264;
      else
        v844 = v788;
      v844[859] = glProgramUniformMatrix4x2fv_Exec;
      if (v264[860])
        v845 = v264;
      else
        v845 = v788;
      v845[860] = glProgramUniformMatrix3x4fv_Exec;
      if (!v264[861])
        v264 = v788;
      v323 = glProgramUniformMatrix4x3fv_Exec;
    }
    v264[861] = v323;
  }
LABEL_3097:
  *(_WORD *)(result + 26340) = 0;
LABEL_3098:
  v1052 = *(_QWORD **)(result + 28984);
  v1053 = *(_QWORD **)(result + 28976);
  v1054 = glGetTexImage_PackThread;
  if (v1052[123])
    v1055 = *(_QWORD *)(result + 28984);
  else
    v1055 = *(_QWORD *)(result + 28976);
  v1056 = glGetTexLevelParameteriv_ExecThread;
  if (!*(_QWORD *)(result + 27648))
  {
    v1054 = glGetTexImage_Exec;
    v1056 = glGetTexLevelParameteriv_Exec;
  }
  v1057 = glGetCompressedTexImage_ExecThread;
  if (!*(_QWORD *)(result + 27648))
    v1057 = glGetCompressedTexImage_Exec;
  *(_QWORD *)(v1055 + 984) = v1054;
  if (v1052[125])
    v1058 = v1052;
  else
    v1058 = v1053;
  v1058[125] = v1056;
  if (v1052[385])
    v1059 = v1052;
  else
    v1059 = v1053;
  v1059[385] = v1057;
  return result;
}

uint64_t gliSetInteger(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v4;
  uint64_t v7;
  unsigned __int16 *v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  BOOL v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unsigned int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  unsigned int v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t, unsigned int *);
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  void *v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  unsigned __int16 v48;
  uint64_t v49;
  int v50;
  int ShaderObjectNamed;
  unsigned int v52;
  BOOL v53;
  unsigned int v54;
  unsigned __int16 v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  double v60;
  double v61;
  double v62;
  int v63;
  intptr_t v64;
  int v65;
  int v66;
  uint64_t v67;
  void *v68;
  int v69;
  uint64_t v70;
  char v71;
  unsigned int v72;
  IOSurfaceID v73;
  unsigned int v74;
  uint64_t v75;
  unsigned int v76;
  unsigned int v77;
  int v78;
  int v79;
  unsigned int v80;
  uint64_t v81;
  char v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  _QWORD *v92;
  _QWORD *v93;
  _QWORD *v94;
  unint64_t v95;
  _QWORD *v96;
  unsigned int v97;
  BOOL v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  __int16 v102;
  size_t v103;
  int v104;
  int v105;
  uint64_t v106;
  int v107;
  uint64_t ProgramPipelineHashObject;
  char *SamplerHashObject;
  uint64_t v110;
  int v111;
  int v112;
  int v113;
  int Width;
  int v115;
  uint64_t v116;
  __int16 v117;
  IOSurfaceID ID;
  size_t BytesPerElementOfPlane;
  size_t BytesPerRowOfPlane;
  int v121;
  unsigned int planeIndex;
  __IOSurface *buffer;
  int v124;
  __int16 v125;
  uint64_t v126;
  int v127;
  size_t v128;
  int v129[2];
  uint8_t buf[16];
  __int128 v131;
  __int16 v132;
  int v133;
  uint64_t v134;

  v134 = *MEMORY[0x24BDAC8D0];
  if (!a1)
    return 10004;
  v4 = a1 + 29788;
  if (*(_DWORD *)(a1 + 29792) != 878944803)
    return 10004;
  if (!a3)
    return 10014;
  if ((_DWORD)a2 == 1962)
  {
    v7 = 0;
    *(_QWORD *)(a1 + 29000) = *(_QWORD *)a3;
    return v7;
  }
  v9 = (unsigned __int16 *)(a1 + 32493);
  if (*(_QWORD *)(a1 + 27648))
    (*(void (**)(uint64_t))(a1 + 27752))(a1);
  v7 = 0;
  if ((int)a2 > 972)
  {
    if ((int)a2 > 1500)
    {
      switch((int)a2)
      {
        case 1612:
          v7 = 10010;
          v23 = a3[1];
          switch(*a3)
          {
            case 0x640u:
              v24 = *(_QWORD *)(a1 + 19296) + 72;
              goto LABEL_270;
            case 0x642u:
              v24 = *(_QWORD *)(a1 + 19296) + 104;
              goto LABEL_270;
            case 0x645u:
              v24 = *(_QWORD *)(a1 + 19296) + 264;
              goto LABEL_270;
            case 0x646u:
              v106 = 25904;
              goto LABEL_267;
            case 0x647u:
              v106 = 25872;
LABEL_267:
              v24 = a1 + v106;
              goto LABEL_270;
            case 0x648u:
              v24 = *(_QWORD *)(a1 + 19296) + 8;
              goto LABEL_270;
            case 0x649u:
              v24 = *(_QWORD *)(a1 + 19296) + 40;
LABEL_270:
              os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
              ShaderObjectNamed = gleAddHashName(v24, v23);
              goto LABEL_271;
            case 0x64Au:
              os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
              ProgramPipelineHashObject = (uint64_t)gleCreateProgramPipelineHashObject(a1, v23);
              goto LABEL_278;
            case 0x64Bu:
              os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
              SamplerHashObject = gleCreateSamplerHashObject(a1, v23);
              v110 = *(_QWORD *)(a1 + 19296) + 232;
              goto LABEL_280;
            case 0x650u:
              v112 = a3[2];
              v111 = a3[3];
              os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
              ProgramPipelineHashObject = gleFenceSync(a1, v23, v112, v111);
LABEL_278:
              SamplerHashObject = (char *)ProgramPipelineHashObject;
              goto LABEL_281;
            case 0x651u:
              os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
              SamplerHashObject = gleCreateTransformFeedbackObject(a1, v23);
              v110 = a1 + 26400;
LABEL_280:
              gleAddHashNameAndObject(a1, v110, (uint64_t)SamplerHashObject);
LABEL_281:
              os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
              v53 = SamplerHashObject == 0;
              goto LABEL_272;
            default:
              return v7;
          }
        case 1613:
          v50 = *a3;
          v49 = a3[1];
          os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
          ShaderObjectNamed = gleCreateShaderObjectNamed(a1, v50, v49);
          goto LABEL_271;
        case 1614:
          v52 = *a3;
          os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
          ShaderObjectNamed = gleCreateProgramObjectNamed(a1, v52);
LABEL_271:
          v107 = ShaderObjectNamed;
          os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
          v53 = v107 == 0;
          goto LABEL_272;
        case 1615:
          if (*a3 - 2500 > 2)
            return 10010;
          v53 = gleReserveVertexArray(a1, a3[1]) == 0;
LABEL_272:
          if (v53)
            return 10008;
          else
            return 0;
        case 1616:
        case 1617:
          goto LABEL_214;
        case 1618:
          v7 = 0;
          v54 = *v9 & 0x7FFF | (*(unsigned __int8 *)(a1 + 32495) << 16);
          v55 = *v9 & 0x7FFF | ((*a3 != 0) << 15);
LABEL_143:
          *v9 = v55;
          v58 = HIWORD(v54);
          goto LABEL_144;
        case 1619:
          v7 = 0;
          v56 = (*v9 | (*(unsigned __int8 *)(a1 + 32495) << 16)) & 0xFFFEFFFF;
          v57 = v56 | ((*a3 != 0) << 16);
          goto LABEL_109;
        case 1620:
          v7 = 0;
          v56 = (*v9 | (*(unsigned __int8 *)(a1 + 32495) << 16)) & 0xFFFDFFFF;
          v57 = v56 | ((*a3 != 0) << 17);
          goto LABEL_109;
        case 1621:
          v7 = 0;
          v56 = (*v9 | (*(unsigned __int8 *)(a1 + 32495) << 16)) & 0xFFFBFFFF;
          v57 = v56 | ((*a3 != 0) << 18);
          goto LABEL_109;
        case 1622:
          v7 = 0;
          v56 = (*v9 | (*(unsigned __int8 *)(a1 + 32495) << 16)) & 0xFFF7FFFF;
          v57 = v56 | ((*a3 != 0) << 19);
LABEL_109:
          *v9 = v56;
          v58 = HIWORD(v57);
LABEL_144:
          *(_BYTE *)(a1 + 32495) = v58;
          goto LABEL_214;
        default:
          switch((int)a2)
          {
            case 1702:
              v7 = 0;
              *(_BYTE *)v4 = *a3;
              break;
            case 1703:
              v7 = 0;
              *(_DWORD *)(a1 + 29780) = *a3;
              break;
            case 1704:
              v7 = 0;
              *(_DWORD *)(a1 + 29784) = *a3;
              break;
            case 1705:
              goto LABEL_214;
            case 1706:
              v7 = 0;
              *(_BYTE *)(v4 + 1) = *a3;
              break;
            default:
              if ((_DWORD)a2 != 1501)
                goto LABEL_214;
              v7 = 0;
              v47 = *v9 & 0xDFFF | (*(unsigned __int8 *)(a1 + 32495) << 16);
              v48 = *v9 & 0xDFFF | ((*a3 != 0) << 13);
LABEL_153:
              *v9 = v48;
              *(_BYTE *)(a1 + 32495) = BYTE2(v47);
              break;
          }
          return v7;
      }
    }
    switch((int)a2)
    {
      case 973:
        v7 = 0;
        v47 = *v9 & 0xFEFF | (*(unsigned __int8 *)(a1 + 32495) << 16);
        v48 = *v9 & 0xFEFF | ((*a3 != 0) << 8);
        goto LABEL_153;
      case 974:
        v7 = 0;
        v54 = *v9 & 0xFF7F | (*(unsigned __int8 *)(a1 + 32495) << 16);
        v55 = *v9 & 0xFF7F | ((*a3 != 0) << 7);
        goto LABEL_143;
      case 975:
        v7 = 0;
        v54 = *v9 & 0xFFBF | (*(unsigned __int8 *)(a1 + 32495) << 16);
        v55 = *v9 & 0xFFBF | ((*a3 != 0) << 6);
        goto LABEL_143;
      case 976:
      case 981:
      case 983:
      case 984:
      case 985:
      case 987:
      case 988:
      case 991:
      case 994:
      case 996:
        goto LABEL_214;
      case 977:
        v7 = 0;
        v47 = *v9 & 0xFFDF | (*(unsigned __int8 *)(a1 + 32495) << 16);
        v48 = *v9 & 0xFFDF | (32 * (*a3 != 0));
        goto LABEL_153;
      case 978:
        v7 = 0;
        v54 = *v9 & 0xFBFF | (*(unsigned __int8 *)(a1 + 32495) << 16);
        v55 = *v9 & 0xFBFF | ((*a3 != 0) << 10);
        goto LABEL_143;
      case 979:
        v7 = 0;
        v54 = *v9 & 0xF7FF | (*(unsigned __int8 *)(a1 + 32495) << 16);
        v55 = *v9 & 0xF7FF | ((*a3 != 0) << 11);
        goto LABEL_143;
      case 980:
        v7 = 0;
        v54 = *v9 & 0xEFFF | (*(unsigned __int8 *)(a1 + 32495) << 16);
        v55 = *v9 & 0xEFFF | ((*a3 != 0) << 12);
        goto LABEL_143;
      case 982:
        v7 = 0;
        v47 = *v9 & 0xFFEF | (*(unsigned __int8 *)(a1 + 32495) << 16);
        v48 = *v9 & 0xFFEF | (16 * (*a3 != 0));
        goto LABEL_153;
      case 986:
        v7 = 0;
        v47 = *v9 & 0xFFF7 | (*(unsigned __int8 *)(a1 + 32495) << 16);
        v48 = *v9 & 0xFFF7 | (8 * (*a3 != 0));
        goto LABEL_153;
      case 989:
        v65 = *a3;
        v66 = *(_WORD *)(a1 + 32493) & 0xFFFB | (*(unsigned __int8 *)(a1 + 32495) << 16);
        *v9 = *v9 & 0xFFFB | (4 * (*a3 != 0));
        *(_BYTE *)(a1 + 32495) = BYTE2(v66);
        v67 = *(_QWORD *)(a1 + 28984);
        if (!*(_QWORD *)(v67 + 816))
          v67 = *(_QWORD *)(a1 + 28976);
        v7 = 0;
        if (*(_QWORD *)(a1 + 27648))
        {
          if (v65)
            v68 = glGetError_NoSync;
          else
            v68 = glGetError_ExecThread;
        }
        else
        {
          v68 = glGetError_Exec;
        }
        *(_QWORD *)(v67 + 816) = v68;
        return v7;
      case 990:
        v7 = 0;
        v47 = *v9 & 0xFFFD | (*(unsigned __int8 *)(a1 + 32495) << 16);
        v48 = *v9 & 0xFFFD | (2 * (*a3 != 0));
        goto LABEL_153;
      case 992:
      case 993:
        v34 = *a3;
        *v9 = *v9 & 0xFFFE | (*a3 != 0);
        v35 = *(_QWORD *)(a1 + 27648);
        v36 = *(_QWORD **)(a1 + 28984);
        v37 = *(_QWORD **)(a1 + 28976);
        if (v36[301])
          v38 = *(_QWORD *)(a1 + 28984);
        else
          v38 = *(_QWORD *)(a1 + 28976);
        if (v34)
        {
          if (v35)
          {
            *(_QWORD *)(v38 + 2408) = glTexImage2D_FlushExecThread;
            if (v36[307])
              v39 = v36;
            else
              v39 = v37;
            v39[307] = glTexSubImage2D_FlushExecThread;
            if (v36[380])
              v40 = v36;
            else
              v40 = v37;
            v40[380] = glCompressedTexImage2D_FlushExecThread;
            if (v36[383])
              v41 = v36;
            else
              v41 = v37;
            v41[383] = glCompressedTexSubImage2D_FlushExecThread;
            if ((_DWORD)a2 == 993)
              return 0;
            v7 = 0;
            if (!v36[12])
              v36 = v37;
            v42 = glClearColor_FlushExecThread;
          }
          else
          {
            *(_QWORD *)(v38 + 2408) = glTexImage2D_FlushExec;
            if (v36[307])
              v92 = v36;
            else
              v92 = v37;
            v92[307] = glTexSubImage2D_FlushExec;
            if (v36[380])
              v93 = v36;
            else
              v93 = v37;
            v93[380] = glCompressedTexImage2D_FlushExec;
            if (v36[383])
              v94 = v36;
            else
              v94 = v37;
            v94[383] = glCompressedTexSubImage2D_FlushExec;
            if ((_DWORD)a2 == 993)
              return 0;
            v7 = 0;
            if (!v36[12])
              v36 = v37;
            v42 = glClearColor_FlushExec;
          }
        }
        else if (v35)
        {
          *(_QWORD *)(v38 + 2408) = glTexImage2D_PackThread;
          if (v36[307])
            v83 = v36;
          else
            v83 = v37;
          v83[307] = glTexSubImage2D_PackThread;
          if (v36[380])
            v84 = v36;
          else
            v84 = v37;
          v84[380] = glCompressedTexImage2D_PackThread;
          if (v36[383])
            v85 = v36;
          else
            v85 = v37;
          v85[383] = glCompressedTexSubImage2D_PackThread;
          if ((_DWORD)a2 == 993)
            return 0;
          v7 = 0;
          if (!v36[12])
            v36 = v37;
          v42 = glClearColor_Comp;
        }
        else
        {
          *(_QWORD *)(v38 + 2408) = glTexImage2D_Exec;
          if (v36[307])
            v99 = v36;
          else
            v99 = v37;
          v99[307] = glTexSubImage2D_Exec;
          if (v36[380])
            v100 = v36;
          else
            v100 = v37;
          v100[380] = glCompressedTexImage2D_Exec;
          if (v36[383])
            v101 = v36;
          else
            v101 = v37;
          v101[383] = glCompressedTexSubImage2D_Exec;
          if ((_DWORD)a2 == 993)
            return 0;
          v7 = 0;
          if (!v36[12])
            v36 = v37;
          v42 = glClearColor_Exec;
        }
        v36[12] = v42;
        return v7;
      case 995:
        v7 = 0;
        LOBYTE(v69) = *a3 != 0;
        v70 = *(_QWORD *)(a1 + 19296);
        v71 = *(_BYTE *)(v70 + 344) & 0xFE;
LABEL_163:
        v82 = v71 | v69;
LABEL_166:
        *(_BYTE *)(v70 + 344) = v82;
        return v7;
      case 997:
      case 998:
      case 999:
        v11 = *a3;
        v10 = a3[1];
        v13 = a3[2];
        v12 = a3[3];
        v14 = a3[4];
        v15 = v10 == 34067;
        if (v10 == 34067)
          v16 = 34069;
        else
          v16 = a3[1];
        v17 = 6;
        if (!v15)
          v17 = 1;
        v126 = v17;
        v128 = 0;
        if ((_DWORD)a2 == 997 || v13 != 6402)
          v18 = gleCheckTexImage2DArgs(a1, v16, 0, v13, v12, v14, 0, 32993, 33639, &v128);
        else
          v18 = gleCheckTexImage2DArgs(a1, v16, 0, 6402, v12, v14, 0, 6402, 5125, &v128);
        v43 = v18;
        if (!v18)
          return 10008;
        v44 = *(_WORD *)(v18 + 768);
        if ((v44 & 0x1C00) == 0x400)
          goto LABEL_182;
        if ((*(_WORD *)(v18 + 768) & 0x1C00) != 0)
        {
          if ((*(_WORD *)(v18 + 768) & 0x1800) != 0)
          {
LABEL_256:
            if (!*(_WORD *)(v4 + 44))
              *(_WORD *)(v4 + 44) = 1282;
            return 10007;
          }
        }
        else
        {
          *(_WORD *)(v18 + 768) = v44 | 0x400;
        }
LABEL_182:
        if ((*(_DWORD *)(a1 + 1672 * *(unsigned __int8 *)(a1 + 32499) + 34176) & 0x7F00) == 0x400)
          *(_QWORD *)(v18 + 784) = gle_io_data(v11);
        *(_DWORD *)(v43 + 780) = v11;
        if ((_DWORD)a2 == 997)
          v86 = a3[6];
        else
          LOWORD(v86) = 4352;
        *(_WORD *)(v43 + 774) = v86;
        v87 = 560;
        v88 = v126;
        do
        {
          *(_WORD *)(v43 + v87) = v13;
          v87 += 30;
          --v88;
        }
        while (v88);
        v125 = gleStandardizeIntegerFormat(0x1908u);
        gfxReqToBase();
        v89 = 0;
        *(_DWORD *)(v43 + 968) = 65539;
        v90 = v43 + 1032;
        do
        {
          v132 = 0;
          *(_OWORD *)buf = 0u;
          v131 = 0u;
          if (*(_BYTE *)(v90 + 11) & 0x20 | gfxEvaluateTextureForGeometryChange() & 1)
            (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 29496) + 272))(*(_QWORD *)(a1 + 29464), 1, 0, *(_QWORD *)(v43 + 8 * *(unsigned __int8 *)(a1 + 32500)));
          gleCreateSurfaceLevel(a1, v90, v12, v14, v125, 5121);
          gfxUpdateTextureForGeometryChange();
          gfxUpdatePluginTextureLevelGeometry();
          if ((_DWORD)a2 == 997)
          {
            v91 = a3[7];
            if (v91)
              gleGenSurfaceMipmaps(a1, v43, v89, v91, *(_BYTE *)(v43 + 898) & 1);
          }
          ++v89;
          v90 += 480;
        }
        while (v126 != v89);
        v7 = 0;
        *(_DWORD *)(a1 + 1524) |= 1 << (*(_WORD *)(a1 + 23768) & 0xF);
        *(_DWORD *)(a1 + 28652) = 0;
        *(_DWORD *)(a1 + 1548) |= 0x22000u;
        return v7;
      default:
        if ((_DWORD)a2 == 1402)
        {
          v7 = 0;
          *(_BYTE *)(a1 + 32503) = *a3 != 0;
        }
        goto LABEL_214;
    }
  }
  if ((int)a2 > 600)
  {
    if ((int)a2 <= 700)
    {
      switch((int)a2)
      {
        case 601:
        case 602:
          if (!*(_BYTE *)(a1 + 32496))
            return 0;
          v25 = 0;
          LODWORD(v7) = 0;
          v26 = (_QWORD *)(a1 + 32512);
          do
          {
            v27 = (*(uint64_t (**)(_QWORD, uint64_t, unsigned int *))(v26[206] + 1248))(*v26, a2, a3);
            if ((_DWORD)v7)
              v28 = 1;
            else
              v28 = v27 == 0;
            if (v28)
              v7 = v7;
            else
              v7 = v27;
            ++v25;
            v26 += 209;
          }
          while (v25 < *((unsigned __int8 *)v9 + 3));
          break;
        case 603:
        case 604:
        case 605:
        case 606:
        case 609:
          goto LABEL_214;
        case 607:
          v31 = *(uint64_t (**)(uint64_t, uint64_t, unsigned int *))(*(_QWORD *)(a1 + 29496) + 192);
          v32 = *(_QWORD *)(a1 + 29464);
          v33 = 607;
          return v31(v32, v33, a3);
        case 608:
          if (*a3 >= 5 || ((0x17u >> *a3) & 1) == 0)
            return 10008;
          goto LABEL_213;
        case 610:
          v7 = 0;
          *(_BYTE *)(v4 + 2) = *a3;
          goto LABEL_214;
        default:
          if ((a2 - 666) < 2)
          {
            v7 = 0;
            *(_DWORD *)(a1 + 28652) = 0;
            *(_DWORD *)(a1 + 1532) |= 0x80000000;
          }
          goto LABEL_214;
      }
      return v7;
    }
    if ((int)a2 <= 909)
    {
      if ((_DWORD)a2 == 701)
      {
        v7 = 0;
        *(_BYTE *)(v4 + 2704) = *a3;
        goto LABEL_214;
      }
      if ((_DWORD)a2 != 702)
      {
        if ((_DWORD)a2 != 703)
          goto LABEL_214;
        if (*(_BYTE *)(a1 + 32496))
        {
          v19 = 0;
          LODWORD(v7) = 0;
          v20 = (_QWORD *)(a1 + 32512);
          do
          {
            v21 = (*(uint64_t (**)(_QWORD, uint64_t, unsigned int *))(v20[206] + 1248))(*v20, 703, a3);
            if ((_DWORD)v7)
              v22 = 1;
            else
              v22 = v21 == 0;
            if (v22)
              v7 = v7;
            else
              v7 = v21;
            ++v19;
            v20 += 209;
          }
          while (v19 < *(unsigned __int8 *)(a1 + 32496));
          goto LABEL_214;
        }
LABEL_213:
        v7 = 0;
        goto LABEL_214;
      }
      if (*a3 == 8)
      {
        *(_DWORD *)buf = 1;
        v45 = a1;
        v46 = 1622;
      }
      else
      {
        if (*a3 != 7)
          goto LABEL_213;
        *(_DWORD *)buf = 1;
        v45 = a1;
        v46 = 1621;
      }
      gliSetInteger(v45, v46, buf);
      goto LABEL_213;
    }
    switch((int)a2)
    {
      case 921:
        if (*a3 == 36161)
        {
          v29 = *(_QWORD *)(a1 + 28952);
          if (!v29)
            return 0;
          v30 = v29 + 40;
        }
        else
        {
          v30 = gleLookUpTexture(a1, *a3);
          if (!v30)
            return 0;
        }
        v7 = 0;
        *(_BYTE *)(v30 + 792) = *(_BYTE *)(v30 + 792) & 0xFE | (a3[1] != 0);
        return v7;
      case 922:
      case 923:
      case 924:
      case 925:
      case 926:
        goto LABEL_214;
      case 927:
        v69 = *a3;
        if (*a3)
          v69 = (*(_DWORD *)(*(_QWORD *)(a1 + 29032) + 564) >> 10) & 0x10;
        v7 = 0;
        v70 = *(_QWORD *)(a1 + 19296);
        v71 = *(_BYTE *)(v70 + 344) & 0xEF;
        goto LABEL_163;
      case 928:
        v7 = 0;
        v70 = *(_QWORD *)(a1 + 19296);
        v82 = *(_BYTE *)(v70 + 344) & 0xFD | (2 * (*a3 != 0));
        goto LABEL_166;
      case 929:
        v7 = 0;
        v70 = *(_QWORD *)(a1 + 19296);
        v82 = *(_BYTE *)(v70 + 344) & 0xFB | (4 * (*a3 != 0));
        goto LABEL_166;
      default:
        if ((_DWORD)a2 != 910)
          goto LABEL_214;
        v128 = 0;
        v73 = *a3;
        v72 = a3[1];
        v75 = a3[2];
        v74 = a3[3];
        v76 = a3[4];
        v77 = a3[5];
        v78 = a3[6];
        v79 = a3[7];
        v80 = a3[8];
        if (v72 == 3553)
        {
          v124 = v80;
          v127 = v78;
          v81 = gleCheckTexImage2DArgs(a1, 3553, 0, v75, v74, v76, 0, v77, v78, &v128);
          if (!v81)
            return 10008;
        }
        else
        {
          if (v72 != 36161)
            return 10008;
          v127 = v78;
          if (!gleCheckRenderbufferStorageArgs(a1, 36161, 0, v75, v74, v76))
            return 10008;
          v124 = v80;
          v81 = *(_QWORD *)(a1 + 28952) + 40;
        }
        v102 = *(_WORD *)(v81 + 768);
        if ((v102 & 0x1C00) != 0x800)
        {
          if ((*(_WORD *)(v81 + 768) & 0x1C00) != 0)
            goto LABEL_256;
          *(_WORD *)(v81 + 768) = v102 | 0x800;
        }
        if ((unsigned __int16)(v79 >> 24) <= 4u)
        {
          gleTextureReleaseIOSurfaces(*(_QWORD *)(a1 + 19296), v81);
          buffer = IOSurfaceLookup(v73);
          if (buffer)
          {
            if ((v79 & 0xFFFFFF) != 0 && IOSurfaceGetPlaneCount(buffer) <= (*(_QWORD *)&v79 & 0xFFFFFFuLL))
              goto LABEL_290;
            planeIndex = v79 & 0xFFFFFF;
            if ((v124 & 4) != 0)
              goto LABEL_292;
            v121 = gfxPixelBytes();
            BytesPerRowOfPlane = IOSurfaceGetBytesPerRowOfPlane(buffer, planeIndex);
            if (IOSurfaceAllowsPixelSizeCasting(buffer)
              || (BytesPerElementOfPlane = IOSurfaceGetBytesPerElementOfPlane(buffer, planeIndex),
                  v103 = BytesPerElementOfPlane / IOSurfaceGetElementWidthOfPlane(buffer, planeIndex),
                  v103 == v121))
            {
              if (BytesPerRowOfPlane >= v121 * v74 || v77 == 35429)
                goto LABEL_289;
              if (v77 - 35430 <= 0xE)
              {
                v104 = 1 << (v77 - 102);
                v105 = 32383;
                goto LABEL_286;
              }
            }
            else
            {
              if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
              {
                ID = IOSurfaceGetID(buffer);
                *(_DWORD *)buf = 67110400;
                *(_DWORD *)&buf[4] = ID;
                *(_WORD *)&buf[8] = 1024;
                *(_DWORD *)&buf[10] = v121;
                *(_WORD *)&buf[14] = 1024;
                LODWORD(v131) = v77;
                WORD2(v131) = 1024;
                *(_DWORD *)((char *)&v131 + 6) = v127;
                WORD5(v131) = 1024;
                HIDWORD(v131) = v103;
                v132 = 1024;
                v133 = v79 & 0xFFFFFF;
                _os_log_error_impl(&dword_21B8EC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "TexImageIOSurface2D, IOSurface %08x pixel size (%d) for format %04x, type %04x doesn't match bytes per element/elementwidth (%d) of plane %d\n", buf, 0x26u);
              }
              if (v77 - 35429 <= 0xF)
              {
                v104 = 1 << (v77 - 101);
                v105 = 64767;
LABEL_286:
                if ((v104 & v105) != 0)
                  goto LABEL_289;
              }
            }
            if (v77 - 37875 > 0x1D || ((1 << (v77 + 13)) & 0x3800073F) == 0)
              goto LABEL_290;
LABEL_289:
            if (IOSurfaceGetHeightOfPlane(buffer, planeIndex) < (int)(v76 << ((unsigned __int16)(v79 >> 24) != 0)))
            {
LABEL_290:
              gleTextureReleaseIOSurfaces(*(_QWORD *)(a1 + 19296), v81);
              CFRelease(buffer);
              return 10008;
            }
LABEL_292:
            *(_DWORD *)(v81 + 780) = v73;
            *(_QWORD *)(v81 + 1024) = buffer;
            *(_WORD *)(v81 + 1016) = v79;
            *(_WORD *)(v81 + 1018) = v79 >> 24;
            if (IOSurfaceIsTiled())
              v113 = v124 | 8;
            else
              v113 = v124;
            *(_DWORD *)(v81 + 868) = v113;
            Width = IOSurfaceGetWidth(buffer);
            v115 = IOSurfaceGetHeight(buffer) * Width;
            *(_DWORD *)(v81 + 872) = (*MEMORY[0x24BDB03C8] + v115 * IOSurfaceGetBytesPerElement(buffer) - 1) & -*MEMORY[0x24BDB03C8];
            *(_DWORD *)(v81 + 864) = v113;
            *(_QWORD *)(v81 + 816) = buffer;
            *(_DWORD *)(v81 + 848) = v113;
            if (v127 == 5126)
            {
              if ((_DWORD)v75 == 6408)
              {
                v75 = 34836;
              }
              else if ((_DWORD)v75 == 6407)
              {
                v75 = 34837;
              }
              else
              {
                v75 = v75;
              }
            }
            v116 = gleStandardizeIntegerFormat(v77);
            v117 = v116;
            *(_WORD *)(v81 + 560) = gleSizedInternalFormat(a1, v81, v75, v116, v127, 0, 0);
            *(_DWORD *)(v81 + 968) = 65539;
            v132 = 0;
            *(_OWORD *)buf = 0u;
            v131 = 0u;
            if (*(_BYTE *)(v81 + 1043) & 0x20 | gfxEvaluateTextureForGeometryChange() & 1)
              (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 29496) + 272))(*(_QWORD *)(a1 + 29464), 1, 0, *(_QWORD *)(v81 + 8 * *(unsigned __int8 *)(a1 + 32500)));
            gleCreateIOSurfaceLevel(a1, v81 + 1032, v74, v76, 1, v117, v127);
            gfxUpdateTextureForGeometryChange();
            gfxUpdatePluginTextureLevelGeometry();
            (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 29448) + 328))(*(_QWORD *)(a1 + 29024), *(_QWORD *)(v81 + 8 * *(unsigned __int8 *)(a1 + 32499)));
            *(_DWORD *)(a1 + 28652) = 0;
            *(_DWORD *)(a1 + 1548) |= 0x22000u;
            gleDirtyTextureObjectCurrentBindPointsGeom(a1, v81);
            return 0;
          }
        }
        return 10008;
    }
  }
  if ((int)a2 > 349)
  {
    if ((a2 - 350) <= 0x2A && ((1 << (a2 - 94)) & 0x44441101111) != 0)
      return v7;
    goto LABEL_214;
  }
  if ((int)a2 > 305)
  {
    switch((int)a2)
    {
      case 306:
        v7 = 0;
        *(_BYTE *)(v4 + 2691) = *a3 != 0;
        goto LABEL_214;
      case 307:
        return v7;
      case 308:
        gleReclaimContextResources(a1);
        return 0;
      case 313:
        v59 = *a3;
        if (*a3 == (*(_QWORD *)(a1 + 27648) != 0))
          return 0;
        if (v59)
        {
          if (v59 != 1)
            return 10019;
          v128 = 8;
          *(_QWORD *)v129 = 0x300000006;
          *(_QWORD *)buf = 0;
          sysctl(v129, 2u, buf, &v128, 0, 0);
          if (*(_QWORD *)buf < 2uLL)
            return 10019;
          glFinish_Exec(a1, v60, v61, v62);
          if (gleCreateCmdBufMachine(a1))
            return 10019;
        }
        else
        {
          gleDestroyCmdBufMachine(a1);
        }
        gliInitDispatchTable(a1);
        break;
      case 315:
        v63 = *a3 & ~((int)*a3 >> 31);
        if (*(_DWORD *)(a1 + 29768) == v63)
          goto LABEL_213;
        *(_DWORD *)(a1 + 29768) = v63;
        if (!*(_QWORD *)(a1 + 27648))
          goto LABEL_213;
        dispatch_release(*(dispatch_object_t *)(a1 + 27728));
        v64 = *(int *)(a1 + 29768);
        *(_DWORD *)(a1 + 27740) = v64;
        v7 = 0;
        *(_QWORD *)(a1 + 27728) = dispatch_semaphore_create(v64);
        goto LABEL_214;
      case 316:
        v7 = 0;
        v47 = *v9 & 0xFDFF | (*(unsigned __int8 *)(a1 + 32495) << 16);
        v48 = *v9 & 0xFDFF | ((*a3 != 0) << 9);
        goto LABEL_153;
      case 322:
        gleFreeOrphans((int64x2_t *)a1);
        return 0;
      default:
        goto LABEL_214;
    }
    return 0;
  }
  if ((_DWORD)a2 == 221)
  {
    *(_BYTE *)(v4 + 2689) = *a3 != 0;
    gliUpdateDispatchState((int8x16_t *)a1, 0);
    gleUpdateSwapControl(a1);
    return 0;
  }
  if ((_DWORD)a2 == 228)
  {
    v7 = 0;
    *(_DWORD *)(a1 + 29772) = *a3;
    return v7;
  }
  if ((_DWORD)a2 != 300)
  {
LABEL_214:
    if (*(_BYTE *)(a1 + 32496))
    {
      v95 = 0;
      v96 = (_QWORD *)(a1 + 32512);
      do
      {
        v97 = (*(uint64_t (**)(_QWORD, uint64_t, unsigned int *))(v96[206] + 1248))(*v96, a2, a3);
        if ((_DWORD)v7)
          v98 = 1;
        else
          v98 = v97 == 0;
        if (v98)
          v7 = v7;
        else
          v7 = v97;
        ++v95;
        v96 += 209;
      }
      while (v95 < *((unsigned __int8 *)v9 + 3));
    }
    return v7;
  }
  v31 = *(uint64_t (**)(uint64_t, uint64_t, unsigned int *))(*(_QWORD *)(a1 + 29496) + 192);
  v32 = *(_QWORD *)(a1 + 29464);
  v33 = 300;
  return v31(v32, v33, a3);
}

float glGetIntegerv_Exec(uint64_t a1, int a2, _DWORD *a3, double a4, double a5, double a6)
{
  int State;
  double v9;
  __int16 *v10;
  __int16 v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  double v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  double *v22;
  double v23;
  int v25;
  char v26;
  _BYTE v27[512];
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v26 = 0;
  v25 = 0;
  State = gleGetState(a1, a2, (uint64_t)v27, &v25, &v26, a4, a5, a6);
  if (State == -2)
  {
    v10 = (__int16 *)(a1 + 29832);
    if (!*(_WORD *)(a1 + 29832))
    {
      v11 = 1282;
      goto LABEL_7;
    }
  }
  else if (State == -1)
  {
    v10 = (__int16 *)(a1 + 29832);
    if (!*(_WORD *)(a1 + 29832))
    {
      v11 = 1280;
LABEL_7:
      *v10 = v11;
    }
  }
  else if (v25 == 5124)
  {
    if (State >= 1)
    {
      v12 = State;
      v13 = (uint64_t *)v27;
      do
      {
        v14 = *v13++;
        *a3++ = v14;
        --v12;
      }
      while (v12);
    }
  }
  else if (v26)
  {
    if (State >= 1)
    {
      v15 = State;
      v16 = (double *)v27;
      v9 = 1.0;
      do
      {
        v17 = *v16++;
        v18 = v17;
        if (v17 <= 1.0)
          v19 = v18;
        else
          v19 = 1.0;
        if (v18 >= -1.0)
          v20 = v19;
        else
          v20 = -1.0;
        *a3++ = (int)(v20 * 2147483520.0) + (int)(v20 * 127.999985);
        --v15;
      }
      while (v15);
    }
  }
  else if (State >= 1)
  {
    v21 = State;
    v22 = (double *)v27;
    do
    {
      v23 = *v22++;
      *(float *)&v9 = round(v23);
      *a3++ = (int)*(float *)&v9;
      --v21;
    }
    while (v21);
  }
  return *(float *)&v9;
}

uint64_t gleGetState(uint64_t a1, int a2, uint64_t a3, _DWORD *a4, _BYTE *a5, double a6, double a7, double a8)
{
  unsigned __int8 *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  unsigned __int16 *v17;
  unsigned __int16 *v18;
  int v19;
  uint64_t ClampedStencilValue;
  int v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  float v33;
  float v34;
  uint64_t v35;
  int v36;
  int32x2_t v37;
  __int128 v38;
  float v39;
  uint64_t v40;
  float v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  uint64_t result;
  float v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int64x2_t v58;
  int64x2_t v59;
  int64x2_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  float v76;
  float v77;
  unint64_t v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  double v82;
  double v83;
  double v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  int v91;
  float32x2_t *v92;
  float *v93;
  uint64_t v94;
  float v95;
  uint64_t v96;
  uint64_t i;
  float v98;
  uint64_t j;
  float v100;
  unint64_t v101;
  uint64_t k;
  float v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  _DWORD v118[6];
  uint64_t v119;

  v119 = *MEMORY[0x24BDAC8D0];
  v13 = (unsigned __int8 *)(a1 + 32406);
  v14 = a1 + 29672;
  v15 = (int *)(a1 + 18448);
  v16 = a1 + 17572;
  v17 = (unsigned __int16 *)(a1 + 15284);
  v18 = (unsigned __int16 *)(a1 + 15008);
  *a4 = 5124;
  *a5 = 0;
  if (a2 > 10751)
  {
    if (a2 <= 34015)
    {
      if (a2 > 32925)
      {
        switch(a2)
        {
          case 32926:
            ClampedStencilValue = *(unsigned __int8 *)(a1 + 17681);
            goto LABEL_188;
          case 32927:
          case 32929:
          case 32930:
          case 32931:
          case 32932:
          case 32933:
          case 32934:
          case 32935:
            goto LABEL_160;
          case 32928:
            ClampedStencilValue = *(unsigned __int8 *)(a1 + 17683);
            goto LABEL_188;
          case 32936:
            v52 = *(_QWORD *)(a1 + 28960);
            if (!v52)
            {
              ClampedStencilValue = *(unsigned __int8 *)(*(_QWORD *)(a1 + 29480) + 58);
              goto LABEL_188;
            }
            if (!*(_BYTE *)(v52 + 478))
              goto LABEL_177;
LABEL_172:
            result = 1;
            *(_QWORD *)a3 = 1;
            return result;
          case 32937:
            v53 = *(_QWORD *)(a1 + 28960);
            if (v53)
            {
              v54 = 0;
              while (1)
              {
                v55 = v53 + v54;
                if (*(_QWORD *)(v53 + v54 + 40))
                  break;
                v54 += 16;
                if (v54 == 160)
                  goto LABEL_177;
              }
              v61 = *(unsigned int *)(v55 + 300);
              v62 = *(unsigned int *)(v55 + 304);
              v63 = *(_QWORD *)(v55 + 40) + 8 * *(unsigned __int8 *)(a1 + 32500);
              v118[0] = 0;
              (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, _DWORD *))(*(_QWORD *)(a1 + 29496)
                                                                                          + 376))(*(_QWORD *)(a1 + 29464), *(_QWORD *)(v63 + 40), v61, v62, 36011, v118);
LABEL_206:
              ClampedStencilValue = v118[0];
            }
            else
            {
              ClampedStencilValue = *(unsigned __int8 *)(*(_QWORD *)(a1 + 29480) + 59);
            }
            break;
          case 32938:
            v25 = *(float *)(a1 + 17672);
            goto LABEL_179;
          case 32939:
            ClampedStencilValue = *(unsigned __int8 *)(a1 + 17684);
            goto LABEL_188;
          default:
            switch(a2)
            {
              case 32968:
                goto LABEL_72;
              case 32969:
                goto LABEL_99;
              case 32970:
                ClampedStencilValue = *(unsigned __int16 *)(a1 + 15014);
                goto LABEL_188;
              case 32971:
                ClampedStencilValue = *(unsigned __int16 *)(a1 + 15012);
                goto LABEL_188;
              default:
                if (a2 != 33902)
                  goto LABEL_160;
                *(_QWORD *)a3 = (uint64_t)*(float *)(*(_QWORD *)(a1 + 29480) + 80);
                v48 = *(float *)(*(_QWORD *)(a1 + 29480) + 84);
LABEL_157:
                v44 = (uint64_t)v48;
                break;
            }
            goto LABEL_158;
        }
        goto LABEL_188;
      }
      if (a2 <= 32822)
      {
        if (a2 == 10752)
        {
          v25 = *(float *)(a1 + 15520);
          goto LABEL_179;
        }
        if (a2 == 32777)
        {
          ClampedStencilValue = *(unsigned __int16 *)(a1 + 15016);
          goto LABEL_188;
        }
      }
      else
      {
        switch(a2)
        {
          case 32823:
            ClampedStencilValue = *(unsigned __int8 *)(a1 + 15537);
            goto LABEL_188;
          case 32824:
            v25 = *(float *)(a1 + 15516);
            goto LABEL_179;
          case 32873:
            ClampedStencilValue = *(_QWORD *)(a1 + 88 * *(unsigned __int16 *)(a1 + 23768) + 20800);
            goto LABEL_187;
        }
      }
      goto LABEL_160;
    }
    if (a2 <= 34920)
    {
      if (a2 > 34228)
      {
        if (a2 > 34466)
        {
          if (a2 == 34467)
          {
            if ((*(_BYTE *)(*(_QWORD *)(a1 + 29480) + 580) & 0x10) != 0)
            {
              *(_OWORD *)a3 = xmmword_21B9A5C80;
              *(_OWORD *)(a3 + 16) = xmmword_21B9A5C90;
              v45 = 4;
            }
            else
            {
              v45 = 0;
            }
            v51 = *(unsigned __int8 *)(a1 + 32501);
            if (v51 == 4)
            {
              *(_OWORD *)(a3 + 8 * v45) = xmmword_21B9A5CA0;
              *(_OWORD *)(a3 + 8 * (v45 | 2)) = xmmword_21B9A5CB0;
              *(_OWORD *)(a3 + 8 * (v45 + 4)) = xmmword_21B9A5CC0;
              *(_OWORD *)(a3 + 8 * (v45 + 6)) = xmmword_21B9A5CD0;
              result = v45 | 0xA;
              *(_OWORD *)(a3 + 8 * (v45 | 8)) = xmmword_21B9A5CE0;
              v51 = v13[95];
              if (v51 == 4)
              {
                if ((*(_BYTE *)(*(_QWORD *)(a1 + 29480) + 576) & 0x20) == 0)
                  return result;
                *(_OWORD *)(a3 + 8 * (v45 | 0xA)) = xmmword_21B9A5CF0;
                *(_OWORD *)(a3 + 8 * (v45 + 12)) = xmmword_21B9A5D00;
                *(_OWORD *)(a3 + 8 * (v45 + 14)) = xmmword_21B9A5D10;
                *(_OWORD *)(a3 + 8 * (v45 | 0x10)) = xmmword_21B9A5D20;
                *(_OWORD *)(a3 + 8 * (v45 | 0x12)) = xmmword_21B9A5D30;
                *(_OWORD *)(a3 + 8 * (v45 + 20)) = xmmword_21B9A5D40;
                *(_OWORD *)(a3 + 8 * (v45 + 22)) = xmmword_21B9A5D50;
                *(_OWORD *)(a3 + 8 * (v45 | 0x18)) = xmmword_21B9A5D60;
                *(_OWORD *)(a3 + 8 * (v45 | 0x1A)) = xmmword_21B9A5D70;
                *(_OWORD *)(a3 + 8 * (v45 + 28)) = xmmword_21B9A5D80;
                *(_OWORD *)(a3 + 8 * (v45 + 30)) = xmmword_21B9A5D90;
                *(_OWORD *)(a3 + 8 * (v45 | 0x20)) = xmmword_21B9A5DA0;
                *(_OWORD *)(a3 + 8 * (v45 | 0x22)) = xmmword_21B9A5DB0;
                *(_OWORD *)(a3 + 8 * (v45 + 36)) = xmmword_21B9A5DC0;
                v51 = v13[95];
                v45 = (v45 + 38);
              }
              else
              {
                v45 = v45 | 0xA;
              }
            }
            if (v51 != 2)
              return v45;
            v56 = 0;
            result = (v45 + 10);
            v57 = a3 + 8 * v45;
            v58 = (int64x2_t)xmmword_21B9A5DD0;
            v59 = vdupq_n_s64(0x8B90uLL);
            v60 = vdupq_n_s64(2uLL);
            do
            {
              *(int64x2_t *)(v57 + v56) = vaddq_s64(v58, v59);
              v58 = vaddq_s64(v58, v60);
              v56 += 16;
            }
            while (v56 != 80);
            return result;
          }
          if (a2 == 34877)
          {
            ClampedStencilValue = *(unsigned __int16 *)(a1 + 15018);
            goto LABEL_188;
          }
        }
        else
        {
          if (a2 == 34229)
          {
            ClampedStencilValue = *(_QWORD *)(a1 + 26384);
            if (ClampedStencilValue)
              goto LABEL_187;
            goto LABEL_177;
          }
          if (a2 == 34466)
          {
            *(_QWORD *)a3 = 0;
            v23 = ((unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 29480) + 580) >> 2) & 4;
            *(_QWORD *)a3 = v23;
            v24 = *(unsigned __int8 *)(a1 + 32501);
            if (v24 == 4)
            {
              *(_QWORD *)a3 = v23 | 0xA;
              v24 = *(unsigned __int8 *)(a1 + 32501);
              if (v24 == 4)
              {
                if ((*(_BYTE *)(*(_QWORD *)(a1 + 29480) + 576) & 0x20) == 0)
                  return 1;
                v23 += 38;
                *(_QWORD *)a3 = v23;
                v24 = *(unsigned __int8 *)(a1 + 32501);
              }
              else
              {
                v23 |= 0xAuLL;
              }
            }
            if (v24 != 2)
              return 1;
            ClampedStencilValue = v23 + 10;
            goto LABEL_188;
          }
        }
        goto LABEL_160;
      }
      if (a2 <= 34044)
      {
        if (a2 == 34016)
        {
          v42 = *(unsigned __int16 *)(a1 + 23768);
          goto LABEL_124;
        }
        if (a2 == 34024)
        {
          ClampedStencilValue = *(_QWORD *)(a1 + 29480);
          if ((*(_BYTE *)(ClampedStencilValue + 569) & 2) == 0)
            goto LABEL_177;
          v21 = *(_DWORD *)(ClampedStencilValue + 4);
          LODWORD(ClampedStencilValue) = *(_DWORD *)(ClampedStencilValue + 8);
          if (v21 < (int)ClampedStencilValue)
            LODWORD(ClampedStencilValue) = v21;
LABEL_21:
          ClampedStencilValue = (int)ClampedStencilValue;
LABEL_188:
          *(_QWORD *)a3 = ClampedStencilValue;
          return 1;
        }
        goto LABEL_160;
      }
      if (a2 == 34045)
      {
        v26 = *(float *)(*(_QWORD *)(a1 + 29480) + 148);
      }
      else
      {
        if (a2 != 34047)
          goto LABEL_160;
        v26 = *(float *)(*(_QWORD *)(a1 + 29480) + 144);
      }
      ClampedStencilValue = (uint64_t)v26;
      goto LABEL_188;
    }
    if (a2 > 36006)
    {
      if (a2 > 36062)
      {
        if (a2 == 36063)
        {
          ClampedStencilValue = *(unsigned __int8 *)(*(_QWORD *)(a1 + 29480) + 22);
          goto LABEL_188;
        }
        if (a2 == 36183)
        {
          ClampedStencilValue = *(unsigned __int8 *)(*(_QWORD *)(a1 + 29480) + 170);
          goto LABEL_188;
        }
      }
      else
      {
        if (a2 == 36007)
        {
          ClampedStencilValue = *(_QWORD *)(a1 + 28952);
          if (!ClampedStencilValue)
            goto LABEL_188;
          goto LABEL_187;
        }
        if (a2 == 36010)
        {
          ClampedStencilValue = *(_QWORD *)(a1 + 28968);
          if (!ClampedStencilValue)
            goto LABEL_188;
          goto LABEL_187;
        }
      }
    }
    else if (a2 > 34964)
    {
      if (a2 == 34965)
      {
        v43 = *(_QWORD *)(a1 + 26384);
        if (v43)
        {
          ClampedStencilValue = *(_QWORD *)(v43 + 1232);
          if (!ClampedStencilValue)
            goto LABEL_188;
        }
        else
        {
          ClampedStencilValue = *(_QWORD *)(a1 + 19320);
          if (!ClampedStencilValue)
            goto LABEL_188;
        }
        goto LABEL_187;
      }
      if (a2 == 36006)
      {
        ClampedStencilValue = *(_QWORD *)(a1 + 28960);
        if (!ClampedStencilValue)
          goto LABEL_188;
        goto LABEL_187;
      }
    }
    else
    {
      if (a2 == 34921)
      {
LABEL_483:
        ClampedStencilValue = 16;
        goto LABEL_188;
      }
      if (a2 == 34964)
      {
        ClampedStencilValue = *(_QWORD *)(a1 + 19312);
        if (!ClampedStencilValue)
          goto LABEL_188;
        goto LABEL_187;
      }
    }
  }
  else
  {
    if (a2 <= 3023)
    {
      if (a2 > 2959)
      {
        switch(a2)
        {
          case 2960:
            v19 = *(_DWORD *)(a1 + 15644);
            goto LABEL_126;
          case 2961:
            ClampedStencilValue = *(int *)(a1 + 15172);
            goto LABEL_188;
          case 2962:
            v30 = a1 + 16 * (*(_DWORD *)(a1 + 29776) - 1028);
            v31 = 15604;
            goto LABEL_108;
          case 2963:
            ClampedStencilValue = *(unsigned int *)(a1 + 16 * (*(_DWORD *)(a1 + 29776) - 1028) + 15596);
            goto LABEL_188;
          case 2964:
            v30 = a1 + 16 * (*(_DWORD *)(a1 + 29776) - 1028);
            v31 = 15606;
            goto LABEL_108;
          case 2965:
            v30 = a1 + 16 * (*(_DWORD *)(a1 + 29776) - 1028);
            v31 = 15608;
            goto LABEL_108;
          case 2966:
            v30 = a1 + 16 * (*(_DWORD *)(a1 + 29776) - 1028);
            v31 = 15610;
            goto LABEL_108;
          case 2967:
            v32 = *(_DWORD *)(a1 + 16 * (*(_DWORD *)(a1 + 29776) - 1028) + 15600);
            goto LABEL_110;
          case 2968:
            ClampedStencilValue = *(unsigned int *)(a1 + 4 * (*(_DWORD *)(a1 + 29776) - 1028) + 15324);
            goto LABEL_188;
          case 2978:
            v33 = *(float *)(a1 + 9320);
            v34 = *(float *)(a1 + 9324);
            v35 = *(_QWORD *)(a1 + 29480);
            v36 = *(_DWORD *)(v35 + 8);
            if (v33 > (float)*(int *)(v35 + 4))
              v33 = (float)*(int *)(v35 + 4);
            if (v34 > (float)v36)
              v34 = (float)v36;
            v37 = vcvt_s32_f32(vadd_f32(*(float32x2_t *)(a1 + 9312), (float32x2_t)vbsl_s8((int8x8_t)vcgez_f32(*(float32x2_t *)(a1 + 9312)), (int8x8_t)0x3F0000003F000000, (int8x8_t)0xBF000000BF000000)));
            *(_QWORD *)&v38 = v37.i32[0];
            *((_QWORD *)&v38 + 1) = v37.i32[1];
            *(_OWORD *)a3 = v38;
            if (v33 >= 0.0)
              v39 = 0.5;
            else
              v39 = -0.5;
            v40 = (int)(float)(v33 + v39);
            if (v34 >= 0.0)
              v41 = 0.5;
            else
              v41 = -0.5;
            *(_QWORD *)(a3 + 16) = v40;
            *(_QWORD *)(a3 + 24) = (int)(float)(v34 + v41);
            return 4;
          default:
            goto LABEL_160;
        }
      }
      if (a2 > 2885)
      {
        switch(a2)
        {
          case 2928:
            *(_QWORD *)a3 = *(_QWORD *)(a1 + 9280);
            *(_QWORD *)(a3 + 8) = *(_QWORD *)(a1 + 9288);
            *a4 = 5130;
            *a5 = 1;
            return 2;
          case 2929:
            ClampedStencilValue = *(unsigned __int8 *)(a1 + 15204);
            goto LABEL_188;
          case 2930:
            ClampedStencilValue = *(unsigned __int8 *)(a1 + 15340);
            goto LABEL_188;
          case 2931:
            v46 = *(double *)(a1 + 15128);
            goto LABEL_153;
          case 2932:
            ClampedStencilValue = *(unsigned __int16 *)(a1 + 15200);
            goto LABEL_188;
          default:
            if (a2 != 2886)
              goto LABEL_160;
            ClampedStencilValue = *(unsigned __int16 *)(a1 + 15528);
            break;
        }
        goto LABEL_188;
      }
      switch(a2)
      {
        case 2849:
          v25 = *(float *)(a1 + 15304);
          goto LABEL_179;
        case 2884:
          ClampedStencilValue = *(unsigned __int8 *)(a1 + 15534);
          goto LABEL_188;
        case 2885:
          ClampedStencilValue = *(unsigned __int16 *)(a1 + 15530);
          goto LABEL_188;
      }
      goto LABEL_160;
    }
    if (a2 > 3106)
    {
      if (a2 > 3377)
      {
        if (a2 > 3385)
        {
          if (a2 == 3386)
          {
            *(_QWORD *)a3 = *(int *)(*(_QWORD *)(a1 + 29480) + 4);
            v44 = *(int *)(*(_QWORD *)(a1 + 29480) + 8);
LABEL_158:
            *(_QWORD *)(a3 + 8) = v44;
            return 2;
          }
          if (a2 == 3408)
          {
            ClampedStencilValue = *(unsigned __int8 *)(*(_QWORD *)(a1 + 29480) + 20);
            goto LABEL_188;
          }
        }
        else
        {
          if (a2 == 3378)
          {
            ClampedStencilValue = 6;
            if (*(unsigned __int8 *)(a1 + 32501) - 3 < 2)
              ClampedStencilValue = 8;
            goto LABEL_188;
          }
          if (a2 == 3379)
          {
            ClampedStencilValue = *(unsigned __int16 *)(*(_QWORD *)(a1 + 29480) + 160);
            goto LABEL_188;
          }
        }
        goto LABEL_160;
      }
      if (a2 != 3107)
      {
        if (a2 == 3317)
        {
          ClampedStencilValue = *(int *)(a1 + 18512);
          goto LABEL_188;
        }
        if (a2 == 3333)
        {
          ClampedStencilValue = *(int *)(a1 + 18476);
          goto LABEL_188;
        }
        goto LABEL_160;
      }
      *(_QWORD *)a3 = *(_BYTE *)(a1 + 15336) & 1;
      *(_QWORD *)(a3 + 8) = *(_BYTE *)(a1 + 15337) & 1;
      *(_QWORD *)(a3 + 16) = *(_BYTE *)(a1 + 15338) & 1;
      v22 = *(_BYTE *)(a1 + 15339) & 1;
LABEL_136:
      *(_QWORD *)(a3 + 24) = v22;
      return 4;
    }
    if (a2 <= 3041)
    {
      switch(a2)
      {
        case 3024:
          ClampedStencilValue = *(unsigned __int8 *)(a1 + 15224);
          goto LABEL_188;
        case 3040:
LABEL_72:
          ClampedStencilValue = *(unsigned __int16 *)(a1 + 15010);
          goto LABEL_188;
        case 3041:
LABEL_99:
          ClampedStencilValue = *v18;
          goto LABEL_188;
      }
      goto LABEL_160;
    }
    if (a2 <= 3088)
    {
      if (a2 == 3042)
      {
        LOBYTE(v19) = *(_BYTE *)(a1 + 15120);
LABEL_126:
        ClampedStencilValue = v19 & 1;
        goto LABEL_188;
      }
      if (a2 != 3088)
        goto LABEL_160;
      *(_QWORD *)a3 = *(int *)(a1 + 15560);
      *(_QWORD *)(a3 + 8) = *(int *)(a1 + 15564);
      *(_QWORD *)(a3 + 16) = *(int *)(a1 + 15568);
      v22 = *(int *)(a1 + 15572);
      goto LABEL_136;
    }
    if (a2 == 3089)
    {
      ClampedStencilValue = *(unsigned __int8 *)(a1 + 15556);
      goto LABEL_188;
    }
    if (a2 == 3106)
    {
      if ((*(_BYTE *)(a1 + 29803) & 0x10) != 0)
        gleUpdateAnyDrawBuffersFloat(a1, a6, a7, a8);
      v27 = *(float *)v14;
      if (*((_BYTE *)v18 + 170))
      {
        *(double *)a3 = fminf(fmaxf(v27, *(float *)(a1 + 288)), *(float *)(a1 + 292));
        *(double *)(a3 + 8) = fminf(fmaxf(*(float *)(v14 + 4), *(float *)(a1 + 288)), *(float *)(a1 + 292));
        *(double *)(a3 + 16) = fminf(fmaxf(*(float *)(v14 + 8), *(float *)(a1 + 288)), *(float *)(a1 + 292));
        v28 = *(float *)(v14 + 12);
LABEL_85:
        v29 = fminf(fmaxf(v28, *(float *)(a1 + 288)), *(float *)(a1 + 292));
      }
      else
      {
        *(double *)a3 = v27;
        *(double *)(a3 + 8) = *(float *)(v14 + 4);
        *(double *)(a3 + 16) = *(float *)(v14 + 8);
        v29 = *(float *)(v14 + 12);
      }
      goto LABEL_184;
    }
  }
LABEL_160:
  v49 = *(unsigned __int8 *)(a1 + 32501);
  if ((v49 - 2) > 2)
    goto LABEL_323;
  switch(a2)
  {
    case 3410:
      if (*(_QWORD *)(a1 + 28960))
      {
        v50 = 32860;
        goto LABEL_213;
      }
      ClampedStencilValue = *(unsigned __int8 *)(*(_QWORD *)(a1 + 29480) + 48);
      goto LABEL_188;
    case 3411:
      if (*(_QWORD *)(a1 + 28960))
      {
        v50 = 32861;
        goto LABEL_213;
      }
      ClampedStencilValue = *(unsigned __int8 *)(*(_QWORD *)(a1 + 29480) + 49);
      goto LABEL_188;
    case 3412:
      if (*(_QWORD *)(a1 + 28960))
      {
        v50 = 32862;
        goto LABEL_213;
      }
      ClampedStencilValue = *(unsigned __int8 *)(*(_QWORD *)(a1 + 29480) + 50);
      goto LABEL_188;
    case 3413:
      if (!*(_QWORD *)(a1 + 28960))
      {
        ClampedStencilValue = *(unsigned __int8 *)(*(_QWORD *)(a1 + 29480) + 51);
        goto LABEL_188;
      }
      v50 = 32863;
LABEL_213:
      gleGetAttachmentsParameters(a1, v50, (_QWORD *)a3);
      return 1;
    case 3414:
      v64 = *(_QWORD *)(a1 + 28960);
      if (!v64)
      {
        ClampedStencilValue = *(unsigned __int8 *)(*(_QWORD *)(a1 + 29480) + 56);
        goto LABEL_188;
      }
      v65 = *(_QWORD *)(v64 + 168);
      if (!v65)
        goto LABEL_177;
      v66 = *(unsigned int *)(v64 + 428);
      v67 = *(unsigned int *)(v64 + 432);
      v68 = v65 + 8 * *(unsigned __int8 *)(a1 + 32500);
      v118[0] = 0;
      (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, _DWORD *))(*(_QWORD *)(a1 + 29496) + 376))(*(_QWORD *)(a1 + 29464), *(_QWORD *)(v68 + 40), v66, v67, 34890, v118);
      goto LABEL_206;
    case 3415:
      v69 = *(_QWORD *)(a1 + 28960);
      if (!v69)
      {
        ClampedStencilValue = *(unsigned __int8 *)(*(_QWORD *)(a1 + 29480) + 57);
        goto LABEL_188;
      }
      v70 = *(_QWORD *)(v69 + 184);
      if (!v70)
        goto LABEL_177;
      v71 = *(unsigned int *)(v69 + 444);
      v72 = *(unsigned int *)(v69 + 448);
      v73 = v70 + 8 * *(unsigned __int8 *)(a1 + 32500);
      v118[0] = 0;
      (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, _DWORD *))(*(_QWORD *)(a1 + 29496) + 376))(*(_QWORD *)(a1 + 29464), *(_QWORD *)(v73 + 40), v71, v72, 35057, v118);
      goto LABEL_206;
    default:
      if (a2 == 33170)
      {
        ClampedStencilValue = *(unsigned __int16 *)(a1 + 15296);
        goto LABEL_188;
      }
      if (a2 == 33901)
      {
        *(_QWORD *)a3 = (uint64_t)*(float *)(*(_QWORD *)(a1 + 29480) + 60);
        v48 = *(float *)(*(_QWORD *)(a1 + 29480) + 64);
        goto LABEL_157;
      }
      if (v49 == 2)
      {
        if (a2 < 12288)
        {
          if (a2 <= 2849)
          {
            if (a2 == 2833)
            {
              v25 = *(float *)(a1 + 15344);
              goto LABEL_179;
            }
            if (a2 != 2834)
            {
              if (a2 != 2848)
                goto LABEL_323;
              ClampedStencilValue = *(unsigned __int8 *)(a1 + 15315);
              goto LABEL_188;
            }
            *(double *)a3 = *(float *)(*(_QWORD *)(a1 + 29480) + 68);
            v76 = *(float *)(*(_QWORD *)(a1 + 29480) + 72);
          }
          else
          {
            if (a2 > 3057)
            {
              if (a2 == 3058)
              {
                ClampedStencilValue = *(unsigned __int8 *)(a1 + 15319);
              }
              else
              {
                if (a2 != 3154)
                  goto LABEL_323;
                ClampedStencilValue = *(unsigned __int16 *)(a1 + 15288);
              }
              goto LABEL_188;
            }
            if (a2 != 2850)
            {
              if (a2 != 3056)
                goto LABEL_323;
              ClampedStencilValue = *(unsigned __int16 *)(a1 + 15316);
              goto LABEL_188;
            }
            *(double *)a3 = *(float *)(*(_QWORD *)(a1 + 29480) + 88);
            v76 = *(float *)(*(_QWORD *)(a1 + 29480) + 92);
          }
          *(double *)(a3 + 8) = v76;
          *a4 = 5130;
          return 2;
        }
        if (a2 > 32924)
        {
          switch(a2)
          {
            case 33064:
              v25 = *(float *)(a1 + 15356);
              goto LABEL_179;
            case 32927:
              ClampedStencilValue = *(unsigned __int8 *)(a1 + 17682);
              break;
            case 32925:
              ClampedStencilValue = *(unsigned __int8 *)(a1 + 17680);
              break;
            default:
              goto LABEL_323;
          }
          goto LABEL_188;
        }
        if ((a2 - 12288) >= 6)
          goto LABEL_323;
        v74 = *(_DWORD *)v16;
        goto LABEL_374;
      }
      if (a2 > 35659)
      {
        if (a2 > 36002)
        {
          if (a2 <= 36004)
          {
            if (a2 != 36003)
            {
              ClampedStencilValue = *(unsigned int *)(a1 + 15628);
              goto LABEL_188;
            }
            v32 = *(_DWORD *)(a1 + 15632);
LABEL_110:
            ClampedStencilValue = gleGetClampedStencilValue(a1, v32);
            goto LABEL_188;
          }
          if (a2 == 36005)
          {
            ClampedStencilValue = *(unsigned int *)(a1 + 15332);
            goto LABEL_188;
          }
          if (a2 == 37137)
          {
            ClampedStencilValue = -1;
            goto LABEL_188;
          }
        }
        else if (a2 > 35722)
        {
          if (a2 == 35723)
          {
            ClampedStencilValue = *(unsigned __int16 *)(a1 + 15300);
            goto LABEL_188;
          }
          if (a2 == 35725)
          {
            ClampedStencilValue = *(_QWORD *)(a1 + 24768);
            if (ClampedStencilValue)
              goto LABEL_187;
            goto LABEL_188;
          }
        }
        else
        {
          if (a2 == 35660)
          {
            v75 = *(_QWORD *)(a1 + 29480);
LABEL_277:
            ClampedStencilValue = *(unsigned __int16 *)(v75 + 156);
            goto LABEL_188;
          }
          if (a2 == 35661)
          {
            ClampedStencilValue = *(unsigned __int16 *)(*(_QWORD *)(a1 + 29480) + 154);
            goto LABEL_188;
          }
        }
      }
      else
      {
        if (a2 > 34815)
        {
          switch(a2)
          {
            case 34816:
              ClampedStencilValue = *(unsigned __int16 *)(a1 + 15636);
              goto LABEL_188;
            case 34817:
              ClampedStencilValue = *(unsigned __int16 *)(a1 + 15638);
              goto LABEL_188;
            case 34818:
              ClampedStencilValue = *(unsigned __int16 *)(a1 + 15640);
              goto LABEL_188;
            case 34819:
              ClampedStencilValue = *(unsigned __int16 *)(a1 + 15642);
              goto LABEL_188;
            default:
              if (a2 != 34930)
                goto LABEL_293;
              ClampedStencilValue = *(unsigned __int8 *)(*(_QWORD *)(a1 + 29480) + 175);
              break;
          }
          goto LABEL_188;
        }
        switch(a2)
        {
          case 32773:
            if ((*(_BYTE *)(a1 + 29803) & 0x10) != 0)
              gleUpdateAnyDrawBuffersFloat(a1, a6, a7, a8);
            v77 = *(float *)(v14 + 16);
            if (*((_BYTE *)v18 + 170))
            {
              *(double *)a3 = fminf(fmaxf(v77, *(float *)(a1 + 288)), *(float *)(a1 + 292));
              *(double *)(a3 + 8) = fminf(fmaxf(*(float *)(v14 + 20), *(float *)(a1 + 288)), *(float *)(a1 + 292));
              *(double *)(a3 + 16) = fminf(fmaxf(*(float *)(v14 + 24), *(float *)(a1 + 288)), *(float *)(a1 + 292));
              v28 = *(float *)(v14 + 28);
              goto LABEL_85;
            }
            *(double *)a3 = v77;
            *(double *)(a3 + 8) = *(float *)(v14 + 20);
            *(double *)(a3 + 16) = *(float *)(v14 + 24);
            v29 = *(float *)(v14 + 28);
            goto LABEL_184;
          case 34068:
            ClampedStencilValue = *(_QWORD *)(a1 + 88 * *(unsigned __int16 *)(a1 + 23768) + 20776);
            goto LABEL_187;
          case 34076:
            ClampedStencilValue = *(unsigned __int16 *)(*(_QWORD *)(a1 + 29480) + 168);
            goto LABEL_188;
        }
      }
LABEL_293:
      if (v49 != 4)
      {
        result = 0;
        switch(a2)
        {
          case 36344:
            return result;
          case 36345:
            goto LABEL_177;
          case 36346:
            goto LABEL_172;
          case 36347:
LABEL_301:
            v78 = *(unsigned int *)(*(_QWORD *)(a1 + 29480) + 344);
            goto LABEL_321;
          case 36348:
LABEL_319:
            v78 = *(unsigned int *)(*(_QWORD *)(a1 + 29480) + 448);
            goto LABEL_321;
          case 36349:
LABEL_320:
            v78 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 29480) + 332);
LABEL_321:
            ClampedStencilValue = v78 >> 2;
            goto LABEL_188;
          default:
            if (a2 == 33370)
              goto LABEL_315;
            v49 = 3;
            goto LABEL_323;
        }
      }
      result = 0;
      if (a2 <= 35052)
      {
        if (a2 <= 34814)
        {
          if (a2 <= 32873)
          {
            if (a2 <= 3315)
            {
              switch(a2)
              {
                case 3074:
                  v117 = *(_QWORD *)(a1 + 28968);
                  if (v117)
                    ClampedStencilValue = *(unsigned __int16 *)(v117 + 516);
                  else
                    ClampedStencilValue = *(unsigned __int16 *)(v14 + 172);
                  goto LABEL_188;
                case 3314:
                  ClampedStencilValue = v15[9];
                  goto LABEL_188;
                case 3315:
                  ClampedStencilValue = v15[13];
                  goto LABEL_188;
              }
            }
            else if (a2 > 3330)
            {
              if (a2 == 3331)
              {
                ClampedStencilValue = v15[4];
                goto LABEL_188;
              }
              if (a2 == 3332)
              {
                ClampedStencilValue = v15[5];
                goto LABEL_188;
              }
            }
            else
            {
              if (a2 == 3316)
              {
                ClampedStencilValue = v15[14];
                goto LABEL_188;
              }
              if (a2 == 3330)
              {
                ClampedStencilValue = *v15;
                goto LABEL_188;
              }
            }
            goto LABEL_323;
          }
          if (a2 <= 33306)
          {
            switch(a2)
            {
              case 32874:
                ClampedStencilValue = *(_QWORD *)(a1 + 88 * *((unsigned __int16 *)v15 + 2660) + 20784);
                goto LABEL_187;
              case 32875:
              case 32876:
              case 32879:
              case 32880:
              case 32881:
              case 32882:
                goto LABEL_323;
              case 32877:
                ClampedStencilValue = v15[15];
                goto LABEL_188;
              case 32878:
                ClampedStencilValue = v15[11];
                goto LABEL_188;
              case 32883:
                ClampedStencilValue = *(unsigned __int16 *)(*(_QWORD *)(a1 + 29480) + 164);
                goto LABEL_188;
              default:
                if (a2 == 33000)
                {
                  ClampedStencilValue = 0xFFFFFLL;
                }
                else
                {
                  if (a2 != 33001)
                    goto LABEL_323;
                  ClampedStencilValue = 150000;
                }
                break;
            }
            goto LABEL_188;
          }
          if (a2 <= 33308)
          {
            if (a2 == 33307)
            {
              gleDeriveVersion(a1);
              v110 = *v13;
            }
            else
            {
              gleDeriveVersion(a1);
              v110 = v13[2];
            }
            ClampedStencilValue = v110 - 48;
            goto LABEL_188;
          }
          if (a2 != 33309)
          {
            if (a2 == 33370)
            {
LABEL_315:
              ClampedStencilValue = *(_QWORD *)(a1 + 24776);
              if (!ClampedStencilValue)
                goto LABEL_188;
              goto LABEL_187;
            }
            if (a2 != 34814)
              goto LABEL_323;
LABEL_177:
            *(_QWORD *)a3 = 0;
            return 1;
          }
          gleGetFilteredExtensions(a1, (uint64_t)v118);
          v115 = 0;
          LODWORD(ClampedStencilValue) = 0;
          do
          {
            if (((uint64_t)(&gleExtensionTable)[v115 + 1] & 0x110) == 0x10)
            {
              v116 = *((__int16 *)&gleExtensionTable + 4 * v115 + 6);
              if (v116 == -1 || ((v118[v116 >> 5] >> v116) & 1) != 0)
                LODWORD(ClampedStencilValue) = ClampedStencilValue + 1;
            }
            v115 += 2;
          }
          while (v115 != 488);
          goto LABEL_21;
        }
        if (a2 <= 34856)
        {
          v108 = a2 - 34853;
          if ((a2 - 34853) >= 4)
          {
            if (a2 == 34815)
              return result;
            if (a2 == 34852)
            {
              ClampedStencilValue = *(unsigned __int8 *)(*(_QWORD *)(a1 + 29480) + 21);
              goto LABEL_188;
            }
            goto LABEL_323;
          }
          v109 = *(_QWORD *)(a1 + 28960);
          if (v109)
          {
            v81 = v109 + 2 * v108;
            goto LABEL_540;
          }
          v30 = a1 + 2 * v108;
          v31 = 29836;
        }
        else
        {
          if ((a2 - 34857) >= 0xC)
            goto LABEL_323;
          v79 = a2 - 34853;
          if ((a2 - 34853) > 7)
            goto LABEL_177;
          v80 = *(_QWORD *)(a1 + 28960);
          if (v80)
          {
            v81 = v80 + 2 * v79;
LABEL_540:
            ClampedStencilValue = *(unsigned __int16 *)(v81 + 500);
            goto LABEL_188;
          }
          v30 = a1 + 2 * v79;
          v31 = 15180;
        }
LABEL_108:
        ClampedStencilValue = *(unsigned __int16 *)(v30 + v31);
        goto LABEL_188;
      }
      if (a2 > 35967)
      {
        if (a2 <= 36386)
        {
          switch(a2)
          {
            case 36344:
              return result;
            case 36345:
              goto LABEL_177;
            case 36346:
              goto LABEL_172;
            case 36347:
              goto LABEL_301;
            case 36348:
              goto LABEL_319;
            case 36349:
              goto LABEL_320;
            default:
              switch(a2)
              {
                case 35977:
                  ClampedStencilValue = *(unsigned __int8 *)(a1 + 17984);
                  goto LABEL_188;
                case 35978:
                  ClampedStencilValue = *(unsigned int *)(*(_QWORD *)(a1 + 29480) + 488);
                  goto LABEL_188;
                case 35979:
                  ClampedStencilValue = *(unsigned int *)(*(_QWORD *)(a1 + 29480) + 480);
                  goto LABEL_188;
                case 35980:
                case 35981:
                case 35982:
                  goto LABEL_323;
                case 35983:
                  ClampedStencilValue = *(_QWORD *)(a1 + 19352);
                  if (!ClampedStencilValue)
                    goto LABEL_188;
                  goto LABEL_187;
                default:
                  if (a2 != 35968)
                    goto LABEL_323;
                  ClampedStencilValue = *(unsigned int *)(*(_QWORD *)(a1 + 29480) + 484);
                  break;
              }
              goto LABEL_188;
          }
          return result;
        }
        if (a2 <= 36661)
        {
          switch(a2)
          {
            case 36387:
              ClampedStencilValue = *(unsigned __int8 *)(*(_QWORD *)(a1 + 26432) + 41);
              goto LABEL_188;
            case 36388:
              ClampedStencilValue = *(__int16 *)(*(_QWORD *)(a1 + 26432) + 42) != -1;
              goto LABEL_188;
            case 36389:
              ClampedStencilValue = *(_QWORD *)(a1 + 26432);
              if (!ClampedStencilValue)
                goto LABEL_188;
              goto LABEL_187;
          }
        }
        else if (a2 > 37153)
        {
          if (a2 == 37154 || a2 == 37157)
          {
            ClampedStencilValue = *(unsigned int *)(*(_QWORD *)(a1 + 29480) + 348);
            goto LABEL_188;
          }
        }
        else
        {
          if (a2 == 36662)
          {
            ClampedStencilValue = *(_QWORD *)(a1 + 19368);
            if (!ClampedStencilValue)
              goto LABEL_188;
            goto LABEL_187;
          }
          if (a2 == 36663)
          {
            ClampedStencilValue = *(_QWORD *)(a1 + 19376);
            if (!ClampedStencilValue)
              goto LABEL_188;
            goto LABEL_187;
          }
        }
      }
      else if (a2 <= 35367)
      {
        if (a2 > 35075)
        {
          if (a2 == 35076)
          {
            ClampedStencilValue = *(int *)(*(_QWORD *)(a1 + 29480) + 428);
            goto LABEL_188;
          }
          if (a2 == 35077)
          {
            ClampedStencilValue = *(int *)(*(_QWORD *)(a1 + 29480) + 432);
            goto LABEL_188;
          }
          if (a2 != 35097)
            goto LABEL_323;
          ClampedStencilValue = *(_QWORD *)(a1 + 8 * *((unsigned __int16 *)v15 + 2660) + 23936);
          if (ClampedStencilValue)
            goto LABEL_187;
          goto LABEL_177;
        }
        switch(a2)
        {
          case 35053:
            ClampedStencilValue = *(_QWORD *)(a1 + 19328);
            if (!ClampedStencilValue)
              goto LABEL_188;
            goto LABEL_187;
          case 35055:
            ClampedStencilValue = *(_QWORD *)(a1 + 19336);
            if (!ClampedStencilValue)
              goto LABEL_188;
            goto LABEL_187;
          case 35071:
            ClampedStencilValue = *(unsigned __int16 *)(*(_QWORD *)(a1 + 29480) + 162);
            goto LABEL_188;
        }
      }
      else
      {
        if (a2 <= 35656)
        {
          switch(a2)
          {
            case 35368:
              ClampedStencilValue = *(_QWORD *)(a1 + 19344);
              if (!ClampedStencilValue)
                goto LABEL_188;
              goto LABEL_187;
            case 35371:
              ClampedStencilValue = *(unsigned __int16 *)(*(_QWORD *)(a1 + 29480) + 352);
              goto LABEL_188;
            case 35373:
              ClampedStencilValue = *(unsigned __int16 *)(*(_QWORD *)(a1 + 29480) + 334);
              goto LABEL_188;
            case 35374:
              ClampedStencilValue = *(unsigned __int16 *)(*(_QWORD *)(a1 + 29480) + 446);
              goto LABEL_188;
            case 35375:
              ClampedStencilValue = *(unsigned __int8 *)(*(_QWORD *)(a1 + 29480) + 506);
              goto LABEL_188;
            case 35376:
              ClampedStencilValue = *(unsigned int *)(*(_QWORD *)(a1 + 29480) + 452);
              goto LABEL_188;
            case 35377:
              v111 = *(_QWORD *)(a1 + 29480);
              v112 = *(_DWORD *)(v111 + 452) * *(unsigned __int16 *)(v111 + 352);
              v113 = *(_DWORD *)(v111 + 344);
              break;
            case 35379:
              v114 = *(_QWORD *)(a1 + 29480);
              v112 = *(_DWORD *)(v114 + 452) * *(unsigned __int16 *)(v114 + 334);
              v113 = *(unsigned __int16 *)(v114 + 332);
              break;
            case 35380:
              ClampedStencilValue = *(unsigned __int16 *)(*(_QWORD *)(a1 + 29480) + 504);
              goto LABEL_188;
            default:
              goto LABEL_323;
          }
          ClampedStencilValue = v113 + (v112 >> 2);
          goto LABEL_188;
        }
        switch(a2)
        {
          case 35657:
            ClampedStencilValue = *(unsigned __int16 *)(*(_QWORD *)(a1 + 29480) + 332);
            goto LABEL_188;
          case 35658:
            ClampedStencilValue = *(unsigned int *)(*(_QWORD *)(a1 + 29480) + 344);
            goto LABEL_188;
          case 35869:
            ClampedStencilValue = *(_QWORD *)(a1 + 88 * *((unsigned __int16 *)v15 + 2660) + 20816);
            goto LABEL_187;
        }
      }
LABEL_323:
      if (a2 >> 1 == 17869 && (v49 - 2) <= 2)
      {
        if (*(_QWORD *)(a1 + 28968))
        {
          os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
          if (gleCheckFramebufferStatus(a1, *(_QWORD *)(a1 + 28968) + 40) == 36053)
          {
            gleUpdateReadFramebufferStateInline_0(a1, v82, v83, v84);
            v85 = *(_QWORD *)(a1 + 28968) + 560;
            if (a2 == 35739)
            {
              v86 = *(unsigned __int16 *)(v85 + 88 * v13[93] + 84);
            }
            else
            {
              v86 = *(unsigned __int16 *)(v85 + 88 * v13[93] + 86);
              *(_QWORD *)a3 = v86;
              if (v86 == 36193 && v13[95] == 4)
                v86 = 5131;
            }
            *(_QWORD *)a3 = v86;
          }
          else if (!*(_WORD *)(v14 + 160))
          {
            *(_WORD *)(v14 + 160) = 1286;
          }
          os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
        }
        else if (!*(_WORD *)(v14 + 160))
        {
          *(_WORD *)(v14 + 160) = 1286;
        }
        return 1;
      }
      if (a2 == 35659 && v49 == 4)
      {
        ClampedStencilValue = *(unsigned int *)(*(_QWORD *)(a1 + 29480) + 448);
        goto LABEL_188;
      }
      if (v49 == 4)
      {
        if (a2 != 35410)
        {
          if (a2 == 36201)
          {
            ClampedStencilValue = *(unsigned __int8 *)(v16 + 144);
            goto LABEL_188;
          }
          if (a2 == 36203)
          {
            ClampedStencilValue = 0xFFFFFFFFLL;
            goto LABEL_188;
          }
          return 0xFFFFFFFFLL;
        }
LABEL_343:
        ClampedStencilValue = *(unsigned __int8 *)(*(_QWORD *)(a1 + 29480) + 337);
        goto LABEL_188;
      }
      if ((v49 - 3) <= 1)
      {
        if (a2 != 35410)
          return 0xFFFFFFFFLL;
        goto LABEL_343;
      }
      result = 0xFFFFFFFFLL;
      if (a2 > 32883)
      {
        if (a2 <= 34593)
        {
          if (a2 <= 33062)
          {
            switch(a2)
            {
              case 32884:
                ClampedStencilValue = (*(_QWORD *)(*(_QWORD *)(a1 + 26384) + 904) >> 16) & 1;
                goto LABEL_188;
              case 32885:
                ClampedStencilValue = (*(_QWORD *)(*(_QWORD *)(a1 + 26384) + 904) >> 17) & 1;
                goto LABEL_188;
              case 32886:
                ClampedStencilValue = (*(_QWORD *)(*(_QWORD *)(a1 + 26384) + 904) >> 18) & 1;
                goto LABEL_188;
              case 32887:
              case 32889:
              case 32893:
              case 32896:
              case 32900:
              case 32901:
              case 32902:
              case 32903:
                return result;
              case 32888:
                ClampedStencilValue = (*(_QWORD *)(*(_QWORD *)(a1 + 26384) + 904) >> *((_WORD *)v15 + 2661) >> 24) & 1;
                goto LABEL_188;
              case 32890:
                ClampedStencilValue = *(char *)(*(_QWORD *)(a1 + 26384) + 158);
                goto LABEL_188;
              case 32891:
                v75 = *(_QWORD *)(a1 + 26384);
                goto LABEL_277;
              case 32892:
                ClampedStencilValue = *(int *)(*(_QWORD *)(a1 + 26384) + 152);
                goto LABEL_188;
              case 32894:
                v96 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 26384) + 180);
                goto LABEL_490;
              case 32895:
                ClampedStencilValue = *(int *)(*(_QWORD *)(a1 + 26384) + 176);
                goto LABEL_188;
              case 32897:
                ClampedStencilValue = *(char *)(*(_QWORD *)(a1 + 26384) + 206);
                if ((_DWORD)ClampedStencilValue == 5)
                  ClampedStencilValue = 32993;
                goto LABEL_188;
              case 32898:
                v96 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 26384) + 204);
                goto LABEL_490;
              case 32899:
                ClampedStencilValue = *(int *)(*(_QWORD *)(a1 + 26384) + 200);
                goto LABEL_188;
              case 32904:
                ClampedStencilValue = *(char *)(*(_QWORD *)(a1 + 26384) + 24 * *((unsigned __int16 *)v15 + 2661) + 350);
                goto LABEL_188;
              case 32905:
                ClampedStencilValue = *(unsigned __int16 *)(*(_QWORD *)(a1 + 26384)
                                                          + 24 * *((unsigned __int16 *)v15 + 2661)
                                                          + 348);
                goto LABEL_188;
              case 32906:
                ClampedStencilValue = *(int *)(*(_QWORD *)(a1 + 26384) + 24 * *((unsigned __int16 *)v15 + 2661) + 344);
                goto LABEL_188;
              default:
                if (a2 != 33062)
                  return result;
                v25 = *(float *)(a1 + 15348);
                break;
            }
            goto LABEL_179;
          }
          if (a2 > 34017)
          {
            switch(a2)
            {
              case 34468:
                goto LABEL_487;
              case 34469:
              case 34470:
              case 34471:
              case 34476:
                return result;
              case 34472:
                *(double *)a3 = *(float *)(a1 + 8496);
                *(double *)(a3 + 8) = *(float *)(a1 + 8500);
                *(double *)(a3 + 16) = *(float *)(a1 + 8504);
                v29 = *(float *)(a1 + 8508);
                goto LABEL_184;
              case 34473:
                v96 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 26384) + 252);
                goto LABEL_490;
              case 34474:
                ClampedStencilValue = *(int *)(*(_QWORD *)(a1 + 26384) + 248);
                goto LABEL_188;
              case 34475:
                ClampedStencilValue = *(char *)(*(_QWORD *)(a1 + 26384) + 254);
                goto LABEL_188;
              case 34477:
                ClampedStencilValue = (*(_QWORD *)(*(_QWORD *)(a1 + 26384) + 904) >> 20) & 1;
                goto LABEL_188;
              default:
                if (a2 == 34018)
                {
                  ClampedStencilValue = *(unsigned __int16 *)(*(_QWORD *)(a1 + 29480) + 152);
                  goto LABEL_188;
                }
                if (a2 != 34058)
                  return result;
                v94 = 9680;
                break;
            }
LABEL_517:
            v92 = (float32x2_t *)(a1 + v94);
LABEL_518:
            gleGetMatrixd(v92, (float64x2_t *)a3);
            *a4 = 5130;
            return 16;
          }
          if (a2 != 33063)
          {
            if (a2 != 33065)
            {
              if (a2 != 34017)
                return result;
              v42 = *((unsigned __int16 *)v15 + 2661);
LABEL_124:
              ClampedStencilValue = v42 + 33984;
              goto LABEL_188;
            }
            *(double *)a3 = *(float *)(a1 + 15360);
            *(double *)(a3 + 8) = *(float *)(a1 + 15364);
            *(double *)(a3 + 16) = *(float *)(a1 + 15368);
            *a4 = 5130;
            return 3;
          }
          v25 = *(float *)(a1 + 15352);
LABEL_179:
          *(double *)a3 = v25;
          *a4 = 5130;
          return 1;
        }
        if (a2 <= 34965)
        {
          switch(a2)
          {
            case 34880:
              v89 = a1 + ((unint64_t)*((unsigned __int8 *)v15 + 2047) << 6);
              v90 = 9680;
              goto LABEL_402;
            case 34881:
            case 34884:
            case 34885:
              return result;
            case 34882:
              ClampedStencilValue = 11;
              goto LABEL_188;
            case 34883:
              ClampedStencilValue = *((unsigned __int8 *)v15 + 2047);
              goto LABEL_188;
            case 34886:
              ClampedStencilValue = *(char *)(*(_QWORD *)(a1 + 26384) + 326);
              goto LABEL_188;
            case 34887:
              v96 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 26384) + 324);
LABEL_490:
              ClampedStencilValue = v96 & 0xFFFFFFFFFFFFDFFFLL;
              goto LABEL_188;
            case 34888:
              ClampedStencilValue = *(int *)(*(_QWORD *)(a1 + 26384) + 320);
              goto LABEL_188;
            default:
              if ((a2 - 34594) < 2)
              {
                v89 = a1 + ((unint64_t)(a2 - 34588) << 6);
                v90 = 9360;
                goto LABEL_402;
              }
              if (a2 != 34913)
                return result;
              ClampedStencilValue = *((unsigned __int8 *)v17 + 93);
              break;
          }
          goto LABEL_188;
        }
        if (a2 <= 35209)
        {
          switch(a2)
          {
            case 34966:
              ClampedStencilValue = *(_QWORD *)(*(_QWORD *)(a1 + 26384) + 1240);
              if (!ClampedStencilValue)
                goto LABEL_188;
              goto LABEL_187;
            case 34967:
              ClampedStencilValue = *(_QWORD *)(*(_QWORD *)(a1 + 26384) + 1248);
              if (!ClampedStencilValue)
                goto LABEL_188;
              goto LABEL_187;
            case 34968:
              ClampedStencilValue = *(_QWORD *)(*(_QWORD *)(a1 + 26384) + 1256);
              if (!ClampedStencilValue)
                goto LABEL_188;
              goto LABEL_187;
            case 34970:
              ClampedStencilValue = *(_QWORD *)(*(_QWORD *)(a1 + 26384) + 8 * *((unsigned __int16 *)v15 + 2661) + 1304);
              if (!ClampedStencilValue)
                goto LABEL_188;
              goto LABEL_187;
            case 34974:
              ClampedStencilValue = *(_QWORD *)(*(_QWORD *)(a1 + 26384) + 1272);
              if (!ClampedStencilValue)
                goto LABEL_188;
              goto LABEL_187;
            default:
              return result;
          }
          return result;
        }
        if (a2 <= 35739)
        {
          switch(a2)
          {
            case 35210:
              ClampedStencilValue = *(unsigned __int16 *)(*(_QWORD *)(a1 + 26384) + 300);
              goto LABEL_188;
            case 35211:
              ClampedStencilValue = *(int *)(*(_QWORD *)(a1 + 26384) + 296);
              goto LABEL_188;
            case 35213:
              gleGetMatrixd((float32x2_t *)(a1 + 9616), (float64x2_t *)a3);
              for (i = 0; i != 128; i += 8)
              {
                v98 = *(double *)(a3 + i);
                *(float *)(a3 + i) = v98;
                result = 16;
              }
              break;
            case 35214:
              gleGetMatrixd((float32x2_t *)(a1 + 9552), (float64x2_t *)a3);
              for (j = 0; j != 128; j += 8)
              {
                v100 = *(double *)(a3 + j);
                *(float *)(a3 + j) = v100;
                result = 16;
              }
              break;
            case 35215:
              v101 = *((unsigned __int16 *)v15 + 2660);
              if (v101 > 7)
                return 4294967294;
              gleGetMatrixd((float32x2_t *)(a1 + (v101 << 6) + 10384), (float64x2_t *)a3);
              for (k = 0; k != 128; k += 8)
              {
                v103 = *(double *)(a3 + k);
                *(float *)(a3 + k) = v103;
                result = 16;
              }
              break;
            default:
              return result;
          }
          return result;
        }
        switch(a2)
        {
          case 35740:
            ClampedStencilValue = (*(_QWORD *)(*(_QWORD *)(a1 + 26384) + 904) >> 22) & 1;
            goto LABEL_188;
          case 35742:
            ClampedStencilValue = *(_QWORD *)(*(_QWORD *)(a1 + 26384) + 1296);
            if (!ClampedStencilValue)
              goto LABEL_188;
            break;
          case 35743:
            ClampedStencilValue = *(_QWORD *)(*(_QWORD *)(a1 + 26384) + 1288);
            if (!ClampedStencilValue)
              goto LABEL_188;
            break;
          default:
            return result;
        }
LABEL_187:
        ClampedStencilValue = *(unsigned int *)(ClampedStencilValue + 16);
        goto LABEL_188;
      }
      if (a2 > 3007)
      {
        if (a2 <= 3552)
        {
          if (a2 > 3152)
          {
            switch(a2)
            {
              case 3377:
                ClampedStencilValue = 8;
                goto LABEL_188;
              case 3378:
              case 3379:
              case 3380:
              case 3381:
              case 3383:
                return result;
              case 3382:
                if (v49 == 2)
                  goto LABEL_483;
                ClampedStencilValue = 32;
                goto LABEL_188;
              case 3384:
                if (v49 != 2)
                  goto LABEL_488;
                ClampedStencilValue = 2;
                goto LABEL_188;
              case 3385:
                if (v49 == 2)
LABEL_487:
                  ClampedStencilValue = 4;
                else
LABEL_488:
                  ClampedStencilValue = 10;
                goto LABEL_188;
              default:
                if (a2 == 3153)
                {
                  ClampedStencilValue = v17[1];
                }
                else
                {
                  if (a2 != 3156)
                    return result;
                  ClampedStencilValue = v17[4];
                }
                break;
            }
            goto LABEL_188;
          }
          if (a2 <= 3009)
          {
            if (a2 == 3008)
              ClampedStencilValue = *(unsigned __int8 *)(a1 + 15006);
            else
              ClampedStencilValue = *(unsigned __int16 *)(a1 + 15004);
            goto LABEL_188;
          }
          if (a2 == 3010)
          {
            if ((*(_BYTE *)(v14 + 131) & 0x10) != 0)
              gleUpdateAnyDrawBuffersFloat(a1, a6, a7, a8);
            v95 = *(float *)(v14 + 32);
            if (*((_BYTE *)v18 + 170))
              v95 = fminf(fmaxf(v95, *(float *)(a1 + 288)), *(float *)(a1 + 292));
            v46 = v95;
LABEL_153:
            *(double *)a3 = v46;
            *a4 = 5130;
            result = 1;
            *a5 = 1;
          }
          else if (a2 == 3152)
          {
            ClampedStencilValue = *v17;
            goto LABEL_188;
          }
          return result;
        }
        if (a2 >= 0x4000)
        {
          if ((a2 - 0x4000) < 8)
          {
            v74 = *(_DWORD *)(a1 + 14880);
LABEL_374:
            ClampedStencilValue = (v74 >> a2) & 1;
            goto LABEL_188;
          }
          if (a2 == 32826)
          {
            ClampedStencilValue = *(unsigned __int8 *)(a1 + 12517);
            goto LABEL_188;
          }
          return result;
        }
        if (a2 != 3553)
        {
          if (a2 != 5888)
            return result;
LABEL_414:
          v94 = 9616;
          goto LABEL_517;
        }
        v104 = *((unsigned __int16 *)v15 + 2660);
        if (v104 < 8)
        {
          ClampedStencilValue = ((unint64_t)*(unsigned int *)(a1 + 76 * v104 + 15684) >> 3) & 1;
          goto LABEL_188;
        }
        if (!*(_WORD *)(v14 + 160))
          *(_WORD *)(v14 + 160) = 1282;
        goto LABEL_177;
      }
      if (a2 <= 2831)
      {
        if (a2 != 2816)
        {
          if (a2 == 2818)
          {
            *(double *)a3 = *(float *)(a1 + 8448);
            *(double *)(a3 + 8) = *(float *)(a1 + 8452);
            *(double *)(a3 + 16) = *(float *)(a1 + 8456);
            *a4 = 5130;
            *a5 = 1;
            return 3;
          }
          if (a2 != 2819)
            return result;
          v88 = *((unsigned __int16 *)v15 + 2660);
          if (v88 > 7)
            return 4294967294;
          v93 = (float *)(a1 + 16 * v88);
          *(double *)a3 = v93[2140];
          *(double *)(a3 + 8) = v93[2141];
          *(double *)(a3 + 16) = v93[2142];
          *(double *)(a3 + 24) = v93[2143];
          *a4 = 5130;
          return 4;
        }
        *(double *)a3 = *(float *)(a1 + 8464);
        *(double *)(a3 + 8) = *(float *)(a1 + 8468);
        *(double *)(a3 + 16) = *(float *)(a1 + 8472);
        v29 = *(float *)(a1 + 8476);
LABEL_184:
        *(double *)(a3 + 24) = v29;
        *a4 = 5130;
        *a5 = 1;
        return 4;
      }
      switch(a2)
      {
        case 2896:
          ClampedStencilValue = *(unsigned __int8 *)(a1 + 14890);
          goto LABEL_188;
        case 2897:
        case 2901:
        case 2902:
        case 2904:
        case 2905:
        case 2906:
        case 2907:
        case 2908:
        case 2909:
        case 2910:
        case 2911:
        case 2913:
          return result;
        case 2898:
          ClampedStencilValue = *(unsigned __int8 *)(a1 + 14892);
          goto LABEL_188;
        case 2899:
          *(double *)a3 = *(float *)(a1 + 12528);
          *(double *)(a3 + 8) = *(float *)(a1 + 12532);
          *(double *)(a3 + 16) = *(float *)(a1 + 12536);
          v29 = *(float *)(a1 + 12540);
          goto LABEL_184;
        case 2900:
          ClampedStencilValue = *(unsigned int *)(a1 + 15592);
          goto LABEL_188;
        case 2903:
          ClampedStencilValue = *(unsigned __int8 *)(a1 + 14891);
          goto LABEL_188;
        case 2912:
          ClampedStencilValue = *((unsigned __int8 *)v18 + 274);
          goto LABEL_188;
        case 2914:
          v25 = *(float *)(a1 + 15244);
          goto LABEL_179;
        case 2915:
          v25 = *(float *)(a1 + 15248);
          goto LABEL_179;
        case 2916:
          v25 = *(float *)(a1 + 15252);
          goto LABEL_179;
        case 2917:
          ClampedStencilValue = v18[134];
          goto LABEL_188;
        case 2918:
          *(double *)a3 = *(float *)(a1 + 15228);
          *(double *)(a3 + 8) = *(float *)(a1 + 15232);
          *(double *)(a3 + 16) = *(float *)(a1 + 15236);
          v29 = *(float *)(a1 + 15240);
          goto LABEL_184;
        default:
          switch(a2)
          {
            case 2976:
              v91 = v15[509];
              if ((v91 - 5) >= 0xB)
              {
                switch(v91)
                {
                  case 2:
                    ClampedStencilValue = 6144;
                    break;
                  case 3:
                    ClampedStencilValue = 5889;
                    break;
                  case 4:
                    ClampedStencilValue = 5888;
                    break;
                  default:
                    ClampedStencilValue = 5890;
                    break;
                }
              }
              else
              {
                ClampedStencilValue = 34880;
              }
              goto LABEL_188;
            case 2977:
              ClampedStencilValue = *(unsigned __int8 *)(a1 + 12516);
              goto LABEL_188;
            case 2978:
              return result;
            case 2979:
              v105 = v15[392];
              goto LABEL_515;
            case 2980:
              v105 = v15[391];
              goto LABEL_515;
            case 2981:
              v106 = *((unsigned __int16 *)v15 + 2660);
              if (v106 > 7)
                return 4294967294;
              v105 = *(int *)(a1 + 4 * v106 + 20064);
LABEL_515:
              ClampedStencilValue = v105 + 1;
              goto LABEL_188;
            case 2982:
              goto LABEL_414;
            case 2983:
              v94 = 9552;
              goto LABEL_517;
            case 2984:
              v107 = *((unsigned __int16 *)v15 + 2660);
              if (v107 > 7)
                return 4294967294;
              v89 = a1 + (v107 << 6);
              v90 = 10384;
LABEL_402:
              v92 = (float32x2_t *)(v89 + v90);
              goto LABEL_518;
            default:
              if (a2 != 2832)
                return result;
              ClampedStencilValue = *((unsigned __int8 *)v17 + 92);
              break;
          }
          goto LABEL_188;
      }
      return result;
  }
}

uint64_t gliQueryRendererInfo(_QWORD *a1, int a2)
{
  size_t Devices;
  size_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  if (!a1)
    return 10014;
  *a1 = 0;
  Devices = gfxGetDevices();
  if (!Devices)
    return 10015;
  v5 = Devices;
  LODWORD(Devices) = 0;
  do
  {
    if ((*(_DWORD *)(v5 + 20) & a2) != 0)
      Devices = (Devices + 1);
    else
      Devices = Devices;
    v5 = *(_QWORD *)v5;
  }
  while (v5);
  if (!(_DWORD)Devices)
    return 0;
  v6 = (char *)malloc_type_calloc(Devices, 0x88uLL, 0x2BF3136CuLL);
  if (!v6)
    abort();
  v7 = v6;
  v8 = gfxGetDevices();
  if (v8)
  {
    v9 = v8;
    v10 = 0;
    while (1)
    {
      if ((*(_DWORD *)(v9 + 20) & a2) != 0)
      {
        v11 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)(v9 + 8) + 1080))(*(_QWORD *)(v9 + 24), &v7[136 * v10]);
        if ((_DWORD)v11)
        {
          v12 = v11;
          free(v7);
          v7 = 0;
          goto LABEL_23;
        }
        *(_QWORD *)&v7[136 * v10] = &v7[136 * v10 + 136];
        *(_DWORD *)&v7[136 * v10++ + 8] |= 0x20000u;
      }
      v9 = *(_QWORD *)v9;
      if (!v9)
        goto LABEL_21;
    }
  }
  v10 = 0;
LABEL_21:
  v12 = 0;
  *(_QWORD *)&v7[136 * v10 - 136] = 0;
LABEL_23:
  *a1 = v7;
  return v12;
}

uint64_t gliDestroyRendererInfo(void *a1)
{
  if (!a1)
    return 10014;
  free(a1);
  return 0;
}

uint64_t gliAttachDrawableWithOptions(unint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  int v21;
  char v22;
  char v24;

  v10 = a1 + 28652;
  if (*(_QWORD *)(a1 + 27648))
    (*(void (**)(unint64_t))(a1 + 27752))(a1);
  if (*(_DWORD *)(v10 + 1140) != 878944803)
    return 10004;
  if (((_DWORD)a2 != 0) == (a3 == 0))
    return 10005;
  if (*(_QWORD *)(a1 + 28992))
    gleFallbackForceEnd(a1);
  if ((a4 & 0x80000000) != 0 || *(unsigned __int8 *)(a1 + 32496) <= a4)
    return 10008;
  *(_BYTE *)(a1 + 32498) = a4;
  v11 = *(unsigned __int8 *)(a1 + 32499);
  if (v11 != a4)
    (*(void (**)(_QWORD))(*(_QWORD *)(a1 + 29448) + 240))(*(_QWORD *)(a1 + 29016));
  v12 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, unint64_t))(*(_QWORD *)(a1 + 1672 * a4 + 34160)
                                                                                       + 1184))(*(_QWORD *)(a1 + 1672 * a4 + 32512), a2, a3, a5, a1 + 29632);
  v13 = v12;
  if (v12 <= 3 && *(unsigned __int8 *)(a1 + 32499) != a4)
  {
    v16 = 1;
LABEL_34:
    v15 = 1;
    goto LABEL_35;
  }
  if ((int)v12 > 2)
  {
    v16 = 0;
    v15 = 0;
    if ((_DWORD)v12 == 3)
    {
LABEL_35:
      v14 = 1;
      goto LABEL_36;
    }
    if ((_DWORD)v12 != 10016)
      goto LABEL_45;
    if (!(_DWORD)a2)
    {
      v13 = 10016;
      goto LABEL_45;
    }
    v17 = *(unsigned __int8 *)(a1 + 32497);
    v13 = 10016;
    if (v17 == 255 || v17 == a4)
      goto LABEL_45;
    if (v11 == a4)
    {
      v18 = *(unsigned __int8 *)(a1 + 32497);
      (*(void (**)(_QWORD))(*(_QWORD *)(a1 + 29448) + 240))(*(_QWORD *)(a1 + 29016));
      v17 = v18;
    }
    a4 = v17;
    v19 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, unint64_t))(*(_QWORD *)(a1 + 1672 * v17 + 34160)
                                                                                         + 1184))(*(_QWORD *)(a1 + 1672 * v17 + 32512), a2, a3, a5, a1 + 29632);
    v13 = v19;
    if (v19 > 3 || a4 == *(unsigned __int8 *)(a1 + 32499))
    {
      v14 = 0;
      if (v19 < 2)
      {
        v15 = 0;
        v16 = 0;
        goto LABEL_36;
      }
      if ((_DWORD)v19 == 3)
      {
        v15 = 0;
        goto LABEL_56;
      }
      if ((_DWORD)v19 != 2)
        goto LABEL_45;
    }
    else
    {
      v14 = 1;
    }
    v15 = 1;
LABEL_56:
    v16 = v14;
    v14 = 1;
    goto LABEL_36;
  }
  if (v12 < 2)
  {
    v14 = 0;
    v15 = 0;
    v16 = 0;
LABEL_36:
    *(_DWORD *)v10 = 0;
    *(_DWORD *)(v10 + 1148) |= 0xC0000000;
    if (v16)
    {
      *(int8x16_t *)(a1 + 1520) = vorrq_s8(*(int8x16_t *)(a1 + 1520), (int8x16_t)xmmword_21B9A5000);
      *(int8x16_t *)(a1 + 1536) = vorrq_s8(*(int8x16_t *)(a1 + 1536), (int8x16_t)xmmword_21B9A5010);
      *(_DWORD *)(v10 + 1148) |= 0xDE3C0478;
      *(_QWORD *)(a1 + 28648) = 0;
      *(_BYTE *)(v10 + 28) = 0;
      *(_BYTE *)(v10 + 30) = 0;
      v20 = a4;
      v21 = v15;
      gleSwitchPlugin(a1, v20);
      v15 = v21;
    }
    if (v15)
      gleUpdatePluginConfig(a1);
    if (*(_QWORD *)(a1 + 28960))
      v22 = 0;
    else
      v22 = *(_BYTE *)(*(_QWORD *)(a1 + 29032) + 41);
    v13 = 0;
    *(_BYTE *)(a1 + 32483) = v22;
    *(_QWORD *)(a1 + 29008) = a3;
    goto LABEL_46;
  }
  v16 = 0;
  if ((_DWORD)v12 == 2)
    goto LABEL_34;
LABEL_45:
  LOWORD(a2) = 0;
  v14 = 0;
  *(_QWORD *)(a1 + 29008) = 0;
LABEL_46:
  *(_WORD *)(v10 + 1176) = a2;
  gliUpdateDispatchState((int8x16_t *)a1, v14);
  if (!*(_QWORD *)(a1 + 28960) && *(_BYTE *)(a1 + 32477) && *(_QWORD *)(a1 + 29008))
  {
    *(_BYTE *)(a1 + 32470) = *(_BYTE *)(a1 + 32483);
    v24 = *(_BYTE *)(a1 + 32473);
    *(_BYTE *)(a1 + 32471) = v24;
    *(_BYTE *)(a1 + 32472) |= v24;
  }
  else
  {
    *(_WORD *)(a1 + 32470) = 0;
  }
  return v13;
}

uint64_t gleUpdateDispatchCodeChange(unint64_t a1, char a2, unsigned int a3)
{
  unint64_t v4;
  _DWORD *v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  _BYTE *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t i;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v28;
  int v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  _DWORD v42[2];

  v4 = a1 + 29632;
  v5 = (_DWORD *)(a1 + 28652);
  if ((a2 & 4) != 0)
  {
    v7 = 0;
    *(_BYTE *)(a1 + 32482) = 0;
  }
  else
  {
    v6 = *(unsigned __int8 *)(a1 + 32497);
    if (v6 == 255 || v6 == *(unsigned __int8 *)(a1 + 32499))
    {
      a2 = 0;
      *(_BYTE *)(a1 + 32482) = 1;
      v7 = 1282;
    }
    else
    {
      v28 = *(_QWORD *)(a1 + 28960);
      if (v28)
      {
        v29 = *(unsigned __int16 *)(v28 + 474);
        v30 = *(unsigned __int16 *)(v28 + 476);
      }
      else
      {
        v29 = *(_DWORD *)v4;
        v30 = *(_DWORD *)(a1 + 29636);
      }
      v42[0] = v29;
      v42[1] = v30;
      v31 = (*(uint64_t (**)(_QWORD, uint64_t, _DWORD *, _QWORD, _QWORD))(*(_QWORD *)(a1 + 1672 * v6 + 34160)
                                                                                 + 1184))(*(_QWORD *)(a1 + 1672 * v6 + 32512), 92, v42, 0, 0);
      a2 = 0;
      if (v31 <= 3)
        a2 = gleFallbackBegin(a1, a3);
      v7 = 0;
    }
  }
  v8 = *(unsigned __int8 *)(v4 + 2849);
  if ((a2 & 1) == v8)
  {
    if (v8 != *(unsigned __int8 *)(*(_QWORD *)(a1 + 29032) + 101) && !*(_WORD *)(a1 + 2276))
    {
      *(_WORD *)(v4 + 202) = 0;
      *(_WORD *)(a1 + 2276) = 1;
      *v5 = 0;
      *(_DWORD *)(a1 + 1544) |= 0x40000000u;
    }
  }
  else
  {
    v9 = (_BYTE *)(a1 + 17985);
    if ((a2 & 1) != 0)
    {
      *(_BYTE *)(v4 + 2849) = 1;
    }
    else
    {
      *(_BYTE *)(v4 + 2849) = 0;
      if (*(_WORD *)(a1 + 2276) != 1)
      {
        *(_WORD *)(v4 + 202) = 0;
        *(_WORD *)(a1 + 2276) = 1;
      }
      *v5 = 0;
      *(_DWORD *)(a1 + 1544) |= 0x40000000u;
    }
    gleUpdateContextStateData(a1, 0);
    *(_DWORD *)(v4 + 164) = *(_DWORD *)(v4 + 164) & 0xFFFFFFBE | (*(_BYTE *)(v4 + 2849) != 0) | ((*(unsigned __int8 *)(v4 + 2849) != *(unsigned __int8 *)(*(_QWORD *)(a1 + 29032) + 101)) << 6);
    gleSetColorMaterialEnable(a1);
    gleUpdateDrawArraysFuncs(a1);
    gleSelectVertexSubmitFunc(a1);
    gleSelectPrimitiveFunc(a1);
    v10 = *(unsigned __int16 *)(a1 + 17986);
    if (*(_BYTE *)(v4 + 2849))
    {
      if (v10 == 0xFFFF && !*v9)
      {
        v32 = *(_QWORD *)(a1 + 26432);
        v33 = *(unsigned __int16 *)(v32 + 42);
        if (v33 != 0xFFFF && !*(_BYTE *)(v32 + 41))
        {
          v34 = *(unsigned __int8 *)(v4 + 2864);
          if (*(_BYTE *)(v4 + 2864))
          {
            v35 = (_QWORD *)(v4 + 3952);
            do
            {
              *v35 = 0;
              v35 += 209;
              --v34;
            }
            while (v34);
            LOWORD(v33) = *(_WORD *)(v32 + 42);
          }
          *(_WORD *)(a1 + 17986) = v33;
          *v5 = 0;
          *(_DWORD *)(a1 + 1524) |= 0x40000000u;
          (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 29496) + 168))(*(_QWORD *)(a1 + 29464), 0);
          if (*(_BYTE *)(v4 + 2864))
          {
            v36 = 0;
            v37 = *(_QWORD *)(a1 + 26432);
            v38 = (_QWORD *)(v4 + 3952);
            v39 = 8 * *(unsigned __int8 *)(v4 + 2864);
            do
            {
              *v38 = *(_QWORD *)(*(_QWORD *)(v37 + 160) + v36 + 40);
              v36 += 8;
              v38 += 209;
            }
            while (v39 != v36);
          }
        }
      }
      v11 = *(_QWORD *)(a1 + 26432);
      *v9 = *(_BYTE *)(v11 + 41);
      *(_WORD *)(a1 + 17986) = *(_WORD *)(v11 + 42);
      if (*(__int16 *)(v11 + 42) != -1 && !*(_BYTE *)(v11 + 41))
      {
        v12 = *(_QWORD *)(a1 + 24768);
        if (!v12)
        {
          v13 = *(_QWORD *)(a1 + 24776);
          if (v13)
          {
            v14 = v13 + 40;
            v15 = 3;
            while (1)
            {
              v12 = *(_QWORD *)(v14 + 8 * v15);
              if (v12)
                break;
              if (--v15 == -1)
                goto LABEL_25;
            }
          }
          else
          {
LABEL_25:
            v12 = 0;
          }
        }
        for (i = 0; i != 5; ++i)
        {
          if (((*(_DWORD *)(v12 + 3724) >> i) & 1) != 0)
          {
            v17 = *(_QWORD *)(*(_QWORD *)(a1 + 26432) + 8 * i + 128);
            if (*(_BYTE *)(v17 + 165))
            {
              if (!*(_QWORD *)(v17 + 192))
                gfxWaitBufferOnDevices();
            }
          }
        }
        *v5 = 0;
        *(_DWORD *)(a1 + 1524) |= 0x40000000u;
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 29496) + 168))(*(_QWORD *)(a1 + 29464), 0);
      }
    }
    else if (v10 != 0xFFFF)
    {
      v18 = *(_QWORD *)(a1 + 24768);
      if (!v18)
      {
        v18 = *(_QWORD *)(a1 + 24776);
        if (v18)
        {
          v40 = v18 + 40;
          v41 = 3;
          while (1)
          {
            v18 = *(_QWORD *)(v40 + 8 * v41);
            if (v18)
              break;
            if (--v41 == -1)
            {
              v18 = 0;
              break;
            }
          }
        }
      }
      v19 = 0;
      *v9 = 1;
      *(_WORD *)(a1 + 17986) = -1;
      do
      {
        if (((*(_DWORD *)(v18 + 3724) >> v19) & 1) != 0)
        {
          v20 = *(_QWORD *)(*(_QWORD *)(a1 + 26432) + 8 * v19 + 128);
          v21 = *(_QWORD *)(a1 + 29024);
          *(_BYTE *)(v20 + 167) = 0;
          *(_QWORD *)(v20 + 192) = v21;
          v22 = *(_QWORD *)(a1 + 26384);
          if (v22)
            *(_BYTE *)(v22 + 1216) = 0;
        }
        ++v19;
      }
      while (v19 != 5);
      *v5 = 0;
      *(_DWORD *)(a1 + 1524) |= 0x40000000u;
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 29496) + 168))(*(_QWORD *)(a1 + 29464), 0);
      gleResetTransformFeedbackBufferCachePointers((_QWORD *)a1);
    }
    v23 = *(_QWORD *)(a1 + 25960);
    if (*(_BYTE *)(v4 + 2849))
    {
      if (v23)
        gleRestartPluginQuery(a1, v23 + 40);
      v24 = *(_QWORD *)(a1 + 25968);
      if (v24)
        gleRestartPluginQuery(a1, v24 + 40);
    }
    else
    {
      if (v23 && *(_QWORD *)(v23 + 232))
        gleSynchronizePluginQuery(a1, v23 + 40);
      v25 = *(_QWORD *)(a1 + 25968);
      if (v25 && *(_QWORD *)(v25 + 232))
        gleSynchronizePluginQuery(a1, v25 + 40);
    }
  }
  return v7;
}

uint64_t glScissor_Exec(uint64_t a1, int a2, int a3, int a4, int a5)
{
  _DWORD v6[4];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  v6[3] = a5;
  return glScissorArrayv_Core(a1, 0, 1, (uint64_t)v6);
}

uint64_t glViewport_Exec(uint64_t a1, int a2, int a3, int a4, int a5)
{
  float v6[4];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v6[0] = (float)a2;
  v6[1] = (float)a3;
  v6[2] = (float)a4;
  v6[3] = (float)a5;
  return glViewportArrayv_Core(a1, 0, 1, (uint64_t)v6);
}

float glGetFloatv_Exec(uint64_t a1, int a2, float *a3, double a4, double a5, double a6)
{
  int State;
  float result;
  __int16 *v10;
  __int16 v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  double v17;
  int v18;
  char v19;
  _BYTE v20[256];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v19 = 0;
  v18 = 0;
  State = gleGetState(a1, a2, (uint64_t)v20, &v18, &v19, a4, a5, a6);
  if (State == -2)
  {
    v10 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832))
      return result;
    v11 = 1282;
    goto LABEL_7;
  }
  if (State == -1)
  {
    v10 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832))
      return result;
    v11 = 1280;
LABEL_7:
    *v10 = v11;
    return result;
  }
  if (v18 == 5124)
  {
    if (State >= 1)
    {
      v12 = State;
      v13 = (uint64_t *)v20;
      do
      {
        v14 = *v13++;
        result = (float)v14;
        *a3++ = (float)v14;
        --v12;
      }
      while (v12);
    }
  }
  else if (State >= 1)
  {
    v15 = State;
    v16 = (double *)v20;
    do
    {
      v17 = *v16++;
      result = v17;
      *a3++ = result;
      --v15;
    }
    while (v15);
  }
  return result;
}

uint64_t glGetString_Exec(uint64_t a1, int a2)
{
  _BYTE *v3;
  _WORD *v4;
  _WORD *v6;
  const char *v7;
  const char *v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  size_t v16;
  uint64_t v17;
  char *v18;
  char **v19;
  int v21;
  const char *v22;
  char v23;
  unsigned __int8 *v24;
  int v25;
  uint64_t v26;
  _BYTE *v27;
  char **v28;
  int v30;
  char *v31;
  int v32;
  unsigned __int8 *v33;
  int v34;
  _DWORD v35[6];
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v3 = (_BYTE *)(a1 + 31894);
  v4 = (_WORD *)(a1 + 29832);
  if (a2 <= 34931)
  {
    switch(a2)
    {
      case 7936:
      case 7937:
      case 7940:
        return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a1 + 29496) + 176))(*(_QWORD *)(*(_QWORD *)(a1 + 1672 * *(unsigned __int8 *)(a1 + 32500) + 34168)
                                                                                               + 24));
      case 7938:
        gleDeriveVersion(a1);
        v7 = (const char *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(a1 + 29496) + 176))(*(_QWORD *)(*(_QWORD *)(a1 + 1672 * v3[606] + 34168) + 24), 7938);
        v6 = (_WORD *)(a1 + 32410);
        if (v3[607] == 2)
          v8 = "OpenGL ES-CM ";
        else
          v8 = "OpenGL ES ";
        snprintf_l((char *)(a1 + 32410), 0x3CuLL, 0, "%s%s %s", v8, (const char *)(a1 + 32406), v7);
        return (uint64_t)v6;
      case 7939:
        gleGetFilteredExtensions(a1, (uint64_t)v35);
        v6 = v4 + 7;
        v9 = v3[607] - 2;
        if (v9 > 2)
          v10 = 1;
        else
          v10 = dword_21B9A41F8[(char)v9];
        v17 = 0;
        v18 = (char *)(v4 + 7);
        break;
      default:
        goto LABEL_8;
    }
    while (1)
    {
      v19 = &(&gleExtensionTable)[2 * v17];
      if (((_DWORD)v19[1] & v10) != 0 && ((_DWORD)v19[1] & 0x100) == 0)
      {
        v21 = *((__int16 *)v19 + 6);
        if (v21 == -1)
        {
          v22 = *v19;
LABEL_39:
          v23 = *v22;
          if (*v22)
          {
            v24 = (unsigned __int8 *)(v22 + 1);
            do
            {
              *v18++ = v23;
              v25 = *v24++;
              v23 = v25;
            }
            while (v25);
          }
          *v18++ = 32;
          goto LABEL_43;
        }
        if (((v35[v21 >> 5] >> v21) & 1) != 0)
        {
          v22 = *v19;
          if (v21 == 1 && (*(_BYTE *)(*(_QWORD *)(a1 + 19296) + 344) & 2) != 0)
            v22 = "GL_IMG_texture_format_BGRA8888";
          goto LABEL_39;
        }
      }
LABEL_43:
      if (++v17 == 244)
      {
        *v18 = 0;
        return (uint64_t)v6;
      }
    }
  }
  if (a2 == 34932)
    return *(_QWORD *)(a1 + 24192);
  if (a2 != 35358)
  {
    if (a2 == 35724 && *(_BYTE *)(a1 + 32501) != 2)
    {
      gleDeriveVersion(a1);
      v13 = 0;
      v14 = v3[607];
      v15 = (const void *)(a1 + 32406);
      do
      {
        if (glGetString_Exec_versions[v13] == v14)
        {
          if (v13 == 6)
            return glGetString_Exec_versions[v13 + 2];
          v16 = strlen((const char *)glGetString_Exec_versions[v13 + 1]);
          if (!memcmp(v15, (const void *)glGetString_Exec_versions[v13 + 1], v16))
            return glGetString_Exec_versions[v13 + 2];
        }
        v13 += 3;
      }
      while (v13 != 21);
    }
    else
    {
LABEL_8:
      if (!*v4)
      {
        v6 = 0;
        *v4 = 1280;
        return (uint64_t)v6;
      }
    }
    return 0;
  }
  gleGetFilteredExtensions(a1, (uint64_t)v35);
  v11 = v3[607] - 2;
  if (v11 > 2)
    v12 = 0;
  else
    v12 = dword_21B9A41F8[(char)v11];
  v26 = 0;
  v27 = v3;
  do
  {
    v28 = &(&gleExtensionTable)[2 * v26];
    if (((_DWORD)v28[1] & v12) != 0 && ((_DWORD)v28[1] & 0x100) != 0)
    {
      v30 = *((__int16 *)v28 + 6);
      if (v30 == -1 || ((v35[v30 >> 5] >> v30) & 1) != 0)
      {
        v31 = *v28;
        v32 = **v28;
        if (v32)
        {
          v33 = (unsigned __int8 *)(v31 + 1);
          do
          {
            *v27++ = v32;
            v34 = *v33++;
            LOBYTE(v32) = v34;
          }
          while (v34);
        }
        *v27++ = 32;
      }
    }
    ++v26;
  }
  while (v26 != 244);
  *v27 = 0;
  return (uint64_t)v3;
}

uint64_t glActiveTexture_Exec(uint64_t result, int a2)
{
  if (a2 - 33984 < 0 || a2 - 33984 >= *(unsigned __int16 *)(*(_QWORD *)(result + 29480) + 154))
  {
    if (!*(_WORD *)(result + 29832))
      *(_WORD *)(result + 29832) = 1280;
  }
  else
  {
    *(_WORD *)(result + 23768) = a2 + 31552;
    if ((*(_DWORD *)(result + 20484) & 0xFFFFFFF8) == 0x10)
    {
      *(_DWORD *)(result + 20484) = a2 - 33968;
      return gleUpdateMatrixMode(result);
    }
  }
  return result;
}

void glGenTextures_Exec(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  int v6;
  BOOL v7;
  uint64_t v8;

  if ((a2 & 0x80000000) != 0)
  {
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1281;
  }
  else
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    v6 = gleGenHashNames(*(_QWORD *)(a1 + 19296) + 72, a2);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (v6)
      v7 = a2 == 0;
    else
      v7 = 1;
    if (!v7)
    {
      v8 = a2;
      do
      {
        *a3++ = v6++;
        --v8;
      }
      while (v8);
    }
  }
}

uint64_t gleGenHashNames(uint64_t a1, unsigned int a2)
{
  uint64_t *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t *v11;

  if (!a2)
    return 0;
  v4 = *(uint64_t **)(a1 + 16);
  if (!v4)
  {
    v8 = gfxLibAlloc();
    *(_QWORD *)v8 = 0;
LABEL_8:
    v6 = 1;
    *(_DWORD *)(v8 + 8) = 1;
    *(_DWORD *)(v8 + 12) = a2;
    *(_QWORD *)(a1 + 16) = v8;
    return v6;
  }
  v5 = *((_DWORD *)v4 + 2);
  if (v5 != a2 + 1)
  {
    if (v5 > a2)
    {
      v8 = gfxLibAlloc();
      *(_QWORD *)v8 = v4;
      goto LABEL_8;
    }
    while (1)
    {
      v9 = *((_DWORD *)v4 + 3);
      v6 = v9 + v5;
      v10 = v6 + a2;
      if (__CFADD__((_DWORD)v6, a2))
        break;
      v11 = v4;
      v4 = (uint64_t *)*v4;
      if (!v4 || (v5 = *((_DWORD *)v4 + 2), v10 < v5))
      {
        *((_DWORD *)v11 + 3) = v9 + a2;
        return v6;
      }
      if (v10 == v5)
      {
        *((_DWORD *)v11 + 3) = v9 + a2 + *((_DWORD *)v4 + 3);
        *v11 = *v4;
        MEMORY[0x220767A90](v4);
        return v6;
      }
    }
    return 0;
  }
  v6 = 1;
  v7 = *((_DWORD *)v4 + 3) + a2;
  *((_DWORD *)v4 + 2) = 1;
  *((_DWORD *)v4 + 3) = v7;
  return v6;
}

void glBindTexture_Exec(uint64_t a1, int a2, unsigned int a3)
{
  _BYTE *v5;
  unsigned __int16 *v6;
  unsigned int v7;

  v5 = (_BYTE *)(a1 + 32501);
  v6 = (unsigned __int16 *)(a1 + 23768);
  if (a2 > 35863)
  {
    if (a2 == 35866 && (*v5 & 0xFE) != 2)
    {
      v7 = 5;
      goto LABEL_19;
    }
  }
  else if (a2 > 34036)
  {
    if (a2 == 34067 && *v5 != 2)
    {
      v7 = 0;
      goto LABEL_19;
    }
  }
  else if (a2 != 3552)
  {
    if (a2 == 3553)
    {
      v7 = 3;
      goto LABEL_19;
    }
    if (a2 == 32879 && (*v5 & 0xFE) != 2)
    {
      v7 = 1;
LABEL_19:
      os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
      gleBindTexture(a1, v7, a3, *v6);
      os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
      return;
    }
  }
  if (!*(_WORD *)(a1 + 29832))
    *(_WORD *)(a1 + 29832) = 1280;
}

void gleBindTexture(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *TextureObject;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  unsigned int v25;
  unint64_t v26;
  int *v27;
  _BYTE *v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;

  v7 = a1 + 28652;
  if (a3)
  {
    v9 = *(_QWORD *)(a1 + 19296) + 72;
    v10 = gleLookupHashObject(v9, a3);
    if (v10)
    {
      v11 = v10;
      if ((v10[101] & 0xE3FF) != a2)
      {
        if (!*(_WORD *)(v7 + 1180))
          *(_WORD *)(v7 + 1180) = 1282;
        return;
      }
    }
    else
    {
      TextureObject = (uint64_t *)gleCreateTextureObject(*(_QWORD *)(a1 + 19296), a2, a3);
      v11 = TextureObject;
      if (*(_BYTE *)(v7 + 3849) == 4)
        *((_WORD *)TextureObject + 461) = 6403;
      gleAddHashNameAndObject(a1, v9, (uint64_t)TextureObject);
    }
  }
  else
  {
    v11 = *(uint64_t **)(a1 + 8 * a2 + 23592);
  }
  ++*((_DWORD *)v11 + 5);
  v13 = a1 + 88 * a4 + 8 * a2 + 20776;
  v14 = *(_QWORD *)v13;
  v15 = *(_DWORD *)(*(_QWORD *)v13 + 20) - 1;
  *(_DWORD *)(*(_QWORD *)v13 + 20) = v15;
  if (!v15)
  {
    gleUnbindTextureObject(a1, v14);
    gleFreeTextureObject(*(_QWORD *)(a1 + 19296), v14);
  }
  *(_QWORD *)v13 = v11;
  v16 = v11[72];
  if (!v16 || v16 == *(_QWORD *)(a1 + 29024))
  {
    v17 = *(_DWORD *)(v7 + 1172);
    v18 = *(_DWORD *)(*(_QWORD *)(a1 + 19296) + 4);
    if (v17 != v18)
    {
      v19 = *(_QWORD *)(a1 + 28960);
      v20 = *(_QWORD *)(a1 + 28968);
      if (*(_OWORD *)(a1 + 28960) != 0)
      {
        if (v19 && *(_DWORD *)(v19 + 556) != v17)
        {
          *(_DWORD *)v7 = 0;
          *(_DWORD *)(v7 + 1148) |= 0x50000000u;
        }
        if (v20 && *(_DWORD *)(v20 + 556) != v17)
          *(_DWORD *)(v7 + 1148) |= 0x82000000;
        if (v19 && *(_DWORD *)(v19 + 556) != v18)
        {
          gleUpdateFBODirtyStateForTexStampChange(a1, (_DWORD *)(v19 + 40), (v19 == v20) | 2);
          *(_DWORD *)(v19 + 556) = *(_DWORD *)(*(_QWORD *)(a1 + 19296) + 4);
        }
        if (v20 != v19 && v20 && *(_DWORD *)(v20 + 556) != *(_DWORD *)(*(_QWORD *)(a1 + 19296) + 4))
        {
          gleUpdateFBODirtyStateForTexStampChange(a1, (_DWORD *)(v20 + 40), 1);
          *(_DWORD *)(v20 + 556) = *(_DWORD *)(*(_QWORD *)(a1 + 19296) + 4);
        }
      }
      gleUpdateCtxDirtyStateForTexStampChange(a1);
      *(_DWORD *)(v7 + 1172) = *(_DWORD *)(*(_QWORD *)(a1 + 19296) + 4);
    }
  }
  else
  {
    gleSynchronizePluginTextureLevels(a1, (uint64_t)(v11 + 5));
  }
  if (a2 == 7)
  {
    v21 = v11[71];
    if (v21)
    {
      v22 = *(_QWORD *)(v21 + 192);
      if (v22)
      {
        if (v22 != *(_QWORD *)(a1 + 29024))
        {
          gleSynchronizePluginBufferStorage(a1, v21 + 40);
          if (*(_BYTE *)(v7 + 3844))
          {
            v23 = 0;
            v24 = (char *)v11 + 156;
            do
            {
              *v24 |= 8u;
              v24 += 24;
              ++v23;
            }
            while (v23 < *(unsigned __int8 *)(v7 + 3844));
          }
        }
      }
      v25 = *(unsigned __int8 *)(v7 + 3844);
      if (*(_BYTE *)(v7 + 3844))
      {
        v26 = 0;
        v27 = (int *)(v21 + 304);
        v28 = (char *)v11 + 156;
        do
        {
          v29 = *v27;
          v27 += 2;
          if (v29)
          {
            *v28 |= 8u;
            v25 = *(unsigned __int8 *)(v7 + 3844);
          }
          ++v26;
          v28 += 24;
        }
        while (v26 < v25);
      }
      v30 = *(_QWORD *)(a1 + 23776) | (1 << a4);
    }
    else
    {
      v30 = *(_QWORD *)(a1 + 23776) & ~(1 << a4);
    }
    *(_QWORD *)(a1 + 23776) = v30;
  }
  if (((*(_QWORD *)(a1 + 8 * (a4 >> 4) + 14976) >> (4 * (a4 & 0xF))) & 0xF) == a2)
  {
    v31 = 1 << (a4 & 0xF);
    *(_DWORD *)(a1 + 1524) |= v31;
    *(_DWORD *)(a1 + 1536) |= v31;
    v32 = *(_DWORD *)(a1 + 1548) | 0x8000000;
  }
  else
  {
    v32 = *(_DWORD *)(a1 + 1548);
  }
  *(_DWORD *)v7 = 0;
  *(_DWORD *)(a1 + 1548) = v32 | 0x22000;
}

uint64_t *gleLookupHashObject(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *result;
  _QWORD *v6;

  v2 = *(_DWORD *)(a1 + 24) & a2;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(v3 + 8 * v2);
  if (!v4)
    return 0;
  if (*(_DWORD *)(v4 + 16) == a2)
    return *(uint64_t **)(v3 + 8 * v2);
  result = *(uint64_t **)(v3 + 8 * v2);
  while (1)
  {
    v6 = result;
    result = (uint64_t *)*result;
    if (!result)
      break;
    if (*((_DWORD *)result + 4) == a2)
    {
      *v6 = *result;
      *result = v4;
      *(_QWORD *)(v3 + 8 * v2) = result;
      return result;
    }
  }
  return result;
}

uint64_t gleAddHashNameAndObject(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = gleAddHashName(a2, *(_DWORD *)(a3 + 16));
  gleAddHashObject(a2, a3);
  return v5;
}

uint64_t gleAddHashObject(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  unsigned int v10;
  uint64_t *v11;
  unsigned int v12;
  uint64_t v13;

  v3 = result;
  v4 = *(unsigned int *)(result + 24);
  if (v4 <= 0xFFFE && *(_DWORD *)(result + 28) > v4)
  {
    v5 = *(_QWORD *)(result + 8);
    result = gfxLibCalloc();
    if (result)
    {
      v6 = result;
      v7 = 0;
      v8 = (2 * v4) | 1;
      do
      {
        v9 = *(uint64_t ***)(v5 + 8 * v7);
        if (v9)
        {
          do
          {
            v10 = (_DWORD)v9[2] & v8;
            v11 = *v9;
            *v9 = *(uint64_t **)(result + 8 * v10);
            *(_QWORD *)(result + 8 * v10) = v9;
            v9 = (uint64_t **)v11;
          }
          while (v11);
        }
        ++v7;
      }
      while (v7 != v4 + 1);
      *(_DWORD *)(v3 + 24) = v8;
      result = MEMORY[0x220767A90](v5);
      *(_QWORD *)(v3 + 8) = v6;
      LODWORD(v4) = (2 * v4) | 1;
    }
  }
  v12 = *(_DWORD *)(a2 + 16) & v4;
  v13 = *(_QWORD *)(v3 + 8);
  *(_QWORD *)a2 = *(_QWORD *)(v13 + 8 * v12);
  *(_QWORD *)(v13 + 8 * v12) = a2;
  ++*(_DWORD *)(v3 + 28);
  return result;
}

uint64_t glPixelStorei_Exec(uint64_t result, int a2, unsigned int a3)
{
  __int16 *v3;
  __int16 v4;

  v3 = (__int16 *)(result + 29832);
  if (a2 == 3333)
  {
    if (a3 <= 8 && ((1 << a3) & 0x116) != 0)
    {
      *(_DWORD *)(result + 18476) = a3;
      return result;
    }
    goto LABEL_40;
  }
  if (a2 == 3317)
  {
    if (a3 <= 8 && ((1 << a3) & 0x116) != 0)
    {
      *(_DWORD *)(result + 18512) = a3;
      return result;
    }
    goto LABEL_40;
  }
  if ((*(_BYTE *)(result + 32501) & 0xFE) != 2)
  {
    if (a2 > 3330)
    {
      if (a2 > 32876)
      {
        if (a2 == 32877)
        {
          if ((a3 & 0x80000000) == 0)
          {
            *(_DWORD *)(result + 18508) = a3;
            return result;
          }
        }
        else
        {
          if (a2 != 32878)
            goto LABEL_10;
          if ((a3 & 0x80000000) == 0)
          {
            *(_DWORD *)(result + 18492) = a3;
            return result;
          }
        }
      }
      else if (a2 == 3331)
      {
        if ((a3 & 0x80000000) == 0)
        {
          *(_DWORD *)(result + 18464) = a3;
          return result;
        }
      }
      else
      {
        if (a2 != 3332)
          goto LABEL_10;
        if ((a3 & 0x80000000) == 0)
        {
          *(_DWORD *)(result + 18468) = a3;
          return result;
        }
      }
    }
    else if (a2 > 3315)
    {
      if (a2 == 3316)
      {
        if ((a3 & 0x80000000) == 0)
        {
          *(_DWORD *)(result + 18504) = a3;
          return result;
        }
      }
      else
      {
        if (a2 != 3330)
          goto LABEL_10;
        if ((a3 & 0x80000000) == 0)
        {
          *(_DWORD *)(result + 18448) = a3;
          return result;
        }
      }
    }
    else if (a2 == 3314)
    {
      if ((a3 & 0x80000000) == 0)
      {
        *(_DWORD *)(result + 18484) = a3;
        return result;
      }
    }
    else
    {
      if (a2 != 3315)
        goto LABEL_10;
      if ((a3 & 0x80000000) == 0)
      {
        *(_DWORD *)(result + 18500) = a3;
        return result;
      }
    }
LABEL_40:
    if (!*v3)
    {
      v4 = 1281;
      goto LABEL_42;
    }
    return result;
  }
LABEL_10:
  if (!*v3)
  {
    v4 = 1280;
LABEL_42:
    *v3 = v4;
  }
  return result;
}

uint64_t glTexParameteri_Exec(uint64_t a1, int a2, int a3, int a4)
{
  int v5;

  v5 = a4;
  return glTexParameterI_Exec(a1, a2, a3, &v5);
}

uint64_t glTexParameterI_Exec(uint64_t a1, int a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  float v12;
  int v13;
  int v14;
  char v15;
  char v16;
  int v17;
  float v18;
  int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  __int16 v25;
  int v26;
  float v27;
  int v28;
  int v29;
  int v30;
  int v31;
  char v32;
  int v33;
  char v34;
  int v35;
  int v36;
  char v37;
  int v38;
  char v39;
  uint64_t v40;
  _BYTE *v41;
  int v42;
  int v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  __int16 v47;
  unsigned int v48;
  unsigned int v49;
  __int16 v50;
  int v51;
  int v52;
  int v53;
  char v54;

  v8 = a1 + 28652;
  result = gleLookUpNonProxyNonFaceTexture(a1, a2);
  if (!result)
    goto LABEL_122;
  v10 = result;
  if (a3 > 34045)
  {
    if (a3 <= 35454)
    {
      if (a3 <= 34235)
      {
        if (a3 != 34046)
        {
          if (a3 == 34230)
          {
            v16 = *(_BYTE *)(result + 898);
            if ((*a4 != 0) != ((v16 & 2) == 0))
              return result;
            gleEvaluateTextureParameterChange(a1, result, *(_DWORD *)(result + 884), *(_DWORD *)(result + 888), *a4 != 0, v16 & 1);
            v17 = 0;
            goto LABEL_113;
          }
          goto LABEL_122;
        }
        v30 = *a4;
        if (*a4 <= 0)
        {
LABEL_60:
          if (*(_WORD *)(v8 + 1180))
            return result;
          v25 = 1281;
LABEL_124:
          *(_WORD *)(v8 + 1180) = v25;
          return result;
        }
        if (*(float *)(result + 928) == (float)v30)
          return result;
        *(float *)(result + 928) = (float)v30;
      }
      else
      {
        if (a3 <= 34892)
        {
          if (a3 != 34236)
          {
            if (a3 != 34892)
              goto LABEL_122;
            if (*(_BYTE *)(v8 + 3849) == 2)
              goto LABEL_122;
            if ((*(_BYTE *)(*(_QWORD *)(a1 + 29032) + 577) & 0x10) == 0)
              goto LABEL_122;
            v11 = *a4;
            if (*a4)
            {
              if (v11 != 34894)
                goto LABEL_122;
            }
            if (v11 == *(unsigned __int16 *)(result + 918))
              return result;
            *(_WORD *)(result + 918) = v11;
            goto LABEL_108;
          }
          v28 = *a4;
          if ((*a4 - 34237) < 3)
          {
            if (v28 == *(unsigned __int16 *)(result + 552))
              return result;
            v17 = 0;
            *(_WORD *)(result + 552) = v28;
            goto LABEL_112;
          }
LABEL_122:
          if (*(_WORD *)(v8 + 1180))
            return result;
          v25 = 1280;
          goto LABEL_124;
        }
        if (a3 != 34893)
          goto LABEL_122;
        if (*(_BYTE *)(v8 + 3849) == 2)
          goto LABEL_122;
        if ((*(_BYTE *)(*(_QWORD *)(a1 + 29032) + 577) & 0x10) == 0)
          goto LABEL_122;
        v29 = *a4;
        if ((*a4 & 0xFFFFFFF8) != 0x200)
          goto LABEL_122;
        if (v29 == *(unsigned __int16 *)(result + 916))
          return result;
        *(_WORD *)(result + 916) = v29;
      }
LABEL_108:
      v40 = *(unsigned __int8 *)(v8 + 3844);
      if (*(_BYTE *)(v8 + 3844))
      {
        v41 = (_BYTE *)(result + 480);
        do
        {
          *v41 |= 1u;
          v41 += 4;
          --v40;
        }
        while (v40);
      }
      v17 = 1;
LABEL_112:
      gfxUpdatePluginTextureLevelGeometry();
LABEL_113:
      *(_DWORD *)v8 = 0;
      *(_DWORD *)(a1 + 1548) |= 0x22000u;
      v21 = a1;
      v22 = v10;
      v23 = v17;
      return gleDirtyTextureObjectCurrentBindPointsData(v21, v22, v23);
    }
    switch(a3)
    {
      case 36418:
        if ((*(_BYTE *)(v8 + 3849) & 0xFE) == 2)
          goto LABEL_122;
        v13 = 0;
        switch(*a4)
        {
          case 6403:
            break;
          case 6404:
            v13 = 1;
            break;
          case 6405:
            v13 = 2;
            break;
          case 6406:
            v13 = 3;
            break;
          default:
            v13 = 4;
            break;
        }
        v50 = *(_WORD *)(result + 896);
        if ((v50 & 7) == v13)
          return result;
        v17 = 0;
        v47 = v50 & 0xFFF8 | v13;
        goto LABEL_151;
      case 36419:
        if ((*(_BYTE *)(v8 + 3849) & 0xFE) == 2)
          goto LABEL_122;
        v42 = 0;
        switch(*a4)
        {
          case 6403:
            break;
          case 6404:
            v42 = 1;
            break;
          case 6405:
            v42 = 2;
            break;
          case 6406:
            v42 = 3;
            break;
          default:
            v42 = 4;
            break;
        }
        v48 = *(unsigned __int16 *)(result + 896);
        if (((v48 >> 3) & 7) == v42)
          return result;
        v17 = 0;
        v47 = v48 & 0xFFC7 | (8 * v42);
        goto LABEL_151;
      case 36420:
        if ((*(_BYTE *)(v8 + 3849) & 0xFE) == 2)
          goto LABEL_122;
        v45 = 0;
        switch(*a4)
        {
          case 6403:
            break;
          case 6404:
            v45 = 1;
            break;
          case 6405:
            v45 = 2;
            break;
          case 6406:
            v45 = 3;
            break;
          default:
            v45 = 4;
            break;
        }
        v49 = *(unsigned __int16 *)(result + 896);
        if (((v49 >> 6) & 7) == v45)
          return result;
        v17 = 0;
        v47 = v49 & 0xFE3F | ((_WORD)v45 << 6);
        goto LABEL_151;
      case 36421:
        if ((*(_BYTE *)(v8 + 3849) & 0xFE) == 2)
          goto LABEL_122;
        v35 = 0;
        switch(*a4)
        {
          case 6403:
            break;
          case 6404:
            v35 = 1;
            break;
          case 6405:
            v35 = 2;
            break;
          case 6406:
            v35 = 3;
            break;
          default:
            v35 = 4;
            break;
        }
        v46 = *(unsigned __int16 *)(result + 896);
        if (((v46 >> 9) & 7) == v35)
          return result;
        v17 = 0;
        v47 = v46 & 0xF1FF | ((_WORD)v35 << 9);
LABEL_151:
        *(_WORD *)(result + 896) = v47;
        goto LABEL_112;
      case 36422:
        goto LABEL_122;
      default:
        if (a3 == 35455)
        {
          v43 = *a4;
          if (*a4 >= 2)
            goto LABEL_122;
          v44 = *(unsigned __int8 *)(result + 898);
          if (v43 != ((v44 >> 2) & 1))
          {
            v17 = 0;
            *(_BYTE *)(result + 898) = v44 & 0xFB | (4 * (v43 & 1));
            goto LABEL_112;
          }
        }
        else
        {
          if (a3 != 35741 || *(_BYTE *)(v8 + 3849) != 2)
            goto LABEL_122;
          if (*(_DWORD *)(result + 740) != *a4
            || *(_DWORD *)(result + 744) != a4[1]
            || *(_DWORD *)(result + 748) != a4[2]
            || *(_DWORD *)(result + 752) != a4[3])
          {
            *(_DWORD *)(result + 740) = *a4;
            *(_DWORD *)(result + 744) = a4[1];
            *(_DWORD *)(result + 748) = a4[2];
            *(_DWORD *)(result + 752) = a4[3];
          }
        }
        break;
    }
    return result;
  }
  if (a3 > 32881)
  {
    if (a3 > 33081)
    {
      switch(a3)
      {
        case 33082:
          if ((*(_BYTE *)(v8 + 3849) & 0xFE) == 2)
            goto LABEL_122;
          v12 = (float)*a4;
          if (*(float *)(result + 932) != v12)
          {
            *(float *)(result + 932) = v12;
            goto LABEL_108;
          }
          break;
        case 33083:
          if ((*(_BYTE *)(v8 + 3849) & 0xFE) == 2)
            goto LABEL_122;
          v27 = (float)*a4;
          if (*(float *)(result + 936) != v27)
          {
            *(float *)(result + 936) = v27;
            goto LABEL_108;
          }
          break;
        case 33084:
          if ((*(_BYTE *)(v8 + 3849) & 0xFE) == 2)
            goto LABEL_122;
          v24 = *a4;
          if (*a4 < 0 || a2 == 34037 && v24)
            goto LABEL_60;
          if (*(_DWORD *)(result + 884) != v24)
          {
            if (v24)
              *(_BYTE *)(result + 558) = 1;
            v26 = *(_DWORD *)(result + 888);
            goto LABEL_68;
          }
          break;
        case 33085:
          v26 = *a4;
          if (*a4 < 0)
            goto LABEL_60;
          if (*(_DWORD *)(result + 888) != v26)
          {
            if (v26 && v26 != 1000)
              *(_BYTE *)(result + 558) = 1;
            v24 = *(_DWORD *)(result + 884);
LABEL_68:
            gleEvaluateTextureParameterChange(a1, result, v24, v26, (*(_BYTE *)(result + 898) & 2) != 0, *(_BYTE *)(result + 898) & 1);
            v17 = 0;
            *(_DWORD *)(a1 + 1548) |= 0x8000000u;
            goto LABEL_113;
          }
          break;
        default:
          if (a3 != 33169)
            goto LABEL_122;
          if (*(unsigned __int8 *)(v8 + 3849) - 3 < 2)
            goto LABEL_122;
          v19 = *a4;
          if (*a4 >= 2)
            goto LABEL_122;
          v20 = *(_BYTE *)(result + 898);
          if (v19 != (v20 & 1))
          {
            if (v19)
              *(_BYTE *)(result + 558) = 1;
            gleEvaluateTextureParameterChange(a1, result, *(_DWORD *)(result + 884), *(_DWORD *)(result + 888), (v20 & 2) != 0, v19);
            goto LABEL_55;
          }
          break;
      }
      return result;
    }
    if (a3 != 32882)
    {
      if (a3 == 32959)
      {
        v18 = fminf(fmaxf((float)*a4, *(float *)(a1 + 288)), *(float *)(a1 + 292));
        if (*(float *)(result + 892) == v18)
          return result;
        *(float *)(result + 892) = v18;
        gfxUpdatePluginTextureLevelGeometry();
LABEL_55:
        *(_DWORD *)v8 = 0;
        *(_DWORD *)(a1 + 1548) |= 0x22000u;
        v21 = a1;
        v22 = v10;
        v23 = 0;
        return gleDirtyTextureObjectCurrentBindPointsData(v21, v22, v23);
      }
      goto LABEL_122;
    }
    if ((*(_BYTE *)(v8 + 3849) & 0xFE) == 2)
      goto LABEL_122;
    v31 = *a4;
    if (*a4 == 10497)
      goto LABEL_85;
    if (v31 <= 34625)
    {
      if (v31 != 33071)
      {
        v53 = 33648;
LABEL_187:
        if (v31 != v53)
          goto LABEL_122;
        goto LABEL_85;
      }
    }
    else
    {
      if ((v31 - 34626) < 2)
      {
LABEL_85:
        if (a2 == 34037)
          goto LABEL_122;
        v32 = *(_BYTE *)(result + 557) | 0x40;
        goto LABEL_87;
      }
      if (v31 != 37905)
      {
        v53 = 35090;
        goto LABEL_187;
      }
    }
    v32 = *(_BYTE *)(result + 557) & 0xBF;
LABEL_87:
    *(_BYTE *)(result + 557) = v32;
    if (v31 == *(unsigned __int16 *)(result + 924))
      return result;
    *(_WORD *)(result + 924) = v31;
    goto LABEL_108;
  }
  switch(a3)
  {
    case 10240:
      v14 = *a4;
      if (*a4 == 9729)
        goto LABEL_25;
      if (v14 == 35416)
      {
        if ((*(_BYTE *)(*(_QWORD *)(a1 + 29480) + 579) & 1) == 0)
          goto LABEL_122;
LABEL_25:
        v15 = *(_BYTE *)(result + 557) | 4;
      }
      else
      {
        if (v14 != 9728)
          goto LABEL_122;
        v15 = *(_BYTE *)(result + 557) & 0xFB;
      }
      *(_BYTE *)(result + 557) = v15;
      if (v14 != *(unsigned __int16 *)(result + 914))
      {
        *(_WORD *)(result + 914) = v14;
        goto LABEL_108;
      }
      return result;
    case 10241:
      v38 = *a4;
      if ((*a4 - 9985) < 3)
      {
        if (a2 == 34037)
          goto LABEL_122;
        v39 = *(_BYTE *)(result + 557) | 0xA;
LABEL_105:
        *(_BYTE *)(result + 557) = v39;
        *(_BYTE *)(result + 558) = 1;
        goto LABEL_106;
      }
      if (v38 > 9983)
      {
        if (v38 != 35416)
        {
          if (v38 != 9984 || a2 == 34037)
            goto LABEL_122;
          v39 = *(_BYTE *)(result + 557) & 0xF5 | 2;
          goto LABEL_105;
        }
        if ((*(_BYTE *)(*(_QWORD *)(a1 + 29480) + 579) & 1) == 0)
          goto LABEL_122;
      }
      else
      {
        if (v38 == 9728)
        {
          v54 = *(_BYTE *)(result + 557) & 0xF5;
          goto LABEL_195;
        }
        if (v38 != 9729)
          goto LABEL_122;
      }
      v54 = *(_BYTE *)(result + 557) & 0xF5 | 8;
LABEL_195:
      *(_BYTE *)(result + 557) = v54;
LABEL_106:
      if (v38 != *(unsigned __int16 *)(result + 912))
      {
        *(_WORD *)(result + 912) = v38;
        goto LABEL_108;
      }
      return result;
    case 10242:
      v33 = *a4;
      if (*a4 == 10497)
        goto LABEL_90;
      if (v33 <= 34625)
      {
        if (v33 != 33071)
        {
          v51 = 33648;
LABEL_173:
          if (v33 != v51)
            goto LABEL_122;
LABEL_90:
          if (a2 == 34037)
            goto LABEL_122;
          v34 = *(_BYTE *)(result + 557) | 0x10;
LABEL_92:
          *(_BYTE *)(result + 557) = v34;
          if (v33 != *(unsigned __int16 *)(result + 920))
          {
            *(_WORD *)(result + 920) = v33;
            goto LABEL_108;
          }
          return result;
        }
      }
      else
      {
        if ((v33 - 34626) < 2)
          goto LABEL_90;
        if (v33 != 37905)
        {
          v51 = 35090;
          goto LABEL_173;
        }
      }
      v34 = *(_BYTE *)(result + 557) & 0xEF;
      goto LABEL_92;
    case 10243:
      v36 = *a4;
      if (*a4 == 10497)
        goto LABEL_98;
      if (v36 > 34625)
      {
        if ((v36 - 34626) < 2)
          goto LABEL_98;
        if (v36 != 37905)
        {
          v52 = 35090;
          goto LABEL_177;
        }
LABEL_184:
        v37 = *(_BYTE *)(result + 557) & 0xDF;
        goto LABEL_100;
      }
      if (v36 == 33071)
        goto LABEL_184;
      v52 = 33648;
LABEL_177:
      if (v36 != v52)
        goto LABEL_122;
LABEL_98:
      if (a2 == 34037)
        goto LABEL_122;
      v37 = *(_BYTE *)(result + 557) | 0x20;
LABEL_100:
      *(_BYTE *)(result + 557) = v37;
      if (v36 != *(unsigned __int16 *)(result + 922))
      {
        *(_WORD *)(result + 922) = v36;
        goto LABEL_108;
      }
      return result;
    default:
      if (a3 != 10495)
        goto LABEL_122;
      *(_BYTE *)(result + 792) = (4 * (*(_BYTE *)a4 & 1)) | *(_BYTE *)(result + 792) & 0xFB;
      return result;
  }
}

uint64_t gleLookUpNonProxyTexture(uint64_t a1, int a2)
{
  uint64_t result;
  _BYTE *v4;
  uint64_t v5;
  unsigned int v6;
  _QWORD *v7;

  result = 0;
  v4 = (_BYTE *)(a1 + 32501);
  v5 = a1 + 20776;
  v6 = *(unsigned __int16 *)(a1 + 23768);
  if (a2 <= 34068)
  {
    if (a2 == 3553)
    {
      v7 = (_QWORD *)(v5 + 88 * v6 + 24);
    }
    else
    {
      if (a2 != 32879)
        return result;
      if ((*v4 & 0xFE) == 2)
        return 0;
      v7 = (_QWORD *)(v5 + 88 * v6 + 8);
    }
  }
  else if ((a2 - 34069) >= 6)
  {
    if (a2 != 35866)
      return result;
    if ((*v4 & 0xFE) == 2)
      return 0;
    v7 = (_QWORD *)(v5 + 88 * v6 + 40);
  }
  else
  {
    if (*v4 == 2)
      return 0;
    v7 = (_QWORD *)(v5 + 88 * v6);
  }
  return *v7 + 40;
}

_BYTE *glTexImage2D_Exec(_BYTE *result, int a2, uint64_t a3, int a4, int a5, unsigned int a6, int a7, unsigned int a8, unsigned int a9, uint64_t a10)
{
  unsigned int v10;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  __int16 v24;
  __int16 v25;
  unsigned int v26;
  double v27;
  double v28;
  double v29;
  unsigned int v30;
  unsigned int v31;
  int MatrixIdentifier;
  unsigned int v33;
  unsigned int v34;
  _DWORD *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  int v41;
  int v42;
  _BYTE *v43;
  __int16 v44;
  uint64_t v45;
  char v46;
  _BYTE *v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  _BOOL4 v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  int v61;
  int v62;
  _BYTE *v63;
  _BOOL4 v64;
  int v65;
  int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  _BOOL4 v72;
  int v73;
  char v74;
  uint64_t v75;
  int v76;
  unsigned int v77;
  _BYTE *v78;
  uint64_t v79;
  int v80;
  _BYTE *v83;
  _BYTE *v84;
  unint64_t v85;

  v10 = a8;
  v15 = (uint64_t)result;
  v16 = a10;
  v17 = result + 29832;
  v18 = result + 18504;
  v84 = result + 29832;
  if (!a10 && result[18518])
  {
    if (*v17)
      return result;
    v24 = 1281;
LABEL_17:
    *(_WORD *)v84 = v24;
    return result;
  }
  v83 = result + 18504;
  if (result[32501] == 3 && ((a4 & 0xFFFFFFFD) == 0x8C40 || (a8 | 2) == 0x8C42))
  {
    if (a4 != a8)
    {
      if (*v17)
        return result;
LABEL_16:
      v24 = 1282;
      goto LABEL_17;
    }
    if (a8 == 35904)
      v10 = 6407;
    else
      v10 = 6408;
  }
  v85 = 0;
  result = (_BYTE *)gleCheckTexImage2DArgs((uint64_t)result, a2, a3, a4, a5, a6, a7, v10, a9, &v85);
  if (result)
  {
    v19 = (uint64_t)result;
    if (!result[770])
    {
      v80 = a5;
      v20 = *(_QWORD *)(v15 + 19336);
      v79 = v20;
      if (v20)
      {
        v21 = gleOffsetLimitStorage((int *)(v15 + 18484), v80, a6, v85, a10);
        v22 = v20;
        v23 = v80;
        result = (_BYTE *)gleHandleUnpackBufferInEngineNoSync(v15, v22, v21, (BYTE4(v85) & 0x1F) + 1, a10);
        v16 = (uint64_t)result;
        if (!result)
          return result;
      }
      else
      {
        v23 = v80;
      }
      if (v84[2671])
        result = (_BYTE *)mach_absolute_time();
      else
        result = 0;
      v25 = *(_WORD *)(v19 + 768);
      if ((v25 & 0x1C00) == 0x1000)
        goto LABEL_28;
      if ((*(_WORD *)(v19 + 768) & 0x1C00) == 0)
      {
        *(_WORD *)(v19 + 768) = v25 | 0x1000;
        goto LABEL_28;
      }
      if ((*(_WORD *)(v19 + 768) & 0xC00) == 0)
      {
LABEL_28:
        v78 = result;
        v26 = gleStandardizeIntegerFormat(v10);
        if ((*(_BYTE *)(v15 + 1540) & 4) != 0)
        {
          v31 = v26;
          MatrixIdentifier = gleGenerateMatrixIdentifier(v15, v15 + 9488, v27, v28, v29);
          v26 = v31;
          v30 = *((_DWORD *)v18 + 162) & 0xFFFFFEFF | ((MatrixIdentifier != -1074791426) << 8);
          *((_DWORD *)v18 + 162) = v30;
          *((_DWORD *)v18 + 2807) = MatrixIdentifier;
        }
        else
        {
          v30 = *((_DWORD *)v18 + 162);
        }
        v33 = v23;
        v34 = a6;
        if ((v30 & 6) != 0)
        {
          if ((v30 & 2) != 0)
          {
            v33 = v23;
            v34 = a6;
            if (*((unsigned __int16 *)v18 + 176) != 32790)
              goto LABEL_39;
            v33 = v23 - *((_DWORD *)v18 + 92) + 1;
            v35 = v18 + 372;
          }
          else
          {
            v33 = v23;
            v34 = a6;
            if ((v30 & 4) == 0)
              goto LABEL_39;
            v33 = v23;
            v34 = a6;
            if (*((unsigned __int16 *)v18 + 212) != 32790)
              goto LABEL_39;
            v33 = v23 - *((_DWORD *)v18 + 110) + 1;
            v35 = v18 + 444;
          }
          v34 = a6 - *v35 + 1;
        }
LABEL_39:
        if (v34)
          v36 = v33;
        else
          v36 = 0;
        if (v34)
          v37 = a7;
        else
          v37 = 0;
        if ((a2 - 34069) >= 6)
          v38 = 0;
        else
          v38 = (a2 - 34069);
        v39 = (int *)(v19 + 480 * v38 + 32 * (int)a3 + 1032);
        LOWORD(v68) = 256;
        v77 = v26;
        v67 = a4;
        v40 = v36;
        v41 = gleEvaluateTextureImageChange(v15, v19, (uint64_t)v39, v38, a3, v36, v34, 1, v37, v67, v26, a9, v68, v16);
        v42 = v41;
        if (!(_DWORD)v40)
        {
          result = 0;
          v47 = v84;
          goto LABEL_95;
        }
        v43 = v83;
        if (!v16
          || (v44 = *(_WORD *)(v19 + 768), (v44 & 0x100) != 0)
          || !*(_BYTE *)(*(_QWORD *)(v15 + 29032) + 174)
          || a9 == 6656 && (*v83 & 7) != 0
          || (*(_BYTE *)(v19 + 480 * v38 + 32 * (int)a3 + 1043) & 1) != 0
          || *(unsigned __int8 *)(v19 + 976) > (int)a3
          || *(unsigned __int8 *)(v19 + 978) < (int)a3
          || ((*(unsigned __int16 *)(v19 + 2 * v38 + 984) >> a3) & 1) == 0)
        {
          v47 = v84;
          if (v79 && *(_QWORD *)(v79 + 192))
          {
            v48 = v41;
            gleSynchronizeBufferOnCurrentDevicesForRead(v15, v79 + 40);
            v42 = v48;
            v43 = v83;
          }
          v49 = 0;
          if (!v16)
            goto LABEL_89;
        }
        else
        {
          v45 = v79;
          v76 = v41;
          if ((*(_BYTE *)(v19 + 898) & 1) != 0)
          {
            v73 = 0;
            v46 = 1;
            if (*(_DWORD *)(v19 + 884) == (_DWORD)a3 && (v44 & 0xF) != 2)
            {
              gleGenerateEmptyMipmaps(v15, v19, v38, a3, *(unsigned __int8 *)(v19 + 975), 0, 0);
              v45 = v79;
              v43 = v83;
              v46 = 0;
              v73 = 1;
            }
          }
          else
          {
            v73 = 0;
            v46 = 1;
          }
          v74 = v46;
          v53 = *(_QWORD *)(v15 + 8 * *((unsigned __int16 *)v43 + 2632) + 23936);
          if (v53)
            v54 = (_BYTE *)(v53 + 198);
          else
            v54 = (_BYTE *)(v19 + 926);
          v55 = (*v54 & 1) == 0;
          v56 = *(__int16 *)(v19 + 982);
          v57 = (v56 >> 15);
          v58 = (((v56 >> 13) & 1) - 1) & (v56 >> 15);
          v59 = v77;
          *(_WORD *)(v19 + 968) = v77;
          *(_WORD *)(v19 + 970) = a9;
          if (v45)
          {
            v71 = v45 + 40;
            v70 = v56 >> 15;
            v60 = (((v56 >> 13) & 1) - 1) & (v56 >> 15);
            v72 = v55;
            result = (_BYTE *)(*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v15 + 29448)
                                                                                          + 368))(*(_QWORD *)(v15 + 29016), *(_QWORD *)(v19 + 8 * v84[2667]), v38, a3);
            if ((_DWORD)result)
              goto LABEL_83;
            v59 = v77;
            v40 = v40;
            v57 = v70;
            v58 = v60;
            v55 = v72;
            if (*(_QWORD *)(v79 + 192))
            {
              gleSynchronizeBufferOnCurrentDevicesForRead(v15, v71);
              v55 = v72;
              v58 = v60;
              v57 = v70;
              v59 = v77;
            }
          }
          result = (_BYTE *)(*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unint64_t, uint64_t, _DWORD, _QWORD, _BOOL4))(*(_QWORD *)(v15 + 29448) + 368))(*(_QWORD *)(v15 + 29016), *(_QWORD *)(v19 + 8 * v84[2667]), v38, a3, v57, v58, 0, v40, v34 | 0x100000000, __PAIR64__(a9, v59), v16, 0, 0, v55);
          if ((_DWORD)result)
          {
LABEL_83:
            *(_QWORD *)(v19 + 536) = *(_QWORD *)(v15 + 29024);
            v75 = v19 + 480 * v38 + 32 * (int)a3;
            *(_BYTE *)(v75 + 1043) |= 0x40u;
            if ((v74 & 1) != 0)
            {
              v43 = v83;
              v47 = v84;
            }
            else
            {
              v61 = *(unsigned __int8 *)(v19 + 975);
              v62 = a3;
              v43 = v83;
              v47 = v84;
              if (v61 > (int)a3)
              {
                v63 = (_BYTE *)(32 * (a3 + 1) + 480 * v38 + v19 + 1043);
                do
                {
                  *v63 |= 0x40u;
                  v63 += 32;
                  ++v62;
                }
                while (v62 < v61);
                v42 = v76;
LABEL_97:
                if ((v42 & 0xC0000001) != 0)
                {
                  if (v42 < 0)
                    v66 = 134356992;
                  else
                    v66 = 139264;
                  *((_DWORD *)v43 + 2537) = 0;
                  *(_DWORD *)(v15 + 1548) |= v66;
                }
                else if ((_DWORD)result == 1)
                {
                  goto LABEL_104;
                }
                result = (_BYTE *)gleDirtyTextureLevelCurrentBindPointsGeom(v15, v19, v39);
LABEL_104:
                if (v47[2671])
                {
                  result = (_BYTE *)mach_absolute_time();
                  *(_QWORD *)(v15 + 19168) += result - v78;
                }
                return result;
              }
            }
            v42 = v76;
            goto LABEL_97;
          }
          v43 = v83;
          v47 = v84;
          v42 = v76;
          v23 = v80;
          v49 = v73;
        }
        if ((*(_WORD *)(v19 + 768) & 0x100) == 0)
        {
          v50 = v42;
          v51 = v19 + 480 * v38 + 32 * (int)a3;
          if ((*(_BYTE *)(v51 + 1043) & 1) != 0 || gfxAllocateTextureLevel())
          {
            LOBYTE(v69) = 1;
            gleTextureImagePut((_DWORD *)v15, v19, (uint64_t)v39, 0, 0, 0, v23, a6, 1, v85, v69, v15 + 18484, v16);
            *(_DWORD *)(v19 + 968) = *(_DWORD *)(v19 + 480 * v38 + 32 * (int)a3 + 1048);
            *(_BYTE *)(v51 + 1043) |= 0x10u;
            *(_WORD *)(v19 + 2 * v38 + 996) |= *(_WORD *)(v19 + 2 * v38 + 984) & (unsigned __int16)(1 << a3);
            v47 = v84;
            v52 = v19 + 24 * v84[2667];
            *(_BYTE *)(v52 + 116) |= 4u;
            *(_WORD *)(v52 + 2 * v38 + 104) |= 1 << a3;
          }
          else
          {
            v47 = v84;
            if (!*(_WORD *)v84)
              *(_WORD *)v84 = 1285;
          }
          v43 = v83;
          v42 = v50;
          goto LABEL_90;
        }
LABEL_89:
        *(_DWORD *)(v19 + 968) = 65538;
LABEL_90:
        if (!*(_QWORD *)(v19 + 480 * v38 + 32 * (int)a3 + 1056)
          && (*(_WORD *)(v19 + 768) & 0x100) == 0
          || (*(_BYTE *)(v19 + 898) & 1) == 0
          || *(_DWORD *)(v19 + 884) != (_DWORD)a3)
        {
          result = 0;
          goto LABEL_97;
        }
        v64 = v49 == 0;
        v65 = v42;
        result = (_BYTE *)gleGenMipmaps(v15, v19, v38, a3, 1, v64);
        v42 = v65;
LABEL_95:
        v43 = v83;
        goto LABEL_97;
      }
      if (*(_WORD *)v84)
        return result;
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t gleLookUpTexture2D(uint64_t a1, int a2)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 20776;
  if ((a2 - 34069) >= 6)
  {
    if (a2 == 3553)
    {
      v3 = (_QWORD *)(v2 + 88 * *(unsigned __int16 *)(a1 + 23768) + 24);
      return *v3 + 40;
    }
  }
  else if (*(_BYTE *)(a1 + 32501) != 2)
  {
    v3 = (_QWORD *)(v2 + 88 * *(unsigned __int16 *)(a1 + 23768));
    return *v3 + 40;
  }
  return 0;
}

uint64_t gleCheckTexImageArgs(uint64_t a1, unsigned int a2, int a3, int a4, unint64_t a5, int a6, int a7)
{
  unsigned int v7;
  __int16 *v8;
  uint64_t v9;
  __int16 v10;
  int v11;
  int v12;
  int v14;

  v7 = a5;
  v8 = (__int16 *)(a1 + 29832);
  if ((a5 & 0x800000000000000) == 0)
  {
    v9 = (unsigned __int16)*v8;
    if (*v8)
      return 0;
    if ((a5 & 0x4000000000000000) != 0)
      v10 = 1282;
    else
      v10 = 1280;
    goto LABEL_7;
  }
  if (a2 >= 0xF || a6)
  {
    v9 = (unsigned __int16)*v8;
    if (*v8)
      return 0;
    v10 = 1281;
LABEL_7:
    *v8 = v10;
    return v9;
  }
  if (a3 > 35447)
  {
    switch(a3)
    {
      case 35448:
        v11 = *(unsigned __int8 *)(a1 + 32501);
        if (a4 == 6403 && v11 == 4)
          return 1;
        goto LABEL_39;
      case 35904:
        v11 = *(unsigned __int8 *)(a1 + 32501);
        if (v11 != 2 && v11 != 4 && (*(_BYTE *)(*(_QWORD *)(a1 + 29032) + 577) & 0x20) != 0)
        {
          v12 = 6407;
LABEL_29:
          if (a4 == v12)
            return 1;
          goto LABEL_39;
        }
LABEL_49:
        v9 = (unsigned __int16)*v8;
        if (*v8)
          return 0;
        v10 = 1280;
        goto LABEL_7;
      case 35906:
        v11 = *(unsigned __int8 *)(a1 + 32501);
        if (v11 != 2 && v11 != 4 && (*(_BYTE *)(*(_QWORD *)(a1 + 29032) + 577) & 0x20) != 0)
        {
          v12 = 6408;
          goto LABEL_29;
        }
        goto LABEL_49;
    }
LABEL_38:
    LOBYTE(v11) = *(_BYTE *)(a1 + 32501);
LABEL_39:
    if (a3 != a4 && (v11 & 0xFE) == 2)
      goto LABEL_51;
    v14 = 0;
    if (!gleCheckTexFormatArgs(a1, a3, a4, a5, a7, &v14))
      return 0;
    if (v14 != v7 >> 31)
    {
LABEL_51:
      v9 = (unsigned __int16)*v8;
      if (*v8)
        return 0;
      v10 = 1282;
      goto LABEL_7;
    }
    return 1;
  }
  if (a3 != 6407)
  {
    if (a3 == 6408)
    {
      if (a4 == 32993)
        return 1;
      v11 = *(unsigned __int8 *)(a1 + 32501);
      if ((a4 - 37903) <= 1 && (v11 - 3) < 2)
        return 1;
      goto LABEL_39;
    }
    goto LABEL_38;
  }
  v11 = *(unsigned __int8 *)(a1 + 32501);
  if ((v11 - 3) > 1)
    goto LABEL_39;
  v9 = 1;
  if (((a4 - 35429) > 0xF || ((1 << (a4 - 101)) & 0xFCFF) == 0)
    && ((a4 - 37875) > 0x1B || ((1 << (a4 + 13)) & 0x800073F) == 0)
    && a4 != 35359)
  {
    goto LABEL_39;
  }
  return v9;
}

uint64_t gleCreateTextureLevel(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, char a8, unsigned int a9, unsigned int a10, uint64_t a11)
{
  __int16 v11;
  __int16 v12;
  int v15;
  char v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v11 = a6;
  v12 = a5;
  if ((*(_BYTE *)(a3 + 11) & 0x40) != 0)
    ++*(_DWORD *)(*(_QWORD *)(result + 19296) + 316);
  if (a5 && a6 && a7)
  {
    if (!*(_BYTE *)(a2 + 554))
    {
      *(_BYTE *)(a2 + 554) = 1;
      v15 = *(unsigned __int16 *)(a2 + 552);
      *(_WORD *)(a2 + 880) = v15;
      if (v15 == 34237 && *(float *)(a2 + 776) == 0.0)
        *(_WORD *)(a2 + 880) = -31298;
    }
    *(_WORD *)(a3 + 4) = a5;
    *(_WORD *)(a3 + 6) = a6;
    *(_WORD *)(a3 + 8) = a7;
    *(_BYTE *)(a3 + 10) = a8;
    if ((*(_BYTE *)(a2 + 769) & 1) != 0)
    {
      *(_BYTE *)(a3 + 11) = 32;
      *(_WORD *)(a3 + 16) = a9;
      *(_WORD *)(a3 + 18) = a10;
      *(_DWORD *)(a3 + 12) = 0;
      *(_DWORD *)a3 = 0;
      *(_QWORD *)(a3 + 24) = 0;
    }
    else
    {
      if (a9 == 6400
        || !a11
        || !*(_BYTE *)(result + 18518)
        || *(_BYTE *)(result + 18516)
        || (*(_WORD *)(result + 19152) & 0x1FF) != 0
        || (*(_DWORD *)(result + 19160) & 0xFF0FF1) != 0)
      {
        goto LABEL_27;
      }
      v20 = 0;
      v21 = 0;
      if ((*(_WORD *)(a2 + 982) & 0x1800) == 0x1000)
      {
        v16 = 4;
      }
      else
      {
        v16 = 3;
        if ((*(_WORD *)(a2 + 982) & 0x2000) != 0)
        {
          if ((*(_WORD *)(a2 + 982) & 0x600) != 0)
            v16 = 4;
          else
            v16 = 3;
        }
      }
      result = glePixelPackSettings(result, a9, a10, a5, a6, (int *)(result + 18484), (_DWORD *)&v21 + 1, &v21, (_DWORD *)&v20 + 1, (int *)&v20, v16);
      v17 = HIDWORD(v20);
      v18 = HIDWORD(v20) / HIDWORD(v21);
      if (HIDWORD(v20) % HIDWORD(v21))
      {
LABEL_27:
        *(_BYTE *)(a3 + 11) = 32;
        *(_WORD *)(a3 + 12) = v12;
        *(_WORD *)(a3 + 14) = v11;
        *(_QWORD *)(a3 + 24) = 0;
        return gleTexLevelStorage(a4, a9, a10, (__int16 *)(a3 + 16), (_WORD *)(a3 + 18));
      }
      else
      {
        v19 = v21 + a11;
        *(_BYTE *)(a3 + 11) = 33;
        *(_WORD *)(a3 + 14) = v20 / v17;
        *(_QWORD *)(a3 + 24) = v19;
        *(_WORD *)(a3 + 16) = a9;
        *(_WORD *)(a3 + 18) = a10;
        if (!(_WORD)a10)
          LOWORD(v18) = v12;
        *(_WORD *)(a3 + 12) = v18;
      }
    }
  }
  else
  {
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = 0;
  }
  return result;
}

uint64_t glTexSubImage2D_Exec(uint64_t a1, int a2, uint64_t a3, unsigned int a4, int a5, uint64_t a6, unsigned int a7, unsigned int a8, int a9, uint64_t a10)
{
  uint64_t result;
  unsigned int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  double v26;
  double v27;
  double v28;
  int MatrixIdentifier;
  uint64_t v30;
  uint64_t v31;
  _BOOL4 v32;
  uint64_t v33;
  _BYTE *v34;
  _BOOL4 v35;
  uint64_t v36;
  char *v37;
  char v38;
  int v39;
  unsigned int v40;
  _BOOL4 v41;
  unsigned int v42;
  char *v43;
  char v44;
  int v45;
  _BYTE *v46;
  uint64_t v47;
  _BOOL4 v48;
  char v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  unint64_t v58;

  v57 = a1 + 29832;
  v58 = 0;
  if (*(_BYTE *)(a1 + 32501) == 3)
  {
    result = gleLookUpNonProxyTexture2D(a1, a2);
    if (result)
    {
      v19 = a2 - 34069;
      if ((a2 - 34069) >= 6)
        v19 = 0;
      if ((v20 = *(unsigned __int16 *)(result + 30 * v19 + 2 * (int)a3 + 560), a8 != 35904) && v20 == 35905
        || a8 != 35906 && v20 == 35907)
      {
        if (!*(_WORD *)v57)
          *(_WORD *)v57 = 1282;
        return result;
      }
    }
    if (a8 == 35906)
      v21 = 6408;
    else
      v21 = a8;
    if (a8 == 35904)
      a8 = 6407;
    else
      a8 = v21;
  }
  v56 = a5;
  result = gleCheckTexSubImage2DArgs(a1, a2, a3, a4, a5, a6, a7, a8, a9, &v58);
  if (result)
  {
    v22 = result;
    if (!*(_BYTE *)(result + 770))
    {
      v23 = a10;
      v24 = *(_QWORD *)(a1 + 19336);
      v55 = v24;
      if (!v24
        || (v53 = result,
            v25 = gleOffsetLimitStorage((int *)(a1 + 18484), a6, a7, v58, a10),
            v22 = v53,
            result = gleHandleUnpackBufferInEngineNoSync(a1, v24, v25, (BYTE4(v58) & 0x1F) + 1, a10),
            (v23 = result) != 0))
      {
        if ((_DWORD)a6 && a7)
        {
          v52 = v23;
          if (*(_BYTE *)(v57 + 2671))
            v51 = mach_absolute_time();
          else
            v51 = 0;
          v54 = gleStandardizeIntegerFormat(a8);
          if ((*(_BYTE *)(a1 + 1540) & 4) != 0)
          {
            MatrixIdentifier = gleGenerateMatrixIdentifier(a1, a1 + 9488, v26, v27, v28);
            *(_DWORD *)(a1 + 19152) = *(_DWORD *)(a1 + 19152) & 0xFFFFFEFF | ((MatrixIdentifier != -1074791426) << 8);
            *(_DWORD *)(a1 + 29732) = MatrixIdentifier;
          }
          if ((a2 - 34069) >= 6)
            v30 = 0;
          else
            v30 = (a2 - 34069);
          if (a9 == 6656 && (*(_BYTE *)(a1 + 18504) & 7) != 0)
          {
            v31 = v22 + 480 * v30 + 32 * (int)a3 + 1032;
            v32 = 0;
          }
          else
          {
            v31 = v22 + 480 * v30 + 32 * (int)a3 + 1032;
            v32 = checkFastPath(a1, v31, a4, v56, 0, a6, a7, v58, v52, 2) != 0;
          }
          if (!*(_QWORD *)(v22 + 536) && (*(_WORD *)(v22 + 768) & 0x800) == 0)
            gfxWaitTextureOnDevices();
          if (v32
            && *(unsigned __int8 *)(v22 + 976) <= (int)a3
            && *(unsigned __int8 *)(v22 + 978) >= (int)a3
            && ((1 << a3) & *(unsigned __int16 *)(v22 + 2 * v30 + 984)) != 0)
          {
            v33 = *(_QWORD *)(a1 + 8 * *(unsigned __int16 *)(a1 + 23768) + 23936);
            if (v33)
              v34 = (_BYTE *)(v33 + 198);
            else
              v34 = (_BYTE *)(v22 + 926);
            v35 = (*v34 & 1) == 0;
            if ((*(_BYTE *)(v22 + 898) & 1) != 0)
            {
              v36 = v31;
              if (*(_DWORD *)(v22 + 884) == (_DWORD)a3 && (*(_WORD *)(v22 + 768) & 0xF) != 2)
              {
                v41 = (*v34 & 1) == 0;
                gleGenerateEmptyMipmaps(a1, v22, v30, a3, *(unsigned __int8 *)(v22 + 975), 0, 0);
                v35 = v41;
                v49 = 0;
                v50 = 1;
              }
              else
              {
                v49 = 1;
                v50 = 0;
              }
            }
            else
            {
              v49 = 1;
              v50 = 0;
              v36 = v31;
            }
            *(_WORD *)(v22 + 968) = v54;
            *(_WORD *)(v22 + 970) = a9;
            v42 = v54;
            if (v55)
            {
              v48 = v35;
              result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, unint64_t, uint64_t, _DWORD, _QWORD, _BOOL4))(*(_QWORD *)(a1 + 29448) + 368))(*(_QWORD *)(a1 + 29016), *(_QWORD *)(v22 + 8 * *(unsigned __int8 *)(v57 + 2667)), v30, a3, a4, v56, 0, a6, a7 | 0x100000000, __PAIR64__(a9, v54), v52, 0, *(_QWORD *)(v55 + 40 + 8 * *(unsigned __int8 *)(v57 + 2667)), v35);
              if ((_DWORD)result)
                goto LABEL_83;
              v35 = v48;
              v42 = v54;
              if (*(_QWORD *)(v55 + 192))
              {
                gleSynchronizeBufferOnCurrentDevicesForRead(a1, v55 + 40);
                v42 = v54;
                v35 = v48;
              }
            }
            result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, unint64_t, uint64_t, _DWORD, _QWORD, _BOOL4))(*(_QWORD *)(a1 + 29448) + 368))(*(_QWORD *)(a1 + 29016), *(_QWORD *)(v22 + 8 * *(unsigned __int8 *)(v57 + 2667)), v30, a3, a4, v56, 0, a6, a7 | 0x100000000, __PAIR64__(a9, v42), v52, 0, 0, v35);
            if ((_DWORD)result)
            {
LABEL_83:
              if ((*(_WORD *)(v22 + 768) & 0x800) == 0)
              {
                *(_QWORD *)(v22 + 536) = *(_QWORD *)(a1 + 29024);
                v43 = (char *)(v22 + 480 * v30 + 32 * (int)a3 + 1043);
                v44 = *v43;
                if ((*v43 & 0x10) != 0)
                {
                  if ((*v43 & 9) == 0)
                  {
                    result = gfxFreeTextureLevel();
                    v44 = *v43;
                  }
                  v44 &= ~0x10u;
                  *(_WORD *)(v22 + 2 * v30 + 996) &= ~(unsigned __int16)(1 << a3);
                }
                *v43 = v44 | 0x40;
                if ((v49 & 1) == 0)
                {
                  v45 = *(unsigned __int8 *)(v22 + 975);
                  if (v45 > (int)a3)
                  {
                    v46 = (_BYTE *)(32 * a3 + 480 * v30 + v22 + 1075);
                    do
                    {
                      *v46 |= 0x40u;
                      v46 += 32;
                      LODWORD(a3) = a3 + 1;
                    }
                    while ((int)a3 < v45);
                  }
                }
              }
LABEL_70:
              if (*(_BYTE *)(v57 + 2671))
              {
                result = mach_absolute_time();
                *(_QWORD *)(a1 + 19168) += result - v51;
              }
              return result;
            }
          }
          else if (v24)
          {
            v36 = v31;
            if (*(_QWORD *)(v24 + 192))
              gleSynchronizeBufferOnCurrentDevicesForRead(a1, v24 + 40);
            v50 = 0;
          }
          else
          {
            v50 = 0;
            v36 = v31;
          }
          v37 = (char *)(v22 + 480 * v30 + 32 * (int)a3 + 1043);
          v38 = *v37;
          if ((*v37 & 0x40) != 0)
          {
            gleSynchronizeTextureLevelOnCurrentDevices(a1, v22);
          }
          else if ((*v37 & 0x10) == 0)
          {
            if (!*(_QWORD *)(v22 + 480 * v30 + 32 * (int)a3 + 1056))
            {
              if (!gfxAllocateTextureLevel())
              {
                if (!*(_WORD *)v57)
                  *(_WORD *)v57 = 1285;
                goto LABEL_60;
              }
              v38 = *v37;
            }
            *v37 = v38 | 0x10;
          }
LABEL_60:
          gfxModifyPluginTextureLevel();
          if ((*(_WORD *)(v22 + 768) & 0x800) == 0)
            (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 29496) + 280))(*(_QWORD *)(a1 + 29464), 1, 0, *(_QWORD *)(v22 + 8 * *(unsigned __int8 *)(v57 + 2668)));
          if ((*v37 & 0x10) != 0)
          {
            v39 = *(unsigned __int8 *)(v22 + 480 * v30 + 32 * (int)a3 + 1042);
            v40 = v39 + a4;
            if ((*(_WORD *)(v22 + 982) & 0x600) == 0)
              v39 = 0;
            LOBYTE(v47) = 1;
            gleTextureImagePut((_DWORD *)a1, v22, v36, v40, v39 + v56, 0, a6, a7, 1, v58, v47, a1 + 18484, v52);
          }
          if ((*(_BYTE *)(v22 + 898) & 1) == 0
            || *(_DWORD *)(v22 + 884) != (_DWORD)a3
            || (result = gleGenMipmaps(a1, v22, v30, a3, 1, v50 == 0), !(_DWORD)result))
          {
            result = gleDirtyTextureLevelCurrentBindPointsData(a1, v22, v36);
          }
          goto LABEL_70;
        }
      }
    }
  }
  return result;
}

uint64_t gleCheckTexSubImage2DArgs(uint64_t a1, int a2, unsigned int a3, int a4, int a5, int a6, int a7, int a8, int a9, unint64_t *a10)
{
  __int16 *v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  BOOL v19;
  int v20;
  int v21;
  BOOL v22;
  int v23;
  __int16 v24;
  unsigned int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  int v31;
  int v32;
  _DWORD *v33;
  BOOL v34;
  char v35;
  int v36;
  int v40;

  v15 = (__int16 *)(a1 + 29832);
  v16 = gleLookUpNonProxyTexture2D(a1, a2);
  v17 = glePixelStorageFromFormatType(a1, a8, a9);
  *a10 = v17;
  if (!v16)
  {
    if (!*v15)
    {
      v16 = 0;
      v24 = 1280;
      goto LABEL_31;
    }
    return 0;
  }
  v18 = v17;
  if (a8 == 35359 && ((a6 & 1) != 0 || a3 || (a4 & 1) != 0 || (*(_WORD *)(v16 + 768) & 0xF) == 0))
    goto LABEL_20;
  v19 = a8 == 6402 || a8 == 34041;
  v20 = v19;
  v21 = *(unsigned __int16 *)(v16 + 772);
  v22 = v21 == 6402 || v21 == 34041;
  v23 = v22;
  if (v20 != v23)
    goto LABEL_20;
  if ((v17 & 0x800000000000000) == 0)
  {
    if (!*v15)
    {
      v16 = 0;
      if ((v17 & 0x4000000000000000) != 0)
        v24 = 1282;
      else
        v24 = 1280;
      goto LABEL_31;
    }
    return 0;
  }
  if (a3 >= 0xF || a2 == 34037 && a3)
  {
LABEL_28:
    if (!*v15)
    {
      v16 = 0;
      v24 = 1281;
      goto LABEL_31;
    }
    return 0;
  }
  if ((a2 - 34069) >= 6)
    v26 = 0;
  else
    v26 = a2 - 34069;
  if ((*(_BYTE *)(v16 + 480 * v26 + 32 * a3 + 1043) & 0x20) == 0)
    goto LABEL_20;
  v40 = 0;
  v27 = *(unsigned __int16 *)(v16 + 30 * v26 + 2 * a3 + 560);
  if (v27 == 32856 && *(unsigned __int16 *)(v16 + 480 * v26 + 32 * a3 + 1048) != a8)
    goto LABEL_20;
  if ((a8 == 35359 || a8 == 34233) && *(unsigned __int16 *)(v16 + 480 * v26 + 32 * a3 + 1050) != a9)
    goto LABEL_20;
  v28 = v26;
  if (!gleCheckTexFormatArgs(a1, v27, a8, v17, 1, &v40))
    return 0;
  if (v40 != v18 >> 31)
    goto LABEL_20;
  v29 = v28;
  v30 = *(unsigned __int16 *)(v16 + 480 * v28 + 32 * a3 + 1050);
  v31 = a7;
  if (v30)
    goto LABEL_45;
  if ((a6 & 3) != 0 && a5 | a4 && a6 + a4 != *(unsigned __int16 *)(v16 + 480 * v29 + 32 * a3 + 1036))
  {
LABEL_20:
    if (!*v15)
    {
      v16 = 0;
      v24 = 1282;
LABEL_31:
      *v15 = v24;
      return v16;
    }
    return 0;
  }
  if ((a7 & 3) != 0)
  {
    if (a5 | a4)
      v34 = a7 + a5 == *(unsigned __int16 *)(v16 + 480 * v29 + 32 * a3 + 1038);
    else
      v34 = 1;
    v35 = v34;
    if ((a4 & 3) != 0 || (v35 & 1) == 0)
      goto LABEL_20;
  }
  else if ((a4 & 3) != 0)
  {
    goto LABEL_20;
  }
  if ((a5 & 3) != 0)
    goto LABEL_20;
LABEL_45:
  v32 = *(_DWORD *)(a1 + 19152);
  if ((v32 & 6) != 0)
  {
    if ((v32 & 2) != 0)
    {
      if (*(unsigned __int16 *)(a1 + 18856) == 32790)
      {
        a6 = a6 - *(_DWORD *)(a1 + 18872) + 1;
        v33 = (_DWORD *)(a1 + 18876);
        goto LABEL_65;
      }
    }
    else if ((v32 & 4) != 0 && *(unsigned __int16 *)(a1 + 18928) == 32790)
    {
      a6 = a6 - *(_DWORD *)(a1 + 18944) + 1;
      v33 = (_DWORD *)(a1 + 18948);
LABEL_65:
      v31 = a7 - *v33 + 1;
    }
  }
  if (a6 < 0)
    goto LABEL_28;
  v36 = *(unsigned __int8 *)(v16 + 480 * v29 + 32 * a3 + 1042);
  if (-v36 > a4 || a6 + a4 > *(unsigned __int16 *)(v16 + 480 * v29 + 32 * a3 + 1036) + v36)
    goto LABEL_28;
  if (a2 == 35864)
  {
    if ((v31 | a5) < 0 || v31 + a5 > *(unsigned __int16 *)(v16 + 480 * v29 + 32 * a3 + 1038))
      goto LABEL_28;
  }
  else if (v31 < 0 || -v36 > a5 || v31 + a5 > *(unsigned __int16 *)(v16 + 480 * v29 + 32 * a3 + 1038) + v36)
  {
    goto LABEL_28;
  }
  return v16;
}

uint64_t gleLookUpNonProxyTexture2D(uint64_t a1, int a2)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 20776;
  if ((a2 - 34069) >= 6)
  {
    if (a2 == 3553)
    {
      v3 = (_QWORD *)(v2 + 88 * *(unsigned __int16 *)(a1 + 23768) + 24);
      return *v3 + 40;
    }
  }
  else if (*(_BYTE *)(a1 + 32501) != 2)
  {
    v3 = (_QWORD *)(v2 + 88 * *(unsigned __int16 *)(a1 + 23768));
    return *v3 + 40;
  }
  return 0;
}

uint64_t checkFastPath(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, unint64_t a8, uint64_t a9, char a10)
{
  int v18;
  int v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;

  if ((*(_BYTE *)(a2 + 11) & 1) == 0)
    return 1;
  v23 = 0;
  v24 = 0;
  v18 = glePixelBytes(*(unsigned __int16 *)(a2 + 16), *(unsigned __int16 *)(a2 + 18));
  v19 = gleRowBytes(*(unsigned __int16 *)(a2 + 16), *(unsigned __int16 *)(a2 + 18), *(unsigned __int16 *)(a2 + 12));
  v20 = *(_QWORD *)(a2 + 24) + (a3 + (a4 + *(unsigned __int16 *)(a2 + 14) * a5) * *(unsigned __int16 *)(a2 + 12)) * v18;
  glePixelStorageSettings(a1, a8, a6, a7, (int *)(a1 + 18484), &v24, (int *)&v23 + 1, (_DWORD *)&v24 + 1, (int *)&v23, a10);
  result = 0;
  if (a9 + HIDWORD(v23) != v20 || HIDWORD(v24) != v19)
    return 1;
  return result;
}

uint64_t glMatrixMode_Exec(uint64_t result, int a2)
{
  int v2;
  int v3;

  if (a2 <= 34879)
  {
    if (a2 > 34057)
    {
      if ((a2 - 34594) < 2)
      {
        v2 = -34588;
        goto LABEL_11;
      }
      if (a2 == 34058)
      {
        v3 = 5;
        goto LABEL_12;
      }
    }
    else
    {
      switch(a2)
      {
        case 5888:
          v3 = 4;
          goto LABEL_12;
        case 5889:
          v3 = 3;
          goto LABEL_12;
        case 5890:
          v3 = *(unsigned __int16 *)(result + 23768) + 16;
LABEL_12:
          *(_DWORD *)(result + 20484) = v3;
          return gleUpdateMatrixMode(result);
      }
    }
  }
  else
  {
    if ((a2 - 35008) < 8)
    {
      v2 = -35000;
LABEL_11:
      v3 = a2 + v2;
      goto LABEL_12;
    }
    if (a2 == 34880)
    {
      v3 = *(unsigned __int8 *)(result + 20495) + 5;
      goto LABEL_12;
    }
  }
  if (!*(_WORD *)(result + 29832))
    *(_WORD *)(result + 29832) = 1280;
  return result;
}

uint64_t glLoadIdentity_Exec(uint64_t result)
{
  uint64_t v1;
  _DWORD *v2;
  _OWORD *v3;
  int v4;
  _OWORD *v5;
  int v6;

  v1 = result;
  v2 = (_DWORD *)(result + 20484);
  if (*(int *)(result + 20484) < 24)
  {
    v3 = *(_OWORD **)(result + 19976);
    result = gleMakeIdentityMatrix((uint64_t)v3);
    v4 = v2[1];
    *(_DWORD *)(v1 + 1528) |= v4;
    v2[2042] = 0;
    *(_DWORD *)(v1 + 1540) |= v4;
    if ((v4 & 0xFFFFFC & *(_DWORD *)(v1 + 2216)) != 0)
    {
      v5 = *(_OWORD **)(v1 + 19984);
      *v5 = *v3;
      v5[1] = v3[1];
      v5[2] = v3[2];
      v5[3] = v3[3];
      v2[2311] = -1074791426;
      v6 = *(_DWORD *)(v1 + 1544) & ~(v4 & 0xFFFFFC);
      v4 &= 0xFF000003;
    }
    else
    {
      v6 = *(_DWORD *)(v1 + 1544);
    }
    v2[2042] = 0;
    *(_DWORD *)(v1 + 1544) = v6 | v4;
  }
  else if (!*(_WORD *)(result + 29832))
  {
    *(_WORD *)(result + 29832) = 1282;
  }
  return result;
}

int8x8_t glOrtho_Exec(uint64_t a1, int8x8_t result, double a3, double a4, double a5, double a6, double a7)
{
  __int16 *v7;
  __int16 v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float32x4_t *v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;

  v7 = (__int16 *)(a1 + 29832);
  if (*(int *)(a1 + 20484) < 24)
  {
    v9 = a3 - *(double *)&result;
    v10 = -v9;
    if (v9 >= 0.0)
      v10 = a3 - *(double *)&result;
    if (v10 < 0.000005)
      goto LABEL_13;
    v11 = a5 - a4;
    v12 = -v11;
    if (v11 >= 0.0)
      v12 = a5 - a4;
    if (v12 < 0.000005)
      goto LABEL_13;
    v13 = a6 - a7;
    v14 = -v13;
    if (v13 >= 0.0)
      v14 = a6 - a7;
    if (v14 >= 0.000005)
    {
      v15 = *(float32x4_t **)(a1 + 19976);
      v16 = 1.0 / v9;
      v17 = 1.0 / v11;
      v18 = -((*(double *)&result + a3) * v16);
      v19 = -((a4 + a5) * v17);
      v20 = (a6 + a7) * (float)(1.0 / v13);
      v21 = *v15;
      v22 = v15[1];
      *v15 = vmulq_n_f32(*v15, v16 + v16);
      v15[1] = vmulq_n_f32(v22, v17 + v17);
      v23 = v15[2];
      v24 = vaddq_f32(v15[3], vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v22, v19), v21, v18), v23, v20));
      v15[2] = vmulq_n_f32(v23, (float)(1.0 / v13) + (float)(1.0 / v13));
      v15[3] = v24;
      LODWORD(v15) = *(_DWORD *)(a1 + 20488);
      *(_DWORD *)(a1 + 1528) |= v15;
      *(_DWORD *)(a1 + 28652) = 0;
      result = vorr_s8(*(int8x8_t *)(a1 + 1540), (int8x8_t)vdup_n_s32(v15));
      *(double *)(a1 + 1540) = *(double *)&result;
    }
    else
    {
LABEL_13:
      if (!*v7)
      {
        v8 = 1281;
        goto LABEL_16;
      }
    }
  }
  else if (!*v7)
  {
    v8 = 1282;
LABEL_16:
    *v7 = v8;
  }
  return result;
}

uint64_t glEnable_Exec(uint64_t result, int a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 19304) + 32 * ((a2 + 7) ^ BYTE1(a2));
  do
  {
    if (*(_DWORD *)v2 == a2)
      return (*(uint64_t (**)(void))(v2 + 8))();
    v2 = *(_QWORD *)(v2 + 16);
  }
  while (v2);
  if (!*(_WORD *)(result + 29832))
    *(_WORD *)(result + 29832) = 1280;
  return result;
}

_QWORD *gleSetVertexSubmitFunc(uint64_t a1, uint64_t a2, float32_t a3, float a4, float32_t a5, float32_t a6)
{
  int8x16_t v12;

  gleGetVertexSubmitFuncObjectAndKey(a1, 0, 0, 0, (void **)(a1 + 26248));
  *(_QWORD *)(a1 + 26152) = gleLLVMSubmitFunc;
  *(_QWORD *)(a1 + 26160) = gleLLVMSubmitFunc;
  if ((*(__int16 *)(a1 + 28660) & 0x80000000) == 0)
    *(_QWORD *)(a1 + 26136) = gleLLVMSubmitFunc;
  *(float *)v12.i32 = a4;
  return gleRunVertexSubmitImmediate((_QWORD *)a1, a2, 0, 0, 0, *(unint64_t **)(a1 + 26248), a3, v12, a5, a6);
}

uint64_t gleClipPoly(uint64_t result, char *a2, int a3, int a4, char *a5, _DWORD *a6, int a7)
{
  char *v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;

  v7 = a2;
  v8 = result;
  if (a7)
  {
    if (a3 < 1)
      goto LABEL_38;
    v9 = 0;
    v10 = -1;
    v11 = (uint64_t *)a2;
    do
    {
      v12 = *v11++;
      v13 = *(unsigned __int8 *)(v12 + 3);
      v10 &= v13;
      v9 |= v13;
    }
    while (v11 < (uint64_t *)&a2[8 * a3]);
    if (!(_BYTE)v9)
    {
LABEL_38:
      *a6 = -1;
      return result;
    }
    if (v10)
    {
      *a6 = 0;
      return result;
    }
  }
  else
  {
    v9 = a4;
  }
  LODWORD(v14) = 0;
  v15 = *(_QWORD *)(result + 26008);
  v16 = 1;
  v17 = a5;
  v18 = &a2[8 * a3];
  do
  {
    if ((v9 & v16) != 0)
    {
      *(_QWORD *)v18 = *(_QWORD *)v7;
      v19 = v17;
      if (v7 < v18)
      {
        v20 = (uint64_t *)v7;
        do
        {
          v21 = *v20;
          v23 = v20[1];
          ++v20;
          v22 = v23;
          if ((v16 & *(_BYTE *)(v21 + 3)) != 0)
          {
            if ((v16 & *(_BYTE *)(v22 + 3)) == 0)
            {
              if (!*(_BYTE *)(v21 + 1) || v21 == *(_QWORD *)v7)
              {
                v24 = v15 + 640;
              }
              else
              {
                v24 = v15;
                v15 = v21;
              }
              result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(v8 + 27896))(v8, v21, v22, v15, v16);
              v9 |= result;
              *(_QWORD *)v19 = v15;
              v19 += 8;
LABEL_27:
              v15 = v24;
            }
          }
          else
          {
            *(_QWORD *)v19 = v21;
            if ((v16 & *(_BYTE *)(v22 + 3)) != 0)
            {
              if (*(_BYTE *)(v22 + 1) && v22 == *(_QWORD *)v7)
              {
                v24 = v15;
                v15 = v22;
              }
              else
              {
                v24 = v15 + 640;
              }
              result = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 27896))(v8, v22);
              v9 |= result;
              *(_BYTE *)(v15 + 1) = 2;
              *((_QWORD *)v19 + 1) = v15;
              v19 += 16;
              goto LABEL_27;
            }
            v19 += 8;
          }
        }
        while (v20 < (uint64_t *)v18);
      }
      v14 = (unint64_t)(v19 - v17) >> 3;
      if ((int)v14 <= 2)
      {
        *a6 = 0;
        return result;
      }
      v18 = &v17[(v19 - v17) & 0x7FFFFFFF8];
      v25 = (uint64_t *)v17;
      v17 = v7;
      v7 = (char *)v25;
    }
    else
    {
      v25 = (uint64_t *)v7;
    }
    v16 *= 2;
  }
  while ((v16 & 0xFEu) < 0x21);
  v26 = a5;
  if (v25 != (uint64_t *)a5 && (int)v14 >= 1)
  {
    v27 = v14;
    do
    {
      v28 = *v25++;
      *(_QWORD *)v26 = v28;
      v26 += 8;
      --v27;
    }
    while (v27);
  }
  *a6 = v14;
  *(_QWORD *)(v8 + 26008) = v15;
  return result;
}

uint64_t gleSetClipInterpFunc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  gleBuildInterpolateFunc(a1, 1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 27896))(a1, a2, a3, a4, a5);
}

uint64_t gleBuildInterpolateFunc(uint64_t result, int a2)
{
  _BOOL4 v2;
  int v3;
  BOOL v4;
  int v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  int v27;
  int v28;
  int v29;
  int v30;

  if (*(_BYTE *)(result + 14890))
    v2 = *(_BYTE *)(result + 1452) != 0;
  else
    v2 = 0;
  v3 = 0;
  if (*(_BYTE *)(result + 15205))
    v4 = a2 == 0;
  else
    v4 = 0;
  if (v4)
    v5 = 5;
  else
    v5 = 1;
  v6 = *(unsigned __int16 *)(result + 29830);
  if (v6 == 7170)
  {
    LODWORD(v12) = 0;
    v13 = 0;
    goto LABEL_80;
  }
  if (v6 != 7169)
  {
    LODWORD(v7) = 0;
    v8 = 0;
    if (v6 == 7168)
    {
      v9 = *(_QWORD *)(result + 19216);
      v7 = *(_QWORD *)(result + 19224);
      v8 = HIDWORD(v7);
      v10 = *(_DWORD *)(result + 24864);
      if ((v10 & 0xFFFFFFE8) == 8)
      {
        v11 = *(_QWORD *)(result + 24768);
        if (!v11)
          v11 = *(_QWORD *)(*(_QWORD *)(result + 24776) + 64);
        v3 = (*(_DWORD *)(v11 + 2824) | v9) & 0xC0 | v9 & 0x6000000 | 0x800;
        if (*(_QWORD *)(result + 24480))
          goto LABEL_44;
      }
      else
      {
        v3 = v9 & 0x60008C0;
        if (*(_QWORD *)(result + 24480))
          goto LABEL_44;
      }
      if ((v10 & 1) == 0 && !*(_BYTE *)(result + 24756))
      {
        if (a2 != 2 && *(_BYTE *)(result + 14890))
        {
          if ((*(_BYTE *)(*(_QWORD *)(result + 29032) + 120) & 0x10) != 0 && *(_WORD *)(result + 15284) == 4353)
            v5 |= 8u;
          if (a2 == 1)
            v5 |= 0x10u;
          if (*(_BYTE *)(result + 14892))
            v14 = 13312;
          else
            v14 = 5120;
          v5 |= v14;
          if (*(_BYTE *)(result + 19233))
          {
            v7 &= 0xFFFFFFF3FFFFFFF3;
            v8 = HIDWORD(v7);
            v3 &= 0x1FFFFFFu;
            LODWORD(v12) = v7;
            v13 = HIDWORD(v7);
            if (!v2)
              goto LABEL_80;
            goto LABEL_75;
          }
          v7 &= 0xFFFFFFFBFFFFFFFBLL;
          v8 = HIDWORD(v7);
LABEL_42:
          v3 &= 0x1FFFFFFu;
          LODWORD(v12) = v7;
          v13 = v8;
          if (!v2)
            goto LABEL_80;
          goto LABEL_75;
        }
        goto LABEL_41;
      }
LABEL_44:
      if (a2 != 2 && *(_BYTE *)(result + 17701))
      {
        v15 = (v7 >> 1) & 0x200000002 | v7;
        v7 = (v3 & 0x2000000) != 0 ? v15 : v7;
        v8 = (v3 & 0x2000000) != 0 ? HIDWORD(v15) : v8;
        if ((v3 & 0x4000000) != 0)
        {
          v7 |= (2 * (v7 | (v8 << 32))) & 0x1000000010 | (v8 << 32);
          v8 = HIDWORD(v7);
        }
      }
      if ((v10 & 0xFFFFFFEC) == 4)
      {
        v16 = *(_QWORD *)(result + 24768);
        if (!v16)
          v16 = *(_QWORD *)(*(_QWORD *)(result + 24776) + 56);
        v17 = (_DWORD *)(v16 + 2120);
      }
      else
      {
        if ((v10 & 0xFFFFFFEF) != 1)
        {
          LOBYTE(v2) = 0;
          goto LABEL_64;
        }
        v18 = *(_QWORD *)(result + 24768);
        if (!v18)
          v18 = *(_QWORD *)(*(_QWORD *)(result + 24776) + 40);
        v17 = (_DWORD *)(v18 + 712);
      }
      LOBYTE(v2) = 0;
      v3 |= *v17 & 0xC0;
      goto LABEL_64;
    }
LABEL_41:
    if (*(_BYTE *)(result + 14890))
      goto LABEL_42;
    goto LABEL_64;
  }
  if (*(_QWORD *)(result + 24480) || *(_BYTE *)(result + 24756) || (*(_BYTE *)(result + 24864) & 1) != 0)
  {
    LOBYTE(v2) = 0;
    v3 = 0x2000000;
    v8 = 260;
    LODWORD(v7) = 260;
    goto LABEL_64;
  }
  if (a2 == 2)
  {
    LODWORD(v7) = 260;
    v3 = 0x2000000;
    v8 = 260;
    goto LABEL_41;
  }
  v28 = v5 | 0x400;
  if (*(_BYTE *)(result + 14890))
  {
    v3 = 0;
    v29 = v5 | 0x410;
    if (a2 != 1)
      v29 = v28;
    if (*(_BYTE *)(result + 14892))
      v30 = 12288;
    else
      v30 = 4096;
    v5 = v30 | v29;
    LODWORD(v7) = 260;
    v8 = 260;
    LODWORD(v12) = 260;
    v13 = 260;
    if (v2)
      goto LABEL_75;
    goto LABEL_80;
  }
  v3 = 0x2000000;
  v8 = 260;
  v5 |= 0x400u;
  LODWORD(v7) = 260;
LABEL_64:
  if ((v3 & 0x2000000) != 0 && *(_BYTE *)(result + 17702) != 0)
    v5 |= 0x60000u;
  if ((v3 & 0x4000000) != 0 && *(_BYTE *)(result + 17703) != 0)
    v5 |= 0x180000u;
  v3 &= 0x1FFFFFFu;
  LODWORD(v12) = v7;
  v13 = v8;
  if (v2)
  {
LABEL_75:
    v21 = 0x8000000000;
    if ((v5 & 8) == 0)
      v21 = 0x8000000080;
    v22 = 128;
    if (*(_DWORD *)(result + 15592) != 7424)
      v22 = v21;
    v12 = v7 | (unint64_t)(v8 << 32) | v22;
    v13 = HIDWORD(v12);
  }
LABEL_80:
  v23 = *(_DWORD *)(result + 15592);
  if (v12 & 4 | (v13 << 32) & 0x400000004)
    v24 = v12 | 4;
  else
    v24 = v12;
  if (v12 & 4 | (v13 << 32) & 0x400000004)
    v25 = v13 & 0xFFFFFFFB;
  else
    v25 = v13;
  if (((v24 | (v25 << 32)) & 0x800000008) != 0)
  {
    LODWORD(v24) = v24 | 8;
    LODWORD(v25) = v25 & 0xFFFFFFF7;
  }
  v26 = v23 == 7425;
  if (v23 == 7425)
  {
    v27 = v13;
  }
  else
  {
    LODWORD(v12) = v24;
    v27 = v25;
  }
  if (v26)
    v5 |= 2u;
  if (a2 == 2)
  {
    *(_QWORD *)(result + 27912) = gleLLVMVecCopyFlatVaryings;
    *(_QWORD *)(result + 27920) = gleLLVMVecCopyFlatVaryings;
    *(_DWORD *)(result + 28000) = v5;
    *(_DWORD *)(result + 28004) = v3;
    *(_DWORD *)(result + 28008) = 0;
    *(_DWORD *)(result + 28012) = v12;
    *(_DWORD *)(result + 28016) = v27;
  }
  else if (a2)
  {
    *(_QWORD *)(result + 27896) = gleLLVMVecInterpolateClip;
    *(_QWORD *)(result + 27904) = gleLLVMVecInterpolateClip;
    *(_DWORD *)(result + 27980) = v5;
    *(_DWORD *)(result + 27984) = v3;
    *(_DWORD *)(result + 27988) = 0;
    *(_DWORD *)(result + 27992) = v12;
    *(_DWORD *)(result + 27996) = v27;
  }
  else
  {
    *(_QWORD *)(result + 27880) = gleLLVMVecInterpolateEye;
    *(_QWORD *)(result + 27888) = gleLLVMVecInterpolateEye;
    *(_DWORD *)(result + 27960) = v5;
    *(_DWORD *)(result + 27964) = v3;
    *(_DWORD *)(result + 27968) = 0;
    *(_DWORD *)(result + 27972) = v12;
    *(_DWORD *)(result + 27976) = v27;
  }
  return result;
}

uint64_t gliDestroyContext(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t i;

  if (!a1)
    return 10004;
  v2 = a1 + 29792;
  if (*(_DWORD *)(a1 + 29792) != 878944803)
    return 10004;
  if (*(_QWORD *)(a1 + 27648))
    (*(void (**)(uint64_t))(a1 + 27752))(a1);
  v3 = gleTerminateContext(a1);
  gfxClearSyncObjectsInHash();
  if (*(_BYTE *)(v2 + 2704))
  {
    v4 = 0;
    v5 = (_QWORD *)(a1 + 32512);
    do
    {
      v6 = (*(uint64_t (**)(_QWORD))(v5[206] + 1176))(*v5);
      if ((_DWORD)v3)
        v3 = v3;
      else
        v3 = v6;
      ++v4;
      v5 += 209;
    }
    while (v4 < *(unsigned __int8 *)(v2 + 2704));
  }
  gfxReleaseSharedStateAndHash();
  os_unfair_lock_lock((os_unfair_lock_t)&gl_list_lock);
  v7 = 0;
  v8 = *(unsigned __int8 *)(v2 + 2709);
  v9 = &gl_list[v8];
  v10 = v9;
  do
  {
    v11 = v7;
    v7 = *v10;
    v10 = (_QWORD *)(*v10 + 29512);
    if (v7)
      v12 = v7 == a1;
    else
      v12 = 1;
  }
  while (!v12);
  v13 = *(_QWORD *)(a1 + 29512);
  if (v11)
  {
    *(_QWORD *)(v11 + 29512) = v13;
    if (*v9)
      goto LABEL_20;
    goto LABEL_19;
  }
  *v9 = v13;
  if (!v13)
LABEL_19:
    gleDestroyEnableHashTable(v8);
LABEL_20:
  os_unfair_lock_unlock((os_unfair_lock_t)&gl_list_lock);
  for (i = 2222; i != 2227; ++i)
    free(*(void **)(a1 + 8 * i));
  free((void *)a1);
  return v3;
}

uint64_t gleTerminateContext(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 27648))
    gleDestroyCmdBufMachine(a1);
  gleFreeOrphans((int64x2_t *)a1);
  gleFreeVertexMachine(a1);
  gleFreePixelMap((_QWORD *)a1);
  gleFreeMaterials(a1);
  gleFreeAllAttrib(a1);
  gleFreeQueryMachine((_QWORD *)a1);
  gleFreeCtxHashMachine(a1, a1 + 25872, (void (*)(uint64_t))gleFreeFenceObject);
  gleFreeVertexArrayState((uint64_t *)a1);
  gleFreeCtxHashMachine(a1, a1 + 26352, (void (*)(uint64_t))gleFreeCtxVertexArrayHashObject);
  gleFreeBufferState((_QWORD *)a1);
  gleFreeSamplerState(a1);
  gleFreeTransformFeedbackState(a1);
  gleLLVMFree(a1);
  gleFreeShaderProgramState(a1);
  gleFreeProgramPipelineState(a1);
  gleFreePipelineProgramState(a1);
  gleReclaimDrawCopyPixelResources(a1);
  gleReclaimBitmapResources(a1);
  gleReclaimAccumResources(a1);
  gleFreeFramebufferState((uint64_t *)a1);
  gleFreeTextureState(a1);
  gleClearTextures(a1);
  gleCleanUpDerivedState((void **)a1);
  free(*(void **)(a1 + 19288));
  free(*(void **)(a1 + 29520));
  free(*(void **)(a1 + 17816));
  glgDestroyProcessor();
  free(*(void **)(a1 + 18792));
  free(*(void **)(a1 + 18864));
  free(*(void **)(a1 + 18936));
  free(*(void **)(a1 + 19008));
  gleCleanUpGLDState((_OWORD *)(a1 + 2272));
  return 0;
}

void gleFreeOrphans(int64x2_t *a1)
{
  void *v2;
  unint64_t *v3;
  void *v4;

  v2 = (void *)a1[1809].i64[0];
  if (v2)
  {
    v3 = (unint64_t *)a1[1806].i64[1];
    if (v3 != &a1[1805].u64[1])
    {
      do
      {
        gleFreeOrphan(a1, v3);
        v3 = (unint64_t *)a1[1806].i64[1];
      }
      while (v3 != &a1[1805].u64[1]);
      v2 = (void *)a1[1809].i64[0];
    }
    free(v2);
    a1[1809].i64[0] = 0;
    v4 = (void *)a1[1805].i64[0];
    if (v4)
    {
      free(v4);
      a1[1805].i64[0] = 0;
    }
  }
}

void gleFreeVertexMachine(uint64_t a1)
{
  uint64_t v2;
  _OWORD *v3;
  void *v4;

  v2 = *(_QWORD *)(a1 + 26000);
  if (v2)
  {
    v3 = (_OWORD *)(a1 + 26000);
    free((void *)(v2 - 1280));
    *(_QWORD *)(a1 + 26032) = 0;
    *v3 = 0u;
    *(_OWORD *)(a1 + 26016) = 0u;
    *(_QWORD *)(a1 + 26096) = 0;
    *(_QWORD *)(a1 + 26088) = 0;
  }
  if (*(_DWORD *)(a1 + 26104))
  {
    v4 = *(void **)(a1 + 26056);
    if (v4)
      free(v4);
    *(_DWORD *)(a1 + 26104) = 0;
    *(_QWORD *)(a1 + 26080) = 0;
    *(_QWORD *)(a1 + 26112) = 0;
    *(_QWORD *)(a1 + 26056) = 0;
    *(_QWORD *)(a1 + 26064) = 0;
  }
}

void gleFreePixelMap(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  v2 = (void *)a1[2321];
  if (v2 != &gle_default_pix_map_i)
  {
    free(v2);
    a1[2321] = &gle_default_pix_map_i;
  }
  v3 = (void *)a1[2330];
  if (v3 != &gle_default_pix_map_i)
  {
    free(v3);
    a1[2330] = &gle_default_pix_map_i;
  }
  v4 = (void *)a1[2322];
  if (v4 != &gle_default_pix_map_f)
  {
    free(v4);
    a1[2322] = &gle_default_pix_map_f;
  }
  v5 = (void *)a1[2323];
  if (v5 != &gle_default_pix_map_f)
  {
    free(v5);
    a1[2323] = &gle_default_pix_map_f;
  }
  v6 = (void *)a1[2324];
  if (v6 != &gle_default_pix_map_f)
  {
    free(v6);
    a1[2324] = &gle_default_pix_map_f;
  }
  v7 = (void *)a1[2325];
  if (v7 != &gle_default_pix_map_f)
  {
    free(v7);
    a1[2325] = &gle_default_pix_map_f;
  }
  v8 = (void *)a1[2326];
  if (v8 != &gle_default_pix_map_f)
  {
    free(v8);
    a1[2326] = &gle_default_pix_map_f;
  }
  v9 = (void *)a1[2327];
  if (v9 != &gle_default_pix_map_f)
  {
    free(v9);
    a1[2327] = &gle_default_pix_map_f;
  }
  v10 = (void *)a1[2328];
  if (v10 != &gle_default_pix_map_f)
  {
    free(v10);
    a1[2328] = &gle_default_pix_map_f;
  }
  v11 = (void *)a1[2329];
  if (v11 != &gle_default_pix_map_f)
  {
    free(v11);
    a1[2329] = &gle_default_pix_map_f;
  }
}

_QWORD *gleFreeMaterials(uint64_t a1)
{
  uint64_t v2;
  char v3;
  char v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *result;
  _QWORD *v10;

  v2 = 0;
  v3 = 1;
  do
  {
    v4 = v3;
    v5 = a1 + 8 * v2;
    v6 = *(_QWORD **)(v5 + 1424);
    v7 = (_QWORD *)v6[64];
    if (v7)
    {
      do
      {
        v8 = v7;
        free(v6);
        v7 = (_QWORD *)v8[64];
        v6 = v8;
      }
      while (v7);
    }
    else
    {
      v8 = *(_QWORD **)(v5 + 1424);
    }
    v3 = 0;
    *(_QWORD *)(v5 + 1424) = v8;
    v2 = 1;
  }
  while ((v4 & 1) != 0);
  result = *(_QWORD **)(a1 + 1440);
  if (result)
  {
    do
    {
      v10 = (_QWORD *)result[64];
      free(result);
      result = v10;
    }
    while (v10);
  }
  *(_QWORD *)(a1 + 1440) = 0;
  return result;
}

double gleFreeAllAttrib(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  int v4;
  uint64_t i;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  uint64_t j;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  double result;

  v2 = (int *)(a1 + 20768);
  v3 = a1 + 20496;
  v4 = *(_DWORD *)(a1 + 20768);
  if (v4 >= 1)
  {
    for (i = 0; i < v4; *(_QWORD *)(v3 + 8 * i++) = 0)
    {
      v6 = *(_QWORD **)(v3 + 8 * i);
      if (v6)
      {
        do
        {
          v7 = (_QWORD *)v6[1018];
          free(v6);
          v6 = v7;
        }
        while (v7);
        v4 = *v2;
      }
    }
  }
  v8 = v2[1];
  if (v8 >= 1)
  {
    for (j = 0; j < v8; ++j)
    {
      v10 = a1 + 8 * j;
      v11 = *(_QWORD **)(v10 + 20632);
      if (v11)
      {
        do
        {
          v12 = (_QWORD *)v11[121];
          free(v11);
          v11 = v12;
        }
        while (v12);
        v8 = v2[1];
      }
      *(_QWORD *)(v10 + 20632) = 0;
    }
  }
  *(_QWORD *)(a1 + 20624) = v3;
  result = 0.0;
  *(_QWORD *)(a1 + 20768) = 0;
  *(_QWORD *)(a1 + 20760) = a1 + 20632;
  return result;
}

uint64_t gleFreeQueryMachine(_QWORD *a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;

  v2 = a1[3242];
  if (v2)
  {
    v3 = *(_DWORD *)(v2 + 20) - 1;
    *(_DWORD *)(v2 + 20) = v3;
    if (!v3)
      gleFreeQueryObject((uint64_t)a1, (_QWORD *)v2);
    a1[3242] = 0;
  }
  v4 = a1[3243];
  if (v4)
  {
    v5 = *(_DWORD *)(v4 + 20) - 1;
    *(_DWORD *)(v4 + 20) = v5;
    if (!v5)
      gleFreeQueryObject((uint64_t)a1, (_QWORD *)v4);
    a1[3243] = 0;
  }
  v6 = a1[3245];
  if (v6)
  {
    v7 = *(_DWORD *)(v6 + 20) - 1;
    *(_DWORD *)(v6 + 20) = v7;
    if (!v7)
      gleFreeQueryObject((uint64_t)a1, (_QWORD *)v6);
    a1[3245] = 0;
  }
  v8 = a1[3246];
  if (v8)
  {
    v9 = *(_DWORD *)(v8 + 20) - 1;
    *(_DWORD *)(v8 + 20) = v9;
    if (!v9)
      gleFreeQueryObject((uint64_t)a1, (_QWORD *)v8);
    a1[3246] = 0;
  }
  return gleFreeCtxHashMachine((uint64_t)a1, (uint64_t)(a1 + 3238), (void (*)(uint64_t))gleFreeQueryObject);
}

void gleFreeVertexArrayState(uint64_t *a1)
{
  uint64_t v1;
  int v3;
  char *v4;

  v1 = a1[3298];
  if (v1)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1[2412] + 324));
    if (*(_DWORD *)(v1 + 16))
    {
      v3 = *(_DWORD *)(v1 + 20) - 1;
      *(_DWORD *)(v1 + 20) = v3;
      if (!v3)
        gleFreeVertexArrayHashObject(a1[2412], (char *)v1);
    }
    v4 = (char *)a1[3299];
    if (v4)
      gleFreeVertexArrayHashObject(a1[2412], v4);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1[2412] + 324));
  }
}

void gleFreeBufferState(_QWORD *a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;

  os_unfair_lock_lock((os_unfair_lock_t)(a1[2412] + 324));
  v2 = a1[3288];
  if (v2)
  {
    v3 = *(_DWORD *)(v2 + 20) - 1;
    *(_DWORD *)(v2 + 20) = v3;
    if (!v3)
      gleUnbindAndFreeBufferObject((uint64_t)a1, (_QWORD *)v2);
  }
  v4 = a1[2414];
  if (v4)
  {
    v5 = *(_DWORD *)(v4 + 20) - 1;
    *(_DWORD *)(v4 + 20) = v5;
    if (!v5)
      gleUnbindAndFreeBufferObject((uint64_t)a1, (_QWORD *)v4);
  }
  v6 = a1[2415];
  if (v6)
  {
    v7 = *(_DWORD *)(v6 + 20) - 1;
    *(_DWORD *)(v6 + 20) = v7;
    if (!v7)
      gleUnbindAndFreeBufferObject((uint64_t)a1, (_QWORD *)v6);
  }
  v8 = a1[2416];
  if (v8)
  {
    v9 = *(_DWORD *)(v8 + 20) - 1;
    *(_DWORD *)(v8 + 20) = v9;
    if (!v9)
      gleUnbindAndFreeBufferObject((uint64_t)a1, (_QWORD *)v8);
  }
  v10 = a1[2417];
  if (v10)
  {
    v11 = *(_DWORD *)(v10 + 20) - 1;
    *(_DWORD *)(v10 + 20) = v11;
    if (!v11)
      gleUnbindAndFreeBufferObject((uint64_t)a1, (_QWORD *)v10);
  }
  v12 = a1[2418];
  if (v12)
  {
    v13 = *(_DWORD *)(v12 + 20) - 1;
    *(_DWORD *)(v12 + 20) = v13;
    if (!v13)
      gleUnbindAndFreeBufferObject((uint64_t)a1, (_QWORD *)v12);
  }
  v14 = a1[2419];
  if (v14)
  {
    v15 = *(_DWORD *)(v14 + 20) - 1;
    *(_DWORD *)(v14 + 20) = v15;
    if (!v15)
      gleUnbindAndFreeBufferObject((uint64_t)a1, (_QWORD *)v14);
  }
  v16 = a1[2420];
  if (v16)
  {
    v17 = *(_DWORD *)(v16 + 20) - 1;
    *(_DWORD *)(v16 + 20) = v17;
    if (!v17)
      gleUnbindAndFreeBufferObject((uint64_t)a1, (_QWORD *)v16);
  }
  v18 = a1[2421];
  if (v18)
  {
    v19 = *(_DWORD *)(v18 + 20) - 1;
    *(_DWORD *)(v18 + 20) = v19;
    if (!v19)
      gleUnbindAndFreeBufferObject((uint64_t)a1, (_QWORD *)v18);
  }
  v20 = a1[2422];
  if (v20)
  {
    v21 = *(_DWORD *)(v20 + 20) - 1;
    *(_DWORD *)(v20 + 20) = v21;
    if (!v21)
      gleUnbindAndFreeBufferObject((uint64_t)a1, (_QWORD *)v20);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1[2412] + 324));
}

void gleFreePipelineProgramState(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  _BYTE *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;

  v2 = *(void **)(a1 + 24192);
  if (v2)
  {
    free(v2);
    *(_QWORD *)(a1 + 24192) = 0;
  }
  v3 = 0;
  v4 = (_BYTE *)(a1 + 32496);
  v5 = (_QWORD *)(a1 + 33472);
  do
  {
    v6 = a1 + 8 * v3;
    if (*(_QWORD *)(v6 + 24600))
    {
      v7 = (_QWORD *)(v6 + 24600);
      cvmHashObjectRelease();
      *(_QWORD *)(a1 + 24192 + 8 * v3 + 440) = 0;
      *v7 = 0;
    }
    v8 = *v4;
    if (*v4)
    {
      v9 = v5;
      do
      {
        *v9 = 0;
        v9 += 209;
        --v8;
      }
      while (v8);
    }
    ++v3;
    ++v5;
  }
  while (v3 != 4);
  v10 = 0;
  v11 = (_QWORD *)(a1 + 33432);
  do
  {
    v12 = (_QWORD *)(a1 + 8 * v10);
    if (v12[3065])
    {
      if (v12[3070])
      {
        cvmHashObjectRelease();
        v12[3070] = 0;
        v13 = (_QWORD *)(a1 + 8 * v10 + 24480);
      }
      else
      {
        v14 = a1 + 8 * v10;
        v15 = *(_QWORD **)(v14 + 24480);
        if (!v15)
        {
LABEL_17:
          cvmDestroyHashMachine();
          v12[3065] = 0;
          goto LABEL_18;
        }
        v13 = (_QWORD *)(v14 + 24480);
        gleDestroyStateProgram(a1, v15);
      }
      *v13 = 0;
      goto LABEL_17;
    }
LABEL_18:
    v16 = v12[3050];
    if (v16 && *(_DWORD *)(v16 + 16))
    {
      os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
      v17 = *(_DWORD *)(v16 + 20) - 1;
      *(_DWORD *)(v16 + 20) = v17;
      if (v17)
      {
        if (*v4)
        {
          v18 = 0;
          v19 = v16 + 40;
          v20 = (_QWORD *)(a1 + 32512);
          do
          {
            (*(void (**)(_QWORD, _QWORD))(v20[206] + 1648))(*v20, *(_QWORD *)(v19 + 8 * v18++));
            v20 += 209;
          }
          while (v18 < *v4);
        }
      }
      else
      {
        gleUnbindAndFreePipelineProgramObject(a1, v16);
      }
      os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    }
    v21 = *(_QWORD *)(a1 + 8 * v10 + 24440);
    if (v21)
      gleUnbindAndFreePipelineProgramObject(a1, v21);
    v22 = *v4;
    if (*v4)
    {
      v23 = v11;
      do
      {
        *v23 = 0;
        v23 += 209;
        --v22;
      }
      while (v22);
    }
    ++v10;
    ++v11;
  }
  while (v10 != 5);
}

void gleFreePipelineProgramObject(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(void **)(a2 + 168);
  if (v4)
  {
    free(v4);
    *(_QWORD *)(a2 + 168) = 0;
  }
  *(_DWORD *)(a2 + 176) = 0;
  *(_QWORD *)(a2 + 440) = 0;
  *(_DWORD *)(a2 + 448) = 0;
  if (*(_BYTE *)(a2 + 466) == 4)
  {
    *(_DWORD *)(a2 + 4412) = 0;
    *(_WORD *)(a2 + 4416) = 0;
  }
  else if (!*(_BYTE *)(a2 + 466) && *(_QWORD *)(a2 + 4408))
  {
    MEMORY[0x220767544]();
    *(_QWORD *)(a2 + 4408) = 0;
  }
  if (*(_QWORD *)(a2 + 472))
  {
    MEMORY[0x220767544]();
    *(_QWORD *)(a2 + 472) = 0;
  }
  v5 = *(void **)(a2 + 504);
  if (v5)
  {
    free(v5);
    *(_QWORD *)(a2 + 504) = 0;
  }
  free(*(void **)(a2 + 480));
  *(_QWORD *)(a2 + 480) = 0;
  free(*(void **)(a2 + 520));
  *(_QWORD *)(a2 + 520) = 0;
  free(*(void **)(a2 + 144));
  *(_QWORD *)(a2 + 144) = 0;
  if (*(_BYTE *)(a1 + 320))
  {
    v6 = 0;
    v7 = a2 + 40;
    v8 = a1 + 360;
    do
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v8 + 1656))(*(_QWORD *)(v8 - 8), *(_QWORD *)(v7 + 8 * v6));
      *(_QWORD *)(v7 + 8 * v6++) = 0;
      v8 += 32;
    }
    while (v6 < *(unsigned __int8 *)(a1 + 320));
  }
  free((void *)a2);
}

void gleFreeFramebufferState(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;

  v2 = a1[3620];
  v3 = a1[3621];
  v4 = a1[3619];
  if (v2)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1[2412] + 324));
    v5 = *(_DWORD *)(v2 + 20) - 1;
    *(_DWORD *)(v2 + 20) = v5;
    if (!v5)
      gleFreeFramebufferObject(a1[2412], (char *)v2);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1[2412] + 324));
  }
  if (v3)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1[2412] + 324));
    v6 = *(_DWORD *)(v3 + 20) - 1;
    *(_DWORD *)(v3 + 20) = v6;
    if (!v6)
      gleFreeFramebufferObject(a1[2412], (char *)v3);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1[2412] + 324));
  }
  if (v4)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1[2412] + 324));
    v7 = *(_DWORD *)(v4 + 20) - 1;
    *(_DWORD *)(v4 + 20) = v7;
    if (!v7)
      gleUnbindAndFreeTextureObject((uint64_t)a1, v4);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1[2412] + 324));
  }
}

void gleFreeTextureState(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = 0;
  v3 = a1 + 20776;
  do
  {
    for (i = 0; i != 88; i += 8)
    {
      v5 = *(_QWORD *)(v3 + i);
      if (v5 && *(_DWORD *)(v5 + 16))
      {
        os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
        v6 = *(_DWORD *)(v5 + 20) - 1;
        *(_DWORD *)(v5 + 20) = v6;
        if (!v6)
        {
          gleUnbindTextureObject(a1, v5);
          gleFreeTextureObject(*(_QWORD *)(a1 + 19296), v5);
        }
        os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
      }
    }
    ++v2;
    v3 += 88;
  }
  while (v2 != 32);
  v7 = -48;
  do
  {
    v8 = *(void **)(a1 + v7 + 18744);
    if (v8)
    {
      free(v8);
      *(_QWORD *)(a1 + v7 + 18744) = 0;
    }
    v7 += 16;
  }
  while (v7);
  v9 = -88;
  do
  {
    v10 = *(_QWORD *)(a1 + v9 + 23680);
    if (v10)
    {
      gleUnbindTextureObject(a1, *(_QWORD *)(a1 + v9 + 23680));
      gleFreeTextureObject(*(_QWORD *)(a1 + 19296), v10);
    }
    v11 = *(_QWORD *)(a1 + v9 + 23768);
    if (v11)
    {
      gleUnbindTextureObject(a1, *(_QWORD *)(a1 + v9 + 23768));
      gleFreeTextureObject(*(_QWORD *)(a1 + 19296), v11);
    }
    v9 += 8;
  }
  while (v9);
}

uint64_t gleIterateHashMachineObjects(uint64_t result, uint64_t a2, uint64_t (*a3)(uint64_t, _QWORD *))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *i;

  v5 = result;
  v6 = 0;
  v7 = (*(_DWORD *)(result + 24) + 1);
  do
  {
    for (i = *(_QWORD **)(*(_QWORD *)(v5 + 8) + 8 * v6); i; i = (_QWORD *)*i)
      result = a3(a2, i);
    ++v6;
  }
  while (v6 != v7);
  return result;
}

void glDeleteTextures_Exec(uint64_t a1, unsigned int a2, unsigned int *a3)
{
  os_unfair_lock_s *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t **v11;
  uint64_t v12;
  _BOOL4 v13;
  uint64_t **v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t **v23;
  uint64_t v24;
  uint64_t **v25;
  uint64_t **v26;
  uint64_t **v27;
  BOOL v28;
  uint64_t v29;
  BOOL v30;

  if ((a2 & 0x80000000) != 0)
  {
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1281;
  }
  else if (a2)
  {
    v6 = *(os_unfair_lock_s **)(a1 + 19296);
    v7 = (uint64_t)&v6[18];
    os_unfair_lock_lock(v6 + 81);
    v8 = 0;
    v9 = *(_QWORD *)(a1 + 28960);
    v10 = v9 != 0;
    v11 = (uint64_t **)(v9 + 40);
    if (!v9)
      v11 = 0;
    v27 = v11;
    v12 = *(_QWORD *)(a1 + 28968);
    v29 = *(_QWORD *)(a1 + 28960);
    v13 = v12 != v9 && v12 != 0;
    v14 = (uint64_t **)(v12 + 40);
    if (!v13)
      v14 = 0;
    v26 = v14;
    v15 = *a3;
    v28 = v13;
    v30 = v10 || v13;
    v16 = *a3;
    do
    {
      if (a3[v8])
      {
        v17 = 0;
        v18 = a1 + 20776;
        do
        {
          v19 = 0;
          while (*(_DWORD *)(*(_QWORD *)(v18 + 8 * v19) + 16) != a3[v8])
          {
            if ((_DWORD)++v19 == 11)
              goto LABEL_15;
          }
          gleBindTexture(a1, v19, 0, v17);
LABEL_15:
          ++v17;
          v18 += 88;
        }
        while (v17 != 32);
        if (v30)
        {
          v20 = gleLookupHashObject(v7, a3[v8]);
          if (v20)
          {
            v21 = v20;
            if (v29)
            {
              v22 = 0;
              v23 = v27;
              do
              {
                if (v21 == *v23)
                  gleFramebufferTexture(a1, *(_QWORD *)(a1 + 28960) + 40, v22, 0, 0, 0, 0, 0, 0);
                ++v22;
                v23 += 2;
              }
              while (v22 != 10);
            }
            if (v28)
            {
              v24 = 0;
              v25 = v26;
              do
              {
                if (v21 == *v25)
                  gleFramebufferTexture(a1, *(_QWORD *)(a1 + 28968) + 40, v24, 0, 0, 0, 0, 0, 0);
                ++v24;
                v25 += 2;
              }
              while (v24 != 10);
            }
          }
        }
        if (a3[v8] != v15)
        {
          gleUnbindDeleteHashNamesAndObjects(a1, v7, gleUnbindTextureObject, v16, v15 - v16);
          v16 = a3[v8];
          v15 = v16;
        }
      }
      else
      {
        gleUnbindDeleteHashNamesAndObjects(a1, v7, gleUnbindTextureObject, v16, v15 - v16);
        if (v8 + 1 >= (unint64_t)a2)
          goto LABEL_34;
        v16 = a3[v8 + 1];
        v15 = v16 - 1;
      }
      ++v8;
      ++v15;
    }
    while (v8 != a2);
    gleUnbindDeleteHashNamesAndObjects(a1, v7, gleUnbindTextureObject, v16, v15 - v16);
LABEL_34:
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
}

uint64_t *gleRemoveHashObject(uint64_t a1, unsigned int a2)
{
  uint64_t **v3;
  uint64_t *result;

  v3 = (uint64_t **)(*(_QWORD *)(a1 + 8) + 8 * (*(_DWORD *)(a1 + 24) & a2));
  result = *v3;
  if (*v3)
  {
    while (*((_DWORD *)result + 4) != a2)
    {
      v3 = (uint64_t **)result;
      result = (uint64_t *)*result;
      if (!result)
        return result;
    }
    --*(_DWORD *)(a1 + 28);
    *v3 = (uint64_t *)*result;
  }
  return result;
}

void gleDestroyEnableHashTable(int a1)
{
  char *v2;
  uint64_t i;
  _QWORD *v4;

  os_unfair_lock_lock((os_unfair_lock_t)&gle_enable_hash_table_lock);
  v2 = (char *)gle_enable_hash_table[a1];
  if (v2)
  {
    gle_enable_hash_table[a1] = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)&gle_enable_hash_table_lock);
    for (i = 16; i != 8208; i += 32)
    {
      v4 = *(_QWORD **)&v2[i];
      if (v4)
        gleFreeEnableHashObject(v4);
    }
    free(v2);
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)&gle_enable_hash_table_lock);
  }
}

void gleFreeEnableHashObject(_QWORD *a1)
{
  if (a1[2])
    gleFreeEnableHashObject();
  free(a1);
}

uint64_t glTestObjectAPPLE_Exec(uint64_t a1, int a2, unsigned int a3)
{
  int v3;
  uint64_t result;
  _WORD *v5;

  if (a2 > 35337)
  {
    switch(a2)
    {
      case 35338:
        return 1;
      case 35339:
        v3 = 0;
        return gleTestObject(a1, v3, a3, 1);
      case 36161:
        v3 = 4;
        return gleTestObject(a1, v3, a3, 1);
    }
  }
  else
  {
    switch(a2)
    {
      case 5890:
        v3 = 1;
        return gleTestObject(a1, v3, a3, 1);
      case 32884:
        v3 = 2;
        return gleTestObject(a1, v3, a3, 1);
      case 34227:
        v3 = 3;
        return gleTestObject(a1, v3, a3, 1);
    }
  }
  v5 = (_WORD *)(a1 + 29832);
  if (*(_WORD *)(a1 + 29832))
    return 0;
  result = 0;
  *v5 = 1280;
  return result;
}

unint64_t gleTestObject(uint64_t a1, int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t result;
  unsigned int v8;
  unint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t *v26;
  _QWORD *v27;

  v6 = a1 + 29832;
  switch(a2)
  {
    case 0:
      result = (unint64_t)gleLookupHashObject(a1 + 25872, a3);
      if (!result)
        goto LABEL_43;
      v8 = *(unsigned __int8 *)(v6 + 2664);
      if (!*(_BYTE *)(v6 + 2664))
        return 1;
      v9 = 0;
      v10 = (uint64_t *)(result + 40);
      v11 = (_QWORD *)(a1 + 32512);
      LOBYTE(result) = 1;
      do
      {
        if ((_BYTE)result)
        {
          result = (*(unsigned int (**)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(v11[206] + 1320))(*v11, 0, 0, a4, v10[v9]) != 0;
          v8 = *(unsigned __int8 *)(v6 + 2664);
        }
        else
        {
          result = 0;
        }
        ++v9;
        v11 += 209;
      }
      while (v9 < v8);
      return result;
    case 1:
      result = (unint64_t)gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 72, a3);
      if (!result)
        goto LABEL_43;
      v12 = *(unsigned __int8 *)(v6 + 2664);
      if (!*(_BYTE *)(v6 + 2664))
        return 1;
      v13 = 0;
      v14 = (uint64_t *)(result + 40);
      v15 = (_QWORD *)(a1 + 32512);
      LOBYTE(result) = 1;
      do
      {
        if ((_BYTE)result)
        {
          result = (*(unsigned int (**)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t))(v15[206] + 1320))(*v15, 1, 0, a4, v14[v13]) != 0;
          v12 = *(unsigned __int8 *)(v6 + 2664);
        }
        else
        {
          result = 0;
        }
        ++v13;
        v15 += 209;
      }
      while (v13 < v12);
      return result;
    case 2:
      result = (unint64_t)gleLookupHashObject(a1 + 26352, a3);
      if (!result)
        goto LABEL_43;
      v16 = *(unsigned __int8 *)(v6 + 2664);
      if (!*(_BYTE *)(v6 + 2664))
        return 1;
      v17 = 0;
      v18 = (uint64_t *)(result + 40);
      v19 = (_QWORD *)(a1 + 32512);
      LOBYTE(result) = 1;
      do
      {
        if ((_BYTE)result)
        {
          result = (*(unsigned int (**)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t))(v19[206] + 1320))(*v19, 2, 0, a4, v18[v17]) != 0;
          v16 = *(unsigned __int8 *)(v6 + 2664);
        }
        else
        {
          result = 0;
        }
        ++v17;
        v19 += 209;
      }
      while (v17 < v16);
      return result;
    case 3:
      result = (unint64_t)gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 264, a3);
      if (!result)
        goto LABEL_43;
      v20 = *(unsigned __int8 *)(v6 + 2664);
      if (!*(_BYTE *)(v6 + 2664))
        return 1;
      v21 = 0;
      v22 = (uint64_t *)(result + 40);
      v23 = (_QWORD *)(a1 + 32512);
      LOBYTE(result) = 1;
      do
      {
        if ((_BYTE)result)
        {
          result = (*(unsigned int (**)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t))(v23[206] + 1320))(*v23, 3, 0, a4, v22[v21]) != 0;
          v20 = *(unsigned __int8 *)(v6 + 2664);
        }
        else
        {
          result = 0;
        }
        ++v21;
        v23 += 209;
      }
      while (v21 < v20);
      return result;
    case 4:
      result = (unint64_t)gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 40, a3);
      if (!result)
      {
LABEL_43:
        if (!*(_WORD *)v6)
          *(_WORD *)v6 = 1282;
        return 1;
      }
      v24 = *(unsigned __int8 *)(v6 + 2664);
      if (!*(_BYTE *)(v6 + 2664))
        return 1;
      v25 = 0;
      v26 = (uint64_t *)(result + 40);
      v27 = (_QWORD *)(a1 + 32512);
      LOBYTE(result) = 1;
      do
      {
        if ((_BYTE)result)
        {
          result = (*(unsigned int (**)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t))(v27[206] + 1320))(*v27, 1, 0, a4, v26[v25]) != 0;
          v24 = *(unsigned __int8 *)(v6 + 2664);
        }
        else
        {
          result = 0;
        }
        ++v25;
        v27 += 209;
      }
      while (v25 < v24);
      return result;
    default:
      return 1;
  }
}

int8x8_t glFrustum_Exec(uint64_t a1, int8x8_t result, double a3, double a4, double a5, double a6, double a7)
{
  __int16 *v7;
  __int16 v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float32x4_t *v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;

  v7 = (__int16 *)(a1 + 29832);
  if (*(int *)(a1 + 20484) < 24)
  {
    if (a6 <= 0.0 || a7 <= 0.0)
      goto LABEL_15;
    v9 = a3 - *(double *)&result;
    v10 = -v9;
    if (v9 >= 0.0)
      v10 = a3 - *(double *)&result;
    if (v10 < 0.000005)
      goto LABEL_15;
    v11 = a5 - a4;
    v12 = -v11;
    if (v11 >= 0.0)
      v12 = a5 - a4;
    if (v12 < 0.000005)
      goto LABEL_15;
    v13 = a6 - a7;
    v14 = -v13;
    if (v13 >= 0.0)
      v14 = a6 - a7;
    if (v14 >= 0.000005)
    {
      v15 = *(float32x4_t **)(a1 + 19976);
      v16 = 1.0 / v9;
      v17 = 1.0 / v11;
      v18 = 1.0 / v13;
      v19 = a6 + a6;
      v20 = v16 * v19;
      v21 = (*(double *)&result + a3) * v16;
      v22 = (a4 + a5) * v17;
      v23 = (a6 + a7) * v18;
      v24 = v19 * a7 * v18;
      v26 = *v15;
      v25 = v15[1];
      v27 = vmulq_n_f32(v25, v17 * v19);
      v28 = v15[2];
      v15[2] = vsubq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v25, v22), *v15, v21), v28, v23), v15[3]);
      v15[3] = vmulq_n_f32(v28, v24);
      *v15 = vmulq_n_f32(v26, v20);
      v15[1] = v27;
      LODWORD(v15) = *(_DWORD *)(a1 + 20488);
      *(_DWORD *)(a1 + 1528) |= v15;
      *(_DWORD *)(a1 + 28652) = 0;
      result = vorr_s8(*(int8x8_t *)(a1 + 1540), (int8x8_t)vdup_n_s32(v15));
      *(double *)(a1 + 1540) = *(double *)&result;
    }
    else
    {
LABEL_15:
      if (!*v7)
      {
        v8 = 1281;
        goto LABEL_18;
      }
    }
  }
  else if (!*v7)
  {
    v8 = 1282;
LABEL_18:
    *v7 = v8;
  }
  return result;
}

_DWORD *gleSetEnable_TEXTURE_2D(_DWORD *result, uint64_t a2, int a3)
{
  unsigned int v3;
  _DWORD *v4;
  int v5;
  unsigned int v6;

  v3 = *((unsigned __int16 *)result + 11884);
  if (v3 >= 8)
  {
    if (!*((_WORD *)result + 14916))
      *((_WORD *)result + 14916) = 1282;
  }
  else
  {
    v4 = &result[19 * *((unsigned __int16 *)result + 11884)];
    v5 = v4[3921];
    v6 = v5 & 0xFFFFFFF7 | (8 * a3);
    if (v5 != v6)
    {
      v4[3921] = v6;
      return gleUpdateTextureParams(result, v3);
    }
  }
  return result;
}

uint64_t glTexEnvf_Exec(uint64_t result, int a2, int a3, double a4)
{
  uint64_t v4;
  int v5;
  int v6;
  __int16 v7;
  int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  int v26;

  v4 = *(unsigned __int16 *)(result + 23768);
  if (a2 == 8960)
  {
    if (v4 >= 8)
      goto LABEL_10;
    if (a3 > 34161)
    {
      switch(a3)
      {
        case 34176:
          v8 = (int)*(float *)&a4;
          if (((int)*(float *)&a4 - 34166) >= 3 && v8 != 5890)
            goto LABEL_126;
          v10 = result + 76 * *(unsigned __int16 *)(result + 23768);
          v11 = 15696;
          goto LABEL_124;
        case 34177:
          v8 = (int)*(float *)&a4;
          if (((int)*(float *)&a4 - 34166) >= 3 && v8 != 5890)
            goto LABEL_126;
          v10 = result + 76 * *(unsigned __int16 *)(result + 23768);
          v11 = 15698;
          goto LABEL_124;
        case 34178:
          v8 = (int)*(float *)&a4;
          if (((int)*(float *)&a4 - 34166) >= 3 && v8 != 5890)
            goto LABEL_126;
          v10 = result + 76 * *(unsigned __int16 *)(result + 23768);
          v11 = 15700;
          goto LABEL_124;
        case 34179:
        case 34180:
        case 34181:
        case 34182:
        case 34183:
        case 34187:
        case 34188:
        case 34189:
        case 34190:
        case 34191:
        case 34195:
        case 34196:
        case 34197:
        case 34198:
        case 34199:
          goto LABEL_126;
        case 34184:
          v8 = (int)*(float *)&a4;
          if (((int)*(float *)&a4 - 34166) >= 3 && v8 != 5890)
            goto LABEL_126;
          v10 = result + 76 * *(unsigned __int16 *)(result + 23768);
          v11 = 15702;
          goto LABEL_124;
        case 34185:
          v8 = (int)*(float *)&a4;
          if (((int)*(float *)&a4 - 34166) >= 3 && v8 != 5890)
            goto LABEL_126;
          v10 = result + 76 * *(unsigned __int16 *)(result + 23768);
          v11 = 15704;
          goto LABEL_124;
        case 34186:
          v8 = (int)*(float *)&a4;
          if (((int)*(float *)&a4 - 34166) >= 3 && v8 != 5890)
            goto LABEL_126;
          v10 = result + 76 * *(unsigned __int16 *)(result + 23768);
          v11 = 15706;
          goto LABEL_124;
        case 34192:
          v8 = (int)*(float *)&a4;
          if (((int)*(float *)&a4 & 0xFFFFFFFC) != 0x300)
            goto LABEL_126;
          v10 = result + 76 * *(unsigned __int16 *)(result + 23768);
          v11 = 15708;
          goto LABEL_124;
        case 34193:
          v8 = (int)*(float *)&a4;
          if (((int)*(float *)&a4 & 0xFFFFFFFC) != 0x300)
            goto LABEL_126;
          v10 = result + 76 * *(unsigned __int16 *)(result + 23768);
          v11 = 15710;
          goto LABEL_124;
        case 34194:
          v8 = (int)*(float *)&a4;
          if (((int)*(float *)&a4 & 0xFFFFFFFC) != 0x300)
            goto LABEL_126;
          v10 = result + 76 * *(unsigned __int16 *)(result + 23768);
          v11 = 15712;
          goto LABEL_124;
        case 34200:
          v8 = (int)*(float *)&a4;
          if (((int)*(float *)&a4 & 0xFFFFFFFE) != 0x302)
            goto LABEL_126;
          v10 = result + 76 * *(unsigned __int16 *)(result + 23768);
          v11 = 15714;
          goto LABEL_124;
        case 34201:
          v8 = (int)*(float *)&a4;
          if (((int)*(float *)&a4 & 0xFFFFFFFE) != 0x302)
            goto LABEL_126;
          v10 = result + 76 * *(unsigned __int16 *)(result + 23768);
          v11 = 15716;
          goto LABEL_124;
        case 34202:
          v8 = (int)*(float *)&a4;
          if (((int)*(float *)&a4 & 0xFFFFFFFE) != 0x302)
            goto LABEL_126;
          v10 = result + 76 * *(unsigned __int16 *)(result + 23768);
          v11 = 15718;
          goto LABEL_124;
        default:
          if (a3 != 34162)
          {
            if (a3 != 34163)
              goto LABEL_126;
            if (*(float *)&a4 == 4.0 || *(float *)&a4 == 1.0 || *(float *)&a4 == 2.0)
            {
              *(_DWORD *)(result + 76 * *(unsigned __int16 *)(result + 23768) + 15720) = LODWORD(a4);
              goto LABEL_125;
            }
            goto LABEL_61;
          }
          v8 = (int)*(float *)&a4;
          if ((int)*(float *)&a4 > 34022)
          {
            if ((v8 - 34164) >= 2)
            {
              v26 = 34023;
LABEL_122:
              if (v8 != v26)
                goto LABEL_126;
            }
          }
          else if (v8 != 260 && v8 != 7681)
          {
            v26 = 8448;
            goto LABEL_122;
          }
          v10 = result + 76 * *(unsigned __int16 *)(result + 23768);
          v11 = 15694;
          goto LABEL_124;
      }
    }
    if (a3 == 3356)
    {
      if (*(float *)&a4 != 4.0 && *(float *)&a4 != 1.0 && *(float *)&a4 != 2.0)
      {
LABEL_61:
        if (!*(_WORD *)(result + 29832))
          *(_WORD *)(result + 29832) = 1281;
        goto LABEL_125;
      }
      *(_DWORD *)(result + 76 * *(unsigned __int16 *)(result + 23768) + 15724) = LODWORD(a4);
LABEL_125:
      *(_DWORD *)(result + 28652) = 0;
      *(_DWORD *)(result + 1548) |= 0x20000u;
      return result;
    }
    if (a3 == 8704)
    {
      v8 = *(float *)&a4;
      if ((int)*(float *)&a4 > 8447)
      {
        if ((v8 - 8448) >= 2 && v8 != 34160)
          goto LABEL_126;
      }
      else if (v8 != 260 && v8 != 3042 && v8 != 7681)
      {
        goto LABEL_126;
      }
      v10 = result + 76 * *(unsigned __int16 *)(result + 23768);
      v11 = 15688;
      goto LABEL_124;
    }
    if (a3 != 34161)
      goto LABEL_126;
    v8 = (int)*(float *)&a4;
    if ((int)*(float *)&a4 > 34022)
    {
      if ((v8 - 34164) >= 2 && (v8 - 34478) >= 2)
      {
        v18 = 34023;
LABEL_108:
        if (v8 != v18)
          goto LABEL_126;
      }
    }
    else if (v8 != 260 && v8 != 7681)
    {
      v18 = 8448;
      goto LABEL_108;
    }
    v10 = result + 76 * *(unsigned __int16 *)(result + 23768);
    v11 = 15692;
LABEL_124:
    *(_WORD *)(v10 + v11) = v8;
    goto LABEL_125;
  }
  if (a2 != 34048)
  {
    if (a2 == 34913 && a3 == 34914)
    {
      if (v4 < 8)
      {
        if (*(float *)&a4 < 2)
        {
          v5 = 1 << v4;
          if (*(float *)&a4 == 1)
            v6 = *(_DWORD *)(result + 15384) | v5;
          else
            v6 = *(_DWORD *)(result + 15384) & ~v5;
          *(_DWORD *)(result + 15384) = v6;
          *(_DWORD *)(result + 28652) = 0;
          *(_DWORD *)(result + 1520) |= 0x400000u;
          return result;
        }
        goto LABEL_126;
      }
LABEL_10:
      if (*(_WORD *)(result + 29832))
        return result;
      v7 = 1282;
      goto LABEL_129;
    }
LABEL_126:
    if (*(_WORD *)(result + 29832))
      return result;
    v7 = 1280;
LABEL_129:
    *(_WORD *)(result + 29832) = v7;
    return result;
  }
  if (a3 != 34049)
    goto LABEL_126;
  *(_DWORD *)(result + 2272 + 4 * v4 + 13988) = LODWORD(a4);
  *(int32x4_t *)(result + 2272 + 76 * v4 + 13396) = vdupq_lane_s32(*(int32x2_t *)&a4, 0);
  if ((*(_WORD *)(*(_QWORD *)(result + 29032) + 26) & 0x2000) != 0)
  {
    v12 = *(_QWORD *)(result + 19248);
    if (v12)
    {
      v13 = *(unsigned __int16 *)(v12 + 2 * v4 + 3752);
      if (v13 <= 0x3FF)
      {
        *(_DWORD *)(result + ((v13 >> 3) & 0x1FFC) + 1552) |= 1 << v13;
        *(_DWORD *)(result + 28652) = 0;
        *(_DWORD *)(result + 1532) |= 0x800000u;
      }
    }
    v14 = *(_QWORD *)(result + 19272);
    if (v14)
    {
      v15 = *(unsigned __int16 *)(v14 + 2 * v4 + 3752);
      if (v15 <= 0x3FF)
      {
        *(_DWORD *)(result + ((v15 >> 3) & 0x1FFC) + 1936) |= 1 << v15;
        *(_DWORD *)(result + 28652) = 0;
        *(_DWORD *)(result + 1532) |= 0x4000000u;
      }
    }
    v16 = *(_QWORD *)(result + 19280);
    if (v16)
    {
      v17 = *(unsigned __int16 *)(v16 + 2 * v4 + 3752);
      if (v17 <= 0x3FF)
      {
        *(_DWORD *)(result + ((v17 >> 3) & 0x1FFC) + 2064) |= 1 << v17;
        *(_DWORD *)(result + 28652) = 0;
        *(_DWORD *)(result + 1532) |= 0x8000000u;
      }
    }
  }
  else
  {
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1536) |= 0x10000 << (v4 & 7);
  }
  return result;
}

_DWORD *gleSetEnable_BLEND(_DWORD *result, uint64_t a2, int a3)
{
  _BYTE *v3;
  int v4;

  v3 = result + 3780;
  if (a3)
    v4 = 255;
  else
    v4 = 0;
  if (v4 != *v3)
  {
    *v3 = v4;
    result[380] |= 2u;
    result[7163] = 0;
    result[387] |= 0x40000u;
  }
  return result;
}

uint64_t glBlendFunc_Exec(uint64_t result, unsigned int a2, unsigned int a3)
{
  _DWORD *v3;
  int v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;

  v3 = (_DWORD *)(result + 28652);
  v4 = *(_DWORD *)(result + 29812);
  v5 = v4 & 0xFFFFFF00;
  if (a2 < 2)
    goto LABEL_2;
  if ((int)a2 <= 0x8000)
  {
    if (a2 - 770 < 7)
      goto LABEL_2;
    if (a2 - 768 >= 2)
      goto LABEL_35;
    goto LABEL_32;
  }
  if (a2 - 32769 < 4)
  {
LABEL_32:
    if (*(_BYTE *)(result + 32501) == 2)
      goto LABEL_35;
    goto LABEL_2;
  }
  if (a2 - 35065 >= 3 && a2 != 34185)
    goto LABEL_35;
  v5 = v4 | 0xFF;
LABEL_2:
  if (a3 < 2)
  {
LABEL_3:
    if (v4 != v5)
    {
      *(_DWORD *)(result + 29812) = v5;
      *v3 = 0;
      *(_DWORD *)(result + 1548) |= 0x80000u;
    }
    v6 = 0;
    v7 = ((unint64_t)a2 << 32) | ((unint64_t)a3 << 48) | ((unint64_t)a3 << 16) | a2;
    v8 = (uint64_t *)(result + 15008);
    do
    {
      v10 = *v8;
      v8 = (uint64_t *)((char *)v8 + 12);
      v9 = v10;
    }
    while (v10 == v7 && v6++ < 7);
    if (v9 != v7)
    {
      for (i = 0; i != 96; i += 12)
        *(_QWORD *)(result + 15008 + i) = v7;
      *(_BYTE *)(result + 15121) &= ~1u;
      *(_DWORD *)(result + 1520) |= 2u;
      *v3 = 0;
      *(_DWORD *)(result + 1548) |= 0x40000u;
    }
    return result;
  }
  if ((int)a3 <= 0x8000)
  {
    if (a3 - 768 > 8)
      goto LABEL_35;
    if (((1 << a3) & 0x13F) != 0)
      goto LABEL_3;
    goto LABEL_34;
  }
  if (a3 - 32769 < 4)
  {
LABEL_34:
    if (*(_BYTE *)(result + 32501) != 2)
      goto LABEL_3;
    goto LABEL_35;
  }
  if (a3 - 35065 < 3 || a3 == 34185)
  {
    v5 |= 0xFFu;
    goto LABEL_3;
  }
LABEL_35:
  if (!*(_WORD *)(result + 29832))
    *(_WORD *)(result + 29832) = 1280;
  return result;
}

uint64_t glGetError_Exec(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = a1 + 29832;
  result = *(unsigned __int16 *)(a1 + 29832);
  *(_WORD *)v2 = 0;
  if (!(_DWORD)result)
  {
    v4 = (_QWORD *)(a1 + 32512);
    v5 = -1;
    while (++v5 < (unint64_t)*(unsigned __int8 *)(v2 + 2664))
    {
      v6 = v4 + 209;
      result = (*(uint64_t (**)(_QWORD))(v4[206] + 1240))(*v4);
      v4 = v6;
      if ((_DWORD)result)
        return result;
    }
    return 0;
  }
  return result;
}

uint64_t glDisable_Exec(uint64_t result, int a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 19304) + 32 * ((a2 + 7) ^ BYTE1(a2));
  do
  {
    if (*(_DWORD *)v2 == a2)
      return (*(uint64_t (**)(void))(v2 + 8))();
    v2 = *(_QWORD *)(v2 + 16);
  }
  while (v2);
  if (!*(_WORD *)(result + 29832))
    *(_WORD *)(result + 29832) = 1280;
  return result;
}

unint64_t glClear_Exec(unint64_t result, uint64_t a2, double a3, double a4, double a5)
{
  _WORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _WORD *v9;
  int v10;
  int v11;

  v5 = (_WORD *)(result + 29830);
  if ((a2 & 0xFFFFB8FF) != 0)
  {
    if (!*(_WORD *)(result + 29832))
      *(_WORD *)(result + 29832) = 1281;
  }
  else
  {
    v6 = a2;
    v7 = result;
    v8 = result + 17984;
    if ((a2 & 0x200) == 0)
      goto LABEL_9;
    if (*(_BYTE *)(*(_QWORD *)(result + 29480) + 52)
      && !*(_BYTE *)v8
      && !*(_QWORD *)(result + 28968)
      && !*(_QWORD *)(result + 28960))
    {
      result = gleAccumFast(result, 5376, 0.0);
    }
    v6 = v6 & 0xFFFFFDFF;
    if ((_DWORD)v6)
    {
LABEL_9:
      if ((*(_BYTE *)(v7 + 1540) & 4) != 0)
      {
        result = gleGenerateMatrixIdentifier(v7, v7 + 9488, a3, a4, a5);
        *(_DWORD *)(v8 + 1168) = *(_DWORD *)(v8 + 1168) & 0xFFFFFEFF | (((_DWORD)result != -1074791426) << 8);
        *(_DWORD *)(v8 + 11748) = result;
      }
      if ((*(_DWORD *)(v8 + 11816) & 0x743C0478) != 0)
      {
        result = gleUpdateDrawFramebufferState(v7, a3, a4, a5);
        if ((_DWORD)result)
        {
          if ((_DWORD)result != 16711680 && !v5[1])
            v5[1] = result;
          return result;
        }
      }
      if (*v5 != 7168 || *(_BYTE *)v8)
        return result;
      v9 = (_WORD *)(v7 + 15342);
      if (*(_BYTE *)(*(_QWORD *)(v7 + 29480) + 110))
      {
        v10 = *v9 & 0xFBFF;
        if ((v6 & 0x4000) == 0)
          v10 = *v9 & 0xFB00;
        if ((v6 & 0x100) == 0)
          v10 &= 0xFEFFu;
        if ((v6 & 0x400) != 0)
        {
          if ((v10 & 0x200) != 0)
          {
LABEL_45:
            result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v7 + 29496) + 208))(*(_QWORD *)(v7 + 29464));
LABEL_46:
            v11 = *(_DWORD *)(*(_QWORD *)(v7 + 19296) + 316);
            if (*(_DWORD *)(v8 + 11832) != v11)
            {
              if (*(_QWORD *)(v7 + 28960))
              {
                result = gleInvalidateCurrentDrawFramebufferTextures(v7);
                v11 = *(_DWORD *)(*(_QWORD *)(v7 + 19296) + 316);
              }
              *(_DWORD *)(v8 + 11832) = v11;
            }
            return result;
          }
        }
        else
        {
          v10 &= ~0x200u;
        }
        if (!v10)
          return result;
        goto LABEL_45;
      }
      if ((v6 & 0x4000) != 0)
      {
        if (*(_BYTE *)v9)
          v6 = v6;
        else
          v6 = v6 & 0xFFFFBFFF;
        if ((v6 & 0x100) == 0)
        {
LABEL_24:
          if ((v6 & 0x400) == 0)
            goto LABEL_43;
LABEL_41:
          if ((*v9 & 0x200) != 0)
          {
LABEL_44:
            result = (**(uint64_t (***)(_QWORD, uint64_t))(v7 + 29488))(*(_QWORD *)(v7 + 29464), v6);
            goto LABEL_46;
          }
          v6 = v6 & 0xFFFFFBFF;
LABEL_43:
          if (!(_DWORD)v6)
            return result;
          goto LABEL_44;
        }
      }
      else if ((v6 & 0x100) == 0)
      {
        goto LABEL_24;
      }
      if ((*v9 & 0x100) != 0)
        v6 = v6;
      else
        v6 = v6 & 0xFFFFFEFF;
      if ((v6 & 0x400) == 0)
        goto LABEL_43;
      goto LABEL_41;
    }
  }
  return result;
}

uint64_t glPushMatrix_Exec(uint64_t result)
{
  __int16 *v1;
  uint64_t v2;
  __int16 v3;
  int *v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  _OWORD *v9;
  _OWORD *v10;
  int v11;
  _OWORD *v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;

  v1 = (__int16 *)(result + 29832);
  v2 = *(int *)(result + 20484);
  if ((int)v2 < 24)
  {
    v4 = (int *)(result + 4 * v2 + 20000);
    v5 = *(_QWORD *)(result + 19992);
    v6 = *(_DWORD *)(v5 + 4 * v2);
    v7 = *v4;
    if (*v4 >= *(_DWORD *)(v5 + 4 * ((int)v2 + 1)) - v6)
    {
      if (!*v1)
      {
        v3 = 1283;
        goto LABEL_12;
      }
    }
    else
    {
      v8 = v6 + v7;
      v9 = (_OWORD *)(result + (v2 << 6));
      v10 = (_OWORD *)(*(_QWORD *)(result + 19288) + ((uint64_t)(2 * v8) << 6));
      *v10 = v9[585];
      v10[1] = v9[586];
      v10[2] = v9[587];
      v10[3] = v9[588];
      v11 = 1 << v2;
      if ((*(_DWORD *)(result + 1544) & v11) != 0)
      {
        *(_DWORD *)(*(_QWORD *)(result + 19288) + (((uint64_t)(2 * v8) << 6) | 0x40)) = 2143289344;
      }
      else
      {
        v12 = (_OWORD *)(*(_QWORD *)(result + 19288) + (((uint64_t)v8 << 7) | 0x40));
        *v12 = v9[681];
        v12[1] = v9[682];
        v12[2] = v9[683];
        v12[3] = v9[684];
        v13 = 1 << v8;
        if ((*(_DWORD *)(result + 12520) & v11) != 0)
        {
          v14 = *(_QWORD *)(result + 29520);
          v15 = v8 >> 5;
          v16 = *(_DWORD *)(v14 + 4 * v15) | v13;
        }
        else
        {
          v14 = *(_QWORD *)(result + 29520);
          v15 = v8 >> 5;
          v16 = *(_DWORD *)(v14 + 4 * v15) & ~v13;
        }
        *(_DWORD *)(v14 + 4 * v15) = v16;
      }
      *v4 = v7 + 1;
    }
  }
  else if (!*v1)
  {
    v3 = 1282;
LABEL_12:
    *v1 = v3;
  }
  return result;
}

uint64_t gleModelMatInvert(uint64_t a1)
{
  _DWORD *v2;
  double v3;
  float32x4_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t result;
  int v21;
  int v22;
  _BOOL4 v23;
  int v24;

  v2 = (_DWORD *)(a1 + 28652);
  *(_DWORD *)(a1 + 1544) &= ~0x10u;
  gleInvertMatrix(a1, 4);
  if (*(_BYTE *)(a1 + 12517))
  {
    v6 = 0;
    v7 = a1 + 11152;
    *(float *)&v3 = 1.0
                  / sqrtf((float)((float)(*(float *)(a1 + 11160) * *(float *)(a1 + 11160))+ (float)(*(float *)(a1 + 11176) * *(float *)(a1 + 11176)))+ (float)(*(float *)(a1 + 11192) * *(float *)(a1 + 11192)));
    do
    {
      v4 = vmulq_n_f32(*(float32x4_t *)(v7 + v6), *(float *)&v3);
      *(float32x4_t *)(v7 + v6) = v4;
      v6 += 16;
    }
    while (v6 != 64);
    *(_DWORD *)(a1 + 12512) = LODWORD(v3);
    v8 = *(_QWORD *)(a1 + 19248);
    if (v8)
    {
      v9 = *(unsigned __int16 *)(v8 + 3794);
      if (v9 <= 0x3FF)
      {
        *(_DWORD *)(a1 + ((v9 >> 3) & 0x1FFC) + 1552) |= 1 << v9;
        *v2 = 0;
        *(_DWORD *)(a1 + 1532) |= 0x800000u;
      }
    }
    v10 = *(_QWORD *)(a1 + 19272);
    if (v10)
    {
      v11 = *(unsigned __int16 *)(v10 + 3794);
      if (v11 <= 0x3FF)
      {
        *(_DWORD *)(a1 + ((v11 >> 3) & 0x1FFC) + 1936) |= 1 << v11;
        *v2 = 0;
        *(_DWORD *)(a1 + 1532) |= 0x4000000u;
      }
    }
    v12 = *(_QWORD *)(a1 + 19280);
    if (v12)
    {
      v13 = *(unsigned __int16 *)(v12 + 3794);
      if (v13 <= 0x3FF)
      {
        *(_DWORD *)(a1 + ((v13 >> 3) & 0x1FFC) + 2064) |= 1 << v13;
        *v2 = 0;
        *(_DWORD *)(a1 + 1532) |= 0x8000000u;
      }
    }
  }
  else
  {
    LODWORD(v3) = *(_DWORD *)(a1 + 12512);
    v4.i32[0] = 1.0;
    if (*(float *)&v3 != 1.0)
    {
      v14 = *(_QWORD *)(a1 + 19248);
      if (v14)
      {
        v15 = *(unsigned __int16 *)(v14 + 3794);
        if (v15 <= 0x3FF)
        {
          *(_DWORD *)(a1 + ((v15 >> 3) & 0x1FFC) + 1552) |= 1 << v15;
          *v2 = 0;
          *(_DWORD *)(a1 + 1532) |= 0x800000u;
        }
      }
      v16 = *(_QWORD *)(a1 + 19272);
      if (v16)
      {
        v17 = *(unsigned __int16 *)(v16 + 3794);
        if (v17 <= 0x3FF)
        {
          *(_DWORD *)(a1 + ((v17 >> 3) & 0x1FFC) + 1936) |= 1 << v17;
          *v2 = 0;
          *(_DWORD *)(a1 + 1532) |= 0x4000000u;
        }
      }
      v18 = *(_QWORD *)(a1 + 19280);
      if (v18)
      {
        v19 = *(unsigned __int16 *)(v18 + 3794);
        if (v19 <= 0x3FF)
        {
          *(_DWORD *)(a1 + ((v19 >> 3) & 0x1FFC) + 2064) |= 1 << v19;
          *v2 = 0;
          *(_DWORD *)(a1 + 1532) |= 0x8000000u;
        }
      }
      *(_DWORD *)(a1 + 12512) = 1065353216;
    }
  }
  result = gleGenerateMatrixIdentifier(a1, a1 + 11152, v3, *(double *)v4.i64, v5);
  v21 = v2[269];
  v22 = v21 & 0x3FCFF3FC;
  v23 = (v21 & 0x3FCFF3FC) == 1070593020;
  v24 = ((_DWORD)result == -1074791426) ^ (v21 == -1074791426);
  if (v22 != 1070593020)
    v24 = 1;
  if ((~(_DWORD)result & 0x3FCFF3FC) != 0)
    v24 = v23;
  if (v24 == 1)
  {
    *v2 = 0;
    *(_DWORD *)(a1 + 1548) |= 0x10010u;
  }
  v2[269] = result;
  return result;
}

uint64_t glPixelZoom_Exec(uint64_t result, float a2, float a3)
{
  *(float *)(result + 18440) = a2;
  *(float *)(result + 18444) = a3;
  *(_DWORD *)(result + 19160) = *(_DWORD *)(result + 19160) & 0xFFFF3FFF | ((a2 != 1.0) << 14) | ((a3 != 1.0) << 15);
  return result;
}

int8x8_t glLoadMatrixf_Exec(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int8x8_t *v4;
  unsigned int v5;
  int8x8_t result;

  v3 = a1 + 20484;
  if (*(int *)(a1 + 20484) < 24)
  {
    v4 = (int8x8_t *)(a1 + 1540);
    gleLoadMatrixf(a2, *(_QWORD *)(a1 + 19976));
    v5 = *(_DWORD *)(v3 + 4);
    *(_DWORD *)(a1 + 1528) |= v5;
    *(_DWORD *)(v3 + 8168) = 0;
    result = vorr_s8(*v4, (int8x8_t)vdup_n_s32(v5));
    *v4 = result;
  }
  else if (!*(_WORD *)(a1 + 29832))
  {
    *(_WORD *)(a1 + 29832) = 1282;
  }
  return result;
}

float gleLoadMatrixf(uint64_t a1, uint64_t a2)
{
  float result;

  *(_DWORD *)a2 = *(_DWORD *)a1;
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a2 + 20) = *(_DWORD *)(a1 + 20);
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(a2 + 36) = *(_DWORD *)(a1 + 36);
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(a2 + 44) = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 48);
  *(_DWORD *)(a2 + 52) = *(_DWORD *)(a1 + 52);
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  result = *(float *)(a1 + 60);
  *(float *)(a2 + 60) = result;
  return result;
}

uint64_t glPopMatrix_Exec(uint64_t result, double a2, double a3, double a4)
{
  __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  int *v9;
  int v10;
  int v11;
  int v12;
  _OWORD *v13;
  _OWORD *v14;
  int v15;
  _OWORD *v16;
  _OWORD *v17;
  __int128 v18;
  int v19;
  int v20;
  int v21;
  int v22;
  _BOOL4 v23;
  int v24;

  v4 = (__int16 *)(result + 29832);
  v5 = result + 20484;
  v6 = *(int *)(result + 20484);
  if ((int)v6 >= 24)
  {
    if (*v4)
      return result;
    v7 = 1282;
LABEL_11:
    *v4 = v7;
    return result;
  }
  v8 = result;
  v9 = (int *)(result + 4 * v6 + 20000);
  if (*v9 <= 0)
  {
    if (*v4)
      return result;
    v7 = 1284;
    goto LABEL_11;
  }
  v10 = *(_DWORD *)(*(_QWORD *)(result + 19992) + 4 * v6);
  v11 = *v9 - 1;
  *v9 = v11;
  v12 = v10 + v11;
  v13 = (_OWORD *)(*(_QWORD *)(result + 19288) + ((uint64_t)(2 * v12) << 6));
  v14 = (_OWORD *)(result + (v6 << 6));
  v14[585] = *v13;
  v14[586] = v13[1];
  v14[587] = v13[2];
  v14[588] = v13[3];
  v15 = *(_DWORD *)(result + 20488);
  *(_DWORD *)(result + 1528) |= v15;
  *(_DWORD *)(result + 28652) = 0;
  *(_DWORD *)(result + 1540) |= v15;
  if ((v15 & 0xFFFFFC & *(_DWORD *)(result + 2216)) != 0)
  {
    v16 = (_OWORD *)(*(_QWORD *)(result + 19288) + (((uint64_t)v12 << 7) | 0x40));
    if (*(_DWORD *)v16 != 2143289344)
    {
      v17 = (_OWORD *)(result + (v6 << 6));
      v17[681] = *v16;
      v17[682] = v16[1];
      v17[683] = v16[2];
      v18 = v16[3];
      v17[684] = v18;
      v19 = 1 << v6;
      if (((*(_DWORD *)(*(_QWORD *)(result + 29520) + 4 * (v12 >> 5)) >> v12) & 1) != 0)
        v20 = *(_DWORD *)(result + 12520) | v19;
      else
        v20 = *(_DWORD *)(result + 12520) & ~v19;
      *(_DWORD *)(result + 12520) = v20;
      if ((_DWORD)v6 == 4)
      {
        result = gleGenerateMatrixIdentifier(result, result + 11152, *(double *)&v18, a3, a4);
        v21 = *(_DWORD *)(v5 + 9244);
        v22 = v21 & 0x3FCFF3FC;
        v23 = (v21 & 0x3FCFF3FC) == 1070593020;
        v24 = ((_DWORD)result == -1074791426) ^ (v21 == -1074791426);
        if (v22 != 1070593020)
          v24 = 1;
        if ((~(_DWORD)result & 0x3FCFF3FC) != 0)
          v24 = v23;
        if (v24 == 1)
          *(_DWORD *)(v8 + 1548) |= 0x10010u;
        *(_DWORD *)(v5 + 9244) = result;
      }
      *(_DWORD *)(v8 + 1544) &= ~(v15 & 0xFFFFFC);
      v15 &= 0xFF000003;
    }
  }
  *(_DWORD *)(v5 + 8168) = 0;
  *(_DWORD *)(v8 + 1544) |= v15;
  return result;
}

uint64_t gleTexLevelStorage(uint64_t result, unsigned int a2, unsigned int a3, __int16 *a4, _WORD *a5)
{
  unsigned int v5;
  __int16 v6;
  _BOOL4 v8;
  __int16 v9;
  _BOOL4 v11;
  __int16 v12;
  __int16 v13;
  __int16 v14;
  __int16 v15;
  BOOL v16;
  __int16 v17;
  __int16 v18;
  __int16 v19;
  BOOL v20;
  __int16 v21;
  BOOL v22;
  __int16 v23;
  __int16 v24;
  BOOL v25;
  __int16 v26;
  BOOL v27;
  __int16 v28;
  __int16 v29;
  BOOL v30;
  __int16 v31;
  BOOL v32;
  __int16 v33;
  BOOL v34;
  __int16 v35;

  v5 = a3 & 0xFFFFFFFE;
  if (a2 == 34233 && v5 == 34234)
  {
    v6 = -31303;
LABEL_7:
    *a4 = v6;
LABEL_22:
    *a5 = a3;
    return result;
  }
  if (a2 == 35359 && v5 == 34234)
  {
    v6 = -30177;
    goto LABEL_7;
  }
  v8 = a2 == 37883 || a2 - 35429 < 2;
  if (a3 == 5121 && v8)
    goto LABEL_16;
  if (a2 == 37902 && a3 == 5121)
  {
    v9 = -27634;
LABEL_20:
    *a4 = v9;
    goto LABEL_21;
  }
  v11 = a2 - 35431 < 0xE || a2 >> 1 == 18942;
  if (a3 == 5121 && v11 || a2 - 37875 <= 5 && a3 == 5121 || a2 - 37903 <= 1 && a3 == 5121)
  {
LABEL_16:
    *a4 = a2;
LABEL_21:
    LOWORD(a3) = 5121;
    goto LABEL_22;
  }
  if ((int)result > 36193)
  {
    if ((int)result <= 37487)
    {
      switch((int)result)
      {
        case 36194:
LABEL_190:
          *a4 = 6407;
          LOWORD(a3) = -31901;
          goto LABEL_22;
        case 36195:
        case 36196:
        case 36197:
        case 36198:
        case 36199:
        case 36200:
        case 36201:
        case 36202:
        case 36203:
        case 36204:
        case 36205:
        case 36206:
        case 36207:
        case 36244:
        case 36245:
        case 36246:
        case 36247:
        case 36248:
        case 36249:
        case 36250:
        case 36251:
        case 36252:
        case 36253:
        case 36254:
        case 36255:
        case 36256:
        case 36257:
        case 36258:
        case 36259:
        case 36260:
        case 36261:
        case 36262:
        case 36263:
        case 36264:
        case 36265:
        case 36266:
        case 36267:
        case 36268:
        case 36269:
        case 36270:
        case 36271:
        case 36272:
        case 36273:
        case 36274:
        case 36275:
        case 36276:
        case 36277:
        case 36278:
        case 36279:
        case 36280:
        case 36281:
        case 36282:
          return result;
        case 36208:
          v25 = a2 == 32993;
          v12 = 6408;
          v26 = -32543;
          goto LABEL_120;
        case 36209:
          v25 = a2 == 32992;
          v12 = 6407;
          v26 = -32544;
LABEL_120:
          if (v25)
            v12 = v26;
          goto LABEL_147;
        case 36210:
          v12 = 6406;
          goto LABEL_147;
        case 36211:
        case 36212:
          v12 = 6409;
          goto LABEL_147;
        case 36213:
          v12 = 6410;
          goto LABEL_147;
        case 36214:
LABEL_74:
          v16 = a2 == 32993;
          v13 = 6408;
          v17 = -32543;
          goto LABEL_75;
        case 36215:
LABEL_73:
          v16 = a2 == 32992;
          v13 = 6407;
          v17 = -32544;
LABEL_75:
          if (v16)
            v13 = v17;
          goto LABEL_97;
        case 36216:
LABEL_72:
          v13 = 6406;
          goto LABEL_97;
        case 36217:
        case 36218:
LABEL_47:
          v13 = 6409;
          goto LABEL_97;
        case 36219:
LABEL_68:
          v13 = 6410;
LABEL_97:
          *a4 = v13;
LABEL_98:
          LOWORD(a3) = 5123;
          goto LABEL_22;
        case 36220:
LABEL_199:
          v34 = a2 == 32993;
          v9 = 6408;
          v35 = -32543;
          goto LABEL_200;
        case 36221:
LABEL_193:
          v34 = a2 == 32992;
          v9 = 6407;
          v35 = -32544;
LABEL_200:
          if (v34)
            v9 = v35;
          goto LABEL_20;
        case 36222:
LABEL_71:
          v9 = 6406;
          goto LABEL_20;
        case 36223:
        case 36224:
LABEL_61:
          v9 = 6409;
          goto LABEL_20;
        case 36225:
LABEL_67:
          v9 = 6410;
          goto LABEL_20;
        case 36226:
          v27 = a2 == 32993;
          v18 = 6408;
          v28 = -32543;
          goto LABEL_127;
        case 36227:
          v27 = a2 == 32992;
          v18 = 6407;
          v28 = -32544;
LABEL_127:
          if (v27)
            v18 = v28;
          goto LABEL_145;
        case 36228:
          v18 = 6406;
          goto LABEL_145;
        case 36229:
        case 36230:
          v18 = 6409;
          goto LABEL_145;
        case 36231:
          v18 = 6410;
LABEL_145:
          *a4 = v18;
          LOWORD(a3) = 5124;
          goto LABEL_22;
        case 36232:
LABEL_87:
          v22 = a2 == 32993;
          v19 = 6408;
          v23 = -32543;
          goto LABEL_88;
        case 36233:
LABEL_86:
          v22 = a2 == 32992;
          v19 = 6407;
          v23 = -32544;
LABEL_88:
          if (v22)
            v19 = v23;
          goto LABEL_134;
        case 36234:
          v19 = 6406;
          goto LABEL_134;
        case 36235:
        case 36236:
          v19 = 6409;
          goto LABEL_134;
        case 36237:
          v19 = 6410;
LABEL_134:
          *a4 = v19;
          LOWORD(a3) = 5122;
          goto LABEL_22;
        case 36238:
LABEL_82:
          v20 = a2 == 32993;
          v15 = 6408;
          v21 = -32543;
          goto LABEL_83;
        case 36239:
LABEL_81:
          v20 = a2 == 32992;
          v15 = 6407;
          v21 = -32544;
LABEL_83:
          if (v20)
            v15 = v21;
          break;
        case 36240:
          v15 = 6406;
          break;
        case 36241:
        case 36242:
          v15 = 6409;
          break;
        case 36243:
          v15 = 6410;
          break;
        case 36283:
        case 36284:
        case 36285:
        case 36286:
          goto LABEL_49;
        default:
          switch((int)result)
          {
            case 36756:
LABEL_58:
              v15 = 6403;
              goto LABEL_137;
            case 36757:
LABEL_91:
              v15 = -32217;
              goto LABEL_137;
            case 36758:
              goto LABEL_81;
            case 36759:
              goto LABEL_82;
            case 36760:
LABEL_92:
              v19 = 6403;
              goto LABEL_134;
            case 36761:
LABEL_93:
              v19 = -32217;
              goto LABEL_134;
            case 36762:
              goto LABEL_86;
            case 36763:
              goto LABEL_87;
            default:
              if ((_DWORD)result != 36975)
                return result;
LABEL_115:
              if (a3 == 33640 || a3 == 32822)
                goto LABEL_205;
              *a4 = 6408;
              LOWORD(a3) = -32714;
              break;
          }
          goto LABEL_22;
      }
LABEL_137:
      *a4 = v15;
      LOWORD(a3) = 5120;
      goto LABEL_22;
    }
    switch((int)result)
    {
      case 37793:
        v9 = -32543;
        goto LABEL_20;
      case 37794:
      case 37795:
      case 37796:
      case 37797:
      case 37798:
      case 37799:
      case 37800:
      case 37801:
      case 37802:
      case 37803:
      case 37804:
      case 37805:
      case 37806:
      case 37807:
      case 37822:
      case 37823:
      case 37824:
      case 37825:
      case 37826:
      case 37827:
      case 37828:
      case 37829:
      case 37830:
      case 37831:
      case 37832:
      case 37833:
      case 37834:
      case 37835:
      case 37836:
      case 37837:
      case 37838:
      case 37839:
      case 37854:
      case 37855:
      case 37856:
      case 37857:
      case 37858:
      case 37859:
      case 37860:
      case 37861:
      case 37862:
      case 37863:
      case 37864:
      case 37865:
      case 37866:
      case 37867:
      case 37868:
      case 37869:
      case 37870:
      case 37871:
      case 37872:
      case 37873:
      case 37882:
        return result;
      case 37808:
      case 37809:
      case 37810:
      case 37811:
      case 37812:
      case 37813:
      case 37814:
      case 37815:
      case 37816:
      case 37817:
      case 37818:
      case 37819:
      case 37820:
      case 37821:
      case 37886:
      case 37887:
      case 37888:
      case 37889:
      case 37890:
      case 37891:
      case 37892:
      case 37893:
      case 37894:
      case 37895:
      case 37896:
      case 37897:
      case 37898:
      case 37899:
      case 37900:
      case 37901:
LABEL_49:
        LOWORD(a3) = 0;
        *a4 = result;
        goto LABEL_22;
      case 37840:
        LOWORD(a3) = 0;
        v6 = -27728;
        goto LABEL_7;
      case 37841:
        LOWORD(a3) = 0;
        v6 = -27727;
        goto LABEL_7;
      case 37842:
        LOWORD(a3) = 0;
        v6 = -27726;
        goto LABEL_7;
      case 37843:
        LOWORD(a3) = 0;
        v6 = -27725;
        goto LABEL_7;
      case 37844:
        LOWORD(a3) = 0;
        v6 = -27724;
        goto LABEL_7;
      case 37845:
        LOWORD(a3) = 0;
        v6 = -27723;
        goto LABEL_7;
      case 37846:
        LOWORD(a3) = 0;
        v6 = -27722;
        goto LABEL_7;
      case 37847:
        LOWORD(a3) = 0;
        v6 = -27721;
        goto LABEL_7;
      case 37848:
        LOWORD(a3) = 0;
        v6 = -27720;
        goto LABEL_7;
      case 37849:
        LOWORD(a3) = 0;
        v6 = -27719;
        goto LABEL_7;
      case 37850:
        LOWORD(a3) = 0;
        v6 = -27718;
        goto LABEL_7;
      case 37851:
        LOWORD(a3) = 0;
        v6 = -27717;
        goto LABEL_7;
      case 37852:
        LOWORD(a3) = 0;
        v6 = -27716;
        goto LABEL_7;
      case 37853:
        LOWORD(a3) = 0;
        v6 = -27715;
        goto LABEL_7;
      case 37874:
        *a4 = a2;
        LOWORD(a3) = -31896;
        goto LABEL_22;
      case 37875:
      case 37876:
      case 37877:
      case 37878:
      case 37879:
      case 37880:
      case 37883:
      case 37884:
      case 37885:
      case 37902:
      case 37903:
      case 37904:
        goto LABEL_16;
      case 37881:
        *a4 = a2;
        LOWORD(a3) = -27654;
        goto LABEL_22;
      default:
        switch((int)result)
        {
          case 37488:
          case 37489:
          case 37490:
          case 37491:
          case 37492:
          case 37494:
          case 37496:
            goto LABEL_49;
          case 37493:
            LOWORD(a3) = 0;
            v6 = -28044;
            goto LABEL_7;
          case 37495:
            LOWORD(a3) = 0;
            v6 = -28042;
            goto LABEL_7;
          case 37497:
            LOWORD(a3) = 0;
            v6 = -28040;
            goto LABEL_7;
          default:
            return result;
        }
    }
  }
  else
  {
    if ((int)result <= 34835)
    {
      if ((int)result > 33189)
      {
        switch((int)result)
        {
          case 33321:
          case 33330:
            v9 = 6403;
            goto LABEL_20;
          case 33322:
          case 33332:
            v13 = 6403;
            goto LABEL_97;
          case 33323:
          case 33336:
            v9 = -32217;
            goto LABEL_20;
          case 33324:
          case 33338:
            v13 = -32217;
            goto LABEL_97;
          case 33325:
            v24 = 6403;
            goto LABEL_180;
          case 33326:
            v14 = 6403;
            goto LABEL_183;
          case 33327:
            v24 = -32217;
LABEL_180:
            *a4 = v24;
            LOWORD(a3) = 5131;
            goto LABEL_22;
          case 33328:
            v14 = -32217;
            goto LABEL_183;
          case 33329:
            goto LABEL_58;
          case 33331:
            goto LABEL_92;
          case 33333:
            v18 = 6403;
            goto LABEL_145;
          case 33334:
            v12 = 6403;
            break;
          case 33335:
            goto LABEL_91;
          case 33337:
            goto LABEL_93;
          case 33339:
            v18 = -32217;
            goto LABEL_145;
          case 33340:
            v12 = -32217;
            break;
          default:
            if ((result - 33776) < 4)
              goto LABEL_49;
            if ((result - 33190) >= 2)
              return result;
            v12 = 6402;
            break;
        }
LABEL_147:
        *a4 = v12;
        LOWORD(a3) = 5125;
      }
      else
      {
        switch((int)result)
        {
          case 32827:
          case 32828:
            goto LABEL_71;
          case 32829:
          case 32830:
            goto LABEL_72;
          case 32831:
          case 32832:
          case 32842:
          case 32843:
            goto LABEL_61;
          case 32833:
          case 32834:
          case 32844:
          case 32845:
            goto LABEL_47;
          case 32835:
          case 32836:
          case 32837:
            goto LABEL_67;
          case 32838:
          case 32839:
          case 32840:
            goto LABEL_68;
          case 32841:
          case 32846:
            return result;
          case 32847:
            if (a3 - 33635 < 4 || a3 - 32819 <= 1)
              break;
            goto LABEL_113;
          case 32848:
            if ((a3 - 33635 > 3 || a3 == 33637) && a3 != 32820)
              goto LABEL_190;
            break;
          case 32849:
            if (a3 - 33639 >= 2 && a3 - 32821 > 1)
              goto LABEL_193;
            break;
          case 32850:
          case 32857:
            goto LABEL_115;
          case 32851:
          case 32852:
            goto LABEL_73;
          case 32853:
          case 32854:
            if (a3 == 33637 || a3 == 32819)
              break;
LABEL_113:
            *a4 = 6408;
            LOWORD(a3) = -32717;
            goto LABEL_22;
          case 32855:
            if (a3 == 33638 || a3 == 32820)
              break;
            *a4 = 6408;
            LOWORD(a3) = -32716;
            goto LABEL_22;
          case 32856:
            if (a3 != 33639 && a3 != 32821)
              goto LABEL_199;
            break;
          case 32858:
          case 32859:
            goto LABEL_74;
          default:
            if ((_DWORD)result != 10768)
            {
              if ((_DWORD)result != 33189)
                return result;
              *a4 = 6402;
              if (a3 >> 2 == 1280)
                LOWORD(a3) = 5123;
              else
                LOWORD(a3) = 5125;
              goto LABEL_22;
            }
            if (a3 != 33634 && a3 != 32818)
            {
              *a4 = 6407;
              LOWORD(a3) = -32718;
              goto LABEL_22;
            }
            break;
        }
LABEL_205:
        *a4 = a2;
      }
      goto LABEL_22;
    }
    if ((int)result <= 35839)
    {
      if ((int)result > 35407)
      {
        switch((int)result)
        {
          case 35408:
            v29 = -31303;
            goto LABEL_150;
          case 35409:
            v29 = -30177;
LABEL_150:
            *a4 = v29;
            if (a3 == 34235)
              LOWORD(a3) = -31301;
            else
              LOWORD(a3) = -31302;
            goto LABEL_22;
          case 35412:
            LOWORD(a3) = 0;
            v6 = -29695;
            goto LABEL_7;
          case 35413:
            LOWORD(a3) = 0;
            v6 = -29696;
            goto LABEL_7;
          case 35414:
            LOWORD(a3) = 0;
            v6 = -29693;
            goto LABEL_7;
          case 35415:
            LOWORD(a3) = 0;
            v6 = -29694;
            goto LABEL_7;
          case 35420:
          case 35421:
            goto LABEL_49;
          case 35422:
            LOWORD(a3) = 0;
            v6 = -30116;
            goto LABEL_7;
          case 35423:
            LOWORD(a3) = 0;
            v6 = -30115;
            goto LABEL_7;
          case 35429:
          case 35430:
          case 35431:
          case 35432:
          case 35433:
          case 35434:
          case 35435:
          case 35436:
          case 35437:
          case 35438:
          case 35439:
          case 35440:
          case 35441:
          case 35442:
          case 35443:
          case 35444:
            goto LABEL_16;
          case 35446:
          case 35447:
            *a4 = a2;
            goto LABEL_98;
          default:
            return result;
        }
      }
      switch((int)result)
      {
        case 34836:
          v30 = a2 == 32993;
          v14 = 6408;
          v31 = -32543;
          goto LABEL_168;
        case 34837:
          v30 = a2 == 32992;
          v14 = 6407;
          v31 = -32544;
LABEL_168:
          if (v30)
            v14 = v31;
          goto LABEL_183;
        case 34838:
          v14 = 6406;
          goto LABEL_183;
        case 34839:
        case 34840:
          v14 = 6409;
          goto LABEL_183;
        case 34841:
          v14 = 6410;
          goto LABEL_183;
        case 34842:
          v32 = a2 == 32993;
          v24 = 6408;
          v33 = -32543;
          goto LABEL_175;
        case 34843:
          v32 = a2 == 32992;
          v24 = 6407;
          v33 = -32544;
LABEL_175:
          if (v32)
            v24 = v33;
          goto LABEL_180;
        case 34844:
          v24 = 6406;
          goto LABEL_180;
        case 34845:
        case 34846:
          v24 = 6409;
          goto LABEL_180;
        case 34847:
          v24 = 6410;
          goto LABEL_180;
        default:
          v6 = -30665;
          if ((_DWORD)result == 34871)
          {
            LOWORD(a3) = 0;
            goto LABEL_7;
          }
          if ((_DWORD)result != 35056)
            return result;
          *a4 = -31495;
          LOWORD(a3) = -31494;
          break;
      }
      goto LABEL_22;
    }
    if ((int)result > 36011)
    {
      if ((result - 36166) < 4)
      {
        v9 = 6401;
        goto LABEL_20;
      }
      if ((_DWORD)result == 36012)
      {
        v14 = 6402;
LABEL_183:
        *a4 = v14;
        LOWORD(a3) = 5126;
        goto LABEL_22;
      }
      if ((_DWORD)result == 36013)
      {
        *a4 = -31495;
        LOWORD(a3) = -29267;
        goto LABEL_22;
      }
    }
    else
    {
      switch((int)result)
      {
        case 35898:
          *a4 = 6407;
          LOWORD(a3) = -29637;
          goto LABEL_22;
        case 35899:
        case 35900:
        case 35902:
        case 35903:
        case 35904:
        case 35906:
        case 35908:
        case 35910:
        case 35912:
        case 35913:
        case 35914:
        case 35915:
          return result;
        case 35901:
          *a4 = 6407;
          LOWORD(a3) = -29634;
          goto LABEL_22;
        case 35905:
          v9 = 6407;
          goto LABEL_20;
        case 35907:
          v9 = 6408;
          goto LABEL_20;
        case 35909:
          goto LABEL_67;
        case 35911:
          goto LABEL_61;
        case 35916:
          LOWORD(a3) = 0;
          v6 = -31760;
          goto LABEL_7;
        case 35917:
          LOWORD(a3) = 0;
          v6 = -31759;
          goto LABEL_7;
        case 35918:
          LOWORD(a3) = 0;
          v6 = -31758;
          goto LABEL_7;
        case 35919:
          LOWORD(a3) = 0;
          v6 = -31757;
          goto LABEL_7;
        default:
          if ((result - 35840) < 4)
            goto LABEL_49;
          break;
      }
    }
  }
  return result;
}

uint64_t glGetTexLevelParameteriv_Exec(int8x16_t *a1, int a2, uint64_t a3, int a4, int *a5)
{
  __int8 *v10;
  uint64_t result;
  __n128 v12;
  double v13;
  double v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  BOOL v18;
  __int16 v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;

  v10 = &a1[1864].i8[8];
  result = gleLookUpTexture((uint64_t)a1, a2);
  if (!result)
    goto LABEL_90;
  if (a3 >= 0xF
    || (v15 = result, v16 = *(unsigned __int16 *)(result + 768), v17 = v16 & 0xF, (_DWORD)a3)
    && (v17 <= 9 ? (v18 = ((1 << v17) & 0x384) == 0) : (v18 = 1), !v18))
  {
    if (!*(_WORD *)v10)
    {
      v19 = 1281;
LABEL_92:
      *(_WORD *)v10 = v19;
      return result;
    }
    return result;
  }
  v20 = 0;
  v43 = 0;
  if ((a2 - 34069) >= 6)
    v21 = 0;
  else
    v21 = (a2 - 34069);
  LODWORD(v22) = 1;
  if (a4 <= 34464)
  {
    if (a4 > 32859)
    {
      switch(a4)
      {
        case 32860:
          if (v17 != 7)
            goto LABEL_65;
          v23 = *(_QWORD *)(result + 528);
          if (v23 && *(_QWORD *)(v23 + 152))
          {
            v24 = v21;
            result = gleInternalFormatFromSizedEnum(*(unsigned __int16 *)(result + 960));
            v21 = v24;
            v25 = 0;
            v20 = (((result >> 14) & 0x3F) + ((32 * (int)result) >> 31)) & ((8 * (int)result) >> 31);
            v43 = v20;
          }
          else
          {
            v20 = 0;
            v25 = 0;
            v43 = 0;
          }
          goto LABEL_134;
        case 32861:
          if (v17 != 7)
            goto LABEL_65;
          v29 = *(_QWORD *)(result + 528);
          if (v29 && *(_QWORD *)(v29 + 152))
          {
            v30 = v21;
            result = gleInternalFormatFromSizedEnum(*(unsigned __int16 *)(result + 960));
            v21 = v30;
            v25 = 0;
            v20 = (result >> 14) & ((4 * (int)result) >> 31) & 0x3F;
            v43 = v20;
          }
          else
          {
            v20 = 0;
            v25 = 0;
            v43 = 0;
          }
          goto LABEL_134;
        case 32862:
          if (v17 != 7)
            goto LABEL_65;
          v31 = *(_QWORD *)(result + 528);
          if (v31 && *(_QWORD *)(v31 + 152))
          {
            v32 = v21;
            result = gleInternalFormatFromSizedEnum(*(unsigned __int16 *)(result + 960));
            v21 = v32;
            v25 = 0;
            v20 = (((result >> 14) & 0x3F) + ((16 * (int)result) >> 31)) & ((2 * (int)result) >> 31);
            v43 = v20;
          }
          else
          {
            v20 = 0;
            v25 = 0;
            v43 = 0;
          }
          goto LABEL_134;
        case 32863:
          if (v17 != 7)
            goto LABEL_65;
          v33 = *(_QWORD *)(result + 528);
          if (v33 && *(_QWORD *)(v33 + 152))
          {
            v34 = v21;
            result = gleInternalFormatFromSizedEnum(*(unsigned __int16 *)(result + 960));
            v21 = v34;
            v25 = 0;
            v20 = (result >> 20) & 0x3F;
            v43 = v20;
          }
          else
          {
            v20 = 0;
            v25 = 0;
            v43 = 0;
          }
          goto LABEL_134;
        default:
          if (a4 == 32881)
          {
            v25 = (v16 >> 8) & 1;
            if (v17 == 7)
            {
              v38 = *(_QWORD *)(result + 528);
              if (v38)
                v20 = *(_QWORD *)(v38 + 152) != 0;
              else
                v20 = 0;
            }
            else
            {
              v20 = *(unsigned __int16 *)(result + 480 * v21 + 32 * a3 + 1040);
            }
            v43 = v20;
            goto LABEL_134;
          }
          v25 = 0;
          if (a4 != 34464)
            goto LABEL_72;
          if ((v16 & 0x100) == 0
            && *(_WORD *)(result + 480 * v21 + 32 * a3 + 1036)
            && *(_WORD *)(result + 480 * v21 + 32 * a3 + 1038)
            && *(_WORD *)(result + 480 * v21 + 32 * a3 + 1040)
            && *(_BYTE *)(result + 555))
          {
            v28 = v21;
            glgConvertType();
            v44 = 0;
            glgConvertType();
            result = glgGetCompressedImageBytes();
            v21 = v28;
            v20 = result;
            v25 = 0;
            v43 = result;
            goto LABEL_134;
          }
          if (!*(_WORD *)v10)
          {
            v19 = 1282;
            goto LABEL_92;
          }
          break;
      }
      return result;
    }
    if (a4 == 4096)
    {
      v25 = (v16 >> 8) & 1;
      if (v17 == 7)
      {
        if (!*(_QWORD *)(result + 528))
        {
          v20 = 0;
          v43 = 0;
          goto LABEL_134;
        }
        v36 = v21;
        result = gleInternalFormatFromSizedEnum(*(unsigned __int16 *)(result + 960));
        v21 = v36;
        v20 = *(_DWORD *)(*(_QWORD *)(v15 + 528) + 152)
            / ((int)(((result >> 14) & 0x3F & ((4 * (int)result) >> 31))
                   + ((result >> 20) & 0x3F)
                   + ((((result >> 14) & 0x3F) + ((32 * (int)result) >> 31)) & ((8 * (int)result) >> 31))
                   + ((((result >> 14) & 0x3F) + ((16 * (int)result) >> 31)) & ((2 * (int)result) >> 31))) >> 3);
      }
      else
      {
        v20 = *(unsigned __int16 *)(result + 480 * v21 + 32 * a3 + 1036);
      }
      v43 = v20;
      goto LABEL_134;
    }
    if (a4 == 4097)
    {
      v25 = (v16 >> 8) & 1;
      if (v17 == 7)
      {
        v37 = *(_QWORD *)(result + 528);
        if (v37)
          v20 = *(_QWORD *)(v37 + 152) != 0;
        else
          v20 = 0;
      }
      else
      {
        v20 = *(unsigned __int16 *)(result + 480 * v21 + 32 * a3 + 1038);
      }
      v43 = v20;
      goto LABEL_134;
    }
    v25 = 0;
    if (a4 == 4099)
    {
      v25 = *(_WORD *)(result + 480 * v21 + 32 * a3 + 1036)
         && *(_WORD *)(result + 480 * v21 + 32 * a3 + 1038)
         && *(_WORD *)(result + 480 * v21 + 32 * a3 + 1040)
         && *(_BYTE *)(result + 555) == 0;
      if (v17 == 7)
      {
        v39 = *(_QWORD *)(result + 528);
        if (!v39 || !*(_QWORD *)(v39 + 152))
        {
          v20 = 32832;
LABEL_133:
          v43 = v20;
          goto LABEL_134;
        }
      }
      else if (!*(_WORD *)(result + 962))
      {
        v20 = 1;
        goto LABEL_133;
      }
      v20 = *(unsigned __int16 *)(result + 960);
      goto LABEL_133;
    }
    goto LABEL_72;
  }
  if (a4 <= 35855)
  {
    if (a4 == 34465)
    {
      v25 = 0;
      v20 = *(unsigned __int8 *)(result + 555);
      v43 = v20;
      goto LABEL_134;
    }
    if (a4 == 34890)
      goto LABEL_65;
    v27 = 35057;
  }
  else
  {
    if ((a4 - 35856) < 4)
    {
      v43 = 0;
      if (v17 == 7)
      {
        v22 = *(_QWORD *)(result + 528);
        if (v22)
        {
          v22 = *(_QWORD *)(v22 + 152);
          if (v22)
          {
            v26 = v21;
            result = gleGetInternalFormatType(*(unsigned __int16 *)(result + 960));
LABEL_70:
            v21 = v26;
            v20 = result;
            v25 = 0;
            LODWORD(v22) = 0;
            v43 = result;
            goto LABEL_72;
          }
        }
LABEL_71:
        v20 = 0;
        v25 = 0;
        goto LABEL_72;
      }
      LODWORD(v22) = *(unsigned __int16 *)(result + 480 * v21 + 32 * a3 + 1036);
      if (!*(_WORD *)(result + 480 * v21 + 32 * a3 + 1036))
        goto LABEL_71;
      LODWORD(v22) = *(unsigned __int16 *)(result + 480 * v21 + 32 * a3 + 1038);
      if (!*(_WORD *)(result + 480 * v21 + 32 * a3 + 1038))
        goto LABEL_71;
      LODWORD(v22) = *(unsigned __int16 *)(result + 480 * v21 + 32 * a3 + 1040);
      if (!*(_WORD *)(result + 480 * v21 + 32 * a3 + 1040))
        goto LABEL_71;
      LODWORD(v22) = *(unsigned __int8 *)(result + 555);
      if (!*(_BYTE *)(result + 555))
      {
        v20 = 0;
        a4 -= 2996;
        v25 = 2;
        goto LABEL_72;
      }
LABEL_69:
      v26 = v21;
      result = gleGetCompressedTextureLevelInfo(*(unsigned __int16 *)(result + 960), a4);
      goto LABEL_70;
    }
    if (a4 == 35862)
    {
      v43 = 0;
      if (*(_WORD *)(result + 480 * v21 + 32 * a3 + 1036)
        && *(_WORD *)(result + 480 * v21 + 32 * a3 + 1038))
      {
        v20 = 0;
        if (*(_WORD *)(result + 480 * v21 + 32 * a3 + 1040))
          v25 = 2 * (*(_BYTE *)(result + 555) == 0);
        else
          v25 = 0;
      }
      else
      {
        v20 = 0;
        v25 = 0;
      }
      goto LABEL_134;
    }
    v27 = 35903;
  }
  if (a4 == v27)
  {
LABEL_65:
    v43 = 0;
    LODWORD(v22) = *(unsigned __int16 *)(result + 480 * v21 + 32 * a3 + 1036);
    if (!*(_WORD *)(result + 480 * v21 + 32 * a3 + 1036))
      goto LABEL_71;
    LODWORD(v22) = *(unsigned __int16 *)(result + 480 * v21 + 32 * a3 + 1038);
    if (!*(_WORD *)(result + 480 * v21 + 32 * a3 + 1038))
      goto LABEL_71;
    LODWORD(v22) = *(unsigned __int16 *)(result + 480 * v21 + 32 * a3 + 1040);
    if (!*(_WORD *)(result + 480 * v21 + 32 * a3 + 1040))
      goto LABEL_71;
    LODWORD(v22) = *(unsigned __int8 *)(result + 555);
    if (!*(_BYTE *)(result + 555))
    {
      v20 = 0;
      v25 = 1;
      goto LABEL_72;
    }
    goto LABEL_69;
  }
  v25 = 0;
LABEL_72:
  if ((a4 - 32864) < 2)
  {
    v43 = 0;
    if (*(_WORD *)(v15 + 480 * v21 + 32 * a3 + 1036)
      && *(_WORD *)(v15 + 480 * v21 + 32 * a3 + 1038)
      && *(_WORD *)(v15 + 480 * v21 + 32 * a3 + 1040))
    {
      if (!*(_BYTE *)(v15 + 555))
      {
        v20 = 0;
        v25 = 1;
        goto LABEL_134;
      }
LABEL_83:
      v35 = v21;
      result = gleGetCompressedTextureLevelInfo(*(unsigned __int16 *)(v15 + 960), a4);
      v21 = v35;
      v20 = result;
      v43 = result;
      goto LABEL_134;
    }
LABEL_84:
    v20 = 0;
    goto LABEL_134;
  }
  if ((a4 - 35860) < 2)
  {
    v43 = 0;
    if (*(_WORD *)(v15 + 480 * v21 + 32 * a3 + 1036)
      && *(_WORD *)(v15 + 480 * v21 + 32 * a3 + 1038)
      && *(_WORD *)(v15 + 480 * v21 + 32 * a3 + 1040))
    {
      if (!*(_BYTE *)(v15 + 555))
      {
        v20 = 0;
        v25 = 2;
        goto LABEL_134;
      }
      goto LABEL_83;
    }
    goto LABEL_84;
  }
  if (a4 == 4101)
  {
    if ((v16 & 0x100) != 0)
      v25 = 1;
    v20 = *(unsigned __int8 *)(v15 + 480 * v21 + 32 * a3 + 1042);
    v43 = v20;
    goto LABEL_134;
  }
  if (!(_DWORD)v22)
  {
LABEL_134:
    if ((*(_WORD *)(v15 + 768) & 0x100) != 0
      && a1[138].i32[2] & a1[96].i32[2] | a1[138].i32[1] & a1[96].i32[1] | a1[138].i32[3] & a1[96].i32[3])
    {
      v40 = v10[2669];
      if ((v40 - 3) >= 2)
      {
        v41 = v21;
        if (v40 == 1)
          result = gleUpdateDeferredStateGL3(a1, 0, 0, 0, 0);
        else
          result = gleUpdateDeferredState((uint64_t)a1, 0, 0, 0, 0, v12, v13, v14);
      }
      else
      {
        v41 = v21;
        result = gleUpdateDeferredStateES2(a1, 0, 0, 0, 0);
      }
      v21 = v41;
    }
    if (v25)
    {
      v42 = v21;
      result = (*(uint64_t (**)(uint64_t, _QWORD))(a1[1840].i64[1] + 376))(a1[1813].i64[1], *(_QWORD *)(v15 + 8 * v10[2667]));
      v20 = v43;
      if (v25 == 2)
      {
        if (v43)
        {
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, int *))(a1[1840].i64[1] + 376))(a1[1813].i64[1], *(_QWORD *)(v15 + 8 * v10[2667]), v42, a3, 4099, &v43);
          result = gleGetInternalFormatType(v43);
          v20 = result;
        }
      }
    }
    *a5 = v20;
    return result;
  }
LABEL_90:
  if (!*(_WORD *)v10)
  {
    v19 = 1280;
    goto LABEL_92;
  }
  return result;
}

uint64_t gleLookUpTexture(uint64_t a1, int a2)
{
  uint64_t result;
  _BYTE *v4;
  uint64_t v5;
  unsigned int v6;
  _QWORD *v7;

  result = 0;
  v4 = (_BYTE *)(a1 + 32501);
  v5 = a1 + 20776;
  v6 = *(unsigned __int16 *)(a1 + 23768);
  if (a2 <= 34068)
  {
    if (a2 == 3553)
    {
      v7 = (_QWORD *)(v5 + 88 * v6 + 24);
    }
    else
    {
      if (a2 != 32879)
        return result;
      if ((*v4 & 0xFE) == 2)
        return 0;
      v7 = (_QWORD *)(v5 + 88 * v6 + 8);
    }
  }
  else if ((a2 - 34069) >= 6)
  {
    if (a2 != 35866)
      return result;
    if ((*v4 & 0xFE) == 2)
      return 0;
    v7 = (_QWORD *)(v5 + 88 * v6 + 40);
  }
  else
  {
    if (*v4 == 2)
      return 0;
    v7 = (_QWORD *)(v5 + 88 * v6);
  }
  return *v7 + 40;
}

uint64_t gleSetEnable_DEPTH_TEST(uint64_t result, uint64_t a2, int a3)
{
  if (*(unsigned __int8 *)(result + 15204) != a3)
  {
    *(_BYTE *)(result + 15204) = a3;
    *(_DWORD *)(result + 1520) |= 0x200u;
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1548) |= 0x40000u;
  }
  return result;
}

uint64_t glAlphaFunc_Exec(uint64_t result, int a2, double a3, double a4, double a5)
{
  uint64_t v5;
  float v6;
  __int16 v7;
  uint64_t v8;
  float *v9;

  v5 = result + 29832;
  if ((a2 - 520) <= 0xFFFFFFF7)
  {
    if (!*(_WORD *)v5)
      *(_WORD *)v5 = 1280;
  }
  else
  {
    v6 = *(float *)&a3;
    v7 = a2;
    v8 = result;
    v9 = (float *)(result + 15004);
    LODWORD(a3) = *(_DWORD *)(result + 29704);
    if (*(float *)&a3 != v6 || *(unsigned __int16 *)v9 != a2)
    {
      if ((*(_BYTE *)(result + 29803) & 0x10) != 0)
        result = gleUpdateAnyDrawBuffersFloat(result, a3, a4, a5);
      v9[3675] = v6;
      if (!*(_BYTE *)(v5 + 2656) && (*(_BYTE *)(*(_QWORD *)(v8 + 29032) + 561) & 0x40) == 0)
        v6 = fminf(fmaxf(v6, *(float *)(v8 + 288)), *(float *)(v8 + 292));
      *(float *)(v8 + 15000) = v6;
      *(_WORD *)v9 = v7;
      *(_DWORD *)(v8 + 1520) |= 1u;
      v9[3412] = 0.0;
      *(_DWORD *)(v8 + 1548) |= 0x40000u;
    }
  }
  return result;
}

uint64_t gleSetEnable_ALPHA_TEST(uint64_t result, uint64_t a2, int a3)
{
  if (*(unsigned __int8 *)(result + 15006) != a3)
  {
    *(_BYTE *)(result + 15006) = a3;
    *(_DWORD *)(result + 1520) |= 1u;
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1548) |= 0x40000u;
  }
  return result;
}

uint64_t glShadeModel_Exec(uint64_t result, int a2)
{
  int v2;
  uint64_t v3;

  if ((a2 - 7426) <= 0xFFFFFFFD)
  {
    if (!*(_WORD *)(result + 29832))
      *(_WORD *)(result + 29832) = 1280;
  }
  else if (*(_DWORD *)(result + 15592) != a2)
  {
    *(_DWORD *)(result + 15592) = a2;
    *(_DWORD *)(result + 1520) |= 0x8000000u;
    *(_DWORD *)(result + 28652) = 0;
    v2 = *(_DWORD *)(result + 1548);
    *(_DWORD *)(result + 1548) = v2 | 0x8400;
    v3 = *(_QWORD *)(result + 29032);
    if ((*(_BYTE *)(v3 + 27) & 0x10) != 0 || (*(_BYTE *)(v3 + 25) & 0x7F) != 0)
      *(_DWORD *)(result + 1548) = v2 | 0x70038400;
  }
  return result;
}

uint64_t gleSetEnable_LIGHTING(uint64_t result, uint64_t a2, int a3)
{
  int v3;
  int v4;
  BOOL v5;
  int v6;
  int v7;
  int v8;
  BOOL v9;
  int v10;

  if (*(unsigned __int8 *)(result + 14890) != a3)
  {
    *(_BYTE *)(result + 14890) = a3;
    v3 = *(unsigned __int8 *)(result + 24756);
    v4 = *(_DWORD *)(result + 24864);
    if (*(_BYTE *)(result + 24756))
      v5 = 0;
    else
      v5 = (*(_DWORD *)(result + 24864) & 1) == 0;
    if (v5)
    {
      v6 = a3 ? *(unsigned __int16 *)(result + 14888) == 33274 : *(unsigned __int8 *)(result + 32506);
      if (v6 != *(unsigned __int8 *)(result + 15283))
      {
        *(_BYTE *)(result + 15283) = v6;
        *(_DWORD *)(result + 1548) |= 0x20000u;
      }
    }
    *(_DWORD *)(result + 28652) = 0;
    v7 = *(_DWORD *)(result + 1548);
    *(_DWORD *)(result + 1548) = v7 | 0x18402;
    v8 = v4 & 9;
    if (v3)
      v9 = 0;
    else
      v9 = v8 == 0;
    if (v9)
    {
      if ((_BYTE)a3)
        v10 = *(_BYTE *)(result + 14892) != 0;
      else
        v10 = 0;
    }
    else
    {
      v10 = *(unsigned __int8 *)(result + 24751);
    }
    if (v10 != *(unsigned __int8 *)(result + 17701))
    {
      *(_BYTE *)(result + 17701) = v10;
      *(_DWORD *)(result + 1532) |= 0x40000000u;
      *(_DWORD *)(result + 1548) = v7 | 0x10018402;
      if ((*(_BYTE *)(*(_QWORD *)(result + 29032) + 25) & 0x7F) != 0)
        *(_DWORD *)(result + 1548) = v7 | 0x10038402;
    }
    return gleUpdateInverseNeeds(result);
  }
  return result;
}

uint64_t gleSetEnable_CULL_FACE(uint64_t result, uint64_t a2, int a3)
{
  if (*(unsigned __int8 *)(result + 15534) != a3)
  {
    *(_BYTE *)(result + 15534) = a3;
    *(_DWORD *)(result + 1520) |= 0x800000u;
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1548) |= 0x8000u;
  }
  return result;
}

uint64_t glEnableClientState_Exec(uint64_t a1, int a2)
{
  return gleSetClientEnableFlag(a1, a2, 1);
}

uint64_t gleSetClientEnableFlag(uint64_t result, int a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;

  v5 = result;
  v6 = result + 28652;
  v7 = (_BYTE *)(result + 17700);
  v8 = *(_QWORD *)(result + 26384);
  if (a2 <= 34476)
  {
    v9 = 0;
    v10 = 0x10000;
    switch(a2)
    {
      case 32884:
        goto LABEL_13;
      case 32885:
        v9 = 1;
        v10 = 0x20000;
        goto LABEL_13;
      case 32886:
        v9 = 2;
        v10 = 0x40000;
        goto LABEL_13;
      case 32888:
        v11 = *(unsigned __int16 *)(result + 23770);
        v10 = 0x1000000 << v11;
        v9 = v11 + 8;
        goto LABEL_13;
      default:
        goto LABEL_21;
    }
  }
  if (a2 == 34477)
  {
    v9 = 4;
    v10 = 0x100000;
    goto LABEL_13;
  }
  if (a2 == 34884)
  {
    if (*(_BYTE *)(result + 32501) == 2)
    {
      v9 = 7;
      v10 = 0x800000;
      goto LABEL_13;
    }
LABEL_21:
    if (!*(_WORD *)(result + 29832))
      *(_WORD *)(result + 29832) = 1280;
    return result;
  }
  if (a2 != 35740)
    goto LABEL_21;
  v9 = 6;
  v10 = 0x400000;
LABEL_13:
  v12 = *(_QWORD *)(v8 + 904);
  if (a3)
  {
    if ((v12 & v10) != 0)
      return result;
    v13 = v12 | v10;
    *(_QWORD *)(v8 + 904) = v12 | v10;
    v14 = *(_QWORD *)(v8 + 912);
    if ((v13 & ~v14) == v10)
    {
      result = gleUpdateDrawArraysFuncs(result);
    }
    else if ((v14 & v10) != 0 && *(_QWORD *)(*(_QWORD *)(v8 + 8 * v9 + 1240) + 192))
    {
      *(_BYTE *)(v8 + 1216) = 0;
    }
    v15 = v10 | *(_QWORD *)(v8 + 944) | 0x10;
  }
  else
  {
    if (!(v12 | v10))
      return result;
    *(_QWORD *)(v8 + 904) = v12 & ~v10;
    if ((v12 & ~*(_QWORD *)(v8 + 912)) == v10)
      result = gleUpdateDrawArraysFuncs(result);
    v15 = *(_QWORD *)(v8 + 944) | v10;
  }
  *(_QWORD *)(v8 + 944) = v15;
  *(_QWORD *)(v8 + 952) |= v10;
  if (a2 == 35740 && *(_BYTE *)(v6 + 3849) == 2)
  {
    *(_BYTE *)(v5 + 15379) = a3;
    if ((*(_BYTE *)(v5 + 24864) & 9) != 0 || *(_BYTE *)(v5 + 24756))
    {
      v16 = *(unsigned __int8 *)(v5 + 24750);
    }
    else if (a3)
    {
      v16 = 1;
    }
    else
    {
      v16 = *(_BYTE *)(v5 + 15378) != 0;
    }
    if (v16 == *v7)
    {
      v17 = *(_DWORD *)(v5 + 1548);
    }
    else
    {
      *v7 = v16;
      *(_DWORD *)(v5 + 1532) |= 0x40000000u;
      *(_DWORD *)v6 = 0;
      v17 = *(_DWORD *)(v5 + 1548) | 0x10000000;
    }
    *(_DWORD *)(v5 + 1548) = v17 | 0x1800A;
  }
  *(_QWORD *)(v5 + 26184) = gleSetVertexArrayFunc;
  *(_QWORD *)(v5 + 26192) = gleSetVertexArrayFunc;
  *(_QWORD *)(v5 + 26200) = gleSetVertexElemFunc;
  *(_QWORD *)(v5 + 26208) = gleSetVertexElemFunc;
  if ((v10 & 0xFF000000) != 0)
    *(_DWORD *)(v5 + 1548) |= 0x4000u;
  *(_DWORD *)v6 = 0;
  *(_DWORD *)(v5 + 1532) |= 0x1000u;
  return result;
}

uint64_t glClearColor_Exec(uint64_t result, double a2, double a3, double a4, float a5)
{
  float32x4_t *v5;
  float32x4_t *v6;
  const float *f32;
  const float *v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;

  v5 = (float32x4_t *)result;
  v6 = (float32x4_t *)(result + 29672);
  *(_DWORD *)(result + 29672) = LODWORD(a2);
  *(_DWORD *)(result + 29676) = LODWORD(a3);
  *(_DWORD *)(result + 29680) = LODWORD(a4);
  *(float *)(result + 29684) = a5;
  if ((*(_BYTE *)(result + 29803) & 0x10) != 0)
    result = gleUpdateAnyDrawBuffersFloat(result, a2, a3, a4);
  if (v6[176].i8[0] || (*(_BYTE *)(v5[1814].i64[1] + 561) & 0x40) != 0)
  {
    v11 = *v6;
  }
  else
  {
    f32 = v5[18].f32;
    v8 = &v5[18].f32[1];
    v9 = vld1q_dup_f32(f32);
    v10 = vld1q_dup_f32(v8);
    v11 = vminnmq_f32(vmaxnmq_f32(*v6, v9), v10);
  }
  v5[947] = v11;
  if (!*(_BYTE *)(v5[1842].i64[1] + 110))
  {
    v5[1790].i32[3] = 0;
    v6[8].i32[0] |= 8u;
  }
  return result;
}

uint64_t glFlush_Exec(uint64_t a1, double a2, double a3, double a4)
{
  uint64_t v5;
  uint64_t result;

  v5 = a1 + 29800;
  if (!*(_BYTE *)(a1 + 32472))
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a1 + 29496) + 240))(*(_QWORD *)(a1 + 29464));
  if (!*(_BYTE *)(a1 + 32471) && (*(_WORD *)(a1 + 32493) & 0x400) != 0)
  {
    result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a1 + 29496) + 240))(*(_QWORD *)(a1 + 29464));
  }
  else if ((*(_DWORD *)v5 & 0x743C0478) == 0
         || (result = gleUpdateDrawFramebufferState(a1, a2, a3, a4), !(_DWORD)result))
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 29496) + 232))(*(_QWORD *)(a1 + 29464), 0);
  }
  *(_BYTE *)(v5 + 2672) = *(_BYTE *)(v5 + 2671);
  return result;
}

void glColorPointer_Exec(uint64_t a1, int a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  __int16 v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  int v36;

  v5 = a1 + 28652;
  if (a2 < 3
    || (v6 = a5, v10 = *(_QWORD *)(a1 + 26384), (a2 - 3) >= 2) && a2 != 32993
    || ((_DWORD)a3 != 5121 ? (v11 = a2 == 32993) : (v11 = 0), v11 || (a4 & 0x80000000) != 0 || a2 == 3))
  {
    if (*(_WORD *)(a1 + 29832))
      return;
    v15 = 1281;
    goto LABEL_25;
  }
  v12 = *(_QWORD *)(a1 + 19312);
  if (!v12 && v10 != *(_QWORD *)(a1 + 26392) && a5 && !*(_BYTE *)(a1 + 32502))
  {
    if (*(_WORD *)(a1 + 29832))
      return;
    v15 = 1282;
LABEL_25:
    *(_WORD *)(a1 + 29832) = v15;
    return;
  }
  if ((_DWORD)a3 == 5121)
  {
    v14 = 1;
    v13 = 0x340100000000;
  }
  else
  {
    if ((_DWORD)a3 != 5126 && ((_DWORD)a3 != 5132 || *(_BYTE *)(a1 + 32501) != 2))
    {
      if (*(_WORD *)(a1 + 29832))
        return;
      v15 = 1280;
      goto LABEL_25;
    }
    v13 = a3 << 32;
    v14 = 4;
  }
  if (a2 == 32993)
    v16 = 4;
  else
    v16 = a2;
  *(_QWORD *)(v10 + 944) |= 0x40000uLL;
  *(_QWORD *)(v10 + 184) = a5;
  v17 = *(_QWORD *)(v10 + 1256);
  if (v12 != v17)
  {
    if (v17 && (v18 = *(_DWORD *)(v17 + 20) - 1, (*(_DWORD *)(v17 + 20) = v18) == 0))
    {
      v36 = v16;
      v26 = v14;
      v27 = v13;
      gleUnbindAndFreeBufferObject(a1, (_QWORD *)v17);
      v13 = v27;
      v14 = v26;
      v16 = v36;
      if (v12)
        goto LABEL_34;
    }
    else if (v12)
    {
LABEL_34:
      ++*(_DWORD *)(v12 + 20);
      v19 = *(_QWORD *)(v10 + 912);
      if ((v19 & 0x40000) == 0)
      {
        *(_QWORD *)(v10 + 912) = v19 | 0x40000;
        if ((*(_BYTE *)(v10 + 906) & 4) != 0)
        {
          v35 = v16;
          v20 = v14;
          v21 = v13;
          gleUpdateDrawArraysFuncs(a1);
          v13 = v21;
          v14 = v20;
          v16 = v35;
        }
      }
      v22 = *(unsigned __int8 *)(v5 + 3844);
      if (*(_BYTE *)(v5 + 3844))
      {
        v23 = (uint64_t *)(v12 + 40);
        v24 = (_QWORD *)(v10 + 1512);
        do
        {
          v25 = *v23++;
          *v24 = v25;
          v24 += 35;
          --v22;
        }
        while (v22);
      }
      if (v17)
        goto LABEL_50;
      goto LABEL_49;
    }
    v28 = *(_QWORD *)(v10 + 912);
    if ((v28 & 0x40000) != 0)
    {
      *(_QWORD *)(v10 + 912) = v28 & 0xFFFFFFFFFFFBFFFFLL;
      if ((*(_BYTE *)(v10 + 906) & 4) != 0)
      {
        v29 = v13;
        gleUpdateDrawArraysFuncs(a1);
        v13 = v29;
      }
    }
    v30 = *(unsigned __int8 *)(v5 + 3844);
    if (*(_BYTE *)(v5 + 3844))
    {
      v31 = (_QWORD *)(v10 + 1512);
      do
      {
        *v31 = 0;
        v31 += 35;
        --v30;
      }
      while (v30);
    }
LABEL_49:
    *(_QWORD *)(v10 + 952) |= 0x40000uLL;
LABEL_50:
    *(_DWORD *)v5 = 0;
    *(_DWORD *)(a1 + 1532) |= 0x1000u;
    *(_QWORD *)(v10 + 944) |= 0x40010uLL;
    *(_QWORD *)(v10 + 1256) = v12;
  }
  if (v12)
  {
    v6 += *(_QWORD *)(v12 + 136);
    if (*(_QWORD *)(v12 + 192))
    {
      if ((*(_BYTE *)(v10 + 906) & 4) != 0)
        *(_BYTE *)(v10 + 1216) = 0;
    }
  }
  *(_QWORD *)(v10 + 976) = v6;
  LODWORD(v32) = v14 * v16;
  if (a4)
    v32 = a4;
  else
    v32 = v32;
  if (a2 == 32993)
    v33 = 5;
  else
    v33 = a2;
  v34 = v13 | v32 | (v33 << 48) | ((unint64_t)(((v32 | v6) & 0xF) == 0) << 57);
  if (*(_QWORD *)(v10 + 200) != v34)
  {
    *(_QWORD *)(v10 + 952) |= 0x40000uLL;
    *(_QWORD *)(v10 + 200) = v34;
    *(_QWORD *)(a1 + 26184) = gleSetVertexArrayFunc;
    *(_QWORD *)(a1 + 26192) = gleSetVertexArrayFunc;
    *(_QWORD *)(a1 + 26200) = gleSetVertexElemFunc;
    *(_QWORD *)(a1 + 26208) = gleSetVertexElemFunc;
    *(_DWORD *)v5 = 0;
    *(_DWORD *)(a1 + 1532) |= 0x1000u;
  }
}

void glVertexPointer_Exec(uint64_t a1, int a2, int a3, unsigned int a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  unsigned __int16 v8;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  __int16 v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;

  v5 = a1 + 28652;
  if ((a2 - 5) >= 0xFFFFFFFD && (a4 & 0x80000000) == 0)
  {
    v7 = a5;
    v8 = a3;
    v11 = *(_QWORD *)(a1 + 26384);
    v12 = *(_QWORD *)(a1 + 19312);
    if (!v12 && v11 != *(_QWORD *)(a1 + 26392) && a5 && !*(_BYTE *)(a1 + 32502))
    {
      if (!*(_WORD *)(a1 + 29832))
      {
        v15 = 1282;
LABEL_28:
        *(_WORD *)(a1 + 29832) = v15;
        return;
      }
      return;
    }
    HIDWORD(v13) = a3;
    LODWORD(v13) = a3 - 5120;
    v14 = 4;
    switch((v13 >> 1))
    {
      case 0u:
        if (*(_BYTE *)(a1 + 32501) != 2)
          goto LABEL_26;
        v14 = 1;
        goto LABEL_14;
      case 1u:
        v14 = 2;
        goto LABEL_14;
      case 3u:
        goto LABEL_14;
      case 6u:
        if (*(_BYTE *)(a1 + 32501) != 2)
          goto LABEL_26;
LABEL_14:
        *(_QWORD *)(v11 + 944) |= 0x10000uLL;
        *(_QWORD *)(v11 + 136) = a5;
        v16 = *(_QWORD *)(v11 + 1240);
        if (v12 == v16)
          goto LABEL_38;
        if (v16 && (v17 = *(_DWORD *)(v16 + 20) - 1, (*(_DWORD *)(v16 + 20) = v17) == 0))
        {
          gleUnbindAndFreeBufferObject(a1, (_QWORD *)v16);
          if (v12)
            goto LABEL_18;
        }
        else if (v12)
        {
LABEL_18:
          ++*(_DWORD *)(v12 + 20);
          v18 = *(_QWORD *)(v11 + 912);
          if ((v18 & 0x10000) == 0)
          {
            *(_QWORD *)(v11 + 912) = v18 | 0x10000;
            if ((*(_BYTE *)(v11 + 906) & 1) != 0)
              gleUpdateDrawArraysFuncs(a1);
          }
          v19 = *(unsigned __int8 *)(v5 + 3844);
          if (*(_BYTE *)(v5 + 3844))
          {
            v20 = (uint64_t *)(v12 + 40);
            v21 = (_QWORD *)(v11 + 1496);
            do
            {
              v22 = *v20++;
              *v21 = v22;
              v21 += 35;
              --v19;
            }
            while (v19);
          }
          if (v16)
          {
LABEL_37:
            *(_DWORD *)v5 = 0;
            *(_DWORD *)(a1 + 1532) |= 0x1000u;
            *(_QWORD *)(v11 + 944) |= 0x10010uLL;
            *(_QWORD *)(v11 + 1240) = v12;
LABEL_38:
            if (v12)
            {
              v7 += *(_QWORD *)(v12 + 136);
              if (*(_QWORD *)(v12 + 192))
              {
                if ((*(_BYTE *)(v11 + 906) & 1) != 0)
                  *(_BYTE *)(v11 + 1216) = 0;
              }
            }
            *(_QWORD *)(v11 + 960) = v7;
            LODWORD(v26) = v14 * a2;
            if (a4)
              v26 = a4;
            else
              v26 = v26;
            v27 = ((unint64_t)a2 << 48) | ((unint64_t)(((v26 | v7) & 0xF) == 0) << 57) | ((unint64_t)v8 << 32) | v26;
            if (*(_QWORD *)(v11 + 152) != v27)
            {
              *(_QWORD *)(v11 + 952) |= 0x10000uLL;
              *(_QWORD *)(v11 + 152) = v27;
              *(_QWORD *)(a1 + 26184) = gleSetVertexArrayFunc;
              *(_QWORD *)(a1 + 26192) = gleSetVertexArrayFunc;
              *(_QWORD *)(a1 + 26200) = gleSetVertexElemFunc;
              *(_QWORD *)(a1 + 26208) = gleSetVertexElemFunc;
              *(_DWORD *)v5 = 0;
              *(_DWORD *)(a1 + 1532) |= 0x1000u;
            }
            return;
          }
LABEL_36:
          *(_QWORD *)(v11 + 952) |= 0x10000uLL;
          goto LABEL_37;
        }
        v23 = *(_QWORD *)(v11 + 912);
        if ((v23 & 0x10000) != 0)
        {
          *(_QWORD *)(v11 + 912) = v23 & 0xFFFFFFFFFFFEFFFFLL;
          if ((*(_BYTE *)(v11 + 906) & 1) != 0)
            gleUpdateDrawArraysFuncs(a1);
        }
        v24 = *(unsigned __int8 *)(v5 + 3844);
        if (*(_BYTE *)(v5 + 3844))
        {
          v25 = (_QWORD *)(v11 + 1496);
          do
          {
            *v25 = 0;
            v25 += 35;
            --v24;
          }
          while (v24);
        }
        goto LABEL_36;
      default:
LABEL_26:
        if (*(_WORD *)(a1 + 29832))
          return;
        v15 = 1280;
        goto LABEL_28;
    }
  }
  if (!*(_WORD *)(a1 + 29832))
  {
    v15 = 1281;
    goto LABEL_28;
  }
}

void glTexCoordPointer_Exec(uint64_t a1, int a2, int a3, unsigned int a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  unsigned __int16 v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  char v40;
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v5 = a1 + 28652;
  v6 = *(unsigned __int16 *)(a1 + 23770);
  if (v6 < 9 && (a2 - 5) >= 0xFFFFFFFC && (a4 & 0x80000000) == 0)
  {
    v9 = a5;
    v10 = a3;
    v12 = *(_QWORD *)(a1 + 26384);
    v13 = *(unsigned __int8 *)(a1 + 32501);
    if (a2 != 1 || v13 != 2)
    {
      v14 = *(_QWORD *)(a1 + 19312);
      if (!v14 && v12 != *(_QWORD *)(a1 + 26392) && a5 && !*(_BYTE *)(a1 + 32502))
      {
        if (!*(_WORD *)(a1 + 29832))
        {
          v17 = 1282;
LABEL_31:
          *(_WORD *)(a1 + 29832) = v17;
          return;
        }
        return;
      }
      HIDWORD(v15) = a3;
      LODWORD(v15) = a3 - 5120;
      v16 = 4;
      switch((v15 >> 1))
      {
        case 0u:
          if (v13 != 2)
            goto LABEL_29;
          v16 = 1;
          goto LABEL_17;
        case 1u:
          v16 = 2;
          goto LABEL_17;
        case 3u:
          goto LABEL_17;
        case 6u:
          if (v13 != 2)
            goto LABEL_29;
LABEL_17:
          v18 = v6 + 8;
          v19 = v12 + 136;
          v20 = (0x1000000 << v6);
          *(_QWORD *)(v12 + 944) |= v20;
          *(_QWORD *)(v12 + 136 + 24 * (v6 + 8)) = a5;
          v21 = v12 + 1240;
          v22 = *(_QWORD *)(v12 + 1240 + 8 * (v6 + 8));
          if (v14 == v22)
            goto LABEL_41;
          if (v22 && (v23 = *(_DWORD *)(v22 + 20) - 1, (*(_DWORD *)(v22 + 20) = v23) == 0))
          {
            v51 = a1 + 28652;
            v42 = v6;
            v48 = v16;
            gleUnbindAndFreeBufferObject(a1, (_QWORD *)v22);
            v21 = v12 + 1240;
            v19 = v12 + 136;
            v16 = v48;
            LOBYTE(v6) = v42;
            v5 = v51;
            if (v14)
              goto LABEL_21;
          }
          else if (v14)
          {
LABEL_21:
            ++*(_DWORD *)(v14 + 20);
            v24 = *(_QWORD *)(v12 + 912);
            if ((v24 & v20) == 0)
            {
              *(_QWORD *)(v12 + 912) = v24 | v20;
              if ((*(_QWORD *)(v12 + 904) & v20) != 0)
              {
                v50 = v5;
                v41 = v6;
                v43 = v21;
                v47 = v16;
                v45 = v19;
                gleUpdateDrawArraysFuncs(a1);
                v21 = v43;
                v19 = v45;
                v16 = v47;
                LOBYTE(v6) = v41;
                v5 = v50;
              }
            }
            v25 = *(unsigned __int8 *)(v5 + 3844);
            if (*(_BYTE *)(v5 + 3844))
            {
              v26 = (uint64_t *)(v14 + 40);
              v27 = (_QWORD *)(v12 + 8 * v18 + 1496);
              do
              {
                v28 = *v26++;
                *v27 = v28;
                v27 += 35;
                --v25;
              }
              while (v25);
            }
            if (v22)
            {
LABEL_40:
              *(_DWORD *)v5 = 0;
              *(_DWORD *)(a1 + 1532) |= 0x1000u;
              *(_QWORD *)(v12 + 944) |= v20 | 0x10;
              *(_QWORD *)(v21 + 8 * v18) = v14;
LABEL_41:
              if (v14)
              {
                v9 += *(_QWORD *)(v14 + 136);
                if (*(_QWORD *)(v14 + 192))
                {
                  if ((*(_QWORD *)(v12 + 904) & v20) != 0)
                    *(_BYTE *)(v12 + 1216) = 0;
                }
              }
              *(_QWORD *)(v12 + 8 * v18 + 960) = v9;
              if (a4)
                v33 = a4;
              else
                v33 = (v16 * a2);
              v34 = v19 + 24 * v18;
              v37 = *(_QWORD *)(v34 + 16);
              v35 = (unint64_t *)(v34 + 16);
              v36 = v37;
              v38 = ((unint64_t)a2 << 48) | ((unint64_t)(((v33 | v9) & 0xF) == 0) << 57) | ((unint64_t)v10 << 32) | v33;
              if (v37 != v38)
              {
                if ((a2 == 4) == ((v36 & 0xFF000000000000) != 0x4000000000000))
                {
                  v39 = *(_BYTE *)(v12 + 1220);
                  if (a2 == 4)
                    v40 = v39 & ~(1 << v6);
                  else
                    v40 = v39 | (1 << v6);
                  *(_BYTE *)(v12 + 1220) = v40;
                  *(_DWORD *)(a1 + 1548) |= 0x4000u;
                }
                *(_QWORD *)(v12 + 952) |= v20;
                *v35 = v38;
                *(_QWORD *)(a1 + 26184) = gleSetVertexArrayFunc;
                *(_QWORD *)(a1 + 26192) = gleSetVertexArrayFunc;
                *(_QWORD *)(a1 + 26200) = gleSetVertexElemFunc;
                *(_QWORD *)(a1 + 26208) = gleSetVertexElemFunc;
                *(_DWORD *)v5 = 0;
                *(_DWORD *)(a1 + 1532) |= 0x1000u;
              }
              return;
            }
LABEL_39:
            *(_QWORD *)(v12 + 952) |= v20;
            goto LABEL_40;
          }
          v29 = *(_QWORD *)(v12 + 912);
          if ((v29 & v20) != 0)
          {
            *(_QWORD *)(v12 + 912) = v29 & ~v20;
            if ((*(_QWORD *)(v12 + 904) & v20) != 0)
            {
              v52 = v5;
              v30 = v6;
              v49 = v16;
              v44 = v21;
              v46 = v19;
              gleUpdateDrawArraysFuncs(a1);
              v21 = v44;
              v19 = v46;
              v16 = v49;
              LOBYTE(v6) = v30;
              v5 = v52;
            }
          }
          v31 = *(unsigned __int8 *)(v5 + 3844);
          if (*(_BYTE *)(v5 + 3844))
          {
            v32 = (_QWORD *)(v12 + 8 * v18 + 1496);
            do
            {
              *v32 = 0;
              v32 += 35;
              --v31;
            }
            while (v31);
          }
          goto LABEL_39;
        default:
LABEL_29:
          if (*(_WORD *)(a1 + 29832))
            return;
          v17 = 1280;
          goto LABEL_31;
      }
    }
  }
  if (!*(_WORD *)(a1 + 29832))
  {
    v17 = 1281;
    goto LABEL_31;
  }
}

unint64_t glDrawArrays_Exec(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, __n128 a5, double a6, double a7)
{
  unsigned __int16 *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v15;
  __n128 v16;
  double v17;
  double v18;
  int v19;
  int v20;
  __int16 v21;
  unsigned int v22;
  unsigned int v23;

  v7 = (unsigned __int16 *)(result + 26336);
  if (a2 >= 7)
  {
    if (*(_WORD *)(result + 29832))
      return result;
    v21 = 1280;
    goto LABEL_35;
  }
  v8 = result;
  v9 = *(_QWORD *)(result + 26384);
  if ((~*(_DWORD *)(v9 + 904) & 0x900000) != 0 && *(_BYTE *)(result + 17699) != 0
    || (*(_QWORD *)(v9 + 904) & 0x100010000) == 0)
  {
    return result;
  }
  if ((int)a4 <= 0)
  {
    if ((a4 & 0x80000000) == 0 || *(_WORD *)(result + 29832))
      return result;
    v21 = 1281;
    goto LABEL_35;
  }
  v15 = *(_QWORD *)(result + 26432);
  if (*(__int16 *)(v15 + 42) != -1 && !*(_BYTE *)(v15 + 41))
  {
    v22 = a4;
    switch((int)a2)
    {
      case 0:
      case 2:
        break;
      case 1:
        v22 = a4 >> 1;
        break;
      case 3:
        v22 = a4 - 1;
        break;
      case 4:
        v22 = a4 / 3;
        break;
      case 5:
      case 6:
        v22 = a4 - 2;
        break;
      default:
        v22 = 0;
        break;
    }
    v23 = v22 + *(_DWORD *)(v15 + 176);
    if (v23 <= *(_DWORD *)(v15 + 180))
    {
      *(_DWORD *)(v15 + 176) = v23;
      goto LABEL_12;
    }
    if (*(_WORD *)(result + 29832))
      return result;
    v21 = 1282;
LABEL_35:
    *(_WORD *)(result + 29832) = v21;
    return result;
  }
LABEL_12:
  if (*v7 != 5375)
  {
    *(_QWORD *)(result + 26312) = 0;
    *v7 = 5375;
  }
  result = gleDrawArraysOrElements_Entries_Body(result, 2, a2, 1u, v9 + 40, a5, a6, a7);
  if ((_DWORD)result != 2)
  {
    v19 = result;
    if (!(_DWORD)result
      || (result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD))(v8 + 29232))(*(_QWORD *)(v8 + 29016), 0, a2, a3, a4, *v7, *(_QWORD *)(v8 + 26312), 1, 0), !(_DWORD)result))
    {
      if ((*((_DWORD *)v7 + 579) & (1 << a2)) != 0
        && (*((_BYTE *)v7 + 2345) & 1) != 0
        && (*((_BYTE *)v7 + 2347) & 2) != 0)
      {
        if (!*(_BYTE *)(v8 + 32482))
        {
LABEL_21:
          if (v19 && *(_QWORD *)(v9 + 912) && !*(_BYTE *)(v9 + 1216))
            gleSynchronizeBuffersInArray(v8, v9 + 40);
          result = gleDrawArraysOrElements_ExecCore(v8, a2, a3, a4, 0, v9 + 40, 1);
        }
      }
      else
      {
        result = gleDoDrawDispatchCore(v8, 1 << a2, 1u, 2u, v16, v17, v18);
        if ((_DWORD)result)
          goto LABEL_21;
      }
    }
    v20 = *(_DWORD *)(*(_QWORD *)(v8 + 19296) + 316);
    if (*((_DWORD *)v7 + 870) != v20)
    {
      if (*(_QWORD *)(v8 + 28960))
      {
        result = gleInvalidateCurrentDrawFramebufferTextures(v8);
        v20 = *(_DWORD *)(*(_QWORD *)(v8 + 19296) + 316);
      }
      *((_DWORD *)v7 + 870) = v20;
    }
  }
  return result;
}

uint64_t gleFlushAtomicFunc(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(a1 + 28144))();
  *(_BYTE *)(a1 + 28668) = 1;
  *(_QWORD *)(a1 + 26008) = *(_QWORD *)(a1 + 26000);
  return result;
}

uint64_t glGetBooleanv_Exec(uint64_t a1, int a2, BOOL *a3, double a4, double a5, double a6)
{
  uint64_t result;
  __int16 *v9;
  __int16 v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  double *v15;
  double v16;
  int v17;
  char v18;
  _BYTE v19[256];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v18 = 0;
  v17 = 0;
  result = gleGetState(a1, a2, (uint64_t)v19, &v17, &v18, a4, a5, a6);
  if ((_DWORD)result == -2)
  {
    v9 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832))
      return result;
    v10 = 1282;
    goto LABEL_7;
  }
  if ((_DWORD)result == -1)
  {
    v9 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832))
      return result;
    v10 = 1280;
LABEL_7:
    *v9 = v10;
    return result;
  }
  if (v17 == 5124)
  {
    if ((int)result >= 1)
    {
      v11 = result;
      v12 = (uint64_t *)v19;
      do
      {
        v13 = *v12++;
        *a3++ = v13 != 0;
        --v11;
      }
      while (v11);
    }
  }
  else if ((int)result >= 1)
  {
    v14 = result;
    v15 = (double *)v19;
    do
    {
      v16 = *v15++;
      *a3++ = v16 != 0.0;
      --v14;
    }
    while (v14);
  }
  return result;
}

uint64_t gleGetEnabled(uint64_t a1, int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t result;
  __int16 *v5;
  int v6;
  __int16 v7;

  if (a2 < 12288)
  {
    if (a2 > 3023)
    {
      switch(a2)
      {
        case 3024:
          return *(unsigned __int8 *)(a1 + 15224);
        case 3042:
          LOBYTE(v3) = *(_BYTE *)(a1 + 15120);
          return v3 & 1;
        case 3089:
          return *(unsigned __int8 *)(a1 + 15556);
      }
    }
    else
    {
      switch(a2)
      {
        case 2884:
          return *(unsigned __int8 *)(a1 + 15534);
        case 2929:
          return *(unsigned __int8 *)(a1 + 15204);
        case 2960:
          LOBYTE(v3) = *(_BYTE *)(a1 + 15644);
          return v3 & 1;
      }
    }
  }
  else if (a2 > 32822)
  {
    switch(a2)
    {
      case 32823:
        return *(unsigned __int8 *)(a1 + 15537);
      case 32926:
        return *(unsigned __int8 *)(a1 + 17681);
      case 32928:
        return *(unsigned __int8 *)(a1 + 17683);
    }
  }
  else if ((a2 - 12288) < 6)
  {
LABEL_4:
    v2 = *(_DWORD *)(a1 + 17572);
LABEL_5:
    v3 = v2 >> a2;
    return v3 & 1;
  }
  v5 = (__int16 *)(a1 + 29832);
  v6 = *(unsigned __int8 *)(a1 + 32501);
  if (v6 != 2)
  {
    if (a2 == 35977 && v6 == 4)
      return *(unsigned __int8 *)(a1 + 17984);
    if (a2 == 36201 && v6 == 4)
      return *(unsigned __int8 *)(a1 + 17716);
    if (a2 >> 1 == 6147 && (v6 - 3) <= 1)
      goto LABEL_4;
    goto LABEL_47;
  }
  if (a2 > 32825)
  {
    if (a2 > 32926)
    {
      if (a2 > 34883)
      {
        switch(a2)
        {
          case 34884:
            return (*(_DWORD *)(*(_QWORD *)(a1 + 26384) + 904) >> 23) & 1;
          case 34913:
            return *(unsigned __int8 *)(a1 + 15377);
          case 35740:
            return (*(_DWORD *)(*(_QWORD *)(a1 + 26384) + 904) >> 22) & 1;
          default:
            goto LABEL_47;
        }
      }
      else
      {
        switch(a2)
        {
          case 32927:
            return *(unsigned __int8 *)(a1 + 17682);
          case 34477:
            return (*(_DWORD *)(*(_QWORD *)(a1 + 26384) + 904) >> 20) & 1;
          case 34880:
            return *(unsigned __int8 *)(a1 + 17699);
          default:
            goto LABEL_47;
        }
      }
    }
    else
    {
      switch(a2)
      {
        case 32884:
          LOBYTE(v3) = *(_BYTE *)(*(_QWORD *)(a1 + 26384) + 906);
          return v3 & 1;
        case 32885:
          return (*(_DWORD *)(*(_QWORD *)(a1 + 26384) + 904) >> 17) & 1;
        case 32886:
          return (*(_DWORD *)(*(_QWORD *)(a1 + 26384) + 904) >> 18) & 1;
        case 32887:
          goto LABEL_47;
        case 32888:
          return (*(_QWORD *)(*(_QWORD *)(a1 + 26384) + 904) >> *(_WORD *)(a1 + 23770) >> 24) & 1;
        default:
          if (a2 == 32826)
          {
            result = *(unsigned __int8 *)(a1 + 12517);
          }
          else
          {
            if (a2 != 32925)
              goto LABEL_47;
            result = *(unsigned __int8 *)(a1 + 17680);
          }
          break;
      }
    }
  }
  else if (a2 > 3057)
  {
    if ((a2 - 0x4000) < 8)
    {
      v2 = *(_DWORD *)(a1 + 14880);
      goto LABEL_5;
    }
    if (a2 != 3058)
    {
      if (a2 == 3553)
      {
        if (*(unsigned __int16 *)(a1 + 23768) < 8uLL)
          return (*(unsigned __int8 *)(a1 + 76 * *(unsigned __int16 *)(a1 + 23768) + 15684) >> 3) & 1;
        if (*v5)
          return 0;
        result = 0;
        v7 = 1282;
        goto LABEL_73;
      }
LABEL_47:
      if (*v5)
        return 0;
      result = 0;
      v7 = 1280;
LABEL_73:
      *v5 = v7;
      return result;
    }
    return *(unsigned __int8 *)(a1 + 15319);
  }
  else if (a2 <= 2902)
  {
    switch(a2)
    {
      case 2832:
        return *(_BYTE *)(a1 + 32507) & 0x7F;
      case 2848:
        return *(unsigned __int8 *)(a1 + 15315);
      case 2896:
        return *(unsigned __int8 *)(a1 + 14890);
      default:
        goto LABEL_47;
    }
  }
  else if (a2 > 2976)
  {
    if (a2 != 2977)
    {
      if (a2 == 3008)
        return *(unsigned __int8 *)(a1 + 15006);
      goto LABEL_47;
    }
    return *(unsigned __int8 *)(a1 + 12516);
  }
  else
  {
    if (a2 != 2903)
    {
      if (a2 == 2912)
        return *(unsigned __int8 *)(a1 + 15282);
      goto LABEL_47;
    }
    return *(unsigned __int8 *)(a1 + 14891);
  }
  return result;
}

uint64_t gleSetEnable_SCISSOR_TEST(uint64_t result, uint64_t a2, int a3)
{
  int v3;
  _DWORD *v4;

  v3 = a3 != 0;
  if (*(_DWORD *)(result + 15576) != v3)
  {
    v4 = (_DWORD *)(result + 28652);
    *(_DWORD *)(result + 15576) = v3;
    result = gleUpdateViewScissorData(result);
    *v4 = 0;
    v4[287] |= 0x4000000u;
  }
  return result;
}

uint64_t gleSetEnable_DITHER(uint64_t result, uint64_t a2, int a3)
{
  if (*(unsigned __int8 *)(result + 15224) != a3)
  {
    *(_BYTE *)(result + 15224) = a3;
    *(_DWORD *)(result + 29800) |= 0x400u;
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1548) |= 0x40000u;
  }
  return result;
}

uint64_t glColorMask_Exec(uint64_t result, int a2, int a3, int a4, int a5)
{
  char *v5;
  int v6;
  char v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  _DWORD *v14;

  v5 = (char *)(result + 15336);
  if (a2)
    v6 = 255;
  else
    v6 = 0;
  if (a2)
    v7 = -1;
  else
    v7 = 0;
  if (a3)
    v8 = -1;
  else
    v8 = 0;
  if (a4)
    v9 = -1;
  else
    v9 = 0;
  if (a5)
    v10 = -1;
  else
    v10 = 0;
  if (*v5 != v6
    || *(unsigned __int8 *)(result + 15337) != v8
    || *(unsigned __int8 *)(result + 15338) != v9
    || *(unsigned __int8 *)(result + 15339) != v10)
  {
    *v5 = v7;
    *(_BYTE *)(result + 15337) = v8;
    *(_BYTE *)(result + 15338) = v9;
    *(_BYTE *)(result + 15339) = v10;
    if (a3 | a2 | a4 | a5)
      v11 = 255;
    else
      v11 = 0;
    v12 = *(_DWORD *)(result + 29804) & 0xFFFFFF00 | v11;
    *(_DWORD *)(result + 29804) = v12;
    v13 = *(_QWORD *)(result + 28960);
    if (v13)
      v14 = (_DWORD *)(v13 + 552);
    else
      v14 = (_DWORD *)(result + 29808);
    *(_WORD *)(result + 15342) = *v14 & v12;
    *(_DWORD *)(result + 29800) |= 0x40000u;
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1548) |= 0x40000u;
  }
  return result;
}

uint64_t glDepthMask_Exec(uint64_t result, int a2)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  _DWORD *v5;

  v2 = a2 != 0;
  if (*(unsigned __int8 *)(result + 15340) != v2)
  {
    *(_BYTE *)(result + 15340) = v2;
    v3 = *(_DWORD *)(result + 29804) & 0xFFFFFEFF | ((a2 != 0) << 8);
    *(_DWORD *)(result + 29804) = v3;
    v4 = *(_QWORD *)(result + 28960);
    if (v4)
      v5 = (_DWORD *)(v4 + 552);
    else
      v5 = (_DWORD *)(result + 29808);
    *(_WORD *)(result + 15342) = *v5 & v3;
    *(_DWORD *)(result + 29800) |= 0x80000u;
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1548) |= 0x40000u;
  }
  return result;
}

uint64_t glStencilMask_Exec(uint64_t result, int a2)
{
  _DWORD *v2;
  int v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  _WORD *v8;

  v2 = (_DWORD *)(result + 28652);
  if (*(_DWORD *)(result + 29776) == 1028)
  {
    if (*(_DWORD *)(result + 15324) == a2 && *(_DWORD *)(result + 15332) == a2)
      return result;
    *(_DWORD *)(result + 15324) = a2;
    *(_DWORD *)(result + 15332) = a2;
    v3 = *(_DWORD *)(result + 15644);
    if (v3 == 65)
    {
      LOBYTE(v4) = 1;
      *(_DWORD *)(result + 15644) = 1;
      *v2 = 0;
      *(_DWORD *)(result + 1548) |= 0x8000u;
    }
    else
    {
      LOBYTE(v4) = v3 & 0xBF;
      *(_DWORD *)(result + 15644) = v3 & 0xFFFFFFBF;
    }
  }
  else
  {
    if (*(_DWORD *)(result + 15328) == a2)
      return result;
    *(_DWORD *)(result + 15328) = a2;
    v4 = *(_DWORD *)(result + 15644);
    a2 = *(_DWORD *)(result + 15324);
  }
  v5 = 8;
  if ((v4 & 4) != 0)
    v5 = 4;
  v6 = *(_DWORD *)(result + 29804) & 0xFFFFF9FF;
  if (a2)
    v6 |= 0x200u;
  *(_DWORD *)(result + 29804) = v6;
  if (*(_DWORD *)(result + v5 + 15324))
  {
    v6 |= 0x400u;
    *(_DWORD *)(result + 29804) = v6;
  }
  v7 = *(_QWORD *)(result + 28960);
  if (v7)
    v8 = (_WORD *)(v7 + 552);
  else
    v8 = (_WORD *)(result + 29808);
  *(_WORD *)(result + 15342) = *v8 & v6;
  *(_DWORD *)(result + 29800) |= 0x100000u;
  *v2 = 0;
  *(_DWORD *)(result + 1548) |= 0x40000u;
  return result;
}

uint64_t glHint_Exec(uint64_t result, int a2, int a3)
{
  _WORD *v3;
  int v4;

  v3 = (_WORD *)(result + 29832);
  if ((a3 - 4355) <= 0xFFFFFFFC)
    goto LABEL_2;
  v4 = *(unsigned __int8 *)(result + 32501);
  if (a2 == 3154 && v4 == 2)
  {
    *(_WORD *)(result + 15288) = a3;
LABEL_13:
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1524) |= 0x8000000u;
    return result;
  }
  if (a2 == 35723 && (v4 - 3) <= 1)
  {
    *(_WORD *)(result + 15300) = a3;
    goto LABEL_13;
  }
  if (a2 == 33170)
  {
    *(_WORD *)(result + 15296) = a3;
    goto LABEL_13;
  }
  if (v4 == 2)
  {
    switch(a2)
    {
      case 3156:
        *(_WORD *)(result + 15292) = a3;
        return gleUpdateFogData(result);
      case 3153:
        *(_WORD *)(result + 15286) = a3;
        goto LABEL_13;
      case 3152:
        *(_WORD *)(result + 15284) = a3;
        *(_DWORD *)(result + 1548) |= 0x30400u;
        goto LABEL_13;
    }
  }
LABEL_2:
  if (!*v3)
    *v3 = 1280;
  return result;
}

void glePPUpdateProgram(uint64_t a1, int16x4_t *a2)
{
  int v4;
  int16x4_t *v5;
  int16x4_t v6;
  _BOOL4 v7;
  int *v8;
  uint64_t v9;
  int v10;
  int v11;
  _BOOL4 v12;
  int16x4_t *v13;
  int __pattern4;

  if ((a2[53].i8[2] & 0xFB) != 0)
    v4 = 0;
  else
    v4 = 67109888;
  __pattern4 = v4;
  v5 = a2 + 71;
  memset_pattern4(&a2[71], &__pattern4, 0xED8uLL);
  a2[17].i32[1] = 0;
  v6 = a2[54];
  if (v6)
  {
    v13 = v5;
    if (a2[52].i8[1])
      v7 = (*(_WORD *)(*(_QWORD *)(a1 + 19296) + 346) & 1) == 0;
    else
      v7 = 0;
    a2[52].i8[2] = glePPSetParamRemap(0xFFFFFFFF, *(_QWORD *)&v6 + 8 * *(unsigned int *)(*(_QWORD *)&v6 + 60), *(_DWORD *)(*(_QWORD *)&v6 + 56), v7, &v13, (uint64_t)&a2[18], (uint64_t)&a2[34], (int *)&a2[17] + 1);
    PPStreamTokenConvertParamBindings();
  }
  if (a2[55])
  {
    v8 = (int *)a2[13];
    if (v8)
    {
      v11 = *v8;
      v9 = (uint64_t)(v8 + 4);
      v10 = v11;
      v13 = v5;
      if (a2[52].i8[1])
        v12 = (*(_WORD *)(*(_QWORD *)(a1 + 19296) + 346) & 1) == 0;
      else
        v12 = 0;
      a2[52].i8[2] = glePPSetParamRemap(0xFFFFFFFF, v9, v10, v12, &v13, (uint64_t)&a2[18], (uint64_t)&a2[34], (int *)&a2[17] + 1);
      PPStreamTokenConvertParamBindingsToGeneric();
    }
  }
}

uint64_t gleVPEnable(uint64_t a1)
{
  _DWORD *v2;
  _BYTE *v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  int v10;
  int v11;
  int v12;
  int v13;

  v2 = (_DWORD *)(a1 + 28652);
  v3 = (_BYTE *)(a1 + 17700);
  *(_BYTE *)(*(_QWORD *)(a1 + 1424) + 496) |= 0x1Eu;
  *(_BYTE *)(*(_QWORD *)(a1 + 1432) + 496) |= 0x1Eu;
  v4 = *(_DWORD *)(a1 + 24864);
  if ((v4 & 8) != 0)
  {
    v7 = *(_QWORD *)(a1 + 24768);
    if (!v7)
      v7 = *(_QWORD *)(*(_QWORD *)(a1 + 24776) + 64);
    if (*(_BYTE *)(v7 + 2326))
      v5 = 0;
    else
      v5 = *(unsigned __int8 *)(a1 + 29714);
    if (!*(_BYTE *)(v7 + 2327))
      goto LABEL_17;
    goto LABEL_14;
  }
  if ((v4 & 1) != 0)
  {
    v8 = *(_QWORD *)(a1 + 24768);
    if (!v8)
      v8 = *(_QWORD *)(*(_QWORD *)(a1 + 24776) + 40);
    if (*(_BYTE *)(v8 + 214))
      v5 = 0;
    else
      v5 = *(unsigned __int8 *)(a1 + 29714);
    if (!*(_BYTE *)(v8 + 215))
    {
LABEL_17:
      v6 = *(unsigned __int8 *)(a1 + 29714);
      goto LABEL_18;
    }
LABEL_14:
    v6 = 0;
    goto LABEL_18;
  }
  v5 = *(unsigned __int8 *)(a1 + 29714);
  v6 = v5;
LABEL_18:
  v9 = (_BYTE *)(a1 + 14890);
  if (v5 != *(unsigned __int8 *)(a1 + 17702) || v6 != *(unsigned __int8 *)(a1 + 17703))
  {
    *(_BYTE *)(a1 + 17702) = v5;
    *(_BYTE *)(a1 + 17703) = v6;
    *(_DWORD *)(a1 + 1524) |= 0x400000u;
    *v2 = 0;
    *(_DWORD *)(a1 + 1548) |= 0x400u;
  }
  v10 = v4 & 9;
  if (v10 || *(_BYTE *)(a1 + 24756))
  {
    v11 = *(unsigned __int8 *)(a1 + 24750);
  }
  else if (*(_BYTE *)(a1 + 15379))
  {
    v11 = 1;
  }
  else
  {
    v11 = *(_BYTE *)(a1 + 15378) != 0;
  }
  if (v11 != *v3)
  {
    *v3 = v11;
    *(_DWORD *)(a1 + 1532) |= 0x40000000u;
    *v2 = 0;
    *(_DWORD *)(a1 + 1548) |= 0x10000000u;
  }
  if (v10 || *(_BYTE *)(a1 + 24756))
  {
    v12 = *(unsigned __int8 *)(a1 + 24751);
  }
  else
  {
    v12 = *v9;
    if (*v9)
      v12 = *(_BYTE *)(a1 + 14892) != 0;
  }
  if (v12 != *(unsigned __int8 *)(a1 + 17701))
  {
    *(_BYTE *)(a1 + 17701) = v12;
    *(_DWORD *)(a1 + 1532) |= 0x40000000u;
    *v2 = 0;
    v13 = *(_DWORD *)(a1 + 1548);
    *(_DWORD *)(a1 + 1548) = v13 | 0x10008400;
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 29032) + 25) & 0x7F) != 0)
      *(_DWORD *)(a1 + 1548) = v13 | 0x10038400;
  }
  gleVPChangedCore(a1);
  return gleSetColorMaterialEnable(a1);
}

uint64_t gleVPChanged(uint64_t a1)
{
  _DWORD *v1;
  _BYTE *v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  int v9;
  int v10;
  int v11;
  int v12;

  v1 = (_DWORD *)(a1 + 28652);
  v2 = (_BYTE *)(a1 + 17700);
  v3 = *(_DWORD *)(a1 + 24864);
  if ((v3 & 8) != 0)
  {
    v6 = *(_QWORD *)(a1 + 24768);
    if (!v6)
      v6 = *(_QWORD *)(*(_QWORD *)(a1 + 24776) + 64);
    if (*(_BYTE *)(v6 + 2326))
      v4 = 0;
    else
      v4 = *(unsigned __int8 *)(a1 + 29714);
    if (!*(_BYTE *)(v6 + 2327))
      goto LABEL_17;
    goto LABEL_14;
  }
  if ((v3 & 1) != 0)
  {
    v7 = *(_QWORD *)(a1 + 24768);
    if (!v7)
      v7 = *(_QWORD *)(*(_QWORD *)(a1 + 24776) + 40);
    if (*(_BYTE *)(v7 + 214))
      v4 = 0;
    else
      v4 = *(unsigned __int8 *)(a1 + 29714);
    if (!*(_BYTE *)(v7 + 215))
    {
LABEL_17:
      v5 = *(unsigned __int8 *)(a1 + 29714);
      goto LABEL_18;
    }
LABEL_14:
    v5 = 0;
    goto LABEL_18;
  }
  v4 = *(unsigned __int8 *)(a1 + 29714);
  v5 = v4;
LABEL_18:
  v8 = (_BYTE *)(a1 + 14890);
  if (v4 != *(unsigned __int8 *)(a1 + 17702) || v5 != *(unsigned __int8 *)(a1 + 17703))
  {
    *(_BYTE *)(a1 + 17702) = v4;
    *(_BYTE *)(a1 + 17703) = v5;
    *(_DWORD *)(a1 + 1524) |= 0x400000u;
    *v1 = 0;
    *(_DWORD *)(a1 + 1548) |= 0x400u;
  }
  v9 = v3 & 9;
  if (v9 || *(_BYTE *)(a1 + 24756))
  {
    v10 = *(unsigned __int8 *)(a1 + 24750);
  }
  else if (*(_BYTE *)(a1 + 15379))
  {
    v10 = 1;
  }
  else
  {
    v10 = *(_BYTE *)(a1 + 15378) != 0;
  }
  if (v10 != *v2)
  {
    *v2 = v10;
    *(_DWORD *)(a1 + 1532) |= 0x40000000u;
    *v1 = 0;
    *(_DWORD *)(a1 + 1548) |= 0x10000000u;
  }
  if (v9 || *(_BYTE *)(a1 + 24756))
  {
    v11 = *(unsigned __int8 *)(a1 + 24751);
  }
  else
  {
    v11 = *v8;
    if (*v8)
      v11 = *(_BYTE *)(a1 + 14892) != 0;
  }
  if (v11 != *(unsigned __int8 *)(a1 + 17701))
  {
    *(_BYTE *)(a1 + 17701) = v11;
    *(_DWORD *)(a1 + 1532) |= 0x40000000u;
    *v1 = 0;
    v12 = *(_DWORD *)(a1 + 1548);
    *(_DWORD *)(a1 + 1548) = v12 | 0x10008400;
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 29032) + 25) & 0x7F) != 0)
      *(_DWORD *)(a1 + 1548) = v12 | 0x10038400;
  }
  return gleVPChangedCore(a1);
}

uint64_t gleGPEnable(uint64_t a1)
{
  *(_BYTE *)(*(_QWORD *)(a1 + 1424) + 496) |= 0x1Eu;
  *(_BYTE *)(*(_QWORD *)(a1 + 1432) + 496) |= 0x1Eu;
  return gleGPChanged(a1);
}

uint64_t gleGPChanged(uint64_t a1)
{
  uint64_t v2;
  unsigned __int16 *v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t result;

  v2 = a1 + 28652;
  v3 = (unsigned __int16 *)(a1 + 14888);
  v4 = *(_DWORD *)(a1 + 24864);
  if ((v4 & 9) != 0 || *(_BYTE *)(a1 + 24756))
  {
    v5 = *(unsigned __int8 *)(a1 + 24751);
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 14890);
    if (*(_BYTE *)(a1 + 14890))
      v5 = *(_BYTE *)(a1 + 14892) != 0;
  }
  if (v5 != *(unsigned __int8 *)(a1 + 17701))
  {
    *(_BYTE *)(a1 + 17701) = v5;
    *(_DWORD *)(a1 + 1532) |= 0x40000000u;
    *(_DWORD *)v2 = 0;
    v6 = *(_DWORD *)(a1 + 1548);
    *(_DWORD *)(a1 + 1548) = v6 | 0x10008400;
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 29032) + 25) & 0x7F) != 0)
      *(_DWORD *)(a1 + 1548) = v6 | 0x10038400;
  }
  if ((v4 & 9) != 0 || *(_BYTE *)(a1 + 24756))
  {
    v7 = *(unsigned __int8 *)(a1 + 24750);
  }
  else if (*(_BYTE *)(a1 + 15379))
  {
    v7 = 1;
  }
  else
  {
    v7 = *(_BYTE *)(a1 + 15378) != 0;
  }
  if (v7 != *(unsigned __int8 *)(a1 + 17700))
  {
    *(_BYTE *)(a1 + 17700) = v7;
    *(_DWORD *)(a1 + 1532) |= 0x40000000u;
    *(_DWORD *)v2 = 0;
    *(_DWORD *)(a1 + 1548) |= 0x10000000u;
  }
  if ((v4 & 8) != 0)
  {
    v10 = *(_QWORD *)(a1 + 24768);
    if (!v10)
      v10 = *(_QWORD *)(*(_QWORD *)(a1 + 24776) + 64);
    if (*(_BYTE *)(v10 + 2326))
      v8 = 0;
    else
      v8 = *(unsigned __int8 *)(a1 + 29714);
    if (!*(_BYTE *)(v10 + 2327))
      goto LABEL_32;
    goto LABEL_25;
  }
  if ((v4 & 1) != 0)
  {
    v11 = *(_QWORD *)(a1 + 24768);
    if (!v11)
      v11 = *(_QWORD *)(*(_QWORD *)(a1 + 24776) + 40);
    if (*(_BYTE *)(v11 + 214))
      v8 = 0;
    else
      v8 = *(unsigned __int8 *)(a1 + 29714);
    if (!*(_BYTE *)(v11 + 215))
    {
LABEL_32:
      v9 = *(unsigned __int8 *)(a1 + 29714);
      goto LABEL_33;
    }
LABEL_25:
    v9 = 0;
    goto LABEL_33;
  }
  v8 = *(unsigned __int8 *)(a1 + 29714);
  v9 = v8;
LABEL_33:
  if (v8 != *(unsigned __int8 *)(a1 + 17702) || v9 != *(unsigned __int8 *)(a1 + 17703))
  {
    *(_BYTE *)(a1 + 17702) = v8;
    *(_BYTE *)(a1 + 17703) = v9;
    *(_DWORD *)(a1 + 1524) |= 0x400000u;
    *(_DWORD *)v2 = 0;
    *(_DWORD *)(a1 + 1548) |= 0x400u;
  }
  if ((v4 & 8) != 0)
  {
    v13 = *(_QWORD *)(a1 + 24768);
    if (!v13)
      v13 = *(_QWORD *)(*(_QWORD *)(a1 + 24776) + 64);
    v12 = *(_QWORD *)(v13 + 2280);
    if (*(_BYTE *)(v13 + 2325))
    {
      v14 = 0;
      v15 = v13 + 2340;
      do
      {
        *(_DWORD *)(a1 + 1936 + v14) = *(_DWORD *)(v15 + v14);
        v14 += 4;
      }
      while (v14 != 128);
      v16 = 69271552;
      goto LABEL_45;
    }
  }
  else
  {
    v12 = 0;
  }
  *(_OWORD *)(a1 + 2048) = 0u;
  *(_OWORD *)(a1 + 2032) = 0u;
  *(_OWORD *)(a1 + 2016) = 0u;
  *(_OWORD *)(a1 + 2000) = 0u;
  *(_OWORD *)(a1 + 1984) = 0u;
  *(_OWORD *)(a1 + 1968) = 0u;
  *(_OWORD *)(a1 + 1952) = 0u;
  v16 = 2162688;
  *(_OWORD *)(a1 + 1936) = 0u;
LABEL_45:
  *(_QWORD *)(a1 + 24352) = gleSetGPTransformFuncAll;
  *(_QWORD *)(a1 + 24360) = gleSetGPTransformFuncAll;
  gleUpdateInverseNeeds(a1);
  if (*((_BYTE *)v3 + 2))
  {
    v17 = (v4 & 8) != 0 ? *(unsigned __int8 *)(v2 + 3854) : (*v3 == 33274);
    if (v17 != *((unsigned __int8 *)v3 + 395))
    {
      *((_BYTE *)v3 + 395) = v17;
      *(_DWORD *)v2 = 0;
      *(_DWORD *)(a1 + 1548) |= 0x20000u;
    }
  }
  result = gleUpdateInvalidPrimitives(a1);
  if (*(_QWORD *)(a1 + 19272) == v12)
    v16 = 2162688;
  else
    *(_QWORD *)(a1 + 19272) = v12;
  *(_DWORD *)(a1 + 1532) |= v16;
  *(_DWORD *)v2 = 0;
  *(_DWORD *)(a1 + 1548) |= 0x808202u;
  return result;
}

uint64_t gleFPChanged(uint64_t a1)
{
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t i;
  uint64_t result;
  int v15;

  v2 = a1 + 24760;
  if ((*(_BYTE *)(a1 + 24864) & 0x10) != 0)
  {
    v6 = *(_QWORD *)(a1 + 24768);
    if (!v6)
      v6 = *(_QWORD *)(*(_QWORD *)(a1 + 24776) + 72);
    v7 = (uint64_t *)(v6 + 3044);
    v8 = *(uint64_t **)(v6 + 2984);
    v9 = *(unsigned __int8 *)(v6 + 3029);
  }
  else
  {
    v3 = (_BYTE *)(a1 + 32496);
    if (*(_BYTE *)v2)
    {
      v4 = *(_QWORD *)(a1 + 24432);
      v5 = (uint64_t *)(v4 + 40);
      if (!*(_QWORD *)(v4 + 472))
      {
        *(_DWORD *)(a1 + 28652) = 0;
        *(_DWORD *)(a1 + 1540) |= 0x20000000u;
      }
    }
    else
    {
      v5 = *(uint64_t **)(a1 + 24512);
    }
    v7 = v5 + 34;
    v8 = v5 + 71;
    v9 = *((unsigned __int8 *)v5 + 418);
    v10 = *v3;
    if (*v3)
    {
      v11 = (_QWORD *)(a1 + 33464);
      do
      {
        v12 = *v5++;
        *v11 = v12;
        v11 += 209;
        --v10;
      }
      while (v10);
    }
  }
  if (v9)
  {
    for (i = 0; i != 128; i += 4)
      *(_DWORD *)(a1 + 2064 + i) = *(_DWORD *)((char *)v7 + i);
  }
  else
  {
    *(_OWORD *)(a1 + 2176) = 0u;
    *(_OWORD *)(a1 + 2160) = 0u;
    *(_OWORD *)(a1 + 2144) = 0u;
    *(_OWORD *)(a1 + 2128) = 0u;
    *(_OWORD *)(a1 + 2112) = 0u;
    *(_OWORD *)(a1 + 2096) = 0u;
    *(_OWORD *)(a1 + 2080) = 0u;
    *(_OWORD *)(a1 + 2064) = 0u;
  }
  gleUpdateFogData(a1);
  result = gleUpdateInverseNeeds(a1);
  v15 = 4325376;
  if (*(uint64_t **)(a1 + 19280) != v8)
  {
    *(_QWORD *)(a1 + 19280) = v8;
    if (v9)
      v15 = 138543104;
    else
      v15 = 4325376;
  }
  *(_DWORD *)(a1 + 1532) |= v15;
  *(_DWORD *)(v2 + 3892) = 0;
  *(_DWORD *)(a1 + 1548) |= 0x71018402u;
  return result;
}

uint64_t gleModifyPluginPipelineProgram(uint64_t result, uint64_t a2, int a3)
{
  unsigned __int8 *v3;
  unsigned int v4;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v3 = (unsigned __int8 *)(result + 32496);
  v4 = *(unsigned __int8 *)(result + 32496);
  if (*(_BYTE *)(result + 32496))
  {
    v7 = 0;
    v8 = a3 & 5;
    v9 = (_QWORD *)(result + 32520);
    do
    {
      *(_DWORD *)(a2 + 4 * v7 + 520) |= a3;
      if ((_DWORD)v8)
      {
        result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(v9[205] + 1640))(*v9, *(_QWORD *)(a2 + 8 * v7), v8);
        v4 = *v3;
      }
      ++v7;
      v9 += 209;
    }
    while (v7 < v4);
  }
  return result;
}

float32x2_t *gleUpdateLightRGBASums(float32x2_t *result, float32x2_t *a2, int a3)
{
  __int8 v3;
  float32x2_t v4;
  int v5;
  float32x2_t *v6;
  float32x2_t v7;
  unint64_t v8;
  float32x2_t v9;
  unint64_t v10;
  float32x2_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  _DWORD *v15;
  BOOL v17;
  float *v18;
  uint64_t v19;
  uint64_t v20;
  float32x2_t *v21;
  __int32 v22;
  float32x2_t *v23;
  float32x2_t v24;
  unint64_t v25;
  float32x2_t v26;
  unint64_t v27;
  float32x2_t v28;
  unint64_t v29;
  float32x2_t *v30;
  __int32 v31;
  float32x2_t v32;
  unint64_t v33;
  float32x2_t v34;
  unint64_t v35;
  float32x2_t v36;
  unint64_t v37;
  float32x2_t *v38;
  __int32 v39;
  float32x2_t v40;
  unint64_t v41;
  float32x2_t v42;
  unint64_t v43;
  float32x2_t v44;
  unint64_t v45;
  BOOL v46;

  v3 = a2[62].i8[0];
  v4 = a2[64];
  if (v4)
    v5 = (a2[62].u8[1] | *(unsigned __int8 *)(*(_QWORD *)&v4 + 496)) ^ 0xFF;
  else
    v5 = 0;
  if ((a2[62].i8[0] & 0xF) != 0)
  {
    if ((~v5 & 0xF) != 0)
    {
      a2[58] = vmla_f32(a2[6], *a2, result[1566]);
      a2[59].f32[0] = a2[7].f32[0] + (float)(result[1567].f32[0] * a2[1].f32[0]);
      a2[59].i32[1] = a2[3].i32[1];
      v7 = result[2406];
      if (v7)
      {
        v8 = *(unsigned __int16 *)(*(_QWORD *)&v7 + 12 * a3 + 2826);
        if (v8 <= 0x3FF)
        {
          *(__int32 *)((char *)result[194].i32 + ((v8 >> 3) & 0x1FFC)) |= 1 << v8;
          result[3581].i32[1] = 0;
          result[191].i32[1] |= 0x800000u;
        }
      }
      v6 = a2 + 58;
      v9 = result[2409];
      if (v9)
      {
        v10 = *(unsigned __int16 *)(*(_QWORD *)&v9 + 12 * a3 + 2826);
        if (v10 <= 0x3FF)
        {
          *(__int32 *)((char *)result[242].i32 + ((v10 >> 3) & 0x1FFC)) |= 1 << v10;
          result[3581].i32[1] = 0;
          result[191].i32[1] |= 0x4000000u;
        }
      }
      v11 = result[2410];
      if (v11)
      {
        v12 = *(unsigned __int16 *)(*(_QWORD *)&v11 + 12 * a3 + 2826);
        if (v12 <= 0x3FF)
        {
          *(__int32 *)((char *)result[258].i32 + ((v12 >> 3) & 0x1FFC)) |= 1 << v12;
          result[3581].i32[1] = 0;
          result[191].i32[1] |= 0x8000000u;
        }
      }
    }
    else
    {
      *(_OWORD *)a2[58].f32 = *(_OWORD *)(*(_QWORD *)&v4 + 464);
      v6 = (float32x2_t *)(*(_QWORD *)&v4 + 480);
    }
    *(_OWORD *)a2[60].f32 = *(_OWORD *)v6->f32;
  }
  v13 = result[1860].u32[0];
  if (v13)
  {
    v14 = 0;
    v15 = (_DWORD *)&result[3581] + 1;
    v17 = (~v5 & 0xF) == 0 || (v3 & 0xF) == 0;
    v18 = (float *)&result[1573];
    v19 = 6 * a3;
    v20 = *(_QWORD *)&v4 + 112;
    do
    {
      if ((v13 & 1) != 0)
      {
        v21 = &a2[v14 + 10];
        if ((v3 & 4) != 0)
        {
          if ((v5 & 4) != 0)
          {
            *(_OWORD *)v21->f32 = *(_OWORD *)(v20 + v14 * 8 - 32);
          }
          else
          {
            *v21 = vmul_f32(*(float32x2_t *)(v18 - 10), *a2);
            v22 = a2[1].i32[1];
            v23 = &a2[v14];
            v23[11].f32[0] = *(v18 - 8) * a2[1].f32[0];
            v23[11].i32[1] = v22;
            v24 = result[2406];
            if (v24)
            {
              v25 = *(unsigned __int16 *)(*(_QWORD *)&v24 + v19 + 2720);
              if (v25 <= 0x3FF)
              {
                *(__int32 *)((char *)result[194].i32 + ((v25 >> 3) & 0x1FFC)) |= 1 << v25;
                *v15 = 0;
                result[191].i32[1] |= 0x800000u;
              }
            }
            v26 = result[2409];
            if (v26)
            {
              v27 = *(unsigned __int16 *)(*(_QWORD *)&v26 + v19 + 2720);
              if (v27 <= 0x3FF)
              {
                *(__int32 *)((char *)result[242].i32 + ((v27 >> 3) & 0x1FFC)) |= 1 << v27;
                *v15 = 0;
                result[191].i32[1] |= 0x4000000u;
              }
            }
            v28 = result[2410];
            if (v28)
            {
              v29 = *(unsigned __int16 *)(*(_QWORD *)&v28 + v19 + 2720);
              if (v29 <= 0x3FF)
              {
                *(__int32 *)((char *)result[258].i32 + ((v29 >> 3) & 0x1FFC)) |= 1 << v29;
                *v15 = 0;
                result[191].i32[1] |= 0x8000000u;
              }
            }
          }
        }
        if (!v17)
        {
          a2[60] = vadd_f32(*v21, a2[60]);
          a2[61].f32[0] = a2[v14 + 11].f32[0] + a2[61].f32[0];
        }
        if ((v3 & 8) != 0)
        {
          v30 = &a2[v14];
          if ((v5 & 8) != 0)
          {
            *(_OWORD *)v30[12].f32 = *(_OWORD *)(v20 + v14 * 8 - 16);
          }
          else
          {
            v30[12] = vmul_f32(*(float32x2_t *)(v18 - 6), a2[2]);
            v31 = a2[3].i32[1];
            v30[13].f32[0] = *(v18 - 4) * a2[3].f32[0];
            v30[13].i32[1] = v31;
            v32 = result[2406];
            if (v32)
            {
              v33 = *(unsigned __int16 *)(*(_QWORD *)&v32 + v19 + 2722);
              if (v33 <= 0x3FF)
              {
                *(__int32 *)((char *)result[194].i32 + ((v33 >> 3) & 0x1FFC)) |= 1 << v33;
                *v15 = 0;
                result[191].i32[1] |= 0x800000u;
              }
            }
            v34 = result[2409];
            if (v34)
            {
              v35 = *(unsigned __int16 *)(*(_QWORD *)&v34 + v19 + 2722);
              if (v35 <= 0x3FF)
              {
                *(__int32 *)((char *)result[242].i32 + ((v35 >> 3) & 0x1FFC)) |= 1 << v35;
                *v15 = 0;
                result[191].i32[1] |= 0x4000000u;
              }
            }
            v36 = result[2410];
            if (v36)
            {
              v37 = *(unsigned __int16 *)(*(_QWORD *)&v36 + v19 + 2722);
              if (v37 <= 0x3FF)
              {
                *(__int32 *)((char *)result[258].i32 + ((v37 >> 3) & 0x1FFC)) |= 1 << v37;
                *v15 = 0;
                result[191].i32[1] |= 0x8000000u;
              }
            }
          }
        }
        if ((v3 & 0x10) != 0)
        {
          v38 = &a2[v14];
          if ((v5 & 0x10) != 0)
          {
            *(_OWORD *)v38[14].f32 = *(_OWORD *)(v20 + v14 * 8);
          }
          else
          {
            v38[14] = vmul_f32(*(float32x2_t *)(v18 - 2), a2[4]);
            v39 = a2[5].i32[1];
            v38[15].f32[0] = *v18 * a2[5].f32[0];
            v38[15].i32[1] = v39;
            v40 = result[2406];
            if (v40)
            {
              v41 = *(unsigned __int16 *)(*(_QWORD *)&v40 + v19 + 2724);
              if (v41 <= 0x3FF)
              {
                *(__int32 *)((char *)result[194].i32 + ((v41 >> 3) & 0x1FFC)) |= 1 << v41;
                *v15 = 0;
                result[191].i32[1] |= 0x800000u;
              }
            }
            v42 = result[2409];
            if (v42)
            {
              v43 = *(unsigned __int16 *)(*(_QWORD *)&v42 + v19 + 2724);
              if (v43 <= 0x3FF)
              {
                *(__int32 *)((char *)result[242].i32 + ((v43 >> 3) & 0x1FFC)) |= 1 << v43;
                *v15 = 0;
                result[191].i32[1] |= 0x4000000u;
              }
            }
            v44 = result[2410];
            if (v44)
            {
              v45 = *(unsigned __int16 *)(*(_QWORD *)&v44 + v19 + 2724);
              if (v45 <= 0x3FF)
              {
                *(__int32 *)((char *)result[258].i32 + ((v45 >> 3) & 0x1FFC)) |= 1 << v45;
                *v15 = 0;
                result[191].i32[1] |= 0x8000000u;
              }
            }
          }
        }
      }
      v18 += 40;
      v14 += 6;
      v19 += 12;
      v46 = v13 > 1;
      v13 >>= 1;
    }
    while (v46);
  }
  a2[62].i8[0] = 0;
  return result;
}

uint64_t gleVPDisable(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t result;
  uint64_t v14;
  _QWORD *v15;

  v2 = a1 + 28652;
  v3 = *(_DWORD *)(a1 + 24864);
  if ((v3 & 8) != 0)
  {
    v6 = *(_QWORD *)(a1 + 24768);
    if (!v6)
      v6 = *(_QWORD *)(*(_QWORD *)(a1 + 24776) + 64);
    if (*(_BYTE *)(v6 + 2326))
      v4 = 0;
    else
      v4 = *(unsigned __int8 *)(a1 + 29714);
    if (!*(_BYTE *)(v6 + 2327))
      goto LABEL_17;
    goto LABEL_14;
  }
  if ((v3 & 1) != 0)
  {
    v7 = *(_QWORD *)(a1 + 24768);
    if (!v7)
      v7 = *(_QWORD *)(*(_QWORD *)(a1 + 24776) + 40);
    if (*(_BYTE *)(v7 + 214))
      v4 = 0;
    else
      v4 = *(unsigned __int8 *)(a1 + 29714);
    if (!*(_BYTE *)(v7 + 215))
    {
LABEL_17:
      v5 = *(unsigned __int8 *)(a1 + 29714);
      goto LABEL_18;
    }
LABEL_14:
    v5 = 0;
    goto LABEL_18;
  }
  v4 = *(unsigned __int8 *)(a1 + 29714);
  v5 = v4;
LABEL_18:
  if (v4 != *(unsigned __int8 *)(a1 + 17702) || v5 != *(unsigned __int8 *)(a1 + 17703))
  {
    *(_BYTE *)(a1 + 17702) = v4;
    *(_BYTE *)(a1 + 17703) = v5;
    *(_DWORD *)(a1 + 1524) |= 0x400000u;
    *(_DWORD *)v2 = 0;
    *(_DWORD *)(a1 + 1548) |= 0x400u;
  }
  v8 = v3 & 9;
  if (v8 || *(_BYTE *)(a1 + 24756))
  {
    v9 = *(unsigned __int8 *)(a1 + 24750);
  }
  else if (*(_BYTE *)(a1 + 15379))
  {
    v9 = 1;
  }
  else
  {
    v9 = *(_BYTE *)(a1 + 15378) != 0;
  }
  if (v9 != *(unsigned __int8 *)(a1 + 17700))
  {
    *(_BYTE *)(a1 + 17700) = v9;
    *(_DWORD *)(a1 + 1532) |= 0x40000000u;
    *(_DWORD *)v2 = 0;
    *(_DWORD *)(a1 + 1548) |= 0x10000000u;
  }
  if (v8 || *(_BYTE *)(a1 + 24756))
  {
    v10 = *(unsigned __int8 *)(a1 + 24751);
  }
  else
  {
    v10 = *(unsigned __int8 *)(a1 + 14890);
    if (*(_BYTE *)(a1 + 14890))
      v10 = *(_BYTE *)(a1 + 14892) != 0;
  }
  if (v10 != *(unsigned __int8 *)(a1 + 17701))
  {
    *(_BYTE *)(a1 + 17701) = v10;
    *(_DWORD *)(a1 + 1532) |= 0x40000000u;
    *(_DWORD *)v2 = 0;
    v11 = *(_DWORD *)(a1 + 1548);
    *(_DWORD *)(a1 + 1548) = v11 | 0x10008400;
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 29032) + 25) & 0x7F) != 0)
      *(_DWORD *)(a1 + 1548) = v11 | 0x10038400;
  }
  if (*(_BYTE *)(a1 + 14890))
  {
    v12 = *(unsigned __int16 *)(a1 + 14888) == 33274;
    if (*(unsigned __int8 *)(a1 + 15283) != v12)
    {
      *(_BYTE *)(a1 + 15283) = v12;
      *(_DWORD *)v2 = 0;
      *(_DWORD *)(a1 + 1548) |= 0x20000u;
    }
  }
  *(_QWORD *)(a1 + 19248) = *(_QWORD *)(a1 + 24440) + 608;
  *(_QWORD *)(a1 + 24200) = gleSetVPTransformFuncAll;
  *(_QWORD *)(a1 + 24208) = gleSetVPTransformFuncAll;
  gleUpdateInverseNeeds(a1);
  result = gleSetColorMaterialEnable(a1);
  v14 = *(unsigned __int8 *)(v2 + 3844);
  if (*(_BYTE *)(v2 + 3844))
  {
    v15 = (_QWORD *)(a1 + 33432);
    do
    {
      *v15 = 0;
      v15 += 209;
      --v14;
    }
    while (v14);
  }
  *(_DWORD *)(a1 + 1532) |= 0x40000u;
  *(_DWORD *)v2 = 0;
  *(_DWORD *)(a1 + 1548) |= 0x108202u;
  return result;
}

uint64_t gleGPDisable(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  int v5;
  uint64_t result;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  v2 = a1 + 28652;
  v3 = (unsigned __int8 *)(a1 + 24750);
  v4 = (unsigned __int8 *)(a1 + 14888);
  if (*(_BYTE *)(a1 + 14890))
  {
    v5 = *(unsigned __int16 *)v4 == 33274;
    if (*(unsigned __int8 *)(a1 + 15283) != v5)
    {
      *(_BYTE *)(a1 + 15283) = v5;
      *(_DWORD *)v2 = 0;
      *(_DWORD *)(a1 + 1548) |= 0x20000u;
    }
  }
  *(_QWORD *)(a1 + 19272) = 0;
  *(_QWORD *)(a1 + 24352) = gleSetGPTransformFuncAll;
  *(_QWORD *)(a1 + 24360) = gleSetGPTransformFuncAll;
  gleUpdateInverseNeeds(a1);
  result = gleUpdateInvalidPrimitives(a1);
  v7 = *(_DWORD *)(v3 + 114);
  if ((v7 & 9) != 0 || v3[6])
  {
    v8 = v3[1];
  }
  else
  {
    v8 = v4[2];
    if (v4[2])
      v8 = v4[4] != 0;
  }
  if (v8 != v4[2813])
  {
    v4[2813] = v8;
    *(_DWORD *)(a1 + 1532) |= 0x40000000u;
    *(_DWORD *)v2 = 0;
    v9 = *(_DWORD *)(a1 + 1548);
    *(_DWORD *)(a1 + 1548) = v9 | 0x10008400;
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 29032) + 25) & 0x7F) != 0)
      *(_DWORD *)(a1 + 1548) = v9 | 0x10038400;
  }
  if ((v7 & 9) != 0 || v3[6])
  {
    v10 = *v3;
  }
  else if (v4[491])
  {
    v10 = 1;
  }
  else
  {
    v10 = v4[490] != 0;
  }
  if (v10 != v4[2812])
  {
    v4[2812] = v10;
    *(_DWORD *)(a1 + 1532) |= 0x40000000u;
    *(_DWORD *)v2 = 0;
    *(_DWORD *)(a1 + 1548) |= 0x10000000u;
  }
  if ((v7 & 8) != 0)
  {
    v13 = *(_QWORD *)(a1 + 24768);
    if (!v13)
      v13 = *(_QWORD *)(*(_QWORD *)(a1 + 24776) + 64);
    if (*(_BYTE *)(v13 + 2326))
      v11 = 0;
    else
      v11 = *(unsigned __int8 *)(v2 + 1062);
    if (!*(_BYTE *)(v13 + 2327))
      goto LABEL_35;
    goto LABEL_28;
  }
  if ((v7 & 1) != 0)
  {
    v14 = *(_QWORD *)(a1 + 24768);
    if (!v14)
      v14 = *(_QWORD *)(*(_QWORD *)(a1 + 24776) + 40);
    if (*(_BYTE *)(v14 + 214))
      v11 = 0;
    else
      v11 = *(unsigned __int8 *)(v2 + 1062);
    if (!*(_BYTE *)(v14 + 215))
    {
LABEL_35:
      v12 = *(unsigned __int8 *)(v2 + 1062);
      goto LABEL_36;
    }
LABEL_28:
    v12 = 0;
    goto LABEL_36;
  }
  v11 = *(unsigned __int8 *)(v2 + 1062);
  v12 = v11;
LABEL_36:
  if (v11 == v4[2814] && v12 == v4[2815])
  {
    v15 = *(_DWORD *)(a1 + 1548);
  }
  else
  {
    v4[2814] = v11;
    v4[2815] = v12;
    *(_DWORD *)(a1 + 1524) |= 0x400000u;
    v15 = *(_DWORD *)(a1 + 1548) | 0x400;
  }
  *(_DWORD *)(a1 + 1532) |= 0x200000u;
  *(_DWORD *)v2 = 0;
  *(_DWORD *)(a1 + 1548) = v15 | 0x808202;
  return result;
}

uint64_t gleCreateSurfaceLevel(uint64_t a1, uint64_t a2, __int16 a3, __int16 a4, __int16 a5, __int16 a6)
{
  *(_QWORD *)(a2 + 24) = 0;
  *(_WORD *)(a2 + 4) = a3;
  *(_WORD *)(a2 + 6) = a4;
  *(_QWORD *)(a2 + 8) = 838860801;
  *(_WORD *)(a2 + 16) = a5;
  *(_WORD *)(a2 + 18) = a6;
  return 0;
}

uint64_t gleDeleteHashNameAndObject(uint64_t a1, void (**a2)(uint64_t, uint64_t), unsigned int a3)
{
  uint64_t result;
  int v7;

  result = gleRemoveHashName((uint64_t)a2, a3);
  if ((_DWORD)result)
  {
    result = (uint64_t)gleRemoveHashObject((uint64_t)a2, a3);
    if (result)
    {
      v7 = *(_DWORD *)(result + 20) - 1;
      *(_DWORD *)(result + 20) = v7;
      if (!v7)
        (*a2)(a1, result);
      return 1;
    }
  }
  return result;
}

uint64_t glTexParameterf_Exec(uint64_t a1, int a2, int a3, float32_t a4)
{
  float32x2_t var4;

  var4.f32[0] = a4;
  return glTexParameterF_Exec(a1, a2, a3, &var4);
}

uint64_t glTexParameterF_Exec(uint64_t a1, int a2, int a3, float32x2_t *a4)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  unsigned int v12;
  char v13;
  int v14;
  int v15;
  int v16;
  char v17;
  float v18;
  __int16 v19;
  float v20;
  int v21;
  int v22;
  float v23;
  int v24;
  char v25;
  unsigned int v26;
  BOOL v27;
  unsigned int v28;
  char v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  int v40;
  char v41;
  int v42;
  int v43;
  char v44;
  int v45;
  char v46;
  uint64_t v47;
  _BYTE *v48;
  unsigned int v49;
  __int16 v50;
  unsigned int v51;
  unsigned int v52;
  __int16 v53;
  int v54;
  int v55;
  int v56;
  char v57;

  v8 = a1 + 28652;
  result = gleLookUpNonProxyNonFaceTexture(a1, a2);
  if (!result)
    goto LABEL_46;
  v10 = result;
  if (a3 <= 34229)
  {
    if (a3 > 32958)
    {
      if (a3 <= 33168)
      {
        switch(a3)
        {
          case 33082:
            if ((*(_BYTE *)(v8 + 3849) & 0xFE) == 2)
              goto LABEL_46;
            if (*(float *)(result + 932) == a4->f32[0])
              return result;
            *(_DWORD *)(result + 932) = a4->i32[0];
            goto LABEL_127;
          case 33083:
            if ((*(_BYTE *)(v8 + 3849) & 0xFE) == 2)
              goto LABEL_46;
            if (*(float *)(result + 936) == a4->f32[0])
              return result;
            *(_DWORD *)(result + 936) = a4->i32[0];
            goto LABEL_127;
          case 33084:
            if ((*(_BYTE *)(v8 + 3849) & 0xFE) == 2)
              goto LABEL_46;
            v20 = 0.5;
            if (a4->f32[0] < 0.0)
              v20 = -0.5;
            v21 = (int)(float)(a4->f32[0] + v20);
            if (v21 < 0 || a2 == 34037 && v21)
              goto LABEL_172;
            if (*(_DWORD *)(result + 884) == v21)
              return result;
            if (v21)
              *(_BYTE *)(result + 558) = 1;
            v22 = *(_DWORD *)(result + 888);
LABEL_68:
            gleEvaluateTextureParameterChange(a1, result, v21, v22, (*(_BYTE *)(result + 898) & 2) != 0, *(_BYTE *)(result + 898) & 1);
            v24 = 0;
            *(_DWORD *)(a1 + 1548) |= 0x8000000u;
            break;
          case 33085:
            v23 = 0.5;
            if (a4->f32[0] < 0.0)
              v23 = -0.5;
            v22 = (int)(float)(a4->f32[0] + v23);
            if (v22 < 0)
              goto LABEL_172;
            if (*(_DWORD *)(result + 888) == v22)
              return result;
            if (v22 && v22 != 1000)
              *(_BYTE *)(result + 558) = 1;
            v21 = *(_DWORD *)(result + 884);
            goto LABEL_68;
          default:
            goto LABEL_46;
        }
        goto LABEL_132;
      }
      if (a3 == 33169)
      {
        v28 = a4->f32[0];
        if (*(unsigned __int8 *)(v8 + 3849) - 3 >= 2 && v28 < 2)
        {
          v30 = *(_BYTE *)(result + 898);
          if ((v30 & 1) != v28)
          {
            if (v28)
              *(_BYTE *)(result + 558) = 1;
            gleEvaluateTextureParameterChange(a1, result, *(_DWORD *)(result + 884), *(_DWORD *)(result + 888), (v30 & 2) != 0, v28);
            *(_DWORD *)v8 = 0;
            *(_DWORD *)(a1 + 1548) |= 0x22000u;
            v31 = a1;
            v32 = v10;
            v33 = 0;
            return gleDirtyTextureObjectCurrentBindPointsData(v31, v32, v33);
          }
          return result;
        }
      }
      else if (a3 == 34046)
      {
        v18 = a4->f32[0];
        if (a4->f32[0] >= 1.0)
        {
          if (*(float *)(result + 928) != v18)
          {
            *(float *)(result + 928) = v18;
LABEL_127:
            v47 = *(unsigned __int8 *)(v8 + 3844);
            if (*(_BYTE *)(v8 + 3844))
            {
              v48 = (_BYTE *)(result + 480);
              do
              {
                *v48 |= 1u;
                v48 += 4;
                --v47;
              }
              while (v47);
            }
            v24 = 1;
            goto LABEL_131;
          }
          return result;
        }
LABEL_172:
        if (*(_WORD *)(v8 + 1180))
          return result;
        v19 = 1281;
LABEL_48:
        *(_WORD *)(v8 + 1180) = v19;
        return result;
      }
      goto LABEL_46;
    }
    switch(a3)
    {
      case 10240:
        v12 = a4->f32[0];
        switch(v12)
        {
          case 0x2601u:
            goto LABEL_16;
          case 0x8A58u:
            if ((*(_BYTE *)(*(_QWORD *)(a1 + 29480) + 579) & 1) == 0)
              goto LABEL_46;
LABEL_16:
            v13 = *(_BYTE *)(result + 557) | 4;
            break;
          case 0x2600u:
            v13 = *(_BYTE *)(result + 557) & 0xFB;
            break;
          default:
            goto LABEL_46;
        }
        *(_BYTE *)(result + 557) = v13;
        if (*(unsigned __int16 *)(result + 914) != v12)
        {
          *(_WORD *)(result + 914) = v12;
          goto LABEL_127;
        }
        return result;
      case 10241:
        v45 = a4->f32[0];
        if ((v45 - 9985) < 3)
        {
          if (a2 == 34037)
            goto LABEL_46;
          v46 = *(_BYTE *)(result + 557) | 0xA;
LABEL_124:
          *(_BYTE *)(result + 557) = v46;
          *(_BYTE *)(result + 558) = 1;
          goto LABEL_125;
        }
        if (v45 > 9983)
        {
          if (v45 != 35416)
          {
            if (v45 != 9984 || a2 == 34037)
              goto LABEL_46;
            v46 = *(_BYTE *)(result + 557) & 0xF5 | 2;
            goto LABEL_124;
          }
          if ((*(_BYTE *)(*(_QWORD *)(a1 + 29480) + 579) & 1) == 0)
            goto LABEL_46;
        }
        else
        {
          if (v45 == 9728)
          {
            v57 = *(_BYTE *)(result + 557) & 0xF5;
            goto LABEL_201;
          }
          if (v45 != 9729)
            goto LABEL_46;
        }
        v57 = *(_BYTE *)(result + 557) & 0xF5 | 8;
LABEL_201:
        *(_BYTE *)(result + 557) = v57;
LABEL_125:
        if (*(unsigned __int16 *)(result + 912) != v45)
        {
          *(_WORD *)(result + 912) = v45;
          goto LABEL_127;
        }
        return result;
      case 10242:
        v40 = a4->f32[0];
        if (v40 == 10497)
          goto LABEL_109;
        if (v40 <= 34625)
        {
          if (v40 != 33071)
          {
            v54 = 33648;
LABEL_179:
            if (v40 != v54)
              goto LABEL_46;
LABEL_109:
            if (a2 == 34037)
              goto LABEL_46;
            v41 = *(_BYTE *)(result + 557) | 0x10;
LABEL_111:
            *(_BYTE *)(result + 557) = v41;
            if (*(unsigned __int16 *)(result + 920) != v40)
            {
              *(_WORD *)(result + 920) = v40;
              goto LABEL_127;
            }
            return result;
          }
        }
        else
        {
          if ((v40 - 34626) < 2)
            goto LABEL_109;
          if (v40 != 37905)
          {
            v54 = 35090;
            goto LABEL_179;
          }
        }
        v41 = *(_BYTE *)(result + 557) & 0xEF;
        goto LABEL_111;
      case 10243:
        v43 = a4->f32[0];
        if (v43 == 10497)
          goto LABEL_117;
        if (v43 <= 34625)
        {
          if (v43 != 33071)
          {
            v55 = 33648;
LABEL_183:
            if (v43 != v55)
              goto LABEL_46;
LABEL_117:
            if (a2 == 34037)
              goto LABEL_46;
            v44 = *(_BYTE *)(result + 557) | 0x20;
LABEL_119:
            *(_BYTE *)(result + 557) = v44;
            if (*(unsigned __int16 *)(result + 922) != v43)
            {
              *(_WORD *)(result + 922) = v43;
              goto LABEL_127;
            }
            return result;
          }
        }
        else
        {
          if ((v43 - 34626) < 2)
            goto LABEL_117;
          if (v43 != 37905)
          {
            v55 = 35090;
            goto LABEL_183;
          }
        }
        v44 = *(_BYTE *)(result + 557) & 0xDF;
        goto LABEL_119;
      default:
        if (a3 != 32882 || (*(_BYTE *)(v8 + 3849) & 0xFE) == 2)
          goto LABEL_46;
        v16 = a4->f32[0];
        if (v16 == 10497)
          goto LABEL_37;
        if (v16 <= 34625)
        {
          if (v16 != 33071)
          {
            v56 = 33648;
LABEL_193:
            if (v16 != v56)
              goto LABEL_46;
LABEL_37:
            if (a2 == 34037)
              goto LABEL_46;
            v17 = *(_BYTE *)(result + 557) | 0x40;
LABEL_39:
            *(_BYTE *)(result + 557) = v17;
            if (*(unsigned __int16 *)(result + 924) != v16)
            {
              *(_WORD *)(result + 924) = v16;
              goto LABEL_127;
            }
            return result;
          }
        }
        else
        {
          if ((v16 - 34626) < 2)
            goto LABEL_37;
          if (v16 != 37905)
          {
            v56 = 35090;
            goto LABEL_193;
          }
        }
        v17 = *(_BYTE *)(result + 557) & 0xBF;
        goto LABEL_39;
    }
  }
  if (a3 > 35454)
  {
    switch(a3)
    {
      case 36418:
        if ((*(_BYTE *)(v8 + 3849) & 0xFE) == 2)
          goto LABEL_46;
        v11 = 0;
        switch(a4->f32[0])
        {
          case 0x1903u:
            break;
          case 0x1904u:
            v11 = 1;
            break;
          case 0x1905u:
            v11 = 2;
            break;
          case 0x1906u:
            v11 = 3;
            break;
          default:
            v11 = 4;
            break;
        }
        v53 = *(_WORD *)(result + 896);
        if ((v53 & 7) == v11)
          return result;
        v24 = 0;
        v50 = v53 & 0xFFF8 | v11;
        goto LABEL_155;
      case 36419:
        if ((*(_BYTE *)(v8 + 3849) & 0xFE) == 2)
          goto LABEL_46;
        v39 = 0;
        switch(a4->f32[0])
        {
          case 0x1903u:
            break;
          case 0x1904u:
            v39 = 1;
            break;
          case 0x1905u:
            v39 = 2;
            break;
          case 0x1906u:
            v39 = 3;
            break;
          default:
            v39 = 4;
            break;
        }
        v51 = *(unsigned __int16 *)(result + 896);
        if (((v51 >> 3) & 7) == v39)
          return result;
        v24 = 0;
        v50 = v51 & 0xFFC7 | (8 * v39);
        goto LABEL_155;
      case 36420:
        if ((*(_BYTE *)(v8 + 3849) & 0xFE) == 2)
          goto LABEL_46;
        v42 = 0;
        switch(a4->f32[0])
        {
          case 0x1903u:
            break;
          case 0x1904u:
            v42 = 1;
            break;
          case 0x1905u:
            v42 = 2;
            break;
          case 0x1906u:
            v42 = 3;
            break;
          default:
            v42 = 4;
            break;
        }
        v52 = *(unsigned __int16 *)(result + 896);
        if (((v52 >> 6) & 7) == v42)
          return result;
        v24 = 0;
        v50 = v52 & 0xFE3F | ((_WORD)v42 << 6);
        goto LABEL_155;
      case 36421:
        if ((*(_BYTE *)(v8 + 3849) & 0xFE) == 2)
          goto LABEL_46;
        v36 = 0;
        switch(a4->f32[0])
        {
          case 0x1903u:
            break;
          case 0x1904u:
            v36 = 1;
            break;
          case 0x1905u:
            v36 = 2;
            break;
          case 0x1906u:
            v36 = 3;
            break;
          default:
            v36 = 4;
            break;
        }
        v49 = *(unsigned __int16 *)(result + 896);
        if (((v49 >> 9) & 7) == v36)
          return result;
        v24 = 0;
        v50 = v49 & 0xF1FF | ((_WORD)v36 << 9);
LABEL_155:
        *(_WORD *)(result + 896) = v50;
        goto LABEL_131;
      case 36422:
        goto LABEL_46;
      default:
        if (a3 == 35455)
        {
          v34 = a4->f32[0];
          if (v34 >= 2)
            goto LABEL_46;
          v35 = *(unsigned __int8 *)(result + 898);
          if (((v35 >> 2) & 1) != v34)
          {
            v24 = 0;
            *(_BYTE *)(result + 898) = v35 & 0xFB | (4 * (v34 & 1));
            goto LABEL_131;
          }
          return result;
        }
        if (a3 == 35741 && *(_BYTE *)(v8 + 3849) == 2)
        {
          v14 = (int)a4->f32[0];
          if (*(_DWORD *)(result + 740) == v14)
          {
            v15 = (int)a4->f32[1];
            if (*(_DWORD *)(result + 744) == v15
              && *(_DWORD *)(result + 748) == (int)a4[1].f32[0]
              && *(_DWORD *)(result + 752) == (int)a4[1].f32[1])
            {
              return result;
            }
          }
          else
          {
            v15 = (int)a4->f32[1];
          }
          *(_DWORD *)(result + 740) = v14;
          *(_DWORD *)(result + 744) = v15;
          *(int32x2_t *)(result + 748) = vcvt_s32_f32(a4[1]);
          return result;
        }
        break;
    }
    goto LABEL_46;
  }
  if (a3 <= 34891)
  {
    if (a3 == 34230)
    {
      v25 = *(_BYTE *)(result + 898);
      if ((a4->f32[0] != 0.0) == ((v25 & 2) == 0))
      {
        gleEvaluateTextureParameterChange(a1, result, *(_DWORD *)(result + 884), *(_DWORD *)(result + 888), a4->f32[0] != 0.0, v25 & 1);
        v24 = 0;
LABEL_132:
        *(_DWORD *)v8 = 0;
        *(_DWORD *)(a1 + 1548) |= 0x22000u;
        v31 = a1;
        v32 = v10;
        v33 = v24;
        return gleDirtyTextureObjectCurrentBindPointsData(v31, v32, v33);
      }
      return result;
    }
    if (a3 == 34236)
    {
      v37 = a4->f32[0];
      if (v37 - 34237 < 3)
      {
        if (*(unsigned __int16 *)(result + 552) != v37)
        {
          v24 = 0;
          *(_WORD *)(result + 552) = v37;
LABEL_131:
          gfxUpdatePluginTextureLevelGeometry();
          goto LABEL_132;
        }
        return result;
      }
    }
    goto LABEL_46;
  }
  if (a3 != 34892)
  {
    if (a3 == 34893 && *(_BYTE *)(v8 + 3849) != 2 && (*(_BYTE *)(*(_QWORD *)(a1 + 29032) + 577) & 0x10) != 0)
    {
      v38 = a4->f32[0];
      if ((v38 & 0xFFFFFFF8) == 0x200)
      {
        if (*(unsigned __int16 *)(result + 916) != v38)
        {
          *(_WORD *)(result + 916) = v38;
          goto LABEL_127;
        }
        return result;
      }
    }
    goto LABEL_46;
  }
  if (*(_BYTE *)(v8 + 3849) == 2
    || (*(_BYTE *)(*(_QWORD *)(a1 + 29032) + 577) & 0x10) == 0
    || ((v26 = a4->f32[0]) != 0 ? (v27 = v26 == 34894) : (v27 = 1), !v27))
  {
LABEL_46:
    if (*(_WORD *)(v8 + 1180))
      return result;
    v19 = 1280;
    goto LABEL_48;
  }
  if (*(unsigned __int16 *)(result + 918) != v26)
  {
    *(_WORD *)(result + 918) = v26;
    goto LABEL_127;
  }
  return result;
}

uint64_t glDisableClientState_Exec(uint64_t a1, int a2)
{
  return gleSetClientEnableFlag(a1, a2, 0);
}

_DWORD *gleSetEnable_STENCIL_TEST(_DWORD *result, uint64_t a2, int a3)
{
  int v3;
  unsigned int v4;
  BOOL v5;
  int v6;

  v3 = result[3911];
  v4 = v3 & 0xFFFFFFFE | a3;
  if (v3 != v4)
  {
    result[3911] = v4;
    if (v3 & 4 | a3 & 4)
      v5 = 1;
    else
      v5 = (v3 & 0x70 | a3 & 0x70) == 0;
    v6 = result[387];
    if (!v5)
      v6 |= 0x8000u;
    result[380] |= 0x10000000u;
    result[7163] = 0;
    result[387] = v6 | 0x40000;
  }
  return result;
}

uint64_t glDepthFunc_Exec(uint64_t result, int a2)
{
  if ((a2 - 520) <= 0xFFFFFFF7)
  {
    if (!*(_WORD *)(result + 29832))
      *(_WORD *)(result + 29832) = 1280;
  }
  else if (*(unsigned __int16 *)(result + 15200) != a2)
  {
    *(_WORD *)(result + 15200) = a2;
    *(_DWORD *)(result + 1520) |= 0x200u;
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1548) |= 0x40000u;
  }
  return result;
}

uint64_t glCullFace_Exec(uint64_t result, int a2)
{
  if ((a2 - 1028) <= 4 && ((1 << (a2 - 4)) & 0x13) != 0)
  {
    if (*(unsigned __int16 *)(result + 15530) != a2)
    {
      *(_WORD *)(result + 15530) = a2;
      *(_DWORD *)(result + 1520) |= 0x800000u;
      *(_DWORD *)(result + 28652) = 0;
      *(_DWORD *)(result + 1548) |= 0x8000u;
    }
  }
  else if (!*(_WORD *)(result + 29832))
  {
    *(_WORD *)(result + 29832) = 1280;
  }
  return result;
}

uint64_t glClientActiveTexture_Exec(uint64_t result, int a2)
{
  if ((a2 - 33984) < 8)
  {
    *(_WORD *)(result + 23770) = a2 + 31552;
  }
  else if (!*(_WORD *)(result + 29832))
  {
    *(_WORD *)(result + 29832) = 1280;
  }
  return result;
}

uint64_t glTexEnvi_Exec(uint64_t result, int a2, int a3, int a4, double a5)
{
  uint64_t v5;
  int v6;
  int v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  int v18;
  int v19;

  v5 = *(unsigned __int16 *)(result + 23768);
  if (a2 == 8960)
  {
    if (v5 >= 8)
      goto LABEL_10;
    if (a3 > 34161)
    {
      switch(a3)
      {
        case 34176:
          if ((a4 - 34166) >= 3 && a4 != 5890)
            goto LABEL_98;
          v9 = result + 76 * *(unsigned __int16 *)(result + 23768);
          v10 = 15696;
          goto LABEL_96;
        case 34177:
          if ((a4 - 34166) >= 3 && a4 != 5890)
            goto LABEL_98;
          v9 = result + 76 * *(unsigned __int16 *)(result + 23768);
          v10 = 15698;
          goto LABEL_96;
        case 34178:
          if ((a4 - 34166) >= 3 && a4 != 5890)
            goto LABEL_98;
          v9 = result + 76 * *(unsigned __int16 *)(result + 23768);
          v10 = 15700;
          goto LABEL_96;
        case 34179:
        case 34180:
        case 34181:
        case 34182:
        case 34183:
        case 34187:
        case 34188:
        case 34189:
        case 34190:
        case 34191:
        case 34195:
        case 34196:
        case 34197:
        case 34198:
        case 34199:
          goto LABEL_98;
        case 34184:
          if ((a4 - 34166) >= 3 && a4 != 5890)
            goto LABEL_98;
          v9 = result + 76 * *(unsigned __int16 *)(result + 23768);
          v10 = 15702;
          goto LABEL_96;
        case 34185:
          if ((a4 - 34166) >= 3 && a4 != 5890)
            goto LABEL_98;
          v9 = result + 76 * *(unsigned __int16 *)(result + 23768);
          v10 = 15704;
          goto LABEL_96;
        case 34186:
          if ((a4 - 34166) >= 3 && a4 != 5890)
            goto LABEL_98;
          v9 = result + 76 * *(unsigned __int16 *)(result + 23768);
          v10 = 15706;
          goto LABEL_96;
        case 34192:
          if ((a4 & 0xFFFFFFFC) != 0x300)
            goto LABEL_98;
          v9 = result + 76 * *(unsigned __int16 *)(result + 23768);
          v10 = 15708;
          goto LABEL_96;
        case 34193:
          if ((a4 & 0xFFFFFFFC) != 0x300)
            goto LABEL_98;
          v9 = result + 76 * *(unsigned __int16 *)(result + 23768);
          v10 = 15710;
          goto LABEL_96;
        case 34194:
          if ((a4 & 0xFFFFFFFC) != 0x300)
            goto LABEL_98;
          v9 = result + 76 * *(unsigned __int16 *)(result + 23768);
          v10 = 15712;
          goto LABEL_96;
        case 34200:
          if ((a4 & 0xFFFFFFFE) != 0x302)
            goto LABEL_98;
          v9 = result + 76 * *(unsigned __int16 *)(result + 23768);
          v10 = 15714;
          goto LABEL_96;
        case 34201:
          if ((a4 & 0xFFFFFFFE) != 0x302)
            goto LABEL_98;
          v9 = result + 76 * *(unsigned __int16 *)(result + 23768);
          v10 = 15716;
          goto LABEL_96;
        case 34202:
          if ((a4 & 0xFFFFFFFE) != 0x302)
            goto LABEL_98;
          v9 = result + 76 * *(unsigned __int16 *)(result + 23768);
          v10 = 15718;
          goto LABEL_96;
        default:
          if (a3 != 34162)
          {
            if (a3 != 34163)
              goto LABEL_98;
            if (a4 <= 4 && ((1 << a4) & 0x16) != 0)
            {
              *(float *)(result + 76 * *(unsigned __int16 *)(result + 23768) + 15720) = (float)a4;
              goto LABEL_97;
            }
            goto LABEL_90;
          }
          if (a4 > 34022)
          {
            if ((a4 - 34164) >= 2)
            {
              v19 = 34023;
LABEL_94:
              if (a4 != v19)
                goto LABEL_98;
            }
          }
          else if (a4 != 260 && a4 != 7681)
          {
            v19 = 8448;
            goto LABEL_94;
          }
          v9 = result + 76 * *(unsigned __int16 *)(result + 23768);
          v10 = 15694;
          goto LABEL_96;
      }
    }
    if (a3 == 3356)
    {
      if (a4 > 4 || ((1 << a4) & 0x16) == 0)
      {
LABEL_90:
        if (!*(_WORD *)(result + 29832))
          *(_WORD *)(result + 29832) = 1281;
        goto LABEL_97;
      }
      *(float *)(result + 76 * *(unsigned __int16 *)(result + 23768) + 15724) = (float)a4;
LABEL_97:
      *(_DWORD *)(result + 28652) = 0;
      *(_DWORD *)(result + 1548) |= 0x20000u;
      return result;
    }
    if (a3 != 8704)
    {
      if (a3 != 34161)
        goto LABEL_98;
      if (a4 > 34022)
      {
        if ((a4 - 34164) >= 2 && (a4 - 34478) >= 2)
        {
          v17 = 34023;
LABEL_80:
          if (a4 != v17)
            goto LABEL_98;
        }
      }
      else if (a4 != 260 && a4 != 7681)
      {
        v17 = 8448;
        goto LABEL_80;
      }
      v9 = result + 76 * *(unsigned __int16 *)(result + 23768);
      v10 = 15692;
LABEL_96:
      *(_WORD *)(v9 + v10) = a4;
      goto LABEL_97;
    }
    if (a4 > 8447)
    {
      if ((a4 - 8448) >= 2)
      {
        v18 = 34160;
LABEL_88:
        if (a4 != v18)
          goto LABEL_98;
      }
    }
    else if (a4 != 260 && a4 != 3042)
    {
      v18 = 7681;
      goto LABEL_88;
    }
    v9 = result + 76 * *(unsigned __int16 *)(result + 23768);
    v10 = 15688;
    goto LABEL_96;
  }
  if (a2 != 34048)
  {
    if (a2 == 34913 && a3 == 34914)
    {
      if (v5 < 8)
      {
        if (a4 < 2)
        {
          v6 = 1 << v5;
          if (a4 == 1)
            v7 = *(_DWORD *)(result + 15384) | v6;
          else
            v7 = *(_DWORD *)(result + 15384) & ~v6;
          *(_DWORD *)(result + 15384) = v7;
          *(_DWORD *)(result + 28652) = 0;
          *(_DWORD *)(result + 1520) |= 0x400000u;
          return result;
        }
        goto LABEL_98;
      }
LABEL_10:
      if (*(_WORD *)(result + 29832))
        return result;
      v8 = 1282;
      goto LABEL_101;
    }
LABEL_98:
    if (*(_WORD *)(result + 29832))
      return result;
    v8 = 1280;
LABEL_101:
    *(_WORD *)(result + 29832) = v8;
    return result;
  }
  if (a3 != 34049)
    goto LABEL_98;
  *(float *)&a5 = (float)a4;
  *(float *)(result + 2272 + 4 * v5 + 13988) = (float)a4;
  *(int32x4_t *)(result + 2272 + 76 * v5 + 13396) = vdupq_lane_s32(*(int32x2_t *)&a5, 0);
  if ((*(_WORD *)(*(_QWORD *)(result + 29032) + 26) & 0x2000) != 0)
  {
    v11 = *(_QWORD *)(result + 19248);
    if (v11)
    {
      v12 = *(unsigned __int16 *)(v11 + 2 * v5 + 3752);
      if (v12 <= 0x3FF)
      {
        *(_DWORD *)(result + ((v12 >> 3) & 0x1FFC) + 1552) |= 1 << v12;
        *(_DWORD *)(result + 28652) = 0;
        *(_DWORD *)(result + 1532) |= 0x800000u;
      }
    }
    v13 = *(_QWORD *)(result + 19272);
    if (v13)
    {
      v14 = *(unsigned __int16 *)(v13 + 2 * v5 + 3752);
      if (v14 <= 0x3FF)
      {
        *(_DWORD *)(result + ((v14 >> 3) & 0x1FFC) + 1936) |= 1 << v14;
        *(_DWORD *)(result + 28652) = 0;
        *(_DWORD *)(result + 1532) |= 0x4000000u;
      }
    }
    v15 = *(_QWORD *)(result + 19280);
    if (v15)
    {
      v16 = *(unsigned __int16 *)(v15 + 2 * v5 + 3752);
      if (v16 <= 0x3FF)
      {
        *(_DWORD *)(result + ((v16 >> 3) & 0x1FFC) + 2064) |= 1 << v16;
        *(_DWORD *)(result + 28652) = 0;
        *(_DWORD *)(result + 1532) |= 0x8000000u;
      }
    }
  }
  else
  {
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1536) |= 0x10000 << (v5 & 7);
  }
  return result;
}

uint64_t glStencilFunc_Exec(uint64_t result, int a2, int a3, int a4)
{
  _WORD *v4;
  int v5;
  int v6;

  if ((a2 - 520) <= 0xFFFFFFF7)
  {
    if (!*(_WORD *)(result + 29832))
      *(_WORD *)(result + 29832) = 1280;
  }
  else
  {
    v4 = (_WORD *)(result + 15604);
    v5 = a3 & ~(a3 >> 31);
    if (*(_DWORD *)(result + 29776) == 1028)
    {
      if ((unsigned __int16)*v4 != a2
        || *(_DWORD *)(result + 15600) != v5
        || *(_DWORD *)(result + 15596) != a4
        || *(unsigned __int16 *)(result + 15636) != a2
        || *(_DWORD *)(result + 15632) != v5
        || *(_DWORD *)(result + 15628) != a4)
      {
        *v4 = a2;
        *(_DWORD *)(result + 15600) = v5;
        *(_DWORD *)(result + 15596) = a4;
        *(_WORD *)(result + 15636) = a2;
        *(_DWORD *)(result + 15632) = v5;
        *(_DWORD *)(result + 15628) = a4;
        v6 = *(_DWORD *)(result + 15644);
        if (v6 == 17)
        {
          *(_DWORD *)(result + 15644) = 1;
          *(_DWORD *)(result + 1548) |= 0x8000u;
        }
        else
        {
          *(_DWORD *)(result + 15644) = v6 & 0xFFFFFFEF;
        }
        goto LABEL_16;
      }
    }
    else if (*(unsigned __int16 *)(result + 15620) != a2
           || *(_DWORD *)(result + 15616) != v5
           || *(_DWORD *)(result + 15612) != a4)
    {
      *(_WORD *)(result + 15620) = a2;
      *(_DWORD *)(result + 15616) = v5;
      *(_DWORD *)(result + 15612) = a4;
LABEL_16:
      *(_DWORD *)(result + 1520) |= 0x10000000u;
      *(_DWORD *)(result + 28652) = 0;
      *(_DWORD *)(result + 1548) |= 0x40000u;
    }
  }
  return result;
}

unint64_t glDrawElements_Exec(unint64_t result, uint64_t a2, uint64_t a3, int a4, uint64_t a5, __n128 a6, double a7, double a8)
{
  unsigned __int16 *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v15;
  uint64_t v16;
  int v17;
  __n128 v18;
  double v19;
  double v20;
  int v21;
  int v22;
  __int16 v23;
  unsigned int v24;
  unsigned int v25;

  v8 = (unsigned __int16 *)(result + 26336);
  if (a2 >= 7)
    goto LABEL_57;
  v9 = result;
  v10 = *(_QWORD *)(result + 26384);
  if ((~*(_DWORD *)(v10 + 904) & 0x900000) != 0 && *(_BYTE *)(result + 17699) != 0
    || (*(_QWORD *)(v10 + 904) & 0x100010000) == 0)
  {
    return result;
  }
  if (a4 != 5123 && a4 != 5121 && a4 != 5125)
  {
LABEL_57:
    if (!*(_WORD *)(result + 29832))
    {
      v23 = 1280;
LABEL_41:
      *(_WORD *)(result + 29832) = v23;
      return result;
    }
    return result;
  }
  if ((int)a3 > 0)
  {
    v15 = *(_QWORD *)(result + 26432);
    if (*(__int16 *)(v15 + 42) != -1 && !*(_BYTE *)(v15 + 41))
    {
      v24 = a3;
      switch((int)a2)
      {
        case 0:
        case 2:
          break;
        case 1:
          v24 = a3 >> 1;
          break;
        case 3:
          v24 = a3 - 1;
          break;
        case 4:
          v24 = a3 / 3;
          break;
        case 5:
        case 6:
          v24 = a3 - 2;
          break;
        default:
          v24 = 0;
          break;
      }
      v25 = v24 + *(_DWORD *)(v15 + 176);
      if (v25 > *(_DWORD *)(v15 + 180))
      {
        if (!*(_WORD *)(result + 29832))
        {
          v23 = 1282;
          goto LABEL_41;
        }
        return result;
      }
      *(_DWORD *)(v15 + 176) = v25;
    }
    v16 = *(_QWORD *)(v10 + 1232);
    if (v16)
      a5 += *(_QWORD *)(v16 + 136);
    *(_QWORD *)(result + 26312) = a5;
    *v8 = a4;
    if ((a4 - 5121) > 4)
      LOBYTE(v17) = 1;
    else
      v17 = dword_21B9A4E1C[a4 - 5121];
    result = gleDrawArraysOrElements_Entries_Body(result, 2, a2, v17, v10 + 40, a6, a7, a8);
    if ((_DWORD)result == 2)
      return result;
    v21 = result;
    if (!(_DWORD)result
      || (result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD))(v9 + 29232))(*(_QWORD *)(v9 + 29016), 1, a2, 0, a3, *v8, *(_QWORD *)(v9 + 26312), 1, 0), !(_DWORD)result))
    {
      if ((*((_DWORD *)v8 + 579) & (1 << a2)) != 0
        && (*((_BYTE *)v8 + 2345) & 1) != 0
        && (*((_BYTE *)v8 + 2347) & 2) != 0)
      {
        if (!*(_BYTE *)(v9 + 32482))
        {
LABEL_25:
          if (v21 && *(_QWORD *)(v10 + 912) && !*(_BYTE *)(v10 + 1216))
            gleSynchronizeBuffersInArray(v9, v10 + 40);
          result = gleDrawArraysOrElements_ExecCore(v9, a2, 0, a3, 1, v10 + 40, 1);
        }
      }
      else
      {
        result = gleDoDrawDispatchCore(v9, 1 << a2, 1u, 2u, v18, v19, v20);
        if ((_DWORD)result)
          goto LABEL_25;
      }
    }
    v22 = *(_DWORD *)(*(_QWORD *)(v9 + 19296) + 316);
    if (*((_DWORD *)v8 + 870) != v22)
    {
      if (*(_QWORD *)(v9 + 28960))
      {
        result = gleInvalidateCurrentDrawFramebufferTextures(v9);
        v22 = *(_DWORD *)(*(_QWORD *)(v9 + 19296) + 316);
      }
      *((_DWORD *)v8 + 870) = v22;
    }
    return result;
  }
  if ((a3 & 0x80000000) != 0 && !*(_WORD *)(result + 29832))
  {
    v23 = 1281;
    goto LABEL_41;
  }
  return result;
}

uint64_t glClearStencil_Exec(uint64_t result, unsigned __int8 a2)
{
  if (!*(_BYTE *)(*(_QWORD *)(result + 29480) + 110))
  {
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 29800) |= 0x20u;
  }
  *(_DWORD *)(result + 15172) = a2;
  return result;
}

uint64_t glPolygonOffset_Exec(uint64_t result, float a2, float a3)
{
  *(float *)(result + 15516) = a2;
  *(float *)(result + 15520) = a3;
  *(_DWORD *)(result + 28652) = 0;
  *(_DWORD *)(result + 1520) |= 0x800000u;
  return result;
}

uint64_t glEnableVertexAttribArrayARB_Exec(uint64_t result, unsigned int a2)
{
  _DWORD *v2;
  uint64_t v3;
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = (_DWORD *)(result + 28652);
  v3 = *(_QWORD *)(result + 26384);
  if (!v3)
  {
    if (*(_WORD *)(result + 29832))
      return result;
    v4 = 1282;
    goto LABEL_7;
  }
  if (a2 >= 0x10)
  {
    if (*(_WORD *)(result + 29832))
      return result;
    v4 = 1281;
LABEL_7:
    *(_WORD *)(result + 29832) = v4;
    return result;
  }
  v5 = 0x100000000 << a2;
  v6 = *(_QWORD *)(v3 + 904);
  if ((v6 & (0x100000000 << a2)) == 0)
  {
    v7 = result;
    v8 = v6 | v5;
    *(_QWORD *)(v3 + 904) = v6 | v5;
    v9 = *(_QWORD *)(v3 + 912);
    if ((v8 & ~v9) == v5)
    {
      result = gleUpdateDrawArraysFuncs(result);
    }
    else if ((v9 & v5) != 0)
    {
      if (*(_QWORD *)(*(_QWORD *)(v3 + 8 * (a2 + 16) + 1240) + 192))
        *(_BYTE *)(v3 + 1216) = 0;
    }
    *(_QWORD *)(v3 + 944) |= v5 | 0x10;
    *(_QWORD *)(v3 + 952) |= v5;
    *(_QWORD *)(v7 + 26184) = gleSetVertexArrayFunc;
    *(_QWORD *)(v7 + 26192) = gleSetVertexArrayFunc;
    *(_QWORD *)(v7 + 26200) = gleSetVertexElemFunc;
    *(_QWORD *)(v7 + 26208) = gleSetVertexElemFunc;
    *v2 = 0;
    *(_DWORD *)(v7 + 1532) |= 0x1000u;
  }
  return result;
}

void glVertexAttribPointerARB_Exec(uint64_t a1, unsigned int a2, unsigned int a3, int a4, int a5, unsigned int a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  unsigned __int16 v12;
  uint64_t v13;
  int v14;
  int v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unsigned __int16 v32;
  uint64_t v33;
  unint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v7 = a1 + 28652;
  if (a3 - 5 >= 0xFFFFFFFC && (a6 & 0x80000000) == 0 && a2 < 0x10)
  {
    v9 = a7;
    v11 = *(_QWORD *)(a1 + 26384);
    if (v11)
    {
      v12 = a4;
      v13 = *(_QWORD *)(a1 + 19312);
      if (v13 || !a7 || v11 == *(_QWORD *)(a1 + 26392))
      {
        v14 = 0;
        v15 = 4;
        switch(a4)
        {
          case 5120:
          case 5121:
            goto LABEL_9;
          case 5122:
          case 5123:
            v15 = 2;
            goto LABEL_18;
          case 5124:
          case 5125:
            if ((*(_BYTE *)(a1 + 32501) & 0xFE) != 2)
              goto LABEL_18;
            goto LABEL_53;
          case 5126:
          case 5132:
            goto LABEL_19;
          case 5127:
          case 5128:
          case 5129:
          case 5130:
            goto LABEL_53;
          case 5131:
            if ((*(_BYTE *)(a1 + 32501) & 0xFE) == 2)
              goto LABEL_53;
            v14 = 0;
            v15 = 2;
            goto LABEL_19;
          default:
            if ((a4 == 33640 || a4 == 36255) && (*(_BYTE *)(a1 + 32501) & 0xFE) != 2)
            {
              if (a3 <= 3)
                goto LABEL_14;
LABEL_9:
              v15 = 1;
LABEL_18:
              v14 = a5;
LABEL_19:
              v17 = a2 + 16;
              v18 = v11 + 136;
              v19 = (unint64_t)(1 << a2) << 32;
              *(_QWORD *)(v11 + 944) |= v19;
              *(_QWORD *)(v11 + 136 + 24 * v17) = a7;
              v20 = *(_QWORD *)(v11 + 1240 + 8 * v17);
              if (v13 == v20)
                goto LABEL_40;
              if (v20 && (v21 = *(_DWORD *)(v20 + 20) - 1, (*(_DWORD *)(v20 + 20) = v21) == 0))
              {
                v48 = a1 + 28652;
                v38 = a3;
                v42 = v14;
                v45 = v15;
                gleUnbindAndFreeBufferObject(a1, (_QWORD *)v20);
                v18 = v11 + 136;
                v14 = v42;
                v15 = v45;
                a3 = v38;
                v7 = v48;
                if (v13)
                  goto LABEL_23;
              }
              else if (v13)
              {
LABEL_23:
                ++*(_DWORD *)(v13 + 20);
                v22 = *(_QWORD *)(v11 + 912);
                if ((v22 & v19) == 0)
                {
                  *(_QWORD *)(v11 + 912) = v22 | v19;
                  if ((*(_QWORD *)(v11 + 904) & v19) != 0)
                  {
                    v47 = v7;
                    v37 = a3;
                    v41 = v14;
                    v44 = v15;
                    v39 = v18;
                    gleUpdateDrawArraysFuncs(a1);
                    v18 = v39;
                    v14 = v41;
                    v15 = v44;
                    a3 = v37;
                    v7 = v47;
                  }
                }
                v23 = *(unsigned __int8 *)(v7 + 3844);
                if (*(_BYTE *)(v7 + 3844))
                {
                  v24 = (uint64_t *)(v13 + 40);
                  v25 = (_QWORD *)(v11 + 8 * v17 + 1496);
                  do
                  {
                    v26 = *v24++;
                    *v25 = v26;
                    v25 += 35;
                    --v23;
                  }
                  while (v23);
                }
                if (v20)
                  goto LABEL_39;
                goto LABEL_38;
              }
              v27 = *(_QWORD *)(v11 + 912);
              if ((v27 & v19) != 0)
              {
                *(_QWORD *)(v11 + 912) = v27 & ~v19;
                if ((*(_QWORD *)(v11 + 904) & v19) != 0)
                {
                  v49 = v7;
                  v28 = a3;
                  v43 = v14;
                  v46 = v15;
                  v40 = v18;
                  gleUpdateDrawArraysFuncs(a1);
                  v18 = v40;
                  v14 = v43;
                  v15 = v46;
                  a3 = v28;
                  v7 = v49;
                }
              }
              v29 = *(unsigned __int8 *)(v7 + 3844);
              if (*(_BYTE *)(v7 + 3844))
              {
                v30 = (_QWORD *)(v11 + 8 * v17 + 1496);
                do
                {
                  *v30 = 0;
                  v30 += 35;
                  --v29;
                }
                while (v29);
              }
LABEL_38:
              *(_QWORD *)(v11 + 952) |= v19;
LABEL_39:
              *(_DWORD *)v7 = 0;
              *(_DWORD *)(a1 + 1532) |= 0x1000u;
              *(_QWORD *)(v11 + 944) |= v19 | 0x10;
              *(_QWORD *)(v11 + 1240 + 8 * v17) = v13;
LABEL_40:
              if (v13)
              {
                v9 += *(_QWORD *)(v13 + 136);
                if (*(_QWORD *)(v13 + 192))
                {
                  if ((*(_QWORD *)(v11 + 904) & v19) != 0)
                    *(_BYTE *)(v11 + 1216) = 0;
                }
              }
              *(_QWORD *)(v11 + 8 * v17 + 960) = v9;
              if (a6)
                v31 = a6;
              else
                v31 = v15 * a3;
              if (v14)
                v32 = v12 | 0x2000;
              else
                v32 = v12;
              v33 = v18 + 24 * v17;
              v35 = *(_QWORD *)(v33 + 16);
              v34 = (unint64_t *)(v33 + 16);
              v36 = ((unint64_t)a3 << 48) | ((unint64_t)(((v31 | v9) & 0xF) == 0) << 57) | ((unint64_t)v32 << 32) | v31;
              if (v35 != v36)
              {
                *(_QWORD *)(v11 + 952) |= v19;
                *v34 = v36;
                *(_QWORD *)(a1 + 26184) = gleSetVertexArrayFunc;
                *(_QWORD *)(a1 + 26192) = gleSetVertexArrayFunc;
                *(_QWORD *)(a1 + 26200) = gleSetVertexElemFunc;
                *(_QWORD *)(a1 + 26208) = gleSetVertexElemFunc;
                *(_DWORD *)v7 = 0;
                *(_DWORD *)(a1 + 1532) |= 0x1000u;
              }
              return;
            }
LABEL_53:
            if (*(_WORD *)(a1 + 29832))
              return;
            v16 = 1280;
            break;
        }
        goto LABEL_55;
      }
    }
    else if (!a7)
    {
      return;
    }
LABEL_14:
    if (*(_WORD *)(a1 + 29832))
      return;
    v16 = 1282;
    goto LABEL_55;
  }
  if (!*(_WORD *)(a1 + 29832))
  {
    v16 = 1281;
LABEL_55:
    *(_WORD *)(a1 + 29832) = v16;
  }
}

int8x16_t glDisableVertexAttribArrayARB_Exec(uint64_t a1, unsigned int a2)
{
  _DWORD *v2;
  int8x16_t *v3;
  __int16 v4;
  unint64_t v6;
  uint64_t v7;
  int8x16_t result;

  v2 = (_DWORD *)(a1 + 28652);
  v3 = *(int8x16_t **)(a1 + 26384);
  if (!v3)
  {
    if (*(_WORD *)(a1 + 29832))
      return result;
    v4 = 1282;
    goto LABEL_7;
  }
  if (a2 >= 0x10)
  {
    if (*(_WORD *)(a1 + 29832))
      return result;
    v4 = 1281;
LABEL_7:
    *(_WORD *)(a1 + 29832) = v4;
    return result;
  }
  v6 = 0x100000000 << a2;
  v7 = v3[56].i64[1];
  v3[56].i64[1] = v7 & ~(0x100000000 << a2);
  if ((v7 & ~v3[57].i64[0]) == 0x100000000 << a2)
    gleUpdateDrawArraysFuncs(a1);
  result = vorrq_s8(v3[59], (int8x16_t)vdupq_n_s64(v6));
  v3[59] = result;
  *(_QWORD *)(a1 + 26184) = gleSetVertexArrayFunc;
  *(_QWORD *)(a1 + 26192) = gleSetVertexArrayFunc;
  *(_QWORD *)(a1 + 26200) = gleSetVertexElemFunc;
  *(_QWORD *)(a1 + 26208) = gleSetVertexElemFunc;
  *v2 = 0;
  *(_DWORD *)(a1 + 1532) |= 0x1000u;
  return result;
}

uint64_t gleSetEnable_POLYGON_OFFSET_FILL(uint64_t result, uint64_t a2, int a3)
{
  if (*(unsigned __int8 *)(result + 15537) != a3)
  {
    *(_BYTE *)(result + 15537) = a3;
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1520) |= 0x800000u;
  }
  return result;
}

uint64_t glTexEnvfv_Exec(uint64_t result, int a2, int a3, uint64_t a4)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  int v7;
  __int16 v8;
  _DWORD *v9;
  int v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  float v23;
  float v24;
  float32x4_t *v27;
  float32x4_t v28;
  __int32 v29;
  __int32 v30;
  __int32 v31;
  const float *v32;
  float32x4_t v33;
  const float *v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;

  v4 = *(unsigned __int16 *)(result + 23768);
  if (a2 != 8960)
  {
    if (a2 != 34048)
    {
      if (a2 == 34913 && a3 == 34914)
      {
        if (v4 < 8)
        {
          v5 = *(float *)a4;
          if (v5 < 2)
          {
            v6 = 1 << v4;
            if (v5 == 1)
              v7 = *(_DWORD *)(result + 15384) | v6;
            else
              v7 = *(_DWORD *)(result + 15384) & ~v6;
            *(_DWORD *)(result + 15384) = v7;
            *(_DWORD *)(result + 28652) = 0;
            *(_DWORD *)(result + 1520) |= 0x400000u;
            return result;
          }
          goto LABEL_160;
        }
LABEL_10:
        if (*(_WORD *)(result + 29832))
          return result;
        v8 = 1282;
        goto LABEL_163;
      }
LABEL_160:
      if (*(_WORD *)(result + 29832))
        return result;
      v8 = 1280;
LABEL_163:
      *(_WORD *)(result + 29832) = v8;
      return result;
    }
    if (a3 != 34049)
      goto LABEL_160;
    *(_DWORD *)(result + 2272 + 4 * v4 + 13988) = *(_DWORD *)a4;
    v9 = (_DWORD *)(result + 2272 + 76 * v4);
    v9[3349] = *(_DWORD *)a4;
    v9[3350] = *(_DWORD *)a4;
    v9[3351] = *(_DWORD *)a4;
    v9[3352] = *(_DWORD *)a4;
    if ((*(_WORD *)(*(_QWORD *)(result + 29032) + 26) & 0x2000) == 0)
    {
      *(_DWORD *)(result + 28652) = 0;
      *(_DWORD *)(result + 1536) |= 0x10000 << (v4 & 7);
      return result;
    }
    v14 = *(_QWORD *)(result + 19248);
    if (v14)
    {
      v15 = *(unsigned __int16 *)(v14 + 2 * v4 + 3752);
      if (v15 <= 0x3FF)
      {
        *(_DWORD *)(result + ((v15 >> 3) & 0x1FFC) + 1552) |= 1 << v15;
        *(_DWORD *)(result + 28652) = 0;
        *(_DWORD *)(result + 1532) |= 0x800000u;
      }
    }
    v16 = *(_QWORD *)(result + 19272);
    if (v16)
    {
      v17 = *(unsigned __int16 *)(v16 + 2 * v4 + 3752);
      if (v17 <= 0x3FF)
      {
        *(_DWORD *)(result + ((v17 >> 3) & 0x1FFC) + 1936) |= 1 << v17;
        *(_DWORD *)(result + 28652) = 0;
        *(_DWORD *)(result + 1532) |= 0x4000000u;
      }
    }
    v18 = *(_QWORD *)(result + 19280);
    if (v18)
    {
      v19 = *(unsigned __int16 *)(v18 + 2 * v4 + 3752);
      goto LABEL_31;
    }
    return result;
  }
  if (v4 >= 8)
    goto LABEL_10;
  if (a3 > 34161)
  {
    switch(a3)
    {
      case 34176:
        v10 = (int)*(float *)a4;
        if ((v10 - 34166) >= 3 && v10 != 5890)
          goto LABEL_160;
        v12 = result + 76 * *(unsigned __int16 *)(result + 23768);
        v13 = 15696;
        goto LABEL_158;
      case 34177:
        v10 = (int)*(float *)a4;
        if ((v10 - 34166) >= 3 && v10 != 5890)
          goto LABEL_160;
        v12 = result + 76 * *(unsigned __int16 *)(result + 23768);
        v13 = 15698;
        goto LABEL_158;
      case 34178:
        v10 = (int)*(float *)a4;
        if ((v10 - 34166) >= 3 && v10 != 5890)
          goto LABEL_160;
        v12 = result + 76 * *(unsigned __int16 *)(result + 23768);
        v13 = 15700;
        goto LABEL_158;
      case 34179:
      case 34180:
      case 34181:
      case 34182:
      case 34183:
      case 34187:
      case 34188:
      case 34189:
      case 34190:
      case 34191:
      case 34195:
      case 34196:
      case 34197:
      case 34198:
      case 34199:
        goto LABEL_160;
      case 34184:
        v10 = (int)*(float *)a4;
        if ((v10 - 34166) >= 3 && v10 != 5890)
          goto LABEL_160;
        v12 = result + 76 * *(unsigned __int16 *)(result + 23768);
        v13 = 15702;
        goto LABEL_158;
      case 34185:
        v10 = (int)*(float *)a4;
        if ((v10 - 34166) >= 3 && v10 != 5890)
          goto LABEL_160;
        v12 = result + 76 * *(unsigned __int16 *)(result + 23768);
        v13 = 15704;
        goto LABEL_158;
      case 34186:
        v10 = (int)*(float *)a4;
        if ((v10 - 34166) >= 3 && v10 != 5890)
          goto LABEL_160;
        v12 = result + 76 * *(unsigned __int16 *)(result + 23768);
        v13 = 15706;
        goto LABEL_158;
      case 34192:
        v10 = (int)*(float *)a4;
        if ((v10 & 0xFFFFFFFC) != 0x300)
          goto LABEL_160;
        v12 = result + 76 * *(unsigned __int16 *)(result + 23768);
        v13 = 15708;
        goto LABEL_158;
      case 34193:
        v10 = (int)*(float *)a4;
        if ((v10 & 0xFFFFFFFC) != 0x300)
          goto LABEL_160;
        v12 = result + 76 * *(unsigned __int16 *)(result + 23768);
        v13 = 15710;
        goto LABEL_158;
      case 34194:
        v10 = (int)*(float *)a4;
        if ((v10 & 0xFFFFFFFC) != 0x300)
          goto LABEL_160;
        v12 = result + 76 * *(unsigned __int16 *)(result + 23768);
        v13 = 15712;
        goto LABEL_158;
      case 34200:
        v10 = (int)*(float *)a4;
        if ((v10 & 0xFFFFFFFE) != 0x302)
          goto LABEL_160;
        v12 = result + 76 * *(unsigned __int16 *)(result + 23768);
        v13 = 15714;
        goto LABEL_158;
      case 34201:
        v10 = (int)*(float *)a4;
        if ((v10 & 0xFFFFFFFE) != 0x302)
          goto LABEL_160;
        v12 = result + 76 * *(unsigned __int16 *)(result + 23768);
        v13 = 15716;
        goto LABEL_158;
      case 34202:
        v10 = (int)*(float *)a4;
        if ((v10 & 0xFFFFFFFE) != 0x302)
          goto LABEL_160;
        v12 = result + 76 * *(unsigned __int16 *)(result + 23768);
        v13 = 15718;
        goto LABEL_158;
      default:
        if (a3 == 34162)
        {
          v10 = (int)*(float *)a4;
          if (v10 > 34022)
          {
            if ((v10 - 34164) >= 2 && v10 != 34023)
              goto LABEL_160;
          }
          else if (v10 != 260 && v10 != 7681 && v10 != 8448)
          {
            goto LABEL_160;
          }
          v12 = result + 76 * *(unsigned __int16 *)(result + 23768);
          v13 = 15694;
          goto LABEL_158;
        }
        if (a3 != 34163)
          goto LABEL_160;
        v23 = *(float *)a4;
        if (*(float *)a4 == 4.0 || v23 == 1.0 || v23 == 2.0)
        {
          *(float *)(result + 76 * *(unsigned __int16 *)(result + 23768) + 15720) = v23;
          goto LABEL_159;
        }
        break;
    }
    goto LABEL_73;
  }
  if (a3 <= 8704)
  {
    if (a3 == 3356)
    {
      v24 = *(float *)a4;
      if (*(float *)a4 != 4.0 && v24 != 1.0 && v24 != 2.0)
      {
LABEL_73:
        if (!*(_WORD *)(result + 29832))
          *(_WORD *)(result + 29832) = 1281;
        goto LABEL_159;
      }
      *(float *)(result + 76 * *(unsigned __int16 *)(result + 23768) + 15724) = v24;
LABEL_159:
      *(_DWORD *)(result + 28652) = 0;
      *(_DWORD *)(result + 1548) |= 0x20000u;
      return result;
    }
    if (a3 != 8704)
      goto LABEL_160;
    v10 = *(float *)a4;
    if (v10 > 8447)
    {
      if ((v10 - 8448) >= 2 && v10 != 34160)
        goto LABEL_160;
    }
    else if (v10 != 260 && v10 != 3042 && v10 != 7681)
    {
      goto LABEL_160;
    }
    v12 = result + 76 * *(unsigned __int16 *)(result + 23768);
    v13 = 15688;
LABEL_158:
    *(_WORD *)(v12 + v13) = v10;
    goto LABEL_159;
  }
  if (a3 != 8705)
  {
    if (a3 != 34161)
      goto LABEL_160;
    v10 = (int)*(float *)a4;
    if (v10 > 34022)
    {
      if ((v10 - 34164) >= 2 && (v10 - 34478) >= 2 && v10 != 34023)
        goto LABEL_160;
    }
    else if (v10 != 260 && v10 != 7681 && v10 != 8448)
    {
      goto LABEL_160;
    }
    v12 = result + 76 * *(unsigned __int16 *)(result + 23768);
    v13 = 15692;
    goto LABEL_158;
  }
  v27 = (float32x4_t *)(result + 16 * v4 + 23808);
  v28.i32[0] = *(_DWORD *)a4;
  v27->i32[0] = *(_DWORD *)a4;
  v29 = *(_DWORD *)(a4 + 4);
  v27->i32[1] = v29;
  v30 = *(_DWORD *)(a4 + 8);
  v27->i32[2] = v30;
  v31 = *(_DWORD *)(a4 + 12);
  v27->i32[3] = v31;
  if (*(_BYTE *)(result + 15178))
  {
    v32 = (const float *)(result + 288);
    v28.i32[1] = v29;
    v28.i64[1] = __PAIR64__(v31, v30);
    v33 = vld1q_dup_f32(v32);
    v34 = (const float *)(result + 292);
    v35 = vmaxnmq_f32(v28, v33);
    v36 = vld1q_dup_f32(v34);
    v37 = vminnmq_f32(v35, v36);
  }
  else
  {
    v37 = *v27;
  }
  *(float32x4_t *)(result + 76 * v4 + 15652) = v37;
  if (*(__int16 *)(result + 23772) <= v4)
    *(_WORD *)(result + 23772) = v4 + 1;
  v48 = *(_QWORD *)(result + 19248);
  if (v48)
  {
    v49 = *(unsigned __int16 *)(v48 + 2 * v4 + 3736);
    if (v49 <= 0x3FF)
    {
      *(_DWORD *)(result + ((v49 >> 3) & 0x1FFC) + 1552) |= 1 << v49;
      *(_DWORD *)(result + 28652) = 0;
      *(_DWORD *)(result + 1532) |= 0x800000u;
    }
  }
  v50 = *(_QWORD *)(result + 19272);
  if (v50)
  {
    v51 = *(unsigned __int16 *)(v50 + 2 * v4 + 3736);
    if (v51 <= 0x3FF)
    {
      *(_DWORD *)(result + ((v51 >> 3) & 0x1FFC) + 1936) |= 1 << v51;
      *(_DWORD *)(result + 28652) = 0;
      *(_DWORD *)(result + 1532) |= 0x4000000u;
    }
  }
  v52 = *(_QWORD *)(result + 19280);
  if (v52)
  {
    v19 = *(unsigned __int16 *)(v52 + 2 * v4 + 3736);
LABEL_31:
    if (v19 <= 0x3FF)
    {
      *(_DWORD *)(result + ((v19 >> 3) & 0x1FFC) + 2064) |= 1 << v19;
      *(_DWORD *)(result + 28652) = 0;
      *(_DWORD *)(result + 1532) |= 0x8000000u;
    }
  }
  return result;
}

uint64_t glReadBuffer_Exec(uint64_t result, unsigned int a2)
{
  _WORD *v2;
  uint64_t v3;
  _WORD *v4;
  int v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  unsigned int v9;

  v2 = (_WORD *)(result + 29832);
  v3 = *(_QWORD *)(result + 28968);
  if (v3)
  {
    if (!a2)
    {
      if (!*(_DWORD *)(v3 + 544))
        return result;
      v6 = 0;
      v7 = (_DWORD *)(v3 + 40);
      *(_WORD *)(v3 + 516) = 0;
      v8 = *(_QWORD *)(result + 29480);
LABEL_27:
      LOWORD(a2) = 0;
LABEL_28:
      *(_WORD *)(v3 + 472) = a2;
      *(_DWORD *)(v3 + 544) = v6;
      if ((*(_BYTE *)(v8 + 561) & 0x40) != 0)
        v9 = (v7[127] | v7[126] | 0xFFFFFF00) & v7[125];
      else
        v9 = v7[125];
      v7[114] = v9;
      return gleSetUnknownFramebufferCompleteness(result, (uint64_t)v7);
    }
    if (a2 >> 5 >= 0x467)
    {
      v8 = *(_QWORD *)(result + 29480);
      if (*(unsigned __int8 *)(v8 + 22) + 36064 > a2)
      {
        v6 = 1 << a2;
        if (*(_DWORD *)(v3 + 544) == 1 << a2)
          return result;
        v7 = (_DWORD *)(v3 + 40);
        *(_WORD *)(v3 + 516) = a2;
        if ((*(_DWORD *)(v3 + 540) & v6) != 0)
          goto LABEL_28;
        goto LABEL_27;
      }
    }
    if (a2 - 1024 > 0xC)
      goto LABEL_7;
    if (((1 << a2) & 0x1EDF) != 0)
    {
      if (*(_BYTE *)(result + 32501) == 4)
      {
LABEL_7:
        if (*v2)
          return result;
        LOWORD(v3) = 1280;
        goto LABEL_38;
      }
    }
    else if (a2 != 1029)
    {
      goto LABEL_7;
    }
    if (*v2)
      return result;
    LOWORD(v3) = 1282;
LABEL_38:
    *v2 = v3;
    return result;
  }
  if (a2)
  {
    if (a2 != 1029)
    {
      LOWORD(v3) = 1280;
      if (a2 >> 5 >= 0x467)
      {
        if (*(unsigned __int8 *)(*(_QWORD *)(result + 29480) + 22) + 36064 <= a2)
          LOWORD(v3) = 1280;
        else
          LOWORD(v3) = 1282;
      }
    }
  }
  if (a2 && a2 != 1029)
  {
    if (*v2)
      return result;
    goto LABEL_38;
  }
  v4 = (_WORD *)(result + 15176);
  *(_WORD *)(result + 29844) = a2;
  if (a2 == 1029)
    v5 = 1026;
  else
    v5 = a2;
  if (v5 != (unsigned __int16)*v4)
  {
    *v4 = v5;
    *(_DWORD *)(result + 29800) |= 0x80000000;
  }
  return result;
}

uint64_t glCopyTexSubImage2D_Exec(uint64_t result, int a2, uint64_t a3, int a4, int a5, unsigned int a6, unsigned int a7, int a8, double a9, double a10, double a11, int a12)
{
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  char *v28;
  char v29;
  uint64_t v30;
  char *v31;
  char v32;
  char *v33;
  char v34;
  int v35;
  _BYTE *v36;
  double v37;
  double v38;
  double v39;
  char v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  int v47;
  int v48;
  unsigned int v49;
  unsigned int v50;

  v19 = (_QWORD *)result;
  v20 = result + 29832;
  v21 = result + 19152;
  if ((*(_BYTE *)(result + 1540) & 4) != 0)
  {
    result = gleGenerateMatrixIdentifier(result, result + 9488, a9, a10, a11);
    *(_DWORD *)v21 = *(_DWORD *)v21 & 0xFFFFFEFF | (((_DWORD)result != -1074791426) << 8);
    *(_DWORD *)(v21 + 10580) = result;
  }
  if ((*(_BYTE *)(v21 + 10651) & 0x8A) != 0)
  {
    result = gleUpdateReadFramebufferState((uint64_t)v19);
    if ((_DWORD)result)
    {
      if ((_DWORD)result != 16711680 && !*(_WORD *)v20)
        *(_WORD *)v20 = result;
      return result;
    }
  }
  v45 = a6;
  if (!a8)
    return result;
  if (!a12)
    return result;
  result = gleCheckCopyTexSubImage2DArgs((uint64_t)v19, a2, a3, a4, a5, a8, a12);
  if (!result)
    return result;
  v22 = result;
  if (*(_BYTE *)(result + 770))
    return result;
  if (*(_BYTE *)(v20 + 2671))
    v43 = mach_absolute_time();
  else
    v43 = 0;
  if ((a2 - 34069) >= 6)
    v23 = 0;
  else
    v23 = (a2 - 34069);
  v24 = (int)a3;
  v44 = v22 + 480 * v23 + 32 * (int)a3 + 1032;
  if (!*(_QWORD *)(v22 + 536) && (*(_WORD *)(v22 + 768) & 0x800) == 0)
  {
    gfxWaitTextureOnDevices();
    v24 = (int)a3;
  }
  if (*(unsigned __int8 *)(v22 + 976) > (int)a3
    || *(unsigned __int8 *)(v22 + 978) < (int)a3
    || ((1 << a3) & *(unsigned __int16 *)(v22 + 2 * v23 + 984)) == 0)
  {
    v42 = 0;
    goto LABEL_31;
  }
  v46 = 0;
  v41 = v24;
  if ((*(_BYTE *)(v22 + 898) & 1) != 0 && *(_DWORD *)(v22 + 884) == (_DWORD)a3 && (*(_WORD *)(v22 + 768) & 0xF) != 2)
  {
    gleGenerateEmptyMipmaps((uint64_t)v19, v22, v23, a3, *(unsigned __int8 *)(v22 + 975), 0, 0);
    if (*(_DWORD *)(v19[3621] + 480))
    {
      result = gleUpdateReadFramebufferStateInline((uint64_t)v19, v37, v38, v39);
      if (!(_DWORD)result)
        return result;
    }
    v40 = 0;
    v42 = 1;
  }
  else
  {
    v42 = 0;
    v40 = 1;
  }
  v25 = v19[3621];
  if (v25)
  {
    v26 = *(unsigned __int16 *)(v25 + 474);
    v27 = *(unsigned __int16 *)(v25 + 476);
  }
  else
  {
    v26 = *(_DWORD *)(v21 + 10480);
    v27 = *(_DWORD *)(v21 + 10484);
  }
  v50 = v45;
  v48 = a8;
  v49 = a7;
  v47 = a12;
  gleClipReadableRange((uint64_t)v19, v26, v27, (int *)&v50, (int *)&v49, &v48, &v47, (_DWORD *)&v46 + 1, &v46);
  v30 = v19[*(unsigned __int16 *)(v21 + 4616) + 2992];
  if (v30)
    v31 = (char *)(v30 + 198);
  else
    v31 = (char *)(v22 + 926);
  v32 = *v31;
  *(_DWORD *)(v22 + 968) = 65540;
  if (v48 < 1
    || v47 < 1
    || (result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t, unint64_t))(v19[3681] + 360))(v19[3627], *(_QWORD *)(v22 + 8 * *(unsigned __int8 *)(v20 + 2667)), v23, a3, (HIDWORD(v46) + a4), (v46 + a5), 0, v50, __PAIR64__(v48, v49), __PAIR64__((v32 & 1) == 0, v47)), !(_DWORD)result))
  {
    v24 = v41;
LABEL_31:
    v28 = (char *)(v22 + 480 * v23 + 32 * v24 + 1043);
    v29 = *v28;
    if ((*v28 & 0x40) != 0)
    {
      gleSynchronizeTextureLevelOnCurrentDevices((uint64_t)v19, v22);
    }
    else if ((*v28 & 0x10) == 0)
    {
      if (!*(_QWORD *)(v22 + 480 * v23 + 32 * v24 + 1056))
      {
        if (!gfxAllocateTextureLevel())
        {
          if (!*(_WORD *)v20)
            *(_WORD *)v20 = 1285;
          goto LABEL_38;
        }
        v29 = *v28;
      }
      *v28 = v29 | 0x10;
    }
LABEL_38:
    gfxModifyPluginTextureLevel();
    if ((*(_WORD *)(v22 + 768) & 0x800) == 0)
      (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(v19[3687] + 280))(v19[3683], 1, 0, *(_QWORD *)(v22 + 8 * *(unsigned __int8 *)(v20 + 2668)));
    if ((*v28 & 0x10) != 0)
      gleTextureSubImageCopy((uint64_t)v19, v22, v44, a4, a5, 0, v45, a7, a8, a12);
    if ((*(_BYTE *)(v22 + 898) & 1) == 0
      || *(_DWORD *)(v22 + 884) != (_DWORD)a3
      || (result = gleGenMipmaps((uint64_t)v19, v22, v23, a3, 1, v42 == 0), !(_DWORD)result))
    {
      result = gleDirtyTextureLevelCurrentBindPointsData((uint64_t)v19, v22, v44);
    }
    goto LABEL_46;
  }
  if ((*(_WORD *)(v22 + 768) & 0x800) == 0)
  {
    *(_QWORD *)(v22 + 536) = v19[3628];
    v33 = (char *)(v22 + 480 * v23 + 32 * v41 + 1043);
    v34 = *v33;
    if ((*v33 & 0x10) != 0)
    {
      if ((*v33 & 9) == 0)
      {
        result = gfxFreeTextureLevel();
        v34 = *v33;
      }
      v34 &= ~0x10u;
      *(_WORD *)(v22 + 2 * v23 + 996) &= ~(unsigned __int16)(1 << a3);
    }
    *v33 = v34 | 0x40;
    if ((v40 & 1) == 0)
    {
      v35 = *(unsigned __int8 *)(v22 + 975);
      if (v35 > (int)a3)
      {
        v36 = (_BYTE *)(32 * a3 + 480 * v23 + v22 + 1075);
        do
        {
          *v36 |= 0x40u;
          v36 += 32;
          LODWORD(a3) = a3 + 1;
        }
        while ((int)a3 < v35);
      }
    }
  }
LABEL_46:
  if (*(_BYTE *)(v20 + 2671))
  {
    result = mach_absolute_time();
    v19[2396] += result - v43;
  }
  return result;
}

uint64_t gleCheckCopyTexSubImage2DArgs(uint64_t a1, int a2, signed int a3, int a4, int a5, int a6, int a7)
{
  __int16 *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  _BOOL4 v19;
  int v20;
  __int16 v21;
  unsigned int v22;
  int v23;
  _DWORD *v24;
  BOOL v26;
  char v27;
  int v28;

  v14 = (__int16 *)(a1 + 29832);
  v15 = gleLookUpNonProxyTexture2D(a1, a2);
  if (!v15)
  {
    if (!*v14)
    {
      v16 = 0;
      v21 = 1280;
      goto LABEL_30;
    }
    return 0;
  }
  v16 = v15;
  v17 = *(unsigned __int16 *)(v15 + 960);
  v19 = v17 == 36975 || v17 - 33329 < 0xC;
  v20 = v17 - 36208 < 0x24 || v19;
  if (!gleCheckCopyTexSubImageArgs(a1, a3, *(unsigned __int16 *)(v15 + 772), v17, v20, 0))
    return 0;
  if (a2 == 34037 && a3 >= 1)
  {
LABEL_14:
    if (!*v14)
    {
      v16 = 0;
      v21 = 1281;
LABEL_30:
      *v14 = v21;
      return v16;
    }
    return 0;
  }
  v22 = a2 - 34069;
  if ((a2 - 34069) >= 6)
    v22 = 0;
  if ((*(_BYTE *)(v16 + 480 * v22 + 32 * a3 + 1043) & 0x20) == 0)
  {
LABEL_21:
    if (!*v14)
    {
      v16 = 0;
      v21 = 1282;
      goto LABEL_30;
    }
    return 0;
  }
  if (!*(_WORD *)(v16 + 480 * v22 + 32 * a3 + 1050))
  {
    if ((a6 & 3) != 0 && a5 | a4 && a6 + a4 != *(unsigned __int16 *)(v16 + 480 * v22 + 32 * a3 + 1036))
      goto LABEL_21;
    if ((a7 & 3) != 0)
    {
      if (a5 | a4)
        v26 = a7 + a5 == *(unsigned __int16 *)(v16 + 480 * v22 + 32 * a3 + 1038);
      else
        v26 = 1;
      v27 = v26;
      if ((a4 & 3) != 0 || (v27 & 1) == 0)
        goto LABEL_21;
    }
    else if ((a4 & 3) != 0)
    {
      goto LABEL_21;
    }
    if ((a5 & 3) != 0)
      goto LABEL_21;
  }
  v23 = *(_DWORD *)(a1 + 19152);
  if ((v23 & 6) != 0)
  {
    if ((v23 & 2) != 0)
    {
      if (*(unsigned __int16 *)(a1 + 18856) == 32790)
      {
        a6 = a6 - *(_DWORD *)(a1 + 18872) + 1;
        v24 = (_DWORD *)(a1 + 18876);
        goto LABEL_47;
      }
    }
    else if ((v23 & 4) != 0 && *(unsigned __int16 *)(a1 + 18928) == 32790)
    {
      a6 = a6 - *(_DWORD *)(a1 + 18944) + 1;
      v24 = (_DWORD *)(a1 + 18948);
LABEL_47:
      a7 = a7 - *v24 + 1;
    }
  }
  if (a6 < 0)
    goto LABEL_14;
  v28 = *(unsigned __int8 *)(v16 + 480 * v22 + 32 * a3 + 1042);
  if (-v28 > a4 || a6 + a4 > *(unsigned __int16 *)(v16 + 480 * v22 + 32 * a3 + 1036) + v28)
    goto LABEL_14;
  if (a2 == 35864)
  {
    if ((a7 | a5) < 0 || a7 + a5 > *(unsigned __int16 *)(v16 + 480 * v22 + 32 * a3 + 1038))
      goto LABEL_14;
  }
  else if (a7 < 0 || -v28 > a5 || a7 + a5 > *(unsigned __int16 *)(v16 + 480 * v22 + 32 * a3 + 1038) + v28)
  {
    goto LABEL_14;
  }
  return v16;
}

void glNormalPointer_Exec(uint64_t a1, int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  __int16 v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;

  v4 = a1 + 28652;
  if ((a3 & 0x80000000) == 0)
  {
    v5 = a4;
    v8 = *(_QWORD *)(a1 + 26384);
    v9 = *(_QWORD *)(a1 + 19312);
    if (!v9 && v8 != *(_QWORD *)(a1 + 26392) && a4 && !*(_BYTE *)(a1 + 32502))
    {
      if (!*(_WORD *)(a1 + 29832))
      {
        v13 = 1282;
LABEL_26:
        *(_WORD *)(a1 + 29832) = v13;
        return;
      }
      return;
    }
    HIDWORD(v10) = a2;
    LODWORD(v10) = a2 - 5120;
    v11 = 3;
    v12 = 0x340000000000;
    switch((v10 >> 1))
    {
      case 0u:
        goto LABEL_12;
      case 1u:
        v11 = 6;
        v12 = 0x340200000000;
        goto LABEL_12;
      case 3u:
        goto LABEL_11;
      case 6u:
        if (*(_BYTE *)(a1 + 32501) != 2)
          goto LABEL_24;
LABEL_11:
        v12 = (unint64_t)(unsigned __int16)a2 << 32;
        v11 = 12;
LABEL_12:
        *(_QWORD *)(v8 + 944) |= 0x20000uLL;
        *(_QWORD *)(v8 + 160) = a4;
        v14 = *(_QWORD *)(v8 + 1248);
        if (v9 == v14)
          goto LABEL_36;
        if (v14 && (v15 = *(_DWORD *)(v14 + 20) - 1, (*(_DWORD *)(v14 + 20) = v15) == 0))
        {
          gleUnbindAndFreeBufferObject(a1, (_QWORD *)v14);
          if (v9)
            goto LABEL_16;
        }
        else if (v9)
        {
LABEL_16:
          ++*(_DWORD *)(v9 + 20);
          v16 = *(_QWORD *)(v8 + 912);
          if ((v16 & 0x20000) == 0)
          {
            *(_QWORD *)(v8 + 912) = v16 | 0x20000;
            if ((*(_BYTE *)(v8 + 906) & 2) != 0)
              gleUpdateDrawArraysFuncs(a1);
          }
          v17 = *(unsigned __int8 *)(v4 + 3844);
          if (*(_BYTE *)(v4 + 3844))
          {
            v18 = (uint64_t *)(v9 + 40);
            v19 = (_QWORD *)(v8 + 1504);
            do
            {
              v20 = *v18++;
              *v19 = v20;
              v19 += 35;
              --v17;
            }
            while (v17);
          }
          if (v14)
          {
LABEL_35:
            *(_DWORD *)v4 = 0;
            *(_DWORD *)(a1 + 1532) |= 0x1000u;
            *(_QWORD *)(v8 + 944) |= 0x20010uLL;
            *(_QWORD *)(v8 + 1248) = v9;
LABEL_36:
            if (v9)
            {
              v5 += *(_QWORD *)(v9 + 136);
              if (*(_QWORD *)(v9 + 192))
              {
                if ((*(_BYTE *)(v8 + 906) & 2) != 0)
                  *(_BYTE *)(v8 + 1216) = 0;
              }
            }
            *(_QWORD *)(v8 + 968) = v5;
            if (a3)
              v24 = a3;
            else
              v24 = v11;
            v25 = 0x3000000000000;
            if (((v24 | v5) & 0xF) == 0)
              v25 = 0x203000000000000;
            v26 = v12 | v24 | v25;
            if (*(_QWORD *)(v8 + 176) != v26)
            {
              *(_QWORD *)(v8 + 952) |= 0x20000uLL;
              *(_QWORD *)(v8 + 176) = v26;
              *(_QWORD *)(a1 + 26184) = gleSetVertexArrayFunc;
              *(_QWORD *)(a1 + 26192) = gleSetVertexArrayFunc;
              *(_QWORD *)(a1 + 26200) = gleSetVertexElemFunc;
              *(_QWORD *)(a1 + 26208) = gleSetVertexElemFunc;
              *(_DWORD *)v4 = 0;
              *(_DWORD *)(a1 + 1532) |= 0x1000u;
            }
            return;
          }
LABEL_34:
          *(_QWORD *)(v8 + 952) |= 0x20000uLL;
          goto LABEL_35;
        }
        v21 = *(_QWORD *)(v8 + 912);
        if ((v21 & 0x20000) != 0)
        {
          *(_QWORD *)(v8 + 912) = v21 & 0xFFFFFFFFFFFDFFFFLL;
          if ((*(_BYTE *)(v8 + 906) & 2) != 0)
            gleUpdateDrawArraysFuncs(a1);
        }
        v22 = *(unsigned __int8 *)(v4 + 3844);
        if (*(_BYTE *)(v4 + 3844))
        {
          v23 = (_QWORD *)(v8 + 1504);
          do
          {
            *v23 = 0;
            v23 += 35;
            --v22;
          }
          while (v22);
        }
        goto LABEL_34;
      default:
LABEL_24:
        if (*(_WORD *)(a1 + 29832))
          return;
        v13 = 1280;
        goto LABEL_26;
    }
  }
  if (!*(_WORD *)(a1 + 29832))
  {
    v13 = 1281;
    goto LABEL_26;
  }
}

uint64_t glCopyTexImage2D_Exec(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, int a7, unsigned int a8, double a9, double a10, double a11, int a12)
{
  uint64_t v20;
  unsigned __int16 *v21;
  int MatrixIdentifier;
  uint64_t result;
  uint64_t v24;
  __int16 v25;
  int v26;
  int v27;
  int v28;
  _DWORD *v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  unsigned int Framebuffer;
  int v35;
  int v36;
  int v37;
  unsigned int v38;
  unsigned __int16 *v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  _BYTE *v48;
  _BOOL4 v49;
  unsigned int v50;
  uint64_t v51;
  int v52;
  _BYTE *v53;
  int v54;
  uint64_t v55;
  char v56;
  int v57;
  int v58;
  unsigned int v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  int v63;
  int *v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  int v69;
  int v70;
  unsigned int v71;
  unsigned int v72;

  v20 = a1 + 29832;
  v21 = (unsigned __int16 *)(a1 + 18856);
  if ((*(_BYTE *)(a1 + 1540) & 4) != 0)
  {
    MatrixIdentifier = gleGenerateMatrixIdentifier(a1, a1 + 9488, a9, a10, a11);
    *((_DWORD *)v21 + 74) = *((_DWORD *)v21 + 74) & 0xFFFFFEFF | ((MatrixIdentifier != -1074791426) << 8);
    *((_DWORD *)v21 + 2719) = MatrixIdentifier;
  }
  if ((*((_BYTE *)v21 + 10947) & 0x8A) != 0)
  {
    result = gleUpdateReadFramebufferState(a1);
    if ((_DWORD)result)
    {
      if ((_DWORD)result != 16711680 && !*(_WORD *)v20)
        *(_WORD *)v20 = result;
      return result;
    }
  }
  v65 = a6;
  v66 = a5;
  result = gleCheckCopyTexImage2DArgs(a1, a2, a3, a4, a7, a8, a12);
  if (!result)
    return result;
  v24 = result;
  if (*(_BYTE *)(result + 770))
    return result;
  if (*(_BYTE *)(v20 + 2671))
    result = mach_absolute_time();
  else
    result = 0;
  v25 = *(_WORD *)(v24 + 768);
  if ((v25 & 0x1C00) == 0x1000)
    goto LABEL_19;
  if ((*(_WORD *)(v24 + 768) & 0x1C00) == 0)
  {
    *(_WORD *)(v24 + 768) = v25 | 0x1000;
    goto LABEL_19;
  }
  if ((*(_WORD *)(v24 + 768) & 0xC00) == 0)
  {
LABEL_19:
    v26 = *((_DWORD *)v21 + 74);
    if ((v26 & 2) != 0)
    {
      v27 = a8;
      v28 = a7;
      if (*v21 != 32790)
        goto LABEL_26;
      v28 = a7 - *((_DWORD *)v21 + 4) + 1;
      v29 = v21 + 10;
    }
    else
    {
      v27 = a8;
      v28 = a7;
      if ((v26 & 4) == 0)
        goto LABEL_26;
      v27 = a8;
      v28 = a7;
      if (v21[36] != 32790)
        goto LABEL_26;
      v28 = a7 - *((_DWORD *)v21 + 22) + 1;
      v29 = v21 + 46;
    }
    v27 = a8 - *v29 + 1;
LABEL_26:
    v61 = a7;
    v59 = a8;
    v62 = result;
    if (v27)
      v30 = a12;
    else
      v30 = 0;
    v63 = v30;
    if (v27)
      v31 = v28;
    else
      v31 = 0;
    if ((a2 - 34069) >= 6)
      v32 = 0;
    else
      v32 = (a2 - 34069);
    v33 = v27;
    Framebuffer = gleTypeFromReadFramebuffer(a1, a4);
    LOWORD(v55) = 256;
    v54 = v63;
    v64 = (int *)(v24 + 480 * v32 + 32 * (int)a3 + 1032);
    v60 = v32;
    v35 = v33;
    v36 = gleEvaluateTextureImageChange(a1, v24, (uint64_t)v64, v32, a3, v31, v33, 1, v54, a4, 0x1908u, Framebuffer, v55, 0);
    v37 = v36;
    if (!v31)
    {
LABEL_47:
      result = 0;
      goto LABEL_48;
    }
    v58 = v36;
    if (*(unsigned __int8 *)(v24 + 976) <= (int)a3 && *(unsigned __int8 *)(v24 + 978) >= (int)a3)
    {
      if (((*(unsigned __int16 *)(v24 + 2 * v32 + 984) >> a3) & 1) != 0)
      {
        v68 = 0;
        v67 = 0;
        v38 = v66;
        v40 = v61;
        if ((*(_BYTE *)(v24 + 898) & 1) != 0
          && *(_DWORD *)(v24 + 884) == (_DWORD)a3
          && (*(_WORD *)(v24 + 768) & 0xF) != 2)
        {
          gleGenerateEmptyMipmaps(a1, v24, v60, a3, *(unsigned __int8 *)(v24 + 975), 0, 0);
          v56 = 0;
          v57 = 1;
        }
        else
        {
          v56 = 1;
          v57 = 0;
        }
        v44 = *(_QWORD *)(a1 + 28968);
        if (v44)
        {
          v45 = *(unsigned __int16 *)(v44 + 474);
          v46 = *(unsigned __int16 *)(v44 + 476);
        }
        else
        {
          v45 = *((_DWORD *)v21 + 2694);
          v46 = *((_DWORD *)v21 + 2695);
        }
        v71 = v65;
        v72 = v66;
        v69 = v35;
        v70 = v31;
        gleClipReadableRange(a1, v45, v46, (int *)&v72, (int *)&v71, &v70, &v69, &v68, &v67);
        v47 = *(_QWORD *)(a1 + 8 * v21[2456] + 23936);
        if (v47)
          v48 = (_BYTE *)(v47 + 198);
        else
          v48 = (_BYTE *)(v24 + 926);
        v49 = (*v48 & 1) == 0;
        v50 = *(unsigned __int16 *)(v24 + 982);
        if ((v50 & 0x8000) != 0)
        {
          --v68;
          if ((v50 & 0x2000) == 0)
            v67 -= v50 >> 15;
        }
        *(_DWORD *)(v24 + 968) = 65540;
        if (v70 >= 1 && v69 >= 1)
        {
          result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t, unint64_t))(*(_QWORD *)(a1 + 29448) + 360))(*(_QWORD *)(a1 + 29016), *(_QWORD *)(v24 + 8 * *(unsigned __int8 *)(v20 + 2667)), v60, a3, v68, v67, 0, v72, __PAIR64__(v70, v71), __PAIR64__(v49, v69));
          if ((_DWORD)result)
          {
            *(_QWORD *)(v24 + 536) = *(_QWORD *)(a1 + 29024);
            v51 = v24 + 480 * v60 + 32 * (int)a3;
            *(_BYTE *)(v51 + 1043) |= 0x40u;
            if ((v56 & 1) != 0)
            {
LABEL_45:
              v37 = v58;
              goto LABEL_48;
            }
            v52 = *(unsigned __int8 *)(v24 + 975);
            v37 = v58;
            if (v52 > (int)a3)
            {
              v53 = (_BYTE *)(32 * a3 + 480 * v60 + v24 + 1075);
              do
              {
                *v53 |= 0x40u;
                v53 += 32;
                LODWORD(a3) = a3 + 1;
              }
              while ((int)a3 < v52);
            }
            goto LABEL_48;
          }
        }
        v39 = (unsigned __int16 *)v64;
LABEL_40:
        if (gfxAllocateTextureLevel())
        {
          gleTextureImageCopy(a1, v24, v39, a4, v38, v65, v40, v59);
          v41 = v24 + 480 * v60 + 32 * (int)a3;
          *(_DWORD *)(v24 + 968) = *(_DWORD *)(v41 + 1048);
          *(_BYTE *)(v41 + 1043) |= 0x10u;
          *(_WORD *)(v24 + 2 * v60 + 996) |= *(_WORD *)(v24 + 2 * v60 + 984) & (unsigned __int16)(1 << a3);
          v42 = v24 + 24 * *(unsigned __int8 *)(v20 + 2667);
          *(_BYTE *)(v42 + 116) |= 4u;
          *(_WORD *)(v42 + 2 * v60 + 104) |= 1 << a3;
          if ((*(_BYTE *)(v24 + 898) & 1) != 0 && *(_DWORD *)(v24 + 884) == (_DWORD)a3)
            result = gleGenMipmaps(a1, v24, v60, a3, 1, v57 == 0);
          else
            result = 0;
          goto LABEL_45;
        }
        v37 = v58;
        if (*(_WORD *)v20)
          goto LABEL_47;
        result = 0;
        *(_WORD *)v20 = 1285;
LABEL_48:
        if ((v37 & 0xC0000001) != 0)
        {
          if (v37 < 0)
            v43 = 134356992;
          else
            v43 = 139264;
          *((_DWORD *)v21 + 2449) = 0;
          *(_DWORD *)(a1 + 1548) |= v43;
        }
        else if ((_DWORD)result == 1)
        {
          goto LABEL_55;
        }
        result = gleDirtyTextureLevelCurrentBindPointsGeom(a1, v24, v64);
LABEL_55:
        if (*(_BYTE *)(v20 + 2671))
        {
          result = mach_absolute_time();
          *(_QWORD *)(a1 + 19168) += result - v62;
        }
        return result;
      }
      v57 = 0;
      v38 = v66;
      v39 = (unsigned __int16 *)v64;
    }
    else
    {
      v57 = 0;
      v38 = v66;
      v39 = (unsigned __int16 *)v64;
    }
    v40 = v61;
    goto LABEL_40;
  }
  if (!*(_WORD *)v20)
    *(_WORD *)v20 = 1282;
  return result;
}

uint64_t gleCheckCopyTexImage2DArgs(uint64_t a1, int a2, signed int a3, signed int a4, int a5, unsigned int a6, int a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  _DWORD *v19;
  uint64_t result;
  __int16 v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  BOOL v27;
  BOOL v28;
  int v29;
  unsigned int v30;
  int v31;
  uint64_t v32;

  v13 = a1 + 29832;
  v14 = gleLookUpNonProxyTexture2D(a1, a2);
  if (v14)
  {
    v15 = v14;
    if (!*(_BYTE *)(v14 + 559))
    {
      v16 = a5 - 2 * a7;
      v17 = a6 - 2 * a7;
      v18 = *(_DWORD *)(a1 + 19152);
      if ((v18 & 6) == 0)
        goto LABEL_13;
      if ((v18 & 2) != 0)
      {
        if (*(unsigned __int16 *)(a1 + 18856) != 32790)
          goto LABEL_13;
        v16 = v16 - *(_DWORD *)(a1 + 18872) + 1;
        v19 = (_DWORD *)(a1 + 18876);
      }
      else
      {
        if ((v18 & 4) == 0 || *(unsigned __int16 *)(a1 + 18928) != 32790)
        {
LABEL_13:
          v22 = 1;
          switch(*(_WORD *)(v14 + 768) & 0xF)
          {
            case 0:
              if (v16 != v17)
                goto LABEL_61;
              v23 = *(_QWORD *)(a1 + 29032);
              if ((int)v16 > *(unsigned __int16 *)(v23 + 168))
                goto LABEL_61;
              v22 = *(_DWORD *)(v23 + 572) >> 31;
              goto LABEL_17;
            case 2:
              if ((v16 & 0x80000000) != 0)
                goto LABEL_61;
              v30 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 29032) + 166);
              if (v16 > v30 || v17 > v30 || a3 > 0 || a7)
                goto LABEL_61;
              goto LABEL_49;
            case 3:
LABEL_17:
              if ((v16 & 0x80000000) != 0 || a7 && !v16)
                goto LABEL_61;
              if ((v16 & (v16 - 1)) != 0)
              {
                v24 = *(unsigned __int8 *)(v13 + 2669);
                if (v24 != 4 && (a3 || v24 != 3 && (*(_BYTE *)(*(_QWORD *)(a1 + 29032) + 578) & 0x10) == 0))
                  goto LABEL_61;
              }
              v25 = *(_QWORD *)(a1 + 29032);
              v26 = *(unsigned __int16 *)(v25 + 160);
              if (v16 > v26)
                goto LABEL_61;
              v27 = a7 && v17 == 0;
              v28 = v27;
              if ((v17 & 0x80000000) != 0)
                goto LABEL_61;
              if (v28)
                goto LABEL_61;
              if ((v17 & (v17 - 1)) != 0)
              {
                v29 = *(unsigned __int8 *)(v13 + 2669);
                if (v29 != 4 && (a3 || v29 != 3 && (*(_BYTE *)(v25 + 578) & 0x10) == 0))
                  goto LABEL_61;
              }
              if (v17 > v26)
                goto LABEL_61;
              goto LABEL_49;
            case 6:
              if ((v16 & 0x80000000) == 0 && (!a7 || v16))
              {
                if ((v16 & (v16 - 1)) == 0
                  || (v31 = *(unsigned __int8 *)(v13 + 2669), v31 == 4)
                  || !a3 && (v31 == 3 || (*(_BYTE *)(*(_QWORD *)(a1 + 29032) + 578) & 0x10) != 0))
                {
                  v32 = *(_QWORD *)(a1 + 29032);
                  if (v16 <= *(unsigned __int16 *)(v32 + 160)
                    && (a6 & 0x80000000) == 0
                    && *(unsigned __int16 *)(v32 + 162) >= a6)
                  {
                    goto LABEL_49;
                  }
                }
              }
LABEL_61:
              if (*(_WORD *)v13)
                return 0;
              result = 0;
              v21 = 1281;
              break;
            default:
LABEL_49:
              if (gleCheckCopyTexImageArgs(a1, a3, a4, a7, v22))
                return v15;
              else
                return 0;
          }
          goto LABEL_64;
        }
        v16 = v16 - *(_DWORD *)(a1 + 18944) + 1;
        v19 = (_DWORD *)(a1 + 18948);
      }
      v17 = v17 - *v19 + 1;
      goto LABEL_13;
    }
    if (!*(_WORD *)v13)
    {
      result = 0;
      v21 = 1282;
      goto LABEL_64;
    }
    return 0;
  }
  if (*(_WORD *)v13)
    return 0;
  result = 0;
  v21 = 1280;
LABEL_64:
  *(_WORD *)v13 = v21;
  return result;
}

uint64_t gleCheckCopyTexImageArgs(uint64_t a1, unsigned int a2, signed int a3, int a4, int a5)
{
  __int16 *v5;
  uint64_t result;
  __int16 v7;
  int v12;
  char v13;
  char v14;
  char v15;
  int v16;
  int v17;
  int v18;
  int v19;

  v5 = (__int16 *)(a1 + 29832);
  if (!a4)
  {
    v12 = 0;
    if (a3 <= 35055)
    {
      if (a3 > 33316)
      {
        if (a3 <= 34024)
        {
          switch(a3)
          {
            case 33319:
              goto LABEL_46;
            case 33321:
            case 33323:
            case 33325:
            case 33326:
            case 33327:
            case 33328:
              goto LABEL_50;
            case 33329:
            case 33330:
            case 33331:
            case 33332:
            case 33333:
            case 33334:
            case 33335:
            case 33336:
            case 33337:
            case 33338:
            case 33339:
            case 33340:
              goto LABEL_30;
            default:
              goto LABEL_65;
          }
        }
        if (a3 > 34835)
        {
          v13 = a3 - 20;
          if ((a3 - 34836) > 0x23 || ((1 << v13) & 0x800000F3CLL) != 0 || ((1 << v13) & 0xC3) == 0)
            goto LABEL_65;
          goto LABEL_50;
        }
        if ((a3 - 34025) < 4 || (a3 - 34029) < 2)
          goto LABEL_65;
        v16 = 34041;
        goto LABEL_57;
      }
      if (a3 > 10767)
      {
        v14 = a3 - 59;
        if ((a3 - 32827) > 0x20)
          goto LABEL_20;
        if (((1 << v14) & 0x7FFFF) != 0 || ((1 << v14) & 0x187B00000) != 0)
          goto LABEL_65;
        if (((1 << v14) & 0x78400000) == 0)
        {
LABEL_20:
          if ((a3 - 33189) >= 3)
            goto LABEL_65;
          goto LABEL_60;
        }
LABEL_50:
        v18 = *(_BYTE *)(a1 + 32501) & 0xFE;
LABEL_51:
        if (v18 != 2)
          goto LABEL_52;
LABEL_65:
        v17 = (unsigned __int16)*v5;
LABEL_66:
        if (!v17)
        {
          result = 0;
          v7 = 1280;
          goto LABEL_69;
        }
        return 0;
      }
      if ((a3 - 6406) >= 5)
      {
        if (a3 != 6402)
        {
          if (a3 != 6403)
            goto LABEL_65;
LABEL_46:
          v18 = *(unsigned __int8 *)(a1 + 32501);
          goto LABEL_51;
        }
        goto LABEL_60;
      }
LABEL_53:
      v19 = gfxReqToBase();
      return gleCheckCopyTexSubImageArgs(a1, a2, v19, a3, v12, a5);
    }
    if (a3 <= 36193)
    {
      if (a3 <= 35897)
      {
        if (a3 <= 35727)
        {
          if (a3 > 35445)
          {
            if ((a3 - 35446) >= 2)
              goto LABEL_65;
          }
          else if (a3 != 35056)
          {
            if (a3 != 35409)
              goto LABEL_65;
            goto LABEL_50;
          }
        }
        else
        {
          if ((a3 - 35728) >= 0xA)
            goto LABEL_65;
          if (*(_BYTE *)(a1 + 32501) != 2)
          {
LABEL_52:
            v12 = 0;
            goto LABEL_53;
          }
        }
        goto LABEL_60;
      }
      v15 = a3 - 58;
      if ((a3 - 35898) <= 0x15)
      {
        if (((1 << v15) & 0x3CC140) != 0 || ((1 << v15) & 0x33C00) != 0)
          goto LABEL_65;
        if (((1 << v15) & 0x289) != 0)
          goto LABEL_50;
      }
      if (a3 != 36012)
      {
        v16 = 36013;
        goto LABEL_57;
      }
    }
    else
    {
      if (a3 <= 36755)
      {
        switch(a3)
        {
          case 36194:
            goto LABEL_64;
          case 36208:
          case 36209:
          case 36214:
          case 36215:
          case 36220:
          case 36221:
          case 36226:
          case 36227:
          case 36232:
          case 36233:
          case 36238:
          case 36239:
LABEL_30:
            if ((*(_BYTE *)(a1 + 32501) & 0xFE) == 2)
              goto LABEL_65;
            v12 = 1;
            break;
          default:
            goto LABEL_65;
        }
        goto LABEL_53;
      }
      if (a3 <= 36974)
      {
        if ((a3 - 36756) >= 8)
          goto LABEL_65;
        v17 = (unsigned __int16)*v5;
        if (*(_BYTE *)(a1 + 32501) != 4)
          goto LABEL_66;
LABEL_61:
        if (!v17)
        {
          result = 0;
          v7 = 1282;
          goto LABEL_69;
        }
        return 0;
      }
      if (a3 == 36975)
      {
        v12 = 1;
LABEL_64:
        if ((*(_BYTE *)(a1 + 32501) & 0xFE) == 2)
          goto LABEL_65;
        goto LABEL_53;
      }
      if (a3 != 37874)
      {
        v16 = 37881;
LABEL_57:
        if (a3 != v16)
          goto LABEL_65;
      }
    }
LABEL_60:
    v17 = (unsigned __int16)*v5;
    goto LABEL_61;
  }
  if (*v5)
    return 0;
  result = 0;
  v7 = 1281;
LABEL_69:
  *v5 = v7;
  return result;
}

uint64_t gleIsHashName(uint64_t a1, unsigned int a2)
{
  uint64_t *v2;
  unsigned int v3;

  v2 = (uint64_t *)(a1 + 16);
  while (1)
  {
    v2 = (uint64_t *)*v2;
    if (!v2)
      break;
    v3 = *((_DWORD *)v2 + 2);
    if (v3 > a2)
      break;
    if (*((_DWORD *)v2 + 3) + v3 > a2)
      return 1;
  }
  return 0;
}

uint64_t gleSetEnable_LINE_SMOOTH(uint64_t result, uint64_t a2, int a3)
{
  if (*(unsigned __int8 *)(result + 15315) != a3)
  {
    *(_BYTE *)(result + 15315) = a3;
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1520) |= 0x4000u;
  }
  return result;
}

uint64_t glFrontFace_Exec(uint64_t result, int a2)
{
  if ((a2 - 2306) <= 0xFFFFFFFD)
  {
    if (!*(_WORD *)(result + 29832))
      *(_WORD *)(result + 29832) = 1280;
  }
  else if (*(unsigned __int16 *)(result + 15528) != a2)
  {
    *(_WORD *)(result + 15528) = a2;
    *(_DWORD *)(result + 1520) |= 0x800000u;
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1548) |= 0x8000u;
  }
  return result;
}

uint64_t glPointSize_Exec(uint64_t result, float a2)
{
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v2 = (_DWORD *)(result + 28652);
  if (a2 <= 0.0)
  {
    if (!*(_WORD *)(result + 29832))
      *(_WORD *)(result + 29832) = 1281;
  }
  else
  {
    v3 = result;
    if (*(float *)(result + 15344) != a2)
    {
      *(float *)(result + 15344) = a2;
      result = gleUpdatePointAttenuation(result);
      v4 = *(_QWORD *)(v3 + 19248);
      if (v4)
      {
        v5 = *(unsigned __int16 *)(v4 + 3788);
        if (v5 <= 0x3FF)
        {
          *(_DWORD *)(v3 + ((v5 >> 3) & 0x1FFC) + 1552) |= 1 << v5;
          *(_DWORD *)(v3 + 1532) |= 0x800000u;
        }
      }
      v6 = *(_QWORD *)(v3 + 19272);
      if (v6)
      {
        v7 = *(unsigned __int16 *)(v6 + 3788);
        if (v7 <= 0x3FF)
        {
          *(_DWORD *)(v3 + ((v7 >> 3) & 0x1FFC) + 1936) |= 1 << v7;
          *(_DWORD *)(v3 + 1532) |= 0x4000000u;
        }
      }
      v8 = *(_QWORD *)(v3 + 19280);
      if (v8)
      {
        v9 = *(unsigned __int16 *)(v8 + 3788);
        if (v9 <= 0x3FF)
        {
          *(_DWORD *)(v3 + ((v9 >> 3) & 0x1FFC) + 2064) |= 1 << v9;
          *(_DWORD *)(v3 + 1532) |= 0x8000000u;
        }
      }
      *v2 = 0;
      *(_DWORD *)(v3 + 1520) |= 0x400000u;
    }
  }
  return result;
}

uint64_t glLineWidth_Exec(uint64_t result, float a2)
{
  if (a2 <= 0.0)
  {
    if (!*(_WORD *)(result + 29832))
      *(_WORD *)(result + 29832) = 1281;
  }
  else if (*(float *)(result + 15304) != a2)
  {
    *(float *)(result + 15304) = a2;
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1520) |= 0x4000u;
  }
  return result;
}

uint64_t gleSetEnable_COLOR_MATERIAL(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v4;
  _DWORD *v5;
  unsigned int v6;

  if (*(unsigned __int8 *)(result + 14891) != a3)
  {
    v4 = result;
    v5 = (_DWORD *)(result + 28652);
    *(_BYTE *)(result + 14891) = a3;
    result = gleSetColorMaterialEnable(result);
    if (a3)
    {
      v6 = *(_DWORD *)(v4 + 1544) | 0x2000000;
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 1456))(v4, v4 + 8464);
      v6 = *(_DWORD *)(v4 + 1544) & 0xFCFFFFFF | 0x1000000;
    }
    *(_DWORD *)(v4 + 1544) = v6;
    *v5 = 0;
    *(_DWORD *)(v4 + 1548) |= 0x18422u;
  }
  return result;
}

uint64_t gleGetAttrib(uint64_t result, int a2, uint64_t a3)
{
  _DWORD *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  _DWORD *v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  _DWORD *v36;
  _DWORD *v37;
  uint64_t v38;
  int *v39;
  int v40;
  uint64_t v41;
  char *v42;
  _BYTE *v43;
  char v44;
  uint64_t j;
  uint64_t v46;
  __int16 *v47;
  int *v48;
  uint64_t v49;
  __int16 v50;
  int v51;
  uint64_t i;
  float v53;
  uint64_t v54;
  uint64_t v55;
  _DWORD *v56;

  v3 = (_DWORD *)(result + 17572);
  v4 = (_BYTE *)(result + 12516);
  if (a2 > 1023)
  {
    if (a2 < 0x4000)
    {
      if (a2 > 4095)
      {
        if (a2 == 4096)
        {
          v54 = 0;
          *(_DWORD *)a3 = *(_DWORD *)(result + 20484);
          *(_BYTE *)(a3 + 8) = *v4;
          *(_BYTE *)(a3 + 9) = *(_BYTE *)(result + 12517);
          *(_DWORD *)(a3 + 108) = *v3;
          v55 = result + 17584;
          do
          {
            v56 = (_DWORD *)(a3 + 24 + v54);
            *(v56 - 3) = *(_DWORD *)(v55 + v54 - 8);
            *(v56 - 2) = *(_DWORD *)(v55 + v54 - 4);
            *(v56 - 1) = *(_DWORD *)(v55 + v54);
            *v56 = *(_DWORD *)(v55 + v54 + 4);
            v54 += 16;
          }
          while (v54 != 96);
          *(_BYTE *)(a3 + 10) = *(_BYTE *)(result + 17697);
          *(_DWORD *)(a3 + 4) = *(unsigned __int8 *)(result + 17696);
          *(_BYTE *)(a3 + 11) = *(_BYTE *)(result + 20494);
          *(_BYTE *)(a3 + 112) = *(_BYTE *)(result + 15205);
        }
        else if (a2 == 0x2000)
        {
          v38 = 0;
          *(_BYTE *)(a3 + 123) = *(_BYTE *)(result + 15282);
          *(_BYTE *)(a3 + 124) = *(_BYTE *)(result + 14890);
          *(_BYTE *)(a3 + 126) = *(_BYTE *)(result + 15314);
          *(_BYTE *)(a3 + 135) = *(_BYTE *)(result + 15532);
          *(_BYTE *)(a3 + 120) = *(_BYTE *)(result + 15534);
          *(_BYTE *)(a3 + 116) = *(_BYTE *)(result + 15006);
          *(_BYTE *)(a3 + 118) = *(_BYTE *)(result + 15120);
          *(_BYTE *)(a3 + 127) = *(_BYTE *)(result + 15319);
          *(_BYTE *)(a3 + 128) = *(_BYTE *)(result + 15318);
          *(_BYTE *)(a3 + 122) = *(_BYTE *)(result + 15224);
          *(_BYTE *)(a3 + 121) = *(_BYTE *)(result + 15204);
          *(_BYTE *)(a3 + 130) = *(_BYTE *)(result + 32507) & 0x7F;
          *(_BYTE *)(a3 + 148) = *(_BYTE *)(result + 15377);
          *(_BYTE *)(a3 + 125) = *(_BYTE *)(result + 15315);
          *(_BYTE *)(a3 + 134) = *(_BYTE *)(result + 15533);
          *(_DWORD *)(a3 + 76) = *(_DWORD *)(result + 15576);
          *(_BYTE *)(a3 + 119) = *(_BYTE *)(result + 14891);
          *(_BYTE *)(a3 + 129) = *v4;
          *(_BYTE *)(a3 + 140) = *(_BYTE *)(result + 12517);
          *(_BYTE *)(a3 + 131) = *(_BYTE *)(result + 15537);
          *(_BYTE *)(a3 + 132) = *(_BYTE *)(result + 15536);
          *(_BYTE *)(a3 + 133) = *(_BYTE *)(result + 15535);
          *(_BYTE *)(a3 + 141) = *(_BYTE *)(result + 20494);
          *(_BYTE *)(a3 + 142) = *(_BYTE *)(result + 17680);
          *(_BYTE *)(a3 + 136) = *(_BYTE *)(result + 17681);
          *(_BYTE *)(a3 + 137) = *(_BYTE *)(result + 17682);
          *(_BYTE *)(a3 + 138) = *(_BYTE *)(result + 17683);
          *(_BYTE *)(a3 + 139) = *(_BYTE *)(result + 17697);
          v39 = (int *)(result + 15684);
          do
          {
            v40 = *v39;
            v39 += 19;
            *(_DWORD *)(a3 + 32 + v38) = v40;
            v38 += 4;
          }
          while (v38 != 32);
          v41 = 0;
          v42 = (char *)(result + 16535);
          do
          {
            v43 = (_BYTE *)(a3 + 83 + v41);
            *(v43 - 3) = *(v42 - 3);
            *(v43 - 2) = *(v42 - 2);
            *(v43 - 1) = *(v42 - 1);
            v44 = *v42;
            v42 += 148;
            *v43 = v44;
            v41 += 4;
          }
          while (v41 != 32);
          *(_DWORD *)(a3 + 72) = *(_DWORD *)(result + 15644);
          *(_DWORD *)(a3 + 68) = *v3;
          *(_DWORD *)(a3 + 64) = *(_DWORD *)(result + 14880);
          *(_BYTE *)(a3 + 112) = *(_BYTE *)(result + 24756);
          *(_BYTE *)(a3 + 113) = *(_BYTE *)(result + 24760);
          *(_BYTE *)(a3 + 114) = *(_BYTE *)(result + 24750);
          *(_BYTE *)(a3 + 115) = *(_BYTE *)(result + 24751);
          *(_BYTE *)(a3 + 149) = *(_BYTE *)(result + 32506);
          *(_BYTE *)(a3 + 144) = *(_BYTE *)(result + 15206);
          *(_BYTE *)(a3 + 145) = *(_BYTE *)(result + 15205);
          *(_BYTE *)(a3 + 146) = *(_BYTE *)(result + 15196);
          *(_WORD *)(a3 + 150) = *(_WORD *)(result + 29708);
          *(_WORD *)(a3 + 152) = *(_WORD *)(result + 29710);
          *(_WORD *)(a3 + 154) = *(_WORD *)(result + 29712);
          *(_BYTE *)(a3 + 147) = *(_BYTE *)(result + 15379);
        }
      }
      else if (a2 == 1024)
      {
        v46 = 0;
        v47 = (__int16 *)(result + 15610);
        v48 = (int *)(result + 15324);
        do
        {
          v49 = a3 + v46;
          *(_WORD *)(v49 + 8) = *(v47 - 3);
          *(_DWORD *)v49 = *(_DWORD *)(v47 - 5);
          *(_DWORD *)(v49 + 4) = *(_DWORD *)(v47 - 7);
          *(_WORD *)(v49 + 10) = *(v47 - 2);
          *(_WORD *)(v49 + 12) = *(v47 - 1);
          v50 = *v47;
          v47 += 8;
          *(_WORD *)(v49 + 14) = v50;
          v51 = *v48++;
          *(_DWORD *)(v49 + 16) = v51;
          v46 += 20;
        }
        while (v46 != 60);
        *(_DWORD *)(a3 + 64) = *(_DWORD *)(result + 15644);
        *(_DWORD *)(a3 + 60) = *(_DWORD *)(result + 15172);
        *(_WORD *)(a3 + 68) = *(_DWORD *)(result + 29776);
      }
      else if (a2 == 2048)
      {
        *(_QWORD *)a3 = *(_QWORD *)(result + 9280);
        *(_QWORD *)(a3 + 8) = *(_QWORD *)(result + 9288);
        *(_DWORD *)(a3 + 16) = *(_DWORD *)(result + 9312);
        *(_DWORD *)(a3 + 20) = *(_DWORD *)(result + 9316);
        *(_DWORD *)(a3 + 24) = *(_DWORD *)(result + 9320);
        *(_DWORD *)(a3 + 28) = *(_DWORD *)(result + 9324);
      }
    }
    else if (a2 < 0x40000)
    {
      if (a2 == 0x4000)
      {
        for (i = 0; i != 16; i += 2)
          *(_WORD *)(a3 + i + 20) = *(_WORD *)(result + 15180 + i);
        *(_WORD *)(a3 + 92) = *(_WORD *)(result + 29836);
        *(_WORD *)(a3 + 94) = *(_WORD *)(result + 29838);
        *(_WORD *)(a3 + 96) = *(_WORD *)(result + 29840);
        *(_WORD *)(a3 + 98) = *(_WORD *)(result + 29842);
        *(_BYTE *)(a3 + 76) = *(_BYTE *)(result + 15006);
        *(_WORD *)(a3 + 4) = *(_WORD *)(result + 15004);
        *(_DWORD *)a3 = *(_DWORD *)(result + 29704);
        *(_BYTE *)(a3 + 77) = *(_BYTE *)(result + 15120);
        *(_WORD *)(a3 + 6) = *(_WORD *)(result + 15008);
        *(_WORD *)(a3 + 8) = *(_WORD *)(result + 15010);
        *(_WORD *)(a3 + 10) = *(_WORD *)(result + 15012);
        *(_WORD *)(a3 + 12) = *(_WORD *)(result + 15014);
        *(_WORD *)(a3 + 14) = *(_WORD *)(result + 15016);
        *(_WORD *)(a3 + 16) = *(_WORD *)(result + 15018);
        *(_DWORD *)(a3 + 36) = *(_DWORD *)(result + 29688);
        *(_DWORD *)(a3 + 40) = *(_DWORD *)(result + 29692);
        *(_DWORD *)(a3 + 44) = *(_DWORD *)(result + 29696);
        *(_DWORD *)(a3 + 48) = *(_DWORD *)(result + 29700);
        *(_BYTE *)(a3 + 78) = *(_BYTE *)(result + 15224);
        *(_BYTE *)(a3 + 79) = *(_BYTE *)(result + 15319);
        *(_BYTE *)(a3 + 80) = *(_BYTE *)(result + 15318);
        *(_WORD *)(a3 + 18) = *(_WORD *)(result + 15316);
        *(_DWORD *)(a3 + 52) = *(_DWORD *)(result + 29672);
        *(_DWORD *)(a3 + 56) = *(_DWORD *)(result + 29676);
        *(_DWORD *)(a3 + 60) = *(_DWORD *)(result + 29680);
        *(_DWORD *)(a3 + 64) = *(_DWORD *)(result + 29684);
        *(_BYTE *)(a3 + 81) = *(_BYTE *)(result + 15336);
        *(_BYTE *)(a3 + 82) = *(_BYTE *)(result + 15337);
        *(_BYTE *)(a3 + 83) = *(_BYTE *)(result + 15338);
        *(_BYTE *)(a3 + 84) = *(_BYTE *)(result + 15339);
        v53 = *(float *)(result + 15168) * 0.00389105058;
        *(float *)(a3 + 68) = v53;
        *(_DWORD *)(a3 + 72) = *(_DWORD *)(result + 15320);
        *(_BYTE *)(a3 + 85) = *(_BYTE *)(result + 15196);
        *(_WORD *)(a3 + 88) = *(_WORD *)(result + 29710);
        *(_WORD *)(a3 + 90) = *(_WORD *)(result + 29712);
      }
      else if (a2 == 0x8000)
      {
        *(_WORD *)a3 = *(_WORD *)(result + 15284);
        *(_WORD *)(a3 + 2) = *(_WORD *)(result + 15286);
        *(_WORD *)(a3 + 4) = *(_WORD *)(result + 15288);
        *(_WORD *)(a3 + 6) = *(_WORD *)(result + 15290);
        *(_WORD *)(a3 + 8) = *(_WORD *)(result + 15292);
        *(_WORD *)(a3 + 10) = *(_WORD *)(result + 15294);
        *(_WORD *)(a3 + 12) = *(_WORD *)(result + 15296);
        *(_WORD *)(a3 + 14) = *(_WORD *)(result + 15298);
        *(_WORD *)(a3 + 16) = *(_WORD *)(result + 15300);
        *(_WORD *)(a3 + 18) = *(_WORD *)(result + 15302);
        *(_WORD *)(a3 + 20) = *(_DWORD *)(result + 20384);
      }
    }
    else
    {
      switch(a2)
      {
        case 0x20000000:
          *(_DWORD *)a3 = *(_DWORD *)(result + 17672);
          *(_BYTE *)(a3 + 4) = *(_BYTE *)(result + 17680);
          *(_BYTE *)(a3 + 5) = *(_BYTE *)(result + 17681);
          *(_BYTE *)(a3 + 6) = *(_BYTE *)(result + 17682);
          *(_BYTE *)(a3 + 7) = *(_BYTE *)(result + 17683);
          *(_BYTE *)(a3 + 8) = *(_BYTE *)(result + 17684);
          break;
        case 0x80000:
          *(_OWORD *)a3 = *(_OWORD *)(result + 15560);
          *(_DWORD *)(a3 + 16) = *(_DWORD *)(result + 15576);
          break;
        case 0x40000:
          v15 = 0;
          v16 = (_BYTE *)(result + 16535);
          do
          {
            v17 = a3 + v15;
            *(_DWORD *)v17 = *(_DWORD *)(v16 - 127);
            *(_DWORD *)(v17 + 4) = *(_DWORD *)(v16 - 123);
            *(_DWORD *)(v17 + 8) = *(_DWORD *)(v16 - 119);
            *(_DWORD *)(v17 + 12) = *(_DWORD *)(v16 - 115);
            *(_DWORD *)(v17 + 16) = *(_DWORD *)(v16 - 143);
            *(_DWORD *)(v17 + 20) = *(_DWORD *)(v16 - 139);
            *(_DWORD *)(v17 + 24) = *(_DWORD *)(v16 - 135);
            *(_DWORD *)(v17 + 28) = *(_DWORD *)(v16 - 131);
            *(_DWORD *)(v17 + 36) = *(_DWORD *)(v16 - 91);
            *(_DWORD *)(v17 + 40) = *(_DWORD *)(v16 - 87);
            *(_DWORD *)(v17 + 44) = *(_DWORD *)(v16 - 83);
            *(_DWORD *)(v17 + 48) = *(_DWORD *)(v16 - 79);
            *(_DWORD *)(v17 + 52) = *(_DWORD *)(v16 - 107);
            *(_DWORD *)(v17 + 56) = *(_DWORD *)(v16 - 103);
            *(_DWORD *)(v17 + 60) = *(_DWORD *)(v16 - 99);
            *(_DWORD *)(v17 + 64) = *(_DWORD *)(v16 - 95);
            *(_DWORD *)(v17 + 72) = *(_DWORD *)(v16 - 55);
            *(_DWORD *)(v17 + 76) = *(_DWORD *)(v16 - 51);
            *(_DWORD *)(v17 + 80) = *(_DWORD *)(v16 - 47);
            *(_DWORD *)(v17 + 84) = *(_DWORD *)(v16 - 43);
            *(_DWORD *)(v17 + 88) = *(_DWORD *)(v16 - 71);
            *(_DWORD *)(v17 + 92) = *(_DWORD *)(v16 - 67);
            *(_DWORD *)(v17 + 96) = *(_DWORD *)(v16 - 63);
            *(_DWORD *)(v17 + 100) = *(_DWORD *)(v16 - 59);
            *(_DWORD *)(v17 + 108) = *(_DWORD *)(v16 - 19);
            *(_DWORD *)(v17 + 112) = *(_DWORD *)(v16 - 15);
            *(_DWORD *)(v17 + 116) = *(_DWORD *)(v16 - 11);
            *(_DWORD *)(v17 + 120) = *(_DWORD *)(v16 - 7);
            *(_DWORD *)(v17 + 124) = *(_DWORD *)(v16 - 35);
            *(_DWORD *)(v17 + 128) = *(_DWORD *)(v16 - 31);
            *(_DWORD *)(v17 + 132) = *(_DWORD *)(v16 - 27);
            *(_DWORD *)(v17 + 136) = *(_DWORD *)(v16 - 23);
            *(_BYTE *)(v17 + 34) = *(v16 - 3);
            *(_BYTE *)(v17 + 70) = *(v16 - 2);
            *(_BYTE *)(v17 + 106) = *(v16 - 1);
            *(_BYTE *)(v17 + 142) = *v16;
            *(_WORD *)(v17 + 32) = *(_WORD *)(v16 - 147);
            *(_WORD *)(v17 + 68) = *(_WORD *)(v16 - 111);
            *(_WORD *)(v17 + 104) = *(_WORD *)(v16 - 75);
            *(_WORD *)(v17 + 140) = *(_WORD *)(v16 - 39);
            v15 += 144;
            v16 += 148;
          }
          while (v15 != 1152);
          v18 = 0;
          v19 = (uint64_t *)(result + 20776);
          v20 = a3;
          do
          {
            v21 = 0;
            *(_DWORD *)(a3 + 856 * v18 + 2004) = *(_DWORD *)(result + 76 * v18 + 15684);
            v22 = v19;
            do
            {
              v23 = *v22;
              v24 = v20 + v21;
              *(_DWORD *)(v24 + 1152) = *(_DWORD *)(*v22 + 984);
              *(_DWORD *)(v24 + 1156) = *(_DWORD *)(v23 + 988);
              *(_DWORD *)(v24 + 1160) = *(_DWORD *)(v23 + 992);
              *(_DWORD *)(v24 + 1164) = *(_DWORD *)(v23 + 996);
              *(_WORD *)(v24 + 1204) = *(_WORD *)(v23 + 952);
              *(_WORD *)(v24 + 1206) = *(_WORD *)(v23 + 954);
              *(_WORD *)(v24 + 1208) = *(_WORD *)(v23 + 960);
              *(_WORD *)(v24 + 1210) = *(_WORD *)(v23 + 962);
              *(_WORD *)(v24 + 1212) = *(_WORD *)(v23 + 964);
              v25 = *v22++;
              *(_DWORD *)(v24 + 1168) = *(_DWORD *)(v25 + 16);
              *(_DWORD *)(v24 + 1172) = *(_DWORD *)(v23 + 816);
              *(_DWORD *)(v24 + 1176) = *(_DWORD *)(v23 + 968);
              *(_DWORD *)(v24 + 1180) = *(_DWORD *)(v23 + 972);
              *(_DWORD *)(v24 + 1184) = *(_DWORD *)(v23 + 976);
              *(_DWORD *)(v24 + 1188) = *(_DWORD *)(v23 + 980);
              *(_DWORD *)(v24 + 1196) = *(_DWORD *)(v23 + 924);
              *(_DWORD *)(v24 + 1200) = *(_DWORD *)(v23 + 928);
              *(_WORD *)(v24 + 1214) = *(_WORD *)(v23 + 958);
              *(_WORD *)(v24 + 1216) = *(_WORD *)(v23 + 956);
              *(_DWORD *)(v24 + 1192) = *(_DWORD *)(v23 + 932);
              *(_WORD *)(v24 + 1218) = *(_WORD *)(v23 + 922);
              v26 = *(_BYTE *)(v20 + v21 + 1220) & 0xFE | *(_BYTE *)(v23 + 938) & 1;
              *(_BYTE *)(v24 + 1220) = v26;
              *(_BYTE *)(v24 + 1220) = (2 * (*(_BYTE *)(v23 + 966) & 1)) | v26 & 0xFD;
              *(_BYTE *)(v24 + 1221) = *(_BYTE *)(v23 + 597);
              v21 += 72;
            }
            while (v21 != 792);
            v27 = a3 + 856 * v18;
            *(_DWORD *)(v27 + 1944) = *(_DWORD *)(result + 16 * v18 + 23808);
            *(_DWORD *)(v27 + 1948) = *(_DWORD *)(result + 16 * v18 + 23812);
            *(_DWORD *)(v27 + 1952) = *(_DWORD *)(result + 16 * v18 + 23816);
            *(_DWORD *)(v27 + 1956) = *(_DWORD *)(result + 16 * v18 + 23820);
            v28 = result + 76 * v18;
            *(_WORD *)(v27 + 1960) = *(_WORD *)(v28 + 15688);
            *(_WORD *)(v27 + 1964) = *(_WORD *)(v28 + 15692);
            *(_WORD *)(v27 + 1966) = *(_WORD *)(v28 + 15694);
            *(_WORD *)(v27 + 1968) = *(_WORD *)(v28 + 15696);
            *(_WORD *)(v27 + 1970) = *(_WORD *)(v28 + 15698);
            *(_WORD *)(v27 + 1972) = *(_WORD *)(v28 + 15700);
            *(_WORD *)(v27 + 1974) = *(_WORD *)(v28 + 15702);
            *(_WORD *)(v27 + 1976) = *(_WORD *)(v28 + 15704);
            *(_WORD *)(v27 + 1978) = *(_WORD *)(v28 + 15706);
            *(_WORD *)(v27 + 1980) = *(_WORD *)(v28 + 15708);
            *(_WORD *)(v27 + 1982) = *(_WORD *)(v28 + 15710);
            *(_WORD *)(v27 + 1984) = *(_WORD *)(v28 + 15712);
            *(_WORD *)(v27 + 1986) = *(_WORD *)(v28 + 15714);
            *(_WORD *)(v27 + 1988) = *(_WORD *)(v28 + 15716);
            *(_WORD *)(v27 + 1990) = *(_WORD *)(v28 + 15718);
            *(_DWORD *)(v27 + 1992) = *(_DWORD *)(v28 + 15720);
            *(_DWORD *)(v27 + 1996) = *(_DWORD *)(v28 + 15724);
            ++v18;
            v20 += 856;
            v19 += 11;
          }
          while (v18 != 8);
          v29 = 0;
          *(_WORD *)(a3 + 8130) = *(_WORD *)(result + 23772);
          do
          {
            *(_DWORD *)(a3 + 8000 + v29) = *(_DWORD *)(result + 16260 + v29);
            v29 += 4;
          }
          while (v29 != 128);
          *(_WORD *)(a3 + 8128) = *(_WORD *)(result + 23768) - 31552;
          break;
      }
    }
  }
  else if (a2 > 31)
  {
    if (a2 <= 127)
    {
      if (a2 == 32)
      {
        *(_WORD *)(a3 + 8) = *(_WORD *)(result + 15176);
        *(_WORD *)(a3 + 10) = *(_WORD *)(result + 29844);
        *(_DWORD *)a3 = *(_DWORD *)(result + 18440);
        *(_DWORD *)(a3 + 4) = *(_DWORD *)(result + 18444);
        *(_DWORD *)(a3 + 16) = *(_DWORD *)(result + 18520);
        *(_DWORD *)(a3 + 20) = *(_DWORD *)(result + 18524);
        *(_DWORD *)(a3 + 24) = *(_DWORD *)(result + 18528);
        *(_DWORD *)(a3 + 28) = *(_DWORD *)(result + 18532);
        *(_DWORD *)(a3 + 32) = *(_DWORD *)(result + 18536);
        *(_DWORD *)(a3 + 36) = *(_DWORD *)(result + 18540);
        *(_DWORD *)(a3 + 40) = *(_DWORD *)(result + 18544);
        *(_DWORD *)(a3 + 44) = *(_DWORD *)(result + 18548);
        *(_DWORD *)(a3 + 48) = *(_DWORD *)(result + 18552);
        *(_DWORD *)(a3 + 52) = *(_DWORD *)(result + 18556);
        *(_DWORD *)(a3 + 56) = *(_DWORD *)(result + 18560);
        *(_DWORD *)(a3 + 60) = *(_DWORD *)(result + 18564);
        *(_DWORD *)(a3 + 12) = *(unsigned __int16 *)(result + 19160);
      }
      else if (a2 == 64)
      {
        v30 = 0;
        *(_WORD *)a3 = *(_DWORD *)(result + 15592);
        *(_WORD *)(a3 + 2) = *(_DWORD *)(result + 17704);
        *(_WORD *)(a3 + 8) = *(_WORD *)(result + 29708);
        *(_WORD *)(a3 + 4) = *(_WORD *)(result + 14884);
        *(_WORD *)(a3 + 6) = *(_WORD *)(result + 14886);
        *(_WORD *)(a3 + 10) = *(_WORD *)(result + 14888);
        *(_DWORD *)(a3 + 12) = *(_DWORD *)(result + 12528);
        *(_DWORD *)(a3 + 16) = *(_DWORD *)(result + 12532);
        *(_DWORD *)(a3 + 20) = *(_DWORD *)(result + 12536);
        *(_DWORD *)(a3 + 24) = *(_DWORD *)(result + 12540);
        *(_BYTE *)(a3 + 28) = *(_BYTE *)(result + 14891);
        *(_BYTE *)(a3 + 29) = *(_BYTE *)(result + 14893);
        *(_BYTE *)(a3 + 30) = *(_BYTE *)(result + 14892);
        *(_BYTE *)(a3 + 31) = *(_BYTE *)(result + 14894);
        *(_BYTE *)(a3 + 32) = *(_BYTE *)(result + 14890);
        *(_DWORD *)(a3 + 36) = *(_DWORD *)(result + 14880);
        v31 = (_DWORD *)(result + 12544);
        do
        {
          v32 = (_DWORD *)(a3 + 68 + v30);
          v32[5] = v31[12];
          v32[6] = v31[13];
          v32[7] = v31[14];
          v32[8] = v31[15];
          *(v32 - 7) = *v31;
          *(v32 - 6) = v31[1];
          *(v32 - 5) = v31[2];
          *(v32 - 4) = v31[3];
          *(v32 - 3) = v31[4];
          *(v32 - 2) = v31[5];
          *(v32 - 1) = v31[6];
          *v32 = v31[7];
          v32[1] = v31[8];
          v32[2] = v31[9];
          v32[3] = v31[10];
          v32[4] = v31[11];
          v32[9] = v31[16];
          v32[10] = v31[17];
          v32[11] = v31[18];
          v32[12] = v31[23];
          v32[13] = v31[36];
          v32[14] = v31[19];
          v32[15] = v31[20];
          v32[16] = v31[21];
          v32[17] = v31[22];
          v30 += 100;
          v31 += 40;
        }
        while (v30 != 800);
        v33 = 0;
        v34 = 1;
        do
        {
          v35 = result + 8 * v33;
          v36 = (_DWORD *)(a3 + 80 * v33);
          v36[210] = **(_DWORD **)(v35 + 1424);
          v36[211] = *(_DWORD *)(*(_QWORD *)(v35 + 1424) + 4);
          v36[212] = *(_DWORD *)(*(_QWORD *)(v35 + 1424) + 8);
          v36[213] = *(_DWORD *)(*(_QWORD *)(v35 + 1424) + 12);
          v36[214] = *(_DWORD *)(*(_QWORD *)(v35 + 1424) + 16);
          v36[215] = *(_DWORD *)(*(_QWORD *)(v35 + 1424) + 20);
          v36[216] = *(_DWORD *)(*(_QWORD *)(v35 + 1424) + 24);
          v36[217] = *(_DWORD *)(*(_QWORD *)(v35 + 1424) + 28);
          v36[218] = *(_DWORD *)(*(_QWORD *)(v35 + 1424) + 32);
          v36[219] = *(_DWORD *)(*(_QWORD *)(v35 + 1424) + 36);
          v36[220] = *(_DWORD *)(*(_QWORD *)(v35 + 1424) + 40);
          v36[221] = *(_DWORD *)(*(_QWORD *)(v35 + 1424) + 44);
          v36[222] = *(_DWORD *)(*(_QWORD *)(v35 + 1424) + 48);
          v36[223] = *(_DWORD *)(*(_QWORD *)(v35 + 1424) + 52);
          v36[224] = *(_DWORD *)(*(_QWORD *)(v35 + 1424) + 56);
          v36[225] = *(_DWORD *)(*(_QWORD *)(v35 + 1424) + 60);
          v36[229] = *(_DWORD *)(*(_QWORD *)(v35 + 1424) + 64);
          v37 = (_DWORD *)(result + 12 * v33 + 29604);
          v36[226] = *v37;
          LOBYTE(v35) = v34;
          v36[227] = v37[1];
          v36[228] = v37[2];
          v33 = 1;
          v34 = 0;
        }
        while ((v35 & 1) != 0);
      }
    }
    else
    {
      switch(a2)
      {
        case 128:
          *(_DWORD *)a3 = *(_DWORD *)(result + 29576);
          *(_DWORD *)(a3 + 4) = *(_DWORD *)(result + 29580);
          *(_DWORD *)(a3 + 8) = *(_DWORD *)(result + 29584);
          *(_DWORD *)(a3 + 12) = *(_DWORD *)(result + 29588);
          *(_DWORD *)(a3 + 20) = *(_DWORD *)(result + 15244);
          *(_DWORD *)(a3 + 24) = *(_DWORD *)(result + 15248);
          *(_DWORD *)(a3 + 28) = *(_DWORD *)(result + 15252);
          *(_DWORD *)(a3 + 16) = *(_DWORD *)(result + 29600);
          *(_WORD *)(a3 + 32) = *(_WORD *)(result + 15276);
          *(_WORD *)(a3 + 34) = *(_WORD *)(result + 15278);
          *(_WORD *)(a3 + 36) = *(_WORD *)(result + 15280);
          *(_BYTE *)(a3 + 38) = *(_BYTE *)(result + 15282);
          *(_BYTE *)(a3 + 39) = *(_BYTE *)(result + 32506);
          break;
        case 256:
          *(_BYTE *)(a3 + 28) = *(_BYTE *)(result + 15204);
          *(_WORD *)(a3 + 24) = *(_WORD *)(result + 15200);
          *(_QWORD *)a3 = *(_QWORD *)(result + 15128);
          *(_BYTE *)(a3 + 29) = *(_BYTE *)(result + 15340);
          *(_BYTE *)(a3 + 30) = *(_BYTE *)(result + 15206);
          *(_QWORD *)(a3 + 8) = *(_QWORD *)(result + 15208);
          *(_QWORD *)(a3 + 16) = *(_QWORD *)(result + 15216);
          break;
        case 512:
          *(_DWORD *)a3 = *(_DWORD *)(result + 15136);
          *(_DWORD *)(a3 + 4) = *(_DWORD *)(result + 15140);
          *(_DWORD *)(a3 + 8) = *(_DWORD *)(result + 15144);
          *(_DWORD *)(a3 + 12) = *(_DWORD *)(result + 15148);
          break;
      }
    }
  }
  else
  {
    switch(a2)
    {
      case 1:
        v5 = 0;
        v6 = *(_QWORD *)(result + 26000);
        *(_DWORD *)(a3 + 428) = *(_DWORD *)(result + 29596);
        *(_DWORD *)(a3 + 416) = *(_DWORD *)(result + 8448);
        *(_DWORD *)(a3 + 420) = *(_DWORD *)(result + 8452);
        *(_DWORD *)(a3 + 424) = *(_DWORD *)(result + 8456);
        *(_DWORD *)(a3 + 400) = *(_DWORD *)(result + 8464);
        *(_DWORD *)(a3 + 404) = *(_DWORD *)(result + 8468);
        *(_DWORD *)(a3 + 408) = *(_DWORD *)(result + 8472);
        *(_DWORD *)(a3 + 412) = *(_DWORD *)(result + 8476);
        *(_DWORD *)(a3 + 432) = *(_DWORD *)(result + 8480);
        *(_DWORD *)(a3 + 436) = *(_DWORD *)(result + 8484);
        *(_DWORD *)(a3 + 440) = *(_DWORD *)(result + 8488);
        *(_DWORD *)(a3 + 384) = *(_DWORD *)(result + 8496);
        *(_DWORD *)(a3 + 388) = *(_DWORD *)(result + 8500);
        *(_DWORD *)(a3 + 392) = *(_DWORD *)(result + 8504);
        *(_DWORD *)(a3 + 396) = *(_DWORD *)(result + 8508);
        *(_DWORD *)(a3 + 444) = *(_DWORD *)(result + 8512);
        *(_DWORD *)(a3 + 668) = *(_DWORD *)(result + 8528);
        v7 = (_DWORD *)(v6 - 1184);
        v8 = v6 - 1056;
        v9 = result + 8572;
        do
        {
          v10 = (_DWORD *)(a3 + v5);
          *v10 = *(_DWORD *)(v9 + v5 - 12);
          v10[1] = *(_DWORD *)(v9 + v5 - 8);
          v10[2] = *(_DWORD *)(v9 + v5 - 4);
          v10[3] = *(_DWORD *)(v9 + v5);
          v10[128] = *(_DWORD *)(v8 + v5);
          v10[129] = *(_DWORD *)(v8 + v5 + 4);
          v10[130] = *(_DWORD *)(v8 + v5 + 8);
          v10[131] = *(_DWORD *)(v8 + v5 + 12);
          v5 += 16;
        }
        while (v5 != 128);
        v11 = 0;
        v12 = (_DWORD *)(a3 + 140);
        v13 = result + 8700;
        do
        {
          *(v12 - 3) = *(_DWORD *)(v13 + v11 - 12);
          *(v12 - 2) = *(_DWORD *)(v13 + v11 - 8);
          *(v12 - 1) = *(_DWORD *)(v13 + v11 - 4);
          *v12 = *(_DWORD *)(v13 + v11);
          v12 += 4;
          v11 += 32;
        }
        while (v11 != 512);
        *(_DWORD *)(a3 + 448) = *(_DWORD *)(result + 2256);
        *(_DWORD *)(a3 + 452) = *(_DWORD *)(result + 2260);
        *(_DWORD *)(a3 + 456) = *(_DWORD *)(result + 2264);
        v14 = (_DWORD *)(v6 - 1280);
        *(_DWORD *)(a3 + 460) = v14[19];
        *(_DWORD *)(a3 + 464) = *v7;
        *(_DWORD *)(a3 + 468) = v14[25];
        *(_DWORD *)(a3 + 472) = v14[26];
        *(_DWORD *)(a3 + 476) = v14[27];
        *(_DWORD *)(a3 + 480) = v14[20];
        *(_DWORD *)(a3 + 484) = v14[21];
        *(_DWORD *)(a3 + 488) = v14[22];
        *(_DWORD *)(a3 + 492) = v14[23];
        *(_DWORD *)(a3 + 496) = v14[28];
        *(_DWORD *)(a3 + 500) = v14[29];
        *(_DWORD *)(a3 + 504) = v14[30];
        *(_DWORD *)(a3 + 640) = v14[32];
        *(_DWORD *)(a3 + 644) = v14[33];
        *(_DWORD *)(a3 + 648) = v14[34];
        *(_DWORD *)(a3 + 652) = v14[35];
        *(_DWORD *)(a3 + 656) = v14[36];
        *(_DWORD *)(a3 + 660) = v14[37];
        *(_DWORD *)(a3 + 664) = v14[38];
        *(_DWORD *)(a3 + 508) = 1065353216;
        *(_BYTE *)(a3 + 673) = *(_BYTE *)(result + 32491);
        break;
      case 2:
        *(_DWORD *)a3 = *(_DWORD *)(result + 15344);
        *(_DWORD *)(a3 + 4) = *(_DWORD *)(result + 15348);
        *(_DWORD *)(a3 + 8) = *(_DWORD *)(result + 15352);
        *(_DWORD *)(a3 + 12) = *(_DWORD *)(result + 15356);
        *(_DWORD *)(a3 + 16) = *(_DWORD *)(result + 15360);
        *(_DWORD *)(a3 + 20) = *(_DWORD *)(result + 15364);
        *(_DWORD *)(a3 + 24) = *(_DWORD *)(result + 15368);
        *(_BYTE *)(a3 + 28) = *(_BYTE *)(result + 32507) & 0x7F;
        *(_BYTE *)(a3 + 29) = *(_BYTE *)(result + 15377);
        *(_BYTE *)(a3 + 30) = *(_BYTE *)(result + 15378);
        *(_WORD *)(a3 + 32) = *(_WORD *)(result + 15380);
        *(_WORD *)(a3 + 34) = *(_WORD *)(result + 15382);
        *(_DWORD *)(a3 + 36) = *(_DWORD *)(result + 15384);
        break;
      case 3:
      case 5:
      case 6:
      case 7:
        return result;
      case 4:
        *(_BYTE *)(a3 + 11) = *(_BYTE *)(result + 15315);
        *(_BYTE *)(a3 + 10) = *(_BYTE *)(result + 15314);
        *(_WORD *)(a3 + 8) = *(_WORD *)(result + 15312);
        *(_DWORD *)(a3 + 4) = *(_DWORD *)(result + 15308);
        *(_DWORD *)a3 = *(_DWORD *)(result + 15304);
        break;
      case 8:
        *(_BYTE *)(a3 + 18) = *(_BYTE *)(result + 15534);
        *(_WORD *)(a3 + 14) = *(_WORD *)(result + 15530);
        *(_WORD *)(a3 + 12) = *(_WORD *)(result + 15528);
        *(_WORD *)(a3 + 8) = *(_WORD *)(result + 15524);
        *(_WORD *)(a3 + 10) = *(_WORD *)(result + 15526);
        *(_BYTE *)(a3 + 17) = *(_BYTE *)(result + 15533);
        *(_BYTE *)(a3 + 16) = *(_BYTE *)(result + 15532);
        *(_BYTE *)(a3 + 21) = *(_BYTE *)(result + 15537);
        *(_BYTE *)(a3 + 20) = *(_BYTE *)(result + 15536);
        *(_BYTE *)(a3 + 19) = *(_BYTE *)(result + 15535);
        *(_DWORD *)a3 = *(_DWORD *)(result + 15516);
        *(_DWORD *)(a3 + 4) = *(_DWORD *)(result + 15520);
        break;
      default:
        if (a2 == 16)
        {
          for (j = 0; j != 128; ++j)
            *(_BYTE *)(a3 + j) = *(_BYTE *)(result + 15388 + j);
        }
        break;
    }
  }
  return result;
}

uint64_t glTranslate_Exec(uint64_t result, double a2, double a3, double a4)
{
  int v4;
  int v5;
  float32x4_t *v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;

  if (*(int *)(result + 20484) < 24)
  {
    v4 = *(_DWORD *)(result + 20488);
    *(float32x4_t *)(*(_QWORD *)(result + 19976) + 48) = vaddq_f32(*(float32x4_t *)(*(_QWORD *)(result + 19976) + 48), vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(*(float32x4_t *)(*(_QWORD *)(result + 19976) + 16), *(float *)&a3), *(float32x4_t *)*(_QWORD *)(result + 19976), *(float *)&a2), *(float32x4_t *)(*(_QWORD *)(result + 19976) + 32), *(float *)&a4));
    *(_DWORD *)(result + 1528) |= v4;
    *(_DWORD *)(result + 1540) |= v4;
    v5 = *(_DWORD *)(result + 1544);
    if ((v4 & ~v5 & *(_DWORD *)(result + 2216) & 0xFFFFFC) != 0)
    {
      v6 = *(float32x4_t **)(result + 19984);
      v8 = v6[2];
      v7 = v6[3];
      v9 = vmlsq_lane_f32(v6[1], v7, *(float32x2_t *)&a3, 0);
      *v6 = vmlsq_lane_f32(*v6, v7, *(float32x2_t *)&a2, 0);
      v6[1] = v9;
      v6[2] = vmlsq_lane_f32(v8, v7, *(float32x2_t *)&a4, 0);
      v4 &= 0xFF000003;
    }
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1544) = v4 | v5;
  }
  else if (!*(_WORD *)(result + 29832))
  {
    *(_WORD *)(result + 29832) = 1282;
  }
  return result;
}

void glWeightPointerARB_Exec(uint64_t a1, int a2, int a3, unsigned int a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  unsigned __int16 v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;

  v5 = a1 + 28652;
  if ((a2 - 5) < 0xFFFFFFFC || (a4 & 0x80000000) != 0)
  {
    if (!*(_WORD *)(a1 + 29832))
    {
      v20 = 1281;
      goto LABEL_25;
    }
    return;
  }
  v7 = a5;
  v8 = a3;
  v11 = *(_QWORD *)(a1 + 26384);
  v12 = *(_QWORD *)(a1 + 19312);
  if (!v12 && v11 != *(_QWORD *)(a1 + 26392) && a5 && !*(_BYTE *)(a1 + 32502))
  {
    if (!*(_WORD *)(a1 + 29832))
    {
      v20 = 1282;
LABEL_25:
      *(_WORD *)(a1 + 29832) = v20;
      return;
    }
    return;
  }
  if (a3 == 5126 || a3 == 5132)
  {
    *(_QWORD *)(v11 + 944) |= 0x100000uLL;
    *(_QWORD *)(v11 + 232) = a5;
    v13 = *(_QWORD *)(v11 + 1272);
    if (v12 == v13)
      goto LABEL_35;
    if (v13 && (v14 = *(_DWORD *)(v13 + 20) - 1, (*(_DWORD *)(v13 + 20) = v14) == 0))
    {
      gleUnbindAndFreeBufferObject(a1, (_QWORD *)v13);
      if (v12)
        goto LABEL_10;
    }
    else if (v12)
    {
LABEL_10:
      ++*(_DWORD *)(v12 + 20);
      v15 = *(_QWORD *)(v11 + 912);
      if ((v15 & 0x100000) == 0)
      {
        *(_QWORD *)(v11 + 912) = v15 | 0x100000;
        if ((*(_BYTE *)(v11 + 906) & 0x10) != 0)
          gleUpdateDrawArraysFuncs(a1);
      }
      v16 = *(unsigned __int8 *)(v5 + 3844);
      if (*(_BYTE *)(v5 + 3844))
      {
        v17 = (uint64_t *)(v12 + 40);
        v18 = (_QWORD *)(v11 + 1528);
        do
        {
          v19 = *v17++;
          *v18 = v19;
          v18 += 35;
          --v16;
        }
        while (v16);
      }
      if (v13)
        goto LABEL_34;
      goto LABEL_33;
    }
    v21 = *(_QWORD *)(v11 + 912);
    if ((v21 & 0x100000) != 0)
    {
      *(_QWORD *)(v11 + 912) = v21 & 0xFFFFFFFFFFEFFFFFLL;
      if ((*(_BYTE *)(v11 + 906) & 0x10) != 0)
        gleUpdateDrawArraysFuncs(a1);
    }
    v22 = *(unsigned __int8 *)(v5 + 3844);
    if (*(_BYTE *)(v5 + 3844))
    {
      v23 = (_QWORD *)(v11 + 1528);
      do
      {
        *v23 = 0;
        v23 += 35;
        --v22;
      }
      while (v22);
    }
LABEL_33:
    *(_QWORD *)(v11 + 952) |= 0x100000uLL;
LABEL_34:
    *(_DWORD *)v5 = 0;
    *(_DWORD *)(a1 + 1532) |= 0x1000u;
    *(_QWORD *)(v11 + 944) |= 0x100010uLL;
    *(_QWORD *)(v11 + 1272) = v12;
LABEL_35:
    if (v12)
    {
      v7 += *(_QWORD *)(v12 + 136);
      if (*(_QWORD *)(v12 + 192))
      {
        if ((*(_BYTE *)(v11 + 906) & 0x10) != 0)
          *(_BYTE *)(v11 + 1216) = 0;
      }
    }
    *(_QWORD *)(v11 + 992) = v7;
    LODWORD(v24) = 4 * a2;
    if (a4)
      v24 = a4;
    else
      v24 = v24;
    v25 = ((unint64_t)a2 << 48) | ((unint64_t)(((v24 | v7) & 0xF) == 0) << 57) | ((unint64_t)v8 << 32) | v24;
    if (*(_QWORD *)(v11 + 248) != v25)
    {
      *(_QWORD *)(v11 + 952) |= 0x100000uLL;
      *(_QWORD *)(v11 + 248) = v25;
      *(_QWORD *)(a1 + 26184) = gleSetVertexArrayFunc;
      *(_QWORD *)(a1 + 26192) = gleSetVertexArrayFunc;
      *(_QWORD *)(a1 + 26200) = gleSetVertexElemFunc;
      *(_QWORD *)(a1 + 26208) = gleSetVertexElemFunc;
      *(_DWORD *)v5 = 0;
      *(_DWORD *)(a1 + 1532) |= 0x1000u;
    }
    return;
  }
  if (!*(_WORD *)(a1 + 29832))
  {
    v20 = 1280;
    goto LABEL_25;
  }
}

float gleSetAttrib(uint64_t a1, int a2, unsigned __int16 *a3, __n128 a4)
{
  unsigned __int16 *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  uint64_t v17;
  unsigned __int16 *v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int16 *v25;
  _DWORD *v26;
  _BYTE *v27;
  _WORD *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned __int16 *v31;
  unsigned __int16 *v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t j;
  uint64_t v36;
  unsigned __int16 *v37;
  int v38;
  int v39;
  char v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  unsigned __int16 *v44;
  _DWORD *v45;
  uint64_t v46;
  int v47;
  uint64_t k;
  uint64_t v49;
  unsigned __int16 *v50;
  _DWORD *v51;
  uint64_t v52;
  char v53;
  unsigned __int16 *v54;
  _DWORD *v55;
  _DWORD *v56;
  int v57;
  uint64_t v58;
  _DWORD *v59;
  uint64_t v60;
  char *v61;
  _BYTE *v62;
  uint64_t m;
  BOOL v64;
  float v65;
  float v66;
  float v67;
  float v68;
  BOOL v69;
  float v70;
  BOOL v71;
  unsigned int v72;
  unsigned __int16 *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _DWORD *v77;
  _WORD *v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  _DWORD *v82;
  int v83;
  uint64_t i;
  char v85;
  char v86;
  char v87;
  char v88;
  unsigned int v89;
  uint64_t v90;
  _DWORD *v91;
  int v92;
  uint64_t v93;
  unsigned __int16 *v94;
  _DWORD *v95;
  uint64_t v97;
  unsigned int *v99;
  uint64_t v100;

  v4 = a3;
  v100 = a1 + 29836;
  v6 = a1 + 29576;
  v7 = a1 + 18440;
  v8 = a1 + 17572;
  v9 = a1 + 15284;
  v10 = a1 + 15008;
  v11 = (_BYTE *)(a1 + 12516);
  if (a2 > 1023)
  {
    if (a2 < 0x4000)
    {
      if (a2 > 4095)
      {
        if (a2 == 4096)
        {
          v93 = 0;
          *(_DWORD *)(a1 + 20484) = *(_DWORD *)a3;
          *v11 = *((_BYTE *)a3 + 8);
          *(_BYTE *)(a1 + 12517) = *((_BYTE *)a3 + 9);
          *(_DWORD *)v8 = *((_DWORD *)a3 + 27);
          v94 = a3 + 12;
          do
          {
            v95 = (_DWORD *)(a1 + 17584 + v93 * 2);
            *(v95 - 2) = *(_DWORD *)&v94[v93 - 6];
            *(v95 - 1) = *(_DWORD *)&v94[v93 - 4];
            *v95 = *(_DWORD *)&v94[v93 - 2];
            a4.n128_u32[0] = *(_DWORD *)&v94[v93];
            v95[1] = a4.n128_u32[0];
            v93 += 8;
          }
          while (v93 != 48);
          *(_BYTE *)(a1 + 17697) = *((_BYTE *)a3 + 10);
          *(_BYTE *)(a1 + 17696) = *((_DWORD *)a3 + 1);
          *(_BYTE *)(a1 + 20494) = *((_BYTE *)a3 + 11);
          *(_BYTE *)(a1 + 15205) = *((_BYTE *)a3 + 112);
        }
        else if (a2 == 0x2000)
        {
          v57 = *((unsigned __int8 *)a3 + 119);
          if (*(unsigned __int8 *)(a1 + 14891) != v57)
          {
            *(_BYTE *)(a1 + 14891) = v57;
            if (!*((_BYTE *)a3 + 119))
              (*(void (**)(uint64_t, uint64_t))(a1 + 1456))(a1, a1 + 8464);
          }
          v58 = 0;
          *(_BYTE *)(v10 + 274) = *((_BYTE *)v4 + 123);
          v11[2374] = *((_BYTE *)v4 + 124);
          *(_BYTE *)(v9 + 30) = *((_BYTE *)v4 + 126);
          *(_BYTE *)(v9 + 248) = *((_BYTE *)v4 + 135);
          *(_BYTE *)(v9 + 250) = *((_BYTE *)v4 + 120);
          v11[2490] = *((_BYTE *)v4 + 116);
          *(_BYTE *)(v10 + 112) = *((_BYTE *)v4 + 118);
          *(_BYTE *)(v9 + 35) = *((_BYTE *)v4 + 127);
          *(_BYTE *)(v9 + 34) = *((_BYTE *)v4 + 128);
          *(_BYTE *)(v10 + 216) = *((_BYTE *)v4 + 122);
          *(_BYTE *)(v10 + 196) = *((_BYTE *)v4 + 121);
          *(_BYTE *)(v100 + 2671) = *(_BYTE *)(v100 + 2671) & 0x80 | v4[65] & 0x7F;
          *(_BYTE *)(v9 + 93) = *((_BYTE *)v4 + 148);
          *(_BYTE *)(v9 + 31) = *((_BYTE *)v4 + 125);
          *(_BYTE *)(v9 + 249) = *((_BYTE *)v4 + 134);
          *(_DWORD *)(a1 + 15576) = *((_DWORD *)v4 + 19);
          *v11 = *((_BYTE *)v4 + 129);
          v11[1] = *((_BYTE *)v4 + 140);
          *(_BYTE *)(v9 + 253) = *((_BYTE *)v4 + 131);
          *(_BYTE *)(v9 + 252) = *((_BYTE *)v4 + 132);
          *(_BYTE *)(v9 + 251) = *((_BYTE *)v4 + 133);
          *(_BYTE *)(v7 + 2054) = *((_BYTE *)v4 + 141);
          *(_BYTE *)(v8 + 108) = *((_BYTE *)v4 + 142);
          *(_BYTE *)(v8 + 109) = *((_BYTE *)v4 + 136);
          *(_BYTE *)(v8 + 110) = *((_BYTE *)v4 + 137);
          *(_BYTE *)(v8 + 111) = *((_BYTE *)v4 + 138);
          *(_BYTE *)(v8 + 125) = *((_BYTE *)v4 + 139);
          v59 = (_DWORD *)(a1 + 15684);
          do
          {
            *v59 = *(_DWORD *)&v4[v58 + 16];
            v59 += 19;
            v58 += 2;
          }
          while (v58 != 16);
          v60 = 0;
          v61 = (char *)v4 + 83;
          v62 = (_BYTE *)(v9 + 1249);
          do
          {
            *(v62 - 1) = v61[v60 - 3];
            *v62 = v61[v60 - 2];
            v62[1] = v61[v60 - 1];
            v62[2] = v61[v60];
            v60 += 4;
            v62 += 148;
          }
          while (v60 != 32);
          *(_DWORD *)(a1 + 15644) = *((_DWORD *)v4 + 18);
          *(_DWORD *)v8 = *((_DWORD *)v4 + 17);
          *(_DWORD *)(a1 + 14880) = *((_DWORD *)v4 + 16);
          *(_BYTE *)(a1 + 24756) = *((_BYTE *)v4 + 112);
          *(_BYTE *)(a1 + 24760) = *((_BYTE *)v4 + 113);
          *(_BYTE *)(a1 + 24750) = *((_BYTE *)v4 + 114);
          *(_BYTE *)(a1 + 24751) = *((_BYTE *)v4 + 115);
          *(_BYTE *)(v100 + 2670) = *((_BYTE *)v4 + 149);
          *(_BYTE *)(v10 + 198) = *((_BYTE *)v4 + 144);
          *(_BYTE *)(v10 + 197) = *((_BYTE *)v4 + 145);
          *(_BYTE *)(v10 + 188) = *((_BYTE *)v4 + 146);
          *(_WORD *)(v6 + 132) = v4[75];
          *(_WORD *)(v6 + 134) = v4[76];
          *(_WORD *)(v6 + 136) = v4[77];
          *(_BYTE *)(v9 + 95) = *((_BYTE *)v4 + 147);
        }
      }
      else
      {
        if (a2 == 1024)
        {
          v73 = a3 + 4;
          v74 = 15596;
          v75 = 3831;
          v76 = 15610;
          do
          {
            v77 = (_DWORD *)(a1 + v74);
            v78 = (_WORD *)(a1 + v76);
            *(v78 - 3) = *v73;
            *v77 = *((_DWORD *)v73 - 1);
            v77[1] = *((_DWORD *)v73 - 2);
            *(v78 - 2) = v73[1];
            *(v78 - 1) = v73[2];
            *v78 = v73[3];
            *(_DWORD *)(a1 + 4 * v75) = *((_DWORD *)v73 + 2);
            v74 += 16;
            ++v75;
            v73 += 10;
            v76 += 16;
          }
          while (v75 != 3834);
          v79 = *((_DWORD *)a3 + 16);
          *(_DWORD *)(a1 + 15644) = v79;
          *(_DWORD *)(a1 + 15172) = *((_DWORD *)a3 + 15);
          *(_DWORD *)(a1 + 29776) = a3[34];
          if ((v79 & 4) != 0)
            v80 = 1;
          else
            v80 = 2;
          v72 = *(_DWORD *)(a1 + 29804) & 0xFFFFF9FF;
          *(_DWORD *)(a1 + 29804) = v72;
          if (*(_DWORD *)(a1 + 15324))
          {
            v72 |= 0x200u;
            *(_DWORD *)(a1 + 29804) = v72;
          }
          if (!*(_DWORD *)(a1 + 4 * v80 + 15324))
            goto LABEL_90;
          v72 |= 0x400u;
LABEL_89:
          *(_DWORD *)(a1 + 29804) = v72;
LABEL_90:
          v81 = *(_QWORD *)(a1 + 28960);
          if (v81)
            v82 = (_DWORD *)(v81 + 552);
          else
            v82 = (_DWORD *)(a1 + 29808);
          v83 = *v82 & v72;
          goto LABEL_100;
        }
        if (a2 == 2048)
        {
          *(_QWORD *)(a1 + 9280) = *(_QWORD *)a3;
          *(_QWORD *)(a1 + 9288) = *((_QWORD *)a3 + 1);
          *(_DWORD *)(a1 + 9312) = *((_DWORD *)a3 + 4);
          *(_DWORD *)(a1 + 9316) = *((_DWORD *)a3 + 5);
          *(_DWORD *)(a1 + 9320) = *((_DWORD *)a3 + 6);
          a4.n128_u32[0] = *((_DWORD *)a3 + 7);
          *(_DWORD *)(a1 + 9324) = a4.n128_u32[0];
        }
      }
    }
    else if (a2 < 0x40000)
    {
      if (a2 == 0x4000)
      {
        for (i = 0; i != 8; ++i)
          *(_WORD *)(a1 + 15180 + i * 2) = a3[i + 10];
        *(_WORD *)v100 = a3[46];
        *(_WORD *)(a1 + 29838) = a3[47];
        *(_WORD *)(a1 + 29840) = a3[48];
        *(_WORD *)(a1 + 29842) = a3[49];
        *(_BYTE *)(a1 + 15006) = *((_BYTE *)a3 + 76);
        *(_WORD *)(a1 + 15004) = a3[2];
        *(_DWORD *)(a1 + 29704) = *(_DWORD *)a3;
        *(_BYTE *)(a1 + 15120) = *((_BYTE *)a3 + 77);
        *(_WORD *)v10 = a3[3];
        *(_WORD *)(a1 + 15010) = a3[4];
        *(_WORD *)(a1 + 15012) = a3[5];
        *(_WORD *)(a1 + 15014) = a3[6];
        *(_WORD *)(a1 + 15016) = a3[7];
        *(_WORD *)(a1 + 15018) = a3[8];
        *(_DWORD *)(a1 + 29688) = *((_DWORD *)a3 + 9);
        *(_DWORD *)(a1 + 29692) = *((_DWORD *)a3 + 10);
        *(_DWORD *)(a1 + 29696) = *((_DWORD *)a3 + 11);
        *(_DWORD *)(a1 + 29700) = *((_DWORD *)a3 + 12);
        *(_BYTE *)(a1 + 15224) = *((_BYTE *)a3 + 78);
        *(_BYTE *)(a1 + 15319) = *((_BYTE *)a3 + 79);
        *(_BYTE *)(a1 + 15318) = *((_BYTE *)a3 + 80);
        *(_WORD *)(a1 + 15316) = a3[9];
        *(_DWORD *)(a1 + 29672) = *((_DWORD *)a3 + 13);
        *(_DWORD *)(a1 + 29676) = *((_DWORD *)a3 + 14);
        *(_DWORD *)(a1 + 29680) = *((_DWORD *)a3 + 15);
        *(_DWORD *)(a1 + 29684) = *((_DWORD *)a3 + 16);
        v85 = *((_BYTE *)a3 + 81);
        *(_BYTE *)(a1 + 15336) = v85;
        v86 = *((_BYTE *)a3 + 82);
        *(_BYTE *)(a1 + 15337) = v86;
        v87 = *((_BYTE *)a3 + 83);
        *(_BYTE *)(a1 + 15338) = v87;
        v88 = *((_BYTE *)a3 + 84);
        *(_BYTE *)(a1 + 15339) = v88;
        a4.n128_f32[0] = *((float *)a3 + 17) * 257.0;
        *(_DWORD *)(a1 + 15168) = a4.n128_u32[0];
        *(_DWORD *)(a1 + 15320) = *((_DWORD *)a3 + 18);
        *(_BYTE *)(a1 + 15196) = *((_BYTE *)a3 + 85);
        *(_WORD *)(a1 + 29710) = a3[44];
        *(_WORD *)(a1 + 29712) = a3[45];
        v89 = *(_DWORD *)(a1 + 29804) & 0xFFFFFF00 | (v86 | v85 | v87 | v88);
        *(_DWORD *)(a1 + 29804) = v89;
        v90 = *(_QWORD *)(a1 + 28960);
        if (v90)
          v91 = (_DWORD *)(v90 + 552);
        else
          v91 = (_DWORD *)(a1 + 29808);
        v83 = *v91 & v89;
LABEL_100:
        *(_WORD *)(a1 + 15342) = v83;
        return a4.n128_f32[0];
      }
      if (a2 == 0x8000)
      {
        *(_WORD *)v9 = *a3;
        *(_WORD *)(a1 + 15286) = a3[1];
        *(_WORD *)(a1 + 15288) = a3[2];
        *(_WORD *)(a1 + 15290) = a3[3];
        *(_WORD *)(a1 + 15292) = a3[4];
        *(_WORD *)(a1 + 15294) = a3[5];
        *(_WORD *)(a1 + 15296) = a3[6];
        *(_WORD *)(a1 + 15298) = a3[7];
        *(_WORD *)(a1 + 15300) = a3[8];
        *(_WORD *)(a1 + 15302) = a3[9];
        *(_DWORD *)(a1 + 20384) = a3[10];
      }
    }
    else
    {
      switch(a2)
      {
        case 0x20000000:
          a4.n128_u32[0] = *(_DWORD *)a3;
          *(_DWORD *)(a1 + 17672) = *(_DWORD *)a3;
          *(_BYTE *)(a1 + 17680) = *((_BYTE *)a3 + 4);
          *(_BYTE *)(a1 + 17681) = *((_BYTE *)a3 + 5);
          *(_BYTE *)(a1 + 17682) = *((_BYTE *)a3 + 6);
          *(_BYTE *)(a1 + 17683) = *((_BYTE *)a3 + 7);
          *(_BYTE *)(a1 + 17684) = *((_BYTE *)a3 + 8);
          break;
        case 0x80000:
          a4 = *(__n128 *)a3;
          *(_OWORD *)(a1 + 15560) = *(_OWORD *)a3;
          *(_DWORD *)(a1 + 15576) = *((_DWORD *)a3 + 4);
          break;
        case 0x40000:
          v97 = a1 + 18440;
          v21 = 0;
          v22 = 16535;
          v23 = 16464;
          v24 = 16388;
          do
          {
            v25 = &a3[v21];
            v26 = (_DWORD *)(a1 + v23);
            *(v26 - 14) = *(_DWORD *)&a3[v21];
            *(v26 - 13) = *(_DWORD *)&a3[v21 + 2];
            *(v26 - 12) = *(_DWORD *)&a3[v21 + 4];
            *(v26 - 11) = *(_DWORD *)&a3[v21 + 6];
            *(v26 - 18) = *(_DWORD *)&a3[v21 + 8];
            *(v26 - 17) = *(_DWORD *)&a3[v21 + 10];
            *(v26 - 16) = *(_DWORD *)&a3[v21 + 12];
            *(v26 - 15) = *(_DWORD *)&a3[v21 + 14];
            *(v26 - 5) = *(_DWORD *)&a3[v21 + 18];
            *(v26 - 4) = *(_DWORD *)&a3[v21 + 20];
            *(v26 - 3) = *(_DWORD *)&a3[v21 + 22];
            *(v26 - 2) = *(_DWORD *)&a3[v21 + 24];
            *(v26 - 9) = *(_DWORD *)&a3[v21 + 26];
            *(v26 - 8) = *(_DWORD *)&a3[v21 + 28];
            *(v26 - 7) = *(_DWORD *)&a3[v21 + 30];
            *(v26 - 6) = *(_DWORD *)&a3[v21 + 32];
            v26[4] = *(_DWORD *)&a3[v21 + 36];
            v26[5] = *(_DWORD *)&a3[v21 + 38];
            v26[6] = *(_DWORD *)&a3[v21 + 40];
            v26[7] = *(_DWORD *)&a3[v21 + 42];
            *v26 = *(_DWORD *)&a3[v21 + 44];
            v26[1] = *(_DWORD *)&a3[v21 + 46];
            v26[2] = *(_DWORD *)&a3[v21 + 48];
            v26[3] = *(_DWORD *)&a3[v21 + 50];
            v26[13] = *(_DWORD *)&a3[v21 + 54];
            v26[14] = *(_DWORD *)&a3[v21 + 56];
            v26[15] = *(_DWORD *)&a3[v21 + 58];
            v26[16] = *(_DWORD *)&a3[v21 + 60];
            v26[9] = *(_DWORD *)&a3[v21 + 62];
            v26[10] = *(_DWORD *)&a3[v21 + 64];
            v26[11] = *(_DWORD *)&a3[v21 + 66];
            v26[12] = *(_DWORD *)&a3[v21 + 68];
            v27 = (_BYTE *)(a1 + v22);
            *(v27 - 3) = a3[v21 + 17];
            *(v27 - 2) = a3[v21 + 35];
            *(v27 - 1) = a3[v21 + 53];
            *v27 = a3[v21 + 71];
            v28 = (_WORD *)(a1 + v24);
            *v28 = a3[v21 + 16];
            v28[18] = a3[v21 + 34];
            v28[36] = a3[v21 + 52];
            v21 += 72;
            v28[54] = v25[70];
            v22 += 148;
            v23 += 148;
            v24 += 148;
          }
          while (v21 != 576);
          v29 = 0;
          v30 = (unsigned int *)(a3 + 584);
          do
          {
            v31 = &v4[428 * v29];
            v32 = v31 + 576;
            *(_DWORD *)(a1 + 76 * v29 + 15684) = *((_DWORD *)v31 + 501);
            os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
            v33 = 0;
            v99 = v30;
            do
            {
              v34 = *v30;
              v30 += 18;
              gleBindTexture(a1, v33++, v34, v29);
            }
            while (v33 != 11);
            os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
            for (j = 0; j != 11; ++j)
            {
              v36 = *(_QWORD *)(a1 + 20776 + 88 * v29 + 8 * j);
              v37 = &v32[36 * j];
              *(_DWORD *)(v36 + 984) = *(_DWORD *)v37;
              *(_DWORD *)(v36 + 988) = *((_DWORD *)v37 + 1);
              *(_DWORD *)(v36 + 992) = *((_DWORD *)v37 + 2);
              *(_DWORD *)(v36 + 996) = *((_DWORD *)v37 + 3);
              *(_WORD *)(v36 + 952) = v37[26];
              *(_WORD *)(v36 + 954) = v37[27];
              *(_WORD *)(v36 + 960) = v37[28];
              *(_WORD *)(v36 + 962) = v37[29];
              *(_WORD *)(v36 + 964) = v37[30];
              *(_DWORD *)(v36 + 968) = *((_DWORD *)v37 + 6);
              *(_DWORD *)(v36 + 972) = *((_DWORD *)v37 + 7);
              *(_DWORD *)(v36 + 976) = *((_DWORD *)v37 + 8);
              *(_DWORD *)(v36 + 980) = *((_DWORD *)v37 + 9);
              *(_WORD *)(v36 + 958) = v37[31];
              *(_WORD *)(v36 + 956) = v37[32];
              *(_BYTE *)(v36 + 966) = *(_BYTE *)(v36 + 966) & 0xFE | ((v37[34] & 2) != 0);
              *(_DWORD *)(v36 + 816) = *((_DWORD *)v37 + 5);
              v38 = *((_DWORD *)v37 + 11);
              *(_DWORD *)(v36 + 924) = v38;
              v39 = *((_DWORD *)v37 + 12);
              *(_DWORD *)(v36 + 928) = v39;
              *(_DWORD *)(v36 + 932) = *((_DWORD *)v37 + 10);
              *(_WORD *)(v36 + 922) = v37[33];
              v40 = *((_BYTE *)v37 + 68);
              *(_BYTE *)(v36 + 938) = *(_BYTE *)(v36 + 938) & 0xFE | v40 & 1;
              *(_BYTE *)(v36 + 597) = *((_BYTE *)v37 + 69);
              if (v39 != 1000 && v39 || v38 | v40 & 1)
                *(_BYTE *)(v36 + 598) = 1;
              v41 = *(unsigned __int8 *)(v100 + 2660);
              if (*(_BYTE *)(v100 + 2660))
              {
                v42 = (_BYTE *)(v36 + 520);
                do
                {
                  *v42 |= 1u;
                  v42 += 4;
                  --v41;
                }
                while (v41);
              }
              v43 = v36 + 40;
              gfxUpdatePluginTextureLevelGeometry();
              *(_DWORD *)(a1 + 28652) = 0;
              *(_DWORD *)(a1 + 1548) |= 0x22000u;
              gleDirtyTextureObjectCurrentBindPointsData(a1, v43, 1);
            }
            v4 = a3;
            v44 = &a3[428 * v29];
            v45 = (_DWORD *)(a1 + 16 * v29 + 23808);
            *v45 = *((_DWORD *)v44 + 486);
            v45[1] = *((_DWORD *)v44 + 487);
            v45[2] = *((_DWORD *)v44 + 488);
            v45[3] = *((_DWORD *)v44 + 489);
            v46 = a1 + 76 * v29;
            *(_WORD *)(v46 + 15688) = v44[980];
            *(_WORD *)(v46 + 15692) = v44[982];
            *(_WORD *)(v46 + 15694) = v44[983];
            *(_WORD *)(v46 + 15696) = v44[984];
            *(_WORD *)(v46 + 15698) = v44[985];
            *(_WORD *)(v46 + 15700) = v44[986];
            *(_WORD *)(v46 + 15702) = v44[987];
            *(_WORD *)(v46 + 15704) = v44[988];
            *(_WORD *)(v46 + 15706) = v44[989];
            *(_WORD *)(v46 + 15708) = v44[990];
            *(_WORD *)(v46 + 15710) = v44[991];
            *(_WORD *)(v46 + 15712) = v44[992];
            *(_WORD *)(v46 + 15714) = v44[993];
            *(_WORD *)(v46 + 15716) = v44[994];
            *(_WORD *)(v46 + 15718) = v44[995];
            *(_DWORD *)(v46 + 15720) = *((_DWORD *)v44 + 498);
            *(_DWORD *)(v46 + 15724) = *((_DWORD *)v44 + 499);
            ++v29;
            v30 = v99 + 214;
          }
          while (v29 != 8);
          v47 = (__int16)a3[4065];
          if (*(__int16 *)(v97 + 5332) < v47)
            *(_WORD *)(v97 + 5332) = v47;
          for (k = 0; k != 64; k += 2)
          {
            a4.n128_u32[0] = *(_DWORD *)&a3[k + 4000];
            *(_DWORD *)(a1 + 16260 + k * 2) = a4.n128_u32[0];
          }
          *(_WORD *)(v97 + 5328) = a3[4064] + 31552;
          break;
      }
    }
  }
  else
  {
    if (a2 <= 31)
    {
      switch(a2)
      {
        case 1:
          v12 = 0;
          v13 = *(_QWORD *)(a1 + 26000);
          *(_DWORD *)(a1 + 29596) = *((_DWORD *)a3 + 107);
          *(_DWORD *)(a1 + 8448) = *((_DWORD *)a3 + 104);
          *(_DWORD *)(a1 + 8452) = *((_DWORD *)a3 + 105);
          *(_DWORD *)(a1 + 8456) = *((_DWORD *)a3 + 106);
          *(_DWORD *)(a1 + 8464) = *((_DWORD *)a3 + 100);
          *(_DWORD *)(a1 + 8468) = *((_DWORD *)a3 + 101);
          *(_DWORD *)(a1 + 8472) = *((_DWORD *)a3 + 102);
          *(_DWORD *)(a1 + 8476) = *((_DWORD *)a3 + 103);
          *(_DWORD *)(a1 + 8480) = *((_DWORD *)a3 + 108);
          *(_DWORD *)(a1 + 8484) = *((_DWORD *)a3 + 109);
          *(_DWORD *)(a1 + 8488) = *((_DWORD *)a3 + 110);
          *(_DWORD *)(a1 + 8496) = *((_DWORD *)a3 + 96);
          *(_DWORD *)(a1 + 8500) = *((_DWORD *)a3 + 97);
          *(_DWORD *)(a1 + 8504) = *((_DWORD *)a3 + 98);
          *(_DWORD *)(a1 + 8508) = *((_DWORD *)a3 + 99);
          *(_DWORD *)(a1 + 8512) = *((_DWORD *)a3 + 111);
          *(_DWORD *)(a1 + 8528) = *((_DWORD *)a3 + 167);
          v14 = (_DWORD *)(v13 - 1184);
          do
          {
            v15 = (_DWORD *)(a1 + 8572 + v12 * 2);
            *(v15 - 3) = *(_DWORD *)&a3[v12];
            *(v15 - 2) = *(_DWORD *)&a3[v12 + 2];
            *(v15 - 1) = *(_DWORD *)&a3[v12 + 4];
            *v15 = *(_DWORD *)&a3[v12 + 6];
            v16 = (_DWORD *)(v13 - 1056 + v12 * 2);
            *v16 = *(_DWORD *)&a3[v12 + 256];
            v16[1] = *(_DWORD *)&a3[v12 + 258];
            v16[2] = *(_DWORD *)&a3[v12 + 260];
            v16[3] = *(_DWORD *)&a3[v12 + 262];
            v12 += 8;
          }
          while (v12 != 64);
          v17 = 0;
          v18 = a3 + 70;
          v19 = (_DWORD *)(a1 + 8700);
          do
          {
            *(v19 - 3) = *(_DWORD *)&v18[v17 - 6];
            *(v19 - 2) = *(_DWORD *)&v18[v17 - 4];
            *(v19 - 1) = *(_DWORD *)&v18[v17 - 2];
            *v19 = *(_DWORD *)&v18[v17];
            v19 += 8;
            v17 += 8;
          }
          while (v17 != 128);
          *(_DWORD *)(a1 + 2256) = *((_DWORD *)a3 + 112);
          *(_DWORD *)(a1 + 2260) = *((_DWORD *)a3 + 113);
          *(_DWORD *)(a1 + 2264) = *((_DWORD *)a3 + 114);
          v20 = (_DWORD *)(v13 - 1280);
          v20[19] = *((_DWORD *)a3 + 115);
          *v14 = *((_DWORD *)a3 + 116);
          v20[25] = *((_DWORD *)a3 + 117);
          v20[26] = *((_DWORD *)a3 + 118);
          v20[27] = *((_DWORD *)a3 + 119);
          v20[20] = *((_DWORD *)a3 + 120);
          v20[21] = *((_DWORD *)a3 + 121);
          v20[22] = *((_DWORD *)a3 + 122);
          v20[23] = *((_DWORD *)a3 + 123);
          v20[28] = *((_DWORD *)a3 + 124);
          v20[29] = *((_DWORD *)a3 + 125);
          v20[30] = *((_DWORD *)a3 + 126);
          v20[32] = *((_DWORD *)a3 + 160);
          v20[33] = *((_DWORD *)a3 + 161);
          v20[34] = *((_DWORD *)a3 + 162);
          v20[35] = *((_DWORD *)a3 + 163);
          v20[36] = *((_DWORD *)a3 + 164);
          v20[37] = *((_DWORD *)a3 + 165);
          a4.n128_u32[0] = *((_DWORD *)a3 + 166);
          v20[38] = a4.n128_u32[0];
          *(_BYTE *)(a1 + 32491) = *((_BYTE *)a3 + 673);
          break;
        case 2:
          *(_DWORD *)(a1 + 15344) = *(_DWORD *)a3;
          *(_DWORD *)(a1 + 15348) = *((_DWORD *)a3 + 1);
          *(_DWORD *)(a1 + 15352) = *((_DWORD *)a3 + 2);
          *(_DWORD *)(a1 + 15356) = *((_DWORD *)a3 + 3);
          *(_DWORD *)(a1 + 15360) = *((_DWORD *)a3 + 4);
          *(_DWORD *)(a1 + 15364) = *((_DWORD *)a3 + 5);
          a4.n128_u32[0] = *((_DWORD *)a3 + 6);
          *(_DWORD *)(a1 + 15368) = a4.n128_u32[0];
          *(_BYTE *)(a1 + 32507) = *(_BYTE *)(a1 + 32507) & 0x80 | a3[14] & 0x7F;
          *(_BYTE *)(a1 + 15377) = *((_BYTE *)a3 + 29);
          *(_BYTE *)(a1 + 15378) = *((_BYTE *)a3 + 30);
          *(_WORD *)(a1 + 15380) = a3[16];
          *(_WORD *)(a1 + 15382) = a3[17];
          *(_DWORD *)(a1 + 15384) = *((_DWORD *)a3 + 9);
          break;
        case 3:
        case 5:
        case 6:
        case 7:
          return a4.n128_f32[0];
        case 4:
          *(_BYTE *)(a1 + 15315) = *((_BYTE *)a3 + 11);
          *(_BYTE *)(a1 + 15314) = *((_BYTE *)a3 + 10);
          *(_WORD *)(a1 + 15312) = a3[4];
          *(_DWORD *)(a1 + 15308) = *((_DWORD *)a3 + 1);
          a4.n128_u32[0] = *(_DWORD *)a3;
          *(_DWORD *)(a1 + 15304) = *(_DWORD *)a3;
          break;
        case 8:
          *(_BYTE *)(a1 + 15534) = *((_BYTE *)a3 + 18);
          *(_WORD *)(a1 + 15530) = a3[7];
          *(_WORD *)(a1 + 15528) = a3[6];
          *(_WORD *)(a1 + 15524) = a3[4];
          *(_WORD *)(a1 + 15526) = a3[5];
          v64 = a3[4] == 6914 && a3[5] == 6914;
          *(_BYTE *)(a1 + 15538) = v64;
          *(_BYTE *)(a1 + 15533) = *((_BYTE *)a3 + 17);
          *(_BYTE *)(a1 + 15532) = *((_BYTE *)a3 + 16);
          *(_BYTE *)(a1 + 15537) = *((_BYTE *)a3 + 21);
          *(_BYTE *)(a1 + 15536) = *((_BYTE *)a3 + 20);
          *(_BYTE *)(a1 + 15535) = *((_BYTE *)a3 + 19);
          *(_DWORD *)(a1 + 15516) = *(_DWORD *)a3;
          a4.n128_u32[0] = *((_DWORD *)a3 + 1);
          *(_DWORD *)(a1 + 15520) = a4.n128_u32[0];
          break;
        default:
          if (a2 == 16)
          {
            for (m = 0; m != 128; ++m)
              *(_BYTE *)(a1 + 15388 + m) = *((_BYTE *)a3 + m);
          }
          break;
      }
      return a4.n128_f32[0];
    }
    if (a2 <= 127)
    {
      if (a2 == 32)
      {
        *(_WORD *)(a1 + 15176) = a3[4];
        *(_WORD *)(a1 + 29844) = a3[5];
        *(_DWORD *)v7 = *(_DWORD *)a3;
        *(_DWORD *)(a1 + 18444) = *((_DWORD *)a3 + 1);
        *(_DWORD *)(a1 + 18520) = *((_DWORD *)a3 + 4);
        *(_DWORD *)(a1 + 18524) = *((_DWORD *)a3 + 5);
        *(_DWORD *)(a1 + 18528) = *((_DWORD *)a3 + 6);
        *(_DWORD *)(a1 + 18532) = *((_DWORD *)a3 + 7);
        *(_DWORD *)(a1 + 18536) = *((_DWORD *)a3 + 8);
        *(_DWORD *)(a1 + 18540) = *((_DWORD *)a3 + 9);
        *(_DWORD *)(a1 + 18544) = *((_DWORD *)a3 + 10);
        *(_DWORD *)(a1 + 18548) = *((_DWORD *)a3 + 11);
        *(_DWORD *)(a1 + 18552) = *((_DWORD *)a3 + 12);
        a4.n128_u32[0] = *((_DWORD *)a3 + 13);
        *(_DWORD *)(a1 + 18556) = a4.n128_u32[0];
        *(_DWORD *)(a1 + 18560) = *((_DWORD *)a3 + 14);
        *(_DWORD *)(a1 + 18564) = *((_DWORD *)a3 + 15);
        v92 = *(unsigned __int16 *)(a1 + 19162);
        *(_DWORD *)(a1 + 19160) = v92 << 16;
        *(_DWORD *)(a1 + 19160) = *((_DWORD *)a3 + 3) | (v92 << 16);
      }
      else if (a2 == 64)
      {
        v49 = 0;
        *(_DWORD *)(a1 + 15592) = *a3;
        *(_DWORD *)(a1 + 17704) = a3[1];
        *(_WORD *)(a1 + 29708) = a3[4];
        *(_WORD *)(a1 + 14884) = a3[2];
        *(_WORD *)(a1 + 14886) = a3[3];
        *(_WORD *)(a1 + 14888) = a3[5];
        *(_DWORD *)(a1 + 12528) = *((_DWORD *)a3 + 3);
        *(_DWORD *)(a1 + 12532) = *((_DWORD *)a3 + 4);
        *(_DWORD *)(a1 + 12536) = *((_DWORD *)a3 + 5);
        *(_DWORD *)(a1 + 12540) = *((_DWORD *)a3 + 6);
        *(_BYTE *)(a1 + 14891) = *((_BYTE *)a3 + 28);
        *(_BYTE *)(a1 + 14893) = *((_BYTE *)a3 + 29);
        *(_BYTE *)(a1 + 14892) = *((_BYTE *)a3 + 30);
        *(_BYTE *)(a1 + 14894) = *((_BYTE *)a3 + 31);
        *(_BYTE *)(a1 + 14890) = *((_BYTE *)a3 + 32);
        *(_DWORD *)(a1 + 14880) = *((_DWORD *)a3 + 9);
        v50 = a3 + 34;
        v51 = (_DWORD *)(a1 + 12544);
        do
        {
          v51[12] = *(_DWORD *)&v50[v49 + 10];
          v51[13] = *(_DWORD *)&v50[v49 + 12];
          v51[14] = *(_DWORD *)&v50[v49 + 14];
          v51[15] = *(_DWORD *)&v50[v49 + 16];
          *v51 = *(_DWORD *)&v50[v49 - 14];
          v51[1] = *(_DWORD *)&v50[v49 - 12];
          v51[2] = *(_DWORD *)&v50[v49 - 10];
          v51[3] = *(_DWORD *)&v50[v49 - 8];
          v51[4] = *(_DWORD *)&v50[v49 - 6];
          v51[5] = *(_DWORD *)&v50[v49 - 4];
          v51[6] = *(_DWORD *)&v50[v49 - 2];
          v51[7] = *(_DWORD *)&v50[v49];
          v51[8] = *(_DWORD *)&v50[v49 + 2];
          v51[9] = *(_DWORD *)&v50[v49 + 4];
          v51[10] = *(_DWORD *)&v50[v49 + 6];
          v51[11] = *(_DWORD *)&v50[v49 + 8];
          v51[16] = *(_DWORD *)&v50[v49 + 18];
          v51[17] = *(_DWORD *)&v50[v49 + 20];
          v51[18] = *(_DWORD *)&v50[v49 + 22];
          v51[23] = *(_DWORD *)&v50[v49 + 24];
          v51[36] = *(_DWORD *)&v50[v49 + 26];
          v51[19] = *(_DWORD *)&v50[v49 + 28];
          v51[20] = *(_DWORD *)&v50[v49 + 30];
          v51[21] = *(_DWORD *)&v50[v49 + 32];
          v51[22] = *(_DWORD *)&v50[v49 + 34];
          v49 += 50;
          v51 += 40;
        }
        while (v49 != 400);
        v52 = 0;
        v53 = 1;
        do
        {
          v54 = &a3[40 * v52];
          v55 = *(_DWORD **)(a1 + 8 * v52 + 1424);
          *v55 = *((_DWORD *)v54 + 210);
          v55[1] = *((_DWORD *)v54 + 211);
          v55[2] = *((_DWORD *)v54 + 212);
          v55[3] = *((_DWORD *)v54 + 213);
          v55[4] = *((_DWORD *)v54 + 214);
          v55[5] = *((_DWORD *)v54 + 215);
          v55[6] = *((_DWORD *)v54 + 216);
          v55[7] = *((_DWORD *)v54 + 217);
          v55[8] = *((_DWORD *)v54 + 218);
          v55[9] = *((_DWORD *)v54 + 219);
          v55[10] = *((_DWORD *)v54 + 220);
          v55[11] = *((_DWORD *)v54 + 221);
          v55[12] = *((_DWORD *)v54 + 222);
          v55[13] = *((_DWORD *)v54 + 223);
          v55[14] = *((_DWORD *)v54 + 224);
          v55[15] = *((_DWORD *)v54 + 225);
          v55[16] = *((_DWORD *)v54 + 229);
          v56 = (_DWORD *)(a1 + 12 * v52 + 29604);
          *v56 = *((_DWORD *)v54 + 226);
          LOBYTE(v55) = v53;
          v56[1] = *((_DWORD *)v54 + 227);
          a4.n128_u32[0] = *((_DWORD *)v54 + 228);
          v56[2] = a4.n128_u32[0];
          v52 = 1;
          v53 = 0;
        }
        while ((v55 & 1) != 0);
      }
    }
    else
    {
      if (a2 != 128)
      {
        if (a2 != 256)
        {
          if (a2 == 512)
          {
            *(_DWORD *)(a1 + 15136) = *(_DWORD *)a3;
            *(_DWORD *)(a1 + 15140) = *((_DWORD *)a3 + 1);
            *(_DWORD *)(a1 + 15144) = *((_DWORD *)a3 + 2);
            a4.n128_u32[0] = *((_DWORD *)a3 + 3);
            *(_DWORD *)(a1 + 15148) = a4.n128_u32[0];
          }
          return a4.n128_f32[0];
        }
        *(_BYTE *)(a1 + 15204) = *((_BYTE *)a3 + 28);
        *(_WORD *)(a1 + 15200) = a3[12];
        *(_QWORD *)(a1 + 15128) = *(_QWORD *)a3;
        v71 = *((_BYTE *)a3 + 29) != 0;
        *(_BYTE *)(a1 + 15340) = *((_BYTE *)a3 + 29);
        *(_BYTE *)(a1 + 15206) = *((_BYTE *)a3 + 30);
        *(_QWORD *)(a1 + 15208) = *((_QWORD *)a3 + 1);
        a4.n128_u64[0] = *((_QWORD *)a3 + 2);
        *(_QWORD *)(a1 + 15216) = a4.n128_u64[0];
        v72 = *(_DWORD *)(a1 + 29804) & 0xFFFFFEFF | (v71 << 8);
        goto LABEL_89;
      }
      *(_DWORD *)v6 = *(_DWORD *)a3;
      *(_DWORD *)(a1 + 29580) = *((_DWORD *)a3 + 1);
      *(_DWORD *)(a1 + 29584) = *((_DWORD *)a3 + 2);
      *(_DWORD *)(a1 + 29588) = *((_DWORD *)a3 + 3);
      v65 = *((float *)a3 + 5);
      *(float *)(a1 + 15244) = v65;
      v66 = *((float *)a3 + 6);
      *(float *)(a1 + 15248) = v66;
      v67 = *((float *)a3 + 7);
      *(float *)(a1 + 15252) = v67;
      *(_DWORD *)(a1 + 29600) = *((_DWORD *)a3 + 4);
      *(_WORD *)(a1 + 15276) = a3[16];
      *(_WORD *)(a1 + 15278) = a3[17];
      *(_WORD *)(a1 + 15280) = a3[18];
      *(_BYTE *)(a1 + 15282) = *((_BYTE *)a3 + 38);
      *(_BYTE *)(a1 + 32506) = *((_BYTE *)a3 + 39);
      v68 = v67 - v66;
      v69 = v68 > -0.000005 && v68 < 0.000005;
      v70 = 1.0 / v68;
      if (v69)
        v70 = 200000.0;
      *(float *)(a1 + 15256) = v70;
      *(float *)(a1 + 15272) = v67 * v70;
      a4.n128_u64[0] = (unint64_t)vmul_n_f32((float32x2_t)0x3F99BE613FB8AA3BLL, v65);
      *(_QWORD *)(a1 + 15260) = a4.n128_u64[0];
    }
  }
  return a4.n128_f32[0];
}

void glLightfv_Exec(float32x4_t *a1, int a2, int a3, float *a4)
{
  __int32 *v4;
  unsigned int v5;
  __int16 v6;
  float32x4_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  float32x4_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  float32x4_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  float v27;
  float32x4_t *v28;
  float v29;
  float v30;
  float32x4_t *v31;
  float v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  float v38;
  float32x4_t *v40;
  float32x4_t *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;

  v4 = &a1[1790].i32[3];
  v5 = a2 - 0x4000;
  if ((a2 - 0x4000) < 8)
  {
    switch(a3)
    {
      case 4608:
        v8 = &a1[10 * v5];
        v8[784].f32[0] = *a4;
        v8[784].f32[1] = a4[1];
        v8[784].f32[2] = a4[2];
        v8[784].f32[3] = a4[3];
        *(_BYTE *)(a1[89].i64[0] + 496) |= 4u;
        *(_BYTE *)(a1[89].i64[1] + 496) |= 4u;
        *v4 = 0;
        a1[96].i32[2] |= 0x1000000u;
        v9 = a1[1203].i64[0];
        if (v9)
        {
          v10 = *(unsigned __int16 *)(v9 + 20 * v5 + 2560);
          if (v10 <= 0x3FF)
          {
            *(__int32 *)((char *)a1[97].i32 + ((v10 >> 3) & 0x1FFC)) |= 1 << v10;
            *v4 = 0;
            a1[95].i32[3] |= 0x800000u;
          }
        }
        v11 = a1[1204].i64[1];
        if (v11)
        {
          v12 = *(unsigned __int16 *)(v11 + 20 * v5 + 2560);
          if (v12 <= 0x3FF)
          {
            *(__int32 *)((char *)a1[121].i32 + ((v12 >> 3) & 0x1FFC)) |= 1 << v12;
            *v4 = 0;
            a1[95].i32[3] |= 0x4000000u;
          }
        }
        v13 = a1[1205].i64[0];
        if (!v13)
          return;
        v14 = *(unsigned __int16 *)(v13 + 20 * v5 + 2560);
        goto LABEL_64;
      case 4609:
        v15 = &a1[10 * v5];
        v15[785].f32[0] = *a4;
        v15[785].f32[1] = a4[1];
        v15[785].f32[2] = a4[2];
        v15[785].f32[3] = a4[3];
        *(_BYTE *)(a1[89].i64[0] + 496) |= 8u;
        *(_BYTE *)(a1[89].i64[1] + 496) |= 8u;
        *v4 = 0;
        a1[96].i32[2] |= 0x1000000u;
        v16 = a1[1203].i64[0];
        if (v16)
        {
          v17 = *(unsigned __int16 *)(v16 + 20 * v5 + 2562);
          if (v17 <= 0x3FF)
          {
            *(__int32 *)((char *)a1[97].i32 + ((v17 >> 3) & 0x1FFC)) |= 1 << v17;
            *v4 = 0;
            a1[95].i32[3] |= 0x800000u;
          }
        }
        v18 = a1[1204].i64[1];
        if (v18)
        {
          v19 = *(unsigned __int16 *)(v18 + 20 * v5 + 2562);
          if (v19 <= 0x3FF)
          {
            *(__int32 *)((char *)a1[121].i32 + ((v19 >> 3) & 0x1FFC)) |= 1 << v19;
            *v4 = 0;
            a1[95].i32[3] |= 0x4000000u;
          }
        }
        v20 = a1[1205].i64[0];
        if (!v20)
          return;
        v14 = *(unsigned __int16 *)(v20 + 20 * v5 + 2562);
        goto LABEL_64;
      case 4610:
        v21 = &a1[10 * v5];
        v21[786].f32[0] = *a4;
        v21[786].f32[1] = a4[1];
        v21[786].f32[2] = a4[2];
        v21[786].f32[3] = a4[3];
        *(_BYTE *)(a1[89].i64[0] + 496) |= 0x10u;
        *(_BYTE *)(a1[89].i64[1] + 496) |= 0x10u;
        *v4 = 0;
        a1[96].i32[2] |= 0x1000000u;
        v22 = a1[1203].i64[0];
        if (v22)
        {
          v23 = *(unsigned __int16 *)(v22 + 20 * v5 + 2564);
          if (v23 <= 0x3FF)
          {
            *(__int32 *)((char *)a1[97].i32 + ((v23 >> 3) & 0x1FFC)) |= 1 << v23;
            *v4 = 0;
            a1[95].i32[3] |= 0x800000u;
          }
        }
        v24 = a1[1204].i64[1];
        if (v24)
        {
          v25 = *(unsigned __int16 *)(v24 + 20 * v5 + 2564);
          if (v25 <= 0x3FF)
          {
            *(__int32 *)((char *)a1[121].i32 + ((v25 >> 3) & 0x1FFC)) |= 1 << v25;
            *v4 = 0;
            a1[95].i32[3] |= 0x4000000u;
          }
        }
        v26 = a1[1205].i64[0];
        if (!v26)
          return;
        v14 = *(unsigned __int16 *)(v26 + 20 * v5 + 2564);
        goto LABEL_64;
      case 4611:
        v27 = *a4;
        v28 = &a1[10 * v5];
        v28[787].f32[0] = *a4;
        v29 = a4[1];
        v28[787].f32[1] = v29;
        v30 = a4[2];
        v28[787].f32[2] = v30;
        v28[787] = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(a1[602], v29), a1[601], v27), a1[603], v30), a1[604], a4[3]);
        gleUpdateLightPosition((uint64_t)a1, a2 - 0x4000);
        return;
      case 4612:
        v31 = &a1[10 * v5];
        v31[788].f32[0] = *a4;
        v31[788].f32[1] = a4[1];
        v31[788].f32[2] = a4[2];
        gleTransformLightDirection((uint64_t)a1, a2 - 0x4000);
        return;
      case 4613:
        v32 = *a4;
        if (*a4 < 0.0 || v32 > (float)*(int *)(a1[1814].i64[1] + 128))
          goto LABEL_54;
        a1[10 * v5 + 789].f32[3] = v32;
        gleUpdateLightExponents((uint64_t)a1, a2 - 0x4000);
        v33 = a1[1203].i64[0];
        if (v33)
        {
          v34 = *(unsigned __int16 *)(v33 + 20 * v5 + 2570);
          if (v34 <= 0x3FF)
          {
            *(__int32 *)((char *)a1[97].i32 + ((v34 >> 3) & 0x1FFC)) |= 1 << v34;
            *v4 = 0;
            a1[95].i32[3] |= 0x800000u;
          }
        }
        v35 = a1[1204].i64[1];
        if (v35)
        {
          v36 = *(unsigned __int16 *)(v35 + 20 * v5 + 2570);
          if (v36 <= 0x3FF)
          {
            *(__int32 *)((char *)a1[121].i32 + ((v36 >> 3) & 0x1FFC)) |= 1 << v36;
            *v4 = 0;
            a1[95].i32[3] |= 0x4000000u;
          }
        }
        v37 = a1[1205].i64[0];
        if (!v37)
          return;
        v14 = *(unsigned __int16 *)(v37 + 20 * v5 + 2570);
        goto LABEL_64;
      case 4614:
        v38 = *a4;
        if (*a4 < 0.0 || v38 > 90.0)
        {
          if (v38 != 180.0)
          {
LABEL_54:
            if (a1[1864].i16[4])
              return;
            v6 = 1281;
            goto LABEL_4;
          }
          v40 = &a1[10 * v5];
          v40[788].i32[3] = -1082130432;
          v40[793].i32[0] = 1127481344;
        }
        else
        {
          v41 = &a1[10 * v5];
          v41[793].f32[0] = v38;
          v41[788].f32[3] = cosf(*a4 * 0.017453);
        }
        gleUpdateLightExponents((uint64_t)a1, v5);
        v42 = a1[1203].i64[0];
        if (v42)
        {
          v43 = *(unsigned __int16 *)(v42 + 20 * v5 + 2568);
          if (v43 <= 0x3FF)
          {
            *(__int32 *)((char *)a1[97].i32 + ((v43 >> 3) & 0x1FFC)) |= 1 << v43;
            *v4 = 0;
            a1[95].i32[3] |= 0x800000u;
          }
        }
        v44 = a1[1204].i64[1];
        if (v44)
        {
          v45 = *(unsigned __int16 *)(v44 + 20 * v5 + 2568);
          if (v45 <= 0x3FF)
          {
            *(__int32 *)((char *)a1[121].i32 + ((v45 >> 3) & 0x1FFC)) |= 1 << v45;
            *v4 = 0;
            a1[95].i32[3] |= 0x4000000u;
          }
        }
        v46 = a1[1205].i64[0];
        if (v46)
        {
          v14 = *(unsigned __int16 *)(v46 + 20 * v5 + 2568);
LABEL_64:
          if (v14 <= 0x3FF)
          {
            *(__int32 *)((char *)a1[129].i32 + ((v14 >> 3) & 0x1FFC)) |= 1 << v14;
            *v4 = 0;
            a1[95].i32[3] |= 0x8000000u;
          }
        }
        return;
      case 4615:
        if (*a4 < 0.0)
          goto LABEL_54;
        a1[10 * v5 + 789].f32[0] = *a4;
        goto LABEL_68;
      case 4616:
        if (*a4 < 0.0)
          goto LABEL_54;
        a1[10 * v5 + 789].f32[1] = *a4;
        goto LABEL_68;
      case 4617:
        if (*a4 < 0.0)
          goto LABEL_54;
        a1[10 * v5 + 789].f32[2] = *a4;
LABEL_68:
        gleUpdateLightAttenuation((uint64_t)a1, a2 - 0x4000);
        return;
      default:
        break;
    }
  }
  if (!a1[1864].i16[4])
  {
    v6 = 1280;
LABEL_4:
    a1[1864].i16[4] = v6;
  }
}

uint64_t gleSetEnable_LIGHT(uint64_t result, int a2, int a3)
{
  int v3;
  int v4;
  uint64_t v5;

  v3 = *(_DWORD *)(result + 14880);
  v4 = v3 & ~(1 << a2) | (a3 << a2);
  if (v3 != v4)
  {
    v5 = result;
    *(_DWORD *)(result + 14880) = v4;
    *(_BYTE *)(*(_QWORD *)(result + 1424) + 496) = 63;
    *(_BYTE *)(*(_QWORD *)(result + 1432) + 496) = 63;
    result = gleUpdateLightFast(result, a2 - 0x4000);
    *(_DWORD *)(v5 + 28652) = 0;
    *(_DWORD *)(v5 + 1548) |= 0x10020u;
  }
  return result;
}

uint64_t glLightModelfv_Exec(uint64_t a1, int a2, _DWORD *a3)
{
  _DWORD *v3;
  _WORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  float v11;
  int v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;

  v3 = (_DWORD *)(a1 + 28652);
  v4 = (_WORD *)(a1 + 14888);
  if (a2 > 2898)
  {
    if (a2 != 34224)
    {
      if (a2 != 33272)
      {
        if (a2 == 2899)
        {
          *(_DWORD *)(a1 + 12528) = *a3;
          *(_DWORD *)(a1 + 12532) = a3[1];
          *(_DWORD *)(a1 + 12536) = a3[2];
          *(_DWORD *)(a1 + 12540) = a3[3];
          *(_BYTE *)(*(_QWORD *)(a1 + 1424) + 496) |= 4u;
          *(_BYTE *)(*(_QWORD *)(a1 + 1432) + 496) |= 4u;
          v5 = *(_QWORD *)(a1 + 19248);
          if (v5)
          {
            v6 = *(unsigned __int16 *)(v5 + 3786);
            if (v6 <= 0x3FF)
            {
              *(_DWORD *)(a1 + ((v6 >> 3) & 0x1FFC) + 1552) |= 1 << v6;
              *(_DWORD *)(a1 + 1532) |= 0x800000u;
            }
          }
          v7 = *(_QWORD *)(a1 + 19272);
          if (v7)
          {
            v8 = *(unsigned __int16 *)(v7 + 3786);
            if (v8 <= 0x3FF)
            {
              *(_DWORD *)(a1 + ((v8 >> 3) & 0x1FFC) + 1936) |= 1 << v8;
              *(_DWORD *)(a1 + 1532) |= 0x4000000u;
            }
          }
          v9 = *(_QWORD *)(a1 + 19280);
          if (v9)
          {
            v10 = *(unsigned __int16 *)(v9 + 3786);
            if (v10 <= 0x3FF)
            {
              *(_DWORD *)(a1 + ((v10 >> 3) & 0x1FFC) + 2064) |= 1 << v10;
              *(_DWORD *)(a1 + 1532) |= 0x8000000u;
            }
          }
          *v3 = 0;
          *(_DWORD *)(a1 + 1544) |= 0x1000000u;
          return a1;
        }
        goto LABEL_34;
      }
      v16 = *(float *)a3;
      if ((unsigned __int16)*v4 == v16)
        return a1;
      if (v16 - 33273 <= 1)
      {
        *v4 = v16;
        if (*(_BYTE *)(a1 + 14890))
        {
          if (!*(_BYTE *)(a1 + 24756) && (*(_BYTE *)(a1 + 24864) & 1) == 0)
          {
            v17 = (unsigned __int16)v16 == 33274;
            if (*(unsigned __int8 *)(a1 + 15283) != v17)
            {
              *(_BYTE *)(a1 + 15283) = v17;
              *v3 = 0;
              *(_DWORD *)(a1 + 1548) |= 0x20000u;
            }
          }
        }
        return gleUpdateLightModel(a1);
      }
LABEL_34:
      if (!*(_WORD *)(a1 + 29832))
        *(_WORD *)(a1 + 29832) = 1280;
      return a1;
    }
    v15 = *(float *)a3 != 0.0;
    if (*(unsigned __int8 *)(a1 + 14894) == v15)
      return a1;
    *(_BYTE *)(a1 + 14894) = v15;
    return gleUpdateLightModel(a1);
  }
  if (a2 == 2897)
  {
    v18 = *(float *)a3 != 0.0;
    if (*(unsigned __int8 *)(a1 + 14893) == v18)
      return a1;
    *(_BYTE *)(a1 + 14893) = v18;
    return gleUpdateLightModel(a1);
  }
  if (a2 != 2898)
    goto LABEL_34;
  v11 = *(float *)a3;
  v12 = *(float *)a3 != 0.0;
  if (*(unsigned __int8 *)(a1 + 14892) != v12)
  {
    *(_BYTE *)(a1 + 14892) = v12;
    if ((*(_BYTE *)(a1 + 24864) & 9) != 0 || *(_BYTE *)(a1 + 24756))
      v13 = *(unsigned __int8 *)(a1 + 24751);
    else
      v13 = v11 != 0.0 && *(_BYTE *)(a1 + 14890) != 0;
    if (v13 == *(unsigned __int8 *)(a1 + 17701))
    {
      v14 = *(_DWORD *)(a1 + 1548);
    }
    else
    {
      *(_BYTE *)(a1 + 17701) = v13;
      *(_DWORD *)(a1 + 1532) |= 0x40000000u;
      *v3 = 0;
      v14 = *(_DWORD *)(a1 + 1548) | 0x10008400;
      *(_DWORD *)(a1 + 1548) = v14;
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 29032) + 25) & 0x7F) != 0)
        v14 |= 0x30000u;
    }
    *v3 = 0;
    *(_DWORD *)(a1 + 1548) = v14 | 0x18402;
  }
  return a1;
}

uint64_t glStencilOp_Exec(uint64_t result, int a2, int a3, int a4)
{
  _WORD *v4;
  int v5;

  if (((a2 - 7680) < 4 || (a2 - 34055) < 2 || !a2 || a2 == 5386)
    && ((a3 - 7680) < 4 || (a3 - 34055) < 2 || !a3 || a3 == 5386)
    && ((a4 - 7680) < 4 || (a4 - 34055) < 2 || !a4 || a4 == 5386))
  {
    v4 = (_WORD *)(result + 15606);
    if (*(_DWORD *)(result + 29776) == 1028)
    {
      if ((unsigned __int16)*v4 == a2
        && *(unsigned __int16 *)(result + 15608) == a3
        && *(unsigned __int16 *)(result + 15610) == a4
        && *(unsigned __int16 *)(result + 15638) == a2
        && *(unsigned __int16 *)(result + 15640) == a3
        && *(unsigned __int16 *)(result + 15642) == a4)
      {
        return result;
      }
      *v4 = a2;
      *(_WORD *)(result + 15608) = a3;
      *(_WORD *)(result + 15610) = a4;
      *(_WORD *)(result + 15638) = a2;
      *(_WORD *)(result + 15640) = a3;
      *(_WORD *)(result + 15642) = a4;
      v5 = *(_DWORD *)(result + 15644);
      if (v5 == 33)
      {
        *(_DWORD *)(result + 15644) = 1;
        *(_DWORD *)(result + 1548) |= 0x8000u;
      }
      else
      {
        *(_DWORD *)(result + 15644) = v5 & 0xFFFFFFDF;
      }
    }
    else
    {
      if (*(unsigned __int16 *)(result + 15622) == a2
        && *(unsigned __int16 *)(result + 15624) == a3
        && *(unsigned __int16 *)(result + 15626) == a4)
      {
        return result;
      }
      *(_WORD *)(result + 15622) = a2;
      *(_WORD *)(result + 15624) = a3;
      *(_WORD *)(result + 15626) = a4;
    }
    *(_DWORD *)(result + 1520) |= 0x10000000u;
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1548) |= 0x40000u;
    return result;
  }
  if (!*(_WORD *)(result + 29832))
    *(_WORD *)(result + 29832) = 1280;
  return result;
}

uint64_t gleFlushAndSubmit(uint64_t a1, float a2, float a3, float a4, float a5)
{
  (*(void (**)(void))(a1 + 28152))();
  return (*(uint64_t (**)(uint64_t, _QWORD, float, float, float, float))(a1 + 26136))(a1, *(_QWORD *)(a1 + 26008), a2, a3, a4, a5);
}

unint64_t gleClipLines(uint64_t a1, char *a2, unint64_t a3, int a4)
{
  char *v5;
  uint64_t v7;
  char *v8;
  unsigned __int8 v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v16;

  v5 = a2;
  v7 = *(_QWORD *)(a1 + 26008);
  v8 = a2 - 8;
  v9 = 1;
  v16 = a2 - 8;
  do
  {
    if ((v9 & a4) == 0)
      goto LABEL_15;
    v10 = (unint64_t)&v8[8 * (int)a3];
    v11 = v5;
    if (v10 <= (unint64_t)v5)
      goto LABEL_14;
    do
    {
      v13 = *(_QWORD *)v5;
      v12 = *((_QWORD *)v5 + 1);
      if ((v9 & *(_BYTE *)(*(_QWORD *)v5 + 3)) != 0)
      {
        if ((v9 & *(_BYTE *)(v12 + 3)) != 0)
          goto LABEL_12;
        a4 |= (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(a1 + 27896))(a1, *(_QWORD *)v5, *((_QWORD *)v5 + 1), *(_QWORD *)v5, v9);
        *(_QWORD *)v11 = v13;
LABEL_11:
        *((_QWORD *)v11 + 1) = v12;
        v11 += 16;
        goto LABEL_12;
      }
      *(_QWORD *)v11 = v13;
      if ((v9 & *(_BYTE *)(v12 + 3)) == 0)
        goto LABEL_11;
      v14 = v7 + 640 * (*(_BYTE *)(v12 + 1) == 0);
      if (*(_BYTE *)(v12 + 1))
        v7 = v12;
      a4 |= (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(a1 + 27896))(a1, v12, v13, v7, v9);
      *((_QWORD *)v11 + 1) = v7;
      v11 += 16;
      v7 = v14;
LABEL_12:
      v5 += 16;
    }
    while ((unint64_t)v5 < v10);
    v8 = v16;
    v5 = a2;
LABEL_14:
    a3 = (unint64_t)(v11 - v5) >> 3;
    if ((int)a3 < 2)
      return 0;
LABEL_15:
    v9 *= 2;
  }
  while ((v9 & 0xFEu) < 0x21);
  *(_QWORD *)(a1 + 26008) = v7;
  return a3;
}

_QWORD *glMatrixMode_Comp(uint64_t a1, int a2)
{
  _QWORD *result;

  result = gleAddCommand(a1, (uint64_t)glMatrixMode_ListExec, 4);
  *(_DWORD *)result = a2;
  return result;
}

_QWORD *glPushMatrix_Comp(uint64_t a1)
{
  return gleAddCommand(a1, (uint64_t)glPushMatrix_ListExec, 0);
}

float *glScalef_Comp(uint64_t a1, float a2, float a3, float a4)
{
  float *result;

  result = (float *)gleAddCommand(a1, (uint64_t)glScale_ListExec, 12);
  *result = a2;
  result[1] = a3;
  result[2] = a4;
  return result;
}

void glRotatef_Comp(uint64_t a1, float a2, float a3, float a4, float a5)
{
  float v6;
  __float2 v10;
  float sinval;
  float cosval;
  void *v13;
  __float2 v14;
  __float2 v15;
  float *v16;

  v6 = *(float *)(a1 + 288);
  if (v6 == a4 && v6 == a5)
  {
    v10 = __sincosf_stret(flt_21B9A41A8[v6 > a3] * a2);
    sinval = v10.__sinval;
    cosval = v10.__cosval;
    v13 = glRotateX_ListExec;
  }
  else if (v6 == a3 && v6 == a5)
  {
    v14 = __sincosf_stret(flt_21B9A41A8[v6 > a4] * a2);
    sinval = v14.__sinval;
    cosval = v14.__cosval;
    v13 = glRotateY_ListExec;
  }
  else
  {
    if (v6 != a3 || v6 != a4)
    {
      glRotateXYZ_Comp(a1, a2, a3, a4, a5);
      return;
    }
    v15 = __sincosf_stret(flt_21B9A41A8[v6 > a5] * a2);
    sinval = v15.__sinval;
    cosval = v15.__cosval;
    v13 = glRotateZ_ListExec;
  }
  v16 = (float *)gleAddCommand(a1, (uint64_t)v13, 8);
  *v16 = sinval;
  v16[1] = cosval;
}

float *glNormal3f_Comp(uint64_t a1, float a2, float a3, float a4)
{
  float *result;

  result = (float *)gleAddCommand(a1, (uint64_t)glNormal_ListExec, 12);
  *result = a2;
  result[1] = a3;
  result[2] = a4;
  return result;
}

float *glTranslatef_Comp(uint64_t a1, float a2, float a3, float a4)
{
  float *result;

  result = (float *)gleAddCommand(a1, (uint64_t)glTranslate_ListExec, 12);
  *result = a2;
  result[1] = a3;
  result[2] = a4;
  return result;
}

_QWORD *glPopMatrix_Comp(uint64_t a1)
{
  return gleAddCommand(a1, (uint64_t)glPopMatrix_ListExec, 0);
}

uint64_t gleSetEnable_NORMALIZE(uint64_t result, uint64_t a2, int a3)
{
  if (*(unsigned __int8 *)(result + 12516) != a3)
  {
    *(_BYTE *)(result + 12516) = a3;
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1548) |= 0x10010u;
  }
  return result;
}

uint64_t gleSetEnable_FOG(uint64_t result, uint64_t a2, int a3)
{
  if (*(unsigned __int8 *)(result + 15282) != a3)
  {
    *(_BYTE *)(result + 15282) = a3;
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1548) |= 0x20000u;
    return gleUpdateFogData(result);
  }
  return result;
}

float *glNormal3f_Exec(float *result, float a2, float a3, float a4)
{
  result[2112] = a2;
  result[2113] = a3;
  result[2114] = a4;
  return result;
}

float *glMaterialfv_Exec(float *result, int a2, int a3, float *a4)
{
  float *v4;
  _DWORD *v5;
  float v6;
  __int16 v7;
  __int128 v8;

  v4 = result;
  v5 = result + 7163;
  v8 = 0uLL;
  if (a3 > 5631)
  {
    switch(a3)
    {
      case 5632:
        v8 = *(_OWORD *)a4;
        if (a2 == 1032)
        {
          result = (float *)gleLightMaterialRGBAChange_FB_E((uint64_t)result, &v8);
          goto LABEL_18;
        }
        break;
      case 5633:
        v6 = *a4;
        if (*a4 < 0.0 || v6 > (float)*(int *)(*((_QWORD *)result + 3629) + 124))
        {
          if (*((_WORD *)result + 14916))
            return result;
          v7 = 1281;
          goto LABEL_27;
        }
        if (a2 == 1032)
          return gleLightMaterialShineChange_FB((uint64_t)result, v6);
        break;
      case 5634:
        v8 = *(_OWORD *)a4;
        if (a2 == 1032)
        {
          result = (float *)gleLightMaterialRGBAChange_FB_AD((uint64_t)result, &v8);
          goto LABEL_18;
        }
        break;
    }
  }
  else
  {
    switch(a3)
    {
      case 4608:
        v8 = *(_OWORD *)a4;
        if (a2 == 1032)
        {
          result = (float *)gleLightMaterialRGBAChange_FB_A((uint64_t)result, &v8);
          goto LABEL_18;
        }
        break;
      case 4609:
        v8 = *(_OWORD *)a4;
        if (a2 == 1032)
        {
          result = (float *)gleLightMaterialRGBAChange_FB_D((uint64_t)result, &v8);
          goto LABEL_18;
        }
        break;
      case 4610:
        v8 = *(_OWORD *)a4;
        if (a2 == 1032)
        {
          result = (float *)gleLightMaterialRGBAChange_FB_S((uint64_t)result, &v8);
LABEL_18:
          *v5 = 0;
          *((_DWORD *)v4 + 386) |= 0x1000000u;
          return result;
        }
        break;
    }
  }
  if (*((_WORD *)result + 14916))
    return result;
  v7 = 1280;
LABEL_27:
  *((_WORD *)result + 14916) = v7;
  return result;
}

_QWORD *gleLightMaterialRGBAChange_F_AD(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;

  result = glePushMaterial(a1, 0);
  *result = *a2;
  result[1] = a2[1];
  result[2] = *a2;
  result[3] = a2[1];
  *((_WORD *)result + 248) |= 0xC0Cu;
  v5 = *(_QWORD *)(a1 + 19248);
  if (v5)
  {
    v6 = *(unsigned __int16 *)(v5 + 2816);
    if (v6 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v6 >> 3) & 0x1FFC) + 1552) |= 1 << v6;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x800000u;
    }
  }
  v7 = *(_QWORD *)(a1 + 19272);
  if (v7)
  {
    v8 = *(unsigned __int16 *)(v7 + 2816);
    if (v8 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v8 >> 3) & 0x1FFC) + 1936) |= 1 << v8;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x4000000u;
    }
  }
  v9 = *(_QWORD *)(a1 + 19280);
  if (v9)
  {
    v10 = *(unsigned __int16 *)(v9 + 2816);
    if (v10 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v10 >> 3) & 0x1FFC) + 2064) |= 1 << v10;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x8000000u;
    }
  }
  if (v5)
  {
    v11 = *(unsigned __int16 *)(v5 + 2818);
    if (v11 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v11 >> 3) & 0x1FFC) + 1552) |= 1 << v11;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x800000u;
    }
  }
  if (v7)
  {
    v12 = *(unsigned __int16 *)(v7 + 2818);
    if (v12 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v12 >> 3) & 0x1FFC) + 1936) |= 1 << v12;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x4000000u;
    }
  }
  if (v9)
  {
    v13 = *(unsigned __int16 *)(v9 + 2818);
    if (v13 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v13 >> 3) & 0x1FFC) + 2064) |= 1 << v13;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x8000000u;
    }
  }
  return result;
}

_QWORD *glePushMaterial(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;

  v2 = a1 + 8 * a2;
  v3 = *(_QWORD *)(v2 + 1424);
  if (*(_DWORD *)(v3 + 500))
  {
    v5 = *(_QWORD **)(a1 + 1440);
    if (v5)
    {
      *(_QWORD *)(a1 + 1440) = v5[64];
    }
    else
    {
      v5 = malloc_type_malloc(0x210uLL, 0x577B5147uLL);
      if (!v5)
        abort();
      *((_DWORD *)v5 + 17) = 0;
      *((_DWORD *)v5 + 18) = 0;
      *((_DWORD *)v5 + 19) = 1065353216;
    }
    v5[63] = 0;
    v5[64] = v3;
    *(_QWORD *)(v3 + 504) = v5;
    *(_QWORD *)(v2 + 1424) = v5;
    v5[62] = 63;
    *v5 = *(_QWORD *)v3;
    v5[1] = *(_QWORD *)(v3 + 8);
    v5[2] = *(_QWORD *)(v3 + 16);
    v5[3] = *(_QWORD *)(v3 + 24);
    v5[4] = *(_QWORD *)(v3 + 32);
    v5[5] = *(_QWORD *)(v3 + 40);
    v5[6] = *(_QWORD *)(v3 + 48);
    v5[7] = *(_QWORD *)(v3 + 56);
    *((_DWORD *)v5 + 16) = *(_DWORD *)(v3 + 64);
    return v5;
  }
  return (_QWORD *)v3;
}

_QWORD *gleLightMaterialRGBAChange_F_E(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;

  result = glePushMaterial(a1, 0);
  result[6] = *a2;
  result[7] = a2[1];
  *((_WORD *)result + 248) |= 0x202u;
  v5 = *(_QWORD *)(a1 + 19248);
  if (v5)
  {
    v6 = *(unsigned __int16 *)(v5 + 2822);
    if (v6 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v6 >> 3) & 0x1FFC) + 1552) |= 1 << v6;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x800000u;
    }
  }
  v7 = *(_QWORD *)(a1 + 19272);
  if (v7)
  {
    v8 = *(unsigned __int16 *)(v7 + 2822);
    if (v8 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v8 >> 3) & 0x1FFC) + 1936) |= 1 << v8;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x4000000u;
    }
  }
  v9 = *(_QWORD *)(a1 + 19280);
  if (v9)
  {
    v10 = *(unsigned __int16 *)(v9 + 2822);
    if (v10 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v10 >> 3) & 0x1FFC) + 2064) |= 1 << v10;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x8000000u;
    }
  }
  return result;
}

_QWORD *gleLightMaterialRGBAChange_F_S(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;

  result = glePushMaterial(a1, 0);
  result[4] = *a2;
  result[5] = a2[1];
  *((_WORD *)result + 248) |= 0x1010u;
  v5 = *(_QWORD *)(a1 + 19248);
  if (v5)
  {
    v6 = *(unsigned __int16 *)(v5 + 2820);
    if (v6 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v6 >> 3) & 0x1FFC) + 1552) |= 1 << v6;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x800000u;
    }
  }
  v7 = *(_QWORD *)(a1 + 19272);
  if (v7)
  {
    v8 = *(unsigned __int16 *)(v7 + 2820);
    if (v8 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v8 >> 3) & 0x1FFC) + 1936) |= 1 << v8;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x4000000u;
    }
  }
  v9 = *(_QWORD *)(a1 + 19280);
  if (v9)
  {
    v10 = *(unsigned __int16 *)(v9 + 2820);
    if (v10 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v10 >> 3) & 0x1FFC) + 2064) |= 1 << v10;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x8000000u;
    }
  }
  return result;
}

uint64_t glMaterialf_Exec(uint64_t a1, float a2, int a3, int a4)
{
  __int16 *v4;
  __int16 v5;

  if (a4 == 5633)
  {
    if (a2 < 0.0 || (float)*(int *)(*(_QWORD *)(a1 + 29032) + 124) < a2)
    {
      v4 = (__int16 *)(a1 + 29832);
      if (*(_WORD *)(a1 + 29832))
        return a1;
      v5 = 1281;
LABEL_11:
      *v4 = v5;
      return a1;
    }
    if (a3 == 1032)
      return (uint64_t)gleLightMaterialShineChange_FB(a1, a2);
  }
  v4 = (__int16 *)(a1 + 29832);
  if (!*(_WORD *)(a1 + 29832))
  {
    v5 = 1280;
    goto LABEL_11;
  }
  return a1;
}

uint64_t gleCullTriangle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, _DWORD *a6)
{
  int v6;
  uint64_t result;

  v6 = *(unsigned __int8 *)(a1 + 28748) == (float)((float)((float)(*(float *)(a4 + 64) - *(float *)(a2 + 64))
                                                         * (float)(*(float *)(a4 + 68) - *(float *)(a3 + 68)))
                                                 - (float)((float)(*(float *)(a4 + 64) - *(float *)(a3 + 64))
                                                         * (float)(*(float *)(a4 + 68) - *(float *)(a2 + 68)))) > 0.0;
  if (*(_BYTE *)(a1 + 28750) == (v6 != a5))
    return 1;
  result = 0;
  *a6 = v6 == a5;
  return result;
}

uint64_t glScale_Exec(uint64_t result, float a2, float a3, float a4)
{
  int v4;
  float32x4_t *v5;
  float32x4_t v6;
  int v7;
  float v8;
  float v9;
  float v10;
  float32x4_t *v11;
  float32x4_t v12;

  if (*(int *)(result + 20484) < 24)
  {
    v4 = *(_DWORD *)(result + 20488);
    v5 = *(float32x4_t **)(result + 19976);
    v6 = vmulq_n_f32(v5[1], a3);
    *v5 = vmulq_n_f32(*v5, a2);
    v5[1] = v6;
    v5[2] = vmulq_n_f32(v5[2], a4);
    *(_DWORD *)(result + 1528) |= v4;
    *(_DWORD *)(result + 1540) |= v4;
    v7 = *(_DWORD *)(result + 1544);
    if (!*(_BYTE *)(result + 12517) && (v4 & ~v7 & *(_DWORD *)(result + 2216) & 0xFFFFFC) != 0)
    {
      v8 = a2 < 0.0 ? -a2 : a2;
      if (v8 >= 0.000005)
      {
        v9 = -a3;
        if (a3 >= 0.0)
          v9 = a3;
        if (v9 >= 0.000005)
        {
          v10 = -a4;
          if (a4 >= 0.0)
            v10 = a4;
          if (v10 >= 0.000005)
          {
            v11 = *(float32x4_t **)(result + 19984);
            v12 = vmulq_n_f32(v11[1], 1.0 / a3);
            *v11 = vmulq_n_f32(*v11, 1.0 / a2);
            v11[1] = v12;
            v11[2] = vmulq_n_f32(v11[2], 1.0 / a4);
            v4 &= 0xFF000003;
          }
        }
      }
    }
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1544) = v7 | v4;
  }
  else if (!*(_WORD *)(result + 29832))
  {
    *(_WORD *)(result + 29832) = 1282;
  }
  return result;
}

uint64_t glRotateX_Exec(uint64_t result, double a2, double a3)
{
  int v3;
  uint64_t v4;
  float32x2_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  int v9;
  uint64_t v10;
  float32x4_t v11;
  float32x4_t v12;

  if (*(int *)(result + 20484) < 24)
  {
    v3 = *(_DWORD *)(result + 20488);
    v4 = *(_QWORD *)(result + 19976);
    v5 = (float32x2_t)vdupq_lane_s32(*(int32x2_t *)&a2, 0).u64[0];
    v6 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0);
    v8 = *(float32x4_t *)(v4 + 16);
    v7 = *(float32x4_t *)(v4 + 32);
    *(float32x2_t *)(v4 + 16) = vmla_f32(vmul_f32(*(float32x2_t *)v7.f32, v5), *(float32x2_t *)v6.f32, *(float32x2_t *)v8.f32);
    *(float32x2_t *)(v4 + 24) = vmla_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v7, (int8x16_t)v7, 8uLL), v5), *(float32x2_t *)v6.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL));
    *(float32x4_t *)(v4 + 32) = vmlaq_n_f32(vmulq_n_f32(vnegq_f32(v8), *(float *)&a2), v7, *(float *)&a3);
    *(_DWORD *)(result + 1528) |= v3;
    *(_DWORD *)(result + 1540) |= v3;
    v9 = *(_DWORD *)(result + 1544);
    if ((v3 & ~v9 & *(_DWORD *)(result + 2216) & 0xFFFFFC) != 0)
    {
      v10 = *(_QWORD *)(result + 19984);
      v12 = *(float32x4_t *)(v10 + 16);
      v11 = *(float32x4_t *)(v10 + 32);
      *(float32x2_t *)(v10 + 16) = vmla_f32(vmul_f32(*(float32x2_t *)v11.f32, v5), *(float32x2_t *)v6.f32, *(float32x2_t *)v12.f32);
      *(float32x2_t *)(v10 + 24) = vmla_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL), v5), *(float32x2_t *)v6.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL));
      *(float32x4_t *)(v10 + 32) = vmlaq_f32(vmulq_n_f32(vnegq_f32(v12), *(float *)&a2), v6, v11);
      v3 &= 0xFF000003;
    }
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1544) = v3 | v9;
  }
  else if (!*(_WORD *)(result + 29832))
  {
    *(_WORD *)(result + 29832) = 1282;
  }
  return result;
}

uint64_t gleCullQuad(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  int v6;
  int v7;
  uint64_t result;

  v6 = *(unsigned __int8 *)(a1 + 28748);
  v7 = (float)((float)((float)((float)((float)(*(float *)(a2 + 64) * *(float *)(a3 + 68))
                                     - (float)(*(float *)(a3 + 64) * *(float *)(a2 + 68)))
                             + (float)((float)(*(float *)(a3 + 64) * *(float *)(a4 + 68))
                                     - (float)(*(float *)(a4 + 64) * *(float *)(a3 + 68))))
                     + (float)((float)(*(float *)(a4 + 64) * *(float *)(a5 + 68))
                             - (float)(*(float *)(a5 + 64) * *(float *)(a4 + 68))))
             + (float)((float)(*(float *)(a5 + 64) * *(float *)(a2 + 68))
                     - (float)(*(float *)(a2 + 64) * *(float *)(a5 + 68)))) > 0.0;
  if (*(_BYTE *)(a1 + 28750) == (v6 == v7))
    return 1;
  result = 0;
  *a6 = v6 != v7;
  return result;
}

void glRotatef_Exec(uint64_t a1, float a2, float a3, float a4, float a5)
{
  float v6;
  double v10;
  double v11;
  __float2 v12;
  double v13;
  __float2 v14;
  double v15;
  double v16;
  __float2 v17;

  v6 = *(float *)(a1 + 288);
  if (v6 == a4 && v6 == a5)
  {
    v12 = __sincosf_stret(flt_21B9A41A8[v6 > a3] * a2);
    *(float *)&v11 = v12.__cosval;
    *(float *)&v10 = v12.__sinval;
    glRotateX_Exec(a1, v10, v11);
  }
  else if (v6 == a3 && v6 == a5)
  {
    v14 = __sincosf_stret(flt_21B9A41A8[v6 > a4] * a2);
    *(float *)&v13 = v14.__cosval;
    glRotateY_Exec(a1, v14.__sinval, v13);
  }
  else if (v6 == a3 && v6 == a4)
  {
    v17 = __sincosf_stret(flt_21B9A41A8[v6 > a5] * a2);
    *(float *)&v16 = v17.__cosval;
    *(float *)&v15 = v17.__sinval;
    glRotateZ_Exec(a1, v15, v16);
  }
  else
  {
    glRotateXYZ_Exec(a1, a2, a3, a4, a5);
  }
}

uint64_t glRotateY_Exec(uint64_t result, float a2, double a3)
{
  int v3;
  float32x4_t *v4;
  float32x4_t v5;
  float32x4_t v6;
  int v7;
  float32x4_t v8;
  float32x4_t *v9;
  float32x4_t v10;
  float32x4_t v11;

  if (*(int *)(result + 20484) < 24)
  {
    v3 = *(_DWORD *)(result + 20488);
    v4 = *(float32x4_t **)(result + 19976);
    v5 = *v4;
    v6 = v4[2];
    *v4 = vmlaq_n_f32(vmulq_n_f32(vnegq_f32(v6), a2), *v4, *(float *)&a3);
    v4[2] = vmlaq_n_f32(vmulq_n_f32(v5, a2), v6, *(float *)&a3);
    *(_DWORD *)(result + 1528) |= v3;
    *(_DWORD *)(result + 1540) |= v3;
    v7 = *(_DWORD *)(result + 1544);
    if ((v3 & ~v7 & *(_DWORD *)(result + 2216) & 0xFFFFFC) != 0)
    {
      v8 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0);
      v9 = *(float32x4_t **)(result + 19984);
      v10 = *v9;
      v11 = v9[2];
      *v9 = vmlaq_f32(vmulq_n_f32(vnegq_f32(v11), a2), v8, *v9);
      v9[2] = vmlaq_f32(vmulq_n_f32(v10, a2), v8, v11);
      v3 &= 0xFF000003;
    }
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1544) = v3 | v7;
  }
  else if (!*(_WORD *)(result + 29832))
  {
    *(_WORD *)(result + 29832) = 1282;
  }
  return result;
}

float64x2_t gleGetMatrixd(float32x2_t *a1, float64x2_t *a2)
{
  float64x2_t v2;
  float64x2_t v3;
  float64x2_t v4;
  float64x2_t result;
  float64x2_t v6;

  v2 = vcvtq_f64_f32(a1[1]);
  *a2 = vcvtq_f64_f32(*a1);
  a2[1] = v2;
  v3 = vcvtq_f64_f32(a1[3]);
  a2[2] = vcvtq_f64_f32(a1[2]);
  a2[3] = v3;
  v4 = vcvtq_f64_f32(a1[5]);
  a2[4] = vcvtq_f64_f32(a1[4]);
  a2[5] = v4;
  result = vcvtq_f64_f32(a1[6]);
  v6 = vcvtq_f64_f32(a1[7]);
  a2[6] = result;
  a2[7] = v6;
  return result;
}

unint64_t glReadPixels_Exec(unint64_t result, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, int a7, uint64_t a8)
{
  __int16 *v8;
  uint64_t v13;
  unint64_t v14;
  double v15;
  double v16;
  double v17;
  unint64_t v18;
  unsigned int *v19;
  int MatrixIdentifier;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  _BOOL4 v29;
  _BOOL4 v30;
  int v31;
  __int16 v32;
  unsigned __int16 v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  unsigned int v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  int v48;
  int v49;
  unsigned int v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  _DWORD *v62;
  int v63;
  int v64;
  __int16 v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;

  v71 = a3;
  v72 = a2;
  v69 = a5;
  v70 = a4;
  v8 = (__int16 *)(result + 29832);
  if (((a5 | a4) & 0x80000000) != 0)
  {
    if (*v8)
      return result;
    v65 = 1281;
    goto LABEL_115;
  }
  v13 = result;
  v14 = result + 32493;
  result = glePixelStorageFromFormatType(result, a6, a7);
  v18 = result;
  if ((result & 0x2000000000000000) != 0 || result && (*(_WORD *)v14 & 0x2000) != 0)
  {
    if (a6 != 35359 && a6 != 34233 || (a4 & 1) == 0)
    {
      v19 = (unsigned int *)(v13 + 18448);
      if ((*(_BYTE *)(v13 + 1540) & 4) != 0)
      {
        MatrixIdentifier = gleGenerateMatrixIdentifier(v13, v13 + 9488, v15, v16, v17);
        *(_DWORD *)(v13 + 19152) = *(_DWORD *)(v13 + 19152) & 0xFFFFFEFF | ((MatrixIdentifier != -1074791426) << 8);
        *(_DWORD *)(v13 + 29732) = MatrixIdentifier;
      }
      if ((*(_BYTE *)(v13 + 29803) & 0x8A) != 0)
      {
        result = gleUpdateReadFramebufferState(v13);
        if ((_DWORD)result)
        {
          if ((_DWORD)result != 16711680 && !*v8)
            *v8 = result;
          return result;
        }
      }
      result = gleCheckReadPixelsNeeds(v13, a6, 0, (v18 >> 31) & 1);
      if (!(_DWORD)result)
        return result;
      v68 = 0;
      if (*(_BYTE *)(v14 + 8) == 4 && a7 == 5131)
        v22 = 36193;
      else
        v22 = a7;
      if ((*(_WORD *)v14 & 0x2000) != 0)
        goto LABEL_58;
      v23 = *(_QWORD *)(v13 + 28968);
      v24 = v23 + 40 + 88 * *(unsigned __int8 *)(v14 + 6);
      v25 = *(unsigned __int16 *)(v24 + 604);
      v26 = *(unsigned __int16 *)(v24 + 606);
      v29 = a6 == 6408 && v25 == 32993 && v26 == 33638;
      v30 = v22 == 32820;
      if (v30 && v29)
        v31 = 6408;
      else
        v31 = v25;
      if (v30 && v29)
        v32 = -32716;
      else
        v32 = v26;
      if ((*(_BYTE *)(*(_QWORD *)(v13 + 19296) + 344) & 4) != 0)
      {
        v25 = v31;
        LOWORD(v26) = v32;
      }
      if (v25 == a6 && v22 == (unsigned __int16)v26)
        goto LABEL_58;
      v34 = *(_WORD *)(*(_QWORD *)(v23 + 40 + 16 * (*(unsigned __int16 *)(v23 + 472) - 36064)) + 1000);
      v35 = v34;
      v36 = v34 - 34836;
      v37 = v34 - 33325;
      v38 = v34 & 0xFFFE;
      if (v36 < 0xC || v37 < 4 || v38 == 36012 || v35 == 35901 || v35 == 35898)
      {
        if (a6 == 6408 && v22 == 5126)
          goto LABEL_58;
        if (a6 != 6407 || (*(_BYTE *)(*(_QWORD *)(v13 + 29480) + 578) & 1) == 0)
          goto LABEL_113;
        if (v22 == 35899 && v35 == 35898)
          goto LABEL_58;
        if (v22 != 35902)
          goto LABEL_113;
        v59 = 35901;
        goto LABEL_86;
      }
      if ((v35 - 36208) < 0x12)
        goto LABEL_89;
      if ((v35 - 33330) > 0xA)
      {
        if (v35 != 36975)
        {
          if ((v35 - 36226) < 0x12)
            goto LABEL_110;
          v63 = v35 & 1;
          goto LABEL_108;
        }
      }
      else if ((v35 & 1) != 0)
      {
        v63 = 1;
LABEL_108:
        if ((v35 - 33340) >= 0xFFFFFFF5 && v63)
        {
LABEL_110:
          if (a6 == 36249)
          {
            v60 = 5124;
LABEL_91:
            if (v22 != v60)
              goto LABEL_113;
LABEL_58:
            v67 = v22;
            v43 = gleStandardizeIntegerFormat(a6);
            v44 = *(_QWORD *)(v13 + 28968);
            v66 = v43;
            if (v44)
            {
              v45 = *(unsigned __int16 *)(v44 + 474);
              v46 = *(unsigned __int16 *)(v44 + 476);
            }
            else
            {
              v45 = *(_DWORD *)(v13 + 29632);
              v46 = *(_DWORD *)(v13 + 29636);
            }
            v47 = (BYTE4(v18) & 0x1Fu) + 1;
            v48 = v47 + v47 * ((v18 >> 37) & 3);
            v49 = *(_DWORD *)(v13 + 18452);
            if (!v49)
            {
              v50 = *v19;
              if (!*v19)
                v50 = a4;
              v49 = (*(_DWORD *)(v13 + 18476) + v50 * v48 - 1) & -*(_DWORD *)(v13 + 18476);
            }
            result = gleClipReadableRange(v13, v45, v46, (int *)&v72, (int *)&v71, (int *)&v70, (int *)&v69, (_DWORD *)&v68 + 1, &v68);
            if ((_DWORD)result)
              a8 += HIDWORD(v68) * v48 + (int)v68 * v49;
            v51 = v70;
            if ((int)v70 < 1)
              return result;
            v52 = v69;
            if ((int)v69 < 1)
              return result;
            v53 = *(_DWORD *)(v13 + 18452);
            *(_DWORD *)(v13 + 18452) = v49;
            v54 = *(_QWORD *)(v13 + 19328);
            if (v54)
            {
              result = gleOffsetLimitStorage((int *)(v13 + 18448), v51, v52, v18, a8);
              if (result > *(_QWORD *)(v54 + 152) || a8 % v47 || *(_BYTE *)(v54 + 292))
              {
                if (!*v8)
                  *v8 = 1282;
                goto LABEL_100;
              }
              if (*(_BYTE *)(v54 + 164))
              {
LABEL_100:
                *(_DWORD *)(v13 + 18452) = v53;
                return result;
              }
              v55 = v54 + 40;
              v56 = *(_QWORD *)(v54 + 136) + a8;
              if (*(_BYTE *)(v54 + 165))
              {
                (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v13 + 29448) + 1024))(*(_QWORD *)(v13 + 29016), *(_QWORD *)(v55 + 8 * *(unsigned __int8 *)(v14 + 7)));
                if (!*(_QWORD *)(v54 + 192))
                  gfxWaitBufferOnDevices();
              }
              result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, _DWORD, _QWORD))(*(_QWORD *)(v13 + 29496) + 224))(*(_QWORD *)(v13 + 29464), v72, v71, v70, v69, v66, v67, v56, 0, *(_QWORD *)(v55 + 8 * *(unsigned __int8 *)(v14 + 7)));
              if ((_DWORD)result)
              {
                v57 = *(_QWORD *)(v13 + 29472);
                *(_BYTE *)(v54 + 167) = 0;
                *(_QWORD *)(v54 + 192) = v57;
                v58 = *(_QWORD *)(v13 + 26384);
                if (v58)
                  *(_BYTE *)(v58 + 1216) = 0;
                goto LABEL_100;
              }
              if (*(_QWORD *)(v54 + 192))
                gleSynchronizeBufferOnCurrentDevices(v13, v54 + 40);
              *(_BYTE *)(v54 + 167) = 1;
              v61 = *(unsigned __int8 *)(v14 + 3);
              if (*(_BYTE *)(v14 + 3))
              {
                v62 = (_DWORD *)(v54 + 304);
                do
                {
                  *v62 |= 4u;
                  v62 += 2;
                  --v61;
                }
                while (v61);
              }
              gleDirtyBufferObjectCurrentBindPoints(v13, v54 + 40);
            }
            result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v13 + 29496) + 224))(*(_QWORD *)(v13 + 29464), v72, v71);
            goto LABEL_100;
          }
LABEL_113:
          if (*v8)
            return result;
          v65 = 1280;
          goto LABEL_115;
        }
        v64 = v22;
        result = gleInternalFormatIsSigned(v35);
        if ((_DWORD)result)
          goto LABEL_113;
        v22 = v64;
        if (a6 == 6408 && v64 == 5121)
          goto LABEL_58;
        if (a6 != 6408 || v64 != 33640)
          goto LABEL_113;
        v59 = 32857;
LABEL_86:
        if (v35 == v59)
          goto LABEL_58;
        goto LABEL_113;
      }
LABEL_89:
      if (a6 == 36249)
      {
        v60 = 5125;
        goto LABEL_91;
      }
      goto LABEL_113;
    }
    if (*v8)
      return result;
    v65 = 1282;
LABEL_115:
    *v8 = v65;
    return result;
  }
  if (!*v8)
  {
    if (result)
      v65 = 1282;
    else
      v65 = 1280;
    goto LABEL_115;
  }
  return result;
}

_QWORD *gleLightMaterialRGBAChange_FB_AD(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  _DWORD *v5;
  char v6;
  char v7;
  _QWORD *result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;

  v4 = 0;
  v5 = (_DWORD *)(a1 + 28652);
  v6 = 1;
  do
  {
    v7 = v6;
    result = glePushMaterial(a1, v4);
    *result = *a2;
    result[1] = a2[1];
    result[2] = *a2;
    result[3] = a2[1];
    *((_WORD *)result + 248) |= 0xC0Cu;
    v9 = *(_QWORD *)(a1 + 19248);
    if (v9)
    {
      v10 = *(unsigned __int16 *)(v9 + 12 * v4 + 2816);
      if (v10 <= 0x3FF)
      {
        *(_DWORD *)(a1 + ((v10 >> 3) & 0x1FFC) + 1552) |= 1 << v10;
        *v5 = 0;
        *(_DWORD *)(a1 + 1532) |= 0x800000u;
      }
    }
    v11 = *(_QWORD *)(a1 + 19272);
    if (v11)
    {
      v12 = *(unsigned __int16 *)(v11 + 12 * v4 + 2816);
      if (v12 <= 0x3FF)
      {
        *(_DWORD *)(a1 + ((v12 >> 3) & 0x1FFC) + 1936) |= 1 << v12;
        *v5 = 0;
        *(_DWORD *)(a1 + 1532) |= 0x4000000u;
      }
    }
    v13 = *(_QWORD *)(a1 + 19280);
    if (v13)
    {
      v14 = *(unsigned __int16 *)(v13 + 12 * v4 + 2816);
      if (v14 <= 0x3FF)
      {
        *(_DWORD *)(a1 + ((v14 >> 3) & 0x1FFC) + 2064) |= 1 << v14;
        *v5 = 0;
        *(_DWORD *)(a1 + 1532) |= 0x8000000u;
      }
    }
    if (v9)
    {
      v15 = *(unsigned __int16 *)(v9 + 12 * v4 + 2818);
      if (v15 <= 0x3FF)
      {
        *(_DWORD *)(a1 + ((v15 >> 3) & 0x1FFC) + 1552) |= 1 << v15;
        *v5 = 0;
        *(_DWORD *)(a1 + 1532) |= 0x800000u;
      }
    }
    if (v11)
    {
      v16 = *(unsigned __int16 *)(v11 + 12 * v4 + 2818);
      if (v16 <= 0x3FF)
      {
        *(_DWORD *)(a1 + ((v16 >> 3) & 0x1FFC) + 1936) |= 1 << v16;
        *v5 = 0;
        *(_DWORD *)(a1 + 1532) |= 0x4000000u;
      }
    }
    if (v13)
    {
      v17 = *(unsigned __int16 *)(v13 + 12 * v4 + 2818);
      if (v17 <= 0x3FF)
      {
        *(_DWORD *)(a1 + ((v17 >> 3) & 0x1FFC) + 2064) |= 1 << v17;
        *v5 = 0;
        *(_DWORD *)(a1 + 1532) |= 0x8000000u;
      }
    }
    v6 = 0;
    v4 = 1;
  }
  while ((v7 & 1) != 0);
  return result;
}

_QWORD *gleLightMaterialRGBAChange_FB_E(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  _DWORD *v5;
  char v6;
  char v7;
  _QWORD *result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v4 = 0;
  v5 = (_DWORD *)(a1 + 28652);
  v6 = 1;
  do
  {
    v7 = v6;
    result = glePushMaterial(a1, v4);
    result[6] = *a2;
    result[7] = a2[1];
    *((_WORD *)result + 248) |= 0x202u;
    v9 = *(_QWORD *)(a1 + 19248);
    if (v9)
    {
      v10 = *(unsigned __int16 *)(v9 + 12 * v4 + 2822);
      if (v10 <= 0x3FF)
      {
        *(_DWORD *)(a1 + ((v10 >> 3) & 0x1FFC) + 1552) |= 1 << v10;
        *v5 = 0;
        *(_DWORD *)(a1 + 1532) |= 0x800000u;
      }
    }
    v11 = *(_QWORD *)(a1 + 19272);
    if (v11)
    {
      v12 = *(unsigned __int16 *)(v11 + 12 * v4 + 2822);
      if (v12 <= 0x3FF)
      {
        *(_DWORD *)(a1 + ((v12 >> 3) & 0x1FFC) + 1936) |= 1 << v12;
        *v5 = 0;
        *(_DWORD *)(a1 + 1532) |= 0x4000000u;
      }
    }
    v13 = *(_QWORD *)(a1 + 19280);
    if (v13)
    {
      v14 = *(unsigned __int16 *)(v13 + 12 * v4 + 2822);
      if (v14 <= 0x3FF)
      {
        *(_DWORD *)(a1 + ((v14 >> 3) & 0x1FFC) + 2064) |= 1 << v14;
        *v5 = 0;
        *(_DWORD *)(a1 + 1532) |= 0x8000000u;
      }
    }
    v6 = 0;
    v4 = 1;
  }
  while ((v7 & 1) != 0);
  return result;
}

_QWORD *gleLightMaterialRGBAChange_FB_S(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  _DWORD *v5;
  char v6;
  char v7;
  _QWORD *result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v4 = 0;
  v5 = (_DWORD *)(a1 + 28652);
  v6 = 1;
  do
  {
    v7 = v6;
    result = glePushMaterial(a1, v4);
    result[4] = *a2;
    result[5] = a2[1];
    *((_WORD *)result + 248) |= 0x1010u;
    v9 = *(_QWORD *)(a1 + 19248);
    if (v9)
    {
      v10 = *(unsigned __int16 *)(v9 + 12 * v4 + 2820);
      if (v10 <= 0x3FF)
      {
        *(_DWORD *)(a1 + ((v10 >> 3) & 0x1FFC) + 1552) |= 1 << v10;
        *v5 = 0;
        *(_DWORD *)(a1 + 1532) |= 0x800000u;
      }
    }
    v11 = *(_QWORD *)(a1 + 19272);
    if (v11)
    {
      v12 = *(unsigned __int16 *)(v11 + 12 * v4 + 2820);
      if (v12 <= 0x3FF)
      {
        *(_DWORD *)(a1 + ((v12 >> 3) & 0x1FFC) + 1936) |= 1 << v12;
        *v5 = 0;
        *(_DWORD *)(a1 + 1532) |= 0x4000000u;
      }
    }
    v13 = *(_QWORD *)(a1 + 19280);
    if (v13)
    {
      v14 = *(unsigned __int16 *)(v13 + 12 * v4 + 2820);
      if (v14 <= 0x3FF)
      {
        *(_DWORD *)(a1 + ((v14 >> 3) & 0x1FFC) + 2064) |= 1 << v14;
        *v5 = 0;
        *(_DWORD *)(a1 + 1532) |= 0x8000000u;
      }
    }
    v6 = 0;
    v4 = 1;
  }
  while ((v7 & 1) != 0);
  return result;
}

float *gleLightMaterialShineChange_FB(uint64_t a1, float a2)
{
  uint64_t v4;
  _DWORD *v5;
  char v6;
  char v7;
  float *result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v4 = 0;
  v5 = (_DWORD *)(a1 + 28652);
  v6 = 1;
  do
  {
    v7 = v6;
    result = (float *)glePushMaterial(a1, v4);
    result[16] = a2;
    *((_WORD *)result + 248) |= 0x2020u;
    v9 = *(_QWORD *)(a1 + 19248);
    if (v9)
    {
      v10 = *(unsigned __int16 *)(v9 + 12 * v4 + 2824);
      if (v10 <= 0x3FF)
      {
        *(_DWORD *)(a1 + ((v10 >> 3) & 0x1FFC) + 1552) |= 1 << v10;
        *v5 = 0;
        *(_DWORD *)(a1 + 1532) |= 0x800000u;
      }
    }
    v11 = *(_QWORD *)(a1 + 19272);
    if (v11)
    {
      v12 = *(unsigned __int16 *)(v11 + 12 * v4 + 2824);
      if (v12 <= 0x3FF)
      {
        *(_DWORD *)(a1 + ((v12 >> 3) & 0x1FFC) + 1936) |= 1 << v12;
        *v5 = 0;
        *(_DWORD *)(a1 + 1532) |= 0x4000000u;
      }
    }
    v13 = *(_QWORD *)(a1 + 19280);
    if (v13)
    {
      v14 = *(unsigned __int16 *)(v13 + 12 * v4 + 2824);
      if (v14 <= 0x3FF)
      {
        *(_DWORD *)(a1 + ((v14 >> 3) & 0x1FFC) + 2064) |= 1 << v14;
        *v5 = 0;
        *(_DWORD *)(a1 + 1532) |= 0x8000000u;
      }
    }
    v6 = 0;
    v4 = 1;
  }
  while ((v7 & 1) != 0);
  return result;
}

uint64_t gleCullPolygonPtrStack(uint64_t a1, uint64_t *a2, int a3, _DWORD *a4, float *a5)
{
  uint64_t v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  uint64_t *v11;
  uint64_t v12;
  float v13;
  float v14;
  uint64_t v15;
  float v16;
  int v17;
  int v18;
  uint64_t result;
  unsigned __int16 *v20;
  int v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float **v27;
  uint64_t v28;
  float v29;
  float v30;
  float v31;
  float *v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;

  v5 = *a2;
  v7 = *(float *)(*a2 + 64);
  v6 = *(float *)(*a2 + 68);
  v8 = 0.0;
  v9 = v7;
  v10 = v6;
  if (a3 >= 2)
  {
    v11 = a2 + 1;
    v12 = a3 - 1;
    v13 = *(float *)(*a2 + 68);
    v14 = *(float *)(*a2 + 64);
    do
    {
      v15 = *v11++;
      v9 = *(float *)(v15 + 64);
      v10 = *(float *)(v15 + 68);
      v8 = v8 + (float)((float)(v14 * v10) - (float)(v9 * v13));
      v13 = v10;
      v14 = v9;
      --v12;
    }
    while (v12);
  }
  v16 = v8 + (float)((float)(v9 * v6) - (float)(v7 * v10));
  v17 = *(unsigned __int8 *)(a1 + 28748);
  v18 = v16 > 0.0;
  if (*(_BYTE *)(a1 + 28750) == (v17 == v18))
    return 1;
  *a4 = v17 != v18;
  if (!a5)
    return 0;
  v20 = (unsigned __int16 *)(a1 + 15526);
  if (v17 == v18)
    v20 = (unsigned __int16 *)(a1 + 15524);
  v21 = *v20;
  v22 = 0.0;
  if (v21 != 6913)
  {
    if (v21 != 6912 || !*(_BYTE *)(a1 + 15535))
      goto LABEL_26;
LABEL_15:
    if (v16 == 0.0)
    {
      v36 = 0.0;
      v37 = 0.0;
    }
    else
    {
      v23 = -v7;
      v24 = *(float *)(v5 + 72);
      v25 = 0.0;
      v26 = 1.0 / v16;
      if (a3 < 2)
      {
        v34 = v7;
        v33 = v6;
        v29 = 0.0;
        v35 = *(float *)(v5 + 72);
      }
      else
      {
        v27 = (float **)(a2 + 1);
        v28 = a3 - 1;
        v29 = 0.0;
        v30 = v24;
        v31 = v6;
        do
        {
          v32 = *v27++;
          v34 = v32[16];
          v33 = v32[17];
          v35 = v32[18];
          v25 = v25 + (float)((float)(v7 * v35) - (float)(v34 * v30));
          v29 = v29 + (float)((float)(v31 * v35) - (float)(v33 * v30));
          v30 = v35;
          v31 = v33;
          v7 = v34;
          --v28;
        }
        while (v28);
      }
      v38 = v26 * (float)(v25 + (float)((float)(v35 * v23) + (float)(v34 * v24)));
      v39 = v26 * (float)(v29 + (float)((float)(v33 * v24) - (float)(v6 * v35)));
      v36 = fabsf(v38);
      v37 = fabsf(v39);
    }
    if (v36 <= v37)
      v36 = v37;
    v22 = (float)(*(float *)(a1 + 15520) * *(float *)(*(_QWORD *)(a1 + 29032) + 140))
        + (float)((float)(*(float *)(a1 + 15516) * v36) * *(float *)(*(_QWORD *)(a1 + 29032) + 136));
    goto LABEL_26;
  }
  if (*(_BYTE *)(a1 + 15536))
    goto LABEL_15;
LABEL_26:
  result = 0;
  *a5 = v22;
  return result;
}

uint64_t glCompressedTexImage2D_Exec(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, unsigned int a6, int a7, int a8, uint64_t a9)
{
  uint64_t v12;
  unsigned int v13;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  unsigned int v19;
  _BOOL4 v20;
  BOOL v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  __int16 v26;
  __int16 v27;
  uint64_t v28;
  signed int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  _BOOL4 v52;
  unsigned int v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _WORD *v62;
  _WORD *v63;
  int v64;
  unsigned int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  _BOOL4 v73;
  unsigned int v74;
  uint64_t v75;
  unint64_t v76;

  LODWORD(v12) = a5;
  v13 = a4;
  v16 = a1;
  v69 = a1 + 28652;
  v17 = a1 + 18518;
  result = gleSRGBToFormat(a4);
  v68 = a9;
  if (!a9 && *(_BYTE *)v17)
  {
    if (!*(_WORD *)(v69 + 1180))
    {
      v26 = 1281;
LABEL_17:
      *(_WORD *)(v69 + 1180) = v26;
      return result;
    }
    return result;
  }
  v76 = 0;
  v67 = v16 + 32493;
  v19 = *(_WORD *)(v16 + 32493) & 0x10;
  v20 = v13 == 33776;
  v21 = (v20 & (v19 >> 4)) == 0;
  if ((v20 & (v19 >> 4)) != 0)
    v22 = 33777;
  else
    v22 = result;
  v74 = v22;
  if (v21)
    v23 = v13;
  else
    v23 = 33777;
  v70 = a3;
  v65 = v23;
  v66 = a6;
  result = gleCheckCompressedTexImage2DArgs(v16, a2, a3, v23, v12, a6, a7, a8, &v76);
  if (!result)
    return result;
  v24 = result;
  if (*(_BYTE *)(result + 770))
    return result;
  v25 = *(_QWORD *)(v16 + 19336);
  if (v25)
  {
    result = gleHandleUnpackBufferInEngineNoSync(v16, *(_QWORD *)(v16 + 19336), a9 + a8, 1, a9);
    v68 = result;
    if (!result)
      return result;
  }
  if (*(_BYTE *)(v16 + 32503))
    result = mach_absolute_time();
  else
    result = 0;
  v27 = *(_WORD *)(v24 + 768);
  if ((v27 & 0x1C00) == 0x1000)
    goto LABEL_25;
  if ((*(_WORD *)(v24 + 768) & 0x1C00) == 0)
  {
    *(_WORD *)(v24 + 768) = v27 | 0x1000;
    goto LABEL_25;
  }
  if ((*(_WORD *)(v24 + 768) & 0xC00) == 0)
  {
LABEL_25:
    v61 = result;
    if (a6)
      v12 = v12;
    else
      v12 = 0;
    if ((a2 - 34069) >= 6)
      v28 = 0;
    else
      v28 = (a2 - 34069);
    v29 = v65 - 35728;
    if (v65 - 35728 <= 9)
    {
      v30 = dword_21B9A4210[v29];
      v72 = dword_21B9A4238[v29];
      v75 = v16;
      if (v25 && *(_QWORD *)(v25 + 192))
      {
        v31 = v16;
        v32 = v28;
        gleSynchronizeBufferOnCurrentDevicesForRead(v31, v25 + 40);
        v28 = v32;
        v16 = v75;
      }
      v33 = 0;
      v34 = 0;
      v71 = -(int)v70;
      v35 = v24 + 2 * v28;
      v62 = (_WORD *)(v35 + 996);
      v63 = (_WORD *)(v35 + 984);
      v64 = v12;
      v36 = v12;
      v37 = a6;
      do
      {
        v38 = v33;
        v39 = v24 + 480 * v28 + 32 * v33 + 1032;
        LOWORD(v59) = 256;
        v40 = v16;
        v41 = v28;
        v42 = gleEvaluateTextureImageChange(v40, v24, v39, v28, v33, v36, v37, 1, 0, v30, v30, v72, v59, v68);
        if (v36 && v68 && (*(_WORD *)(v24 + 768) & 0x100) == 0)
        {
          if (gfxAllocateTextureLevel())
          {
            gleCompressedPalettedTextureImagePut(v75, v24, v39, v38, v64, v66, v65, v68);
            v28 = v41;
            v43 = v24 + 480 * v41 + 32 * v38;
            *(_DWORD *)(v24 + 968) = *(_DWORD *)(v43 + 1048);
            *(_BYTE *)(v43 + 1043) |= 0x10u;
            *v62 |= *v63 & (unsigned __int16)(1 << v38);
            v44 = v24 + 24 * *(unsigned __int8 *)(v67 + 6);
            *(_BYTE *)(v44 + 116) |= 4u;
            *(_WORD *)(v44 + 2 * v41 + 104) |= 1 << v38;
          }
          else
          {
            v28 = v41;
            if (!*(_WORD *)(v69 + 1180))
              *(_WORD *)(v69 + 1180) = 1285;
          }
        }
        else
        {
          *(_DWORD *)(v24 + 968) = 65538;
          v28 = v41;
        }
        v34 |= v42;
        v36 >>= v36 > 1;
        v37 >>= v37 > 1;
        v33 = v38 + 1;
        v16 = v75;
      }
      while ((int)v38 + 1 <= v71);
      v55 = v34 < 0;
      goto LABEL_78;
    }
    if (a6)
      v45 = a7;
    else
      v45 = 0;
    v46 = v24 + 480 * v28 + 32 * (int)v70 + 1032;
    LOWORD(v59) = 256;
    v47 = v28;
    v48 = gleEvaluateTextureImageChange(v16, v24, v46, v28, v70, v12, a6, 1, v45, v65, v74, 0, v59, v68);
    if (!(_DWORD)v12)
      goto LABEL_75;
    v49 = v47;
    if (v68
      && (*(_WORD *)(v24 + 768) & 0x100) == 0
      && *(_BYTE *)(*(_QWORD *)(v16 + 29032) + 174)
      && *(unsigned __int8 *)(v24 + 976) <= (int)v70
      && *(unsigned __int8 *)(v24 + 978) >= (int)v70
      && ((*(unsigned __int16 *)(v24 + 2 * v47 + 984) >> v70) & 1) != 0)
    {
      v50 = *(_QWORD *)(v16 + 8 * *(unsigned __int16 *)(v17 + 5250) + 23936);
      if (v50)
        v51 = (_BYTE *)(v50 + 198);
      else
        v51 = (_BYTE *)(v24 + 926);
      v52 = (*v51 & 1) == 0;
      v53 = v74;
      *(_DWORD *)(v24 + 968) = (unsigned __int16)v74;
      if (v25)
      {
        v73 = v52;
        result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, _QWORD, uint64_t, _DWORD, _QWORD, _BOOL4))(*(_QWORD *)(v16 + 29448) + 368))(*(_QWORD *)(v16 + 29016), *(_QWORD *)(v24 + 8 * *(unsigned __int8 *)(v16 + 32499)), v47, v70, 0, 0, 0, v12, a6 | 0x100000000, v74, v68, 0, *(_QWORD *)(v25 + 40 + 8 * *(unsigned __int8 *)(v16 + 32499)), v52);
        v49 = v47;
        if ((_DWORD)result)
        {
LABEL_64:
          *(_QWORD *)(v24 + 536) = *(_QWORD *)(v16 + 29024);
          v54 = v24 + 480 * v49 + 32 * (int)v70;
          *(_BYTE *)(v54 + 1043) |= 0x40u;
LABEL_76:
          if ((v48 & 0xC0000001) == 0)
          {
            if ((_DWORD)result == 1)
            {
LABEL_83:
              if (*(_BYTE *)(v67 + 10))
              {
                result = mach_absolute_time();
                *(_QWORD *)(v16 + 19168) += result - v61;
              }
              return result;
            }
LABEL_82:
            result = gleDirtyTextureObjectCurrentBindPointsNoFBO(v16, v24);
            goto LABEL_83;
          }
          v55 = v48 < 0;
LABEL_78:
          if (v55)
            v58 = 134356992;
          else
            v58 = 139264;
          *(_DWORD *)v69 = 0;
          *(_DWORD *)(v16 + 1548) |= v58;
          goto LABEL_82;
        }
        v53 = v74;
        v52 = v73;
        if (*(_QWORD *)(v25 + 192))
        {
          gleSynchronizeBufferOnCurrentDevicesForRead(v16, v25 + 40);
          v52 = v73;
          v53 = v74;
          v49 = v47;
        }
      }
      result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, _QWORD, uint64_t, _DWORD, _QWORD, _BOOL4))(*(_QWORD *)(v16 + 29448) + 368))(*(_QWORD *)(v16 + 29016), *(_QWORD *)(v24 + 8 * *(unsigned __int8 *)(v16 + 32499)), v49, v70, 0, 0, 0, v12, a6 | 0x100000000, v53, v68, 0, 0, v52);
      LODWORD(v49) = v47;
      if ((_DWORD)result)
        goto LABEL_64;
    }
    else
    {
      if (v25 && *(_QWORD *)(v25 + 192))
      {
        gleSynchronizeBufferOnCurrentDevicesForRead(v16, v25 + 40);
        LODWORD(v49) = v47;
      }
      if (!v68)
        goto LABEL_73;
    }
    if ((*(_WORD *)(v24 + 768) & 0x100) == 0)
    {
      v56 = v24 + 480 * v49 + 32 * (int)v70;
      if ((*(_BYTE *)(v56 + 1043) & 1) != 0 || gfxAllocateTextureLevel())
      {
        LOBYTE(v60) = 0;
        gleTextureImagePut((_DWORD *)v16, v24, v46, 0, 0, 0, v12, a6, 1, v76, v60, 0, v68);
        result = 0;
        *(_BYTE *)(v56 + 1043) |= 0x10u;
        *(_DWORD *)(v24 + 968) = *(_DWORD *)(v24 + 480 * v47 + 32 * (int)v70 + 1048);
        *(_WORD *)(v24 + 2 * v47 + 996) |= *(_WORD *)(v24 + 2 * v47 + 984) & (unsigned __int16)(1 << v70);
        v57 = v24 + 24 * *(unsigned __int8 *)(v16 + 32499);
        *(_BYTE *)(v57 + 116) |= 4u;
        *(_WORD *)(v57 + 2 * v47 + 104) |= 1 << v70;
        goto LABEL_76;
      }
      if (!*(_WORD *)(v69 + 1180))
      {
        result = 0;
        *(_WORD *)(v69 + 1180) = 1285;
        goto LABEL_76;
      }
LABEL_75:
      result = 0;
      goto LABEL_76;
    }
LABEL_73:
    result = 0;
    *(_DWORD *)(v24 + 968) = 65538;
    goto LABEL_76;
  }
  if (!*(_WORD *)(v69 + 1180))
  {
    v26 = 1282;
    goto LABEL_17;
  }
  return result;
}

uint64_t gleCheckCompressedTexImage2DArgs(uint64_t a1, int a2, int a3, unsigned int a4, int a5, int a6, int a7, int a8, unint64_t *a9)
{
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int8x8_t v19;
  int v20;
  unsigned int v21;
  uint64_t result;
  __int16 v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  int v27;

  v16 = a1 + 29832;
  v17 = gleLookUpTexture2D(a1, a2);
  v18 = glePixelStorageFromCompressedFormat(a1, a4);
  *a9 = v18;
  if (v17)
  {
    if (!*(_BYTE *)(v17 + 559))
    {
      v20 = a5 - 2 * a7;
      v21 = a6 - 2 * a7;
      switch(*(_WORD *)(v17 + 768) & 0xF)
      {
        case 0:
          if (a5 == a6 && v20 <= *(unsigned __int16 *)(*(_QWORD *)(a1 + 29032) + 168))
            goto LABEL_8;
          goto LABEL_27;
        case 2:
        case 6:
          goto LABEL_4;
        case 3:
LABEL_8:
          if ((v20 & 0x80000000) == 0)
          {
            if ((v20 & (v20 - 1)) == 0
              || (v24 = *(unsigned __int8 *)(v16 + 2669), v24 == 4)
              || !a3 && (v24 == 3 || (*(_BYTE *)(*(_QWORD *)(a1 + 29032) + 578) & 0x10) != 0))
            {
              v25 = *(_QWORD *)(a1 + 29032);
              v26 = *(unsigned __int16 *)(v25 + 160);
              if (v20 <= v26 && (v21 & 0x80000000) == 0)
              {
                if ((v21 & (v21 - 1)) == 0
                  || (v27 = *(unsigned __int8 *)(v16 + 2669), v27 == 4)
                  || !a3 && (v27 == 3 || (*(_BYTE *)(v25 + 578) & 0x10) != 0))
                {
                  if (v21 <= v26)
                    goto LABEL_16;
                }
              }
            }
          }
LABEL_27:
          if (*(_WORD *)v16)
            return 0;
          result = 0;
          v23 = 1281;
          goto LABEL_30;
        default:
LABEL_16:
          if (a4 >> 2 == 8853
            && (*(_BYTE *)(v16 + 2669) == 2 || (*(_BYTE *)(*(_QWORD *)(a1 + 29032) + 577) & 1) == 0))
          {
            goto LABEL_4;
          }
          if (gleCheckCompressedTexImageArgs(a1, a3, a7, v20, v21, 1, a8, v18, v19))
            return v17;
          else
            return 0;
      }
    }
    if (!*(_WORD *)v16)
    {
      result = 0;
      v23 = 1282;
      goto LABEL_30;
    }
    return 0;
  }
LABEL_4:
  if (*(_WORD *)v16)
    return 0;
  result = 0;
  v23 = 1280;
LABEL_30:
  *(_WORD *)v16 = v23;
  return result;
}

uint64_t gleCheckCompressedTexImageArgs(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, unint64_t a8, int8x8_t a9)
{
  unsigned int v9;
  int v10;
  int v11;
  char v12;
  int v13;
  int v14;
  uint8x8_t v15;
  __int16 *v16;
  uint64_t result;
  __int16 v18;
  int v19;
  int v20;

  if ((a8 & 0x800000000000000) == 0)
  {
    v16 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832))
      return 0;
    result = 0;
    if ((a8 & 0x4000000000000000) != 0)
      v18 = 1282;
    else
      v18 = 1280;
    goto LABEL_37;
  }
  v9 = (a8 >> 6) & 0xF;
  if (v9 - 11 >= 2)
  {
    if (v9 == 4)
    {
      v10 = 4;
    }
    else
    {
      if (v9 != 5)
      {
        v11 = 0;
        v10 = 0;
        goto LABEL_10;
      }
      v10 = 8;
    }
    v11 = (((a8 >> 37) & 3) + 1 + (((a8 >> 37) & 3) + 1) * (BYTE4(a8) & 0x1F)) << v10;
LABEL_10:
    v12 = 1;
    goto LABEL_11;
  }
  v11 = 0;
  v10 = 0;
  v12 = 0;
LABEL_11:
  if (a3)
    goto LABEL_38;
  if (v11)
  {
    if ((a2 - 1) < 0xFFFFFFF1)
    {
LABEL_34:
      v16 = (__int16 *)(a1 + 29832);
      if (*(_WORD *)(a1 + 29832))
        return 0;
      result = 0;
      v18 = 1281;
      goto LABEL_37;
    }
    v13 = 0;
    v14 = 1 - a2;
    if (1 - a2 <= 1)
      v14 = 1;
    while (a4 != 1 || a5 != 1)
    {
      v13 += (a5 * v10 * a4) >> 3;
      a4 = a4 >> (a4 > 1);
      a5 = a5 >> (a5 > 1);
      ++a2;
      if (!--v14)
        goto LABEL_30;
    }
    if (a2)
      goto LABEL_34;
    ++v13;
LABEL_30:
    v19 = v13 + v11;
LABEL_32:
    if (v19 == a7)
      return 1;
    goto LABEL_34;
  }
  if ((v12 & 1) == 0)
  {
    if (a4 != a5 || (a9.i32[0] = a4, v15 = (uint8x8_t)vcnt_s8(a9), v15.i16[0] = vaddlv_u8(v15), v15.i32[0] >= 2u))
    {
LABEL_38:
      v16 = (__int16 *)(a1 + 29832);
      if (*(_WORD *)(a1 + 29832))
        return 0;
      result = 0;
      v18 = 1282;
      goto LABEL_37;
    }
  }
  if ((a8 & 0x1CF800000000000) != 0x9800000000000
    && (v9 != 14 || (*(_BYTE *)(*(_QWORD *)(a1 + 29032) + 576) & 0x20) != 0))
  {
    v20 = a6 + a6 * ((a8 >> 37) & 3);
    v19 = (v20 + v20 * (BYTE4(a8) & 0x1F))
        * ((int)(((a8 >> 39) & 0xF) + a4)
         / (int)(((a8 >> 39) & 0xF) + 1))
        * ((int)(((a8 >> 43) & 0xF) + a5)
         / (int)(((a8 >> 43) & 0xF) + 1));
    goto LABEL_32;
  }
  v16 = (__int16 *)(a1 + 29832);
  if (*(_WORD *)(a1 + 29832))
    return 0;
  result = 0;
  v18 = 1280;
LABEL_37:
  *v16 = v18;
  return result;
}

int8x8_t glMultMatrixf_Exec(uint64_t a1, float32x2_t *a2)
{
  uint64_t v3;
  int8x8_t *v4;
  uint64_t v5;
  int8x8_t result;
  float32x4_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 20484;
  if (*(int *)(a1 + 20484) < 24)
  {
    v4 = (int8x8_t *)(a1 + 1540);
    v9 = 0u;
    v10 = 0u;
    v7 = 0u;
    v8 = 0u;
    gleMultMatrixf(*(float32x4_t **)(a1 + 19976), a2, &v7);
    v5 = *(_QWORD *)(a1 + 19976);
    *(float32x4_t *)v5 = v7;
    *(_OWORD *)(v5 + 16) = v8;
    *(_OWORD *)(v5 + 32) = v9;
    *(_OWORD *)(v5 + 48) = v10;
    LODWORD(v5) = *(_DWORD *)(v3 + 4);
    *(_DWORD *)(a1 + 1528) |= v5;
    *(_DWORD *)(v3 + 8168) = 0;
    result = vorr_s8(*v4, (int8x8_t)vdup_n_s32(v5));
    *v4 = result;
  }
  else if (!*(_WORD *)(a1 + 29832))
  {
    *(_WORD *)(a1 + 29832) = 1282;
  }
  return result;
}

__n128 gleMultMatrixf(float32x4_t *a1, float32x2_t *a2, float32x4_t *a3)
{
  __n128 result;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;

  result = *(__n128 *)a2->f32;
  v4 = a1[1];
  v5 = a1[2];
  v6 = a1[3];
  v7 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*a1, COERCE_FLOAT(*(_OWORD *)a2[2].f32)), v4, a2[2], 1), v5, *(float32x4_t *)a2[2].f32, 2), v6, *(float32x4_t *)a2[2].f32, 3);
  v8 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*a1, COERCE_FLOAT(*(_OWORD *)a2[4].f32)), v4, a2[4], 1), v5, *(float32x4_t *)a2[4].f32, 2), v6, *(float32x4_t *)a2[4].f32, 3);
  v9 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*a1, COERCE_FLOAT(*(_OWORD *)a2[6].f32)), v4, a2[6], 1), v5, *(float32x4_t *)a2[6].f32, 2), v6, *(float32x4_t *)a2[6].f32, 3);
  *a3 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*a1, COERCE_FLOAT(*(_OWORD *)a2->f32)), v4, *a2, 1), v5, *(float32x4_t *)a2->f32, 2), v6, *(float32x4_t *)a2->f32, 3);
  a3[1] = v7;
  a3[2] = v8;
  a3[3] = v9;
  return result;
}

_QWORD *gleLightMaterialRGBAChange_F_A(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;

  result = glePushMaterial(a1, 0);
  *result = *a2;
  result[1] = a2[1];
  *((_WORD *)result + 248) |= 0x404u;
  v5 = *(_QWORD *)(a1 + 19248);
  if (v5)
  {
    v6 = *(unsigned __int16 *)(v5 + 2816);
    if (v6 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v6 >> 3) & 0x1FFC) + 1552) |= 1 << v6;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x800000u;
    }
  }
  v7 = *(_QWORD *)(a1 + 19272);
  if (v7)
  {
    v8 = *(unsigned __int16 *)(v7 + 2816);
    if (v8 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v8 >> 3) & 0x1FFC) + 1936) |= 1 << v8;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x4000000u;
    }
  }
  v9 = *(_QWORD *)(a1 + 19280);
  if (v9)
  {
    v10 = *(unsigned __int16 *)(v9 + 2816);
    if (v10 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v10 >> 3) & 0x1FFC) + 2064) |= 1 << v10;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x8000000u;
    }
  }
  return result;
}

_QWORD *gleLightMaterialRGBAChange_F_D(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;

  result = glePushMaterial(a1, 0);
  result[2] = *a2;
  result[3] = a2[1];
  *((_WORD *)result + 248) |= 0x808u;
  v5 = *(_QWORD *)(a1 + 19248);
  if (v5)
  {
    v6 = *(unsigned __int16 *)(v5 + 2818);
    if (v6 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v6 >> 3) & 0x1FFC) + 1552) |= 1 << v6;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x800000u;
    }
  }
  v7 = *(_QWORD *)(a1 + 19272);
  if (v7)
  {
    v8 = *(unsigned __int16 *)(v7 + 2818);
    if (v8 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v8 >> 3) & 0x1FFC) + 1936) |= 1 << v8;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x4000000u;
    }
  }
  v9 = *(_QWORD *)(a1 + 19280);
  if (v9)
  {
    v10 = *(unsigned __int16 *)(v9 + 2818);
    if (v10 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v10 >> 3) & 0x1FFC) + 2064) |= 1 << v10;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x8000000u;
    }
  }
  return result;
}

uint64_t glGetPointerv_Exec(uint64_t result, int a2, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = *(_QWORD **)(result + 26384);
  if (a2 <= 34475)
  {
    switch(a2)
    {
      case 32910:
        v4 = v3[17];
        goto LABEL_16;
      case 32911:
        v4 = v3[20];
        goto LABEL_16;
      case 32912:
        v4 = v3[23];
        goto LABEL_16;
      case 32914:
        v4 = v3[3 * *(unsigned __int16 *)(result + 23770) + 41];
        goto LABEL_16;
      default:
        goto LABEL_17;
    }
  }
  if (a2 > 35211)
  {
    if (a2 == 35212)
    {
      v4 = v3[35];
      goto LABEL_16;
    }
    if (a2 == 35342)
    {
      v4 = v3[117];
      goto LABEL_16;
    }
  }
  else
  {
    if (a2 == 34476)
    {
      v4 = v3[29];
      goto LABEL_16;
    }
    if (a2 == 34889)
    {
      v4 = v3[38];
LABEL_16:
      *a3 = v4;
      return result;
    }
  }
LABEL_17:
  if (!*(_WORD *)(result + 29832))
    *(_WORD *)(result + 29832) = 1280;
  return result;
}

_QWORD *glActiveTexture_Comp(uint64_t a1, int a2)
{
  _QWORD *result;

  result = gleAddCommand(a1, (uint64_t)glActiveTexture_ListExec, 4);
  *(_DWORD *)result = a2;
  return result;
}

uint64_t glActiveTexture_ListExec(uint64_t a1, int *a2)
{
  glActiveTexture_Exec(a1, *a2);
  return 4;
}

_QWORD *glClientActiveTexture_PackThread(_QWORD *result, int a2)
{
  _DWORD *v2;
  int v4;

  v2 = (_DWORD *)result + 6645;
  if ((a2 - 33992) > 0xFFFFFFF7)
  {
    v4 = a2 - 33984;
    result = gleAddCommand((uint64_t)result, (uint64_t)glClientActiveTexture_UnpackThread, 4);
    *(_DWORD *)result = a2;
    *v2 = v4;
  }
  else if (!*((_WORD *)result + 14916))
  {
    *((_WORD *)result + 14916) = 1280;
  }
  return result;
}

uint64_t glClientActiveTexture_UnpackThread(uint64_t a1, _WORD *a2)
{
  if ((*(_DWORD *)a2 - 33984) < 8)
  {
    *(_WORD *)(a1 + 23770) = *a2 + 31552;
  }
  else if (!*(_WORD *)(a1 + 29832))
  {
    *(_WORD *)(a1 + 29832) = 1280;
  }
  return 4;
}

float *glAlphaFunc_Comp(uint64_t a1, int a2, float a3)
{
  float *result;

  result = (float *)gleAddCommand(a1, (uint64_t)glAlphaFunc_ListExec, 8);
  *(_DWORD *)result = a2;
  result[1] = a3;
  return result;
}

uint64_t glAlphaFunc_ListExec(uint64_t a1, int *a2, double a3, double a4, double a5)
{
  LODWORD(a3) = a2[1];
  glAlphaFunc_Exec(a1, *a2, a3, a4, a5);
  return 8;
}

uint64_t glAlphaFuncx_Exec(uint64_t a1, int a2, int a3, double a4, double a5, double a6)
{
  LODWORD(a5) = 931135488;
  *(float *)&a4 = (float)a3 * 0.000015259;
  return glAlphaFunc_Exec(a1, a2, a4, a5, a6);
}

float *glAlphaFuncx_PackThread(uint64_t a1, int a2, int a3)
{
  float v4;
  float *result;

  v4 = (float)a3 * 0.000015259;
  result = (float *)gleAddCommand(a1, (uint64_t)glAlphaFunc_ListExec, 8);
  *(_DWORD *)result = a2;
  result[1] = v4;
  return result;
}

_DWORD *glBlendFunc_Comp(uint64_t a1, int a2, int a3)
{
  _DWORD *result;

  result = gleAddCommand(a1, (uint64_t)glBlendFunc_ListExec, 8);
  *result = a2;
  result[1] = a3;
  return result;
}

uint64_t glBlendFunc_ListExec(uint64_t a1, unsigned int *a2)
{
  glBlendFunc_Exec(a1, *a2, a2[1]);
  return 8;
}

float *glBlendColor_Comp(uint64_t a1, float a2, float a3, float a4, float a5)
{
  float *result;

  result = (float *)gleAddCommand(a1, (uint64_t)glBlendColor_ListExec, 16);
  *result = a2;
  result[1] = a3;
  result[2] = a4;
  result[3] = a5;
  return result;
}

uint64_t glBlendColor_ListExec(uint64_t a1, uint64_t a2, double a3, double a4, double a5)
{
  LODWORD(a3) = *(_DWORD *)a2;
  LODWORD(a4) = *(_DWORD *)(a2 + 4);
  LODWORD(a5) = *(_DWORD *)(a2 + 8);
  glBlendColor_Exec(a1, a3, a4, a5, *(float *)(a2 + 12));
  return 16;
}

uint64_t glBlendColor_Exec(uint64_t result, double a2, double a3, double a4, float a5)
{
  float v6;
  float v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  float v12;

  v6 = *(float *)&a4;
  v7 = *(float *)&a3;
  v8 = *(float *)&a2;
  v9 = result;
  v10 = result + 29688;
  LODWORD(a2) = *(_DWORD *)(result + 29688);
  if (*(float *)&a2 != v8
    || (LODWORD(a2) = *(_DWORD *)(result + 29692), *(float *)&a2 != *(float *)&a3)
    || (LODWORD(a2) = *(_DWORD *)(result + 29696), *(float *)&a2 != *(float *)&a4)
    || (LODWORD(a2) = *(_DWORD *)(result + 29700), *(float *)&a2 != a5))
  {
    if ((*(_BYTE *)(result + 29803) & 0x10) != 0)
      result = gleUpdateAnyDrawBuffersFloat(result, a2, a3, a4);
    *(float *)v10 = v8;
    *(float *)(v10 + 4) = v7;
    *(float *)(v10 + 8) = v6;
    *(float *)(v10 + 12) = a5;
    if (*(_BYTE *)(v10 + 2800) || (*(_BYTE *)(*(_QWORD *)(v9 + 29032) + 561) & 0x40) != 0)
    {
      *(_OWORD *)(v9 + 15104) = *(_OWORD *)v10;
    }
    else
    {
      v11 = *(float *)(v9 + 288);
      v12 = *(float *)(v9 + 292);
      *(float *)(v9 + 15104) = fminf(fmaxf(v8, v11), v12);
      *(float *)(v9 + 15108) = fminf(fmaxf(v7, v11), v12);
      *(float *)(v9 + 15112) = fminf(fmaxf(v6, v11), v12);
      *(float *)(v9 + 15116) = fminf(fmaxf(a5, v11), v12);
    }
    *(_DWORD *)(v9 + 28652) = 0;
    *(_DWORD *)(v9 + 1520) |= 4u;
  }
  return result;
}

_QWORD *glBlendEquation_Comp(uint64_t a1, int a2)
{
  _QWORD *result;

  result = gleAddCommand(a1, (uint64_t)glBlendEquation_ListExec, 4);
  *(_DWORD *)result = a2;
  return result;
}

uint64_t glBlendEquation_ListExec(uint64_t a1, int *a2)
{
  glBlendEquation_Exec(a1, *a2);
  return 4;
}

uint64_t glBlendEquation_Exec(uint64_t result, int a2)
{
  unint64_t v2;
  int v3;
  int *v4;
  int v5;
  int v6;
  uint64_t i;

  if ((a2 - 32774) < 3
    || (a2 - 32778) < 2
    || (a2 - 34685) < 2
    || a2 == 35445 && (*(_BYTE *)(*(_QWORD *)(result + 29032) + 578) & 4) != 0)
  {
    v2 = 0;
    v3 = a2 | (a2 << 16);
    v4 = (int *)(result + 15016);
    do
    {
      v6 = *v4;
      v4 += 3;
      v5 = v6;
    }
    while (v6 == v3 && v2++ < 7);
    if (v5 != v3)
    {
      for (i = 0; i != 96; i += 12)
        *(_DWORD *)(result + 15016 + i) = v3;
      *(_BYTE *)(result + 15121) &= ~2u;
      *(_DWORD *)(result + 1520) |= 2u;
      *(_DWORD *)(result + 28652) = 0;
      *(_DWORD *)(result + 1548) |= 0x40000u;
    }
  }
  else if (!*(_WORD *)(result + 29832))
  {
    *(_WORD *)(result + 29832) = 1280;
  }
  return result;
}

_DWORD *glBlendFuncSeparate_Comp(uint64_t a1, int a2, int a3, int a4, int a5)
{
  _DWORD *result;

  result = gleAddCommand(a1, (uint64_t)glBlendFuncSeparate_ListExec, 16);
  *result = a2;
  result[1] = a3;
  result[2] = a4;
  result[3] = a5;
  return result;
}

uint64_t glBlendFuncSeparate_ListExec(uint64_t a1, int *a2)
{
  glBlendFuncSeparate_Exec(a1, *a2, a2[1], a2[2], a2[3]);
  return 16;
}

uint64_t glBlendFuncSeparate_Exec(uint64_t result, int a2, int a3, int a4, int a5)
{
  _DWORD *v5;
  int v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;

  v5 = (_DWORD *)(result + 28652);
  v6 = *(_DWORD *)(result + 29812);
  v7 = v6 & 0xFFFFFF00;
  if (a2 < 2)
    goto LABEL_2;
  if (a2 <= 0x8000)
  {
    if ((a2 - 770) < 7)
      goto LABEL_2;
    if ((a2 - 768) >= 2)
      goto LABEL_57;
    goto LABEL_50;
  }
  if ((a2 - 32769) < 4)
  {
LABEL_50:
    if (*(_BYTE *)(result + 32501) == 2)
      goto LABEL_57;
    goto LABEL_2;
  }
  if ((a2 - 35065) >= 3 && a2 != 34185)
    goto LABEL_57;
  v7 = v6 | 0xFF;
LABEL_2:
  if (a3 < 2)
    goto LABEL_3;
  if (a3 <= 0x8000)
  {
    if ((a3 - 768) > 8)
      goto LABEL_57;
    if (((1 << a3) & 0x13F) != 0)
      goto LABEL_3;
    goto LABEL_52;
  }
  if ((a3 - 32769) < 4)
  {
LABEL_52:
    if (*(_BYTE *)(result + 32501) == 2)
      goto LABEL_57;
    goto LABEL_3;
  }
  if ((a3 - 35065) >= 3 && a3 != 34185)
    goto LABEL_57;
  v7 |= 0xFFu;
LABEL_3:
  if (a4 < 2)
    goto LABEL_4;
  if (a4 <= 0x8000)
  {
    if ((a4 - 770) < 7)
      goto LABEL_4;
    if ((a4 - 768) >= 2)
      goto LABEL_57;
    goto LABEL_54;
  }
  if ((a4 - 32769) < 4)
  {
LABEL_54:
    if (*(_BYTE *)(result + 32501) == 2)
      goto LABEL_57;
    goto LABEL_4;
  }
  if ((a4 - 35065) >= 3 && a4 != 34185)
    goto LABEL_57;
  v7 |= 0xFFu;
LABEL_4:
  if (a5 < 2)
  {
LABEL_5:
    if (v6 != v7)
    {
      *(_DWORD *)(result + 29812) = v7;
      *v5 = 0;
      *(_DWORD *)(result + 1548) |= 0x80000u;
    }
    v8 = 0;
    v9 = a2 | ((unint64_t)a3 << 16) | ((unint64_t)a4 << 32) | ((unint64_t)a5 << 48);
    v10 = (uint64_t *)(result + 15008);
    do
    {
      v12 = *v10;
      v10 = (uint64_t *)((char *)v10 + 12);
      v11 = v12;
    }
    while (v12 == v9 && v8++ < 7);
    if (v11 != v9)
    {
      for (i = 0; i != 96; i += 12)
        *(_QWORD *)(result + 15008 + i) = v9;
      *(_BYTE *)(result + 15121) &= ~1u;
      *(_DWORD *)(result + 1520) |= 2u;
      *v5 = 0;
      *(_DWORD *)(result + 1548) |= 0x40000u;
    }
    return result;
  }
  if (a5 <= 0x8000)
  {
    if ((a5 - 768) > 8)
      goto LABEL_57;
    if (((1 << a5) & 0x13F) != 0)
      goto LABEL_5;
    goto LABEL_56;
  }
  if ((a5 - 32769) < 4)
  {
LABEL_56:
    if (*(_BYTE *)(result + 32501) != 2)
      goto LABEL_5;
    goto LABEL_57;
  }
  if ((a5 - 35065) < 3 || a5 == 34185)
  {
    v7 |= 0xFFu;
    goto LABEL_5;
  }
LABEL_57:
  if (!*(_WORD *)(result + 29832))
    *(_WORD *)(result + 29832) = 1280;
  return result;
}

_DWORD *glBlendEquationSeparateEXT_Comp(uint64_t a1, int a2, int a3)
{
  _DWORD *result;

  result = gleAddCommand(a1, (uint64_t)glBlendEquationSeparateEXT_ListExec, 8);
  *result = a2;
  result[1] = a3;
  return result;
}

uint64_t glBlendEquationSeparateEXT_ListExec(uint64_t a1, int *a2)
{
  glBlendEquationSeparateEXT_Exec(a1, *a2, a2[1]);
  return 8;
}

uint64_t glBlendEquationSeparateEXT_Exec(uint64_t result, int a2, int a3)
{
  unint64_t v3;
  int v4;
  int *v5;
  int v6;
  int v7;
  uint64_t i;

  if (((a2 - 32774) < 3
     || (a2 - 32778) < 2
     || (a2 - 34685) < 2
     || a2 == 35445 && (*(_BYTE *)(*(_QWORD *)(result + 29032) + 578) & 4) != 0)
    && ((a3 - 32774) < 3
     || (a3 - 32778) < 2
     || (a3 - 34685) < 2
     || a3 == 35445 && (*(_BYTE *)(*(_QWORD *)(result + 29032) + 578) & 4) != 0))
  {
    v3 = 0;
    v4 = a2 | (a3 << 16);
    v5 = (int *)(result + 15016);
    do
    {
      v7 = *v5;
      v5 += 3;
      v6 = v7;
    }
    while (v7 == v4 && v3++ < 7);
    if (v6 != v4)
    {
      for (i = 0; i != 96; i += 12)
        *(_DWORD *)(result + 15016 + i) = v4;
      *(_BYTE *)(result + 15121) &= ~2u;
      *(_DWORD *)(result + 1520) |= 2u;
      *(_DWORD *)(result + 28652) = 0;
      *(_DWORD *)(result + 1548) |= 0x40000u;
    }
  }
  else if (!*(_WORD *)(result + 29832))
  {
    *(_WORD *)(result + 29832) = 1280;
  }
  return result;
}

void glBindBuffer_Exec(uint64_t a1, int a2, unsigned int a3)
{
  _WORD *v6;

  if ((a2 - 34962) < 2)
    goto LABEL_2;
  v6 = (_WORD *)(a1 + 29832);
  if (a2 > 35981)
  {
    if ((a2 - 36662) >= 2 && a2 != 35982)
      goto LABEL_10;
  }
  else if ((a2 - 35051) >= 2 && a2 != 35345)
  {
    goto LABEL_10;
  }
  if ((*(_BYTE *)(a1 + 32501) & 0xFE) != 2)
  {
LABEL_2:
    os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    gleBindBufferObject(a1, a2, a3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    return;
  }
LABEL_10:
  if (!*v6)
    *v6 = 1280;
}

_QWORD *glBindBuffer_PackThread(_QWORD *a1, int a2, unsigned int a3)
{
  _WORD *v3;

  if ((a2 - 34962) < 2)
    return gleBindBufferObject_Thread(a1, a2, a3);
  v3 = a1 + 3729;
  if (a2 > 35981)
  {
    if ((a2 - 36662) >= 2 && a2 != 35982)
      goto LABEL_10;
  }
  else if ((a2 - 35051) >= 2 && a2 != 35345)
  {
    goto LABEL_10;
  }
  if ((*((_BYTE *)a1 + 32501) & 0xFE) != 2)
    return gleBindBufferObject_Thread(a1, a2, a3);
LABEL_10:
  if (!*v3)
    *v3 = 1280;
  return a1;
}

void glDeleteBuffers_Exec(uint64_t a1, unsigned int a2, uint64_t a3)
{
  _DWORD *v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  BOOL v28;
  unint64_t v29;
  unint64_t i;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  _BYTE *v62;
  BOOL v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v79;
  _DWORD *v80;

  v3 = (_DWORD *)(a1 + 28652);
  if ((a2 & 0x80000000) == 0)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    v67 = *(_QWORD **)(a1 + 26384);
    if (v67)
      v6 = v67 + 5;
    else
      v6 = 0;
    v7 = *(_QWORD *)(a1 + 19312);
    if (v7)
      v76 = *(_DWORD *)(v7 + 16);
    else
      v76 = 0;
    if (v67)
    {
      v8 = v67[154];
      if (v8)
      {
LABEL_10:
        v75 = *(_DWORD *)(v8 + 16);
        goto LABEL_13;
      }
    }
    else
    {
      v8 = *(_QWORD *)(a1 + 19320);
      if (v8)
        goto LABEL_10;
    }
    v75 = 0;
LABEL_13:
    v9 = *(_QWORD *)(a1 + 19328);
    if (v9)
      v74 = *(_DWORD *)(v9 + 16);
    else
      v74 = 0;
    v10 = *(_QWORD *)(a1 + 19336);
    if (v10)
      v73 = *(_DWORD *)(v10 + 16);
    else
      v73 = 0;
    v11 = *(_QWORD *)(a1 + 19352);
    if (v11)
      v72 = *(_DWORD *)(v11 + 16);
    else
      v72 = 0;
    v12 = *(_QWORD *)(a1 + 19344);
    if (v12)
      v71 = *(_DWORD *)(v12 + 16);
    else
      v71 = 0;
    v13 = *(_QWORD *)(a1 + 19360);
    if (v13)
      v70 = *(_DWORD *)(v13 + 16);
    else
      v70 = 0;
    v14 = *(_QWORD *)(a1 + 19368);
    if (v14)
      v69 = *(_DWORD *)(v14 + 16);
    else
      v69 = 0;
    v15 = *(_QWORD *)(a1 + 19376);
    if (v15)
    {
      v68 = *(_DWORD *)(v15 + 16);
      if (!a2)
        goto LABEL_131;
    }
    else
    {
      v68 = 0;
      if (!a2)
        goto LABEL_131;
    }
    v80 = v3;
    v16 = 0;
    v66 = 0;
    v17 = 0;
    v77 = a2;
    do
    {
      v18 = *(_DWORD *)(a3 + 4 * v16);
      if (v18)
      {
        if (v18 == v76)
          gleBindBufferObject(a1, 34962, 0);
        if (v18 == v75)
          gleBindBufferObject(a1, 34963, 0);
        if (v18 == v74)
          gleBindBufferObject(a1, 35051, 0);
        if (v18 == v73)
          gleBindBufferObject(a1, 35052, 0);
        if (v18 == v72)
          gleBindBufferObject(a1, 35982, 0);
        if (v18 == v71)
          gleBindBufferObject(a1, 36334, 0);
        if (v18 == v70)
          gleBindBufferObject(a1, 35882, 0);
        if (v18 == v69)
          gleBindBufferObject(a1, 36662, 0);
        v79 = v16;
        if (v18 == v68)
          gleBindBufferObject(a1, 36663, 0);
        v19 = *(unsigned int *)(*(_QWORD *)(a1 + 26432) + 168);
        if ((_DWORD)v19)
        {
          v20 = 0;
          v21 = (_QWORD *)(a1 + 33552);
          do
          {
            v22 = *(_QWORD *)(a1 + 26432);
            v23 = *(_QWORD *)(v22 + 8 * v20 + 128);
            if (v23 && v18 == *(_DWORD *)(v23 + 16))
            {
              v24 = *(_DWORD *)(v23 + 20) - 1;
              *(_DWORD *)(v23 + 20) = v24;
              if (!v24)
              {
                gleUnbindAndFreeBufferObject(a1, (_QWORD *)v23);
                v22 = *(_QWORD *)(a1 + 26432);
              }
              *(_QWORD *)(v22 + 8 * v20 + 128) = 0;
              *(_DWORD *)(*(_QWORD *)(a1 + 26432) + 168) &= ~(1 << v20);
              v25 = *(unsigned __int8 *)(a1 + 32496);
              if (*(_BYTE *)(a1 + 32496))
              {
                v26 = v21;
                do
                {
                  *v26 = 0;
                  v26 += 209;
                  --v25;
                }
                while (v25);
              }
              v17 |= 8u;
              v27 = a1 + 8 * v20;
              *(_QWORD *)(v27 + 17992) = 0;
              *(_QWORD *)(v27 + 18024) = 0;
            }
            v19 &= ~(1 << v20);
            if (!v19)
              break;
            ++v21;
            v28 = v20++ >= 3;
          }
          while (!v28);
        }
        v29 = *(_QWORD *)(a1 + 24896);
        for (i = v29; i; i &= ~(1 << v31))
        {
          v31 = __clz(__rbit64(i));
          v32 = *(_QWORD *)(a1 + 24888);
          v33 = *(_QWORD *)(v32 + 8 * v31);
          if (v33 && v18 == *(_DWORD *)(v33 + 16))
          {
            v34 = *(_DWORD *)(v33 + 20) - 1;
            *(_DWORD *)(v33 + 20) = v34;
            if (!v34)
            {
              gleUnbindAndFreeBufferObject(a1, (_QWORD *)v33);
              v32 = *(_QWORD *)(a1 + 24888);
              v29 = *(_QWORD *)(a1 + 24896);
            }
            v17 |= 4u;
            *(_QWORD *)(v32 + 8 * v31) = 0;
            v35 = (_QWORD *)(a1 + 18056 + 16 * v31);
            v29 &= ~(1 << v31);
            *v35 = 0;
            v35[1] = 0;
            *(_QWORD *)(a1 + 24896) = v29;
            v36 = *(unsigned __int8 *)(a1 + 32496);
            if (*(_BYTE *)(a1 + 32496))
            {
              v37 = (_QWORD *)(a1 + 33704 + 8 * v31);
              do
              {
                *v37 = 0;
                v37 += 209;
                --v36;
              }
              while (v36);
            }
          }
        }
        v38 = *(_QWORD *)(a1 + 24768);
        if (v38)
        {
          v66 = v38 + 40;
          if (*(_DWORD *)(v38 + 3748))
          {
            v39 = 0;
            do
            {
              v40 = *(_QWORD *)(v38 + 3704);
              v41 = *(_QWORD *)(v40 + 8 * v39);
              if (v41 && v18 == *(_DWORD *)(v41 + 16))
              {
                v42 = *(_DWORD *)(v41 + 20) - 1;
                *(_DWORD *)(v41 + 20) = v42;
                if (!v42)
                {
                  gleUnbindAndFreeBufferObject(a1, (_QWORD *)v41);
                  v40 = *(_QWORD *)(v38 + 3704);
                }
                v17 |= 0x10u;
                *(_QWORD *)(v40 + 8 * v39) = 0;
                v43 = *(unsigned __int8 *)(a1 + 32496);
                if (*(_BYTE *)(a1 + 32496))
                {
                  v44 = (uint64_t *)(v38 + 4056);
                  do
                  {
                    v45 = *v44;
                    v44 += 9;
                    *(_QWORD *)(v45 + 8 * v39) = 0;
                    --v43;
                  }
                  while (v43);
                }
              }
              ++v39;
            }
            while (v39 < *(unsigned int *)(v38 + 3748));
          }
        }
        if ((*(_WORD *)(a1 + 32493) & 0x20) == 0)
        {
          if (v67)
          {
            v46 = v67[114];
            if (v46)
            {
              v47 = 0;
              v48 = v6 + 182;
              do
              {
                v49 = &v6[v47];
                v50 = v49[150];
                if (v50 && v18 == *(_DWORD *)(v50 + 16))
                {
                  v51 = *(_DWORD *)(v50 + 20) - 1;
                  *(_DWORD *)(v50 + 20) = v51;
                  if (!v51)
                    gleUnbindAndFreeBufferObject(a1, (_QWORD *)v50);
                  v49[150] = 0;
                  v6[113] |= (0x10000 << v47) | 0x10;
                  v6[109] &= ~(0x10000 << v47);
                  v6[v47 + 115] = v6[3 * v47 + 12];
                  if ((v6[108] & (0x10000 << v47)) != 0)
                    v52 = 3;
                  else
                    v52 = 1;
                  v53 = *(unsigned __int8 *)(a1 + 32496);
                  if (*(_BYTE *)(a1 + 32496))
                  {
                    v54 = v48;
                    do
                    {
                      *v54 = 0;
                      v54 += 35;
                      --v53;
                    }
                    while (v53);
                  }
                  v17 |= v52;
                  if (*(_QWORD *)(a1 + 27648))
                  {
                    v55 = *(_QWORD *)(a1 + 26448);
                    *(_QWORD *)(v55 + 8 * v47 + 8) = 0;
                    *(_QWORD *)(v55 + 264) = v6[109];
                  }
                }
                v46 &= ~(0x10000 << v47);
                if (!v46)
                  break;
                ++v48;
                v28 = v47++ >= 0x1F;
              }
              while (!v28);
            }
          }
        }
        v56 = *(_QWORD *)(a1 + 23776);
        if (v56)
        {
          v57 = 0;
          do
          {
            if ((v56 & 1) != 0)
            {
              v58 = *(_QWORD *)(a1 + 20776 + 88 * v57 + 56);
              v59 = *(_QWORD *)(v58 + 568);
              if (v59)
              {
                if (v18 == *(_DWORD *)(v59 + 16))
                {
                  v60 = *(_DWORD *)(v59 + 20) - 1;
                  *(_DWORD *)(v59 + 20) = v60;
                  if (!v60)
                    gleUnbindAndFreeBufferObject(a1, (_QWORD *)v59);
                  *(_QWORD *)(v58 + 568) = 0;
                  *(_QWORD *)(a1 + 23776) &= -2 << v57;
                  v61 = *(unsigned __int8 *)(a1 + 32496);
                  if (*(_BYTE *)(a1 + 32496))
                  {
                    v62 = (_BYTE *)(v58 + 156);
                    do
                    {
                      *(_QWORD *)(v62 - 20) = 0;
                      *v62 |= 8u;
                      v62 += 24;
                      --v61;
                    }
                    while (v61);
                  }
                  *v80 = 0;
                  *(_DWORD *)(a1 + 1548) |= 0x22000u;
                  gleDirtyTextureObjectCurrentBindPointsGeom(a1, v58 + 40);
                }
              }
            }
            ++v57;
            v63 = v56 > 1;
            v56 >>= 1;
          }
          while (v63);
        }
        v64 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 264, v18);
        if (v64)
        {
          if (*((_DWORD *)v64 + 5) == 1)
          {
            v65 = (uint64_t)(v64 + 5);
            (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(a1 + 29448) + 1024))(*(_QWORD *)(a1 + 29016), v64[*(unsigned __int8 *)(a1 + 32500) + 5]);
            gleOrphanBufferObject(a1, v65);
          }
        }
        gleUnbindDeleteHashNameAndObject(a1, (void (**)(_QWORD, uint64_t))(*(_QWORD *)(a1 + 19296) + 264), (void (*)(uint64_t, uint64_t))gleUnbindBufferObject, v18);
        v16 = v79;
      }
      ++v16;
    }
    while (v16 != v77);
    if (!v17)
      goto LABEL_131;
    if ((v17 & 2) != 0)
    {
      gleUpdateDrawArraysFuncs(a1);
      if ((v17 & 1) == 0)
      {
LABEL_127:
        if ((v17 & 4) == 0)
          goto LABEL_128;
        goto LABEL_134;
      }
    }
    else if ((v17 & 1) == 0)
    {
      goto LABEL_127;
    }
    *v80 = 0;
    *(_DWORD *)(a1 + 1532) |= 0x1000u;
    if ((v17 & 4) == 0)
    {
LABEL_128:
      if ((v17 & 8) == 0)
        goto LABEL_129;
      goto LABEL_135;
    }
LABEL_134:
    *(_DWORD *)(a1 + 1532) |= 0x20000000u;
    *v80 = 0;
    *(_DWORD *)(a1 + 1548) |= 0x200u;
    if ((v17 & 8) == 0)
    {
LABEL_129:
      if ((v17 & 0x10) != 0)
      {
LABEL_130:
        *(_DWORD *)(v66 + 3656) |= 0x10u;
        *(_DWORD *)(a1 + 1532) |= 0x30000000u;
        *v80 = 0;
        *(_DWORD *)(a1 + 1540) |= 0x10000000u;
      }
LABEL_131:
      os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
      return;
    }
LABEL_135:
    *v80 = 0;
    *(_DWORD *)(a1 + 1524) |= 0x40000000u;
    if ((v17 & 0x10) == 0)
      goto LABEL_131;
    goto LABEL_130;
  }
  if (!*(_WORD *)(a1 + 29832))
    *(_WORD *)(a1 + 29832) = 1281;
}

void glDeleteBuffers_ExecThread(uint64_t a1, unsigned int a2, uint64_t a3)
{
  (*(void (**)(void))(a1 + 27752))();
  glDeleteBuffers_Exec(a1, a2, a3);
}

void glGenBuffers_Exec(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  int v6;
  BOOL v7;
  uint64_t v8;

  if ((a2 & 0x80000000) != 0)
  {
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1281;
  }
  else
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    v6 = gleGenHashNames(*(_QWORD *)(a1 + 19296) + 264, a2);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (v6)
      v7 = a2 == 0;
    else
      v7 = 1;
    if (!v7)
    {
      v8 = a2;
      do
      {
        *a3++ = v6++;
        --v8;
      }
      while (v8);
    }
  }
}

void glGenBuffers_ExecThread(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  (*(void (**)(void))(a1 + 27752))();
  glGenBuffers_Exec(a1, a2, a3);
}

BOOL glIsBuffer_Exec(uint64_t a1, unsigned int a2)
{
  uint64_t *v4;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v4 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 264, a2);
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  return v4 != 0;
}

BOOL glIsBuffer_ExecThread(uint64_t a1, unsigned int a2)
{
  (*(void (**)(void))(a1 + 27752))();
  return glIsBuffer_Exec(a1, a2);
}

BOOL *gleCreateTransformFeedbackBuffer(uint64_t a1)
{
  BOOL *v2;
  BOOL *v3;
  int64_t v4;
  unsigned int v5;
  unsigned int v6;
  mach_vm_address_t WCMemory;

  v2 = (BOOL *)malloc_type_malloc(8 * *(unsigned __int8 *)(a1 + 32496) + 304, 0x577B5147uLL);
  if (!v2)
    abort();
  v3 = v2;
  v4 = (*(_QWORD *)(*(_QWORD *)(a1 + 29032) + 640) + 55) & -*(_QWORD *)(*(_QWORD *)(a1 + 29032) + 640);
  if (v4 < 0x20000)
  {
    v5 = (v4 - 1) | ((v4 - 1) >> 1) | ((((_DWORD)v4 - 1) | ((v4 - 1) >> 1)) >> 2);
    v6 = v5 | (v5 >> 4) | ((v5 | (v5 >> 4)) >> 8);
    v4 = (v6 | HIWORD(v6)) + 1;
  }
  *(_QWORD *)v2 = 0;
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 4) = 0;
  *((_OWORD *)v2 + 1) = xmmword_21B9A4060;
  gfxInitializeBufferObject();
  gfxCreatePluginBuffer();
  WCMemory = allocateWCMemory(a1, 36671, 35002, v4, v3 + 166);
  if (WCMemory)
  {
    *(_QWORD *)(WCMemory + 48) = 0;
    *(_OWORD *)(WCMemory + 16) = 0u;
    *(_OWORD *)(WCMemory + 32) = 0u;
    *(_OWORD *)WCMemory = 0u;
    *((_QWORD *)v3 + 18) = v4;
    *((_QWORD *)v3 + 19) = 56;
    *((_QWORD *)v3 + 17) = WCMemory;
  }
  else
  {
    free(v3);
    return 0;
  }
  return v3;
}

mach_vm_address_t allocateWCMemory(uint64_t a1, int a2, int a3, mach_vm_size_t size, BOOL *a5)
{
  BOOL v7;
  _WORD *v8;
  vm_map_t v9;
  _BOOL4 v11;
  uint64_t v12;
  int v13;
  vm_prot_t v14;
  mach_vm_address_t result;
  BOOL v16;
  memory_object_size_t sizea;
  mach_port_t object_handle;
  mach_vm_address_t address;

  v7 = 0;
  v8 = (_WORD *)(a1 + 29832);
  v9 = *MEMORY[0x24BDAEC58];
  address = 0;
  v11 = a3 == 35048 || (a3 & 0xFFFFFFFB) == 35040;
  if (a2 == 34962 && v11)
  {
    v12 = *(_QWORD *)(a1 + 29032);
    if (*(_BYTE *)(v12 + 101) && *(unsigned __int8 *)(a1 + 32492) >= 6u)
    {
      v13 = *(unsigned __int8 *)(v12 + 106);
      v7 = v13 != 0;
      if (v13)
      {
        v14 = 67371011;
        goto LABEL_15;
      }
    }
    else
    {
      v7 = 0;
    }
  }
  v14 = 17039363;
LABEL_15:
  *a5 = v7;
  if (mach_vm_allocate(v9, &address, size, 3))
  {
    if (*v8)
      return 0;
    result = 0;
    *v8 = 1285;
  }
  else
  {
    if (*a5)
    {
      object_handle = 0;
      sizea = size;
      if (mach_make_memory_entry_64(v9, &sizea, address, v14, &object_handle, 0))
        v16 = 1;
      else
        v16 = object_handle == 0;
      if (v16 || sizea < size)
      {
        if (object_handle)
          mach_port_deallocate(v9, object_handle);
        mach_vm_deallocate(v9, address, size);
        if (!*v8)
          *v8 = 1285;
        return 0;
      }
      mach_port_deallocate(v9, object_handle);
    }
    return address;
  }
  return result;
}

uint64_t glBufferData_Exec(uint64_t result, int a2, size_t a3, const void *a4, int a5)
{
  _QWORD *v9;
  __int16 *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE **v13;
  _BYTE *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  __int16 v22;

  v9 = (_QWORD *)result;
  v10 = (__int16 *)(result + 29832);
  if (a2 > 35344)
  {
    if (a2 <= 36333)
    {
      if (a2 != 35345)
      {
        if (a2 != 35982)
          goto LABEL_47;
        v11 = 19352;
        goto LABEL_25;
      }
    }
    else if (a2 != 36334)
    {
      if (a2 == 36662)
      {
        if ((*(_BYTE *)(result + 32501) & 0xFE) == 2)
          goto LABEL_47;
        v11 = 19368;
      }
      else
      {
        if (a2 != 36663 || (*(_BYTE *)(result + 32501) & 0xFE) == 2)
          goto LABEL_47;
        v11 = 19376;
      }
      goto LABEL_25;
    }
    v11 = 19344;
LABEL_25:
    v13 = (_BYTE **)(result + v11);
    goto LABEL_26;
  }
  if (a2 > 35050)
  {
    if (a2 == 35051)
    {
      v11 = 19328;
    }
    else
    {
      if (a2 != 35052)
        goto LABEL_47;
      v11 = 19336;
    }
    goto LABEL_25;
  }
  if (a2 == 34962)
  {
    v11 = 19312;
    goto LABEL_25;
  }
  if (a2 != 34963)
    goto LABEL_47;
  v12 = *(_QWORD *)(result + 26384);
  if (v12)
    v13 = (_BYTE **)(v12 + 1232);
  else
    v13 = (_BYTE **)(result + 19320);
LABEL_26:
  v14 = *v13;
  if (!*v13 || v14[292])
  {
    if (*v10)
      return result;
    v22 = 1282;
    goto LABEL_49;
  }
  if ((a3 & 0x8000000000000000) != 0)
  {
    if (*v10)
      return result;
    v22 = 1281;
    goto LABEL_49;
  }
  if ((a5 - 35040) > 0xA || ((1 << (a5 + 32)) & 0x777) == 0)
  {
LABEL_47:
    if (*v10)
      return result;
    v22 = 1280;
    goto LABEL_49;
  }
  if (v14[164])
    return result;
  v15 = (uint64_t *)(v14 + 136);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(result + 29448) + 1024))(*(_QWORD *)(result + 29016), *(_QWORD *)&v14[8 * *(unsigned __int8 *)(result + 32500) + 40]);
  gleOrphanBufferObject((uint64_t)v9, (uint64_t)(v14 + 40));
  v16 = gleAcquireBufferData((uint64_t)v9, (uint64_t)(v14 + 136), a3, a2, a5);
  gleApplyBufferData((uint64_t)v9, (uint64_t)(v14 + 40), (uint64_t)v16);
  if (!a3)
    goto LABEL_36;
  result = *v15;
  if (!*v15)
  {
    if (*v10)
      return result;
    v22 = 1285;
LABEL_49:
    *v10 = v22;
    return result;
  }
  if (a4)
  {
    memcpy((void *)result, a4, a3);
    v14[167] = 1;
  }
LABEL_36:
  if (v9[3111])
  {
    v17 = 0;
    v18 = v9 + 2258;
    do
    {
      if (*(_BYTE **)(v9[3111] + v17) == v14)
        gleTransferBufferBindingToGLD((uint64_t)v14, *(_QWORD *)(v9[3109] + v17), *(_QWORD *)(v9[3110] + v17), v18 - 1, v18, *(unsigned __int16 *)(v9[3685] + 504), 1);
      v18 += 2;
      v17 += 8;
    }
    while (v17 != 192);
  }
  if (*(_DWORD *)(v9[3304] + 168))
  {
    v19 = 0;
    v20 = v9 + 2253;
    do
    {
      v21 = (_QWORD *)(v9[3304] + v19);
      if ((_BYTE *)v21[16] == v14)
        gleTransferBufferBindingToGLD((uint64_t)v14, v21[6], v21[11], v20 - 4, v20, 4, 4);
      ++v20;
      v19 += 8;
    }
    while (v19 != 32);
  }
  return gleDirtyBufferObjectCurrentBindPoints((uint64_t)v9, (uint64_t)(v14 + 40));
}

uint64_t *gleAcquireBufferData(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  int v10;
  _WORD *v11;
  _BOOL4 v13;
  uint64_t v14;
  char v15;
  uint64_t *result;
  mach_vm_address_t v17;
  int64_t v18;
  unsigned int v19;
  unsigned int v20;
  mach_vm_address_t WCMemory;
  char v22;

  v22 = 0;
  if (!a3)
  {
    v15 = 0;
    result = 0;
    v17 = 0;
    v18 = 0;
LABEL_21:
    *(_BYTE *)(a2 + 31) = 0;
    *(_QWORD *)(a2 + 8) = v18;
    *(_QWORD *)(a2 + 16) = a3;
    *(_WORD *)(a2 + 24) = a5;
    *(_QWORD *)a2 = v17;
    *(_BYTE *)(a2 + 30) = v15;
    return result;
  }
  v10 = 0;
  v11 = (_WORD *)(a1 + 29832);
  v13 = a5 == 35048 || (a5 & 0xFFFFFFFB) == 35040;
  if (a4 == 34962 && v13)
  {
    v14 = *(_QWORD *)(a1 + 29032);
    v10 = *(_BYTE *)(v14 + 101) && *(unsigned __int8 *)(a1 + 32492) >= 6u && *(unsigned __int8 *)(v14 + 106) != 0;
  }
  result = gleGetFreeOrphanNode(a1, a3, (unsigned __int16)a5, v10);
  if (result)
  {
    v17 = result[4];
    v18 = result[5];
    v15 = *((_BYTE *)result + 50);
    goto LABEL_21;
  }
  v18 = (a3 + *(_QWORD *)(*(_QWORD *)(a1 + 29032) + 640) - 1) & -*(_QWORD *)(*(_QWORD *)(a1 + 29032) + 640);
  if (v18 < 0x20000)
  {
    v19 = (v18 - 1) | ((v18 - 1) >> 1) | ((((_DWORD)v18 - 1) | ((v18 - 1) >> 1)) >> 2);
    v20 = v19 | (v19 >> 4) | ((v19 | (v19 >> 4)) >> 8);
    v18 = (v20 | HIWORD(v20)) + 1;
  }
  WCMemory = allocateWCMemory(a1, a4, a5, v18, (BOOL *)&v22);
  if (WCMemory)
  {
    v17 = WCMemory;
    result = 0;
    v15 = v22;
    goto LABEL_21;
  }
  if (!*v11)
    *v11 = 1285;
  result = 0;
  *(_WORD *)(a2 + 26) = 0;
  *(_BYTE *)(a2 + 30) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  return result;
}

void gleApplyBufferData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  _DWORD *v6;

  if (a3)
  {
    gleBufferObjectAdoptOrphan(a1, a2, a3);
  }
  else
  {
    if (*(_QWORD *)(a2 + 112))
      v4 = 5;
    else
      v4 = 1;
    v5 = *(unsigned __int8 *)(a1 + 32496);
    if (*(_BYTE *)(a1 + 32496))
    {
      v6 = (_DWORD *)(a2 + 264);
      do
      {
        *v6 |= v4;
        v6 += 2;
        --v5;
      }
      while (v5);
    }
  }
  *(_QWORD *)(a2 + 152) = 0;
}

_QWORD *glBufferData_PackThread(_QWORD *result, int a2, size_t a3, const void *a4, int a5)
{
  uint64_t v8;
  __int16 *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  BOOL v17;
  char v18;
  __int16 v19;

  v8 = (uint64_t)result;
  v9 = (__int16 *)(result + 3729);
  if (a2 > 35344)
  {
    if (a2 <= 36333)
    {
      if (a2 != 35345)
      {
        if (a2 != 35982)
          goto LABEL_42;
        v10 = 3313;
        goto LABEL_25;
      }
    }
    else if (a2 != 36334)
    {
      if (a2 == 36662)
      {
        if ((*((_BYTE *)result + 32501) & 0xFE) == 2)
          goto LABEL_42;
        v10 = 3315;
      }
      else
      {
        if (a2 != 36663 || (*((_BYTE *)result + 32501) & 0xFE) == 2)
          goto LABEL_42;
        v10 = 3316;
      }
      goto LABEL_25;
    }
    v10 = 3312;
LABEL_25:
    v11 = &result[v10];
    goto LABEL_26;
  }
  if (a2 > 35050)
  {
    if (a2 == 35051)
    {
      v10 = 3310;
    }
    else
    {
      if (a2 != 35052)
        goto LABEL_42;
      v10 = 3311;
    }
    goto LABEL_25;
  }
  if (a2 == 34962)
  {
    v10 = 3308;
    goto LABEL_25;
  }
  if (a2 != 34963)
    goto LABEL_42;
  v11 = (uint64_t *)result[3306];
  if (!v11)
    v11 = result + 3309;
LABEL_26:
  v12 = *v11;
  if (!*v11)
  {
    if (*v9)
      return result;
    v19 = 1282;
    goto LABEL_44;
  }
  if ((a3 & 0x8000000000000000) != 0)
  {
    if (*v9)
      return result;
    v19 = 1281;
    goto LABEL_44;
  }
  if ((a5 - 35040) > 0xA || ((1 << (a5 + 32)) & 0x777) == 0)
  {
LABEL_42:
    if (*v9)
      return result;
    v19 = 1280;
    goto LABEL_44;
  }
  if (*(_BYTE *)(v12 + 28))
    return result;
  v13 = gleAcquireBufferData((uint64_t)result, v12, a3, a2, a5);
  if (!a3)
    goto LABEL_35;
  result = *(_QWORD **)v12;
  if (!*(_QWORD *)v12)
  {
    if (*v9)
      return result;
    v19 = 1285;
LABEL_44:
    *v9 = v19;
    return result;
  }
  if (a4)
  {
    memcpy(result, a4, a3);
    *(_BYTE *)(v12 + 31) = 1;
  }
LABEL_35:
  *(_BYTE *)(v12 + 56) = 0;
  result = gleAddCommand(v8, (uint64_t)glBufferData_UnpackThread, 72);
  *((_DWORD *)result + 16) = a2;
  v14 = *(_OWORD *)(v12 + 32);
  v15 = *(_QWORD *)(v12 + 48);
  v16 = *(_OWORD *)v12;
  *((_OWORD *)result + 1) = *(_OWORD *)(v12 + 16);
  *((_OWORD *)result + 2) = v14;
  *(_OWORD *)result = v16;
  result[6] = v15;
  result[7] = v13;
  if (a3)
    v17 = a4 == 0;
  else
    v17 = 0;
  v18 = v17;
  *((_BYTE *)result + 68) = v18;
  return result;
}

uint64_t glBufferData_UnpackThread(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;

  v4 = 0;
  v5 = *((_DWORD *)a2 + 16);
  if (v5 <= 35344)
  {
    if (v5 > 35050)
    {
      if (v5 == 35051)
      {
        v4 = *(_QWORD *)(a1 + 19328);
      }
      else if (v5 == 35052)
      {
        v4 = *(_QWORD *)(a1 + 19336);
      }
    }
    else if (v5 == 34962)
    {
      v4 = *(_QWORD *)(a1 + 19312);
    }
    else if (v5 == 34963)
    {
      v6 = *(_QWORD *)(a1 + 26384);
      if (v6)
        v4 = *(_QWORD *)(v6 + 1232);
      else
        v4 = *(_QWORD *)(a1 + 19320);
    }
    goto LABEL_26;
  }
  if (v5 <= 36333)
  {
    if (v5 != 35345)
    {
      if (v5 == 35982)
        v4 = *(_QWORD *)(a1 + 19352);
      goto LABEL_26;
    }
LABEL_19:
    v4 = *(_QWORD *)(a1 + 19344);
    goto LABEL_26;
  }
  if (v5 == 36334)
    goto LABEL_19;
  if (v5 != 36662)
  {
    if (v5 != 36663)
      goto LABEL_26;
    if ((*(_BYTE *)(a1 + 32501) & 0xFE) != 2)
    {
      v4 = *(_QWORD *)(a1 + 19376);
      goto LABEL_26;
    }
    goto LABEL_21;
  }
  if ((*(_BYTE *)(a1 + 32501) & 0xFE) == 2)
  {
LABEL_21:
    v4 = 0;
    goto LABEL_26;
  }
  v4 = *(_QWORD *)(a1 + 19368);
LABEL_26:
  gleOrphanBufferObject(a1, v4 + 40);
  v7 = *a2;
  v8 = a2[1];
  v9 = a2[2];
  *(_QWORD *)(v4 + 184) = *((_QWORD *)a2 + 6);
  *(_OWORD *)(v4 + 168) = v9;
  *(_OWORD *)(v4 + 152) = v8;
  *(_OWORD *)(v4 + 136) = v7;
  gleApplyBufferData(a1, v4 + 40, *((_QWORD *)a2 + 7));
  if (*(_QWORD *)(a1 + 24888))
  {
    v10 = 0;
    v11 = (uint64_t *)(a1 + 18064);
    do
    {
      if (*(_QWORD *)(*(_QWORD *)(a1 + 24888) + v10) == v4)
        gleTransferBufferBindingToGLD(v4, *(_QWORD *)(*(_QWORD *)(a1 + 24872) + v10), *(_QWORD *)(*(_QWORD *)(a1 + 24880) + v10), v11 - 1, v11, *(unsigned __int16 *)(*(_QWORD *)(a1 + 29480) + 504), 1);
      v11 += 2;
      v10 += 8;
    }
    while (v10 != 192);
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 26432) + 168))
  {
    v12 = 0;
    v13 = (uint64_t *)(a1 + 18024);
    do
    {
      v14 = (_QWORD *)(*(_QWORD *)(a1 + 26432) + v12);
      if (v14[16] == v4)
        gleTransferBufferBindingToGLD(v4, v14[6], v14[11], v13 - 4, v13, 4, 4);
      ++v13;
      v12 += 8;
    }
    while (v12 != 32);
  }
  gleDirtyBufferObjectCurrentBindPoints(a1, v4 + 40);
  return 72;
}

_QWORD *glBufferSubData_Exec(_QWORD *result, int a2, uint64_t a3, size_t a4, const void *a5)
{
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;

  v8 = result;
  v9 = (char *)(result + 3729);
  if (a2 > 35344)
  {
    if (a2 <= 36333)
    {
      if (a2 != 35345)
      {
        if (a2 == 35982)
        {
          v10 = 2419;
          goto LABEL_28;
        }
LABEL_22:
        if (*(_WORD *)v9)
          return result;
        v13 = 1280;
        goto LABEL_24;
      }
    }
    else if (a2 != 36334)
    {
      if (a2 == 36662)
      {
        if ((*((_BYTE *)result + 32501) & 0xFE) != 2)
        {
          v10 = 2421;
          goto LABEL_28;
        }
      }
      else if (a2 == 36663 && (*((_BYTE *)result + 32501) & 0xFE) != 2)
      {
        v10 = 2422;
LABEL_28:
        v12 = &result[v10];
        goto LABEL_29;
      }
      goto LABEL_22;
    }
    v10 = 2418;
    goto LABEL_28;
  }
  if (a2 > 35050)
  {
    if (a2 == 35051)
    {
      v10 = 2416;
      goto LABEL_28;
    }
    if (a2 == 35052)
    {
      v10 = 2417;
      goto LABEL_28;
    }
    goto LABEL_22;
  }
  if (a2 == 34962)
  {
    v10 = 2414;
    goto LABEL_28;
  }
  if (a2 != 34963)
    goto LABEL_22;
  v11 = result[3298];
  if (v11)
    v12 = (uint64_t *)(v11 + 1232);
  else
    v12 = result + 2415;
LABEL_29:
  v14 = *v12;
  if (!*v12 || *(_BYTE *)(v14 + 292))
  {
    if (*(_WORD *)v9)
      return result;
    v13 = 1282;
    goto LABEL_24;
  }
  if (((a4 | a3) & 0x8000000000000000) != 0)
    goto LABEL_59;
  if (!a4 || *(_BYTE *)(v14 + 164))
    return result;
  if (a4 + a3 > *(_QWORD *)(v14 + 152))
  {
LABEL_59:
    if (*(_WORD *)v9)
      return result;
    v13 = 1281;
LABEL_24:
    *(_WORD *)v9 = v13;
    return result;
  }
  v15 = v14 + 40;
  (*(void (**)(_QWORD, _QWORD))(result[3681] + 1024))(result[3627], *(_QWORD *)(v14 + 40 + 8 * *((unsigned __int8 *)result + 32500)));
  if (*(_BYTE *)(v14 + 165) && !*(_QWORD *)(v14 + 192))
    gfxWaitBufferOnDevices();
  if (v9[2649]
    && (*(_BYTE *)(v14 + 165) || *(_BYTE *)(v8[3629] + 102))
    && (result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD, uint64_t, size_t, const void *))(v8[3681] + 416))(v8[3627], *(_QWORD *)(v15 + 8 * v9[2667]), a3, a4, a5), (_DWORD)result))
  {
    v16 = v8[3628];
    *(_BYTE *)(v14 + 167) = 0;
    *(_QWORD *)(v14 + 192) = v16;
    v17 = v8[3298];
    if (v17)
      *(_BYTE *)(v17 + 1216) = 0;
  }
  else
  {
    if (*(_QWORD *)(v14 + 192))
    {
      gleSynchronizeBufferOnCurrentDevices((uint64_t)v8, v14 + 40);
    }
    else if (*(_BYTE *)(v14 + 165))
    {
      (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(v8[3681] + 280))(v8[3627], 3, 0, *(_QWORD *)(v15 + 8 * v9[2667]));
    }
    *(_BYTE *)(v14 + 167) = 1;
    v18 = v9[2664];
    if (v9[2664])
    {
      v19 = (_DWORD *)(v14 + 304);
      do
      {
        *v19 |= 4u;
        v19 += 2;
        --v18;
      }
      while (v18);
    }
    gleDirtyBufferObjectCurrentBindPoints((uint64_t)v8, v14 + 40);
    return memcpy((void *)(*(_QWORD *)(v14 + 136) + a3), a5, a4);
  }
  return result;
}

_QWORD *glBufferSubData_PackThread(_QWORD *result, int a2, uint64_t a3, size_t a4, const void *a5)
{
  _QWORD *v9;
  __int16 *v10;
  uint64_t v11;
  uint64_t *v12;
  __int16 v13;
  uint64_t v14;
  _QWORD *v15;

  v9 = result;
  v10 = (__int16 *)(result + 3729);
  if (a2 > 35344)
  {
    if (a2 <= 36333)
    {
      if (a2 != 35345)
      {
        if (a2 == 35982)
        {
          v11 = 3313;
          goto LABEL_28;
        }
LABEL_22:
        if (*v10)
          return result;
        v13 = 1280;
        goto LABEL_24;
      }
    }
    else if (a2 != 36334)
    {
      if (a2 == 36662)
      {
        if ((*((_BYTE *)result + 32501) & 0xFE) != 2)
        {
          v11 = 3315;
          goto LABEL_28;
        }
      }
      else if (a2 == 36663 && (*((_BYTE *)result + 32501) & 0xFE) != 2)
      {
        v11 = 3316;
LABEL_28:
        v12 = &result[v11];
        goto LABEL_29;
      }
      goto LABEL_22;
    }
    v11 = 3312;
    goto LABEL_28;
  }
  if (a2 > 35050)
  {
    if (a2 == 35051)
    {
      v11 = 3310;
      goto LABEL_28;
    }
    if (a2 == 35052)
    {
      v11 = 3311;
      goto LABEL_28;
    }
    goto LABEL_22;
  }
  if (a2 == 34962)
  {
    v11 = 3308;
    goto LABEL_28;
  }
  if (a2 != 34963)
    goto LABEL_22;
  v12 = (uint64_t *)result[3306];
  if (!v12)
    v12 = result + 3309;
LABEL_29:
  v14 = *v12;
  if (!v14 || *(_BYTE *)(v14 + 56))
  {
    if (*v10)
      return result;
    v13 = 1282;
    goto LABEL_24;
  }
  if (((a4 | a3) & 0x8000000000000000) != 0)
  {
LABEL_41:
    if (*v10)
      return result;
    v13 = 1281;
LABEL_24:
    *v10 = v13;
    return result;
  }
  if (a4 && !*(_BYTE *)(v14 + 28))
  {
    if (a4 + a3 <= *(_QWORD *)(v14 + 16))
    {
      v15 = gleAddLargeCommand((uint64_t)result, (uint64_t)glBufferSubData_UnpackThread, a4 + 24);
      if (v15)
      {
        *((_DWORD *)v15 + 4) = a2;
        *v15 = a3;
        v15[1] = a4;
        return memcpy(v15 + 3, a5, a4);
      }
      else
      {
        ((void (*)(_QWORD *))v9[3469])(v9);
        return glBufferSubData_Exec(v9, a2, a3, a4, a5);
      }
    }
    goto LABEL_41;
  }
  return result;
}

uint64_t glBufferSubData_UnpackThread(_QWORD *a1, uint64_t a2)
{
  glBufferSubData_Exec(a1, *(_DWORD *)(a2 + 16), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), (const void *)(a2 + 24));
  return (*(_DWORD *)(a2 + 8) + 24);
}

uint64_t glMapBuffer_Exec(uint64_t a1, int a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t result;
  __int16 v10;
  int v11;

  v4 = a1 + 29832;
  if (a2 > 35344)
  {
    if (a2 <= 36333)
    {
      if (a2 != 35345)
      {
        if (a2 != 35982)
          goto LABEL_34;
        v5 = 19352;
        goto LABEL_25;
      }
    }
    else if (a2 != 36334)
    {
      if (a2 == 36662)
      {
        if ((*(_BYTE *)(a1 + 32501) & 0xFE) == 2)
          goto LABEL_34;
        v5 = 19368;
      }
      else
      {
        if (a2 != 36663 || (*(_BYTE *)(a1 + 32501) & 0xFE) == 2)
          goto LABEL_34;
        v5 = 19376;
      }
      goto LABEL_25;
    }
    v5 = 19344;
LABEL_25:
    v7 = (uint64_t *)(a1 + v5);
    goto LABEL_26;
  }
  if (a2 > 35050)
  {
    if (a2 == 35051)
    {
      v5 = 19328;
    }
    else
    {
      if (a2 != 35052)
        goto LABEL_34;
      v5 = 19336;
    }
    goto LABEL_25;
  }
  if (a2 == 34962)
  {
    v5 = 19312;
    goto LABEL_25;
  }
  if (a2 != 34963)
    goto LABEL_34;
  v6 = *(_QWORD *)(a1 + 26384);
  if (v6)
    v7 = (uint64_t *)(v6 + 1232);
  else
    v7 = (uint64_t *)(a1 + 19320);
LABEL_26:
  v8 = *v7;
  if (!*v7 || *(_BYTE *)(v8 + 292))
  {
    if (*(_WORD *)v4)
      return 0;
    result = 0;
    v10 = 1282;
    goto LABEL_37;
  }
  if (a3 != 35001)
  {
LABEL_34:
    if (*(_WORD *)v4)
      return 0;
    result = 0;
    v10 = 1280;
LABEL_37:
    *(_WORD *)v4 = v10;
    return result;
  }
  if (*(_BYTE *)(v8 + 164))
    return 0;
  *(_BYTE *)(v8 + 292) = 1;
  *(_QWORD *)(v8 + 280) = *(_QWORD *)(v8 + 152);
  *(_DWORD *)(v8 + 288) = 2;
  *(_WORD *)(v8 + 162) = -30535;
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 29448) + 1024))(*(_QWORD *)(a1 + 29016), *(_QWORD *)(v8 + 40 + 8 * *(unsigned __int8 *)(a1 + 32500)));
  if (*(_QWORD *)(v8 + 192) && !*(_BYTE *)(v8 + 167))
  {
    gleSynchronizeBufferOnCurrentDevices(a1, v8 + 40);
  }
  else if (*(_BYTE *)(v8 + 165))
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 29448) + 272))(*(_QWORD *)(a1 + 29016), 3, 0, *(_QWORD *)(v8 + 40 + 8 * *(unsigned __int8 *)(v4 + 2667)));
    gfxWaitBufferOnDevices();
  }
  if (*(_BYTE *)(v4 + 2649)
    && !*(_BYTE *)(v8 + 294)
    && (*(_BYTE *)(v8 + 165) || *(_BYTE *)(*(_QWORD *)(a1 + 29032) + 102)))
  {
    LOBYTE(v11) = *(_BYTE *)(v8 + 167);
    if ((_BYTE)v11)
      v11 = (*(unsigned __int8 *)(v8 + 8 * *(unsigned __int8 *)(v4 + 2667) + 304) >> 2) & 1;
  }
  else
  {
    LOBYTE(v11) = 1;
  }
  *(_BYTE *)(v8 + 298) = v11;
  return *(_QWORD *)(v8 + 136);
}

uint64_t gleNeedsFlushOnUnmap(uint64_t a1, _BYTE *a2)
{
  if (!*(_BYTE *)(a1 + 32481) || a2[294] || !a2[165] && !*(_BYTE *)(*(_QWORD *)(a1 + 29032) + 102))
    return 1;
  if (a2[167])
    return (*(_DWORD *)&a2[8 * *(unsigned __int8 *)(a1 + 32499) + 304] >> 2) & 1;
  return 0;
}

uint64_t glMapBuffer_PackThread(uint64_t a1, int a2, int a3)
{
  __int16 *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  __int16 v9;
  _DWORD *v10;
  uint64_t result;
  __int16 v12;

  v5 = (__int16 *)(a1 + 29832);
  if (a2 > 35344)
  {
    if (a2 <= 36333)
    {
      if (a2 != 35345)
      {
        if (a2 != 35982)
          goto LABEL_35;
        v6 = 26504;
        goto LABEL_25;
      }
    }
    else if (a2 != 36334)
    {
      if (a2 == 36662)
      {
        if ((*(_BYTE *)(a1 + 32501) & 0xFE) == 2)
          goto LABEL_35;
        v6 = 26520;
      }
      else
      {
        if (a2 != 36663 || (*(_BYTE *)(a1 + 32501) & 0xFE) == 2)
          goto LABEL_35;
        v6 = 26528;
      }
      goto LABEL_25;
    }
    v6 = 26496;
LABEL_25:
    v7 = (uint64_t *)(a1 + v6);
    goto LABEL_26;
  }
  if (a2 > 35050)
  {
    if (a2 == 35051)
    {
      v6 = 26480;
    }
    else
    {
      if (a2 != 35052)
        goto LABEL_35;
      v6 = 26488;
    }
    goto LABEL_25;
  }
  if (a2 == 34962)
  {
    v6 = 26464;
    goto LABEL_25;
  }
  if (a2 != 34963)
    goto LABEL_35;
  v7 = *(uint64_t **)(a1 + 26448);
  if (!v7)
    v7 = (uint64_t *)(a1 + 26472);
LABEL_26:
  v8 = *v7;
  if (!*v7 || *(_BYTE *)(v8 + 56))
  {
    if (*v5)
      return 0;
    result = 0;
    v12 = 1282;
    goto LABEL_38;
  }
  if (a3 != 35001)
  {
LABEL_35:
    if (*v5)
      return 0;
    result = 0;
    v12 = 1280;
LABEL_38:
    *v5 = v12;
    return result;
  }
  if (*(_BYTE *)(v8 + 28))
    return 0;
  v9 = *(_WORD *)(v8 + 57);
  if ((v9 & 0xA) != 0 || (v9 & 1) != 0 && *(_BYTE *)(v8 + 29) || !*(_QWORD *)v8)
  {
    (*(void (**)(uint64_t))(a1 + 27752))(a1);
    result = glMapBuffer_Exec(a1, a2, 35001);
  }
  else
  {
    v10 = gleAddCommand(a1, (uint64_t)glMapBuffer_UnpackThread, 8);
    *v10 = a2;
    v10[1] = 35001;
    result = *(_QWORD *)v8;
  }
  *(_BYTE *)(v8 + 56) = 1;
  *(_WORD *)(v8 + 26) = -30535;
  return result;
}

uint64_t glMapBuffer_UnpackThread(uint64_t a1, int *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;

  v2 = 0;
  v3 = *a2;
  if (*a2 <= 35344)
  {
    if (v3 > 35050)
    {
      if (v3 == 35051)
      {
        v2 = *(_QWORD *)(a1 + 19328);
      }
      else if (v3 == 35052)
      {
        v2 = *(_QWORD *)(a1 + 19336);
      }
    }
    else if (v3 == 34962)
    {
      v2 = *(_QWORD *)(a1 + 19312);
    }
    else if (v3 == 34963)
    {
      v4 = *(_QWORD *)(a1 + 26384);
      if (v4)
        v2 = *(_QWORD *)(v4 + 1232);
      else
        v2 = *(_QWORD *)(a1 + 19320);
    }
    goto LABEL_26;
  }
  if (v3 <= 36333)
  {
    if (v3 != 35345)
    {
      if (v3 == 35982)
        v2 = *(_QWORD *)(a1 + 19352);
      goto LABEL_26;
    }
LABEL_19:
    v2 = *(_QWORD *)(a1 + 19344);
    goto LABEL_26;
  }
  if (v3 == 36334)
    goto LABEL_19;
  if (v3 != 36662)
  {
    if (v3 != 36663)
      goto LABEL_26;
    if ((*(_BYTE *)(a1 + 32501) & 0xFE) != 2)
    {
      v2 = *(_QWORD *)(a1 + 19376);
      goto LABEL_26;
    }
    goto LABEL_21;
  }
  if ((*(_BYTE *)(a1 + 32501) & 0xFE) == 2)
  {
LABEL_21:
    v2 = 0;
    goto LABEL_26;
  }
  v2 = *(_QWORD *)(a1 + 19368);
LABEL_26:
  LOBYTE(v5) = 1;
  *(_BYTE *)(v2 + 292) = 1;
  *(_QWORD *)(v2 + 280) = *(_QWORD *)(v2 + 152);
  *(_DWORD *)(v2 + 288) = a2[1] - 34999;
  *(_WORD *)(v2 + 162) = a2[1];
  if (*(_BYTE *)(a1 + 32481))
  {
    if (!*(_BYTE *)(v2 + 294) && (*(_BYTE *)(v2 + 165) || *(_BYTE *)(*(_QWORD *)(a1 + 29032) + 102)))
    {
      LOBYTE(v5) = *(_BYTE *)(v2 + 167);
      if ((_BYTE)v5)
        v5 = (*(unsigned __int8 *)(v2 + 8 * *(unsigned __int8 *)(a1 + 32499) + 304) >> 2) & 1;
    }
    else
    {
      LOBYTE(v5) = 1;
    }
  }
  *(_BYTE *)(v2 + 298) = v5;
  return 8;
}

uint64_t glUnmapBuffer_Exec(uint64_t a1, int a2)
{
  __int16 *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t result;
  __int16 v7;
  uint64_t v8;

  v2 = (__int16 *)(a1 + 29832);
  if (a2 > 35344)
  {
    if (a2 <= 36333)
    {
      if (a2 != 35345)
      {
        if (a2 == 35982)
        {
          v3 = 19352;
          goto LABEL_29;
        }
LABEL_22:
        if (!*v2)
        {
          result = 0;
          v7 = 1280;
LABEL_27:
          *v2 = v7;
          return result;
        }
        return 0;
      }
    }
    else if (a2 != 36334)
    {
      if (a2 == 36662)
      {
        if ((*(_BYTE *)(a1 + 32501) & 0xFE) != 2)
        {
          v3 = 19368;
          goto LABEL_29;
        }
      }
      else if (a2 == 36663 && (*(_BYTE *)(a1 + 32501) & 0xFE) != 2)
      {
        v3 = 19376;
LABEL_29:
        v5 = (uint64_t *)(a1 + v3);
        goto LABEL_30;
      }
      goto LABEL_22;
    }
    v3 = 19344;
    goto LABEL_29;
  }
  if (a2 > 35050)
  {
    if (a2 == 35051)
    {
      v3 = 19328;
      goto LABEL_29;
    }
    if (a2 == 35052)
    {
      v3 = 19336;
      goto LABEL_29;
    }
    goto LABEL_22;
  }
  if (a2 == 34962)
  {
    v3 = 19312;
    goto LABEL_29;
  }
  if (a2 != 34963)
    goto LABEL_22;
  v4 = *(_QWORD *)(a1 + 26384);
  if (v4)
    v5 = (uint64_t *)(v4 + 1232);
  else
    v5 = (uint64_t *)(a1 + 19320);
LABEL_30:
  v8 = *v5;
  if (!*v5 || !*(_BYTE *)(v8 + 292))
  {
    if (!*v2)
    {
      result = 0;
      v7 = 1282;
      goto LABEL_27;
    }
    return 0;
  }
  glUnmapBuffer_Core(a1, v8);
  return 1;
}

uint64_t glUnmapBuffer_Core(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;

  v3 = result;
  v4 = (_BYTE *)(result + 32496);
  v5 = a2 + 40;
  if (*(_BYTE *)(a2 + 292) == 2)
  {
    if (*(_BYTE *)(a2 + 298))
    {
      if ((*(_DWORD *)(a2 + 288) & 0x12) == 2)
      {
        *(_BYTE *)(a2 + 298) = 0;
        result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(result + 29448) + 416))(*(_QWORD *)(result + 29016), *(_QWORD *)(v5 + 8 * *(unsigned __int8 *)(result + 32499)), *(_QWORD *)(a2 + 272), *(_QWORD *)(a2 + 280), *(_QWORD *)(a2 + 136) + *(_QWORD *)(a2 + 272));
        if (!(_DWORD)result)
          *(_BYTE *)(a2 + 298) = 1;
      }
    }
    *(_BYTE *)(a2 + 165) = *(_BYTE *)(a2 + 297);
    *(_BYTE *)(a2 + 294) = *(_BYTE *)(a2 + 296);
  }
  *(_QWORD *)(a2 + 272) = 0;
  *(_QWORD *)(a2 + 280) = 0;
  *(_QWORD *)(a2 + 285) = 0;
  if (*(_BYTE *)(a2 + 298))
  {
    *(_QWORD *)(a2 + 192) = 0;
    *(_BYTE *)(a2 + 167) = 1;
    v6 = *v4;
    if (*v4)
    {
      v7 = (_DWORD *)(a2 + 304);
      do
      {
        *v7 |= 4u;
        v7 += 2;
        --v6;
      }
      while (v6);
    }
    return gleDirtyBufferObjectCurrentBindPoints(v3, v5);
  }
  else
  {
    *(_QWORD *)(a2 + 192) = *(_QWORD *)(v3 + 29024);
    *(_BYTE *)(a2 + 167) = 1;
  }
  return result;
}

uint64_t glUnmapBuffer_PackThread(uint64_t a1, int a2)
{
  __int16 *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t result;
  __int16 v6;
  uint64_t v7;

  v2 = (__int16 *)(a1 + 29832);
  if (a2 > 35344)
  {
    if (a2 <= 36333)
    {
      if (a2 != 35345)
      {
        if (a2 == 35982)
        {
          v3 = 26504;
          goto LABEL_29;
        }
LABEL_22:
        if (!*v2)
        {
          result = 0;
          v6 = 1280;
LABEL_27:
          *v2 = v6;
          return result;
        }
        return 0;
      }
    }
    else if (a2 != 36334)
    {
      if (a2 == 36662)
      {
        if ((*(_BYTE *)(a1 + 32501) & 0xFE) != 2)
        {
          v3 = 26520;
          goto LABEL_29;
        }
      }
      else if (a2 == 36663 && (*(_BYTE *)(a1 + 32501) & 0xFE) != 2)
      {
        v3 = 26528;
LABEL_29:
        v4 = (uint64_t *)(a1 + v3);
        goto LABEL_30;
      }
      goto LABEL_22;
    }
    v3 = 26496;
    goto LABEL_29;
  }
  if (a2 > 35050)
  {
    if (a2 == 35051)
    {
      v3 = 26480;
      goto LABEL_29;
    }
    if (a2 == 35052)
    {
      v3 = 26488;
      goto LABEL_29;
    }
    goto LABEL_22;
  }
  if (a2 == 34962)
  {
    v3 = 26464;
    goto LABEL_29;
  }
  if (a2 != 34963)
    goto LABEL_22;
  v4 = *(uint64_t **)(a1 + 26448);
  if (!v4)
    v4 = (uint64_t *)(a1 + 26472);
LABEL_30:
  v7 = *v4;
  if (!v7 || !*(_BYTE *)(v7 + 56))
  {
    if (!*v2)
    {
      result = 0;
      v6 = 1282;
      goto LABEL_27;
    }
    return 0;
  }
  *(_BYTE *)(v7 + 56) = 0;
  *(_DWORD *)gleAddCommand(a1, (uint64_t)glUnmapBuffer_UnpackThread, 4) = a2;
  return 1;
}

uint64_t glUnmapBuffer_UnpackThread(uint64_t a1, int *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;

  v3 = 0;
  v4 = *a2;
  if (v4 <= 35344)
  {
    if (v4 > 35050)
    {
      if (v4 == 35051)
      {
        v3 = *(_QWORD *)(a1 + 19328);
      }
      else if (v4 == 35052)
      {
        v3 = *(_QWORD *)(a1 + 19336);
      }
    }
    else if (v4 == 34962)
    {
      v3 = *(_QWORD *)(a1 + 19312);
    }
    else if (v4 == 34963)
    {
      v5 = *(_QWORD *)(a1 + 26384);
      if (v5)
        v3 = *(_QWORD *)(v5 + 1232);
      else
        v3 = *(_QWORD *)(a1 + 19320);
    }
    goto LABEL_26;
  }
  if (v4 <= 36333)
  {
    if (v4 != 35345)
    {
      if (v4 == 35982)
        v3 = *(_QWORD *)(a1 + 19352);
      goto LABEL_26;
    }
LABEL_19:
    v3 = *(_QWORD *)(a1 + 19344);
    goto LABEL_26;
  }
  switch(v4)
  {
    case 36334:
      goto LABEL_19;
    case 36662:
      if ((*(_BYTE *)(a1 + 32501) & 0xFE) != 2)
      {
        v3 = *(_QWORD *)(a1 + 19368);
        break;
      }
      goto LABEL_21;
    case 36663:
      if ((*(_BYTE *)(a1 + 32501) & 0xFE) != 2)
      {
        v3 = *(_QWORD *)(a1 + 19376);
        break;
      }
LABEL_21:
      v3 = 0;
      break;
  }
LABEL_26:
  glUnmapBuffer_Core(a1, v3);
  return 4;
}

uint64_t glGetBufferParameteriv_Exec(uint64_t a1, int a2, int a3, _DWORD *a4)
{
  uint64_t result;
  uint64_t v6;

  v6 = 0;
  result = gleGetBufferParameterCore(a1, a2, a3, &v6);
  if ((_DWORD)result)
    *a4 = v6;
  return result;
}

uint64_t gleGetBufferParameterCore(uint64_t a1, int a2, int a3, _QWORD *a4)
{
  __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  __int16 v11;

  v4 = (__int16 *)(a1 + 29832);
  if (a2 > 35344)
  {
    if (a2 <= 36333)
    {
      if (a2 != 35345)
      {
        if (a2 != 35982)
          goto LABEL_37;
        v5 = 19352;
        goto LABEL_25;
      }
    }
    else if (a2 != 36334)
    {
      if (a2 == 36662)
      {
        if ((*(_BYTE *)(a1 + 32501) & 0xFE) == 2)
          goto LABEL_37;
        v5 = 19368;
      }
      else
      {
        if (a2 != 36663 || (*(_BYTE *)(a1 + 32501) & 0xFE) == 2)
          goto LABEL_37;
        v5 = 19376;
      }
      goto LABEL_25;
    }
    v5 = 19344;
LABEL_25:
    v7 = (uint64_t *)(a1 + v5);
    goto LABEL_26;
  }
  if (a2 > 35050)
  {
    if (a2 == 35051)
    {
      v5 = 19328;
    }
    else
    {
      if (a2 != 35052)
        goto LABEL_37;
      v5 = 19336;
    }
    goto LABEL_25;
  }
  if (a2 == 34962)
  {
    v5 = 19312;
    goto LABEL_25;
  }
  if (a2 != 34963)
    goto LABEL_37;
  v6 = *(_QWORD *)(a1 + 26384);
  if (v6)
    v7 = (uint64_t *)(v6 + 1232);
  else
    v7 = (uint64_t *)(a1 + 19320);
LABEL_26:
  v8 = *v7;
  if (!v8)
  {
    if (*v4)
      return 0;
    result = 0;
    v11 = 1282;
    goto LABEL_43;
  }
  if (a3 <= 35345)
  {
    if (a3 > 35002)
    {
      if (a3 == 35003)
      {
        v9 = *(unsigned __int16 *)(v8 + 162);
        goto LABEL_48;
      }
      if (a3 == 35004)
      {
        v9 = *(_BYTE *)(v8 + 292) != 0;
        goto LABEL_48;
      }
    }
    else
    {
      if (a3 == 34660)
      {
        v9 = *(_QWORD *)(v8 + 152);
        goto LABEL_48;
      }
      if (a3 == 34661)
      {
        v9 = *(unsigned __int16 *)(v8 + 160);
        goto LABEL_48;
      }
    }
    goto LABEL_37;
  }
  if (a3 <= 37150)
    goto LABEL_37;
  if (a3 == 37151)
  {
    v9 = *(unsigned int *)(v8 + 288);
    goto LABEL_48;
  }
  if (a3 == 37152)
  {
    v9 = *(_QWORD *)(v8 + 280);
    goto LABEL_48;
  }
  if (a3 != 37153)
  {
LABEL_37:
    if (*v4)
      return 0;
    result = 0;
    v11 = 1280;
LABEL_43:
    *v4 = v11;
    return result;
  }
  v9 = *(_QWORD *)(v8 + 272);
LABEL_48:
  *a4 = v9;
  return 1;
}

uint64_t glGetBufferParameteriv_ExecThread(uint64_t a1, int a2, int a3, _DWORD *a4)
{
  uint64_t result;
  uint64_t v9;

  (*(void (**)(void))(a1 + 27752))();
  v9 = 0;
  result = gleGetBufferParameterCore(a1, a2, a3, &v9);
  if ((_DWORD)result)
    *a4 = v9;
  return result;
}

uint64_t glGetBufferParameteri64v_ExecThread(uint64_t a1, int a2, int a3, _QWORD *a4)
{
  (*(void (**)(void))(a1 + 27752))();
  return gleGetBufferParameterCore(a1, a2, a3, a4);
}

uint64_t glGetBufferPointerv_Exec(uint64_t result, int a2, int a3, _QWORD *a4)
{
  __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;

  v4 = (__int16 *)(result + 29832);
  if (a2 > 35344)
  {
    if (a2 <= 36333)
    {
      if (a2 != 35345)
      {
        if (a2 != 35982)
          goto LABEL_30;
        v5 = 19352;
        goto LABEL_25;
      }
    }
    else if (a2 != 36334)
    {
      if (a2 == 36662)
      {
        if ((*(_BYTE *)(result + 32501) & 0xFE) == 2)
          goto LABEL_30;
        v5 = 19368;
      }
      else
      {
        if (a2 != 36663 || (*(_BYTE *)(result + 32501) & 0xFE) == 2)
          goto LABEL_30;
        v5 = 19376;
      }
      goto LABEL_25;
    }
    v5 = 19344;
LABEL_25:
    v7 = (uint64_t *)(result + v5);
    goto LABEL_26;
  }
  if (a2 > 35050)
  {
    if (a2 == 35051)
    {
      v5 = 19328;
    }
    else
    {
      if (a2 != 35052)
        goto LABEL_30;
      v5 = 19336;
    }
    goto LABEL_25;
  }
  if (a2 == 34962)
  {
    v5 = 19312;
    goto LABEL_25;
  }
  if (a2 != 34963)
    goto LABEL_30;
  v6 = *(_QWORD *)(result + 26384);
  if (v6)
    v7 = (uint64_t *)(v6 + 1232);
  else
    v7 = (uint64_t *)(result + 19320);
LABEL_26:
  v8 = *v7;
  if (!v8)
  {
    if (*v4)
      return result;
    v10 = 1282;
LABEL_33:
    *v4 = v10;
    return result;
  }
  if (a3 != 35005)
  {
LABEL_30:
    if (*v4)
      return result;
    v10 = 1280;
    goto LABEL_33;
  }
  if (*(_BYTE *)(v8 + 292))
    v9 = *(_QWORD *)(v8 + 136) + *(_QWORD *)(v8 + 272);
  else
    v9 = 0;
  *a4 = v9;
  return result;
}

uint64_t glGetBufferPointerv_ExecThread(uint64_t a1, int a2, int a3, _QWORD *a4)
{
  (*(void (**)(void))(a1 + 27752))();
  return glGetBufferPointerv_Exec(a1, a2, a3, a4);
}

void glBindBufferRange_Exec(uint64_t a1, int a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  os_unfair_lock_s **v13;
  __int16 *v14;
  __int16 v15;

  if (a2 == 35982)
  {
    if (a3 < 4)
    {
      if (*(__int16 *)(*(_QWORD *)(a1 + 26432) + 42) != -1)
      {
        v14 = (__int16 *)(a1 + 29832);
        if (*(_WORD *)(a1 + 29832))
          return;
        v15 = 1282;
        goto LABEL_16;
      }
      if (!a4)
      {
        os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
        goto LABEL_27;
      }
      if (a6 >= 1 && ((a6 | a5) & 3) == 0)
      {
        v13 = (os_unfair_lock_s **)(a1 + 19296);
        os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
        goto LABEL_22;
      }
    }
    goto LABEL_9;
  }
  if (a2 != 35345)
  {
    v14 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832))
      return;
    v15 = 1280;
    goto LABEL_16;
  }
  v12 = *(_QWORD *)(a1 + 29480);
  if (*(unsigned __int8 *)(v12 + 506) <= a3 || a6 < 1 || ((*(unsigned __int16 *)(v12 + 504) - 1) & a5) != 0)
  {
LABEL_9:
    v14 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832))
      return;
    v15 = 1281;
LABEL_16:
    *v14 = v15;
    return;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  if (!a4)
  {
LABEL_27:
    gleBindBufferObject(a1, a2, a4);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    gleBindBufferRange(a1, a2, a3, a5, a6);
    return;
  }
  v13 = (os_unfair_lock_s **)(a1 + 19296);
LABEL_22:
  if (gleLookupHashObject((uint64_t)&(*v13)[66], a4))
    goto LABEL_27;
  if (!*(_WORD *)(a1 + 29832))
    *(_WORD *)(a1 + 29832) = 1281;
  os_unfair_lock_unlock(*v13 + 81);
}

void gleBindBufferRange(uint64_t a1, int a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _DWORD *v32;
  int v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;

  v9 = a1 + 28652;
  if (a2 == 35982)
  {
    v10 = *(_QWORD *)(a1 + 26432) + 128;
    v11 = *(_QWORD *)(v10 + 8 * a3);
    v12 = *(_QWORD *)(a1 + 19352);
    v13 = 1 << a3;
    if (v12)
    {
      *(_QWORD *)(v10 + 8 * a3) = v12;
      *(_DWORD *)(*(_QWORD *)(a1 + 26432) + 168) |= v13;
      ++*(_DWORD *)(v12 + 20);
      v14 = *(unsigned __int8 *)(v9 + 3844);
      if (*(_BYTE *)(v9 + 3844))
      {
        v15 = (uint64_t *)(v12 + 40);
        v16 = (_QWORD *)(a1 + 8 * a3 + 33552);
        do
        {
          v17 = *v15++;
          *v16 = v17;
          v16 += 209;
          --v14;
        }
        while (v14);
      }
    }
    else
    {
      *(_QWORD *)(v10 + 8 * a3) = 0;
      *(_DWORD *)(*(_QWORD *)(a1 + 26432) + 168) &= ~v13;
      v29 = *(unsigned __int8 *)(v9 + 3844);
      if (*(_BYTE *)(v9 + 3844))
      {
        v30 = (_QWORD *)(a1 + 8 * a3 + 33552);
        do
        {
          *v30 = 0;
          v30 += 209;
          --v29;
        }
        while (v29);
      }
      a4 = 0;
      a5 = 0;
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 26432) + 8 * a3 + 48) = a4;
    *(_QWORD *)(*(_QWORD *)(a1 + 26432) + 8 * a3 + 88) = a5;
    v31 = *(_QWORD *)(a1 + 26432) + 8 * a3;
    gleTransferBufferBindingToGLD(v12, *(_QWORD *)(v31 + 48), *(_QWORD *)(v31 + 88), (uint64_t *)(a1 + 8 * a3 + 17992), (uint64_t *)(a1 + 8 * a3 + 18024), 4, 4);
    *(_DWORD *)v9 = 0;
    v32 = (_DWORD *)(a1 + 1524);
    v33 = 0x40000000;
    goto LABEL_29;
  }
  v18 = *(_QWORD **)(a1 + 24888);
  if (!v18)
  {
    v19 = malloc_type_calloc(0x18uLL, 8uLL, 0x2BF3136CuLL);
    if (!v19
      || (*(_QWORD *)(a1 + 24872) = v19, (v20 = malloc_type_calloc(0x18uLL, 8uLL, 0x2BF3136CuLL)) == 0)
      || (*(_QWORD *)(a1 + 24880) = v20, (v21 = malloc_type_calloc(0x18uLL, 8uLL, 0x2BF3136CuLL)) == 0))
    {
      abort();
    }
    v18 = v21;
    *(_QWORD *)(a1 + 24888) = v21;
  }
  v11 = v18[a3];
  v22 = *(_QWORD *)(a1 + 19344);
  v23 = 1 << a3;
  if (v22)
  {
    v18[a3] = v22;
    *(_QWORD *)(a1 + 8 * (a3 >> 6) + 24896) |= v23;
    v24 = *(_QWORD *)(a1 + 24872);
    *(_QWORD *)(v24 + 8 * a3) = a4;
    *(_QWORD *)(*(_QWORD *)(a1 + 24880) + 8 * a3) = a5;
    ++*(_DWORD *)(v22 + 20);
    v25 = *(unsigned __int8 *)(v9 + 3844);
    if (*(_BYTE *)(v9 + 3844))
    {
      v26 = (uint64_t *)(v22 + 40);
      v27 = (_QWORD *)(a1 + 8 * a3 + 33704);
      do
      {
        v28 = *v26++;
        *v27 = v28;
        v27 += 209;
        --v25;
      }
      while (v25);
    }
  }
  else
  {
    v18[a3] = 0;
    *(_QWORD *)(a1 + 8 * (a3 >> 6) + 24896) &= ~v23;
    v24 = *(_QWORD *)(a1 + 24872);
    *(_QWORD *)(v24 + 8 * a3) = 0;
    *(_QWORD *)(*(_QWORD *)(a1 + 24880) + 8 * a3) = 0;
    v34 = *(unsigned __int8 *)(v9 + 3844);
    if (*(_BYTE *)(v9 + 3844))
    {
      v35 = (_QWORD *)(a1 + 8 * a3 + 33704);
      do
      {
        *v35 = 0;
        v35 += 209;
        --v34;
      }
      while (v34);
    }
    a5 = 0;
  }
  gleTransferBufferBindingToGLD(v22, *(_QWORD *)(v24 + 8 * a3), a5, (uint64_t *)(a1 + 16 * a3 + 18056), (uint64_t *)(a1 + 16 * a3 + 18064), *(unsigned __int16 *)(*(_QWORD *)(a1 + 29480) + 504), 1);
  *(_DWORD *)v9 = 0;
  *(_DWORD *)(a1 + 1532) |= 0x20000000u;
  v36 = *(_QWORD *)(a1 + 24768);
  if (v36 && *(_DWORD *)(v36 + 3780))
  {
    v32 = (_DWORD *)(a1 + 1548);
    v33 = 512;
LABEL_29:
    *v32 |= v33;
  }
  if (v11)
  {
    v37 = *(_DWORD *)(v11 + 20) - 1;
    *(_DWORD *)(v11 + 20) = v37;
    if (!v37)
      gleUnbindAndFreeBufferObject(a1, (_QWORD *)v11);
  }
}

void glBindBufferBase_Exec(uint64_t a1, int a2, unsigned int a3, unsigned int a4)
{
  __int16 *v8;
  __int16 v9;

  if (a2 != 35982)
  {
    if (a2 != 35345)
    {
      v8 = (__int16 *)(a1 + 29832);
      if (*(_WORD *)(a1 + 29832))
        return;
      v9 = 1280;
      goto LABEL_13;
    }
    if (*(unsigned __int8 *)(*(_QWORD *)(a1 + 29480) + 506) > a3)
      goto LABEL_15;
    goto LABEL_6;
  }
  if (a3 >= 4)
  {
LABEL_6:
    v8 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832))
      return;
    v9 = 1281;
    goto LABEL_13;
  }
  if (*(__int16 *)(*(_QWORD *)(a1 + 26432) + 42) == -1)
  {
LABEL_15:
    os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    gleBindBufferObject(a1, a2, a4);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    gleBindBufferRange(a1, a2, a3, 0, 0);
    return;
  }
  v8 = (__int16 *)(a1 + 29832);
  if (!*(_WORD *)(a1 + 29832))
  {
    v9 = 1282;
LABEL_13:
    *v8 = v9;
  }
}

void glBindBufferRange_PackThread(uint64_t a1, int a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  __int16 *v13;
  __int16 v14;
  _QWORD *v15;

  if (a2 == 35982)
  {
    if (a3 < 4)
    {
      if (*(__int16 *)(*(_QWORD *)(a1 + 26432) + 42) != -1)
      {
        v13 = (__int16 *)(a1 + 29832);
        if (*(_WORD *)(a1 + 29832))
          return;
        v14 = 1282;
        goto LABEL_16;
      }
      if (!a4)
      {
LABEL_23:
        gleBindBufferObject_Thread((_QWORD *)a1, a2, a4);
        v15 = gleAddCommand(a1, (uint64_t)glBindBufferRange_UnpackThread, 24);
        *(_DWORD *)v15 = a2;
        *((_DWORD *)v15 + 1) = a3;
        v15[1] = a5;
        v15[2] = a6;
        return;
      }
      if (a6 >= 1 && ((a6 | a5) & 3) == 0)
        goto LABEL_21;
    }
    goto LABEL_9;
  }
  if (a2 != 35345)
  {
    v13 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832))
      return;
    v14 = 1280;
    goto LABEL_16;
  }
  v12 = *(_QWORD *)(a1 + 29480);
  if (*(unsigned __int8 *)(v12 + 506) <= a3 || a6 < 1 || ((*(unsigned __int16 *)(v12 + 504) - 1) & a5) != 0)
  {
LABEL_9:
    v13 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832))
      return;
    v14 = 1281;
LABEL_16:
    *v13 = v14;
    return;
  }
  if (!a4)
    goto LABEL_23;
LABEL_21:
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  if (gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 264, a4))
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    goto LABEL_23;
  }
  if (!*(_WORD *)(a1 + 29832))
    *(_WORD *)(a1 + 29832) = 1281;
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
}

uint64_t glBindBufferRange_UnpackThread(uint64_t a1, uint64_t a2)
{
  gleBindBufferRange(a1, *(_DWORD *)a2, *(_DWORD *)(a2 + 4), *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16));
  return 24;
}

_QWORD *glBindBufferBase_PackThread(_QWORD *result, int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v6;
  __int16 *v7;
  __int16 v8;

  v6 = (uint64_t)result;
  if (a2 != 35982)
  {
    if (a2 != 35345)
    {
      v7 = (__int16 *)(result + 3729);
      if (*((_WORD *)result + 14916))
        return result;
      v8 = 1280;
      goto LABEL_13;
    }
    if (*(unsigned __int8 *)(result[3685] + 506) > a3)
      goto LABEL_14;
LABEL_6:
    v7 = (__int16 *)(result + 3729);
    if (*((_WORD *)result + 14916))
      return result;
    v8 = 1281;
LABEL_13:
    *v7 = v8;
    return result;
  }
  if (a3 >= 4)
    goto LABEL_6;
  if (*(__int16 *)(result[3304] + 42) != -1)
  {
    v7 = (__int16 *)(result + 3729);
    if (*((_WORD *)result + 14916))
      return result;
    v8 = 1282;
    goto LABEL_13;
  }
LABEL_14:
  gleBindBufferObject_Thread(result, a2, a4);
  result = gleAddCommand(v6, (uint64_t)glBindBufferRange_UnpackThread, 24);
  *(_DWORD *)result = a2;
  *((_DWORD *)result + 1) = a3;
  result[1] = 0;
  result[2] = 0;
  return result;
}

uint64_t glCopyBufferSubData_Exec(uint64_t result, int a2, int a3, uint64_t a4, uint64_t a5, size_t a6)
{
  uint64_t v6;
  char v7;
  __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  __int16 v13;
  uint64_t v14;

  v6 = 0;
  v7 = 0;
  v8 = (__int16 *)(result + 29832);
  if (a2 <= 35344)
  {
    if (a2 > 35050)
    {
      if (a2 == 35051)
      {
        v6 = *(_QWORD *)(result + 19328);
      }
      else
      {
        if (a2 != 35052)
          goto LABEL_27;
        v6 = *(_QWORD *)(result + 19336);
      }
    }
    else if (a2 == 34962)
    {
      v6 = *(_QWORD *)(result + 19312);
    }
    else
    {
      if (a2 != 34963)
        goto LABEL_27;
      v9 = *(_QWORD *)(result + 26384);
      if (v9)
        v6 = *(_QWORD *)(v9 + 1232);
      else
        v6 = *(_QWORD *)(result + 19320);
    }
    goto LABEL_26;
  }
  if (a2 <= 36333)
  {
    if (a2 != 35345)
    {
      if (a2 != 35982)
        goto LABEL_27;
      v6 = *(_QWORD *)(result + 19352);
      goto LABEL_26;
    }
    goto LABEL_19;
  }
  if (a2 == 36334)
  {
LABEL_19:
    v6 = *(_QWORD *)(result + 19344);
    goto LABEL_26;
  }
  if (a2 == 36662)
  {
    if ((*(_BYTE *)(result + 32501) & 0xFE) != 2)
    {
      v6 = *(_QWORD *)(result + 19368);
      goto LABEL_26;
    }
LABEL_21:
    v7 = 0;
    v6 = 0;
    goto LABEL_27;
  }
  if (a2 != 36663)
    goto LABEL_27;
  if ((*(_BYTE *)(result + 32501) & 0xFE) == 2)
    goto LABEL_21;
  v6 = *(_QWORD *)(result + 19376);
LABEL_26:
  v7 = 1;
LABEL_27:
  if (a3 > 35344)
  {
    if (a3 <= 36333)
    {
      if (a3 != 35345)
      {
        if (a3 != 35982)
          goto LABEL_48;
        v10 = 19352;
        goto LABEL_53;
      }
    }
    else if (a3 != 36334)
    {
      if (a3 != 36662)
      {
        if (a3 != 36663 || (*(_BYTE *)(result + 32501) & 0xFE) == 2)
          goto LABEL_48;
        v10 = 19376;
        goto LABEL_53;
      }
      if ((*(_BYTE *)(result + 32501) & 0xFE) == 2)
      {
LABEL_48:
        if (*v8)
          return result;
        v13 = 1280;
        goto LABEL_62;
      }
      v10 = 19368;
LABEL_53:
      v12 = (uint64_t *)(result + v10);
      goto LABEL_54;
    }
    v10 = 19344;
    goto LABEL_53;
  }
  if (a3 > 35050)
  {
    if (a3 == 35051)
    {
      v10 = 19328;
    }
    else
    {
      if (a3 != 35052)
        goto LABEL_48;
      v10 = 19336;
    }
    goto LABEL_53;
  }
  if (a3 == 34962)
  {
    v10 = 19312;
    goto LABEL_53;
  }
  if (a3 != 34963)
    goto LABEL_48;
  v11 = *(_QWORD *)(result + 26384);
  if (v11)
    v12 = (uint64_t *)(v11 + 1232);
  else
    v12 = (uint64_t *)(result + 19320);
LABEL_54:
  if ((v7 & 1) == 0)
    goto LABEL_48;
  if (!v6 || (v14 = *v12) == 0 || *(_BYTE *)(v6 + 292) || *(_BYTE *)(v14 + 292))
  {
    if (*v8)
      return result;
    v13 = 1282;
LABEL_62:
    *v8 = v13;
    return result;
  }
  if (((a5 | a4 | a6) & 0x8000000000000000) != 0
    || a6 + a4 > *(_QWORD *)(v6 + 152)
    || a6 + a5 > *(_QWORD *)(v14 + 152)
    || (uint64_t)(a6 + a4) > a5 && (uint64_t)(a6 + a5) > a4 && v6 == v14)
  {
    if (!*v8)
    {
      v13 = 1281;
      goto LABEL_62;
    }
  }
  else if (!*(_BYTE *)(v6 + 164) && !*(_BYTE *)(v14 + 164))
  {
    return glCopyBufferSubData_Core((_QWORD *)result, v6 + 40, v14 + 40, a4, a5, a6);
  }
  return result;
}

uint64_t glCopyBufferSubData_Core(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, size_t a6)
{
  unsigned __int8 *v12;
  uint64_t result;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  _DWORD *v19;

  v12 = (unsigned __int8 *)(a1 + 4062);
  if (!*(_QWORD *)(a3 + 152))
    gfxWaitBufferOnDevices();
  result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t, size_t))(a1[3681] + 424))(a1[3627], *(_QWORD *)(a2 + 8 * v12[3]), *(_QWORD *)(a3 + 8 * v12[3]), a4, a5, a6);
  if ((_DWORD)result)
    goto LABEL_9;
  v14 = (const void *)(*(_QWORD *)(a2 + 96) + a4);
  if (*(_QWORD *)(a2 + 152))
    gleSynchronizeBufferOnCurrentDevicesForRead((uint64_t)a1, a2);
  if ((*(_BYTE *)(a3 + 125) || *(_BYTE *)(a1[3629] + 102))
    && (result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, size_t, const void *))(a1[3681] + 416))(a1[3627], *(_QWORD *)(a3 + 8 * v12[3]), a5, a6, v14), (_DWORD)result))
  {
LABEL_9:
    v15 = a1[3628];
    *(_BYTE *)(a3 + 127) = 0;
    *(_QWORD *)(a3 + 152) = v15;
    v16 = a1[3298];
    if (v16)
      *(_BYTE *)(v16 + 1216) = 0;
  }
  else
  {
    v17 = (void *)(*(_QWORD *)(a3 + 96) + a5);
    if (*(_QWORD *)(a3 + 152))
    {
      gleSynchronizeBufferOnCurrentDevices((uint64_t)a1, a3);
    }
    else if (*(_BYTE *)(a3 + 125))
    {
      (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(a1[3681] + 280))(a1[3627], 3, 0, *(_QWORD *)(a3 + 8 * v12[3]));
    }
    memcpy(v17, v14, a6);
    *(_BYTE *)(a3 + 127) = 1;
    v18 = *v12;
    if (*v12)
    {
      v19 = (_DWORD *)(a3 + 264);
      do
      {
        *v19 |= 4u;
        v19 += 2;
        --v18;
      }
      while (v18);
    }
    return gleDirtyBufferObjectCurrentBindPoints((uint64_t)a1, a3);
  }
  return result;
}

_QWORD *glCopyBufferSubData_PackThread(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *result;

  result = gleAddCommand(a1, (uint64_t)glCopyBufferSubData_UnpackThread, 32);
  *(_DWORD *)result = a2;
  *((_DWORD *)result + 1) = a3;
  result[1] = a4;
  result[2] = a5;
  result[3] = a6;
  return result;
}

uint64_t glCopyBufferSubData_UnpackThread(uint64_t a1, uint64_t a2)
{
  glCopyBufferSubData_Exec(a1, *(_DWORD *)a2, *(_DWORD *)(a2 + 4), *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
  return 32;
}

uint64_t glMapBufferRange_Exec(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  int v20;
  char v21;
  uint64_t *v22;
  __int16 v23;
  int v24;
  uint64_t v25;

  v9 = a1 + 29832;
  if (*(unsigned __int8 *)(a1 + 32492) <= 8u)
    v10 = a5 & 0xFFFFFFF7;
  else
    v10 = a5;
  if (a2 > 35344)
  {
    if (a2 <= 36333)
    {
      if (a2 != 35345)
      {
        if (a2 == 35982)
        {
          v11 = 19352;
          goto LABEL_30;
        }
LABEL_25:
        if (!*(_WORD *)v9)
        {
          v14 = 0;
          v15 = 1280;
LABEL_45:
          *(_WORD *)v9 = v15;
          return v14;
        }
        return 0;
      }
    }
    else if (a2 != 36334)
    {
      if (a2 == 36662)
      {
        if ((*(_BYTE *)(a1 + 32501) & 0xFE) != 2)
        {
          v11 = 19368;
          goto LABEL_30;
        }
      }
      else if (a2 == 36663 && (*(_BYTE *)(a1 + 32501) & 0xFE) != 2)
      {
        v11 = 19376;
LABEL_30:
        v13 = (uint64_t *)(a1 + v11);
        goto LABEL_31;
      }
      goto LABEL_25;
    }
    v11 = 19344;
    goto LABEL_30;
  }
  if (a2 > 35050)
  {
    if (a2 == 35051)
    {
      v11 = 19328;
      goto LABEL_30;
    }
    if (a2 == 35052)
    {
      v11 = 19336;
      goto LABEL_30;
    }
    goto LABEL_25;
  }
  if (a2 == 34962)
  {
    v11 = 19312;
    goto LABEL_30;
  }
  if (a2 != 34963)
    goto LABEL_25;
  v12 = *(_QWORD *)(a1 + 26384);
  if (v12)
    v13 = (uint64_t *)(v12 + 1232);
  else
    v13 = (uint64_t *)(a1 + 19320);
LABEL_31:
  v16 = *v13;
  if (!*v13 || *(_BYTE *)(v16 + 292))
    goto LABEL_40;
  if ((a4 | a3) < 0 || (v17 = *(_QWORD *)(v16 + 152), a4 + a3 > v17) || v10 >= 0x40)
  {
    if (!*(_WORD *)v9)
    {
      v14 = 0;
      v15 = 1281;
      goto LABEL_45;
    }
    return 0;
  }
  if ((v10 & 3) == 0 || (v10 & 1) != 0 && (v10 & 0x2C) != 0 || (v10 & 0x12) == 0x10)
  {
LABEL_40:
    if (!*(_WORD *)v9)
    {
      v14 = 0;
      v15 = 1282;
      goto LABEL_45;
    }
    return 0;
  }
  if (*(_BYTE *)(v16 + 164))
    return 0;
  v19 = *(_QWORD *)(v16 + 136);
  if (!v19 || !*(_QWORD *)(v16 + 144))
    goto LABEL_40;
  v25 = v16 + 40;
  v20 = 1;
  if (a4 && (v10 & 0xC) != 0)
  {
    if (v17 == a4)
      v21 = 8;
    else
      v21 = v10;
    if ((v10 & 4) == 0)
      v21 = v10;
    if ((v21 & 8) != 0)
    {
      v24 = *(unsigned __int16 *)(v16 + 160);
      gleOrphanBufferObject(a1, v25);
      v22 = gleAcquireBufferData(a1, v16 + 136, v17, a2, v24);
      gleApplyBufferData(a1, v25, (uint64_t)v22);
      gleDirtyBufferObjectCurrentBindPoints(a1, v25);
      v19 = *(_QWORD *)(v16 + 136);
      if (v19)
      {
        v20 = 0;
        goto LABEL_60;
      }
      if (!*(_WORD *)v9)
      {
        v14 = 0;
        v15 = 1285;
        goto LABEL_45;
      }
      return 0;
    }
  }
LABEL_60:
  v14 = v19 + a3;
  if ((v10 & 1) != 0)
  {
    if ((v10 & 2) != 0)
      v23 = -30534;
    else
      v23 = -30536;
  }
  else
  {
    if ((v10 & 2) == 0)
      goto LABEL_67;
    v23 = -30535;
  }
  *(_WORD *)(v16 + 162) = v23;
LABEL_67:
  *(_BYTE *)(v16 + 297) = *(_BYTE *)(v16 + 165);
  *(_BYTE *)(v16 + 296) = *(_BYTE *)(v16 + 294);
  *(_BYTE *)(v16 + 165) = (v10 & 0x20) == 0;
  *(_BYTE *)(v16 + 294) = (v10 & 0x10) == 0;
  *(_BYTE *)(v16 + 292) = 2;
  *(_QWORD *)(v16 + 272) = a3;
  *(_QWORD *)(v16 + 280) = a4;
  *(_DWORD *)(v16 + 288) = v10;
  *(_BYTE *)(v16 + 298) = gleNeedsFlushOnUnmap(a1, (_BYTE *)v16);
  if (v20)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 29448) + 1024))(*(_QWORD *)(a1 + 29016), *(_QWORD *)(v25 + 8 * *(unsigned __int8 *)(v9 + 2668)));
    if (*(_QWORD *)(v16 + 192) && !*(_BYTE *)(v16 + 167))
    {
      gleSynchronizeBufferOnCurrentDevices(a1, v25);
    }
    else if (*(_BYTE *)(v16 + 165))
    {
      (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 29448) + 272))(*(_QWORD *)(a1 + 29016), 3, 0, *(_QWORD *)(v25 + 8 * *(unsigned __int8 *)(v9 + 2667)));
      gfxWaitBufferOnDevices();
    }
  }
  return v14;
}

uint64_t glFlushMappedBufferRange_Exec(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  __int16 v8;
  uint64_t v9;

  v4 = (__int16 *)(result + 29832);
  if (a2 > 35344)
  {
    if (a2 <= 36333)
    {
      if (a2 != 35345)
      {
        if (a2 == 35982)
        {
          v5 = 19352;
          goto LABEL_28;
        }
LABEL_22:
        if (*v4)
          return result;
        v8 = 1280;
        goto LABEL_24;
      }
    }
    else if (a2 != 36334)
    {
      if (a2 == 36662)
      {
        if ((*(_BYTE *)(result + 32501) & 0xFE) != 2)
        {
          v5 = 19368;
          goto LABEL_28;
        }
      }
      else if (a2 == 36663 && (*(_BYTE *)(result + 32501) & 0xFE) != 2)
      {
        v5 = 19376;
LABEL_28:
        v7 = (uint64_t *)(result + v5);
        goto LABEL_29;
      }
      goto LABEL_22;
    }
    v5 = 19344;
    goto LABEL_28;
  }
  if (a2 > 35050)
  {
    if (a2 == 35051)
    {
      v5 = 19328;
      goto LABEL_28;
    }
    if (a2 == 35052)
    {
      v5 = 19336;
      goto LABEL_28;
    }
    goto LABEL_22;
  }
  if (a2 == 34962)
  {
    v5 = 19312;
    goto LABEL_28;
  }
  if (a2 != 34963)
    goto LABEL_22;
  v6 = *(_QWORD *)(result + 26384);
  if (v6)
    v7 = (uint64_t *)(v6 + 1232);
  else
    v7 = (uint64_t *)(result + 19320);
LABEL_29:
  v9 = *v7;
  if (!*v7 || !*(_BYTE *)(v9 + 292) || *(_BYTE *)(v9 + 294))
  {
    if (*v4)
      return result;
    v8 = 1282;
    goto LABEL_24;
  }
  if ((a4 | a3) < 0 || (unint64_t)(a4 + a3) > *(_QWORD *)(v9 + 280))
  {
    if (*v4)
      return result;
    v8 = 1281;
LABEL_24:
    *v4 = v8;
    return result;
  }
  if (a4 && !*(_BYTE *)(v9 + 164) && !*(_BYTE *)(v9 + 298))
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(result + 29448) + 416))(*(_QWORD *)(result + 29016), *(_QWORD *)(v9 + 40 + 8 * *(unsigned __int8 *)(result + 32499)));
    if (!(_DWORD)result)
      *(_BYTE *)(v9 + 298) = 1;
  }
  return result;
}

uint64_t glMapBufferRange_ExecThread(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v10;
  char v11;
  __int16 *v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t result;
  __int16 v16;
  BOOL v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  char v22;
  char v23;
  _QWORD *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  v10 = 0;
  v11 = 0;
  v12 = (__int16 *)(a1 + 29832);
  if (a2 <= 35344)
  {
    if (a2 > 35050)
    {
      if (a2 == 35051)
      {
        v10 = *(_QWORD *)(a1 + 26480);
        goto LABEL_26;
      }
      if (a2 == 35052)
      {
        v10 = *(_QWORD *)(a1 + 26488);
        goto LABEL_26;
      }
    }
    else
    {
      if (a2 == 34962)
      {
        v10 = *(_QWORD *)(a1 + 26464);
        goto LABEL_26;
      }
      if (a2 == 34963)
      {
        v13 = *(uint64_t **)(a1 + 26448);
        if (v13)
          v10 = *v13;
        else
          v10 = *(_QWORD *)(a1 + 26472);
        goto LABEL_26;
      }
    }
    goto LABEL_27;
  }
  if (a2 <= 36333)
  {
    if (a2 != 35345)
    {
      if (a2 == 35982)
      {
        v10 = *(_QWORD *)(a1 + 26504);
        goto LABEL_26;
      }
      goto LABEL_27;
    }
LABEL_19:
    v10 = *(_QWORD *)(a1 + 26496);
    goto LABEL_26;
  }
  switch(a2)
  {
    case 36334:
      goto LABEL_19;
    case 36662:
      if ((*(_BYTE *)(a1 + 32501) & 0xFE) != 2)
      {
        v10 = *(_QWORD *)(a1 + 26520);
        goto LABEL_26;
      }
LABEL_21:
      v11 = 0;
      v10 = 0;
      break;
    case 36663:
      if ((*(_BYTE *)(a1 + 32501) & 0xFE) != 2)
      {
        v10 = *(_QWORD *)(a1 + 26528);
LABEL_26:
        v11 = 1;
        break;
      }
      goto LABEL_21;
  }
LABEL_27:
  if (a4 && (a5 & 8) != 0)
  {
    if ((v11 & 1) == 0)
    {
      if (!*v12)
      {
        result = 0;
        v16 = 1280;
        goto LABEL_52;
      }
      return 0;
    }
    if (v10 && !*(_BYTE *)(v10 + 56))
    {
      if ((a4 | a3) < 0 || (v14 = *(_QWORD *)(v10 + 16), a4 + a3 > v14) || a5 >= 0x40)
      {
        if (!*v12)
        {
          result = 0;
          v16 = 1281;
          goto LABEL_52;
        }
        return 0;
      }
      if ((a5 & 3) != 0 && ((a5 & 1) == 0 || (a5 & 0x2C) == 0) && (a5 & 0x12) != 0x10)
      {
        if (*(_BYTE *)(v10 + 28))
          return 0;
        if (*(_QWORD *)v10 && *(_QWORD *)(v10 + 8))
        {
          if (v14 == a4)
            v22 = 8;
          else
            v22 = a5;
          if ((a5 & 4) != 0)
            v23 = v22;
          else
            v23 = a5;
          v24 = gleAddCommand(a1, (uint64_t)glMapBufferRange_UnpackThread, 96);
          *((_DWORD *)v24 + 16) = a2;
          *((_DWORD *)v24 + 17) = a5;
          v24[9] = a3;
          v24[10] = a4;
          if ((v23 & 8) == 0)
          {
            result = 0;
            v25 = *((_BYTE *)v24 + 88);
LABEL_79:
            *(_BYTE *)(v10 + 56) = v25;
            return result;
          }
          v24[7] = gleAcquireBufferData(a1, v10, *(_QWORD *)(v10 + 16), a2, *(unsigned __int16 *)(v10 + 24));
          *(_WORD *)(v10 + 26) = -30535;
          v28 = *(_OWORD *)v10;
          v29 = *(_OWORD *)(v10 + 16);
          v30 = *(_OWORD *)(v10 + 32);
          v24[6] = *(_QWORD *)(v10 + 48);
          *((_OWORD *)v24 + 1) = v29;
          *((_OWORD *)v24 + 2) = v30;
          *(_OWORD *)v24 = v28;
          v31 = *(_QWORD *)v10;
          if (*(_QWORD *)v10)
          {
            v25 = 2;
            *((_BYTE *)v24 + 88) = 2;
            result = v31 + a3;
            goto LABEL_79;
          }
          if (!*v12)
          {
            result = 0;
            v16 = 1285;
            goto LABEL_52;
          }
          return 0;
        }
      }
    }
    if (!*v12)
    {
      result = 0;
      v16 = 1282;
LABEL_52:
      *v12 = v16;
      return result;
    }
    return 0;
  }
  (*(void (**)(uint64_t))(a1 + 27752))(a1);
  result = glMapBufferRange_Exec(a1, a2, a3, a4, a5);
  if (result)
  {
    if (a2 <= 35344)
    {
      if (a2 > 35050)
      {
        v17 = a2 == 35051;
        v18 = (uint64_t *)(a1 + 19328);
        v19 = 19336;
LABEL_56:
        v21 = (uint64_t *)(a1 + v19);
        if (!v17)
          v18 = v21;
        goto LABEL_75;
      }
      if (a2 != 34962)
      {
        v26 = *(_QWORD *)(a1 + 26384);
        if (v26)
          v18 = (uint64_t *)(v26 + 1232);
        else
          v18 = (uint64_t *)(a1 + 19320);
        goto LABEL_75;
      }
      v20 = 19312;
    }
    else
    {
      if (a2 <= 36333)
      {
        if (a2 != 35345)
        {
          v20 = 19352;
          goto LABEL_74;
        }
      }
      else if (a2 != 36334)
      {
        v17 = a2 == 36662;
        v18 = (uint64_t *)(a1 + 19368);
        v19 = 19376;
        goto LABEL_56;
      }
      v20 = 19344;
    }
LABEL_74:
    v18 = (uint64_t *)(a1 + v20);
LABEL_75:
    v27 = *v18;
    *(_BYTE *)(v10 + 56) = 2;
    *(_WORD *)(v10 + 26) = *(_WORD *)(v27 + 162);
  }
  return result;
}

uint64_t glMapBufferRange_UnpackThread(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  int v11;
  int v12;
  int v13;

  v4 = 0;
  v5 = (_BYTE *)(a1 + 32481);
  v6 = *((_DWORD *)a2 + 16);
  if (v6 <= 35344)
  {
    if (v6 > 35050)
    {
      if (v6 == 35051)
      {
        v4 = *(_QWORD *)(a1 + 19328);
      }
      else if (v6 == 35052)
      {
        v4 = *(_QWORD *)(a1 + 19336);
      }
    }
    else if (v6 == 34962)
    {
      v4 = *(_QWORD *)(a1 + 19312);
    }
    else if (v6 == 34963)
    {
      v7 = *(_QWORD *)(a1 + 26384);
      if (v7)
        v4 = *(_QWORD *)(v7 + 1232);
      else
        v4 = *(_QWORD *)(a1 + 19320);
    }
    goto LABEL_26;
  }
  if (v6 <= 36333)
  {
    if (v6 != 35345)
    {
      if (v6 == 35982)
        v4 = *(_QWORD *)(a1 + 19352);
      goto LABEL_26;
    }
LABEL_19:
    v4 = *(_QWORD *)(a1 + 19344);
    goto LABEL_26;
  }
  if (v6 == 36334)
    goto LABEL_19;
  if (v6 != 36662)
  {
    if (v6 != 36663)
      goto LABEL_26;
    if ((*(_BYTE *)(a1 + 32501) & 0xFE) != 2)
    {
      v4 = *(_QWORD *)(a1 + 19376);
      goto LABEL_26;
    }
    goto LABEL_21;
  }
  if ((*(_BYTE *)(a1 + 32501) & 0xFE) == 2)
  {
LABEL_21:
    v4 = 0;
    goto LABEL_26;
  }
  v4 = *(_QWORD *)(a1 + 19368);
LABEL_26:
  if (*((_BYTE *)a2 + 88) == 2)
  {
    gleOrphanBufferObject(a1, v4 + 40);
    v8 = *a2;
    v9 = a2[1];
    v10 = a2[2];
    *(_QWORD *)(v4 + 184) = *((_QWORD *)a2 + 6);
    *(_OWORD *)(v4 + 168) = v10;
    *(_OWORD *)(v4 + 152) = v9;
    *(_OWORD *)(v4 + 136) = v8;
    gleApplyBufferData(a1, v4 + 40, *((_QWORD *)a2 + 7));
    gleDirtyBufferObjectCurrentBindPoints(a1, v4 + 40);
  }
  *(_BYTE *)(v4 + 297) = *(_BYTE *)(v4 + 165);
  *(_BYTE *)(v4 + 296) = *(_BYTE *)(v4 + 294);
  v11 = *((_DWORD *)a2 + 17);
  *(_BYTE *)(v4 + 165) = (v11 & 0x20) == 0;
  v12 = *((_DWORD *)a2 + 17) & 0x10;
  *(_BYTE *)(v4 + 294) = v12 == 0;
  *(_BYTE *)(v4 + 292) = *((_BYTE *)a2 + 88);
  *(_QWORD *)(v4 + 272) = *((_QWORD *)a2 + 9);
  *(_QWORD *)(v4 + 280) = *((_QWORD *)a2 + 10);
  *(_DWORD *)(v4 + 288) = *((_DWORD *)a2 + 17);
  LOBYTE(v13) = 1;
  if (*v5 && v12 && ((v11 & 0x20) == 0 || *(_BYTE *)(*(_QWORD *)(a1 + 29032) + 102)))
  {
    if (*(_BYTE *)(v4 + 167))
      v13 = (*(unsigned __int8 *)(v4 + 8 * v5[18] + 304) >> 2) & 1;
    else
      LOBYTE(v13) = 0;
  }
  *(_BYTE *)(v4 + 298) = v13;
  return 96;
}

_QWORD *glFlushMappedBufferRange_PackThread(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;

  result = gleAddCommand(a1, (uint64_t)glFlushMappedBufferRange_UnpackThread, 24);
  *((_DWORD *)result + 4) = a2;
  *result = a3;
  result[1] = a4;
  return result;
}

uint64_t glFlushMappedBufferRange_UnpackThread(uint64_t a1, uint64_t a2)
{
  glFlushMappedBufferRange_Exec(a1, *(_DWORD *)(a2 + 16), *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  return 24;
}

_QWORD *glClear_Comp(uint64_t a1, int a2)
{
  _QWORD *result;

  result = gleAddCommand(a1, (uint64_t)glClear_ListExec, 4);
  *(_DWORD *)result = a2;
  return result;
}

uint64_t glClear_ListExec(unint64_t a1, unsigned int *a2, double a3, double a4, double a5)
{
  glClear_Exec(a1, *a2, a3, a4, a5);
  return 4;
}

uint64_t glClearBufferfv_Exec(uint64_t result, int a2, unsigned int a3, float32x4_t *a4, double a5, double a6, double a7)
{
  float32x4_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float32x4_t v11;
  int v12;
  int v13;
  __int16 v14;
  _BYTE *v15;
  int v16;
  const float *v17;
  float32x4_t v18;
  const float *v19;
  float32x4_t v20;
  int v21;
  float32x4_t v22;
  float32x4_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;

  v7 = a4;
  v8 = result;
  v26 = *MEMORY[0x24BDAC8D0];
  v9 = result + 29832;
  v10 = *(_QWORD *)(result + 29480);
  if (!*(_BYTE *)(v10 + 110))
  {
    switch(a2)
    {
      case 6144:
        v13 = 0x4000;
        break;
      case 6145:
        v13 = 256;
        break;
      case 6146:
        LODWORD(a5) = a4->i32[0];
        v23.i32[1] = a4->i32[0];
        v13 = 1024;
        v7 = &v23;
        break;
      default:
        goto LABEL_11;
    }
    return glClearBuffer_Core(result, v13, a3, 1, v7->f32, a5, a6, a7);
  }
  v23 = 0uLL;
  v25 = 0;
  v24 = 0;
  if (a2 == 6144)
  {
    if ((a3 & 0x80000000) == 0 && *(unsigned __int8 *)(v10 + 21) > a3)
    {
      v12 = 1 << a3;
      v11 = *a4;
      v22 = *a4;
      v23 = *a4;
      goto LABEL_19;
    }
    goto LABEL_40;
  }
  if (a2 == 6145)
  {
    if (!a3)
    {
      LODWORD(v24) = a4->i32[0];
      v11.i64[0] = 0;
      v22 = 0u;
      v12 = 256;
      goto LABEL_19;
    }
    goto LABEL_40;
  }
  if (a2 != 6146)
  {
LABEL_11:
    if (*(_WORD *)v9)
      return result;
    v14 = 1280;
    goto LABEL_13;
  }
  if (a3)
  {
LABEL_40:
    if (*(_WORD *)v9)
      return result;
    v14 = 1281;
LABEL_13:
    *(_WORD *)v9 = v14;
    return result;
  }
  HIDWORD(v24) = a4->f32[0];
  v11.i64[0] = 0;
  v22 = 0u;
  v12 = 512;
LABEL_19:
  v15 = (_BYTE *)(result + 17984);
  if ((*(_BYTE *)(result + 1540) & 4) != 0)
  {
    result = gleGenerateMatrixIdentifier(result, result + 9488, *(double *)v11.i64, a6, a7);
    *(_DWORD *)(v8 + 19152) = *(_DWORD *)(v8 + 19152) & 0xFFFFFEFF | (((_DWORD)result != -1074791426) << 8);
    *(_DWORD *)(v8 + 29732) = result;
  }
  if ((*(_DWORD *)(v8 + 29800) & 0x743C0478) != 0
    && (result = gleUpdateDrawFramebufferState(v8, *(double *)v11.i64, a6, a7), (_DWORD)result))
  {
    if ((_DWORD)result != 16711680 && !*(_WORD *)v9)
      *(_WORD *)v9 = result;
  }
  else if (!*v15)
  {
    v16 = *(unsigned __int16 *)(v8 + 15342);
    if ((v12 & v16) != 0)
    {
      if ((v12 & v16) != 0
        && !*(_BYTE *)(v9 + 2656)
        && (*(_BYTE *)(*(_QWORD *)(v8 + 29032) + 561) & 0x40) == 0)
      {
        v17 = (const float *)(v8 + 288);
        v18 = vld1q_dup_f32(v17);
        v19 = (const float *)(v8 + 292);
        v20 = vld1q_dup_f32(v19);
        v23 = vminnmq_f32(vmaxnmq_f32(v22, v18), v20);
      }
      v25 = 0;
      result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v8 + 29496) + 208))(*(_QWORD *)(v8 + 29464));
      v21 = *(_DWORD *)(*(_QWORD *)(v8 + 19296) + 316);
      if (*(_DWORD *)(v8 + 29816) != v21)
      {
        if (*(_QWORD *)(v8 + 28960))
        {
          result = gleInvalidateCurrentDrawFramebufferTextures(v8);
          v21 = *(_DWORD *)(*(_QWORD *)(v8 + 19296) + 316);
        }
        *(_DWORD *)(v8 + 29816) = v21;
      }
    }
  }
  return result;
}

uint64_t glClearBuffer_Core(uint64_t result, int a2, unsigned int a3, int a4, float *a5, double a6, double a7, double a8)
{
  uint64_t v9;
  uint64_t v10;
  _WORD *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  __int128 v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  _WORD *v24;
  uint64_t v25;
  int v26;
  __int16 v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  _DWORD *v32;
  int v33;
  uint64_t v34;
  __int128 v35;

  LODWORD(v9) = a2;
  v10 = result;
  v11 = (_WORD *)(result + 29832);
  v12 = result + 17984;
  v13 = (unsigned __int8 *)(result + 15336);
  *(_QWORD *)&v14 = 0;
  v35 = 0u;
  v34 = result + 29832;
  if ((a2 & 0x4000) != 0)
  {
    if ((a3 & 0x80000000) == 0 && *(unsigned __int8 *)(*(_QWORD *)(result + 29480) + 21) > a3)
    {
      v18 = 1 << a3;
      if ((*(_BYTE *)(result + 29803) & 0x10) != 0)
        result = gleUpdateAnyDrawBuffersFloat(result, 0.0, a7, a8);
      v17 = *v13;
      v20 = v13[1];
      v15 = v13[2];
      v16 = v13[3];
      *v13 = v17 & v18;
      v33 = v20;
      v21 = v20 & v18;
      v13[1] = v21;
      v13[2] = v15 & v18;
      v13[3] = v16 & v18;
      v22 = *(_DWORD *)(v12 + 11820) & 0xFFFFFF00 | v21 | v17 & v18 | v15 & v18 | v16 & v18;
      *(_DWORD *)(v12 + 11820) = v22;
      v23 = *(_QWORD *)(v10 + 28960);
      if (v23)
        v24 = (_WORD *)(v23 + 552);
      else
        v24 = (_WORD *)(v12 + 11824);
      *((_WORD *)v13 + 3) = *v24 & v22;
      v14 = *(_OWORD *)(v10 + 15152);
      v35 = v14;
      if (!a4 || *(_BYTE *)(v34 + 2656) || (*(_BYTE *)(*(_QWORD *)(v10 + 29032) + 561) & 0x40) != 0)
      {
        *(float *)(v10 + 15152) = *a5;
        *(float *)(v10 + 15156) = a5[1];
        *(float *)(v10 + 15160) = a5[2];
        *(float *)&v14 = a5[3];
      }
      else
      {
        LODWORD(a7) = *(_DWORD *)(v10 + 288);
        LODWORD(a8) = *(_DWORD *)(v10 + 292);
        *(float *)(v10 + 15152) = fminf(fmaxf(*a5, *(float *)&a7), *(float *)&a8);
        *(float *)(v10 + 15156) = fminf(fmaxf(a5[1], *(float *)&a7), *(float *)&a8);
        *(float *)(v10 + 15160) = fminf(fmaxf(a5[2], *(float *)&a7), *(float *)&a8);
        *(float *)&v14 = fminf(fmaxf(a5[3], *(float *)&a7), *(float *)&a8);
      }
      *(_DWORD *)(v10 + 15164) = v14;
      *(_DWORD *)(v12 + 10668) = 0;
      *(_DWORD *)(v12 + 11816) |= 0x40008u;
LABEL_17:
      v25 = 0;
      if ((v9 & 0x100) != 0)
      {
        LOWORD(v18) = v18 | 0x100;
        v25 = *(_QWORD *)(v10 + 15128);
        a7 = 0.0;
        a8 = 1.0;
        if (*a5 <= 1.0)
          a8 = *a5;
        if (*a5 >= 0.0)
          *(double *)&v14 = a8;
        else
          *(double *)&v14 = 0.0;
        *(_QWORD *)(v10 + 15128) = v14;
        *(_DWORD *)(v12 + 10668) = 0;
        *(_DWORD *)(v12 + 11816) |= 0x10u;
      }
      if ((v9 & 0x400) != 0)
      {
        LOWORD(v18) = v18 | 0x200;
        v26 = *(_DWORD *)(v10 + 15172);
        *(_DWORD *)(v10 + 15172) = *((unsigned __int8 *)a5 + 4);
        *(_DWORD *)(v12 + 10668) = 0;
        *(_DWORD *)(v12 + 11816) |= 0x20u;
      }
      else
      {
        v26 = 0;
      }
      if ((*(_BYTE *)(v10 + 1540) & 4) != 0)
      {
        result = gleGenerateMatrixIdentifier(v10, v10 + 9488, *(double *)&v14, a7, a8);
        *(_DWORD *)(v12 + 1168) = *(_DWORD *)(v12 + 1168) & 0xFFFFFEFF | (((_DWORD)result != -1074791426) << 8);
        *(_DWORD *)(v12 + 11748) = result;
      }
      if ((*(_DWORD *)(v12 + 11816) & 0x743C0478) != 0
        && (result = gleUpdateDrawFramebufferState(v10, *(double *)&v14, a7, a8), (_DWORD)result))
      {
        if ((_DWORD)result != 16711680 && !*(_WORD *)v34)
          *(_WORD *)v34 = result;
      }
      else if (!*(_BYTE *)v12)
      {
        v27 = v18 & *((_WORD *)v13 + 3);
        if (v27)
        {
          v28 = v9 & 0xFFFFFEFF;
          if ((v27 & 0x100) != 0)
            v28 = v9;
          if ((v27 & 0x200) != 0)
            v9 = v28;
          else
            v9 = v28 & 0xFFFFFBFF;
          result = (**(uint64_t (***)(_QWORD, uint64_t))(v10 + 29488))(*(_QWORD *)(v10 + 29464), v9);
          v29 = *(_DWORD *)(*(_QWORD *)(v10 + 19296) + 316);
          if (*(_DWORD *)(v12 + 11832) != v29)
          {
            if (*(_QWORD *)(v10 + 28960))
            {
              result = gleInvalidateCurrentDrawFramebufferTextures(v10);
              v29 = *(_DWORD *)(*(_QWORD *)(v10 + 19296) + 316);
            }
            *(_DWORD *)(v12 + 11832) = v29;
          }
        }
      }
      if ((v9 & 0x4000) != 0)
      {
        *v13 = v17;
        v13[1] = v33;
        v13[2] = v15;
        v13[3] = v16;
        v30 = *(_DWORD *)(v12 + 11820) & 0xFFFFFF00 | v15 | v33 | v16 | v17;
        *(_DWORD *)(v12 + 11820) = v30;
        v31 = *(_QWORD *)(v10 + 28960);
        if (v31)
          v32 = (_DWORD *)(v31 + 552);
        else
          v32 = (_DWORD *)(v12 + 11824);
        *((_WORD *)v13 + 3) = *v32 & v30;
        *(_OWORD *)(v10 + 15152) = v35;
        *(_DWORD *)(v12 + 10668) = 0;
        *(_DWORD *)(v12 + 11816) |= 0x40008u;
        if ((v9 & 0x100) == 0)
        {
LABEL_47:
          if ((v9 & 0x400) == 0)
            return result;
LABEL_54:
          *(_DWORD *)(v10 + 15172) = v26;
          *(_DWORD *)(v12 + 10668) = 0;
          *(_DWORD *)(v12 + 11816) |= 0x20u;
          return result;
        }
      }
      else if ((v9 & 0x100) == 0)
      {
        goto LABEL_47;
      }
      *(_QWORD *)(v10 + 15128) = v25;
      *(_DWORD *)(v12 + 10668) = 0;
      *(_DWORD *)(v12 + 11816) |= 0x10u;
      if ((v9 & 0x400) == 0)
        return result;
      goto LABEL_54;
    }
  }
  else if (!a3)
  {
    v33 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    LOWORD(v18) = 0;
    goto LABEL_17;
  }
  if (!*v11)
    *v11 = 1281;
  return result;
}

uint64_t glClearBufferiv_Exec(uint64_t result, int a2, unsigned int a3, float *a4, __n128 a5, double a6, double a7)
{
  float *v7;
  uint64_t v8;
  __int16 *v9;
  uint64_t v10;
  int v11;
  int v12;
  __int16 v13;
  _BYTE *v14;
  unsigned int v15;
  int v16;
  __n128 v17;
  uint64_t v18;
  int v19;
  uint64_t v20;

  v7 = a4;
  v8 = result;
  v20 = *MEMORY[0x24BDAC8D0];
  v9 = (__int16 *)(result + 29832);
  v10 = *(_QWORD *)(result + 29480);
  if (!*(_BYTE *)(v10 + 110))
  {
    switch(a2)
    {
      case 6144:
        v12 = 0x4000;
        break;
      case 6145:
        v12 = 256;
        break;
      case 6146:
        v17.n128_f32[1] = *a4;
        v12 = 1024;
        v7 = (float *)&v17;
        break;
      default:
        goto LABEL_11;
    }
    return glClearBuffer_Core(result, v12, a3, 0, v7, a5.n128_f64[0], a6, a7);
  }
  v17 = 0uLL;
  v19 = 0;
  v18 = 0;
  if (a2 == 6144)
  {
    if ((a3 & 0x80000000) == 0 && *(unsigned __int8 *)(v10 + 21) > a3)
    {
      a5 = *(__n128 *)a4;
      v11 = 1 << a3;
      v17 = *(__n128 *)a4;
      v19 = 1;
      goto LABEL_19;
    }
    goto LABEL_36;
  }
  if (a2 == 6145)
  {
    if (!a3)
    {
      *(float *)&v18 = *a4;
      v19 = 1;
      v11 = 256;
      goto LABEL_19;
    }
    goto LABEL_36;
  }
  if (a2 != 6146)
  {
LABEL_11:
    if (*v9)
      return result;
    v13 = 1280;
    goto LABEL_13;
  }
  if (a3)
  {
LABEL_36:
    if (*v9)
      return result;
    v13 = 1281;
LABEL_13:
    *v9 = v13;
    return result;
  }
  *((float *)&v18 + 1) = *a4;
  v11 = 512;
LABEL_19:
  v14 = (_BYTE *)(result + 17984);
  if ((*(_BYTE *)(result + 1540) & 4) != 0)
  {
    result = gleGenerateMatrixIdentifier(result, result + 9488, a5.n128_f64[0], a6, a7);
    *(_DWORD *)(v8 + 19152) = *(_DWORD *)(v8 + 19152) & 0xFFFFFEFF | (((_DWORD)result != -1074791426) << 8);
    *(_DWORD *)(v8 + 29732) = result;
  }
  if ((*(_DWORD *)(v8 + 29800) & 0x743C0478) != 0
    && (result = gleUpdateDrawFramebufferState(v8, a5.n128_f64[0], a6, a7), (_DWORD)result))
  {
    if ((_DWORD)result != 16711680 && !*v9)
      *v9 = result;
  }
  else if (!*v14)
  {
    v15 = *(unsigned __int16 *)(v8 + 15342);
    if ((v11 & v15) != 0)
    {
      result = (*(uint64_t (**)(_QWORD, _QWORD, __n128 *))(*(_QWORD *)(v8 + 29496) + 208))(*(_QWORD *)(v8 + 29464), v11 & v15, &v17);
      v16 = *(_DWORD *)(*(_QWORD *)(v8 + 19296) + 316);
      if (*(_DWORD *)(v8 + 29816) != v16)
      {
        if (*(_QWORD *)(v8 + 28960))
        {
          result = gleInvalidateCurrentDrawFramebufferTextures(v8);
          v16 = *(_DWORD *)(*(_QWORD *)(v8 + 19296) + 316);
        }
        *(_DWORD *)(v8 + 29816) = v16;
      }
    }
  }
  return result;
}

uint64_t glClearBufferuiv_Exec(uint64_t result, int a2, unsigned int a3, float *a4, __n128 a5, double a6, double a7)
{
  float *v7;
  uint64_t v8;
  __int16 *v9;
  uint64_t v10;
  int v11;
  int v12;
  __int16 v13;
  _BYTE *v14;
  unsigned int v15;
  int v16;
  __n128 v17;
  uint64_t v18;
  int v19;
  uint64_t v20;

  v7 = a4;
  v8 = result;
  v20 = *MEMORY[0x24BDAC8D0];
  v9 = (__int16 *)(result + 29832);
  v10 = *(_QWORD *)(result + 29480);
  if (!*(_BYTE *)(v10 + 110))
  {
    switch(a2)
    {
      case 6144:
        v12 = 0x4000;
        break;
      case 6145:
        v12 = 256;
        break;
      case 6146:
        v17.n128_f32[1] = *a4;
        v12 = 1024;
        v7 = (float *)&v17;
        break;
      default:
        goto LABEL_11;
    }
    return glClearBuffer_Core(result, v12, a3, 0, v7, a5.n128_f64[0], a6, a7);
  }
  v17 = 0uLL;
  v19 = 0;
  v18 = 0;
  if (a2 == 6144)
  {
    if ((a3 & 0x80000000) == 0 && *(unsigned __int8 *)(v10 + 21) > a3)
    {
      a5 = *(__n128 *)a4;
      v11 = 1 << a3;
      v17 = *(__n128 *)a4;
      v19 = 1;
      goto LABEL_19;
    }
    goto LABEL_36;
  }
  if (a2 == 6145)
  {
    if (!a3)
    {
      *(float *)&v18 = *a4;
      v19 = 1;
      v11 = 256;
      goto LABEL_19;
    }
    goto LABEL_36;
  }
  if (a2 != 6146)
  {
LABEL_11:
    if (*v9)
      return result;
    v13 = 1280;
    goto LABEL_13;
  }
  if (a3)
  {
LABEL_36:
    if (*v9)
      return result;
    v13 = 1281;
LABEL_13:
    *v9 = v13;
    return result;
  }
  *((float *)&v18 + 1) = *a4;
  v11 = 512;
LABEL_19:
  v14 = (_BYTE *)(result + 17984);
  if ((*(_BYTE *)(result + 1540) & 4) != 0)
  {
    result = gleGenerateMatrixIdentifier(result, result + 9488, a5.n128_f64[0], a6, a7);
    *(_DWORD *)(v8 + 19152) = *(_DWORD *)(v8 + 19152) & 0xFFFFFEFF | (((_DWORD)result != -1074791426) << 8);
    *(_DWORD *)(v8 + 29732) = result;
  }
  if ((*(_DWORD *)(v8 + 29800) & 0x743C0478) != 0
    && (result = gleUpdateDrawFramebufferState(v8, a5.n128_f64[0], a6, a7), (_DWORD)result))
  {
    if ((_DWORD)result != 16711680 && !*v9)
      *v9 = result;
  }
  else if (!*v14)
  {
    v15 = *(unsigned __int16 *)(v8 + 15342);
    if ((v11 & v15) != 0)
    {
      result = (*(uint64_t (**)(_QWORD, _QWORD, __n128 *))(*(_QWORD *)(v8 + 29496) + 208))(*(_QWORD *)(v8 + 29464), v11 & v15, &v17);
      v16 = *(_DWORD *)(*(_QWORD *)(v8 + 19296) + 316);
      if (*(_DWORD *)(v8 + 29816) != v16)
      {
        if (*(_QWORD *)(v8 + 28960))
        {
          result = gleInvalidateCurrentDrawFramebufferTextures(v8);
          v16 = *(_DWORD *)(*(_QWORD *)(v8 + 19296) + 316);
        }
        *(_DWORD *)(v8 + 29816) = v16;
      }
    }
  }
  return result;
}

uint64_t glClearBufferfi_Exec(uint64_t result, int a2, unsigned int a3, unsigned int a4, double a5, double a6, double a7)
{
  uint64_t v7;
  __int16 *v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  __int16 v12;
  _QWORD v13[2];
  int v14;
  unsigned int v15;
  int v16;
  uint64_t v17;

  v7 = result;
  v17 = *MEMORY[0x24BDAC8D0];
  v8 = (__int16 *)(result + 29832);
  if (!*(_BYTE *)(*(_QWORD *)(result + 29480) + 110))
  {
    if (a2 == 34041)
    {
      v13[0] = __PAIR64__(a4, LODWORD(a5));
      return glClearBuffer_Core(result, 1280, a3, 0, (float *)v13, a5, a6, a7);
    }
    goto LABEL_19;
  }
  v13[0] = 0;
  v13[1] = 0;
  if (a2 != 34041)
  {
LABEL_19:
    if (*v8)
      return result;
    v12 = 1280;
    goto LABEL_21;
  }
  if (a3)
  {
    if (*v8)
      return result;
    v12 = 1281;
LABEL_21:
    *v8 = v12;
    return result;
  }
  v9 = (_BYTE *)(result + 17984);
  v14 = LODWORD(a5);
  v15 = a4;
  if ((*(_BYTE *)(result + 1540) & 4) != 0)
  {
    result = gleGenerateMatrixIdentifier(result, result + 9488, a5, a6, a7);
    *(_DWORD *)(v7 + 19152) = *(_DWORD *)(v7 + 19152) & 0xFFFFFEFF | (((_DWORD)result != -1074791426) << 8);
    *(_DWORD *)(v7 + 29732) = result;
  }
  if ((*(_DWORD *)(v7 + 29800) & 0x743C0478) != 0
    && (result = gleUpdateDrawFramebufferState(v7, a5, a6, a7), (_DWORD)result))
  {
    if ((_DWORD)result != 16711680 && !*v8)
      *v8 = result;
  }
  else if (!*v9)
  {
    v10 = *(_WORD *)(v7 + 15342) & 0x300;
    if ((*(_WORD *)(v7 + 15342) & 0x300) != 0)
    {
      v16 = 0;
      result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD *))(*(_QWORD *)(v7 + 29496) + 208))(*(_QWORD *)(v7 + 29464), v10, v13);
      v11 = *(_DWORD *)(*(_QWORD *)(v7 + 19296) + 316);
      if (*(_DWORD *)(v7 + 29816) != v11)
      {
        if (*(_QWORD *)(v7 + 28960))
        {
          result = gleInvalidateCurrentDrawFramebufferTextures(v7);
          v11 = *(_DWORD *)(*(_QWORD *)(v7 + 19296) + 316);
        }
        *(_DWORD *)(v7 + 29816) = v11;
      }
    }
  }
  return result;
}

_DWORD *glClearBufferfv_PackThread(uint64_t a1, int a2, int a3, _DWORD *a4)
{
  _DWORD *result;

  result = gleAddCommand(a1, (uint64_t)glClearBufferfv_UnpackThread, 24);
  *result = a2;
  result[1] = a3;
  if ((a2 - 6145) >= 2)
  {
    if (a2 == 6144)
    {
      result[2] = *a4;
      result[3] = a4[1];
      result[4] = a4[2];
      result[5] = a4[3];
    }
  }
  else
  {
    result[2] = *a4;
  }
  return result;
}

uint64_t glClearBufferfv_UnpackThread(uint64_t a1, uint64_t a2, double a3, double a4, double a5)
{
  glClearBufferfv_Exec(a1, *(_DWORD *)a2, *(_DWORD *)(a2 + 4), (float32x4_t *)(a2 + 8), a3, a4, a5);
  return 24;
}

_DWORD *glClearBufferiv_PackThread(uint64_t a1, int a2, int a3, _DWORD *a4)
{
  _DWORD *result;

  result = gleAddCommand(a1, (uint64_t)glClearBufferiv_UnpackThread, 24);
  *result = a2;
  result[1] = a3;
  if ((a2 - 6145) >= 2)
  {
    if (a2 == 6144)
    {
      result[2] = *a4;
      result[3] = a4[1];
      result[4] = a4[2];
      result[5] = a4[3];
    }
  }
  else
  {
    result[2] = *a4;
  }
  return result;
}

uint64_t glClearBufferiv_UnpackThread(uint64_t a1, uint64_t a2, __n128 a3, double a4, double a5)
{
  glClearBufferiv_Exec(a1, *(_DWORD *)a2, *(_DWORD *)(a2 + 4), (float *)(a2 + 8), a3, a4, a5);
  return 24;
}

_DWORD *glClearBufferuiv_PackThread(uint64_t a1, int a2, int a3, _DWORD *a4)
{
  _DWORD *result;

  result = gleAddCommand(a1, (uint64_t)glClearBufferuiv_UnpackThread, 24);
  *result = a2;
  result[1] = a3;
  if ((a2 - 6145) >= 2)
  {
    if (a2 == 6144)
    {
      result[2] = *a4;
      result[3] = a4[1];
      result[4] = a4[2];
      result[5] = a4[3];
    }
  }
  else
  {
    result[2] = *a4;
  }
  return result;
}

uint64_t glClearBufferuiv_UnpackThread(uint64_t a1, uint64_t a2, __n128 a3, double a4, double a5)
{
  glClearBufferuiv_Exec(a1, *(_DWORD *)a2, *(_DWORD *)(a2 + 4), (float *)(a2 + 8), a3, a4, a5);
  return 24;
}

_QWORD *glClearBufferfi_PackThread(uint64_t a1, int a2, int a3, int a4, float a5)
{
  _QWORD *result;

  result = gleAddCommand(a1, (uint64_t)glClearBufferfi_UnpackThread, 24);
  *(_DWORD *)result = a2;
  *((_DWORD *)result + 1) = a3;
  if (a2 == 34041)
  {
    *((float *)result + 2) = a5;
    *((_DWORD *)result + 3) = a4;
  }
  return result;
}

uint64_t glClearBufferfi_UnpackThread(uint64_t a1, int *a2, double a3, double a4, double a5)
{
  LODWORD(a3) = a2[2];
  glClearBufferfi_Exec(a1, *a2, a2[1], a2[3], a3, a4, a5);
  return 24;
}

float *glClearColor_FlushExecThread(uint64_t a1, float a2, float a3, float a4, float a5)
{
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  float *result;

  *(_WORD *)(a1 + 32493) &= ~1u;
  v9 = *(_QWORD **)(a1 + 28984);
  v10 = *(_QWORD **)(a1 + 28976);
  if (v9[301])
    v11 = *(_QWORD *)(a1 + 28984);
  else
    v11 = *(_QWORD *)(a1 + 28976);
  *(_QWORD *)(v11 + 2408) = glTexImage2D_PackThread;
  if (v9[307])
    v12 = v9;
  else
    v12 = v10;
  v12[307] = glTexSubImage2D_PackThread;
  if (v9[380])
    v13 = v9;
  else
    v13 = v10;
  v13[380] = glCompressedTexImage2D_PackThread;
  if (v9[383])
    v14 = v9;
  else
    v14 = v10;
  v14[383] = glCompressedTexSubImage2D_PackThread;
  if (!v9[12])
    v9 = v10;
  v9[12] = glClearColor_Comp;
  result = (float *)gleAddCommand(a1, (uint64_t)glClearColor_ListExec, 16);
  *result = a2;
  result[1] = a3;
  result[2] = a4;
  result[3] = a5;
  return result;
}

float *glClearColor_Comp(uint64_t a1, float a2, float a3, float a4, float a5)
{
  float *result;

  result = (float *)gleAddCommand(a1, (uint64_t)glClearColor_ListExec, 16);
  *result = a2;
  result[1] = a3;
  result[2] = a4;
  result[3] = a5;
  return result;
}

uint64_t glClearColor_ListExec(uint64_t a1, uint64_t a2, double a3, double a4, double a5)
{
  LODWORD(a3) = *(_DWORD *)a2;
  LODWORD(a4) = *(_DWORD *)(a2 + 4);
  LODWORD(a5) = *(_DWORD *)(a2 + 8);
  glClearColor_Exec(a1, a3, a4, a5, *(float *)(a2 + 12));
  return 16;
}

uint64_t glClearColor_FlushExec(uint64_t result, double a2, double a3, double a4, float a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  *(_WORD *)(result + 32493) &= ~1u;
  v5 = *(_QWORD **)(result + 28984);
  v6 = *(_QWORD **)(result + 28976);
  if (v5[301])
    v7 = *(_QWORD *)(result + 28984);
  else
    v7 = *(_QWORD *)(result + 28976);
  *(_QWORD *)(v7 + 2408) = glTexImage2D_Exec;
  if (v5[307])
    v8 = v5;
  else
    v8 = v6;
  v8[307] = glTexSubImage2D_Exec;
  if (v5[380])
    v9 = v5;
  else
    v9 = v6;
  v9[380] = glCompressedTexImage2D_Exec;
  if (v5[383])
    v10 = v5;
  else
    v10 = v6;
  v10[383] = glCompressedTexSubImage2D_Exec;
  if (!v5[12])
    v5 = v6;
  v5[12] = glClearColor_Exec;
  return glClearColor_Exec(result, a2, a3, a4, a5);
}

uint64_t glClearColorx_Exec(uint64_t a1, int a2, int a3, int a4, int a5, double a6, double a7, double a8)
{
  *(float *)&a6 = (float)a2 * 0.000015259;
  *(float *)&a7 = (float)a3 * 0.000015259;
  *(float *)&a8 = (float)a4 * 0.000015259;
  return glClearColor_Exec(a1, a6, a7, a8, (float)a5 * 0.000015259);
}

float32x4_t glClearColorx_PackThread(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  int32x4_t v5;
  float32x4_t *v6;
  float32x4_t result;
  float32x4_t v8;

  v5.i64[0] = __PAIR64__(a3, a2);
  v5.i64[1] = __PAIR64__(a5, a4);
  v8 = vcvtq_f32_s32(v5);
  v6 = (float32x4_t *)gleAddCommand(a1, (uint64_t)glClearColor_ListExec, 16);
  result = vmulq_f32(v8, (float32x4_t)vdupq_n_s32(0x37800000u));
  *v6 = result;
  return result;
}

uint64_t glClearDepth_ListExec(uint64_t a1, double *a2)
{
  double v2;
  double v3;
  BOOL v4;
  double v5;

  v2 = *a2;
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 29480) + 110))
  {
    *(_DWORD *)(a1 + 28652) = 0;
    *(_DWORD *)(a1 + 29800) |= 0x10u;
  }
  v3 = 1.0;
  if (v2 <= 1.0)
    v3 = v2;
  v4 = v2 < 0.0;
  v5 = 0.0;
  if (!v4)
    v5 = v3;
  *(double *)(a1 + 15128) = v5;
  return 8;
}

uint64_t glClearDepthf_Exec(uint64_t result, float a2)
{
  double v2;
  BOOL v3;
  double v4;

  if (!*(_BYTE *)(*(_QWORD *)(result + 29480) + 110))
  {
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 29800) |= 0x10u;
  }
  v2 = a2;
  if (a2 > 1.0)
    v2 = 1.0;
  v3 = a2 < 0.0;
  v4 = 0.0;
  if (!v3)
    v4 = v2;
  *(double *)(result + 15128) = v4;
  return result;
}

double *glClearDepthf_PackThread(uint64_t a1, float a2)
{
  double v2;
  double *result;

  v2 = a2;
  result = (double *)gleAddCommand(a1, (uint64_t)glClearDepth_ListExec, 8);
  *result = v2;
  return result;
}

uint64_t glClearDepthx_Exec(uint64_t result, int a2)
{
  float v2;
  double v3;
  BOOL v4;
  double v5;

  if (!*(_BYTE *)(*(_QWORD *)(result + 29480) + 110))
  {
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 29800) |= 0x10u;
  }
  v2 = (float)a2 * 0.000015259;
  v3 = v2;
  if (v2 > 1.0)
    v3 = 1.0;
  v4 = v2 < 0.0;
  v5 = 0.0;
  if (!v4)
    v5 = v3;
  *(double *)(result + 15128) = v5;
  return result;
}

double *glClearDepthx_PackThread(uint64_t a1, int a2)
{
  double v2;
  double *result;

  v2 = (float)((float)a2 * 0.000015259);
  result = (double *)gleAddCommand(a1, (uint64_t)glClearDepth_ListExec, 8);
  *result = v2;
  return result;
}

_QWORD *glClearStencil_Comp(uint64_t a1, int a2)
{
  _QWORD *result;

  result = gleAddCommand(a1, (uint64_t)glClearStencil_ListExec, 4);
  *(_DWORD *)result = a2;
  return result;
}

uint64_t glClearStencil_ListExec(uint64_t a1, unsigned __int8 *a2)
{
  int v2;

  v2 = *a2;
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 29480) + 110))
  {
    *(_DWORD *)(a1 + 28652) = 0;
    *(_DWORD *)(a1 + 29800) |= 0x20u;
  }
  *(_DWORD *)(a1 + 15172) = v2;
  return 4;
}

uint64_t glClipPlane_ListExec(uint64_t a1, uint64_t a2)
{
  glClipPlane_Exec(a1, *(_DWORD *)(a2 + 32), (double *)a2);
  return 40;
}

uint64_t glClipPlane_Exec(uint64_t result, int a2, double *a3)
{
  _DWORD *v3;
  uint64_t v4;
  float32x4_t *v5;
  float *v6;
  float v7;
  float v8;
  float *v9;
  double v10;
  float v11;
  float *v12;
  float v13;
  float *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v3 = (_DWORD *)(result + 28652);
  v4 = (a2 - 12288);
  if (v4 >= 6)
  {
    if (!*(_WORD *)(result + 29832))
      *(_WORD *)(result + 29832) = 1280;
  }
  else
  {
    v5 = (float32x4_t *)result;
    v6 = (float *)(result + 16 * v4 + 17576);
    v7 = *a3;
    v8 = a3[1];
    *(float *)(result + 16 * v4 + 17580) = v8;
    v9 = (float *)(result + 16 * v4 + 17580);
    v10 = a3[3];
    v11 = a3[2];
    *(float *)(result + 16 * v4 + 17584) = v11;
    v12 = (float *)(result + 16 * v4 + 17584);
    *v6 = v7;
    v13 = v10;
    *(float *)(result + 16 * v4 + 17588) = v13;
    v14 = (float *)(result + 16 * v4 + 17588);
    if ((*(_BYTE *)(result + 1544) & 0x10) != 0)
    {
      result = gleModelMatInvert(result);
      v7 = *v6;
      v8 = *v9;
      v11 = *v12;
      v13 = *v14;
    }
    *(float32x4_t *)v6 = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v5[698], v8), v5[697], v7), v5[699], v11), v5[700], v13);
    v15 = v5[1203].i64[0];
    if (v15)
    {
      v16 = *(unsigned __int16 *)(v15 + 2 * v4 + 3768);
      if (v16 <= 0x3FF)
      {
        *(__int32 *)((char *)v5[97].i32 + ((v16 >> 3) & 0x1FFC)) |= 1 << v16;
        v5[95].i32[3] |= 0x800000u;
      }
    }
    v17 = v5[1204].i64[1];
    if (v17)
    {
      v18 = *(unsigned __int16 *)(v17 + 2 * v4 + 3768);
      if (v18 <= 0x3FF)
      {
        *(__int32 *)((char *)v5[121].i32 + ((v18 >> 3) & 0x1FFC)) |= 1 << v18;
        v5[95].i32[3] |= 0x4000000u;
      }
    }
    v19 = v5[1205].i64[0];
    if (v19)
    {
      v20 = *(unsigned __int16 *)(v19 + 2 * v4 + 3768);
      if (v20 <= 0x3FF)
      {
        *(__int32 *)((char *)v5[129].i32 + ((v20 >> 3) & 0x1FFC)) |= 1 << v20;
        v5[95].i32[3] |= 0x8000000u;
      }
    }
    *v3 = 0;
    v5[95].i32[2] |= 0x1000000 << v4;
  }
  return result;
}

uint64_t glClipPlanef_Exec(uint64_t a1, int a2, float32x2_t *a3)
{
  float64x2_t v3;
  _OWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v3 = vcvtq_f64_f32(a3[1]);
  v5[0] = vcvtq_f64_f32(*a3);
  v5[1] = v3;
  return glClipPlane_Exec(a1, a2, (double *)v5);
}

uint64_t glClipPlanex_Exec(uint64_t a1, int a2, int32x2_t *a3)
{
  float32x2_t v3;
  float64x2_t v4;
  _OWORD v6[2];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v3 = (float32x2_t)vdup_n_s32(0x37800000u);
  v4 = vcvtq_f64_f32(vmul_f32(vcvt_f32_s32(a3[1]), v3));
  v6[0] = vcvtq_f64_f32(vmul_f32(vcvt_f32_s32(*a3), v3));
  v6[1] = v4;
  return glClipPlane_Exec(a1, a2, (double *)v6);
}

__n128 glClipPlanef_PackThread(uint64_t a1, int a2, float32x2_t *a3)
{
  _QWORD *v4;
  __n128 result;
  float64x2_t v6;
  float64x2_t v7;

  v6 = vcvtq_f64_f32(*a3);
  v7 = vcvtq_f64_f32(a3[1]);
  v4 = gleAddCommand(a1, (uint64_t)glClipPlane_ListExec, 40);
  *((_DWORD *)v4 + 8) = a2;
  result = (__n128)v7;
  *(float64x2_t *)v4 = v6;
  *((float64x2_t *)v4 + 1) = v7;
  return result;
}

__n128 glClipPlanex_PackThread(uint64_t a1, int a2, int32x2_t *a3)
{
  float32x2_t v4;
  _QWORD *v5;
  __n128 result;
  float64x2_t v7;
  float64x2_t v8;

  v4 = (float32x2_t)vdup_n_s32(0x37800000u);
  v7 = vcvtq_f64_f32(vmul_f32(vcvt_f32_s32(a3[1]), v4));
  v8 = vcvtq_f64_f32(vmul_f32(vcvt_f32_s32(*a3), v4));
  v5 = gleAddCommand(a1, (uint64_t)glClipPlane_ListExec, 40);
  *((_DWORD *)v5 + 8) = a2;
  result = (__n128)v7;
  *(float64x2_t *)v5 = v8;
  *((float64x2_t *)v5 + 1) = v7;
  return result;
}

uint64_t glGetClipPlane_Exec(uint64_t result, int a2, float64x2_t *a3)
{
  float32x2_t *v3;
  float64x2_t v4;

  if ((a2 - 12288) >= 6)
  {
    if (!*(_WORD *)(result + 29832))
      *(_WORD *)(result + 29832) = 1280;
  }
  else
  {
    v3 = (float32x2_t *)(result + 16 * (a2 - 12288));
    v4 = vcvtq_f64_f32(v3[2198]);
    *a3 = vcvtq_f64_f32(v3[2197]);
    a3[1] = v4;
  }
  return result;
}

float64_t glGetClipPlanef_Exec(uint64_t a1, int a2, float32x4_t *a3)
{
  float64_t result;
  float64x2_t v5;
  float64x2_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5 = 0u;
  v6 = 0u;
  glGetClipPlane_Exec(a1, a2, &v5);
  result = v6.f64[0];
  *a3 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v5), v6);
  return result;
}

int32x4_t glGetClipPlanex_Exec(uint64_t a1, int a2, int32x4_t *a3)
{
  float32x4_t v4;
  float32x4_t v5;
  int32x4_t result;
  float64x2_t v7;
  float64x2_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v7 = 0u;
  v8 = 0u;
  glGetClipPlane_Exec(a1, a2, &v7);
  v4.i64[0] = 0x3F0000003F000000;
  v4.i64[1] = 0x3F0000003F000000;
  v5 = vmlaq_f32(v4, (float32x4_t)vdupq_n_s32(0x47800000u), vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v7), v8));
  result = vcvtq_s32_f32((float32x4_t)vbslq_s8((int8x16_t)vcgezq_f32(v5), (int8x16_t)v5, (int8x16_t)vaddq_f32(v5, (float32x4_t)vdupq_n_s32(0xBF7FFE5D))));
  *a3 = result;
  return result;
}

float64_t glGetClipPlanef_ExecThread(uint64_t a1, int a2, float32x4_t *a3)
{
  float64_t result;
  float64x2_t v7;
  float64x2_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(void))(a1 + 27752))();
  v7 = 0u;
  v8 = 0u;
  glGetClipPlane_Exec(a1, a2, &v7);
  result = v8.f64[0];
  *a3 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v7), v8);
  return result;
}

double glGetClipPlanex_ExecThread(uint64_t a1, int a2, int32x4_t *a3)
{
  double result;

  (*(void (**)(void))(a1 + 27752))();
  *(_QWORD *)&result = glGetClipPlanex_Exec(a1, a2, a3).u64[0];
  return result;
}

uint64_t glColor4_ListExec(uint64_t a1, _OWORD *a2)
{
  *(_OWORD *)(a1 + 8464) = *a2;
  return 16;
}

float *glColor4f_Comp(uint64_t a1, float a2, float a3, float a4, float a5)
{
  float *result;

  result = (float *)gleAddCommand(a1, (uint64_t)glColor4_ListExec, 16);
  *result = a2;
  result[1] = a3;
  result[2] = a4;
  result[3] = a5;
  return result;
}

float *glColor4f_Exec(float *result, float a2, float a3, float a4, float a5)
{
  result[2116] = a2;
  result[2117] = a3;
  result[2118] = a4;
  result[2119] = a5;
  return result;
}

float32x4_t glColor4x_Exec(float32x4_t *a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  int32x4_t v5;
  float32x4_t result;

  v5.i64[0] = __PAIR64__(a3, a2);
  v5.i64[1] = __PAIR64__(a5, a4);
  result = vmulq_f32(vcvtq_f32_s32(v5), (float32x4_t)vdupq_n_s32(0x37800000u));
  a1[529] = result;
  return result;
}

float32x4_t glColor4x_PackThread(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  int32x4_t v5;
  float32x4_t *v6;
  float32x4_t result;
  float32x4_t v8;

  v5.i64[0] = __PAIR64__(a3, a2);
  v5.i64[1] = __PAIR64__(a5, a4);
  v8 = vcvtq_f32_s32(v5);
  v6 = (float32x4_t *)gleAddCommand(a1, (uint64_t)glColor4_ListExec, 16);
  result = vmulq_f32(v8, (float32x4_t)vdupq_n_s32(0x37800000u));
  *v6 = result;
  return result;
}

float glColor4ub_Comp(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v9;
  _QWORD *v10;
  float result;

  v9 = *(_QWORD *)(a1 + 19240) + 128;
  v10 = gleAddCommand(a1, (uint64_t)glColor4_ListExec, 16);
  *(_DWORD *)v10 = *(_DWORD *)(v9 + 4 * a2);
  *((_DWORD *)v10 + 1) = *(_DWORD *)(v9 + 4 * a3);
  *((_DWORD *)v10 + 2) = *(_DWORD *)(v9 + 4 * a4);
  result = *(float *)(v9 + 4 * a5);
  *((float *)v10 + 3) = result;
  return result;
}

float glColor4ub_Exec(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v5;
  float result;
  int v7;
  int v8;
  int v9;

  v5 = *(_QWORD *)(a1 + 19240) + 128;
  result = *(float *)(v5 + 4 * a2);
  v7 = *(_DWORD *)(v5 + 4 * a3);
  v8 = *(_DWORD *)(v5 + 4 * a4);
  v9 = *(_DWORD *)(v5 + 4 * a5);
  *(float *)(a1 + 8464) = result;
  *(_DWORD *)(a1 + 8468) = v7;
  *(_DWORD *)(a1 + 8472) = v8;
  *(_DWORD *)(a1 + 8476) = v9;
  return result;
}

_QWORD *glCullFace_Comp(uint64_t a1, int a2)
{
  _QWORD *result;

  result = gleAddCommand(a1, (uint64_t)glCullFace_ListExec, 4);
  *(_DWORD *)result = a2;
  return result;
}

uint64_t glCullFace_ListExec(uint64_t a1, int *a2)
{
  glCullFace_Exec(a1, *a2);
  return 4;
}

void glLabelObjectEXT_Exec(uint64_t a1, int a2, unsigned int a3, int a4, char *a5)
{
  int v5;

  if (a2 > 36159)
  {
    if ((a2 - 37201) <= 3 && a2 != 37202 || (a2 - 36160) < 2 || a2 == 36386)
      goto LABEL_21;
  }
  else
  {
    if (a2 > 35410)
    {
      if (a2 == 35411 || a2 == 35648)
        goto LABEL_21;
      v5 = 35656;
    }
    else
    {
      if (a2 == 5890 || a2 == 33510)
        goto LABEL_21;
      v5 = 35407;
    }
    if (a2 == v5)
    {
LABEL_21:
      gleLabelObject(a1, a2, a3, a4, a5);
      return;
    }
  }
  if (!*(_WORD *)(a1 + 29832))
    *(_WORD *)(a1 + 29832) = 1280;
}

void glGetObjectLabelEXT_Exec(uint64_t a1, int a2, unsigned int a3, int a4, _DWORD *a5, _BYTE *a6)
{
  int v6;

  if (a2 > 36159)
  {
    if ((a2 - 37201) <= 3 && a2 != 37202 || (a2 - 36160) < 2 || a2 == 36386)
      goto LABEL_21;
  }
  else
  {
    if (a2 > 35410)
    {
      if (a2 == 35411 || a2 == 35648)
        goto LABEL_21;
      v6 = 35656;
    }
    else
    {
      if (a2 == 5890 || a2 == 33510)
        goto LABEL_21;
      v6 = 35407;
    }
    if (a2 == v6)
    {
LABEL_21:
      gleGetObjectLabel(a1, a2, a3, a4, a5, a6);
      return;
    }
  }
  if (!*(_WORD *)(a1 + 29832))
    *(_WORD *)(a1 + 29832) = 1280;
}

void glLabelObjectEXT_ExecThread(uint64_t a1, int a2, unsigned int a3, int a4, char *a5)
{
  (*(void (**)(void))(a1 + 27752))();
  glLabelObjectEXT_Exec(a1, a2, a3, a4, a5);
}

void glGetObjectLabelEXT_ExecThread(uint64_t a1, int a2, unsigned int a3, int a4, _DWORD *a5, _BYTE *a6)
{
  (*(void (**)(void))(a1 + 27752))();
  glGetObjectLabelEXT_Exec(a1, a2, a3, a4, a5, a6);
}

void glLabelObjectWithResponsibleProcessAPPLE_Exec(uint64_t a1, int a2, unsigned int a3, int a4)
{
  int v4;

  if (a2 > 36159)
  {
    if ((a2 - 37201) <= 3 && a2 != 37202 || (a2 - 36160) < 2 || a2 == 36386)
      goto LABEL_21;
  }
  else
  {
    if (a2 > 35410)
    {
      if (a2 == 35411 || a2 == 35648)
        goto LABEL_21;
      v4 = 35656;
    }
    else
    {
      if (a2 == 5890 || a2 == 33510)
        goto LABEL_21;
      v4 = 35407;
    }
    if (a2 == v4)
    {
LABEL_21:
      gleLabelObjectWithResponsibleProcess(a1, a2, a3, a4);
      return;
    }
  }
  if (!*(_WORD *)(a1 + 29832))
    *(_WORD *)(a1 + 29832) = 1280;
}

void glLabelObjectWithResponsibleProcessAPPLE_ExecThread(uint64_t a1, int a2, unsigned int a3, int a4)
{
  (*(void (**)(void))(a1 + 27752))();
  glLabelObjectWithResponsibleProcessAPPLE_Exec(a1, a2, a3, a4);
}

_QWORD *glDepthFunc_Comp(uint64_t a1, int a2)
{
  _QWORD *result;

  result = gleAddCommand(a1, (uint64_t)glDepthFunc_ListExec, 4);
  *(_DWORD *)result = a2;
  return result;
}

uint64_t glDepthFunc_ListExec(uint64_t a1, int *a2)
{
  glDepthFunc_Exec(a1, *a2);
  return 4;
}

uint64_t glDepthRange_ListExec(uint64_t a1, _OWORD *a2)
{
  double v3[3];
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)v3 = *a2;
  glDepthRangeArrayv_Core(a1, 0, 1, v3);
  return 16;
}

uint64_t glDepthRangef_Exec(uint64_t a1, float a2, float a3)
{
  double v4[3];

  v4[2] = *(double *)MEMORY[0x24BDAC8D0];
  v4[0] = a2;
  v4[1] = a3;
  return glDepthRangeArrayv_Core(a1, 0, 1, v4);
}

double *glDepthRangef_PackThread(uint64_t a1, float a2, float a3)
{
  double v3;
  double v4;
  double *result;

  v3 = a2;
  v4 = a3;
  result = (double *)gleAddCommand(a1, (uint64_t)glDepthRange_ListExec, 16);
  *result = v3;
  result[1] = v4;
  return result;
}

uint64_t glDepthRangex_Exec(uint64_t a1, unsigned int a2, unsigned int a3)
{
  float64x2_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v4 = vcvtq_f64_f32(vmul_f32(vcvt_f32_s32((int32x2_t)__PAIR64__(a3, a2)), (float32x2_t)vdup_n_s32(0x37800000u)));
  return glDepthRangeArrayv_Core(a1, 0, 1, v4.f64);
}

double *glDepthRangex_PackThread(uint64_t a1, int a2, int a3)
{
  double v3;
  double v4;
  double *result;

  v3 = (float)((float)a2 * 0.000015259);
  v4 = (float)((float)a3 * 0.000015259);
  result = (double *)gleAddCommand(a1, (uint64_t)glDepthRange_ListExec, 16);
  *result = v3;
  result[1] = v4;
  return result;
}

uint64_t glDepthRangeArrayv_Core(uint64_t result, unsigned int a2, int a3, double *a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  double *v15;
  double v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;

  LODWORD(v5) = a3;
  v6 = a2;
  v7 = result;
  v8 = result + 15580;
  if (a3 + a2 >= 2 && !*(_BYTE *)v8)
    result = gleSwitchToMultiViewportMode(result);
  if ((int)v5 >= 1)
  {
    v9 = 0;
    v10 = v7 + 9216;
    v5 = v5;
    do
    {
      v11 = a4[1];
      if (*a4 <= 1.0)
        v12 = *a4;
      else
        v12 = 1.0;
      if (*a4 < 0.0)
        v12 = 0.0;
      if (v11 <= 1.0)
        v13 = a4[1];
      else
        v13 = 1.0;
      if (v11 < 0.0)
        v13 = 0.0;
      v14 = v10 + 144 * v6;
      v16 = *(double *)(v14 + 64);
      v15 = (double *)(v14 + 64);
      if (v16 != v12 || *(double *)(v10 + 144 * v6 + 72) != v13)
      {
        *v15 = v12;
        *(double *)(v10 + 144 * v6 + 72) = v13;
        result = gleUpdateDepthRangeDataIndexed(v7, v6);
        v9 = 1;
      }
      ++v6;
      a4 += 2;
      --v5;
    }
    while (v5);
    if (v9)
    {
      v17 = *(_QWORD *)(v7 + 19248);
      if (v17)
      {
        v18 = *(unsigned __int16 *)(v17 + 3792);
        if (v18 <= 0x3FF)
        {
          *(_DWORD *)(v7 + ((v18 >> 3) & 0x1FFC) + 1552) |= 1 << v18;
          *(_DWORD *)(v8 + 13072) = 0;
          *(_DWORD *)(v7 + 1532) |= 0x800000u;
        }
      }
      v19 = *(_QWORD *)(v7 + 19272);
      if (v19)
      {
        v20 = *(unsigned __int16 *)(v19 + 3792);
        if (v20 <= 0x3FF)
        {
          *(_DWORD *)(v7 + ((v20 >> 3) & 0x1FFC) + 1936) |= 1 << v20;
          *(_DWORD *)(v8 + 13072) = 0;
          *(_DWORD *)(v7 + 1532) |= 0x4000000u;
        }
      }
      v21 = *(_QWORD *)(v7 + 19280);
      if (v21)
      {
        v22 = *(unsigned __int16 *)(v21 + 3792);
        if (v22 <= 0x3FF)
        {
          *(_DWORD *)(v7 + ((v22 >> 3) & 0x1FFC) + 2064) |= 1 << v22;
          *(_DWORD *)(v8 + 13072) = 0;
          *(_DWORD *)(v7 + 1532) |= 0x8000000u;
        }
      }
    }
  }
  return result;
}

_QWORD *glDrawBuffersARB_Comp(uint64_t a1, int a2, int *a3)
{
  _QWORD *result;
  uint64_t v6;
  _DWORD *v7;
  int v8;

  if (*(unsigned __int8 *)(*(_QWORD *)(a1 + 29480) + 21) < a2)
    return gleSetErrorInList(a1, 1281);
  result = gleAddCommand(a1, (uint64_t)glDrawBuffersARB_ListExec, 36);
  *(_DWORD *)result = a2;
  if (a2 >= 1)
  {
    v6 = a2;
    v7 = (_DWORD *)result + 1;
    do
    {
      v8 = *a3++;
      *v7++ = v8;
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t glDrawBuffersARB_ListExec(uint64_t a1, int *a2)
{
  glDrawBuffersARB_Exec(a1, *a2, a2 + 1);
  return 36;
}

void glDrawBuffersARB_Exec(uint64_t a1, int a2, int *a3)
{
  uint64_t v3;
  unsigned __int8 *v4;
  int v6;
  uint64_t v8;
  _DWORD *v9;
  char v10;
  int v11;
  unsigned __int16 *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  unsigned int v17;
  int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  _WORD *v24;
  uint64_t v25;
  int *v26;
  int v27;
  int v28;
  unsigned int v29;
  uint64_t i;
  int v31;
  char *v32;
  uint64_t v33;
  char *v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  _DWORD *v39;
  int v40;
  __int16 v42;
  __int16 v43;

  v3 = a1 + 28652;
  v4 = *(unsigned __int8 **)(a1 + 29480);
  if (v4[21] < a2)
  {
    if (!*(_WORD *)(a1 + 29832))
    {
      v42 = 1281;
LABEL_79:
      *(_WORD *)(v3 + 1180) = v42;
    }
    return;
  }
  v6 = a2;
  v8 = a2;
  v9 = *(_DWORD **)(a1 + 28960);
  if (!v9)
  {
    if (a2 > 1)
    {
      v43 = 1281;
    }
    else
    {
      if (a2 != 1 || (v21 = *a3) == 0 || v21 == 1029)
      {
        if (*(_BYTE *)(a1 + 32473))
        {
          *(_BYTE *)(a1 + 32473) = 0;
          LOBYTE(v22) = *(_BYTE *)(a1 + 32477);
          if ((_BYTE)v22)
          {
            v22 = *(_QWORD *)(a1 + 29008);
            if (v22)
              LOBYTE(v22) = *(_BYTE *)(a1 + 32483);
          }
          *(_BYTE *)(a1 + 32470) = v22;
          *(_BYTE *)(a1 + 32471) = 0;
        }
        v23 = *(_DWORD *)(a1 + 29808) & 0xFFFFFF00;
        *(_DWORD *)(a1 + 29808) = v23;
        if (a2 < 1)
        {
          v28 = 0;
        }
        else
        {
          v24 = (_WORD *)(a1 + 29836);
          v25 = a2;
          v26 = a3;
          do
          {
            v27 = *v26++;
            *v24++ = v27;
            --v25;
          }
          while (v25);
          v28 = a2;
        }
        bzero((void *)(a1 + (2 * v28 + 29836)), ((2 * v28) ^ 6u) + 2);
        if (v6 < 1)
        {
          v6 = 0;
        }
        else
        {
          v37 = 0;
          do
          {
            v38 = a3[v37];
            *(_WORD *)(a1 + 15180 + 2 * v37) = v38;
            if (v38)
            {
              v23 |= 1 << v37;
              *(_DWORD *)(v3 + 1156) = v23;
            }
            ++v37;
          }
          while (v8 != v37);
          if (v8 > 7)
            goto LABEL_59;
        }
        bzero((void *)(a1 + (2 * v6 + 15180)), ((2 * v6) ^ 0xEu) + 2);
LABEL_59:
        v36 = 0;
        *(_DWORD *)v3 = 0;
        *(_DWORD *)(v3 + 1148) |= 0x40000000u;
LABEL_60:
        if (v36)
          v39 = (_DWORD *)(v36 + 552);
        else
          v39 = (_DWORD *)(v3 + 1156);
        *(_WORD *)(a1 + 15342) = *(_DWORD *)(v3 + 1152) & *v39;
        if (*(_DWORD *)(v3 + 1160))
          v40 = *(_DWORD *)(a1 + 1548) | 0x80000;
        else
          v40 = *(_DWORD *)(a1 + 1548);
        *(_DWORD *)v3 = 0;
        *(_DWORD *)(a1 + 1548) = v40 | 0x40000;
        return;
      }
      v43 = 1280;
      if (v21 >> 5 >= 0x467)
      {
        if (v21 >= v4[22] + 36064)
          v43 = 1280;
        else
          v43 = 1282;
      }
    }
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = v43;
    return;
  }
  if (a2 >= 1)
  {
    v10 = 0;
    v11 = 0;
    v12 = (unsigned __int16 *)(v9 + 125);
    v13 = 36064;
    v14 = a2;
    v15 = (unsigned int *)a3;
    while (1)
    {
      v17 = *v15++;
      v16 = v17;
      if (v17 && v13 != v16)
        break;
      v19 = 1 << v16;
      if (!(_DWORD)v16)
        v19 = 0;
      if ((v19 & v11) != 0)
      {
        if (*(_WORD *)(v3 + 1180))
          return;
        goto LABEL_76;
      }
      v11 |= v19;
      v20 = *v12++;
      if ((_DWORD)v16 != v20)
        v10 = 1;
      ++v13;
      if (!--v14)
      {
        if (v10)
          goto LABEL_33;
        goto LABEL_32;
      }
    }
    if ((_DWORD)v16 == 1029 || (v16 - 36080) > 0xFFFFFFEF)
    {
      if (*(_WORD *)(v3 + 1180))
        return;
LABEL_76:
      v42 = 1282;
      goto LABEL_79;
    }
    if (!*(_WORD *)(v3 + 1180))
    {
      v42 = 1280;
      goto LABEL_79;
    }
    return;
  }
  v11 = 0;
LABEL_32:
  if (v9[137] != v11)
  {
LABEL_33:
    v29 = v9[138] & 0xFFFFFF00;
    v9[138] = v29;
    if (a2 < 1)
    {
      v6 = 0;
    }
    else
    {
      for (i = 0; i != a2; ++i)
      {
        v31 = a3[i];
        v32 = (char *)v9 + 2 * i;
        *((_WORD *)v32 + 250) = v31;
        if (v31)
        {
          if (((v9[135] >> v31) & 1) != 0)
          {
            v29 |= 1 << i;
            v9[138] = v29;
            v31 = a3[i];
          }
          else
          {
            LOWORD(v31) = 0;
          }
        }
        *((_WORD *)v32 + 228) = v31;
      }
      if (a2 > 7)
        goto LABEL_45;
    }
    v33 = 2 * v6;
    do
    {
      v34 = (char *)v9 + v33;
      *((_WORD *)v34 + 250) = 0;
      *((_WORD *)v34 + 228) = 0;
      v33 += 2;
    }
    while (v33 != 16);
LABEL_45:
    v9[137] = v11;
    if ((v4[561] & 0x40) != 0)
      v35 = (v11 | v9[136] | 0xFFFFFF00) & v9[135];
    else
      v35 = v9[135];
    v9[124] = v35;
    gleSetUnknownFramebufferCompleteness(a1, (uint64_t)(v9 + 10));
    v36 = *(_QWORD *)(a1 + 28960);
    goto LABEL_60;
  }
}

uint64_t glDrawTexsOES_Exec(uint64_t result, int a2, int a3, int a4, int a5, int a6, __n128 a7, __n128 a8, __n128 a9, __n128 a10, __n128 a11)
{
  if ((a6 | a5) < 0)
  {
    if (!*(_WORD *)(result + 29832))
      *(_WORD *)(result + 29832) = 1281;
  }
  else
  {
    a11.n128_f32[0] = (float)a6;
    a10.n128_f32[0] = (float)a5;
    a9.n128_f32[0] = (float)a4;
    a8.n128_f32[0] = (float)a3;
    a7.n128_f32[0] = (float)a2;
    return gleDrawTexture(result, a7, a8, a9, a10, a11);
  }
  return result;
}

uint64_t glDrawTexfOES_Exec(uint64_t result, __n128 a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6)
{
  if (a5.n128_f32[0] >= 0.0 && a6.n128_f32[0] >= 0.0)
    return gleDrawTexture(result, a2, a3, a4, a5, a6);
  if (!*(_WORD *)(result + 29832))
    *(_WORD *)(result + 29832) = 1281;
  return result;
}

uint64_t glDrawTexiOES_Exec(uint64_t result, int a2, int a3, int a4, int a5, int a6, __n128 a7, __n128 a8, __n128 a9, __n128 a10, __n128 a11)
{
  if ((a6 | a5) < 0)
  {
    if (!*(_WORD *)(result + 29832))
      *(_WORD *)(result + 29832) = 1281;
  }
  else
  {
    a11.n128_f32[0] = (float)a6;
    a10.n128_f32[0] = (float)a5;
    a9.n128_f32[0] = (float)a4;
    a8.n128_f32[0] = (float)a3;
    a7.n128_f32[0] = (float)a2;
    return gleDrawTexture(result, a7, a8, a9, a10, a11);
  }
  return result;
}

uint64_t glDrawTexxOES_Exec(uint64_t result, int a2, int a3, int a4, int a5, int a6, __n128 a7, __n128 a8, __n128 a9, __n128 a10, __n128 a11)
{
  a10.n128_f32[0] = (float)a5 * 0.000015259;
  if (a10.n128_f32[0] < 0.0 || (a11.n128_f32[0] = (float)a6 * 0.000015259, a11.n128_f32[0] < 0.0))
  {
    if (!*(_WORD *)(result + 29832))
      *(_WORD *)(result + 29832) = 1281;
  }
  else
  {
    a9.n128_f32[0] = (float)a4 * 0.000015259;
    a8.n128_f32[0] = (float)a3 * 0.000015259;
    a7.n128_f32[0] = (float)a2 * 0.000015259;
    return gleDrawTexture(result, a7, a8, a9, a10, a11);
  }
  return result;
}

uint64_t glDrawTexsvOES_Exec(uint64_t result, __int16 *a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7)
{
  int v7;
  int v8;

  v7 = (unsigned __int16)a2[3];
  v8 = (unsigned __int16)a2[4];
  if (((v8 | v7) & 0x8000) != 0)
  {
    if (!*(_WORD *)(result + 29832))
      *(_WORD *)(result + 29832) = 1281;
  }
  else
  {
    a7.n128_f32[0] = (float)(__int16)v8;
    a6.n128_f32[0] = (float)(__int16)v7;
    a5.n128_f32[0] = (float)a2[2];
    a4.n128_f32[0] = (float)a2[1];
    a3.n128_f32[0] = (float)*a2;
    return gleDrawTexture(result, a3, a4, a5, a6, a7);
  }
  return result;
}

uint64_t glDrawTexivOES_Exec(uint64_t result, int *a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7)
{
  int v7;
  int v8;

  v7 = a2[3];
  v8 = a2[4];
  if ((v8 | v7) < 0)
  {
    if (!*(_WORD *)(result + 29832))
      *(_WORD *)(result + 29832) = 1281;
  }
  else
  {
    a7.n128_f32[0] = (float)v8;
    a6.n128_f32[0] = (float)v7;
    a5.n128_f32[0] = (float)a2[2];
    a4.n128_f32[0] = (float)a2[1];
    a3.n128_f32[0] = (float)*a2;
    return gleDrawTexture(result, a3, a4, a5, a6, a7);
  }
  return result;
}

uint64_t glDrawTexxvOES_Exec(uint64_t result, int *a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7)
{
  a6.n128_f32[0] = (float)a2[3] * 0.000015259;
  if (a6.n128_f32[0] < 0.0 || (a7.n128_f32[0] = (float)a2[4] * 0.000015259, a7.n128_f32[0] < 0.0))
  {
    if (!*(_WORD *)(result + 29832))
      *(_WORD *)(result + 29832) = 1281;
  }
  else
  {
    a5.n128_f32[0] = (float)a2[2] * 0.000015259;
    a4.n128_f32[0] = (float)a2[1] * 0.000015259;
    a3.n128_f32[0] = (float)*a2 * 0.000015259;
    return gleDrawTexture(result, a3, a4, a5, a6, a7);
  }
  return result;
}

uint64_t glDrawTexfvOES_Exec(uint64_t result, unsigned __int32 *a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7)
{
  a6.n128_u32[0] = a2[3];
  if (a6.n128_f32[0] < 0.0 || (a7.n128_u32[0] = a2[4], a7.n128_f32[0] < 0.0))
  {
    if (!*(_WORD *)(result + 29832))
      *(_WORD *)(result + 29832) = 1281;
  }
  else
  {
    a4.n128_u32[0] = a2[1];
    a5.n128_u32[0] = a2[2];
    a3.n128_u32[0] = *a2;
    return gleDrawTexture(result, a3, a4, a5, a6, a7);
  }
  return result;
}

uint64_t glDrawTexsOES_ExecThread(uint64_t a1, int a2, int a3, int a4, int a5, int a6)
{
  return glDrawTexfOES_ExecThread(a1, (float)a2, (float)a3, (float)a4, (float)a5, (float)a6);
}

uint64_t glDrawTexfOES_ExecThread(uint64_t a1, float a2, float a3, float a4, float a5, float a6)
{
  uint64_t result;
  __n128 v13;
  __n128 v14;
  __n128 v15;
  __n128 v16;
  __n128 v17;

  result = (*(uint64_t (**)(void))(a1 + 27752))();
  if (a5 < 0.0 || a6 < 0.0)
  {
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1281;
  }
  else
  {
    v13.n128_f32[0] = a2;
    v14.n128_f32[0] = a3;
    v15.n128_f32[0] = a4;
    v16.n128_f32[0] = a5;
    v17.n128_f32[0] = a6;
    return gleDrawTexture(a1, v13, v14, v15, v16, v17);
  }
  return result;
}

uint64_t glDrawTexiOES_ExecThread(uint64_t a1, int a2, int a3, int a4, int a5, int a6)
{
  return glDrawTexfOES_ExecThread(a1, (float)a2, (float)a3, (float)a4, (float)a5, (float)a6);
}

uint64_t glDrawTexxOES_ExecThread(uint64_t a1, int a2, int a3, int a4, int a5, int a6)
{
  return glDrawTexfOES_ExecThread(a1, (float)a2 * 0.000015259, (float)a3 * 0.000015259, (float)a4 * 0.000015259, (float)a5 * 0.000015259, (float)a6 * 0.000015259);
}

uint64_t glDrawTexsvOES_ExecThread(uint64_t a1, __int16 *a2)
{
  return glDrawTexfOES_ExecThread(a1, (float)*a2, (float)a2[1], (float)a2[2], (float)a2[3], (float)a2[4]);
}

uint64_t glDrawTexivOES_ExecThread(uint64_t a1, int *a2)
{
  return glDrawTexfOES_ExecThread(a1, (float)*a2, (float)a2[1], (float)a2[2], (float)a2[3], (float)a2[4]);
}

uint64_t glDrawTexxvOES_ExecThread(uint64_t a1, int *a2)
{
  return glDrawTexfOES_ExecThread(a1, (float)*a2 * 0.000015259, (float)a2[1] * 0.000015259, (float)a2[2] * 0.000015259, (float)a2[3] * 0.000015259, (float)a2[4] * 0.000015259);
}

uint64_t glDrawTexfvOES_ExecThread(uint64_t a1, float *a2)
{
  return glDrawTexfOES_ExecThread(a1, *a2, a2[1], a2[2], a2[3], a2[4]);
}

_QWORD *glEnable_Comp(uint64_t a1, int a2)
{
  _QWORD *result;

  result = gleAddCommand(a1, (uint64_t)glEnable_ListExec, 4);
  *(_DWORD *)result = a2;
  return result;
}

uint64_t glEnable_ListExec(uint64_t a1, int *a2)
{
  glEnable_Exec(a1, *a2);
  return 4;
}

_QWORD *glDisable_Comp(uint64_t a1, int a2)
{
  _QWORD *result;

  result = gleAddCommand(a1, (uint64_t)glDisable_ListExec, 4);
  *(_DWORD *)result = a2;
  return result;
}

uint64_t glDisable_ListExec(uint64_t a1, int *a2)
{
  glDisable_Exec(a1, *a2);
  return 4;
}

uint64_t glIsEnabled_ExecThread(uint64_t a1, int a2)
{
  (*(void (**)(void))(a1 + 27752))();
  return gleGetEnabled(a1, a2);
}

uint64_t gleGetClientEnableBit(uint64_t a1, int a2)
{
  uint64_t result;

  if (a2 > 34476)
  {
    switch(a2)
    {
      case 34477:
        return 0x100000;
      case 34884:
        return 0x800000;
      case 35740:
        return 0x400000;
      default:
        return 0;
    }
  }
  else
  {
    result = 0x10000;
    switch(a2)
    {
      case 32884:
        return result;
      case 32885:
        result = 0x20000;
        break;
      case 32886:
        result = 0x40000;
        break;
      case 32888:
        result = 0x1000000 << *(_DWORD *)(a1 + 26580);
        break;
      default:
        return 0;
    }
  }
  return result;
}

uint64_t glDisableClientState_PackThread(uint64_t a1, int a2)
{
  uint64_t result;

  *(_DWORD *)gleAddCommand(a1, (uint64_t)glDisableClientState_UnpackThread, 4) = a2;
  result = gleGetClientEnableBit(a1, a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 26448) + 272) &= ~result;
  return result;
}

uint64_t glDisableClientState_UnpackThread(uint64_t a1, int *a2)
{
  gleSetClientEnableFlag(a1, *a2, 0);
  return 4;
}

uint64_t glEnableClientState_PackThread(uint64_t a1, int a2)
{
  uint64_t result;

  *(_DWORD *)gleAddCommand(a1, (uint64_t)glEnableClientState_UnpackThread, 4) = a2;
  result = gleGetClientEnableBit(a1, a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 26448) + 272) |= result;
  return result;
}

uint64_t glEnableClientState_UnpackThread(uint64_t a1, int *a2)
{
  gleSetClientEnableFlag(a1, *a2, 1);
  return 4;
}

uint64_t glGetError_ExecThread(uint64_t a1)
{
  (*(void (**)(void))(a1 + 27752))();
  return glGetError_Exec(a1);
}

uint64_t glGetError_NoSync()
{
  return 0;
}

uint64_t glGenFencesAPPLE_Exec(uint64_t result, unsigned int a2, _DWORD *a3)
{
  uint64_t v5;

  if ((a2 & 0x80000000) != 0)
  {
    if (!*(_WORD *)(result + 29832))
      *(_WORD *)(result + 29832) = 1281;
  }
  else
  {
    result = gleGenHashNames(result + 25872, a2);
    if ((_DWORD)result && a2)
    {
      v5 = a2;
      do
      {
        *a3++ = result;
        result = (result + 1);
        --v5;
      }
      while (v5);
    }
  }
  return result;
}

uint64_t glDeleteFencesAPPLE_Exec(uint64_t result, unsigned int a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t v5;
  unsigned int v6;

  v3 = result;
  if ((a2 & 0x80000000) != 0)
  {
    if (!*(_WORD *)(result + 29832))
      *(_WORD *)(result + 29832) = 1281;
  }
  else if (a2)
  {
    v5 = a2;
    do
    {
      v6 = *a3++;
      result = gleDeleteContextHashNameAndObject(v3, v3 + 25872, (uint64_t (*)(uint64_t, uint64_t))gleFreeFenceObject, v6);
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t glTestFenceAPPLE_Exec(_BOOL8 a1, unsigned int a2)
{
  return gleTestFence(a1, 0, a2, 1);
}

uint64_t *glFinishFenceAPPLE_Exec(uint64_t *a1, unsigned int a2)
{
  return gleFinishFence(a1, 0, a2);
}

uint64_t *glFinishObjectAPPLE_Exec(uint64_t *result, int a2, unsigned int a3)
{
  int v3;

  if (a2 <= 35337)
  {
    switch(a2)
    {
      case 5890:
        v3 = 1;
        return gleFinishObject(result, v3, a3);
      case 32884:
        v3 = 2;
        return gleFinishObject(result, v3, a3);
      case 34227:
        v3 = 3;
        return gleFinishObject(result, v3, a3);
    }
  }
  else if (a2 > 36159)
  {
    if (a2 == 36160)
    {
      v3 = 5;
      return gleFinishObject(result, v3, a3);
    }
    if (a2 == 36161)
    {
      v3 = 4;
      return gleFinishObject(result, v3, a3);
    }
  }
  else
  {
    if (a2 == 35338)
      return result;
    if (a2 == 35339)
    {
      v3 = 0;
      return gleFinishObject(result, v3, a3);
    }
  }
  if (!*((_WORD *)result + 14916))
    *((_WORD *)result + 14916) = 1280;
  return result;
}

BOOL glIsFenceAPPLE_Exec(uint64_t a1, unsigned int a2)
{
  return gleLookupHashObject(a1 + 25872, a2) != 0;
}

uint64_t glFenceSync_Exec(uint64_t a1, int a2, int a3)
{
  uint64_t v6;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v6 = gleFenceSync(a1, 0, a2, a3);
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  return v6;
}

BOOL glIsSync_Exec(uint64_t a1, unsigned int a2)
{
  uint64_t *v4;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v4 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 200, a2);
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  return v4 != 0;
}

void glDeleteSync_Exec(uint64_t a1, unsigned int a2)
{
  uint64_t *v4;
  uint64_t v5;

  if (a2)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    v4 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 200, a2);
    v5 = *(_QWORD *)(a1 + 19296);
    if (v4)
    {
      gleDeleteHashNameAndObject(v5, (void (**)(uint64_t, uint64_t))(v5 + 200), a2);
      os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    }
    else
    {
      os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 324));
      if (!*(_WORD *)(a1 + 29832))
        *(_WORD *)(a1 + 29832) = 1281;
    }
  }
}

uint64_t glClientWaitSync_Exec(uint64_t a1, unsigned int a2, unsigned int a3, unint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  double v10;
  uint64_t result;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;

  if (a2
    && (os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324)),
        v8 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 200, a2),
        os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324)),
        v8)
    && a3 < 2)
  {
    if (a4)
    {
      if (a4 == -1 && !*((_DWORD *)v8 + 34))
      {
        if (gleTestSync(a1, a3, (uint64_t)v8))
          return 37146;
        if (v8[18] != a1)
        {
          v13 = mach_absolute_time();
          if (gleIsSyncQueued(*(_QWORD *)(a1 + 19296), (uint64_t)v8))
          {
            v14 = 0;
            v15 = 0;
            do
            {
              if (!v15)
              {
                v15 = (unint64_t)(*(double *)(a1 + 432) * 10000.0);
                v14 = v15;
              }
              if (mach_absolute_time() - v13 > v15)
              {
                sched_yield();
                v15 += v14;
              }
            }
            while (gleIsSyncQueued(*(_QWORD *)(a1 + 19296), (uint64_t)v8));
          }
        }
        gleFinishSync(a1, (uint64_t)v8);
      }
      else
      {
        v9 = mach_absolute_time();
        v10 = *(double *)(a1 + 432);
        if (gleTestSync(a1, a3, (uint64_t)v8))
          return 37146;
        v12 = (unint64_t)(v10 * (double)a4);
        if (!v12 || mach_absolute_time() - v9 > v12)
          return 37147;
        if (!gleTestSync(a1, a3, (uint64_t)v8))
        {
          v16 = 0;
          v17 = 0;
          while (1)
          {
            if (!v17)
            {
              v17 = (unint64_t)(*(double *)(a1 + 432) * 10000.0);
              v16 = v17;
            }
            v18 = mach_absolute_time() - v9;
            if (v18 > v12)
              break;
            if (v18 > v17)
            {
              sched_yield();
              v17 += v16;
            }
            v19 = gleTestSync(a1, a3, (uint64_t)v8);
            result = 37148;
            if (v19)
              return result;
          }
          return 37147;
        }
      }
      return 37148;
    }
    else if (gleTestSync(a1, a3, (uint64_t)v8))
    {
      return 37146;
    }
    else
    {
      return 37147;
    }
  }
  else
  {
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1281;
    return 37149;
  }
}

void glWaitSync_Exec(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t *v8;

  if (a2
    && (os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324)),
        v8 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 200, a2),
        os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324)),
        v8)
    && !a3
    && a4 == -1)
  {
    gleTestSync(a1, 0, (uint64_t)v8);
  }
  else if (!*(_WORD *)(a1 + 29832))
  {
    *(_WORD *)(a1 + 29832) = 1281;
  }
}

void glGetSynciv_Exec(uint64_t a1, unsigned int a2, int a3, int a4, int *a5, int *a6)
{
  uint64_t *v12;
  int v13;
  __int16 *v14;
  __int16 v15;
  int v16;

  if (!a2
    || a4 < 0
    || (os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324)),
        v12 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 200, a2),
        os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324)),
        !v12))
  {
    v14 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832))
      return;
    v15 = 1281;
    goto LABEL_10;
  }
  if ((a3 - 37138) >= 4)
  {
    v14 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832))
      return;
    v15 = 1280;
LABEL_10:
    *v14 = v15;
    return;
  }
  switch(a3)
  {
    case 37138:
      if (!a4)
        goto LABEL_19;
      v13 = 37142;
      goto LABEL_21;
    case 37139:
      if (!a4)
        goto LABEL_19;
      v13 = 37143;
      goto LABEL_21;
    case 37140:
      if (!a4)
        goto LABEL_19;
      if (gleTestSync(a1, 0, (uint64_t)v12))
        v13 = 37145;
      else
        v13 = 37144;
LABEL_21:
      *a6 = v13;
      v16 = 1;
      break;
    case 37141:
      v13 = 0;
      v16 = 0;
      if (a4)
        goto LABEL_21;
      break;
    default:
LABEL_19:
      v16 = 0;
      break;
  }
  if (a5)
    *a5 = v16;
}

uint64_t glFenceSync_ExecThread(uint64_t a1, int a2, int a3)
{
  __int16 *v4;
  uint64_t result;
  __int16 v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;

  if (a2 != 37143)
  {
    v4 = (__int16 *)(a1 + 29832);
    if (!*(_WORD *)(a1 + 29832))
    {
      result = 0;
      v6 = 1280;
      goto LABEL_9;
    }
    return 0;
  }
  if (!a3)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    v7 = *(_QWORD *)(a1 + 19296) + 200;
    v8 = gleGenHashNames(v7, 1u);
    gleCreateSyncObject(v8);
    v10 = v9;
    gleAddHashNameAndObject(a1, v7, v9);
    *(_QWORD *)(v10 + 144) = a1;
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    *gleAddCommand(a1, (uint64_t)glFenceSyncObject_UnpackThread, 8) = v10;
    return v8;
  }
  v4 = (__int16 *)(a1 + 29832);
  if (*(_WORD *)(a1 + 29832))
    return 0;
  result = 0;
  v6 = 1281;
LABEL_9:
  *v4 = v6;
  return result;
}

uint64_t glFenceSyncObject_UnpackThread(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v3 += 40;
  gleCreatePluginFence(*(_QWORD *)(a1 + 19296), v3);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 29496) + 680))(*(_QWORD *)(a1 + 29464), *(_QWORD *)(v3 + 8 * *(unsigned __int8 *)(a1 + 32500)));
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  return 8;
}

void glDeleteSync_ExecThread(uint64_t a1, unsigned int a2)
{
  uint64_t *v4;

  if (a2)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    v4 = gleDeleteHashNameAndObject_NoDecrement(*(_QWORD *)(a1 + 19296) + 200, a2);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (v4)
    {
      *gleAddCommand(a1, (uint64_t)glDeleteSyncObject_UnpackThread, 8) = v4;
    }
    else if (!*(_WORD *)(a1 + 29832))
    {
      *(_WORD *)(a1 + 29832) = 1281;
    }
  }
}

uint64_t glDeleteSyncObject_UnpackThread(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;

  v3 = *a2;
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v4 = *(_DWORD *)(v3 + 20) - 1;
  *(_DWORD *)(v3 + 20) = v4;
  if (!v4)
    gleFreeSyncObject(*(_QWORD *)(a1 + 19296), (char *)v3);
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  return 8;
}

uint64_t glClientWaitSync_ExecThread(intptr_t a1, unsigned int a2, unsigned int a3, unint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD v12[5];
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;

  if (a2
    && (os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324)),
        v8 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 200, a2),
        os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324)),
        v8)
    && a3 < 2)
  {
    if (a4)
    {
      v9 = mach_absolute_time();
      v10 = (unint64_t)(*(double *)(a1 + 432) * (double)a4);
    }
    else
    {
      v10 = 0;
      v9 = 0;
    }
    v12[0] = glClientWaitSync_CallbackThread;
    v12[1] = 40;
    v12[2] = v8;
    v12[3] = v10;
    v12[4] = v9;
    v13 = a3;
    v14 = 0;
    v15 = 1;
    gleProcessCallback(a1, (uint64_t)v12);
    return v14;
  }
  else
  {
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1281;
    return 37149;
  }
}

uint64_t glClientWaitSync_CallbackThread(uint64_t a1, uint64_t a2)
{
  int v5;
  int v6;

  if (*(__int16 *)(a1 + 28660) == -1
    && *(_QWORD *)(*(_QWORD *)a2 + 40)
    && gleTestSync(a1, *(_DWORD *)(a2 + 24), *(_QWORD *)a2))
  {
    if (*(_BYTE *)(a2 + 32))
      v5 = 37146;
    else
      v5 = 37148;
    *(_DWORD *)(a2 + 28) = v5;
  }
  if (!*(_DWORD *)(a2 + 28))
  {
    if (*(_QWORD *)(a2 + 8) && mach_absolute_time() - *(_QWORD *)(a2 + 16) <= *(_QWORD *)(a2 + 8))
    {
      v6 = *(_DWORD *)(a2 + 28);
      *(_BYTE *)(a2 + 32) = 0;
      if (!v6)
        return 40;
      goto LABEL_7;
    }
    *(_DWORD *)(a2 + 28) = 37147;
  }
  *(_BYTE *)(a2 + 32) = 0;
LABEL_7:
  gleFinishCallback(a1);
  return 40;
}

void glGetSynciv_ExecThread(uint64_t a1, unsigned int a2, int a3, int a4, int *a5, int *a6)
{
  (*(void (**)(void))(a1 + 27752))();
  glGetSynciv_Exec(a1, a2, a3, a4, a5, a6);
}

_QWORD *glWaitSync_Comp(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  _QWORD *result;

  result = gleAddCommand(a1, (uint64_t)glWaitSync_ListExec, 24);
  *result = a2;
  *((_DWORD *)result + 2) = a3;
  result[2] = a4;
  return result;
}

uint64_t glWaitSync_ListExec(uint64_t a1, uint64_t a2)
{
  glWaitSync_Exec(a1, *(_QWORD *)a2, *(_DWORD *)(a2 + 8), *(_QWORD *)(a2 + 16));
  return 24;
}

uint64_t glGenFencesAPPLE_ExecThread(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  (*(void (**)(void))(a1 + 27752))();
  return glGenFencesAPPLE_Exec(a1, a2, a3);
}

uint64_t glDeleteFencesAPPLE_ExecThread(uint64_t a1, unsigned int a2, unsigned int *a3)
{
  (*(void (**)(void))(a1 + 27752))();
  return glDeleteFencesAPPLE_Exec(a1, a2, a3);
}

_QWORD *glSetFenceAPPLE_PackThread(os_unfair_lock_s *a1, unsigned int a2)
{
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  _QWORD *result;

  v4 = (uint64_t)&a1[6468];
  v5 = a1 + 6946;
  os_unfair_lock_lock(a1 + 6946);
  v6 = gleLookupHashObject(v4, a2);
  if (!v6)
  {
    gleCreateFenceObject(a2);
    v6 = (uint64_t *)v7;
    gleAddHashNameAndObject((uint64_t)a1, v4, v7);
  }
  v8 = (unsigned int *)v6 + 35;
  do
    v9 = __ldxr(v8);
  while (__stxr(v9 + 1, v8));
  os_unfair_lock_unlock(v5);
  result = gleAddCommand((uint64_t)a1, (uint64_t)glSetFenceAPPLE_UnpackThread, 4);
  *(_DWORD *)result = a2;
  return result;
}

uint64_t glSetFenceAPPLE_UnpackThread(uint64_t a1, unsigned int *a2)
{
  unsigned int v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t *v6;
  unsigned int *v7;
  unsigned int v8;

  v3 = *a2;
  v4 = a1 + 25872;
  v5 = (os_unfair_lock_s *)(a1 + 27784);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 27784));
  v6 = gleLookupHashObject(v4, v3);
  if (!v6[5])
    gleCreatePluginFence(*(_QWORD *)(a1 + 19296), (uint64_t)(v6 + 5));
  gleSetFence(a1, v3);
  v7 = (unsigned int *)v6 + 35;
  do
    v8 = __ldxr(v7);
  while (__stxr(v8 - 1, v7));
  os_unfair_lock_unlock(v5);
  return 4;
}

uint64_t glTestFenceAPPLE_ExecThread(intptr_t a1, unsigned int a2)
{
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t *v6;
  uint64_t *v7;
  _QWORD v9[3];
  unsigned int v10;
  int v11;

  v4 = a1 + 25872;
  v5 = (os_unfair_lock_s *)(a1 + 27784);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 27784));
  v6 = gleLookupHashObject(v4, a2);
  if (v6)
  {
    v7 = v6;
    os_unfair_lock_unlock(v5);
    v9[0] = glTestFenceAPPLE_CallbackThread;
    v9[1] = 16;
    v9[2] = v7;
    v10 = a2;
    v11 = 1;
    gleProcessCallback(a1, (uint64_t)v9);
    return v11;
  }
  else
  {
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
    os_unfair_lock_unlock(v5);
    return 1;
  }
}

uint64_t glTestFenceAPPLE_CallbackThread(uint64_t a1, uint64_t a2)
{
  if (*(__int16 *)(a1 + 28660) == -1 && !*(_DWORD *)(*(_QWORD *)a2 + 140))
  {
    *(_BYTE *)(a2 + 12) = gleTestFence(a1, 0, *(_DWORD *)(a2 + 8), 1);
    gleFinishCallback(a1);
  }
  return 16;
}

uint64_t glTestObjectAPPLE_ExecThread(intptr_t a1, int a2, unsigned int a3)
{
  if (a2 == 35339)
    return glTestFenceAPPLE_ExecThread(a1, a3);
  (*(void (**)(intptr_t))(a1 + 27752))(a1);
  return glTestObjectAPPLE_Exec(a1, a2, a3);
}

void glFinishFenceAPPLE_ExecThread(intptr_t a1, unsigned int a2)
{
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t *v6;
  uint64_t *v7;
  _QWORD v8[4];

  v4 = a1 + 25872;
  v5 = (os_unfair_lock_s *)(a1 + 27784);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 27784));
  v6 = gleLookupHashObject(v4, a2);
  if (v6)
  {
    v7 = v6;
    os_unfair_lock_unlock(v5);
    v8[0] = glFinishFenceAPPLE_CallbackThread;
    v8[1] = 16;
    v8[2] = v7;
    v8[3] = a2;
    gleProcessCallback(a1, (uint64_t)v8);
  }
  else
  {
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
    os_unfair_lock_unlock(v5);
  }
}

uint64_t glFinishFenceAPPLE_CallbackThread(uint64_t a1, unsigned int *a2)
{
  if (*(__int16 *)(a1 + 28660) == -1 && !*(_DWORD *)(*(_QWORD *)a2 + 140))
  {
    gleFinishFence((uint64_t *)a1, 0, a2[2]);
    gleFinishCallback(a1);
  }
  return 16;
}

void glFinishObjectAPPLE_ExecThread(intptr_t a1, int a2, unsigned int a3)
{
  if (a2 == 35339)
  {
    glFinishFenceAPPLE_ExecThread(a1, a3);
  }
  else
  {
    (*(void (**)(intptr_t))(a1 + 27752))(a1);
    glFinishObjectAPPLE_Exec((uint64_t *)a1, a2, a3);
  }
}

BOOL glIsFenceAPPLE_ExecThread(uint64_t a1, unsigned int a2)
{
  (*(void (**)(void))(a1 + 27752))();
  return gleLookupHashObject(a1 + 25872, a2) != 0;
}

uint64_t glFinish_ExecThread(uint64_t a1)
{
  double v2;
  double v3;
  double v4;

  (*(void (**)(void))(a1 + 27752))();
  return glFinish_Exec(a1, v2, v3, v4);
}

uint64_t glFinish_Exec(uint64_t a1, double a2, double a3, double a4)
{
  uint64_t v5;
  uint64_t result;
  unint64_t v7;
  _QWORD *v8;

  v5 = a1 + 29800;
  if (*(_BYTE *)(a1 + 32472))
  {
    if ((*(_DWORD *)v5 & 0x743C0478) == 0 || (result = gleUpdateDrawFramebufferState(a1, a2, a3, a4), !(_DWORD)result))
      result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 29496) + 232))(*(_QWORD *)(a1 + 29464), 0);
    *(_BYTE *)(v5 + 2672) = *(_BYTE *)(v5 + 2671);
  }
  else
  {
    result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a1 + 29496) + 240))(*(_QWORD *)(a1 + 29464));
  }
  if (*(_BYTE *)(v5 + 2696))
  {
    v7 = 0;
    v8 = (_QWORD *)(a1 + 32512);
    do
    {
      result = (*(uint64_t (**)(_QWORD))(v8[206] + 1312))(*v8);
      ++v7;
      v8 += 209;
    }
    while (v7 < *(unsigned __int8 *)(v5 + 2696));
  }
  return result;
}

uint64_t glFlush_ExecThread(uint64_t a1)
{
  double v2;
  double v3;
  double v4;

  v2 = (*(double (**)(void))(a1 + 27752))();
  return glFlush_Exec(a1, v2, v3, v4);
}

void glGenRenderbuffersEXT_Exec(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  int v6;
  BOOL v7;
  uint64_t v8;

  if ((a2 & 0x80000000) != 0)
  {
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1281;
  }
  else
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    v6 = gleGenHashNames(*(_QWORD *)(a1 + 19296) + 40, a2);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (v6)
      v7 = a2 == 0;
    else
      v7 = 1;
    if (!v7)
    {
      v8 = a2;
      do
      {
        *a3++ = v6++;
        --v8;
      }
      while (v8);
    }
  }
}

void glDeleteRenderbuffersEXT_Exec(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t **v19;
  uint64_t v20;
  uint64_t **v21;
  uint64_t **v22;
  uint64_t **v23;
  int v24;
  uint64_t v25;
  uint64_t v26;

  if ((a2 & 0x80000000) == 0)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    v6 = *(_QWORD *)(a1 + 28960);
    if (v6)
    {
      v26 = *(_QWORD *)(a1 + 19296) + 40;
      v23 = (uint64_t **)(v6 + 40);
    }
    else
    {
      v26 = 0;
      v23 = 0;
    }
    v7 = *(_QWORD *)(a1 + 28968);
    v8 = v7 == v6 || v7 == 0;
    v9 = !v8;
    v24 = v9;
    if (v8)
    {
      v22 = 0;
    }
    else
    {
      v26 = *(_QWORD *)(a1 + 19296) + 40;
      v22 = (uint64_t **)(v7 + 40);
    }
    v10 = *(_QWORD *)(a1 + 28952);
    v25 = *(_QWORD *)(a1 + 28960);
    if (v10)
    {
      v11 = *(_DWORD *)(v10 + 16);
      if (!a2)
        goto LABEL_42;
    }
    else
    {
      v11 = 0;
      if (!a2)
      {
LABEL_42:
        os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
        return;
      }
    }
    v12 = 0;
    if (v6)
      v13 = 1;
    else
      v13 = v9;
    v14 = a2;
    do
    {
      v15 = *(_DWORD *)(a3 + 4 * v12);
      if (v15)
      {
        if (v15 == v11)
          gleBindRenderbuffer(a1, 0);
        if (v13)
        {
          v16 = gleLookupHashObject(v26, v15);
          if (v16)
          {
            v17 = v16;
            if (v25)
            {
              v18 = 0;
              v19 = v23;
              do
              {
                if (v17 == *v19)
                  gleFramebufferTexture(a1, *(_QWORD *)(a1 + 28960) + 40, v18, 0, 0, 0, 0, 0, 0);
                ++v18;
                v19 += 2;
              }
              while (v18 != 10);
            }
            if (v24)
            {
              v20 = 0;
              v21 = v22;
              do
              {
                if (v17 == *v21)
                  gleFramebufferTexture(a1, *(_QWORD *)(a1 + 28968) + 40, v20, 0, 0, 0, 0, 0, 0);
                ++v20;
                v21 += 2;
              }
              while (v20 != 10);
            }
          }
        }
        gleUnbindDeleteHashNameAndObject(a1, (void (**)(_QWORD, uint64_t))(*(_QWORD *)(a1 + 19296) + 40), (void (*)(uint64_t, uint64_t))gleUnbindTextureObject, v15);
      }
      ++v12;
    }
    while (v12 != v14);
    goto LABEL_42;
  }
  if (!*(_WORD *)(a1 + 29832))
    *(_WORD *)(a1 + 29832) = 1281;
}

void glBindRenderbuffer_Exec(uint64_t a1, int a2, unsigned int a3)
{
  if (a2 == 36161)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    gleBindRenderbuffer(a1, a3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else if (!*(_WORD *)(a1 + 29832))
  {
    *(_WORD *)(a1 + 29832) = 1280;
  }
}

uint64_t glRenderbufferStorageEXT_Exec(uint64_t a1, int a2, int a3, unsigned int a4, unsigned int a5)
{
  return glRenderbufferStorageInline(a1, a2, 0, a3, a4, a5);
}

uint64_t glRenderbufferStorageInline(uint64_t a1, int a2, signed int a3, int a4, unsigned int a5, unsigned int a6)
{
  uint64_t result;
  int v12;
  uint64_t v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  result = gleCheckRenderbufferStorageArgs(a1, a2, a3, a4, a5, a6);
  if (!(_DWORD)result)
    return result;
  v12 = a6 ? a5 : 0;
  v13 = *(_QWORD *)(a1 + 28952);
  if (!v13)
    return result;
  v14 = *(_WORD *)(v13 + 808);
  if ((v14 & 0x1C00) == 0x1000)
    goto LABEL_10;
  if ((*(_WORD *)(v13 + 808) & 0x1C00) == 0)
  {
    v14 |= 0x1000u;
    *(_WORD *)(v13 + 808) = v14;
LABEL_10:
    if (!*(_QWORD *)(v13 + 800) && (v14 & 0x800) == 0)
    {
      if (a3 < 1 || *(_BYTE *)(*(_QWORD *)(a1 + 29032) + 616))
        goto LABEL_34;
      if (a4 <= 34835)
      {
        if (((a4 - 33321) > 0xF || ((1 << (a4 - 41)) & 0xC3F5) == 0)
          && ((a4 - 32848) > 9 || ((1 << (a4 - 80)) & 0x3C3) == 0)
          && (a4 - 6407) >= 2)
        {
          goto LABEL_34;
        }
        goto LABEL_33;
      }
      if (a4 > 36193)
      {
        if ((a4 - 36194) <= 0x2D && ((1 << (a4 - 98)) & 0x30000C000001) != 0)
          goto LABEL_33;
        v15 = 36975;
      }
      else
      {
        if ((a4 - 34836) <= 7 && ((1 << (a4 - 20)) & 0xC3) != 0 || a4 == 35898)
          goto LABEL_33;
        v15 = 35907;
      }
      if (a4 != v15)
      {
LABEL_34:
        BYTE1(v16) = 1;
        LOBYTE(v16) = a3;
        gleEvaluateTextureImageChange(a1, v13 + 40, v13 + 1072, 0, 0, v12, a6, 1, 0, a4, 0x1908u, 0x1401u, v16, 0);
        *(_DWORD *)(v13 + 1008) = 65541;
        return gleDirtyRenderbufferCurrentBindPointsGeom(a1, v13 + 40);
      }
LABEL_33:
      *(_BYTE *)(v13 + 832) |= 1u;
      goto LABEL_34;
    }
    goto LABEL_21;
  }
  if ((*(_WORD *)(v13 + 808) & 0xC00) == 0)
    goto LABEL_10;
LABEL_21:
  if (!*(_WORD *)(a1 + 29832))
    *(_WORD *)(a1 + 29832) = 1282;
  return result;
}

BOOL glIsRenderbufferEXT_Exec(uint64_t a1, unsigned int a2)
{
  uint64_t *v4;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v4 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 40, a2);
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  return v4 != 0;
}

uint64_t glGetRenderbufferParameterivEXT_Exec(uint64_t result, int a2, int a3, int *a4)
{
  __int16 *v4;
  unsigned __int16 *v5;
  int v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  int v11;

  v4 = (__int16 *)(result + 29832);
  if (a2 != 36161)
  {
LABEL_16:
    if (*v4)
      return result;
    v10 = 1280;
    goto LABEL_18;
  }
  v5 = *(unsigned __int16 **)(result + 28952);
  if (!v5)
  {
    if (*v4)
      return result;
    v10 = 1282;
LABEL_18:
    *v4 = v10;
    return result;
  }
  switch(a3)
  {
    case 36162:
      v8 = v5[538];
      goto LABEL_9;
    case 36163:
      v8 = v5[539];
      goto LABEL_9;
    case 36164:
      v7 = v5[538];
      if (v5[538])
        v7 = v5[539] != 0;
      if (v5[501])
        v8 = v5[500];
      else
        v8 = 32854;
      v11 = v8;
      v9 = 4099;
      goto LABEL_7;
    case 36165:
    case 36166:
    case 36167:
    case 36168:
    case 36169:
    case 36170:
    case 36171:
    case 36172:
    case 36173:
    case 36174:
    case 36175:
      goto LABEL_16;
    case 36176:
    case 36177:
    case 36178:
    case 36179:
      v7 = v5[538];
      if (v5[538])
        v7 = v5[539] != 0;
      v8 = 0;
      v9 = (a3 - 3316);
      v11 = 0;
      goto LABEL_7;
    case 36180:
      v7 = v5[538];
      if (v5[538])
        v7 = v5[539] != 0;
      v8 = 0;
      v11 = 0;
      v9 = 34890;
      goto LABEL_7;
    case 36181:
      v7 = v5[538];
      if (v5[538])
        v7 = v5[539] != 0;
      v8 = 0;
      v11 = 0;
      v9 = 35057;
      goto LABEL_7;
    default:
      if (a3 != 36011)
        goto LABEL_16;
      v7 = v5[538];
      if (v5[538])
        v7 = v5[539] != 0;
      v8 = 0;
      v11 = 0;
      v9 = 36011;
LABEL_7:
      if (v7)
      {
        result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t, int *))(*(_QWORD *)(result + 29496)
                                                                                           + 376))(*(_QWORD *)(result + 29464), *(_QWORD *)&v5[4 * *(unsigned __int8 *)(result + 32500) + 20], 0, 0, v9, &v11);
        v8 = v11;
      }
LABEL_9:
      *a4 = v8;
      break;
  }
  return result;
}

void glGenFramebuffersEXT_Exec(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  int v6;
  BOOL v7;
  uint64_t v8;

  if ((a2 & 0x80000000) != 0)
  {
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1281;
  }
  else
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    v6 = gleGenHashNames(*(_QWORD *)(a1 + 19296) + 8, a2);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (v6)
      v7 = a2 == 0;
    else
      v7 = 1;
    if (!v7)
    {
      v8 = a2;
      do
      {
        *a3++ = v6++;
        --v8;
      }
      while (v8);
    }
  }
}

void glDeleteFramebuffersEXT_Exec(int8x16_t *a1, unsigned int a2, unsigned int *a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t *v13;
  int v14;

  if ((a2 & 0x80000000) == 0)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1[1206].i64[0] + 324));
    v6 = a1[1810].i64[0];
    if (v6)
      v7 = *(_DWORD *)(v6 + 16);
    else
      v7 = 0;
    v8 = a1[1810].i64[1];
    if (v8)
    {
      v9 = *(_DWORD *)(v8 + 16);
      if (!a2)
        goto LABEL_23;
    }
    else
    {
      v9 = 0;
      if (!a2)
      {
LABEL_23:
        os_unfair_lock_unlock((os_unfair_lock_t)(a1[1206].i64[0] + 324));
        return;
      }
    }
    v10 = a2;
    do
    {
      v12 = *a3++;
      v11 = v12;
      if (v12)
      {
        if (v11 == v7)
          gleBindFramebuffer(a1, 36009, 0);
        if (v11 == v9)
          gleBindFramebuffer(a1, 36008, 0);
        v13 = gleDeleteHashNameAndObject_NoDecrement(a1[1206].i64[0] + 8, v11);
        if (v13)
        {
          v14 = *((_DWORD *)v13 + 5) - 1;
          *((_DWORD *)v13 + 5) = v14;
          if (v14)
            gleUnbindFramebufferObject((uint64_t)a1, (uint64_t)v13);
          else
            gleUnbindAndFreeFramebufferObject((uint64_t)a1, (char *)v13);
        }
      }
      --v10;
    }
    while (v10);
    goto LABEL_23;
  }
  if (!a1[1864].i16[4])
    a1[1864].i16[4] = 1281;
}

void glBindFramebuffer_Exec(int8x16_t *a1, int a2, unsigned int a3)
{
  if ((a2 - 36008) < 2 || a2 == 36160)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1[1206].i64[0] + 324));
    gleBindFramebuffer(a1, a2, a3);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1[1206].i64[0] + 324));
  }
  else if (!a1[1864].i16[4])
  {
    a1[1864].i16[4] = 1280;
  }
}

void glFramebufferTexture2DEXT_Exec(uint64_t a1, int a2, int a3, int a4, unsigned int a5, unsigned int a6)
{
  uint64_t v10;
  uint64_t v11;
  __int16 *v12;
  __int16 v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  uint64_t *v20;
  uint64_t v21;
  os_unfair_lock_s **v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  int v26;

  if (a2 == 36008)
  {
    v10 = 28968;
  }
  else
  {
    if (a2 != 36160 && a2 != 36009)
      goto LABEL_41;
    v10 = 28960;
  }
  v11 = *(_QWORD *)(a1 + v10);
  if (!v11)
  {
LABEL_32:
    v12 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832))
      return;
    v13 = 1282;
    goto LABEL_43;
  }
  if (a5 && (a6 & 0x80000000) != 0)
    goto LABEL_9;
  v14 = 8;
  if (a3 != 33306 && a3 != 36096)
  {
    if (a3 == 36128)
    {
      v14 = 9;
    }
    else
    {
      v14 = a3 - 36064;
      if (a3 - 36064 >= *(unsigned __int8 *)(*(_QWORD *)(a1 + 29032) + 22))
        goto LABEL_41;
    }
  }
  if (!a5)
  {
    v22 = (os_unfair_lock_s **)(a1 + 19296);
    os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    v19 = 0;
    LOWORD(v18) = 0;
    v21 = 0;
    goto LABEL_28;
  }
  if (a4 <= 34068)
  {
    if (a4 == 3553)
    {
      v24 = 0;
      do
      {
        v25 = v24 + 1;
        if (v24 > 0x1F)
          break;
        v26 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 29032) + 160) << v24++;
      }
      while ((v26 & 0x80000000) == 0);
      if (32 - v25 < a6)
        goto LABEL_9;
      v19 = 0;
      v18 = 3;
      goto LABEL_24;
    }
    if (a4 == 34037)
    {
      if (!a6)
      {
        v19 = 0;
        v18 = 2;
        goto LABEL_24;
      }
LABEL_9:
      v12 = (__int16 *)(a1 + 29832);
      if (*(_WORD *)(a1 + 29832))
        return;
      v13 = 1281;
LABEL_43:
      *v12 = v13;
      return;
    }
LABEL_41:
    v12 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832))
      return;
    v13 = 1280;
    goto LABEL_43;
  }
  if ((a4 - 34069) >= 6)
  {
    if (a4 == 37120)
    {
      if (!a6)
      {
        v19 = 0;
        v18 = 8;
        goto LABEL_24;
      }
      goto LABEL_9;
    }
    goto LABEL_41;
  }
  v15 = 0;
  do
  {
    v16 = v15 + 1;
    if (v15 > 0x1F)
      break;
    v17 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 29032) + 168) << v15++;
  }
  while ((v17 & 0x80000000) == 0);
  if (32 - v16 < a6)
    goto LABEL_9;
  v18 = 0;
  v19 = a4 - 34069;
LABEL_24:
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v20 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 72, a5);
  if (!v20 || (v21 = (uint64_t)v20, v18 != (v20[101] & 0xF)))
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    goto LABEL_32;
  }
  v22 = (os_unfair_lock_s **)(a1 + 19296);
LABEL_28:
  v23 = v11 + 40;
  gleFramebufferTexture(a1, v23, v14, v18, v21, v19, a6, 0, 0);
  if (a3 == 33306)
    gleFramebufferTexture(a1, v23, 9u, v18, v21, v19, a6, 0, 0);
  os_unfair_lock_unlock(*v22 + 81);
}

uint64_t glFramebufferParameterivAPPLE_Exec(uint64_t result, int a2, int a3, int *a4)
{
  uint64_t v4;
  uint64_t *v5;
  int v6;
  uint64_t v7;

  if (a2 == 36008)
  {
    v4 = 28968;
  }
  else
  {
    if (a2 != 36160 && a2 != 36009)
      goto LABEL_10;
    v4 = 28960;
  }
  v5 = (uint64_t *)(result + v4);
  if (a3 == 35449)
  {
    v6 = *a4;
    if ((*a4 - 35450) <= 3)
    {
      v7 = *v5;
      if (v6 != *(_DWORD *)(v7 + 492))
      {
        *(_DWORD *)(v7 + 492) = v6;
        return gleSetUnknownFramebufferCompleteness(result, v7 + 40);
      }
      return result;
    }
  }
LABEL_10:
  if (!*(_WORD *)(result + 29832))
    *(_WORD *)(result + 29832) = 1280;
  return result;
}

void glGetFramebufferParameterivAPPLE_Exec(uint64_t a1, int a2, int a3, _DWORD *a4)
{
  uint64_t v5;
  uint64_t v6;

  *a4 = 0;
  if (a2 == 36008)
  {
    v5 = 28968;
  }
  else
  {
    if (a2 != 36160 && a2 != 36009)
      goto LABEL_9;
    v5 = 28960;
  }
  v6 = a1 + v5;
  if (a3 == 35449)
  {
    *a4 = *(_DWORD *)(*(_QWORD *)v6 + 492);
    return;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
LABEL_9:
  if (!*(_WORD *)(a1 + 29832))
    *(_WORD *)(a1 + 29832) = 1280;
}

_DWORD *glFramebufferParameterivAPPLE_PackThread(uint64_t a1, int a2, int a3, _DWORD *a4)
{
  _DWORD *result;

  result = gleAddCommand(a1, (uint64_t)glFramebufferParameterivAPPLE_UnpackThread, 12);
  *result = a2;
  result[1] = a3;
  result[2] = *a4;
  return result;
}

uint64_t glFramebufferParameterivAPPLE_UnpackThread(uint64_t a1, int *a2)
{
  glFramebufferParameterivAPPLE_Exec(a1, *a2, a2[1], a2 + 2);
  return 12;
}

void glGetFramebufferParameterivAPPLE_ExecThread(uint64_t a1, int a2, int a3, _DWORD *a4)
{
  (*(void (**)(void))(a1 + 27752))();
  glGetFramebufferParameterivAPPLE_Exec(a1, a2, a3, a4);
}

void glFramebufferRenderbufferEXT_Exec(uint64_t a1, int a2, int a3, int a4, unsigned int a5)
{
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  __int16 v14;
  __int16 *v15;
  __int16 v16;
  uint64_t v17;

  if (a4 != 36161 && a5 != 0)
    goto LABEL_20;
  if (a2 == 36008)
  {
    v9 = 28968;
  }
  else
  {
    if (a2 != 36160 && a2 != 36009)
      goto LABEL_20;
    v9 = 28960;
  }
  v10 = *(_QWORD *)(a1 + v9);
  if (!v10)
  {
LABEL_27:
    v15 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832))
      return;
    v16 = 1282;
    goto LABEL_29;
  }
  v11 = 8;
  if (a3 != 33306 && a3 != 36096)
  {
    if (a3 == 36128)
    {
      v11 = 9;
      goto LABEL_17;
    }
    v11 = a3 - 36064;
    if (a3 - 36064 >= *(unsigned __int8 *)(*(_QWORD *)(a1 + 29032) + 22))
    {
LABEL_20:
      v15 = (__int16 *)(a1 + 29832);
      if (*(_WORD *)(a1 + 29832))
        return;
      v16 = 1280;
LABEL_29:
      *v15 = v16;
      return;
    }
  }
LABEL_17:
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  if (!a5)
  {
    v14 = 0;
    v13 = 0;
    goto LABEL_23;
  }
  v12 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 40, a5);
  if (!v12)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    goto LABEL_27;
  }
  v13 = (uint64_t)v12;
  v14 = 0x2000;
LABEL_23:
  v17 = v10 + 40;
  gleFramebufferTexture(a1, v17, v11, v14, v13, 0, 0, 0, 0);
  if (a3 == 33306)
    gleFramebufferTexture(a1, v17, 9u, v14, v13, 0, 0, 0, 0);
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
}

BOOL glIsFramebufferEXT_Exec(uint64_t a1, unsigned int a2)
{
  uint64_t *v4;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v4 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 8, a2);
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  return v4 != 0;
}

uint64_t glCheckFramebufferStatusEXT_Exec(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  if (a2 == 36008)
  {
    v3 = 28968;
LABEL_6:
    v4 = *(_QWORD *)(a1 + v3);
    if (v4)
    {
      os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
      v5 = gleCheckFramebufferStatus(a1, v4 + 40);
      os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
      return v5;
    }
    else if (*(_QWORD *)(a1 + 29008))
    {
      return 36053;
    }
    else
    {
      return 33305;
    }
  }
  if (a2 == 36160 || a2 == 36009)
  {
    v3 = 28960;
    goto LABEL_6;
  }
  if (*(_WORD *)(a1 + 29832))
    return 0;
  result = 0;
  *(_WORD *)(a1 + 29832) = 1280;
  return result;
}

uint64_t glGetFramebufferAttachmentParameterivEXT_Exec(uint64_t result, int a2, int a3, int a4, int *a5)
{
  __int16 *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  __int16 v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  __int16 v19;

  v7 = (__int16 *)(result + 29832);
  if (a2 == 36008)
  {
    v8 = 28968;
  }
  else
  {
    if (a2 != 36160 && a2 != 36009)
      goto LABEL_114;
    v8 = 28960;
  }
  v9 = *(_QWORD *)(result + v8);
  if (!v9)
  {
    if ((*(_BYTE *)(*(_QWORD *)(result + 29032) + 561) & 0x40) == 0)
    {
LABEL_17:
      if (*v7)
        return result;
      v14 = 1282;
LABEL_116:
      *v7 = v14;
      return result;
    }
    switch(a3)
    {
      case 1024:
        v11 = 0;
        v12 = 0;
        v13 = *(_QWORD *)(result + 29008) == 0;
        goto LABEL_30;
      case 1025:
        v11 = 0;
        v12 = 0;
        v17 = *(unsigned __int8 *)(*(_QWORD *)(result + 29480) + 42);
        goto LABEL_29;
      case 1026:
        goto LABEL_28;
      case 1027:
        if (*(_BYTE *)(result + 32483))
        {
          v11 = 0;
          v12 = 0;
          v13 = *(_BYTE *)(*(_QWORD *)(result + 29480) + 42) == 0;
LABEL_30:
          if (v13)
            v10 = 0;
          else
            v10 = 6144;
        }
        else
        {
          v10 = 0;
          v11 = 0;
          v12 = 0;
        }
        break;
      case 1028:
        goto LABEL_114;
      case 1029:
        if (*(_BYTE *)(result + 32501) != 4)
          goto LABEL_114;
LABEL_28:
        v11 = 0;
        v12 = 0;
        v17 = *(unsigned __int8 *)(result + 32483);
LABEL_29:
        v13 = v17 == 0;
        goto LABEL_30;
      default:
        v15 = 6145;
        if (a3 == 6145)
        {
          v11 = 0;
          v12 = 0;
          v16 = *(unsigned __int8 *)(*(_QWORD *)(result + 29480) + 56);
        }
        else
        {
          v15 = 6146;
          if (a3 != 6146)
            goto LABEL_114;
          v11 = 0;
          v12 = 0;
          v16 = *(unsigned __int8 *)(*(_QWORD *)(result + 29480) + 57);
        }
        if (v16)
          v10 = v15;
        else
          v10 = 0;
        break;
    }
LABEL_41:
    if (a4 <= 36047)
    {
      switch(a4)
      {
        case 33296:
          if (v11)
            goto LABEL_44;
          if (!v10)
            goto LABEL_122;
          if (v10 == 6144)
          {
            LODWORD(v12) = 9729;
            if (*(_BYTE *)(*(_QWORD *)(result + 29032) + 45))
            {
              if (*(_BYTE *)(result + 15196))
                LODWORD(v12) = 35904;
              else
                LODWORD(v12) = 9729;
            }
          }
          else
          {
            LODWORD(v12) = 9729;
          }
          goto LABEL_104;
        case 33297:
          if (v11)
          {
            v18 = 33297;
            return gleGetAttachmentInfo(result, v9, v10, v18, a5);
          }
          if (!v10)
            goto LABEL_122;
          if (v10 == 6144)
          {
            if (*(_BYTE *)(*(_QWORD *)(result + 29032) + 43))
              LODWORD(v12) = 5126;
            else
              LODWORD(v12) = 35863;
          }
          else
          {
            LODWORD(v12) = 35863;
          }
          break;
        case 33298:
          if (v11)
            goto LABEL_65;
          if (v10 != 6144)
            goto LABEL_103;
          LODWORD(v12) = *(unsigned __int8 *)(*(_QWORD *)(result + 29032) + 48);
          goto LABEL_104;
        case 33299:
          if (v11)
            goto LABEL_67;
          if (v10 != 6144)
            goto LABEL_103;
          LODWORD(v12) = *(unsigned __int8 *)(*(_QWORD *)(result + 29032) + 49);
          goto LABEL_104;
        case 33300:
          if (v11)
            goto LABEL_69;
          if (v10 != 6144)
            goto LABEL_103;
          LODWORD(v12) = *(unsigned __int8 *)(*(_QWORD *)(result + 29032) + 50);
          goto LABEL_104;
        case 33301:
          if (v11)
            goto LABEL_71;
          if (v10 != 6144)
            goto LABEL_103;
          LODWORD(v12) = *(unsigned __int8 *)(*(_QWORD *)(result + 29032) + 51);
          goto LABEL_104;
        case 33302:
          if (v11)
            goto LABEL_73;
          if (v10 != 6145)
            goto LABEL_103;
          LODWORD(v12) = *(unsigned __int8 *)(*(_QWORD *)(result + 29032) + 56);
          goto LABEL_104;
        case 33303:
          if (v11)
            goto LABEL_75;
          if (v10 == 6146)
            LODWORD(v12) = *(unsigned __int8 *)(*(_QWORD *)(result + 29032) + 57);
          else
LABEL_103:
            LODWORD(v12) = 0;
          goto LABEL_104;
        default:
          goto LABEL_56;
      }
      goto LABEL_104;
    }
    if (a4 != 36263)
    {
      if (a4 != 36049)
      {
        if (a4 == 36048)
        {
          if (!v11)
          {
            if (v10)
              LODWORD(v12) = 33304;
            else
              LODWORD(v12) = 0;
            goto LABEL_104;
          }
LABEL_49:
          if (v12)
          {
            if ((*(_WORD *)(v12 + 808) & 0x2000) != 0)
              LODWORD(v12) = 36161;
            else
              LODWORD(v12) = 5890;
            goto LABEL_104;
          }
          goto LABEL_122;
        }
LABEL_56:
        if (v12)
        {
          v19 = *(_WORD *)(v12 + 808);
          if ((v19 & 0x2000) == 0)
          {
            if (a4 <= 36050)
            {
              if (a4 == 35419)
              {
                result = gleTextureTargetExtractor(v12);
                *a5 = result;
                return result;
              }
              if (a4 == 36050)
              {
                LODWORD(v12) = *(_DWORD *)(v11 + 16 * v10 + 264);
LABEL_104:
                *a5 = v12;
                return result;
              }
              goto LABEL_114;
            }
            if (a4 == 36051)
            {
              if ((v19 & 0xF) == 0)
              {
                LODWORD(v12) = *(_DWORD *)(v11 + 16 * v10 + 260) + 34069;
                goto LABEL_104;
              }
              goto LABEL_122;
            }
            if (a4 == 36052)
            {
              if ((v19 & 0xFu) <= 0xA && ((1 << (v19 & 0xF)) & 0x662) != 0)
              {
                LODWORD(v12) = *(_DWORD *)(v11 + 16 * v10 + 268);
                goto LABEL_104;
              }
LABEL_122:
              *a5 = 0;
              return result;
            }
          }
        }
LABEL_114:
        if (*v7)
          return result;
        v14 = 1280;
        goto LABEL_116;
      }
LABEL_54:
      if (v12)
        LODWORD(v12) = *(_DWORD *)(v12 + 16);
      goto LABEL_104;
    }
LABEL_52:
    if (v12)
      LODWORD(v12) = *(char *)(v11 + 16 * v10 + 9);
    goto LABEL_104;
  }
  v10 = 8;
  if (a3 != 33306 && a3 != 36096)
  {
    if (a3 == 36128)
    {
      v11 = v9 + 40;
      v12 = *(_QWORD *)(v9 + 184);
      v10 = 9;
      goto LABEL_41;
    }
    v10 = a3 - 36064;
    if (a3 - 36064 >= *(unsigned __int8 *)(*(_QWORD *)(result + 29032) + 22))
      goto LABEL_114;
  }
  v11 = v9 + 40;
  v12 = *(_QWORD *)(v9 + 40 + 16 * v10);
  if (a3 != 33306)
    goto LABEL_41;
  if (v12 != *(_QWORD *)(v9 + 184))
    goto LABEL_17;
  if (a4 > 36047)
  {
    if (a4 == 36048)
      goto LABEL_49;
    if (a4 == 36049)
      goto LABEL_54;
    if (a4 != 36263)
      goto LABEL_56;
    goto LABEL_52;
  }
  switch(a4)
  {
    case 33296:
LABEL_44:
      v18 = 33296;
      break;
    case 33297:
      goto LABEL_17;
    case 33298:
LABEL_65:
      v18 = 32860;
      break;
    case 33299:
LABEL_67:
      v18 = 32861;
      break;
    case 33300:
LABEL_69:
      v18 = 32862;
      break;
    case 33301:
LABEL_71:
      v18 = 32863;
      break;
    case 33302:
LABEL_73:
      v18 = 34890;
      break;
    case 33303:
LABEL_75:
      v18 = 35057;
      break;
    default:
      goto LABEL_56;
  }
  return gleGetAttachmentInfo(result, v9, v10, v18, a5);
}

void glGenerateMipmapEXT_Exec(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned __int16 v10;
  int v11;
  int v12;
  int v13;
  unsigned __int16 *v14;
  int v15;

  v4 = a1 + 29832;
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  if (a2 > 35863)
  {
    if (a2 > 36872 || a2 != 35866)
    {
LABEL_13:
      if (!*(_WORD *)v4)
      {
        v6 = 1280;
LABEL_29:
        *(_WORD *)v4 = v6;
        goto LABEL_30;
      }
      goto LABEL_30;
    }
    goto LABEL_12;
  }
  if (a2 <= 32878)
  {
    if (a2 != 3553)
      goto LABEL_13;
    goto LABEL_15;
  }
  if (a2 == 32879)
  {
LABEL_12:
    if ((*(_BYTE *)(v4 + 2669) & 0xFE) == 2)
      goto LABEL_13;
LABEL_15:
    v5 = 1;
    goto LABEL_16;
  }
  if (a2 != 34067)
    goto LABEL_13;
  v5 = 6;
LABEL_16:
  v7 = gleLookUpNonProxyNonFaceTexture(a1, a2);
  if (!v7)
    goto LABEL_13;
  v8 = *(unsigned __int8 *)(v4 + 2669);
  if (((v8 & 0xFE) == 2 || (*(_BYTE *)(*(_QWORD *)(a1 + 29032) + 565) & 0x40) == 0)
    && ((*(_WORD *)(v7 + 962) & (unsigned __int16)(*(_WORD *)(v7 + 962) - 1)) != 0
     || (*(_WORD *)(v7 + 964) & (unsigned __int16)(*(_WORD *)(v7 + 964) - 1)) != 0))
  {
    goto LABEL_27;
  }
  if (*(_BYTE *)(v7 + 555))
    goto LABEL_27;
  v9 = *(unsigned __int16 *)(v7 + 772);
  if (v9 == 34041)
    goto LABEL_27;
  if (v9 == 6402)
    goto LABEL_27;
  v10 = *(_WORD *)(v7 + 960);
  if (v10 - 36208 < 0x24)
    goto LABEL_27;
  if (v10 - 33329 < 0xC)
    goto LABEL_27;
  v11 = *(unsigned __int16 *)(v7 + 960);
  if ((v11 - 36756) < 8 || v11 == 36975)
    goto LABEL_27;
  if (v8 != 4)
  {
LABEL_45:
    if (v11 == 35905 || v8 == 3 && v11 == 35907)
      goto LABEL_27;
    goto LABEL_48;
  }
  if ((v11 - 34836) < 0xC || (v11 - 33325) < 4)
  {
    v12 = v11 & 0xFFFE;
    goto LABEL_40;
  }
  v12 = 36012;
  if ((v11 & 0xFFFE) == 0x8CAC)
    goto LABEL_40;
  if (*(unsigned __int16 *)(v7 + 960) <= 0x8C3Cu)
  {
    v12 = v11 & 0xFFFE;
    if (v11 != 35898)
    {
LABEL_48:
      v13 = 35409;
      goto LABEL_49;
    }
    goto LABEL_40;
  }
  v12 = v11 & 0xFFFE;
  if (v11 == 35901)
  {
LABEL_40:
    if (v12 != 34842 && (v11 & 0xFFFFFFFD) != 0x822D)
    {
      if (v11 == 35898 || v11 == 35901)
        goto LABEL_50;
      goto LABEL_27;
    }
    goto LABEL_45;
  }
  v13 = 35905;
LABEL_49:
  if (v11 != v13)
  {
LABEL_50:
    v14 = (unsigned __int16 *)(v7 + 984);
    while (1)
    {
      v15 = *v14++;
      if (((1 << (*(_WORD *)(v7 + 982) & 0xF)) & v15) == 0)
        break;
      if (!--v5)
      {
        gleGenerateMipmap(a1, a2);
        goto LABEL_30;
      }
    }
    if (a2 != 34067)
      goto LABEL_30;
  }
LABEL_27:
  if (!*(_WORD *)v4)
  {
    v6 = 1282;
    goto LABEL_29;
  }
LABEL_30:
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
}

void glFramebufferTextureLayerEXT_Exec(uint64_t a1, int a2, int a3, unsigned int a4, unsigned int a5, int a6)
{
  uint64_t v11;
  uint64_t v12;
  __int16 *v13;
  __int16 v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  __int16 v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;

  if (a2 == 36008)
  {
    v11 = 28968;
  }
  else
  {
    if (a2 != 36160 && a2 != 36009)
      goto LABEL_24;
    v11 = 28960;
  }
  v12 = *(_QWORD *)(a1 + v11);
  if (!v12)
    goto LABEL_31;
  if (a4 && ((a6 | a5) & 0x80000000) != 0)
  {
LABEL_9:
    v13 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832))
      return;
    v14 = 1281;
LABEL_33:
    *v13 = v14;
    return;
  }
  v15 = 8;
  if (a3 == 33306 || a3 == 36096)
    goto LABEL_16;
  if (a3 == 36128)
  {
    v15 = 9;
    goto LABEL_16;
  }
  v15 = a3 - 36064;
  if (a3 - 36064 >= *(unsigned __int8 *)(*(_QWORD *)(a1 + 29032) + 22))
  {
LABEL_24:
    v13 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832))
      return;
    v14 = 1280;
    goto LABEL_33;
  }
LABEL_16:
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  if (a4)
  {
    v16 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 72, a4);
    if (v16)
    {
      v17 = (uint64_t)v16;
      v18 = v16[101] & 0xF;
      switch(v16[101] & 0xF)
      {
        case 1:
          v23 = 0;
          do
          {
            v24 = v23 + 1;
            if (v23 > 0x1F)
              break;
            v25 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 29032) + 164) << v23++;
          }
          while ((v25 & 0x80000000) == 0);
          if (32 - v24 < a5)
            goto LABEL_46;
          v18 = 1;
          goto LABEL_27;
        case 5:
        case 6:
          v19 = 0;
          do
          {
            v20 = v19 + 1;
            if (v19 > 0x1F)
              break;
            v21 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 29032) + 160) << v19++;
          }
          while ((v21 & 0x80000000) == 0);
          if (32 - v20 >= a5)
            goto LABEL_27;
          goto LABEL_46;
        case 9:
          if (a5)
            goto LABEL_46;
          v18 = 9;
          goto LABEL_27;
        case 0xALL:
          v26 = 0;
          do
          {
            v27 = v26 + 1;
            if (v26 > 0x1F)
              break;
            v28 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 29032) + 168) << v26++;
          }
          while ((v28 & 0x80000000) == 0);
          if (32 - v27 < a5)
          {
LABEL_46:
            os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
            goto LABEL_9;
          }
          v18 = 10;
          break;
        default:
          goto LABEL_30;
      }
      goto LABEL_27;
    }
LABEL_30:
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
LABEL_31:
    v13 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832))
      return;
    v14 = 1282;
    goto LABEL_33;
  }
  v18 = 0;
  v17 = 0;
LABEL_27:
  v22 = v12 + 40;
  gleFramebufferTexture(a1, v22, v15, v18, v17, 0, a5, a6, 0);
  if (a3 == 33306)
    gleFramebufferTexture(a1, v22, 9u, v18, v17, 0, a5, a6, 0);
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
}

BOOL glIsRenderbufferEXT_ExecThread(uint64_t a1, unsigned int a2)
{
  (*(void (**)(void))(a1 + 27752))();
  return glIsRenderbufferEXT_Exec(a1, a2);
}

_DWORD *glBindRenderbufferEXT_PackThread(uint64_t a1, int a2, int a3)
{
  _DWORD *result;

  result = gleAddCommand(a1, (uint64_t)glBindRenderbufferEXT_UnpackThread, 8);
  *result = a2;
  result[1] = a3;
  return result;
}

uint64_t glBindRenderbufferEXT_UnpackThread(uint64_t a1, uint64_t a2)
{
  glBindRenderbuffer_Exec(a1, *(_DWORD *)a2, *(_DWORD *)(a2 + 4));
  return 8;
}

void glDeleteRenderbuffersEXT_ExecThread(uint64_t a1, unsigned int a2, uint64_t a3)
{
  (*(void (**)(void))(a1 + 27752))();
  glDeleteRenderbuffersEXT_Exec(a1, a2, a3);
}

void glGenRenderbuffersEXT_ExecThread(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  (*(void (**)(void))(a1 + 27752))();
  glGenRenderbuffersEXT_Exec(a1, a2, a3);
}

_DWORD *glRenderbufferStorageEXT_PackThread(uint64_t a1, int a2, int a3, int a4, int a5)
{
  _DWORD *result;

  result = gleAddCommand(a1, (uint64_t)glRenderbufferStorageMultisampleEXT_UnpackThread, 20);
  *result = a2;
  result[1] = 0;
  result[2] = a3;
  result[3] = a4;
  result[4] = a5;
  return result;
}

uint64_t glRenderbufferStorageMultisampleEXT_UnpackThread(uint64_t a1, uint64_t a2)
{
  glRenderbufferStorageInline(a1, *(_DWORD *)a2, *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 8), *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 16));
  return 20;
}

uint64_t glGetRenderbufferParameterivEXT_ExecThread(uint64_t a1, int a2, int a3, int *a4)
{
  (*(void (**)(void))(a1 + 27752))();
  return glGetRenderbufferParameterivEXT_Exec(a1, a2, a3, a4);
}

BOOL glIsFramebufferEXT_ExecThread(uint64_t a1, unsigned int a2)
{
  (*(void (**)(void))(a1 + 27752))();
  return glIsFramebufferEXT_Exec(a1, a2);
}

_DWORD *glBindFramebufferEXT_PackThread(uint64_t a1, int a2, int a3)
{
  _DWORD *result;

  result = gleAddCommand(a1, (uint64_t)glBindFramebufferEXT_UnpackThread, 8);
  *result = a2;
  result[1] = a3;
  return result;
}

uint64_t glBindFramebufferEXT_UnpackThread(int8x16_t *a1, uint64_t a2)
{
  glBindFramebuffer_Exec(a1, *(_DWORD *)a2, *(_DWORD *)(a2 + 4));
  return 8;
}

void glDeleteFramebuffersEXT_ExecThread(uint64_t a1, unsigned int a2, unsigned int *a3)
{
  (*(void (**)(void))(a1 + 27752))();
  glDeleteFramebuffersEXT_Exec((int8x16_t *)a1, a2, a3);
}

void glGenFramebuffersEXT_ExecThread(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  (*(void (**)(void))(a1 + 27752))();
  glGenFramebuffersEXT_Exec(a1, a2, a3);
}

uint64_t glCheckFramebufferStatusEXT_ExecThread(uint64_t a1, int a2)
{
  (*(void (**)(void))(a1 + 27752))();
  return glCheckFramebufferStatusEXT_Exec(a1, a2);
}

_DWORD *glFramebufferTexture2DEXT_PackThread(uint64_t a1, int a2, int a3, int a4, int a5, int a6)
{
  _DWORD *result;

  result = gleAddCommand(a1, (uint64_t)glFramebufferTexture2DEXT_UnpackThread, 24);
  *result = a2;
  result[1] = a3;
  result[2] = a4;
  result[3] = a5;
  result[4] = a6;
  return result;
}

uint64_t glFramebufferTexture2DEXT_UnpackThread(uint64_t a1, uint64_t a2)
{
  glFramebufferTexture2DEXT_Exec(a1, *(_DWORD *)a2, *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 8), *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 16));
  return 24;
}

_DWORD *glFramebufferRenderbufferEXT_PackThread(uint64_t a1, int a2, int a3, int a4, int a5)
{
  _DWORD *result;

  result = gleAddCommand(a1, (uint64_t)glFramebufferRenderbufferEXT_UnpackThread, 24);
  *result = a2;
  result[1] = a3;
  result[2] = a4;
  result[3] = a5;
  return result;
}

uint64_t glFramebufferRenderbufferEXT_UnpackThread(uint64_t a1, uint64_t a2)
{
  glFramebufferRenderbufferEXT_Exec(a1, *(_DWORD *)a2, *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 8), *(_DWORD *)(a2 + 12));
  return 24;
}

uint64_t glGetFramebufferAttachmentParameterivEXT_ExecThread(uint64_t a1, int a2, int a3, int a4, int *a5)
{
  (*(void (**)(void))(a1 + 27752))();
  return glGetFramebufferAttachmentParameterivEXT_Exec(a1, a2, a3, a4, a5);
}

_QWORD *glGenerateMipmapEXT_PackThread(uint64_t a1, int a2)
{
  _QWORD *result;

  result = gleAddCommand(a1, (uint64_t)glGenerateMipmapEXT_UnpackThread, 4);
  *(_DWORD *)result = a2;
  return result;
}

uint64_t glGenerateMipmapEXT_UnpackThread(uint64_t a1, int *a2)
{
  glGenerateMipmapEXT_Exec(a1, *a2);
  return 4;
}

_DWORD *glFramebufferTextureLayerEXT_PackThread(uint64_t a1, int a2, int a3, int a4, int a5, int a6)
{
  _DWORD *result;

  result = gleAddCommand(a1, (uint64_t)glFramebufferTextureLayerEXT_UnpackThread, 24);
  *result = a2;
  result[1] = a3;
  result[3] = a4;
  result[4] = a5;
  result[5] = a6;
  return result;
}

uint64_t glFramebufferTextureLayerEXT_UnpackThread(uint64_t a1, uint64_t a2)
{
  glFramebufferTextureLayerEXT_Exec(a1, *(_DWORD *)a2, *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20));
  return 24;
}

_QWORD *glBlitFramebufferEXT_Comp(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10)
{
  _QWORD *result;

  result = gleAddCommand(a1, (uint64_t)glBlitFramebufferEXT_ListExec, 40);
  *(_DWORD *)result = a2;
  *((_DWORD *)result + 1) = a3;
  *((_DWORD *)result + 2) = a4;
  *((_DWORD *)result + 3) = a5;
  *((_DWORD *)result + 4) = a6;
  *((_DWORD *)result + 5) = a7;
  *((_DWORD *)result + 6) = a8;
  *(_QWORD *)((char *)result + 28) = a9;
  *((_DWORD *)result + 9) = a10;
  return result;
}

uint64_t glBlitFramebufferEXT_ListExec(uint64_t a1, uint64_t a2, double a3, __n128 a4, double a5)
{
  glBlitFramebufferEXT_Exec(a1, *(_DWORD *)a2, *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 8), *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), *(_DWORD *)(a2 + 24), a3, a4, a5, *(_QWORD *)(a2 + 28), HIDWORD(*(_QWORD *)(a2 + 28)), *(_DWORD *)(a2 + 36));
  return 40;
}

uint64_t glBlitFramebufferEXT_Exec(uint64_t result, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, int a6, int a7, int a8, double a9, __n128 a10, double a11, int a12, unsigned int a13, unsigned int a14)
{
  _WORD *v14;
  uint64_t v21;
  _WORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  int32x2_t *v34;
  BOOL v35;
  _BOOL4 v36;
  uint64_t v37;
  BOOL v38;
  BOOL v39;
  int v41;
  uint64_t v42;
  _BYTE *v43;
  _BYTE *v44;
  int v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  BOOL v53;
  uint64_t v54;
  unsigned int v55;
  _BOOL4 v56;
  int v57;
  int v58;
  _BOOL4 v59;
  int v60;
  int v61;
  _BOOL4 v62;
  int v63;
  _BOOL4 v64;
  int v65;
  _BOOL4 v66;
  _BOOL4 v67;
  _WORD *v68;
  BOOL v69;
  int v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  unsigned int v74;
  int v75;
  char v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  unsigned int v80;
  int v81;
  BOOL v82;
  int v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int *v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int *v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  int v100;
  unsigned int v101;
  int v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v107;
  unsigned int v108;

  v14 = (_WORD *)(result + 29832);
  if ((a13 & 0xFFFFBAFF) != 0)
  {
    if (*v14)
      return result;
    LOWORD(v29) = 1281;
LABEL_53:
    *v14 = v29;
    return result;
  }
  v21 = result;
  if (a14 != 9728)
  {
    if (a14 - 37050 >= 2)
    {
      if (a14 == 9729)
      {
LABEL_154:
        if ((a13 & 0x500) != 0)
        {
LABEL_51:
          LOWORD(v29) = 1282;
          goto LABEL_52;
        }
        goto LABEL_3;
      }
    }
    else if ((*(_BYTE *)(*(_QWORD *)(result + 29480) + 568) & 0x80) != 0)
    {
      goto LABEL_154;
    }
    LOWORD(v29) = 1280;
    goto LABEL_52;
  }
LABEL_3:
  v22 = (_WORD *)(result + 15176);
  if ((*(_BYTE *)(result + 1540) & 4) != 0)
  {
    result = gleGenerateMatrixIdentifier(result, result + 9488, a9, a10.n128_f64[0], a11);
    *(_DWORD *)(v21 + 19152) = *(_DWORD *)(v21 + 19152) & 0xFFFFFEFF | (((_DWORD)result != -1074791426) << 8);
    *(_DWORD *)(v21 + 29732) = result;
  }
  if ((*(_BYTE *)(v21 + 29803) & 0x8A) != 0)
  {
    result = gleUpdateReadFramebufferState(v21);
    if ((_DWORD)result)
      goto LABEL_11;
  }
  if ((*(_BYTE *)(v21 + 1540) & 4) != 0)
  {
    result = gleGenerateMatrixIdentifier(v21, v21 + 9488, a9, a10.n128_f64[0], a11);
    *(_DWORD *)(v21 + 19152) = *(_DWORD *)(v21 + 19152) & 0xFFFFFEFF | (((_DWORD)result != -1074791426) << 8);
    *(_DWORD *)(v21 + 29732) = result;
  }
  if ((*(_DWORD *)(v21 + 29800) & 0x743C0478) != 0)
  {
    result = gleUpdateDrawFramebufferState(v21, a9, a10.n128_f64[0], a11);
    if ((_DWORD)result)
    {
LABEL_11:
      if ((_DWORD)result != 16711680 && !*v14)
        *v14 = result;
      return result;
    }
  }
  v103 = a3;
  v104 = a5;
  v105 = a4;
  v23 = *(_QWORD *)(v21 + 28968);
  v24 = *(_QWORD *)(v21 + 28960);
  v25 = v23 + 40;
  v26 = v24 + 40;
  if ((a13 & 0x4000) == 0 || (v27 = *(unsigned __int16 *)(v23 + 472) - 36064, v27 > 7))
  {
    v29 = 0;
    if ((a13 & 0x100) == 0)
      goto LABEL_45;
    goto LABEL_33;
  }
  v28 = 0;
  v29 = 0;
  v30 = *(_QWORD *)(v25 + 16 * (*(unsigned __int16 *)(v23 + 472) - 36064));
  v31 = v23 + 16 * v27;
  a9 = *(double *)(v31 + 304);
  do
  {
    v32 = *(unsigned __int16 *)(v24 + 456 + v28) - 36064;
    if (v32 <= 7 && v30 != 0)
    {
      v34 = (int32x2_t *)(v24 + 296 + 16 * v32);
      v35 = v30 == *(_QWORD *)(v26 + 16 * (*(unsigned __int16 *)(v24 + 456 + v28) - 36064))
         && *(_DWORD *)(v31 + 300) == v34->i32[1];
      v36 = v35;
      a10.n128_u64[0] = (unint64_t)vceq_s32(*(int32x2_t *)&a9, v34[1]);
      result = a10.n128_u32[0];
      if ((v36 & a10.n128_u32[0] & a10.n128_u32[1]) != 0)
        v29 = 1282;
    }
    v28 += 2;
  }
  while (v28 != 16);
  if ((a13 & 0x100) != 0)
  {
LABEL_33:
    v37 = *(_QWORD *)(v23 + 168);
    if (v37)
    {
      v38 = *(_DWORD *)(v23 + 436) == *(_DWORD *)(v24 + 436) && *(_DWORD *)(v23 + 432) == *(_DWORD *)(v24 + 432);
      v39 = v38 && *(_DWORD *)(v23 + 428) == *(_DWORD *)(v24 + 428);
      if (v39 && v37 == *(_QWORD *)(v24 + 168))
        v29 = 1282;
    }
  }
LABEL_45:
  v41 = a14;
  if ((a13 & 0x400) != 0)
  {
    v42 = *(_QWORD *)(v23 + 184);
    if (v42)
    {
      if (v42 == *(_QWORD *)(v24 + 184)
        && *(_DWORD *)(v23 + 444) == *(_DWORD *)(v24 + 444)
        && *(_DWORD *)(v23 + 448) == *(_DWORD *)(v24 + 448)
        && *(_DWORD *)(v23 + 452) == *(_DWORD *)(v24 + 452))
      {
        goto LABEL_51;
      }
    }
  }
  if (v29)
  {
LABEL_52:
    if (*v14)
      return result;
    goto LABEL_53;
  }
  if (v23)
  {
    v43 = (_BYTE *)(v23 + 478);
    if (v24)
    {
LABEL_57:
      v44 = (_BYTE *)(v24 + 478);
      goto LABEL_60;
    }
  }
  else
  {
    v43 = (_BYTE *)(*(_QWORD *)(v21 + 29032) + 59);
    if (v24)
      goto LABEL_57;
  }
  v44 = (_BYTE *)(*(_QWORD *)(v21 + 29032) + 59);
LABEL_60:
  if (*v44)
    goto LABEL_160;
  v102 = a6;
  v45 = a12;
  v46 = *v43;
  if (a14 >> 1 == 18525)
  {
    if (!*v43)
      goto LABEL_160;
  }
  else if (*v43 && (v104 != a12 || v103 != a7 || a2 != v102 || v105 != a8))
  {
    goto LABEL_160;
  }
  v47 = a13 & 0xFFFFBFFF;
  if (v23)
  {
    if (*(_WORD *)(v23 + 472))
      v47 = a13;
    if (!*(_QWORD *)(v23 + 168))
      v47 &= ~0x100u;
    v48 = v47 & 0xFFFFFBFF;
    v49 = *(_QWORD *)(v23 + 184) == 0;
  }
  else
  {
    if (*v22)
      v47 = a13;
    v50 = *(_QWORD *)(v21 + 29480);
    if (!*(_BYTE *)(v50 + 56))
      v47 &= ~0x100u;
    v48 = v47 & 0xFFFFFBFF;
    v49 = *(_BYTE *)(v50 + 57) == 0;
  }
  if (v49)
    v47 = v48;
  v51 = 0;
  if (v24)
  {
    while (!*(_WORD *)(v24 + 456 + v51))
    {
      v51 += 2;
      if (v51 == 16)
      {
        v47 &= ~0x4000u;
        break;
      }
    }
    if (!*(_QWORD *)(v24 + 168))
      v47 &= ~0x100u;
    v52 = v47 & 0xFFFFFBFF;
    v53 = *(_QWORD *)(v24 + 184) == 0;
  }
  else
  {
    while (!*(_WORD *)(v21 + 15180 + v51))
    {
      v51 += 2;
      if (v51 == 16)
      {
        v47 &= ~0x4000u;
        break;
      }
    }
    v54 = *(_QWORD *)(v21 + 29480);
    if (!*(_BYTE *)(v54 + 56))
      v47 &= ~0x100u;
    v52 = v47 & 0xFFFFFBFF;
    v53 = *(_BYTE *)(v54 + 57) == 0;
  }
  if (v53)
    v55 = v52;
  else
    v55 = v47;
  if (!v55)
    return result;
  result = v55 & 0x4000;
  if ((result & *(_DWORD *)(*(_QWORD *)(v21 + 29032) + 560)) == 0)
    goto LABEL_113;
  v56 = 1;
  if (v23)
  {
    v57 = 1 << *(_WORD *)(v23 + 472);
    v58 = v57 & *(_DWORD *)(v23 + 528);
    v59 = v58 != 0;
    v60 = v57 & *(_DWORD *)(v23 + 532);
    v61 = v58 | v60;
    v62 = v60 != 0;
    v56 = v61 == 0;
    if (v24)
      goto LABEL_102;
LABEL_105:
    v64 = 0;
    v66 = 0;
    v67 = 1;
    if (!v56)
      goto LABEL_107;
LABEL_106:
    if (!v64 && !v66)
      goto LABEL_107;
LABEL_160:
    if (*v14)
      return result;
    LOWORD(v29) = 1282;
    goto LABEL_53;
  }
  v59 = 0;
  v62 = 0;
  if (!v24)
    goto LABEL_105;
LABEL_102:
  v63 = *(_DWORD *)(v24 + 528);
  v64 = v63 != 0;
  v65 = *(_DWORD *)(v24 + 532);
  v66 = v65 != 0;
  v67 = (*(_DWORD *)(v24 + 496) & ~(v65 | v63)) != 0;
  if (v56)
    goto LABEL_106;
LABEL_107:
  if (v59 && (v66 || v67))
    goto LABEL_160;
  if (v62 && (v64 || v67))
    goto LABEL_160;
  v41 = a14;
  if (a14 != 9728 && (v62 || v59))
    goto LABEL_160;
LABEL_113:
  v99 = a7;
  v100 = a8;
  v68 = v14;
  if (v23)
    v69 = v24 == 0;
  else
    v69 = 1;
  v70 = !v69;
  v101 = v55;
  if (!v69 && (v55 & 0x100) != 0)
  {
    v71 = *(_QWORD *)(v23 + 168);
    v72 = *(unsigned __int16 *)(v71 + 1000);
    v108 = v72;
    v73 = *(_QWORD *)(v24 + 168);
    v74 = *(unsigned __int16 *)(v73 + 1000);
    v107 = v74;
    if (v72 != v74)
    {
      v94 = v55 & 0x4000;
      v75 = v46;
      (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t, unsigned int *))(*(_QWORD *)(v21 + 29496) + 376))(*(_QWORD *)(v21 + 29464), *(_QWORD *)(v71 + 8 * *((unsigned __int8 *)v68 + 2668) + 40), *(unsigned int *)(v23 + 428), *(unsigned int *)(v23 + 432), 4099, &v108);
      (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t, unsigned int *))(*(_QWORD *)(v21 + 29496) + 376))(*(_QWORD *)(v21 + 29464), *(_QWORD *)(v73 + 8 * *((unsigned __int8 *)v68 + 2668) + 40), *(unsigned int *)(v24 + 428), *(unsigned int *)(v24 + 432), 4099, &v107);
      result = v94;
      v46 = v75;
      v55 = v101;
      v25 = v23 + 40;
      v41 = a14;
      v74 = v107;
      v72 = v108;
    }
    if (v72 != v74)
      goto LABEL_168;
  }
  v76 = v70 ^ 1;
  if ((v55 & 0x400) == 0)
    v76 = 1;
  if ((v76 & 1) == 0)
  {
    v77 = *(_QWORD *)(v23 + 184);
    v78 = *(unsigned __int16 *)(v77 + 1000);
    v108 = v78;
    v79 = *(_QWORD *)(v24 + 184);
    v80 = *(unsigned __int16 *)(v79 + 1000);
    v107 = v80;
    if (v78 != v80)
    {
      v95 = result;
      v97 = v25;
      v81 = v46;
      (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t, unsigned int *))(*(_QWORD *)(v21 + 29496) + 376))(*(_QWORD *)(v21 + 29464), *(_QWORD *)(v77 + 8 * *((unsigned __int8 *)v68 + 2668) + 40), *(unsigned int *)(v23 + 444), *(unsigned int *)(v23 + 448), 4099, &v108);
      (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t, unsigned int *))(*(_QWORD *)(v21 + 29496) + 376))(*(_QWORD *)(v21 + 29464), *(_QWORD *)(v79 + 8 * *((unsigned __int8 *)v68 + 2668) + 40), *(unsigned int *)(v24 + 444), *(unsigned int *)(v24 + 448), 4099, &v107);
      result = v95;
      v46 = v81;
      v55 = v101;
      v25 = v97;
      v41 = a14;
      v80 = v107;
      v78 = v108;
    }
    if (v78 != v80)
    {
LABEL_168:
      if (!*v68)
        *v68 = 1282;
      return result;
    }
  }
  if (v46)
    v82 = (_DWORD)result == 0;
  else
    v82 = 1;
  if (v82)
    v83 = 0;
  else
    v83 = v70;
  if (v83 != 1)
    goto LABEL_146;
  v84 = *(unsigned __int16 *)(v23 + 472) - 36064;
  v85 = v23 + 16 * v84;
  v107 = 0;
  v86 = *(_QWORD *)(v25 + 16 * v84);
  v98 = v86 + 40;
  result = gleSRGBToFormat(*(unsigned __int16 *)(v86 + 1000));
  v87 = 0;
  v88 = 0;
  v108 = result;
  v89 = v24 + 296;
  v90 = v24 + 456;
  v93 = (unsigned int *)(v85 + 304);
  v96 = (unsigned int *)(v85 + 300);
  while (1)
  {
    v91 = *(unsigned __int16 *)(v90 + v87) - 36064;
    if (v91 > 7)
      goto LABEL_144;
    v92 = *(_QWORD *)(v26 + 16 * (*(unsigned __int16 *)(v90 + v87) - 36064));
    result = gleSRGBToFormat(*(unsigned __int16 *)(v92 + 1000));
    v107 = result;
    if (v108 == (_DWORD)result)
      goto LABEL_144;
    if (!v88)
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t, unsigned int *))(*(_QWORD *)(v21 + 29496) + 376))(*(_QWORD *)(v21 + 29464), *(_QWORD *)(v98 + 8 * *((unsigned __int8 *)v68 + 2668)), *v96, *v93, 4099, &v108);
      v108 = gleSRGBToFormat(v108);
    }
    (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t, unsigned int *))(*(_QWORD *)(v21 + 29496) + 376))(*(_QWORD *)(v21 + 29464), *(_QWORD *)(v92 + 40 + 8 * *((unsigned __int8 *)v68 + 2668)), *(unsigned int *)(v89 + 16 * v91 + 4), *(unsigned int *)(v89 + 16 * v91 + 8), 4099, &v107);
    result = gleSRGBToFormat(v107);
    v107 = result;
    if (v108 != (_DWORD)result)
      break;
    v88 = 1;
LABEL_144:
    v87 += 2;
    if (v87 == 16)
      goto LABEL_145;
  }
  if (!*v68)
    *v68 = 1282;
LABEL_145:
  v41 = a14;
  v45 = a12;
  v55 = v101;
LABEL_146:
  if (a2 != v105 && v103 != v104 && v102 != v100 && v99 != v45)
    return gleBlitFramebuffer(v21, a2, v103, v105, v104, v102, v99, v100, a9, a10, v45, v55, v41);
  return result;
}

_DWORD *glRenderbufferStorageMultisampleEXT_PackThread(uint64_t a1, int a2, int a3, int a4, int a5, int a6)
{
  _DWORD *result;

  result = gleAddCommand(a1, (uint64_t)glRenderbufferStorageMultisampleEXT_UnpackThread, 20);
  *result = a2;
  result[1] = a3;
  result[2] = a4;
  result[3] = a5;
  result[4] = a6;
  return result;
}

uint64_t glDiscardFramebufferEXT_Exec(uint64_t result, int a2, unsigned int a3, unsigned int *a4, double a5, double a6, double a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  unsigned int *v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  BOOL v22;
  __int16 v23;
  unsigned int *v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;

  v9 = result;
  v10 = result + 29832;
  if (a2 == 36008)
  {
    v11 = 28968;
  }
  else
  {
    if (a2 != 36160 && a2 != 36009)
      goto LABEL_47;
    v11 = 28960;
  }
  v12 = (uint64_t *)(result + v11);
  if ((a3 & 0x80000000) != 0)
  {
    if (!*(_WORD *)v10)
    {
      v23 = 1281;
LABEL_49:
      *(_WORD *)v10 = v23;
      return result;
    }
    return result;
  }
  v13 = *v12;
  if (a3)
  {
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = a4;
    v19 = a3;
    do
    {
      v21 = *v18++;
      v20 = v21;
      result = v21 - 6144;
      if (result >= 3)
      {
        result = v20 >> 4;
        if ((_DWORD)result == 2254)
        {
          if (v20 - 36064 >= *(unsigned __int8 *)(*(_QWORD *)(v9 + 29480) + 22))
            v16 = 1;
          v14 = 1;
        }
        else if ((v20 & 0xFFFFFFDF) == 0x8D00)
        {
          v14 = 1;
        }
        else
        {
          v17 = 1;
        }
      }
      else
      {
        v15 = 1;
      }
      --v19;
    }
    while (v19);
    if (!v17)
    {
      v22 = v13 == 0;
      if (!v13)
        v15 = v14;
      if (!v15)
      {
        if (v16)
        {
          if (*(_WORD *)v10)
            return result;
          v23 = 1282;
          goto LABEL_49;
        }
        goto LABEL_27;
      }
    }
LABEL_47:
    if (*(_WORD *)v10)
      return result;
    v23 = 1280;
    goto LABEL_49;
  }
  v22 = v13 == 0;
LABEL_27:
  v24 = (unsigned int *)(v9 + 19152);
  v25 = *(_DWORD *)(v9 + 1540);
  if (a2 == 36008)
  {
    if ((v25 & 4) != 0)
    {
      result = gleGenerateMatrixIdentifier(v9, v9 + 9488, a5, a6, a7);
      *v24 = *v24 & 0xFFFFFEFF | (((_DWORD)result != -1074791426) << 8);
      *(_DWORD *)(v9 + 29732) = result;
    }
    if ((*(_BYTE *)(v9 + 29803) & 0x8A) == 0 || (result = gleUpdateReadFramebufferState(v9), !(_DWORD)result))
    {
LABEL_40:
      if (*(_BYTE *)(v10 + 2664))
      {
        v26 = 0;
        v27 = v13 + 200;
        v28 = (_QWORD *)(v9 + 32512);
        do
        {
          if (v22)
            v29 = 0;
          else
            v29 = *(_QWORD *)(v27 + 8 * v26);
          result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, unsigned int *))(v28[206] + 1600))(*v28, v29, a3, a4);
          ++v26;
          v28 += 209;
        }
        while (v26 < *(unsigned __int8 *)(v10 + 2664));
      }
      return result;
    }
  }
  else
  {
    if ((v25 & 4) != 0)
    {
      result = gleGenerateMatrixIdentifier(v9, v9 + 9488, a5, a6, a7);
      *v24 = *v24 & 0xFFFFFEFF | (((_DWORD)result != -1074791426) << 8);
      *(_DWORD *)(v9 + 29732) = result;
    }
    if ((*(_DWORD *)(v9 + 29800) & 0x743C0478) == 0)
      goto LABEL_40;
    result = gleUpdateDrawFramebufferState(v9, a5, a6, a7);
    if (!(_DWORD)result)
      goto LABEL_40;
  }
  if ((_DWORD)result != 16711680 && !*(_WORD *)v10)
    *(_WORD *)v10 = result;
  return result;
}

_QWORD *glDiscardFramebufferEXT_PackThread(_QWORD *result, int a2, unsigned int a3, int *a4)
{
  uint64_t v7;
  _DWORD *v8;
  int v9;

  if ((a3 & 0x80000000) != 0)
  {
    if (!*((_WORD *)result + 14916))
      *((_WORD *)result + 14916) = 1281;
  }
  else
  {
    result = gleAddCommand((uint64_t)result, (uint64_t)glDiscardFramebufferEXT_UnpackThread, (int)(4 * a3 + 8));
    *(_DWORD *)result = a2;
    *((_DWORD *)result + 1) = a3;
    if (a3)
    {
      v7 = a3;
      v8 = result + 1;
      do
      {
        v9 = *a4++;
        *v8++ = v9;
        --v7;
      }
      while (v7);
    }
  }
  return result;
}

uint64_t glDiscardFramebufferEXT_UnpackThread(uint64_t a1, uint64_t a2, double a3, double a4, double a5)
{
  glDiscardFramebufferEXT_Exec(a1, *(_DWORD *)a2, *(_DWORD *)(a2 + 4), (unsigned int *)(a2 + 8), a3, a4, a5);
  return (4 * *(_DWORD *)(a2 + 4) + 8);
}

uint64_t glInvalidateSubFramebuffer_Exec(uint64_t result, int a2, unsigned int a3, unsigned int *a4, double a5, double a6, double a7, int a8, int a9, int a10, int a11)
{
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  __int16 *v14;
  __int16 v15;

  if (a2 == 36008)
  {
    v11 = 28968;
  }
  else
  {
    if (a2 != 36160 && a2 != 36009)
    {
      v14 = (__int16 *)(result + 29832);
      if (*(_WORD *)(result + 29832))
        return result;
      v15 = 1280;
      goto LABEL_16;
    }
    v11 = 28960;
  }
  v12 = (uint64_t *)(result + v11);
  if ((a11 | a10) < 0)
  {
    v14 = (__int16 *)(result + 29832);
    if (*(_WORD *)(result + 29832))
      return result;
    v15 = 1281;
LABEL_16:
    *v14 = v15;
    return result;
  }
  if (a8 <= 0)
  {
    v13 = *v12;
    if (v13)
    {
      if (a9 <= 0 && a10 + a8 >= *(unsigned __int16 *)(v13 + 474) && a11 + a9 >= *(unsigned __int16 *)(v13 + 476))
        return glDiscardFramebufferEXT_Exec(result, a2, a3, a4, a5, a6, a7);
    }
  }
  return result;
}

_QWORD *glInvalidateSubFramebuffer_PackThread(_QWORD *result, int a2, unsigned int a3, int *a4, int a5, int a6, int a7, int a8)
{
  uint64_t v15;
  _DWORD *v16;
  int v17;

  if ((a3 & 0x80000000) != 0)
  {
    if (!*((_WORD *)result + 14916))
      *((_WORD *)result + 14916) = 1281;
  }
  else
  {
    result = gleAddCommand((uint64_t)result, (uint64_t)glInvalidateSubFramebuffer_UnpackThread, (int)(4 * a3 + 24));
    *(_DWORD *)result = a2;
    *((_DWORD *)result + 1) = a5;
    *((_DWORD *)result + 2) = a6;
    *((_DWORD *)result + 3) = a7;
    *((_DWORD *)result + 4) = a8;
    *((_DWORD *)result + 5) = a3;
    if (a3)
    {
      v15 = a3;
      v16 = result + 3;
      do
      {
        v17 = *a4++;
        *v16++ = v17;
        --v15;
      }
      while (v15);
    }
  }
  return result;
}

uint64_t glInvalidateSubFramebuffer_UnpackThread(uint64_t a1, uint64_t a2, double a3, double a4, double a5)
{
  glInvalidateSubFramebuffer_Exec(a1, *(_DWORD *)a2, *(_DWORD *)(a2 + 20), (unsigned int *)(a2 + 24), a3, a4, a5, *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 8), *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 16));
  return (4 * *(_DWORD *)(a2 + 20) + 24);
}

uint64_t glResolveMultisampleFramebufferAPPLE_Exec(uint64_t result, double a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  __n128 v10;

  v4 = result;
  v5 = result + 29832;
  v6 = result + 19152;
  if ((*(_BYTE *)(result + 1540) & 4) != 0)
  {
    result = gleGenerateMatrixIdentifier(result, result + 9488, a2, a3, a4);
    *(_DWORD *)v6 = *(_DWORD *)v6 & 0xFFFFFEFF | (((_DWORD)result != -1074791426) << 8);
    *(_DWORD *)(v6 + 10580) = result;
  }
  if ((*(_BYTE *)(v6 + 10651) & 0x8A) != 0)
  {
    result = gleUpdateReadFramebufferState(v4);
    if ((_DWORD)result)
      goto LABEL_9;
  }
  if ((*(_BYTE *)(v4 + 1540) & 4) != 0)
  {
    result = gleGenerateMatrixIdentifier(v4, v4 + 9488, a2, a3, a4);
    *(_DWORD *)v6 = *(_DWORD *)v6 & 0xFFFFFEFF | (((_DWORD)result != -1074791426) << 8);
    *(_DWORD *)(v6 + 10580) = result;
  }
  if ((*(_DWORD *)(v6 + 10648) & 0x743C0478) != 0
    && (result = gleUpdateDrawFramebufferState(v4, a2, a3, a4), (_DWORD)result))
  {
LABEL_9:
    if ((_DWORD)result != 16711680 && !*(_WORD *)v5)
      *(_WORD *)v5 = result;
  }
  else
  {
    v7 = *(_QWORD *)(v4 + 28968);
    if (v7 && (v8 = *(_QWORD *)(v4 + 28960)) != 0 && *(_BYTE *)(v5 + 2653) && *(_BYTE *)(v5 + 2654))
    {
      result = gleCheckMultisampleResolveFramebuffers(v4, v7 + 40, (uint64_t *)(v8 + 40));
      if ((_DWORD)result)
        return gleBlitFramebuffer(v4, 0, 0, *(unsigned __int16 *)(v7 + 474), *(unsigned __int16 *)(v7 + 476), 0, 0, *(unsigned __int16 *)(v8 + 474), v9, v10, *(unsigned __int16 *)(v8 + 476), 0x4000u, 9728);
    }
    else if (!*(_WORD *)v5)
    {
      *(_WORD *)v5 = 1286;
    }
  }
  return result;
}

_QWORD *glResolveMultisampleFramebufferAPPLE_PackThread(uint64_t a1)
{
  return gleAddCommand(a1, (uint64_t)glResolveMultisampleFramebufferAPPLE_UnpackThread, 0);
}

uint64_t glResolveMultisampleFramebufferAPPLE_UnpackThread(uint64_t a1, double a2, double a3, double a4)
{
  glResolveMultisampleFramebufferAPPLE_Exec(a1, a2, a3, a4);
  return 0;
}

void glGetInternalformativ_Exec(uint64_t *a1, int a2, unsigned int a3, int a4, int a5, _DWORD *a6)
{
  uint64_t *v6;
  int v7;
  uint64_t v12;
  unsigned __int8 *v13;
  __int16 v14;
  int v15;
  _DWORD *TextureObject;
  int v17;
  int v18;
  int v19;
  uint64_t v21;
  _DWORD *v22;
  int v23;
  int v24;

  v6 = a1 + 3729;
  if (a2 != 36161)
    goto LABEL_34;
  v7 = a5;
  if (a5 < 0)
  {
    if (*(_WORD *)v6)
      return;
    v14 = 1281;
LABEL_11:
    *(_WORD *)v6 = v14;
    return;
  }
  if (!gleCheckRenderableFormatArgs((uint64_t)a1, 36161, 0, a3))
    return;
  if (a4 != 37760 && a4 != 32937)
  {
LABEL_34:
    if (*(_WORD *)v6)
      return;
    v14 = 1280;
    goto LABEL_11;
  }
  if (v7)
  {
    v23 = a4;
    v24 = 0;
    v12 = a1[3685];
    v22 = a6;
    if (a3 - 36208 < 0x24 || a3 == 36975 || a3 - 33341 >= 0xFFFFFFF4)
      v13 = (unsigned __int8 *)(v12 + 173);
    else
      v13 = (unsigned __int8 *)(v12 + 170);
    v15 = *v13;
    TextureObject = gleCreateTextureObject(a1[2412], 8194, 0);
    if (v15 < 2)
    {
      v18 = 0;
    }
    else
    {
      v17 = 0;
      v18 = 0;
      do
      {
        BYTE1(v21) = 1;
        LOBYTE(v21) = v15;
        gleEvaluateTextureImageChange((uint64_t)a1, (uint64_t)(TextureObject + 10), (uint64_t)(TextureObject + 268), 0, 0, 1, 1, 1, 0, a3, 0x1908u, 0x1401u, v21, 0);
        TextureObject[252] = 65541;
        (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, int *))(a1[3687] + 376))(a1[3683], *(_QWORD *)&TextureObject[2 * *((unsigned __int8 *)v6 + 2668) + 10], 0, 0, 36011, &v24);
        v19 = v24;
        if (v24 != v17)
        {
          if (v23 == 32937)
          {
            *v22++ = v24;
            --v7;
            v19 = v24;
          }
          ++v18;
          v17 = v19;
        }
        if (!v7)
          break;
      }
      while (v15-- > 2);
    }
    if (v23 == 37760)
      *v22 = v18;
    gleFreeTextureObject(a1[2412], (uint64_t)TextureObject);
  }
}

void glGetInternalformativ_ExecThread(uint64_t a1, int a2, unsigned int a3, int a4, int a5, _DWORD *a6)
{
  (*(void (**)(void))(a1 + 27752))();
  glGetInternalformativ_Exec((uint64_t *)a1, a2, a3, a4, a5, a6);
}

float *glFogf_Comp(uint64_t a1, int a2, float a3)
{
  float *result;

  result = (float *)gleAddCommand(a1, (uint64_t)glFogf_ListExec, 8);
  *(_DWORD *)result = a2;
  result[1] = a3;
  return result;
}

uint64_t glFogf_ListExec(uint64_t a1, uint64_t a2)
{
  glFogf_Exec(a1, *(_DWORD *)a2, *(float *)(a2 + 4));
  return 8;
}

uint64_t glFogf_Exec(uint64_t result, int a2, float a3)
{
  __int16 *v3;
  unsigned int v4;
  float v6;
  float v7;
  BOOL v8;
  float v9;
  float v10;
  float v11;
  BOOL v12;
  float v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  unsigned int v25;
  __int16 v26;

  v3 = (__int16 *)(result + 29832);
  switch(a2)
  {
    case 2914:
      if (a3 < 0.0)
      {
        if (!*v3)
        {
          v26 = 1281;
          goto LABEL_61;
        }
      }
      else if (*(float *)(result + 15244) != a3)
      {
        *(float *)(result + 15244) = a3;
        *(float32x2_t *)(result + 15260) = vmul_n_f32((float32x2_t)0x3F99BE613FB8AA3BLL, a3);
        goto LABEL_30;
      }
      return result;
    case 2915:
      if (*(float *)(result + 15248) != a3)
      {
        *(float *)(result + 15248) = a3;
        v6 = *(float *)(result + 15252);
        v7 = v6 - a3;
        v8 = v7 > -0.000005 && v7 < 0.000005;
        v9 = 1.0 / v7;
        if (v8)
          v9 = 200000.0;
        *(float *)(result + 15256) = v9;
        v10 = v6 * v9;
        goto LABEL_29;
      }
      return result;
    case 2916:
      if (*(float *)(result + 15252) != a3)
      {
        *(float *)(result + 15252) = a3;
        v11 = a3 - *(float *)(result + 15248);
        v12 = v11 > -0.000005 && v11 < 0.000005;
        v13 = 1.0 / v11;
        if (v12)
          v13 = 200000.0;
        *(float *)(result + 15256) = v13;
        v10 = v13 * a3;
LABEL_29:
        *(float *)(result + 15272) = v10;
LABEL_30:
        v14 = *(_QWORD *)(result + 19248);
        if (v14)
        {
          v15 = *(unsigned __int16 *)(v14 + 3782);
          if (v15 <= 0x3FF)
          {
            *(_DWORD *)(result + ((v15 >> 3) & 0x1FFC) + 1552) |= 1 << v15;
            *(_DWORD *)(result + 28652) = 0;
            *(_DWORD *)(result + 1532) |= 0x800000u;
          }
        }
        v16 = *(_QWORD *)(result + 19272);
        if (v16)
        {
          v17 = *(unsigned __int16 *)(v16 + 3782);
          if (v17 <= 0x3FF)
          {
            *(_DWORD *)(result + ((v17 >> 3) & 0x1FFC) + 1936) |= 1 << v17;
            *(_DWORD *)(result + 28652) = 0;
            *(_DWORD *)(result + 1532) |= 0x4000000u;
          }
        }
        v18 = *(_QWORD *)(result + 19280);
        if (v18)
        {
          v19 = *(unsigned __int16 *)(v18 + 3782);
          if (v19 <= 0x3FF)
          {
            *(_DWORD *)(result + ((v19 >> 3) & 0x1FFC) + 2064) |= 1 << v19;
            *(_DWORD *)(result + 28652) = 0;
            *(_DWORD *)(result + 1532) |= 0x8000000u;
          }
        }
        if (v14)
        {
          v20 = *(unsigned __int16 *)(v14 + 3784);
          if (v20 <= 0x3FF)
          {
            *(_DWORD *)(result + ((v20 >> 3) & 0x1FFC) + 1552) |= 1 << v20;
            *(_DWORD *)(result + 28652) = 0;
            *(_DWORD *)(result + 1532) |= 0x800000u;
          }
        }
        if (v16)
        {
          v21 = *(unsigned __int16 *)(v16 + 3784);
          if (v21 <= 0x3FF)
          {
            *(_DWORD *)(result + ((v21 >> 3) & 0x1FFC) + 1936) |= 1 << v21;
            *(_DWORD *)(result + 28652) = 0;
            *(_DWORD *)(result + 1532) |= 0x4000000u;
          }
        }
        if (v18)
        {
          v22 = *(unsigned __int16 *)(v18 + 3784);
          if (v22 <= 0x3FF)
          {
            *(_DWORD *)(result + ((v22 >> 3) & 0x1FFC) + 2064) |= 1 << v22;
            *(_DWORD *)(result + 28652) = 0;
            *(_DWORD *)(result + 1532) |= 0x8000000u;
          }
        }
      }
      return result;
    case 2917:
      v23 = a3;
      if (a3 - 2048 >= 2 && v23 != 9729)
        goto LABEL_58;
      if (*(unsigned __int16 *)(result + 15276) != v23)
      {
        *(_WORD *)(result + 15276) = v23;
        return gleUpdateFogData(result);
      }
      return result;
    default:
      if (a2 == 33872)
      {
        v25 = a3;
        if (a3 - 33873 >= 2)
          goto LABEL_58;
        if (*(unsigned __int16 *)(result + 15278) == v25)
          return result;
        *(_WORD *)(result + 15278) = v25;
        return gleUpdateFogData(result);
      }
      if (a2 == 34138)
      {
        v4 = a3;
        if (a3 - 34139 < 2 || v4 == 9474)
        {
          if (*(unsigned __int16 *)(result + 15280) == v4)
            return result;
          *(_WORD *)(result + 15280) = v4;
          return gleUpdateFogData(result);
        }
      }
LABEL_58:
      if (!*v3)
      {
        v26 = 1280;
LABEL_61:
        *v3 = v26;
      }
      return result;
  }
}

uint64_t glFogx_Exec(uint64_t a1, int a2, int a3)
{
  float v3;

  v3 = (float)a3;
  if (a2 != 2917)
    v3 = v3 * 0.000015259;
  return glFogf_Exec(a1, a2, v3);
}

float *glFogx_PackThread(uint64_t a1, int a2, int a3)
{
  float v3;
  float *result;

  v3 = (float)a3;
  if (a2 == 2917)
  {
    result = (float *)gleAddCommand(a1, (uint64_t)glFogf_ListExec, 8);
    *(_DWORD *)result = 2917;
  }
  else
  {
    v3 = v3 * 0.000015259;
    result = (float *)gleAddCommand(a1, (uint64_t)glFogf_ListExec, 8);
    *(_DWORD *)result = a2;
  }
  result[1] = v3;
  return result;
}

float glFogfv_Comp(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD *v5;
  float result;

  v5 = gleAddCommand(a1, (uint64_t)glFogfv_ListExec, 20);
  *(_DWORD *)v5 = a2;
  *((_DWORD *)v5 + 1) = *(_DWORD *)a3;
  *((_DWORD *)v5 + 2) = *(_DWORD *)(a3 + 4);
  *((_DWORD *)v5 + 3) = *(_DWORD *)(a3 + 8);
  result = *(float *)(a3 + 12);
  *((float *)v5 + 4) = result;
  return result;
}

uint64_t glFogfv_ListExec(uint64_t a1, uint64_t a2)
{
  glFogfv_Exec(a1, *(_DWORD *)a2, (float *)(a2 + 4));
  return 20;
}

uint64_t glFogfv_Exec(uint64_t result, int a2, float *a3)
{
  float *v3;
  _DWORD *v4;
  float v5;
  unsigned int v6;
  float v8;
  float v9;
  float v10;
  BOOL v11;
  float v12;
  float v13;
  float v14;
  float v15;
  BOOL v16;
  float v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  unsigned int v35;
  __int16 v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;

  v3 = (float *)(result + 29576);
  v4 = (_DWORD *)(result + 28652);
  switch(a2)
  {
    case 2914:
      v5 = *a3;
      if (*a3 < 0.0)
      {
        if (!*(_WORD *)(result + 29832))
        {
          v36 = 1281;
          goto LABEL_66;
        }
      }
      else if (*(float *)(result + 15244) != v5)
      {
        *(float *)(result + 15244) = v5;
        *(float32x2_t *)(result + 15260) = vmul_n_f32((float32x2_t)0x3F99BE613FB8AA3BLL, v5);
        goto LABEL_30;
      }
      return result;
    case 2915:
      v8 = *a3;
      if (*(float *)(result + 15248) != *a3)
      {
        *(float *)(result + 15248) = v8;
        v9 = *(float *)(result + 15252);
        v10 = v9 - v8;
        v11 = v10 > -0.000005 && v10 < 0.000005;
        v12 = 1.0 / v10;
        if (v11)
          v12 = 200000.0;
        *(float *)(result + 15256) = v12;
        v13 = v9 * v12;
        goto LABEL_29;
      }
      return result;
    case 2916:
      v14 = *a3;
      if (*(float *)(result + 15252) != *a3)
      {
        *(float *)(result + 15252) = v14;
        v15 = v14 - *(float *)(result + 15248);
        v16 = v15 > -0.000005 && v15 < 0.000005;
        v17 = 1.0 / v15;
        if (v16)
          v17 = 200000.0;
        *(float *)(result + 15256) = v17;
        v13 = v14 * v17;
LABEL_29:
        *(float *)(result + 15272) = v13;
LABEL_30:
        v18 = *(_QWORD *)(result + 19248);
        if (v18)
        {
          v19 = *(unsigned __int16 *)(v18 + 3782);
          if (v19 <= 0x3FF)
          {
            *(_DWORD *)(result + ((v19 >> 3) & 0x1FFC) + 1552) |= 1 << v19;
            *v4 = 0;
            *(_DWORD *)(result + 1532) |= 0x800000u;
          }
        }
        v20 = *(_QWORD *)(result + 19272);
        if (v20)
        {
          v21 = *(unsigned __int16 *)(v20 + 3782);
          if (v21 <= 0x3FF)
          {
            *(_DWORD *)(result + ((v21 >> 3) & 0x1FFC) + 1936) |= 1 << v21;
            *v4 = 0;
            *(_DWORD *)(result + 1532) |= 0x4000000u;
          }
        }
        v22 = *(_QWORD *)(result + 19280);
        if (v22)
        {
          v23 = *(unsigned __int16 *)(v22 + 3782);
          if (v23 <= 0x3FF)
          {
            *(_DWORD *)(result + ((v23 >> 3) & 0x1FFC) + 2064) |= 1 << v23;
            *v4 = 0;
            *(_DWORD *)(result + 1532) |= 0x8000000u;
          }
        }
        if (v18)
        {
          v24 = *(unsigned __int16 *)(v18 + 3784);
          if (v24 <= 0x3FF)
          {
            *(_DWORD *)(result + ((v24 >> 3) & 0x1FFC) + 1552) |= 1 << v24;
            *v4 = 0;
            *(_DWORD *)(result + 1532) |= 0x800000u;
          }
        }
        if (v20)
        {
          v25 = *(unsigned __int16 *)(v20 + 3784);
          if (v25 <= 0x3FF)
          {
            *(_DWORD *)(result + ((v25 >> 3) & 0x1FFC) + 1936) |= 1 << v25;
            *v4 = 0;
            *(_DWORD *)(result + 1532) |= 0x4000000u;
          }
        }
        if (v22)
        {
          v26 = *(unsigned __int16 *)(v22 + 3784);
          goto LABEL_76;
        }
      }
      return result;
    case 2917:
      v27 = *a3;
      if (v27 - 2048 >= 2 && v27 != 9729)
        goto LABEL_63;
      if (*(unsigned __int16 *)(result + 15276) != v27)
      {
        *(_WORD *)(result + 15276) = v27;
        return gleUpdateFogData(result);
      }
      return result;
    case 2918:
      v30 = *a3;
      v29 = a3[1];
      v32 = a3[2];
      v31 = a3[3];
      if (*v3 != *a3
        || *(float *)(result + 29580) != v29
        || *(float *)(result + 29584) != v32
        || *(float *)(result + 29588) != v31)
      {
        *v3 = v30;
        *(float *)(result + 29580) = v29;
        *(float *)(result + 29584) = v32;
        *(float *)(result + 29588) = v31;
        if (*(_BYTE *)(result + 15178))
        {
          v33 = *(float *)(result + 288);
          v34 = *(float *)(result + 292);
          *(float *)(result + 15228) = fminf(fmaxf(v30, v33), v34);
          *(float *)(result + 15232) = fminf(fmaxf(v29, v33), v34);
          *(float *)(result + 15236) = fminf(fmaxf(v32, v33), v34);
          *(float *)(result + 15240) = fminf(fmaxf(v31, v33), v34);
        }
        else
        {
          *(_OWORD *)(result + 15228) = *(_OWORD *)v3;
        }
        v37 = *(_QWORD *)(result + 19248);
        if (v37)
        {
          v38 = *(unsigned __int16 *)(v37 + 3780);
          if (v38 <= 0x3FF)
          {
            *(_DWORD *)(result + ((v38 >> 3) & 0x1FFC) + 1552) |= 1 << v38;
            *v4 = 0;
            *(_DWORD *)(result + 1532) |= 0x800000u;
          }
        }
        v39 = *(_QWORD *)(result + 19272);
        if (v39)
        {
          v40 = *(unsigned __int16 *)(v39 + 3780);
          if (v40 <= 0x3FF)
          {
            *(_DWORD *)(result + ((v40 >> 3) & 0x1FFC) + 1936) |= 1 << v40;
            *v4 = 0;
            *(_DWORD *)(result + 1532) |= 0x4000000u;
          }
        }
        v41 = *(_QWORD *)(result + 19280);
        if (v41)
        {
          v26 = *(unsigned __int16 *)(v41 + 3780);
LABEL_76:
          if (v26 <= 0x3FF)
          {
            *(_DWORD *)(result + ((v26 >> 3) & 0x1FFC) + 2064) |= 1 << v26;
            *v4 = 0;
            *(_DWORD *)(result + 1532) |= 0x8000000u;
          }
        }
      }
      return result;
    default:
      if (a2 == 33872)
      {
        v35 = *a3;
        if (v35 - 33873 >= 2)
          goto LABEL_63;
        if (*(unsigned __int16 *)(result + 15278) == v35)
          return result;
        *(_WORD *)(result + 15278) = v35;
        return gleUpdateFogData(result);
      }
      if (a2 == 34138)
      {
        v6 = *a3;
        if (v6 - 34139 < 2 || v6 == 9474)
        {
          if (*(unsigned __int16 *)(result + 15280) == v6)
            return result;
          *(_WORD *)(result + 15280) = v6;
          return gleUpdateFogData(result);
        }
      }
LABEL_63:
      if (!*(_WORD *)(result + 29832))
      {
        v36 = 1280;
LABEL_66:
        *(_WORD *)(result + 29832) = v36;
      }
      return result;
  }
}

uint64_t glFogxv_Exec(uint64_t a1, int a2, int32x4_t *a3)
{
  float v3;
  float32x4_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  if (a2 == 2918)
  {
    v5 = vmulq_f32(vcvtq_f32_s32(*a3), (float32x4_t)vdupq_n_s32(0x37800000u));
  }
  else
  {
    if (a2 == 2917)
      v3 = (float)a3->i32[0];
    else
      v3 = (float)a3->i32[0] * 0.000015259;
    v5.f32[0] = v3;
  }
  return glFogfv_Exec(a1, a2, v5.f32);
}

__n128 glFogxv_PackThread(uint64_t a1, int a2, int32x4_t *a3, float32x4_t a4)
{
  _QWORD *v5;
  __n128 result;
  __n128 v7;

  if (a2 == 2918)
  {
    a4 = vmulq_f32(vcvtq_f32_s32(*a3), (float32x4_t)vdupq_n_s32(0x37800000u));
  }
  else if (a2 == 2917)
  {
    a4.f32[0] = (float)a3->i32[0];
  }
  else
  {
    a4.f32[0] = (float)a3->i32[0] * 0.000015259;
  }
  v7 = (__n128)a4;
  v5 = gleAddCommand(a1, (uint64_t)glFogfv_ListExec, 20);
  *(_DWORD *)v5 = a2;
  result = v7;
  *(__n128 *)((char *)v5 + 4) = v7;
  return result;
}

_QWORD *glFrontFace_Comp(uint64_t a1, int a2)
{
  _QWORD *result;

  result = gleAddCommand(a1, (uint64_t)glFrontFace_ListExec, 4);
  *(_DWORD *)result = a2;
  return result;
}

uint64_t glFrontFace_ListExec(uint64_t a1, int *a2)
{
  glFrontFace_Exec(a1, *a2);
  return 4;
}

float glFrustum_Comp(uint64_t a1, double a2, double a3, double a4, double a5, double a6, double a7)
{
  double v10;
  float v11;
  float v12;
  float v15;
  float v16;
  float v18;
  float v19;
  float result;
  float *v21;
  float v22;
  float v23;
  float v24;
  double v25;
  float v26;
  float v27;

  if (a6 <= 0.0 || a7 <= 0.0)
    goto LABEL_13;
  v10 = a3 - a2;
  v11 = v10;
  v12 = v11 < 0.0 ? -v11 : v10;
  if (v12 < 0.000005)
    goto LABEL_13;
  v15 = a5 - a4;
  v16 = -v15;
  if (v15 >= 0.0)
    v16 = a5 - a4;
  if (v16 < 0.000005)
    goto LABEL_13;
  v18 = a6 - a7;
  v19 = -v18;
  if (v18 >= 0.0)
    v19 = a6 - a7;
  if (v19 >= 0.000005)
  {
    v27 = a6 - a7;
    v21 = (float *)gleAddCommand(a1, (uint64_t)glFrustum_ListExec, 24);
    v22 = a6 + a6;
    *v21 = (float)(1.0 / v11) * v22;
    v21[1] = (float)(1.0 / v15) * v22;
    v23 = (a2 + a3) * (float)(1.0 / v11);
    v24 = (a4 + a5) * (float)(1.0 / v15);
    v21[2] = v23;
    v21[3] = v24;
    v25 = (float)(1.0 / v27);
    v26 = (a6 + a7) * v25;
    result = v22 * a7 * v25;
    v21[4] = v26;
    v21[5] = result;
  }
  else
  {
LABEL_13:
    gleSetErrorInList(a1, 1281);
  }
  return result;
}

uint64_t glFrustum_ListExec(uint64_t a1, float *a2)
{
  float32x4_t *v2;
  float v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;

  if (*(int *)(a1 + 20484) < 24)
  {
    v2 = *(float32x4_t **)(a1 + 19976);
    v3 = *a2;
    v5 = *v2;
    v4 = v2[1];
    v6 = vmulq_n_f32(v4, a2[1]);
    v7 = vmulq_n_f32(v4, a2[3]);
    v8 = v2[2];
    v9 = vmulq_n_f32(v8, a2[5]);
    v2[2] = vsubq_f32(vmlaq_n_f32(vmlaq_n_f32(v7, *v2, a2[2]), v8, a2[4]), v2[3]);
    v2[3] = v9;
    *v2 = vmulq_n_f32(v5, v3);
    v2[1] = v6;
    LODWORD(v2) = *(_DWORD *)(a1 + 20488);
    *(_DWORD *)(a1 + 1528) |= v2;
    *(_DWORD *)(a1 + 28652) = 0;
    *(int8x8_t *)(a1 + 1540) = vorr_s8(*(int8x8_t *)(a1 + 1540), (int8x8_t)vdup_n_s32(v2));
  }
  else if (!*(_WORD *)(a1 + 29832))
  {
    *(_WORD *)(a1 + 29832) = 1282;
  }
  return 24;
}

int8x8_t glFrustumf_Exec(uint64_t a1, float a2, float a3, float a4, float a5, float a6, float a7)
{
  return glFrustum_Exec(a1, COERCE_INT8X8_T(a2), a3, a4, a5, a6, a7);
}

int8x8_t glFrustumx_Exec(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7)
{
  return glFrustum_Exec(a1, COERCE_INT8X8_T((float)((float)a2 * 0.000015259)), (float)((float)a3 * 0.000015259), (float)((float)a4 * 0.000015259), (float)((float)a5 * 0.000015259), (float)((float)a6 * 0.000015259), (float)((float)a7 * 0.000015259));
}

float glFrustumf_PackThread(uint64_t a1, float a2, float a3, float a4, float a5, float a6, float a7)
{
  return glFrustum_Comp(a1, a2, a3, a4, a5, a6, a7);
}

float glFrustumx_PackThread(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7)
{
  return glFrustum_Comp(a1, (float)((float)a2 * 0.000015259), (float)((float)a3 * 0.000015259), (float)((float)a4 * 0.000015259), (float)((float)a5 * 0.000015259), (float)((float)a6 * 0.000015259), (float)((float)a7 * 0.000015259));
}

_DWORD *glHint_Comp(uint64_t a1, int a2, int a3)
{
  _DWORD *result;

  result = gleAddCommand(a1, (uint64_t)glHint_ListExec, 8);
  *result = a2;
  result[1] = a3;
  return result;
}

uint64_t glHint_ListExec(uint64_t a1, int *a2)
{
  glHint_Exec(a1, *a2, a2[1]);
  return 8;
}

_QWORD *glLightf_Comp(uint64_t a1, int a2, int a3, float a4)
{
  _QWORD *result;

  result = gleAddCommand(a1, (uint64_t)glLightf_ListExec, 12);
  *(_DWORD *)result = a2;
  *((_DWORD *)result + 1) = a3;
  *((float *)result + 2) = a4;
  return result;
}

uint64_t glLightf_ListExec(uint64_t a1, uint64_t a2)
{
  glLightf_Exec(a1, *(_DWORD *)a2, *(_DWORD *)(a2 + 4), *(float *)(a2 + 8));
  return 12;
}

void glLightf_Exec(uint64_t a1, int a2, int a3, float a4)
{
  _DWORD *v4;
  unsigned int v5;
  __int16 v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  float v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;

  v4 = (_DWORD *)(a1 + 28652);
  v5 = a2 - 0x4000;
  if ((a2 - 0x4000) < 8)
  {
    switch(a3)
    {
      case 4613:
        if (a4 < 0.0 || (float)*(int *)(*(_QWORD *)(a1 + 29032) + 128) < a4)
          goto LABEL_26;
        *(float *)(a1 + 160 * v5 + 12636) = a4;
        gleUpdateLightExponents(a1, a2 - 0x4000);
        v8 = *(_QWORD *)(a1 + 19248);
        if (v8)
        {
          v9 = *(unsigned __int16 *)(v8 + 20 * v5 + 2570);
          if (v9 <= 0x3FF)
          {
            *(_DWORD *)(a1 + ((v9 >> 3) & 0x1FFC) + 1552) |= 1 << v9;
            *v4 = 0;
            *(_DWORD *)(a1 + 1532) |= 0x800000u;
          }
        }
        v10 = *(_QWORD *)(a1 + 19272);
        if (v10)
        {
          v11 = *(unsigned __int16 *)(v10 + 20 * v5 + 2570);
          if (v11 <= 0x3FF)
          {
            *(_DWORD *)(a1 + ((v11 >> 3) & 0x1FFC) + 1936) |= 1 << v11;
            *v4 = 0;
            *(_DWORD *)(a1 + 1532) |= 0x4000000u;
          }
        }
        v12 = *(_QWORD *)(a1 + 19280);
        if (!v12)
          return;
        v13 = *(unsigned __int16 *)(v12 + 20 * v5 + 2570);
        goto LABEL_39;
      case 4614:
        if (a4 < 0.0 || a4 > 90.0)
        {
          if (a4 != 180.0)
          {
LABEL_26:
            if (*(_WORD *)(a1 + 29832))
              return;
            v6 = 1281;
            goto LABEL_28;
          }
          *(_DWORD *)(a1 + 160 * v5 + 12688) = 1127481344;
          v14 = -1.0;
        }
        else
        {
          *(float *)(a1 + 160 * v5 + 12688) = a4;
          v14 = cosf(a4 * 0.017453);
        }
        *(float *)(a1 + 160 * v5 + 12620) = v14;
        gleUpdateLightExponents(a1, v5);
        v15 = *(_QWORD *)(a1 + 19248);
        if (v15)
        {
          v16 = *(unsigned __int16 *)(v15 + 20 * v5 + 2568);
          if (v16 <= 0x3FF)
          {
            *(_DWORD *)(a1 + ((v16 >> 3) & 0x1FFC) + 1552) |= 1 << v16;
            *v4 = 0;
            *(_DWORD *)(a1 + 1532) |= 0x800000u;
          }
        }
        v17 = *(_QWORD *)(a1 + 19272);
        if (v17)
        {
          v18 = *(unsigned __int16 *)(v17 + 20 * v5 + 2568);
          if (v18 <= 0x3FF)
          {
            *(_DWORD *)(a1 + ((v18 >> 3) & 0x1FFC) + 1936) |= 1 << v18;
            *v4 = 0;
            *(_DWORD *)(a1 + 1532) |= 0x4000000u;
          }
        }
        v19 = *(_QWORD *)(a1 + 19280);
        if (v19)
        {
          v13 = *(unsigned __int16 *)(v19 + 20 * v5 + 2568);
LABEL_39:
          if (v13 <= 0x3FF)
          {
            *(_DWORD *)(a1 + ((v13 >> 3) & 0x1FFC) + 2064) |= 1 << v13;
            *v4 = 0;
            *(_DWORD *)(a1 + 1532) |= 0x8000000u;
          }
        }
        return;
      case 4615:
        if (a4 < 0.0)
          goto LABEL_26;
        *(float *)(a1 + 160 * v5 + 12624) = a4;
        goto LABEL_24;
      case 4616:
        if (a4 < 0.0)
          goto LABEL_26;
        *(float *)(a1 + 160 * v5 + 12628) = a4;
        goto LABEL_24;
      case 4617:
        if (a4 < 0.0)
          goto LABEL_26;
        *(float *)(a1 + 160 * v5 + 12632) = a4;
LABEL_24:
        gleUpdateLightAttenuation(a1, a2 - 0x4000);
        return;
      default:
        break;
    }
  }
  if (*(_WORD *)(a1 + 29832))
    return;
  v6 = 1280;
LABEL_28:
  *(_WORD *)(a1 + 29832) = v6;
}

void glLightx_Exec(uint64_t a1, int a2, int a3, int a4)
{
  glLightf_Exec(a1, a2, a3, (float)a4 * 0.000015259);
}

_QWORD *glLightx_PackThread(uint64_t a1, int a2, int a3, int a4)
{
  float v6;
  _QWORD *result;

  v6 = (float)a4 * 0.000015259;
  result = gleAddCommand(a1, (uint64_t)glLightf_ListExec, 12);
  *(_DWORD *)result = a2;
  *((_DWORD *)result + 1) = a3;
  *((float *)result + 2) = v6;
  return result;
}

float glLightfv_Comp(uint64_t a1, int a2, int a3, uint64_t a4)
{
  _QWORD *v7;
  float result;

  v7 = gleAddCommand(a1, (uint64_t)glLightfv_ListExec, 24);
  *(_DWORD *)v7 = a2;
  *((_DWORD *)v7 + 1) = a3;
  switch(a3)
  {
    case 4608:
    case 4609:
    case 4610:
    case 4611:
      *((_DWORD *)v7 + 2) = *(_DWORD *)a4;
      *((_DWORD *)v7 + 3) = *(_DWORD *)(a4 + 4);
      *((_DWORD *)v7 + 4) = *(_DWORD *)(a4 + 8);
      result = *(float *)(a4 + 12);
      *((float *)v7 + 5) = result;
      break;
    case 4612:
      *((_DWORD *)v7 + 2) = *(_DWORD *)a4;
      *((_DWORD *)v7 + 3) = *(_DWORD *)(a4 + 4);
      result = *(float *)(a4 + 8);
      *((float *)v7 + 4) = result;
      break;
    case 4613:
    case 4614:
    case 4615:
    case 4616:
    case 4617:
      result = *(float *)a4;
      *((_DWORD *)v7 + 2) = *(_DWORD *)a4;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t glLightfv_ListExec(float32x4_t *a1, uint64_t a2)
{
  glLightfv_Exec(a1, *(_DWORD *)a2, *(_DWORD *)(a2 + 4), (float *)(a2 + 8));
  return 24;
}

void glLightxv_Exec(float32x4_t *a1, int a2, int a3, int *a4)
{
  uint64_t v4;
  uint64_t v5;
  float v6[4];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v6[0] = (float)*a4 * 0.000015259;
  if ((a3 - 4608) >= 4)
  {
    if (a3 != 4612)
      goto LABEL_4;
    v4 = 2;
    v5 = 1;
  }
  else
  {
    v6[1] = (float)a4[1] * 0.000015259;
    v4 = 3;
    v5 = 2;
  }
  v6[v5] = (float)a4[v5] * 0.000015259;
  v6[v4] = (float)a4[v4] * 0.000015259;
LABEL_4:
  glLightfv_Exec(a1, a2, a3, v6);
}

float glLightxv_PackThread(uint64_t a1, int a2, int a3, int *a4)
{
  uint64_t v4;
  uint64_t v5;
  float v7[4];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v7[0] = (float)*a4 * 0.000015259;
  if ((a3 - 4608) >= 4)
  {
    if (a3 != 4612)
      return glLightfv_Comp(a1, a2, a3, (uint64_t)v7);
    v4 = 2;
    v5 = 1;
  }
  else
  {
    v7[1] = (float)a4[1] * 0.000015259;
    v4 = 3;
    v5 = 2;
  }
  v7[v5] = (float)a4[v5] * 0.000015259;
  v7[v4] = (float)a4[v4] * 0.000015259;
  return glLightfv_Comp(a1, a2, a3, (uint64_t)v7);
}

uint64_t glGetLightfv_ExecThread(uint64_t a1, int a2, int a3, _DWORD *a4)
{
  (*(void (**)(void))(a1 + 27752))();
  return glGetLightfv_Exec(a1, a2, a3, a4);
}

uint64_t glGetLightfv_Exec(uint64_t result, int a2, int a3, _DWORD *a4)
{
  unsigned int v4;
  _DWORD *v5;
  int v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  int v11;

  v4 = a2 - 0x4000;
  if ((a2 - 0x4000) < 8)
  {
    switch(a3)
    {
      case 4608:
        v5 = (_DWORD *)(result + 160 * v4);
        *a4 = v5[3136];
        a4[1] = v5[3137];
        a4[2] = v5[3138];
        v6 = v5[3139];
        goto LABEL_10;
      case 4609:
        v7 = (_DWORD *)(result + 160 * v4);
        *a4 = v7[3140];
        a4[1] = v7[3141];
        a4[2] = v7[3142];
        v6 = v7[3143];
        goto LABEL_10;
      case 4610:
        v8 = (_DWORD *)(result + 160 * v4);
        *a4 = v8[3144];
        a4[1] = v8[3145];
        a4[2] = v8[3146];
        v6 = v8[3147];
        goto LABEL_10;
      case 4611:
        v9 = (_DWORD *)(result + 160 * v4);
        *a4 = v9[3148];
        a4[1] = v9[3149];
        a4[2] = v9[3150];
        v6 = v9[3151];
LABEL_10:
        a4[3] = v6;
        return result;
      case 4612:
        v10 = (_DWORD *)(result + 160 * v4);
        *a4 = v10[3152];
        a4[1] = v10[3153];
        a4[2] = v10[3154];
        return result;
      case 4613:
        v11 = *(_DWORD *)(result + 160 * v4 + 12636);
        goto LABEL_17;
      case 4614:
        v11 = *(_DWORD *)(result + 160 * v4 + 12688);
        goto LABEL_17;
      case 4615:
        v11 = *(_DWORD *)(result + 160 * v4 + 12624);
        goto LABEL_17;
      case 4616:
        v11 = *(_DWORD *)(result + 160 * v4 + 12628);
        goto LABEL_17;
      case 4617:
        v11 = *(_DWORD *)(result + 160 * v4 + 12632);
LABEL_17:
        *a4 = v11;
        break;
      default:
        goto LABEL_2;
    }
  }
  else
  {
LABEL_2:
    if (!*(_WORD *)(result + 29832))
      *(_WORD *)(result + 29832) = 1280;
  }
  return result;
}

uint64_t glGetLightxv_Exec(uint64_t a1, int a2, int a3, _DWORD *a4)
{
  uint64_t result;
  float v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  float v12;
  float v13;
  float v14[4];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  result = glGetLightfv_Exec(a1, a2, a3, v14);
  v7 = (float)(v14[0] * 65536.0) + 0.5;
  if (v7 < 0.0)
    v7 = v7 + -0.99998;
  *a4 = (int)v7;
  if ((a3 - 4608) >= 4)
  {
    if (a3 != 4612)
      return result;
    v9 = 2;
    v10 = 1;
  }
  else
  {
    v8 = (float)(v14[1] * 65536.0) + 0.5;
    if (v8 < 0.0)
      v8 = v8 + -0.99998;
    a4[1] = (int)v8;
    v9 = 3;
    v10 = 2;
  }
  v11 = (float)(v14[v10] * 65536.0) + 0.5;
  if (v11 < 0.0)
    v11 = v11 + -0.99998;
  a4[v10] = (int)v11;
  v12 = (float)(v14[v9] * 65536.0) + 0.5;
  v13 = v12 + -0.99998;
  if (v12 >= 0.0)
    v13 = (float)(v14[v9] * 65536.0) + 0.5;
  a4[v9] = (int)v13;
  return result;
}

uint64_t glGetLightxv_ExecThread(uint64_t a1, int a2, int a3, _DWORD *a4)
{
  (*(void (**)(void))(a1 + 27752))();
  return glGetLightxv_Exec(a1, a2, a3, a4);
}

float *glLightModelf_Comp(uint64_t a1, int a2, float a3)
{
  float *result;

  result = (float *)gleAddCommand(a1, (uint64_t)glLightModelf_ListExec, 8);
  *(_DWORD *)result = a2;
  result[1] = a3;
  return result;
}

uint64_t glLightModelf_ListExec(uint64_t a1, uint64_t a2)
{
  glLightModelf_Exec(a1, *(_DWORD *)a2, *(float *)(a2 + 4));
  return 8;
}

uint64_t glLightModelf_Exec(uint64_t a1, int a2, float a3)
{
  _DWORD *v3;
  int v4;
  int v5;
  int v6;
  int v7;

  if (a2 == 34224)
  {
    v7 = a3 != 0.0;
    if (*(unsigned __int8 *)(a1 + 14894) != v7)
    {
      *(_BYTE *)(a1 + 14894) = v7;
      return gleUpdateLightModel(a1);
    }
  }
  else
  {
    v3 = (_DWORD *)(a1 + 28652);
    if (a2 == 2898)
    {
      v4 = a3 != 0.0;
      if (*(unsigned __int8 *)(a1 + 14892) != v4)
      {
        *(_BYTE *)(a1 + 14892) = v4;
        if ((*(_BYTE *)(a1 + 24864) & 9) != 0 || *(_BYTE *)(a1 + 24756))
          v5 = *(unsigned __int8 *)(a1 + 24751);
        else
          v5 = a3 != 0.0 && *(_BYTE *)(a1 + 14890) != 0;
        if (v5 == *(unsigned __int8 *)(a1 + 17701))
        {
          v6 = *(_DWORD *)(a1 + 1548);
        }
        else
        {
          *(_BYTE *)(a1 + 17701) = v5;
          *(_DWORD *)(a1 + 1532) |= 0x40000000u;
          *v3 = 0;
          v6 = *(_DWORD *)(a1 + 1548) | 0x10008400;
          *(_DWORD *)(a1 + 1548) = v6;
          if ((*(_BYTE *)(*(_QWORD *)(a1 + 29032) + 25) & 0x7F) != 0)
            v6 |= 0x30000u;
        }
        *v3 = 0;
        *(_DWORD *)(a1 + 1548) = v6 | 0x18402;
      }
    }
    else if (!*(_WORD *)(a1 + 29832))
    {
      *(_WORD *)(a1 + 29832) = 1280;
    }
  }
  return a1;
}

uint64_t glLightModelx_Exec(uint64_t a1, int a2, int a3)
{
  return glLightModelf_Exec(a1, a2, (float)a3 * 0.000015259);
}

float *glLightModelx_PackThread(uint64_t a1, int a2, int a3)
{
  float v4;
  float *result;

  v4 = (float)a3 * 0.000015259;
  result = (float *)gleAddCommand(a1, (uint64_t)glLightModelf_ListExec, 8);
  *(_DWORD *)result = a2;
  result[1] = v4;
  return result;
}

float glLightModelfv_Comp(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD *v5;
  float result;

  v5 = gleAddCommand(a1, (uint64_t)glLightModelfv_ListExec, 20);
  *(_DWORD *)v5 = a2;
  if (a2 <= 33271)
  {
    if ((a2 - 2897) >= 2)
    {
      if (a2 == 2899)
      {
        *((_DWORD *)v5 + 1) = *(_DWORD *)a3;
        *((_DWORD *)v5 + 2) = *(_DWORD *)(a3 + 4);
        *((_DWORD *)v5 + 3) = *(_DWORD *)(a3 + 8);
        result = *(float *)(a3 + 12);
        *((float *)v5 + 4) = result;
      }
      return result;
    }
LABEL_7:
    result = *(float *)a3;
    *((_DWORD *)v5 + 1) = *(_DWORD *)a3;
    return result;
  }
  if (a2 == 33272 || a2 == 34224)
    goto LABEL_7;
  return result;
}

uint64_t glLightModelfv_ListExec(uint64_t a1, int *a2)
{
  glLightModelfv_Exec(a1, *a2, a2 + 1);
  return 20;
}

uint64_t glLightModelxv_Exec(uint64_t a1, int a2, uint64_t a3)
{
  float v4;
  float32x2_t v5;
  float v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v4 = (float)*(int *)a3 * 0.000015259;
  if (a2 == 2899)
  {
    v5 = vmul_f32(vcvt_f32_s32(*(int32x2_t *)(a3 + 4)), (float32x2_t)vdup_n_s32(0x37800000u));
    v6 = (float)*(int *)(a3 + 12) * 0.000015259;
  }
  return glLightModelfv_Exec(a1, a2, &v4);
}

float glLightModelxv_PackThread(uint64_t a1, int a2, uint64_t a3)
{
  float v4;
  float32x2_t v5;
  float v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v4 = (float)*(int *)a3 * 0.000015259;
  if (a2 == 2899)
  {
    v5 = vmul_f32(vcvt_f32_s32(*(int32x2_t *)(a3 + 4)), (float32x2_t)vdup_n_s32(0x37800000u));
    v6 = (float)*(int *)(a3 + 12) * 0.000015259;
  }
  return glLightModelfv_Comp(a1, a2, (uint64_t)&v4);
}

float *glLineWidth_Comp(uint64_t a1, float a2)
{
  float *result;

  result = (float *)gleAddCommand(a1, (uint64_t)glLineWidth_ListExec, 4);
  *result = a2;
  return result;
}

uint64_t glLineWidth_ListExec(uint64_t a1, float *a2)
{
  float v2;

  v2 = *a2;
  if (*a2 <= 0.0)
  {
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1281;
  }
  else if (*(float *)(a1 + 15304) != v2)
  {
    *(float *)(a1 + 15304) = v2;
    *(_DWORD *)(a1 + 28652) = 0;
    *(_DWORD *)(a1 + 1520) |= 0x4000u;
  }
  return 4;
}

uint64_t glLineWidthx_Exec(uint64_t result, int a2)
{
  float v2;

  v2 = (float)a2 * 0.000015259;
  if (v2 <= 0.0)
  {
    if (!*(_WORD *)(result + 29832))
      *(_WORD *)(result + 29832) = 1281;
  }
  else if (*(float *)(result + 15304) != v2)
  {
    *(float *)(result + 15304) = v2;
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1520) |= 0x4000u;
  }
  return result;
}

float *glLineWidthx_PackThread(uint64_t a1, int a2)
{
  float v2;
  float *result;

  v2 = (float)a2 * 0.000015259;
  result = (float *)gleAddCommand(a1, (uint64_t)glLineWidth_ListExec, 4);
  *result = v2;
  return result;
}

_QWORD *glLogicOp_Comp(uint64_t a1, int a2)
{
  _QWORD *result;

  result = gleAddCommand(a1, (uint64_t)glLogicOp_ListExec, 4);
  *(_DWORD *)result = a2;
  return result;
}

uint64_t glLogicOp_ListExec(uint64_t a1, _DWORD *a2)
{
  if (*a2 >> 4 == 336)
  {
    *(_WORD *)(a1 + 15316) = *a2;
    *(_DWORD *)(a1 + 1520) |= 0x20000u;
    *(_DWORD *)(a1 + 28652) = 0;
    *(_DWORD *)(a1 + 1548) |= 0x40000u;
  }
  else if (!*(_WORD *)(a1 + 29832))
  {
    *(_WORD *)(a1 + 29832) = 1280;
  }
  return 4;
}

uint64_t glLogicOp_Exec(uint64_t result, unsigned int a2)
{
  if (a2 >> 4 == 336)
  {
    *(_WORD *)(result + 15316) = a2;
    *(_DWORD *)(result + 1520) |= 0x20000u;
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1548) |= 0x40000u;
  }
  else if (!*(_WORD *)(result + 29832))
  {
    *(_WORD *)(result + 29832) = 1280;
  }
  return result;
}

_BYTE *glColorMask_Comp(uint64_t a1, char a2, char a3, char a4, char a5)
{
  _BYTE *result;

  result = gleAddCommand(a1, (uint64_t)glColorMask_ListExec, 4);
  *result = a2;
  result[1] = a3;
  result[2] = a4;
  result[3] = a5;
  return result;
}

uint64_t glColorMask_ListExec(uint64_t a1, unsigned __int8 *a2)
{
  glColorMask_Exec(a1, *a2, a2[1], a2[2], a2[3]);
  return 4;
}

_QWORD *glDepthMask_Comp(uint64_t a1, char a2)
{
  _QWORD *result;

  result = gleAddCommand(a1, (uint64_t)glDepthMask_ListExec, 4);
  *(_BYTE *)result = a2;
  return result;
}

uint64_t glDepthMask_ListExec(uint64_t a1, unsigned __int8 *a2)
{
  glDepthMask_Exec(a1, *a2);
  return 4;
}

_QWORD *glStencilMask_Comp(uint64_t a1, int a2)
{
  _QWORD *result;

  result = gleAddCommand(a1, (uint64_t)glStencilMask_ListExec, 4);
  *(_DWORD *)result = a2;
  return result;
}

uint64_t glStencilMask_ListExec(uint64_t a1, int *a2)
{
  glStencilMask_Exec(a1, *a2);
  return 4;
}

_DWORD *glStencilMaskSeparate_Comp(uint64_t a1, int a2, int a3)
{
  _DWORD *result;

  result = gleAddCommand(a1, (uint64_t)glStencilMaskSeparate_ListExec, 8);
  *result = a2;
  result[1] = a3;
  return result;
}

uint64_t glStencilMaskSeparate_ListExec(uint64_t a1, int *a2)
{
  glStencilMaskSeparate_Exec(a1, *a2, a2[1]);
  return 8;
}

uint64_t glStencilMaskSeparate_Exec(uint64_t result, int a2, int a3)
{
  _DWORD *v3;
  int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  _DWORD *v10;

  v3 = (_DWORD *)(result + 28652);
  switch(a2)
  {
    case 1028:
      if (*(_DWORD *)(result + 15324) == a3)
        return result;
      *(_DWORD *)(result + 15324) = a3;
      goto LABEL_7;
    case 1029:
      if (*(_DWORD *)(result + 15332) == a3)
        return result;
      *(_DWORD *)(result + 15332) = a3;
LABEL_7:
      v4 = *(_DWORD *)(result + 15644);
      if (v4 == 1)
      {
        v5 = 65;
LABEL_14:
        *(_DWORD *)(result + 15644) = v5;
        *v3 = 0;
        *(_DWORD *)(result + 1548) |= 0x8000u;
LABEL_18:
        if ((v5 & 4) != 0)
          v7 = 1;
        else
          v7 = 2;
        v8 = *(_DWORD *)(result + 29804) & 0xFFFFF9FF;
        *(_DWORD *)(result + 29804) = v8;
        if (*(_DWORD *)(result + 15324))
        {
          v8 |= 0x200u;
          *(_DWORD *)(result + 29804) = v8;
        }
        if (*(_DWORD *)(result + 4 * v7 + 15324))
        {
          v8 |= 0x400u;
          *(_DWORD *)(result + 29804) = v8;
        }
        v9 = *(_QWORD *)(result + 28960);
        if (v9)
          v10 = (_DWORD *)(v9 + 552);
        else
          v10 = (_DWORD *)(result + 29808);
        *(_WORD *)(result + 15342) = *v10 & v8;
        *(_DWORD *)(result + 29800) |= 0x100000u;
        *v3 = 0;
        *(_DWORD *)(result + 1548) |= 0x40000u;
        return result;
      }
      v5 = v4 | 0x40;
      goto LABEL_17;
    case 1032:
      if (*(_DWORD *)(result + 15324) == a3 && *(_DWORD *)(result + 15332) == a3)
        return result;
      *(_DWORD *)(result + 15324) = a3;
      *(_DWORD *)(result + 15332) = a3;
      v6 = *(_DWORD *)(result + 15644);
      if (v6 == 65)
      {
        v5 = 1;
        goto LABEL_14;
      }
      v5 = v6 & 0xFFFFFFBF;
LABEL_17:
      *(_DWORD *)(result + 15644) = v5;
      goto LABEL_18;
  }
  if (!*(_WORD *)(result + 29832))
    *(_WORD *)(result + 29832) = 1280;
  return result;
}

_QWORD *glMaterialf_Comp(uint64_t a1, int a2, int a3, float a4)
{
  _QWORD *result;

  result = gleAddCommand(a1, (uint64_t)glMaterialf_ListExec, 12);
  *(_DWORD *)result = a2;
  *((_DWORD *)result + 1) = a3;
  *((float *)result + 2) = a4;
  return result;
}

uint64_t glMaterialf_ListExec(uint64_t a1, uint64_t a2)
{
  glMaterialf_Exec(a1, *(float *)(a2 + 8), *(_DWORD *)a2, *(_DWORD *)(a2 + 4));
  return 12;
}

uint64_t glMaterialx_Exec(uint64_t a1, int a2, int a3, int a4)
{
  return glMaterialf_Exec(a1, (float)a4 * 0.000015259, a2, a3);
}

_QWORD *glMaterialx_PackThread(uint64_t a1, int a2, int a3, int a4)
{
  float v6;
  _QWORD *result;

  v6 = (float)a4 * 0.000015259;
  result = gleAddCommand(a1, (uint64_t)glMaterialf_ListExec, 12);
  *(_DWORD *)result = a2;
  *((_DWORD *)result + 1) = a3;
  *((float *)result + 2) = v6;
  return result;
}

float glMaterialfv_Comp(uint64_t a1, int a2, int a3, uint64_t a4)
{
  _QWORD *v8;
  float result;
  int v10;

  v8 = gleAddCommand(a1, (uint64_t)glMaterialfv_ListExec, 24);
  if (v8)
  {
    if (a3 <= 5631)
    {
      v10 = 4608;
      if (a3 == 4608 || (v10 = 4609, a3 == 4609) || (v10 = 4610, a3 == 4610))
      {
LABEL_11:
        *(_DWORD *)v8 = a2;
        *((_DWORD *)v8 + 1) = v10;
        *((_DWORD *)v8 + 2) = *(_DWORD *)a4;
        *((_DWORD *)v8 + 3) = *(_DWORD *)(a4 + 4);
        *((_DWORD *)v8 + 4) = *(_DWORD *)(a4 + 8);
        result = *(float *)(a4 + 12);
        *((float *)v8 + 5) = result;
      }
      else
      {
LABEL_8:
        gleSetErrorInList(a1, 1280);
      }
    }
    else
    {
      switch(a3)
      {
        case 5632:
          v10 = 5632;
          goto LABEL_11;
        case 5633:
          *(_DWORD *)v8 = a2;
          *((_DWORD *)v8 + 1) = 5633;
          result = *(float *)a4;
          *((_DWORD *)v8 + 2) = *(_DWORD *)a4;
          break;
        case 5634:
          v10 = 5634;
          goto LABEL_11;
        case 5635:
          *(_DWORD *)v8 = a2;
          *((_DWORD *)v8 + 1) = 5635;
          *((_DWORD *)v8 + 2) = *(_DWORD *)a4;
          *((_DWORD *)v8 + 3) = *(_DWORD *)(a4 + 4);
          result = *(float *)(a4 + 8);
          *((float *)v8 + 4) = result;
          break;
        default:
          goto LABEL_8;
      }
    }
  }
  return result;
}

uint64_t glMaterialfv_ListExec(float *a1, uint64_t a2)
{
  glMaterialfv_Exec(a1, *(_DWORD *)a2, *(_DWORD *)(a2 + 4), (float *)(a2 + 8));
  return 24;
}

float *glMaterialxv_Exec(float *a1, int a2, int a3, int32x4_t *a4)
{
  float32x4_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  if (a3 <= 5631)
  {
    if ((a3 - 4608) >= 3)
      return glMaterialfv_Exec(a1, a2, a3, v5.f32);
    goto LABEL_8;
  }
  if (a3 == 5632 || a3 == 5634)
  {
LABEL_8:
    v5 = vmulq_f32(vcvtq_f32_s32(*a4), (float32x4_t)vdupq_n_s32(0x37800000u));
    return glMaterialfv_Exec(a1, a2, a3, v5.f32);
  }
  if (a3 == 5633)
    v5.f32[0] = (float)a4->i32[0] * 0.000015259;
  return glMaterialfv_Exec(a1, a2, a3, v5.f32);
}

float glMaterialxv_PackThread(uint64_t a1, int a2, int a3, int32x4_t *a4)
{
  float32x4_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  if (a3 <= 5631)
  {
    if ((a3 - 4608) >= 3)
      return glMaterialfv_Comp(a1, a2, a3, (uint64_t)&v5);
    goto LABEL_8;
  }
  if (a3 == 5632 || a3 == 5634)
  {
LABEL_8:
    v5 = vmulq_f32(vcvtq_f32_s32(*a4), (float32x4_t)vdupq_n_s32(0x37800000u));
    return glMaterialfv_Comp(a1, a2, a3, (uint64_t)&v5);
  }
  if (a3 == 5633)
    v5.f32[0] = (float)a4->i32[0] * 0.000015259;
  return glMaterialfv_Comp(a1, a2, a3, (uint64_t)&v5);
}

uint64_t glGetMaterialfv_ExecThread(uint64_t a1, int a2, int a3, _DWORD *a4)
{
  (*(void (**)(void))(a1 + 27752))();
  return glGetMaterialfv_Exec(a1, a2, a3, a4);
}

uint64_t glGetMaterialfv_Exec(uint64_t result, int a2, int a3, _DWORD *a4)
{
  uint64_t v7;
  _WORD *v8;
  uint64_t v9;
  _DWORD *v10;
  int v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;

  v7 = result;
  v8 = (_WORD *)(result + 29832);
  if (*(_BYTE *)(result + 14891))
    result = (*(uint64_t (**)(uint64_t, uint64_t))(result + 1456))(result, result + 8464);
  if (a2 == 1028)
  {
    v9 = 0;
  }
  else
  {
    if (a2 != 1029)
      goto LABEL_15;
    v9 = 1;
  }
  if (a3 > 4609)
  {
    switch(a3)
    {
      case 4610:
        v12 = *(_DWORD **)(v7 + 8 * v9 + 1424);
        *a4 = v12[8];
        a4[1] = v12[9];
        a4[2] = v12[10];
        v11 = v12[11];
        break;
      case 5632:
        v13 = *(_DWORD **)(v7 + 8 * v9 + 1424);
        *a4 = v13[12];
        a4[1] = v13[13];
        a4[2] = v13[14];
        v11 = v13[15];
        break;
      case 5633:
        *a4 = *(_DWORD *)(*(_QWORD *)(v7 + 8 * v9 + 1424) + 64);
        return result;
      default:
        goto LABEL_15;
    }
LABEL_20:
    a4[3] = v11;
    return result;
  }
  if (a3 == 4608)
  {
    v14 = *(_DWORD **)(v7 + 8 * v9 + 1424);
    *a4 = *v14;
    a4[1] = v14[1];
    a4[2] = v14[2];
    v11 = v14[3];
    goto LABEL_20;
  }
  if (a3 == 4609)
  {
    v10 = *(_DWORD **)(v7 + 8 * v9 + 1424);
    *a4 = v10[4];
    a4[1] = v10[5];
    a4[2] = v10[6];
    v11 = v10[7];
    goto LABEL_20;
  }
LABEL_15:
  if (!*v8)
    *v8 = 1280;
  return result;
}

uint64_t glGetMaterialxv_Exec(uint64_t a1, int a2, int a3, _DWORD *a4)
{
  uint64_t result;
  float v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  float v12;
  float v13;
  float v14[4];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  result = glGetMaterialfv_Exec(a1, a2, a3, v14);
  v7 = (float)(v14[0] * 65536.0) + 0.5;
  if (v7 < 0.0)
    v7 = v7 + -0.99998;
  *a4 = (int)v7;
  if ((a3 - 4608) < 3)
  {
LABEL_6:
    v8 = (float)(v14[1] * 65536.0) + 0.5;
    if (v8 < 0.0)
      v8 = v8 + -0.99998;
    a4[1] = (int)v8;
    v9 = 3;
    v10 = 2;
    goto LABEL_9;
  }
  if (a3 != 5635)
  {
    if (a3 != 5632)
      return result;
    goto LABEL_6;
  }
  v9 = 2;
  v10 = 1;
LABEL_9:
  v11 = (float)(v14[v10] * 65536.0) + 0.5;
  if (v11 < 0.0)
    v11 = v11 + -0.99998;
  a4[v10] = (int)v11;
  v12 = (float)(v14[v9] * 65536.0) + 0.5;
  v13 = v12 + -0.99998;
  if (v12 >= 0.0)
    v13 = (float)(v14[v9] * 65536.0) + 0.5;
  a4[v9] = (int)v13;
  return result;
}

uint64_t glGetMaterialxv_ExecThread(uint64_t a1, int a2, int a3, _DWORD *a4)
{
  (*(void (**)(void))(a1 + 27752))();
  return glGetMaterialxv_Exec(a1, a2, a3, a4);
}

_QWORD *glLoadIdentity_Comp(uint64_t a1)
{
  return gleAddCommand(a1, (uint64_t)glLoadIdentity_ListExec, 0);
}

uint64_t glLoadIdentity_ListExec(uint64_t a1)
{
  glLoadIdentity_Exec(a1);
  return 0;
}

float glLoadMatrixf_Comp(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t i;
  float result;

  v3 = gleAddCommand(a1, (uint64_t)glLoadMatrixf_ListExec, 64);
  for (i = 0; i != 64; i += 4)
  {
    result = *(float *)(a2 + i);
    *(float *)((char *)v3 + i) = result;
  }
  return result;
}

uint64_t glLoadMatrixf_ListExec(uint64_t a1, uint64_t a2)
{
  glLoadMatrixf_Exec(a1, a2);
  return 64;
}

int8x8_t glLoadMatrixx_Exec(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  float32x4_t v3;
  _BYTE v5[64];
  uint64_t v6;

  v2 = 0;
  v6 = *MEMORY[0x24BDAC8D0];
  v3 = (float32x4_t)vdupq_n_s32(0x37800000u);
  do
  {
    *(float32x4_t *)&v5[v2] = vmulq_f32(vcvtq_f32_s32(*(int32x4_t *)(a2 + v2)), v3);
    v2 += 16;
  }
  while (v2 != 64);
  return glLoadMatrixf_Exec(a1, (uint64_t)v5);
}

double glLoadMatrixx_PackThread(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  float32x4_t v3;
  _OWORD *v4;
  __int128 v5;
  double result;
  __int128 v7;
  _OWORD v8[2];
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v2 = 0;
  v11 = *MEMORY[0x24BDAC8D0];
  v3 = (float32x4_t)vdupq_n_s32(0x37800000u);
  do
  {
    v8[v2] = vmulq_f32(vcvtq_f32_s32(*(int32x4_t *)(a2 + v2 * 16)), v3);
    ++v2;
  }
  while (v2 != 4);
  v4 = gleAddCommand(a1, (uint64_t)glLoadMatrixf_ListExec, 64);
  v5 = v8[1];
  *v4 = v8[0];
  v4[1] = v5;
  result = *(double *)&v9;
  v7 = v10;
  v4[2] = v9;
  v4[3] = v7;
  return result;
}

uint64_t glPopMatrix_ListExec(uint64_t a1, double a2, double a3, double a4)
{
  glPopMatrix_Exec(a1, a2, a3, a4);
  return 0;
}

uint64_t glPushMatrix_ListExec(uint64_t a1)
{
  glPushMatrix_Exec(a1);
  return 0;
}

uint64_t glMatrixMode_ListExec(uint64_t a1, int *a2)
{
  glMatrixMode_Exec(a1, *a2);
  return 4;
}

uint64_t glCurrentPaletteMatrixOES_Exec(uint64_t result, unsigned int a2)
{
  if (a2 < 0x10)
  {
    *(_BYTE *)(result + 20495) = a2;
    if ((*(_DWORD *)(result + 20484) - 5) <= 0xA)
    {
      *(_DWORD *)(result + 20484) = a2 + 5;
      return gleUpdateMatrixMode(result);
    }
  }
  else if (!*(_WORD *)(result + 29832))
  {
    *(_WORD *)(result + 29832) = 1281;
  }
  return result;
}

uint64_t glLoadPaletteFromModelViewMatrixOES_Exec(uint64_t a1)
{
  _DWORD *v2;
  int8x8_t *v3;
  int v4;
  _OWORD *v5;

  v2 = (_DWORD *)(a1 + 20484);
  v3 = (int8x8_t *)(a1 + 1540);
  v4 = *(_DWORD *)(a1 + 20484);
  *(_DWORD *)(a1 + 20484) = *(unsigned __int8 *)(a1 + 20495) + 5;
  gleUpdateMatrixMode(a1);
  v5 = *(_OWORD **)(a1 + 19976);
  *v5 = *(_OWORD *)(a1 + 9616);
  v5[1] = *(_OWORD *)(a1 + 9632);
  v5[2] = *(_OWORD *)(a1 + 9648);
  v5[3] = *(_OWORD *)(a1 + 9664);
  LODWORD(v5) = v2[1];
  *(_DWORD *)(a1 + 1528) |= v5;
  v2[2042] = 0;
  *v3 = vorr_s8(*v3, (int8x8_t)vdup_n_s32(v5));
  *v2 = v4;
  return gleUpdateMatrixMode(a1);
}

_QWORD *glCurrentPaletteMatrixOES_PackThread(uint64_t a1, int a2)
{
  _QWORD *result;

  result = gleAddCommand(a1, (uint64_t)glCurrentPaletteMatrixOES_UnpackThread, 4);
  *(_DWORD *)result = a2;
  return result;
}

uint64_t glCurrentPaletteMatrixOES_UnpackThread(uint64_t a1, unsigned int *a2)
{
  glCurrentPaletteMatrixOES_Exec(a1, *a2);
  return 4;
}

_QWORD *glLoadPaletteFromModelViewMatrixOES_PackThread(uint64_t a1)
{
  return gleAddCommand(a1, (uint64_t)glLoadPaletteFromModelViewMatrixOES_UnpackThread, 0);
}

uint64_t glLoadPaletteFromModelViewMatrixOES_UnpackThread(uint64_t a1)
{
  glLoadPaletteFromModelViewMatrixOES_Exec(a1);
  return 0;
}

float glMultMatrixf_Comp(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t i;
  float result;

  v3 = gleAddCommand(a1, (uint64_t)glMultMatrixf_ListExec, 64);
  for (i = 0; i != 64; i += 4)
  {
    result = *(float *)(a2 + i);
    *(float *)((char *)v3 + i) = result;
  }
  return result;
}

uint64_t glMultMatrixf_ListExec(uint64_t a1, float32x2_t *a2)
{
  glMultMatrixf_Exec(a1, a2);
  return 64;
}

int8x8_t glMultMatrixx_Exec(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  float32x4_t v3;
  float32x2_t v5[9];

  v2 = 0;
  v5[8] = *(float32x2_t *)MEMORY[0x24BDAC8D0];
  v3 = (float32x4_t)vdupq_n_s32(0x37800000u);
  do
  {
    *(float32x4_t *)v5[v2].f32 = vmulq_f32(vcvtq_f32_s32(*(int32x4_t *)(a2 + v2 * 8)), v3);
    v2 += 2;
  }
  while (v2 != 8);
  return glMultMatrixf_Exec(a1, v5);
}

double glMultMatrixx_PackThread(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  float32x4_t v3;
  _OWORD *v4;
  __int128 v5;
  double result;
  __int128 v7;
  _OWORD v8[2];
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v2 = 0;
  v11 = *MEMORY[0x24BDAC8D0];
  v3 = (float32x4_t)vdupq_n_s32(0x37800000u);
  do
  {
    v8[v2] = vmulq_f32(vcvtq_f32_s32(*(int32x4_t *)(a2 + v2 * 16)), v3);
    ++v2;
  }
  while (v2 != 4);
  v4 = gleAddCommand(a1, (uint64_t)glMultMatrixf_ListExec, 64);
  v5 = v8[1];
  *v4 = v8[0];
  v4[1] = v5;
  result = *(double *)&v9;
  v7 = v10;
  v4[2] = v9;
  v4[3] = v7;
  return result;
}

uint64_t glNormal_ListExec(uint64_t a1, uint64_t a2)
{
  int v2;

  v2 = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8448) = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8456) = v2;
  return 12;
}

float32_t glNormal3x_Exec(float32x2_t *a1, unsigned int a2, unsigned int a3, int a4)
{
  float32_t result;

  result = (float)a4 * 0.000015259;
  a1[1056] = vmul_f32(vcvt_f32_s32((int32x2_t)__PAIR64__(a3, a2)), (float32x2_t)vdup_n_s32(0x37800000u));
  a1[1057].f32[0] = result;
  return result;
}

float32_t glNormal3x_PackThread(uint64_t a1, unsigned int a2, unsigned int a3, int a4)
{
  float32x2_t *v7;
  float32_t result;

  v7 = (float32x2_t *)gleAddCommand(a1, (uint64_t)glNormal_ListExec, 12);
  *v7 = vmul_f32(vcvt_f32_s32((int32x2_t)__PAIR64__(a3, a2)), (float32x2_t)vdup_n_s32(0x37800000u));
  result = (float)a4 * 0.000015259;
  v7[1].f32[0] = result;
  return result;
}

uint64_t glGenQueries_Exec(uint64_t result, unsigned int a2, _DWORD *a3)
{
  uint64_t v5;

  if ((a2 & 0x80000000) != 0)
  {
    if (!*(_WORD *)(result + 29832))
      *(_WORD *)(result + 29832) = 1281;
  }
  else
  {
    result = gleGenHashNames(result + 25904, a2);
    if ((_DWORD)result && a2)
    {
      v5 = a2;
      do
      {
        *a3++ = result;
        result = (result + 1);
        --v5;
      }
      while (v5);
    }
  }
  return result;
}

uint64_t glDeleteQueries_Exec(uint64_t result, int a2, unsigned int *a3)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  if (a2 < 0)
  {
    if (!*(_WORD *)(result + 29832))
      *(_WORD *)(result + 29832) = 1281;
  }
  else
  {
    v3 = a3;
    v4 = result;
    v5 = *(_QWORD *)(result + 25952);
    if (v5)
      v6 = a2 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v7 = (_QWORD *)(result + 33696);
      v8 = a2;
      v9 = a3;
      while (1)
      {
        v10 = *v9++;
        if (v10 == *(_DWORD *)(v5 + 16))
          break;
        if (!--v8)
          goto LABEL_13;
      }
      *(_BYTE *)(v5 + 254) = 0;
      *(_QWORD *)(result + 25952) = 0;
      v11 = *(unsigned __int8 *)(result + 32496);
      if (*(_BYTE *)(result + 32496))
      {
        do
        {
          *v7 = 0;
          v7 += 209;
          --v11;
        }
        while (v11);
      }
      *(_DWORD *)(result + 28652) = 0;
      *(_DWORD *)(result + 1524) |= 0x800000u;
    }
LABEL_13:
    if (a2 >= 1)
    {
      v12 = a2;
      do
      {
        v13 = *v3++;
        result = gleDeleteContextHashNameAndObject(v4, v4 + 25904, (uint64_t (*)(uint64_t, uint64_t))gleFreeQueryObject, v13);
        --v12;
      }
      while (v12);
    }
  }
  return result;
}

void glBeginQuery_Exec(uint64_t a1, int a2, unsigned int a3)
{
  _DWORD *v3;
  __int16 v5;
  int v7;
  char v8;
  uint64_t v9;
  char **v10;
  int v11;
  uint64_t *v12;
  char *QueryObject;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;

  v3 = (_DWORD *)(a1 + 25976);
  if (!a3)
  {
    if (*(_WORD *)(a1 + 29832))
      return;
    v20 = 1282;
    goto LABEL_44;
  }
  v5 = a2;
  if (a2 > 35974)
  {
    if (a2 == 35975)
    {
      v11 = 0;
      v10 = (char **)(a1 + 25960);
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1548) |= 0x8000u;
      v8 = 1;
      v9 = 2;
      v21 = a1 + 25976;
    }
    else
    {
      if (a2 != 35976)
      {
        v7 = 36202;
LABEL_9:
        if (a2 == v7)
          goto LABEL_10;
        if (*(_WORD *)(a1 + 29832))
          return;
        v20 = 1280;
LABEL_44:
        *(_WORD *)(a1 + 29832) = v20;
        return;
      }
      v11 = 0;
      v10 = (char **)(a1 + 25968);
      v21 = a1 + 25976;
      v3 = (_DWORD *)(a1 + 25980);
      v8 = 1;
      v9 = 6;
    }
  }
  else
  {
    if (a2 != 35007)
    {
      if (a2 == 35092)
      {
LABEL_10:
        v21 = a1 + 25976;
        v8 = 0;
        v3 = 0;
        v9 = 0;
        v10 = (char **)(a1 + 25936);
        v11 = 1;
        goto LABEL_14;
      }
      v7 = 35887;
      goto LABEL_9;
    }
    v21 = a1 + 25976;
    v3 = 0;
    v10 = (char **)(a1 + 25944);
    v11 = 1;
    v8 = 1;
    v9 = 1;
  }
LABEL_14:
  if (*v10)
  {
    if (!*(_WORD *)(v21 + 3856))
      *(_WORD *)(v21 + 3856) = 1282;
    return;
  }
  if (*(_QWORD *)(a1 + 27648))
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 27780));
  v12 = gleLookupHashObject(a1 + 25904, a3);
  if (!v12)
  {
    if (gleIsHashName(a1 + 25904, a3))
    {
      QueryObject = gleCreateQueryObject(a1, a3);
      gleAddHashNameAndObject(a1, a1 + 25904, (uint64_t)QueryObject);
      goto LABEL_23;
    }
LABEL_34:
    if (!*(_WORD *)(v21 + 3856))
      *(_WORD *)(v21 + 3856) = 1282;
    if (*(_QWORD *)(a1 + 27648))
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 27780));
    return;
  }
  QueryObject = (char *)v12;
  if (*((_BYTE *)v12 + 254) || *(uint64_t **)(a1 + 25984) == v12)
    goto LABEL_34;
  v12[29] = 0;
  v12[30] = 0;
  *((_BYTE *)v12 + 255) = -1;
LABEL_23:
  v15 = QueryObject + 40;
  v14 = *((_QWORD *)QueryObject + 5);
  ++*((_DWORD *)QueryObject + 5);
  QueryObject[254] = 1;
  *((_WORD *)QueryObject + 126) = v5;
  if (!v14)
    gleCreateQueryObjectGLDState(a1, (uint64_t)QueryObject);
  if (*(_QWORD *)(a1 + 27648))
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 27780));
  *v10 = QueryObject;
  v16 = *(unsigned __int8 *)(a1 + 32496);
  if (*(_BYTE *)(a1 + 32496))
  {
    v17 = (_QWORD *)(a1 + 8 * v9 + 33608);
    v18 = (uint64_t *)(QueryObject + 40);
    do
    {
      v19 = *v18++;
      *v17 = v19;
      v17 += 209;
      --v16;
    }
    while (v16);
  }
  if (v11)
  {
    if ((v8 & 1) == 0)
      *(_WORD *)(a1 + 17710) = v5;
    v22 = 0;
    (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t *))(*(_QWORD *)(a1 + 29496) + 768))(*(_QWORD *)(a1 + 29464), *(_QWORD *)&v15[8 * *(unsigned __int8 *)(a1 + 32500)], 0, &v22);
    *((_QWORD *)QueryObject + 29) = *(_QWORD *)(a1 + 29472);
    QueryObject[255] = *(_BYTE *)(a1 + 32500);
    *(_DWORD *)(v21 + 2676) = 0;
    goto LABEL_41;
  }
  if (*(_BYTE *)(a1 + 32481))
  {
    if (*(_BYTE *)(*(_QWORD *)(a1 + 29032) + 107))
    {
      v22 = 0;
      (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t *))(*(_QWORD *)(a1 + 29448) + 768))(*(_QWORD *)(a1 + 29016), *(_QWORD *)&v15[8 * *(unsigned __int8 *)(a1 + 32499)], 0, &v22);
      *((_QWORD *)QueryObject + 29) = *(_QWORD *)(a1 + 29024);
      QueryObject[255] = *(_BYTE *)(a1 + 32499);
      *(_DWORD *)(v21 + 2676) = 0;
LABEL_41:
      *(_DWORD *)(a1 + 1524) |= 0x800000u;
    }
  }
  else
  {
    *v3 = 0;
  }
}

void glBeginQuery_PackThread(uint64_t a1, int a2, unsigned int a3)
{
  int v6;
  uint64_t v7;
  __int16 *v8;
  __int16 v9;
  uint64_t *v10;
  char *QueryObject;
  uint64_t v12;
  int v13;
  unsigned int *v14;
  unsigned int v15;
  _DWORD *v16;

  if (a2 > 35974)
  {
    if (a2 == 35975)
    {
      v7 = 26560;
    }
    else
    {
      if (a2 != 35976)
      {
        v6 = 36202;
        goto LABEL_8;
      }
      v7 = 26568;
    }
  }
  else
  {
    if (a2 != 35007)
    {
      if (a2 == 35092)
      {
LABEL_9:
        v7 = 26536;
        goto LABEL_13;
      }
      v6 = 35887;
LABEL_8:
      if (a2 != v6)
      {
        v8 = (__int16 *)(a1 + 29832);
        if (*(_WORD *)(a1 + 29832))
          return;
        v9 = 1280;
        goto LABEL_22;
      }
      goto LABEL_9;
    }
    v7 = 26544;
  }
LABEL_13:
  if (*(_QWORD *)(a1 + v7))
  {
    v8 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832))
      return;
    v9 = 1282;
LABEL_22:
    *v8 = v9;
    return;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 27780));
  v10 = gleLookupHashObject(a1 + 25904, a3);
  if (!v10)
  {
    if (!gleIsHashName(a1 + 25904, a3))
      goto LABEL_29;
    QueryObject = gleCreateQueryObject(a1, a3);
    gleAddHashNameAndObject(a1, a1 + 25904, (uint64_t)QueryObject);
    v12 = *((_QWORD *)QueryObject + 1);
LABEL_25:
    *(_WORD *)(v12 + 18) = 1;
    *(_WORD *)(v12 + 16) = a2;
    *(_QWORD *)(v12 + 8) = 0;
    if (a2 > 35974)
    {
      if (a2 == 35975)
      {
        *(_QWORD *)(a1 + 26560) = v12;
      }
      else
      {
        if (a2 != 35976)
        {
          v13 = 36202;
          goto LABEL_35;
        }
        *(_QWORD *)(a1 + 26568) = v12;
      }
    }
    else
    {
      if (a2 != 35007)
      {
        if (a2 == 35092)
        {
LABEL_36:
          *(_QWORD *)(a1 + 26536) = v12;
          goto LABEL_40;
        }
        v13 = 35887;
LABEL_35:
        if (a2 != v13)
          goto LABEL_40;
        goto LABEL_36;
      }
      *(_QWORD *)(a1 + 26544) = v12;
    }
LABEL_40:
    v14 = (unsigned int *)(QueryObject + 256);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 27780));
    v16 = gleAddCommand(a1, (uint64_t)glBeginQueryIndexed_FullUnpackThread, 12);
    *v16 = a2;
    v16[1] = 0;
    v16[2] = a3;
    return;
  }
  QueryObject = (char *)v10;
  v12 = v10[1];
  if (!*(_BYTE *)(v12 + 18) && *(uint64_t **)(a1 + 25984) != v10)
    goto LABEL_25;
LABEL_29:
  if (!*(_WORD *)(a1 + 29832))
    *(_WORD *)(a1 + 29832) = 1282;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 27780));
}

void glEndQuery_Exec(uint64_t a1, int a2)
{
  int v3;
  char v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  __int16 v16;

  if (a2 > 35974)
  {
    if (a2 == 35975)
    {
      v8 = 0;
      v7 = (uint64_t *)(a1 + 25960);
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1548) |= 0x8000u;
      v4 = 1;
      v6 = 2;
      v5 = (_DWORD *)(a1 + 25976);
      goto LABEL_13;
    }
    if (a2 == 35976)
    {
      v8 = 0;
      v7 = (uint64_t *)(a1 + 25968);
      v5 = (_DWORD *)(a1 + 25980);
      v4 = 1;
      v6 = 6;
      goto LABEL_13;
    }
    v3 = 36202;
    goto LABEL_8;
  }
  if (a2 == 35007)
  {
    v5 = 0;
    v7 = (uint64_t *)(a1 + 25944);
    v8 = 1;
    v4 = 1;
    v6 = 1;
    goto LABEL_13;
  }
  if (a2 != 35092)
  {
    v3 = 35887;
LABEL_8:
    if (a2 != v3)
    {
      if (*(_WORD *)(a1 + 29832))
        return;
      v16 = 1280;
      goto LABEL_33;
    }
  }
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v7 = (uint64_t *)(a1 + 25936);
  v8 = 1;
LABEL_13:
  v9 = *v7;
  if (!*v7 || *(unsigned __int16 *)(v9 + 252) != a2)
  {
    if (*(_WORD *)(a1 + 29832))
      return;
    v16 = 1282;
LABEL_33:
    *(_WORD *)(a1 + 29832) = v16;
    return;
  }
  *v7 = 0;
  v10 = *(unsigned __int8 *)(a1 + 32496);
  if (*(_BYTE *)(a1 + 32496))
  {
    v11 = (_QWORD *)(a1 + 8 * v6 + 33608);
    do
    {
      *v11 = 0;
      v11 += 209;
      --v10;
    }
    while (v10);
  }
  *(_BYTE *)(v9 + 254) = 0;
  if (v8)
  {
    if ((v4 & 1) == 0)
      *(_WORD *)(a1 + 17710) = 0;
LABEL_23:
    *(_DWORD *)(a1 + 28652) = 0;
    *(_DWORD *)(a1 + 1524) |= 0x800000u;
    goto LABEL_25;
  }
  if (!*(_BYTE *)(a1 + 32481))
  {
    *(_QWORD *)(v9 + 240) = *v5;
    *v5 = 0;
    goto LABEL_25;
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 29032) + 107))
    goto LABEL_23;
LABEL_25:
  if (*(_BYTE *)(a1 + 32496))
  {
    v12 = 0;
    v13 = (_QWORD *)(a1 + 32512);
    do
    {
      v14 = v9 + 8 * v12;
      (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v13[206] + 1832))(*v13, *(_QWORD *)(v14 + 40), 0, 0);
      (*(void (**)(_QWORD, _QWORD))(v13[206] + 1736))(*v13, *(_QWORD *)(v14 + 136));
      ++v12;
      v13 += 209;
    }
    while (v12 < *(unsigned __int8 *)(a1 + 32496));
  }
  v15 = *(_DWORD *)(v9 + 20) - 1;
  *(_DWORD *)(v9 + 20) = v15;
  if (!v15)
    gleFreeQueryObject(a1, (_QWORD *)v9);
}

_QWORD *glEndQuery_PackThread(_QWORD *result, int a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  __int16 *v7;
  __int16 v8;

  if (a2 > 35974)
  {
    if (a2 == 35975)
    {
      v4 = 3320;
      goto LABEL_13;
    }
    if (a2 == 35976)
    {
      v4 = 3321;
      goto LABEL_13;
    }
    v3 = 36202;
    goto LABEL_8;
  }
  if (a2 == 35007)
  {
    v4 = 3318;
    goto LABEL_13;
  }
  if (a2 != 35092)
  {
    v3 = 35887;
LABEL_8:
    if (a2 != v3)
    {
      v7 = (__int16 *)(result + 3729);
      if (*((_WORD *)result + 14916))
        return result;
      v8 = 1280;
      goto LABEL_28;
    }
  }
  v4 = 3317;
LABEL_13:
  v5 = result[v4];
  if (!v5 || *(unsigned __int16 *)(v5 + 16) != a2)
  {
    v7 = (__int16 *)(result + 3729);
    if (*((_WORD *)result + 14916))
      return result;
    v8 = 1282;
LABEL_28:
    *v7 = v8;
    return result;
  }
  *(_BYTE *)(v5 + 18) = 0;
  if (a2 > 35974)
  {
    if (a2 == 35975)
    {
      result[3320] = 0;
      goto LABEL_32;
    }
    if (a2 == 35976)
    {
      result[3321] = 0;
      goto LABEL_32;
    }
    v6 = 36202;
  }
  else
  {
    if (a2 == 35007)
    {
      result[3318] = 0;
      goto LABEL_32;
    }
    if (a2 == 35092)
      goto LABEL_25;
    v6 = 35887;
  }
  if (a2 == v6)
LABEL_25:
    result[3317] = 0;
LABEL_32:
  result = gleAddCommand((uint64_t)result, (uint64_t)glEndQueryIndexed_FullUnpackThread, 8);
  *(_DWORD *)result = a2;
  *((_DWORD *)result + 1) = 0;
  return result;
}

BOOL glIsQuery_Exec(uint64_t a1, unsigned int a2)
{
  return gleLookupHashObject(a1 + 25904, a2) != 0;
}

uint64_t glGetQueryiv_Exec(uint64_t result, int a2, int a3, int *a4)
{
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;

  if (a2 <= 35974)
  {
    if (a2 == 35007 || a2 == 35092)
      goto LABEL_9;
    v4 = 35887;
  }
  else
  {
    if ((a2 - 35975) < 2 || a2 == 36202)
      goto LABEL_9;
    v4 = 36392;
  }
  if (a2 != v4)
    goto LABEL_34;
LABEL_9:
  if (a3 == 34917)
  {
    if (a2 <= 35974)
    {
      switch(a2)
      {
        case 35007:
          v6 = *(_QWORD *)(result + 25944);
          if (!v6)
            goto LABEL_54;
          goto LABEL_52;
        case 35092:
          v6 = *(_QWORD *)(result + 25936);
          if (!v6)
            goto LABEL_54;
          v8 = *(unsigned __int16 *)(v6 + 252);
          v9 = 35092;
          break;
        case 35887:
          v6 = *(_QWORD *)(result + 25936);
          if (!v6)
            goto LABEL_54;
          v8 = *(unsigned __int16 *)(v6 + 252);
          v9 = 35887;
          break;
        default:
          goto LABEL_54;
      }
    }
    else
    {
      if (a2 <= 36201)
      {
        if (a2 == 35975)
        {
          v6 = *(_QWORD *)(result + 25960);
          if (!v6)
            goto LABEL_54;
        }
        else
        {
          if (a2 != 35976)
            goto LABEL_54;
          v6 = *(_QWORD *)(result + 25968);
          if (!v6)
            goto LABEL_54;
        }
        goto LABEL_52;
      }
      if (a2 != 36202)
      {
        if (a2 != 36392)
          goto LABEL_54;
        v6 = *(_QWORD *)(result + 25952);
        if (!v6)
          goto LABEL_54;
        goto LABEL_52;
      }
      v6 = *(_QWORD *)(result + 25936);
      if (!v6)
        goto LABEL_54;
      v8 = *(unsigned __int16 *)(v6 + 252);
      v9 = 36202;
    }
    if (v8 != v9)
      goto LABEL_54;
LABEL_52:
    v5 = *(_DWORD *)(v6 + 16);
    goto LABEL_53;
  }
  if (a3 == 34916)
  {
    if (a2 <= 35974)
    {
      if (a2 == 35007)
      {
        v5 = 32;
        goto LABEL_53;
      }
      if (a2 == 35092)
      {
        v5 = *(_DWORD *)(*(_QWORD *)(result + 29032) + 132);
        goto LABEL_53;
      }
      v7 = 35887;
LABEL_32:
      if (a2 == v7)
      {
        v5 = *(_DWORD *)(*(_QWORD *)(result + 29032) + 132) != 0;
        goto LABEL_53;
      }
      goto LABEL_34;
    }
    if (a2 <= 36201)
    {
      if (a2 == 35975)
      {
        v5 = *(_DWORD *)(*(_QWORD *)(result + 29032) + 492);
        goto LABEL_53;
      }
      if (a2 == 35976)
      {
        v5 = *(_DWORD *)(*(_QWORD *)(result + 29032) + 496);
LABEL_53:
        *a4 = v5;
        return result;
      }
      goto LABEL_34;
    }
    if (a2 != 36392)
    {
      v7 = 36202;
      goto LABEL_32;
    }
LABEL_54:
    *a4 = 0;
    return result;
  }
LABEL_34:
  if (!*(_WORD *)(result + 29832))
    *(_WORD *)(result + 29832) = 1280;
  return result;
}

uint64_t glGetQueryObjectiv_Exec(uint64_t a1, unsigned int a2, int a3, _DWORD *a4)
{
  uint64_t result;
  int64_t v6;
  uint64_t v7[2];

  v7[1] = *MEMORY[0x24BDAC8D0];
  result = glGetQueryObject_Core(a1, a2, a3, v7);
  if ((_DWORD)result)
  {
    v6 = v7[0];
    if (v7[0] >= 0x7FFFFFFF)
      v6 = 0x7FFFFFFFLL;
    if (v6 <= (uint64_t)0xFFFFFFFF80000000)
      LODWORD(v6) = 0x80000000;
    *a4 = v6;
  }
  return result;
}

uint64_t glGetQueryObject_Core(uint64_t a1, unsigned int a2, int a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v20;

  v7 = a1 + 29832;
  v8 = gleLookupHashObject(a1 + 25904, a2);
  if (!v8 || (v9 = v8, *((_BYTE *)v8 + 254)))
  {
    if (*(_WORD *)v7)
      return 0;
    v13 = 0;
    v18 = 1282;
    goto LABEL_23;
  }
  v10 = v8[29];
  if (v10 && *(_BYTE *)(v7 + 2664))
  {
    v11 = 0;
    v12 = (_QWORD *)(a1 + 32520);
    while (*v12 != v10)
    {
      ++v11;
      v12 += 209;
      if (*(unsigned __int8 *)(v7 + 2664) == v11)
        goto LABEL_8;
    }
  }
  else
  {
LABEL_8:
    LODWORD(v11) = -1;
  }
  if (a3 == 34918)
  {
    if ((_DWORD)v11 != -1)
    {
      v20 = 0;
      v14 = a1 + 1672 * (int)v11;
      (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 + 34160) + 1336))(*(_QWORD *)(v14 + 32512), 0, 2, v8[(int)v11 + 17]);
      (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)(v14 + 34160) + 1832))(*(_QWORD *)(v14 + 32512), v9[(int)v11 + 5], 34918, &v20);
      v15 = v9[30] + v20;
      v9[29] = 0;
      v9[30] = v15;
    }
    v16 = *((unsigned __int16 *)v9 + 126);
    switch(v16)
    {
      case 35887:
        goto LABEL_18;
      case 36392:
        *a4 = 0;
        return 1;
      case 36202:
LABEL_18:
        v17 = v9[30] != 0;
        break;
      default:
        v17 = v9[30];
        break;
    }
    *a4 = v17;
    return 1;
  }
  if (a3 != 34919)
  {
    if (*(_WORD *)v7)
      return 0;
    v13 = 0;
    v18 = 1280;
LABEL_23:
    *(_WORD *)v7 = v18;
    return v13;
  }
  v13 = 1;
  if ((_DWORD)v11 == -1)
    *a4 = 1;
  else
    *a4 = (*(int (**)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 + 1672 * (int)v11 + 34160)
                                                                          + 1320))(*(_QWORD *)(a1 + 1672 * (int)v11 + 32512), 0, 0, 1, v8[(int)v11 + 17]);
  return v13;
}

uint64_t glGetQueryObjectuiv_Exec(uint64_t a1, unsigned int a2, int a3, _DWORD *a4)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7[2];

  v7[1] = *MEMORY[0x24BDAC8D0];
  result = glGetQueryObject_Core(a1, a2, a3, v7);
  if ((_DWORD)result)
  {
    v6 = v7[0];
    if (v7[0] >= 0xFFFFFFFFLL)
      v6 = 0xFFFFFFFFLL;
    *a4 = v6 & ~(v6 >> 63);
  }
  return result;
}

uint64_t glGenQueries_ExecThread(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  (*(void (**)(void))(a1 + 27752))();
  return glGenQueries_Exec(a1, a2, a3);
}

uint64_t glDeleteQueries_ExecThread(uint64_t a1, int a2, unsigned int *a3)
{
  (*(void (**)(void))(a1 + 27752))();
  return glDeleteQueries_Exec(a1, a2, a3);
}

BOOL glIsQuery_ExecThread(uint64_t a1, unsigned int a2)
{
  (*(void (**)(void))(a1 + 27752))();
  return gleLookupHashObject(a1 + 25904, a2) != 0;
}

uint64_t glGetQueryiv_ExecThread(uint64_t a1, int a2, int a3, int *a4)
{
  (*(void (**)(void))(a1 + 27752))();
  return glGetQueryiv_Exec(a1, a2, a3, a4);
}

uint64_t glGetQueryObjectiv_ExecThread(intptr_t a1, unsigned int a2, int a3, _DWORD *a4)
{
  uint64_t result;
  int64_t v6;
  uint64_t v7[2];

  v7[1] = *MEMORY[0x24BDAC8D0];
  result = glGetQueryObject_CoreExecThread(a1, a2, a3, v7);
  if ((_DWORD)result)
  {
    v6 = v7[0];
    if (v7[0] >= 0x7FFFFFFF)
      v6 = 0x7FFFFFFFLL;
    if (v6 <= (uint64_t)0xFFFFFFFF80000000)
      LODWORD(v6) = 0x80000000;
    *a4 = v6;
  }
  return result;
}

uint64_t glGetQueryObject_CoreExecThread(intptr_t a1, unsigned int a2, int a3, uint64_t *a4)
{
  uint64_t v8;
  os_unfair_lock_s *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  __int16 *v13;
  __int16 v14;
  uint64_t v16;
  _QWORD v17[2];
  unsigned int v18;
  int v19;
  uint64_t *v20;
  uint64_t *v21;

  v8 = a1 + 25904;
  v9 = (os_unfair_lock_s *)(a1 + 27780);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 27780));
  v10 = gleLookupHashObject(v8, a2);
  if (v10)
  {
    v11 = v10;
    v12 = v10[1];
    if (!*(_BYTE *)(v12 + 18))
    {
      if (*(_BYTE *)(v12 + 19))
      {
        if (a3 == 34919)
        {
          v16 = 1;
        }
        else
        {
          if (a3 != 34918)
          {
            v13 = (__int16 *)(a1 + 29832);
            if (*(_WORD *)(a1 + 29832))
              goto LABEL_6;
            v14 = 1280;
            goto LABEL_5;
          }
          v16 = *(_QWORD *)(v12 + 8);
        }
        *a4 = v16;
        os_unfair_lock_unlock(v9);
      }
      else if (a3 == 34919 && *((_DWORD *)v10 + 64))
      {
        *a4 = 0;
        os_unfair_lock_unlock(v9);
        (*(void (**)(intptr_t))(a1 + 27744))(a1);
      }
      else
      {
        os_unfair_lock_unlock(v9);
        v17[0] = glGetQueryObjectiv_CallbackThread;
        v17[1] = 24;
        v18 = a2;
        v19 = a3;
        v20 = a4;
        v21 = v11;
        gleProcessCallback(a1, (uint64_t)v17);
        if (a3 == 34918)
        {
          *(_QWORD *)(v12 + 8) = *a4;
          *(_BYTE *)(v12 + 19) = 1;
        }
      }
      return 1;
    }
  }
  v13 = (__int16 *)(a1 + 29832);
  if (!*(_WORD *)(a1 + 29832))
  {
    v14 = 1282;
LABEL_5:
    *v13 = v14;
  }
LABEL_6:
  os_unfair_lock_unlock(v9);
  return 0;
}

uint64_t glGetQueryObjectuiv_ExecThread(intptr_t a1, unsigned int a2, int a3, _DWORD *a4)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7[2];

  v7[1] = *MEMORY[0x24BDAC8D0];
  result = glGetQueryObject_CoreExecThread(a1, a2, a3, v7);
  if ((_DWORD)result)
  {
    v6 = v7[0];
    if (v7[0] >= 0xFFFFFFFFLL)
      v6 = 0xFFFFFFFFLL;
    *a4 = v6 & ~(v6 >> 63);
  }
  return result;
}

uint64_t glBeginQueryIndexed_FullUnpackThread(uint64_t a1, int *a2)
{
  uint64_t v2;
  unsigned int v3;
  int v5;
  int v6;
  uint64_t v7;
  char v8;
  _DWORD *v9;
  int v10;
  char **v11;
  int v12;
  uint64_t *v13;
  char *QueryObject;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  char v21;
  __int16 v22;
  int v24;
  uint64_t v25;

  v2 = a1 + 28652;
  v3 = a2[2];
  if (!v3)
    goto LABEL_48;
  v5 = *a2;
  if (*a2 > 35974)
  {
    v7 = a2[1];
    if (v5 == 35975)
    {
      v12 = 0;
      v11 = (char **)(a1 + 25904 + 8 * v7 + 56);
      v10 = v7 + 2;
      v9 = (_DWORD *)(a1 + 25904 + 4 * v7 + 72);
      *(_DWORD *)v2 = 0;
      *(_DWORD *)(a1 + 1548) |= 0x8000u;
    }
    else
    {
      if (v5 != 35976)
      {
        v6 = 36202;
        goto LABEL_9;
      }
      v12 = 0;
      v11 = (char **)(a1 + 25904 + 8 * v7 + 64);
      v10 = v7 + 6;
      v9 = (_DWORD *)(a1 + 25904 + 4 * v7 + 76);
    }
    v8 = 1;
  }
  else
  {
    if (v5 != 35007)
    {
      if (v5 == 35092)
      {
LABEL_10:
        v8 = 0;
        v9 = 0;
        v10 = 0;
        v11 = (char **)(a1 + 25936);
        v12 = 1;
        goto LABEL_15;
      }
      v6 = 35887;
LABEL_9:
      if (v5 != v6)
      {
        if (*(_WORD *)(a1 + 29832))
          return 12;
        v22 = 1280;
LABEL_45:
        *(_WORD *)(a1 + 29832) = v22;
        return 12;
      }
      goto LABEL_10;
    }
    v9 = 0;
    v11 = (char **)(a1 + 25944);
    v12 = 1;
    v8 = 1;
    v10 = 1;
  }
LABEL_15:
  if (*v11)
  {
LABEL_48:
    if (*(_WORD *)(a1 + 29832))
      return 12;
    v22 = 1282;
    goto LABEL_45;
  }
  v24 = v10;
  if (*(_QWORD *)(a1 + 27648))
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 27780));
  v13 = gleLookupHashObject(a1 + 25904, v3);
  if (!v13)
  {
    if (gleIsHashName(a1 + 25904, v3))
    {
      QueryObject = gleCreateQueryObject(a1, v3);
      gleAddHashNameAndObject(a1, a1 + 25904, (uint64_t)QueryObject);
      goto LABEL_24;
    }
LABEL_35:
    if (!*(_WORD *)(v2 + 1180))
      *(_WORD *)(v2 + 1180) = 1282;
    if (*(_QWORD *)(a1 + 27648))
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 27780));
    return 12;
  }
  QueryObject = (char *)v13;
  if (*((_BYTE *)v13 + 254) || *(uint64_t **)(a1 + 25984) == v13)
    goto LABEL_35;
  v13[29] = 0;
  v13[30] = 0;
  *((_BYTE *)v13 + 255) = -1;
LABEL_24:
  v16 = QueryObject + 40;
  v15 = *((_QWORD *)QueryObject + 5);
  ++*((_DWORD *)QueryObject + 5);
  QueryObject[254] = 1;
  *((_WORD *)QueryObject + 126) = v5;
  if (!v15)
    gleCreateQueryObjectGLDState(a1, (uint64_t)QueryObject);
  if (*(_QWORD *)(a1 + 27648))
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 27780));
  *v11 = QueryObject;
  v17 = *(unsigned __int8 *)(v2 + 3844);
  if (*(_BYTE *)(v2 + 3844))
  {
    v18 = (_QWORD *)(a1 + 8 * v24 + 33608);
    v19 = (uint64_t *)(QueryObject + 40);
    do
    {
      v20 = *v19++;
      *v18 = v20;
      v18 += 209;
      --v17;
    }
    while (v17);
  }
  if (v12)
  {
    if ((v8 & 1) == 0)
      *(_WORD *)(a1 + 17710) = v5;
    v25 = 0;
    (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t *))(*(_QWORD *)(a1 + 29496) + 768))(*(_QWORD *)(a1 + 29464), *(_QWORD *)&v16[8 * *(unsigned __int8 *)(v2 + 3848)], 0, &v25);
    *((_QWORD *)QueryObject + 29) = *(_QWORD *)(a1 + 29472);
    v21 = *(_BYTE *)(v2 + 3848);
    goto LABEL_42;
  }
  if (!*(_BYTE *)(v2 + 3829))
  {
    *v9 = 0;
    return 12;
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 29032) + 107))
  {
    v25 = 0;
    (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t *))(*(_QWORD *)(a1 + 29448) + 768))(*(_QWORD *)(a1 + 29016), *(_QWORD *)&v16[8 * *(unsigned __int8 *)(v2 + 3847)], 0, &v25);
    *((_QWORD *)QueryObject + 29) = *(_QWORD *)(a1 + 29024);
    v21 = *(_BYTE *)(v2 + 3847);
LABEL_42:
    QueryObject[255] = v21;
    *(_DWORD *)v2 = 0;
    *(_DWORD *)(a1 + 1524) |= 0x800000u;
  }
  return 12;
}

uint64_t glEndQueryIndexed_FullUnpackThread(uint64_t a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v7;
  __int16 v8;
  char v9;
  _DWORD *v10;
  int v11;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  unsigned int *v21;
  unsigned int v22;

  v3 = 0;
  v4 = a1 + 28652;
  v5 = *a2;
  if (*a2 <= 35974)
  {
    if (v5 == 35007)
    {
      v3 = *(_QWORD *)(a1 + 25944);
      goto LABEL_26;
    }
    if (v5 != 35092 && v5 != 35887)
      goto LABEL_9;
LABEL_8:
    v3 = *(_QWORD *)(a1 + 25936);
    goto LABEL_9;
  }
  switch(v5)
  {
    case 35975:
      v7 = a2[1];
      v3 = *(_QWORD *)(a1 + 8 * v7 + 25960);
LABEL_28:
      v13 = 0;
      v12 = (uint64_t *)(a1 + 25904 + 8 * v7 + 56);
      v11 = v7 + 2;
      v10 = (_DWORD *)(a1 + 25904 + 4 * v7 + 72);
      *(_DWORD *)v4 = 0;
      *(_DWORD *)(a1 + 1548) |= 0x8000u;
LABEL_31:
      v9 = 1;
      goto LABEL_32;
    case 35976:
      v7 = a2[1];
      v3 = *(_QWORD *)(a1 + 8 * v7 + 25968);
      goto LABEL_30;
    case 36202:
      goto LABEL_8;
  }
LABEL_9:
  if (v5 > 35974)
  {
    if (v5 == 36202)
    {
LABEL_24:
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v12 = (uint64_t *)(a1 + 25936);
      v13 = 1;
LABEL_32:
      v14 = *v12;
      if (!*v12 || v5 != *(unsigned __int16 *)(v14 + 252))
      {
        if (*(_WORD *)(a1 + 29832))
          goto LABEL_49;
        v8 = 1282;
        goto LABEL_23;
      }
      *v12 = 0;
      v15 = *(unsigned __int8 *)(a1 + 32496);
      if (*(_BYTE *)(a1 + 32496))
      {
        v16 = (_QWORD *)(a1 + 8 * v11 + 33608);
        do
        {
          *v16 = 0;
          v16 += 209;
          --v15;
        }
        while (v15);
      }
      *(_BYTE *)(v14 + 254) = 0;
      if (v13)
      {
        if ((v9 & 1) == 0)
          *(_WORD *)(a1 + 17710) = 0;
      }
      else
      {
        if (!*(_BYTE *)(a1 + 32481))
        {
          *(_QWORD *)(v14 + 240) = *v10;
          *v10 = 0;
          goto LABEL_44;
        }
        if (!*(_BYTE *)(*(_QWORD *)(a1 + 29032) + 107))
        {
LABEL_44:
          if (*(_BYTE *)(a1 + 32496))
          {
            v17 = 0;
            v18 = (_QWORD *)(a1 + 32512);
            do
            {
              v19 = v14 + 8 * v17;
              (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v18[206] + 1832))(*v18, *(_QWORD *)(v19 + 40), 0, 0);
              (*(void (**)(_QWORD, _QWORD))(v18[206] + 1736))(*v18, *(_QWORD *)(v19 + 136));
              ++v17;
              v18 += 209;
            }
            while (v17 < *(unsigned __int8 *)(v4 + 3844));
          }
          v20 = *(_DWORD *)(v14 + 20) - 1;
          *(_DWORD *)(v14 + 20) = v20;
          if (!v20)
            gleFreeQueryObject(a1, (_QWORD *)v14);
          goto LABEL_49;
        }
      }
      *(_DWORD *)v4 = 0;
      *(_DWORD *)(a1 + 1524) |= 0x800000u;
      goto LABEL_44;
    }
    v7 = a2[1];
    if (v5 != 35976)
    {
      if (v5 != 35975)
        goto LABEL_21;
      goto LABEL_28;
    }
LABEL_30:
    v13 = 0;
    v12 = (uint64_t *)(a1 + 25904 + 8 * v7 + 64);
    v11 = v7 + 6;
    v10 = (_DWORD *)(a1 + 25904 + 4 * v7 + 76);
    goto LABEL_31;
  }
  if (v5 == 35007)
  {
LABEL_26:
    v10 = 0;
    v12 = (uint64_t *)(a1 + 25944);
    v13 = 1;
    v9 = 1;
    v11 = 1;
    goto LABEL_32;
  }
  if (v5 == 35092 || v5 == 35887)
    goto LABEL_24;
LABEL_21:
  if (!*(_WORD *)(a1 + 29832))
  {
    v8 = 1280;
LABEL_23:
    *(_WORD *)(a1 + 29832) = v8;
  }
LABEL_49:
  v21 = (unsigned int *)(v3 + 256);
  do
    v22 = __ldxr(v21);
  while (__stxr(v22 - 1, v21));
  return 8;
}

uint64_t glGetQueryObjectiv_CallbackThread(uint64_t a1, uint64_t a2)
{
  if (*(__int16 *)(a1 + 28660) == -1 && !*(_DWORD *)(*(_QWORD *)(a2 + 16) + 256))
  {
    glGetQueryObject_Core(a1, *(_DWORD *)a2, *(_DWORD *)(a2 + 4), *(uint64_t **)(a2 + 8));
    gleFinishCallback(a1);
  }
  return 24;
}

float glOrtho_Comp(uint64_t a1, double a2, double a3, double a4, double a5, double a6, double a7)
{
  double v9;
  float v10;
  float v11;
  float v14;
  float v15;
  float v17;
  float v18;
  float result;
  float *v20;
  float v21;
  float v22;

  v9 = a3 - a2;
  v10 = v9;
  if (v10 < 0.0)
    v11 = -v10;
  else
    v11 = v9;
  if (v11 < 0.000005)
    goto LABEL_11;
  v14 = a5 - a4;
  v15 = -v14;
  if (v14 >= 0.0)
    v15 = a5 - a4;
  if (v15 < 0.000005)
    goto LABEL_11;
  v17 = a6 - a7;
  v18 = -v17;
  if (v17 >= 0.0)
    v18 = a6 - a7;
  if (v18 >= 0.000005)
  {
    v20 = (float *)gleAddCommand(a1, (uint64_t)glOrtho_ListExec, 24);
    *v20 = (float)(1.0 / v10) + (float)(1.0 / v10);
    v20[1] = (float)(1.0 / v14) + (float)(1.0 / v14);
    v21 = -((a2 + a3) * (float)(1.0 / v10));
    v20[2] = (float)(1.0 / v17) + (float)(1.0 / v17);
    v20[3] = v21;
    v22 = -((a4 + a5) * (float)(1.0 / v14));
    result = (a6 + a7) * (float)(1.0 / v17);
    v20[4] = v22;
    v20[5] = result;
  }
  else
  {
LABEL_11:
    gleSetErrorInList(a1, 1281);
  }
  return result;
}

uint64_t glOrtho_ListExec(uint64_t a1, float *a2)
{
  float32x4_t *v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;

  if (*(int *)(a1 + 20484) < 24)
  {
    v2 = *(float32x4_t **)(a1 + 19976);
    v3 = a2[2];
    v4 = a2[3];
    v5 = a2[4];
    v6 = a2[5];
    v7 = *v2;
    v8 = v2[1];
    v9 = vmulq_n_f32(v8, a2[1]);
    *v2 = vmulq_n_f32(*v2, *a2);
    v2[1] = v9;
    v10 = v2[2];
    v11 = vaddq_f32(v2[3], vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v8, v5), v7, v4), v10, v6));
    v2[2] = vmulq_n_f32(v10, v3);
    v2[3] = v11;
    LODWORD(v2) = *(_DWORD *)(a1 + 20488);
    *(_DWORD *)(a1 + 1528) |= v2;
    *(_DWORD *)(a1 + 28652) = 0;
    *(int8x8_t *)(a1 + 1540) = vorr_s8(*(int8x8_t *)(a1 + 1540), (int8x8_t)vdup_n_s32(v2));
  }
  else if (!*(_WORD *)(a1 + 29832))
  {
    *(_WORD *)(a1 + 29832) = 1282;
  }
  return 24;
}

int8x8_t glOrthof_Exec(uint64_t a1, float a2, float a3, float a4, float a5, float a6, float a7)
{
  return glOrtho_Exec(a1, COERCE_INT8X8_T(a2), a3, a4, a5, a6, a7);
}

int8x8_t glOrthox_Exec(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7)
{
  return glOrtho_Exec(a1, COERCE_INT8X8_T((float)((float)a2 * 0.000015259)), (float)((float)a3 * 0.000015259), (float)((float)a4 * 0.000015259), (float)((float)a5 * 0.000015259), (float)((float)a6 * 0.000015259), (float)((float)a7 * 0.000015259));
}

float glOrthof_PackThread(uint64_t a1, float a2, float a3, float a4, float a5, float a6, float a7)
{
  return glOrtho_Comp(a1, a2, a3, a4, a5, a6, a7);
}

float glOrthox_PackThread(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7)
{
  return glOrtho_Comp(a1, (float)((float)a2 * 0.000015259), (float)((float)a3 * 0.000015259), (float)((float)a4 * 0.000015259), (float)((float)a5 * 0.000015259), (float)((float)a6 * 0.000015259), (float)((float)a7 * 0.000015259));
}

_QWORD *glPixelStorei_PackThread(_QWORD *result, int a2, unsigned int a3)
{
  __int16 v5;

  switch(a2)
  {
    case 3312:
    case 3328:
    case 3329:
    case 3330:
    case 3331:
    case 3332:
    case 3333:
      goto LABEL_6;
    case 3313:
      if (a3)
        *((_BYTE *)result + 26661) = 1;
      else
        *((_BYTE *)result + 26661) = 0;
      goto LABEL_6;
    case 3314:
      if ((a3 & 0x80000000) != 0)
        goto LABEL_19;
      *((_DWORD *)result + 6657) = a3;
      goto LABEL_6;
    case 3315:
      if ((a3 & 0x80000000) != 0)
        goto LABEL_19;
      *((_DWORD *)result + 6661) = a3;
      goto LABEL_6;
    case 3316:
      if ((a3 & 0x80000000) != 0)
        goto LABEL_19;
      *((_DWORD *)result + 6662) = a3;
      goto LABEL_6;
    case 3317:
      if (a3 <= 8 && ((1 << a3) & 0x116) != 0)
      {
        *((_DWORD *)result + 6664) = a3;
LABEL_6:
        result = gleAddCommand((uint64_t)result, (uint64_t)glPixelStorei_UnpackThread, 8);
        *(_DWORD *)result = a2;
        *((_DWORD *)result + 1) = a3;
      }
      else
      {
LABEL_19:
        if (!*((_WORD *)result + 14916))
        {
          v5 = 1281;
LABEL_21:
          *((_WORD *)result + 14916) = v5;
        }
      }
      return result;
    case 3318:
    case 3319:
    case 3320:
    case 3321:
    case 3322:
    case 3323:
    case 3324:
    case 3325:
    case 3326:
    case 3327:
      goto LABEL_8;
    default:
      if ((a2 - 32875) < 4 || (a2 - 35349) < 4)
        goto LABEL_6;
LABEL_8:
      if (*((_WORD *)result + 14916))
        return result;
      v5 = 1280;
      goto LABEL_21;
  }
}

uint64_t glPixelStorei_UnpackThread(uint64_t a1, uint64_t a2)
{
  glPixelStorei_Exec(a1, *(_DWORD *)a2, *(_DWORD *)(a2 + 4));
  return 8;
}

uint64_t gleUpdatePointAttenuation(uint64_t a1)
{
  _BYTE *v1;
  float v2;
  int v3;
  _BYTE *v5;
  int v6;
  int v7;
  float v8;
  float *v9;
  float v10;
  float v11;
  float v12;
  uint64_t v13;
  float v14;
  float v15;

  v1 = (_BYTE *)(a1 + 15378);
  if (*(float *)(a1 + 15360) != *(float *)(a1 + 292)
    || (v2 = *(float *)(a1 + 288), *(float *)(a1 + 15364) != v2)
    || *(float *)(a1 + 15368) != v2)
  {
LABEL_4:
    v3 = 1;
    goto LABEL_5;
  }
  v8 = *(float *)(a1 + 15348);
  if (*(_BYTE *)(a1 + 15379))
  {
    v9 = *(float **)(a1 + 29032);
    v10 = v9[15];
    if (v10 > v9[17])
      v10 = v9[17];
    if (v8 > v10)
      goto LABEL_4;
    v11 = *(float *)(a1 + 15352);
  }
  else
  {
    v12 = *(float *)(a1 + 15344);
    if (v8 > v12)
    {
      v13 = *(_QWORD *)(a1 + 29032);
      v14 = *(float *)(v13 + 60);
      if (v14 > *(float *)(v13 + 68))
        v14 = *(float *)(v13 + 68);
      if (v8 > v14)
        goto LABEL_4;
    }
    v11 = *(float *)(a1 + 15352);
    if (v11 >= v12)
    {
      v3 = 0;
      goto LABEL_5;
    }
    v9 = *(float **)(a1 + 29032);
  }
  v15 = v9[16];
  if (v15 < v9[18])
    v15 = v9[18];
  v3 = v11 < v15;
LABEL_5:
  if (*v1 == v3)
    return 0;
  v5 = (_BYTE *)(a1 + 17700);
  *v1 = v3;
  if ((*(_BYTE *)(a1 + 24864) & 9) != 0 || *(_BYTE *)(a1 + 24756))
  {
    v6 = *(unsigned __int8 *)(a1 + 24750);
  }
  else if (*(_BYTE *)(a1 + 15379))
  {
    v6 = 1;
  }
  else
  {
    v6 = v3;
  }
  if (v6 == *v5)
  {
    v7 = *(_DWORD *)(a1 + 1548);
  }
  else
  {
    *v5 = v6;
    *(_DWORD *)(a1 + 1532) |= 0x40000000u;
    v7 = *(_DWORD *)(a1 + 1548) | 0x10000000;
  }
  *(_DWORD *)(a1 + 28652) = 0;
  *(_DWORD *)(a1 + 1548) = v7 | 0x18008;
  return 1;
}

uint64_t glPointParameterf_Exec(uint64_t result, int a2, float a3)
{
  uint64_t v3;
  __int16 *v4;
  unsigned __int16 *v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  __int16 v19;

  v3 = result;
  v4 = (__int16 *)(result + 29832);
  v5 = (unsigned __int16 *)(result + 15380);
  if (a2 <= 33063)
  {
    if (a2 == 33062)
    {
      if (a3 >= 0.0)
      {
        if (*(float *)(result + 15348) == a3)
          return result;
        *(float *)(result + 15348) = a3;
        result = gleUpdatePointAttenuation(result);
        v12 = *(_QWORD *)(v3 + 19248);
        if (v12)
        {
          v13 = *(unsigned __int16 *)(v12 + 3788);
          if (v13 <= 0x3FF)
          {
            *(_DWORD *)(v3 + ((v13 >> 3) & 0x1FFC) + 1552) |= 1 << v13;
            *((_DWORD *)v5 + 3318) = 0;
            *(_DWORD *)(v3 + 1532) |= 0x800000u;
          }
        }
        v14 = *(_QWORD *)(v3 + 19272);
        if (!v14)
          goto LABEL_34;
        v15 = *(unsigned __int16 *)(v14 + 3788);
        if (v15 > 0x3FF)
          goto LABEL_34;
        *(_DWORD *)(v3 + ((v15 >> 3) & 0x1FFC) + 1936) |= 1 << v15;
        goto LABEL_33;
      }
    }
    else
    {
      if (a2 != 33063)
        goto LABEL_43;
      if (a3 >= 0.0)
      {
        if (*(float *)(result + 15352) == a3)
          return result;
        *(float *)(result + 15352) = a3;
        *(_BYTE *)(result + 32504) = 1;
        result = gleUpdatePointAttenuation(result);
LABEL_16:
        v7 = *(_QWORD *)(v3 + 19248);
        if (v7)
        {
          v8 = *(unsigned __int16 *)(v7 + 3788);
          if (v8 <= 0x3FF)
          {
            *(_DWORD *)(v3 + ((v8 >> 3) & 0x1FFC) + 1552) |= 1 << v8;
            *(_DWORD *)(v3 + 1532) |= 0x800000u;
          }
        }
        v9 = *(_QWORD *)(v3 + 19272);
        if (!v9)
          goto LABEL_34;
        v10 = *(unsigned __int16 *)(v9 + 3788);
        if (v10 > 0x3FF)
          goto LABEL_34;
        *(_DWORD *)(v3 + ((v10 >> 3) & 0x1FFC) + 1936) |= 1 << v10;
        *((_DWORD *)v5 + 3318) = 0;
LABEL_33:
        *(_DWORD *)(v3 + 1532) |= 0x4000000u;
LABEL_34:
        v16 = *(_QWORD *)(v3 + 19280);
        if (v16)
        {
          v17 = *(unsigned __int16 *)(v16 + 3788);
          if (v17 <= 0x3FF)
          {
            *(_DWORD *)(v3 + ((v17 >> 3) & 0x1FFC) + 2064) |= 1 << v17;
            *(_DWORD *)(v3 + 1532) |= 0x8000000u;
          }
        }
LABEL_37:
        *((_DWORD *)v5 + 3318) = 0;
        *(_DWORD *)(v3 + 1520) |= 0x400000u;
        return result;
      }
    }
  }
  else
  {
    if (a2 != 33064)
    {
      if (a2 == 34915)
      {
        v11 = a3;
        if (!a3 || (v11 != 0x2000 ? (v18 = v11 == 8194) : (v18 = 1), v18))
        {
          if (*(unsigned __int16 *)(result + 15382) == v11)
            return result;
          *(_WORD *)(result + 15382) = v11;
          goto LABEL_37;
        }
      }
      else if (a2 == 36000)
      {
        v6 = a3;
        if (a3 - 36001 < 2)
        {
          if (*v5 == v6)
            return result;
          *v5 = v6;
          goto LABEL_37;
        }
      }
LABEL_43:
      if (!*v4)
      {
        v19 = 1280;
LABEL_45:
        *v4 = v19;
        return result;
      }
      return result;
    }
    if (a3 >= 0.0)
    {
      if (*(float *)(result + 15356) == a3)
        return result;
      *(float *)(result + 15356) = a3;
      goto LABEL_16;
    }
  }
  if (!*v4)
  {
    v19 = 1281;
    goto LABEL_45;
  }
  return result;
}

uint64_t glPointParameterx_Exec(uint64_t a1, int a2, int a3)
{
  return glPointParameterf_Exec(a1, a2, (float)a3 * 0.000015259);
}

float *glPointParameterx_PackThread(uint64_t a1, int a2, int a3)
{
  float v4;
  float *result;

  v4 = (float)a3 * 0.000015259;
  result = (float *)gleAddCommand(a1, (uint64_t)glPointParameterf_ListExec, 8);
  *(_DWORD *)result = a2;
  result[1] = v4;
  return result;
}

float *glPointParameterf_Comp(uint64_t a1, int a2, float a3)
{
  float *result;

  result = (float *)gleAddCommand(a1, (uint64_t)glPointParameterf_ListExec, 8);
  *(_DWORD *)result = a2;
  result[1] = a3;
  return result;
}

uint64_t glPointParameterf_ListExec(uint64_t a1, uint64_t a2)
{
  glPointParameterf_Exec(a1, *(_DWORD *)a2, *(float *)(a2 + 4));
  return 8;
}

uint64_t glPointParameterfv_Exec(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3;
  __int16 *v4;
  unsigned __int16 *v5;
  float v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  float v12;
  float v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  __int16 v26;
  BOOL v27;

  v3 = result;
  v4 = (__int16 *)(result + 29832);
  v5 = (unsigned __int16 *)(result + 15380);
  switch(a2)
  {
    case 33062:
      v6 = *(float *)a3;
      if (*(float *)a3 < 0.0)
        goto LABEL_45;
      if (*(float *)(result + 15348) != v6)
      {
        *(float *)(result + 15348) = v6;
        result = gleUpdatePointAttenuation(result);
        v7 = *(_QWORD *)(v3 + 19248);
        if (v7)
        {
          v8 = *(unsigned __int16 *)(v7 + 3788);
          if (v8 <= 0x3FF)
          {
            *(_DWORD *)(v3 + ((v8 >> 3) & 0x1FFC) + 1552) |= 1 << v8;
            *((_DWORD *)v5 + 3318) = 0;
            *(_DWORD *)(v3 + 1532) |= 0x800000u;
          }
        }
        v9 = *(_QWORD *)(v3 + 19272);
        if (v9)
        {
          v10 = *(unsigned __int16 *)(v9 + 3788);
          if (v10 <= 0x3FF)
          {
            *(_DWORD *)(v3 + ((v10 >> 3) & 0x1FFC) + 1936) |= 1 << v10;
            goto LABEL_27;
          }
        }
        goto LABEL_28;
      }
      return result;
    case 33063:
      v12 = *(float *)a3;
      if (*(float *)a3 < 0.0)
        goto LABEL_45;
      if (*(float *)(result + 15352) != v12)
      {
        *(float *)(result + 15352) = v12;
        *(_BYTE *)(result + 32504) = 1;
        result = gleUpdatePointAttenuation(result);
        goto LABEL_21;
      }
      return result;
    case 33064:
      v13 = *(float *)a3;
      if (*(float *)a3 < 0.0)
      {
LABEL_45:
        if (!*v4)
        {
          v26 = 1281;
          goto LABEL_53;
        }
      }
      else if (*(float *)(result + 15356) != v13)
      {
        *(float *)(result + 15356) = v13;
LABEL_21:
        v14 = *(_QWORD *)(v3 + 19248);
        if (v14)
        {
          v15 = *(unsigned __int16 *)(v14 + 3788);
          if (v15 <= 0x3FF)
          {
            *(_DWORD *)(v3 + ((v15 >> 3) & 0x1FFC) + 1552) |= 1 << v15;
            *(_DWORD *)(v3 + 1532) |= 0x800000u;
          }
        }
        v16 = *(_QWORD *)(v3 + 19272);
        if (v16)
        {
          v17 = *(unsigned __int16 *)(v16 + 3788);
          if (v17 <= 0x3FF)
          {
            *(_DWORD *)(v3 + ((v17 >> 3) & 0x1FFC) + 1936) |= 1 << v17;
            *((_DWORD *)v5 + 3318) = 0;
LABEL_27:
            *(_DWORD *)(v3 + 1532) |= 0x4000000u;
          }
        }
LABEL_28:
        v18 = *(_QWORD *)(v3 + 19280);
        if (v18)
        {
          v19 = *(unsigned __int16 *)(v18 + 3788);
          goto LABEL_38;
        }
        goto LABEL_43;
      }
      return result;
    case 33065:
      *(_DWORD *)(result + 15360) = *(_DWORD *)a3;
      *(_DWORD *)(result + 15364) = *(_DWORD *)(a3 + 4);
      *(_DWORD *)(result + 15368) = *(_DWORD *)(a3 + 8);
      result = gleUpdatePointAttenuation(result);
      v20 = *(_QWORD *)(v3 + 19248);
      if (v20)
      {
        v21 = *(unsigned __int16 *)(v20 + 3790);
        if (v21 <= 0x3FF)
        {
          *(_DWORD *)(v3 + ((v21 >> 3) & 0x1FFC) + 1552) |= 1 << v21;
          *(_DWORD *)(v3 + 1532) |= 0x800000u;
        }
      }
      v22 = *(_QWORD *)(v3 + 19272);
      if (v22)
      {
        v23 = *(unsigned __int16 *)(v22 + 3790);
        if (v23 <= 0x3FF)
        {
          *(_DWORD *)(v3 + ((v23 >> 3) & 0x1FFC) + 1936) |= 1 << v23;
          *((_DWORD *)v5 + 3318) = 0;
          *(_DWORD *)(v3 + 1532) |= 0x4000000u;
        }
      }
      v24 = *(_QWORD *)(v3 + 19280);
      if (v24)
      {
        v19 = *(unsigned __int16 *)(v24 + 3790);
LABEL_38:
        if (v19 <= 0x3FF)
        {
          *(_DWORD *)(v3 + ((v19 >> 3) & 0x1FFC) + 2064) |= 1 << v19;
          *(_DWORD *)(v3 + 1532) |= 0x8000000u;
        }
      }
      goto LABEL_43;
    default:
      if (a2 == 34915)
      {
        v25 = *(float *)a3;
        if (!v25 || (v25 != 0x2000 ? (v27 = v25 == 8194) : (v27 = 1), v27))
        {
          if (*(unsigned __int16 *)(result + 15382) == v25)
            return result;
          *(_WORD *)(result + 15382) = v25;
          goto LABEL_43;
        }
      }
      else if (a2 == 36000)
      {
        v11 = *(float *)a3;
        if (v11 - 36001 < 2)
        {
          if (*v5 == v11)
            return result;
          *v5 = v11;
LABEL_43:
          *((_DWORD *)v5 + 3318) = 0;
          *(_DWORD *)(v3 + 1520) |= 0x400000u;
          return result;
        }
      }
      if (!*v4)
      {
        v26 = 1280;
LABEL_53:
        *v4 = v26;
      }
      return result;
  }
}

uint64_t glPointParameterxv_Exec(uint64_t a1, int a2, uint64_t a3)
{
  float v4;
  float32x2_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v4 = (float)*(int *)a3 * 0.000015259;
  if (a2 == 33065)
    v5 = vmul_f32(vcvt_f32_s32(*(int32x2_t *)(a3 + 4)), (float32x2_t)vdup_n_s32(0x37800000u));
  return glPointParameterfv_Exec(a1, a2, (uint64_t)&v4);
}

_DWORD *glPointParameterxv_PackThread(uint64_t a1, int a2, uint64_t a3)
{
  float v4;
  float32x2_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v4 = (float)*(int *)a3 * 0.000015259;
  if (a2 == 33065)
    v5 = vmul_f32(vcvt_f32_s32(*(int32x2_t *)(a3 + 4)), (float32x2_t)vdup_n_s32(0x37800000u));
  return glPointParameterfv_Comp(a1, a2, (int *)&v4);
}

_DWORD *glPointParameterfv_Comp(uint64_t a1, int a2, int *a3)
{
  uint64_t v5;
  _QWORD *v6;
  _DWORD *result;
  int v8;

  if (a2 == 33065)
    v5 = 3;
  else
    v5 = 1;
  v6 = gleAddCommand(a1, (uint64_t)glPointParameterfv_ListExec, (4 * v5 + 4));
  *(_DWORD *)v6 = a2;
  result = (_DWORD *)v6 + 1;
  do
  {
    v8 = *a3++;
    *result++ = v8;
    --v5;
  }
  while (v5);
  return result;
}

uint64_t glPointParameterfv_ListExec(uint64_t a1, int *a2)
{
  int v2;

  v2 = *a2;
  glPointParameterfv_Exec(a1, *a2, (uint64_t)(a2 + 1));
  if (v2 == 33065)
    return 16;
  else
    return 8;
}

float *glPointSize_Comp(uint64_t a1, float a2)
{
  float *result;

  result = (float *)gleAddCommand(a1, (uint64_t)glPointSize_ListExec, 4);
  *result = a2;
  return result;
}

uint64_t glPointSize_ListExec(uint64_t a1, float *a2)
{
  glPointSize_Exec(a1, *a2);
  return 4;
}

uint64_t glPointSizex_Exec(uint64_t a1, int a2)
{
  return glPointSize_Exec(a1, (float)a2 * 0.000015259);
}

float *glPointSizex_PackThread(uint64_t a1, int a2)
{
  float v2;
  float *result;

  v2 = (float)a2 * 0.000015259;
  result = (float *)gleAddCommand(a1, (uint64_t)glPointSize_ListExec, 4);
  *result = v2;
  return result;
}

float *glPolygonOffset_Comp(uint64_t a1, float a2, float a3)
{
  float *result;

  result = (float *)gleAddCommand(a1, (uint64_t)glPolygonOffset_ListExec, 8);
  *result = a2;
  result[1] = a3;
  return result;
}

uint64_t glPolygonOffset_ListExec(uint64_t a1, _QWORD *a2)
{
  *(_QWORD *)(a1 + 15516) = *a2;
  *(_DWORD *)(a1 + 28652) = 0;
  *(_DWORD *)(a1 + 1520) |= 0x800000u;
  return 8;
}

float glPolygonOffsetx_Exec(uint64_t a1, int a2, int a3)
{
  float result;

  result = (float)a2 * 0.000015259;
  *(float *)(a1 + 15516) = result;
  *(float *)(a1 + 15520) = (float)a3 * 0.000015259;
  *(_DWORD *)(a1 + 28652) = 0;
  *(_DWORD *)(a1 + 1520) |= 0x800000u;
  return result;
}

float32x2_t glPolygonOffsetx_PackThread(uint64_t a1, unsigned int a2, unsigned int a3)
{
  float32x2_t v3;
  float32x2_t *v4;
  float32x2_t result;

  v3 = vcvt_f32_s32((int32x2_t)__PAIR64__(a3, a2));
  v4 = (float32x2_t *)gleAddCommand(a1, (uint64_t)glPolygonOffset_ListExec, 8);
  result = vmul_f32(v3, (float32x2_t)vdup_n_s32(0x37800000u));
  *v4 = result;
  return result;
}

void glGetProgramBinary_Exec(uint64_t a1, unsigned int a2)
{
  __int16 *v4;
  __int16 v5;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  if (gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, a2))
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    v4 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832))
      return;
    v5 = 1282;
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    v4 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832))
      return;
    v5 = 1281;
  }
  *v4 = v5;
}

void glProgramBinary_Exec(uint64_t a1, unsigned int a2)
{
  uint64_t *v4;
  int v5;
  __int16 *v6;
  __int16 v7;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v4 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, a2);
  if (v4)
  {
    v5 = *((_DWORD *)v4 + 6);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    v6 = (__int16 *)(a1 + 29832);
    if (v5 == 8)
    {
      if (*(_WORD *)(a1 + 29832))
        return;
      v7 = 1280;
    }
    else
    {
      if (*(_WORD *)(a1 + 29832))
        return;
      v7 = 1282;
    }
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    v6 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832))
      return;
    v7 = 1281;
  }
  *v6 = v7;
}

void glGetProgramBinary_ExecThread(uint64_t a1, unsigned int a2)
{
  (*(void (**)(void))(a1 + 27752))();
  glGetProgramBinary_Exec(a1, a2);
}

void glProgramBinary_ExecThread(uint64_t a1, unsigned int a2)
{
  (*(void (**)(void))(a1 + 27752))();
  glProgramBinary_Exec(a1, a2);
}

void glUseProgramStages_Exec(uint64_t *a1, unsigned int a2, int a3, unsigned int a4)
{
  uint64_t *v8;
  _DWORD *ProgramPipelineHashObject;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  __int16 v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;

  v8 = a1 + 3729;
  os_unfair_lock_lock((os_unfair_lock_t)(a1[2412] + 324));
  ProgramPipelineHashObject = gleLookupHashObject(a1[2412] + 136, a2);
  if (!ProgramPipelineHashObject
    && (!gleIsHashName(a1[2412] + 136, a2)
     || (ProgramPipelineHashObject = gleCreateProgramPipelineHashObject((uint64_t)a1, a2)) == 0))
  {
LABEL_13:
    if (!*(_WORD *)v8)
    {
      v14 = 1282;
LABEL_17:
      *(_WORD *)v8 = v14;
      goto LABEL_37;
    }
    goto LABEL_37;
  }
  if ((a3 + 1) >= 5)
    goto LABEL_15;
  v10 = a1[3304];
  if (*(__int16 *)(v10 + 42) == -1 || *(_BYTE *)(v10 + 41))
  {
    if (!a4)
    {
      v13 = 0;
      v12 = 0;
      goto LABEL_19;
    }
    v11 = gleLookupHashObject(a1[2412] + 168, a4);
    if (v11)
    {
      v12 = v11;
      if (*((_DWORD *)v11 + 6) == 8)
      {
        if (*((_BYTE *)v11 + 3976) != 1 || !*((_BYTE *)v11 + 3981))
          goto LABEL_13;
        v13 = v11 + 5;
LABEL_19:
        v15 = 0;
        v16 = (char *)(ProgramPipelineHashObject + 10);
        ProgramPipelineHashObject[26] |= 1u;
        do
        {
          if ((dword_21B9A417C[2 * v15] & a3) != 0)
          {
            v17 = dword_21B9A417C[2 * v15 + 1];
            v18 = *(_QWORD *)&v16[8 * v17];
            *(_QWORD *)&v16[8 * v17] = v12;
            if (v12)
              ++*((_DWORD *)v12 + 5);
            if (ProgramPipelineHashObject == (_DWORD *)a1[3097] && !a1[3096])
            {
              v19 = *((unsigned __int8 *)v8 + 2664);
              if (*((_BYTE *)v8 + 2664))
              {
                v20 = &a1[v17 + 4188];
                v21 = v13;
                do
                {
                  if (v13)
                    v22 = *v21;
                  else
                    v22 = 0;
                  *v20 = v22;
                  v20 += 209;
                  ++v21;
                  --v19;
                }
                while (v19);
              }
            }
            if (v18)
            {
              v23 = *(_DWORD *)(v18 + 20) - 1;
              *(_DWORD *)(v18 + 20) = v23;
              if (v23 == 1)
                gleDeleteHashNameAndObject(a1[2412], (void (**)(uint64_t, uint64_t))(a1[2412] + 168), *(_DWORD *)(v18 + 16));
            }
          }
          ++v15;
        }
        while (v15 != 5);
        if (ProgramPipelineHashObject == (_DWORD *)a1[3097])
          gleBindProgramPipelineObject((uint64_t)a1, (uint64_t)ProgramPipelineHashObject);
        goto LABEL_37;
      }
    }
LABEL_15:
    if (!*(_WORD *)v8)
    {
      v14 = 1281;
      goto LABEL_17;
    }
LABEL_37:
    os_unfair_lock_unlock((os_unfair_lock_t)(a1[2412] + 324));
    return;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1[2412] + 324));
  if (!*(_WORD *)v8)
    *(_WORD *)v8 = 1282;
}

void glActiveShaderProgram_Exec(uint64_t a1, unsigned int a2, unsigned int a3)
{
  _QWORD *ProgramPipelineHashObject;
  uint64_t v7;
  uint64_t *v8;
  int v9;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  ProgramPipelineHashObject = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 136, a2);
  if (!ProgramPipelineHashObject
    && (!gleIsHashName(*(_QWORD *)(a1 + 19296) + 136, a2)
     || (ProgramPipelineHashObject = gleCreateProgramPipelineHashObject(a1, a2)) == 0))
  {
LABEL_8:
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
    goto LABEL_14;
  }
  v7 = ProgramPipelineHashObject[10];
  if (a3)
  {
    v8 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, a3);
    if (!v8 || *((_BYTE *)v8 + 3976) != 1)
      goto LABEL_8;
    ++*((_DWORD *)v8 + 5);
  }
  else
  {
    v8 = 0;
  }
  ProgramPipelineHashObject[10] = v8;
  if (v7)
  {
    v9 = *(_DWORD *)(v7 + 20) - 1;
    *(_DWORD *)(v7 + 20) = v9;
    if (v9 == 1)
      gleDeleteHashNameAndObject(*(_QWORD *)(a1 + 19296), (void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 19296) + 168), *(_DWORD *)(v7 + 16));
  }
LABEL_14:
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
}

uint64_t glCreateShaderProgramv_Exec(size_t a1, int a2, int a3, const void **a4)
{
  uint64_t ShaderObjectARB_Exec;
  uint64_t v8;
  uint64_t ProgramObjectARB_Exec;
  uint64_t *v10;
  const char *v11;
  int v13;

  ShaderObjectARB_Exec = glCreateShaderObjectARB_Exec(a1, a2);
  if (!ShaderObjectARB_Exec)
    return 0;
  v8 = ShaderObjectARB_Exec;
  glShaderSourceARB_Exec(a1, ShaderObjectARB_Exec, a3, a4, 0);
  glCompileShaderARB_Exec(a1, v8);
  ProgramObjectARB_Exec = glCreateProgramObjectARB_Exec(a1);
  if (ProgramObjectARB_Exec)
  {
    v13 = 0;
    glGetShaderiv_Exec(a1, v8, 35713, &v13);
    glProgramParameteriEXT_Exec(a1, ProgramObjectARB_Exec, 33368, 1);
    if (v13)
    {
      glAttachObjectARB_Exec(a1, ProgramObjectARB_Exec, v8);
      glLinkProgramARB_Exec(a1, ProgramObjectARB_Exec);
      glDetachObjectARB_Exec(a1, ProgramObjectARB_Exec, v8);
    }
    os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    v10 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, ProgramObjectARB_Exec);
    v11 = (const char *)gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, v8)[5];
    if (v11)
      gleAppendStringToInfoLog(v11, (const void **)v10 + 17, (_DWORD *)v10 + 981);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  glDeleteObjectARB_Exec(a1, v8);
  return ProgramObjectARB_Exec;
}

void glBindProgramPipeline_Exec(uint64_t a1, unsigned int a2)
{
  _DWORD *ProgramPipelineHashObject;
  uint64_t v5;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  if (!a2)
  {
    ProgramPipelineHashObject = 0;
LABEL_8:
    gleBindProgramPipelineObject(a1, (uint64_t)ProgramPipelineHashObject);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    return;
  }
  ProgramPipelineHashObject = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 136, a2);
  if ((ProgramPipelineHashObject
     || gleIsHashName(*(_QWORD *)(a1 + 19296) + 136, a2)
     && (ProgramPipelineHashObject = gleCreateProgramPipelineHashObject(a1, a2)) != 0)
    && ProgramPipelineHashObject[6] == 6)
  {
    v5 = *(_QWORD *)(a1 + 26432);
    if (*(__int16 *)(v5 + 42) == -1 || *(_BYTE *)(v5 + 41))
      goto LABEL_8;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  if (!*(_WORD *)(a1 + 29832))
    *(_WORD *)(a1 + 29832) = 1282;
}

void glDeleteProgramPipelines_Exec(uint64_t a1, unsigned int a2, unsigned int *a3)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  gleDeleteProgramPipelines(a1, a2, a3);
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
}

void glGenProgramPipelines_Exec(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  gleGenProgramPipelines(a1, a2, a3);
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
}

BOOL glIsProgramPipeline_Exec(uint64_t a1, unsigned int a2)
{
  uint64_t *v4;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v4 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 136, a2);
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  return v4 != 0;
}

void glGetProgramPipelineiv_Exec(uint64_t a1, unsigned int a2, int a3, _DWORD *a4)
{
  _QWORD *ProgramPipelineHashObject;
  uint64_t v9;
  __int16 *v10;
  __int16 v11;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  ProgramPipelineHashObject = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 136, a2);
  if (!ProgramPipelineHashObject
    && (!gleIsHashName(*(_QWORD *)(a1 + 19296) + 136, a2)
     || (ProgramPipelineHashObject = gleCreateProgramPipelineHashObject(a1, a2)) == 0))
  {
    v10 = (__int16 *)(a1 + 29832);
    if (!*(_WORD *)(a1 + 29832))
    {
      v11 = 1282;
LABEL_24:
      *v10 = v11;
      goto LABEL_21;
    }
    goto LABEL_21;
  }
  if (a3 <= 35632)
  {
    if (a3 == 33369)
    {
      v9 = ProgramPipelineHashObject[10];
      if (!v9)
        goto LABEL_20;
    }
    else
    {
      if (a3 != 35632)
        goto LABEL_22;
      v9 = ProgramPipelineHashObject[9];
      if (!v9)
        goto LABEL_20;
    }
LABEL_19:
    LODWORD(v9) = *(_DWORD *)(v9 + 16);
    goto LABEL_20;
  }
  switch(a3)
  {
    case 35633:
      v9 = ProgramPipelineHashObject[5];
      if (!v9)
        goto LABEL_20;
      goto LABEL_19;
    case 35715:
      LODWORD(v9) = *((unsigned __int8 *)ProgramPipelineHashObject + 100);
      goto LABEL_20;
    case 35716:
      LODWORD(v9) = *((_DWORD *)ProgramPipelineHashObject + 24);
LABEL_20:
      *a4 = v9;
      goto LABEL_21;
  }
LABEL_22:
  v10 = (__int16 *)(a1 + 29832);
  if (!*(_WORD *)(a1 + 29832))
  {
    v11 = 1280;
    goto LABEL_24;
  }
LABEL_21:
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
}

void glValidateProgramPipeline_Exec(unint64_t a1, unsigned int a2)
{
  unint64_t v4;
  void *ProgramPipelineHashObject;
  __n128 v6;
  double v7;
  double v8;
  _DWORD *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;

  v4 = a1 + 29832;
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  ProgramPipelineHashObject = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 136, a2);
  if (!ProgramPipelineHashObject
    && (!gleIsHashName(*(_QWORD *)(a1 + 19296) + 136, a2)
     || (ProgramPipelineHashObject = gleCreateProgramPipelineHashObject(a1, a2)) == 0))
  {
    if (!*(_WORD *)v4)
      *(_WORD *)v4 = 1282;
    goto LABEL_53;
  }
  *((_BYTE *)ProgramPipelineHashObject + 100) = 0;
  v9 = *(_DWORD **)(a1 + 24768);
  if (v9)
  {
    ++v9[5];
    gleUseProgramObject(a1, 0);
  }
  v10 = *(_QWORD *)(a1 + 24776);
  if (ProgramPipelineHashObject != (void *)v10)
  {
    if (v10)
      ++*(_DWORD *)(v10 + 20);
    gleBindProgramPipelineObject(a1, (uint64_t)ProgramPipelineHashObject);
  }
  v11 = *(unsigned __int8 *)(v4 + 2669);
  if ((*(_BYTE *)(a1 + 28655) & 8) != 0 && *(char *)(a1 + 28681) < 0 && *(char *)(a1 + 28683) < 0)
  {
    v13 = 0;
  }
  else
  {
    if ((v11 - 3) >= 2)
    {
      if (v11 == 1)
        v12 = gleDoSelectiveDispatchNoErrorCoreGL3(a1, 0x8000000u, 0x80u, 0x80u, 0xF8000000, v6.n128_f64[0], v7, v8);
      else
        v12 = gleDoSelectiveDispatchNoErrorCore(a1, 0x8000000u, 0x80u, 0x80u, 0xF8000000, v6, v7, v8);
    }
    else
    {
      v12 = gleDoSelectiveDispatchNoErrorCoreES2(a1, 0x8000000u, 0x80u, 0x80u, 0xF8000000, v6.n128_f64[0], v7, v8);
    }
    v13 = v12;
  }
  v14 = (void *)*((_QWORD *)ProgramPipelineHashObject + 11);
  if (v14)
    free(v14);
  *((_DWORD *)ProgramPipelineHashObject + 24) = 0;
  *((_QWORD *)ProgramPipelineHashObject + 11) = 0;
  if (*(_BYTE *)(v4 + 2650))
  {
    gleAppendStringToInfoLog("Validation Failed: Fragment program failed to compile with current context state.\n", (const void **)ProgramPipelineHashObject + 11, (_DWORD *)ProgramPipelineHashObject + 24);
    *(_BYTE *)(v4 + 2652) = 0;
  }
  if (!*(_BYTE *)(v4 + 2649) && *(_BYTE *)(*(_QWORD *)(a1 + 29032) + 101))
  {
    gleAppendStringToInfoLog("Validation Failed: Vertex program failed to compile with current context state.\n", (const void **)ProgramPipelineHashObject + 11, (_DWORD *)ProgramPipelineHashObject + 24);
    *(_BYTE *)(v4 + 2652) = 0;
  }
  if (*(_BYTE *)(v4 + 2654) && (*(_QWORD *)(a1 + 29008) || *(_QWORD *)(a1 + 28960)))
  {
    if (*(_BYTE *)(v4 + 2652) && !v13)
    {
      *((_BYTE *)ProgramPipelineHashObject + 100) = 1;
      goto LABEL_48;
    }
    *((_BYTE *)ProgramPipelineHashObject + 100) = 0;
    if (*((_BYTE *)ProgramPipelineHashObject + 101))
    {
      v16 = *((_QWORD *)ProgramPipelineHashObject + 5);
      if (v16 && (*(_BYTE *)(v16 + 3720) & 1) != 0)
      {
        v17 = *((_QWORD *)ProgramPipelineHashObject + 9);
        if (v17 && (*(_BYTE *)(v17 + 3720) & 2) != 0 || *(_BYTE *)(a1 + 17984))
        {
          if (!v13)
            goto LABEL_48;
          v15 = "Validation Failed\n";
        }
        else
        {
          v15 = "Validation Failed: Program does not contain fragment shader. Results will be undefined.\n";
        }
      }
      else
      {
        v15 = "Validation Failed: Program does not contain vertex shader. Results will be undefined.\n";
      }
    }
    else
    {
      v15 = "Validation Failed: Sampler error:\n"
            "  Samplers of different types use the same texture image unit.\n"
            "   - or -\n"
            "  A sampler's texture unit is out of range (greater than max allowed or negative).\n";
    }
  }
  else
  {
    *((_BYTE *)ProgramPipelineHashObject + 100) = 0;
    v15 = "Validation Failed: Current draw framebuffer is invalid.\n";
  }
  gleAppendStringToInfoLog(v15, (const void **)ProgramPipelineHashObject + 11, (_DWORD *)ProgramPipelineHashObject + 24);
LABEL_48:
  if (ProgramPipelineHashObject != (void *)v10)
  {
    gleBindProgramPipelineObject(a1, v10);
    if (v10)
      --*(_DWORD *)(v10 + 20);
  }
  if (v9)
  {
    gleUseProgramObject(a1, v9);
    --v9[5];
  }
LABEL_53:
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
}

void glGetProgramPipelineInfoLog_Exec(uint64_t a1, unsigned int a2, int a3, _DWORD *a4, void *a5)
{
  void *ProgramPipelineHashObject;

  if (a3 < 0)
  {
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1281;
  }
  else
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    ProgramPipelineHashObject = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 136, a2);
    if (ProgramPipelineHashObject
      || gleIsHashName(*(_QWORD *)(a1 + 19296) + 136, a2)
      && (ProgramPipelineHashObject = gleCreateProgramPipelineHashObject(a1, a2)) != 0)
    {
      gleGetString(*((const void **)ProgramPipelineHashObject + 11), *((_DWORD *)ProgramPipelineHashObject + 24), a3, a4, a5);
    }
    else if (!*(_WORD *)(a1 + 29832))
    {
      *(_WORD *)(a1 + 29832) = 1282;
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
}

_DWORD *glUseProgramStages_PackThread(uint64_t a1, int a2, int a3, int a4)
{
  _DWORD *result;

  result = gleAddCommand(a1, (uint64_t)glUseProgramStages_UnpackThread, 12);
  *result = a2;
  result[1] = a3;
  result[2] = a4;
  return result;
}

uint64_t glUseProgramStages_UnpackThread(uint64_t *a1, uint64_t a2)
{
  glUseProgramStages_Exec(a1, *(_DWORD *)a2, *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 8));
  return 12;
}

_DWORD *glActiveShaderProgram_PackThread(uint64_t a1, int a2, int a3)
{
  _DWORD *result;

  result = gleAddCommand(a1, (uint64_t)glActiveShaderProgram_UnpackThread, 8);
  *result = a2;
  result[1] = a3;
  return result;
}

uint64_t glActiveShaderProgram_UnpackThread(uint64_t a1, unsigned int *a2)
{
  glActiveShaderProgram_Exec(a1, *a2, a2[1]);
  return 8;
}

uint64_t glCreateShaderProgramv_ExecThread(size_t a1, int a2, int a3, const void **a4)
{
  (*(void (**)(void))(a1 + 27752))();
  return glCreateShaderProgramv_Exec(a1, a2, a3, a4);
}

_QWORD *glBindProgramPipeline_PackThread(uint64_t a1, int a2)
{
  _QWORD *result;

  result = gleAddCommand(a1, (uint64_t)glBindProgramPipeline_UnpackThread, 4);
  *(_DWORD *)result = a2;
  return result;
}

uint64_t glBindProgramPipeline_UnpackThread(uint64_t a1, unsigned int *a2)
{
  glBindProgramPipeline_Exec(a1, *a2);
  return 4;
}

void glDeleteProgramPipelines_ExecThread(uint64_t a1, unsigned int a2, unsigned int *a3)
{
  (*(void (**)(void))(a1 + 27752))();
  glDeleteProgramPipelines_Exec(a1, a2, a3);
}

void glGenProgramPipelines_ExecThread(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  (*(void (**)(void))(a1 + 27752))();
  glGenProgramPipelines_Exec(a1, a2, a3);
}

BOOL glIsProgramPipeline_ExecThread(uint64_t a1, unsigned int a2)
{
  (*(void (**)(void))(a1 + 27752))();
  return glIsProgramPipeline_Exec(a1, a2);
}

void glGetProgramPipelineiv_ExecThread(uint64_t a1, unsigned int a2, int a3, _DWORD *a4)
{
  (*(void (**)(void))(a1 + 27752))();
  glGetProgramPipelineiv_Exec(a1, a2, a3, a4);
}

_QWORD *glValidateProgramPipeline_PackThread(uint64_t a1, int a2)
{
  _QWORD *result;

  result = gleAddCommand(a1, (uint64_t)glValidateProgramPipeline_UnpackThread, 4);
  *(_DWORD *)result = a2;
  return result;
}

uint64_t glValidateProgramPipeline_UnpackThread(unint64_t a1, unsigned int *a2)
{
  glValidateProgramPipeline_Exec(a1, *a2);
  return 4;
}

void glGetProgramPipelineInfoLog_ExecThread(uint64_t a1, unsigned int a2, int a3, _DWORD *a4, void *a5)
{
  (*(void (**)(void))(a1 + 27752))();
  glGetProgramPipelineInfoLog_Exec(a1, a2, a3, a4, a5);
}

_QWORD *glReadBuffer_Comp(uint64_t a1, int a2)
{
  _QWORD *result;

  result = gleAddCommand(a1, (uint64_t)glReadBuffer_ListExec, 4);
  *(_DWORD *)result = a2;
  return result;
}

uint64_t glReadBuffer_ListExec(uint64_t a1, unsigned int *a2)
{
  glReadBuffer_Exec(a1, *a2);
  return 4;
}

uint64_t gleInternalFormatIsSigned(int a1)
{
  int v3;
  int v4;
  unsigned int v5;

  if ((a1 - 34836) < 0xC || (a1 - 33325) < 4)
    return 1;
  if ((a1 - 36226) >= 0x12)
    v3 = ((a1 - 33329) < 0xB) & a1;
  else
    v3 = 1;
  if (a1 == 36286)
    v4 = 1;
  else
    v4 = v3;
  if (a1 == 36284)
    v5 = 1;
  else
    v5 = v4;
  if ((a1 - 36756) >= 8)
    return v5;
  else
    return 1;
}

_QWORD *glReadPixels_PackThread(unint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, int a7, uint64_t a8)
{
  _QWORD *result;

  if (*(_QWORD *)(a1 + 26480))
  {
    result = gleAddCommand(a1, (uint64_t)glReadPixels_UnpackThread, 32);
    *(_DWORD *)result = a2;
    *((_DWORD *)result + 1) = a3;
    *((_DWORD *)result + 2) = a4;
    *((_DWORD *)result + 3) = a5;
    *((_DWORD *)result + 4) = a6;
    *((_DWORD *)result + 5) = a7;
    result[3] = a8;
  }
  else
  {
    (*(void (**)(unint64_t))(a1 + 27752))(a1);
    return (_QWORD *)glReadPixels_Exec(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return result;
}

uint64_t glReadPixels_UnpackThread(unint64_t a1, uint64_t a2)
{
  glReadPixels_Exec(a1, *(_DWORD *)a2, *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 8), *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), *(_QWORD *)(a2 + 24));
  return 32;
}

float glRotateXYZ_Comp(uint64_t a1, float a2, float a3, float a4, float a5)
{
  float v9;
  float *v10;
  __float2 v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float result;

  v9 = *(float *)(a1 + 292);
  v10 = (float *)gleAddCommand(a1, (uint64_t)glRotateXYZ_ListExec, 36);
  v11 = __sincosf_stret(a2 * 0.017453);
  v12 = v9 / sqrtf((float)((float)(a4 * a4) + (float)(a3 * a3)) + (float)(a5 * a5));
  v13 = v12 * a3;
  v14 = v12 * a4;
  v15 = v12 * a5;
  v16 = v13 * v13;
  v17 = v14 * v14;
  v18 = (float)(v9 - v11.__cosval) * (float)(v13 * v14);
  v19 = (float)(v9 - v11.__cosval) * (float)(v14 * v15);
  v20 = (float)(v9 - v11.__cosval) * (float)(v15 * v13);
  v21 = v11.__sinval * v13;
  v22 = v11.__sinval * v14;
  *v10 = v16 + (float)(v11.__cosval * (float)(v9 - v16));
  v10[1] = (float)(v11.__sinval * v15) + v18;
  v10[2] = v20 - v22;
  v10[3] = v18 - (float)(v11.__sinval * v15);
  v10[4] = v17 + (float)(v11.__cosval * (float)(v9 - v17));
  v10[5] = v21 + v19;
  v10[6] = v22 + v20;
  v10[7] = v19 - v21;
  result = (float)(v15 * v15) + (float)(v11.__cosval * (float)(v9 - (float)(v15 * v15)));
  v10[8] = result;
  return result;
}

uint64_t glRotateZ_Exec(uint64_t result, double a2, double a3)
{
  int v3;
  uint64_t v4;
  float32x2_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  int v9;
  uint64_t v10;
  float32x4_t v11;
  float32x4_t v12;

  if (*(int *)(result + 20484) < 24)
  {
    v3 = *(_DWORD *)(result + 20488);
    v4 = *(_QWORD *)(result + 19976);
    v5 = (float32x2_t)vdupq_lane_s32(*(int32x2_t *)&a2, 0).u64[0];
    v6 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0);
    v8 = *(float32x4_t *)v4;
    v7 = *(float32x4_t *)(v4 + 16);
    *(float32x2_t *)v4 = vmla_f32(vmul_f32(*(float32x2_t *)v7.f32, v5), *(float32x2_t *)v6.f32, *(float32x2_t *)v4);
    *(float32x2_t *)(v4 + 8) = vmla_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v7, (int8x16_t)v7, 8uLL), v5), *(float32x2_t *)v6.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL));
    *(float32x4_t *)(v4 + 16) = vmlaq_n_f32(vmulq_n_f32(vnegq_f32(v8), *(float *)&a2), v7, *(float *)&a3);
    *(_DWORD *)(result + 1528) |= v3;
    *(_DWORD *)(result + 1540) |= v3;
    v9 = *(_DWORD *)(result + 1544);
    if ((v3 & ~v9 & *(_DWORD *)(result + 2216) & 0xFFFFFC) != 0)
    {
      v10 = *(_QWORD *)(result + 19984);
      v12 = *(float32x4_t *)v10;
      v11 = *(float32x4_t *)(v10 + 16);
      *(float32x2_t *)v10 = vmla_f32(vmul_f32(*(float32x2_t *)v11.f32, v5), *(float32x2_t *)v6.f32, *(float32x2_t *)v10);
      *(float32x2_t *)(v10 + 8) = vmla_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL), v5), *(float32x2_t *)v6.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL));
      *(float32x4_t *)(v10 + 16) = vmlaq_f32(vmulq_n_f32(vnegq_f32(v12), *(float *)&a2), v6, v11);
      v3 &= 0xFF000003;
    }
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1544) = v3 | v9;
  }
  else if (!*(_WORD *)(result + 29832))
  {
    *(_WORD *)(result + 29832) = 1282;
  }
  return result;
}

void glRotateXYZ_Exec(uint64_t a1, float a2, float a3, float a4, float a5)
{
  uint64_t v6;
  int v10;
  float v11;
  float *v12;
  __float2 v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  int v52;
  float *v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;

  v6 = a1 + 20484;
  if (*(int *)(a1 + 20484) < 24)
  {
    v10 = *(_DWORD *)(a1 + 20488);
    v11 = *(float *)(a1 + 292);
    v12 = *(float **)(a1 + 19976);
    v13 = __sincosf_stret(a2 * 0.017453);
    v14 = v11 / sqrtf((float)((float)(a4 * a4) + (float)(a3 * a3)) + (float)(a5 * a5));
    v15 = v14 * a3;
    v16 = v14 * a4;
    v17 = v14 * a5;
    v18 = v16 * v16;
    v19 = v17 * v17;
    v20 = (float)(v11 - v13.__cosval) * (float)(v15 * v16);
    v21 = (float)(v11 - v13.__cosval) * (float)(v16 * v17);
    v22 = (float)(v11 - v13.__cosval) * (float)(v17 * v15);
    v23 = v13.__sinval * v15;
    v24 = v13.__sinval * v16;
    v25 = v13.__sinval * v17;
    v26 = (float)(v15 * v15) + (float)(v13.__cosval * (float)(v11 - (float)(v15 * v15)));
    v27 = v25 + v20;
    v28 = v22 - v24;
    v29 = v20 - v25;
    v30 = v18 + (float)(v13.__cosval * (float)(v11 - v18));
    v31 = v23 + v21;
    v32 = v24 + v22;
    v33 = v21 - v23;
    v34 = v19 + (float)(v13.__cosval * (float)(v11 - v19));
    v35 = v12[4];
    v36 = v12[5];
    v37 = v12[1];
    v38 = (float)(v35 * v30) + (float)(*v12 * v29);
    v39 = v12[8];
    v40 = v12[9];
    v41 = (float)((float)(v35 * v27) + (float)(*v12 * v26)) + (float)(v39 * v28);
    v42 = (float)((float)(v35 * v33) + (float)(*v12 * v32)) + (float)(v39 * v34);
    *v12 = v41;
    v12[1] = (float)((float)(v27 * v36) + (float)(v37 * v26)) + (float)(v40 * v28);
    v12[4] = v38 + (float)(v39 * v31);
    v12[5] = (float)((float)(v30 * v36) + (float)(v37 * v29)) + (float)(v40 * v31);
    v12[8] = v42;
    v12[9] = (float)((float)(v33 * v36) + (float)(v37 * v32)) + (float)(v40 * v34);
    v43 = v12[6];
    v44 = v12[7];
    v45 = v12[2];
    v46 = v12[3];
    v47 = (float)(v27 * v43) + (float)(v45 * v26);
    v48 = (float)(v30 * v43) + (float)(v45 * v29);
    v49 = (float)(v33 * v43) + (float)(v45 * v32);
    v50 = v12[10];
    v51 = v12[11];
    v12[2] = v47 + (float)(v50 * v28);
    v12[3] = (float)((float)(v27 * v44) + (float)(v46 * v26)) + (float)(v51 * v28);
    v12[6] = v48 + (float)(v50 * v31);
    v12[7] = (float)((float)(v30 * v44) + (float)(v46 * v29)) + (float)(v51 * v31);
    v12[10] = v49 + (float)(v50 * v34);
    v12[11] = (float)((float)(v33 * v44) + (float)(v46 * v32)) + (float)(v51 * v34);
    *(_DWORD *)(a1 + 1528) |= v10;
    *(_DWORD *)(a1 + 1540) |= v10;
    v52 = *(_DWORD *)(a1 + 1544);
    if ((v10 & ~v52 & *(_DWORD *)(a1 + 2216) & 0xFFFFFC) != 0)
    {
      v53 = *(float **)(a1 + 19984);
      v54 = v53[4];
      v55 = v53[5];
      v56 = v53[1];
      v57 = (float)(v30 * v54) + (float)(*v53 * v29);
      v58 = v53[8];
      v59 = v53[9];
      v60 = (float)((float)(v27 * v54) + (float)(*v53 * v26)) + (float)(v58 * v28);
      v61 = (float)((float)(v33 * v54) + (float)(*v53 * v32)) + (float)(v58 * v34);
      *v53 = v60;
      v53[1] = (float)((float)(v27 * v55) + (float)(v56 * v26)) + (float)(v59 * v28);
      v53[4] = v57 + (float)(v58 * v31);
      v53[5] = (float)((float)(v30 * v55) + (float)(v56 * v29)) + (float)(v59 * v31);
      v53[8] = v61;
      v53[9] = (float)((float)(v33 * v55) + (float)(v56 * v32)) + (float)(v59 * v34);
      v62 = v53[6];
      v63 = v53[7];
      v64 = v53[2];
      v65 = v53[3];
      v66 = (float)(v27 * v62) + (float)(v64 * v26);
      v67 = (float)(v30 * v62) + (float)(v64 * v29);
      v68 = (float)(v33 * v62) + (float)(v64 * v32);
      v69 = v53[10];
      v70 = v53[11];
      v53[2] = v66 + (float)(v69 * v28);
      v53[3] = (float)((float)(v27 * v63) + (float)(v65 * v26)) + (float)(v70 * v28);
      v53[6] = v67 + (float)(v69 * v31);
      v53[7] = (float)((float)(v30 * v63) + (float)(v65 * v29)) + (float)(v70 * v31);
      v53[10] = v68 + (float)(v69 * v34);
      v53[11] = (float)((float)(v33 * v63) + (float)(v65 * v32)) + (float)(v70 * v34);
      v10 &= 0xFF000003;
    }
    *(_DWORD *)(v6 + 8168) = 0;
    *(_DWORD *)(a1 + 1544) = v10 | v52;
  }
  else if (!*(_WORD *)(a1 + 29832))
  {
    *(_WORD *)(a1 + 29832) = 1282;
  }
}

void glRotatex_Exec(uint64_t a1, int a2, int a3, int a4, int a5)
{
  glRotatef_Exec(a1, (float)a2 * 0.000015259, (float)a3 * 0.000015259, (float)a4 * 0.000015259, (float)a5 * 0.000015259);
}

void glRotatex_PackThread(uint64_t a1, int a2, int a3, int a4, int a5)
{
  glRotatef_Comp(a1, (float)a2 * 0.000015259, (float)a3 * 0.000015259, (float)a4 * 0.000015259, (float)a5 * 0.000015259);
}

uint64_t glRotateX_ListExec(uint64_t a1, _DWORD *a2, double a3, double a4)
{
  LODWORD(a3) = *a2;
  LODWORD(a4) = a2[1];
  glRotateX_Exec(a1, a3, a4);
  return 8;
}

uint64_t glRotateY_ListExec(uint64_t a1, uint64_t a2, double a3, double a4)
{
  LODWORD(a4) = *(_DWORD *)(a2 + 4);
  glRotateY_Exec(a1, *(float *)a2, a4);
  return 8;
}

uint64_t glRotateZ_ListExec(uint64_t a1, _DWORD *a2, double a3, double a4)
{
  LODWORD(a3) = *a2;
  LODWORD(a4) = a2[1];
  glRotateZ_Exec(a1, a3, a4);
  return 8;
}

uint64_t glRotateXYZ_ListExec(uint64_t a1, float *a2)
{
  float *v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  int v30;
  int v31;
  float *v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;

  if (*(int *)(a1 + 20484) < 24)
  {
    v2 = *(float **)(a1 + 19976);
    v3 = *a2;
    v4 = a2[1];
    v6 = a2[2];
    v5 = a2[3];
    v7 = a2[4];
    v8 = a2[5];
    v9 = a2[6];
    v10 = a2[7];
    v11 = a2[8];
    v12 = v2[4];
    v13 = v2[5];
    v14 = v2[1];
    v15 = v2[8];
    v16 = v2[9];
    v17 = (float)((float)(v4 * v12) + (float)(*v2 * *a2)) + (float)(v15 * v6);
    v18 = (float)((float)(v7 * v12) + (float)(*v2 * v5)) + (float)(v15 * v8);
    v19 = (float)((float)(v10 * v12) + (float)(*v2 * v9)) + (float)(v15 * v11);
    v20 = (float)((float)(v4 * v13) + (float)(v14 * *a2)) + (float)(v16 * v6);
    *v2 = v17;
    v2[1] = v20;
    v2[4] = v18;
    v2[5] = (float)((float)(v7 * v13) + (float)(v14 * v5)) + (float)(v16 * v8);
    v2[8] = v19;
    v2[9] = (float)((float)(v10 * v13) + (float)(v14 * v9)) + (float)(v16 * v11);
    v21 = v2[6];
    v22 = v2[7];
    v23 = v2[2];
    v24 = v2[3];
    v25 = (float)(v4 * v21) + (float)(v23 * v3);
    v26 = (float)(v7 * v21) + (float)(v23 * v5);
    v27 = (float)(v10 * v21) + (float)(v23 * v9);
    v28 = v2[10];
    v29 = v2[11];
    v2[2] = v25 + (float)(v28 * v6);
    v2[3] = (float)((float)(v4 * v22) + (float)(v24 * v3)) + (float)(v29 * v6);
    v2[6] = v26 + (float)(v28 * v8);
    v2[7] = (float)((float)(v7 * v22) + (float)(v24 * v5)) + (float)(v29 * v8);
    v30 = *(_DWORD *)(a1 + 20488);
    v2[10] = v27 + (float)(v28 * v11);
    v2[11] = (float)((float)(v10 * v22) + (float)(v24 * v9)) + (float)(v29 * v11);
    *(_DWORD *)(a1 + 1528) |= v30;
    *(_DWORD *)(a1 + 1540) |= v30;
    v31 = *(_DWORD *)(a1 + 1544);
    if ((v30 & ~v31 & *(_DWORD *)(a1 + 2216) & 0xFFFFFC) != 0)
    {
      v32 = *(float **)(a1 + 19984);
      v33 = v32[4];
      v34 = v32[5];
      v35 = v32[1];
      v36 = (float)(v7 * v33) + (float)(*v32 * v5);
      v37 = v32[8];
      v38 = v32[9];
      v39 = (float)((float)(v4 * v33) + (float)(*v32 * v3)) + (float)(v37 * v6);
      v40 = (float)((float)(v10 * v33) + (float)(*v32 * v9)) + (float)(v37 * v11);
      *v32 = v39;
      v32[1] = (float)((float)(v4 * v34) + (float)(v35 * v3)) + (float)(v38 * v6);
      v32[4] = v36 + (float)(v37 * v8);
      v32[5] = (float)((float)(v7 * v34) + (float)(v35 * v5)) + (float)(v38 * v8);
      v32[8] = v40;
      v32[9] = (float)((float)(v10 * v34) + (float)(v35 * v9)) + (float)(v38 * v11);
      v41 = v32[6];
      v42 = v32[7];
      v43 = v32[2];
      v44 = v32[3];
      v45 = (float)(v4 * v41) + (float)(v43 * v3);
      v46 = (float)(v7 * v41) + (float)(v43 * v5);
      v47 = (float)(v10 * v41) + (float)(v43 * v9);
      v48 = v32[10];
      v49 = v32[11];
      v32[2] = v45 + (float)(v48 * v6);
      v32[3] = (float)((float)(v4 * v42) + (float)(v44 * v3)) + (float)(v49 * v6);
      v32[6] = v46 + (float)(v48 * v8);
      v32[7] = (float)((float)(v7 * v42) + (float)(v44 * v5)) + (float)(v49 * v8);
      v32[10] = v47 + (float)(v48 * v11);
      v32[11] = (float)((float)(v10 * v42) + (float)(v44 * v9)) + (float)(v49 * v11);
      v30 &= 0xFF000003;
    }
    *(_DWORD *)(a1 + 28652) = 0;
    *(_DWORD *)(a1 + 1544) = v30 | v31;
  }
  else if (!*(_WORD *)(a1 + 29832))
  {
    *(_WORD *)(a1 + 29832) = 1282;
  }
  return 36;
}

_QWORD *glSampleCoverage_Comp(uint64_t a1, char a2, float a3)
{
  _QWORD *result;

  result = gleAddCommand(a1, (uint64_t)glSampleCoverage_ListExec, 8);
  *(float *)result = a3;
  *((_BYTE *)result + 4) = a2;
  return result;
}

uint64_t glSampleCoverage_ListExec(uint64_t a1, uint64_t a2)
{
  glSampleCoverage_Exec(a1, *(unsigned __int8 *)(a2 + 4), *(float *)a2);
  return 8;
}

uint64_t glSampleCoverage_Exec(uint64_t result, int a2, float a3)
{
  float v3;

  v3 = fminf(fmaxf(a3, *(float *)(result + 288)), *(float *)(result + 292));
  if (*(float *)(result + 17672) != v3 || *(_BYTE *)(result + 17684) != (a2 != 0))
  {
    *(float *)(result + 17672) = v3;
    *(_BYTE *)(result + 17684) = a2 != 0;
    *(_DWORD *)(result + 1520) |= 0x20000000u;
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1548) |= 0x40000u;
  }
  return result;
}

uint64_t glSampleCoveragex_Exec(uint64_t a1, int a2, int a3)
{
  return glSampleCoverage_Exec(a1, a3, (float)a2 * 0.000015259);
}

_QWORD *glSampleCoveragex_PackThread(uint64_t a1, int a2, char a3)
{
  float v4;
  _QWORD *result;

  v4 = (float)a2 * 0.000015259;
  result = gleAddCommand(a1, (uint64_t)glSampleCoverage_ListExec, 8);
  *(float *)result = v4;
  *((_BYTE *)result + 4) = a3;
  return result;
}

void glGenSamplers_ExecThread(uint64_t a1, int a2, int *a3)
{
  (*(void (**)(void))(a1 + 27752))();
  glGenSamplers_Exec(a1, a2, a3);
}

void glGenSamplers_Exec(uint64_t a1, int a2, int *a3)
{
  uint64_t v5;
  int v6;
  BOOL v7;
  int v8;
  char *SamplerHashObject;

  if (a2 < 0)
  {
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1281;
  }
  else
  {
    LODWORD(v5) = a2;
    os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    v6 = gleGenHashNames(*(_QWORD *)(a1 + 19296) + 232, v5);
    if (v6)
      v7 = (_DWORD)v5 == 0;
    else
      v7 = 1;
    if (!v7)
    {
      v8 = v6;
      v5 = v5;
      do
      {
        *a3++ = v8;
        SamplerHashObject = gleCreateSamplerHashObject(a1, v8);
        gleAddHashNameAndObject(a1, *(_QWORD *)(a1 + 19296) + 232, (uint64_t)SamplerHashObject);
        ++v8;
        --v5;
      }
      while (v5);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
}

void glDeleteSamplers_ExecThread(uint64_t a1, unsigned int a2, uint64_t a3)
{
  (*(void (**)(void))(a1 + 27752))();
  glDeleteSamplers_Exec(a1, a2, a3);
}

void glDeleteSamplers_Exec(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t i;
  uint64_t v10;

  if ((a2 & 0x80000000) != 0)
  {
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1281;
  }
  else
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (a2)
    {
      v6 = 0;
      v7 = a2;
      do
      {
        v8 = *(_DWORD *)(a3 + 4 * v6);
        if (v8)
        {
          for (i = 2992; i != 3024; ++i)
          {
            v10 = *(_QWORD *)(a1 + 8 * i);
            if (v10)
            {
              if (v8 == *(_DWORD *)(v10 + 16))
                gleBindSamplerObject(a1, i - 2992, 0);
            }
          }
          gleDeleteHashNameAndObject(*(_QWORD *)(a1 + 19296), (void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 19296) + 232), v8);
        }
        ++v6;
      }
      while (v6 != v7);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
}

BOOL glIsSampler_ExecThread(uint64_t a1, unsigned int a2)
{
  (*(void (**)(void))(a1 + 27752))();
  return glIsSampler_Exec(a1, a2);
}

BOOL glIsSampler_Exec(uint64_t a1, unsigned int a2)
{
  uint64_t *v4;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v4 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 232, a2);
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  return v4 != 0;
}

_DWORD *glBindSampler_PackThread(uint64_t a1, int a2, int a3)
{
  _DWORD *result;

  result = gleAddCommand(a1, (uint64_t)glBindSampler_UnpackThread, 8);
  *result = a2;
  result[1] = a3;
  return result;
}

uint64_t glBindSampler_UnpackThread(uint64_t a1, unsigned int *a2)
{
  glBindSampler_Exec(a1, *a2, a2[1]);
  return 8;
}

void glBindSampler_Exec(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if (*(unsigned __int16 *)(*(_QWORD *)(a1 + 29480) + 154) <= a2)
  {
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1281;
  }
  else
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    gleBindSamplerObject(a1, a2, a3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
}

void glSamplerParameteri_Exec(uint64_t a1, unsigned int a2, int a3, int a4)
{
  int v7;

  v7 = a4;
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  glSamplerParameterI_Exec(a1, a2, a3, &v7);
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
}

uint64_t *glSamplerParameterI_Exec(uint64_t a1, unsigned int a2, int a3, int *a4)
{
  uint64_t v7;
  uint64_t *result;
  int v9;
  char v10;
  __int16 v11;
  float v12;
  int v13;
  char v14;
  int v15;
  char v16;
  int v17;
  char v18;
  float v19;
  int v20;
  int v21;
  int v22;
  int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  int v32;
  int v33;
  int v34;

  v7 = a1 + 29832;
  result = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 232, a2);
  if (!result)
  {
    if (*(_WORD *)v7)
      return result;
    v11 = 1282;
    goto LABEL_24;
  }
  if (a3 > 33082)
  {
    if (a3 > 34891)
    {
      if (a3 == 34892)
      {
        v21 = *a4;
        if (!*a4 || v21 == 34894)
        {
          if (v21 == *((unsigned __int16 *)result + 95))
            return result;
          *((_WORD *)result + 95) = v21;
          goto LABEL_52;
        }
      }
      else if (a3 == 34893)
      {
        v22 = *a4;
        if ((*a4 & 0xFFFFFFF8) == 0x200)
        {
          if (v22 == *((unsigned __int16 *)result + 94))
            return result;
          *((_WORD *)result + 94) = v22;
          goto LABEL_52;
        }
      }
    }
    else
    {
      if (a3 == 33083)
      {
        v19 = (float)*a4;
        if (*((float *)result + 52) == v19)
          return result;
        *((float *)result + 52) = v19;
        goto LABEL_52;
      }
      if (a3 == 34046)
      {
        v20 = *a4;
        if (*a4 > 0)
        {
          if (*((float *)result + 50) == (float)v20)
            return result;
          *((float *)result + 50) = (float)v20;
          goto LABEL_52;
        }
        if (*(_WORD *)v7)
          return result;
        v11 = 1281;
LABEL_24:
        *(_WORD *)v7 = v11;
        return result;
      }
    }
LABEL_22:
    if (*(_WORD *)v7)
      return result;
    v11 = 1280;
    goto LABEL_24;
  }
  if (a3 > 32881)
  {
    if (a3 != 32882)
    {
      if (a3 == 33082)
      {
        v12 = (float)*a4;
        if (*((float *)result + 51) == v12)
          return result;
        *((float *)result + 51) = v12;
        goto LABEL_52;
      }
      goto LABEL_22;
    }
    v23 = *a4;
    if (*a4 == 10497)
      goto LABEL_49;
    if (v23 <= 34625)
    {
      if (v23 != 33071)
      {
        v34 = 33648;
LABEL_94:
        if (v23 != v34)
          goto LABEL_22;
LABEL_49:
        v24 = *((_BYTE *)result + 232) | 0x40;
LABEL_50:
        *((_BYTE *)result + 232) = v24;
        if (v23 == *((unsigned __int16 *)result + 98))
          return result;
        *((_WORD *)result + 98) = v23;
        goto LABEL_52;
      }
    }
    else
    {
      if ((v23 - 34626) < 2)
        goto LABEL_49;
      if (v23 != 37905)
      {
        v34 = 35090;
        goto LABEL_94;
      }
    }
    v24 = result[29] & 0xBF;
    goto LABEL_50;
  }
  switch(a3)
  {
    case 10240:
      v9 = *a4;
      if (*a4 == 9729)
        goto LABEL_6;
      if (v9 == 35416)
      {
        if ((*(_BYTE *)(*(_QWORD *)(a1 + 29480) + 579) & 1) == 0)
          goto LABEL_22;
LABEL_6:
        v10 = *((_BYTE *)result + 232) | 4;
      }
      else
      {
        if (v9 != 9728)
          goto LABEL_22;
        v10 = result[29] & 0xFB;
      }
      *((_BYTE *)result + 232) = v10;
      if (v9 == *((unsigned __int16 *)result + 93))
        return result;
      *((_WORD *)result + 93) = v9;
      break;
    case 10241:
      v13 = *a4;
      if ((*a4 - 9985) < 3)
      {
        v14 = *((_BYTE *)result + 232) | 0xA;
        goto LABEL_27;
      }
      if (v13 <= 9983)
      {
        if (v13 == 9728)
        {
          v14 = result[29] & 0xF5;
          goto LABEL_27;
        }
        if (v13 != 9729)
          goto LABEL_22;
        goto LABEL_110;
      }
      if (v13 == 35416)
      {
        if ((*(_BYTE *)(*(_QWORD *)(a1 + 29480) + 579) & 1) == 0)
          goto LABEL_22;
LABEL_110:
        v14 = result[29] & 0xF5 | 8;
        goto LABEL_27;
      }
      if (v13 != 9984)
        goto LABEL_22;
      v14 = result[29] & 0xF5 | 2;
LABEL_27:
      *((_BYTE *)result + 232) = v14;
      if (v13 == *((unsigned __int16 *)result + 92))
        return result;
      *((_WORD *)result + 92) = v13;
      break;
    case 10242:
      v15 = *a4;
      if (*a4 == 10497)
        goto LABEL_30;
      if (v15 <= 34625)
      {
        if (v15 != 33071)
        {
          v32 = 33648;
LABEL_86:
          if (v15 != v32)
            goto LABEL_22;
          goto LABEL_30;
        }
      }
      else
      {
        if ((v15 - 34626) < 2)
        {
LABEL_30:
          v16 = *((_BYTE *)result + 232) | 0x10;
          goto LABEL_31;
        }
        if (v15 != 37905)
        {
          v32 = 35090;
          goto LABEL_86;
        }
      }
      v16 = result[29] & 0xEF;
LABEL_31:
      *((_BYTE *)result + 232) = v16;
      if (v15 == *((unsigned __int16 *)result + 96))
        return result;
      *((_WORD *)result + 96) = v15;
      break;
    case 10243:
      v17 = *a4;
      if (*a4 == 10497)
        goto LABEL_34;
      if (v17 <= 34625)
      {
        if (v17 != 33071)
        {
          v33 = 33648;
LABEL_90:
          if (v17 != v33)
            goto LABEL_22;
          goto LABEL_34;
        }
      }
      else
      {
        if ((v17 - 34626) < 2)
        {
LABEL_34:
          v18 = *((_BYTE *)result + 232) | 0x20;
          goto LABEL_35;
        }
        if (v17 != 37905)
        {
          v33 = 35090;
          goto LABEL_90;
        }
      }
      v18 = result[29] & 0xDF;
LABEL_35:
      *((_BYTE *)result + 232) = v18;
      if (v17 == *((unsigned __int16 *)result + 97))
        return result;
      *((_WORD *)result + 97) = v17;
      break;
    default:
      goto LABEL_22;
  }
LABEL_52:
  v25 = 0;
  if (*(unsigned __int8 *)(a1 + 14996) <= 1u)
    v26 = 1;
  else
    v26 = *(unsigned __int8 *)(a1 + 14996);
  do
  {
    v27 = *(_QWORD *)(a1 + 8 * v25 + 14976);
    if (v27 != -1)
    {
      v28 = ~v27;
      do
      {
        v29 = __clz(__rbit64(v28));
        if (*(uint64_t **)(a1 + 23936 + 8 * ((16 * v25) | (v29 >> 2))) == result)
        {
          *(_DWORD *)(a1 + 1536) |= 1 << (v29 >> 2);
          *(_DWORD *)(a1 + 28652) = 0;
          *(_DWORD *)(a1 + 1548) |= 0x8000000u;
        }
        v28 &= ~(15 << (v29 & 0x3C));
      }
      while (v28);
    }
    ++v25;
  }
  while (v25 != v26);
  v30 = *(unsigned __int8 *)(v7 + 2664);
  if (*(_BYTE *)(v7 + 2664))
  {
    v31 = result + 17;
    do
    {
      *v31 |= 1u;
      v31 += 4;
      --v30;
    }
    while (v30);
  }
  return result;
}

void glSamplerParameteriv_Exec(uint64_t a1, unsigned int a2, int a3, int *a4)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  glSamplerParameterI_Exec(a1, a2, a3, a4);
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
}

void glSamplerParameterf_Exec(uint64_t a1, unsigned int a2, int a3, float a4)
{
  float v7;

  v7 = a4;
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  glSamplerParameterF_Exec(a1, a2, a3, &v7);
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
}

float *glSamplerParameterF_Exec(uint64_t a1, unsigned int a2, int a3, float *a4)
{
  uint64_t v8;
  float *result;
  __int16 v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  float v19;
  int v20;

  v8 = a1 + 29832;
  result = (float *)gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 232, a2);
  if (!result)
  {
    if (*(_WORD *)v8)
      return result;
    v10 = 1282;
    goto LABEL_15;
  }
  if (a3 <= 33082)
  {
    if (a3 == 4100)
    {
LABEL_13:
      if (*(_WORD *)v8)
        return result;
      v10 = 1280;
      goto LABEL_15;
    }
    if (a3 != 33082)
    {
LABEL_34:
      v19 = 0.5;
      if (*a4 < 0.0)
        v19 = -0.5;
      v20 = (int)(float)(*a4 + v19);
      return (float *)glSamplerParameterI_Exec(a1, a2, a3, &v20);
    }
    if (result[51] == *a4)
      return result;
    result[51] = *a4;
  }
  else
  {
    switch(a3)
    {
      case 33083:
        if (result[52] == *a4)
          return result;
        result[52] = *a4;
        break;
      case 34046:
        v11 = *a4;
        if (*a4 < 1.0)
        {
          if (*(_WORD *)v8)
            return result;
          v10 = 1281;
LABEL_15:
          *(_WORD *)v8 = v10;
          return result;
        }
        if (result[50] == v11)
          return result;
        result[50] = v11;
        break;
      case 34049:
        goto LABEL_13;
      default:
        goto LABEL_34;
    }
  }
  v12 = 0;
  if (*(unsigned __int8 *)(a1 + 14996) <= 1u)
    v13 = 1;
  else
    v13 = *(unsigned __int8 *)(a1 + 14996);
  do
  {
    v14 = *(_QWORD *)(a1 + 8 * v12 + 14976);
    if (v14 != -1)
    {
      v15 = ~v14;
      do
      {
        v16 = __clz(__rbit64(v15));
        if (*(float **)(a1 + 23936 + 8 * ((16 * v12) | (v16 >> 2))) == result)
        {
          *(_DWORD *)(a1 + 1536) |= 1 << (v16 >> 2);
          *(_DWORD *)(a1 + 28652) = 0;
          *(_DWORD *)(a1 + 1548) |= 0x8000000u;
        }
        v15 &= ~(15 << (v16 & 0x3C));
      }
      while (v15);
    }
    ++v12;
  }
  while (v12 != v13);
  v17 = *(unsigned __int8 *)(v8 + 2664);
  if (*(_BYTE *)(v8 + 2664))
  {
    v18 = result + 34;
    do
    {
      *v18 |= 1u;
      v18 += 4;
      --v17;
    }
    while (v17);
  }
  return result;
}

void glSamplerParameterfv_Exec(uint64_t a1, unsigned int a2, int a3, float *a4)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  glSamplerParameterF_Exec(a1, a2, a3, a4);
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
}

void glGetSamplerParameteriv_Exec(uint64_t a1, unsigned int a2, int a3, int *a4)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  glGetSamplerParameterIv_Exec(a1, a2, a3, a4);
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
}

uint64_t *glGetSamplerParameterIv_Exec(uint64_t a1, unsigned int a2, int a3, int *a4)
{
  uint64_t *result;
  int v8;
  float v9;
  __int16 *v10;
  __int16 v11;
  float v12;

  result = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 232, a2);
  if (result)
  {
    if (a3 > 33082)
    {
      if (a3 <= 34891)
      {
        if (a3 == 33083)
        {
          v9 = *((float *)result + 52);
          goto LABEL_24;
        }
        if (a3 == 34046)
        {
          v9 = *((float *)result + 50);
          goto LABEL_24;
        }
        goto LABEL_16;
      }
      if (a3 == 34892)
      {
        v8 = *((unsigned __int16 *)result + 95);
      }
      else
      {
        if (a3 != 34893)
        {
LABEL_16:
          v10 = (__int16 *)(a1 + 29832);
          if (*(_WORD *)(a1 + 29832))
            return result;
          v11 = 1280;
LABEL_18:
          *v10 = v11;
          return result;
        }
        v8 = *((unsigned __int16 *)result + 94);
      }
    }
    else
    {
      if (a3 <= 32881)
      {
        switch(a3)
        {
          case 10240:
            v8 = *((unsigned __int16 *)result + 93);
            goto LABEL_30;
          case 10241:
            v8 = *((unsigned __int16 *)result + 92);
            goto LABEL_30;
          case 10242:
            v8 = *((unsigned __int16 *)result + 96);
            goto LABEL_30;
          case 10243:
            v8 = *((unsigned __int16 *)result + 97);
            goto LABEL_30;
          default:
            goto LABEL_16;
        }
      }
      if (a3 != 32882)
      {
        if (a3 == 33082)
        {
          v9 = *((float *)result + 51);
LABEL_24:
          v12 = 0.5;
          if (v9 < 0.0)
            v12 = -0.5;
          v8 = (int)(float)(v9 + v12);
          goto LABEL_30;
        }
        goto LABEL_16;
      }
      v8 = *((unsigned __int16 *)result + 98);
    }
LABEL_30:
    *a4 = v8;
    return result;
  }
  v10 = (__int16 *)(a1 + 29832);
  if (!*(_WORD *)(a1 + 29832))
  {
    v11 = 1282;
    goto LABEL_18;
  }
  return result;
}

void glGetSamplerParameterfv_Exec(uint64_t a1, unsigned int a2, int a3, float *a4)
{
  float *v8;
  float v9;
  __int16 *v10;
  __int16 v11;
  int v12;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v8 = (float *)gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 232, a2);
  if (!v8)
  {
    v10 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832))
      goto LABEL_17;
    v11 = 1282;
    goto LABEL_12;
  }
  if (a3 <= 33082)
  {
    if (a3 == 4100)
      goto LABEL_10;
    if (a3 != 33082)
    {
LABEL_15:
      v12 = 0;
      glGetSamplerParameterIv_Exec(a1, a2, a3, &v12);
      v9 = (float)v12;
      goto LABEL_16;
    }
    v9 = v8[51];
LABEL_16:
    *a4 = v9;
    goto LABEL_17;
  }
  if (a3 == 33083)
  {
    v9 = v8[52];
    goto LABEL_16;
  }
  if (a3 == 34046)
  {
    v9 = v8[50];
    goto LABEL_16;
  }
  if (a3 != 34049)
    goto LABEL_15;
LABEL_10:
  v10 = (__int16 *)(a1 + 29832);
  if (!*(_WORD *)(a1 + 29832))
  {
    v11 = 1280;
LABEL_12:
    *v10 = v11;
  }
LABEL_17:
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
}

void *glSamplerParameteri_PackThread(uint64_t a1, int a2, int a3, int a4)
{
  _DWORD *v6;
  int SamplerParameterNumParams;
  int __src;

  __src = a4;
  v6 = gleAddCommand(a1, (uint64_t)glSamplerParameteri_UnpackThread, 24);
  *v6 = a2;
  v6[1] = a3;
  SamplerParameterNumParams = glGetSamplerParameterNumParams(a3, 0);
  return memcpy(v6 + 2, &__src, (4 * SamplerParameterNumParams));
}

uint64_t glSamplerParameteri_UnpackThread(uint64_t a1, uint64_t a2)
{
  glSamplerParameteri_Exec(a1, *(_DWORD *)a2, *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 8));
  return 24;
}

uint64_t glGetSamplerParameterNumParams(int a1, int a2)
{
  uint64_t result;
  int v4;

  result = 1;
  if (a1 <= 33081)
  {
    if ((a1 - 10240) < 4)
      return result;
    if (a1 == 4100)
      return 4;
    v4 = 32882;
    goto LABEL_12;
  }
  if (a1 <= 34048)
  {
    if ((a1 - 33082) < 2)
      return result;
    v4 = 34046;
    goto LABEL_12;
  }
  if ((a1 - 34892) >= 2 && a1 != 34049)
  {
    v4 = 35400;
LABEL_12:
    if (a1 != v4)
      return a2 != 0;
  }
  return result;
}

void *glSamplerParameteriv_PackThread(uint64_t a1, int a2, int a3, const void *a4)
{
  _DWORD *v7;
  size_t v8;

  v7 = gleAddCommand(a1, (uint64_t)glSamplerParameteriv_UnpackThread, 24);
  *v7 = a2;
  v7[1] = a3;
  v8 = 4 * glGetSamplerParameterNumParams(a3, 0);
  return memcpy(v7 + 2, a4, v8);
}

uint64_t glSamplerParameteriv_UnpackThread(uint64_t a1, uint64_t a2)
{
  glSamplerParameteriv_Exec(a1, *(_DWORD *)a2, *(_DWORD *)(a2 + 4), (int *)(a2 + 8));
  return 24;
}

void *glSamplerParameterf_PackThread(uint64_t a1, int a2, int a3, float a4)
{
  _DWORD *v6;
  int SamplerParameterNumParams;
  float __src;

  __src = a4;
  v6 = gleAddCommand(a1, (uint64_t)glSamplerParameterf_UnpackThread, 24);
  *v6 = a2;
  v6[1] = a3;
  SamplerParameterNumParams = glGetSamplerParameterNumParams(a3, 1);
  return memcpy(v6 + 2, &__src, (4 * SamplerParameterNumParams));
}

uint64_t glSamplerParameterf_UnpackThread(uint64_t a1, uint64_t a2)
{
  glSamplerParameterf_Exec(a1, *(_DWORD *)a2, *(_DWORD *)(a2 + 4), *(float *)(a2 + 8));
  return 24;
}

void *glSamplerParameterfv_PackThread(uint64_t a1, int a2, int a3, const void *a4)
{
  _DWORD *v7;
  size_t v8;

  v7 = gleAddCommand(a1, (uint64_t)glSamplerParameterfv_UnpackThread, 24);
  *v7 = a2;
  v7[1] = a3;
  v8 = 4 * glGetSamplerParameterNumParams(a3, 1);
  return memcpy(v7 + 2, a4, v8);
}

uint64_t glSamplerParameterfv_UnpackThread(uint64_t a1, uint64_t a2)
{
  glSamplerParameterfv_Exec(a1, *(_DWORD *)a2, *(_DWORD *)(a2 + 4), (float *)(a2 + 8));
  return 24;
}

void glGetSamplerParameteriv_ExecThread(uint64_t a1, unsigned int a2, int a3, int *a4)
{
  (*(void (**)(void))(a1 + 27752))();
  glGetSamplerParameteriv_Exec(a1, a2, a3, a4);
}

void glGetSamplerParameterfv_ExecThread(uint64_t a1, unsigned int a2, int a3, float *a4)
{
  (*(void (**)(void))(a1 + 27752))();
  glGetSamplerParameterfv_Exec(a1, a2, a3, a4);
}

uint64_t glScale_ListExec(uint64_t a1, float *a2)
{
  glScale_Exec(a1, *a2, a2[1], a2[2]);
  return 12;
}

uint64_t glScalex_Exec(uint64_t a1, int a2, int a3, int a4)
{
  return glScale_Exec(a1, (float)a2 * 0.000015259, (float)a3 * 0.000015259, (float)a4 * 0.000015259);
}

float32x2_t glScalex_PackThread(uint64_t a1, unsigned int a2, unsigned int a3, int a4)
{
  float32x2_t v4;
  float32_t v5;
  float32x2_t *v6;
  float32x2_t result;

  v4 = vcvt_f32_s32((int32x2_t)__PAIR64__(a3, a2));
  v5 = (float)a4 * 0.000015259;
  v6 = (float32x2_t *)gleAddCommand(a1, (uint64_t)glScale_ListExec, 12);
  result = vmul_f32(v4, (float32x2_t)vdup_n_s32(0x37800000u));
  *v6 = result;
  v6[1].f32[0] = v5;
  return result;
}

_DWORD *glScissor_Comp(uint64_t a1, int a2, int a3, int a4, int a5)
{
  _DWORD *result;

  result = gleAddCommand(a1, (uint64_t)glScissor_ListExec, 16);
  *result = a2;
  result[1] = a3;
  result[2] = a4;
  result[3] = a5;
  return result;
}

uint64_t glScissor_ListExec(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  glScissorArrayv_Core(a1, 0, 1, (uint64_t)&v3);
  return 16;
}

uint64_t glScissorArrayv_Core(uint64_t result, unsigned int a2, int a3, uint64_t a4)
{
  __int128 *v4;
  unsigned int v6;
  uint64_t v7;
  _WORD *v8;
  _DWORD *v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  _OWORD *v15;

  v4 = (__int128 *)a4;
  v6 = a2;
  v7 = result;
  if (a3 < 1)
  {
LABEL_6:
    if (a3 + a2 >= 2 && !*(_BYTE *)(result + 15580))
      result = gleSwitchToMultiViewportMode(result);
    if (a3 >= 1)
    {
      v11 = 0;
      v12 = v7 + 15560;
      v13 = a3;
      do
      {
        v14 = *v4;
        v15 = (_OWORD *)(v12 + 16 * v6);
        if (*(_DWORD *)v15 != *v4
          || *(_QWORD *)(v12 + 16 * v6 + 4) != *(_QWORD *)((char *)&v14 + 4)
          || *(_DWORD *)(v12 + 16 * v6 + 12) != HIDWORD(v14))
        {
          *v15 = v14;
          result = gleUpdateViewScissorDataIndexed(v7, v6);
          v11 = 1;
        }
        ++v4;
        ++v6;
        --v13;
      }
      while (v13);
      if (v11)
      {
        *(_DWORD *)(v7 + 28652) = 0;
        *(_DWORD *)(v7 + 29800) |= 0x4000000u;
      }
    }
  }
  else
  {
    v8 = (_WORD *)(result + 29832);
    v9 = (_DWORD *)(a4 + 12);
    v10 = a3;
    while ((*(v9 - 1) & 0x80000000) == 0 && (*v9 & 0x80000000) == 0)
    {
      v9 += 4;
      if (!--v10)
        goto LABEL_6;
    }
    if (!*v8)
      *v8 = 1281;
  }
  return result;
}

_QWORD *glShadeModel_Comp(uint64_t a1, int a2)
{
  _QWORD *result;

  result = gleAddCommand(a1, (uint64_t)glShadeModel_ListExec, 4);
  *(_DWORD *)result = a2;
  return result;
}

uint64_t glShadeModel_ListExec(uint64_t a1, int *a2)
{
  glShadeModel_Exec(a1, *a2);
  return 4;
}

void glUseProgramObjectARB_Exec(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  __int16 *v8;
  __int16 v9;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  if (!a2)
  {
    v7 = *(_QWORD *)(a1 + 26432);
    if (*(__int16 *)(v7 + 42) != -1 && !*(_BYTE *)(v7 + 41))
      goto LABEL_12;
    v5 = 0;
    goto LABEL_11;
  }
  v4 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, a2);
  if (v4)
  {
    v5 = v4;
    if (*((_DWORD *)v4 + 6) != 8
      || *((_BYTE *)v4 + 3976) != 1
      || (v6 = *(_QWORD *)(a1 + 26432), *(__int16 *)(v6 + 42) != -1) && !*(_BYTE *)(v6 + 41))
    {
LABEL_12:
      os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
      v8 = (__int16 *)(a1 + 29832);
      if (*(_WORD *)(a1 + 29832))
        return;
      v9 = 1282;
      goto LABEL_16;
    }
LABEL_11:
    gleUseProgramObject(a1, v5);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    return;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v8 = (__int16 *)(a1 + 29832);
  if (*(_WORD *)(a1 + 29832))
    return;
  v9 = 1281;
LABEL_16:
  *v8 = v9;
}

_QWORD *glUseProgramObjectARB_Comp(uint64_t a1, uint64_t a2)
{
  _QWORD *result;

  result = gleAddCommand(a1, (uint64_t)glUseProgramObjectARB_ListExec, 8);
  *result = a2;
  return result;
}

uint64_t glUseProgramObjectARB_ListExec(uint64_t a1, uint64_t *a2)
{
  glUseProgramObjectARB_Exec(a1, *a2);
  return 8;
}

uint64_t glCreateShaderObjectARB_Exec(uint64_t a1, int a2)
{
  uint64_t v4;
  BOOL v5;
  int v6;
  uint64_t ShaderObject;

  v4 = 0;
  v5 = 0;
  do
  {
    while (v5)
    {
      ++v4;
      v5 = 1;
      if (v4 == 5)
        goto LABEL_7;
    }
    v6 = gle_shader_targets[v4];
    v5 = v6 == a2;
    ++v4;
  }
  while (v4 != 5);
  if (v6 == a2)
  {
LABEL_7:
    os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    ShaderObject = gleCreateShaderObject(a1, a2);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    return ShaderObject;
  }
  ShaderObject = 0;
  if (!*(_WORD *)(a1 + 29832))
    *(_WORD *)(a1 + 29832) = 1280;
  return ShaderObject;
}

uint64_t glCreateProgramObjectARB_Exec(uint64_t a1)
{
  uint64_t ProgramObject;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  ProgramObject = gleCreateProgramObject(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  return ProgramObject;
}

void glDeleteObjectARB_Exec(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t *v4;
  int v5;
  void (*v6)(uint64_t, uint64_t);
  __int16 *v7;
  __int16 v8;
  int v9;

  if (a2)
  {
    v2 = a2;
    os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    v4 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, v2);
    if (!v4)
    {
      os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
      v7 = (__int16 *)(a1 + 29832);
      if (*(_WORD *)(a1 + 29832))
        return;
      v8 = 1281;
      goto LABEL_12;
    }
    if (*((_DWORD *)v4 + 6) == 8)
    {
      if (!*((_BYTE *)v4 + 3979))
      {
        v5 = *((_DWORD *)v4 + 5) - 1;
        *((_DWORD *)v4 + 5) = v5;
        if (v5 != 1)
        {
          *((_BYTE *)v4 + 3979) = 1;
          goto LABEL_19;
        }
        v6 = (void (*)(uint64_t, uint64_t))gleUnbindProgramObject;
LABEL_16:
        gleUnbindDeleteHashNameAndObject(a1, (void (**)(_QWORD, uint64_t))(*(_QWORD *)(a1 + 19296) + 168), v6, v2);
LABEL_19:
        os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
        return;
      }
    }
    else if (!*((_BYTE *)v4 + 64))
    {
      v9 = *((_DWORD *)v4 + 5) - 1;
      *((_DWORD *)v4 + 5) = v9;
      if (v9 != 1)
      {
        *((_BYTE *)v4 + 64) = 1;
        goto LABEL_19;
      }
      v6 = (void (*)(uint64_t, uint64_t))gleUnbindShaderObject;
      goto LABEL_16;
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    v7 = (__int16 *)(a1 + 29832);
    if (!*(_WORD *)(a1 + 29832))
    {
      v8 = 1282;
LABEL_12:
      *v7 = v8;
    }
  }
}

void glAttachObjectARB_Exec(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t *v6;
  uint64_t *v7;
  os_unfair_lock_s *v8;
  uint64_t *v9;
  uint64_t *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  __int16 *v19;
  __int16 v20;
  void *v21;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v6 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, a2);
  if (!v6)
    goto LABEL_15;
  v7 = v6;
  v8 = *(os_unfair_lock_s **)(a1 + 19296);
  if (*((_DWORD *)v6 + 6) != 8)
  {
LABEL_18:
    os_unfair_lock_unlock(v8 + 81);
    v19 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832))
      return;
    v20 = 1282;
    goto LABEL_20;
  }
  v9 = gleLookupHashObject((uint64_t)&v8[42], a3);
  if (!v9)
  {
LABEL_15:
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    v19 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832))
      return;
    v20 = 1281;
LABEL_20:
    *v19 = v20;
    return;
  }
  v10 = v9;
  if (*((_DWORD *)v9 + 6) != 7)
  {
LABEL_17:
    v8 = *(os_unfair_lock_s **)(a1 + 19296);
    goto LABEL_18;
  }
  v11 = *((_DWORD *)v7 + 982);
  if (v11 >= 1)
  {
    v12 = v7[20];
    v13 = *((unsigned int *)v7 + 982);
    while (*(uint64_t **)v12 != v9 && *(_DWORD *)(*(_QWORD *)v12 + 68) != *((_DWORD *)v9 + 17))
    {
      v12 += 8;
      if (!--v13)
        goto LABEL_10;
    }
    goto LABEL_17;
  }
LABEL_10:
  v14 = malloc_type_malloc(8 * (v11 + 1), 0x577B5147uLL);
  if (!v14)
    abort();
  v15 = v14;
  v16 = *((unsigned int *)v7 + 982);
  if ((int)v16 < 1)
  {
    v18 = 0;
  }
  else
  {
    for (i = 0; i != v16; ++i)
      v14[i] = *(_QWORD *)(v7[20] + i * 8);
    v18 = v16;
  }
  v14[v18] = v10;
  *((_DWORD *)v7 + 982) = v16 + 1;
  v21 = (void *)v7[20];
  if (v21)
    free(v21);
  v7[20] = (uint64_t)v15;
  ++*((_DWORD *)v10 + 5);
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
}

void glDetachObjectARB_Exec(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t *v6;
  uint64_t *v7;
  os_unfair_lock_s *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  __int16 *v15;
  __int16 v16;
  int v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  void *v24;
  int v25;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v6 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, a2);
  if (!v6)
    goto LABEL_15;
  v7 = v6;
  v8 = *(os_unfair_lock_s **)(a1 + 19296);
  if (*((_DWORD *)v6 + 6) != 8)
  {
LABEL_13:
    os_unfair_lock_unlock(v8 + 81);
    v15 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832))
      return;
    v16 = 1282;
LABEL_17:
    *v15 = v16;
    return;
  }
  v9 = gleLookupHashObject((uint64_t)&v8[42], a3);
  if (!v9)
  {
LABEL_15:
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    v15 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832))
      return;
    v16 = 1281;
    goto LABEL_17;
  }
  v10 = *((unsigned int *)v7 + 982);
  if ((int)v10 < 1)
    goto LABEL_12;
  v11 = v9;
  v12 = 0;
  do
    v13 = *(uint64_t **)(v7[20] + 8 * v12++);
  while (v9 != v13 && v12 < v10);
  if (v9 != v13)
  {
LABEL_12:
    v8 = *(os_unfair_lock_s **)(a1 + 19296);
    goto LABEL_13;
  }
  v17 = v10 - 1;
  if (v17)
  {
    v18 = malloc_type_malloc(8 * v17, 0x577B5147uLL);
    if (!v18)
      abort();
    v19 = v18;
    v20 = *((unsigned int *)v7 + 982);
    if ((int)v20 >= 1)
    {
      v21 = 0;
      v22 = 0;
      do
      {
        v23 = *(uint64_t **)(v7[20] + v21);
        if (v11 != v23)
          v18[v22++] = v23;
        v21 += 8;
      }
      while (8 * v20 != v21);
    }
  }
  else
  {
    v19 = 0;
    LODWORD(v20) = 1;
  }
  *((_DWORD *)v7 + 982) = v20 - 1;
  v24 = (void *)v7[20];
  if (v24)
    free(v24);
  v7[20] = (uint64_t)v19;
  v25 = *((_DWORD *)v11 + 5) - 1;
  *((_DWORD *)v11 + 5) = v25;
  if (v25 == 1)
    gleUnbindDeleteHashNameAndObject(a1, (void (**)(_QWORD, uint64_t))(*(_QWORD *)(a1 + 19296) + 168), (void (*)(uint64_t, uint64_t))gleUnbindShaderObject, a3);
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
}

void glShaderSourceARB_Exec(uint64_t a1, unsigned int a2, int a3, const void **a4, int *a5)
{
  uint64_t v8;
  uint64_t *v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  int *v14;
  const char **v15;
  int v16;
  _BYTE *v17;
  _BYTE *v18;
  unsigned int *v19;
  _BYTE *v20;
  size_t v21;
  uint64_t v22;
  __int16 *v23;
  __int16 v24;
  void *v25;

  if (a3 <= 0)
    goto LABEL_25;
  LODWORD(v8) = a3;
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v10 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, a2);
  if (!v10)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
LABEL_25:
    v23 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832))
      return;
    v24 = 1281;
LABEL_29:
    *v23 = v24;
    return;
  }
  v11 = v10;
  if (*((_DWORD *)v10 + 6) != 7)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    v23 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832))
      return;
    v24 = 1282;
    goto LABEL_29;
  }
  v12 = 0;
  v13 = v8;
  v8 = v8;
  v14 = a5;
  v15 = (const char **)a4;
  do
  {
    if (!a5 || (v16 = *v14, *v14 < 0))
      v16 = strlen(*v15);
    v12 += v16;
    ++v15;
    ++v14;
    --v8;
  }
  while (v8);
  v17 = malloc_type_malloc(v12 + 2, 0x577B5147uLL);
  if (!v17)
    abort();
  v18 = v17;
  v19 = (unsigned int *)a5;
  v20 = v17;
  do
  {
    if (!a5 || (v21 = *v19, (v21 & 0x80000000) != 0))
    {
      v20 = (_BYTE *)__stpcpy_chk();
    }
    else
    {
      memcpy(v20, *a4, v21);
      v20 += (int)*v19;
    }
    ++a4;
    ++v19;
    --v13;
  }
  while (v13);
  v22 = 0;
  *v20 = 0;
  while (1)
  {
    while (v18[v22] == 13)
    {
      if (v18[v22 + 1] == 10)
        v18[v22] = 32;
      else
        v18[v22] = 10;
      ++v22;
    }
    if (!v18[v22])
      break;
    ++v22;
  }
  if (v18[(int)v22 - 1] != 10)
  {
    v18[v22] = 10;
    v18[(v22 + 1)] = 0;
    ++v12;
  }
  v25 = (void *)v11[6];
  if (v25)
    free(v25);
  *((_BYTE *)v11 + 65) = 1;
  *((_DWORD *)v11 + 15) = v12;
  v11[6] = (uint64_t)v18;
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
}

void glCompileShaderARB_Exec(size_t a1, unsigned int a2)
{
  glCompileShaderIncludeARB_Exec(a1, a2, 0, 0, 0);
}

void glLinkProgramARB_Exec(uint64_t a1, unsigned int a2)
{
  uint64_t *v4;
  __int16 *v5;
  __int16 v6;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v4 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, a2);
  if (!v4)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    v5 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832))
      return;
    v6 = 1281;
    goto LABEL_8;
  }
  if (*((_DWORD *)v4 + 6) == 8 && !*((_DWORD *)v4 + 993))
  {
    gleLinkProgram(a1, (uint64_t)(v4 + 5));
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    return;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v5 = (__int16 *)(a1 + 29832);
  if (!*(_WORD *)(a1 + 29832))
  {
    v6 = 1282;
LABEL_8:
    *v5 = v6;
  }
}

void glValidateProgramARB_Exec(unint64_t a1, unsigned int a2)
{
  unint64_t v4;
  uint64_t *v5;
  __n128 v6;
  double v7;
  double v8;
  uint64_t *v9;
  void *v10;
  uint64_t *v11;
  int v12;
  int v13;
  __int16 v14;
  int v15;
  const char *v16;
  int v17;

  v4 = a1 + 29832;
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v5 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, a2);
  if (!v5)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (*(_WORD *)v4)
      return;
    v14 = 1281;
    goto LABEL_20;
  }
  v9 = v5;
  if (*((_DWORD *)v5 + 6) == 8)
  {
    if ((*(_WORD *)(a1 + 32493) & 0x40) != 0)
    {
      *((_BYTE *)v5 + 3977) = 1;
    }
    else
    {
      v10 = (void *)v5[17];
      if (v10)
        free(v10);
      v9[17] = 0;
      *((_DWORD *)v9 + 981) = 0;
      if (*((_BYTE *)v9 + 3976))
      {
        v11 = *(uint64_t **)(a1 + 24768);
        if (v9 != v11)
        {
          if (v11)
            ++*((_DWORD *)v11 + 5);
          gleUseProgramObject(a1, v9);
        }
        v12 = *(unsigned __int8 *)(a1 + 32501);
        if ((*(_BYTE *)(a1 + 28655) & 8) != 0 && *(char *)(a1 + 28681) < 0 && *(char *)(a1 + 28683) < 0)
        {
          v15 = 0;
        }
        else
        {
          if ((v12 - 3) >= 2)
          {
            if (v12 == 1)
              v13 = gleDoSelectiveDispatchNoErrorCoreGL3(a1, 0x8000000u, 0x80u, 0x80u, 0xF8000000, v6.n128_f64[0], v7, v8);
            else
              v13 = gleDoSelectiveDispatchNoErrorCore(a1, 0x8000000u, 0x80u, 0x80u, 0xF8000000, v6, v7, v8);
          }
          else
          {
            v13 = gleDoSelectiveDispatchNoErrorCoreES2(a1, 0x8000000u, 0x80u, 0x80u, 0xF8000000, v6.n128_f64[0], v7, v8);
          }
          v15 = v13;
        }
        if (*(_BYTE *)(v4 + 2650))
        {
          gleAppendStringToInfoLog("Validation Failed: Fragment program failed to compile with current context state.\n", (const void **)v9 + 17, (_DWORD *)v9 + 981);
          *(_BYTE *)(v4 + 2652) = 0;
        }
        if (!*(_BYTE *)(v4 + 2649) && *(_BYTE *)(*(_QWORD *)(a1 + 29032) + 101))
        {
          gleAppendStringToInfoLog("Validation Failed: Vertex program failed to compile with current context state.\n", (const void **)v9 + 17, (_DWORD *)v9 + 981);
          *(_BYTE *)(v4 + 2652) = 0;
        }
        if (*(_BYTE *)(v4 + 2654) && (*(_QWORD *)(a1 + 29008) || *(_QWORD *)(a1 + 28960)))
        {
          if (*(_BYTE *)(v4 + 2652) && !v15)
          {
            *((_BYTE *)v9 + 3977) = 1;
            goto LABEL_41;
          }
          *((_BYTE *)v9 + 3977) = 0;
          if (*((_BYTE *)v9 + 3978))
          {
            if (*((_DWORD *)v9 + 936))
            {
              v16 = "Validation Failed: Bindable Uniform error:\n  Incomplete bindable uniform buffers.\n";
            }
            else
            {
              v17 = *((_DWORD *)v9 + 930);
              if ((v17 & 1) != 0)
              {
                if ((v17 & 0x10) != 0 || *(_BYTE *)(a1 + 17984))
                {
                  if (!v15)
                  {
LABEL_41:
                    if (v9 != v11)
                    {
                      gleUseProgramObject(a1, v11);
                      if (v11)
                        --*((_DWORD *)v11 + 5);
                    }
                    goto LABEL_44;
                  }
                  v16 = "Validation Failed\n";
                }
                else
                {
                  v16 = "Validation Failed: Program does not contain fragment shader. Results will be undefined.\n";
                }
              }
              else
              {
                v16 = "Validation Failed: Program does not contain vertex shader. Results will be undefined.\n";
              }
            }
          }
          else
          {
            v16 = "Validation Failed: Sampler error:\n"
                  "  Samplers of different types use the same texture image unit.\n"
                  "   - or -\n"
                  "  A sampler's texture unit is out of range (greater than max allowed or negative).\n";
          }
        }
        else
        {
          *((_BYTE *)v9 + 3977) = 0;
          v16 = "Validation Failed: Current draw framebuffer is invalid.\n";
        }
        gleAppendStringToInfoLog(v16, (const void **)v9 + 17, (_DWORD *)v9 + 981);
        goto LABEL_41;
      }
      *((_BYTE *)v9 + 3977) = 0;
      gleAppendStringToInfoLog("Validation Failed: Link error:\n  Program is not successfully linked.\n", (const void **)v9 + 17, (_DWORD *)v9 + 981);
    }
LABEL_44:
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    return;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  if (!*(_WORD *)v4)
  {
    v14 = 1282;
LABEL_20:
    *(_WORD *)v4 = v14;
  }
}

void glProgramParameteriEXT_Exec(uint64_t a1, unsigned int a2, int a3, int a4)
{
  uint64_t *v8;
  __int16 *v9;
  __int16 v10;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v8 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, a2);
  if (!v8)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    v9 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832))
      return;
    v10 = 1281;
LABEL_10:
    *v9 = v10;
    return;
  }
  if (*((_DWORD *)v8 + 6) != 8)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    v9 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832))
      return;
    v10 = 1282;
    goto LABEL_10;
  }
  if (a3 == 33367)
  {
    *((_BYTE *)v8 + 3982) = a4 != 0;
  }
  else if (a3 == 33368)
  {
    *((_BYTE *)v8 + 3980) = a4 != 0;
  }
  else if (!*(_WORD *)(a1 + 29832))
  {
    *(_WORD *)(a1 + 29832) = 1280;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
}

void glGetShaderiv_Exec(uint64_t a1, unsigned int a2, int a3, _DWORD *a4)
{
  uint64_t *v8;
  int v9;
  int ObjectParameter;
  __int16 *v11;
  __int16 v12;
  int v13;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v8 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, a2);
  if (!v8)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    v11 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832))
      return;
    v12 = 1281;
LABEL_13:
    *v11 = v12;
    return;
  }
  if (*((_DWORD *)v8 + 6) != 7)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    v11 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832))
      return;
    v12 = 1282;
    goto LABEL_13;
  }
  v13 = 0;
  if (a3 == 35662)
    v9 = 35663;
  else
    v9 = a3;
  ObjectParameter = gleGetObjectParameter(a1, (uint64_t)v8, v9, &v13);
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  if (ObjectParameter)
  {
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = ObjectParameter;
  }
  else
  {
    *a4 = v13;
  }
}

void glGetProgramiv_Exec(uint64_t a1, unsigned int a2, int a3, _DWORD *a4)
{
  uint64_t *v8;
  int ObjectParameter;
  __int16 *v10;
  __int16 v11;
  int v12;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v8 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, a2);
  if (!v8)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    v10 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832))
      return;
    v11 = 1281;
LABEL_10:
    *v10 = v11;
    return;
  }
  if (*((_DWORD *)v8 + 6) != 8)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    v10 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832))
      return;
    v11 = 1282;
    goto LABEL_10;
  }
  v12 = 0;
  ObjectParameter = gleGetObjectParameter(a1, (uint64_t)v8, a3, &v12);
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  if (ObjectParameter)
  {
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = ObjectParameter;
  }
  else
  {
    *a4 = v12;
  }
}

void glGetShaderInfoLog_Exec(uint64_t a1, unsigned int a2, int a3, _DWORD *a4, void *a5)
{
  uint64_t *v10;
  __int16 *v11;
  __int16 v12;

  if (a3 < 0)
    goto LABEL_6;
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v10 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, a2);
  if (!v10)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
LABEL_6:
    v11 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832))
      return;
    v12 = 1281;
    goto LABEL_10;
  }
  if (*((_DWORD *)v10 + 6) == 7)
  {
    gleGetString((const void *)v10[5], *((_DWORD *)v10 + 14), a3, a4, a5);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    return;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v11 = (__int16 *)(a1 + 29832);
  if (!*(_WORD *)(a1 + 29832))
  {
    v12 = 1282;
LABEL_10:
    *v11 = v12;
  }
}

void glGetProgramInfoLog_Exec(uint64_t a1, unsigned int a2, int a3, _DWORD *a4, void *a5)
{
  uint64_t *v10;
  __int16 *v11;
  __int16 v12;

  if (a3 < 0)
    goto LABEL_6;
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v10 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, a2);
  if (!v10)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
LABEL_6:
    v11 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832))
      return;
    v12 = 1281;
    goto LABEL_10;
  }
  if (*((_DWORD *)v10 + 6) == 8)
  {
    gleGetString((const void *)v10[17], *((_DWORD *)v10 + 981), a3, a4, a5);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    return;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v11 = (__int16 *)(a1 + 29832);
  if (!*(_WORD *)(a1 + 29832))
  {
    v12 = 1282;
LABEL_10:
    *v11 = v12;
  }
}

BOOL glIsShader_Exec(uint64_t a1, unsigned int a2)
{
  uint64_t *v4;
  _BOOL8 v5;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v4 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, a2);
  if (v4)
    v5 = *((_DWORD *)v4 + 6) == 7;
  else
    v5 = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  return v5;
}

BOOL glIsProgram_Exec(uint64_t a1, unsigned int a2)
{
  uint64_t *v4;
  _BOOL8 v5;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v4 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, a2);
  if (v4)
    v5 = *((_DWORD *)v4 + 6) == 8;
  else
    v5 = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  return v5;
}

void glGetAttachedShaders_Exec(uint64_t a1, unsigned int a2, unsigned int a3, _DWORD *a4, uint64_t a5)
{
  uint64_t *v10;
  unint64_t v11;
  __int16 *v12;
  __int16 v13;

  if ((a3 & 0x80000000) != 0)
    goto LABEL_13;
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v10 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, a2);
  if (!v10)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
LABEL_13:
    v12 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832))
      return;
    v13 = 1281;
LABEL_17:
    *v12 = v13;
    return;
  }
  if (*((_DWORD *)v10 + 6) != 8)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    v12 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832))
      return;
    v13 = 1282;
    goto LABEL_17;
  }
  LODWORD(v11) = 0;
  if (a3 && *((int *)v10 + 982) >= 1)
  {
    v11 = 0;
    do
    {
      *(_DWORD *)(a5 + 4 * v11) = *(_DWORD *)(*(_QWORD *)(v10[20] + 8 * v11) + 16);
      ++v11;
    }
    while (v11 < a3 && (uint64_t)v11 < *((int *)v10 + 982));
  }
  if (a4)
    *a4 = v11;
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
}

void glGetShaderSourceARB_Exec(uint64_t a1, unsigned int a2, int a3, _DWORD *a4, void *a5)
{
  uint64_t *v10;
  __int16 *v11;
  __int16 v12;

  if (a3 < 0)
    goto LABEL_6;
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v10 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, a2);
  if (!v10)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
LABEL_6:
    v11 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832))
      return;
    v12 = 1281;
    goto LABEL_10;
  }
  if (*((_DWORD *)v10 + 6) == 7)
  {
    gleGetString((const void *)v10[6], *((_DWORD *)v10 + 15), a3, a4, a5);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    return;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v11 = (__int16 *)(a1 + 29832);
  if (!*(_WORD *)(a1 + 29832))
  {
    v12 = 1282;
LABEL_10:
    *v11 = v12;
  }
}

void glBindAttribLocationARB_Exec(uint64_t a1, unsigned int a2, unsigned int a3, _BYTE *a4)
{
  uint64_t *v6;
  __int16 *v7;
  __int16 v8;

  if (!a4 || *a4 != 103 || a4[1] != 108 || a4[2] != 95)
  {
    if (a3 < 0x10)
    {
      os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
      v6 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, a2);
      if (v6)
      {
        if (*((_DWORD *)v6 + 6) == 8)
        {
          ShAttributeBindingRequest();
          os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
          return;
        }
        os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
        goto LABEL_13;
      }
      os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    }
    v7 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832))
      return;
    v8 = 1281;
    goto LABEL_15;
  }
LABEL_13:
  v7 = (__int16 *)(a1 + 29832);
  if (*(_WORD *)(a1 + 29832))
    return;
  v8 = 1282;
LABEL_15:
  *v7 = v8;
}

uint64_t glGetAttribLocationARB_Exec(uint64_t a1, unsigned int a2)
{
  uint64_t *v4;
  uint64_t AttribLocation;
  __int16 *v7;
  __int16 v8;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v4 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, a2);
  if (v4)
  {
    if (*((_DWORD *)v4 + 6) == 8 && *((_BYTE *)v4 + 3976) == 1)
    {
      AttribLocation = ShGetAttribLocation();
      os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
      return AttribLocation;
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    v7 = (__int16 *)(a1 + 29832);
    if (!*(_WORD *)(a1 + 29832))
    {
      v8 = 1282;
LABEL_9:
      *v7 = v8;
    }
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    v7 = (__int16 *)(a1 + 29832);
    if (!*(_WORD *)(a1 + 29832))
    {
      v8 = 1281;
      goto LABEL_9;
    }
  }
  return 0xFFFFFFFFLL;
}

void glGetActiveAttribARB_Exec(uint64_t a1, unsigned int a2, unsigned int a3, int a4)
{
  uint64_t *v7;
  int ActiveAttrib;
  __int16 *v9;
  __int16 v10;

  if (a4 < 0)
    goto LABEL_8;
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v7 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, a2);
  if (!v7)
  {
LABEL_7:
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
LABEL_8:
    v9 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832))
      return;
    v10 = 1281;
    goto LABEL_13;
  }
  if (*((_DWORD *)v7 + 6) == 8)
  {
    if (*((_DWORD *)v7 + 983) > a3)
    {
      ActiveAttrib = ShGetActiveAttrib();
      os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
      if (ActiveAttrib)
        return;
      goto LABEL_11;
    }
    goto LABEL_7;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
LABEL_11:
  v9 = (__int16 *)(a1 + 29832);
  if (*(_WORD *)(a1 + 29832))
    return;
  v10 = 1282;
LABEL_13:
  *v9 = v10;
}

uint64_t glGetFragDataLocationEXT_Exec(uint64_t a1, unsigned int a2)
{
  uint64_t *v4;
  uint64_t FragDataLocation;
  __int16 *v7;
  __int16 v8;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v4 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, a2);
  if (v4)
  {
    if (*((_DWORD *)v4 + 6) == 8 && *((_BYTE *)v4 + 3976) == 1)
    {
      FragDataLocation = ShGetFragDataLocation();
      os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
      return FragDataLocation;
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    v7 = (__int16 *)(a1 + 29832);
    if (!*(_WORD *)(a1 + 29832))
    {
      v8 = 1282;
LABEL_9:
      *v7 = v8;
    }
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    v7 = (__int16 *)(a1 + 29832);
    if (!*(_WORD *)(a1 + 29832))
    {
      v8 = 1281;
      goto LABEL_9;
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t glCreateShaderObjectARB_ExecThread(uint64_t a1, int a2)
{
  (*(void (**)(void))(a1 + 27752))();
  return glCreateShaderObjectARB_Exec(a1, a2);
}

uint64_t glCreateProgramObjectARB_ExecThread(uint64_t a1)
{
  (*(void (**)(void))(a1 + 27752))();
  return glCreateProgramObjectARB_Exec(a1);
}

void glDeleteObjectARB_ExecThread(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(a1 + 27752))();
  glDeleteObjectARB_Exec(a1, a2);
}

_QWORD *glAttachObjectARB_PackThread(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  result = gleAddCommand(a1, (uint64_t)glAttachObjectARB_UnpackThread, 16);
  *result = a2;
  result[1] = a3;
  return result;
}

uint64_t glAttachObjectARB_UnpackThread(uint64_t a1, _QWORD *a2)
{
  glAttachObjectARB_Exec(a1, *a2, a2[1]);
  return 16;
}

_QWORD *glDetachObjectARB_PackThread(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  result = gleAddCommand(a1, (uint64_t)glDetachObjectARB_UnpackThread, 16);
  *result = a2;
  result[1] = a3;
  return result;
}

uint64_t glDetachObjectARB_UnpackThread(uint64_t a1, _QWORD *a2)
{
  glDetachObjectARB_Exec(a1, *a2, a2[1]);
  return 16;
}

void glShaderSourceARB_ExecThread(uint64_t a1, unsigned int a2, int a3, const void **a4, int *a5)
{
  (*(void (**)(void))(a1 + 27752))();
  glShaderSourceARB_Exec(a1, a2, a3, a4, a5);
}

_QWORD *glCompileShaderARB_PackThread(uint64_t a1, uint64_t a2)
{
  _QWORD *result;

  result = gleAddCommand(a1, (uint64_t)glCompileShaderARB_UnpackThread, 8);
  *result = a2;
  return result;
}

uint64_t glCompileShaderARB_UnpackThread(size_t a1, unsigned int *a2)
{
  glCompileShaderIncludeARB_Exec(a1, *a2, 0, 0, 0);
  return 8;
}

_QWORD *glLinkProgramARB_PackThread(uint64_t a1, uint64_t a2)
{
  _QWORD *result;

  result = gleAddCommand(a1, (uint64_t)glLinkProgramARB_UnpackThread, 8);
  *result = a2;
  return result;
}

uint64_t glLinkProgramARB_UnpackThread(uint64_t a1, _QWORD *a2)
{
  glLinkProgramARB_Exec(a1, *a2);
  return 8;
}

_QWORD *glValidateProgramARB_PackThread(uint64_t a1, uint64_t a2)
{
  _QWORD *result;

  result = gleAddCommand(a1, (uint64_t)glValidateProgramARB_UnpackThread, 8);
  *result = a2;
  return result;
}

uint64_t glValidateProgramARB_UnpackThread(unint64_t a1, _QWORD *a2)
{
  glValidateProgramARB_Exec(a1, *a2);
  return 8;
}

_DWORD *glProgramParameteriEXT_PackThread(uint64_t a1, int a2, int a3, int a4)
{
  _DWORD *result;

  result = gleAddCommand(a1, (uint64_t)glProgramParameteriEXT_UnpackThread, 12);
  *result = a2;
  result[1] = a3;
  result[2] = a4;
  return result;
}

uint64_t glProgramParameteriEXT_UnpackThread(uint64_t a1, uint64_t a2)
{
  glProgramParameteriEXT_Exec(a1, *(_DWORD *)a2, *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 8));
  return 12;
}

BOOL glIsShader_ExecThread(uint64_t a1, unsigned int a2)
{
  (*(void (**)(void))(a1 + 27752))();
  return glIsShader_Exec(a1, a2);
}

BOOL glIsProgram_ExecThread(uint64_t a1, unsigned int a2)
{
  (*(void (**)(void))(a1 + 27752))();
  return glIsProgram_Exec(a1, a2);
}

void glGetShaderiv_ExecThread(uint64_t a1, unsigned int a2, int a3, _DWORD *a4)
{
  (*(void (**)(void))(a1 + 27752))();
  glGetShaderiv_Exec(a1, a2, a3, a4);
}

void glGetProgramiv_ExecThread(uint64_t a1, unsigned int a2, int a3, _DWORD *a4)
{
  (*(void (**)(void))(a1 + 27752))();
  glGetProgramiv_Exec(a1, a2, a3, a4);
}

void glGetShaderInfoLog_ExecThread(uint64_t a1, unsigned int a2, int a3, _DWORD *a4, void *a5)
{
  (*(void (**)(void))(a1 + 27752))();
  glGetShaderInfoLog_Exec(a1, a2, a3, a4, a5);
}

void glGetProgramInfoLog_ExecThread(uint64_t a1, unsigned int a2, int a3, _DWORD *a4, void *a5)
{
  (*(void (**)(void))(a1 + 27752))();
  glGetProgramInfoLog_Exec(a1, a2, a3, a4, a5);
}

void glGetAttachedShaders_ExecThread(uint64_t a1, unsigned int a2, unsigned int a3, _DWORD *a4, uint64_t a5)
{
  (*(void (**)(void))(a1 + 27752))();
  glGetAttachedShaders_Exec(a1, a2, a3, a4, a5);
}

void glGetShaderSourceARB_ExecThread(uint64_t a1, unsigned int a2, int a3, _DWORD *a4, void *a5)
{
  (*(void (**)(void))(a1 + 27752))();
  glGetShaderSourceARB_Exec(a1, a2, a3, a4, a5);
}

void glBindAttribLocationARB_PackThread(uint64_t a1, uint64_t a2, unsigned int a3, char *__s)
{
  uint64_t v8;
  _QWORD *v9;

  v8 = strlen(__s) + 25;
  v9 = gleAddLargeCommand(a1, (uint64_t)glBindAttribLocationARB_UnpackThread, v8);
  if (v9)
  {
    *v9 = a2;
    *((_DWORD *)v9 + 2) = a3;
    v9[2] = v8;
    strcpy((char *)v9 + 24, __s);
  }
  else
  {
    (*(void (**)(uint64_t))(a1 + 27752))(a1);
    glBindAttribLocationARB_Exec(a1, a2, a3, __s);
  }
}

uint64_t glBindAttribLocationARB_UnpackThread(uint64_t a1, uint64_t a2)
{
  glBindAttribLocationARB_Exec(a1, *(_QWORD *)a2, *(_DWORD *)(a2 + 8), (_BYTE *)(a2 + 24));
  return *(unsigned int *)(a2 + 16);
}

void glGetActiveAttribARB_ExecThread(uint64_t a1, unsigned int a2, unsigned int a3, int a4)
{
  (*(void (**)(void))(a1 + 27752))();
  glGetActiveAttribARB_Exec(a1, a2, a3, a4);
}

uint64_t glGetAttribLocationARB_ExecThread(uint64_t a1, unsigned int a2)
{
  (*(void (**)(void))(a1 + 27752))();
  return glGetAttribLocationARB_Exec(a1, a2);
}

uint64_t glGetFragDataLocationEXT_ExecThread(uint64_t a1, unsigned int a2)
{
  (*(void (**)(void))(a1 + 27752))();
  return glGetFragDataLocationEXT_Exec(a1, a2);
}

uint64_t glShaderBinaryOES_Exec(uint64_t result)
{
  if (!*(_WORD *)(result + 29832))
    *(_WORD *)(result + 29832) = 1280;
  return result;
}

uint64_t glGetShaderPrecisionFormatOES_Exec(uint64_t result, unsigned int a2, int a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;

  if (a2 >> 1 != 17816 && !*(_WORD *)(result + 29832))
    *(_WORD *)(result + 29832) = 1280;
  switch(a3)
  {
    case 36336:
      v5 = *(_QWORD *)(result + 29032);
      v6 = *(unsigned __int16 *)(v5 + 470);
      *a4 = v6;
      a4[1] = v6;
      v7 = *(unsigned __int8 *)(v5 + 476);
      goto LABEL_10;
    case 36337:
      v8 = *(_QWORD *)(result + 29032);
      v9 = *(unsigned __int16 *)(v8 + 472);
      *a4 = v9;
      a4[1] = v9;
      v7 = *(unsigned __int8 *)(v8 + 477);
      goto LABEL_10;
    case 36338:
      v10 = *(_QWORD *)(result + 29032);
      v11 = *(unsigned __int16 *)(v10 + 474);
      *a4 = v11;
      a4[1] = v11;
      v7 = *(unsigned __int8 *)(v10 + 478);
LABEL_10:
      *a5 = v7;
      return result;
    case 36339:
      v12 = *(unsigned __int16 *)(*(_QWORD *)(result + 29032) + 464);
      goto LABEL_14;
    case 36340:
      v12 = *(unsigned __int16 *)(*(_QWORD *)(result + 29032) + 466);
      goto LABEL_14;
    case 36341:
      v12 = *(unsigned __int16 *)(*(_QWORD *)(result + 29032) + 468);
LABEL_14:
      *a4 = v12;
      a4[1] = v12 - (v12 != 23);
      *a5 = 0;
      break;
    default:
      if (!*(_WORD *)(result + 29832))
        *(_WORD *)(result + 29832) = 1280;
      break;
  }
  return result;
}

uint64_t glReleaseShaderCompilerOES_ExecThread(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 27752))();
}

uint64_t glShaderBinaryOES_ExecThread(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(a1 + 27752))();
  if (!*(_WORD *)(a1 + 29832))
    *(_WORD *)(a1 + 29832) = 1280;
  return result;
}

uint64_t glGetShaderPrecisionFormatOES_ExecThread(uint64_t a1, unsigned int a2, int a3, _DWORD *a4, _DWORD *a5)
{
  (*(void (**)(void))(a1 + 27752))();
  return glGetShaderPrecisionFormatOES_Exec(a1, a2, a3, a4, a5);
}

uint64_t validatePathName(uint64_t a1, int a2, char *__big, int a4)
{
  int v7;
  uint64_t result;
  uint64_t v9;
  char *v10;
  int v11;
  int v12;
  unsigned int v13;
  BOOL v14;

  if (a2 && __big)
  {
    v7 = a2;
    if (a2 <= 0)
      v7 = strlen(__big);
    if (*__big == 47 && !strnstr(__big, "//", v7))
    {
      if (v7 < 1)
      {
LABEL_20:
        if (__big[v7 - 1] != 47)
          return 1;
      }
      else
      {
        v9 = v7;
        v10 = __big;
        while (1)
        {
          v12 = *v10++;
          v11 = v12;
          v13 = ((v12 & 0xDF) - 65);
          v14 = (v12 - 48) >= 0xA && v13 >= 0x1A;
          if (v14 && !memchr("_ .+-/*%[](){}^|&~=!:;,?", v11, 0x19uLL))
            break;
          if (!--v9)
            goto LABEL_20;
        }
      }
    }
  }
  if (!a4 || *(_WORD *)(a1 + 29832))
    return 0;
  result = 0;
  *(_WORD *)(a1 + 29832) = 1281;
  return result;
}

uint64_t findOrAddNamedString(const __CFDictionary **a1, int a2, char *__s, const void *a4, const __CFArray *a5, const __CFArray *cf, _QWORD *a7)
{
  const __CFDictionary *ValueAtIndex;
  const __CFArray *Mutable;
  char *v16;
  const char *v17;
  size_t v18;
  CFDataRef v19;
  const void *Value;
  const void *v21;
  CFTypeID v22;
  int v23;
  CFMutableDictionaryRef v24;
  CFTypeID v25;
  CFIndex Count;
  CFIndex v27;
  CFIndex v28;
  char *v29;
  uint64_t v30;
  const __CFDictionary **v32;
  _QWORD *v33;
  unsigned int v34;
  char *__stringp;
  _BYTE v36[271];

  *(_QWORD *)&v36[255] = *MEMORY[0x24BDAC8D0];
  ValueAtIndex = *a1;
  Mutable = cf;
  if (!cf)
    Mutable = CFArrayCreateMutable(0, 1, MEMORY[0x24BDBD690]);
  if (a4 && !ValueAtIndex)
  {
    ValueAtIndex = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    *a1 = ValueAtIndex;
  }
  if (ValueAtIndex)
  {
    v33 = a7;
    if (a2 <= 0)
      strlen(__s);
    __strlcpy_chk();
    __strlcat_chk();
    __stringp = v36;
    v16 = strsep(&__stringp, "/");
    if (v16)
    {
      v17 = v16;
      v32 = a1;
      v34 = 0;
      while (1)
      {
        v18 = strlen(v17);
        v19 = CFDataCreate(0, (const UInt8 *)v17, v18);
        Value = CFDictionaryGetValue(ValueAtIndex, v19);
        if (Value)
          break;
        if (!strcmp(v17, "."))
          goto LABEL_37;
        if (!strcmp(v17, ".."))
        {
          if (CFArrayGetCount(Mutable))
          {
            if (a5)
            {
              Count = CFArrayGetCount(a5);
              CFArrayRemoveValueAtIndex(a5, Count - 1);
            }
            v27 = CFArrayGetCount(Mutable);
            CFArrayRemoveValueAtIndex(Mutable, v27 - 1);
          }
          if (CFArrayGetCount(Mutable))
          {
            v28 = CFArrayGetCount(Mutable);
            ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(Mutable, v28 - 1);
          }
          else
          {
            ValueAtIndex = *v32;
          }
LABEL_37:
          v23 = 1;
          goto LABEL_38;
        }
        if (a4)
        {
          if (__stringp)
          {
            v24 = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
            CFDictionarySetValue(ValueAtIndex, v19, v24);
            CFRelease(v24);
            v23 = 1;
            ValueAtIndex = v24;
            goto LABEL_38;
          }
          CFDictionarySetValue(ValueAtIndex, v19, a4);
        }
        v23 = 0;
LABEL_38:
        CFRelease(v19);
        v29 = strsep(&__stringp, "/");
        if (v23)
        {
          v17 = v29;
          if (v29)
            continue;
        }
        goto LABEL_45;
      }
      v21 = Value;
      if (a5)
        CFArrayAppendValue(a5, v19);
      CFArrayAppendValue(Mutable, v21);
      v22 = CFGetTypeID(v21);
      if (v22 == CFDictionaryGetTypeID())
      {
        v23 = 1;
        ValueAtIndex = (const __CFDictionary *)v21;
        goto LABEL_38;
      }
      v25 = CFGetTypeID(v21);
      if (v25 == CFDataGetTypeID())
      {
        if (__stringp)
        {
          v23 = 0;
          ValueAtIndex = 0;
        }
        else
        {
          if (a4)
            CFDictionarySetValue(ValueAtIndex, v19, a4);
          v23 = 0;
          ValueAtIndex = 0;
          if (v33)
            *v33 = v21;
          v34 = 1;
        }
        goto LABEL_38;
      }
      goto LABEL_37;
    }
    v34 = 0;
LABEL_45:
    v30 = v34;
    if (!cf)
      goto LABEL_46;
  }
  else
  {
    v30 = 0;
    if (!cf)
LABEL_46:
      CFRelease(Mutable);
  }
  return v30;
}

void glCompileShaderIncludeARB_Exec(size_t a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  int v11;
  uint64_t *v13;
  uint64_t v14;
  CFMutableArrayRef Mutable;
  __CFArray *v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  const char *v20;
  CFDataRef v21;
  __int16 *v22;
  __int16 v23;
  CFMutableArrayRef cf;

  if ((a3 & 0x80000000) == 0)
  {
    if (!a3)
      goto LABEL_11;
    if (a4)
    {
      v10 = a3;
      while (v10)
      {
        if (a5)
          v11 = *(_DWORD *)(a5 - 4 + 4 * v10);
        else
          v11 = -1;
        if (!validatePathName(a1, v11, *(char **)(a4 - 8 + 8 * v10--), 1))
          return;
      }
LABEL_11:
      os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
      v13 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, a2);
      if (v13)
      {
        if (*((_DWORD *)v13 + 6) == 7)
        {
          v14 = (uint64_t)(v13 + 5);
          if (a3)
          {
            Mutable = CFArrayCreateMutable(0, a3, MEMORY[0x24BDBD690]);
            cf = Mutable;
            if ((int)a3 >= 1)
            {
              v16 = Mutable;
              v17 = a3 + 1;
              do
              {
                v18 = (v17 - 2);
                if (a5 && (v19 = *(_DWORD *)(a5 + 4 * v18), v19 >= 1))
                {
                  v20 = *(const char **)(a4 + 8 * v18);
                }
                else
                {
                  v20 = *(const char **)(a4 + 8 * v18);
                  v19 = strlen(v20);
                }
                v21 = CFDataCreate(0, (const UInt8 *)v20, v19);
                CFArrayAppendValue(v16, v21);
                CFRelease(v21);
                --v17;
              }
              while (v17 > 1);
            }
          }
          else
          {
            cf = 0;
          }
          gleShaderParse(a1, v14);
          if (cf)
            CFRelease(cf);
          goto LABEL_33;
        }
        v22 = (__int16 *)(a1 + 29832);
        if (!*(_WORD *)(a1 + 29832))
        {
          v23 = 1282;
          goto LABEL_28;
        }
      }
      else
      {
        v22 = (__int16 *)(a1 + 29832);
        if (!*(_WORD *)(a1 + 29832))
        {
          v23 = 1281;
LABEL_28:
          *v22 = v23;
        }
      }
LABEL_33:
      os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
      return;
    }
  }
  if (!*(_WORD *)(a1 + 29832))
    *(_WORD *)(a1 + 29832) = 1281;
}

const UInt8 *getInclude(uint64_t *a1, const char *a2)
{
  uint64_t v4;
  int v5;
  const UInt8 *result;
  const __CFArray *v7;
  const __CFDictionary **v8;
  uint64_t v9;
  const __CFData *ValueAtIndex;
  int Length;
  const char *BytePtr;
  const char *v13;
  int v14;
  unsigned int v15;
  int v16;
  BOOL v17;
  int v18;
  const __CFArray *v19;
  const char *v20;
  uint64_t v21;
  const __CFData *v22;
  int v23;
  const char *v24;
  int v25;
  const char *v26;
  int v27;
  unsigned int v28;
  char *v29;
  CFIndex v30;
  CFDataRef v31;
  uint64_t v32;
  CFDataRef theData;
  char __s[256];
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  theData = 0;
  v4 = *a1;
  v5 = *(unsigned __int8 *)a2;
  if (v5 == 60)
    goto LABEL_22;
  result = 0;
  if (v5 != 34)
    return result;
  v7 = (const __CFArray *)a1[2];
  if (!v7)
    goto LABEL_7;
  if (a2[1] == 47)
  {
    LODWORD(v7) = 0;
    goto LABEL_7;
  }
  LODWORD(v7) = CFArrayGetCount(v7);
  if ((v7 & 0x80000000) == 0)
  {
LABEL_7:
    v32 = v4;
    v8 = (const __CFDictionary **)(v4 + 336);
    v9 = v7;
    while (1)
    {
      if (v9)
      {
        ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex((CFArrayRef)a1[2], (v9 - 1));
        Length = CFDataGetLength(ValueAtIndex);
        BytePtr = (const char *)CFDataGetBytePtr(ValueAtIndex);
        v13 = "/";
      }
      else
      {
        Length = 0;
        BytePtr = 0;
        v13 = (const char *)&unk_21B9A6EAA;
      }
      v14 = strlen(a2 + 1);
      v15 = snprintf_l(__s, 0x100uLL, 0, "%.*s%s%.*s", Length, BytePtr, v13, v14 - 1, a2 + 1);
      if (v15 > 0xFF)
        return 0;
      v16 = findOrAddNamedString(v8, v15, __s, 0, 0, 0, &theData);
      v17 = v9-- < 1;
      if (v17 || v16)
      {
        v18 = *(unsigned __int8 *)a2;
        if (v18 != 60)
        {
          v4 = v32;
          goto LABEL_20;
        }
        v4 = v32;
        if (v16)
          goto LABEL_34;
        goto LABEL_22;
      }
    }
  }
  v18 = *(unsigned __int8 *)a2;
  if (v18 == 60)
    goto LABEL_22;
  v16 = 0;
LABEL_20:
  if (v18 == 34 && !v16)
  {
LABEL_22:
    v19 = (const __CFArray *)a1[1];
    if (!v19)
      goto LABEL_26;
    if (a2[1] == 47)
    {
      LODWORD(v19) = 0;
      goto LABEL_26;
    }
    LODWORD(v19) = CFArrayGetCount(v19);
    if ((v19 & 0x80000000) == 0)
    {
LABEL_26:
      v20 = a2 + 1;
      v21 = v19;
      while (1)
      {
        if (v21)
        {
          v22 = (const __CFData *)CFArrayGetValueAtIndex((CFArrayRef)a1[1], (v21 - 1));
          v23 = CFDataGetLength(v22);
          v24 = (const char *)CFDataGetBytePtr(v22);
          v25 = v23;
          v26 = "/";
        }
        else
        {
          v25 = 0;
          v24 = 0;
          v26 = (const char *)&unk_21B9A6EAA;
        }
        v27 = strlen(v20);
        v28 = snprintf_l(__s, 0x100uLL, 0, "%.*s%s%.*s", v25, v24, v26, v27 - 1, v20);
        if (v28 > 0xFF)
          break;
        v16 = findOrAddNamedString((const __CFDictionary **)(v4 + 336), v28, __s, 0, 0, 0, &theData);
        v17 = v21-- < 1;
        if (v17 || v16)
          goto LABEL_33;
      }
    }
    return 0;
  }
LABEL_33:
  if (!v16)
    return 0;
LABEL_34:
  v29 = strrchr(__s, 47);
  if (v29 <= __s)
    v30 = 1;
  else
    v30 = (int)((_DWORD)v29 - __s);
  if (!a1[2])
    a1[2] = (uint64_t)CFArrayCreateMutable(0, 1, MEMORY[0x24BDBD690]);
  v31 = CFDataCreate(0, (const UInt8 *)__s, v30);
  CFArrayAppendValue((CFMutableArrayRef)a1[2], v31);
  CFRelease(v31);
  return CFDataGetBytePtr(theData);
}

void freeInclude(uint64_t a1)
{
  const __CFArray *v2;
  CFIndex Count;

  v2 = *(const __CFArray **)(a1 + 16);
  Count = CFArrayGetCount(v2);
  CFArrayRemoveValueAtIndex(v2, Count - 1);
  if (!CFArrayGetCount(*(CFArrayRef *)(a1 + 16)))
  {
    CFRelease(*(CFTypeRef *)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
  }
}

float glGetFloatv_ExecThread(uint64_t a1, int a2, float *a3)
{
  double v6;
  double v7;
  double v8;

  v6 = (*(double (**)(void))(a1 + 27752))();
  return glGetFloatv_Exec(a1, a2, a3, v6, v7, v8);
}

uint64_t glGetFixedv_Exec(uint64_t a1, int a2, _DWORD *a3, double a4, double a5, double a6)
{
  uint64_t result;
  __int16 *v9;
  __int16 v10;
  uint64_t v11;
  int *v12;
  int v13;
  uint64_t v14;
  double *v15;
  double v16;
  float v17;
  float v18;
  int v19;
  char v20;
  _BYTE v21[256];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v20 = 0;
  v19 = 0;
  result = gleGetState(a1, a2, (uint64_t)v21, &v19, &v20, a4, a5, a6);
  if ((_DWORD)result == -2)
  {
    v9 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832))
      return result;
    v10 = 1282;
    goto LABEL_7;
  }
  if ((_DWORD)result == -1)
  {
    v9 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832))
      return result;
    v10 = 1280;
LABEL_7:
    *v9 = v10;
    return result;
  }
  if (v19 == 5124)
  {
    if ((int)result >= 1)
    {
      v11 = result;
      v12 = (int *)v21;
      do
      {
        v13 = *v12;
        v12 += 2;
        *a3++ = v13 << 16;
        --v11;
      }
      while (v11);
    }
  }
  else if ((int)result >= 1)
  {
    v14 = result;
    v15 = (double *)v21;
    do
    {
      v16 = *v15++;
      v17 = v16;
      v18 = (float)(v17 * 65536.0) + 0.5;
      if (v18 < 0.0)
        v18 = v18 + -0.99998;
      *a3++ = (int)v18;
      --v14;
    }
    while (v14);
  }
  return result;
}

uint64_t glGetFixedv_ExecThread(uint64_t a1, int a2, _DWORD *a3)
{
  double v6;
  double v7;
  double v8;

  v6 = (*(double (**)(void))(a1 + 27752))();
  return glGetFixedv_Exec(a1, a2, a3, v6, v7, v8);
}

double glGetInteger64v_ExecThread(uint64_t a1, int a2, _QWORD *a3)
{
  double v6;
  double v7;
  double v8;

  (*(void (**)(void))(a1 + 27752))();
  return glGetInteger64v_Exec(a1, a2, a3, v6, v7, v8);
}

double glGetInteger64v_Exec(uint64_t a1, int a2, _QWORD *a3, double a4, double a5, double a6)
{
  int State;
  double result;
  __int16 *v10;
  __int16 v11;
  uint64_t v12;
  double *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  double *v19;
  double v20;
  int v21;
  char v22;
  _BYTE __src[256];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v22 = 0;
  v21 = 0;
  State = gleGetState(a1, a2, (uint64_t)__src, &v21, &v22, a4, a5, a6);
  if (State == -2)
  {
    v10 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832))
      return result;
    v11 = 1282;
    goto LABEL_7;
  }
  if (State == -1)
  {
    v10 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832))
      return result;
    v11 = 1280;
LABEL_7:
    *v10 = v11;
    return result;
  }
  if (v21 == 5124)
  {
    if (State >= 1)
      memcpy(a3, __src, 8 * State);
  }
  else if (v22)
  {
    if (State >= 1)
    {
      v12 = State;
      v13 = (double *)__src;
      result = 1.0;
      do
      {
        v14 = *v13++;
        v15 = v14;
        if (v14 <= 1.0)
          v16 = v15;
        else
          v16 = 1.0;
        if (v15 >= -1.0)
          v17 = v16;
        else
          v17 = -1.0;
        *a3++ = (int)(v17 * 2147483520.0) + (int)(v17 * 127.999985);
        --v12;
      }
      while (v12);
    }
  }
  else if (State >= 1)
  {
    v18 = State;
    v19 = (double *)__src;
    do
    {
      v20 = *v19++;
      result = v20;
      *a3++ = llround(v20);
      --v18;
    }
    while (v18);
  }
  return result;
}

float glGetIntegerv_ExecThread(uint64_t a1, int a2, _DWORD *a3, double a4, double a5, double a6)
{
  int v9;
  int State;
  double v11;
  __int16 *v12;
  __int16 v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  double *v18;
  double v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  double *v24;
  double v25;
  int v27;
  char v28;
  _BYTE v29[512];
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v28 = 0;
  v27 = 0;
  if (a2 <= 33309)
  {
    if ((a2 - 3377) <= 0xA && ((1 << (a2 - 49)) & 0x5FB) != 0 || (a2 - 3120) < 2)
      goto LABEL_21;
    v9 = 32947;
    goto LABEL_20;
  }
  if (a2 > 36343)
  {
    if (a2 <= 36440)
    {
      if ((a2 - 36344) < 3)
        goto LABEL_21;
LABEL_48:
      (*(void (**)(uint64_t))(a1 + 27752))(a1);
      goto LABEL_21;
    }
    if (a2 == 36441 || a2 == 37137)
      goto LABEL_21;
    v9 = 37158;
LABEL_20:
    if (a2 == v9)
      goto LABEL_21;
    goto LABEL_48;
  }
  if (a2 > 34881)
  {
    if (a2 == 34882 || a2 == 34921)
      goto LABEL_21;
    v9 = 36203;
    goto LABEL_20;
  }
  if ((a2 - 34350) >= 2 && a2 != 33310)
  {
    v9 = 34468;
    goto LABEL_20;
  }
LABEL_21:
  State = gleGetState(a1, a2, (uint64_t)v29, &v27, &v28, a4, a5, a6);
  if (State == -2)
  {
    v12 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832))
      return *(float *)&v11;
    v13 = 1282;
LABEL_27:
    *v12 = v13;
    return *(float *)&v11;
  }
  if (State == -1)
  {
    v12 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832))
      return *(float *)&v11;
    v13 = 1280;
    goto LABEL_27;
  }
  if (v27 == 5124)
  {
    if (State >= 1)
    {
      v14 = State;
      v15 = (uint64_t *)v29;
      do
      {
        v16 = *v15++;
        *a3++ = v16;
        --v14;
      }
      while (v14);
    }
  }
  else if (v28)
  {
    if (State >= 1)
    {
      v17 = State;
      v18 = (double *)v29;
      v11 = 1.0;
      do
      {
        v19 = *v18++;
        v20 = v19;
        if (v19 <= 1.0)
          v21 = v20;
        else
          v21 = 1.0;
        if (v20 >= -1.0)
          v22 = v21;
        else
          v22 = -1.0;
        *a3++ = (int)(v22 * 2147483520.0) + (int)(v22 * 127.999985);
        --v17;
      }
      while (v17);
    }
  }
  else if (State >= 1)
  {
    v23 = State;
    v24 = (double *)v29;
    do
    {
      v25 = *v24++;
      *(float *)&v11 = round(v25);
      *a3++ = (int)*(float *)&v11;
      --v23;
    }
    while (v23);
  }
  return *(float *)&v11;
}

uint64_t glGetBooleanv_ExecThread(uint64_t a1, int a2, BOOL *a3)
{
  double v6;
  double v7;
  double v8;

  v6 = (*(double (**)(void))(a1 + 27752))();
  return glGetBooleanv_Exec(a1, a2, a3, v6, v7, v8);
}

uint64_t glGetPointerv_ExecThread(uint64_t a1, int a2, _QWORD *a3)
{
  (*(void (**)(void))(a1 + 27752))();
  return glGetPointerv_Exec(a1, a2, a3);
}

double glGetInteger64i_v_ExecThread(uint64_t a1, int a2, unsigned int a3, _QWORD *a4)
{
  (*(void (**)(void))(a1 + 27752))();
  return glGetInteger64i_v_Exec(a1, a2, a3, a4);
}

double glGetInteger64i_v_Exec(uint64_t a1, int a2, unsigned int a3, _QWORD *a4)
{
  int IndexedState;
  double result;
  __int16 *v8;
  __int16 v9;
  uint64_t v10;
  double *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  double *v17;
  double v18;
  int v19;
  char v20;
  _QWORD __src[5];

  __src[4] = *MEMORY[0x24BDAC8D0];
  v20 = 0;
  v19 = 0;
  IndexedState = gleGetIndexedState(a1, a2, a3, __src, &v19, &v20);
  if (IndexedState == -2)
  {
    v8 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832))
      return result;
    v9 = 1282;
    goto LABEL_7;
  }
  if (IndexedState == -1)
  {
    v8 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832))
      return result;
    v9 = 1280;
LABEL_7:
    *v8 = v9;
    return result;
  }
  if (v19 == 5124)
  {
    if (IndexedState >= 1)
      memcpy(a4, __src, 8 * IndexedState);
  }
  else if (v20)
  {
    if (IndexedState >= 1)
    {
      v10 = IndexedState;
      v11 = (double *)__src;
      result = 1.0;
      do
      {
        v12 = *v11++;
        v13 = v12;
        if (v12 <= 1.0)
          v14 = v13;
        else
          v14 = 1.0;
        if (v13 >= -1.0)
          v15 = v14;
        else
          v15 = -1.0;
        *a4++ = (int)(v15 * 2147483520.0) + (int)(v15 * 127.999985);
        --v10;
      }
      while (v10);
    }
  }
  else if (IndexedState >= 1)
  {
    v16 = IndexedState;
    v17 = (double *)__src;
    do
    {
      v18 = *v17++;
      result = v18;
      *a4++ = llround(v18);
      --v16;
    }
    while (v16);
  }
  return result;
}

float glGetIntegerIndexedv_ExecThread(uint64_t a1, int a2, unsigned int a3, _DWORD *a4)
{
  (*(void (**)(void))(a1 + 27752))();
  return glGetIntegerIndexedv_Exec(a1, a2, a3, a4);
}

float glGetIntegerIndexedv_Exec(uint64_t a1, int a2, unsigned int a3, _DWORD *a4)
{
  int IndexedState;
  double v7;
  __int16 *v8;
  __int16 v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  double *v20;
  double v21;
  int v23;
  char v24;
  _QWORD v25[5];

  v25[4] = *MEMORY[0x24BDAC8D0];
  v24 = 0;
  v23 = 0;
  IndexedState = gleGetIndexedState(a1, a2, a3, v25, &v23, &v24);
  if (IndexedState == -2)
  {
    v8 = (__int16 *)(a1 + 29832);
    if (!*(_WORD *)(a1 + 29832))
    {
      v9 = 1282;
      goto LABEL_7;
    }
  }
  else if (IndexedState == -1)
  {
    v8 = (__int16 *)(a1 + 29832);
    if (!*(_WORD *)(a1 + 29832))
    {
      v9 = 1280;
LABEL_7:
      *v8 = v9;
    }
  }
  else if (v23 == 5124)
  {
    if (IndexedState >= 1)
    {
      v10 = IndexedState;
      v11 = v25;
      do
      {
        v12 = *v11++;
        *a4++ = v12;
        --v10;
      }
      while (v10);
    }
  }
  else if (v24)
  {
    if (IndexedState >= 1)
    {
      v13 = IndexedState;
      v14 = (double *)v25;
      v7 = 1.0;
      do
      {
        v15 = *v14++;
        v16 = v15;
        if (v15 <= 1.0)
          v17 = v16;
        else
          v17 = 1.0;
        if (v16 >= -1.0)
          v18 = v17;
        else
          v18 = -1.0;
        *a4++ = (int)(v18 * 2147483520.0) + (int)(v18 * 127.999985);
        --v13;
      }
      while (v13);
    }
  }
  else if (IndexedState >= 1)
  {
    v19 = IndexedState;
    v20 = (double *)v25;
    do
    {
      v21 = *v20++;
      *(float *)&v7 = round(v21);
      *a4++ = (int)*(float *)&v7;
      --v19;
    }
    while (v19);
  }
  return *(float *)&v7;
}

_DWORD *glStencilFunc_Comp(uint64_t a1, int a2, int a3, int a4)
{
  _DWORD *result;

  result = gleAddCommand(a1, (uint64_t)glStencilFunc_ListExec, 12);
  *result = a2;
  result[1] = a3;
  result[2] = a4;
  return result;
}

uint64_t glStencilFunc_ListExec(uint64_t a1, int *a2)
{
  glStencilFunc_Exec(a1, *a2, a2[1], a2[2]);
  return 12;
}

_DWORD *glStencilOp_Comp(uint64_t a1, int a2, int a3, int a4)
{
  _DWORD *result;

  result = gleAddCommand(a1, (uint64_t)glStencilOp_ListExec, 12);
  *result = a2;
  result[1] = a3;
  result[2] = a4;
  return result;
}

uint64_t glStencilOp_ListExec(uint64_t a1, int *a2)
{
  glStencilOp_Exec(a1, *a2, a2[1], a2[2]);
  return 12;
}

_DWORD *glStencilOpSeparateATI_Comp(uint64_t a1, int a2, int a3, int a4, int a5)
{
  _DWORD *result;

  result = gleAddCommand(a1, (uint64_t)glStencilOpSeparateATI_ListExec, 16);
  *result = a2;
  result[1] = a3;
  result[2] = a4;
  result[3] = a5;
  return result;
}

uint64_t glStencilOpSeparateATI_ListExec(uint64_t a1, int *a2)
{
  glStencilOpSeparateATI_Exec(a1, *a2, a2[1], a2[2], a2[3]);
  return 16;
}

uint64_t glStencilOpSeparateATI_Exec(uint64_t result, int a2, int a3, int a4, int a5)
{
  _WORD *v5;
  int v6;
  int v7;
  int v8;
  unsigned int v9;

  if ((a3 - 7680) >= 4 && (a3 - 34055) >= 2 && a3 && a3 != 5386
    || (a4 - 7680) >= 4 && (a4 - 34055) >= 2 && a4 && a4 != 5386
    || (a5 - 7680) >= 4 && (a5 - 34055) >= 2 && a5 && a5 != 5386)
  {
    goto LABEL_42;
  }
  v5 = (_WORD *)(result + 15606);
  switch(a2)
  {
    case 1028:
      if ((unsigned __int16)*v5 == a3
        && *(unsigned __int16 *)(result + 15608) == a4
        && *(unsigned __int16 *)(result + 15610) == a5)
      {
        return result;
      }
      *v5 = a3;
      *(_WORD *)(result + 15608) = a4;
      *(_WORD *)(result + 15610) = a5;
      goto LABEL_14;
    case 1029:
      if (*(unsigned __int16 *)(result + 15638) == a3
        && *(unsigned __int16 *)(result + 15640) == a4
        && *(unsigned __int16 *)(result + 15642) == a5)
      {
        return result;
      }
      *(_WORD *)(result + 15638) = a3;
      *(_WORD *)(result + 15640) = a4;
      *(_WORD *)(result + 15642) = a5;
LABEL_14:
      v6 = *(_DWORD *)(result + 15644);
      if (v6 == 1)
      {
        v7 = 33;
LABEL_25:
        *(_DWORD *)(result + 15644) = v7;
        *(_DWORD *)(result + 1548) |= 0x8000u;
LABEL_29:
        *(_DWORD *)(result + 1520) |= 0x10000000u;
        *(_DWORD *)(result + 28652) = 0;
        *(_DWORD *)(result + 1548) |= 0x40000u;
        return result;
      }
      v9 = v6 | 0x20;
      goto LABEL_28;
    case 1032:
      if ((unsigned __int16)*v5 == a3
        && *(unsigned __int16 *)(result + 15608) == a4
        && *(unsigned __int16 *)(result + 15610) == a5
        && *(unsigned __int16 *)(result + 15638) == a3
        && *(unsigned __int16 *)(result + 15640) == a4
        && *(unsigned __int16 *)(result + 15642) == a5)
      {
        return result;
      }
      *v5 = a3;
      *(_WORD *)(result + 15608) = a4;
      *(_WORD *)(result + 15610) = a5;
      *(_WORD *)(result + 15638) = a3;
      *(_WORD *)(result + 15640) = a4;
      *(_WORD *)(result + 15642) = a5;
      v8 = *(_DWORD *)(result + 15644);
      if (v8 == 33)
      {
        v7 = 1;
        goto LABEL_25;
      }
      v9 = v8 & 0xFFFFFFDF;
LABEL_28:
      *(_DWORD *)(result + 15644) = v9;
      goto LABEL_29;
  }
LABEL_42:
  if (!*(_WORD *)(result + 29832))
    *(_WORD *)(result + 29832) = 1280;
  return result;
}

_DWORD *glStencilFuncSeparate_Comp(uint64_t a1, int a2, int a3, int a4, int a5)
{
  _DWORD *result;

  result = gleAddCommand(a1, (uint64_t)glStencilFuncSeparate_ListExec, 16);
  *result = a2;
  result[1] = a3;
  result[2] = a4;
  result[3] = a5;
  return result;
}

uint64_t glStencilFuncSeparate_ListExec(uint64_t a1, int *a2)
{
  glStencilFuncSeparate_Exec(a1, *a2, a2[1], a2[2], a2[3]);
  return 16;
}

uint64_t glStencilFuncSeparate_Exec(uint64_t result, int a2, int a3, int a4, int a5)
{
  _WORD *v5;
  _WORD *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = (_WORD *)(result + 29832);
  if ((a3 - 520) <= 0xFFFFFFF7)
    goto LABEL_29;
  v6 = (_WORD *)(result + 15604);
  v7 = a4 & ~(a4 >> 31);
  if (a2 != 1028)
  {
    if (a2 == 1029)
    {
      if (*(unsigned __int16 *)(result + 15636) != a3
        || *(_DWORD *)(result + 15632) != v7
        || *(_DWORD *)(result + 15628) != a5)
      {
        *(_WORD *)(result + 15636) = a3;
        *(_DWORD *)(result + 15632) = v7;
        *(_DWORD *)(result + 15628) = a5;
LABEL_12:
        v8 = *(_DWORD *)(result + 15644);
        if (v8 == 1)
        {
          v9 = 17;
LABEL_23:
          *(_DWORD *)(result + 15644) = v9;
          *(_DWORD *)(result + 1548) |= 0x8000u;
LABEL_27:
          *(_DWORD *)(result + 1520) |= 0x10000000u;
          *(_DWORD *)(result + 28652) = 0;
          *(_DWORD *)(result + 1548) |= 0x40000u;
          return result;
        }
        v11 = v8 | 0x10;
        goto LABEL_26;
      }
      return result;
    }
    if (a2 == 1032)
    {
      if ((unsigned __int16)*v6 != a3
        || *(_DWORD *)(result + 15600) != v7
        || *(_DWORD *)(result + 15596) != a5
        || *(unsigned __int16 *)(result + 15636) != a3
        || *(_DWORD *)(result + 15632) != v7
        || *(_DWORD *)(result + 15628) != a5)
      {
        *v6 = a3;
        *(_DWORD *)(result + 15600) = v7;
        *(_DWORD *)(result + 15596) = a5;
        *(_WORD *)(result + 15636) = a3;
        *(_DWORD *)(result + 15632) = v7;
        *(_DWORD *)(result + 15628) = a5;
        v10 = *(_DWORD *)(result + 15644);
        if (v10 == 17)
        {
          v9 = 1;
          goto LABEL_23;
        }
        v11 = v10 & 0xFFFFFFEF;
LABEL_26:
        *(_DWORD *)(result + 15644) = v11;
        goto LABEL_27;
      }
      return result;
    }
LABEL_29:
    if (!*v5)
      *v5 = 1280;
    return result;
  }
  if ((unsigned __int16)*v6 != a3 || *(_DWORD *)(result + 15600) != v7 || *(_DWORD *)(result + 15596) != a5)
  {
    *v6 = a3;
    *(_DWORD *)(result + 15600) = v7;
    *(_DWORD *)(result + 15596) = a5;
    goto LABEL_12;
  }
  return result;
}

uint64_t glGetStringi_Exec(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  int v5;
  uint64_t v6;
  __int16 *v7;
  int v8;
  int v10;
  uint64_t result;
  _DWORD v12[6];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 29832;
  if (a2 == 7939)
  {
    gleGetFilteredExtensions(a1, (uint64_t)v12);
    if (*(_BYTE *)(v3 + 2669) == 4)
      v5 = 16;
    else
      v5 = 2;
    v6 = 244;
    v7 = &word_24DF41114;
    v8 = -1;
    do
    {
      if ((*((_DWORD *)v7 - 1) & v5) != 0 && (*((_DWORD *)v7 - 1) & 0x100) == 0)
      {
        v10 = *v7;
        if ((v10 == -1 || ((v12[v10 >> 5] >> v10) & 1) != 0) && ++v8 == a3)
          return *(_QWORD *)(v7 - 6);
      }
      v7 += 8;
      --v6;
    }
    while (v6);
    if (!*(_WORD *)v3)
      *(_WORD *)v3 = 1281;
    return 0;
  }
  if (*(_WORD *)v3)
    return 0;
  result = 0;
  *(_WORD *)v3 = 1280;
  return result;
}

uint64_t glGetStringi_ExecThread(uint64_t a1, int a2, int a3)
{
  (*(void (**)(void))(a1 + 27752))();
  return glGetStringi_Exec(a1, a2, a3);
}

uint64_t glGetString_ExecThread(uint64_t a1, int a2)
{
  (*(void (**)(void))(a1 + 27752))();
  return glGetString_Exec(a1, a2);
}

BOOL glIsTexture_ExecThread(uint64_t a1, unsigned int a2)
{
  (*(void (**)(void))(a1 + 27752))();
  return glIsTexture_Exec(a1, a2);
}

BOOL glIsTexture_Exec(uint64_t a1, unsigned int a2)
{
  uint64_t *v4;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v4 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 72, a2);
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  return v4 != 0;
}

void glGenTextures_ExecThread(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  (*(void (**)(void))(a1 + 27752))();
  glGenTextures_Exec(a1, a2, a3);
}

_DWORD *glBindTexture_Comp(uint64_t a1, int a2, int a3)
{
  _DWORD *result;

  result = gleAddCommand(a1, (uint64_t)glBindTexture_ListExec, 8);
  *result = a2;
  result[1] = a3;
  return result;
}

uint64_t glBindTexture_ListExec(uint64_t a1, uint64_t a2)
{
  glBindTexture_Exec(a1, *(_DWORD *)a2, *(_DWORD *)(a2 + 4));
  return 8;
}

void glDeleteTextures_ExecThread(uint64_t a1, unsigned int a2, unsigned int *a3)
{
  (*(void (**)(void))(a1 + 27752))();
  glDeleteTextures_Exec(a1, a2, a3);
}

uint64_t glCompressedTexImage3D_Exec(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, int a9, uint64_t a10)
{
  unsigned int v14;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t result;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  _BOOL4 v27;
  _BOOL4 v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  _BOOL4 v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  _BYTE *v40;
  char v41;
  _DWORD *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  _BYTE *v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v55;
  unint64_t v56;

  v14 = a4;
  v17 = a10;
  v18 = a1 + 28652;
  v19 = (_BYTE *)(a1 + 18518);
  result = gleSRGBToFormat(a4);
  if (!a10 && *v19)
  {
    if (!*(_WORD *)(v18 + 1180))
      *(_WORD *)(v18 + 1180) = 1281;
    return result;
  }
  v51 = v19;
  v52 = result;
  v53 = v18;
  v56 = 0;
  v21 = a2;
  v55 = a3;
  LODWORD(v18) = a5;
  result = gleCheckCompressedTexImage3DArgs(a1, v21, a3, v14, a5, a6, a7, a8, a9, &v56);
  if (!result)
    return result;
  v22 = result;
  if (*(_BYTE *)(result + 770))
    return result;
  v23 = a6;
  v24 = *(_QWORD *)(a1 + 19336);
  if (v24)
  {
    result = gleHandleUnpackBufferInEngineNoSync(a1, *(_QWORD *)(a1 + 19336), a10 + a9, 1, a10);
    v17 = result;
    if (!result)
      return result;
  }
  v25 = *(_WORD *)(v22 + 768);
  if ((v25 & 0x1C00) != 0x1000)
  {
    if ((*(_WORD *)(v22 + 768) & 0x1C00) != 0)
    {
      if ((*(_WORD *)(v22 + 768) & 0xC00) != 0)
      {
        if (!*(_WORD *)(v53 + 1180))
          *(_WORD *)(v53 + 1180) = 1282;
        return result;
      }
    }
    else
    {
      *(_WORD *)(v22 + 768) = v25 | 0x1000;
    }
  }
  v26 = v24;
  v27 = v23 != 0;
  v28 = a7 != 0;
  v49 = v18;
  if (v27 && v28)
    v18 = v18;
  else
    v18 = 0;
  if (v27 && v28)
    v29 = a8;
  else
    v29 = 0;
  v50 = v22 + 1032;
  LOWORD(v45) = 256;
  v30 = gleEvaluateTextureImageChange(a1, v22, v22 + 1032 + 32 * (int)v55, 0, v55, v18, v23, a7, v29, v14, v52, 0, v45, v17);
  v31 = v30;
  if (!(_DWORD)v18)
  {
    result = 0;
    goto LABEL_48;
  }
  if (!v17
    || (*(_WORD *)(v22 + 768) & 0x100) != 0
    || !*(_BYTE *)(*(_QWORD *)(a1 + 29032) + 174)
    || *(unsigned __int8 *)(v22 + 976) > (int)v55
    || *(unsigned __int8 *)(v22 + 978) < (int)v55
    || ((*(unsigned __int16 *)(v22 + 984) >> v55) & 1) == 0)
  {
    if (v24 && *(_QWORD *)(v24 + 192))
    {
      v37 = v24 + 40;
      v38 = v30;
      gleSynchronizeBufferOnCurrentDevicesForRead(a1, v37);
      v31 = v38;
    }
    if (!v17)
    {
LABEL_46:
      result = 0;
      *(_DWORD *)(v22 + 968) = 65538;
      goto LABEL_48;
    }
LABEL_41:
    if ((*(_WORD *)(v22 + 768) & 0x100) == 0)
    {
      v48 = v31;
      v39 = v50 + 32 * (int)v55;
      v41 = *(_BYTE *)(v39 + 11);
      v40 = (_BYTE *)(v39 + 11);
      if ((v41 & 1) != 0 || gfxAllocateTextureLevel())
      {
        LOBYTE(v46) = 0;
        gleTextureImagePut((_DWORD *)a1, v22, v22 + 1032 + 32 * (int)v55, 0, 0, 0, v49, v23, a7, v56, v46, 0, v17);
        result = 0;
        *(_DWORD *)(v22 + 968) = *(_DWORD *)(v50 + 32 * (int)v55 + 16);
        *v40 |= 0x10u;
        v42 = (_DWORD *)v53;
        *(_WORD *)(v22 + 996) |= *(_WORD *)(v22 + 984) & (unsigned __int16)(1 << v55);
        v43 = v22 + 24 * *(unsigned __int8 *)(v53 + 3847);
        *(_BYTE *)(v43 + 116) |= 4u;
        *(_WORD *)(v43 + 104) |= 1 << v55;
      }
      else
      {
        v42 = (_DWORD *)v53;
        result = 0;
        if (!*(_WORD *)(v53 + 1180))
          *(_WORD *)(v53 + 1180) = 1285;
      }
      v31 = v48;
      goto LABEL_49;
    }
    goto LABEL_46;
  }
  v32 = v18;
  v47 = v30;
  v33 = *(_QWORD *)(a1 + 8 * *((unsigned __int16 *)v51 + 2625) + 23936);
  if (v33)
    v34 = (_BYTE *)(v33 + 198);
  else
    v34 = (_BYTE *)(v22 + 926);
  v35 = (*v34 & 1) == 0;
  v36 = v52;
  *(_WORD *)(v22 + 968) = v52;
  *(_WORD *)(v22 + 970) = 0;
  if (!v26)
  {
LABEL_35:
    result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, unint64_t, _QWORD, uint64_t, _DWORD, _QWORD, _BOOL4))(*(_QWORD *)(a1 + 29448) + 368))(*(_QWORD *)(a1 + 29016), *(_QWORD *)(v22 + 8 * *(unsigned __int8 *)(v53 + 3847)), 0, v55, 0, 0, 0, v32, __PAIR64__(a7, v23), v36, v17, 0, 0, v35);
    v31 = v47;
    if ((_DWORD)result)
      goto LABEL_36;
    goto LABEL_41;
  }
  result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 29448)
                                                                                              + 368))(*(_QWORD *)(a1 + 29016), *(_QWORD *)(v22 + 8 * *(unsigned __int8 *)(v53 + 3847)), 0, v55, 0, 0, 0);
  v31 = v47;
  if (!(_DWORD)result)
  {
    v36 = v52;
    v32 = v18;
    if (*(_QWORD *)(v26 + 192))
    {
      gleSynchronizeBufferOnCurrentDevicesForRead(a1, v26 + 40);
      v32 = v18;
      v36 = v52;
    }
    goto LABEL_35;
  }
LABEL_36:
  *(_QWORD *)(v22 + 536) = *(_QWORD *)(a1 + 29024);
  *(_BYTE *)(v50 + 32 * (int)v55 + 11) |= 0x40u;
LABEL_48:
  v42 = (_DWORD *)v53;
LABEL_49:
  if ((v31 & 0xC0000001) != 0)
  {
    if (v31 < 0)
      v44 = 134356992;
    else
      v44 = 139264;
    *v42 = 0;
    *(_DWORD *)(a1 + 1548) |= v44;
  }
  else if ((_DWORD)result == 1)
  {
    return result;
  }
  return gleDirtyTextureObjectCurrentBindPointsNoFBO(a1, v22);
}

uint64_t glCompressedTexSubImage3D_Exec(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, unsigned int a8, int a9, unsigned int a10, int a11, uint64_t a12)
{
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  _BYTE *v25;
  _BOOL4 v26;
  uint64_t v27;
  char v28;
  char *v29;
  char v30;
  uint64_t v31;
  char v32;
  char *v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  unint64_t v44;

  v44 = 0;
  result = gleCheckCompressedTexSubImage3DArgs(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, &v44);
  if (result)
  {
    v19 = result;
    if (!*(_BYTE *)(result + 770))
    {
      v20 = a12;
      v21 = *(_QWORD *)(a1 + 19336);
      if (v21)
      {
        v22 = *(_QWORD *)(a1 + 19336);
        result = gleHandleUnpackBufferInEngineNoSync(a1, v21, a12 + a11, 1, a12);
        v20 = result;
        if (!result)
          return result;
      }
      else
      {
        v22 = 0;
      }
      if ((_DWORD)a7 && a8 && a9)
      {
        v42 = (unsigned __int8 *)(a1 + 32499);
        v40 = v20;
        v41 = v19 + 1032;
        v23 = gleSRGBToFormat(a10);
        if (!*(_QWORD *)(v19 + 536))
          gfxWaitTextureOnDevices();
        if (*(unsigned __int8 *)(v19 + 976) <= (int)a3
          && *(unsigned __int8 *)(v19 + 978) >= (int)a3
          && ((1 << a3) & *(unsigned __int16 *)(v19 + 984)) != 0)
        {
          v24 = *(_QWORD *)(a1 + 8 * *(unsigned __int16 *)(a1 + 23768) + 23936);
          if (v24)
            v25 = (_BYTE *)(v24 + 198);
          else
            v25 = (_BYTE *)(v19 + 926);
          v26 = (*v25 & 1) == 0;
          *(_WORD *)(v19 + 968) = v23;
          *(_WORD *)(v19 + 970) = 0;
          if (v22)
          {
            LODWORD(v38) = v26;
            HIDWORD(v38) = v26;
            result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, unint64_t, _QWORD, uint64_t, _DWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 29448) + 368))(*(_QWORD *)(a1 + 29016), *(_QWORD *)(v19 + 8 * *v42), 0, a3, a4, a5, a6, a7, __PAIR64__(a9, a8), v23, v40, 0, *(_QWORD *)(v22 + 40 + 8 * *v42), v38);
            if ((_DWORD)result)
            {
LABEL_24:
              *(_QWORD *)(v19 + 536) = *(_QWORD *)(a1 + 29024);
              v27 = v41 + 32 * (int)a3;
              v30 = *(_BYTE *)(v27 + 11);
              v29 = (char *)(v27 + 11);
              v28 = v30;
              if ((v30 & 0x10) != 0)
              {
                if ((v28 & 9) == 0)
                {
                  result = gfxFreeTextureLevel();
                  v28 = *v29;
                }
                v28 &= ~0x10u;
                *(_WORD *)(v19 + 996) &= ~(unsigned __int16)(1 << a3);
              }
              *v29 = v28 | 0x40;
              return result;
            }
            v26 = v39;
            if (*(_QWORD *)(v22 + 192))
            {
              gleSynchronizeBufferOnCurrentDevicesForRead(a1, v22 + 40);
              v26 = v39;
            }
          }
          result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, unint64_t, _QWORD, uint64_t, _DWORD, _QWORD, _BOOL4))(*(_QWORD *)(a1 + 29448) + 368))(*(_QWORD *)(a1 + 29016), *(_QWORD *)(v19 + 8 * *v42), 0, a3, a4, a5, a6, a7, __PAIR64__(a9, a8), v23, v40, 0, 0, v26);
          if ((_DWORD)result)
            goto LABEL_24;
        }
        else if (v22 && *(_QWORD *)(v22 + 192))
        {
          gleSynchronizeBufferOnCurrentDevicesForRead(a1, v22 + 40);
        }
        v31 = v41 + 32 * (int)a3;
        v34 = *(_BYTE *)(v31 + 11);
        v33 = (char *)(v31 + 11);
        v32 = v34;
        if ((v34 & 0x40) != 0)
        {
          gleSynchronizeTextureLevelOnCurrentDevices(a1, v19);
          v35 = v19 + 1032 + 32 * (int)a3;
        }
        else
        {
          v35 = v19 + 1032 + 32 * (int)a3;
          if ((v32 & 0x10) == 0)
          {
            if (!*(_QWORD *)(v41 + 32 * (int)a3 + 24))
            {
              if (!gfxAllocateTextureLevel())
              {
                v35 = v19 + 1032 + 32 * (int)a3;
                if (!*(_WORD *)(a1 + 29832))
                  *(_WORD *)(a1 + 29832) = 1285;
                goto LABEL_39;
              }
              v32 = *v33;
              v35 = v19 + 1032 + 32 * (int)a3;
            }
            *v33 = v32 | 0x10;
          }
        }
LABEL_39:
        v36 = v35;
        gfxModifyPluginTextureLevel();
        (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 29496) + 280))(*(_QWORD *)(a1 + 29464), 1, 0, *(_QWORD *)(v19 + 8 * *(unsigned __int8 *)(a1 + 32500)));
        if ((*v33 & 0x10) != 0)
        {
          LOBYTE(v37) = 0;
          gleTextureImagePut((_DWORD *)a1, v19, v36, a4, a5, a6, a7, a8, a9, v44, v37, 0, v40);
        }
        return gleDirtyTextureObjectCurrentBindPointsNoFBO(a1, v19);
      }
    }
  }
  return result;
}

uint64_t glCompressedTexSubImage2D_Exec(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, unsigned int a7, unsigned int a8, int a9, uint64_t a10)
{
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  _BYTE *v27;
  _BOOL4 v28;
  char *v29;
  char v30;
  char *v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  _BOOL4 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v40;

  v40 = 0;
  v16 = (unsigned __int8 *)(a1 + 32493);
  if (((a8 == 33776) & ((*(_WORD *)(a1 + 32493) & 0x10) >> 4)) != 0)
    v17 = 33777;
  else
    v17 = a8;
  result = gleCheckCompressedTexSubImage2DArgs(a1, a2, a3, a4, a5, a6, a7, v17, a9, &v40);
  if (result)
  {
    v19 = result;
    if (!*(_BYTE *)(result + 770))
    {
      v20 = a10;
      v21 = *(_QWORD *)(a1 + 19336);
      if (v21)
      {
        v22 = *(_QWORD *)(a1 + 19336);
        result = gleHandleUnpackBufferInEngineNoSync(a1, v21, a10 + a9, 1, a10);
        v20 = result;
        if (!result || !(_DWORD)a6)
          return result;
      }
      else
      {
        v22 = 0;
        if (!(_DWORD)a6)
          return result;
      }
      if (!a7)
        return result;
      v37 = v20;
      if (v16[10])
        v36 = mach_absolute_time();
      else
        v36 = 0;
      if ((a2 - 34069) >= 6)
        v23 = 0;
      else
        v23 = (a2 - 34069);
      v24 = v23;
      v38 = v19 + 480 * v23 + 32 * (int)a3 + 1032;
      v25 = gleSRGBToFormat(v17);
      if (!*(_QWORD *)(v19 + 536))
        gfxWaitTextureOnDevices();
      if (*(unsigned __int8 *)(v19 + 976) <= (int)a3
        && *(unsigned __int8 *)(v19 + 978) >= (int)a3
        && ((1 << a3) & *(unsigned __int16 *)(v19 + 2 * v24 + 984)) != 0)
      {
        v26 = *(_QWORD *)(a1 + 8 * *(unsigned __int16 *)(a1 + 23768) + 23936);
        if (v26)
          v27 = (_BYTE *)(v26 + 198);
        else
          v27 = (_BYTE *)(v19 + 926);
        v28 = (*v27 & 1) == 0;
        *(_WORD *)(v19 + 968) = v25;
        *(_WORD *)(v19 + 970) = 0;
        if (v22)
        {
          v35 = v28;
          result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, _QWORD, uint64_t, _DWORD, _QWORD, _BOOL4))(*(_QWORD *)(a1 + 29448) + 368))(*(_QWORD *)(a1 + 29016), *(_QWORD *)(v19 + 8 * v16[6]), v24, a3, a4, a5, 0, a6, a7 | 0x100000000, v25, v37, 0, *(_QWORD *)(v22 + 40 + 8 * v16[6]), v28);
          if ((_DWORD)result)
          {
LABEL_32:
            *(_QWORD *)(v19 + 536) = *(_QWORD *)(a1 + 29024);
            v29 = (char *)(v19 + 480 * v24 + 32 * (int)a3 + 1043);
            v30 = *v29;
            if ((*v29 & 0x10) != 0)
            {
              if ((*v29 & 9) == 0)
              {
                result = gfxFreeTextureLevel();
                v30 = *v29;
              }
              v30 &= ~0x10u;
              *(_WORD *)(v19 + 2 * v24 + 996) &= ~(unsigned __int16)(1 << a3);
            }
            *v29 = v30 | 0x40;
LABEL_50:
            if (v16[10])
            {
              result = mach_absolute_time();
              *(_QWORD *)(a1 + 19168) += result - v36;
            }
            return result;
          }
          v28 = v35;
          if (*(_QWORD *)(v22 + 192))
          {
            gleSynchronizeBufferOnCurrentDevicesForRead(a1, v22 + 40);
            v28 = v35;
          }
        }
        result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, _QWORD, uint64_t, _DWORD, _QWORD, _BOOL4))(*(_QWORD *)(a1 + 29448) + 368))(*(_QWORD *)(a1 + 29016), *(_QWORD *)(v19 + 8 * v16[6]), v24, a3, a4, a5, 0, a6, a7 | 0x100000000, v25, v37, 0, 0, v28);
        if ((_DWORD)result)
          goto LABEL_32;
      }
      else if (v22 && *(_QWORD *)(v22 + 192))
      {
        gleSynchronizeBufferOnCurrentDevicesForRead(a1, v22 + 40);
      }
      v31 = (char *)(v19 + 480 * v24 + 32 * (int)a3 + 1043);
      v32 = *v31;
      if ((*v31 & 0x40) != 0)
      {
        v33 = v38;
        gleSynchronizeTextureLevelOnCurrentDevices(a1, v19);
      }
      else
      {
        v33 = v38;
        if ((*v31 & 0x10) == 0)
        {
          if (!*(_QWORD *)(v19 + 480 * v24 + 32 * (int)a3 + 1056))
          {
            if (!gfxAllocateTextureLevel())
            {
              if (!*(_WORD *)(a1 + 29832))
                *(_WORD *)(a1 + 29832) = 1285;
              goto LABEL_47;
            }
            v32 = *v31;
          }
          *v31 = v32 | 0x10;
        }
      }
LABEL_47:
      gfxModifyPluginTextureLevel();
      (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 29496) + 280))(*(_QWORD *)(a1 + 29464), 1, 0, *(_QWORD *)(v19 + 8 * v16[7]));
      if ((*v31 & 0x10) != 0)
      {
        LOBYTE(v34) = 0;
        gleTextureImagePut((_DWORD *)a1, v19, v33, a4, a5, 0, a6, a7, 1, v40, v34, 0, v37);
      }
      result = gleDirtyTextureObjectCurrentBindPointsNoFBO(a1, v19);
      goto LABEL_50;
    }
  }
  return result;
}

_BYTE *glGetCompressedTexImage_ExecThread(uint64_t a1, int a2, unsigned int a3, uint64_t a4)
{
  (*(void (**)(void))(a1 + 27752))();
  return glGetCompressedTexImage_Exec(a1, a2, a3, a4);
}

_BYTE *glGetCompressedTexImage_Exec(uint64_t a1, int a2, unsigned int a3, uint64_t a4)
{
  _BYTE *result;
  __int16 *v9;
  __int16 v10;
  _BYTE *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  int v16;
  int v17;
  int CompressedImageBytes;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  unint64_t v24;
  unsigned __int16 *v25;

  result = (_BYTE *)gleLookUpNonProxyTexture(a1, a2);
  if (!result)
  {
    v9 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832))
      return result;
    v10 = 1280;
    goto LABEL_18;
  }
  if (a3 >= 0xF)
  {
    v9 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832))
      return result;
    v10 = 1281;
LABEL_18:
    *v9 = v10;
    return result;
  }
  v11 = result;
  if (!result[555])
  {
    v9 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832))
      return result;
    v10 = 1282;
    goto LABEL_18;
  }
  if ((a2 - 34069) >= 6)
    v12 = 0;
  else
    v12 = a2 - 34069;
  v13 = a3;
  v14 = (uint64_t)&result[480 * v12 + 32 * a3];
  if ((*(_BYTE *)(v14 + 1043) & 0x20) != 0)
  {
    if (result[976] <= a3
      && (*(_BYTE *)(v14 + 1043) & 0x40) != 0
      && result[978] >= a3)
    {
      gleSynchronizeTextureLevelOnCurrentDevices(a1, (uint64_t)result);
      gfxModifyPluginTextureLevel();
    }
    else if ((*(_BYTE *)(v14 + 1043) & 0x10) == 0)
    {
      return result;
    }
    v15 = (unsigned __int16 *)&v11[480 * v12 + 32 * a3];
    glgConvertType();
    glgConvertType();
    v16 = gleRowBytes(v15[524], v15[525], v15[522]);
    v17 = gleSRGBToFormat(*((unsigned __int16 *)v11 + 480));
    gleRowBytes(v17, 0, v15[518]);
    if (v15[525])
      CompressedImageBytes = v16 * *(unsigned __int16 *)&v11[480 * v12 + 1038 + 32 * v13];
    else
      CompressedImageBytes = glgGetCompressedImageBytes();
    result = (_BYTE *)glgGetCompressedImageBytes();
    v19 = (int)result;
    v20 = *(_QWORD *)(a1 + 19328);
    if (!v20
      || (result = (_BYTE *)gleHandlePackBufferInEngine(a1, v20, a4 + result, 1, a4),
          (a4 = (uint64_t)result) != 0))
    {
      if ((*(_BYTE *)(v14 + 1043) & 1) == 0 || a4 != *(_QWORD *)&v11[480 * v12 + 1056 + 32 * v13] || v15[525])
      {
        v21 = (uint64_t)&v11[480 * v12 + 32 * v13];
        if (*(_WORD *)(v21 + 1040))
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          v25 = (unsigned __int16 *)(v21 + 1040);
          do
          {
            result = (_BYTE *)glgProcessPixelsWithProcessor();
            ++v24;
            v23 += v19;
            v22 += CompressedImageBytes;
          }
          while (v24 < *v25);
        }
      }
    }
  }
  return result;
}

uint64_t glCompressedTexImage2D_FlushExec(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, unsigned int a6, int a7, int a8, uint64_t a9)
{
  double v10;
  double v11;
  double v12;

  glCompressedTexImage2D_Exec(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  return glFlush_Exec(a1, v10, v11, v12);
}

uint64_t glCompressedTexSubImage2D_FlushExec(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, unsigned int a7, unsigned int a8, int a9, uint64_t a10)
{
  double v11;
  double v12;
  double v13;

  glCompressedTexSubImage2D_Exec(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  return glFlush_Exec(a1, v11, v12, v13);
}

_QWORD *glCompressedTexImage2D_PackThread(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, unsigned int a6, int a7, int a8, uint64_t a9)
{
  _QWORD *result;

  if (*(_QWORD *)(a1 + 26488) || *(_BYTE *)(a1 + 26662))
  {
    result = gleAddCommand(a1, (uint64_t)glCompressedTexImage2D_UnpackThread, 40);
    *(_DWORD *)result = a2;
    *((_DWORD *)result + 1) = a3;
    *((_DWORD *)result + 2) = a4;
    *((_DWORD *)result + 3) = a5;
    *((_DWORD *)result + 4) = a6;
    *((_DWORD *)result + 6) = a7;
    *((_DWORD *)result + 7) = a8;
    result[4] = a9;
  }
  else
  {
    (*(void (**)(uint64_t))(a1 + 27752))(a1);
    return (_QWORD *)glCompressedTexImage2D_Exec(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  }
  return result;
}

uint64_t glCompressedTexImage2D_UnpackThread(uint64_t a1, uint64_t a2)
{
  glCompressedTexImage2D_Exec(a1, *(_DWORD *)a2, *(unsigned int *)(a2 + 4), *(unsigned int *)(a2 + 8), *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28), *(_QWORD *)(a2 + 32));
  return 40;
}

_QWORD *glCompressedTexImage3D_PackThread(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, int a9, uint64_t a10)
{
  _QWORD *result;

  if (*(_QWORD *)(a1 + 26488) || *(_BYTE *)(a1 + 26662))
  {
    result = gleAddCommand(a1, (uint64_t)glCompressedTexImage3D_UnpackThread, 40);
    *(_DWORD *)result = a2;
    *((_DWORD *)result + 1) = a3;
    *((_DWORD *)result + 2) = a4;
    *((_DWORD *)result + 3) = a5;
    *((_DWORD *)result + 4) = a6;
    *((_DWORD *)result + 5) = a7;
    *((_DWORD *)result + 6) = a8;
    *((_DWORD *)result + 7) = a9;
    result[4] = a10;
  }
  else
  {
    (*(void (**)(uint64_t))(a1 + 27752))(a1);
    return (_QWORD *)glCompressedTexImage3D_Exec(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  }
  return result;
}

uint64_t glCompressedTexImage3D_UnpackThread(uint64_t a1, uint64_t a2)
{
  glCompressedTexImage3D_Exec(a1, *(_DWORD *)a2, *(unsigned int *)(a2 + 4), *(unsigned int *)(a2 + 8), *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28), *(_QWORD *)(a2 + 32));
  return 40;
}

_QWORD *glCompressedTexSubImage2D_PackThread(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, unsigned int a7, unsigned int a8, int a9, uint64_t a10)
{
  _QWORD *result;

  if (*(_QWORD *)(a1 + 26488) || *(_BYTE *)(a1 + 26662))
  {
    result = gleAddCommand(a1, (uint64_t)glCompressedTexSubImage2D_UnpackThread, 48);
    *(_DWORD *)result = a2;
    *((_DWORD *)result + 1) = a3;
    *((_DWORD *)result + 2) = a4;
    *((_DWORD *)result + 3) = a5;
    *((_DWORD *)result + 5) = a6;
    *((_DWORD *)result + 6) = a7;
    *((_DWORD *)result + 8) = a8;
    *((_DWORD *)result + 9) = a9;
    result[5] = a10;
  }
  else
  {
    (*(void (**)(uint64_t))(a1 + 27752))(a1);
    return (_QWORD *)glCompressedTexSubImage2D_Exec(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  }
  return result;
}

uint64_t glCompressedTexSubImage2D_UnpackThread(uint64_t a1, uint64_t a2)
{
  glCompressedTexSubImage2D_Exec(a1, *(_DWORD *)a2, *(unsigned int *)(a2 + 4), *(unsigned int *)(a2 + 8), *(_DWORD *)(a2 + 12), *(unsigned int *)(a2 + 20), *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 32), *(_DWORD *)(a2 + 36), *(_QWORD *)(a2 + 40));
  return 48;
}

_QWORD *glCompressedTexSubImage3D_PackThread(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, unsigned int a10, int a11, uint64_t a12)
{
  _QWORD *result;

  if (*(_QWORD *)(a1 + 26488) || *(_BYTE *)(a1 + 26662))
  {
    result = gleAddCommand(a1, (uint64_t)glCompressedTexSubImage3D_UnpackThread, 48);
    *(_DWORD *)result = a2;
    *((_DWORD *)result + 1) = a3;
    *((_DWORD *)result + 2) = a4;
    *((_DWORD *)result + 3) = a5;
    *((_DWORD *)result + 4) = a6;
    *((_DWORD *)result + 5) = a7;
    *((_DWORD *)result + 6) = a8;
    *((_DWORD *)result + 7) = a9;
    *((_DWORD *)result + 8) = a10;
    *((_DWORD *)result + 9) = a11;
    result[5] = a12;
  }
  else
  {
    (*(void (**)(uint64_t))(a1 + 27752))(a1);
    return (_QWORD *)glCompressedTexSubImage3D_Exec(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
  }
  return result;
}

uint64_t glCompressedTexSubImage3D_UnpackThread(uint64_t a1, uint64_t a2)
{
  glCompressedTexSubImage3D_Exec(a1, *(_DWORD *)a2, *(unsigned int *)(a2 + 4), *(unsigned int *)(a2 + 8), *(unsigned int *)(a2 + 12), *(_DWORD *)(a2 + 16), *(unsigned int *)(a2 + 20), *(_DWORD *)(a2 + 24), *(_QWORD *)(a2 + 28), HIDWORD(*(_QWORD *)(a2 + 28)), *(_DWORD *)(a2 + 36), *(_QWORD *)(a2 + 40));
  return 48;
}

uint64_t glCompressedTexImage2D_FlushExecThread(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, unsigned int a6, int a7, int a8, uint64_t a9)
{
  double v17;
  double v18;
  double v19;

  (*(void (**)(void))(a1 + 27752))();
  glCompressedTexImage2D_Exec(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  return glFlush_Exec(a1, v17, v18, v19);
}

uint64_t glCompressedTexSubImage2D_FlushExecThread(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, unsigned int a7, unsigned int a8, int a9, uint64_t a10)
{
  double v18;
  double v19;
  double v20;

  (*(void (**)(void))(a1 + 27752))();
  glCompressedTexSubImage2D_Exec(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  return glFlush_Exec(a1, v18, v19, v20);
}

uint64_t glMultiTexCoord4_ListExec(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 16 * (*(_DWORD *)a2 & 7) + 8560) = *(_OWORD *)(a2 + 4);
  return 20;
}

uint64_t glMultiTexCoord4f_Exec(uint64_t result, char a2, float a3, float a4, float a5, float a6)
{
  float *v6;

  v6 = (float *)(result + 16 * (a2 & 7 | 8u));
  v6[2108] = a3;
  v6[2109] = a4;
  v6[2110] = a5;
  v6[2111] = a6;
  return result;
}

float *glMultiTexCoord4f_Comp(uint64_t a1, int a2, float a3, float a4, float a5, float a6)
{
  int v10;
  float *result;

  v10 = a2 - 33984;
  result = (float *)gleAddCommand(a1, (uint64_t)glMultiTexCoord4_ListExec, 20);
  *(_DWORD *)result = v10;
  result[1] = a3;
  result[2] = a4;
  result[3] = a5;
  result[4] = a6;
  return result;
}

float32x4_t glMultiTexCoord4x_Exec(uint64_t a1, char a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6)
{
  int32x4_t v6;
  float32x4_t result;

  v6.i64[0] = __PAIR64__(a4, a3);
  v6.i64[1] = __PAIR64__(a6, a5);
  result = vmulq_f32(vcvtq_f32_s32(v6), (float32x4_t)vdupq_n_s32(0x37800000u));
  *(float32x4_t *)(a1 + 16 * (a2 & 7 | 8u) + 8432) = result;
  return result;
}

float32x4_t glMultiTexCoord4x_PackThread(uint64_t a1, int a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6)
{
  int32x4_t v6;
  int v7;
  _QWORD *v8;
  float32x4_t result;
  float32x4_t v10;

  v6.i64[0] = __PAIR64__(a4, a3);
  v6.i64[1] = __PAIR64__(a6, a5);
  v10 = vcvtq_f32_s32(v6);
  v7 = a2 - 33984;
  v8 = gleAddCommand(a1, (uint64_t)glMultiTexCoord4_ListExec, 20);
  *(_DWORD *)v8 = v7;
  result = vmulq_f32(v10, (float32x4_t)vdupq_n_s32(0x37800000u));
  *(float32x4_t *)((char *)v8 + 4) = result;
  return result;
}

uint64_t gleUpdateReadFramebufferStateInline(uint64_t a1, double a2, double a3, double a4)
{
  uint64_t v5;
  int MatrixIdentifier;
  int FramebufferState;
  __int16 v8;
  uint64_t result;

  v5 = a1 + 19152;
  if ((*(_BYTE *)(a1 + 1540) & 4) != 0)
  {
    MatrixIdentifier = gleGenerateMatrixIdentifier(a1, a1 + 9488, a2, a3, a4);
    *(_DWORD *)v5 = *(_DWORD *)v5 & 0xFFFFFEFF | ((MatrixIdentifier != -1074791426) << 8);
    *(_DWORD *)(v5 + 10580) = MatrixIdentifier;
  }
  if ((*(_BYTE *)(v5 + 10651) & 0x8A) == 0)
    return 1;
  FramebufferState = gleUpdateReadFramebufferState(a1);
  if (!FramebufferState)
    return 1;
  v8 = FramebufferState;
  if (FramebufferState == 16711680 || *(_WORD *)(a1 + 29832))
    return 0;
  result = 0;
  *(_WORD *)(a1 + 29832) = v8;
  return result;
}

_DWORD *glCopyTexSubImage2D_Comp(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9)
{
  _DWORD *result;

  result = gleAddCommand(a1, (uint64_t)glCopyTexSubImage2D_ListExec, 32);
  *result = a2;
  result[1] = a3;
  result[2] = a4;
  result[3] = a5;
  result[4] = a6;
  result[5] = a7;
  result[6] = a8;
  result[7] = a9;
  return result;
}

uint64_t glCopyTexSubImage2D_ListExec(uint64_t a1, uint64_t a2, double a3, double a4, double a5)
{
  glCopyTexSubImage2D_Exec(a1, *(_DWORD *)a2, *(unsigned int *)(a2 + 4), *(_DWORD *)(a2 + 8), *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), *(_DWORD *)(a2 + 24), a3, a4, a5, *(_DWORD *)(a2 + 28));
  return 32;
}

_DWORD *glCopyTexSubImage3D_Comp(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10)
{
  _DWORD *result;

  result = gleAddCommand(a1, (uint64_t)glCopyTexSubImage3D_ListExec, 36);
  *result = a2;
  result[1] = a3;
  result[2] = a4;
  result[3] = a5;
  result[4] = a6;
  result[5] = a7;
  result[6] = a8;
  result[7] = a9;
  result[8] = a10;
  return result;
}

uint64_t glCopyTexSubImage3D_ListExec(uint64_t a1, uint64_t a2, double a3, double a4, double a5)
{
  glCopyTexSubImage3D_Exec(a1, *(_DWORD *)a2, *(unsigned int *)(a2 + 4), *(_DWORD *)(a2 + 8), *(_DWORD *)(a2 + 12), *(unsigned int *)(a2 + 16), *(_DWORD *)(a2 + 20), *(_DWORD *)(a2 + 24), a3, a4, a5, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 32));
  return 36;
}

uint64_t glCopyTexSubImage3D_Exec(uint64_t result, int a2, uint64_t a3, int a4, int a5, uint64_t a6, unsigned int a7, unsigned int a8, double a9, double a10, double a11, int a12, int a13)
{
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  uint64_t v30;
  char v31;
  char *v32;
  char v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  char *v38;
  char v39;
  uint64_t v40;
  char v41;
  char *v42;
  char v43;
  int v44;
  _BYTE *v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  unsigned int v55;
  unsigned int v56;

  v20 = (_QWORD *)result;
  v21 = result + 29832;
  v22 = result + 19152;
  if ((*(_BYTE *)(result + 1540) & 4) != 0)
  {
    result = gleGenerateMatrixIdentifier(result, result + 9488, a9, a10, a11);
    *(_DWORD *)v22 = *(_DWORD *)v22 & 0xFFFFFEFF | (((_DWORD)result != -1074791426) << 8);
    *(_DWORD *)(v22 + 10580) = result;
  }
  if ((*(_BYTE *)(v22 + 10651) & 0x8A) != 0)
  {
    result = gleUpdateReadFramebufferState((uint64_t)v20);
    if ((_DWORD)result)
    {
      if ((_DWORD)result != 16711680 && !*(_WORD *)v21)
        *(_WORD *)v21 = result;
      return result;
    }
  }
  if (a12)
    v23 = a13 == 0;
  else
    v23 = 1;
  if (!v23)
  {
    result = gleCheckCopyTexSubImage3DArgs((uint64_t)v20, a2, a3, a4, a5, a6, a12, a13, 1);
    if (result)
    {
      v24 = result;
      if (!*(_BYTE *)(result + 770))
      {
        v25 = result + 1032;
        v26 = (int)a3;
        v51 = result + 1032 + 32 * (int)a3;
        if (!*(_QWORD *)(result + 536) && (*(_WORD *)(result + 768) & 0x800) == 0)
        {
          v48 = result + 1032;
          gfxWaitTextureOnDevices();
          v26 = (int)a3;
          v25 = v48;
        }
        if (*(unsigned __int8 *)(v24 + 976) <= (int)a3
          && *(unsigned __int8 *)(v24 + 978) >= (int)a3
          && ((1 << a3) & *(unsigned __int16 *)(v24 + 984)) != 0)
        {
          v52 = 0;
          v47 = v26;
          v49 = v25;
          if ((*(_BYTE *)(v24 + 898) & 1) != 0 && *(_DWORD *)(v24 + 884) == (_DWORD)a3)
          {
            gleGenerateEmptyMipmaps((uint64_t)v20, v24, 0, a3, *(unsigned __int8 *)(v24 + 975), 0, 0);
            if (*(_DWORD *)(v20[3621] + 480))
            {
              result = gleUpdateReadFramebufferStateInline((uint64_t)v20, v27, v28, v29);
              if (!(_DWORD)result)
                return result;
            }
            v46 = 0;
            v50 = 1;
          }
          else
          {
            v50 = 0;
            v46 = 1;
          }
          v34 = v20[3621];
          if (v34)
          {
            v35 = *(unsigned __int16 *)(v34 + 474);
            v36 = *(unsigned __int16 *)(v34 + 476);
          }
          else
          {
            v35 = *(_DWORD *)(v22 + 10480);
            v36 = *(_DWORD *)(v22 + 10484);
          }
          v56 = a7;
          v54 = a12;
          v55 = a8;
          v53 = a13;
          gleClipReadableRange((uint64_t)v20, v35, v36, (int *)&v56, (int *)&v55, &v54, &v53, (_DWORD *)&v52 + 1, &v52);
          v37 = v20[*(unsigned __int16 *)(v22 + 4616) + 2992];
          if (v37)
            v38 = (char *)(v37 + 198);
          else
            v38 = (char *)(v24 + 926);
          v39 = *v38;
          *(_DWORD *)(v24 + 968) = 65540;
          if (v54 >= 1 && v53 >= 1)
          {
            result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD, unint64_t, unint64_t))(v20[3681] + 360))(v20[3627], *(_QWORD *)(v24 + 8 * *(unsigned __int8 *)(v21 + 2667)), 0, a3, (HIDWORD(v52) + a4), (v52 + a5), a6, v56, __PAIR64__(v54, v55), __PAIR64__((v39 & 1) == 0, v53));
            if ((_DWORD)result)
            {
              if ((*(_WORD *)(v24 + 768) & 0x800) == 0)
              {
                *(_QWORD *)(v24 + 536) = v20[3628];
                v40 = v49 + 32 * v47;
                v43 = *(_BYTE *)(v40 + 11);
                v42 = (char *)(v40 + 11);
                v41 = v43;
                if ((v43 & 0x10) != 0)
                {
                  if ((v41 & 9) == 0)
                  {
                    result = gfxFreeTextureLevel();
                    v41 = *v42;
                  }
                  v41 &= ~0x10u;
                  *(_WORD *)(v24 + 996) &= ~(unsigned __int16)(1 << a3);
                }
                *v42 = v41 | 0x40;
                if ((v46 & 1) == 0)
                {
                  v44 = *(unsigned __int8 *)(v24 + 975);
                  if (v44 > (int)a3)
                  {
                    v45 = (_BYTE *)(v24 + 32 * a3 + 1075);
                    do
                    {
                      *v45 |= 0x40u;
                      v45 += 32;
                      LODWORD(a3) = a3 + 1;
                    }
                    while ((int)a3 < v44);
                  }
                }
              }
              return result;
            }
          }
          v26 = v47;
          v25 = v49;
        }
        else
        {
          v50 = 0;
        }
        v30 = v25 + 32 * v26;
        v33 = *(_BYTE *)(v30 + 11);
        v32 = (char *)(v30 + 11);
        v31 = v33;
        if ((v33 & 0x40) != 0)
        {
          gleSynchronizeTextureLevelOnCurrentDevices((uint64_t)v20, v24);
        }
        else if ((v31 & 0x10) == 0)
        {
          if (!*(_QWORD *)(v25 + 32 * v26 + 24))
          {
            if (!gfxAllocateTextureLevel())
            {
              if (!*(_WORD *)v21)
                *(_WORD *)v21 = 1285;
              goto LABEL_33;
            }
            v31 = *v32;
          }
          *v32 = v31 | 0x10;
        }
LABEL_33:
        gfxModifyPluginTextureLevel();
        if ((*(_WORD *)(v24 + 768) & 0x800) == 0)
          (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(v20[3687] + 280))(v20[3683], 1, 0, *(_QWORD *)(v24 + 8 * *(unsigned __int8 *)(v21 + 2668)));
        if ((*v32 & 0x10) != 0)
          gleTextureSubImageCopy((uint64_t)v20, v24, v51, a4, a5, a6, a7, a8, a12, a13);
        if ((*(_BYTE *)(v24 + 898) & 1) == 0)
          return gleDirtyTextureLevelCurrentBindPointsData((uint64_t)v20, v24, v51);
        if (*(_DWORD *)(v24 + 884) != (_DWORD)a3)
          return gleDirtyTextureLevelCurrentBindPointsData((uint64_t)v20, v24, v51);
        result = gleGenMipmaps((uint64_t)v20, v24, 0, a3, 1, v50 == 0);
        if (!(_DWORD)result)
          return gleDirtyTextureLevelCurrentBindPointsData((uint64_t)v20, v24, v51);
      }
    }
  }
  return result;
}

_QWORD *glTexEnvf_Comp(uint64_t a1, int a2, int a3, float a4)
{
  _QWORD *result;

  result = gleAddCommand(a1, (uint64_t)glTexEnvf_ListExec, 12);
  *(_DWORD *)result = a2;
  *((_DWORD *)result + 1) = a3;
  *((float *)result + 2) = a4;
  return result;
}

uint64_t glTexEnvf_ListExec(uint64_t a1, int *a2, double a3)
{
  LODWORD(a3) = a2[2];
  glTexEnvf_Exec(a1, *a2, a2[1], a3);
  return 12;
}

uint64_t glTexEnvx_Exec(uint64_t a1, int a2, int a3, int a4, double a5)
{
  if (a3 == 3356 || a3 == 34163 || a3 == 34049)
    *(float *)&a5 = (float)a4 * 0.000015259;
  else
    *(float *)&a5 = (float)a4;
  return glTexEnvf_Exec(a1, a2, a3, a5);
}

_QWORD *glTexEnvx_PackThread(uint64_t a1, int a2, int a3, int a4)
{
  float v6;
  _QWORD *result;

  if (a3 == 3356 || a3 == 34163 || a3 == 34049)
    v6 = (float)a4 * 0.000015259;
  else
    v6 = (float)a4;
  result = gleAddCommand(a1, (uint64_t)glTexEnvf_ListExec, 12);
  *(_DWORD *)result = a2;
  *((_DWORD *)result + 1) = a3;
  *((float *)result + 2) = v6;
  return result;
}

float glTexEnvfv_Comp(uint64_t a1, int a2, int a3, uint64_t a4)
{
  _QWORD *v7;
  float result;

  v7 = gleAddCommand(a1, (uint64_t)glTexEnvfv_ListExec, 24);
  if (a2 == 8960 && a3 == 8705)
  {
    *v7 = 0x220100002300;
    *((_DWORD *)v7 + 2) = *(_DWORD *)a4;
    *((_DWORD *)v7 + 3) = *(_DWORD *)(a4 + 4);
    *((_DWORD *)v7 + 4) = *(_DWORD *)(a4 + 8);
    result = *(float *)(a4 + 12);
    *((float *)v7 + 5) = result;
  }
  else
  {
    *(_DWORD *)v7 = a2;
    *((_DWORD *)v7 + 1) = a3;
    result = *(float *)a4;
    *((_DWORD *)v7 + 2) = *(_DWORD *)a4;
  }
  return result;
}

uint64_t glTexEnvfv_ListExec(uint64_t a1, int *a2)
{
  glTexEnvfv_Exec(a1, *a2, a2[1], (uint64_t)(a2 + 2));
  return 24;
}

uint64_t glTexEnvxv_Exec(uint64_t a1, int a2, int a3, int32x4_t *a4)
{
  float v4;
  float32x4_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (a3 > 34048)
  {
    if (a3 != 34163 && a3 != 34049)
      goto LABEL_8;
LABEL_7:
    v4 = (float)a4->i32[0] * 0.000015259;
LABEL_9:
    v6.f32[0] = v4;
    return glTexEnvfv_Exec(a1, a2, a3, (uint64_t)&v6);
  }
  if (a3 == 3356)
    goto LABEL_7;
  if (a3 != 8705)
  {
LABEL_8:
    v4 = (float)a4->i32[0];
    goto LABEL_9;
  }
  v6 = vmulq_f32(vcvtq_f32_s32(*a4), (float32x4_t)vdupq_n_s32(0x37800000u));
  return glTexEnvfv_Exec(a1, a2, a3, (uint64_t)&v6);
}

float glTexEnvxv_PackThread(uint64_t a1, int a2, int a3, int32x4_t *a4)
{
  float v4;
  float32x4_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (a3 > 34048)
  {
    if (a3 != 34163 && a3 != 34049)
      goto LABEL_8;
LABEL_7:
    v4 = (float)a4->i32[0] * 0.000015259;
LABEL_9:
    v6.f32[0] = v4;
    return glTexEnvfv_Comp(a1, a2, a3, (uint64_t)&v6);
  }
  if (a3 == 3356)
    goto LABEL_7;
  if (a3 != 8705)
  {
LABEL_8:
    v4 = (float)a4->i32[0];
    goto LABEL_9;
  }
  v6 = vmulq_f32(vcvtq_f32_s32(*a4), (float32x4_t)vdupq_n_s32(0x37800000u));
  return glTexEnvfv_Comp(a1, a2, a3, (uint64_t)&v6);
}

_DWORD *glTexEnvi_Comp(uint64_t a1, int a2, int a3, int a4)
{
  _DWORD *result;

  result = gleAddCommand(a1, (uint64_t)glTexEnvi_ListExec, 12);
  *result = a2;
  result[1] = a3;
  result[2] = a4;
  return result;
}

uint64_t glTexEnvi_ListExec(uint64_t a1, int *a2, double a3)
{
  glTexEnvi_Exec(a1, *a2, a2[1], a2[2], a3);
  return 12;
}

_QWORD *glTexEnviv_Comp(uint64_t a1, int a2, int a3, _DWORD *a4)
{
  _QWORD *result;

  result = gleAddCommand(a1, (uint64_t)glTexEnviv_ListExec, 24);
  if (a2 == 8960 && a3 == 8705)
  {
    *result = 0x220100002300;
    *((_DWORD *)result + 2) = *a4;
    *((_DWORD *)result + 3) = a4[1];
    *((_DWORD *)result + 4) = a4[2];
    *((_DWORD *)result + 5) = a4[3];
  }
  else
  {
    *(_DWORD *)result = a2;
    *((_DWORD *)result + 1) = a3;
    *((_DWORD *)result + 2) = *a4;
  }
  return result;
}

uint64_t glTexEnviv_ListExec(uint64_t a1, uint64_t a2, double a3)
{
  glTexEnviv_Exec(a1, *(_DWORD *)a2, *(_DWORD *)(a2 + 4), (int32x4_t *)(a2 + 8), a3);
  return 24;
}

uint64_t glTexEnviv_Exec(uint64_t result, int a2, int a3, int32x4_t *a4, double a5)
{
  uint64_t v5;
  int v6;
  int v7;
  __int16 v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  float32x4_t *v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v30;
  const float *v31;
  float32x4_t v32;
  float32x4_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;

  v5 = *(unsigned __int16 *)(result + 23768);
  if (a2 == 8960)
  {
    if (v5 >= 8)
      goto LABEL_10;
    if (a3 > 34161)
    {
      switch(a3)
      {
        case 34176:
          v9 = a4->i32[0];
          if ((a4->i32[0] - 34166) >= 3 && v9 != 5890)
            goto LABEL_116;
          v10 = result + 76 * *(unsigned __int16 *)(result + 23768);
          v11 = 15696;
          goto LABEL_113;
        case 34177:
          v9 = a4->i32[0];
          if ((a4->i32[0] - 34166) >= 3 && v9 != 5890)
            goto LABEL_116;
          v10 = result + 76 * *(unsigned __int16 *)(result + 23768);
          v11 = 15698;
          goto LABEL_113;
        case 34178:
          v9 = a4->i32[0];
          if ((a4->i32[0] - 34166) >= 3 && v9 != 5890)
            goto LABEL_116;
          v10 = result + 76 * *(unsigned __int16 *)(result + 23768);
          v11 = 15700;
          goto LABEL_113;
        case 34179:
        case 34180:
        case 34181:
        case 34182:
        case 34183:
        case 34187:
        case 34188:
        case 34189:
        case 34190:
        case 34191:
        case 34195:
        case 34196:
        case 34197:
        case 34198:
        case 34199:
          goto LABEL_116;
        case 34184:
          v9 = a4->i32[0];
          if ((a4->i32[0] - 34166) >= 3 && v9 != 5890)
            goto LABEL_116;
          v10 = result + 76 * *(unsigned __int16 *)(result + 23768);
          v11 = 15702;
          goto LABEL_113;
        case 34185:
          v9 = a4->i32[0];
          if ((a4->i32[0] - 34166) >= 3 && v9 != 5890)
            goto LABEL_116;
          v10 = result + 76 * *(unsigned __int16 *)(result + 23768);
          v11 = 15704;
          goto LABEL_113;
        case 34186:
          v9 = a4->i32[0];
          if ((a4->i32[0] - 34166) >= 3 && v9 != 5890)
            goto LABEL_116;
          v10 = result + 76 * *(unsigned __int16 *)(result + 23768);
          v11 = 15706;
          goto LABEL_113;
        case 34192:
          v9 = a4->i32[0];
          if ((a4->i32[0] & 0xFFFFFFFC) != 0x300)
            goto LABEL_116;
          v10 = result + 76 * *(unsigned __int16 *)(result + 23768);
          v11 = 15708;
          goto LABEL_113;
        case 34193:
          v9 = a4->i32[0];
          if ((a4->i32[0] & 0xFFFFFFFC) != 0x300)
            goto LABEL_116;
          v10 = result + 76 * *(unsigned __int16 *)(result + 23768);
          v11 = 15710;
          goto LABEL_113;
        case 34194:
          v9 = a4->i32[0];
          if ((a4->i32[0] & 0xFFFFFFFC) != 0x300)
            goto LABEL_116;
          v10 = result + 76 * *(unsigned __int16 *)(result + 23768);
          v11 = 15712;
          goto LABEL_113;
        case 34200:
          v9 = a4->i32[0];
          if ((a4->i32[0] & 0xFFFFFFFE) != 0x302)
            goto LABEL_116;
          v10 = result + 76 * *(unsigned __int16 *)(result + 23768);
          v11 = 15714;
          goto LABEL_113;
        case 34201:
          v9 = a4->i32[0];
          if ((a4->i32[0] & 0xFFFFFFFE) != 0x302)
            goto LABEL_116;
          v10 = result + 76 * *(unsigned __int16 *)(result + 23768);
          v11 = 15716;
          goto LABEL_113;
        case 34202:
          v9 = a4->i32[0];
          if ((a4->i32[0] & 0xFFFFFFFE) != 0x302)
            goto LABEL_116;
          v10 = result + 76 * *(unsigned __int16 *)(result + 23768);
          v11 = 15718;
          goto LABEL_113;
        default:
          if (a3 != 34162)
          {
            if (a3 != 34163)
              goto LABEL_116;
            v20 = a4->i32[0];
            if (a4->i32[0] <= 4u && ((1 << v20) & 0x16) != 0)
            {
              *(float *)(result + 76 * *(unsigned __int16 *)(result + 23768) + 15720) = (float)v20;
              goto LABEL_114;
            }
            goto LABEL_96;
          }
          v9 = a4->i32[0];
          if (a4->i32[0] > 34022)
          {
            if ((v9 - 34164) >= 2)
            {
              v34 = 34023;
LABEL_111:
              if (v9 != v34)
                goto LABEL_116;
            }
          }
          else if (v9 != 260 && v9 != 7681)
          {
            v34 = 8448;
            goto LABEL_111;
          }
          v10 = result + 76 * *(unsigned __int16 *)(result + 23768);
          v11 = 15694;
          goto LABEL_113;
      }
    }
    if (a3 <= 8704)
    {
      if (a3 == 3356)
      {
        v21 = a4->i32[0];
        if (a4->i32[0] > 4u || ((1 << v21) & 0x16) == 0)
        {
LABEL_96:
          if (!*(_WORD *)(result + 29832))
            *(_WORD *)(result + 29832) = 1281;
          goto LABEL_114;
        }
        *(float *)(result + 76 * *(unsigned __int16 *)(result + 23768) + 15724) = (float)v21;
LABEL_114:
        *(_DWORD *)(result + 28652) = 0;
LABEL_115:
        *(_DWORD *)(result + 1548) |= 0x20000u;
        return result;
      }
      if (a3 != 8704)
        goto LABEL_116;
      v9 = a4->i32[0];
      if (a4->i32[0] > 8447)
      {
        if ((v9 - 8448) >= 2)
        {
          v18 = 34160;
LABEL_89:
          if (v9 != v18)
            goto LABEL_116;
        }
      }
      else if (v9 != 260 && v9 != 3042)
      {
        v18 = 7681;
        goto LABEL_89;
      }
      v10 = result + 76 * *(unsigned __int16 *)(result + 23768);
      v11 = 15688;
LABEL_113:
      *(_WORD *)(v10 + v11) = v9;
      goto LABEL_114;
    }
    if (a3 == 8705)
    {
      v22 = (float32x4_t *)(result + 16 * v5);
      v23.i64[0] = 0x3000000030000000;
      v23.i64[1] = 0x3000000030000000;
      v24 = vmulq_f32(vcvtq_f32_s32(*a4), v23);
      __asm { FMOV            V1.4S, #-1.0 }
      v30 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(_Q1, v24), (int8x16_t)_Q1, (int8x16_t)v24);
      v22[1488] = v30;
      if (*(_BYTE *)(result + 15178))
      {
        v31 = (const float *)(result + 288);
        v32 = vld1q_dup_f32(v31);
        v33 = vmaxnmq_f32(v30, v32);
      }
      else
      {
        v33 = v22[1488];
      }
      *(float32x4_t *)(result + 76 * v5 + 15652) = v33;
      if (*(__int16 *)(result + 23772) <= v5)
        *(_WORD *)(result + 23772) = v5 + 1;
      v35 = *(_QWORD *)(result + 19248);
      if (v35)
      {
        v36 = *(unsigned __int16 *)(v35 + 2 * v5 + 3736);
        if (v36 <= 0x3FF)
        {
          *(_DWORD *)(result + ((v36 >> 3) & 0x1FFC) + 1552) |= 1 << v36;
          *(_DWORD *)(result + 28652) = 0;
          *(_DWORD *)(result + 1532) |= 0x800000u;
        }
      }
      v37 = *(_QWORD *)(result + 19272);
      if (v37)
      {
        v38 = *(unsigned __int16 *)(v37 + 2 * v5 + 3736);
        if (v38 <= 0x3FF)
        {
          *(_DWORD *)(result + ((v38 >> 3) & 0x1FFC) + 1936) |= 1 << v38;
          *(_DWORD *)(result + 28652) = 0;
          *(_DWORD *)(result + 1532) |= 0x4000000u;
        }
      }
      v39 = *(_QWORD *)(result + 19280);
      if (!v39)
        return result;
      v17 = *(unsigned __int16 *)(v39 + 2 * v5 + 3736);
      goto LABEL_28;
    }
    if (a3 != 34161)
      goto LABEL_116;
    v9 = a4->i32[0];
    if (a4->i32[0] > 34022)
    {
      if ((v9 - 34164) >= 2 && (v9 - 34478) >= 2)
      {
        v19 = 34023;
LABEL_94:
        if (v9 != v19)
          goto LABEL_116;
      }
    }
    else if (v9 != 260 && v9 != 7681)
    {
      v19 = 8448;
      goto LABEL_94;
    }
    v10 = result + 76 * *(unsigned __int16 *)(result + 23768);
    v11 = 15692;
    goto LABEL_113;
  }
  if (a2 == 34048)
  {
    if (a3 != 34049)
      goto LABEL_116;
    *(float *)&a5 = (float)a4->i32[0];
    *(_DWORD *)(result + 2272 + 4 * v5 + 13988) = LODWORD(a5);
    *(int32x4_t *)(result + 2272 + 76 * v5 + 13396) = vdupq_lane_s32(*(int32x2_t *)&a5, 0);
    if ((*(_WORD *)(*(_QWORD *)(result + 29032) + 26) & 0x2000) == 0)
    {
      *(_DWORD *)(result + 28652) = 0;
      *(_DWORD *)(result + 1536) |= 0x10000 << (v5 & 7);
      return result;
    }
    v12 = *(_QWORD *)(result + 19248);
    if (v12)
    {
      v13 = *(unsigned __int16 *)(v12 + 2 * v5 + 3752);
      if (v13 <= 0x3FF)
      {
        *(_DWORD *)(result + ((v13 >> 3) & 0x1FFC) + 1552) |= 1 << v13;
        *(_DWORD *)(result + 28652) = 0;
        *(_DWORD *)(result + 1532) |= 0x800000u;
      }
    }
    v14 = *(_QWORD *)(result + 19272);
    if (v14)
    {
      v15 = *(unsigned __int16 *)(v14 + 2 * v5 + 3752);
      if (v15 <= 0x3FF)
      {
        *(_DWORD *)(result + ((v15 >> 3) & 0x1FFC) + 1936) |= 1 << v15;
        *(_DWORD *)(result + 28652) = 0;
        *(_DWORD *)(result + 1532) |= 0x4000000u;
      }
    }
    v16 = *(_QWORD *)(result + 19280);
    if (!v16)
      return result;
    v17 = *(unsigned __int16 *)(v16 + 2 * v5 + 3752);
LABEL_28:
    if (v17 <= 0x3FF)
    {
      *(_DWORD *)(result + ((v17 >> 3) & 0x1FFC) + 2064) |= 1 << v17;
      *(_DWORD *)(result + 28652) = 0;
      *(_DWORD *)(result + 1532) |= 0x8000000u;
    }
    return result;
  }
  if (a2 != 34913 || a3 != 34914)
    goto LABEL_116;
  if (v5 >= 8)
  {
LABEL_10:
    if (*(_WORD *)(result + 29832))
      return result;
    v8 = 1282;
    goto LABEL_119;
  }
  if (a4->i32[0] >= 2u)
  {
LABEL_116:
    if (*(_WORD *)(result + 29832))
      return result;
    v8 = 1280;
LABEL_119:
    *(_WORD *)(result + 29832) = v8;
    return result;
  }
  v6 = 1 << v5;
  if (a4->i32[0] == 1)
    v7 = *(_DWORD *)(result + 15384) | v6;
  else
    v7 = *(_DWORD *)(result + 15384) & ~v6;
  *(_DWORD *)(result + 15384) = v7;
  *(_DWORD *)(result + 28652) = 0;
  *(_DWORD *)(result + 1520) |= 0x400000u;
  if ((*(_BYTE *)(*(_QWORD *)(result + 29032) + 27) & 8) != 0)
    goto LABEL_115;
  return result;
}

double glGetTexEnviv_ExecThread(uint64_t a1, int a2, int a3, int32x4_t *a4)
{
  int32x4_t v8;
  double v9;
  double result;

  (*(void (**)(void))(a1 + 27752))();
  *(_QWORD *)&result = glGetTexEnviv_Exec(a1, a2, a3, a4, v8, v9).u64[0];
  return result;
}

int32x4_t glGetTexEnviv_Exec(uint64_t a1, int a2, int a3, int32x4_t *a4, int32x4_t result, double a6)
{
  uint64_t v6;
  int v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  float32x4_t *v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;

  v6 = *(unsigned __int16 *)(a1 + 23768);
  if (a2 == 8960)
  {
    if (v6 >= 8)
      goto LABEL_9;
    if (a3 > 34161)
    {
      switch(a3)
      {
        case 34176:
          v9 = a1 + 76 * *(unsigned __int16 *)(a1 + 23768);
          v10 = 15696;
          goto LABEL_47;
        case 34177:
          v9 = a1 + 76 * *(unsigned __int16 *)(a1 + 23768);
          v10 = 15698;
          goto LABEL_47;
        case 34178:
          v9 = a1 + 76 * *(unsigned __int16 *)(a1 + 23768);
          v10 = 15700;
          goto LABEL_47;
        case 34179:
        case 34180:
        case 34181:
        case 34182:
        case 34183:
        case 34187:
        case 34188:
        case 34189:
        case 34190:
        case 34191:
        case 34195:
        case 34196:
        case 34197:
        case 34198:
        case 34199:
          goto LABEL_28;
        case 34184:
          v9 = a1 + 76 * *(unsigned __int16 *)(a1 + 23768);
          v10 = 15702;
          goto LABEL_47;
        case 34185:
          v9 = a1 + 76 * *(unsigned __int16 *)(a1 + 23768);
          v10 = 15704;
          goto LABEL_47;
        case 34186:
          v9 = a1 + 76 * *(unsigned __int16 *)(a1 + 23768);
          v10 = 15706;
          goto LABEL_47;
        case 34192:
          v9 = a1 + 76 * *(unsigned __int16 *)(a1 + 23768);
          v10 = 15708;
          goto LABEL_47;
        case 34193:
          v9 = a1 + 76 * *(unsigned __int16 *)(a1 + 23768);
          v10 = 15710;
          goto LABEL_47;
        case 34194:
          v9 = a1 + 76 * *(unsigned __int16 *)(a1 + 23768);
          v10 = 15712;
          goto LABEL_47;
        case 34200:
          v9 = a1 + 76 * *(unsigned __int16 *)(a1 + 23768);
          v10 = 15714;
          goto LABEL_47;
        case 34201:
          v9 = a1 + 76 * *(unsigned __int16 *)(a1 + 23768);
          v10 = 15716;
          goto LABEL_47;
        case 34202:
          v9 = a1 + 76 * *(unsigned __int16 *)(a1 + 23768);
          v10 = 15718;
          goto LABEL_47;
        default:
          if (a3 == 34162)
          {
            v9 = a1 + 76 * *(unsigned __int16 *)(a1 + 23768);
            v10 = 15694;
            goto LABEL_47;
          }
          if (a3 != 34163)
            goto LABEL_28;
          result.i32[0] = *(_DWORD *)(a1 + 76 * *(unsigned __int16 *)(a1 + 23768) + 15720);
          break;
      }
      goto LABEL_13;
    }
    if (a3 > 8704)
    {
      if (a3 == 8705)
      {
        v11 = (float32x4_t *)(a1 + 76 * *(unsigned __int16 *)(a1 + 23768) + 15652);
        if (*(_BYTE *)(a1 + 15178))
        {
          v12 = *v11;
        }
        else
        {
          result.i32[0] = *(_DWORD *)(a1 + 292);
          *(float *)&a6 = -*(float *)result.i32;
          v13 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a6, 0);
          v14 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)result.i8, 0);
          v12 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v13, *v11), (int8x16_t)v13, vbslq_s8((int8x16_t)vcgtq_f32(*v11, v14), (int8x16_t)v14, *(int8x16_t *)v11));
        }
        v15.i64[0] = 0xB1000000B1000000;
        v15.i64[1] = 0xB1000000B1000000;
        result = vaddq_s32(vcvtq_s32_f32(vmulq_f32(v12, v15)), vcvtq_s32_f32(vmulq_f32(v12, (float32x4_t)vdupq_n_s32(0x42FFFFFEu))));
        *a4 = result;
        return result;
      }
      if (a3 != 34161)
        goto LABEL_28;
      v9 = a1 + 76 * *(unsigned __int16 *)(a1 + 23768);
      v10 = 15692;
    }
    else
    {
      if (a3 == 3356)
      {
        result.i32[0] = *(_DWORD *)(a1 + 76 * *(unsigned __int16 *)(a1 + 23768) + 15724);
LABEL_13:
        v7 = (int)*(float *)result.i32;
LABEL_48:
        a4->i32[0] = v7;
        return result;
      }
      if (a3 != 8704)
        goto LABEL_28;
      v9 = a1 + 76 * *(unsigned __int16 *)(a1 + 23768);
      v10 = 15688;
    }
LABEL_47:
    v7 = *(unsigned __int16 *)(v9 + v10);
    goto LABEL_48;
  }
  if (a2 == 34048)
  {
    if (a3 != 34049)
      goto LABEL_28;
    result.i32[0] = *(_DWORD *)(a1 + 4 * v6 + 16260);
    goto LABEL_13;
  }
  if (a2 == 34913 && a3 == 34914)
  {
    if (v6 < 8)
    {
      if ((((unint64_t)*(unsigned int *)(a1 + 15384) >> v6) & 1) == 0)
      {
        a4->i32[0] = 0;
        return result;
      }
      v7 = 1;
      goto LABEL_48;
    }
LABEL_9:
    if (!*(_WORD *)(a1 + 29832))
    {
      v8 = 1282;
LABEL_31:
      *(_WORD *)(a1 + 29832) = v8;
      return result;
    }
    return result;
  }
LABEL_28:
  if (!*(_WORD *)(a1 + 29832))
  {
    v8 = 1280;
    goto LABEL_31;
  }
  return result;
}

uint64_t glGetTexEnvfv_ExecThread(uint64_t a1, int a2, int a3, float *a4)
{
  float v8;

  (*(void (**)(void))(a1 + 27752))();
  return glGetTexEnvfv_Exec(a1, a2, a3, a4, v8);
}

uint64_t glGetTexEnvfv_Exec(uint64_t result, int a2, int a3, float *a4, float a5)
{
  uint64_t v5;
  __int16 v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  float *v10;

  v5 = *(unsigned __int16 *)(result + 23768);
  if (a2 == 8960)
  {
    if (v5 >= 8)
      goto LABEL_9;
    if (a3 > 34161)
    {
      switch(a3)
      {
        case 34176:
          v8 = result + 76 * *(unsigned __int16 *)(result + 23768);
          v9 = 15696;
          goto LABEL_45;
        case 34177:
          v8 = result + 76 * *(unsigned __int16 *)(result + 23768);
          v9 = 15698;
          goto LABEL_45;
        case 34178:
          v8 = result + 76 * *(unsigned __int16 *)(result + 23768);
          v9 = 15700;
          goto LABEL_45;
        case 34179:
        case 34180:
        case 34181:
        case 34182:
        case 34183:
        case 34187:
        case 34188:
        case 34189:
        case 34190:
        case 34191:
        case 34195:
        case 34196:
        case 34197:
        case 34198:
        case 34199:
          goto LABEL_27;
        case 34184:
          v8 = result + 76 * *(unsigned __int16 *)(result + 23768);
          v9 = 15702;
          goto LABEL_45;
        case 34185:
          v8 = result + 76 * *(unsigned __int16 *)(result + 23768);
          v9 = 15704;
          goto LABEL_45;
        case 34186:
          v8 = result + 76 * *(unsigned __int16 *)(result + 23768);
          v9 = 15706;
          goto LABEL_45;
        case 34192:
          v8 = result + 76 * *(unsigned __int16 *)(result + 23768);
          v9 = 15708;
          goto LABEL_45;
        case 34193:
          v8 = result + 76 * *(unsigned __int16 *)(result + 23768);
          v9 = 15710;
          goto LABEL_45;
        case 34194:
          v8 = result + 76 * *(unsigned __int16 *)(result + 23768);
          v9 = 15712;
          goto LABEL_45;
        case 34200:
          v8 = result + 76 * *(unsigned __int16 *)(result + 23768);
          v9 = 15714;
          goto LABEL_45;
        case 34201:
          v8 = result + 76 * *(unsigned __int16 *)(result + 23768);
          v9 = 15716;
          goto LABEL_45;
        case 34202:
          v8 = result + 76 * *(unsigned __int16 *)(result + 23768);
          v9 = 15718;
          goto LABEL_45;
        default:
          if (a3 == 34162)
          {
            v8 = result + 76 * *(unsigned __int16 *)(result + 23768);
            v9 = 15694;
            goto LABEL_45;
          }
          if (a3 != 34163)
            goto LABEL_27;
          v7 = *(float *)(result + 76 * *(unsigned __int16 *)(result + 23768) + 15720);
          break;
      }
      goto LABEL_46;
    }
    if (a3 > 8704)
    {
      if (a3 == 8705)
      {
        v10 = (float *)(result + 76 * *(unsigned __int16 *)(result + 23768));
        *a4 = v10[3913];
        a4[1] = v10[3914];
        a4[2] = v10[3915];
        a4[3] = v10[3916];
        return result;
      }
      if (a3 != 34161)
        goto LABEL_27;
      v8 = result + 76 * *(unsigned __int16 *)(result + 23768);
      v9 = 15692;
    }
    else
    {
      if (a3 == 3356)
      {
        v7 = *(float *)(result + 76 * *(unsigned __int16 *)(result + 23768) + 15724);
        goto LABEL_46;
      }
      if (a3 != 8704)
      {
LABEL_27:
        if (*(_WORD *)(result + 29832))
          return result;
        v6 = 1280;
LABEL_30:
        *(_WORD *)(result + 29832) = v6;
        return result;
      }
      v8 = result + 76 * *(unsigned __int16 *)(result + 23768);
      v9 = 15688;
    }
LABEL_45:
    LOWORD(a5) = *(_WORD *)(v8 + v9);
    v7 = (float)LODWORD(a5);
    goto LABEL_46;
  }
  if (a2 == 34048)
  {
    if (a3 == 34049)
    {
      v7 = *(float *)(result + 4 * v5 + 16260);
LABEL_46:
      *a4 = v7;
      return result;
    }
    goto LABEL_27;
  }
  if (a2 != 34913 || a3 != 34914)
    goto LABEL_27;
  if (v5 >= 8)
  {
LABEL_9:
    if (*(_WORD *)(result + 29832))
      return result;
    v6 = 1282;
    goto LABEL_30;
  }
  if ((((unint64_t)*(unsigned int *)(result + 15384) >> v5) & 1) != 0)
    *a4 = 1.0;
  else
    *a4 = 0.0;
  return result;
}

uint64_t glGetTexEnvxv_Exec(uint64_t a1, int a2, int a3, int32x4_t *a4, float a5)
{
  uint64_t result;
  float32x4_t v8;
  float32x4_t v9;
  float v10;
  float32x4_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  result = glGetTexEnvfv_Exec(a1, a2, a3, v11.f32, a5);
  if (a3 > 34048)
  {
    if (a3 != 34163 && a3 != 34049)
      return result;
  }
  else if (a3 != 3356)
  {
    if (a3 == 8705)
    {
      v8.i64[0] = 0x3F0000003F000000;
      v8.i64[1] = 0x3F0000003F000000;
      v9 = vmlaq_f32(v8, (float32x4_t)vdupq_n_s32(0x47800000u), v11);
      *a4 = vcvtq_s32_f32((float32x4_t)vbslq_s8((int8x16_t)vcgezq_f32(v9), (int8x16_t)v9, (int8x16_t)vaddq_f32(v9, (float32x4_t)vdupq_n_s32(0xBF7FFE5D))));
    }
    return result;
  }
  v10 = (float)(v11.f32[0] * 65536.0) + 0.5;
  if (v10 < 0.0)
    v10 = v10 + -0.99998;
  a4->i32[0] = (int)v10;
  return result;
}

uint64_t glGetTexEnvxv_ExecThread(uint64_t a1, int a2, int a3, int32x4_t *a4)
{
  float v8;

  v8 = (*(float (**)(void))(a1 + 27752))();
  return glGetTexEnvxv_Exec(a1, a2, a3, a4, v8);
}

void glGetTexImage_Exec(uint64_t a1, int a2, uint64_t a3, unsigned int a4, int a5, uint64_t a6)
{
  __int16 *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  int v22;
  BOOL v23;
  int v24;
  int v25;
  unsigned int v26;
  _BOOL4 v28;
  uint64_t v29;
  unsigned __int16 *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _WORD *v35;
  char v36;
  uint64_t v37;
  _WORD *v38;
  __int16 v39;
  _QWORD *v40;
  uint64_t v41;
  _WORD *v42;
  unsigned __int8 *v43;
  uint64_t v44;
  _BYTE *v45;
  unsigned __int16 *v46;
  char v47;
  _QWORD *v48;
  uint64_t v49;
  unsigned __int16 *v50;
  int v51;
  int v52;
  uint64_t v53;
  _WORD *v54;
  unsigned int v55;
  unsigned __int16 *v56;
  int8x8_t v57;
  int v58;
  int CompressedImageBytes;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unsigned __int16 *v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  __int16 v69;
  char v70;
  _QWORD *v71;
  __int16 v72;
  char v73;
  _WORD *v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  __int16 v78;
  uint64_t v79;
  char *v80;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;

  v11 = (__int16 *)(a1 + 29832);
  v12 = glePixelStorageFromFormatType(a1, a4, a5);
  if (a2 == 36161)
  {
    a3 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = *(_QWORD *)(a1 + 28952) + 40;
  }
  else
  {
    v17 = gleLookUpNonProxyTexture(a1, a2);
    if ((a2 - 34069) >= 6)
      v13 = 0;
    else
      v13 = (a2 - 34069);
    if (!v17)
    {
      if (*v11)
        return;
      v69 = 1280;
      goto LABEL_104;
    }
    if (a3 >= 0xF || (v16 = v17, v15 = a3, v14 = v13, a2 == 34037) && (_DWORD)a3)
    {
      if (*v11)
        return;
      v69 = 1281;
      goto LABEL_104;
    }
  }
  if ((v12 & 0x800000000000000) == 0)
  {
    if (*v11)
      return;
    if ((v12 & 0x4000000000000000) != 0)
      v69 = 1282;
    else
      v69 = 1280;
LABEL_104:
    *v11 = v69;
    return;
  }
  v18 = v12 & 0xF;
  v19 = v16 + 480 * v14 + 32 * v15;
  v20 = *(unsigned __int16 *)(v19 + 1048);
  if (v18 == 9)
  {
    v21 = v20 == 6400;
    v20 = 6400;
    if (!v21)
      goto LABEL_107;
  }
  v21 = v18 == 10 || v18 == 12;
  v22 = v21;
  v23 = v20 == 6402 || v20 == 34041;
  v24 = v23;
  if (v22 != v24 || v18 == 12 && v20 != 34041)
    goto LABEL_107;
  v25 = *(unsigned __int16 *)(v16 + 960);
  v26 = v25 - 36208;
  v28 = v25 == 36975 || (v25 - 33329) < 0xC;
  if (v26 < 0x24)
    v28 = 1;
  if (v12 >> 31 != v28)
  {
LABEL_107:
    if (*v11)
      return;
    v69 = 1282;
    goto LABEL_104;
  }
  v79 = v13;
  v77 = a5;
  v29 = *(_QWORD *)(a1 + 19328);
  if (!v29
    || (v30 = (unsigned __int16 *)(v16 + 480 * v14 + 32 * v15),
        v31 = v14,
        v32 = gleOffsetLimitStorage3D((int *)(a1 + 18448), v30[518], v30[519], v30[520], v12, a6),
        v33 = gleHandlePackBufferInEngineNoClientState(a1, v29, v32, (HIDWORD(v12) & 0x1F) + 1, a6),
        v14 = v31,
        (a6 = v33) != 0))
  {
    v34 = v16 + 480 * v14 + 32 * v15;
    if ((*(_BYTE *)(v34 + 1043) & 0x20) != 0 && !*(_BYTE *)(v16 + 770))
    {
      v35 = (_WORD *)(v19 + 1048);
      if ((*(_WORD *)(a1 + 32493) & 0x2000) != 0 && (*(_BYTE *)(v16 + 980) || (*(_WORD *)(v16 + 768) & 0x800) != 0))
      {
        if (a3 >= *(unsigned __int8 *)(v16 + 976) && a3 <= *(unsigned __int8 *)(v16 + 978))
        {
          v78 = *v35;
          v37 = v16 + 480 * v14 + 32 * v15;
          v74 = (_WORD *)(v37 + 1050);
          v72 = *(_WORD *)(v37 + 1050);
          v38 = (_WORD *)(v37 + 1044);
          v39 = *(_WORD *)(v37 + 1044);
          *v35 = a4;
          *(_WORD *)(v37 + 1050) = v77;
          *(_WORD *)(v37 + 1044) = *(_WORD *)(v37 + 1036);
          v40 = (_QWORD *)(v37 + 1056);
          *(_QWORD *)(v37 + 1056) = a6;
          v41 = *(_QWORD *)(v16 + 536);
          if (v41)
          {
            v42 = v35;
            v43 = (unsigned __int8 *)(a1 + 32500);
            if (*(_QWORD *)(a1 + 29024) == v41)
              v43 = (unsigned __int8 *)(a1 + 32499);
          }
          else
          {
            v42 = v35;
            v43 = (unsigned __int8 *)(a1 + 32499);
          }
          v68 = *v43;
          (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(a1 + 1672 * v68 + 34160) + 1328))(*(_QWORD *)(a1 + 1672 * v68 + 32512), 1, 1, *(_QWORD *)(v16 + 8 * v68));
          (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 + 29448) + 1016))(*(_QWORD *)(*(_QWORD *)(a1 + 19296) + 32 * v68 + 352), *(_QWORD *)(v16 + 8 * v68), v79, a3, a4, v77, a6, 1);
          *v42 = v78;
          *v74 = v72;
          *v38 = v39;
          *v40 = 0;
        }
      }
      else
      {
        if (a3 >= *(unsigned __int8 *)(v16 + 976)
          && (*(_BYTE *)(v34 + 1043) & 0x40) != 0
          && a3 <= *(unsigned __int8 *)(v16 + 978))
        {
          v75 = v14;
          gleSynchronizeTextureLevelOnCurrentDevicesForRead(a1, v16);
          gfxModifyPluginTextureLevel();
          v35 = (_WORD *)(v19 + 1048);
          v14 = v75;
          v36 = 0;
        }
        else
        {
          if ((*(_BYTE *)(v34 + 1043) & 0x10) == 0)
            return;
          v36 = 1;
        }
        v44 = v16 + 480 * v14 + 32 * v15;
        if (*(_QWORD *)(v44 + 1056))
        {
          v90 = 0;
          v80 = (char *)(v34 + 1043);
          v88 = 0u;
          v89 = 0u;
          v86 = 0u;
          v87 = 0u;
          v84 = 0;
          v85 = 0;
          v83 = 0;
          v73 = v36;
          if (a2 == 32879 || a2 == 37122 || a2 == 35866)
          {
            v45 = (_BYTE *)(a1 + 18480);
            v46 = v35;
            v47 = 4;
          }
          else
          {
            v45 = (_BYTE *)(a1 + 18480);
            v46 = v35;
            v47 = 3;
          }
          v48 = (_QWORD *)(v44 + 1056);
          v49 = v16 + 480 * v14 + 32 * v15;
          v76 = v14;
          glePixelStorageSettings(a1, v12, *(unsigned __int16 *)(v49 + 1036), *(unsigned __int16 *)(v49 + 1038), (int *)(a1 + 18448), (_DWORD *)&v84 + 1, (int *)&v84, (_DWORD *)&v83 + 1, (int *)&v83, v47);
          v50 = v46;
          if ((*v80 & 1) == 0
            || a6 + v84 != *v48
            || *v46 != a4
            || *(unsigned __int16 *)(v16 + 480 * v76 + 32 * v15 + 1050) != v77
            || __PAIR64__(v83 / HIDWORD(v83), HIDWORD(v83) / HIDWORD(v84)) != __PAIR64__(*(unsigned __int16 *)(v16 + 480 * v76 + 32 * v15 + 1046), *(unsigned __int16 *)(v16 + 480 * v76 + 32 * v15 + 1044))|| *v45)
          {
            v51 = 393216;
            HIDWORD(v88) = 393216;
            if (*(_WORD *)(v16 + 772) == 6407)
            {
              v52 = *v50;
              if (v52 == 32993 || v52 == 6408)
              {
                v51 = 425984;
                HIDWORD(v88) = 425984;
              }
            }
            v70 = a3;
            v71 = v48;
            if (*v45)
            {
              v51 |= 2u;
              HIDWORD(v88) = v51;
            }
            v53 = v16 + 480 * v76 + 32 * v15;
            v54 = (_WORD *)(v53 + 1050);
            v55 = gleRowBytes(*v50, *(unsigned __int16 *)(v53 + 1050), *(unsigned __int16 *)(v53 + 1044));
            if ((v12 & 0x80000000) != 0)
              HIDWORD(v88) = v51 | 0x100000;
            v82 = a1;
            v56 = (unsigned __int16 *)(v49 + 1038);
            glgConvertType();
            v57 = vand_s8((int8x8_t)vmovn_s64((int64x2_t)vshlq_u64((uint64x2_t)vdupq_n_s64(v12), (uint64x2_t)xmmword_21B9A4080)), (int8x8_t)0x1F0000001FLL);
            if (*v54)
            {
              v58 = *v56;
              CompressedImageBytes = v55 * v58;
            }
            else
            {
              CompressedImageBytes = glgGetCompressedImageBytes();
              v58 = *v56;
            }
            v60 = (int)v83;
            *(_QWORD *)&v87 = __PAIR64__(HIDWORD(v85), v55);
            *((_QWORD *)&v87 + 1) = __PAIR64__(HIDWORD(v83), v85);
            *(int8x8_t *)&v88 = v57;
            DWORD2(v88) = 2;
            LODWORD(v89) = 1343490;
            DWORD1(v89) = *(unsigned __int16 *)(v49 + 1036);
            DWORD2(v89) = v58;
            v61 = v16 + 480 * v76 + 32 * v15;
            if (*(_WORD *)(v61 + 1040))
            {
              v62 = 0;
              v63 = 0;
              v64 = (unsigned __int16 *)(v61 + 1040);
              v65 = CompressedImageBytes;
              do
              {
                *(_QWORD *)&v86 = *v71 + v62;
                *((_QWORD *)&v86 + 1) = a6 + v84;
                v66 = v60;
                glgProcessPixelsWithProcessor();
                v60 = v66;
                ++v63;
                a6 += v66;
                v62 += v65;
              }
              while (v63 < *v64);
            }
            if ((v73 & 1) == 0)
            {
              v67 = *v80;
              if ((*v80 & 0x10) != 0)
              {
                if ((*v80 & 9) == 0)
                {
                  gfxFreeTextureLevel();
                  v67 = *v80;
                }
                v67 &= ~0x10u;
                *(_WORD *)(v16 + 2 * v76 + 996) &= ~(1 << v70);
              }
              *v80 = v67 | 0x40;
            }
            if (*(_QWORD *)(v82 + 19328))
              gleUpdateCtxDirtyStateForBufStampChange(v82);
          }
        }
      }
    }
  }
}

void glGetTexImage_PackThread(uint64_t a1, int a2, uint64_t a3, unsigned int a4, int a5, uint64_t a6)
{
  _QWORD *v12;

  if (*(_QWORD *)(a1 + 26480))
  {
    v12 = gleAddCommand(a1, (uint64_t)glGetTexImage_UnpackThread, 24);
    *(_DWORD *)v12 = a2;
    *((_DWORD *)v12 + 1) = a3;
    *((_DWORD *)v12 + 2) = a4;
    *((_DWORD *)v12 + 3) = a5;
    v12[2] = a6;
  }
  else
  {
    (*(void (**)(uint64_t))(a1 + 27752))(a1);
    glGetTexImage_Exec(a1, a2, a3, a4, a5, a6);
  }
}

uint64_t glGetTexImage_UnpackThread(uint64_t a1, uint64_t a2)
{
  glGetTexImage_Exec(a1, *(_DWORD *)a2, *(unsigned int *)(a2 + 4), *(_DWORD *)(a2 + 8), *(_DWORD *)(a2 + 12), *(_QWORD *)(a2 + 16));
  return 24;
}

_DWORD *glCopyTexImage2D_Comp(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9)
{
  _DWORD *result;

  result = gleAddCommand(a1, (uint64_t)glCopyTexImage2D_ListExec, 32);
  *result = a2;
  result[1] = a3;
  result[2] = a4;
  result[3] = a5;
  result[4] = a6;
  result[5] = a7;
  result[6] = a8;
  result[7] = a9;
  return result;
}

uint64_t glCopyTexImage2D_ListExec(uint64_t a1, uint64_t a2, double a3, double a4, double a5)
{
  glCopyTexImage2D_Exec(a1, *(_DWORD *)a2, *(unsigned int *)(a2 + 4), *(unsigned int *)(a2 + 8), *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), *(_DWORD *)(a2 + 24), a3, a4, a5, *(_DWORD *)(a2 + 28));
  return 32;
}

uint64_t glCopyTextureLevels_Exec(_QWORD *a1, unsigned int a2, unsigned int a3, unsigned int a4, int a5)
{
  uint64_t result;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  char v20;
  unsigned __int16 *v21;
  unsigned __int16 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  _BYTE *v30;
  char v31;
  uint64_t v32;
  char v33;
  size_t v34;
  __int16 *v35;
  __int16 v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _WORD *v41;
  uint64_t v42;
  uint64_t v43;

  v42 = 0;
  v43 = 0;
  result = gleCheckCopyTextureLevelsArgs((uint64_t)a1, a2, a3, a4, a5, &v43, &v42);
  if (!(_DWORD)result)
    return result;
  v9 = a1 + 3729;
  v10 = *(unsigned __int8 *)(v42 + 979);
  if (!*(_QWORD *)(v42 + 536) && (*(_WORD *)(v42 + 768) & 0x800) == 0)
  {
    result = gfxWaitTextureOnDevices();
    v9 = a1 + 3729;
  }
  if (!(_DWORD)v10)
    return result;
  v11 = 0;
  v12 = 0;
  v13 = a5 + a4;
  result = a4;
  while (v13 <= a4)
  {
LABEL_41:
    ++v12;
    v11 += 480;
    if (v12 == v10)
      return result;
  }
  v14 = result;
  while (1)
  {
    v15 = *(unsigned __int8 *)(v43 + 976);
    v16 = *(unsigned __int8 *)(v43 + 978);
    if (v15 > v16)
    {
LABEL_43:
      if (!*(_WORD *)v9)
        *(_WORD *)v9 = 1282;
      return result;
    }
    v17 = v42;
    v18 = v42 + 480 * v12 + 32 * v14;
    v19 = (_BYTE *)(v18 + 1043);
    v20 = *(_BYTE *)(v18 + 1043);
    v21 = (unsigned __int16 *)(v18 + 1036);
    v22 = (unsigned __int16 *)(v18 + 1038);
    v23 = v43 + v11;
    v24 = v16 + 1;
    v25 = 32 * v15;
    v26 = *(unsigned __int8 *)(v43 + 976);
    while ((v20 & 0x20) == 0
         || (*(_BYTE *)(v23 + v25 + 1043) & 0x20) == 0
         || *v21 != *(unsigned __int16 *)(v23 + v25 + 1036)
         || *v22 != *(unsigned __int16 *)(v23 + v25 + 1038))
    {
      ++v26;
      v23 += 32;
      if (v24 == v26)
        goto LABEL_43;
    }
    v39 = result;
    v40 = v13;
    v41 = v9;
    v37 = v19;
    v38 = v23 + 32 * v15;
    if ((*(unsigned int (**)(_QWORD, _QWORD, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD))(a1[3681] + 400))(a1[3627], *(_QWORD *)(v43 + 8 * *((unsigned __int8 *)v9 + 2667)), v12, v26, *(_QWORD *)(v42 + 8 * *((unsigned __int8 *)v9 + 2667)), v12, v14, 0))
    {
      v27 = v43;
      v9 = v41;
      if ((*(_WORD *)(v43 + 768) & 0x800) == 0)
      {
        *(_QWORD *)(v43 + 536) = a1[3628];
        v28 = v23 + 32 * v15;
        v29 = *(_BYTE *)(v38 + 1043);
        if ((v29 & 0x10) != 0)
        {
          if ((*(_BYTE *)(v38 + 1043) & 9) == 0)
          {
            gfxFreeTextureLevel();
            v28 = v23 + 32 * v15;
            v9 = v41;
            v29 = *(_BYTE *)(v38 + 1043);
            v27 = v43;
          }
          v29 &= ~0x10u;
          *(_WORD *)(v27 + 2 * v12 + 996) &= ~(1 << v26);
        }
        *(_BYTE *)(v28 + 1043) = v29 | 0x40;
      }
      goto LABEL_40;
    }
    v30 = v37;
    v31 = *v37;
    if ((*v37 & 0x40) != 0)
    {
      gleSynchronizeTextureLevelOnCurrentDevicesForRead((uint64_t)a1, v42);
    }
    else if ((*v37 & 0x10) == 0)
    {
      if (!*(_QWORD *)(v17 + 480 * v12 + 32 * v14 + 1056))
      {
        result = gfxAllocateTextureLevel();
        if (!(_DWORD)result)
          goto LABEL_49;
        v30 = v37;
        v31 = *v37;
      }
      *v30 = v31 | 0x10;
    }
    gfxModifyPluginTextureLevel();
    v32 = v23 + 32 * v15;
    v33 = *(_BYTE *)(v38 + 1043);
    if ((v33 & 0x40) != 0)
    {
      gleSynchronizeTextureLevelOnCurrentDevices((uint64_t)a1, v43);
      goto LABEL_38;
    }
    if ((*(_BYTE *)(v38 + 1043) & 0x10) == 0)
      break;
LABEL_38:
    gfxModifyPluginTextureLevel();
    v34 = gfxTextureLevelBytes();
    result = gfxTextureLevelBytes();
    if (v34 != result)
    {
      v35 = v41;
      if (*v41)
        return result;
      v36 = 1282;
      goto LABEL_48;
    }
    memcpy(*(void **)(v23 + 32 * v15 + 1056), *(const void **)(v17 + 480 * v12 + 32 * v14 + 1056), v34);
    gleDirtyTextureLevelCurrentBindPointsData((uint64_t)a1, v43, v38 + 1032);
    v9 = v41;
LABEL_40:
    ++v14;
    result = v39;
    v13 = v40;
    if (v14 == v40)
      goto LABEL_41;
  }
  if (*(_QWORD *)(v23 + 32 * v15 + 1056))
  {
LABEL_36:
    *(_BYTE *)(v32 + 1043) = v33 | 0x10;
    goto LABEL_38;
  }
  result = gfxAllocateTextureLevel();
  if ((_DWORD)result)
  {
    v32 = v23 + 32 * v15;
    v33 = *(_BYTE *)(v38 + 1043);
    goto LABEL_36;
  }
LABEL_49:
  v35 = v41;
  if (!*v41)
  {
    v36 = 1285;
LABEL_48:
    *v35 = v36;
  }
  return result;
}

_DWORD *glCopyTextureLevels_PackThread(uint64_t a1, int a2, int a3, int a4, int a5)
{
  _DWORD *result;

  result = gleAddCommand(a1, (uint64_t)glCopyTextureLevels_UnpackThread, 16);
  *result = a2;
  result[1] = a3;
  result[2] = a4;
  result[3] = a5;
  return result;
}

uint64_t glCopyTextureLevels_UnpackThread(_QWORD *a1, uint64_t a2)
{
  glCopyTextureLevels_Exec(a1, *(_DWORD *)a2, *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 8), *(_DWORD *)(a2 + 12));
  return 16;
}

uint64_t glGetTexLevelParameteriv_ExecThread(uint64_t a1, int a2, uint64_t a3, int a4, int *a5)
{
  (*(void (**)(void))(a1 + 27752))();
  return glGetTexLevelParameteriv_Exec((int8x16_t *)a1, a2, a3, a4, a5);
}

uint64_t gleGetCompressedTextureLevelInfo(int a1, int a2)
{
  unsigned int v2;
  char *v3;
  char *v4;

  v2 = 74;
  while (dword_21B9A4388[7 * v2] != a1)
  {
    if (--v2 == -1)
    {
      v2 = -1;
      break;
    }
  }
  switch(a2)
  {
    case 32860:
      v4 = (char *)&dword_21B9A4388[7 * v2 + 2];
      break;
    case 32861:
      v4 = (char *)&dword_21B9A4388[7 * v2 + 3];
      break;
    case 32862:
      v4 = (char *)&dword_21B9A4388[7 * v2 + 4];
      break;
    case 32863:
      v4 = (char *)&dword_21B9A4388[7 * v2 + 5];
      break;
    case 32864:
      v4 = (char *)&dword_21B9A4388[7 * v2 + 6];
      break;
    default:
      switch(a2)
      {
        case 35856:
          if (!v2)
            return 0;
          v3 = (char *)&dword_21B9A4388[7 * v2];
          goto LABEL_17;
        case 35857:
          if (!dword_21B9A4388[7 * v2 + 3])
            return 0;
          goto LABEL_16;
        case 35858:
          if (!dword_21B9A4388[7 * v2 + 4])
            return 0;
          goto LABEL_16;
        case 35859:
          if (!dword_21B9A4388[7 * v2 + 5])
            return 0;
LABEL_16:
          v3 = (char *)&dword_21B9A4388[7 * v2];
LABEL_17:
          v4 = v3 + 4;
          return *(unsigned int *)v4;
        case 35860:
          if (v2)
            return 0;
          else
            return 35863;
        default:
          return 0;
      }
  }
  return *(unsigned int *)v4;
}

uint64_t gleGetInternalFormatType(int a1)
{
  uint64_t v1;
  BOOL v2;
  _BOOL4 v3;

  v1 = 5126;
  v2 = (a1 - 34836) >= 0xC && (a1 - 33325) >= 4;
  if (!v2 || (a1 - 36012) < 2 || a1 == 35898 || a1 == 35901)
    return v1;
  if ((a1 - 36208) < 0x12)
    return 5125;
  if ((a1 - 33330) > 0xA)
  {
    if (a1 != 36975)
    {
      if ((a1 - 36226) < 0x12)
        return 5124;
      v3 = (a1 & 1) == 0;
      goto LABEL_18;
    }
    return 5125;
  }
  if ((a1 & 1) == 0)
    return 5125;
  v3 = 0;
LABEL_18:
  if ((a1 - 33340) >= 0xFFFFFFF5 && !v3)
    return 5124;
  v1 = 36764;
  if ((a1 - 36756) >= 8 && a1 != 36284 && a1 != 36286)
  {
    if (a1)
      return 35863;
    else
      return 0;
  }
  return v1;
}

float glTexParameterf_Comp(uint64_t a1, int a2, int a3, float a4)
{
  float v5;

  v5 = a4;
  return glTexParameterF_Comp(a1, a2, a3, (uint64_t)&v5);
}

float glTexParameterF_Comp(uint64_t a1, int a2, int a3, uint64_t a4)
{
  _QWORD *v7;
  float result;
  int v9;
  int v10;

  v7 = gleAddCommand(a1, (uint64_t)glTexParameterf_ListExec, 24);
  *(_DWORD *)v7 = a2;
  *((_DWORD *)v7 + 1) = a3;
  if (a3 > 34229)
  {
    if (a3 > 35740)
    {
      if (a3 > 36421)
      {
        if (a3 != 36422)
        {
          v9 = 37167;
          goto LABEL_28;
        }
LABEL_31:
        *((_DWORD *)v7 + 2) = *(_DWORD *)a4;
        *((_DWORD *)v7 + 3) = *(_DWORD *)(a4 + 4);
        *((_DWORD *)v7 + 4) = *(_DWORD *)(a4 + 8);
        result = *(float *)(a4 + 12);
        *((float *)v7 + 5) = result;
        return result;
      }
      if ((a3 - 36418) < 4)
        goto LABEL_29;
      v10 = 35741;
LABEL_17:
      if (a3 != v10)
        return result;
      goto LABEL_31;
    }
    if (a3 <= 34890)
    {
      if (a3 == 34230)
        goto LABEL_29;
      v9 = 34236;
    }
    else
    {
      if ((a3 - 34891) < 3 || a3 == 35400)
        goto LABEL_29;
      v9 = 35455;
    }
LABEL_28:
    if (a3 != v9)
      return result;
    goto LABEL_29;
  }
  if (a3 <= 32958)
  {
    if (a3 <= 32869)
    {
      if ((a3 - 10240) < 4)
        goto LABEL_29;
      v10 = 4100;
      goto LABEL_17;
    }
    if (a3 == 32870)
      goto LABEL_29;
    v9 = 32882;
    goto LABEL_28;
  }
  if (a3 > 33168)
  {
    if (a3 == 33169 || a3 == 34046)
      goto LABEL_29;
    v9 = 34049;
    goto LABEL_28;
  }
  if ((a3 - 33082) >= 4)
  {
    v9 = 32959;
    goto LABEL_28;
  }
LABEL_29:
  result = *(float *)a4;
  *((_DWORD *)v7 + 2) = *(_DWORD *)a4;
  return result;
}

uint64_t glTexParameterx_Exec(uint64_t a1, int a2, int a3, int a4)
{
  float v4;
  float32x2_t var4;

  v4 = (float)a4;
  if (a3 == 34046)
    v4 = (float)a4 * 0.000015259;
  var4.f32[0] = v4;
  return glTexParameterF_Exec(a1, a2, a3, &var4);
}

float glTexParameterx_PackThread(uint64_t a1, int a2, int a3, int a4)
{
  float v4;
  float v6;

  v4 = (float)a4;
  if (a3 == 34046)
    v4 = (float)a4 * 0.000015259;
  v6 = v4;
  return glTexParameterF_Comp(a1, a2, a3, (uint64_t)&v6);
}

uint64_t glTexParameterxv_Exec(uint64_t a1, int a2, int a3, int *a4)
{
  float v4;
  float32x2_t var4;

  v4 = (float)*a4;
  if (a3 == 34046)
    v4 = v4 * 0.000015259;
  var4.f32[0] = v4;
  return glTexParameterF_Exec(a1, a2, a3, &var4);
}

float glTexParameterxv_PackThread(uint64_t a1, int a2, int a3, int *a4)
{
  float v4;
  float v6;

  v4 = (float)*a4;
  if (a3 == 34046)
    v4 = v4 * 0.000015259;
  v6 = v4;
  return glTexParameterF_Comp(a1, a2, a3, (uint64_t)&v6);
}

_QWORD *glTexParameteri_Comp(uint64_t a1, int a2, int a3, int a4)
{
  int v5;

  v5 = a4;
  return glTexParameterI_Comp(a1, a2, a3, &v5, 1);
}

_QWORD *glTexParameterI_Comp(uint64_t a1, int a2, int a3, _DWORD *a4, char a5)
{
  _QWORD *result;
  int v10;
  int v11;

  result = gleAddCommand(a1, (uint64_t)glTexParameteri_ListExec, 28);
  *(_DWORD *)result = a2;
  *((_DWORD *)result + 1) = a3;
  *((_BYTE *)result + 8) = a5;
  if (a3 > 34229)
  {
    if (a3 > 35740)
    {
      if (a3 > 36421)
      {
        if (a3 != 36422)
        {
          v10 = 37167;
          goto LABEL_28;
        }
LABEL_31:
        *((_DWORD *)result + 3) = *a4;
        *((_DWORD *)result + 4) = a4[1];
        *((_DWORD *)result + 5) = a4[2];
        *((_DWORD *)result + 6) = a4[3];
        return result;
      }
      if ((a3 - 36418) < 4)
        goto LABEL_29;
      v11 = 35741;
LABEL_17:
      if (a3 != v11)
        return result;
      goto LABEL_31;
    }
    if (a3 <= 34890)
    {
      if (a3 == 34230)
        goto LABEL_29;
      v10 = 34236;
    }
    else
    {
      if ((a3 - 34891) < 3 || a3 == 35400)
        goto LABEL_29;
      v10 = 35455;
    }
LABEL_28:
    if (a3 != v10)
      return result;
    goto LABEL_29;
  }
  if (a3 <= 32958)
  {
    if (a3 <= 32869)
    {
      if ((a3 - 10240) < 4)
        goto LABEL_29;
      v11 = 4100;
      goto LABEL_17;
    }
    if (a3 == 32870)
      goto LABEL_29;
    v10 = 32882;
    goto LABEL_28;
  }
  if (a3 > 33168)
  {
    if (a3 == 33169 || a3 == 34046)
      goto LABEL_29;
    v10 = 34049;
    goto LABEL_28;
  }
  if ((a3 - 33082) >= 4)
  {
    v10 = 32959;
    goto LABEL_28;
  }
LABEL_29:
  *((_DWORD *)result + 3) = *a4;
  return result;
}

_QWORD *glTexParameteriv_Comp(uint64_t a1, int a2, int a3, _DWORD *a4)
{
  return glTexParameterI_Comp(a1, a2, a3, a4, 1);
}

uint64_t glGetTexParameterfv_ExecThread(uint64_t a1, int a2, int a3, float *a4)
{
  (*(void (**)(void))(a1 + 27752))();
  return glGetTexParameterfv_Exec(a1, a2, a3, a4);
}

uint64_t glGetTexParameterfv_Exec(uint64_t a1, int a2, int a3, float *a4)
{
  uint64_t v7;
  uint64_t result;
  unsigned int v9;
  float v10;
  unint64_t v11;
  unsigned int v12;
  int v13;
  unint64_t v14;
  unsigned int v15;

  v7 = a1 + 29832;
  result = gleLookUpNonProxyNonFaceTexture(a1, a2);
  if (!result)
    goto LABEL_70;
  if (a3 <= 34229)
  {
    if (a3 <= 33081)
    {
      if (a3 <= 10494)
      {
        switch(a3)
        {
          case 10240:
            LOWORD(v9) = *(_WORD *)(result + 914);
            goto LABEL_76;
          case 10241:
            LOWORD(v9) = *(_WORD *)(result + 912);
            goto LABEL_76;
          case 10242:
            LOWORD(v9) = *(_WORD *)(result + 920);
            goto LABEL_76;
          case 10243:
            LOWORD(v9) = *(_WORD *)(result + 922);
            goto LABEL_76;
          default:
            goto LABEL_70;
        }
      }
      if (a3 != 10495)
      {
        if (a3 == 32882 && (*(_BYTE *)(v7 + 2669) & 0xFE) != 2)
        {
          LOWORD(v9) = *(_WORD *)(result + 924);
          goto LABEL_76;
        }
        goto LABEL_70;
      }
      v12 = *(unsigned __int8 *)(result + 792);
      goto LABEL_60;
    }
    if (a3 <= 33168)
    {
      switch(a3)
      {
        case 33082:
          if ((*(_BYTE *)(v7 + 2669) & 0xFE) == 2)
            goto LABEL_70;
          v10 = *(float *)(result + 932);
          goto LABEL_77;
        case 33083:
          if ((*(_BYTE *)(v7 + 2669) & 0xFE) == 2)
            goto LABEL_70;
          v10 = *(float *)(result + 936);
          goto LABEL_77;
        case 33084:
          if ((*(_BYTE *)(v7 + 2669) & 0xFE) == 2)
            goto LABEL_70;
          v13 = *(_DWORD *)(result + 884);
          goto LABEL_65;
        case 33085:
          v13 = *(_DWORD *)(result + 888);
          goto LABEL_65;
        default:
          goto LABEL_70;
      }
    }
    switch(a3)
    {
      case 33169:
        if (*(unsigned __int8 *)(v7 + 2669) - 3 > 1)
        {
          v15 = *(_BYTE *)(result + 898) & 1;
          goto LABEL_68;
        }
        break;
      case 33503:
        if ((*(_BYTE *)(v7 + 2669) & 0xFE) != 2)
        {
          LOBYTE(v9) = *(_BYTE *)(result + 559);
          goto LABEL_76;
        }
        break;
      case 34046:
        v10 = *(float *)(result + 928);
LABEL_77:
        *a4 = v10;
        return result;
    }
    goto LABEL_70;
  }
  if (a3 <= 35740)
  {
    if (a3 <= 34891)
    {
      if (a3 == 34230)
      {
        v15 = (*(unsigned __int8 *)(result + 898) >> 1) & 1;
        goto LABEL_68;
      }
      if (a3 == 34231)
      {
        v13 = *(_DWORD *)(result + 900);
LABEL_65:
        v10 = (float)v13;
        goto LABEL_77;
      }
      if (a3 != 34236)
        goto LABEL_70;
      LOWORD(v9) = *(_WORD *)(result + 552);
    }
    else
    {
      if (a3 > 35399)
      {
        if (a3 == 35455)
        {
          v12 = *(unsigned __int8 *)(result + 898);
LABEL_60:
          v15 = (v12 >> 2) & 1;
LABEL_68:
          v10 = (float)v15;
          goto LABEL_77;
        }
LABEL_70:
        if (!*(_WORD *)v7)
          *(_WORD *)v7 = 1280;
        return result;
      }
      if (a3 == 34892)
      {
        if (*(_BYTE *)(v7 + 2669) == 2 || (*(_BYTE *)(*(_QWORD *)(a1 + 29032) + 577) & 0x10) == 0)
          goto LABEL_70;
        LOWORD(v9) = *(_WORD *)(result + 918);
      }
      else
      {
        if (a3 != 34893 || *(_BYTE *)(v7 + 2669) == 2 || (*(_BYTE *)(*(_QWORD *)(a1 + 29032) + 577) & 0x10) == 0)
          goto LABEL_70;
        LOWORD(v9) = *(_WORD *)(result + 916);
      }
    }
LABEL_76:
    v10 = (float)v9;
    goto LABEL_77;
  }
  switch(a3)
  {
    case 36418:
      if ((*(_BYTE *)(v7 + 2669) & 0xFE) == 2)
        goto LABEL_70;
      v11 = *(_WORD *)(result + 896) & 7;
      goto LABEL_57;
    case 36419:
      if ((*(_BYTE *)(v7 + 2669) & 0xFE) == 2)
        goto LABEL_70;
      v11 = ((unint64_t)*(unsigned __int16 *)(result + 896) >> 3) & 7;
      goto LABEL_57;
    case 36420:
      if ((*(_BYTE *)(v7 + 2669) & 0xFE) == 2)
        goto LABEL_70;
      v11 = ((unint64_t)*(unsigned __int16 *)(result + 896) >> 6) & 7;
      goto LABEL_57;
    case 36421:
      if ((*(_BYTE *)(v7 + 2669) & 0xFE) == 2)
        goto LABEL_70;
      v11 = ((unint64_t)*(unsigned __int16 *)(result + 896) >> 9) & 7;
LABEL_57:
      v14 = v11 - 1;
      if (v14 > 4)
        v10 = 6403.0;
      else
        v10 = flt_21B9A4C2C[v14];
      goto LABEL_77;
    case 36422:
      goto LABEL_70;
    default:
      if (a3 != 35741)
      {
        if (a3 != 37167)
          goto LABEL_70;
        v10 = 0.0;
        if (*(_BYTE *)(result + 559))
          v10 = 1.0;
        goto LABEL_77;
      }
      if (*(_BYTE *)(v7 + 2669) != 2)
        goto LABEL_70;
      *(float32x4_t *)a4 = vcvtq_f32_s32(*(int32x4_t *)(result + 740));
      break;
  }
  return result;
}

uint64_t glGetTexParameteriv_ExecThread(uint64_t a1, int a2, int a3, int *a4)
{
  (*(void (**)(void))(a1 + 27752))();
  return glGetTexParameteriv_Exec(a1, a2, a3, a4);
}

uint64_t glGetTexParameteriv_Exec(uint64_t a1, int a2, int a3, int *a4)
{
  uint64_t v7;
  uint64_t result;
  int v9;
  float v10;
  unint64_t v11;
  unsigned int v12;
  float v13;
  unint64_t v14;

  v7 = a1 + 29832;
  result = gleLookUpNonProxyNonFaceTexture(a1, a2);
  if (!result)
    goto LABEL_69;
  if (a3 <= 34229)
  {
    if (a3 <= 33081)
    {
      if (a3 <= 10494)
      {
        switch(a3)
        {
          case 10240:
            v9 = *(unsigned __int16 *)(result + 914);
            goto LABEL_75;
          case 10241:
            v9 = *(unsigned __int16 *)(result + 912);
            goto LABEL_75;
          case 10242:
            v9 = *(unsigned __int16 *)(result + 920);
            goto LABEL_75;
          case 10243:
            v9 = *(unsigned __int16 *)(result + 922);
            goto LABEL_75;
          default:
            goto LABEL_69;
        }
      }
      if (a3 != 10495)
      {
        if (a3 == 32882 && (*(_BYTE *)(v7 + 2669) & 0xFE) != 2)
        {
          v9 = *(unsigned __int16 *)(result + 924);
          goto LABEL_75;
        }
        goto LABEL_69;
      }
      v12 = *(unsigned __int8 *)(result + 792);
      goto LABEL_61;
    }
    if (a3 <= 33168)
    {
      switch(a3)
      {
        case 33082:
          if ((*(_BYTE *)(v7 + 2669) & 0xFE) == 2)
            goto LABEL_69;
          v10 = *(float *)(result + 932);
          goto LABEL_46;
        case 33083:
          if ((*(_BYTE *)(v7 + 2669) & 0xFE) == 2)
            goto LABEL_69;
          v10 = *(float *)(result + 936);
          goto LABEL_46;
        case 33084:
          if ((*(_BYTE *)(v7 + 2669) & 0xFE) == 2)
            goto LABEL_69;
          v9 = *(_DWORD *)(result + 884);
          goto LABEL_75;
        case 33085:
          v9 = *(_DWORD *)(result + 888);
          goto LABEL_75;
        default:
          goto LABEL_69;
      }
    }
    switch(a3)
    {
      case 33169:
        if (*(unsigned __int8 *)(v7 + 2669) - 3 > 1)
        {
          v9 = *(_BYTE *)(result + 898) & 1;
          goto LABEL_75;
        }
        break;
      case 33503:
        if ((*(_BYTE *)(v7 + 2669) & 0xFE) != 2)
        {
          v9 = *(unsigned __int8 *)(result + 559);
          goto LABEL_75;
        }
        break;
      case 34046:
        v10 = *(float *)(result + 928);
LABEL_46:
        v13 = 0.5;
        if (v10 < 0.0)
          v13 = -0.5;
        v9 = (int)(float)(v10 + v13);
        goto LABEL_75;
    }
    goto LABEL_69;
  }
  if (a3 <= 35740)
  {
    if (a3 <= 34891)
    {
      if (a3 == 34230)
      {
        v9 = (*(unsigned __int8 *)(result + 898) >> 1) & 1;
        goto LABEL_75;
      }
      if (a3 == 34231)
      {
        v9 = *(_DWORD *)(result + 900);
        goto LABEL_75;
      }
      if (a3 != 34236)
        goto LABEL_69;
      v9 = *(unsigned __int16 *)(result + 552);
    }
    else
    {
      if (a3 > 35399)
      {
        if (a3 == 35455)
        {
          v12 = *(unsigned __int8 *)(result + 898);
LABEL_61:
          v9 = (v12 >> 2) & 1;
          goto LABEL_75;
        }
LABEL_69:
        if (!*(_WORD *)v7)
          *(_WORD *)v7 = 1280;
        return result;
      }
      if (a3 == 34892)
      {
        if (*(_BYTE *)(v7 + 2669) == 2 || (*(_BYTE *)(*(_QWORD *)(a1 + 29032) + 577) & 0x10) == 0)
          goto LABEL_69;
        v9 = *(unsigned __int16 *)(result + 918);
      }
      else
      {
        if (a3 != 34893 || *(_BYTE *)(v7 + 2669) == 2 || (*(_BYTE *)(*(_QWORD *)(a1 + 29032) + 577) & 0x10) == 0)
          goto LABEL_69;
        v9 = *(unsigned __int16 *)(result + 916);
      }
    }
LABEL_75:
    *a4 = v9;
    return result;
  }
  switch(a3)
  {
    case 36418:
      if ((*(_BYTE *)(v7 + 2669) & 0xFE) == 2)
        goto LABEL_69;
      v11 = *(_WORD *)(result + 896) & 7;
      goto LABEL_58;
    case 36419:
      if ((*(_BYTE *)(v7 + 2669) & 0xFE) == 2)
        goto LABEL_69;
      v11 = ((unint64_t)*(unsigned __int16 *)(result + 896) >> 3) & 7;
      goto LABEL_58;
    case 36420:
      if ((*(_BYTE *)(v7 + 2669) & 0xFE) == 2)
        goto LABEL_69;
      v11 = ((unint64_t)*(unsigned __int16 *)(result + 896) >> 6) & 7;
      goto LABEL_58;
    case 36421:
      if ((*(_BYTE *)(v7 + 2669) & 0xFE) == 2)
        goto LABEL_69;
      v11 = ((unint64_t)*(unsigned __int16 *)(result + 896) >> 9) & 7;
LABEL_58:
      v14 = v11 - 1;
      if (v14 > 4)
        v9 = 6403;
      else
        v9 = dword_21B9A4C40[v14];
      goto LABEL_75;
    case 36422:
      goto LABEL_69;
    default:
      if (a3 != 35741)
      {
        if (a3 != 37167)
          goto LABEL_69;
        v9 = *(_BYTE *)(result + 559) != 0;
        goto LABEL_75;
      }
      if (*(_BYTE *)(v7 + 2669) != 2)
        goto LABEL_69;
      *a4 = *(_DWORD *)(result + 740);
      a4[1] = *(_DWORD *)(result + 744);
      a4[2] = *(_DWORD *)(result + 748);
      a4[3] = *(_DWORD *)(result + 752);
      break;
  }
  return result;
}

uint64_t glGetTexParameterxv_Exec(uint64_t a1, int a2, int a3, _DWORD *a4)
{
  uint64_t result;
  uint64_t v8;
  int v9;
  float *v10;
  float v11;
  float v12;
  float v13[4];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  result = glGetTexParameterfv_Exec(a1, a2, a3, v13);
  v8 = 1;
  if (a3 <= 33168)
  {
    if ((a3 - 10240) < 4)
      goto LABEL_12;
    v9 = 33085;
LABEL_7:
    if (a3 != v9)
    {
LABEL_17:
      if (!*(_WORD *)(a1 + 29832))
        *(_WORD *)(a1 + 29832) = 1280;
      return result;
    }
    goto LABEL_12;
  }
  if (a3 <= 35740)
  {
    if (a3 == 33169)
      goto LABEL_12;
    v9 = 34046;
    goto LABEL_7;
  }
  if (a3 != 37167)
  {
    if (a3 != 35741)
      goto LABEL_17;
    v8 = 4;
  }
LABEL_12:
  v10 = v13;
  do
  {
    v11 = *v10++;
    v12 = (float)(v11 * 65536.0) + 0.5;
    if (v12 < 0.0)
      v12 = v12 + -0.99998;
    *a4++ = (int)v12;
    --v8;
  }
  while (v8);
  return result;
}

uint64_t glGetTexParameterxv_ExecThread(uint64_t a1, int a2, int a3, _DWORD *a4)
{
  (*(void (**)(void))(a1 + 27752))();
  return glGetTexParameterxv_Exec(a1, a2, a3, a4);
}

uint64_t glTexParameterf_ListExec(uint64_t a1, float32x2_t *a2)
{
  glTexParameterF_Exec(a1, a2->i32[0], a2->i32[1], a2 + 1);
  return 24;
}

uint64_t glTexParameteri_ListExec(uint64_t a1, int *a2)
{
  glTexParameterI_Exec(a1, *a2, a2[1], a2 + 3);
  return 28;
}

uint64_t glTexImage2D_FlushExec(_BYTE *a1, int a2, uint64_t a3, int a4, int a5, unsigned int a6, int a7, unsigned int a8, unsigned int a9, uint64_t a10)
{
  double v11;
  double v12;
  double v13;

  glTexImage2D_Exec(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  return glFlush_Exec((uint64_t)a1, v11, v12, v13);
}

_BYTE *glTexImage2D_PackThread(uint64_t a1, int a2, uint64_t a3, int a4, int a5, unsigned int a6, int a7, unsigned int a8, unsigned int a9, uint64_t a10)
{
  _BYTE *result;

  if (*(_QWORD *)(a1 + 26488) || *(_BYTE *)(a1 + 26662))
  {
    result = gleAddCommand(a1, (uint64_t)glTexImage2D_UnpackThread, 48);
    *(_DWORD *)result = a2;
    *((_DWORD *)result + 1) = a3;
    *((_DWORD *)result + 2) = a4;
    *((_DWORD *)result + 3) = a5;
    *((_DWORD *)result + 4) = a6;
    *((_DWORD *)result + 6) = a7;
    *((_DWORD *)result + 7) = a8;
    *((_DWORD *)result + 8) = a9;
    *((_QWORD *)result + 5) = a10;
  }
  else
  {
    (*(void (**)(uint64_t))(a1 + 27752))(a1);
    return glTexImage2D_Exec((_BYTE *)a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  }
  return result;
}

uint64_t glTexImage2D_UnpackThread(_BYTE *a1, uint64_t a2)
{
  glTexImage2D_Exec(a1, *(_DWORD *)a2, *(unsigned int *)(a2 + 4), *(_DWORD *)(a2 + 8), *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 32), *(_QWORD *)(a2 + 40));
  return 48;
}

uint64_t glTexImage2D_FlushExecThread(uint64_t a1, int a2, uint64_t a3, int a4, int a5, unsigned int a6, int a7, unsigned int a8, unsigned int a9, uint64_t a10)
{
  double v18;
  double v19;
  double v20;

  (*(void (**)(void))(a1 + 27752))();
  glTexImage2D_Exec((_BYTE *)a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  return glFlush_Exec(a1, v18, v19, v20);
}

uint64_t glTexStorage2D_Exec(uint64_t a1, int a2, unsigned int a3, int a4, int a5, int a6)
{
  uint64_t result;
  uint64_t v9;
  __int16 v10;
  unint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int *v21;
  int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;

  result = gleCheckTexStorage2DArgs(a1, a2, a3, a4, a5, a6);
  if (!result)
    return result;
  v9 = result;
  if (*(_BYTE *)(result + 770))
    return result;
  v10 = *(_WORD *)(result + 768);
  if ((v10 & 0x1C00) == 0x1000)
    goto LABEL_10;
  if ((*(_WORD *)(result + 768) & 0x1C00) == 0)
  {
    v10 |= 0x1000u;
    *(_WORD *)(result + 768) = v10;
    goto LABEL_10;
  }
  if ((*(_WORD *)(result + 768) & 0xC00) == 0)
  {
LABEL_10:
    v11 = 0;
    v12 = 0;
    if (a4 == 37793)
      v13 = 32856;
    else
      v13 = a4;
    if (a4 == 37793)
      v14 = 32993;
    else
      v14 = 6408;
    v25 = v14;
    v26 = v13;
    v15 = v10 & 0xF;
    v16 = *(unsigned __int8 *)(result + 978);
    *(_BYTE *)(result + 559) = a3;
    v17 = result + 32 * a3 + 1032;
    do
    {
      LOWORD(v24) = 256;
      result = gleEvaluateTextureImageChange(a1, v9, v9 + 480 * v11 + 1032, v11, 0, a5, a6, 1, 0, v26, v25, 0x1401u, v24, 0);
      v18 = result;
      if (v15 != 2)
      {
        if (v16 <= *(unsigned __int8 *)(v9 + 975))
          v19 = *(unsigned __int8 *)(v9 + 975);
        else
          v19 = v16;
        result = gleGenerateEmptyMipmaps(a1, v9, v11, 0, v19, 0, 0);
      }
      if (v16 >= a3)
      {
        v20 = v16 - a3 + 1;
        v21 = (int *)v17;
        do
        {
          result = gleDirtyTextureLevelCurrentBindPointsGeom(a1, v9, v21);
          v21 += 8;
          --v20;
        }
        while (v20);
      }
      v12 |= v18;
      if (v15)
        break;
      v17 += 480;
    }
    while (v11++ < 5);
    *(_DWORD *)(v9 + 968) = 65538;
    if ((v12 & 0xC0000001) != 0)
    {
      if (v12 < 0)
        v23 = 134356992;
      else
        v23 = 139264;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1548) |= v23;
      result = gleDirtyTextureObjectCurrentBindPointsGeom(a1, v9);
    }
    if ((*(_WORD *)(v9 + 768) & 0x100) != 0)
      *(_BYTE *)(v9 + 559) = 0;
    return result;
  }
  if (!*(_WORD *)(a1 + 29832))
    *(_WORD *)(a1 + 29832) = 1282;
  return result;
}

uint64_t glTexStorage3D_Exec(uint64_t a1, int a2, unsigned int a3, int a4, int a5, int a6, int a7)
{
  uint64_t result;
  uint64_t v14;
  __int16 v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int v20;
  unsigned int v21;
  int *v22;
  unsigned int v23;
  int v24;
  uint64_t v25;

  result = gleCheckTexStorage3DArgs(a1, a2, a3, a4, a5, a6, a7);
  if (!result)
    return result;
  v14 = result;
  if (*(_BYTE *)(result + 770))
    return result;
  v15 = *(_WORD *)(result + 768);
  if ((v15 & 0x1C00) == 0x1000)
    goto LABEL_10;
  if ((*(_WORD *)(result + 768) & 0x1C00) == 0)
  {
    *(_WORD *)(result + 768) = v15 | 0x1000;
LABEL_10:
    if (a4 == 37793)
      v16 = 32993;
    else
      v16 = 6408;
    if (a4 == 37793)
      v17 = 32856;
    else
      v17 = a4;
    v18 = *(unsigned __int8 *)(result + 978);
    *(_BYTE *)(result + 559) = a3;
    LOWORD(v25) = 256;
    v19 = gleEvaluateTextureImageChange(a1, result, result + 1032, 0, 0, a5, a6, a7, 0, v17, v16, 0x1401u, v25, 0);
    if (v18 <= *(unsigned __int8 *)(v14 + 975))
      v20 = *(unsigned __int8 *)(v14 + 975);
    else
      v20 = v18;
    result = gleGenerateEmptyMipmaps(a1, v14, 0, 0, v20, 0, 0);
    v21 = v18 - a3;
    if (v18 >= a3)
    {
      v22 = (int *)(v14 + 32 * a3 + 1032);
      v23 = v21 + 1;
      do
      {
        result = gleDirtyTextureLevelCurrentBindPointsGeom(a1, v14, v22);
        v22 += 8;
        --v23;
      }
      while (v23);
    }
    *(_DWORD *)(v14 + 968) = 65538;
    if ((v19 & 0xC0000001) != 0)
    {
      if (v19 < 0)
        v24 = 134356992;
      else
        v24 = 139264;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1548) |= v24;
      result = gleDirtyTextureObjectCurrentBindPointsGeom(a1, v14);
    }
    if ((*(_WORD *)(v14 + 768) & 0x100) != 0)
      *(_BYTE *)(v14 + 559) = 0;
    return result;
  }
  if ((*(_WORD *)(result + 768) & 0xC00) == 0)
    goto LABEL_10;
  if (!*(_WORD *)(a1 + 29832))
    *(_WORD *)(a1 + 29832) = 1282;
  return result;
}

_DWORD *glTexStorage2D_PackThread(uint64_t a1, int a2, int a3, int a4, int a5, int a6)
{
  _DWORD *result;

  result = gleAddCommand(a1, (uint64_t)glTexStorage2D_UnpackThread, 24);
  *result = a2;
  result[1] = a3;
  result[2] = a4;
  result[3] = a5;
  result[4] = a6;
  return result;
}

uint64_t glTexStorage2D_UnpackThread(uint64_t a1, uint64_t a2)
{
  glTexStorage2D_Exec(a1, *(_DWORD *)a2, *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 8), *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 16));
  return 24;
}

_DWORD *glTexStorage3D_PackThread(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7)
{
  _DWORD *result;

  result = gleAddCommand(a1, (uint64_t)glTexStorage3D_UnpackThread, 24);
  *result = a2;
  result[1] = a3;
  result[2] = a4;
  result[3] = a5;
  result[4] = a6;
  result[5] = a7;
  return result;
}

uint64_t glTexStorage3D_UnpackThread(uint64_t a1, uint64_t a2)
{
  glTexStorage3D_Exec(a1, *(_DWORD *)a2, *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 8), *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20));
  return 24;
}

uint64_t glTexImage3D_Exec(uint64_t result, int a2, uint64_t a3, unsigned int a4, int a5, int a6, unsigned int a7, int a8, unsigned int a9, unsigned int a10, uint64_t a11)
{
  uint64_t v16;
  uint64_t v17;
  _WORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  __int16 v23;
  unsigned int v24;
  double v25;
  double v26;
  double v27;
  int MatrixIdentifier;
  _BOOL4 v29;
  _BOOL4 v30;
  int v31;
  unsigned int v32;
  int *v33;
  int v34;
  uint64_t v35;
  _BYTE *v36;
  char v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  _BYTE *v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  _BOOL4 v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  _BYTE *v54;
  int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  _BOOL4 v59;
  unsigned int v60;
  uint64_t v61;
  unsigned int v62;
  char v63;
  _BYTE *v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v74;

  v16 = result;
  v17 = a11;
  v18 = (_WORD *)(result + 29832);
  if (!a11 && *(_BYTE *)(result + 18518))
  {
    if (!*v18)
      *v18 = 1281;
    return result;
  }
  v71 = result + 29832;
  v72 = result + 18504;
  v74 = 0;
  result = gleCheckTexImage3DArgs(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, &v74);
  if (!result)
    return result;
  v19 = result;
  if (*(_BYTE *)(result + 770))
    return result;
  v70 = a5;
  v20 = *(_QWORD *)(v16 + 19336);
  v68 = v20;
  if (v20)
  {
    v21 = gleOffsetLimitStorage3D((int *)(v16 + 18484), v70, a6, a7, v74, a11);
    v22 = v20;
    LODWORD(v20) = v70;
    result = gleHandleUnpackBufferInEngineNoSync(v16, v22, v21, (BYTE4(v74) & 0x1F) + 1, a11);
    v17 = result;
    if (!result)
      return result;
  }
  else
  {
    LODWORD(v20) = v70;
  }
  v23 = *(_WORD *)(v19 + 768);
  if ((v23 & 0x1C00) != 0x1000)
  {
    if ((*(_WORD *)(v19 + 768) & 0x1C00) != 0)
    {
      if ((*(_WORD *)(v19 + 768) & 0xC00) != 0)
      {
        if (!*(_WORD *)v71)
          *(_WORD *)v71 = 1282;
        return result;
      }
    }
    else
    {
      *(_WORD *)(v19 + 768) = v23 | 0x1000;
    }
  }
  v24 = gleStandardizeIntegerFormat(a9);
  if ((*(_BYTE *)(v16 + 1540) & 4) != 0)
  {
    MatrixIdentifier = gleGenerateMatrixIdentifier(v16, v16 + 9488, v25, v26, v27);
    *(_DWORD *)(v72 + 648) = *(_DWORD *)(v72 + 648) & 0xFFFFFEFF | ((MatrixIdentifier != -1074791426) << 8);
    *(_DWORD *)(v72 + 11228) = MatrixIdentifier;
  }
  v29 = a6 != 0;
  v30 = a7 != 0;
  if (v29 && v30)
    v20 = v20;
  else
    v20 = 0;
  if (v29 && v30)
    v31 = a8;
  else
    v31 = 0;
  v67 = v19 + 1032;
  LOWORD(v57) = 256;
  v32 = v24;
  v56 = a4;
  v33 = (int *)(v19 + 1032 + 32 * (int)a3);
  v34 = gleEvaluateTextureImageChange(v16, v19, (uint64_t)v33, 0, a3, v20, a6, a7, v31, v56, v24, a10, v57, v17);
  if (!(_DWORD)v20)
    goto LABEL_70;
  if (!v17
    || (*(_WORD *)(v19 + 768) & 0x100) != 0
    || !*(_BYTE *)(*(_QWORD *)(v16 + 29032) + 174)
    || a10 == 6656 && (*(_BYTE *)v72 & 7) != 0
    || (v35 = v67 + 32 * (int)a3, v37 = *(_BYTE *)(v35 + 11), v36 = (_BYTE *)(v35 + 11), (v37 & 1) != 0)
    || *(unsigned __int8 *)(v19 + 976) > (int)a3
    || *(unsigned __int8 *)(v19 + 978) < (int)a3
    || ((*(unsigned __int16 *)(v19 + 984) >> a3) & 1) == 0)
  {
    v38 = v68;
    if (v68)
    {
      v39 = (int)a3;
      v40 = v70;
      if (*(_QWORD *)(v68 + 192))
        gleSynchronizeBufferOnCurrentDevicesForRead(v16, v68 + 40);
      v38 = 0;
      if (!v17)
        goto LABEL_64;
    }
    else
    {
      v39 = (int)a3;
      v40 = v70;
      if (!v17)
      {
LABEL_64:
        *(_DWORD *)(v19 + 968) = 65538;
        goto LABEL_65;
      }
    }
  }
  else
  {
    v64 = v36;
    if ((*(_BYTE *)(v19 + 898) & 1) != 0 && *(_DWORD *)(v19 + 884) == (_DWORD)a3)
    {
      gleGenerateEmptyMipmaps(v16, v19, 0, a3, *(unsigned __int8 *)(v19 + 975), 0, 0);
      v63 = 0;
      v65 = 1;
    }
    else
    {
      v65 = 0;
      v63 = 1;
    }
    v45 = *(_QWORD *)(v16 + 8 * *(unsigned __int16 *)(v72 + 5264) + 23936);
    if (v45)
      v46 = (_BYTE *)(v45 + 198);
    else
      v46 = (_BYTE *)(v19 + 926);
    v47 = (*v46 & 1) == 0;
    v48 = *(__int16 *)(v19 + 982);
    v49 = (v48 >> 15);
    v50 = (((v48 >> 13) & 1) - 1) & (v48 >> 15);
    *(_WORD *)(v19 + 968) = v32;
    *(_WORD *)(v19 + 970) = a10;
    if (v68)
    {
      v61 = v68 + 40;
      v59 = v47;
      v60 = v48 >> 15;
      v62 = v32;
      v51 = (((v48 >> 13) & 1) - 1) & (v48 >> 15);
      result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)(v16 + 29448) + 368))(*(_QWORD *)(v16 + 29016), *(_QWORD *)(v19 + 8 * *(unsigned __int8 *)(v71 + 2667)), 0, a3);
      if ((_DWORD)result)
      {
LABEL_59:
        *(_QWORD *)(v19 + 536) = *(_QWORD *)(v16 + 29024);
        *v64 |= 0x40u;
        if ((v63 & 1) == 0)
        {
          v52 = *(unsigned __int8 *)(v19 + 975);
          v53 = a3;
          if (v52 > (int)a3)
          {
            v54 = (_BYTE *)(v19 + 32 * (a3 + 1) + 1043);
            do
            {
              *v54 |= 0x40u;
              v54 += 32;
              ++v53;
            }
            while (v53 < v52);
          }
        }
        goto LABEL_71;
      }
      v47 = v59;
      v49 = v60;
      v50 = v51;
      v32 = v62;
      if (*(_QWORD *)(v68 + 192))
      {
        v69 = v50;
        gleSynchronizeBufferOnCurrentDevicesForRead(v16, v61);
        v47 = v59;
        v50 = v69;
        v49 = v60;
        v32 = v62;
        v20 = v20;
      }
    }
    result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, uint64_t, _DWORD, _QWORD, _BOOL4))(*(_QWORD *)(v16 + 29448) + 368))(*(_QWORD *)(v16 + 29016), *(_QWORD *)(v19 + 8 * *(unsigned __int8 *)(v71 + 2667)), 0, a3, v49, v49, v50, v20, __PAIR64__(a7, a6), __PAIR64__(a10, v32), v17, 0, 0, v47);
    if ((_DWORD)result)
      goto LABEL_59;
    v38 = v65;
    v40 = v70;
    v39 = (int)a3;
  }
  if ((*(_WORD *)(v19 + 768) & 0x100) != 0)
    goto LABEL_64;
  v66 = v38;
  v41 = v67 + 32 * v39;
  v43 = *(_BYTE *)(v41 + 11);
  v42 = (_BYTE *)(v41 + 11);
  if ((v43 & 1) != 0 || gfxAllocateTextureLevel())
  {
    LOBYTE(v58) = 0;
    gleTextureImagePut((_DWORD *)v16, v19, (uint64_t)v33, 0, 0, 0, v40, a6, a7, v74, v58, v16 + 18484, v17);
    *(_DWORD *)(v19 + 968) = *(_DWORD *)(v67 + 32 * v39 + 16);
    *v42 |= 0x10u;
    *(_WORD *)(v19 + 996) |= *(_WORD *)(v19 + 984) & (unsigned __int16)(1 << a3);
    v44 = v19 + 24 * *(unsigned __int8 *)(v71 + 2667);
    *(_BYTE *)(v44 + 116) |= 4u;
    *(_WORD *)(v44 + 104) |= 1 << a3;
  }
  else if (!*(_WORD *)v71)
  {
    *(_WORD *)v71 = 1285;
  }
  v38 = v66;
LABEL_65:
  if (!*(_QWORD *)(v67 + 32 * v39 + 24) && (*(_WORD *)(v19 + 768) & 0x100) == 0
    || (*(_BYTE *)(v19 + 898) & 1) == 0
    || *(_DWORD *)(v19 + 884) != (_DWORD)a3)
  {
LABEL_70:
    result = 0;
    goto LABEL_71;
  }
  result = gleGenMipmaps(v16, v19, 0, a3, 1, v38 == 0);
LABEL_71:
  if ((v34 & 0xC0000001) != 0)
  {
    if (v34 < 0)
      v55 = 134356992;
    else
      v55 = 139264;
    *(_DWORD *)(v72 + 10148) = 0;
    *(_DWORD *)(v16 + 1548) |= v55;
  }
  else if ((_DWORD)result == 1)
  {
    return result;
  }
  return gleDirtyTextureLevelCurrentBindPointsGeom(v16, v19, v33);
}

_QWORD *glTexImage3D_PackThread(uint64_t a1, int a2, uint64_t a3, unsigned int a4, int a5, int a6, unsigned int a7, int a8, unsigned int a9, unsigned int a10, uint64_t a11)
{
  _QWORD *result;

  if (*(_QWORD *)(a1 + 26488) || *(_BYTE *)(a1 + 26662))
  {
    result = gleAddCommand(a1, (uint64_t)glTexImage3D_UnpackThread, 48);
    *(_DWORD *)result = a2;
    *((_DWORD *)result + 1) = a3;
    *((_DWORD *)result + 2) = a4;
    *((_DWORD *)result + 3) = a5;
    *((_DWORD *)result + 4) = a6;
    *((_DWORD *)result + 5) = a7;
    *((_DWORD *)result + 6) = a8;
    *((_DWORD *)result + 7) = a9;
    *((_DWORD *)result + 8) = a10;
    result[5] = a11;
  }
  else
  {
    (*(void (**)(uint64_t))(a1 + 27752))(a1);
    return (_QWORD *)glTexImage3D_Exec(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  }
  return result;
}

uint64_t glTexImage3D_UnpackThread(uint64_t a1, uint64_t a2)
{
  glTexImage3D_Exec(a1, *(_DWORD *)a2, *(unsigned int *)(a2 + 4), *(_DWORD *)(a2 + 8), *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 32), *(_QWORD *)(a2 + 40));
  return 48;
}

uint64_t glTexSubImage2D_FlushExec(uint64_t a1, int a2, uint64_t a3, unsigned int a4, int a5, uint64_t a6, unsigned int a7, unsigned int a8, int a9, uint64_t a10)
{
  double v11;
  double v12;
  double v13;

  glTexSubImage2D_Exec(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  return glFlush_Exec(a1, v11, v12, v13);
}

_QWORD *glTexSubImage2D_PackThread(uint64_t a1, int a2, uint64_t a3, unsigned int a4, int a5, uint64_t a6, unsigned int a7, unsigned int a8, int a9, unint64_t a10)
{
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  BOOL v22;
  _QWORD *result;
  uint64_t v24;
  int v25;
  unint64_t v26;
  int v28;
  uint64_t v30;
  uint64_t v31;

  v17 = *(_QWORD *)(a1 + 26488);
  if (!*(_BYTE *)(a1 + 26662))
    goto LABEL_9;
  v18 = gleLookUpNonProxyTexture2D(a1, a2);
  v19 = a2 - 34069;
  if ((a2 - 34069) >= 6)
    v19 = 0;
  v20 = v18 + 480 * v19 + 32 * (int)a3;
  v21 = *(_QWORD *)(v20 + 1056);
  v22 = !v21 || v21 > a10;
  if (v22)
  {
LABEL_9:
    if (v17)
    {
LABEL_10:
      result = gleAddCommand(a1, (uint64_t)glTexSubImage2D_UnpackThread, 48);
      *(_DWORD *)result = a2;
      *((_DWORD *)result + 1) = a3;
      *((_DWORD *)result + 2) = a4;
      *((_DWORD *)result + 3) = a5;
      *((_DWORD *)result + 5) = a6;
      *((_DWORD *)result + 6) = a7;
      *((_DWORD *)result + 8) = a8;
      *((_DWORD *)result + 9) = a9;
      result[5] = a10;
      return result;
    }
  }
  else
  {
    v30 = 0;
    v31 = 0;
    v24 = v18 + 480 * v19 + 32 * (int)a3;
    v28 = a5;
    v25 = *(unsigned __int16 *)(v24 + 1038) * *(unsigned __int16 *)(v24 + 1044);
    v26 = *(_QWORD *)(v20 + 1056) + (int)(v25 * glePixelBytes(a8, a9));
    glePixelPackSettings(a1, a8, a9, a6, a7, (int *)(a1 + 18484), (_DWORD *)&v31 + 1, &v31, (_DWORD *)&v30 + 1, (int *)&v30, 2);
    v22 = a10 + v31 + HIDWORD(v31) * a7 * HIDWORD(v30) > v26;
    a5 = v28;
    if (!v22 || v17 != 0)
      goto LABEL_10;
  }
  (*(void (**)(uint64_t))(a1 + 27752))(a1);
  return (_QWORD *)glTexSubImage2D_Exec(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t glTexSubImage2D_UnpackThread(uint64_t a1, uint64_t a2)
{
  glTexSubImage2D_Exec(a1, *(_DWORD *)a2, *(unsigned int *)(a2 + 4), *(_DWORD *)(a2 + 8), *(_DWORD *)(a2 + 12), *(unsigned int *)(a2 + 20), *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 32), *(_DWORD *)(a2 + 36), *(_QWORD *)(a2 + 40));
  return 48;
}

uint64_t glTexSubImage2D_FlushExecThread(uint64_t a1, int a2, uint64_t a3, unsigned int a4, int a5, uint64_t a6, unsigned int a7, unsigned int a8, int a9, uint64_t a10)
{
  double v18;
  double v19;
  double v20;

  (*(void (**)(void))(a1 + 27752))();
  glTexSubImage2D_Exec(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  return glFlush_Exec(a1, v18, v19, v20);
}

uint64_t glTexSubImage3D_Exec(uint64_t a1, int a2, uint64_t a3, unsigned int a4, unsigned int a5, int a6, uint64_t a7, int a8, int a9, unsigned int a10, int a11, uint64_t a12)
{
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  double v22;
  double v23;
  double v24;
  int MatrixIdentifier;
  _WORD *v26;
  uint64_t v27;
  _BOOL4 v28;
  uint64_t v29;
  _BYTE *v30;
  _BOOL4 v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char *v37;
  char v38;
  int v39;
  unsigned int v40;
  int v41;
  _BOOL4 v42;
  uint64_t v43;
  char v44;
  char *v45;
  char v46;
  int v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v59;
  unint64_t v60;

  v60 = 0;
  v59 = a3;
  result = gleCheckTexSubImage3DArgs(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, &v60);
  if (!result)
    return result;
  v17 = result;
  if (*(_BYTE *)(result + 770))
    return result;
  v18 = a12;
  v19 = *(_QWORD *)(a1 + 19336);
  v54 = v19;
  if (v19)
  {
    v55 = result;
    v20 = gleOffsetLimitStorage3D((int *)(a1 + 18484), a7, a8, a9, v60, a12);
    v17 = v55;
    result = gleHandleUnpackBufferInEngineNoSync(a1, v19, v20, (BYTE4(v60) & 0x1F) + 1, a12);
    v18 = result;
    if (!result)
      return result;
  }
  if (!(_DWORD)a7 || !a8 || !a9)
    return result;
  v52 = a6;
  v53 = v18;
  v21 = gleStandardizeIntegerFormat(a10);
  if ((*(_BYTE *)(a1 + 1540) & 4) != 0)
  {
    MatrixIdentifier = gleGenerateMatrixIdentifier(a1, a1 + 9488, v22, v23, v24);
    *(_DWORD *)(a1 + 19152) = *(_DWORD *)(a1 + 19152) & 0xFFFFFEFF | ((MatrixIdentifier != -1074791426) << 8);
    *(_DWORD *)(a1 + 29732) = MatrixIdentifier;
  }
  v26 = (_WORD *)(a1 + 29832);
  v27 = v17 + 1032;
  v56 = v17 + 1032 + 32 * (int)v59;
  v28 = (a11 != 6656 || (*(_BYTE *)(a1 + 18504) & 7) == 0)
     && checkFastPath(a1, v56, a4, a5, v52, a7, a8, v60, v53, 4) != 0;
  if (!*(_QWORD *)(v17 + 536) && (*(_WORD *)(v17 + 768) & 0x800) == 0)
    gfxWaitTextureOnDevices();
  if (v28
    && *(unsigned __int8 *)(v17 + 976) <= (int)v59
    && *(unsigned __int8 *)(v17 + 978) >= (int)v59
    && ((1 << v59) & *(unsigned __int16 *)(v17 + 984)) != 0)
  {
    v29 = *(_QWORD *)(a1 + 8 * *(unsigned __int16 *)(a1 + 23768) + 23936);
    if (v29)
      v30 = (_BYTE *)(v29 + 198);
    else
      v30 = (_BYTE *)(v17 + 926);
    v31 = (*v30 & 1) == 0;
    if ((*(_BYTE *)(v17 + 898) & 1) != 0)
    {
      v33 = v59;
      if (*(_DWORD *)(v17 + 884) == (_DWORD)v59)
      {
        v42 = (*v30 & 1) == 0;
        gleGenerateEmptyMipmaps(a1, v17, 0, v59, *(unsigned __int8 *)(v17 + 975), 0, 0);
        v31 = v42;
        v33 = v59;
        v51 = 0;
        v32 = 1;
      }
      else
      {
        v32 = 0;
        v51 = 1;
      }
    }
    else
    {
      v32 = 0;
      v51 = 1;
      v33 = v59;
    }
    *(_WORD *)(v17 + 968) = v21;
    *(_WORD *)(v17 + 970) = a11;
    if (v54)
    {
      LODWORD(v50) = v31;
      HIDWORD(v50) = v31;
      result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, unint64_t, unint64_t, uint64_t, _DWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 29448) + 368))(*(_QWORD *)(a1 + 29016), *(_QWORD *)(v17 + 8 * *(unsigned __int8 *)(a1 + 32499)), 0, v33, a4, a5, v52, a7, __PAIR64__(a9, a8), __PAIR64__(a11, v21), v53, 0, *(_QWORD *)(v54 + 40 + 8 * *(unsigned __int8 *)(a1 + 32499)), v50);
      if ((_DWORD)result)
        goto LABEL_61;
      if (*(_QWORD *)(v54 + 192))
        gleSynchronizeBufferOnCurrentDevicesForRead(a1, v54 + 40);
    }
    v49 = v53;
    result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 29448) + 368))(*(_QWORD *)(a1 + 29016), *(_QWORD *)(v17 + 8 * *(unsigned __int8 *)(a1 + 32499)), 0);
    if ((_DWORD)result)
    {
LABEL_61:
      if ((*(_WORD *)(v17 + 768) & 0x800) == 0)
      {
        *(_QWORD *)(v17 + 536) = *(_QWORD *)(a1 + 29024);
        v43 = v27 + 32 * (int)v59;
        v46 = *(_BYTE *)(v43 + 11);
        v45 = (char *)(v43 + 11);
        v44 = v46;
        if ((v46 & 0x10) != 0)
        {
          if ((v44 & 9) == 0)
          {
            result = gfxFreeTextureLevel();
            v44 = *v45;
          }
          v44 &= ~0x10u;
          *(_WORD *)(v17 + 996) &= ~(unsigned __int16)(1 << v59);
        }
        *v45 = v44 | 0x40;
        if ((v51 & 1) == 0)
        {
          v47 = *(unsigned __int8 *)(v17 + 975);
          if (v47 > (int)v59)
          {
            v48 = (_BYTE *)(v17 + 32 * v59 + 1075);
            do
            {
              *v48 |= 0x40u;
              v48 += 32;
              LODWORD(v59) = v59 + 1;
            }
            while ((int)v59 < v47);
          }
        }
      }
      return result;
    }
  }
  else
  {
    if (v54 && *(_QWORD *)(v54 + 192))
      gleSynchronizeBufferOnCurrentDevicesForRead(a1, v54 + 40);
    v32 = 0;
  }
  v34 = v17 + 1032;
  v35 = v27 + 32 * (int)v59;
  v38 = *(_BYTE *)(v35 + 11);
  v37 = (char *)(v35 + 11);
  v36 = v38;
  if ((v38 & 0x40) != 0)
  {
    gleSynchronizeTextureLevelOnCurrentDevices(a1, v17);
  }
  else if ((v36 & 0x10) == 0)
  {
    if (!*(_QWORD *)(v34 + 32 * (int)v59 + 24))
    {
      if (!gfxAllocateTextureLevel())
      {
        if (!*v26)
          *v26 = 1285;
        goto LABEL_38;
      }
      v36 = *v37;
    }
    *v37 = v36 | 0x10;
  }
LABEL_38:
  gfxModifyPluginTextureLevel();
  if ((*(_WORD *)(v17 + 768) & 0x800) == 0)
    (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 29496) + 280))(*(_QWORD *)(a1 + 29464), 1, 0, *(_QWORD *)(v17 + 8 * *(unsigned __int8 *)(a1 + 32500)));
  if ((*v37 & 0x10) != 0)
  {
    v39 = *(unsigned __int8 *)(v34 + 32 * (int)v59 + 10);
    v40 = v39 + a4;
    if ((*(_WORD *)(v17 + 982) & 0x600) != 0)
      v41 = *(unsigned __int8 *)(v34 + 32 * (int)v59 + 10);
    else
      v41 = 0;
    if ((*(_WORD *)(v17 + 982) & 0x1800) == 0)
      v39 = 0;
    LOBYTE(v49) = 0;
    gleTextureImagePut((_DWORD *)a1, v17, v56, v40, v41 + a5, v39 + v52, a7, a8, a9, v60, v49, a1 + 18484, v53);
  }
  if ((*(_BYTE *)(v17 + 898) & 1) == 0)
    return gleDirtyTextureLevelCurrentBindPointsData(a1, v17, v56);
  if (*(_DWORD *)(v17 + 884) != (_DWORD)v59)
    return gleDirtyTextureLevelCurrentBindPointsData(a1, v17, v56);
  result = gleGenMipmaps(a1, v17, 0, v59, 1, v32 == 0);
  if (!(_DWORD)result)
    return gleDirtyTextureLevelCurrentBindPointsData(a1, v17, v56);
  return result;
}

_QWORD *glTexSubImage3D_PackThread(uint64_t a1, int a2, uint64_t a3, unsigned int a4, unsigned int a5, int a6, unsigned int a7, int a8, int a9, unsigned int a10, int a11, uint64_t a12)
{
  _QWORD *result;

  if (*(_QWORD *)(a1 + 26488))
  {
    result = gleAddCommand(a1, (uint64_t)glTexSubImage3D_UnpackThread, 48);
    *(_DWORD *)result = a2;
    *((_DWORD *)result + 1) = a3;
    *((_DWORD *)result + 2) = a4;
    *((_DWORD *)result + 3) = a5;
    *((_DWORD *)result + 4) = a6;
    *((_DWORD *)result + 5) = a7;
    *((_DWORD *)result + 6) = a8;
    *((_DWORD *)result + 7) = a9;
    *((_DWORD *)result + 8) = a10;
    *((_DWORD *)result + 9) = a11;
    result[5] = a12;
  }
  else
  {
    (*(void (**)(uint64_t))(a1 + 27752))(a1);
    return (_QWORD *)glTexSubImage3D_Exec(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
  }
  return result;
}

uint64_t glTexSubImage3D_UnpackThread(uint64_t a1, uint64_t a2)
{
  glTexSubImage3D_Exec(a1, *(_DWORD *)a2, *(unsigned int *)(a2 + 4), *(_DWORD *)(a2 + 8), *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 16), *(unsigned int *)(a2 + 20), *(_DWORD *)(a2 + 24), *(_QWORD *)(a2 + 28), HIDWORD(*(_QWORD *)(a2 + 28)), *(_DWORD *)(a2 + 36), *(_QWORD *)(a2 + 40));
  return 48;
}

_QWORD *glBeginTransformFeedback_Exec(_QWORD *result, unsigned int a2)
{
  _DWORD *v2;
  uint64_t v3;
  _QWORD *v5;
  _DWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t updated;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  __int16 v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  _DWORD *v24;
  uint64_t i;
  uint64_t j;
  uint64_t v27;
  uint64_t v28;
  uint64_t k;
  _QWORD v30[2];
  _DWORD *v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v2 = (_DWORD *)result + 7163;
  v3 = result[3304];
  if (*(__int16 *)(v3 + 42) != -1)
    goto LABEL_15;
  if (a2 > 4 || ((1 << a2) & 0x13) == 0)
  {
    if (*((_WORD *)result + 14916))
      return result;
    v14 = 1280;
    goto LABEL_61;
  }
  v5 = result;
  v6 = (_DWORD *)result[3096];
  if (!v6)
  {
    v11 = result[3097];
    if (!v11)
    {
LABEL_15:
      if (*((_WORD *)result + 14916))
        return result;
      v14 = 1282;
LABEL_61:
      *((_WORD *)result + 14916) = v14;
      return result;
    }
    v12 = v11 + 40;
    v13 = 3;
    while (1)
    {
      v6 = *(_DWORD **)(v12 + 8 * v13);
      if (v6)
        break;
      if (--v13 == -1)
        goto LABEL_15;
    }
  }
  v7 = v6[931];
  if (!v7 || (v7 & ~*(_DWORD *)(v3 + 168)) != 0)
    goto LABEL_15;
  if (*((_BYTE *)result + 32481))
    *((_WORD *)result + 8993) = a2;
  *(_WORD *)(v3 + 42) = a2;
  *(_DWORD *)(result[3304] + 172) = 0;
  v8 = result[3304];
  ++*(_DWORD *)(v8 + 20);
  ++v6[5];
  *(_QWORD *)(v8 + 184) = v6;
  ++v6[993];
  updated = gleUpdateInvalidPrimitives((uint64_t)result);
  *v2 = 0;
  *((_DWORD *)v5 + 387) |= 0x8000u;
  v31 = v2;
  if (a2 > 4)
    v10 = 0;
  else
    v10 = qword_21B9A4C78[a2];
  v30[1] = v30;
  MEMORY[0x24BDAC7A8](updated);
  v17 = (_QWORD *)((char *)v30 - v16);
  *(_QWORD *)((char *)v30 - v16) = 0;
  if (v15 << 16 >= 1)
  {
    v18 = 0;
    if (v15 <= 1)
      v19 = 1;
    else
      v19 = v15;
    do
    {
      v32 = 0;
      ShGetTransformFeedbackVarying();
      if ((int)v32 <= 36293)
      {
        v20 = 4;
        switch((int)v32)
        {
          case 35664:
          case 35667:
          case 35671:
            goto LABEL_26;
          case 35665:
          case 35668:
          case 35672:
            goto LABEL_29;
          case 35666:
          case 35669:
          case 35673:
          case 35674:
            goto LABEL_28;
          case 35670:
            break;
          case 35675:
            v20 = 36;
            break;
          case 35676:
            v20 = 64;
            break;
          case 35677:
          case 35678:
          case 35679:
          case 35680:
          case 35681:
          case 35682:
          case 35683:
          case 35684:
            goto LABEL_31;
          case 35685:
          case 35687:
            v20 = 24;
            break;
          case 35686:
          case 35689:
            v20 = 32;
            break;
          case 35688:
          case 35690:
            v20 = 48;
            break;
          default:
            if ((v32 - 5124) >= 3)
              goto LABEL_31;
            break;
        }
      }
      else
      {
        switch((_DWORD)v32)
        {
          case 0x8DC8:
LABEL_28:
            v20 = 16;
            break;
          case 0x8DC7:
LABEL_29:
            v20 = 12;
            break;
          case 0x8DC6:
LABEL_26:
            v20 = 8;
            break;
          default:
LABEL_31:
            v20 = 0;
            break;
        }
      }
      v21 = SHIDWORD(v32) * (uint64_t)v20;
      if (v6[992] == 35980)
        *v17 += v21;
      else
        v17[v18] = v21;
      ++v18;
    }
    while (v19 != v18);
  }
  v22 = v6[931];
  if ((v22 & 1) != 0)
    v23 = v5[2253] / (unint64_t)(*v17 * v10);
  else
    LODWORD(v23) = 0;
  v24 = v31;
  if (v6[992] == 35981)
  {
    for (i = 0; i != 3; ++i)
    {
      if (((v22 >> (i + 1)) & 1) != 0
        && v23 >= (v5[i + 2254] / (unint64_t)(v17[i + 1] * v10)))
      {
        LODWORD(v23) = v5[i + 2254] / (unint64_t)(v17[i + 1] * v10);
      }
    }
  }
  *(_DWORD *)(v5[3304] + 176) = 0;
  *(_DWORD *)(v5[3304] + 180) = v23;
  if (*((_BYTE *)v24 + 3829))
  {
    for (j = 0; j != 5; ++j)
    {
      if (((v6[931] >> j) & 1) != 0)
      {
        v27 = *(_QWORD *)(v5[3304] + 8 * j + 128);
        if (*(_BYTE *)(v27 + 165))
        {
          if (!*(_QWORD *)(v27 + 192))
            gfxWaitBufferOnDevices();
        }
      }
    }
    return (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(v5[3687] + 168))(v5[3683], 0);
  }
  else
  {
    result = gleResetTransformFeedbackBufferCachePointers(v5);
    v28 = v5[3102];
    for (k = 16; k != 240; k += 56)
      *(_DWORD *)(v28 + k) = 0;
  }
  return result;
}

void glEndTransformFeedback_Exec(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t j;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  int v21;

  v1 = a1 + 28652;
  v2 = *(_QWORD *)(a1 + 26432);
  if (*(__int16 *)(v2 + 42) == -1)
  {
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
  else
  {
    if (*(_BYTE *)(v2 + 41))
      glResumeTransformFeedback_GL3Exec((_QWORD *)a1);
    if (*(_BYTE *)(v1 + 3829))
      *(_WORD *)(a1 + 17986) = -1;
    *(_WORD *)(*(_QWORD *)(a1 + 26432) + 42) = -1;
    *(_BYTE *)(*(_QWORD *)(a1 + 26432) + 40) = 1;
    gleUpdateInvalidPrimitives(a1);
    *(_DWORD *)v1 = 0;
    *(_DWORD *)(a1 + 1548) |= 0x8000u;
    v4 = *(unsigned int **)(a1 + 24768);
    if (!v4)
    {
      v5 = *(_QWORD *)(a1 + 24776);
      v4 = *(unsigned int **)(v5 + 64);
      if (!v4)
      {
        v6 = v5 + 40;
        v7 = 2;
        do
          v4 = *(unsigned int **)(v6 + 8 * v7--);
        while (!v4);
      }
    }
    v8 = v4[5] - 1;
    v4[5] = v8;
    if (v8 == 1)
      gleUnbindDeleteHashNameAndObject(a1, (void (**)(_QWORD, uint64_t))(*(_QWORD *)(a1 + 19296) + 168), (void (*)(uint64_t, uint64_t))gleUnbindProgramObject, v4[4]);
    *(_QWORD *)(*(_QWORD *)(a1 + 26432) + 184) = 0;
    --v4[993];
    if (*(_BYTE *)(v1 + 3829))
    {
      for (i = 0; i != 5; ++i)
      {
        if (((v4[931] >> i) & 1) != 0)
        {
          v10 = *(_QWORD *)(*(_QWORD *)(a1 + 26432) + 8 * i + 128);
          v11 = *(_QWORD *)(a1 + 29024);
          *(_BYTE *)(v10 + 167) = 0;
          *(_QWORD *)(v10 + 192) = v11;
          v12 = *(_QWORD *)(a1 + 26384);
          if (v12)
            *(_BYTE *)(v12 + 1216) = 0;
        }
      }
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 29496) + 168))(*(_QWORD *)(a1 + 29464), 0);
    }
    else
    {
      v13 = 0;
      v14 = *(_QWORD *)(a1 + 24816);
      do
      {
        v15 = (_DWORD *)(v14 + v13);
        *v15 = *(_DWORD *)(v14 + v13 + 16);
        v15[4] = 0;
        v13 += 56;
      }
      while (v13 != 224);
      for (j = 0; j != 5; ++j)
      {
        if (((v4[931] >> j) & 1) != 0)
        {
          v17 = *(_QWORD *)(*(_QWORD *)(a1 + 26432) + 8 * j + 128);
          *(_BYTE *)(v17 + 167) = 1;
          v18 = *(unsigned __int8 *)(v1 + 3844);
          if (*(_BYTE *)(v1 + 3844))
          {
            v19 = (_DWORD *)(v17 + 304);
            do
            {
              *v19 |= 4u;
              v19 += 2;
              --v18;
            }
            while (v18);
          }
          gleDirtyBufferObjectCurrentBindPoints(a1, v17 + 40);
        }
      }
    }
    v20 = *(_QWORD *)(a1 + 26432);
    v21 = *(_DWORD *)(v20 + 20) - 1;
    *(_DWORD *)(v20 + 20) = v21;
    if (!v21)
    {
      gleBindTransformFeedback(a1, *(_QWORD *)(a1 + 26440));
      gleFreeTransformFeedbackObject(a1, *(_QWORD **)(a1 + 26432));
    }
  }
}

_QWORD *glResumeTransformFeedback_GL3Exec(_QWORD *result)
{
  _QWORD *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;

  v1 = result;
  v2 = (char *)result + 28652;
  v3 = result[3096];
  if (!v3)
  {
    v5 = result[3097];
    if (!v5)
      goto LABEL_13;
    v6 = v5 + 40;
    v7 = 3;
    while (1)
    {
      v3 = *(_QWORD *)(v6 + 8 * v7);
      if (v3)
        break;
      if (--v7 == -1)
        goto LABEL_13;
    }
  }
  v4 = result[3304];
  if (*(__int16 *)(v4 + 42) != -1 && *(_BYTE *)(v4 + 41) && *(_QWORD *)(v4 + 184) == v3)
  {
    if (*((_BYTE *)result + 32481))
    {
      *((_BYTE *)result + 17985) = 0;
      *((_WORD *)result + 8993) = *(_WORD *)(v4 + 42);
    }
    *(_BYTE *)(v4 + 41) = 0;
    gleUpdateInvalidPrimitives((uint64_t)result);
    *(_DWORD *)v2 = 0;
    *((_DWORD *)v1 + 387) |= 0x8000u;
    if (v2[3829])
      return (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(v1[3687] + 168))(v1[3683], 0);
    else
      return gleResetTransformFeedbackBufferCachePointers(v1);
  }
LABEL_13:
  if (!*((_WORD *)result + 14916))
    *((_WORD *)result + 14916) = 1282;
  return result;
}

void glTransformFeedbackVaryingsEXT_Exec(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, int a5)
{
  int v7;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  const char *v16;
  int v17;
  BOOL v18;
  _BOOL4 v19;
  __int16 *v20;
  __int16 v21;
  int v22;

  if ((a5 - 35982) <= 0xFFFFFFFD)
  {
    v20 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832))
      return;
    v21 = 1280;
    goto LABEL_30;
  }
  if ((a3 & 0x80000000) != 0 || (v7 = a5, a5 == 35981) && *(_DWORD *)(*(_QWORD *)(a1 + 29032) + 480) < a3)
  {
LABEL_28:
    v20 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832))
      return;
    v21 = 1281;
    goto LABEL_30;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v10 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, a2);
  if (!v10)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    goto LABEL_28;
  }
  v11 = v10;
  if (*((_DWORD *)v10 + 6) == 8)
  {
    if (a3)
    {
      v22 = v7;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      do
      {
        v15 = 0;
        v16 = *(const char **)(a4 + 8 * v12);
        do
        {
          v17 = strcmp(v16, glTransformFeedbackVaryingsEXT_Exec_special_varyings[v15]);
          if (!v17)
            ++v14;
          if (!(v17 | v15))
            ++v13;
          ++v15;
        }
        while (v15 != 5);
        ++v12;
      }
      while (v12 != a3);
      v18 = v14 != 0;
      v19 = v13 > 3;
      v7 = v22;
    }
    else
    {
      v18 = 0;
      v19 = 0;
    }
    if (v7 != 35981)
      v18 = 0;
    if (!v18 && !v19)
    {
      ShTransformFeedbackVaryings();
      *((_DWORD *)v11 + 990) = v7;
      *((_DWORD *)v11 + 989) = a3;
      os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
      return;
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v20 = (__int16 *)(a1 + 29832);
  if (!*(_WORD *)(a1 + 29832))
  {
    v21 = 1282;
LABEL_30:
    *v20 = v21;
  }
}

void glGetTransformFeedbackVaryingEXT_Exec(uint64_t a1, unsigned int a2, unsigned int a3, int a4)
{
  uint64_t *v7;
  int TransformFeedbackVarying;
  __int16 *v9;
  __int16 v10;

  if ((a4 & 0x80000000) == 0)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    v7 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, a2);
    if (v7)
    {
      if (*((_DWORD *)v7 + 6) != 8)
      {
        os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
        goto LABEL_12;
      }
      if (*((_BYTE *)v7 + 3976) == 1 && *((_DWORD *)v7 + 991) > a3)
      {
        TransformFeedbackVarying = ShGetTransformFeedbackVarying();
        os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
        if (TransformFeedbackVarying)
          return;
LABEL_12:
        v9 = (__int16 *)(a1 + 29832);
        if (!*(_WORD *)(a1 + 29832))
        {
          v10 = 1282;
          goto LABEL_14;
        }
        return;
      }
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  v9 = (__int16 *)(a1 + 29832);
  if (!*(_WORD *)(a1 + 29832))
  {
    v10 = 1281;
LABEL_14:
    *v9 = v10;
  }
}

void glGenTransformFeedbacks_GL3Exec(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  int v6;
  uint64_t v7;

  if ((a2 & 0x80000000) != 0)
  {
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1281;
  }
  else
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    v6 = gleGenHashNames(a1 + 26400, a2);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (v6 && a2)
    {
      v7 = a2;
      do
      {
        *a3++ = v6++;
        --v7;
      }
      while (v7);
    }
  }
}

void glDeleteTransformFeedbacks_GL3Exec(uint64_t a1, int a2, unsigned int *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t *v15;
  int v16;

  if (a2 < 0)
  {
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1281;
  }
  else
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (a2)
    {
      v6 = a2;
      v7 = a2;
      v8 = a3;
      while (1)
      {
        v10 = *v8++;
        v9 = v10;
        if (v10)
        {
          v11 = gleLookupHashObject(a1 + 26400, v9);
          if (v11)
          {
            if (*((__int16 *)v11 + 21) != -1)
              break;
          }
        }
        if (!--v7)
        {
          if (a2 >= 1)
          {
            do
            {
              v13 = *a3++;
              v12 = v13;
              if (v13)
              {
                v14 = gleDeleteHashNameAndObject_NoDecrement(a1 + 26400, v12);
                if (v14)
                {
                  v15 = v14;
                  if (*((_DWORD *)v14 + 4) == *(_DWORD *)(*(_QWORD *)(a1 + 26432) + 16))
                    gleBindTransformFeedback(a1, *(_QWORD *)(a1 + 26440));
                  v16 = *((_DWORD *)v15 + 5) - 1;
                  *((_DWORD *)v15 + 5) = v16;
                  if (!v16)
                    gleFreeTransformFeedbackObject(a1, v15);
                }
              }
              --v6;
            }
            while (v6);
          }
          goto LABEL_16;
        }
      }
      if (!*(_WORD *)(a1 + 29832))
        *(_WORD *)(a1 + 29832) = 1282;
    }
LABEL_16:
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
}

void glBindTransformFeedback_GL3Exec(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v5;
  void *TransformFeedbackObject;
  __int16 *v7;
  __int16 v8;

  if (a2 != 36386)
  {
    v7 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832))
      return;
    v8 = 1281;
    goto LABEL_14;
  }
  v5 = *(_QWORD *)(a1 + 26432);
  if (*(__int16 *)(v5 + 42) == -1 || *(_BYTE *)(v5 + 41))
  {
    if (!a3)
    {
      TransformFeedbackObject = *(void **)(a1 + 26440);
      goto LABEL_9;
    }
    TransformFeedbackObject = gleLookupHashObject(a1 + 26400, a3);
    if (TransformFeedbackObject)
    {
LABEL_9:
      gleBindTransformFeedback(a1, (uint64_t)TransformFeedbackObject);
      return;
    }
    if (gleIsHashName(a1 + 26400, a3))
    {
      TransformFeedbackObject = gleCreateTransformFeedbackObject(a1, a3);
      gleAddHashNameAndObject(a1, a1 + 26400, (uint64_t)TransformFeedbackObject);
      goto LABEL_9;
    }
  }
  v7 = (__int16 *)(a1 + 29832);
  if (!*(_WORD *)(a1 + 29832))
  {
    v8 = 1282;
LABEL_14:
    *v7 = v8;
  }
}

_QWORD *glPauseTransformFeedback_GL3Exec(_QWORD *result)
{
  char *v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = (char *)result + 28652;
  v2 = result[3304];
  if (*(__int16 *)(v2 + 42) == -1 || *(_BYTE *)(v2 + 41))
  {
    if (!*((_WORD *)result + 14916))
      *((_WORD *)result + 14916) = 1282;
  }
  else
  {
    v3 = result;
    if (*((_BYTE *)result + 32481))
    {
      *((_BYTE *)result + 17985) = 1;
      *((_WORD *)result + 8993) = -1;
    }
    *(_BYTE *)(v2 + 41) = 1;
    gleUpdateInvalidPrimitives((uint64_t)result);
    *(_DWORD *)v1 = 0;
    *((_DWORD *)v3 + 387) |= 0x8000u;
    if (v1[3829])
      return (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(v3[3687] + 168))(v3[3683], 0);
    else
      return gleResetTransformFeedbackBufferCachePointers(v3);
  }
  return result;
}

uint64_t *glIsTransformFeedback_GL3Exec(uint64_t a1, unsigned int a2)
{
  uint64_t *result;

  if (!a2)
    return (uint64_t *)1;
  result = gleLookupHashObject(a1 + 26400, a2);
  if (result)
    return (uint64_t *)(*((_DWORD *)result + 6) == 14);
  return result;
}

_QWORD *glBeginTransformFeedback_PackThread(uint64_t a1, int a2)
{
  _QWORD *result;

  result = gleAddCommand(a1, (uint64_t)glBeginTransformFeedback_UnpackThread, 4);
  *(_DWORD *)result = a2;
  return result;
}

uint64_t glBeginTransformFeedback_UnpackThread(_QWORD *a1, unsigned int *a2)
{
  glBeginTransformFeedback_Exec(a1, *a2);
  return 4;
}

_QWORD *glEndTransformFeedback_PackThread(uint64_t a1)
{
  return gleAddCommand(a1, (uint64_t)glEndTransformFeedback_UnpackThread, 0);
}

uint64_t glEndTransformFeedback_UnpackThread(uint64_t a1)
{
  glEndTransformFeedback_Exec(a1);
  return 0;
}

void glTransformFeedbackVaryingsEXT_ExecThread(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, int a5)
{
  (*(void (**)(void))(a1 + 27752))();
  glTransformFeedbackVaryingsEXT_Exec(a1, a2, a3, a4, a5);
}

void glGetTransformFeedbackVaryingEXT_ExecThread(uint64_t a1, unsigned int a2, unsigned int a3, int a4)
{
  (*(void (**)(void))(a1 + 27752))();
  glGetTransformFeedbackVaryingEXT_Exec(a1, a2, a3, a4);
}

void glGenTransformFeedbacks_ExecThread(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  (*(void (**)(void))(a1 + 27752))();
  glGenTransformFeedbacks_GL3Exec(a1, a2, a3);
}

void glDeleteTransformFeedbacks_ExecThread(uint64_t a1, int a2, unsigned int *a3)
{
  (*(void (**)(void))(a1 + 27752))();
  glDeleteTransformFeedbacks_GL3Exec(a1, a2, a3);
}

_DWORD *glBindTransformFeedback_PackThread(uint64_t a1, int a2, int a3)
{
  _DWORD *result;

  result = gleAddCommand(a1, (uint64_t)glBindTransformFeedback_UnpackThread, 8);
  *result = a2;
  result[1] = a3;
  return result;
}

uint64_t glBindTransformFeedback_UnpackThread(uint64_t a1, uint64_t a2)
{
  glBindTransformFeedback_GL3Exec(a1, *(_DWORD *)a2, *(_DWORD *)(a2 + 4));
  return 8;
}

_QWORD *glPauseTransformFeedback_PackThread(uint64_t a1)
{
  return gleAddCommand(a1, (uint64_t)glPauseTransformFeedback_UnpackThread, 0);
}

uint64_t glPauseTransformFeedback_UnpackThread(_QWORD *a1)
{
  glPauseTransformFeedback_GL3Exec(a1);
  return 0;
}

_QWORD *glResumeTransformFeedback_PackThread(uint64_t a1)
{
  return gleAddCommand(a1, (uint64_t)glResumeTransformFeedback_UnpackThread, 0);
}

uint64_t glResumeTransformFeedback_UnpackThread(_QWORD *a1)
{
  glResumeTransformFeedback_GL3Exec(a1);
  return 0;
}

uint64_t *glIsTransformFeedback_ExecThread(uint64_t a1, unsigned int a2)
{
  uint64_t *result;

  (*(void (**)(void))(a1 + 27752))();
  if (!a2)
    return (uint64_t *)1;
  result = gleLookupHashObject(a1 + 26400, a2);
  if (result)
    return (uint64_t *)(*((_DWORD *)result + 6) == 14);
  return result;
}

uint64_t glTranslate_ListExec(uint64_t a1, _DWORD *a2, double a3, double a4, double a5)
{
  LODWORD(a3) = *a2;
  LODWORD(a4) = a2[1];
  LODWORD(a5) = a2[2];
  glTranslate_Exec(a1, a3, a4, a5);
  return 12;
}

uint64_t glTranslatex_Exec(uint64_t a1, int a2, int a3, int a4, double a5, double a6, double a7)
{
  *(float *)&a5 = (float)a2 * 0.000015259;
  *(float *)&a6 = (float)a3 * 0.000015259;
  *(float *)&a7 = (float)a4 * 0.000015259;
  return glTranslate_Exec(a1, a5, a6, a7);
}

float32x2_t glTranslatex_PackThread(uint64_t a1, unsigned int a2, unsigned int a3, int a4)
{
  float32x2_t v4;
  float32_t v5;
  float32x2_t *v6;
  float32x2_t result;

  v4 = vcvt_f32_s32((int32x2_t)__PAIR64__(a3, a2));
  v5 = (float)a4 * 0.000015259;
  v6 = (float32x2_t *)gleAddCommand(a1, (uint64_t)glTranslate_ListExec, 12);
  result = vmul_f32(v4, (float32x2_t)vdup_n_s32(0x37800000u));
  *v6 = result;
  v6[1].f32[0] = v5;
  return result;
}

void glUniform1f_Exec(uint64_t a1, int a2, float a3)
{
  uint64_t v5;
  uint64_t v6;
  float v7;

  v7 = a3;
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v5 = *(_QWORD *)(a1 + 24768);
  if (v5 || (v6 = *(_QWORD *)(a1 + 24776)) != 0 && (v5 = *(_QWORD *)(v6 + 80)) != 0)
  {
    setProgramUniformInner(a1, v5 + 40, a2, 1, 5126, 0, &v7);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
}

_QWORD *glUniform1f_Comp(uint64_t a1, int a2, float a3)
{
  _QWORD *result;

  result = gleAddCommand(a1, (uint64_t)glUniform1f_ListExec, 12);
  *(_DWORD *)result = a2;
  *((_DWORD *)result + 1) = 1;
  *((float *)result + 2) = a3;
  return result;
}

uint64_t glUniform1f_ListExec(uint64_t a1, int *a2)
{
  void *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a2 + 2;
  v4 = *a2;
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v5 = *(_QWORD *)(a1 + 24768);
  if (v5 || (v6 = *(_QWORD *)(a1 + 24776)) != 0 && (v5 = *(_QWORD *)(v6 + 80)) != 0)
  {
    setProgramUniformInner(a1, v5 + 40, v4, 1, 5126, 0, v3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    return 12;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  if (*(_WORD *)(a1 + 29832))
    return 12;
  *(_WORD *)(a1 + 29832) = 1282;
  return 12;
}

void glUniform2f_Exec(uint64_t a1, int a2, float a3, float a4)
{
  uint64_t v6;
  uint64_t v7;
  _DWORD v8[2];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  *(float *)v8 = a3;
  *(float *)&v8[1] = a4;
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v6 = *(_QWORD *)(a1 + 24768);
  if (v6 || (v7 = *(_QWORD *)(a1 + 24776)) != 0 && (v6 = *(_QWORD *)(v7 + 80)) != 0)
  {
    setProgramUniformInner(a1, v6 + 40, a2, 1, 35664, 0, v8);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
}

_QWORD *glUniform2f_Comp(uint64_t a1, int a2, float a3, float a4)
{
  _QWORD *result;

  result = gleAddCommand(a1, (uint64_t)glUniform2f_ListExec, 16);
  *(_DWORD *)result = a2;
  *((_DWORD *)result + 1) = 1;
  *((float *)result + 2) = a3;
  *((float *)result + 3) = a4;
  return result;
}

uint64_t glUniform2f_ListExec(uint64_t a1, int *a2)
{
  void *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a2 + 2;
  v4 = *a2;
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v5 = *(_QWORD *)(a1 + 24768);
  if (v5 || (v6 = *(_QWORD *)(a1 + 24776)) != 0 && (v5 = *(_QWORD *)(v6 + 80)) != 0)
  {
    setProgramUniformInner(a1, v5 + 40, v4, 1, 35664, 0, v3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    return 16;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  if (*(_WORD *)(a1 + 29832))
    return 16;
  *(_WORD *)(a1 + 29832) = 1282;
  return 16;
}

void glUniform3f_Exec(uint64_t a1, int a2, float a3, float a4, float a5)
{
  uint64_t v7;
  uint64_t v8;
  _DWORD v9[3];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  *(float *)v9 = a3;
  *(float *)&v9[1] = a4;
  *(float *)&v9[2] = a5;
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v7 = *(_QWORD *)(a1 + 24768);
  if (v7 || (v8 = *(_QWORD *)(a1 + 24776)) != 0 && (v7 = *(_QWORD *)(v8 + 80)) != 0)
  {
    setProgramUniformInner(a1, v7 + 40, a2, 1, 35665, 0, v9);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
}

_QWORD *glUniform3f_Comp(uint64_t a1, int a2, float a3, float a4, float a5)
{
  _QWORD *result;

  result = gleAddCommand(a1, (uint64_t)glUniform3f_ListExec, 20);
  *(_DWORD *)result = a2;
  *((_DWORD *)result + 1) = 1;
  *((float *)result + 2) = a3;
  *((float *)result + 3) = a4;
  *((float *)result + 4) = a5;
  return result;
}

uint64_t glUniform3f_ListExec(uint64_t a1, int *a2)
{
  void *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a2 + 2;
  v4 = *a2;
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v5 = *(_QWORD *)(a1 + 24768);
  if (v5 || (v6 = *(_QWORD *)(a1 + 24776)) != 0 && (v5 = *(_QWORD *)(v6 + 80)) != 0)
  {
    setProgramUniformInner(a1, v5 + 40, v4, 1, 35665, 0, v3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    return 20;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  if (*(_WORD *)(a1 + 29832))
    return 20;
  *(_WORD *)(a1 + 29832) = 1282;
  return 20;
}

void glUniform4f_Exec(uint64_t a1, int a2, float a3, float a4, float a5, float a6)
{
  uint64_t v8;
  uint64_t v9;
  _DWORD v10[4];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  *(float *)v10 = a3;
  *(float *)&v10[1] = a4;
  *(float *)&v10[2] = a5;
  *(float *)&v10[3] = a6;
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v8 = *(_QWORD *)(a1 + 24768);
  if (v8 || (v9 = *(_QWORD *)(a1 + 24776)) != 0 && (v8 = *(_QWORD *)(v9 + 80)) != 0)
  {
    setProgramUniformInner(a1, v8 + 40, a2, 1, 35666, 0, v10);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
}

_QWORD *glUniform4f_Comp(uint64_t a1, int a2, float a3, float a4, float a5, float a6)
{
  _QWORD *result;

  result = gleAddCommand(a1, (uint64_t)glUniform4f_ListExec, 24);
  *(_DWORD *)result = a2;
  *((_DWORD *)result + 1) = 1;
  *((float *)result + 2) = a3;
  *((float *)result + 3) = a4;
  *((float *)result + 4) = a5;
  *((float *)result + 5) = a6;
  return result;
}

uint64_t glUniform4f_ListExec(uint64_t a1, int *a2)
{
  void *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a2 + 2;
  v4 = *a2;
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v5 = *(_QWORD *)(a1 + 24768);
  if (v5 || (v6 = *(_QWORD *)(a1 + 24776)) != 0 && (v5 = *(_QWORD *)(v6 + 80)) != 0)
  {
    setProgramUniformInner(a1, v5 + 40, v4, 1, 35666, 0, v3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    return 24;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  if (*(_WORD *)(a1 + 29832))
    return 24;
  *(_WORD *)(a1 + 29832) = 1282;
  return 24;
}

void glUniform1i_Exec(uint64_t a1, int a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;

  v7 = a3;
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v5 = *(_QWORD *)(a1 + 24768);
  if (v5 || (v6 = *(_QWORD *)(a1 + 24776)) != 0 && (v5 = *(_QWORD *)(v6 + 80)) != 0)
  {
    setProgramUniformInner(a1, v5 + 40, a2, 1, 5124, 0, &v7);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
}

_DWORD *glUniform1i_Comp(uint64_t a1, int a2, int a3)
{
  _DWORD *result;

  result = gleAddCommand(a1, (uint64_t)glUniform1i_ListExec, 12);
  *result = a2;
  result[1] = 1;
  result[2] = a3;
  return result;
}

uint64_t glUniform1i_ListExec(uint64_t a1, int *a2)
{
  void *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a2 + 2;
  v4 = *a2;
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v5 = *(_QWORD *)(a1 + 24768);
  if (v5 || (v6 = *(_QWORD *)(a1 + 24776)) != 0 && (v5 = *(_QWORD *)(v6 + 80)) != 0)
  {
    setProgramUniformInner(a1, v5 + 40, v4, 1, 5124, 0, v3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    return 12;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  if (*(_WORD *)(a1 + 29832))
    return 12;
  *(_WORD *)(a1 + 29832) = 1282;
  return 12;
}

void glUniform2i_Exec(uint64_t a1, int a2, int a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  _DWORD v8[2];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8[0] = a3;
  v8[1] = a4;
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v6 = *(_QWORD *)(a1 + 24768);
  if (v6 || (v7 = *(_QWORD *)(a1 + 24776)) != 0 && (v6 = *(_QWORD *)(v7 + 80)) != 0)
  {
    setProgramUniformInner(a1, v6 + 40, a2, 1, 35667, 0, v8);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
}

_QWORD *glUniform2i_Comp(uint64_t a1, int a2, unsigned int a3, uint64_t a4)
{
  _QWORD *result;

  result = gleAddCommand(a1, (uint64_t)glUniform2i_ListExec, 16);
  *(_DWORD *)result = a2;
  *((_DWORD *)result + 1) = 1;
  result[1] = a3 | (unint64_t)(a4 << 32);
  return result;
}

uint64_t glUniform2i_ListExec(uint64_t a1, int *a2)
{
  void *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a2 + 2;
  v4 = *a2;
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v5 = *(_QWORD *)(a1 + 24768);
  if (v5 || (v6 = *(_QWORD *)(a1 + 24776)) != 0 && (v5 = *(_QWORD *)(v6 + 80)) != 0)
  {
    setProgramUniformInner(a1, v5 + 40, v4, 1, 35667, 0, v3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    return 16;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  if (*(_WORD *)(a1 + 29832))
    return 16;
  *(_WORD *)(a1 + 29832) = 1282;
  return 16;
}

void glUniform3i_Exec(uint64_t a1, int a2, int a3, int a4, int a5)
{
  uint64_t v7;
  uint64_t v8;
  _DWORD v9[3];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v9[0] = a3;
  v9[1] = a4;
  v9[2] = a5;
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v7 = *(_QWORD *)(a1 + 24768);
  if (v7 || (v8 = *(_QWORD *)(a1 + 24776)) != 0 && (v7 = *(_QWORD *)(v8 + 80)) != 0)
  {
    setProgramUniformInner(a1, v7 + 40, a2, 1, 35668, 0, v9);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
}

_DWORD *glUniform3i_Comp(uint64_t a1, int a2, int a3, int a4, int a5)
{
  _DWORD *result;

  result = gleAddCommand(a1, (uint64_t)glUniform3i_ListExec, 20);
  *result = a2;
  result[1] = 1;
  result[2] = a3;
  result[3] = a4;
  result[4] = a5;
  return result;
}

uint64_t glUniform3i_ListExec(uint64_t a1, int *a2)
{
  void *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a2 + 2;
  v4 = *a2;
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v5 = *(_QWORD *)(a1 + 24768);
  if (v5 || (v6 = *(_QWORD *)(a1 + 24776)) != 0 && (v5 = *(_QWORD *)(v6 + 80)) != 0)
  {
    setProgramUniformInner(a1, v5 + 40, v4, 1, 35668, 0, v3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    return 20;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  if (*(_WORD *)(a1 + 29832))
    return 20;
  *(_WORD *)(a1 + 29832) = 1282;
  return 20;
}

void glUniform4i_Exec(uint64_t a1, int a2, int a3, int a4, int a5, int a6)
{
  uint64_t v8;
  uint64_t v9;
  _DWORD v10[4];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v10[0] = a3;
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v8 = *(_QWORD *)(a1 + 24768);
  if (v8 || (v9 = *(_QWORD *)(a1 + 24776)) != 0 && (v8 = *(_QWORD *)(v9 + 80)) != 0)
  {
    setProgramUniformInner(a1, v8 + 40, a2, 1, 35669, 0, v10);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
}

_DWORD *glUniform4i_Comp(uint64_t a1, int a2, int a3, int a4, int a5, int a6)
{
  _DWORD *result;

  result = gleAddCommand(a1, (uint64_t)glUniform4i_ListExec, 24);
  *result = a2;
  result[1] = 1;
  result[2] = a3;
  result[3] = a4;
  result[4] = a5;
  result[5] = a6;
  return result;
}

uint64_t glUniform4i_ListExec(uint64_t a1, int *a2)
{
  void *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a2 + 2;
  v4 = *a2;
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v5 = *(_QWORD *)(a1 + 24768);
  if (v5 || (v6 = *(_QWORD *)(a1 + 24776)) != 0 && (v5 = *(_QWORD *)(v6 + 80)) != 0)
  {
    setProgramUniformInner(a1, v5 + 40, v4, 1, 35669, 0, v3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    return 24;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  if (*(_WORD *)(a1 + 29832))
    return 24;
  *(_WORD *)(a1 + 29832) = 1282;
  return 24;
}

void glUniform1ui_Exec(uint64_t a1, int a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;

  v7 = a3;
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v5 = *(_QWORD *)(a1 + 24768);
  if (v5 || (v6 = *(_QWORD *)(a1 + 24776)) != 0 && (v5 = *(_QWORD *)(v6 + 80)) != 0)
  {
    setProgramUniformInner(a1, v5 + 40, a2, 1, 5125, 0, &v7);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
}

_DWORD *glUniform1ui_Comp(uint64_t a1, int a2, int a3)
{
  _DWORD *result;

  result = gleAddCommand(a1, (uint64_t)glUniform1ui_ListExec, 12);
  *result = a2;
  result[1] = 1;
  result[2] = a3;
  return result;
}

uint64_t glUniform1ui_ListExec(uint64_t a1, int *a2)
{
  void *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a2 + 2;
  v4 = *a2;
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v5 = *(_QWORD *)(a1 + 24768);
  if (v5 || (v6 = *(_QWORD *)(a1 + 24776)) != 0 && (v5 = *(_QWORD *)(v6 + 80)) != 0)
  {
    setProgramUniformInner(a1, v5 + 40, v4, 1, 5125, 0, v3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    return 12;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  if (*(_WORD *)(a1 + 29832))
    return 12;
  *(_WORD *)(a1 + 29832) = 1282;
  return 12;
}

void glUniform2ui_Exec(uint64_t a1, int a2, int a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  _DWORD v8[2];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8[0] = a3;
  v8[1] = a4;
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v6 = *(_QWORD *)(a1 + 24768);
  if (v6 || (v7 = *(_QWORD *)(a1 + 24776)) != 0 && (v6 = *(_QWORD *)(v7 + 80)) != 0)
  {
    setProgramUniformInner(a1, v6 + 40, a2, 1, 36294, 0, v8);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
}

_QWORD *glUniform2ui_Comp(uint64_t a1, int a2, unsigned int a3, uint64_t a4)
{
  _QWORD *result;

  result = gleAddCommand(a1, (uint64_t)glUniform2ui_ListExec, 16);
  *(_DWORD *)result = a2;
  *((_DWORD *)result + 1) = 1;
  result[1] = a3 | (unint64_t)(a4 << 32);
  return result;
}

uint64_t glUniform2ui_ListExec(uint64_t a1, int *a2)
{
  void *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a2 + 2;
  v4 = *a2;
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v5 = *(_QWORD *)(a1 + 24768);
  if (v5 || (v6 = *(_QWORD *)(a1 + 24776)) != 0 && (v5 = *(_QWORD *)(v6 + 80)) != 0)
  {
    setProgramUniformInner(a1, v5 + 40, v4, 1, 36294, 0, v3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    return 16;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  if (*(_WORD *)(a1 + 29832))
    return 16;
  *(_WORD *)(a1 + 29832) = 1282;
  return 16;
}

void glUniform3ui_Exec(uint64_t a1, int a2, int a3, int a4, int a5)
{
  uint64_t v7;
  uint64_t v8;
  _DWORD v9[3];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v9[0] = a3;
  v9[1] = a4;
  v9[2] = a5;
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v7 = *(_QWORD *)(a1 + 24768);
  if (v7 || (v8 = *(_QWORD *)(a1 + 24776)) != 0 && (v7 = *(_QWORD *)(v8 + 80)) != 0)
  {
    setProgramUniformInner(a1, v7 + 40, a2, 1, 36295, 0, v9);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
}

_DWORD *glUniform3ui_Comp(uint64_t a1, int a2, int a3, int a4, int a5)
{
  _DWORD *result;

  result = gleAddCommand(a1, (uint64_t)glUniform3ui_ListExec, 20);
  *result = a2;
  result[1] = 1;
  result[2] = a3;
  result[3] = a4;
  result[4] = a5;
  return result;
}

uint64_t glUniform3ui_ListExec(uint64_t a1, int *a2)
{
  void *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a2 + 2;
  v4 = *a2;
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v5 = *(_QWORD *)(a1 + 24768);
  if (v5 || (v6 = *(_QWORD *)(a1 + 24776)) != 0 && (v5 = *(_QWORD *)(v6 + 80)) != 0)
  {
    setProgramUniformInner(a1, v5 + 40, v4, 1, 36295, 0, v3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    return 20;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  if (*(_WORD *)(a1 + 29832))
    return 20;
  *(_WORD *)(a1 + 29832) = 1282;
  return 20;
}

void glUniform4ui_Exec(uint64_t a1, int a2, int a3, int a4, int a5, int a6)
{
  uint64_t v8;
  uint64_t v9;
  _DWORD v10[4];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v10[0] = a3;
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v8 = *(_QWORD *)(a1 + 24768);
  if (v8 || (v9 = *(_QWORD *)(a1 + 24776)) != 0 && (v8 = *(_QWORD *)(v9 + 80)) != 0)
  {
    setProgramUniformInner(a1, v8 + 40, a2, 1, 36296, 0, v10);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
}

_DWORD *glUniform4ui_Comp(uint64_t a1, int a2, int a3, int a4, int a5, int a6)
{
  _DWORD *result;

  result = gleAddCommand(a1, (uint64_t)glUniform4ui_ListExec, 24);
  *result = a2;
  result[1] = 1;
  result[2] = a3;
  result[3] = a4;
  result[4] = a5;
  result[5] = a6;
  return result;
}

uint64_t glUniform4ui_ListExec(uint64_t a1, int *a2)
{
  void *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a2 + 2;
  v4 = *a2;
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v5 = *(_QWORD *)(a1 + 24768);
  if (v5 || (v6 = *(_QWORD *)(a1 + 24776)) != 0 && (v5 = *(_QWORD *)(v6 + 80)) != 0)
  {
    setProgramUniformInner(a1, v5 + 40, v4, 1, 36296, 0, v3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    return 24;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  if (*(_WORD *)(a1 + 29832))
    return 24;
  *(_WORD *)(a1 + 29832) = 1282;
  return 24;
}

void glUniform1fv_Exec(uint64_t a1, int a2, int a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v8 = *(_QWORD *)(a1 + 24768);
  if (v8 || (v9 = *(_QWORD *)(a1 + 24776)) != 0 && (v8 = *(_QWORD *)(v9 + 80)) != 0)
  {
    setProgramUniformInner(a1, v8 + 40, a2, a3, 5126, 0, a4);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
}

_QWORD *glUniform1fv_Comp(uint64_t a1, int a2, int a3, const void *a4)
{
  size_t v7;
  _DWORD *v8;

  if (a3 < 0)
    return gleSetErrorInList(a1, 1281);
  v7 = (4 * a3);
  v8 = gleAddCommand(a1, (uint64_t)glUniform1fv_ListExec, (v7 + 8));
  *v8 = a2;
  v8[1] = a3;
  return memcpy(v8 + 2, a4, v7);
}

uint64_t glUniform1fv_ListExec(uint64_t a1, int *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = a2[1];
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v6 = *(_QWORD *)(a1 + 24768);
  if (v6 || (v7 = *(_QWORD *)(a1 + 24776)) != 0 && (v6 = *(_QWORD *)(v7 + 80)) != 0)
  {
    setProgramUniformInner(a1, v6 + 40, v4, v5, 5126, 0, a2 + 2);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
  return (4 * a2[1] + 8);
}

void glUniform2fv_Exec(uint64_t a1, int a2, int a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v8 = *(_QWORD *)(a1 + 24768);
  if (v8 || (v9 = *(_QWORD *)(a1 + 24776)) != 0 && (v8 = *(_QWORD *)(v9 + 80)) != 0)
  {
    setProgramUniformInner(a1, v8 + 40, a2, a3, 35664, 0, a4);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
}

_QWORD *glUniform2fv_Comp(uint64_t a1, int a2, int a3, const void *a4)
{
  size_t v7;
  _DWORD *v8;

  if (a3 < 0)
    return gleSetErrorInList(a1, 1281);
  v7 = (8 * a3);
  v8 = gleAddCommand(a1, (uint64_t)glUniform2fv_ListExec, (v7 + 8));
  *v8 = a2;
  v8[1] = a3;
  return memcpy(v8 + 2, a4, v7);
}

uint64_t glUniform2fv_ListExec(uint64_t a1, int *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = a2[1];
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v6 = *(_QWORD *)(a1 + 24768);
  if (v6 || (v7 = *(_QWORD *)(a1 + 24776)) != 0 && (v6 = *(_QWORD *)(v7 + 80)) != 0)
  {
    setProgramUniformInner(a1, v6 + 40, v4, v5, 35664, 0, a2 + 2);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
  return (8 * a2[1] + 8);
}

void glUniform3fv_Exec(uint64_t a1, int a2, int a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v8 = *(_QWORD *)(a1 + 24768);
  if (v8 || (v9 = *(_QWORD *)(a1 + 24776)) != 0 && (v8 = *(_QWORD *)(v9 + 80)) != 0)
  {
    setProgramUniformInner(a1, v8 + 40, a2, a3, 35665, 0, a4);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
}

_QWORD *glUniform3fv_Comp(uint64_t a1, int a2, int a3, const void *a4)
{
  size_t v7;
  _DWORD *v8;

  if (a3 < 0)
    return gleSetErrorInList(a1, 1281);
  v7 = (12 * a3);
  v8 = gleAddCommand(a1, (uint64_t)glUniform3fv_ListExec, (v7 + 8));
  *v8 = a2;
  v8[1] = a3;
  return memcpy(v8 + 2, a4, v7);
}

uint64_t glUniform3fv_ListExec(uint64_t a1, int *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = a2[1];
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v6 = *(_QWORD *)(a1 + 24768);
  if (v6 || (v7 = *(_QWORD *)(a1 + 24776)) != 0 && (v6 = *(_QWORD *)(v7 + 80)) != 0)
  {
    setProgramUniformInner(a1, v6 + 40, v4, v5, 35665, 0, a2 + 2);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
  return (12 * a2[1] + 8);
}

void glUniform4fv_Exec(uint64_t a1, int a2, int a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v8 = *(_QWORD *)(a1 + 24768);
  if (v8 || (v9 = *(_QWORD *)(a1 + 24776)) != 0 && (v8 = *(_QWORD *)(v9 + 80)) != 0)
  {
    setProgramUniformInner(a1, v8 + 40, a2, a3, 35666, 0, a4);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
}

_QWORD *glUniform4fv_Comp(uint64_t a1, int a2, int a3, const void *a4)
{
  size_t v7;
  _DWORD *v8;

  if (a3 < 0)
    return gleSetErrorInList(a1, 1281);
  v7 = (16 * a3);
  v8 = gleAddCommand(a1, (uint64_t)glUniform4fv_ListExec, (16 * a3) | 8u);
  *v8 = a2;
  v8[1] = a3;
  return memcpy(v8 + 2, a4, v7);
}

uint64_t glUniform4fv_ListExec(uint64_t a1, int *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = a2[1];
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v6 = *(_QWORD *)(a1 + 24768);
  if (v6 || (v7 = *(_QWORD *)(a1 + 24776)) != 0 && (v6 = *(_QWORD *)(v7 + 80)) != 0)
  {
    setProgramUniformInner(a1, v6 + 40, v4, v5, 35666, 0, a2 + 2);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
  return (16 * a2[1]) | 8u;
}

void glUniform1iv_Exec(uint64_t a1, int a2, int a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v8 = *(_QWORD *)(a1 + 24768);
  if (v8 || (v9 = *(_QWORD *)(a1 + 24776)) != 0 && (v8 = *(_QWORD *)(v9 + 80)) != 0)
  {
    setProgramUniformInner(a1, v8 + 40, a2, a3, 5124, 0, a4);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
}

_QWORD *glUniform1iv_Comp(uint64_t a1, int a2, int a3, const void *a4)
{
  size_t v7;
  _DWORD *v8;

  if (a3 < 0)
    return gleSetErrorInList(a1, 1281);
  v7 = (4 * a3);
  v8 = gleAddCommand(a1, (uint64_t)glUniform1iv_ListExec, (v7 + 8));
  *v8 = a2;
  v8[1] = a3;
  return memcpy(v8 + 2, a4, v7);
}

uint64_t glUniform1iv_ListExec(uint64_t a1, int *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = a2[1];
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v6 = *(_QWORD *)(a1 + 24768);
  if (v6 || (v7 = *(_QWORD *)(a1 + 24776)) != 0 && (v6 = *(_QWORD *)(v7 + 80)) != 0)
  {
    setProgramUniformInner(a1, v6 + 40, v4, v5, 5124, 0, a2 + 2);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
  return (4 * a2[1] + 8);
}

void glUniform2iv_Exec(uint64_t a1, int a2, int a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v8 = *(_QWORD *)(a1 + 24768);
  if (v8 || (v9 = *(_QWORD *)(a1 + 24776)) != 0 && (v8 = *(_QWORD *)(v9 + 80)) != 0)
  {
    setProgramUniformInner(a1, v8 + 40, a2, a3, 35667, 0, a4);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
}

_QWORD *glUniform2iv_Comp(uint64_t a1, int a2, int a3, const void *a4)
{
  size_t v7;
  _DWORD *v8;

  if (a3 < 0)
    return gleSetErrorInList(a1, 1281);
  v7 = (8 * a3);
  v8 = gleAddCommand(a1, (uint64_t)glUniform2iv_ListExec, (v7 + 8));
  *v8 = a2;
  v8[1] = a3;
  return memcpy(v8 + 2, a4, v7);
}

uint64_t glUniform2iv_ListExec(uint64_t a1, int *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = a2[1];
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v6 = *(_QWORD *)(a1 + 24768);
  if (v6 || (v7 = *(_QWORD *)(a1 + 24776)) != 0 && (v6 = *(_QWORD *)(v7 + 80)) != 0)
  {
    setProgramUniformInner(a1, v6 + 40, v4, v5, 35667, 0, a2 + 2);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
  return (8 * a2[1] + 8);
}

void glUniform3iv_Exec(uint64_t a1, int a2, int a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v8 = *(_QWORD *)(a1 + 24768);
  if (v8 || (v9 = *(_QWORD *)(a1 + 24776)) != 0 && (v8 = *(_QWORD *)(v9 + 80)) != 0)
  {
    setProgramUniformInner(a1, v8 + 40, a2, a3, 35668, 0, a4);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
}

_QWORD *glUniform3iv_Comp(uint64_t a1, int a2, int a3, const void *a4)
{
  size_t v7;
  _DWORD *v8;

  if (a3 < 0)
    return gleSetErrorInList(a1, 1281);
  v7 = (12 * a3);
  v8 = gleAddCommand(a1, (uint64_t)glUniform3iv_ListExec, (v7 + 8));
  *v8 = a2;
  v8[1] = a3;
  return memcpy(v8 + 2, a4, v7);
}

uint64_t glUniform3iv_ListExec(uint64_t a1, int *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = a2[1];
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v6 = *(_QWORD *)(a1 + 24768);
  if (v6 || (v7 = *(_QWORD *)(a1 + 24776)) != 0 && (v6 = *(_QWORD *)(v7 + 80)) != 0)
  {
    setProgramUniformInner(a1, v6 + 40, v4, v5, 35668, 0, a2 + 2);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
  return (12 * a2[1] + 8);
}

void glUniform4iv_Exec(uint64_t a1, int a2, int a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v8 = *(_QWORD *)(a1 + 24768);
  if (v8 || (v9 = *(_QWORD *)(a1 + 24776)) != 0 && (v8 = *(_QWORD *)(v9 + 80)) != 0)
  {
    setProgramUniformInner(a1, v8 + 40, a2, a3, 35669, 0, a4);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
}

_QWORD *glUniform4iv_Comp(uint64_t a1, int a2, int a3, const void *a4)
{
  size_t v7;
  _DWORD *v8;

  if (a3 < 0)
    return gleSetErrorInList(a1, 1281);
  v7 = (16 * a3);
  v8 = gleAddCommand(a1, (uint64_t)glUniform4iv_ListExec, (16 * a3) | 8u);
  *v8 = a2;
  v8[1] = a3;
  return memcpy(v8 + 2, a4, v7);
}

uint64_t glUniform4iv_ListExec(uint64_t a1, int *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = a2[1];
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v6 = *(_QWORD *)(a1 + 24768);
  if (v6 || (v7 = *(_QWORD *)(a1 + 24776)) != 0 && (v6 = *(_QWORD *)(v7 + 80)) != 0)
  {
    setProgramUniformInner(a1, v6 + 40, v4, v5, 35669, 0, a2 + 2);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
  return (16 * a2[1]) | 8u;
}

void glUniform1uiv_Exec(uint64_t a1, int a2, int a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v8 = *(_QWORD *)(a1 + 24768);
  if (v8 || (v9 = *(_QWORD *)(a1 + 24776)) != 0 && (v8 = *(_QWORD *)(v9 + 80)) != 0)
  {
    setProgramUniformInner(a1, v8 + 40, a2, a3, 5125, 0, a4);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
}

_QWORD *glUniform1uiv_Comp(uint64_t a1, int a2, int a3, const void *a4)
{
  size_t v7;
  _DWORD *v8;

  if (a3 < 0)
    return gleSetErrorInList(a1, 1281);
  v7 = (4 * a3);
  v8 = gleAddCommand(a1, (uint64_t)glUniform1uiv_ListExec, (v7 + 8));
  *v8 = a2;
  v8[1] = a3;
  return memcpy(v8 + 2, a4, v7);
}

uint64_t glUniform1uiv_ListExec(uint64_t a1, int *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = a2[1];
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v6 = *(_QWORD *)(a1 + 24768);
  if (v6 || (v7 = *(_QWORD *)(a1 + 24776)) != 0 && (v6 = *(_QWORD *)(v7 + 80)) != 0)
  {
    setProgramUniformInner(a1, v6 + 40, v4, v5, 5125, 0, a2 + 2);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
  return (4 * a2[1] + 8);
}

void glUniform2uiv_Exec(uint64_t a1, int a2, int a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v8 = *(_QWORD *)(a1 + 24768);
  if (v8 || (v9 = *(_QWORD *)(a1 + 24776)) != 0 && (v8 = *(_QWORD *)(v9 + 80)) != 0)
  {
    setProgramUniformInner(a1, v8 + 40, a2, a3, 36294, 0, a4);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
}

_QWORD *glUniform2uiv_Comp(uint64_t a1, int a2, int a3, const void *a4)
{
  size_t v7;
  _DWORD *v8;

  if (a3 < 0)
    return gleSetErrorInList(a1, 1281);
  v7 = (8 * a3);
  v8 = gleAddCommand(a1, (uint64_t)glUniform2uiv_ListExec, (v7 + 8));
  *v8 = a2;
  v8[1] = a3;
  return memcpy(v8 + 2, a4, v7);
}

uint64_t glUniform2uiv_ListExec(uint64_t a1, int *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = a2[1];
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v6 = *(_QWORD *)(a1 + 24768);
  if (v6 || (v7 = *(_QWORD *)(a1 + 24776)) != 0 && (v6 = *(_QWORD *)(v7 + 80)) != 0)
  {
    setProgramUniformInner(a1, v6 + 40, v4, v5, 36294, 0, a2 + 2);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
  return (8 * a2[1] + 8);
}

void glUniform3uiv_Exec(uint64_t a1, int a2, int a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v8 = *(_QWORD *)(a1 + 24768);
  if (v8 || (v9 = *(_QWORD *)(a1 + 24776)) != 0 && (v8 = *(_QWORD *)(v9 + 80)) != 0)
  {
    setProgramUniformInner(a1, v8 + 40, a2, a3, 36295, 0, a4);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
}

_QWORD *glUniform3uiv_Comp(uint64_t a1, int a2, int a3, const void *a4)
{
  size_t v7;
  _DWORD *v8;

  if (a3 < 0)
    return gleSetErrorInList(a1, 1281);
  v7 = (12 * a3);
  v8 = gleAddCommand(a1, (uint64_t)glUniform3uiv_ListExec, (v7 + 8));
  *v8 = a2;
  v8[1] = a3;
  return memcpy(v8 + 2, a4, v7);
}

uint64_t glUniform3uiv_ListExec(uint64_t a1, int *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = a2[1];
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v6 = *(_QWORD *)(a1 + 24768);
  if (v6 || (v7 = *(_QWORD *)(a1 + 24776)) != 0 && (v6 = *(_QWORD *)(v7 + 80)) != 0)
  {
    setProgramUniformInner(a1, v6 + 40, v4, v5, 36295, 0, a2 + 2);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
  return (12 * a2[1] + 8);
}

void glUniform4uiv_Exec(uint64_t a1, int a2, int a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v8 = *(_QWORD *)(a1 + 24768);
  if (v8 || (v9 = *(_QWORD *)(a1 + 24776)) != 0 && (v8 = *(_QWORD *)(v9 + 80)) != 0)
  {
    setProgramUniformInner(a1, v8 + 40, a2, a3, 36296, 0, a4);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
}

_QWORD *glUniform4uiv_Comp(uint64_t a1, int a2, int a3, const void *a4)
{
  size_t v7;
  _DWORD *v8;

  if (a3 < 0)
    return gleSetErrorInList(a1, 1281);
  v7 = (16 * a3);
  v8 = gleAddCommand(a1, (uint64_t)glUniform4uiv_ListExec, (16 * a3) | 8u);
  *v8 = a2;
  v8[1] = a3;
  return memcpy(v8 + 2, a4, v7);
}

uint64_t glUniform4uiv_ListExec(uint64_t a1, int *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = a2[1];
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v6 = *(_QWORD *)(a1 + 24768);
  if (v6 || (v7 = *(_QWORD *)(a1 + 24776)) != 0 && (v6 = *(_QWORD *)(v7 + 80)) != 0)
  {
    setProgramUniformInner(a1, v6 + 40, v4, v5, 36296, 0, a2 + 2);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
  return (16 * a2[1]) | 8u;
}

void glUniformMatrix2fv_Exec(uint64_t a1, int a2, int a3, int a4, void *a5)
{
  uint64_t v10;
  uint64_t v11;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v10 = *(_QWORD *)(a1 + 24768);
  if (v10 || (v11 = *(_QWORD *)(a1 + 24776)) != 0 && (v10 = *(_QWORD *)(v11 + 80)) != 0)
  {
    setProgramUniformInner(a1, v10 + 40, a2, a3, 35674, a4, a5);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
}

_QWORD *glUniformMatrix2fv_Comp(uint64_t a1, int a2, int a3, char a4, const void *a5)
{
  size_t v9;
  _QWORD *v10;

  if (a3 < 0)
    return gleSetErrorInList(a1, 1281);
  v9 = (16 * a3);
  v10 = gleAddCommand(a1, (uint64_t)glUniformMatrix2fv_ListExec, (16 * a3) | 0xCu);
  *(_DWORD *)v10 = a2;
  *((_DWORD *)v10 + 1) = a3;
  *((_BYTE *)v10 + 8) = a4;
  return memcpy((char *)v10 + 12, a5, v9);
}

uint64_t glUniformMatrix2fv_ListExec(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_DWORD *)a2;
  v5 = *(_DWORD *)(a2 + 4);
  v6 = *(unsigned __int8 *)(a2 + 8);
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v7 = *(_QWORD *)(a1 + 24768);
  if (v7 || (v8 = *(_QWORD *)(a1 + 24776)) != 0 && (v7 = *(_QWORD *)(v8 + 80)) != 0)
  {
    setProgramUniformInner(a1, v7 + 40, v4, v5, 35674, v6, (void *)(a2 + 12));
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
  return (16 * *(_DWORD *)(a2 + 4)) | 0xCu;
}

void glUniformMatrix3fv_Exec(uint64_t a1, int a2, int a3, int a4, void *a5)
{
  uint64_t v10;
  uint64_t v11;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v10 = *(_QWORD *)(a1 + 24768);
  if (v10 || (v11 = *(_QWORD *)(a1 + 24776)) != 0 && (v10 = *(_QWORD *)(v11 + 80)) != 0)
  {
    setProgramUniformInner(a1, v10 + 40, a2, a3, 35675, a4, a5);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
}

_QWORD *glUniformMatrix3fv_Comp(uint64_t a1, int a2, int a3, char a4, const void *a5)
{
  size_t v9;
  _QWORD *v10;

  if (a3 < 0)
    return gleSetErrorInList(a1, 1281);
  v9 = (36 * a3);
  v10 = gleAddCommand(a1, (uint64_t)glUniformMatrix3fv_ListExec, (v9 + 12));
  *(_DWORD *)v10 = a2;
  *((_DWORD *)v10 + 1) = a3;
  *((_BYTE *)v10 + 8) = a4;
  return memcpy((char *)v10 + 12, a5, v9);
}

uint64_t glUniformMatrix3fv_ListExec(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_DWORD *)a2;
  v5 = *(_DWORD *)(a2 + 4);
  v6 = *(unsigned __int8 *)(a2 + 8);
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v7 = *(_QWORD *)(a1 + 24768);
  if (v7 || (v8 = *(_QWORD *)(a1 + 24776)) != 0 && (v7 = *(_QWORD *)(v8 + 80)) != 0)
  {
    setProgramUniformInner(a1, v7 + 40, v4, v5, 35675, v6, (void *)(a2 + 12));
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
  return (36 * *(_DWORD *)(a2 + 4) + 12);
}

void glUniformMatrix4fv_Exec(uint64_t a1, int a2, int a3, int a4, void *a5)
{
  uint64_t v10;
  uint64_t v11;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v10 = *(_QWORD *)(a1 + 24768);
  if (v10 || (v11 = *(_QWORD *)(a1 + 24776)) != 0 && (v10 = *(_QWORD *)(v11 + 80)) != 0)
  {
    setProgramUniformInner(a1, v10 + 40, a2, a3, 35676, a4, a5);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
}

_QWORD *glUniformMatrix4fv_Comp(uint64_t a1, int a2, int a3, char a4, const void *a5)
{
  size_t v9;
  _QWORD *v10;

  if (a3 < 0)
    return gleSetErrorInList(a1, 1281);
  v9 = (a3 << 6);
  v10 = gleAddCommand(a1, (uint64_t)glUniformMatrix4fv_ListExec, (a3 << 6) | 0xCu);
  *(_DWORD *)v10 = a2;
  *((_DWORD *)v10 + 1) = a3;
  *((_BYTE *)v10 + 8) = a4;
  return memcpy((char *)v10 + 12, a5, v9);
}

uint64_t glUniformMatrix4fv_ListExec(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_DWORD *)a2;
  v5 = *(_DWORD *)(a2 + 4);
  v6 = *(unsigned __int8 *)(a2 + 8);
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v7 = *(_QWORD *)(a1 + 24768);
  if (v7 || (v8 = *(_QWORD *)(a1 + 24776)) != 0 && (v7 = *(_QWORD *)(v8 + 80)) != 0)
  {
    setProgramUniformInner(a1, v7 + 40, v4, v5, 35676, v6, (void *)(a2 + 12));
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
  return (*(_DWORD *)(a2 + 4) << 6) | 0xCu;
}

void glUniformMatrix2x3fv_Exec(uint64_t a1, int a2, int a3, int a4, void *a5)
{
  uint64_t v10;
  uint64_t v11;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v10 = *(_QWORD *)(a1 + 24768);
  if (v10 || (v11 = *(_QWORD *)(a1 + 24776)) != 0 && (v10 = *(_QWORD *)(v11 + 80)) != 0)
  {
    setProgramUniformInner(a1, v10 + 40, a2, a3, 35685, a4, a5);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
}

_QWORD *glUniformMatrix2x3fv_Comp(uint64_t a1, int a2, int a3, char a4, const void *a5)
{
  size_t v9;
  _QWORD *v10;

  if (a3 < 0)
    return gleSetErrorInList(a1, 1281);
  v9 = (24 * a3);
  v10 = gleAddCommand(a1, (uint64_t)glUniformMatrix2x3fv_ListExec, (v9 + 12));
  *(_DWORD *)v10 = a2;
  *((_DWORD *)v10 + 1) = a3;
  *((_BYTE *)v10 + 8) = a4;
  return memcpy((char *)v10 + 12, a5, v9);
}

uint64_t glUniformMatrix2x3fv_ListExec(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_DWORD *)a2;
  v5 = *(_DWORD *)(a2 + 4);
  v6 = *(unsigned __int8 *)(a2 + 8);
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v7 = *(_QWORD *)(a1 + 24768);
  if (v7 || (v8 = *(_QWORD *)(a1 + 24776)) != 0 && (v7 = *(_QWORD *)(v8 + 80)) != 0)
  {
    setProgramUniformInner(a1, v7 + 40, v4, v5, 35685, v6, (void *)(a2 + 12));
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
  return (24 * *(_DWORD *)(a2 + 4) + 12);
}

void glUniformMatrix3x2fv_Exec(uint64_t a1, int a2, int a3, int a4, void *a5)
{
  uint64_t v10;
  uint64_t v11;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v10 = *(_QWORD *)(a1 + 24768);
  if (v10 || (v11 = *(_QWORD *)(a1 + 24776)) != 0 && (v10 = *(_QWORD *)(v11 + 80)) != 0)
  {
    setProgramUniformInner(a1, v10 + 40, a2, a3, 35687, a4, a5);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
}

_QWORD *glUniformMatrix3x2fv_Comp(uint64_t a1, int a2, int a3, char a4, const void *a5)
{
  size_t v9;
  _QWORD *v10;

  if (a3 < 0)
    return gleSetErrorInList(a1, 1281);
  v9 = (24 * a3);
  v10 = gleAddCommand(a1, (uint64_t)glUniformMatrix3x2fv_ListExec, (v9 + 12));
  *(_DWORD *)v10 = a2;
  *((_DWORD *)v10 + 1) = a3;
  *((_BYTE *)v10 + 8) = a4;
  return memcpy((char *)v10 + 12, a5, v9);
}

uint64_t glUniformMatrix3x2fv_ListExec(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_DWORD *)a2;
  v5 = *(_DWORD *)(a2 + 4);
  v6 = *(unsigned __int8 *)(a2 + 8);
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v7 = *(_QWORD *)(a1 + 24768);
  if (v7 || (v8 = *(_QWORD *)(a1 + 24776)) != 0 && (v7 = *(_QWORD *)(v8 + 80)) != 0)
  {
    setProgramUniformInner(a1, v7 + 40, v4, v5, 35687, v6, (void *)(a2 + 12));
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
  return (24 * *(_DWORD *)(a2 + 4) + 12);
}

void glUniformMatrix2x4fv_Exec(uint64_t a1, int a2, int a3, int a4, void *a5)
{
  uint64_t v10;
  uint64_t v11;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v10 = *(_QWORD *)(a1 + 24768);
  if (v10 || (v11 = *(_QWORD *)(a1 + 24776)) != 0 && (v10 = *(_QWORD *)(v11 + 80)) != 0)
  {
    setProgramUniformInner(a1, v10 + 40, a2, a3, 35686, a4, a5);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
}

_QWORD *glUniformMatrix2x4fv_Comp(uint64_t a1, int a2, int a3, char a4, const void *a5)
{
  size_t v9;
  _QWORD *v10;

  if (a3 < 0)
    return gleSetErrorInList(a1, 1281);
  v9 = (32 * a3);
  v10 = gleAddCommand(a1, (uint64_t)glUniformMatrix2x4fv_ListExec, (32 * a3) | 0xCu);
  *(_DWORD *)v10 = a2;
  *((_DWORD *)v10 + 1) = a3;
  *((_BYTE *)v10 + 8) = a4;
  return memcpy((char *)v10 + 12, a5, v9);
}

uint64_t glUniformMatrix2x4fv_ListExec(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_DWORD *)a2;
  v5 = *(_DWORD *)(a2 + 4);
  v6 = *(unsigned __int8 *)(a2 + 8);
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v7 = *(_QWORD *)(a1 + 24768);
  if (v7 || (v8 = *(_QWORD *)(a1 + 24776)) != 0 && (v7 = *(_QWORD *)(v8 + 80)) != 0)
  {
    setProgramUniformInner(a1, v7 + 40, v4, v5, 35686, v6, (void *)(a2 + 12));
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
  return (32 * *(_DWORD *)(a2 + 4)) | 0xCu;
}

void glUniformMatrix4x2fv_Exec(uint64_t a1, int a2, int a3, int a4, void *a5)
{
  uint64_t v10;
  uint64_t v11;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v10 = *(_QWORD *)(a1 + 24768);
  if (v10 || (v11 = *(_QWORD *)(a1 + 24776)) != 0 && (v10 = *(_QWORD *)(v11 + 80)) != 0)
  {
    setProgramUniformInner(a1, v10 + 40, a2, a3, 35689, a4, a5);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
}

_QWORD *glUniformMatrix4x2fv_Comp(uint64_t a1, int a2, int a3, char a4, const void *a5)
{
  size_t v9;
  _QWORD *v10;

  if (a3 < 0)
    return gleSetErrorInList(a1, 1281);
  v9 = (32 * a3);
  v10 = gleAddCommand(a1, (uint64_t)glUniformMatrix4x2fv_ListExec, (32 * a3) | 0xCu);
  *(_DWORD *)v10 = a2;
  *((_DWORD *)v10 + 1) = a3;
  *((_BYTE *)v10 + 8) = a4;
  return memcpy((char *)v10 + 12, a5, v9);
}

uint64_t glUniformMatrix4x2fv_ListExec(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_DWORD *)a2;
  v5 = *(_DWORD *)(a2 + 4);
  v6 = *(unsigned __int8 *)(a2 + 8);
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v7 = *(_QWORD *)(a1 + 24768);
  if (v7 || (v8 = *(_QWORD *)(a1 + 24776)) != 0 && (v7 = *(_QWORD *)(v8 + 80)) != 0)
  {
    setProgramUniformInner(a1, v7 + 40, v4, v5, 35689, v6, (void *)(a2 + 12));
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
  return (32 * *(_DWORD *)(a2 + 4)) | 0xCu;
}

void glUniformMatrix3x4fv_Exec(uint64_t a1, int a2, int a3, int a4, void *a5)
{
  uint64_t v10;
  uint64_t v11;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v10 = *(_QWORD *)(a1 + 24768);
  if (v10 || (v11 = *(_QWORD *)(a1 + 24776)) != 0 && (v10 = *(_QWORD *)(v11 + 80)) != 0)
  {
    setProgramUniformInner(a1, v10 + 40, a2, a3, 35688, a4, a5);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
}

_QWORD *glUniformMatrix3x4fv_Comp(uint64_t a1, int a2, int a3, char a4, const void *a5)
{
  size_t v9;
  _QWORD *v10;

  if (a3 < 0)
    return gleSetErrorInList(a1, 1281);
  v9 = (48 * a3);
  v10 = gleAddCommand(a1, (uint64_t)glUniformMatrix3x4fv_ListExec, (48 * a3) | 0xCu);
  *(_DWORD *)v10 = a2;
  *((_DWORD *)v10 + 1) = a3;
  *((_BYTE *)v10 + 8) = a4;
  return memcpy((char *)v10 + 12, a5, v9);
}

uint64_t glUniformMatrix3x4fv_ListExec(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_DWORD *)a2;
  v5 = *(_DWORD *)(a2 + 4);
  v6 = *(unsigned __int8 *)(a2 + 8);
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v7 = *(_QWORD *)(a1 + 24768);
  if (v7 || (v8 = *(_QWORD *)(a1 + 24776)) != 0 && (v7 = *(_QWORD *)(v8 + 80)) != 0)
  {
    setProgramUniformInner(a1, v7 + 40, v4, v5, 35688, v6, (void *)(a2 + 12));
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
  return (48 * *(_DWORD *)(a2 + 4)) | 0xCu;
}

void glUniformMatrix4x3fv_Exec(uint64_t a1, int a2, int a3, int a4, void *a5)
{
  uint64_t v10;
  uint64_t v11;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v10 = *(_QWORD *)(a1 + 24768);
  if (v10 || (v11 = *(_QWORD *)(a1 + 24776)) != 0 && (v10 = *(_QWORD *)(v11 + 80)) != 0)
  {
    setProgramUniformInner(a1, v10 + 40, a2, a3, 35690, a4, a5);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
}

_QWORD *glUniformMatrix4x3fv_Comp(uint64_t a1, int a2, int a3, char a4, const void *a5)
{
  size_t v9;
  _QWORD *v10;

  if (a3 < 0)
    return gleSetErrorInList(a1, 1281);
  v9 = (48 * a3);
  v10 = gleAddCommand(a1, (uint64_t)glUniformMatrix4x3fv_ListExec, (48 * a3) | 0xCu);
  *(_DWORD *)v10 = a2;
  *((_DWORD *)v10 + 1) = a3;
  *((_BYTE *)v10 + 8) = a4;
  return memcpy((char *)v10 + 12, a5, v9);
}

uint64_t glUniformMatrix4x3fv_ListExec(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_DWORD *)a2;
  v5 = *(_DWORD *)(a2 + 4);
  v6 = *(unsigned __int8 *)(a2 + 8);
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v7 = *(_QWORD *)(a1 + 24768);
  if (v7 || (v8 = *(_QWORD *)(a1 + 24776)) != 0 && (v7 = *(_QWORD *)(v8 + 80)) != 0)
  {
    setProgramUniformInner(a1, v7 + 40, v4, v5, 35690, v6, (void *)(a2 + 12));
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
  return (48 * *(_DWORD *)(a2 + 4)) | 0xCu;
}

void glProgramUniform1f_Exec(uint64_t a1, unsigned int a2, int a3, float a4)
{
  uint64_t *v7;
  float v8;

  v8 = a4;
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v7 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, a2);
  if (v7)
  {
    setProgramUniformInner(a1, (uint64_t)(v7 + 5), a3, 1, 5126, 0, &v8);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
}

_QWORD *glProgramUniform1f_Comp(uint64_t a1, int a2, int a3, float a4)
{
  _QWORD *result;

  result = gleAddCommand(a1, (uint64_t)glProgramUniform1f_ListExec, 16);
  *(_DWORD *)result = a2;
  *((_DWORD *)result + 1) = a3;
  *((_DWORD *)result + 2) = 1;
  *((float *)result + 3) = a4;
  return result;
}

uint64_t glProgramUniform1f_ListExec(uint64_t a1, unsigned int *a2)
{
  int v4;
  unsigned int v5;
  uint64_t *v6;

  v5 = *a2;
  v4 = a2[1];
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v6 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, v5);
  if (v6)
  {
    setProgramUniformInner(a1, (uint64_t)(v6 + 5), v4, 1, 5126, 0, a2 + 3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    return 16;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  if (*(_WORD *)(a1 + 29832))
    return 16;
  *(_WORD *)(a1 + 29832) = 1282;
  return 16;
}

void glProgramUniform2f_Exec(uint64_t a1, unsigned int a2, int a3, float a4, float a5)
{
  uint64_t *v8;
  _DWORD v9[2];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  *(float *)v9 = a4;
  *(float *)&v9[1] = a5;
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v8 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, a2);
  if (v8)
  {
    setProgramUniformInner(a1, (uint64_t)(v8 + 5), a3, 1, 35664, 0, v9);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
}

_QWORD *glProgramUniform2f_Comp(uint64_t a1, int a2, int a3, float a4, float a5)
{
  _QWORD *result;

  result = gleAddCommand(a1, (uint64_t)glProgramUniform2f_ListExec, 20);
  *(_DWORD *)result = a2;
  *((_DWORD *)result + 1) = a3;
  *((_DWORD *)result + 2) = 1;
  *((float *)result + 3) = a4;
  *((float *)result + 4) = a5;
  return result;
}

uint64_t glProgramUniform2f_ListExec(uint64_t a1, unsigned int *a2)
{
  int v4;
  unsigned int v5;
  uint64_t *v6;

  v5 = *a2;
  v4 = a2[1];
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v6 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, v5);
  if (v6)
  {
    setProgramUniformInner(a1, (uint64_t)(v6 + 5), v4, 1, 35664, 0, a2 + 3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    return 20;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  if (*(_WORD *)(a1 + 29832))
    return 20;
  *(_WORD *)(a1 + 29832) = 1282;
  return 20;
}

void glProgramUniform3f_Exec(uint64_t a1, unsigned int a2, int a3, float a4, float a5, float a6)
{
  uint64_t *v9;
  _DWORD v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  *(float *)v10 = a4;
  *(float *)&v10[1] = a5;
  *(float *)&v10[2] = a6;
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v9 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, a2);
  if (v9)
  {
    setProgramUniformInner(a1, (uint64_t)(v9 + 5), a3, 1, 35665, 0, v10);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
}

_QWORD *glProgramUniform3f_Comp(uint64_t a1, int a2, int a3, float a4, float a5, float a6)
{
  _QWORD *result;

  result = gleAddCommand(a1, (uint64_t)glProgramUniform3f_ListExec, 24);
  *(_DWORD *)result = a2;
  *((_DWORD *)result + 1) = a3;
  *((_DWORD *)result + 2) = 1;
  *((float *)result + 3) = a4;
  *((float *)result + 4) = a5;
  *((float *)result + 5) = a6;
  return result;
}

uint64_t glProgramUniform3f_ListExec(uint64_t a1, unsigned int *a2)
{
  int v4;
  unsigned int v5;
  uint64_t *v6;

  v5 = *a2;
  v4 = a2[1];
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v6 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, v5);
  if (v6)
  {
    setProgramUniformInner(a1, (uint64_t)(v6 + 5), v4, 1, 35665, 0, a2 + 3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    return 24;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  if (*(_WORD *)(a1 + 29832))
    return 24;
  *(_WORD *)(a1 + 29832) = 1282;
  return 24;
}

void glProgramUniform4f_Exec(uint64_t a1, unsigned int a2, int a3, float a4, float a5, float a6, float a7)
{
  uint64_t *v10;
  _DWORD v11[4];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  *(float *)v11 = a4;
  *(float *)&v11[1] = a5;
  *(float *)&v11[2] = a6;
  *(float *)&v11[3] = a7;
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v10 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, a2);
  if (v10)
  {
    setProgramUniformInner(a1, (uint64_t)(v10 + 5), a3, 1, 35666, 0, v11);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
}

_QWORD *glProgramUniform4f_Comp(uint64_t a1, int a2, int a3, float a4, float a5, float a6, float a7)
{
  _QWORD *result;

  result = gleAddCommand(a1, (uint64_t)glProgramUniform4f_ListExec, 28);
  *(_DWORD *)result = a2;
  *((_DWORD *)result + 1) = a3;
  *((_DWORD *)result + 2) = 1;
  *((float *)result + 3) = a4;
  *((float *)result + 4) = a5;
  *((float *)result + 5) = a6;
  *((float *)result + 6) = a7;
  return result;
}

uint64_t glProgramUniform4f_ListExec(uint64_t a1, unsigned int *a2)
{
  int v4;
  unsigned int v5;
  uint64_t *v6;

  v5 = *a2;
  v4 = a2[1];
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v6 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, v5);
  if (v6)
  {
    setProgramUniformInner(a1, (uint64_t)(v6 + 5), v4, 1, 35666, 0, a2 + 3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    return 28;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  if (*(_WORD *)(a1 + 29832))
    return 28;
  *(_WORD *)(a1 + 29832) = 1282;
  return 28;
}

void glProgramUniform1i_Exec(uint64_t a1, unsigned int a2, int a3, int a4)
{
  uint64_t *v7;
  int v8;

  v8 = a4;
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v7 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, a2);
  if (v7)
  {
    setProgramUniformInner(a1, (uint64_t)(v7 + 5), a3, 1, 5124, 0, &v8);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
}

_DWORD *glProgramUniform1i_Comp(uint64_t a1, int a2, int a3, int a4)
{
  _DWORD *result;

  result = gleAddCommand(a1, (uint64_t)glProgramUniform1i_ListExec, 16);
  *result = a2;
  result[1] = a3;
  result[2] = 1;
  result[3] = a4;
  return result;
}

uint64_t glProgramUniform1i_ListExec(uint64_t a1, unsigned int *a2)
{
  int v4;
  unsigned int v5;
  uint64_t *v6;

  v5 = *a2;
  v4 = a2[1];
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v6 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, v5);
  if (v6)
  {
    setProgramUniformInner(a1, (uint64_t)(v6 + 5), v4, 1, 5124, 0, a2 + 3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    return 16;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  if (*(_WORD *)(a1 + 29832))
    return 16;
  *(_WORD *)(a1 + 29832) = 1282;
  return 16;
}

void glProgramUniform2i_Exec(uint64_t a1, unsigned int a2, int a3, int a4, int a5)
{
  uint64_t *v8;
  _DWORD v9[2];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v9[0] = a4;
  v9[1] = a5;
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v8 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, a2);
  if (v8)
  {
    setProgramUniformInner(a1, (uint64_t)(v8 + 5), a3, 1, 35667, 0, v9);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
}

_QWORD *glProgramUniform2i_Comp(uint64_t a1, int a2, int a3, unsigned int a4, uint64_t a5)
{
  _QWORD *result;

  result = gleAddCommand(a1, (uint64_t)glProgramUniform2i_ListExec, 20);
  *(_DWORD *)result = a2;
  *((_DWORD *)result + 1) = a3;
  *((_DWORD *)result + 2) = 1;
  *(_QWORD *)((char *)result + 12) = a4 | (unint64_t)(a5 << 32);
  return result;
}

uint64_t glProgramUniform2i_ListExec(uint64_t a1, unsigned int *a2)
{
  int v4;
  unsigned int v5;
  uint64_t *v6;

  v5 = *a2;
  v4 = a2[1];
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v6 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, v5);
  if (v6)
  {
    setProgramUniformInner(a1, (uint64_t)(v6 + 5), v4, 1, 35667, 0, a2 + 3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    return 20;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  if (*(_WORD *)(a1 + 29832))
    return 20;
  *(_WORD *)(a1 + 29832) = 1282;
  return 20;
}

void glProgramUniform3i_Exec(uint64_t a1, unsigned int a2, int a3, int a4, int a5, int a6)
{
  uint64_t *v9;
  _DWORD v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v10[0] = a4;
  v10[1] = a5;
  v10[2] = a6;
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v9 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, a2);
  if (v9)
  {
    setProgramUniformInner(a1, (uint64_t)(v9 + 5), a3, 1, 35668, 0, v10);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
}

_DWORD *glProgramUniform3i_Comp(uint64_t a1, int a2, int a3, int a4, int a5, int a6)
{
  _DWORD *result;

  result = gleAddCommand(a1, (uint64_t)glProgramUniform3i_ListExec, 24);
  *result = a2;
  result[1] = a3;
  result[2] = 1;
  result[3] = a4;
  result[4] = a5;
  result[5] = a6;
  return result;
}

uint64_t glProgramUniform3i_ListExec(uint64_t a1, unsigned int *a2)
{
  int v4;
  unsigned int v5;
  uint64_t *v6;

  v5 = *a2;
  v4 = a2[1];
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v6 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, v5);
  if (v6)
  {
    setProgramUniformInner(a1, (uint64_t)(v6 + 5), v4, 1, 35668, 0, a2 + 3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    return 24;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  if (*(_WORD *)(a1 + 29832))
    return 24;
  *(_WORD *)(a1 + 29832) = 1282;
  return 24;
}

void glProgramUniform4i_Exec(uint64_t a1, unsigned int a2, int a3, int a4, int a5, int a6, int a7)
{
  uint64_t *v10;
  _DWORD v11[4];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v11[0] = a4;
  v11[1] = a5;
  v11[2] = a6;
  v11[3] = a7;
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v10 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, a2);
  if (v10)
  {
    setProgramUniformInner(a1, (uint64_t)(v10 + 5), a3, 1, 35669, 0, v11);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
}

_DWORD *glProgramUniform4i_Comp(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7)
{
  _DWORD *result;

  result = gleAddCommand(a1, (uint64_t)glProgramUniform4i_ListExec, 28);
  *result = a2;
  result[1] = a3;
  result[2] = 1;
  result[3] = a4;
  result[4] = a5;
  result[5] = a6;
  result[6] = a7;
  return result;
}

uint64_t glProgramUniform4i_ListExec(uint64_t a1, unsigned int *a2)
{
  int v4;
  unsigned int v5;
  uint64_t *v6;

  v5 = *a2;
  v4 = a2[1];
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v6 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, v5);
  if (v6)
  {
    setProgramUniformInner(a1, (uint64_t)(v6 + 5), v4, 1, 35669, 0, a2 + 3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    return 28;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  if (*(_WORD *)(a1 + 29832))
    return 28;
  *(_WORD *)(a1 + 29832) = 1282;
  return 28;
}

void glProgramUniform1ui_Exec(uint64_t a1, unsigned int a2, int a3, int a4)
{
  uint64_t *v7;
  int v8;

  v8 = a4;
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v7 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, a2);
  if (v7)
  {
    setProgramUniformInner(a1, (uint64_t)(v7 + 5), a3, 1, 5125, 0, &v8);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
}

_DWORD *glProgramUniform1ui_Comp(uint64_t a1, int a2, int a3, int a4)
{
  _DWORD *result;

  result = gleAddCommand(a1, (uint64_t)glProgramUniform1ui_ListExec, 16);
  *result = a2;
  result[1] = a3;
  result[2] = 1;
  result[3] = a4;
  return result;
}

uint64_t glProgramUniform1ui_ListExec(uint64_t a1, unsigned int *a2)
{
  int v4;
  unsigned int v5;
  uint64_t *v6;

  v5 = *a2;
  v4 = a2[1];
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v6 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, v5);
  if (v6)
  {
    setProgramUniformInner(a1, (uint64_t)(v6 + 5), v4, 1, 5125, 0, a2 + 3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    return 16;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  if (*(_WORD *)(a1 + 29832))
    return 16;
  *(_WORD *)(a1 + 29832) = 1282;
  return 16;
}

void glProgramUniform2ui_Exec(uint64_t a1, unsigned int a2, int a3, int a4, int a5)
{
  uint64_t *v8;
  _DWORD v9[2];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v9[0] = a4;
  v9[1] = a5;
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v8 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, a2);
  if (v8)
  {
    setProgramUniformInner(a1, (uint64_t)(v8 + 5), a3, 1, 36294, 0, v9);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
}

_QWORD *glProgramUniform2ui_Comp(uint64_t a1, int a2, int a3, unsigned int a4, uint64_t a5)
{
  _QWORD *result;

  result = gleAddCommand(a1, (uint64_t)glProgramUniform2ui_ListExec, 20);
  *(_DWORD *)result = a2;
  *((_DWORD *)result + 1) = a3;
  *((_DWORD *)result + 2) = 1;
  *(_QWORD *)((char *)result + 12) = a4 | (unint64_t)(a5 << 32);
  return result;
}

uint64_t glProgramUniform2ui_ListExec(uint64_t a1, unsigned int *a2)
{
  int v4;
  unsigned int v5;
  uint64_t *v6;

  v5 = *a2;
  v4 = a2[1];
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v6 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, v5);
  if (v6)
  {
    setProgramUniformInner(a1, (uint64_t)(v6 + 5), v4, 1, 36294, 0, a2 + 3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    return 20;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  if (*(_WORD *)(a1 + 29832))
    return 20;
  *(_WORD *)(a1 + 29832) = 1282;
  return 20;
}

void glProgramUniform3ui_Exec(uint64_t a1, unsigned int a2, int a3, int a4, int a5, int a6)
{
  uint64_t *v9;
  _DWORD v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v10[0] = a4;
  v10[1] = a5;
  v10[2] = a6;
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v9 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, a2);
  if (v9)
  {
    setProgramUniformInner(a1, (uint64_t)(v9 + 5), a3, 1, 36295, 0, v10);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
}

_DWORD *glProgramUniform3ui_Comp(uint64_t a1, int a2, int a3, int a4, int a5, int a6)
{
  _DWORD *result;

  result = gleAddCommand(a1, (uint64_t)glProgramUniform3ui_ListExec, 24);
  *result = a2;
  result[1] = a3;
  result[2] = 1;
  result[3] = a4;
  result[4] = a5;
  result[5] = a6;
  return result;
}

uint64_t glProgramUniform3ui_ListExec(uint64_t a1, unsigned int *a2)
{
  int v4;
  unsigned int v5;
  uint64_t *v6;

  v5 = *a2;
  v4 = a2[1];
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v6 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, v5);
  if (v6)
  {
    setProgramUniformInner(a1, (uint64_t)(v6 + 5), v4, 1, 36295, 0, a2 + 3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    return 24;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  if (*(_WORD *)(a1 + 29832))
    return 24;
  *(_WORD *)(a1 + 29832) = 1282;
  return 24;
}

void glProgramUniform4ui_Exec(uint64_t a1, unsigned int a2, int a3, int a4, int a5, int a6, int a7)
{
  uint64_t *v10;
  _DWORD v11[4];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v11[0] = a4;
  v11[1] = a5;
  v11[2] = a6;
  v11[3] = a7;
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v10 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, a2);
  if (v10)
  {
    setProgramUniformInner(a1, (uint64_t)(v10 + 5), a3, 1, 36296, 0, v11);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
}

_DWORD *glProgramUniform4ui_Comp(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7)
{
  _DWORD *result;

  result = gleAddCommand(a1, (uint64_t)glProgramUniform4ui_ListExec, 28);
  *result = a2;
  result[1] = a3;
  result[2] = 1;
  result[3] = a4;
  result[4] = a5;
  result[5] = a6;
  result[6] = a7;
  return result;
}

uint64_t glProgramUniform4ui_ListExec(uint64_t a1, unsigned int *a2)
{
  int v4;
  unsigned int v5;
  uint64_t *v6;

  v5 = *a2;
  v4 = a2[1];
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v6 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, v5);
  if (v6)
  {
    setProgramUniformInner(a1, (uint64_t)(v6 + 5), v4, 1, 36296, 0, a2 + 3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    return 28;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  if (*(_WORD *)(a1 + 29832))
    return 28;
  *(_WORD *)(a1 + 29832) = 1282;
  return 28;
}

void glProgramUniform1fv_Exec(uint64_t a1, unsigned int a2, int a3, int a4, void *a5)
{
  uint64_t *v10;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v10 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, a2);
  if (v10)
  {
    setProgramUniformInner(a1, (uint64_t)(v10 + 5), a3, a4, 5126, 0, a5);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
}

_QWORD *glProgramUniform1fv_Comp(uint64_t a1, int a2, int a3, int a4, const void *a5)
{
  size_t v9;
  _DWORD *v10;

  if (a4 < 0)
    return gleSetErrorInList(a1, 1281);
  v9 = (4 * a4);
  v10 = gleAddCommand(a1, (uint64_t)glProgramUniform1fv_ListExec, (v9 + 12));
  *v10 = a2;
  v10[1] = a3;
  v10[2] = a4;
  return memcpy(v10 + 3, a5, v9);
}

uint64_t glProgramUniform1fv_ListExec(uint64_t a1, unsigned int *a2)
{
  int v4;
  unsigned int v5;
  int v6;
  uint64_t *v7;

  v5 = *a2;
  v4 = a2[1];
  v6 = a2[2];
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v7 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, v5);
  if (v7)
  {
    setProgramUniformInner(a1, (uint64_t)(v7 + 5), v4, v6, 5126, 0, a2 + 3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
  return 4 * a2[2] + 12;
}

void glProgramUniform2fv_Exec(uint64_t a1, unsigned int a2, int a3, int a4, void *a5)
{
  uint64_t *v10;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v10 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, a2);
  if (v10)
  {
    setProgramUniformInner(a1, (uint64_t)(v10 + 5), a3, a4, 35664, 0, a5);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
}

_QWORD *glProgramUniform2fv_Comp(uint64_t a1, int a2, int a3, int a4, const void *a5)
{
  size_t v9;
  _DWORD *v10;

  if (a4 < 0)
    return gleSetErrorInList(a1, 1281);
  v9 = (8 * a4);
  v10 = gleAddCommand(a1, (uint64_t)glProgramUniform2fv_ListExec, (v9 + 12));
  *v10 = a2;
  v10[1] = a3;
  v10[2] = a4;
  return memcpy(v10 + 3, a5, v9);
}

uint64_t glProgramUniform2fv_ListExec(uint64_t a1, unsigned int *a2)
{
  int v4;
  unsigned int v5;
  int v6;
  uint64_t *v7;

  v5 = *a2;
  v4 = a2[1];
  v6 = a2[2];
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v7 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, v5);
  if (v7)
  {
    setProgramUniformInner(a1, (uint64_t)(v7 + 5), v4, v6, 35664, 0, a2 + 3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
  return 8 * a2[2] + 12;
}

void glProgramUniform3fv_Exec(uint64_t a1, unsigned int a2, int a3, int a4, void *a5)
{
  uint64_t *v10;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v10 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, a2);
  if (v10)
  {
    setProgramUniformInner(a1, (uint64_t)(v10 + 5), a3, a4, 35665, 0, a5);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
}

_QWORD *glProgramUniform3fv_Comp(uint64_t a1, int a2, int a3, int a4, const void *a5)
{
  size_t v9;
  _DWORD *v10;

  if (a4 < 0)
    return gleSetErrorInList(a1, 1281);
  v9 = (12 * a4);
  v10 = gleAddCommand(a1, (uint64_t)glProgramUniform3fv_ListExec, (v9 + 12));
  *v10 = a2;
  v10[1] = a3;
  v10[2] = a4;
  return memcpy(v10 + 3, a5, v9);
}

uint64_t glProgramUniform3fv_ListExec(uint64_t a1, unsigned int *a2)
{
  int v4;
  unsigned int v5;
  int v6;
  uint64_t *v7;

  v5 = *a2;
  v4 = a2[1];
  v6 = a2[2];
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v7 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, v5);
  if (v7)
  {
    setProgramUniformInner(a1, (uint64_t)(v7 + 5), v4, v6, 35665, 0, a2 + 3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
  return 12 * a2[2] + 12;
}

void glProgramUniform4fv_Exec(uint64_t a1, unsigned int a2, int a3, int a4, void *a5)
{
  uint64_t *v10;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v10 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, a2);
  if (v10)
  {
    setProgramUniformInner(a1, (uint64_t)(v10 + 5), a3, a4, 35666, 0, a5);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
}

_QWORD *glProgramUniform4fv_Comp(uint64_t a1, int a2, int a3, int a4, const void *a5)
{
  size_t v9;
  _DWORD *v10;

  if (a4 < 0)
    return gleSetErrorInList(a1, 1281);
  v9 = (16 * a4);
  v10 = gleAddCommand(a1, (uint64_t)glProgramUniform4fv_ListExec, (16 * a4) | 0xCu);
  *v10 = a2;
  v10[1] = a3;
  v10[2] = a4;
  return memcpy(v10 + 3, a5, v9);
}

uint64_t glProgramUniform4fv_ListExec(uint64_t a1, unsigned int *a2)
{
  int v4;
  unsigned int v5;
  int v6;
  uint64_t *v7;

  v5 = *a2;
  v4 = a2[1];
  v6 = a2[2];
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v7 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, v5);
  if (v7)
  {
    setProgramUniformInner(a1, (uint64_t)(v7 + 5), v4, v6, 35666, 0, a2 + 3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
  return (16 * a2[2]) | 0xC;
}

void glProgramUniform1iv_Exec(uint64_t a1, unsigned int a2, int a3, int a4, void *a5)
{
  uint64_t *v10;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v10 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, a2);
  if (v10)
  {
    setProgramUniformInner(a1, (uint64_t)(v10 + 5), a3, a4, 5124, 0, a5);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
}

_QWORD *glProgramUniform1iv_Comp(uint64_t a1, int a2, int a3, int a4, const void *a5)
{
  size_t v9;
  _DWORD *v10;

  if (a4 < 0)
    return gleSetErrorInList(a1, 1281);
  v9 = (4 * a4);
  v10 = gleAddCommand(a1, (uint64_t)glProgramUniform1iv_ListExec, (v9 + 12));
  *v10 = a2;
  v10[1] = a3;
  v10[2] = a4;
  return memcpy(v10 + 3, a5, v9);
}

uint64_t glProgramUniform1iv_ListExec(uint64_t a1, unsigned int *a2)
{
  int v4;
  unsigned int v5;
  int v6;
  uint64_t *v7;

  v5 = *a2;
  v4 = a2[1];
  v6 = a2[2];
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v7 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, v5);
  if (v7)
  {
    setProgramUniformInner(a1, (uint64_t)(v7 + 5), v4, v6, 5124, 0, a2 + 3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
  return 4 * a2[2] + 12;
}

void glProgramUniform2iv_Exec(uint64_t a1, unsigned int a2, int a3, int a4, void *a5)
{
  uint64_t *v10;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v10 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, a2);
  if (v10)
  {
    setProgramUniformInner(a1, (uint64_t)(v10 + 5), a3, a4, 35667, 0, a5);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
}

_QWORD *glProgramUniform2iv_Comp(uint64_t a1, int a2, int a3, int a4, const void *a5)
{
  size_t v9;
  _DWORD *v10;

  if (a4 < 0)
    return gleSetErrorInList(a1, 1281);
  v9 = (8 * a4);
  v10 = gleAddCommand(a1, (uint64_t)glProgramUniform2iv_ListExec, (v9 + 12));
  *v10 = a2;
  v10[1] = a3;
  v10[2] = a4;
  return memcpy(v10 + 3, a5, v9);
}

uint64_t glProgramUniform2iv_ListExec(uint64_t a1, unsigned int *a2)
{
  int v4;
  unsigned int v5;
  int v6;
  uint64_t *v7;

  v5 = *a2;
  v4 = a2[1];
  v6 = a2[2];
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v7 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, v5);
  if (v7)
  {
    setProgramUniformInner(a1, (uint64_t)(v7 + 5), v4, v6, 35667, 0, a2 + 3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
  return 8 * a2[2] + 12;
}

void glProgramUniform3iv_Exec(uint64_t a1, unsigned int a2, int a3, int a4, void *a5)
{
  uint64_t *v10;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v10 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, a2);
  if (v10)
  {
    setProgramUniformInner(a1, (uint64_t)(v10 + 5), a3, a4, 35668, 0, a5);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
}

_QWORD *glProgramUniform3iv_Comp(uint64_t a1, int a2, int a3, int a4, const void *a5)
{
  size_t v9;
  _DWORD *v10;

  if (a4 < 0)
    return gleSetErrorInList(a1, 1281);
  v9 = (12 * a4);
  v10 = gleAddCommand(a1, (uint64_t)glProgramUniform3iv_ListExec, (v9 + 12));
  *v10 = a2;
  v10[1] = a3;
  v10[2] = a4;
  return memcpy(v10 + 3, a5, v9);
}

uint64_t glProgramUniform3iv_ListExec(uint64_t a1, unsigned int *a2)
{
  int v4;
  unsigned int v5;
  int v6;
  uint64_t *v7;

  v5 = *a2;
  v4 = a2[1];
  v6 = a2[2];
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v7 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, v5);
  if (v7)
  {
    setProgramUniformInner(a1, (uint64_t)(v7 + 5), v4, v6, 35668, 0, a2 + 3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
  return 12 * a2[2] + 12;
}

void glProgramUniform4iv_Exec(uint64_t a1, unsigned int a2, int a3, int a4, void *a5)
{
  uint64_t *v10;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v10 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, a2);
  if (v10)
  {
    setProgramUniformInner(a1, (uint64_t)(v10 + 5), a3, a4, 35669, 0, a5);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
}

_QWORD *glProgramUniform4iv_Comp(uint64_t a1, int a2, int a3, int a4, const void *a5)
{
  size_t v9;
  _DWORD *v10;

  if (a4 < 0)
    return gleSetErrorInList(a1, 1281);
  v9 = (16 * a4);
  v10 = gleAddCommand(a1, (uint64_t)glProgramUniform4iv_ListExec, (16 * a4) | 0xCu);
  *v10 = a2;
  v10[1] = a3;
  v10[2] = a4;
  return memcpy(v10 + 3, a5, v9);
}

uint64_t glProgramUniform4iv_ListExec(uint64_t a1, unsigned int *a2)
{
  int v4;
  unsigned int v5;
  int v6;
  uint64_t *v7;

  v5 = *a2;
  v4 = a2[1];
  v6 = a2[2];
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v7 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, v5);
  if (v7)
  {
    setProgramUniformInner(a1, (uint64_t)(v7 + 5), v4, v6, 35669, 0, a2 + 3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
  return (16 * a2[2]) | 0xC;
}

void glProgramUniform1uiv_Exec(uint64_t a1, unsigned int a2, int a3, int a4, void *a5)
{
  uint64_t *v10;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v10 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, a2);
  if (v10)
  {
    setProgramUniformInner(a1, (uint64_t)(v10 + 5), a3, a4, 5125, 0, a5);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
}

_QWORD *glProgramUniform1uiv_Comp(uint64_t a1, int a2, int a3, int a4, const void *a5)
{
  size_t v9;
  _DWORD *v10;

  if (a4 < 0)
    return gleSetErrorInList(a1, 1281);
  v9 = (4 * a4);
  v10 = gleAddCommand(a1, (uint64_t)glProgramUniform1uiv_ListExec, (v9 + 12));
  *v10 = a2;
  v10[1] = a3;
  v10[2] = a4;
  return memcpy(v10 + 3, a5, v9);
}

uint64_t glProgramUniform1uiv_ListExec(uint64_t a1, unsigned int *a2)
{
  int v4;
  unsigned int v5;
  int v6;
  uint64_t *v7;

  v5 = *a2;
  v4 = a2[1];
  v6 = a2[2];
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v7 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, v5);
  if (v7)
  {
    setProgramUniformInner(a1, (uint64_t)(v7 + 5), v4, v6, 5125, 0, a2 + 3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
  return 4 * a2[2] + 12;
}

void glProgramUniform2uiv_Exec(uint64_t a1, unsigned int a2, int a3, int a4, void *a5)
{
  uint64_t *v10;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v10 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, a2);
  if (v10)
  {
    setProgramUniformInner(a1, (uint64_t)(v10 + 5), a3, a4, 36294, 0, a5);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
}

_QWORD *glProgramUniform2uiv_Comp(uint64_t a1, int a2, int a3, int a4, const void *a5)
{
  size_t v9;
  _DWORD *v10;

  if (a4 < 0)
    return gleSetErrorInList(a1, 1281);
  v9 = (8 * a4);
  v10 = gleAddCommand(a1, (uint64_t)glProgramUniform2uiv_ListExec, (v9 + 12));
  *v10 = a2;
  v10[1] = a3;
  v10[2] = a4;
  return memcpy(v10 + 3, a5, v9);
}

uint64_t glProgramUniform2uiv_ListExec(uint64_t a1, unsigned int *a2)
{
  int v4;
  unsigned int v5;
  int v6;
  uint64_t *v7;

  v5 = *a2;
  v4 = a2[1];
  v6 = a2[2];
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v7 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, v5);
  if (v7)
  {
    setProgramUniformInner(a1, (uint64_t)(v7 + 5), v4, v6, 36294, 0, a2 + 3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
  return 8 * a2[2] + 12;
}

void glProgramUniform3uiv_Exec(uint64_t a1, unsigned int a2, int a3, int a4, void *a5)
{
  uint64_t *v10;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v10 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, a2);
  if (v10)
  {
    setProgramUniformInner(a1, (uint64_t)(v10 + 5), a3, a4, 36295, 0, a5);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
}

_QWORD *glProgramUniform3uiv_Comp(uint64_t a1, int a2, int a3, int a4, const void *a5)
{
  size_t v9;
  _DWORD *v10;

  if (a4 < 0)
    return gleSetErrorInList(a1, 1281);
  v9 = (12 * a4);
  v10 = gleAddCommand(a1, (uint64_t)glProgramUniform3uiv_ListExec, (v9 + 12));
  *v10 = a2;
  v10[1] = a3;
  v10[2] = a4;
  return memcpy(v10 + 3, a5, v9);
}

uint64_t glProgramUniform3uiv_ListExec(uint64_t a1, unsigned int *a2)
{
  int v4;
  unsigned int v5;
  int v6;
  uint64_t *v7;

  v5 = *a2;
  v4 = a2[1];
  v6 = a2[2];
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v7 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, v5);
  if (v7)
  {
    setProgramUniformInner(a1, (uint64_t)(v7 + 5), v4, v6, 36295, 0, a2 + 3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
  return 12 * a2[2] + 12;
}

void glProgramUniform4uiv_Exec(uint64_t a1, unsigned int a2, int a3, int a4, void *a5)
{
  uint64_t *v10;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v10 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, a2);
  if (v10)
  {
    setProgramUniformInner(a1, (uint64_t)(v10 + 5), a3, a4, 36296, 0, a5);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
}

_QWORD *glProgramUniform4uiv_Comp(uint64_t a1, int a2, int a3, int a4, const void *a5)
{
  size_t v9;
  _DWORD *v10;

  if (a4 < 0)
    return gleSetErrorInList(a1, 1281);
  v9 = (16 * a4);
  v10 = gleAddCommand(a1, (uint64_t)glProgramUniform4uiv_ListExec, (16 * a4) | 0xCu);
  *v10 = a2;
  v10[1] = a3;
  v10[2] = a4;
  return memcpy(v10 + 3, a5, v9);
}

uint64_t glProgramUniform4uiv_ListExec(uint64_t a1, unsigned int *a2)
{
  int v4;
  unsigned int v5;
  int v6;
  uint64_t *v7;

  v5 = *a2;
  v4 = a2[1];
  v6 = a2[2];
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v7 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, v5);
  if (v7)
  {
    setProgramUniformInner(a1, (uint64_t)(v7 + 5), v4, v6, 36296, 0, a2 + 3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
  return (16 * a2[2]) | 0xC;
}

void glProgramUniformMatrix2fv_Exec(uint64_t a1, unsigned int a2, int a3, int a4, int a5, void *a6)
{
  uint64_t *v12;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v12 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, a2);
  if (v12)
  {
    setProgramUniformInner(a1, (uint64_t)(v12 + 5), a3, a4, 35674, a5, a6);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
}

_QWORD *glProgramUniformMatrix2fv_Comp(uint64_t a1, int a2, int a3, int a4, char a5, const void *a6)
{
  size_t v11;
  _QWORD *v12;

  if (a4 < 0)
    return gleSetErrorInList(a1, 1281);
  v11 = (16 * a4);
  v12 = gleAddCommand(a1, (uint64_t)glProgramUniformMatrix2fv_ListExec, (v11 + 16));
  *(_DWORD *)v12 = a2;
  *((_DWORD *)v12 + 1) = a3;
  *((_DWORD *)v12 + 2) = a4;
  *((_BYTE *)v12 + 12) = a5;
  return memcpy(v12 + 2, a6, v11);
}

uint64_t glProgramUniformMatrix2fv_ListExec(uint64_t a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  int v6;
  int v7;
  uint64_t *v8;

  v5 = *(_DWORD *)a2;
  v4 = *(_DWORD *)(a2 + 4);
  v6 = *(_DWORD *)(a2 + 8);
  v7 = *(unsigned __int8 *)(a2 + 12);
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v8 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, v5);
  if (v8)
  {
    setProgramUniformInner(a1, (uint64_t)(v8 + 5), v4, v6, 35674, v7, (void *)(a2 + 16));
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
  return (16 * *(_DWORD *)(a2 + 8) + 16);
}

void glProgramUniformMatrix3fv_Exec(uint64_t a1, unsigned int a2, int a3, int a4, int a5, void *a6)
{
  uint64_t *v12;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v12 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, a2);
  if (v12)
  {
    setProgramUniformInner(a1, (uint64_t)(v12 + 5), a3, a4, 35675, a5, a6);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
}

_QWORD *glProgramUniformMatrix3fv_Comp(uint64_t a1, int a2, int a3, int a4, char a5, const void *a6)
{
  size_t v11;
  _QWORD *v12;

  if (a4 < 0)
    return gleSetErrorInList(a1, 1281);
  v11 = (36 * a4);
  v12 = gleAddCommand(a1, (uint64_t)glProgramUniformMatrix3fv_ListExec, (v11 + 16));
  *(_DWORD *)v12 = a2;
  *((_DWORD *)v12 + 1) = a3;
  *((_DWORD *)v12 + 2) = a4;
  *((_BYTE *)v12 + 12) = a5;
  return memcpy(v12 + 2, a6, v11);
}

uint64_t glProgramUniformMatrix3fv_ListExec(uint64_t a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  int v6;
  int v7;
  uint64_t *v8;

  v5 = *(_DWORD *)a2;
  v4 = *(_DWORD *)(a2 + 4);
  v6 = *(_DWORD *)(a2 + 8);
  v7 = *(unsigned __int8 *)(a2 + 12);
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v8 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, v5);
  if (v8)
  {
    setProgramUniformInner(a1, (uint64_t)(v8 + 5), v4, v6, 35675, v7, (void *)(a2 + 16));
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
  return (36 * *(_DWORD *)(a2 + 8) + 16);
}

void glProgramUniformMatrix4fv_Exec(uint64_t a1, unsigned int a2, int a3, int a4, int a5, void *a6)
{
  uint64_t *v12;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v12 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, a2);
  if (v12)
  {
    setProgramUniformInner(a1, (uint64_t)(v12 + 5), a3, a4, 35676, a5, a6);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
}

_QWORD *glProgramUniformMatrix4fv_Comp(uint64_t a1, int a2, int a3, int a4, char a5, const void *a6)
{
  size_t v11;
  _QWORD *v12;

  if (a4 < 0)
    return gleSetErrorInList(a1, 1281);
  v11 = (a4 << 6);
  v12 = gleAddCommand(a1, (uint64_t)glProgramUniformMatrix4fv_ListExec, (a4 << 6) | 0x10u);
  *(_DWORD *)v12 = a2;
  *((_DWORD *)v12 + 1) = a3;
  *((_DWORD *)v12 + 2) = a4;
  *((_BYTE *)v12 + 12) = a5;
  return memcpy(v12 + 2, a6, v11);
}

uint64_t glProgramUniformMatrix4fv_ListExec(uint64_t a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  int v6;
  int v7;
  uint64_t *v8;

  v5 = *(_DWORD *)a2;
  v4 = *(_DWORD *)(a2 + 4);
  v6 = *(_DWORD *)(a2 + 8);
  v7 = *(unsigned __int8 *)(a2 + 12);
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v8 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, v5);
  if (v8)
  {
    setProgramUniformInner(a1, (uint64_t)(v8 + 5), v4, v6, 35676, v7, (void *)(a2 + 16));
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
  return (*(_DWORD *)(a2 + 8) << 6) | 0x10u;
}

void glProgramUniformMatrix2x3fv_Exec(uint64_t a1, unsigned int a2, int a3, int a4, int a5, void *a6)
{
  uint64_t *v12;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v12 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, a2);
  if (v12)
  {
    setProgramUniformInner(a1, (uint64_t)(v12 + 5), a3, a4, 35685, a5, a6);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
}

_QWORD *glProgramUniformMatrix2x3fv_Comp(uint64_t a1, int a2, int a3, int a4, char a5, const void *a6)
{
  size_t v11;
  _QWORD *v12;

  if (a4 < 0)
    return gleSetErrorInList(a1, 1281);
  v11 = (24 * a4);
  v12 = gleAddCommand(a1, (uint64_t)glProgramUniformMatrix2x3fv_ListExec, (v11 + 16));
  *(_DWORD *)v12 = a2;
  *((_DWORD *)v12 + 1) = a3;
  *((_DWORD *)v12 + 2) = a4;
  *((_BYTE *)v12 + 12) = a5;
  return memcpy(v12 + 2, a6, v11);
}

uint64_t glProgramUniformMatrix2x3fv_ListExec(uint64_t a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  int v6;
  int v7;
  uint64_t *v8;

  v5 = *(_DWORD *)a2;
  v4 = *(_DWORD *)(a2 + 4);
  v6 = *(_DWORD *)(a2 + 8);
  v7 = *(unsigned __int8 *)(a2 + 12);
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v8 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, v5);
  if (v8)
  {
    setProgramUniformInner(a1, (uint64_t)(v8 + 5), v4, v6, 35685, v7, (void *)(a2 + 16));
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
  return (24 * *(_DWORD *)(a2 + 8) + 16);
}

void glProgramUniformMatrix3x2fv_Exec(uint64_t a1, unsigned int a2, int a3, int a4, int a5, void *a6)
{
  uint64_t *v12;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v12 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, a2);
  if (v12)
  {
    setProgramUniformInner(a1, (uint64_t)(v12 + 5), a3, a4, 35687, a5, a6);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
}

_QWORD *glProgramUniformMatrix3x2fv_Comp(uint64_t a1, int a2, int a3, int a4, char a5, const void *a6)
{
  size_t v11;
  _QWORD *v12;

  if (a4 < 0)
    return gleSetErrorInList(a1, 1281);
  v11 = (24 * a4);
  v12 = gleAddCommand(a1, (uint64_t)glProgramUniformMatrix3x2fv_ListExec, (v11 + 16));
  *(_DWORD *)v12 = a2;
  *((_DWORD *)v12 + 1) = a3;
  *((_DWORD *)v12 + 2) = a4;
  *((_BYTE *)v12 + 12) = a5;
  return memcpy(v12 + 2, a6, v11);
}

uint64_t glProgramUniformMatrix3x2fv_ListExec(uint64_t a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  int v6;
  int v7;
  uint64_t *v8;

  v5 = *(_DWORD *)a2;
  v4 = *(_DWORD *)(a2 + 4);
  v6 = *(_DWORD *)(a2 + 8);
  v7 = *(unsigned __int8 *)(a2 + 12);
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v8 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, v5);
  if (v8)
  {
    setProgramUniformInner(a1, (uint64_t)(v8 + 5), v4, v6, 35687, v7, (void *)(a2 + 16));
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
  return (24 * *(_DWORD *)(a2 + 8) + 16);
}

void glProgramUniformMatrix2x4fv_Exec(uint64_t a1, unsigned int a2, int a3, int a4, int a5, void *a6)
{
  uint64_t *v12;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v12 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, a2);
  if (v12)
  {
    setProgramUniformInner(a1, (uint64_t)(v12 + 5), a3, a4, 35686, a5, a6);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
}

_QWORD *glProgramUniformMatrix2x4fv_Comp(uint64_t a1, int a2, int a3, int a4, char a5, const void *a6)
{
  size_t v11;
  _QWORD *v12;

  if (a4 < 0)
    return gleSetErrorInList(a1, 1281);
  v11 = (32 * a4);
  v12 = gleAddCommand(a1, (uint64_t)glProgramUniformMatrix2x4fv_ListExec, (32 * a4) | 0x10u);
  *(_DWORD *)v12 = a2;
  *((_DWORD *)v12 + 1) = a3;
  *((_DWORD *)v12 + 2) = a4;
  *((_BYTE *)v12 + 12) = a5;
  return memcpy(v12 + 2, a6, v11);
}

uint64_t glProgramUniformMatrix2x4fv_ListExec(uint64_t a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  int v6;
  int v7;
  uint64_t *v8;

  v5 = *(_DWORD *)a2;
  v4 = *(_DWORD *)(a2 + 4);
  v6 = *(_DWORD *)(a2 + 8);
  v7 = *(unsigned __int8 *)(a2 + 12);
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v8 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, v5);
  if (v8)
  {
    setProgramUniformInner(a1, (uint64_t)(v8 + 5), v4, v6, 35686, v7, (void *)(a2 + 16));
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
  return (32 * *(_DWORD *)(a2 + 8)) | 0x10u;
}

void glProgramUniformMatrix4x2fv_Exec(uint64_t a1, unsigned int a2, int a3, int a4, int a5, void *a6)
{
  uint64_t *v12;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v12 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, a2);
  if (v12)
  {
    setProgramUniformInner(a1, (uint64_t)(v12 + 5), a3, a4, 35689, a5, a6);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
}

_QWORD *glProgramUniformMatrix4x2fv_Comp(uint64_t a1, int a2, int a3, int a4, char a5, const void *a6)
{
  size_t v11;
  _QWORD *v12;

  if (a4 < 0)
    return gleSetErrorInList(a1, 1281);
  v11 = (32 * a4);
  v12 = gleAddCommand(a1, (uint64_t)glProgramUniformMatrix4x2fv_ListExec, (32 * a4) | 0x10u);
  *(_DWORD *)v12 = a2;
  *((_DWORD *)v12 + 1) = a3;
  *((_DWORD *)v12 + 2) = a4;
  *((_BYTE *)v12 + 12) = a5;
  return memcpy(v12 + 2, a6, v11);
}

uint64_t glProgramUniformMatrix4x2fv_ListExec(uint64_t a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  int v6;
  int v7;
  uint64_t *v8;

  v5 = *(_DWORD *)a2;
  v4 = *(_DWORD *)(a2 + 4);
  v6 = *(_DWORD *)(a2 + 8);
  v7 = *(unsigned __int8 *)(a2 + 12);
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v8 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, v5);
  if (v8)
  {
    setProgramUniformInner(a1, (uint64_t)(v8 + 5), v4, v6, 35689, v7, (void *)(a2 + 16));
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
  return (32 * *(_DWORD *)(a2 + 8)) | 0x10u;
}

void glProgramUniformMatrix3x4fv_Exec(uint64_t a1, unsigned int a2, int a3, int a4, int a5, void *a6)
{
  uint64_t *v12;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v12 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, a2);
  if (v12)
  {
    setProgramUniformInner(a1, (uint64_t)(v12 + 5), a3, a4, 35688, a5, a6);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
}

_QWORD *glProgramUniformMatrix3x4fv_Comp(uint64_t a1, int a2, int a3, int a4, char a5, const void *a6)
{
  size_t v11;
  _QWORD *v12;

  if (a4 < 0)
    return gleSetErrorInList(a1, 1281);
  v11 = (48 * a4);
  v12 = gleAddCommand(a1, (uint64_t)glProgramUniformMatrix3x4fv_ListExec, (v11 + 16));
  *(_DWORD *)v12 = a2;
  *((_DWORD *)v12 + 1) = a3;
  *((_DWORD *)v12 + 2) = a4;
  *((_BYTE *)v12 + 12) = a5;
  return memcpy(v12 + 2, a6, v11);
}

uint64_t glProgramUniformMatrix3x4fv_ListExec(uint64_t a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  int v6;
  int v7;
  uint64_t *v8;

  v5 = *(_DWORD *)a2;
  v4 = *(_DWORD *)(a2 + 4);
  v6 = *(_DWORD *)(a2 + 8);
  v7 = *(unsigned __int8 *)(a2 + 12);
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v8 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, v5);
  if (v8)
  {
    setProgramUniformInner(a1, (uint64_t)(v8 + 5), v4, v6, 35688, v7, (void *)(a2 + 16));
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
  return (48 * *(_DWORD *)(a2 + 8) + 16);
}

void glProgramUniformMatrix4x3fv_Exec(uint64_t a1, unsigned int a2, int a3, int a4, int a5, void *a6)
{
  uint64_t *v12;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v12 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, a2);
  if (v12)
  {
    setProgramUniformInner(a1, (uint64_t)(v12 + 5), a3, a4, 35690, a5, a6);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
}

_QWORD *glProgramUniformMatrix4x3fv_Comp(uint64_t a1, int a2, int a3, int a4, char a5, const void *a6)
{
  size_t v11;
  _QWORD *v12;

  if (a4 < 0)
    return gleSetErrorInList(a1, 1281);
  v11 = (48 * a4);
  v12 = gleAddCommand(a1, (uint64_t)glProgramUniformMatrix4x3fv_ListExec, (v11 + 16));
  *(_DWORD *)v12 = a2;
  *((_DWORD *)v12 + 1) = a3;
  *((_DWORD *)v12 + 2) = a4;
  *((_BYTE *)v12 + 12) = a5;
  return memcpy(v12 + 2, a6, v11);
}

uint64_t glProgramUniformMatrix4x3fv_ListExec(uint64_t a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  int v6;
  int v7;
  uint64_t *v8;

  v5 = *(_DWORD *)a2;
  v4 = *(_DWORD *)(a2 + 4);
  v6 = *(_DWORD *)(a2 + 8);
  v7 = *(unsigned __int8 *)(a2 + 12);
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v8 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, v5);
  if (v8)
  {
    setProgramUniformInner(a1, (uint64_t)(v8 + 5), v4, v6, 35690, v7, (void *)(a2 + 16));
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
  }
  return (48 * *(_DWORD *)(a2 + 8) + 16);
}

uint64_t glGetUniformLocationARB_Exec(uint64_t a1, unsigned int a2)
{
  uint64_t *v4;
  uint64_t UniformLocation;
  __int16 *v7;
  __int16 v8;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v4 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, a2);
  if (v4)
  {
    if (*((_DWORD *)v4 + 6) == 8 && *((_BYTE *)v4 + 3976) == 1)
    {
      UniformLocation = ShGetUniformLocation();
      os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
      return UniformLocation;
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    v7 = (__int16 *)(a1 + 29832);
    if (!*(_WORD *)(a1 + 29832))
    {
      v8 = 1282;
LABEL_9:
      *v7 = v8;
    }
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    v7 = (__int16 *)(a1 + 29832);
    if (!*(_WORD *)(a1 + 29832))
    {
      v8 = 1281;
      goto LABEL_9;
    }
  }
  return 0xFFFFFFFFLL;
}

void glGetActiveUniformARB_Exec(uint64_t a1, unsigned int a2, unsigned int a3, int a4)
{
  uint64_t *v8;
  __int16 *v9;
  __int16 v10;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v8 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, a2);
  if (!v8)
    goto LABEL_7;
  if (*((_DWORD *)v8 + 6) != 8)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    v9 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832))
      return;
    v10 = 1282;
    goto LABEL_11;
  }
  if (*((_DWORD *)v8 + 979) <= a3 || a4 < 0)
  {
LABEL_7:
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    v9 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832))
      return;
    v10 = 1281;
LABEL_11:
    *v9 = v10;
    return;
  }
  if (!ShGetActiveUniform() && !*(_WORD *)(a1 + 29832))
    *(_WORD *)(a1 + 29832) = 1282;
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
}

void glGetUniformfvARB_Exec(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  getUniform(a1, a2, a3, 5126, a4);
}

void getUniform(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v10;
  uint64_t *v11;
  double v12;
  uint64_t v13;
  _QWORD *v14;
  __int16 *v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v10 = gleLookupHashObject(*(_QWORD *)(a1 + 19296) + 168, a2);
  if (!v10)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    v15 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832))
      return;
    v16 = 1281;
LABEL_20:
    *v15 = v16;
    return;
  }
  v11 = v10;
  if (*((_DWORD *)v10 + 6) == 8 && a3 != -1 && *((_BYTE *)v10 + 3976) == 1)
  {
    v20 = 0;
    v18 = 0;
    v19 = 0;
    v17 = 0;
    if ((signed int)a3 >= *((_DWORD *)v10 + 940))
    {
      if (ShGetBindableUniformTypeInfo())
      {
        getTypeInfo(v20, (int *)&v17);
        if (ShGetActiveBindableUniformBufferIndexOffsetFromLocation())
        {
          v14 = *(_QWORD **)v11[463];
          if (v14)
          {
            if (v14[19] >= (unint64_t)(16 * *(int *)v11[464]))
            {
              if (v14[24])
                gleSynchronizeBufferOnCurrentDevicesForRead(a1, (uint64_t)(v14 + 5));
              v13 = v14[17];
              goto LABEL_16;
            }
          }
        }
      }
    }
    else if ((a3 & 0x80000000) == 0 && *((_DWORD *)v10 + 996) > (signed int)a3)
    {
      v20 = *(unsigned __int16 *)(v10[499] + 8 * a3 + 4);
      getTypeInfo(v20, (int *)&v17);
      v13 = v11[469] + 16 * a3;
LABEL_16:
      convertValues(a4, a5, SHIDWORD(v17), v17, v13, v19, -1, HIDWORD(v17), v12, v18, 0, 1);
      os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
      return;
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v15 = (__int16 *)(a1 + 29832);
  if (!*(_WORD *)(a1 + 29832))
  {
    v16 = 1282;
    goto LABEL_20;
  }
}

void glGetUniformivARB_Exec(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  getUniform(a1, a2, a3, 5124, a4);
}

void glGetUniformuivEXT_Exec(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  getUniform(a1, a2, a3, 5125, a4);
}

void glGetUniformIndices_Exec(uint64_t a1, unsigned int a2, int a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v7;
  os_unfair_lock_s *v10;
  uint64_t v11;
  uint64_t *v12;
  __int16 *v13;
  __int16 v14;

  LODWORD(v7) = a3;
  v10 = *(os_unfair_lock_s **)(a1 + 19296);
  v11 = (uint64_t)&v10[42];
  os_unfair_lock_lock(v10 + 81);
  v12 = gleLookupHashObject(v11, a2);
  if ((v7 & 0x80000000) != 0 || !v12)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    v13 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832))
      return;
    v14 = 1281;
LABEL_12:
    *v13 = v14;
    return;
  }
  if (*((_DWORD *)v12 + 6) != 8)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    v13 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832))
      return;
    v14 = 1282;
    goto LABEL_12;
  }
  if ((_DWORD)v7)
  {
    v7 = v7;
    do
    {
      a4 += 8;
      *a5++ = ShGetUniformIndex();
      --v7;
    }
    while (v7);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
}

void glGetActiveUniformsiv_Exec(uint64_t a1, unsigned int a2, int a3, unsigned int *a4, int a5, uint64_t a6)
{
  uint64_t v9;
  os_unfair_lock_s *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  __int16 *v18;
  __int16 v19;

  LODWORD(v9) = a3;
  v12 = *(os_unfair_lock_s **)(a1 + 19296);
  v13 = (uint64_t)&v12[42];
  os_unfair_lock_lock(v12 + 81);
  v14 = gleLookupHashObject(v13, a2);
  if ((v9 & 0x80000000) != 0 || !v14)
  {
LABEL_18:
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    v18 = (__int16 *)(a1 + 29832);
    if (!*(_WORD *)(a1 + 29832))
    {
      v19 = 1281;
LABEL_16:
      *v18 = v19;
      return;
    }
    return;
  }
  if (*((_DWORD *)v14 + 6) == 8)
  {
    if (!(_DWORD)v9)
    {
LABEL_8:
      if ((a5 - 35383) > 0x2D || ((1 << (a5 - 55)) & 0x3E00000000FFLL) == 0)
      {
        os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
        v18 = (__int16 *)(a1 + 29832);
        if (*(_WORD *)(a1 + 29832))
          return;
        v19 = 1280;
        goto LABEL_16;
      }
      if ((_DWORD)v9)
      {
        v9 = v9;
        do
        {
          ++a4;
          ShGetActiveUniformIndex();
          a6 += 4;
          --v9;
        }
        while (v9);
      }
      os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
      return;
    }
    v15 = v9;
    v16 = a4;
    while (1)
    {
      v17 = *v16++;
      if (v17 >= *((_DWORD *)v14 + 979))
        goto LABEL_18;
      if (!--v15)
        goto LABEL_8;
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v18 = (__int16 *)(a1 + 29832);
  if (!*(_WORD *)(a1 + 29832))
  {
    v19 = 1282;
    goto LABEL_16;
  }
}

uint64_t glGetUniformBlockIndex_Exec(uint64_t a1, unsigned int a2)
{
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t UniformBlockIndex;
  __int16 *v9;
  __int16 v10;

  v4 = *(os_unfair_lock_s **)(a1 + 19296);
  v5 = (uint64_t)&v4[42];
  os_unfair_lock_lock(v4 + 81);
  v6 = gleLookupHashObject(v5, a2);
  if (v6)
  {
    if (*((_DWORD *)v6 + 6) == 8)
    {
      UniformBlockIndex = ShGetUniformBlockIndex();
      os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
      return UniformBlockIndex;
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    v9 = (__int16 *)(a1 + 29832);
    if (!*(_WORD *)(a1 + 29832))
    {
      v10 = 1282;
      goto LABEL_8;
    }
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    v9 = (__int16 *)(a1 + 29832);
    if (!*(_WORD *)(a1 + 29832))
    {
      v10 = 1281;
LABEL_8:
      *v9 = v10;
    }
  }
  return 0xFFFFFFFFLL;
}

void glGetActiveUniformBlockiv_Exec(uint64_t a1, unsigned int a2, unsigned int a3, int a4, _DWORD *a5)
{
  os_unfair_lock_s *v10;
  uint64_t v11;
  uint64_t *v12;

  v10 = *(os_unfair_lock_s **)(a1 + 19296);
  v11 = (uint64_t)&v10[42];
  os_unfair_lock_lock(v10 + 81);
  v12 = gleLookupHashObject(v11, a2);
  if (!a5 || !v12)
    goto LABEL_14;
  if (*((_DWORD *)v12 + 6) != 8)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1282;
    return;
  }
  if (*((_DWORD *)v12 + 945) <= a3)
  {
LABEL_14:
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1281;
    return;
  }
  if ((a4 - 35392) < 7 || (a4 - 34032) < 2)
  {
    ShGetActiveUniformBlockiv();
LABEL_8:
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    return;
  }
  if (a4 == 35391)
  {
    *a5 = *((_DWORD *)v12 + a3 + 946);
    goto LABEL_8;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  if (!*(_WORD *)(a1 + 29832))
    *(_WORD *)(a1 + 29832) = 1280;
}

void glGetActiveUniformBlockName_Exec(uint64_t a1, unsigned int a2, unsigned int a3, int a4)
{
  os_unfair_lock_s *v8;
  uint64_t v9;
  uint64_t *v10;
  __int16 *v11;
  __int16 v12;

  v8 = *(os_unfair_lock_s **)(a1 + 19296);
  v9 = (uint64_t)&v8[42];
  os_unfair_lock_lock(v8 + 81);
  v10 = gleLookupHashObject(v9, a2);
  if (a4 < 0 || !v10)
  {
LABEL_6:
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    v11 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832))
      return;
    v12 = 1281;
    goto LABEL_10;
  }
  if (*((_DWORD *)v10 + 6) == 8)
  {
    if (*((_DWORD *)v10 + 945) > a3)
    {
      ShGetActiveUniformBlockName();
      os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
      return;
    }
    goto LABEL_6;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v11 = (__int16 *)(a1 + 29832);
  if (*(_WORD *)(a1 + 29832))
    return;
  v12 = 1282;
LABEL_10:
  *v11 = v12;
}

void glUniformBlockBinding_Exec(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v8;
  os_unfair_lock_s *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t *v14;
  __int16 v15;

  v8 = a1 + 28652;
  v9 = *(os_unfair_lock_s **)(a1 + 19296);
  v10 = (uint64_t)&v9[42];
  os_unfair_lock_lock(v9 + 81);
  v11 = gleLookupHashObject(v10, a2);
  if (!v11 || *(unsigned __int8 *)(*(_QWORD *)(a1 + 29480) + 506) <= a4)
    goto LABEL_11;
  if (*((_DWORD *)v11 + 6) != 8)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (*(_WORD *)(v8 + 1180))
      return;
    v15 = 1282;
    goto LABEL_15;
  }
  if (*((_DWORD *)v11 + 945) <= a3)
  {
LABEL_11:
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (*(_WORD *)(v8 + 1180))
      return;
    v15 = 1281;
LABEL_15:
    *(_WORD *)(v8 + 1180) = v15;
    return;
  }
  *((_DWORD *)v11 + a3 + 946) = a4;
  v12 = *(unsigned __int8 *)(v8 + 3844);
  if (*(_BYTE *)(v8 + 3844))
  {
    v13 = v11 + 510;
    v14 = v11;
    do
    {
      *v13 |= 8u;
      v13 += 18;
      *((_DWORD *)v14 + 206) |= 8u;
      *((_DWORD *)v14 + 382) |= 8u;
      *((_DWORD *)v14 + 558) |= 8u;
      *((_DWORD *)v14 + 734) |= 8u;
      *((_DWORD *)v14 + 910) |= 8u;
      v14 = (uint64_t *)((char *)v14 + 4);
      --v12;
    }
    while (v12);
  }
  if (*(uint64_t **)(a1 + 24768) == v11)
  {
    *(_DWORD *)(a1 + 1532) |= 0x30000000u;
    *(_DWORD *)v8 = 0;
    *(_DWORD *)(a1 + 1548) |= 0x200u;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
}

uint64_t glGetUniformLocationARB_ExecThread(uint64_t a1, unsigned int a2)
{
  (*(void (**)(void))(a1 + 27752))();
  return glGetUniformLocationARB_Exec(a1, a2);
}

void glGetActiveUniformARB_ExecThread(uint64_t a1, unsigned int a2, unsigned int a3, int a4)
{
  (*(void (**)(void))(a1 + 27752))();
  glGetActiveUniformARB_Exec(a1, a2, a3, a4);
}

void glGetUniformfvARB_ExecThread(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  (*(void (**)(void))(a1 + 27752))();
  getUniform(a1, a2, a3, 5126, a4);
}

void glGetUniformivARB_ExecThread(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  (*(void (**)(void))(a1 + 27752))();
  getUniform(a1, a2, a3, 5124, a4);
}

void glGetUniformuivEXT_ExecThread(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  (*(void (**)(void))(a1 + 27752))();
  getUniform(a1, a2, a3, 5125, a4);
}

void glGetUniformIndices_ExecThread(uint64_t a1, unsigned int a2, int a3, uint64_t a4, _DWORD *a5)
{
  (*(void (**)(void))(a1 + 27752))();
  glGetUniformIndices_Exec(a1, a2, a3, a4, a5);
}

void glGetActiveUniformsiv_ExecThread(uint64_t a1, unsigned int a2, int a3, unsigned int *a4, int a5, uint64_t a6)
{
  (*(void (**)(void))(a1 + 27752))();
  glGetActiveUniformsiv_Exec(a1, a2, a3, a4, a5, a6);
}

uint64_t glGetUniformBlockIndex_ExecThread(uint64_t a1, unsigned int a2)
{
  (*(void (**)(void))(a1 + 27752))();
  return glGetUniformBlockIndex_Exec(a1, a2);
}

void glGetActiveUniformBlockiv_ExecThread(uint64_t a1, unsigned int a2, unsigned int a3, int a4, _DWORD *a5)
{
  (*(void (**)(void))(a1 + 27752))();
  glGetActiveUniformBlockiv_Exec(a1, a2, a3, a4, a5);
}

void glGetActiveUniformBlockName_ExecThread(uint64_t a1, unsigned int a2, unsigned int a3, int a4)
{
  (*(void (**)(void))(a1 + 27752))();
  glGetActiveUniformBlockName_Exec(a1, a2, a3, a4);
}

_DWORD *glUniformBlockBinding_PackThread(uint64_t a1, int a2, int a3, int a4)
{
  _DWORD *result;

  result = gleAddCommand(a1, (uint64_t)glUniformBlockBinding_UnpackThread, 12);
  *result = a2;
  result[1] = a3;
  result[2] = a4;
  return result;
}

uint64_t glUniformBlockBinding_UnpackThread(uint64_t a1, unsigned int *a2)
{
  glUniformBlockBinding_Exec(a1, *a2, a2[1], a2[2]);
  return 12;
}

void setProgramUniformInner(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, void *a7)
{
  uint64_t v8;
  __int16 *v9;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  char v18;
  char v19;
  double v20;
  unsigned int v21;
  int BindableUniformTypeInfo;
  BOOL v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  int v30;
  uint64_t v31;
  BOOL v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  _DWORD *v40;
  double v41;
  char *v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  unsigned int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  unsigned int v54;
  int v55;
  uint64_t v56;
  const void *v57;
  uint64_t v58;
  int v59;
  int v60;
  unsigned int *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  unsigned int IndexForGLSLSamplerType;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  int8x16_t *v117;
  int8x16_t v118;
  uint64_t v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  int8x16_t *v131;
  int8x16_t v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  _DWORD *v136;
  char v137;
  char v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  int v142;
  int v143;
  uint64_t v144;
  int *v145;
  _DWORD *v146;
  int *v147;
  int v148;
  int v149;
  uint64_t v150;
  unsigned int *v151;
  uint64_t v152;
  uint64_t v153;
  _DWORD *v154;
  int *v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  _QWORD *v159;
  uint64_t *v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t *v163;
  _QWORD *v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t *v167;
  _QWORD *v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t *v171;
  _QWORD *v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t *v175;
  _QWORD *v176;
  uint64_t v177;
  uint64_t v178;
  __int16 v179;
  int v180;
  unsigned int v181;
  int v182;
  int v183;
  int v184;
  int v185;
  unsigned int v186;
  int v187;
  int v188;
  int v189;
  uint64_t v190;
  int v191;
  uint64_t v192;
  int v193;
  uint64_t v194;
  int8x16_t *v195;
  int8x16_t v196;
  uint64_t v197;
  int v198;
  int v199;
  int v200;
  int v201;
  int v202;
  unsigned int v203;
  int v204;
  int v205;
  int v206;
  uint64_t v207;
  int v208;
  uint64_t v209;
  int v210;
  uint64_t v211;
  int8x16_t *v212;
  int8x16_t v213;
  uint64_t v214;
  int v215;
  char v216;
  unsigned int v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  int v222;
  int v223;
  int v224;
  unsigned int v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  char v240;
  uint64_t v241;
  char v242;
  char v243;
  char v244;
  char v245;
  unsigned int v246;
  char v247;
  int v248;
  uint64_t v249;
  uint64_t v250;
  unsigned int __srca;
  uint64_t v253;
  unsigned int *v254;
  unsigned int *v255;
  unsigned int *v256;
  unsigned int *v257;
  unsigned int *v258;
  uint64_t v259;
  __int128 v260;
  uint64_t v261;
  __int128 v262;
  uint64_t v263;
  char v264;
  uint64_t v265;

  v265 = 0;
  if (a3 == -1 || !a4)
    return;
  v8 = a1;
  v9 = (__int16 *)(a1 + 29832);
  if (a4 < 0 || a6 && *(_BYTE *)(a1 + 32501) == 3)
  {
    if (*v9)
      return;
    v179 = 1281;
LABEL_327:
    *v9 = v179;
    return;
  }
  v264 = 0;
  v253 = a1 + 32493;
  v259 = a1 + 28652;
  v263 = 0;
  v262 = 0uLL;
  v261 = 0;
  v260 = 0uLL;
  getTypeInfo(a5, (int *)&v260);
  if (a3 >= *(_DWORD *)(a2 + 3720))
  {
    v249 = v8;
    BindableUniformTypeInfo = ShGetBindableUniformTypeInfo();
    v23 = HIDWORD(v265) == a5 || BindableUniformTypeInfo == 0;
    v24 = !v23;
    if (v23)
    {
      v262 = v260;
      v263 = v261;
      if (!BindableUniformTypeInfo)
      {
LABEL_325:
        if (*v9)
          return;
        v179 = 1282;
        goto LABEL_327;
      }
    }
    else
    {
      getTypeInfo(SHIDWORD(v265), (int *)&v262);
    }
    v25 = DWORD2(v262);
    if (DWORD2(v262) == DWORD2(v260))
    {
      v26 = DWORD1(v262);
      if (DWORD1(v262) == DWORD1(v260))
      {
        v27 = v262;
        if ((_DWORD)v262 == 35670 || (_DWORD)v262 == (_DWORD)v260)
        {
          v248 = v260;
          if (ShGetActiveBindableUniformBufferIndexOffsetFromLocation()
            && (v28 = **(_QWORD **)(a2 + 3664)) != 0)
          {
            if ((int)v265 > a4)
              LODWORD(v265) = a4;
            if (*(_QWORD *)(v28 + 152) >= (unint64_t)(16 * **(int **)(a2 + 3672)))
            {
              if (*(_QWORD *)(v28 + 192))
              {
                gleSynchronizeBufferOnCurrentDevices(v249, v28 + 40);
                v29 = (_DWORD *)v259;
              }
              else
              {
                v29 = (_DWORD *)v259;
                if (*(_BYTE *)(v28 + 165))
                {
                  (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v249 + 29448) + 272))(*(_QWORD *)(v249 + 29016), 3, 0, *(_QWORD *)(v28 + 40 + 8 * *(unsigned __int8 *)(v253 + 6)));
                  gfxWaitBufferOnDevices();
                }
              }
              *(_BYTE *)(v28 + 167) = 1;
              v34 = *(unsigned __int8 *)(v253 + 3);
              if (!*(_BYTE *)(v253 + 3))
                goto LABEL_59;
              if ((_DWORD)v34 == 1)
              {
                v35 = 0;
              }
              else
              {
                v35 = v34 & 0xFE;
                v36 = (int *)(v28 + 312);
                v37 = v35;
                do
                {
                  v38 = *v36 | 4;
                  *(v36 - 2) |= 4u;
                  *v36 = v38;
                  v36 += 4;
                  v37 -= 2;
                }
                while (v37);
                if (v35 == v34)
                  goto LABEL_59;
              }
              v39 = v34 - v35;
              v40 = (_DWORD *)(v28 + 8 * v35 + 304);
              do
              {
                *v40 |= 4u;
                v40 += 2;
                --v39;
              }
              while (v39);
LABEL_59:
              gleDirtyBufferObjectCurrentBindPoints(v249, v28 + 40);
              v42 = *(char **)(v28 + 136);
              v43 = v263;
              if ((v24 & 1) != 0 || a6 || (_DWORD)v26 != (_DWORD)v263)
              {
                convertValues(v27, (uint64_t)v42, v263, v248, (uint64_t)a7, v26, v25, v26, v41, v25, a6, v265);
              }
              else
              {
                memcpy(v42, a7, v26 * v25 * v265 * HIDWORD(v263));
                v43 = v26;
              }
              if ((*(_WORD *)v253 & 0x1000) == 0)
                goto LABEL_194;
              v44 = v265;
              if (!(_DWORD)v265 || !v25 || !(_DWORD)v26)
                goto LABEL_194;
              if ((_DWORD)v27 != 5126)
              {
                if ((_DWORD)v27 == 5130)
                {
                  v45 = v43 * v25;
                  if (v26 < 6)
                  {
                    v46 = 0;
                    v47 = 0;
                    do
                    {
                      v48 = v46;
                      v49 = v25;
                      do
                      {
                        *(_QWORD *)&v42[8 * v48] = *(_QWORD *)&v42[8 * v48];
                        if ((_DWORD)v26 != 1)
                        {
                          *(_QWORD *)&v42[8 * (v48 + 1)] = *(_QWORD *)&v42[8 * (v48 + 1)];
                          if ((_DWORD)v26 != 2)
                          {
                            *(_QWORD *)&v42[8 * (v48 + 2)] = *(_QWORD *)&v42[8 * (v48 + 2)];
                            if ((_DWORD)v26 != 3)
                            {
                              *(_QWORD *)&v42[8 * (v48 + 3)] = *(_QWORD *)&v42[8 * (v48 + 3)];
                              if ((_DWORD)v26 != 4)
                                *(_QWORD *)&v42[8 * (v48 + 4)] = *(_QWORD *)&v42[8 * (v48 + 4)];
                            }
                          }
                        }
                        v48 += v43;
                        --v49;
                      }
                      while (v49);
                      ++v47;
                      v46 += v45;
                    }
                    while (v47 != v44);
                    goto LABEL_194;
                  }
                  v107 = 0;
                  v108 = 0;
                  while (1)
                  {
                    v109 = 0;
                    if (!((unint64_t)(v26 - 1) >> 32))
                      break;
                    v110 = v107;
                    do
                    {
                      v111 = v110;
                      v112 = v26;
                      do
                      {
                        *(_QWORD *)&v42[8 * v111] = *(_QWORD *)&v42[8 * v111];
                        ++v111;
                        --v112;
                      }
                      while (v112);
                      ++v109;
                      v110 += v43;
                    }
                    while (v109 != v25);
LABEL_159:
                    ++v108;
                    v107 += v45;
                    if (v108 == v44)
                      goto LABEL_194;
                  }
                  v113 = v107;
                  while (1)
                  {
                    if (__CFADD__(v45 * v108 + v43 * v109, v26 - 1))
                    {
                      v114 = 0;
                    }
                    else
                    {
                      v115 = v113;
                      v116 = v26 & 0xFFFFFFFC;
                      do
                      {
                        v117 = (int8x16_t *)&v42[8 * v115];
                        v118 = vandq_s8(v117[1], vorrq_s8((int8x16_t)vcltzq_f64((float64x2_t)v117[1]), (int8x16_t)vcgezq_f64((float64x2_t)v117[1])));
                        *v117 = vandq_s8(*v117, vorrq_s8((int8x16_t)vcltzq_f64(*(float64x2_t *)v117), (int8x16_t)vcgezq_f64(*(float64x2_t *)v117)));
                        v117[1] = v118;
                        v115 += 4;
                        v116 -= 4;
                      }
                      while (v116);
                      v114 = v26 & 0xFFFFFFFC;
                      if (v114 == v26)
                        goto LABEL_167;
                    }
                    v119 = v26 - v114;
                    v120 = v113 + v114;
                    do
                    {
                      *(_QWORD *)&v42[8 * v120] = *(_QWORD *)&v42[8 * v120];
                      ++v120;
                      --v119;
                    }
                    while (v119);
LABEL_167:
                    ++v109;
                    v113 += v43;
                    if (v109 == v25)
                      goto LABEL_159;
                  }
                }
LABEL_194:
                v135 = *(unsigned __int8 *)(v253 + 3);
                if (*(_BYTE *)(v253 + 3))
                {
                  v136 = (_DWORD *)(a2 + 4040);
                  do
                  {
                    *v136 |= 8u;
                    v136 += 18;
                    *(_DWORD *)(a2 + 784) |= 8u;
                    *(_DWORD *)(a2 + 1488) |= 8u;
                    *(_DWORD *)(a2 + 2192) |= 8u;
                    *(_DWORD *)(a2 + 2896) |= 8u;
                    *(_DWORD *)(a2 + 3600) |= 8u;
                    a2 += 4;
                    --v135;
                  }
                  while (v135);
                }
LABEL_197:
                *(_DWORD *)(v249 + 1532) |= 0x10000000u;
                *v29 = 0;
                *(_DWORD *)(v249 + 1540) |= 0x10000000u;
                return;
              }
              v50 = v43 * v25;
              if (v26 < 8)
              {
                v51 = 0;
                v52 = 0;
                do
                {
                  v53 = v51;
                  v54 = v25;
                  do
                  {
                    *(_DWORD *)&v42[4 * v53] = *(_DWORD *)&v42[4 * v53];
                    if ((_DWORD)v26 != 1)
                    {
                      *(_DWORD *)&v42[4 * (v53 + 1)] = *(_DWORD *)&v42[4 * (v53 + 1)];
                      if ((_DWORD)v26 != 2)
                      {
                        *(_DWORD *)&v42[4 * (v53 + 2)] = *(_DWORD *)&v42[4 * (v53 + 2)];
                        if ((_DWORD)v26 != 3)
                        {
                          *(_DWORD *)&v42[4 * (v53 + 3)] = *(_DWORD *)&v42[4 * (v53 + 3)];
                          if ((_DWORD)v26 != 4)
                          {
                            *(_DWORD *)&v42[4 * (v53 + 4)] = *(_DWORD *)&v42[4 * (v53 + 4)];
                            if ((_DWORD)v26 != 5)
                            {
                              *(_DWORD *)&v42[4 * (v53 + 5)] = *(_DWORD *)&v42[4 * (v53 + 5)];
                              if ((_DWORD)v26 != 6)
                                *(_DWORD *)&v42[4 * (v53 + 6)] = *(_DWORD *)&v42[4 * (v53 + 6)];
                            }
                          }
                        }
                      }
                    }
                    v53 += v43;
                    --v54;
                  }
                  while (v54);
                  ++v52;
                  v51 += v50;
                }
                while (v52 != v44);
                goto LABEL_194;
              }
              v121 = 0;
              v122 = 0;
              while (1)
              {
                v123 = 0;
                if (!((unint64_t)(v26 - 1) >> 32))
                  break;
                v124 = v121;
                do
                {
                  v125 = v124;
                  v126 = v26;
                  do
                  {
                    *(_DWORD *)&v42[4 * v125] = *(_DWORD *)&v42[4 * v125];
                    ++v125;
                    --v126;
                  }
                  while (v126);
                  ++v123;
                  v124 += v43;
                }
                while (v123 != v25);
LABEL_177:
                ++v122;
                v121 += v50;
                if (v122 == v44)
                  goto LABEL_194;
              }
              v127 = v121;
              while (1)
              {
                if (__CFADD__(v50 * v122 + v43 * v123, v26 - 1))
                {
                  v128 = 0;
                }
                else
                {
                  v129 = v127;
                  v130 = v26 & 0xFFFFFFF8;
                  do
                  {
                    v131 = (int8x16_t *)&v42[4 * v129];
                    v132 = vandq_s8(v131[1], vorrq_s8((int8x16_t)vcltzq_f32((float32x4_t)v131[1]), (int8x16_t)vcgezq_f32((float32x4_t)v131[1])));
                    *v131 = vandq_s8(*v131, vorrq_s8((int8x16_t)vcltzq_f32(*(float32x4_t *)v131), (int8x16_t)vcgezq_f32(*(float32x4_t *)v131)));
                    v131[1] = v132;
                    v129 += 8;
                    v130 -= 8;
                  }
                  while (v130);
                  v128 = v26 & 0xFFFFFFF8;
                  if (v128 == v26)
                    goto LABEL_185;
                }
                v133 = v26 - v128;
                v134 = v127 + v128;
                do
                {
                  *(_DWORD *)&v42[4 * v134] = *(_DWORD *)&v42[4 * v134];
                  ++v134;
                  --v133;
                }
                while (v133);
LABEL_185:
                ++v123;
                v127 += v43;
                if (v123 == v25)
                  goto LABEL_177;
              }
            }
          }
          else
          {
            os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(v249 + 19296) + 324));
          }
        }
      }
    }
    goto LABEL_325;
  }
  v14 = v259;
  if (a3 < 0 || *(_DWORD *)(a2 + 3944) <= a3)
    goto LABEL_47;
  v15 = *(_QWORD *)(a2 + 3952) + 8 * a3;
  v16 = *(_DWORD *)v15;
  LODWORD(v265) = *(_DWORD *)v15;
  v17 = *(unsigned __int16 *)(v15 + 4);
  HIDWORD(v265) = v17;
  v264 = *(_BYTE *)(v15 + 6);
  v18 = v264;
  v19 = *(_BYTE *)(v15 + 7);
  v247 = v264;
  if ((_DWORD)v17 == a5)
  {
    v20 = *(double *)&v260;
    v262 = v260;
    v263 = v261;
    v21 = DWORD2(v260);
  }
  else
  {
    v30 = v16;
    v31 = v17;
    getTypeInfo(v17, (int *)&v262);
    v17 = v31;
    v16 = v30;
    v14 = v259;
    v18 = v247;
    v21 = DWORD2(v262);
    if (DWORD2(v262) != DWORD2(v260))
      goto LABEL_47;
  }
  if ((v241 = DWORD1(v262), DWORD1(v262) != DWORD1(v260))
    || (v224 = v260, v225 = v262, (_DWORD)v262 != 35670) && (_DWORD)v262 != (_DWORD)v260
    || ((v19 & 1) == 0 ? (v32 = a4 > 1) : (v32 = 0), v32 || (v19 & 2) == 0))
  {
LABEL_47:
    if (!*(_WORD *)(v14 + 1180))
      *(_WORD *)(v14 + 1180) = 1282;
    return;
  }
  if (v16 > a4)
  {
    LODWORD(v265) = a4;
    v16 = a4;
  }
  v33 = (char *)(*(_QWORD *)(a2 + 3712) + 16 * a3);
  v246 = v21;
  if ((int)v17 > 36875)
  {
    if ((v17 - 37128) >= 6 && (v17 - 36876) > 3)
    {
LABEL_259:
      if ((_DWORD)v17 == a5 && !a6 && DWORD1(v262) == (_DWORD)v263)
      {
        memcpy(v33, a7, DWORD1(v262) * v21 * v16 * HIDWORD(v263));
        v180 = v241;
        v181 = v225;
      }
      else
      {
        v216 = a6;
        v181 = v262;
        v180 = v263;
        convertValues(v262, (uint64_t)v33, v263, v260, (uint64_t)a7, SDWORD1(v262), v21, DWORD1(v262), v20, v21, v216, v16);
      }
      v137 = 1;
      v138 = v247;
      if ((*(_WORD *)v253 & 0x1000) != 0)
      {
        v139 = v246;
        if (v16 && v246 && (_DWORD)v241)
        {
          if (v181 != 5126)
          {
            if (v181 == 5130)
            {
              v182 = 0;
              v183 = 0;
              v184 = v180 * v246;
              while (1)
              {
                if (v241 <= 5)
                {
                  v185 = v182;
                  v186 = v246;
                  do
                  {
                    *(_QWORD *)&v33[8 * v185] = *(_QWORD *)&v33[8 * v185];
                    if ((_DWORD)v241 != 1)
                    {
                      *(_QWORD *)&v33[8 * (v185 + 1)] = *(_QWORD *)&v33[8 * (v185 + 1)];
                      if ((_DWORD)v241 != 2)
                      {
                        *(_QWORD *)&v33[8 * (v185 + 2)] = *(_QWORD *)&v33[8 * (v185 + 2)];
                        if ((_DWORD)v241 != 3)
                        {
                          *(_QWORD *)&v33[8 * (v185 + 3)] = *(_QWORD *)&v33[8 * (v185 + 3)];
                          if ((_DWORD)v241 != 4)
                            *(_QWORD *)&v33[8 * (v185 + 4)] = *(_QWORD *)&v33[8 * (v185 + 4)];
                        }
                      }
                    }
                    v185 += v180;
                    --v186;
                  }
                  while (v186);
                  goto LABEL_271;
                }
                v187 = 0;
                if (!((unint64_t)(v241 - 1) >> 32))
                  break;
                v188 = v182;
                do
                {
                  v189 = v188;
                  v190 = v241;
                  do
                  {
                    *(_QWORD *)&v33[8 * v189] = *(_QWORD *)&v33[8 * v189];
                    ++v189;
                    --v190;
                  }
                  while (v190);
                  ++v187;
                  v188 += v180;
                }
                while (v187 != v246);
LABEL_271:
                ++v183;
                v182 += v184;
                v137 = 1;
                if (v183 == v16)
                  goto LABEL_206;
              }
              v191 = v182;
              while (1)
              {
                if (__CFADD__(v184 * v183 + v180 * v187, v241 - 1))
                {
                  v192 = 0;
                }
                else
                {
                  v193 = v191;
                  v194 = v241 & 0xFFFFFFFC;
                  do
                  {
                    v195 = (int8x16_t *)&v33[8 * v193];
                    v196 = vandq_s8(v195[1], vorrq_s8((int8x16_t)vcltzq_f64((float64x2_t)v195[1]), (int8x16_t)vcgezq_f64((float64x2_t)v195[1])));
                    *v195 = vandq_s8(*v195, vorrq_s8((int8x16_t)vcltzq_f64(*(float64x2_t *)v195), (int8x16_t)vcgezq_f64(*(float64x2_t *)v195)));
                    v195[1] = v196;
                    v193 += 4;
                    v194 -= 4;
                  }
                  while (v194);
                  v192 = v241 & 0xFFFFFFFC;
                  if (v192 == v241)
                    goto LABEL_287;
                }
                v197 = v241 - v192;
                v198 = v191 + v192;
                do
                {
                  *(_QWORD *)&v33[8 * v198] = *(_QWORD *)&v33[8 * v198];
                  ++v198;
                  --v197;
                }
                while (v197);
LABEL_287:
                ++v187;
                v191 += v180;
                if (v187 == v246)
                  goto LABEL_271;
              }
            }
            goto LABEL_206;
          }
          v199 = 0;
          v200 = 0;
          v201 = v180 * v246;
          while (1)
          {
            if (v241 <= 7)
            {
              v202 = v199;
              v203 = v246;
              do
              {
                *(_DWORD *)&v33[4 * v202] = *(_DWORD *)&v33[4 * v202];
                if ((_DWORD)v241 != 1)
                {
                  *(_DWORD *)&v33[4 * (v202 + 1)] = *(_DWORD *)&v33[4 * (v202 + 1)];
                  if ((_DWORD)v241 != 2)
                  {
                    *(_DWORD *)&v33[4 * (v202 + 2)] = *(_DWORD *)&v33[4 * (v202 + 2)];
                    if ((_DWORD)v241 != 3)
                    {
                      *(_DWORD *)&v33[4 * (v202 + 3)] = *(_DWORD *)&v33[4 * (v202 + 3)];
                      if ((_DWORD)v241 != 4)
                      {
                        *(_DWORD *)&v33[4 * (v202 + 4)] = *(_DWORD *)&v33[4 * (v202 + 4)];
                        if ((_DWORD)v241 != 5)
                        {
                          *(_DWORD *)&v33[4 * (v202 + 5)] = *(_DWORD *)&v33[4 * (v202 + 5)];
                          if ((_DWORD)v241 != 6)
                            *(_DWORD *)&v33[4 * (v202 + 6)] = *(_DWORD *)&v33[4 * (v202 + 6)];
                        }
                      }
                    }
                  }
                }
                v202 += v180;
                --v203;
              }
              while (v203);
              goto LABEL_297;
            }
            v204 = 0;
            if (!((unint64_t)(v241 - 1) >> 32))
              break;
            v205 = v199;
            do
            {
              v206 = v205;
              v207 = v241;
              do
              {
                *(_DWORD *)&v33[4 * v206] = *(_DWORD *)&v33[4 * v206];
                ++v206;
                --v207;
              }
              while (v207);
              ++v204;
              v205 += v180;
            }
            while (v204 != v246);
LABEL_297:
            ++v200;
            v199 += v201;
            v137 = 1;
            if (v200 == v16)
              goto LABEL_206;
          }
          v208 = v199;
          while (1)
          {
            if (__CFADD__(v201 * v200 + v180 * v204, v241 - 1))
            {
              v209 = 0;
            }
            else
            {
              v210 = v208;
              v211 = v241 & 0xFFFFFFF8;
              do
              {
                v212 = (int8x16_t *)&v33[4 * v210];
                v213 = vandq_s8(v212[1], vorrq_s8((int8x16_t)vcltzq_f32((float32x4_t)v212[1]), (int8x16_t)vcgezq_f32((float32x4_t)v212[1])));
                *v212 = vandq_s8(*v212, vorrq_s8((int8x16_t)vcltzq_f32(*(float32x4_t *)v212), (int8x16_t)vcgezq_f32(*(float32x4_t *)v212)));
                v212[1] = v213;
                v210 += 8;
                v211 -= 8;
              }
              while (v211);
              v209 = v241 & 0xFFFFFFF8;
              if (v209 == v241)
                goto LABEL_315;
            }
            v214 = v241 - v209;
            v215 = v208 + v209;
            do
            {
              *(_DWORD *)&v33[4 * v215] = *(_DWORD *)&v33[4 * v215];
              ++v215;
              --v214;
            }
            while (v214);
LABEL_315:
            ++v204;
            v208 += v180;
            if (v204 == v246)
              goto LABEL_297;
          }
        }
LABEL_206:
        v240 = v137;
        v249 = v8;
        LODWORD(v140) = *(unsigned __int8 *)(v14 + 3844);
        if (*(_BYTE *)(v14 + 3844))
        {
          v141 = 0;
          v142 = a3 + v16 * v139 * HIDWORD(v262);
          v143 = ((v142 - 1) >> 5) + ~(a3 >> 5);
          __srca = 0xFFFFFFFF >> -(char)(a3 + v16 * v139 * BYTE12(v262));
          v144 = (uint64_t)a3 >> 5;
          v145 = (int *)(a2 + 4040);
          v146 = (_DWORD *)a2;
          v147 = (int *)(a2 + 4040);
          while (1)
          {
            *v147 = *v145 | 2;
            v147 += 18;
            if ((v138 & 1) != 0)
            {
              v146[196] |= 2u;
              if ((v138 & 2) == 0)
              {
LABEL_211:
                if ((v138 & 4) == 0)
                  goto LABEL_212;
                goto LABEL_224;
              }
            }
            else if ((v138 & 2) == 0)
            {
              goto LABEL_211;
            }
            v146[372] |= 2u;
            if ((v138 & 4) == 0)
            {
LABEL_212:
              if ((v138 & 8) != 0)
                goto LABEL_225;
              goto LABEL_213;
            }
LABEL_224:
            v146[548] |= 2u;
            if ((v138 & 8) != 0)
            {
LABEL_225:
              v146[724] |= 2u;
              if ((v138 & 0x10) == 0)
                goto LABEL_215;
LABEL_214:
              v146[900] |= 2u;
              goto LABEL_215;
            }
LABEL_213:
            if ((v138 & 0x10) != 0)
              goto LABEL_214;
LABEL_215:
            v148 = *(v145 - 2);
            v149 = *(v145 - 1);
            if (v148 >= a3)
              v148 = a3;
            if (v149 <= v142)
              v149 = v142;
            *(v145 - 2) = v148;
            *(v145 - 1) = v149;
            v150 = *((_QWORD *)v145 - 2);
            if (v143 < 0)
            {
              *(_DWORD *)(v150 + 4 * v144) |= __srca & (-1 << a3);
              ++v141;
              ++v146;
              v145 = v147;
              if (v141 >= v140)
                break;
            }
            else
            {
              memset((void *)(v150 + 4 * (v144 + 1)), 255, (4 * v143));
              v138 = v247;
              v140 = *((_QWORD *)v145 - 2);
              *(_DWORD *)(v140 + 4 * v144) |= -1 << a3;
              *(_DWORD *)(v140 + 4 * ((uint64_t)(v142 - 1) >> 5)) |= __srca;
              LODWORD(v140) = *(unsigned __int8 *)(v259 + 3844);
              ++v141;
              ++v146;
              v145 = v147;
              if (v141 >= *(unsigned __int8 *)(v259 + 3844))
                break;
            }
          }
        }
        v29 = (_DWORD *)v259;
        if ((v240 & 1) == 0)
        {
          v151 = *(unsigned int **)(a2 + 3960);
          if (v151)
          {
            v152 = *v151;
            if ((int)v152 >= 1)
            {
              v153 = *(_QWORD *)(a2 + 3712);
              v154 = *(_DWORD **)(a2 + 3728);
              v155 = (int *)(v151 + 1);
              do
              {
                v156 = *v155++;
                *v154++ = *(_DWORD *)(v153 + 16 * v156);
                --v152;
              }
              while (v152);
            }
          }
          v157 = v249;
          if ((v138 & 1) != 0)
          {
            *(_DWORD *)(v249 + 1548) |= 0x100000u;
            *(_DWORD *)v259 = 0;
            *(_DWORD *)(v249 + 1532) |= 0x40000u;
            if ((_DWORD)v140)
            {
              v158 = 0;
              v159 = (_QWORD *)(v249 + 32520);
              v160 = (uint64_t *)(a2 + 3976);
              do
              {
                *(_DWORD *)(a2 + 784 + 4 * v158) |= 4u;
                v161 = *v160;
                v160 += 9;
                (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v159[205] + 1640))(*v159, v161, 4, v139);
                ++v158;
                v140 = *(unsigned __int8 *)(v259 + 3844);
                v159 += 209;
              }
              while (v158 < v140);
              v157 = v249;
              v138 = v247;
            }
          }
          if ((v138 & 2) != 0)
          {
            *(_DWORD *)(v157 + 1548) |= 0x200000u;
            *(_DWORD *)v259 = 0;
            *(_DWORD *)(v157 + 1532) |= 0x80000u;
            if ((_DWORD)v140)
            {
              v162 = 0;
              v163 = (uint64_t *)(a2 + 3984);
              v164 = (_QWORD *)(v157 + 32520);
              do
              {
                *(_DWORD *)(a2 + 1488 + 4 * v162) |= 4u;
                v165 = *v163;
                v163 += 9;
                (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v164[205] + 1640))(*v164, v165, 4, v139);
                ++v162;
                v140 = *(unsigned __int8 *)(v259 + 3844);
                v164 += 209;
              }
              while (v162 < v140);
              v157 = v249;
              v138 = v247;
            }
          }
          if ((v138 & 4) != 0)
          {
            *(_DWORD *)(v157 + 1548) |= 0x400000u;
            *(_DWORD *)v259 = 0;
            *(_DWORD *)(v157 + 1532) |= 0x100000u;
            if ((_DWORD)v140)
            {
              v166 = 0;
              v167 = (uint64_t *)(a2 + 3992);
              v168 = (_QWORD *)(v157 + 32520);
              do
              {
                *(_DWORD *)(a2 + 2192 + 4 * v166) |= 4u;
                v169 = *v167;
                v167 += 9;
                (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v168[205] + 1640))(*v168, v169, 4, v139);
                ++v166;
                v140 = *(unsigned __int8 *)(v259 + 3844);
                v168 += 209;
              }
              while (v166 < v140);
              v157 = v249;
              v138 = v247;
            }
          }
          if ((v138 & 8) != 0)
          {
            *(_DWORD *)(v157 + 1548) |= 0x800000u;
            *(_DWORD *)v259 = 0;
            *(_DWORD *)(v157 + 1532) |= 0x200000u;
            if ((_DWORD)v140)
            {
              v170 = 0;
              v171 = (uint64_t *)(a2 + 4000);
              v172 = (_QWORD *)(v157 + 32520);
              do
              {
                *(_DWORD *)(a2 + 2896 + 4 * v170) |= 4u;
                v173 = *v171;
                v171 += 9;
                (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v172[205] + 1640))(*v172, v173, 4, v139);
                ++v170;
                v140 = *(unsigned __int8 *)(v259 + 3844);
                v172 += 209;
              }
              while (v170 < v140);
              v138 = v247;
            }
          }
          if ((v138 & 0x10) != 0)
          {
            *(_DWORD *)(v249 + 1548) |= 0x1000000u;
            *(_DWORD *)v259 = 0;
            *(_DWORD *)(v249 + 1532) |= 0x400000u;
            if ((_DWORD)v140)
            {
              v174 = 0;
              v175 = (uint64_t *)(a2 + 4008);
              v176 = (_QWORD *)(v249 + 32520);
              v177 = a2 + 3600;
              do
              {
                *(_DWORD *)(v177 + 4 * v174) |= 4u;
                v178 = *v175;
                v175 += 9;
                (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v176[205] + 1640))(*v176, v178, 4, v139);
                ++v174;
                v176 += 209;
              }
              while (v174 < *(unsigned __int8 *)(v259 + 3844));
            }
          }
        }
        goto LABEL_197;
      }
LABEL_205:
      v139 = v246;
      goto LABEL_206;
    }
  }
  else if (((v17 - 36288) > 0x18 || ((1 << (v17 + 64)) & 0x1FFFE3F) == 0)
         && (v17 - 35677) >= 8)
  {
    goto LABEL_259;
  }
  if (v16 < 1)
  {
    LODWORD(v56) = 0;
    v57 = a7;
  }
  else
  {
    v55 = 0;
    v56 = 0;
    v57 = a7;
    while (*((_DWORD *)a7 + v56) == *(_DWORD *)&v33[4 * v55])
    {
      ++v56;
      v55 += v263;
      if (v16 == v56)
        return;
    }
  }
  if ((_DWORD)v56 != v16)
  {
    v58 = *(_QWORD *)(v8 + 24776);
    if (v58)
      *(_DWORD *)(v58 + 104) |= 1u;
    if (*(_BYTE *)(a2 + 3938))
    {
      v250 = v8;
      v217 = v16;
      if (v16 >= 1)
      {
        v59 = 0;
        v60 = v263;
        v222 = v263;
        v223 = v18 & 0x1F;
        v61 = (unsigned int *)a7;
        v62 = v217;
        while (1)
        {
          v63 = *(int *)&v33[4 * v59];
          v65 = *v61++;
          v64 = v65;
          v66 = v63 + 15;
          if ((int)v63 >= 0)
            v66 = *(_DWORD *)&v33[4 * v59];
          if ((v64 & 0x80000000) == 0)
            break;
          if (v223)
            goto LABEL_107;
LABEL_108:
          v59 += v60;
          if (!--v62)
            goto LABEL_152;
        }
        v67 = 15 << (4 * (v63 - (v66 & 0xF0u)));
        v68 = (uint64_t)v66 >> 4;
        v69 = 4 * (v64 & 0xF);
        v70 = ~(15 << v69);
        v71 = v64 >> 4;
        if ((v18 & 1) != 0)
        {
          if (v64 >= *(unsigned __int16 *)(*(_QWORD *)(v250 + 29480) + 154))
            goto LABEL_107;
          v72 = a2 + 4 * v64;
          v73 = *(_DWORD *)(v72 + 448);
          if (v73 >= 1 && (_DWORD)v17 != *(unsigned __int16 *)(a2 + 2 * v64 + 576))
            goto LABEL_107;
          v254 = v61;
          *(_DWORD *)(v72 + 448) = v73 + 1;
          *(_WORD *)(a2 + 2 * v64 + 576) = v17;
          if ((int)v63 <= 31)
          {
            v74 = a2 + 4 * v63;
            v75 = *(_DWORD *)(v74 + 448) - 1;
            *(_DWORD *)(v74 + 448) = v75;
            if (!v75)
              *(_QWORD *)(a2 + 8 * v68 + 712) |= v67;
          }
          v218 = a2 + 8 * v71;
          *(_QWORD *)(v218 + 712) &= v70;
          v76 = v17;
          v229 = v68;
          v236 = v67;
          IndexForGLSLSamplerType = gleGetIndexForGLSLSamplerType(v17);
          v70 = ~(15 << (4 * (v64 & 0xFu)));
          v67 = v236;
          v78 = IndexForGLSLSamplerType;
          v71 = v64 >> 4;
          v68 = v229;
          v17 = v76;
          v69 = 4 * (v64 & 0xF);
          *(_QWORD *)(v218 + 712) |= v78 << v69;
          v18 = v247;
          v21 = v246;
          v60 = v222;
          v61 = v254;
        }
        if ((v18 & 2) != 0)
        {
          if (v64 >= *(unsigned __int16 *)(*(_QWORD *)(v250 + 29480) + 154))
            goto LABEL_107;
          v79 = a2 + 4 * v64;
          v80 = *(_DWORD *)(v79 + 1152);
          if (v80 >= 1 && (_DWORD)v17 != *(unsigned __int16 *)(a2 + 2 * v64 + 1280))
            goto LABEL_107;
          v242 = v69;
          v255 = v61;
          *(_DWORD *)(v79 + 1152) = v80 + 1;
          *(_WORD *)(a2 + 2 * v64 + 1280) = v17;
          if ((int)v63 <= 31)
          {
            v81 = a2 + 4 * v63;
            v82 = *(_DWORD *)(v81 + 1152) - 1;
            *(_DWORD *)(v81 + 1152) = v82;
            if (!v82)
              *(_QWORD *)(a2 + 8 * v68 + 1416) |= v67;
          }
          v219 = a2 + 8 * v71;
          *(_QWORD *)(v219 + 1416) &= v70;
          v83 = v17;
          v230 = v68;
          v233 = v70;
          v237 = v67;
          v226 = v71;
          v84 = gleGetIndexForGLSLSamplerType(v17);
          v70 = v233;
          v67 = v237;
          v85 = v84;
          v71 = v226;
          v68 = v230;
          v17 = v83;
          v69 = v242;
          *(_QWORD *)(v219 + 1416) |= v85 << v242;
          v18 = v247;
          v21 = v246;
          v60 = v222;
          v61 = v255;
        }
        if ((v18 & 4) != 0)
        {
          if (v64 >= *(unsigned __int16 *)(*(_QWORD *)(v250 + 29480) + 154))
            goto LABEL_107;
          v86 = a2 + 4 * v64;
          v87 = *(_DWORD *)(v86 + 1856);
          if (v87 >= 1 && (_DWORD)v17 != *(unsigned __int16 *)(a2 + 2 * v64 + 1984))
            goto LABEL_107;
          v243 = v69;
          v256 = v61;
          *(_DWORD *)(v86 + 1856) = v87 + 1;
          *(_WORD *)(a2 + 2 * v64 + 1984) = v17;
          if ((int)v63 <= 31)
          {
            v88 = a2 + 4 * v63;
            v89 = *(_DWORD *)(v88 + 1856) - 1;
            *(_DWORD *)(v88 + 1856) = v89;
            if (!v89)
              *(_QWORD *)(a2 + 8 * v68 + 2120) |= v67;
          }
          v220 = a2 + 8 * v71;
          *(_QWORD *)(v220 + 2120) &= v70;
          v90 = v17;
          v231 = v68;
          v234 = v70;
          v238 = v67;
          v227 = v71;
          v91 = gleGetIndexForGLSLSamplerType(v17);
          v70 = v234;
          v67 = v238;
          v92 = v91;
          v71 = v227;
          v68 = v231;
          v17 = v90;
          v69 = v243;
          *(_QWORD *)(v220 + 2120) |= v92 << v243;
          v18 = v247;
          v21 = v246;
          v60 = v222;
          v61 = v256;
        }
        if ((v18 & 8) == 0)
        {
LABEL_144:
          if ((v18 & 0x10) == 0)
            goto LABEL_108;
          if (v64 < *(unsigned __int16 *)(*(_QWORD *)(v250 + 29480) + 154))
          {
            v100 = a2 + 4 * v64;
            v101 = *(_DWORD *)(v100 + 3264);
            if (v101 < 1 || (_DWORD)v17 == *(unsigned __int16 *)(a2 + 2 * v64 + 3392))
            {
              v245 = v69;
              v258 = v61;
              *(_DWORD *)(v100 + 3264) = v101 + 1;
              *(_WORD *)(a2 + 2 * v64 + 3392) = v17;
              if ((int)v63 <= 31)
              {
                v102 = a2 + 4 * v63;
                v103 = *(_DWORD *)(v102 + 3264) - 1;
                *(_DWORD *)(v102 + 3264) = v103;
                if (!v103)
                  *(_QWORD *)(a2 + 8 * v68 + 3528) |= v67;
              }
              v104 = a2 + 8 * v71;
              *(_QWORD *)(v104 + 3528) &= v70;
              v105 = v17;
              v106 = gleGetIndexForGLSLSamplerType(v17);
              v17 = v105;
              *(_QWORD *)(v104 + 3528) |= (unint64_t)v106 << v245;
              v18 = v247;
              v21 = v246;
              v61 = v258;
              goto LABEL_108;
            }
          }
          goto LABEL_107;
        }
        if (v64 < *(unsigned __int16 *)(*(_QWORD *)(v250 + 29480) + 154))
        {
          v93 = a2 + 4 * v64;
          v94 = *(_DWORD *)(v93 + 2560);
          if (v94 < 1 || (_DWORD)v17 == *(unsigned __int16 *)(a2 + 2 * v64 + 2688))
          {
            v244 = v69;
            v257 = v61;
            *(_DWORD *)(v93 + 2560) = v94 + 1;
            *(_WORD *)(a2 + 2 * v64 + 2688) = v17;
            if ((int)v63 <= 31)
            {
              v95 = a2 + 4 * v63;
              v96 = *(_DWORD *)(v95 + 2560) - 1;
              *(_DWORD *)(v95 + 2560) = v96;
              if (!v96)
                *(_QWORD *)(a2 + 8 * v68 + 2824) |= v67;
            }
            v221 = a2 + 8 * v71;
            *(_QWORD *)(v221 + 2824) &= v70;
            v97 = v17;
            v232 = v68;
            v235 = v70;
            v239 = v67;
            v228 = v71;
            v98 = gleGetIndexForGLSLSamplerType(v17);
            v70 = v235;
            v67 = v239;
            v99 = v98;
            v71 = v228;
            v68 = v232;
            v17 = v97;
            v69 = v244;
            *(_QWORD *)(v221 + 2824) |= v99 << v244;
            v18 = v247;
            v21 = v246;
            v60 = v222;
            v61 = v257;
            goto LABEL_144;
          }
        }
LABEL_107:
        *(_BYTE *)(a2 + 3938) = 0;
        *(_DWORD *)(a2 + 3680) = 0;
        *(_DWORD *)(a2 + 3656) |= 0x20u;
        goto LABEL_108;
      }
LABEL_152:
      if ((_DWORD)v17 == a5 && !a6 && (_DWORD)v241 == (_DWORD)v263)
      {
        v16 = v217;
        memcpy(v33, a7, v217 * v21 * v241 * HIDWORD(v263));
      }
      else
      {
        v16 = v217;
        convertValues(v225, (uint64_t)v33, v263, v224, (uint64_t)a7, v241, v21, v241, v20, v21, a6, v217);
      }
      v8 = v250;
      v14 = v259;
    }
    else
    {
      if ((_DWORD)v17 == a5 && !a6 && (_DWORD)v241 == (_DWORD)v263)
        memcpy(v33, v57, v16 * v21 * v241 * HIDWORD(v263));
      else
        convertValues(v225, (uint64_t)v33, v263, v224, (uint64_t)v57, v241, v21, v241, v20, v21, a6, v16);
      gleEvaluateImageUnits(v8, a2);
    }
    v137 = 0;
    *(_DWORD *)v14 = 0;
    *(_DWORD *)(v8 + 1548) |= 0x2000u;
    v138 = v247;
    goto LABEL_205;
  }
}

uint64_t getTypeInfo(int a1, int *a2)
{
  int v4;
  int v5;
  uint64_t result;
  int v7;
  int v8;
  int v9;

  v4 = 0;
  if (a1 <= 36287)
  {
    if ((a1 - 35664) <= 0x1A)
    {
      v5 = 1 << (a1 - 80);
      if ((v5 & 0x7E01C07) != 0)
      {
LABEL_19:
        v4 = 5126;
        goto LABEL_22;
      }
      if ((v5 & 0x1FE038) == 0)
      {
        v4 = 35670;
        goto LABEL_22;
      }
      goto LABEL_18;
    }
    switch(a1)
    {
      case 5124:
        goto LABEL_18;
      case 5125:
        goto LABEL_21;
      case 5126:
        goto LABEL_19;
      case 5130:
        goto LABEL_20;
      default:
        break;
    }
  }
  else
  {
    if (a1 <= 36677)
    {
      if ((a1 - 36288) > 0x18)
        goto LABEL_22;
      if (((1 << (a1 + 64)) & 0x1FFFE3F) == 0)
      {
LABEL_21:
        v4 = 5125;
        goto LABEL_22;
      }
LABEL_18:
      v4 = 5124;
      goto LABEL_22;
    }
    if (a1 > 36875)
    {
      if ((a1 - 37128) < 6 || (a1 - 36876) < 4)
        goto LABEL_18;
    }
    else if ((a1 - 36678) < 9 || (a1 - 36860) < 3)
    {
LABEL_20:
      v4 = 5130;
    }
  }
LABEL_22:
  *a2 = v4;
  a2[1] = vecSizeForType(a1);
  result = colsForType(a1);
  v7 = 0;
  a2[2] = result;
  if (a1 <= 36287)
  {
    if ((a1 - 35664) < 0x1B || (a1 - 5124) <= 6 && ((1 << (a1 - 4)) & 0x47) != 0)
      goto LABEL_27;
    goto LABEL_28;
  }
  if (a1 <= 36677)
  {
    if ((a1 - 36288) >= 0x19)
      goto LABEL_28;
LABEL_27:
    v7 = 1;
    goto LABEL_28;
  }
  if ((a1 - 36678) <= 8)
  {
    if (((1 << (a1 - 70)) & 0x15E) == 0)
      goto LABEL_27;
    goto LABEL_53;
  }
  if ((a1 - 36860) <= 0x13)
  {
    v9 = 1 << (a1 + 4);
    if ((v9 & 0xF0001) != 0)
      goto LABEL_27;
    if ((v9 & 6) != 0)
    {
LABEL_53:
      v7 = 2;
      goto LABEL_28;
    }
  }
  if ((a1 - 37128) < 6)
    goto LABEL_27;
LABEL_28:
  v8 = 0;
  a2[3] = v7;
  if (a1 <= 36287)
  {
    if ((a1 - 35664) < 0x1B || (a1 - 5124) < 3)
      goto LABEL_33;
    if (a1 != 5130)
      goto LABEL_34;
    goto LABEL_61;
  }
  if (a1 <= 36677)
  {
    if ((a1 - 36288) >= 0x19)
      goto LABEL_34;
LABEL_33:
    v8 = 4;
    goto LABEL_34;
  }
  if ((a1 - 36678) <= 8)
  {
    if (((1 << (a1 - 70)) & 0x15E) != 0)
      goto LABEL_33;
    goto LABEL_61;
  }
  if ((a1 - 36860) <= 0x13)
  {
    if (((1 << (a1 + 4)) & 0xF0006) != 0)
      goto LABEL_33;
    if (a1 == 36860)
    {
LABEL_61:
      v8 = 2;
      goto LABEL_34;
    }
  }
  if ((a1 - 37128) < 6)
    goto LABEL_33;
LABEL_34:
  a2[4] = v8;
  if ((v4 - 5124) < 3)
  {
LABEL_37:
    a2[5] = 4;
    return result;
  }
  if (v4 == 5130)
  {
    a2[5] = 8;
  }
  else
  {
    if (v4 == 35670)
      goto LABEL_37;
    a2[5] = 0;
  }
  return result;
}

uint64_t convertValues(uint64_t result, uint64_t a2, int a3, int a4, uint64_t a5, int a6, int a7, unsigned int a8, double a9, unsigned int a10, char a11, int a12)
{
  BOOL v14;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  BOOL v27;
  BOOL v29;
  unsigned int v30;
  unsigned int v31;
  int i;
  unsigned int v33;
  BOOL v34;
  BOOL v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  BOOL v46;
  BOOL v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  __int128 *v56;
  __int128 v57;
  __int128 v58;
  _OWORD *v59;
  __int128 *v60;
  __int128 v61;
  __int128 v62;
  _OWORD *v63;
  int v64;
  int v65;
  int v66;
  int k;
  int m;
  int v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  int v73;
  unsigned int v74;
  BOOL v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  int v86;
  unsigned int v87;
  int v88;
  unsigned int v89;
  unsigned int v90;
  BOOL v91;
  char v92;
  uint64_t v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  __int128 *v97;
  __int128 v98;
  __int128 v99;
  _OWORD *v100;
  unsigned int v101;
  unsigned int v102;
  int v103;
  unsigned int v104;
  int j;
  uint64_t v106;
  BOOL v107;
  BOOL v108;
  int v109;
  __int128 *v110;
  __int128 v111;
  __int128 v112;
  _OWORD *v113;
  int v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;

  if ((_DWORD)result == 5130 || (_DWORD)result != a4 || a11 != 0)
  {
    if (a12)
      v14 = a10 == 0;
    else
      v14 = 1;
    if (!v14 && a8 != 0)
    {
      v16 = 0;
      v17 = 0;
      v18 = 0;
      v19 = 0;
      do
      {
        v114 = v19;
        v115 = v18;
        v20 = 0;
        v116 = v17;
        v117 = v16;
        do
        {
          v21 = a8;
          v22 = v16;
          v23 = v17;
          v24 = v18;
          do
          {
            if (a11)
              v26 = v23;
            else
              v26 = v24;
            switch((int)result)
            {
              case 5124:
                switch(a4)
                {
                  case 5124:
                  case 5125:
                    goto LABEL_20;
                  case 5126:
                    v25 = llroundf(*(float *)(a5 + 4 * v26));
                    goto LABEL_21;
                  case 5127:
                  case 5128:
                  case 5129:
                    goto LABEL_22;
                  case 5130:
                    a9 = *(double *)(a5 + 8 * v26);
                    v25 = llround(a9);
                    goto LABEL_21;
                  default:
                    goto LABEL_38;
                }
              case 5125:
                switch(a4)
                {
                  case 5124:
                  case 5125:
                    goto LABEL_20;
                  case 5126:
                    v25 = vcvtas_u32_f32(*(float *)(a5 + 4 * v26));
                    goto LABEL_21;
                  case 5127:
                  case 5128:
                  case 5129:
                    goto LABEL_22;
                  case 5130:
                    a9 = *(double *)(a5 + 8 * v26);
                    v25 = vcvtad_u64_f64(a9);
                    goto LABEL_21;
                  default:
LABEL_38:
                    if (a4 != 35670)
                      goto LABEL_22;
LABEL_20:
                    v25 = *(_DWORD *)(a5 + 4 * v26);
                    break;
                }
                goto LABEL_21;
              case 5126:
                switch(a4)
                {
                  case 5124:
                    goto LABEL_41;
                  case 5125:
                    *(float *)(a2 + 4 * v22) = (float)*(unsigned int *)(a5 + 4 * v26);
                    break;
                  case 5126:
                    *(_DWORD *)(a2 + 4 * v22) = *(_DWORD *)(a5 + 4 * v26);
                    break;
                  case 5127:
                  case 5128:
                  case 5129:
                    goto LABEL_22;
                  case 5130:
                    a9 = *(double *)(a5 + 8 * v26);
                    *(float *)&a9 = a9;
                    *(_DWORD *)(a2 + 4 * v22) = LODWORD(a9);
                    break;
                  default:
                    if (a4 == 35670)
LABEL_41:
                      *(float *)(a2 + 4 * v22) = (float)*(int *)(a5 + 4 * v26);
                    break;
                }
                break;
              case 5127:
              case 5128:
              case 5129:
                break;
              case 5130:
                switch(a4)
                {
                  case 5124:
                    goto LABEL_43;
                  case 5125:
                    LODWORD(a9) = *(_DWORD *)(a5 + 4 * v26);
                    a9 = (double)*(unint64_t *)&a9;
                    *(double *)(a2 + 8 * v22) = a9;
                    break;
                  case 5126:
                    a9 = *(float *)(a5 + 4 * v26);
                    *(double *)(a2 + 8 * v22) = a9;
                    break;
                  case 5127:
                  case 5128:
                  case 5129:
                    goto LABEL_22;
                  case 5130:
                    a9 = *(double *)(a5 + 8 * v26);
                    *(double *)(a2 + 8 * v22) = a9;
                    break;
                  default:
                    if (a4 == 35670)
                    {
LABEL_43:
                      a9 = (double)*(int *)(a5 + 4 * v26);
                      *(double *)(a2 + 8 * v22) = a9;
                    }
                    break;
                }
                break;
              default:
                if ((_DWORD)result == 35670)
                {
                  switch(a4)
                  {
                    case 5124:
                    case 5125:
                      goto LABEL_45;
                    case 5126:
                      v27 = *(float *)(a5 + 4 * v26) == 0.0;
                      goto LABEL_53;
                    case 5127:
                    case 5128:
                    case 5129:
                      goto LABEL_22;
                    case 5130:
                      a9 = *(double *)(a5 + 8 * v26);
                      v27 = a9 == 0.0;
                      goto LABEL_53;
                    default:
                      if (a4 != 35670)
                        goto LABEL_22;
LABEL_45:
                      v27 = *(_DWORD *)(a5 + 4 * v26) == 0;
LABEL_53:
                      v25 = !v27;
                      break;
                  }
LABEL_21:
                  *(_DWORD *)(a2 + 4 * v22) = v25;
                }
                break;
            }
LABEL_22:
            ++v24;
            v23 += a7;
            ++v22;
            --v21;
          }
          while (v21);
          ++v20;
          v18 += a6;
          ++v17;
          v16 += a3;
        }
        while (v20 != a10);
        v19 = v114 + 1;
        v18 = v115 + a10 * a6;
        v17 = v116 + a8 * a7;
        v16 = v117 + a10 * a3;
      }
      while (v114 + 1 != a12);
    }
    return result;
  }
  switch(a8)
  {
    case 1u:
      if (a12)
        v34 = a10 == 0;
      else
        v34 = 1;
      if (v34)
        return result;
      v36 = a3 != 1 || a6 != 1;
      if (a10 < 0x14)
      {
        v37 = 0;
        v38 = 0;
        v39 = 0;
        do
        {
          v40 = a10;
          do
          {
            *(_DWORD *)(a2 + 4 * v38) = *(_DWORD *)(a5 + 4 * v37);
            v38 += a3;
            v37 += a6;
            --v40;
          }
          while (v40);
          ++v39;
        }
        while (v39 != a12);
        return result;
      }
      LODWORD(result) = 0;
      v87 = 0;
      v88 = 0;
      v89 = a10 - 1;
      while (1)
      {
        v90 = 0;
        v91 = __CFADD__((_DWORD)result, v89);
        v92 = __CFADD__(v87, v89) || v36;
        if ((v92 & 1) == 0 && !v91)
        {
          if (a2 + 4 * v87 - (a5 + 4 * (unint64_t)result) >= 0x20)
          {
            v93 = result + (a10 & 0xFFFFFFF8) * a6;
            v94 = v87 + (a10 & 0xFFFFFFF8) * a3;
            v96 = a10 & 0xFFFFFFF8;
            do
            {
              v97 = (__int128 *)(a5 + 4 * result);
              v98 = *v97;
              v99 = v97[1];
              v100 = (_OWORD *)(a2 + 4 * v87);
              *v100 = v98;
              v100[1] = v99;
              LODWORD(result) = result + 8;
              v87 += 8;
              v96 -= 8;
            }
            while (v96);
            v90 = a10 & 0xFFFFFFF8;
            if ((a10 & 0xFFFFFFF8) == a10)
              goto LABEL_169;
            goto LABEL_181;
          }
          v90 = 0;
        }
        LODWORD(v93) = result;
        v94 = v87;
LABEL_181:
        v95 = a10 - v90;
        do
        {
          *(_DWORD *)(a2 + 4 * v94) = *(_DWORD *)(a5 + 4 * v93);
          v94 += a3;
          v93 = (v93 + a6);
          --v95;
        }
        while (v95);
LABEL_169:
        ++v88;
        result = v93;
        v87 = v94;
        if (v88 == a12)
          return result;
      }
    case 2u:
      if (!a12 || !a10)
        return result;
      v41 = 0;
      v42 = 0;
      v43 = 0;
      v44 = a10 - 1;
      v46 = a3 != 1 || a6 != 1;
      while (1)
      {
        if (a10 >= 0x28)
        {
          result = 0;
          v47 = __CFADD__(v41, v44);
          v48 = __CFADD__(v42, v44) || v46;
          if ((v48 & 1) == 0 && v42 + a10 >= v42 + 1 && !v47 && v41 + a10 >= v41 + 1)
          {
            result = 0;
            v49 = a2 + 4 * (v42 + 1);
            v50 = a5 + 4 * (v41 + 1);
            if ((unint64_t)(v49 - v50) >= 0x20)
            {
              v51 = a5 + 4 * v41;
              if ((unint64_t)(v49 - v51) >= 0x20)
              {
                v52 = a2 + 4 * v42;
                if ((unint64_t)(v50 - v52) >= 0x20
                  && (unint64_t)(v52 - v51) >= 0x20
                  && (unint64_t)(v49 - v52) >= 0x20)
                {
                  v53 = v41 + (a10 & 0xFFFFFFF8) * a6;
                  v54 = v42 + (a10 & 0xFFFFFFF8) * a3;
                  v55 = a10 & 0xFFFFFFF8;
                  do
                  {
                    v56 = (__int128 *)(a5 + 4 * v41);
                    v57 = *v56;
                    v58 = v56[1];
                    v59 = (_OWORD *)(a2 + 4 * v42);
                    *v59 = v57;
                    v59[1] = v58;
                    v60 = (__int128 *)(a5 + 4 * (v41 + 1));
                    v61 = *v60;
                    v62 = v60[1];
                    v63 = (_OWORD *)(a2 + 4 * (v42 + 1));
                    *v63 = v61;
                    v63[1] = v62;
                    v41 += 8;
                    v42 += 8;
                    v55 -= 8;
                  }
                  while (v55);
                  result = a10 & 0xFFFFFFF8;
                  if ((a10 & 0xFFFFFFF8) == a10)
                    goto LABEL_121;
                  goto LABEL_119;
                }
              }
            }
          }
        }
        else
        {
          result = 0;
        }
        v53 = v41;
        v54 = v42;
LABEL_119:
        v64 = a10 - result;
        do
        {
          *(_DWORD *)(a2 + 4 * v54) = *(_DWORD *)(a5 + 4 * v53);
          *(_DWORD *)(a2 + 4 * (v54 + 1)) = *(_DWORD *)(a5 + 4 * (v53 + 1));
          v54 += a3;
          v53 += a6;
          --v64;
        }
        while (v64);
LABEL_121:
        ++v43;
        v41 = v53;
        v42 = v54;
        if (v43 == a12)
          return result;
      }
    case 3u:
      if (!a12 || !a10)
        return result;
      v29 = a3 != 1 || a6 != 1;
      if (a10 < 0x34)
      {
        v30 = 0;
        v31 = 0;
        for (i = 0; i != a12; ++i)
        {
          v33 = a10;
          do
          {
            *(_DWORD *)(a2 + 4 * v31) = *(_DWORD *)(a5 + 4 * v30);
            *(_DWORD *)(a2 + 4 * (v31 + 1)) = *(_DWORD *)(a5 + 4 * (v30 + 1));
            *(_DWORD *)(a2 + 4 * (v31 + 2)) = *(_DWORD *)(a5 + 4 * (v30 + 2));
            v31 += a3;
            v30 += a6;
            --v33;
          }
          while (v33);
        }
        return result;
      }
      v71 = 0;
      v72 = 0;
      v73 = 0;
      v74 = a10 - 1;
      while (1)
      {
        result = 0;
        v75 = __CFADD__(v71, v74);
        v76 = __CFADD__(v72, v74) || v29;
        if ((v76 & 1) != 0
          || v72 + a10 < v72 + 1
          || -3 - v72 < v74
          || v75
          || v71 + a10 < v71 + 1
          || -3 - v71 < v74
          || (result = 0, v77 = a5 + 4 * (v71 + 1), v78 = a2 + 4 * (v72 + 1), (unint64_t)(v78 - v77) < 0x10)
          || (v79 = a5 + 4 * v71, (unint64_t)(v78 - v79) < 0x10)
          || (v80 = a5 + 4 * (v71 + 2), v81 = a2 + 4 * v72, (unint64_t)(v80 - v81) < 0x10)
          || (unint64_t)(v77 - v81) < 0x10
          || (unint64_t)(v81 - v79) < 0x10
          || (unint64_t)(v78 - v81) < 0x10
          || (v82 = a2 + 4 * (v72 + 2), (unint64_t)(v82 - v81) < 0x10)
          || (unint64_t)(v82 - v78) < 0x10
          || (unint64_t)(v80 - v78) < 0x10
          || (unint64_t)(v82 - v79) < 0x10
          || (unint64_t)(v82 - v77) < 0x10
          || (unint64_t)(v82 - v80) < 0x10)
        {
          v83 = v71;
          v84 = v72;
        }
        else
        {
          v83 = v71 + (a10 & 0xFFFFFFFC) * a6;
          v84 = v72 + (a10 & 0xFFFFFFFC) * a3;
          v85 = a10 & 0xFFFFFFFC;
          do
          {
            *(_OWORD *)(a2 + 4 * v72) = *(_OWORD *)(a5 + 4 * v71);
            *(_OWORD *)(a2 + 4 * (v72 + 1)) = *(_OWORD *)(a5 + 4 * (v71 + 1));
            *(_OWORD *)(a2 + 4 * (v72 + 2)) = *(_OWORD *)(a5 + 4 * (v71 + 2));
            v71 += 4;
            v72 += 4;
            v85 -= 4;
          }
          while (v85);
          result = a10 & 0xFFFFFFFC;
          if ((a10 & 0xFFFFFFFC) == a10)
            goto LABEL_135;
        }
        v86 = a10 - result;
        do
        {
          *(_DWORD *)(a2 + 4 * v84) = *(_DWORD *)(a5 + 4 * v83);
          *(_DWORD *)(a2 + 4 * (v84 + 1)) = *(_DWORD *)(a5 + 4 * (v83 + 1));
          *(_DWORD *)(a2 + 4 * (v84 + 2)) = *(_DWORD *)(a5 + 4 * (v83 + 2));
          v84 += a3;
          v83 += a6;
          --v86;
        }
        while (v86);
LABEL_135:
        ++v73;
        v71 = v83;
        v72 = v84;
        if (v73 == a12)
          return result;
      }
  }
  if (a12 && a10 && a8)
  {
    if (a8 >= 0x10)
    {
      v101 = 0;
      v102 = 0;
      v103 = 0;
      v104 = a8 - 1;
      do
      {
        for (j = 0; j != a10; ++j)
        {
          v106 = 0;
          v107 = __CFADD__(v102, v104);
          v108 = __CFADD__(v101, v104);
          if (v107)
            goto LABEL_205;
          if (v108)
            goto LABEL_205;
          if (((unint64_t)a8 - 1) >> 32)
            goto LABEL_205;
          if (a2 + 4 * v102 - (a5 + 4 * (unint64_t)v101) < 0x20)
            goto LABEL_205;
          v109 = 0;
          result = a8 & 0xFFFFFFF8;
          do
          {
            v110 = (__int128 *)(a5 + 4 * (v101 + v109));
            v111 = *v110;
            v112 = v110[1];
            v113 = (_OWORD *)(a2 + 4 * (v102 + v109));
            *v113 = v111;
            v113[1] = v112;
            v109 += 8;
            result -= 8;
          }
          while (result);
          v106 = a8 & 0xFFFFFFF8;
          if (v106 != a8)
          {
LABEL_205:
            result = a8 - v106;
            do
            {
              *(_DWORD *)(a2 + 4 * (v102 + v106)) = *(_DWORD *)(a5 + 4 * (v101 + v106));
              LODWORD(v106) = v106 + 1;
              --result;
            }
            while (result);
          }
          v102 += a3;
          v101 += a6;
        }
        ++v103;
      }
      while (v103 != a12);
    }
    else
    {
      v65 = 0;
      v66 = 0;
      for (k = 0; k != a12; ++k)
      {
        for (m = 0; m != a10; ++m)
        {
          v69 = 0;
          v70 = a8;
          do
          {
            *(_DWORD *)(a2 + 4 * (v66 + v69)) = *(_DWORD *)(a5 + 4 * (v65 + v69));
            ++v69;
            --v70;
          }
          while (v70);
          v66 += a3;
          v65 += a6;
        }
      }
    }
  }
  return result;
}

uint64_t vecSizeForType(int a1)
{
  uint64_t result;
  char v3;
  unsigned int v4;

  result = 0;
  if (a1 <= 36287)
  {
    switch(a1)
    {
      case 35664:
      case 35667:
      case 35671:
      case 35674:
      case 35687:
      case 35689:
        return 2;
      case 35665:
      case 35668:
      case 35672:
      case 35675:
      case 35685:
      case 35690:
        return 3;
      case 35666:
      case 35669:
      case 35673:
      case 35676:
      case 35686:
      case 35688:
        return 4;
      case 35670:
      case 35677:
      case 35678:
      case 35679:
      case 35680:
      case 35681:
      case 35682:
      case 35683:
      case 35684:
        goto LABEL_17;
      default:
        v4 = a1 - 5124;
        if (v4 <= 6 && ((1 << v4) & 0x47) != 0)
LABEL_17:
          result = 1;
        break;
    }
  }
  else if (a1 > 36677)
  {
    v3 = a1 - 70;
    if ((a1 - 36678) <= 8)
    {
      if (((1 << v3) & 0x54) != 0)
      {
        return 4;
      }
      else if (((1 << v3) & 0xA1) != 0)
      {
        return 2;
      }
      else
      {
        return 3;
      }
    }
    else
    {
      switch(a1)
      {
        case 36860:
          return 2;
        case 36861:
          return 3;
        case 36862:
          return 4;
        case 36863:
        case 36864:
        case 36865:
        case 36866:
        case 36867:
        case 36868:
        case 36869:
        case 36870:
        case 36871:
        case 36872:
        case 36873:
        case 36874:
        case 36875:
          return result;
        case 36876:
        case 36877:
        case 36878:
        case 36879:
          goto LABEL_17;
        default:
          if ((a1 - 37128) < 6)
            goto LABEL_17;
          break;
      }
    }
  }
  else
  {
    switch(a1)
    {
      case 36288:
      case 36289:
      case 36290:
      case 36291:
      case 36292:
      case 36293:
      case 36297:
      case 36298:
      case 36299:
      case 36300:
      case 36301:
      case 36302:
      case 36303:
      case 36304:
      case 36305:
      case 36306:
      case 36307:
      case 36308:
      case 36309:
      case 36310:
      case 36311:
      case 36312:
        goto LABEL_17;
      case 36294:
        return 2;
      case 36295:
        return 3;
      case 36296:
        return 4;
      default:
        return result;
    }
  }
  return result;
}

uint64_t colsForType(int a1)
{
  uint64_t result;
  char v3;
  unsigned int v4;

  result = 0;
  if (a1 <= 36287)
  {
    switch(a1)
    {
      case 35664:
      case 35665:
      case 35666:
      case 35667:
      case 35668:
      case 35669:
      case 35670:
      case 35671:
      case 35672:
      case 35673:
      case 35677:
      case 35678:
      case 35679:
      case 35680:
      case 35681:
      case 35682:
      case 35683:
      case 35684:
        return 1;
      case 35674:
      case 35685:
      case 35686:
        return 2;
      case 35675:
      case 35687:
      case 35688:
        return 3;
      case 35676:
      case 35689:
      case 35690:
        return 4;
      default:
        v4 = a1 - 5124;
        if (v4 <= 6 && ((1 << v4) & 0x47) != 0)
          return 1;
        break;
    }
  }
  else
  {
    if (a1 <= 36677)
    {
      if ((a1 - 36288) >= 0x19)
        return result;
      return 1;
    }
    v3 = a1 - 70;
    if ((a1 - 36678) <= 8)
    {
      if (((1 << v3) & 0x19) != 0)
      {
        return 2;
      }
      else if (((1 << v3) & 0x62) != 0)
      {
        return 3;
      }
      else
      {
        return 4;
      }
    }
    else if ((a1 - 36860) <= 0x13 && ((1 << (a1 + 4)) & 0xF0007) != 0 || (a1 - 37128) < 6)
    {
      return 1;
    }
  }
  return result;
}

_QWORD *glVertexPointer_PackThread(uint64_t a1, char a2, unsigned __int16 a3, int a4, uint64_t a5)
{
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  uint64_t v13;

  v10 = *(_QWORD *)(a1 + 26448);
  result = gleAddCommand(a1, (uint64_t)glVertexPointer_UnpackThread, 24);
  *(_BYTE *)(v10 + 302) = a2;
  *(_WORD *)(v10 + 300) = a3;
  *(_DWORD *)result = a2;
  *((_DWORD *)result + 1) = a3;
  *(_DWORD *)(v10 + 296) = a4;
  *((_DWORD *)result + 2) = a4;
  *(_QWORD *)(v10 + 280) = a5;
  result[2] = a5;
  v12 = *(_QWORD *)(a1 + 26448);
  v13 = *(_QWORD *)(a1 + 26464);
  if (v13 != *(_QWORD *)(v12 + 8))
  {
    *(_QWORD *)(v12 + 264) = *(_QWORD *)(v12 + 264) & 0xFFFFFFFFFFFEFFFFLL | ((unint64_t)(v13 != 0) << 16);
    *(_QWORD *)(v12 + 8) = v13;
  }
  return result;
}

uint64_t glVertexPointer_UnpackThread(uint64_t a1, uint64_t a2)
{
  glVertexPointer_Exec(a1, *(_DWORD *)a2, *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 8), *(_QWORD *)(a2 + 16));
  return 24;
}

_QWORD *glNormalPointer_PackThread(uint64_t a1, unsigned __int16 a2, int a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v8 = *(_QWORD *)(a1 + 26448);
  result = gleAddCommand(a1, (uint64_t)glNormalPointer_UnpackThread, 24);
  *(_BYTE *)(v8 + 326) = 3;
  *(_WORD *)(v8 + 324) = a2;
  *(_DWORD *)result = 3;
  *((_DWORD *)result + 1) = a2;
  *(_DWORD *)(v8 + 320) = a3;
  *((_DWORD *)result + 2) = a3;
  *(_QWORD *)(v8 + 304) = a4;
  result[2] = a4;
  v10 = *(_QWORD *)(a1 + 26448);
  v11 = *(_QWORD *)(a1 + 26464);
  if (v11 != *(_QWORD *)(v10 + 16))
  {
    *(_QWORD *)(v10 + 264) = *(_QWORD *)(v10 + 264) & 0xFFFFFFFFFFFDFFFFLL | ((unint64_t)(v11 != 0) << 17);
    *(_QWORD *)(v10 + 16) = v11;
  }
  return result;
}

uint64_t glNormalPointer_UnpackThread(uint64_t a1, uint64_t a2)
{
  glNormalPointer_Exec(a1, *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 8), *(_QWORD *)(a2 + 16));
  return 24;
}

_QWORD *glColorPointer_PackThread(uint64_t a1, int a2, unsigned __int16 a3, int a4, uint64_t a5)
{
  uint64_t v10;
  _QWORD *result;
  char v12;
  uint64_t v13;
  uint64_t v14;

  v10 = *(_QWORD *)(a1 + 26448);
  result = gleAddCommand(a1, (uint64_t)glColorPointer_UnpackThread, 24);
  *(_WORD *)(v10 + 348) = a3;
  *(_DWORD *)result = a2;
  *((_DWORD *)result + 1) = a3;
  *(_DWORD *)(v10 + 344) = a4;
  *((_DWORD *)result + 2) = a4;
  *(_QWORD *)(v10 + 328) = a5;
  result[2] = a5;
  if (a2 == 32993)
    v12 = 5;
  else
    v12 = a2;
  *(_BYTE *)(v10 + 350) = v12;
  v13 = *(_QWORD *)(a1 + 26448);
  v14 = *(_QWORD *)(a1 + 26464);
  if (v14 != *(_QWORD *)(v13 + 24))
  {
    *(_QWORD *)(v13 + 264) = *(_QWORD *)(v13 + 264) & 0xFFFFFFFFFFFBFFFFLL | ((unint64_t)(v14 != 0) << 18);
    *(_QWORD *)(v13 + 24) = v14;
  }
  return result;
}

uint64_t glColorPointer_UnpackThread(uint64_t a1, uint64_t a2)
{
  glColorPointer_Exec(a1, *(_DWORD *)a2, *(unsigned int *)(a2 + 4), *(_DWORD *)(a2 + 8), *(_QWORD *)(a2 + 16));
  return 24;
}

void glPointSizePointer_Exec(uint64_t a1, int a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int v22;

  v4 = a1 + 28652;
  if (a3 < 0)
  {
    if (!*(_WORD *)(a1 + 29832))
    {
      v18 = 1281;
      goto LABEL_20;
    }
    return;
  }
  v5 = a4;
  v9 = *(_QWORD *)(a1 + 26384);
  v10 = *(_QWORD *)(a1 + 19312);
  if (!v10 && v9 != *(_QWORD *)(a1 + 26392) && a4 && !*(_BYTE *)(a1 + 32502))
  {
    if (!*(_WORD *)(a1 + 29832))
    {
      v18 = 1282;
      goto LABEL_20;
    }
    return;
  }
  if (a2 == 5126 || a2 == 5132 && *(_BYTE *)(a1 + 32501) == 2)
  {
    *(_QWORD *)(v9 + 944) |= 0x400000uLL;
    *(_QWORD *)(v9 + 280) = a4;
    v11 = *(_QWORD *)(v9 + 1288);
    if (v10 == v11)
      goto LABEL_35;
    if (v11 && (v12 = *(_DWORD *)(v11 + 20) - 1, (*(_DWORD *)(v11 + 20) = v12) == 0))
    {
      gleUnbindAndFreeBufferObject(a1, (_QWORD *)v11);
      if (v10)
        goto LABEL_10;
    }
    else if (v10)
    {
LABEL_10:
      ++*(_DWORD *)(v10 + 20);
      v13 = *(_QWORD *)(v9 + 912);
      if ((v13 & 0x400000) == 0)
      {
        *(_QWORD *)(v9 + 912) = v13 | 0x400000;
        if ((*(_BYTE *)(v9 + 906) & 0x40) != 0)
          gleUpdateDrawArraysFuncs(a1);
      }
      v14 = *(unsigned __int8 *)(v4 + 3844);
      if (*(_BYTE *)(v4 + 3844))
      {
        v15 = (uint64_t *)(v10 + 40);
        v16 = (_QWORD *)(v9 + 1544);
        do
        {
          v17 = *v15++;
          *v16 = v17;
          v16 += 35;
          --v14;
        }
        while (v14);
      }
      if (v11)
        goto LABEL_34;
      goto LABEL_33;
    }
    v19 = *(_QWORD *)(v9 + 912);
    if ((v19 & 0x400000) != 0)
    {
      *(_QWORD *)(v9 + 912) = v19 & 0xFFFFFFFFFFBFFFFFLL;
      if ((*(_BYTE *)(v9 + 906) & 0x40) != 0)
        gleUpdateDrawArraysFuncs(a1);
    }
    v20 = *(unsigned __int8 *)(v4 + 3844);
    if (*(_BYTE *)(v4 + 3844))
    {
      v21 = (_QWORD *)(v9 + 1544);
      do
      {
        *v21 = 0;
        v21 += 35;
        --v20;
      }
      while (v20);
    }
LABEL_33:
    *(_QWORD *)(v9 + 952) |= 0x400000uLL;
LABEL_34:
    *(_DWORD *)v4 = 0;
    *(_DWORD *)(a1 + 1532) |= 0x1000u;
    *(_QWORD *)(v9 + 944) |= 0x400010uLL;
    *(_QWORD *)(v9 + 1288) = v10;
LABEL_35:
    if (v10)
    {
      v5 += *(_QWORD *)(v10 + 136);
      if (*(_QWORD *)(v10 + 192))
      {
        if ((*(_BYTE *)(v9 + 906) & 0x40) != 0)
          *(_BYTE *)(v9 + 1216) = 0;
      }
    }
    *(_QWORD *)(v9 + 1008) = v5;
    if (a3)
      v22 = a3;
    else
      v22 = 4;
    if (*(unsigned __int16 *)(v9 + 300) != a2 || *(_DWORD *)(v9 + 296) != v22)
    {
      *(_QWORD *)(v9 + 952) |= 0x400000uLL;
      *(_WORD *)(v9 + 300) = a2;
      *(_DWORD *)(v9 + 296) = v22;
      *(_QWORD *)(a1 + 26184) = gleSetVertexArrayFunc;
      *(_QWORD *)(a1 + 26192) = gleSetVertexArrayFunc;
      *(_QWORD *)(a1 + 26200) = gleSetVertexElemFunc;
      *(_QWORD *)(a1 + 26208) = gleSetVertexElemFunc;
      *(_DWORD *)v4 = 0;
      *(_DWORD *)(a1 + 1532) |= 0x1000u;
    }
    return;
  }
  if (!*(_WORD *)(a1 + 29832))
  {
    v18 = 1280;
LABEL_20:
    *(_WORD *)(a1 + 29832) = v18;
  }
}

_QWORD *glPointSizePointer_PackThread(uint64_t a1, unsigned __int16 a2, int a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v8 = *(_QWORD *)(a1 + 26448);
  result = gleAddCommand(a1, (uint64_t)glPointSizePointer_UnpackThread, 24);
  *(_WORD *)(v8 + 444) = a2;
  *(_DWORD *)(v8 + 440) = a3;
  *((_DWORD *)result + 1) = a2;
  *((_DWORD *)result + 2) = a3;
  *(_QWORD *)(v8 + 424) = a4;
  result[2] = a4;
  v10 = *(_QWORD *)(a1 + 26448);
  v11 = *(_QWORD *)(a1 + 26464);
  if (v11 != *(_QWORD *)(v10 + 56))
  {
    *(_QWORD *)(v10 + 264) = *(_QWORD *)(v10 + 264) & 0xFFFFFFFFFFBFFFFFLL | ((unint64_t)(v11 != 0) << 22);
    *(_QWORD *)(v10 + 56) = v11;
  }
  return result;
}

uint64_t glPointSizePointer_UnpackThread(uint64_t a1, uint64_t a2)
{
  glPointSizePointer_Exec(a1, *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 8), *(_QWORD *)(a2 + 16));
  return 24;
}

void glMatrixIndexPointerOES_Exec(uint64_t a1, unsigned int a2, int a3, unsigned int a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;

  v5 = a1 + 29832;
  if (a2 - 5 < 0xFFFFFFFC || (a4 & 0x80000000) != 0)
  {
    if (!*(_WORD *)v5)
    {
      v19 = 1281;
      goto LABEL_19;
    }
    return;
  }
  v7 = a5;
  v10 = *(_QWORD *)(a1 + 26384);
  if (!*(_QWORD *)(a1 + 19312) && v10 != *(_QWORD *)(a1 + 26392) && a5 && !*(_BYTE *)(a1 + 32502))
  {
    if (!*(_WORD *)v5)
    {
      v19 = 1282;
      goto LABEL_19;
    }
    return;
  }
  if (a3 == 5121)
  {
    *(_BYTE *)(a1 + 17696) = a2;
    gleUpdateInverseNeeds(a1);
    *(_QWORD *)(v10 + 944) |= 0x800000uLL;
    *(_QWORD *)(v10 + 304) = v7;
    v11 = *(_QWORD *)(v10 + 1296);
    v12 = *(_QWORD *)(a1 + 19312);
    if (v12 == v11)
      goto LABEL_34;
    if (v11 && (v13 = *(_DWORD *)(v11 + 20) - 1, (*(_DWORD *)(v11 + 20) = v13) == 0))
    {
      gleUnbindAndFreeBufferObject(a1, (_QWORD *)v11);
      if (v12)
        goto LABEL_9;
    }
    else if (v12)
    {
LABEL_9:
      ++*(_DWORD *)(v12 + 20);
      v14 = *(_QWORD *)(v10 + 912);
      if ((v14 & 0x800000) == 0)
      {
        *(_QWORD *)(v10 + 912) = v14 | 0x800000;
        if ((*(_BYTE *)(v10 + 906) & 0x80) != 0)
          gleUpdateDrawArraysFuncs(a1);
      }
      v15 = *(unsigned __int8 *)(v5 + 2664);
      if (*(_BYTE *)(v5 + 2664))
      {
        v16 = (uint64_t *)(v12 + 40);
        v17 = (_QWORD *)(v10 + 1552);
        do
        {
          v18 = *v16++;
          *v17 = v18;
          v17 += 35;
          --v15;
        }
        while (v15);
      }
      if (v11)
        goto LABEL_33;
      goto LABEL_32;
    }
    v20 = *(_QWORD *)(v10 + 912);
    if ((v20 & 0x800000) != 0)
    {
      *(_QWORD *)(v10 + 912) = v20 & 0xFFFFFFFFFF7FFFFFLL;
      if ((*(_BYTE *)(v10 + 906) & 0x80) != 0)
        gleUpdateDrawArraysFuncs(a1);
    }
    v21 = *(unsigned __int8 *)(v5 + 2664);
    if (*(_BYTE *)(v5 + 2664))
    {
      v22 = (_QWORD *)(v10 + 1552);
      do
      {
        *v22 = 0;
        v22 += 35;
        --v21;
      }
      while (v21);
    }
LABEL_32:
    *(_QWORD *)(v10 + 952) |= 0x800000uLL;
LABEL_33:
    *(_DWORD *)(a1 + 28652) = 0;
    *(_DWORD *)(a1 + 1532) |= 0x1000u;
    *(_QWORD *)(v10 + 944) |= 0x800010uLL;
    *(_QWORD *)(v10 + 1296) = v12;
LABEL_34:
    if (v12)
    {
      v7 += *(_QWORD *)(v12 + 136);
      if (*(_QWORD *)(v12 + 192))
      {
        if ((*(_BYTE *)(v10 + 906) & 0x80) != 0)
          *(_BYTE *)(v10 + 1216) = 0;
      }
    }
    *(_QWORD *)(v10 + 1016) = v7;
    if (a4)
      v23 = a4;
    else
      v23 = a2;
    v24 = ((unint64_t)a2 << 48) | ((unint64_t)(((v23 | v7) & 0xF) == 0) << 57) | v23 | 0x140100000000;
    if (*(_QWORD *)(v10 + 320) != v24)
    {
      *(_QWORD *)(v10 + 952) |= 0x800000uLL;
      *(_QWORD *)(v10 + 320) = v24;
      *(_QWORD *)(a1 + 26184) = gleSetVertexArrayFunc;
      *(_QWORD *)(a1 + 26192) = gleSetVertexArrayFunc;
      *(_QWORD *)(a1 + 26200) = gleSetVertexElemFunc;
      *(_QWORD *)(a1 + 26208) = gleSetVertexElemFunc;
      *(_DWORD *)(a1 + 1532) |= 0x1000u;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1548) |= 0x1801Eu;
    }
    return;
  }
  if (!*(_WORD *)v5)
  {
    v19 = 1280;
LABEL_19:
    *(_WORD *)v5 = v19;
  }
}

_QWORD *glMatrixIndexPointerOES_PackThread(uint64_t a1, int a2, int a3, int a4, uint64_t a5)
{
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;

  result = gleAddCommand(a1, (uint64_t)glMatrixIndexPointerOES_UnpackThread, 24);
  *(_DWORD *)result = a2;
  *((_DWORD *)result + 1) = a3;
  *((_DWORD *)result + 2) = a4;
  result[2] = a5;
  v11 = *(_QWORD *)(a1 + 26448);
  v12 = *(_QWORD *)(a1 + 26464);
  if (v12 != *(_QWORD *)(v11 + 64))
  {
    *(_QWORD *)(v11 + 264) = *(_QWORD *)(v11 + 264) & 0xFFFFFFFFFF7FFFFFLL | ((unint64_t)(v12 != 0) << 23);
    *(_QWORD *)(v11 + 64) = v12;
  }
  return result;
}

uint64_t glMatrixIndexPointerOES_UnpackThread(uint64_t a1, uint64_t a2)
{
  glMatrixIndexPointerOES_Exec(a1, *(_DWORD *)a2, *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 8), *(_QWORD *)(a2 + 16));
  return 24;
}

_QWORD *glWeightPointerARB_PackThread(uint64_t a1, int a2, int a3, int a4, uint64_t a5)
{
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;

  result = gleAddCommand(a1, (uint64_t)glWeightPointerARB_UnpackThread, 24);
  *(_DWORD *)result = a2;
  *((_DWORD *)result + 1) = a3;
  *((_DWORD *)result + 2) = a4;
  result[2] = a5;
  v11 = *(_QWORD *)(a1 + 26448);
  v12 = *(_QWORD *)(a1 + 26464);
  if (v12 != *(_QWORD *)(v11 + 40))
  {
    *(_QWORD *)(v11 + 264) = *(_QWORD *)(v11 + 264) & 0xFFFFFFFFFFEFFFFFLL | ((unint64_t)(v12 != 0) << 20);
    *(_QWORD *)(v11 + 40) = v12;
  }
  return result;
}

uint64_t glWeightPointerARB_UnpackThread(uint64_t a1, uint64_t a2)
{
  glWeightPointerARB_Exec(a1, *(_DWORD *)a2, *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 8), *(_QWORD *)(a2 + 16));
  return 24;
}

_QWORD *glTexCoordPointer_PackThread(_QWORD *result, char a2, unsigned __int16 a3, int a4, uint64_t a5)
{
  int v5;
  unsigned int v6;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v5 = *((_DWORD *)result + 6645);
  v6 = v5 + 8;
  if ((v5 + 8) >= 0x11)
  {
    if (!*((_WORD *)result + 14916))
      *((_WORD *)result + 14916) = 1281;
  }
  else
  {
    v11 = result;
    v12 = result[3306] + 24 * v6;
    result = gleAddCommand((uint64_t)result, (uint64_t)glTexCoordPointer_UnpackThread, 24);
    *(_BYTE *)(v12 + 302) = a2;
    *(_WORD *)(v12 + 300) = a3;
    *(_DWORD *)result = a2;
    *((_DWORD *)result + 1) = a3;
    *(_DWORD *)(v12 + 296) = a4;
    *((_DWORD *)result + 2) = a4;
    *(_QWORD *)(v12 + 280) = a5;
    result[2] = a5;
    v13 = v11[3306];
    v14 = v13 + 8 * v6;
    v16 = *(_QWORD *)(v14 + 8);
    v15 = (_QWORD *)(v14 + 8);
    v17 = v11[3308];
    if (v17 != v16)
    {
      v18 = (0x1000000 << v5);
      if (v17)
        v19 = *(_QWORD *)(v13 + 264) | v18;
      else
        v19 = *(_QWORD *)(v13 + 264) & ~v18;
      *(_QWORD *)(v13 + 264) = v19;
      *v15 = v17;
    }
  }
  return result;
}

uint64_t glTexCoordPointer_UnpackThread(uint64_t a1, uint64_t a2)
{
  glTexCoordPointer_Exec(a1, *(_DWORD *)a2, *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 8), *(_QWORD *)(a2 + 16));
  return 24;
}

void glVertexAttribIPointerEXT_Exec(uint64_t a1, unsigned int a2, int a3, int a4, unsigned int a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v10;
  unsigned __int16 v11;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v6 = a1 + 28652;
  if ((a3 - 5) < 0xFFFFFFFC || (a5 & 0x80000000) != 0 || a2 >= 0x10)
  {
    if (*(_WORD *)(a1 + 29832))
      return;
    v26 = 1281;
    goto LABEL_23;
  }
  v8 = a6;
  v10 = *(_QWORD *)(a1 + 26384);
  if (!v10)
  {
    if (!a6)
      return;
    goto LABEL_46;
  }
  v11 = a4;
  v13 = *(_QWORD *)(a1 + 19312);
  if (!v13 && a6 && v10 != *(_QWORD *)(a1 + 26392))
  {
LABEL_46:
    if (*(_WORD *)(a1 + 29832))
      return;
    v26 = 1282;
LABEL_23:
    *(_WORD *)(a1 + 29832) = v26;
    return;
  }
  if ((a4 - 5120) >= 6)
  {
    if (*(_WORD *)(a1 + 29832))
      return;
    v26 = 1280;
    goto LABEL_23;
  }
  v14 = a2 + 16;
  v15 = dword_21B9A4D58[a4 - 5120];
  v16 = v10 + 136;
  v17 = (unint64_t)(1 << a2) << 32;
  *(_QWORD *)(v10 + 944) |= v17;
  *(_QWORD *)(v10 + 136 + 24 * v14) = a6;
  v18 = v10 + 1240;
  v19 = *(_QWORD *)(v10 + 1240 + 8 * v14);
  if (v13 == v19)
    goto LABEL_33;
  if (v19 && (v20 = *(_DWORD *)(v19 + 20) - 1, (*(_DWORD *)(v19 + 20) = v20) == 0))
  {
    v43 = a1 + 28652;
    v40 = v15;
    gleUnbindAndFreeBufferObject(a1, (_QWORD *)v19);
    v16 = v10 + 136;
    v18 = v10 + 1240;
    v15 = v40;
    v6 = v43;
    if (v13)
      goto LABEL_13;
  }
  else if (v13)
  {
LABEL_13:
    ++*(_DWORD *)(v13 + 20);
    v21 = *(_QWORD *)(v10 + 912);
    if ((v21 & v17) == 0)
    {
      *(_QWORD *)(v10 + 912) = v21 | v17;
      if ((*(_QWORD *)(v10 + 904) & v17) != 0)
      {
        v42 = v6;
        v36 = v16;
        v37 = v18;
        v39 = v15;
        gleUpdateDrawArraysFuncs(a1);
        v16 = v36;
        v18 = v37;
        v15 = v39;
        v6 = v42;
      }
    }
    v22 = *(unsigned __int8 *)(v6 + 3844);
    if (*(_BYTE *)(v6 + 3844))
    {
      v23 = (uint64_t *)(v13 + 40);
      v24 = (_QWORD *)(v10 + 8 * v14 + 1496);
      do
      {
        v25 = *v23++;
        *v24 = v25;
        v24 += 35;
        --v22;
      }
      while (v22);
    }
    if (v19)
      goto LABEL_32;
    goto LABEL_31;
  }
  v27 = *(_QWORD *)(v10 + 912);
  if ((v27 & v17) != 0)
  {
    *(_QWORD *)(v10 + 912) = v27 & ~v17;
    if ((*(_QWORD *)(v10 + 904) & v17) != 0)
    {
      v44 = v6;
      v28 = v16;
      v41 = v15;
      v38 = v18;
      gleUpdateDrawArraysFuncs(a1);
      v18 = v38;
      v15 = v41;
      v16 = v28;
      v6 = v44;
    }
  }
  v29 = *(unsigned __int8 *)(v6 + 3844);
  if (*(_BYTE *)(v6 + 3844))
  {
    v30 = (_QWORD *)(v10 + 8 * v14 + 1496);
    do
    {
      *v30 = 0;
      v30 += 35;
      --v29;
    }
    while (v29);
  }
LABEL_31:
  *(_QWORD *)(v10 + 952) |= v17;
LABEL_32:
  *(_DWORD *)v6 = 0;
  *(_DWORD *)(a1 + 1532) |= 0x1000u;
  *(_QWORD *)(v10 + 944) |= v17 | 0x10;
  *(_QWORD *)(v18 + 8 * v14) = v13;
LABEL_33:
  if (v13)
  {
    v8 += *(_QWORD *)(v13 + 136);
    if (*(_QWORD *)(v13 + 192))
    {
      if ((*(_QWORD *)(v10 + 904) & v17) != 0)
        *(_BYTE *)(v10 + 1216) = 0;
    }
  }
  *(_QWORD *)(v10 + 8 * v14 + 960) = v8;
  if (a5)
    v31 = a5;
  else
    v31 = (v15 * a3);
  v32 = v16 + 24 * v14;
  v34 = *(_QWORD *)(v32 + 16);
  v33 = (unint64_t *)(v32 + 16);
  v35 = ((unint64_t)a3 << 48) | ((unint64_t)(((v31 | v8) & 0xF) == 0) << 57) | ((unint64_t)(v11 | 0x4000u) << 32) | v31;
  if (v34 != v35)
  {
    *(_QWORD *)(v10 + 952) |= v17;
    *v33 = v35;
    *(_QWORD *)(a1 + 26184) = gleSetVertexArrayFunc;
    *(_QWORD *)(a1 + 26192) = gleSetVertexArrayFunc;
    *(_QWORD *)(a1 + 26200) = gleSetVertexElemFunc;
    *(_QWORD *)(a1 + 26208) = gleSetVertexElemFunc;
    *(_DWORD *)v6 = 0;
    *(_DWORD *)(a1 + 1532) |= 0x1000u;
  }
}

_QWORD *glVertexAttribPointerARB_PackThread(_QWORD *result, unsigned int a2, unsigned int a3, int a4, char a5, int a6, uint64_t a7)
{
  __int16 *v7;
  _QWORD *v11;
  uint64_t v12;
  __int16 v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;

  v7 = (__int16 *)(result + 3729);
  if (a3 - 5 < 0xFFFFFFFC || a6 < 0 || a2 >= 0x10)
  {
    if (*v7)
      return result;
    v16 = 1281;
LABEL_18:
    *v7 = v16;
    return result;
  }
  v11 = result;
  v12 = result[3306];
  if (!v12)
  {
    if (!a7)
      return result;
    goto LABEL_20;
  }
  if (!result[3308] && a7 && v12 != result[3307])
  {
LABEL_20:
    if (*v7)
      return result;
    v16 = 1282;
    goto LABEL_18;
  }
  if ((a4 - 5120) > 0xC)
    goto LABEL_15;
  if (((1 << a4) & 0x104F) != 0)
    goto LABEL_22;
  if (((1 << a4) & 0x830) == 0)
  {
LABEL_15:
    if (a4 != 33640 && a4 != 36255 || (*((_BYTE *)result + 32501) & 0xFE) == 2)
      goto LABEL_16;
    if (a3 > 3)
      goto LABEL_22;
    goto LABEL_20;
  }
  if ((*((_BYTE *)result + 32501) & 0xFE) == 2)
  {
LABEL_16:
    if (*v7)
      return result;
    v16 = 1280;
    goto LABEL_18;
  }
LABEL_22:
  v17 = a2 + 16;
  result = gleAddCommand((uint64_t)result, (uint64_t)glVertexAttribPointerARB_UnpackThread, 32);
  *(_DWORD *)result = a2;
  *((_DWORD *)result + 1) = a3;
  *((_DWORD *)result + 2) = a4;
  *((_BYTE *)result + 12) = a5;
  *((_DWORD *)result + 4) = a6;
  result[3] = a7;
  v18 = v11[3306];
  v19 = v18 + 8 * v17;
  v21 = *(_QWORD *)(v19 + 8);
  v20 = (_QWORD *)(v19 + 8);
  v22 = v11[3308];
  if (v22 != v21)
  {
    v23 = (unint64_t)(1 << a2) << 32;
    if (v22)
      v24 = *(_QWORD *)(v18 + 264) | v23;
    else
      v24 = *(_QWORD *)(v18 + 264) & ~v23;
    *(_QWORD *)(v18 + 264) = v24;
    *v20 = v22;
  }
  return result;
}

uint64_t glVertexAttribPointerARB_UnpackThread(uint64_t a1, uint64_t a2)
{
  glVertexAttribPointerARB_Exec(a1, *(_DWORD *)a2, *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 8), *(unsigned __int8 *)(a2 + 12), *(_DWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
  return 32;
}

_QWORD *glVertexAttribIPointerEXT_PackThread(_QWORD *result, unsigned int a2, int a3, int a4, int a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v10;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __int16 *v21;
  __int16 v22;

  v6 = result;
  if ((a3 - 5) < 0xFFFFFFFC || a5 < 0 || a2 >= 0x10)
  {
    v21 = (__int16 *)(result + 3729);
    if (*((_WORD *)result + 14916))
      return result;
    v22 = 1281;
    goto LABEL_14;
  }
  v10 = result[3306];
  if (!v10)
  {
    if (!a6)
      return result;
    goto LABEL_21;
  }
  if (!result[3308] && a6 && v10 != result[3307])
  {
LABEL_21:
    v21 = (__int16 *)(result + 3729);
    if (*((_WORD *)result + 14916))
      return result;
    v22 = 1282;
LABEL_14:
    *v21 = v22;
    return result;
  }
  if ((a4 - 5120) >= 6)
  {
    v21 = (__int16 *)(result + 3729);
    if (*((_WORD *)result + 14916))
      return result;
    v22 = 1280;
    goto LABEL_14;
  }
  v13 = a2 + 16;
  result = gleAddCommand((uint64_t)result, (uint64_t)glVertexAttribIPointerEXT_UnpackThread, 32);
  *(_DWORD *)result = a2;
  *((_DWORD *)result + 1) = a3;
  *((_DWORD *)result + 2) = a4;
  *((_DWORD *)result + 4) = a5;
  result[3] = a6;
  v14 = v6[3306];
  v15 = v14 + 8 * v13;
  v17 = *(_QWORD *)(v15 + 8);
  v16 = (_QWORD *)(v15 + 8);
  v18 = v6[3308];
  if (v18 != v17)
  {
    v19 = (unint64_t)(1 << a2) << 32;
    if (v18)
      v20 = *(_QWORD *)(v14 + 264) | v19;
    else
      v20 = *(_QWORD *)(v14 + 264) & ~v19;
    *(_QWORD *)(v14 + 264) = v20;
    *v16 = v18;
  }
  return result;
}

uint64_t glVertexAttribIPointerEXT_UnpackThread(uint64_t a1, uint64_t a2)
{
  glVertexAttribIPointerEXT_Exec(a1, *(_DWORD *)a2, *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 8), *(_DWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
  return 32;
}

uint64_t glVertexAttribDivisorARB_Exec(uint64_t result, unsigned int a2, int a3)
{
  int8x16_t *v3;
  __int8 *v4;
  _DWORD *v5;
  int v6;
  __int16 v7;

  if (a2 >= 0x10)
  {
    if (*(_WORD *)(result + 29832))
      return result;
    v7 = 1281;
    goto LABEL_10;
  }
  v3 = *(int8x16_t **)(result + 26384);
  if (!v3)
  {
    if (*(_WORD *)(result + 29832))
      return result;
    v7 = 1282;
LABEL_10:
    *(_WORD *)(result + 29832) = v7;
    return result;
  }
  v4 = &v3[24].i8[24 * a2];
  v6 = *((_DWORD *)v4 + 36);
  v5 = v4 + 144;
  if (v6 != a3)
  {
    *v5 = a3;
    v3[59] = vorrq_s8(v3[59], (int8x16_t)vdupq_n_s64((unint64_t)(1 << a2) << 32));
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1532) |= 0x1000u;
  }
  return result;
}

_QWORD *glVertexAttribDivisorARB_PackThread(_QWORD *result, unsigned int a2, int a3)
{
  __int16 *v5;
  __int16 v6;

  if (a2 >= 0x10)
  {
    v5 = (__int16 *)(result + 3729);
    if (!*((_WORD *)result + 14916))
    {
      v6 = 1281;
LABEL_9:
      *v5 = v6;
    }
  }
  else
  {
    if (result[3306])
    {
      result = gleAddCommand((uint64_t)result, (uint64_t)glVertexAttribDivisorARB_UnpackThread, 8);
      *(_DWORD *)result = a2;
      *((_DWORD *)result + 1) = a3;
      return result;
    }
    v5 = (__int16 *)(result + 3729);
    if (!*((_WORD *)result + 14916))
    {
      v6 = 1282;
      goto LABEL_9;
    }
  }
  return result;
}

uint64_t glVertexAttribDivisorARB_UnpackThread(uint64_t a1, uint64_t a2)
{
  glVertexAttribDivisorARB_Exec(a1, *(_DWORD *)a2, *(_DWORD *)(a2 + 4));
  return 8;
}

unint64_t glDrawArrays_STD_Exec(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, __n128 a5, double a6, double a7)
{
  unsigned __int16 *v7;
  unint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v16;
  _BYTE *v17;
  int v18;
  int v19;
  uint64_t v20;
  char v21;
  int v22;
  __int16 v23;
  unsigned int v24;
  unsigned int v25;

  v7 = (unsigned __int16 *)(result + 26336);
  if (a2 >= 7)
  {
    if (*(_WORD *)(result + 29832))
      return result;
    v23 = 1280;
    goto LABEL_53;
  }
  v8 = result;
  v9 = (_BYTE *)(result + 17692);
  v10 = *(_QWORD *)(result + 26384);
  if ((~*(_DWORD *)(v10 + 904) & 0x900000) != 0 && *(_BYTE *)(result + 17699) != 0
    || (*(_QWORD *)(v10 + 904) & 0x100010000) == 0)
  {
    return result;
  }
  if ((int)a4 <= 0)
  {
    if ((a4 & 0x80000000) == 0 || *(_WORD *)(result + 29832))
      return result;
    v23 = 1281;
    goto LABEL_53;
  }
  v16 = *(_QWORD *)(result + 26432);
  if (*(__int16 *)(v16 + 42) != -1 && !*(_BYTE *)(v16 + 41))
  {
    v24 = a4;
    switch((int)a2)
    {
      case 0:
      case 2:
        break;
      case 1:
        v24 = a4 >> 1;
        break;
      case 3:
        v24 = a4 - 1;
        break;
      case 4:
        v24 = a4 / 3;
        break;
      case 5:
      case 6:
        v24 = a4 - 2;
        break;
      default:
        v24 = 0;
        break;
    }
    v25 = v24 + *(_DWORD *)(v16 + 176);
    if (v25 <= *(_DWORD *)(v16 + 180))
    {
      *(_DWORD *)(v16 + 176) = v25;
      goto LABEL_12;
    }
    if (*(_WORD *)(result + 29832))
      return result;
    v23 = 1282;
LABEL_53:
    *(_WORD *)(result + 29832) = v23;
    return result;
  }
LABEL_12:
  if (*v7 != 5375)
  {
    *(_QWORD *)(result + 26312) = 0;
    *v7 = 5375;
  }
  v17 = (_BYTE *)(result + 32481);
  if (*(_QWORD *)(v10 + 944))
  {
    v18 = 0;
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1532) |= 0x1000u;
  }
  else
  {
    v18 = *(_DWORD *)(result + 28652);
  }
  v19 = 1 << a2;
  if ((v18 & (1 << a2)) != 0 && (*(_BYTE *)(result + 28681) & 1) != 0 && (*(_BYTE *)(result + 28683) & 4) != 0)
  {
    if (*(_BYTE *)(result + 32482))
      return result;
  }
  else
  {
    result = gleDoDrawDispatchCore(result, 1 << a2, 1u, 4u, a5, a6, a7);
    if (!(_DWORD)result)
      return result;
  }
  if (!*v17)
  {
    v20 = *(_QWORD *)(v10 + 912);
LABEL_30:
    if (v20 && !*(_BYTE *)(v10 + 1216))
      result = gleSynchronizeBuffersInArray(v8, v10 + 40);
    v21 = 1;
    goto LABEL_34;
  }
  if (!*v9 && (*(_WORD *)(v10 + 922) & 0xFFFE) != 0x85BE || !*(_DWORD *)(v10 + 924) || !*(_QWORD *)(v10 + 928))
  {
    v20 = *(_QWORD *)(v10 + 912);
    if ((*(_QWORD *)(v10 + 904) & ~v20) != 0)
      goto LABEL_30;
  }
  result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD))(v8 + 29232))(*(_QWORD *)(v8 + 29016), 0, a2, a3, a4, *v7, *(_QWORD *)(v8 + 26312), 1, 0);
  if ((_DWORD)result)
    goto LABEL_43;
  v21 = 0;
LABEL_34:
  if ((*((_DWORD *)v7 + 579) & v19) != 0 && (*((_BYTE *)v7 + 2345) & 1) != 0 && (*((_BYTE *)v7 + 2347) & 2) != 0)
  {
    if (!v17[1])
    {
LABEL_38:
      if ((v21 & 1) == 0 && *(_QWORD *)(v10 + 912) && !*(_BYTE *)(v10 + 1216))
        gleSynchronizeBuffersInArray(v8, v10 + 40);
      result = gleDrawArraysOrElements_ExecCore(v8, a2, a3, a4, 0, v10 + 40, 1);
    }
  }
  else
  {
    result = gleDoDrawDispatchCore(v8, 1 << a2, 1u, 2u, a5, a6, a7);
    if ((_DWORD)result)
      goto LABEL_38;
  }
LABEL_43:
  v22 = *(_DWORD *)(*(_QWORD *)(v8 + 19296) + 316);
  if (*((_DWORD *)v7 + 870) != v22)
  {
    if (*(_QWORD *)(v8 + 28960))
    {
      result = gleInvalidateCurrentDrawFramebufferTextures(v8);
      v22 = *(_DWORD *)(*(_QWORD *)(v8 + 19296) + 316);
    }
    *((_DWORD *)v7 + 870) = v22;
  }
  return result;
}

_QWORD *glDrawArrays_PackThread(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return glDrawArraysInstanced_PackThread(a1, a2, a3, a4, 1);
}

_QWORD *glDrawArraysInstanced_PackThread(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9;
  uint64_t v10;
  __n128 v11;
  double v12;
  double v13;

  v9 = (unint64_t)result;
  v10 = result[3306];
  if (!v10 || (*(_QWORD *)(v10 + 272) & ~*(_QWORD *)(v10 + 264)) != 0)
  {
    if ((_DWORD)a4 && (_DWORD)a5)
    {
      ((void (*)(_QWORD *))result[3469])(result);
      if (*(unsigned __int8 *)(v9 + 32501) - 3 >= 2)
        return (_QWORD *)glDrawArraysInstanced_STD_Exec(v9, a2, a3, a4, a5, v11, v12, v13);
      else
        return (_QWORD *)glDrawArraysInstanced_STD_ES2Exec(v9, a2, a3, a4, a5, v11.n128_f64[0], v12, v13);
    }
  }
  else
  {
    result = gleAddCommand((uint64_t)result, (uint64_t)glDrawArrays_UnpackThread, 16);
    *(_DWORD *)result = a2;
    *((_DWORD *)result + 1) = a3;
    *((_DWORD *)result + 2) = a4;
    *((_DWORD *)result + 3) = a5;
  }
  return result;
}

uint64_t glDrawArrays_UnpackThread(unint64_t a1, unsigned int *a2, __n128 a3, double a4, double a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = *a2;
  v7 = a2[1];
  v8 = a2[2];
  v9 = a2[3];
  if (*(unsigned __int8 *)(a1 + 32501) - 3 >= 2)
    glDrawArraysInstanced_STD_Exec(a1, v6, v7, v8, v9, a3, a4, a5);
  else
    glDrawArraysInstanced_STD_ES2Exec(a1, v6, v7, v8, v9, a3.n128_f64[0], a4, a5);
  return 16;
}

unint64_t glDrawArraysInstanced_STD_Exec(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __n128 a6, double a7, double a8)
{
  unsigned __int16 *v9;
  unint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v18;
  _BYTE *v19;
  int v20;
  int v21;
  uint64_t v22;
  char v23;
  int v24;
  __int16 v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;

  v9 = (unsigned __int16 *)(result + 26336);
  if ((int)a5 <= 0)
  {
    if ((a5 & 0x80000000) == 0)
      return result;
LABEL_57:
    if (*(_WORD *)(result + 29832))
      return result;
    v25 = 1281;
    goto LABEL_59;
  }
  if (a2 >= 7)
  {
    if (*(_WORD *)(result + 29832))
      return result;
    v25 = 1280;
    goto LABEL_59;
  }
  v11 = result;
  v12 = (_BYTE *)(result + 17692);
  v13 = *(_QWORD *)(result + 26384);
  if ((~*(_DWORD *)(v13 + 904) & 0x900000) != 0 && *(_BYTE *)(result + 17699) != 0
    || (*(_QWORD *)(v13 + 904) & 0x100010000) == 0)
  {
    return result;
  }
  if ((int)a4 <= 0)
  {
    if ((a4 & 0x80000000) == 0)
      return result;
    goto LABEL_57;
  }
  v18 = *(_QWORD *)(result + 26432);
  if (*(__int16 *)(v18 + 42) != -1 && !*(_BYTE *)(v18 + 41))
  {
    v26 = a4;
    switch((int)a2)
    {
      case 0:
      case 2:
        break;
      case 1:
        v26 = a4 >> 1;
        break;
      case 3:
        v26 = a4 - 1;
        break;
      case 4:
        v26 = a4 / 3;
        break;
      case 5:
      case 6:
        v26 = a4 - 2;
        break;
      default:
        v26 = 0;
        break;
    }
    v27 = *(_DWORD *)(v18 + 176) + v26 * a5;
    if (v27 <= *(_DWORD *)(v18 + 180))
    {
      *(_DWORD *)(v18 + 176) = v27;
      goto LABEL_13;
    }
    if (*(_WORD *)(result + 29832))
      return result;
    v25 = 1282;
LABEL_59:
    *(_WORD *)(result + 29832) = v25;
    return result;
  }
LABEL_13:
  if (*v9 != 5375)
  {
    *(_QWORD *)(result + 26312) = 0;
    *v9 = 5375;
  }
  v19 = (_BYTE *)(result + 32481);
  if (*(_QWORD *)(v13 + 944))
  {
    v20 = 0;
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1532) |= 0x1000u;
  }
  else
  {
    v20 = *(_DWORD *)(result + 28652);
  }
  v21 = 1 << a2;
  if ((v20 & (1 << a2)) != 0 && (*(_BYTE *)(result + 28681) & 1) != 0 && (*(_BYTE *)(result + 28683) & 4) != 0)
  {
    if (*(_BYTE *)(result + 32482))
      return result;
  }
  else
  {
    result = gleDoDrawDispatchCore(result, 1 << a2, 1u, 4u, a6, a7, a8);
    if (!(_DWORD)result)
      return result;
  }
  v28 = v13 + 40;
  if (!*v19)
  {
    v22 = *(_QWORD *)(v13 + 912);
LABEL_31:
    if (v22 && !*(_BYTE *)(v13 + 1216))
      result = gleSynchronizeBuffersInArray(v11, v28);
    v23 = 1;
    goto LABEL_35;
  }
  if (!*v12 && (*(_WORD *)(v13 + 922) & 0xFFFE) != 0x85BE || !*(_DWORD *)(v13 + 924) || !*(_QWORD *)(v13 + 928))
  {
    v22 = *(_QWORD *)(v13 + 912);
    if ((*(_QWORD *)(v13 + 904) & ~v22) != 0)
      goto LABEL_31;
  }
  result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD, uint64_t))(v11 + 29232))(*(_QWORD *)(v11 + 29016), 0, a2, a3, a4, *v9, *(_QWORD *)(v11 + 26312), a5, 0, v28);
  if ((_DWORD)result)
    goto LABEL_44;
  v23 = 0;
LABEL_35:
  if ((*((_DWORD *)v9 + 579) & v21) != 0 && (*((_BYTE *)v9 + 2345) & 1) != 0 && (*((_BYTE *)v9 + 2347) & 2) != 0)
  {
    if (!v19[1])
    {
LABEL_39:
      if ((v23 & 1) == 0 && *(_QWORD *)(v13 + 912) && !*(_BYTE *)(v13 + 1216))
        gleSynchronizeBuffersInArray(v11, v28);
      result = gleDrawArraysOrElements_ExecCore(v11, a2, a3, a4, 0, v28, a5);
    }
  }
  else
  {
    result = gleDoDrawDispatchCore(v11, 1 << a2, 1u, 2u, a6, a7, a8);
    if ((_DWORD)result)
      goto LABEL_39;
  }
LABEL_44:
  v24 = *(_DWORD *)(*(_QWORD *)(v11 + 19296) + 316);
  if (*((_DWORD *)v9 + 870) != v24)
  {
    if (*(_QWORD *)(v11 + 28960))
    {
      result = gleInvalidateCurrentDrawFramebufferTextures(v11);
      v24 = *(_DWORD *)(*(_QWORD *)(v11 + 19296) + 316);
    }
    *((_DWORD *)v9 + 870) = v24;
  }
  return result;
}

uint64_t glDrawArraysInstanced_STD_ES2Exec(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7, double a8)
{
  unsigned __int16 *v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  int v22;
  __int16 v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;

  v9 = (unsigned __int16 *)(result + 26336);
  if ((int)a5 <= 0)
  {
    if ((a5 & 0x80000000) == 0)
      return result;
LABEL_50:
    if (*(_WORD *)(result + 29832))
      return result;
    v23 = 1281;
    goto LABEL_52;
  }
  if (a2 >= 7)
  {
    if (*(_WORD *)(result + 29832))
      return result;
    v23 = 1280;
    goto LABEL_52;
  }
  if ((int)a4 <= 0)
  {
    if ((a4 & 0x80000000) == 0)
      return result;
    goto LABEL_50;
  }
  v13 = result;
  v14 = *(_QWORD *)(result + 26384);
  v15 = *(_QWORD *)(result + 26432);
  if (*(__int16 *)(v15 + 42) != -1 && !*(_BYTE *)(v15 + 41))
  {
    v24 = a4;
    switch((int)a2)
    {
      case 0:
      case 2:
        break;
      case 1:
        v24 = a4 >> 1;
        break;
      case 3:
        v24 = a4 - 1;
        break;
      case 4:
        v24 = a4 / 3;
        break;
      case 5:
      case 6:
        v24 = a4 - 2;
        break;
      default:
        v24 = 0;
        break;
    }
    v25 = *(_DWORD *)(v15 + 176) + v24 * a5;
    if (v25 <= *(_DWORD *)(v15 + 180))
    {
      *(_DWORD *)(v15 + 176) = v25;
      goto LABEL_6;
    }
    if (*(_WORD *)(result + 29832))
      return result;
    v23 = 1282;
LABEL_52:
    *(_WORD *)(result + 29832) = v23;
    return result;
  }
LABEL_6:
  if (*v9 != 5375)
  {
    *(_QWORD *)(result + 26312) = 0;
    *v9 = 5375;
  }
  v16 = (_BYTE *)(result + 32481);
  if (*(_QWORD *)(v14 + 944))
  {
    v17 = 0;
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1532) |= 0x1000u;
  }
  else
  {
    v17 = *(_DWORD *)(result + 28652);
  }
  v18 = 1 << a2;
  if ((v17 & (1 << a2)) != 0 && (*(_BYTE *)(result + 28681) & 1) != 0 && (*(_BYTE *)(result + 28683) & 4) != 0)
  {
    if (*(_BYTE *)(result + 32482))
      return result;
  }
  else
  {
    result = gleDoDrawDispatchCoreES2(result, 1 << a2, 1u, 4u, a6, a7, a8);
    if (!(_DWORD)result)
      return result;
  }
  v26 = v14 + 40;
  if (!*v16)
  {
    v19 = *(_QWORD *)(v14 + 912);
LABEL_24:
    v20 = a3;
    if (v19 && !*(_BYTE *)(v14 + 1216))
      result = gleSynchronizeBuffersInArray(v13, v26);
    v21 = 1;
    goto LABEL_28;
  }
  if (!*(_BYTE *)(v13 + 17692) && (*(_WORD *)(v14 + 922) & 0xFFFE) != 0x85BE
    || !*(_DWORD *)(v14 + 924)
    || !*(_QWORD *)(v14 + 928))
  {
    v19 = *(_QWORD *)(v14 + 912);
    if ((*(_QWORD *)(v14 + 904) & ~v19) != 0)
      goto LABEL_24;
  }
  v20 = a3;
  result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD, uint64_t))(v13 + 29232))(*(_QWORD *)(v13 + 29016), 0, a2, a3, a4, *v9, *(_QWORD *)(v13 + 26312), a5, 0, v26);
  if ((_DWORD)result)
    goto LABEL_37;
  v21 = 0;
LABEL_28:
  if ((*((_DWORD *)v9 + 579) & v18) != 0 && (*((_BYTE *)v9 + 2345) & 1) != 0 && (*((_BYTE *)v9 + 2347) & 2) != 0)
  {
    if (!v16[1])
    {
LABEL_32:
      if ((v21 & 1) == 0 && *(_QWORD *)(v14 + 912) && !*(_BYTE *)(v14 + 1216))
        gleSynchronizeBuffersInArray(v13, v26);
      result = gleDrawArraysOrElements_ExecCore(v13, a2, v20, a4, 0, v26, a5);
    }
  }
  else
  {
    result = gleDoDrawDispatchCoreES2(v13, 1 << a2, 1u, 2u, a6, a7, a8);
    if ((_DWORD)result)
      goto LABEL_32;
  }
LABEL_37:
  v22 = *(_DWORD *)(*(_QWORD *)(v13 + 19296) + 316);
  if (*((_DWORD *)v9 + 870) != v22)
  {
    if (*(_QWORD *)(v13 + 28960))
    {
      result = gleInvalidateCurrentDrawFramebufferTextures(v13);
      v22 = *(_DWORD *)(*(_QWORD *)(v13 + 19296) + 316);
    }
    *((_DWORD *)v9 + 870) = v22;
  }
  return result;
}

_QWORD *glDrawElementsInstanced_PackThread(_QWORD *result, uint64_t a2, uint64_t a3, int a4, const void *a5, uint64_t a6)
{
  unint64_t v11;
  _QWORD *v12;
  __int16 *v13;
  __n128 v14;
  double v15;
  double v16;
  int v17;
  int v18;
  __int16 v19;
  int v20;
  _QWORD *v21;

  v11 = (unint64_t)result;
  v12 = (_QWORD *)result[3306];
  if (v12 && (v12[34] & ~v12[33]) == 0 && *v12)
  {
    result = gleAddCommand((uint64_t)result, (uint64_t)glDrawElements_UnpackThread, 32);
    *(_WORD *)result = a2;
    *((_WORD *)result + 1) = a4;
    result[2] = 0;
    result[3] = a5;
    *((_DWORD *)result + 1) = a3;
    *((_DWORD *)result + 2) = a6;
    return result;
  }
  v13 = (__int16 *)(result + 3729);
  if ((int)a3 <= 0)
  {
    if ((a3 & 0x80000000) == 0)
      return result;
LABEL_35:
    if (*v13)
      return result;
    v19 = 1281;
LABEL_27:
    *v13 = v19;
    return result;
  }
  if ((int)a6 <= 0)
  {
    if ((a6 & 0x80000000) == 0)
      return result;
    goto LABEL_35;
  }
  if ((v12[34] & ~v12[33]) == 0 && !*v12)
  {
    v17 = *((unsigned __int8 *)result + 32501);
    if ((v17 - 2) >= 3)
    {
      if (v17 == 1)
      {
        if (a2 > 0xE || (a2 - 7) <= 2)
          goto LABEL_25;
      }
      else if (a2 >= 0xE)
      {
        goto LABEL_25;
      }
    }
    else if (a2 >= 7)
    {
      goto LABEL_25;
    }
    switch(a4)
    {
      case 5125:
        v18 = 4;
        break;
      case 5123:
        v18 = 2;
        break;
      case 5121:
        v18 = 1;
        break;
      default:
LABEL_25:
        if (*v13)
          return result;
        v19 = 1280;
        goto LABEL_27;
    }
    v20 = v18 * a3;
    v21 = gleAddLargeCommand((uint64_t)result, (uint64_t)glDrawElements_UnpackThread, v18 * (int)a3 + 32);
    if (v21)
    {
      *(_WORD *)v21 = a2;
      *((_WORD *)v21 + 1) = a4;
      v21[2] = v20;
      v21[3] = 0;
      *((_DWORD *)v21 + 1) = a3;
      *((_DWORD *)v21 + 2) = a6;
      return memcpy(v21 + 4, a5, v20);
    }
  }
  (*(void (**)(unint64_t))(v11 + 27752))(v11);
  if (*(unsigned __int8 *)(v11 + 32501) - 3 >= 2)
    return (_QWORD *)glDrawElementsInstanced_STD_Exec(v11, a2, a3, a4, (uint64_t)a5, a6, v14, v15, v16);
  else
    return (_QWORD *)glDrawElementsInstanced_STD_ES2Exec(v11, a2, a3, a4, (uint64_t)a5, a6, v14.n128_f64[0], v15, v16);
}

uint64_t glDrawElements_UnpackThread(unint64_t a1, unsigned __int16 *a2, __n128 a3, double a4, double a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 26384) + 1232);
  v7 = *a2;
  v8 = *((unsigned int *)a2 + 1);
  v9 = a2[1];
  if (*(unsigned __int8 *)(a1 + 32501) - 3 >= 2)
  {
    if (v6)
      v11 = *((_QWORD *)a2 + 3);
    else
      v11 = (uint64_t)(a2 + 16);
    glDrawElementsInstanced_STD_Exec(a1, v7, v8, v9, v11, *((unsigned int *)a2 + 2), a3, a4, a5);
  }
  else
  {
    if (v6)
      v10 = *((_QWORD *)a2 + 3);
    else
      v10 = (uint64_t)(a2 + 16);
    glDrawElementsInstanced_STD_ES2Exec(a1, v7, v8, v9, v10, *((unsigned int *)a2 + 2), a3.n128_f64[0], a4, a5);
  }
  return (*((_DWORD *)a2 + 4) + 32);
}

unint64_t glDrawElementsInstanced_STD_Exec(unint64_t result, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, __n128 a7, double a8, double a9)
{
  unsigned __int16 *v10;
  unint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  _BYTE *v21;
  int v22;
  int v23;
  uint64_t v24;
  char v25;
  int v26;
  __int16 v27;
  unsigned int v28;
  unsigned int v29;

  v10 = (unsigned __int16 *)(result + 26336);
  if ((int)a6 <= 0)
  {
    if ((a6 & 0x80000000) == 0)
      return result;
  }
  else
  {
    if (a2 >= 7)
      goto LABEL_78;
    v12 = result;
    v13 = (_BYTE *)(result + 17692);
    v14 = *(_QWORD *)(result + 26384);
    if ((~*(_DWORD *)(v14 + 904) & 0x900000) != 0 && *(_BYTE *)(result + 17699) != 0
      || (*(_QWORD *)(v14 + 904) & 0x100010000) == 0)
    {
      return result;
    }
    if (a4 != 5123 && a4 != 5121 && a4 != 5125)
    {
LABEL_78:
      if (!*(_WORD *)(result + 29832))
      {
        v27 = 1280;
LABEL_65:
        *(_WORD *)(result + 29832) = v27;
        return result;
      }
      return result;
    }
    if ((int)a3 > 0)
    {
      v18 = *(_QWORD *)(result + 26432);
      if (*(__int16 *)(v18 + 42) != -1 && !*(_BYTE *)(v18 + 41))
      {
        v28 = a3;
        switch((int)a2)
        {
          case 0:
          case 2:
            break;
          case 1:
            v28 = a3 >> 1;
            break;
          case 3:
            v28 = a3 - 1;
            break;
          case 4:
            v28 = a3 / 3;
            break;
          case 5:
          case 6:
            v28 = a3 - 2;
            break;
          default:
            v28 = 0;
            break;
        }
        v29 = *(_DWORD *)(v18 + 176) + v28 * a6;
        if (v29 > *(_DWORD *)(v18 + 180))
        {
          if (!*(_WORD *)(result + 29832))
          {
            v27 = 1282;
            goto LABEL_65;
          }
          return result;
        }
        *(_DWORD *)(v18 + 176) = v29;
      }
      v19 = *(_QWORD *)(v14 + 1232);
      if (v19)
        a5 += *(_QWORD *)(v19 + 136);
      *(_QWORD *)(result + 26312) = a5;
      *v10 = a4;
      if ((a4 - 5121) > 4)
        v20 = 1;
      else
        v20 = dword_21B9A4E1C[a4 - 5121];
      v21 = (_BYTE *)(result + 32481);
      if (*(_QWORD *)(v14 + 944))
      {
        v22 = 0;
        *(_DWORD *)(result + 28652) = 0;
        *(_DWORD *)(result + 1532) |= 0x1000u;
      }
      else
      {
        v22 = *(_DWORD *)(result + 28652);
      }
      v23 = 1 << a2;
      if ((v22 & (1 << a2)) != 0
        && (v20 & *(_BYTE *)(result + 28681)) != 0
        && (*(_BYTE *)(result + 28683) & 4) != 0)
      {
        if (*(_BYTE *)(result + 32482))
          return result;
      }
      else
      {
        result = gleDoDrawDispatchCore(result, 1 << a2, v20, 4u, a7, a8, a9);
        if (!(_DWORD)result)
          return result;
      }
      if (*v21)
      {
        if ((*v13 || (*(_WORD *)(v14 + 922) & 0xFFFE) == 0x85BE) && *(_DWORD *)(v14 + 924) && *(_QWORD *)(v14 + 928)
          || (v24 = *(_QWORD *)(v14 + 912), (*(_QWORD *)(v14 + 904) & ~v24) == 0))
        {
          result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD))(v12 + 29232))(*(_QWORD *)(v12 + 29016), 1, a2, 0, a3, *v10, *(_QWORD *)(v12 + 26312), a6, 0);
          if ((_DWORD)result)
            goto LABEL_48;
          v25 = 0;
LABEL_39:
          if ((*((_DWORD *)v10 + 579) & v23) != 0
            && (*((_BYTE *)v10 + 2345) & 1) != 0
            && (*((_BYTE *)v10 + 2347) & 2) != 0)
          {
            if (!v21[1])
            {
LABEL_43:
              if ((v25 & 1) == 0 && *(_QWORD *)(v14 + 912) && !*(_BYTE *)(v14 + 1216))
                gleSynchronizeBuffersInArray(v12, v14 + 40);
              result = gleDrawArraysOrElements_ExecCore(v12, a2, 0, a3, 1, v14 + 40, a6);
            }
          }
          else
          {
            result = gleDoDrawDispatchCore(v12, 1 << a2, 1u, 2u, a7, a8, a9);
            if ((_DWORD)result)
              goto LABEL_43;
          }
LABEL_48:
          v26 = *(_DWORD *)(*(_QWORD *)(v12 + 19296) + 316);
          if (*((_DWORD *)v10 + 870) != v26)
          {
            if (*(_QWORD *)(v12 + 28960))
            {
              result = gleInvalidateCurrentDrawFramebufferTextures(v12);
              v26 = *(_DWORD *)(*(_QWORD *)(v12 + 19296) + 316);
            }
            *((_DWORD *)v10 + 870) = v26;
          }
          return result;
        }
      }
      else
      {
        v24 = *(_QWORD *)(v14 + 912);
      }
      if (v24 && !*(_BYTE *)(v14 + 1216))
        result = gleSynchronizeBuffersInArray(v12, v14 + 40);
      v25 = 1;
      goto LABEL_39;
    }
    if ((a3 & 0x80000000) == 0)
      return result;
  }
  if (!*(_WORD *)(result + 29832))
  {
    v27 = 1281;
    goto LABEL_65;
  }
  return result;
}

uint64_t glDrawElementsInstanced_STD_ES2Exec(uint64_t result, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, double a7, double a8, double a9)
{
  unsigned __int16 *v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  _BYTE *v19;
  int v20;
  int v21;
  uint64_t v22;
  char v23;
  int v24;
  __int16 v25;
  unsigned int v26;
  unsigned int v27;

  v10 = (unsigned __int16 *)(result + 26336);
  if ((int)a6 <= 0)
  {
    if ((a6 & 0x80000000) == 0)
      return result;
  }
  else
  {
    if (a2 >= 7)
      goto LABEL_53;
    v13 = result;
    v14 = *(_QWORD *)(result + 26384);
    v15 = *(_QWORD *)(result + 26432);
    v16 = *(unsigned __int16 *)(v15 + 42);
    if (v16 != 0xFFFF && !*(_BYTE *)(v15 + 41))
      goto LABEL_68;
    if (a4 != 5123 && a4 != 5121 && a4 != 5125)
    {
LABEL_53:
      if (!*(_WORD *)(result + 29832))
      {
        v25 = 1280;
LABEL_70:
        *(_WORD *)(result + 29832) = v25;
        return result;
      }
      return result;
    }
    if ((int)a3 > 0)
    {
      if (v16 == 0xFFFF || *(_BYTE *)(v15 + 41))
      {
LABEL_9:
        v17 = *(_QWORD *)(v14 + 1232);
        if (v17)
          a5 += *(_QWORD *)(v17 + 136);
        *(_QWORD *)(result + 26312) = a5;
        *v10 = a4;
        if ((a4 - 5121) > 4)
          v18 = 1;
        else
          v18 = dword_21B9A4E1C[a4 - 5121];
        v19 = (_BYTE *)(result + 32481);
        if (*(_QWORD *)(v14 + 944))
        {
          v20 = 0;
          *(_DWORD *)(result + 28652) = 0;
          *(_DWORD *)(result + 1532) |= 0x1000u;
        }
        else
        {
          v20 = *(_DWORD *)(result + 28652);
        }
        v21 = 1 << a2;
        if ((v20 & (1 << a2)) != 0
          && (v18 & *(_BYTE *)(result + 28681)) != 0
          && (*(_BYTE *)(result + 28683) & 4) != 0)
        {
          if (*(_BYTE *)(result + 32482))
            return result;
        }
        else
        {
          result = gleDoDrawDispatchCoreES2(result, 1 << a2, v18, 4u, a7, a8, a9);
          if (!(_DWORD)result)
            return result;
        }
        if (*v19)
        {
          if ((*(_BYTE *)(v13 + 17692) || (*(_WORD *)(v14 + 922) & 0xFFFE) == 0x85BE)
            && *(_DWORD *)(v14 + 924)
            && *(_QWORD *)(v14 + 928)
            || (v22 = *(_QWORD *)(v14 + 912), (*(_QWORD *)(v14 + 904) & ~v22) == 0))
          {
            result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD))(v13 + 29232))(*(_QWORD *)(v13 + 29016), 1, a2, 0, a3, *v10, *(_QWORD *)(v13 + 26312), a6, 0);
            if ((_DWORD)result)
              goto LABEL_43;
            v23 = 0;
LABEL_34:
            if ((*((_DWORD *)v10 + 579) & v21) != 0
              && (*((_BYTE *)v10 + 2345) & 1) != 0
              && (*((_BYTE *)v10 + 2347) & 2) != 0)
            {
              if (!v19[1])
              {
LABEL_38:
                if ((v23 & 1) == 0 && *(_QWORD *)(v14 + 912) && !*(_BYTE *)(v14 + 1216))
                  gleSynchronizeBuffersInArray(v13, v14 + 40);
                result = gleDrawArraysOrElements_ExecCore(v13, a2, 0, a3, 1, v14 + 40, a6);
              }
            }
            else
            {
              result = gleDoDrawDispatchCoreES2(v13, 1 << a2, 1u, 2u, a7, a8, a9);
              if ((_DWORD)result)
                goto LABEL_38;
            }
LABEL_43:
            v24 = *(_DWORD *)(*(_QWORD *)(v13 + 19296) + 316);
            if (*((_DWORD *)v10 + 870) != v24)
            {
              if (*(_QWORD *)(v13 + 28960))
              {
                result = gleInvalidateCurrentDrawFramebufferTextures(v13);
                v24 = *(_DWORD *)(*(_QWORD *)(v13 + 19296) + 316);
              }
              *((_DWORD *)v10 + 870) = v24;
            }
            return result;
          }
        }
        else
        {
          v22 = *(_QWORD *)(v14 + 912);
        }
        if (v22 && !*(_BYTE *)(v14 + 1216))
          result = gleSynchronizeBuffersInArray(v13, v14 + 40);
        v23 = 1;
        goto LABEL_34;
      }
      v26 = a3;
      switch((int)a2)
      {
        case 0:
        case 2:
          break;
        case 1:
          v26 = a3 >> 1;
          break;
        case 3:
          v26 = a3 - 1;
          break;
        case 4:
          v26 = a3 / 3;
          break;
        case 5:
        case 6:
          v26 = a3 - 2;
          break;
        default:
          v26 = 0;
          break;
      }
      v27 = *(_DWORD *)(v15 + 176) + v26 * a6;
      if (v27 <= *(_DWORD *)(v15 + 180))
      {
        *(_DWORD *)(v15 + 176) = v27;
        goto LABEL_9;
      }
LABEL_68:
      if (!*(_WORD *)(result + 29832))
      {
        v25 = 1282;
        goto LABEL_70;
      }
      return result;
    }
    if ((a3 & 0x80000000) == 0)
      return result;
  }
  if (!*(_WORD *)(result + 29832))
  {
    v25 = 1281;
    goto LABEL_70;
  }
  return result;
}

_QWORD *glDrawElements_PackThread(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, const void *a5)
{
  return glDrawElementsInstanced_PackThread(a1, a2, a3, a4, a5, 1);
}

_QWORD *glDrawRangeElements_PackThread(_QWORD *result, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5, int a6, const void *a7)
{
  if (a4 >= a3)
    return glDrawElementsInstanced_PackThread(result, a2, a5, a6, a7, 1);
  if (!*((_WORD *)result + 14916))
    *((_WORD *)result + 14916) = 1281;
  return result;
}

unint64_t glDrawArrays_ES2Exec(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, __n128 a5, double a6, double a7)
{
  unsigned __int16 *v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  __int16 v17;
  unsigned int v18;
  unsigned int v19;

  v7 = (unsigned __int16 *)(result + 26336);
  if (a2 >= 7)
  {
    if (*(_WORD *)(result + 29832))
      return result;
    v17 = 1280;
    goto LABEL_31;
  }
  if ((int)a4 <= 0)
  {
    if ((a4 & 0x80000000) == 0 || *(_WORD *)(result + 29832))
      return result;
    v17 = 1281;
    goto LABEL_31;
  }
  v11 = result;
  v12 = *(_QWORD *)(result + 26384);
  v13 = *(_QWORD *)(result + 26432);
  if (*(__int16 *)(v13 + 42) != -1 && !*(_BYTE *)(v13 + 41))
  {
    v18 = a4;
    switch((int)a2)
    {
      case 0:
      case 2:
        break;
      case 1:
        v18 = a4 >> 1;
        break;
      case 3:
        v18 = a4 - 1;
        break;
      case 4:
        v18 = a4 / 3;
        break;
      case 5:
      case 6:
        v18 = a4 - 2;
        break;
      default:
        v18 = 0;
        break;
    }
    v19 = v18 + *(_DWORD *)(v13 + 176);
    if (v19 <= *(_DWORD *)(v13 + 180))
    {
      *(_DWORD *)(v13 + 176) = v19;
      goto LABEL_5;
    }
    if (*(_WORD *)(result + 29832))
      return result;
    v17 = 1282;
LABEL_31:
    *(_WORD *)(result + 29832) = v17;
    return result;
  }
LABEL_5:
  if (*v7 != 5375)
  {
    *(_QWORD *)(result + 26312) = 0;
    *v7 = 5375;
  }
  result = gleDrawArraysOrElements_Entries_Body(result, 3, a2, 1u, v12 + 40, a5, a6, a7);
  if ((_DWORD)result != 2)
  {
    v14 = result;
    if (!(_DWORD)result
      || (result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD))(v11 + 29232))(*(_QWORD *)(v11 + 29016), 0, a2, a3, a4, *v7, *(_QWORD *)(v11 + 26312), 1, 0), !(_DWORD)result))
    {
      v15 = (1 << a2);
      if ((*((_DWORD *)v7 + 579) & v15) != 0
        && (*((_BYTE *)v7 + 2345) & 1) != 0
        && (*((_BYTE *)v7 + 2347) & 2) != 0)
      {
        if (!*(_BYTE *)(v11 + 32482))
        {
LABEL_14:
          if (v14 && *(_QWORD *)(v12 + 912) && !*(_BYTE *)(v12 + 1216))
            gleSynchronizeBuffersInArray(v11, v12 + 40);
          result = gleDrawArraysOrElements_ExecCore(v11, a2, a3, a4, 0, v12 + 40, 1);
        }
      }
      else
      {
        result = gleDoDrawDispatchCoreES2(v11, v15);
        if ((_DWORD)result)
          goto LABEL_14;
      }
    }
    v16 = *(_DWORD *)(*(_QWORD *)(v11 + 19296) + 316);
    if (*((_DWORD *)v7 + 870) != v16)
    {
      if (*(_QWORD *)(v11 + 28960))
      {
        result = gleInvalidateCurrentDrawFramebufferTextures(v11);
        v16 = *(_DWORD *)(*(_QWORD *)(v11 + 19296) + 316);
      }
      *((_DWORD *)v7 + 870) = v16;
    }
  }
  return result;
}

unint64_t glDrawElements_ES2Exec(unint64_t result, uint64_t a2, uint64_t a3, int a4, uint64_t a5, __n128 a6, double a7, double a8)
{
  unsigned __int16 *v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  __int16 v20;
  unsigned int v21;
  unsigned int v22;

  v8 = (unsigned __int16 *)(result + 26336);
  if (a2 >= 7)
  {
LABEL_34:
    if (!*(_WORD *)(result + 29832))
    {
      v20 = 1280;
LABEL_49:
      *(_WORD *)(result + 29832) = v20;
      return result;
    }
    return result;
  }
  v11 = result;
  v12 = *(_QWORD *)(result + 26384);
  v13 = *(_QWORD *)(result + 26432);
  v14 = *(unsigned __int16 *)(v13 + 42);
  if (v14 != 0xFFFF && !*(_BYTE *)(v13 + 41))
    goto LABEL_47;
  if (a4 != 5123 && a4 != 5121 && a4 != 5125)
    goto LABEL_34;
  if ((int)a3 > 0)
  {
    if (v14 == 0xFFFF || *(_BYTE *)(v13 + 41))
    {
LABEL_8:
      v15 = *(_QWORD *)(v12 + 1232);
      if (v15)
        a5 += *(_QWORD *)(v15 + 136);
      *(_QWORD *)(result + 26312) = a5;
      *v8 = a4;
      if ((a4 - 5121) > 4)
        LOBYTE(v16) = 1;
      else
        v16 = dword_21B9A4E1C[a4 - 5121];
      result = gleDrawArraysOrElements_Entries_Body(result, 3, a2, v16, v12 + 40, a6, a7, a8);
      if ((_DWORD)result == 2)
        return result;
      v17 = result;
      if (!(_DWORD)result
        || (result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD))(v11 + 29232))(*(_QWORD *)(v11 + 29016), 1, a2, 0, a3, *v8, *(_QWORD *)(v11 + 26312), 1, 0), !(_DWORD)result))
      {
        v18 = (1 << a2);
        if ((*((_DWORD *)v8 + 579) & v18) != 0
          && (*((_BYTE *)v8 + 2345) & 1) != 0
          && (*((_BYTE *)v8 + 2347) & 2) != 0)
        {
          if (!*(_BYTE *)(v11 + 32482))
          {
LABEL_20:
            if (v17 && *(_QWORD *)(v12 + 912) && !*(_BYTE *)(v12 + 1216))
              gleSynchronizeBuffersInArray(v11, v12 + 40);
            result = gleDrawArraysOrElements_ExecCore(v11, a2, 0, a3, 1, v12 + 40, 1);
          }
        }
        else
        {
          result = gleDoDrawDispatchCoreES2(v11, v18);
          if ((_DWORD)result)
            goto LABEL_20;
        }
      }
      v19 = *(_DWORD *)(*(_QWORD *)(v11 + 19296) + 316);
      if (*((_DWORD *)v8 + 870) != v19)
      {
        if (*(_QWORD *)(v11 + 28960))
        {
          result = gleInvalidateCurrentDrawFramebufferTextures(v11);
          v19 = *(_DWORD *)(*(_QWORD *)(v11 + 19296) + 316);
        }
        *((_DWORD *)v8 + 870) = v19;
      }
      return result;
    }
    v21 = a3;
    switch((int)a2)
    {
      case 0:
      case 2:
        break;
      case 1:
        v21 = a3 >> 1;
        break;
      case 3:
        v21 = a3 - 1;
        break;
      case 4:
        v21 = a3 / 3;
        break;
      case 5:
      case 6:
        v21 = a3 - 2;
        break;
      default:
        v21 = 0;
        break;
    }
    v22 = v21 + *(_DWORD *)(v13 + 176);
    if (v22 <= *(_DWORD *)(v13 + 180))
    {
      *(_DWORD *)(v13 + 176) = v22;
      goto LABEL_8;
    }
LABEL_47:
    if (!*(_WORD *)(result + 29832))
    {
      v20 = 1282;
      goto LABEL_49;
    }
    return result;
  }
  if ((a3 & 0x80000000) != 0 && !*(_WORD *)(result + 29832))
  {
    v20 = 1281;
    goto LABEL_49;
  }
  return result;
}

unint64_t glDrawRangeElements_ES2Exec(unint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5, int a6, uint64_t a7, __n128 a8, double a9, double a10)
{
  unint64_t v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  __int16 v21;

  v10 = result + 26320;
  if (a2 >= 7)
    goto LABEL_43;
  v13 = result;
  v14 = *(_QWORD *)(result + 26384);
  v15 = *(_QWORD *)(result + 26432);
  if (*(__int16 *)(v15 + 42) != -1 && !*(_BYTE *)(v15 + 41))
  {
    if (!*(_WORD *)(result + 29832))
    {
      v21 = 1282;
      goto LABEL_40;
    }
    return result;
  }
  if (a6 != 5123 && a6 != 5121 && a6 != 5125)
  {
LABEL_43:
    if (!*(_WORD *)(result + 29832))
    {
      v21 = 1280;
LABEL_40:
      *(_WORD *)(result + 29832) = v21;
      return result;
    }
    return result;
  }
  if ((int)a5 <= 0)
  {
    if ((a5 & 0x80000000) == 0)
      return result;
  }
  else if (a4 >= a3)
  {
    v16 = *(_QWORD *)(v14 + 1232);
    if (v16)
      a7 += *(_QWORD *)(v16 + 136);
    *(_QWORD *)(result + 26312) = a7;
    *(_WORD *)(result + 26336) = a6;
    *(_DWORD *)v10 = a3;
    *(_DWORD *)(result + 26324) = a4;
    if ((a6 - 5121) > 4)
      LOBYTE(v17) = 1;
    else
      v17 = dword_21B9A4E1C[a6 - 5121];
    result = gleDrawArraysOrElements_Entries_Body(result, 3, a2, v17, v14 + 40, a8, a9, a10);
    if ((_DWORD)result == 2)
      return result;
    v18 = result;
    if (!(_DWORD)result
      || (result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD))(v13 + 29232))(*(_QWORD *)(v13 + 29016), 3, a2, 0, a5, *(unsigned __int16 *)(v10 + 16), *(_QWORD *)(v13 + 26312), 1, 0), !(_DWORD)result))
    {
      v19 = (1 << a2);
      if ((*(_DWORD *)(v10 + 2332) & v19) != 0
        && (*(_BYTE *)(v10 + 2361) & 1) != 0
        && (*(_BYTE *)(v10 + 2363) & 2) != 0)
      {
        if (!*(_BYTE *)(v13 + 32482))
        {
LABEL_19:
          if (v18 && *(_QWORD *)(v14 + 912) && !*(_BYTE *)(v14 + 1216))
            gleSynchronizeBuffersInArray(v13, v14 + 40);
          result = gleDrawArraysOrElements_ExecCore(v13, a2, 0, a5, 3, v14 + 40, 1);
        }
      }
      else
      {
        result = gleDoDrawDispatchCoreES2(v13, v19);
        if ((_DWORD)result)
          goto LABEL_19;
      }
    }
    v20 = *(_DWORD *)(*(_QWORD *)(v13 + 19296) + 316);
    if (*(_DWORD *)(v10 + 3496) != v20)
    {
      if (*(_QWORD *)(v13 + 28960))
      {
        result = gleInvalidateCurrentDrawFramebufferTextures(v13);
        v20 = *(_DWORD *)(*(_QWORD *)(v13 + 19296) + 316);
      }
      *(_DWORD *)(v10 + 3496) = v20;
    }
    return result;
  }
  if (!*(_WORD *)(result + 29832))
  {
    v21 = 1281;
    goto LABEL_40;
  }
  return result;
}

unint64_t glDrawArraysInstanced_ES2Exec(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __n128 a6, double a7, double a8)
{
  unsigned __int16 *v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  __int16 v19;
  unsigned int v20;
  unsigned int v21;

  v9 = (unsigned __int16 *)(result + 26336);
  if ((int)a5 <= 0)
  {
    if ((a5 & 0x80000000) == 0)
      return result;
LABEL_32:
    if (*(_WORD *)(result + 29832))
      return result;
    v19 = 1281;
    goto LABEL_34;
  }
  if (a2 >= 7)
  {
    if (*(_WORD *)(result + 29832))
      return result;
    v19 = 1280;
    goto LABEL_34;
  }
  if ((int)a4 <= 0)
  {
    if ((a4 & 0x80000000) == 0)
      return result;
    goto LABEL_32;
  }
  v13 = result;
  v14 = *(_QWORD *)(result + 26384);
  v15 = *(_QWORD *)(result + 26432);
  if (*(__int16 *)(v15 + 42) != -1 && !*(_BYTE *)(v15 + 41))
  {
    v20 = a4;
    switch((int)a2)
    {
      case 0:
      case 2:
        break;
      case 1:
        v20 = a4 >> 1;
        break;
      case 3:
        v20 = a4 - 1;
        break;
      case 4:
        v20 = a4 / 3;
        break;
      case 5:
      case 6:
        v20 = a4 - 2;
        break;
      default:
        v20 = 0;
        break;
    }
    v21 = *(_DWORD *)(v15 + 176) + v20 * a5;
    if (v21 <= *(_DWORD *)(v15 + 180))
    {
      *(_DWORD *)(v15 + 176) = v21;
      goto LABEL_6;
    }
    if (*(_WORD *)(result + 29832))
      return result;
    v19 = 1282;
LABEL_34:
    *(_WORD *)(result + 29832) = v19;
    return result;
  }
LABEL_6:
  if (*v9 != 5375)
  {
    *(_QWORD *)(result + 26312) = 0;
    *v9 = 5375;
  }
  result = gleDrawArraysOrElements_Entries_Body(result, 3, a2, 1u, v14 + 40, a6, a7, a8);
  if ((_DWORD)result != 2)
  {
    v16 = result;
    if (!(_DWORD)result
      || (result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD))(v13 + 29232))(*(_QWORD *)(v13 + 29016), 0, a2, a3, a4, *v9, *(_QWORD *)(v13 + 26312), a5, 0), !(_DWORD)result))
    {
      v17 = (1 << a2);
      if ((*((_DWORD *)v9 + 579) & v17) != 0
        && (*((_BYTE *)v9 + 2345) & 1) != 0
        && (*((_BYTE *)v9 + 2347) & 2) != 0)
      {
        if (!*(_BYTE *)(v13 + 32482))
        {
LABEL_15:
          if (v16 && *(_QWORD *)(v14 + 912) && !*(_BYTE *)(v14 + 1216))
            gleSynchronizeBuffersInArray(v13, v14 + 40);
          result = gleDrawArraysOrElements_ExecCore(v13, a2, a3, a4, 0, v14 + 40, a5);
        }
      }
      else
      {
        result = gleDoDrawDispatchCoreES2(v13, v17);
        if ((_DWORD)result)
          goto LABEL_15;
      }
    }
    v18 = *(_DWORD *)(*(_QWORD *)(v13 + 19296) + 316);
    if (*((_DWORD *)v9 + 870) != v18)
    {
      if (*(_QWORD *)(v13 + 28960))
      {
        result = gleInvalidateCurrentDrawFramebufferTextures(v13);
        v18 = *(_DWORD *)(*(_QWORD *)(v13 + 19296) + 316);
      }
      *((_DWORD *)v9 + 870) = v18;
    }
  }
  return result;
}

unint64_t glDrawElementsInstanced_ES2Exec(unint64_t result, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, __n128 a7, double a8, double a9)
{
  unsigned __int16 *v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  __int16 v22;
  unsigned int v23;
  unsigned int v24;

  v10 = (unsigned __int16 *)(result + 26336);
  if ((int)a6 <= 0)
  {
    if ((a6 & 0x80000000) == 0)
      return result;
  }
  else
  {
    if (a2 >= 7)
      goto LABEL_35;
    v13 = result;
    v14 = *(_QWORD *)(result + 26384);
    v15 = *(_QWORD *)(result + 26432);
    v16 = *(unsigned __int16 *)(v15 + 42);
    if (v16 != 0xFFFF && !*(_BYTE *)(v15 + 41))
      goto LABEL_50;
    if (a4 != 5123 && a4 != 5121 && a4 != 5125)
    {
LABEL_35:
      if (!*(_WORD *)(result + 29832))
      {
        v22 = 1280;
LABEL_52:
        *(_WORD *)(result + 29832) = v22;
        return result;
      }
      return result;
    }
    if ((int)a3 > 0)
    {
      if (v16 == 0xFFFF || *(_BYTE *)(v15 + 41))
      {
LABEL_9:
        v17 = *(_QWORD *)(v14 + 1232);
        if (v17)
          a5 += *(_QWORD *)(v17 + 136);
        *(_QWORD *)(result + 26312) = a5;
        *v10 = a4;
        if ((a4 - 5121) > 4)
          LOBYTE(v18) = 1;
        else
          v18 = dword_21B9A4E1C[a4 - 5121];
        result = gleDrawArraysOrElements_Entries_Body(result, 3, a2, v18, v14 + 40, a7, a8, a9);
        if ((_DWORD)result == 2)
          return result;
        v19 = result;
        if (!(_DWORD)result
          || (result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD))(v13 + 29232))(*(_QWORD *)(v13 + 29016), 1, a2, 0, a3, *v10, *(_QWORD *)(v13 + 26312), a6, 0), !(_DWORD)result))
        {
          v20 = (1 << a2);
          if ((*((_DWORD *)v10 + 579) & v20) != 0
            && (*((_BYTE *)v10 + 2345) & 1) != 0
            && (*((_BYTE *)v10 + 2347) & 2) != 0)
          {
            if (!*(_BYTE *)(v13 + 32482))
            {
LABEL_21:
              if (v19 && *(_QWORD *)(v14 + 912) && !*(_BYTE *)(v14 + 1216))
                gleSynchronizeBuffersInArray(v13, v14 + 40);
              result = gleDrawArraysOrElements_ExecCore(v13, a2, 0, a3, 1, v14 + 40, a6);
            }
          }
          else
          {
            result = gleDoDrawDispatchCoreES2(v13, v20);
            if ((_DWORD)result)
              goto LABEL_21;
          }
        }
        v21 = *(_DWORD *)(*(_QWORD *)(v13 + 19296) + 316);
        if (*((_DWORD *)v10 + 870) != v21)
        {
          if (*(_QWORD *)(v13 + 28960))
          {
            result = gleInvalidateCurrentDrawFramebufferTextures(v13);
            v21 = *(_DWORD *)(*(_QWORD *)(v13 + 19296) + 316);
          }
          *((_DWORD *)v10 + 870) = v21;
        }
        return result;
      }
      v23 = a3;
      switch((int)a2)
      {
        case 0:
        case 2:
          break;
        case 1:
          v23 = a3 >> 1;
          break;
        case 3:
          v23 = a3 - 1;
          break;
        case 4:
          v23 = a3 / 3;
          break;
        case 5:
        case 6:
          v23 = a3 - 2;
          break;
        default:
          v23 = 0;
          break;
      }
      v24 = *(_DWORD *)(v15 + 176) + v23 * a6;
      if (v24 <= *(_DWORD *)(v15 + 180))
      {
        *(_DWORD *)(v15 + 176) = v24;
        goto LABEL_9;
      }
LABEL_50:
      if (!*(_WORD *)(result + 29832))
      {
        v22 = 1282;
        goto LABEL_52;
      }
      return result;
    }
    if ((a3 & 0x80000000) == 0)
      return result;
  }
  if (!*(_WORD *)(result + 29832))
  {
    v22 = 1281;
    goto LABEL_52;
  }
  return result;
}

uint64_t gleUpdateDrawArraysFuncs(uint64_t result)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  __int16 v19;

  v1 = *(unsigned __int16 *)(result + 26340);
  if (!*(_WORD *)(result + 26340))
    return result;
  if (!*(_BYTE *)(result + 32481))
  {
    if (v1 == 1)
      return result;
    goto LABEL_31;
  }
  v2 = *(_QWORD *)(result + 26384);
  if ((*(_BYTE *)(result + 17692) || (*(_WORD *)(v2 + 922) & 0xFFFE) == 0x85BE)
    && *(_DWORD *)(v2 + 924)
    && *(_QWORD *)(v2 + 928))
  {
    if (v1 != 1)
      return result;
    goto LABEL_11;
  }
  v3 = *(_QWORD *)(v2 + 904);
  v4 = *(_QWORD *)(v2 + 912) & v3;
  if (v1 != 1)
  {
    if (v3 == v4)
      return result;
LABEL_31:
    v12 = *(unsigned __int8 *)(result + 32501);
    v13 = *(_QWORD **)(result + 28984);
    v14 = *(_QWORD **)(result + 28976);
    if (v13[65])
      v15 = *(_QWORD *)(result + 28984);
    else
      v15 = *(_QWORD *)(result + 28976);
    if ((v12 - 3) > 1)
    {
      *(_QWORD *)(v15 + 520) = glDrawArrays_IMM_Exec;
      if (!v13[67])
        v13 = v14;
      v13[67] = glDrawElements_IMM_Exec;
    }
    else
    {
      *(_QWORD *)(v15 + 520) = glDrawArrays_IMM_ES2Exec;
      if (v13[67])
        v16 = v13;
      else
        v16 = v14;
      v16[67] = glDrawElements_IMM_ES2Exec;
      if (v13[762])
        v17 = v13;
      else
        v17 = v14;
      v17[762] = glDrawArraysInstanced_IMM_ES2Exec;
      if (v13[763])
        v18 = v13;
      else
        v18 = v14;
      v18[763] = glDrawElementsInstanced_IMM_ES2Exec;
      if (v12 == 4)
      {
        if (!v13[405])
          v13 = v14;
        v13[405] = glDrawRangeElements_IMM_ES2Exec;
      }
    }
    v19 = 1;
    goto LABEL_56;
  }
  if (v3 == v4)
  {
LABEL_11:
    v5 = *(unsigned __int8 *)(result + 32501);
    v6 = *(_QWORD **)(result + 28984);
    v7 = *(_QWORD **)(result + 28976);
    if (v6[65])
      v8 = *(_QWORD *)(result + 28984);
    else
      v8 = *(_QWORD *)(result + 28976);
    if ((v5 - 3) > 1)
    {
      *(_QWORD *)(v8 + 520) = glDrawArrays_ACC_Exec;
      if (!v6[67])
        v6 = v7;
      v6[67] = glDrawElements_ACC_Exec;
    }
    else
    {
      *(_QWORD *)(v8 + 520) = glDrawArrays_ACC_ES2Exec;
      if (v6[67])
        v9 = v6;
      else
        v9 = v7;
      v9[67] = glDrawElements_ACC_ES2Exec;
      if (v6[762])
        v10 = v6;
      else
        v10 = v7;
      v10[762] = glDrawArraysInstanced_ACC_ES2Exec;
      if (v6[763])
        v11 = v6;
      else
        v11 = v7;
      v11[763] = glDrawElementsInstanced_ACC_ES2Exec;
      if (v5 == 4)
      {
        if (!v6[405])
          v6 = v7;
        v6[405] = glDrawRangeElements_ACC_ES2Exec;
      }
    }
    v19 = 2;
LABEL_56:
    *(_WORD *)(result + 26340) = v19;
  }
  return result;
}

uint64_t gleResetDrawArraysFuncs(uint64_t result)
{
  int v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;

  if (!*(_QWORD *)(result + 27648) && *(_WORD *)(result + 26340))
  {
    v1 = *(unsigned __int8 *)(result + 32501);
    v2 = *(_QWORD **)(result + 28984);
    v3 = *(_QWORD **)(result + 28976);
    if (v2[65])
      v4 = *(_QWORD *)(result + 28984);
    else
      v4 = *(_QWORD *)(result + 28976);
    if ((v1 - 3) > 1)
    {
      *(_QWORD *)(v4 + 520) = glDrawArrays_Exec;
      if (!v2[67])
        v2 = v3;
      v2[67] = glDrawElements_Exec;
    }
    else
    {
      *(_QWORD *)(v4 + 520) = glDrawArrays_ES2Exec;
      if (v2[67])
        v5 = v2;
      else
        v5 = v3;
      v5[67] = glDrawElements_ES2Exec;
      if (v2[762])
        v6 = v2;
      else
        v6 = v3;
      v6[762] = glDrawArraysInstanced_ES2Exec;
      if (v2[763])
        v7 = v2;
      else
        v7 = v3;
      v7[763] = glDrawElementsInstanced_ES2Exec;
      if (v1 == 4)
      {
        if (!v2[405])
          v2 = v3;
        v2[405] = glDrawRangeElements_ES2Exec;
      }
    }
    *(_WORD *)(result + 26340) = 0;
  }
  return result;
}

uint64_t gleDrawArraysOrElements_ExecCore(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7)
{
  uint64_t v11;
  __int16 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, int, int);
  int v20;
  uint64_t v21;
  int *v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  unsigned __int8 *v33;
  uint64_t v34;
  int v35;
  unsigned __int16 *v36;
  uint64_t v37;
  int v38;
  int *v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  int *v44;
  unsigned int v45;
  uint64_t v46;
  int *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  _OWORD v57[8];
  uint64_t v58;

  v11 = result;
  v58 = *MEMORY[0x24BDAC8D0];
  v12 = (__int16 *)(result + 26124);
  if (a5 == 3)
  {
    v13 = *(_QWORD *)(result + 29032);
    if (*(_BYTE *)(v13 + 105))
    {
      if (*(_BYTE *)(result + 32481))
      {
        v14 = *(unsigned int *)(result + 26320);
        v15 = *(unsigned int *)(result + 26324);
        v16 = v15 - v14;
        if ((int)v15 - (int)v14 < (int)a4
          && v16 >= *(_DWORD *)(v13 + 28)
          && v16 < *(_DWORD *)(v13 + 32)
          && *(_DWORD *)(v13 + 36) > (int)a4)
        {
          v54 = *(_QWORD *)(result + 26312);
          v17 = *(unsigned __int16 *)(result + 26336);
          result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(result + 29216))(*(_QWORD *)(result + 29016), a2, v14, v15, v17, a4);
          if (result)
          {
            v56 = *(_QWORD *)(v11 + 28152);
            v18 = *(_QWORD *)(v11 + 26008);
            *(_QWORD *)(v11 + 28152) = gleNoopFlushFunc;
            *(_QWORD *)(v11 + 26312) = 0;
            v12[106] = 5375;
            if (v12[107] == 5375)
            {
              v19 = *(uint64_t (**)(uint64_t, int, int))(v11 + 26184);
            }
            else
            {
              v19 = gleSetVertexArrayFunc;
              *(_QWORD *)(v11 + 26184) = gleSetVertexArrayFunc;
              *(_QWORD *)(v11 + 26192) = gleSetVertexArrayFunc;
              v12[107] = 5375;
            }
            v49 = v16 + 1;
            *((_DWORD *)v12 + 635) = v49;
            v50 = v12[5];
            *(_QWORD *)(v11 + 26008) = result;
            *(_QWORD *)(v11 + 26040) = result + v49 * v50;
            v19(v11, v14, a3);
            result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 29224))(*(_QWORD *)(v11 + 29016), a2, v14, v15, v17, a4, v54);
            *(_QWORD *)(v11 + 26008) = v18;
            *(_QWORD *)(v11 + 28152) = v56;
            goto LABEL_71;
          }
        }
      }
    }
  }
  if ((a4 & 0x80000000) == 0)
  {
    v20 = (unsigned __int16)v12[106];
    if ((unsigned __int16)v12[107] != v20)
    {
      *(_QWORD *)(v11 + 26184) = gleSetVertexArrayFunc;
      *(_QWORD *)(v11 + 26192) = gleSetVertexArrayFunc;
      v12[107] = v20;
    }
    memset(v57, 0, sizeof(v57));
    if (a7 >= 2)
    {
      v21 = 0;
      v22 = (int *)(a6 + 488);
      do
      {
        v23 = *v22;
        v22 += 6;
        if (v23)
          *(_QWORD *)((char *)v57 + v21) = *(_QWORD *)(a6 + 1048 + v21);
        v21 += 8;
      }
      while (v21 != 128);
    }
    v53 = v11 + 28024;
    v51 = a6;
    v52 = (int *)(a6 + 496);
    v24 = a6 + 1048;
LABEL_20:
    if (*(_BYTE *)(v11 + 17716) && v12[106] != 5375)
    {
      v25 = 0;
    }
    else
    {
      *((_DWORD *)v12 + 635) = a4;
      v12[1269] = a2;
      v12[1268] = a2;
      result = (*(uint64_t (**)(uint64_t))(v53 + 8 * a2))(v11);
      v25 = a4;
    }
    v26 = 0;
    while (1)
    {
      v27 = v25 - v26;
      if (v25 != (_DWORD)v26)
        goto LABEL_25;
      if ((_DWORD)v26 == (_DWORD)a4)
        goto LABEL_55;
      v32 = (unsigned __int16)v12[106];
      if (v32 == 5123)
      {
        if ((int)v26 >= (int)a4)
          goto LABEL_53;
        v36 = (unsigned __int16 *)(*(_QWORD *)(v11 + 26312) + 2 * (int)v26);
        v37 = (int)a4 - (uint64_t)(int)v26;
        v25 = v26;
        while (1)
        {
          v38 = *v36++;
          if (v38 == (unsigned __int16)*(_DWORD *)(v11 + 17720))
            break;
          ++v25;
          if (!--v37)
          {
LABEL_51:
            v25 = a4;
            break;
          }
        }
      }
      else if (v32 == 5121)
      {
        if ((int)v26 >= (int)a4)
          goto LABEL_53;
        v33 = (unsigned __int8 *)(*(_QWORD *)(v11 + 26312) + (int)v26);
        v34 = (int)a4 - (uint64_t)(int)v26;
        v25 = v26;
        while (1)
        {
          v35 = *v33++;
          if (v35 == *(_DWORD *)(v11 + 17720))
            break;
          ++v25;
          if (!--v34)
            goto LABEL_51;
        }
      }
      else
      {
        if ((int)v26 >= (int)a4)
          goto LABEL_53;
        v39 = (int *)(*(_QWORD *)(v11 + 26312) + 4 * (int)v26);
        v40 = (int)a4 - (uint64_t)(int)v26;
        v25 = v26;
        while (1)
        {
          v41 = *v39++;
          if (v41 == *(_DWORD *)(v11 + 17720))
            break;
          ++v25;
          if (!--v40)
            goto LABEL_51;
        }
      }
      v27 = v25 - v26;
      if (v25 == (_DWORD)v26)
      {
LABEL_53:
        v26 = (v26 + 1);
        v25 = v26;
      }
      else
      {
        *((_DWORD *)v12 + 635) = v27;
        v12[1269] = a2;
        v12[1268] = a2;
        (*(void (**)(uint64_t))(v53 + 8 * a2))(v11);
LABEL_25:
        v28 = *(_QWORD *)(v11 + 26008);
        v29 = *v12;
        v30 = (int)(*(_QWORD *)(v11 + 26016) - v28) / v29;
        v31 = v28 + v27 * v29;
        if (v30 <= v27)
          v31 = *(_QWORD *)(v11 + 26016);
        if (v30 < v27)
          v27 = v30;
        *(_QWORD *)(v11 + 26040) = v31;
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 26184))(v11, v26, a3);
        v26 = (v27 + v26);
        if (v25 == (_DWORD)a4 && (_DWORD)v26 == v25)
        {
LABEL_55:
          if (v12[1268] != -1)
          {
            v12[1268] = -1;
            result = (*(uint64_t (**)(uint64_t))(v11 + 28144))(v11);
          }
          v42 = *(_DWORD *)(v11 + 9208) + 1;
          if (v42 < a7)
          {
            v43 = 0;
            *(_DWORD *)(v11 + 9208) = v42;
            v44 = v52;
            do
            {
              v45 = *(v44 - 2);
              if (v45 && !(v42 % v45))
                *(_QWORD *)(v24 + v43) += *v44;
              v44 += 6;
              v43 += 8;
            }
            while (v43 != 128);
            goto LABEL_20;
          }
          if (a7 >= 2)
          {
            v46 = 0;
            v47 = (int *)(v51 + 488);
            do
            {
              v48 = *v47;
              v47 += 6;
              if (v48)
                *(_QWORD *)(v51 + 1048 + v46) = *(_QWORD *)((char *)v57 + v46);
              v46 += 8;
            }
            while (v46 != 128);
            *(_DWORD *)(v11 + 9208) = 0;
          }
LABEL_71:
          *((_DWORD *)v12 + 635) = 0;
          return result;
        }
        if ((_DWORD)v26 == v25)
        {
          v12[1268] = -1;
          result = (*(uint64_t (**)(uint64_t))(v11 + 28144))(v11);
          v26 = ++v25;
        }
        else
        {
          result = (*(uint64_t (**)(uint64_t))(v11 + 28152))(v11);
        }
      }
    }
  }
  return result;
}

uint64_t gleDrawArraysOrElements_Entries_Body(unint64_t a1, int a2, char a3, unsigned __int8 a4, uint64_t a5, __n128 a6, double a7, double a8)
{
  unsigned __int8 *v11;
  _WORD *v12;
  uint64_t v13;
  _BYTE *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  int v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v11 = (unsigned __int8 *)(a1 + 32476);
  v12 = (_WORD *)(a1 + 26340);
  if (*(_QWORD *)(a5 + 904))
  {
    *(_DWORD *)(a1 + 28652) = 0;
    *(_DWORD *)(a1 + 1532) |= 0x1000u;
  }
  v13 = (1 << a3);
  if (!a2 && *v11 != 255)
  {
    *v11 = -1;
    *(_DWORD *)(a1 + 28652) = 0;
    *(_DWORD *)(a1 + 1548) |= 0x4000u;
  }
  if ((*(_DWORD *)(a1 + 28652) & v13) != 0
    && (*(_BYTE *)(a1 + 28681) & a4) != 0
    && (*(_BYTE *)(a1 + 28683) & 4) != 0)
  {
    if (!*(_BYTE *)(a1 + 32482))
      goto LABEL_16;
    return 2;
  }
  if ((a2 - 3) >= 2)
  {
    if (a2 == 1)
    {
      if (!gleDoDrawDispatchCoreGL3(a1, v13, a4, 4u, a6.n128_f64[0], a7, a8))
        return 2;
      goto LABEL_16;
    }
    if (gleDoDrawDispatchCore(a1, v13, a4, 4u, a6, a7, a8))
      goto LABEL_16;
    return 2;
  }
  if (!gleDoDrawDispatchCoreES2(a1, v13))
    return 2;
LABEL_16:
  v14 = (_BYTE *)(a1 + 17692);
  if (a2 == 3)
  {
    if (v11[5]
      && ((*v14 || (*(_WORD *)(a5 + 882) & 0xFFFE) == 0x85BE) && *(_DWORD *)(a5 + 884) && *(_QWORD *)(a5 + 888)
       || (*(_QWORD *)(a5 + 864) & ~*(_QWORD *)(a5 + 872)) == 0))
    {
      v15 = *(_QWORD **)(a1 + 28984);
      v16 = *(_QWORD **)(a1 + 28976);
      if (v15[65])
        v17 = *(_QWORD *)(a1 + 28984);
      else
        v17 = *(_QWORD *)(a1 + 28976);
      *(_QWORD *)(v17 + 520) = glDrawArrays_ACC_ES2Exec;
      if (v15[67])
        v18 = v15;
      else
        v18 = v16;
      v18[67] = glDrawElements_ACC_ES2Exec;
      v19 = v11[25];
      if ((v19 - 3) <= 1)
      {
        v20 = v15[762] ? v15 : v16;
        v20[762] = glDrawArraysInstanced_ACC_ES2Exec;
        v21 = v15[763] ? v15 : v16;
        v21[763] = glDrawElementsInstanced_ACC_ES2Exec;
        if (v19 == 4)
        {
          if (!v15[405])
            v15 = v16;
          v15[405] = glDrawRangeElements_ACC_ES2Exec;
        }
      }
LABEL_52:
      *v12 = 2;
      return 1;
    }
    v26 = *(_QWORD **)(a1 + 28984);
    v27 = *(_QWORD **)(a1 + 28976);
    if (v26[65])
      v28 = *(_QWORD *)(a1 + 28984);
    else
      v28 = *(_QWORD *)(a1 + 28976);
    *(_QWORD *)(v28 + 520) = glDrawArrays_IMM_ES2Exec;
    if (v26[67])
      v29 = v26;
    else
      v29 = v27;
    v29[67] = glDrawElements_IMM_ES2Exec;
    v30 = v11[25];
    if ((v30 - 3) <= 1)
    {
      v31 = v26[762] ? v26 : v27;
      v31[762] = glDrawArraysInstanced_IMM_ES2Exec;
      v32 = v26[763] ? v26 : v27;
      v32[763] = glDrawElementsInstanced_IMM_ES2Exec;
      if (v30 == 4)
      {
        if (!v26[405])
          v26 = v27;
        v26[405] = glDrawRangeElements_IMM_ES2Exec;
      }
    }
  }
  else
  {
    if (v11[5]
      && ((*v14 || (*(_WORD *)(a5 + 882) & 0xFFFE) == 0x85BE) && *(_DWORD *)(a5 + 884) && *(_QWORD *)(a5 + 888)
       || (*(_QWORD *)(a5 + 864) & ~*(_QWORD *)(a5 + 872)) == 0))
    {
      v22 = *(_QWORD *)(a1 + 28984);
      v23 = *(_QWORD *)(a1 + 28976);
      if (*(_QWORD *)(v22 + 520))
        v24 = *(_QWORD *)(a1 + 28984);
      else
        v24 = *(_QWORD *)(a1 + 28976);
      *(_QWORD *)(v24 + 520) = glDrawArrays_ACC_Exec;
      if (!*(_QWORD *)(v22 + 536))
        v22 = v23;
      *(_QWORD *)(v22 + 536) = glDrawElements_ACC_Exec;
      goto LABEL_52;
    }
    v33 = *(_QWORD *)(a1 + 28984);
    v34 = *(_QWORD *)(a1 + 28976);
    if (*(_QWORD *)(v33 + 520))
      v35 = *(_QWORD *)(a1 + 28984);
    else
      v35 = *(_QWORD *)(a1 + 28976);
    *(_QWORD *)(v35 + 520) = glDrawArrays_IMM_Exec;
    if (!*(_QWORD *)(v33 + 536))
      v33 = v34;
    *(_QWORD *)(v33 + 536) = glDrawElements_IMM_Exec;
  }
  *v12 = 1;
  if (*(_QWORD *)(a5 + 872) && !*(_BYTE *)(a5 + 1176))
    gleSynchronizeBuffersInArray(a1, a5);
  return 0;
}

uint64_t glDrawArrays_ACC_ES2Exec(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6, double a7)
{
  unsigned __int16 *v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  int v15;
  int v16;
  uint64_t v17;
  char v18;
  int v19;
  __int16 v20;
  unsigned int v21;
  unsigned int v22;

  v7 = (unsigned __int16 *)(result + 26336);
  if (a2 >= 7)
  {
    if (*(_WORD *)(result + 29832))
      return result;
    v20 = 1280;
    goto LABEL_49;
  }
  if ((int)a4 <= 0)
  {
    if ((a4 & 0x80000000) == 0 || *(_WORD *)(result + 29832))
      return result;
    v20 = 1281;
    goto LABEL_49;
  }
  v11 = result;
  v12 = *(_QWORD *)(result + 26384);
  v13 = *(_QWORD *)(result + 26432);
  if (*(__int16 *)(v13 + 42) != -1 && !*(_BYTE *)(v13 + 41))
  {
    v21 = a4;
    switch((int)a2)
    {
      case 0:
      case 2:
        break;
      case 1:
        v21 = a4 >> 1;
        break;
      case 3:
        v21 = a4 - 1;
        break;
      case 4:
        v21 = a4 / 3;
        break;
      case 5:
      case 6:
        v21 = a4 - 2;
        break;
      default:
        v21 = 0;
        break;
    }
    v22 = v21 + *(_DWORD *)(v13 + 176);
    if (v22 <= *(_DWORD *)(v13 + 180))
    {
      *(_DWORD *)(v13 + 176) = v22;
      goto LABEL_5;
    }
    if (*(_WORD *)(result + 29832))
      return result;
    v20 = 1282;
LABEL_49:
    *(_WORD *)(result + 29832) = v20;
    return result;
  }
LABEL_5:
  if (*v7 != 5375)
  {
    *(_QWORD *)(result + 26312) = 0;
    *v7 = 5375;
  }
  v14 = (_BYTE *)(result + 32481);
  if (*(_QWORD *)(v12 + 944))
  {
    v15 = 0;
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1532) |= 0x1000u;
  }
  else
  {
    v15 = *(_DWORD *)(result + 28652);
  }
  v16 = 1 << a2;
  if ((v15 & (1 << a2)) != 0 && (*(_BYTE *)(result + 28681) & 1) != 0 && (*(_BYTE *)(result + 28683) & 4) != 0)
  {
    if (*(_BYTE *)(result + 32482))
      return result;
  }
  else
  {
    result = gleDoDrawDispatchCoreES2(result, 1 << a2, 1u, 4u, a5, a6, a7);
    if (!(_DWORD)result)
      return result;
  }
  if (!*v14)
  {
    v17 = *(_QWORD *)(v12 + 912);
LABEL_23:
    if (v17 && !*(_BYTE *)(v12 + 1216))
      result = gleSynchronizeBuffersInArray(v11, v12 + 40);
    v18 = 1;
    goto LABEL_27;
  }
  if (!*(_BYTE *)(v11 + 17692) && (*(_WORD *)(v12 + 922) & 0xFFFE) != 0x85BE
    || !*(_DWORD *)(v12 + 924)
    || !*(_QWORD *)(v12 + 928))
  {
    v17 = *(_QWORD *)(v12 + 912);
    if ((*(_QWORD *)(v12 + 904) & ~v17) != 0)
      goto LABEL_23;
  }
  result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD))(v11 + 29232))(*(_QWORD *)(v11 + 29016), 0, a2, a3, a4, *v7, *(_QWORD *)(v11 + 26312), 1, 0);
  if ((_DWORD)result)
    goto LABEL_36;
  v18 = 0;
LABEL_27:
  if ((*((_DWORD *)v7 + 579) & v16) != 0 && (*((_BYTE *)v7 + 2345) & 1) != 0 && (*((_BYTE *)v7 + 2347) & 2) != 0)
  {
    if (!v14[1])
    {
LABEL_31:
      if ((v18 & 1) == 0 && *(_QWORD *)(v12 + 912) && !*(_BYTE *)(v12 + 1216))
        gleSynchronizeBuffersInArray(v11, v12 + 40);
      result = gleDrawArraysOrElements_ExecCore(v11, a2, a3, a4, 0, v12 + 40, 1);
    }
  }
  else
  {
    result = gleDoDrawDispatchCoreES2(v11, 1 << a2, 1u, 2u, a5, a6, a7);
    if ((_DWORD)result)
      goto LABEL_31;
  }
LABEL_36:
  v19 = *(_DWORD *)(*(_QWORD *)(v11 + 19296) + 316);
  if (*((_DWORD *)v7 + 870) != v19)
  {
    if (*(_QWORD *)(v11 + 28960))
    {
      result = gleInvalidateCurrentDrawFramebufferTextures(v11);
      v19 = *(_DWORD *)(*(_QWORD *)(v11 + 19296) + 316);
    }
    *((_DWORD *)v7 + 870) = v19;
  }
  return result;
}

uint64_t glDrawElements_ACC_ES2Exec(uint64_t result, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  unsigned __int16 *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  _BYTE *v14;
  int v15;
  int v16;
  uint64_t v17;
  char v18;
  int v19;
  __int16 v20;
  unsigned int v21;
  unsigned int v22;

  v5 = (unsigned __int16 *)(result + 26336);
  if (a2 >= 7)
  {
LABEL_52:
    if (!*(_WORD *)(result + 29832))
    {
      v20 = 1280;
LABEL_67:
      *(_WORD *)(result + 29832) = v20;
      return result;
    }
    return result;
  }
  v8 = result;
  v9 = *(_QWORD *)(result + 26384);
  v10 = *(_QWORD *)(result + 26432);
  v11 = *(unsigned __int16 *)(v10 + 42);
  if (v11 != 0xFFFF && !*(_BYTE *)(v10 + 41))
    goto LABEL_65;
  if (a4 != 5123 && a4 != 5121 && a4 != 5125)
    goto LABEL_52;
  if ((int)a3 > 0)
  {
    if (v11 == 0xFFFF || *(_BYTE *)(v10 + 41))
    {
LABEL_8:
      v12 = *(_QWORD *)(v9 + 1232);
      if (v12)
        a5 += *(_QWORD *)(v12 + 136);
      *(_QWORD *)(result + 26312) = a5;
      *v5 = a4;
      if ((a4 - 5121) > 4)
        LOBYTE(v13) = 1;
      else
        v13 = dword_21B9A4E1C[a4 - 5121];
      v14 = (_BYTE *)(result + 32481);
      if (*(_QWORD *)(v9 + 944))
      {
        v15 = 0;
        *(_DWORD *)(result + 28652) = 0;
        *(_DWORD *)(result + 1532) |= 0x1000u;
      }
      else
      {
        v15 = *(_DWORD *)(result + 28652);
      }
      v16 = 1 << a2;
      if ((v15 & (1 << a2)) != 0
        && (v13 & *(_BYTE *)(result + 28681)) != 0
        && (*(_BYTE *)(result + 28683) & 4) != 0)
      {
        if (*(_BYTE *)(result + 32482))
          return result;
      }
      else
      {
        result = gleDoDrawDispatchCoreES2(result, (1 << a2));
        if (!(_DWORD)result)
          return result;
      }
      if (*v14)
      {
        if ((*(_BYTE *)(v8 + 17692) || (*(_WORD *)(v9 + 922) & 0xFFFE) == 0x85BE)
          && *(_DWORD *)(v9 + 924)
          && *(_QWORD *)(v9 + 928)
          || (v17 = *(_QWORD *)(v9 + 912), (*(_QWORD *)(v9 + 904) & ~v17) == 0))
        {
          result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD))(v8 + 29232))(*(_QWORD *)(v8 + 29016), 1, a2, 0, a3, *v5, *(_QWORD *)(v8 + 26312), 1, 0);
          if ((_DWORD)result)
            goto LABEL_42;
          v18 = 0;
LABEL_33:
          if ((*((_DWORD *)v5 + 579) & v16) != 0
            && (*((_BYTE *)v5 + 2345) & 1) != 0
            && (*((_BYTE *)v5 + 2347) & 2) != 0)
          {
            if (!v14[1])
            {
LABEL_37:
              if ((v18 & 1) == 0 && *(_QWORD *)(v9 + 912) && !*(_BYTE *)(v9 + 1216))
                gleSynchronizeBuffersInArray(v8, v9 + 40);
              result = gleDrawArraysOrElements_ExecCore(v8, a2, 0, a3, 1, v9 + 40, 1);
            }
          }
          else
          {
            result = gleDoDrawDispatchCoreES2(v8, (1 << a2));
            if ((_DWORD)result)
              goto LABEL_37;
          }
LABEL_42:
          v19 = *(_DWORD *)(*(_QWORD *)(v8 + 19296) + 316);
          if (*((_DWORD *)v5 + 870) != v19)
          {
            if (*(_QWORD *)(v8 + 28960))
            {
              result = gleInvalidateCurrentDrawFramebufferTextures(v8);
              v19 = *(_DWORD *)(*(_QWORD *)(v8 + 19296) + 316);
            }
            *((_DWORD *)v5 + 870) = v19;
          }
          return result;
        }
      }
      else
      {
        v17 = *(_QWORD *)(v9 + 912);
      }
      if (v17 && !*(_BYTE *)(v9 + 1216))
        result = gleSynchronizeBuffersInArray(v8, v9 + 40);
      v18 = 1;
      goto LABEL_33;
    }
    v21 = a3;
    switch((int)a2)
    {
      case 0:
      case 2:
        break;
      case 1:
        v21 = a3 >> 1;
        break;
      case 3:
        v21 = a3 - 1;
        break;
      case 4:
        v21 = a3 / 3;
        break;
      case 5:
      case 6:
        v21 = a3 - 2;
        break;
      default:
        v21 = 0;
        break;
    }
    v22 = v21 + *(_DWORD *)(v10 + 176);
    if (v22 <= *(_DWORD *)(v10 + 180))
    {
      *(_DWORD *)(v10 + 176) = v22;
      goto LABEL_8;
    }
LABEL_65:
    if (!*(_WORD *)(result + 29832))
    {
      v20 = 1282;
      goto LABEL_67;
    }
    return result;
  }
  if ((a3 & 0x80000000) != 0 && !*(_WORD *)(result + 29832))
  {
    v20 = 1281;
    goto LABEL_67;
  }
  return result;
}

uint64_t glDrawArraysInstanced_ACC_ES2Exec(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned __int16 *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  int v19;
  __int16 v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;

  v6 = (unsigned __int16 *)(result + 26336);
  if ((int)a5 <= 0)
  {
    if ((a5 & 0x80000000) == 0)
      return result;
LABEL_50:
    if (*(_WORD *)(result + 29832))
      return result;
    v20 = 1281;
    goto LABEL_52;
  }
  if (a2 >= 7)
  {
    if (*(_WORD *)(result + 29832))
      return result;
    v20 = 1280;
    goto LABEL_52;
  }
  if ((int)a4 <= 0)
  {
    if ((a4 & 0x80000000) == 0)
      return result;
    goto LABEL_50;
  }
  v10 = result;
  v11 = *(_QWORD *)(result + 26384);
  v12 = *(_QWORD *)(result + 26432);
  if (*(__int16 *)(v12 + 42) != -1 && !*(_BYTE *)(v12 + 41))
  {
    v21 = a4;
    switch((int)a2)
    {
      case 0:
      case 2:
        break;
      case 1:
        v21 = a4 >> 1;
        break;
      case 3:
        v21 = a4 - 1;
        break;
      case 4:
        v21 = a4 / 3;
        break;
      case 5:
      case 6:
        v21 = a4 - 2;
        break;
      default:
        v21 = 0;
        break;
    }
    v22 = *(_DWORD *)(v12 + 176) + v21 * a5;
    if (v22 <= *(_DWORD *)(v12 + 180))
    {
      *(_DWORD *)(v12 + 176) = v22;
      goto LABEL_6;
    }
    if (*(_WORD *)(result + 29832))
      return result;
    v20 = 1282;
LABEL_52:
    *(_WORD *)(result + 29832) = v20;
    return result;
  }
LABEL_6:
  if (*v6 != 5375)
  {
    *(_QWORD *)(result + 26312) = 0;
    *v6 = 5375;
  }
  v13 = (_BYTE *)(result + 32481);
  if (*(_QWORD *)(v11 + 944))
  {
    v14 = 0;
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1532) |= 0x1000u;
  }
  else
  {
    v14 = *(_DWORD *)(result + 28652);
  }
  v15 = 1 << a2;
  if ((v14 & (1 << a2)) != 0 && (*(_BYTE *)(result + 28681) & 1) != 0 && (*(_BYTE *)(result + 28683) & 4) != 0)
  {
    if (*(_BYTE *)(result + 32482))
      return result;
  }
  else
  {
    result = gleDoDrawDispatchCoreES2(result, (1 << a2));
    if (!(_DWORD)result)
      return result;
  }
  v23 = v11 + 40;
  if (!*v13)
  {
    v16 = *(_QWORD *)(v11 + 912);
LABEL_24:
    v17 = a3;
    if (v16 && !*(_BYTE *)(v11 + 1216))
      result = gleSynchronizeBuffersInArray(v10, v23);
    v18 = 1;
    goto LABEL_28;
  }
  if (!*(_BYTE *)(v10 + 17692) && (*(_WORD *)(v11 + 922) & 0xFFFE) != 0x85BE
    || !*(_DWORD *)(v11 + 924)
    || !*(_QWORD *)(v11 + 928))
  {
    v16 = *(_QWORD *)(v11 + 912);
    if ((*(_QWORD *)(v11 + 904) & ~v16) != 0)
      goto LABEL_24;
  }
  v17 = a3;
  result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD, uint64_t))(v10 + 29232))(*(_QWORD *)(v10 + 29016), 0, a2, a3, a4, *v6, *(_QWORD *)(v10 + 26312), a5, 0, v23);
  if ((_DWORD)result)
    goto LABEL_37;
  v18 = 0;
LABEL_28:
  if ((*((_DWORD *)v6 + 579) & v15) != 0 && (*((_BYTE *)v6 + 2345) & 1) != 0 && (*((_BYTE *)v6 + 2347) & 2) != 0)
  {
    if (!v13[1])
    {
LABEL_32:
      if ((v18 & 1) == 0 && *(_QWORD *)(v11 + 912) && !*(_BYTE *)(v11 + 1216))
        gleSynchronizeBuffersInArray(v10, v23);
      result = gleDrawArraysOrElements_ExecCore(v10, a2, v17, a4, 0, v23, a5);
    }
  }
  else
  {
    result = gleDoDrawDispatchCoreES2(v10, (1 << a2));
    if ((_DWORD)result)
      goto LABEL_32;
  }
LABEL_37:
  v19 = *(_DWORD *)(*(_QWORD *)(v10 + 19296) + 316);
  if (*((_DWORD *)v6 + 870) != v19)
  {
    if (*(_QWORD *)(v10 + 28960))
    {
      result = gleInvalidateCurrentDrawFramebufferTextures(v10);
      v19 = *(_DWORD *)(*(_QWORD *)(v10 + 19296) + 316);
    }
    *((_DWORD *)v6 + 870) = v19;
  }
  return result;
}

uint64_t glDrawElementsInstanced_ACC_ES2Exec(uint64_t result, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  unsigned __int16 *v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  _BYTE *v16;
  int v17;
  int v18;
  uint64_t v19;
  char v20;
  int v21;
  __int16 v22;
  unsigned int v23;
  unsigned int v24;

  v7 = (unsigned __int16 *)(result + 26336);
  if ((int)a6 <= 0)
  {
    if ((a6 & 0x80000000) == 0)
      return result;
  }
  else
  {
    if (a2 >= 7)
      goto LABEL_53;
    v10 = result;
    v11 = *(_QWORD *)(result + 26384);
    v12 = *(_QWORD *)(result + 26432);
    v13 = *(unsigned __int16 *)(v12 + 42);
    if (v13 != 0xFFFF && !*(_BYTE *)(v12 + 41))
      goto LABEL_68;
    if (a4 != 5123 && a4 != 5121 && a4 != 5125)
    {
LABEL_53:
      if (!*(_WORD *)(result + 29832))
      {
        v22 = 1280;
LABEL_70:
        *(_WORD *)(result + 29832) = v22;
        return result;
      }
      return result;
    }
    if ((int)a3 > 0)
    {
      if (v13 == 0xFFFF || *(_BYTE *)(v12 + 41))
      {
LABEL_9:
        v14 = *(_QWORD *)(v11 + 1232);
        if (v14)
          a5 += *(_QWORD *)(v14 + 136);
        *(_QWORD *)(result + 26312) = a5;
        *v7 = a4;
        if ((a4 - 5121) > 4)
          LOBYTE(v15) = 1;
        else
          v15 = dword_21B9A4E1C[a4 - 5121];
        v16 = (_BYTE *)(result + 32481);
        if (*(_QWORD *)(v11 + 944))
        {
          v17 = 0;
          *(_DWORD *)(result + 28652) = 0;
          *(_DWORD *)(result + 1532) |= 0x1000u;
        }
        else
        {
          v17 = *(_DWORD *)(result + 28652);
        }
        v18 = 1 << a2;
        if ((v17 & (1 << a2)) != 0
          && (v15 & *(_BYTE *)(result + 28681)) != 0
          && (*(_BYTE *)(result + 28683) & 4) != 0)
        {
          if (*(_BYTE *)(result + 32482))
            return result;
        }
        else
        {
          result = gleDoDrawDispatchCoreES2(result, (1 << a2));
          if (!(_DWORD)result)
            return result;
        }
        if (*v16)
        {
          if ((*(_BYTE *)(v10 + 17692) || (*(_WORD *)(v11 + 922) & 0xFFFE) == 0x85BE)
            && *(_DWORD *)(v11 + 924)
            && *(_QWORD *)(v11 + 928)
            || (v19 = *(_QWORD *)(v11 + 912), (*(_QWORD *)(v11 + 904) & ~v19) == 0))
          {
            result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD))(v10 + 29232))(*(_QWORD *)(v10 + 29016), 1, a2, 0, a3, *v7, *(_QWORD *)(v10 + 26312), a6, 0);
            if ((_DWORD)result)
              goto LABEL_43;
            v20 = 0;
LABEL_34:
            if ((*((_DWORD *)v7 + 579) & v18) != 0
              && (*((_BYTE *)v7 + 2345) & 1) != 0
              && (*((_BYTE *)v7 + 2347) & 2) != 0)
            {
              if (!v16[1])
              {
LABEL_38:
                if ((v20 & 1) == 0 && *(_QWORD *)(v11 + 912) && !*(_BYTE *)(v11 + 1216))
                  gleSynchronizeBuffersInArray(v10, v11 + 40);
                result = gleDrawArraysOrElements_ExecCore(v10, a2, 0, a3, 1, v11 + 40, a6);
              }
            }
            else
            {
              result = gleDoDrawDispatchCoreES2(v10, (1 << a2));
              if ((_DWORD)result)
                goto LABEL_38;
            }
LABEL_43:
            v21 = *(_DWORD *)(*(_QWORD *)(v10 + 19296) + 316);
            if (*((_DWORD *)v7 + 870) != v21)
            {
              if (*(_QWORD *)(v10 + 28960))
              {
                result = gleInvalidateCurrentDrawFramebufferTextures(v10);
                v21 = *(_DWORD *)(*(_QWORD *)(v10 + 19296) + 316);
              }
              *((_DWORD *)v7 + 870) = v21;
            }
            return result;
          }
        }
        else
        {
          v19 = *(_QWORD *)(v11 + 912);
        }
        if (v19 && !*(_BYTE *)(v11 + 1216))
          result = gleSynchronizeBuffersInArray(v10, v11 + 40);
        v20 = 1;
        goto LABEL_34;
      }
      v23 = a3;
      switch((int)a2)
      {
        case 0:
        case 2:
          break;
        case 1:
          v23 = a3 >> 1;
          break;
        case 3:
          v23 = a3 - 1;
          break;
        case 4:
          v23 = a3 / 3;
          break;
        case 5:
        case 6:
          v23 = a3 - 2;
          break;
        default:
          v23 = 0;
          break;
      }
      v24 = *(_DWORD *)(v12 + 176) + v23 * a6;
      if (v24 <= *(_DWORD *)(v12 + 180))
      {
        *(_DWORD *)(v12 + 176) = v24;
        goto LABEL_9;
      }
LABEL_68:
      if (!*(_WORD *)(result + 29832))
      {
        v22 = 1282;
        goto LABEL_70;
      }
      return result;
    }
    if ((a3 & 0x80000000) == 0)
      return result;
  }
  if (!*(_WORD *)(result + 29832))
  {
    v22 = 1281;
    goto LABEL_70;
  }
  return result;
}

uint64_t glDrawRangeElements_ACC_ES2Exec(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5, int a6, uint64_t a7)
{
  unsigned __int16 *v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  int v15;
  _BYTE *v16;
  int v17;
  int v18;
  uint64_t v19;
  char v20;
  int v21;
  __int16 v22;

  v7 = (unsigned __int16 *)(result + 26336);
  if (a2 >= 7)
    goto LABEL_61;
  v10 = result;
  v11 = *(_QWORD *)(result + 26384);
  v12 = *(_QWORD *)(result + 26432);
  if (*(__int16 *)(v12 + 42) != -1 && !*(_BYTE *)(v12 + 41))
  {
    if (!*(_WORD *)(result + 29832))
    {
      v22 = 1282;
      goto LABEL_58;
    }
    return result;
  }
  if (a6 != 5123 && a6 != 5121 && a6 != 5125)
  {
LABEL_61:
    if (!*(_WORD *)(result + 29832))
    {
      v22 = 1280;
LABEL_58:
      *(_WORD *)(result + 29832) = v22;
      return result;
    }
    return result;
  }
  if ((int)a5 <= 0)
  {
    if ((a5 & 0x80000000) == 0)
      return result;
  }
  else if (a4 >= a3)
  {
    v13 = (_BYTE *)(result + 17692);
    v14 = *(_QWORD *)(v11 + 1232);
    if (v14)
      a7 += *(_QWORD *)(v14 + 136);
    *(_QWORD *)(result + 26312) = a7;
    *v7 = a6;
    *(_DWORD *)(result + 26320) = a3;
    *(_DWORD *)(result + 26324) = a4;
    if ((a6 - 5121) > 4)
      LOBYTE(v15) = 1;
    else
      v15 = dword_21B9A4E1C[a6 - 5121];
    v16 = (_BYTE *)(result + 32481);
    if (*(_QWORD *)(v11 + 944))
    {
      v17 = 0;
      *(_DWORD *)(result + 28652) = 0;
      *(_DWORD *)(result + 1532) |= 0x1000u;
    }
    else
    {
      v17 = *(_DWORD *)(result + 28652);
    }
    v18 = 1 << a2;
    if ((v17 & (1 << a2)) != 0
      && (v15 & *(_BYTE *)(result + 28681)) != 0
      && (*(_BYTE *)(result + 28683) & 4) != 0)
    {
      if (*(_BYTE *)(result + 32482))
        return result;
    }
    else
    {
      result = gleDoDrawDispatchCoreES2(result, (1 << a2));
      if (!(_DWORD)result)
        return result;
    }
    if (*v16)
    {
      if ((*v13 || (*(_WORD *)(v11 + 922) & 0xFFFE) == 0x85BE) && *(_DWORD *)(v11 + 924) && *(_QWORD *)(v11 + 928)
        || (v19 = *(_QWORD *)(v11 + 912), (*(_QWORD *)(v11 + 904) & ~v19) == 0))
      {
        result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD))(v10 + 29232))(*(_QWORD *)(v10 + 29016), 3, a2, 0, a5, *v7, *(_QWORD *)(v10 + 26312), 1, 0);
        if ((_DWORD)result)
          goto LABEL_41;
        v20 = 0;
LABEL_32:
        if ((*((_DWORD *)v7 + 579) & v18) != 0 && (*((_BYTE *)v7 + 2345) & 1) != 0 && (*((_BYTE *)v7 + 2347) & 2) != 0)
        {
          if (!v16[1])
          {
LABEL_36:
            if ((v20 & 1) == 0 && *(_QWORD *)(v11 + 912) && !*(_BYTE *)(v11 + 1216))
              gleSynchronizeBuffersInArray(v10, v11 + 40);
            result = gleDrawArraysOrElements_ExecCore(v10, a2, 0, a5, 3, v11 + 40, 1);
          }
        }
        else
        {
          result = gleDoDrawDispatchCoreES2(v10, (1 << a2));
          if ((_DWORD)result)
            goto LABEL_36;
        }
LABEL_41:
        v21 = *(_DWORD *)(*(_QWORD *)(v10 + 19296) + 316);
        if (*((_DWORD *)v7 + 870) != v21)
        {
          if (*(_QWORD *)(v10 + 28960))
          {
            result = gleInvalidateCurrentDrawFramebufferTextures(v10);
            v21 = *(_DWORD *)(*(_QWORD *)(v10 + 19296) + 316);
          }
          *((_DWORD *)v7 + 870) = v21;
        }
        return result;
      }
    }
    else
    {
      v19 = *(_QWORD *)(v11 + 912);
    }
    if (v19 && !*(_BYTE *)(v11 + 1216))
      result = gleSynchronizeBuffersInArray(v10, v11 + 40);
    v20 = 1;
    goto LABEL_32;
  }
  if (!*(_WORD *)(result + 29832))
  {
    v22 = 1281;
    goto LABEL_58;
  }
  return result;
}

unint64_t glDrawArrays_ACC_Exec(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, __n128 a5, double a6, double a7)
{
  unsigned __int16 *v7;
  unint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v16;
  _BYTE *v17;
  int v18;
  int v19;
  uint64_t v20;
  char v21;
  int v22;
  __int16 v23;
  unsigned int v24;
  unsigned int v25;

  v7 = (unsigned __int16 *)(result + 26336);
  if (a2 >= 7)
  {
    if (*(_WORD *)(result + 29832))
      return result;
    v23 = 1280;
    goto LABEL_53;
  }
  v8 = result;
  v9 = (_BYTE *)(result + 17692);
  v10 = *(_QWORD *)(result + 26384);
  if ((~*(_DWORD *)(v10 + 904) & 0x900000) != 0 && *(_BYTE *)(result + 17699) != 0
    || (*(_QWORD *)(v10 + 904) & 0x100010000) == 0)
  {
    return result;
  }
  if ((int)a4 <= 0)
  {
    if ((a4 & 0x80000000) == 0 || *(_WORD *)(result + 29832))
      return result;
    v23 = 1281;
    goto LABEL_53;
  }
  v16 = *(_QWORD *)(result + 26432);
  if (*(__int16 *)(v16 + 42) != -1 && !*(_BYTE *)(v16 + 41))
  {
    v24 = a4;
    switch((int)a2)
    {
      case 0:
      case 2:
        break;
      case 1:
        v24 = a4 >> 1;
        break;
      case 3:
        v24 = a4 - 1;
        break;
      case 4:
        v24 = a4 / 3;
        break;
      case 5:
      case 6:
        v24 = a4 - 2;
        break;
      default:
        v24 = 0;
        break;
    }
    v25 = v24 + *(_DWORD *)(v16 + 176);
    if (v25 <= *(_DWORD *)(v16 + 180))
    {
      *(_DWORD *)(v16 + 176) = v25;
      goto LABEL_12;
    }
    if (*(_WORD *)(result + 29832))
      return result;
    v23 = 1282;
LABEL_53:
    *(_WORD *)(result + 29832) = v23;
    return result;
  }
LABEL_12:
  if (*v7 != 5375)
  {
    *(_QWORD *)(result + 26312) = 0;
    *v7 = 5375;
  }
  v17 = (_BYTE *)(result + 32481);
  if (*(_QWORD *)(v10 + 944))
  {
    v18 = 0;
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1532) |= 0x1000u;
  }
  else
  {
    v18 = *(_DWORD *)(result + 28652);
  }
  v19 = 1 << a2;
  if ((v18 & (1 << a2)) != 0 && (*(_BYTE *)(result + 28681) & 1) != 0 && (*(_BYTE *)(result + 28683) & 4) != 0)
  {
    if (*(_BYTE *)(result + 32482))
      return result;
  }
  else
  {
    result = gleDoDrawDispatchCore(result, 1 << a2, 1u, 4u, a5, a6, a7);
    if (!(_DWORD)result)
      return result;
  }
  if (!*v17)
  {
    v20 = *(_QWORD *)(v10 + 912);
LABEL_30:
    if (v20 && !*(_BYTE *)(v10 + 1216))
      result = gleSynchronizeBuffersInArray(v8, v10 + 40);
    v21 = 1;
    goto LABEL_34;
  }
  if (!*v9 && (*(_WORD *)(v10 + 922) & 0xFFFE) != 0x85BE || !*(_DWORD *)(v10 + 924) || !*(_QWORD *)(v10 + 928))
  {
    v20 = *(_QWORD *)(v10 + 912);
    if ((*(_QWORD *)(v10 + 904) & ~v20) != 0)
      goto LABEL_30;
  }
  result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD))(v8 + 29232))(*(_QWORD *)(v8 + 29016), 0, a2, a3, a4, *v7, *(_QWORD *)(v8 + 26312), 1, 0);
  if ((_DWORD)result)
    goto LABEL_43;
  v21 = 0;
LABEL_34:
  if ((*((_DWORD *)v7 + 579) & v19) != 0 && (*((_BYTE *)v7 + 2345) & 1) != 0 && (*((_BYTE *)v7 + 2347) & 2) != 0)
  {
    if (!v17[1])
    {
LABEL_38:
      if ((v21 & 1) == 0 && *(_QWORD *)(v10 + 912) && !*(_BYTE *)(v10 + 1216))
        gleSynchronizeBuffersInArray(v8, v10 + 40);
      result = gleDrawArraysOrElements_ExecCore(v8, a2, a3, a4, 0, v10 + 40, 1);
    }
  }
  else
  {
    result = gleDoDrawDispatchCore(v8, 1 << a2, 1u, 2u, a5, a6, a7);
    if ((_DWORD)result)
      goto LABEL_38;
  }
LABEL_43:
  v22 = *(_DWORD *)(*(_QWORD *)(v8 + 19296) + 316);
  if (*((_DWORD *)v7 + 870) != v22)
  {
    if (*(_QWORD *)(v8 + 28960))
    {
      result = gleInvalidateCurrentDrawFramebufferTextures(v8);
      v22 = *(_DWORD *)(*(_QWORD *)(v8 + 19296) + 316);
    }
    *((_DWORD *)v7 + 870) = v22;
  }
  return result;
}

unint64_t glDrawElements_ACC_Exec(unint64_t result, uint64_t a2, uint64_t a3, int a4, uint64_t a5, __n128 a6, double a7, double a8)
{
  unsigned __int16 *v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  _BYTE *v19;
  int v20;
  int v21;
  uint64_t v22;
  char v23;
  int v24;
  __int16 v25;
  unsigned int v26;
  unsigned int v27;

  v8 = (unsigned __int16 *)(result + 26336);
  if (a2 >= 7)
    goto LABEL_75;
  v9 = result;
  v10 = (_BYTE *)(result + 17692);
  v11 = *(_QWORD *)(result + 26384);
  if ((~*(_DWORD *)(v11 + 904) & 0x900000) != 0 && *(_BYTE *)(result + 17699) != 0
    || (*(_QWORD *)(v11 + 904) & 0x100010000) == 0)
  {
    return result;
  }
  if (a4 != 5123 && a4 != 5121 && a4 != 5125)
  {
LABEL_75:
    if (!*(_WORD *)(result + 29832))
    {
      v25 = 1280;
LABEL_59:
      *(_WORD *)(result + 29832) = v25;
      return result;
    }
    return result;
  }
  if ((int)a3 > 0)
  {
    v16 = *(_QWORD *)(result + 26432);
    if (*(__int16 *)(v16 + 42) != -1 && !*(_BYTE *)(v16 + 41))
    {
      v26 = a3;
      switch((int)a2)
      {
        case 0:
        case 2:
          break;
        case 1:
          v26 = a3 >> 1;
          break;
        case 3:
          v26 = a3 - 1;
          break;
        case 4:
          v26 = a3 / 3;
          break;
        case 5:
        case 6:
          v26 = a3 - 2;
          break;
        default:
          v26 = 0;
          break;
      }
      v27 = v26 + *(_DWORD *)(v16 + 176);
      if (v27 > *(_DWORD *)(v16 + 180))
      {
        if (!*(_WORD *)(result + 29832))
        {
          v25 = 1282;
          goto LABEL_59;
        }
        return result;
      }
      *(_DWORD *)(v16 + 176) = v27;
    }
    v17 = *(_QWORD *)(v11 + 1232);
    if (v17)
      a5 += *(_QWORD *)(v17 + 136);
    *(_QWORD *)(result + 26312) = a5;
    *v8 = a4;
    if ((a4 - 5121) > 4)
      v18 = 1;
    else
      v18 = dword_21B9A4E1C[a4 - 5121];
    v19 = (_BYTE *)(result + 32481);
    if (*(_QWORD *)(v11 + 944))
    {
      v20 = 0;
      *(_DWORD *)(result + 28652) = 0;
      *(_DWORD *)(result + 1532) |= 0x1000u;
    }
    else
    {
      v20 = *(_DWORD *)(result + 28652);
    }
    v21 = 1 << a2;
    if ((v20 & (1 << a2)) != 0
      && (v18 & *(_BYTE *)(result + 28681)) != 0
      && (*(_BYTE *)(result + 28683) & 4) != 0)
    {
      if (*(_BYTE *)(result + 32482))
        return result;
    }
    else
    {
      result = gleDoDrawDispatchCore(result, 1 << a2, v18, 4u, a6, a7, a8);
      if (!(_DWORD)result)
        return result;
    }
    if (*v19)
    {
      if ((*v10 || (*(_WORD *)(v11 + 922) & 0xFFFE) == 0x85BE) && *(_DWORD *)(v11 + 924) && *(_QWORD *)(v11 + 928)
        || (v22 = *(_QWORD *)(v11 + 912), (*(_QWORD *)(v11 + 904) & ~v22) == 0))
      {
        result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD))(v9 + 29232))(*(_QWORD *)(v9 + 29016), 1, a2, 0, a3, *v8, *(_QWORD *)(v9 + 26312), 1, 0);
        if ((_DWORD)result)
          goto LABEL_47;
        v23 = 0;
LABEL_38:
        if ((*((_DWORD *)v8 + 579) & v21) != 0 && (*((_BYTE *)v8 + 2345) & 1) != 0 && (*((_BYTE *)v8 + 2347) & 2) != 0)
        {
          if (!v19[1])
          {
LABEL_42:
            if ((v23 & 1) == 0 && *(_QWORD *)(v11 + 912) && !*(_BYTE *)(v11 + 1216))
              gleSynchronizeBuffersInArray(v9, v11 + 40);
            result = gleDrawArraysOrElements_ExecCore(v9, a2, 0, a3, 1, v11 + 40, 1);
          }
        }
        else
        {
          result = gleDoDrawDispatchCore(v9, 1 << a2, 1u, 2u, a6, a7, a8);
          if ((_DWORD)result)
            goto LABEL_42;
        }
LABEL_47:
        v24 = *(_DWORD *)(*(_QWORD *)(v9 + 19296) + 316);
        if (*((_DWORD *)v8 + 870) != v24)
        {
          if (*(_QWORD *)(v9 + 28960))
          {
            result = gleInvalidateCurrentDrawFramebufferTextures(v9);
            v24 = *(_DWORD *)(*(_QWORD *)(v9 + 19296) + 316);
          }
          *((_DWORD *)v8 + 870) = v24;
        }
        return result;
      }
    }
    else
    {
      v22 = *(_QWORD *)(v11 + 912);
    }
    if (v22 && !*(_BYTE *)(v11 + 1216))
      result = gleSynchronizeBuffersInArray(v9, v11 + 40);
    v23 = 1;
    goto LABEL_38;
  }
  if ((a3 & 0x80000000) != 0 && !*(_WORD *)(result + 29832))
  {
    v25 = 1281;
    goto LABEL_59;
  }
  return result;
}

uint64_t glDrawArrays_IMM_ES2Exec(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int16 *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  int v12;
  int v13;
  uint64_t v14;
  char v15;
  int v16;
  __int16 v17;
  unsigned int v18;
  unsigned int v19;

  v4 = (unsigned __int16 *)(result + 26336);
  if (a2 >= 7)
  {
    if (*(_WORD *)(result + 29832))
      return result;
    v17 = 1280;
    goto LABEL_49;
  }
  if ((int)a4 <= 0)
  {
    if ((a4 & 0x80000000) == 0 || *(_WORD *)(result + 29832))
      return result;
    v17 = 1281;
    goto LABEL_49;
  }
  v8 = result;
  v9 = *(_QWORD *)(result + 26384);
  v10 = *(_QWORD *)(result + 26432);
  if (*(__int16 *)(v10 + 42) != -1 && !*(_BYTE *)(v10 + 41))
  {
    v18 = a4;
    switch((int)a2)
    {
      case 0:
      case 2:
        break;
      case 1:
        v18 = a4 >> 1;
        break;
      case 3:
        v18 = a4 - 1;
        break;
      case 4:
        v18 = a4 / 3;
        break;
      case 5:
      case 6:
        v18 = a4 - 2;
        break;
      default:
        v18 = 0;
        break;
    }
    v19 = v18 + *(_DWORD *)(v10 + 176);
    if (v19 <= *(_DWORD *)(v10 + 180))
    {
      *(_DWORD *)(v10 + 176) = v19;
      goto LABEL_5;
    }
    if (*(_WORD *)(result + 29832))
      return result;
    v17 = 1282;
LABEL_49:
    *(_WORD *)(result + 29832) = v17;
    return result;
  }
LABEL_5:
  if (*v4 != 5375)
  {
    *(_QWORD *)(result + 26312) = 0;
    *v4 = 5375;
  }
  v11 = (_BYTE *)(result + 32481);
  if (*(_QWORD *)(v9 + 944))
  {
    v12 = 0;
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1532) |= 0x1000u;
  }
  else
  {
    v12 = *(_DWORD *)(result + 28652);
  }
  v13 = 1 << a2;
  if ((v12 & (1 << a2)) != 0 && (*(_BYTE *)(result + 28681) & 1) != 0 && (*(_BYTE *)(result + 28683) & 4) != 0)
  {
    if (*(_BYTE *)(result + 32482))
      return result;
  }
  else
  {
    result = gleDoDrawDispatchCoreES2(result, (1 << a2));
    if (!(_DWORD)result)
      return result;
  }
  if (!*v11)
  {
    v14 = *(_QWORD *)(v9 + 912);
LABEL_23:
    if (v14 && !*(_BYTE *)(v9 + 1216))
      result = gleSynchronizeBuffersInArray(v8, v9 + 40);
    v15 = 1;
    goto LABEL_27;
  }
  if (!*(_BYTE *)(v8 + 17692) && (*(_WORD *)(v9 + 922) & 0xFFFE) != 0x85BE
    || !*(_DWORD *)(v9 + 924)
    || !*(_QWORD *)(v9 + 928))
  {
    v14 = *(_QWORD *)(v9 + 912);
    if ((*(_QWORD *)(v9 + 904) & ~v14) != 0)
      goto LABEL_23;
  }
  result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD))(v8 + 29232))(*(_QWORD *)(v8 + 29016), 0, a2, a3, a4, *v4, *(_QWORD *)(v8 + 26312), 1, 0);
  if ((_DWORD)result)
    goto LABEL_36;
  v15 = 0;
LABEL_27:
  if ((*((_DWORD *)v4 + 579) & v13) != 0 && (*((_BYTE *)v4 + 2345) & 1) != 0 && (*((_BYTE *)v4 + 2347) & 2) != 0)
  {
    if (!v11[1])
    {
LABEL_31:
      if ((v15 & 1) == 0 && *(_QWORD *)(v9 + 912) && !*(_BYTE *)(v9 + 1216))
        gleSynchronizeBuffersInArray(v8, v9 + 40);
      result = gleDrawArraysOrElements_ExecCore(v8, a2, a3, a4, 0, v9 + 40, 1);
    }
  }
  else
  {
    result = gleDoDrawDispatchCoreES2(v8, (1 << a2));
    if ((_DWORD)result)
      goto LABEL_31;
  }
LABEL_36:
  v16 = *(_DWORD *)(*(_QWORD *)(v8 + 19296) + 316);
  if (*((_DWORD *)v4 + 870) != v16)
  {
    if (*(_QWORD *)(v8 + 28960))
    {
      result = gleInvalidateCurrentDrawFramebufferTextures(v8);
      v16 = *(_DWORD *)(*(_QWORD *)(v8 + 19296) + 316);
    }
    *((_DWORD *)v4 + 870) = v16;
  }
  return result;
}

uint64_t glDrawElements_IMM_ES2Exec(uint64_t result, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  unsigned __int16 *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  _BYTE *v14;
  int v15;
  int v16;
  uint64_t v17;
  char v18;
  int v19;
  __int16 v20;
  unsigned int v21;
  unsigned int v22;

  v5 = (unsigned __int16 *)(result + 26336);
  if (a2 >= 7)
  {
LABEL_52:
    if (!*(_WORD *)(result + 29832))
    {
      v20 = 1280;
LABEL_67:
      *(_WORD *)(result + 29832) = v20;
      return result;
    }
    return result;
  }
  v8 = result;
  v9 = *(_QWORD *)(result + 26384);
  v10 = *(_QWORD *)(result + 26432);
  v11 = *(unsigned __int16 *)(v10 + 42);
  if (v11 != 0xFFFF && !*(_BYTE *)(v10 + 41))
    goto LABEL_65;
  if (a4 != 5123 && a4 != 5121 && a4 != 5125)
    goto LABEL_52;
  if ((int)a3 > 0)
  {
    if (v11 == 0xFFFF || *(_BYTE *)(v10 + 41))
    {
LABEL_8:
      v12 = *(_QWORD *)(v9 + 1232);
      if (v12)
        a5 += *(_QWORD *)(v12 + 136);
      *(_QWORD *)(result + 26312) = a5;
      *v5 = a4;
      if ((a4 - 5121) > 4)
        LOBYTE(v13) = 1;
      else
        v13 = dword_21B9A4E1C[a4 - 5121];
      v14 = (_BYTE *)(result + 32481);
      if (*(_QWORD *)(v9 + 944))
      {
        v15 = 0;
        *(_DWORD *)(result + 28652) = 0;
        *(_DWORD *)(result + 1532) |= 0x1000u;
      }
      else
      {
        v15 = *(_DWORD *)(result + 28652);
      }
      v16 = 1 << a2;
      if ((v15 & (1 << a2)) != 0
        && (v13 & *(_BYTE *)(result + 28681)) != 0
        && (*(_BYTE *)(result + 28683) & 4) != 0)
      {
        if (*(_BYTE *)(result + 32482))
          return result;
      }
      else
      {
        result = gleDoDrawDispatchCoreES2(result, (1 << a2));
        if (!(_DWORD)result)
          return result;
      }
      if (*v14)
      {
        if ((*(_BYTE *)(v8 + 17692) || (*(_WORD *)(v9 + 922) & 0xFFFE) == 0x85BE)
          && *(_DWORD *)(v9 + 924)
          && *(_QWORD *)(v9 + 928)
          || (v17 = *(_QWORD *)(v9 + 912), (*(_QWORD *)(v9 + 904) & ~v17) == 0))
        {
          result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD))(v8 + 29232))(*(_QWORD *)(v8 + 29016), 1, a2, 0, a3, *v5, *(_QWORD *)(v8 + 26312), 1, 0);
          if ((_DWORD)result)
            goto LABEL_42;
          v18 = 0;
LABEL_33:
          if ((*((_DWORD *)v5 + 579) & v16) != 0
            && (*((_BYTE *)v5 + 2345) & 1) != 0
            && (*((_BYTE *)v5 + 2347) & 2) != 0)
          {
            if (!v14[1])
            {
LABEL_37:
              if ((v18 & 1) == 0 && *(_QWORD *)(v9 + 912) && !*(_BYTE *)(v9 + 1216))
                gleSynchronizeBuffersInArray(v8, v9 + 40);
              result = gleDrawArraysOrElements_ExecCore(v8, a2, 0, a3, 1, v9 + 40, 1);
            }
          }
          else
          {
            result = gleDoDrawDispatchCoreES2(v8, (1 << a2));
            if ((_DWORD)result)
              goto LABEL_37;
          }
LABEL_42:
          v19 = *(_DWORD *)(*(_QWORD *)(v8 + 19296) + 316);
          if (*((_DWORD *)v5 + 870) != v19)
          {
            if (*(_QWORD *)(v8 + 28960))
            {
              result = gleInvalidateCurrentDrawFramebufferTextures(v8);
              v19 = *(_DWORD *)(*(_QWORD *)(v8 + 19296) + 316);
            }
            *((_DWORD *)v5 + 870) = v19;
          }
          return result;
        }
      }
      else
      {
        v17 = *(_QWORD *)(v9 + 912);
      }
      if (v17 && !*(_BYTE *)(v9 + 1216))
        result = gleSynchronizeBuffersInArray(v8, v9 + 40);
      v18 = 1;
      goto LABEL_33;
    }
    v21 = a3;
    switch((int)a2)
    {
      case 0:
      case 2:
        break;
      case 1:
        v21 = a3 >> 1;
        break;
      case 3:
        v21 = a3 - 1;
        break;
      case 4:
        v21 = a3 / 3;
        break;
      case 5:
      case 6:
        v21 = a3 - 2;
        break;
      default:
        v21 = 0;
        break;
    }
    v22 = v21 + *(_DWORD *)(v10 + 176);
    if (v22 <= *(_DWORD *)(v10 + 180))
    {
      *(_DWORD *)(v10 + 176) = v22;
      goto LABEL_8;
    }
LABEL_65:
    if (!*(_WORD *)(result + 29832))
    {
      v20 = 1282;
      goto LABEL_67;
    }
    return result;
  }
  if ((a3 & 0x80000000) != 0 && !*(_WORD *)(result + 29832))
  {
    v20 = 1281;
    goto LABEL_67;
  }
  return result;
}

uint64_t glDrawArraysInstanced_IMM_ES2Exec(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned __int16 *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  int v19;
  __int16 v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;

  v6 = (unsigned __int16 *)(result + 26336);
  if ((int)a5 <= 0)
  {
    if ((a5 & 0x80000000) == 0)
      return result;
LABEL_50:
    if (*(_WORD *)(result + 29832))
      return result;
    v20 = 1281;
    goto LABEL_52;
  }
  if (a2 >= 7)
  {
    if (*(_WORD *)(result + 29832))
      return result;
    v20 = 1280;
    goto LABEL_52;
  }
  if ((int)a4 <= 0)
  {
    if ((a4 & 0x80000000) == 0)
      return result;
    goto LABEL_50;
  }
  v10 = result;
  v11 = *(_QWORD *)(result + 26384);
  v12 = *(_QWORD *)(result + 26432);
  if (*(__int16 *)(v12 + 42) != -1 && !*(_BYTE *)(v12 + 41))
  {
    v21 = a4;
    switch((int)a2)
    {
      case 0:
      case 2:
        break;
      case 1:
        v21 = a4 >> 1;
        break;
      case 3:
        v21 = a4 - 1;
        break;
      case 4:
        v21 = a4 / 3;
        break;
      case 5:
      case 6:
        v21 = a4 - 2;
        break;
      default:
        v21 = 0;
        break;
    }
    v22 = *(_DWORD *)(v12 + 176) + v21 * a5;
    if (v22 <= *(_DWORD *)(v12 + 180))
    {
      *(_DWORD *)(v12 + 176) = v22;
      goto LABEL_6;
    }
    if (*(_WORD *)(result + 29832))
      return result;
    v20 = 1282;
LABEL_52:
    *(_WORD *)(result + 29832) = v20;
    return result;
  }
LABEL_6:
  if (*v6 != 5375)
  {
    *(_QWORD *)(result + 26312) = 0;
    *v6 = 5375;
  }
  v13 = (_BYTE *)(result + 32481);
  if (*(_QWORD *)(v11 + 944))
  {
    v14 = 0;
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1532) |= 0x1000u;
  }
  else
  {
    v14 = *(_DWORD *)(result + 28652);
  }
  v15 = 1 << a2;
  if ((v14 & (1 << a2)) != 0 && (*(_BYTE *)(result + 28681) & 1) != 0 && (*(_BYTE *)(result + 28683) & 4) != 0)
  {
    if (*(_BYTE *)(result + 32482))
      return result;
  }
  else
  {
    result = gleDoDrawDispatchCoreES2(result, (1 << a2));
    if (!(_DWORD)result)
      return result;
  }
  v23 = v11 + 40;
  if (!*v13)
  {
    v16 = *(_QWORD *)(v11 + 912);
LABEL_24:
    v17 = a3;
    if (v16 && !*(_BYTE *)(v11 + 1216))
      result = gleSynchronizeBuffersInArray(v10, v23);
    v18 = 1;
    goto LABEL_28;
  }
  if (!*(_BYTE *)(v10 + 17692) && (*(_WORD *)(v11 + 922) & 0xFFFE) != 0x85BE
    || !*(_DWORD *)(v11 + 924)
    || !*(_QWORD *)(v11 + 928))
  {
    v16 = *(_QWORD *)(v11 + 912);
    if ((*(_QWORD *)(v11 + 904) & ~v16) != 0)
      goto LABEL_24;
  }
  v17 = a3;
  result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD, uint64_t))(v10 + 29232))(*(_QWORD *)(v10 + 29016), 0, a2, a3, a4, *v6, *(_QWORD *)(v10 + 26312), a5, 0, v23);
  if ((_DWORD)result)
    goto LABEL_37;
  v18 = 0;
LABEL_28:
  if ((*((_DWORD *)v6 + 579) & v15) != 0 && (*((_BYTE *)v6 + 2345) & 1) != 0 && (*((_BYTE *)v6 + 2347) & 2) != 0)
  {
    if (!v13[1])
    {
LABEL_32:
      if ((v18 & 1) == 0 && *(_QWORD *)(v11 + 912) && !*(_BYTE *)(v11 + 1216))
        gleSynchronizeBuffersInArray(v10, v23);
      result = gleDrawArraysOrElements_ExecCore(v10, a2, v17, a4, 0, v23, a5);
    }
  }
  else
  {
    result = gleDoDrawDispatchCoreES2(v10, (1 << a2));
    if ((_DWORD)result)
      goto LABEL_32;
  }
LABEL_37:
  v19 = *(_DWORD *)(*(_QWORD *)(v10 + 19296) + 316);
  if (*((_DWORD *)v6 + 870) != v19)
  {
    if (*(_QWORD *)(v10 + 28960))
    {
      result = gleInvalidateCurrentDrawFramebufferTextures(v10);
      v19 = *(_DWORD *)(*(_QWORD *)(v10 + 19296) + 316);
    }
    *((_DWORD *)v6 + 870) = v19;
  }
  return result;
}

uint64_t glDrawElementsInstanced_IMM_ES2Exec(uint64_t result, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  unsigned __int16 *v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  _BYTE *v16;
  int v17;
  int v18;
  uint64_t v19;
  char v20;
  int v21;
  __int16 v22;
  unsigned int v23;
  unsigned int v24;

  v7 = (unsigned __int16 *)(result + 26336);
  if ((int)a6 <= 0)
  {
    if ((a6 & 0x80000000) == 0)
      return result;
  }
  else
  {
    if (a2 >= 7)
      goto LABEL_53;
    v10 = result;
    v11 = *(_QWORD *)(result + 26384);
    v12 = *(_QWORD *)(result + 26432);
    v13 = *(unsigned __int16 *)(v12 + 42);
    if (v13 != 0xFFFF && !*(_BYTE *)(v12 + 41))
      goto LABEL_68;
    if (a4 != 5123 && a4 != 5121 && a4 != 5125)
    {
LABEL_53:
      if (!*(_WORD *)(result + 29832))
      {
        v22 = 1280;
LABEL_70:
        *(_WORD *)(result + 29832) = v22;
        return result;
      }
      return result;
    }
    if ((int)a3 > 0)
    {
      if (v13 == 0xFFFF || *(_BYTE *)(v12 + 41))
      {
LABEL_9:
        v14 = *(_QWORD *)(v11 + 1232);
        if (v14)
          a5 += *(_QWORD *)(v14 + 136);
        *(_QWORD *)(result + 26312) = a5;
        *v7 = a4;
        if ((a4 - 5121) > 4)
          LOBYTE(v15) = 1;
        else
          v15 = dword_21B9A4E1C[a4 - 5121];
        v16 = (_BYTE *)(result + 32481);
        if (*(_QWORD *)(v11 + 944))
        {
          v17 = 0;
          *(_DWORD *)(result + 28652) = 0;
          *(_DWORD *)(result + 1532) |= 0x1000u;
        }
        else
        {
          v17 = *(_DWORD *)(result + 28652);
        }
        v18 = 1 << a2;
        if ((v17 & (1 << a2)) != 0
          && (v15 & *(_BYTE *)(result + 28681)) != 0
          && (*(_BYTE *)(result + 28683) & 4) != 0)
        {
          if (*(_BYTE *)(result + 32482))
            return result;
        }
        else
        {
          result = gleDoDrawDispatchCoreES2(result, (1 << a2));
          if (!(_DWORD)result)
            return result;
        }
        if (*v16)
        {
          if ((*(_BYTE *)(v10 + 17692) || (*(_WORD *)(v11 + 922) & 0xFFFE) == 0x85BE)
            && *(_DWORD *)(v11 + 924)
            && *(_QWORD *)(v11 + 928)
            || (v19 = *(_QWORD *)(v11 + 912), (*(_QWORD *)(v11 + 904) & ~v19) == 0))
          {
            result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD))(v10 + 29232))(*(_QWORD *)(v10 + 29016), 1, a2, 0, a3, *v7, *(_QWORD *)(v10 + 26312), a6, 0);
            if ((_DWORD)result)
              goto LABEL_43;
            v20 = 0;
LABEL_34:
            if ((*((_DWORD *)v7 + 579) & v18) != 0
              && (*((_BYTE *)v7 + 2345) & 1) != 0
              && (*((_BYTE *)v7 + 2347) & 2) != 0)
            {
              if (!v16[1])
              {
LABEL_38:
                if ((v20 & 1) == 0 && *(_QWORD *)(v11 + 912) && !*(_BYTE *)(v11 + 1216))
                  gleSynchronizeBuffersInArray(v10, v11 + 40);
                result = gleDrawArraysOrElements_ExecCore(v10, a2, 0, a3, 1, v11 + 40, a6);
              }
            }
            else
            {
              result = gleDoDrawDispatchCoreES2(v10, (1 << a2));
              if ((_DWORD)result)
                goto LABEL_38;
            }
LABEL_43:
            v21 = *(_DWORD *)(*(_QWORD *)(v10 + 19296) + 316);
            if (*((_DWORD *)v7 + 870) != v21)
            {
              if (*(_QWORD *)(v10 + 28960))
              {
                result = gleInvalidateCurrentDrawFramebufferTextures(v10);
                v21 = *(_DWORD *)(*(_QWORD *)(v10 + 19296) + 316);
              }
              *((_DWORD *)v7 + 870) = v21;
            }
            return result;
          }
        }
        else
        {
          v19 = *(_QWORD *)(v11 + 912);
        }
        if (v19 && !*(_BYTE *)(v11 + 1216))
          result = gleSynchronizeBuffersInArray(v10, v11 + 40);
        v20 = 1;
        goto LABEL_34;
      }
      v23 = a3;
      switch((int)a2)
      {
        case 0:
        case 2:
          break;
        case 1:
          v23 = a3 >> 1;
          break;
        case 3:
          v23 = a3 - 1;
          break;
        case 4:
          v23 = a3 / 3;
          break;
        case 5:
        case 6:
          v23 = a3 - 2;
          break;
        default:
          v23 = 0;
          break;
      }
      v24 = *(_DWORD *)(v12 + 176) + v23 * a6;
      if (v24 <= *(_DWORD *)(v12 + 180))
      {
        *(_DWORD *)(v12 + 176) = v24;
        goto LABEL_9;
      }
LABEL_68:
      if (!*(_WORD *)(result + 29832))
      {
        v22 = 1282;
        goto LABEL_70;
      }
      return result;
    }
    if ((a3 & 0x80000000) == 0)
      return result;
  }
  if (!*(_WORD *)(result + 29832))
  {
    v22 = 1281;
    goto LABEL_70;
  }
  return result;
}

uint64_t glDrawRangeElements_IMM_ES2Exec(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5, int a6, uint64_t a7)
{
  unsigned __int16 *v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  int v15;
  _BYTE *v16;
  int v17;
  int v18;
  uint64_t v19;
  char v20;
  int v21;
  __int16 v22;

  v7 = (unsigned __int16 *)(result + 26336);
  if (a2 >= 7)
    goto LABEL_61;
  v10 = result;
  v11 = *(_QWORD *)(result + 26384);
  v12 = *(_QWORD *)(result + 26432);
  if (*(__int16 *)(v12 + 42) != -1 && !*(_BYTE *)(v12 + 41))
  {
    if (!*(_WORD *)(result + 29832))
    {
      v22 = 1282;
      goto LABEL_58;
    }
    return result;
  }
  if (a6 != 5123 && a6 != 5121 && a6 != 5125)
  {
LABEL_61:
    if (!*(_WORD *)(result + 29832))
    {
      v22 = 1280;
LABEL_58:
      *(_WORD *)(result + 29832) = v22;
      return result;
    }
    return result;
  }
  if ((int)a5 <= 0)
  {
    if ((a5 & 0x80000000) == 0)
      return result;
  }
  else if (a4 >= a3)
  {
    v13 = (_BYTE *)(result + 17692);
    v14 = *(_QWORD *)(v11 + 1232);
    if (v14)
      a7 += *(_QWORD *)(v14 + 136);
    *(_QWORD *)(result + 26312) = a7;
    *v7 = a6;
    *(_DWORD *)(result + 26320) = a3;
    *(_DWORD *)(result + 26324) = a4;
    if ((a6 - 5121) > 4)
      LOBYTE(v15) = 1;
    else
      v15 = dword_21B9A4E1C[a6 - 5121];
    v16 = (_BYTE *)(result + 32481);
    if (*(_QWORD *)(v11 + 944))
    {
      v17 = 0;
      *(_DWORD *)(result + 28652) = 0;
      *(_DWORD *)(result + 1532) |= 0x1000u;
    }
    else
    {
      v17 = *(_DWORD *)(result + 28652);
    }
    v18 = 1 << a2;
    if ((v17 & (1 << a2)) != 0
      && (v15 & *(_BYTE *)(result + 28681)) != 0
      && (*(_BYTE *)(result + 28683) & 4) != 0)
    {
      if (*(_BYTE *)(result + 32482))
        return result;
    }
    else
    {
      result = gleDoDrawDispatchCoreES2(result, (1 << a2));
      if (!(_DWORD)result)
        return result;
    }
    if (*v16)
    {
      if ((*v13 || (*(_WORD *)(v11 + 922) & 0xFFFE) == 0x85BE) && *(_DWORD *)(v11 + 924) && *(_QWORD *)(v11 + 928)
        || (v19 = *(_QWORD *)(v11 + 912), (*(_QWORD *)(v11 + 904) & ~v19) == 0))
      {
        result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD))(v10 + 29232))(*(_QWORD *)(v10 + 29016), 3, a2, 0, a5, *v7, *(_QWORD *)(v10 + 26312), 1, 0);
        if ((_DWORD)result)
          goto LABEL_41;
        v20 = 0;
LABEL_32:
        if ((*((_DWORD *)v7 + 579) & v18) != 0 && (*((_BYTE *)v7 + 2345) & 1) != 0 && (*((_BYTE *)v7 + 2347) & 2) != 0)
        {
          if (!v16[1])
          {
LABEL_36:
            if ((v20 & 1) == 0 && *(_QWORD *)(v11 + 912) && !*(_BYTE *)(v11 + 1216))
              gleSynchronizeBuffersInArray(v10, v11 + 40);
            result = gleDrawArraysOrElements_ExecCore(v10, a2, 0, a5, 3, v11 + 40, 1);
          }
        }
        else
        {
          result = gleDoDrawDispatchCoreES2(v10, (1 << a2));
          if ((_DWORD)result)
            goto LABEL_36;
        }
LABEL_41:
        v21 = *(_DWORD *)(*(_QWORD *)(v10 + 19296) + 316);
        if (*((_DWORD *)v7 + 870) != v21)
        {
          if (*(_QWORD *)(v10 + 28960))
          {
            result = gleInvalidateCurrentDrawFramebufferTextures(v10);
            v21 = *(_DWORD *)(*(_QWORD *)(v10 + 19296) + 316);
          }
          *((_DWORD *)v7 + 870) = v21;
        }
        return result;
      }
    }
    else
    {
      v19 = *(_QWORD *)(v11 + 912);
    }
    if (v19 && !*(_BYTE *)(v11 + 1216))
      result = gleSynchronizeBuffersInArray(v10, v11 + 40);
    v20 = 1;
    goto LABEL_32;
  }
  if (!*(_WORD *)(result + 29832))
  {
    v22 = 1281;
    goto LABEL_58;
  }
  return result;
}

unint64_t glDrawArrays_IMM_Exec(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, __n128 a5, double a6, double a7)
{
  unsigned __int16 *v7;
  unint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v16;
  _BYTE *v17;
  int v18;
  int v19;
  uint64_t v20;
  char v21;
  int v22;
  __int16 v23;
  unsigned int v24;
  unsigned int v25;

  v7 = (unsigned __int16 *)(result + 26336);
  if (a2 >= 7)
  {
    if (*(_WORD *)(result + 29832))
      return result;
    v23 = 1280;
    goto LABEL_53;
  }
  v8 = result;
  v9 = (_BYTE *)(result + 17692);
  v10 = *(_QWORD *)(result + 26384);
  if ((~*(_DWORD *)(v10 + 904) & 0x900000) != 0 && *(_BYTE *)(result + 17699) != 0
    || (*(_QWORD *)(v10 + 904) & 0x100010000) == 0)
  {
    return result;
  }
  if ((int)a4 <= 0)
  {
    if ((a4 & 0x80000000) == 0 || *(_WORD *)(result + 29832))
      return result;
    v23 = 1281;
    goto LABEL_53;
  }
  v16 = *(_QWORD *)(result + 26432);
  if (*(__int16 *)(v16 + 42) != -1 && !*(_BYTE *)(v16 + 41))
  {
    v24 = a4;
    switch((int)a2)
    {
      case 0:
      case 2:
        break;
      case 1:
        v24 = a4 >> 1;
        break;
      case 3:
        v24 = a4 - 1;
        break;
      case 4:
        v24 = a4 / 3;
        break;
      case 5:
      case 6:
        v24 = a4 - 2;
        break;
      default:
        v24 = 0;
        break;
    }
    v25 = v24 + *(_DWORD *)(v16 + 176);
    if (v25 <= *(_DWORD *)(v16 + 180))
    {
      *(_DWORD *)(v16 + 176) = v25;
      goto LABEL_12;
    }
    if (*(_WORD *)(result + 29832))
      return result;
    v23 = 1282;
LABEL_53:
    *(_WORD *)(result + 29832) = v23;
    return result;
  }
LABEL_12:
  if (*v7 != 5375)
  {
    *(_QWORD *)(result + 26312) = 0;
    *v7 = 5375;
  }
  v17 = (_BYTE *)(result + 32481);
  if (*(_QWORD *)(v10 + 944))
  {
    v18 = 0;
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1532) |= 0x1000u;
  }
  else
  {
    v18 = *(_DWORD *)(result + 28652);
  }
  v19 = 1 << a2;
  if ((v18 & (1 << a2)) != 0 && (*(_BYTE *)(result + 28681) & 1) != 0 && (*(_BYTE *)(result + 28683) & 4) != 0)
  {
    if (*(_BYTE *)(result + 32482))
      return result;
  }
  else
  {
    result = gleDoDrawDispatchCore(result, 1 << a2, 1u, 4u, a5, a6, a7);
    if (!(_DWORD)result)
      return result;
  }
  if (!*v17)
  {
    v20 = *(_QWORD *)(v10 + 912);
LABEL_30:
    if (v20 && !*(_BYTE *)(v10 + 1216))
      result = gleSynchronizeBuffersInArray(v8, v10 + 40);
    v21 = 1;
    goto LABEL_34;
  }
  if (!*v9 && (*(_WORD *)(v10 + 922) & 0xFFFE) != 0x85BE || !*(_DWORD *)(v10 + 924) || !*(_QWORD *)(v10 + 928))
  {
    v20 = *(_QWORD *)(v10 + 912);
    if ((*(_QWORD *)(v10 + 904) & ~v20) != 0)
      goto LABEL_30;
  }
  result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD))(v8 + 29232))(*(_QWORD *)(v8 + 29016), 0, a2, a3, a4, *v7, *(_QWORD *)(v8 + 26312), 1, 0);
  if ((_DWORD)result)
    goto LABEL_43;
  v21 = 0;
LABEL_34:
  if ((*((_DWORD *)v7 + 579) & v19) != 0 && (*((_BYTE *)v7 + 2345) & 1) != 0 && (*((_BYTE *)v7 + 2347) & 2) != 0)
  {
    if (!v17[1])
    {
LABEL_38:
      if ((v21 & 1) == 0 && *(_QWORD *)(v10 + 912) && !*(_BYTE *)(v10 + 1216))
        gleSynchronizeBuffersInArray(v8, v10 + 40);
      result = gleDrawArraysOrElements_ExecCore(v8, a2, a3, a4, 0, v10 + 40, 1);
    }
  }
  else
  {
    result = gleDoDrawDispatchCore(v8, 1 << a2, 1u, 2u, a5, a6, a7);
    if ((_DWORD)result)
      goto LABEL_38;
  }
LABEL_43:
  v22 = *(_DWORD *)(*(_QWORD *)(v8 + 19296) + 316);
  if (*((_DWORD *)v7 + 870) != v22)
  {
    if (*(_QWORD *)(v8 + 28960))
    {
      result = gleInvalidateCurrentDrawFramebufferTextures(v8);
      v22 = *(_DWORD *)(*(_QWORD *)(v8 + 19296) + 316);
    }
    *((_DWORD *)v7 + 870) = v22;
  }
  return result;
}

unint64_t glDrawElements_IMM_Exec(unint64_t result, uint64_t a2, uint64_t a3, int a4, uint64_t a5, __n128 a6, double a7, double a8)
{
  unsigned __int16 *v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  _BYTE *v19;
  int v20;
  int v21;
  uint64_t v22;
  char v23;
  int v24;
  __int16 v25;
  unsigned int v26;
  unsigned int v27;

  v8 = (unsigned __int16 *)(result + 26336);
  if (a2 >= 7)
    goto LABEL_75;
  v9 = result;
  v10 = (_BYTE *)(result + 17692);
  v11 = *(_QWORD *)(result + 26384);
  if ((~*(_DWORD *)(v11 + 904) & 0x900000) != 0 && *(_BYTE *)(result + 17699) != 0
    || (*(_QWORD *)(v11 + 904) & 0x100010000) == 0)
  {
    return result;
  }
  if (a4 != 5123 && a4 != 5121 && a4 != 5125)
  {
LABEL_75:
    if (!*(_WORD *)(result + 29832))
    {
      v25 = 1280;
LABEL_59:
      *(_WORD *)(result + 29832) = v25;
      return result;
    }
    return result;
  }
  if ((int)a3 > 0)
  {
    v16 = *(_QWORD *)(result + 26432);
    if (*(__int16 *)(v16 + 42) != -1 && !*(_BYTE *)(v16 + 41))
    {
      v26 = a3;
      switch((int)a2)
      {
        case 0:
        case 2:
          break;
        case 1:
          v26 = a3 >> 1;
          break;
        case 3:
          v26 = a3 - 1;
          break;
        case 4:
          v26 = a3 / 3;
          break;
        case 5:
        case 6:
          v26 = a3 - 2;
          break;
        default:
          v26 = 0;
          break;
      }
      v27 = v26 + *(_DWORD *)(v16 + 176);
      if (v27 > *(_DWORD *)(v16 + 180))
      {
        if (!*(_WORD *)(result + 29832))
        {
          v25 = 1282;
          goto LABEL_59;
        }
        return result;
      }
      *(_DWORD *)(v16 + 176) = v27;
    }
    v17 = *(_QWORD *)(v11 + 1232);
    if (v17)
      a5 += *(_QWORD *)(v17 + 136);
    *(_QWORD *)(result + 26312) = a5;
    *v8 = a4;
    if ((a4 - 5121) > 4)
      v18 = 1;
    else
      v18 = dword_21B9A4E1C[a4 - 5121];
    v19 = (_BYTE *)(result + 32481);
    if (*(_QWORD *)(v11 + 944))
    {
      v20 = 0;
      *(_DWORD *)(result + 28652) = 0;
      *(_DWORD *)(result + 1532) |= 0x1000u;
    }
    else
    {
      v20 = *(_DWORD *)(result + 28652);
    }
    v21 = 1 << a2;
    if ((v20 & (1 << a2)) != 0
      && (v18 & *(_BYTE *)(result + 28681)) != 0
      && (*(_BYTE *)(result + 28683) & 4) != 0)
    {
      if (*(_BYTE *)(result + 32482))
        return result;
    }
    else
    {
      result = gleDoDrawDispatchCore(result, 1 << a2, v18, 4u, a6, a7, a8);
      if (!(_DWORD)result)
        return result;
    }
    if (*v19)
    {
      if ((*v10 || (*(_WORD *)(v11 + 922) & 0xFFFE) == 0x85BE) && *(_DWORD *)(v11 + 924) && *(_QWORD *)(v11 + 928)
        || (v22 = *(_QWORD *)(v11 + 912), (*(_QWORD *)(v11 + 904) & ~v22) == 0))
      {
        result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD))(v9 + 29232))(*(_QWORD *)(v9 + 29016), 1, a2, 0, a3, *v8, *(_QWORD *)(v9 + 26312), 1, 0);
        if ((_DWORD)result)
          goto LABEL_47;
        v23 = 0;
LABEL_38:
        if ((*((_DWORD *)v8 + 579) & v21) != 0 && (*((_BYTE *)v8 + 2345) & 1) != 0 && (*((_BYTE *)v8 + 2347) & 2) != 0)
        {
          if (!v19[1])
          {
LABEL_42:
            if ((v23 & 1) == 0 && *(_QWORD *)(v11 + 912) && !*(_BYTE *)(v11 + 1216))
              gleSynchronizeBuffersInArray(v9, v11 + 40);
            result = gleDrawArraysOrElements_ExecCore(v9, a2, 0, a3, 1, v11 + 40, 1);
          }
        }
        else
        {
          result = gleDoDrawDispatchCore(v9, 1 << a2, 1u, 2u, a6, a7, a8);
          if ((_DWORD)result)
            goto LABEL_42;
        }
LABEL_47:
        v24 = *(_DWORD *)(*(_QWORD *)(v9 + 19296) + 316);
        if (*((_DWORD *)v8 + 870) != v24)
        {
          if (*(_QWORD *)(v9 + 28960))
          {
            result = gleInvalidateCurrentDrawFramebufferTextures(v9);
            v24 = *(_DWORD *)(*(_QWORD *)(v9 + 19296) + 316);
          }
          *((_DWORD *)v8 + 870) = v24;
        }
        return result;
      }
    }
    else
    {
      v22 = *(_QWORD *)(v11 + 912);
    }
    if (v22 && !*(_BYTE *)(v11 + 1216))
      result = gleSynchronizeBuffersInArray(v9, v11 + 40);
    v23 = 1;
    goto LABEL_38;
  }
  if ((a3 & 0x80000000) != 0 && !*(_WORD *)(result + 29832))
  {
    v25 = 1281;
    goto LABEL_59;
  }
  return result;
}

uint64_t glVertexAttrib1fARB_Exec(uint64_t result, unsigned int a2, float a3)
{
  uint64_t v3;
  uint64_t v4;

  if (a2 >= 0x10)
  {
    if (!*(_WORD *)(result + 29832))
      *(_WORD *)(result + 29832) = 1281;
  }
  else
  {
    v3 = result + 32 * a2;
    *(float *)(v3 + 8688) = a3;
    v4 = *(_QWORD *)(result + 288);
    *(_DWORD *)(v3 + 8692) = v4;
    *(_QWORD *)(v3 + 8696) = v4;
  }
  return result;
}

float *glVertexAttrib1fARB_Comp(uint64_t a1, int a2, float a3)
{
  float *result;

  result = (float *)gleAddCommand(a1, (uint64_t)glVertexAttrib1fvARB_ListExec, 8);
  *(_DWORD *)result = a2;
  result[1] = a3;
  return result;
}

uint64_t glVertexAttrib1fvARB_ListExec(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a2;
  if (v2 >= 0x10)
  {
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1281;
  }
  else
  {
    v3 = a1 + 32 * v2;
    *(_DWORD *)(v3 + 8688) = a2[1];
    v4 = *(_QWORD *)(a1 + 288);
    *(_DWORD *)(v3 + 8692) = v4;
    *(_QWORD *)(v3 + 8696) = v4;
  }
  return 8;
}

uint64_t glVertexAttrib2fARB_Exec(uint64_t result, unsigned int a2, float a3, float a4)
{
  uint64_t v4;

  if (a2 >= 0x10)
  {
    if (!*(_WORD *)(result + 29832))
      *(_WORD *)(result + 29832) = 1281;
  }
  else
  {
    v4 = result + 32 * a2;
    *(float *)(v4 + 8688) = a3;
    *(float *)(v4 + 8692) = a4;
    *(_QWORD *)(v4 + 8696) = *(_QWORD *)(result + 288);
  }
  return result;
}

float *glVertexAttrib2fARB_Comp(uint64_t a1, int a2, float a3, float a4)
{
  float *result;

  result = (float *)gleAddCommand(a1, (uint64_t)glVertexAttrib2fvARB_ListExec, 12);
  *(_DWORD *)result = a2;
  result[1] = a3;
  result[2] = a4;
  return result;
}

uint64_t glVertexAttrib2fvARB_ListExec(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  v2 = *a2;
  if (v2 >= 0x10)
  {
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1281;
  }
  else
  {
    v3 = *(_DWORD *)(a1 + 292);
    v4 = a1 + 32 * v2;
    *(_QWORD *)(v4 + 8688) = *(_QWORD *)(a2 + 1);
    *(_DWORD *)(v4 + 8696) = 0;
    *(_DWORD *)(v4 + 8700) = v3;
  }
  return 12;
}

uint64_t glVertexAttrib3fARB_Exec(uint64_t result, unsigned int a2, float a3, float a4, float a5)
{
  int v5;
  uint64_t v6;

  if (a2 >= 0x10)
  {
    if (!*(_WORD *)(result + 29832))
      *(_WORD *)(result + 29832) = 1281;
  }
  else
  {
    v5 = *(_DWORD *)(result + 292);
    v6 = result + 32 * a2;
    *(float *)(v6 + 8688) = a3;
    *(float *)(v6 + 8692) = a4;
    *(float *)(v6 + 8696) = a5;
    *(_DWORD *)(v6 + 8700) = v5;
  }
  return result;
}

float *glVertexAttrib3fARB_Comp(uint64_t a1, int a2, float a3, float a4, float a5)
{
  float *result;

  result = (float *)gleAddCommand(a1, (uint64_t)glVertexAttrib3fvARB_ListExec, 16);
  *(_DWORD *)result = a2;
  result[1] = a3;
  result[2] = a4;
  result[3] = a5;
  return result;
}

uint64_t glVertexAttrib3fvARB_ListExec(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  int v5;

  v2 = *a2;
  if (v2 >= 0x10)
  {
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1281;
  }
  else
  {
    v3 = a1 + 32 * v2;
    v4 = a2[3];
    v5 = *(_DWORD *)(a1 + 292);
    *(_QWORD *)(v3 + 8688) = *(_QWORD *)(a2 + 1);
    *(_DWORD *)(v3 + 8696) = v4;
    *(_DWORD *)(v3 + 8700) = v5;
  }
  return 16;
}

uint64_t glVertexAttrib4fARB_Exec(uint64_t result, unsigned int a2, float a3, float a4, float a5, float a6)
{
  float *v6;

  if (a2 >= 0x10)
  {
    if (!*(_WORD *)(result + 29832))
      *(_WORD *)(result + 29832) = 1281;
  }
  else
  {
    v6 = (float *)(result + 32 * a2);
    v6[2172] = a3;
    v6[2173] = a4;
    v6[2174] = a5;
    v6[2175] = a6;
  }
  return result;
}

float *glVertexAttrib4fARB_Comp(uint64_t a1, int a2, float a3, float a4, float a5, float a6)
{
  float *result;

  result = (float *)gleAddCommand(a1, (uint64_t)glVertexAttrib4fvARB_ListExec, 20);
  *(_DWORD *)result = a2;
  result[1] = a3;
  result[2] = a4;
  result[3] = a5;
  result[4] = a6;
  return result;
}

uint64_t glVertexAttrib4fvARB_ListExec(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;

  v2 = *a2;
  if (v2 >= 0x10)
  {
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1281;
  }
  else
  {
    *(_OWORD *)(a1 + 32 * v2 + 8688) = *(_OWORD *)(a2 + 1);
  }
  return 20;
}

uint64_t glVertexAttrib1fvARB_Exec(uint64_t result, unsigned int a2, _DWORD *a3)
{
  uint64_t v3;
  uint64_t v4;

  if (a2 >= 0x10)
  {
    if (!*(_WORD *)(result + 29832))
      *(_WORD *)(result + 29832) = 1281;
  }
  else
  {
    v3 = result + 32 * a2;
    *(_DWORD *)(v3 + 8688) = *a3;
    v4 = *(_QWORD *)(result + 288);
    *(_DWORD *)(v3 + 8692) = v4;
    *(_QWORD *)(v3 + 8696) = v4;
  }
  return result;
}

float glVertexAttrib1fvARB_Comp(uint64_t a1, int a2, float *a3)
{
  _DWORD *v5;
  float result;

  v5 = gleAddCommand(a1, (uint64_t)glVertexAttrib1fvARB_ListExec, 8);
  *v5 = a2;
  result = *a3;
  v5[1] = *(_DWORD *)a3;
  return result;
}

uint64_t glVertexAttrib2fvARB_Exec(uint64_t result, unsigned int a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;

  if (a2 >= 0x10)
  {
    if (!*(_WORD *)(result + 29832))
      *(_WORD *)(result + 29832) = 1281;
  }
  else
  {
    v3 = *(_DWORD *)(result + 292);
    v4 = result + 32 * a2;
    *(_QWORD *)(v4 + 8688) = *a3;
    *(_DWORD *)(v4 + 8696) = 0;
    *(_DWORD *)(v4 + 8700) = v3;
  }
  return result;
}

float glVertexAttrib2fvARB_Comp(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD *v5;
  float result;

  v5 = gleAddCommand(a1, (uint64_t)glVertexAttrib2fvARB_ListExec, 12);
  *(_DWORD *)v5 = a2;
  *((_DWORD *)v5 + 1) = *(_DWORD *)a3;
  result = *(float *)(a3 + 4);
  *((float *)v5 + 2) = result;
  return result;
}

uint64_t glVertexAttrib3fvARB_Exec(uint64_t result, unsigned int a2, uint64_t a3)
{
  int v3;
  int v4;
  uint64_t v5;

  if (a2 >= 0x10)
  {
    if (!*(_WORD *)(result + 29832))
      *(_WORD *)(result + 29832) = 1281;
  }
  else
  {
    v3 = *(_DWORD *)(a3 + 8);
    v4 = *(_DWORD *)(result + 292);
    v5 = result + 32 * a2;
    *(_QWORD *)(v5 + 8688) = *(_QWORD *)a3;
    *(_DWORD *)(v5 + 8696) = v3;
    *(_DWORD *)(v5 + 8700) = v4;
  }
  return result;
}

float glVertexAttrib3fvARB_Comp(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD *v5;
  float result;

  v5 = gleAddCommand(a1, (uint64_t)glVertexAttrib3fvARB_ListExec, 16);
  *(_DWORD *)v5 = a2;
  *((_DWORD *)v5 + 1) = *(_DWORD *)a3;
  *((_DWORD *)v5 + 2) = *(_DWORD *)(a3 + 4);
  result = *(float *)(a3 + 8);
  *((float *)v5 + 3) = result;
  return result;
}

uint64_t glVertexAttrib4fvARB_Exec(uint64_t result, unsigned int a2, _OWORD *a3)
{
  if (a2 >= 0x10)
  {
    if (!*(_WORD *)(result + 29832))
      *(_WORD *)(result + 29832) = 1281;
  }
  else
  {
    *(_OWORD *)(result + 32 * a2 + 8688) = *a3;
  }
  return result;
}

float glVertexAttrib4fvARB_Comp(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD *v5;
  float result;

  v5 = gleAddCommand(a1, (uint64_t)glVertexAttrib4fvARB_ListExec, 20);
  *(_DWORD *)v5 = a2;
  *((_DWORD *)v5 + 1) = *(_DWORD *)a3;
  *((_DWORD *)v5 + 2) = *(_DWORD *)(a3 + 4);
  *((_DWORD *)v5 + 3) = *(_DWORD *)(a3 + 8);
  result = *(float *)(a3 + 12);
  *((float *)v5 + 4) = result;
  return result;
}

uint64_t glVertexAttribI4iEXT_Exec(uint64_t result, unsigned int a2, int a3, int a4, int a5, int a6)
{
  _DWORD *v6;

  if (a2 >= 0x10)
  {
    if (!*(_WORD *)(result + 29832))
      *(_WORD *)(result + 29832) = 1281;
  }
  else
  {
    v6 = (_DWORD *)(result + 32 * a2);
    v6[2172] = a3;
    v6[2173] = a4;
    v6[2174] = a5;
    v6[2175] = a6;
  }
  return result;
}

_DWORD *glVertexAttribI4iEXT_Comp(uint64_t a1, int a2, int a3, int a4, int a5, int a6)
{
  _DWORD *result;

  result = gleAddCommand(a1, (uint64_t)glVertexAttribI4ivEXT_ListExec, 20);
  *result = a2;
  result[1] = a3;
  result[2] = a4;
  result[3] = a5;
  result[4] = a6;
  return result;
}

uint64_t glVertexAttribI4ivEXT_ListExec(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  if (v2 >= 0x10)
  {
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1281;
  }
  else
  {
    v3 = a1 + 32 * v2;
    *(_QWORD *)(v3 + 8688) = *(_QWORD *)(a2 + 1);
    *(_QWORD *)(v3 + 8696) = *(_QWORD *)(a2 + 3);
  }
  return 20;
}

uint64_t glVertexAttribI4uiEXT_Exec(uint64_t result, unsigned int a2, int a3, int a4, int a5, int a6)
{
  _DWORD *v6;

  if (a2 >= 0x10)
  {
    if (!*(_WORD *)(result + 29832))
      *(_WORD *)(result + 29832) = 1281;
  }
  else
  {
    v6 = (_DWORD *)(result + 32 * a2);
    v6[2172] = a3;
    v6[2173] = a4;
    v6[2174] = a5;
    v6[2175] = a6;
  }
  return result;
}

_DWORD *glVertexAttribI4uiEXT_Comp(uint64_t a1, int a2, int a3, int a4, int a5, int a6)
{
  _DWORD *result;

  result = gleAddCommand(a1, (uint64_t)glVertexAttribI4uivEXT_ListExec, 20);
  *result = a2;
  result[1] = a3;
  result[2] = a4;
  result[3] = a5;
  result[4] = a6;
  return result;
}

uint64_t glVertexAttribI4uivEXT_ListExec(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  if (v2 >= 0x10)
  {
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1281;
  }
  else
  {
    v3 = a1 + 32 * v2;
    *(_QWORD *)(v3 + 8688) = *(_QWORD *)(a2 + 1);
    *(_QWORD *)(v3 + 8696) = *(_QWORD *)(a2 + 3);
  }
  return 20;
}

uint64_t glVertexAttribI4ivEXT_Exec(uint64_t result, unsigned int a2, _QWORD *a3)
{
  uint64_t v3;

  if (a2 >= 0x10)
  {
    if (!*(_WORD *)(result + 29832))
      *(_WORD *)(result + 29832) = 1281;
  }
  else
  {
    v3 = result + 32 * a2;
    *(_QWORD *)(v3 + 8688) = *a3;
    *(_QWORD *)(v3 + 8696) = a3[1];
  }
  return result;
}

_DWORD *glVertexAttribI4ivEXT_Comp(uint64_t a1, int a2, _DWORD *a3)
{
  _DWORD *result;

  result = gleAddCommand(a1, (uint64_t)glVertexAttribI4ivEXT_ListExec, 20);
  *result = a2;
  result[1] = *a3;
  result[2] = a3[1];
  result[3] = a3[2];
  result[4] = a3[3];
  return result;
}

uint64_t glVertexAttribI4uivEXT_Exec(uint64_t result, unsigned int a2, _QWORD *a3)
{
  uint64_t v3;

  if (a2 >= 0x10)
  {
    if (!*(_WORD *)(result + 29832))
      *(_WORD *)(result + 29832) = 1281;
  }
  else
  {
    v3 = result + 32 * a2;
    *(_QWORD *)(v3 + 8688) = *a3;
    *(_QWORD *)(v3 + 8696) = a3[1];
  }
  return result;
}

_DWORD *glVertexAttribI4uivEXT_Comp(uint64_t a1, int a2, _DWORD *a3)
{
  _DWORD *result;

  result = gleAddCommand(a1, (uint64_t)glVertexAttribI4uivEXT_ListExec, 20);
  *result = a2;
  result[1] = *a3;
  result[2] = a3[1];
  result[3] = a3[2];
  result[4] = a3[3];
  return result;
}

void glBindVertexArray_Exec(uint64_t a1, unsigned int a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  gleBindVertexArray(a1, a2);
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
}

void glDeleteVertexArrays_Exec(uint64_t a1, unsigned int a2, unsigned int *a3)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;

  if ((a2 & 0x80000000) != 0)
  {
    if (!*(_WORD *)(a1 + 29832))
      *(_WORD *)(a1 + 29832) = 1281;
  }
  else
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (a2)
    {
      v6 = a2;
      do
      {
        v8 = *a3++;
        v7 = v8;
        if (v8)
        {
          v9 = *(_QWORD *)(a1 + 26384);
          if (v9)
          {
            if (v7 == *(_DWORD *)(v9 + 16))
            {
              gleBindVertexArray(a1, 0);
              if (*(_QWORD *)(a1 + 27648))
                *(_QWORD *)(a1 + 26448) = *(_QWORD *)(a1 + 26456);
            }
          }
          v10 = gleDeleteHashNameAndObject_NoDecrement(a1 + 26352, v7);
          if (v10)
          {
            v11 = *((_DWORD *)v10 + 5) - 1;
            *((_DWORD *)v10 + 5) = v11;
            if (v11)
              gleUnbindVertexArrayObject(a1, (uint64_t)v10);
            else
              gleUnbindAndFreeVertexArrayObject(a1, (char *)v10);
          }
        }
        --v6;
      }
      while (v6);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  }
}

uint64_t glGenVertexArrays_Exec(uint64_t result, unsigned int a2, _DWORD *a3)
{
  uint64_t v5;

  if ((a2 & 0x80000000) != 0)
  {
    if (!*(_WORD *)(result + 29832))
      *(_WORD *)(result + 29832) = 1281;
  }
  else
  {
    result = gleGenHashNames(result + 26352, a2);
    if ((_DWORD)result && a2)
    {
      v5 = a2;
      do
      {
        *a3++ = result;
        result = (result + 1);
        --v5;
      }
      while (v5);
    }
  }
  return result;
}

BOOL glIsVertexArray_Exec(uint64_t a1, unsigned int a2)
{
  return gleLookupHashObject(a1 + 26352, a2) != 0;
}

uint64_t *glDeleteVertexArrays_ExecThread(uint64_t *result, unsigned int a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t *v9;

  v3 = (uint64_t)result;
  if ((a2 & 0x80000000) != 0)
  {
    if (!*((_WORD *)result + 14916))
      *((_WORD *)result + 14916) = 1281;
  }
  else if (a2)
  {
    v5 = a2;
    do
    {
      v7 = *a3++;
      v6 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(v3 + 26448);
        if (v8 && v6 == *(_DWORD *)(*(_QWORD *)(v8 + 1088) + 16))
          gleBindVertexArray_Thread(v3, 0);
        result = gleDeleteHashNameAndObject_NoDecrement(v3 + 26352, v6);
        if (result)
        {
          v9 = result;
          result = gleAddCommand(v3, (uint64_t)gleDeleteVertexArrayObject_UnpackThread, 8);
          *result = (uint64_t)v9;
        }
      }
      --v5;
    }
    while (v5);
  }
  return result;
}

BOOL glIsVertexArray_ExecThread(uint64_t a1, unsigned int a2)
{
  return gleLookupHashObject(a1 + 26352, a2) != 0;
}

_QWORD *glEnableVertexAttribArrayARB_PackThread(_QWORD *result, unsigned int a2)
{
  _QWORD *v2;
  __int16 *v4;
  __int16 v5;

  v2 = result;
  if (!result[3306])
  {
    v4 = (__int16 *)(result + 3729);
    if (*((_WORD *)result + 14916))
      return result;
    v5 = 1282;
    goto LABEL_7;
  }
  if (a2 >= 0x10)
  {
    v4 = (__int16 *)(result + 3729);
    if (*((_WORD *)result + 14916))
      return result;
    v5 = 1281;
LABEL_7:
    *v4 = v5;
    return result;
  }
  result = gleAddCommand((uint64_t)result, (uint64_t)glEnableVertexAttribArrayARB_UnpackThread, 4);
  *(_DWORD *)result = a2;
  *(_QWORD *)(v2[3306] + 272) |= 0x100000000 << a2;
  return result;
}

uint64_t glEnableVertexAttribArrayARB_UnpackThread(uint64_t a1, unsigned int *a2)
{
  glEnableVertexAttribArrayARB_Exec(a1, *a2);
  return 4;
}

_QWORD *glDisableVertexAttribArrayARB_PackThread(_QWORD *result, unsigned int a2)
{
  _QWORD *v2;
  __int16 *v4;
  __int16 v5;

  v2 = result;
  if (!result[3306])
  {
    v4 = (__int16 *)(result + 3729);
    if (*((_WORD *)result + 14916))
      return result;
    v5 = 1282;
    goto LABEL_7;
  }
  if (a2 >= 0x10)
  {
    v4 = (__int16 *)(result + 3729);
    if (*((_WORD *)result + 14916))
      return result;
    v5 = 1281;
LABEL_7:
    *v4 = v5;
    return result;
  }
  result = gleAddCommand((uint64_t)result, (uint64_t)glDisableVertexAttribArrayARB_UnpackThread, 4);
  *(_DWORD *)result = a2;
  *(_QWORD *)(v2[3306] + 272) &= ~(0x100000000 << a2);
  return result;
}

uint64_t glDisableVertexAttribArrayARB_UnpackThread(uint64_t a1, unsigned int *a2)
{
  glDisableVertexAttribArrayARB_Exec(a1, *a2);
  return 4;
}

uint64_t glGetVertexAttribfvARB_Exec(uint64_t result, unsigned int a2, int a3, float *a4)
{
  uint64_t v4;
  float v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t i;
  uint64_t v15;
  uint64_t v16;
  __int16 *v17;
  __int16 v18;

  if (a2 >= 0x10)
  {
    v17 = (__int16 *)(result + 29832);
    if (*(_WORD *)(result + 29832))
      return result;
    v18 = 1281;
LABEL_36:
    *v17 = v18;
    return result;
  }
  if (a3 <= 34921)
  {
    switch(a3)
    {
      case 34338:
        v4 = *(_QWORD *)(result + 26384);
        if (!v4)
          goto LABEL_40;
        v5 = 0.0;
        if (((*(_QWORD *)(v4 + 904) >> a2) & 0x100000000) != 0)
          v5 = 1.0;
        goto LABEL_33;
      case 34339:
        v10 = *(_QWORD *)(result + 26384);
        if (!v10)
          goto LABEL_40;
        v5 = (float)*(char *)(v10 + 24 * (a2 + 16) + 158);
        goto LABEL_33;
      case 34340:
        v11 = *(_QWORD *)(result + 26384);
        if (!v11)
          goto LABEL_40;
        v5 = (float)*(int *)(v11 + 24 * (a2 + 16) + 152);
        goto LABEL_33;
      case 34341:
        v12 = *(_QWORD *)(result + 26384);
        if (!v12)
          goto LABEL_40;
        v13 = *(_WORD *)(v12 + 24 * (a2 + 16) + 156) & 0x9FFF;
        goto LABEL_32;
      case 34342:
        for (i = 0; i != 4; ++i)
          a4[i] = *(float *)(result + 32 * a2 + 8688 + i * 4);
        return result;
      default:
        goto LABEL_34;
    }
  }
  if (a3 <= 35068)
  {
    if (a3 != 34922)
    {
      if (a3 == 34975)
      {
        v6 = *(_QWORD *)(result + 26384);
        if (v6)
        {
          v7 = *(_QWORD *)(v6 + 8 * (a2 + 16) + 1240);
          if (!v7)
          {
            v5 = 0.0;
            goto LABEL_33;
          }
          v8 = *(_DWORD *)(v7 + 16);
          goto LABEL_18;
        }
        goto LABEL_40;
      }
      goto LABEL_34;
    }
    v15 = *(_QWORD *)(result + 26384);
    if (!v15)
      goto LABEL_40;
    v13 = (*(unsigned __int16 *)(v15 + 24 * (a2 + 16) + 156) >> 13) & 1;
LABEL_32:
    v5 = (float)v13;
    goto LABEL_33;
  }
  if (a3 == 35069)
  {
    v16 = *(_QWORD *)(result + 26384);
    if (!v16)
      goto LABEL_40;
    v13 = (*(unsigned __int16 *)(v16 + 24 * (a2 + 16) + 156) >> 14) & 1;
    goto LABEL_32;
  }
  if (a3 != 35070)
  {
LABEL_34:
    v17 = (__int16 *)(result + 29832);
    if (*(_WORD *)(result + 29832))
      return result;
    v18 = 1280;
    goto LABEL_36;
  }
  v9 = *(_QWORD *)(result + 26384);
  if (v9)
  {
    v8 = *(_DWORD *)(v9 + 24 * (a2 + 16) + 144);
LABEL_18:
    v5 = (float)v8;
LABEL_33:
    *a4 = v5;
    return result;
  }
LABEL_40:
  v17 = (__int16 *)(result + 29832);
  if (!*(_WORD *)(result + 29832))
  {
    v18 = 1282;
    goto LABEL_36;
  }
  return result;
}

uint64_t glGetVertexAttribivARB_Exec(uint64_t result, unsigned int a2, int a3, int32x4_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 *v7;
  __int16 v8;

  if (a2 >= 0x10)
  {
    v7 = (__int16 *)(result + 29832);
    if (*(_WORD *)(result + 29832))
      return result;
    v8 = 1281;
LABEL_31:
    *v7 = v8;
    return result;
  }
  if (a3 <= 34921)
  {
    switch(a3)
    {
      case 34338:
        v4 = *(_QWORD *)(result + 26384);
        if (!v4)
          goto LABEL_34;
        a4->i32[0] = (*(_QWORD *)(v4 + 904) >> a2 >> 32) & 1;
        return result;
      case 34339:
        v6 = *(_QWORD *)(result + 26384);
        if (!v6)
          goto LABEL_34;
        LODWORD(v6) = *(char *)(v6 + 24 * (a2 + 16) + 158);
        goto LABEL_27;
      case 34340:
        v6 = *(_QWORD *)(result + 26384);
        if (!v6)
          goto LABEL_34;
        LODWORD(v6) = *(_DWORD *)(v6 + 24 * (a2 + 16) + 152);
        goto LABEL_27;
      case 34341:
        v6 = *(_QWORD *)(result + 26384);
        if (!v6)
          goto LABEL_34;
        LODWORD(v6) = *(_WORD *)(v6 + 24 * (a2 + 16) + 156) & 0x9FFF;
        goto LABEL_27;
      case 34342:
        *a4 = vcvtq_s32_f32(*(float32x4_t *)(result + 32 * a2 + 8688));
        return result;
      default:
        goto LABEL_28;
    }
  }
  if (a3 > 35068)
  {
    if (a3 == 35069)
    {
      v6 = *(_QWORD *)(result + 26384);
      if (!v6)
        goto LABEL_34;
      LODWORD(v6) = (*(unsigned __int16 *)(v6 + 24 * (a2 + 16) + 156) >> 14) & 1;
    }
    else
    {
      if (a3 != 35070)
        goto LABEL_28;
      v6 = *(_QWORD *)(result + 26384);
      if (!v6)
        goto LABEL_34;
      LODWORD(v6) = *(_DWORD *)(v6 + 24 * (a2 + 16) + 144);
    }
LABEL_27:
    a4->i32[0] = v6;
    return result;
  }
  if (a3 == 34922)
  {
    v6 = *(_QWORD *)(result + 26384);
    if (!v6)
      goto LABEL_34;
    LODWORD(v6) = (*(unsigned __int16 *)(v6 + 24 * (a2 + 16) + 156) >> 13) & 1;
    goto LABEL_27;
  }
  if (a3 != 34975)
  {
LABEL_28:
    v7 = (__int16 *)(result + 29832);
    if (*(_WORD *)(result + 29832))
      return result;
    v8 = 1280;
    goto LABEL_31;
  }
  v5 = *(_QWORD *)(result + 26384);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8 * (a2 + 16) + 1240);
    if (v6)
      LODWORD(v6) = *(_DWORD *)(v6 + 16);
    goto LABEL_27;
  }
LABEL_34:
  v7 = (__int16 *)(result + 29832);
  if (!*(_WORD *)(result + 29832))
  {
    v8 = 1282;
    goto LABEL_31;
  }
  return result;
}

uint64_t glGetVertexAttribIivEXT_Exec(uint64_t result, unsigned int a2, int a3, _DWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  __int16 *v8;
  __int16 v9;

  if (a2 >= 0x10)
  {
    v8 = (__int16 *)(result + 29832);
    if (*(_WORD *)(result + 29832))
      return result;
    v9 = 1281;
LABEL_32:
    *v8 = v9;
    return result;
  }
  if (a3 <= 34921)
  {
    switch(a3)
    {
      case 34338:
        v4 = *(_QWORD *)(result + 26384);
        if (!v4)
          goto LABEL_35;
        *a4 = (*(_QWORD *)(v4 + 904) >> a2 >> 32) & 1;
        return result;
      case 34339:
        v6 = *(_QWORD *)(result + 26384);
        if (!v6)
          goto LABEL_35;
        LODWORD(v6) = *(char *)(v6 + 24 * (a2 + 16) + 158);
        goto LABEL_29;
      case 34340:
        v6 = *(_QWORD *)(result + 26384);
        if (!v6)
          goto LABEL_35;
        LODWORD(v6) = *(_DWORD *)(v6 + 24 * (a2 + 16) + 152);
        goto LABEL_29;
      case 34341:
        v6 = *(_QWORD *)(result + 26384);
        if (!v6)
          goto LABEL_35;
        LODWORD(v6) = *(_WORD *)(v6 + 24 * (a2 + 16) + 156) & 0x9FFF;
        goto LABEL_29;
      case 34342:
        for (i = 0; i != 4; ++i)
          a4[i] = *(_DWORD *)(result + 32 * a2 + 8688 + i * 4);
        return result;
      default:
        goto LABEL_30;
    }
  }
  if (a3 > 35068)
  {
    if (a3 == 35069)
    {
      v6 = *(_QWORD *)(result + 26384);
      if (!v6)
        goto LABEL_35;
      LODWORD(v6) = (*(unsigned __int16 *)(v6 + 24 * (a2 + 16) + 156) >> 14) & 1;
    }
    else
    {
      if (a3 != 35070)
        goto LABEL_30;
      v6 = *(_QWORD *)(result + 26384);
      if (!v6)
        goto LABEL_35;
      LODWORD(v6) = *(_DWORD *)(v6 + 24 * (a2 + 16) + 144);
    }
LABEL_29:
    *a4 = v6;
    return result;
  }
  if (a3 == 34922)
  {
    v6 = *(_QWORD *)(result + 26384);
    if (!v6)
      goto LABEL_35;
    LODWORD(v6) = (*(unsigned __int16 *)(v6 + 24 * (a2 + 16) + 156) >> 13) & 1;
    goto LABEL_29;
  }
  if (a3 != 34975)
  {
LABEL_30:
    v8 = (__int16 *)(result + 29832);
    if (*(_WORD *)(result + 29832))
      return result;
    v9 = 1280;
    goto LABEL_32;
  }
  v5 = *(_QWORD *)(result + 26384);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8 * (a2 + 16) + 1240);
    if (v6)
      LODWORD(v6) = *(_DWORD *)(v6 + 16);
    goto LABEL_29;
  }
LABEL_35:
  v8 = (__int16 *)(result + 29832);
  if (!*(_WORD *)(result + 29832))
  {
    v9 = 1282;
    goto LABEL_32;
  }
  return result;
}

uint64_t glGetVertexAttribIuivEXT_Exec(uint64_t result, unsigned int a2, int a3, _DWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  __int16 *v8;
  __int16 v9;

  if (a2 >= 0x10)
  {
    v8 = (__int16 *)(result + 29832);
    if (*(_WORD *)(result + 29832))
      return result;
    v9 = 1281;
LABEL_32:
    *v8 = v9;
    return result;
  }
  if (a3 <= 34921)
  {
    switch(a3)
    {
      case 34338:
        v4 = *(_QWORD *)(result + 26384);
        if (!v4)
          goto LABEL_35;
        *a4 = (*(_QWORD *)(v4 + 904) >> a2 >> 32) & 1;
        return result;
      case 34339:
        v6 = *(_QWORD *)(result + 26384);
        if (!v6)
          goto LABEL_35;
        LODWORD(v6) = *(char *)(v6 + 24 * (a2 + 16) + 158);
        goto LABEL_29;
      case 34340:
        v6 = *(_QWORD *)(result + 26384);
        if (!v6)
          goto LABEL_35;
        LODWORD(v6) = *(_DWORD *)(v6 + 24 * (a2 + 16) + 152);
        goto LABEL_29;
      case 34341:
        v6 = *(_QWORD *)(result + 26384);
        if (!v6)
          goto LABEL_35;
        LODWORD(v6) = *(_WORD *)(v6 + 24 * (a2 + 16) + 156) & 0x9FFF;
        goto LABEL_29;
      case 34342:
        for (i = 0; i != 4; ++i)
          a4[i] = *(_DWORD *)(result + 32 * a2 + 8688 + i * 4);
        return result;
      default:
        goto LABEL_30;
    }
  }
  if (a3 > 35068)
  {
    if (a3 == 35069)
    {
      v6 = *(_QWORD *)(result + 26384);
      if (!v6)
        goto LABEL_35;
      LODWORD(v6) = (*(unsigned __int16 *)(v6 + 24 * (a2 + 16) + 156) >> 14) & 1;
    }
    else
    {
      if (a3 != 35070)
        goto LABEL_30;
      v6 = *(_QWORD *)(result + 26384);
      if (!v6)
        goto LABEL_35;
      LODWORD(v6) = *(_DWORD *)(v6 + 24 * (a2 + 16) + 144);
    }
LABEL_29:
    *a4 = v6;
    return result;
  }
  if (a3 == 34922)
  {
    v6 = *(_QWORD *)(result + 26384);
    if (!v6)
      goto LABEL_35;
    LODWORD(v6) = (*(unsigned __int16 *)(v6 + 24 * (a2 + 16) + 156) >> 13) & 1;
    goto LABEL_29;
  }
  if (a3 != 34975)
  {
LABEL_30:
    v8 = (__int16 *)(result + 29832);
    if (*(_WORD *)(result + 29832))
      return result;
    v9 = 1280;
    goto LABEL_32;
  }
  v5 = *(_QWORD *)(result + 26384);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8 * (a2 + 16) + 1240);
    if (v6)
      LODWORD(v6) = *(_DWORD *)(v6 + 16);
    goto LABEL_29;
  }
LABEL_35:
  v8 = (__int16 *)(result + 29832);
  if (!*(_WORD *)(result + 29832))
  {
    v9 = 1282;
    goto LABEL_32;
  }
  return result;
}

uint64_t glGetVertexAttribPointervARB_Exec(uint64_t result, unsigned int a2, int a3, _QWORD *a4)
{
  __int16 *v4;
  __int16 v5;
  uint64_t v6;

  if (a2 < 0x10)
  {
    if (a3 == 34373)
    {
      v6 = *(_QWORD *)(result + 26384);
      if (v6)
      {
        *a4 = *(_QWORD *)(v6 + 24 * (a2 + 16) + 136);
        return result;
      }
      v4 = (__int16 *)(result + 29832);
      if (!*(_WORD *)(result + 29832))
      {
        v5 = 1282;
        goto LABEL_12;
      }
    }
    else
    {
      v4 = (__int16 *)(result + 29832);
      if (!*(_WORD *)(result + 29832))
      {
        v5 = 1280;
        goto LABEL_12;
      }
    }
  }
  else
  {
    v4 = (__int16 *)(result + 29832);
    if (!*(_WORD *)(result + 29832))
    {
      v5 = 1281;
LABEL_12:
      *v4 = v5;
    }
  }
  return result;
}

uint64_t glGetVertexAttribfvARB_ExecThread(uint64_t a1, unsigned int a2, int a3, float *a4)
{
  (*(void (**)(void))(a1 + 27752))();
  return glGetVertexAttribfvARB_Exec(a1, a2, a3, a4);
}

uint64_t glGetVertexAttribivARB_ExecThread(uint64_t a1, unsigned int a2, int a3, int32x4_t *a4)
{
  (*(void (**)(void))(a1 + 27752))();
  return glGetVertexAttribivARB_Exec(a1, a2, a3, a4);
}

uint64_t glGetVertexAttribPointervARB_ExecThread(uint64_t a1, unsigned int a2, int a3, _QWORD *a4)
{
  (*(void (**)(void))(a1 + 27752))();
  return glGetVertexAttribPointervARB_Exec(a1, a2, a3, a4);
}

uint64_t glGetVertexAttribIivEXT_ExecThread(uint64_t a1, unsigned int a2, int a3, _DWORD *a4)
{
  (*(void (**)(void))(a1 + 27752))();
  return glGetVertexAttribIivEXT_Exec(a1, a2, a3, a4);
}

uint64_t glGetVertexAttribIuivEXT_ExecThread(uint64_t a1, unsigned int a2, int a3, _DWORD *a4)
{
  (*(void (**)(void))(a1 + 27752))();
  return glGetVertexAttribIuivEXT_Exec(a1, a2, a3, a4);
}

_DWORD *glViewport_Comp(uint64_t a1, int a2, int a3, int a4, int a5)
{
  _DWORD *result;

  result = gleAddCommand(a1, (uint64_t)glViewport_ListExec, 16);
  *result = a2;
  result[1] = a3;
  result[2] = a4;
  result[3] = a5;
  return result;
}

uint64_t glViewport_ListExec(uint64_t a1, int32x4_t *a2)
{
  float32x4_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  v3 = vcvtq_f32_s32(*a2);
  glViewportArrayv_Core(a1, 0, 1, (uint64_t)&v3);
  return 16;
}

uint64_t glViewportArrayv_Core(uint64_t result, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v4;
  unsigned int v6;
  uint64_t v7;
  _WORD *v8;
  float *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  float v15;
  uint64_t v16;
  _DWORD *v17;
  float v18;
  float *v19;

  v4 = a4;
  v6 = a2;
  v7 = result;
  if (a3 < 1)
  {
LABEL_6:
    if (a3 + a2 >= 2 && !*(_BYTE *)(result + 15580))
      result = gleSwitchToMultiViewportMode(result);
    if (a3 >= 1)
    {
      v11 = v7 + 9216;
      v12 = a3;
      do
      {
        v13 = *(float *)(v4 + 4);
        v14 = *(float *)(v4 + 8);
        v15 = *(float *)(v4 + 12);
        v16 = v11 + 144 * v6;
        v18 = *(float *)(v16 + 96);
        v17 = (_DWORD *)(v16 + 96);
        if (v18 != *(float *)v4
          || *(float *)(v11 + 144 * v6 + 100) != v13
          || *(float *)(v11 + 144 * v6 + 104) != v14
          || *(float *)(v11 + 144 * v6 + 108) != v15)
        {
          *v17 = *(_DWORD *)v4;
          v19 = (float *)(v11 + 144 * v6);
          v19[25] = v13;
          v19[26] = v14;
          v19[27] = v15;
          result = gleUpdateViewScissorDataIndexed(v7, v6);
        }
        ++v6;
        v4 += 16;
        --v12;
      }
      while (v12);
    }
  }
  else
  {
    v8 = (_WORD *)(result + 29832);
    v9 = (float *)(a4 + 12);
    v10 = a3;
    while (*(v9 - 1) >= 0.0 && *v9 >= 0.0)
    {
      v9 += 4;
      if (!--v10)
        goto LABEL_6;
    }
    if (!*v8)
      *v8 = 1281;
  }
  return result;
}

uint64_t gleUpdateVertexStateProgram(uint64_t a1)
{
  unsigned __int8 *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int16 v5;
  __int16 v6;
  int v7;
  unint64_t v8;
  _BOOL4 v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  unsigned __int8 v41;
  unsigned __int8 v42;
  unsigned __int8 v43;
  _BYTE *v44;
  int v45;
  int v46;
  int v47;
  BOOL v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int16x4_t *StateProgram;
  uint64_t result;
  uint64_t v61;
  int8x16_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t Object;
  _DWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  int16x4_t *v71;
  uint64_t v72;
  uint64_t i;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;

  v2 = (unsigned __int8 *)(a1 + 29592);
  v3 = a1 + 17572;
  v4 = *(_QWORD *)(a1 + 29032);
  v5 = *(_WORD *)(v4 + 26);
  v6 = *(_WORD *)(*(_QWORD *)(a1 + 19296) + 346);
  v7 = *(unsigned __int16 *)(a1 + 29830);
  if ((v6 & 1) != 0)
    v8 = v5 & 0xFFFC | (unint64_t)(v6 & 2) | 1;
  else
    v8 = *(unsigned __int16 *)(v4 + 26);
  v9 = (v6 & 1) != 0 && v7 != 7170;
  v88 = 0u;
  v89 = 0u;
  v86 = 0u;
  v87 = 0u;
  v84 = 0u;
  v85 = 0u;
  v82 = 0u;
  v83 = 0u;
  v80 = 0u;
  v81 = 0u;
  v78 = 0u;
  v79 = 0u;
  v10 = *(_BYTE *)(v4 + 25) & 0x7F;
  v11 = (v8 << 55) & 0x300000000000000;
  v12 = ((unint64_t)(v10 == 2) << 12) | ((unint64_t)(v2[2915] >> 7) << 11);
  v76 = 0;
  v77 = 0;
  v74 = v11;
  v75 = 0;
  *(_QWORD *)&v78 = v12;
  if (*(_BYTE *)(v3 + 127))
  {
    v13 = 0;
    v11 |= ((unint64_t)*(unsigned __int8 *)(v3 + 124) << 40) | 0x3C0;
    v12 |= 0x400uLL;
LABEL_11:
    v74 = v11;
    v75 = 0;
    v76 = 0;
    v77 = 0;
    v14 = 0;
    v15 = 0;
    *(_QWORD *)&v78 = v12;
    goto LABEL_12;
  }
  if (*(_BYTE *)(v3 + 125))
  {
    v13 = 0;
    v11 |= (2 * (*(_BYTE *)(v3 + 126) & 1u)) | ((unint64_t)*(unsigned __int8 *)(v3 + 124) << 40) | 0x3C0;
    goto LABEL_11;
  }
  if (v9)
  {
    v76 = 0;
    v77 = 0;
    v74 = v11 | 0x100;
    v75 = 0;
    *(_QWORD *)&v78 = v12;
    if (*((_DWORD *)v2 + 32) == -1074791426)
    {
      v13 = 0;
      v11 |= 0x104uLL;
      goto LABEL_11;
    }
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v11 |= 0x100uLL;
  }
  else
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
  }
LABEL_12:
  if ((v8 & 0x80) != 0)
  {
    v13 = (*(_DWORD *)v3 & 0x3FLL) << 24;
    v76 = 0;
    v77 = 0;
    v74 = v11;
    v75 = v13;
    *(_QWORD *)&v78 = v12;
  }
  if (v11 & 0x4000000000000000 | v13 & 0x3F000000)
  {
    v11 |= 0x42C0uLL;
    v74 = v11;
    v75 = v13;
    v76 = 0;
    v77 = 0;
    *(_QWORD *)&v78 = v12;
  }
  if (v7 != 7170)
  {
    if (v7 != 7168)
    {
      v20 = 0;
      goto LABEL_56;
    }
    v16 = *(unsigned __int8 *)(a1 + 15379);
    if (*(_BYTE *)(a1 + 15378))
    {
      v17 = v16 == 0;
      v18 = 96;
      if (v17)
        v18 = 64;
      v12 |= v18;
      v19 = v11 | 0x42C0;
      if ((v8 & 0x20) != 0)
        v11 = v19 & 0xEFFFFFFFFFFFFFFFLL;
      else
        v11 = v19 | 0x1000000000000000;
    }
    else
    {
      if (!*(_BYTE *)(a1 + 15379) && (v8 & 0x400) == 0)
        goto LABEL_33;
      v11 |= 0x4000uLL;
      v74 = v11;
      v75 = v13;
      v76 = 0;
      v77 = 0;
      *(_QWORD *)&v78 = v12 | 0x80;
      if (!v16)
      {
        v12 |= 0x80uLL;
        goto LABEL_33;
      }
      v12 |= 0xA0uLL;
    }
    v74 = v11;
    v75 = v13;
    v76 = 0;
    v77 = 0;
    *(_QWORD *)&v78 = v12;
LABEL_33:
    if (*(_BYTE *)(v3 + 1662))
    {
      v21 = v11 | 0x4000;
      v22 = *v2;
      v23 = (v22 >> 5) & 3;
      if (v23)
      {
        if (v23 == 2)
        {
          if ((v8 & 0x20) != 0)
          {
            v11 &= ~0x1000000000000000uLL;
            v24 = 17088;
          }
          else
          {
            v24 = 0x10000000000042C0;
          }
          v21 = v11 | v24;
          v13 |= 0xC0000000uLL;
        }
        else if (v23 == 1)
        {
          v13 = v13 & 0xFFFFFFFF3FFFFFFFLL | 0x40000000;
        }
      }
      else
      {
        v21 = v11 | 0x4280;
        v13 = v13 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
      }
      if ((~v22 & 0x90) != 0)
      {
        v12 |= 1uLL;
      }
      else
      {
        v25 = 18;
        if ((v22 & 4) == 0)
          v25 = 2;
        v26 = v12 | v25;
        if ((v22 & 3) == 2)
        {
          v12 = v26 & 0xFFFFFFFFFFFFFFF3 | 8;
        }
        else if ((v22 & 3) == 3)
        {
          v12 = v26 | 0xC;
        }
        else
        {
          v12 = v26 & 0xFFFFFFFFFFFFFFF3 | 4;
        }
      }
      v11 = v21;
      v74 = v21;
      v75 = v13;
      v76 = 0;
      v77 = 0;
      *(_QWORD *)&v78 = v12;
    }
    v20 = *(unsigned __int8 *)(v3 + 1661);
LABEL_56:
    if (!*(_BYTE *)(a1 + 14890))
    {
      if (*(_BYTE *)(v3 + 1660))
      {
        v11 |= 0x1000uLL;
        v74 = v11;
        v75 = v13;
        v76 = 0;
        v77 = 0;
        *(_QWORD *)&v78 = v12;
      }
      if (!v20)
      {
LABEL_109:
        if (v7 == 7169)
        {
          v49 = 16843009;
        }
        else
        {
          v49 = *(_DWORD *)(v3 + 6216);
          if (!v49)
          {
LABEL_127:
            if ((v11 & 0x400) != 0)
            {
              v11 = v11 & 0xFFFFFFFFFFFFFFDFLL | (32 * (*(_BYTE *)(a1 + 12516) & 1u));
              v76 = v14;
              v77 = v15;
              *(_QWORD *)&v78 = v12;
              v74 = v11;
              v75 = v13;
              if (!*(_BYTE *)(v3 + 125) && *((_DWORD *)v2 + 34) == -1074791426)
              {
                v11 |= 0x10uLL;
                v74 = v11;
                v75 = v13;
                v76 = v14;
                v77 = v15;
                *(_QWORD *)&v78 = v12;
              }
            }
            goto LABEL_131;
          }
        }
        v50 = *(_DWORD *)(v3 + 6220) & v49;
        v51 = *(_DWORD *)(v3 + 6224) & v49;
        v14 = v50 | (v51 << 32);
        v52 = *(_DWORD *)(v3 + 6232) & v49;
        v15 = *(_DWORD *)(v3 + 6228) & v49 | (unint64_t)(v52 << 32);
        if (v52 | v51)
        {
          v53 = 704;
        }
        else
        {
          if (!(_DWORD)v50)
          {
LABEL_117:
            if (v15)
              v54 = v11 | 0x400;
            else
              v54 = v11;
            v55 = (0xFFu >> (8 - *(_WORD *)(v4 + 152))) & v49;
            v56 = v54 & 0xFFFFFFFF0000FFFFLL | (v55 << 16);
            v57 = 0;
            if (v55)
            {
              v58 = 0;
              do
              {
                if ((v55 & 1) != 0 && *(_DWORD *)(a1 + 29736 + 4 * v58) == -1074791426)
                  v57 |= 1 << v58;
                ++v58;
                v48 = v55 > 1;
                v55 >>= 1;
              }
              while (v48);
            }
            v11 = v56 | ((_DWORD)v57 << 24);
            v76 = v14;
            v77 = v15;
            *(_QWORD *)&v78 = v12;
            v74 = v11;
            v75 = v13;
            goto LABEL_127;
          }
          v53 = 512;
        }
        v11 |= v53;
        goto LABEL_117;
      }
      goto LABEL_68;
    }
    if (!*(_BYTE *)(v3 + 1660))
    {
      if (!v20)
        goto LABEL_109;
      if (*(unsigned __int16 *)(a1 + 14888) != 33274)
      {
LABEL_68:
        v11 |= 0x2000uLL;
LABEL_108:
        v74 = v11;
        v75 = v13;
        v76 = 0;
        v77 = 0;
        *(_QWORD *)&v78 = v12;
        goto LABEL_109;
      }
    }
    v27 = 3776;
    if (!*(_DWORD *)(a1 + 1448))
      v27 = 3072;
    v28 = v11 | v27;
    if (*(unsigned __int16 *)(a1 + 14888) == 33274)
    {
      v29 = 0x8000000000000000;
    }
    else
    {
      if (!v20)
        goto LABEL_72;
      v29 = 0x2000;
    }
    v28 |= v29;
LABEL_72:
    v30 = v28 & 0xFBFCFF00FFFFFFFFLL | ((unint64_t)(*(_BYTE *)(a1 + 14892) & 1) << 48) | ((unint64_t)(*(_BYTE *)(a1 + 14893) & 1) << 49) | ((unint64_t)(*(_BYTE *)(a1 + 14894) & 1) << 58);
    v31 = *(unsigned int *)(a1 + 14880);
    v32 = *(_DWORD *)(a1 + 14880);
    v76 = 0;
    v77 = 0;
    *(_QWORD *)&v78 = v12;
    v11 = v30 | (v32 << 32);
    v74 = v11;
    v75 = v13;
    if ((v8 & 0x10) != 0)
    {
      v33 = 0x800000000000000;
    }
    else
    {
      if ((v8 & 0x40) == 0)
        goto LABEL_77;
      v33 = 0x2000000000000000;
    }
    v11 |= v33;
    v74 = v11;
    v75 = v13;
    v76 = 0;
    v77 = 0;
    *(_QWORD *)&v78 = v12;
LABEL_77:
    if (!*(_BYTE *)(a1 + 14891))
    {
LABEL_93:
      if (!(_DWORD)v31)
        goto LABEL_109;
      v40 = 0;
      v41 = 0;
      v42 = 0;
      v43 = 0;
      v44 = (_BYTE *)(a1 + 812);
      do
      {
        if ((v31 & 1) != 0)
        {
          if (*(v44 - 3))
            LOBYTE(v45) = 0;
          else
            v45 = 1 << v40;
          v43 |= v45;
          if (*(v44 - 2))
            v46 = 1 << v40;
          else
            LOBYTE(v46) = 0;
          v42 |= v46;
          if (*v44)
            LOBYTE(v47) = 0;
          else
            v47 = 1 << v40;
          v41 |= v47;
        }
        v44 += 80;
        ++v40;
        v48 = v31 > 1;
        v31 >>= 1;
      }
      while (v48);
      v13 = v13 & 0xFFFFFFFFFF000000 | v43 | (unsigned __int16)(v42 << 8) | ((unint64_t)v41 << 16);
      goto LABEL_108;
    }
    v34 = *(unsigned __int16 *)(a1 + 14886);
    if (v34 > 0x1201)
    {
      if (v34 == 4610)
      {
        v35 = 0x80000000000000;
        goto LABEL_88;
      }
      if (v34 == 5632)
      {
        v35 = 0x10000000000000;
        goto LABEL_88;
      }
    }
    else
    {
      if (v34 == 4608)
      {
        v35 = 0x20000000000000;
        goto LABEL_88;
      }
      if (v34 == 4609)
      {
        v35 = 0x40000000000000;
LABEL_88:
        v36 = v35 | v11 & 0xFF0FFFFFFFFFFFFFLL;
        v37 = *(unsigned __int16 *)(a1 + 14884);
        v38 = v36 & 0xFFF3FFFFFFFFFFFFLL;
        v11 = v36 | 0xC000000000000;
        if (v37 == 1028)
          v11 = v38 | 0x4000000000000;
        v39 = v38 | 0x8000000000000;
        if (v37 == 1029)
          v11 = v39;
        v74 = v11;
        v75 = v13;
        v76 = 0;
        v77 = 0;
        *(_QWORD *)&v78 = v12;
        goto LABEL_93;
      }
    }
    v35 = 0x60000000000000;
    goto LABEL_88;
  }
LABEL_131:
  if (((v5 & 0x1000) != 0 || !v10) && *(_DWORD *)(a1 + 15592) == 7424)
  {
    v12 |= 0x100uLL;
    v74 = v11;
    v75 = v13;
    v76 = v14;
    v77 = v15;
    *(_QWORD *)&v78 = v12;
  }
  if (*(_WORD *)(a1 + 15284) == 4353)
  {
    v12 |= 0x200uLL;
    v74 = v11;
    v75 = v13;
    v76 = v14;
    v77 = v15;
    *(_QWORD *)&v78 = v12;
  }
  if ((v11 & 0x80) != 0 && !*(_BYTE *)(v3 + 125) && *((_DWORD *)v2 + 33) == -1074791426)
  {
    v74 = v11 | 8;
    v75 = v13;
    v76 = v14;
    v77 = v15;
    *(_QWORD *)&v78 = v12;
  }
  StateProgram = *(int16x4_t **)(a1 + 24480);
  if (!*(_QWORD *)&StateProgram[54] && !*(_QWORD *)&StateProgram[55])
  {
    Object = cvmHashMachineFindObject();
    if (Object)
    {
      v64 = Object;
      gleDestroyStateProgram(a1, StateProgram);
      goto LABEL_152;
    }
    StateProgram[54] = 0;
    StateProgram[55] = 0;
    if (v10)
    {
      StateProgram[55] = (int16x4_t)glpCallVertexStateToLLVMIR();
    }
    else
    {
      if (v2[196])
      {
        StateProgram[55] = (int16x4_t)glpCallVertexStateToLLVMIR();
        free(*(void **)&StateProgram[13]);
        StateProgram[13] = 0;
        free(*(void **)&StateProgram[60]);
        StateProgram[60] = 0;
      }
      StateProgram[54] = (int16x4_t)glpVertexStateToPPStream();
    }
    v68 = (_DWORD *)StateProgram[13];
    if (v68)
      LODWORD(v68) = *v68;
    StateProgram[64].i32[0] = (int)v68;
    gleModifyPluginPipelineProgram(a1, (uint64_t)StateProgram, 1);
    StateProgram[52].i8[1] = 1;
LABEL_166:
    glePPUpdateProgram(a1, StateProgram);
    v64 = cvmHashObjectCreate();
    result = cvmHashMachineAddObject();
    goto LABEL_167;
  }
  result = cvmHashObjectGetKey();
  v61 = 0;
  v62 = 0uLL;
  do
  {
    v62 = vorrq_s8(veorq_s8(*(int8x16_t *)((char *)&v74 + v61), *(int8x16_t *)(result + v61)), v62);
    v61 += 16;
  }
  while (v61 != 224);
  if (!*(_QWORD *)&vorr_s8(*(int8x8_t *)v62.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v62, v62, 8uLL)))
    return result;
  cvmHashObjectRelease();
  v63 = cvmHashMachineFindObject();
  if (!v63)
  {
    if (v10)
    {
      v65 = glpCallVertexStateToLLVMIR();
      v66 = 0;
    }
    else
    {
      if (v2[196])
      {
        v65 = glpCallVertexStateToLLVMIR();
        free(0);
        free(0);
      }
      else
      {
        v65 = 0;
      }
      v66 = glpVertexStateToPPStream();
    }
    StateProgram = (int16x4_t *)gleCreateStateProgram(a1, 0, v66, v65, 0, 0, 0, -1);
    StateProgram[13] = 0;
    StateProgram[60] = 0;
    StateProgram[64].i32[0] = 0;
    StateProgram[52].i8[1] = 1;
    *(_QWORD *)(a1 + 24480) = StateProgram;
    goto LABEL_166;
  }
  v64 = v63;
LABEL_152:
  result = cvmHashObjectGetObject();
  StateProgram = (int16x4_t *)result;
  *(_QWORD *)(a1 + 24480) = result;
LABEL_167:
  *(_QWORD *)(a1 + 24560) = v64;
  *(_QWORD *)(a1 + 24200) = gleSetVPTransformFuncAll;
  *(_QWORD *)(a1 + 24208) = gleSetVPTransformFuncAll;
  *(_QWORD *)(a1 + 19248) = StateProgram + 71;
  v69 = v2[2904];
  if (v2[2904])
  {
    v70 = v2 + 3840;
    v71 = StateProgram;
    do
    {
      v72 = (uint64_t)*v71++;
      *v70 = v72;
      v70 += 209;
      --v69;
    }
    while (v69);
  }
  for (i = 0; i != 32; ++i)
    *(_DWORD *)(a1 + 1552 + i * 4) = StateProgram[34].i32[i] | StateProgram[18].i32[i];
  *(_DWORD *)(v3 + 11080) = 0;
  *(_DWORD *)(a1 + 1532) |= 0x840000u;
  return result;
}

void gleUpdateVertexFallbackProgram(uint64_t a1, unsigned int a2)
{
  unsigned __int8 *v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  _DWORD *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  unint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  unint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t Key;
  uint64_t v38;
  int8x16_t v39;
  int16x4_t **v40;
  uint64_t Object;
  uint64_t v42;
  int16x4_t *StateProgram;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int16x4_t *v48;
  int16x4_t v49;
  __int128 v50;
  __int128 v51;
  _QWORD v52[24];

  v3 = (unsigned __int8 *)(a1 + 29592);
  if (a2)
  {
    memset(&v52[1], 0, 184);
    v4 = *(_BYTE *)(*(_QWORD *)(a1 + 29032) + 25);
    v5 = (unint64_t)((v4 & 0x7F) == 2) << 12;
    if ((*(_BYTE *)(a1 + 24864) & 0x10) != 0)
    {
      v14 = *(_QWORD *)(a1 + 24768);
      if (!v14)
        v14 = *(_QWORD *)(*(_QWORD *)(a1 + 24776) + 72);
      v7 = (uint64_t *)(v14 + 3552);
      v8 = (_DWORD *)(v14 + 3596);
    }
    else
    {
      if (!*(_BYTE *)(a1 + 24760))
        goto LABEL_17;
      v6 = *(_QWORD *)(a1 + 24432);
      v7 = (uint64_t *)(v6 + 472);
      v8 = (_DWORD *)(v6 + 516);
    }
    v15 = *v7;
    if (*v7)
      v16 = (*v8 & 0x1000) == 0;
    else
      v16 = 1;
    if (!v16)
    {
      v18 = *(unsigned int *)(v15 + 64);
      if ((_DWORD)v18)
      {
        v19 = 0;
        v20 = (unint64_t *)(v15 + 8 * *(unsigned int *)(v15 + 68));
        v21 = 8 * v18;
        do
        {
          v22 = *v20++;
          v23 = 1 << ((v22 >> 33) & 7);
          if ((v22 & 0x1F00) != 0x400)
            LOBYTE(v23) = 0;
          v19 |= v23;
          v21 -= 8;
        }
        while (v21);
        v17 = ((unint64_t)v19 << 16) & 0xFFFFFFFF00FFFFFFLL | ((unint64_t)v19 << 24);
      }
      else
      {
        v17 = 0;
      }
      goto LABEL_56;
    }
LABEL_17:
    v17 = 16842752;
LABEL_56:
    v12 = 0;
    v30 = v17 | 0x8104;
    goto LABEL_57;
  }
  v9 = (_BYTE *)(a1 + 17700);
  memset(v52, 0, sizeof(v52));
  v50 = 0u;
  v51 = 0u;
  v10 = *(_QWORD *)(a1 + 29032);
  v4 = *(_BYTE *)(v10 + 25);
  v11 = (unint64_t)((v4 & 0x7F) == 2) << 12;
  if (*(_BYTE *)(a1 + 19232))
  {
    v12 = 0;
    v13 = 37124;
    if (*(_BYTE *)(a1 + 17701))
      v13 = 0x1000000009104;
  }
  else
  {
    v12 = 0;
    v13 = 33028;
  }
  if (*(_BYTE *)(a1 + 19233))
  {
    v24 = 0x2000;
    if (*(_BYTE *)(a1 + 17701))
      v24 = 0x1000000002000;
    v13 |= v24;
  }
  if (*(_BYTE *)(a1 + 19234))
  {
    v25 = (unint64_t)((v4 & 0x7F) == 2) << 12;
    v13 = v13 & 0xFFFFFFFFFFFFBFFFLL | 0x4000;
    v26 = *v3;
    if ((~v26 & 0x90) != 0)
    {
      v11 = v25 | 1;
      v12 = 0x40000000;
    }
    else
    {
      v27 = 19;
      if ((v26 & 4) == 0)
        v27 = 3;
      *(_QWORD *)&v50 = v13;
      *((_QWORD *)&v50 + 1) = 0x40000000;
      v51 = 0uLL;
      v52[0] = v25 | v27;
      v28 = ((unint64_t)((v4 & 0x7F) == 2) << 12) | v27 & 0xFFFFFFFFFFFFFFF3;
      v11 = v28 | 4;
      if ((v26 & 3) == 3)
        v11 = v52[0] | 0xCLL;
      v12 = 0x40000000;
      if ((v26 & 3) == 2)
        v11 = v28 | 8;
    }
  }
  if (*v9)
    v29 = v13 | 0x4000;
  else
    v29 = v13;
  if (*v9)
    v5 = v11 | 0xA0;
  else
    v5 = v11;
  if (((*(_WORD *)(v10 + 26) & 0x1000) != 0 || (v4 & 0x7F) == 0) && *(_DWORD *)(a1 + 15592) == 7424)
    v5 |= 0x100uLL;
  if ((*(_BYTE *)(a1 + 24864) & 0x10) != 0)
  {
    v31 = *(_QWORD *)(a1 + 24768);
    if (!v31)
      v31 = *(_QWORD *)(*(_QWORD *)(a1 + 24776) + 72);
    v32 = *(_DWORD *)(v31 + 3540) | *(_DWORD *)(v31 + 3536);
    v33 = *(_DWORD *)(v31 + 3032);
    v34 = v33 & v32;
    v30 = v29 & 0xBFFFFFFF0000FFFFLL | ((unint64_t)((unsigned __int16)(v32 & ~(_WORD)v33) >> 8) << 16) | ((unint64_t)((unsigned __int16)(v32 & ~(_WORD)v33) >> 8) << 24);
    v12 = v12 & 0xC0FFFFFF | (unint64_t)(v34 << 32) | (((*(_QWORD *)(v31 + 3528) >> 6) & 3) << 24);
  }
  else
  {
    v30 = v29 & 0xFFFFFFFF0000FFFFLL | ((unint64_t)*(unsigned __int8 *)(a1 + 23788) << 16) | ((unint64_t)*(unsigned __int8 *)(a1 + 23788) << 24);
  }
LABEL_57:
  *(_QWORD *)&v50 = v30;
  *((_QWORD *)&v50 + 1) = v12;
  v51 = 0uLL;
  v52[0] = v5;
  v35 = a2;
  v36 = a1 + 8 * a2;
  if (*(_QWORD *)(v36 + 24600))
  {
    Key = cvmHashObjectGetKey();
    v38 = 0;
    v39 = 0uLL;
    do
    {
      v39 = vorrq_s8(veorq_s8(*(int8x16_t *)((char *)&v50 + v38), *(int8x16_t *)(Key + v38)), v39);
      v38 += 16;
    }
    while (v38 != 224);
    if (!*(_QWORD *)&vorr_s8(*(int8x8_t *)v39.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v39, v39, 8uLL)))
      return;
    cvmHashObjectRelease();
  }
  v40 = (int16x4_t **)(v36 + 24600);
  Object = cvmHashMachineFindObject();
  if (Object)
  {
    v42 = Object;
    StateProgram = (int16x4_t *)cvmHashObjectGetObject();
  }
  else
  {
    if ((v4 & 0x7F) != 0)
    {
      v44 = glpCallVertexStateToLLVMIR();
      v45 = 0;
    }
    else
    {
      if (v3[196])
      {
        v44 = glpCallVertexStateToLLVMIR();
        free(0);
        free(0);
      }
      else
      {
        v44 = 0;
      }
      v45 = glpVertexStateToPPStream();
    }
    StateProgram = (int16x4_t *)gleCreateStateProgram(a1, 0, v45, v44, 0, 0, 0, -1);
    StateProgram[13] = 0;
    StateProgram[60] = 0;
    StateProgram[64].i32[0] = 0;
    v42 = cvmHashObjectCreate();
    cvmHashMachineAddObject();
    glePPUpdateProgram(a1, StateProgram);
  }
  *v40 = StateProgram;
  v46 = a1 + 8 * v35;
  *(_QWORD *)(v46 + 24632) = v42;
  v47 = v3[2904];
  if (v3[2904])
  {
    v48 = (int16x4_t *)(v46 + 33472);
    do
    {
      v49 = *StateProgram++;
      *v48 = v49;
      v48 += 209;
      --v47;
    }
    while (v47);
  }
}

uint64_t gleUpdateFragmentStateProgram(uint64_t a1, char a2)
{
  unsigned __int8 *v3;
  _DWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  unint64_t v19;
  __int16 v20;
  int v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  float *v29;
  _WORD *v30;
  unsigned int v31;
  char *v32;
  unint64_t v33;
  char *v34;
  unint64_t v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  int v39;
  char *v41;
  char *v42;
  int64_t v43;
  uint64_t v44;
  int v45;
  unint64_t v46;
  char *v47;
  BOOL v48;
  unsigned int v49;
  char v50;
  unint64_t v51;
  unint64_t v52;
  char v53;
  char v54;
  unsigned int v55;
  char v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  float v62;
  uint64_t v63;
  unint64_t v64;
  unsigned int v65;
  int v66;
  uint64_t v67;
  unsigned int v68;
  char v69;
  unint64_t v70;
  unint64_t v71;
  char v72;
  char v73;
  unsigned int v74;
  char v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  int v82;
  int16x4_t *StateProgram;
  uint64_t result;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t Object;
  _DWORD *v92;
  uint64_t v93;
  _QWORD *v94;
  int16x4_t *v95;
  uint64_t v96;
  uint64_t i;
  _OWORD v98[2];
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  _QWORD v102[12];

  v102[9] = *MEMORY[0x24BDAC8D0];
  v3 = (unsigned __int8 *)(a1 + 29592);
  v4 = (_DWORD *)(a1 + 23784);
  memset(v102, 0, 64);
  v5 = *(unsigned __int8 *)(a1 + 32502);
  if (*(_BYTE *)(a1 + 32502))
  {
    v6 = 2;
    if ((v5 & 1) == 0)
      v6 = 15;
    memset(v98, 0, sizeof(v98));
    v101 = 0;
    v99 = 0uLL;
    v100 = 0uLL;
    v7 = -224;
    if ((v5 & 2) == 0)
      v7 = -16;
    v8 = v7 | v6;
    *(int64x2_t *)((char *)v98 + 8) = vdupq_n_s64(0x300000000000000uLL);
    v9 = ((unint64_t)(v5 & 3) << 8) | 0x40000;
    v10 = *(_QWORD *)(a1 + 29032);
    goto LABEL_261;
  }
  v11 = 0;
  v12 = (_BYTE *)(a1 + 15178);
  v13 = a1 + 20776;
  do
  {
    v14 = 0;
    while (((*(_DWORD *)(a1 + 76 * v11 + 15684) >> v14) & 1) == 0)
    {
      if ((_DWORD)++v14 == 5)
      {
        v15 = 0;
        LODWORD(v14) = 15;
        goto LABEL_14;
      }
    }
    v16 = *(_QWORD *)(v13 + 8 * v14);
    v17 = *(unsigned __int8 *)(v16 + 597);
    v18 = *(unsigned __int8 *)(v16 + 596);
    v15 = v16 + 808;
    if ((v17 & ~v18) != 0)
    {
      v15 = 0;
      LODWORD(v14) = 15;
    }
LABEL_14:
    v102[v11] = v15;
    v5 |= (_DWORD)v14 << (4 * v11++);
    v13 += 88;
  }
  while (v11 != 8);
  v19 = 0;
  v101 = 0;
  v99 = 0u;
  v100 = 0u;
  memset(v98, 0, sizeof(v98));
  if (*(_WORD *)(a1 + 15284) == 4353)
  {
    v19 = 1;
    *(_QWORD *)&v98[0] = 1;
  }
  v10 = *(_QWORD *)(a1 + 29032);
  v20 = *(_WORD *)(v10 + 26);
  if (((v20 & 0x1000) != 0 || (*(_BYTE *)(v10 + 25) & 0x7F) != 0) && *(_DWORD *)(a1 + 15592) == 7424)
    v19 |= 0x2000000uLL;
  if (*v12)
    v19 |= 0x10uLL;
  v21 = *v3;
  v22 = v21 & 3;
  if ((v21 & 3) != 0)
  {
    if ((v21 & 0x10) != 0)
    {
      v19 |= 0xC0uLL;
    }
    else
    {
      v23 = v19 | 0x40;
      v24 = v19 & 0xFFFFFFFFFFFFFFB9 | 0x44;
      v25 = v19 | 0x46;
      v26 = v23 & 0xFFFFFFFFFFFFFFF9 | 2;
      if (v22 != 3)
        v25 = v26;
      if (v22 == 2)
        v25 = v24;
      v19 = v25 | (8 * v21) & 0x20;
    }
  }
  if (*(_BYTE *)(a1 + 17701))
    v19 |= 0x1000000uLL;
  if (*(_BYTE *)(a1 + 15283))
    v19 |= 8uLL;
  v27 = (0xFFu >> (8 - *(_WORD *)(v10 + 152))) & *v4;
  if (v27)
  {
    v28 = 0;
    v29 = (float *)(a1 + 15724);
    while (1)
    {
      if ((v27 & 1) != 0)
      {
        v30 = (_WORD *)v102[v28];
        if (v30)
          break;
      }
LABEL_86:
      ++v28;
      v29 += 19;
      v48 = v27 > 1;
      v27 >>= 1;
      if (!v48)
      {
        v20 = *(_WORD *)(v10 + 26);
        goto LABEL_256;
      }
    }
    v19 |= (256 << v28) & 0xFF00;
    *(_QWORD *)&v98[0] = v19;
    v31 = *((unsigned __int16 *)v29 - 18);
    if (v31 <= 0x20FF)
    {
      if (v31 == 260)
      {
        v32 = (char *)v98 + 8 * v28;
        v33 = *((_QWORD *)v32 + 1) & 0xFFFFFFFF8FFFFFFFLL | 0x40000000;
        goto LABEL_57;
      }
      if (v31 == 3042)
      {
        v32 = (char *)v98 + 8 * v28;
        v33 = *((_QWORD *)v32 + 1) & 0xFFFFFFFF8FFFFFFFLL | 0x20000000;
        goto LABEL_57;
      }
      goto LABEL_47;
    }
    if (v31 != 34160)
    {
      if (v31 == 8449)
      {
        v32 = (char *)v98 + 8 * v28;
        v33 = *((_QWORD *)v32 + 1) & 0xFFFFFFFF8FFFFFFFLL | 0x10000000;
        goto LABEL_57;
      }
      if (v31 == 8448)
      {
        v32 = (char *)v98 + 8 * v28;
        v33 = *((_QWORD *)v32 + 1) & 0xFFFFFFFF8FFFFFFFLL;
LABEL_57:
        *((_QWORD *)v32 + 1) = v33;
LABEL_58:
        v39 = (unsigned __int16)v30[2];
        if (v39 == 34041 || v39 == 6402)
        {
          v41 = (char *)v98 + 8 * v28;
          *((_QWORD *)v41 + 1) = v33 | 0x8000000000000000;
          if (v30[75])
          {
            v33 |= 0xC000000000000000;
            *((_QWORD *)v41 + 1) = v33;
          }
          else
          {
            v33 |= 0x8000000000000000;
          }
        }
        switch(*v30 & 0xF)
        {
          case 0:
            v42 = (char *)v98 + 8 * v28;
            v43 = v33 & 0xF8FFFFFFFFFFFFFFLL | 0x100000000000000;
            break;
          case 1:
            v42 = (char *)v98 + 8 * v28;
            v43 = v33 & 0xF8FFFFFFFFFFFFFFLL | 0x200000000000000;
            break;
          case 2:
            v42 = (char *)v98 + 8 * v28;
            v43 = v33 & 0xF8FFFFFFFFFFFFFFLL | 0x300000000000000;
            break;
          case 3:
            v42 = (char *)v98 + 8 * v28;
            v43 = v33 & 0xF8FFFFFFFFFFFFFFLL | 0x400000000000000;
            break;
          default:
            v42 = (char *)v98 + 8 * v28;
            v43 = v33 & 0xF8FFFFFFFFFFFFFFLL | 0x500000000000000;
            break;
        }
        *((_QWORD *)v42 + 1) = v43;
        if (v43 >= 0)
          v44 = 2;
        else
          v44 = 57;
        v45 = (unsigned __int16)v30[v44];
        switch(v45)
        {
          case 6403:
          case 6407:
            goto LABEL_79;
          case 6404:
          case 6405:
          case 6408:
            goto LABEL_80;
          case 6406:
            v46 = v43 & 0xC7FFFFFFFFFFFFFFLL;
            goto LABEL_84;
          case 6409:
            v46 = v43 & 0xC7FFFFFFFFFFFFFFLL | 0x800000000000000;
            goto LABEL_84;
          case 6410:
            v46 = v43 & 0xC7FFFFFFFFFFFFFFLL | 0x1000000000000000;
            goto LABEL_84;
          default:
            if (v45 == 32841)
            {
              v46 = v43 & 0xC7FFFFFFFFFFFFFFLL | 0x1800000000000000;
            }
            else if (v45 == 33319)
            {
LABEL_79:
              v46 = v43 & 0xC7FFFFFFFFFFFFFFLL | 0x2000000000000000;
            }
            else
            {
LABEL_80:
              v46 = v43 & 0xC7FFFFFFFFFFFFFFLL | 0x2800000000000000;
            }
LABEL_84:
            v47 = (char *)v98 + 8 * v28;
            *((_QWORD *)v47 + 1) = v46;
            if (((1 << v28) & v3[2882]) != 0)
              *((_QWORD *)v47 + 1) = v46 | 0x80000000;
            break;
        }
        goto LABEL_86;
      }
LABEL_47:
      v32 = (char *)v98 + 8 * v28;
      v33 = *((_QWORD *)v32 + 1) & 0xFFFFFFFF8FFFFFFFLL | 0x30000000;
      goto LABEL_57;
    }
    v34 = (char *)v98 + 8 * v28;
    v35 = *((_QWORD *)v34 + 1) & 0xFFFFFFFF8FFFFFFFLL | 0x50000000;
    *((_QWORD *)v34 + 1) = v35;
    v36 = *((unsigned __int16 *)v29 - 16);
    if (v36 > 0x8574)
    {
      if (*((unsigned __int16 *)v29 - 16) <= 0x86AEu)
      {
        if (v36 == 34165)
        {
          v37 = 0;
          v38 = 4;
          goto LABEL_106;
        }
        if (v36 == 34478)
        {
          v37 = 0;
          v38 = 5;
          goto LABEL_106;
        }
      }
      else
      {
        switch(v36)
        {
          case 0x86AFu:
            v37 = 0;
            v38 = 6;
            goto LABEL_106;
          case 0x8744u:
            v37 = 0;
            v38 = 8;
            goto LABEL_106;
          case 0x8745u:
            v37 = 0;
            v38 = 9;
            goto LABEL_106;
        }
      }
    }
    else if (*((unsigned __int16 *)v29 - 16) <= 0x20FFu)
    {
      if (v36 == 260)
      {
        v37 = 0;
        v38 = 1;
        goto LABEL_106;
      }
      if (v36 == 7681)
      {
        v37 = 1;
        v38 = 7;
        goto LABEL_106;
      }
    }
    else
    {
      switch(v36)
      {
        case 0x2100u:
          v37 = 0;
          v38 = 0;
          goto LABEL_106;
        case 0x84E7u:
          v37 = 0;
          v38 = 2;
          goto LABEL_106;
        case 0x8574u:
          v37 = 0;
          v38 = 3;
          goto LABEL_106;
      }
    }
    v37 = 0;
    v38 = 10;
LABEL_106:
    v49 = *((unsigned __int16 *)v29 - 14);
    if (v49 > 0x8575)
    {
      switch(v49)
      {
        case 0x8578u:
          v50 = 3;
          goto LABEL_120;
        case 0x8577u:
          v50 = 2;
          goto LABEL_120;
        case 0x8576u:
          v50 = 1;
          goto LABEL_120;
      }
    }
    else
    {
      if (!*((_WORD *)v29 - 14))
      {
        v50 = 5;
        goto LABEL_120;
      }
      if (v49 == 1)
      {
        v50 = 4;
        goto LABEL_120;
      }
      if (v49 == 5890)
      {
        v50 = 0;
        goto LABEL_120;
      }
    }
    v50 = v49 + 70;
LABEL_120:
    v51 = v50 & 0x1F | v35 & 0xFFFFFFFFDE1FFFE0 | (v38 << 21);
    if (v37)
    {
      v52 = v51 & 0xFFFFFFFFDFFFFC1FLL | 0x20;
      v53 = 1;
LABEL_122:
      v54 = 1;
      goto LABEL_144;
    }
    v55 = *((unsigned __int16 *)v29 - 13);
    if (v55 > 0x8575)
    {
      switch(v55)
      {
        case 0x8578u:
          v56 = 3;
          goto LABEL_137;
        case 0x8577u:
          v56 = 2;
          goto LABEL_137;
        case 0x8576u:
          v56 = 1;
          goto LABEL_137;
      }
    }
    else
    {
      if (!*((_WORD *)v29 - 13))
      {
        v56 = 5;
        goto LABEL_137;
      }
      if (v55 == 1)
      {
        v56 = 4;
        goto LABEL_137;
      }
      if (v55 == 5890)
      {
        v56 = 0;
        goto LABEL_137;
      }
    }
    v56 = v55 + 70;
LABEL_137:
    v52 = (32 * (v56 & 0x1F)) | v51 & 0xFFFFFFFFDFFFFC1FLL;
    if (((0xEFuLL >> v38) & 1) != 0)
    {
      v54 = 1;
      v53 = 1;
      goto LABEL_144;
    }
    v57 = *((unsigned __int16 *)v29 - 12);
    if (v57 > 0x8575)
    {
      switch(v57)
      {
        case 0x8578u:
          v53 = 0;
          v54 = 3;
          goto LABEL_144;
        case 0x8577u:
          v53 = 0;
          v54 = 2;
          goto LABEL_144;
        case 0x8576u:
          v53 = 0;
          goto LABEL_122;
      }
    }
    else
    {
      if (!*((_WORD *)v29 - 12))
      {
        v53 = 0;
        v54 = 5;
        goto LABEL_144;
      }
      if (v57 == 1)
      {
        v53 = 0;
        v54 = 4;
        goto LABEL_144;
      }
      if (v57 == 5890)
      {
        v53 = 0;
        v54 = 0;
        goto LABEL_144;
      }
    }
    v53 = 0;
    v54 = v57 + 70;
LABEL_144:
    if ((unsigned __int16)(*((_WORD *)v29 - 8) - 768) > 3u)
    {
      v58 = 98304;
      if ((v37 & 1) == 0)
        goto LABEL_146;
    }
    else
    {
      v58 = qword_21B9A4E70[(__int16)(*((_WORD *)v29 - 8) - 768)];
      if ((v37 & 1) == 0)
      {
LABEL_146:
        if ((unsigned __int16)(*((_WORD *)v29 - 7) - 768) <= 3u)
        {
          v59 = qword_21B9A4E90[(__int16)(*((_WORD *)v29 - 7) - 768)];
          if ((v53 & 1) == 0)
            goto LABEL_148;
LABEL_152:
          v60 = 0;
          goto LABEL_156;
        }
        v59 = 393216;
        if ((v53 & 1) != 0)
          goto LABEL_152;
LABEL_148:
        if ((unsigned __int16)(*((_WORD *)v29 - 6) - 768) > 3u)
          v60 = 1572864;
        else
          v60 = qword_21B9A4EB0[(__int16)(*((_WORD *)v29 - 6) - 768)];
LABEL_156:
        v61 = v60 | v59 | v58 | v52 & 0xFFFFFFFFF9E003FFLL | ((unint64_t)(v54 & 0x1F) << 10);
        v62 = *(v29 - 1);
        v63 = 2 * (v62 == 4.0);
        if (v62 == 1.0)
          v63 = 1;
        v64 = v61 | (v63 << 25);
        if ((v52 & 0x1E00000) == 0xC00000)
        {
          v33 = v64 & 0xFF000000FFFFFFFFLL | (v63 << 54) | 0x1C042100000000;
LABEL_246:
          *((_QWORD *)v34 + 1) = v33;
          goto LABEL_58;
        }
        v65 = *((unsigned __int16 *)v29 - 15);
        if (v65 > 0x8574)
        {
          if (*((unsigned __int16 *)v29 - 15) <= 0x86AEu)
          {
            if (v65 == 34165)
            {
              v66 = 0;
              v67 = 4;
              goto LABEL_188;
            }
            if (v65 == 34478)
            {
              v66 = 0;
              v67 = 5;
              goto LABEL_188;
            }
          }
          else
          {
            switch(v65)
            {
              case 0x86AFu:
                v66 = 0;
                v67 = 6;
                goto LABEL_188;
              case 0x8744u:
                v66 = 0;
                v67 = 8;
                goto LABEL_188;
              case 0x8745u:
                v66 = 0;
                v67 = 9;
                goto LABEL_188;
            }
          }
        }
        else if (*((unsigned __int16 *)v29 - 15) <= 0x20FFu)
        {
          if (v65 == 260)
          {
            v66 = 0;
            v67 = 1;
            goto LABEL_188;
          }
          if (v65 == 7681)
          {
            v66 = 1;
            v67 = 7;
            goto LABEL_188;
          }
        }
        else
        {
          switch(v65)
          {
            case 0x2100u:
              v66 = 0;
              v67 = 0;
              goto LABEL_188;
            case 0x84E7u:
              v66 = 0;
              v67 = 2;
              goto LABEL_188;
            case 0x8574u:
              v66 = 0;
              v67 = 3;
              goto LABEL_188;
          }
        }
        v66 = 0;
        v67 = 10;
LABEL_188:
        v68 = *((unsigned __int16 *)v29 - 11);
        if (v68 > 0x8575)
        {
          switch(v68)
          {
            case 0x8578u:
              v69 = 3;
              goto LABEL_202;
            case 0x8577u:
              v69 = 2;
              goto LABEL_202;
            case 0x8576u:
              v69 = 1;
              goto LABEL_202;
          }
        }
        else
        {
          if (!*((_WORD *)v29 - 11))
          {
            v69 = 5;
            goto LABEL_202;
          }
          if (v68 == 1)
          {
            v69 = 4;
            goto LABEL_202;
          }
          if (v68 == 5890)
          {
            v69 = 0;
            goto LABEL_202;
          }
        }
        v69 = v68 + 70;
LABEL_202:
        v70 = ((unint64_t)(v69 & 0x1F) << 32) | v64 & 0xFFC3FFE0FFFFFFFFLL | (v67 << 50);
        if (v66)
        {
          v71 = v70 & 0xFFFFFC1FFFFFFFFFLL | 0x2000000000;
          v72 = 1;
LABEL_204:
          v73 = 1;
          goto LABEL_231;
        }
        v74 = *((unsigned __int16 *)v29 - 10);
        if (v74 > 0x8575)
        {
          switch(v74)
          {
            case 0x8578u:
              v75 = 3;
              goto LABEL_224;
            case 0x8577u:
              v75 = 2;
              goto LABEL_224;
            case 0x8576u:
              v75 = 1;
              goto LABEL_224;
          }
        }
        else
        {
          if (!*((_WORD *)v29 - 10))
          {
            v75 = 5;
            goto LABEL_224;
          }
          if (v74 == 1)
          {
            v75 = 4;
            goto LABEL_224;
          }
          if (v74 == 5890)
          {
            v75 = 0;
            goto LABEL_224;
          }
        }
        v75 = v74 + 70;
LABEL_224:
        v71 = v70 & 0xFFFFFC1FFFFFFFFFLL | ((unint64_t)(v75 & 0x1F) << 37);
        if (((0xEFuLL >> v67) & 1) != 0)
        {
          v73 = 1;
          v72 = 1;
          goto LABEL_231;
        }
        v76 = *((unsigned __int16 *)v29 - 9);
        if (v76 > 0x8575)
        {
          switch(v76)
          {
            case 0x8578u:
              v72 = 0;
              v73 = 3;
              goto LABEL_231;
            case 0x8577u:
              v72 = 0;
              v73 = 2;
              goto LABEL_231;
            case 0x8576u:
              v72 = 0;
              goto LABEL_204;
          }
        }
        else
        {
          if (!*((_WORD *)v29 - 9))
          {
            v72 = 0;
            v73 = 5;
            goto LABEL_231;
          }
          if (v76 == 1)
          {
            v72 = 0;
            v73 = 4;
            goto LABEL_231;
          }
          if (v76 == 5890)
          {
            v72 = 0;
            v73 = 0;
            goto LABEL_231;
          }
        }
        v72 = 0;
        v73 = v76 + 70;
LABEL_231:
        if ((unsigned __int16)(*((_WORD *)v29 - 5) - 768) > 3u)
        {
          v77 = 0x800000000000;
          if ((v66 & 1) == 0)
            goto LABEL_233;
        }
        else
        {
          v77 = qword_21B9A4ED0[(__int16)(*((_WORD *)v29 - 5) - 768)];
          if ((v66 & 1) == 0)
          {
LABEL_233:
            if ((unsigned __int16)(*((_WORD *)v29 - 4) - 768) <= 3u)
            {
              v78 = qword_21B9A4EF0[(__int16)(*((_WORD *)v29 - 4) - 768)];
              if ((v72 & 1) == 0)
                goto LABEL_235;
LABEL_239:
              v79 = 0;
LABEL_243:
              v80 = v78 | v77 | v71 & 0xFF3C03FFFFFFFFFFLL | ((unint64_t)(v73 & 0x1F) << 42);
              v81 = (unint64_t)(*v29 == 4.0) << 55;
              if (*v29 == 1.0)
                v81 = 0x40000000000000;
              v33 = v81 | v79 | v80;
              goto LABEL_246;
            }
            v78 = 0x1000000000000;
            if ((v72 & 1) != 0)
              goto LABEL_239;
LABEL_235:
            if ((unsigned __int16)(*((_WORD *)v29 - 3) - 768) > 3u)
              v79 = 0x2000000000000;
            else
              v79 = qword_21B9A4F10[(__int16)(*((_WORD *)v29 - 3) - 768)];
            goto LABEL_243;
          }
        }
        v78 = 0;
        if ((v72 & 1) != 0)
          goto LABEL_239;
        goto LABEL_235;
      }
    }
    v59 = 0;
    if ((v53 & 1) != 0)
      goto LABEL_152;
    goto LABEL_148;
  }
LABEL_256:
  v8 = *(_QWORD *)&v5 | 0xFFFFFFFF00000000;
  if (*(_BYTE *)(a1 + 15377) && (a2 & 1) != 0 && (v20 & 0x800) != 0)
    v19 = v19 & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)(*(_BYTE *)(a1 + 15384) & BYTE1(v19)) << 32);
  v9 = v19 | ((unint64_t)(v20 & 0x2000) << 27);
LABEL_261:
  v82 = *(_BYTE *)(v10 + 25) & 0x7F;
  *(_QWORD *)&v98[0] = v9 & 0xFFFFFDFFFFFFFFFFLL | ((unint64_t)(v82 == 2) << 41);
  StateProgram = *(int16x4_t **)(a1 + 24512);
  if (!*(_QWORD *)&StateProgram[54] && !*(_QWORD *)&StateProgram[55])
  {
    Object = cvmHashMachineFindObject();
    if (Object)
    {
      v88 = Object;
      gleDestroyStateProgram(a1, StateProgram);
      goto LABEL_272;
    }
    StateProgram[54] = 0;
    StateProgram[55] = 0;
    if (v82)
    {
      StateProgram[55] = (int16x4_t)glpCallFragmentStateToLLVMIR();
    }
    else
    {
      if (v3[196])
      {
        StateProgram[55] = (int16x4_t)glpCallFragmentStateToLLVMIR();
        free(*(void **)&StateProgram[13]);
        StateProgram[13] = 0;
        free(*(void **)&StateProgram[60]);
        StateProgram[60] = 0;
      }
      StateProgram[54] = (int16x4_t)glpFragmentStateToPPStream();
    }
    v92 = (_DWORD *)StateProgram[13];
    if (v92)
      LODWORD(v92) = *v92;
    StateProgram[64].i32[0] = (int)v92;
    StateProgram[53].i8[3] &= ~2u;
    StateProgram[56] = (int16x4_t)v8;
    gleModifyPluginPipelineProgram(a1, (uint64_t)StateProgram, 1);
LABEL_286:
    glePPUpdateProgram(a1, StateProgram);
    v88 = cvmHashObjectCreate();
    result = cvmHashMachineAddObject();
    goto LABEL_287;
  }
  result = cvmHashObjectGetKey();
  v85 = 0;
  v86 = 0;
  do
  {
    v86 |= *(_QWORD *)((char *)v98 + v85) ^ *(_QWORD *)(result + v85);
    v85 += 8;
  }
  while (v85 != 72);
  if (!v86)
    return result;
  cvmHashObjectRelease();
  v87 = cvmHashMachineFindObject();
  if (!v87)
  {
    if (v82)
    {
      v89 = glpCallFragmentStateToLLVMIR();
      v90 = 0;
    }
    else
    {
      if (v3[196])
      {
        v89 = glpCallFragmentStateToLLVMIR();
        free(0);
        free(0);
      }
      else
      {
        v89 = 0;
      }
      v90 = glpFragmentStateToPPStream();
    }
    StateProgram = (int16x4_t *)gleCreateStateProgram(a1, 4, v90, v89, 0, 0, 0, v8);
    StateProgram[53].i8[3] &= ~2u;
    StateProgram[13] = 0;
    StateProgram[60] = 0;
    StateProgram[64].i32[0] = 0;
    *(_QWORD *)(a1 + 24512) = StateProgram;
    goto LABEL_286;
  }
  v88 = v87;
LABEL_272:
  result = cvmHashObjectGetObject();
  StateProgram = (int16x4_t *)result;
  *(_QWORD *)(a1 + 24512) = result;
LABEL_287:
  *(_QWORD *)(a1 + 24592) = v88;
  *(_QWORD *)(a1 + 19280) = StateProgram + 71;
  v93 = v3[2904];
  if (v3[2904])
  {
    v94 = v3 + 3872;
    v95 = StateProgram;
    do
    {
      v96 = (uint64_t)*v95++;
      *v94 = v96;
      v94 += 209;
      --v93;
    }
    while (v93);
  }
  for (i = 0; i != 32; ++i)
    *(_DWORD *)(a1 + 2064 + i * 4) = StateProgram[34].i32[i] | StateProgram[18].i32[i];
  v4[1217] = 0;
  *(_DWORD *)(a1 + 1532) |= 0x8400000u;
  return result;
}

uint64_t gleUpdateFragmentFallbackProgram(uint64_t a1, unsigned int a2)
{
  int v3;
  unint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  unint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t *v25;
  uint64_t Object;
  uint64_t v27;
  uint64_t StateProgram;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;

  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  v3 = *(_BYTE *)(*(_QWORD *)(a1 + 29032) + 25) & 0x7F;
  v4 = (unint64_t)(v3 == 2) << 41;
  if ((*(_BYTE *)(a1 + 24864) & 0x10) != 0)
  {
    v8 = *(_QWORD *)(a1 + 24768);
    if (!v8)
      v8 = *(_QWORD *)(*(_QWORD *)(a1 + 24776) + 72);
    v6 = (_DWORD *)(v8 + 3596);
    v7 = (uint64_t *)(v8 + 3552);
  }
  else
  {
    if (!*(_BYTE *)(a1 + 24760))
    {
LABEL_12:
      v12 = 256;
      goto LABEL_20;
    }
    v5 = *(_QWORD *)(a1 + 24432);
    v6 = (_DWORD *)(v5 + 516);
    v7 = (uint64_t *)(v5 + 472);
  }
  v9 = *v7;
  v10 = *v6 & 0x1000;
  if (v9)
    v11 = v10 == 0;
  else
    v11 = 1;
  if (v11)
    goto LABEL_12;
  v4 |= 0x10000uLL;
  v13 = *(unsigned int *)(v9 + 64);
  if ((_DWORD)v13)
  {
    v14 = 0;
    v15 = (unint64_t *)(v9 + 8 * *(unsigned int *)(v9 + 68));
    v16 = 8 * v13;
    do
    {
      v17 = *v15++;
      v18 = 1 << ((v17 >> 33) & 7);
      if ((v17 & 0x1F00) != 0x400)
        LOBYTE(v18) = 0;
      v14 |= v18;
      v16 -= 8;
    }
    while (v16);
    v12 = (unint64_t)v14 << 8;
  }
  else
  {
    v12 = 0;
  }
LABEL_20:
  v35 = v4 | v12 | 0x20000;
  v19 = a1 + 8 * a2;
  v20 = a2;
  if (*(_QWORD *)(v19 + 24600))
  {
    result = cvmHashObjectGetKey();
    v22 = 0;
    v23 = 0;
    do
    {
      v23 |= *(uint64_t *)((char *)&v35 + v22) ^ *(_QWORD *)(result + v22);
      v22 += 8;
    }
    while (v22 != 72);
    if (!v23)
      return result;
    cvmHashObjectRelease();
  }
  v24 = (_BYTE *)(a1 + 32496);
  v25 = (uint64_t *)(v19 + 24600);
  Object = cvmHashMachineFindObject();
  if (Object)
  {
    v27 = Object;
    result = cvmHashObjectGetObject();
    StateProgram = result;
  }
  else
  {
    if (v3)
    {
      v29 = glpCallFragmentStateToLLVMIR();
      v30 = 0;
    }
    else
    {
      v30 = glpFragmentStateToPPStream();
      v29 = 0;
    }
    StateProgram = gleCreateStateProgram(a1, 4, v30, v29, 0, 0, 0, -1);
    *(_QWORD *)(StateProgram + 104) = 0;
    *(_QWORD *)(StateProgram + 480) = 0;
    *(_DWORD *)(StateProgram + 512) = 0;
    v27 = cvmHashObjectCreate();
    result = cvmHashMachineAddObject();
  }
  *v25 = StateProgram;
  v31 = a1 + 8 * v20;
  *(_QWORD *)(v31 + 24632) = v27;
  v32 = *v24;
  if (*v24)
  {
    v33 = (_QWORD *)(v31 + 33472);
    do
    {
      v34 = *(_QWORD *)StateProgram;
      StateProgram += 8;
      *v33 = v34;
      v33 += 209;
      --v32;
    }
    while (v32);
  }
  return result;
}

uint64_t gleCreateFragmentUtilProgram(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  if ((*(_BYTE *)(*(_QWORD *)(a1 + 29032) + 25) & 0x7F) != 0)
  {
    v2 = glpCallFragmentStateToLLVMIR();
    v3 = 0;
  }
  else
  {
    v3 = glpFragmentStateToPPStream();
    v2 = 0;
  }
  result = gleCreateStateProgram(a1, 4, v3, v2, 0, 0, 0, -14);
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)(result + 480) = 0;
  *(_DWORD *)(result + 512) = 0;
  return result;
}

double gleInitAccumObject(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 28832) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 28816) = 0u;
  *(_OWORD *)(a1 + 28800) = 0u;
  return result;
}

void gleReclaimAccumResources(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  char *v6;
  unint64_t v7;
  _QWORD *v8;
  char *v9;

  v2 = *(_QWORD **)(a1 + 28800);
  if (v2)
  {
    gleDestroyStateProgram(a1, v2);
    *(_QWORD *)(a1 + 28800) = 0;
  }
  v3 = *(_QWORD **)(a1 + 28808);
  if (v3)
  {
    gleDestroyStateProgram(a1, v3);
    *(_QWORD *)(a1 + 28808) = 0;
  }
  v4 = *(_QWORD **)(a1 + 28816);
  if (v4)
  {
    gleDestroyAccumTexture(a1, v4);
    *(_QWORD *)(a1 + 28816) = 0;
  }
  v5 = *(_QWORD **)(a1 + 28824);
  if (v5)
  {
    gleDestroyAccumTexture(a1, v5);
    *(_QWORD *)(a1 + 28824) = 0;
  }
  v6 = *(char **)(a1 + 28832);
  if (v6)
  {
    if (*(_BYTE *)(a1 + 32496))
    {
      v7 = 0;
      v8 = (_QWORD *)(a1 + 32512);
      v9 = v6 + 160;
      do
      {
        (*(void (**)(_QWORD, _QWORD))(v8[206] + 1592))(*v8, *(_QWORD *)&v9[8 * v7]);
        (*(void (**)(_QWORD, _QWORD))(v8[206] + 1616))(v8[1], *(_QWORD *)&v9[8 * v7++]);
        v8 += 209;
      }
      while (v7 < *(unsigned __int8 *)(a1 + 32496));
    }
    free(v6);
    *(_QWORD *)(a1 + 28832) = 0;
  }
}

void gleDestroyAccumTexture(uint64_t a1, _QWORD *a2)
{
  unsigned __int8 *v3;
  unint64_t v4;
  _QWORD *v5;

  v3 = (unsigned __int8 *)(a1 + 32496);
  if (*(_BYTE *)(a1 + 32496))
  {
    v4 = 0;
    v5 = (_QWORD *)(a1 + 32512);
    do
    {
      (*(void (**)(_QWORD, _QWORD))(v5[206] + 1392))(*v5, a2[v4++]);
      v5 += 209;
    }
    while (v4 < *v3);
  }
  gfxDestroyPluginTexture();
  if (a2[132])
    gfxFreeTextureLevel();
  free(a2);
}

uint64_t gleAccumFast(unint64_t a1, int a2, float a3)
{
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  int v9;
  __int16 v10;
  int v11;
  int v12;
  __int16 v13;
  int v14;
  int v15;
  _BYTE *AccumTexture;
  _BYTE *v17;
  uint64_t v18;
  void *v19;
  int v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  unsigned __int8 *v25;
  int v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  unint64_t v38;
  uint64_t i;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  char v53;
  char v54;
  char v55;
  int v56;
  int v57;
  __n128 v58;
  double v59;
  double v60;
  float v61;
  float v62;
  float v63;
  int v64;
  int v65;
  int v66;
  uint64_t v67;
  _BYTE *v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  uint64_t v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  int v85;
  float v86;
  int v87;
  float v88;
  int v89;
  int v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  _DWORD *v94;
  uint64_t v95;
  _BYTE *v96;
  unint64_t v97;
  __int128 v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t result;
  int v107;
  int v108;
  BOOL v110;
  uint64_t v111;
  int v112;
  int v113;
  unsigned int v114;
  _BYTE *v115;
  int v116;
  int v117;
  int v118;
  __int16 v119;
  char v120;
  char v121;
  char v122;
  char v123;
  char v124;
  unsigned __int8 v125;
  char v126;
  char v127;
  char v128;
  char v129;
  char v130;
  uint64_t v131;
  int v132;
  int v133;
  __int128 v134;
  __int128 v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  _BYTE v139[96];
  _BYTE v140[96];
  _BYTE v141[484];
  int v142[3];

  v6 = a1 + 28696;
  v7 = a1 + 24748;
  v8 = *(_DWORD *)(a1 + 29632);
  v9 = *(_DWORD *)(a1 + 29636);
  bzero(&v118, 0x2F8uLL);
  if ((*(_BYTE *)(v7 + 116) & 0x10) != 0)
  {
    v10 = 3;
  }
  else if (*(_BYTE *)(v7 + 12))
  {
    v10 = 2;
  }
  else
  {
    v10 = 1;
  }
  v11 = a2 - 256;
  switch(a2)
  {
    case 256:
      v10 |= 0x200u;
      goto LABEL_10;
    case 257:
LABEL_10:
      v14 = 0;
      v13 = v10 | 8;
      v12 = 1;
      goto LABEL_12;
    case 258:
      v14 = 0;
      v12 = 0;
      v13 = v10 | 4;
      goto LABEL_12;
    case 259:
    case 260:
      v10 |= 0x200u;
      goto LABEL_8;
    default:
LABEL_8:
      v12 = 0;
      v13 = v10 | 0xC;
      v14 = 1;
LABEL_12:
      if (*(_BYTE *)(*(_QWORD *)(a1 + 29480) + 101))
      {
        v15 = *(_DWORD *)(a1 + 1544);
        if ((v15 & 0x40000000) == 0)
        {
          *(_DWORD *)(v7 + 3904) = 0;
          *(_DWORD *)(a1 + 1544) = v15 | 0x40000000;
        }
      }
      v112 = a2;
      if (v14)
      {
        if (!*(_QWORD *)(a1 + 28800))
        {
          AccumTexture = 0;
          *(_QWORD *)(a1 + 28800) = gleCreateFragmentUtilProgram(a1);
          goto LABEL_26;
        }
        goto LABEL_25;
      }
      if (*(_QWORD *)(a1 + 28808))
      {
        if (v12)
          goto LABEL_20;
LABEL_25:
        AccumTexture = 0;
        goto LABEL_26;
      }
      *(_QWORD *)(a1 + 28808) = gleCreateFragmentUtilProgram(a1);
      if (!v12)
        goto LABEL_25;
LABEL_20:
      AccumTexture = *(_BYTE **)(a1 + 28816);
      if (AccumTexture)
      {
        if (v8 != *((unsigned __int16 *)AccumTexture + 518) || v9 != *((unsigned __int16 *)AccumTexture + 519))
          gleResizeAccumTexture(a1, *(_QWORD *)(a1 + 28816), v8, v9);
      }
      else
      {
        AccumTexture = gleCreateAccumTexture(a1, v8, v9);
        *(_QWORD *)(a1 + 28816) = AccumTexture;
      }
LABEL_26:
      v17 = *(_BYTE **)(a1 + 28824);
      v116 = v9;
      if (v17)
      {
        if (v8 == *((unsigned __int16 *)v17 + 518) && v9 == *((unsigned __int16 *)v17 + 519))
        {
          v113 = 0;
        }
        else
        {
          gleResizeAccumTexture(a1, (uint64_t)v17, v8, v9);
          v113 = 1;
        }
      }
      else
      {
        v17 = gleCreateAccumTexture(a1, v8, v9);
        v113 = 0;
        *(_QWORD *)(a1 + 28824) = v17;
      }
      v18 = *(_QWORD *)(a1 + 28832);
      if (!v18)
      {
        v19 = malloc_type_malloc(88 * *(unsigned __int8 *)(v6 + 3800) + 520, 0x577B5147uLL);
        if (!v19)
          abort();
        v18 = (uint64_t)v19;
        gleInitializeFramebuffer(a1, (uint64_t)v19);
        *(_WORD *)(v18 + 476) = 0;
        *(_DWORD *)(v18 + 504) = 0;
        *(_WORD *)(v18 + 432) = 0;
        *(_DWORD *)(v18 + 440) = 0xFFFF;
        gleCreatePluginFramebuffer(a1, v18);
        v20 = *(_DWORD *)(v18 + 500) | 1;
        *(_DWORD *)(v18 + 500) = v20;
        *(_QWORD *)v18 = v17 - 40;
        v21 = *(unsigned __int8 *)(v6 + 3800);
        if (*(_BYTE *)(v6 + 3800))
        {
          v22 = (_QWORD *)(v18 + 520);
          do
          {
            v23 = *(_QWORD *)v17;
            v17 += 8;
            *v22 = v23;
            v22 += 11;
            --v21;
          }
          while (v21);
        }
        if ((*(_BYTE *)(*(_QWORD *)(a1 + 29480) + 561) & 0x40) != 0)
          v20 &= *(_DWORD *)(v18 + 508) | *(_DWORD *)(v18 + 504) | 0xFFFFFF00;
        *(_DWORD *)(v18 + 456) = v20;
        *(_QWORD *)(a1 + 28832) = v18;
      }
      v114 = v8;
      v115 = AccumTexture;
      v117 = v12;
      v24 = (_QWORD *)(a1 + 33176);
      v25 = (unsigned __int8 *)(a1 + 15006);
      v26 = v13 & 0xC;
      v27 = 28808;
      if (v26 == 12)
        v27 = 28800;
      v28 = *(uint64_t **)(a1 + v27);
      if (v26 != 4)
      {
        v29 = v18 - 40;
        *(_QWORD *)(a1 + 28960) = v18 - 40;
        v30 = *(unsigned __int8 *)(v6 + 3800);
        if (*(_BYTE *)(v6 + 3800))
        {
          v31 = (_QWORD *)(a1 + 33592);
          v32 = (uint64_t *)(v18 + 160);
          do
          {
            v33 = *v32++;
            *v31 = v33;
            v31 += 209;
            --v30;
          }
          while (v30);
        }
        *(_DWORD *)(v7 + 3904) = 0;
        *(_DWORD *)(v6 + 1104) |= 0x50000000u;
        if ((**(_BYTE **)(a1 + 29480) & 2) != 0)
        {
          gleUpdateViewScissorData(a1);
          v29 = *(_QWORD *)(a1 + 28960);
        }
        if (v29)
          v34 = (_DWORD *)(v29 + 552);
        else
          v34 = (_DWORD *)(v6 + 1112);
        *(_WORD *)(a1 + 15342) = *(_DWORD *)(v6 + 1108) & *v34;
        --*(_DWORD *)(v6 + 1120);
      }
      if ((v13 & 3) == 2)
      {
        *(_BYTE *)(v7 + 12) = 0;
      }
      else if ((v13 & 3) == 3)
      {
        *(_DWORD *)(v7 + 116) &= ~0x10u;
        v35 = *(unsigned __int8 *)(v6 + 3800);
        if (*(_BYTE *)(v6 + 3800))
        {
          v36 = 0;
          v37 = v141;
          v38 = a1 + 33504;
          do
          {
            for (i = 0; i != 40; i += 8)
            {
              *(_QWORD *)&v37[i] = *(_QWORD *)(v38 + i);
              *(_QWORD *)(v38 + i) = 0;
            }
            ++v36;
            v37 += 40;
            v38 += 1672;
          }
          while (v36 != v35);
        }
        v124 = *(_BYTE *)(v7 + 12);
        *(_BYTE *)(v7 + 12) = 0;
        *(_DWORD *)(a1 + 1532) |= 0x10000000u;
      }
      *(_BYTE *)v7 = 1;
      v137 = *(_QWORD *)(a1 + 24512);
      *(_QWORD *)(a1 + 24512) = v28;
      v40 = *(unsigned __int8 *)(v6 + 3800);
      if (!*(_BYTE *)(v6 + 3800))
      {
        if (v26 == 12)
          goto LABEL_75;
        v138 = *(_QWORD *)(a1 + 20792);
        v50 = 28816;
        if (v26 == 4)
          v50 = 28824;
        *(_QWORD *)(a1 + 20792) = *(_QWORD *)(a1 + v50) - 40;
        goto LABEL_74;
      }
      v41 = v139;
      v42 = (_QWORD *)(a1 + 33464);
      v43 = *(unsigned __int8 *)(v6 + 3800);
      do
      {
        *v41++ = *v42;
        v44 = *v28++;
        *v42 = v44;
        v42 += 209;
        --v43;
      }
      while (v43);
      if (v26 != 12)
      {
        v45 = 28816;
        if (v26 == 4)
          v45 = 28824;
        v46 = *(uint64_t **)(a1 + v45);
        v138 = *(_QWORD *)(a1 + 20792);
        *(_QWORD *)(a1 + 20792) = v46 - 5;
        v47 = v140;
        v48 = (_QWORD *)(a1 + 33176);
        do
        {
          *v47++ = *v48;
          v49 = *v46++;
          *v48 = v49;
          v48 += 209;
          --v40;
        }
        while (v40);
LABEL_74:
        *(_DWORD *)(a1 + 1524) |= 1u;
        *(_DWORD *)(a1 + 1536) |= 1u;
        *(_DWORD *)(a1 + 1548) |= 0x8000000u;
      }
LABEL_75:
      if ((v13 & 0x200) != 0)
      {
        v130 = *(_BYTE *)(a1 + 15120);
        v131 = *(_QWORD *)(a1 + 15008);
        v132 = *(_DWORD *)(a1 + 15016);
        *(_BYTE *)(a1 + 15120) = -1;
        *(_DWORD *)(a1 + 15016) = -2147057658;
        *(_DWORD *)(v7 + 3904) = 0;
      }
      else
      {
        if ((*(_BYTE *)(a1 + 15120) & 1) == 0)
          goto LABEL_80;
        v13 |= 0x400u;
        v130 = *(_BYTE *)(a1 + 15120);
        *(_BYTE *)(a1 + 15120) = 0;
      }
      *(_DWORD *)(a1 + 1520) |= 2u;
LABEL_80:
      v51 = *(unsigned __int8 *)(a1 + 15319);
      if (*v25 | v51)
      {
        v13 |= 0x100u;
        v125 = *v25;
        v126 = v51;
        *v25 = 0;
        *(_BYTE *)(a1 + 15319) = 0;
        *(_DWORD *)(v7 + 3904) = 0;
        *(_DWORD *)(a1 + 1520) |= 0x20001u;
      }
      if (v26 == 4)
      {
        v128 = *(_BYTE *)(a1 + 15204);
        v52 = *(_DWORD *)(a1 + 15644);
        v129 = v52 & 1;
        *(_BYTE *)(a1 + 15204) = 0;
        *(_DWORD *)(a1 + 15644) = v52 & 0xFFFFFFFE;
        *(_DWORD *)(a1 + 1520) |= 0x10000200u;
      }
      else
      {
        v133 = *(_DWORD *)(a1 + 15336);
        v53 = BYTE1(v133);
        v54 = BYTE2(v133);
        v55 = HIBYTE(v133);
        *(_BYTE *)(a1 + 15336) = v133 | 1;
        *(_BYTE *)(a1 + 15337) = v53 | 1;
        *(_BYTE *)(a1 + 15338) = v54 | 1;
        *(_BYTE *)(a1 + 15339) = v55 | 1;
        v127 = *(_BYTE *)(a1 + 15224);
        *(_BYTE *)(a1 + 15224) = 0;
        *(_DWORD *)(v6 + 1104) |= 0x40400u;
      }
      if (*(_WORD *)(v6 + 1014) == 1)
      {
        v13 |= 0x800u;
        *(_WORD *)(v6 + 1014) = 0;
        *(_BYTE *)(a1 + 15178) = 0;
        *(_DWORD *)(a1 + 1524) |= 0x400000u;
      }
      if (*(_BYTE *)(a1 + 15196))
      {
        v13 |= 0x1000u;
        *(_BYTE *)(a1 + 15196) = 0;
        *(_DWORD *)(v7 + 3904) = 0;
        *(_DWORD *)(v6 + 1104) |= 0x200000u;
      }
      if (*(_BYTE *)(a1 + 15532))
      {
        v13 |= 0x10u;
        v122 = *(_BYTE *)(a1 + 15532);
        *(_BYTE *)(a1 + 15532) = 0;
        *(_DWORD *)(a1 + 1520) |= 0x2000000u;
      }
      v56 = *(unsigned __int16 *)(a1 + 15528);
      if (!*(_BYTE *)(a1 + 15534) && v56 == 2305)
      {
        if (*(_BYTE *)(a1 + 15538))
          goto LABEL_96;
        LOWORD(v56) = 2305;
      }
      v13 |= 0x20u;
      v123 = *(_BYTE *)(a1 + 15534);
      v119 = v56;
      v118 = *(_DWORD *)(a1 + 15524);
      *(_BYTE *)(a1 + 15534) = 0;
      *(_WORD *)(a1 + 15524) = 6914;
      *(_DWORD *)(a1 + 15526) = 151067394;
      *(_BYTE *)(a1 + 15538) = 1;
      *(_DWORD *)(a1 + 1548) |= 0x8200u;
      *(_DWORD *)(a1 + 1520) |= 0x800000u;
LABEL_96:
      v57 = *(unsigned __int8 *)(a1 + 15533);
      if (*(unsigned __int8 *)(a1 + 15537) | v57)
      {
        v13 |= 0x40u;
        v121 = *(_BYTE *)(a1 + 15537);
        v120 = v57;
        *(_BYTE *)(a1 + 15537) = 0;
        *(_BYTE *)(a1 + 15533) = 0;
        *(_DWORD *)(a1 + 1520) |= 0x800000u;
      }
      *(_DWORD *)(a1 + 1532) |= 0x400000u;
      *(_DWORD *)(v7 + 3904) = 0;
      *(_DWORD *)(a1 + 1548) |= 0x78070082u;
      gleUpdateInverseNeeds(a1);
      switch(v11)
      {
        case 0:
        case 4:
          v58.n128_u64[0] = 0x1000100010001;
          goto LABEL_110;
        case 1:
        case 2:
          goto LABEL_111;
        case 3:
          v58.n128_u64[0] = 0x300000003000000;
LABEL_110:
          *(_QWORD *)(a1 + 15008) = v58.n128_u64[0];
LABEL_111:
          v61 = a3;
          v62 = a3;
          v63 = a3;
          if (!v117)
            goto LABEL_112;
          goto LABEL_103;
        default:
          a3 = 0.0;
          v61 = 0.0;
          v62 = 0.0;
          v63 = 0.0;
          if (v112 == 5376)
          {
            a3 = *(float *)(a1 + 15136);
            v61 = *(float *)(a1 + 15140);
            v62 = *(float *)(a1 + 15144);
            v63 = *(float *)(a1 + 15148);
          }
          if (!v117)
          {
LABEL_112:
            v64 = v114;
            if (!v113)
              goto LABEL_116;
            goto LABEL_113;
          }
LABEL_103:
          *((_DWORD *)v115 + 242) = 65540;
          v64 = v114;
          LODWORD(v111) = 0;
          HIDWORD(v111) = v114;
          v65 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(a1 + 29448) + 360))(*(_QWORD *)(a1 + 29016), *(_QWORD *)&v115[8 * *(unsigned __int8 *)(v6 + 3803)], 0, 0, 0, 0, 0, 0, v111, v116);
          if (v65)
          {
            v66 = v113;
            if (((v65 == 1) & ~v113) != 0)
              goto LABEL_116;
          }
          else
          {
            (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 29496) + 272))(*(_QWORD *)(a1 + 29464), 1, 0, *(_QWORD *)&v115[8 * *(unsigned __int8 *)(v6 + 3804)]);
            gfxAllocateTextureLevel();
            v134 = *(_OWORD *)(a1 + 18448);
            v135 = *(_OWORD *)(a1 + 18464);
            v136 = *(_DWORD *)(a1 + 18480);
            v13 |= 0x80u;
            *(_BYTE *)(a1 + 18480) = 0;
            *(_QWORD *)(a1 + 18464) = 0;
            v115[1043] |= 0x10u;
            gfxModifyPluginTextureLevel();
            *(_DWORD *)(a1 + 18452) = 16 * *((unsigned __int16 *)v115 + 522);
            v66 = 1;
            (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, _QWORD, int, _QWORD))(*(_QWORD *)(a1 + 29496) + 224))(*(_QWORD *)(a1 + 29464), 0, 0, v114, v116, 6408, 5126, *((_QWORD *)v115 + 132), 1, 0);
          }
          *(_DWORD *)(v7 + 3904) = 0;
          *(_DWORD *)(a1 + 1524) |= 1u;
          if (v66)
          {
LABEL_113:
            v67 = *(unsigned __int8 *)(v6 + 3800);
            if (*(_BYTE *)(v6 + 3800))
            {
              v68 = (_BYTE *)(v18 + 600);
              do
              {
                *v68 = 1;
                v68 += 88;
                --v67;
              }
              while (v67);
            }
          }
LABEL_116:
          if ((*(_BYTE *)(a1 + 1547) & 0x40) != 0)
            *(_BYTE *)(v6 + 3794) = 1;
          if ((*(_BYTE *)(v7 + 3904) & 0x80) != 0
            && (*(_BYTE *)(v7 + 3933) & 1) != 0
            && (*(_BYTE *)(v7 + 3935) & 1) != 0
            || gleDoSelectiveDispatchCore(a1, 0x80u, 1u, 1u, 0xB8000000, v58, v59, v60))
          {
            v69 = (float)v64;
            v70 = (float)v116;
            v71 = 0.0;
            if ((**(_BYTE **)(a1 + 29032) & 4) != 0)
            {
              v85 = *(_DWORD *)(v6 + 24);
              if (v85 < 0)
                goto LABEL_142;
              v86 = (float)*(int *)(v6 + 20);
              if (v86 > v69)
                goto LABEL_142;
              v87 = *(_DWORD *)(v6 + 32);
              if (v87 < 0)
                goto LABEL_142;
              v88 = (float)*(int *)(v6 + 28);
              if (v88 > v70)
                goto LABEL_142;
              v73 = (float)v87;
              v71 = fmaxf(v86, 0.0);
              if ((float)v85 < v69)
                v69 = (float)v85;
              v72 = fmaxf(v88, 0.0);
              if (v73 < v70)
                goto LABEL_125;
            }
            else
            {
              v72 = 0.0;
            }
            v73 = (float)v116;
LABEL_125:
            v74 = *(_QWORD *)(a1 + 26000);
            v75 = *(float *)(v6 + 4);
            v76 = v75 + (float)(*(float *)v6 * v71);
            v77 = v75 + (float)(*(float *)v6 * v69);
            v78 = *(float *)(v6 + 8);
            v79 = *(float *)(v6 + 12);
            v80 = v79 + (float)(v78 * v72);
            v81 = v79 + (float)(v78 * v73);
            *(_DWORD *)(v74 + 28) = 0;
            *(float *)(v74 + 64) = v76;
            *(float *)(v74 + 68) = v80;
            *(_QWORD *)(v74 + 72) = 0x3F80000000000000;
            *(float *)(v74 + 224) = v71;
            *(float *)(v74 + 228) = v72;
            *(_QWORD *)(v74 + 232) = 0x3F80000000000000;
            *(float *)(v74 + 240) = a3;
            *(float *)(v74 + 244) = v61;
            *(float *)(v74 + 248) = v62;
            *(float *)(v74 + 252) = v63;
            *(_DWORD *)(v74 + 668) = 0;
            *(float *)(v74 + 704) = v77;
            *(float *)(v74 + 708) = v80;
            *(_QWORD *)(v74 + 712) = 0x3F80000000000000;
            *(float *)(v74 + 864) = v69;
            *(float *)(v74 + 868) = v72;
            *(_QWORD *)(v74 + 872) = 0x3F80000000000000;
            *(float *)(v74 + 880) = a3;
            *(float *)(v74 + 884) = v61;
            *(float *)(v74 + 888) = v62;
            *(float *)(v74 + 892) = v63;
            *(_DWORD *)(v74 + 1308) = 0;
            *(float *)(v74 + 1344) = v77;
            *(float *)(v74 + 1348) = v81;
            *(_QWORD *)(v74 + 1352) = 0x3F80000000000000;
            *(float *)(v74 + 1504) = v69;
            *(float *)(v74 + 1508) = v73;
            *(_QWORD *)(v74 + 1512) = 0x3F80000000000000;
            *(float *)(v74 + 1520) = a3;
            *(float *)(v74 + 1524) = v61;
            *(float *)(v74 + 1528) = v62;
            *(float *)(v74 + 1532) = v63;
            *(_DWORD *)(v74 + 1948) = 0;
            *(float *)(v74 + 1984) = v76;
            *(float *)(v74 + 1988) = v81;
            *(_QWORD *)(v74 + 1992) = 0x3F80000000000000;
            *(float *)(v74 + 2144) = v71;
            *(float *)(v74 + 2148) = v73;
            *(_QWORD *)(v74 + 2152) = 0x3F80000000000000;
            *(float *)(v74 + 2160) = a3;
            *(float *)(v74 + 2164) = v61;
            *(float *)(v74 + 2168) = v62;
            *(float *)(v74 + 2172) = v63;
            if (*(_QWORD *)(a1 + 26280))
            {
              v82 = *(__int16 *)(v7 + 1384);
              v142[0] = 0;
              v83 = (*(uint64_t (**)(_QWORD, uint64_t, int *))(a1 + 29200))(*(_QWORD *)(a1 + 29016), 7, v142);
              v84 = v83 + 4 * v82;
              do
              {
                (*(void (**)(unint64_t, uint64_t, unint64_t))(a1 + 26168))(a1, v74, v83);
                v83 += v82;
                v74 += 640;
              }
              while (v83 < v84);
              (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(a1 + 29208))(*(_QWORD *)(a1 + 29016), 2, 7, 4);
            }
            else
            {
              (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(a1 + 29128))(*(_QWORD *)(a1 + 29016), v74, 4, 2);
            }
            v89 = *(_DWORD *)(*(_QWORD *)(a1 + 19296) + 316);
            if (*(_DWORD *)(v6 + 1120) != v89)
            {
              if (*(_QWORD *)(a1 + 28960))
              {
                gleInvalidateCurrentDrawFramebufferTextures(a1);
                v89 = *(_DWORD *)(*(_QWORD *)(a1 + 19296) + 316);
              }
              *(_DWORD *)(v6 + 1120) = v89;
            }
          }
LABEL_142:
          if (v117 && *((_QWORD *)v115 + 132))
          {
            (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 29496) + 272))(*(_QWORD *)(a1 + 29464), 1, 0, *(_QWORD *)&v115[8 * *(unsigned __int8 *)(v6 + 3804)]);
            gfxFreeTextureLevel();
            v115[1043] &= ~0x10u;
            *((_WORD *)v115 + 498) &= ~1u;
          }
          v90 = v13 & 0xC;
          if ((v13 & 0x80) != 0)
          {
            *(_DWORD *)(a1 + 18480) = v136;
            *(_OWORD *)(a1 + 18448) = v134;
            *(_OWORD *)(a1 + 18464) = v135;
          }
          if (v90 != 4)
          {
            *(_QWORD *)(a1 + 28960) = 0;
            v91 = *(unsigned __int8 *)(v6 + 3800);
            if (*(_BYTE *)(v6 + 3800))
            {
              v92 = (_QWORD *)(a1 + 33592);
              do
              {
                *v92 = 0;
                v92 += 209;
                --v91;
              }
              while (v91);
            }
            *(_DWORD *)(v7 + 3904) = 0;
            *(_DWORD *)(v6 + 1104) |= 0x50000000u;
            if ((**(_BYTE **)(a1 + 29480) & 2) != 0)
            {
              gleUpdateViewScissorData(a1);
              v93 = *(_QWORD *)(a1 + 28960);
            }
            else
            {
              v93 = 0;
            }
            if (v93)
              v94 = (_DWORD *)(v93 + 552);
            else
              v94 = (_DWORD *)(v6 + 1112);
            *(_WORD *)(a1 + 15342) = *(_DWORD *)(v6 + 1108) & *v94;
            --*(_DWORD *)(v6 + 1120);
          }
          if ((v13 & 3) == 2)
          {
            *(_BYTE *)(v7 + 12) = 1;
          }
          else if ((v13 & 3) == 3)
          {
            *(_DWORD *)(v7 + 116) |= 0x10u;
            v95 = *(unsigned __int8 *)(v6 + 3800);
            if (*(_BYTE *)(v6 + 3800))
            {
              v96 = v141;
              v97 = a1 + 33504;
              do
              {
                v98 = *((_OWORD *)v96 + 1);
                *(_OWORD *)v97 = *(_OWORD *)v96;
                *(_OWORD *)(v97 + 16) = v98;
                *(_QWORD *)(v97 + 32) = *((_QWORD *)v96 + 4);
                v96 += 40;
                v97 += 1672;
                --v95;
              }
              while (v95);
            }
            *(_BYTE *)(v7 + 12) = v124;
            *(_DWORD *)(a1 + 1532) |= 0x10000000u;
          }
          *(_BYTE *)v7 = 0;
          *(_QWORD *)(a1 + 24512) = v137;
          v99 = *(unsigned __int8 *)(v6 + 3800);
          if (!*(_BYTE *)(v6 + 3800))
          {
            if (v90 == 12)
              goto LABEL_175;
            *(_QWORD *)(a1 + 20792) = v138;
            goto LABEL_174;
          }
          v100 = (_QWORD *)(a1 + 33464);
          v101 = (uint64_t *)v139;
          v102 = *(unsigned __int8 *)(v6 + 3800);
          do
          {
            v103 = *v101++;
            *v100 = v103;
            v100 += 209;
            --v102;
          }
          while (v102);
          if (v90 != 12)
          {
            *(_QWORD *)(a1 + 20792) = v138;
            v104 = (uint64_t *)v140;
            do
            {
              v105 = *v104++;
              *v24 = v105;
              v24 += 209;
              --v99;
            }
            while (v99);
LABEL_174:
            *(_DWORD *)(a1 + 1524) |= 1u;
            *(_DWORD *)(a1 + 1536) |= 1u;
            *(_DWORD *)(a1 + 1548) |= 0x8000000u;
          }
LABEL_175:
          if ((v13 & 0x200) != 0)
          {
            *(_BYTE *)(a1 + 15120) = v130;
            *(_QWORD *)(a1 + 15008) = v131;
            *(_DWORD *)(a1 + 15016) = v132;
          }
          else
          {
            if ((v13 & 0x400) == 0)
              goto LABEL_180;
            *(_BYTE *)(a1 + 15120) = v130;
          }
          *(_DWORD *)(a1 + 1520) |= 2u;
LABEL_180:
          if ((v13 & 0x100) != 0)
          {
            *v25 = v125;
            *(_BYTE *)(a1 + 15319) = v126;
            *(_DWORD *)(v7 + 3904) = 0;
            *(_DWORD *)(a1 + 1520) |= 0x20001u;
          }
          if (v90 != 4)
          {
            *(_DWORD *)(a1 + 15336) = v133;
            *(_BYTE *)(a1 + 15224) = v127;
            *(_DWORD *)(v6 + 1104) |= 0x40400u;
            if ((v13 & 0x800) == 0)
              goto LABEL_189;
            goto LABEL_188;
          }
          *(_BYTE *)(a1 + 15204) = v128;
          if (v129)
            *(_DWORD *)(a1 + 15644) |= 1u;
          *(_DWORD *)(a1 + 1520) |= 0x10000200u;
          if ((v13 & 0x800) != 0)
          {
LABEL_188:
            *(_WORD *)(v6 + 1014) = 1;
            *(_BYTE *)(a1 + 15178) = 1;
            *(_DWORD *)(v7 + 3904) = 0;
            *(_DWORD *)(a1 + 1524) |= 0x400000u;
          }
LABEL_189:
          if ((v13 & 0x1000) != 0)
          {
            *(_BYTE *)(a1 + 15196) = 1;
            *(_DWORD *)(v6 + 1104) |= 0x200000u;
            if ((v13 & 0x10) == 0)
            {
LABEL_191:
              if ((v13 & 0x20) == 0)
                goto LABEL_192;
LABEL_197:
              *(_BYTE *)(a1 + 15534) = v123;
              *(_WORD *)(a1 + 15528) = v119;
              v107 = (unsigned __int16)v118;
              *(_WORD *)(a1 + 15524) = v118;
              v108 = HIWORD(v118);
              *(_WORD *)(a1 + 15526) = HIWORD(v118);
              v110 = v107 == 6914 && v108 == 6914;
              *(_BYTE *)(a1 + 15538) = v110;
              *(_DWORD *)(a1 + 1548) |= 0x8200u;
              *(_DWORD *)(a1 + 1520) |= 0x800000u;
              if ((v13 & 0x40) != 0)
                goto LABEL_193;
              goto LABEL_194;
            }
          }
          else if ((v13 & 0x10) == 0)
          {
            goto LABEL_191;
          }
          *(_BYTE *)(a1 + 15532) = v122;
          *(_DWORD *)(a1 + 1520) |= 0x2000000u;
          if ((v13 & 0x20) != 0)
            goto LABEL_197;
LABEL_192:
          if ((v13 & 0x40) != 0)
          {
LABEL_193:
            *(_BYTE *)(a1 + 15537) = v121;
            *(_BYTE *)(a1 + 15533) = v120;
            *(_DWORD *)(a1 + 1520) |= 0x800000u;
          }
LABEL_194:
          *(_DWORD *)(a1 + 1532) |= 0x400000u;
          *(_DWORD *)(v7 + 3904) = 0;
          *(_DWORD *)(a1 + 1548) |= 0x78070082u;
          result = gleUpdateInverseNeeds(a1);
          *(_BYTE *)(v6 + 3794) = 0;
          return result;
      }
  }
}

_BYTE *gleCreateAccumTexture(uint64_t a1, __int16 a2, __int16 a3)
{
  _BYTE *v5;
  _BYTE *v6;

  v5 = malloc_type_malloc(0x428uLL, 0x577B5147uLL);
  if (!v5)
    abort();
  v6 = v5;
  gfxInitializeGLTexture();
  v6[771] |= 1u;
  gfxCreatePluginTexture();
  gfxEvaluateTextureForGeometryChange();
  *((_DWORD *)v6 + 258) = 0;
  *((_WORD *)v6 + 522) = a2;
  *((_WORD *)v6 + 523) = a3;
  *((_DWORD *)v6 + 262) = 335943944;
  *((_WORD *)v6 + 518) = a2;
  *((_WORD *)v6 + 519) = a3;
  *((_DWORD *)v6 + 260) = 536870913;
  *((_QWORD *)v6 + 132) = 0;
  gfxUpdateTextureForGeometryChange();
  gfxUpdatePluginTextureLevelGeometry();
  *((_DWORD *)v6 + 230) = -2127593169;
  *((_WORD *)v6 + 462) = -32465;
  *((_DWORD *)v6 + 228) = 637543936;
  v6[557] = 1;
  return v6;
}

uint64_t gleResizeAccumTexture(uint64_t a1, uint64_t a2, __int16 a3, __int16 a4)
{
  gfxEvaluateTextureForGeometryChange();
  (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 29496) + 272))(*(_QWORD *)(a1 + 29464), 1, 0, *(_QWORD *)(a2 + 8 * *(unsigned __int8 *)(a1 + 32500)));
  *(_DWORD *)(a2 + 1032) = 0;
  *(_WORD *)(a2 + 1044) = a3;
  *(_WORD *)(a2 + 1046) = a4;
  *(_WORD *)(a2 + 1036) = a3;
  *(_WORD *)(a2 + 1038) = a4;
  *(_DWORD *)(a2 + 1040) = 536870913;
  *(_QWORD *)(a2 + 1056) = 0;
  gfxUpdateTextureForGeometryChange();
  return gfxUpdatePluginTextureLevelGeometry();
}

double gleInitBitmapObject(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 28784) = 0u;
  return result;
}

void gleReclaimBitmapResources(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v4;
  _QWORD *v5;

  v2 = *(_QWORD **)(a1 + 28784);
  if (v2)
  {
    gleDestroyStateProgram(a1, v2);
    *(_QWORD *)(a1 + 28784) = 0;
  }
  v3 = *(_QWORD **)(a1 + 28792);
  if (v3)
  {
    if (*(_BYTE *)(a1 + 32496))
    {
      v4 = 0;
      v5 = (_QWORD *)(a1 + 32512);
      do
      {
        (*(void (**)(_QWORD, _QWORD))(v5[206] + 1392))(*v5, v3[v4++]);
        v5 += 209;
      }
      while (v4 < *(unsigned __int8 *)(a1 + 32496));
    }
    gfxDestroyPluginTexture();
    gfxFreeTextureLevel();
    free(v3);
    *(_QWORD *)(a1 + 28792) = 0;
  }
}

__n128 gleCreateVBOClientState(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v5 = malloc_type_malloc(0x48uLL, 0x577B5147uLL);
  if (!v5)
    abort();
  *a2 = v5;
  v5[8] = a3;
  *(_QWORD *)(a3 + 8) = *a2;
  v6 = *a2;
  *(_BYTE *)(v6 + 56) = *(_BYTE *)(a3 + 292);
  *(_WORD *)(v6 + 57) = *(_WORD *)(v6 + 57) & 0xFFF7 | (8 * (*(_BYTE *)(a3 + 299) & 1));
  result = *(__n128 *)(a3 + 136);
  v8 = *(_OWORD *)(a3 + 152);
  v9 = *(_OWORD *)(a3 + 168);
  *(_QWORD *)(v6 + 48) = *(_QWORD *)(a3 + 184);
  *(_OWORD *)(v6 + 16) = v8;
  *(_OWORD *)(v6 + 32) = v9;
  *(__n128 *)v6 = result;
  return result;
}

uint64_t gleUpdateCtxDirtyStateForBufStampChange(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  BOOL v17;

  v1 = result;
  v2 = result + 28652;
  v3 = *(_QWORD *)(result + 24896);
  if (v3)
  {
    v4 = 0;
    while ((v3 & 1) == 0
         || *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24888) + v4) + 200) - *(_DWORD *)(result + 29820) <= 0)
    {
      v4 += 8;
      v5 = v3 >= 2;
      v3 >>= 1;
      if (!v5)
        goto LABEL_8;
    }
    *(_DWORD *)(result + 1532) |= 0x20000000u;
    *(_DWORD *)v2 = 0;
    *(_DWORD *)(result + 1548) |= 0x200u;
  }
LABEL_8:
  v6 = *(_QWORD *)(result + 26432);
  v7 = *(_DWORD *)(v6 + 168);
  if (v7)
  {
    v8 = v6 + 128;
    while ((v7 & 1) == 0 || *(_DWORD *)(*(_QWORD *)v8 + 200) - *(_DWORD *)(result + 29820) <= 0)
    {
      v8 += 8;
      v5 = v7 >= 2;
      v7 >>= 1;
      if (!v5)
        goto LABEL_15;
    }
    *(_DWORD *)v2 = 0;
    *(_DWORD *)(result + 1524) |= 0x40000000u;
  }
LABEL_15:
  v9 = *(_QWORD *)(result + 24768);
  if (v9)
  {
    v10 = *(unsigned int *)(v9 + 3748);
    if ((int)v10 >= 1)
    {
      v11 = *(_QWORD *)(v9 + 3704);
      while (!*(_QWORD *)v11 || *(_DWORD *)(*(_QWORD *)v11 + 200) - *(_DWORD *)(result + 29820) <= 0)
      {
        v11 += 8;
        if (!--v10)
          goto LABEL_23;
      }
      *(_DWORD *)(v9 + 3696) |= 0x10u;
      *(_DWORD *)(result + 1532) |= 0x30000000u;
      *(_DWORD *)v2 = 0;
      *(_DWORD *)(result + 1540) |= 0x10000000u;
    }
  }
LABEL_23:
  v12 = *(_QWORD *)(result + 23776);
  if (v12)
  {
    v13 = 0;
    do
    {
      if ((v12 & 1) != 0)
      {
        v14 = *(_QWORD *)(v1 + 20776 + 88 * v13 + 56);
        if (*(_DWORD *)(*(_QWORD *)(v14 + 568) + 200) - *(_DWORD *)(v2 + 1168) >= 1)
        {
          v15 = *(unsigned __int8 *)(v2 + 3844);
          if (*(_BYTE *)(v2 + 3844))
          {
            v16 = (_BYTE *)(v14 + 156);
            do
            {
              *v16 |= 8u;
              v16 += 24;
              --v15;
            }
            while (v15);
          }
          *(_DWORD *)v2 = 0;
          *(_DWORD *)(v1 + 1548) |= 0x22000u;
          result = gleDirtyTextureObjectCurrentBindPointsNoFBO(v1, v14 + 40);
        }
      }
      ++v13;
      v17 = v12 > 1;
      v12 >>= 1;
    }
    while (v17);
  }
  return result;
}

uint64_t gleUpdateVAODirtyStateForBufStampChange(uint64_t result, uint64_t a2)
{
  unint64_t i;
  unint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  for (i = *(_QWORD *)(a2 + 872); i; i ^= v4)
  {
    v3 = __clz(__rbit64(i));
    v4 = 1 << v3;
    v5 = v3 - 16;
    v6 = a2 + 8 * (v3 - 16);
    v7 = *(_QWORD *)(v6 + 1200);
    if (*(_DWORD *)(v7 + 200) - *(_DWORD *)(a2 + 1184) >= 1)
    {
      *(_QWORD *)(a2 + 904) |= v4 | 0x10;
      *(_QWORD *)(v6 + 920) = *(_QWORD *)(v7 + 136) + *(_QWORD *)(a2 + 96 + 24 * v5);
      *(_DWORD *)(result + 28652) = 0;
      *(_DWORD *)(result + 1532) |= 0x1000u;
    }
  }
  v8 = *(_QWORD *)(a2 + 1192);
  if (v8)
  {
    if (*(_DWORD *)(v8 + 200) - *(_DWORD *)(a2 + 1184) >= 1)
    {
      *(_QWORD *)(a2 + 904) |= 0x14uLL;
      *(_DWORD *)(result + 28652) = 0;
      *(_DWORD *)(result + 1532) |= 0x1000u;
    }
  }
  return result;
}

uint64_t gleDirtyBufferObjectCurrentBindPoints(uint64_t a1, uint64_t a2)
{
  _DWORD *v3;
  int *v4;
  int v5;
  uint64_t v6;
  uint64_t result;

  v3 = (_DWORD *)(a1 + 28652);
  v4 = *(int **)(a1 + 19296);
  v5 = *v4 + 1;
  *v4 = v5;
  *(_DWORD *)(a2 + 160) = v5;
  v6 = *(_QWORD *)(a1 + 26384);
  if (v6)
  {
    if (*(_DWORD *)(v6 + 1224) != *(_DWORD *)(a1 + 29820))
    {
      *v3 = 0;
      *(_DWORD *)(a1 + 1532) |= 0x1000u;
    }
    gleUpdateVAODirtyStateForBufStampChange(a1, v6 + 40);
    *(_DWORD *)(v6 + 1224) = **(_DWORD **)(a1 + 19296);
  }
  result = gleUpdateCtxDirtyStateForBufStampChange(a1);
  v3[292] = **(_DWORD **)(a1 + 19296);
  return result;
}

uint64_t gleUnbindBufferObject(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = (unsigned __int8 *)(result + 32496);
  if (*(_BYTE *)(result + 32496))
  {
    v3 = 0;
    v4 = a2 + 40;
    v5 = (_QWORD *)(result + 32512);
    do
    {
      result = (*(uint64_t (**)(_QWORD, _QWORD))(v5[206] + 1504))(*v5, *(_QWORD *)(v4 + 8 * v3++));
      v5 += 209;
    }
    while (v3 < *v2);
  }
  return result;
}

void gleUnbindAndFreeBufferObject(uint64_t a1, _QWORD *a2)
{
  unsigned __int8 *v4;
  unint64_t v5;
  _QWORD *v6;

  v4 = (unsigned __int8 *)(a1 + 32496);
  if (*(_BYTE *)(a1 + 32496))
  {
    v5 = 0;
    v6 = (_QWORD *)(a1 + 32512);
    do
    {
      (*(void (**)(_QWORD, _QWORD))(v6[206] + 1504))(*v6, a2[v5++ + 5]);
      v6 += 209;
    }
    while (v5 < *v4);
  }
  gleFreeBufferObject(*(_QWORD *)(a1 + 19296), a2);
}

void gleFreeBufferObject(uint64_t a1, _QWORD *a2)
{
  void *v3;
  void *v4;

  v3 = (void *)a2[4];
  if (v3)
  {
    free(v3);
    a2[4] = 0;
  }
  gfxDestroyPluginBuffer();
  if (a2[17])
    gfxFreeBufferObjectStorage();
  v4 = (void *)a2[1];
  if (v4)
    free(v4);
  free(a2);
}

void gleBindBufferObject(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t BufferObject;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;

  v5 = a1 + 28652;
  if (a3)
  {
    v7 = *(_QWORD *)(a1 + 19296) + 264;
    BufferObject = (uint64_t)gleLookupHashObject(v7, a3);
    if (!BufferObject)
    {
      BufferObject = gleCreateBufferObject(a1, a3);
      gfxCreatePluginBuffer();
      gleAddHashNameAndObject(a1, v7, BufferObject);
    }
    ++*(_DWORD *)(BufferObject + 20);
  }
  else
  {
    BufferObject = 0;
  }
  if (a2 > 35881)
  {
    if (a2 <= 36333)
    {
      if (a2 == 35882)
      {
        v9 = *(_QWORD *)(a1 + 19360);
        *(_QWORD *)(a1 + 19360) = BufferObject;
        v10 = 64;
        goto LABEL_40;
      }
      if (a2 == 35982)
      {
        v9 = *(_QWORD *)(a1 + 19352);
        *(_QWORD *)(a1 + 19352) = BufferObject;
        v10 = 16;
        goto LABEL_40;
      }
      goto LABEL_33;
    }
    if (a2 != 36334)
    {
      if (a2 == 36662)
      {
        v9 = *(_QWORD *)(a1 + 19368);
        *(_QWORD *)(a1 + 19368) = BufferObject;
        v10 = 128;
        goto LABEL_40;
      }
      if (a2 == 36663)
      {
        v9 = *(_QWORD *)(a1 + 19376);
        *(_QWORD *)(a1 + 19376) = BufferObject;
        v10 = 256;
        goto LABEL_40;
      }
      goto LABEL_33;
    }
LABEL_21:
    v9 = *(_QWORD *)(a1 + 19344);
    *(_QWORD *)(a1 + 19344) = BufferObject;
    v10 = 32;
    goto LABEL_40;
  }
  if (a2 > 35051)
  {
    if (a2 == 35052)
    {
      v9 = *(_QWORD *)(a1 + 19336);
      *(_QWORD *)(a1 + 19336) = BufferObject;
      v10 = 8;
      goto LABEL_40;
    }
    if (a2 != 35345)
      goto LABEL_33;
    goto LABEL_21;
  }
  if (a2 != 34963)
  {
    if (a2 == 35051)
    {
      v9 = *(_QWORD *)(a1 + 19328);
      *(_QWORD *)(a1 + 19328) = BufferObject;
      v10 = 4;
      goto LABEL_40;
    }
LABEL_33:
    v9 = *(_QWORD *)(a1 + 19312);
    *(_QWORD *)(a1 + 19312) = BufferObject;
    v10 = 1;
    goto LABEL_40;
  }
  v11 = *(_QWORD *)(a1 + 26384);
  v12 = v11 + 40;
  if (v11)
  {
    v9 = *(_QWORD *)(v11 + 1232);
    if (v9 == BufferObject)
    {
      v10 = 2;
      v9 = BufferObject;
      goto LABEL_40;
    }
    *(_QWORD *)(v11 + 1232) = BufferObject;
    v13 = *(unsigned __int8 *)(v5 + 3844);
    if (BufferObject)
    {
      if (*(_BYTE *)(v5 + 3844))
      {
        v14 = (uint64_t *)(BufferObject + 40);
        v15 = (_QWORD *)(v12 + 1712);
        do
        {
          v16 = *v14++;
          *v15 = v16;
          v15 += 35;
          --v13;
        }
        while (v13);
      }
    }
    else if (*(_BYTE *)(v5 + 3844))
    {
      v17 = (_QWORD *)(v12 + 1712);
      do
      {
        *v17 = 0;
        v17 += 35;
        --v13;
      }
      while (v13);
    }
    *(_QWORD *)(v12 + 904) |= 0x14uLL;
    *(_DWORD *)v5 = 0;
    *(_DWORD *)(a1 + 1532) |= 0x1000u;
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 19320);
    *(_QWORD *)(a1 + 19320) = BufferObject;
  }
  v10 = 2;
LABEL_40:
  if (!*(_QWORD *)(a1 + 27648))
    goto LABEL_74;
  if (BufferObject)
    v18 = *(_QWORD *)(BufferObject + 8);
  else
    v18 = 0;
  if (a2 <= 35881)
  {
    if (a2 > 35051)
    {
      if (a2 == 35052)
      {
        *(_QWORD *)(a1 + 26488) = v18;
        if (!BufferObject)
          goto LABEL_79;
        goto LABEL_75;
      }
      if (a2 == 35345)
        goto LABEL_62;
    }
    else
    {
      if (a2 == 34963)
      {
        v19 = *(_QWORD **)(a1 + 26448);
        if (v19)
        {
          *v19 = v18;
          if (!BufferObject)
            goto LABEL_79;
        }
        else
        {
          *(_QWORD *)(a1 + 26472) = v18;
          if (!BufferObject)
            goto LABEL_79;
        }
        goto LABEL_75;
      }
      if (a2 == 35051)
      {
        *(_QWORD *)(a1 + 26480) = v18;
        if (!BufferObject)
          goto LABEL_79;
        goto LABEL_75;
      }
    }
  }
  else
  {
    if (a2 > 36333)
    {
      if (a2 != 36334)
      {
        if (a2 == 36662)
        {
          *(_QWORD *)(a1 + 26520) = v18;
          if (!BufferObject)
            goto LABEL_79;
          goto LABEL_75;
        }
        if (a2 == 36663)
        {
          *(_QWORD *)(a1 + 26528) = v18;
          if (!BufferObject)
            goto LABEL_79;
          goto LABEL_75;
        }
        goto LABEL_73;
      }
LABEL_62:
      *(_QWORD *)(a1 + 26496) = v18;
      if (!BufferObject)
        goto LABEL_79;
      goto LABEL_75;
    }
    if (a2 == 35882)
    {
      *(_QWORD *)(a1 + 26512) = v18;
      if (!BufferObject)
        goto LABEL_79;
      goto LABEL_75;
    }
    if (a2 == 35982)
    {
      *(_QWORD *)(a1 + 26504) = v18;
      if (!BufferObject)
        goto LABEL_79;
      goto LABEL_75;
    }
  }
LABEL_73:
  *(_QWORD *)(a1 + 26464) = v18;
LABEL_74:
  if (!BufferObject)
    goto LABEL_79;
LABEL_75:
  if ((v10 & 0x30) != 0)
  {
    *(_BYTE *)(BufferObject + 299) = 1;
    v20 = *(_QWORD *)(BufferObject + 8);
    if (v20)
      *(_WORD *)(v20 + 57) |= 8u;
    goto LABEL_80;
  }
LABEL_79:
  if (!BufferObject)
    goto LABEL_90;
LABEL_80:
  if ((*(_DWORD *)(*(_QWORD *)(a1 + 29504) + 8) & v10) != 0)
    *(_BYTE *)(BufferObject + 8 * *(unsigned __int8 *)(v5 + 3848) + 308) = 2;
  v21 = *(_QWORD *)(BufferObject + 192);
  if (v21 && v21 != *(_QWORD *)(a1 + 29024))
  {
    gleSynchronizePluginBufferStorage(a1, BufferObject + 40);
    if (!v9)
      return;
    goto LABEL_91;
  }
  v22 = *(_DWORD *)(v5 + 1168);
  v23 = *(_QWORD *)(a1 + 26384);
  if (v22 == **(_DWORD **)(a1 + 19296))
  {
    if (v21 && v23)
      *(_BYTE *)(v23 + 1216) = 0;
LABEL_90:
    if (!v9)
      return;
    goto LABEL_91;
  }
  if (v23)
  {
    if (v21)
    {
      *(_BYTE *)(v23 + 1216) = 0;
      v22 = *(_DWORD *)(v5 + 1168);
    }
    if (*(_DWORD *)(v23 + 1224) != v22)
    {
      *(_DWORD *)v5 = 0;
      *(_DWORD *)(a1 + 1532) |= 0x1000u;
      v22 = *(_DWORD *)(v23 + 1224);
    }
    if (v22 != **(_DWORD **)(a1 + 19296))
    {
      gleUpdateVAODirtyStateForBufStampChange(a1, v23 + 40);
      *(_DWORD *)(v23 + 1224) = **(_DWORD **)(a1 + 19296);
    }
  }
  gleUpdateCtxDirtyStateForBufStampChange(a1);
  *(_DWORD *)(v5 + 1168) = **(_DWORD **)(a1 + 19296);
  if (v9)
  {
LABEL_91:
    v24 = *(_DWORD *)(v9 + 20) - 1;
    *(_DWORD *)(v9 + 20) = v24;
    if (!v24)
      gleUnbindAndFreeBufferObject(a1, (_QWORD *)v9);
  }
}

uint64_t gleCreateBufferObject(uint64_t a1, int a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v4 = (char *)malloc_type_malloc(8 * *(unsigned __int8 *)(a1 + 32496) + 304, 0x577B5147uLL);
  if (!v4)
    abort();
  v5 = (uint64_t)v4;
  *((_DWORD *)v4 + 4) = a2;
  *(_QWORD *)(v4 + 20) = 0xA00000001;
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 4) = 0;
  *((_DWORD *)v4 + 7) = 0;
  v6 = gfxInitializeBufferObject();
  *(_BYTE *)(v5 + 292) = 0;
  *(_WORD *)(v5 + 162) = -30535;
  if (*(_QWORD *)(a1 + 27648))
  {
    v8 = 0;
    gleCreateVBOClientState(v6, &v8, v5);
  }
  return v5;
}

uint64_t gleSynchronizePluginBufferStorage(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;

  if (!*(_BYTE *)(a2 + 124))
  {
    v3 = result;
    v4 = (_BYTE *)(result + 32496);
    v5 = *(_QWORD *)(a2 + 152);
    if (v5 && *v4)
    {
      v6 = 0;
      v7 = (_QWORD *)(result + 32512);
      while (v7[1] != v5)
      {
        ++v6;
        v7 += 209;
        if (*v4 == v6)
          goto LABEL_7;
      }
      if (*(unsigned __int8 *)(result + 32499) == (_DWORD)v6 || *(unsigned __int8 *)(result + 32500) == (_DWORD)v6)
        (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(v7[206] + 1328))(*v7, 3, 0, *(_QWORD *)(a2 + 8 * v6));
    }
    else
    {
LABEL_7:
      LODWORD(v6) = -1;
    }
    gfxUploadPluginBufferData();
    *(_QWORD *)(a2 + 152) = 0;
    v8 = *v4;
    if (*v4)
    {
      v9 = v6;
      v10 = (_DWORD *)(a2 + 264);
      do
      {
        if (v9)
          *v10 |= 4u;
        --v9;
        v10 += 2;
        --v8;
      }
      while (v8);
    }
    return gleDirtyBufferObjectCurrentBindPoints(v3, a2);
  }
  return result;
}

void gleOrphanBufferObject(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *v4;
  _QWORD *v5;
  unint64_t v6;
  char *v7;
  _QWORD *v8;
  unint64_t v9;
  int64x2_t *v10;
  uint64_t v11;
  _QWORD *v12;
  int64x2_t v13;

  v4 = (os_unfair_lock_s *)(a1 + 28840);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 28840));
  gleInitOrphanHash((_QWORD *)a1);
  if (*(_QWORD *)(a2 + 96))
  {
    v5 = *(_QWORD **)(a1 + 28880);
    if (v5)
    {
      *(_QWORD *)(a1 + 28880) = 0;
    }
    else
    {
      v5 = malloc_type_malloc(8 * *(unsigned __int8 *)(a1 + 32496) + 56, 0x577B5147uLL);
      if (!v5)
        abort();
    }
    if (*(_BYTE *)(a1 + 32496))
    {
      v6 = 0;
      v7 = (char *)(v5 + 7);
      v8 = (_QWORD *)(a1 + 32520);
      do
      {
        (*(void (**)(_QWORD, _QWORD, char *))(v8[205] + 1536))(*v8, *(_QWORD *)(a2 + 8 * v6++), v7);
        v7 += 8;
        v8 += 209;
      }
      while (v6 < *(unsigned __int8 *)(a1 + 32496));
    }
    v9 = *(_QWORD *)(a2 + 104);
    v5[4] = *(_QWORD *)(a2 + 96);
    v5[5] = v9;
    *((_WORD *)v5 + 24) = *(_WORD *)(a2 + 120);
    *((_BYTE *)v5 + 50) = *(_BYTE *)(a2 + 126);
    *(_BYTE *)(a2 + 126) = 0;
    *(_QWORD *)(a2 + 96) = 0;
    *(_QWORD *)(a2 + 104) = 0;
    v10 = (int64x2_t *)(*(_QWORD *)(a1 + 28944)
                      + 96
                      * (((v9 >> 12) & 0x3FF ^ (v9 >> 22))
                       - 113 * ((((v9 >> 12) & 0x3FF ^ (v9 >> 22)) * (unsigned __int128)0x243F6F0243F6F03uLL) >> 64)));
    v11 = *(_QWORD *)(a1 + 28912);
    *(_QWORD *)(v11 + 16) = v5;
    v5[2] = a1 + 28888;
    v5[3] = v11;
    *(_QWORD *)(a1 + 28912) = v5;
    v12 = (_QWORD *)v10[3].i64[0];
    *v12 = v5;
    *v5 = (char *)v10 + 40;
    v5[1] = v12;
    v10[3].i64[0] = (uint64_t)v5;
    v13 = vdupq_n_s64(1uLL);
    v13.i64[0] = v9;
    *(int64x2_t *)(a1 + 28848) = vaddq_s64(*(int64x2_t *)(a1 + 28848), v13);
    *v10 = vaddq_s64(*v10, v13);
    gleCleanupOrphans(a1);
  }
  os_unfair_lock_unlock(v4);
}

_QWORD *gleInitOrphanHash(_QWORD *result)
{
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64x2_t v6;

  if (!result[3618])
  {
    v1 = result;
    v2 = malloc_type_malloc(0x2A60uLL, 0x577B5147uLL);
    if (!v2)
      goto LABEL_8;
    v3 = 0;
    v1[3618] = v2;
    v4 = 113;
    do
    {
      v5 = v1[3618] + v3;
      v6 = vdupq_n_s64(v5 + 40);
      *(int64x2_t *)(v5 + 56) = v6;
      *(int64x2_t *)(v5 + 40) = v6;
      *(_QWORD *)(v5 + 80) = 0;
      *(_QWORD *)(v5 + 88) = 0;
      *(_QWORD *)(v5 + 72) = 0;
      *(_OWORD *)v5 = 0uLL;
      *(_OWORD *)(v5 + 16) = 0uLL;
      *(_QWORD *)(v5 + 32) = 0;
      v3 += 96;
      --v4;
    }
    while (v4);
    result = malloc_type_malloc(8 * *((unsigned __int8 *)v1 + 32496) + 56, 0x577B5147uLL);
    if (!result)
LABEL_8:
      abort();
    v1[3610] = result;
  }
  return result;
}

void gleCleanupOrphans(uint64_t a1)
{
  unsigned int *v1;

  v1 = (unsigned int *)(a1 + 28844);
  while (*(_QWORD *)(a1 + 28848) > (uint64_t)*v1)
    gleFreeOrphan((int64x2_t *)a1, *(_QWORD **)(a1 + 28904));
}

uint64_t *gleGetFreeOrphanNode(uint64_t a1, uint64_t a2, int a3, int a4)
{
  os_unfair_lock_s *v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *i;
  uint64_t *v17;
  unsigned int v18;
  unint64_t v19;
  _QWORD *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t *v23;
  int64x2_t v24;
  int64x2_t v25;
  int64x2_t v26;
  __int128 v27;
  int64x2_t *v28;
  int64x2_t *v29;

  v8 = (os_unfair_lock_s *)(a1 + 28840);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 28840));
  gleInitOrphanHash((_QWORD *)a1);
  v9 = (a2 + *(_QWORD *)(*(_QWORD *)(a1 + 29032) + 640) - 1) & -*(_QWORD *)(*(_QWORD *)(a1 + 29032) + 640);
  if ((uint64_t)v9 < 0x20000)
  {
    v10 = (v9 - 1) | ((v9 - 1) >> 1) | ((((_DWORD)v9 - 1) | ((v9 - 1) >> 1)) >> 2);
    v11 = v10 | (v10 >> 4) | ((v10 | (v10 >> 4)) >> 8);
    v9 = (v11 | HIWORD(v11)) + 1;
  }
  v12 = ((v9 >> 12) & 0x3FF ^ (v9 >> 22))
      - 113 * ((((v9 >> 12) & 0x3FF ^ (v9 >> 22)) * (unsigned __int128)0x243F6F0243F6F03uLL) >> 64);
  v13 = *(_QWORD *)(a1 + 28944);
  v14 = v13 + 96 * v12;
  v17 = *(uint64_t **)(v14 + 40);
  v15 = (uint64_t *)(v14 + 40);
  for (i = v17; i != v15; i = (uint64_t *)*i)
  {
    if (*((unsigned __int16 *)i + 24) == a3 && v9 == i[5] && *((unsigned __int8 *)i + 50) == a4)
    {
      v18 = *(unsigned __int8 *)(a1 + 32496);
      if (!*(_BYTE *)(a1 + 32496))
        goto LABEL_17;
      v19 = 0;
      v20 = (_QWORD *)(a1 + 32520);
      v21 = 1;
      do
      {
        if (i[v19 + 7])
        {
          if (v21)
          {
            v21 = (*(unsigned int (**)(_QWORD))(v20[205] + 1552))(*v20) != 0;
            v18 = *(unsigned __int8 *)(a1 + 32496);
          }
          else
          {
            v21 = 0;
          }
        }
        ++v19;
        v20 += 209;
      }
      while (v19 < v18);
      v13 = *(_QWORD *)(a1 + 28944);
      if (v21)
      {
LABEL_17:
        v22 = i[3];
        *(_QWORD *)(v22 + 16) = i[2];
        *(_QWORD *)(i[2] + 24) = v22;
        i[2] = (uint64_t)i;
        i[3] = (uint64_t)i;
        v23 = (uint64_t *)i[1];
        *v23 = *i;
        *(_QWORD *)(*i + 8) = v23;
        *i = (uint64_t)i;
        i[1] = (uint64_t)i;
        v24 = *(int64x2_t *)(a1 + 28848);
        v25.i64[1] = -1;
        v25.i64[0] = i[5];
        v26.i64[0] = -1;
        v26.i64[1] = -1;
        *(_QWORD *)&v27 = vsubq_s64(v24, v25).u64[0];
        *((_QWORD *)&v27 + 1) = vaddq_s64(v24, v26).i64[1];
        *(_OWORD *)(a1 + 28848) = v27;
        ++*(_QWORD *)(a1 + 28864);
        v28 = (int64x2_t *)(v13 + 96 * v12);
        v25.i64[0] = vsubq_s64(*v28, v25).u64[0];
        v25.i64[1] = vaddq_s64(*v28, v26).i64[1];
        *v28 = v25;
        v29 = v28 + 1;
        goto LABEL_19;
      }
      break;
    }
  }
  i = 0;
  ++*(_QWORD *)(a1 + 28872);
  v29 = (int64x2_t *)(v13 + 96 * v12 + 24);
LABEL_19:
  ++v29->i64[0];
  os_unfair_lock_unlock(v8);
  return i;
}

void gleBufferObjectAdoptOrphan(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;

  v5 = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 96) = *(_QWORD *)(a3 + 32);
  *(_QWORD *)(a2 + 104) = v5;
  *(_WORD *)(a2 + 120) = *(_WORD *)(a3 + 48);
  *(_BYTE *)(a2 + 126) = *(_BYTE *)(a3 + 50);
  v6 = (unsigned __int8 *)(a1 + 32496);
  v7 = *(unsigned __int8 *)(a1 + 32496);
  if (*(_BYTE *)(a1 + 32496))
  {
    v8 = a2;
    v9 = 0;
    v10 = (_QWORD *)(a1 + 32520);
    do
    {
      *(_DWORD *)(v8 + 264) |= 5u;
      if (*(_QWORD *)(a3 + 56 + 8 * v9))
      {
        (*(void (**)(_QWORD, _QWORD))(v10[205] + 1544))(*v10, *(_QWORD *)v8);
        v7 = *v6;
      }
      ++v9;
      v8 += 8;
      v10 += 209;
    }
    while (v9 < v7);
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 28840));
  if (*(_QWORD *)(a1 + 28880))
    free((void *)a3);
  else
    *(_QWORD *)(a1 + 28880) = a3;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 28840));
}

void gleFreeOrphan(int64x2_t *a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  int64x2_t *v6;
  unsigned int v7;
  unint64_t v8;
  _QWORD *v9;
  int64x2_t *v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  int64x2_t v14;
  uint64_t v15;
  uint64_t v16;
  int64x2_t v17;

  v4 = a2[3];
  *(_QWORD *)(v4 + 16) = a2[2];
  *(_QWORD *)(a2[2] + 24) = v4;
  a2[2] = a2;
  a2[3] = a2;
  v5 = (_QWORD *)a2[1];
  *v5 = *a2;
  *(_QWORD *)(*a2 + 8) = v5;
  *a2 = a2;
  a2[1] = a2;
  v6 = a1 + 2031;
  v7 = a1[2031].u8[0];
  if (a1[2031].i8[0])
  {
    v8 = 0;
    v9 = a2 + 7;
    v10 = a1 + 2032;
    do
    {
      if (v9[v8])
      {
        (*(void (**)(uint64_t))(v10[103].i64[0] + 1560))(v10->i64[0]);
        (*(void (**)(uint64_t, _QWORD))(v10[103].i64[0] + 1568))(v10->i64[1], v9[v8]);
        v7 = v6->u8[0];
      }
      ++v8;
      v10 = (int64x2_t *)((char *)v10 + 1672);
    }
    while (v8 < v7);
  }
  mach_vm_deallocate(*MEMORY[0x24BDAEC58], a2[4], a2[5]);
  v11 = a1[1803];
  v12.i64[1] = -1;
  v12.i64[0] = a2[5];
  v13.i64[0] = -1;
  v13.i64[1] = -1;
  v14.i64[0] = vsubq_s64(v11, v12).u64[0];
  v14.i64[1] = vaddq_s64(v11, v13).i64[1];
  a1[1803] = v14;
  v15 = a1[1809].i64[0];
  v16 = 96
      * ((((unint64_t)v12.i64[0] >> 12) & 0x3FF ^ ((unint64_t)v12.i64[0] >> 22))
       - 113
       * (((((unint64_t)v12.i64[0] >> 12) & 0x3FF ^ ((unint64_t)v12.i64[0] >> 22))
         * (unsigned __int128)0x243F6F0243F6F03uLL) >> 64));
  v17 = *(int64x2_t *)(v15 + v16);
  v12.i64[0] = vsubq_s64(v17, v12).u64[0];
  v12.i64[1] = vaddq_s64(v17, v13).i64[1];
  *(int64x2_t *)(v15 + v16) = v12;
  free(a2);
}

uint64_t gleSynchronizeBufferOnCurrentDevices(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 *v4;
  uint64_t v5;

  if (*(_BYTE *)(a2 + 124))
    return 0xFFFFFFFFLL;
  v4 = (unsigned __int8 *)(a1 + 32499);
  if (*(_QWORD *)(a1 + 29024) != *(_QWORD *)(a2 + 152))
    v4 = (unsigned __int8 *)(a1 + 32500);
  v2 = *v4;
  v5 = a2 + 8 * v2;
  (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 1672 * v2 + 34160) + 1328))(*(_QWORD *)(a1 + 1672 * v2 + 32512), 3, 0, *(_QWORD *)v5);
  gfxUploadPluginBufferData();
  *(_QWORD *)(a2 + 152) = 0;
  *(_BYTE *)(v5 + 268) = 2;
  return v2;
}

uint64_t gleSynchronizeBufferOnCurrentDevicesForRead(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;

  v4 = (_BYTE *)(a1 + 32496);
  if (*(_BYTE *)(a2 + 124))
  {
    v5 = 0xFFFFFFFFLL;
  }
  else
  {
    v6 = 3;
    if (*(_QWORD *)(a1 + 29024) != *(_QWORD *)(a2 + 152))
      v6 = 4;
    v5 = v4[v6];
    v7 = a2 + 8 * v5;
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(a1 + 1672 * v5 + 34160) + 1328))(*(_QWORD *)(a1 + 1672 * v5 + 32512), 3, 1, *(_QWORD *)v7);
    gfxUploadPluginBufferData();
    *(_QWORD *)(a2 + 152) = 0;
    *(_BYTE *)(v7 + 268) = 2;
  }
  v8 = *v4;
  if (*v4)
  {
    v9 = (_DWORD *)(a2 + 264);
    do
    {
      if (v5)
        *v9 |= 4u;
      --v5;
      v9 += 2;
      --v8;
    }
    while (v8);
  }
  return gleDirtyBufferObjectCurrentBindPoints(a1, a2);
}

uint64_t gleSynchronizeBuffersInArray(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  unint64_t v6;
  uint64_t v7;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 1192);
  if (v4 && *(_QWORD *)(v4 + 192))
    result = gleSynchronizeBufferOnCurrentDevicesForRead(result, v4 + 40);
  for (i = *(_QWORD *)(a2 + 864) & *(_QWORD *)(a2 + 872); i; i ^= 1 << v6)
  {
    v6 = __clz(__rbit64(i));
    v7 = *(_QWORD *)(a2 + 8 * v6 + 1072);
    if (*(_QWORD *)(v7 + 192))
      result = gleSynchronizeBufferOnCurrentDevicesForRead(v3, v7 + 40);
  }
  *(_BYTE *)(a2 + 1176) = 1;
  return result;
}

uint64_t gleSynchronizePluginBuffers(uint64_t result, int a2)
{
  _QWORD *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v2 = (_QWORD *)result;
  v3 = a2;
  v4 = *(_DWORD *)(*(_QWORD *)(result + 1672 * a2 + 34168) + 40);
  v5 = *(_QWORD *)(result + 19312);
  if (v5)
  {
    v6 = v5 + 40;
    if (*(_QWORD *)(v5 + 192))
      result = gleSynchronizePluginBufferStorage(result, v6);
    if ((v4 & 1) != 0)
      *(_BYTE *)(v6 + 8 * v3 + 268) = 2;
  }
  v7 = v2[2415];
  if (v7)
  {
    v8 = v7 + 40;
    if (*(_QWORD *)(v7 + 192))
      result = gleSynchronizePluginBufferStorage((uint64_t)v2, v8);
    if ((v4 & 2) != 0)
      *(_BYTE *)(v8 + 8 * v3 + 268) = 2;
  }
  v9 = v2[3298];
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 1232);
    if (v10)
    {
      v11 = v10 + 40;
      if (*(_QWORD *)(v10 + 192))
        result = gleSynchronizePluginBufferStorage((uint64_t)v2, v11);
      if ((v4 & 2) != 0)
        *(_BYTE *)(v11 + 8 * v3 + 268) = 2;
    }
    v12 = 0;
    v13 = v9 + 1240;
    do
    {
      v14 = *(_QWORD *)(v13 + v12);
      if (v14)
      {
        v15 = v14 + 40;
        if (*(_QWORD *)(v14 + 192))
          result = gleSynchronizePluginBufferStorage((uint64_t)v2, v15);
        if ((v4 & 1) != 0)
          *(_BYTE *)(v15 + 8 * v3 + 268) = 2;
      }
      v12 += 8;
    }
    while (v12 != 256);
  }
  v16 = v2[2416];
  if (v16)
  {
    v17 = v16 + 40;
    if (*(_QWORD *)(v16 + 192))
      result = gleSynchronizePluginBufferStorage((uint64_t)v2, v17);
    if ((v4 & 4) != 0)
      *(_BYTE *)(v17 + 8 * v3 + 268) = 2;
  }
  v18 = v2[2417];
  if (v18)
  {
    v19 = v18 + 40;
    if (*(_QWORD *)(v18 + 192))
      result = gleSynchronizePluginBufferStorage((uint64_t)v2, v19);
    if ((v4 & 8) != 0)
      *(_BYTE *)(v19 + 8 * v3 + 268) = 2;
  }
  v20 = v2[2419];
  if (v20)
  {
    v21 = v20 + 40;
    if (*(_QWORD *)(v20 + 192))
      result = gleSynchronizePluginBufferStorage((uint64_t)v2, v21);
    if ((v4 & 0x10) != 0)
      *(_BYTE *)(v21 + 8 * v3 + 268) = 2;
  }
  v22 = *(unsigned int *)(v2[3304] + 168);
  if ((_DWORD)v22)
  {
    v23 = 0;
    do
    {
      v24 = *(_QWORD *)(v2[3304] + 8 * v23 + 128);
      if (v24)
      {
        v25 = v24 + 40;
        if (*(_QWORD *)(v24 + 192))
          result = gleSynchronizePluginBufferStorage((uint64_t)v2, v25);
        if ((v4 & 0x10) != 0)
          *(_BYTE *)(v25 + 8 * v3 + 268) = 2;
      }
      v22 &= ~(1 << v23);
      if (!v22)
        break;
    }
    while (v23++ < 4);
  }
  v27 = v2[2418];
  if (v27)
  {
    v28 = v27 + 40;
    if (*(_QWORD *)(v27 + 192))
      result = gleSynchronizePluginBufferStorage((uint64_t)v2, v28);
    if ((v4 & 0x20) != 0)
      *(_BYTE *)(v28 + 8 * v3 + 268) = 2;
  }
  v29 = v2[3096];
  if (v29 && *(_DWORD *)(v29 + 3748))
  {
    v30 = 0;
    do
    {
      v31 = *(_QWORD *)(*(_QWORD *)(v29 + 3704) + 8 * v30);
      if (v31)
      {
        v32 = v31 + 40;
        if (*(_QWORD *)(v31 + 192))
          result = gleSynchronizePluginBufferStorage((uint64_t)v2, v32);
        if ((v4 & 0x20) != 0)
          *(_BYTE *)(v32 + 8 * v3 + 268) = 2;
      }
      ++v30;
    }
    while (v30 < *(unsigned int *)(v29 + 3748));
  }
  v33 = v2[3112];
  if (v33)
  {
    v34 = 0;
    do
    {
      v35 = *(_QWORD *)(v2[3111] + v34);
      if (v35)
      {
        v36 = v35 + 40;
        if (*(_QWORD *)(v35 + 192))
          result = gleSynchronizePluginBufferStorage((uint64_t)v2, v36);
        if ((v4 & 0x20) != 0)
          *(_BYTE *)(v36 + 8 * v3 + 268) = 2;
      }
      v34 += 8;
      v37 = v33 > 1;
      v33 >>= 1;
    }
    while (v37);
  }
  v38 = v2[2420];
  if (v38)
  {
    v39 = v38 + 40;
    if (*(_QWORD *)(v38 + 192))
      result = gleSynchronizePluginBufferStorage((uint64_t)v2, v39);
    if ((v4 & 0x40) != 0)
      *(_BYTE *)(v39 + 8 * v3 + 268) = 2;
  }
  if (v2[2972])
  {
    v40 = 0;
    v41 = v2 + 4062;
    do
    {
      v42 = v2[11 * v40 + 2604];
      if (v42)
      {
        v43 = *(_QWORD *)(v42 + 568);
        if (v43)
        {
          v44 = v43 + 40;
          if (*(_QWORD *)(v43 + 192))
          {
            result = gleSynchronizePluginBufferStorage((uint64_t)v2, v44);
            if (*v41)
            {
              v45 = 0;
              v46 = (_BYTE *)(v42 + 156);
              do
              {
                *v46 |= 8u;
                v46 += 24;
                ++v45;
              }
              while (v45 < *v41);
            }
          }
          if ((v4 & 0x40) != 0)
            *(_BYTE *)(v44 + 8 * v3 + 268) = 2;
        }
      }
      ++v40;
    }
    while (v40 != 32);
  }
  v47 = v2[2421];
  if (v47)
  {
    v48 = v47 + 40;
    if (*(_QWORD *)(v47 + 192))
      result = gleSynchronizePluginBufferStorage((uint64_t)v2, v48);
    if ((v4 & 0x80) != 0)
      *(_BYTE *)(v48 + 8 * v3 + 268) = 2;
  }
  v49 = v2[2422];
  if (v49)
  {
    v50 = v49 + 40;
    if (*(_QWORD *)(v49 + 192))
      result = gleSynchronizePluginBufferStorage((uint64_t)v2, v50);
    if ((v4 & 0x100) != 0)
      *(_BYTE *)(v50 + 8 * v3 + 268) = 2;
  }
  return result;
}

uint64_t gleReclaimBufferObjectResources(uint64_t result)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  unsigned int v4;
  _BYTE *v5;
  _QWORD *v6;
  uint64_t *i;
  unint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;

  v1 = result;
  v2 = 0;
  v3 = *(_QWORD *)(result + 19296);
  v11 = *(_QWORD *)(v3 + 272);
  v4 = *(_DWORD *)(v3 + 288);
  v5 = (_BYTE *)(result + 32496);
  v6 = (_QWORD *)(result + 32512);
  do
  {
    for (i = *(uint64_t **)(v11 + 8 * v2); i; i = (uint64_t *)*i)
    {
      if (*((_DWORD *)i + 5) == 1)
      {
        if (i[24])
          result = gleSynchronizePluginBufferStorage(v1, (uint64_t)(i + 5));
        if (*v5)
        {
          v8 = 0;
          v9 = v6;
          v10 = i;
          do
          {
            (*(void (**)(_QWORD, uint64_t))(v9[206] + 1504))(*v9, v10[5]);
            result = (*(uint64_t (**)(_QWORD, uint64_t))(v9[206] + 1512))(v9[1], v10[5]);
            *((_DWORD *)v10 + 76) |= 5u;
            ++v8;
            ++v10;
            v9 += 209;
          }
          while (v8 < *v5);
        }
      }
    }
    ++v2;
  }
  while (v2 <= v4);
  *(_QWORD *)(*(_QWORD *)(v1 + 26384) + 944) |= 0x10uLL;
  return result;
}

uint64_t gleOffsetLimitStorage3D(int *a1, int a2, int a3, int a4, unint64_t a5, uint64_t a6)
{
  return OffsetLimitStorage3D(a1, a2, a3, a4, a5, a6, a1[6]);
}

uint64_t OffsetLimitStorage3D(int *a1, int a2, int a3, int a4, unint64_t a5, uint64_t a6, int a7)
{
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;

  v7 = a1[7];
  v9 = a1[4];
  v8 = a1[5];
  v10 = a1[1];
  v12 = a1[2];
  v11 = a1[3];
  if (v12 | *a1 | v8 | v9 | v10 | v11)
  {
    v13 = ((a5 >> 37) & 3) + 1 + (((a5 >> 37) & 3) + 1) * (BYTE4(a5) & 0x1F);
    if (v10)
    {
      v14 = (a5 >> 39) & 0xF;
      v15 = v14 + 1;
    }
    else
    {
      if (*a1 <= 0)
        v19 = a2;
      else
        v19 = *a1;
      v20 = (a5 >> 39) & 0xF;
      v15 = v20 + 1;
      v21 = (v19 + (int)v20) / ((int)v20 + 1) * v13;
      v22 = v7 - 1;
      v23 = v7 - (v21 & (v7 - 1));
      if ((v21 & v22) == 0)
        v23 = 0;
      v10 = v23 + v21;
      v14 = (a5 >> 39) & 0xF;
    }
    if (v12 <= 0)
      v12 = a3;
    v24 = v10 * v12;
    if (!v11)
      v11 = v24;
    return a6 + v10 * (a3 + v9 - 1) + ((int)v14 + a2 + v8) / v15 * v13 + v11 * (a4 + a7 - 1);
  }
  else
  {
    v16 = (((a5 >> 37) & 3) + 1 + (((a5 >> 37) & 3) + 1) * (BYTE4(a5) & 0x1F))
        * ((int)(((a5 >> 39) & 0xF) + a2)
         / (int)(((a5 >> 39) & 0xF) + 1));
    if ((v16 & (v7 - 1)) != 0)
      v17 = v7 - (v16 & (v7 - 1));
    else
      v17 = 0;
    return a6 + a4 * a3 * (v17 + v16);
  }
}

uint64_t gleOffsetLimitStorage(int *a1, int a2, int a3, unint64_t a4, uint64_t a5)
{
  return OffsetLimitStorage3D(a1, a2, a3, 1, a4, a5, 0);
}

uint64_t gleHandleUnpackBufferInEngineNoSync(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  _WORD *v6;

  if (*(_QWORD *)(a2 + 152) < a3 || a5 % a4 || *(_BYTE *)(a2 + 292))
  {
    v6 = (_WORD *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832))
      return 0;
    result = 0;
    *v6 = 1282;
  }
  else
  {
    if (*(_BYTE *)(a2 + 164))
      return 0;
    return *(_QWORD *)(a2 + 136) + a5;
  }
  return result;
}

uint64_t gleHandlePackBufferInEngine(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;

  v5 = a1 + 29832;
  if (*(_QWORD *)(a2 + 152) < a3 || a5 % a4 || *(_BYTE *)(a2 + 292))
  {
    if (!*(_WORD *)v5)
    {
      v8 = 0;
      *(_WORD *)v5 = 1282;
      return v8;
    }
    return 0;
  }
  if (*(_BYTE *)(a2 + 164))
    return 0;
  v10 = *(_QWORD *)(a2 + 136);
  if (*(_QWORD *)(a2 + 192))
  {
    gleSynchronizeBufferOnCurrentDevices(a1, a2 + 40);
  }
  else if (*(_BYTE *)(a2 + 165))
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 29448) + 272))(*(_QWORD *)(a1 + 29016), 3, 0, *(_QWORD *)(a2 + 40 + 8 * *(unsigned __int8 *)(a1 + 32499)));
    gfxWaitBufferOnDevices();
  }
  v8 = v10 + a5;
  *(_BYTE *)(a2 + 167) = 1;
  v11 = *(unsigned __int8 *)(v5 + 2664);
  if (*(_BYTE *)(v5 + 2664))
  {
    v12 = (_DWORD *)(a2 + 304);
    do
    {
      *v12 |= 4u;
      v12 += 2;
      --v11;
    }
    while (v11);
  }
  gleDirtyBufferObjectCurrentBindPoints(a1, a2 + 40);
  return v8;
}

uint64_t gleHandlePackBufferInEngineNoClientState(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;

  v5 = a1 + 29832;
  if (*(_QWORD *)(a2 + 152) < a3 || a5 % a4 || *(_BYTE *)(a2 + 292))
  {
    if (!*(_WORD *)v5)
    {
      v8 = 0;
      *(_WORD *)v5 = 1282;
      return v8;
    }
    return 0;
  }
  if (*(_BYTE *)(a2 + 164))
    return 0;
  v10 = *(_QWORD *)(a2 + 136);
  if (*(_QWORD *)(a2 + 192))
  {
    gleSynchronizeBufferOnCurrentDevices(a1, a2 + 40);
  }
  else if (*(_BYTE *)(a2 + 165))
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 29448) + 272))(*(_QWORD *)(a1 + 29016), 3, 0, *(_QWORD *)(a2 + 40 + 8 * *(unsigned __int8 *)(a1 + 32499)));
    gfxWaitBufferOnDevices();
  }
  v8 = v10 + a5;
  *(_BYTE *)(a2 + 167) = 1;
  v11 = *(unsigned __int8 *)(v5 + 2664);
  if (*(_BYTE *)(v5 + 2664))
  {
    v12 = (_DWORD *)(a2 + 304);
    do
    {
      *v12 |= 4u;
      v12 += 2;
      --v11;
    }
    while (v11);
  }
  gleDirtyBufferObjectCurrentBindPoints(a1, a2 + 40);
  return v8;
}

_QWORD *gleBindBufferObject_Thread(_QWORD *a1, int a2, unsigned int a3)
{
  os_unfair_lock_s *v6;
  uint64_t v7;
  os_unfair_lock_s *v8;
  uint64_t *v9;
  uint64_t BufferObject;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *result;

  if (a3)
  {
    v6 = (os_unfair_lock_s *)a1[2412];
    v7 = (uint64_t)&v6[66];
    v8 = v6 + 81;
    os_unfair_lock_lock(v6 + 81);
    v9 = gleLookupHashObject(v7, a3);
    if (v9)
    {
      BufferObject = (uint64_t)v9;
      os_unfair_lock_unlock(v8);
    }
    else
    {
      BufferObject = gleCreateBufferObject((uint64_t)a1, a3);
      gleAddHashNameAndObject((uint64_t)a1, v7, BufferObject);
      os_unfair_lock_unlock(v8);
      *gleAddCommand((uint64_t)a1, (uint64_t)gleCreatePluginBuffer_UnpackThread, 8) = BufferObject + 40;
    }
    v11 = *(_QWORD *)(BufferObject + 8);
  }
  else
  {
    v11 = 0;
    BufferObject = 0;
  }
  if (a2 > 35881)
  {
    if (a2 <= 36333)
    {
      if (a2 == 35882)
      {
        a1[3314] = v11;
        if (!v11)
          goto LABEL_43;
        goto LABEL_39;
      }
      if (a2 == 35982)
      {
        a1[3313] = v11;
        if (!v11)
          goto LABEL_43;
        goto LABEL_39;
      }
      goto LABEL_36;
    }
    if (a2 != 36334)
    {
      if (a2 == 36662)
      {
        a1[3315] = v11;
        if (!v11)
          goto LABEL_43;
        goto LABEL_39;
      }
      if (a2 == 36663)
      {
        a1[3316] = v11;
        if (!v11)
          goto LABEL_43;
        goto LABEL_39;
      }
      goto LABEL_36;
    }
LABEL_25:
    a1[3312] = v11;
    if (!v11)
      goto LABEL_43;
    goto LABEL_39;
  }
  if (a2 > 35051)
  {
    if (a2 == 35052)
    {
      a1[3311] = v11;
      if (!v11)
        goto LABEL_43;
      goto LABEL_39;
    }
    if (a2 != 35345)
      goto LABEL_36;
    goto LABEL_25;
  }
  if (a2 != 34963)
  {
    if (a2 == 35051)
    {
      a1[3310] = v11;
      if (!v11)
        goto LABEL_43;
      goto LABEL_39;
    }
LABEL_36:
    a1[3308] = v11;
    if (!v11)
      goto LABEL_43;
    goto LABEL_39;
  }
  v12 = (_QWORD *)a1[3306];
  if (v12)
  {
    *v12 = v11;
    if (!v11)
      goto LABEL_43;
  }
  else
  {
    a1[3309] = v11;
    if (!v11)
      goto LABEL_43;
  }
LABEL_39:
  if (a2 == 35345 || a2 == 36334 || a2 == 35982)
    *(_WORD *)(v11 + 57) |= 8u;
LABEL_43:
  result = gleAddCommand((uint64_t)a1, (uint64_t)gleBindBufferObject_UnpackThread, 16);
  *(_DWORD *)result = a2;
  result[1] = BufferObject;
  return result;
}

uint64_t gleCreatePluginBuffer_UnpackThread()
{
  gfxCreatePluginBuffer();
  return 8;
}

uint64_t gleBindBufferObject_UnpackThread(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  os_unfair_lock_s **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;

  v3 = a1 + 28652;
  v4 = *(_DWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  if (*(int *)a2 <= 35881)
  {
    if (v4 > 35051)
    {
      if (v4 == 35052)
      {
        v6 = *(_QWORD *)(a1 + 19336);
        *(_QWORD *)(a1 + 19336) = v5;
        v7 = 8;
        goto LABEL_37;
      }
      if (v4 != 35345)
        goto LABEL_30;
      goto LABEL_17;
    }
    if (v4 != 34963)
    {
      if (v4 == 35051)
      {
        v6 = *(_QWORD *)(a1 + 19328);
        *(_QWORD *)(a1 + 19328) = v5;
        v7 = 4;
        goto LABEL_37;
      }
LABEL_30:
      v6 = *(_QWORD *)(a1 + 19312);
      *(_QWORD *)(a1 + 19312) = v5;
      v7 = 1;
      goto LABEL_37;
    }
    v9 = *(_QWORD *)(a1 + 26384);
    v10 = v9 + 40;
    if (v9)
    {
      v6 = *(_QWORD *)(v9 + 1232);
      if (v6 == v5)
      {
        v7 = 2;
        v6 = *(_QWORD *)(a2 + 8);
        goto LABEL_37;
      }
      *(_QWORD *)(v9 + 1232) = v5;
      v11 = *(unsigned __int8 *)(a1 + 32496);
      if (v5)
      {
        if (*(_BYTE *)(a1 + 32496))
        {
          v12 = (uint64_t *)(v5 + 40);
          v13 = (_QWORD *)(v10 + 1712);
          do
          {
            v14 = *v12++;
            *v13 = v14;
            v13 += 35;
            --v11;
          }
          while (v11);
        }
      }
      else if (*(_BYTE *)(a1 + 32496))
      {
        v15 = (_QWORD *)(v10 + 1712);
        do
        {
          *v15 = 0;
          v15 += 35;
          --v11;
        }
        while (v11);
      }
      *(_QWORD *)(v10 + 904) |= 0x14uLL;
      *(_DWORD *)v3 = 0;
      *(_DWORD *)(a1 + 1532) |= 0x1000u;
    }
    else
    {
      v6 = *(_QWORD *)(a1 + 19320);
      *(_QWORD *)(a1 + 19320) = v5;
    }
    v7 = 2;
LABEL_37:
    v8 = (os_unfair_lock_s **)(a1 + 19296);
    os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (!v5)
      goto LABEL_52;
    goto LABEL_38;
  }
  if (v4 > 36333)
  {
    if (v4 != 36334)
    {
      if (v4 == 36662)
      {
        v6 = *(_QWORD *)(a1 + 19368);
        *(_QWORD *)(a1 + 19368) = v5;
        v7 = 128;
        goto LABEL_37;
      }
      if (v4 == 36663)
      {
        v6 = *(_QWORD *)(a1 + 19376);
        *(_QWORD *)(a1 + 19376) = v5;
        v7 = 256;
        goto LABEL_37;
      }
      goto LABEL_30;
    }
LABEL_17:
    v6 = *(_QWORD *)(a1 + 19344);
    *(_QWORD *)(a1 + 19344) = v5;
    v7 = 32;
    if (v5)
      goto LABEL_18;
LABEL_14:
    v8 = (os_unfair_lock_s **)(a1 + 19296);
    os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    goto LABEL_52;
  }
  if (v4 == 35882)
  {
    v6 = *(_QWORD *)(a1 + 19360);
    *(_QWORD *)(a1 + 19360) = v5;
    v7 = 64;
    goto LABEL_37;
  }
  if (v4 != 35982)
    goto LABEL_30;
  v6 = *(_QWORD *)(a1 + 19352);
  *(_QWORD *)(a1 + 19352) = v5;
  v7 = 16;
  if (!v5)
    goto LABEL_14;
LABEL_18:
  *(_BYTE *)(v5 + 299) = 1;
  v8 = (os_unfair_lock_s **)(a1 + 19296);
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
LABEL_38:
  if ((*(_DWORD *)(*(_QWORD *)(a1 + 29504) + 8) & v7) != 0)
    *(_BYTE *)(v5 + 8 * *(unsigned __int8 *)(v3 + 3848) + 308) = 2;
  ++*(_DWORD *)(v5 + 20);
  v16 = *(_QWORD *)(v5 + 192);
  if (!v16 || v16 == *(_QWORD *)(a1 + 29024))
  {
    v17 = *(_DWORD *)(v3 + 1168);
    if (v17 != **(_DWORD **)(a1 + 19296))
    {
      v18 = *(_QWORD *)(a1 + 26384);
      if (v18)
      {
        if (v16)
        {
          *(_BYTE *)(v18 + 1216) = 0;
          v17 = *(_DWORD *)(v3 + 1168);
        }
        if (*(_DWORD *)(v18 + 1224) != v17)
        {
          *(_DWORD *)v3 = 0;
          *(_DWORD *)(a1 + 1532) |= 0x1000u;
          v17 = *(_DWORD *)(v18 + 1224);
        }
        if (v17 != (*v8)->_os_unfair_lock_opaque)
        {
          gleUpdateVAODirtyStateForBufStampChange(a1, v18 + 40);
          *(_DWORD *)(v18 + 1224) = **(_DWORD **)(a1 + 19296);
        }
      }
      gleUpdateCtxDirtyStateForBufStampChange(a1);
      *(_DWORD *)(v3 + 1168) = **(_DWORD **)(a1 + 19296);
    }
  }
  else
  {
    gleSynchronizePluginBufferStorage(a1, v5 + 40);
  }
LABEL_52:
  if (v6)
  {
    v19 = *(_DWORD *)(v6 + 20) - 1;
    *(_DWORD *)(v6 + 20) = v19;
    if (!v19)
      gleUnbindAndFreeBufferObject(a1, (_QWORD *)v6);
  }
  os_unfair_lock_unlock(*v8 + 81);
  return 16;
}

uint64_t gleTransferBufferBindingToGLD(uint64_t result, unint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (result)
  {
    v7 = *(_QWORD *)(result + 152);
    if (v7 >= a2)
      v8 = a2;
    else
      v8 = *(_QWORD *)(result + 152);
    v9 = v8 & -a6;
    if (a3)
      v10 = a3;
    else
      v10 = *(_QWORD *)(result + 152);
    v11 = v9 + v10;
    if (v11 < v7)
      v7 = v11;
    v12 = (v7 - v9) & -a7;
  }
  else
  {
    v9 = 0;
    v12 = 0;
  }
  *a4 = v9;
  *a5 = v12;
  return result;
}

_DWORD *gleInitCommandBuffer(uint64_t a1)
{
  _DWORD *result;

  result = malloc_type_malloc(a1 + 24, 0x577B5147uLL);
  if (!result)
    abort();
  result[4] = 0;
  *(_QWORD *)result = result + 6;
  *((_QWORD *)result + 1) = (char *)result + a1 + 24;
  return result;
}

_QWORD *gleAddCommand(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;

  v6 = *(_QWORD *)(a1 + 27336);
  v7 = *(_QWORD **)v6;
  if (*(_QWORD *)(v6 + 8) - *(_QWORD *)v6 < (unint64_t)(a3 + 16))
  {
    v6 = (*(uint64_t (**)(uint64_t))(a1 + 27344))(a1);
    v7 = *(_QWORD **)v6;
  }
  *v7 = a2;
  v7[1] = a3;
  *(_QWORD *)v6 = (char *)v7 + a3 + 16;
  ++*(_DWORD *)(v6 + 16);
  return v7 + 2;
}

uint64_t (*gleGet_gleFlushCommandBuffer())()
{
  return gleFlushCommandBuffer;
}

uint64_t (*gleGet_gleFinishCommandBuffer())()
{
  return gleFinishCommandBuffer;
}

void gleCreateClientThreadState(uint64_t a1)
{
  os_unfair_lock_s *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = *(os_unfair_lock_s **)(a1 + 19296);
  os_unfair_lock_lock(v2 + 81);
  ++v2[76]._os_unfair_lock_opaque;
  gleIterateHashMachineObjects((uint64_t)&v2[66], a1, (uint64_t (*)(uint64_t, _QWORD *))gleCreateVBOClientStateForHash);
  v3 = *(_QWORD *)(a1 + 19312);
  if (v3)
    v3 = *(_QWORD *)(v3 + 8);
  *(_QWORD *)(a1 + 26464) = v3;
  v4 = *(_QWORD *)(a1 + 19320);
  if (v4)
    v4 = *(_QWORD *)(v4 + 8);
  *(_QWORD *)(a1 + 26472) = v4;
  v5 = *(_QWORD *)(a1 + 19328);
  if (v5)
    v5 = *(_QWORD *)(v5 + 8);
  *(_QWORD *)(a1 + 26480) = v5;
  v6 = *(_QWORD *)(a1 + 19336);
  if (v6)
    v6 = *(_QWORD *)(v6 + 8);
  *(_QWORD *)(a1 + 26488) = v6;
  v7 = *(_QWORD *)(a1 + 19352);
  if (v7)
    v7 = *(_QWORD *)(v7 + 8);
  *(_QWORD *)(a1 + 26504) = v7;
  v8 = *(_QWORD *)(a1 + 19344);
  if (v8)
    v8 = *(_QWORD *)(v8 + 8);
  *(_QWORD *)(a1 + 26496) = v8;
  v9 = *(_QWORD *)(a1 + 19360);
  if (v9)
    v9 = *(_QWORD *)(v9 + 8);
  *(_QWORD *)(a1 + 26512) = v9;
  v10 = *(_QWORD *)(a1 + 19368);
  if (v10)
    v10 = *(_QWORD *)(v10 + 8);
  *(_QWORD *)(a1 + 26520) = v10;
  v11 = *(_QWORD *)(a1 + 19376);
  if (v11)
    v11 = *(_QWORD *)(v11 + 8);
  *(_QWORD *)(a1 + 26528) = v11;
  gleIterateHashMachineObjects(a1 + 26352, a1, (uint64_t (*)(uint64_t, _QWORD *))gleCreateVAOClientStateForHash);
  v12 = *(_QWORD **)(a1 + 26392);
  if (v12 && !v12[1])
    gleCreateVAOClientState(a1, (_QWORD **)(a1 + 26456), v12);
  v13 = *(_QWORD *)(a1 + 26384);
  if (v13)
    v13 = *(_QWORD *)(v13 + 8);
  *(_QWORD *)(a1 + 26448) = v13;
  v14 = *(_QWORD *)(a1 + 26392);
  if (v14)
    v14 = *(_QWORD *)(v14 + 8);
  *(_QWORD *)(a1 + 26456) = v14;
  *(_WORD *)(a1 + 26576) = *(_WORD *)(a1 + 28660);
  *(_DWORD *)(a1 + 26580) = *(unsigned __int16 *)(a1 + 23770);
  memcpy((void *)(a1 + 26584), (const void *)(a1 + 18440), 0x2D8uLL);
  gleIterateHashMachineObjects(a1 + 25904, a1, (uint64_t (*)(uint64_t, _QWORD *))gleCreateQueryClientStateForHash);
  v15 = *(_QWORD *)(a1 + 25936);
  if (v15)
    v15 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(a1 + 26536) = v15;
  v16 = *(_QWORD *)(a1 + 25944);
  if (v16)
    v16 = *(_QWORD *)(v16 + 8);
  *(_QWORD *)(a1 + 26544) = v16;
  v17 = *(_QWORD *)(a1 + 25952);
  if (v17)
    v17 = *(_QWORD *)(v17 + 8);
  *(_QWORD *)(a1 + 26552) = v17;
  v18 = *(_QWORD *)(a1 + 25960);
  if (v18)
    v18 = *(_QWORD *)(v18 + 8);
  *(_QWORD *)(a1 + 26560) = v18;
  v19 = *(_QWORD *)(a1 + 25968);
  if (v19)
    v19 = *(_QWORD *)(v19 + 8);
  *(_QWORD *)(a1 + 26568) = v19;
  os_unfair_lock_unlock(v2 + 81);
}

double gleCreateVBOClientStateForHash(uint64_t a1, uint64_t a2)
{
  double result;
  uint64_t v3;

  if (!*(_QWORD *)(a2 + 8))
  {
    v3 = 0;
    *(_QWORD *)&result = gleCreateVBOClientState(a1, &v3, a2).n128_u64[0];
  }
  return result;
}

void gleCreateVAOClientStateForHash(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;

  if (!a2[1])
  {
    v2 = 0;
    gleCreateVAOClientState(a1, &v2, a2);
  }
}

_QWORD *gleCreateQueryClientStateForHash(_QWORD *result, uint64_t a2)
{
  uint64_t v2;

  if (!*(_QWORD *)(a2 + 8))
  {
    v2 = 0;
    return gleCreateQueryObjectClientState((uint64_t)result, &v2, a2);
  }
  return result;
}

void gleDestroyClientThreadState(_QWORD *a1)
{
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  int v4;
  uint64_t v5;
  void *v6;

  v2 = (os_unfair_lock_s *)a1[2412];
  v3 = v2 + 81;
  os_unfair_lock_lock(v2 + 81);
  v4 = v2[76]._os_unfair_lock_opaque - 1;
  v2[76]._os_unfair_lock_opaque = v4;
  if (!v4)
    gleIterateHashMachineObjects((uint64_t)&v2[66], 0, (uint64_t (*)(uint64_t, _QWORD *))gleDestroyVBOClientStateForHash);
  gleIterateHashMachineObjects((uint64_t)(a1 + 3238), 0, (uint64_t (*)(uint64_t, _QWORD *))gleDestroyQueryClientStateForHash);
  gleIterateHashMachineObjects((uint64_t)(a1 + 3294), 0, (uint64_t (*)(uint64_t, _QWORD *))gleDestroyVAOClientStateForHash);
  v5 = a1[3299];
  if (v5)
  {
    v6 = *(void **)(v5 + 8);
    if (v6)
    {
      free(v6);
      *(_QWORD *)(v5 + 8) = 0;
    }
  }
  bzero(a1 + 3306, 0x368uLL);
  os_unfair_lock_unlock(v3);
}

void gleDestroyVBOClientStateForHash(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)(a2 + 8);
  if (v2)
  {
    free(v2);
    *(_QWORD *)(a2 + 8) = 0;
  }
}

void gleDestroyQueryClientStateForHash(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)(a2 + 8);
  if (v2)
  {
    free(v2);
    *(_QWORD *)(a2 + 8) = 0;
  }
}

void gleDestroyVAOClientStateForHash(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)(a2 + 8);
  if (v2)
  {
    free(v2);
    *(_QWORD *)(a2 + 8) = 0;
  }
}

uint64_t gleCreateCmdBufMachine(uint64_t a1)
{
  intptr_t v2;
  char *v3;
  uint64_t v4;
  _DWORD *inited;
  uint64_t v6;
  uint64_t (*gleFinishCommandBuffer)();
  uint64_t result;
  uint64_t v9;
  uint64_t i;

  *(_QWORD *)(a1 + 27344) = gleSubmitCommandBuffer;
  if (!pthread_mutex_init((pthread_mutex_t *)(a1 + 27664), 0))
  {
    v2 = *(int *)(a1 + 29768);
    *(_DWORD *)(a1 + 27740) = v2;
    *(_QWORD *)(a1 + 27728) = dispatch_semaphore_create(v2);
    *(_QWORD *)(a1 + 27320) = 0;
    *(_DWORD *)(a1 + 27736) = 0;
    *(_QWORD *)(a1 + 27776) = 0;
    *(_DWORD *)(a1 + 27784) = 0;
    *(_QWORD *)(a1 + 27760) = 0;
    *(_QWORD *)(a1 + 27768) = dispatch_semaphore_create(0);
    *(_QWORD *)(a1 + 27608) = 0x100000;
    v3 = (char *)malloc_type_malloc(0x100000uLL, 0x577B5147uLL);
    if (!v3)
      abort();
    *(_QWORD *)(a1 + 27616) = v3;
    *(_QWORD *)(a1 + 27624) = v3;
    *(_QWORD *)(a1 + 27632) = v3;
    *(_QWORD *)(a1 + 27640) = &v3[*(_QWORD *)(a1 + 27608)];
    gleFreeOrphans((int64x2_t *)a1);
    v4 = 3419;
    while (1)
    {
      inited = gleInitCommandBuffer(0x10000);
      *(_QWORD *)(a1 + 8 * v4) = inited;
      if (!inited)
        break;
      if (++v4 == 3451)
      {
        v6 = *(_QWORD *)(a1 + 27352);
        *(_QWORD *)(a1 + 27328) = v6;
        *(_QWORD *)(a1 + 27336) = v6;
        gleCreateClientThreadState(a1);
        *(_QWORD *)(a1 + 27648) = dispatch_queue_create("OpenGLMT", 0);
        *(_QWORD *)(a1 + 27656) = dispatch_semaphore_create(31);
        *(_QWORD *)(a1 + 27744) = gleGet_gleFlushCommandBuffer();
        gleFinishCommandBuffer = gleGet_gleFinishCommandBuffer();
        result = 0;
        *(_QWORD *)(a1 + 27752) = gleFinishCommandBuffer;
        return result;
      }
    }
    v9 = v4 - 3419;
    if (v9)
    {
      for (i = 0; i != v9; ++i)
        free(*(void **)(a1 + 27352 + 8 * i));
    }
    free(*(void **)(a1 + 27616));
  }
  return 10019;
}

uint64_t gleSubmitCommandBuffer(uint64_t a1)
{
  (*(void (**)(void))(a1 + 27744))();
  return *(_QWORD *)(a1 + 27336);
}

void gleDestroyCmdBufMachine(uint64_t a1)
{
  uint64_t i;

  (*(void (**)(void))(a1 + 27752))();
  dispatch_release(*(dispatch_object_t *)(a1 + 27648));
  dispatch_release(*(dispatch_object_t *)(a1 + 27656));
  *(_QWORD *)(a1 + 27656) = 0;
  *(_QWORD *)(a1 + 27648) = 0;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 27664));
  dispatch_release(*(dispatch_object_t *)(a1 + 27728));
  for (i = 3419; i != 3451; ++i)
    gleFreeCommandBuffer(*(void **)(a1 + 8 * i));
  dispatch_release(*(dispatch_object_t *)(a1 + 27768));
  *(_QWORD *)(a1 + 27768) = 0;
  free(*(void **)(a1 + 27616));
  gleDestroyClientThreadState((_QWORD *)a1);
  *(_QWORD *)(a1 + 27336) = 0;
  *(_QWORD *)(a1 + 27328) = 0;
}

void gleFlushCommandBuffer(uint64_t a1)
{
  gleFlushCommandBuffer_Core(a1, 0);
}

void gleFlushCommandBuffer_Core(uint64_t a1, int a2)
{
  int *v4;
  os_unfair_lock_s *v5;
  char v6;
  int v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);

  v4 = (int *)(a1 + 27320);
  v5 = (os_unfair_lock_s *)(a1 + 27776);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 27776));
  if (*(_DWORD *)(*(_QWORD *)(a1 + 27328) + 16))
  {
    ++v4[104];
    if (a2)
    {
      v6 = 0;
    }
    else
    {
      dispatch_async_f(*(dispatch_queue_t *)(a1 + 27648), (void *)a1, (dispatch_function_t)gleCmdProcessor);
      v6 = 1;
    }
  }
  else
  {
    if (!a2 || (v7 = v4[104]) == 0)
    {
      os_unfair_lock_unlock(v5);
      return;
    }
    v6 = 0;
    v4[104] = v7 + 1;
  }
  os_unfair_lock_unlock(v5);
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 27656), 0xFFFFFFFFFFFFFFFFLL);
  os_unfair_lock_lock(v5);
  v8 = a1 + 8 * ((*v4 + 1) & 0x1F);
  *v4 = (*v4 + 1) & 0x1F;
  *(_QWORD *)(a1 + 27328) = *(_QWORD *)(v8 + 27352);
  os_unfair_lock_unlock(v5);
  v9 = *(NSObject **)(a1 + 27648);
  if (v9)
  {
    v10 = *(_QWORD *)(a1 + 27328);
    v11 = gleSubmitCommandBuffer;
  }
  else
  {
    v11 = 0;
    v10 = 0;
  }
  *(_QWORD *)(a1 + 27344) = v11;
  *(_QWORD *)(a1 + 27336) = v10;
  if ((v6 & 1) == 0)
    dispatch_sync_f(v9, (void *)a1, (dispatch_function_t)gleCmdProcessor);
}

void gleFinishCommandBuffer(uint64_t a1)
{
  gleFlushCommandBuffer_Core(a1, 1);
}

_QWORD *gleAddLargeCommand(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;

  v5 = (a3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if (v5 > 0xFF70)
  {
    if (v5 <= 0x80000)
    {
      pthread_mutex_lock((pthread_mutex_t *)(a1 + 27664));
      v7 = *(_QWORD **)(a1 + 27624);
      v8 = *(_QWORD *)(a1 + 27632);
      if ((unint64_t)v7 >= v8)
        v8 = *(_QWORD *)(a1 + 27640);
      v9 = v8 - (_QWORD)v7;
      if (v9 < v5)
      {
        pthread_mutex_unlock((pthread_mutex_t *)(a1 + 27664));
        (*(void (**)(uint64_t))(a1 + 27752))(a1);
        pthread_mutex_lock((pthread_mutex_t *)(a1 + 27664));
        v7 = *(_QWORD **)(a1 + 27616);
        *(_QWORD *)(a1 + 27624) = v7;
        v9 = *(_QWORD *)(a1 + 27632) - (_QWORD)v7;
      }
      if (v9 >= v5)
      {
        *(_QWORD *)(a1 + 27624) = (char *)v7 + v5;
        pthread_mutex_unlock((pthread_mutex_t *)(a1 + 27664));
        if (!v7)
          return v7;
        v6 = gleAddCommand(a1, (uint64_t)glAddLargeCommand_UnpackThread, 32);
        *v6 = a2;
        v6[1] = v5;
        *((_BYTE *)v6 + 24) = 0;
        goto LABEL_3;
      }
      pthread_mutex_unlock((pthread_mutex_t *)(a1 + 27664));
    }
    return 0;
  }
  v6 = gleAddCommand(a1, (uint64_t)glAddLargeCommand_UnpackThread, v5 + 32);
  *v6 = a2;
  v6[1] = v5;
  *((_BYTE *)v6 + 24) = 1;
  v7 = v6 + 4;
LABEL_3:
  v6[2] = v7;
  return v7;
}

uint64_t glAddLargeCommand_UnpackThread(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, _QWORD))a2)(a1, *(_QWORD *)(a2 + 16));
  if (*(_BYTE *)(a2 + 24))
    return (*(_DWORD *)(a2 + 8) + 32);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 27664));
  *(_QWORD *)(a1 + 27632) = *(_QWORD *)(a2 + 16) + *(_QWORD *)(a2 + 8);
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 27664));
  return 32;
}

intptr_t gleProcessCallback(intptr_t result, uint64_t a2)
{
  uint64_t v2;
  os_unfair_lock_s *v3;
  int *v4;
  void (**v5)(uint64_t);
  void (**v6)(uint64_t);
  int v7;
  void (**v8)(uint64_t);

  __dmb(0xBu);
  *(_QWORD *)(result + 27760) = a2;
  if (*(_QWORD *)(result + 27760))
  {
    v2 = result;
    v3 = (os_unfair_lock_s *)(result + 27776);
    v4 = (int *)(result + 27736);
    v5 = (void (**)(uint64_t))(result + 27744);
    v6 = (void (**)(uint64_t))(result + 27752);
    do
    {
      os_unfair_lock_lock(v3);
      v7 = *v4;
      os_unfair_lock_unlock(v3);
      if (!v7)
      {
        v8 = v5;
        if (!*(_DWORD *)(*(_QWORD *)(v2 + 27328) + 16))
        {
          gleAddCommand(v2, (uint64_t)glUnpackDummy, 0);
          v8 = v6;
        }
        (*v8)(v2);
      }
      result = dispatch_semaphore_wait(*(dispatch_semaphore_t *)(v2 + 27768), 0xFFFFFFFFFFFFFFFFLL);
    }
    while (*(_QWORD *)(v2 + 27760));
  }
  return result;
}

uint64_t glUnpackDummy()
{
  return 0;
}

intptr_t gleFinishCallback(uint64_t a1)
{
  *(_QWORD *)(a1 + 27760) = 0;
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 27768));
}

intptr_t gleCmdProcessor(uint64_t a1)
{
  int *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  int v5;
  char *v6;
  char *v7;
  uint64_t (*v8)(uint64_t, char *);
  int v9;
  void (**v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;

  v2 = (int *)(a1 + 27324);
  v3 = (os_unfair_lock_s *)(a1 + 27776);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 27776));
  v4 = *(_QWORD *)(a1 + 8 * *v2 + 27352);
  v5 = *(_DWORD *)(v4 + 16);
  os_unfair_lock_unlock(v3);
  if (v5 >= 1)
  {
    v6 = (char *)(v4 + 24);
    do
    {
      v8 = *(uint64_t (**)(uint64_t, char *))v6;
      v7 = v6 + 16;
      v9 = v8(a1, v7);
      v10 = *(void (***)(uint64_t, uint64_t))(a1 + 27760);
      if (v10)
        (*v10)(a1, (uint64_t)(v10 + 2));
      v6 = &v7[v9];
      --v5;
    }
    while (v5);
  }
  os_unfair_lock_lock(v3);
  if (*(_QWORD *)(a1 + 27760) && v2[103] == 1)
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 27768));
  --v2[103];
  v11 = *v2;
  v12 = *(_QWORD *)(a1 + 8 * v11 + 27352);
  *(_DWORD *)(v12 + 16) = 0;
  *(_QWORD *)v12 = v12 + 24;
  *v2 = ((_BYTE)v11 + 1) & 0x1F;
  os_unfair_lock_unlock(v3);
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 27656));
}

uint64_t gleSetBaseTCLState(uint64_t result)
{
  int v1;
  __int128 v2;

  if (*(_WORD *)(result + 29830) == 7168 && !*(_BYTE *)(result + 32478))
  {
    v1 = *(unsigned __int8 *)(*(_QWORD *)(result + 29032) + 101);
    *(_DWORD *)(result + 2224) = 1002685319;
    if (v1)
      v2 = xmmword_21B9A4FE0;
    else
      v2 = xmmword_21B9A4FF0;
    *(_OWORD *)(result + 2228) = v2;
  }
  else
  {
    *(_DWORD *)(result + 2240) = 0;
    *(_OWORD *)(result + 2224) = 0u;
  }
  *(_DWORD *)(result + 2244) = 0;
  *(_QWORD *)(result + 2248) = 0;
  return result;
}

__n128 gleUpdateDispatchJIT(uint64_t a1)
{
  __int128 v1;
  __n128 result;

  *(_QWORD *)(a1 + 29432) = 0;
  v1 = *(_OWORD *)(a1 + 29056);
  *(_OWORD *)(a1 + 29240) = *(_OWORD *)(a1 + 29040);
  *(_OWORD *)(a1 + 29256) = v1;
  *(_OWORD *)(a1 + 29272) = *(_OWORD *)(a1 + 29072);
  *(_OWORD *)(a1 + 29288) = 0u;
  *(_OWORD *)(a1 + 29288) = *(_OWORD *)(a1 + 29088);
  *(_OWORD *)(a1 + 29304) = 0u;
  *(_OWORD *)(a1 + 29304) = *(_OWORD *)(a1 + 29104);
  *(_OWORD *)(a1 + 29320) = 0u;
  *(_OWORD *)(a1 + 29320) = *(_OWORD *)(a1 + 29120);
  *(_OWORD *)(a1 + 29336) = 0u;
  *(_OWORD *)(a1 + 29336) = *(_OWORD *)(a1 + 29136);
  *(_OWORD *)(a1 + 29352) = 0u;
  *(_OWORD *)(a1 + 29352) = *(_OWORD *)(a1 + 29152);
  *(_OWORD *)(a1 + 29368) = 0u;
  *(_OWORD *)(a1 + 29368) = *(_OWORD *)(a1 + 29168);
  *(_OWORD *)(a1 + 29384) = 0u;
  *(_OWORD *)(a1 + 29384) = *(_OWORD *)(a1 + 29184);
  *(_OWORD *)(a1 + 29400) = 0u;
  *(_OWORD *)(a1 + 29400) = *(_OWORD *)(a1 + 29200);
  *(_OWORD *)(a1 + 29416) = 0u;
  result = *(__n128 *)(a1 + 29216);
  *(__n128 *)(a1 + 29416) = result;
  *(_QWORD *)(a1 + 29432) = *(_QWORD *)(a1 + 29232);
  return result;
}

double glePopulateRenderDispatch(uint64_t a1)
{
  double result;

  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(a1 + 29448) + 136))(*(_QWORD *)(a1 + 29016), a1 + 29040);
  *(_QWORD *)&result = gleUpdateDispatchJIT(a1).n128_u64[0];
  return result;
}

int8x16_t gleReclaimContextResources(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  int8x16_t result;

  v2 = a1 + 28652;
  if (*(_QWORD *)(a1 + 28944))
    gleFreeOrphans((int64x2_t *)a1);
  gleReclaimDrawCopyPixelResources(a1);
  gleReclaimBitmapResources(a1);
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  gleReclaimTextureObjectResources(a1);
  gleReclaimBufferObjectResources(a1);
  gleReclaimVertexArrayResources(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  if (*(_BYTE *)(v2 + 3844))
  {
    v3 = 0;
    v4 = (_QWORD *)(a1 + 32512);
    do
    {
      (*(void (**)(_QWORD))(v4[206] + 1168))(*v4);
      ++v3;
      v4 += 209;
    }
    while (v3 < *(unsigned __int8 *)(v2 + 3844));
  }
  *(_DWORD *)v2 = 0;
  *(int8x16_t *)(a1 + 1520) = vorrq_s8(*(int8x16_t *)(a1 + 1520), (int8x16_t)xmmword_21B9A5000);
  result = vorrq_s8(*(int8x16_t *)(a1 + 1536), (int8x16_t)xmmword_21B9A5010);
  *(int8x16_t *)(a1 + 1536) = result;
  *(_DWORD *)(v2 + 1148) |= 0xDE3C0478;
  return result;
}

void gleLabelObject(uint64_t a1, int a2, unsigned int a3, int a4, char *a5)
{
  uint64_t HashMachineFromType;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  uint64_t i;
  uint64_t v16;
  __int16 *v17;
  __int16 v18;

  if (a4 < 0)
  {
    v17 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832))
      return;
    v18 = 1281;
    goto LABEL_22;
  }
  HashMachineFromType = gleGetHashMachineFromType(a1, a2);
  if (HashMachineFromType)
  {
    v11 = HashMachineFromType;
    os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (a3)
    {
      v12 = gleLookupHashObject(v11, a3);
      v13 = a1;
      v14 = a2;
    }
    else
    {
      if (a2 != 37204)
      {
        if (a2 == 5890)
        {
          for (i = 2949; i != 2960; ++i)
          {
            v16 = *(_QWORD *)(a1 + 8 * i);
            if (v16)
              gleLabelObjectInner(a1, 5890, v16, a4, a5);
          }
        }
        else if (!*(_WORD *)(a1 + 29832))
        {
          *(_WORD *)(a1 + 29832) = 1282;
        }
        goto LABEL_6;
      }
      v12 = *(uint64_t **)(a1 + 26392);
      if (!v12)
      {
LABEL_6:
        os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
        return;
      }
      v13 = a1;
      v14 = 37204;
    }
    gleLabelObjectInner(v13, v14, (uint64_t)v12, a4, a5);
    goto LABEL_6;
  }
  v17 = (__int16 *)(a1 + 29832);
  if (!*(_WORD *)(a1 + 29832))
  {
    v18 = 1280;
LABEL_22:
    *v17 = v18;
  }
}

uint64_t gleGetHashMachineFromType(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = 0;
  if (a2 > 36159)
  {
    if (a2 > 37200)
    {
      if (a2 == 37201)
      {
        return *(_QWORD *)(a1 + 19296) + 264;
      }
      else
      {
        v5 = a1 + 25904;
        v6 = a1 + 26352;
        if (a2 != 37204)
          v6 = 0;
        if (a2 == 37203)
          return v5;
        else
          return v6;
      }
    }
    else if (a2 == 36160)
    {
      return *(_QWORD *)(a1 + 19296) + 8;
    }
    else if (a2 == 36161)
    {
      return *(_QWORD *)(a1 + 19296) + 40;
    }
    else
    {
      v4 = a1 + 26400;
      if (a2 == 36386)
        return v4;
    }
  }
  else if (a2 > 35410)
  {
    if (a2 == 35411)
    {
      return *(_QWORD *)(a1 + 19296) + 200;
    }
    else if (a2 == 35648 || a2 == 35656)
    {
      return *(_QWORD *)(a1 + 19296) + 168;
    }
  }
  else
  {
    switch(a2)
    {
      case 5890:
        return *(_QWORD *)(a1 + 19296) + 72;
      case 33510:
        return *(_QWORD *)(a1 + 19296) + 232;
      case 35407:
        return *(_QWORD *)(a1 + 19296) + 136;
    }
  }
  return result;
}

void gleLabelObjectInner(uint64_t a1, int a2, uint64_t a3, int a4, char *__s)
{
  int v8;
  void *v9;
  void *v10;

  if (a3)
  {
    if (a2 == 35648)
    {
      v8 = 8;
    }
    else
    {
      if (a2 != 35656)
      {
LABEL_7:
        v9 = *(void **)(a3 + 32);
        if (v9)
        {
          free(v9);
          *(_QWORD *)(a3 + 32) = 0;
        }
        if (__s)
        {
          if (!a4)
            a4 = strlen(__s);
          v10 = malloc_type_malloc(a4 + 1, 0x577B5147uLL);
          if (!v10)
            abort();
          *(_QWORD *)(a3 + 32) = v10;
          memcpy(v10, __s, a4);
          *(_BYTE *)(*(_QWORD *)(a3 + 32) + a4) = 0;
        }
        return;
      }
      v8 = 7;
    }
    if (*(_DWORD *)(a3 + 24) == v8)
      goto LABEL_7;
  }
  if (!*(_WORD *)(a1 + 29832))
    *(_WORD *)(a1 + 29832) = 1282;
}

void gleGetObjectLabel(uint64_t a1, int a2, unsigned int a3, int a4, _DWORD *a5, _BYTE *a6)
{
  uint64_t HashMachineFromType;
  uint64_t v13;
  uint64_t *v14;
  size_t v15;
  int v16;
  uint64_t v17;
  __int16 *v18;
  __int16 v19;

  if (a4 < 0)
  {
    v18 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832))
      return;
    v19 = 1281;
    goto LABEL_22;
  }
  HashMachineFromType = gleGetHashMachineFromType(a1, a2);
  if (HashMachineFromType)
  {
    v13 = HashMachineFromType;
    os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    if (a3)
    {
      v14 = gleLookupHashObject(v13, a3);
      v15 = a1;
      v16 = a2;
    }
    else if (a2 == 37204)
    {
      v14 = *(uint64_t **)(a1 + 26392);
      if (!v14)
        goto LABEL_6;
      v15 = a1;
      v16 = 37204;
    }
    else
    {
      if (a2 != 5890)
      {
        if (!*(_WORD *)(a1 + 29832))
          *(_WORD *)(a1 + 29832) = 1282;
        goto LABEL_6;
      }
      v17 = 2949;
      while (1)
      {
        v14 = *(uint64_t **)(a1 + 8 * v17);
        if (v14)
          break;
        if (++v17 == 2960)
          goto LABEL_6;
      }
      v15 = a1;
      v16 = 5890;
    }
    gleGetObjectLabelInner(v15, v16, (uint64_t)v14, a4, a5, a6);
LABEL_6:
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    return;
  }
  v18 = (__int16 *)(a1 + 29832);
  if (!*(_WORD *)(a1 + 29832))
  {
    v19 = 1280;
LABEL_22:
    *v18 = v19;
  }
}

size_t gleGetObjectLabelInner(size_t result, int a2, uint64_t a3, int a4, _DWORD *a5, _BYTE *a6)
{
  int v9;
  const void *v10;
  int v11;
  uint64_t v12;

  if (a3)
  {
    if (a2 == 35648)
    {
      v9 = 8;
    }
    else
    {
      if (a2 != 35656)
        goto LABEL_7;
      v9 = 7;
    }
    if (*(_DWORD *)(a3 + 24) == v9)
    {
LABEL_7:
      v10 = *(const void **)(a3 + 32);
      if (v10)
      {
        result = strlen(*(const char **)(a3 + 32));
        if (a6)
        {
          if ((int)result + 1 < a4)
            v11 = result + 1;
          else
            v11 = a4;
          v12 = v11;
          memcpy(a6, v10, v11);
          result = v12 - 1;
          a6[v12 - 1] = 0;
        }
        if (a5)
          *a5 = result;
      }
      else
      {
        if (a5)
          *a5 = 0;
        if (a4 >= 1 && a6)
          *a6 = 0;
      }
      return result;
    }
  }
  if (!*(_WORD *)(result + 29832))
    *(_WORD *)(result + 29832) = 1282;
  return result;
}

void gleLabelObjectWithResponsibleProcess(uint64_t a1, int a2, unsigned int a3, int a4)
{
  uint64_t HashMachineFromType;
  uint64_t v8;
  uint64_t *v9;
  __int16 *v10;
  __int16 v11;

  HashMachineFromType = gleGetHashMachineFromType(a1, a2);
  if (!HashMachineFromType)
  {
    v10 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832))
      return;
    v11 = 1280;
    goto LABEL_8;
  }
  v8 = HashMachineFromType;
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
  v9 = gleLookupHashObject(v8, a3);
  if (v9)
  {
    *((_DWORD *)v9 + 7) = a4;
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
    return;
  }
  v10 = (__int16 *)(a1 + 29832);
  if (!*(_WORD *)(a1 + 29832))
  {
    v11 = 1281;
LABEL_8:
    *v10 = v11;
  }
}

uint64_t gleUpdateDeferredState(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, int a5, __n128 a6, double a7, double a8)
{
  uint64_t v9;
  int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned __int8 *v16;
  _BYTE *v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  double v22;
  double v23;
  double v24;
  int MatrixIdentifier;
  int v26;
  int v27;
  int v28;
  BOOL v29;
  int v30;
  int v31;
  int v32;
  BOOL v33;
  int v34;
  double v35;
  double v36;
  double v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  BOOL v43;
  int v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  int v54;
  char v55;
  char v56;
  char v57;
  int v58;
  int v59;
  unsigned int v60;
  int v61;
  int v62;
  unsigned int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  int v79;
  int v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  int v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  _WORD *v101;
  int v102;
  unsigned int v103;
  unsigned int v104;
  int v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t *v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  unsigned __int8 *v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  int v121;
  int v122;
  int v123;
  int v124;
  __int16 v125;
  int v126;
  int v127;
  unsigned int v128;
  uint64_t v129;
  unsigned int v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  int v153;
  int v154;
  uint64_t v155;
  int v156;
  uint64_t v157;
  int v158;
  int8x8_t v159;
  __int32 v160;
  int v161;
  int8x16_t v162;
  int8x16_t v163;
  uint64_t v167;
  unsigned int v169;
  uint64_t v171;

  v9 = a1 + 29716;
  v171 = a1 + 24748;
  if (*(_BYTE *)(a1 + 32503))
    v167 = mach_absolute_time();
  else
    v167 = 0;
  v10 = *(_DWORD *)(a1 + 1540);
  if ((a5 & v10 & 0x10000000) != 0)
  {
    gleUpdateCurrentProgramState(a1);
    *(_DWORD *)(a1 + 1532) |= 0x10000000u;
    v11 = *(_DWORD *)(a1 + 1540) & 0xEFFFFFFF;
    v12 = *(unsigned __int8 *)(v9 + 2768);
    v13 = v171;
    *(_DWORD *)(v171 + 3904) = 0;
    if (v12)
      v14 = 0x80000000;
    else
      v14 = 1610612736;
    v10 = v11 | v14;
    *(_DWORD *)(a1 + 1540) = v10;
  }
  else
  {
    v13 = v171;
  }
  if (*(_DWORD *)(a1 + 1548) & 0x80000 | v10 & 0x4000000)
  {
    if (*(_DWORD *)(v9 + 96)
      && ((v15 = *(_QWORD *)(a1 + 28960)) != 0
        ? (v16 = (unsigned __int8 *)(v15 + 552))
        : (v16 = (unsigned __int8 *)(v9 + 92)),
          *v16 >> *(_BYTE *)(*(_QWORD *)(a1 + 29032) + 507)))
    {
      *(_DWORD *)(v13 + 3904) = 0;
      v10 |= 0x4000000u;
      v169 = 1282;
    }
    else
    {
      v169 = 0;
      v10 &= ~0x4000000u;
    }
    *(_DWORD *)(a1 + 1540) = v10;
  }
  else
  {
    v169 = 0;
  }
  v17 = (_BYTE *)(a1 + 12518);
  v18 = *(_DWORD *)(a1 + 2216) & *(_DWORD *)(a1 + 1544);
  v19 = v18 & 0xFFFFFE;
  if ((v18 & 0xFFFFFE) != 0)
  {
    if ((v18 & 0x10) != 0)
    {
      gleModelMatInvert(a1);
      v19 = v18 & 0xFFFFEE;
      if ((v18 & 0xFFFFEE) == 0)
      {
        v13 = v171;
LABEL_28:
        *(_DWORD *)(a1 + 1544) &= ~v19;
        v10 = *(_DWORD *)(a1 + 1540);
        goto LABEL_29;
      }
      v13 = v171;
    }
    v20 = v19 >> 1;
    v21 = 1;
    do
    {
      if ((v20 & 1) != 0)
      {
        gleInvertMatrix(a1, v21);
        v13 = v171;
      }
      v20 = v19 >> ++v21;
    }
    while (v19 >> v21);
    goto LABEL_28;
  }
LABEL_29:
  if ((v10 & 0x18) == 0)
  {
    if ((*(_BYTE *)(a1 + 1548) & 1) == 0)
      goto LABEL_58;
    if (!*v17)
    {
      *(_OWORD *)(a1 + 12432) = *(_OWORD *)(a1 + 9424);
      *(_OWORD *)(a1 + 12448) = *(_OWORD *)(a1 + 9440);
      *(_OWORD *)(a1 + 12464) = *(_OWORD *)(a1 + 9456);
      a6 = *(__n128 *)(a1 + 9472);
      *(__n128 *)(a1 + 12480) = a6;
      *(_DWORD *)v9 = *(_DWORD *)(v9 + 4);
      goto LABEL_58;
    }
    goto LABEL_51;
  }
  *(_QWORD *)&v22 = gleMultiplyAlignedMatrix((float32x4_t *)(a1 + 9552), (float32x2_t *)(a1 + 9616), (float32x4_t *)(a1 + 9424)).n128_u64[0];
  MatrixIdentifier = gleGenerateMatrixIdentifier(a1, a1 + 9424, v22, v23, v24);
  v26 = *v17;
  if (*v17)
  {
    v27 = 0x10000;
  }
  else
  {
    *(_OWORD *)(a1 + 12432) = *(_OWORD *)(a1 + 9424);
    *(_OWORD *)(a1 + 12448) = *(_OWORD *)(a1 + 9440);
    *(_OWORD *)(a1 + 12464) = *(_OWORD *)(a1 + 9456);
    a6 = *(__n128 *)(a1 + 9472);
    *(__n128 *)(a1 + 12480) = a6;
    *(_DWORD *)v9 = MatrixIdentifier;
    v27 = 65540;
  }
  v13 = v171;
  v28 = *(_DWORD *)(v9 + 4);
  v29 = (v28 & 0x3FCFF3FC) == 1070593020;
  v30 = (MatrixIdentifier == -1074791426) ^ (v28 == -1074791426);
  if (!v29)
    v30 = 1;
  if ((~MatrixIdentifier & 0x3FCFF3FC) != 0)
    v30 = v29;
  if (v30 == 1)
  {
    *(_DWORD *)(v171 + 3904) = 0;
    *(_DWORD *)(a1 + 1548) |= v27;
  }
  *(_DWORD *)(v9 + 4) = MatrixIdentifier;
  if ((*(_BYTE *)(a1 + 1540) & 0x10) != 0)
  {
    v31 = gleGenerateMatrixIdentifier(a1, a1 + 9616, a6.n128_f64[0], a7, a8);
    v13 = v171;
    v32 = *(_DWORD *)(v9 + 8);
    v33 = (v32 & 0x3FCFF3FC) == 1070593020;
    v34 = (v31 == -1074791426) ^ (v32 == -1074791426);
    if (!v33)
      v34 = 1;
    if ((~v31 & 0x3FCFF3FC) != 0)
      v34 = v33;
    if (v34 == 1)
    {
      *(_DWORD *)(v171 + 3904) = 0;
      *(_DWORD *)(a1 + 1548) |= 0x10008u;
    }
    *(_DWORD *)(v9 + 8) = v31;
    v26 = *v17;
  }
  if (v26)
  {
LABEL_51:
    *(_QWORD *)&v35 = gleApplyViewScissorTransform((float32x4_t *)a1).u64[0];
    v38 = gleGenerateMatrixIdentifier(a1, a1 + 12432, v35, v36, v37);
    v13 = v171;
    v39 = (v38 == -1074791426) ^ (*(_DWORD *)v9 == -1074791426);
    if ((*(_DWORD *)v9 & 0x3FCFF3FC) != 0x3FCFF3FC)
      v39 = 1;
    if ((~v38 & 0x3FCFF3FC) != 0)
      v39 = (*(_DWORD *)v9 & 0x3FCFF3FC) == 1070593020;
    if (v39 == 1)
    {
      *(_DWORD *)(v171 + 3904) = 0;
      *(_DWORD *)(a1 + 1548) |= 4u;
    }
    *(_DWORD *)v9 = v38;
  }
LABEL_58:
  v40 = *(_DWORD *)(a1 + 1540);
  if ((v40 & 0x10) != 0 && (v18 & 0x10) == 0 && (*(_DWORD *)(a1 + 2216) & 0x10) != 0)
  {
    v41 = gleGenerateMatrixIdentifier(a1, a1 + 11152, a6.n128_f64[0], a7, a8);
    v13 = v171;
    v42 = *(_DWORD *)(v9 + 12);
    v43 = (v42 & 0x3FCFF3FC) == 1070593020;
    v44 = (v41 == -1074791426) ^ (v42 == -1074791426);
    if (!v43)
      v44 = 1;
    if ((~v41 & 0x3FCFF3FC) != 0)
      v44 = v43;
    if (v44 == 1)
    {
      *(_DWORD *)(v171 + 3904) = 0;
      *(_DWORD *)(a1 + 1548) |= 0x10010u;
    }
    *(_DWORD *)(v9 + 12) = v41;
    v40 = *(_DWORD *)(a1 + 1540);
  }
  if ((v40 & 4) != 0)
  {
    v45 = gleGenerateMatrixIdentifier(a1, a1 + 9488, a6.n128_f64[0], a7, a8);
    v13 = v171;
    *(_DWORD *)(a1 + 19152) = *(_DWORD *)(a1 + 19152) & 0xFFFFFEFF | ((v45 != -1074791426) << 8);
    *(_DWORD *)(v9 + 16) = v45;
    v40 = *(_DWORD *)(a1 + 1540);
  }
  v46 = v40 & 0xFF0000;
  if (v46)
  {
    v47 = 0;
    v48 = HIWORD(v46);
    v49 = a1 + 10384;
    v50 = a1 + 29736;
    do
    {
      v51 = 1 << v47;
      if (((1 << v47) & v48) != 0)
      {
        v52 = gleGenerateMatrixIdentifier(a1, v49, a6.n128_f64[0], a7, a8);
        v13 = v171;
        v53 = *(_DWORD *)(v50 + 4 * v47);
        v54 = (v52 == -1074791426) ^ (v53 == -1074791426);
        if ((v53 & 0x3FCFF3FC) != 0x3FCFF3FC)
          v54 = 1;
        if ((~v52 & 0x3FCFF3FC) != 0)
          v54 = (v53 & 0x3FCFF3FC) == 1070593020;
        if (v54 == 1)
        {
          *(_DWORD *)(v171 + 3904) = 0;
          *(_DWORD *)(a1 + 1548) |= 0x10040u;
          v53 = *(_DWORD *)(v50 + 4 * v47);
        }
        if (((v52 & 0x3030303) == 50529026) == ((v53 & 0x3030303) != 50529026))
        {
          v55 = *(_BYTE *)(v9 + 2759);
          v56 = v55 & ~(_BYTE)v51;
          v57 = v55 | v51;
          if ((v52 & 0x3030303) != 0x3030302)
            v57 = v56;
          *(_BYTE *)(v9 + 2759) = v57;
          *(_DWORD *)(v171 + 3904) = 0;
          *(_DWORD *)(a1 + 1548) |= 0x4000u;
        }
        *(_DWORD *)(v50 + 4 * v47) = v52;
      }
      ++v47;
      v49 += 64;
    }
    while (v48 >> v47);
  }
  v58 = *(_DWORD *)(a1 + 1548);
  v59 = v18;
  if ((v58 & 0x4000) != 0)
  {
    v60 = *(unsigned __int8 *)(v9 + 2760);
    if (*(_BYTE *)(v9 + 2760))
    {
      if ((*(_BYTE *)(v13 + 116) & 9) != 0 || *(_BYTE *)(v13 + 8))
      {
        v60 = 0;
      }
      else
      {
        v155 = *(_QWORD *)(a1 + 26384);
        if (!v155 || (v60 &= *(_BYTE *)(v155 + 1220) & *(_BYTE *)(v155 + 907)) != 0)
          v60 &= *(_BYTE *)(v9 + 2759) & (~(*(_DWORD *)(a1 + 23796) | *(_DWORD *)(a1 + 23792)) >> 24);
      }
    }
    if (v60 != *(unsigned __int8 *)(v9 + 2758))
    {
      *(_BYTE *)(v9 + 2758) = v60;
      *(_DWORD *)(v13 + 3904) = 0;
      *(_DWORD *)(a1 + 1548) = v58 | 0x20000;
    }
  }
  if ((v18 & 0x2000000) != 0)
  {
    (*(void (**)(uint64_t, uint64_t))(a1 + 1456))(a1, a1 + 8464);
    v13 = v171;
    v61 = *(_DWORD *)(a1 + 1544);
    if ((v61 & 0x1000000) == 0)
    {
      *(_DWORD *)(v171 + 3904) = 0;
      v62 = v61 | 0x1000000;
      *(_DWORD *)(a1 + 1544) = v62;
      v59 = *(_DWORD *)(a1 + 2216) & v62;
    }
  }
  if ((v59 & 0x1000000) != 0)
  {
    gleUpdateLightRGBASumsUnconditional((float32x2_t *)a1, (float32x2_t *)(a1 + 13824), 0);
    gleUpdateLightRGBASumsUnconditional((float32x2_t *)a1, (float32x2_t *)(a1 + 14352), 1);
    v13 = v171;
    *(_DWORD *)(a1 + 1544) &= ~0x1000000u;
  }
  v63 = *(_DWORD *)(a1 + 1548);
  v64 = *(_DWORD *)(a1 + 2220) & v63;
  if ((v64 & 0x20000) != 0 && !*(_BYTE *)v13)
  {
    v65 = *(_QWORD *)(*(_QWORD *)(a1 + 24512) + 448);
    gleUpdateFragmentStateProgram(a1, a2);
    v13 = v171;
    v63 = *(_DWORD *)(a1 + 1548) & 0xFFFDFFFF;
    *(_DWORD *)(a1 + 1548) = v63;
    if (v65 != *(_QWORD *)(*(_QWORD *)(a1 + 24512) + 448))
    {
      *(_DWORD *)(v171 + 3904) = 0;
      v63 |= 0x80u;
      *(_DWORD *)(a1 + 1548) = v63;
    }
  }
  if ((v64 & 0x1020000) != 0)
  {
    if ((*(_BYTE *)(v13 + 116) & 0x10) != 0)
    {
      v69 = *(_QWORD *)(a1 + 24768);
      if (!v69)
        v69 = *(_QWORD *)(*(_QWORD *)(a1 + 24776) + 72);
      v67 = (uint64_t *)(v69 + 3528);
      v68 = (uint64_t *)(v69 + 3536);
    }
    else if (*(_BYTE *)(v13 + 12))
    {
      v66 = *(_QWORD *)(a1 + 24432);
      v67 = (uint64_t *)(v66 + 152);
      v68 = (uint64_t *)(v66 + 160);
    }
    else
    {
      v70 = *(_QWORD *)(a1 + 24512);
      v67 = (uint64_t *)(v70 + 112);
      v68 = (uint64_t *)(v70 + 120);
    }
    v71 = *v68;
    v72 = *v67;
    v73 = *(_QWORD *)(a1 + 19224);
    if (v73 == v71)
    {
      v74 = *(_DWORD *)(a1 + 19216) ^ v72;
      *(_QWORD *)(a1 + 19216) = v72;
      if ((v74 & 0x8C0) == 0)
        goto LABEL_122;
      v75 = 1024;
    }
    else
    {
      v76 = v73 ^ v71;
      if (((v73 ^ v71) & 0xC0000000CLL) != 0)
      {
        *(_BYTE *)(a1 + 19232) = (v71 & 0x400000004) != 0;
        *(_BYTE *)(a1 + 19233) = (v71 & 0x800000008) != 0;
        v75 = 268534786;
      }
      else
      {
        v75 = 1024;
      }
      if ((v76 & 0x2000000020) != 0)
      {
        *(_BYTE *)(a1 + 19234) = (v71 & 0x2000000020) != 0;
        v75 = 268534794;
      }
      if (*(unsigned __int8 *)(a1 + 23788) != ((unsigned __int16)(WORD2(v71) | v71) >> 8))
      {
        *(_DWORD *)(a1 + 23788) = 16843009 * (BYTE5(v71) | BYTE1(v71));
        v75 = 268534874;
      }
      *(_QWORD *)(a1 + 19224) = v71;
      *(_QWORD *)(a1 + 19216) = v72;
    }
    *(_DWORD *)(v13 + 3904) = 0;
    v63 |= v75;
    *(_DWORD *)(a1 + 1548) = v63;
    v64 |= *(_DWORD *)(a1 + 2220) & v75;
  }
LABEL_122:
  if ((v64 & 0x10000) != 0)
  {
    gleUpdateVertexStateProgram(a1);
    v13 = v171;
    v63 = *(_DWORD *)(a1 + 1548) & 0xFFFEFFFF;
    *(_DWORD *)(a1 + 1548) = v63;
  }
  if ((v64 & 0x40000) != 0)
  {
    gleUpdateRasterStateProgram(a1);
    v13 = v171;
    v63 = *(_DWORD *)(a1 + 1548) & 0xFFFBFFFF;
    *(_DWORD *)(a1 + 1548) = v63;
  }
  if ((v64 & 0x70000000) != 0)
  {
    if ((v64 & 0x40000000) != 0)
    {
      gleUpdateFragmentFallbackProgram(a1, 3u);
      v13 = v171;
      v63 = *(_DWORD *)(a1 + 1548) & 0xBFFFFFFF;
      *(_DWORD *)(a1 + 1548) = v63;
      if ((v64 & 0x20000000) == 0)
      {
LABEL_129:
        if ((v64 & 0x10000000) == 0)
          goto LABEL_131;
        goto LABEL_130;
      }
    }
    else if ((v64 & 0x20000000) == 0)
    {
      goto LABEL_129;
    }
    gleUpdateVertexFallbackProgram(a1, 1u);
    v13 = v171;
    v63 = *(_DWORD *)(a1 + 1548) & 0xDFFFFFFF;
    *(_DWORD *)(a1 + 1548) = v63;
    if ((v64 & 0x10000000) != 0)
    {
LABEL_130:
      gleUpdateVertexFallbackProgram(a1, 0);
      v13 = v171;
      v63 = *(_DWORD *)(a1 + 1548) & 0xEFFFFFFF;
      *(_DWORD *)(a1 + 1548) = v63;
    }
  }
LABEL_131:
  if ((v63 & 2) != 0)
  {
    gleSelectVertexSubmitFunc(a1);
    v13 = v171;
    v63 = *(_DWORD *)(a1 + 1548);
    if ((v63 & 0x8000) == 0)
    {
LABEL_133:
      if ((v63 & 4) == 0)
        goto LABEL_134;
      goto LABEL_146;
    }
  }
  else if ((v63 & 0x8000) == 0)
  {
    goto LABEL_133;
  }
  gleSelectPrimitiveFunc(a1);
  v13 = v171;
  v63 = *(_DWORD *)(a1 + 1548);
  if ((v63 & 4) == 0)
  {
LABEL_134:
    if ((v63 & 8) == 0)
      goto LABEL_135;
    goto LABEL_147;
  }
LABEL_146:
  *(_QWORD *)(a1 + 20096) = gleSetProjectionFunc;
  *(_QWORD *)(a1 + 20104) = gleSetProjectionFunc;
  *(_QWORD *)(a1 + 20224) = gleSetProjectionRPosFunc;
  *(_QWORD *)(a1 + 20232) = gleSetProjectionRPosFunc;
  if ((v63 & 8) == 0)
  {
LABEL_135:
    if ((v63 & 0x10) == 0)
      goto LABEL_136;
    goto LABEL_148;
  }
LABEL_147:
  *(_QWORD *)(a1 + 20112) = gleSetModelviewFunc;
  *(_QWORD *)(a1 + 20120) = gleSetModelviewFunc;
  *(_QWORD *)(a1 + 20240) = gleSetModelviewRPosFunc;
  *(_QWORD *)(a1 + 20248) = gleSetModelviewRPosFunc;
  if ((v63 & 0x10) == 0)
  {
LABEL_136:
    if ((v63 & 0x40) == 0)
      goto LABEL_137;
    goto LABEL_149;
  }
LABEL_148:
  *(_QWORD *)(a1 + 20128) = gleSetNormalFunc;
  *(_QWORD *)(a1 + 20136) = gleSetNormalFunc;
  *(_QWORD *)(a1 + 20256) = gleSetNormalRPosFunc;
  *(_QWORD *)(a1 + 20264) = gleSetNormalRPosFunc;
  if ((v63 & 0x40) == 0)
  {
LABEL_137:
    if ((v63 & 0x20) == 0)
      goto LABEL_138;
    goto LABEL_150;
  }
LABEL_149:
  *(_QWORD *)(a1 + 20144) = gleSetTextureFunc;
  *(_QWORD *)(a1 + 20152) = gleSetTextureFunc;
  *(_QWORD *)(a1 + 20272) = gleSetTextureRPosFunc;
  *(_QWORD *)(a1 + 20280) = gleSetTextureRPosFunc;
  if ((v63 & 0x20) == 0)
  {
LABEL_138:
    if ((v63 & 0x400) == 0)
      goto LABEL_140;
    goto LABEL_139;
  }
LABEL_150:
  *(_QWORD *)(a1 + 20160) = gleSetLightFrontFunc;
  *(_QWORD *)(a1 + 20168) = gleSetLightFrontFunc;
  *(_QWORD *)(a1 + 20176) = gleSetLightBackFunc;
  *(_QWORD *)(a1 + 20184) = gleSetLightBackFunc;
  *(_QWORD *)(a1 + 20192) = gleSetLightPtrFrontFunc;
  *(_QWORD *)(a1 + 20200) = gleSetLightPtrFrontFunc;
  *(_QWORD *)(a1 + 20208) = gleSetLightPtrBackFunc;
  *(_QWORD *)(a1 + 20216) = gleSetLightPtrBackFunc;
  if ((v63 & 0x400) != 0)
  {
LABEL_139:
    *(_QWORD *)(a1 + 27880) = gleSetEyeInterpFunc;
    *(_QWORD *)(a1 + 27888) = gleSetEyeInterpFunc;
    *(_QWORD *)(a1 + 27896) = gleSetClipInterpFunc;
    *(_QWORD *)(a1 + 27904) = gleSetClipInterpFunc;
    *(_QWORD *)(a1 + 27912) = gleSetFlatCopyFunc;
    *(_QWORD *)(a1 + 27920) = gleSetFlatCopyFunc;
  }
LABEL_140:
  if ((v63 & 0x1F00080) != 0)
  {
    *(_BYTE *)(v9 + 2771) = 1;
    if ((v63 & 0x1000080) != 0)
    {
      if ((*(_BYTE *)(v13 + 116) & 0x10) != 0)
      {
        v85 = *(_QWORD *)(a1 + 24768);
        if (!v85)
          v85 = *(_QWORD *)(*(_QWORD *)(a1 + 24776) + 72);
        v77 = (uint64_t *)(v85 + 3568);
      }
      else
      {
        v77 = (uint64_t *)(*(_QWORD *)(a1 + 24512) + 448);
      }
      v83 = *v77;
      v82 = *(_QWORD *)(a1 + 14896) ^ *v77;
      *(_QWORD *)(a1 + 14896) = *v77;
      if ((v63 & 0x800000) == 0)
        goto LABEL_172;
    }
    else
    {
      v82 = 0;
      v83 = *(_QWORD *)(a1 + 14896);
      if ((v63 & 0x800000) == 0)
      {
LABEL_172:
        v84 = *(_QWORD *)(a1 + 14912);
        goto LABEL_177;
      }
    }
    if ((*(_BYTE *)(v13 + 116) & 8) != 0)
    {
      v86 = *(_QWORD *)(a1 + 24768);
      if (!v86)
        v86 = *(_QWORD *)(*(_QWORD *)(a1 + 24776) + 64);
      v84 = *(_QWORD *)(v86 + 2864);
    }
    else
    {
      v84 = -1;
    }
    v82 |= *(_QWORD *)(a1 + 14912) ^ v84;
    *(_QWORD *)(a1 + 14912) = v84;
LABEL_177:
    v80 = (v63 >> 13) & 1;
    if (v84 == -1)
    {
      LOBYTE(v79) = 0;
      if ((v63 & 0x100000) == 0)
      {
LABEL_191:
        v90 = *(_QWORD *)(a1 + 14960);
LABEL_192:
        if (v90 == -1)
        {
          LOBYTE(v80) = 0;
          *(_QWORD *)(a1 + 14976) = v83;
          if (v83 == -1)
          {
LABEL_200:
            if (v82)
            {
              v92 = ~(v82 | (2 * v82) | (4 * (v82 | (2 * v82))));
              LODWORD(v92) = ((v92 >> 6) & 2 | (v92 >> 3) & 1 | (v92 >> 9) & 4 | (v92 >> 12) & 8 | (v92 >> 15) & 0x10 | (v92 >> 18) & 0x20 | (v92 >> 21) & 0x40 | (v92 >> 31 << 7) | (v92 >> 27) & 0x100 | (v92 >> 30) & 0x200 | (v92 >> 33) & 0x400 | (v92 >> 36) & 0x800 | (v92 >> 39) & 0x1000 | (v92 >> 42) & 0x2000 | (v92 >> 45) & 0x4000 | HIWORD(v92) & 0x8000) ^ 0xFFFF;
              *(_DWORD *)(a1 + 1524) |= v92;
              *(_DWORD *)(a1 + 1536) |= v92;
              *(_DWORD *)(v13 + 3904) = 0;
              v63 |= 0x8000000u;
              *(_DWORD *)(a1 + 1548) = v63;
            }
            goto LABEL_202;
          }
        }
        else
        {
          v91 = (v90 | v83) & 0x8888888888888888 | (((v90 | v83) & 0x8888888888888888) >> 1);
          if (((v90 ^ v83) & ~(v91 | (v91 >> 2))) != 0)
          {
            *(_BYTE *)(v9 + 2771) = 0;
            *(_DWORD *)(v13 + 3904) = 0;
            *(_DWORD *)(a1 + 1540) |= 0x60000000u;
            *(_QWORD *)(a1 + 14976) = -1;
            goto LABEL_200;
          }
          *(_QWORD *)(a1 + 14976) = v90 & v83;
        }
        if (!*(_BYTE *)(a1 + 14996))
          *(_BYTE *)(a1 + 14996) = 1;
        goto LABEL_200;
      }
    }
    else
    {
      v87 = (v84 | v83) & 0x8888888888888888 | (((v84 | v83) & 0x8888888888888888) >> 1);
      if (((v84 ^ v83) & ~(v87 | (v87 >> 2))) != 0)
      {
        *(_BYTE *)(v9 + 2771) = 0;
        *(_DWORD *)(v13 + 3904) = 0;
        *(_DWORD *)(a1 + 1540) |= 0x60000000u;
        v83 = -1;
      }
      else
      {
        v83 &= v84;
      }
      v79 = (v63 >> 13) & 1;
      if ((v63 & 0x100000) == 0)
        goto LABEL_191;
    }
    if ((*(_BYTE *)(v13 + 116) & 1) != 0)
    {
      v89 = *(_QWORD *)(a1 + 24768);
      if (!v89)
        v89 = *(_QWORD *)(*(_QWORD *)(a1 + 24776) + 40);
      v88 = (uint64_t *)(v89 + 752);
    }
    else
    {
      if (!*(_BYTE *)(v13 + 8))
      {
        v90 = -1;
        goto LABEL_188;
      }
      v88 = (uint64_t *)(*(_QWORD *)(a1 + 24400) + 488);
    }
    v90 = *v88;
LABEL_188:
    v82 |= *(_QWORD *)(a1 + 14960) ^ v90;
    *(_QWORD *)(a1 + 14960) = v90;
    goto LABEL_192;
  }
  if ((v63 & 0x2000) != 0 && (v78 = *(unsigned __int8 *)(a1 + 14996), *(_BYTE *)(a1 + 14996)))
  {
    LOBYTE(v79) = 0;
    LOBYTE(v80) = 0;
    v81 = (_QWORD *)(a1 + 14912);
    do
    {
      if (*v81 != -1)
        LOBYTE(v79) = 1;
      if (v81[6] != -1)
        LOBYTE(v80) = 1;
      ++v81;
      --v78;
    }
    while (v78);
  }
  else
  {
    LOBYTE(v80) = 0;
    LOBYTE(v79) = 0;
  }
LABEL_202:
  if ((v63 & 0x8000000) != 0)
  {
    v93 = *(unsigned __int8 *)(a1 + 14996);
    if (*(_BYTE *)(a1 + 14996))
    {
      v94 = 0;
      v95 = 0;
      v96 = *(_DWORD *)(a1 + 1524);
      v97 = (unsigned __int16)(v96 | *(_DWORD *)(a1 + 1536));
      v98 = a1 + 33176;
      v99 = a1 + 14896;
      while (!v97)
      {
LABEL_228:
        ++v95;
        v94 += 16;
        if (v95 == v93)
          goto LABEL_229;
      }
      v100 = *(_QWORD *)(v99 + 8 * v95 + 80);
      v101 = (_WORD *)(v99 + 2 * v95 + 96);
      v102 = 16 * v95;
      v103 = v97;
      while (1)
      {
        v104 = __clz(__rbit32(v103));
        v105 = 1 << v104;
        v106 = (v100 >> (4 * v104)) & 0xF;
        if (v106 >= 0xB)
        {
          v116 = *(unsigned __int8 *)(v9 + 2780);
          if (*(_BYTE *)(v9 + 2780))
          {
            v117 = (_QWORD *)(v98 + 8 * (v94 + v104));
            do
            {
              *v117 = 0;
              v117[90] = 0;
              v117 += 209;
              --v116;
            }
            while (v116);
          }
          *v101 &= ~(_WORD)v105;
          goto LABEL_227;
        }
        v107 = *(_QWORD *)(a1 + 20776 + 88 * (int)(v104 + v102) + 8 * v106);
        v108 = *(_QWORD *)(a1 + 23936 + 8 * (int)(v104 + v102));
        if (v108)
        {
          v109 = *(unsigned __int8 *)(v9 + 2780);
          if (*(_BYTE *)(v9 + 2780))
          {
            v110 = (uint64_t *)(v107 + 40);
            v111 = (uint64_t *)(v108 + 40);
            v112 = (_QWORD *)(v98 + 8 * (v94 + v104));
            do
            {
              v113 = *v110++;
              *v112 = v113;
              v114 = *v111++;
              v112[90] = v114;
              v112 += 209;
              --v109;
            }
            while (v109);
          }
          v115 = (unsigned __int8 *)(v108 + 232);
        }
        else
        {
          v118 = *(unsigned __int8 *)(v9 + 2780);
          if (*(_BYTE *)(v9 + 2780))
          {
            v119 = (_QWORD *)(v98 + 8 * (v94 + v104));
            v120 = v107;
            do
            {
              *v119 = *(_QWORD *)(v120 + 40);
              v119[90] = *(_QWORD *)(v120 + 424);
              v120 += 8;
              v119 += 209;
              --v118;
            }
            while (v118);
          }
          v115 = (unsigned __int8 *)(v107 + 597);
        }
        v121 = *v115;
        v122 = *(unsigned __int8 *)(v107 + 596);
        v123 = (unsigned __int16)*v101;
        v124 = v105 & v123;
        if ((v121 & ~v122) != 0)
        {
          if (v124)
          {
            v125 = v123 & ~(_WORD)v105;
LABEL_226:
            *v101 = v125;
            *(_DWORD *)(v13 + 3904) = 0;
            v96 |= v105;
            *(_DWORD *)(a1 + 1524) = v96;
          }
        }
        else if (!v124)
        {
          v125 = v123 | v105;
          goto LABEL_226;
        }
LABEL_227:
        v103 ^= v105;
        if (!v103)
          goto LABEL_228;
      }
    }
  }
LABEL_229:
  if ((v63 & 0x200) == 0)
  {
    if ((_BYTE)v80)
    {
      *(_QWORD *)(a1 + 24200) = gleSetVPTransformFuncAll;
      *(_QWORD *)(a1 + 24208) = gleSetVPTransformFuncAll;
    }
    goto LABEL_236;
  }
  if (*(_QWORD *)(a1 + 24480) || *(_BYTE *)(v13 + 8) || (v126 = *(_DWORD *)(v13 + 116), (v126 & 1) != 0) || (_BYTE)v80)
  {
    *(_QWORD *)(a1 + 24200) = gleSetVPTransformFuncAll;
    *(_QWORD *)(a1 + 24208) = gleSetVPTransformFuncAll;
    v126 = *(_DWORD *)(v13 + 116);
  }
  if ((v126 & 8) == 0)
  {
LABEL_236:
    if (!(_BYTE)v79)
      goto LABEL_238;
  }
  *(_QWORD *)(a1 + 24352) = gleSetGPTransformFuncAll;
  *(_QWORD *)(a1 + 24360) = gleSetGPTransformFuncAll;
LABEL_238:
  v127 = *(_DWORD *)(a1 + 1540);
  if ((a5 & v127 & 0x8000000) != 0)
  {
    if (*(_QWORD *)(a1 + 26384))
    {
      v127 &= ~0x8000000u;
      *(_DWORD *)(a1 + 1540) = v127;
    }
    else
    {
      v169 = 1282;
    }
  }
  v128 = v127 & 0xFFFFFE;
  if ((v127 & 0xFFFFFE) != 0)
  {
    v129 = 0;
    v130 = v128 >> 1;
    v131 = *(_DWORD *)(a1 + 2216) & v128;
    do
    {
      if ((v130 & 1) != 0)
      {
        v132 = *(_QWORD *)(a1 + 19248);
        if (v132)
        {
          v133 = v132 + 8 * v129;
          v134 = *(_QWORD *)(v133 + 2848);
          if (v134 != 0x400040004000400)
          {
            *(_DWORD *)(v13 + 3904) = 0;
            *(_DWORD *)(a1 + 1532) |= 0x800000u;
            if ((unsigned __int16)v134 != 1024)
              *(_DWORD *)(a1 + 4 * ((unsigned __int16)v134 >> 5) + 1552) |= 1 << v134;
            if ((v134 & 0xFFFF0000) != 0x4000000)
              *(_DWORD *)(a1 + 4 * (v134 >> 21) + 1552) |= 1 << SBYTE2(v134);
            if ((v134 & 0xFFFF00000000) != 0x40000000000)
              *(_DWORD *)(a1 + 4 * ((v134 >> 37) & 0x7FF) + 1552) |= 1 << SBYTE4(v134);
            if (HIWORD(v134) != 1024)
              *(_DWORD *)(a1 + 4 * (v134 >> 53) + 1552) |= 1 << SBYTE6(v134);
          }
          v135 = *(_QWORD *)(v133 + 3232);
          if (v135 != 0x400040004000400)
          {
            *(_DWORD *)(v13 + 3904) = 0;
            *(_DWORD *)(a1 + 1532) |= 0x800000u;
            if ((unsigned __int16)v135 != 1024)
              *(_DWORD *)(a1 + 4 * ((unsigned __int16)v135 >> 5) + 1552) |= 1 << v135;
            if ((v135 & 0xFFFF0000) != 0x4000000)
              *(_DWORD *)(a1 + 4 * (v135 >> 21) + 1552) |= 1 << SBYTE2(v135);
            if ((v135 & 0xFFFF00000000) != 0x40000000000)
              *(_DWORD *)(a1 + 4 * ((v135 >> 37) & 0x7FF) + 1552) |= 1 << SBYTE4(v135);
            if (HIWORD(v135) != 1024)
              *(_DWORD *)(a1 + 4 * (v135 >> 53) + 1552) |= 1 << SBYTE6(v135);
          }
        }
        v136 = *(_QWORD *)(a1 + 19272);
        if (v136)
        {
          v137 = v136 + 8 * v129;
          v138 = *(_QWORD *)(v137 + 2848);
          if (v138 != 0x400040004000400)
          {
            *(_DWORD *)(v13 + 3904) = 0;
            *(_DWORD *)(a1 + 1532) |= 0x4000000u;
            if ((unsigned __int16)v138 != 1024)
              *(_DWORD *)(a1 + 4 * ((unsigned __int16)v138 >> 5) + 1936) |= 1 << v138;
            if ((v138 & 0xFFFF0000) != 0x4000000)
              *(_DWORD *)(a1 + 4 * (v138 >> 21) + 1936) |= 1 << SBYTE2(v138);
            if ((v138 & 0xFFFF00000000) != 0x40000000000)
              *(_DWORD *)(a1 + 4 * ((v138 >> 37) & 0x7FF) + 1936) |= 1 << SBYTE4(v138);
            if (HIWORD(v138) != 1024)
              *(_DWORD *)(a1 + 4 * (v138 >> 53) + 1936) |= 1 << SBYTE6(v138);
          }
          v139 = *(_QWORD *)(v137 + 3232);
          if (v139 != 0x400040004000400)
          {
            *(_DWORD *)(v13 + 3904) = 0;
            *(_DWORD *)(a1 + 1532) |= 0x4000000u;
            if ((unsigned __int16)v139 != 1024)
              *(_DWORD *)(a1 + 4 * ((unsigned __int16)v139 >> 5) + 1936) |= 1 << v139;
            if ((v139 & 0xFFFF0000) != 0x4000000)
              *(_DWORD *)(a1 + 4 * (v139 >> 21) + 1936) |= 1 << SBYTE2(v139);
            if ((v139 & 0xFFFF00000000) != 0x40000000000)
              *(_DWORD *)(a1 + 4 * ((v139 >> 37) & 0x7FF) + 1936) |= 1 << SBYTE4(v139);
            if (HIWORD(v139) != 1024)
              *(_DWORD *)(a1 + 4 * (v139 >> 53) + 1936) |= 1 << SBYTE6(v139);
          }
        }
        v140 = *(_QWORD *)(a1 + 19280);
        if (v140)
        {
          v141 = v140 + 8 * v129;
          v142 = *(_QWORD *)(v141 + 2848);
          if (v142 != 0x400040004000400)
          {
            *(_DWORD *)(v13 + 3904) = 0;
            *(_DWORD *)(a1 + 1532) |= 0x8000000u;
            if ((unsigned __int16)v142 != 1024)
              *(_DWORD *)(a1 + 4 * ((unsigned __int16)v142 >> 5) + 2064) |= 1 << v142;
            if ((v142 & 0xFFFF0000) != 0x4000000)
              *(_DWORD *)(a1 + 4 * (v142 >> 21) + 2064) |= 1 << SBYTE2(v142);
            if ((v142 & 0xFFFF00000000) != 0x40000000000)
              *(_DWORD *)(a1 + 4 * ((v142 >> 37) & 0x7FF) + 2064) |= 1 << SBYTE4(v142);
            if (HIWORD(v142) != 1024)
              *(_DWORD *)(a1 + 4 * (v142 >> 53) + 2064) |= 1 << SBYTE6(v142);
          }
          v143 = *(_QWORD *)(v141 + 3232);
          if (v143 != 0x400040004000400)
          {
            *(_DWORD *)(v13 + 3904) = 0;
            *(_DWORD *)(a1 + 1532) |= 0x8000000u;
            if ((unsigned __int16)v143 != 1024)
              *(_DWORD *)(a1 + 4 * ((unsigned __int16)v143 >> 5) + 2064) |= 1 << v143;
            if ((v143 & 0xFFFF0000) != 0x4000000)
              *(_DWORD *)(a1 + 4 * (v143 >> 21) + 2064) |= 1 << SBYTE2(v143);
            if ((v143 & 0xFFFF00000000) != 0x40000000000)
              *(_DWORD *)(a1 + 4 * ((v143 >> 37) & 0x7FF) + 2064) |= 1 << SBYTE4(v143);
            if (HIWORD(v143) != 1024)
              *(_DWORD *)(a1 + 4 * (v143 >> 53) + 2064) |= 1 << SBYTE6(v143);
          }
        }
        if ((v131 & (1 << (v129 + 1))) != 0)
        {
          if (v132)
          {
            v144 = v132 + 8 * v129;
            v145 = *(_QWORD *)(v144 + 3040);
            if (v145 != 0x400040004000400)
            {
              *(_DWORD *)(v13 + 3904) = 0;
              *(_DWORD *)(a1 + 1532) |= 0x800000u;
              if ((unsigned __int16)v145 != 1024)
                *(_DWORD *)(a1 + 4 * ((unsigned __int16)v145 >> 5) + 1552) |= 1 << v145;
              if ((v145 & 0xFFFF0000) != 0x4000000)
                *(_DWORD *)(a1 + 4 * (v145 >> 21) + 1552) |= 1 << SBYTE2(v145);
              if ((v145 & 0xFFFF00000000) != 0x40000000000)
                *(_DWORD *)(a1 + 4 * ((v145 >> 37) & 0x7FF) + 1552) |= 1 << SBYTE4(v145);
              if (HIWORD(v145) != 1024)
                *(_DWORD *)(a1 + 4 * (v145 >> 53) + 1552) |= 1 << SBYTE6(v145);
            }
            v146 = *(_QWORD *)(v144 + 3424);
            if (v146 != 0x400040004000400)
            {
              *(_DWORD *)(v13 + 3904) = 0;
              *(_DWORD *)(a1 + 1532) |= 0x800000u;
              if ((unsigned __int16)v146 != 1024)
                *(_DWORD *)(a1 + 4 * ((unsigned __int16)v146 >> 5) + 1552) |= 1 << v146;
              if ((v146 & 0xFFFF0000) != 0x4000000)
                *(_DWORD *)(a1 + 4 * (v146 >> 21) + 1552) |= 1 << SBYTE2(v146);
              if ((v146 & 0xFFFF00000000) != 0x40000000000)
                *(_DWORD *)(a1 + 4 * ((v146 >> 37) & 0x7FF) + 1552) |= 1 << SBYTE4(v146);
              if (HIWORD(v146) != 1024)
                *(_DWORD *)(a1 + 4 * (v146 >> 53) + 1552) |= 1 << SBYTE6(v146);
            }
          }
          if (v136)
          {
            v147 = v136 + 8 * v129;
            v148 = *(_QWORD *)(v147 + 3040);
            if (v148 != 0x400040004000400)
            {
              *(_DWORD *)(v13 + 3904) = 0;
              *(_DWORD *)(a1 + 1532) |= 0x4000000u;
              if ((unsigned __int16)v148 != 1024)
                *(_DWORD *)(a1 + 4 * ((unsigned __int16)v148 >> 5) + 1936) |= 1 << v148;
              if ((v148 & 0xFFFF0000) != 0x4000000)
                *(_DWORD *)(a1 + 4 * (v148 >> 21) + 1936) |= 1 << SBYTE2(v148);
              if ((v148 & 0xFFFF00000000) != 0x40000000000)
                *(_DWORD *)(a1 + 4 * ((v148 >> 37) & 0x7FF) + 1936) |= 1 << SBYTE4(v148);
              if (HIWORD(v148) != 1024)
                *(_DWORD *)(a1 + 4 * (v148 >> 53) + 1936) |= 1 << SBYTE6(v148);
            }
            v149 = *(_QWORD *)(v147 + 3424);
            if (v149 != 0x400040004000400)
            {
              *(_DWORD *)(v13 + 3904) = 0;
              *(_DWORD *)(a1 + 1532) |= 0x4000000u;
              if ((unsigned __int16)v149 != 1024)
                *(_DWORD *)(a1 + 4 * ((unsigned __int16)v149 >> 5) + 1936) |= 1 << v149;
              if ((v149 & 0xFFFF0000) != 0x4000000)
                *(_DWORD *)(a1 + 4 * (v149 >> 21) + 1936) |= 1 << SBYTE2(v149);
              if ((v149 & 0xFFFF00000000) != 0x40000000000)
                *(_DWORD *)(a1 + 4 * ((v149 >> 37) & 0x7FF) + 1936) |= 1 << SBYTE4(v149);
              if (HIWORD(v149) != 1024)
                *(_DWORD *)(a1 + 4 * (v149 >> 53) + 1936) |= 1 << SBYTE6(v149);
            }
          }
          if (v140)
          {
            v150 = v140 + 8 * v129;
            v151 = *(_QWORD *)(v150 + 3040);
            if (v151 != 0x400040004000400)
            {
              *(_DWORD *)(v13 + 3904) = 0;
              *(_DWORD *)(a1 + 1532) |= 0x8000000u;
              if ((unsigned __int16)v151 != 1024)
                *(_DWORD *)(a1 + 4 * ((unsigned __int16)v151 >> 5) + 2064) |= 1 << v151;
              if ((v151 & 0xFFFF0000) != 0x4000000)
                *(_DWORD *)(a1 + 4 * (v151 >> 21) + 2064) |= 1 << SBYTE2(v151);
              if ((v151 & 0xFFFF00000000) != 0x40000000000)
                *(_DWORD *)(a1 + 4 * ((v151 >> 37) & 0x7FF) + 2064) |= 1 << SBYTE4(v151);
              if (HIWORD(v151) != 1024)
                *(_DWORD *)(a1 + 4 * (v151 >> 53) + 2064) |= 1 << SBYTE6(v151);
            }
            v152 = *(_QWORD *)(v150 + 3424);
            if (v152 != 0x400040004000400)
            {
              *(_DWORD *)(v13 + 3904) = 0;
              *(_DWORD *)(a1 + 1532) |= 0x8000000u;
              if ((unsigned __int16)v152 != 1024)
                *(_DWORD *)(a1 + 4 * ((unsigned __int16)v152 >> 5) + 2064) |= 1 << v152;
              if ((v152 & 0xFFFF0000) != 0x4000000)
                *(_DWORD *)(a1 + 4 * (v152 >> 21) + 2064) |= 1 << SBYTE2(v152);
              if ((v152 & 0xFFFF00000000) != 0x40000000000)
                *(_DWORD *)(a1 + 4 * ((v152 >> 37) & 0x7FF) + 2064) |= 1 << SBYTE4(v152);
              if (HIWORD(v152) != 1024)
                *(_DWORD *)(a1 + 4 * (v152 >> 53) + 2064) |= 1 << SBYTE6(v152);
            }
          }
        }
      }
      v130 = v128 >> (v129++ + 2);
    }
    while (v130);
  }
  if ((a5 & v127 & 0x60000000) == 0)
  {
LABEL_376:
    if ((v127 & 0x80000000) == 0)
      goto LABEL_396;
    goto LABEL_389;
  }
  if (!*(_BYTE *)(v9 + 2768) && !*(_BYTE *)(v9 + 2786) || !*(_BYTE *)(v9 + 2771))
  {
    v169 = 1282;
    goto LABEL_376;
  }
  v153 = *(_DWORD *)(v13 + 116);
  if ((v153 & 1) != 0 || !*(_BYTE *)(v13 + 8) || *(_QWORD *)(*(_QWORD *)(a1 + 24400) + 472))
  {
    v127 &= ~0x40000000u;
    *(_DWORD *)(a1 + 1540) = v127;
    if ((v153 & 0x10) != 0)
      goto LABEL_388;
  }
  else
  {
    v156 = v169;
    if ((a5 & 0x40000000) != 0)
      v156 = 1282;
    v169 = v156;
    if ((v153 & 0x10) != 0)
    {
LABEL_388:
      v127 &= ~0x20000000u;
      *(_DWORD *)(a1 + 1540) = v127;
      if ((v127 & 0x80000000) == 0)
        goto LABEL_396;
      goto LABEL_389;
    }
  }
  if (!*(_BYTE *)(v13 + 12) || *(_QWORD *)(*(_QWORD *)(a1 + 24432) + 472))
    goto LABEL_388;
  v154 = v169;
  if ((a5 & 0x20000000) != 0)
    v154 = 1282;
  v169 = v154;
  if (v127 < 0)
  {
LABEL_389:
    v157 = *(_QWORD *)(a1 + 28960);
    if (v157 && (*(_BYTE *)(v157 + 479) & 2) != 0 && (*(_BYTE *)(v13 + 116) & 0x10) == 0)
    {
      v158 = v169;
      if (a5 < 0)
        v158 = 1282;
      v169 = v158;
    }
    else
    {
      v127 &= ~0x80000000;
    }
  }
LABEL_396:
  *(_DWORD *)(a1 + 1540) = v127 & 0xFC000000;
  v159 = *(int8x8_t *)(a1 + 1544);
  *(int8x8_t *)(a1 + 1544) = vand_s8(v159, (int8x8_t)0x70070000C3FFFFFFLL);
  if (!v169)
  {
    if (a2)
    {
      v160 = v159.i32[0];
      if ((unsigned __int32)v159.i32[0] >> 30)
      {
        if (v159.i32[0] < 0)
        {
          v162 = vandq_s8(*(int8x16_t *)(a1 + 1520), *(int8x16_t *)(a1 + 2224));
          *(int8x8_t *)v162.i8 = vorr_s8(*(int8x8_t *)v162.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v162, v162, 8uLL));
          if (v162.i32[0] | *(_DWORD *)(a1 + 1536) & *(_DWORD *)(a1 + 2240) | v162.i32[1])
          {
            gleFallbackAttemptToEnd(a1, a2, a3, a4, a5);
            if ((*(_DWORD *)(a1 + 1544) & 0x80000000) == 0)
              gleUpdateDeferredState(a1, a2, a3, a4, a5);
          }
          *(_BYTE *)(v9 + 2774) = 0;
        }
        else
        {
          if (*(_BYTE *)(v9 + 2774))
          {
            *(_BYTE *)(v9 + 2774) = 0;
            if (!*(_BYTE *)(*(_QWORD *)(a1 + 29032) + 101))
              *(_DWORD *)(a1 + 1544) = v159.i32[0] & 0x83FFFFFF;
            v161 = 1;
          }
          else
          {
            v163 = vandq_s8(*(int8x16_t *)(a1 + 1520), *(int8x16_t *)(a1 + 2224));
            *(int8x8_t *)v163.i8 = vorr_s8(*(int8x8_t *)v163.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v163, v163, 8uLL));
            if (v163.i32[0] | *(_DWORD *)(a1 + 1536) & *(_DWORD *)(a1 + 2240) | v163.i32[1])
            {
              v161 = *(_BYTE *)(*(_QWORD *)(a1 + 29032) + 101) == 0;
              *(_DWORD *)(a1 + 1544) = v160 & 0x83FFFFFF;
            }
            else
            {
              v161 = *(unsigned __int16 *)(a1 + 2276);
            }
          }
          if (*(unsigned __int16 *)(v9 + 118) != v161 || *(unsigned __int16 *)(a1 + 2276) != v161)
          {
            *(_WORD *)(v9 + 118) = v161;
            *(_WORD *)(a1 + 2276) = v161;
            *(_DWORD *)(v13 + 3904) = 0;
            *(_DWORD *)(a1 + 1532) |= 0x80000000;
          }
        }
      }
    }
  }
  if (*(_BYTE *)(v9 + 2787))
    *(_QWORD *)(a1 + 19192) += mach_absolute_time() - v167;
  return v169;
}

uint64_t gleUpdateDeferredStateGL3(int8x16_t *a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  unsigned __int8 *v6;
  __int8 *v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;
  __int32 v17;
  int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int8 *v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  char v33;
  int v34;
  int8x16_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  int8x16_t *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  __int32 v52;
  unsigned int v53;
  __int8 *v54;
  int8x16_t *v55;
  unint64_t v56;
  __int16 *v57;
  int v58;
  unsigned int v59;
  unsigned int v60;
  int v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  unsigned __int8 *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  int v77;
  int v78;
  int v79;
  __int16 v80;
  uint64_t v81;
  int v82;
  __int32 v83;
  int v84;
  int v85;
  uint64_t v86;
  int v87;
  unsigned __int32 v88;
  int v89;
  int8x16_t v90;
  int8x16_t v91;
  int v92;
  uint64_t v96;
  unsigned int v98;
  unsigned int v99;

  v98 = a5;
  v6 = &a1[2030].u8[4];
  v7 = &a1[1547].i8[4];
  if (a1[2031].i8[7])
  {
    v8 = mach_absolute_time();
    a5 = v98;
    v96 = v8;
  }
  else
  {
    v96 = 0;
  }
  v9 = a1[96].i32[1];
  if ((a5 & v9 & 0x10000000) != 0)
  {
    gleUpdateCurrentProgramState((uint64_t)a1);
    a1[95].i32[3] |= 0x10000000u;
    v10 = a1[96].i32[1] & 0xEFFFFFFF;
    v11 = *v6;
    *((_DWORD *)v7 + 974) = 0;
    if (v11)
      v12 = 0x80000000;
    else
      v12 = 1610612736;
    v9 = v10 | v12;
    a1[96].i32[1] = v9;
  }
  v13 = a1[96].u32[3];
  if (v13 & 0x80000 | v9 & 0x4000000)
  {
    if (*((_DWORD *)v7 + 1264)
      && ((v14 = a1[1810].i64[0]) != 0 ? (v15 = (unsigned __int8 *)(v14 + 552)) : (v15 = (unsigned __int8 *)(v7 + 5052)),
          *v15 >> *(_BYTE *)(a1[1814].i64[1] + 507)))
    {
      *((_DWORD *)v7 + 974) = 0;
      v16 = v9 | 0x4000000;
      v99 = 1282;
    }
    else
    {
      v99 = 0;
      v16 = v9 & 0xFBFFFFFF;
    }
    a1[96].i32[1] = v16;
  }
  else
  {
    v99 = 0;
  }
  v17 = a1[138].i32[3];
  v18 = v17 & v13;
  if ((v17 & v13 & 0x1020000) != 0)
  {
    if ((v7[108] & 0x10) != 0)
    {
      v22 = a1[1548].i64[0];
      if (!v22)
        v22 = *(_QWORD *)(a1[1548].i64[1] + 72);
      v20 = (uint64_t *)(v22 + 3528);
      v21 = (uint64_t *)(v22 + 3536);
    }
    else if (v7[4])
    {
      v19 = a1[1527].i64[0];
      v20 = (uint64_t *)(v19 + 152);
      v21 = (uint64_t *)(v19 + 160);
    }
    else
    {
      v23 = a1[1532].i64[0];
      v20 = (uint64_t *)(v23 + 112);
      v21 = (uint64_t *)(v23 + 120);
    }
    v24 = *v21;
    v25 = *v20;
    v26 = (a1[1201].i32[0] ^ v25) & 0x8C0;
    v27 = a1[1201].i64[1];
    a1[1201].i64[1] = v24;
    a1[1201].i64[0] = v25;
    if (v27 != v24 || v26 != 0)
    {
      *((_DWORD *)v7 + 974) = 0;
      v13 |= 0x400u;
      a1[96].i32[3] = v13;
      v18 = v17 & v13;
    }
  }
  if ((v18 & 0x40000) != 0)
  {
    gleUpdateRasterStateProgram((uint64_t)a1);
    v13 = a1[96].i32[3] & 0xFFFBFFFF;
    a1[96].i32[3] = v13;
  }
  if ((v18 & 0x70000000) != 0)
  {
    if ((v18 & 0x40000000) != 0)
    {
      gleUpdateFragmentFallbackProgram((uint64_t)a1, 3u);
      v13 = a1[96].i32[3] & 0xBFFFFFFF;
      a1[96].i32[3] = v13;
      if ((v18 & 0x20000000) == 0)
      {
LABEL_37:
        if ((v18 & 0x10000000) == 0)
          goto LABEL_39;
        goto LABEL_38;
      }
    }
    else if ((v18 & 0x20000000) == 0)
    {
      goto LABEL_37;
    }
    gleUpdateVertexFallbackProgram((uint64_t)a1, 1u);
    v13 = a1[96].i32[3] & 0xDFFFFFFF;
    a1[96].i32[3] = v13;
    if ((v18 & 0x10000000) != 0)
    {
LABEL_38:
      gleUpdateVertexFallbackProgram((uint64_t)a1, 0);
      v13 = a1[96].i32[3] & 0xEFFFFFFF;
      a1[96].i32[3] = v13;
    }
  }
LABEL_39:
  if ((v13 & 2) != 0)
  {
    gleSelectVertexSubmitFunc((uint64_t)a1);
    v13 = a1[96].u32[3];
  }
  if ((v13 & 0x8000) != 0)
  {
    gleSelectPrimitiveFunc((uint64_t)a1);
    v13 = a1[96].u32[3];
  }
  v29 = &a1[937].i8[4];
  if ((v13 & 0x400) != 0)
  {
    a1[1742].i64[1] = (uint64_t)gleSetEyeInterpFunc;
    a1[1743].i64[0] = (uint64_t)gleSetEyeInterpFunc;
    a1[1743].i64[1] = (uint64_t)gleSetClipInterpFunc;
    a1[1744].i64[0] = (uint64_t)gleSetClipInterpFunc;
    a1[1744].i64[1] = (uint64_t)gleSetFlatCopyFunc;
    a1[1745].i64[0] = (uint64_t)gleSetFlatCopyFunc;
  }
  if ((v13 & 0x1F00080) != 0)
  {
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v34 = 1;
    v6[3] = 1;
    v35 = a1 + 936;
    while (1)
    {
      if (!v34)
        goto LABEL_107;
      if ((v13 & 0x1000080) != 0)
      {
        if ((v7[108] & 0x10) != 0)
        {
          v39 = a1[1548].i64[0];
          if (!v39)
            v39 = *(_QWORD *)(a1[1548].i64[1] + 72);
          v36 = *(_QWORD *)(v39 + 8 * v31 + 3568);
        }
        else
        {
          v36 = -1;
        }
        v37 = v35[-5].i64[v30] ^ v36;
        v35[-5].i64[v30] = v36;
        if ((v13 & 0x800000) == 0)
        {
LABEL_58:
          v38 = v35[-4].i64[v30];
          goto LABEL_63;
        }
      }
      else
      {
        v37 = 0;
        v36 = v35[-5].i64[v30];
        if ((v13 & 0x800000) == 0)
          goto LABEL_58;
      }
      if ((v7[108] & 8) != 0)
      {
        v40 = a1[1548].i64[0];
        if (!v40)
          v40 = *(_QWORD *)(a1[1548].i64[1] + 64);
        v38 = *(_QWORD *)(v40 + 8 * v31 + 2864);
      }
      else
      {
        v38 = -1;
      }
      v37 |= v35[-4].i64[v30] ^ v38;
      v35[-4].i64[v30] = v38;
LABEL_63:
      if (v38 == -1)
        goto LABEL_68;
      if ((v13 & 0x2000) != 0)
        v32 = 1;
      v41 = (v38 | v36) & 0x8888888888888888 | (((v38 | v36) & 0x8888888888888888) >> 1);
      if (((v38 ^ v36) & ~(v41 | (v41 >> 2))) != 0)
      {
        v34 = 0;
        v6[3] = 0;
        *((_DWORD *)v7 + 974) = 0;
        a1[96].i32[1] |= 0x60000000u;
        v36 = -1;
LABEL_68:
        if ((v13 & 0x100000) == 0)
          goto LABEL_69;
        goto LABEL_71;
      }
      v36 &= v38;
      if ((v13 & 0x100000) == 0)
      {
LABEL_69:
        v42 = v35[-1].i64[v30];
        goto LABEL_79;
      }
LABEL_71:
      if ((v7[108] & 1) != 0)
      {
        v44 = a1[1548].i64[0];
        if (!v44)
          v44 = *(_QWORD *)(a1[1548].i64[1] + 40);
        v43 = (uint64_t *)(v44 + v30 * 8 + 752);
      }
      else
      {
        if (!*v7)
        {
          v42 = -1;
          goto LABEL_78;
        }
        v43 = (uint64_t *)(a1[1525].i64[0] + 8 * v31 + 488);
      }
      v42 = *v43;
LABEL_78:
      v37 |= v35[-1].i64[v30] ^ v42;
      v35[-1].i64[v30] = v42;
LABEL_79:
      if (v42 == -1)
      {
        v35->i64[v30] = v36;
        if (v36 != -1)
          goto LABEL_87;
      }
      else
      {
        if ((v13 & 0x2000) != 0)
          v33 = 1;
        v45 = (v42 | v36) & 0x8888888888888888 | (((v42 | v36) & 0x8888888888888888) >> 1);
        if (((v42 ^ v36) & ~(v45 | (v45 >> 2))) == 0)
        {
          v35->i64[v30] = v42 & v36;
LABEL_87:
          if (v31 >= *v29)
            *v29 = v31 + 1;
          goto LABEL_89;
        }
        v34 = 0;
        v6[3] = 0;
        *((_DWORD *)v7 + 974) = 0;
        a1[96].i32[1] |= 0x60000000u;
        v35->i64[v30] = -1;
      }
LABEL_89:
      if (v37)
      {
        v46 = ~(v37 | (2 * v37) | (4 * (v37 | (2 * v37))));
        LODWORD(v46) = ((v46 >> 6) & 2 | (v46 >> 3) & 1 | (v46 >> 9) & 4 | (v46 >> 12) & 8 | (v46 >> 15) & 0x10 | (v46 >> 18) & 0x20 | (v46 >> 21) & 0x40 | (v46 >> 31 << 7) | (v46 >> 27) & 0x100 | (v46 >> 30) & 0x200 | (v46 >> 33) & 0x400 | (v46 >> 36) & 0x800 | (v46 >> 39) & 0x1000 | (v46 >> 42) & 0x2000 | (v46 >> 45) & 0x4000 | HIWORD(v46) & 0x8000) ^ 0xFFFF;
        a1[95].i32[1] |= v46;
        a1[96].i32[0] |= v46;
        *((_DWORD *)v7 + 974) = 0;
        v13 |= 0x8000000u;
        a1[96].i32[3] = v13;
      }
      ++v31;
      ++v30;
      if (v31 == 2)
        goto LABEL_107;
    }
  }
  if ((v13 & 0x2000) != 0 && (v47 = *v29, *v29))
  {
    v32 = 0;
    v33 = 0;
    v48 = a1 + 932;
    do
    {
      if (v48->i64[0] != -1)
        v32 = 1;
      if (v48[3].i64[0] != -1)
        v33 = 1;
      v48 = (int8x16_t *)((char *)v48 + 8);
      --v47;
    }
    while (v47);
  }
  else
  {
    v33 = 0;
    v32 = 0;
  }
LABEL_107:
  if ((v13 & 0x8000000) != 0)
  {
    v49 = *v29;
    if (v49)
    {
      v50 = 0;
      v51 = 0;
      v52 = a1[95].i32[1];
      v53 = (unsigned __int16)(v52 | a1[96].i32[0]);
      v54 = &a1[2073].i8[8];
      v55 = a1 + 931;
      while (!v53)
      {
LABEL_133:
        ++v51;
        v50 += 16;
        if (v51 == v49)
          goto LABEL_134;
      }
      v56 = v55[5].u64[v51];
      v57 = &v55[6].i16[v51];
      v58 = 16 * v51;
      v59 = v53;
      while (1)
      {
        v60 = __clz(__rbit32(v59));
        v61 = 1 << v60;
        v62 = (v56 >> (4 * v60)) & 0xF;
        if (v62 >= 0xB)
        {
          v72 = v6[12];
          if (v6[12])
          {
            v73 = &v54[8 * v50 + 8 * v60];
            do
            {
              *(_QWORD *)v73 = 0;
              *((_QWORD *)v73 + 90) = 0;
              v73 += 1672;
              --v72;
            }
            while (v72);
          }
          *v57 &= ~(_WORD)v61;
          goto LABEL_132;
        }
        v63 = a1[1298].i64[11 * (int)(v60 + v58) + 1 + v62];
        v64 = a1[1496].i64[v60 + v58];
        if (v64)
        {
          v65 = v6[12];
          if (v6[12])
          {
            v66 = (uint64_t *)(v63 + 40);
            v67 = (uint64_t *)(v64 + 40);
            v68 = &v54[8 * v50 + 8 * v60];
            do
            {
              v69 = *v66++;
              *(_QWORD *)v68 = v69;
              v70 = *v67++;
              *((_QWORD *)v68 + 90) = v70;
              v68 += 1672;
              --v65;
            }
            while (v65);
          }
          v71 = (unsigned __int8 *)(v64 + 232);
        }
        else
        {
          v74 = v6[12];
          if (v6[12])
          {
            v75 = &v54[8 * v50 + 8 * v60];
            v76 = v63;
            do
            {
              *(_QWORD *)v75 = *(_QWORD *)(v76 + 40);
              *((_QWORD *)v75 + 90) = *(_QWORD *)(v76 + 424);
              v76 += 8;
              v75 += 1672;
              --v74;
            }
            while (v74);
          }
          v71 = (unsigned __int8 *)(v63 + 597);
        }
        v77 = *v71;
        v78 = (unsigned __int16)*v57;
        v79 = v61 & v78;
        if ((v77 & ~*(unsigned __int8 *)(v63 + 596)) != 0)
        {
          if (v79)
          {
            v80 = v78 & ~(_WORD)v61;
LABEL_131:
            *v57 = v80;
            *((_DWORD *)v7 + 974) = 0;
            v52 |= v61;
            a1[95].i32[1] = v52;
          }
        }
        else if (!v79)
        {
          v80 = v78 | v61;
          goto LABEL_131;
        }
LABEL_132:
        v59 ^= v61;
        if (!v59)
          goto LABEL_133;
      }
    }
  }
LABEL_134:
  if ((v13 & 0x200) == 0)
  {
    v81 = v98;
    if (v33)
    {
      a1[1512].i64[1] = (uint64_t)gleSetVPTransformFuncAll;
      a1[1513].i64[0] = (uint64_t)gleSetVPTransformFuncAll;
    }
    goto LABEL_141;
  }
  v81 = v98;
  if (a1[1530].i64[0] || *v7 || (v82 = *((_DWORD *)v7 + 27), (v82 & 1) != 0) || v33)
  {
    a1[1512].i64[1] = (uint64_t)gleSetVPTransformFuncAll;
    a1[1513].i64[0] = (uint64_t)gleSetVPTransformFuncAll;
    v82 = *((_DWORD *)v7 + 27);
  }
  if ((v82 & 8) == 0)
  {
LABEL_141:
    if (!v32)
      goto LABEL_143;
  }
  a1[1522].i64[0] = (uint64_t)gleSetGPTransformFuncAll;
  a1[1522].i64[1] = (uint64_t)gleSetGPTransformFuncAll;
LABEL_143:
  v83 = a1[96].i32[1];
  if ((v81 & v83 & 0x8000000) != 0)
  {
    if (a1[1649].i64[0])
    {
      v83 &= ~0x8000000u;
      a1[96].i32[1] = v83;
    }
    else
    {
      v99 = 1282;
    }
  }
  if ((v81 & v83 & 0x60000000) == 0)
  {
LABEL_161:
    if ((v83 & 0x80000000) == 0)
      goto LABEL_169;
    goto LABEL_162;
  }
  if (!*v6 && !v6[18] || !v6[3])
  {
    v99 = 1282;
    if ((v83 & 0x80000000) == 0)
      goto LABEL_169;
    goto LABEL_162;
  }
  v84 = *((_DWORD *)v7 + 27);
  if ((v84 & 1) != 0)
  {
    v83 &= ~0x40000000u;
    a1[96].i32[1] = v83;
    if ((v84 & 0x10) != 0)
    {
LABEL_160:
      v83 &= ~0x20000000u;
      a1[96].i32[1] = v83;
      goto LABEL_161;
    }
  }
  else
  {
    v85 = v99;
    if ((v81 & 0x40000000) != 0)
      v85 = 1282;
    v99 = v85;
    if ((v84 & 0x10) != 0)
      goto LABEL_160;
  }
  if (a1[1124].i8[0])
    goto LABEL_160;
  v92 = v99;
  if ((v81 & 0x20000000) != 0)
    v92 = 1282;
  v99 = v92;
  if (v83 < 0)
  {
LABEL_162:
    v86 = a1[1810].i64[0];
    if (v86 && (*(_BYTE *)(v86 + 479) & 2) != 0 && (v7[108] & 0x10) == 0)
    {
      v87 = v99;
      if ((int)v81 < 0)
        v87 = 1282;
      v99 = v87;
    }
    else
    {
      v83 &= ~0x80000000;
    }
  }
LABEL_169:
  a1[96].i32[1] = v83 & 0xFC000000;
  v88 = a1[96].u32[2];
  a1[96].i32[2] = v88 & 0xC3FFFFFF;
  a1[96].i32[3] = v13 & 0x70070000;
  if (!v99 && a2 && v88 >> 30)
  {
    if ((v88 & 0x80000000) != 0)
    {
      v90 = vandq_s8(a1[95], a1[139]);
      *(int8x8_t *)v90.i8 = vorr_s8(*(int8x8_t *)v90.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v90, v90, 8uLL));
      if (v90.i32[0] | a1[96].i32[0] & a1[140].i32[0] | v90.i32[1])
      {
        gleFallbackAttemptToEnd(a1, a2, a3, a4, v81);
        if ((a1[96].i32[2] & 0x80000000) == 0)
          gleUpdateDeferredStateGL3(a1, a2, a3, a4, v98);
      }
      v6[6] = 0;
    }
    else
    {
      if (v6[6])
      {
        v6[6] = 0;
        if (!*(_BYTE *)(a1[1814].i64[1] + 101))
          a1[96].i32[2] = v88 & 0x83FFFFFF;
        v89 = 1;
      }
      else
      {
        v91 = vandq_s8(a1[95], a1[139]);
        *(int8x8_t *)v91.i8 = vorr_s8(*(int8x8_t *)v91.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v91, v91, 8uLL));
        if (v91.i32[0] | a1[96].i32[0] & a1[140].i32[0] | v91.i32[1])
        {
          v89 = *(_BYTE *)(a1[1814].i64[1] + 101) == 0;
          a1[96].i32[2] = v88 & 0x83FFFFFF;
        }
        else
        {
          v89 = a1[142].u16[2];
        }
      }
      if (*((unsigned __int16 *)v7 + 2539) != v89 || a1[142].u16[2] != v89)
      {
        *((_WORD *)v7 + 2539) = v89;
        a1[142].i16[2] = v89;
        *((_DWORD *)v7 + 974) = 0;
        a1[95].i32[3] |= 0x80000000;
      }
    }
  }
  if (v6[19])
    a1[1199].i64[1] += mach_absolute_time() - v96;
  return v99;
}

uint64_t gleUpdateDeferredStateES2(int8x16_t *a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  unsigned __int8 *v6;
  __int8 *v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;
  __int32 v17;
  int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int8 *v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  char v33;
  int v34;
  int8x16_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  int8x16_t *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  __int32 v52;
  unsigned int v53;
  __int8 *v54;
  int8x16_t *v55;
  unint64_t v56;
  __int16 *v57;
  int v58;
  unsigned int v59;
  unsigned int v60;
  int v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  unsigned __int8 *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  int v77;
  int v78;
  int v79;
  __int16 v80;
  uint64_t v81;
  int v82;
  __int32 v83;
  int v84;
  int v85;
  int v86;
  uint64_t v87;
  int v88;
  unsigned __int32 v89;
  int v90;
  int8x16_t v91;
  int8x16_t v92;
  int v93;
  uint64_t v97;
  unsigned int v99;
  unsigned int v100;

  v99 = a5;
  v6 = &a1[2030].u8[4];
  v7 = &a1[1547].i8[4];
  if (a1[2031].i8[7])
  {
    v8 = mach_absolute_time();
    a5 = v99;
    v97 = v8;
  }
  else
  {
    v97 = 0;
  }
  v9 = a1[96].i32[1];
  if ((a5 & v9 & 0x10000000) != 0)
  {
    gleUpdateCurrentProgramState((uint64_t)a1);
    a1[95].i32[3] |= 0x10000000u;
    v10 = a1[96].i32[1] & 0xEFFFFFFF;
    v11 = *v6;
    *((_DWORD *)v7 + 974) = 0;
    if (v11)
      v12 = 0x80000000;
    else
      v12 = 1610612736;
    v9 = v10 | v12;
    a1[96].i32[1] = v9;
  }
  v13 = a1[96].u32[3];
  if (v13 & 0x80000 | v9 & 0x4000000)
  {
    if (*((_DWORD *)v7 + 1264)
      && ((v14 = a1[1810].i64[0]) != 0 ? (v15 = (unsigned __int8 *)(v14 + 552)) : (v15 = (unsigned __int8 *)(v7 + 5052)),
          *v15 >> *(_BYTE *)(a1[1814].i64[1] + 507)))
    {
      *((_DWORD *)v7 + 974) = 0;
      v16 = v9 | 0x4000000;
      v100 = 1282;
    }
    else
    {
      v100 = 0;
      v16 = v9 & 0xFBFFFFFF;
    }
    a1[96].i32[1] = v16;
  }
  else
  {
    v100 = 0;
  }
  v17 = a1[138].i32[3];
  v18 = v17 & v13;
  if ((v17 & v13 & 0x1020000) != 0)
  {
    if ((v7[108] & 0x10) != 0)
    {
      v22 = a1[1548].i64[0];
      if (!v22)
        v22 = *(_QWORD *)(a1[1548].i64[1] + 72);
      v20 = (uint64_t *)(v22 + 3528);
      v21 = (uint64_t *)(v22 + 3536);
    }
    else if (v7[4])
    {
      v19 = a1[1527].i64[0];
      v20 = (uint64_t *)(v19 + 152);
      v21 = (uint64_t *)(v19 + 160);
    }
    else
    {
      v23 = a1[1532].i64[0];
      v20 = (uint64_t *)(v23 + 112);
      v21 = (uint64_t *)(v23 + 120);
    }
    v24 = *v21;
    v25 = *v20;
    v26 = (a1[1201].i32[0] ^ v25) & 0x8C0;
    v27 = a1[1201].i64[1];
    a1[1201].i64[1] = v24;
    a1[1201].i64[0] = v25;
    if (v27 != v24 || v26 != 0)
    {
      *((_DWORD *)v7 + 974) = 0;
      v13 |= 0x400u;
      a1[96].i32[3] = v13;
      v18 = v17 & v13;
    }
  }
  if ((v18 & 0x40000) != 0)
  {
    gleUpdateRasterStateProgram((uint64_t)a1);
    v13 = a1[96].i32[3] & 0xFFFBFFFF;
    a1[96].i32[3] = v13;
  }
  if ((v18 & 0x70000000) != 0)
  {
    if ((v18 & 0x40000000) != 0)
    {
      gleUpdateFragmentFallbackProgram((uint64_t)a1, 3u);
      v13 = a1[96].i32[3] & 0xBFFFFFFF;
      a1[96].i32[3] = v13;
      if ((v18 & 0x20000000) == 0)
      {
LABEL_37:
        if ((v18 & 0x10000000) == 0)
          goto LABEL_39;
        goto LABEL_38;
      }
    }
    else if ((v18 & 0x20000000) == 0)
    {
      goto LABEL_37;
    }
    gleUpdateVertexFallbackProgram((uint64_t)a1, 1u);
    v13 = a1[96].i32[3] & 0xDFFFFFFF;
    a1[96].i32[3] = v13;
    if ((v18 & 0x10000000) != 0)
    {
LABEL_38:
      gleUpdateVertexFallbackProgram((uint64_t)a1, 0);
      v13 = a1[96].i32[3] & 0xEFFFFFFF;
      a1[96].i32[3] = v13;
    }
  }
LABEL_39:
  if ((v13 & 2) != 0)
  {
    gleSelectVertexSubmitFunc((uint64_t)a1);
    v13 = a1[96].u32[3];
  }
  if ((v13 & 0x8000) != 0)
  {
    gleSelectPrimitiveFunc((uint64_t)a1);
    v13 = a1[96].u32[3];
  }
  v29 = &a1[937].i8[4];
  if ((v13 & 0x400) != 0)
  {
    a1[1742].i64[1] = (uint64_t)gleSetEyeInterpFunc;
    a1[1743].i64[0] = (uint64_t)gleSetEyeInterpFunc;
    a1[1743].i64[1] = (uint64_t)gleSetClipInterpFunc;
    a1[1744].i64[0] = (uint64_t)gleSetClipInterpFunc;
    a1[1744].i64[1] = (uint64_t)gleSetFlatCopyFunc;
    a1[1745].i64[0] = (uint64_t)gleSetFlatCopyFunc;
  }
  if ((v13 & 0x1F00080) != 0)
  {
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v34 = 1;
    v6[3] = 1;
    v35 = a1 + 936;
    while (1)
    {
      if (!v34)
        goto LABEL_107;
      if ((v13 & 0x1000080) != 0)
      {
        if ((v7[108] & 0x10) != 0)
        {
          v39 = a1[1548].i64[0];
          if (!v39)
            v39 = *(_QWORD *)(a1[1548].i64[1] + 72);
          v36 = *(_QWORD *)(v39 + 8 * v31 + 3568);
        }
        else
        {
          v36 = -1;
        }
        v37 = v35[-5].i64[v30] ^ v36;
        v35[-5].i64[v30] = v36;
        if ((v13 & 0x800000) == 0)
        {
LABEL_58:
          v38 = v35[-4].i64[v30];
          goto LABEL_63;
        }
      }
      else
      {
        v37 = 0;
        v36 = v35[-5].i64[v30];
        if ((v13 & 0x800000) == 0)
          goto LABEL_58;
      }
      if ((v7[108] & 8) != 0)
      {
        v40 = a1[1548].i64[0];
        if (!v40)
          v40 = *(_QWORD *)(a1[1548].i64[1] + 64);
        v38 = *(_QWORD *)(v40 + 8 * v31 + 2864);
      }
      else
      {
        v38 = -1;
      }
      v37 |= v35[-4].i64[v30] ^ v38;
      v35[-4].i64[v30] = v38;
LABEL_63:
      if (v38 == -1)
        goto LABEL_68;
      if ((v13 & 0x2000) != 0)
        v32 = 1;
      v41 = (v38 | v36) & 0x8888888888888888 | (((v38 | v36) & 0x8888888888888888) >> 1);
      if (((v38 ^ v36) & ~(v41 | (v41 >> 2))) != 0)
      {
        v34 = 0;
        v6[3] = 0;
        *((_DWORD *)v7 + 974) = 0;
        a1[96].i32[1] |= 0x60000000u;
        v36 = -1;
LABEL_68:
        if ((v13 & 0x100000) == 0)
          goto LABEL_69;
        goto LABEL_71;
      }
      v36 &= v38;
      if ((v13 & 0x100000) == 0)
      {
LABEL_69:
        v42 = v35[-1].i64[v30];
        goto LABEL_79;
      }
LABEL_71:
      if ((v7[108] & 1) != 0)
      {
        v44 = a1[1548].i64[0];
        if (!v44)
          v44 = *(_QWORD *)(a1[1548].i64[1] + 40);
        v43 = (uint64_t *)(v44 + v30 * 8 + 752);
      }
      else
      {
        if (!*v7)
        {
          v42 = -1;
          goto LABEL_78;
        }
        v43 = (uint64_t *)(a1[1525].i64[0] + 8 * v31 + 488);
      }
      v42 = *v43;
LABEL_78:
      v37 |= v35[-1].i64[v30] ^ v42;
      v35[-1].i64[v30] = v42;
LABEL_79:
      if (v42 == -1)
      {
        v35->i64[v30] = v36;
        if (v36 != -1)
          goto LABEL_87;
      }
      else
      {
        if ((v13 & 0x2000) != 0)
          v33 = 1;
        v45 = (v42 | v36) & 0x8888888888888888 | (((v42 | v36) & 0x8888888888888888) >> 1);
        if (((v42 ^ v36) & ~(v45 | (v45 >> 2))) == 0)
        {
          v35->i64[v30] = v42 & v36;
LABEL_87:
          if (v31 >= *v29)
            *v29 = v31 + 1;
          goto LABEL_89;
        }
        v34 = 0;
        v6[3] = 0;
        *((_DWORD *)v7 + 974) = 0;
        a1[96].i32[1] |= 0x60000000u;
        v35->i64[v30] = -1;
      }
LABEL_89:
      if (v37)
      {
        v46 = ~(v37 | (2 * v37) | (4 * (v37 | (2 * v37))));
        LODWORD(v46) = ((v46 >> 6) & 2 | (v46 >> 3) & 1 | (v46 >> 9) & 4 | (v46 >> 12) & 8 | (v46 >> 15) & 0x10 | (v46 >> 18) & 0x20 | (v46 >> 21) & 0x40 | (v46 >> 31 << 7) | (v46 >> 27) & 0x100 | (v46 >> 30) & 0x200 | (v46 >> 33) & 0x400 | (v46 >> 36) & 0x800 | (v46 >> 39) & 0x1000 | (v46 >> 42) & 0x2000 | (v46 >> 45) & 0x4000 | HIWORD(v46) & 0x8000) ^ 0xFFFF;
        a1[95].i32[1] |= v46;
        a1[96].i32[0] |= v46;
        *((_DWORD *)v7 + 974) = 0;
        v13 |= 0x8000000u;
        a1[96].i32[3] = v13;
      }
      ++v31;
      ++v30;
      if (v31 == 2)
        goto LABEL_107;
    }
  }
  if ((v13 & 0x2000) != 0 && (v47 = *v29, *v29))
  {
    v32 = 0;
    v33 = 0;
    v48 = a1 + 932;
    do
    {
      if (v48->i64[0] != -1)
        v32 = 1;
      if (v48[3].i64[0] != -1)
        v33 = 1;
      v48 = (int8x16_t *)((char *)v48 + 8);
      --v47;
    }
    while (v47);
  }
  else
  {
    v33 = 0;
    v32 = 0;
  }
LABEL_107:
  if ((v13 & 0x8000000) != 0)
  {
    v49 = *v29;
    if (v49)
    {
      v50 = 0;
      v51 = 0;
      v52 = a1[95].i32[1];
      v53 = (unsigned __int16)(v52 | a1[96].i32[0]);
      v54 = &a1[2073].i8[8];
      v55 = a1 + 931;
      while (!v53)
      {
LABEL_133:
        ++v51;
        v50 += 16;
        if (v51 == v49)
          goto LABEL_134;
      }
      v56 = v55[5].u64[v51];
      v57 = &v55[6].i16[v51];
      v58 = 16 * v51;
      v59 = v53;
      while (1)
      {
        v60 = __clz(__rbit32(v59));
        v61 = 1 << v60;
        v62 = (v56 >> (4 * v60)) & 0xF;
        if (v62 >= 0xB)
        {
          v72 = v6[12];
          if (v6[12])
          {
            v73 = &v54[8 * v50 + 8 * v60];
            do
            {
              *(_QWORD *)v73 = 0;
              *((_QWORD *)v73 + 90) = 0;
              v73 += 1672;
              --v72;
            }
            while (v72);
          }
          *v57 &= ~(_WORD)v61;
          goto LABEL_132;
        }
        v63 = a1[1298].i64[11 * (int)(v60 + v58) + 1 + v62];
        v64 = a1[1496].i64[v60 + v58];
        if (v64)
        {
          v65 = v6[12];
          if (v6[12])
          {
            v66 = (uint64_t *)(v63 + 40);
            v67 = (uint64_t *)(v64 + 40);
            v68 = &v54[8 * v50 + 8 * v60];
            do
            {
              v69 = *v66++;
              *(_QWORD *)v68 = v69;
              v70 = *v67++;
              *((_QWORD *)v68 + 90) = v70;
              v68 += 1672;
              --v65;
            }
            while (v65);
          }
          v71 = (unsigned __int8 *)(v64 + 232);
        }
        else
        {
          v74 = v6[12];
          if (v6[12])
          {
            v75 = &v54[8 * v50 + 8 * v60];
            v76 = v63;
            do
            {
              *(_QWORD *)v75 = *(_QWORD *)(v76 + 40);
              *((_QWORD *)v75 + 90) = *(_QWORD *)(v76 + 424);
              v76 += 8;
              v75 += 1672;
              --v74;
            }
            while (v74);
          }
          v71 = (unsigned __int8 *)(v63 + 597);
        }
        v77 = *v71;
        v78 = (unsigned __int16)*v57;
        v79 = v61 & v78;
        if ((v77 & ~*(unsigned __int8 *)(v63 + 596)) != 0)
        {
          if (v79)
          {
            v80 = v78 & ~(_WORD)v61;
LABEL_131:
            *v57 = v80;
            *((_DWORD *)v7 + 974) = 0;
            v52 |= v61;
            a1[95].i32[1] = v52;
          }
        }
        else if (!v79)
        {
          v80 = v78 | v61;
          goto LABEL_131;
        }
LABEL_132:
        v59 ^= v61;
        if (!v59)
          goto LABEL_133;
      }
    }
  }
LABEL_134:
  if ((v13 & 0x200) == 0)
  {
    v81 = v99;
    if (v33)
    {
      a1[1512].i64[1] = (uint64_t)gleSetVPTransformFuncAll;
      a1[1513].i64[0] = (uint64_t)gleSetVPTransformFuncAll;
    }
    goto LABEL_141;
  }
  v81 = v99;
  if (a1[1530].i64[0] || *v7 || (v82 = *((_DWORD *)v7 + 27), (v82 & 1) != 0) || v33)
  {
    a1[1512].i64[1] = (uint64_t)gleSetVPTransformFuncAll;
    a1[1513].i64[0] = (uint64_t)gleSetVPTransformFuncAll;
    v82 = *((_DWORD *)v7 + 27);
  }
  if ((v82 & 8) == 0)
  {
LABEL_141:
    if (!v32)
      goto LABEL_143;
  }
  a1[1522].i64[0] = (uint64_t)gleSetGPTransformFuncAll;
  a1[1522].i64[1] = (uint64_t)gleSetGPTransformFuncAll;
LABEL_143:
  v83 = a1[96].i32[1];
  if ((v81 & v83 & 0x8000000) != 0)
  {
    if (a1[1649].i64[0])
    {
      v83 &= ~0x8000000u;
      a1[96].i32[1] = v83;
    }
    else
    {
      v100 = 1282;
    }
  }
  if ((v81 & v83 & 0x60000000) == 0)
  {
LABEL_164:
    if ((v83 & 0x80000000) == 0)
      goto LABEL_172;
    goto LABEL_165;
  }
  if (!*v6 && !v6[18] || !v6[3])
  {
    if (a1[1548].i64[0] || a1[1548].i64[1])
      v86 = 1282;
    else
      v86 = 16711680;
    v100 = v86;
    if ((v83 & 0x80000000) == 0)
      goto LABEL_172;
    goto LABEL_165;
  }
  v84 = *((_DWORD *)v7 + 27);
  if ((v84 & 1) != 0)
  {
    v83 &= ~0x40000000u;
    a1[96].i32[1] = v83;
    if ((v84 & 0x10) != 0)
    {
LABEL_163:
      v83 &= ~0x20000000u;
      a1[96].i32[1] = v83;
      goto LABEL_164;
    }
  }
  else
  {
    v85 = v100;
    if ((v81 & 0x40000000) != 0)
      v85 = 1282;
    v100 = v85;
    if ((v84 & 0x10) != 0)
      goto LABEL_163;
  }
  if (a1[1124].i8[0])
    goto LABEL_163;
  v93 = v100;
  if ((v81 & 0x20000000) != 0)
    v93 = 1282;
  v100 = v93;
  if (v83 < 0)
  {
LABEL_165:
    v87 = a1[1810].i64[0];
    if (v87 && (*(_BYTE *)(v87 + 479) & 2) != 0 && (v7[108] & 0x10) == 0)
    {
      v88 = v100;
      if ((int)v81 < 0)
        v88 = 1282;
      v100 = v88;
    }
    else
    {
      v83 &= ~0x80000000;
    }
  }
LABEL_172:
  a1[96].i32[1] = v83 & 0xFC000000;
  v89 = a1[96].u32[2];
  a1[96].i32[2] = v89 & 0xC3FFFFFF;
  a1[96].i32[3] = v13 & 0x70070000;
  if (!v100 && a2 && v89 >> 30)
  {
    if ((v89 & 0x80000000) != 0)
    {
      v91 = vandq_s8(a1[95], a1[139]);
      *(int8x8_t *)v91.i8 = vorr_s8(*(int8x8_t *)v91.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v91, v91, 8uLL));
      if (v91.i32[0] | a1[96].i32[0] & a1[140].i32[0] | v91.i32[1])
      {
        gleFallbackAttemptToEnd((unint64_t)a1, a2, a3, a4, v81);
        if ((a1[96].i32[2] & 0x80000000) == 0)
          gleUpdateDeferredStateES2(a1, a2, a3, a4, v99);
      }
      v6[6] = 0;
    }
    else
    {
      if (v6[6])
      {
        v6[6] = 0;
        if (!*(_BYTE *)(a1[1814].i64[1] + 101))
          a1[96].i32[2] = v89 & 0x83FFFFFF;
        v90 = 1;
      }
      else
      {
        v92 = vandq_s8(a1[95], a1[139]);
        *(int8x8_t *)v92.i8 = vorr_s8(*(int8x8_t *)v92.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v92, v92, 8uLL));
        if (v92.i32[0] | a1[96].i32[0] & a1[140].i32[0] | v92.i32[1])
        {
          v90 = *(_BYTE *)(a1[1814].i64[1] + 101) == 0;
          a1[96].i32[2] = v89 & 0x83FFFFFF;
        }
        else
        {
          v90 = a1[142].u16[2];
        }
      }
      if (*((unsigned __int16 *)v7 + 2539) != v90 || a1[142].u16[2] != v90)
      {
        *((_WORD *)v7 + 2539) = v90;
        a1[142].i16[2] = v90;
        *((_DWORD *)v7 + 974) = 0;
        a1[95].i32[3] |= 0x80000000;
      }
    }
  }
  if (v6[19])
    a1[1199].i64[1] += mach_absolute_time() - v97;
  return v100;
}

uint64_t gleUpdateDrawFramebufferState(uint64_t a1, double a2, double a3, double a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  int v10;
  _DWORD *v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  v5 = a1 + 28652;
  if (*(_BYTE *)(a1 + 32503))
    v6 = mach_absolute_time();
  else
    v6 = 0;
  v7 = *(_DWORD *)(v5 + 1148);
  if ((v7 & 0x10000000) != 0)
  {
    v8 = *(_QWORD *)(a1 + 28960);
    *(_BYTE *)(v5 + 3834) = 1;
    if (!v8)
    {
      v13 = *(_QWORD *)(a1 + 29480);
      v14 = *(unsigned __int8 *)(v13 + 43);
      if (*(unsigned __int8 *)(v5 + 3836) != v14)
      {
        *(_BYTE *)(v5 + 3836) = v14;
        gleUpdateDrawColorClamping(a1, a2, a3, a4);
        v13 = *(_QWORD *)(a1 + 29480);
      }
      if (!*(_BYTE *)(v13 + 57))
        goto LABEL_26;
      *(_DWORD *)v5 = 0;
      v11 = (_DWORD *)(a1 + 1548);
      v12 = 0x40000;
      goto LABEL_25;
    }
    v9 = *(_DWORD *)(v8 + 480);
    if (!v9)
      goto LABEL_11;
    if (v9 == 0xFFFF)
    {
      gleUpdateFramebufferCompleteness(a1, v8 + 40);
      v9 = *(_DWORD *)(v8 + 480);
    }
    if (v9)
    {
      *(_BYTE *)(v5 + 3834) = 0;
      *(_DWORD *)v5 = 0;
      *(_DWORD *)(v5 + 1148) |= 0x20000000u;
    }
    else if (*(_BYTE *)(v5 + 3834))
    {
LABEL_11:
      if (*(_BYTE *)(v8 + 88 * *(unsigned __int8 *)(v5 + 3848) + 640))
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 29496) + 528))(*(_QWORD *)(a1 + 29472), *(_QWORD *)(v8 + 8 * *(unsigned __int8 *)(v5 + 3848) + 200));
    }
    if ((*(_BYTE *)(v8 + 88 * *(unsigned __int8 *)(v5 + 3848) + 641) & 1) != 0)
    {
      *(_BYTE *)(v5 + 3834) = 0;
      *(_DWORD *)v5 = 0;
      *(_DWORD *)(v5 + 1148) |= 0x20000000u;
    }
    v10 = *(_DWORD *)(v8 + 524) != 0;
    if (*(unsigned __int8 *)(v5 + 3836) != v10)
    {
      *(_BYTE *)(v5 + 3836) = v10;
      gleUpdateDrawColorClamping(a1, a2, a3, a4);
    }
    if (*(_QWORD *)(v8 + 184))
    {
      *(_DWORD *)v5 = 0;
      *(_DWORD *)(a1 + 1548) |= 0x40000u;
    }
    if (!*(_BYTE *)(v5 + 3834))
      goto LABEL_26;
    *(_DWORD *)v5 = 0;
    v11 = (_DWORD *)(a1 + 1540);
    v12 = 0x80000000;
LABEL_25:
    *v11 |= v12;
LABEL_26:
    gleUpdatePointSmooth(a1);
    v7 = *(_DWORD *)(v5 + 1148) & 0xEFFFFFFF;
    *(_DWORD *)(v5 + 1148) = v7;
  }
  if ((v7 & 0x20000000) == 0)
    goto LABEL_33;
  if (!*(_BYTE *)(v5 + 3834))
    goto LABEL_40;
  if (!*(_QWORD *)(a1 + 29008) && !*(_QWORD *)(a1 + 28960))
  {
    if (!*(_BYTE *)(v5 + 3825) || *(_BYTE *)(v5 + 3849) != 4)
      goto LABEL_41;
LABEL_40:
    v15 = 1286;
    goto LABEL_42;
  }
  if (!*(_BYTE *)(v5 + 3825))
  {
LABEL_41:
    v15 = 16711680;
    goto LABEL_42;
  }
  v7 &= ~0x20000000u;
  *(_DWORD *)(v5 + 1148) = v7;
LABEL_33:
  if ((v7 & 0x443C0478) != 0)
  {
    if ((*(unsigned int (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 29496) + 160))(*(_QWORD *)(a1 + 29464), v7 & 0x443C0478) == 2)
    {
      *(_DWORD *)v5 = 0;
      *(_DWORD *)(a1 + 1520) |= 0x80u;
    }
    v15 = 0;
    *(_DWORD *)(v5 + 1148) &= 0xBBC3FB87;
  }
  else
  {
    v15 = 0;
  }
LABEL_42:
  if (*(_BYTE *)(v5 + 3851))
    *(_QWORD *)(a1 + 19200) += mach_absolute_time() - v6;
  return v15;
}

uint64_t gleUpdateReadFramebufferState(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;

  v2 = a1 + 28652;
  if (*(_BYTE *)(a1 + 32503))
    v3 = mach_absolute_time();
  else
    v3 = 0;
  *(_DWORD *)v2 = 0;
  v4 = *(_DWORD *)(v2 + 1148);
  if ((v4 & 0x2000000) == 0)
    goto LABEL_20;
  v5 = *(_QWORD *)(a1 + 28968);
  *(_BYTE *)(v2 + 3833) = 1;
  if (v5)
  {
    v6 = *(_DWORD *)(v5 + 480);
    if (!v6)
      goto LABEL_11;
    if (v6 == 0xFFFF)
    {
      gleUpdateFramebufferCompleteness(a1, v5 + 40);
      v6 = *(_DWORD *)(v5 + 480);
    }
    if (v6)
    {
      *(_BYTE *)(v2 + 3833) = 0;
      *(_DWORD *)(v2 + 1148) |= 0x8000000u;
    }
    else if (*(_BYTE *)(v2 + 3833))
    {
LABEL_11:
      if (*(_BYTE *)(v5 + 88 * *(unsigned __int8 *)(v2 + 3848) + 640))
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 29496) + 528))(*(_QWORD *)(a1 + 29472), *(_QWORD *)(v5 + 8 * *(unsigned __int8 *)(v2 + 3848) + 200));
    }
    if ((*(_BYTE *)(v5 + 88 * *(unsigned __int8 *)(v2 + 3848) + 641) & 1) != 0)
    {
      *(_BYTE *)(v2 + 3833) = 0;
      *(_DWORD *)(v2 + 1148) |= 0x8000000u;
    }
    v7 = *(unsigned __int8 *)(v2 + 3837);
    v8 = *(_DWORD *)(v5 + 524) != 0;
    goto LABEL_17;
  }
  v7 = *(unsigned __int8 *)(v2 + 3837);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 29480) + 43);
LABEL_17:
  if (v7 != v8)
  {
    *(_BYTE *)(v2 + 3837) = v8;
    gleUpdateReadColorClamping(a1);
  }
  v4 = *(_DWORD *)(v2 + 1148) & 0xFDFFFFFF;
  *(_DWORD *)(v2 + 1148) = v4;
LABEL_20:
  if ((v4 & 0x8000000) == 0)
    goto LABEL_25;
  if (!*(_BYTE *)(v2 + 3833))
  {
    v9 = 1286;
    goto LABEL_29;
  }
  if (*(_QWORD *)(a1 + 29008) || *(_QWORD *)(a1 + 28968))
  {
    v4 &= ~0x8000000u;
    *(_DWORD *)(v2 + 1148) = v4;
LABEL_25:
    if ((v4 & 0x80000000) != 0)
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 29496) + 152))(*(_QWORD *)(a1 + 29464), v4 & 0x80000000);
      v9 = 0;
      *(_DWORD *)(v2 + 1148) &= ~0x80000000;
    }
    else
    {
      v9 = 0;
    }
    goto LABEL_29;
  }
  if (*(_BYTE *)(v2 + 3849) == 4)
    v9 = 1286;
  else
    v9 = 16711680;
LABEL_29:
  if (*(_BYTE *)(v2 + 3851))
    *(_QWORD *)(a1 + 19208) += mach_absolute_time() - v3;
  return v9;
}

uint64_t gleUpdateDepthRangeDataIndexed(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  double v3;
  float v4;
  double v5;
  float v6;

  v2 = result + 144 * a2;
  v3 = *(double *)(v2 + 9280);
  v4 = v3;
  *(float *)(v2 + 9328) = v4;
  v5 = *(double *)(v2 + 9288);
  v6 = v5;
  *(float *)(v2 + 9332) = v6;
  *(float *)(v2 + 9336) = v6 - v4;
  *(float *)&v3 = v5 - v3;
  *(float *)(v2 + 9256) = *(float *)&v3 * 0.5;
  *(float *)(v2 + 9224) = *(float *)&v3 * 0.5;
  *(float *)&v3 = v4 + (float)(*(float *)&v3 * 0.5);
  *(_DWORD *)(v2 + 9272) = LODWORD(v3);
  *(_DWORD *)(v2 + 9240) = LODWORD(v3);
  *(_DWORD *)(result + 36 * a2 + 28712) = 1065353216;
  if (*(_BYTE *)(result + 15205))
    *(_DWORD *)(result + 1520) |= 0x200u;
  *(_DWORD *)(result + 28652) = 0;
  *(_DWORD *)(result + 1528) |= 1u;
  return result;
}

uint64_t gleDoSelectiveDispatchCore(unint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, __n128 a6, double a7, double a8)
{
  unsigned __int8 *v13;
  unsigned int *v14;
  int MatrixIdentifier;
  int updated;
  uint64_t v17;
  unsigned int v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x8_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;

  v13 = (unsigned __int8 *)(a1 + 28680);
  v14 = (unsigned int *)(a1 + 19152);
  if ((*(_BYTE *)(a1 + 1540) & 4) != 0)
  {
    MatrixIdentifier = gleGenerateMatrixIdentifier(a1, a1 + 9488, a6.n128_f64[0], a7, a8);
    *v14 = *v14 & 0xFFFFFEFF | ((MatrixIdentifier != -1074791426) << 8);
    *((_DWORD *)v13 + 263) = MatrixIdentifier;
  }
  if ((*((_DWORD *)v13 + 280) & 0x743C0478) != 0)
  {
    updated = gleUpdateDrawFramebufferState(a1, a6.n128_f64[0], a7, a8);
    if (updated)
      goto LABEL_93;
  }
  v18 = v14[2374];
  if ((v18 & a2) == 0)
  {
    if ((*(_WORD *)(*(_QWORD *)(a1 + 29032) + 26) & 0x800) != 0 && *(_BYTE *)(a1 + 15377) && ((v18 | a2) & 1) != 0)
    {
      v14[2375] = 0;
      *(_DWORD *)(a1 + 1548) |= 0x30000u;
    }
    *(_DWORD *)(a1 + 1524) |= 0x80000000;
    v14[2374] = 0;
  }
  if ((*v13 & a3) == 0)
  {
    *(_DWORD *)(a1 + 1524) |= 0x2000000u;
    *v13 = 0;
  }
  if ((v13[2] & a4) == 0)
  {
    *(_DWORD *)(a1 + 1524) |= 0x4000000u;
    v13[2] = 0;
  }
  if (*(_DWORD *)(a1 + 2216) & *(_DWORD *)(a1 + 1544) | *(_DWORD *)(a1 + 2220) & *(_DWORD *)(a1 + 1548) | (*(_DWORD *)(a1 + 2212) | a5) & *(_DWORD *)(a1 + 1540))
  {
    updated = gleUpdateDeferredState(a1, a2, a3, a4, a5, a6, a7, a8);
    if (updated)
    {
LABEL_93:
      if (updated == 16711680 || *((_WORD *)v13 + 576))
        return 0;
      v17 = 0;
      *((_WORD *)v13 + 576) = updated;
      return v17;
    }
  }
  v19 = *(int8x16_t *)(a1 + 1520);
  v20 = vandq_s8(v19, *(int8x16_t *)(a1 + 2224));
  v21 = vorr_s8(*(int8x8_t *)v20.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL));
  if (v21.i32[0] | *(_DWORD *)(a1 + 1536) & *(_DWORD *)(a1 + 2240) | v21.i32[1])
  {
    if ((v19.i16[6] & 0x1000) != 0)
    {
      v22 = *(_QWORD **)(a1 + 26384);
      if (v22)
      {
        v23 = v22[118];
        if (v23)
        {
          v24 = v22 + 118;
          if (v13[3816])
          {
            v25 = 0;
            v26 = v22[119];
            v27 = v22 + 221;
            do
            {
              *(v27 - 1) |= v23;
              *v27 |= v26;
              ++v25;
              v27 += 35;
            }
            while (v25 < v13[3816]);
          }
          *v24 = 0;
          v24[1] = 0;
        }
      }
    }
    *(_DWORD *)(a1 + 2280) = a2;
    *(_BYTE *)(a1 + 2284) = a3;
    *(_BYTE *)(a1 + 2285) = a4;
    gleUpdateContextStateBuffers(a1);
    if (v13[3823])
      v28 = mach_absolute_time();
    else
      v28 = 0;
    v29 = (*(uint64_t (**)(_QWORD, unint64_t, unint64_t))(*(_QWORD *)(a1 + 29448) + 144))(*(_QWORD *)(a1 + 29016), a1 + 29040, a1 + 1520);
    gleUpdateDispatchJIT(a1);
    if (v13[3823])
      *(_QWORD *)(a1 + 19176) += mach_absolute_time() - v28;
    v30 = *((_DWORD *)v13 + 279) ^ v29;
    if ((v30 & 0x47) != 0)
    {
      if ((v30 & 0x45) != 0 && (v31 = gleUpdateDispatchCodeChange(a1, v29, a5)) != 0)
      {
        v17 = 0;
        if (!*((_WORD *)v13 + 576))
          *((_WORD *)v13 + 576) = v31;
      }
      else
      {
        v17 = 1;
      }
      if ((v29 & 2) != 0)
      {
        v32 = *(_QWORD *)(a1 + 26280) != 0;
        v33 = *(_QWORD *)(a1 + 29032);
        v34 = *(_QWORD *)(v33 + 536);
        *(_QWORD *)(a1 + 26280) = v34;
        v35 = *(_QWORD *)(v33 + 544);
        *(_QWORD *)(a1 + 26288) = v35;
        if (v34 && !*(_BYTE *)(v34 + 2))
          *(_BYTE *)(v34 + 2) = 1;
        v36 = v32 ^ (v34 == 0);
        if (v35 && !*(_BYTE *)(v35 + 2))
          *(_BYTE *)(v35 + 2) = 1;
        if ((v36 & 1) == 0)
          gleSelectPrimitiveFunc(a1);
        gleSelectVertexSubmitFunc(a1);
      }
      if ((v29 & 0x20) != 0)
        goto LABEL_52;
    }
    else
    {
      v17 = 1;
      if ((v29 & 0x20) != 0)
        goto LABEL_52;
    }
    v37 = v14[2374];
    if ((v37 & a2) != 0)
    {
LABEL_56:
      *(_DWORD *)(a1 + 2280) = v37;
      if ((v29 & 0x80) != 0 || (LODWORD(v40) = *v13, (v40 & a3) == 0))
      {
        v41 = 0;
        v40 = *(_QWORD *)(a1 + 29032);
        do
        {
          if ((*(_BYTE *)(v40 + 632 + v41) & a3) != 0)
            break;
          ++v41;
        }
        while (v41 != 4);
        LOBYTE(v40) = *(_BYTE *)(v40 + v41 + 632);
        *v13 = v40;
      }
      *(_BYTE *)(a1 + 2284) = v40;
      if ((v29 & 0x100) != 0 || (LODWORD(v42) = v13[2], (v42 & a4) == 0))
      {
        v43 = 0;
        v42 = *(_QWORD *)(a1 + 29032);
        do
        {
          if ((*(_BYTE *)(v42 + 636 + v43) & a4) != 0)
            break;
          ++v43;
        }
        while (v43 != 4);
        LOBYTE(v42) = *(_BYTE *)(v42 + v43 + 636);
        v13[2] = v42;
      }
      *(_BYTE *)(a1 + 2285) = v42;
      v44 = *(_DWORD *)(a1 + 1532);
      if ((v44 & 0xF836000) != 0)
      {
        if ((v29 & 1) != 0 && (v44 & 0x802000) != 0)
        {
          *(_OWORD *)(a1 + 1664) = 0u;
          *(_OWORD *)(a1 + 1648) = 0u;
          *(_OWORD *)(a1 + 1632) = 0u;
          *(_OWORD *)(a1 + 1616) = 0u;
          *(_OWORD *)(a1 + 1600) = 0u;
          *(_OWORD *)(a1 + 1584) = 0u;
          *(_OWORD *)(a1 + 1568) = 0u;
          *(_OWORD *)(a1 + 1552) = 0u;
        }
        if ((v29 & 1) != 0 && (v44 & 0x1004000) != 0)
        {
          *(_OWORD *)(a1 + 1792) = 0u;
          *(_OWORD *)(a1 + 1776) = 0u;
          *(_OWORD *)(a1 + 1760) = 0u;
          *(_OWORD *)(a1 + 1744) = 0u;
          *(_OWORD *)(a1 + 1728) = 0u;
          *(_OWORD *)(a1 + 1712) = 0u;
          *(_OWORD *)(a1 + 1696) = 0u;
          *(_OWORD *)(a1 + 1680) = 0u;
        }
        if ((v29 & 1) != 0 && (v44 & 0x2008000) != 0)
        {
          *(_OWORD *)(a1 + 1920) = 0u;
          *(_OWORD *)(a1 + 1904) = 0u;
          *(_OWORD *)(a1 + 1888) = 0u;
          *(_OWORD *)(a1 + 1872) = 0u;
          *(_OWORD *)(a1 + 1856) = 0u;
          *(_OWORD *)(a1 + 1840) = 0u;
          *(_OWORD *)(a1 + 1824) = 0u;
          *(_OWORD *)(a1 + 1808) = 0u;
        }
        if ((v29 & 1) != 0 && (v44 & 0x4010000) != 0)
        {
          *(_OWORD *)(a1 + 2048) = 0u;
          *(_OWORD *)(a1 + 2032) = 0u;
          *(_OWORD *)(a1 + 2016) = 0u;
          *(_OWORD *)(a1 + 2000) = 0u;
          *(_OWORD *)(a1 + 1984) = 0u;
          *(_OWORD *)(a1 + 1968) = 0u;
          *(_OWORD *)(a1 + 1952) = 0u;
          *(_OWORD *)(a1 + 1936) = 0u;
        }
        if ((v29 & 4) != 0 && (v44 & 0x8020000) != 0)
        {
          *(_OWORD *)(a1 + 2176) = 0u;
          *(_OWORD *)(a1 + 2160) = 0u;
          *(_OWORD *)(a1 + 2144) = 0u;
          *(_OWORD *)(a1 + 2128) = 0u;
          *(_OWORD *)(a1 + 2112) = 0u;
          *(_OWORD *)(a1 + 2096) = 0u;
          *(_OWORD *)(a1 + 2080) = 0u;
          *(_OWORD *)(a1 + 2064) = 0u;
        }
      }
      *(_QWORD *)(a1 + 1520) = 0;
      *(_QWORD *)(a1 + 1528) = 0;
      *(_DWORD *)(a1 + 1536) = 0;
      goto LABEL_85;
    }
LABEL_52:
    v38 = 0;
    v39 = *(_QWORD *)(a1 + 29032);
    do
    {
      if ((*(_DWORD *)(v39 + 584 + 4 * v38) & a2) != 0)
        break;
      ++v38;
    }
    while (v38 != 8);
    v37 = *(_DWORD *)(v39 + 4 * v38 + 584);
    v14[2374] = v37;
    goto LABEL_56;
  }
  v17 = 1;
LABEL_85:
  if (!*(_DWORD *)(a1 + 1540))
  {
    v14[2375] = v14[2376] & v14[2374];
    v13[1] = *v13;
    v13[3] = v13[2];
  }
  return v17;
}

uint64_t gleDoDrawDispatchCore(unint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, __n128 a5, double a6, double a7)
{
  unsigned __int8 *v11;
  unsigned int *v12;
  int MatrixIdentifier;
  int updated;
  uint64_t v15;
  unsigned int v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x8_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  int v29;
  int v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;

  v11 = (unsigned __int8 *)(a1 + 28680);
  v12 = (unsigned int *)(a1 + 19152);
  if ((*(_BYTE *)(a1 + 1540) & 4) != 0)
  {
    MatrixIdentifier = gleGenerateMatrixIdentifier(a1, a1 + 9488, a5.n128_f64[0], a6, a7);
    *v12 = *v12 & 0xFFFFFEFF | ((MatrixIdentifier != -1074791426) << 8);
    *((_DWORD *)v11 + 263) = MatrixIdentifier;
  }
  if ((*((_DWORD *)v11 + 280) & 0x743C0478) != 0)
  {
    updated = gleUpdateDrawFramebufferState(a1, a5.n128_f64[0], a6, a7);
    if (updated)
      goto LABEL_96;
  }
  v16 = v12[2374];
  if ((v16 & a2) == 0)
  {
    if ((*(_WORD *)(*(_QWORD *)(a1 + 29032) + 26) & 0x800) != 0 && *(_BYTE *)(a1 + 15377) && ((v16 | a2) & 1) != 0)
    {
      v12[2375] = 0;
      *(_DWORD *)(a1 + 1548) |= 0x30000u;
    }
    *(_DWORD *)(a1 + 1524) |= 0x80000000;
    v12[2374] = 0;
  }
  if ((*v11 & a3) == 0)
  {
    *(_DWORD *)(a1 + 1524) |= 0x2000000u;
    *v11 = 0;
  }
  if ((v11[2] & a4) == 0)
  {
    *(_DWORD *)(a1 + 1524) |= 0x4000000u;
    v11[2] = 0;
  }
  if (*(_DWORD *)(a1 + 2216) & *(_DWORD *)(a1 + 1544) | *(_DWORD *)(a1 + 2220) & *(_DWORD *)(a1 + 1548) | (*(_DWORD *)(a1 + 2212) | 0xFC000000) & *(_DWORD *)(a1 + 1540))
  {
    updated = gleUpdateDeferredState(a1, a2, a3, a4, -67108864, a5, a6, a7);
    if (updated)
    {
LABEL_96:
      if (updated != 16711680 && !*((_WORD *)v11 + 576))
      {
        v15 = 0;
        *((_WORD *)v11 + 576) = updated;
        return v15;
      }
      return 0;
    }
  }
  if ((v12[2376] & a2) == 0)
  {
    if (!*((_WORD *)v11 + 576))
    {
      v15 = 0;
      *((_WORD *)v11 + 576) = 1282;
      return v15;
    }
    return 0;
  }
  v17 = *(int8x16_t *)(a1 + 1520);
  v18 = vandq_s8(v17, *(int8x16_t *)(a1 + 2224));
  v19 = vorr_s8(*(int8x8_t *)v18.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL));
  if (v19.i32[0] | *(_DWORD *)(a1 + 1536) & *(_DWORD *)(a1 + 2240) | v19.i32[1])
  {
    if ((v17.i16[6] & 0x1000) != 0)
    {
      v20 = *(_QWORD **)(a1 + 26384);
      if (v20)
      {
        v21 = v20[118];
        if (v21)
        {
          v22 = v20 + 118;
          if (v11[3816])
          {
            v23 = 0;
            v24 = v20[119];
            v25 = v20 + 221;
            do
            {
              *(v25 - 1) |= v21;
              *v25 |= v24;
              ++v23;
              v25 += 35;
            }
            while (v23 < v11[3816]);
          }
          *v22 = 0;
          v22[1] = 0;
        }
      }
    }
    *(_DWORD *)(a1 + 2280) = a2;
    *(_BYTE *)(a1 + 2284) = a3;
    *(_BYTE *)(a1 + 2285) = a4;
    gleUpdateContextStateBuffers(a1);
    if (v11[3823])
      v26 = mach_absolute_time();
    else
      v26 = 0;
    v27 = (*(uint64_t (**)(_QWORD, unint64_t, unint64_t))(*(_QWORD *)(a1 + 29448) + 144))(*(_QWORD *)(a1 + 29016), a1 + 29040, a1 + 1520);
    v28 = gleUpdateDispatchJIT(a1);
    if (v11[3823])
      *(_QWORD *)(a1 + 19176) += mach_absolute_time() - v26;
    v29 = *((_DWORD *)v11 + 279) ^ v27;
    if ((v29 & 0x47) != 0)
    {
      if ((v29 & 0x45) != 0 && (v30 = gleUpdateDispatchCodeChange(a1, v27, 4227858432, v28)) != 0)
      {
        v15 = 0;
        if (!*((_WORD *)v11 + 576))
          *((_WORD *)v11 + 576) = v30;
      }
      else
      {
        v15 = 1;
      }
      if ((v27 & 2) != 0)
      {
        v31 = *(_QWORD *)(a1 + 26280) != 0;
        v32 = *(_QWORD *)(a1 + 29032);
        v33 = *(_QWORD *)(v32 + 536);
        *(_QWORD *)(a1 + 26280) = v33;
        v34 = *(_QWORD *)(v32 + 544);
        *(_QWORD *)(a1 + 26288) = v34;
        if (v33 && !*(_BYTE *)(v33 + 2))
          *(_BYTE *)(v33 + 2) = 1;
        v35 = v31 ^ (v33 == 0);
        if (v34 && !*(_BYTE *)(v34 + 2))
          *(_BYTE *)(v34 + 2) = 1;
        if ((v35 & 1) == 0)
          gleSelectPrimitiveFunc(a1);
        gleSelectVertexSubmitFunc(a1);
      }
      if ((v27 & 0x20) != 0)
        goto LABEL_55;
    }
    else
    {
      v15 = 1;
      if ((v27 & 0x20) != 0)
        goto LABEL_55;
    }
    v36 = v12[2374];
    if ((v36 & a2) != 0)
    {
LABEL_59:
      *(_DWORD *)(a1 + 2280) = v36;
      if ((v27 & 0x80) != 0 || (LODWORD(v39) = *v11, (v39 & a3) == 0))
      {
        v40 = 0;
        v39 = *(_QWORD *)(a1 + 29032);
        do
        {
          if ((*(_BYTE *)(v39 + 632 + v40) & a3) != 0)
            break;
          ++v40;
        }
        while (v40 != 4);
        LOBYTE(v39) = *(_BYTE *)(v39 + v40 + 632);
        *v11 = v39;
      }
      *(_BYTE *)(a1 + 2284) = v39;
      if ((v27 & 0x100) != 0 || (LODWORD(v41) = v11[2], (v41 & a4) == 0))
      {
        v42 = 0;
        v41 = *(_QWORD *)(a1 + 29032);
        do
        {
          if ((*(_BYTE *)(v41 + 636 + v42) & a4) != 0)
            break;
          ++v42;
        }
        while (v42 != 4);
        LOBYTE(v41) = *(_BYTE *)(v41 + v42 + 636);
        v11[2] = v41;
      }
      *(_BYTE *)(a1 + 2285) = v41;
      v43 = *(_DWORD *)(a1 + 1532);
      if ((v43 & 0xF836000) != 0)
      {
        if ((v27 & 1) != 0 && (v43 & 0x802000) != 0)
        {
          *(_OWORD *)(a1 + 1664) = 0u;
          *(_OWORD *)(a1 + 1648) = 0u;
          *(_OWORD *)(a1 + 1632) = 0u;
          *(_OWORD *)(a1 + 1616) = 0u;
          *(_OWORD *)(a1 + 1600) = 0u;
          *(_OWORD *)(a1 + 1584) = 0u;
          *(_OWORD *)(a1 + 1568) = 0u;
          *(_OWORD *)(a1 + 1552) = 0u;
        }
        if ((v27 & 1) != 0 && (v43 & 0x1004000) != 0)
        {
          *(_OWORD *)(a1 + 1792) = 0u;
          *(_OWORD *)(a1 + 1776) = 0u;
          *(_OWORD *)(a1 + 1760) = 0u;
          *(_OWORD *)(a1 + 1744) = 0u;
          *(_OWORD *)(a1 + 1728) = 0u;
          *(_OWORD *)(a1 + 1712) = 0u;
          *(_OWORD *)(a1 + 1696) = 0u;
          *(_OWORD *)(a1 + 1680) = 0u;
        }
        if ((v27 & 1) != 0 && (v43 & 0x2008000) != 0)
        {
          *(_OWORD *)(a1 + 1920) = 0u;
          *(_OWORD *)(a1 + 1904) = 0u;
          *(_OWORD *)(a1 + 1888) = 0u;
          *(_OWORD *)(a1 + 1872) = 0u;
          *(_OWORD *)(a1 + 1856) = 0u;
          *(_OWORD *)(a1 + 1840) = 0u;
          *(_OWORD *)(a1 + 1824) = 0u;
          *(_OWORD *)(a1 + 1808) = 0u;
        }
        if ((v27 & 1) != 0 && (v43 & 0x4010000) != 0)
        {
          *(_OWORD *)(a1 + 2048) = 0u;
          *(_OWORD *)(a1 + 2032) = 0u;
          *(_OWORD *)(a1 + 2016) = 0u;
          *(_OWORD *)(a1 + 2000) = 0u;
          *(_OWORD *)(a1 + 1984) = 0u;
          *(_OWORD *)(a1 + 1968) = 0u;
          *(_OWORD *)(a1 + 1952) = 0u;
          *(_OWORD *)(a1 + 1936) = 0u;
        }
        if ((v27 & 4) != 0 && (v43 & 0x8020000) != 0)
        {
          *(_OWORD *)(a1 + 2176) = 0u;
          *(_OWORD *)(a1 + 2160) = 0u;
          *(_OWORD *)(a1 + 2144) = 0u;
          *(_OWORD *)(a1 + 2128) = 0u;
          *(_OWORD *)(a1 + 2112) = 0u;
          *(_OWORD *)(a1 + 2096) = 0u;
          *(_OWORD *)(a1 + 2080) = 0u;
          *(_OWORD *)(a1 + 2064) = 0u;
        }
      }
      *(_QWORD *)(a1 + 1520) = 0;
      *(_QWORD *)(a1 + 1528) = 0;
      *(_DWORD *)(a1 + 1536) = 0;
      goto LABEL_88;
    }
LABEL_55:
    v37 = 0;
    v38 = *(_QWORD *)(a1 + 29032);
    do
    {
      if ((*(_DWORD *)(v38 + 584 + 4 * v37) & a2) != 0)
        break;
      ++v37;
    }
    while (v37 != 8);
    v36 = *(_DWORD *)(v38 + 4 * v37 + 584);
    v12[2374] = v36;
    goto LABEL_59;
  }
  v15 = 1;
LABEL_88:
  if (!*(_DWORD *)(a1 + 1540))
  {
    v12[2375] = v12[2376] & v12[2374];
    v11[1] = *v11;
    v11[3] = v11[2];
  }
  return v15;
}

uint64_t gleDoDrawDispatchCoreGL3(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, double a5, double a6, double a7)
{
  unsigned __int8 *v11;
  unsigned int *v12;
  int MatrixIdentifier;
  int updated;
  uint64_t v15;
  unsigned int v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x8_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  int v29;
  int v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;

  v11 = (unsigned __int8 *)(a1 + 28680);
  v12 = (unsigned int *)(a1 + 19152);
  if ((*(_BYTE *)(a1 + 1540) & 4) != 0)
  {
    MatrixIdentifier = gleGenerateMatrixIdentifier(a1, a1 + 9488, a5, a6, a7);
    *v12 = *v12 & 0xFFFFFEFF | ((MatrixIdentifier != -1074791426) << 8);
    *((_DWORD *)v11 + 263) = MatrixIdentifier;
  }
  if ((*((_DWORD *)v11 + 280) & 0x743C0478) != 0)
  {
    updated = gleUpdateDrawFramebufferState(a1, a5, a6, a7);
    if (updated)
      goto LABEL_96;
  }
  v16 = v12[2374];
  if ((v16 & a2) == 0)
  {
    if ((*(_WORD *)(*(_QWORD *)(a1 + 29032) + 26) & 0x800) != 0 && *(_BYTE *)(a1 + 15377) && ((v16 | a2) & 1) != 0)
    {
      v12[2375] = 0;
      *(_DWORD *)(a1 + 1548) |= 0x30000u;
    }
    *(_DWORD *)(a1 + 1524) |= 0x80000000;
    v12[2374] = 0;
  }
  if ((*v11 & a3) == 0)
  {
    *(_DWORD *)(a1 + 1524) |= 0x2000000u;
    *v11 = 0;
  }
  if ((v11[2] & a4) == 0)
  {
    *(_DWORD *)(a1 + 1524) |= 0x4000000u;
    v11[2] = 0;
  }
  if (*(_DWORD *)(a1 + 2216) & *(_DWORD *)(a1 + 1544) | *(_DWORD *)(a1 + 2220) & *(_DWORD *)(a1 + 1548) | (*(_DWORD *)(a1 + 2212) | 0xFC000000) & *(_DWORD *)(a1 + 1540))
  {
    updated = gleUpdateDeferredStateGL3((int8x16_t *)a1, a2, a3, a4, 0xFC000000);
    if (updated)
    {
LABEL_96:
      if (updated != 16711680 && !*((_WORD *)v11 + 576))
      {
        v15 = 0;
        *((_WORD *)v11 + 576) = updated;
        return v15;
      }
      return 0;
    }
  }
  if ((v12[2376] & a2) == 0)
  {
    if (!*((_WORD *)v11 + 576))
    {
      v15 = 0;
      *((_WORD *)v11 + 576) = 1282;
      return v15;
    }
    return 0;
  }
  v17 = *(int8x16_t *)(a1 + 1520);
  v18 = vandq_s8(v17, *(int8x16_t *)(a1 + 2224));
  v19 = vorr_s8(*(int8x8_t *)v18.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL));
  if (v19.i32[0] | *(_DWORD *)(a1 + 1536) & *(_DWORD *)(a1 + 2240) | v19.i32[1])
  {
    if ((v17.i16[6] & 0x1000) != 0)
    {
      v20 = *(_QWORD **)(a1 + 26384);
      if (v20)
      {
        v21 = v20[118];
        if (v21)
        {
          v22 = v20 + 118;
          if (v11[3816])
          {
            v23 = 0;
            v24 = v20[119];
            v25 = v20 + 221;
            do
            {
              *(v25 - 1) |= v21;
              *v25 |= v24;
              ++v23;
              v25 += 35;
            }
            while (v23 < v11[3816]);
          }
          *v22 = 0;
          v22[1] = 0;
        }
      }
    }
    *(_DWORD *)(a1 + 2280) = a2;
    *(_BYTE *)(a1 + 2284) = a3;
    *(_BYTE *)(a1 + 2285) = a4;
    gleUpdateContextStateBuffers(a1);
    if (v11[3823])
      v26 = mach_absolute_time();
    else
      v26 = 0;
    v27 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 + 29448) + 144))(*(_QWORD *)(a1 + 29016), a1 + 29040, a1 + 1520);
    v28 = gleUpdateDispatchJIT(a1);
    if (v11[3823])
      *(_QWORD *)(a1 + 19176) += mach_absolute_time() - v26;
    v29 = *((_DWORD *)v11 + 279) ^ v27;
    if ((v29 & 0x47) != 0)
    {
      if ((v29 & 0x45) != 0 && (v30 = gleUpdateDispatchCodeChange(a1, v27, 4227858432, v28)) != 0)
      {
        v15 = 0;
        if (!*((_WORD *)v11 + 576))
          *((_WORD *)v11 + 576) = v30;
      }
      else
      {
        v15 = 1;
      }
      if ((v27 & 2) != 0)
      {
        v31 = *(_QWORD *)(a1 + 26280) != 0;
        v32 = *(_QWORD *)(a1 + 29032);
        v33 = *(_QWORD *)(v32 + 536);
        *(_QWORD *)(a1 + 26280) = v33;
        v34 = *(_QWORD *)(v32 + 544);
        *(_QWORD *)(a1 + 26288) = v34;
        if (v33 && !*(_BYTE *)(v33 + 2))
          *(_BYTE *)(v33 + 2) = 1;
        v35 = v31 ^ (v33 == 0);
        if (v34 && !*(_BYTE *)(v34 + 2))
          *(_BYTE *)(v34 + 2) = 1;
        if ((v35 & 1) == 0)
          gleSelectPrimitiveFunc(a1);
        gleSelectVertexSubmitFunc(a1);
      }
      if ((v27 & 0x20) != 0)
        goto LABEL_55;
    }
    else
    {
      v15 = 1;
      if ((v27 & 0x20) != 0)
        goto LABEL_55;
    }
    v36 = v12[2374];
    if ((v36 & a2) != 0)
    {
LABEL_59:
      *(_DWORD *)(a1 + 2280) = v36;
      if ((v27 & 0x80) != 0 || (LODWORD(v39) = *v11, (v39 & a3) == 0))
      {
        v40 = 0;
        v39 = *(_QWORD *)(a1 + 29032);
        do
        {
          if ((*(_BYTE *)(v39 + 632 + v40) & a3) != 0)
            break;
          ++v40;
        }
        while (v40 != 4);
        LOBYTE(v39) = *(_BYTE *)(v39 + v40 + 632);
        *v11 = v39;
      }
      *(_BYTE *)(a1 + 2284) = v39;
      if ((v27 & 0x100) != 0 || (LODWORD(v41) = v11[2], (v41 & a4) == 0))
      {
        v42 = 0;
        v41 = *(_QWORD *)(a1 + 29032);
        do
        {
          if ((*(_BYTE *)(v41 + 636 + v42) & a4) != 0)
            break;
          ++v42;
        }
        while (v42 != 4);
        LOBYTE(v41) = *(_BYTE *)(v41 + v42 + 636);
        v11[2] = v41;
      }
      *(_BYTE *)(a1 + 2285) = v41;
      v43 = *(_DWORD *)(a1 + 1532);
      if ((v43 & 0xF836000) != 0)
      {
        if ((v27 & 1) != 0 && (v43 & 0x802000) != 0)
        {
          *(_OWORD *)(a1 + 1664) = 0u;
          *(_OWORD *)(a1 + 1648) = 0u;
          *(_OWORD *)(a1 + 1632) = 0u;
          *(_OWORD *)(a1 + 1616) = 0u;
          *(_OWORD *)(a1 + 1600) = 0u;
          *(_OWORD *)(a1 + 1584) = 0u;
          *(_OWORD *)(a1 + 1568) = 0u;
          *(_OWORD *)(a1 + 1552) = 0u;
        }
        if ((v27 & 1) != 0 && (v43 & 0x1004000) != 0)
        {
          *(_OWORD *)(a1 + 1792) = 0u;
          *(_OWORD *)(a1 + 1776) = 0u;
          *(_OWORD *)(a1 + 1760) = 0u;
          *(_OWORD *)(a1 + 1744) = 0u;
          *(_OWORD *)(a1 + 1728) = 0u;
          *(_OWORD *)(a1 + 1712) = 0u;
          *(_OWORD *)(a1 + 1696) = 0u;
          *(_OWORD *)(a1 + 1680) = 0u;
        }
        if ((v27 & 1) != 0 && (v43 & 0x2008000) != 0)
        {
          *(_OWORD *)(a1 + 1920) = 0u;
          *(_OWORD *)(a1 + 1904) = 0u;
          *(_OWORD *)(a1 + 1888) = 0u;
          *(_OWORD *)(a1 + 1872) = 0u;
          *(_OWORD *)(a1 + 1856) = 0u;
          *(_OWORD *)(a1 + 1840) = 0u;
          *(_OWORD *)(a1 + 1824) = 0u;
          *(_OWORD *)(a1 + 1808) = 0u;
        }
        if ((v27 & 1) != 0 && (v43 & 0x4010000) != 0)
        {
          *(_OWORD *)(a1 + 2048) = 0u;
          *(_OWORD *)(a1 + 2032) = 0u;
          *(_OWORD *)(a1 + 2016) = 0u;
          *(_OWORD *)(a1 + 2000) = 0u;
          *(_OWORD *)(a1 + 1984) = 0u;
          *(_OWORD *)(a1 + 1968) = 0u;
          *(_OWORD *)(a1 + 1952) = 0u;
          *(_OWORD *)(a1 + 1936) = 0u;
        }
        if ((v27 & 4) != 0 && (v43 & 0x8020000) != 0)
        {
          *(_OWORD *)(a1 + 2176) = 0u;
          *(_OWORD *)(a1 + 2160) = 0u;
          *(_OWORD *)(a1 + 2144) = 0u;
          *(_OWORD *)(a1 + 2128) = 0u;
          *(_OWORD *)(a1 + 2112) = 0u;
          *(_OWORD *)(a1 + 2096) = 0u;
          *(_OWORD *)(a1 + 2080) = 0u;
          *(_OWORD *)(a1 + 2064) = 0u;
        }
      }
      *(_QWORD *)(a1 + 1520) = 0;
      *(_QWORD *)(a1 + 1528) = 0;
      *(_DWORD *)(a1 + 1536) = 0;
      goto LABEL_88;
    }
LABEL_55:
    v37 = 0;
    v38 = *(_QWORD *)(a1 + 29032);
    do
    {
      if ((*(_DWORD *)(v38 + 584 + 4 * v37) & a2) != 0)
        break;
      ++v37;
    }
    while (v37 != 8);
    v36 = *(_DWORD *)(v38 + 4 * v37 + 584);
    v12[2374] = v36;
    goto LABEL_59;
  }
  v15 = 1;
LABEL_88:
  if (!*(_DWORD *)(a1 + 1540))
  {
    v12[2375] = v12[2376] & v12[2374];
    v11[1] = *v11;
    v11[3] = v11[2];
  }
  return v15;
}

uint64_t gleDoDrawDispatchCoreES2(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, double a5, double a6, double a7)
{
  unsigned __int8 *v11;
  unsigned int *v12;
  int MatrixIdentifier;
  int updated;
  uint64_t v15;
  unsigned int v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x8_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  int v29;
  int v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;

  v11 = (unsigned __int8 *)(a1 + 28680);
  v12 = (unsigned int *)(a1 + 19152);
  if ((*(_BYTE *)(a1 + 1540) & 4) != 0)
  {
    MatrixIdentifier = gleGenerateMatrixIdentifier(a1, a1 + 9488, a5, a6, a7);
    *v12 = *v12 & 0xFFFFFEFF | ((MatrixIdentifier != -1074791426) << 8);
    *((_DWORD *)v11 + 263) = MatrixIdentifier;
  }
  if ((*((_DWORD *)v11 + 280) & 0x743C0478) != 0)
  {
    updated = gleUpdateDrawFramebufferState(a1, a5, a6, a7);
    if (updated)
      goto LABEL_96;
  }
  v16 = v12[2374];
  if ((v16 & a2) == 0)
  {
    if ((*(_WORD *)(*(_QWORD *)(a1 + 29032) + 26) & 0x800) != 0 && *(_BYTE *)(a1 + 15377) && ((v16 | a2) & 1) != 0)
    {
      v12[2375] = 0;
      *(_DWORD *)(a1 + 1548) |= 0x30000u;
    }
    *(_DWORD *)(a1 + 1524) |= 0x80000000;
    v12[2374] = 0;
  }
  if ((*v11 & a3) == 0)
  {
    *(_DWORD *)(a1 + 1524) |= 0x2000000u;
    *v11 = 0;
  }
  if ((v11[2] & a4) == 0)
  {
    *(_DWORD *)(a1 + 1524) |= 0x4000000u;
    v11[2] = 0;
  }
  if (*(_DWORD *)(a1 + 2216) & *(_DWORD *)(a1 + 1544) | *(_DWORD *)(a1 + 2220) & *(_DWORD *)(a1 + 1548) | (*(_DWORD *)(a1 + 2212) | 0xFC000000) & *(_DWORD *)(a1 + 1540))
  {
    updated = gleUpdateDeferredStateES2((int8x16_t *)a1, a2, a3, a4, 0xFC000000);
    if (updated)
    {
LABEL_96:
      if (updated != 16711680 && !*((_WORD *)v11 + 576))
      {
        v15 = 0;
        *((_WORD *)v11 + 576) = updated;
        return v15;
      }
      return 0;
    }
  }
  if ((v12[2376] & a2) == 0)
  {
    if (!*((_WORD *)v11 + 576))
    {
      v15 = 0;
      *((_WORD *)v11 + 576) = 1282;
      return v15;
    }
    return 0;
  }
  v17 = *(int8x16_t *)(a1 + 1520);
  v18 = vandq_s8(v17, *(int8x16_t *)(a1 + 2224));
  v19 = vorr_s8(*(int8x8_t *)v18.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL));
  if (v19.i32[0] | *(_DWORD *)(a1 + 1536) & *(_DWORD *)(a1 + 2240) | v19.i32[1])
  {
    if ((v17.i16[6] & 0x1000) != 0)
    {
      v20 = *(_QWORD **)(a1 + 26384);
      if (v20)
      {
        v21 = v20[118];
        if (v21)
        {
          v22 = v20 + 118;
          if (v11[3816])
          {
            v23 = 0;
            v24 = v20[119];
            v25 = v20 + 221;
            do
            {
              *(v25 - 1) |= v21;
              *v25 |= v24;
              ++v23;
              v25 += 35;
            }
            while (v23 < v11[3816]);
          }
          *v22 = 0;
          v22[1] = 0;
        }
      }
    }
    *(_DWORD *)(a1 + 2280) = a2;
    *(_BYTE *)(a1 + 2284) = a3;
    *(_BYTE *)(a1 + 2285) = a4;
    gleUpdateContextStateBuffers(a1);
    if (v11[3823])
      v26 = mach_absolute_time();
    else
      v26 = 0;
    v27 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 + 29448) + 144))(*(_QWORD *)(a1 + 29016), a1 + 29040, a1 + 1520);
    v28 = gleUpdateDispatchJIT(a1);
    if (v11[3823])
      *(_QWORD *)(a1 + 19176) += mach_absolute_time() - v26;
    v29 = *((_DWORD *)v11 + 279) ^ v27;
    if ((v29 & 0x47) != 0)
    {
      if ((v29 & 0x45) != 0 && (v30 = gleUpdateDispatchCodeChange(a1, v27, 4227858432, v28)) != 0)
      {
        v15 = 0;
        if (!*((_WORD *)v11 + 576))
          *((_WORD *)v11 + 576) = v30;
      }
      else
      {
        v15 = 1;
      }
      if ((v27 & 2) != 0)
      {
        v31 = *(_QWORD *)(a1 + 26280) != 0;
        v32 = *(_QWORD *)(a1 + 29032);
        v33 = *(_QWORD *)(v32 + 536);
        *(_QWORD *)(a1 + 26280) = v33;
        v34 = *(_QWORD *)(v32 + 544);
        *(_QWORD *)(a1 + 26288) = v34;
        if (v33 && !*(_BYTE *)(v33 + 2))
          *(_BYTE *)(v33 + 2) = 1;
        v35 = v31 ^ (v33 == 0);
        if (v34 && !*(_BYTE *)(v34 + 2))
          *(_BYTE *)(v34 + 2) = 1;
        if ((v35 & 1) == 0)
          gleSelectPrimitiveFunc(a1);
        gleSelectVertexSubmitFunc(a1);
      }
      if ((v27 & 0x20) != 0)
        goto LABEL_55;
    }
    else
    {
      v15 = 1;
      if ((v27 & 0x20) != 0)
        goto LABEL_55;
    }
    v36 = v12[2374];
    if ((v36 & a2) != 0)
    {
LABEL_59:
      *(_DWORD *)(a1 + 2280) = v36;
      if ((v27 & 0x80) != 0 || (LODWORD(v39) = *v11, (v39 & a3) == 0))
      {
        v40 = 0;
        v39 = *(_QWORD *)(a1 + 29032);
        do
        {
          if ((*(_BYTE *)(v39 + 632 + v40) & a3) != 0)
            break;
          ++v40;
        }
        while (v40 != 4);
        LOBYTE(v39) = *(_BYTE *)(v39 + v40 + 632);
        *v11 = v39;
      }
      *(_BYTE *)(a1 + 2284) = v39;
      if ((v27 & 0x100) != 0 || (LODWORD(v41) = v11[2], (v41 & a4) == 0))
      {
        v42 = 0;
        v41 = *(_QWORD *)(a1 + 29032);
        do
        {
          if ((*(_BYTE *)(v41 + 636 + v42) & a4) != 0)
            break;
          ++v42;
        }
        while (v42 != 4);
        LOBYTE(v41) = *(_BYTE *)(v41 + v42 + 636);
        v11[2] = v41;
      }
      *(_BYTE *)(a1 + 2285) = v41;
      v43 = *(_DWORD *)(a1 + 1532);
      if ((v43 & 0xF836000) != 0)
      {
        if ((v27 & 1) != 0 && (v43 & 0x802000) != 0)
        {
          *(_OWORD *)(a1 + 1664) = 0u;
          *(_OWORD *)(a1 + 1648) = 0u;
          *(_OWORD *)(a1 + 1632) = 0u;
          *(_OWORD *)(a1 + 1616) = 0u;
          *(_OWORD *)(a1 + 1600) = 0u;
          *(_OWORD *)(a1 + 1584) = 0u;
          *(_OWORD *)(a1 + 1568) = 0u;
          *(_OWORD *)(a1 + 1552) = 0u;
        }
        if ((v27 & 1) != 0 && (v43 & 0x1004000) != 0)
        {
          *(_OWORD *)(a1 + 1792) = 0u;
          *(_OWORD *)(a1 + 1776) = 0u;
          *(_OWORD *)(a1 + 1760) = 0u;
          *(_OWORD *)(a1 + 1744) = 0u;
          *(_OWORD *)(a1 + 1728) = 0u;
          *(_OWORD *)(a1 + 1712) = 0u;
          *(_OWORD *)(a1 + 1696) = 0u;
          *(_OWORD *)(a1 + 1680) = 0u;
        }
        if ((v27 & 1) != 0 && (v43 & 0x2008000) != 0)
        {
          *(_OWORD *)(a1 + 1920) = 0u;
          *(_OWORD *)(a1 + 1904) = 0u;
          *(_OWORD *)(a1 + 1888) = 0u;
          *(_OWORD *)(a1 + 1872) = 0u;
          *(_OWORD *)(a1 + 1856) = 0u;
          *(_OWORD *)(a1 + 1840) = 0u;
          *(_OWORD *)(a1 + 1824) = 0u;
          *(_OWORD *)(a1 + 1808) = 0u;
        }
        if ((v27 & 1) != 0 && (v43 & 0x4010000) != 0)
        {
          *(_OWORD *)(a1 + 2048) = 0u;
          *(_OWORD *)(a1 + 2032) = 0u;
          *(_OWORD *)(a1 + 2016) = 0u;
          *(_OWORD *)(a1 + 2000) = 0u;
          *(_OWORD *)(a1 + 1984) = 0u;
          *(_OWORD *)(a1 + 1968) = 0u;
          *(_OWORD *)(a1 + 1952) = 0u;
          *(_OWORD *)(a1 + 1936) = 0u;
        }
        if ((v27 & 4) != 0 && (v43 & 0x8020000) != 0)
        {
          *(_OWORD *)(a1 + 2176) = 0u;
          *(_OWORD *)(a1 + 2160) = 0u;
          *(_OWORD *)(a1 + 2144) = 0u;
          *(_OWORD *)(a1 + 2128) = 0u;
          *(_OWORD *)(a1 + 2112) = 0u;
          *(_OWORD *)(a1 + 2096) = 0u;
          *(_OWORD *)(a1 + 2080) = 0u;
          *(_OWORD *)(a1 + 2064) = 0u;
        }
      }
      *(_QWORD *)(a1 + 1520) = 0;
      *(_QWORD *)(a1 + 1528) = 0;
      *(_DWORD *)(a1 + 1536) = 0;
      goto LABEL_88;
    }
LABEL_55:
    v37 = 0;
    v38 = *(_QWORD *)(a1 + 29032);
    do
    {
      if ((*(_DWORD *)(v38 + 584 + 4 * v37) & a2) != 0)
        break;
      ++v37;
    }
    while (v37 != 8);
    v36 = *(_DWORD *)(v38 + 4 * v37 + 584);
    v12[2374] = v36;
    goto LABEL_59;
  }
  v15 = 1;
LABEL_88:
  if (!*(_DWORD *)(a1 + 1540))
  {
    v12[2375] = v12[2376] & v12[2374];
    v11[1] = *v11;
    v11[3] = v11[2];
  }
  return v15;
}

uint64_t gleDoSelectiveDispatchNoErrorCore(unint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, __n128 a6, double a7, double a8)
{
  unint64_t v13;
  uint64_t result;
  int8x16_t v15;
  int8x16_t v16;
  int8x8_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  int v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;

  v13 = a1 + 28648;
  if ((*(_DWORD *)(a1 + 29800) & 0x743C0478) == 0
    || (result = gleUpdateDrawFramebufferState(a1, a6.n128_f64[0], a7, a8), !(_DWORD)result))
  {
    if ((*(_DWORD *)v13 & a2) == 0)
    {
      if ((*(_WORD *)(*(_QWORD *)(a1 + 29032) + 26) & 0x800) != 0
        && *(_BYTE *)(a1 + 15377)
        && ((*(_DWORD *)v13 | a2) & 1) != 0)
      {
        *(_DWORD *)(v13 + 4) = 0;
        *(_DWORD *)(a1 + 1548) |= 0x30000u;
      }
      *(_DWORD *)(a1 + 1524) |= 0x80000000;
      *(_DWORD *)v13 = 0;
    }
    if ((*(_BYTE *)(v13 + 32) & a3) == 0)
    {
      *(_DWORD *)(a1 + 1524) |= 0x2000000u;
      *(_BYTE *)(v13 + 32) = 0;
    }
    if ((*(_BYTE *)(v13 + 34) & a4) == 0)
    {
      *(_DWORD *)(a1 + 1524) |= 0x4000000u;
      *(_BYTE *)(v13 + 34) = 0;
    }
    if (!(*(_DWORD *)(a1 + 2216) & *(_DWORD *)(a1 + 1544) | *(_DWORD *)(a1 + 2220) & *(_DWORD *)(a1 + 1548) | (*(_DWORD *)(a1 + 2212) | a5) & *(_DWORD *)(a1 + 1540))
      || (result = gleUpdateDeferredState(a1, a2, a3, a4, a5, a6, a7, a8), !(_DWORD)result))
    {
      v15 = *(int8x16_t *)(a1 + 1520);
      v16 = vandq_s8(v15, *(int8x16_t *)(a1 + 2224));
      v17 = vorr_s8(*(int8x8_t *)v16.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL));
      if (v17.i32[0] | *(_DWORD *)(a1 + 1536) & *(_DWORD *)(a1 + 2240) | v17.i32[1])
      {
        if ((v15.i16[6] & 0x1000) != 0)
        {
          v18 = *(_QWORD **)(a1 + 26384);
          if (v18)
          {
            v19 = v18[118];
            if (v19)
            {
              v20 = v18 + 118;
              if (*(_BYTE *)(v13 + 3848))
              {
                v21 = 0;
                v22 = v18[119];
                v23 = v18 + 221;
                do
                {
                  *(v23 - 1) |= v19;
                  *v23 |= v22;
                  ++v21;
                  v23 += 35;
                }
                while (v21 < *(unsigned __int8 *)(v13 + 3848));
              }
              *v20 = 0;
              v20[1] = 0;
            }
          }
        }
        *(_DWORD *)(a1 + 2280) = a2;
        *(_BYTE *)(a1 + 2284) = a3;
        *(_BYTE *)(a1 + 2285) = a4;
        gleUpdateContextStateBuffers(a1);
        if (*(_BYTE *)(v13 + 3855))
          v24 = mach_absolute_time();
        else
          v24 = 0;
        v25 = (*(uint64_t (**)(_QWORD, unint64_t, unint64_t))(*(_QWORD *)(a1 + 29448) + 144))(*(_QWORD *)(a1 + 29016), a1 + 29040, a1 + 1520);
        gleUpdateDispatchJIT(a1);
        if (*(_BYTE *)(v13 + 3855))
          *(_QWORD *)(a1 + 19176) += mach_absolute_time() - v24;
        v26 = *(_DWORD *)(v13 + 1148) ^ v25;
        if ((v26 & 0x47) != 0)
        {
          if ((v26 & 0x45) != 0)
            gleUpdateDispatchCodeChange(a1, v25, a5);
          if ((v25 & 2) != 0)
          {
            v27 = *(_QWORD *)(a1 + 26280) != 0;
            v28 = *(_QWORD *)(a1 + 29032);
            v29 = *(_QWORD *)(v28 + 536);
            *(_QWORD *)(a1 + 26280) = v29;
            v30 = *(_QWORD *)(v28 + 544);
            *(_QWORD *)(a1 + 26288) = v30;
            if (v29 && !*(_BYTE *)(v29 + 2))
              *(_BYTE *)(v29 + 2) = 1;
            v31 = v27 ^ (v29 == 0);
            if (v30 && !*(_BYTE *)(v30 + 2))
              *(_BYTE *)(v30 + 2) = 1;
            if ((v31 & 1) == 0)
              gleSelectPrimitiveFunc(a1);
            gleSelectVertexSubmitFunc(a1);
          }
        }
        if ((v25 & 0x20) != 0 || (v32 = *(_DWORD *)v13, (*(_DWORD *)v13 & a2) == 0))
        {
          v33 = 0;
          v34 = *(_QWORD *)(a1 + 29032);
          do
          {
            if ((*(_DWORD *)(v34 + 584 + 4 * v33) & a2) != 0)
              break;
            ++v33;
          }
          while (v33 != 8);
          v32 = *(_DWORD *)(v34 + 4 * v33 + 584);
          *(_DWORD *)v13 = v32;
        }
        *(_DWORD *)(a1 + 2280) = v32;
        if ((v25 & 0x80) != 0 || (LODWORD(v35) = *(unsigned __int8 *)(v13 + 32), (v35 & a3) == 0))
        {
          v36 = 0;
          v35 = *(_QWORD *)(a1 + 29032);
          do
          {
            if ((*(_BYTE *)(v35 + 632 + v36) & a3) != 0)
              break;
            ++v36;
          }
          while (v36 != 4);
          LOBYTE(v35) = *(_BYTE *)(v35 + v36 + 632);
          *(_BYTE *)(v13 + 32) = v35;
        }
        *(_BYTE *)(a1 + 2284) = v35;
        if ((v25 & 0x100) != 0 || (LODWORD(v37) = *(unsigned __int8 *)(v13 + 34), (v37 & a4) == 0))
        {
          v38 = 0;
          v37 = *(_QWORD *)(a1 + 29032);
          do
          {
            if ((*(_BYTE *)(v37 + 636 + v38) & a4) != 0)
              break;
            ++v38;
          }
          while (v38 != 4);
          LOBYTE(v37) = *(_BYTE *)(v37 + v38 + 636);
          *(_BYTE *)(v13 + 34) = v37;
        }
        *(_BYTE *)(a1 + 2285) = v37;
        v39 = *(_DWORD *)(a1 + 1532);
        if ((v39 & 0xF836000) != 0)
        {
          if ((v25 & 1) != 0 && (v39 & 0x802000) != 0)
          {
            *(_OWORD *)(a1 + 1664) = 0u;
            *(_OWORD *)(a1 + 1648) = 0u;
            *(_OWORD *)(a1 + 1632) = 0u;
            *(_OWORD *)(a1 + 1616) = 0u;
            *(_OWORD *)(a1 + 1600) = 0u;
            *(_OWORD *)(a1 + 1584) = 0u;
            *(_OWORD *)(a1 + 1568) = 0u;
            *(_OWORD *)(a1 + 1552) = 0u;
          }
          if ((v25 & 1) != 0 && (v39 & 0x1004000) != 0)
          {
            *(_OWORD *)(a1 + 1792) = 0u;
            *(_OWORD *)(a1 + 1776) = 0u;
            *(_OWORD *)(a1 + 1760) = 0u;
            *(_OWORD *)(a1 + 1744) = 0u;
            *(_OWORD *)(a1 + 1728) = 0u;
            *(_OWORD *)(a1 + 1712) = 0u;
            *(_OWORD *)(a1 + 1696) = 0u;
            *(_OWORD *)(a1 + 1680) = 0u;
          }
          if ((v25 & 1) != 0 && (v39 & 0x2008000) != 0)
          {
            *(_OWORD *)(a1 + 1920) = 0u;
            *(_OWORD *)(a1 + 1904) = 0u;
            *(_OWORD *)(a1 + 1888) = 0u;
            *(_OWORD *)(a1 + 1872) = 0u;
            *(_OWORD *)(a1 + 1856) = 0u;
            *(_OWORD *)(a1 + 1840) = 0u;
            *(_OWORD *)(a1 + 1824) = 0u;
            *(_OWORD *)(a1 + 1808) = 0u;
          }
          if ((v25 & 1) != 0 && (v39 & 0x4010000) != 0)
          {
            *(_OWORD *)(a1 + 2048) = 0u;
            *(_OWORD *)(a1 + 2032) = 0u;
            *(_OWORD *)(a1 + 2016) = 0u;
            *(_OWORD *)(a1 + 2000) = 0u;
            *(_OWORD *)(a1 + 1984) = 0u;
            *(_OWORD *)(a1 + 1968) = 0u;
            *(_OWORD *)(a1 + 1952) = 0u;
            *(_OWORD *)(a1 + 1936) = 0u;
          }
          if ((v25 & 4) != 0 && (v39 & 0x8020000) != 0)
          {
            *(_OWORD *)(a1 + 2176) = 0u;
            *(_OWORD *)(a1 + 2160) = 0u;
            *(_OWORD *)(a1 + 2144) = 0u;
            *(_OWORD *)(a1 + 2128) = 0u;
            *(_OWORD *)(a1 + 2112) = 0u;
            *(_OWORD *)(a1 + 2096) = 0u;
            *(_OWORD *)(a1 + 2080) = 0u;
            *(_OWORD *)(a1 + 2064) = 0u;
          }
        }
        *(_QWORD *)(a1 + 1520) = 0;
        *(_QWORD *)(a1 + 1528) = 0;
        *(_DWORD *)(a1 + 1536) = 0;
      }
      result = 0;
      if (!*(_DWORD *)(a1 + 1540))
      {
        *(_DWORD *)(v13 + 4) = *(_DWORD *)(v13 + 8) & *(_DWORD *)v13;
        *(_BYTE *)(v13 + 33) = *(_BYTE *)(v13 + 32);
        *(_BYTE *)(v13 + 35) = *(_BYTE *)(v13 + 34);
      }
    }
  }
  return result;
}

uint64_t gleDoSelectiveDispatchNoErrorCoreGL3(unint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, double a6, double a7, double a8)
{
  unint64_t v13;
  uint64_t result;
  int8x16_t v15;
  int8x16_t v16;
  int8x8_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  int v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;

  v13 = a1 + 28648;
  if ((*(_DWORD *)(a1 + 29800) & 0x743C0478) == 0
    || (result = gleUpdateDrawFramebufferState(a1, a6, a7, a8), !(_DWORD)result))
  {
    if ((*(_DWORD *)v13 & a2) == 0)
    {
      if ((*(_WORD *)(*(_QWORD *)(a1 + 29032) + 26) & 0x800) != 0
        && *(_BYTE *)(a1 + 15377)
        && ((*(_DWORD *)v13 | a2) & 1) != 0)
      {
        *(_DWORD *)(v13 + 4) = 0;
        *(_DWORD *)(a1 + 1548) |= 0x30000u;
      }
      *(_DWORD *)(a1 + 1524) |= 0x80000000;
      *(_DWORD *)v13 = 0;
    }
    if ((*(_BYTE *)(v13 + 32) & a3) == 0)
    {
      *(_DWORD *)(a1 + 1524) |= 0x2000000u;
      *(_BYTE *)(v13 + 32) = 0;
    }
    if ((*(_BYTE *)(v13 + 34) & a4) == 0)
    {
      *(_DWORD *)(a1 + 1524) |= 0x4000000u;
      *(_BYTE *)(v13 + 34) = 0;
    }
    if (!(*(_DWORD *)(a1 + 2216) & *(_DWORD *)(a1 + 1544) | *(_DWORD *)(a1 + 2220) & *(_DWORD *)(a1 + 1548) | (*(_DWORD *)(a1 + 2212) | a5) & *(_DWORD *)(a1 + 1540))
      || (result = gleUpdateDeferredStateGL3((int8x16_t *)a1, a2, a3, a4, a5), !(_DWORD)result))
    {
      v15 = *(int8x16_t *)(a1 + 1520);
      v16 = vandq_s8(v15, *(int8x16_t *)(a1 + 2224));
      v17 = vorr_s8(*(int8x8_t *)v16.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL));
      if (v17.i32[0] | *(_DWORD *)(a1 + 1536) & *(_DWORD *)(a1 + 2240) | v17.i32[1])
      {
        if ((v15.i16[6] & 0x1000) != 0)
        {
          v18 = *(_QWORD **)(a1 + 26384);
          if (v18)
          {
            v19 = v18[118];
            if (v19)
            {
              v20 = v18 + 118;
              if (*(_BYTE *)(v13 + 3848))
              {
                v21 = 0;
                v22 = v18[119];
                v23 = v18 + 221;
                do
                {
                  *(v23 - 1) |= v19;
                  *v23 |= v22;
                  ++v21;
                  v23 += 35;
                }
                while (v21 < *(unsigned __int8 *)(v13 + 3848));
              }
              *v20 = 0;
              v20[1] = 0;
            }
          }
        }
        *(_DWORD *)(a1 + 2280) = a2;
        *(_BYTE *)(a1 + 2284) = a3;
        *(_BYTE *)(a1 + 2285) = a4;
        gleUpdateContextStateBuffers(a1);
        if (*(_BYTE *)(v13 + 3855))
          v24 = mach_absolute_time();
        else
          v24 = 0;
        v25 = (*(uint64_t (**)(_QWORD, unint64_t, unint64_t))(*(_QWORD *)(a1 + 29448) + 144))(*(_QWORD *)(a1 + 29016), a1 + 29040, a1 + 1520);
        gleUpdateDispatchJIT(a1);
        if (*(_BYTE *)(v13 + 3855))
          *(_QWORD *)(a1 + 19176) += mach_absolute_time() - v24;
        v26 = *(_DWORD *)(v13 + 1148) ^ v25;
        if ((v26 & 0x47) != 0)
        {
          if ((v26 & 0x45) != 0)
            gleUpdateDispatchCodeChange(a1, v25, a5);
          if ((v25 & 2) != 0)
          {
            v27 = *(_QWORD *)(a1 + 26280) != 0;
            v28 = *(_QWORD *)(a1 + 29032);
            v29 = *(_QWORD *)(v28 + 536);
            *(_QWORD *)(a1 + 26280) = v29;
            v30 = *(_QWORD *)(v28 + 544);
            *(_QWORD *)(a1 + 26288) = v30;
            if (v29 && !*(_BYTE *)(v29 + 2))
              *(_BYTE *)(v29 + 2) = 1;
            v31 = v27 ^ (v29 == 0);
            if (v30 && !*(_BYTE *)(v30 + 2))
              *(_BYTE *)(v30 + 2) = 1;
            if ((v31 & 1) == 0)
              gleSelectPrimitiveFunc(a1);
            gleSelectVertexSubmitFunc(a1);
          }
        }
        if ((v25 & 0x20) != 0 || (v32 = *(_DWORD *)v13, (*(_DWORD *)v13 & a2) == 0))
        {
          v33 = 0;
          v34 = *(_QWORD *)(a1 + 29032);
          do
          {
            if ((*(_DWORD *)(v34 + 584 + 4 * v33) & a2) != 0)
              break;
            ++v33;
          }
          while (v33 != 8);
          v32 = *(_DWORD *)(v34 + 4 * v33 + 584);
          *(_DWORD *)v13 = v32;
        }
        *(_DWORD *)(a1 + 2280) = v32;
        if ((v25 & 0x80) != 0 || (LODWORD(v35) = *(unsigned __int8 *)(v13 + 32), (v35 & a3) == 0))
        {
          v36 = 0;
          v35 = *(_QWORD *)(a1 + 29032);
          do
          {
            if ((*(_BYTE *)(v35 + 632 + v36) & a3) != 0)
              break;
            ++v36;
          }
          while (v36 != 4);
          LOBYTE(v35) = *(_BYTE *)(v35 + v36 + 632);
          *(_BYTE *)(v13 + 32) = v35;
        }
        *(_BYTE *)(a1 + 2284) = v35;
        if ((v25 & 0x100) != 0 || (LODWORD(v37) = *(unsigned __int8 *)(v13 + 34), (v37 & a4) == 0))
        {
          v38 = 0;
          v37 = *(_QWORD *)(a1 + 29032);
          do
          {
            if ((*(_BYTE *)(v37 + 636 + v38) & a4) != 0)
              break;
            ++v38;
          }
          while (v38 != 4);
          LOBYTE(v37) = *(_BYTE *)(v37 + v38 + 636);
          *(_BYTE *)(v13 + 34) = v37;
        }
        *(_BYTE *)(a1 + 2285) = v37;
        v39 = *(_DWORD *)(a1 + 1532);
        if ((v39 & 0xF836000) != 0)
        {
          if ((v25 & 1) != 0 && (v39 & 0x802000) != 0)
          {
            *(_OWORD *)(a1 + 1664) = 0u;
            *(_OWORD *)(a1 + 1648) = 0u;
            *(_OWORD *)(a1 + 1632) = 0u;
            *(_OWORD *)(a1 + 1616) = 0u;
            *(_OWORD *)(a1 + 1600) = 0u;
            *(_OWORD *)(a1 + 1584) = 0u;
            *(_OWORD *)(a1 + 1568) = 0u;
            *(_OWORD *)(a1 + 1552) = 0u;
          }
          if ((v25 & 1) != 0 && (v39 & 0x1004000) != 0)
          {
            *(_OWORD *)(a1 + 1792) = 0u;
            *(_OWORD *)(a1 + 1776) = 0u;
            *(_OWORD *)(a1 + 1760) = 0u;
            *(_OWORD *)(a1 + 1744) = 0u;
            *(_OWORD *)(a1 + 1728) = 0u;
            *(_OWORD *)(a1 + 1712) = 0u;
            *(_OWORD *)(a1 + 1696) = 0u;
            *(_OWORD *)(a1 + 1680) = 0u;
          }
          if ((v25 & 1) != 0 && (v39 & 0x2008000) != 0)
          {
            *(_OWORD *)(a1 + 1920) = 0u;
            *(_OWORD *)(a1 + 1904) = 0u;
            *(_OWORD *)(a1 + 1888) = 0u;
            *(_OWORD *)(a1 + 1872) = 0u;
            *(_OWORD *)(a1 + 1856) = 0u;
            *(_OWORD *)(a1 + 1840) = 0u;
            *(_OWORD *)(a1 + 1824) = 0u;
            *(_OWORD *)(a1 + 1808) = 0u;
          }
          if ((v25 & 1) != 0 && (v39 & 0x4010000) != 0)
          {
            *(_OWORD *)(a1 + 2048) = 0u;
            *(_OWORD *)(a1 + 2032) = 0u;
            *(_OWORD *)(a1 + 2016) = 0u;
            *(_OWORD *)(a1 + 2000) = 0u;
            *(_OWORD *)(a1 + 1984) = 0u;
            *(_OWORD *)(a1 + 1968) = 0u;
            *(_OWORD *)(a1 + 1952) = 0u;
            *(_OWORD *)(a1 + 1936) = 0u;
          }
          if ((v25 & 4) != 0 && (v39 & 0x8020000) != 0)
          {
            *(_OWORD *)(a1 + 2176) = 0u;
            *(_OWORD *)(a1 + 2160) = 0u;
            *(_OWORD *)(a1 + 2144) = 0u;
            *(_OWORD *)(a1 + 2128) = 0u;
            *(_OWORD *)(a1 + 2112) = 0u;
            *(_OWORD *)(a1 + 2096) = 0u;
            *(_OWORD *)(a1 + 2080) = 0u;
            *(_OWORD *)(a1 + 2064) = 0u;
          }
        }
        *(_QWORD *)(a1 + 1520) = 0;
        *(_QWORD *)(a1 + 1528) = 0;
        *(_DWORD *)(a1 + 1536) = 0;
      }
      result = 0;
      if (!*(_DWORD *)(a1 + 1540))
      {
        *(_DWORD *)(v13 + 4) = *(_DWORD *)(v13 + 8) & *(_DWORD *)v13;
        *(_BYTE *)(v13 + 33) = *(_BYTE *)(v13 + 32);
        *(_BYTE *)(v13 + 35) = *(_BYTE *)(v13 + 34);
      }
    }
  }
  return result;
}

uint64_t gleDoSelectiveDispatchNoErrorCoreES2(unint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, double a6, double a7, double a8)
{
  unint64_t v13;
  uint64_t result;
  int8x16_t v15;
  int8x16_t v16;
  int8x8_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  int v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;

  v13 = a1 + 28648;
  if ((*(_DWORD *)(a1 + 29800) & 0x743C0478) == 0
    || (result = gleUpdateDrawFramebufferState(a1, a6, a7, a8), !(_DWORD)result))
  {
    if ((*(_DWORD *)v13 & a2) == 0)
    {
      if ((*(_WORD *)(*(_QWORD *)(a1 + 29032) + 26) & 0x800) != 0
        && *(_BYTE *)(a1 + 15377)
        && ((*(_DWORD *)v13 | a2) & 1) != 0)
      {
        *(_DWORD *)(v13 + 4) = 0;
        *(_DWORD *)(a1 + 1548) |= 0x30000u;
      }
      *(_DWORD *)(a1 + 1524) |= 0x80000000;
      *(_DWORD *)v13 = 0;
    }
    if ((*(_BYTE *)(v13 + 32) & a3) == 0)
    {
      *(_DWORD *)(a1 + 1524) |= 0x2000000u;
      *(_BYTE *)(v13 + 32) = 0;
    }
    if ((*(_BYTE *)(v13 + 34) & a4) == 0)
    {
      *(_DWORD *)(a1 + 1524) |= 0x4000000u;
      *(_BYTE *)(v13 + 34) = 0;
    }
    if (!(*(_DWORD *)(a1 + 2216) & *(_DWORD *)(a1 + 1544) | *(_DWORD *)(a1 + 2220) & *(_DWORD *)(a1 + 1548) | (*(_DWORD *)(a1 + 2212) | a5) & *(_DWORD *)(a1 + 1540))
      || (result = gleUpdateDeferredStateES2((int8x16_t *)a1, a2, a3, a4, a5), !(_DWORD)result))
    {
      v15 = *(int8x16_t *)(a1 + 1520);
      v16 = vandq_s8(v15, *(int8x16_t *)(a1 + 2224));
      v17 = vorr_s8(*(int8x8_t *)v16.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL));
      if (v17.i32[0] | *(_DWORD *)(a1 + 1536) & *(_DWORD *)(a1 + 2240) | v17.i32[1])
      {
        if ((v15.i16[6] & 0x1000) != 0)
        {
          v18 = *(_QWORD **)(a1 + 26384);
          if (v18)
          {
            v19 = v18[118];
            if (v19)
            {
              v20 = v18 + 118;
              if (*(_BYTE *)(v13 + 3848))
              {
                v21 = 0;
                v22 = v18[119];
                v23 = v18 + 221;
                do
                {
                  *(v23 - 1) |= v19;
                  *v23 |= v22;
                  ++v21;
                  v23 += 35;
                }
                while (v21 < *(unsigned __int8 *)(v13 + 3848));
              }
              *v20 = 0;
              v20[1] = 0;
            }
          }
        }
        *(_DWORD *)(a1 + 2280) = a2;
        *(_BYTE *)(a1 + 2284) = a3;
        *(_BYTE *)(a1 + 2285) = a4;
        gleUpdateContextStateBuffers(a1);
        if (*(_BYTE *)(v13 + 3855))
          v24 = mach_absolute_time();
        else
          v24 = 0;
        v25 = (*(uint64_t (**)(_QWORD, unint64_t, unint64_t))(*(_QWORD *)(a1 + 29448) + 144))(*(_QWORD *)(a1 + 29016), a1 + 29040, a1 + 1520);
        gleUpdateDispatchJIT(a1);
        if (*(_BYTE *)(v13 + 3855))
          *(_QWORD *)(a1 + 19176) += mach_absolute_time() - v24;
        v26 = *(_DWORD *)(v13 + 1148) ^ v25;
        if ((v26 & 0x47) != 0)
        {
          if ((v26 & 0x45) != 0)
            gleUpdateDispatchCodeChange(a1, v25, a5);
          if ((v25 & 2) != 0)
          {
            v27 = *(_QWORD *)(a1 + 26280) != 0;
            v28 = *(_QWORD *)(a1 + 29032);
            v29 = *(_QWORD *)(v28 + 536);
            *(_QWORD *)(a1 + 26280) = v29;
            v30 = *(_QWORD *)(v28 + 544);
            *(_QWORD *)(a1 + 26288) = v30;
            if (v29 && !*(_BYTE *)(v29 + 2))
              *(_BYTE *)(v29 + 2) = 1;
            v31 = v27 ^ (v29 == 0);
            if (v30 && !*(_BYTE *)(v30 + 2))
              *(_BYTE *)(v30 + 2) = 1;
            if ((v31 & 1) == 0)
              gleSelectPrimitiveFunc(a1);
            gleSelectVertexSubmitFunc(a1);
          }
        }
        if ((v25 & 0x20) != 0 || (v32 = *(_DWORD *)v13, (*(_DWORD *)v13 & a2) == 0))
        {
          v33 = 0;
          v34 = *(_QWORD *)(a1 + 29032);
          do
          {
            if ((*(_DWORD *)(v34 + 584 + 4 * v33) & a2) != 0)
              break;
            ++v33;
          }
          while (v33 != 8);
          v32 = *(_DWORD *)(v34 + 4 * v33 + 584);
          *(_DWORD *)v13 = v32;
        }
        *(_DWORD *)(a1 + 2280) = v32;
        if ((v25 & 0x80) != 0 || (LODWORD(v35) = *(unsigned __int8 *)(v13 + 32), (v35 & a3) == 0))
        {
          v36 = 0;
          v35 = *(_QWORD *)(a1 + 29032);
          do
          {
            if ((*(_BYTE *)(v35 + 632 + v36) & a3) != 0)
              break;
            ++v36;
          }
          while (v36 != 4);
          LOBYTE(v35) = *(_BYTE *)(v35 + v36 + 632);
          *(_BYTE *)(v13 + 32) = v35;
        }
        *(_BYTE *)(a1 + 2284) = v35;
        if ((v25 & 0x100) != 0 || (LODWORD(v37) = *(unsigned __int8 *)(v13 + 34), (v37 & a4) == 0))
        {
          v38 = 0;
          v37 = *(_QWORD *)(a1 + 29032);
          do
          {
            if ((*(_BYTE *)(v37 + 636 + v38) & a4) != 0)
              break;
            ++v38;
          }
          while (v38 != 4);
          LOBYTE(v37) = *(_BYTE *)(v37 + v38 + 636);
          *(_BYTE *)(v13 + 34) = v37;
        }
        *(_BYTE *)(a1 + 2285) = v37;
        v39 = *(_DWORD *)(a1 + 1532);
        if ((v39 & 0xF836000) != 0)
        {
          if ((v25 & 1) != 0 && (v39 & 0x802000) != 0)
          {
            *(_OWORD *)(a1 + 1664) = 0u;
            *(_OWORD *)(a1 + 1648) = 0u;
            *(_OWORD *)(a1 + 1632) = 0u;
            *(_OWORD *)(a1 + 1616) = 0u;
            *(_OWORD *)(a1 + 1600) = 0u;
            *(_OWORD *)(a1 + 1584) = 0u;
            *(_OWORD *)(a1 + 1568) = 0u;
            *(_OWORD *)(a1 + 1552) = 0u;
          }
          if ((v25 & 1) != 0 && (v39 & 0x1004000) != 0)
          {
            *(_OWORD *)(a1 + 1792) = 0u;
            *(_OWORD *)(a1 + 1776) = 0u;
            *(_OWORD *)(a1 + 1760) = 0u;
            *(_OWORD *)(a1 + 1744) = 0u;
            *(_OWORD *)(a1 + 1728) = 0u;
            *(_OWORD *)(a1 + 1712) = 0u;
            *(_OWORD *)(a1 + 1696) = 0u;
            *(_OWORD *)(a1 + 1680) = 0u;
          }
          if ((v25 & 1) != 0 && (v39 & 0x2008000) != 0)
          {
            *(_OWORD *)(a1 + 1920) = 0u;
            *(_OWORD *)(a1 + 1904) = 0u;
            *(_OWORD *)(a1 + 1888) = 0u;
            *(_OWORD *)(a1 + 1872) = 0u;
            *(_OWORD *)(a1 + 1856) = 0u;
            *(_OWORD *)(a1 + 1840) = 0u;
            *(_OWORD *)(a1 + 1824) = 0u;
            *(_OWORD *)(a1 + 1808) = 0u;
          }
          if ((v25 & 1) != 0 && (v39 & 0x4010000) != 0)
          {
            *(_OWORD *)(a1 + 2048) = 0u;
            *(_OWORD *)(a1 + 2032) = 0u;
            *(_OWORD *)(a1 + 2016) = 0u;
            *(_OWORD *)(a1 + 2000) = 0u;
            *(_OWORD *)(a1 + 1984) = 0u;
            *(_OWORD *)(a1 + 1968) = 0u;
            *(_OWORD *)(a1 + 1952) = 0u;
            *(_OWORD *)(a1 + 1936) = 0u;
          }
          if ((v25 & 4) != 0 && (v39 & 0x8020000) != 0)
          {
            *(_OWORD *)(a1 + 2176) = 0u;
            *(_OWORD *)(a1 + 2160) = 0u;
            *(_OWORD *)(a1 + 2144) = 0u;
            *(_OWORD *)(a1 + 2128) = 0u;
            *(_OWORD *)(a1 + 2112) = 0u;
            *(_OWORD *)(a1 + 2096) = 0u;
            *(_OWORD *)(a1 + 2080) = 0u;
            *(_OWORD *)(a1 + 2064) = 0u;
          }
        }
        *(_QWORD *)(a1 + 1520) = 0;
        *(_QWORD *)(a1 + 1528) = 0;
        *(_DWORD *)(a1 + 1536) = 0;
      }
      result = 0;
      if (!*(_DWORD *)(a1 + 1540))
      {
        *(_DWORD *)(v13 + 4) = *(_DWORD *)(v13 + 8) & *(_DWORD *)v13;
        *(_BYTE *)(v13 + 33) = *(_BYTE *)(v13 + 32);
        *(_BYTE *)(v13 + 35) = *(_BYTE *)(v13 + 34);
      }
    }
  }
  return result;
}

double gleInitDrawCopyPixelsObject(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 28768) = 0u;
  *(_OWORD *)(a1 + 28752) = 0u;
  return result;
}

void gleReclaimDrawCopyPixelResources(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  char *v7;
  unint64_t v8;
  _QWORD *v9;
  char *v10;

  v2 = *(_QWORD **)(a1 + 28752);
  if (v2)
  {
    gleDestroyStateProgram(a1, v2);
    *(_QWORD *)(a1 + 28752) = 0;
  }
  v3 = *(_QWORD **)(a1 + 28760);
  if (v3)
  {
    gleDestroyStateProgram(a1, v3);
    *(_QWORD *)(a1 + 28760) = 0;
  }
  v4 = *(_QWORD **)(a1 + 28768);
  if (v4)
  {
    if (*(_BYTE *)(a1 + 32496))
    {
      v5 = 0;
      v6 = (_QWORD *)(a1 + 32512);
      do
      {
        (*(void (**)(_QWORD, _QWORD))(v6[206] + 1392))(*v6, v4[v5++]);
        v6 += 209;
      }
      while (v5 < *(unsigned __int8 *)(a1 + 32496));
    }
    gfxDestroyPluginTexture();
    gfxFreeTextureLevel();
    free(v4);
    *(_QWORD *)(a1 + 28768) = 0;
  }
  v7 = *(char **)(a1 + 28776);
  if (v7)
  {
    if (*(_BYTE *)(a1 + 32496))
    {
      v8 = 0;
      v9 = (_QWORD *)(a1 + 32512);
      v10 = v7 + 160;
      do
      {
        (*(void (**)(_QWORD, _QWORD))(v9[206] + 1592))(*v9, *(_QWORD *)&v10[8 * v8]);
        (*(void (**)(_QWORD, _QWORD))(v9[206] + 1616))(v9[1], *(_QWORD *)&v10[8 * v8++]);
        v9 += 209;
      }
      while (v8 < *(unsigned __int8 *)(a1 + 32496));
    }
    free(v7);
    *(_QWORD *)(a1 + 28776) = 0;
  }
}

uint64_t gleDrawTexture(uint64_t result, __n128 a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  char v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  char v21;
  float v22;
  __n128 *v23;
  float v24;
  float v25;
  __n128 v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  int v32;
  float v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __n128 *v38;
  uint64_t v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  __n128 *v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  float v50;
  float v51;
  float v52;
  float v53;
  BOOL v58;
  float v59;
  float v60;
  char v61;
  char v62;
  int v63;
  char v64;
  unsigned __int8 v65;
  int v66;

  v6 = a6.n128_f32[0];
  v7 = a5.n128_f32[0];
  v8 = a4.n128_f32[0];
  v9 = a3.n128_f32[0];
  v10 = a2.n128_f32[0];
  v11 = result;
  v12 = result + 23788;
  v13 = result + 15282;
  if (*(_BYTE *)(*(_QWORD *)(result + 29480) + 101))
  {
    v14 = *(_DWORD *)(result + 1544);
    if ((v14 & 0x40000000) == 0)
    {
      *(_DWORD *)(result + 28652) = 0;
      *(_DWORD *)(result + 1544) = v14 | 0x40000000;
    }
  }
  v15 = *(_DWORD *)(result + 28652);
  v16 = *(_BYTE *)(result + 15534);
  v17 = *(unsigned __int16 *)(result + 15528);
  if (!v16 && v17 == 2305)
  {
    if (*(_BYTE *)(result + 15538))
    {
      v18 = 0;
      v63 = 0;
      LOWORD(v17) = 0;
      v19 = 0;
      goto LABEL_10;
    }
    LOWORD(v17) = 2305;
  }
  v18 = *(unsigned __int16 *)(result + 15524);
  v63 = *(unsigned __int16 *)(result + 15526);
  *(_BYTE *)(result + 15534) = 0;
  *(_WORD *)(result + 15528) = 2305;
  *(_DWORD *)(result + 15524) = 453122818;
  v19 = 1;
  *(_BYTE *)(result + 15538) = 1;
  *(_DWORD *)(result + 1548) |= 0x8202u;
  *(_DWORD *)(result + 28652) = 0;
  *(_DWORD *)(result + 1520) |= 0x800000u;
LABEL_10:
  v65 = *(_BYTE *)(result + 15537);
  if (v65 | *(unsigned __int8 *)(result + 15533))
  {
    v62 = *(_BYTE *)(result + 15533);
    v19 |= 2u;
    *(_BYTE *)(result + 15537) = 0;
    *(_BYTE *)(result + 15533) = 0;
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1520) |= 0x800000u;
  }
  else
  {
    v62 = 0;
  }
  v20 = result + 28681;
  v64 = *(_BYTE *)v13;
  if (*(_BYTE *)v13)
  {
    v19 |= 4u;
    *(_BYTE *)v13 = 0;
    result = gleUpdateFogData(result);
  }
  if (v15 == -805306368)
    goto LABEL_22;
  if ((*(_BYTE *)(v11 + 1547) & 0x40) != 0)
    *(_BYTE *)(v20 + 3809) = 1;
  if ((*(_BYTE *)(v12 + 4864) & 0x20) != 0 && (*(_BYTE *)v20 & 1) != 0 && (*(_BYTE *)(v20 + 2) & 1) != 0
    || (v21 = 1,
        result = gleDoSelectiveDispatchCore(v11, 0x20u, 1u, 1u, 0xB8000000, a2, a3.n128_f64[0], a4.n128_f64[0]),
        (_DWORD)result))
  {
LABEL_22:
    if (v8 <= 0.0)
    {
      v22 = *(float *)(v11 + 9328);
    }
    else if (v8 >= 1.0)
    {
      v22 = *(float *)(v11 + 9332);
    }
    else
    {
      v22 = *(float *)(v11 + 9328) + (float)(v8 * *(float *)(v11 + 9336));
    }
    v23 = *(__n128 **)(v11 + 26000);
    v24 = *(float *)(v20 + 15);
    v25 = *(float *)(v20 + 19);
    v26.n128_f32[0] = v25 + (float)(v24 * v10);
    v27 = v25 + (float)(v24 * (float)(v10 + v7));
    v28 = *(float *)(v20 + 23);
    v29 = *(float *)(v20 + 27);
    v30 = v29 + (float)(v28 * v9);
    v31 = v29 + (float)(v28 * (float)(v9 + v6));
    if ((**(_BYTE **)(v11 + 29032) & 4) != 0)
    {
      v50 = (float)*(int *)(v20 + 35);
      v51 = (float)*(int *)(v20 + 39);
      v52 = (float)*(int *)(v20 + 43);
      v53 = (float)*(int *)(v20 + 47);
      if (v26.n128_f32[0] > v51 || v27 < v50 || v30 > v53 || v31 < v52)
      {
        v21 = 0;
        goto LABEL_65;
      }
      a2.n128_u32[0] = 0;
      if (v26.n128_f32[0] >= v50)
      {
        v32 = 0;
        a3.n128_u32[0] = 0;
      }
      else
      {
        v59 = v27 - v26.n128_f32[0];
        v32 = 1;
        v26.n128_f32[0] = (float)*(int *)(v20 + 35);
        a3.n128_f32[0] = (float)(v27 - v50) / v59;
      }
      if (v27 <= v51)
      {
        v51 = v27;
      }
      else
      {
        v32 |= 2u;
        a2.n128_f32[0] = (float)(v51 - v26.n128_f32[0]) / (float)(v27 - v26.n128_f32[0]);
      }
      a5.n128_u32[0] = 0;
      if (v30 >= v52)
      {
        a4.n128_u32[0] = 0;
        v52 = v30;
      }
      else
      {
        v32 |= 4u;
        a4.n128_f32[0] = (float)(v31 - v52) / (float)(v31 - v30);
      }
      if (v31 <= v53)
      {
        v27 = v51;
        v30 = v52;
      }
      else
      {
        v32 |= 8u;
        v60 = v31 - v52;
        v27 = v51;
        v30 = v52;
        v31 = (float)*(int *)(v20 + 47);
        a5.n128_f32[0] = (float)(v53 - v52) / v60;
      }
    }
    else
    {
      v32 = 0;
      a3.n128_u32[0] = 0;
      a2.n128_u32[0] = 0;
      a4.n128_u32[0] = 0;
      a5.n128_u32[0] = 0;
    }
    v33 = v22 * *(float *)(v20 + 31);
    v23[1].n128_u32[3] = 0;
    v23[4].n128_u32[0] = v26.n128_u32[0];
    v23[4].n128_f32[1] = v30;
    v23[4].n128_f32[2] = v33;
    v23[4].n128_u32[3] = 1065353216;
    v23[41].n128_u32[3] = 0;
    v23[44].n128_f32[0] = v27;
    v23[44].n128_f32[1] = v30;
    v23[44].n128_f32[2] = v33;
    v23[44].n128_u32[3] = 1065353216;
    v23[81].n128_u32[3] = 0;
    v23[84].n128_u32[0] = v26.n128_u32[0];
    v23[84].n128_f32[1] = v31;
    v23[84].n128_f32[2] = v33;
    v23[84].n128_u32[3] = 1065353216;
    v23[121].n128_u32[3] = 0;
    v23[124].n128_f32[0] = v27;
    v23[124].n128_f32[1] = v31;
    v23[124].n128_f32[2] = v33;
    v23[124].n128_u32[3] = 1065353216;
    if (*(_BYTE *)(v13 + 3950))
    {
      a6 = *(__n128 *)(v11 + 8464);
      v23[8] = a6;
      v23[48] = a6;
      v23[88] = a6;
      v23[128] = a6;
    }
    if (*(_BYTE *)(v13 + 3951))
    {
      a6 = *(__n128 *)(v11 + 8480);
      v23[9] = a6;
      v23[49] = a6;
      v23[89] = a6;
      v23[129] = a6;
    }
    v34 = 0;
    v35 = 0;
    v36 = 15684;
    v37 = 20800;
    a6.n128_u64[0] = 0x3F80000000000000;
    do
    {
      if ((*(_BYTE *)(v11 + v36) & 8) != 0)
      {
        v39 = *(_QWORD *)(v11 + v37);
        v26.n128_u16[0] = *(_WORD *)(v39 + 1002);
        v40 = (float)v26.n128_u32[0];
        LOWORD(v31) = *(_WORD *)(v39 + 1004);
        v41 = (float)LODWORD(v31);
        v42 = (float)*(int *)(v39 + 780);
        v43 = (float)*(int *)(v39 + 784);
        v31 = v42 / v40;
        v26.n128_f32[0] = (float)(v42 + (float)*(int *)(v39 + 788)) / v40;
        v44 = v43 / v41;
        v45 = (float)(v43 + (float)*(int *)(v39 + 792)) / v41;
        if (v32)
        {
          if ((v32 & 1) != 0)
            v31 = v26.n128_f32[0] - (float)((float)(v26.n128_f32[0] - v31) * a3.n128_f32[0]);
          if ((v32 & 2) != 0)
            v26.n128_f32[0] = v31 + (float)((float)(v26.n128_f32[0] - v31) * a2.n128_f32[0]);
          if ((v32 & 4) != 0)
            v44 = v45 - (float)((float)(v45 - v44) * a4.n128_f32[0]);
          if ((v32 & 8) != 0)
            v45 = v44 + (float)((float)(v45 - v44) * a5.n128_f32[0]);
        }
        v46 = &v23[v35];
        v46[14].n128_f32[0] = v31;
        v46[14].n128_f32[1] = v44;
        v46[14].n128_u64[1] = 0x3F80000000000000;
        v46[54].n128_u32[0] = v26.n128_u32[0];
        v46[54].n128_f32[1] = v44;
        v46[54].n128_u64[1] = 0x3F80000000000000;
        v46[94].n128_f32[0] = v31;
        v46[94].n128_f32[1] = v45;
        v46[94].n128_u64[1] = 0x3F80000000000000;
        v46[134].n128_u32[0] = v26.n128_u32[0];
        v46[134].n128_f32[1] = v45;
        v46[134].n128_u64[1] = 0x3F80000000000000;
      }
      else if (v15 != -805306368 && ((*(_DWORD *)v12 >> v34) & 1) != 0)
      {
        v26 = *(__n128 *)(v11 + v35 * 16 + 8560);
        v38 = &v23[v35];
        v38[14] = v26;
        v38[54] = v26;
        v38[94] = v26;
        v38[134] = v26;
      }
      ++v35;
      ++v34;
      v37 += 88;
      v36 += 76;
    }
    while (v35 != 8);
    if (*(_QWORD *)(v11 + 26280))
    {
      v61 = v16;
      v47 = *(__int16 *)(v12 + 2344);
      v66 = 0;
      v48 = (*(uint64_t (**)(_QWORD, uint64_t, int *, __n128, __n128, __n128, __n128, __n128))(v11 + 29200))(*(_QWORD *)(v11 + 29016), 5, &v66, a2, a3, a4, a5, a6);
      (*(void (**)(unint64_t, __n128 *, uint64_t))(v11 + 26168))(v11, v23, v48);
      (*(void (**)(unint64_t, __n128 *, uint64_t))(v11 + 26168))(v11, v23 + 40, v48 + v47);
      (*(void (**)(unint64_t, __n128 *, uint64_t))(v11 + 26168))(v11, v23 + 80, v48 + v47 + v47);
      v49 = v48 + v47 + v47 + v47;
      v16 = v61;
      (*(void (**)(unint64_t, __n128 *, uint64_t))(v11 + 26168))(v11, v23 + 120, v49);
      result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(v11 + 29208))(*(_QWORD *)(v11 + 29016), 0, 5, 4);
    }
    else
    {
      result = (*(uint64_t (**)(_QWORD, __n128 *, uint64_t, _QWORD, __n128, __n128, __n128, __n128, __n128))(v11 + 29120))(*(_QWORD *)(v11 + 29016), v23, 4, 0, a2, a3, a4, a5, a6);
    }
    v21 = 0;
  }
LABEL_65:
  if ((v19 & 1) == 0)
  {
    if ((v19 & 2) == 0)
      goto LABEL_67;
LABEL_78:
    *(_BYTE *)(v13 + 255) = v65;
    *(_BYTE *)(v13 + 251) = v62;
    *(_DWORD *)(v12 + 4864) = 0;
    *(_DWORD *)(v11 + 1520) |= 0x800000u;
    if ((v19 & 4) == 0)
      goto LABEL_68;
LABEL_79:
    *(_BYTE *)v13 = v64;
    result = gleUpdateFogData(v11);
    goto LABEL_80;
  }
  *(_BYTE *)(v13 + 252) = v16;
  *(_WORD *)(v13 + 246) = v17;
  *(_WORD *)(v13 + 242) = v18;
  *(_WORD *)(v13 + 244) = v63;
  v58 = v18 == 6914 && v63 == 6914;
  *(_BYTE *)(v13 + 256) = v58;
  *(_DWORD *)(v11 + 1548) |= 0x8202u;
  *(_DWORD *)(v12 + 4864) = 0;
  *(_DWORD *)(v11 + 1520) |= 0x800000u;
  if ((v19 & 2) != 0)
    goto LABEL_78;
LABEL_67:
  if ((v19 & 4) != 0)
    goto LABEL_79;
LABEL_68:
  if (!v19 && (*(_BYTE *)(v11 + 1547) & 0x40) != 0)
  {
    *(_DWORD *)(v12 + 4864) = 0;
    *(_DWORD *)(v11 + 1520) |= 0x80u;
  }
LABEL_80:
  if ((v21 & 1) == 0)
    *(_DWORD *)(v12 + 4864) = -805306368;
  *(_BYTE *)(v20 + 3809) = 0;
  return result;
}

uint64_t gleSetEnable_Error(uint64_t result)
{
  if (!*(_WORD *)(result + 29832))
    *(_WORD *)(result + 29832) = 1280;
  return result;
}

char *gleFillEnableHashTableEntriesES2(char *a1)
{
  gleAddEnableHashFunc(a1, 2884, (uint64_t)gleSetEnable_CULL_FACE);
  gleAddEnableHashFunc(a1, 3042, (uint64_t)gleSetEnable_BLEND);
  gleAddEnableHashFunc(a1, 3024, (uint64_t)gleSetEnable_DITHER);
  gleAddEnableHashFunc(a1, 2960, (uint64_t)gleSetEnable_STENCIL_TEST);
  gleAddEnableHashFunc(a1, 2929, (uint64_t)gleSetEnable_DEPTH_TEST);
  gleAddEnableHashFunc(a1, 12288, (uint64_t)gleSetEnable_CLIP_PLANE);
  gleAddEnableHashFunc(a1, 12289, (uint64_t)gleSetEnable_CLIP_PLANE);
  gleAddEnableHashFunc(a1, 12290, (uint64_t)gleSetEnable_CLIP_PLANE);
  gleAddEnableHashFunc(a1, 12291, (uint64_t)gleSetEnable_CLIP_PLANE);
  gleAddEnableHashFunc(a1, 12292, (uint64_t)gleSetEnable_CLIP_PLANE);
  gleAddEnableHashFunc(a1, 12293, (uint64_t)gleSetEnable_CLIP_PLANE);
  gleAddEnableHashFunc(a1, 12294, (uint64_t)gleSetEnable_CLIP_PLANE);
  gleAddEnableHashFunc(a1, 12295, (uint64_t)gleSetEnable_CLIP_PLANE);
  gleAddEnableHashFunc(a1, 3089, (uint64_t)gleSetEnable_SCISSOR_TEST);
  gleAddEnableHashFunc(a1, 32823, (uint64_t)gleSetEnable_POLYGON_OFFSET_FILL);
  gleAddEnableHashFunc(a1, 32926, (uint64_t)gleSetEnable_SAMPLE_ALPHA_TO_COVERAGE);
  return gleAddEnableHashFunc(a1, 32928, (uint64_t)gleSetEnable_SAMPLE_COVERAGE);
}

uint64_t gleSetEnable_RASTERIZER_DISCARD_EXT(uint64_t result, uint64_t a2, int a3)
{
  if (*(unsigned __int8 *)(result + 17984) != a3)
  {
    *(_BYTE *)(result + 17984) = a3;
    *(_DWORD *)(result + 1524) |= 0x40000000u;
    *(_DWORD *)(result + 1540) |= 0x10000000u;
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1548) |= 0x8000u;
  }
  return result;
}

uint64_t gleSetEnable_PRIMITIVE_RESTART(uint64_t result, uint64_t a2, char a3)
{
  *(_BYTE *)(result + 17716) = a3;
  *(_DWORD *)(result + 28652) = 0;
  *(_DWORD *)(result + 1524) |= 0x80000u;
  return result;
}

uint64_t gleSetEnable_CLIP_PLANE(uint64_t result, char a2, int a3)
{
  int *v3;
  int v4;
  int v5;
  uint64_t v6;

  v3 = (int *)(result + 17572);
  v4 = *(_DWORD *)(result + 17572);
  v5 = v4 & ~(1 << a2) | (a3 << a2);
  if (v4 != v5)
  {
    v6 = result;
    *v3 = v5;
    result = gleUpdateClipPlane(result);
    if ((*(_WORD *)(*(_QWORD *)(v6 + 29032) + 26) & 0x80) != 0)
      *(_DWORD *)(v6 + 1548) |= 0x10000u;
    v3[2770] = 0;
    *(_DWORD *)(v6 + 1528) |= 0x1000000 << a2;
  }
  return result;
}

uint64_t gleSetEnable_SAMPLE_ALPHA_TO_COVERAGE(uint64_t result, uint64_t a2, int a3)
{
  if (*(unsigned __int8 *)(result + 17681) != a3)
  {
    *(_BYTE *)(result + 17681) = a3;
    *(_DWORD *)(result + 1520) |= 0x20000000u;
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1548) |= 0x40000u;
  }
  return result;
}

uint64_t gleSetEnable_SAMPLE_COVERAGE(uint64_t result, uint64_t a2, int a3)
{
  if (*(unsigned __int8 *)(result + 17683) != a3)
  {
    *(_BYTE *)(result + 17683) = a3;
    *(_DWORD *)(result + 1520) |= 0x20000000u;
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1548) |= 0x40000u;
  }
  return result;
}

uint64_t gleSetEnable_POINT_SPRITE_ARB(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3;
  _DWORD *v4;

  if (*(unsigned __int8 *)(result + 15377) != a3)
  {
    v3 = result;
    v4 = (_DWORD *)(result + 28652);
    *(_BYTE *)(result + 15377) = a3;
    result = gleUpdatePointSmooth(result);
    *v4 = 0;
    *(_DWORD *)(v3 + 1520) |= 0x400000u;
    if ((*(_BYTE *)(*(_QWORD *)(v3 + 29032) + 27) & 8) != 0)
      *(_DWORD *)(v3 + 1548) |= 0x20000u;
  }
  return result;
}

uint64_t gleSetEnable_COLOR_LOGIC_OP(uint64_t result, uint64_t a2, int a3)
{
  if (*(unsigned __int8 *)(result + 15319) != a3)
  {
    *(_BYTE *)(result + 15319) = a3;
    *(_DWORD *)(result + 1520) |= 0x20000u;
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1548) |= 0x40000u;
  }
  return result;
}

uint64_t gleSetEnable_POINT_SMOOTH(uint64_t result, uint64_t a2, int a3)
{
  char v3;

  v3 = *(_BYTE *)(result + 32507);
  if ((v3 & 0x7F) != a3)
  {
    *(_BYTE *)(result + 32507) = v3 & 0x80 | a3 & 0x7F;
    return gleUpdatePointSmooth(result);
  }
  return result;
}

uint64_t gleSetEnable_RESCALE_NORMAL_EXT(uint64_t result, uint64_t a2, int a3)
{
  if (*(unsigned __int8 *)(result + 12517) != a3)
  {
    *(_BYTE *)(result + 12517) = a3;
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1544) |= 0x10u;
  }
  return result;
}

uint64_t gleSetEnable_MULTISAMPLE(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = result + 17680;
  if (*(unsigned __int8 *)(result + 17680) != a3)
  {
    v4 = result;
    *(_BYTE *)v3 = a3;
    result = gleUpdatePointSmooth(result);
    *(_DWORD *)(v4 + 1520) |= 0x20000000u;
    *(_DWORD *)(v3 + 10972) = 0;
    *(_DWORD *)(v4 + 1548) |= 0x40000u;
  }
  return result;
}

uint64_t gleSetEnable_SAMPLE_ALPHA_TO_ONE(uint64_t result, uint64_t a2, int a3)
{
  if (*(unsigned __int8 *)(result + 17682) != a3)
  {
    *(_BYTE *)(result + 17682) = a3;
    *(_DWORD *)(result + 1520) |= 0x20000000u;
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1548) |= 0x40000u;
  }
  return result;
}

uint64_t gleSetEnable_MATRIX_PALETTE_OES(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3;
  _DWORD *v4;

  if (*(unsigned __int8 *)(result + 17699) != a3)
  {
    v3 = result;
    v4 = (_DWORD *)(result + 28652);
    *(_BYTE *)(result + 17699) = a3;
    result = gleUpdateInverseNeeds(result);
    *v4 = 0;
    *(_DWORD *)(v3 + 1548) |= 0x1801Eu;
  }
  return result;
}

_QWORD *gleSetErrorInList(uint64_t a1, int a2)
{
  _QWORD *result;

  result = gleAddCommand(a1, (uint64_t)glSetError_ListExec, 4);
  *(_DWORD *)result = a2;
  return result;
}

uint64_t glSetError_ListExec(uint64_t a1, _DWORD *a2)
{
  if (!*(_WORD *)(a1 + 29832))
    *(_WORD *)(a1 + 29832) = *a2;
  return 4;
}

uint64_t gleFeedbackHitRecord(uint64_t result, uint64_t a2)
{
  int *v2;
  uint64_t v4;
  _DWORD *v5;
  unint64_t v6;
  int v7;
  _DWORD *v8;
  unint64_t v9;
  int v10;
  int v11;
  int v12;
  _DWORD *v13;
  unint64_t v14;
  int v15;
  int v16;
  _DWORD *v17;
  unint64_t v18;
  int v19;
  int v20;
  _DWORD *v21;
  unint64_t v22;
  int v23;
  int v24;
  _DWORD *v25;
  unint64_t v26;
  int v27;
  int v28;
  int v29;

  v2 = (int *)(result + 19960);
  if (!*(_BYTE *)(result + 19968))
  {
    v4 = result;
    switch(*(_DWORD *)(result + 19964))
    {
      case 0x600:
        v5 = *(_DWORD **)(result + 19952);
        v6 = *(_QWORD *)(result + 19944) + 4 * *v2;
        if ((unint64_t)v5 >= v6)
          goto LABEL_30;
        *v5 = *(_DWORD *)(a2 + 64);
        *(_QWORD *)(result + 19952) = v5 + 1;
        if ((unint64_t)(v5 + 1) >= v6)
          goto LABEL_30;
        v7 = *(_DWORD *)(a2 + 68);
        *(_QWORD *)(result + 19952) = v5 + 2;
        v5[1] = v7;
        break;
      case 0x601:
        v13 = *(_DWORD **)(result + 19952);
        v14 = *(_QWORD *)(result + 19944) + 4 * *v2;
        if ((unint64_t)v13 >= v14)
          goto LABEL_30;
        *v13 = *(_DWORD *)(a2 + 64);
        *(_QWORD *)(result + 19952) = v13 + 1;
        if ((unint64_t)(v13 + 1) >= v14)
          goto LABEL_30;
        v15 = *(_DWORD *)(a2 + 68);
        *(_QWORD *)(result + 19952) = v13 + 2;
        v13[1] = v15;
        if ((unint64_t)(v13 + 2) >= v14)
          goto LABEL_30;
        v16 = *(_DWORD *)(a2 + 72);
        *(_QWORD *)(result + 19952) = v13 + 3;
        v13[2] = v16;
        break;
      case 0x602:
        v17 = *(_DWORD **)(result + 19952);
        v18 = *(_QWORD *)(result + 19944) + 4 * *v2;
        if ((unint64_t)v17 >= v18
          || (*v17 = *(_DWORD *)(a2 + 64), *(_QWORD *)(result + 19952) = v17 + 1, (unint64_t)(v17 + 1) >= v18)
          || (v19 = *(_DWORD *)(a2 + 68),
              *(_QWORD *)(result + 19952) = v17 + 2,
              v17[1] = v19,
              (unint64_t)(v17 + 2) >= v18))
        {
          *(_BYTE *)(result + 19968) = 1;
        }
        else
        {
          v20 = *(_DWORD *)(a2 + 72);
          *(_QWORD *)(result + 19952) = v17 + 3;
          v17[2] = v20;
        }
        result = gleFeedbackColorTokens(result, (float *)a2);
        break;
      case 0x603:
        v21 = *(_DWORD **)(result + 19952);
        v22 = *(_QWORD *)(result + 19944) + 4 * *v2;
        if ((unint64_t)v21 >= v22)
          goto LABEL_23;
        *v21 = *(_DWORD *)(a2 + 64);
        *(_QWORD *)(result + 19952) = v21 + 1;
        if ((unint64_t)(v21 + 1) >= v22)
          goto LABEL_23;
        v23 = *(_DWORD *)(a2 + 68);
        *(_QWORD *)(result + 19952) = v21 + 2;
        v21[1] = v23;
        if ((unint64_t)(v21 + 2) >= v22)
          goto LABEL_23;
        v24 = *(_DWORD *)(a2 + 72);
        *(_QWORD *)(result + 19952) = v21 + 3;
        v21[2] = v24;
        goto LABEL_24;
      default:
        v8 = *(_DWORD **)(result + 19952);
        v9 = *(_QWORD *)(result + 19944) + 4 * *v2;
        if ((unint64_t)v8 >= v9)
          goto LABEL_23;
        *v8 = *(_DWORD *)(a2 + 64);
        *(_QWORD *)(result + 19952) = v8 + 1;
        if ((unint64_t)(v8 + 1) >= v9
          || (v10 = *(_DWORD *)(a2 + 68),
              *(_QWORD *)(result + 19952) = v8 + 2,
              v8[1] = v10,
              (unint64_t)(v8 + 2) >= v9)
          || (v11 = *(_DWORD *)(a2 + 72),
              *(_QWORD *)(result + 19952) = v8 + 3,
              v8[2] = v11,
              (unint64_t)(v8 + 3) >= v9))
        {
LABEL_23:
          *(_BYTE *)(result + 19968) = 1;
        }
        else
        {
          v12 = *(_DWORD *)(a2 + 92);
          *(_QWORD *)(result + 19952) = v8 + 4;
          v8[3] = v12;
        }
LABEL_24:
        result = gleFeedbackColorTokens(result, (float *)a2);
        if (!*((_BYTE *)v2 + 8))
        {
          v25 = *(_DWORD **)(v4 + 19952);
          v26 = *(_QWORD *)(v4 + 19944) + 4 * *v2;
          if ((unint64_t)v25 >= v26)
            goto LABEL_30;
          *v25 = *(_DWORD *)(a2 + 224);
          *(_QWORD *)(v4 + 19952) = v25 + 1;
          if ((unint64_t)(v25 + 1) >= v26
            || (v27 = *(_DWORD *)(a2 + 228),
                *(_QWORD *)(v4 + 19952) = v25 + 2,
                v25[1] = v27,
                (unint64_t)(v25 + 2) >= v26)
            || (v28 = *(_DWORD *)(a2 + 232),
                *(_QWORD *)(v4 + 19952) = v25 + 3,
                v25[2] = v28,
                (unint64_t)(v25 + 3) >= v26))
          {
LABEL_30:
            *((_BYTE *)v2 + 8) = 1;
          }
          else
          {
            v29 = *(_DWORD *)(a2 + 236);
            *(_QWORD *)(v4 + 19952) = v25 + 4;
            v25[3] = v29;
          }
        }
        break;
    }
  }
  return result;
}

uint64_t gleFeedbackPointsPtr(uint64_t result, uint64_t *a2, int a3)
{
  uint64_t *v3;
  uint64_t v4;
  int *v5;
  unint64_t v6;
  _DWORD *v7;
  uint64_t v8;

  if (a3 >= 1)
  {
    v3 = a2;
    v4 = result;
    v5 = (int *)(result + 19960);
    v6 = (unint64_t)&a2[a3];
    do
    {
      if (!*((_BYTE *)v5 + 8))
      {
        v7 = *(_DWORD **)(v4 + 19952);
        if ((unint64_t)v7 >= *(_QWORD *)(v4 + 19944) + 4 * *v5)
        {
          *((_BYTE *)v5 + 8) = 1;
        }
        else
        {
          *v7 = 1155538944;
          *(_QWORD *)(v4 + 19952) = v7 + 1;
        }
      }
      v8 = *v3++;
      result = gleFeedbackHitRecord(v4, v8);
    }
    while ((unint64_t)v3 < v6);
  }
  return result;
}

uint64_t gleFeedbackLinesPtr(uint64_t result, uint64_t *a2, int a3, int a4)
{
  uint64_t v6;
  int *v7;
  int v8;
  int v9;
  int *v10;
  unint64_t v11;
  uint64_t *v12;
  int *v13;

  if (a3 >= 2)
  {
    v6 = result;
    v7 = (int *)(result + 19960);
    v8 = 1155547136;
    if (a4)
    {
      v9 = 1155588096;
      if (a4 != 1)
        v8 = 1155588096;
    }
    else
    {
      v9 = 1155547136;
    }
    if (!*(_BYTE *)(result + 19968))
    {
      v10 = *(int **)(result + 19952);
      if ((unint64_t)v10 >= *(_QWORD *)(result + 19944) + 4 * *v7)
      {
        *(_BYTE *)(result + 19968) = 1;
      }
      else
      {
        *v10 = v9;
        *(_QWORD *)(result + 19952) = v10 + 1;
      }
    }
    gleFeedbackHitRecord(result, *a2);
    result = gleFeedbackHitRecord(v6, a2[1]);
    if (a3 >= 4)
    {
      v11 = (unint64_t)&a2[a3 - 1];
      v12 = a2 + 2;
      do
      {
        if (!*((_BYTE *)v7 + 8))
        {
          v13 = *(int **)(v6 + 19952);
          if ((unint64_t)v13 >= *(_QWORD *)(v6 + 19944) + 4 * *v7)
          {
            *((_BYTE *)v7 + 8) = 1;
          }
          else
          {
            *v13 = v8;
            *(_QWORD *)(v6 + 19952) = v13 + 1;
          }
        }
        gleFeedbackHitRecord(v6, *v12);
        result = gleFeedbackHitRecord(v6, v12[1]);
        v12 += 2;
      }
      while ((unint64_t)v12 < v11);
    }
  }
  return result;
}

void gleFeedbackPolygonPtr(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  __asm { BR              X11 }
}

uint64_t sub_21B951CA0(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t *v4;
  int *v5;
  uint64_t *v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t result;

  if (a3 >= 1)
  {
    v6 = &v4[a3];
    do
    {
      v7 = *v4;
      if (!*(_BYTE *)(*v4 + 1))
      {
        if (!*((_BYTE *)v5 + 8))
        {
          v8 = *(_DWORD **)(v3 + 19952);
          if ((unint64_t)v8 >= *(_QWORD *)(v3 + 19944) + 4 * *v5)
          {
            *((_BYTE *)v5 + 8) = 1;
          }
          else
          {
            *v8 = 1155538944;
            *(_QWORD *)(v3 + 19952) = v8 + 1;
            v7 = *v4;
          }
        }
        result = gleFeedbackHitRecord(v3, v7);
      }
      ++v4;
    }
    while (v4 < v6);
  }
  return result;
}

uint64_t gleFeedbackColorTokens(uint64_t result, float *a2)
{
  int *v2;
  float v3;
  float *v4;
  unint64_t v5;
  int v6;
  int v7;
  float v8;
  float v9;
  float v10;

  v2 = (int *)(result + 19960);
  v3 = a2[32];
  if (*(_BYTE *)(result + 17702))
  {
    if (*(_BYTE *)(result + 19968))
      return result;
    v4 = *(float **)(result + 19952);
    if ((unint64_t)v4 < *(_QWORD *)(result + 19944) + 4 * *v2)
    {
      *v4 = fminf(fmaxf(v3, *(float *)(result + 288)), *(float *)(result + 292));
      *(_QWORD *)(result + 19952) = v4 + 1;
      if ((unint64_t)(v4 + 1) < *(_QWORD *)(result + 19944) + 4 * *v2)
      {
        v9 = fminf(fmaxf(a2[33], *(float *)(result + 288)), *(float *)(result + 292));
        *(_QWORD *)(result + 19952) = v4 + 2;
        v4[1] = v9;
        if ((unint64_t)(v4 + 2) < *(_QWORD *)(result + 19944) + 4 * *v2)
        {
          v10 = fminf(fmaxf(a2[34], *(float *)(result + 288)), *(float *)(result + 292));
          *(_QWORD *)(result + 19952) = v4 + 3;
          v4[2] = v10;
          if ((unint64_t)(v4 + 3) < *(_QWORD *)(result + 19944) + 4 * *v2)
          {
            v8 = fminf(fmaxf(a2[35], *(float *)(result + 288)), *(float *)(result + 292));
            goto LABEL_15;
          }
        }
      }
    }
    goto LABEL_16;
  }
  if (!*(_BYTE *)(result + 19968))
  {
    v4 = *(float **)(result + 19952);
    v5 = *(_QWORD *)(result + 19944) + 4 * *v2;
    if ((unint64_t)v4 < v5)
    {
      *v4 = v3;
      *(_QWORD *)(result + 19952) = v4 + 1;
      if ((unint64_t)(v4 + 1) < v5)
      {
        v6 = *((_DWORD *)a2 + 33);
        *(_QWORD *)(result + 19952) = v4 + 2;
        *((_DWORD *)v4 + 1) = v6;
        if ((unint64_t)(v4 + 2) < v5)
        {
          v7 = *((_DWORD *)a2 + 34);
          *(_QWORD *)(result + 19952) = v4 + 3;
          *((_DWORD *)v4 + 2) = v7;
          if ((unint64_t)(v4 + 3) < v5)
          {
            v8 = a2[35];
LABEL_15:
            *(_QWORD *)(result + 19952) = v4 + 4;
            v4[3] = v8;
            return result;
          }
        }
      }
    }
LABEL_16:
    *(_BYTE *)(result + 19968) = 1;
  }
  return result;
}

uint64_t gleCreatePluginFence(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (*(_BYTE *)(result + 320))
  {
    v3 = result;
    v4 = 0;
    v5 = result + 360;
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)v5 + 1728))(*(_QWORD *)(v5 - 8), a2);
      ++v4;
      a2 += 8;
      v5 += 32;
    }
    while (v4 < *(unsigned __int8 *)(v3 + 320));
  }
  return result;
}

void gleFreeFenceObject(uint64_t a1, char *a2)
{
  uint64_t v3;
  unint64_t v4;
  char *v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a1 + 19296);
  if (*(_BYTE *)(v3 + 320))
  {
    v4 = 0;
    v5 = a2 + 40;
    v6 = v3 + 360;
    do
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v6 + 1808))(*(_QWORD *)(v6 - 8), *(_QWORD *)&v5[8 * v4]);
      *(_QWORD *)&v5[8 * v4++] = 0;
      v6 += 32;
    }
    while (v4 < *(unsigned __int8 *)(v3 + 320));
  }
  free(a2);
}

double gleCreateFenceObject(int a1)
{
  char *v2;
  double result;

  v2 = (char *)malloc_type_malloc(0xA8uLL, 0x577B5147uLL);
  if (!v2)
    abort();
  *((_DWORD *)v2 + 4) = a1;
  *(_QWORD *)v2 = 0;
  *(_QWORD *)(v2 + 20) = 0xD00000001;
  result = 0.0;
  *(_OWORD *)(v2 + 28) = 0u;
  *(_OWORD *)(v2 + 44) = 0u;
  *(_OWORD *)(v2 + 60) = 0u;
  *(_OWORD *)(v2 + 76) = 0u;
  *(_OWORD *)(v2 + 92) = 0u;
  *(_OWORD *)(v2 + 108) = 0u;
  *(_OWORD *)(v2 + 124) = 0u;
  *((_DWORD *)v2 + 35) = 0;
  *((_QWORD *)v2 + 19) = 0;
  *((_QWORD *)v2 + 20) = 0;
  return result;
}

uint64_t gleSetFence(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  __n128 v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a1 + 25872;
  v5 = gleLookupHashObject(a1 + 25872, a2);
  if (!v5)
  {
    v7.n128_f64[0] = gleCreateFenceObject(a2);
    v5 = v6;
    v8 = *(_QWORD *)(a1 + 19296);
    if (*(_BYTE *)(v8 + 320))
    {
      v9 = 0;
      v10 = v6 + 5;
      v11 = v8 + 360;
      do
      {
        (*(void (**)(_QWORD, uint64_t *, __n128))(*(_QWORD *)v11 + 1728))(*(_QWORD *)(v11 - 8), v10, v7);
        ++v9;
        ++v10;
        v11 += 32;
      }
      while (v9 < *(unsigned __int8 *)(v8 + 320));
    }
    gleAddHashNameAndObject(a1, v4, (uint64_t)v5);
  }
  v12 = a1 + 1672 * *(unsigned __int8 *)(a1 + 32499);
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v12 + 34160) + 1736))(*(_QWORD *)(v12 + 32512), v5[*(unsigned __int8 *)(a1 + 32499) + 5]);
}

uint64_t gleTestFence(_BOOL8 a1, int a2, unsigned int a3, uint64_t a4)
{
  _BOOL8 v4;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;

  if (a2)
    return 0;
  v4 = a1;
  v6 = a1 + 29832;
  v7 = gleLookupHashObject(a1 + 25872, a3);
  if (!v7)
  {
    if (!*(_WORD *)v6)
      *(_WORD *)v6 = 1282;
    return 1;
  }
  if (!*(_BYTE *)(v6 + 2664))
    return 1;
  v8 = 0;
  v9 = v7 + 5;
  v10 = (_QWORD *)(v4 + 32512);
  LOBYTE(v4) = 1;
  do
  {
    v4 = v4
      && (*(unsigned int (**)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(v10[206] + 1320))(*v10, 0, 0, a4, v9[v8]) != 0;
    if (v8 != *(unsigned __int8 *)(v6 + 2667) && v8 != *(unsigned __int8 *)(v6 + 2668))
      (*(void (**)(_QWORD))(v10[206] + 1296))(*v10);
    ++v8;
    v10 += 209;
  }
  while (v8 < *(unsigned __int8 *)(v6 + 2664));
  return v4;
}

uint64_t *gleFinishFence(uint64_t *result, int a2, unsigned int a3)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t *v6;
  _QWORD *v7;

  if (!a2)
  {
    v3 = result;
    v4 = result + 3729;
    result = gleLookupHashObject((uint64_t)(result + 3234), a3);
    if (result)
    {
      if (*((_BYTE *)v4 + 2664))
      {
        v5 = 0;
        v6 = result + 5;
        v7 = v3 + 4064;
        do
        {
          result = (uint64_t *)(*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(v7[206] + 1336))(*v7, 0, 2, v6[v5++]);
          v7 += 209;
        }
        while (v5 < *((unsigned __int8 *)v4 + 2664));
      }
    }
    else if (!*(_WORD *)v4)
    {
      *(_WORD *)v4 = 1282;
    }
  }
  return result;
}

uint64_t *gleFinishObject(uint64_t *result, int a2, unsigned int a3)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  __int16 v8;
  unint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t *v19;
  _QWORD *v20;

  v3 = result + 3729;
  v4 = result;
  switch(a2)
  {
    case 0:
      result = gleLookupHashObject((uint64_t)(result + 3234), a3);
      if (!result)
        goto LABEL_29;
      if (*((_BYTE *)v3 + 2664))
      {
        v5 = 0;
        v6 = result + 5;
        v7 = v4 + 4064;
        do
        {
          result = (uint64_t *)(*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(v7[206] + 1336))(*v7, 0, 2, v6[v5++]);
          v7 += 209;
        }
        while (v5 < *((unsigned __int8 *)v3 + 2664));
      }
      break;
    case 1:
      result = gleLookupHashObject(result[2412] + 72, a3);
      if (!result)
        goto LABEL_29;
      if (*((_BYTE *)v3 + 2664))
      {
        v9 = 0;
        v10 = result + 5;
        v11 = v4 + 4064;
        do
        {
          result = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD, uint64_t))(v11[206] + 1336))(*v11, 1, 0, v10[v9++]);
          v11 += 209;
        }
        while (v9 < *((unsigned __int8 *)v3 + 2664));
      }
      break;
    case 2:
      result = gleLookupHashObject((uint64_t)(result + 3294), a3);
      if (!result)
        goto LABEL_29;
      if (*((_BYTE *)v3 + 2664))
      {
        v12 = 0;
        v13 = result + 5;
        v14 = v4 + 4064;
        do
        {
          result = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD, uint64_t))(v14[206] + 1336))(*v14, 2, 0, v13[v12++]);
          v14 += 209;
        }
        while (v12 < *((unsigned __int8 *)v3 + 2664));
      }
      break;
    case 3:
      result = gleLookupHashObject(result[2412] + 264, a3);
      if (!result)
        goto LABEL_29;
      if (*((_BYTE *)v3 + 2664))
      {
        v15 = 0;
        v16 = result + 5;
        v17 = v4 + 4064;
        do
        {
          result = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD, uint64_t))(v17[206] + 1336))(*v17, 3, 0, v16[v15++]);
          v17 += 209;
        }
        while (v15 < *((unsigned __int8 *)v3 + 2664));
      }
      break;
    case 4:
      result = gleLookupHashObject(result[2412] + 40, a3);
      if (result)
      {
        if (*((_BYTE *)v3 + 2664))
        {
          v18 = 0;
          v19 = result + 5;
          v20 = v4 + 4064;
          do
          {
            result = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD, uint64_t))(v20[206] + 1336))(*v20, 1, 0, v19[v18++]);
            v20 += 209;
          }
          while (v18 < *((unsigned __int8 *)v3 + 2664));
        }
      }
      else
      {
LABEL_29:
        if (!*(_WORD *)v3)
        {
          v8 = 1282;
          goto LABEL_31;
        }
      }
      break;
    case 5:
      return result;
    default:
      if (!*(_WORD *)v3)
      {
        v8 = 1280;
LABEL_31:
        *(_WORD *)v3 = v8;
      }
      break;
  }
  return result;
}

double gleCreateSyncObject(int a1)
{
  char *v2;
  double result;

  v2 = (char *)malloc_type_malloc(0xA8uLL, 0x577B5147uLL);
  if (!v2)
    abort();
  *((_DWORD *)v2 + 4) = a1;
  *(_QWORD *)v2 = 0;
  *(_QWORD *)(v2 + 20) = 0x900000001;
  result = 0.0;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_OWORD *)v2 + 6) = 0u;
  *((_OWORD *)v2 + 7) = 0u;
  *(_OWORD *)(v2 + 124) = 0u;
  *((_QWORD *)v2 + 19) = 0;
  *((_QWORD *)v2 + 20) = 0;
  *((_QWORD *)v2 + 18) = 0;
  return result;
}

uint64_t gleFenceSync(uint64_t a1, unsigned int a2, int a3, int a4)
{
  __int16 *v5;
  uint64_t result;
  __int16 v7;
  unsigned int v8;

  if (a3 != 37143)
  {
    v5 = (__int16 *)(a1 + 29832);
    if (!*(_WORD *)(a1 + 29832))
    {
      result = 0;
      v7 = 1280;
      goto LABEL_11;
    }
    return 0;
  }
  if (a4)
  {
    v5 = (__int16 *)(a1 + 29832);
    if (!*(_WORD *)(a1 + 29832))
    {
      result = 0;
      v7 = 1281;
LABEL_11:
      *v5 = v7;
      return result;
    }
    return 0;
  }
  v8 = a2;
  if (!a2)
    v8 = gleGenHashNames(*(_QWORD *)(a1 + 19296) + 200, 1u);
  gleSetSync(a1, v8);
  return v8;
}

uint64_t gleSetSync(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  __n128 v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a1 + 19296) + 200;
  v5 = gleLookupHashObject(v4, a2);
  if (!v5)
  {
    v7.n128_f64[0] = gleCreateSyncObject(a2);
    v5 = v6;
    v8 = *(_QWORD *)(a1 + 19296);
    if (*(_BYTE *)(v8 + 320))
    {
      v9 = 0;
      v10 = v6 + 5;
      v11 = v8 + 360;
      do
      {
        (*(void (**)(_QWORD, uint64_t *, __n128))(*(_QWORD *)v11 + 1728))(*(_QWORD *)(v11 - 8), v10, v7);
        ++v9;
        ++v10;
        v11 += 32;
      }
      while (v9 < *(unsigned __int8 *)(v8 + 320));
    }
    gleAddHashNameAndObject(a1, v4, (uint64_t)v5);
  }
  v5[18] = a1;
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(a1 + 29496) + 680))(*(_QWORD *)(a1 + 29464), v5[*(unsigned __int8 *)(a1 + 32500) + 5]);
}

void gleFreeSyncObject(uint64_t a1, char *a2)
{
  unint64_t v4;
  char *v5;
  uint64_t v6;

  if (*(_BYTE *)(a1 + 320))
  {
    v4 = 0;
    v5 = a2 + 40;
    v6 = a1 + 360;
    do
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v6 + 1808))(*(_QWORD *)(v6 - 8), *(_QWORD *)&v5[8 * v4]);
      *(_QWORD *)&v5[8 * v4++] = 0;
      v6 += 32;
    }
    while (v4 < *(unsigned __int8 *)(a1 + 320));
  }
  free(a2);
}

uint64_t gleIsSyncQueued(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t i;

  if (!*(_BYTE *)(a1 + 320))
    return 0;
  v3 = 0;
  v4 = a2 + 40;
  for (i = a1 + 360;
        (*(unsigned int (**)(_QWORD, _QWORD))(*(_QWORD *)i + 1792))(*(_QWORD *)(i - 8), *(_QWORD *)(v4 + 8 * v3));
        i += 32)
  {
    if (++v3 >= (unint64_t)*(unsigned __int8 *)(a1 + 320))
      return 0;
  }
  return 1;
}

uint64_t gleTestSync(uint64_t result, char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = result + 29832;
  if (!a3)
  {
    if (!*(_WORD *)v3)
      *(_WORD *)v3 = 1282;
    return 1;
  }
  v4 = a2 & 1;
  if (*(_DWORD *)(a3 + 136))
    return (*(unsigned int (**)(_QWORD, _QWORD))(a3 + 160))(*(_QWORD *)(a3 + 152), a2 & 1) == 37145;
  v5 = *(unsigned __int8 *)(result + 32496);
  if (!*(_BYTE *)(result + 32496))
    return 1;
  v6 = 0;
  v7 = a3 + 40;
  v8 = (_QWORD *)(result + 32512);
  LOBYTE(result) = 1;
  do
  {
    if ((_BYTE)result)
    {
      result = (*(unsigned int (**)(_QWORD, _QWORD, _QWORD, uint64_t, _QWORD))(v8[206] + 1320))(*v8, 0, 0, v4, *(_QWORD *)(v7 + 8 * v6)) != 0;
      v5 = *(unsigned __int8 *)(v3 + 2664);
    }
    else
    {
      result = 0;
    }
    ++v6;
    v8 += 209;
  }
  while (v6 < v5);
  return result;
}

uint64_t gleFinishSync(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = (unsigned __int8 *)(result + 32496);
  if (*(_BYTE *)(result + 32496))
  {
    v3 = 0;
    v4 = a2 + 40;
    v5 = (_QWORD *)(result + 32512);
    do
    {
      result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v5[206] + 1336))(*v5, 0, 0, *(_QWORD *)(v4 + 8 * v3++));
      v5 += 209;
    }
    while (v3 < *v2);
  }
  return result;
}

BOOL gleSyncTargetExtractor(uint64_t a1)
{
  return *(_QWORD *)(a1 + 152) != 0;
}

void gleBindRenderbuffer(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  _DWORD *TextureObject;
  uint64_t v6;
  int v7;

  if (a2)
  {
    v4 = *(_QWORD *)(a1 + 19296) + 40;
    TextureObject = gleLookupHashObject(v4, a2);
    if (!TextureObject)
    {
      TextureObject = gleCreateTextureObject(*(_QWORD *)(a1 + 19296), 8194, a2);
      gleAddHashNameAndObject(a1, v4, (uint64_t)TextureObject);
    }
    ++TextureObject[5];
  }
  else
  {
    TextureObject = 0;
  }
  v6 = *(_QWORD *)(a1 + 28952);
  if (v6)
  {
    v7 = *(_DWORD *)(v6 + 20) - 1;
    *(_DWORD *)(v6 + 20) = v7;
    if (!v7)
      gleUnbindAndFreeTextureObject(a1, v6);
  }
  *(_QWORD *)(a1 + 28952) = TextureObject;
}

uint64_t gleCheckRenderbufferStorageArgs(uint64_t a1, int a2, unsigned int a3, int a4, unsigned int a5, unsigned int a6)
{
  uint64_t v6;
  __int16 *v8;
  __int16 v9;

  if (a2 == 36161)
  {
    if (*(_QWORD *)(a1 + 28952))
    {
      if (((a6 | a5) & 0x80000000) == 0)
      {
        v6 = *(_QWORD *)(a1 + 29480);
        if (*(_DWORD *)(v6 + 4) >= a5 && *(_DWORD *)(v6 + 8) >= a6)
          return gleCheckRenderableFormatArgs(a1, 36161, a3, a4);
      }
      v8 = (__int16 *)(a1 + 29832);
      if (!*(_WORD *)(a1 + 29832))
      {
        v9 = 1281;
LABEL_13:
        *v8 = v9;
      }
    }
    else
    {
      v8 = (__int16 *)(a1 + 29832);
      if (!*(_WORD *)(a1 + 29832))
      {
        v9 = 1282;
        goto LABEL_13;
      }
    }
  }
  else
  {
    v8 = (__int16 *)(a1 + 29832);
    if (!*(_WORD *)(a1 + 29832))
    {
      v9 = 1280;
      goto LABEL_13;
    }
  }
  return 0;
}

uint64_t gleCheckRenderableFormatArgs(uint64_t a1, int a2, unsigned int a3, int a4)
{
  __int16 *v4;
  unsigned __int8 *v5;
  int v6;
  char v7;
  char v8;
  int v9;
  uint64_t result;
  __int16 v11;
  unsigned int v12;

  v4 = (__int16 *)(a1 + 29832);
  if ((a3 & 0x80000000) != 0)
  {
    if (*v4)
      return 0;
    result = 0;
    v11 = 1281;
LABEL_44:
    *v4 = v11;
    return result;
  }
  v5 = *(unsigned __int8 **)(a1 + 29480);
  if (v5[170] < a3)
  {
LABEL_61:
    if (*v4)
      return 0;
    result = 0;
    v11 = 1282;
    goto LABEL_44;
  }
  v6 = 0;
  v7 = 1;
  if (a4 > 34835)
  {
    if (a4 > 36165)
    {
      if (a4 <= 36755)
      {
        switch(a4)
        {
          case 36168:
            goto LABEL_49;
          case 36194:
            goto LABEL_50;
          case 36208:
          case 36214:
          case 36220:
          case 36226:
          case 36232:
          case 36238:
            goto LABEL_12;
          default:
            goto LABEL_41;
        }
      }
      if (a4 <= 36974)
        goto LABEL_41;
      if (a4 == 36975)
      {
        if ((*(_BYTE *)(a1 + 32501) & 0xFE) != 2)
        {
          v6 = 1;
          goto LABEL_50;
        }
      }
      else if (a4 == 37874 || a4 == 37881)
      {
LABEL_39:
        if ((*(_BYTE *)(a1 + 32501) & 0xFE) != 2)
        {
          v6 = 0;
          goto LABEL_50;
        }
      }
LABEL_41:
      if (*v4)
        return 0;
      result = 0;
      v11 = 1280;
      goto LABEL_44;
    }
    if (a4 > 35445)
    {
      switch(a4)
      {
        case 35898:
        case 35901:
          if ((v5[578] & 1) == 0)
            goto LABEL_41;
          goto LABEL_28;
        case 35899:
        case 35900:
        case 35902:
        case 35903:
        case 35904:
        case 35905:
        case 35906:
        case 35908:
        case 35909:
        case 35910:
        case 35911:
          goto LABEL_41;
        case 35907:
          if (*(_BYTE *)(a1 + 32501) == 2 || (v5[577] & 0x20) == 0)
            goto LABEL_41;
          goto LABEL_27;
        default:
          if ((a4 - 35446) < 3)
            goto LABEL_39;
          if ((a4 - 36012) < 2 && (*(_BYTE *)(a1 + 32501) & 0xFE) != 2)
            goto LABEL_49;
          goto LABEL_41;
      }
    }
    if ((a4 - 34836) <= 0xB)
    {
      v9 = 1 << (a4 - 20);
      if ((v9 & 0xF3C) != 0 || (v9 & 3) != 0)
        goto LABEL_41;
      goto LABEL_27;
    }
    if (a4 != 35056)
      goto LABEL_41;
LABEL_49:
    v6 = 0;
    v7 = 0;
    goto LABEL_50;
  }
  if (a4 <= 33188)
  {
    switch(a4)
    {
      case 32849:
      case 32854:
      case 32855:
      case 32856:
        goto LABEL_50;
      case 32857:
        goto LABEL_13;
      default:
        goto LABEL_41;
    }
  }
  if (a4 <= 33318)
  {
    if ((a4 - 33189) >= 2)
      goto LABEL_41;
    goto LABEL_49;
  }
  v8 = a4 - 39;
  if ((a4 - 33319) > 0x15)
    goto LABEL_41;
  if (((1 << v8) & 0x3FFC00) != 0)
  {
LABEL_12:
    v6 = 1;
LABEL_13:
    if ((*(_BYTE *)(a1 + 32501) & 0xFE) == 2)
      goto LABEL_41;
    goto LABEL_29;
  }
  if (((1 << v8) & 0x2A9) != 0 || ((1 << v8) & 0x154) == 0)
    goto LABEL_41;
LABEL_27:
  if (*(_BYTE *)(a1 + 32501) == 2)
    goto LABEL_41;
LABEL_28:
  v6 = 0;
LABEL_29:
  v7 = 1;
LABEL_50:
  if ((v5[565] & 0x20) != 0)
  {
    if (a2 != 36161)
    {
      v12 = (v7 & 1) != 0 ? v5[171] : v5[172];
      if (v12 < a3)
        goto LABEL_61;
    }
    if (v6 && v5[173] < a3)
      goto LABEL_61;
  }
  return 1;
}

uint64_t gleCreatePluginFramebuffer(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v2 = (unsigned __int8 *)(result + 32496);
  if (*(_BYTE *)(result + 32496))
  {
    v3 = 0;
    v4 = a2 + 256;
    v5 = (_QWORD *)(result + 32520);
    v6 = a2 + 160;
    v7 = a2 + 520;
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v5[205] + 1576))(*v5, v6, v4, v7);
      ++v3;
      v5 += 209;
      v6 += 8;
      v7 += 88;
    }
    while (v3 < *v2);
  }
  return result;
}

uint64_t gleInitializeFramebuffer(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;

  v2 = 0;
  *(_QWORD *)(a2 + 492) = 0;
  *(_DWORD *)(a2 + 500) = 0;
  *(_QWORD *)(a2 + 484) = 0;
  *(_OWORD *)(a2 + 504) = xmmword_21B9A5130;
  *(_WORD *)(a2 + 476) = -29472;
  *(_WORD *)(a2 + 460) = -29472;
  *(_QWORD *)(a2 + 462) = 0;
  *(_QWORD *)(a2 + 468) = 0;
  do
  {
    v3 = a2 + v2;
    *(_QWORD *)v3 = 0;
    *(_WORD *)(v3 + 8) = 0;
    v2 += 16;
  }
  while (v2 != 160);
  v4 = 0;
  *(_OWORD *)(a2 + 224) = 0u;
  *(_OWORD *)(a2 + 240) = 0u;
  *(_OWORD *)(a2 + 192) = 0u;
  *(_OWORD *)(a2 + 208) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_QWORD *)(a2 + 416) = 0;
  *(_QWORD *)(a2 + 424) = 0;
  *(_QWORD *)(a2 + 431) = 0;
  *(_BYTE *)(a2 + 439) = *(_BYTE *)(a2 + 439) & 0xFC | 1;
  *(_DWORD *)(a2 + 456) = 0;
  *(_OWORD *)(a2 + 440) = xmmword_21B9A5140;
  do
  {
    v5 = a2 + v4;
    *(_WORD *)(v5 + 256) = 0;
    *(_QWORD *)(v5 + 264) = 0;
    *(_DWORD *)(v5 + 260) = 0;
    v4 += 16;
  }
  while (v4 != 160);
  v6 = *(unsigned __int8 *)(result + 32496);
  if (*(_BYTE *)(result + 32496))
  {
    v7 = (_BYTE *)(a2 + 602);
    do
    {
      *(_OWORD *)(v7 - 18) = 0uLL;
      *(_OWORD *)(v7 - 34) = 0uLL;
      *(_OWORD *)(v7 - 50) = 0uLL;
      *(_OWORD *)(v7 - 66) = 0uLL;
      *(_OWORD *)(v7 - 82) = 0uLL;
      *((_WORD *)v7 - 1) = 1;
      *v7 = 0;
      v7 += 88;
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t gleUnbindFramebufferObject(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = (unsigned __int8 *)(result + 32496);
  if (*(_BYTE *)(result + 32496))
  {
    v3 = 0;
    v4 = a2 + 200;
    v5 = (_QWORD *)(result + 32512);
    do
    {
      result = (*(uint64_t (**)(_QWORD, _QWORD))(v5[206] + 1592))(*v5, *(_QWORD *)(v4 + 8 * v3++));
      v5 += 209;
    }
    while (v3 < *v2);
  }
  return result;
}

void gleFreeFramebufferObject(uint64_t a1, char *a2)
{
  void *v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  int v10;

  v4 = (void *)*((_QWORD *)a2 + 4);
  if (v4)
  {
    free(v4);
    *((_QWORD *)a2 + 4) = 0;
  }
  if (*(_BYTE *)(a1 + 320))
  {
    v5 = 0;
    v6 = a2 + 200;
    v7 = a1 + 360;
    do
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v7 + 1616))(*(_QWORD *)(v7 - 8), *(_QWORD *)&v6[8 * v5]);
      *(_QWORD *)&v6[8 * v5++] = 0;
      v7 += 32;
    }
    while (v5 < *(unsigned __int8 *)(a1 + 320));
  }
  for (i = 40; i != 200; i += 16)
  {
    v9 = *(_QWORD *)&a2[i];
    if (v9)
    {
      v10 = *(_DWORD *)(v9 + 20) - 1;
      *(_DWORD *)(v9 + 20) = v10;
      if (!v10)
        gleFreeTextureObject(a1, v9);
    }
  }
  free(a2);
}

void gleUnbindAndFreeFramebufferObject(uint64_t a1, char *a2)
{
  void *v4;
  unint64_t v5;
  char *v6;
  _QWORD *v7;
  uint64_t i;
  uint64_t v9;
  int v10;

  v4 = (void *)*((_QWORD *)a2 + 4);
  if (v4)
  {
    free(v4);
    *((_QWORD *)a2 + 4) = 0;
  }
  if (*(_BYTE *)(a1 + 32496))
  {
    v5 = 0;
    v6 = a2 + 200;
    v7 = (_QWORD *)(a1 + 32512);
    do
    {
      (*(void (**)(_QWORD, _QWORD))(v7[206] + 1592))(*v7, *(_QWORD *)&v6[8 * v5]);
      (*(void (**)(_QWORD, _QWORD))(v7[206] + 1616))(v7[1], *(_QWORD *)&v6[8 * v5]);
      *(_QWORD *)&v6[8 * v5++] = 0;
      v7 += 209;
    }
    while (v5 < *(unsigned __int8 *)(a1 + 32496));
  }
  for (i = 40; i != 200; i += 16)
  {
    v9 = *(_QWORD *)&a2[i];
    if (v9)
    {
      v10 = *(_DWORD *)(v9 + 20) - 1;
      *(_DWORD *)(v9 + 20) = v10;
      if (!v10)
        gleUnbindAndFreeTextureObject(a1, v9);
    }
  }
  free(a2);
}

void gleBindFramebuffer(int8x16_t *a1, int a2, unsigned int a3)
{
  __int8 *v5;
  __int8 *v6;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int i;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  __int8 v20;
  int v21;
  uint64_t v24;
  _WORD *v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t v30;
  _DWORD *v31;
  _DWORD *v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t *v36;
  __int8 v37;
  uint64_t v38;
  uint64_t *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  int v50;
  int v51;

  v5 = &a1[2029].i8[6];
  v6 = &a1[1790].i8[12];
  if (a3)
  {
    v8 = a1[1206].i64[0] + 8;
    v9 = gleLookupHashObject(v8, a3);
    if (!v9)
    {
      v10 = (uint64_t *)malloc_type_malloc(88 * v5[26] + 560, 0x577B5147uLL);
      if (!v10)
        abort();
      v9 = v10;
      *((_DWORD *)v10 + 4) = a3;
      *v10 = 0;
      *(uint64_t *)((char *)v10 + 20) = 0x100000001;
      v10[4] = 0;
      *((_DWORD *)v10 + 7) = 0;
      v11 = (uint64_t)(v10 + 5);
      gleInitializeFramebuffer((uint64_t)a1, (uint64_t)(v10 + 5));
      gleCreatePluginFramebuffer((uint64_t)a1, v11);
      gleAddHashNameAndObject((uint64_t)a1, v8, (uint64_t)v9);
    }
    if (v5[26])
    {
      for (i = *((_DWORD *)v9 + 135); i; i ^= 1 << v13)
      {
        v13 = __clz(__rbit32(i));
        v14 = v9[2 * v13 + 5];
        if (v14)
        {
          v15 = *(_QWORD *)(v14 + 576);
          if (v15)
          {
            if (v15 != a1[1842].i64[0])
              gleSynchronizePluginTextureLevels((uint64_t)a1, v14 + 40);
          }
        }
      }
    }
    v16 = *((_DWORD *)v9 + 5);
    *((_DWORD *)v9 + 5) = v16 + 1;
    if (a2 == 36160)
    {
      *((_DWORD *)v9 + 5) = v16 + 2;
LABEL_18:
      v17 = a1[1810].i64[1];
      a1[1810].i64[1] = (uint64_t)v9;
      v18 = *((_DWORD *)v6 + 287) | 0x82000000;
      goto LABEL_19;
    }
  }
  else
  {
    v9 = 0;
  }
  if (a2 == 36160)
    goto LABEL_18;
  if (a2 == 36009)
  {
    v17 = 0;
    v18 = *((_DWORD *)v6 + 287);
LABEL_19:
    v19 = a1[1810].i64[0];
    a1[1810].i64[0] = (uint64_t)v9;
    *(_DWORD *)v6 = 0;
    *((_DWORD *)v6 + 287) = v18 | 0x50000000;
    goto LABEL_20;
  }
  v19 = 0;
  v17 = a1[1810].i64[1];
  a1[1810].i64[1] = (uint64_t)v9;
  *((_DWORD *)v6 + 287) |= 0x82000000;
  if (a2 == 36008)
    goto LABEL_42;
LABEL_20:
  if (v9)
    v20 = 0;
  else
    v20 = *(_BYTE *)(a1[1842].i64[1] + 41);
  v5[13] = v20;
  v21 = (v19 == 0) ^ (v9 == 0);
  if (v9 && v19)
  {
    if (*(unsigned __int16 *)(v19 + 474) != *((unsigned __int16 *)v9 + 237)
      || *(unsigned __int16 *)(v19 + 476) != *((unsigned __int16 *)v9 + 238)
      || *(_DWORD *)(v19 + 488) != *((_DWORD *)v9 + 122))
    {
      LOBYTE(v21) = 1;
    }
    if ((v21 & 1) == 0)
      goto LABEL_37;
    goto LABEL_36;
  }
  if (v21)
LABEL_36:
    gleUpdateViewScissorDataIndexed((uint64_t)a1, 0);
LABEL_37:
  *(_DWORD *)v6 = 0;
  a1[96].i32[3] |= 0x48000u;
  v24 = a1[1810].i64[0];
  v25 = (_WORD *)(v24 + 552);
  if (!v24)
    v25 = v6 + 1156;
  a1[958].i16[7] = *((_WORD *)v6 + 576) & *v25;
  if (!v24 && v5[7] && a1[1813].i64[0])
  {
    *v5 = v5[13];
    v37 = v5[3];
    v5[1] = v37;
    v5[2] |= v37;
  }
  else
  {
    *(_WORD *)v5 = 0;
  }
  --*((_DWORD *)v6 + 291);
LABEL_42:
  gliUpdateDispatchState(a1, 0);
  if (v9)
  {
    if (a2 == 36009)
    {
      v5[16] = *((_DWORD *)v9 + 120) == 0;
      v38 = v5[26];
      if (v5[26])
      {
        v39 = v9 + 25;
        v40 = v5 + 1122;
        do
        {
          v41 = *v39++;
          *v40 = v41;
          v40 += 209;
          --v38;
        }
        while (v38);
      }
      if (*((_DWORD *)v9 + 139) == *(_DWORD *)(a1[1206].i64[0] + 4))
        goto LABEL_72;
      v31 = v9 + 5;
      v32 = (_DWORD *)v9 + 139;
      v33 = (uint64_t)a1;
      v34 = 2;
    }
    else if (a2 == 36160)
    {
      v26 = *((_DWORD *)v9 + 120) == 0;
      v5[15] = v26;
      v5[16] = v26;
      v27 = v5[26];
      if (v5[26])
      {
        v28 = v9 + 25;
        v29 = v5 + 1130;
        do
        {
          *(v29 - 1) = *v28;
          v30 = *v28++;
          *v29 = v30;
          v29 += 209;
          --v27;
        }
        while (v27);
      }
      if (*((_DWORD *)v9 + 139) == *(_DWORD *)(a1[1206].i64[0] + 4))
        goto LABEL_72;
      v31 = v9 + 5;
      v32 = (_DWORD *)v9 + 139;
      v33 = (uint64_t)a1;
      v34 = 3;
    }
    else
    {
      v5[15] = *((_DWORD *)v9 + 120) == 0;
      v42 = v5[26];
      if (v5[26])
      {
        v43 = v9 + 25;
        v44 = v5 + 1130;
        do
        {
          v45 = *v43++;
          *v44 = v45;
          v44 += 209;
          --v42;
        }
        while (v42);
      }
      if (*((_DWORD *)v9 + 139) == *(_DWORD *)(a1[1206].i64[0] + 4))
        goto LABEL_72;
      v31 = v9 + 5;
      v32 = (_DWORD *)v9 + 139;
      v33 = (uint64_t)a1;
      v34 = 1;
    }
    gleUpdateFBODirtyStateForTexStampChange(v33, v31, v34);
    *v32 = *(_DWORD *)(a1[1206].i64[0] + 4);
LABEL_72:
    if (*((_DWORD *)v6 + 293) != *(_DWORD *)(a1[1206].i64[0] + 4))
    {
      gleUpdateCtxDirtyStateForTexStampChange((uint64_t)a1);
      *((_DWORD *)v6 + 293) = *(_DWORD *)(a1[1206].i64[0] + 4);
    }
    goto LABEL_81;
  }
  if (a2 == 36009)
  {
    v5[16] = 1;
    v46 = v5[26];
    if (v5[26])
    {
      v47 = v5 + 1122;
      do
      {
        *v47 = 0;
        v47 += 209;
        --v46;
      }
      while (v46);
    }
  }
  else if (a2 == 36160)
  {
    *(_WORD *)(v5 + 15) = 257;
    v35 = v5[26];
    if (v5[26])
    {
      v36 = &a1[2099].i64[1];
      do
      {
        *v36 = 0;
        v36[1] = 0;
        v36 += 209;
        --v35;
      }
      while (v35);
    }
  }
  else
  {
    v5[15] = 1;
    v48 = v5[26];
    if (v5[26])
    {
      v49 = v5 + 1130;
      do
      {
        *v49 = 0;
        v49 += 209;
        --v48;
      }
      while (v48);
    }
  }
LABEL_81:
  if (v19 && (v50 = *(_DWORD *)(v19 + 20) - 1, (*(_DWORD *)(v19 + 20) = v50) == 0))
  {
    gleUnbindAndFreeFramebufferObject((uint64_t)a1, (char *)v19);
    if (!v17)
      return;
  }
  else if (!v17)
  {
    return;
  }
  v51 = *(_DWORD *)(v17 + 20) - 1;
  *(_DWORD *)(v17 + 20) = v51;
  if (!v51)
    gleUnbindAndFreeFramebufferObject((uint64_t)a1, (char *)v17);
}

uint64_t gleSetUnknownFramebufferCompleteness(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(a2 + 440) = 0xFFFF;
  v2 = *(unsigned __int8 *)(result + 32496);
  if (*(_BYTE *)(result + 32496))
  {
    v3 = a2 + 601;
    do
    {
      *(_WORD *)(v3 - 1) = 1;
      v3 += 88;
      --v2;
    }
    while (v2);
  }
  if (*(_QWORD *)(result + 28960) + 40 == a2)
  {
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 29800) |= 0x10000000u;
  }
  if (*(_QWORD *)(result + 28968) + 40 == a2)
    *(_DWORD *)(result + 29800) |= 0x2000000u;
  ++*(_DWORD *)(*(_QWORD *)(result + 19296) + 316);
  return result;
}

uint64_t gleInvalidateCurrentDrawFramebufferTextures(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;

  v1 = result;
  v2 = 0;
  v3 = *(_QWORD *)(result + 28960);
  v14 = v3 + 296;
  do
  {
    if (((*(_DWORD *)(v3 + 496) >> v2) & 1) != 0)
    {
      v4 = *(_QWORD *)(v3 + 40 + 16 * v2);
      if (v4)
      {
        if ((*(_WORD *)(v4 + 808) & 0x800) == 0)
        {
          v5 = v14 + 16 * v2;
          v6 = *(int *)(v5 + 8);
          if (!*(_QWORD *)(v4 + 576))
            result = gfxWaitTextureOnDevices();
          *(_QWORD *)(v4 + 576) = *(_QWORD *)(v1 + 29472);
          if (*(_DWORD *)(v3 + 484) && !*(_WORD *)v5)
          {
            v10 = 0;
            v11 = v4 + 1036;
            v12 = v4 + 32 * v6 + 1072;
            do
            {
              v13 = *(_BYTE *)(v12 + 11);
              if ((v13 & 0x10) != 0)
              {
                if ((*(_BYTE *)(v12 + 11) & 9) == 0)
                {
                  result = gfxFreeTextureLevel();
                  v13 = *(_BYTE *)(v12 + 11);
                }
                v13 &= ~0x10u;
                *(_WORD *)(v11 + v10) &= ~(1 << v6);
              }
              *(_BYTE *)(v12 + 11) = v13 | 0x40;
              v10 += 2;
              v12 += 480;
            }
            while (v10 != 12);
          }
          else
          {
            v7 = *(int *)(v14 + 16 * v2 + 4);
            v8 = (char *)(v4 + 480 * (int)v7 + 32 * v6 + 1083);
            v9 = *v8;
            if ((*v8 & 0x10) != 0)
            {
              if ((*v8 & 9) == 0)
              {
                result = gfxFreeTextureLevel();
                v9 = *v8;
              }
              v9 &= ~0x10u;
              *(_WORD *)(v4 + 2 * v7 + 1036) &= ~(1 << v6);
            }
            *v8 = v9 | 0x40;
          }
        }
      }
    }
    ++v2;
  }
  while (v2 != 10);
  return result;
}

void gleFramebufferTexture(uint64_t a1, uint64_t a2, unsigned int a3, __int16 a4, uint64_t a5, int a6, int a7, int a8, char a9)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  _WORD *v22;
  _DWORD *v23;
  int v24;
  uint64_t v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  int v41;
  uint64_t v42;
  _WORD *v43;
  BOOL v44;
  __int16 v45;
  _WORD *v46;
  int v47;
  uint64_t v48;
  _WORD *v49;
  __int16 v50;
  _WORD *v51;
  int v52;
  int v53;
  _WORD *v54;

  v17 = a1 + 29804;
  v54 = (_WORD *)(a1 + 15342);
  gleSetUnknownFramebufferCompleteness(a1, a2);
  v18 = a2 + 16 * a3;
  v19 = *(_QWORD *)v18;
  *(_QWORD *)v18 = a5;
  *(_BYTE *)(v18 + 9) = a9;
  v20 = 1 << a3;
  *(_DWORD *)(a2 + 496) |= 1 << a3;
  v21 = a2 + 256;
  v22 = (_WORD *)(a2 + 256 + 16 * a3);
  if (a5)
  {
    *v22 = a4;
    v23 = (_DWORD *)(v21 + 16 * a3);
    v23[1] = a6;
    v23[2] = a7;
    v23[3] = a8;
    v24 = *(_DWORD *)(a2 + 500) | v20;
    *(_DWORD *)(a2 + 500) = v24;
    v25 = *(unsigned __int8 *)(v17 + 2692);
    if (*(_BYTE *)(v17 + 2692))
    {
      v26 = (uint64_t *)(a5 + 40);
      v27 = (_QWORD *)(a2 + 8 * a3 + 520);
      do
      {
        v28 = *v26++;
        *v27 = v28;
        v27 += 11;
        --v25;
      }
      while (v25);
    }
    if (a3 <= 7)
    {
      v29 = 0;
      v30 = a3 + 36064;
      while (1)
      {
        v31 = a2 + 2 * v29;
        v32 = *(unsigned __int16 *)(v31 + 460);
        if (v30 == v32)
          break;
        if (++v29 == 8)
          goto LABEL_25;
      }
      *(_DWORD *)(a2 + 512) |= 1 << v29;
      *(_WORD *)(v31 + 416) = v32;
LABEL_25:
      v41 = *(unsigned __int16 *)(a2 + 476);
      if (v30 == v41)
        *(_WORD *)(a2 + 432) = v41;
      goto LABEL_29;
    }
    if (a3 == 9)
    {
      v39 = *(_DWORD *)(a2 + 512) | 0x600;
    }
    else
    {
      if (a3 != 8)
      {
LABEL_29:
        v42 = *(_QWORD *)(a1 + 28960);
        if (v42 + 40 == a2)
        {
          v43 = (_WORD *)(v42 + 552);
          v44 = v42 == 0;
          v47 = *(_DWORD *)v17;
          v46 = (_WORD *)(v17 + 4);
          v45 = v47;
          if (v44)
            v43 = v46;
          *v54 = v45 & *v43;
        }
        *(_DWORD *)(a5 + 1008) = 65541;
        ++*(_DWORD *)(a5 + 20);
        goto LABEL_43;
      }
      v39 = *(_DWORD *)(a2 + 512) | 0x100;
    }
    *(_DWORD *)(a2 + 512) = v39;
    goto LABEL_29;
  }
  *v22 = 0;
  v33 = v21 + 16 * a3;
  *(_QWORD *)(v33 + 8) = 0;
  *(_DWORD *)(v33 + 4) = 0;
  v24 = *(_DWORD *)(a2 + 500) & ~v20;
  *(_DWORD *)(a2 + 500) = v24;
  v34 = *(unsigned __int8 *)(v17 + 2692);
  if (*(_BYTE *)(v17 + 2692))
  {
    v35 = (_QWORD *)(a2 + 8 * a3 + 520);
    do
    {
      *v35 = 0;
      v35 += 11;
      --v34;
    }
    while (v34);
  }
  if (a3 <= 7)
  {
    v36 = 0;
    v37 = a3 + 36064;
    while (1)
    {
      v38 = a2 + 2 * v36;
      if (v37 == *(unsigned __int16 *)(v38 + 460))
        break;
      if (++v36 == 8)
        goto LABEL_35;
    }
    *(_DWORD *)(a2 + 512) &= ~(1 << v36);
    *(_WORD *)(v38 + 416) = 0;
LABEL_35:
    if (v37 == *(unsigned __int16 *)(a2 + 476))
      *(_WORD *)(a2 + 432) = 0;
    goto LABEL_39;
  }
  if (a3 == 9)
  {
    v40 = *(_DWORD *)(a2 + 512) & 0xFFFFF9FF;
  }
  else
  {
    if (a3 != 8)
      goto LABEL_39;
    v40 = *(_DWORD *)(a2 + 512) & 0xFFFFFEFF;
  }
  *(_DWORD *)(a2 + 512) = v40;
LABEL_39:
  v48 = *(_QWORD *)(a1 + 28960);
  if (v48 + 40 == a2)
  {
    v49 = (_WORD *)(v48 + 552);
    v44 = v48 == 0;
    v52 = *(_DWORD *)v17;
    v51 = (_WORD *)(v17 + 4);
    v50 = v52;
    if (v44)
      v49 = v51;
    *v54 = v50 & *v49;
  }
LABEL_43:
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 29480) + 561) & 0x40) != 0)
    v24 &= *(_DWORD *)(a2 + 508) | *(_DWORD *)(a2 + 504) | 0xFFFFFF00;
  *(_DWORD *)(a2 + 456) = v24;
  if (v19)
  {
    v53 = *(_DWORD *)(v19 + 20) - 1;
    *(_DWORD *)(v19 + 20) = v53;
    if (!v53)
      gleUnbindAndFreeTextureObject(a1, v19);
  }
}

uint64_t gleUpdateFramebufferCompleteness(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned __int16 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  unsigned __int16 v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  unsigned int v45;
  BOOL v46;
  int v47;
  int v48;
  _BOOL4 v49;
  int v50;
  int v51;
  BOOL v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  BOOL v62;
  int v63;
  uint64_t v65;
  int v66;
  int v67;
  _DWORD *v68;
  int v69;
  _BOOL4 v70;
  int v71;
  _DWORD *v72;
  int v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  unsigned __int16 v78;
  int v79;
  int v80;
  int v81;

  *(_DWORD *)(a2 + 434) = 0;
  *(_BYTE *)(a2 + 438) = 0;
  *(_BYTE *)(a2 + 439) |= 1u;
  v72 = (_DWORD *)(a2 + 444);
  *(_QWORD *)(a2 + 444) = 0x100000000;
  *(_QWORD *)(a2 + 488) = 0;
  *(_DWORD *)(a2 + 484) = 0;
  if (*(_QWORD *)(result + 28960) + 40 == a2)
  {
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 29800) |= 0x40000000u;
  }
  if (*(_QWORD *)(result + 28968) + 40 == a2)
    *(_DWORD *)(result + 29800) |= 0x80000000;
  v68 = (_DWORD *)(result + 28652);
  v3 = 0;
  v73 = 0;
  v69 = 0;
  v67 = 0;
  v4 = 0;
  v76 = 0;
  v77 = 0;
  v5 = 0;
  v78 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = *(_DWORD *)(a2 + 500);
  v15 = 15;
  v16 = 0xFFFFFFFFLL;
  v74 = 1;
  v75 = 0;
  v71 = v14;
  do
  {
    v17 = 1 << v9;
    if (((1 << v9) & v14) == 0 || (v18 = *(_QWORD *)(a2 + v3)) == 0)
    {
      v28 = v7;
      v29 = v8;
      goto LABEL_105;
    }
    v80 = v10;
    v81 = v11;
    v79 = v12;
    v19 = v16;
    v20 = a2 + v3;
    v21 = *(_DWORD *)(a2 + v3 + 260);
    v22 = *(unsigned int *)(a2 + v3 + 264);
    v23 = v18 + 1072 + 480 * v21 + 32 * v22;
    v24 = *(unsigned __int16 *)(v23 + 4);
    v25 = *(unsigned __int16 *)(v23 + 6);
    v26 = *(_DWORD *)(a2 + 496);
    if ((v26 & v17) != 0)
    {
      if (!*(_BYTE *)(v18 + 810))
      {
        v33 = v13;
        v34 = v18 + 40;
        if (((*(unsigned __int16 *)(v18 + 40 + 2 * (int)v21 + 984) >> v22) & 1) == 0)
        {
          v27 = 0;
          v13 = v33;
          v14 = v71;
LABEL_11:
          *(_BYTE *)(a2 + v3 + 8) = !v27;
          *(_DWORD *)(a2 + 496) = v26 & ~v17;
          if (!v27)
            goto LABEL_173;
          goto LABEL_15;
        }
        switch(*(_WORD *)(v20 + 256))
        {
          case 5:
          case 9:
          case 0xA:
            v35 = *(_DWORD *)(a2 + v3 + 268);
            v36 = *(unsigned __int16 *)(v34 + 480 * (int)v21 + 32 * (int)v22 + 1040);
            goto LABEL_113;
          case 6:
            v35 = *(_DWORD *)(a2 + v3 + 268);
            v36 = *(unsigned __int16 *)(v34 + 480 * (int)v21 + 32 * (int)v22 + 1038);
LABEL_113:
            v13 = v33;
            v14 = v71;
            if (v35 < v36)
              goto LABEL_114;
            break;
          default:
            v27 = 0;
            v57 = *(_DWORD *)(a2 + v3 + 268);
            v58 = v34 + 480 * (int)v21 + 32 * (int)v22;
            v59 = *(unsigned __int16 *)(v58 + 1040);
            LODWORD(v58) = *(unsigned __int8 *)(v58 + 1042);
            v60 = v58 + v59;
            v61 = -(int)v58;
            v62 = v57 >= v60 || v57 < v61;
            v13 = v33;
            v14 = v71;
            if (v62)
              goto LABEL_11;
LABEL_114:
            if (v9 > 7)
            {
              v55 = *(unsigned __int16 *)(v18 + 812);
              if (v3 == 128)
                v56 = 6402;
              else
                v56 = 6401;
              v27 = v55 == v56 || v55 == 34041;
              goto LABEL_11;
            }
            v27 = 0;
            v47 = *(unsigned __int16 *)(v18 + 1000);
            if (v47 == 35409 || v47 == 35905)
              goto LABEL_11;
            v48 = *(unsigned __int16 *)(v18 + 812);
            v49 = v47 == 35901 || v47 == 35898;
            if ((v47 == 35901 || v47 == 35898) && (*(_BYTE *)(*(_QWORD *)(result + 29480) + 578) & 1) == 0)
              break;
            v70 = v49;
            if (v48 == 6407)
            {
              if ((v47 - 36208) < 0x24)
                break;
              v27 = 0;
              if (v47 == 36975 || (v47 - 33341) > 0xFFFFFFF3)
                goto LABEL_11;
            }
            v50 = *(unsigned __int16 *)(v18 + 1000);
            v51 = v47 & 0xFFFE;
            if (v51 != 36012
              && (v50 - 34836) >= 0xC
              && (v50 - 33325) >= 4
              && v50 != 35901
              && v50 != 35898
              || (v51 != 34842 ? (v52 = (v50 & 0xFFFFFFFD) == 33325) : (v52 = 1), v52 ? (v53 = 1) : (v53 = v70), v53 == 1))
            {
              if (!*(_BYTE *)(v18 + 595))
              {
                if ((v48 - 6403) > 7)
                  goto LABEL_143;
                v54 = 1 << (v48 - 3);
                if ((v54 & 0x31) == 0)
                {
                  if ((v54 & 0xC8) != 0)
                  {
LABEL_145:
                    if ((*(_BYTE *)(*(_QWORD *)(result + 29480) + 561) & 0x40) == 0)
                      break;
                  }
                  else
                  {
LABEL_143:
                    if (v48 != 33319)
                    {
                      if (v48 != 32841)
                        break;
                      goto LABEL_145;
                    }
                  }
                }
                v27 = 1;
                goto LABEL_11;
              }
            }
            break;
        }
      }
      v27 = 0;
      goto LABEL_11;
    }
    if (*(_BYTE *)(v20 + 8))
    {
LABEL_173:
      v66 = 36054;
      goto LABEL_177;
    }
LABEL_15:
    v30 = *(unsigned __int16 *)(v20 + 256);
    if (v30 == 6)
      v31 = 1;
    else
      v31 = v25;
    v32 = *(char *)(a2 + v3 + 9);
    if (v19 == -1)
    {
      v19 = v32 != 0;
      if (!*(_BYTE *)(a2 + v3 + 9))
        goto LABEL_27;
    }
    else
    {
      if (v19 != v32)
        goto LABEL_175;
      if (!*(_BYTE *)(a2 + v3 + 9))
      {
LABEL_27:
        v29 = v8;
        goto LABEL_36;
      }
    }
    v29 = 6;
    switch(v30)
    {
      case 0:
        break;
      case 1:
      case 5:
      case 9:
      case 10:
        v29 = *(unsigned __int16 *)(v18 + 1072 + 480 * v21 + 32 * v22 + 8);
        break;
      case 6:
        v29 = v25;
        break;
      default:
        v29 = 0;
        break;
    }
    if ((_DWORD)v8)
    {
      if ((_DWORD)v8 != (_DWORD)v29)
      {
        v66 = 36265;
        goto LABEL_177;
      }
    }
    else
    {
      *v72 = v29;
    }
    if (v9 > 7)
    {
      v19 = 1;
    }
    else if (v15 == 15)
    {
      v19 = 1;
      v15 = v30;
    }
    else
    {
      if (v15 != v30)
      {
LABEL_175:
        v66 = 36264;
        goto LABEL_177;
      }
      v19 = 1;
    }
LABEL_36:
    v28 = v7;
    if (!(_WORD)v7)
    {
      v37 = *(_DWORD *)(a2 + 452);
      if (v37 == 35453)
        v38 = v31;
      else
        v38 = v24;
      if (v37 == 35453)
        v39 = v24;
      else
        v39 = v31;
      if (v37 == 35451)
        v28 = v31;
      else
        v28 = v38;
      if (v37 == 35451)
        v4 = v24;
      else
        v4 = v39;
      *(_WORD *)(a2 + 434) = v28;
      *(_WORD *)(a2 + 436) = v4;
      LOWORD(v76) = v4;
      WORD2(v76) = v28;
      LOWORD(v77) = v4;
      WORD2(v77) = v28;
      v5 = v28;
      v78 = v4;
      v6 = v28;
    }
    v40 = *(_DWORD *)(a2 + 452);
    if ((*(_BYTE *)(*(_QWORD *)(result + 29480) + 561) & 0x40) != 0)
    {
      switch(v40)
      {
        case 35450:
        case 35452:
          if (v24 < (unsigned __int16)v5)
          {
            *(_WORD *)(a2 + 434) = v24;
            WORD2(v76) = v24;
            WORD2(v77) = v24;
            v5 = v24;
          }
          v6 = v5;
          v78 = v77;
          v28 = v5;
          if (v31 < (unsigned __int16)v77)
            goto LABEL_66;
          break;
        case 35451:
        case 35453:
          if (v31 < (unsigned __int16)v6)
          {
            *(_WORD *)(a2 + 434) = v31;
            WORD2(v76) = v31;
            WORD2(v77) = v31;
            v5 = v31;
            v6 = v31;
          }
          LOWORD(v31) = v24;
          v28 = v6;
          if (v24 < v78)
          {
LABEL_66:
            v4 = v31;
            *(_WORD *)(a2 + 436) = v31;
            LOWORD(v76) = v31;
            LOWORD(v77) = v31;
            v78 = v31;
            v28 = v6;
          }
          break;
        default:
          break;
      }
    }
    else
    {
      switch(v40)
      {
        case 35450:
        case 35452:
          v66 = 36057;
          if ((_DWORD)v24 != WORD2(v77) || (_DWORD)v31 != (unsigned __int16)v76)
            goto LABEL_177;
          if (v40 == 35451)
          {
LABEL_55:
            v66 = 36057;
            if ((_DWORD)v31 != WORD2(v76))
              goto LABEL_177;
            v52 = (_DWORD)v24 == v4;
            v4 = v24;
            LOWORD(v76) = v24;
            WORD2(v76) = v31;
            LOWORD(v77) = v24;
            WORD2(v77) = v31;
            v5 = v31;
            v78 = v24;
            v6 = v31;
            v28 = v31;
            if (!v52)
              goto LABEL_177;
          }
          else
          {
            LOWORD(v76) = v31;
            LOWORD(v77) = v31;
            WORD2(v77) = v24;
            v5 = v24;
            v78 = v31;
            v6 = v24;
            v28 = v24;
          }
          break;
        case 35451:
        case 35453:
          goto LABEL_55;
        default:
          break;
      }
    }
    if (v9 > 7)
    {
      v16 = v19;
      v42 = v81;
    }
    else
    {
      v41 = *(_BYTE *)(v18 + 832) & 1;
      v16 = v19;
      v42 = v81;
      if ((_WORD)v7)
      {
        if (v74 == v41)
        {
          v66 = 36061;
          goto LABEL_177;
        }
      }
      else
      {
        v74 = v41 == 0;
        *(_DWORD *)(a2 + 448) = v74;
      }
    }
    v43 = *(unsigned __int8 *)(v18 + 1020);
    if (v80)
    {
      if (v75 != v43 || ((*(unsigned __int16 *)(v18 + 1022) >> 14) & 1) != (*(_BYTE *)(a2 + 439) & 1))
      {
        v66 = 36182;
        goto LABEL_177;
      }
    }
    else
    {
      *(_BYTE *)(a2 + 438) = v43;
      *(_BYTE *)(a2 + 439) = *(_BYTE *)(a2 + 439) & 0xFE | ((*(_WORD *)(v18 + 1022) & 0x4000) != 0);
      v75 = v43;
    }
    if (v9 <= 7)
    {
      v44 = *(unsigned __int16 *)(v18 + 1000);
      v11 = v44;
      if (v42)
      {
        if (v42 == v44)
        {
          v11 = v42;
        }
        else
        {
          v11 = v42;
          if ((*(_BYTE *)(*(_QWORD *)(result + 29480) + 561) & 0x40) == 0)
          {
            v66 = 36058;
            goto LABEL_177;
          }
        }
      }
      if ((*(_DWORD *)(a2 + 456) & v17) == 0)
      {
        v12 = v79;
        goto LABEL_104;
      }
      v45 = v44 - 36208;
      v12 = 1;
      if (!v79 && v45 >= 0x24)
      {
        v46 = v44 != 36975 && (v44 - 33329) >= 0xC;
        v12 = !v46;
      }
      if ((v44 - 34836) < 0xC
        || (v44 - 33325) < 4
        || (v44 & 0xFFFE) == 0x8CAC
        || v44 == 35901
        || v44 == 35898)
      {
        v73 |= v17;
        v72[10] = v73;
LABEL_102:
        v16 = v19;
        goto LABEL_104;
      }
      v46 = v45 >= 0x12;
      v16 = v19;
      if (!v46)
        goto LABEL_111;
      if ((v44 - 33330) > 0xA)
      {
        if (v44 == 36975)
        {
LABEL_111:
          v69 |= v17;
          *(_DWORD *)(a2 + 488) = v69;
          goto LABEL_104;
        }
        if ((v44 - 36226) < 0x12)
        {
LABEL_169:
          v67 |= v17;
          *(_DWORD *)(a2 + 492) = v67;
          goto LABEL_102;
        }
        v63 = v44 & 1;
      }
      else
      {
        if ((v44 & 1) == 0)
          goto LABEL_111;
        v63 = 1;
      }
      if ((v44 - 33340) < 0xFFFFFFF5 || !v63)
        goto LABEL_102;
      goto LABEL_169;
    }
    v12 = v79;
    v11 = v42;
LABEL_104:
    ++v13;
    v10 = 1;
LABEL_105:
    ++v9;
    v3 += 16;
    v7 = v28;
    v8 = v29;
  }
  while (v3 != 160);
  if (v13)
  {
    *(_BYTE *)(a2 + 439) = *(_BYTE *)(a2 + 439) & 0xFD | (2 * (v12 & 1));
    v65 = result;
    result = gleUpdateViewScissorDataIndexed(result, 0);
    v66 = 0;
    *v68 = 0;
    *(_DWORD *)(v65 + 1548) |= 0x48000u;
  }
  else
  {
    v66 = 36055;
  }
LABEL_177:
  *(_DWORD *)(a2 + 440) = v66;
  return result;
}

uint64_t gleCheckFramebufferStatus(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *(unsigned int *)(a2 + 440);
  if (!(_DWORD)result)
    goto LABEL_5;
  if ((_DWORD)result == 0xFFFF)
  {
    gleUpdateFramebufferCompleteness(a1, a2);
    result = *(unsigned int *)(a2 + 440);
  }
  if (!(_DWORD)result)
  {
LABEL_5:
    v5 = *(unsigned __int8 *)(a1 + 32500);
    if (*(_BYTE *)(a2 + 88 * v5 + 600))
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 29496) + 528))(*(_QWORD *)(a1 + 29472), *(_QWORD *)(a2 + 8 * v5 + 160));
      LODWORD(v5) = *(unsigned __int8 *)(a1 + 32500);
    }
    if ((*(_BYTE *)(a2 + 88 * v5 + 601) & 1) != 0)
      return 36061;
    else
      return 36053;
  }
  return result;
}

uint64_t gleGenerateMipmap(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v4;
  __int16 v5;
  int v6;
  char v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;

  result = gleLookUpNonProxyNonFaceTexture(a1, a2);
  v4 = result;
  v5 = *(_WORD *)(result + 768);
  if ((v5 & 0xF) != 0)
  {
    if ((v5 & 0xF) == 2)
      return result;
    v6 = 1;
  }
  else
  {
    v6 = 6;
  }
  v7 = *(_BYTE *)(result + 898);
  *(_BYTE *)(result + 898) = v7 & 0xFE;
  if ((v5 & 0x1C00) == 0x400)
  {
    v8 = 0;
    v9 = 1;
    do
    {
      result = gleGenSurfaceMipmaps(a1, v4, v8, *(_WORD *)(v4 + 982) >> 4, 1);
      v9 &= result;
      v8 = (v8 + 1);
    }
    while (v6 != (_DWORD)v8);
  }
  else
  {
    v10 = 0;
    if (*(_DWORD *)(result + 888) >= (int)*(unsigned __int8 *)(result + 975))
      v11 = *(unsigned __int8 *)(result + 975);
    else
      v11 = *(_DWORD *)(result + 888);
    do
      gleGenerateEmptyMipmaps(a1, v4, v10++, *(_DWORD *)(v4 + 884), v11, 0, 0);
    while (v6 != v10);
    v12 = 0;
    v9 = 1;
    do
    {
      result = gleGenMipmaps(a1, v4, v12, *(_DWORD *)(v4 + 884), 0, 0);
      v9 &= result;
      v12 = (v12 + 1);
    }
    while (v6 != (_DWORD)v12);
  }
  if (!v9)
  {
    gleDirtyTextureObjectCurrentBindPointsData(a1, v4, 0);
    result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 29448) + 328))(*(_QWORD *)(a1 + 29024), *(_QWORD *)(v4 + 8 * *(unsigned __int8 *)(a1 + 32499)));
    if ((_DWORD)result)
    {
      *(_QWORD *)(v4 + 536) = *(_QWORD *)(a1 + 29024);
      result = gleInvalidatePluginTextureLevels(a1, v4);
    }
  }
  *(_BYTE *)(v4 + 898) = *(_BYTE *)(v4 + 898) & 0xFE | v7 & 1;
  return result;
}

uint64_t gleBlitFramebuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8, double a9, __n128 a10, int a11, unsigned int a12, int a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  signed int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  float v30;
  float v31;
  float v32;
  float v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  double v37;
  double v38;
  double v39;
  int v40;
  char *v41;
  uint64_t v42;
  char *v43;
  __int16 v44;
  int v45;
  unsigned int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  __int128 v61;
  __int128 v62;
  unsigned int v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  char *VertexArrayHashObject;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  double v71;
  int v72;
  int v73;
  int v74;
  int v75;
  unsigned int v76;
  char v77;
  __int16 v78;
  int v79;
  __int16 v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  char v85;
  _DWORD *v86;
  uint64_t v87;
  char v88;
  char v89;
  unsigned __int8 *v90;
  int v91;
  unsigned int v92;
  unsigned int v93;
  BOOL v94;
  unsigned int v95;
  BOOL v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  _DWORD *TextureObject;
  char v101;
  unsigned __int16 *v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  _QWORD *v114;
  uint64_t v115;
  int v116;
  int v117;
  float v118;
  float v119;
  unsigned int v120;
  unsigned int v121;
  int v122;
  float v123;
  float v124;
  int v125;
  char *v126;
  int v127;
  int v128;
  unsigned int v129;
  int v130;
  int v131;
  BOOL v133;
  uint64_t v134;
  uint64_t *v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  char v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  __int16 v152;
  int v153;
  int v154;
  signed int v155;
  int v156;
  unsigned int v157;
  unsigned int v158;
  int v159;
  __int16 v160;
  signed int v161;
  int v162;
  unsigned int v163;
  int v164;
  int v165;
  __int16 v166;
  char v167;
  uint64_t v168;
  int v169;
  uint64_t v170;
  int v171;
  unsigned int v172;
  unsigned int v173;
  unsigned int v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  _OWORD v188[13];
  __int128 v189;
  _QWORD v190[8];
  __int128 v191;
  uint64_t v192;
  int v193;
  __int16 v194;
  __int16 v195;
  unsigned __int16 v196;
  int v197;
  char v198;
  char v199;
  char v200;
  char v201;
  char v202;
  char v203;
  char v204;
  char v205;
  char v206;
  char v207;
  char v208;
  int v209;
  char v210;
  unsigned int v211;
  __int16 v212;
  __int16 v213;
  __int16 v214;
  __int16 v215;
  __int16 v216;
  __int16 v217;
  uint64_t v218;
  __int16 v219;
  __int16 v220;
  __int16 v221;
  __int16 v222;
  uint64_t v223;

  v13 = a5;
  v14 = a4;
  v223 = *MEMORY[0x24BDAC8D0];
  v16 = *(_QWORD *)(a1 + 28968);
  v17.n128_u32[1] = 0;
  v17.n128_u64[1] = 0;
  v191 = 0u;
  v18 = a1 + 28696;
  v189 = 0u;
  memset(v190, 0, sizeof(v190));
  v187 = 0u;
  memset(v188, 0, sizeof(v188));
  v185 = 0u;
  v186 = 0u;
  v183 = 0u;
  v184 = 0u;
  v182 = 0u;
  v180 = 0u;
  v181 = 0u;
  v178 = 0u;
  v179 = 0u;
  v176 = 0u;
  v177 = 0u;
  v175 = 0u;
  if (v16)
  {
    v19 = *(unsigned __int16 *)(v16 + 474);
    v20 = *(unsigned __int16 *)(v16 + 476);
  }
  else
  {
    v19 = *(_DWORD *)(a1 + 29632);
    v20 = *(_DWORD *)(a1 + 29636);
  }
  v21 = a11;
  if ((int)a4 >= (int)a2)
  {
    v22 = a8;
    a8 = a6;
    v23 = a4;
    v14 = a2;
  }
  else
  {
    v22 = a6;
    v23 = a2;
  }
  if ((int)a5 >= (int)a3)
  {
    v24 = a11;
    v21 = a7;
    v25 = a5;
    v13 = a3;
  }
  else
  {
    v24 = a7;
    v25 = a3;
  }
  v26 = v23 - v14;
  v27 = v25 - v13;
  v173 = v25 - v13;
  v174 = v23 - v14;
  v28 = v22 - a8;
  v29 = v24 - v21;
  LODWORD(v218) = v14;
  v211 = v13;
  v171 = v25 - v13;
  v172 = v23 - v14;
  v30 = 1.0;
  v31 = 1.0;
  if (v23 - (_DWORD)v14 != v22 - a8)
  {
    v31 = -1.0;
    if (v26 + v28)
      v31 = (float)v28 / (float)v26;
  }
  v164 = v25;
  if (v27 != v29)
  {
    v30 = -1.0;
    if (v27 + v29)
      v30 = (float)v29 / (float)v27;
  }
  v32 = (float)a8;
  v33 = (float)v21;
  v165 = v24;
  v166 = a8;
  v169 = v22 - a8;
  v159 = v24 - v21;
  v160 = v21;
  if (a13 != 9728)
  {
    if (a13 != 9729)
    {
      v162 = 0;
      goto LABEL_31;
    }
    if (v31 != 1.0 && v31 != -1.0 || v30 != 1.0 && v30 != -1.0)
    {
      v162 = 0;
LABEL_31:
      v36 = v13;
      v161 = v14;
      v35 = v14;
      v17.n128_f32[0] = (float)a8;
      a10.n128_f32[0] = (float)v21;
LABEL_32:
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, __n128, __n128, float, float))(*(_QWORD *)(a1 + 29496)
                                                                                                 + 216))(*(_QWORD *)(a1 + 29464), v35, v36, v17, a10, v31, v30);
      if ((_DWORD)result)
      {
        v40 = *(_DWORD *)(*(_QWORD *)(a1 + 19296) + 316);
        if (*(_DWORD *)(v18 + 1120) != v40)
        {
          if (*(_QWORD *)(a1 + 28960))
          {
            result = gleInvalidateCurrentDrawFramebufferTextures(a1);
            v40 = *(_DWORD *)(*(_QWORD *)(a1 + 19296) + 316);
          }
          *(_DWORD *)(v18 + 1120) = v40;
        }
        return result;
      }
      v155 = v23;
      v156 = v22;
      v157 = v20;
      v168 = v18;
      v41 = (char *)(a1 + 24760);
      v42 = a1 + 17572;
      v43 = (char *)(a1 + 15006);
      if (v162)
        v44 = 9728;
      else
        v44 = 9729;
      v152 = v44;
      if (*(_BYTE *)(a1 + 17697))
        v45 = 8208;
      else
        v45 = 0x2000;
      if (*(_BYTE *)(a1 + 24756))
        v45 |= 0x20u;
      if (*(_DWORD *)v42)
        v45 |= 0x100u;
      if (*(_BYTE *)(a1 + 15534) || *(_WORD *)(a1 + 15528) != 2305 || !*(_BYTE *)(a1 + 15538))
        v45 |= 0x400u;
      v158 = v19;
      v46 = a12;
      if (*(_BYTE *)(a1 + 15537) || *(_BYTE *)(a1 + 15533))
        v45 |= 0x800u;
      if (*(_BYTE *)(a1 + 15532))
        v45 |= 0x200u;
      if (*v41)
        v47 = v45 | 0x40;
      else
        v47 = v45;
      if (*(_QWORD *)(a1 + 24768) || *(_QWORD *)(a1 + 24776))
        v47 |= 0x80u;
      if ((*(_DWORD *)(a1 + 19160) & 0xFFFF3FFF) != 0 || (*(_WORD *)(a1 + 19152) & 0x1FF) != 0)
        v47 |= 0x4000u;
      if ((a12 & 0x4100) != 0)
      {
        v48 = 65540;
        if (*(_BYTE *)(a1 + 16532) || *(_BYTE *)(a1 + 16533) || *(_BYTE *)(a1 + 16534) || *(_BYTE *)(a1 + 16535))
          v48 = 65548;
        v49 = v47 | v48;
        if ((a12 & 0x4000) != 0)
        {
          if ((*(_BYTE *)(v168 + 1107) & 0x10) != 0)
          {
            gleUpdateAnyDrawBuffersFloat(a1, v37, v38, v39);
            v46 = a12;
          }
          if (*(_BYTE *)(a1 + 15178) == (*(_BYTE *)(v168 + 3792) == 0))
            v50 = 1;
          else
            v50 = 131073;
          v49 |= v50;
        }
        v47 = v49 | (v46 >> 7) & 2;
        v42 = a1 + 17572;
      }
      *(_OWORD *)((char *)v188 + 8) = *(_OWORD *)(a1 + 9312);
      LODWORD(v190[5]) = *(_DWORD *)(v42 + 2912);
      v51 = *(_OWORD *)(a1 + 9568);
      v175 = *(_OWORD *)(a1 + 9552);
      v176 = v51;
      v52 = *(_OWORD *)(a1 + 9600);
      v177 = *(_OWORD *)(a1 + 9584);
      v178 = v52;
      v53 = *(_OWORD *)(a1 + 9632);
      v179 = *(_OWORD *)(a1 + 9616);
      v180 = v53;
      v181 = *(_OWORD *)(a1 + 9648);
      v182 = *(_OWORD *)(a1 + 9664);
      if ((v47 & 0x10000) != 0)
      {
        v66 = *(_QWORD *)(a1 + 19312);
        v190[3] = *(_QWORD *)(a1 + 26384);
        v190[4] = v66;
        os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
        VertexArrayHashObject = gleCreateVertexArrayHashObject(a1, 0);
        gleCreatePluginVertexArray(a1, (uint64_t)(VertexArrayHashObject + 40));
        v68 = (uint64_t)VertexArrayHashObject;
        v42 = a1 + 17572;
        gleSetCurrentVertexHashObject(a1, v68);
        os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
        LOWORD(v46) = a12;
        *(_QWORD *)(a1 + 19312) = 0;
        if ((v47 & 0x10) == 0)
        {
LABEL_81:
          if ((v47 & 0x20) == 0)
            goto LABEL_82;
          goto LABEL_116;
        }
      }
      else if ((v47 & 0x10) == 0)
      {
        goto LABEL_81;
      }
      v200 = *(_BYTE *)(v42 + 125);
      if ((v47 & 0x20) == 0)
      {
LABEL_82:
        if ((v47 & 0x40) == 0)
          goto LABEL_84;
        goto LABEL_83;
      }
LABEL_116:
      v198 = *(_BYTE *)(a1 + 24756);
      if ((v47 & 0x40) == 0)
      {
LABEL_84:
        v54 = v168;
        if ((v47 & 0x80) != 0)
        {
          *(_OWORD *)&v190[1] = *(_OWORD *)(a1 + 24768);
          if ((v47 & 0x20000) == 0)
          {
LABEL_86:
            if ((v47 & 0x100) == 0)
              goto LABEL_88;
            goto LABEL_87;
          }
        }
        else if ((v47 & 0x20000) == 0)
        {
          goto LABEL_86;
        }
        v196 = *(_WORD *)(v168 + 1014);
        if ((v47 & 0x100) == 0)
        {
LABEL_88:
          if ((v47 & 0x400) != 0)
          {
            v204 = *(_BYTE *)(a1 + 15534);
            v194 = *(_WORD *)(a1 + 15528);
            v193 = *(_DWORD *)(a1 + 15524);
          }
          if ((v47 & 0x800) != 0)
          {
            v202 = *(_BYTE *)(a1 + 15537);
            v201 = *(_BYTE *)(a1 + 15533);
          }
          if ((v47 & 0x200) != 0)
            v203 = *(_BYTE *)(a1 + 15532);
          if ((v47 & 1) != 0)
          {
            *((_QWORD *)&v189 + 1) = *(_QWORD *)(a1 + 20792);
            v55 = *(unsigned __int8 *)(v168 + 3800);
            if (*(_BYTE *)(v168 + 3800))
            {
              v56 = (_QWORD *)&v188[1] + 1;
              v57 = (_QWORD *)(a1 + 33176);
              do
              {
                *v56++ = *v57;
                v57 += 209;
                --v55;
              }
              while (v55);
            }
          }
          if ((v47 & 2) != 0)
          {
            LODWORD(v191) = *(_DWORD *)(a1 + 15760);
            v190[0] = *(_QWORD *)(a1 + 20880);
            v58 = *(unsigned __int8 *)(v168 + 3800);
            if (*(_BYTE *)(v168 + 3800))
            {
              v59 = (_QWORD *)&v188[7] + 1;
              v60 = (_QWORD *)(a1 + 33184);
              do
              {
                *v59++ = *v60;
                v60 += 209;
                --v58;
              }
              while (v58);
            }
          }
          if ((v47 & 4) != 0)
          {
            v61 = *(_OWORD *)(a1 + 10400);
            v183 = *(_OWORD *)(a1 + 10384);
            v184 = v61;
            v62 = *(_OWORD *)(a1 + 10432);
            v185 = *(_OWORD *)(a1 + 10416);
            v186 = v62;
            HIDWORD(v190[7]) = *(_DWORD *)(a1 + 15684);
            v195 = *(_WORD *)(v42 + 6196);
          }
          if ((v47 & 8) != 0)
            v197 = *(_DWORD *)(a1 + 16532);
          if ((v47 & 0x2000) != 0)
          {
            v205 = *v43;
            v187 = *(_OWORD *)(a1 + 15200);
            *(_QWORD *)&v188[0] = *(_QWORD *)(a1 + 15216);
            DWORD1(v191) = *(_DWORD *)(a1 + 15644);
            v206 = *(_BYTE *)(a1 + 15120);
            v207 = *(_BYTE *)(a1 + 15196);
            v208 = *(_BYTE *)(a1 + 15319);
            v209 = *(_DWORD *)(a1 + 15336);
            v210 = *(_BYTE *)(a1 + 15340);
            *(_QWORD *)((char *)&v190[5] + 4) = *(_QWORD *)(a1 + 15324);
            HIDWORD(v190[6]) = *(_DWORD *)(a1 + 15332);
          }
          if ((v47 & 0x4000) != 0)
          {
            DWORD2(v191) = *(_DWORD *)(v42 + 1588);
            HIDWORD(v191) = *(_DWORD *)(v42 + 1580);
          }
          v154 = v47 & 0x8000 | (32 * (v46 & 0x400));
          if (v154)
            v192 = *(_QWORD *)(a1 + 18440);
          HIWORD(v63) = 0;
          *(_QWORD *)(a1 + 9312) = 0;
          v64 = *(_QWORD *)(a1 + 28960);
          v153 = v46 & 0x400;
          if (v64)
          {
            LOWORD(v63) = *(_WORD *)(v64 + 474);
            *(float *)(a1 + 9320) = (float)v63;
            v65 = *(unsigned __int16 *)(v64 + 476);
          }
          else
          {
            *(float *)(a1 + 9320) = (float)*(int *)(v168 + 936);
            v65 = *(_DWORD *)(v168 + 940);
          }
          *(float *)(a1 + 9324) = (float)v65;
          gleUpdateViewScissorDataIndexed(a1, 0);
          glMatrixMode_Exec(a1, 5889);
          glLoadIdentity_Exec(a1);
          v70 = *(_QWORD *)(a1 + 28960);
          if (v70)
          {
            LOWORD(v69) = *(_WORD *)(v70 + 474);
            v71 = (double)v69;
            v72 = *(unsigned __int16 *)(v70 + 476);
          }
          else
          {
            v71 = (double)*(int *)(v168 + 936);
            v72 = *(_DWORD *)(v168 + 940);
          }
          glOrtho_Exec(a1, 0, v71, 0.0, (double)v72, 0.0, -1.0);
          glMatrixMode_Exec(a1, 5888);
          glLoadIdentity_Exec(a1);
          if ((v47 & 0x10) != 0)
          {
            *(_BYTE *)(v42 + 125) = 0;
            gleUpdateInverseNeeds(a1);
            *(_DWORD *)(a1 + 28652) = 0;
            *(_DWORD *)(a1 + 1548) |= 0x1801Eu;
            if ((v47 & 8) == 0)
            {
LABEL_127:
              if ((v47 & 0x20) == 0)
                goto LABEL_128;
              goto LABEL_139;
            }
          }
          else if ((v47 & 8) == 0)
          {
            goto LABEL_127;
          }
          *(_DWORD *)(a1 + 16532) = 0;
          gleUpdateTextureCoordGen((_DWORD *)a1);
          if ((v47 & 0x20) == 0)
          {
LABEL_128:
            if ((v47 & 0x40) == 0)
              goto LABEL_129;
            goto LABEL_140;
          }
LABEL_139:
          glDisable_Exec(a1, 34336);
          if ((v47 & 0x40) == 0)
          {
LABEL_129:
            if ((v47 & 0x80) == 0)
              goto LABEL_130;
            goto LABEL_141;
          }
LABEL_140:
          glDisable_Exec(a1, 34820);
          if ((v47 & 0x80) == 0)
          {
LABEL_130:
            if ((v47 & 0x20000) == 0)
              goto LABEL_132;
            goto LABEL_131;
          }
LABEL_141:
          os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
          gleUseProgramObject(a1, 0);
          os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
          if ((v47 & 0x20000) == 0)
          {
LABEL_132:
            v73 = v169;
            if ((v47 & 0x100) != 0)
            {
              v75 = 0;
              v76 = *(_DWORD *)v42;
              do
              {
                if (((v76 >> v75) & 1) != 0)
                {
                  *(_DWORD *)(a1 + 28652) = 0;
                  *(_DWORD *)(a1 + 1528) |= 0x1000000 << v75;
                }
                ++v75;
              }
              while (v75 != 8);
              *(_DWORD *)v42 = 0;
              gleUpdateClipPlane(a1);
              v73 = v169;
              if ((v47 & 0x400) == 0)
              {
LABEL_134:
                if ((v47 & 0x800) == 0)
                  goto LABEL_135;
                goto LABEL_149;
              }
            }
            else if ((v47 & 0x400) == 0)
            {
              goto LABEL_134;
            }
            *(_BYTE *)(a1 + 15534) = 0;
            *(_WORD *)(a1 + 15528) = 2305;
            *(_DWORD *)(a1 + 15524) = 453122818;
            *(_BYTE *)(a1 + 15538) = 1;
            *(_DWORD *)(a1 + 28652) = 0;
            *(_DWORD *)(a1 + 1548) |= 0x8202u;
            *(_DWORD *)(a1 + 1520) |= 0x800000u;
            if ((v47 & 0x800) == 0)
            {
LABEL_135:
              if ((v47 & 0x200) == 0)
              {
LABEL_136:
                v74 = *(_DWORD *)(a1 + 1520);
                goto LABEL_151;
              }
LABEL_150:
              *(_BYTE *)(a1 + 15532) = 0;
              v74 = *(_DWORD *)(a1 + 1520) | 0x2000000;
LABEL_151:
              *v43 = 0;
              *(_BYTE *)(a1 + 15120) = 0;
              *(_BYTE *)(a1 + 15319) = 0;
              *(_DWORD *)(a1 + 28652) = 0;
              *(_DWORD *)(a1 + 1520) = v74 | 0x20003;
              if ((v47 & 0x4000) != 0)
              {
                *(_DWORD *)(v42 + 1588) &= 0xC000u;
                *(_DWORD *)(v42 + 1580) &= 0xFFFFFE00;
              }
              if ((a12 & 0x4100) == 0)
              {
LABEL_247:
                if (v153)
                {
                  v117 = v173;
                  v116 = v174;
                  v218 = 0;
                  v118 = (float)v73 / (float)(int)v174;
                  v119 = (float)(int)v173;
                  *(_BYTE *)(a1 + 15340) = 0;
                  *(_QWORD *)(a1 + 15324) = -1;
                  *(_QWORD *)(a1 + 15332) = 0xFFFFFFFFLL;
                  *(_DWORD *)(v54 + 1104) |= 0x1C0000u;
                  if (v161 >= v155)
                    v120 = v155;
                  else
                    v120 = v161;
                  if (v155 <= v161)
                    v32 = (float)v156;
                  if ((int)v13 >= v164)
                    v121 = v164;
                  else
                    v121 = v13;
                  if (v164 <= (int)v13)
                    v33 = (float)v165;
                  *(_DWORD *)(a1 + 28652) = 0;
                  *(_DWORD *)(a1 + 1548) |= 0x40000u;
                  v211 = v120;
                  if (v116 < 0)
                    v116 = -v116;
                  v174 = v116;
                  if (v117 >= 0)
                    v122 = v117;
                  else
                    v122 = -v117;
                  v172 = v121;
                  v173 = v122;
                  HIDWORD(v170) = 0;
                  v171 = 0;
                  v123 = (float)v159 / v119;
                  if (gleClipReadableRange(a1, v158, v157, (int *)&v211, (int *)&v172, (int *)&v174, (int *)&v173, &v171, (_DWORD *)&v170 + 1))
                  {
                    v32 = v32 + (float)((float)v171 * v118);
                    v33 = v33 + (float)((float)SHIDWORD(v170) * v123);
                  }
                  if (v174 && v173)
                  {
                    v124 = *(float *)(v54 + 12) + (float)(*(float *)(v54 + 8) * v33);
                    *(float *)&v218 = *(float *)(v54 + 4) + (float)(*(float *)v54 * v32);
                    *((float *)&v218 + 1) = v124;
                    glPixelZoom_Exec(a1, v118, v123);
                    (*(void (**)(_QWORD, uint64_t *, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))(a1 + 29056))(*(_QWORD *)(a1 + 29016), &v218, v211, v172, v174, v173, 6146);
                  }
                }
                v125 = *(_DWORD *)(*(_QWORD *)(a1 + 19296) + 316);
                if (*(_DWORD *)(v54 + 1120) != v125)
                {
                  if (*(_QWORD *)(a1 + 28960))
                  {
                    gleInvalidateCurrentDrawFramebufferTextures(a1);
                    v125 = *(_DWORD *)(*(_QWORD *)(a1 + 19296) + 316);
                  }
                  *(_DWORD *)(v54 + 1120) = v125;
                }
                *(_OWORD *)(a1 + 9312) = *(_OWORD *)((char *)v188 + 8);
                gleUpdateViewScissorDataIndexed(a1, 0);
                glMatrixMode_Exec(a1, 5889);
                glLoadMatrixf_Exec(a1, (uint64_t)&v175);
                glMatrixMode_Exec(a1, 5888);
                glLoadMatrixf_Exec(a1, (uint64_t)&v179);
                if ((v47 & 0x10000) != 0)
                {
                  v126 = *(char **)(a1 + 26384);
                  gleSetCurrentVertexHashObject(a1, v190[3]);
                  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
                  gleFreeVertexArrayHashObject(*(_QWORD *)(a1 + 19296), v126);
                  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
                  *(_QWORD *)(a1 + 19312) = v190[4];
                  if ((v47 & 0x10) == 0)
                  {
LABEL_274:
                    if ((v47 & 0x20) == 0)
                      goto LABEL_275;
                    goto LABEL_282;
                  }
                }
                else if ((v47 & 0x10) == 0)
                {
                  goto LABEL_274;
                }
                *(_BYTE *)(v42 + 125) = v200;
                gleUpdateInverseNeeds(a1);
                *(_DWORD *)(a1 + 28652) = 0;
                *(_DWORD *)(a1 + 1548) |= 0x1801Eu;
                if ((v47 & 0x20) == 0)
                {
LABEL_275:
                  if ((v47 & 0x40) == 0)
                    goto LABEL_276;
LABEL_284:
                  if (v199)
                  {
                    glEnable_Exec(a1, 34820);
                    if ((v47 & 0x80) != 0)
                      goto LABEL_286;
                  }
                  else
                  {
                    glDisable_Exec(a1, 34820);
                    if ((v47 & 0x80) != 0)
                      goto LABEL_286;
                  }
LABEL_277:
                  if ((v47 & 0x20000) == 0)
                    goto LABEL_278;
                  goto LABEL_287;
                }
LABEL_282:
                if (v198)
                {
                  glEnable_Exec(a1, 34336);
                  if ((v47 & 0x40) != 0)
                    goto LABEL_284;
                }
                else
                {
                  glDisable_Exec(a1, 34336);
                  if ((v47 & 0x40) != 0)
                    goto LABEL_284;
                }
LABEL_276:
                if ((v47 & 0x80) == 0)
                  goto LABEL_277;
LABEL_286:
                os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
                gleUseProgramObject(a1, (_DWORD *)v190[1]);
                gleBindProgramPipelineObject(a1, v190[2]);
                os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 19296) + 324));
                if ((v47 & 0x20000) == 0)
                {
LABEL_278:
                  if ((v47 & 0x100) == 0)
                    goto LABEL_294;
                  goto LABEL_290;
                }
LABEL_287:
                v127 = v196;
                *(_WORD *)(v54 + 1014) = v196;
                if (v127 == 35101)
                  LOBYTE(v127) = *(_BYTE *)(v54 + 3792) == 0;
                *(_BYTE *)(a1 + 15178) = v127;
                *(_DWORD *)(a1 + 28652) = 0;
                *(_DWORD *)(a1 + 1524) |= 0x400000u;
                if ((v47 & 0x100) == 0)
                {
LABEL_294:
                  if ((v47 & 0x400) != 0)
                  {
                    *(_BYTE *)(a1 + 15534) = v204;
                    *(_WORD *)(a1 + 15528) = v194;
                    v130 = (unsigned __int16)v193;
                    *(_WORD *)(a1 + 15524) = v193;
                    v131 = HIWORD(v193);
                    *(_WORD *)(a1 + 15526) = HIWORD(v193);
                    v133 = v130 == 6914 && v131 == 6914;
                    *(_BYTE *)(a1 + 15538) = v133;
                    *(_DWORD *)(a1 + 1548) |= 0x8202u;
                    *(_DWORD *)(a1 + 28652) = 0;
                    *(_DWORD *)(a1 + 1520) |= 0x800000u;
                    if ((v47 & 0x800) == 0)
                    {
LABEL_296:
                      if ((v47 & 0x200) == 0)
                        goto LABEL_297;
                      goto LABEL_316;
                    }
                  }
                  else if ((v47 & 0x800) == 0)
                  {
                    goto LABEL_296;
                  }
                  *(_BYTE *)(a1 + 15537) = v202;
                  *(_BYTE *)(a1 + 15533) = v201;
                  *(_DWORD *)(a1 + 28652) = 0;
                  *(_DWORD *)(a1 + 1520) |= 0x800000u;
                  if ((v47 & 0x200) == 0)
                  {
LABEL_297:
                    if ((v47 & 1) == 0)
                      goto LABEL_298;
                    goto LABEL_317;
                  }
LABEL_316:
                  *(_BYTE *)(a1 + 15532) = v203;
                  *(_DWORD *)(a1 + 28652) = 0;
                  *(_DWORD *)(a1 + 1520) |= 0x2000000u;
                  if ((v47 & 1) == 0)
                  {
LABEL_298:
                    if ((v47 & 2) == 0)
                      goto LABEL_299;
                    goto LABEL_321;
                  }
LABEL_317:
                  *(_QWORD *)(a1 + 20792) = *((_QWORD *)&v189 + 1);
                  v134 = *(unsigned __int8 *)(v54 + 3800);
                  if (*(_BYTE *)(v54 + 3800))
                  {
                    v135 = (uint64_t *)&v188[1] + 1;
                    v136 = (_QWORD *)(a1 + 33176);
                    do
                    {
                      v137 = *v135++;
                      *v136 = v137;
                      v136 += 209;
                      --v134;
                    }
                    while (v134);
                  }
                  *(_DWORD *)(a1 + 1524) |= 1u;
                  *(_DWORD *)(a1 + 1536) |= 1u;
                  *(_DWORD *)(a1 + 28652) = 0;
                  *(_DWORD *)(a1 + 1548) |= 0x8022000u;
                  if ((v47 & 2) == 0)
                  {
LABEL_299:
                    if ((v47 & 4) == 0)
                      goto LABEL_300;
                    goto LABEL_325;
                  }
LABEL_321:
                  *(_QWORD *)(a1 + 20880) = v190[0];
                  *(_DWORD *)(a1 + 15760) = v191;
                  v138 = *(unsigned __int8 *)(v54 + 3800);
                  if (*(_BYTE *)(v54 + 3800))
                  {
                    v139 = (_QWORD *)(a1 + 33184);
                    v140 = (uint64_t *)&v188[7] + 1;
                    do
                    {
                      v141 = *v140++;
                      *v139 = v141;
                      v139 += 209;
                      --v138;
                    }
                    while (v138);
                  }
                  *(_DWORD *)(a1 + 1524) |= 2u;
                  *(_DWORD *)(a1 + 1536) |= 1u;
                  *(_DWORD *)(a1 + 28652) = 0;
                  *(_DWORD *)(a1 + 1548) |= 0x8022000u;
                  if ((v47 & 4) == 0)
                  {
LABEL_300:
                    if ((v47 & 8) == 0)
                      goto LABEL_301;
                    goto LABEL_326;
                  }
LABEL_325:
                  glMatrixMode_Exec(a1, 5890);
                  glLoadMatrixf_Exec(a1, (uint64_t)&v183);
                  *(_DWORD *)(a1 + 15684) = HIDWORD(v190[7]);
                  gleUpdateTextureParams((_DWORD *)a1, 0);
                  *(_WORD *)(v42 + 6196) = v195;
                  if ((v47 & 8) == 0)
                  {
LABEL_301:
                    if ((v47 & 0x2000) == 0)
                      goto LABEL_302;
                    goto LABEL_327;
                  }
LABEL_326:
                  *(_DWORD *)(a1 + 16532) = v197;
                  gleUpdateTextureCoordGen((_DWORD *)a1);
                  if ((v47 & 0x2000) == 0)
                  {
LABEL_302:
                    if ((v47 & 0x4000) == 0)
                    {
LABEL_304:
                      if (v154)
                        glPixelZoom_Exec(a1, *(float *)&v192, *((float *)&v192 + 1));
                      *(_DWORD *)(v42 + 2912) = v190[5];
                      return gleUpdateMatrixMode(a1);
                    }
LABEL_303:
                    *(_DWORD *)(v42 + 1588) = DWORD2(v191);
                    *(_DWORD *)(v42 + 1580) = HIDWORD(v191);
                    goto LABEL_304;
                  }
LABEL_327:
                  *v43 = v205;
                  *(_OWORD *)(a1 + 15200) = v187;
                  *(_QWORD *)(a1 + 15216) = *(_QWORD *)&v188[0];
                  *(_DWORD *)(a1 + 15644) = DWORD1(v191);
                  *(_BYTE *)(a1 + 15120) = v206;
                  *(_BYTE *)(a1 + 15196) = v207;
                  *(_BYTE *)(a1 + 15319) = v208;
                  *(_DWORD *)(a1 + 15336) = v209;
                  *(_BYTE *)(a1 + 15340) = v210;
                  *(_QWORD *)(a1 + 15324) = *(_QWORD *)((char *)&v190[5] + 4);
                  *(_DWORD *)(a1 + 15332) = HIDWORD(v190[6]);
                  *(_DWORD *)(a1 + 1520) |= 0x10020203u;
                  *(_DWORD *)(v54 + 1104) |= 0x3C0000u;
                  *(_DWORD *)(a1 + 28652) = 0;
                  *(_DWORD *)(a1 + 1548) |= 0x40000u;
                  if ((v47 & 0x4000) == 0)
                    goto LABEL_304;
                  goto LABEL_303;
                }
LABEL_290:
                *(_DWORD *)v42 = v190[7];
                gleUpdateClipPlane(a1);
                v128 = 0;
                v129 = *(_DWORD *)v42;
                do
                {
                  if (((v129 >> v128) & 1) != 0)
                  {
                    *(_DWORD *)(a1 + 28652) = 0;
                    *(_DWORD *)(a1 + 1528) |= 0x1000000 << v128;
                  }
                  ++v128;
                }
                while (v128 != 8);
                goto LABEL_294;
              }
              *(_WORD *)(v42 + 6196) = 0;
              glMatrixMode_Exec(a1, 5890);
              glLoadIdentity_Exec(a1);
              *(_DWORD *)(a1 + 15684) = 4;
              gleUpdateTextureParams((_DWORD *)a1, 0);
              v77 = 0;
              v78 = a12;
              if (((a12 >> 14) & 1) != 0)
                v79 = -1;
              else
                v79 = 0;
              *(_DWORD *)(a1 + 15336) = v79;
              if ((a12 & 0x100) != 0)
              {
                *(_WORD *)(a1 + 15200) = 519;
                v77 = 1;
                *(_BYTE *)(a1 + 15340) = 1;
              }
              *(_BYTE *)(a1 + 15204) = v77;
              *(_WORD *)(a1 + 15205) = 0;
              *(_QWORD *)(a1 + 15324) = 0;
              *(_DWORD *)(a1 + 15332) = 0;
              *(_DWORD *)(a1 + 15644) = 0;
              *(_DWORD *)(v168 + 1104) |= 0x1C0000u;
              *(_DWORD *)(a1 + 1520) |= 0x10000200u;
              *(_DWORD *)(a1 + 28652) = 0;
              *(_DWORD *)(a1 + 1548) |= 0x40000u;
              v80 = v166;
              if (!v16)
              {
                if ((a12 & 0x4000) == 0)
                {
                  v146 = 0;
                  v147 = 0;
                  v148 = 0;
                  v149 = 0;
                  v150 = 0;
                  LOWORD(v151) = 0;
                  v82 = 0;
                  v86 = 0;
                  v145 = 0;
                  v81 = 0;
                  v88 = 1;
                  v84 = 0;
                  v89 = 1;
                  if ((a12 & 0x100) == 0)
                  {
LABEL_239:
                    v167 = v89;
                    *(_BYTE *)(v168 + 3806) = (v82 != 0) | (2 * (v86 != 0));
                    *(_QWORD *)(a1 + 19224) = 0;
                    LOWORD(v218) = v80;
                    WORD1(v218) = v160;
                    WORD2(v218) = v156;
                    HIWORD(v218) = v160;
                    v219 = v80;
                    v220 = v165;
                    v221 = v156;
                    v222 = v165;
                    LOWORD(v211) = v161;
                    HIWORD(v211) = v13;
                    v212 = v155;
                    v213 = v13;
                    v214 = v161;
                    v215 = v164;
                    v216 = v155;
                    v217 = v164;
                    glEnableClientState_Exec(a1, 32884);
                    glEnableClientState_Exec(a1, 32888);
                    glVertexPointer_Exec(a1, 2, 5122, 0, (uint64_t)&v218);
                    glTexCoordPointer_Exec(a1, 2, 5122, 0, (uint64_t)&v211);
                    glDrawArrays_ForBlit(a1, 5, 0, 4);
                    *(_BYTE *)(v168 + 3806) = 0;
                    v42 = a1 + 17572;
                    v73 = v169;
                    if (v82)
                    {
                      if ((v88 & 1) != 0)
                      {
                        *(_WORD *)(v82 + 960) = WORD2(v150);
                        *(_WORD *)(v82 + 962) = WORD2(v149);
                        *(_WORD *)(v82 + 964) = v149;
                        *(_WORD *)(v82 + 952) = v151;
                        *(_WORD *)(v82 + 954) = v150;
                        *(_DWORD *)(v82 + 968) = v84;
                        *(_BYTE *)(v82 + 597) = BYTE4(v148);
                      }
                      else
                      {
                        gleUnbindAndFreeTextureObject(a1, v82);
                        v73 = v169;
                      }
                    }
                    v54 = v168;
                    if (v86)
                    {
                      if ((v167 & 1) != 0)
                      {
                        *((_WORD *)v86 + 476) = v148;
                        *((_WORD *)v86 + 477) = WORD2(v147);
                        v86[242] = v81;
                        *(_QWORD *)((char *)v86 + 958) = v145;
                        *((_WORD *)v86 + 461) = v147;
                        *((_BYTE *)v86 + 597) = v146;
                      }
                      else
                      {
                        gleUnbindAndFreeTextureObject(a1, (uint64_t)v86);
                        v73 = v169;
                      }
                    }
                    goto LABEL_247;
                  }
                  goto LABEL_215;
                }
                v86 = 0;
                v147 = 0;
                v148 = 0;
                v150 = 0;
                v151 = 0;
                v149 = 0;
                v146 = 0;
                v145 = 0;
                v84 = 0;
                v81 = 0;
LABEL_181:
                v90 = *(unsigned __int8 **)(a1 + 29480);
                v91 = v90[43];
                v92 = v90[48];
                v93 = v90[51];
                if (v91)
                {
                  v94 = v93 == 0;
                  if (v92 < 0x11)
                    v95 = 34842;
                  else
                    v95 = 34836;
                  if (v94)
                    v83 = v95 + 1;
                  else
                    v83 = v95;
                }
                else
                {
                  if (v92 < 9)
                  {
                    if (v92 < 6)
                    {
                      if (v93)
                        v99 = 32855;
                      else
                        v99 = 32848;
                      if (v93 <= 1)
                        v83 = v99;
                      else
                        v83 = 32854;
                      goto LABEL_201;
                    }
                    v96 = v93 == 0;
                    v97 = 32856;
                    v98 = 32849;
                  }
                  else
                  {
                    v96 = v93 == 0;
                    v97 = 32859;
                    v98 = 32852;
                  }
                  if (v96)
                    v83 = v98;
                  else
                    v83 = v97;
                }
LABEL_201:
                TextureObject = gleCreateTextureObject(*(_QWORD *)(a1 + 19296), 2, -1);
                v82 = (uint64_t)TextureObject;
                TextureObject[240] = -2127593169;
                *((_WORD *)TextureObject + 482) = -32465;
                *((_WORD *)TextureObject + 476) = v152;
                *((_WORD *)TextureObject + 477) = v152;
                if (v162)
                  v101 = 1;
                else
                  v101 = 13;
                *((_BYTE *)TextureObject + 597) = v101;
                v102 = (unsigned __int16 *)(TextureObject + 268);
                LOWORD(v144) = 256;
                v163 = v83;
                v103 = v83;
                v104 = (uint64_t)(TextureObject + 10);
                gleEvaluateTextureImageChangeNoSync(a1, (uint64_t)(TextureObject + 10), (uint64_t)(TextureObject + 268), v158, v157, 1, 0, v103, 0x1908u, 0x1401u, v144, 1);
                *(_DWORD *)(v82 + 1008) = 65540;
                LODWORD(v142) = 0;
                HIDWORD(v142) = v158;
                if ((*(unsigned int (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(a1 + 29448) + 360))(*(_QWORD *)(a1 + 29016), *(_QWORD *)(v104 + 8 * *(unsigned __int8 *)(v168 + 3803)), 0, 0, 0, 0, 0, 0, v142, v157))
                {
                  v88 = 0;
                  *(_QWORD *)(v82 + 576) = *(_QWORD *)(a1 + 29024);
                  *(_BYTE *)(v82 + 1083) |= 0x40u;
                  v80 = v166;
                  v78 = a12;
                }
                else
                {
                  if (gfxAllocateTextureLevel())
                  {
                    gleTextureImageCopy(a1, v104, v102, v163, 0, 0, v158, v157);
                    *(_BYTE *)(v82 + 1083) |= 0x10u;
                  }
                  else if (!*(_WORD *)(v168 + 1136))
                  {
                    *(_WORD *)(v168 + 1136) = 1285;
                  }
                  gfxModifyPluginTextureLevel();
                  v88 = 0;
                  v80 = v166;
                  v78 = a12;
                }
                v87 = HIDWORD(v151);
LABEL_212:
                v89 = 1;
                if ((v78 & 0x100) == 0 || v86)
                {
LABEL_229:
                  if ((v78 & 0x4000) != 0)
                  {
                    *(_QWORD *)(a1 + 20792) = v82;
                    v108 = *(unsigned __int8 *)(v168 + 3800);
                    if (*(_BYTE *)(v168 + 3800))
                    {
                      v109 = (uint64_t *)(v82 + 40);
                      v110 = (_QWORD *)(a1 + 33176);
                      do
                      {
                        v111 = *v109++;
                        *v110 = v111;
                        v110 += 209;
                        --v108;
                      }
                      while (v108);
                    }
                    *(_DWORD *)(a1 + 1524) |= 1u;
                    *(_DWORD *)(a1 + 1536) |= 1u;
                    *(_DWORD *)(a1 + 28652) = 0;
                    *(_DWORD *)(a1 + 1548) |= 0x8022000u;
                  }
                  if ((v78 & 0x100) != 0)
                  {
                    *(_QWORD *)(a1 + 20880) = v86;
                    *(_DWORD *)(a1 + 15760) = 4;
                    v112 = *(unsigned __int8 *)(v168 + 3800);
                    if (*(_BYTE *)(v168 + 3800))
                    {
                      v113 = (uint64_t *)(v86 + 10);
                      v114 = (_QWORD *)(a1 + 33184);
                      do
                      {
                        v115 = *v113++;
                        *v114 = v115;
                        v114 += 209;
                        --v112;
                      }
                      while (v112);
                    }
                    *(_DWORD *)(a1 + 1524) |= 2u;
                    *(_DWORD *)(a1 + 1536) |= 1u;
                    *(_DWORD *)(a1 + 28652) = 0;
                    *(_DWORD *)(a1 + 1548) |= 0x8022000u;
                  }
                  goto LABEL_239;
                }
                if ((_DWORD)v87)
                {
LABEL_221:
                  v107 = v87;
                  v86 = gleCreateTextureObject(*(_QWORD *)(a1 + 19296), 2, -1);
                  v86[240] = -2127593169;
                  *((_WORD *)v86 + 482) = -32465;
                  v86[238] = 637543936;
                  *((_BYTE *)v86 + 597) = 1;
                  LOWORD(v144) = 256;
                  gleEvaluateTextureImageChangeNoSync(a1, (uint64_t)(v86 + 10), (uint64_t)(v86 + 268), v158, v157, 1, 0, v107, 0x1902u, 0x1401u, v144, 1);
                  v86[252] = 65540;
                  LODWORD(v143) = 0;
                  HIDWORD(v143) = v158;
                  if ((*(unsigned int (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(a1 + 29448) + 360))(*(_QWORD *)(a1 + 29016), *(_QWORD *)&v86[2 * *(unsigned __int8 *)(v168 + 3803) + 10], 0, 0, 0, 0, 0, 0, v143, v157))
                  {
                    v89 = 0;
                    *((_QWORD *)v86 + 72) = *(_QWORD *)(a1 + 29024);
                    *((_BYTE *)v86 + 1083) |= 0x40u;
                  }
                  else
                  {
                    if (gfxAllocateTextureLevel())
                    {
                      gleTextureImageCopy(a1, (uint64_t)(v86 + 10), (unsigned __int16 *)v86 + 536, v107, 0, 0, v158, v157);
                      *((_BYTE *)v86 + 1083) |= 0x10u;
                    }
                    else if (!*(_WORD *)(v168 + 1136))
                    {
                      *(_WORD *)(v168 + 1136) = 1285;
                    }
                    gfxModifyPluginTextureLevel();
                    v89 = 0;
                  }
                  v80 = v166;
                  v78 = a12;
                  goto LABEL_229;
                }
LABEL_215:
                v105 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 29480) + 56);
                if (v105 < 0x19)
                  v106 = 33190;
                else
                  v106 = 33191;
                if (v105 >= 0x11)
                  v87 = v106;
                else
                  v87 = 33189;
                goto LABEL_221;
              }
              v81 = 0;
              if ((a12 & 0x4000) != 0)
              {
                v82 = *(_QWORD *)(v16 + 16 * (*(unsigned __int16 *)(v16 + 472) - 36064) + 40);
                v83 = *(unsigned __int16 *)(v82 + 1000);
                if ((*(_WORD *)(v82 + 808) & 0x200F) == 2)
                {
                  LOWORD(v149) = *(_WORD *)(v82 + 964);
                  WORD2(v149) = *(_WORD *)(v82 + 962);
                  WORD2(v150) = *(_WORD *)(v82 + 960);
                  LOWORD(v151) = *(_WORD *)(v82 + 952);
                  LOWORD(v150) = *(_WORD *)(v82 + 954);
                  v84 = *(_DWORD *)(v82 + 968);
                  BYTE4(v148) = *(_BYTE *)(v82 + 597);
                  *(_DWORD *)(v82 + 960) = -2127593169;
                  *(_WORD *)(v82 + 964) = -32465;
                  *(_WORD *)(v82 + 952) = v152;
                  *(_WORD *)(v82 + 954) = v152;
                  *(_DWORD *)(v82 + 968) = 1065353216;
                  if (v162)
                    v85 = 1;
                  else
                    v85 = 13;
                  *(_BYTE *)(v82 + 597) = v85;
                  if ((a12 & 0x100) != 0)
                    goto LABEL_166;
                  goto LABEL_175;
                }
                v82 = 0;
                LOWORD(v151) = 0;
                v149 = 0;
                v150 = 0;
              }
              else
              {
                v82 = 0;
                LOWORD(v151) = 0;
                v149 = 0;
                v150 = 0;
                v83 = 0;
              }
              BYTE4(v148) = 0;
              v84 = 0;
              if ((a12 & 0x100) != 0)
              {
LABEL_166:
                v86 = *(_DWORD **)(v16 + 168);
                v87 = *((unsigned __int16 *)v86 + 500);
                if ((v86[202] & 0x200F) == 2)
                {
                  WORD2(v147) = *((_WORD *)v86 + 477);
                  LOWORD(v148) = *((_WORD *)v86 + 476);
                  v81 = v86[242];
                  v145 = *(_QWORD *)((char *)v86 + 958);
                  v146 = *((_BYTE *)v86 + 597);
                  LOWORD(v147) = *((_WORD *)v86 + 461);
                  v86[238] = 637543936;
                  v86[242] = 1065353216;
                  *(_QWORD *)((char *)v86 + 958) = 0x812F812F812F0000;
                  *((_WORD *)v86 + 461) = 6409;
                  *((_BYTE *)v86 + 597) = 1;
LABEL_178:
                  v88 = 1;
                  if ((a12 & 0x4000) == 0 || v82)
                    goto LABEL_212;
                  HIDWORD(v151) = v87;
                  if ((_DWORD)v83)
                    goto LABEL_201;
                  goto LABEL_181;
                }
                v86 = 0;
                v147 = 0;
                LOWORD(v148) = 0;
LABEL_177:
                v146 = 0;
                v145 = 0;
                goto LABEL_178;
              }
LABEL_175:
              v86 = 0;
              v147 = 0;
              LOWORD(v148) = 0;
              v87 = 0;
              goto LABEL_177;
            }
LABEL_149:
            *(_BYTE *)(a1 + 15537) = 0;
            *(_BYTE *)(a1 + 15533) = 0;
            *(_DWORD *)(a1 + 1520) |= 0x800000u;
            if ((v47 & 0x200) == 0)
              goto LABEL_136;
            goto LABEL_150;
          }
LABEL_131:
          *(_WORD *)(v168 + 1014) = -30435;
          *(_BYTE *)(a1 + 15178) = *(_BYTE *)(v168 + 3792) == 0;
          *(_DWORD *)(a1 + 28652) = 0;
          *(_DWORD *)(a1 + 1524) |= 0x400000u;
          goto LABEL_132;
        }
LABEL_87:
        LODWORD(v190[7]) = *(_DWORD *)v42;
        goto LABEL_88;
      }
LABEL_83:
      v199 = *v41;
      goto LABEL_84;
    }
  }
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 29480) + 111))
  {
    v162 = 1;
    goto LABEL_31;
  }
  v170 = 0;
  result = gleClipReadableRange(a1, v19, v20, (int *)&v218, (int *)&v211, (int *)&v172, &v171, (_DWORD *)&v170 + 1, &v170);
  v17.n128_f32[0] = v32;
  a10.n128_f32[0] = v33;
  if ((_DWORD)result)
  {
    v17.n128_f32[0] = v32 + (float)((float)SHIDWORD(v170) * v31);
    a10.n128_f32[0] = v33 + (float)((float)(int)v170 * v30);
  }
  if ((int)v172 >= 1 && v171 >= 1)
  {
    v161 = v14;
    v35 = v218;
    v162 = 1;
    v36 = v211;
    goto LABEL_32;
  }
  return result;
}

