uint64_t yyglrReduce(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  int v5;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t i;
  uint64_t v32;
  BOOL v33;
  uint64_t v35;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v5 = a3;
  v8 = (_QWORD *)a1[63];
  v9 = v8[a2];
  v10 = *(_QWORD *)(v9 + 16);
  v11 = a1[61];
  if (!a4 && v11)
  {
    v13 = v8[a2];
    if (yyr2[(int)a3])
    {
      v14 = yyr2[(int)a3] + 1;
      v13 = v8[a2];
      do
      {
        v13 = *(_QWORD *)(v13 + 8);
        if (!v13)
          goto LABEL_61;
      }
      while (--v14 >= 2);
    }
    if (v11 > v13)
    {
      a1[61] = v13;
      v11 = v13;
    }
    v15 = *(_DWORD *)(v13 + 4);
    v16 = yyr1[(int)a3] - 177;
    v17 = (v15 + yypgoto[v16]);
    if (v17 >> 1 <= 0x81A && v15 == yycheck[v17])
      v18 = (char *)&yytable + 2 * v17;
    else
      v18 = (char *)&yydefgoto + 2 * v16;
    v29 = *(__int16 *)v18;
    v30 = a1[65];
    if (v30)
    {
      for (i = 0; i != v30; ++i)
      {
        if (i != a2)
        {
          v32 = v8[i];
          v33 = !v32 || v32 == v13;
          if (!v33 && v32 != v11)
          {
            while (*(_QWORD *)(v32 + 16) >= v10)
            {
              v35 = *(_QWORD *)(v32 + 8);
              if (*(_DWORD *)(v32 + 4) == v29 && v35 == v13)
              {
                yyaddDeferredAction((uint64_t)a1, a2, v32, v9, v5);
                v40 = a1[63];
                v41 = *(_QWORD *)(v40 + 8 * a2);
                if (v41)
                  a1[62] = v41;
                result = 0;
                *(_QWORD *)(v40 + 8 * a2) = 0;
                return result;
              }
              v37 = v35 == v13 || v35 == v11;
              v32 = *(_QWORD *)(v32 + 8);
              if (v37)
                break;
            }
          }
        }
      }
    }
    v8[a2] = v13;
    v38 = a1[59];
    v39 = a1[60] - 1;
    a1[59] = v38 + 72;
    a1[60] = v39;
    *(_BYTE *)v38 = 1;
    *(_DWORD *)(v38 + 4) = v29;
    *(_QWORD *)(v38 + 16) = v10;
    *(_BYTE *)(v38 + 1) = 0;
    *(_QWORD *)(v38 + 8) = *(_QWORD *)(a1[63] + 8 * a2);
    *(_QWORD *)(v38 + 24) = 0;
    *(_QWORD *)(a1[63] + 8 * a2) = v38;
    yyaddDeferredAction((uint64_t)a1, a2, v38, v9, v5);
    return 0;
  }
  if (v11)
  {
    if (yyr2[(int)a3])
    {
      v12 = yyr2[(int)a3];
      while (1)
      {
        v9 = *(_QWORD *)(v9 + 8);
        if (!v9)
          break;
        if (!--v12)
          goto LABEL_20;
      }
LABEL_61:
      abort();
    }
LABEL_20:
    if (v11 > v9)
      a1[61] = v9;
    v8[a2] = v9;
  }
  else
  {
    if (a2)
      goto LABEL_61;
    v19 = a1[59] + 72 * -yyr2[(int)a3];
    v20 = a1[60] + yyr2[(int)a3];
    a1[59] = v19;
    a1[60] = v20;
    *v8 = v19 - 72;
  }
  result = yyuserAction(a3);
  if (!(_DWORD)result)
  {
    v22 = *(_DWORD *)(*(_QWORD *)(a1[63] + 8 * a2) + 4);
    v23 = yyr1[v5] - 177;
    v24 = (v22 + yypgoto[v23]);
    if (v24 >> 1 <= 0x81A && v22 == yycheck[v24])
      v25 = (char *)&yytable + 2 * v24;
    else
      v25 = (char *)&yydefgoto + 2 * v23;
    v26 = *(__int16 *)v25;
    v27 = a1[59];
    v28 = a1[60] - 1;
    a1[59] = v27 + 72;
    a1[60] = v28;
    *(_BYTE *)v27 = 1;
    *(_DWORD *)(v27 + 4) = v26;
    *(_QWORD *)(v27 + 16) = v10;
    *(_BYTE *)(v27 + 1) = 1;
    *(_QWORD *)(v27 + 8) = *(_QWORD *)(a1[63] + 8 * a2);
    *(_OWORD *)(v27 + 24) = 0uLL;
    *(_QWORD *)(v27 + 40) = 0;
    *(_OWORD *)(v27 + 48) = 0uLL;
    *(_QWORD *)(a1[63] + 8 * a2) = v27;
    if (a1[60] <= 1uLL)
      yyexpandGLRStack((uint64_t)a1);
    return 0;
  }
  return result;
}

uint64_t yyprocessOneStack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  __int16 *v8;
  uint64_t v9;
  int v10;
  uint64_t result;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  __int16 *v16;
  __int16 *v17;
  __int16 v18;
  unsigned __int16 *v19;
  unint64_t v20;
  unint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  int v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;

  v3 = *(_QWORD *)(a1 + 504);
  v4 = *(_QWORD *)(v3 + 8 * a2);
  if (!v4)
    return 0;
  v27 = a1 + 256;
  v28 = a1 + 232;
  v8 = &yyconfl;
  while (1)
  {
    v9 = *(int *)(v4 + 4);
    if ((_DWORD)v9 == 161)
LABEL_43:
      abort();
    v10 = yypact[v9];
    if (v10 != -400)
      break;
    if (!yydefact[v9])
    {
      v26 = (uint64_t *)(v3 + 8 * a2);
      goto LABEL_41;
    }
    result = yyglrReduce((_QWORD *)a1, a2, yydefact[v9], 0);
    if ((_DWORD)result)
      return result;
LABEL_36:
    v3 = *(_QWORD *)(a1 + 504);
    v4 = *(_QWORD *)(v3 + 8 * a2);
    if (!v4)
      return 0;
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 512) + a2) = 1;
  v12 = *(_DWORD *)(a1 + 228);
  if (v12 != -2)
  {
    if (v12 >= 1)
    {
      if (v12 > 0x1AF)
        goto LABEL_11;
LABEL_14:
      v13 = yytranslate[v12];
      goto LABEL_16;
    }
LABEL_15:
    v13 = 0;
    goto LABEL_16;
  }
  v12 = yylex(v28, v27, *(_QWORD *)(a3 + 24));
  *(_DWORD *)(a1 + 228) = v12;
  if (v12 < 1)
    goto LABEL_15;
  if (v12 < 0x1B0)
    goto LABEL_14;
LABEL_11:
  v13 = 2;
LABEL_16:
  v14 = (v13 + v10);
  if (v14 >> 1 <= 0x81A && yycheck[v14] == v13)
  {
    v15 = yytable[v14];
    v16 = v8;
    v17 = &v8[yyconflp[v14]];
  }
  else
  {
    v15 = -yydefact[v9];
    v16 = v8;
    v17 = v8;
  }
  v18 = *v17;
  if (*v17)
  {
    v19 = (unsigned __int16 *)(v17 + 1);
    do
    {
      if (!*(_QWORD *)(a1 + 488))
      {
        if (a2)
          goto LABEL_43;
        *(_QWORD *)(a1 + 488) = **(_QWORD **)(a1 + 504);
      }
      v20 = *(_QWORD *)(a1 + 520);
      v21 = *(_QWORD *)(a1 + 528);
      if (v20 >= v21)
      {
        if (v21 >> 60)
          yyMemoryExhausted(a1);
        *(_QWORD *)(a1 + 528) = 2 * v21;
        v22 = malloc_type_realloc(*(void **)(a1 + 504), 16 * v21, 0x2BDC8648uLL);
        if (!v22)
          goto LABEL_43;
        *(_QWORD *)(a1 + 504) = v22;
        v23 = malloc_type_realloc(*(void **)(a1 + 512), *(_QWORD *)(a1 + 528), 0x2BDC8648uLL);
        if (!v23)
          goto LABEL_43;
        *(_QWORD *)(a1 + 512) = v23;
        v20 = *(_QWORD *)(a1 + 520);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 504) + 8 * v20) = *(_QWORD *)(*(_QWORD *)(a1 + 504) + 8 * a2);
      *(_BYTE *)(*(_QWORD *)(a1 + 512) + v20) = *(_BYTE *)(*(_QWORD *)(a1 + 512) + a2);
      v24 = *(_QWORD *)(a1 + 520);
      *(_QWORD *)(a1 + 520) = v24 + 1;
      result = yyglrReduce((_QWORD *)a1, v24, v18, 0);
      if ((_DWORD)result)
        return result;
      result = yyprocessOneStack(a1, v24, a3);
      if ((_DWORD)result)
        return result;
      v25 = *v19++;
      v18 = v25;
    }
    while (v25);
  }
  if (v15 > 0)
    return 0;
  if (v15)
  {
    result = yyglrReduce((_QWORD *)a1, a2, -v15, 0);
    v8 = v16;
    if ((_DWORD)result)
      return result;
    goto LABEL_36;
  }
  v26 = (uint64_t *)(*(_QWORD *)(a1 + 504) + 8 * a2);
  v4 = *v26;
  if (!*v26)
    goto LABEL_42;
LABEL_41:
  *(_QWORD *)(a1 + 496) = v4;
LABEL_42:
  result = 0;
  *v26 = 0;
  return result;
}

void yyFail(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
    yyerror(a2, a3, a4);
  longjmp((int *)(a1 + 272), 1);
}

uint64_t yyresolveStack(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 488);
  if (!v2)
    return 0;
  v5 = **(_QWORD **)(a1 + 504);
  if (v5 == v2)
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    v7 = v5;
    do
    {
      ++v6;
      v7 = *(_QWORD *)(v7 + 8);
    }
    while (v7 != v2);
  }
  result = yyresolveStates(v5, v6, a1, a2);
  if (!(_DWORD)result)
    return 0;
  return result;
}

__n128 yycompressStack(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 result;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  if (*(_QWORD *)(a1 + 520) == 1)
  {
    v1 = *(_QWORD *)(a1 + 488);
    if (v1)
    {
      v2 = **(_QWORD **)(a1 + 504);
      if (v2 == v1)
      {
        v4 = 0;
      }
      else
      {
        v3 = 0;
        do
        {
          v4 = v2;
          v2 = *(_QWORD *)(v2 + 8);
          *(_QWORD *)(v4 + 8) = v3;
          v3 = v4;
        }
        while (v2 != v1);
      }
      v5 = v1 + 72;
      v6 = *(_QWORD *)(a1 + 480)
         - 0x71C71C71C71C71C7 * ((uint64_t)(*(_QWORD *)(a1 + 472) - *(_QWORD *)(a1 + 464)) >> 3)
         + 0x71C71C71C71C71C7 * ((v5 - *(_QWORD *)(a1 + 464)) >> 3);
      *(_QWORD *)(a1 + 472) = v5;
      *(_QWORD *)(a1 + 480) = v6;
      *(_QWORD *)(a1 + 488) = 0;
      for (*(_QWORD *)(a1 + 496) = 0; v4; *(_QWORD *)(a1 + 480) = v10 - 1)
      {
        result = *(__n128 *)v4;
        v8 = *(_OWORD *)(v4 + 16);
        v9 = *(_OWORD *)(v4 + 48);
        *(_OWORD *)(v5 + 32) = *(_OWORD *)(v4 + 32);
        *(_OWORD *)(v5 + 48) = v9;
        *(__n128 *)v5 = result;
        *(_OWORD *)(v5 + 16) = v8;
        v4 = *(_QWORD *)(v4 + 8);
        *(_QWORD *)(*(_QWORD *)(a1 + 472) + 8) = *(_QWORD *)(a1 + 472) - 72;
        v10 = *(_QWORD *)(a1 + 480);
        **(_QWORD **)(a1 + 504) = *(_QWORD *)(a1 + 472);
        v5 = *(_QWORD *)(a1 + 472) + 72;
        *(_QWORD *)(a1 + 472) = v5;
      }
    }
  }
  return result;
}

uint64_t yydestroyGLRState(uint64_t result)
{
  uint64_t v1;
  int v2;
  _QWORD *v3;
  unsigned int v4;
  uint64_t v5;

  if (!*(_BYTE *)(result + 1))
  {
    v1 = *(_QWORD *)(result + 24);
    if (v1)
    {
      v2 = yyr2[*(int *)(v1 + 4)];
      if (yyr2[*(int *)(v1 + 4)])
      {
        v3 = (_QWORD *)(v1 + 8);
        v4 = v2 + 1;
        do
        {
          v5 = *v3;
          result = yydestroyGLRState(*v3);
          v3 = (_QWORD *)(v5 + 8);
          --v4;
        }
        while (v4 > 1);
      }
    }
  }
  return result;
}

void yyexpandGLRStack(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  uint64_t v26;
  uint64_t v27;

  v3 = *(_QWORD *)(a1 + 464);
  v2 = *(_QWORD *)(a1 + 472);
  v4 = 0x8E38E38E38E38E39 * ((v2 - v3) >> 3);
  if (v4 >= 0x270F)
    yyMemoryExhausted(a1);
  if ((unint64_t)(0x1C71C71C71C71C72 * ((v2 - v3) >> 3)) >= 0x2710)
    v5 = 10000;
  else
    v5 = 0x1C71C71C71C71C72 * ((v2 - v3) >> 3);
  v6 = (char *)malloc_type_malloc(72 * v5, 0x7081ABB9uLL);
  if (!v6)
    abort();
  v7 = v6;
  if (v2 != v3)
  {
    v8 = 0;
    v9 = *(_QWORD *)(a1 + 464);
    v10 = 0x8E38E38E38E38E39 * ((v2 - v3) >> 3);
    do
    {
      v11 = &v6[v8];
      v12 = v9 + v8;
      *(_OWORD *)v11 = *(_OWORD *)(v9 + v8);
      v13 = *(_OWORD *)(v9 + v8 + 16);
      v14 = *(_OWORD *)(v9 + v8 + 32);
      v15 = *(_OWORD *)(v9 + v8 + 48);
      *((_QWORD *)v11 + 8) = *(_QWORD *)(v9 + v8 + 64);
      *((_OWORD *)v11 + 2) = v14;
      *((_OWORD *)v11 + 3) = v15;
      *((_OWORD *)v11 + 1) = v13;
      if (*(_BYTE *)(v9 + v8))
      {
        v16 = *(_QWORD *)(v12 + 8);
        if (v16)
        {
          v17 = (unsigned __int128)((v9 + v8 - v16) * (__int128)(uint64_t)0xF1C71C71C71C71C7) >> 64;
          *(_QWORD *)&v6[v8 + 8] = &v6[72 * (v17 >> 2) + 72 * ((unint64_t)v17 >> 63) + v8];
        }
        if (!*(_BYTE *)(v9 + v8 + 1))
        {
          v18 = *(_QWORD *)(v9 + v8 + 24);
          if (v18)
          {
            v19 = (unsigned __int128)((v9 + v8 - v18) * (__int128)(uint64_t)0xF1C71C71C71C71C7) >> 64;
            *(_QWORD *)&v6[v8 + 24] = &v6[72 * (v19 >> 2) + 72 * ((unint64_t)v19 >> 63) + v8];
          }
        }
      }
      else
      {
        v20 = *(_QWORD *)(v12 + 8);
        if (v20)
        {
          v21 = (unsigned __int128)((v9 + v8 - v20) * (__int128)(uint64_t)0xF1C71C71C71C71C7) >> 64;
          *(_QWORD *)&v6[v8 + 8] = &v6[72 * (v21 >> 2) + 72 * ((unint64_t)v21 >> 63) + v8];
        }
        v22 = *(_QWORD *)(v9 + v8 + 64);
        if (v22)
          *(_QWORD *)&v6[v8 + 64] = &v6[72 * ((v9 + v8 - v22) / -72) + v8];
      }
      v8 += 72;
      --v10;
    }
    while (v10);
  }
  v23 = *(_QWORD *)(a1 + 488);
  if (v23)
    *(_QWORD *)(a1 + 488) = &v6[v23 - *(_QWORD *)(a1 + 464)];
  v24 = *(_QWORD *)(a1 + 520);
  if (v24)
  {
    for (i = 0; i != v24; ++i)
    {
      v26 = *(_QWORD *)(a1 + 504);
      v27 = *(_QWORD *)(v26 + 8 * i);
      if (v27)
        *(_QWORD *)(v26 + 8 * i) = &v6[v27 - *(_QWORD *)(a1 + 464)];
    }
  }
  free(*(void **)(a1 + 464));
  *(_QWORD *)(a1 + 464) = v7;
  *(_QWORD *)(a1 + 472) = &v7[8 * ((v2 - v3) >> 3)];
  *(_QWORD *)(a1 + 480) = v5 - v4;
}

void yyMemoryExhausted(uint64_t a1)
{
  longjmp((int *)(a1 + 272), 2);
}

void yyaddDeferredAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  v5 = *(_QWORD *)(a1 + 472);
  v6 = *(_QWORD *)(a1 + 480) - 1;
  *(_QWORD *)(a1 + 472) = v5 + 72;
  *(_QWORD *)(a1 + 480) = v6;
  *(_BYTE *)v5 = 0;
  *(_QWORD *)(v5 + 8) = a4;
  *(_DWORD *)(v5 + 4) = a5;
  if (*(_BYTE *)(*(_QWORD *)(a1 + 512) + a2))
  {
    *(_DWORD *)(v5 + 16) = *(_DWORD *)(a1 + 228);
    v7 = *(_OWORD *)(a1 + 232);
    *(_QWORD *)(v5 + 40) = *(_QWORD *)(a1 + 248);
    *(_OWORD *)(v5 + 24) = v7;
    *(_OWORD *)(v5 + 48) = *(_OWORD *)(a1 + 256);
  }
  else
  {
    *(_DWORD *)(v5 + 16) = -2;
  }
  *(_QWORD *)(v5 + 64) = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = v5;
  if (*(_QWORD *)(a1 + 480) <= 1uLL)
    yyexpandGLRStack(a1);
}

uint64_t yyuserAction(uint64_t a1)
{
  int v1;
  int v2;
  uint64_t v3;
  uint64_t *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  int v18;
  int v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t result;
  uint64_t (*v24)(uint64_t, __n128 *);
  uint64_t Allocator;
  const char *StringZ_0;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t BlockNode;
  unsigned int *PrimitiveType;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *MutableValue;
  uint64_t v45;
  __n128 *v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  const char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t PostincrementNode;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  __n128 *v111;
  const char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  const char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t PreincrementNode;
  uint64_t v120;
  const char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t (*v124)(uint64_t, __n128 *, __n128);
  uint64_t v125;
  __n128 Location;
  uint64_t v127;
  uint64_t MultiplyNode;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  uint64_t v161;
  const char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  const char *v169;
  uint64_t v170;
  uint64_t InterfaceBlockNode;
  _QWORD *v172;
  uint64_t v173;
  uint64_t *v174;
  uint64_t NameTable;
  uint64_t v176;
  const char *v177;
  uint64_t v178;
  uint64_t v179;
  const char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  const char *v188;
  uint64_t v189;
  uint64_t v190;
  const char *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  _QWORD *v195;
  uint64_t v196;
  uint64_t v197;
  const char *v198;
  uint64_t v199;
  uint64_t v200;
  const char *v201;
  uint64_t v202;
  uint64_t v203;
  int v204;
  unsigned int i;
  uint64_t Declaration;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  __int128 v210;
  uint64_t v211;
  const char *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  const char *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  _QWORD *v222;
  uint64_t v223;
  uint64_t v224;
  const char *v225;
  uint64_t v226;
  uint64_t v227;
  const char *v228;
  uint64_t v229;
  uint64_t v230;
  __n128 *v231;
  const char *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t ReturnType;
  uint64_t Qualifiers;
  uint64_t v240;
  _QWORD *v241;
  uint64_t v242;
  uint64_t v243;
  const char *v244;
  uint64_t v245;
  uint64_t v246;
  _BOOL4 IsQualifiedTypeNode;
  uint64_t Type;
  uint64_t v249;
  uint64_t v250;
  const char *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  const char *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  unsigned int Kind;
  unsigned int v278;
  _QWORD *v279;
  uint64_t v280;
  uint64_t v281;
  const char *v282;
  uint64_t v283;
  uint64_t v284;
  const char *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t BaseType;
  _QWORD *v290;
  uint64_t v291;
  const char *v292;
  uint64_t v293;
  uint64_t v294;
  const char *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  _QWORD *v301;
  uint64_t v302;
  const char *v303;
  uint64_t v304;
  uint64_t v305;
  const char *v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t (**v310)(uint64_t, __n128 *);
  uint64_t v311;
  uint64_t v312;
  _QWORD *v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  const char *v317;
  uint64_t v318;
  uint64_t v319;
  const char *v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  _QWORD *v325;
  uint64_t v326;
  uint64_t v327;
  const char *v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  const char *v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  const char *v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  const char *v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  const char *v359;
  uint64_t v360;
  uint64_t v361;
  __n128 *v362;
  uint64_t v363;
  int v364;
  uint64_t v365;
  const char *v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  const char *v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  const char *v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  _QWORD *v379;
  uint64_t v380;
  uint64_t v381;
  _QWORD *v382;
  uint64_t v383;
  uint64_t v384;
  const char *v385;
  uint64_t v386;
  uint64_t v387;
  const char *v388;
  uint64_t v389;
  uint64_t v390;
  const char *v391;
  __n128 *v392;
  uint64_t v393;
  int v394;
  int v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  const char *v402;
  uint64_t v403;
  uint64_t v404;
  const char *v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  const char *v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  const char *v420;
  uint64_t v421;
  uint64_t v422;
  const char *v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  const char *v429;
  uint64_t v430;
  uint64_t v431;
  const char *v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  const char *v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  _QWORD *v442;
  uint64_t v443;
  uint64_t v444;
  const char *v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  const char *v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  const char *v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  const char *v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  const char *v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  const char *v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  const char *v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  const char *v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  const char *v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  const char *v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  const char *v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  const char *v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  const char *v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  const char *v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  const char *v501;
  uint64_t v502;
  uint64_t v503;
  _QWORD *v504;
  uint64_t v505;
  uint64_t v506;
  const char *v507;
  uint64_t v508;
  uint64_t v509;
  const char *v510;
  uint64_t v511;
  uint64_t v512;
  __n128 *v513;
  const char *v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  const char *v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  const char *v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  const char *v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  const char *v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  const char *v543;
  uint64_t v544;
  uint64_t v545;
  __n128 *v546;
  uint64_t v547;
  int v548;
  uint64_t v549;
  const char *v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  const char *v554;
  uint64_t v555;
  uint64_t v556;
  __n128 *v557;
  uint64_t v558;
  int v559;
  uint64_t v560;
  const char *v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  const char *v565;
  uint64_t v566;
  uint64_t v567;
  const char *v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  const char *v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  const char *v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  const char *v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  const char *v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  const char *v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  const char *v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  const char *v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  const char *v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  const char *v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  const char *v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  const char *v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  const char *v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  const char *v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  const char *v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  const char *v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  const char *v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  const char *v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  const char *v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  const char *v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  const char *v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  const char *v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  const char *v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  const char *v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  const char *v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  const char *v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  const char *v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  const char *v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  const char *v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  const char *v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  const char *v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  const char *v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  const char *v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  const char *v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  const char *v704;
  uint64_t v705;
  uint64_t v706;
  __n128 PrimitiveTypeNode;
  uint64_t v708;
  uint64_t v709;
  const char *v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  const char *v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  const char *v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  const char *v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  const char *v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  const char *v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  const char *v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  const char *v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  const char *v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  const char *v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  const char *v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  const char *v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  const char *v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  const char *v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  const char *v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  const char *v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  const char *v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  const char *v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  const char *v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  const char *v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  const char *v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  const char *v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  const char *v798;
  uint64_t v799;
  uint64_t v800;
  uint64_t v801;
  const char *v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  const char *v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  const char *v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  const char *v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  const char *v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  const char *v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  const char *v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  const char *v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  const char *v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  const char *v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  const char *v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  const char *v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  const char *v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  const char *v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  const char *v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  const char *v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  const char *v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  const char *v870;
  uint64_t v871;
  uint64_t v872;
  const char *v873;
  uint64_t v874;
  uint64_t v875;
  const char *v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  const char *v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  const char *v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  const char *v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  const char *v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  const char *v896;
  uint64_t v897;
  double v898;
  uint64_t v899;
  const char *v900;
  uint64_t v901;
  uint64_t v902;
  const char *v903;
  uint64_t v904;
  uint64_t v905;
  __n128 *v906;
  uint64_t v907;
  uint64_t v908;
  const char *v909;
  uint64_t v910;
  uint64_t v911;
  uint64_t v912;
  uint64_t v913;
  uint64_t *v914;
  int v915;
  uint64_t *v916;
  uint64_t *v917;
  uint64_t v918;
  uint64_t *v919;
  uint64_t j;
  uint64_t ElementType;
  uint64_t v922;
  uint64_t v923;
  uint64_t v924;
  uint64_t v925;
  __int128 v926;
  uint64_t v927;
  uint64_t v928;
  uint64_t v929;
  __int128 v930;
  uint64_t v931;
  _BOOL4 v932;
  uint64_t v933;
  uint64_t v934;
  uint64_t v935;
  uint64_t *v936;
  uint64_t v937;
  uint64_t *v938;
  uint64_t v939;
  _QWORD *v940;
  uint64_t v941;
  const char *v942;
  uint64_t v943;
  uint64_t v944;
  const char *v945;
  uint64_t v946;
  uint64_t v947;
  uint64_t v948;
  uint64_t v949;
  const char *v950;
  uint64_t v951;
  uint64_t v952;
  const char *v953;
  uint64_t v954;
  uint64_t v955;
  uint64_t v956;
  uint64_t v957;
  uint64_t ExpressionStatementNode;
  uint64_t v959;
  uint64_t v960;
  const char *v961;
  uint64_t v962;
  uint64_t v963;
  __n128 *v964;
  uint64_t v965;
  char v966;
  uint64_t v967;
  uint64_t v968;
  const char *v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t v972;
  _QWORD *v973;
  uint64_t v974;
  uint64_t v975;
  uint64_t v976;
  const char *v977;
  uint64_t v978;
  uint64_t v979;
  uint64_t IfStatementNode;
  uint64_t v981;
  uint64_t v982;
  uint64_t v983;
  _QWORD *v984;
  uint64_t v985;
  uint64_t v986;
  uint64_t v987;
  _QWORD *v988;
  uint64_t v989;
  uint64_t v990;
  const char *v991;
  uint64_t v992;
  uint64_t v993;
  uint64_t v994;
  uint64_t v995;
  uint64_t v996;
  const char *v997;
  uint64_t v998;
  uint64_t v999;
  uint64_t SwitchStatementNode;
  uint64_t v1001;
  uint64_t v1002;
  const char *v1003;
  uint64_t v1004;
  uint64_t v1005;
  uint64_t CaseStatementNode;
  uint64_t v1007;
  const char *v1008;
  uint64_t v1009;
  uint64_t v1010;
  _QWORD *v1011;
  const char *v1012;
  uint64_t v1013;
  uint64_t v1014;
  uint64_t v1015;
  _QWORD *v1016;
  const char *v1017;
  uint64_t v1018;
  uint64_t v1019;
  uint64_t v1020;
  _QWORD *v1021;
  const char *v1022;
  uint64_t v1023;
  uint64_t v1024;
  uint64_t v1025;
  uint64_t v1026;
  uint64_t v1027;
  unsigned int *v1028;
  uint64_t v1029;
  uint64_t v1030;
  uint64_t v1031;
  uint64_t v1032;
  uint64_t v1033;
  uint64_t v1034;
  uint64_t v1035;
  uint64_t v1036;
  char *v1037;
  uint64_t v1038;
  const char *v1039;
  uint64_t v1040;
  uint64_t v1041;
  uint64_t v1042;
  const char *v1043;
  uint64_t v1044;
  uint64_t v1045;
  uint64_t v1046;
  const char *v1047;
  uint64_t v1048;
  uint64_t v1049;
  uint64_t v1050;
  const char *v1051;
  uint64_t v1052;
  uint64_t v1053;
  uint64_t ReturnStatementNode;
  uint64_t v1055;
  const char *v1056;
  uint64_t v1057;
  uint64_t v1058;
  _QWORD *v1059;
  uint64_t v1060;
  _QWORD *v1061;
  uint64_t v1062;
  uint64_t v1063;
  uint64_t v1064;
  uint64_t v1065;
  uint64_t v1066;
  uint64_t v1067;
  uint64_t v1068;
  const char *v1069;
  uint64_t v1070;
  uint64_t v1071;
  const char *v1072;
  uint64_t v1073;
  uint64_t v1074;
  _QWORD *v1075;
  uint64_t v1076;
  uint64_t v1077;
  uint64_t v1078;
  uint64_t v1079;
  uint64_t v1080;
  uint64_t v1081;
  uint64_t v1082;
  uint64_t v1083;
  uint64_t v1084;
  uint64_t KeywordQualifierNode;
  uint64_t v1086;
  uint64_t v1087;
  uint64_t v1088;
  unint64_t v1089;
  _QWORD *v1090;
  uint64_t v1091;
  uint64_t v1092;
  uint64_t v1093;
  uint64_t v1094;
  uint64_t v1095;
  uint64_t v1096;
  uint64_t v1097;
  uint64_t Dimension;
  uint64_t v1099;
  __n128 v1100;
  __n128 v1101;
  __n128 v1102;
  __n128 v1103;
  __n128 v1104;
  __n128 v1105;
  __n128 v1106;
  __n128 v1107;
  __n128 v1108;
  __n128 v1109;
  __n128 v1110;
  __n128 v1111;
  __n128 v1112;
  __n128 v1113;
  __n128 v1114;
  _QWORD v1115[3];
  _QWORD v1116[3];
  __n128 v1117;
  __n128 v1118;
  __n128 v1119;
  __n128 v1120;
  _QWORD v1121[3];
  _QWORD v1122[3];
  _QWORD v1123[3];
  _QWORD v1124[3];
  _QWORD v1125[3];
  _QWORD v1126[3];
  _QWORD v1127[3];
  __n128 v1128;
  _QWORD v1129[3];
  _QWORD v1130[3];
  _QWORD v1131[3];
  _QWORD v1132[3];
  _QWORD v1133[3];
  _QWORD v1134[3];
  _QWORD v1135[3];
  _QWORD v1136[3];
  _QWORD v1137[3];
  _QWORD v1138[3];
  _QWORD v1139[3];
  _QWORD v1140[3];
  _QWORD v1141[3];
  _QWORD v1142[3];
  _QWORD v1143[3];
  _QWORD v1144[3];
  _QWORD v1145[3];
  _QWORD v1146[3];
  _QWORD v1147[3];
  _QWORD v1148[3];
  _QWORD v1149[3];
  _QWORD v1150[3];
  _QWORD v1151[3];
  _QWORD v1152[3];
  _QWORD v1153[3];
  _QWORD v1154[3];
  _QWORD v1155[3];
  _QWORD v1156[3];
  _QWORD v1157[3];
  _QWORD v1158[3];
  _QWORD v1159[3];
  _QWORD v1160[3];
  _QWORD v1161[3];
  _QWORD v1162[3];
  _QWORD v1163[3];
  _QWORD v1164[3];
  _QWORD v1165[3];
  _QWORD v1166[3];
  _QWORD v1167[3];
  _QWORD v1168[3];
  _QWORD v1169[3];
  _QWORD v1170[3];
  _QWORD v1171[3];
  _QWORD v1172[3];
  _QWORD v1173[3];
  _QWORD v1174[3];
  _QWORD v1175[3];
  _QWORD v1176[3];
  _QWORD v1177[3];
  _QWORD v1178[3];
  _QWORD v1179[3];
  _QWORD v1180[3];
  _QWORD v1181[3];
  _QWORD v1182[3];
  _QWORD v1183[3];
  _QWORD v1184[3];
  _QWORD v1185[3];
  _QWORD v1186[3];
  _QWORD v1187[3];
  _QWORD v1188[3];
  _QWORD v1189[3];
  _QWORD v1190[3];
  _QWORD v1191[3];
  _QWORD v1192[3];
  _QWORD v1193[3];
  _QWORD v1194[3];
  _QWORD v1195[3];
  _QWORD v1196[3];
  _QWORD v1197[3];
  _QWORD v1198[3];
  _QWORD v1199[3];
  _QWORD v1200[3];
  _QWORD v1201[3];
  _QWORD v1202[3];
  _QWORD v1203[3];
  _QWORD v1204[3];
  _QWORD v1205[3];
  _QWORD v1206[3];
  _QWORD v1207[3];
  _QWORD v1208[3];
  __n128 v1209;
  __n128 v1210;
  __n128 v1211;
  __n128 v1212;
  _QWORD v1213[3];
  _QWORD v1214[3];
  __n128 v1215;
  _QWORD v1216[3];
  _QWORD v1217[3];
  _QWORD v1218[3];
  _QWORD v1219[3];
  _QWORD v1220[3];
  _QWORD v1221[3];
  _QWORD v1222[3];
  _QWORD v1223[3];
  _QWORD v1224[3];
  _QWORD v1225[3];
  _QWORD v1226[3];
  _QWORD v1227[3];
  _QWORD v1228[3];
  _QWORD v1229[3];
  __n128 v1230;
  _QWORD v1231[3];
  _QWORD v1232[3];
  __n128 v1233;
  _QWORD v1234[3];
  _QWORD v1235[3];
  _QWORD v1236[3];
  __n128 v1237;
  __n128 v1238;
  _QWORD v1239[3];
  _QWORD v1240[3];
  _QWORD v1241[3];
  _QWORD v1242[3];
  __n128 v1243;
  __n128 v1244;
  __n128 v1245;
  __n128 v1246;
  __n128 v1247;
  __n128 v1248;
  __n128 v1249;
  __n128 v1250;
  __n128 v1251;
  __n128 v1252;
  __n128 v1253;
  __n128 v1254;
  __n128 v1255;
  __n128 v1256;
  __n128 v1257;
  __n128 v1258;
  __n128 v1259;
  __n128 v1260;
  __n128 v1261;
  __n128 v1262;
  __n128 v1263;
  _QWORD v1264[6];
  _QWORD v1265[2];
  void (*v1266)(uint64_t, uint64_t);
  void *v1267;
  uint64_t *v1268;
  uint64_t v1269;
  uint64_t v1270;
  uint64_t *v1271;
  uint64_t v1272;
  uint64_t v1273;
  _QWORD v1274[7];
  __n128 v1275;
  uint64_t v1276;
  uint64_t v1277;
  __n128 v1278;
  _QWORD v1279[6];
  _QWORD v1280[3];
  _QWORD v1281[3];
  __n128 v1282;
  __n128 v1283;
  __n128 v1284;
  __n128 v1285;
  __n128 v1286;
  __n128 v1287;
  __n128 v1288;
  __n128 v1289;
  __n128 v1290;
  __n128 v1291;
  __n128 v1292;
  __n128 v1293;
  __n128 v1294;
  __n128 v1295;
  __n128 v1296;
  __n128 v1297;
  __n128 v1298;
  __n128 v1299;
  __n128 v1300;
  __n128 v1301;
  __n128 v1302;
  __n128 v1303;
  __n128 v1304;
  __n128 v1305;
  __n128 v1306;
  __n128 v1307;
  __n128 v1308;
  __n128 v1309;
  __n128 v1310;
  __n128 v1311;
  __n128 v1312;
  __n128 v1313;
  __n128 v1314;
  __n128 v1315;
  __n128 v1316;
  __n128 v1317;
  __n128 v1318;
  __n128 v1319;
  __n128 v1320;
  __n128 v1321;
  __n128 v1322;
  __n128 v1323;
  _QWORD v1324[3];
  _QWORD v1325[3];
  _QWORD v1326[3];
  _QWORD v1327[3];
  _QWORD v1328[3];
  __n128 v1329;
  int v1330[3];

  v1 = MEMORY[0x24BDAC7A8](a1);
  v8 = v7;
  v9 = (_DWORD *)v6;
  v10 = v4;
  v11 = v3;
  v12 = *(_QWORD *)(v6 + 488);
  v1330[0] = 1;
  if (v2)
  {
    if (v2 >= 1 && v12)
    {
      v13 = *(_QWORD *)(v3 + 80);
      v14 = 1 - v2;
      v15 = v3 + 24;
      v16 = 1;
      do
      {
        if (!*(_BYTE *)(v13 + 1))
LABEL_380:
          abort();
        --v16;
        *(_BYTE *)(v15 - 23) = 1;
        v17 = *(_OWORD *)(v13 + 24);
        *(_QWORD *)(v15 + 16) = *(_QWORD *)(v13 + 40);
        *(_OWORD *)v15 = v17;
        *(_OWORD *)(v15 + 24) = *(_OWORD *)(v13 + 48);
        v13 = *(_QWORD *)(v13 + 8);
        *(_QWORD *)(v15 - 16) = v13;
        v15 -= 72;
      }
      while (v16 > 1 - v2);
      v1330[0] = 1 - v2;
    }
    else
    {
      v14 = 1 - v2;
    }
    v20 = v3 + 72 * v14;
    v21 = *(_OWORD *)(v20 + 24);
    v4[2] = *(_QWORD *)(v20 + 40);
    *(_OWORD *)v4 = v21;
    v22 = v3 - 72 * v2;
    *v5 = *(_DWORD *)(v22 + 120);
    v5[1] = *(_DWORD *)(v22 + 124);
    v5[2] = *(_DWORD *)(v3 + 56);
    v5[3] = *(_DWORD *)(v3 + 60);
  }
  else
  {
    *v4 = 0;
    v4[1] = 0;
    v4[2] = 0;
    v18 = *(_DWORD *)(v3 + 56);
    v5[2] = v18;
    *v5 = v18;
    v19 = *(_DWORD *)(v3 + 60);
    v5[3] = v19;
    v5[1] = v19;
  }
  *(_OWORD *)(v6 + 128) = *(_OWORD *)v5;
  switch(v1)
  {
    case 2:
      Allocator = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      StringZ_0 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v28 = v27;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)StringZ_0, v28, *(_DWORD *)(v11 + 40), &v1329);
      yyfill(v11, v1330, 0, v12 == 0);
      v29 = glpMakeStringZ_0(*(const char **)(v11 + 24));
      glpMakeVariableIdentifierNode(Allocator, &v1329, (uint64_t)v29, v30);
      goto LABEL_278;
    case 3:
    case 10:
    case 12:
    case 16:
    case 17:
    case 18:
    case 22:
    case 29:
    case 37:
    case 41:
    case 44:
    case 47:
    case 52:
    case 55:
    case 57:
    case 59:
    case 61:
    case 63:
    case 65:
    case 67:
    case 69:
    case 82:
    case 84:
    case 98:
    case 99:
    case 106:
    case 109:
    case 120:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 163:
    case 249:
    case 251:
    case 259:
    case 267:
    case 269:
    case 270:
    case 271:
    case 272:
    case 273:
    case 274:
    case 275:
    case 276:
    case 277:
    case 280:
    case 281:
    case 291:
    case 295:
    case 301:
    case 302:
    case 303:
    case 314:
    case 315:
      goto LABEL_12;
    case 4:
      PrimitiveType = (unsigned int *)glpGetPrimitiveType(5u);
      v33 = glpCompilerGetAllocator(*(_QWORD *)(v8 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v34 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v36 = v35;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v34, v36, *(_DWORD *)(v11 + 40), v1328);
      v37 = *(_QWORD *)(v8 + 784);
      v38 = glpCompilerGetAllocator(v37);
      yyfill(v11, v1330, 0, v12 == 0);
      MutableValue = glpMakeMutableValue(v38, PrimitiveType, 1, v39, v40, v41, v42, v43, *(unsigned int *)(v11 + 24));
      v45 = glpCompilerRemapValue(v37, PrimitiveType, MutableValue);
      v46 = (__n128 *)v1328;
      goto LABEL_20;
    case 5:
      PrimitiveType = (unsigned int *)glpGetPrimitiveType(0x24u);
      v33 = glpCompilerGetAllocator(*(_QWORD *)(v8 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v47 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v49 = v48;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v47, v49, *(_DWORD *)(v11 + 40), v1327);
      v50 = *(_QWORD *)(v8 + 784);
      v51 = glpCompilerGetAllocator(v50);
      yyfill(v11, v1330, 0, v12 == 0);
      v57 = glpMakeMutableValue(v51, PrimitiveType, 1, v52, v53, v54, v55, v56, *(unsigned int *)(v11 + 24));
      v45 = glpCompilerRemapValue(v50, PrimitiveType, v57);
      v46 = (__n128 *)v1327;
      goto LABEL_20;
    case 6:
      PrimitiveType = (unsigned int *)glpGetPrimitiveType(1u);
      v33 = glpCompilerGetAllocator(*(_QWORD *)(v8 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v58 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v60 = v59;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v58, v60, *(_DWORD *)(v11 + 40), v1326);
      v61 = *(_QWORD *)(v8 + 784);
      v62 = glpCompilerGetAllocator(v61);
      yyfill(v11, v1330, 0, v12 == 0);
      v68 = glpMakeMutableValue(v62, PrimitiveType, 1, v63, v64, v65, v66, v67, COERCE__INT64(*(float *)(v11 + 24)));
      v45 = glpCompilerRemapValue(v61, PrimitiveType, v68);
      v46 = (__n128 *)v1326;
      goto LABEL_20;
    case 7:
      PrimitiveType = (unsigned int *)glpGetPrimitiveType(9u);
      v33 = glpCompilerGetAllocator(*(_QWORD *)(v8 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v69 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v71 = v70;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v69, v71, *(_DWORD *)(v11 + 40), v1325);
      v72 = *(_QWORD *)(v8 + 784);
      v73 = glpCompilerGetAllocator(v72);
      yyfill(v11, v1330, 0, v12 == 0);
      v79 = glpMakeMutableValue(v73, PrimitiveType, 1, v74, v75, v76, v77, v78, *(unsigned int *)(v11 + 24));
      v45 = glpCompilerRemapValue(v72, PrimitiveType, v79);
      v46 = (__n128 *)v1325;
      goto LABEL_20;
    case 8:
      PrimitiveType = (unsigned int *)glpGetPrimitiveType(0x3Eu);
      v33 = glpCompilerGetAllocator(*(_QWORD *)(v8 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v80 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v82 = v81;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v80, v82, *(_DWORD *)(v11 + 40), v1324);
      v83 = *(_QWORD *)(v8 + 784);
      v84 = glpCompilerGetAllocator(v83);
      yyfill(v11, v1330, 0, v12 == 0);
      v90 = glpMakeMutableValue(v84, PrimitiveType, 1, v85, v86, v87, v88, v89, *(_QWORD *)(v11 + 24));
      v45 = glpCompilerRemapValue(v83, PrimitiveType, v90);
      v46 = (__n128 *)v1324;
LABEL_20:
      v91 = v33;
      v92 = (uint64_t)PrimitiveType;
      goto LABEL_21;
    case 9:
    case 19:
    case 20:
    case 21:
    case 25:
    case 85:
    case 86:
    case 126:
    case 129:
    case 155:
    case 283:
      goto LABEL_314;
    case 11:
      v93 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 4294967293, v12 == 0);
      glpASTNodeGetLocation(*(_QWORD *)(v11 - 192), &v1323);
      glpMakeArrayAccessNode(v93, &v1323);
      v95 = v94;
      *v10 = v94;
      yyfill(v11, v1330, 4294967293, v12 == 0);
      glpArrayAccessNodeSetArray(v95, *(_QWORD *)(v11 - 192));
      v96 = *v10;
      yyfill(v11, v1330, 0xFFFFFFFFLL, v12 == 0);
      glpArrayAccessNodeSetElement(v96, *(_QWORD *)(v11 - 48));
      return 0;
    case 13:
      v97 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 4294967294, v12 == 0);
      glpASTNodeGetLocation(*(_QWORD *)(v11 - 120), &v1322);
      yyfill(v11, v1330, 0, v12 == 0);
      v98 = glpMakeStringZ_0(*(const char **)(v11 + 24));
      glpMakeFieldAccessNode(v97, &v1322, (uint64_t)v98, v99);
      v101 = v100;
      *v10 = v100;
      yyfill(v11, v1330, 4294967294, v12 == 0);
      glpFieldAccessNodeSetStructure(v101, *(_QWORD *)(v11 - 120));
      return 0;
    case 14:
      v102 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0xFFFFFFFFLL, v12 == 0);
      glpASTNodeGetLocation(*(_QWORD *)(v11 - 48), &v1321);
      PostincrementNode = glpMakePostincrementNode(v102, &v1321);
      goto LABEL_26;
    case 15:
      v104 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0xFFFFFFFFLL, v12 == 0);
      glpASTNodeGetLocation(*(_QWORD *)(v11 - 48), &v1320);
      PostincrementNode = glpMakePostdecrementNode(v104, &v1320);
LABEL_26:
      v105 = PostincrementNode;
      *v10 = PostincrementNode;
      yyfill(v11, v1330, 0xFFFFFFFFLL, v12 == 0);
      v106 = *(_QWORD *)(v11 - 48);
      goto LABEL_38;
    case 23:
      yyfill(v3, v1330, 0xFFFFFFFFLL, v12 == 0);
      v107 = *(_QWORD *)(v11 - 48);
      goto LABEL_29;
    case 24:
      yyfill(v3, v1330, 4294967294, v12 == 0);
      v107 = *(_QWORD *)(v11 - 120);
LABEL_29:
      *v10 = v107;
      v108 = (_QWORD *)glpCompilerGetAllocator(*(_QWORD *)(v8 + 784));
      v109 = *v10;
      yyfill(v11, v1330, 0, v12 == 0);
      glpCallNodeAddArg(v108, v109, *(_QWORD *)(v11 + 24));
      return 0;
    case 26:
      v110 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      glpASTNodeGetLocation(*(_QWORD *)(v11 + 24), &v1319);
      v111 = &v1319;
      goto LABEL_359;
    case 27:
      if ((int)glpCompilerGetIOSVersion(*(_QWORD *)(v7 + 784)) >= 9)
      {
        v112 = "Constructor calls may not have precision";
        goto LABEL_377;
      }
      v110 = glpCompilerGetAllocator(*(_QWORD *)(v8 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      glpASTNodeGetLocation(*(_QWORD *)(v11 + 24), &v1318);
      v111 = &v1318;
LABEL_359:
      v1067 = glpMakeConstructorCallNode(v110, v111);
      *v10 = v1067;
      yyfill(v11, v1330, 0, v12 == 0);
      glpConstructorCallNodeSetType(v1067, *(_QWORD *)(v11 + 24));
      return 0;
    case 28:
      v113 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      glpASTNodeGetLocation(*(_QWORD *)(v11 + 24), &v1317);
      v114 = glpMakeUndeterminedCallNode(v113, &v1317);
      *v10 = v114;
      yyfill(v11, v1330, 0, v12 == 0);
      glpUndeterminedCallNodeSetCallee(v114, *(_QWORD *)(v11 + 24));
      return 0;
    case 30:
      v115 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0xFFFFFFFFLL, v12 == 0);
      v116 = glpMakeStringZ_0(*(const char **)(v11 - 40));
      v118 = v117;
      yyfill(v11, v1330, 0xFFFFFFFFLL, v12 == 0);
      glpMakeSourceLocation((uint64_t)v116, v118, *(_DWORD *)(v11 - 32), &v1316);
      PreincrementNode = glpMakePreincrementNode(v115, &v1316);
      goto LABEL_37;
    case 31:
      v120 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0xFFFFFFFFLL, v12 == 0);
      v121 = glpMakeStringZ_0(*(const char **)(v11 - 40));
      v123 = v122;
      yyfill(v11, v1330, 0xFFFFFFFFLL, v12 == 0);
      glpMakeSourceLocation((uint64_t)v121, v123, *(_DWORD *)(v11 - 32), &v1315);
      PreincrementNode = glpMakePredecrementNode(v120, &v1315);
      goto LABEL_37;
    case 32:
      yyfill(v3, v1330, 0xFFFFFFFFLL, v12 == 0);
      v124 = *(uint64_t (**)(uint64_t, __n128 *, __n128))(v11 - 48);
      v125 = glpCompilerGetAllocator(*(_QWORD *)(v8 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      Location = glpASTNodeGetLocation(*(_QWORD *)(v11 + 24), &v1314);
      PreincrementNode = v124(v125, &v1314, Location);
LABEL_37:
      v105 = PreincrementNode;
      *v10 = PreincrementNode;
      yyfill(v11, v1330, 0, v12 == 0);
      v106 = *(_QWORD *)(v11 + 24);
LABEL_38:
      glpUnaryOperatorNodeSetExpr(v105, v106);
      return 0;
    case 33:
      result = 0;
      v24 = glpMakeUnaryPlusNode;
      goto LABEL_279;
    case 34:
      result = 0;
      v24 = glpMakeNegateNode;
      goto LABEL_279;
    case 35:
      result = 0;
      v24 = glpMakeLogicalNotNode;
      goto LABEL_279;
    case 36:
      result = 0;
      v24 = glpMakeBitwiseNotNode;
      goto LABEL_279;
    case 38:
      v127 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 4294967294, v12 == 0);
      glpASTNodeGetLocation(*(_QWORD *)(v11 - 120), &v1313);
      MultiplyNode = glpMakeMultiplyNode(v127, &v1313);
      goto LABEL_364;
    case 39:
      v129 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 4294967294, v12 == 0);
      glpASTNodeGetLocation(*(_QWORD *)(v11 - 120), &v1312);
      MultiplyNode = glpMakeDivideNode(v129, &v1312);
      goto LABEL_364;
    case 40:
      v130 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 4294967294, v12 == 0);
      glpASTNodeGetLocation(*(_QWORD *)(v11 - 120), &v1311);
      MultiplyNode = glpMakeModuloNode(v130, &v1311);
      goto LABEL_364;
    case 42:
      v131 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 4294967294, v12 == 0);
      glpASTNodeGetLocation(*(_QWORD *)(v11 - 120), &v1310);
      MultiplyNode = glpMakeAddNode(v131, &v1310);
      goto LABEL_364;
    case 43:
      v132 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 4294967294, v12 == 0);
      glpASTNodeGetLocation(*(_QWORD *)(v11 - 120), &v1309);
      MultiplyNode = glpMakeSubtractNode(v132, &v1309);
      goto LABEL_364;
    case 45:
      v133 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 4294967294, v12 == 0);
      glpASTNodeGetLocation(*(_QWORD *)(v11 - 120), &v1308);
      MultiplyNode = glpMakeShiftLeftNode(v133, &v1308);
      goto LABEL_364;
    case 46:
      v134 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 4294967294, v12 == 0);
      glpASTNodeGetLocation(*(_QWORD *)(v11 - 120), &v1307);
      MultiplyNode = glpMakeShiftRightNode(v134, &v1307);
      goto LABEL_364;
    case 48:
      v135 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 4294967294, v12 == 0);
      glpASTNodeGetLocation(*(_QWORD *)(v11 - 120), &v1306);
      MultiplyNode = glpMakeLessNode(v135, &v1306);
      goto LABEL_364;
    case 49:
      v136 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 4294967294, v12 == 0);
      glpASTNodeGetLocation(*(_QWORD *)(v11 - 120), &v1305);
      MultiplyNode = glpMakeGreaterNode(v136, &v1305);
      goto LABEL_364;
    case 50:
      v137 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 4294967294, v12 == 0);
      glpASTNodeGetLocation(*(_QWORD *)(v11 - 120), &v1304);
      MultiplyNode = glpMakeLessEqualNode(v137, &v1304);
      goto LABEL_364;
    case 51:
      v138 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 4294967294, v12 == 0);
      glpASTNodeGetLocation(*(_QWORD *)(v11 - 120), &v1303);
      MultiplyNode = glpMakeGreaterEqualNode(v138, &v1303);
      goto LABEL_364;
    case 53:
      v139 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 4294967294, v12 == 0);
      glpASTNodeGetLocation(*(_QWORD *)(v11 - 120), &v1302);
      MultiplyNode = glpMakeEqualNode(v139, &v1302, 1);
      goto LABEL_364;
    case 54:
      v140 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 4294967294, v12 == 0);
      glpASTNodeGetLocation(*(_QWORD *)(v11 - 120), &v1301);
      MultiplyNode = glpMakeNotEqualNode(v140, &v1301, 1);
      goto LABEL_364;
    case 56:
      v141 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 4294967294, v12 == 0);
      glpASTNodeGetLocation(*(_QWORD *)(v11 - 120), &v1300);
      MultiplyNode = glpMakeBitwiseAndNode(v141, &v1300);
      goto LABEL_364;
    case 58:
      v142 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 4294967294, v12 == 0);
      glpASTNodeGetLocation(*(_QWORD *)(v11 - 120), &v1299);
      MultiplyNode = glpMakeBitwiseXorNode(v142, &v1299);
      goto LABEL_364;
    case 60:
      v143 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 4294967294, v12 == 0);
      glpASTNodeGetLocation(*(_QWORD *)(v11 - 120), &v1298);
      MultiplyNode = glpMakeBitwiseOrNode(v143, &v1298);
      goto LABEL_364;
    case 62:
      v144 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 4294967294, v12 == 0);
      glpASTNodeGetLocation(*(_QWORD *)(v11 - 120), &v1297);
      MultiplyNode = glpMakeLogicalAndNode(v144, &v1297);
      goto LABEL_364;
    case 64:
      v145 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 4294967294, v12 == 0);
      glpASTNodeGetLocation(*(_QWORD *)(v11 - 120), &v1296);
      MultiplyNode = glpMakeLogicalXorNode(v145, &v1296);
      goto LABEL_364;
    case 66:
      v146 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 4294967294, v12 == 0);
      glpASTNodeGetLocation(*(_QWORD *)(v11 - 120), &v1295);
      MultiplyNode = glpMakeLogicalOrNode(v146, &v1295);
      goto LABEL_364;
    case 68:
      v147 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 4294967292, v12 == 0);
      glpASTNodeGetLocation(*(_QWORD *)(v11 - 264), &v1294);
      glpMakeIfExprNode(v147, &v1294);
      v149 = v148;
      *v10 = v148;
      yyfill(v11, v1330, 4294967292, v12 == 0);
      glpIfExprNodeSetCondition(v149, *(_QWORD *)(v11 - 264));
      v150 = *v10;
      yyfill(v11, v1330, 4294967294, v12 == 0);
      glpIfExprNodeSetIfExpr(v150, *(_QWORD *)(v11 - 120));
      v151 = *v10;
      yyfill(v11, v1330, 0, v12 == 0);
      glpIfExprNodeSetElseExpr(v151, *(_QWORD *)(v11 + 24));
      return 0;
    case 70:
      yyfill(v3, v1330, 0xFFFFFFFFLL, v12 == 0);
      v152 = *(_QWORD *)(v11 - 48);
      v153 = glpCompilerGetAllocator(*(_QWORD *)(v8 + 784));
      yyfill(v11, v1330, 4294967294, v12 == 0);
      v154 = *(_QWORD *)(v11 - 120);
      if (v152)
      {
        glpASTNodeGetLocation(v154, &v1293);
        yyfill(v11, v1330, 0xFFFFFFFFLL, v12 == 0);
        MultiplyNode = glpMakeOpAssignNode(v153, &v1293, *(_QWORD *)(v11 - 48));
      }
      else
      {
        glpASTNodeGetLocation(v154, &v1292);
        MultiplyNode = glpMakeAssignNode(v153, &v1292, 1);
      }
LABEL_364:
      v1079 = MultiplyNode;
      *v10 = MultiplyNode;
      yyfill(v11, v1330, 4294967294, v12 == 0);
      glpBinaryOperatorNodeSetLhs(v1079, *(_QWORD *)(v11 - 120));
      v1080 = *v10;
      yyfill(v11, v1330, 0, v12 == 0);
      glpBinaryOperatorNodeSetRhs(v1080, *(_QWORD *)(v11 + 24));
      return 0;
    case 71:
    case 286:
      result = 0;
      *v4 = 0;
      return result;
    case 72:
      result = 0;
      v24 = glpMakeMultiplyNode;
      goto LABEL_279;
    case 73:
      result = 0;
      v24 = glpMakeDivideNode;
      goto LABEL_279;
    case 74:
      result = 0;
      v24 = glpMakeModuloNode;
      goto LABEL_279;
    case 75:
      result = 0;
      v24 = glpMakeAddNode;
      goto LABEL_279;
    case 76:
      result = 0;
      v24 = glpMakeSubtractNode;
      goto LABEL_279;
    case 77:
      result = 0;
      v24 = glpMakeShiftLeftNode;
      goto LABEL_279;
    case 78:
      result = 0;
      v24 = glpMakeShiftRightNode;
      goto LABEL_279;
    case 79:
      result = 0;
      v24 = glpMakeBitwiseAndNode;
      goto LABEL_279;
    case 80:
      result = 0;
      v24 = glpMakeBitwiseXorNode;
      goto LABEL_279;
    case 81:
      result = 0;
      v24 = glpMakeBitwiseOrNode;
      goto LABEL_279;
    case 83:
      v155 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 4294967294, v12 == 0);
      glpASTNodeGetLocation(*(_QWORD *)(v11 - 120), &v1291);
      glpMakeCommaExprNode(v155, &v1291, 1);
      *v10 = v156;
      v157 = (_QWORD *)glpCompilerGetAllocator(*(_QWORD *)(v8 + 784));
      v158 = *v10;
      yyfill(v11, v1330, 4294967294, v12 == 0);
      glpCommaExprNodeAddExpr(v157, v158, *(_QWORD *)(v11 - 120));
      v159 = (_QWORD *)glpCompilerGetAllocator(*(_QWORD *)(v8 + 784));
      v160 = *v10;
      yyfill(v11, v1330, 0, v12 == 0);
      glpCommaExprNodeAddExpr(v159, v160, *(_QWORD *)(v11 + 24));
      return 0;
    case 87:
      v161 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 4294967293, v12 == 0);
      v162 = glpMakeStringZ_0(*(const char **)(v11 - 184));
      v164 = v163;
      yyfill(v11, v1330, 4294967293, v12 == 0);
      glpMakeSourceLocation((uint64_t)v162, v164, *(_DWORD *)(v11 - 176), &v1290);
      glpMakePrecisionDeclarationNode(v161, &v1290);
      v166 = v165;
      *v10 = v165;
      yyfill(v11, v1330, 4294967294, v12 == 0);
      glpPrecisionDeclarationNodeSetQualifier(v166, *(_QWORD *)(v11 - 120));
      v167 = *v10;
      yyfill(v11, v1330, 0xFFFFFFFFLL, v12 == 0);
      glpPrecisionDeclarationNodeSetType(v167, *(_QWORD *)(v11 - 48));
      return 0;
    case 88:
      v168 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 4294967291, v12 == 0);
      glpASTNodeGetLocation(*(_QWORD *)(v11 - 336), &v1289);
      yyfill(v11, v1330, 4294967292, v12 == 0);
      v169 = glpMakeStringZ_0(*(const char **)(v11 - 264));
      InterfaceBlockNode = glpMakeInterfaceBlockNode(v168, &v1289, (uint64_t)v169, v170, (uint64_t)"<<BUG: printing instance name of interface block without an instance name>>", 0xDFA3F2CD0000004BLL, 0, 0, 0);
      *v10 = InterfaceBlockNode;
      yyfill(v11, v1330, 4294967291, v12 == 0);
      glpInterfaceBlockNodeSetQualifiers(InterfaceBlockNode, *(_QWORD *)(v11 - 336));
      v172 = (_QWORD *)glpCompilerGetAllocator(*(_QWORD *)(v8 + 784));
      v173 = *v10;
      yyfill(v11, v1330, 4294967294, v12 == 0);
      v174 = *(uint64_t **)(v11 - 120);
      goto LABEL_283;
    case 89:
      NameTable = glpCompilerGetNameTable(*(_QWORD *)(v7 + 784));
      if (glpNameTableGetGLSLVersion(NameTable) <= 4)
        goto LABEL_81;
      v176 = glpCompilerGetAllocator(*(_QWORD *)(v8 + 784));
      yyfill(v11, v1330, 4294967290, v12 == 0);
      glpASTNodeGetLocation(*(_QWORD *)(v11 - 408), &v1288);
      yyfill(v11, v1330, 4294967291, v12 == 0);
      v177 = glpMakeStringZ_0(*(const char **)(v11 - 336));
      v179 = v178;
      yyfill(v11, v1330, 0xFFFFFFFFLL, v12 == 0);
      v180 = glpMakeStringZ_0(*(const char **)(v11 - 48));
      v182 = glpMakeInterfaceBlockNode(v176, &v1288, (uint64_t)v177, v179, (uint64_t)v180, v181, 1, 0, 0);
      *v10 = v182;
      yyfill(v11, v1330, 4294967290, v12 == 0);
      glpInterfaceBlockNodeSetQualifiers(v182, *(_QWORD *)(v11 - 408));
      v172 = (_QWORD *)glpCompilerGetAllocator(*(_QWORD *)(v8 + 784));
      v173 = *v10;
      yyfill(v11, v1330, 4294967293, v12 == 0);
      v174 = *(uint64_t **)(v11 - 192);
      goto LABEL_283;
    case 90:
      v183 = glpCompilerGetNameTable(*(_QWORD *)(v7 + 784));
      if (glpNameTableGetGLSLVersion(v183) <= 4)
      {
LABEL_81:
        v112 = "Uniform blocks may not have identifiers in GLSL 140";
        goto LABEL_377;
      }
      v1068 = glpCompilerGetAllocator(*(_QWORD *)(v8 + 784));
      yyfill(v11, v1330, 4294967289, v12 == 0);
      glpASTNodeGetLocation(*(_QWORD *)(v11 - 480), &v1287);
      yyfill(v11, v1330, 4294967290, v12 == 0);
      v1069 = glpMakeStringZ_0(*(const char **)(v11 - 408));
      v1071 = v1070;
      yyfill(v11, v1330, 4294967294, v12 == 0);
      v1072 = glpMakeStringZ_0(*(const char **)(v11 - 120));
      v1074 = glpMakeInterfaceBlockNode(v1068, &v1287, (uint64_t)v1069, v1071, (uint64_t)v1072, v1073, 1, 1, 0);
      *v10 = v1074;
      yyfill(v11, v1330, 4294967289, v12 == 0);
      glpInterfaceBlockNodeSetQualifiers(v1074, *(_QWORD *)(v11 - 480));
      v1075 = (_QWORD *)glpCompilerGetAllocator(*(_QWORD *)(v8 + 784));
      v1076 = *v10;
      yyfill(v11, v1330, 4294967292, v12 == 0);
      addFields(v1075, v1076, *(uint64_t **)(v11 - 264));
      yyfill(v11, v1330, 0xFFFFFFFFLL, v12 == 0);
      if (glpArrayTypeNodeGetElementType(*(_QWORD *)(v11 - 48)))
      {
        v112 = "Interface blocks may not be multidimensional arrays";
        goto LABEL_377;
      }
      v1097 = *v10;
      yyfill(v11, v1330, 0xFFFFFFFFLL, v12 == 0);
      Dimension = glpArrayTypeNodeGetDimension(*(_QWORD *)(v11 - 48));
      glpInterfaceBlockNodeSetDimension(v1097, Dimension);
      return 0;
    case 91:
      v184 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0xFFFFFFFFLL, v12 == 0);
      glpASTNodeGetLocation(*(_QWORD *)(v11 - 48), &v1286);
      glpMakeGlobalTypeQualifierNode(v184, &v1286, 0);
      v186 = v185;
      *v10 = v185;
      yyfill(v11, v1330, 0xFFFFFFFFLL, v12 == 0);
      glpGlobalTypeQualifierNodeSetQualifierList(v186, *(_QWORD *)(v11 - 48));
      return 0;
    case 92:
      v187 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0xFFFFFFFFLL, v12 == 0);
      v188 = glpMakeStringZ_0(*(const char **)(v11 - 40));
      v190 = v189;
      yyfill(v11, v1330, 0xFFFFFFFFLL, v12 == 0);
      glpMakeSourceLocation((uint64_t)v188, v190, *(_DWORD *)(v11 - 32), &v1285);
      yyfill(v11, v1330, 0xFFFFFFFFLL, v12 == 0);
      v191 = glpMakeStringZ_0(*(const char **)(v11 - 48));
      glpMakeQualifiedDeclarationNode(v187, &v1285, (uint64_t)v191, v192);
      v194 = v193;
      *v10 = v193;
      yyfill(v11, v1330, 4294967294, v12 == 0);
      glpQualifiedDeclarationNodeSetQualifiers(v194, *(_QWORD *)(v11 - 120));
      return 0;
    case 93:
      yyfill(v3, v1330, 0xFFFFFFFFLL, v12 == 0);
      *v10 = *(_QWORD *)(v11 - 48);
      v195 = (_QWORD *)glpCompilerGetAllocator(*(_QWORD *)(v8 + 784));
      v196 = *v10;
      v197 = glpCompilerGetAllocator(*(_QWORD *)(v8 + 784));
      yyfill(v11, v1330, 4294967294, v12 == 0);
      v198 = glpMakeStringZ_0(*(const char **)(v11 - 112));
      v200 = v199;
      yyfill(v11, v1330, 4294967294, v12 == 0);
      glpMakeSourceLocation((uint64_t)v198, v200, *(_DWORD *)(v11 - 104), &v1284);
      yyfill(v11, v1330, 4294967294, v12 == 0);
      v201 = glpMakeStringZ_0(*(const char **)(v11 - 120));
      glpMakeQualifiedDeclarationNode(v197, &v1284, (uint64_t)v201, v202);
      glpQualifiedDeclarationGroupNodeInsertDeclaration(v195, v196, v203, 0);
      result = glpQualifiedDeclarationGroupNodeGetDeclarationCount(*v10);
      if (!(_DWORD)result)
        return result;
      v204 = result;
      for (i = 0; i != v204; ++i)
      {
        Declaration = glpQualifiedDeclarationGroupNodeGetDeclaration(*v10, i);
        if (v12 && v1330[0] >= -2)
        {
          v207 = *(_QWORD *)(v11 + 72 * v1330[0] + 8);
          v208 = v1330[0] + 1;
          v209 = v11 - 71 + 72 * v1330[0];
          do
          {
            if (!*(_BYTE *)(v207 + 1))
              goto LABEL_380;
            *(_BYTE *)v209 = 1;
            v210 = *(_OWORD *)(v207 + 24);
            *(_QWORD *)(v209 + 39) = *(_QWORD *)(v207 + 40);
            *(_OWORD *)(v209 + 23) = v210;
            *(_OWORD *)(v209 + 47) = *(_OWORD *)(v207 + 48);
            v207 = *(_QWORD *)(v207 + 8);
            *(_QWORD *)(v209 + 7) = v207;
            --v208;
            v209 -= 72;
          }
          while (v208 > -2);
          v1330[0] = -3;
        }
        glpQualifiedDeclarationNodeSetQualifiers(Declaration, *(_QWORD *)(v11 - 192));
        result = 0;
      }
      return result;
    case 94:
      v211 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 4294967292, v12 == 0);
      v212 = glpMakeStringZ_0(*(const char **)(v11 - 256));
      v214 = v213;
      yyfill(v11, v1330, 4294967292, v12 == 0);
      glpMakeSourceLocation((uint64_t)v212, v214, *(_DWORD *)(v11 - 248), &v1283);
      glpMakeAvailabilityDeclarationNode(v211, &v1283);
      v216 = v215;
      *v10 = v215;
      yyfill(v11, v1330, 4294967294, v12 == 0);
      glpAvailabilityDeclarationNodeSetExpr(v216, *(_QWORD *)(v11 - 120));
      return 0;
    case 95:
      v217 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v218 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v220 = v219;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v218, v220, *(_DWORD *)(v11 + 40), &v1282);
      glpMakeQualifiedDeclarationGroupNode(v217, &v1282);
      *v10 = v221;
      v222 = (_QWORD *)glpCompilerGetAllocator(*(_QWORD *)(v8 + 784));
      v223 = *v10;
      v224 = glpCompilerGetAllocator(*(_QWORD *)(v8 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v225 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v227 = v226;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v225, v227, *(_DWORD *)(v11 + 40), v1281);
      yyfill(v11, v1330, 0, v12 == 0);
      v228 = glpMakeStringZ_0(*(const char **)(v11 + 24));
      v230 = v229;
      v231 = (__n128 *)v1281;
      goto LABEL_97;
    case 96:
      yyfill(v3, v1330, 4294967294, v12 == 0);
      *v10 = *(_QWORD *)(v11 - 120);
      v222 = (_QWORD *)glpCompilerGetAllocator(*(_QWORD *)(v8 + 784));
      v223 = *v10;
      v224 = glpCompilerGetAllocator(*(_QWORD *)(v8 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v232 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v234 = v233;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v232, v234, *(_DWORD *)(v11 + 40), v1280);
      yyfill(v11, v1330, 0, v12 == 0);
      v228 = glpMakeStringZ_0(*(const char **)(v11 + 24));
      v230 = v235;
      v231 = (__n128 *)v1280;
LABEL_97:
      glpMakeQualifiedDeclarationNode(v224, v231, (uint64_t)v228, v230);
      glpQualifiedDeclarationGroupNodeAddDeclaration(v222, v223, v236);
      return 0;
    case 97:
      yyfill(v3, v1330, 0xFFFFFFFFLL, v12 == 0);
      v237 = *(_QWORD *)(v11 - 48);
      *v10 = v237;
      ReturnType = glpFunctionPrototypeNodeGetReturnType(v237);
      result = glpIsQualifiedTypeNode(ReturnType);
      if (!(_DWORD)result)
        return result;
      Qualifiers = glpQualifiedTypeNodeGetQualifiers(ReturnType);
      v1279[0] = MEMORY[0x24BDAC760];
      v1279[1] = 0x40000000;
      v1279[2] = __yyuserAction_block_invoke;
      v1279[3] = &__block_descriptor_tmp_15;
      v1279[4] = v8;
      v1279[5] = v237;
      iterateQualifiers(Qualifiers, (uint64_t)v1279);
      return 0;
    case 100:
      yyfill(v3, v1330, 0xFFFFFFFFLL, v12 == 0);
      v240 = *(_QWORD *)(v11 - 48);
      goto LABEL_102;
    case 101:
      yyfill(v3, v1330, 4294967294, v12 == 0);
      v240 = *(_QWORD *)(v11 - 120);
LABEL_102:
      *v10 = v240;
      v241 = (_QWORD *)glpCompilerGetAllocator(*(_QWORD *)(v8 + 784));
      v242 = *v10;
      yyfill(v11, v1330, 0, v12 == 0);
      glpFunctionPrototypeNodeAddParameter(v241, v242, *(_QWORD *)(v11 + 24));
      return 0;
    case 102:
      v243 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 4294967294, v12 == 0);
      glpASTNodeGetLocation(*(_QWORD *)(v11 - 120), &v1278);
      yyfill(v11, v1330, 0xFFFFFFFFLL, v12 == 0);
      v244 = glpMakeStringZ_0(*(const char **)(v11 - 48));
      glpMakeFunctionPrototypeNode(v243, &v1278, (uint64_t)v244, v245);
      *v10 = v246;
      yyfill(v11, v1330, 4294967294, v12 == 0);
      IsQualifiedTypeNode = glpIsQualifiedTypeNode(*(_QWORD *)(v11 - 120));
      yyfill(v11, v1330, 4294967294, v12 == 0);
      Type = *(_QWORD *)(v11 - 120);
      if (IsQualifiedTypeNode)
        Type = glpQualifiedTypeNodeGetType(*(_QWORD *)(v11 - 120));
      yyfill(v11, v1330, 4294967294, v12 == 0);
      if (glpIsQualifiedTypeNode(*(_QWORD *)(v11 - 120)))
      {
        yyfill(v11, v1330, 4294967294, v12 == 0);
        v249 = glpQualifiedTypeNodeGetQualifiers(*(_QWORD *)(v11 - 120));
      }
      else
      {
        v249 = 0;
      }
      v1275.n128_u64[0] = 0;
      v1275.n128_u64[1] = (unint64_t)&v1275;
      v1276 = 0x2000000000;
      v1277 = 0;
      v1274[0] = MEMORY[0x24BDAC760];
      v1274[1] = 0x40000000;
      v1274[2] = __yyuserAction_block_invoke_2;
      v1274[3] = &unk_24F4B34F0;
      v1274[4] = &v1275;
      v1274[5] = v8;
      v1274[6] = Type;
      v1270 = 0;
      v1271 = &v1270;
      v1272 = 0x2000000000;
      v1273 = 0;
      v1265[0] = MEMORY[0x24BDAC760];
      v1265[1] = 0x40000000;
      v1266 = (void (*)(uint64_t, uint64_t))__yyuserAction_block_invoke_3;
      v1267 = &unk_24F4B3518;
      v1268 = &v1270;
      v1269 = v8;
      v1264[0] = MEMORY[0x24BDAC760];
      v1264[1] = 0x40000000;
      v1264[2] = __yyuserAction_block_invoke_4;
      v1264[3] = &unk_24F4B3540;
      v1264[4] = v1274;
      v1264[5] = v1265;
      iterateQualifiers(v249, (uint64_t)v1264);
      v1081 = glpCompilerGetAllocator(*(_QWORD *)(v8 + 784));
      yyfill(v11, v1330, 4294967294, v12 == 0);
      glpASTNodeGetLocation(*(_QWORD *)(v11 - 120), &v1263);
      glpMakeQualifiedTypeNode(v1081, &v1263);
      v1083 = v1082;
      glpQualifiedTypeNodeSetType(v1082, Type);
      glpQualifiedTypeNodeSetQualifiers(v1083, *(_QWORD *)(v1275.n128_u64[1] + 24));
      glpFunctionPrototypeNodeSetReturnType(*v10, v1083);
      if (!glpIsPrimitiveTypeNode(Type) || glpPrimitiveTypeNodeGetType(Type))
      {
        v1084 = glpCompilerGetAllocator(*(_QWORD *)(v8 + 784));
        yyfill(v11, v1330, 4294967294, v12 == 0);
        glpASTNodeGetLocation(*(_QWORD *)(v11 - 120), &v1262);
        KeywordQualifierNode = glpMakeKeywordQualifierNode(v1084, &v1262, 14);
        v1266((uint64_t)v1265, KeywordQualifierNode);
        qsort_b(*(void **)(v1271[3] + 8), *(unsigned int *)(v1271[3] + 4), 8uLL, &__block_literal_global_5);
        v1086 = glpCompilerGetAllocator(*(_QWORD *)(v8 + 784));
        glpASTNodeGetLocation(Type, &v1261);
        glpMakeQualifierListNode(v1086, &v1261);
        v1088 = v1087;
        if (*(_DWORD *)(v1271[3] + 4))
        {
          v1089 = 0;
          do
          {
            v1090 = (_QWORD *)glpCompilerGetAllocator(*(_QWORD *)(v8 + 784));
            glpQualifierListNodeAddQualifier(v1090, v1088, *(_QWORD *)(*(_QWORD *)(v1271[3] + 8) + 8 * v1089++));
          }
          while (v1089 < *(unsigned int *)(v1271[3] + 4));
        }
        v1091 = glpCompilerGetAllocator(*(_QWORD *)(v8 + 784));
        yyfill(v11, v1330, 4294967294, v12 == 0);
        glpASTNodeGetLocation(*(_QWORD *)(v11 - 120), &v1260);
        glpMakeQualifiedTypeNode(v1091, &v1260);
        v1093 = v1092;
        glpQualifiedTypeNodeSetType(v1092, Type);
        glpQualifiedTypeNodeSetQualifiers(v1093, v1088);
        v1094 = glpCompilerGetAllocator(*(_QWORD *)(v8 + 784));
        yyfill(v11, v1330, 4294967294, v12 == 0);
        glpASTNodeGetLocation(*(_QWORD *)(v11 - 120), &v1259);
        glpMakeParameterDeclarationNode(v1094, &v1259, (uint64_t)"$return_value", 0xE306948F0000000DLL);
        v1096 = v1095;
        glpParameterDeclarationNodeSetType(v1095, v1093);
        glpFunctionPrototypeNodeSetReturnOutParam(*v10, v1096);
      }
      _Block_object_dispose(&v1270, 8);
      _Block_object_dispose(&v1275, 8);
      return 0;
    case 103:
      v250 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0xFFFFFFFFLL, v12 == 0);
      glpASTNodeGetLocation(*(_QWORD *)(v11 - 48), &v1258);
      yyfill(v11, v1330, 0, v12 == 0);
      v251 = glpMakeStringZ_0(*(const char **)(v11 + 24));
      glpMakeParameterDeclarationNode(v250, &v1258, (uint64_t)v251, v252);
      v254 = v253;
      *v10 = v253;
      yyfill(v11, v1330, 0xFFFFFFFFLL, v12 == 0);
      v255 = *(_QWORD *)(v11 - 48);
      goto LABEL_112;
    case 104:
      v256 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 4294967294, v12 == 0);
      glpASTNodeGetLocation(*(_QWORD *)(v11 - 120), &v1257);
      yyfill(v11, v1330, 0xFFFFFFFFLL, v12 == 0);
      v257 = glpMakeStringZ_0(*(const char **)(v11 - 48));
      glpMakeParameterDeclarationNode(v256, &v1257, (uint64_t)v257, v258);
      v260 = v259;
      *v10 = v259;
      yyfill(v11, v1330, 4294967294, v12 == 0);
      v261 = *(_QWORD *)(v11 - 120);
      yyfill(v11, v1330, 0, v12 == 0);
      v262 = *(_QWORD *)(v11 + 24);
      arrayify(v261, v262);
      v263 = v260;
      v255 = v262;
      goto LABEL_113;
    case 105:
      yyfill(v3, v1330, 0, v12 == 0);
      *v10 = *(_QWORD *)(v11 + 24);
      v264 = glpCompilerGetAllocator(*(_QWORD *)(v8 + 784));
      yyfill(v11, v1330, 0xFFFFFFFFLL, v12 == 0);
      glpASTNodeGetLocation(*(_QWORD *)(v11 - 48), &v1256);
      glpMakeQualifiedTypeNode(v264, &v1256);
      v266 = v265;
      yyfill(v11, v1330, 0xFFFFFFFFLL, v12 == 0);
      glpQualifiedTypeNodeSetQualifiers(v266, *(_QWORD *)(v11 - 48));
      v267 = glpParameterDeclarationNodeGetType(*v10);
      glpQualifiedTypeNodeSetType(v266, v267);
      v263 = *v10;
      v255 = v266;
      goto LABEL_113;
    case 107:
      v268 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0xFFFFFFFFLL, v12 == 0);
      glpASTNodeGetLocation(*(_QWORD *)(v11 - 48), &v1255);
      glpMakeQualifiedTypeNode(v268, &v1255);
      v270 = v269;
      yyfill(v11, v1330, 0, v12 == 0);
      glpQualifiedTypeNodeSetType(v270, *(_QWORD *)(v11 + 24));
      yyfill(v11, v1330, 0xFFFFFFFFLL, v12 == 0);
      glpQualifiedTypeNodeSetQualifiers(v270, *(_QWORD *)(v11 - 48));
      v271 = glpCompilerGetAllocator(*(_QWORD *)(v8 + 784));
      yyfill(v11, v1330, 0xFFFFFFFFLL, v12 == 0);
      glpASTNodeGetLocation(*(_QWORD *)(v11 - 48), &v1254);
      glpMakeParameterDeclarationNode(v271, &v1254, (uint64_t)"<<unnamed>>", 0x725D7890000000BLL);
      *v10 = v263;
      v255 = v270;
      goto LABEL_113;
    case 108:
      v272 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      glpASTNodeGetLocation(*(_QWORD *)(v11 + 24), &v1253);
      glpMakeParameterDeclarationNode(v272, &v1253, (uint64_t)"<<unnamed>>", 0x725D7890000000BLL);
      v254 = v273;
      *v10 = v273;
      yyfill(v11, v1330, 0, v12 == 0);
      v255 = *(_QWORD *)(v11 + 24);
LABEL_112:
      v263 = v254;
LABEL_113:
      glpParameterDeclarationNodeSetType(v263, v255);
      return 0;
    case 110:
      v274 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      glpASTNodeGetLocation(*(_QWORD *)(v11 + 24), &v1252);
      glpMakeVariableDeclarationGroupNode(v274, &v1252);
      v276 = v275;
      *v10 = v275;
      yyfill(v11, v1330, 0, v12 == 0);
      glpVariableDeclarationGroupNodeSetBaseType(v276, *(_QWORD *)(v11 + 32));
      yyfill(v11, v1330, 0, v12 == 0);
      Kind = glpASTNodeGetKind(*(_QWORD *)(v11 + 24));
      if (Kind > 0x38)
        goto LABEL_380;
      v278 = Kind;
      result = 0;
      if (((1 << v278) & 0x170000000000004) != 0)
        return result;
      if (v278 != 46)
        goto LABEL_380;
      v279 = (_QWORD *)glpCompilerGetAllocator(*(_QWORD *)(v8 + 784));
      v280 = *v10;
      yyfill(v11, v1330, 0, v12 == 0);
      glpVariableDeclarationGroupNodeAddDeclaration(v279, v280, *(_QWORD *)(v11 + 24));
      return 0;
    case 111:
      v281 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v282 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v284 = v283;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v282, v284, *(_DWORD *)(v11 + 40), &v1251);
      yyfill(v11, v1330, 0, v12 == 0);
      v285 = glpMakeStringZ_0(*(const char **)(v11 + 24));
      glpMakeVariableDeclarationNode(v281, &v1251, (uint64_t)v285, v286, 1);
      v288 = v287;
      yyfill(v11, v1330, 4294967294, v12 == 0);
      BaseType = glpVariableDeclarationGroupNodeGetBaseType(*(_QWORD *)(v11 - 120));
      glpVariableDeclarationNodeSetType(v288, BaseType);
      v290 = (_QWORD *)glpCompilerGetAllocator(*(_QWORD *)(v8 + 784));
      yyfill(v11, v1330, 4294967294, v12 == 0);
      glpVariableDeclarationGroupNodeAddDeclaration(v290, *(_QWORD *)(v11 - 120), v288);
      goto LABEL_185;
    case 112:
      v291 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0xFFFFFFFFLL, v12 == 0);
      v292 = glpMakeStringZ_0(*(const char **)(v11 - 40));
      v294 = v293;
      yyfill(v11, v1330, 0xFFFFFFFFLL, v12 == 0);
      glpMakeSourceLocation((uint64_t)v292, v294, *(_DWORD *)(v11 - 32), &v1250);
      yyfill(v11, v1330, 0xFFFFFFFFLL, v12 == 0);
      v295 = glpMakeStringZ_0(*(const char **)(v11 - 48));
      glpMakeVariableDeclarationNode(v291, &v1250, (uint64_t)v295, v296, 1);
      v298 = v297;
      yyfill(v11, v1330, 4294967293, v12 == 0);
      v299 = glpVariableDeclarationGroupNodeGetBaseType(*(_QWORD *)(v11 - 192));
      yyfill(v11, v1330, 0, v12 == 0);
      v300 = *(_QWORD *)(v11 + 24);
      arrayify(v299, v300);
      glpVariableDeclarationNodeSetType(v298, v300);
      v301 = (_QWORD *)glpCompilerGetAllocator(*(_QWORD *)(v8 + 784));
      yyfill(v11, v1330, 4294967293, v12 == 0);
      glpVariableDeclarationGroupNodeAddDeclaration(v301, *(_QWORD *)(v11 - 192), v298);
      goto LABEL_187;
    case 113:
      v302 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 4294967293, v12 == 0);
      v303 = glpMakeStringZ_0(*(const char **)(v11 - 184));
      v305 = v304;
      yyfill(v11, v1330, 4294967293, v12 == 0);
      glpMakeSourceLocation((uint64_t)v303, v305, *(_DWORD *)(v11 - 176), &v1249);
      yyfill(v11, v1330, 4294967293, v12 == 0);
      v306 = glpMakeStringZ_0(*(const char **)(v11 - 192));
      glpMakeVariableDeclarationNode(v302, &v1249, (uint64_t)v306, v307, 1);
      v309 = v308;
      yyfill(v11, v1330, 4294967291, v12 == 0);
      v310 = (uint64_t (**)(uint64_t, __n128 *))(v11 - 336);
      v311 = glpVariableDeclarationGroupNodeGetBaseType(*(_QWORD *)(v11 - 336));
      yyfill(v11, v1330, 4294967294, v12 == 0);
      v312 = *(_QWORD *)(v11 - 120);
      arrayify(v311, v312);
      glpVariableDeclarationNodeSetType(v309, v312);
      yyfill(v11, v1330, 0, v12 == 0);
      glpVariableDeclarationNodeSetInitializer(v309, *(_QWORD *)(v11 + 24));
      v313 = (_QWORD *)glpCompilerGetAllocator(*(_QWORD *)(v8 + 784));
      yyfill(v11, v1330, 4294967291, v12 == 0);
      glpVariableDeclarationGroupNodeAddDeclaration(v313, *(_QWORD *)(v11 - 336), v309);
      v314 = v11;
      v315 = 4294967291;
      goto LABEL_122;
    case 114:
      v316 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 4294967294, v12 == 0);
      v317 = glpMakeStringZ_0(*(const char **)(v11 - 112));
      v319 = v318;
      yyfill(v11, v1330, 4294967294, v12 == 0);
      glpMakeSourceLocation((uint64_t)v317, v319, *(_DWORD *)(v11 - 104), &v1248);
      yyfill(v11, v1330, 4294967294, v12 == 0);
      v320 = glpMakeStringZ_0(*(const char **)(v11 - 120));
      glpMakeVariableDeclarationNode(v316, &v1248, (uint64_t)v320, v321, 1);
      v323 = v322;
      yyfill(v11, v1330, 4294967292, v12 == 0);
      v310 = (uint64_t (**)(uint64_t, __n128 *))(v11 - 264);
      v324 = glpVariableDeclarationGroupNodeGetBaseType(*(_QWORD *)(v11 - 264));
      glpVariableDeclarationNodeSetType(v323, v324);
      yyfill(v11, v1330, 0, v12 == 0);
      glpVariableDeclarationNodeSetInitializer(v323, *(_QWORD *)(v11 + 24));
      v325 = (_QWORD *)glpCompilerGetAllocator(*(_QWORD *)(v8 + 784));
      yyfill(v11, v1330, 4294967292, v12 == 0);
      glpVariableDeclarationGroupNodeAddDeclaration(v325, *(_QWORD *)(v11 - 264), v323);
      v314 = v11;
      v315 = 4294967292;
LABEL_122:
      yyfill(v314, v1330, v315, v12 == 0);
      result = 0;
      v24 = *v310;
      goto LABEL_279;
    case 115:
      yyfill(v3, v1330, 0, v12 == 0);
      v326 = *(_QWORD *)(v11 + 24);
      goto LABEL_348;
    case 116:
      v327 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0xFFFFFFFFLL, v12 == 0);
      glpASTNodeGetLocation(*(_QWORD *)(v11 - 48), &v1247);
      yyfill(v11, v1330, 0, v12 == 0);
      v328 = glpMakeStringZ_0(*(const char **)(v11 + 24));
      glpMakeVariableDeclarationNode(v327, &v1247, (uint64_t)v328, v329, 1);
      v331 = v330;
      *v10 = v330;
      yyfill(v11, v1330, 0xFFFFFFFFLL, v12 == 0);
      glpVariableDeclarationNodeSetType(v331, *(_QWORD *)(v11 - 48));
      yyfill(v11, v1330, 0xFFFFFFFFLL, v12 == 0);
      result = 0;
      v332 = *(_QWORD *)(v11 - 48);
      goto LABEL_349;
    case 117:
      v333 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 4294967294, v12 == 0);
      glpASTNodeGetLocation(*(_QWORD *)(v11 - 120), &v1246);
      yyfill(v11, v1330, 0xFFFFFFFFLL, v12 == 0);
      v334 = glpMakeStringZ_0(*(const char **)(v11 - 48));
      glpMakeVariableDeclarationNode(v333, &v1246, (uint64_t)v334, v335, 1);
      v337 = v336;
      *v10 = v336;
      yyfill(v11, v1330, 4294967294, v12 == 0);
      v338 = *(_QWORD *)(v11 - 120);
      yyfill(v11, v1330, 0, v12 == 0);
      v339 = *(_QWORD *)(v11 + 24);
      arrayify(v338, v339);
      glpVariableDeclarationNodeSetType(v337, v339);
      yyfill(v11, v1330, 4294967294, v12 == 0);
      result = 0;
      v332 = *(_QWORD *)(v11 - 120);
      goto LABEL_349;
    case 118:
      v340 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 4294967292, v12 == 0);
      glpASTNodeGetLocation(*(_QWORD *)(v11 - 264), &v1245);
      yyfill(v11, v1330, 4294967293, v12 == 0);
      v341 = glpMakeStringZ_0(*(const char **)(v11 - 192));
      glpMakeVariableDeclarationNode(v340, &v1245, (uint64_t)v341, v342, 1);
      v344 = v343;
      *v10 = v343;
      yyfill(v11, v1330, 4294967292, v12 == 0);
      v345 = *(_QWORD *)(v11 - 264);
      yyfill(v11, v1330, 4294967294, v12 == 0);
      v346 = *(_QWORD *)(v11 - 120);
      arrayify(v345, v346);
      glpVariableDeclarationNodeSetType(v344, v346);
      v347 = *v10;
      yyfill(v11, v1330, 0, v12 == 0);
      glpVariableDeclarationNodeSetInitializer(v347, *(_QWORD *)(v11 + 24));
      yyfill(v11, v1330, 4294967292, v12 == 0);
      result = 0;
      v332 = *(_QWORD *)(v11 - 264);
      goto LABEL_349;
    case 119:
      v348 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 4294967293, v12 == 0);
      glpASTNodeGetLocation(*(_QWORD *)(v11 - 192), &v1244);
      yyfill(v11, v1330, 4294967294, v12 == 0);
      v349 = glpMakeStringZ_0(*(const char **)(v11 - 120));
      glpMakeVariableDeclarationNode(v348, &v1244, (uint64_t)v349, v350, 1);
      v352 = v351;
      *v10 = v351;
      yyfill(v11, v1330, 4294967293, v12 == 0);
      glpVariableDeclarationNodeSetType(v352, *(_QWORD *)(v11 - 192));
      v353 = *v10;
      yyfill(v11, v1330, 0, v12 == 0);
      glpVariableDeclarationNodeSetInitializer(v353, *(_QWORD *)(v11 + 24));
      yyfill(v11, v1330, 4294967293, v12 == 0);
      result = 0;
      v332 = *(_QWORD *)(v11 - 192);
      goto LABEL_349;
    case 121:
      v354 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0xFFFFFFFFLL, v12 == 0);
      glpASTNodeGetLocation(*(_QWORD *)(v11 - 48), &v1243);
      glpMakeQualifiedTypeNode(v354, &v1243);
      v356 = v355;
      *v10 = v355;
      yyfill(v11, v1330, 0xFFFFFFFFLL, v12 == 0);
      glpQualifiedTypeNodeSetQualifiers(v356, *(_QWORD *)(v11 - 48));
      v357 = *v10;
      yyfill(v11, v1330, 0, v12 == 0);
      glpQualifiedTypeNodeSetType(v357, *(_QWORD *)(v11 + 24));
      return 0;
    case 122:
      v358 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v359 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v361 = v360;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v359, v361, *(_DWORD *)(v11 + 40), v1242);
      v362 = (__n128 *)v1242;
      v363 = v358;
      v364 = 1;
      goto LABEL_277;
    case 123:
      v365 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v366 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v368 = v367;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v366, v368, *(_DWORD *)(v11 + 40), v1241);
      v362 = (__n128 *)v1241;
      v363 = v365;
      v364 = 2;
      goto LABEL_277;
    case 124:
      v369 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v370 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v372 = v371;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v370, v372, *(_DWORD *)(v11 + 40), v1240);
      v362 = (__n128 *)v1240;
      v363 = v369;
      v364 = 3;
      goto LABEL_277;
    case 125:
      v373 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v374 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v376 = v375;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v374, v376, *(_DWORD *)(v11 + 40), v1239);
      v362 = (__n128 *)v1239;
      v363 = v373;
      v364 = 4;
      goto LABEL_277;
    case 127:
      v377 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      glpASTNodeGetLocation(*(_QWORD *)(v11 + 24), &v1238);
      glpMakeLayoutTypeNode(v377, &v1238);
      *v10 = v378;
      goto LABEL_135;
    case 128:
      yyfill(v3, v1330, 4294967294, v12 == 0);
      *v10 = *(_QWORD *)(v11 - 120);
LABEL_135:
      v379 = (_QWORD *)glpCompilerGetAllocator(*(_QWORD *)(v8 + 784));
      v380 = *v10;
      yyfill(v11, v1330, 0, v12 == 0);
      glpLayoutTypeNodeAddLayoutPair(v379, v380, *(_QWORD *)(v11 + 24));
      return 0;
    case 130:
      v381 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      glpASTNodeGetLocation(*(_QWORD *)(v11 + 24), &v1237);
      *v10 = glpMakeLayoutQualifierNode(v381, &v1237);
      goto LABEL_138;
    case 131:
      yyfill(v3, v1330, 4294967294, v12 == 0);
      *v10 = *(_QWORD *)(v11 - 120);
LABEL_138:
      v382 = (_QWORD *)glpCompilerGetAllocator(*(_QWORD *)(v8 + 784));
      v383 = *v10;
      yyfill(v11, v1330, 0, v12 == 0);
      glpLayoutQualifierNodeAddLayoutPair(v382, v383, *(_QWORD *)(v11 + 24));
      return 0;
    case 132:
      v384 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v385 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v387 = v386;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v385, v387, *(_DWORD *)(v11 + 40), v1236);
      yyfill(v11, v1330, 0, v12 == 0);
      v388 = glpMakeStringZ_0(*(const char **)(v11 + 24));
      v390 = v389;
      v391 = "<<BUG: printing string of non-string layout>>";
      v392 = (__n128 *)v1236;
      v393 = v384;
      v394 = 0;
      v395 = 0;
      goto LABEL_153;
    case 133:
      v396 = glpCompilerGetNameTable(*(_QWORD *)(v7 + 784));
      if (glpNameTableGetGLSLVersion(v396) <= 4)
      {
        v397 = glpCompilerGetNameTable(*(_QWORD *)(v8 + 784));
        if (!glpNameTableIsExtensionEnabled(v397, 0x23u))
        {
          v398 = glpCompilerGetNameTable(*(_QWORD *)(v8 + 784));
          if (!glpNameTableIsExtensionEnabled(v398, 1u))
          {
            v399 = glpCompilerGetNameTable(*(_QWORD *)(v8 + 784));
            if (!glpNameTableIsExtensionEnabled(v399, 0x15u))
            {
              v400 = glpCompilerGetNameTable(*(_QWORD *)(v8 + 784));
              if (!glpNameTableIsExtensionEnabled(v400, 0x11u))
                goto LABEL_379;
            }
          }
        }
      }
      v401 = glpCompilerGetAllocator(*(_QWORD *)(v8 + 784));
      yyfill(v11, v1330, 4294967294, v12 == 0);
      v402 = glpMakeStringZ_0(*(const char **)(v11 - 112));
      v404 = v403;
      yyfill(v11, v1330, 4294967294, v12 == 0);
      glpMakeSourceLocation((uint64_t)v402, v404, *(_DWORD *)(v11 - 104), v1235);
      yyfill(v11, v1330, 4294967294, v12 == 0);
      v405 = glpMakeStringZ_0(*(const char **)(v11 - 120));
      v407 = v406;
      yyfill(v11, v1330, 0, v12 == 0);
      v395 = *(_DWORD *)(v11 + 24);
      v391 = "<<BUG: printing string of non-string layout>>";
      v392 = (__n128 *)v1235;
      goto LABEL_152;
    case 134:
      v408 = glpCompilerGetNameTable(*(_QWORD *)(v7 + 784));
      if (glpNameTableGetGLSLVersion(v408) <= 4)
      {
        v409 = glpCompilerGetNameTable(*(_QWORD *)(v8 + 784));
        if (!glpNameTableIsExtensionEnabled(v409, 0x23u))
        {
          v410 = glpCompilerGetNameTable(*(_QWORD *)(v8 + 784));
          if (!glpNameTableIsExtensionEnabled(v410, 1u))
          {
            v411 = glpCompilerGetNameTable(*(_QWORD *)(v8 + 784));
            if (!glpNameTableIsExtensionEnabled(v411, 0x15u))
            {
              v412 = glpCompilerGetNameTable(*(_QWORD *)(v8 + 784));
              if (!glpNameTableIsExtensionEnabled(v412, 0x11u))
              {
LABEL_379:
                v112 = "integers in layouts require GLSL 140 or later";
                goto LABEL_377;
              }
            }
          }
        }
      }
      v401 = glpCompilerGetAllocator(*(_QWORD *)(v8 + 784));
      yyfill(v11, v1330, 4294967294, v12 == 0);
      v413 = glpMakeStringZ_0(*(const char **)(v11 - 112));
      v415 = v414;
      yyfill(v11, v1330, 4294967294, v12 == 0);
      glpMakeSourceLocation((uint64_t)v413, v415, *(_DWORD *)(v11 - 104), v1234);
      yyfill(v11, v1330, 4294967294, v12 == 0);
      v405 = glpMakeStringZ_0(*(const char **)(v11 - 120));
      v407 = v416;
      yyfill(v11, v1330, 0, v12 == 0);
      v395 = *(_DWORD *)(v11 + 24);
      v391 = "<<BUG: printing string of non-string layout>>";
      v392 = (__n128 *)v1234;
LABEL_152:
      v393 = v401;
      v388 = v405;
      v390 = v407;
      v394 = 1;
LABEL_153:
      v417 = 0x4FE9A940000002DLL;
      goto LABEL_154;
    case 135:
      v418 = glpCompilerGetNameTable(*(_QWORD *)(v7 + 784));
      if (!glpNameTableIsExtensionEnabled(v418, 0x23u))
      {
        v112 = "types in layouts is an unsupported extension";
        goto LABEL_377;
      }
      v419 = glpCompilerGetAllocator(*(_QWORD *)(v8 + 784));
      yyfill(v11, v1330, 4294967294, v12 == 0);
      v420 = glpMakeStringZ_0(*(const char **)(v11 - 112));
      v422 = v421;
      yyfill(v11, v1330, 4294967294, v12 == 0);
      glpMakeSourceLocation((uint64_t)v420, v422, *(_DWORD *)(v11 - 104), &v1233);
      yyfill(v11, v1330, 4294967294, v12 == 0);
      v423 = glpMakeStringZ_0(*(const char **)(v11 - 120));
      glpMakeLayoutPairNode(v419, &v1233, (uint64_t)v423, v424, 2, 0, (uint64_t)"<<BUG: printing string of non-string layout>>", 0x4FE9A940000002DLL);
      v426 = v425;
      *v10 = v425;
      yyfill(v11, v1330, 0, v12 == 0);
      glpLayoutPairNodeSetType(v426, *(_QWORD *)(v11 + 24));
      return 0;
    case 136:
      v427 = glpCompilerGetNameTable(*(_QWORD *)(v7 + 784));
      if (!glpNameTableIsExtensionEnabled(v427, 0x23u))
      {
        v112 = "identifiers in layouts is an unsupported extension";
        goto LABEL_377;
      }
      v428 = glpCompilerGetAllocator(*(_QWORD *)(v8 + 784));
      yyfill(v11, v1330, 4294967294, v12 == 0);
      v429 = glpMakeStringZ_0(*(const char **)(v11 - 112));
      v431 = v430;
      yyfill(v11, v1330, 4294967294, v12 == 0);
      glpMakeSourceLocation((uint64_t)v429, v431, *(_DWORD *)(v11 - 104), v1232);
      yyfill(v11, v1330, 4294967294, v12 == 0);
      v432 = glpMakeStringZ_0(*(const char **)(v11 - 120));
      v434 = v433;
      yyfill(v11, v1330, 0, v12 == 0);
      v391 = glpMakeStringZ_0(*(const char **)(v11 + 24));
      v417 = v435;
      v392 = (__n128 *)v1232;
      v393 = v428;
      v388 = v432;
      v390 = v434;
      v394 = 3;
      v395 = 0;
LABEL_154:
      glpMakeLayoutPairNode(v393, v392, (uint64_t)v388, v390, v394, v395, (uint64_t)v391, v417);
LABEL_278:
      v24 = (uint64_t (*)(uint64_t, __n128 *))BlockNode;
      result = 0;
      goto LABEL_279;
    case 137:
      v436 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v437 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v439 = v438;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v437, v439, *(_DWORD *)(v11 + 40), v1231);
      v362 = (__n128 *)v1231;
      v363 = v436;
      v364 = 0;
      goto LABEL_277;
    case 138:
      v440 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      glpASTNodeGetLocation(*(_QWORD *)(v11 + 24), &v1230);
      glpMakeQualifierListNode(v440, &v1230);
      *v10 = v441;
      goto LABEL_162;
    case 139:
      yyfill(v3, v1330, 0xFFFFFFFFLL, v12 == 0);
      *v10 = *(_QWORD *)(v11 - 48);
LABEL_162:
      v442 = (_QWORD *)glpCompilerGetAllocator(*(_QWORD *)(v8 + 784));
      v443 = *v10;
      yyfill(v11, v1330, 0, v12 == 0);
      glpQualifierListNodeAddQualifier(v442, v443, *(_QWORD *)(v11 + 24));
      return 0;
    case 146:
      v444 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v445 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v447 = v446;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v445, v447, *(_DWORD *)(v11 + 40), v1229);
      v362 = (__n128 *)v1229;
      v363 = v444;
      v364 = 5;
      goto LABEL_277;
    case 147:
      v448 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v449 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v451 = v450;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v449, v451, *(_DWORD *)(v11 + 40), v1228);
      v362 = (__n128 *)v1228;
      v363 = v448;
      v364 = 15;
      goto LABEL_277;
    case 148:
      v452 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v453 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v455 = v454;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v453, v455, *(_DWORD *)(v11 + 40), v1227);
      v362 = (__n128 *)v1227;
      v363 = v452;
      v364 = 13;
      goto LABEL_277;
    case 149:
      v456 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v457 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v459 = v458;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v457, v459, *(_DWORD *)(v11 + 40), v1226);
      v362 = (__n128 *)v1226;
      v363 = v456;
      v364 = 14;
      goto LABEL_277;
    case 150:
      v460 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v461 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v463 = v462;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v461, v463, *(_DWORD *)(v11 + 40), v1225);
      v362 = (__n128 *)v1225;
      v363 = v460;
      v364 = 6;
      goto LABEL_277;
    case 151:
      v464 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v465 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v467 = v466;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v465, v467, *(_DWORD *)(v11 + 40), v1224);
      v362 = (__n128 *)v1224;
      v363 = v464;
      v364 = 7;
      goto LABEL_277;
    case 152:
      v468 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v469 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v471 = v470;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v469, v471, *(_DWORD *)(v11 + 40), v1223);
      v362 = (__n128 *)v1223;
      v363 = v468;
      v364 = 8;
      goto LABEL_277;
    case 153:
      v472 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v473 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v475 = v474;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v473, v475, *(_DWORD *)(v11 + 40), v1222);
      v362 = (__n128 *)v1222;
      v363 = v472;
      v364 = 16;
      goto LABEL_277;
    case 154:
      v476 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v477 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v479 = v478;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v477, v479, *(_DWORD *)(v11 + 40), v1221);
      v362 = (__n128 *)v1221;
      v363 = v476;
      v364 = 10;
      goto LABEL_277;
    case 156:
      v480 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v481 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v483 = v482;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v481, v483, *(_DWORD *)(v11 + 40), v1220);
      v362 = (__n128 *)v1220;
      v363 = v480;
      v364 = 17;
      goto LABEL_277;
    case 157:
      v484 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v485 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v487 = v486;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v485, v487, *(_DWORD *)(v11 + 40), v1219);
      v362 = (__n128 *)v1219;
      v363 = v484;
      v364 = 18;
      goto LABEL_277;
    case 158:
      v488 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v489 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v491 = v490;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v489, v491, *(_DWORD *)(v11 + 40), v1218);
      v362 = (__n128 *)v1218;
      v363 = v488;
      v364 = 9;
      goto LABEL_277;
    case 159:
      v492 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v493 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v495 = v494;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v493, v495, *(_DWORD *)(v11 + 40), v1217);
      v362 = (__n128 *)v1217;
      v363 = v492;
      v364 = 11;
      goto LABEL_277;
    case 160:
      v496 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v497 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v499 = v498;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v497, v499, *(_DWORD *)(v11 + 40), v1216);
      v362 = (__n128 *)v1216;
      v363 = v496;
      v364 = 12;
      goto LABEL_277;
    case 161:
      v500 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v501 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v503 = v502;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v501, v503, *(_DWORD *)(v11 + 40), &v1215);
      *v10 = glpMakeSubroutineTypeListNode(v500, &v1215);
      v504 = (_QWORD *)glpCompilerGetAllocator(*(_QWORD *)(v8 + 784));
      v505 = *v10;
      v506 = glpCompilerGetAllocator(*(_QWORD *)(v8 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v507 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v509 = v508;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v507, v509, *(_DWORD *)(v11 + 40), v1214);
      yyfill(v11, v1330, 0, v12 == 0);
      v510 = glpMakeStringZ_0(*(const char **)(v11 + 24));
      v512 = v511;
      v513 = (__n128 *)v1214;
      goto LABEL_179;
    case 162:
      yyfill(v3, v1330, 4294967294, v12 == 0);
      *v10 = *(_QWORD *)(v11 - 120);
      v504 = (_QWORD *)glpCompilerGetAllocator(*(_QWORD *)(v8 + 784));
      v505 = *v10;
      v506 = glpCompilerGetAllocator(*(_QWORD *)(v8 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v514 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v516 = v515;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v514, v516, *(_DWORD *)(v11 + 40), v1213);
      yyfill(v11, v1330, 0, v12 == 0);
      v510 = glpMakeStringZ_0(*(const char **)(v11 + 24));
      v512 = v517;
      v513 = (__n128 *)v1213;
LABEL_179:
      glpMakeTypeIdentifierNode(v506, v513, (uint64_t)v510, v512);
      glpSubroutineTypeListNodeAddType(v504, v505, v518);
      return 0;
    case 164:
      v519 = glpCompilerGetNameTable(*(_QWORD *)(v7 + 784));
      if (glpNameTableGetGLSLVersion(v519) > 1)
      {
        yyfill(v11, v1330, 0xFFFFFFFFLL, v12 == 0);
        v1077 = *(_QWORD *)(v11 - 48);
        yyfill(v11, v1330, 0, v12 == 0);
        v1078 = *(_QWORD *)(v11 + 24);
        arrayify(v1077, v1078);
        result = 0;
        *v10 = v1078;
      }
      else
      {
        v112 = "Array size must appear after variable name";
LABEL_377:
        yyerror(0, v8, (char)v112);
        *v9 = 0;
        return 3;
      }
      return result;
    case 165:
      v520 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0xFFFFFFFFLL, v12 == 0);
      v521 = glpMakeStringZ_0(*(const char **)(v11 - 40));
      v523 = v522;
      yyfill(v11, v1330, 0xFFFFFFFFLL, v12 == 0);
      glpMakeSourceLocation((uint64_t)v521, v523, *(_DWORD *)(v11 - 32), &v1212);
      glpMakeArrayTypeNode(v520, &v1212);
      goto LABEL_278;
    case 166:
      v524 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 4294967294, v12 == 0);
      v525 = glpMakeStringZ_0(*(const char **)(v11 - 112));
      v527 = v526;
      yyfill(v11, v1330, 4294967294, v12 == 0);
      glpMakeSourceLocation((uint64_t)v525, v527, *(_DWORD *)(v11 - 104), &v1211);
      glpMakeArrayTypeNode(v524, &v1211);
      v529 = v528;
      *v10 = v528;
      yyfill(v11, v1330, 0xFFFFFFFFLL, v12 == 0);
      glpArrayTypeNodeSetDimension(v529, *(_QWORD *)(v11 - 48));
      return 0;
    case 167:
      v530 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0xFFFFFFFFLL, v12 == 0);
      v531 = glpMakeStringZ_0(*(const char **)(v11 - 40));
      v533 = v532;
      yyfill(v11, v1330, 0xFFFFFFFFLL, v12 == 0);
      glpMakeSourceLocation((uint64_t)v531, v533, *(_DWORD *)(v11 - 32), &v1210);
      glpMakeArrayTypeNode(v530, &v1210);
      v535 = v534;
      yyfill(v11, v1330, 4294967294, v12 == 0);
      glpArrayTypeNodeSetElementType(*(_QWORD *)(v11 - 120), v535);
LABEL_185:
      yyfill(v11, v1330, 4294967294, v12 == 0);
      result = 0;
      v24 = *(uint64_t (**)(uint64_t, __n128 *))(v11 - 120);
      goto LABEL_279;
    case 168:
      v536 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 4294967294, v12 == 0);
      v537 = glpMakeStringZ_0(*(const char **)(v11 - 112));
      v539 = v538;
      yyfill(v11, v1330, 4294967294, v12 == 0);
      glpMakeSourceLocation((uint64_t)v537, v539, *(_DWORD *)(v11 - 104), &v1209);
      glpMakeArrayTypeNode(v536, &v1209);
      v541 = v540;
      yyfill(v11, v1330, 0xFFFFFFFFLL, v12 == 0);
      glpArrayTypeNodeSetDimension(v541, *(_QWORD *)(v11 - 48));
      yyfill(v11, v1330, 4294967293, v12 == 0);
      glpArrayTypeNodeSetElementType(*(_QWORD *)(v11 - 192), v541);
LABEL_187:
      yyfill(v11, v1330, 4294967293, v12 == 0);
      result = 0;
      v24 = *(uint64_t (**)(uint64_t, __n128 *))(v11 - 192);
      goto LABEL_279;
    case 169:
      v542 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v543 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v545 = v544;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v543, v545, *(_DWORD *)(v11 + 40), v1208);
      v546 = (__n128 *)v1208;
      v547 = v542;
      v548 = 0;
      goto LABEL_270;
    case 170:
      v549 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v550 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v552 = v551;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v550, v552, *(_DWORD *)(v11 + 40), v1207);
      v546 = (__n128 *)v1207;
      v547 = v549;
      v548 = 1;
      goto LABEL_270;
    case 171:
      v553 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v554 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v556 = v555;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v554, v556, *(_DWORD *)(v11 + 40), v1206);
      v557 = (__n128 *)v1206;
      v558 = v553;
      v559 = 62;
      goto LABEL_229;
    case 172:
      v560 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v561 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v563 = v562;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v561, v563, *(_DWORD *)(v11 + 40), v1205);
      v546 = (__n128 *)v1205;
      v547 = v560;
      v548 = 5;
      goto LABEL_270;
    case 173:
      v564 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v565 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v567 = v566;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v565, v567, *(_DWORD *)(v11 + 40), v1204);
      v546 = (__n128 *)v1204;
      goto LABEL_194;
    case 174:
      v564 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0xFFFFFFFFLL, v12 == 0);
      v568 = glpMakeStringZ_0(*(const char **)(v11 - 40));
      v570 = v569;
      yyfill(v11, v1330, 0xFFFFFFFFLL, v12 == 0);
      glpMakeSourceLocation((uint64_t)v568, v570, *(_DWORD *)(v11 - 32), v1203);
      v546 = (__n128 *)v1203;
LABEL_194:
      v547 = v564;
      v548 = 36;
      goto LABEL_270;
    case 175:
      v571 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v572 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v574 = v573;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v572, v574, *(_DWORD *)(v11 + 40), v1202);
      v546 = (__n128 *)v1202;
      v547 = v571;
      v548 = 9;
      goto LABEL_270;
    case 176:
      v575 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v576 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v578 = v577;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v576, v578, *(_DWORD *)(v11 + 40), v1201);
      v546 = (__n128 *)v1201;
      v547 = v575;
      v548 = 2;
      goto LABEL_270;
    case 177:
      v579 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v580 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v582 = v581;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v580, v582, *(_DWORD *)(v11 + 40), v1200);
      v546 = (__n128 *)v1200;
      v547 = v579;
      v548 = 3;
      goto LABEL_270;
    case 178:
      v583 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v584 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v586 = v585;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v584, v586, *(_DWORD *)(v11 + 40), v1199);
      v546 = (__n128 *)v1199;
      v547 = v583;
      v548 = 4;
      goto LABEL_270;
    case 179:
      v587 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v588 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v590 = v589;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v588, v590, *(_DWORD *)(v11 + 40), v1198);
      v557 = (__n128 *)v1198;
      v558 = v587;
      v559 = 63;
      goto LABEL_229;
    case 180:
      v591 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v592 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v594 = v593;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v592, v594, *(_DWORD *)(v11 + 40), v1197);
      v557 = (__n128 *)v1197;
      v558 = v591;
      v559 = 64;
      goto LABEL_229;
    case 181:
      v595 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v596 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v598 = v597;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v596, v598, *(_DWORD *)(v11 + 40), v1196);
      v557 = (__n128 *)v1196;
      v558 = v595;
      v559 = 65;
      goto LABEL_229;
    case 182:
      v599 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v600 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v602 = v601;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v600, v602, *(_DWORD *)(v11 + 40), v1195);
      v546 = (__n128 *)v1195;
      v547 = v599;
      v548 = 10;
      goto LABEL_270;
    case 183:
      v603 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v604 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v606 = v605;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v604, v606, *(_DWORD *)(v11 + 40), v1194);
      v546 = (__n128 *)v1194;
      v547 = v603;
      v548 = 11;
      goto LABEL_270;
    case 184:
      v607 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v608 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v610 = v609;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v608, v610, *(_DWORD *)(v11 + 40), v1193);
      v546 = (__n128 *)v1193;
      v547 = v607;
      v548 = 12;
      goto LABEL_270;
    case 185:
      v611 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v612 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v614 = v613;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v612, v614, *(_DWORD *)(v11 + 40), v1192);
      v546 = (__n128 *)v1192;
      v547 = v611;
      v548 = 6;
      goto LABEL_270;
    case 186:
      v615 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v616 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v618 = v617;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v616, v618, *(_DWORD *)(v11 + 40), v1191);
      v546 = (__n128 *)v1191;
      v547 = v615;
      v548 = 7;
      goto LABEL_270;
    case 187:
      v619 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v620 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v622 = v621;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v620, v622, *(_DWORD *)(v11 + 40), v1190);
      v546 = (__n128 *)v1190;
      v547 = v619;
      v548 = 8;
      goto LABEL_270;
    case 188:
      v623 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v624 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v626 = v625;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v624, v626, *(_DWORD *)(v11 + 40), v1189);
      v546 = (__n128 *)v1189;
      v547 = v623;
      v548 = 37;
      goto LABEL_270;
    case 189:
      v627 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v628 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v630 = v629;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v628, v630, *(_DWORD *)(v11 + 40), v1188);
      v546 = (__n128 *)v1188;
      v547 = v627;
      v548 = 38;
      goto LABEL_270;
    case 190:
      v631 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v632 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v634 = v633;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v632, v634, *(_DWORD *)(v11 + 40), v1187);
      v546 = (__n128 *)v1187;
      v547 = v631;
      v548 = 39;
      goto LABEL_270;
    case 191:
      v635 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v636 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v638 = v637;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v636, v638, *(_DWORD *)(v11 + 40), v1186);
      v546 = (__n128 *)v1186;
      v547 = v635;
      v548 = 13;
      goto LABEL_270;
    case 192:
      v639 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v640 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v642 = v641;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v640, v642, *(_DWORD *)(v11 + 40), v1185);
      v546 = (__n128 *)v1185;
      v547 = v639;
      v548 = 22;
      goto LABEL_270;
    case 193:
      v643 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v644 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v646 = v645;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v644, v646, *(_DWORD *)(v11 + 40), v1184);
      v546 = (__n128 *)v1184;
      v547 = v643;
      v548 = 23;
      goto LABEL_270;
    case 194:
      v647 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v648 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v650 = v649;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v648, v650, *(_DWORD *)(v11 + 40), v1183);
      v546 = (__n128 *)v1183;
      v547 = v647;
      v548 = 24;
      goto LABEL_270;
    case 195:
      v651 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v652 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v654 = v653;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v652, v654, *(_DWORD *)(v11 + 40), v1182);
      v546 = (__n128 *)v1182;
      v547 = v651;
      v548 = 14;
      goto LABEL_270;
    case 196:
      v655 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v656 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v658 = v657;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v656, v658, *(_DWORD *)(v11 + 40), v1181);
      v546 = (__n128 *)v1181;
      v547 = v655;
      v548 = 25;
      goto LABEL_270;
    case 197:
      v659 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v660 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v662 = v661;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v660, v662, *(_DWORD *)(v11 + 40), v1180);
      v546 = (__n128 *)v1180;
      v547 = v659;
      v548 = 26;
      goto LABEL_270;
    case 198:
      v663 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v664 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v666 = v665;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v664, v666, *(_DWORD *)(v11 + 40), v1179);
      v546 = (__n128 *)v1179;
      v547 = v663;
      v548 = 27;
      goto LABEL_270;
    case 199:
      v667 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v668 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v670 = v669;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v668, v670, *(_DWORD *)(v11 + 40), v1178);
      v546 = (__n128 *)v1178;
      v547 = v667;
      v548 = 15;
      goto LABEL_270;
    case 200:
      v671 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v672 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v674 = v673;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v672, v674, *(_DWORD *)(v11 + 40), v1177);
      v557 = (__n128 *)v1177;
      v558 = v671;
      v559 = 66;
      goto LABEL_229;
    case 201:
      v675 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v676 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v678 = v677;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v676, v678, *(_DWORD *)(v11 + 40), v1176);
      v557 = (__n128 *)v1176;
      v558 = v675;
      v559 = 69;
      goto LABEL_229;
    case 202:
      v679 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v680 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v682 = v681;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v680, v682, *(_DWORD *)(v11 + 40), v1175);
      v557 = (__n128 *)v1175;
      v558 = v679;
      v559 = 70;
      goto LABEL_229;
    case 203:
      v683 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v684 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v686 = v685;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v684, v686, *(_DWORD *)(v11 + 40), v1174);
      v557 = (__n128 *)v1174;
      v558 = v683;
      v559 = 71;
      goto LABEL_229;
    case 204:
      v687 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v688 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v690 = v689;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v688, v690, *(_DWORD *)(v11 + 40), v1173);
      v557 = (__n128 *)v1173;
      v558 = v687;
      v559 = 67;
      goto LABEL_229;
    case 205:
      v691 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v692 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v694 = v693;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v692, v694, *(_DWORD *)(v11 + 40), v1172);
      v557 = (__n128 *)v1172;
      v558 = v691;
      v559 = 72;
      goto LABEL_229;
    case 206:
      v695 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v696 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v698 = v697;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v696, v698, *(_DWORD *)(v11 + 40), v1171);
      v557 = (__n128 *)v1171;
      v558 = v695;
      v559 = 73;
      goto LABEL_229;
    case 207:
      v699 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v700 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v702 = v701;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v700, v702, *(_DWORD *)(v11 + 40), v1170);
      v557 = (__n128 *)v1170;
      v558 = v699;
      v559 = 74;
      goto LABEL_229;
    case 208:
      v703 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v704 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v706 = v705;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v704, v706, *(_DWORD *)(v11 + 40), v1169);
      v557 = (__n128 *)v1169;
      v558 = v703;
      v559 = 68;
LABEL_229:
      PrimitiveTypeNode = glpMakePrimitiveTypeNode(v558, v557, v559);
      *v10 = v708;
      glpCreateDoublesTelemetry(PrimitiveTypeNode);
      return 0;
    case 209:
      v709 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v710 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v712 = v711;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v710, v712, *(_DWORD *)(v11 + 40), v1168);
      v546 = (__n128 *)v1168;
      v547 = v709;
      v548 = 16;
      goto LABEL_270;
    case 210:
      v713 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v714 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v716 = v715;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v714, v716, *(_DWORD *)(v11 + 40), v1167);
      v546 = (__n128 *)v1167;
      v547 = v713;
      v548 = 17;
      goto LABEL_270;
    case 211:
      v717 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v718 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v720 = v719;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v718, v720, *(_DWORD *)(v11 + 40), v1166);
      v546 = (__n128 *)v1166;
      v547 = v717;
      v548 = 18;
      goto LABEL_270;
    case 212:
      v721 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v722 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v724 = v723;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v722, v724, *(_DWORD *)(v11 + 40), v1165);
      v546 = (__n128 *)v1165;
      v547 = v721;
      v548 = 19;
      goto LABEL_270;
    case 213:
      v725 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v726 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v728 = v727;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v726, v728, *(_DWORD *)(v11 + 40), v1164);
      v546 = (__n128 *)v1164;
      v547 = v725;
      v548 = 20;
      goto LABEL_270;
    case 214:
      v729 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v730 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v732 = v731;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v730, v732, *(_DWORD *)(v11 + 40), v1163);
      v546 = (__n128 *)v1163;
      v547 = v729;
      v548 = 21;
      goto LABEL_270;
    case 215:
      v733 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v734 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v736 = v735;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v734, v736, *(_DWORD *)(v11 + 40), v1162);
      v546 = (__n128 *)v1162;
      v547 = v733;
      v548 = 35;
      goto LABEL_270;
    case 216:
      v737 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v738 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v740 = v739;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v738, v740, *(_DWORD *)(v11 + 40), v1161);
      v546 = (__n128 *)v1161;
      v547 = v737;
      v548 = 30;
      goto LABEL_270;
    case 217:
      v741 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v742 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v744 = v743;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v742, v744, *(_DWORD *)(v11 + 40), v1160);
      v546 = (__n128 *)v1160;
      v547 = v741;
      v548 = 31;
      goto LABEL_270;
    case 218:
      v745 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v746 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v748 = v747;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v746, v748, *(_DWORD *)(v11 + 40), v1159);
      v546 = (__n128 *)v1159;
      v547 = v745;
      v548 = 33;
      goto LABEL_270;
    case 219:
      v749 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v750 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v752 = v751;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v750, v752, *(_DWORD *)(v11 + 40), v1158);
      v546 = (__n128 *)v1158;
      v547 = v749;
      v548 = 34;
      goto LABEL_270;
    case 220:
      v753 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v754 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v756 = v755;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v754, v756, *(_DWORD *)(v11 + 40), v1157);
      v546 = (__n128 *)v1157;
      v547 = v753;
      v548 = 75;
      goto LABEL_270;
    case 221:
      v757 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v758 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v760 = v759;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v758, v760, *(_DWORD *)(v11 + 40), v1156);
      v546 = (__n128 *)v1156;
      v547 = v757;
      v548 = 76;
      goto LABEL_270;
    case 222:
      v761 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v762 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v764 = v763;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v762, v764, *(_DWORD *)(v11 + 40), v1155);
      v546 = (__n128 *)v1155;
      v547 = v761;
      v548 = 40;
      goto LABEL_270;
    case 223:
      v765 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v766 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v768 = v767;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v766, v768, *(_DWORD *)(v11 + 40), v1154);
      v546 = (__n128 *)v1154;
      v547 = v765;
      v548 = 41;
      goto LABEL_270;
    case 224:
      v769 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v770 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v772 = v771;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v770, v772, *(_DWORD *)(v11 + 40), v1153);
      v546 = (__n128 *)v1153;
      v547 = v769;
      v548 = 42;
      goto LABEL_270;
    case 225:
      v773 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v774 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v776 = v775;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v774, v776, *(_DWORD *)(v11 + 40), v1152);
      v546 = (__n128 *)v1152;
      v547 = v773;
      v548 = 43;
      goto LABEL_270;
    case 226:
      v777 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v778 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v780 = v779;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v778, v780, *(_DWORD *)(v11 + 40), v1151);
      v546 = (__n128 *)v1151;
      v547 = v777;
      v548 = 45;
      goto LABEL_270;
    case 227:
      v781 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v782 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v784 = v783;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v782, v784, *(_DWORD *)(v11 + 40), v1150);
      v546 = (__n128 *)v1150;
      v547 = v781;
      v548 = 46;
      goto LABEL_270;
    case 228:
      v785 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v786 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v788 = v787;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v786, v788, *(_DWORD *)(v11 + 40), v1149);
      v546 = (__n128 *)v1149;
      v547 = v785;
      v548 = 77;
      goto LABEL_270;
    case 229:
      v789 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v790 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v792 = v791;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v790, v792, *(_DWORD *)(v11 + 40), v1148);
      v546 = (__n128 *)v1148;
      v547 = v789;
      v548 = 48;
      goto LABEL_270;
    case 230:
      v793 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v794 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v796 = v795;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v794, v796, *(_DWORD *)(v11 + 40), v1147);
      v546 = (__n128 *)v1147;
      v547 = v793;
      v548 = 49;
      goto LABEL_270;
    case 231:
      v797 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v798 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v800 = v799;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v798, v800, *(_DWORD *)(v11 + 40), v1146);
      v546 = (__n128 *)v1146;
      v547 = v797;
      v548 = 50;
      goto LABEL_270;
    case 232:
      v801 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v802 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v804 = v803;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v802, v804, *(_DWORD *)(v11 + 40), v1145);
      v546 = (__n128 *)v1145;
      v547 = v801;
      v548 = 51;
      goto LABEL_270;
    case 233:
      v805 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v806 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v808 = v807;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v806, v808, *(_DWORD *)(v11 + 40), v1144);
      v546 = (__n128 *)v1144;
      v547 = v805;
      v548 = 53;
      goto LABEL_270;
    case 234:
      v809 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v810 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v812 = v811;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v810, v812, *(_DWORD *)(v11 + 40), v1143);
      v546 = (__n128 *)v1143;
      v547 = v809;
      v548 = 54;
      goto LABEL_270;
    case 235:
      v813 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v814 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v816 = v815;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v814, v816, *(_DWORD *)(v11 + 40), v1142);
      v546 = (__n128 *)v1142;
      v547 = v813;
      v548 = 78;
      goto LABEL_270;
    case 236:
      v817 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v818 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v820 = v819;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v818, v820, *(_DWORD *)(v11 + 40), v1141);
      v546 = (__n128 *)v1141;
      v547 = v817;
      v548 = 28;
      goto LABEL_270;
    case 237:
      v821 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v822 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v824 = v823;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v822, v824, *(_DWORD *)(v11 + 40), v1140);
      v546 = (__n128 *)v1140;
      v547 = v821;
      v548 = 29;
      goto LABEL_270;
    case 238:
      v825 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v826 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v828 = v827;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v826, v828, *(_DWORD *)(v11 + 40), v1139);
      v546 = (__n128 *)v1139;
      v547 = v825;
      v548 = 44;
      goto LABEL_270;
    case 239:
      v829 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v830 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v832 = v831;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v830, v832, *(_DWORD *)(v11 + 40), v1138);
      v546 = (__n128 *)v1138;
      v547 = v829;
      v548 = 52;
      goto LABEL_270;
    case 240:
      v833 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v834 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v836 = v835;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v834, v836, *(_DWORD *)(v11 + 40), v1137);
      v546 = (__n128 *)v1137;
      v547 = v833;
      v548 = 32;
      goto LABEL_270;
    case 241:
      v837 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v838 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v840 = v839;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v838, v840, *(_DWORD *)(v11 + 40), v1136);
      v546 = (__n128 *)v1136;
      v547 = v837;
      v548 = 47;
      goto LABEL_270;
    case 242:
      v841 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v842 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v844 = v843;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v842, v844, *(_DWORD *)(v11 + 40), v1135);
      v546 = (__n128 *)v1135;
      v547 = v841;
      v548 = 55;
      goto LABEL_270;
    case 243:
      v845 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v846 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v848 = v847;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v846, v848, *(_DWORD *)(v11 + 40), v1134);
      v546 = (__n128 *)v1134;
      v547 = v845;
      v548 = 56;
      goto LABEL_270;
    case 244:
      v849 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v850 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v852 = v851;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v850, v852, *(_DWORD *)(v11 + 40), v1133);
      v546 = (__n128 *)v1133;
      v547 = v849;
      v548 = 58;
      goto LABEL_270;
    case 245:
      v853 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v854 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v856 = v855;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v854, v856, *(_DWORD *)(v11 + 40), v1132);
      v546 = (__n128 *)v1132;
      v547 = v853;
      v548 = 60;
      goto LABEL_270;
    case 246:
      v857 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v858 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v860 = v859;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v858, v860, *(_DWORD *)(v11 + 40), v1131);
      v546 = (__n128 *)v1131;
      v547 = v857;
      v548 = 57;
      goto LABEL_270;
    case 247:
      v861 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v862 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v864 = v863;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v862, v864, *(_DWORD *)(v11 + 40), v1130);
      v546 = (__n128 *)v1130;
      v547 = v861;
      v548 = 59;
      goto LABEL_270;
    case 248:
      v865 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v866 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v868 = v867;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v866, v868, *(_DWORD *)(v11 + 40), v1129);
      v546 = (__n128 *)v1129;
      v547 = v865;
      v548 = 61;
LABEL_270:
      glpMakePrimitiveTypeNode(v547, v546, v548);
      goto LABEL_278;
    case 250:
      v869 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v870 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v872 = v871;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v870, v872, *(_DWORD *)(v11 + 40), &v1128);
      yyfill(v11, v1330, 0, v12 == 0);
      v873 = glpMakeStringZ_0(*(const char **)(v11 + 24));
      glpMakeTypeIdentifierNode(v869, &v1128, (uint64_t)v873, v874);
      goto LABEL_278;
    case 252:
      v875 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v876 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v878 = v877;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v876, v878, *(_DWORD *)(v11 + 40), v1127);
      v362 = (__n128 *)v1127;
      v363 = v875;
      v364 = 24;
      goto LABEL_277;
    case 253:
      v879 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v880 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v882 = v881;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v880, v882, *(_DWORD *)(v11 + 40), v1126);
      v362 = (__n128 *)v1126;
      v363 = v879;
      v364 = 23;
      goto LABEL_277;
    case 254:
      v883 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v884 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v886 = v885;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v884, v886, *(_DWORD *)(v11 + 40), v1125);
      v362 = (__n128 *)v1125;
      v363 = v883;
      v364 = 22;
      goto LABEL_277;
    case 255:
      v887 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v888 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v890 = v889;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v888, v890, *(_DWORD *)(v11 + 40), v1124);
      v362 = (__n128 *)v1124;
      v363 = v887;
      v364 = 20;
      goto LABEL_277;
    case 256:
      v891 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v892 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v894 = v893;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v892, v894, *(_DWORD *)(v11 + 40), v1123);
      v362 = (__n128 *)v1123;
      v363 = v891;
      v364 = 21;
LABEL_277:
      BlockNode = glpMakeKeywordQualifierNode(v363, v362, v364);
      goto LABEL_278;
    case 257:
      v895 = *(_QWORD *)(v7 + 32);
      yyfill(v3, v1330, 4294967293, v12 == 0);
      v896 = glpMakeStringZ_0(*(const char **)(v11 - 192));
      glpStringHashPut(v895, v896, v897, 1, v898);
      v899 = glpCompilerGetAllocator(*(_QWORD *)(v8 + 784));
      yyfill(v11, v1330, 4294967292, v12 == 0);
      v900 = glpMakeStringZ_0(*(const char **)(v11 - 256));
      v902 = v901;
      yyfill(v11, v1330, 4294967292, v12 == 0);
      glpMakeSourceLocation((uint64_t)v900, v902, *(_DWORD *)(v11 - 248), v1122);
      yyfill(v11, v1330, 4294967293, v12 == 0);
      v903 = glpMakeStringZ_0(*(const char **)(v11 - 192));
      v905 = v904;
      v906 = (__n128 *)v1122;
      v907 = v899;
      goto LABEL_282;
    case 258:
      v908 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 4294967293, v12 == 0);
      v909 = glpMakeStringZ_0(*(const char **)(v11 - 184));
      v911 = v910;
      yyfill(v11, v1330, 4294967293, v12 == 0);
      glpMakeSourceLocation((uint64_t)v909, v911, *(_DWORD *)(v11 - 176), v1121);
      v903 = "<<unnamed>>";
      v906 = (__n128 *)v1121;
      v907 = v908;
      v905 = 0x725D7890000000BLL;
LABEL_282:
      *v10 = glpMakeStructTypeNode(v907, v906, (uint64_t)v903, v905);
      v172 = (_QWORD *)glpCompilerGetAllocator(*(_QWORD *)(v8 + 784));
      v173 = *v10;
      yyfill(v11, v1330, 0xFFFFFFFFLL, v12 == 0);
      v174 = *(uint64_t **)(v11 - 48);
LABEL_283:
      addFields(v172, v173, v174);
      return 0;
    case 260:
      yyfill(v3, v1330, 0, v12 == 0);
      v912 = *(_QWORD *)(v11 + 24);
      do
      {
        v913 = v912;
        v912 = *(_QWORD *)(v912 + 16);
      }
      while (v912);
      yyfill(v11, v1330, 0xFFFFFFFFLL, v12 == 0);
      *(_QWORD *)(v913 + 16) = *(_QWORD *)(v11 - 48);
LABEL_12:
      yyfill(v11, v1330, 0, v12 == 0);
      result = 0;
      v24 = *(uint64_t (**)(uint64_t, __n128 *))(v11 + 24);
      goto LABEL_279;
    case 261:
      yyfill(v3, v1330, 0xFFFFFFFFLL, v12 == 0);
      v914 = *(uint64_t **)(v11 - 48);
      if (!v914)
        goto LABEL_309;
      v915 = v1330[0];
      v1099 = v11 - 71;
      break;
    case 262:
      v933 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 4294967293, v12 == 0);
      glpASTNodeGetLocation(*(_QWORD *)(v11 - 192), &v1120);
      glpMakeQualifiedTypeNode(v933, &v1120);
      v935 = v934;
      yyfill(v11, v1330, 4294967294, v12 == 0);
      glpQualifiedTypeNodeSetType(v935, *(_QWORD *)(v11 - 120));
      yyfill(v11, v1330, 4294967293, v12 == 0);
      glpQualifiedTypeNodeSetQualifiers(v935, *(_QWORD *)(v11 - 192));
      yyfill(v11, v1330, 0xFFFFFFFFLL, v12 == 0);
      v936 = *(uint64_t **)(v11 - 48);
      if (v936)
      {
        do
        {
          v937 = v936[1];
          v938 = (uint64_t *)v936[2];
          v939 = v935;
          if (v937)
          {
            glpArrayTypeNodeSetElementType(v936[1], v935);
            v939 = v937;
          }
          glpFieldDeclarationNodeSetType(*v936, v939);
          v936 = v938;
        }
        while (v938);
      }
LABEL_314:
      v931 = v11;
      v932 = v12 == 0;
      goto LABEL_315;
    case 263:
      v940 = (_QWORD *)glpCompilerPoolAlloc(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      *v940 = *(_QWORD *)(v11 + 24);
      yyfill(v11, v1330, 0, v12 == 0);
      result = 0;
      v940[1] = *(_QWORD *)(v11 + 32);
      v940[2] = 0;
      goto LABEL_318;
    case 264:
      v940 = (_QWORD *)glpCompilerPoolAlloc(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      *v940 = *(_QWORD *)(v11 + 24);
      yyfill(v11, v1330, 0, v12 == 0);
      v940[1] = *(_QWORD *)(v11 + 32);
      yyfill(v11, v1330, 4294967294, v12 == 0);
      result = 0;
      v940[2] = *(_QWORD *)(v11 - 120);
LABEL_318:
      *v10 = (uint64_t)v940;
      return result;
    case 265:
      v941 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      v942 = glpMakeStringZ_0(*(const char **)(v11 + 32));
      v944 = v943;
      yyfill(v11, v1330, 0, v12 == 0);
      glpMakeSourceLocation((uint64_t)v942, v944, *(_DWORD *)(v11 + 40), &v1119);
      yyfill(v11, v1330, 0, v12 == 0);
      v945 = glpMakeStringZ_0(*(const char **)(v11 + 24));
      glpMakeFieldDeclarationNode(v941, &v1119, (uint64_t)v945, v946);
      v948 = v947;
      result = 0;
      goto LABEL_346;
    case 266:
      v949 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0xFFFFFFFFLL, v12 == 0);
      v950 = glpMakeStringZ_0(*(const char **)(v11 - 40));
      v952 = v951;
      yyfill(v11, v1330, 0xFFFFFFFFLL, v12 == 0);
      glpMakeSourceLocation((uint64_t)v950, v952, *(_DWORD *)(v11 - 32), &v1118);
      yyfill(v11, v1330, 0xFFFFFFFFLL, v12 == 0);
      v953 = glpMakeStringZ_0(*(const char **)(v11 - 48));
      glpMakeFieldDeclarationNode(v949, &v1118, (uint64_t)v953, v954);
      *v10 = v955;
      yyfill(v11, v1330, 0, v12 == 0);
      v956 = *(_QWORD *)(v11 + 24);
      arrayify(0, v956);
      result = 0;
      v10[1] = v956;
      return result;
    case 268:
      v957 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0, v12 == 0);
      glpASTNodeGetLocation(*(_QWORD *)(v11 + 24), &v1117);
      ExpressionStatementNode = glpMakeExpressionStatementNode(v957, &v1117);
      *v10 = ExpressionStatementNode;
      yyfill(v11, v1330, 0, v12 == 0);
      v959 = *(_QWORD *)(v11 + 24);
      goto LABEL_329;
    case 278:
      v960 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0xFFFFFFFFLL, v12 == 0);
      v961 = glpMakeStringZ_0(*(const char **)(v11 - 40));
      v963 = v962;
      yyfill(v11, v1330, 0xFFFFFFFFLL, v12 == 0);
      glpMakeSourceLocation((uint64_t)v961, v963, *(_DWORD *)(v11 - 32), v1116);
      v964 = (__n128 *)v1116;
      v965 = v960;
      v966 = 1;
      goto LABEL_338;
    case 279:
      yyfill(v3, v1330, 0xFFFFFFFFLL, v12 == 0);
      v967 = *(_QWORD *)(v11 - 48);
      *v10 = v967;
      glpBlockNodeSetNeedsNewScope(v967, 1);
      return 0;
    case 282:
      v968 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0xFFFFFFFFLL, v12 == 0);
      v969 = glpMakeStringZ_0(*(const char **)(v11 - 40));
      v971 = v970;
      yyfill(v11, v1330, 0xFFFFFFFFLL, v12 == 0);
      glpMakeSourceLocation((uint64_t)v969, v971, *(_DWORD *)(v11 - 32), v1115);
      v964 = (__n128 *)v1115;
      v965 = v968;
      goto LABEL_337;
    case 284:
      v972 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      v1275.n128_u64[0] = (unint64_t)"-1";
      v1275.n128_u64[1] = 0xEDA00000002;
      v1276 = 0xFFFFFFFFLL;
      *v10 = glpMakeBlockNode(v972, &v1275, 0);
      goto LABEL_327;
    case 285:
      yyfill(v3, v1330, 0xFFFFFFFFLL, v12 == 0);
      *v10 = *(_QWORD *)(v11 - 48);
LABEL_327:
      v973 = (_QWORD *)glpCompilerGetAllocator(*(_QWORD *)(v8 + 784));
      v974 = *v10;
      goto LABEL_332;
    case 287:
      v975 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0xFFFFFFFFLL, v12 == 0);
      glpASTNodeGetLocation(*(_QWORD *)(v11 - 48), &v1114);
      ExpressionStatementNode = glpMakeExpressionStatementNode(v975, &v1114);
      *v10 = ExpressionStatementNode;
      yyfill(v11, v1330, 0xFFFFFFFFLL, v12 == 0);
      v959 = *(_QWORD *)(v11 - 48);
LABEL_329:
      glpExpressionStatementNodeSetExpr(ExpressionStatementNode, v959);
      return 0;
    case 288:
      v976 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 4294967292, v12 == 0);
      v977 = glpMakeStringZ_0(*(const char **)(v11 - 256));
      v979 = v978;
      yyfill(v11, v1330, 4294967292, v12 == 0);
      glpMakeSourceLocation((uint64_t)v977, v979, *(_DWORD *)(v11 - 248), &v1113);
      IfStatementNode = glpMakeIfStatementNode(v976, &v1113);
      *v10 = IfStatementNode;
      yyfill(v11, v1330, 4294967294, v12 == 0);
      glpIfStatementNodeSetCond(IfStatementNode, *(_QWORD *)(v11 - 120));
      v981 = *v10;
      yyfill(v11, v1330, 0, v12 == 0);
      glpIfStatementNodeSetIfStatement(v981, *(_QWORD *)(v11 + 24));
      v982 = *v10;
      yyfill(v11, v1330, 0, v12 == 0);
      glpIfStatementNodeSetElseStatement(v982, *(_QWORD *)(v11 + 32));
      return 0;
    case 289:
      v983 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      v1275.n128_u64[0] = (unint64_t)"-1";
      v1275.n128_u64[1] = 0xEDA00000002;
      v1276 = 0xFFFFFFFFLL;
      *v10 = glpMakeBlockNode(v983, &v1275, 1);
      v984 = (_QWORD *)glpCompilerGetAllocator(*(_QWORD *)(v8 + 784));
      v985 = *v10;
      yyfill(v11, v1330, 4294967294, v12 == 0);
      glpBlockNodeAddStatement(v984, v985, *(_QWORD *)(v11 - 120));
      v986 = glpCompilerGetAllocator(*(_QWORD *)(v8 + 784));
      v1275.n128_u64[0] = (unint64_t)"-1";
      v1275.n128_u64[1] = 0xEDA00000002;
      v1276 = 0xFFFFFFFFLL;
      v10[1] = glpMakeBlockNode(v986, &v1275, 1);
      v973 = (_QWORD *)glpCompilerGetAllocator(*(_QWORD *)(v8 + 784));
      v974 = v10[1];
LABEL_332:
      yyfill(v11, v1330, 0, v12 == 0);
      glpBlockNodeAddStatement(v973, v974, *(_QWORD *)(v11 + 24));
      return 0;
    case 290:
      v987 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      v1275.n128_u64[0] = (unint64_t)"-1";
      v1275.n128_u64[1] = 0xEDA00000002;
      v1276 = 0xFFFFFFFFLL;
      *v10 = glpMakeBlockNode(v987, &v1275, 1);
      v988 = (_QWORD *)glpCompilerGetAllocator(*(_QWORD *)(v8 + 784));
      v989 = *v10;
      yyfill(v11, v1330, 0, v12 == 0);
      glpBlockNodeAddStatement(v988, v989, *(_QWORD *)(v11 + 24));
      result = 0;
      v10[1] = 0;
      return result;
    case 292:
      v990 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 4294967293, v12 == 0);
      glpASTNodeGetLocation(*(_QWORD *)(v11 - 192), &v1112);
      yyfill(v11, v1330, 4294967294, v12 == 0);
      v991 = glpMakeStringZ_0(*(const char **)(v11 - 120));
      glpMakeVariableDeclarationNode(v990, &v1112, (uint64_t)v991, v992, 1);
      v994 = v993;
      *v10 = v993;
      yyfill(v11, v1330, 4294967293, v12 == 0);
      glpVariableDeclarationNodeSetType(v994, *(_QWORD *)(v11 - 192));
      v995 = *v10;
      yyfill(v11, v1330, 0, v12 == 0);
      glpVariableDeclarationNodeSetInitializer(v995, *(_QWORD *)(v11 + 24));
      return 0;
    case 293:
      v996 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 4294967290, v12 == 0);
      v997 = glpMakeStringZ_0(*(const char **)(v11 - 400));
      v999 = v998;
      yyfill(v11, v1330, 4294967290, v12 == 0);
      glpMakeSourceLocation((uint64_t)v997, v999, *(_DWORD *)(v11 - 392), &v1111);
      SwitchStatementNode = glpMakeSwitchStatementNode(v996, &v1111);
      *v10 = SwitchStatementNode;
      yyfill(v11, v1330, 4294967292, v12 == 0);
      glpSwitchStatementNodeSetExpr(SwitchStatementNode, *(_QWORD *)(v11 - 264));
      v1001 = *v10;
      yyfill(v11, v1330, 0xFFFFFFFFLL, v12 == 0);
      glpSwitchStatementNodeSetBody(v1001, *(_QWORD *)(v11 - 48));
      return 0;
    case 294:
      v965 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      v1275.n128_u64[0] = (unint64_t)"-1";
      v1275.n128_u64[1] = 0xEDA00000002;
      v1276 = 0xFFFFFFFFLL;
      v964 = &v1275;
LABEL_337:
      v966 = 0;
LABEL_338:
      BlockNode = glpMakeBlockNode(v965, v964, v966);
      goto LABEL_278;
    case 296:
      v1002 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 4294967294, v12 == 0);
      v1003 = glpMakeStringZ_0(*(const char **)(v11 - 112));
      v1005 = v1004;
      yyfill(v11, v1330, 4294967294, v12 == 0);
      glpMakeSourceLocation((uint64_t)v1003, v1005, *(_DWORD *)(v11 - 104), &v1110);
      CaseStatementNode = glpMakeCaseStatementNode(v1002, &v1110, 1);
      *v10 = CaseStatementNode;
      yyfill(v11, v1330, 0xFFFFFFFFLL, v12 == 0);
      glpCaseStatementNodeSetConstValue(CaseStatementNode, *(_QWORD *)(v11 - 48));
      return 0;
    case 297:
      v1007 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0xFFFFFFFFLL, v12 == 0);
      v1008 = glpMakeStringZ_0(*(const char **)(v11 - 40));
      v1010 = v1009;
      yyfill(v11, v1330, 0xFFFFFFFFLL, v12 == 0);
      glpMakeSourceLocation((uint64_t)v1008, v1010, *(_DWORD *)(v11 - 32), &v1109);
      BlockNode = glpMakeDefaultStatementNode(v1007, &v1109, 1);
      goto LABEL_278;
    case 298:
      v1011 = (_QWORD *)glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 4294967292, v12 == 0);
      v1012 = glpMakeStringZ_0(*(const char **)(v11 - 256));
      v1014 = v1013;
      yyfill(v11, v1330, 4294967292, v12 == 0);
      glpMakeSourceLocation((uint64_t)v1012, v1014, *(_DWORD *)(v11 - 248), &v1108);
      yyfill(v11, v1330, 4294967294, v12 == 0);
      v1015 = *(_QWORD *)(v11 - 120);
      yyfill(v11, v1330, 0, v12 == 0);
      BlockNode = glpMakeWhileFragment(v1011, &v1108, v1015, *(_QWORD *)(v11 + 24));
      goto LABEL_278;
    case 299:
      v1016 = (_QWORD *)glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 4294967290, v12 == 0);
      v1017 = glpMakeStringZ_0(*(const char **)(v11 - 400));
      v1019 = v1018;
      yyfill(v11, v1330, 4294967290, v12 == 0);
      glpMakeSourceLocation((uint64_t)v1017, v1019, *(_DWORD *)(v11 - 392), &v1107);
      yyfill(v11, v1330, 4294967291, v12 == 0);
      v1020 = *(_QWORD *)(v11 - 336);
      yyfill(v11, v1330, 4294967294, v12 == 0);
      BlockNode = glpMakeDoWhileFragment(v1016, &v1107, v1020, *(_QWORD *)(v11 - 120));
      goto LABEL_278;
    case 300:
      v1021 = (_QWORD *)glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 4294967291, v12 == 0);
      v1022 = glpMakeStringZ_0(*(const char **)(v11 - 328));
      v1024 = v1023;
      yyfill(v11, v1330, 4294967291, v12 == 0);
      glpMakeSourceLocation((uint64_t)v1022, v1024, *(_DWORD *)(v11 - 320), &v1106);
      yyfill(v11, v1330, 4294967293, v12 == 0);
      v1025 = *(_QWORD *)(v11 - 192);
      yyfill(v11, v1330, 4294967294, v12 == 0);
      v1026 = *(_QWORD *)(v11 - 120);
      yyfill(v11, v1330, 0, v12 == 0);
      v1027 = *(_QWORD *)(v11 + 24);
      yyfill(v11, v1330, 4294967294, v12 == 0);
      BlockNode = glpMakeForFragment(v1021, &v1106, v1025, v1026, v1027, *(_QWORD *)(v11 - 112));
      goto LABEL_278;
    case 304:
      v1028 = (unsigned int *)glpGetPrimitiveType(9u);
      v1029 = glpCompilerGetAllocator(*(_QWORD *)(v8 + 784));
      v1030 = *(_QWORD *)(v8 + 784);
      v1031 = glpCompilerGetAllocator(v1030);
      v1037 = glpMakeMutableValue(v1031, v1028, 1, v1032, v1033, v1034, v1035, v1036, 1);
      v45 = glpCompilerRemapValue(v1030, v1028, v1037);
      v1275.n128_u64[0] = (unint64_t)"-1";
      v1275.n128_u64[1] = 0xEDA00000002;
      v1276 = 0xFFFFFFFFLL;
      v46 = &v1275;
      v91 = v1029;
      v92 = (uint64_t)v1028;
LABEL_21:
      glpMakeConstantNode(v91, v46, v92, v45);
      goto LABEL_278;
    case 305:
      yyfill(v3, v1330, 0xFFFFFFFFLL, v12 == 0);
      result = 0;
      v948 = *(_QWORD *)(v11 - 48);
LABEL_346:
      *v10 = v948;
      v10[1] = 0;
      return result;
    case 306:
      yyfill(v3, v1330, 4294967294, v12 == 0);
      v326 = *(_QWORD *)(v11 - 120);
LABEL_348:
      *v10 = v326;
      yyfill(v11, v1330, 0, v12 == 0);
      result = 0;
      v332 = *(_QWORD *)(v11 + 24);
LABEL_349:
      v10[1] = v332;
      return result;
    case 307:
      v1038 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0xFFFFFFFFLL, v12 == 0);
      v1039 = glpMakeStringZ_0(*(const char **)(v11 - 40));
      v1041 = v1040;
      yyfill(v11, v1330, 0xFFFFFFFFLL, v12 == 0);
      glpMakeSourceLocation((uint64_t)v1039, v1041, *(_DWORD *)(v11 - 32), &v1105);
      BlockNode = glpMakeContinueStatementNode(v1038, &v1105);
      goto LABEL_278;
    case 308:
      v1042 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0xFFFFFFFFLL, v12 == 0);
      v1043 = glpMakeStringZ_0(*(const char **)(v11 - 40));
      v1045 = v1044;
      yyfill(v11, v1330, 0xFFFFFFFFLL, v12 == 0);
      glpMakeSourceLocation((uint64_t)v1043, v1045, *(_DWORD *)(v11 - 32), &v1104);
      BlockNode = glpMakeBreakStatementNode(v1042, &v1104);
      goto LABEL_278;
    case 309:
      v1046 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0xFFFFFFFFLL, v12 == 0);
      v1047 = glpMakeStringZ_0(*(const char **)(v11 - 40));
      v1049 = v1048;
      yyfill(v11, v1330, 0xFFFFFFFFLL, v12 == 0);
      glpMakeSourceLocation((uint64_t)v1047, v1049, *(_DWORD *)(v11 - 32), &v1103);
      BlockNode = glpMakeReturnStatementNode(v1046, &v1103);
      goto LABEL_278;
    case 310:
      v1050 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 4294967294, v12 == 0);
      v1051 = glpMakeStringZ_0(*(const char **)(v11 - 112));
      v1053 = v1052;
      yyfill(v11, v1330, 4294967294, v12 == 0);
      glpMakeSourceLocation((uint64_t)v1051, v1053, *(_DWORD *)(v11 - 104), &v1102);
      ReturnStatementNode = glpMakeReturnStatementNode(v1050, &v1102);
      *v10 = ReturnStatementNode;
      yyfill(v11, v1330, 0xFFFFFFFFLL, v12 == 0);
      glpReturnStatementNodeSetExpr(ReturnStatementNode, *(_QWORD *)(v11 - 48));
      return 0;
    case 311:
      v1055 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0xFFFFFFFFLL, v12 == 0);
      v1056 = glpMakeStringZ_0(*(const char **)(v11 - 40));
      v1058 = v1057;
      yyfill(v11, v1330, 0xFFFFFFFFLL, v12 == 0);
      glpMakeSourceLocation((uint64_t)v1056, v1058, *(_DWORD *)(v11 - 32), &v1101);
      BlockNode = glpMakeDiscardStatementNode(v1055, &v1101);
      goto LABEL_278;
    case 312:
      *v4 = glpCompilerGetTopLevelNode(*(_QWORD *)(v7 + 784));
      v1059 = (_QWORD *)glpCompilerGetAllocator(*(_QWORD *)(v8 + 784));
      v1060 = *v10;
      yyfill(v11, v1330, 0, v12 == 0);
      glpTopLevelNodeAddDef(v1059, v1060, *(_QWORD *)(v11 + 24));
      result = 0;
      *(_QWORD *)(v8 + 792) = *v10;
      return result;
    case 313:
      yyfill(v3, v1330, 0xFFFFFFFFLL, v12 == 0);
      *v10 = *(_QWORD *)(v11 - 48);
      v1061 = (_QWORD *)glpCompilerGetAllocator(*(_QWORD *)(v8 + 784));
      v1062 = *v10;
      yyfill(v11, v1330, 0, v12 == 0);
      glpTopLevelNodeAddDef(v1061, v1062, *(_QWORD *)(v11 + 24));
      return 0;
    case 316:
      v1063 = glpCompilerGetAllocator(*(_QWORD *)(v7 + 784));
      yyfill(v11, v1330, 0xFFFFFFFFLL, v12 == 0);
      glpASTNodeGetLocation(*(_QWORD *)(v11 - 48), &v1100);
      glpMakeFunctionDefinitionNode(v1063, &v1100);
      v1065 = v1064;
      *v10 = v1064;
      yyfill(v11, v1330, 0xFFFFFFFFLL, v12 == 0);
      glpFunctionDefinitionNodeSetPrototype(v1065, *(_QWORD *)(v11 - 48));
      v1066 = *v10;
      yyfill(v11, v1330, 0, v12 == 0);
      glpFunctionDefinitionNodeSetBody(v1066, *(_QWORD *)(v11 + 24));
      return 0;
    default:
      return 0;
  }
  do
  {
    v916 = v914;
    v917 = v914;
    v918 = v914[1];
    v914 = (uint64_t *)v914[2];
    v919 = v917 + 1;
    if (v918)
    {
      for (j = v918; ; j = v922)
      {
        ElementType = glpArrayTypeNodeGetElementType(j);
        if (!ElementType)
          break;
        v922 = ElementType;
        if (!glpIsArrayTypeNode(ElementType))
          break;
        v918 = v922;
      }
      if (v12 && v915 >= -1)
      {
        v923 = *(_QWORD *)(v11 + 72 * v915 + 8);
        v924 = v915 + 1;
        v925 = v1099 + 72 * v915;
        do
        {
          if (!*(_BYTE *)(v923 + 1))
            goto LABEL_380;
          *(_BYTE *)v925 = 1;
          v926 = *(_OWORD *)(v923 + 24);
          *(_QWORD *)(v925 + 39) = *(_QWORD *)(v923 + 40);
          *(_OWORD *)(v925 + 23) = v926;
          *(_OWORD *)(v925 + 47) = *(_OWORD *)(v923 + 48);
          v923 = *(_QWORD *)(v923 + 8);
          *(_QWORD *)(v925 + 7) = v923;
          --v924;
          v925 -= 72;
        }
        while ((v924 & 0x8000000000000000) == 0);
        v915 = -2;
        v1330[0] = -2;
      }
      glpArrayTypeNodeSetElementType(v918, *(_QWORD *)(v11 - 120));
    }
    else
    {
      if (v12 && v915 >= -1)
      {
        v927 = *(_QWORD *)(v11 + 72 * v915 + 8);
        v928 = v915 + 1;
        v929 = v1099 + 72 * v915;
        do
        {
          if (!*(_BYTE *)(v927 + 1))
            goto LABEL_380;
          *(_BYTE *)v929 = 1;
          v930 = *(_OWORD *)(v927 + 24);
          *(_QWORD *)(v929 + 39) = *(_QWORD *)(v927 + 40);
          *(_OWORD *)(v929 + 23) = v930;
          *(_OWORD *)(v929 + 47) = *(_OWORD *)(v927 + 48);
          v927 = *(_QWORD *)(v927 + 8);
          *(_QWORD *)(v929 + 7) = v927;
          --v928;
          v929 -= 72;
        }
        while ((v928 & 0x8000000000000000) == 0);
        v915 = -2;
        v1330[0] = -2;
      }
      v919 = (uint64_t *)(v11 - 120);
    }
    glpFieldDeclarationNodeSetType(*v916, *v919);
  }
  while (v914);
LABEL_309:
  v931 = v11;
  v932 = v12 == 0;
LABEL_315:
  yyfill(v931, v1330, 0xFFFFFFFFLL, v932);
  result = 0;
  v24 = *(uint64_t (**)(uint64_t, __n128 *))(v11 - 48);
LABEL_279:
  *v10 = (uint64_t)v24;
  return result;
}

uint64_t yyfill(uint64_t a1, int *a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  if (!a4)
  {
    v4 = *a2;
    if ((int)v4 > (int)a3)
    {
      v5 = a1 + 72 * (int)v4;
      v6 = *(_QWORD *)(v5 + 8);
      v7 = v5 - 71;
      do
      {
        if (!*(_BYTE *)(v6 + 1))
          abort();
        --v4;
        *(_BYTE *)v7 = 1;
        v8 = *(_OWORD *)(v6 + 24);
        *(_QWORD *)(v7 + 39) = *(_QWORD *)(v6 + 40);
        *(_OWORD *)(v7 + 23) = v8;
        *(_OWORD *)(v7 + 47) = *(_OWORD *)(v6 + 48);
        v6 = *(_QWORD *)(v6 + 8);
        *(_QWORD *)(v7 + 7) = v6;
        v7 -= 72;
      }
      while (v4 > (int)a3);
      *a2 = a3;
    }
  }
  return a3;
}

const char *glpMakeStringZ_0(const char *a1)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;

  v2 = strlen(a1);
  if (v2 >> 5 < v2)
  {
    v3 = v2;
    v4 = v2;
    do
    {
      v4 ^= 32 * v4 + (v4 >> 2) + a1[v3 - 1];
      v3 += ~(v2 >> 5);
    }
    while (v3 > v2 >> 5);
  }
  return a1;
}

void *addFields(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  if (a3[2])
    addFields(a1, a2);
  return glpStructureNodeAddField(a1, a2, *a3);
}

uint64_t iterateQualifiers(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int Kind;
  int v5;
  unsigned int i;
  uint64_t Qualifier;

  if (result)
  {
    v3 = result;
    Kind = glpASTNodeGetKind(result);
    if ((Kind - 59) >= 3)
    {
      if (Kind != 62)
        abort();
      result = glpQualifierListNodeGetQualifierCount(v3);
      if ((_DWORD)result)
      {
        v5 = result;
        for (i = 0; i != v5; ++i)
        {
          Qualifier = glpQualifierListNodeGetQualifier(v3, i);
          result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, Qualifier);
        }
      }
    }
    else
    {
      return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, v3);
    }
  }
  return result;
}

uint64_t __yyuserAction_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  const char *Name;
  uint64_t v8;
  double v9;

  result = glpIsKeywordQualifierNode(a2);
  if ((_DWORD)result)
  {
    result = glpKeywordQualifierNodeGetQualifier(a2);
    if ((_DWORD)result == 10)
    {
      v5 = *(_QWORD *)(a1 + 40);
      v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32);
      Name = (const char *)glpFunctionPrototypeNodeGetName(v5);
      return glpStringHashPut(v6, Name, v8, 1, v9);
    }
  }
  return result;
}

void *__yyuserAction_block_invoke_2(_QWORD *a1, uint64_t a2)
{
  uint64_t Allocator;
  uint64_t v5;
  _QWORD *v6;
  __n128 v8;

  if (!*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24))
  {
    Allocator = glpCompilerGetAllocator(*(_QWORD *)(a1[5] + 784));
    glpASTNodeGetLocation(a1[6], &v8);
    glpMakeQualifierListNode(Allocator, &v8);
    *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = v5;
  }
  v6 = (_QWORD *)glpCompilerGetAllocator(*(_QWORD *)(a1[5] + 784));
  return glpQualifierListNodeAddQualifier(v6, *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24), a2);
}

void *__yyuserAction_block_invoke_3(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t Allocator;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  void *result;
  uint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  if (!v4)
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = glpCompilerPoolAlloc(*(_QWORD *)(*(_QWORD *)(a1 + 40)
                                                                                                 + 784));
    Allocator = glpCompilerGetAllocator(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 784));
    **(_DWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 4;
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 4) = 0;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 8) = (*(uint64_t (**)(_QWORD, uint64_t, const char *))(Allocator + 8))(*(_QWORD *)Allocator, 32, "Vector Storage (GLPASTNode *)");
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  v6 = *(unsigned int *)(v4 + 4);
  v7 = *(_DWORD *)(v4 + 4);
  if ((v6 + 1) > *(_DWORD *)v4)
  {
    if (*(int *)v4 <= 1)
      v8 = 1;
    else
      v8 = *(_DWORD *)v4;
    v9 = 2 * v8;
    if (v9 <= (int)v6 + 1)
      v10 = v6 + 1;
    else
      v10 = v9;
    v11 = (_QWORD *)glpCompilerGetAllocator(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 784));
    v12 = (void *)((uint64_t (*)(_QWORD, uint64_t, const char *))v11[1])(*v11, 8 * v10, "Vector Storage (GLPASTNode *, growth)");
    v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    memcpy(v12, *(const void **)(v13 + 8), 8 * *(unsigned int *)(v13 + 4));
    ((void (*)(_QWORD, _QWORD))v11[3])(*v11, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 8));
    **(_DWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v10;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 8) = v12;
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v7 = *(_DWORD *)(v4 + 4);
  }
  result = memmove((void *)(*(_QWORD *)(v4 + 8) + 8 * v6 + 8), (const void *)(*(_QWORD *)(v4 + 8) + 8 * v6), 8 * (v7 - v6));
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 8) + 8 * v6) = a2;
  v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  ++*(_DWORD *)(v15 + 4);
  return result;
}

_QWORD *__yyuserAction_block_invoke_4(uint64_t a1, uint64_t a2)
{
  int Kind;
  _QWORD *v5;
  _QWORD *result;
  int Qualifier;

  Kind = glpASTNodeGetKind(a2);
  if ((Kind - 60) < 2)
  {
    v5 = (_QWORD *)(a1 + 32);
    return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v5 + 16))(v5);
  }
  if (Kind != 59)
    abort();
  Qualifier = glpKeywordQualifierNodeGetQualifier(a2);
  result = (_QWORD *)(*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  if (Qualifier != 10)
  {
    v5 = (_QWORD *)(a1 + 40);
    return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v5 + 16))(v5);
  }
  return result;
}

uint64_t __yyuserAction_block_invoke_5(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  int v4;

  v3 = *a3;
  v4 = glpQualifierKindOfNode(*a2);
  return v4 - glpQualifierKindOfNode(v3);
}

uint64_t arrayify(uint64_t a1, uint64_t a2)
{
  uint64_t ElementType;

  ElementType = a2;
  if (glpArrayTypeNodeGetElementType(a2))
  {
    ElementType = a2;
    do
      ElementType = glpArrayTypeNodeGetElementType(ElementType);
    while (glpArrayTypeNodeGetElementType(ElementType));
  }
  glpArrayTypeNodeSetElementType(ElementType, a1);
  return a2;
}

uint64_t yyresolveStates(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  __n128 v8;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  unint64_t v24;
  unint64_t v25;
  BOOL v26;
  unint64_t *v27;
  unint64_t v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v32;
  uint64_t v33;
  uint64_t *v34;
  int v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  if (a2 < 1)
    return 0;
  if (!*(_QWORD *)(a1 + 8))
    abort();
  v7 = ((uint64_t (*)(void))yyresolveStates)();
  if (!(_DWORD)v7)
  {
    if (*(_BYTE *)(a1 + 1))
      return 0;
    v10 = (_QWORD *)(a1 + 24);
    v11 = *(_QWORD *)(a1 + 24);
    v13 = (_QWORD *)(v11 + 64);
    v12 = *(_QWORD *)(v11 + 64);
    if (v12)
    {
      while (1)
      {
        v14 = *(int *)(v11 + 4);
        v15 = *(int *)(v12 + 4);
        if ((_DWORD)v14 != (_DWORD)v15)
          goto LABEL_34;
        v16 = yyr2[v14];
        if (yyr2[v14])
        {
          v17 = v16 + 1;
          v18 = (uint64_t *)(v11 + 8);
          v19 = (uint64_t *)(v12 + 8);
          while (1)
          {
            v20 = *v19;
            v21 = *v18;
            if (*(_QWORD *)(v21 + 16) != *(_QWORD *)(v20 + 16))
              break;
            v18 = (uint64_t *)(v21 + 8);
            v19 = (uint64_t *)(v20 + 8);
            if (--v17 <= 1)
            {
              v22 = *(_QWORD *)(v11 + 8);
              for (i = *(_QWORD *)(v12 + 8); v22 != i; i = *(_QWORD *)(i + 8))
              {
                if (*(_BYTE *)(v22 + 1))
                {
                  *(_BYTE *)(i + 1) = 1;
                  v8 = *(__n128 *)(v22 + 24);
                  *(_QWORD *)(i + 40) = *(_QWORD *)(v22 + 40);
                  *(__n128 *)(i + 24) = v8;
                }
                else if (*(_BYTE *)(i + 1))
                {
                  *(_BYTE *)(v22 + 1) = 1;
                  v8 = *(__n128 *)(i + 24);
                  *(_QWORD *)(v22 + 40) = *(_QWORD *)(i + 40);
                  *(__n128 *)(v22 + 24) = v8;
                }
                else
                {
                  v24 = *(_QWORD *)(v22 + 24);
                  v25 = *(_QWORD *)(i + 24);
                  if (v25)
                    v26 = v25 == v24;
                  else
                    v26 = 1;
                  if (!v26)
                  {
                    v27 = (unint64_t *)(v22 + 24);
                    while (v24)
                    {
                      if (v24 < v25)
                      {
                        *v27 = v25;
                        v28 = *(_QWORD *)(v25 + 64);
                        *(_QWORD *)(v25 + 64) = v24;
                        v24 = *v27;
                        v25 = v28;
                      }
                      if (v25)
                      {
                        v27 = (unint64_t *)(v24 + 64);
                        v24 = *(_QWORD *)(v24 + 64);
                        if (v25 != v24)
                          continue;
                      }
                      goto LABEL_31;
                    }
                    *v27 = v25;
                  }
LABEL_31:
                  *(_QWORD *)(i + 24) = *(_QWORD *)(v22 + 24);
                }
                if (v16 < 2)
                  break;
                --v16;
                v22 = *(_QWORD *)(v22 + 8);
              }
              goto LABEL_45;
            }
          }
LABEL_34:
          v29 = yydprec[v14];
          v30 = yydprec[v15];
          v32 = v29 == v30 || v29 == 0 || v30 == 0;
          if (v32 || (v33 = v12, v29 >= v30) && (v33 = v11, v30 >= v29))
          {
            yyresolveLocations(a1, 1, a3, v8);
            yyerror(a1 + 48, a4, (char)"syntax is ambiguous");
            return 2;
          }
          v13 = (_QWORD *)(v12 + 64);
          v12 = *(_QWORD *)(v12 + 64);
          v11 = v33;
          if (!v12)
            break;
        }
        else
        {
LABEL_45:
          v12 = *(_QWORD *)(v12 + 64);
          *v13 = v12;
          if (!v12)
            break;
        }
      }
    }
    v34 = (uint64_t *)(v11 + 8);
    v35 = yyr2[*(int *)(v11 + 4)];
    v36 = yyresolveStates(*(_QWORD *)(v11 + 8), yyr2[*(int *)(v11 + 4)], a3, a4);
    if ((_DWORD)v36)
    {
      v7 = v36;
      if (!v35)
      {
LABEL_54:
        *v10 = 0;
        return v7;
      }
      v37 = v35 + 1;
      do
      {
        v38 = *v34;
        yydestroyGLRState(*v34);
        v34 = (uint64_t *)(v38 + 8);
        --v37;
      }
      while (v37 > 1);
    }
    else
    {
      v39 = *(_DWORD *)(a3 + 228);
      v43 = *(_QWORD *)(a3 + 248);
      v41 = *(_OWORD *)(a3 + 256);
      v42 = *(_OWORD *)(a3 + 232);
      *(_DWORD *)(a3 + 228) = *(_DWORD *)(v11 + 16);
      v40 = *(_QWORD *)(v11 + 40);
      *(_OWORD *)(a3 + 232) = *(_OWORD *)(v11 + 24);
      *(_QWORD *)(a3 + 248) = v40;
      *(_OWORD *)(a3 + 256) = *(_OWORD *)(v11 + 48);
      v7 = yyuserAction(*(unsigned int *)(v11 + 4));
      *(_DWORD *)(a3 + 228) = v39;
      *(_OWORD *)(a3 + 232) = v42;
      *(_QWORD *)(a3 + 248) = v43;
      *(_OWORD *)(a3 + 256) = v41;
    }
    if (!(_DWORD)v7)
    {
      *(_BYTE *)(a1 + 1) = 1;
      *(_OWORD *)v10 = 0uLL;
      *(_QWORD *)(a1 + 40) = 0;
      return v7;
    }
    goto LABEL_54;
  }
  return v7;
}

__n128 yyresolveLocations(uint64_t a1, int a2, uint64_t a3, __n128 result)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  int v13;
  __int128 v14;
  __int128 v15;
  __n128 v16;
  __int128 v17;
  uint64_t v18;
  _QWORD v19[6];
  _OWORD v20[4];
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if (a2 >= 1)
  {
    yyresolveLocations(*(_QWORD *)(a1 + 8));
    if (!*(_BYTE *)(a1 + 1))
    {
      v6 = *(_QWORD *)(a1 + 24);
      if (!v6)
        abort();
      v7 = *(int *)(v6 + 4);
      v8 = yyr2[v7];
      if (yyr2[v7])
      {
        v9 = (uint64_t *)(v6 + 8);
        yyresolveLocations(*(_QWORD *)(v6 + 8));
        v10 = v8 + 1;
        v11 = &v19[9 * v8 + 6];
        do
        {
          v12 = *v9;
          *v11 = *(_OWORD *)(*v9 + 48);
          v11 = (_OWORD *)((char *)v11 - 72);
          v9 = (uint64_t *)(v12 + 8);
          --v10;
        }
        while (v10 > 1);
      }
      else
      {
        v20[0] = *(_OWORD *)(*(_QWORD *)(v6 + 8) + 48);
      }
      v13 = *(_DWORD *)(a3 + 228);
      v18 = *(_QWORD *)(a3 + 248);
      v16 = *(__n128 *)(a3 + 256);
      v17 = *(_OWORD *)(a3 + 232);
      *(_DWORD *)(a3 + 228) = *(_DWORD *)(v6 + 16);
      v14 = *(_OWORD *)(v6 + 24);
      *(_QWORD *)(a3 + 248) = *(_QWORD *)(v6 + 40);
      *(_OWORD *)(a3 + 232) = v14;
      if ((_DWORD)v8)
      {
        *(_QWORD *)&v15 = v21;
        *((_QWORD *)&v15 + 1) = *((_QWORD *)v20 + 9 * v8 + 1);
      }
      else
      {
        *(_QWORD *)&v15 = *((_QWORD *)&v20[0] + 1);
        *((_QWORD *)&v15 + 1) = *((_QWORD *)&v20[0] + 1);
      }
      *(_OWORD *)(a1 + 48) = v15;
      *(_DWORD *)(a3 + 228) = v13;
      *(_OWORD *)(a3 + 232) = v17;
      *(_QWORD *)(a3 + 248) = v18;
      result = v16;
      *(__n128 *)(a3 + 256) = v16;
    }
  }
  return result;
}

uint64_t BitSetNew(unsigned int a1)
{
  _QWORD *v2;
  uint64_t v3;
  size_t v4;
  void *v5;

  v2 = malloc_type_malloc(0x30uLL, 0x7081ABB9uLL);
  if (!v2)
    goto LABEL_4;
  v3 = (uint64_t)v2;
  *v2 = 0;
  v2[1] = glpMallocAlloc_0;
  v2[2] = glpMallocRealloc_0;
  v2[3] = glpMallocFree_0;
  v4 = ((a1 >> 3) & 0x1FFFFFFC) + 4;
  *(_DWORD *)(v3 + 32) = a1;
  *(_DWORD *)(v3 + 36) = v4;
  v5 = malloc_type_malloc(v4, 0x7081ABB9uLL);
  if (!v5)
LABEL_4:
    abort();
  *(_QWORD *)(v3 + 40) = v5;
  return BitSetSetRangeEqualsInternal(v3, 0, a1, 0);
}

uint64_t BitSetNewWithAllocator(unsigned int a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, const char *), uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;

  v10 = ((a1 >> 3) & 0x1FFFFFFC) + 4;
  v11 = a3(a2, 48, "Bit Set");
  *(_QWORD *)v11 = a2;
  *(_QWORD *)(v11 + 8) = a3;
  *(_QWORD *)(v11 + 16) = a4;
  *(_QWORD *)(v11 + 24) = a5;
  *(_DWORD *)(v11 + 32) = a1;
  *(_DWORD *)(v11 + 36) = v10;
  *(_QWORD *)(v11 + 40) = a3(a2, v10, "Bit Set (packed bits)");
  return BitSetSetRangeEqualsInternal(v11, 0, a1, 0);
}

void *glpMallocAlloc_0(int a1, size_t size)
{
  void *result;

  result = malloc_type_malloc(size, 0x7081ABB9uLL);
  if (!result)
    abort();
  return result;
}

void *glpMallocRealloc_0(int a1, void *ptr, size_t size)
{
  void *result;

  result = malloc_type_realloc(ptr, size, 0x2BDC8648uLL);
  if (!result)
    abort();
  return result;
}

void glpMallocFree_0(int a1, void *a2)
{
  free(a2);
}

uint64_t BitSetSetRangeEqualsInternal(uint64_t a1, unsigned int a2, unsigned int a3, int a4)
{
  int v6;
  unsigned int v7;
  unsigned int v8;
  signed int v9;
  unsigned int v10;
  void *v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;

  if (a2 < a3)
  {
    v6 = -1 << a2;
    v7 = 0xFFFFFFFF >> -(char)a3;
    v8 = a2 >> 5;
    v9 = ~(a2 >> 5) + ((a3 - 1) >> 5);
    if (v9 < 0)
    {
      v15 = v7 & v6;
      v16 = *(_QWORD *)(a1 + 40);
      if (a4)
        v17 = *(_DWORD *)(v16 + 4 * v8) | v15;
      else
        v17 = *(_DWORD *)(v16 + 4 * v8) & ~v15;
      *(_DWORD *)(v16 + 4 * v8) = v17;
    }
    else
    {
      v10 = (a3 - 1) >> 5;
      v11 = (void *)(*(_QWORD *)(a1 + 40) + 4 * (v8 + 1));
      if (a4)
        v12 = -1;
      else
        v12 = 0;
      memset(v11, v12, (4 * v9));
      v13 = *(_QWORD *)(a1 + 40);
      if (a4)
      {
        *(_DWORD *)(v13 + 4 * v8) |= v6;
        v14 = *(_DWORD *)(v13 + 4 * v10) | v7;
      }
      else
      {
        *(_DWORD *)(v13 + 4 * v8) &= ~v6;
        v14 = *(_DWORD *)(v13 + 4 * v10) & ~v7;
      }
      *(_DWORD *)(v13 + 4 * v10) = v14;
    }
  }
  return a1;
}

uint64_t BitSetClone(uint64_t a1)
{
  uint64_t v2;

  v2 = BitSetNewWithAllocator(*(_DWORD *)(a1 + 32), *(_QWORD *)a1, *(uint64_t (**)(uint64_t, uint64_t, const char *))(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  return BitSetCopyEquals(v2, a1);
}

uint64_t BitSetCloneWithAllocator(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, const char *), uint64_t a4, uint64_t a5)
{
  uint64_t v6;

  v6 = BitSetNewWithAllocator(*(_DWORD *)(a1 + 32), a2, a3, a4, a5);
  return BitSetCopyEquals(v6, a1);
}

uint64_t BitSetCopyEquals(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  int *v8;
  _DWORD *v9;
  int v10;

  v4 = *(_DWORD *)(a2 + 32);
  v5 = *(_DWORD *)(a1 + 32);
  if (v5 < v4)
  {
    BitSetSetSizeEquals(a1, v4);
    v5 = *(_DWORD *)(a1 + 32);
    v4 = *(_DWORD *)(a2 + 32);
  }
  if (v4 < v5)
    BitSetSetSizeEquals(a2, v5);
  v6 = *(unsigned int *)(a1 + 36);
  if (v6 >= 4)
  {
    v7 = v6 >> 2;
    v8 = *(int **)(a2 + 40);
    v9 = *(_DWORD **)(a1 + 40);
    do
    {
      v10 = *v8++;
      *v9++ = v10;
      --v7;
    }
    while (v7);
  }
  return a1;
}

uint64_t BitSetFree(_QWORD *a1)
{
  ((void (*)(_QWORD, _QWORD))a1[3])(*a1, a1[5]);
  return ((uint64_t (*)(_QWORD, _QWORD *))a1[3])(*a1, a1);
}

uint64_t BitSetGetSizeInBits(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t BitSetGetEquals(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  v3 = a2 + 1;
  if (*(_DWORD *)(a1 + 32) < v3)
    a1 = BitSetSetSizeEquals(a1, v3);
  return (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 4 * (a2 >> 5)) >> a2) & 1;
}

uint64_t BitSetSetEquals(uint64_t result, unsigned int a2)
{
  unsigned int v3;

  v3 = a2 + 1;
  if (*(_DWORD *)(result + 32) < v3)
    result = BitSetSetSizeEquals(result, v3);
  *(_DWORD *)(*(_QWORD *)(result + 40) + 4 * (a2 >> 5)) |= 1 << a2;
  return result;
}

uint64_t BitSetClearEquals(uint64_t result, unsigned int a2)
{
  unsigned int v3;

  v3 = a2 + 1;
  if (*(_DWORD *)(result + 32) < v3)
    result = BitSetSetSizeEquals(result, v3);
  *(_DWORD *)(*(_QWORD *)(result + 40) + 4 * (a2 >> 5)) &= ~(1 << a2);
  return result;
}

uint64_t BitSetSetRangeEquals(uint64_t a1, unsigned int a2, unsigned int a3, int a4)
{
  if (*(_DWORD *)(a1 + 32) < a3)
    a1 = BitSetSetSizeEquals(a1, a3);
  return BitSetSetRangeEqualsInternal(a1, a2, a3, a4);
}

uint64_t BitSetSetSizeEquals(uint64_t a1, unsigned int a2)
{
  unsigned int v4;
  uint64_t v5;

  v4 = *(_DWORD *)(a1 + 32);
  if (v4 != a2)
  {
    v5 = ((a2 >> 3) & 0x1FFFFFFC) + 4;
    if (v4 < a2)
    {
      *(_QWORD *)(a1 + 40) = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, const char *))(a1 + 16))(*(_QWORD *)a1, *(_QWORD *)(a1 + 40), v5, "Bit Set (packed bits, growth)");
      v4 = *(_DWORD *)(a1 + 32);
    }
    BitSetSetRangeEqualsInternal(a1, v4, a2, 0);
    *(_DWORD *)(a1 + 32) = a2;
    *(_DWORD *)(a1 + 36) = v5;
  }
  return a1;
}

uint64_t BitSetFirstSetBit(uint64_t a1)
{
  return BitSetNextSetBit(a1, -1);
}

uint64_t BitSetNextSetBit(uint64_t a1, int a2)
{
  uint64_t v2;
  unint64_t v3;
  int v4;
  int i;
  unsigned int v6;
  uint64_t v7;

  v2 = (a2 + 1) >> 5;
  v3 = (unint64_t)*(unsigned int *)(a1 + 36) >> 2;
  if (v2 >= v3)
    return 0xFFFFFFFFLL;
  v4 = ((_BYTE)a2 + 1) & 0x1F;
  for (i = 32 * v2; ; i += 32)
  {
    v6 = *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4 * v2);
    if (v6)
      break;
LABEL_7:
    v4 = 0;
    if (++v2 == v3)
      return 0xFFFFFFFFLL;
  }
  while (1)
  {
    if (((v6 >> v4) & 1) != 0)
    {
      v7 = (i + v4);
      if (v7 < *(_DWORD *)(a1 + 32))
        return v7;
    }
    if (++v4 == 32)
      goto LABEL_7;
  }
}

uint64_t BitSetLastSetBit(uint64_t a1)
{
  return BitSetPreviousSetBit(a1, *(_DWORD *)(a1 + 32));
}

uint64_t BitSetPreviousSetBit(uint64_t a1, int a2)
{
  int v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  BOOL v6;

  v2 = (a2 - 1) & 0x1F;
  v3 = (a2 - 1) >> 5;
  v4 = 32 * v3;
  while (1)
  {
    v5 = *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4 * v3);
    if (v5)
      break;
LABEL_6:
    v4 -= 32;
    v2 = 31;
    v6 = v3-- <= 0;
    if (v6)
      return 0xFFFFFFFFLL;
  }
  while (((v5 >> v2) & 1) == 0)
  {
    v6 = v2-- <= 0;
    if (v6)
      goto LABEL_6;
  }
  return (v4 + v2);
}

uint64_t BitSetOr(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;

  v2 = *(_DWORD *)(a1 + 32);
  v3 = *(_DWORD *)(a2 + 32);
  if (v2 <= v3)
    v4 = a2;
  else
    v4 = a1;
  if (v2 <= v3)
    v5 = a1;
  else
    v5 = a2;
  result = BitSetClone(v4);
  v7 = *(_DWORD *)(v5 + 32);
  if (v7 >= 1)
  {
    v8 = 0;
    v9 = *(_QWORD *)(v5 + 40);
    v10 = *(_QWORD *)(v4 + 40);
    do
    {
      v11 = v8 >> 5;
      v12 = 1 << v8;
      v13 = *(_QWORD *)(result + 40);
      if (((*(_DWORD *)(v10 + 4 * v11) | *(_DWORD *)(v9 + 4 * v11)) & (1 << v8)) != 0)
        v14 = *(_DWORD *)(v13 + 4 * v11) | v12;
      else
        v14 = *(_DWORD *)(v13 + 4 * v11) & ~v12;
      *(_DWORD *)(v13 + 4 * v11) = v14;
      ++v8;
    }
    while (v7 != v8);
  }
  return result;
}

uint64_t BitSetAndEquals(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  int *v8;
  _DWORD *v9;
  int v10;

  v4 = *(_DWORD *)(a2 + 32);
  v5 = *(_DWORD *)(a1 + 32);
  if (v5 < v4)
  {
    BitSetSetSizeEquals(a1, v4);
    v5 = *(_DWORD *)(a1 + 32);
    v4 = *(_DWORD *)(a2 + 32);
  }
  if (v4 < v5)
    BitSetSetSizeEquals(a2, v5);
  v6 = *(unsigned int *)(a1 + 36);
  if (v6 >= 4)
  {
    v7 = v6 >> 2;
    v8 = *(int **)(a2 + 40);
    v9 = *(_DWORD **)(a1 + 40);
    do
    {
      v10 = *v8++;
      *v9++ &= v10;
      --v7;
    }
    while (v7);
  }
  return a1;
}

uint64_t BitSetAndNotEquals(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  int *v8;
  _DWORD *v9;
  int v10;

  v4 = *(_DWORD *)(a2 + 32);
  v5 = *(_DWORD *)(a1 + 32);
  if (v5 < v4)
  {
    BitSetSetSizeEquals(a1, v4);
    v5 = *(_DWORD *)(a1 + 32);
    v4 = *(_DWORD *)(a2 + 32);
  }
  if (v4 < v5)
    BitSetSetSizeEquals(a2, v5);
  v6 = *(unsigned int *)(a1 + 36);
  if (v6 >= 4)
  {
    v7 = v6 >> 2;
    v8 = *(int **)(a2 + 40);
    v9 = *(_DWORD **)(a1 + 40);
    do
    {
      v10 = *v8++;
      *v9++ &= ~v10;
      --v7;
    }
    while (v7);
  }
  return a1;
}

uint64_t BitSetOrEquals(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  int *v8;
  _DWORD *v9;
  int v10;

  v4 = *(_DWORD *)(a2 + 32);
  v5 = *(_DWORD *)(a1 + 32);
  if (v5 < v4)
  {
    BitSetSetSizeEquals(a1, v4);
    v5 = *(_DWORD *)(a1 + 32);
    v4 = *(_DWORD *)(a2 + 32);
  }
  if (v4 < v5)
    BitSetSetSizeEquals(a2, v5);
  v6 = *(unsigned int *)(a1 + 36);
  if (v6 >= 4)
  {
    v7 = v6 >> 2;
    v8 = *(int **)(a2 + 40);
    v9 = *(_DWORD **)(a1 + 40);
    do
    {
      v10 = *v8++;
      *v9++ |= v10;
      --v7;
    }
    while (v7);
  }
  return a1;
}

uint64_t BitSetEqualsTest(uint64_t a1, uint64_t a2)
{
  int8x16_t v2;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int8x16_t v10;
  int32x4_t v11;
  int8x16_t v12;
  int32x4_t v13;
  uint32x4_t v14;
  int8x16_t v15;
  int32x4_t v16;
  int16x4_t v17;
  uint64_t v18;
  int8x16_t v19;

  v5 = *(_DWORD *)(a2 + 32);
  v6 = *(_DWORD *)(a1 + 32);
  if (v6 < v5)
  {
    BitSetSetSizeEquals(a1, v5);
    v6 = *(_DWORD *)(a1 + 32);
    v5 = *(_DWORD *)(a2 + 32);
  }
  if (v5 < v6)
  {
    BitSetSetSizeEquals(a2, v6);
    v6 = *(_DWORD *)(a1 + 32);
  }
  if ((int)v6 < 1)
    return 1;
  v7 = 0;
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = (int8x16_t)xmmword_22A989CE0;
  v11 = (int32x4_t)xmmword_22A97EA20;
  v12.i64[0] = 0x1F0000001FLL;
  v12.i64[1] = 0x1F0000001FLL;
  v13.i64[0] = 0x400000004;
  v13.i64[1] = 0x400000004;
  v14 = (uint32x4_t)vdupq_n_s32(v6 - 1);
  do
  {
    v15 = v10;
    v16 = (int32x4_t)vcgeq_u32(v14, (uint32x4_t)v11);
    v17 = vmovn_s32(v16);
    v18 = v7 >> 5;
    if ((v17.i8[0] & 1) != 0)
      v10.i32[0] = *(_DWORD *)(v8 + 4 * v18);
    if ((v17.i8[2] & 1) != 0)
      v10.i32[1] = *(_DWORD *)(v8 + 4 * v18);
    if ((v17.i8[4] & 1) != 0)
      v10.i32[2] = *(_DWORD *)(v8 + 4 * v18);
    if ((v17.i8[6] & 1) != 0)
      v10.i32[3] = *(_DWORD *)(v8 + 4 * v18);
    if ((v17.i8[0] & 1) != 0)
      v2.i32[0] = *(_DWORD *)(v9 + 4 * v18);
    if ((v17.i8[2] & 1) != 0)
      v2.i32[1] = *(_DWORD *)(v9 + 4 * v18);
    if ((v17.i8[4] & 1) != 0)
      v2.i32[2] = *(_DWORD *)(v9 + 4 * v18);
    if ((v17.i8[6] & 1) != 0)
      v2.i32[3] = *(_DWORD *)(v9 + 4 * v18);
    v10 = vandq_s8(v15, (int8x16_t)vshlq_u32((uint32x4_t)vmvnq_s8(veorq_s8(v10, v2)), (uint32x4_t)vnegq_s32((int32x4_t)vandq_s8((int8x16_t)v11, v12))));
    v7 += 4;
    v11 = vaddq_s32(v11, v13);
  }
  while (((v6 + 3) & 0xFFFFFFFC) != v7);
  v19 = vbslq_s8((int8x16_t)v16, v10, v15);
  *(int8x8_t *)v19.i8 = vand_s8(*(int8x8_t *)v19.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL));
  return (v19.i32[0] & v19.i32[1]);
}

BOOL PPStreamParamBindingIsEqual(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

BOOL PPStreamAttribBindingIsEqual(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

BOOL PPStreamOutputBindingIsEqual(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t PPStreamChunkGetStream(uint64_t a1, uint64_t a2, _DWORD *a3, int a4, int *a5)
{
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  int v9;

  *a3 = 1;
  v5 = 16;
  switch(*(_BYTE *)(a1 + 16))
  {
    case 0:
    case 1:
    case 2:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 0xA:
    case 0xC:
      v5 = a1 + 24;
      break;
    case 9:
      *a3 = 2;
      v5 = a1 + 32;
      v7 = a1 + 24;
      v8 = a4 == 0;
      goto LABEL_7;
    case 0xB:
      v5 = a1 + 24;
      v9 = *(_DWORD *)(a1 + 24) & 7;
      if (a4)
      {
        *a3 = v9 + 2;
        v5 = a1 + 8 * (a4 - 2) + 40;
        v7 = a1 + 32;
        v8 = a4 == 1;
LABEL_7:
        if (v8)
          v5 = v7;
      }
      else
      {
        *a5 = v9;
        *a3 = (*(_DWORD *)v5 & 7) + 2;
      }
      break;
    case 0xD:
      *a3 = 2;
      v5 = a1 + 4 * (2 * a4) + 24;
      break;
    default:
      return *(_QWORD *)v5;
  }
  return *(_QWORD *)v5;
}

uint64_t PPStreamChunkCompare(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 16) != *(unsigned __int8 *)(a2 + 16))
    return 1;
  switch(*(_BYTE *)(a1 + 16))
  {
    case 0:
    case 1:
    case 7:
    case 8:
    case 0xA:
    case 0xC:
      if (*(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
        return 1;
      break;
    case 2:
    case 4:
    case 5:
    case 6:
    case 9:
    case 0xD:
      if (*(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24) || *(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32))
        return 1;
      break;
    case 3:
      if (*(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
        return 1;
      break;
    case 0xB:
      *(_DWORD *)(a2 + 92) = *(_DWORD *)(a1 + 92);
      *(_DWORD *)(a2 + 96) = *(_DWORD *)(a1 + 96);
      if (memcmp((const void *)(a1 + 24), (const void *)(a2 + 24), 0x50uLL))
        return 1;
      break;
    default:
      return 1;
  }
  return 0;
}

void *PPStreamChunkListCreate()
{
  void *result;

  result = malloc_type_calloc(0x18uLL, 1uLL, 0xA92C9FCEuLL);
  if (!result)
    abort();
  return result;
}

_QWORD *PPStreamChunkListCreateFromChunkList(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t i;
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  int v9;

  v2 = PPStreamChunkListCreate();
  for (i = *a1; i; i = *(_QWORD *)(i + 8))
  {
    switch(*(_BYTE *)(i + 16))
    {
      case 0:
      case 1:
      case 7:
      case 8:
      case 0xA:
      case 0xC:
        v4 = 8;
        break;
      case 2:
      case 4:
      case 5:
      case 6:
      case 9:
      case 0xD:
        v4 = 16;
        break;
      case 3:
        v4 = 4;
        break;
      case 0xB:
        v9 = *(_DWORD *)(i + 96);
        if (v9)
          v4 = v9 + 81;
        else
          v4 = 80;
        break;
      case 0xE:
        v8 = *(_DWORD *)(i + 28);
        if (v8)
          v4 = v8 + 9;
        else
          v4 = 8;
        break;
      default:
        v4 = 0;
        break;
    }
    v5 = v4;
    v6 = PPStreamChunkCreate(v4);
    memmove(v6, (const void *)i, v5 + 24);
    *v6 = 0;
    v6[1] = 0;
    if (!*v2)
      *v2 = v6;
    v7 = v2[1];
    if (v7)
    {
      *(_QWORD *)(v7 + 8) = v6;
      *v6 = v7;
    }
    v6[1] = 0;
    v2[1] = v6;
    ++*((_DWORD *)v2 + 4);
  }
  return v2;
}

uint64_t PPStreamChunkListAddChunk(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  if (!*(_QWORD *)result)
  {
    *(_QWORD *)result = a2;
    *a2 = 0;
  }
  v2 = *(_QWORD *)(result + 8);
  if (v2)
  {
    *(_QWORD *)(v2 + 8) = a2;
    *a2 = v2;
  }
  a2[1] = 0;
  *(_QWORD *)(result + 8) = a2;
  ++*(_DWORD *)(result + 16);
  return result;
}

void PPStreamChunkListFree(_DWORD *a1)
{
  int v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = a1[4];
  if (v2 >= 1)
  {
    v3 = *(_QWORD **)a1;
    do
    {
      v4 = (_QWORD *)v3[1];
      free(v3);
      v3 = v4;
      --v2;
    }
    while (v2);
  }
  free(a1);
}

uint64_t PPStreamChunkListInsertChunkBeforeChunk(uint64_t result, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;

  if (!a3)
  {
    if (!*(_QWORD *)result)
    {
      *(_QWORD *)result = a2;
      *a2 = 0;
    }
    v3 = (_QWORD *)(result + 8);
    v4 = *(_QWORD *)(result + 8);
    if (v4)
    {
      *(_QWORD *)(v4 + 8) = a2;
      *a2 = v4;
    }
    a2[1] = 0;
    goto LABEL_11;
  }
  *a2 = *(_QWORD *)a3;
  a2[1] = a3;
  if (*(_QWORD *)a3)
    *(_QWORD *)(*(_QWORD *)a3 + 8) = a2;
  *(_QWORD *)a3 = a2;
  v3 = (_QWORD *)result;
  if (*(_QWORD *)result == a3)
LABEL_11:
    *v3 = a2;
  ++*(_DWORD *)(result + 16);
  return result;
}

uint64_t PPStreamChunkListInsertChunkAfterChunk(uint64_t result, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  if (!a3)
  {
    *a2 = 0;
    v6 = *(_QWORD **)result;
    if (*(_QWORD *)result)
      *v6 = a2;
    a2[1] = v6;
    v5 = (_QWORD *)result;
    goto LABEL_9;
  }
  v3 = *(_QWORD *)(a3 + 8);
  *a2 = a3;
  a2[1] = v3;
  v4 = *(_QWORD **)(a3 + 8);
  if (v4)
    *v4 = a2;
  *(_QWORD *)(a3 + 8) = a2;
  v5 = (_QWORD *)(result + 8);
  if (*(_QWORD *)(result + 8) == a3)
LABEL_9:
    *v5 = a2;
  ++*(_DWORD *)(result + 16);
  return result;
}

void PPStreamChunkListRemoveChunk(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *v4;

  v3 = *a2;
  v4 = (_QWORD *)a2[1];
  if (*a2)
  {
    *(_QWORD *)(v3 + 8) = v4;
    v4 = (_QWORD *)a2[1];
  }
  else
  {
    *(_QWORD *)a1 = v4;
  }
  if (!v4)
    v4 = (_QWORD *)(a1 + 8);
  *v4 = v3;
  free(a2);
  --*(_DWORD *)(a1 + 16);
}

_QWORD *PPStreamChunkListSort(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  int v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v1 = (_QWORD *)*result;
  if (*result)
  {
    do
    {
      if (!v1)
        break;
      v2 = v1 + 1;
      v3 = v1[1];
      if (!v3)
        break;
      v4 = 0;
      v5 = v1;
      do
      {
        v6 = (_QWORD *)v3;
        if (*((_DWORD *)v5 + 8) > *(_DWORD *)(v3 + 32))
        {
          v7 = *(_QWORD *)(v3 + 8);
          if (v7)
            v8 = (_QWORD *)v6[1];
          else
            v8 = result + 1;
          *v8 = v5;
          v9 = *v5;
          if (*v5)
          {
            *(_QWORD *)(v9 + 8) = v6;
            v7 = v6[1];
          }
          else
          {
            *result = v6;
            v1 = v6;
          }
          *v2 = v7;
          *v6 = v9;
          v6[1] = v5;
          v4 = 1;
          *v5 = v6;
        }
        v2 = v6 + 1;
        v3 = v6[1];
        v5 = v6;
      }
      while (v3);
    }
    while (v4);
  }
  return result;
}

uint64_t *PPStreamChunkListGetStream(uint64_t *result, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;

  v3 = *result;
  *a3 = 0;
  if (v3)
  {
    v6 = 0;
    v13 = 0;
    v7 = v3;
    do
    {
      result = (uint64_t *)PPStreamChunkGetStream(v7, a2, &v13, 0, &v11);
      v6 += v13;
      *a3 = v6;
      v7 = *(_QWORD *)(v7 + 8);
    }
    while (v7);
    if (a2)
    {
      v8 = 0;
      do
      {
        result = (uint64_t *)PPStreamChunkGetStream(v3, a2, &v13, 0, &v11);
        *(_QWORD *)(a2 + 8 * v8) = result;
        v9 = v13;
        if (v13 < 2)
        {
          ++v8;
        }
        else
        {
          --v13;
          v10 = 1;
          do
          {
            result = (uint64_t *)PPStreamChunkGetStream(v3, a2, &v12, v10, &v11);
            *(_QWORD *)(a2 + 8 * (v8 + v10++)) = result;
          }
          while (v9 != v10);
          v8 += v10;
        }
        v3 = *(_QWORD *)(v3 + 8);
      }
      while (v3);
    }
  }
  return result;
}

uint64_t PPStreamChunkListChunkAtIndex(uint64_t *a1, int a2)
{
  uint64_t v2;
  int v3;
  uint64_t result;
  int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = a2;
    while (2)
    {
      result = 0;
      switch(*(_BYTE *)(v2 + 16))
      {
        case 0:
        case 1:
        case 7:
        case 8:
        case 9:
        case 0xA:
        case 0xC:
        case 0xD:
          if (v3)
            goto LABEL_10;
          return v2;
        case 2:
        case 4:
        case 5:
        case 6:
          v5 = *(_DWORD *)(v2 + 32);
          goto LABEL_9;
        case 3:
          v5 = *(_DWORD *)(v2 + 24);
          goto LABEL_9;
        case 0xB:
          v5 = *(_DWORD *)(v2 + 88);
LABEL_9:
          if (v5 != a2)
            goto LABEL_10;
          return v2;
        case 0xE:
          return result;
        default:
LABEL_10:
          v2 = *(_QWORD *)(v2 + 8);
          --v3;
          if (!v2)
            return 0;
          continue;
      }
    }
  }
  return 0;
}

uint64_t PPStreamChunkListCompare(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;

  if (*(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
    return 1;
  v2 = *(_QWORD *)a2;
  for (i = *(_QWORD *)a1; i && v2 != 0; i = *(_QWORD *)(i + 8))
  {
    if (PPStreamChunkCompare(i, v2))
      return 1;
    v2 = *(_QWORD *)(v2 + 8);
  }
  return 0;
}

uint64_t PPStreamChunkListGetNextIndex(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  v1 = *a1;
  if (!*a1)
    return 0;
  switch(*(_BYTE *)(v1 + 16))
  {
    case 0:
    case 1:
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0xC:
    case 0xD:
      LODWORD(result) = 0;
      do
      {
        result = (result + 1);
        v1 = *(_QWORD *)(v1 + 8);
      }
      while (v1);
      break;
    case 2:
      LODWORD(result) = 0;
      do
      {
        v3 = *(_DWORD *)(v1 + 32);
        if (v3 >= result)
          result = v3 + 1;
        else
          result = result;
        v1 = *(_QWORD *)(v1 + 8);
      }
      while (v1);
      break;
    case 3:
      LODWORD(result) = 0;
      do
      {
        v4 = *(_DWORD *)(v1 + 24);
        if (v4 >= result)
          result = v4 + 1;
        else
          result = result;
        v1 = *(_QWORD *)(v1 + 8);
      }
      while (v1);
      break;
    case 4:
      LODWORD(result) = 0;
      do
      {
        v5 = *(_DWORD *)(v1 + 32);
        if (v5 >= result)
          result = v5 + 1;
        else
          result = result;
        v1 = *(_QWORD *)(v1 + 8);
      }
      while (v1);
      break;
    case 5:
      LODWORD(result) = 0;
      do
      {
        v6 = *(_DWORD *)(v1 + 32);
        if (v6 >= result)
          result = v6 + 1;
        else
          result = result;
        v1 = *(_QWORD *)(v1 + 8);
      }
      while (v1);
      break;
    case 6:
      LODWORD(result) = 0;
      do
      {
        v7 = *(_DWORD *)(v1 + 32);
        if (v7 >= result)
          result = v7 + 1;
        else
          result = result;
        v1 = *(_QWORD *)(v1 + 8);
      }
      while (v1);
      break;
    case 0xB:
      LODWORD(result) = 0;
      do
      {
        v8 = *(_DWORD *)(v1 + 88);
        if (v8 >= result)
          result = v8 + 1;
        else
          result = result;
        v1 = *(_QWORD *)(v1 + 8);
      }
      while (v1);
      break;
    default:
      return 0;
  }
  return result;
}

uint64_t PPStreamCreate()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v0 = malloc_type_calloc(0x90uLL, 1uLL, 0xA92C9FCEuLL);
  if (!v0)
    abort();
  v1 = (uint64_t)v0;
  v0[2] = PPStreamChunkListCreate();
  *(_QWORD *)(v1 + 24) = PPStreamChunkListCreate();
  *(_QWORD *)(v1 + 32) = PPStreamChunkListCreate();
  *(_QWORD *)(v1 + 80) = PPStreamChunkListCreate();
  *(_QWORD *)(v1 + 40) = PPStreamChunkListCreate();
  *(_QWORD *)(v1 + 56) = PPStreamChunkListCreate();
  *(_QWORD *)(v1 + 72) = PPStreamChunkListCreate();
  *(_QWORD *)(v1 + 48) = PPStreamChunkListCreate();
  *(_QWORD *)(v1 + 64) = PPStreamChunkListCreate();
  *(_QWORD *)(v1 + 88) = PPStreamChunkListCreate();
  *(_QWORD *)(v1 + 104) = PPStreamChunkListCreate();
  *(_QWORD *)(v1 + 112) = PPStreamChunkListCreate();
  *(_QWORD *)(v1 + 128) = PPStreamChunkListCreate();
  *(_QWORD *)(v1 + 120) = PPStreamChunkListCreate();
  *(_QWORD *)(v1 + 96) = PPStreamChunkListCreate();
  *(_DWORD *)(v1 + 140) = 0;
  v4 = 0;
  PPStreamAddReqs0(v1, &v4);
  v3 = 0;
  PPStreamAddReqs1(v1, &v3);
  return v1;
}

_BYTE *PPStreamAddReqs0(uint64_t a1, _QWORD *a2)
{
  _BYTE *result;
  uint64_t v5;
  uint64_t v6;

  result = PPStreamChunkCreate(8);
  result[16] = 0;
  *((_QWORD *)result + 3) = *a2;
  v5 = *(_QWORD *)(a1 + 16);
  if (!*(_QWORD *)v5)
  {
    *(_QWORD *)v5 = result;
    *(_QWORD *)result = 0;
  }
  v6 = *(_QWORD *)(v5 + 8);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = result;
    *(_QWORD *)result = v6;
  }
  *((_QWORD *)result + 1) = 0;
  *(_QWORD *)(v5 + 8) = result;
  ++*(_DWORD *)(v5 + 16);
  return result;
}

_BYTE *PPStreamAddReqs1(uint64_t a1, _QWORD *a2)
{
  _BYTE *result;
  uint64_t v5;
  uint64_t v6;

  result = PPStreamChunkCreate(8);
  result[16] = 1;
  *((_QWORD *)result + 3) = *a2;
  v5 = *(_QWORD *)(a1 + 24);
  if (!*(_QWORD *)v5)
  {
    *(_QWORD *)v5 = result;
    *(_QWORD *)result = 0;
  }
  v6 = *(_QWORD *)(v5 + 8);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = result;
    *(_QWORD *)result = v6;
  }
  *((_QWORD *)result + 1) = 0;
  *(_QWORD *)(v5 + 8) = result;
  ++*(_DWORD *)(v5 + 16);
  return result;
}

void PPStreamFree(_DWORD **a1)
{
  PPStreamChunkListFree(a1[2]);
  PPStreamChunkListFree(a1[3]);
  PPStreamChunkListFree(a1[4]);
  PPStreamChunkListFree(a1[10]);
  PPStreamChunkListFree(a1[5]);
  PPStreamChunkListFree(a1[7]);
  PPStreamChunkListFree(a1[9]);
  PPStreamChunkListFree(a1[6]);
  PPStreamChunkListFree(a1[8]);
  PPStreamChunkListFree(a1[11]);
  PPStreamChunkListFree(a1[13]);
  PPStreamChunkListFree(a1[14]);
  PPStreamChunkListFree(a1[16]);
  PPStreamChunkListFree(a1[15]);
  PPStreamChunkListFree(a1[12]);
  free(a1);
}

void *PPStreamChunkCreate(uint64_t a1)
{
  void *result;

  result = malloc_type_calloc(a1 + 24, 1uLL, 0xA92C9FCEuLL);
  if (!result)
    abort();
  return result;
}

char *PPStreamAddTempUsage(uint64_t a1, _OWORD *a2)
{
  char *result;
  uint64_t v5;
  uint64_t v6;

  result = (char *)PPStreamChunkCreate(16);
  result[16] = 2;
  *(_OWORD *)(result + 24) = *a2;
  v5 = *(_QWORD *)(a1 + 32);
  if (!*(_QWORD *)v5)
  {
    *(_QWORD *)v5 = result;
    *(_QWORD *)result = 0;
  }
  v6 = *(_QWORD *)(v5 + 8);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = result;
    *(_QWORD *)result = v6;
  }
  *((_QWORD *)result + 1) = 0;
  *(_QWORD *)(v5 + 8) = result;
  ++*(_DWORD *)(v5 + 16);
  return result;
}

_BYTE *PPStreamAddTempUsageArray(uint64_t a1, _QWORD *a2)
{
  _BYTE *result;
  uint64_t v5;
  uint64_t v6;

  result = PPStreamChunkCreate(8);
  result[16] = 8;
  *((_QWORD *)result + 3) = *a2;
  v5 = *(_QWORD *)(a1 + 80);
  if (!*(_QWORD *)v5)
  {
    *(_QWORD *)v5 = result;
    *(_QWORD *)result = 0;
  }
  v6 = *(_QWORD *)(v5 + 8);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = result;
    *(_QWORD *)result = v6;
  }
  *((_QWORD *)result + 1) = 0;
  *(_QWORD *)(v5 + 8) = result;
  ++*(_DWORD *)(v5 + 16);
  return result;
}

_BYTE *PPStreamAddAddressUsage(uint64_t a1, _DWORD *a2)
{
  _BYTE *result;
  uint64_t v5;
  uint64_t v6;

  result = PPStreamChunkCreate(4);
  result[16] = 3;
  *((_DWORD *)result + 6) = *a2;
  v5 = *(_QWORD *)(a1 + 40);
  if (!*(_QWORD *)v5)
  {
    *(_QWORD *)v5 = result;
    *(_QWORD *)result = 0;
  }
  v6 = *(_QWORD *)(v5 + 8);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = result;
    *(_QWORD *)result = v6;
  }
  *((_QWORD *)result + 1) = 0;
  *(_QWORD *)(v5 + 8) = result;
  ++*(_DWORD *)(v5 + 16);
  return result;
}

char *PPStreamAddParamBinding(uint64_t a1, _OWORD *a2)
{
  char *result;
  uint64_t v5;
  uint64_t v6;

  result = (char *)PPStreamChunkCreate(16);
  result[16] = 5;
  *(_OWORD *)(result + 24) = *a2;
  v5 = *(_QWORD *)(a1 + 56);
  if (!*(_QWORD *)v5)
  {
    *(_QWORD *)v5 = result;
    *(_QWORD *)result = 0;
  }
  v6 = *(_QWORD *)(v5 + 8);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = result;
    *(_QWORD *)result = v6;
  }
  *((_QWORD *)result + 1) = 0;
  *(_QWORD *)(v5 + 8) = result;
  ++*(_DWORD *)(v5 + 16);
  return result;
}

_BYTE *PPStreamAddParamBindingArray(uint64_t a1, _QWORD *a2)
{
  _BYTE *result;
  uint64_t v5;
  uint64_t v6;

  result = PPStreamChunkCreate(8);
  result[16] = 7;
  *((_QWORD *)result + 3) = *a2;
  v5 = *(_QWORD *)(a1 + 72);
  if (!*(_QWORD *)v5)
  {
    *(_QWORD *)v5 = result;
    *(_QWORD *)result = 0;
  }
  v6 = *(_QWORD *)(v5 + 8);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = result;
    *(_QWORD *)result = v6;
  }
  *((_QWORD *)result + 1) = 0;
  *(_QWORD *)(v5 + 8) = result;
  ++*(_DWORD *)(v5 + 16);
  return result;
}

char *PPStreamAddAttribBinding(uint64_t a1, _OWORD *a2)
{
  char *result;
  uint64_t v5;
  uint64_t v6;

  result = (char *)PPStreamChunkCreate(16);
  result[16] = 4;
  *(_OWORD *)(result + 24) = *a2;
  v5 = *(_QWORD *)(a1 + 48);
  if (!*(_QWORD *)v5)
  {
    *(_QWORD *)v5 = result;
    *(_QWORD *)result = 0;
  }
  v6 = *(_QWORD *)(v5 + 8);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = result;
    *(_QWORD *)result = v6;
  }
  *((_QWORD *)result + 1) = 0;
  *(_QWORD *)(v5 + 8) = result;
  ++*(_DWORD *)(v5 + 16);
  return result;
}

char *PPStreamAddOutputBinding(uint64_t a1, _OWORD *a2)
{
  char *result;
  uint64_t v5;
  uint64_t v6;

  result = (char *)PPStreamChunkCreate(16);
  result[16] = 6;
  *(_OWORD *)(result + 24) = *a2;
  v5 = *(_QWORD *)(a1 + 64);
  if (!*(_QWORD *)v5)
  {
    *(_QWORD *)v5 = result;
    *(_QWORD *)result = 0;
  }
  v6 = *(_QWORD *)(v5 + 8);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = result;
    *(_QWORD *)result = v6;
  }
  *((_QWORD *)result + 1) = 0;
  *(_QWORD *)(v5 + 8) = result;
  ++*(_DWORD *)(v5 + 16);
  return result;
}

char *PPStreamAddTexImage(uint64_t a1, _OWORD *a2)
{
  char *result;
  uint64_t v5;
  uint64_t v6;

  result = (char *)PPStreamChunkCreate(16);
  result[16] = 9;
  *(_OWORD *)(result + 24) = *a2;
  v5 = *(_QWORD *)(a1 + 88);
  if (!*(_QWORD *)v5)
  {
    *(_QWORD *)v5 = result;
    *(_QWORD *)result = 0;
  }
  v6 = *(_QWORD *)(v5 + 8);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = result;
    *(_QWORD *)result = v6;
  }
  *((_QWORD *)result + 1) = 0;
  *(_QWORD *)(v5 + 8) = result;
  ++*(_DWORD *)(v5 + 16);
  return result;
}

char *PPStreamAddOperation(uint64_t a1, uint64_t a2, const void *a3)
{
  size_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *(unsigned int *)(a2 + 72);
  if ((_DWORD)v6)
    v7 = (v6 + 81);
  else
    v7 = 80;
  v8 = (char *)PPStreamChunkCreate(v7);
  v9 = v8;
  v8[16] = 11;
  *(_OWORD *)(v8 + 24) = *(_OWORD *)a2;
  v10 = *(_OWORD *)(a2 + 48);
  v11 = *(_OWORD *)(a2 + 64);
  v12 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v8 + 40) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v8 + 88) = v11;
  *(_OWORD *)(v8 + 72) = v10;
  *(_OWORD *)(v8 + 56) = v12;
  if (a3 && (_DWORD)v6)
  {
    memmove(v8 + 104, a3, v6);
    v9[v6 + 104] = 0;
  }
  v13 = *(_DWORD *)(a1 + 140);
  *(_DWORD *)(a1 + 140) = v13 + 1;
  *((_DWORD *)v9 + 22) = v13;
  v14 = *(_QWORD *)(a1 + 104);
  if (!*(_QWORD *)v14)
  {
    *(_QWORD *)v14 = v9;
    *(_QWORD *)v9 = 0;
  }
  v15 = *(_QWORD *)(v14 + 8);
  if (v15)
  {
    *(_QWORD *)(v15 + 8) = v9;
    *(_QWORD *)v9 = v15;
  }
  *((_QWORD *)v9 + 1) = 0;
  *(_QWORD *)(v14 + 8) = v9;
  ++*(_DWORD *)(v14 + 16);
  return v9;
}

char *PPStreamInsertOperationBeforeChunk(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4)
{
  size_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  int v15;
  uint64_t v16;
  unint64_t v17;

  v8 = *(unsigned int *)(a2 + 72);
  if ((_DWORD)v8)
    v9 = (v8 + 81);
  else
    v9 = 80;
  v10 = (char *)PPStreamChunkCreate(v9);
  v11 = v10;
  v10[16] = 11;
  *(_OWORD *)(v10 + 24) = *(_OWORD *)a2;
  v12 = *(_OWORD *)(a2 + 48);
  v13 = *(_OWORD *)(a2 + 64);
  v14 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v10 + 40) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v10 + 88) = v13;
  *(_OWORD *)(v10 + 72) = v12;
  *(_OWORD *)(v10 + 56) = v14;
  if (a3 && (_DWORD)v8)
  {
    memmove(v10 + 104, a3, v8);
    v11[v8 + 104] = 0;
  }
  v15 = *(_DWORD *)(a1 + 140);
  *(_DWORD *)(a1 + 140) = v15 + 1;
  *((_DWORD *)v11 + 22) = v15;
  if (a4)
  {
    v16 = *((_QWORD *)v11 + 3);
    *((_QWORD *)v11 + 3) = v16 & 0xFFFFFFFFFFFFFFC7 | (8 * ((*(_QWORD *)(a4 + 24) >> 3) & 7));
    v17 = *(_QWORD *)(a4 + 24);
    *(_QWORD *)(a4 + 24) = v17 & 0xFFFFFFFFFFFFFFC7 | (8 * (v16 & 7));
    *((_QWORD *)v11 + 3) = *((_QWORD *)v11 + 3) & 0xFFFFFFFFFFFFBFFFLL | (((v17 >> 14) & 1) << 14);
    *(_QWORD *)(a4 + 24) &= ~0x4000uLL;
    LODWORD(v17) = *((_DWORD *)v11 + 22);
    *((_DWORD *)v11 + 22) = *(_DWORD *)(a4 + 88);
    *(_DWORD *)(a4 + 88) = v17;
  }
  PPStreamChunkListInsertChunkBeforeChunk(*(_QWORD *)(a1 + 104), v11, a4);
  return v11;
}

char *PPStreamInsertOperationAfterChunk(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4)
{
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  int v16;
  uint64_t v17;

  v8 = *(_QWORD *)(a4 + 8);
  v9 = *(unsigned int *)(a2 + 72);
  if ((_DWORD)v9)
    v10 = (v9 + 81);
  else
    v10 = 80;
  v11 = (char *)PPStreamChunkCreate(v10);
  v12 = v11;
  v11[16] = 11;
  *(_OWORD *)(v11 + 24) = *(_OWORD *)a2;
  v13 = *(_OWORD *)(a2 + 48);
  v14 = *(_OWORD *)(a2 + 64);
  v15 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v11 + 40) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v11 + 88) = v14;
  *(_OWORD *)(v11 + 72) = v13;
  *(_OWORD *)(v11 + 56) = v15;
  if (a3 && (_DWORD)v9)
  {
    memmove(v11 + 104, a3, v9);
    v12[v9 + 104] = 0;
  }
  v16 = *(_DWORD *)(a1 + 140);
  *(_DWORD *)(a1 + 140) = v16 + 1;
  *((_DWORD *)v12 + 22) = v16;
  v17 = *((_QWORD *)v12 + 3);
  *((_QWORD *)v12 + 3) = v17 & 0xFFFFFFFFFFFFFFC7 | (8 * (*(_DWORD *)(a4 + 24) & 7));
  if (v8)
    *(_QWORD *)(v8 + 24) = *(_QWORD *)(v8 + 24) & 0xFFFFFFFFFFFFFFC7 | (8 * (v17 & 7));
  PPStreamChunkListInsertChunkAfterChunk(*(_QWORD *)(a1 + 104), v12, a4);
  return v12;
}

char *PPStreamAddLabel(uint64_t a1, const void *a2, unsigned int a3)
{
  size_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v6 = a3;
  v7 = (char *)PPStreamChunkCreate(a3 + 9);
  v7[16] = 14;
  *((_DWORD *)v7 + 7) = a3;
  *((_DWORD *)v7 + 6) = *(_DWORD *)(a1 + 140);
  memmove(v7 + 32, a2, v6);
  v7[a3 + 32] = 0;
  v8 = *(_QWORD *)(a1 + 112);
  if (!*(_QWORD *)v8)
  {
    *(_QWORD *)v8 = v7;
    *(_QWORD *)v7 = 0;
  }
  v9 = *(_QWORD *)(v8 + 8);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = v7;
    *(_QWORD *)v7 = v9;
  }
  *((_QWORD *)v7 + 1) = 0;
  *(_QWORD *)(v8 + 8) = v7;
  ++*(_DWORD *)(v8 + 16);
  return v7;
}

void PPStreamRemoveLabelsAtOperationIndex(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v5;

  v3 = **(_QWORD **)(a1 + 112);
  if (v3)
  {
    do
    {
      v5 = *(_QWORD *)(v3 + 8);
      if (*(_DWORD *)(v3 + 24) == a2)
        PPStreamChunkListRemoveChunk(*(_QWORD *)(a1 + 112), (uint64_t *)v3);
      v3 = v5;
    }
    while (v5);
  }
}

_BYTE *PPStreamAddConstant(uint64_t a1, _DWORD *a2)
{
  _BYTE *result;
  uint64_t v5;
  uint64_t v6;

  result = PPStreamChunkCreate(16);
  result[16] = 13;
  *((_DWORD *)result + 6) = *a2;
  *((_DWORD *)result + 7) = a2[1];
  *((_DWORD *)result + 8) = a2[2];
  *((_DWORD *)result + 9) = a2[3];
  v5 = *(_QWORD *)(a1 + 128);
  if (!*(_QWORD *)v5)
  {
    *(_QWORD *)v5 = result;
    *(_QWORD *)result = 0;
  }
  v6 = *(_QWORD *)(v5 + 8);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = result;
    *(_QWORD *)result = v6;
  }
  *((_QWORD *)result + 1) = 0;
  *(_QWORD *)(v5 + 8) = result;
  ++*(_DWORD *)(v5 + 16);
  return result;
}

_BYTE *PPStreamAddRasterOp(uint64_t a1, _QWORD *a2)
{
  _BYTE *result;
  uint64_t v5;
  uint64_t v6;

  result = PPStreamChunkCreate(8);
  result[16] = 12;
  *((_QWORD *)result + 3) = *a2;
  v5 = *(_QWORD *)(a1 + 120);
  if (!*(_QWORD *)v5)
  {
    *(_QWORD *)v5 = result;
    *(_QWORD *)result = 0;
  }
  v6 = *(_QWORD *)(v5 + 8);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = result;
    *(_QWORD *)result = v6;
  }
  *((_QWORD *)result + 1) = 0;
  *(_QWORD *)(v5 + 8) = result;
  ++*(_DWORD *)(v5 + 16);
  return result;
}

_BYTE *PPStreamAddOption(uint64_t a1, char a2)
{
  _BYTE *result;
  uint64_t v5;
  uint64_t v6;

  result = PPStreamChunkCreate(8);
  result[16] = 10;
  result[27] = a2;
  v5 = *(_QWORD *)(a1 + 96);
  if (!*(_QWORD *)v5)
  {
    *(_QWORD *)v5 = result;
    *(_QWORD *)result = 0;
  }
  v6 = *(_QWORD *)(v5 + 8);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = result;
    *(_QWORD *)result = v6;
  }
  *((_QWORD *)result + 1) = 0;
  *(_QWORD *)(v5 + 8) = result;
  ++*(_DWORD *)(v5 + 16);
  return result;
}

unsigned __int16 *PPStreamGetStream(uint64_t a1, _DWORD *a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned __int16 *v15;
  unsigned __int16 *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v29;

  v29 = 0;
  PPStreamChunkListGetStream(*(uint64_t **)(a1 + 32), 0, &v29);
  v4 = v29;
  PPStreamChunkListGetStream(*(uint64_t **)(a1 + 48), 0, &v29);
  v5 = v4 + v29;
  PPStreamChunkListGetStream(*(uint64_t **)(a1 + 56), 0, &v29);
  v6 = v29;
  PPStreamChunkListGetStream(*(uint64_t **)(a1 + 64), 0, &v29);
  v7 = v5 + v6 + v29;
  PPStreamChunkListGetStream(*(uint64_t **)(a1 + 72), 0, &v29);
  v8 = v29;
  PPStreamChunkListGetStream(*(uint64_t **)(a1 + 80), 0, &v29);
  v9 = v8 + v29;
  PPStreamChunkListGetStream(*(uint64_t **)(a1 + 88), 0, &v29);
  v10 = v7 + v9 + v29;
  PPStreamChunkListGetStream(*(uint64_t **)(a1 + 96), 0, &v29);
  v11 = v29;
  PPStreamChunkListGetStream(*(uint64_t **)(a1 + 104), 0, &v29);
  v12 = v11 + v29;
  PPStreamChunkListGetStream(*(uint64_t **)(a1 + 120), 0, &v29);
  v13 = v10 + v12 + v29 + 18 - ((v10 + v12 + v29 + 18) | 0xFFFFFFFE);
  PPStreamChunkListGetStream(*(uint64_t **)(a1 + 128), 0, &v29);
  v14 = v13 + v29;
  *a2 = v13 + v29;
  v15 = (unsigned __int16 *)malloc_type_malloc(8 * v14, 0x7081ABB9uLL);
  if (!v15)
    abort();
  v16 = v15;
  bzero(v15, 8 * *a2);
  *(_QWORD *)v16 = *(_QWORD *)a1;
  PPStreamChunkListGetStream(*(uint64_t **)(a1 + 16), (uint64_t)(v16 + 4), &v29);
  PPStreamChunkListGetStream(*(uint64_t **)(a1 + 24), (uint64_t)(v16 + 8), &v29);
  *((_DWORD *)v16 + 6) = *a2;
  *((_DWORD *)v16 + 10) = *(_DWORD *)(*(_QWORD *)(a1 + 40) + 16);
  *((_DWORD *)v16 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 16);
  *((_DWORD *)v16 + 9) = 18;
  PPStreamChunkListGetStream(*(uint64_t **)(a1 + 32), (uint64_t)(v16 + 72), &v29);
  v17 = v29 + 18;
  *((_DWORD *)v16 + 12) = *(_DWORD *)(*(_QWORD *)(a1 + 48) + 16);
  *((_DWORD *)v16 + 13) = v17;
  PPStreamChunkListGetStream(*(uint64_t **)(a1 + 48), (uint64_t)&v16[4 * v17], &v29);
  v18 = v29 + v17;
  *((_DWORD *)v16 + 14) = *(_DWORD *)(*(_QWORD *)(a1 + 56) + 16);
  *((_DWORD *)v16 + 15) = v18;
  PPStreamChunkListGetStream(*(uint64_t **)(a1 + 56), (uint64_t)&v16[4 * v18], &v29);
  v19 = v29 + v18;
  *((_DWORD *)v16 + 16) = *(_DWORD *)(*(_QWORD *)(a1 + 64) + 16);
  *((_DWORD *)v16 + 17) = v19;
  PPStreamChunkListGetStream(*(uint64_t **)(a1 + 64), (uint64_t)&v16[4 * v19], &v29);
  v20 = v29 + v19;
  *((_DWORD *)v16 + 18) = *(_DWORD *)(*(_QWORD *)(a1 + 72) + 16);
  *((_DWORD *)v16 + 19) = v20;
  PPStreamChunkListGetStream(*(uint64_t **)(a1 + 72), (uint64_t)&v16[4 * v20], &v29);
  v21 = v29 + v20;
  *((_DWORD *)v16 + 20) = *(_DWORD *)(*(_QWORD *)(a1 + 80) + 16);
  *((_DWORD *)v16 + 21) = v21;
  PPStreamChunkListGetStream(*(uint64_t **)(a1 + 80), (uint64_t)&v16[4 * v21], &v29);
  v22 = v29 + v21;
  *((_DWORD *)v16 + 22) = *(_DWORD *)(*(_QWORD *)(a1 + 88) + 16);
  *((_DWORD *)v16 + 23) = v22;
  PPStreamChunkListGetStream(*(uint64_t **)(a1 + 88), (uint64_t)&v16[4 * v22], &v29);
  v23 = v29 + v22;
  *((_DWORD *)v16 + 24) = *(_DWORD *)(*(_QWORD *)(a1 + 96) + 16);
  *((_DWORD *)v16 + 25) = v23;
  PPStreamChunkListGetStream(*(uint64_t **)(a1 + 96), (uint64_t)&v16[4 * v23], &v29);
  v24 = v29 + v23;
  *((_DWORD *)v16 + 26) = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 16);
  *((_DWORD *)v16 + 27) = v24;
  PPStreamChunkListGetStream(*(uint64_t **)(a1 + 104), (uint64_t)&v16[4 * v24], &v29);
  v25 = v29 + v24;
  if (v29)
    *(_QWORD *)&v16[4 * v25] = *(_QWORD *)&v16[4 * v25] & 0xFFFFFFFFFFFFFFC7 | (8
                                                                                * (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8)
                                                                                             + 24) & 7));
  *((_DWORD *)v16 + 30) = *(_DWORD *)(a1 + 8);
  *((_DWORD *)v16 + 31) = v25;
  *(_DWORD *)(a1 + 12) = v25;
  v26 = v25 + 1;
  *((_DWORD *)v16 + 32) = *(_DWORD *)(*(_QWORD *)(a1 + 120) + 16);
  *((_DWORD *)v16 + 33) = v25 + 1;
  PPStreamChunkListGetStream(*(uint64_t **)(a1 + 120), (uint64_t)&v16[4 * (v25 + 1)], &v29);
  v27 = v29 + v26;
  if (((v29 + v26) & 1) != 0)
    *(_QWORD *)&v16[4 * v27++] = 0;
  *((_DWORD *)v16 + 34) = *(_DWORD *)(*(_QWORD *)(a1 + 128) + 16);
  *((_DWORD *)v16 + 35) = v27;
  PPStreamChunkListGetStream(*(uint64_t **)(a1 + 128), (uint64_t)&v16[4 * v27], &v29);
  PPStreamTokenAddRequirements(v16);
  return v16;
}

unsigned __int16 *PPStreamTokenAddRequirements(unsigned __int16 *result)
{
  unint64_t v1;
  uint64_t v2;
  int v3;
  _BOOL4 v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned __int16 *v10;
  int v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  unsigned int v19;
  _BOOL4 v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t **v25;
  unint64_t v26;
  unsigned int v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  unsigned __int16 *v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int16 *v40;
  uint64_t v41;
  uint64_t v44;
  unsigned __int16 *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int16 *v50;
  uint64_t v51;
  unint64_t v52;
  _OWORD v53[3];
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  memset(v53, 0, sizeof(v53));
  v1 = *((_QWORD *)result + 1);
  v2 = *((_QWORD *)result + 2);
  v3 = *result;
  v5 = v3 != 34336 && v3 != 34820;
  v6 = *((unsigned int *)result + 27);
  v7 = *((unsigned int *)result + 31);
  if ((_DWORD)v6 == (_DWORD)v7)
  {
LABEL_47:
    v11 = 0;
    v8 = *((_DWORD *)result + 27);
    goto LABEL_48;
  }
  v8 = 0;
  v9 = 0;
  v10 = &result[4 * v7];
  v11 = -1;
  v12 = (char *)&result[4 * v6];
  do
  {
    v13 = *(_QWORD *)v12;
    v14 = *(_QWORD *)v12 & 7;
    if (v3 != 34336 && v3 != 34820 && (_DWORD)v14)
    {
      v15 = v12 + 16;
      v16 = *(_QWORD *)v12 & 7;
      v17 = v53;
      do
      {
        *v17++ = v15++;
        --v16;
      }
      while (v16);
    }
    v18 = 0;
    v19 = (v13 >> 6);
    if (v19 > 0x61)
    {
      v23 = v19 - 130;
      if (v23 > 0x24)
        goto LABEL_21;
      if (((1 << (v19 + 126)) & 0x1800000003) != 0)
        goto LABEL_22;
      if (v23 != 34)
      {
LABEL_21:
        if (v19 - 98 >= 2)
        {
LABEL_45:
          v22 = 0;
          goto LABEL_23;
        }
LABEL_22:
        v22 = -1;
        v18 = v5;
        goto LABEL_23;
      }
      v18 = -1;
      v20 = v5;
LABEL_43:
      v22 = v18;
      v1 |= 0x1000000uLL;
      v18 = v20;
    }
    else
    {
      v21 = v19 - 65;
      v20 = 0;
      v22 = 0;
      switch(v21)
      {
        case 0u:
          v18 = 0;
          v22 = -1;
          break;
        case 1u:
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 6u:
          goto LABEL_22;
        case 7u:
        case 8u:
        case 9u:
        case 0xAu:
        case 0xBu:
        case 0xCu:
        case 0xDu:
        case 0xFu:
          break;
        case 0xEu:
          v18 = 0;
          v22 = 0;
          v1 |= 2uLL;
          break;
        case 0x10u:
          goto LABEL_43;
        default:
          goto LABEL_45;
      }
    }
LABEL_23:
    if (v3 != 34336 && v3 != 34820)
    {
      v24 = (v22 + v14);
      if ((_DWORD)v24)
      {
        v25 = (unint64_t **)v53;
        while (1)
        {
          v26 = **v25;
          v27 = (v26 >> 19) & 3;
          if (v27 == 2)
            goto LABEL_32;
          if (v27 == 1)
            goto LABEL_31;
          if (!v27)
            break;
LABEL_33:
          ++v25;
          if (!--v24)
            goto LABEL_34;
        }
        v26 = v26 & 0xFFFFFFFFFFFFE7FFLL | (((v26 >> 9) & 3) << 11);
LABEL_31:
        v26 = v26 & 0xFFFFFFFFFFFF9FFFLL | (((v26 >> 11) & 3) << 13);
LABEL_32:
        **v25 = v26 & 0xFFFFFFFFFFFE7FFFLL | (((v26 >> 13) & 3) << 15);
        goto LABEL_33;
      }
LABEL_34:
      if (v18)
      {
        v28 = &v12[8 * (v13 & 7)];
        if ((*(_QWORD *)v28 & 0x1C0) == 0x80)
          v29 = *((_QWORD *)v28 + 1) & 0xFFFFFFFFFFC000FFLL | ((HIDWORD(*(_QWORD *)((char *)&result[4 * *((unsigned int *)result + 15)]
                                                                                  + ((*(_QWORD *)v28 >> 45) & 0x7FFF8))) & 0x3FFFLL) << 8);
        else
          v29 = *((_QWORD *)v28 + 1) | 0x3FFF00;
        *((_QWORD *)v28 + 1) = v29;
      }
    }
    v1 |= (*(_QWORD *)v12 >> 33) & 1;
    if ((*(_QWORD *)v12 & 0x4000) != 0)
    {
      v11 = v9;
      v8 = (unint64_t)(v12 - (char *)result) >> 3;
    }
    ++v9;
    v12 += 8 * (*(_QWORD *)v12 & 7) + 16;
  }
  while (v12 != (char *)v10);
  if (v11 == -1)
    goto LABEL_47;
LABEL_48:
  *((_DWORD *)result + 28) = v11;
  *((_DWORD *)result + 29) = v8;
  if (v3 > 35632)
  {
    if ((v3 - 36487) >= 2 && v3 != 35633 && v3 != 36313)
      goto LABEL_97;
    goto LABEL_85;
  }
  if (v3 == 34336)
  {
LABEL_85:
    v44 = *((unsigned int *)result + 16);
    if ((_DWORD)v44)
    {
      v45 = &result[4 * *((unsigned int *)result + 17)];
      v46 = 8 * v44;
      do
      {
        v47 = *(_QWORD *)v45;
        switch((*(_QWORD *)v45 >> 8) & 0x1F)
        {
          case 3u:
            v1 |= 0x10uLL;
            break;
          case 4u:
          case 5u:
            v1 |= (v47 >> 27) & 0x20;
            break;
          case 9u:
            v1 |= 4uLL;
            break;
          case 0xAu:
            v1 = v1 & 0xFFFFFFFFFFFFFF3FLL | ((64 << SBYTE4(v47)) | v1) & 0xC0;
            break;
          default:
            break;
        }
        v48 = (v47 >> 13) & 1;
        if (v3 == 34336)
          v48 = 0;
        v1 |= v48;
        v45 += 4;
        v46 -= 8;
      }
      while (v46);
    }
    goto LABEL_97;
  }
  if (v3 == 34820 || v3 == 35632)
  {
    v30 = *((unsigned int *)result + 12);
    if ((_DWORD)v30)
    {
      v31 = &result[4 * *((unsigned int *)result + 13)];
      v32 = 8 * v30;
      while (2)
      {
        v33 = *(_QWORD *)v31;
        v34 = (*(_QWORD *)v31 >> 10) & 0x1F;
        switch(v34)
        {
          case 1u:
            v1 = v1 & 0xFFFFFFFFFFFFCFFFLL | (v33 >> 20) & 0x3000 | 0x100;
            goto LABEL_71;
          case 2u:
            v1 |= 0x2000000uLL;
            LOBYTE(v35) = 2;
            goto LABEL_60;
          case 3u:
            v1 |= 0x4000000uLL;
            LOBYTE(v35) = 3;
            goto LABEL_60;
          case 4u:
          case 5u:
          case 6u:
          case 7u:
          case 8u:
          case 9u:
          case 0xAu:
          case 0xDu:
          case 0xFu:
            goto LABEL_71;
          case 0xBu:
            v1 |= 0x400uLL;
            goto LABEL_71;
          case 0xCu:
            v1 |= 0x200uLL;
            goto LABEL_71;
          case 0xEu:
            v1 = v1 & 0xFFFFFFFFFFFFFF3FLL | ((64 << SBYTE4(v33)) | v1) & 0xC0;
            goto LABEL_71;
          case 0x10u:
            v1 |= 0x800uLL;
            goto LABEL_71;
          default:
            if (v34 != 28)
              goto LABEL_71;
            v35 = HIDWORD(v33) & 0x3F;
LABEL_60:
            v36 = v2 & ~(0x100000001 << v35);
            if ((v33 & 0x100) != 0)
              v37 = 0x100000000;
            else
              v37 = 0x100000001;
            if ((v33 & 0x8000) != 0)
              v38 = 1;
            else
              v38 = v37;
            v2 = v36 | (v38 << v35);
LABEL_71:
            v31 += 4;
            v32 -= 8;
            if (!v32)
              break;
            continue;
        }
        break;
      }
    }
    v39 = *((unsigned int *)result + 16);
    if ((_DWORD)v39)
    {
      v40 = &result[4 * *((unsigned int *)result + 17)];
      v41 = 8 * v39;
      while ((*(_QWORD *)v40 & 0x1F00) != 0x700)
      {
        v40 += 4;
        v41 -= 8;
        if (!v41)
          goto LABEL_97;
      }
      v1 |= 8uLL;
    }
  }
LABEL_97:
  v49 = *((unsigned int *)result + 8);
  if ((_DWORD)v49)
  {
    v50 = &result[4 * *((unsigned int *)result + 9)];
    v51 = 8 * v49;
    do
    {
      v52 = *(_QWORD *)v50;
      v50 += 4;
      v1 |= (v52 >> 8) & 1;
      v51 -= 8;
    }
    while (v51);
  }
  *((_QWORD *)result + 1) = v1;
  *((_QWORD *)result + 2) = v2;
  return result;
}

uint64_t PPStreamTokenAddRasterRequirements(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  unint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  v1 = *(_QWORD *)(result + 8) & 0x100;
  v2 = *(unsigned int *)(result + 128);
  if ((_DWORD)v2)
  {
    v3 = 0;
    v4 = (unint64_t *)(result + 8 * *(unsigned int *)(result + 132));
    v5 = 8 * v2;
    do
    {
      v6 = *v4++;
      v7 = v6 >> 3;
      v8 = v1 | 0x4000;
      v9 = (v6 >> 16) & 0xFF0000 | v1;
      v10 = ((v6 >> 8) & 0xF) - 9;
      v11 = v10 >= 2;
      if (v10 >= 2)
        v12 = v9;
      else
        v12 = v9 | 0x100;
      if (v11)
        v13 = v3;
      else
        v13 = 1;
      if (v7 != 19)
      {
        v12 = v1;
        v13 = v3;
      }
      if (v7 == 5)
      {
        v12 = v1 | 0x4000;
        v13 = 1;
      }
      if (v7 == 4)
        v1 |= 0x8000uLL;
      if (v7 == 1)
        v1 = v8;
      if (v7 > 4)
      {
        v1 = v12;
        v3 = v13;
      }
      v5 -= 8;
    }
    while (v5);
    if (v3)
    {
      v14 = *(unsigned int *)(result + 64);
      if ((_DWORD)v14)
      {
        v15 = (_QWORD *)(result + 8 * *(unsigned int *)(result + 68));
        v16 = 8 * v14;
        while ((*v15 & 0x1F00) != 0x700)
        {
          ++v15;
          v16 -= 8;
          if (!v16)
            goto LABEL_27;
        }
        v1 |= 8uLL;
      }
    }
  }
LABEL_27:
  *(_QWORD *)(result + 8) = v1 | *(_QWORD *)(result + 8) & 0xFFFFFFFFFF003EF7;
  return result;
}

void *PPStreamTokenAlloc(size_t a1)
{
  void *result;

  result = malloc_type_malloc(a1, 0x7081ABB9uLL);
  if (!result)
    abort();
  return result;
}

uint64_t PPStreamGetTexOperationCount(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = **(_QWORD **)(a1 + 104);
  if (!v1)
    return 0;
  LODWORD(result) = 0;
  do
  {
    result = ((*(_DWORD *)(v1 + 24) >> 15) & 1) + result;
    v1 = *(_QWORD *)(v1 + 8);
  }
  while (v1);
  return result;
}

uint64_t PPStreamAttachStream(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  _QWORD *v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  _DWORD *v69;
  _BYTE *v70;
  uint64_t v71;
  uint64_t v72;

  PPStreamChunkListRemoveChunk(*(_QWORD *)(a1 + 16), **(uint64_t ***)(a1 + 16));
  PPStreamChunkListRemoveChunk(*(_QWORD *)(a1 + 24), **(uint64_t ***)(a1 + 24));
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = PPStreamChunkCreate(8);
  v4[16] = 0;
  v5 = *(_QWORD *)(a1 + 16);
  if (!*(_QWORD *)v5)
  {
    *(_QWORD *)v5 = v4;
    *(_QWORD *)v4 = 0;
  }
  v6 = *(_QWORD *)(v5 + 8);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = v4;
    *(_QWORD *)v4 = v6;
  }
  *((_QWORD *)v4 + 1) = 0;
  *(_QWORD *)(v5 + 8) = v4;
  ++*(_DWORD *)(v5 + 16);
  v7 = PPStreamChunkCreate(8);
  v7[16] = 1;
  v8 = *(_QWORD *)(a1 + 24);
  if (!*(_QWORD *)v8)
  {
    *(_QWORD *)v8 = v7;
    *(_QWORD *)v7 = 0;
  }
  v9 = *(_QWORD *)(v8 + 8);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = v7;
    *(_QWORD *)v7 = v9;
  }
  *((_QWORD *)v7 + 1) = 0;
  *(_QWORD *)(v8 + 8) = v7;
  ++*(_DWORD *)(v8 + 16);
  if (*(_DWORD *)(a2 + 40))
  {
    v10 = 0;
    do
    {
      v11 = PPStreamChunkCreate(4);
      v11[16] = 3;
      *((_DWORD *)v11 + 6) = v10;
      v12 = *(_QWORD *)(a1 + 40);
      if (!*(_QWORD *)v12)
      {
        *(_QWORD *)v12 = v11;
        *(_QWORD *)v11 = 0;
      }
      v13 = *(_QWORD *)(v12 + 8);
      if (v13)
      {
        *(_QWORD *)(v13 + 8) = v11;
        *(_QWORD *)v11 = v13;
      }
      *((_QWORD *)v11 + 1) = 0;
      *(_QWORD *)(v12 + 8) = v11;
      ++*(_DWORD *)(v12 + 16);
      ++v10;
    }
    while (v10 < *(_DWORD *)(a2 + 40));
  }
  if (*(_DWORD *)(a2 + 32))
  {
    v14 = 0;
    v15 = a2 + 8 * *(unsigned int *)(a2 + 36);
    do
    {
      v16 = PPStreamChunkCreate(16);
      v16[16] = 2;
      *((_QWORD *)v16 + 3) = *(_QWORD *)(v15 + 8 * v14);
      *((_DWORD *)v16 + 8) = v14;
      v17 = *(_QWORD *)(a1 + 32);
      if (!*(_QWORD *)v17)
      {
        *(_QWORD *)v17 = v16;
        *(_QWORD *)v16 = 0;
      }
      v18 = *(_QWORD *)(v17 + 8);
      if (v18)
      {
        *(_QWORD *)(v18 + 8) = v16;
        *(_QWORD *)v16 = v18;
      }
      ++v14;
      *((_QWORD *)v16 + 1) = 0;
      *(_QWORD *)(v17 + 8) = v16;
      ++*(_DWORD *)(v17 + 16);
    }
    while (v14 < *(_DWORD *)(a2 + 32));
  }
  if (*(_DWORD *)(a2 + 48))
  {
    v19 = 0;
    v20 = a2 + 8 * *(unsigned int *)(a2 + 52);
    do
    {
      v21 = PPStreamChunkCreate(16);
      v21[16] = 4;
      *((_QWORD *)v21 + 3) = *(_QWORD *)(v20 + 8 * v19);
      *((_DWORD *)v21 + 8) = v19;
      v22 = *(_QWORD *)(a1 + 48);
      if (!*(_QWORD *)v22)
      {
        *(_QWORD *)v22 = v21;
        *(_QWORD *)v21 = 0;
      }
      v23 = *(_QWORD *)(v22 + 8);
      if (v23)
      {
        *(_QWORD *)(v23 + 8) = v21;
        *(_QWORD *)v21 = v23;
      }
      ++v19;
      *((_QWORD *)v21 + 1) = 0;
      *(_QWORD *)(v22 + 8) = v21;
      ++*(_DWORD *)(v22 + 16);
    }
    while (v19 < *(_DWORD *)(a2 + 48));
  }
  if (*(_DWORD *)(a2 + 56))
  {
    v24 = 0;
    v25 = a2 + 8 * *(unsigned int *)(a2 + 60);
    do
    {
      v26 = PPStreamChunkCreate(16);
      v26[16] = 5;
      *((_QWORD *)v26 + 3) = *(_QWORD *)(v25 + 8 * v24);
      *((_DWORD *)v26 + 8) = v24;
      v27 = *(_QWORD *)(a1 + 56);
      if (!*(_QWORD *)v27)
      {
        *(_QWORD *)v27 = v26;
        *(_QWORD *)v26 = 0;
      }
      v28 = *(_QWORD *)(v27 + 8);
      if (v28)
      {
        *(_QWORD *)(v28 + 8) = v26;
        *(_QWORD *)v26 = v28;
      }
      ++v24;
      *((_QWORD *)v26 + 1) = 0;
      *(_QWORD *)(v27 + 8) = v26;
      ++*(_DWORD *)(v27 + 16);
    }
    while (v24 < *(_DWORD *)(a2 + 56));
  }
  if (*(_DWORD *)(a2 + 64))
  {
    v29 = 0;
    v30 = a2 + 8 * *(unsigned int *)(a2 + 68);
    do
    {
      v31 = PPStreamChunkCreate(16);
      v31[16] = 6;
      *((_QWORD *)v31 + 3) = *(_QWORD *)(v30 + 8 * v29);
      *((_DWORD *)v31 + 8) = v29;
      v32 = *(_QWORD *)(a1 + 64);
      if (!*(_QWORD *)v32)
      {
        *(_QWORD *)v32 = v31;
        *(_QWORD *)v31 = 0;
      }
      v33 = *(_QWORD *)(v32 + 8);
      if (v33)
      {
        *(_QWORD *)(v33 + 8) = v31;
        *(_QWORD *)v31 = v33;
      }
      ++v29;
      *((_QWORD *)v31 + 1) = 0;
      *(_QWORD *)(v32 + 8) = v31;
      ++*(_DWORD *)(v32 + 16);
    }
    while (v29 < *(_DWORD *)(a2 + 64));
  }
  if (*(_DWORD *)(a2 + 72))
  {
    v34 = 0;
    v35 = a2 + 8 * *(unsigned int *)(a2 + 76);
    do
    {
      v36 = PPStreamChunkCreate(8);
      v36[16] = 7;
      *((_QWORD *)v36 + 3) = *(_QWORD *)(v35 + 8 * v34);
      v37 = *(_QWORD *)(a1 + 72);
      if (!*(_QWORD *)v37)
      {
        *(_QWORD *)v37 = v36;
        *(_QWORD *)v36 = 0;
      }
      v38 = *(_QWORD *)(v37 + 8);
      if (v38)
      {
        *(_QWORD *)(v38 + 8) = v36;
        *(_QWORD *)v36 = v38;
      }
      ++v34;
      *((_QWORD *)v36 + 1) = 0;
      *(_QWORD *)(v37 + 8) = v36;
      ++*(_DWORD *)(v37 + 16);
    }
    while (v34 < *(_DWORD *)(a2 + 72));
  }
  if (*(_DWORD *)(a2 + 80))
  {
    v39 = 0;
    v40 = a2 + 8 * *(unsigned int *)(a2 + 84);
    do
    {
      v41 = PPStreamChunkCreate(8);
      v41[16] = 8;
      *((_QWORD *)v41 + 3) = *(_QWORD *)(v40 + 8 * v39);
      v42 = *(_QWORD *)(a1 + 80);
      if (!*(_QWORD *)v42)
      {
        *(_QWORD *)v42 = v41;
        *(_QWORD *)v41 = 0;
      }
      v43 = *(_QWORD *)(v42 + 8);
      if (v43)
      {
        *(_QWORD *)(v43 + 8) = v41;
        *(_QWORD *)v41 = v43;
      }
      ++v39;
      *((_QWORD *)v41 + 1) = 0;
      *(_QWORD *)(v42 + 8) = v41;
      ++*(_DWORD *)(v42 + 16);
    }
    while (v39 < *(_DWORD *)(a2 + 80));
  }
  if (*(_DWORD *)(a2 + 88))
  {
    v44 = 0;
    v45 = (_QWORD *)(a2 + 8 * *(unsigned int *)(a2 + 92));
    do
    {
      v46 = PPStreamChunkCreate(16);
      v46[16] = 9;
      *((_QWORD *)v46 + 3) = *v45;
      *((_QWORD *)v46 + 4) = v45[1];
      v47 = *(_QWORD *)(a1 + 88);
      if (!*(_QWORD *)v47)
      {
        *(_QWORD *)v47 = v46;
        *(_QWORD *)v46 = 0;
      }
      v48 = *(_QWORD *)(v47 + 8);
      if (v48)
      {
        *(_QWORD *)(v48 + 8) = v46;
        *(_QWORD *)v46 = v48;
      }
      *((_QWORD *)v46 + 1) = 0;
      *(_QWORD *)(v47 + 8) = v46;
      ++*(_DWORD *)(v47 + 16);
      ++v44;
      v45 += 2;
    }
    while (v44 < *(_DWORD *)(a2 + 88));
  }
  if (*(_DWORD *)(a2 + 96))
  {
    v49 = 0;
    v50 = a2 + 8 * *(unsigned int *)(a2 + 100);
    do
    {
      v51 = PPStreamChunkCreate(8);
      v51[16] = 10;
      *((_QWORD *)v51 + 3) = *(_QWORD *)(v50 + 8 * v49);
      v52 = *(_QWORD *)(a1 + 96);
      if (!*(_QWORD *)v52)
      {
        *(_QWORD *)v52 = v51;
        *(_QWORD *)v51 = 0;
      }
      v53 = *(_QWORD *)(v52 + 8);
      if (v53)
      {
        *(_QWORD *)(v53 + 8) = v51;
        *(_QWORD *)v51 = v53;
      }
      ++v49;
      *((_QWORD *)v51 + 1) = 0;
      *(_QWORD *)(v52 + 8) = v51;
      ++*(_DWORD *)(v52 + 16);
    }
    while (v49 < *(_DWORD *)(a2 + 96));
  }
  if (*(_DWORD *)(a2 + 104))
  {
    v54 = 0;
    v55 = (uint64_t *)(a2 + 8 * *(unsigned int *)(a2 + 108));
    do
    {
      v56 = (char *)PPStreamChunkCreate(80);
      v56[16] = 11;
      *((_DWORD *)v56 + 24) = 0;
      v57 = *v55;
      *((_QWORD *)v56 + 3) = *v55;
      *((_DWORD *)v56 + 22) = v54;
      *((_QWORD *)v56 + 4) = v55[1];
      v55 += 2;
      v58 = v57 & 7;
      if (v58)
      {
        v59 = v56 + 40;
        do
        {
          v60 = *v55++;
          *v59++ = v60;
          --v58;
        }
        while (v58);
      }
      v61 = *(_QWORD *)(a1 + 104);
      if (!*(_QWORD *)v61)
      {
        *(_QWORD *)v61 = v56;
        *(_QWORD *)v56 = 0;
      }
      v62 = *(_QWORD *)(v61 + 8);
      if (v62)
      {
        *(_QWORD *)(v62 + 8) = v56;
        *(_QWORD *)v56 = v62;
      }
      *((_QWORD *)v56 + 1) = 0;
      *(_QWORD *)(v61 + 8) = v56;
      ++*(_DWORD *)(v61 + 16);
      ++v54;
    }
    while (v54 < *(_DWORD *)(a2 + 104));
  }
  else
  {
    v54 = 0;
  }
  *(_DWORD *)(a1 + 140) = v54;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 120);
  if (*(_DWORD *)(a2 + 128))
  {
    v63 = 0;
    v64 = a2 + 8 * *(unsigned int *)(a2 + 132);
    do
    {
      v65 = PPStreamChunkCreate(8);
      v65[16] = 12;
      *((_QWORD *)v65 + 3) = *(_QWORD *)(v64 + 8 * v63);
      v66 = *(_QWORD *)(a1 + 120);
      if (!*(_QWORD *)v66)
      {
        *(_QWORD *)v66 = v65;
        *(_QWORD *)v65 = 0;
      }
      v67 = *(_QWORD *)(v66 + 8);
      if (v67)
      {
        *(_QWORD *)(v67 + 8) = v65;
        *(_QWORD *)v65 = v67;
      }
      ++v63;
      *((_QWORD *)v65 + 1) = 0;
      *(_QWORD *)(v66 + 8) = v65;
      ++*(_DWORD *)(v66 + 16);
    }
    while (v63 < *(_DWORD *)(a2 + 128));
  }
  if (*(_DWORD *)(a2 + 136))
  {
    v68 = 0;
    v69 = (_DWORD *)(a2 + 8 * *(unsigned int *)(a2 + 140));
    do
    {
      v70 = PPStreamChunkCreate(16);
      v70[16] = 13;
      *((_DWORD *)v70 + 6) = *v69;
      *((_DWORD *)v70 + 7) = v69[1];
      *((_DWORD *)v70 + 8) = v69[2];
      *((_DWORD *)v70 + 9) = v69[3];
      v71 = *(_QWORD *)(a1 + 128);
      if (!*(_QWORD *)v71)
      {
        *(_QWORD *)v71 = v70;
        *(_QWORD *)v70 = 0;
      }
      v72 = *(_QWORD *)(v71 + 8);
      if (v72)
      {
        *(_QWORD *)(v72 + 8) = v70;
        *(_QWORD *)v70 = v72;
      }
      *((_QWORD *)v70 + 1) = 0;
      *(_QWORD *)(v71 + 8) = v70;
      ++*(_DWORD *)(v71 + 16);
      ++v68;
      v69 += 4;
    }
    while (v68 < *(_DWORD *)(a2 + 136));
  }
  return 0;
}

BOOL PPStreamCompare(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a1 != *(_QWORD *)a2
      || PPStreamChunkListCompare(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16))
      || PPStreamChunkListCompare(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24))
      || PPStreamChunkListCompare(*(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32))
      || PPStreamChunkListCompare(*(_QWORD *)(a1 + 40), *(_QWORD *)(a2 + 40))
      || PPStreamChunkListCompare(*(_QWORD *)(a1 + 56), *(_QWORD *)(a2 + 56))
      || PPStreamChunkListCompare(*(_QWORD *)(a1 + 72), *(_QWORD *)(a2 + 72))
      || PPStreamChunkListCompare(*(_QWORD *)(a1 + 80), *(_QWORD *)(a2 + 80))
      || PPStreamChunkListCompare(*(_QWORD *)(a1 + 48), *(_QWORD *)(a2 + 48))
      || PPStreamChunkListCompare(*(_QWORD *)(a1 + 64), *(_QWORD *)(a2 + 64))
      || PPStreamChunkListCompare(*(_QWORD *)(a1 + 88), *(_QWORD *)(a2 + 88))
      || PPStreamChunkListCompare(*(_QWORD *)(a1 + 104), *(_QWORD *)(a2 + 104))
      || PPStreamChunkListCompare(*(_QWORD *)(a1 + 128), *(_QWORD *)(a2 + 128))
      || PPStreamChunkListCompare(*(_QWORD *)(a1 + 120), *(_QWORD *)(a2 + 120))
      || PPStreamChunkListCompare(*(_QWORD *)(a1 + 96), *(_QWORD *)(a2 + 96))
      || *(_DWORD *)(a1 + 136) != *(_DWORD *)(a2 + 136);
}

uint64_t PPStreamChangeBranchTargets(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t i;

  for (i = **(_QWORD **)(a1 + 112); i; i = *(_QWORD *)(i + 8))
  {
    if (*(_DWORD *)(i + 24) == a2)
      *(_DWORD *)(i + 24) = a3;
  }
  return renumberTargets(**(_QWORD **)(a1 + 104), a2, a3);
}

uint64_t renumberTargets(uint64_t result, int a2, uint64_t a3)
{
  unint64_t v3;
  int v4;
  uint64_t v5;

  while (result)
  {
    v3 = *(_QWORD *)(result + 24);
    v4 = (v3 >> 6);
    v5 = (v4 - 75);
    if (v5 <= 0x21)
    {
      if (((1 << (v4 - 75)) & 0x38001BE05) != 0)
        goto LABEL_4;
      if (v5 == 1)
      {
        if ((*(_QWORD *)(result + 24) & 7) == 1 || v3 >> 46 != a2)
          goto LABEL_6;
LABEL_5:
        *(_QWORD *)(result + 24) = v3 & 0x3FFFFFFFFFFFLL | (a3 << 46);
        goto LABEL_6;
      }
    }
    if (v4 != 140)
      goto LABEL_6;
LABEL_4:
    if (v3 >> 46 == a2)
      goto LABEL_5;
LABEL_6:
    result = *(_QWORD *)(result + 8);
  }
  return result;
}

void PPStreamPackIndices(_QWORD *a1)
{
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  char *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  void *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  char *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  void *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  void *v41;
  _QWORD *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  char *v50;
  uint64_t i;
  uint64_t j;
  unint64_t v53;
  unint64_t v54;
  uint64_t k;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  int v60;
  uint64_t v61;
  _QWORD **v62;

  v2 = *(unsigned int *)(a1[4] + 16);
  v3 = (char *)malloc_type_malloc(4 * v2, 0x7081ABB9uLL);
  if (!v3)
    goto LABEL_65;
  v4 = v3;
  v5 = *(_QWORD *)a1[4];
  if (v5)
  {
    v6 = 0;
    do
    {
      v7 = *(_DWORD *)(v5 + 32);
      v8 = v7 + 1;
      if (v2 < v7 + 1)
      {
        v9 = (char *)malloc_type_realloc(v4, 4 * (v7 + 1), 0x2BDC8648uLL);
        if (!v9)
          goto LABEL_65;
        v4 = v9;
        v7 = *(_DWORD *)(v5 + 32);
        LODWORD(v2) = v8;
      }
      *(_DWORD *)&v4[4 * v7] = v6;
      *(_DWORD *)(v5 + 32) = v6++;
      v5 = *(_QWORD *)(v5 + 8);
    }
    while (v5);
  }
  v10 = *(unsigned int *)(a1[5] + 16);
  v11 = malloc_type_malloc(4 * v10, 0x7081ABB9uLL);
  if (!v11)
    goto LABEL_65;
  v12 = v11;
  v13 = *(_QWORD *)a1[5];
  if (v13)
  {
    v14 = 0;
    do
    {
      v15 = *(_DWORD *)(v13 + 24);
      v16 = v15 + 1;
      if (v10 < v15 + 1)
      {
        v17 = malloc_type_realloc(v12, 4 * (v15 + 1), 0x2BDC8648uLL);
        if (!v17)
          goto LABEL_65;
        v12 = v17;
        v15 = *(_DWORD *)(v13 + 24);
        LODWORD(v10) = v16;
      }
      *((_DWORD *)v12 + v15) = v14;
      *(_DWORD *)(v13 + 24) = v14++;
      v13 = *(_QWORD *)(v13 + 8);
    }
    while (v13);
  }
  v18 = *(unsigned int *)(a1[7] + 16);
  v19 = (char *)malloc_type_malloc(4 * v18, 0x7081ABB9uLL);
  if (!v19)
    goto LABEL_65;
  v20 = v19;
  v21 = *(_QWORD *)a1[7];
  if (v21)
  {
    v22 = 0;
    do
    {
      v23 = *(_DWORD *)(v21 + 32);
      v24 = v23 + 1;
      if (v18 < v23 + 1)
      {
        v25 = (char *)malloc_type_realloc(v20, 4 * (v23 + 1), 0x2BDC8648uLL);
        if (!v25)
          goto LABEL_65;
        v20 = v25;
        v23 = *(_DWORD *)(v21 + 32);
        LODWORD(v18) = v24;
      }
      *(_DWORD *)&v20[4 * v23] = v22;
      *(_DWORD *)(v21 + 32) = v22++;
      v21 = *(_QWORD *)(v21 + 8);
    }
    while (v21);
  }
  v26 = *(unsigned int *)(a1[6] + 16);
  v27 = malloc_type_malloc(4 * v26, 0x7081ABB9uLL);
  if (!v27)
    goto LABEL_65;
  v28 = v27;
  v29 = *(_QWORD *)a1[6];
  if (v29)
  {
    v30 = 0;
    do
    {
      v31 = *(_DWORD *)(v29 + 32);
      v32 = v31 + 1;
      if (v26 < v31 + 1)
      {
        v33 = malloc_type_realloc(v28, 4 * (v31 + 1), 0x2BDC8648uLL);
        if (!v33)
          goto LABEL_65;
        v28 = v33;
        v31 = *(_DWORD *)(v29 + 32);
        LODWORD(v26) = v32;
      }
      *((_DWORD *)v28 + v31) = v30;
      *(_DWORD *)(v29 + 32) = v30++;
      v29 = *(_QWORD *)(v29 + 8);
    }
    while (v29);
  }
  v34 = *(unsigned int *)(a1[8] + 16);
  v35 = malloc_type_malloc(4 * v34, 0x7081ABB9uLL);
  if (!v35)
    goto LABEL_65;
  v36 = v35;
  v37 = *(_QWORD *)a1[8];
  if (v37)
  {
    v38 = 0;
    do
    {
      v39 = *(_DWORD *)(v37 + 32);
      v40 = v39 + 1;
      if (v34 < v39 + 1)
      {
        v41 = malloc_type_realloc(v36, 4 * (v39 + 1), 0x2BDC8648uLL);
        if (!v41)
          goto LABEL_65;
        v36 = v41;
        v39 = *(_DWORD *)(v37 + 32);
        LODWORD(v34) = v40;
      }
      *((_DWORD *)v36 + v39) = v38;
      *(_DWORD *)(v37 + 32) = v38++;
      v37 = *(_QWORD *)(v37 + 8);
    }
    while (v37);
  }
  v42 = a1;
  v43 = *(unsigned int *)(a1[13] + 16);
  v44 = (char *)malloc_type_malloc(4 * v43, 0x7081ABB9uLL);
  if (!v44)
LABEL_65:
    abort();
  v45 = v44;
  v62 = (_QWORD **)v42;
  v46 = *(_QWORD *)v42[13];
  if (v46)
  {
    v47 = 0;
    do
    {
      v48 = *(_DWORD *)(v46 + 88);
      v49 = v48 + 1;
      if (v43 < v48 + 1)
      {
        v50 = (char *)malloc_type_realloc(v45, 4 * (v48 + 1), 0x2BDC8648uLL);
        if (!v50)
          goto LABEL_65;
        v45 = v50;
        v48 = *(_DWORD *)(v46 + 88);
        LODWORD(v43) = v49;
      }
      *(_DWORD *)&v45[4 * v48] = v47;
      *(_DWORD *)(v46 + 88) = v47++;
      v46 = *(_QWORD *)(v46 + 8);
    }
    while (v46);
  }
  for (i = *v62[14]; i; i = *(_QWORD *)(i + 8))
    *(_DWORD *)(i + 24) = *(_DWORD *)&v45[4 * *(unsigned int *)(i + 24)];
  for (j = *v62[10]; j; j = *(_QWORD *)(j + 8))
  {
    v53 = *(_QWORD *)(j + 24);
    v54 = v53 & 0xFFFFFFFF0000FFFFLL | (*(_DWORD *)&v4[4 * WORD1(v53)] << 16);
    *(_QWORD *)(j + 24) = v54;
    *(_QWORD *)(j + 24) = v54 & 0xFFFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)*(_DWORD *)&v4[(v53 >> 46) & 0x3FFFC] << 48);
  }
  for (k = *v62[9]; k; k = *(_QWORD *)(k + 8))
  {
    v56 = *(_QWORD *)(k + 24);
    v57 = v56 & 0xFFFFFFFF0000FFFFLL | (*(_DWORD *)&v20[4 * WORD1(v56)] << 16);
    *(_QWORD *)(k + 24) = v57;
    *(_QWORD *)(k + 24) = v57 & 0xFFFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)*(_DWORD *)&v20[(v56 >> 46) & 0x3FFFC] << 48);
  }
  v58 = *v62[13];
  if (v58)
  {
    while (1)
    {
      v59 = *(_QWORD *)(v58 + 24);
      if ((*(_DWORD *)(v58 + 24) & 7) + ((__int16)v59 >> 15))
        __asm { BR              X1 }
      if ((v59 & 0x100000000) != 0)
        __asm { BR              X16 }
      v60 = (v59 >> 6);
      v61 = (v60 - 75);
      if (v61 > 0x21)
        goto LABEL_62;
      if (((1 << (v60 - 75)) & 0x38001BE05) == 0)
        break;
LABEL_56:
      *(_QWORD *)(v58 + 24) = v59 & 0x3FFFFFFFFFFFLL | ((unint64_t)*(unsigned int *)&v45[(v59 >> 44) & 0xFFFFC] << 46);
LABEL_57:
      v58 = *(_QWORD *)(v58 + 8);
      if (!v58)
        goto LABEL_64;
    }
    if (v61 == 1)
    {
      if ((*(_QWORD *)(v58 + 24) & 7) == 1)
        goto LABEL_57;
      goto LABEL_56;
    }
LABEL_62:
    if (v60 != 140)
      goto LABEL_57;
    goto LABEL_56;
  }
LABEL_64:
  free(v4);
  free(v12);
  free(v20);
  free(v28);
  free(v36);
  free(v45);
}

uint64_t PPStreamResolveBranches(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(uint64_t **)(a1 + 104);
  v2 = *(uint64_t **)(a1 + 112);
  v3 = *v1;
  if (*v1)
  {
    v4 = 0;
    do
    {
      v5 = *(unsigned int *)(v3 + 96);
      if ((_DWORD)v5)
      {
        v6 = *(_QWORD *)(v3 + 24);
        *(_QWORD *)(v3 + 24) = v6 & 0x3FFFFFFFFFFFLL | ((unint64_t)(*((_DWORD *)v1 + 4) + 1) << 46);
        v7 = *v2;
        if (*v2)
        {
          v8 = v6 & 0x3FFFFFFFFFFFLL;
          while ((_DWORD)v5 != *(_DWORD *)(v7 + 28) || strncmp((const char *)(v3 + 104), (const char *)(v7 + 32), v5))
          {
            v7 = *(_QWORD *)(v7 + 8);
            if (!v7)
              goto LABEL_9;
          }
          *(_QWORD *)(v3 + 24) = v8 | ((unint64_t)*(unsigned int *)(v7 + 24) << 46);
        }
        else
        {
LABEL_9:
          v4 = 1;
        }
      }
      v3 = *(_QWORD *)(v3 + 8);
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }
  v9 = *v2;
  if (*v2)
  {
    while (strcmp("main(", (const char *)(v9 + 32)))
    {
      v9 = *(_QWORD *)(v9 + 8);
      if (!v9)
        return v4;
    }
    v10 = *v1;
    if (*v1)
    {
      while (*(_DWORD *)(v9 + 24) != *(_DWORD *)(v10 + 88))
      {
        v10 = *(_QWORD *)(v10 + 8);
        if (!v10)
          return v4;
      }
      *(_QWORD *)(v10 + 24) |= 0x4000uLL;
    }
  }
  return v4;
}

uint64_t PPStreamRemoveOperation(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t i;

  v4 = a2[1];
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 24) & 0xFFFFFFFFFFFFFFC7 | (8 * ((a2[3] >> 3) & 7));
    *(_QWORD *)(v4 + 24) = v5;
    if ((*((_BYTE *)a2 + 25) & 0x40) != 0)
      *(_QWORD *)(v4 + 24) = v5 | 0x4000;
    v6 = *((_DWORD *)a2 + 22);
    v7 = *(unsigned int *)(v4 + 88);
    for (i = **(_QWORD **)(a1 + 112); i; i = *(_QWORD *)(i + 8))
    {
      if (*(_DWORD *)(i + 24) == v6)
        *(_DWORD *)(i + 24) = v7;
    }
    renumberTargets(**(_QWORD **)(a1 + 104), v6, v7);
  }
  PPStreamChunkListRemoveChunk(*(_QWORD *)(a1 + 104), a2);
  return v4;
}

uint64_t glpDisassemble1Op(int a1, uint64_t *a2, FILE *a3, _DWORD *a4, int a5, int a6, int a7, int a8, uint64_t a9, int *a10, int a11)
{
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v19;

  v19 = *a2;
  v13 = (*a2 >> 6);
  if (*a10 >= 1)
  {
    v14 = 0;
    do
    {
      fprintf_l(a3, 0, "  ");
      if (v14 > 0x30)
        break;
      ++v14;
    }
    while ((int)v14 < *a10);
  }
  fprintf_l(a3, 0, "%s", ppstreamOpString[v13]);
  v15 = *a2;
  if ((*a2 & 0x40000) != 0)
  {
    fprintf_l(a3, 0, " OFFSET");
    v15 = *a2;
  }
  if ((v15 & 0x200000000) != 0)
    fprintf_l(a3, 0, " INVARIANT");
  if (v13 <= 0xAA)
    __asm { BR              X10 }
  fprintf_l(a3, 0, ";");
  if (a11)
  {
    v16 = v13 - 75;
    if (v16 <= 0x3D)
    {
      if (((1 << (v13 - 75)) & 0x38001BE05) != 0)
        goto LABEL_20;
      if (((1 << (v13 - 75)) & 0x3000039000004000) != 0)
      {
        fprintf_l(a3, 0, "    # Index: %d");
        goto LABEL_21;
      }
      if (v16 == 1)
      {
        if ((v19 & 7) == 1)
          goto LABEL_21;
        goto LABEL_20;
      }
    }
    if (v13 - 140 >= 4)
      goto LABEL_21;
LABEL_20:
    fprintf_l(a3, 0, "    # Target: %d Index: %d");
  }
LABEL_21:
  result = fprintf_l(a3, 0, "\n");
  *a4 = 0;
  return result;
}

#error "22A9536D0: call analysis failed (funcsize=64)"

uint64_t glpWriteSizeType(FILE *a1, int a2, int a3, unsigned int a4)
{
  uint64_t result;

  result = fprintf_l(a1, 0, ":%d", a2 + 1);
  if (a3)
    result = fprintf_l(a1, 0, ":%d", a3 + 1);
  if (a4 <= 4)
    return fprintf_l(a1, 0, off_24F4B4088[a4]);
  return result;
}

FILE *glpWriteSourceOperand(FILE *result, FILE *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, int a9)
{
  FILE *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  uint64_t v35;

  v14 = result;
  v15 = a7;
  v16 = *((_QWORD *)&result->_p + a7);
  if ((v16 & 0x10) != 0)
  {
    result = (FILE *)fprintf_l(a2, 0, "-");
    v16 = *((_QWORD *)&v14->_p + v15);
  }
  if ((v16 & 0x20) != 0)
  {
    result = (FILE *)fprintf_l(a2, 0, "|");
    v16 = *((_QWORD *)&v14->_p + v15);
  }
  switch((v16 >> 6) & 7)
  {
    case 0u:
      result = (FILE *)fprintf_l(a2, 0, "att%d");
      break;
    case 1u:
      fprintf_l(a2, 0, "tmp");
      v17 = HIWORD(*((_QWORD *)&v14->_p + v15));
      if (a5)
        LODWORD(v17) = *(_DWORD *)(a5 + 4 * v17);
      result = (FILE *)fprintf_l(a2, 0, "%d", v17);
      if (a6)
      {
        v20 = *((_QWORD *)&v14->_p + v15);
        if ((v20 & 1) == 0)
        {
          v19 = *(_DWORD *)(a6 + ((v20 >> 46) & 0x3FFFC));
          goto LABEL_17;
        }
      }
      break;
    case 2u:
      result = (FILE *)fprintf_l(a2, 0, "prm%d", *(_DWORD *)(a3 + ((v16 >> 46) & 0x3FFFC)));
      v18 = *((_QWORD *)&v14->_p + v15);
      if ((v18 & 1) == 0)
      {
        v19 = *(_DWORD *)(a4 + ((v18 >> 46) & 0x3FFFC));
LABEL_17:
        if (v19 != -1)
          result = (FILE *)fprintf_l(a2, 0, "[%d]");
      }
      break;
    case 3u:
      result = (FILE *)fprintf_l(a2, 0, "res%d");
      break;
    case 4u:
      result = (FILE *)fprintf_l(a2, 0, "adr%d");
      break;
    case 5u:
      result = (FILE *)fprintf_l(a2, 0, "shr%d");
      break;
    default:
      break;
  }
  v21 = *((_QWORD *)&v14->_p + v15);
  v35 = v15;
  if ((v21 & 1) != 0)
  {
    fprintf_l(a2, 0, "[adr%d", (v21 >> 1) & 1);
    fprintf_l(a2, 0, off_24F4B3E40[(*((_QWORD *)&v14->_p + v15) >> 2) & 3]);
    v22 = *((_QWORD *)&v14->_p + v15);
    v23 = v22 & 0x1C0;
    if (a6 && v23 == 64)
    {
      v24 = *(_DWORD *)(a6 + ((v22 >> 46) & 0x3FFFC));
    }
    else
    {
      v24 = 0;
      if (!a4 || v23 != 128)
      {
LABEL_28:
        v25 = v24 + ((int)v22 >> 24);
        if (v25)
        {
          if (v25 >= 1)
            fprintf_l(a2, 0, "+");
          fprintf_l(a2, 0, "%d", v25);
        }
        result = (FILE *)fprintf_l(a2, 0, "]");
        v21 = *((_QWORD *)&v14->_p + v15);
        goto LABEL_33;
      }
      v24 = *(_DWORD *)(a4 + ((v22 >> 46) & 0x3FFFC));
    }
    if (v24 == -1)
      v24 = 0;
    goto LABEL_28;
  }
LABEL_33:
  if ((v21 & 0x1C0) == 0x100)
    goto LABEL_59;
  if (a9)
  {
    v26 = 0;
    v27 = 0;
    v28 = v35 + 1;
    v29 = 8 * (v35 + 1);
    do
    {
      switch(v27)
      {
        case 0:
          v26 = *((_WORD *)&v14->_p + 4 * v28 + 1) & 0xF;
          result = (FILE *)fprintf_l(a2, 0, ", ");
          break;
        case 1:
          v26 = (*(_DWORD *)((char *)&v14->_p + v29) >> 20) & 0xF;
          goto LABEL_41;
        case 2:
          v26 = *((_BYTE *)&v14->_p + 8 * v28 + 3) & 0xF;
          goto LABEL_41;
        case 3:
          v26 = *(_DWORD *)((char *)&v14->_p + v29) >> 28;
LABEL_41:
          result = (FILE *)fprintf_l(a2, 0, ",");
          break;
        default:
          break;
      }
      if (v26 <= 0xA)
        result = (FILE *)fprintf_l(a2, 0, off_24F4B3DA8[v26]);
      ++v27;
    }
    while (v27 != 4);
LABEL_59:
    v30 = v35;
    v21 = *((_QWORD *)&v14->_p + v35);
    if (!a8)
      goto LABEL_61;
    goto LABEL_60;
  }
  if (!a8)
  {
    if ((v21 & 0x1FE00) == 0x1C800)
      goto LABEL_61;
    fprintf_l(a2, 0, ".");
    v32 = *((_DWORD *)&v14->_p + 2 * v15);
    v31 = v32 >> 9;
    v33 = (v32 >> 9) & 3;
    if (v33 != ((v32 >> 11) & 3) || v33 != ((v32 >> 13) & 3) || v33 != ((v32 >> 15) & 3))
    {
      fprintf_l(a2, 0, "%c", (((_BYTE)v31 + 1) & 3u) + 119);
      fprintf_l(a2, 0, "%c", (((*((_DWORD *)&v14->_p + 2 * v15) >> 11) + 1) & 3u) + 119);
      fprintf_l(a2, 0, "%c", (((*((_DWORD *)&v14->_p + 2 * v15) >> 13) + 1) & 3u) + 119);
      v31 = *((_DWORD *)&v14->_p + 2 * v15) >> 15;
    }
    goto LABEL_58;
  }
  fprintf_l(a2, 0, ".");
  v30 = v15;
  fprintf_l(a2, 0, "%c", (((*((_DWORD *)&v14->_p + 2 * v15) >> 9) + 1) & 3u) + 119);
  v21 = *((_QWORD *)&v14->_p + v15);
  if ((v21 & 0x180000) != 0)
  {
    fprintf_l(a2, 0, "%c", (((v21 >> 11) + 1) & 3u) + 119);
    v21 = *((_QWORD *)&v14->_p + v15);
  }
  if ((v21 & 0x100000) != 0)
  {
    fprintf_l(a2, 0, "%c", (((v21 >> 13) + 1) & 3u) + 119);
    v21 = *((_QWORD *)&v14->_p + v15);
  }
  if ((~(_DWORD)v21 & 0x180000) == 0)
  {
    v31 = v21 >> 15;
LABEL_58:
    result = (FILE *)fprintf_l(a2, 0, "%c", (((_BYTE)v31 + 1) & 3u) + 119);
    goto LABEL_59;
  }
LABEL_60:
  result = glpWriteOperandSize(a2, (v21 >> 19) & 3, (v21 >> 17) & 3);
  v21 = *((_QWORD *)&v14->_p + v30);
LABEL_61:
  if ((v21 & 0x20) != 0)
    return (FILE *)fprintf_l(a2, 0, "|");
  return result;
}

uint64_t glpWriteBranchOperand(_QWORD *a1, FILE *a2, int *a3)
{
  int v5;
  int v6;

  if (a3)
  {
    v5 = -1;
    do
    {
      v6 = *a3++;
      ++v5;
    }
    while (v6 != *a1 >> 46);
  }
  else
  {
    v5 = -1;
  }
  fprintf_l(a2, 0, "label_%i", v5);
  fprintf_l(a2, 0, off_24F4B3E00[(a1[1] >> 1) & 7]);
  if ((a1[1] & 1) != 0)
    fprintf_l(a2, 0, "1");
  fprintf_l(a2, 0, ".");
  fprintf_l(a2, 0, "%c", (((*((_DWORD *)a1 + 2) >> 4) + 1) & 3u) + 119);
  fprintf_l(a2, 0, "%c", (((*((_DWORD *)a1 + 2) >> 6) + 1) & 3u) + 119);
  fprintf_l(a2, 0, "%c", ((BYTE1(*((_DWORD *)a1 + 2)) + 1) & 3u) + 119);
  fprintf_l(a2, 0, "%c", (((*((_DWORD *)a1 + 2) >> 10) + 1) & 3u) + 119);
  return fprintf_l(a2, 0, ")");
}

FILE *glpWriteClampSat(FILE *result, int a2, int a3, int a4)
{
  FILE *v5;

  v5 = result;
  if (a2)
  {
    result = (FILE *)fprintf_l(result, 0, "C");
    if (a3 >= 1)
      result = (FILE *)fprintf_l(v5, 0, "1");
  }
  if (a4)
    return (FILE *)fprintf_l(v5, 0, "_SAT");
  return result;
}

void glpWriteDestinationOperand(uint64_t a1, FILE *a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  unint64_t v22;
  unsigned int v23;
  unint64_t v25;
  const char *v26;
  unint64_t v27;
  int v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v22 = *(_QWORD *)(a1 + 8);
  v23 = (v22 >> 12) & 7;
  if (v23 == 5)
  {
    fprintf_l(a2, 0, "shr%d");
  }
  else
  {
    if (v23 == 3)
    {
      v25 = HIWORD(v22);
      v26 = "res%d";
    }
    else
    {
      if (v23 != 1)
        goto LABEL_13;
      fprintf_l(a2, 0, "tmp");
      v25 = *(unsigned __int16 *)(a1 + 14);
      v26 = "%d";
      if (a3 && a5)
      {
        fprintf_l(a2, 0, "%d", *(_DWORD *)(a3 + 4 * v25));
        v27 = *(_QWORD *)(a1 + 8);
        if (a4 && (v27 & 0x100000000) == 0 && *(_DWORD *)(a4 + ((v27 >> 46) & 0x3FFFC)) != -1)
        {
          fprintf_l(a2, 0, "[%d]", *(_DWORD *)(a4 + ((v27 >> 46) & 0x3FFFC)));
          v27 = *(_QWORD *)(a1 + 8);
        }
        goto LABEL_14;
      }
    }
    fprintf_l(a2, 0, v26, v25);
  }
LABEL_13:
  v27 = *(_QWORD *)(a1 + 8);
  if (a5)
  {
LABEL_14:
    if ((v27 & 0x100000000) != 0)
    {
      fprintf_l(a2, 0, "[adr%d", (v27 >> 33) & 1);
      fprintf_l(a2, 0, off_24F4B3E40[(*(_QWORD *)(a1 + 8) >> 34) & 3]);
      v28 = 0;
      v29 = *(_QWORD *)(a1 + 8);
      if (a4)
      {
        if ((*(_QWORD *)(a1 + 8) & 0x7000) == 0x1000)
        {
          v28 = *(_DWORD *)(a4 + ((v29 >> 46) & 0x3FFFC));
          if (v28 == -1)
            v28 = 0;
        }
      }
      v30 = v28 + ((int)(v29 >> 12) >> 24);
      if (v30)
      {
        if (v30 >= 1)
          fprintf_l(a2, 0, "+");
        fprintf_l(a2, 0, "%d", v30);
      }
      fprintf_l(a2, 0, "]");
    }
    fprintf_l(a2, 0, ".");
    if ((*(_QWORD *)(a1 + 8) & 0x40000) != 0)
      fprintf_l(a2, 0, "%c");
    else
      fprintf_l(a2, 0, "_");
    v31 = *(_QWORD *)(a1 + 8);
    if ((v31 & 0x600000) != 0)
    {
      if ((v31 & 0x20000) != 0)
        fprintf_l(a2, 0, "%c");
      else
        fprintf_l(a2, 0, "_");
    }
    v33 = *(_QWORD *)(a1 + 8);
    if ((v33 & 0x400000) != 0)
    {
      if ((v33 & 0x10000) != 0)
        fprintf_l(a2, 0, "%c");
      else
        fprintf_l(a2, 0, "_");
    }
    if ((~*(_DWORD *)(a1 + 8) & 0x600000) == 0)
    {
      if ((*(_QWORD *)(a1 + 8) & 0x8000) != 0)
        fprintf_l(a2, 0, "%c");
      else
        fprintf_l(a2, 0, "_");
    }
    glpWriteOperandSize(a2, (*(_DWORD *)(a1 + 8) >> 21) & 3, (*(_DWORD *)(a1 + 8) >> 19) & 3);
LABEL_46:
    __asm { BR              X10 }
  }
  if ((~*(_DWORD *)(a1 + 8) & 0x78000) == 0)
    goto LABEL_46;
  fprintf_l(a2, 0, ".");
  v32 = *(_QWORD *)(a1 + 8);
  if ((v32 & 0x40000) != 0)
  {
    fprintf_l(a2, 0, "x");
    v32 = *(_QWORD *)(a1 + 8);
    if ((v32 & 0x20000) == 0)
    {
LABEL_33:
      if ((v32 & 0x10000) == 0)
        goto LABEL_34;
      goto LABEL_49;
    }
  }
  else if ((v32 & 0x20000) == 0)
  {
    goto LABEL_33;
  }
  fprintf_l(a2, 0, "y");
  v32 = *(_QWORD *)(a1 + 8);
  if ((v32 & 0x10000) == 0)
  {
LABEL_34:
    if ((v32 & 0x8000) == 0)
      goto LABEL_46;
LABEL_50:
    fprintf_l(a2, 0, "w");
    goto LABEL_46;
  }
LABEL_49:
  fprintf_l(a2, 0, "z");
  if ((*(_QWORD *)(a1 + 8) & 0x8000) == 0)
    goto LABEL_46;
  goto LABEL_50;
}

uint64_t glpWriteAddressOperand(uint64_t result, FILE *a2, int a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v5 = result;
  v6 = *(_QWORD *)(result + 8);
  if ((v6 & 0x7000) == 0x4000)
  {
    result = fprintf_l(a2, 0, "adr%d", HIWORD(v6));
    v6 = *(_QWORD *)(v5 + 8);
  }
  if ((~(_DWORD)v6 & 0x78000) == 0)
    return result;
  result = fprintf_l(a2, 0, ".");
  v7 = *(_QWORD *)(v5 + 8);
  if (!a3)
  {
    if ((v7 & 0x40000) != 0)
    {
      result = fprintf_l(a2, 0, "x");
      v7 = *(_QWORD *)(v5 + 8);
      if ((v7 & 0x20000) == 0)
      {
LABEL_16:
        if ((v7 & 0x10000) == 0)
          goto LABEL_17;
        goto LABEL_21;
      }
    }
    else if ((v7 & 0x20000) == 0)
    {
      goto LABEL_16;
    }
    result = fprintf_l(a2, 0, "y");
    v7 = *(_QWORD *)(v5 + 8);
    if ((v7 & 0x10000) == 0)
    {
LABEL_17:
      if ((v7 & 0x8000) == 0)
        return result;
      return fprintf_l(a2, 0, "w");
    }
LABEL_21:
    result = fprintf_l(a2, 0, "z");
    if ((*(_QWORD *)(v5 + 8) & 0x8000) == 0)
      return result;
    return fprintf_l(a2, 0, "w");
  }
  if ((v7 & 0x40000) != 0)
  {
    result = fprintf_l(a2, 0, "x");
    v7 = *(_QWORD *)(v5 + 8);
  }
  if ((v7 & 0x600000) != 0 && (v7 & 0x20000) != 0)
  {
    result = fprintf_l(a2, 0, "y");
    v7 = *(_QWORD *)(v5 + 8);
  }
  if ((~(_DWORD)v7 & 0x410000) == 0)
  {
    result = fprintf_l(a2, 0, "z");
    v7 = *(_QWORD *)(v5 + 8);
  }
  if ((~(_DWORD)v7 & 0x608000) == 0)
    return fprintf_l(a2, 0, "w");
  return result;
}

uint64_t glpPPDisassemble(_DWORD *a1)
{
  FILE *v2;
  FILE *v3;
  uint64_t v4;
  _BOOL4 v5;
  int v6;
  int v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  int v13;
  int v14;
  int i;
  int v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  int v47;
  uint64_t v48;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  _DWORD *v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _DWORD *v63;
  _DWORD *v64;
  _DWORD *v65;
  uint64_t v66;
  _DWORD *v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  unint64_t v73;
  _DWORD *v74;
  _DWORD *v75;
  _DWORD *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  int v82;
  int v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  _DWORD *v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  int v98;
  int v99;
  int v100;
  int v101;
  _DWORD *v102;
  int v103;
  uint64_t v104;
  int v105;
  BOOL v106;
  int v107;
  char *v108;
  char *v109;
  size_t v110;
  _DWORD *v111;
  _DWORD *v112;
  int v113;
  unsigned int v114;
  int v115;
  _DWORD *v116;
  char *v117;
  uint64_t v118;
  unint64_t v119;
  int v120;
  unint64_t v122;
  uint64_t v123;
  unsigned int v124;
  int v125;
  int v126;
  uint64_t v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int j;
  uint64_t *v133;
  int v134;
  unsigned int v135;
  unsigned int v136;
  unsigned int v137;
  BOOL v138;
  uint64_t v139;
  uint64_t v141;
  _DWORD *v142;
  int v143;
  unint64_t v144;
  uint64_t v145;
  const char *v146;
  uint64_t v147;
  uint64_t v148;
  unsigned int v149;
  unsigned int v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  int v156;
  const char *v157;
  int v158;
  const char *v159;
  uint64_t v160;
  int v161;
  uint64_t v162;
  _DWORD *v163;
  _DWORD *v164;
  int v165;
  const char *v166;
  uint64_t result;
  uint64_t v168;
  uint64_t v169;
  int v170[2];
  uint64_t v171;
  _DWORD *v172;
  _DWORD *v173;
  unsigned int v174;
  void *v175;
  int v176[2];
  void *v177;
  int v178;
  _DWORD *v179;
  int v180;
  _DWORD *v181;
  size_t size;
  void *sizea;
  int v184;
  _DWORD *v185;
  int v186;
  int v187;
  int __ptr;
  _QWORD v189[2];
  int v190;

  v190 = 1;
  v189[0] = 0;
  v189[1] = 0;
  v2 = funopen(v189, 0, (int (__cdecl *)(void *, const char *, int))writefn, 0, 0);
  v3 = v2;
  v4 = 0;
  v5 = 0;
  v6 = *(unsigned __int16 *)a1;
  do
    v5 = v5 || glpPPDisassemble_shaderTargets[v4++] == v6;
  while (v4 != 5);
  v186 = *(unsigned __int16 *)a1;
  if (v186 <= 0x8B30)
  {
    switch(v6)
    {
      case 34336:
        fprintf_l(v2, 0, "!!ARBvp1.0\n");
        goto LABEL_23;
      case 34820:
        fprintf_l(v2, 0, "!!ARBfp1.0\n");
        goto LABEL_23;
      case 35632:
        fprintf_l(v2, 0, "!!fragmentshader\n");
        goto LABEL_23;
    }
  }
  else if (*(unsigned __int16 *)a1 > 0x8E86u)
  {
    if (v6 == 36487)
    {
      fprintf_l(v2, 0, "!!tessevaluationshader\n");
      goto LABEL_23;
    }
    if (v6 == 36488)
    {
      fprintf_l(v2, 0, "!!tesscontrolshader\n");
      goto LABEL_23;
    }
  }
  else
  {
    if (v6 == 35633)
    {
      fprintf_l(v2, 0, "!!vertexshader\n");
      goto LABEL_23;
    }
    if (v6 == 36313)
    {
      fprintf_l(v2, 0, "!!geometryshader\n");
      goto LABEL_23;
    }
  }
  fprintf_l(v2, 0, "Unknown Target (error)\n");
LABEL_23:
  v187 = v5;
  if (v5)
    fprintf_l(v3, 0, "\n");
  v7 = a1[24];
  if (v7 >= 1)
  {
    v8 = (unint64_t *)&a1[2 * a1[25]];
    v9 = a1[24];
    do
    {
      fprintf_l(v3, 0, "OPTION ");
      v11 = *v8++;
      v10 = v11;
      v12 = BYTE3(v11);
      if (BYTE3(v11) <= 0xDu && ((0x3F31u >> v12) & 1) != 0)
        fprintf_l(v3, 0, *(char **)((char *)off_24F4B3E60 + ((uint64_t)(v10 >> 24 << 56) >> 53)));
      fprintf_l(v3, 0, ";\n");
      --v9;
    }
    while (v9);
  }
  v13 = v187;
  if (v187 && v7)
    fprintf_l(v3, 0, "\n");
  v14 = a1[10];
  v172 = a1;
  if (!v14)
  {
    v16 = a1[8];
    v17 = &a1[2 * a1[9]];
    if (v187)
      goto LABEL_41;
    v19 = 0;
    v21 = 0;
    v22 = 0;
    goto LABEL_67;
  }
  fprintf_l(v3, 0, "ADDRESS adr0");
  if (v14 >= 2)
  {
    for (i = 1; i != v14; ++i)
      fprintf_l(v3, 0, ", adr%d", i);
  }
  fprintf_l(v3, 0, ";\n");
  v13 = v187;
  if ((v187 & 1) == 0)
  {
    v19 = 0;
    v21 = 0;
    v22 = 0;
    v16 = a1[8];
    v17 = &a1[2 * a1[9]];
LABEL_67:
    if (v16 < 1)
      goto LABEL_206;
    v173 = v22;
    v180 = 0;
    size = (size_t)v21;
    *(_QWORD *)v176 = v19;
    v34 = 0;
    v35 = 0;
    v36 = 0;
    v37 = v16;
    v38 = v16 - 1;
    v39 = 1;
    v178 = -1;
    v174 = -1;
    v40 = 0xFFFFFFFFLL;
    v184 = -1;
    while (1)
    {
      if (v39)
      {
        v41 = *(_QWORD *)v17;
        if ((*(_QWORD *)v17 & 0x100) != 0)
        {
          fprintf_l(v3, 0, "INVARIANT ");
          v41 = *(_QWORD *)v17;
        }
        v42 = (v41 & 7) - 1;
        if (v42 <= 2)
          fprintf_l(v3, 0, off_24F4B3EE8[v42]);
        fprintf_l(v3, 0, "TEMP ");
        v36 = (*v17 >> 8) & 1;
        v35 = *v17 & 7;
      }
      if ((v187 & 1) == 0)
      {
        fprintf_l(v3, 0, "tmp%d", v34);
LABEL_80:
        v44 = v40;
        goto LABEL_81;
      }
      v43 = *(_DWORD *)(size + 4 * v34);
      if (v43)
      {
        v44 = v40;
        if (v43 == -1)
        {
          fprintf_l(v3, 0, "tmp%d", *(_DWORD *)(*(_QWORD *)v176 + 4 * v34));
          glpWriteSizeTypePrecision(v3, *v17 >> 6, (*v17 >> 3) & 7, *v17 & 7);
          goto LABEL_81;
        }
        v47 = v184 + 1;
        v48 = *(_QWORD *)v17;
        if ((_DWORD)v40 != *(_QWORD *)v17 >> 6
          || v174 != ((*(_QWORD *)v17 >> 3) & 7)
          || v178 != (*v17 & 7))
        {
          v51 = v173[v180];
          if (v184 + 2 == v51)
            v52 = v180 + 1;
          else
            v52 = v180;
          v180 = v52;
          if (v184 + 2 == v51)
            v53 = -1;
          else
            v53 = v184 + 1;
          v184 = v53;
          v44 = 0xFFFFFFFFLL;
          v174 = -1;
          v178 = -1;
          goto LABEL_81;
        }
        v45 = v180;
        v46 = v173;
      }
      else
      {
        v45 = v180;
        v46 = v173;
        fprintf_l(v3, 0, "tmp%d[%d]", *(_DWORD *)(*(_QWORD *)v176 + 4 * v34), v173[v180]);
        v47 = 0;
        v48 = *(_QWORD *)v17;
        v40 = *(_QWORD *)v17 >> 6;
        v174 = (*(_QWORD *)v17 >> 3) & 7;
        v178 = *(_QWORD *)v17 & 7;
      }
      v184 = v47;
      if (v47 + 1 != v46[v45])
        goto LABEL_80;
      ++v180;
      v44 = v40;
      if ((_DWORD)v40 != -1)
        glpWriteSizeTypePrecision(v3, v48 >> 6, (v48 >> 3) & 7, v48 & 7);
      v184 = -1;
LABEL_81:
      v40 = v44;
      if (v38 == v34)
      {
        v39 = 0;
      }
      else
      {
        v39 = 1;
        if (((v17[2] >> 8) & 1) == v36 && (v17[2] & 7) == v35)
        {
          v39 = 0;
          if (v184 == -1)
            fprintf_l(v3, 0, ", ");
          goto LABEL_84;
        }
      }
      fprintf_l(v3, 0, ";\n");
LABEL_84:
      ++v34;
      v17 += 2;
      if (v37 == v34)
      {
        v16 = 1;
        a1 = v172;
        v22 = v173;
        v19 = *(_DWORD **)v176;
        v21 = (_DWORD *)size;
        v13 = v187;
        if (v173)
          goto LABEL_112;
        goto LABEL_113;
      }
    }
  }
  fprintf_l(v3, 0, "\n");
  v16 = a1[8];
  v17 = &a1[2 * a1[9]];
LABEL_41:
  if (v16)
  {
    v18 = malloc_type_malloc(4 * v16, 0x7081ABB9uLL);
    if (!v18)
      goto LABEL_535;
    v19 = v18;
    v20 = malloc_type_malloc(4 * v16, 0x7081ABB9uLL);
    if (!v20)
      goto LABEL_535;
    v21 = v20;
  }
  else
  {
    v19 = 0;
    v21 = 0;
  }
  v23 = a1[20];
  if ((_DWORD)v23)
  {
    v22 = malloc_type_malloc(4 * v23, 0x7081ABB9uLL);
    if (!v22)
      goto LABEL_535;
  }
  else
  {
    v22 = 0;
  }
  if (v16 >= 1)
  {
    v24 = 0;
    v25 = 0;
    v26 = -1;
    v27 = 0xFFFFFFFFLL;
    LODWORD(v28) = -1;
    while (v26 != -1)
    {
      if (v24 <= (int)v28)
      {
        v19[v24] = v26;
        v29 = (v27 + 1);
LABEL_63:
        v21[v24] = v27;
        if (v24 == v28)
        {
          v22[v25++] = v29;
          LODWORD(v28) = -1;
          v27 = 0xFFFFFFFFLL;
          v26 = -1;
        }
        else
        {
          v27 = v29;
        }
      }
      if (++v24 == v16)
        goto LABEL_67;
    }
    v19[v24] = v24;
    v30 = a1[20];
    if ((int)v30 < 1)
    {
LABEL_61:
      v26 = -1;
      v29 = v27;
    }
    else
    {
      v31 = (unint64_t *)&a1[2 * a1[21]];
      while (1)
      {
        v33 = *v31++;
        v32 = v33;
        if (v24 == WORD1(v33))
          break;
        if (!--v30)
          goto LABEL_61;
      }
      LODWORD(v27) = 0;
      v28 = HIWORD(v32);
      v29 = 1;
      v26 = v24;
    }
    goto LABEL_63;
  }
LABEL_206:
  v184 = -1;
  if (v22)
LABEL_112:
    free(v22);
LABEL_113:
  sizea = v21;
  if (v13 && v16)
    fprintf_l(v3, 0, "\n");
  v54 = a1[12];
  if ((int)v54 >= 1)
  {
    v55 = 0;
    v56 = &a1[2 * a1[13]];
    do
    {
      v57 = *(_QWORD *)&v56[2 * v55];
      if ((v57 & 0x200) != 0)
      {
        fprintf_l(v3, 0, "CENTROID ");
        v57 = *(_QWORD *)&v56[2 * v55];
        if ((v57 & 0x100) == 0)
        {
LABEL_120:
          if ((v57 & 0x8000) == 0)
            goto LABEL_121;
          goto LABEL_133;
        }
      }
      else if ((v57 & 0x100) == 0)
      {
        goto LABEL_120;
      }
      fprintf_l(v3, 0, "NONPERSPECTIVE ");
      v57 = *(_QWORD *)&v56[2 * v55];
      if ((v57 & 0x8000) == 0)
      {
LABEL_121:
        if ((v57 & 0x10000) == 0)
          goto LABEL_122;
        goto LABEL_134;
      }
LABEL_133:
      fprintf_l(v3, 0, "FLAT ");
      v57 = *(_QWORD *)&v56[2 * v55];
      if ((v57 & 0x10000) == 0)
      {
LABEL_122:
        if ((v57 & 0x20000) == 0)
          goto LABEL_124;
LABEL_123:
        fprintf_l(v3, 0, "SAMPLE ");
        goto LABEL_124;
      }
LABEL_134:
      fprintf_l(v3, 0, "PATCH ");
      if ((*(_QWORD *)&v56[2 * v55] & 0x20000) != 0)
        goto LABEL_123;
LABEL_124:
      fprintf_l(v3, 0, "ATTRIB att%d", v55);
      if (v13)
        glpWriteSizeTypePrecision(v3, v56[2 * v55] >> 6, (v56[2 * v55] >> 3) & 7, v56[2 * v55] & 7);
      if (v186 <= 35632)
      {
        v58 = " = vertex.";
        if (v186 != 34336)
        {
          if (v186 == 34820 || v186 == 35632)
            fprintf_l(v3, 0, " = fragment.");
          goto LABEL_145;
        }
      }
      else if (v186 > 36486)
      {
        if (v186 != 36487)
        {
          if (v186 == 36488)
            fprintf_l(v3, 0, " = control.");
          goto LABEL_145;
        }
        v58 = " = evaluation.";
      }
      else
      {
        v58 = " = vertex.";
        if (v186 != 35633)
        {
          if (v186 == 36313)
            fprintf_l(v3, 0, " = geometry.");
          goto LABEL_145;
        }
      }
      fprintf_l(v3, 0, v58);
LABEL_145:
      v59 = *(_QWORD *)&v56[2 * v55];
      switch((v59 >> 10) & 0x1F)
      {
        case 0u:
          fprintf_l(v3, 0, "none", v168);
          break;
        case 1u:
          fprintf_l(v3, 0, "position");
          v60 = *(_QWORD *)&v56[2 * v55];
          if ((v60 & 0x100000000) != 0)
          {
            fprintf_l(v3, 0, ".origin_upper_left");
            v60 = *(_QWORD *)&v56[2 * v55];
          }
          if ((v60 & 0x200000000) != 0)
            fprintf_l(v3, 0, ".pixel_center_integer", v168);
          break;
        case 2u:
          fprintf_l(v3, 0, "color.primary", v168);
          break;
        case 3u:
          fprintf_l(v3, 0, "color.secondary", v168);
          break;
        case 0xBu:
          fprintf_l(v3, 0, "facing", v168);
          break;
        case 0xCu:
          fprintf_l(v3, 0, "pointCoord", v168);
          break;
        case 0xDu:
          fprintf_l(v3, 0, "clipVertex", v168);
          break;
        case 0xEu:
          fprintf_l(v3, 0, "clipDistance[%d]");
          break;
        case 0xFu:
          fprintf_l(v3, 0, "pointsize", v168);
          break;
        case 0x10u:
          fprintf_l(v3, 0, "primitiveid", v168);
          break;
        case 0x11u:
          fprintf_l(v3, 0, "vertexid", v168);
          break;
        case 0x12u:
          fprintf_l(v3, 0, "instanceid", v168);
          break;
        case 0x13u:
          fprintf_l(v3, 0, "tessLevelOuter", v168);
          break;
        case 0x14u:
          fprintf_l(v3, 0, "tessLevelInner", v168);
          break;
        case 0x15u:
          fprintf_l(v3, 0, "tessCoord", v168);
          break;
        case 0x16u:
          fprintf_l(v3, 0, "sampleMask[%d]");
          break;
        case 0x17u:
          fprintf_l(v3, 0, "sampleID", v168);
          break;
        case 0x18u:
          fprintf_l(v3, 0, "samplePosition", v168);
          break;
        case 0x19u:
          fprintf_l(v3, 0, "invocationID", v168);
          break;
        case 0x1Au:
          fprintf_l(v3, 0, "patchVerticiesIn", v168);
          break;
        case 0x1Bu:
          fprintf_l(v3, 0, "fragdata[%d]");
          break;
        case 0x1Cu:
          if ((v59 & 0x10000000000) != 0)
          {
            fprintf_l(v3, 0, "generic[%d]");
          }
          else
          {
            switch(BYTE4(v59) & 0x3F)
            {
              case 0:
                fprintf_l(v3, 0, "position", v168);
                break;
              case 1:
                fprintf_l(v3, 0, "normal", v168);
                break;
              case 2:
                fprintf_l(v3, 0, "color.primary", v168);
                break;
              case 3:
                fprintf_l(v3, 0, "color.secondary", v168);
                break;
              case 4:
                fprintf_l(v3, 0, "weight[0]", v168);
                break;
              case 5:
                fprintf_l(v3, 0, "fogcoord", v168);
                break;
              case 6:
                fprintf_l(v3, 0, "pointsize", v168);
                break;
              case 7:
                fprintf_l(v3, 0, "matrixindex[0]", v168);
                break;
              case 8:
              case 9:
              case 0xA:
              case 0xB:
              case 0xC:
              case 0xD:
              case 0xE:
              case 0xF:
                fprintf_l(v3, 0, "texcoord[%d]");
                break;
              case 0x10:
              case 0x11:
              case 0x12:
              case 0x13:
              case 0x14:
              case 0x15:
              case 0x16:
              case 0x17:
              case 0x18:
              case 0x19:
              case 0x1A:
              case 0x1B:
              case 0x1C:
              case 0x1D:
              case 0x1E:
              case 0x1F:
                fprintf_l(v3, 0, "attrib[%d]");
                break;
              case 0x20:
                fprintf_l(v3, 0, "material.front.ambient", v168);
                break;
              case 0x21:
                fprintf_l(v3, 0, "material.back.ambient", v168);
                break;
              case 0x22:
                fprintf_l(v3, 0, "material.front.diffuse", v168);
                break;
              case 0x23:
                fprintf_l(v3, 0, "material.back.diffuse", v168);
                break;
              case 0x24:
                fprintf_l(v3, 0, "material.front.specular", v168);
                break;
              case 0x25:
                fprintf_l(v3, 0, "material.back.specular", v168);
                break;
              case 0x26:
                fprintf_l(v3, 0, "material.front.emission", v168);
                break;
              case 0x27:
                fprintf_l(v3, 0, "material.back.emission", v168);
                break;
              case 0x28:
                fprintf_l(v3, 0, "material.front.shininess", v168);
                break;
              case 0x29:
                fprintf_l(v3, 0, "material.back.shininess");
                break;
              default:
                break;
            }
          }
          if ((v56[2 * v55 + 1] & 0x80) != 0)
            fprintf_l(v3, 0, "[%d]");
          break;
        default:
          break;
      }
      fprintf_l(v3, 0, ";\n");
      ++v55;
    }
    while (v54 != v55);
  }
  v177 = v19;
  if (v13 && (_DWORD)v54)
    fprintf_l(v3, 0, "\n");
  v61 = (int)a1[14];
  if ((_DWORD)v61)
  {
    v62 = a1[15];
    v63 = malloc_type_malloc(4 * v61, 0x7081ABB9uLL);
    if (!v63)
      goto LABEL_535;
    v64 = v63;
    v65 = malloc_type_malloc(4 * v61, 0x7081ABB9uLL);
    if (!v65)
      goto LABEL_535;
    v66 = a1[18];
    v179 = v65;
    v181 = v64;
    if ((_DWORD)v66)
    {
      v67 = malloc_type_malloc(4 * v66, 0x7081ABB9uLL);
      if (!v67)
        goto LABEL_535;
    }
    else
    {
      v67 = 0;
    }
    if ((int)v61 >= 1)
    {
      v68 = 0;
      v69 = 0;
      v70 = v61;
      v71 = -1;
      v72 = 0xFFFFFFFFLL;
      LODWORD(v73) = -1;
      v74 = &a1[2 * v62];
      v76 = v179;
      v75 = v181;
      while (1)
      {
        if ((*(_QWORD *)&v74[2 * v68] & 0x1F00) != 0)
        {
          if (v71 == -1)
          {
            v181[v68] = v68;
            v78 = a1[18];
            if ((int)v78 < 1)
            {
LABEL_220:
              v71 = -1;
              v77 = v72;
            }
            else
            {
              v79 = (unint64_t *)&a1[2 * a1[19]];
              while (1)
              {
                v81 = *v79++;
                v80 = v81;
                if (v68 == WORD1(v81))
                  break;
                if (!--v78)
                  goto LABEL_220;
              }
              LODWORD(v72) = 0;
              v73 = HIWORD(v80);
              v77 = 1;
              v71 = v68;
            }
            goto LABEL_222;
          }
          if (v68 <= (int)v73)
          {
            v181[v68] = v71;
            v77 = (v72 + 1);
LABEL_222:
            v179[v68] = v72;
            if (v68 == v73)
            {
              v67[v69++] = v77;
              LODWORD(v73) = -1;
              v72 = 0xFFFFFFFFLL;
              v71 = -1;
            }
            else
            {
              v72 = v77;
            }
          }
        }
        if (++v68 == v61)
        {
          v82 = 0;
          while (1)
          {
            if (*v76)
            {
              if (*v76 == -1)
              {
                fprintf_l(v3, 0, "PARAM prm%d", *v75);
                v83 = v184;
                if (v187)
                  glpWriteSizeTypePrecision(v3, *v74 >> 6, (*v74 >> 3) & 7, *v74 & 7);
                fprintf_l(v3, 0, " = ");
              }
              else
              {
                v83 = v184 + 1;
                fprintf_l(v3, 0, "    ");
              }
            }
            else
            {
              fprintf_l(v3, 0, "PARAM prm%d[%d]", *v75, v67[v82]);
              if (v187)
                glpWriteSizeTypePrecision(v3, *v74 >> 6, (*v74 >> 3) & 7, *v74 & 7);
              v83 = 0;
              fprintf_l(v3, 0, " = {\n    ");
            }
            v84 = *(_QWORD *)v74;
            v85 = (*(_QWORD *)v74 >> 8) & 0x1F;
            if (v85 - 1 < 5)
              break;
            if (v85 != 6)
            {
              fprintf_l(v3, 0, "state.");
LABEL_238:
              switch(v85)
              {
                case 0u:
                  fprintf_l(v3, 0, "none", v168, v169, *(_QWORD *)v170, v171);
                  break;
                case 1u:
                  fprintf_l(v3, 0, "local[%d]");
                  break;
                case 2u:
                  fprintf_l(v3, 0, "uniform[%d]");
                  break;
                case 3u:
                  fprintf_l(v3, 0, "uniformSubroutine[%d]");
                  break;
                case 4u:
                  fprintf_l(v3, 0, "bindable[%d][%d]");
                  break;
                case 5u:
                  fprintf_l(v3, 0, "env[%d]");
                  break;
                case 6u:
                  v84 = *(_QWORD *)v74;
                  goto LABEL_241;
                case 7u:
                  fprintf_l(v3, 0, "verticesIn", v168, v169, *(_QWORD *)v170, v171);
                  break;
                case 8u:
                  fprintf_l(v3, 0, "verticesOut", v168, v169, *(_QWORD *)v170, v171);
                  break;
                case 9u:
                  fprintf_l(v3, 0, "numSamples", v168, v169, *(_QWORD *)v170, v171);
                  break;
                case 0xAu:
                  fprintf_l(v3, 0, "tfBuffer[%d][%d][%d]");
                  break;
                case 0xBu:
                  fprintf_l(v3, 0, "tfBase[%d][%d]");
                  break;
                case 0xCu:
                case 0xDu:
                  fprintf_l(v3, 0, "inputs[%d][%d]");
                  break;
                case 0xEu:
                  fprintf_l(v3, 0, "generic[%d]");
                  break;
                case 0xFu:
                  fprintf_l(v3, 0, "matrix.");
                  switch((*(_QWORD *)v74 >> 44) & 7)
                  {
                    case 0:
                      fprintf_l(v3, 0, "mvp.", v168);
                      break;
                    case 1:
                      fprintf_l(v3, 0, "projection.", v168);
                      break;
                    case 2:
                      fprintf_l(v3, 0, "color[%d].");
                      break;
                    case 3:
                      fprintf_l(v3, 0, "modelview[%d].");
                      break;
                    case 4:
                      fprintf_l(v3, 0, "texture[%d].");
                      break;
                    case 5:
                      fprintf_l(v3, 0, "program[%d].");
                      break;
                    case 6:
                      fprintf_l(v3, 0, "palette[%d].");
                      break;
                    default:
                      break;
                  }
                  v87 = ((*(_QWORD *)v74 >> 40) & 3) - 1;
                  if (v87 <= 2)
                    fprintf_l(v3, 0, off_24F4B3ED0[v87]);
                  fprintf_l(v3, 0, "row[%d]");
                  break;
                case 0x10u:
                  fprintf_l(v3, 0, "light[%d].", *((unsigned __int8 *)v74 + 4));
                  switch((*(_QWORD *)v74 >> 40) & 0xF)
                  {
                    case 0:
                      goto LABEL_278;
                    case 1:
                      goto LABEL_292;
                    case 2:
                      goto LABEL_293;
                    case 3:
                      fprintf_l(v3, 0, "position", v168, v169, *(_QWORD *)v170, v171);
                      break;
                    case 4:
                      fprintf_l(v3, 0, "spot.direction", v168, v169, *(_QWORD *)v170, v171);
                      break;
                    case 5:
                      fprintf_l(v3, 0, "attenuation", v168, v169, *(_QWORD *)v170, v171);
                      break;
                    case 6:
                      fprintf_l(v3, 0, "half", v168, v169, *(_QWORD *)v170, v171);
                      break;
                    case 7:
                      fprintf_l(v3, 0, "position_norm", v168, v169, *(_QWORD *)v170, v171);
                      break;
                    case 8:
                      fprintf_l(v3, 0, "direction_norm", v168, v169, *(_QWORD *)v170, v171);
                      break;
                    case 9:
                      fprintf_l(v3, 0, "spotcutoff");
                      break;
                    default:
                      goto LABEL_309;
                  }
                  break;
                case 0x11u:
                  fprintf_l(v3, 0, "lightprod[%d].", *((unsigned __int8 *)v74 + 4));
                  if ((*(_QWORD *)v74 & 0x10000000000) != 0)
                    fprintf_l(v3, 0, "back.");
                  else
                    fprintf_l(v3, 0, "front.");
                  v86 = (*(_QWORD *)v74 >> 41) & 3;
                  switch((_DWORD)v86)
                  {
                    case 2:
LABEL_293:
                      fprintf_l(v3, 0, "specular", v168, v169, *(_QWORD *)v170, v171);
                      break;
                    case 1:
LABEL_292:
                      fprintf_l(v3, 0, "diffuse", v168, v169, *(_QWORD *)v170, v171);
                      break;
                    case 0:
LABEL_278:
                      fprintf_l(v3, 0, "ambient", v168, v169, *(_QWORD *)v170, v171);
                      break;
                  }
                  break;
                case 0x12u:
                  if ((*(_QWORD *)v74 & 0xE00000000) == 0xA00000000)
                    fprintf_l(v3, 0, "lightmodel.");
                  else
                    fprintf_l(v3, 0, "material.");
                  if ((*(_QWORD *)v74 & 0x100000000) != 0)
                    fprintf_l(v3, 0, "back.");
                  else
                    fprintf_l(v3, 0, "front.");
                  switch((*(_QWORD *)v74 >> 33) & 7)
                  {
                    case 0:
                      goto LABEL_278;
                    case 1:
                      goto LABEL_292;
                    case 2:
                      goto LABEL_293;
                    case 3:
                      fprintf_l(v3, 0, "emission", v168, v169, *(_QWORD *)v170, v171);
                      break;
                    case 4:
                      fprintf_l(v3, 0, "shininess", v168, v169, *(_QWORD *)v170, v171);
                      break;
                    case 5:
                      fprintf_l(v3, 0, "scenecolor", v168, v169, *(_QWORD *)v170, v171);
                      break;
                    default:
                      goto LABEL_309;
                  }
                  break;
                case 0x13u:
                  fprintf_l(v3, 0, "lightmodel.ambient", v168, v169, *(_QWORD *)v170, v171);
                  break;
                case 0x14u:
                  fprintf_l(v3, 0, "texgen[%d].eye.", v74[1] & 0x7F);
                  switch((*(_QWORD *)v74 >> 39) & 7)
                  {
                    case 0:
                      goto LABEL_282;
                    case 1:
                      goto LABEL_294;
                    case 2:
                      goto LABEL_295;
                    case 3:
                      goto LABEL_296;
                    default:
                      goto LABEL_309;
                  }
                case 0x15u:
                  fprintf_l(v3, 0, "texgen[%d].object.", v74[1] & 0x7F);
                  switch((*(_QWORD *)v74 >> 39) & 7)
                  {
                    case 0:
LABEL_282:
                      fprintf_l(v3, 0, "s", v168, v169, *(_QWORD *)v170, v171);
                      break;
                    case 1:
LABEL_294:
                      fprintf_l(v3, 0, "t", v168, v169, *(_QWORD *)v170, v171);
                      break;
                    case 2:
LABEL_295:
                      fprintf_l(v3, 0, "r", v168, v169, *(_QWORD *)v170, v171);
                      break;
                    case 3:
LABEL_296:
                      fprintf_l(v3, 0, "q", v168, v169, *(_QWORD *)v170, v171);
                      break;
                    default:
                      goto LABEL_309;
                  }
                  break;
                case 0x16u:
                  fprintf_l(v3, 0, "texenv[%d].color");
                  break;
                case 0x18u:
                  fprintf_l(v3, 0, "clip[%d].plane");
                  break;
                case 0x19u:
                  fprintf_l(v3, 0, "fog.color", v168, v169, *(_QWORD *)v170, v171);
                  break;
                case 0x1Au:
                  fprintf_l(v3, 0, "fog.params", v168, v169, *(_QWORD *)v170, v171);
                  break;
                case 0x1Bu:
                  fprintf_l(v3, 0, "fog.params_ext", v168, v169, *(_QWORD *)v170, v171);
                  break;
                case 0x1Cu:
                  fprintf_l(v3, 0, "point.size", v168, v169, *(_QWORD *)v170, v171);
                  break;
                case 0x1Du:
                  fprintf_l(v3, 0, "point.attenuation", v168, v169, *(_QWORD *)v170, v171);
                  break;
                case 0x1Eu:
                  fprintf_l(v3, 0, "depth.range", v168, v169, *(_QWORD *)v170, v171);
                  break;
                case 0x1Fu:
                  fprintf_l(v3, 0, "normalscale", v168, v169, *(_QWORD *)v170, v171);
                  break;
                default:
                  goto LABEL_309;
              }
              goto LABEL_309;
            }
LABEL_241:
            switch((v84 >> 3) & 7)
            {
              case 0u:
                fprintf_l(v3, 0, "{%g, %g, %g, %g}");
                break;
              case 1u:
              case 2u:
                fprintf_l(v3, 0, "{%d, %d, %d, %d}");
                break;
              case 3u:
                fprintf_l(v3, 0, "{%u, %u, %u, %u}");
                break;
              case 4u:
                fprintf_l(v3, 0, "{%g, %g}");
                break;
              default:
                break;
            }
LABEL_309:
            v184 = v83;
            if (*v76 == -1)
            {
              v88 = ";\n";
            }
            else
            {
              if (v83 + 1 == v67[v82])
                v88 = "\n};\n";
              else
                v88 = ",\n";
              if (v83 + 1 == v67[v82])
                ++v82;
            }
            fprintf_l(v3, 0, v88);
            v74 += 2;
            ++v75;
            ++v76;
            if (!--v70)
              goto LABEL_325;
          }
          fprintf_l(v3, 0, "program.");
          goto LABEL_238;
        }
      }
    }
LABEL_325:
    if (v67)
      free(v67);
    fprintf_l(v3, 0, "\n");
  }
  else
  {
    v179 = 0;
    v181 = 0;
  }
  v89 = a1[16];
  if ((int)v89 >= 1)
  {
    v90 = 0;
    v91 = &a1[2 * a1[17]];
    if (v186 == 36488)
      v92 = "SHARED shr";
    else
      v92 = "OUTPUT res";
    while (1)
    {
      v93 = *(_QWORD *)&v91[2 * v90];
      if ((v93 & 0x2000) != 0)
      {
        fprintf_l(v3, 0, "INVARIANT ");
        v93 = *(_QWORD *)&v91[2 * v90];
        if ((v93 & 0x4000) != 0)
        {
LABEL_343:
          fprintf_l(v3, 0, "PATCH ");
          v93 = *(_QWORD *)&v91[2 * v90];
          if ((v93 & 0x8000) == 0)
            goto LABEL_336;
LABEL_335:
          fprintf_l(v3, 0, "SAMPLE ");
          v93 = *(_QWORD *)&v91[2 * v90];
          goto LABEL_336;
        }
      }
      else if ((v93 & 0x4000) != 0)
      {
        goto LABEL_343;
      }
      if ((v93 & 0x8000) != 0)
        goto LABEL_335;
LABEL_336:
      v94 = (v93 & 7) - 1;
      if (v94 <= 2)
        fprintf_l(v3, 0, off_24F4B3EE8[v94]);
      fprintf_l(v3, 0, v92);
      fprintf_l(v3, 0, "%d", v90);
      if (v187)
        glpWriteSizeTypePrecision(v3, v91[2 * v90] >> 6, (v91[2 * v90] >> 3) & 7, v91[2 * v90] & 7);
      fprintf_l(v3, 0, " = ");
      v95 = *(_QWORD *)&v91[2 * v90];
      switch((v95 >> 8) & 0x1F)
      {
        case 0u:
          fprintf_l(v3, 0, "result.none", v168);
          goto LABEL_378;
        case 1u:
          fprintf_l(v3, 0, "result.position", v168);
          goto LABEL_378;
        case 3u:
          fprintf_l(v3, 0, "result.pointsize", v168);
          goto LABEL_378;
        case 4u:
          fprintf_l(v3, 0, "result.color");
          if (v186 <= 35631)
          {
            if (v186 == 34336)
              goto LABEL_374;
            if (v186 == 34820)
            {
LABEL_371:
              v97 = *(_QWORD *)&v91[2 * v90];
              if ((v97 & 0x1E00000000) != 0)
              {
                fprintf_l(v3, 0, "[%d]", (v97 >> 33) & 7);
                if ((v91[2 * v90 + 1] & 0x10) != 0)
                  fprintf_l(v3, 0, "[%d]");
              }
            }
          }
          else
          {
            if (v186 == 35632)
              goto LABEL_371;
            if (v186 == 36313 || v186 == 35633)
            {
LABEL_374:
              if ((v91[2 * v90 + 1] & 1) != 0)
                fprintf_l(v3, 0, ".back.primary", v168);
              else
                fprintf_l(v3, 0, ".front.primary", v168);
            }
          }
LABEL_378:
          fprintf_l(v3, 0, ";\n");
          if (v89 == ++v90)
            goto LABEL_382;
          break;
        case 5u:
          fprintf_l(v3, 0, "result.color");
          if (v186 == 35633 || v186 == 34336)
          {
            if ((v91[2 * v90 + 1] & 1) != 0)
              fprintf_l(v3, 0, ".back.secondary", v168);
            else
              fprintf_l(v3, 0, ".front.secondary", v168);
          }
          goto LABEL_378;
        case 7u:
          fprintf_l(v3, 0, "result.depth", v168);
          goto LABEL_378;
        case 9u:
          fprintf_l(v3, 0, "result.clipVertex", v168);
          goto LABEL_378;
        case 0xAu:
          fprintf_l(v3, 0, "result.clipDistance[%d]");
          goto LABEL_378;
        case 0xBu:
          fprintf_l(v3, 0, "result.primitiveid", v168);
          goto LABEL_378;
        case 0xCu:
          fprintf_l(v3, 0, "result.layer", v168);
          goto LABEL_378;
        case 0xDu:
          fprintf_l(v3, 0, "result.tessLevelOuter", v168);
          goto LABEL_378;
        case 0xEu:
          fprintf_l(v3, 0, "result.tessLevelInner", v168);
          goto LABEL_378;
        case 0xFu:
          fprintf_l(v3, 0, "result.sampleMask[%d]");
          goto LABEL_378;
        case 0x10u:
          fprintf_l(v3, 0, "result.viewportIndex", v168);
          goto LABEL_378;
        case 0x11u:
          v96 = HIDWORD(v95) & 0x3F;
          if ((v95 & 0x4000000000) != 0)
          {
            fprintf_l(v3, 0, "result.generic[%d]");
          }
          else if ((v96 - 8) >= 8)
          {
            if ((_DWORD)v96 == 5)
              fprintf_l(v3, 0, "result.fogcoord", v168);
          }
          else
          {
            fprintf_l(v3, 0, "result.texcoord[%d]");
          }
          goto LABEL_378;
        default:
          goto LABEL_378;
      }
    }
  }
LABEL_382:
  if (!v187 || (_DWORD)v89)
    fprintf_l(v3, 0, "\n");
  v98 = a1[26];
  v99 = (int)sizea;
  if (v98 >= 1)
  {
    v100 = 0;
    v101 = 0;
    v102 = &a1[2 * a1[27]];
    v103 = a1[26];
    do
    {
      v104 = *(_QWORD *)&v102[2 * v101];
      v105 = (v104 >> 6);
      if (v105 == 75 || (v105 == 76 ? (v106 = (*(_QWORD *)&v102[2 * v101] & 7) == 1) : (v106 = 1), !v106))
        ++v100;
      v101 += (v104 & 7) + 2;
      --v103;
    }
    while (v103);
    v107 = (int)v177;
    if (v100)
    {
      v108 = (char *)malloc_type_malloc(4 * v100, 0x7081ABB9uLL);
      if (v108)
      {
        v109 = v108;
        v110 = v100;
        bzero(v108, v100);
        v111 = malloc_type_malloc(4 * v100, 0x7081ABB9uLL);
        if (v111)
        {
          v112 = v111;
          bzero(v111, v110);
          v113 = 0;
          v114 = 0;
          v115 = 0;
          v116 = v112 + 1;
          v117 = v109 + 4;
          v107 = (int)v177;
          while (1)
          {
            v118 = v114;
            v119 = *(_QWORD *)&v102[2 * v114];
            v120 = (v119 >> 6);
            if (v120 != 75 && (v120 != 76 || (v119 & 7) == 1))
              goto LABEL_417;
            v122 = v119 >> 46;
            if (v113 < 1)
            {
              LODWORD(v123) = 0;
            }
            else
            {
              v123 = 0;
              while (*(_DWORD *)&v109[4 * v123] < (int)v122)
              {
                if (v113 == ++v123)
                  goto LABEL_410;
              }
            }
            if ((_DWORD)v123 == v113)
              break;
            v126 = *(_DWORD *)&v109[4 * v123];
            if (v126 != (_DWORD)v122)
            {
              v127 = v123;
              *(_DWORD *)&v109[4 * v123] = v122;
              v125 = v112[v123];
              v112[v123] = v115;
              v124 = v123 + 1;
              if ((int)v124 < v113)
              {
                do
                {
                  v128 = v126;
                  v129 = v125;
                  v126 = *(_DWORD *)&v117[4 * v127];
                  *(_DWORD *)&v117[4 * v127] = v128;
                  v125 = v116[v127];
                  v116[v127++] = v129;
                }
                while (v113 > (int)v127 + 1);
                v124 = v113;
              }
              LODWORD(v122) = v126;
              goto LABEL_416;
            }
LABEL_417:
            v114 = v118 + (v119 & 7) + 2;
            if (++v115 == v98)
              goto LABEL_420;
          }
LABEL_410:
          v124 = v113;
          v125 = v115;
LABEL_416:
          ++v113;
          *(_DWORD *)&v109[4 * v124] = v122;
          v112[v124] = v125;
          v119 = *(_QWORD *)&v102[2 * v118];
          goto LABEL_417;
        }
      }
LABEL_535:
      abort();
    }
    v109 = 0;
    v112 = 0;
    v113 = 0;
LABEL_420:
    v175 = v112;
    v185 = v102;
    v130 = 0;
    v131 = 0;
    for (j = 0; j != v98; ++j)
    {
      __ptr = 0;
      v133 = (uint64_t *)&v185[2 * v131];
      if ((*v133 & 0x4000) != 0)
        fprintf_l(v3, 0, "main:\n");
      if (v113 && v130 < v113 && j == *(_DWORD *)&v109[4 * v130])
      {
        v134 = v190;
        v135 = v190 - 2;
        if (v190 >= 2)
        {
          if (v135 >= 0x31)
            v135 = 49;
          v136 = v135 + 1;
          do
          {
            fprintf_l(v3, 0, "  ");
            --v136;
          }
          while (v136);
        }
        fprintf_l(v3, 0, "label_%d:\n", v130);
        v190 = v134;
        ++v130;
        v107 = (int)v177;
        v99 = (int)sizea;
      }
      v137 = (*(_DWORD *)v133 >> 6) - 88;
      v138 = v137 > 0x37;
      v139 = (1 << v137) & 0x8000000010000FLL;
      if (!v138 && v139 != 0)
        --v190;
      glpDisassemble1Op(j, v133, v3, &__ptr, (int)v181, (int)v179, v107, v99, (uint64_t)v109, &v190, v187);
      v131 += __ptr + 1;
    }
    a1 = v172;
    if (v113 && v130 < v113 && v98 + 1 == *(_DWORD *)&v109[4 * v130])
    {
      fprintf_l(v3, 0, "  label_%d:\n", v130);
    }
    else if (!v113)
    {
      goto LABEL_444;
    }
    free(v109);
    free(v175);
  }
LABEL_444:
  fprintf_l(v3, 0, "END\n");
  v141 = a1[32];
  if ((int)v141 >= 1)
  {
    v142 = &v172[2 * v172[33]];
    while (2)
    {
      v143 = *v142 >> 3;
      fprintf_l(v3, 0, "STATE ");
      switch(v143)
      {
        case 0:
          fprintf_l(v3, 0, "APPLY AA", v168, v169);
          goto LABEL_469;
        case 1:
          fprintf_l(v3, 0, "DEPTH BOUNDS TEST", v168, v169);
          goto LABEL_469;
        case 2:
          fprintf_l(v3, 0, "MULTISAMPLE ");
          v155 = *(_QWORD *)v142;
          if ((*(_QWORD *)v142 & 0x1000) != 0)
          {
            fprintf_l(v3, 0, "SAMPLE_ALPHA_TO_COVERAGE ");
            v155 = *(_QWORD *)v142;
            if ((*(_QWORD *)v142 & 0x2000) == 0)
            {
LABEL_475:
              if ((v155 & 0x4000) == 0)
                goto LABEL_469;
              goto LABEL_504;
            }
          }
          else if ((v155 & 0x2000) == 0)
          {
            goto LABEL_475;
          }
          fprintf_l(v3, 0, "SAMPLE_ALPHA_TO_ONE ");
          if ((*(_QWORD *)v142 & 0x4000) == 0)
            goto LABEL_469;
LABEL_504:
          fprintf_l(v3, 0, "SAMPLE_COVERAGE ", v168, v169);
LABEL_469:
          fprintf_l(v3, 0, ";\n");
          v142 += 2;
          if (!--v141)
            break;
          continue;
        case 3:
          fprintf_l(v3, 0, "ALPHA_TEST ");
          switch(*v142 >> 29)
          {
            case 0:
              goto LABEL_486;
            case 1:
              goto LABEL_506;
            case 2:
              goto LABEL_507;
            case 3:
              goto LABEL_508;
            case 4:
              goto LABEL_509;
            case 5:
              goto LABEL_510;
            case 6:
              goto LABEL_511;
            default:
              goto LABEL_505;
          }
        case 4:
          fprintf_l(v3, 0, "STENCIL_TEST \n\tfunc = ");
          v156 = (*v142 >> 17) & 7;
          v157 = "PP_ALWAYS ";
          if (v156 != 7)
            v157 = off_24F4B4050[v156];
          fprintf_l(v3, 0, v157);
          fprintf_l(v3, 0, "\n\topfail = ");
          fprintf_l(v3, 0, off_24F4B4010[(*(_QWORD *)v142 >> 14) & 7]);
          fprintf_l(v3, 0, "\n\topzfail = ");
          fprintf_l(v3, 0, off_24F4B4010[(*(_QWORD *)v142 >> 11) & 7]);
          fprintf_l(v3, 0, "\n\topzpass = ");
          fprintf_l(v3, 0, off_24F4B4010[(*(_QWORD *)v142 >> 8) & 7]);
          fprintf_l(v3, 0, "\n\tbackfunc = ");
          v158 = *v142 >> 29;
          v159 = "PP_ALWAYS ";
          if (v158 != 7)
            v159 = off_24F4B4050[v158];
          fprintf_l(v3, 0, v159);
          fprintf_l(v3, 0, "\n\tbackopfail = ");
          fprintf_l(v3, 0, off_24F4B4010[(*(_QWORD *)v142 >> 26) & 7]);
          fprintf_l(v3, 0, "\n\tbackopzfail = ");
          fprintf_l(v3, 0, off_24F4B4010[(*(_QWORD *)v142 >> 23) & 7]);
          fprintf_l(v3, 0, "\n\tbackopzpass = ");
          __asm { BR              X9 }
          return result;
        case 5:
          if ((*((_BYTE *)v142 + 3) & 0x10) != 0)
            fprintf_l(v3, 0, "DEPTH_CLAMP ");
          fprintf_l(v3, 0, "DEPTH_TEST func = ");
          switch(*v142 >> 29)
          {
            case 0:
LABEL_486:
              fprintf_l(v3, 0, "PP_NEVER ", v168, v169);
              break;
            case 1:
LABEL_506:
              fprintf_l(v3, 0, "PP_LESS ", v168, v169);
              break;
            case 2:
LABEL_507:
              fprintf_l(v3, 0, "PP_EQUAL ", v168, v169);
              break;
            case 3:
LABEL_508:
              fprintf_l(v3, 0, "PP_LEQUAL ", v168, v169);
              break;
            case 4:
LABEL_509:
              fprintf_l(v3, 0, "PP_GREATER ", v168, v169);
              break;
            case 5:
LABEL_510:
              fprintf_l(v3, 0, "PP_NOTEQUAL ", v168, v169);
              break;
            case 6:
LABEL_511:
              fprintf_l(v3, 0, "PP_GEQUAL ");
              break;
            default:
LABEL_505:
              fprintf_l(v3, 0, "PP_ALWAYS ", v168, v169);
              break;
          }
          goto LABEL_469;
        case 6:
          fprintf_l(v3, 0, "FRAGMENT_COUNT ENABLED ", v168, v169);
          goto LABEL_469;
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
          fprintf_l(v3, 0, "BLENDING \n\talpha equ = ");
          v149 = (*v142 >> 8) & 7;
          if (v149 <= 4)
            fprintf_l(v3, 0, off_24F4B3F00[v149]);
          fprintf_l(v3, 0, "\n\trgb equ = ");
          v150 = (*v142 >> 11) & 7;
          if (v150 <= 4)
            fprintf_l(v3, 0, off_24F4B3F00[v150]);
          fprintf_l(v3, 0, "\n\tsrc = ");
          v151 = (*(_QWORD *)v142 >> 47) & 0x1FLL;
          if (v151 <= 0x12)
            fprintf_l(v3, 0, off_24F4B3F28[v151]);
          fprintf_l(v3, 0, "\n\tsrcA = ");
          v152 = (*(_QWORD *)v142 >> 42) & 0x1FLL;
          if (v152 <= 0x12)
            fprintf_l(v3, 0, off_24F4B3F28[v152]);
          fprintf_l(v3, 0, "\n\tdst = ");
          v153 = (*(_QWORD *)v142 >> 37) & 0x1FLL;
          if (v153 <= 0x12)
            fprintf_l(v3, 0, off_24F4B3F28[v153]);
          fprintf_l(v3, 0, "\n\tdstA = ");
          v154 = HIDWORD(*(_QWORD *)v142) & 0x1FLL;
          if (v154 <= 0x12)
            fprintf_l(v3, 0, off_24F4B3F28[v154]);
          fprintf_l(v3, 0, "\n\tBuffer = %d ");
          goto LABEL_469;
        case 16:
          fprintf_l(v3, 0, "DITHERING ENABLED", v168, v169);
          goto LABEL_469;
        case 17:
          fprintf_l(v3, 0, "LOGIC_OP ");
          __asm { BR              X9 }
          return result;
        case 18:
          fprintf_l(v3, 0, "BUFFER_MASK ");
          v160 = *(_QWORD *)v142;
          if (HIBYTE(*(_QWORD *)v142) != 255)
          {
            fprintf_l(v3, 0, "RED MASK = 0x%0X ", HIBYTE(*(_QWORD *)v142));
            v160 = *(_QWORD *)v142;
          }
          if (BYTE6(v160) != 255)
          {
            fprintf_l(v3, 0, "GREEN MASK = 0x%0X ", BYTE6(v160));
            v160 = *(_QWORD *)v142;
          }
          if (BYTE5(v160) != 255)
          {
            fprintf_l(v3, 0, "BLUE MASK = 0x%0X ", BYTE5(v160));
            v160 = *(_QWORD *)v142;
          }
          if (BYTE4(v160) != 255)
          {
            fprintf_l(v3, 0, "ALPHA MASK = 0x%0X ", BYTE4(v160));
            v160 = *(_QWORD *)v142;
          }
          if ((v160 & 0x1000000) == 0)
          {
            fprintf_l(v3, 0, "DEPTH MASK = 0 ");
            v160 = *(_QWORD *)v142;
          }
          if ((~(_DWORD)v160 & 0xFFFF00) != 0)
            fprintf_l(v3, 0, "STENCIL MASK = 0x%0X STENCIL BACK MASK = 0x%0X ");
          goto LABEL_469;
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
          fprintf_l(v3, 0, "BUFFER_CONFIG ");
          v144 = *(_QWORD *)v142;
          if ((*(_QWORD *)v142 & 0x4000) != 0)
          {
            fprintf_l(v3, 0, "sRGB ");
            v144 = *(_QWORD *)v142;
          }
          v145 = ((v144 >> 8) & 0xF) - 1;
          v146 = "unknown type ";
          if (v145 <= 9)
            v146 = off_24F4B3FC0[v145];
          fprintf_l(v3, 0, v146);
          v147 = *(_QWORD *)v142;
          v148 = (*(_QWORD *)v142 >> 40) & 3;
          if ((_DWORD)v148)
          {
            fprintf_l(v3, 0, "samplescale %d ", v148 + 1);
            v147 = *(_QWORD *)v142;
          }
          if ((v147 & 0x1000) != 0)
          {
            fprintf_l(v3, 0, "Texture layout ");
            v147 = *(_QWORD *)v142;
          }
          fprintf_l(v3, 0, "Width %d", v147 >> 15);
          fprintf_l(v3, 0, " Height %d");
          goto LABEL_469;
        default:
          goto LABEL_469;
      }
      break;
    }
  }
  if (v181)
    free(v181);
  if (v179)
    free(v179);
  if (v177)
    free(v177);
  if (sizea)
    free(sizea);
  v161 = v172[22];
  if (v161 >= 1)
  {
    v162 = 0;
    v163 = &v172[2 * v172[23]];
    do
    {
      v164 = &v163[2 * v162];
      fprintf_l(v3, 0, "TEXIMAGE[%d] ", *v164 & 0x7F);
      if ((*(_QWORD *)v164 & 0x400000000000000) != 0)
        fprintf_l(v3, 0, "valid; ");
      else
        fprintf_l(v3, 0, "invalid; ");
      fprintf_l(v3, 0, "mag filter = %s", glpPPDisassemble_tex_filters[(*(_QWORD *)v164 >> 44) & 1]);
      fprintf_l(v3, 0, "; min filter = %s", glpPPDisassemble_tex_filters[(*(_QWORD *)v164 >> 45) & 7]);
      fprintf_l(v3, 0, "; wrap(s,t,r) = (%s%s%s",
        glpPPDisassemble_tex_wraps[HIWORD(*(_QWORD *)v164) & 7],
        glpPPDisassemble_tex_wraps[(*(_QWORD *)v164 >> 51) & 7],
        glpPPDisassemble_tex_wraps[(*(_QWORD *)v164 >> 54) & 7]);
      fprintf_l(v3, 0, "); border = %d", (*(_QWORD *)v164 & 0x200000000000000) != 0);
      fprintf_l(v3, 0, "; compare func = ");
      v165 = (v164[2] >> 18) & 7;
      v166 = "PP_ALWAYS ";
      if (v165 != 7)
        v166 = off_24F4B4050[v165];
      fprintf_l(v3, 0, v166);
      fprintf_l(v3, 0, "; depth mode = %s", glpPPDisassemble_tex_formats[(*((_QWORD *)v164 + 1) >> 21) & 3]);
      fprintf_l(v3, 0, "; format = ");
      if (((v164[2] >> 23) & 0x1Fu) < 0x1D)
        fprintf_l(v3, 0, "%s");
      else
        fprintf_l(v3, 0, "unknown %d");
      fprintf_l(v3, 0, "; type = ");
      if (v164[2] >> 30 == 3)
        fprintf_l(v3, 0, "unknown %d");
      else
        fprintf_l(v3, 0, "%s");
      fprintf_l(v3, 0, ";\n");
      v162 += 2;
    }
    while (v161 > (int)v162);
  }
  LOBYTE(__ptr) = 0;
  fwrite(&__ptr, 1uLL, 1uLL, v3);
  fclose(v3);
  return v189[0];
}

uint64_t writefn(char **a1, void *__src, uint64_t a3)
{
  int v6;
  unsigned int v7;
  int v8;
  char *v9;
  size_t v10;

  v6 = *((_DWORD *)a1 + 2);
  v7 = *((_DWORD *)a1 + 3);
  v8 = v6 + a3;
  v9 = *a1;
  if (v6 + (int)a3 > v7)
  {
    v10 = (3 * (v7 + a3)) >> 1;
    *((_DWORD *)a1 + 3) = v10;
    v9 = (char *)malloc_type_realloc(v9, v10, 0x2BDC8648uLL);
    if (!v9)
      abort();
    *a1 = v9;
    v6 = *((_DWORD *)a1 + 2);
  }
  memcpy(&v9[v6], __src, (int)a3);
  *((_DWORD *)a1 + 2) = v8;
  return a3;
}

uint64_t glpWriteSizeTypePrecision(FILE *a1, int a2, unsigned int a3, int a4)
{
  uint64_t result;

  result = fprintf_l(a1, 0, ":%d", a2 + 1);
  if (a3 <= 4)
    result = fprintf_l(a1, 0, off_24F4B4088[a3]);
  if ((a4 - 1) <= 2)
    return fprintf_l(a1, 0, off_24F4B40B0[a4 - 1]);
  return result;
}

FILE *glpWriteOperandSize(FILE *result, int a2, int a3)
{
  FILE *v4;

  v4 = result;
  if (a2 != 3 || a3)
  {
    result = (FILE *)fprintf_l(result, 0, ":%d", a2 + 1);
    if (a3)
      return (FILE *)fprintf_l(v4, 0, ":%d", a3 + 1);
  }
  return result;
}

unint64_t defaultHashFunction(unint64_t a1)
{
  return a1 >> 3;
}

uint64_t defaultEqualsFunction(int a1, int a2)
{
  return (a1 - a2);
}

_QWORD *HashSetNew(unsigned int a1, unint64_t (*a2)(unint64_t a1), uint64_t (*a3)(int a1, int a2))
{
  _QWORD *v6;
  _QWORD *v7;
  unint64_t (*v8)(unint64_t);
  uint64_t (*v9)(int, int);
  void *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;

  v6 = malloc_type_malloc(0x20uLL, 0x7081ABB9uLL);
  if (!v6)
    goto LABEL_12;
  v7 = v6;
  v8 = defaultHashFunction;
  if (a2)
    v8 = a2;
  v9 = defaultEqualsFunction;
  if (a3)
    v9 = a3;
  v6[2] = v8;
  v6[3] = v9;
  *((_DWORD *)v6 + 1) = a1;
  v10 = malloc_type_malloc(16 * a1, 0x7081ABB9uLL);
  if (!v10)
    goto LABEL_12;
  v7[1] = v10;
  if (*((_DWORD *)v7 + 1))
  {
    v11 = 0;
    v12 = 0;
    while (1)
    {
      v13 = v7[1];
      *(_DWORD *)(v13 + v11) = 0;
      v14 = malloc_type_malloc(8uLL, 0x7081ABB9uLL);
      if (!v14)
        break;
      *(_QWORD *)(v13 + v11 + 8) = v14;
      ++v12;
      v11 += 16;
      if (v12 >= *((unsigned int *)v7 + 1))
        goto LABEL_11;
    }
LABEL_12:
    abort();
  }
LABEL_11:
  *(_DWORD *)v7 = 0;
  return v7;
}

void HashSetFree(_QWORD *a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v2 = *((unsigned int *)a1 + 1);
  if ((_DWORD)v2)
  {
    v3 = 0;
    v4 = 8;
    do
    {
      v5 = *(void **)(a1[1] + v4);
      if (v5)
      {
        free(v5);
        v2 = *((unsigned int *)a1 + 1);
      }
      ++v3;
      v4 += 16;
    }
    while (v3 < v2);
  }
  v6 = (void *)a1[1];
  if (v6)
    free(v6);
  free(a1);
}

uint64_t HashSetAdd(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  char *v19;

  v4 = (*(uint64_t (**)(uint64_t))(a1 + 16))(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (int)(v4 % *(_DWORD *)(a1 + 4));
  v7 = (unsigned int *)(v5 + 16 * v6);
  v8 = *v7;
  if (*v7)
  {
    v9 = 0;
    v10 = (uint64_t *)(v5 + 16 * v6 + 8);
    v11 = -1;
    do
    {
      v12 = *v10;
      v13 = *(_QWORD *)(*v10 + 8 * v9);
      if (v13)
      {
        if (!(*(unsigned int (**)(uint64_t, uint64_t))(a1 + 24))(v13, a2))
        {
          *(_QWORD *)(v12 + 8 * v9) = a2;
          return a1;
        }
        v8 = *v7;
      }
      else if (v11 == -1)
      {
        v11 = v9;
      }
      ++v9;
    }
    while (v9 < v8);
    if (v11 == -1)
      goto LABEL_11;
    v14 = (char *)(*v10 + 8 * v11);
  }
  else
  {
LABEL_11:
    v15 = v8 + 1;
    *v7 = v15;
    v16 = v5 + 16 * v6;
    v18 = *(void **)(v16 + 8);
    v17 = (_QWORD *)(v16 + 8);
    v19 = (char *)malloc_type_realloc(v18, 8 * v15, 0x2BDC8648uLL);
    if (!v19)
      abort();
    *v17 = v19;
    v14 = &v19[8 * *v7 - 8];
  }
  *(_QWORD *)v14 = a2;
  ++*(_DWORD *)a1;
  return a1;
}

uint64_t HashSetGet(uint64_t a1, uint64_t a2)
{
  signed int v4;
  uint64_t v5;
  unsigned int *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  v4 = (*(unsigned int (**)(uint64_t))(a1 + 16))(a2) % *(_DWORD *)(a1 + 4);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (unsigned int *)(v5 + 16 * v4);
  v7 = *v6;
  if (!(_DWORD)v7)
    return 0;
  v8 = 0;
  v9 = (uint64_t *)(v5 + 16 * v4 + 8);
  while (1)
  {
    v10 = *v9;
    v11 = *(_QWORD *)(*v9 + 8 * v8);
    if (v11)
      break;
LABEL_6:
    if (++v8 >= v7)
      return 0;
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t))(a1 + 24))(v11, a2))
  {
    v7 = *v6;
    goto LABEL_6;
  }
  return *(_QWORD *)(v10 + 8 * v8);
}

uint64_t HashSetRemove(uint64_t a1, uint64_t a2)
{
  signed int v4;
  uint64_t v5;
  unsigned int *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v4 = (*(unsigned int (**)(uint64_t))(a1 + 16))(a2) % *(_DWORD *)(a1 + 4);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (unsigned int *)(v5 + 16 * v4);
  v7 = *v6;
  if (!(_DWORD)v7)
    return 0;
  v8 = 0;
  v9 = (uint64_t *)(v5 + 16 * v4 + 8);
  while (1)
  {
    v10 = *v9;
    v11 = *(_QWORD *)(*v9 + 8 * v8);
    if (v11)
      break;
LABEL_6:
    if (++v8 >= v7)
      return 0;
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t))(a1 + 24))(v11, a2))
  {
    v7 = *v6;
    goto LABEL_6;
  }
  result = *(_QWORD *)(v10 + 8 * v8);
  *(_QWORD *)(v10 + 8 * v8) = 0;
  --*(_DWORD *)a1;
  return result;
}

uint64_t HashSetIteratorSetup(uint64_t result, _QWORD *a2)
{
  *a2 = result;
  a2[1] = 0;
  return result;
}

uint64_t HashSetIteratorNext(unsigned int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int i;
  unsigned int v5;
  uint64_t *v6;
  uint64_t v7;

  v1 = *(unsigned int *)(*(_QWORD *)a1 + 4);
  v2 = a1[2];
  if (v2 >= v1)
    return 0;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  for (i = a1[3]; ; i = 0)
  {
    v5 = *(_DWORD *)(v3 + 16 * v2);
    if (i < v5)
      break;
LABEL_8:
    *((_QWORD *)a1 + 1) = ++v2;
    if (v2 == v1)
      return 0;
  }
  v6 = (uint64_t *)(*(_QWORD *)(v3 + 16 * v2 + 8) + 8 * i);
  while (1)
  {
    v7 = *v6;
    ++i;
    if (*v6)
      break;
    ++v6;
    if (v5 == i)
    {
      a1[3] = i;
      goto LABEL_8;
    }
  }
  a1[3] = i;
  return v7;
}

_QWORD *HashTableNew(unsigned int a1, unint64_t (*a2)(unint64_t a1), uint64_t (*a3)(int a1, int a2))
{
  _QWORD *v6;
  _QWORD *v7;

  v6 = malloc_type_malloc(8uLL, 0x7081ABB9uLL);
  if (!v6)
    abort();
  v7 = v6;
  *v6 = HashSetNew(a1, a2, a3);
  return v7;
}

void HashTableFree(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t i;
  unsigned int *v5;
  unint64_t v6;
  unint64_t j;
  void *v8;

  v2 = *a1;
  v3 = *(unsigned int *)(*a1 + 4);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = (unsigned int *)(*(_QWORD *)(v2 + 8) + 16 * i);
      v6 = *v5;
      if ((_DWORD)v6)
      {
        for (j = 0; j < v6; ++j)
        {
          v8 = *(void **)(*((_QWORD *)v5 + 1) + 8 * j);
          if (v8)
          {
            free(v8);
            v6 = *v5;
          }
        }
        v3 = *(unsigned int *)(v2 + 4);
      }
    }
    v2 = *a1;
  }
  HashSetFree((_QWORD *)v2);
  free(a1);
}

uint64_t *HashTableAdd(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  char *v20;
  unsigned int v21;
  uint64_t v22;
  char **v23;
  void *v24;
  char *v25;
  char *v26;
  unsigned int v27;
  uint64_t *v29;
  uint64_t v30;

  v5 = a1;
  v6 = *a1;
  v7 = (*(uint64_t (**)(uint64_t))(*a1 + 16))(a2);
  v8 = *(_QWORD *)(v6 + 8);
  v9 = (int)(v7 % *(_DWORD *)(v6 + 4));
  v10 = (unsigned int *)(v8 + 16 * v9);
  v11 = *v10;
  if (*v10)
  {
    v29 = v5;
    v30 = a3;
    v12 = 0;
    v13 = 0;
    v14 = (uint64_t *)(v8 + 16 * v9 + 8);
    v15 = -1;
    do
    {
      v16 = *v14;
      v17 = *(_QWORD **)(*v14 + v12);
      if (v17)
      {
        if (!(*(unsigned int (**)(_QWORD, uint64_t))(v6 + 24))(*v17, a2))
        {
          v20 = (char *)(v16 + v12);
          v19 = *(_QWORD **)(v16 + v12);
          v5 = v29;
          a3 = v30;
          goto LABEL_17;
        }
        v11 = *v10;
      }
      else if (v15 == -1)
      {
        v15 = v13;
      }
      ++v13;
      v12 += 8;
    }
    while (v13 < v11);
    v5 = v29;
    a3 = v30;
    if (v15 != -1)
    {
      v18 = *v14;
      v19 = malloc_type_malloc(0x10uLL, 0x7081ABB9uLL);
      if (v19)
      {
        v20 = (char *)(v18 + 8 * v15);
        goto LABEL_15;
      }
LABEL_18:
      abort();
    }
  }
  v21 = v11 + 1;
  *v10 = v21;
  v22 = v8 + 16 * v9;
  v24 = *(void **)(v22 + 8);
  v23 = (char **)(v22 + 8);
  v25 = (char *)malloc_type_realloc(v24, 8 * v21, 0x2BDC8648uLL);
  if (!v25)
    goto LABEL_18;
  v26 = v25;
  *v23 = v25;
  v27 = *v10;
  v19 = malloc_type_malloc(0x10uLL, 0x7081ABB9uLL);
  if (!v19)
    goto LABEL_18;
  v20 = &v26[8 * v27 - 8];
LABEL_15:
  *(_QWORD *)v20 = v19;
LABEL_17:
  *v19 = a2;
  *(_QWORD *)(*(_QWORD *)v20 + 8) = a3;
  return v5;
}

uint64_t HashTableGet(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  signed int v4;
  uint64_t v5;
  unsigned int *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;

  v3 = *a1;
  v4 = (*(unsigned int (**)(uint64_t))(*a1 + 16))(a2) % *(_DWORD *)(v3 + 4);
  v5 = *(_QWORD *)(v3 + 8);
  v6 = (unsigned int *)(v5 + 16 * v4);
  v7 = *v6;
  if (!(_DWORD)v7)
    return 0;
  v8 = 0;
  v9 = (uint64_t *)(v5 + 16 * v4 + 8);
  while (1)
  {
    v10 = *v9;
    v11 = *(_QWORD **)(*v9 + 8 * v8);
    if (v11)
      break;
LABEL_6:
    if (++v8 >= v7)
      return 0;
  }
  if ((*(unsigned int (**)(_QWORD, uint64_t))(v3 + 24))(*v11, a2))
  {
    v7 = *v6;
    goto LABEL_6;
  }
  return *(_QWORD *)(*(_QWORD *)(v10 + 8 * v8) + 8);
}

uint64_t BuildGenKill(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned int *v9;
  unint64_t v10;
  unint64_t i;
  unsigned int *v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;

  if (*(_DWORD *)(result + 32))
  {
    v1 = result;
    v2 = 0;
    v19 = result;
    do
    {
      v3 = *(_QWORD *)(v1 + 8);
      v20 = v2;
      v4 = (unsigned int *)(v3 + 80 * v2);
      *((_QWORD *)v4 + 8) = BitSetNew(*(_DWORD *)(v1 + 36));
      *((_QWORD *)v4 + 9) = BitSetNew(*(_DWORD *)(v1 + 36));
      v5 = (uint64_t *)(v4 + 18);
      result = BitSetNew(*(_DWORD *)(v1 + 36));
      *((_QWORD *)v4 + 5) = result;
      if (*v4)
      {
        v6 = 0;
        v7 = (uint64_t *)(v3 + 80 * v20 + 16);
        do
        {
          v8 = *v7;
          v9 = (unsigned int *)(*v7 + 40 * v6);
          if (!v9[3])
          {
            v10 = *v9;
            if ((_DWORD)v10)
            {
              for (i = 0; i < v10; ++i)
              {
                v12 = *(unsigned int **)(*(_QWORD *)(v8 + 40 * v6 + 16) + 8 * i);
                if (!v12[8])
                {
                  result = BitSetGetEquals(*v5, *v12);
                  if (!(_DWORD)result)
                    result = BitSetSetEquals(*((_QWORD *)v4 + 8), *v12);
                  ++v12[11];
                  v10 = *v9;
                }
              }
            }
            v13 = v8 + 40 * v6;
            v16 = *(_DWORD *)(v13 + 4);
            v15 = (unsigned int *)(v13 + 4);
            v14 = v16;
            if (v16)
            {
              v17 = 0;
              do
              {
                v18 = *(unsigned int **)(*(_QWORD *)(v8 + 40 * v6 + 24) + 8 * v17);
                if (!v18[8])
                {
                  result = BitSetSetEquals(*v5, *v18);
                  ++v18[11];
                  v14 = *v15;
                }
                ++v17;
              }
              while (v17 < v14);
            }
          }
          ++v6;
        }
        while (v6 < *v4);
      }
      v1 = v19;
      v2 = v20 + 1;
    }
    while (v20 + 1 < (unint64_t)*(unsigned int *)(v19 + 32));
  }
  return result;
}

uint64_t BuildLiveOut(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  unsigned int *v9;
  int v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  _QWORD *v14;

  v1 = result;
  LODWORD(v2) = *(_DWORD *)(result + 32);
  do
  {
    if (!(_DWORD)v2)
      break;
    v3 = 0;
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(v1 + 8);
      v6 = v5 + 80 * v3;
      v7 = (uint64_t *)(v6 + 40);
      v8 = (_QWORD *)BitSetClone(*(_QWORD *)(v6 + 40));
      v10 = *(_DWORD *)(v6 + 8);
      v9 = (unsigned int *)(v6 + 8);
      if (v10)
      {
        v11 = 0;
        v12 = (_QWORD *)(v5 + 80 * v3 + 32);
        do
        {
          v13 = *(uint64_t **)(*v12 + 8 * v11);
          v14 = (_QWORD *)BitSetClone(v13[5]);
          BitSetAndNotEquals((uint64_t)v14, v13[9]);
          BitSetOrEquals((uint64_t)v14, v13[8]);
          BitSetOrEquals(*v7, (uint64_t)v14);
          BitSetFree(v14);
          ++v11;
        }
        while (v11 < *v9);
      }
      v4 |= BitSetEqualsTest((uint64_t)v8, *v7) == 0;
      result = BitSetFree(v8);
      ++v3;
      v2 = *(unsigned int *)(v1 + 32);
    }
    while (v3 < v2);
  }
  while (v4);
  return result;
}

uint64_t BuildInterferenceSets(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unsigned int v6;
  _QWORD *v7;
  int v8;
  unsigned int *v9;
  uint64_t v10;
  _DWORD *v11;
  int v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  int i;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int *v22;
  unint64_t v23;
  unint64_t j;
  unsigned int *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unsigned int v29;

  if (*(_DWORD *)(result + 32))
  {
    v1 = result;
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(v1 + 8);
      v26 = v2;
      v4 = v3 + 80 * v2;
      v5 = (_QWORD *)BitSetClone(*(_QWORD *)(v4 + 40));
      v6 = *(_DWORD *)v4 - 1;
      if ((v6 & 0x80000000) == 0)
      {
        v7 = (_QWORD *)(v3 + 80 * v26 + 16);
        v27 = v7;
        do
        {
          v8 = v6;
          v9 = (unsigned int *)(*v7 + 40 * v6);
          if (!v9[3])
          {
            v28 = *v7;
            v29 = v6;
            v10 = *v7 + 40 * v6;
            v12 = *(_DWORD *)(v10 + 4);
            v11 = (_DWORD *)(v10 + 4);
            if (v12)
            {
              v13 = 0;
              v14 = (_QWORD *)(v28 + 40 * v6 + 24);
              do
              {
                v15 = *(_QWORD *)(*v14 + 8 * v13);
                if (!*(_DWORD *)(v15 + 32))
                {
                  for (i = BitSetFirstSetBit((uint64_t)v5); i != -1; i = BitSetNextSetBit((uint64_t)v5, v19))
                  {
                    v18 = *(_QWORD *)(v1 + 16);
                    v19 = i;
                    if (!*(_DWORD *)(v18 + 56 * i + 32))
                    {
                      v20 = v18 + 56 * i;
                      BitSetSetEquals(*(_QWORD *)(v15 + 8), *(_DWORD *)v20);
                      BitSetSetEquals(*(_QWORD *)(v20 + 8), *(_DWORD *)v15);
                    }
                  }
                }
                ++v13;
                v16 = *v11;
              }
              while (v13 < v16);
              v7 = v27;
              if (*v11)
              {
                v21 = 0;
                do
                {
                  v22 = *(unsigned int **)(*v14 + 8 * v21);
                  if (!v22[8])
                  {
                    BitSetClearEquals((uint64_t)v5, *v22);
                    v16 = *v11;
                  }
                  ++v21;
                }
                while (v21 < v16);
              }
            }
            v23 = *v9;
            v8 = v29;
            if ((_DWORD)v23)
            {
              for (j = 0; j < v23; ++j)
              {
                v25 = *(unsigned int **)(*(_QWORD *)(v28 + 40 * v29 + 16) + 8 * j);
                if (!v25[8])
                {
                  BitSetSetEquals((uint64_t)v5, *v25);
                  v23 = *v9;
                }
              }
            }
          }
          v6 = v8 - 1;
        }
        while (v8 > 0);
      }
      result = BitSetFree(v5);
      v2 = v26 + 1;
    }
    while (v26 + 1 < (unint64_t)*(unsigned int *)(v1 + 32));
  }
  return result;
}

void RegistersMerge(uint64_t a1)
{
  uint64_t *v2;
  void *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t i;
  unint64_t v8;
  unsigned int v9;
  int8x16_t v10;
  int64x2_t v11;
  const double *v12;
  int64x2_t v13;
  int64x2_t v14;
  uint64_t v15;
  unsigned int **v16;
  uint64_t *v17;
  char *v18;
  int64x2_t v19;
  int64x2_t *v20;
  uint64_t j;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t *v28;
  int64x2_t v29;
  int64x2_t v30;

  v2 = HashTableNew((*(_DWORD *)(a1 + 36) >> 5) + 1, 0, 0);
  v3 = malloc_type_malloc(0x20uLL, 0x7081ABB9uLL);
  if (!v3 || (v4 = (char *)malloc_type_realloc(v3, 0x20uLL, 0x2BDC8648uLL)) == 0)
LABEL_24:
    abort();
  v5 = v4;
  v6 = 0;
  for (i = 0; i != 32; i += 8)
  {
    *(_QWORD *)&v4[i] = *(_QWORD *)(a1 + 16) + v6;
    v6 += 56;
  }
  v28 = v2;
  if (*(_DWORD *)(a1 + 36) >= 5u)
  {
    v8 = 4;
    v9 = 1;
    do
    {
      v10 = (int8x16_t)vdupq_n_s64(v8);
      v11 = (int64x2_t)vorrq_s8(v10, (int8x16_t)xmmword_22A97FDD0);
      v11.i64[0] = 56 * v8;
      v11.i64[1] *= 56;
      v12 = (const double *)(a1 + 16);
      v13 = (int64x2_t)vld1q_dup_f64(v12);
      v14 = (int64x2_t)vorrq_s8(v10, (int8x16_t)xmmword_22A98A010);
      v14.i64[0] *= 56;
      v14.i64[1] *= 56;
      v29 = vaddq_s64(v13, v11);
      v30 = vaddq_s64(v13, v14);
      if (RegisterVectorIsFixed(&v29) || !v9)
      {
LABEL_12:
        v18 = (char *)malloc_type_realloc(v5, 32 * (v9 + 1), 0x2BDC8648uLL);
        if (!v18)
          goto LABEL_24;
        v5 = v18;
        v19 = v30;
        v20 = (int64x2_t *)&v18[32 * v9];
        *v20 = v29;
        v20[1] = v19;
        ++v9;
      }
      else
      {
        v15 = 0;
        v16 = (unsigned int **)v5;
        while (1)
        {
          v17 = (uint64_t *)&v5[32 * v15];
          if (RegisterVectorCanMerge(v17, (unsigned int **)&v29))
            break;
          ++v15;
          v16 += 4;
          if (v15 == v9)
            goto LABEL_12;
        }
        for (j = 0; j != 4; ++j)
        {
          v22 = v29.i64[j];
          BitSetOrEquals(*((_QWORD *)*v16 + 1), *(_QWORD *)(v22 + 8));
          v23 = *v16;
          v23[11] = (*v16)[11] + *(_DWORD *)(v22 + 44);
          *(_DWORD *)(v22 + 32) = 1;
          RegistersReInterfere(a1, v22, v23);
          v24 = (uint64_t)*v16++;
          HashTableAdd(v28, v22, v24);
        }
        if (*(_DWORD *)(*v17 + 28) == 1 && *(_DWORD *)(v29.i64[0] + 28) == 1)
        {
          v25 = *(_QWORD *)(*v17 + 48);
          v26 = *(_QWORD *)(v25 + 24);
          v27 = *(_DWORD *)(*(_QWORD *)(v29.i64[0] + 48) + 24) >> 6;
          if (v26 >> 6 > v27)
            v27 = v26 >> 6;
          *(_QWORD *)(v25 + 24) = v26 & 0xFFFFFFFFFFFFFF3FLL | (v27 << 6);
        }
      }
      v8 += 4;
    }
    while (v8 < *(unsigned int *)(a1 + 36));
  }
  free(v5);
  RegistersReplace((_DWORD *)a1, v28);
  HashTableFree(v28);
}

BOOL RegisterVectorIsFixed(_QWORD *a1)
{
  uint64_t v1;
  _DWORD *v2;
  _DWORD *v3;
  _DWORD *v4;

  v1 = *a1;
  if (*(_DWORD *)(*a1 + 36))
    return 1;
  if (*(_DWORD *)(v1 + 40))
    return 1;
  if (*(_DWORD *)(v1 + 20) == 4)
    return 1;
  v2 = (_DWORD *)a1[1];
  if (v2[9])
    return 1;
  if (v2[10])
    return 1;
  if (v2[5] == 4)
    return 1;
  v3 = (_DWORD *)a1[2];
  if (v3[9])
    return 1;
  if (v3[10])
    return 1;
  if (v3[5] == 4)
    return 1;
  v4 = (_DWORD *)a1[3];
  return v4[9] || v4[10] || v4[5] == 4;
}

BOOL RegisterVectorCanMerge(uint64_t *a1, unsigned int **a2)
{
  return RegisterCanMerge(*a1, *a2)
      && RegisterCanMerge(a1[1], a2[1])
      && RegisterCanMerge(a1[2], a2[2])
      && RegisterCanMerge(a1[3], a2[3]);
}

uint64_t RegistersReInterfere(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t result;
  uint64_t v7;
  int v8;
  uint64_t v9;

  for (result = BitSetFirstSetBit(*(_QWORD *)(a2 + 8));
        (_DWORD)result != -1;
        result = BitSetNextSetBit(*(_QWORD *)(a2 + 8), v8))
  {
    v7 = *(_QWORD *)(a1 + 16);
    v8 = result;
    if (!*(_DWORD *)(v7 + 56 * (int)result + 32))
    {
      v9 = v7 + 56 * (int)result;
      BitSetClearEquals(*(_QWORD *)(v9 + 8), *(_DWORD *)a2);
      BitSetSetEquals(*(_QWORD *)(v9 + 8), *a3);
    }
  }
  return result;
}

_DWORD *RegistersReplace(_DWORD *result, uint64_t *a2)
{
  _QWORD *v3;
  _DWORD *v4;
  unsigned int *v5;
  _DWORD *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  _DWORD *v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _DWORD *v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t i;
  uint64_t v25;
  _DWORD *v26;
  unint64_t v27;
  _QWORD *v28;
  unsigned int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  unsigned int *v34;
  _DWORD *v35;
  unsigned int *v36;
  _DWORD *v37;
  unsigned int *v38;
  _DWORD *v39;
  _DWORD *v40;

  v40 = result;
  v3 = **(_QWORD ***)(*(_QWORD *)result + 104);
  if (v3)
  {
    v4 = result + 15;
    v38 = result + 20;
    v39 = result + 11;
    v5 = result + 16;
    v36 = result + 19;
    v37 = result + 14;
    v34 = result + 17;
    v35 = result + 12;
    v6 = result + 13;
    v7 = result + 18;
    do
    {
      v8 = v3[3] & 7;
      if (v8)
      {
        v9 = 0;
        v10 = v3 + 5;
        do
        {
          if (v9 < ((_DWORD)v3[3] & 7) + ((__int16)*((_DWORD *)v3 + 6) >> 15))
          {
            v11 = v10[v9];
            v12 = v6;
            v13 = v7;
            switch((v11 >> 6) & 7)
            {
              case 0u:
                goto LABEL_11;
              case 1u:
                v13 = v34;
                v12 = v35;
                goto LABEL_11;
              case 2u:
                v13 = v36;
                v12 = v37;
                goto LABEL_11;
              case 3u:
              case 5u:
                v12 = v39;
                v13 = v5;
                goto LABEL_11;
              case 4u:
                v12 = v4;
                v13 = v38;
LABEL_11:
                v14 = *v12 + ((v11 >> 46) & 0x3FFFC);
                if (v14 < *v13)
                {
                  v15 = *((_QWORD *)v40 + 2);
                  if (v15)
                  {
                    result = (_DWORD *)HashTableGet(a2, v15 + 56 * v14);
                    if (result)
                    {
                      v16 = v10[v9] & 0xFFFFFFFFFFFFFE3FLL | ((unint64_t)(result[7] & 7) << 6);
                      v10[v9] = v16;
                      v10[v9] = v16 & 0xFFFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)result[1] << 48);
                    }
                  }
                }
                break;
              default:
                break;
            }
          }
          ++v9;
        }
        while (v8 != v9);
      }
      v17 = v3[4];
      v18 = v6;
      v19 = v7;
      switch((v17 >> 12) & 7)
      {
        case 0u:
          goto LABEL_21;
        case 1u:
          v19 = v34;
          v18 = v35;
          goto LABEL_21;
        case 2u:
          v19 = v36;
          v18 = v37;
          goto LABEL_21;
        case 3u:
        case 5u:
          v18 = v39;
          v19 = v5;
          goto LABEL_21;
        case 4u:
          v18 = v4;
          v19 = v38;
LABEL_21:
          v20 = *v18 + ((v17 >> 46) & 0x3FFFC);
          if (v20 < *v19)
          {
            v21 = *((_QWORD *)v40 + 2);
            if (v21)
            {
              result = (_DWORD *)HashTableGet(a2, v21 + 56 * v20);
              if (result)
              {
                v22 = v3[4] & 0xFFFFFFFFFFFF8FFFLL | ((unint64_t)(result[7] & 7) << 12);
                v3[4] = v22;
                v3[4] = v22 & 0xFFFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)result[1] << 48);
              }
            }
          }
          break;
        default:
          break;
      }
      v3 = (_QWORD *)v3[1];
    }
    while (v3);
  }
  v23 = v40[8];
  if ((_DWORD)v23)
  {
    for (i = 0; i < v23; ++i)
    {
      v25 = *((_QWORD *)v40 + 1);
      v26 = (_DWORD *)(v25 + 80 * i);
      if (*v26)
      {
        v27 = 0;
        v28 = (_QWORD *)(v25 + 80 * i + 16);
        do
        {
          if (!*(_DWORD *)(*v28 + 40 * v27 + 12))
          {
            v29 = (unsigned int *)(*v28 + 40 * v27);
            v30 = *v29;
            v31 = v29[1];
            v32 = (uint64_t *)*((_QWORD *)v29 + 3);
            if ((_DWORD)v30)
            {
              v33 = (uint64_t *)*((_QWORD *)v29 + 2);
              do
              {
                result = (_DWORD *)HashTableGet(a2, *v33);
                if (result)
                  *v33 = (uint64_t)result;
                ++v33;
                --v30;
              }
              while (v30);
            }
            if ((_DWORD)v31)
            {
              do
              {
                result = (_DWORD *)HashTableGet(a2, *v32);
                if (result)
                  *v32 = (uint64_t)result;
                ++v32;
                --v31;
              }
              while (v31);
            }
          }
          ++v27;
        }
        while (v27 < *v26);
        v23 = v40[8];
      }
    }
  }
  return result;
}

uint64_t DeadCodeEliminationSimple(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int *v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  unsigned int *v13;
  BOOL v14;
  BOOL v15;
  unint64_t v16;
  unsigned int *v17;
  unint64_t i;
  unsigned int *v19;
  unint64_t v20;
  unint64_t j;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;

  if (*(_DWORD *)(result + 32))
  {
    v1 = 0;
    v24 = result;
    do
    {
      v2 = *(_QWORD *)(result + 8);
      v23 = v1;
      v3 = v2 + 80 * v1;
      v4 = (_QWORD *)BitSetClone(*(_QWORD *)(v3 + 40));
      v5 = *(_DWORD *)v3 - 1;
      if (v5 >= 0)
      {
        v6 = (uint64_t *)(v2 + 80 * v23 + 16);
        do
        {
          v7 = *v6;
          v8 = v5;
          v9 = (unsigned int *)(*v6 + 40 * v5);
          if (!v9[3])
          {
            v10 = v7 + 40 * v5;
            v11 = *(unsigned int *)(v10 + 4);
            v12 = *(_DWORD *)(v10 + 8);
            v13 = (unsigned int *)(v10 + 4);
            v14 = v12 == 0;
            if ((_DWORD)v11)
              v15 = v12 == 0;
            else
              v15 = 0;
            if (v15)
            {
              v16 = 0;
              do
              {
                v17 = *(unsigned int **)(*(_QWORD *)(v7 + 40 * v8 + 24) + 8 * v16);
                if (v17[8])
                {
                  v14 = 1;
                }
                else
                {
                  v14 = BitSetGetEquals((uint64_t)v4, *v17) == 0;
                  v11 = *v13;
                }
                ++v16;
              }
              while (v16 < v11 && v14);
            }
            if (v14)
            {
              PPStreamRemoveOperation(*(_QWORD *)v24, *(_QWORD **)(v7 + 40 * v8 + 32));
              v9[3] = 1;
            }
            else
            {
              if (v11)
              {
                for (i = 0; i < v11; ++i)
                {
                  v19 = *(unsigned int **)(*(_QWORD *)(v7 + 40 * v8 + 24) + 8 * i);
                  if (!v19[8])
                  {
                    BitSetClearEquals((uint64_t)v4, *v19);
                    v11 = *v13;
                  }
                }
              }
              v20 = *v9;
              if ((_DWORD)v20)
              {
                for (j = 0; j < v20; ++j)
                {
                  v22 = *(unsigned int **)(*(_QWORD *)(v7 + 40 * v8 + 16) + 8 * j);
                  if (!v22[8])
                  {
                    BitSetSetEquals((uint64_t)v4, *v22);
                    v20 = *v9;
                  }
                }
              }
            }
          }
          v5 = v8 - 1;
        }
        while ((int)v8 > 0);
      }
      BitSetFree(v4);
      result = v24;
      v1 = v23 + 1;
    }
    while (v23 + 1 < (unint64_t)*(unsigned int *)(v24 + 32));
  }
  return result;
}

uint64_t BackCopyPropagationSimple(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int i;
  __int128 v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unint64_t v28;
  unsigned int *v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  unsigned int *v33;
  int32x2_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  __int32 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  unsigned int v50;
  BOOL v53;
  char v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v58;
  unint64_t v59;
  int v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  __int16 v64;
  _BOOL4 v65;
  unsigned int v66;
  unint64_t v67;
  _BOOL4 v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  BOOL v73;
  int v74;
  unint64_t v76;
  int v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  BOOL v81;
  int8x16_t v83;
  int8x16_t v84;
  BOOL v85;
  uint64_t v86;
  BOOL v87;
  uint64_t v88;
  uint64_t v89;
  BOOL v90;
  uint64_t v91;
  BOOL v92;
  uint64_t v93;
  BOOL v94;
  char v95;
  unint64_t v96;
  unint64_t v97;
  BOOL v98;
  uint32x4_t v100;
  int8x16_t v101;
  int32x4_t v102;
  int8x16_t v103;
  unint64_t v104;
  int8x16_t v105;
  unint64_t v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  int8x16_t v112;
  uint64_t v113;
  int v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unsigned int v121;
  unint64_t v122;
  uint64_t v123;
  unsigned int v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  char v129;
  BOOL v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  int *v134;
  _QWORD *v135;
  uint64_t v136;
  __int32 v137;
  __int32 v138;
  __int32 v139;
  _QWORD **v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t *v143;
  _DWORD *v144;
  __int128 v145;
  __int32 v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD v151[2];
  int8x16_t v152;
  int8x16_t v153;
  int8x16_t v154;
  int8x16_t v155;
  __int128 v156;
  __int128 v157;
  int8x16_t v158;
  int8x16_t v159;
  uint64_t v160;

  v160 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(result + 32))
  {
    v1 = 0;
    v142 = result;
    do
    {
      v2 = *(_QWORD *)(result + 8);
      v141 = v1;
      v3 = v2 + 80 * v1;
      v4 = (_QWORD *)BitSetClone(*(_QWORD *)(v3 + 40));
      v5 = *(_DWORD *)v3 - 1;
      if ((v5 & 0x80000000) == 0)
      {
        v143 = (uint64_t *)(v2 + 80 * v141 + 16);
        do
        {
          v6 = *v143;
          v7 = v5;
          v8 = (unsigned int *)(*v143 + 40 * v5);
          v144 = v8 + 3;
          if (!v8[3])
          {
            v9 = v6 + 40 * v5;
            v10 = *(_QWORD *)(*(_QWORD *)(v9 + 32) + 24) & 0x3FC0;
            v140 = (_QWORD **)(v9 + 32);
            if (v10)
            {
              v11 = 0;
              *(_QWORD *)&v145 = 0;
            }
            else
            {
              v12 = v6 + 40 * v5;
              v15 = *(_DWORD *)(v12 + 4);
              v14 = (unsigned int *)(v12 + 4);
              v13 = v15;
              if (v15)
              {
                v16 = 0;
                v145 = 0u;
                do
                {
                  v17 = *(_QWORD *)(*(_QWORD *)(v6 + 40 * v7 + 24) + 8 * v16);
                  if (!*(_DWORD *)(v17 + 32))
                  {
                    BitSetGetEquals((uint64_t)v4, *(_DWORD *)v17);
                    *((_QWORD *)&v18 + 1) = *((_QWORD *)&v145 + 1);
                    *(int8x8_t *)&v18 = vorr_s8(*(int8x8_t *)(v17 + 36), *(int8x8_t *)&v145);
                    v145 = v18;
                    v13 = *v14;
                  }
                  ++v16;
                }
                while (v16 < v13);
              }
              else
              {
                v145 = 0u;
              }
              v19 = *v8;
              if ((_DWORD)v19)
              {
                v20 = 0;
                v11 = 0;
                do
                {
                  v21 = *(_QWORD *)(*(_QWORD *)(v6 + 40 * v7 + 16) + 8 * v20);
                  if (!*(_DWORD *)(v21 + 32))
                  {
                    for (i = 0; i != 4; ++i)
                      v11 |= BitSetGetEquals((uint64_t)v4, i + (*(_DWORD *)v21 & 0xFFFFFFFC));
                    *((_QWORD *)&v23 + 1) = *((_QWORD *)&v145 + 1);
                    *(int8x8_t *)&v23 = vorr_s8(*(int8x8_t *)(v21 + 36), *(int8x8_t *)&v145);
                    v145 = v23;
                    v19 = *v8;
                  }
                  ++v20;
                }
                while (v20 < v19);
              }
              else
              {
                v11 = 0;
              }
            }
            v24 = v6 + 40 * v7;
            v27 = *(_DWORD *)(v24 + 4);
            v26 = (unsigned int *)(v24 + 4);
            v25 = v27;
            if (v27)
            {
              v28 = 0;
              do
              {
                v29 = *(unsigned int **)(*(_QWORD *)(v6 + 40 * v7 + 24) + 8 * v28);
                if (!v29[8])
                {
                  BitSetClearEquals((uint64_t)v4, *v29);
                  v25 = *v26;
                }
                ++v28;
              }
              while (v28 < v25);
            }
            v30 = *v8;
            if ((_DWORD)v30)
            {
              v31 = 0;
              v32 = (_QWORD *)(v6 + 40 * v7 + 16);
              do
              {
                v33 = *(unsigned int **)(*v32 + 8 * v31);
                if (!v33[8])
                {
                  BitSetSetEquals((uint64_t)v4, *v33);
                  v30 = *v8;
                }
                ++v31;
              }
              while (v31 < v30);
            }
            if (!v10 && !v11)
            {
              v34 = vtst_s32(*(int32x2_t *)&v145, *(int32x2_t *)&v145);
              if ((v34.i8[0] & 1) == 0 && (v34.i8[4] & 1) == 0)
              {
                v136 = *(_QWORD *)(v142 + 8);
                v35 = v136 + 80 * v141;
                v37 = *(_QWORD *)(v35 + 16);
                v36 = (_QWORD *)(v35 + 16);
                v132 = v37 + 40 * v7;
                v38 = *(_QWORD *)(v132 + 32);
                v159 = 0uLL;
                v39 = *(_QWORD *)(v38 + 32);
                v40 = *(_QWORD *)(v38 + 40);
                if ((((v40 >> 6) ^ (v39 >> 12)) & 7) == 0
                  && HIWORD(v39) == HIWORD(v40)
                  && (((v40 >> 17) ^ (v39 >> 19)) & 3) == 0)
                {
                  __asm { BR              X11 }
                }
                v158.i32[0] = (v39 >> 18) & 1;
                v158.i32[1] = (v39 >> 17) & 1;
                v158.i32[2] = WORD1(v39) & 1;
                v158.i32[3] = (v39 >> 15) & 1;
                v138 = v158.i32[2];
                v139 = v158.i32[1];
                v146 = v158.i32[0];
                v137 = v158.i32[3];
                v41 = v158.i32[1] | v158.i32[2] | v158.i32[3] | v158.i32[0];
                if ((int)v7 >= 1 && v41)
                {
                  v42 = v40 | HIDWORD(v39);
                  v134 = (int *)(v136 + 80 * v141 + 12);
                  v135 = v36;
                  v41 = 1;
                  v43 = v7;
                  v133 = v7;
                  do
                  {
                    v44 = v43 - 1;
                    v45 = (unsigned int *)(*v36 + 40 * (v43 - 1));
                    if (v45[3])
                    {
                      v46 = 0;
                    }
                    else
                    {
                      v47 = *(_QWORD *)(*v36 + 40 * (v43 - 1) + 32);
                      v48 = *(_QWORD *)(v47 + 24);
                      v49 = (v48 >> 6);
                      v50 = v49 - 119;
                      v53 = v49 == 76 || v50 < 3 || v49 == 170;
                      v54 = v42 & (v49 == 72);
                      if (!v54)
                      {
                        v55 = v50 > 0x33;
                        v56 = (1 << v50) & 0x8000000000007;
                        if ((v55 || v56 == 0) && v49 != 76)
                        {
                          v96 = *(_QWORD *)(v38 + 40);
                          if ((v96 & 0x10) == 0)
                          {
                            v97 = *(_QWORD *)(v47 + 32);
                            v98 = (((v97 >> 12) ^ (v96 >> 6)) & 7) == 0
                               && HIWORD(v97) == HIWORD(v96);
                            if (v98
                              && (((v97 >> 19) ^ (v96 >> 17)) & 3) == 0)
                            {
                              v157 = 0uLL;
                              v100 = (uint32x4_t)vdupq_n_s32(v97);
                              v101.i64[0] = 0x300000003;
                              v101.i64[1] = 0x300000003;
                              v155 = vandq_s8((int8x16_t)vshlq_u32(v100, (uint32x4_t)xmmword_22A97DA00), v101);
                              v156 = xmmword_22A97EA20;
                              v102 = (int32x4_t)vshlq_u32(v100, (uint32x4_t)xmmword_22A98A020);
                              v103.i64[0] = 0x100000001;
                              v103.i64[1] = 0x100000001;
                              v153 = vandq_s8((int8x16_t)vshlq_u32((uint32x4_t)vdupq_n_s32(v96), (uint32x4_t)xmmword_22A97D9F0), v101);
                              v154 = vandq_s8((int8x16_t)v102, v103);
                              v104 = *(_QWORD *)(v38 + 32);
                              v152 = vandq_s8((int8x16_t)vshlq_u32((uint32x4_t)vdupq_n_s32(v104), (uint32x4_t)xmmword_22A97DA00), v101);
                              v105 = vandq_s8(vbicq_s8((int8x16_t)vtstq_s32(v102, (int32x4_t)v103), (int8x16_t)vceqzq_s32((int32x4_t)v159)), v103);
                              if (!*(_QWORD *)&vorr_s8(vorr_s8((int8x8_t)((v97 >> 19) & 3 | BYTE4(v97) & 1 | ((int)(v97 >> 12) >> 24) | ((v48 & 0x3FC0) == 7040)), *(int8x8_t *)v105.i8), (int8x8_t)*(_OWORD *)&vextq_s8(v105, v105, 8uLL)))
                              {
                                v106 = 0;
                                v107 = 1;
LABEL_137:
                                v108 = 3;
                                if (v106 > 3)
                                  v108 = v106;
                                v109 = v108 + 1;
                                v110 = v106;
                                do
                                {
                                  if (v158.i32[v110])
                                  {
                                    v111 = v153.u32[v152.u32[v110]];
                                    if (v154.i32[v111])
                                    {
                                      v107 = 0;
                                      v158.i32[v110] = 0;
                                      v139 = v158.i32[1];
                                      v146 = v158.i32[0];
                                      v137 = v158.i32[3];
                                      v138 = v158.i32[2];
                                      v41 = v158.i32[1] | v158.i32[0] | v158.i32[2] | v158.i32[3];
                                      *((_DWORD *)&v157 + v110) = 1;
                                      *((_DWORD *)&v156 + v110) = v155.i32[v111];
                                      v106 = v110 + 1;
                                      if (v110 <= 2)
                                        goto LABEL_137;
                                      goto LABEL_147;
                                    }
                                  }
                                  ++v110;
                                }
                                while (v109 != v110);
                                if ((v107 & 1) != 0)
                                  goto LABEL_62;
LABEL_147:
                                v113 = 0;
                                v114 = 0;
                                v115 = v97 & 0xFFFFFFFEFFFFFFFFLL | ((HIDWORD(v104) & 1) << 32);
                                *(_QWORD *)(v47 + 32) = v115;
                                v116 = v115 & 0xFFFFFFFDFFFFFFFFLL | (((*(_QWORD *)(v38 + 32) >> 33) & 1) << 33);
                                *(_QWORD *)(v47 + 32) = v116;
                                v117 = v116 & 0xFFFFFFF3FFFFFFFFLL | (((*(_QWORD *)(v38 + 32) >> 34) & 3) << 34);
                                *(_QWORD *)(v47 + 32) = v117;
                                v118 = v117 & 0xFFFFF00FFFFFFFFFLL | ((unint64_t)(*(_QWORD *)(v38 + 32) >> 36) << 36);
                                *(_QWORD *)(v47 + 32) = v118;
                                v119 = v118 & 0xFFFFFFFFFFFF8FFFLL | (((*(_QWORD *)(v38 + 32) >> 12) & 7) << 12);
                                *(_QWORD *)(v47 + 32) = v119;
                                v120 = v119 & 0xFFFFFFFFFFFFLL | ((unint64_t)*(unsigned __int16 *)(v38 + 38) << 48);
                                *(_QWORD *)(v47 + 32) = v120;
                                v121 = (v97 >> 21) & 3;
                                if (v121 <= ((*(_DWORD *)(v38 + 32) >> 21) & 3u))
                                  v121 = (*(_DWORD *)(v38 + 32) >> 21) & 3;
                                *(_QWORD *)(v47 + 32) = v120 & 0xFFFFFFFF80187FFFLL | ((unint64_t)(v157 & 1) << 18) | ((unint64_t)(BYTE4(v157) & 1) << 17) | (v121 << 21) | ((unint64_t)(BYTE8(v157) & 1) << 16) | ((unint64_t)(BYTE12(v157) & 1) << 15) | ((unint64_t)(v156 & 3) << 23) | ((unint64_t)(BYTE4(v156) & 3) << 25) | ((unint64_t)(BYTE8(v156) & 3) << 27) | ((unint64_t)(BYTE12(v156) & 3) << 29);
                                v122 = *(_QWORD *)(v38 + 32) & 0xFFFFFFFFFFF87FFFLL | ((v146 & 1) << 18) | (unint64_t)((v139 & 1) << 17) | ((v138 & 1) << 16) | ((v137 & 1) << 15);
                                *(_QWORD *)(v38 + 32) = v122;
                                v151[0] = 0;
                                v151[1] = 0;
                                do
                                {
                                  if (v158.i32[v113])
                                  {
                                    *((_DWORD *)v151 + v152.u32[v113]) = 1;
                                    ++v114;
                                  }
                                  ++v113;
                                }
                                while (v113 != 4);
                                v123 = 0;
                                v124 = 0;
                                *(_QWORD *)(v38 + 24) = *(_QWORD *)(v38 + 24) & 0xFFFFFFCFFFFFFFFFLL | ((unint64_t)(((_BYTE)v114 - 1) & 3) << 36);
                                v149 = 0;
                                v150 = 0;
                                do
                                {
                                  if (*(_DWORD *)((char *)v151 + v123 * 4))
                                    *((_DWORD *)&v149 + v124++) = v153.i32[v123];
                                  ++v123;
                                }
                                while (v123 != 4);
                                v129 = v54;
                                v130 = v53;
                                v131 = v42;
                                v125 = 0;
                                v126 = *(_QWORD *)(v38 + 40) & 0xFFFFFFFFFFE601FFLL;
                                v147 = 0;
                                v148 = 0;
                                do
                                {
                                  if (v158.i32[v125])
                                  {
                                    if (v124)
                                    {
                                      v127 = 0;
                                      while (v153.i32[v152.u32[v125]] != *((_DWORD *)&v149 + v127))
                                      {
                                        if (v124 == ++v127)
                                        {
                                          LODWORD(v127) = v124;
                                          break;
                                        }
                                      }
                                    }
                                    else
                                    {
                                      LODWORD(v127) = 0;
                                    }
                                    *((_DWORD *)&v147 + v125) = v127;
                                  }
                                  ++v125;
                                }
                                while (v125 != 4);
                                v128 = v126 | ((v124 << 19) + 1572864) & 0x180000 | ((unint64_t)(v149 & 3) << 9) | ((unint64_t)(BYTE4(v149) & 3) << 11) | ((unint64_t)(v150 & 3) << 13) | ((unint64_t)(BYTE4(v150) & 3) << 15);
                                *(_QWORD *)(v38 + 32) = v122 & 0xFFFFFFFF807FFFFFLL | ((v147 & 3) << 23) & 0x81FFFFFF | ((BYTE4(v147) & 3) << 25) & 0x87FFFFFF | ((v148 & 3) << 27) & 0x9FFFFFFF | ((unint64_t)(BYTE4(v148) & 3) << 29);
                                *(_QWORD *)(v38 + 40) = v128;
                                InstructionFree((uint64_t)v45);
                                InstructionInitSourcesTargets(v142, v45, *v134);
                                InstructionFree(v132);
                                InstructionInitSourcesTargets(v142, (unsigned int *)v132, *v134);
                                v48 = *(_QWORD *)(v47 + 24);
                                v36 = v135;
                                v42 = v131;
                                v54 = v129;
                                v53 = v130;
                              }
                            }
                          }
                        }
                      }
LABEL_62:
                      v58 = v48 & 7;
                      if ((v48 & 7) != 0)
                      {
                        v59 = 0;
                        v60 = 0;
                        do
                        {
                          if (v59 < (v58 + ((__int16)v48 >> 15)))
                          {
                            v61 = *(_QWORD *)(v47 + 40 + 8 * v59);
                            v63 = *(_QWORD *)(v38 + 32);
                            v62 = *(_QWORD *)(v38 + 40);
                            v64 = v62 ^ v61;
                            v65 = HIWORD(v61) == HIWORD(v62)
                               && ((v62 ^ v61) & 0x60000) == 0;
                            if ((v64 & 0x1C0) != 0)
                              v65 = 0;
                            v66 = (v63 >> 12) ^ (v61 >> 6);
                            v67 = HIWORD(v63);
                            v68 = (((v63 >> 19) ^ (v61 >> 17)) & 3) == 0;
                            if (HIWORD(v61) != (_DWORD)v67)
                              v68 = 0;
                            if ((v66 & 7) != 0)
                              v68 = 0;
                            if (v65 || v68)
                              __asm { BR              X15 }
                          }
                          ++v59;
                        }
                        while (v58 != v59);
                      }
                      else
                      {
                        v60 = 0;
                      }
                      v69 = v48 & 0x3FC0;
                      v70 = *(_QWORD *)(v47 + 32);
                      v71 = HIWORD(v70);
                      if (v69 == 7040)
                      {
                        v72 = *(_QWORD *)(v38 + 40);
                        v73 = (((v72 >> 6) ^ (v70 >> 12)) & 7) == 0
                           && (_DWORD)v71 == HIWORD(v72);
                        v74 = ((v72 >> 17) ^ (v70 >> 19)) & 3;
                        if (v73 && v74 == 0)
                        {
                          v112.i64[0] = 0x100000001;
                          v112.i64[1] = 0x100000001;
                          v159 = vorrq_s8(v159, vandq_s8((int8x16_t)vshlq_u32((uint32x4_t)vdupq_n_s32(v70), (uint32x4_t)xmmword_22A98A020), v112));
                          v60 = 1;
                        }
                      }
                      v76 = *(_QWORD *)(v38 + 32);
                      v77 = v76 ^ v70;
                      v78 = (v76 ^ v70) & 0x7000;
                      v79 = HIWORD(v76);
                      v80 = *(_QWORD *)&v77 & 0x180000;
                      if (v78)
                        v81 = 0;
                      else
                        v81 = (_DWORD)v71 == (_DWORD)v79;
                      if (v81 && v80 == 0)
                      {
                        if (v146)
                          v85 = v159.i32[0] == 0;
                        else
                          v85 = 0;
                        v86 = -491521;
                        if (!v85)
                          v86 = -229377;
                        if (v139)
                          v87 = v159.i32[1] == 0;
                        else
                          v87 = 0;
                        v88 = 0x20000;
                        if (v87)
                          v88 = 0;
                        v89 = v88 | v86;
                        if (v138)
                          v90 = v159.i32[2] == 0;
                        else
                          v90 = 0;
                        v91 = 0x10000;
                        if (v90)
                          v91 = 0;
                        if (v137)
                          v92 = v159.i32[3] == 0;
                        else
                          v92 = 0;
                        v93 = 0x8000;
                        if (v92)
                          v93 = 0;
                        *(_QWORD *)(v47 + 32) = (v89 | v91 | v93) & v70;
                        v7 = v42;
                        v94 = v53;
                        v95 = v54;
                        InstructionFree((uint64_t)v45);
                        InstructionInitSourcesTargets(v142, v45, *v134);
                        v54 = v95;
                        v53 = v94;
                        v44 = v43 - 1;
                        v42 = v7;
                        LODWORD(v7) = v133;
                        v36 = v135;
                      }
                      v46 = v54 | v53;
                      if (v60)
                      {
                        v83.i64[0] = 0x100000001;
                        v83.i64[1] = 0x100000001;
                        v84 = vandq_s8((int8x16_t)vceqzq_s32((int32x4_t)v159), vandq_s8(v158, v83));
                        v46 |= vorr_s8(*(int8x8_t *)v84.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v84, v84, 8uLL)) == 0;
                      }
                    }
                    if (v43 < 2)
                      break;
                    if (!v41)
                      break;
                    v43 = v44;
                  }
                  while ((v46 & 1) == 0);
                }
                if (!v41)
                {
                  PPStreamRemoveOperation(*(_QWORD *)v142, *v140);
                  *v144 = 1;
                }
              }
            }
          }
          v5 = v7 - 1;
        }
        while ((int)v7 > 0);
      }
      BitSetFree(v4);
      result = v142;
      v1 = v141 + 1;
    }
    while (v141 + 1 < (unint64_t)*(unsigned int *)(v142 + 32));
  }
  return result;
}

uint64_t GetRegister(uint64_t a1, int a2, int a3, int a4)
{
  _DWORD *v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t result;

  switch(a2)
  {
    case 0:
      v4 = (_DWORD *)(a1 + 52);
      v5 = (unsigned int *)(a1 + 72);
      goto LABEL_7;
    case 1:
      v4 = (_DWORD *)(a1 + 48);
      v5 = (unsigned int *)(a1 + 68);
      goto LABEL_7;
    case 2:
      v4 = (_DWORD *)(a1 + 56);
      v5 = (unsigned int *)(a1 + 76);
      goto LABEL_7;
    case 3:
    case 5:
      v4 = (_DWORD *)(a1 + 44);
      v5 = (unsigned int *)(a1 + 64);
      goto LABEL_7;
    case 4:
      v4 = (_DWORD *)(a1 + 60);
      v5 = (unsigned int *)(a1 + 80);
LABEL_7:
      v6 = a4 + 4 * a3 + *v4;
      if (v6 >= *v5)
        goto LABEL_9;
      result = *(_QWORD *)(a1 + 16) + 56 * v6;
      break;
    default:
LABEL_9:
      result = 0;
      break;
  }
  return result;
}

void RegistersCleanup(unsigned int *a1)
{
  unint64_t v2;
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  unint64_t i;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t **v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t **v28;
  uint64_t *v29;
  unsigned int v30;
  unint64_t v31;
  unsigned int v33;
  uint64_t v34;
  uint64_t **v35;
  uint64_t *v36;
  unint64_t v37;

  v2 = a1[9];
  if ((_DWORD)v2)
  {
    v3 = (_DWORD *)(*((_QWORD *)a1 + 2) + 32);
    v4 = a1[9];
    do
    {
      *v3 = 1;
      v3 += 14;
      --v4;
    }
    while (v4);
  }
  v5 = a1[8];
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = *((_QWORD *)a1 + 1);
    do
    {
      v8 = *(unsigned int *)(v7 + 80 * v6);
      if ((_DWORD)v8)
      {
        v9 = 0;
        v10 = *(_QWORD *)(v7 + 80 * v6 + 16);
        do
        {
          if (!*(_DWORD *)(v10 + 40 * v9 + 12))
          {
            v11 = *(unsigned int *)(v10 + 40 * v9);
            if ((_DWORD)v11)
            {
              v12 = *(uint64_t **)(v10 + 40 * v9 + 16);
              do
              {
                v13 = *v12++;
                *(_DWORD *)(v13 + 32) = 0;
                --v11;
              }
              while (v11);
            }
            v14 = *(unsigned int *)(v10 + 40 * v9 + 4);
            if ((_DWORD)v14)
            {
              v15 = *(uint64_t **)(v10 + 40 * v9 + 24);
              do
              {
                v16 = *v15++;
                *(_DWORD *)(v16 + 32) = 0;
                --v14;
              }
              while (v14);
            }
          }
          ++v9;
        }
        while (v9 != v8);
      }
      ++v6;
    }
    while (v6 != v5);
  }
  v17 = **(_QWORD **)(*(_QWORD *)a1 + 56);
  if (v17)
  {
    v18 = 0;
    do
    {
      if ((*(_QWORD *)(v17 + 24) & 0x1F00) != 0x600)
      {
        v19 = *(_DWORD *)(v17 + 32);
        if (v18 <= v19 + 1)
          v18 = v19 + 1;
      }
      v17 = *(_QWORD *)(v17 + 8);
    }
    while (v17);
    if (!v2)
      return;
  }
  else
  {
    v18 = 0;
    if (!v2)
      return;
  }
  for (i = 0; i < v2; i += 4)
  {
    v21 = *((_QWORD *)a1 + 2);
    if (*(_DWORD *)(v21 + 56 * i + 32))
    {
      if (*(_DWORD *)(v21 + 56 * (i | 1) + 32))
      {
        if (*(_DWORD *)(v21 + 56 * (i | 2) + 32))
        {
          if (*(_DWORD *)(v21 + 56 * (i | 3) + 32))
          {
            v22 = v21 + 56 * i;
            v25 = *(uint64_t **)(v22 + 48);
            v24 = (uint64_t **)(v22 + 48);
            v23 = v25;
            if (v25)
            {
              switch(*(_DWORD *)(v21 + 56 * i + 28))
              {
                case 1:
                  v27 = *(_QWORD *)a1;
                  v28 = *(uint64_t ***)(*(_QWORD *)a1 + 80);
                  v29 = *v28;
                  if (!*v28)
                    goto LABEL_53;
                  v30 = *(_DWORD *)(v21 + 56 * i + 4);
                  while (1)
                  {
                    v31 = v29[3];
                    if (v30 >= WORD1(v31) && v30 <= HIWORD(v31))
                      break;
                    v29 = (uint64_t *)v29[1];
                    if (!v29)
                      goto LABEL_53;
                  }
                  PPStreamChunkListRemoveChunk((uint64_t)v28, v29);
                  v27 = *(_QWORD *)a1;
                  v23 = *v24;
LABEL_53:
                  v26 = *(_QWORD *)(v27 + 32);
                  goto LABEL_55;
                case 2:
                  v33 = *(_DWORD *)(v21 + 56 * i + 4);
                  if (v33 < v18)
                    goto LABEL_56;
                  v34 = *(_QWORD *)a1;
                  v35 = *(uint64_t ***)(*(_QWORD *)a1 + 72);
                  v36 = *v35;
                  if (!*v35)
                    goto LABEL_54;
                  break;
                case 3:
                case 5:
                  v26 = *(_QWORD *)(*(_QWORD *)a1 + 64);
                  goto LABEL_55;
                case 4:
                  v26 = *(_QWORD *)(*(_QWORD *)a1 + 40);
                  goto LABEL_55;
                default:
                  goto LABEL_56;
              }
              while (1)
              {
                v37 = v36[3];
                if (v33 >= WORD1(v37) && v33 <= HIWORD(v37))
                  break;
                v36 = (uint64_t *)v36[1];
                if (!v36)
                  goto LABEL_54;
              }
              PPStreamChunkListRemoveChunk((uint64_t)v35, v36);
              v34 = *(_QWORD *)a1;
              v23 = *v24;
LABEL_54:
              v26 = *(_QWORD *)(v34 + 56);
LABEL_55:
              PPStreamChunkListRemoveChunk(v26, v23);
LABEL_56:
              *v24 = 0;
              *(_QWORD *)(v21 + 56 * (i | 1) + 48) = 0;
              *(_QWORD *)(v21 + 56 * (i | 2) + 48) = 0;
              *(_QWORD *)(v21 + 56 * (i | 3) + 48) = 0;
              v2 = a1[9];
            }
          }
        }
      }
    }
  }
}

BOOL RegisterCanMerge(uint64_t a1, unsigned int *a2)
{
  int v2;
  uint64_t v3;

  v2 = *(_DWORD *)(a1 + 20);
  if (v2 != a2[5]
    || *(_DWORD *)(a1 + 24) != a2[6]
    || *(_DWORD *)(a1 + 16) != a2[4]
    || *(_DWORD *)(a1 + 28) != 1
    || *(_DWORD *)(a1 + 32)
    || a2[7] != 1
    || a2[8])
  {
    return 0;
  }
  if (!*(_DWORD *)(a1 + 36) && v2 != 4 && !*(_DWORD *)(a1 + 40))
    return BitSetGetEquals(*(_QWORD *)(a1 + 8), *a2) == 0;
  v3 = a2[9];
  if ((_DWORD)v3)
    return 0;
  if (v2 != 4 && !a2[10])
    return BitSetGetEquals(*(_QWORD *)(a1 + 8), *a2) == 0;
  return v3;
}

uint64_t RegisterAdd(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7)
{
  int v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;

  v14 = a4 + 4 * a5 + 4;
  if (*(_DWORD *)(a1 + 36) < v14)
  {
    v15 = (char *)malloc_type_realloc(*(void **)(a1 + 16), 56 * v14, 0x2BDC8648uLL);
    if (!v15)
      abort();
    *(_QWORD *)(a1 + 16) = v15;
    bzero(&v15[56 * *(unsigned int *)(a1 + 36)], 56 * (v14 - *(_DWORD *)(a1 + 36)));
    *(_DWORD *)(a1 + 36) = v14;
  }
  v16 = 0;
  v17 = *(_QWORD *)(a1 + 16);
  v18 = a4 + 4 * a5;
  do
  {
    v19 = v17 + 56 * (v18 + v16);
    *(_QWORD *)(v19 + 8) = 0;
    *(_DWORD *)(v19 + 16) = v16;
    *(_DWORD *)(v19 + 20) = a6;
    *(_DWORD *)(v19 + 24) = a7;
    *(_DWORD *)(v19 + 28) = a3;
    *(_DWORD *)v19 = v18 + v16;
    *(_DWORD *)(v19 + 4) = a5;
    *(_QWORD *)(v19 + 32) = 0;
    *(_DWORD *)(v19 + 40) = 0;
    *(_QWORD *)(v19 + 48) = a2;
    ++v16;
  }
  while (v16 != 4);
  return 0;
}

unsigned int *InstructionAdd(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  char *v7;
  unsigned int v8;
  char *v9;
  char *v10;
  int v11;
  BOOL v12;
  unsigned int v13;
  unsigned int *v14;

  v6 = *(_DWORD *)a2 + 1;
  *(_DWORD *)a2 = v6;
  v7 = (char *)malloc_type_realloc(*(void **)(a2 + 16), 40 * v6, 0x2BDC8648uLL);
  if (!v7)
    abort();
  *(_QWORD *)(a2 + 16) = v7;
  v8 = *(_DWORD *)a2 - 1;
  v9 = &v7[40 * v8];
  *((_DWORD *)v9 + 2) = 0;
  v10 = v9 + 8;
  *((_QWORD *)v10 + 3) = a3;
  v11 = (*(_DWORD *)(a3 + 24) >> 6);
  v12 = (v11 - 75) > 0x3D || ((1 << (v11 - 75)) & 0x300073838001FE17) == 0;
  if (!v12 || (v13 = v11 - 140, v13 <= 0x1E) && ((1 << v13) & 0x4000200F) != 0)
    *(_DWORD *)v10 = 1;
  v14 = (unsigned int *)&v7[40 * v8];
  v14[3] = 0;
  InstructionInitSourcesTargets(a1, v14, *(_DWORD *)(a2 + 12));
  return v14;
}

_DWORD *InstructionInitSourcesTargets(uint64_t a1, unsigned int *a2, int a3)
{
  uint64_t v5;
  int v6;
  BOOL v7;
  _BOOL4 v8;
  BOOL v9;
  _BOOL4 v10;
  int v11;
  void *v12;
  uint64_t v13;
  uint64_t i;
  const float *v15;
  uint32x4_t v16;
  int8x16_t v17;
  void *v18;
  unint64_t v19;
  _DWORD *result;
  int v21;
  unint64_t v22;
  unsigned int v23;
  _QWORD *v24;
  _QWORD *v25;
  unsigned int v26;
  int v27;
  _QWORD *v28;
  _QWORD *v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  _QWORD *v33;
  _QWORD *v34;
  unsigned int v35;
  unsigned int v36;
  _QWORD *v37;
  _QWORD *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  void *v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t j;
  uint64_t v47;
  int v48;
  BOOL v49;
  unsigned int v50;
  void *v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t k;
  uint64_t v55;
  unsigned int v56;
  BOOL v57;
  int v58;
  unsigned int v60;
  _BOOL4 v61;
  BOOL v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  int8x16_t v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  v5 = *((_QWORD *)a2 + 4);
  v6 = (*(_DWORD *)(v5 + 24) >> 6);
  v7 = 1;
  if (v6 == 77)
  {
    v7 = a3 != 0;
    v8 = 0;
  }
  else
  {
    v8 = v6 == 110;
  }
  v62 = v6 != 76;
  v9 = v6 != 76 && v7;
  v10 = v6 != 76 && v8;
  v61 = v10;
  v11 = a2[2] | ((*(_QWORD *)(v5 + 32) & 0x7000) == 12288);
  a2[2] = v11;
  a2[2] = v11 | ((*(_QWORD *)(v5 + 32) & 0x7000) == 20480);
  *a2 = 0;
  v12 = malloc_type_malloc(8uLL, 0x7081ABB9uLL);
  if (!v12)
    goto LABEL_72;
  *((_QWORD *)a2 + 2) = v12;
  v13 = *(_QWORD *)(v5 + 24) & 7;
  v66 = v5;
  if (v13)
  {
    for (i = 0; i != v13; ++i)
    {
      if (i < (*(_DWORD *)(v5 + 24) & 7) + ((__int16)*(_DWORD *)(v5 + 24) >> 15))
      {
        v68 = 0uLL;
        __asm { BR              X10 }
      }
    }
  }
  v15 = (const float *)(v5 + 32);
  v16 = (uint32x4_t)vld1q_dup_f32(v15);
  v17.i64[0] = 0x100000001;
  v17.i64[1] = 0x100000001;
  v68 = vandq_s8((int8x16_t)vshlq_u32(v16, (uint32x4_t)xmmword_22A98A020), v17);
  a2[1] = 0;
  v18 = malloc_type_malloc(8uLL, 0x7081ABB9uLL);
  if (!v18)
    goto LABEL_72;
  *((_QWORD *)a2 + 3) = v18;
  v19 = *(_QWORD *)(v5 + 32);
  v67 = 0;
  v63 = HIDWORD(v19) & 1;
  result = (_DWORD *)GetRegisterIndicies(*(_QWORD *)a1, (unsigned int *)&v67 + 1, (unsigned int *)&v67, (v19 >> 12) & 7, HIWORD(v19), BYTE4(v19) & 1, (v19 >> 19) & 3);
  v21 = HIDWORD(v67);
  v64 = v67;
  if (SHIDWORD(v67) <= (int)v67)
  {
    do
    {
      v22 = 0;
      v65 = v21 + 1;
      do
      {
        if (v68.i32[v22])
        {
          result = (_DWORD *)GetRegister(a1, (*(_DWORD *)(v66 + 32) >> 12) & 7, v21, v22);
          if (result)
          {
            v23 = a2[1] + 1;
            a2[1] = v23;
            v24 = malloc_type_realloc(*((void **)a2 + 3), 8 * v23, 0x2BDC8648uLL);
            if (!v24)
              goto LABEL_72;
            v25 = v24;
            *((_QWORD *)a2 + 3) = v24;
            v26 = a2[1];
            result = (_DWORD *)GetRegister(a1, (*(_DWORD *)(v66 + 32) >> 12) & 7, v21, v22);
            v25[v26 - 1] = result;
            v27 = result[10];
            result[9] |= *(_DWORD *)(v66 + 36) & 1;
            result[10] = (*(_DWORD *)(v66 + 32) >> 19) & 3 | v27;
            if (v22 >= 2 && result[5] == 4)
            {
              a2[1] = v26 + 1;
              v28 = malloc_type_realloc(*((void **)a2 + 3), 8 * (v26 + 1), 0x2BDC8648uLL);
              if (!v28)
                goto LABEL_72;
              v29 = v28;
              *((_QWORD *)a2 + 3) = v28;
              v30 = a2[1] - 1;
              result = (_DWORD *)GetRegister(a1, (*(_DWORD *)(v66 + 32) >> 12) & 7, v65, (int)v22 - 2);
              v29[v30] = result;
              v31 = result[10];
              result[9] |= *(_DWORD *)(v66 + 36) & 1;
              result[10] = (*(_DWORD *)(v66 + 32) >> 19) & 3 | v31;
            }
          }
          if (v63 | v61)
          {
            result = (_DWORD *)GetRegister(a1, (*(_DWORD *)(v66 + 32) >> 12) & 7, v21, v22);
            if (result)
            {
              v32 = *a2 + 1;
              *a2 = v32;
              v33 = malloc_type_realloc(*((void **)a2 + 2), 8 * v32, 0x2BDC8648uLL);
              if (!v33)
                goto LABEL_72;
              v34 = v33;
              *((_QWORD *)a2 + 2) = v33;
              v35 = *a2;
              v36 = *a2 - 1;
              result = (_DWORD *)GetRegister(a1, (*(_DWORD *)(v66 + 32) >> 12) & 7, v21, v22);
              v34[v36] = result;
              if (v22 >= 2 && result[5] == 4)
              {
                *a2 = v35 + 1;
                v37 = malloc_type_realloc(*((void **)a2 + 2), 8 * (v35 + 1), 0x2BDC8648uLL);
                if (!v37)
                  goto LABEL_72;
                v38 = v37;
                *((_QWORD *)a2 + 2) = v37;
                v39 = *a2 - 1;
                result = (_DWORD *)GetRegister(a1, (*(_DWORD *)(v66 + 32) >> 12) & 7, v65, (int)v22 - 2);
                v38[v39] = result;
              }
            }
          }
        }
        ++v22;
      }
      while (v22 != 4);
      v49 = v21++ == v64;
    }
    while (!v49);
  }
  if ((_DWORD)v63 && *(_DWORD *)(a1 + 60) < *(_DWORD *)(a1 + 80) && *(_QWORD *)(a1 + 16))
  {
    v40 = *a2 + 1;
    *a2 = v40;
    result = malloc_type_realloc(*((void **)a2 + 2), 8 * v40, 0x2BDC8648uLL);
    if (!result)
      goto LABEL_72;
    *((_QWORD *)a2 + 2) = result;
    v41 = *(_DWORD *)(a1 + 60);
    if (v41 >= *(_DWORD *)(a1 + 80))
      v42 = 0;
    else
      v42 = *(_QWORD *)(a1 + 16) + 56 * v41;
    *(_QWORD *)&result[2 * *a2 - 2] = v42;
  }
  if (!v9)
  {
    v43 = (void *)*((_QWORD *)a2 + 2);
    if (v43)
      free(v43);
    *a2 = 0;
    result = malloc_type_malloc(8uLL, 0x7081ABB9uLL);
    if (!result)
      goto LABEL_72;
    *((_QWORD *)a2 + 2) = result;
    v44 = *(unsigned int *)(a1 + 36);
    if ((_DWORD)v44)
    {
      v45 = 0;
      for (j = 0; j < v44; ++j)
      {
        v47 = *(_QWORD *)(a1 + 16) + v45;
        v48 = *(_DWORD *)(v47 + 28);
        v49 = v48 == 4 || v48 == 1;
        if (v49)
        {
          v50 = *a2 + 1;
          *a2 = v50;
          result = malloc_type_realloc(*((void **)a2 + 2), 8 * v50, 0x2BDC8648uLL);
          if (!result)
            goto LABEL_72;
          *((_QWORD *)a2 + 2) = result;
          *(_QWORD *)&result[2 * *a2 - 2] = v47;
          v44 = *(unsigned int *)(a1 + 36);
        }
        v45 += 56;
      }
    }
  }
  if (v62)
    return result;
  v51 = (void *)*((_QWORD *)a2 + 3);
  if (v51)
    free(v51);
  a2[1] = 0;
  result = malloc_type_malloc(8uLL, 0x7081ABB9uLL);
  if (!result)
LABEL_72:
    abort();
  *((_QWORD *)a2 + 3) = result;
  v52 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v52)
  {
    v53 = 0;
    for (k = 0; k < v52; ++k)
    {
      v55 = *(_QWORD *)(a1 + 16) + v53;
      v56 = *(_DWORD *)(v55 + 28);
      v57 = v56 > 5;
      v58 = (1 << v56) & 0x3A;
      if (!v57 && v58 != 0)
      {
        v60 = a2[1] + 1;
        a2[1] = v60;
        result = malloc_type_realloc(*((void **)a2 + 3), 8 * v60, 0x2BDC8648uLL);
        if (!result)
          goto LABEL_72;
        *((_QWORD *)a2 + 3) = result;
        *(_QWORD *)&result[2 * a2[1] - 2] = v55;
        v52 = *(unsigned int *)(a1 + 36);
      }
      v53 += 56;
    }
  }
  return result;
}

void InstructionFree(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 16);
  if (v2)
    free(v2);
  v3 = *(void **)(a1 + 24);
  if (v3)
    free(v3);
}

char *BlockAdd(uint64_t a1)
{
  unsigned int v2;
  char *v3;
  char *v4;
  unsigned int v5;
  char *v6;
  void *v7;
  char *v8;
  void *v9;
  char *v10;
  void *v11;
  char *v12;

  v2 = *(_DWORD *)(a1 + 32) + 1;
  *(_DWORD *)(a1 + 32) = v2;
  v3 = (char *)malloc_type_realloc(*(void **)(a1 + 8), 80 * v2, 0x2BDC8648uLL);
  if (!v3)
    goto LABEL_6;
  v4 = v3;
  *(_QWORD *)(a1 + 8) = v3;
  v5 = *(_DWORD *)(a1 + 32) - 1;
  v6 = &v3[80 * v5];
  *(_DWORD *)v6 = 0;
  v7 = malloc_type_malloc(0x28uLL, 0x7081ABB9uLL);
  if (!v7)
    goto LABEL_6;
  v8 = &v4[80 * v5];
  *((_QWORD *)v8 + 2) = v7;
  *((_DWORD *)v8 + 1) = 0;
  v9 = malloc_type_malloc(8uLL, 0x7081ABB9uLL);
  if (!v9
    || (v10 = &v4[80 * v5],
        *((_QWORD *)v10 + 3) = v9,
        *((_DWORD *)v10 + 2) = 0,
        (v11 = malloc_type_malloc(8uLL, 0x7081ABB9uLL)) == 0))
  {
LABEL_6:
    abort();
  }
  v12 = &v4[80 * v5];
  *((_QWORD *)v12 + 4) = v11;
  *(_OWORD *)(v12 + 40) = 0u;
  *(_OWORD *)(v12 + 56) = 0u;
  *((_QWORD *)v12 + 9) = 0;
  return v6;
}

_QWORD *BlockFree(unsigned int *a1)
{
  uint64_t v2;
  unint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *result;

  if (*a1)
  {
    v2 = 0;
    v3 = 0;
    do
    {
      InstructionFree(*((_QWORD *)a1 + 2) + v2);
      ++v3;
      v2 += 40;
    }
    while (v3 < *a1);
  }
  v4 = (void *)*((_QWORD *)a1 + 2);
  if (v4)
    free(v4);
  v5 = (void *)*((_QWORD *)a1 + 3);
  if (v5)
    free(v5);
  v6 = (void *)*((_QWORD *)a1 + 4);
  if (v6)
    free(v6);
  v7 = (_QWORD *)*((_QWORD *)a1 + 5);
  if (v7)
    BitSetFree(v7);
  v8 = (_QWORD *)*((_QWORD *)a1 + 6);
  if (v8)
    BitSetFree(v8);
  v9 = (_QWORD *)*((_QWORD *)a1 + 7);
  if (v9)
    BitSetFree(v9);
  v10 = (_QWORD *)*((_QWORD *)a1 + 8);
  if (v10)
    BitSetFree(v10);
  result = (_QWORD *)*((_QWORD *)a1 + 9);
  if (result)
    return (_QWORD *)BitSetFree(result);
  return result;
}

unint64_t RegistersInitialize(uint64_t a1)
{
  unint64_t result;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = *(unsigned int *)(a1 + 36);
  if ((_DWORD)result)
  {
    v3 = 0;
    v4 = 8;
    do
    {
      v5 = *(_QWORD *)(a1 + 16);
      v6 = BitSetNew(result);
      *(_QWORD *)(v5 + v4) = v6;
      BitSetSetEquals(v6, v3++);
      result = *(unsigned int *)(a1 + 36);
      v4 += 56;
    }
    while (v3 < result);
  }
  return result;
}

unint64_t Registerify(_DWORD *a1)
{
  int v2;
  _QWORD **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = a1[9];
  a1[11] = v2;
  v3 = *(_QWORD ***)a1;
  v4 = **(_QWORD **)(*(_QWORD *)a1 + 64);
  if (v4)
  {
    do
    {
      RegisterAdd((uint64_t)a1, v4, 3, a1[11], *(_DWORD *)(v4 + 32), (*(_DWORD *)(v4 + 24) >> 3) & 7, *(_DWORD *)(v4 + 24) & 7);
      v4 = *(_QWORD *)(v4 + 8);
    }
    while (v4);
    v2 = a1[9];
    v3 = *(_QWORD ***)a1;
  }
  a1[16] = v2;
  a1[12] = v2;
  v5 = *v3[4];
  if (v5)
  {
    do
    {
      RegisterAdd((uint64_t)a1, v5, 1, a1[12], *(_DWORD *)(v5 + 32), (*(_DWORD *)(v5 + 24) >> 3) & 7, *(_DWORD *)(v5 + 24) & 7);
      v5 = *(_QWORD *)(v5 + 8);
    }
    while (v5);
    v2 = a1[9];
    v3 = *(_QWORD ***)a1;
  }
  a1[17] = v2;
  a1[13] = v2;
  v6 = *v3[6];
  if (v6)
  {
    do
    {
      RegisterAdd((uint64_t)a1, v6, 0, a1[13], *(_DWORD *)(v6 + 32), (*(_DWORD *)(v6 + 24) >> 3) & 7, *(_DWORD *)(v6 + 24) & 7);
      v6 = *(_QWORD *)(v6 + 8);
    }
    while (v6);
    v2 = a1[9];
    v3 = *(_QWORD ***)a1;
  }
  a1[18] = v2;
  a1[14] = v2;
  v7 = *v3[7];
  if (v7)
  {
    do
    {
      RegisterAdd((uint64_t)a1, v7, 2, a1[14], *(_DWORD *)(v7 + 32), (*(_DWORD *)(v7 + 24) >> 3) & 7, *(_DWORD *)(v7 + 24) & 7);
      v7 = *(_QWORD *)(v7 + 8);
    }
    while (v7);
    v2 = a1[9];
    v3 = *(_QWORD ***)a1;
  }
  a1[19] = v2;
  a1[15] = v2;
  v8 = *v3[5];
  if (v8)
  {
    do
    {
      RegisterAdd((uint64_t)a1, v8, 4, a1[15], *(_DWORD *)(v8 + 24), 2, 0);
      v8 = *(_QWORD *)(v8 + 8);
    }
    while (v8);
    v2 = a1[9];
  }
  a1[20] = v2;
  return RegistersInitialize((uint64_t)a1);
}

void RegistersFree(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;

  v2 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v2)
  {
    v3 = 0;
    v4 = 8;
    do
    {
      v5 = *(_QWORD **)(*(_QWORD *)(a1 + 16) + v4);
      if (v5)
      {
        BitSetFree(v5);
        v2 = *(unsigned int *)(a1 + 36);
      }
      ++v3;
      v4 += 56;
    }
    while (v3 < v2);
  }
  v6 = *(void **)(a1 + 16);
  if (v6)
    free(v6);
}

void Blockify(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;
  unsigned int v7;
  _QWORD *v8;
  int v9;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  int *v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unsigned int v39;
  unint64_t v40;
  uint64_t v41;
  unsigned int v42;
  int v43;
  int *v44;
  int *v45;

  bzero(*(void **)(a1 + 24), 8 * *(unsigned int *)(a1 + 40));
  GetOrAddBlock(a1, 0);
  v2 = **(_QWORD **)(*(_QWORD *)a1 + 104);
  if (v2)
  {
    while (1)
    {
      v3 = *(_QWORD *)(v2 + 8);
      if (!v3)
        v3 = v2;
      LODWORD(v4) = *(_DWORD *)(v3 + 88);
      v5 = (*(_DWORD *)(v2 + 24) >> 6);
      v6 = v5 - 75;
      if ((v5 - 75) > 0x21)
        goto LABEL_11;
      if (((1 << v6) & 0x38001BE01) == 0)
        break;
LABEL_6:
      GetOrAddBlock(a1, v4);
      v4 = *(_QWORD *)(v2 + 24) >> 46;
LABEL_7:
      GetOrAddBlock(a1, v4);
LABEL_8:
      v2 = *(_QWORD *)(v2 + 8);
      if (!v2)
        goto LABEL_14;
    }
    if (((1 << v6) & 0x4004) != 0)
      goto LABEL_7;
LABEL_11:
    if ((v5 - 141) < 3)
      goto LABEL_7;
    if (v5 != 140)
      goto LABEL_8;
    goto LABEL_6;
  }
LABEL_14:
  bzero(*(void **)(a1 + 24), 8 * *(unsigned int *)(a1 + 40));
  v7 = *(_DWORD *)(a1 + 40);
  if (v7 && (v8 = *(_QWORD **)(a1 + 24), !*v8))
  {
    *v8 = *(_QWORD *)(a1 + 8);
    v9 = 1;
  }
  else
  {
    v9 = 0;
  }
  for (i = **(_QWORD **)(*(_QWORD *)a1 + 104); i; i = *(_QWORD *)(i + 8))
  {
    v11 = *(_QWORD *)(i + 8);
    if (!v11)
      v11 = i;
    v12 = *(int *)(v11 + 88);
    v13 = *(_QWORD *)(i + 24);
    v14 = (v13 >> 6);
    v15 = v14 - 75;
    if ((v14 - 75) <= 0x21)
    {
      if (((1 << v15) & 0x38001BE01) != 0)
        goto LABEL_23;
      if (((1 << v15) & 0x4004) != 0)
        goto LABEL_30;
    }
    if ((v14 - 141) < 3)
    {
LABEL_30:
      if (v7 > v12)
      {
        v18 = (_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v12);
LABEL_32:
        if (!*v18)
          *v18 = *(_QWORD *)(a1 + 8) + 80 * v9++;
      }
    }
    else if (v14 == 140)
    {
LABEL_23:
      if (v7 > v12)
      {
        v16 = *(_QWORD *)(a1 + 24);
        if (!*(_QWORD *)(v16 + 8 * v12))
        {
          *(_QWORD *)(v16 + 8 * v12) = *(_QWORD *)(a1 + 8) + 80 * v9++;
          v13 = *(_QWORD *)(i + 24);
        }
      }
      v17 = v13 >> 46;
      if (v7 <= v17)
        continue;
      v18 = (_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v17);
      goto LABEL_32;
    }
  }
  v19 = (int *)malloc_type_malloc(4uLL, 0x7081ABB9uLL);
  if (!v19)
LABEL_116:
    abort();
  v20 = v19;
  if (*(_DWORD *)(a1 + 40))
    v21 = **(_QWORD **)(a1 + 24);
  else
    v21 = 0;
  v22 = **(_QWORD **)(*(_QWORD *)a1 + 104);
  if (v22)
  {
    v23 = 0;
    v24 = 0;
    v25 = 0;
    while (1)
    {
      v26 = *(_DWORD *)(v22 + 88);
      v27 = *(_QWORD *)(v22 + 8);
      if (v27)
        v28 = *(_DWORD *)(v27 + 88);
      else
        v28 = *(_DWORD *)(v22 + 88);
      if ((*(_BYTE *)(v22 + 25) & 0x40) != 0)
        v24 = 1;
      if (*(_DWORD *)(a1 + 40) <= v26)
      {
        v30 = v21;
      }
      else
      {
        v29 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * (int)v26);
        if (v29)
          v30 = v29;
        else
          v30 = v21;
      }
      *(_DWORD *)(v30 + 12) = v24;
      InstructionAdd(a1, v30, v22);
      v31 = *(_QWORD *)(v22 + 24);
      v32 = (v31 >> 6);
      switch((v31 >> 6))
      {
        case 'K':
        case 'T':
        case 'X':
          goto LABEL_71;
        case 'L':
        case 'N':
        case 'O':
        case 'P':
        case 'Q':
        case 'R':
        case 'S':
          goto LABEL_78;
        case 'M':
          if (*(_DWORD *)(a1 + 40) <= v28)
            v21 = 0;
          else
            v21 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * (int)v28);
          goto LABEL_89;
        case 'U':
        case 'V':
        case 'W':
        case 'Z':
        case '[':
          goto LABEL_60;
        case 'Y':
          goto LABEL_68;
        default:
          v33 = (v32 - 107);
          if (v33 > 0x24)
            goto LABEL_70;
          if (((1 << (v32 - 107)) & 0x200000003) != 0)
          {
LABEL_60:
            v34 = *(_DWORD *)(a1 + 40);
            if (v34 <= v28)
              v21 = 0;
            else
              v21 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * (int)v28);
            v35 = v31 >> 46;
            if (v34 <= v35)
              v36 = 0;
            else
              v36 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v35);
            BlockAddSuccessor((_QWORD *)v30, v21);
            v37 = (_QWORD *)v30;
            v38 = v36;
          }
          else
          {
            if (((1 << (v32 - 107)) & 0xC00000000) != 0)
            {
              if (*(_DWORD *)(a1 + 40) <= v28)
                v21 = 0;
              else
                v21 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * (int)v28);
              BlockAddSuccessor((_QWORD *)v30, v21);
              v41 = v20[v25 - 1];
              if (*(_DWORD *)(a1 + 40) <= v41)
                v37 = 0;
              else
                v37 = *(_QWORD **)(*(_QWORD *)(a1 + 24) + 8 * v41);
              goto LABEL_87;
            }
            if (v33 == 36)
            {
LABEL_68:
              if (*(_DWORD *)(a1 + 40) <= v28)
                v21 = 0;
              else
                v21 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * (int)v28);
              goto LABEL_82;
            }
LABEL_70:
            if (v32 != 106)
            {
LABEL_78:
              if (*(_DWORD *)(a1 + 40) <= v28 || (v21 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * (int)v28)) == 0)
              {
                v21 = v30;
                goto LABEL_89;
              }
LABEL_82:
              v37 = (_QWORD *)v30;
LABEL_87:
              v38 = v21;
              goto LABEL_88;
            }
LABEL_71:
            v39 = *(_DWORD *)(a1 + 40);
            if (v39 <= v28)
              v21 = 0;
            else
              v21 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * (int)v28);
            v40 = v31 >> 46;
            if (v39 <= v40)
              v38 = 0;
            else
              v38 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v40);
            v37 = (_QWORD *)v30;
          }
LABEL_88:
          BlockAddSuccessor(v37, v38);
LABEL_89:
          v42 = (*(_DWORD *)(v22 + 24) >> 6);
          if (v42 <= 0x58)
          {
            if (v42 - 85 >= 3)
            {
              if (v23)
                v43 = v24;
              else
                v43 = 0;
              if (v42 == 77)
                v24 = v43;
              goto LABEL_112;
            }
            goto LABEL_111;
          }
          if ((*(_DWORD *)(v22 + 24) >> 6) <= 0x6Au)
          {
            if (v42 - 89 >= 3)
              goto LABEL_112;
            goto LABEL_108;
          }
          if ((*(_DWORD *)(v22 + 24) >> 6) <= 0x8Bu)
          {
            if (v42 == 107)
              goto LABEL_111;
            if (v42 != 108)
              goto LABEL_112;
            goto LABEL_108;
          }
          if (v42 == 140)
          {
            v45 = (int *)malloc_type_realloc(v20, 4 * (v25 + 1), 0x2BDC8648uLL);
            if (!v45)
              goto LABEL_116;
            v20 = v45;
            v45[v25++] = v28;
LABEL_111:
            ++v23;
            goto LABEL_112;
          }
          if (v42 == 143)
          {
            v44 = (int *)malloc_type_realloc(v20, 4 * --v25, 0x2BDC8648uLL);
            if (!v44)
              goto LABEL_116;
            v20 = v44;
LABEL_108:
            --v23;
          }
LABEL_112:
          v22 = *(_QWORD *)(v22 + 8);
          if (!v22)
            goto LABEL_115;
          break;
      }
    }
  }
LABEL_115:
  free(v20);
}

void GetOrAddBlock(uint64_t a1, int a2)
{
  int v4;
  char *v5;

  v4 = a2 + 1;
  if (*(_DWORD *)(a1 + 40) < (a2 + 1))
  {
    v5 = (char *)malloc_type_realloc(*(void **)(a1 + 24), 8 * v4, 0x2BDC8648uLL);
    if (!v5)
      abort();
    *(_QWORD *)(a1 + 24) = v5;
    bzero(&v5[8 * *(unsigned int *)(a1 + 40)], 8 * (v4 - *(_DWORD *)(a1 + 40)));
    *(_DWORD *)(a1 + 40) = v4;
  }
  if (!*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * a2))
    *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * a2) = BlockAdd(a1);
}

_QWORD *BlockAddSuccessor(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  unsigned int v4;
  _QWORD *v5;
  unsigned int v6;

  if (result && a2)
  {
    v3 = result;
    v4 = *(_DWORD *)(a2 + 4) + 1;
    *(_DWORD *)(a2 + 4) = v4;
    v5 = malloc_type_realloc(*(void **)(a2 + 24), 8 * v4, 0x2BDC8648uLL);
    if (!v5
      || (*(_QWORD *)(a2 + 24) = v5,
          v5[*(_DWORD *)(a2 + 4) - 1] = v3,
          v6 = *((_DWORD *)v3 + 2) + 1,
          *((_DWORD *)v3 + 2) = v6,
          (result = malloc_type_realloc((void *)v3[4], 8 * v6, 0x2BDC8648uLL)) == 0))
    {
      abort();
    }
    v3[4] = result;
    result[*((_DWORD *)v3 + 2) - 1] = a2;
  }
  return result;
}

void BlocksFree(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  void *v4;

  if (*(_DWORD *)(a1 + 32))
  {
    v2 = 0;
    v3 = 0;
    do
    {
      BlockFree((unsigned int *)(*(_QWORD *)(a1 + 8) + v2));
      ++v3;
      v2 += 80;
    }
    while (v3 < *(unsigned int *)(a1 + 32));
  }
  v4 = *(void **)(a1 + 8);
  if (v4)
    free(v4);
}

_DWORD *ProgramNew(uint64_t a1)
{
  _DWORD *v2;
  _DWORD *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = malloc_type_malloc(0x58uLL, 0x7081ABB9uLL);
  if (!v2)
    goto LABEL_6;
  v3 = v2;
  *(_QWORD *)v2 = a1;
  v2[8] = 0;
  v4 = malloc_type_malloc(0x50uLL, 0x7081ABB9uLL);
  if (!v4
    || (*((_QWORD *)v3 + 1) = v4, v3[9] = 0, (v5 = malloc_type_malloc(0x38uLL, 0x7081ABB9uLL)) == 0)
    || (*((_QWORD *)v3 + 2) = v5, v3[10] = 0, (v6 = malloc_type_malloc(8uLL, 0x7081ABB9uLL)) == 0))
  {
LABEL_6:
    abort();
  }
  *((_QWORD *)v3 + 3) = v6;
  *(_OWORD *)(v3 + 11) = 0u;
  *(_OWORD *)(v3 + 15) = 0u;
  *(_QWORD *)(v3 + 19) = 0;
  return v3;
}

void ProgramFree(_QWORD *a1)
{
  void *v2;

  v2 = (void *)a1[3];
  if (v2)
    free(v2);
  RegistersFree((uint64_t)a1);
  BlocksFree((uint64_t)a1);
  free(a1);
}

void FlattenIfs(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;
  _QWORD **v17;

  v1 = **(_QWORD ***)(a1 + 104);
  if (!v1)
    return;
  do
  {
    if ((v1[3] & 0x3FC0) != 0x1540)
    {
LABEL_32:
      v17 = (_QWORD **)(v1 + 1);
      goto LABEL_33;
    }
    v3 = 0;
    v4 = v1[3] >> 46;
    v5 = 1;
    v6 = v1;
    do
    {
      v7 = v6;
      if (v3 && *((_DWORD *)v6 + 22) == (_DWORD)v4)
      {
        v8 = v3[3];
        v9 = (v8 >> 6);
        if (v9 == 88)
        {
          v4 = v8 >> 46;
        }
        else if (v9 == 89)
        {
          break;
        }
      }
      v10 = v7[3];
      v11 = (v10 >> 6);
      v12 = v11 - 75;
      if ((v11 - 75) > 0x3D)
        goto LABEL_16;
      if (((1 << v12) & 0x3000738000000006) != 0)
        goto LABEL_12;
      if (((1 << v12) & 0x80000201) != 0)
      {
        if ((int)v4 <= (int)(v10 >> 46))
          v5 = 0;
      }
      else
      {
LABEL_16:
        if (v11 == 170)
LABEL_12:
          v5 = 0;
      }
      if ((v10 & 7) != 0)
      {
        v13 = 0;
        do
        {
          if (v13 < (v10 & 7) + ((__int16)v10 >> 15) && (v7[v13 + 5] & 0x60001) != 0)
            v5 = 0;
          ++v13;
        }
        while ((v7[3] & 7) != v13);
      }
      v14 = v7[4];
      if ((v14 & 0x100180000) != 0 && (v14 & 0x78000) != 0)
        v5 = 0;
      v6 = (_QWORD *)v7[1];
      v3 = v7;
    }
    while (v6);
    if (!v5)
      goto LABEL_32;
    v16 = *v1;
    FlattenIf(a1, (uint64_t)v1);
    if (v16)
      v17 = (_QWORD **)(v16 + 8);
    else
      v17 = *(_QWORD ***)(a1 + 104);
LABEL_33:
    v1 = *v17;
  }
  while (*v17);
}

void FlattenIf(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _OWORD v3[2];
  uint64_t v4;
  _OWORD v5[2];
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a2 + 40);
  v6 = 0;
  memset(v5, 0, sizeof(v5));
  v4 = 0;
  memset(v3, 0, sizeof(v3));
  v7 = v5;
  v8 = v3;
  __asm { BR              X10 }
}

void sub_22A95B0C4(unint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int32x4_t v28;
  _DWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  _DWORD *v34;
  __int128 v35;
  __int128 v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  int32x4_t v41;
  _DWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  __int128 v45;
  __int128 v46;
  _DWORD *v47;
  __int128 v48;
  __int128 v49;
  unint64_t v50;
  uint64_t v51;
  char v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  char v61;
  uint64_t *v62;
  uint64_t v63;
  char v64;
  char v65;
  uint64_t *v66;
  uint64_t v67;
  void **v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v78;
  _BYTE v79[40];
  __int128 v80;
  __int128 v81;
  uint64_t v82;

  *(_QWORD *)&v79[8] = v70 & 0xFFFFFFFFFFFF8FFFLL | 0x1000;
  *(_WORD *)&v79[14] = AddTempRegister(v7, a1 >> 19, a1 >> 38, v70 >> 21);
  *(_QWORD *)&v79[16] = *(_QWORD *)&v79[16] & v6 | *(_QWORD *)(v2 + 40) & v3 | v73;
  PPStreamInsertOperationBeforeChunk(v7, (uint64_t)v79, 0, v2);
  v9 = *(_DWORD **)(v4 + 8 * v1);
  v9[1] = (*(_DWORD *)&v79[8] >> 12) & 7;
  *v9 = *(unsigned __int16 *)&v79[14];
  v10 = (*(_QWORD *)v79 >> 38) & 7;
  v9[2] = (*(_DWORD *)v79 >> 19) & 7;
  v9[3] = v10;
  v9[4] = (*(_DWORD *)&v79[8] >> 21) & 3;
  if ((v5 & 1) != 0)
    JUMPOUT(0x22A95B070);
  v72 = HashTableNew((*(_DWORD *)(*(_QWORD *)(v7 + 32) + 16) >> 5) + 1, (unint64_t (*)(unint64_t))regHashFunction, (uint64_t (*)(int, int))regEqualsFunction);
  v11 = HashTableNew((*(_DWORD *)(*(_QWORD *)(v7 + 32) + 16) >> 5) + 1, (unint64_t (*)(unint64_t))regHashFunction, (uint64_t (*)(int, int))regEqualsFunction);
  if (v75)
  {
    v12 = HashTableNew((*(_DWORD *)(*(_QWORD *)(v7 + 32) + 16) >> 5) + 1, (unint64_t (*)(unint64_t))regHashFunction, (uint64_t (*)(int, int))regEqualsFunction);
    v13 = HashTableNew((*(_DWORD *)(*(_QWORD *)(v7 + 32) + 16) >> 5) + 1, (unint64_t (*)(unint64_t))regHashFunction, (uint64_t (*)(int, int))regEqualsFunction);
    v14 = v75;
    v15 = v69;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    v15 = v69;
    v14 = v69;
  }
  v78 = v7;
  v74 = HashSetNew((*(_DWORD *)(*(_QWORD *)(v7 + 32) + 16) >> 5) + 1, (unint64_t (*)(unint64_t))regHashFunction, (uint64_t (*)(int, int))regEqualsFunction);
  v16 = 0;
  *(_QWORD *)(v8 - 128) = v72;
  *(_QWORD *)(v8 - 120) = v12;
  *(_QWORD *)(v8 - 144) = v11;
  *(_QWORD *)(v8 - 136) = v13;
  *(_QWORD *)(v8 - 160) = v2;
  *(_QWORD *)(v8 - 152) = v75;
  *(_QWORD *)(v8 - 176) = v14;
  *(_QWORD *)(v8 - 168) = v15;
  v17 = v8 - 128;
  v18 = 1;
  do
  {
    v71 = v18;
    v19 = *(_QWORD *)(v8 - 160 + 8 * v16);
    if (v19)
    {
      v20 = *(_QWORD *)(v19 + 8);
      v21 = *(_QWORD *)(v8 - 176 + 8 * v16);
      v76 = v21;
      while (v20 != v21)
      {
        v22 = *(_QWORD *)(v20 + 24) & 7;
        if (v22)
        {
          v23 = 0;
          v24 = v20 + 40;
          do
          {
            if (v23 < (*(_DWORD *)(v20 + 24) & 7) + ((__int16)*(_DWORD *)(v20 + 24) >> 15))
            {
              memset(v79, 0, sizeof(v79));
              v25 = v24 + 8 * v23;
              *(_DWORD *)&v79[4] = (*(_QWORD *)v25 >> 6) & 7;
              *(_DWORD *)v79 = *(unsigned __int16 *)(v25 + 6);
              v26 = *(uint64_t **)(v17 + 8 * v16);
              v27 = HashTableGet(v26, (uint64_t)v79);
              if (v27)
              {
                v29 = (_DWORD *)v27;
                HashTableGet(*(uint64_t **)(v8 - 144 + 8 * v16), v27);
              }
              else
              {
                GetRegisterTypeInfo((uint64_t **)v7, (uint64_t)v79, v28);
                v30 = malloc_type_malloc(0x28uLL, 0x7081ABB9uLL);
                if (!v30)
                  goto LABEL_55;
                v31 = (uint64_t)v30;
                v32 = *(_OWORD *)v79;
                v33 = *(_OWORD *)&v79[16];
                v30[4] = *(_QWORD *)&v79[32];
                *(_OWORD *)v30 = v32;
                *((_OWORD *)v30 + 1) = v33;
                v34 = malloc_type_malloc(0x28uLL, 0x7081ABB9uLL);
                if (!v34)
                  goto LABEL_55;
                v29 = v34;
                v36 = *(_OWORD *)v79;
                v35 = *(_OWORD *)&v79[16];
                *((_QWORD *)v34 + 4) = *(_QWORD *)&v79[32];
                *(_OWORD *)v34 = v36;
                *((_OWORD *)v34 + 1) = v35;
                v34[1] = 1;
                *v34 = AddTempRegister(v7, v79[8], v79[12], v79[16]);
                HashTableAdd(v26, v31, (uint64_t)v29);
                HashTableAdd(*(uint64_t **)(v8 - 144 + 8 * v16), (uint64_t)v29, v31);
                v17 = v8 - 128;
              }
              v37 = *(_QWORD *)(v24 + 8 * v23) & 0xFFFFFFFFFFFFFE3FLL | ((unint64_t)(v29[1] & 7) << 6);
              *(_QWORD *)(v24 + 8 * v23) = v37;
              *(_QWORD *)(v24 + 8 * v23) = v37 & 0xFFFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)*v29 << 48);
            }
            ++v23;
          }
          while (v22 != v23);
        }
        if ((*(_DWORD *)(v20 + 32) & 0x78000) != 0)
        {
          memset(v79, 0, sizeof(v79));
          v38 = *(_QWORD *)(v20 + 32);
          *(_DWORD *)v79 = HIWORD(v38);
          *(_DWORD *)&v79[4] = (v38 >> 12) & 7;
          v39 = *(uint64_t **)(v8 - 128 + 8 * v16);
          v40 = HashTableGet(v39, (uint64_t)v79);
          if (v40)
          {
            v42 = (_DWORD *)v40;
            v43 = HashTableGet(*(uint64_t **)(v8 - 144 + 8 * v16), v40);
          }
          else
          {
            GetRegisterTypeInfo((uint64_t **)v7, (uint64_t)v79, v41);
            v44 = malloc_type_malloc(0x28uLL, 0x7081ABB9uLL);
            if (!v44
              || (v43 = (uint64_t)v44,
                  v45 = *(_OWORD *)v79,
                  v46 = *(_OWORD *)&v79[16],
                  v44[4] = *(_QWORD *)&v79[32],
                  *(_OWORD *)v44 = v45,
                  *((_OWORD *)v44 + 1) = v46,
                  (v47 = malloc_type_malloc(0x28uLL, 0x7081ABB9uLL)) == 0))
            {
LABEL_55:
              abort();
            }
            v42 = v47;
            v49 = *(_OWORD *)v79;
            v48 = *(_OWORD *)&v79[16];
            *((_QWORD *)v47 + 4) = *(_QWORD *)&v79[32];
            *(_OWORD *)v47 = v49;
            *((_OWORD *)v47 + 1) = v48;
            v47[1] = 1;
            *v47 = AddTempRegister(v7, v79[8], v79[12], v79[16]);
            HashTableAdd(v39, v43, (uint64_t)v42);
            HashTableAdd(*(uint64_t **)(v8 - 144 + 8 * v16), (uint64_t)v42, v43);
          }
          v17 = v8 - 128;
          if (v74)
            HashSetAdd((uint64_t)v74, v43);
          v50 = *(_QWORD *)(v20 + 32) & 0xFFFFFFFFFFFF8FFFLL | ((unint64_t)(v42[1] & 7) << 12);
          *(_QWORD *)(v20 + 32) = v50;
          *(_QWORD *)(v20 + 32) = v50 & 0xFFFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)*v42 << 48);
        }
        if ((*(_QWORD *)(v20 + 24) & 0x3FC0) == 0x13C0)
        {
          v82 = 0;
          v80 = 0u;
          v81 = 0u;
          memset(&v79[8], 0, 32);
          HIDWORD(v81) = *(_DWORD *)(v20 + 92);
          *(_QWORD *)v79 = *(_QWORD *)(v20 + 24) & 0x1C000380000 | 0x100000902;
          __asm { BR              X10 }
        }
        v20 = *(_QWORD *)(v20 + 8);
        v21 = v76;
      }
    }
    v18 = 0;
    v16 = 1;
  }
  while ((v71 & 1) != 0);
  v51 = 0;
  v52 = 1;
  do
  {
    v53 = v52;
    v54 = *(_QWORD *)(v8 - 160 + 8 * v51);
    if (v54)
    {
      *(_QWORD *)(v8 - 248) = 0;
      *(_QWORD *)(v8 - 240) = 0;
      HashSetIteratorSetup(**(_QWORD **)(v8 - 128 + 8 * v51), (_QWORD *)(v8 - 248));
      v55 = HashSetIteratorNext((unsigned int *)(v8 - 248));
      if (v55)
      {
        v56 = *(_QWORD *)(v55 + 8);
        v82 = 0;
        v80 = 0u;
        v81 = 0u;
        memset(&v79[8], 0, 32);
        HIDWORD(v81) = *(_DWORD *)(v54 + 92);
        *(_QWORD *)v79 = 0x100000001;
        __asm { BR              X13 }
      }
      PPStreamRemoveOperation(v7, (_QWORD *)v54);
    }
    v52 = 0;
    v51 = 1;
  }
  while ((v53 & 1) != 0);
  *(_QWORD *)(v8 - 200) = 0;
  *(_QWORD *)(v8 - 192) = 0;
  HashSetIteratorSetup((uint64_t)v74, (_QWORD *)(v8 - 200));
  v57 = HashSetIteratorNext((unsigned int *)(v8 - 200));
  if (v57)
  {
    v58 = v57;
    do
    {
      v59 = 0;
      *(_QWORD *)(v8 - 224) = 0;
      *(_QWORD *)(v8 - 216) = 0;
      v60 = 1;
      do
      {
        v61 = v60;
        v62 = *(uint64_t **)(v8 - 128 + 8 * v59);
        if (v62)
          *(_QWORD *)(v8 - 224 + 8 * v59) = HashTableGet(v62, v58);
        v60 = 0;
        v59 = 1;
      }
      while ((v61 & 1) != 0);
      *(int8x16_t *)(v8 - 224) = vbslq_s8((int8x16_t)vceqzq_s64(*(int64x2_t *)(v8 - 224)), (int8x16_t)vdupq_n_s64(v58), *(int8x16_t *)(v8 - 224));
      v7 = v78;
      if (*(_QWORD *)(v8 - 224) != *(_QWORD *)(v8 - 216))
      {
        v82 = 0;
        v80 = 0u;
        v81 = 0u;
        memset(&v79[8], 0, 32);
        HIDWORD(v81) = *(_DWORD *)(v69 + 92);
        *(_QWORD *)v79 = 0x100000F83;
        __asm { BR              X12 }
      }
      v58 = HashSetIteratorNext((unsigned int *)(v8 - 200));
    }
    while (v58);
  }
  PPStreamRemoveOperation(v7, (_QWORD *)v69);
  v63 = 0;
  v64 = 1;
  do
  {
    v65 = v64;
    v66 = *(uint64_t **)(v8 - 128 + 8 * v63);
    if (v66)
    {
      *(_QWORD *)v79 = 0;
      *(_QWORD *)&v79[8] = 0;
      HashSetIteratorSetup(*v66, v79);
      v67 = HashSetIteratorNext((unsigned int *)v79);
      if (v67)
      {
        v68 = (void **)v67;
        do
        {
          free(*v68);
          free(v68[1]);
          v68 = (void **)HashSetIteratorNext((unsigned int *)v79);
        }
        while (v68);
      }
      HashTableFree(v66);
      HashTableFree(*(uint64_t **)(v8 - 144 + 8 * v63));
    }
    v64 = 0;
    v63 = 1;
  }
  while ((v65 & 1) != 0);
  HashSetFree(v74);
}

uint64_t AddTempRegister(uint64_t a1, char a2, char a3, char a4)
{
  __int128 v9;

  *((_QWORD *)&v9 + 1) = 0;
  DWORD2(v9) = PPStreamChunkListGetNextIndex(*(uint64_t **)(a1 + 32));
  *(_QWORD *)&v9 = a2 & 7 | (8 * (a3 & 7)) & 0x3F | ((a4 & 3) << 6);
  PPStreamAddTempUsage(a1, &v9);
  return DWORD2(v9);
}

uint64_t regHashFunction(unsigned int *a1)
{
  return *a1;
}

uint64_t regEqualsFunction(_DWORD *a1, _DWORD *a2)
{
  int v3;
  int v4;
  uint64_t result;

  v3 = a1[1];
  v4 = a2[1];
  result = (v3 - v4);
  if (v3 == v4)
    return (*a1 - *a2);
  return result;
}

double GetRegisterTypeInfo(uint64_t **a1, uint64_t a2, int32x4_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  switch(*(_DWORD *)(a2 + 4))
  {
    case 0:
      v6 = PPStreamChunkListChunkAtIndex(a1[6], *(_DWORD *)a2);
      if (v6)
        goto LABEL_7;
      goto LABEL_8;
    case 1:
      v5 = a1[4];
      goto LABEL_6;
    case 2:
      v7 = PPStreamChunkListChunkAtIndex(a1[7], *(_DWORD *)a2);
      *(_DWORD *)(a2 + 8) = *(_DWORD *)(v7 + 24) & 7;
      *(_DWORD *)(a2 + 12) = (*(_DWORD *)(v7 + 24) >> 3) & 7;
      *(_DWORD *)(a2 + 16) = *(_DWORD *)(v7 + 24) >> 6;
      *(_DWORD *)(a2 + 20) = 0;
      if ((*(_QWORD *)(v7 + 24) & 0x1F00) == 0x600)
      {
        *(_DWORD *)(a2 + 20) = 1;
        a3 = *(int32x4_t *)(PPStreamChunkListChunkAtIndex(a1[16], *(unsigned __int16 *)(v7 + 28)) + 24);
        if (*(_DWORD *)(a2 + 12))
          a3 = (int32x4_t)vcvtq_f32_s32(a3);
        *(int32x4_t *)(a2 + 24) = a3;
      }
      return *(double *)a3.i64;
    case 3:
    case 5:
      v5 = a1[8];
LABEL_6:
      v6 = PPStreamChunkListChunkAtIndex(v5, *(_DWORD *)a2);
LABEL_7:
      *(_DWORD *)(a2 + 8) = *(_DWORD *)(v6 + 24) & 7;
      *(_DWORD *)(a2 + 12) = (*(_DWORD *)(v6 + 24) >> 3) & 7;
      *(_DWORD *)(a2 + 16) = *(_DWORD *)(v6 + 24) >> 6;
LABEL_8:
      *(_DWORD *)(a2 + 20) = 0;
      break;
    case 4:
      a3.i64[0] = 0x200000000;
      *(_OWORD *)(a2 + 8) = xmmword_22A98A030;
      break;
    default:
      return *(double *)a3.i64;
  }
  return *(double *)a3.i64;
}

void DetectConstantLoopsSimple(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int32x4_t v9;
  BOOL v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  char v18;
  uint64_t v19;
  int v20;
  _BOOL4 v21;
  int v22;
  int v23;
  _QWORD *v24;
  _BOOL4 v25;
  int v29;
  int v30;
  int v31;
  int v32;
  _BOOL4 v33;
  int v34;
  uint64_t v35;
  __int128 v36;
  __int128 *v37;
  __int128 *v38;
  __int128 *v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  unsigned int v51;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  unsigned int v57;
  int v59;
  int v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  int v64;
  int v65;
  int v66;
  _BOOL4 v67;
  unint64_t v68;
  _BOOL4 v69;
  unsigned int v70;
  int v71;
  char v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  _QWORD *v79;
  uint64_t *v80;
  _QWORD *v81;
  uint64_t v82;
  unsigned int v83;
  int v84;
  uint64_t v85;
  unsigned int v86;
  int v87;
  _BYTE v88[56];
  __int128 v89;
  uint64_t v90;
  _OWORD v91[3];
  _OWORD v92[3];
  __int128 v93;
  _OWORD v94[2];
  __int128 v95;
  _OWORD v96[2];
  __int128 v97;
  _OWORD v98[2];
  __int128 v99;
  _OWORD v100[2];
  _OWORD v101[3];
  _OWORD v102[3];
  _OWORD v103[3];
  _OWORD v104[3];
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  _OWORD *v110;
  _OWORD *v111;
  _OWORD *v112;
  _OWORD *v113;
  _OWORD *v114;
  __int128 v115;
  uint64_t v116;
  int v117;
  int v118;
  int v119;
  __int128 v120;
  _OWORD *v121;
  uint64_t v122;
  _OWORD *v123;
  uint64_t v124;
  __int128 *v125;
  __int128 *v126;
  __int128 *v127;
  __int128 *v128;
  _OWORD *v129;
  uint64_t v130;
  _OWORD *v131;
  __int128 *v132;
  _OWORD *v133;
  __int128 *v134;
  _OWORD *v135;
  _OWORD *v136;
  int32x4_t v137;
  __int128 v138;
  uint64_t v139;
  int32x4_t v140;
  __int128 v141;
  uint64_t v142;
  uint64_t v143;

  v143 = *MEMORY[0x24BDAC8D0];
  v1 = (uint64_t *)*a1[13];
  if (!v1)
    return;
  do
  {
    while (2)
    {
      while ((v1[3] & 0x3FC0) != 0x1AC0)
      {
        v1 = (uint64_t *)v1[1];
        if (!v1)
          return;
      }
      v107 = 0;
      v105 = 0u;
      v106 = 0u;
      memset(v104, 0, 44);
      memset(v103, 0, 44);
      v3 = *v1;
      v80 = v1;
      if (*v1 && (*(_WORD *)(v3 + 24) & 0x3FC0) == 0)
      {
        GetOpRegs(a1, v3, &v137, &v105, (int32x4_t)0);
        v5 = IsBadUsage(v3);
        v86 = v105;
        v4 = DWORD1(v105);
        v76 = v106;
        v77 = HIDWORD(v105);
        v103[0] = v137;
        v103[1] = v138;
        *(_QWORD *)&v103[2] = v139;
        DWORD2(v103[2]) = DWORD2(v103[2]) & 0xFFFFFFFC | (*(_DWORD *)(v3 + 40) >> 9) & 3;
        DWORD2(v103[2]) = DWORD2(v103[2]) & 0xFFFFFFF3 | (4 * ((*(_DWORD *)(v3 + 40) >> 11) & 3));
        DWORD2(v103[2]) = DWORD2(v103[2]) & 0xFFFFFFCF | (16 * ((*(_DWORD *)(v3 + 40) >> 13) & 3));
        DWORD2(v103[2]) = DWORD2(v103[2]) & 0xFFFFFF3F | (((*(_DWORD *)(v3 + 40) >> 15) & 3) << 6);
      }
      else
      {
        v86 = 0;
        v4 = 0;
        v76 = 0;
        v77 = 0;
        v5 = 1;
      }
      v83 = v4;
      memset(v102, 0, 44);
      v6 = v80[1];
      if ((*(_QWORD *)(v6 + 24) & 0x3FC0) == 0x1BC0)
        v6 = *(_QWORD *)(v6 + 8);
      v7 = *(_QWORD *)(v6 + 8);
      v81 = *(_QWORD **)(v7 + 8);
      GetOpRegs(a1, v6, &v137, &v105, (int32x4_t)0);
      v8 = IsBadUsage(v6);
      v10 = v83 == v137.i32[1] && v86 == v137.i32[0];
      v11 = v10;
      if (v10)
      {
        v9 = v140;
        v102[0] = v140;
        v102[1] = v141;
        *(_QWORD *)&v102[2] = v142;
        v12 = DWORD2(v102[2]) & 0xFFFFFF00 | (*(_DWORD *)(v6 + 48) >> 9);
LABEL_23:
        v13 = v8 | v5;
        DWORD2(v102[2]) = v12;
        v14 = v11;
        goto LABEL_24;
      }
      v13 = 1;
      if (v83 != v140.i32[1])
      {
        v14 = 1;
        goto LABEL_24;
      }
      v14 = 1;
      if (v86 == v140.i32[0])
      {
        v9 = v137;
        v102[0] = v137;
        v102[1] = v138;
        *(_QWORD *)&v102[2] = v139;
        DWORD2(v102[2]) = DWORD2(v102[2]) & 0xFFFFFFFC | (*(_DWORD *)(v6 + 40) >> 9) & 3;
        DWORD2(v102[2]) = DWORD2(v102[2]) & 0xFFFFFFF3 | (4 * ((*(_DWORD *)(v6 + 40) >> 11) & 3));
        DWORD2(v102[2]) = DWORD2(v102[2]) & 0xFFFFFFCF | (16 * ((*(_DWORD *)(v6 + 40) >> 13) & 3));
        v12 = DWORD2(v102[2]) & 0xFFFFFF3F | (((*(_DWORD *)(v6 + 40) >> 15) & 3) << 6);
        goto LABEL_23;
      }
LABEL_24:
      v15 = 0;
      v16 = 0;
      v17 = 1;
      v18 = 1;
      v19 = (uint64_t)v80;
      switch((*(_DWORD *)(v6 + 24) >> 6))
      {
        case '2':
          v17 = 0;
          v18 = 0;
          v15 = 1;
          goto LABEL_28;
        case '3':
          v17 = 0;
          v16 = 0;
          v15 = 1;
          break;
        case '4':
          v15 = 0;
          v18 = 0;
LABEL_28:
          v16 = 1;
          break;
        case '5':
          break;
        default:
          v15 = 0;
          v16 = 0;
          v13 = 1;
          v17 = 1;
          v18 = 1;
          v19 = (uint64_t)v80;
          break;
      }
      if (v14)
        v20 = v15;
      else
        v20 = v17;
      v75 = v20;
      if (v81)
        v21 = (v81[3] & 0x3FC0) != 5440;
      else
        v21 = 1;
      v73 = v18;
      v74 = v16;
      v22 = v13 | ((*(_QWORD *)(v7 + 24) & 0x3FC0) != 640) | v21;
      if (v22)
      {
        v23 = 0;
        v84 = 0;
        v79 = 0;
        v78 = 0;
        v24 = 0;
        v25 = 1;
        goto LABEL_38;
      }
      v47 = 0;
      v78 = 0;
      v79 = 0;
      v84 = 0;
      v23 = 0;
      v48 = 0;
      v82 = *(_QWORD *)(v19 + 24) >> 46;
      v49 = v19;
      while (1)
      {
        v50 = (_QWORD *)v49;
        if (v47)
        {
          if (*(_DWORD *)(v49 + 88) == (_DWORD)v82 && (v47[3] & 0x3FC0) == 0x1B00)
            break;
        }
        v51 = (*(_DWORD *)(v49 + 24) >> 6) - 85;
        v87 = v23;
        if (v51 <= 0x3A)
        {
          if (((1 << v51) & 0x80000000400007) != 0)
          {
            v52 = 1;
            goto LABEL_104;
          }
          if (((1 << v51) & 0x400000000800070) != 0)
          {
            v52 = -1;
LABEL_104:
            v53 = (v52 + v48);
            goto LABEL_105;
          }
        }
        v53 = v48;
LABEL_105:
        GetOpRegs(a1, v49, &v137, &v105, v9);
        v54 = IsBadUsage((uint64_t)v50);
        v55 = DWORD1(v105);
        v56 = v105;
        v57 = v83;
        if (v83 == DWORD1(v105) && v86 == (_DWORD)v105)
        {
          v48 = v53;
          if (v84)
          {
            v59 = 1;
            v84 = 1;
          }
          else
          {
            v60 = v54;
            v61 = v50[3];
            if ((v61 & 0x3FC0) != 0)
            {
              v62 = v50;
            }
            else
            {
              v63 = *v50;
              v62 = v50;
              if ((*(_DWORD *)(*v50 + 24) >> 6) - 31 <= 1)
              {
                memset(v88, 0, 40);
                v85 = v63;
                GetOpRegs(a1, (uint64_t)v50, &v120, v88, (int32x4_t)0);
                v110 = 0;
                v108 = 0u;
                v109 = 0u;
                GetOpRegs(a1, v85, &v137, &v108, (int32x4_t)0);
                v48 = v53;
                v57 = v83;
                v64 = DWORD1(v120) - DWORD1(v108);
                if (DWORD1(v120) == DWORD1(v108))
                  v64 = v120 - v108;
                if (v64)
                  v62 = v50;
                else
                  v62 = (_QWORD *)v85;
                v61 = v62[3];
              }
            }
            v59 = v60 | ((int)v53 > 1);
            v65 = (v61 >> 6);
            if (v65 != 31)
            {
              if (v65 == 32)
                v78 = 1;
              else
                v59 = 1;
            }
            if (__PAIR64__(v57, v86) == v137.i64[0])
            {
              v9 = v140;
              v104[0] = v140;
              v104[1] = v141;
              *(_QWORD *)&v104[2] = v142;
              BYTE8(v104[2]) = *((_DWORD *)v62 + 12) >> 9;
            }
            else
            {
              v84 = 1;
              if (__PAIR64__(v57, v86) != v140.i64[0])
              {
                v59 = 1;
                goto LABEL_133;
              }
              v9 = v137;
              v104[0] = v137;
              v104[1] = v138;
              *(_QWORD *)&v104[2] = v139;
              DWORD2(v104[2]) = DWORD2(v104[2]) & 0xFFFFFFFC | (*((_DWORD *)v62 + 10) >> 9) & 3;
              DWORD2(v104[2]) = DWORD2(v104[2]) & 0xFFFFFFF3 | (4 * ((*((_DWORD *)v62 + 10) >> 11) & 3));
              DWORD2(v104[2]) = DWORD2(v104[2]) & 0xFFFFFFCF | (16 * ((*((_DWORD *)v62 + 10) >> 13) & 3));
              DWORD2(v104[2]) = DWORD2(v104[2]) & 0xFFFFFF3F | (((*((_DWORD *)v62 + 10) >> 15) & 3) << 6);
              v59 |= v78;
            }
            v84 = 1;
          }
        }
        else
        {
          v59 = 0;
          v48 = v53;
        }
LABEL_133:
        v66 = DWORD1(v102[0]) - v55;
        if (DWORD1(v102[0]) == v55)
          v66 = LODWORD(v102[0]) - v56;
        v67 = v66 == 0;
        v68 = v50[3];
        v69 = 1;
        v70 = (v68 >> 6) - 75;
        if (v70 <= 0x1F)
          v69 = ((1 << v70) & 0x80000005) == 0;
        if (v87)
        {
          v23 = 1;
        }
        else
        {
          v71 = (v68 >> 6);
          if (v71 == 89)
          {
            v23 = 1;
            v79 = v50;
          }
          else if (v71 == 85)
          {
            v23 = 0;
            if (v81 != v50)
              v69 = 0;
          }
          else
          {
            v23 = 0;
          }
        }
        v24 = 0;
        v22 = v59 | v67;
        v25 = v69;
        if (v69)
        {
          v49 = v50[1];
          if (v49)
          {
            v47 = v50;
            if (!v22)
              continue;
          }
        }
        goto LABEL_38;
      }
      v22 = 0;
      v25 = 1;
      v24 = v47;
LABEL_38:
      if (HIDWORD(v104[0]) != 2 || HIDWORD(v102[0]) != 2 || HIDWORD(v103[0]) != 2 || v77 != 2)
        v22 = 1;
      if (v76
        || (v29 = BYTE8(v104[2]) & 3, v29 != ((DWORD2(v104[2]) >> 2) & 3))
        || v29 != ((DWORD2(v104[2]) >> 4) & 3)
        || v29 != BYTE8(v104[2]) >> 6
        || (v30 = BYTE8(v103[2]) & 3, v30 != ((DWORD2(v103[2]) >> 2) & 3))
        || v30 != ((DWORD2(v103[2]) >> 4) & 3)
        || v30 != BYTE8(v103[2]) >> 6
        || (v31 = BYTE8(v102[2]) & 3, v31 != ((DWORD2(v102[2]) >> 2) & 3))
        || v31 != ((DWORD2(v102[2]) >> 4) & 3)
        || v31 != BYTE8(v102[2]) >> 6)
      {
        v22 = 1;
      }
      v32 = v22 | (DWORD1(v104[1]) == 0);
      if ((SDWORD2(v104[1]) & 0x80000000) == 0)
        v33 = v78 != 0;
      else
        v33 = v78 == 0;
      if (v32)
        v34 = 0;
      else
        v34 = (v75 == 0) ^ v33;
      if (!v84)
        v34 = 0;
      if (!v23)
        v34 = 0;
      if (!v81)
        v34 = 0;
      if (!v79)
        v34 = 0;
      if ((v25 & v34) != 1)
      {
        v1 = (uint64_t *)v80[1];
        if (!v1)
          return;
        continue;
      }
      break;
    }
    memset(v101, 0, 44);
    DWORD1(v101[0]) = 1;
    HIDWORD(v101[0]) = 0;
    *((_QWORD *)&v120 + 1) = 0;
    DWORD2(v120) = PPStreamChunkListGetNextIndex(a1[4]);
    *(_QWORD *)&v120 = 0;
    PPStreamAddTempUsage((uint64_t)a1, &v120);
    LODWORD(v101[0]) = DWORD2(v120);
    BYTE8(v101[2]) = -28;
    v99 = v101[0];
    v100[0] = v101[1];
    *(_OWORD *)((char *)v100 + 12) = *(_OWORD *)((char *)&v101[1] + 12);
    LODWORD(v99) = AddTempRegister((uint64_t)a1, SBYTE8(v101[0]), SBYTE12(v101[0]), v101[1]);
    v97 = v101[0];
    v98[0] = v101[1];
    *(_OWORD *)((char *)v98 + 12) = *(_OWORD *)((char *)&v101[1] + 12);
    LODWORD(v97) = AddTempRegister((uint64_t)a1, SBYTE8(v101[0]), SBYTE12(v101[0]), v101[1]);
    v95 = v101[0];
    v96[0] = v101[1];
    *(_OWORD *)((char *)v96 + 12) = *(_OWORD *)((char *)&v101[1] + 12);
    LODWORD(v95) = AddTempRegister((uint64_t)a1, SBYTE8(v101[0]), SBYTE12(v101[0]), v101[1]);
    v93 = v101[0];
    v94[0] = v101[1];
    *(_OWORD *)((char *)v94 + 12) = *(_OWORD *)((char *)&v101[1] + 12);
    LODWORD(v93) = AddTempRegister((uint64_t)a1, SBYTE8(v101[0]), SBYTE12(v101[0]), v101[1]);
    memset(v92, 0, 44);
    memset(v91, 0, 44);
    if ((v73 & 1) == 0)
    {
      v92[0] = v101[0];
      v92[1] = v101[1];
      *(_OWORD *)((char *)&v92[1] + 12) = *(_OWORD *)((char *)&v101[1] + 12);
      LODWORD(v92[0]) = AddTempRegister((uint64_t)a1, SBYTE8(v101[0]), SBYTE12(v101[0]), v101[1]);
      v91[0] = v101[0];
      v91[1] = v101[1];
      *(_OWORD *)((char *)&v91[1] + 12) = *(_OWORD *)((char *)&v101[1] + 12);
      LODWORD(v91[0]) = AddTempRegister((uint64_t)a1, SBYTE8(v101[0]), SBYTE12(v101[0]), v101[1]);
    }
    v35 = 0;
    *(_QWORD *)&v36 = 0x100000001;
    *((_QWORD *)&v36 + 1) = 0x100000001;
    v115 = v36;
    v116 = 0x100000001;
    v117 = v74;
    v118 = v74;
    v119 = v74;
    *(_QWORD *)&v120 = v102;
    *((_QWORD *)&v120 + 1) = 0;
    v121 = v103;
    v122 = 0;
    v123 = v104;
    v124 = 0;
    if (v33)
      v37 = &v95;
    else
      v37 = &v97;
    if (v33)
      v38 = &v97;
    else
      v38 = &v95;
    v125 = v37;
    v126 = v38;
    v127 = &v99;
    v128 = &v93;
    v129 = v101;
    v130 = 0;
    v131 = v101;
    v132 = &v93;
    v133 = v92;
    v134 = &v99;
    v135 = v101;
    v136 = v91;
    *(_QWORD *)&v108 = &v97;
    *((_QWORD *)&v108 + 1) = &v95;
    *(_QWORD *)&v109 = &v93;
    *((_QWORD *)&v109 + 1) = &v99;
    v110 = v101;
    v111 = v101;
    v112 = v92;
    v113 = v91;
    v39 = &v120;
    v114 = v101;
    do
    {
      if (*((_DWORD *)&v115 + v35))
      {
        v90 = 0;
        v89 = 0u;
        memset(&v88[8], 0, 48);
        HIDWORD(v89) = *((_DWORD *)v80 + 23);
        v40 = *((_QWORD *)&v108 + v35);
        *(_QWORD *)v88 = dword_22A98A224[v35] & 7 | (dword_22A98A200[v35] << 6) | 0x100000000;
        __asm { BR              X13 }
      }
      ++v35;
      ++v39;
    }
    while (v35 != 9);
    v41 = (_QWORD *)v79[1];
    v42 = v81;
    if (v81 != v41)
    {
      do
      {
        v43 = (_QWORD *)v42[1];
        PPStreamRemoveOperation((uint64_t)a1, v42);
        v42 = v43;
      }
      while (v43 != v41);
    }
    v44 = v101[1];
    v45 = v80[3];
    v80[5] = v80[5] & 0xFFFFFFE6002FLL | ((unint64_t)(v101[1] & 3) << 19) | ((unint64_t)(BYTE4(v101[0]) & 7) << 6) | ((unint64_t)LODWORD(v101[0]) << 48) | 0x1C800;
    v80[3] = v45 & 0xFFFFFE0FFFC7C038 | ((unint64_t)(BYTE8(v101[0]) & 7) << 19) | ((unint64_t)(BYTE12(v101[0]) & 7) << 38) | ((unint64_t)(v44 & 3) << 36) | 0x15C1;
    v46 = v80[1];
    if (v46)
      *(_QWORD *)(v46 + 24) = *(_QWORD *)(v46 + 24) & 0xFFFFFFFFFFFFFFC7 | 8;
    v24[3] = v24[3] & 0xFFFFFFFFFFFFC03FLL | 0x16C0;
    v1 = (uint64_t *)v80[1];
  }
  while (v1);
}

void GetOpRegs(uint64_t **a1, uint64_t a2, _DWORD *a3, _DWORD *a4, int32x4_t a5)
{
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v9 = *(_QWORD *)(a2 + 24);
  v10 = v9 & 7;
  if ((*(_DWORD *)(a2 + 24) & 7) == 0)
    goto LABEL_7;
  v11 = 0;
  v12 = v9 & 7;
  v13 = a3;
  do
  {
    if (v11 < (*(_DWORD *)(a2 + 24) & 7) + ((__int16)*(_DWORD *)(a2 + 24) >> 15))
    {
      v14 = a2 + 40 + 8 * v11;
      v13[1] = (*(_QWORD *)v14 >> 6) & 7;
      *v13 = *(unsigned __int16 *)(v14 + 6);
      *(double *)a5.i64 = GetRegisterTypeInfo(a1, (uint64_t)v13, a5);
    }
    ++v11;
    v13 += 10;
  }
  while (v12 != v11);
  if (v10 <= 3)
  {
LABEL_7:
    v15 = (40 * v10) | 4;
    do
    {
      *(_DWORD *)((char *)a3 + v15) = 500;
      v15 += 40;
    }
    while (v15 != 164);
  }
  v16 = *(_QWORD *)(a2 + 32);
  if ((v16 & 0x78000) != 0)
  {
    a4[1] = (v16 >> 12) & 7;
    *a4 = *(unsigned __int16 *)(a2 + 38);
    GetRegisterTypeInfo(a1, (uint64_t)a4, a5);
  }
  else
  {
    a4[1] = 500;
  }
}

uint64_t IsBadUsage(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;

  v1 = *(_QWORD *)(a1 + 24);
  if ((*(_DWORD *)(a1 + 24) & 7) != 0)
  {
    v2 = 0;
    v3 = 0;
    do
    {
      if (v2 < (v1 & 7) + ((__int16)v1 >> 15))
        v3 |= (*(_QWORD *)(a1 + 40 + 8 * v2) >> 17) & 3 | ((*(_QWORD *)(a1 + 40 + 8 * v2) & 0x180000) != 0) | ((*(_QWORD *)(a1 + 40 + 8 * v2) & 0x11) != 0);
      ++v2;
    }
    while ((v1 & 7) != v2);
  }
  else
  {
    v3 = 0;
  }
  v4 = *(_QWORD *)(a1 + 32);
  v5 = (v4 >> 15) & 1;
  if ((v4 & 0x30000) != 0)
    v5 = 1;
  return (v4 >> 19) & 3 | v3 | ((v4 & 0x600000) != 0) | BYTE4(v4) & 1 | ((v1 & 0x80000000000) != 0) | v5;
}

void UnrollConstantLoopsSimple(uint64_t a1, _DWORD *a2)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v10;
  _DWORD v11[2];
  __int128 v12;
  __int128 v13;
  _QWORD *v14;
  _QWORD *v15[4];

  if (a2)
    v4 = a2[5];
  else
    v4 = 0;
  v5 = (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 16) >> 5) + 1;
  v15[0] = 0;
  v15[1] = (_QWORD *)v5;
  v15[2] = regHashFunction;
  v15[3] = regEqualsFunction;
  v6 = HashSetNew(v5, (unint64_t (*)(unint64_t))regHashFunction, (uint64_t (*)(int, int))regEqualsFunction);
  EmulationContext_PushRegisters((uint64_t *)v15, (uint64_t)v6);
  v7 = **(_QWORD ***)(a1 + 104);
  v14 = v7;
  while (v7)
  {
    v8 = v7[3] & 0x3FC0;
    if (v8 != 5568 || v4 == 0)
    {
      if (v8 != 5568)
        goto LABEL_13;
    }
    else
    {
      v12 = 0u;
      v13 = 0u;
      v10 = v7[5];
      v11[0] = HIWORD(v10);
      v11[1] = (v10 >> 6) & 7;
      GetRegisterTypeInfo((uint64_t **)a1, (uint64_t)v11, (int32x4_t)0);
      if (HIDWORD(v12))
      {
LABEL_13:
        EmulateOp((uint64_t **)a1, v7, (uint64_t *)v15);
        v7 = (_QWORD *)v7[1];
        v14 = v7;
        continue;
      }
    }
    UnrollConstantLoopsInner(&v14, (uint64_t *)v15, a1, a2);
    v7 = v14;
  }
  while (v15[0])
    EmulationContext_PopRegisters(v15);
}

void UnrollConstantLoopsInner(_QWORD **a1, uint64_t *a2, uint64_t a3, _DWORD *a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unsigned int v23;
  int v24;
  int v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  unsigned int *v37;
  uint64_t *v38;
  unint64_t *v39;
  unint64_t v40;
  unsigned int *v41;
  unint64_t v42;
  char *inserted;
  uint64_t v44;
  int v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  int v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  _DWORD v59[2];
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  _DWORD v63[2];
  __int128 v64;
  __int128 v65;
  _DWORD v66[2];
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  _QWORD *v70;
  __int128 v71;
  _OWORD v72[3];
  __int128 v73;
  _QWORD v74[5];
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  _DWORD *v80;
  _DWORD *v81;
  _OWORD v82[2];
  uint64_t *v83;
  _QWORD v84[5];
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;

  v88 = *MEMORY[0x24BDAC8D0];
  v6 = *a1;
  v69 = 0;
  v70 = v6;
  v7 = v6[3] >> 46;
  if (a4)
  {
    v8 = a4[5];
    if (!*a4)
    {
      if (a4[1])
      {
        v9 = v6[1];
        *(_QWORD *)&v71 = v9;
        if (v9)
        {
          v11 = a2;
          do
          {
            if (*(_DWORD *)(v9 + 88) == (_DWORD)v7)
              break;
            if ((*(_QWORD *)(v9 + 24) & 0x3FC0) == 0x15C0)
            {
              v12 = v8;
              EmulationContext_PushRegistersCopy(v11);
              v13 = v11;
              if (v6 != (_QWORD *)v9)
              {
                v14 = v6;
                do
                {
                  EmulateOp((uint64_t **)a3, v14, v13);
                  v14 = (_QWORD *)v14[1];
                }
                while (v14 != (_QWORD *)v9);
              }
              v11 = v13;
              v8 = v12;
              if (!(_DWORD)v12
                || (v76 = 0u,
                    v77 = 0u,
                    v15 = v6[5],
                    HIDWORD(v75) = (v15 >> 6) & 7,
                    LODWORD(v75) = HIWORD(v15),
                    GetRegisterTypeInfo((uint64_t **)a3, (uint64_t)&v75, (int32x4_t)0),
                    !HIDWORD(v76)))
              {
                UnrollConstantLoopsInner(&v71, v11, a3, a4);
                v9 = v71;
              }
              EmulationContext_PopRegisters((_QWORD **)v11);
            }
            v9 = *(_QWORD *)(v9 + 8);
            *(_QWORD *)&v71 = v9;
          }
          while (v9);
          if (!v6)
          {
            v20 = 0;
            v21 = 0;
            v19 = 1;
            goto LABEL_36;
          }
        }
      }
    }
  }
  else
  {
    LODWORD(v8) = 0;
  }
  v16 = 0;
  v17 = 1;
  v18 = v6;
  v19 = 1;
  while (1)
  {
    v20 = v16;
    v16 = (uint64_t)v18;
    v21 = v17;
    if (v20)
    {
      if (*((_DWORD *)v18 + 22) == (_DWORD)v7 && (*(_QWORD *)(v20 + 24) & 0x3FC0) == 0x16C0)
        break;
    }
    v22 = v18[3];
    v23 = (v22 >> 6) - 75;
    v24 = 1 << ((v22 >> 6) - 75);
    if (v22 >> 46 >= v7)
      v25 = 0;
    else
      v25 = v19;
    if ((v24 & 6) != 0)
      v26 = 0;
    else
      v26 = v19;
    if ((v24 & 0x80000201) == 0)
      v25 = v26;
    if (v23 <= 0x1F)
      v19 = v25;
    v18 = *(_QWORD **)(v16 + 8);
    v17 = v21 + 1;
    if (!v18)
    {
      v20 = 0;
      goto LABEL_36;
    }
  }
  v69 = v20;
LABEL_36:
  v68 = 0u;
  v67 = 0u;
  v27 = v6[5];
  v66[0] = HIWORD(v27);
  v66[1] = (v27 >> 6) & 7;
  v28 = HashSetGet(*(_QWORD *)(*a2 + 8), (uint64_t)v66);
  if (!v28)
    goto LABEL_51;
  if (!*(_DWORD *)(v28 + 20) || *(_DWORD *)(v28 + 16) || *(_DWORD *)(v28 + 12))
  {
    v19 = 0;
    v29 = -1;
    if (!a4)
      goto LABEL_42;
  }
  else
  {
    v29 = (int)*(float *)(v28 + 24);
    if (!a4)
      goto LABEL_42;
  }
  if (!*a4 && (v29 > a4[2] || v21 > a4[3] || v29 * v21 > a4[4]))
  {
LABEL_51:
    v65 = 0u;
    v64 = 0u;
    v32 = v6[5];
    v63[0] = HIWORD(v32);
    v63[1] = (v32 >> 6) & 7;
    GetRegisterTypeInfo((uint64_t **)a3, (uint64_t)v63, (int32x4_t)0);
    v59[1] = 2;
    v60 = 0;
    v61 = 0;
    v62 = xmmword_22A98A040;
    v58 = 0;
    v59[0] = AddConstantParam(a3, v64, SDWORD1(v64), 0, 1065353216, 0);
    v57 = 0;
    v56 = 0;
    v55 = xmmword_22A98A050;
    *(_QWORD *)&v76 = 0;
    LODWORD(v76) = PPStreamChunkListGetNextIndex(*(uint64_t **)(a3 + 32));
    v75 = 8;
    PPStreamAddTempUsage(a3, &v75);
    v33 = 0;
    v54 = v76;
    v87 = 0;
    v85 = 0u;
    v86 = 0u;
    v84[0] = &v70;
    v84[1] = &v85;
    v84[2] = (char *)&v85 + 8;
    v84[3] = &v86;
    v84[4] = 0;
    memset(v82, 0, sizeof(v82));
    v83 = &v69;
    v75 = (uint64_t)v63;
    *(_QWORD *)&v76 = v59;
    v77 = 0u;
    v78 = 0u;
    *((_QWORD *)&v76 + 1) = &v54;
    v79 = 0;
    v80 = v63;
    v34 = &v75;
    v81 = v59;
    v74[0] = &v54;
    memset(&v74[1], 0, 24);
    v74[4] = v63;
    do
    {
      v73 = 0u;
      memset(v72, 0, sizeof(v72));
      v71 = 0u;
      v35 = (uint64_t *)v84[v33];
      v36 = (uint64_t)v35;
      if (!v35)
        v36 = *((_QWORD *)v82 + v33);
      DWORD1(v73) = *(_DWORD *)(*(_QWORD *)v36 + 92);
      LODWORD(v36) = dword_22A98A25C[v33];
      *(_QWORD *)&v71 = v36 & 7 | (dword_22A98A248[v33] << 6) | ((unint64_t)(dword_22A98A270[v33] & 1) << 32) | 0x8000000000;
      v37 = (unsigned int *)v74[v33];
      if (v37)
      {
        *((_QWORD *)&v71 + 1) = 1912864768;
        *((_QWORD *)&v71 + 1) = ((v37[1] & 7) << 12) | 0x72040000;
        *((_QWORD *)&v71 + 1) |= (unint64_t)*v37 << 48;
      }
      if ((unint64_t)(v33 - 4) <= 0xFFFFFFFFFFFFFFFDLL)
      {
        if ((int)v36 <= 1)
          v36 = 1;
        else
          v36 = v36;
        v38 = v34;
        v39 = (unint64_t *)v72;
        do
        {
          v40 = *v39 & 0xFFFFFFFFFFE601FFLL | 0x1C800;
          v41 = (unsigned int *)*v38++;
          *v39 = v40;
          v42 = v40 & 0xFFFFFFFFFFFFF83FLL | ((unint64_t)(v41[1] & 7) << 6);
          *v39 = v42;
          *v39++ = v42 & 0xFFFFFFFFFFFFLL | ((unint64_t)*v41 << 48);
          --v36;
        }
        while (v36);
      }
      if (v35)
        inserted = PPStreamInsertOperationAfterChunk(a3, (uint64_t)&v71, 0, *v35);
      else
        inserted = PPStreamInsertOperationBeforeChunk(a3, (uint64_t)&v71, 0, **((_QWORD **)v82 + v33));
      *((_QWORD *)&v85 + v33++) = inserted;
      v34 += 2;
    }
    while (v33 != 5);
    v44 = 0;
    v45 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)&v86 + 1) + 8) + 88);
    LODWORD(v71) = 0;
    DWORD1(v71) = v45;
    v46 = v70;
    v47 = v70[3] >> 46;
    LODWORD(v72[0]) = 0;
    *((_QWORD *)&v71 + 1) = v47;
    do
    {
      *(_QWORD *)(*((_QWORD *)&v85 + v44) + 24) = *(_QWORD *)(*((_QWORD *)&v85 + v44) + 24) & 0x3FFFFFFFFFFFLL | ((unint64_t)*((unsigned int *)&v72[-1] + v44) << 46);
      ++v44;
    }
    while (v44 != 5);
    v46[3] = v46[3] & 0xFFFFFFFFFFFFC038 | 0x1AC0;
    v48 = v46[1];
    if (v48)
      *(_QWORD *)(v48 + 24) &= 0xFFFFFFFFFFFFFFC7;
    v49 = v69;
    v50 = *(_QWORD *)(v69 + 24) & 0xFFFFFFFFFFFFC03FLL | 0x1B00;
    *(_QWORD *)(v69 + 24) = v50;
    *(_QWORD *)(v49 + 24) = v50 & 0x3FFFFFFFFFFFLL | ((unint64_t)*(unsigned int *)(v46[1] + 88) << 46);
    EmulateOp((uint64_t **)a3, v6, a2);
    v51 = (_QWORD *)v6[1];
    goto LABEL_73;
  }
LABEL_42:
  if (!v19)
    goto LABEL_51;
  v30 = *v6;
  if (!(_DWORD)v8 || v29 < 1 || !RepifyConstantLoopSimple(a3, (uint64_t)v6, v20, v29))
    UnrollConstantLoopSimple(a3, v6, v20, v29);
  if (v30)
    v31 = (_QWORD *)(v30 + 8);
  else
    v31 = *(_QWORD **)(a3 + 104);
  v51 = (_QWORD *)*v31;
LABEL_73:
  *a1 = v51;
}

void EmulateOp(uint64_t **a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  int32x4_t v14;
  _QWORD *v15;
  __int128 v16;
  __int128 v17;
  unint64_t v18;
  uint64_t v19;
  int32x4_t v20;
  _QWORD *v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  float *v26;
  float *v27;
  float *v28;
  unsigned int v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  float *v34;
  int32x2_t v35;
  uint64_t v36;
  float *v37;
  unint64_t v38;
  unsigned int v39;
  float v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  unint64_t v47;
  int v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float *v54;
  float *v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  BOOL v61;
  float v62;
  float v63;
  BOOL v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  int v72;
  int v73;
  float v74;
  uint64_t v75;
  float v76;
  float *v77;
  float v78;
  int v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  uint64_t v87;
  float v88;
  float *v89;
  float v90;
  unint64_t v91;
  float v92;
  float v94;
  float v95;
  int v96;
  int v97;
  int v98;
  float v99;
  _BOOL4 v100;
  _BOOL4 v101;
  float *v102;
  float *v103;
  float v104;
  float v105;
  float v106;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  unint64_t v114;
  float v115;
  float v116;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  int v138;
  float v139;
  float v140;
  float v141;
  unint64_t v142;
  uint64_t v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  unint64_t v150;
  uint64_t v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float *v161;
  float *v162;
  float *v163;
  float *v164;
  float v165;
  float v166;
  float v167;
  _BOOL4 v168;
  _BOOL4 v169;
  float v170;
  float v171;
  _BOOL4 v172;
  _BOOL4 v173;
  float v174;
  float v175;
  _BOOL4 v176;
  _BOOL4 v177;
  float v178;
  unint64_t v179;
  int v180;
  _QWORD *i;
  uint64_t j;
  _QWORD *v183;
  _BOOL4 v184;
  _BOOL4 v185;
  _BOOL4 v186;
  float v187;
  float *v189;
  float *v190;
  float *v191;
  _BYTE v192[16];
  _BYTE v193[16];
  _BYTE v194[16];
  _BYTE v195[40];
  uint64_t v196;

  v196 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(*a3 + 8);
  v6 = malloc_type_malloc(8uLL, 0x7081ABB9uLL);
  if (!v6)
    goto LABEL_460;
  v7 = v6;
  v8 = a2[3] & 7;
  if (v8)
  {
    v9 = 0;
    v10 = 0;
    do
    {
      if (v9 < ((_DWORD)a2[3] & 7) + ((__int16)*((_DWORD *)a2 + 6) >> 15))
      {
        v11 = malloc_type_realloc(v7, 8 * (v10 + 1), 0x2BDC8648uLL);
        if (!v11)
          goto LABEL_460;
        v7 = v11;
        memset(&v195[8], 0, 32);
        v12 = a2[v9 + 5];
        *(_DWORD *)v195 = HIWORD(v12);
        *(_DWORD *)&v195[4] = (v12 >> 6) & 7;
        v13 = HashSetGet(v5, (uint64_t)v195);
        v7[v10] = v13;
        if (!v13)
        {
          GetRegisterTypeInfo(a1, (uint64_t)v195, v14);
          v15 = malloc_type_malloc(0x28uLL, 0x7081ABB9uLL);
          if (!v15)
            goto LABEL_460;
          v7[v10] = v15;
          v16 = *(_OWORD *)v195;
          v17 = *(_OWORD *)&v195[16];
          v15[4] = *(_QWORD *)&v195[32];
          *(_OWORD *)v15 = v16;
          *((_OWORD *)v15 + 1) = v17;
          HashSetAdd(v5, v7[v10]);
        }
        ++v10;
      }
      ++v9;
    }
    while (v8 != v9);
  }
  else
  {
    v10 = 0;
  }
  v18 = a2[4];
  if ((v18 & 0x78000) == 0)
  {
    v19 = 0;
    goto LABEL_18;
  }
  memset(&v195[8], 0, 32);
  *(_DWORD *)v195 = HIWORD(v18);
  *(_DWORD *)&v195[4] = (v18 >> 12) & 7;
  v19 = HashSetGet(v5, (uint64_t)v195);
  if (!v19)
  {
    GetRegisterTypeInfo(a1, (uint64_t)v195, v20);
    v21 = malloc_type_malloc(0x28uLL, 0x7081ABB9uLL);
    if (v21)
    {
      v19 = (uint64_t)v21;
      v22 = *(_OWORD *)v195;
      v23 = *(_OWORD *)&v195[16];
      v21[4] = *(_QWORD *)&v195[32];
      *(_OWORD *)v21 = v22;
      *((_OWORD *)v21 + 1) = v23;
      HashSetAdd(v5, (uint64_t)v21);
      goto LABEL_18;
    }
LABEL_460:
    abort();
  }
LABEL_18:
  memset(v195, 0, 24);
  if (!v10)
    goto LABEL_22;
  v24 = *v7 + 24;
  if (!*(_DWORD *)(*v7 + 20))
    v24 = 0;
  *(_QWORD *)v195 = v24;
  if (v10 != 1)
  {
    v25 = 0;
    v41 = v7[1];
    v42 = *(_DWORD *)(v41 + 20);
    v43 = v41 + 24;
    if (!v42)
      v43 = 0;
    *(_QWORD *)&v195[8] = v43;
    if (v10 >= 3)
    {
      v44 = v7[2];
      v45 = *(_DWORD *)(v44 + 20);
      v25 = v44 + 24;
      if (!v45)
        v25 = 0;
    }
  }
  else
  {
LABEL_22:
    v25 = 0;
    *(_QWORD *)&v195[8] = 0;
  }
  *(_QWORD *)&v195[16] = v25;
  v26 = (float *)v194;
  v27 = (float *)v193;
  v189 = (float *)v194;
  v190 = (float *)v193;
  v28 = (float *)v192;
  v191 = (float *)v192;
  if (v10 >= 3)
    v29 = 3;
  else
    v29 = v10;
  if (v29)
  {
    v30 = 0;
    v31 = a2 + 5;
    v32 = 8 * v29;
    do
    {
      v33 = *(_QWORD *)&v195[v30];
      if (v33)
      {
        v34 = (&v189)[v30 / 8];
        *v34 = *(float *)(v33 + 4 * ((v31[v30 / 8] >> 9) & 3));
        v34[1] = *(float *)(v33 + 4 * ((v31[v30 / 8] >> 11) & 3));
        v34[2] = *(float *)(v33 + 4 * ((v31[v30 / 8] >> 13) & 3));
        v34[3] = *(float *)(v33 + 4 * ((v31[v30 / 8] >> 15) & 3));
      }
      else
      {
        (&v189)[v30 / 8] = 0;
      }
      v30 += 8;
    }
    while (v32 != v30);
    v26 = v189;
    v27 = v190;
    v28 = v191;
  }
  if (IsBadUsage((uint64_t)a2))
  {
LABEL_34:
    LODWORD(v36) = 1;
    goto LABEL_35;
  }
  v37 = (float *)(v19 + 24);
  if (v10 == 1 && v19 && v26)
  {
    v38 = a2[3];
    v39 = (v38 >> 6);
    LODWORD(v36) = 1;
    if (v39 <= 0x6C)
    {
      switch((v38 >> 6))
      {
        case 0u:
          goto LABEL_324;
        case 1u:
          *(_DWORD *)(v19 + 24) = 1065353216;
          v40 = 0.0;
          *(float *)(v19 + 28) = fmaxf(*v26, 0.0);
          if (*v26 > 0.0)
            v40 = powf(v26[1], v26[3]);
          goto LABEL_131;
        case 2u:
          *(float *)(v19 + 24) = fabsf(*v26);
          *(float *)(v19 + 28) = fabsf(v26[1]);
          *(float *)(v19 + 32) = fabsf(v26[2]);
          v50 = fabsf(v26[3]);
          goto LABEL_325;
        case 3u:
          *(float *)(v19 + 24) = ceilf(*v26);
          *(float *)(v19 + 28) = ceilf(v26[1]);
          *(float *)(v19 + 32) = ceilf(v26[2]);
          v50 = ceilf(v26[3]);
          goto LABEL_325;
        case 4u:
          *(float *)(v19 + 24) = *v26 - floorf(*v26);
          *(float *)(v19 + 28) = v26[1] - floorf(v26[1]);
          *(float *)(v19 + 32) = v26[2] - floorf(v26[2]);
          v50 = v26[3] - floorf(v26[3]);
          goto LABEL_325;
        case 5u:
          *(float *)(v19 + 24) = floorf(*v26);
          *(float *)(v19 + 28) = floorf(v26[1]);
          *(float *)(v19 + 32) = floorf(v26[2]);
          v50 = floorf(v26[3]);
          goto LABEL_325;
        case 7u:
          v50 = 0.0;
          if (*v26 >= 0.0)
            v59 = 0.0;
          else
            v59 = -1.0;
          if (*v26 > 0.0)
            v59 = 1.0;
          *(float *)(v19 + 24) = v59;
          v60 = v26[1];
          v61 = v60 <= 0.0;
          if (v60 >= 0.0)
            v62 = 0.0;
          else
            v62 = -1.0;
          if (!v61)
            v62 = 1.0;
          *(float *)(v19 + 28) = v62;
          v63 = v26[2];
          v64 = v63 <= 0.0;
          if (v63 >= 0.0)
            v65 = 0.0;
          else
            v65 = -1.0;
          if (!v64)
            v65 = 1.0;
          *(float *)(v19 + 32) = v65;
          v66 = v26[3];
          if (v66 < 0.0)
            v50 = -1.0;
          if (v66 > 0.0)
            v50 = 1.0;
          goto LABEL_325;
        case 8u:
          if (*v26 == 0.0 && v26[1] == 0.0 && v26[2] == 0.0)
            goto LABEL_103;
          goto LABEL_178;
        case 9u:
          if (*v26 == 0.0 || v26[1] == 0.0 || v26[2] == 0.0)
            LODWORD(v36) = 0;
          else
LABEL_103:
            LODWORD(v36) = v26[3] != 0.0;
LABEL_178:
          v50 = (float)v36;
          goto LABEL_179;
        case 0xAu:
          v50 = 0.0;
          if (*v26 == 0.0)
            v67 = 1.0;
          else
            v67 = 0.0;
          *(float *)(v19 + 24) = v67;
          if (v26[1] == 0.0)
            v68 = 1.0;
          else
            v68 = 0.0;
          *(float *)(v19 + 28) = v68;
          if (v26[2] == 0.0)
            v69 = 1.0;
          else
            v69 = 0.0;
          *(float *)(v19 + 32) = v69;
          if (v26[3] == 0.0)
            v50 = 1.0;
          goto LABEL_325;
        case 0xCu:
          v50 = sqrtf(*v26);
          *v37 = v50;
          if ((v38 & 0x3000000000) == 0)
            break;
          *(float *)(v19 + 28) = sqrtf(v26[1]);
          *(float *)(v19 + 32) = sqrtf(v26[2]);
          v50 = sqrtf(v26[3]);
          goto LABEL_325;
        case 0xDu:
          v51 = 1.0;
          v50 = 1.0 / sqrtf(fabsf(*v26));
          *v37 = v50;
          if ((v38 & 0x3000000000) == 0)
            break;
          *(float *)(v19 + 28) = 1.0 / sqrtf(fabsf(v26[1]));
          *(float *)(v19 + 32) = 1.0 / sqrtf(fabsf(v26[2]));
          v52 = fabsf(v26[3]);
          goto LABEL_120;
        case 0xEu:
          v51 = 1.0;
          v50 = 1.0 / *v26;
          *v37 = v50;
          if ((v38 & 0x3000000000) == 0)
            break;
          *(float *)(v19 + 28) = 1.0 / v26[1];
          *(float *)(v19 + 32) = 1.0 / v26[2];
          v70 = v26[3];
          goto LABEL_123;
        case 0xFu:
          v71 = v26[3];
          *(float *)&v72 = 5.421e-20;
          if (v71 > 1.8447e19)
            goto LABEL_125;
          if (v71 >= 5.421e-20)
            goto LABEL_428;
          if (v71 >= 0.0)
          {
            *(float *)&v72 = 1.8447e19;
            goto LABEL_125;
          }
          *(float *)&v72 = -1.8447e19;
          if (v71 > -5.421e-20)
            goto LABEL_125;
          if (v71 < -1.8447e19)
          {
            *(float *)&v72 = -5.421e-20;
LABEL_125:
            v50 = *(float *)&v72;
            goto LABEL_179;
          }
LABEL_428:
          v50 = 1.0 / v71;
LABEL_179:
          *(float *)(v19 + 24) = v50;
          break;
        case 0x10u:
          v73 = *(unsigned __int16 *)a1;
          if ((v73 - 35632) < 2 || (v73 - 36487) < 2 || v73 == 36313)
          {
            *(float *)(v19 + 24) = exp2f(*v26);
            *(float *)(v19 + 28) = exp2f(v26[1]);
            *(float *)(v19 + 32) = exp2f(v26[2]);
            v50 = exp2f(v26[3]);
            goto LABEL_325;
          }
          v50 = exp2f(v26[3]);
          goto LABEL_179;
        case 0x11u:
          v74 = floorf(v26[3]);
          *(float *)(v19 + 24) = exp2f(v74);
          *(float *)(v19 + 28) = v26[3] - v74;
          v40 = exp2f(v26[3]);
LABEL_131:
          *(float *)(v19 + 32) = v40;
          goto LABEL_148;
        case 0x12u:
          v75 = ((v38 >> 36) & 3) + 1;
          v76 = 0.0;
          v77 = v26;
          do
          {
            v78 = *v77++;
            v76 = v76 + (float)(v78 * v78);
            --v75;
          }
          while (v75);
          v50 = sqrtf(v76);
          goto LABEL_179;
        case 0x13u:
          v79 = *(unsigned __int16 *)a1;
          if ((v79 - 35632) < 2 || (v79 - 36487) < 2 || v79 == 36313)
          {
            v80 = *v26;
            if (*v26 < 0.0)
              v80 = 0.0;
            *(float *)(v19 + 24) = log2f(v80);
            v81 = v26[1];
            if (v81 < 0.0)
              v81 = 0.0;
            *(float *)(v19 + 28) = log2f(v81);
            v82 = v26[2];
            if (v82 < 0.0)
              v82 = 0.0;
            *(float *)(v19 + 32) = log2f(v82);
            v83 = v26[3];
            if (v83 < 0.0)
              v83 = 0.0;
            v50 = log2f(v83);
            goto LABEL_325;
          }
          v187 = v26[3];
          if (v187 < 0.0)
            v187 = 0.0;
          v50 = log2f(v187);
          goto LABEL_179;
        case 0x14u:
          v84 = fabsf(v26[3]);
          v85 = log2f(v84);
          v86 = floorf(v85);
          *(float *)(v19 + 24) = v86;
          *(float *)(v19 + 28) = v84 / exp2f(v86);
          *(float *)(v19 + 32) = v85;
LABEL_148:
          v50 = 1.0;
          goto LABEL_325;
        case 0x15u:
          v87 = ((v38 >> 36) & 3) + 1;
          v88 = 0.0;
          v89 = v26;
          do
          {
            v90 = *v89++;
            v88 = v88 + (float)(v90 * v90);
            --v87;
          }
          while (v87);
          v91 = 0;
          v92 = sqrtf(v88);
          do
          {
            LODWORD(v36) = 0;
            v37[v91] = v26[v91] / v92;
          }
          while (v91++ < ((a2[3] >> 36) & 3uLL));
          goto LABEL_326;
        case 0x16u:
          v94 = *v26;
          v95 = 0.017453;
          goto LABEL_157;
        case 0x17u:
          v94 = *v26;
          v95 = 57.296;
LABEL_157:
          *(float *)(v19 + 24) = v94 * v95;
          *(float *)(v19 + 28) = v26[1] * v95;
          *(float *)(v19 + 32) = v26[2] * v95;
          v50 = v26[3] * v95;
          goto LABEL_325;
        case 0x18u:
          *(float *)(v19 + 24) = cosf(*v26);
          *(float *)(v19 + 28) = sinf(*v26);
          *(_DWORD *)(v19 + 32) = 0;
          v50 = 0.0;
          goto LABEL_325;
        case 0x19u:
          v96 = *(unsigned __int16 *)a1;
          if ((v96 - 35632) < 2 || (v96 - 36487) < 2 || v96 == 36313)
          {
            *(float *)(v19 + 24) = sinf(*v26);
            *(float *)(v19 + 28) = sinf(v26[1]);
            *(float *)(v19 + 32) = sinf(v26[2]);
            v50 = sinf(v26[3]);
            goto LABEL_325;
          }
          v50 = sinf(v26[3]);
          goto LABEL_179;
        case 0x1Au:
          v97 = *(unsigned __int16 *)a1;
          if ((v97 - 35632) < 2 || (v97 - 36487) < 2 || v97 == 36313)
          {
            *(float *)(v19 + 24) = cosf(*v26);
            *(float *)(v19 + 28) = cosf(v26[1]);
            *(float *)(v19 + 32) = cosf(v26[2]);
            v50 = cosf(v26[3]);
            goto LABEL_325;
          }
          v50 = cosf(v26[3]);
          goto LABEL_179;
        case 0x1Bu:
          *(float *)(v19 + 24) = tanf(*v26);
          *(float *)(v19 + 28) = tanf(v26[1]);
          *(float *)(v19 + 32) = tanf(v26[2]);
          v50 = tanf(v26[3]);
          goto LABEL_325;
        case 0x1Cu:
          *(float *)(v19 + 24) = asinf(*v26);
          *(float *)(v19 + 28) = asinf(v26[1]);
          *(float *)(v19 + 32) = asinf(v26[2]);
          v50 = asinf(v26[3]);
          goto LABEL_325;
        case 0x1Du:
          *(float *)(v19 + 24) = acosf(*v26);
          *(float *)(v19 + 28) = acosf(v26[1]);
          *(float *)(v19 + 32) = acosf(v26[2]);
          v50 = acosf(v26[3]);
          goto LABEL_325;
        case 0x1Eu:
          *(float *)(v19 + 24) = atanf(*v26);
          *(float *)(v19 + 28) = atanf(v26[1]);
          *(float *)(v19 + 32) = atanf(v26[2]);
          v50 = atanf(v26[3]);
          goto LABEL_325;
        case 0x48u:
          *(float *)(v19 + 24) = *v26;
          *(float *)(v19 + 28) = *v26;
          *(float *)(v19 + 32) = *v26;
          v50 = *v26;
          goto LABEL_325;
        default:
          goto LABEL_326;
      }
LABEL_180:
      *(float *)(v19 + 28) = v50;
      *(float *)(v19 + 32) = v50;
      goto LABEL_325;
    }
    if ((v38 >> 6) > 0x70u)
    {
      if (v39 == 113)
      {
        *(float *)(v19 + 24) = logf(*v26);
        *(float *)(v19 + 28) = logf(v26[1]);
        *(float *)(v19 + 32) = logf(v26[2]);
        v50 = logf(v26[3]);
        goto LABEL_325;
      }
      if (v39 == 134)
      {
        v51 = 1.0;
        v50 = 1.0 / sqrtf(*v26);
        *v37 = v50;
        if ((v38 & 0x3000000000) != 0)
        {
          *(float *)(v19 + 28) = 1.0 / sqrtf(v26[1]);
          *(float *)(v19 + 32) = 1.0 / sqrtf(v26[2]);
          v52 = v26[3];
LABEL_120:
          v70 = sqrtf(v52);
LABEL_123:
          v50 = v51 / v70;
          goto LABEL_325;
        }
        goto LABEL_180;
      }
    }
    else
    {
      if (v39 == 109)
      {
        v98 = *(_DWORD *)(v19 + 12);
        if (v98 == 1)
        {
          if ((*(_DWORD *)(*v7 + 12) | 2) == 2)
          {
            v50 = 0.0;
            if (*v26 == 0.0)
              v139 = 0.0;
            else
              v139 = 1.0;
            *(float *)(v19 + 24) = v139;
            if (v26[1] == 0.0)
              v140 = 0.0;
            else
              v140 = 1.0;
            *(float *)(v19 + 28) = v140;
            if (v26[2] == 0.0)
              v141 = 0.0;
            else
              v141 = 1.0;
            *(float *)(v19 + 32) = v141;
            if (v26[3] != 0.0)
              v50 = 1.0;
            goto LABEL_325;
          }
        }
        else if (v98 == 2 && !*(_DWORD *)(*v7 + 12))
        {
          *(float *)(v19 + 24) = truncf(*v26);
          *(float *)(v19 + 28) = truncf(v26[1]);
          *(float *)(v19 + 32) = truncf(v26[2]);
          v50 = truncf(v26[3]);
          goto LABEL_325;
        }
LABEL_324:
        *(float *)(v19 + 24) = *v26;
        *(float *)(v19 + 28) = v26[1];
        *(float *)(v19 + 32) = v26[2];
        v50 = v26[3];
        goto LABEL_325;
      }
      if (v39 == 112)
      {
        *(float *)(v19 + 24) = expf(*v26);
        *(float *)(v19 + 28) = expf(v26[1]);
        *(float *)(v19 + 32) = expf(v26[2]);
        v50 = expf(v26[3]);
LABEL_325:
        LODWORD(v36) = 0;
        *(float *)(v19 + 36) = v50;
      }
    }
LABEL_326:
    v46 = v27 != 0;
    goto LABEL_327;
  }
  v46 = v27 != 0;
  LODWORD(v36) = 1;
  if (v10 == 2 && v19 && v26 && v27)
  {
    v47 = a2[3];
    v48 = (v47 >> 6);
    v46 = 1;
    LODWORD(v36) = 1;
    switch((v47 >> 6))
    {
      case 0x1Eu:
        *(float *)(v19 + 24) = atan2f(*v26, *v27);
        *(float *)(v19 + 28) = atan2f(v26[1], v27[1]);
        *(float *)(v19 + 32) = atan2f(v26[2], v27[2]);
        v99 = atan2f(v26[3], v27[3]);
        goto LABEL_300;
      case 0x1Fu:
        LODWORD(v36) = 0;
        *(float *)(v19 + 24) = *v26 + *v27;
        *(float *)(v19 + 28) = v26[1] + v27[1];
        *(float *)(v19 + 32) = v26[2] + v27[2];
        v49 = v26[3] + v27[3];
        goto LABEL_450;
      case 0x20u:
        LODWORD(v36) = 0;
        *(float *)(v19 + 24) = *v26 - *v27;
        *(float *)(v19 + 28) = v26[1] - v27[1];
        *(float *)(v19 + 32) = v26[2] - v27[2];
        v49 = v26[3] - v27[3];
        goto LABEL_450;
      case 0x21u:
        break;
      case 0x22u:
      case 0x23u:
        LODWORD(v36) = 0;
        *(float *)(v19 + 24) = *v26 * *v27;
        *(float *)(v19 + 28) = v26[1] * v27[1];
        *(float *)(v19 + 32) = v26[2] * v27[2];
        v49 = v26[3] * v27[3];
        goto LABEL_450;
      case 0x24u:
        v100 = *v26 != 0.0 && *v27 != 0.0;
        *v37 = (float)v100;
        v184 = v26[1] != 0.0 && v27[1] != 0.0;
        *(float *)(v19 + 28) = (float)v184;
        v186 = v26[2] != 0.0 && v27[2] != 0.0;
        *(float *)(v19 + 32) = (float)v186;
        if (v26[3] != 0.0)
          goto LABEL_443;
        v46 = 0;
        goto LABEL_445;
      case 0x25u:
        if (*v26 == 0.0)
          LODWORD(v36) = *v27 != 0.0;
        *v37 = (float)v36;
        v101 = v26[1] != 0.0 || v27[1] != 0.0;
        *(float *)(v19 + 28) = (float)v101;
        v185 = v26[2] != 0.0 || v27[2] != 0.0;
        *(float *)(v19 + 32) = (float)v185;
        if (v26[3] == 0.0)
LABEL_443:
          v46 = v27[3] != 0.0;
LABEL_445:
        LODWORD(v36) = 0;
        goto LABEL_446;
      case 0x26u:
        LODWORD(v36) = 0;
        *(float *)(v19 + 24) = (float)((*v26 != 0.0) ^ (*v27 != 0.0));
        *(float *)(v19 + 28) = (float)((v26[1] != 0.0) ^ (v27[1] != 0.0));
        *(float *)(v19 + 32) = (float)((v26[2] != 0.0) ^ (v27[2] != 0.0));
        v46 = (v26[3] != 0.0) ^ (v27[3] != 0.0);
LABEL_446:
        v99 = (float)v46;
        goto LABEL_447;
      case 0x27u:
        v36 = ((v47 >> 36) & 3) + 1;
        v35.i32[0] = 0;
        v102 = v26;
        v103 = v27;
        do
        {
          v104 = *v102++;
          v105 = v104;
          v106 = *v103++;
          *(float *)v35.i32 = *(float *)v35.i32 + (float)(v105 * v106);
          --v36;
        }
        while (v36);
        goto LABEL_193;
      case 0x28u:
        LODWORD(v36) = 0;
        *(float *)v35.i32 = (float)((float)(v26[1] * v27[1]) + (float)(*v26 * *v27)) + (float)(v26[2] * v27[2]);
        goto LABEL_197;
      case 0x29u:
        LODWORD(v36) = 0;
        *(float *)v35.i32 = (float)((float)((float)(v26[1] * v27[1]) + (float)(*v26 * *v27)) + (float)(v26[2] * v27[2]))
                          + (float)(v26[3] * v27[3]);
        goto LABEL_197;
      case 0x2Au:
        LODWORD(v36) = 0;
        *(float *)v35.i32 = (float)((float)((float)(v26[1] * v27[1]) + (float)(*v26 * *v27)) + (float)(v26[2] * v27[2]))
                          + v27[3];
LABEL_197:
        _Q0 = vdupq_lane_s32(v35, 0);
        goto LABEL_222;
      case 0x2Bu:
        LODWORD(v36) = 0;
        *(_DWORD *)(v19 + 24) = 1065353216;
        *(float *)(v19 + 28) = v26[1] * v27[1];
        *(float *)(v19 + 32) = v26[2];
        v99 = v27[3];
        goto LABEL_447;
      case 0x2Cu:
        LODWORD(v36) = 0;
        v108 = *v26;
        if (*v26 >= *v27)
          v108 = *v27;
        *(float *)(v19 + 24) = v108;
        v109 = v26[1];
        if (v109 >= v27[1])
          v109 = v27[1];
        *(float *)(v19 + 28) = v109;
        v110 = v26[2];
        if (v110 >= v27[2])
          v110 = v27[2];
        *(float *)(v19 + 32) = v110;
        v49 = v26[3];
        if (v49 >= v27[3])
          v49 = v27[3];
        goto LABEL_450;
      case 0x2Du:
        LODWORD(v36) = 0;
        v111 = *v26;
        if (*v26 <= *v27)
          v111 = *v27;
        *(float *)(v19 + 24) = v111;
        v112 = v26[1];
        if (v112 <= v27[1])
          v112 = v27[1];
        *(float *)(v19 + 28) = v112;
        v113 = v26[2];
        if (v113 <= v27[2])
          v113 = v27[2];
        *(float *)(v19 + 32) = v113;
        v49 = v26[3];
        if (v49 <= v27[3])
          v49 = v27[3];
        goto LABEL_450;
      case 0x2Eu:
        LODWORD(v36) = 0;
        *(float *)(v19 + 24) = (float)(v26[1] * v27[2]) - (float)(v27[1] * v26[2]);
        *(float *)(v19 + 28) = (float)(v26[2] * *v27) - (float)(v27[2] * *v26);
        *(float *)(v19 + 32) = (float)(*v26 * v27[1]) - (float)(*v27 * v26[1]);
        *(_DWORD *)(v19 + 36) = 0;
        break;
      case 0x2Fu:
        v114 = 0;
        v115 = 0.0;
        do
        {
          v115 = v115 + (float)(v26[v114 / 4] * v27[v114 / 4]);
          v114 += 4;
        }
        while (4 * ((v47 >> 36) & 3) + 4 != v114);
        LODWORD(v36) = 0;
        v116 = v115 * -2.0;
        *(float *)(v19 + 24) = *v26 + (float)(v116 * *v27);
        *(float *)(v19 + 28) = v26[1] + (float)(v116 * v27[1]);
        *(float *)(v19 + 32) = v26[2] + (float)(v116 * v27[2]);
        v99 = v26[3] + (float)(v116 * v27[3]);
        goto LABEL_447;
      case 0x30u:
        LODWORD(v36) = 0;
        __asm { FMOV            V0.4S, #1.0 }
LABEL_222:
        *(int32x4_t *)v37 = _Q0;
        break;
      case 0x31u:
        LODWORD(v36) = 0;
        v49 = 0.0;
        if (*v26 == *v27)
          v120 = 1.0;
        else
          v120 = 0.0;
        *(float *)(v19 + 24) = v120;
        if (v26[1] == v27[1])
          v121 = 1.0;
        else
          v121 = 0.0;
        *(float *)(v19 + 28) = v121;
        if (v26[2] == v27[2])
          v122 = 1.0;
        else
          v122 = 0.0;
        *(float *)(v19 + 32) = v122;
        if (v26[3] == v27[3])
          v49 = 1.0;
        goto LABEL_450;
      case 0x32u:
        LODWORD(v36) = 0;
        v49 = 0.0;
        if (*v26 < *v27)
          v123 = 0.0;
        else
          v123 = 1.0;
        *(float *)(v19 + 24) = v123;
        if (v26[1] < v27[1])
          v124 = 0.0;
        else
          v124 = 1.0;
        *(float *)(v19 + 28) = v124;
        if (v26[2] < v27[2])
          v125 = 0.0;
        else
          v125 = 1.0;
        *(float *)(v19 + 32) = v125;
        if (v26[3] >= v27[3])
          v49 = 1.0;
        goto LABEL_450;
      case 0x33u:
        LODWORD(v36) = 0;
        v49 = 0.0;
        if (*v26 <= *v27)
          v126 = 0.0;
        else
          v126 = 1.0;
        *(float *)(v19 + 24) = v126;
        if (v26[1] <= v27[1])
          v127 = 0.0;
        else
          v127 = 1.0;
        *(float *)(v19 + 28) = v127;
        if (v26[2] <= v27[2])
          v128 = 0.0;
        else
          v128 = 1.0;
        *(float *)(v19 + 32) = v128;
        if (v26[3] > v27[3])
          v49 = 1.0;
        goto LABEL_450;
      case 0x34u:
        LODWORD(v36) = 0;
        v49 = 0.0;
        if (*v26 > *v27)
          v129 = 0.0;
        else
          v129 = 1.0;
        *(float *)(v19 + 24) = v129;
        if (v26[1] > v27[1])
          v130 = 0.0;
        else
          v130 = 1.0;
        *(float *)(v19 + 28) = v130;
        if (v26[2] > v27[2])
          v131 = 0.0;
        else
          v131 = 1.0;
        *(float *)(v19 + 32) = v131;
        if (v26[3] <= v27[3])
          v49 = 1.0;
        goto LABEL_450;
      case 0x35u:
        LODWORD(v36) = 0;
        v49 = 0.0;
        if (*v26 >= *v27)
          v132 = 0.0;
        else
          v132 = 1.0;
        *(float *)(v19 + 24) = v132;
        if (v26[1] >= v27[1])
          v133 = 0.0;
        else
          v133 = 1.0;
        *(float *)(v19 + 28) = v133;
        if (v26[2] >= v27[2])
          v134 = 0.0;
        else
          v134 = 1.0;
        *(float *)(v19 + 32) = v134;
        if (v26[3] < v27[3])
          v49 = 1.0;
        goto LABEL_450;
      case 0x36u:
        LODWORD(v36) = 0;
        v49 = 0.0;
        if (*v26 == *v27)
          v135 = 0.0;
        else
          v135 = 1.0;
        *(float *)(v19 + 24) = v135;
        if (v26[1] == v27[1])
          v136 = 0.0;
        else
          v136 = 1.0;
        *(float *)(v19 + 28) = v136;
        if (v26[2] == v27[2])
          v137 = 0.0;
        else
          v137 = 1.0;
        *(float *)(v19 + 32) = v137;
        if (v26[3] != v27[3])
          v49 = 1.0;
        goto LABEL_450;
      case 0x37u:
        LODWORD(v36) = 0;
        *(_QWORD *)v37 = 0;
        *(_QWORD *)(v19 + 32) = 0;
        break;
      case 0x38u:
        v138 = *(unsigned __int16 *)a1;
        if ((v138 - 35632) >= 2 && (v138 - 36487) >= 2 && v138 != 36313)
        {
          *(float *)v35.i32 = powf(v26[3], v27[3]);
          LODWORD(v36) = 0;
          goto LABEL_193;
        }
        *(float *)(v19 + 24) = powf(*v26, *v27);
        *(float *)(v19 + 28) = powf(v26[1], v27[1]);
        *(float *)(v19 + 32) = powf(v26[2], v27[2]);
        v99 = powf(v26[3], v27[3]);
LABEL_300:
        LODWORD(v36) = 0;
LABEL_447:
        *(float *)(v19 + 36) = v99;
        goto LABEL_448;
      case 0x39u:
        LODWORD(v36) = 0;
        *(float *)(v19 + 24) = v26[*v27];
        *(float *)(v19 + 28) = v26[*v27];
        *(float *)(v19 + 32) = v26[*v27];
        v99 = v26[*v27];
        goto LABEL_447;
      case 0x3Au:
        LODWORD(v36) = *(_DWORD *)(v19 + 12);
        if ((_DWORD)v36 == 2)
        {
          LODWORD(v36) = 0;
          *(float *)(v19 + 24) = truncf(*v26 / *v27);
          *(float *)(v19 + 28) = truncf(v26[1] / v27[1]);
          *(float *)(v19 + 32) = truncf(v26[2] / v27[2]);
          v49 = truncf(v26[3] / v27[3]);
        }
        else
        {
          if ((_DWORD)v36)
          {
            LODWORD(v36) = 0;
            break;
          }
          *(float *)(v19 + 24) = *v26 / *v27;
          *(float *)(v19 + 28) = v26[1] / v27[1];
          *(float *)(v19 + 32) = v26[2] / v27[2];
          v49 = v26[3] / v27[3];
        }
LABEL_450:
        *(float *)(v19 + 36) = v49;
        break;
      default:
        if (v48 == 110)
        {
          LODWORD(v36) = 0;
          v37[*v27] = v26[*v27];
        }
        else
        {
          LODWORD(v36) = 1;
          if (v48 != 133)
            break;
          v36 = ((v47 >> 36) & 3) + 1;
          v53 = 0.0;
          v54 = v26;
          v55 = v27;
          do
          {
            v56 = *v54++;
            v57 = v56;
            v58 = *v55++;
            v53 = v53 + (float)((float)(v57 - v58) * (float)(v57 - v58));
            --v36;
          }
          while (v36);
          *(float *)v35.i32 = sqrtf(v53);
LABEL_193:
          *(int32x4_t *)v37 = vdupq_lane_s32(v35, 0);
        }
LABEL_448:
        v46 = 1;
        break;
    }
  }
LABEL_327:
  if (v19 && (_DWORD)v36 && v10 == 3 && v26 && v46 && v28)
  {
    v142 = a2[3];
    switch((v142 >> 6))
    {
      case ';':
        v143 = ((v142 >> 36) & 3) + 1;
        v144 = 0.0;
        do
        {
          v145 = *v28++;
          v146 = v145;
          v147 = *v27++;
          v144 = v144 + (float)(v146 * v147);
          --v143;
        }
        while (v143);
        v148 = *v26;
        if (v144 >= 0.0)
        {
          *(float *)(v19 + 24) = -v148;
          *(float *)(v19 + 28) = -v26[1];
          *(float *)(v19 + 32) = -v26[2];
          v149 = -v26[3];
        }
        else
        {
          *(float *)(v19 + 24) = v148;
          *(float *)(v19 + 28) = v26[1];
          *(float *)(v19 + 32) = v26[2];
          v149 = v26[3];
        }
        goto LABEL_408;
      case '<':
        *(float *)(v19 + 24) = (float)((float)(1.0 - *v26) * *v28) + (float)(*v26 * *v27);
        *(float *)(v19 + 28) = (float)((float)(1.0 - v26[1]) * v28[1]) + (float)(v26[1] * v27[1]);
        *(float *)(v19 + 32) = (float)((float)(1.0 - v26[2]) * v28[2]) + (float)(v26[2] * v27[2]);
        v158 = v26[3];
        v159 = v27[3];
        v160 = (float)(1.0 - v158) * v28[3];
        goto LABEL_362;
      case '=':
        v155 = *v26;
        if (*v26 <= *v27)
          v155 = *v27;
        if (v155 >= *v28)
          v155 = *v28;
        *(float *)(v19 + 24) = v155;
        v156 = v26[1];
        if (v156 <= v27[1])
          v156 = v27[1];
        if (v156 >= v28[1])
          v156 = v28[1];
        *(float *)(v19 + 28) = v156;
        v157 = v26[2];
        if (v157 <= v27[2])
          v157 = v27[2];
        if (v157 >= v28[2])
          v157 = v28[2];
        *(float *)(v19 + 32) = v157;
        v149 = v26[3];
        if (v149 <= v27[3])
          v149 = v27[3];
        if (v149 >= v28[3])
          v149 = v28[3];
        goto LABEL_408;
      case '>':
        if (*v26 >= 0.0)
          v161 = v28;
        else
          v161 = v27;
        *(float *)(v19 + 24) = *v161;
        if (v26[1] >= 0.0)
          v162 = v28;
        else
          v162 = v27;
        *(float *)(v19 + 28) = v162[1];
        if (v26[2] >= 0.0)
          v163 = v28;
        else
          v163 = v27;
        *(float *)(v19 + 32) = v163[2];
        if (v26[3] >= 0.0)
          v164 = v28;
        else
          v164 = v27;
        v149 = v164[3];
        goto LABEL_408;
      case '?':
        *(float *)(v19 + 24) = *v28 + (float)(*v26 * *v27);
        *(float *)(v19 + 28) = v28[1] + (float)(v26[1] * v27[1]);
        *(float *)(v19 + 32) = v28[2] + (float)(v26[2] * v27[2]);
        v158 = v26[3];
        v159 = v27[3];
        v160 = v28[3];
LABEL_362:
        v149 = v160 + (float)(v158 * v159);
        goto LABEL_408;
      case '@':
        v165 = 0.0;
        v166 = fminf(fmaxf((float)(*v28 - *v26) / (float)(*v27 - *v26), 0.0), 1.0);
        *(float *)(v19 + 24) = (float)(v166 * v166) * (float)((float)(v166 * -2.0) + 3.0);
        v167 = (float)(v28[1] - v26[1]) / (float)(v27[1] - v26[1]);
        v168 = v167 <= 0.0;
        v169 = v167 < 1.0 || v167 <= 0.0;
        if (v167 >= 1.0)
          v168 = 1;
        if (v169)
          v170 = 0.0;
        else
          v170 = 1.0;
        if (v168)
          v167 = v170;
        *(float *)(v19 + 28) = (float)(v167 * v167) * (float)((float)(v167 * -2.0) + 3.0);
        v171 = (float)(v28[2] - v26[2]) / (float)(v27[2] - v26[2]);
        v172 = v171 <= 0.0;
        v173 = v171 < 1.0 || v171 <= 0.0;
        if (v171 >= 1.0)
          v172 = 1;
        if (v173)
          v174 = 0.0;
        else
          v174 = 1.0;
        if (v172)
          v171 = v174;
        *(float *)(v19 + 32) = (float)(v171 * v171) * (float)((float)(v171 * -2.0) + 3.0);
        v175 = (float)(v28[3] - v26[3]) / (float)(v27[3] - v26[3]);
        v176 = v175 <= 0.0;
        v177 = v175 < 1.0 || v175 <= 0.0;
        if (v175 >= 1.0)
          v176 = 1;
        if (!v177)
          v165 = 1.0;
        if (v176)
          v175 = v165;
        v149 = (float)(v175 * v175) * (float)((float)(v175 * -2.0) + 3.0);
        goto LABEL_408;
      default:
        if ((v142 >> 6) != 105)
          goto LABEL_34;
        v150 = 0;
        v151 = 4 * ((v142 >> 36) & 3) + 4;
        v152 = 0.0;
        do
        {
          v152 = v152 + (float)(v26[v150 / 4] * v27[v150 / 4]);
          v150 += 4;
        }
        while (v151 != v150);
        v153 = *v28;
        v154 = (float)((float)-(float)(v153 * v153) * (float)(1.0 - (float)(v152 * v152))) + 1.0;
        if (v154 >= 0.0)
        {
          v178 = sqrtf(v154) + (float)(v153 * v152);
          *(float *)(v19 + 24) = (float)(v153 * *v26) - (float)(v178 * *v27);
          *(float *)(v19 + 28) = (float)(*v28 * v26[1]) - (float)(v178 * v27[1]);
          *(float *)(v19 + 32) = (float)(*v28 * v26[2]) - (float)(v178 * v27[2]);
          v149 = (float)(*v28 * v26[3]) - (float)(v178 * v27[3]);
LABEL_408:
          *(float *)(v19 + 36) = v149;
        }
        else
        {
          *(_QWORD *)v37 = 0;
          *(_QWORD *)(v19 + 32) = 0;
        }
        break;
    }
LABEL_409:
    *(_DWORD *)(v19 + 20) = 1;
    goto LABEL_410;
  }
LABEL_35:
  if (v19 && (_DWORD)v36)
  {
    ClearDestedOpRegisters((uint64_t)a1, v5, (uint64_t)a2, 0);
    goto LABEL_410;
  }
  if (v19)
    goto LABEL_409;
LABEL_410:
  v179 = a2[3];
  v180 = (v179 >> 6);
  switch((v179 >> 6))
  {
    case 'K':
    case 'L':
    case 'M':
    case 'T':
    case 'j':
    case 'r':
    case 's':
    case 't':
      goto LABEL_416;
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'S':
    case '\\':
    case ']':
    case '^':
    case '_':
    case 'a':
    case 'b':
    case 'c':
    case 'd':
    case 'e':
    case 'f':
    case 'g':
    case 'h':
    case 'i':
    case 'm':
    case 'n':
    case 'o':
    case 'p':
    case 'q':
      break;
    case 'U':
      EmulationContext_PushRegistersCopy(a3);
      v183 = *(_QWORD **)PPStreamChunkListChunkAtIndex(a1[13], a2[3] >> 46);
      if (v183 && (v183[3] & 0x3FC0) == 0x1600)
      {
        v183 = *(_QWORD **)PPStreamChunkListChunkAtIndex(a1[13], v183[3] >> 46);
        EmulationContext_PushRegistersCopy(a3);
      }
      for (; a2 != v183; a2 = (_QWORD *)a2[1])
        ClearDestedOpRegisters((uint64_t)a1, v5, (uint64_t)a2, 1);
      break;
    case 'V':
    case 'W':
    case 'k':
      for (i = *(_QWORD **)PPStreamChunkListChunkAtIndex(a1[13], v179 >> 46); a2 != i; a2 = (_QWORD *)a2[1])
        ClearDestedOpRegisters((uint64_t)a1, v5, (uint64_t)a2, 1);
      break;
    case 'X':
    case 'Y':
      EmulationContext_PopRegisters((_QWORD **)a3);
      break;
    case 'Z':
    case '[':
    case 'l':
      for (j = *(_QWORD *)PPStreamChunkListChunkAtIndex(a1[13], v179 >> 46); (_QWORD *)j != a2; j = *(_QWORD *)(j + 8))
        ClearDestedOpRegisters((uint64_t)a1, v5, j, 1);
      break;
    default:
      if ((v180 - 135) <= 8 && ((1 << (v180 + 121)) & 0x1E3) != 0)
LABEL_416:
        ClearRegisterState(v5);
      break;
  }
  free(v7);
}

void UnrollConstantLoopSimple(uint64_t a1, _QWORD *a2, uint64_t a3, int a4)
{
  char *v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  BOOL v11;
  char *v12;
  char *inserted;
  char *v15;
  uint64_t v16;
  BOOL v17;
  BOOL v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  int v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v7 = (char *)a3;
  if (a4 >= 1)
  {
    v8 = a4;
    v9 = HashTableNew((*(_DWORD *)(*(_QWORD *)(a1 + 104) + 16) >> 5) + 1, (unint64_t (*)(unint64_t))instructionIndexHashFunction, instructionIndexEqualsFunction);
    v7 = (char *)a3;
    do
    {
      v10 = a2[1];
      v11 = v10 == 0;
      v12 = 0;
      while (!v11 && v10 != a3)
      {
        inserted = PPStreamInsertOperationAfterChunk(a1, v10 + 24, 0, (uint64_t)v7);
        v7 = inserted;
        if (!v12)
          v12 = inserted;
        HashTableAdd(v9, (*(_DWORD *)(v10 + 88) + 1), (*((_DWORD *)inserted + 22) + 1));
        v10 = *(_QWORD *)(v10 + 8);
        v11 = v10 == 0;
      }
      v30 = 0;
      v28 = 0u;
      v29 = 0u;
      v26 = 0u;
      v27 = 0u;
      v25 = 7104;
      v7 = PPStreamInsertOperationAfterChunk(a1, (uint64_t)&v25, 0, (uint64_t)v7);
      HashTableAdd(v9, (*(_DWORD *)(a3 + 88) + 1), (*((_DWORD *)v7 + 22) + 1));
      if (v12)
        v15 = v12;
      else
        v15 = v7;
      if (v15 && v15 != v7)
      {
        do
        {
          v16 = HashTableGet(v9, (*((_QWORD *)v15 + 3) >> 46) + 1);
          if (v16)
            *((_QWORD *)v15 + 3) = (*((_QWORD *)v15 + 3) & 0x3FFFFFFFFFFFLL | ((unint64_t)v16 << 46))
                                 - 0x400000000000;
          v15 = (char *)*((_QWORD *)v15 + 1);
          if (v15)
            v17 = v15 == v7;
          else
            v17 = 1;
        }
        while (!v17);
      }
      v18 = __OFSUB__(v8--, 1);
    }
    while (!((v8 < 0) ^ v18 | (v8 == 0)));
    HashTableFree(v9);
  }
  v19 = *(_QWORD **)(a3 + 8);
  v20 = (_QWORD *)*((_QWORD *)v7 + 1);
  if (v19 != v20)
  {
    do
    {
      v21 = (_QWORD *)v19[1];
      v22 = (*((_DWORD *)v19 + 6) >> 6);
      if (v22 == 115 || v22 == 111)
        PPStreamRemoveOperation(a1, v19);
      v19 = v21;
    }
    while (v21 != v20);
  }
  if ((v20[3] & 0x3FC0) == 0x1D00)
    PPStreamRemoveOperation(a1, v20);
  v23 = *(_QWORD **)(a3 + 8);
  if (v23 != a2)
  {
    do
    {
      v24 = (_QWORD *)a2[1];
      PPStreamRemoveOperation(a1, a2);
      a2 = v24;
    }
    while (v24 != v23);
  }
}

uint64_t instructionIndexEqualsFunction(int a1, int a2)
{
  return (a1 - a2);
}

uint64_t RepifyConstantLoopSimple(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  unsigned int v8;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  _DWORD v18[2];
  __int128 v19;
  __int128 v20;
  _QWORD *v21[4];

  v8 = (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 16) >> 5) + 1;
  v21[0] = 0;
  v21[1] = (_QWORD *)v8;
  v21[2] = regHashFunction;
  v21[3] = regEqualsFunction;
  v9 = HashSetNew(v8, (unint64_t (*)(unint64_t))regHashFunction, (uint64_t (*)(int, int))regEqualsFunction);
  EmulationContext_PushRegisters((uint64_t *)v21, (uint64_t)v9);
  v10 = 0;
  v11 = *(_QWORD *)(a2 + 8);
  v12 = 1;
  if (v11 && v11 != a3)
  {
    v13 = v21[0][1];
    while (1)
    {
      v14 = (*(_DWORD *)(v11 + 24) >> 6);
      if (v14 == 87 || v14 == 72)
      {
        v19 = 0u;
        v20 = 0u;
        v15 = *(_QWORD *)(v11 + 40);
        v18[0] = HIWORD(v15);
        v18[1] = (v15 >> 6) & 7;
        v16 = HashSetGet(v13, (uint64_t)v18);
        if (!v16 || !*(_DWORD *)(v16 + 20))
          break;
      }
      EmulateOp((uint64_t **)a1, (_QWORD *)v11, (uint64_t *)v21);
      v10 = 0;
      v11 = *(_QWORD *)(v11 + 8);
      if (!v11 || v11 == a3)
        goto LABEL_13;
    }
    v12 = 0;
    v10 = 1;
  }
LABEL_13:
  while (v21[0])
    EmulationContext_PopRegisters(v21);
  if ((v10 & 1) == 0)
  {
    *(_QWORD *)(a2 + 40) = *(_QWORD *)(a2 + 40) & 0xFFFFFFFFFFFFFE3FLL | 0x80;
    *(_WORD *)(a2 + 46) = AddConstantParam(a1, 0, 0, 0, COERCE_UNSIGNED_INT((float)a4), 0);
  }
  return v12;
}

uint64_t AddConstantParam(uint64_t a1, int a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  uint64_t v16;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;

  v20 = 0;
  v21 = 0;
  if (a3)
  {
    LODWORD(v20) = (int)*(float *)&a5;
    HIDWORD(v20) = (int)*((float *)&a5 + 1);
    LODWORD(v21) = (int)*(float *)&a6;
    HIDWORD(v21) = (int)*((float *)&a6 + 1);
  }
  else
  {
    v20 = a5;
    v21 = a6;
  }
  if (a4 <= 2)
    bzero((char *)&v20 + 4 * a4 + 4, 4 * (2 - a4) + 4);
  v10 = *(uint64_t **)(a1 + 56);
  v11 = *v10;
  if (*v10)
  {
    while (1)
    {
      v12 = *(_QWORD *)(v11 + 24);
      v13 = (v12 & 0x1F00) == 0x600 && ((v12 >> 3) & 7) == a3;
      v14 = v13 && (v12 & 7) == a2;
      if (v14 && v12 >> 6 == a4)
      {
        v16 = PPStreamChunkListChunkAtIndex(*(uint64_t **)(a1 + 128), WORD2(v12));
        if (v20 == *(_QWORD *)(v16 + 24) && v21 == *(_QWORD *)(v16 + 32))
          return *(unsigned int *)(v11 + 32);
      }
      v11 = *(_QWORD *)(v11 + 8);
      if (!v11)
      {
        v10 = *(uint64_t **)(a1 + 56);
        goto LABEL_25;
      }
    }
  }
  else
  {
LABEL_25:
    *((_QWORD *)&v19 + 1) = PPStreamChunkListGetNextIndex(v10);
    *(_QWORD *)&v19 = a2 & 7 | (8 * (a3 & 7)) & 0x3F | ((a4 & 3) << 6) | 0x600u | ((unint64_t)*(unsigned __int16 *)(*(_QWORD *)(a1 + 128) + 16) << 32);
    PPStreamAddConstant(a1, &v20);
    PPStreamAddParamBinding(a1, &v19);
    return DWORD2(v19);
  }
}

void ConstantPropagateFold(uint64_t a1)
{
  unsigned int v2;
  _QWORD *v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  _OWORD v23[3];
  _QWORD *v24[4];

  v2 = (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 16) >> 5) + 1;
  v24[0] = 0;
  v24[1] = (_QWORD *)v2;
  v24[2] = regHashFunction;
  v24[3] = regEqualsFunction;
  v3 = HashSetNew(v2, (unint64_t (*)(unint64_t))regHashFunction, (uint64_t (*)(int, int))regEqualsFunction);
  EmulationContext_PushRegisters((uint64_t *)v24, (uint64_t)v3);
  for (i = **(_QWORD **)(a1 + 104); i; i = *(_QWORD *)(i + 8))
  {
    v5 = v24[0][1];
    v6 = *(_QWORD *)(i + 24) & 7;
    if (v6)
    {
      v7 = 0;
      v8 = i + 40;
      do
      {
        if (v7 < (*(_DWORD *)(i + 24) & 7) + ((__int16)*(_DWORD *)(i + 24) >> 15))
        {
          v9 = *(_QWORD *)(v8 + 8 * v7);
          if ((v9 & 1) != 0)
          {
            memset((char *)v23 + 8, 0, 32);
            *(_QWORD *)&v23[0] = 0x400000000;
            v10 = HashSetGet(v5, (uint64_t)v23);
            if (v10)
            {
              if (*(_DWORD *)(v10 + 20))
              {
                v11 = *(_QWORD *)(v8 + 8 * v7);
                v12 = (int)*(float *)(v10 + 24);
                v13 = HIWORD(v11) + ((int)v11 >> 24);
                v14 = (v13 + v12);
                if (GetRegChunk((uint64_t **)a1, (v11 >> 6) & 7, v13 + v12))
                  *(_QWORD *)(v8 + 8 * v7) = *(_QWORD *)(v8 + 8 * v7) & 0xFFFF00FFFFFELL | (v14 << 48);
              }
            }
            v9 = *(_QWORD *)(v8 + 8 * v7);
          }
          if ((v9 & 0x1E0611) == 0)
          {
            memset(v23, 0, 40);
            v15 = v8 + 8 * v7;
            DWORD1(v23[0]) = (*(_DWORD *)v15 >> 6) & 7;
            LODWORD(v23[0]) = *(unsigned __int16 *)(v15 + 6);
            v16 = HashSetGet(v5, (uint64_t)v23);
            if (v16)
            {
              if (*(_DWORD *)(v16 + 20))
              {
                v17 = v8 + 8 * v7;
                *(_QWORD *)v17 = *(_QWORD *)v17 & 0xFFFFFFFFFFFFFE3FLL | 0x80;
                *(_WORD *)(v17 + 6) = AddConstantParam(a1, *(_DWORD *)(v16 + 8), *(_DWORD *)(v16 + 12), *(_DWORD *)(v16 + 16), *(_QWORD *)(v16 + 24), *(_QWORD *)(v16 + 32));
              }
            }
          }
        }
        ++v7;
      }
      while (v6 != v7);
    }
    if ((*(_BYTE *)(i + 36) & 1) != 0)
    {
      memset((char *)v23 + 8, 0, 32);
      *(_QWORD *)&v23[0] = 0x400000000;
      v18 = HashSetGet(v5, (uint64_t)v23);
      if (v18)
      {
        if (*(_DWORD *)(v18 + 20))
        {
          v19 = *(_QWORD *)(i + 32);
          v20 = (int)*(float *)(v18 + 24);
          v21 = HIWORD(v19) + ((int)(v19 >> 12) >> 24);
          v22 = (v21 + v20);
          if (GetRegChunk((uint64_t **)a1, (v19 >> 12) & 7, v21 + v20))
            *(_QWORD *)(i + 32) = *(_QWORD *)(i + 32) & 0xF00EFFFFFFFFLL | (v22 << 48);
        }
      }
    }
    EmulateOp((uint64_t **)a1, (_QWORD *)i, (uint64_t *)v24);
  }
  while (v24[0])
    EmulationContext_PopRegisters(v24);
}

uint64_t GetRegChunk(uint64_t **a1, int a2, int a3)
{
  uint64_t **v3;
  uint64_t result;

  switch(a2)
  {
    case 0:
      v3 = a1 + 6;
      goto LABEL_7;
    case 1:
      v3 = a1 + 4;
      goto LABEL_7;
    case 2:
      v3 = a1 + 7;
      goto LABEL_7;
    case 3:
    case 5:
      v3 = a1 + 8;
LABEL_7:
      result = PPStreamChunkListChunkAtIndex(*v3, a3);
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t DecomposeMatrixOps(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  unint64_t v6;
  unsigned int v7;
  int v8;
  char *inserted;
  int v10;
  int v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  int64x2_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  unint64_t v47;
  int v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  uint64_t v54;
  unsigned int *v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  unsigned int v59;
  int v60;
  int v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  int v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  unint64_t v77;
  unsigned int v78;
  uint64_t v79;
  unsigned int *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unsigned int v84;
  int v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  uint64_t v95;
  int v96;
  int v97;
  int v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unsigned int v102;
  int v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  uint64_t *v126;
  char *v127;
  int8x16_t v128;
  int8x16_t v129;
  unint64_t *v130;
  uint64_t v131;
  int8x16_t v132;
  uint64_t v133;
  _OWORD v134[2];
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  uint64_t v148;

  v125 = a2;
  v148 = *MEMORY[0x24BDAC8D0];
  v2 = **(_QWORD **)(result + 104);
  if (v2)
  {
    v3 = result;
    v130 = (unint64_t *)&v139;
    v129 = (int8x16_t)xmmword_22A98A060;
    v128 = (int8x16_t)xmmword_22A98A070;
    v124 = 0xFFFFFFE6003ELL;
    v133 = result;
    do
    {
      v4 = *(_OWORD *)(v2 + 40);
      v143 = *(_OWORD *)(v2 + 24);
      v144 = v4;
      v5 = *(_OWORD *)(v2 + 72);
      v145 = *(_OWORD *)(v2 + 56);
      v146 = v5;
      v147 = *(_OWORD *)(v2 + 88);
      v6 = v143;
      *(_QWORD *)&v143 = v143 & 0xFFFFFFFFFFFFBFFFLL;
      v7 = (v6 >> 6);
      if (v7 > 0x39)
      {
        if ((v6 >> 6) > 0x74u)
        {
          if (v7 == 117)
          {
            if ((BYTE10(v143) & 0x18) == 0)
              goto LABEL_135;
            v132.i64[0] = (uint64_t)&v124;
            v77 = ((unint64_t)v144 >> 19) & 3;
            inserted = (char *)v2;
            v78 = v144 >> 17;
            MEMORY[0x24BDAC7A8](result);
            v80 = (unsigned int *)((char *)&v124 - v79);
            v81 = 0;
            v83 = ((v82 >> 17) & 3) + 1;
            v127 = inserted;
            do
            {
              v84 = AddTempRegister(v3, (v143 >> 19) & 7, ((unint64_t)v143 >> 38) & 7, (DWORD2(v143) >> 21) & 3);
              v85 = 0;
              v86 = 0;
              v80[v81] = v84;
              do
              {
                v138 = v143;
                v139 = v144;
                v87 = *((_QWORD *)&v143 + 1) & 0xFFFF80600FFFLL | ((unint64_t)v80[v81] << 48);
                v140 = v145;
                v141 = v146;
                v142 = v147;
                *(_QWORD *)&v138 = v143 & 0xFFFFFFC3FFFFC03FLL;
                *((_QWORD *)&v138 + 1) = v87 | 0x1000;
                if (v86 <= 3)
                  *((_QWORD *)&v138 + 1) = v87 | 0x1000 | qword_22A98A2A8[v86];
                v88 = (v86 + WORD3(v139)) << 48;
                if ((v139 & 1) != 0)
                  v89 = (v85 + (_DWORD)v139) & 0xFF000000;
                else
                  v89 = v139 & 0xFFFFFFE1FFFFLL;
                if ((v139 & 1) != 0)
                  v88 = v139 & 0xFFFFFFFF00E1FFFFLL;
                v90 = v88 | v89;
                switch((int)v81)
                {
                  case 0:
                    v91 = (v90 >> 9) & 3;
                    break;
                  case 1:
                    v91 = (v90 >> 11) & 3;
                    break;
                  case 2:
                    v91 = (v90 >> 13) & 3;
                    break;
                  case 3:
                    v91 = (v90 >> 15) & 3;
                    break;
                  default:
                    v91 = 0;
                    break;
                }
                *(_QWORD *)&v139 = v90 & 0xFFFFFFFFFFFE01FFLL | (v91 << 15) | (v91 << 13) | (v91 << 11) | (v91 << 9);
                inserted = PPStreamInsertOperationAfterChunk(v133, (uint64_t)&v138, 0, (uint64_t)inserted);
                ++v86;
                v85 += 0x1000000;
              }
              while ((_DWORD)v83 != (_DWORD)v86);
              v31 = v81++ == v77;
              v3 = v133;
            }
            while (!v31);
            v92 = 0;
            v93 = (v77 << 48) + 0x1000000000000;
            do
            {
              v138 = v143;
              v139 = v144;
              v94 = *v80++;
              *(_QWORD *)&v139 = v144 & 0xFFFFFFE0003ELL | ((v78 & 3) << 19) | 0x40 | ((unint64_t)v94 << 48) | 0x1C800;
              v140 = v145;
              v141 = v146;
              v142 = v147;
              *(_QWORD *)&v138 = v143 & 0xFFFFFFF3FFFFC038 | 1;
              *((_QWORD *)&v138 + 1) = (v92 + *((_QWORD *)&v143 + 1)) & 0xFFFF000000000000 | *((_QWORD *)&v143 + 1) & 0xFFFFFFE7FFFFLL;
              inserted = PPStreamInsertOperationAfterChunk(v3, (uint64_t)&v138, 0, (uint64_t)inserted);
              v92 += 0x1000000000000;
            }
            while (v93 != v92);
            goto LABEL_112;
          }
          if (v7 != 118)
          {
            if (v7 != 122)
              goto LABEL_135;
            v44 = DWORD2(v143);
            if ((*((_QWORD *)&v143 + 1) & 0x180000) == 0)
              goto LABEL_135;
            *((_QWORD *)&v138 + 1) = 0;
            inserted = (char *)v2;
            DWORD2(v138) = PPStreamChunkListGetNextIndex(*(uint64_t **)(v3 + 32));
            *(_QWORD *)&v138 = 16;
            PPStreamAddTempUsage(v3, &v138);
            v45 = 0;
            v46 = (v44 >> 19) & 3;
            v47 = (unint64_t)DWORD2(v138) << 48;
            v48 = v46 + 1;
            v127 = (char *)v2;
            do
            {
              *(_QWORD *)&v139 = v144;
              v140 = v145;
              v141 = v146;
              v142 = v147;
              *(_QWORD *)&v138 = v143 & 0xFFFFFE03FFFFC03FLL | 0x80000007C0;
              *((_QWORD *)&v138 + 1) = v47 | *((_QWORD *)&v143 + 1) & 0xFFFFFF878FFFLL | 0x1000;
              *((_QWORD *)&v139 + 1) = v144 & 0xFFFFFFFFFFFFFE3FLL | 0x80;
              HIWORD(v139) = AddConstantParam(v3, 0, 2, 0, COERCE_UNSIGNED_INT((float)v45), 0);
              v49 = PPStreamInsertOperationAfterChunk(v3, (uint64_t)&v138, 0, (uint64_t)inserted);
              *((_QWORD *)&v139 + 1) = *((_QWORD *)&v144 + 1);
              v140 = v145;
              v141 = v146;
              v142 = v147;
              *(_QWORD *)&v138 = v143 & 0xFFFFFFF3FFFFFFFFLL;
              *((_QWORD *)&v138 + 1) = *((_QWORD *)&v143 + 1) & 0xFFFFFFE7FFFFLL | ((unint64_t)(v45 + HIWORD(*((_QWORD *)&v143 + 1))) << 48);
              *(_QWORD *)&v139 = v47 | v144 & 0xFFFFFFF9FE3FLL | 0x40;
              inserted = PPStreamInsertOperationAfterChunk(v3, (uint64_t)&v138, 0, (uint64_t)v49);
              ++v45;
            }
            while (v48 != v45);
            goto LABEL_71;
          }
        }
        else
        {
          if (v7 == 58)
            goto LABEL_49;
          if (v7 != 78)
          {
            if (v7 != 109)
              goto LABEL_135;
LABEL_13:
            v8 = (DWORD2(v143) >> 19) & 3;
            if (!v8)
              goto LABEL_135;
            inserted = (char *)v2;
            v10 = 0;
            v11 = 0;
            v12 = v8 + 1;
            v127 = (char *)v2;
            do
            {
              v139 = v144;
              v140 = v145;
              v141 = v146;
              v142 = v147;
              *(_QWORD *)&v138 = v143 & 0xFFFFFFF3FFFFFFFFLL;
              *((_QWORD *)&v138 + 1) = *((_QWORD *)&v143 + 1) & 0xFFFFFFE7FFFFLL | ((unint64_t)(v11 + HIWORD(*((_QWORD *)&v143 + 1))) << 48);
              v13 = (unint64_t)(v11 + WORD3(v144)) << 48;
              if ((v144 & 1) != 0)
                v14 = (v10 + (_DWORD)v144) & 0xFF000000;
              else
                v14 = v144 & 0xFFFFFFF9FFFFLL;
              if ((v144 & 1) != 0)
                v13 = v144 & 0xFFFFFFFF00F9FFFFLL;
              *(_QWORD *)&v139 = v13 | v14;
              inserted = PPStreamInsertOperationAfterChunk(v3, (uint64_t)&v138, 0, (uint64_t)inserted);
              ++v11;
              v10 += 0x1000000;
            }
            while (v12 != v11);
LABEL_71:
            v42 = v3;
            v43 = v127;
LABEL_72:
            result = PPStreamRemoveOperation(v42, v43);
            goto LABEL_136;
          }
          if (v125)
            goto LABEL_135;
        }
      }
      else
      {
        if ((v6 >> 6) > 0x22u)
        {
          if (v7 == 35)
          {
LABEL_49:
            v34 = (DWORD2(v143) >> 19) & 3;
            if (!v34)
              goto LABEL_135;
            v35 = 0;
            v36 = 0;
            v37 = v34 + 1;
            inserted = (char *)v2;
            do
            {
              v138 = v143;
              v139 = v144;
              v140 = v145;
              v141 = v146;
              v142 = v147;
              v38 = v143 & 0x3FC0;
              if (v38 == 2240)
                v38 = 2176;
              *(_QWORD *)&v138 = v38 | v143 & 0xFFFFFFF3FFFFC03FLL;
              *((_QWORD *)&v138 + 1) = *((_QWORD *)&v143 + 1) & 0xFFFFFFE7FFFFLL | ((unint64_t)(v36 + HIWORD(*((_QWORD *)&v143 + 1))) << 48);
              if ((v139 & 0x60000) != 0)
              {
                if ((v139 & 1) != 0)
                  v39 = v139 & 0xFFFFFFFF00F9FFFFLL | (v35 + (_DWORD)v139) & 0xFF000000;
                else
                  v39 = v139 & 0xFFFFFFF9FFFFLL | ((unint64_t)(v36 + WORD3(v139)) << 48);
              }
              else
              {
                v39 = v139 & 0xFFFFFFFFFFE607FFLL | *((_QWORD *)&v139 + 1) & 0x180000 | ((((unint64_t)v139 >> 9) & 3) << 15) | ((((unint64_t)v139 >> 9) & 3) << 13) | ((((unint64_t)v139 >> 9) & 3) << 11);
              }
              v40 = *((_QWORD *)&v139 + 1) & 0xFFFFFFF9FFFFLL | ((unint64_t)(v36
                                                                                  + HIWORD(*((_QWORD *)&v139 + 1))) << 48);
              if ((BYTE8(v139) & 1) != 0)
                v40 = *((_QWORD *)&v139 + 1) & 0xFFFFFFFF00F9FFFFLL | (v35 + DWORD2(v139)) & 0xFF000000;
              if ((*((_QWORD *)&v139 + 1) & 0x60000) != 0)
                v41 = v40;
              else
                v41 = *((_QWORD *)&v139 + 1) & 0xFFFFFFFFFFE607FFLL | v39 & 0x180000 | (((*((_QWORD *)&v139 + 1) >> 9) & 3) << 15) | (((*((_QWORD *)&v139 + 1) >> 9) & 3) << 13) | (((*((_QWORD *)&v139 + 1) >> 9) & 3) << 11);
              *(_QWORD *)&v139 = v39;
              *((_QWORD *)&v139 + 1) = v41;
              inserted = PPStreamInsertOperationAfterChunk(v3, (uint64_t)&v138, 0, (uint64_t)inserted);
              ++v36;
              v35 += 0x1000000;
            }
            while (v37 != v36);
          }
          else
          {
            if (v7 != 49 && v7 != 54 || ((DWORD2(v144) | v144) & 0x60000) == 0)
            {
LABEL_135:
              inserted = (char *)v2;
              goto LABEL_136;
            }
            v15 = (*(_DWORD *)(((unint64_t)&v143 | (8 * ((v144 & 0x60000) == 0))) + 0x10) >> 17) & 3;
            v16 = (v6 >> 19) & 7;
            v17 = (v6 >> 38) & 7;
            v18 = (v6 >> 36) & 3;
            v19 = AddTempRegister(v3, (v6 >> 19) & 7, (v6 >> 38) & 7, (v6 >> 36) & 3);
            v20 = AddTempRegister(v3, v16, v17, v18);
            v21 = 0;
            v22 = v20;
            v23.i64[0] = v19;
            v23.i64[1] = v20;
            v132 = (int8x16_t)vshlq_n_s64(v23, 0x30uLL);
            v24 = v132.i64[0];
            inserted = (char *)v2;
            do
            {
              v138 = v143;
              v139 = v144;
              v140 = v145;
              v141 = v146;
              v142 = v147;
              if (v21)
                v25 = v22;
              else
                v25 = v19;
              *(_QWORD *)&v138 = v143 & 0xFFFFFFF3FFFFFFFFLL;
              *((_QWORD *)&v138 + 1) = *((_QWORD *)&v138 + 1) & 0xFFFE80180FFFLL | (v25 << 48) | 0x72041000;
              v26 = v143 & 7;
              if ((v143 & 7) != 0)
              {
                v27 = v130;
                do
                {
                  v28 = *v27;
                  if ((*v27 & 0x60000) != 0)
                  {
                    v29 = (unint64_t)(v21 + HIWORD(v28)) << 48;
                    v30 = v28 & 0xFFFFFFFF00F9FFFFLL;
                    v31 = (v28 & 1) == 0;
                    if ((v28 & 1) != 0)
                      v32 = ((v21 << 24) + (_DWORD)v28) & 0xFF000000;
                    else
                      v32 = v28 & 0xFFFFFFF9FFFFLL;
                    if (!v31)
                      v29 = v30;
                    *v27 = v29 | v32;
                  }
                  ++v27;
                  --v26;
                }
                while (v26);
              }
              inserted = PPStreamInsertOperationAfterChunk(v3, (uint64_t)&v138, 0, (uint64_t)inserted);
              if (v21)
              {
                v134[0] = v143;
                v134[1] = v144;
                v135 = v145;
                v136 = v146;
                v137 = v147;
                v33 = 2368;
                if ((v143 & 0x3FC0) == 0xC40)
                  v33 = 2304;
                *(_QWORD *)&v134[0] = v33 | v143 & 0xFFFFFFFFFFFFC03FLL;
                *((_QWORD *)&v134[1] + 1) = v24 | 0x1C840 | *((_QWORD *)&v134[1] + 1) & 0xFFFFFFE0002ELL;
                *(int8x16_t *)((char *)v134 + 8) = vorrq_s8(vorrq_s8(v132, v128), vandq_s8(*(int8x16_t *)((char *)v134 + 8), v129));
                inserted = PPStreamInsertOperationAfterChunk(v3, (uint64_t)v134, 0, (uint64_t)inserted);
              }
              if (v21 == v15)
              {
                *((_QWORD *)&v134[0] + 1) = *((_QWORD *)&v143 + 1);
                *((_QWORD *)&v134[1] + 1) = *((_QWORD *)&v144 + 1);
                v135 = v145;
                v136 = v146;
                v137 = v147;
                *(_QWORD *)&v134[0] = v143 & 0xFFFFFFFFFFFFC038 | 1;
                *(_QWORD *)&v134[1] = v144 & 0xFFFFFFE0002ELL | v24 | 0x1C840;
                inserted = PPStreamInsertOperationAfterChunk(v3, (uint64_t)v134, 0, (uint64_t)inserted);
              }
              v31 = v21++ == v15;
            }
            while (!v31);
          }
          goto LABEL_64;
        }
        if (v7 - 31 < 2)
          goto LABEL_49;
        if (!(v6 >> 6))
          goto LABEL_13;
        if (v7 != 34)
          goto LABEL_135;
      }
      v132.i64[0] = v6 & 0x3FC0;
      if (v132.i64[0] == 7552)
      {
        v127 = (char *)v2;
        LODWORD(v50) = DWORD2(v144);
LABEL_79:
        v126 = &v124;
        MEMORY[0x24BDAC7A8](result);
        v55 = (unsigned int *)((char *)&v124 - v54);
        v56 = 0;
        if (v132.i64[0] == 7552)
          v57 = ((v50 >> 19) & 3) + 1;
        else
          v57 = (v53 + 1);
        v58 = v52 + 1;
        inserted = v127;
        v131 = v57;
        do
        {
          v59 = AddTempRegister(v3, (v143 >> 19) & 7, ((unint64_t)v143 >> 38) & 7, (DWORD2(v143) >> 21) & 3);
          v60 = 0;
          v61 = 0;
          v55[v56] = v59;
          do
          {
            v140 = v145;
            v141 = v146;
            v142 = v147;
            v138 = v143;
            v139 = v144;
            if ((v144 & 0x60000) != 0)
            {
              if ((v144 & 1) != 0)
              {
                v63 = (v60 + (_DWORD)v144) & 0xFF000000;
                v62 = v144 & 0xFFFFFFFF00F9FFFFLL;
              }
              else
              {
                v62 = (unint64_t)(v61 + WORD3(v144)) << 48;
                v63 = v144 & 0xFFFFFFF9FFFFLL;
              }
              *(_QWORD *)&v139 = v62 | v63;
            }
            v64 = *((_QWORD *)&v139 + 1);
            v65 = (v64 + (v56 << 48)) & 0xFFFF000000000000 | v64 & 0xFFFFFFF9FFFFLL;
            if ((BYTE8(v139) & 1) != 0)
              v65 = *((_QWORD *)&v139 + 1) & 0xFFFFFFFF00F9FFFFLL | (((_DWORD)v56 << 24) + DWORD2(v139)) & 0xFF000000;
            if ((*((_QWORD *)&v139 + 1) & 0x60000) != 0)
              v64 = v65;
            if (v132.i64[0] == 7552)
              v66 = v56;
            else
              v66 = v61;
            switch(v66)
            {
              case 0:
                v67 = (v64 >> 9) & 3;
                break;
              case 1:
                v67 = (v64 >> 11) & 3;
                break;
              case 2:
                v67 = (v64 >> 13) & 3;
                break;
              case 3:
                v67 = (v64 >> 15) & 3;
                break;
              default:
                v67 = 0;
                break;
            }
            v68 = v64 & 0xFFFFFFFFFFE601FFLL | (v67 << 15) | (v67 << 13) | (v67 << 11);
            v69 = (*((_QWORD *)&v138 + 1) >> 2) & 0x180000;
            *((_QWORD *)&v139 + 1) = v68 | (v67 << 9) | v69;
            v70 = 0xFFFFFFF3FFFFC03FLL;
            if (v60)
              v70 = 0xFFFFFFF3FFFFC038;
            v71 = 2176;
            if (v60)
              v71 = 4035;
            v72 = v138 & v70;
            v73 = v55[v56];
            *(_QWORD *)&v138 = v72 | v71;
            *((_QWORD *)&v138 + 1) = *((_QWORD *)&v138 + 1) & 0xFFFEFFE78FFFLL | ((unint64_t)(unsigned __int16)v73 << 48) | 0x1000;
            if (v60)
              *(_QWORD *)&v140 = v69 | *((_QWORD *)&v144 + 1) & 0xFFFFFFE0003ELL | (v73 << 48) | 0x1C840;
            inserted = PPStreamInsertOperationAfterChunk(v133, (uint64_t)&v138, 0, (uint64_t)inserted);
            ++v61;
            v60 += 0x1000000;
          }
          while (v58 != v61);
          ++v56;
          v74 = v131;
          v3 = v133;
        }
        while (v56 != v131);
        v75 = 0;
        do
        {
          v138 = v143;
          v139 = v144;
          v76 = *v55++;
          v140 = v145;
          v141 = v146;
          v142 = v147;
          *(_QWORD *)&v138 = v143 & 0xFFFFFFF3FFFFC038 | 1;
          *((_QWORD *)&v138 + 1) = (v75 + *((_QWORD *)&v143 + 1)) & 0xFFFF000000000000 | *((_QWORD *)&v143 + 1) & 0xFFFFFFE7FFFFLL;
          *(_QWORD *)&v139 = v144 & 0xFFFFFFF8003ELL | ((unint64_t)v76 << 48) | 0x1C840;
          inserted = PPStreamInsertOperationAfterChunk(v3, (uint64_t)&v138, 0, (uint64_t)inserted);
          v75 += 0x1000000000000;
          --v74;
        }
        while (v74);
LABEL_112:
        result = PPStreamRemoveOperation(v3, v127);
        goto LABEL_136;
      }
      v50 = *((_QWORD *)&v144 + 1);
      v51 = *((_QWORD *)&v144 + 1) & 0x60000;
      if ((v144 & 0x60000) != 0 && v51)
      {
        v127 = (char *)v2;
        goto LABEL_79;
      }
      v95 = v144 & 0x180000;
      if ((v144 & 0x180000) == 0 && v51 || (v144 & 0x60000) != 0 && (*((_QWORD *)&v144 + 1) & 0x180000) == 0)
      {
        v96 = 0;
        v97 = 0;
        v98 = ((DWORD2(v143) >> 19) & 3) + 1;
        inserted = (char *)v2;
        do
        {
          v139 = v144;
          v140 = v145;
          v141 = v146;
          v142 = v147;
          *(_QWORD *)&v138 = v143 & 0xFFFFFFF3FFFFFFFFLL;
          *((_QWORD *)&v138 + 1) = *((_QWORD *)&v143 + 1) & 0xFFFFFFE7FFFFLL | ((unint64_t)(v97
                                                                                                 + HIWORD(*((_QWORD *)&v143 + 1))) << 48);
          if ((v144 & 0x60000) != 0)
          {
            if ((v144 & 1) != 0)
              v99 = v144 & 0xFFFFFFFF00F9FFFFLL | (v96 + (_DWORD)v144) & 0xFF000000;
            else
              v99 = v144 & 0xFFFFFFF9FFFFLL | ((unint64_t)(v97 + WORD3(v144)) << 48);
          }
          else
          {
            v99 = v144 & 0xFFFFFFFFFFE607FFLL | *((_QWORD *)&v139 + 1) & 0x180000 | ((((unint64_t)v144 >> 9) & 3) << 15) | ((((unint64_t)v144 >> 9) & 3) << 13) | ((((unint64_t)v144 >> 9) & 3) << 11);
          }
          v100 = *((_QWORD *)&v139 + 1) & 0xFFFFFFF9FFFFLL | ((unint64_t)(v97
                                                                               + HIWORD(*((_QWORD *)&v139 + 1))) << 48);
          if ((BYTE8(v139) & 1) != 0)
            v100 = *((_QWORD *)&v139 + 1) & 0xFFFFFFFF00F9FFFFLL | (v96 + DWORD2(v139)) & 0xFF000000;
          if ((*((_QWORD *)&v139 + 1) & 0x60000) != 0)
            v101 = v100;
          else
            v101 = *((_QWORD *)&v139 + 1) & 0xFFFFFFFFFFE607FFLL | v99 & 0x180000 | (((*((_QWORD *)&v139 + 1) >> 9) & 3) << 15) | (((*((_QWORD *)&v139 + 1) >> 9) & 3) << 13) | (((*((_QWORD *)&v139 + 1) >> 9) & 3) << 11);
          *(_QWORD *)&v139 = v99;
          *((_QWORD *)&v139 + 1) = v101;
          inserted = PPStreamInsertOperationAfterChunk(v3, (uint64_t)&v138, 0, (uint64_t)inserted);
          ++v97;
          v96 += 0x1000000;
        }
        while (v98 != v97);
LABEL_64:
        v42 = v3;
        v43 = (char *)v2;
        goto LABEL_72;
      }
      v102 = (v144 >> 17) & 3;
      if (v102)
      {
        v103 = 0;
        v104 = v50 & 0xFFFFFFE6002ELL | ((unint64_t)(unsigned __int16)AddTempRegister(v3, (v6 >> 19) & 7, (v6 >> 38) & 7, (DWORD2(v143) >> 21) & 3) << 48) | v95 | 0x1C840;
        inserted = (char *)v2;
        do
        {
          v140 = v145;
          v141 = v146;
          v142 = v147;
          v138 = v143;
          v139 = v144;
          v105 = (unint64_t)(v103 + WORD3(v144)) << 48;
          if ((v144 & 1) != 0)
            v106 = ((_DWORD)v144 + (v103 << 24)) & 0xFF000000;
          else
            v106 = v144 & 0xFFFFFFF9FFFFLL;
          if ((v144 & 1) != 0)
            v105 = v144 & 0xFFFFFFFF00F9FFFFLL;
          *(_QWORD *)&v139 = v105 | v106;
          switch(v103)
          {
            case 0:
              v107 = *((_QWORD *)&v139 + 1);
              v108 = (*((_QWORD *)&v139 + 1) >> 9) & 3;
              break;
            case 1:
              v107 = *((_QWORD *)&v139 + 1);
              v108 = (*((_QWORD *)&v139 + 1) >> 11) & 3;
              break;
            case 2:
              v107 = *((_QWORD *)&v139 + 1);
              v108 = (*((_QWORD *)&v139 + 1) >> 13) & 3;
              break;
            case 3:
              v107 = *((_QWORD *)&v139 + 1);
              v108 = (*((_QWORD *)&v139 + 1) >> 15) & 3;
              break;
            default:
              v108 = 0;
              v107 = *((_QWORD *)&v139 + 1);
              break;
          }
          v109 = v107 & 0xFFFFFFFFFFE601FFLL | (v108 << 15) | (v108 << 13) | (v108 << 11) | (v108 << 9) | v95;
          v110 = 0xFFFFFFF3FFFFC03FLL;
          if (v103)
            v110 = 0xFFFFFFF3FFFFC038;
          v111 = v138 & v110;
          v112 = 2176;
          if (v103)
            v112 = 4035;
          *((_QWORD *)&v139 + 1) = v109;
          *(_QWORD *)&v138 = v111 | v112;
          if (v103 != v102)
            __asm { BR              X11 }
          if (v103)
            *(_QWORD *)&v140 = v104;
          inserted = PPStreamInsertOperationAfterChunk(v3, (uint64_t)&v138, 0, (uint64_t)inserted);
          v31 = v103++ == v102;
        }
        while (!v31);
      }
      else
      {
        if (((DWORD2(v144) >> 17) & 3) == 0)
        {
          inserted = (char *)v2;
          goto LABEL_136;
        }
        v132.i64[0] = DWORD2(v144) >> 17;
        v113 = *((_QWORD *)&v144 + 1);
        v114 = 0;
        v115 = 0;
        v116 = AddTempRegister(v3, (v6 >> 19) & 7, (v6 >> 38) & 7, (DWORD2(v143) >> 21) & 3) << 48;
        v117 = (v50 << 17) & 0x3000000000;
        v118 = ((v113 >> 17) & 3) + 1;
        v119 = (char *)v2;
        do
        {
          v140 = v145;
          v141 = v146;
          v142 = v147;
          v138 = v143;
          v139 = v144;
          v120 = *((_QWORD *)&v144 + 1) & 0xFFFFFFF9FFFFLL;
          v121 = *((_QWORD *)&v144 + 1) & 0xFFFFFFFF00F9FFFFLL;
          if ((BYTE8(v144) & 1) != 0)
            v120 = (v114 + DWORD2(v144)) & 0xFF000000;
          else
            v121 = (unint64_t)(v115 + HIWORD(*((_QWORD *)&v144 + 1))) << 48;
          v122 = v121 | v120;
          v123 = *((_QWORD *)&v143 + 1) & 0xFFFE80780FFFLL | v116;
          *((_QWORD *)&v139 + 1) = v122;
          *((_QWORD *)&v138 + 1) = v123 | 0x72001000;
          if (v115 <= 3)
            *((_QWORD *)&v138 + 1) = v123 | qword_22A98A288[v115];
          *(_QWORD *)&v138 = v117 | 0x9C0 | v138 & 0xFFFFFFC3FFFFC03FLL;
          v119 = PPStreamInsertOperationAfterChunk(v3, (uint64_t)&v138, 0, (uint64_t)v119);
          ++v115;
          v114 += 0x1000000;
        }
        while ((_DWORD)v118 != (_DWORD)v115);
        *((_QWORD *)&v138 + 1) = *((_QWORD *)&v143 + 1);
        *((_QWORD *)&v139 + 1) = *((_QWORD *)&v144 + 1);
        v140 = v145;
        v141 = v146;
        v142 = v147;
        *(_QWORD *)&v138 = v143 & 0xFFFFFFFFFFFFC038 | 1;
        *(_QWORD *)&v139 = v144 & v124 | ((v132.i8[0] & 3) << 19) | (unint64_t)v116 | 0x1C840;
        inserted = PPStreamInsertOperationAfterChunk(v3, (uint64_t)&v138, 0, (uint64_t)v119);
      }
      result = PPStreamRemoveOperation(v3, (_QWORD *)v2);
LABEL_136:
      v2 = *((_QWORD *)inserted + 1);
    }
    while (v2);
  }
  return result;
}

void SwitchTexOps(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  int NextIndex;
  char *inserted;
  __int128 v7;
  __int128 v8;
  unsigned int v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  BOOL v15;
  int v16;
  char *v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  _QWORD *v28;
  uint64_t *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  int v36;
  unint64_t *v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  char *v41;
  unint64_t v42;
  char *v43;
  char *v44;
  uint64_t *v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  _OWORD v59[5];
  _QWORD v60[3];
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  _QWORD v70[2];
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;

  v2 = HashTableNew(0x10u, 0, 0);
  v3 = *a1[7];
  if (v3)
  {
    v4 = 0;
    do
    {
      if ((*(_QWORD *)(v3 + 24) & 0x400000001F00) == 0x400000000200)
      {
        HashTableAdd(v2, (*(_DWORD *)(v3 + 32) + 1), v3 + 24);
        ++v4;
      }
      v3 = *(_QWORD *)(v3 + 8);
    }
    while (v3);
    if (v4)
    {
      NextIndex = PPStreamChunkListGetNextIndex(a1[4]);
      v71 = xmmword_22A98A080;
      DWORD2(v71) = NextIndex;
      PPStreamAddTempUsage((uint64_t)a1, &v71);
      inserted = (char *)*a1[13];
      if (inserted)
      {
        v47 = (((unint64_t)WORD4(v71) << 48) | 0x1C880) - 64;
        v48 = ((unint64_t)WORD4(v71) << 48) | 0x72041000;
        v45 = v2;
        do
        {
          v7 = *(_OWORD *)(inserted + 40);
          v71 = *(_OWORD *)(inserted + 24);
          v72 = v7;
          v8 = *(_OWORD *)(inserted + 72);
          v73 = *(_OWORD *)(inserted + 56);
          v74 = v8;
          v75 = *(_OWORD *)(inserted + 88);
          v9 = v71;
          *(_QWORD *)&v71 = v71 & 0xFFFFFFFFFFFFBFFFLL;
          v10 = (v9 >> 6);
          v11 = (v10 - 66) > 0x21 || ((1 << (v10 - 66)) & 0x30000003FLL) == 0;
          if (!v11
            || ((v12 = v10 - 130, v13 = v12 > 0x24, v14 = (1 << v12) & 0x1C00000003, !v13)
              ? (v15 = v14 == 0)
              : (v15 = 1),
                !v15))
          {
            v16 = v9 & 7;
            v17 = (char *)&v71 + 8 * (v16 - 2);
            v20 = *((_QWORD *)v17 + 2);
            v19 = v17 + 16;
            v18 = v20;
            v21 = (uint64_t)(int)v20 >> 24;
            v22 = (v20 & 0x1C1) == 0x80 && (_DWORD)v21 == 0;
            if (!v22 || !HashTableGet(v2, HIWORD(v18) + 1))
            {
              v49 = (v16 - 2);
              v51 = v19;
              v46 = inserted;
              v23 = (uint64_t *)malloc_type_malloc(8uLL, 0x7081ABB9uLL);
              if (!v23)
LABEL_49:
                abort();
              v24 = v23;
              v25 = *((_QWORD *)&v71 + (v16 - 1) + 2);
              v70[0] = 0;
              v70[1] = 0;
              HashSetIteratorSetup(*v2, v70);
              v26 = HashSetIteratorNext((unsigned int *)v70);
              if (v26)
              {
                v27 = 0;
                do
                {
                  v28 = *(_QWORD **)(v26 + 8);
                  if ((((v25 >> 5) ^ (*v28 >> 52)) & 7) == 0
                    && (((*v28 >> 47) ^ v25) & 0x1F) == 0)
                  {
                    v30 = (uint64_t *)malloc_type_realloc(v24, 8 * (v27 + 1), 0x2BDC8648uLL);
                    if (!v30)
                      goto LABEL_49;
                    v24 = v30;
                    v30[v27++] = (uint64_t)v28;
                  }
                  v26 = HashSetIteratorNext((unsigned int *)v70);
                }
                while (v26);
                if (v27 == 1)
                {
                  v32 = *v24;
                  v67 = v73;
                  v68 = v74;
                  v69 = v75;
                  v65 = v71;
                  v66 = v72;
                  v33 = *((_QWORD *)&v66 + v49) & 0xFFFFFFFFFFFFFE3FLL | 0x80;
                  *((_QWORD *)&v66 + v49) = v33;
                  *((_QWORD *)&v66 + v49) = v33 & 0xFFFF00FFFEBELL | ((unint64_t)*(unsigned int *)(v32 + 8) << 48);
                  v31 = v46;
                  inserted = PPStreamInsertOperationAfterChunk((uint64_t)a1, (uint64_t)&v65, 0, (uint64_t)v46);
                }
                else if (v27)
                {
                  v34 = 0;
                  inserted = 0;
                  v35 = 0;
                  v36 = DWORD1(v75);
                  v37 = (unint64_t *)&v59[1] + v49;
                  v50 = v27;
                  v52 = *(_QWORD *)v51;
                  v38 = (uint64_t)v46;
                  v39 = 0uLL;
                  do
                  {
                    v40 = v24[v34];
                    v68 = v39;
                    v69 = v39;
                    v67 = v39;
                    DWORD1(v69) = v36;
                    *(_QWORD *)&v65 = 0x4100000C42;
                    *((_QWORD *)&v65 + 1) = v48;
                    *(_QWORD *)&v66 = v52;
                    *((_QWORD *)&v66 + 1) = 116864;
                    *((_QWORD *)&v66 + 1) = ((unint64_t)*(unsigned int *)(v40 + 8) << 48) | 0x1C880;
                    v41 = PPStreamInsertOperationAfterChunk((uint64_t)a1, (uint64_t)&v65, 0, v38);
                    if (v35 && inserted)
                      *((_QWORD *)v35 + 3) = *((_QWORD *)v35 + 3) & 0x3FFFFFFFFFFFLL | ((unint64_t)*((unsigned int *)v41 + 22) << 46);
                    v64 = 0;
                    v62 = 0u;
                    v63 = 0u;
                    v60[1] = 0;
                    v61 = 0u;
                    HIDWORD(v63) = v36;
                    v60[0] = 0x4000001541;
                    v60[2] = v47;
                    v35 = PPStreamInsertOperationAfterChunk((uint64_t)a1, (uint64_t)v60, 0, (uint64_t)v41);
                    v59[2] = v73;
                    v59[3] = v74;
                    v59[4] = v75;
                    v59[0] = v71;
                    v59[1] = v72;
                    v42 = *v37 & 0xFFFFFFFFFFFFFE3FLL | 0x80;
                    *v37 = v42;
                    *v37 = v42 & 0xFFFF00FFFEBELL | ((unint64_t)*(unsigned int *)(v40 + 8) << 48);
                    v43 = PPStreamInsertOperationAfterChunk((uint64_t)a1, (uint64_t)v59, 0, (uint64_t)v35);
                    v58 = 0;
                    v56 = 0u;
                    v57 = 0u;
                    v54 = 0u;
                    v55 = 0u;
                    HIDWORD(v57) = v36;
                    v53 = 5696;
                    v44 = PPStreamInsertOperationAfterChunk((uint64_t)a1, (uint64_t)&v53, 0, (uint64_t)v43);
                    v39 = 0uLL;
                    inserted = v44;
                    ++v34;
                    v38 = (uint64_t)v44;
                  }
                  while (v50 != v34);
                  *((_QWORD *)v35 + 3) = *((_QWORD *)v35 + 3) & 0x3FFFFFFFFFFFLL | ((unint64_t)*(unsigned int *)(*((_QWORD *)v44 + 1) + 88) << 46);
                  v2 = v45;
                  v31 = v46;
                }
                else
                {
                  v31 = v46;
                  inserted = v46;
                }
              }
              else
              {
                v31 = inserted;
              }
              PPStreamRemoveOperation((uint64_t)a1, v31);
              free(v24);
            }
          }
          inserted = (char *)*((_QWORD *)inserted + 1);
        }
        while (inserted);
      }
    }
  }
  HashTableFree(v2);
}

uint64_t GetRegisterIndicies(uint64_t result, unsigned int *a2, unsigned int *a3, int a4, unsigned int a5, int a6, int a7)
{
  uint64_t i;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v12;
  unint64_t v13;

  *a2 = 0;
  *a3 = -1;
  if (a6)
  {
    if (a4 == 2)
    {
      for (i = **(_QWORD **)(result + 72); i; i = *(_QWORD *)(i + 8))
      {
        v12 = *(_QWORD *)(i + 24);
        v9 = WORD1(v12);
        v13 = HIWORD(v12);
        if (v9 <= a5 && v13 >= a5)
          goto LABEL_21;
      }
    }
    else if (a4 == 1)
    {
      i = **(_QWORD **)(result + 80);
      if (i)
      {
        while (1)
        {
          v8 = *(_QWORD *)(i + 24);
          v9 = WORD1(v8);
          v10 = HIWORD(v8);
          if (v9 <= a5 && v10 >= a5)
            break;
          i = *(_QWORD *)(i + 8);
          if (!i)
            goto LABEL_17;
        }
LABEL_21:
        *a2 = v9;
        a5 = *(unsigned __int16 *)(i + 30);
        goto LABEL_20;
      }
    }
  }
LABEL_17:
  if (!a7 || (*a2 = a5, *a3 = a7 + a5, a7 + a5 == -1))
  {
    *a2 = a5;
LABEL_20:
    *a3 = a5;
  }
  return result;
}

_QWORD *EmulationContext_PushRegisters(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *result;

  v4 = *a1;
  result = malloc_type_malloc(0x10uLL, 0x7081ABB9uLL);
  if (!result)
    abort();
  *result = v4;
  result[1] = a2;
  *a1 = (uint64_t)result;
  return result;
}

_QWORD *EmulationContext_PushRegistersCopy(uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  __int128 v7;
  __int128 v8;
  _QWORD v10[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = HashSetNew(*(_DWORD *)(v2 + 4), *(unint64_t (**)(unint64_t))(v2 + 16), *(uint64_t (**)(int, int))(v2 + 24));
  v10[0] = 0;
  v10[1] = 0;
  HashSetIteratorSetup(v2, v10);
  v4 = HashSetIteratorNext((unsigned int *)v10);
  if (v4)
  {
    v5 = v4;
    do
    {
      v6 = malloc_type_malloc(0x28uLL, 0x7081ABB9uLL);
      if (!v6)
        abort();
      v7 = *(_OWORD *)v5;
      v8 = *(_OWORD *)(v5 + 16);
      v6[4] = *(_QWORD *)(v5 + 32);
      *(_OWORD *)v6 = v7;
      *((_OWORD *)v6 + 1) = v8;
      HashSetAdd((uint64_t)v3, (uint64_t)v6);
      v5 = HashSetIteratorNext((unsigned int *)v10);
    }
    while (v5);
  }
  return EmulationContext_PushRegisters(a1, (uint64_t)v3);
}

void EmulationContext_PopRegisters(_QWORD **a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = *a1;
  if (*a1)
  {
    v2 = v1[1];
    *a1 = (_QWORD *)*v1;
    if (v2)
    {
      ClearRegisterState(v2);
      HashSetFree((_QWORD *)v1[1]);
    }
    free(v1);
  }
}

uint64_t ClearRegisterState(uint64_t a1)
{
  uint64_t result;
  void *v3;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  HashSetIteratorSetup(a1, v4);
  result = HashSetIteratorNext((unsigned int *)v4);
  if (result)
  {
    v3 = (void *)result;
    do
    {
      HashSetRemove(a1, (uint64_t)v3);
      free(v3);
      result = HashSetIteratorNext((unsigned int *)v4);
      v3 = (void *)result;
    }
    while (result);
  }
  return result;
}

void ClearDestedOpRegisters(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  unint64_t v4;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  void *v12;
  _DWORD v13[2];
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v4 = *(_QWORD *)(a3 + 32);
  if ((v4 & 0x78000) != 0)
  {
    v16 = 0;
    GetRegisterIndicies(a1, (unsigned int *)&v16 + 1, (unsigned int *)&v16, (v4 >> 12) & 7, HIWORD(v4), BYTE4(v4) & 1, (v4 >> 19) & 3);
    v8 = HIDWORD(v16);
    if (SHIDWORD(v16) <= (int)v16)
    {
      v9 = v16 + 1;
      do
      {
        v14 = 0u;
        v15 = 0u;
        v10 = (*(_DWORD *)(a3 + 32) >> 12) & 7;
        v13[0] = v8;
        v13[1] = v10;
        v11 = HashSetGet(a2, (uint64_t)v13);
        if (v11)
        {
          v12 = (void *)v11;
          if (a4)
          {
            HashSetRemove(a2, v11);
            free(v12);
          }
          else
          {
            *(_DWORD *)(v11 + 20) = 0;
          }
        }
        ++v8;
      }
      while (v9 != v8);
    }
  }
}

void glpPPShaderLinearizeStreamMgr(uint64_t **a1, __int16 a2)
{
  glpPPShaderLinearizeStreamMgrEx(a1, a2, 0);
}

void glpPPShaderLinearizeStreamMgrEx(uint64_t **a1, __int16 a2, _DWORD *a3)
{
  __int16 v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  int *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  int v23;
  int v24;
  char *v25;
  int *v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  BOOL v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int *v37;
  int v38;
  uint64_t v39;
  int *v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  int *v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _BOOL4 v54;
  char *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v64;
  _DWORD *v65;
  uint64_t v66;
  uint64_t v67;
  int *v68;
  int v69;
  char *v70;
  _DWORD *v71;
  int v72;
  _QWORD *v73;
  uint64_t *v74;
  uint64_t v75;
  _BOOL4 v76;
  uint64_t v77;
  int *v78;
  char *v79;
  uint64_t v80;
  int v81;
  _BOOL4 v82;
  _DWORD *v83;
  uint64_t v84;
  uint64_t v85;
  _DWORD *v86;
  uint64_t i;
  _QWORD *v88;
  int v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t v96;
  _QWORD *v100;
  unint64_t v101;
  uint64_t v103;
  unint64_t *v104;
  unint64_t v106;
  uint64_t j;
  unsigned int *v108;
  int v109;
  char *inserted;
  _DWORD *v111;
  unsigned int v112;
  int *v113;
  _QWORD *v114;
  __int16 v115;
  uint64_t v116;
  int v117;
  int *v118;
  void *v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;

  v4 = a2;
  if ((a2 & 0x600) != 0)
    DecomposeMatrixOps((uint64_t)a1, a2 & 0x400);
  v115 = v4;
  if ((v4 & 1) == 0)
    goto LABEL_132;
  v119 = 0;
  v6 = *a1[13];
  if (!v6)
    goto LABEL_132;
  v111 = a3;
  v7 = 0;
  v8 = 0;
  do
  {
    v9 = *(_QWORD *)(v6 + 24);
    if ((v9 & 0x4000) != 0)
    {
      v7 = *(_DWORD *)(v6 + 88);
      v8 = RecordFunctionCall(v7, &v119, v8, 1);
      v9 = *(_QWORD *)(v6 + 24);
    }
    if ((v9 & 0x3FC7) == 0x1300)
      v8 = RecordFunctionCall(v9 >> 46, &v119, v8, 0);
    v6 = *(_QWORD *)(v6 + 8);
  }
  while (v6);
  v10 = *a1[13];
  v11 = (int *)v119;
  v12 = v8;
  if (v10)
  {
    v13 = 0;
    v14 = -1;
    while (1)
    {
      v15 = *(_DWORD *)(v10 + 88);
      if ((_DWORD)v8)
        break;
LABEL_17:
      if ((v14 & 0x80000000) == 0)
        goto LABEL_18;
LABEL_19:
      v10 = *(_QWORD *)(v10 + 8);
      v13 = v15;
      if (!v10)
        goto LABEL_26;
    }
    v16 = 0;
    v17 = v11;
    while (1)
    {
      v18 = *v17;
      v17 += 12;
      if (v18 == v15)
        break;
      if (v8 == ++v16)
        goto LABEL_17;
    }
    if ((v14 & 0x80000000) == 0)
      v11[12 * v14 + 1] = v13;
    v14 = v16;
    if ((v16 & 0x80000000) != 0)
      goto LABEL_19;
LABEL_18:
    AddOpToJumpTable((_QWORD *)(v10 + 24), (uint64_t)&v11[12 * v14]);
    goto LABEL_19;
  }
  v15 = 0;
  v14 = -1;
LABEL_26:
  if (!(_DWORD)v8)
  {
    a3 = v111;
    if (v11)
      goto LABEL_131;
    goto LABEL_132;
  }
  v19 = 0;
  while (v11[v19] != v7)
  {
    v19 += 12;
    if (12 * v8 == v19)
      goto LABEL_35;
  }
  if ((v14 & 0x80000000) == 0)
    v11[12 * v14 + 1] = v15;
LABEL_35:
  if (v8 < 2)
  {
    LODWORD(v8) = 1;
    goto LABEL_128;
  }
  v20 = *a1[13];
  if (!v20)
  {
LABEL_128:
    a3 = v111;
    goto LABEL_129;
  }
  do
  {
    v21 = 0;
    v22 = v11;
    while (1)
    {
      v23 = *v22;
      v22 += 12;
      if (v23 == *(_DWORD *)(v20 + 88))
        break;
      if (v8 == ++v21)
      {
        LODWORD(v21) = -1;
        break;
      }
    }
    v24 = v21;
    v125 = v20;
    v25 = (char *)&v11[12 * (int)v21];
    v26 = (int *)(v25 + 4);
    if (*((_DWORD *)v25 + 8))
    {
      v27 = *v26;
      v28 = 1;
    }
    else
    {
      v28 = RemoveConditionalReturns((uint64_t)a1, (char **)&v125, 0, (_DWORD *)v25 + 1);
      v27 = *v26;
      v29 = 1;
      do
      {
        if (*(_DWORD *)(v20 + 88) == v27)
          break;
        v20 = *(_QWORD *)(v20 + 8);
        ++v29;
      }
      while (v20);
      v30 = v11[12 * v24 + 10];
      if (v30 >= 2)
      {
        v32 = v29 <= 40;
        v31 = v30 * (v29 - 1);
        v32 = !v32 || v31 > 0xC8;
        if (v32)
          v28 = 0;
      }
    }
    v11[12 * v24 + 11] = v28;
    do
    {
      v33 = *(_DWORD *)(v20 + 88);
      v20 = *(_QWORD *)(v20 + 8);
    }
    while (v33 != v27);
  }
  while (v20);
  v34 = *a1[13];
  if (!v34)
    goto LABEL_208;
  v109 = v8;
  do
  {
    v35 = 0;
    v36 = *(_DWORD *)(v34 + 88);
    v37 = v11;
    while (1)
    {
      v38 = *v37;
      v37 += 12;
      if (v38 == v36)
        break;
      if (v12 == ++v35)
      {
        LODWORD(v35) = v12;
        break;
      }
    }
    if ((_DWORD)v35 != (_DWORD)v8)
      v14 = v35;
    if ((*(_QWORD *)(v34 + 24) & 0x3FC7) == 0x1300)
    {
      v39 = 0;
      v40 = v11;
      do
      {
        v41 = *v40;
        v40 += 12;
        if (v41 == *(_QWORD *)(v34 + 24) >> 46)
          goto LABEL_68;
        ++v39;
      }
      while (v12 != v39);
      LODWORD(v39) = v12;
LABEL_68:
      v42 = v39;
      if (!v11[12 * (int)v39 + 11])
      {
        v11[12 * (int)v39 + 9] = 1;
        goto LABEL_103;
      }
      v112 = v14;
      v130 = 0;
      v128 = 0u;
      v129 = 0u;
      v126 = 0u;
      v127 = 0u;
      v125 = 7296;
      v114 = (_QWORD *)v34;
      v8 = v34;
      inserted = PPStreamInsertOperationAfterChunk((uint64_t)a1, (uint64_t)&v125, 0, v34);
      v43 = *(unsigned int *)(*(_QWORD *)(v34 + 8) + 88);
      v44 = (uint64_t)a1[13];
      v118 = &v11[12 * v42];
      do
      {
        v45 = *(_QWORD *)v44;
        v46 = *(_DWORD *)(*(_QWORD *)v44 + 88);
        v44 = *(_QWORD *)v44 + 8;
      }
      while (*v118 != v46);
      v47 = 0;
      v48 = 0;
      v113 = v11;
      v49 = &v11[12 * v42 + 1];
      v116 = v43 << 46;
      v117 = 1;
      v50 = 0xFFFFFFFFLL;
      while (1)
      {
        v123 = 0u;
        v124 = 0u;
        v121 = 0u;
        v122 = 0u;
        v51 = *(_OWORD *)(v45 + 40);
        v52 = *(_OWORD *)(v45 + 56);
        v53 = *(_OWORD *)(v45 + 88);
        v123 = *(_OWORD *)(v45 + 72);
        v124 = v53;
        v121 = v51;
        v122 = v52;
        v120 = *(_OWORD *)(v45 + 24);
        v48 += OperationBlockBoundary(&v120);
        if ((v120 & 0x3FC0) != 0x1340 || v48 < 1)
          break;
        if ((_DWORD)v124 == *v49)
          goto LABEL_77;
        v117 = 0;
        v54 = 0;
        *(_QWORD *)&v120 = v120 & 0x3FFFFFFFC03FLL | v116 | 0x12C0;
LABEL_79:
        v55 = PPStreamInsertOperationAfterChunk((uint64_t)a1, (uint64_t)&v120, (const void *)(v45 + 104), v8);
        v8 = (uint64_t)v55;
        v56 = *((_QWORD *)v55 + 3);
        if (v56 >> 46)
        {
          v57 = (uint64_t)a1[13];
          do
          {
            v58 = *(_QWORD *)v57;
            v59 = *(_DWORD *)(*(_QWORD *)v57 + 88);
            v57 = *(_QWORD *)v57 + 8;
          }
          while (*v118 != v59);
          v60 = v47;
          while (1)
          {
            v61 = *(_DWORD *)(v58 + 88);
            if (v61 == v56 >> 46)
              break;
            v58 = *(_QWORD *)(v58 + 8);
            ++v60;
            if (v61 == *v49)
              goto LABEL_87;
          }
          *((_QWORD *)v55 + 3) = v56 & 0x3FFFFFFFFFFFLL | ((unint64_t)(*((_DWORD *)v55 + 22) + v60) << 46);
        }
LABEL_87:
        if ((_DWORD)v50 == -1)
          v50 = *((unsigned int *)v55 + 22);
        v62 = *(_DWORD *)(v45 + 88);
        v45 = *(_QWORD *)(v45 + 8);
        --v47;
        if (v62 == *v49 || v54)
        {
          v34 = *(_QWORD *)PPStreamRemoveOperation((uint64_t)a1, v114);
          v14 = v112;
          if (v117)
            PPStreamRemoveOperation((uint64_t)a1, inserted);
          v64 = *(_DWORD *)(v8 + 88);
          PPStreamChangeBranchTargets((uint64_t)a1, v36, v50);
          v65 = v113 + 1;
          v66 = v12;
          LODWORD(v8) = v109;
          do
          {
            if (*(v65 - 1) == v36)
              *(v65 - 1) = v50;
            if (*v65 == v36)
              *v65 = v64;
            v65 += 12;
            --v66;
          }
          while (v66);
          v11 = (int *)v119;
          goto LABEL_103;
        }
      }
      if ((v120 & 0x3FC0) != 0x1340)
      {
        v54 = 0;
        goto LABEL_79;
      }
LABEL_77:
      *(_QWORD *)&v120 = v120 & 0xFFFFFFFFFFFFC03FLL | 0x1BC0;
      v54 = v48 == 0;
      goto LABEL_79;
    }
LABEL_103:
    v67 = *a1[13];
    v68 = &v11[12 * v14];
    ClearJumpTable((uint64_t)v68);
    v69 = *v68;
    while (v69 != *(_DWORD *)(v67 + 88))
      v67 = *(_QWORD *)(v67 + 8);
    v70 = (char *)&v11[12 * v14];
    v72 = *((_DWORD *)v70 + 1);
    v71 = v70 + 4;
    v73 = (_QWORD *)(v67 + 24);
    if (v72 != v69)
    {
      do
      {
        AddOpToJumpTable(v73, (uint64_t)v68);
        v67 = *(_QWORD *)(v67 + 8);
        v73 = (_QWORD *)(v67 + 24);
      }
      while (*v71 != *(_DWORD *)(v67 + 88));
    }
    AddOpToJumpTable(v73, (uint64_t)v68);
    if (v34)
      v74 = (uint64_t *)(v34 + 8);
    else
      v74 = a1[13];
    v34 = *v74;
  }
  while (*v74);
  v75 = *a1[13];
  v11 = (int *)v119;
  if (!v75)
  {
LABEL_208:
    v4 = v115;
    a3 = v111;
    if (v11)
      goto LABEL_129;
    goto LABEL_132;
  }
  v76 = 0;
  LODWORD(v77) = 0;
  v78 = (int *)v119;
  v79 = (char *)v119 + 36;
  do
  {
    v80 = *(_QWORD *)(v75 + 8);
    if (v76)
    {
      v81 = *(_DWORD *)(v75 + 88);
    }
    else
    {
      v77 = 0;
      v83 = v79;
      while (1)
      {
        if (!*(v83 - 1) && !*v83)
        {
          v81 = *(v83 - 9);
          if (v81 == *(_DWORD *)(v75 + 88))
            break;
        }
        ++v77;
        v83 += 12;
        if (v8 == v77)
        {
          v82 = 0;
          v76 = 0;
          LODWORD(v77) = v8;
          if ((*(_QWORD *)(v75 + 24) & 0x3FC0) == 0x1BC0)
            goto LABEL_117;
          goto LABEL_118;
        }
      }
    }
    v82 = v78[12 * (int)v77 + 1] != v81;
    PPStreamRemoveLabelsAtOperationIndex((uint64_t)a1, v81);
LABEL_117:
    PPStreamRemoveOperation((uint64_t)a1, (_QWORD *)v75);
    v76 = v82;
LABEL_118:
    v75 = v80;
  }
  while (v80);
  v4 = v115;
  a3 = v111;
  v11 = v78;
LABEL_129:
  v84 = v8;
  v85 = (uint64_t)v11;
  do
  {
    ClearJumpTable(v85);
    v85 += 48;
    --v84;
  }
  while (v84);
LABEL_131:
  free(v11);
LABEL_132:
  if ((v4 & 0x2000) != 0)
  {
    if ((v4 & 8) != 0)
      LocalCopyPropagator((uint64_t)a1);
    SwitchTexOps(a1);
  }
  if ((v4 & 0x102) != 0)
  {
    DetectConstantLoopsSimple(a1);
    if (a3)
      v86 = a3;
    else
      v86 = 0;
    UnrollConstantLoopsSimple((uint64_t)a1, v86);
  }
  if ((v4 & 4) != 0)
  {
    PPStreamPackIndices(a1);
    FlattenIfs((uint64_t)a1);
  }
  if ((v4 & 0x106) != 0)
  {
    for (i = *a1[8]; i; i = *(_QWORD *)(i + 8))
    {
      v88 = (_QWORD *)*a1[13];
      if (v88)
      {
        v89 = 0;
        v90 = *(_DWORD *)(i + 32);
        while (2)
        {
          while (1)
          {
            v91 = v88[3];
            v92 = v91 & 7;
            if ((v91 & 7) != 0)
              break;
LABEL_167:
            v88 = (_QWORD *)v88[1];
            if (!v88)
            {
              if (v89)
              {
                v120 = 0uLL;
                DWORD2(v120) = PPStreamChunkListGetNextIndex(a1[4]);
                LOBYTE(v120) = *(_QWORD *)(i + 24);
                PPStreamAddTempUsage((uint64_t)a1, &v120);
                v100 = (_QWORD *)*a1[13];
                if (v100)
                {
                  do
                  {
                    v101 = v100[4];
                    if ((v101 & 0x7000) == 0x3000 && v90 == HIWORD(v101))
                      v100[4] = v101 & 0xFFFFFFFF8FFFLL | ((unint64_t)DWORD2(v120) << 48) | 0x1000;
                    v103 = v100[3] & 7;
                    if (v103)
                    {
                      v104 = v100 + 5;
                      do
                      {
                        if ((*v104 & 0x1C0) == 0xC0 && v90 == HIWORD(*v104))
                        {
                          v106 = *v104 & 0xFFFFFFFFFFFFFE3FLL | 0x40;
                          *v104 = v106;
                          *v104 = v106 & 0xFFFFFFFFFFFFLL | ((unint64_t)DWORD2(v120) << 48);
                        }
                        ++v104;
                        --v103;
                      }
                      while (v103);
                    }
                    v100 = (_QWORD *)v100[1];
                  }
                  while (v100);
                  for (j = *a1[13]; j; j = *(_QWORD *)(j + 8))
                  {
                    if ((*(_QWORD *)(j + 24) & 0x3FC0) == 0x1340)
                    {
                      v130 = 0;
                      v128 = 0u;
                      v129 = 0u;
                      v127 = 0u;
                      HIDWORD(v129) = *(_DWORD *)(j + 92);
                      __asm { BR              X12 }
                    }
                  }
                }
              }
              goto LABEL_190;
            }
          }
          v93 = v91 & 0x3FC0;
          v94 = v88 + 5;
          do
          {
            v95 = *v94++;
            v96 = HIWORD(v95);
            if ((v95 & 0x1C0) == 0xC0 && v90 == (_DWORD)v96)
            {
LABEL_166:
              v89 = 1;
              goto LABEL_167;
            }
            if (v93 == 7040)
            {
              if (v90 == HIWORD(v88[4]) && (v88[4] & 0x7000) == 12288 || v89 != 0)
                goto LABEL_166;
            }
            else if (v89)
            {
              goto LABEL_166;
            }
            --v92;
          }
          while (v92);
          v89 = 0;
          v88 = (_QWORD *)v88[1];
          if (v88)
            continue;
          break;
        }
      }
LABEL_190:
      ;
    }
  }
  if ((v115 & 0x80) != 0)
    ConstantPropagateFold((uint64_t)a1);
  if ((v115 & 8) != 0)
    LocalCopyPropagator((uint64_t)a1);
  if ((v115 & 0x4060) != 0)
  {
    PPStreamPackIndices(a1);
    v108 = ProgramNew((uint64_t)a1);
    Registerify(v108);
    Blockify((uint64_t)v108);
    BuildGenKill((uint64_t)v108);
    BuildLiveOut((uint64_t)v108);
    if ((v115 & 0x40) != 0)
      goto LABEL_197;
  }
  else
  {
    v108 = 0;
    if ((v115 & 0x40) != 0)
LABEL_197:
      DeadCodeEliminationSimple((uint64_t)v108);
  }
  if ((v115 & 0x4000) == 0)
  {
    if ((v115 & 0x20) == 0)
      goto LABEL_200;
LABEL_204:
    BuildInterferenceSets((uint64_t)v108);
    RegistersMerge((uint64_t)v108);
    if ((v115 & 0x4060) == 0)
      goto LABEL_202;
LABEL_201:
    RegistersCleanup(v108);
    ProgramFree(v108);
    goto LABEL_202;
  }
  BackCopyPropagationSimple((uint64_t)v108);
  if ((v115 & 0x20) != 0)
    goto LABEL_204;
LABEL_200:
  if ((v115 & 0x4060) != 0)
    goto LABEL_201;
LABEL_202:
  PPStreamPackIndices(a1);
}

void LocalCopyPropagator(uint64_t a1)
{
  _QWORD *v2;
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  int v7;
  BOOL v8;
  unsigned int v9;
  BOOL v10;
  int v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  unint64_t v20;
  uint64_t *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int *v31;
  int v32;
  _DWORD *v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  char v38;
  unint64_t v39;
  unint64_t v40;
  int v41;
  int j;
  unint64_t v43;
  unint64_t v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  int v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unsigned int v53;
  unint64_t v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  char v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  char v68;
  char v69;
  int StreamArray;
  _DWORD *MatchingAvailableCopy;
  uint64_t v72;
  _DWORD *v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unsigned int v79;
  _BYTE *v80;
  _BOOL4 v81;
  uint64_t v82;
  unsigned int v83;
  _DWORD *v84;
  int v85;
  _BYTE *v86;
  _DWORD *v87;
  uint64_t v88;
  _DWORD *v89;
  int v90;
  char *v91;
  unsigned int v92;
  char *v93;
  char *v94;
  __int128 v95;
  __int128 v96;
  int v97;
  int *v98;
  char *v99;
  char *v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  unint64_t v106;
  unsigned int v107;
  int v108;
  __int128 v109;
  _BYTE v110[48];
  uint64_t v111;

  v2 = **(_QWORD ***)(a1 + 104);
  v3 = malloc_type_malloc(0x10uLL, 0x7081ABB9uLL);
  if (!v3)
LABEL_123:
    abort();
  v4 = (uint64_t)v3;
  v3[2] = 0;
  *(_QWORD *)v3 = 0;
  if (v2)
  {
    v105 = a1;
    while (1)
    {
      v6 = v2 + 3;
      v5 = v2[3];
      v7 = (v5 >> 6);
      v8 = (v7 - 75) > 0x3D || ((1 << (v7 - 75)) & 0x300043838001FE07) == 0;
      if (!v8)
        break;
      v9 = v7 - 140;
      v10 = v9 > 0x1E;
      v11 = (1 << v9) & 0x4000000F;
      if (!v10 && v11 != 0)
        break;
      v13 = v105;
LABEL_21:
      v18 = (v5 & 7) + ((__int16)v5 >> 15);
      if ((int)v18 >= 1)
      {
        for (i = 0; i != v18; ++i)
        {
          v20 = *(unsigned int *)(v4 + 8);
          if ((_DWORD)v20)
          {
            v21 = &v6[i];
            v24 = v21[2];
            v22 = (unint64_t *)(v21 + 2);
            v23 = v24;
            v25 = (v24 >> 6) & 7;
            v26 = HIWORD(v24);
            v27 = (v24 >> 17) & 3;
            v28 = (v24 >> 19) & 3;
            v29 = 0xFFFFFFFF00000000;
            v30 = 1;
            v31 = *(int **)v4;
            do
            {
              v32 = *v31;
              if (*v31)
              {
                if (v31[1] == v25 && v31[2] == (_DWORD)v26 && v31[15] == v27 && (v23 & 1) == 0)
                  __asm { BR              X7 }
                v32 = 0;
              }
              v29 += 0x100000000;
              if (v30 >= v20)
                break;
              v31 += 18;
              ++v30;
            }
            while (!v32);
            if (v32)
            {
              v34 = (_DWORD *)(*(_QWORD *)v4 + 72 * SHIDWORD(v29));
              v8 = (v23 & 0x10) == 0;
              v35 = v23 & 0xFFFFFFFFFFFFFE3FLL | ((unint64_t)(v34[3] & 7) << 6);
              *v22 = v35;
              v36 = v35 & 0xFFFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)v34[4] << 48);
              *v22 = v36;
              v37 = 16 * v34[14];
              v38 = 16 - v37;
              if (v8)
                v38 = v37;
              v39 = v36 & 0xFFFFFFFFFFFFFFEFLL | v38 & 0x10;
              *v22 = v39;
              __asm { BR              X15 }
            }
          }
        }
      }
      v40 = v2[4];
      if ((v40 & 0x180000) == 0x80000)
      {
        CheckRemoveAvailableCopyTable(v40, 0, 1, (uint64_t *)v4, v13);
        v41 = 2;
      }
      else
      {
        v41 = 1;
      }
      for (j = 0; j != v41; ++j)
        CheckRemoveAvailableCopyTable(v2[4], j, 0, (uint64_t *)v4, v13);
      if ((*v6 & 0x3FC0) == 0)
      {
        v43 = v2[4];
        if ((v43 & 0x100000000) == 0)
        {
          v44 = v2[5];
          if ((v44 & 1) == 0)
          {
            v45 = ((v44 >> 6) ^ (v43 >> 12)) & 7;
            v46 = HIWORD(v43);
            v47 = HIWORD(v44);
            if (v45 || (_DWORD)v46 != (_DWORD)v47)
            {
              v49 = 0;
              v103 = ((unint64_t)*v6 >> 34) & 3;
              v104 = v2;
LABEL_55:
              v50 = 0;
              v51 = v2[3];
              v52 = v2[4];
              v53 = (v52 >> 12) & 7;
              v54 = v2[5];
              v55 = (v54 >> 6) & 7;
              *(_DWORD *)&v110[44] = 0;
              memset(&v110[8], 0, 32);
              v106 = v51;
              v56 = (v51 >> 36) & 3;
              v57 = v52 >> 15;
              LODWORD(v109) = 1;
              DWORD1(v109) = v53;
              v58 = v49 + HIWORD(v52);
              v59 = v52 >> 29;
              v60 = BYTE2(v52);
              *((_QWORD *)&v109 + 1) = __PAIR64__(v55, v58);
              v108 = v49;
              v61 = v49 + HIWORD(v54);
              v62 = v52 >> 27;
              *(_DWORD *)&v110[40] = (v54 >> 4) & 1;
              v63 = v52 >> 17;
              v64 = v52 >> 25;
              *(_DWORD *)v110 = v61;
              *(_DWORD *)&v110[4] = v56;
              v65 = v52 >> 18;
              v66 = v52 >> 23;
              v67 = v54 >> 9;
              while (2)
              {
                v68 = v65;
                v69 = v66;
                switch((int)v50)
                {
                  case 0:
                    goto LABEL_63;
                  case 1:
                    v68 = v63;
                    v69 = v64;
                    goto LABEL_63;
                  case 2:
                    v68 = v60;
                    v69 = v62;
                    goto LABEL_63;
                  case 3:
                    v68 = v57;
                    v69 = v59;
LABEL_63:
                    *(_DWORD *)&v110[4 * v50 + 24] = v68 & 1;
                    __asm { BR              X23 }
                    return;
                  default:
                    *(_DWORD *)&v110[4 * v50 + 24] = 0;
                    *(_DWORD *)&v110[4 * v50++ + 8] = v67 & 3;
                    if (v50 != 4)
                      continue;
                    LODWORD(v111) = GetStreamArray(v53, v58, v105);
                    StreamArray = GetStreamArray(v55, v61, v105);
                    HIDWORD(v111) = StreamArray;
                    if (v108 || (v106 & 0xC00000000) == 0)
                      goto LABEL_73;
                    *(_DWORD *)&v110[44] = 1;
                    MatchingAvailableCopy = FindMatchingAvailableCopy(&v109, v4);
                    if (MatchingAvailableCopy)
                    {
                      v72 = 0;
                      v73 = MatchingAvailableCopy + 10;
                      do
                      {
                        if (*(_DWORD *)&v110[v72 * 4 + 24] == 1)
                        {
                          if (!v73[v72])
                          {
                            ++MatchingAvailableCopy[5];
                            v73[v72] = 1;
                          }
                          v73[v72 - 4] = *(_DWORD *)&v110[v72 * 4 + 8];
                        }
                        ++v72;
                      }
                      while (v72 != 4);
LABEL_73:
                      v74 = *(_DWORD *)(v4 + 8);
                    }
                    else
                    {
                      v97 = *(_DWORD *)(v4 + 8);
                      v98 = *(int **)v4;
                      if ((v97 & 7) == 0)
                      {
                        v99 = (char *)malloc_type_realloc(v98, 72 * (v97 + 8), 0x2BDC8648uLL);
                        if (!v99)
                          goto LABEL_123;
                        *(_QWORD *)v4 = v99;
                        bzero(&v99[72 * *(unsigned int *)(v4 + 8)], 0x240uLL);
                        v98 = *(int **)v4;
                        v97 = *(_DWORD *)(v4 + 8);
                      }
                      v100 = (char *)&v98[18 * v97];
                      v101 = *(_OWORD *)&v110[32];
                      *((_OWORD *)v100 + 2) = *(_OWORD *)&v110[16];
                      *((_OWORD *)v100 + 3) = v101;
                      *((_QWORD *)v100 + 8) = v111;
                      v102 = *(_OWORD *)v110;
                      *(_OWORD *)v100 = v109;
                      *((_OWORD *)v100 + 1) = v102;
                      v74 = *(_DWORD *)(v4 + 8) + 1;
                      *(_DWORD *)(v4 + 8) = v74;
                    }
                    *(_DWORD *)&v110[44] = 0;
                    v107 = v74;
                    if (v74)
                    {
                      v75 = *(_QWORD *)v4;
                      v76 = v74;
                      while (1)
                      {
                        v77 = 0;
                        while (1)
                        {
                          if (*(_DWORD *)(v75 + 72 * v77)
                            && *(_DWORD *)(v75 + 72 * v77 + 4) == v55
                            && *(_DWORD *)(v75 + 72 * v77 + 8) == v61)
                          {
                            v78 = 0;
                            v79 = 0;
                            do
                            {
                              if (v79 <= v56 && (v80 = &v110[4 * v78 - 16], *((_DWORD *)v80 + 10)))
                              {
                                ++v79;
                                v81 = *(_DWORD *)(v75 + 72 * v77 + 4 * *((unsigned int *)v80 + 6) + 40) == 1;
                              }
                              else
                              {
                                v81 = 1;
                              }
                              if (v78 > 2)
                                break;
                              ++v78;
                            }
                            while (v81);
                            if (v81)
                              break;
                          }
                          if (++v77 == v76)
                            goto LABEL_99;
                        }
                        v82 = 0;
                        v83 = 0;
                        v84 = (_DWORD *)(v75 + 72 * v77);
                        v55 = v84[3];
                        v61 = v84[4];
                        v85 = v84[14];
                        if (*(_DWORD *)&v110[40])
                          v85 = 1 - v85;
                        *(_DWORD *)&v110[40] = v85;
                        do
                        {
                          if (v83 <= v56 && (v86 = &v110[4 * v82 - 16], *((_DWORD *)v86 + 10)))
                          {
                            ++v83;
                            *((_DWORD *)v86 + 6) = *(_DWORD *)(v75 + 72 * v77 + 4 * *((unsigned int *)v86 + 6) + 24);
                          }
                          else
                          {
                            *(_DWORD *)&v110[4 * v82 + 8] = v82;
                          }
                          ++v82;
                        }
                        while (v82 != 4);
                        HIDWORD(v111) = GetStreamArray(v55, v61, v105);
                      }
                    }
LABEL_99:
                    HIDWORD(v109) = v55;
                    *(_DWORD *)v110 = v61;
                    v87 = FindMatchingAvailableCopy(&v109, v4);
                    v2 = v104;
                    if (v87)
                    {
                      v88 = 0;
                      v89 = v87 + 10;
                      v90 = v108;
                      do
                      {
                        if (*(_DWORD *)&v110[v88 * 4 + 24] == 1)
                        {
                          if (!v89[v88])
                          {
                            ++v87[5];
                            v89[v88] = 1;
                          }
                          v89[v88 - 4] = *(_DWORD *)&v110[v88 * 4 + 8];
                        }
                        ++v88;
                      }
                      while (v88 != 4);
                    }
                    else
                    {
                      v91 = *(char **)v4;
                      v92 = v107;
                      v90 = v108;
                      if ((v107 & 7) == 0)
                      {
                        v93 = (char *)malloc_type_realloc(v91, 72 * (v107 + 8), 0x2BDC8648uLL);
                        if (!v93)
                          goto LABEL_123;
                        *(_QWORD *)v4 = v93;
                        bzero(&v93[72 * *(unsigned int *)(v4 + 8)], 0x240uLL);
                        v91 = *(char **)v4;
                        v92 = *(_DWORD *)(v4 + 8);
                      }
                      v94 = &v91[72 * v92];
                      v95 = *(_OWORD *)&v110[32];
                      *((_OWORD *)v94 + 2) = *(_OWORD *)&v110[16];
                      *((_OWORD *)v94 + 3) = v95;
                      *((_QWORD *)v94 + 8) = v111;
                      v96 = *(_OWORD *)v110;
                      *(_OWORD *)v94 = v109;
                      *((_OWORD *)v94 + 1) = v96;
                      ++*(_DWORD *)(v4 + 8);
                    }
                    v49 = v90 + 1;
                    if (v90 == (_DWORD)v103)
                      goto LABEL_117;
                    goto LABEL_55;
                }
              }
            }
          }
        }
      }
LABEL_117:
      v2 = (_QWORD *)v2[1];
      if (!v2)
      {
        if (*(_QWORD *)v4)
          free(*(void **)v4);
        goto LABEL_122;
      }
    }
    v13 = v105;
    if (!*(_DWORD *)(v4 + 8))
      goto LABEL_21;
    v14 = 0;
    v15 = 0;
    while (1)
    {
      v16 = *(_QWORD *)v4;
      v17 = *(_QWORD *)v4 + v14;
      if (*(_DWORD *)(v17 + 12) != 2)
        goto LABEL_18;
      if ((*(_QWORD *)(PPStreamChunkListChunkAtIndex(*(uint64_t **)(v105 + 56), *(_DWORD *)(v17 + 16)) + 24) & 0x400000001F00) != 0x400000000200)
        break;
LABEL_19:
      ++v15;
      v14 += 72;
      if (v15 >= *(unsigned int *)(v4 + 8))
      {
        v5 = *v6;
        goto LABEL_21;
      }
    }
    v16 = *(_QWORD *)v4;
LABEL_18:
    *(_DWORD *)(v16 + v14) = 0;
    goto LABEL_19;
  }
LABEL_122:
  free((void *)v4);
}

unsigned __int16 *glpPPShaderLinearize(unsigned int *a1, __int16 a2)
{
  return glpPPShaderLinearizeEx(a1, a2, 0);
}

unsigned __int16 *glpPPShaderLinearizeEx(unsigned int *a1, __int16 a2, _DWORD *a3)
{
  __int16 v5;
  uint64_t **v7;
  unsigned __int16 *Stream;
  size_t v9;
  unsigned __int16 *v10;
  int v12;

  v5 = a2 & 0x67EF;
  if ((a2 & 0x67EF) != 0)
  {
    v12 = 0;
    v7 = (uint64_t **)PPStreamCreate();
    PPStreamAttachStream((uint64_t)v7, (uint64_t)a1);
    glpPPShaderLinearizeStreamMgrEx(v7, v5, a3);
    Stream = PPStreamGetStream((uint64_t)v7, &v12);
    PPStreamFree((_DWORD **)v7);
    if ((a2 & 0x800) == 0)
      return Stream;
    goto LABEL_7;
  }
  if ((a2 & 0x1800) == 0)
  {
    Stream = 0;
    if ((a2 & 0x800) == 0)
      return Stream;
    goto LABEL_7;
  }
  v9 = 8 * a1[6];
  v10 = (unsigned __int16 *)malloc_type_malloc(v9, 0x7081ABB9uLL);
  if (!v10)
    abort();
  Stream = v10;
  memcpy(v10, a1, v9);
  if ((a2 & 0x800) != 0)
LABEL_7:
    PPStreamTokenConvertParamBindings((unint64_t)Stream);
  return Stream;
}

void glpFreePPShaderLinearize(void *a1)
{
  if (a1)
    free(a1);
}

uint64_t RecordFunctionCall(int a1, _QWORD *a2, uint64_t a3, int a4)
{
  uint64_t v5;
  uint64_t v8;
  _DWORD *v9;
  char *v10;
  int v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;

  v5 = a3;
  if ((_DWORD)a3)
  {
    v8 = 0;
    v9 = (_DWORD *)(*a2 + 40);
    while (*(v9 - 10) != a1)
    {
      ++v8;
      v9 += 12;
      if (a3 == v8)
        goto LABEL_9;
    }
    ++*v9;
  }
  else
  {
    LODWORD(v8) = 0;
  }
  if ((_DWORD)v8 == (_DWORD)a3)
  {
LABEL_9:
    v10 = (char *)*a2;
    if ((a3 & 0x7F) != 0)
    {
      v11 = a3;
    }
    else
    {
      v12 = (char *)malloc_type_realloc(v10, 48 * (a3 + 128), 0x2BDC8648uLL);
      if (!v12)
        abort();
      *a2 = v12;
      v13 = &v12[48 * v5];
      v14 = -6144;
      v11 = v5;
      do
      {
        v15 = &v13[v14];
        *((_QWORD *)v15 + 768) = -1;
        v16 = &v13[v14 + 6152];
        *((_QWORD *)v15 + 773) = 0;
        *(_OWORD *)v16 = 0uLL;
        *((_OWORD *)v16 + 1) = 0uLL;
        v14 += 48;
      }
      while (v14);
      v10 = (char *)*a2;
    }
    v17 = &v10[48 * v11];
    *(_DWORD *)v17 = a1;
    *((_DWORD *)v17 + 8) = a4;
    *((_DWORD *)v17 + 10) = 1;
    return (v5 + 1);
  }
  return v5;
}

_QWORD *AddOpToJumpTable(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  char *v7;
  char *v8;
  _OWORD *v9;
  uint64_t v10;

  v3 = result;
  ++*(_DWORD *)(a2 + 8);
  v4 = (*result >> 6);
  v5 = (v4 - 75);
  if (v5 > 0x21)
    goto LABEL_11;
  if (((1 << (v4 - 75)) & 0x38001BE01) == 0)
  {
    if (v5 == 1)
    {
      if ((*result & 7) == 1)
        return result;
      goto LABEL_3;
    }
LABEL_11:
    if (v4 != 140)
      return result;
  }
LABEL_3:
  v6 = *(_DWORD *)(a2 + 12);
  if ((v6 & 0x7F) == 0)
  {
    v7 = (char *)malloc_type_realloc(*(void **)(a2 + 16), 4 * (v6 + 128), 0x2BDC8648uLL);
    if (!v7)
      goto LABEL_13;
    *(_QWORD *)(a2 + 16) = v7;
    v8 = &v7[4 * *(unsigned int *)(a2 + 12)];
    *((_OWORD *)v8 + 30) = 0u;
    *((_OWORD *)v8 + 31) = 0u;
    *((_OWORD *)v8 + 28) = 0u;
    *((_OWORD *)v8 + 29) = 0u;
    *((_OWORD *)v8 + 26) = 0u;
    *((_OWORD *)v8 + 27) = 0u;
    *((_OWORD *)v8 + 24) = 0u;
    *((_OWORD *)v8 + 25) = 0u;
    *((_OWORD *)v8 + 22) = 0u;
    *((_OWORD *)v8 + 23) = 0u;
    *((_OWORD *)v8 + 20) = 0u;
    *((_OWORD *)v8 + 21) = 0u;
    *((_OWORD *)v8 + 18) = 0u;
    *((_OWORD *)v8 + 19) = 0u;
    *((_OWORD *)v8 + 16) = 0u;
    *((_OWORD *)v8 + 17) = 0u;
    *((_OWORD *)v8 + 14) = 0u;
    *((_OWORD *)v8 + 15) = 0u;
    *((_OWORD *)v8 + 12) = 0u;
    *((_OWORD *)v8 + 13) = 0u;
    *((_OWORD *)v8 + 10) = 0u;
    *((_OWORD *)v8 + 11) = 0u;
    *((_OWORD *)v8 + 8) = 0u;
    *((_OWORD *)v8 + 9) = 0u;
    *((_OWORD *)v8 + 6) = 0u;
    *((_OWORD *)v8 + 7) = 0u;
    *((_OWORD *)v8 + 4) = 0u;
    *((_OWORD *)v8 + 5) = 0u;
    *((_OWORD *)v8 + 2) = 0u;
    *((_OWORD *)v8 + 3) = 0u;
    *(_OWORD *)v8 = 0u;
    *((_OWORD *)v8 + 1) = 0u;
    result = malloc_type_realloc(*(void **)(a2 + 24), 4 * (*(_DWORD *)(a2 + 12) + 128), 0x2BDC8648uLL);
    if (!result)
LABEL_13:
      abort();
    *(_QWORD *)(a2 + 24) = result;
    v9 = (_OWORD *)((char *)result + 4 * *(unsigned int *)(a2 + 12));
    v9[30] = 0u;
    v9[31] = 0u;
    v9[28] = 0u;
    v9[29] = 0u;
    v9[26] = 0u;
    v9[27] = 0u;
    v9[24] = 0u;
    v9[25] = 0u;
    v9[22] = 0u;
    v9[23] = 0u;
    v9[20] = 0u;
    v9[21] = 0u;
    v9[18] = 0u;
    v9[19] = 0u;
    v9[16] = 0u;
    v9[17] = 0u;
    v9[14] = 0u;
    v9[15] = 0u;
    v9[12] = 0u;
    v9[13] = 0u;
    v9[10] = 0u;
    v9[11] = 0u;
    v9[8] = 0u;
    v9[9] = 0u;
    v9[6] = 0u;
    v9[7] = 0u;
    v9[4] = 0u;
    v9[5] = 0u;
    v9[2] = 0u;
    v9[3] = 0u;
    *v9 = 0u;
    v9[1] = 0u;
    v6 = *(_DWORD *)(a2 + 12);
  }
  v10 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(*(_QWORD *)(a2 + 16) + 4 * v6) = *((_DWORD *)v3 + 16);
  *(_DWORD *)(v10 + 4 * (*(_DWORD *)(a2 + 12))++) = *v3 >> 46;
  return result;
}

void ClearJumpTable(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 12;
  if (*(_DWORD *)(a1 + 12))
  {
    free(*(void **)(a1 + 16));
    free(*(void **)(a1 + 24));
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    *(_DWORD *)(v2 + 16) = 0;
  }
  *(_DWORD *)(a1 + 8) = 0;
}

uint64_t RemoveConditionalReturns(uint64_t a1, char **a2, uint64_t a3, _DWORD *a4)
{
  char *v5;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  char *v13;

  v5 = *a2;
  if (*a2)
  {
    LODWORD(v9) = 0;
    while (*((_DWORD *)v5 + 22) != *a4)
    {
      v10 = v5 + 24;
      if ((_DWORD)v9 || (*v10 & 0x3FC0) != 0x1540)
      {
        v11 = OperationBlockBoundary((_DWORD *)v5 + 6);
        if (v11)
        {
          LODWORD(v9) = v11 + v9;
        }
        else if ((int)v9 > (int)a3 && (*v10 & 0x3FC0) == 0x1340)
        {
          return 0;
        }
      }
      else
      {
        v13 = v5;
        v9 = 0;
        if (!RemoveReturnsFromIfStatement(a1, &v13, a3, 1, a4))
          return v9;
        v5 = v13;
      }
      v5 = (char *)*((_QWORD *)v5 + 1);
      if (!v5)
        break;
    }
  }
  *a2 = v5;
  return 1;
}

uint64_t RemoveReturnsFromIfStatement(uint64_t a1, char **a2, uint64_t a3, int a4, _DWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v9;
  _BOOL4 v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t result;
  BOOL v17;
  uint64_t *v18;
  int v19;
  _QWORD *v20;
  char *j;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int i;
  uint64_t v27;
  char *inserted;
  _QWORD *v29;
  char *v30;
  char *v31;
  char *v32;
  char **v34;
  char *v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;

  v5 = *a2;
  v6 = *((_QWORD *)*a2 + 1);
  if (!v6)
  {
LABEL_29:
    *a2 = (char *)v6;
    return 1;
  }
  v34 = a2;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = a3;
  do
  {
    v14 = *(_QWORD *)(v6 + 24);
    if ((v14 & 0x3FC0) == 0x1640)
      break;
    v15 = (v14 >> 6);
    switch(v15)
    {
      case 'M':
        if ((int)v13 > 0)
          return 0;
        v13 = 0;
        v17 = !v10;
        v10 = v10;
        if (v17)
          v12 = 1;
        if (!v17)
          v11 = 1;
        break;
      case 'X':
        v10 = 1;
        v9 = (_QWORD *)v6;
        break;
      case 'U':
        v37 = v6;
        result = RemoveReturnsFromIfStatement(a1, &v37, v13, 0, a5);
        if (!(_DWORD)result)
          return result;
        v6 = v37;
        break;
      default:
        v13 = OperationBlockBoundary((_DWORD *)(v6 + 24)) + v13;
        break;
    }
    v6 = *(_QWORD *)(v6 + 8);
    if ((int)v13 < (int)a3)
      break;
  }
  while (v6);
  if (!(v12 | v11))
  {
    a2 = v34;
    goto LABEL_29;
  }
  if (v10)
  {
    if (v12 && v11)
    {
      if (v5)
      {
        v18 = (uint64_t *)v34;
        do
        {
          if ((v5[3] & 0x3FC0) == 0x1340)
            break;
          v5 = (_QWORD *)v5[1];
        }
        while (v5);
      }
      else
      {
        v18 = (uint64_t *)v34;
      }
      for (; v5 != v9; v5 = (_QWORD *)PPStreamRemoveOperation(a1, v5))
        ;
      if (v9)
      {
        v29 = v9;
        do
        {
          if ((v29[3] & 0x3FC0) == 0x1340)
            break;
          v29 = (_QWORD *)v29[1];
        }
        while (v29);
      }
      else
      {
        v29 = 0;
      }
      for (; v29 != (_QWORD *)v6; v29 = (_QWORD *)PPStreamRemoveOperation(a1, v29))
        ;
      v42 = 0;
      v41 = 0u;
      v40 = 0u;
      v39 = 0u;
      v38 = 0u;
      v37 = 4928;
      v9[3] = v9[3] & 0x3FFFFFFFFFFFLL | ((unint64_t)*((unsigned int *)PPStreamInsertOperationAfterChunk(a1, (uint64_t)&v37, 0, v6)+ 22) << 46);
      *v18 = v6;
      return 1;
    }
    result = 0;
    if (a4 && v12 && !v11)
    {
      if (v5)
      {
        while ((v5[3] & 0x3FC0) != 0x1340)
        {
          v5 = (_QWORD *)v5[1];
          if (!v5)
            goto LABEL_55;
        }
        while (v5 != v9)
        {
          v24 = PPStreamRemoveOperation(a1, v5);
          if (!v24)
            break;
          v5 = (_QWORD *)v24;
        }
      }
LABEL_55:
      v25 = PPStreamRemoveOperation(a1, (_QWORD *)v6);
      for (i = *(_DWORD *)(v25 + 88); i != *a5; i = *(_DWORD *)(v25 + 88))
        v25 = *(_QWORD *)(v25 + 8);
      v42 = 0;
      v41 = 0u;
      v40 = 0u;
      v39 = 0u;
      v38 = 0u;
      v37 = 5696;
      v27 = *(_QWORD *)(v25 + 24);
      if ((v27 & 0x3FC0) == 0x2200)
      {
        v25 = *(_QWORD *)v25;
        v27 = *(_QWORD *)(v25 + 24);
      }
      if ((v27 & 0x3FC0) == 0x1340)
      {
        inserted = PPStreamInsertOperationBeforeChunk(a1, (uint64_t)&v37, 0, v25);
        v9[3] = v9[3] & 0x3FFFFFFFFFFFLL | ((unint64_t)*(unsigned int *)(v25 + 88) << 46);
        *v34 = inserted;
      }
      else
      {
        v31 = PPStreamInsertOperationAfterChunk(a1, (uint64_t)&v37, 0, v25);
        *v34 = v31;
        HIDWORD(v41) = 0;
        LODWORD(v42) = 0;
        v38 = 0u;
        v39 = 0u;
        *(_QWORD *)&v40 = 0;
        v37 = 4928;
        v32 = PPStreamInsertOperationAfterChunk(a1, (uint64_t)&v37, 0, (uint64_t)v31);
        v9[3] = v9[3] & 0x3FFFFFFFFFFFLL | ((unint64_t)*((unsigned int *)v32 + 22) << 46);
        *a5 = *((_DWORD *)v32 + 22);
      }
      return 1;
    }
  }
  else
  {
    if (!a4)
      return 0;
    v36 = *(char **)(v6 + 8);
    v19 = RemoveConditionalReturns(a1, &v36, a3, a5);
    if (v19)
    {
      v20 = *v34;
      if (*v34)
      {
        do
        {
          if ((v20[3] & 0x3FC0) == 0x1340)
            break;
          v20 = (_QWORD *)v20[1];
        }
        while (v20);
      }
      v42 = 0;
      v41 = 0u;
      v40 = 0u;
      v39 = 0u;
      v38 = 0u;
      v37 = 5632;
      for (j = PPStreamInsertOperationBeforeChunk(a1, (uint64_t)&v37, 0, (uint64_t)v20);
            v20;
            v20 = (_QWORD *)PPStreamRemoveOperation(a1, v20))
      {
        if (v20 == (_QWORD *)v6)
          break;
      }
      v5[3] = v5[3] & 0x3FFFFFFFFFFFLL | ((unint64_t)*(unsigned int *)(PPStreamRemoveOperation(a1, v20) + 88) << 46);
      HIDWORD(v41) = 0;
      LODWORD(v42) = 0;
      *(_QWORD *)&v40 = 0;
      v38 = 0u;
      v39 = 0u;
      v37 = 5696;
      v22 = v36;
      v23 = *((_QWORD *)v36 + 3);
      if ((v23 & 0x3FC0) == 0x2200)
      {
        v22 = *(char **)v36;
        v23 = *(_QWORD *)(*(_QWORD *)v36 + 24);
      }
      if ((v23 & 0x3FC0) == 0x1340)
      {
        *v34 = PPStreamInsertOperationBeforeChunk(a1, (uint64_t)&v37, 0, (uint64_t)v22);
      }
      else
      {
        v30 = PPStreamInsertOperationAfterChunk(a1, (uint64_t)&v37, 0, (uint64_t)v22);
        *v34 = v30;
        HIDWORD(v41) = 0;
        LODWORD(v42) = 0;
        v38 = 0u;
        v39 = 0u;
        *(_QWORD *)&v40 = 0;
        v37 = 4928;
        v22 = PPStreamInsertOperationAfterChunk(a1, (uint64_t)&v37, 0, (uint64_t)v30);
        *a5 = *((_DWORD *)v22 + 22);
      }
      *((_QWORD *)j + 3) = *((_QWORD *)j + 3) & 0x3FFFFFFFFFFFLL | ((unint64_t)*((unsigned int *)v22 + 22) << 46);
    }
    return v19 != 0;
  }
  return result;
}

uint64_t OperationBlockBoundary(_DWORD *a1)
{
  unsigned int v1;

  v1 = (*a1 >> 6) - 85;
  if (v1 <= 0x3A)
  {
    if (((1 << v1) & 0x80000000400007) != 0)
      return 1;
    if (((1 << v1) & 0x400000000800070) != 0)
      return 0xFFFFFFFFLL;
  }
  return 0;
}

uint64_t CheckRemoveAvailableCopyTable(unint64_t a1, int a2, int a3, uint64_t *a4, uint64_t a5)
{
  unsigned int v8;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  _DWORD *v18;
  uint64_t v19;
  int v20;
  int v21;
  unsigned int v23;
  unint64_t v25;
  BOOL v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  int v30;
  BOOL v31;
  unsigned int v32;
  unint64_t v34;
  BOOL v35;
  unsigned int v36;

  v8 = a1;
  v9 = HIWORD(a1);
  if ((a1 & 0x100000000) != 0)
    result = GetStreamArray((a1 >> 12) & 7, (int)v9 + a2, a5);
  else
    result = 0xFFFFFFFFLL;
  v11 = *((unsigned int *)a4 + 2);
  if ((_DWORD)v11)
  {
    v12 = 0;
    v13 = (v8 >> 12) & 7;
    v14 = v9 + a2;
    v15 = *a4;
    v16 = *a4 + 40;
    for (i = *a4 + 24; ; i += 72)
    {
      v18 = (_DWORD *)(v15 + 72 * v12);
      if (!*v18)
        goto LABEL_60;
      if ((result & 0x80000000) == 0 && (_DWORD)result == *(_DWORD *)(v15 + 72 * v12 + 64))
        goto LABEL_32;
      v19 = v15 + 72 * v12;
      v20 = *(_DWORD *)(v19 + 60);
      v21 = *(_DWORD *)(v19 + 4);
      if (v20 && v21 == v13)
        break;
      if (v21 == v13)
        goto LABEL_17;
LABEL_33:
      if ((result & 0x80000000) == 0 && (_DWORD)result == *(_DWORD *)(v15 + 72 * v12 + 68))
        goto LABEL_59;
      v28 = v15 + 72 * v12;
      v29 = *(_DWORD *)(v28 + 60);
      v30 = *(_DWORD *)(v28 + 12);
      if (v29)
        v31 = v30 == v13;
      else
        v31 = 0;
      if (v31)
      {
        v32 = *(_DWORD *)(v15 + 72 * v12 + 16);
        if (v32 > v14 || v14 > *(_DWORD *)(v15 + 72 * v12 + 20) + v32)
        {
LABEL_43:
          if (v29 == a3 && *(_DWORD *)(v15 + 72 * v12 + 16) == v14)
          {
            v34 = 0;
            v35 = 1;
            do
            {
              if (*(_DWORD *)(v16 + 4 * v34))
              {
                v36 = v8 >> 18;
                switch(*(_DWORD *)(i + 4 * v34))
                {
                  case 0:
                    goto LABEL_54;
                  case 1:
                    if ((v8 & 0x20000) == 0)
                      break;
                    goto LABEL_58;
                  case 2:
                    LOBYTE(v36) = BYTE2(v8);
LABEL_54:
                    if ((v36 & 1) == 0)
                      break;
                    goto LABEL_58;
                  case 3:
                    if ((v8 & 0x8000) == 0)
                      break;
LABEL_58:
                    if (v35)
                      goto LABEL_59;
                    goto LABEL_60;
                  default:
                    break;
                }
              }
              v35 = v34++ < 3;
            }
            while (v34 != 4);
          }
          goto LABEL_60;
        }
LABEL_59:
        *v18 = 0;
        goto LABEL_60;
      }
      if (v30 == v13)
        goto LABEL_43;
LABEL_60:
      ++v12;
      v16 += 72;
      if (v12 == v11)
        return result;
    }
    v23 = *(_DWORD *)(v15 + 72 * v12 + 8);
    if (v23 > v14 || v14 > *(_DWORD *)(v15 + 72 * v12 + 20) + v23)
    {
LABEL_17:
      if (v20 == a3 && *(_DWORD *)(v15 + 72 * v12 + 8) == v14)
      {
        v25 = 0;
        v26 = 1;
        while (2)
        {
          v27 = v8 >> 18;
          switch((int)v25)
          {
            case 0:
              goto LABEL_27;
            case 1:
              if ((v8 & 0x20000) != 0)
                goto LABEL_31;
              goto LABEL_28;
            case 2:
              LOBYTE(v27) = BYTE2(v8);
LABEL_27:
              if ((v27 & 1) == 0)
                goto LABEL_28;
              goto LABEL_31;
            case 3:
              if ((v8 & 0x8000) == 0)
                goto LABEL_28;
LABEL_31:
              if (v26)
                goto LABEL_32;
              goto LABEL_33;
            default:
LABEL_28:
              v26 = v25++ < 3;
              if (v25 == 4)
                goto LABEL_33;
              continue;
          }
        }
      }
      goto LABEL_33;
    }
LABEL_32:
    *v18 = 0;
    goto LABEL_33;
  }
  return result;
}

uint64_t GetStreamArray(int a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;

  if (a1 != 2)
  {
    if (a1 == 1)
    {
      v3 = **(_QWORD **)(a3 + 80);
      if (v3)
      {
        result = 0;
        while (1)
        {
          v5 = *(_QWORD *)(v3 + 24);
          if (a2 >= WORD1(v5) && HIWORD(v5) >= a2)
            break;
          result = (result + 1);
          v3 = *(_QWORD *)(v3 + 8);
          if (!v3)
            return 0xFFFFFFFFLL;
        }
        return result;
      }
    }
    return 0xFFFFFFFFLL;
  }
  v7 = **(_QWORD **)(a3 + 72);
  if (!v7)
    return 0xFFFFFFFFLL;
  result = 0;
  while (1)
  {
    v8 = *(_QWORD *)(v7 + 24);
    if (a2 >= WORD1(v8) && HIWORD(v8) >= a2)
      break;
    result = (result + 1);
    v7 = *(_QWORD *)(v7 + 8);
    if (!v7)
      return 0xFFFFFFFFLL;
  }
  return result;
}

_DWORD *FindMatchingAvailableCopy(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  _DWORD *result;

  v2 = *(unsigned int *)(a2 + 8);
  if (!(_DWORD)v2)
    return 0;
  for (result = *(_DWORD **)a2;
        !*result
     || result[1] != a1[1]
     || result[2] != a1[2]
     || result[3] != a1[3]
     || result[4] != a1[4]
     || result[14] != a1[14]
     || result[15] != a1[15];
        result += 18)
  {
    if (!--v2)
      return 0;
  }
  return result;
}

uint64_t gleAttribBindingSize(int a1)
{
  return (8 * a1 + 8);
}

void *gleCopyParamBindings(_DWORD *a1, _QWORD *a2)
{
  size_t v4;
  _DWORD *v5;

  v4 = (16 * a1[1] + 8 * *a1);
  v5 = malloc_type_malloc(v4 + 16, 0x7081ABB9uLL);
  if (!v5)
    abort();
  *a2 = v5;
  *(_QWORD *)v5 = *(_QWORD *)a1;
  v5[2] = a1[2];
  return memcpy(v5 + 4, a1 + 4, v4);
}

void *gleCopyAttribBindings(_DWORD *a1, _QWORD *a2)
{
  size_t v4;
  void *v5;

  v4 = 8 * *a1 + 8;
  v5 = malloc_type_malloc(v4, 0x7081ABB9uLL);
  if (!v5)
    abort();
  *a2 = v5;
  return memcpy(v5, a1, v4);
}

char *glpCallVertexStateToLLVMIR(__int128 *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, _DWORD *a6)
{
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _DWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _QWORD v37[2];
  _WORD v38[942];
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _OWORD v43[2];
  __int16 v44;
  __int16 v45;
  uint64_t (*v46)();
  _DWORD *v47;
  unsigned int v48;
  char v49;

  v11 = *((_QWORD *)a1 + 4);
  v12 = *(_QWORD *)a1;
  v13 = *((_QWORD *)a1 + 1);
  *(_QWORD *)a1 &= ~0x2000000000000000uLL;
  bzero(v38, 0x7E8uLL);
  *(_QWORD *)&v14 = -1;
  *((_QWORD *)&v14 + 1) = -1;
  *(_OWORD *)((char *)v43 + 14) = v14;
  v42 = v14;
  v43[0] = v14;
  v40 = v14;
  v41 = v14;
  v39 = v14;
  memset(&v38[2], 255, 0x754uLL);
  v48 = ((v11 >> 1) & 0x800 | (((v11 >> 8) & 3) << 9) | (v13 >> 21) & 0x1F8) ^ 0x401;
  v37[0] = 0;
  v37[1] = &v49;
  v38[824] = 4096;
  v46 = gleVStateProgram_IgnoreOption;
  gleVStateProgram_AllocateOutputs((uint64_t *)a1, (uint64_t)v37);
  if ((v12 & 0x100) == 0)
    gleVStateProgram_GetAttrib((uint64_t)v37, 0);
  gleVStateProgram_Core((unint64_t *)a1, (uint64_t)v37);
  v15 = v48;
  if ((v48 & 1) == 0)
  {
    v16 = **(_QWORD **)(v37[0] + 104);
    if (v16)
    {
      *(_QWORD *)(v16 + 24) |= 0x4000uLL;
      v15 = v48;
    }
  }
  v46 = gleVStateProgram_LLVMAddOperation;
  if ((v15 & 1) == 0)
    gleVStateProgram_AllocateOutputs((uint64_t *)a1, (uint64_t)v37);
  if ((*(_QWORD *)a1 & 0x100) == 0)
    gleVStateProgram_GetAttrib((uint64_t)v37, 0);
  gleVStateProgram_Core((unint64_t *)a1, (uint64_t)v37);
  if ((v48 & 1) == 0)
  {
    v17 = **(_QWORD **)(v37[0] + 104);
    if (v17)
      *(_QWORD *)(v17 + 24) |= 0x4000uLL;
  }
  v18 = 8 * v45 + 64;
  v19 = v18 + 8 * v44 + 8;
  v20 = malloc_type_malloc(v18 + 8 * v44 + 8, 0x7081ABB9uLL);
  if (!v20)
    goto LABEL_18;
  v21 = v20;
  *(_QWORD *)v20 = 0x3000000030;
  v20[2] = v18;
  v20[3] = v19;
  v20[4] = 0;
  *((_QWORD *)v20 + 3) = 0;
  v47 = v20;
  v22 = 0x2000000020;
  if ((v48 & 4) == 0)
    v22 = 0;
  *((_QWORD *)v20 + 4) = ((*(_QWORD *)a1 >> 60) | (8 * v48)) & 0x14;
  *((_QWORD *)v47 + 5) = v22;
  v47[4] = (*(_QWORD *)a1 & 0x100) == 0;
  gleVStateProgram_AddParams((char *)v37);
  gleVStateProgram_AddAttribs((uint64_t)v37);
  v23 = (char *)malloc_type_malloc(0xE8uLL, 0x7081ABB9uLL);
  if (!v23)
LABEL_18:
    abort();
  v24 = v23;
  *(_QWORD *)v23 = 0x1000000E4;
  v25 = *a1;
  *(_OWORD *)(v23 + 24) = a1[1];
  *(_OWORD *)(v23 + 8) = v25;
  v26 = a1[2];
  v27 = a1[3];
  v28 = a1[4];
  *(_OWORD *)(v23 + 88) = a1[5];
  *(_OWORD *)(v23 + 72) = v28;
  *(_OWORD *)(v23 + 56) = v27;
  *(_OWORD *)(v23 + 40) = v26;
  v29 = a1[6];
  v30 = a1[7];
  v31 = a1[8];
  *(_OWORD *)(v23 + 152) = a1[9];
  *(_OWORD *)(v23 + 136) = v31;
  *(_OWORD *)(v23 + 120) = v30;
  *(_OWORD *)(v23 + 104) = v29;
  v32 = a1[10];
  v33 = a1[11];
  v34 = a1[12];
  *(_OWORD *)(v23 + 216) = a1[13];
  *(_OWORD *)(v23 + 200) = v34;
  *(_OWORD *)(v23 + 184) = v33;
  *(_OWORD *)(v23 + 168) = v32;
  gleCopyParamBindings((_QWORD *)((char *)v21 + *((unsigned int *)v21 + 1)), a2);
  gleCopyAttribBindings((_QWORD *)((char *)v21 + *((unsigned int *)v21 + 2)), a3);
  *a4 = v21[4];
  *a5 = v21[5];
  *a6 = *((_DWORD *)v21 + 4);
  free(v21);
  *(_QWORD *)a1 = *(_QWORD *)a1 & 0xDFFFFFFFFFFFFFFFLL | (((v12 >> 61) & 1) << 61);
  return v24;
}

unsigned __int16 *glpVertexStateToPPStream(uint64_t a1, _QWORD *a2, _QWORD *a3, _DWORD *a4)
{
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  __int128 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int i;
  unsigned int j;
  unsigned __int16 *Stream;
  int v22;
  _DWORD **v23[2];
  _BYTE v24[1884];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _OWORD v29[2];
  __int16 v30;
  __int16 v31;
  __int16 v32;
  char *(*v33)(uint64_t *, uint64_t);
  char v34;
  _OWORD v35[2];

  v22 = 0;
  bzero(v24, 0x7E8uLL);
  *(_QWORD *)&v5 = -1;
  *((_QWORD *)&v5 + 1) = -1;
  *(_OWORD *)((char *)v29 + 14) = v5;
  v28 = v5;
  v29[0] = v5;
  v26 = v5;
  v27 = v5;
  v25 = v5;
  memset(&v24[4], 255, 0x754uLL);
  v23[1] = 0;
  v23[0] = (_DWORD **)PPStreamCreate();
  *(_WORD *)v23[0] = -31200;
  v33 = gleVStateProgram_AddPPStreamOperation;
  if ((*(_QWORD *)a1 & 0x100) == 0)
    gleVStateProgram_GetAttrib((uint64_t)v23, 0);
  gleVStateProgram_Core((unint64_t *)a1, (uint64_t)v23);
  if ((v34 & 1) == 0)
  {
    v6 = **((_QWORD **)v23[0] + 13);
    if (v6)
      *(_QWORD *)(v6 + 24) |= 0x4000uLL;
  }
  gleVStateProgram_AddAttribs((uint64_t)v23);
  gleVStateProgram_AddParams((char *)v23);
  if (v30 >= 1)
  {
    v7 = 0;
    v8 = 1694;
    while (1)
    {
      v9 = *(__int16 *)((char *)v23 + v8);
      *(_QWORD *)&v35[0] = 0;
      *((_QWORD *)&v35[0] + 1) = v7;
      if ((v9 - 3) > 3)
      {
        v11 = 192;
      }
      else
      {
        v10 = *(_OWORD *)(a1 + 24);
        v11 = (v10 >> 57) & 0x10000 | (v10 >> 55) & 0x20000 | 0xC0;
      }
      if (v9 <= 46)
      {
        switch(v9)
        {
          case 0:
            v12 = v11 & 0xFFFFFFFFFFFFE0FFLL | 0x100;
            break;
          case 1:
            v13 = v11 & 0xFFFFFFFFFFFFE07FLL;
            v14 = 0x500001140;
            goto LABEL_28;
          case 2:
            v12 = v11 & 0xFFFFFFFFFFFFE03FLL | 0x300;
            break;
          case 3:
            v12 = v11 & 0xFFFFFFFEFFFFE0FFLL | 0x400;
            break;
          case 4:
            v13 = v11 & 0xFFFFFFFEFFFFE0FFLL;
            v14 = 0x100000400;
            goto LABEL_28;
          case 5:
            v13 = v11 & 0xFFFFFFFEFFFFE0FFLL;
            v14 = 1280;
            goto LABEL_28;
          case 6:
            v13 = v11 & 0xFFFFFFFEFFFFE0FFLL;
            v14 = 0x100000500;
            goto LABEL_28;
          case 7:
          case 8:
          case 9:
          case 10:
          case 11:
          case 12:
          case 13:
          case 14:
            v12 = v11 & 0xFFFFFF80FFFFE0FFLL | ((unint64_t)(v9 + 1) << 32) | 0x1100;
            break;
          default:
            goto LABEL_27;
        }
        goto LABEL_29;
      }
      if ((v9 - 48) < 2)
        break;
      if (v9 == 47)
      {
        v13 = v11 & 0xFFFFFFFFFFFFE1FFLL;
        v14 = 2304;
        goto LABEL_28;
      }
      if (v9 != 50)
      {
LABEL_27:
        v13 = v11 & 0xFFFFFF80FFFFE0FFLL | ((unint64_t)(((_BYTE)v9 + 49) & 0x3F) << 32);
        v14 = 0x4000001100;
        goto LABEL_28;
      }
      v12 = v11 & 0xFFFFFFFEFFFFE0FFLL | 0x100000100;
LABEL_29:
      *(_QWORD *)&v35[0] = v12;
      PPStreamAddOutputBinding((uint64_t)v23[0], v35);
      ++v7;
      v8 += 4;
      if (v7 >= v30)
        goto LABEL_30;
    }
    v13 = v11 & 0xFFFFFFFFFFFFE0FFLL | ((unint64_t)(((_BYTE)v9 + 16) & 0x1F) << 32);
    v14 = 2560;
LABEL_28:
    v12 = v13 | v14;
    goto LABEL_29;
  }
LABEL_30:
  if (v31)
  {
    for (i = 0; i < v31; ++i)
    {
      LODWORD(v35[0]) = i;
      PPStreamAddAddressUsage((uint64_t)v23[0], v35);
    }
  }
  if (v32)
  {
    for (j = 0; j < v32; ++j)
    {
      v35[0] = xmmword_22A97B890;
      DWORD2(v35[0]) = j;
      PPStreamAddTempUsage((uint64_t)v23[0], v35);
    }
  }
  if ((*(_QWORD *)a1 & 0x100) == 0)
    PPStreamAddOption((uint64_t)v23[0], 0);
  Stream = PPStreamGetStream((uint64_t)v23[0], &v22);
  PPStreamFree(v23[0]);
  *a4 = PPStreamTokenGetProgramOptions((uint64_t)Stream);
  *a2 = *((_QWORD *)Stream + 1);
  *a3 = *((_QWORD *)Stream + 2);
  return Stream;
}

char *gleVStateProgram_AddPPStreamOperation(uint64_t *a1, uint64_t a2)
{
  return PPStreamAddOperation(*a1, a2, 0);
}

unint64_t *gleVStateProgram_Core(unint64_t *result, uint64_t a2)
{
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  int v35;
  unint64_t *v36;
  uint64_t Attrib;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  int v84;
  unint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  int v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  int v118;
  char v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  int v132;
  int v133;
  char v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unsigned int v148;
  unsigned int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  __int16 v175;
  uint64_t v176;
  int v177;
  int v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  int v186;
  int v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  int v197;
  int v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  char v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unsigned int v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unsigned int v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  unsigned int v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  _WORD *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  unint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  char v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  int v273;
  int v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  char v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  char v294;
  char v295;
  char v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  unsigned int v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  unsigned int v308;
  int v309;
  uint64_t v310;
  uint64_t v311;
  char v312;
  unsigned int v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  BOOL v318;
  unint64_t v319;
  int v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  unsigned int v324;
  unint64_t *v325;
  _OWORD v326[5];

  v3 = result;
  v4 = result[4];
  v5 = *result;
  v325 = result;
  if ((*result & 0x200) == 0)
  {
    if ((v5 & 0x400) != 0)
      goto LABEL_138;
LABEL_3:
    if ((v5 & 0x100) == 0)
      goto LABEL_263;
LABEL_259:
    if ((v5 & 0xFF0000000000) != 0)
    {
      result = (unint64_t *)gleVStateProgram_MultMatrix4x4(a2, 0, 0, 0, 23, 0, 0, 1, HIBYTE(v5) & 1);
      goto LABEL_263;
    }
    if ((v5 & 4) == 0)
    {
      result = (unint64_t *)gleVStateProgram_MultMatrix4x4(a2, 0, 8, 0, 23, 1, 0, 1, HIBYTE(v5) & 1);
      goto LABEL_263;
    }
    memset((char *)&v326[1] + 8, 0, 56);
    *(_QWORD *)&v326[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
    *(_DWORD *)(a2 + 16) = 1;
    *(_QWORD *)&v326[1] = (gleVStateProgram_GetAttrib(a2, 0) << 48) | 0x19C800;
    if ((*v3 & 0x8000) != 0)
    {
      v174 = *(unsigned __int16 *)(a2 + 1892);
      if ((_DWORD)v174 == 0xFFFF)
      {
        v174 = *(unsigned __int16 *)(a2 + 2000);
        *(_WORD *)(a2 + 1892) = v174;
        v175 = 50;
        goto LABEL_299;
      }
    }
    else
    {
      v174 = *(unsigned __int16 *)(a2 + 1692);
      if ((_DWORD)v174 == 0xFFFF)
      {
        v175 = 0;
        v174 = *(unsigned __int16 *)(a2 + 2000);
        *(_WORD *)(a2 + 1692) = v174;
LABEL_299:
        *(_WORD *)(a2 + 4 * (__int16)v174 + 1694) = v175;
        *(_WORD *)(a2 + 2000) = v174 + 1;
      }
    }
    *((_QWORD *)&v326[0] + 1) = ((v174 << 48) | 0x72679000) + 0x2000;
    result = (unint64_t *)(*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v326);
    goto LABEL_263;
  }
  v6 = result[2];
  memset(v326, 0, sizeof(v326));
  if (!(_DWORD)v6)
    goto LABEL_35;
  v7 = 0;
  v8 = 900;
  do
  {
    v9 = v6 >> v7;
    if (((v6 >> v7) & 0x1010101) == 0)
      goto LABEL_33;
    if ((v9 & 1) != 0)
    {
      memset(&v326[2], 0, 48);
      *(_QWORD *)&v326[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000A42;
      *(_DWORD *)(a2 + 16) = 2;
      *(_QWORD *)&v326[1] = (gleVStateProgram_GetAttrib(a2, 0) << 48) | 0x19C800;
      v10 = *(unsigned __int16 *)(a2 + v8);
      if ((_DWORD)v10 == 0xFFFF)
      {
        v11 = *(__int16 *)(a2 + 1998);
        v10 = *(unsigned __int16 *)(a2 + 1998);
        *(_WORD *)(a2 + v8) = v11;
        *(_WORD *)(a2 + 4 * v11 + 262) = 4 * v7 + 160;
        *(_WORD *)(a2 + 1998) = v11 + 1;
      }
      *((_QWORD *)&v326[1] + 1) = ((v10 << 48) | 0x19C840) + 64;
      v12 = a2 + 2 * v7;
      v13 = *(unsigned __int16 *)(v12 + 1978);
      if ((_DWORD)v13 == 0xFFFF)
      {
        v13 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(v12 + 1978) = v13;
        *(_WORD *)(a2 + 2004) = v13 + 1;
      }
      *((_QWORD *)&v326[0] + 1) = (v13 << 48) | 0x72641000;
      result = (unint64_t *)(*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v326);
      if ((v9 & 0x100) == 0)
      {
LABEL_10:
        if ((v9 & 0x10000) == 0)
          goto LABEL_11;
        goto LABEL_23;
      }
    }
    else if ((v9 & 0x100) == 0)
    {
      goto LABEL_10;
    }
    memset(&v326[2], 0, 48);
    *(_QWORD *)&v326[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000A42;
    *(_DWORD *)(a2 + 16) = 2;
    *(_QWORD *)&v326[1] = (gleVStateProgram_GetAttrib(a2, 0) << 48) | 0x19C800;
    v14 = *(unsigned __int16 *)(a2 + v8 + 4);
    if ((_DWORD)v14 == 0xFFFF)
    {
      v15 = *(__int16 *)(a2 + 1998);
      v14 = *(unsigned __int16 *)(a2 + 1998);
      *(_WORD *)(a2 + v8 + 4) = v15;
      *(_WORD *)(a2 + 4 * v15 + 262) = 4 * v7 + 161;
      *(_WORD *)(a2 + 1998) = v15 + 1;
    }
    *((_QWORD *)&v326[1] + 1) = ((v14 << 48) | 0x19C840) + 64;
    v16 = a2 + 2 * v7;
    v17 = *(unsigned __int16 *)(v16 + 1978);
    if ((_DWORD)v17 == 0xFFFF)
    {
      v17 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(v16 + 1978) = v17;
      *(_WORD *)(a2 + 2004) = v17 + 1;
    }
    *((_QWORD *)&v326[0] + 1) = (v17 << 48) | 0x72621000;
    result = (unint64_t *)(*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v326);
    if ((v9 & 0x10000) == 0)
    {
LABEL_11:
      if ((v9 & 0x1000000) == 0)
        goto LABEL_33;
LABEL_28:
      memset(&v326[2], 0, 48);
      *(_QWORD *)&v326[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000A42;
      *(_DWORD *)(a2 + 16) = 2;
      *(_QWORD *)&v326[1] = (gleVStateProgram_GetAttrib(a2, 0) << 48) | 0x19C800;
      v22 = *(unsigned __int16 *)(a2 + v8 + 12);
      if ((_DWORD)v22 == 0xFFFF)
      {
        v23 = *(__int16 *)(a2 + 1998);
        v22 = *(unsigned __int16 *)(a2 + 1998);
        *(_WORD *)(a2 + v8 + 12) = v23;
        *(_WORD *)(a2 + 4 * v23 + 262) = 4 * v7 + 163;
        *(_WORD *)(a2 + 1998) = v23 + 1;
      }
      *((_QWORD *)&v326[1] + 1) = ((v22 << 48) | 0x19C840) + 64;
      v24 = a2 + 2 * v7;
      v25 = *(unsigned __int16 *)(v24 + 1978);
      if ((_DWORD)v25 == 0xFFFF)
      {
        v25 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(v24 + 1978) = v25;
        *(_WORD *)(a2 + 2004) = v25 + 1;
      }
      *((_QWORD *)&v326[0] + 1) = (v25 << 48) | 0x72609000;
      result = (unint64_t *)(*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v326);
      goto LABEL_33;
    }
LABEL_23:
    memset(&v326[2], 0, 48);
    *(_QWORD *)&v326[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000A42;
    *(_DWORD *)(a2 + 16) = 2;
    *(_QWORD *)&v326[1] = (gleVStateProgram_GetAttrib(a2, 0) << 48) | 0x19C800;
    v18 = *(unsigned __int16 *)(a2 + v8 + 8);
    if ((_DWORD)v18 == 0xFFFF)
    {
      v19 = *(__int16 *)(a2 + 1998);
      v18 = *(unsigned __int16 *)(a2 + 1998);
      *(_WORD *)(a2 + v8 + 8) = v19;
      *(_WORD *)(a2 + 4 * v19 + 262) = 4 * v7 + 162;
      *(_WORD *)(a2 + 1998) = v19 + 1;
    }
    *((_QWORD *)&v326[1] + 1) = ((v18 << 48) | 0x19C840) + 64;
    v20 = a2 + 2 * v7;
    v21 = *(unsigned __int16 *)(v20 + 1978);
    if ((_DWORD)v21 == 0xFFFF)
    {
      v21 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(v20 + 1978) = v21;
      *(_WORD *)(a2 + 2004) = v21 + 1;
    }
    *((_QWORD *)&v326[0] + 1) = (v21 << 48) | 0x72611000;
    result = (unint64_t *)(*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v326);
    if ((v9 & 0x1000000) != 0)
      goto LABEL_28;
LABEL_33:
    ++v7;
    v8 += 16;
  }
  while (v7 != 8);
  v3 = v325;
  v4 = v325[4];
  v5 = *v325;
LABEL_35:
  if ((v5 & 0xFF0000000000) == 0)
  {
    if ((v5 & 0x40) != 0)
    {
      if ((v5 & 8) == 0)
      {
        result = (unint64_t *)gleVStateProgram_MultMatrix4x4(a2, 0, 16, 0, 0, 1, 0, 0, HIBYTE(v5) & 1);
        goto LABEL_99;
      }
    }
    else
    {
      if ((v5 & 0x80) == 0)
        goto LABEL_99;
      if ((v5 & 8) == 0)
      {
        memset(&v326[2], 0, 48);
        *(_QWORD *)&v326[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000A42;
        *(_DWORD *)(a2 + 16) = 2;
        *(_QWORD *)&v326[1] = (gleVStateProgram_GetAttrib(a2, 0) << 48) | 0x19C800;
        v29 = *(unsigned __int16 *)(a2 + 348);
        if ((_DWORD)v29 == 0xFFFF)
        {
          v30 = *(__int16 *)(a2 + 1998);
          v29 = *(unsigned __int16 *)(a2 + 1998);
          *(_WORD *)(a2 + 348) = v30;
          *(_WORD *)(a2 + 4 * v30 + 262) = 22;
          *(_WORD *)(a2 + 1998) = v30 + 1;
        }
        *((_QWORD *)&v326[1] + 1) = ((v29 << 48) | 0x19C840) + 64;
        v31 = *(unsigned __int16 *)(a2 + 1900);
        if ((_DWORD)v31 == 0xFFFF)
        {
          v31 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1900) = v31;
          *(_WORD *)(a2 + 2004) = v31 + 1;
        }
        v32 = (v31 << 48) | 0x72679000;
LABEL_98:
        *((_QWORD *)&v326[0] + 1) = v32;
        result = (unint64_t *)(*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v326);
        goto LABEL_99;
      }
    }
    memset((char *)&v326[1] + 8, 0, 56);
    *(_QWORD *)&v326[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
    *(_DWORD *)(a2 + 16) = 1;
    *(_QWORD *)&v326[1] = (gleVStateProgram_GetAttrib(a2, 0) << 48) | 0x19C800;
    v57 = *(unsigned __int16 *)(a2 + 1900);
    if ((_DWORD)v57 == 0xFFFF)
    {
      v57 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1900) = v57;
      *(_WORD *)(a2 + 2004) = v57 + 1;
    }
    v32 = (v57 << 48) | 0x72679000;
    goto LABEL_98;
  }
  if ((v5 & 2) != 0)
  {
    memset(&v326[2], 0, 48);
    v26 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = 2;
    *(_QWORD *)&v326[0] = (8 * (v26 & 7)) | 0x3100011042;
    *(_QWORD *)&v326[1] = (gleVStateProgram_GetAttrib(a2, 4) << 48) | 0x19C800;
    v27 = *((unsigned __int8 *)v3 + 5) - 1;
    if (v27 > 2)
      v28 = 2182086656;
    else
      v28 = qword_22A98A4F0[(char)v27];
    *((_QWORD *)&v326[1] + 1) = v28;
    v33 = *(unsigned __int16 *)(a2 + 1944);
    if ((_DWORD)v33 == 0xFFFF)
    {
      v33 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1944) = v33;
      *(_WORD *)(a2 + 2004) = v33 + 1;
    }
    *((_QWORD *)&v326[0] + 1) = (v33 << 48) | 0x72679000;
    result = (unint64_t *)(*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v326);
    v4 = v3[4];
    v5 = *v3;
  }
  if ((v5 & 0xFF0000000000) != 0)
  {
    v34 = 0;
    v35 = 16;
    do
    {
      if ((v4 & 0x400) != 0)
      {
        memset((char *)&v326[1] + 8, 0, 56);
        *(_QWORD *)&v326[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100001201;
        *(_DWORD *)(a2 + 16) = 1;
        Attrib = gleVStateProgram_GetAttrib(a2, 7);
        *(_WORD *)(a2 + 2002) = 1;
        *((_QWORD *)&v326[0] + 1) = 1919172608;
        *(_QWORD *)&v326[1] = ((unint64_t)(v34 & 3) << 9) | (Attrib << 48) | ((unint64_t)(v34 & 3) << 11) | ((unint64_t)(v34 & 3) << 13) | ((unint64_t)(v34 & 3) << 15);
        (*(void (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v326);
        v36 = v325;
        gleVStateProgram_MultMatrix4x4(a2, 0, 144, 23, 23, 1, 1, 0, *((_BYTE *)v325 + 7) & 1);
      }
      else
      {
        gleVStateProgram_MultMatrix4x4(a2, 0, v35, 23, 23, 1, 0, 0, HIBYTE(v5) & 1);
        v36 = v325;
      }
      if ((*v36 & 2) != 0)
      {
        if (v34 < ((unsigned __int16)WORD2(*v36) >> 8) - 1)
        {
          memset(&v326[1], 0, 64);
          *(_QWORD *)&v326[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000802;
          *(_DWORD *)(a2 + 16) = 2;
          v40 = *(unsigned __int16 *)(a2 + 1944);
          if (v40 == 0xFFFF)
          {
            v44 = *(unsigned __int16 *)(a2 + 2004);
            v45 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1944) = v44;
            v46 = v45 + 1;
            *(_WORD *)(a2 + 2004) = v46;
            *(_QWORD *)&v326[1] = ((unint64_t)(unsigned __int16)v44 << 48) | 0x19C840;
            if ((v46 & 0x10000) != 0)
            {
              v41 = 0;
              *(_WORD *)(a2 + 1944) = v46;
              *(_WORD *)(a2 + 2004) = 1;
            }
            else
            {
              v41 = v44 << 48;
            }
          }
          else
          {
            v41 = v40 << 48;
            *(_QWORD *)&v326[1] = ((unint64_t)(unsigned __int16)v40 << 48) | 0x19C840;
          }
          *((_QWORD *)&v326[1] + 1) = v41 | (43520 * (v34 & 3)) | 0x40;
          *((_QWORD *)&v326[0] + 1) = v41 | 0x72601000;
          v47 = *((unsigned __int8 *)v325 + 5) - 2;
          if (v47 <= 2)
            *((_QWORD *)&v326[0] + 1) = qword_22A98A508[(char)v47] | v41;
          (*(void (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v326);
        }
        if (!v34)
        {
          memset(&v326[2], 0, 48);
          *(_QWORD *)&v326[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
          *(_DWORD *)(a2 + 16) = 2;
          v55 = *(unsigned __int16 *)(a2 + 1946);
          if ((_DWORD)v55 == 0xFFFF)
          {
            v55 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1946) = v55;
            *(_WORD *)(a2 + 2004) = v55 + 1;
          }
          *(_QWORD *)&v326[1] = (v55 << 48) | 0x19C840;
          v56 = *(unsigned __int16 *)(a2 + 1944);
          if ((_DWORD)v56 == 0xFFFF)
          {
            v56 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1944) = v56;
            *(_WORD *)(a2 + 2004) = v56 + 1;
          }
          v43 = (v56 << 48) | 0x40;
          goto LABEL_90;
        }
        memset((char *)v326 + 8, 0, 72);
        *(_QWORD *)&v326[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
        *(_DWORD *)(a2 + 16) = 3;
        v48 = *(unsigned __int16 *)(a2 + 1946);
        if ((_DWORD)v48 == 0xFFFF)
        {
          v48 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1946) = v48;
          *(_WORD *)(a2 + 2004) = v48 + 1;
        }
        *(_QWORD *)&v326[1] = (v48 << 48) | 0x19C840;
        v49 = *(unsigned __int16 *)(a2 + 1944);
        if ((_DWORD)v49 == 0xFFFF)
        {
          v49 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1944) = v49;
          *(_WORD *)(a2 + 2004) = v49 + 1;
        }
        v39 = ((unint64_t)(v34 & 3) << 9) | (v49 << 48) | ((unint64_t)(v34 & 3) << 11) | ((unint64_t)(v34 & 3) << 13) | ((unint64_t)(v34 & 3) << 15) | 0x40;
      }
      else
      {
        if (!v34)
        {
          memset(&v326[2], 0, 48);
          *(_QWORD *)&v326[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
          *(_DWORD *)(a2 + 16) = 2;
          v42 = *(unsigned __int16 *)(a2 + 1946);
          if ((_DWORD)v42 == 0xFFFF)
          {
            v42 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1946) = v42;
            *(_WORD *)(a2 + 2004) = v42 + 1;
          }
          *(_QWORD *)&v326[1] = (v42 << 48) | 0x19C840;
          v43 = gleVStateProgram_GetAttrib(a2, 4) << 48;
LABEL_90:
          *((_QWORD *)&v326[1] + 1) = v43;
          v52 = *(unsigned __int16 *)(a2 + 1900);
          if ((_DWORD)v52 == 0xFFFF)
          {
            v52 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1900) = v52;
            *(_WORD *)(a2 + 2004) = v52 + 1;
          }
LABEL_92:
          v51 = v52 << 48;
          goto LABEL_93;
        }
        memset((char *)v326 + 8, 0, 72);
        *(_QWORD *)&v326[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
        *(_DWORD *)(a2 + 16) = 3;
        v38 = *(unsigned __int16 *)(a2 + 1946);
        if ((_DWORD)v38 == 0xFFFF)
        {
          v38 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1946) = v38;
          *(_WORD *)(a2 + 2004) = v38 + 1;
        }
        *(_QWORD *)&v326[1] = (v38 << 48) | 0x19C840;
        v39 = ((unint64_t)(v34 & 3) << 9) | (gleVStateProgram_GetAttrib(a2, 4) << 48) | ((unint64_t)(v34 & 3) << 11) | ((unint64_t)(v34 & 3) << 13) | ((unint64_t)(v34 & 3) << 15);
      }
      *((_QWORD *)&v326[1] + 1) = v39;
      v50 = *(unsigned __int16 *)(a2 + 1900);
      if (v50 == 0xFFFF)
      {
        v52 = *(unsigned __int16 *)(a2 + 2004);
        v53 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1900) = v52;
        v54 = v53 + 1;
        *(_WORD *)(a2 + 2004) = v54;
        *(_QWORD *)&v326[2] = ((unint64_t)(unsigned __int16)v52 << 48) | 0x19C840;
        if ((v54 & 0x10000) == 0)
          goto LABEL_92;
        v51 = 0;
        *(_WORD *)(a2 + 1900) = v54;
        *(_WORD *)(a2 + 2004) = 1;
      }
      else
      {
        v51 = v50 << 48;
        *(_QWORD *)&v326[2] = ((unint64_t)(unsigned __int16)v50 << 48) | 0x19C840;
      }
LABEL_93:
      *((_QWORD *)&v326[0] + 1) = v51 | 0x72679000;
      result = (unint64_t *)(*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v326);
      ++v34;
      v4 = v325[4];
      v5 = *v325;
      v35 += 8;
    }
    while (v34 < ((unsigned __int16)WORD2(*v325) >> 8));
  }
LABEL_99:
  v3 = v325;
  v58 = v325[2];
  if ((v58 & 0xFFFFFFFF00000000) == 0)
    goto LABEL_137;
  v59 = 0;
  v60 = HIDWORD(v58);
  v61 = 1028;
  while (2)
  {
    v62 = v60 >> v59;
    if (((v60 >> v59) & 0x1010101) == 0)
      goto LABEL_135;
    if ((v62 & 1) == 0)
    {
      if ((v62 & 0x100) == 0)
        goto LABEL_104;
LABEL_114:
      memset(&v326[2], 0, 48);
      *(_QWORD *)&v326[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000A42;
      *(_DWORD *)(a2 + 16) = 2;
      v68 = *(unsigned __int16 *)(a2 + 1900);
      if ((_DWORD)v68 == 0xFFFF)
      {
        v68 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1900) = v68;
        *(_WORD *)(a2 + 2004) = v68 + 1;
      }
      *(_QWORD *)&v326[1] = (v68 << 48) | 0x19C840;
      v69 = *(unsigned __int16 *)(a2 + v61 + 4);
      if ((_DWORD)v69 == 0xFFFF)
      {
        v70 = *(__int16 *)(a2 + 1998);
        v69 = *(unsigned __int16 *)(a2 + 1998);
        *(_WORD *)(a2 + v61 + 4) = v70;
        *(_WORD *)(a2 + 4 * v70 + 262) = 4 * v59 + 193;
        *(_WORD *)(a2 + 1998) = v70 + 1;
      }
      *((_QWORD *)&v326[1] + 1) = ((v69 << 48) | 0x19C840) + 64;
      v71 = a2 + 2 * v59;
      v72 = *(unsigned __int16 *)(v71 + 1978);
      if ((_DWORD)v72 == 0xFFFF)
      {
        v72 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(v71 + 1978) = v72;
        *(_WORD *)(a2 + 2004) = v72 + 1;
      }
      *((_QWORD *)&v326[0] + 1) = (v72 << 48) | 0x72621000;
      result = (unint64_t *)(*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v326);
      if ((v62 & 0x10000) != 0)
        goto LABEL_121;
LABEL_105:
      if ((v62 & 0x1000000) == 0)
        goto LABEL_135;
LABEL_128:
      memset(&v326[2], 0, 48);
      *(_QWORD *)&v326[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000A42;
      *(_DWORD *)(a2 + 16) = 2;
      v78 = *(unsigned __int16 *)(a2 + 1900);
      if ((_DWORD)v78 == 0xFFFF)
      {
        v78 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1900) = v78;
        *(_WORD *)(a2 + 2004) = v78 + 1;
      }
      *(_QWORD *)&v326[1] = (v78 << 48) | 0x19C840;
      v79 = *(unsigned __int16 *)(a2 + v61 + 12);
      if ((_DWORD)v79 == 0xFFFF)
      {
        v80 = *(__int16 *)(a2 + 1998);
        v79 = *(unsigned __int16 *)(a2 + 1998);
        *(_WORD *)(a2 + v61 + 12) = v80;
        *(_WORD *)(a2 + 4 * v80 + 262) = 4 * v59 + 195;
        *(_WORD *)(a2 + 1998) = v80 + 1;
      }
      *((_QWORD *)&v326[1] + 1) = ((v79 << 48) | 0x19C840) + 64;
      v81 = a2 + 2 * v59;
      v82 = *(unsigned __int16 *)(v81 + 1978);
      if ((_DWORD)v82 == 0xFFFF)
      {
        v82 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(v81 + 1978) = v82;
        *(_WORD *)(a2 + 2004) = v82 + 1;
      }
      *((_QWORD *)&v326[0] + 1) = (v82 << 48) | 0x72609000;
      result = (unint64_t *)(*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v326);
      goto LABEL_135;
    }
    memset(&v326[2], 0, 48);
    *(_QWORD *)&v326[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000A42;
    *(_DWORD *)(a2 + 16) = 2;
    v63 = *(unsigned __int16 *)(a2 + 1900);
    if ((_DWORD)v63 == 0xFFFF)
    {
      v63 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1900) = v63;
      *(_WORD *)(a2 + 2004) = v63 + 1;
    }
    *(_QWORD *)&v326[1] = (v63 << 48) | 0x19C840;
    v64 = *(unsigned __int16 *)(a2 + v61);
    if ((_DWORD)v64 == 0xFFFF)
    {
      v65 = *(__int16 *)(a2 + 1998);
      v64 = *(unsigned __int16 *)(a2 + 1998);
      *(_WORD *)(a2 + v61) = v65;
      *(_WORD *)(a2 + 4 * v65 + 262) = 4 * v59 + 192;
      *(_WORD *)(a2 + 1998) = v65 + 1;
    }
    *((_QWORD *)&v326[1] + 1) = ((v64 << 48) | 0x19C840) + 64;
    v66 = a2 + 2 * v59;
    v67 = *(unsigned __int16 *)(v66 + 1978);
    if ((_DWORD)v67 == 0xFFFF)
    {
      v67 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(v66 + 1978) = v67;
      *(_WORD *)(a2 + 2004) = v67 + 1;
    }
    *((_QWORD *)&v326[0] + 1) = (v67 << 48) | 0x72641000;
    result = (unint64_t *)(*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v326);
    if ((v62 & 0x100) != 0)
      goto LABEL_114;
LABEL_104:
    if ((v62 & 0x10000) == 0)
      goto LABEL_105;
LABEL_121:
    memset(&v326[2], 0, 48);
    *(_QWORD *)&v326[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000A42;
    *(_DWORD *)(a2 + 16) = 2;
    v73 = *(unsigned __int16 *)(a2 + 1900);
    if ((_DWORD)v73 == 0xFFFF)
    {
      v73 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1900) = v73;
      *(_WORD *)(a2 + 2004) = v73 + 1;
    }
    *(_QWORD *)&v326[1] = (v73 << 48) | 0x19C840;
    v74 = *(unsigned __int16 *)(a2 + v61 + 8);
    if ((_DWORD)v74 == 0xFFFF)
    {
      v75 = *(__int16 *)(a2 + 1998);
      v74 = *(unsigned __int16 *)(a2 + 1998);
      *(_WORD *)(a2 + v61 + 8) = v75;
      *(_WORD *)(a2 + 4 * v75 + 262) = 4 * v59 + 194;
      *(_WORD *)(a2 + 1998) = v75 + 1;
    }
    *((_QWORD *)&v326[1] + 1) = ((v74 << 48) | 0x19C840) + 64;
    v76 = a2 + 2 * v59;
    v77 = *(unsigned __int16 *)(v76 + 1978);
    if ((_DWORD)v77 == 0xFFFF)
    {
      v77 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(v76 + 1978) = v77;
      *(_WORD *)(a2 + 2004) = v77 + 1;
    }
    *((_QWORD *)&v326[0] + 1) = (v77 << 48) | 0x72611000;
    result = (unint64_t *)(*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v326);
    if ((v62 & 0x1000000) != 0)
      goto LABEL_128;
LABEL_135:
    ++v59;
    v61 += 16;
    if (v59 != 8)
      continue;
    break;
  }
  v3 = v325;
LABEL_137:
  v4 = v3[4];
  v5 = *v3;
  if ((*v3 & 0x400) == 0)
    goto LABEL_3;
LABEL_138:
  memset(v326, 0, sizeof(v326));
  if ((v5 & 0xFF0000000000) != 0)
  {
    v83 = 0;
    v84 = 48;
    while (1)
    {
      if ((v4 & 0x400) != 0)
      {
        memset((char *)&v326[1] + 8, 0, 56);
        *(_QWORD *)&v326[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100001201;
        *(_DWORD *)(a2 + 16) = 1;
        v86 = gleVStateProgram_GetAttrib(a2, 7);
        *(_WORD *)(a2 + 2002) = 1;
        *((_QWORD *)&v326[0] + 1) = 1919172608;
        *(_QWORD *)&v326[1] = ((unint64_t)(v83 & 3) << 9) | (v86 << 48) | ((unint64_t)(v83 & 3) << 11) | ((unint64_t)(v83 & 3) << 13) | ((unint64_t)(v83 & 3) << 15);
        (*(void (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v326);
        v85 = v325;
        gleVStateProgram_MultMatrix3x3(a2, 152, 23, 23, 1, (*v325 & 0x200000000000000) != 0);
      }
      else
      {
        gleVStateProgram_MultMatrix3x3(a2, v84, 23, 23, 0, (v5 & 0x200000000000000) != 0);
        v85 = v325;
      }
      if ((*v85 & 2) != 0)
      {
        if (!v83)
        {
          memset(&v326[2], 0, 48);
          *(_QWORD *)&v326[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
          *(_DWORD *)(a2 + 16) = 2;
          v98 = *(unsigned __int16 *)(a2 + 1946);
          if ((_DWORD)v98 == 0xFFFF)
          {
            v98 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1946) = v98;
            *(_WORD *)(a2 + 2004) = v98 + 1;
          }
          *(_QWORD *)&v326[1] = (v98 << 48) | 0x19C840;
          v99 = *(unsigned __int16 *)(a2 + 1944);
          if ((_DWORD)v99 == 0xFFFF)
          {
            v99 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1944) = v99;
            *(_WORD *)(a2 + 2004) = v99 + 1;
          }
          v97 = (v99 << 48) | 0x40;
          goto LABEL_166;
        }
        memset((char *)v326 + 8, 0, 72);
        *(_QWORD *)&v326[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
        *(_DWORD *)(a2 + 16) = 3;
        v89 = *(unsigned __int16 *)(a2 + 1946);
        if ((_DWORD)v89 == 0xFFFF)
        {
          v89 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1946) = v89;
          *(_WORD *)(a2 + 2004) = v89 + 1;
        }
        *(_QWORD *)&v326[1] = (v89 << 48) | 0x19C840;
        v90 = *(unsigned __int16 *)(a2 + 1944);
        if ((_DWORD)v90 == 0xFFFF)
        {
          v90 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1944) = v90;
          *(_WORD *)(a2 + 2004) = v90 + 1;
        }
        v88 = ((unint64_t)(v83 & 3) << 9) | (v90 << 48) | ((unint64_t)(v83 & 3) << 11) | ((unint64_t)(v83 & 3) << 13) | ((unint64_t)(v83 & 3) << 15) | 0x40;
      }
      else
      {
        if (!v83)
        {
          memset(&v326[2], 0, 48);
          *(_QWORD *)&v326[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
          *(_DWORD *)(a2 + 16) = 2;
          v96 = *(unsigned __int16 *)(a2 + 1946);
          if ((_DWORD)v96 == 0xFFFF)
          {
            v96 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1946) = v96;
            *(_WORD *)(a2 + 2004) = v96 + 1;
          }
          *(_QWORD *)&v326[1] = (v96 << 48) | 0x19C840;
          v97 = gleVStateProgram_GetAttrib(a2, 4) << 48;
LABEL_166:
          *((_QWORD *)&v326[1] + 1) = v97;
          v93 = *(unsigned __int16 *)(a2 + 1902);
          if ((_DWORD)v93 == 0xFFFF)
          {
            v93 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1902) = v93;
            *(_WORD *)(a2 + 2004) = v93 + 1;
          }
LABEL_168:
          v92 = v93 << 48;
          goto LABEL_169;
        }
        memset((char *)v326 + 8, 0, 72);
        *(_QWORD *)&v326[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
        *(_DWORD *)(a2 + 16) = 3;
        v87 = *(unsigned __int16 *)(a2 + 1946);
        if ((_DWORD)v87 == 0xFFFF)
        {
          v87 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1946) = v87;
          *(_WORD *)(a2 + 2004) = v87 + 1;
        }
        *(_QWORD *)&v326[1] = (v87 << 48) | 0x19C840;
        v88 = ((unint64_t)(v83 & 3) << 9) | (gleVStateProgram_GetAttrib(a2, 4) << 48) | ((unint64_t)(v83 & 3) << 11) | ((unint64_t)(v83 & 3) << 13) | ((unint64_t)(v83 & 3) << 15);
      }
      *((_QWORD *)&v326[1] + 1) = v88;
      v91 = *(unsigned __int16 *)(a2 + 1902);
      if (v91 == 0xFFFF)
      {
        v93 = *(unsigned __int16 *)(a2 + 2004);
        v94 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1902) = v93;
        v95 = v94 + 1;
        *(_WORD *)(a2 + 2004) = v95;
        *(_QWORD *)&v326[2] = ((unint64_t)(unsigned __int16)v93 << 48) | 0x19C840;
        if ((v95 & 0x10000) == 0)
          goto LABEL_168;
        v92 = 0;
        *(_WORD *)(a2 + 1902) = v95;
        *(_WORD *)(a2 + 2004) = 1;
      }
      else
      {
        v92 = v91 << 48;
        *(_QWORD *)&v326[2] = ((unint64_t)(unsigned __int16)v91 << 48) | 0x19C840;
      }
LABEL_169:
      *((_QWORD *)&v326[0] + 1) = v92 | 0x72679000;
      result = (unint64_t *)(*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v326);
      ++v83;
      v4 = v325[4];
      v5 = *v325;
      v84 += 8;
      if (v83 >= ((unsigned __int16)WORD2(*v325) >> 8))
        goto LABEL_176;
    }
  }
  if ((v5 & 0x10) != 0)
  {
    *((_QWORD *)&v326[4] + 1) = 0;
    *(_OWORD *)((char *)&v326[3] + 8) = 0uLL;
    *(_OWORD *)((char *)&v326[2] + 8) = 0uLL;
    *(_OWORD *)((char *)&v326[1] + 8) = 0uLL;
    *(_QWORD *)&v326[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
    *(_DWORD *)(a2 + 16) = 1;
    *(_QWORD *)&v326[1] = (gleVStateProgram_GetAttrib(a2, 1) << 48) | 0x19C800;
    v100 = *(unsigned __int16 *)(a2 + 1902);
    if ((_DWORD)v100 == 0xFFFF)
    {
      v100 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1902) = v100;
      *(_WORD *)(a2 + 2004) = v100 + 1;
    }
    *((_QWORD *)&v326[0] + 1) = (v100 << 48) | 0x72679000;
    result = (unint64_t *)(*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v326);
  }
  else
  {
    result = (unint64_t *)gleVStateProgram_MultMatrix3x3(a2, 48, 1, 1, 0, (v5 & 0x200000000000000) != 0);
  }
LABEL_176:
  v3 = v325;
  v5 = *v325;
  if ((*v325 & 0x20) != 0)
  {
    result = (unint64_t *)gleVStateProgram_NormalizeVector(a2, 1, 1, 23, 23);
    v5 = *v325;
  }
  v101 = v325[3];
  if (v101)
  {
    v102 = HIDWORD(v101) & v101;
    if (HIDWORD(v101))
    {
      gleVStateProgram_NormalizeVector(a2, 0, 23, 27, 27);
      memset(&v326[2], 0, 48);
      *(_QWORD *)&v326[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000A02;
      *(_DWORD *)(a2 + 16) = 2;
      v103 = *(unsigned __int16 *)(a2 + 1902);
      if ((_DWORD)v103 == 0xFFFF)
      {
        v103 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1902) = v103;
        *(_WORD *)(a2 + 2004) = v103 + 1;
      }
      *(_QWORD *)&v326[1] = (v103 << 48) | 0x19C840;
      v104 = *(unsigned __int16 *)(a2 + 1946);
      if ((_DWORD)v104 == 0xFFFF)
      {
        v104 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1946) = v104;
        *(_WORD *)(a2 + 2004) = v104 + 1;
      }
      *((_QWORD *)&v326[1] + 1) = (v104 << 48) | 0x19C840;
      v105 = *(unsigned __int16 *)(a2 + 1954);
      if ((_DWORD)v105 == 0xFFFF)
      {
        v105 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1954) = v105;
        *(_WORD *)(a2 + 2004) = v105 + 1;
      }
      *((_QWORD *)&v326[0] + 1) = (v105 << 48) | 0x72679000;
      (*(void (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v326);
      memset(&v326[1], 0, 64);
      *(_QWORD *)&v326[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x31000007C2;
      *(_DWORD *)(a2 + 16) = 2;
      v106 = *(unsigned __int16 *)(a2 + 1954);
      if (v106 == 0xFFFF)
      {
        v109 = *(unsigned __int16 *)(a2 + 2004);
        v110 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1954) = v109;
        v111 = v110 + 1;
        *(_WORD *)(a2 + 2004) = v110 + 1;
        v108 = ((unint64_t)(unsigned __int16)v109 << 48) | 0x19C840;
        *(_QWORD *)&v326[1] = v108;
        if ((v111 & 0x10000) != 0)
        {
          v107 = 0;
          *(_WORD *)(a2 + 1954) = v111;
          *(_WORD *)(a2 + 2004) = 1;
          v108 = 1689664;
        }
        else
        {
          v107 = v109 << 48;
        }
      }
      else
      {
        v107 = v106 << 48;
        v108 = ((unint64_t)(unsigned __int16)v106 << 48) | 0x19C840;
        *(_QWORD *)&v326[1] = v108;
      }
      *((_QWORD *)&v326[1] + 1) = v108;
      *((_QWORD *)&v326[0] + 1) = v107 | 0x72679000;
      (*(void (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v326);
      memset((char *)v326 + 8, 0, 72);
      *(_QWORD *)&v326[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
      *(_DWORD *)(a2 + 16) = 3;
      v112 = *(unsigned __int16 *)(a2 + 1954);
      if ((_DWORD)v112 == 0xFFFF)
      {
        v112 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1954) = v112;
        *(_WORD *)(a2 + 2004) = v112 + 1;
      }
      *(_QWORD *)&v326[1] = (v112 << 48) | 0x19C840;
      v113 = *(unsigned __int16 *)(a2 + 1902);
      if ((_DWORD)v113 == 0xFFFF)
      {
        v113 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1902) = v113;
        *(_WORD *)(a2 + 2004) = v113 + 1;
      }
      *((_QWORD *)&v326[1] + 1) = ((v113 << 48) | 0x19C840) + 16;
      v114 = *(unsigned __int16 *)(a2 + 1946);
      if (v114 == 0xFFFF)
      {
        v116 = *(unsigned __int16 *)(a2 + 2004);
        v117 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1946) = v116;
        v118 = v117 + 1;
        *(_WORD *)(a2 + 2004) = v118;
        *(_QWORD *)&v326[2] = ((unint64_t)(unsigned __int16)v116 << 48) | 0x19C840;
        if ((v118 & 0x10000) != 0)
        {
          v115 = 0;
          *(_WORD *)(a2 + 1946) = v118;
          *(_WORD *)(a2 + 2004) = 1;
        }
        else
        {
          v115 = v116 << 48;
        }
      }
      else
      {
        v115 = v114 << 48;
        *(_QWORD *)&v326[2] = ((unint64_t)(unsigned __int16)v114 << 48) | 0x19C840;
      }
      *((_QWORD *)&v326[0] + 1) = v115 | 0x72679000;
      result = (unint64_t *)(*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v326);
      if (v102)
      {
        memset(&v326[2], 0, 48);
        v119 = *(_DWORD *)(a2 + 16);
        *(_DWORD *)(a2 + 16) = 2;
        *(_QWORD *)&v326[0] = (8 * (v119 & 7)) | 0x3100011042;
        v120 = *(unsigned __int16 *)(a2 + 1946);
        if ((_DWORD)v120 == 0xFFFF)
        {
          v120 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1946) = v120;
          *(_WORD *)(a2 + 2004) = v120 + 1;
        }
        *(_QWORD *)&v326[1] = (v120 << 48) | 0x19C840;
        *((_QWORD *)&v326[1] + 1) = 2560163840;
        v121 = *(unsigned __int16 *)(a2 + 1954);
        if ((_DWORD)v121 == 0xFFFF)
        {
          v121 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1954) = v121;
          *(_WORD *)(a2 + 2004) = v121 + 1;
        }
        *((_QWORD *)&v326[0] + 1) = (v121 << 48) | 0x72679000;
        (*(void (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v326);
        memset((char *)v326 + 8, 0, 72);
        *(_QWORD *)&v326[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x31000007C2;
        *(_DWORD *)(a2 + 16) = 2;
        v122 = *(unsigned __int16 *)(a2 + 1946);
        if ((_DWORD)v122 == 0xFFFF)
        {
          v122 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1946) = v122;
          *(_WORD *)(a2 + 2004) = v122 + 1;
        }
        *(_QWORD *)&v326[1] = (v122 << 48) | 0x19C840;
        v123 = *(unsigned __int16 *)(a2 + 1954);
        if (v123 == 0xFFFF)
        {
          v125 = *(unsigned __int16 *)(a2 + 2004);
          v126 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1954) = v125;
          v127 = v126 + 1;
          *(_WORD *)(a2 + 2004) = v127;
          *((_QWORD *)&v326[1] + 1) = ((unint64_t)(unsigned __int16)v125 << 48) | 0x19C840;
          if ((v127 & 0x10000) != 0)
          {
            v124 = 0;
            *(_WORD *)(a2 + 1954) = v127;
            *(_WORD *)(a2 + 2004) = 1;
          }
          else
          {
            v124 = v125 << 48;
          }
        }
        else
        {
          v124 = v123 << 48;
          *((_QWORD *)&v326[1] + 1) = ((unint64_t)(unsigned __int16)v123 << 48) | 0x19C840;
        }
        *((_QWORD *)&v326[0] + 1) = v124 | 0x72679000;
        (*(void (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v326);
        memset(&v326[1], 0, 64);
        *(_QWORD *)&v326[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000A02;
        *(_DWORD *)(a2 + 16) = 2;
        v128 = *(unsigned __int16 *)(a2 + 1954);
        if (v128 == 0xFFFF)
        {
          v131 = *(unsigned __int16 *)(a2 + 2004);
          v132 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1954) = v131;
          v133 = v132 + 1;
          *(_WORD *)(a2 + 2004) = v132 + 1;
          v130 = ((unint64_t)(unsigned __int16)v131 << 48) | 0x19C840;
          *(_QWORD *)&v326[1] = v130;
          if ((v133 & 0x10000) != 0)
          {
            v129 = 0;
            *(_WORD *)(a2 + 1954) = v133;
            *(_WORD *)(a2 + 2004) = 1;
            v130 = 1689664;
          }
          else
          {
            v129 = v131 << 48;
          }
        }
        else
        {
          v129 = v128 << 48;
          v130 = ((unint64_t)(unsigned __int16)v128 << 48) | 0x19C840;
          *(_QWORD *)&v326[1] = v130;
        }
        *((_QWORD *)&v326[1] + 1) = v130;
        *((_QWORD *)&v326[0] + 1) = v129 | 0x72679000;
        (*(void (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v326);
        memset(&v326[1], 0, 64);
        v134 = *(_DWORD *)(a2 + 16);
        *(_DWORD *)(a2 + 16) = 1;
        *(_QWORD *)&v326[0] = (8 * (v134 & 7)) | 0x100100341;
        v135 = *(unsigned __int16 *)(a2 + 1954);
        if (v135 == 0xFFFF)
        {
          v137 = *(unsigned __int16 *)(a2 + 2004);
          v138 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1954) = v137;
          v139 = v138 + 1;
          *(_WORD *)(a2 + 2004) = v139;
          *(_QWORD *)&v326[1] = ((unint64_t)(unsigned __int16)v137 << 48) | 0x19C840;
          if ((v139 & 0x10000) != 0)
          {
            v136 = 0;
            *(_WORD *)(a2 + 1954) = v139;
            *(_WORD *)(a2 + 2004) = 1;
          }
          else
          {
            v136 = v137 << 48;
          }
        }
        else
        {
          v136 = v135 << 48;
          *(_QWORD *)&v326[1] = ((unint64_t)(unsigned __int16)v135 << 48) | 0x19C840;
        }
        *((_QWORD *)&v326[0] + 1) = v136 | 0x72679000;
        (*(void (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v326);
        memset(&v326[2], 0, 48);
        *(_QWORD *)&v326[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
        *(_DWORD *)(a2 + 16) = 2;
        v140 = *(unsigned __int16 *)(a2 + 1954);
        if ((_DWORD)v140 == 0xFFFF)
        {
          v140 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1954) = v140;
          *(_WORD *)(a2 + 2004) = v140 + 1;
        }
        *(_QWORD *)&v326[1] = (v140 << 48) | 0x19C840;
        v141 = *(unsigned __int16 *)(a2 + 1664);
        if ((_DWORD)v141 == 0xFFFF)
        {
          v142 = *(__int16 *)(a2 + 1998);
          v141 = *(unsigned __int16 *)(a2 + 1998);
          *(_WORD *)(a2 + 1664) = v142;
          *(_WORD *)(a2 + 4 * v142 + 262) = 351;
          *(_WORD *)(a2 + 1998) = v142 + 1;
          v140 = *(unsigned __int16 *)(a2 + 1954);
        }
        *((_QWORD *)&v326[1] + 1) = (v141 << 48) | 0x80;
        if ((_DWORD)v140 == 0xFFFF)
        {
          v140 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1954) = v140;
          *(_WORD *)(a2 + 2004) = v140 + 1;
        }
        *((_QWORD *)&v326[0] + 1) = (v140 << 48) | 0x72679000;
        (*(void (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v326);
        memset((char *)v326 + 8, 0, 72);
        *(_QWORD *)&v326[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
        *(_DWORD *)(a2 + 16) = 3;
        v143 = *(unsigned __int16 *)(a2 + 1946);
        if ((_DWORD)v143 == 0xFFFF)
        {
          v143 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1946) = v143;
          *(_WORD *)(a2 + 2004) = v143 + 1;
        }
        *(_QWORD *)&v326[1] = (v143 << 48) | 0x19C840;
        v144 = *(unsigned __int16 *)(a2 + 1954);
        if ((_DWORD)v144 == 0xFFFF)
        {
          v144 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1954) = v144;
          *(_WORD *)(a2 + 2004) = v144 + 1;
        }
        *((_QWORD *)&v326[1] + 1) = (v144 << 48) | 0x19C840;
        v145 = *(unsigned __int16 *)(a2 + 1664);
        if ((_DWORD)v145 == 0xFFFF)
        {
          v146 = *(__int16 *)(a2 + 1998);
          v145 = *(unsigned __int16 *)(a2 + 1998);
          *(_WORD *)(a2 + 1664) = v146;
          *(_WORD *)(a2 + 4 * v146 + 262) = 351;
          *(_WORD *)(a2 + 1998) = v146 + 1;
          v144 = *(unsigned __int16 *)(a2 + 1954);
        }
        *(_QWORD *)&v326[2] = (v145 << 48) | 0x80;
        if ((_DWORD)v144 == 0xFFFF)
        {
          v144 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1954) = v144;
          *(_WORD *)(a2 + 2004) = v144 + 1;
        }
        *((_QWORD *)&v326[0] + 1) = (v144 << 48) | 0x72679000;
        result = (unint64_t *)(*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v326);
      }
    }
    v147 = 0;
    v148 = v102 ^ v101;
    v149 = v102 ^ HIDWORD(v101);
    do
    {
      if (((v148 >> v147) & 0x1010101) != 0)
      {
        memset((char *)&v326[1] + 8, 0, 56);
        *(_QWORD *)&v326[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
        *(_DWORD *)(a2 + 16) = 1;
        v150 = *(unsigned __int16 *)(a2 + 1902);
        if ((_DWORD)v150 == 0xFFFF)
        {
          v150 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1902) = v150;
          *(_WORD *)(a2 + 2004) = v150 + 1;
        }
        *(_QWORD *)&v326[1] = (v150 << 48) | 0x19C840;
        v151 = a2 + 2 * v147;
        v152 = *(unsigned __int16 *)(v151 + 1978);
        if ((_DWORD)v152 == 0xFFFF)
        {
          v152 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(v151 + 1978) = v152;
          *(_WORD *)(a2 + 2004) = v152 + 1;
        }
        *((_QWORD *)&v326[0] + 1) = (((v148 >> v147) & 1) << 18) | (unint64_t)(v152 << 48) | (v148 >> v147 << 9) & 0x20000 | (unint64_t)((v148 >> v147) & 0x10000) | (v148 >> v147 >> 9) & 0x8000 | 0x72601000;
        result = (unint64_t *)(*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v326);
      }
      if (((v149 >> v147) & 0x1010101) != 0)
      {
        memset((char *)&v326[1] + 8, 0, 56);
        *(_QWORD *)&v326[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
        *(_DWORD *)(a2 + 16) = 1;
        v153 = *(unsigned __int16 *)(a2 + 1946);
        if ((_DWORD)v153 == 0xFFFF)
        {
          v153 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1946) = v153;
          *(_WORD *)(a2 + 2004) = v153 + 1;
        }
        *(_QWORD *)&v326[1] = (v153 << 48) | 0x19C840;
        v154 = a2 + 2 * v147;
        v155 = *(unsigned __int16 *)(v154 + 1978);
        if ((_DWORD)v155 == 0xFFFF)
        {
          v155 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(v154 + 1978) = v155;
          *(_WORD *)(a2 + 2004) = v155 + 1;
        }
        *((_QWORD *)&v326[0] + 1) = (((v149 >> v147) & 1) << 18) | (unint64_t)(v155 << 48) | (v149 >> v147 << 9) & 0x20000 | (unint64_t)((v149 >> v147) & 0x10000) | (v149 >> v147 >> 9) & 0x8000 | 0x72601000;
        result = (unint64_t *)(*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v326);
      }
      if (((v102 >> v147) & 0x1010101) != 0)
      {
        memset((char *)&v326[1] + 8, 0, 56);
        *(_QWORD *)&v326[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
        *(_DWORD *)(a2 + 16) = 1;
        v156 = *(unsigned __int16 *)(a2 + 1954);
        if ((_DWORD)v156 == 0xFFFF)
        {
          v156 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1954) = v156;
          *(_WORD *)(a2 + 2004) = v156 + 1;
        }
        *(_QWORD *)&v326[1] = (v156 << 48) | 0x19C840;
        v157 = a2 + 2 * v147;
        v158 = *(unsigned __int16 *)(v157 + 1978);
        if ((_DWORD)v158 == 0xFFFF)
        {
          v158 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(v157 + 1978) = v158;
          *(_WORD *)(a2 + 2004) = v158 + 1;
        }
        *((_QWORD *)&v326[0] + 1) = (((v102 >> v147) & 1) << 18) | (unint64_t)(v158 << 48) | (v102 >> v147 << 9) & 0x20000 | (unint64_t)((v102 >> v147) & 0x10000) | (v102 >> v147 >> 9) & 0x8000 | 0x72601000;
        result = (unint64_t *)(*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v326);
      }
      ++v147;
    }
    while (v147 != 8);
    v3 = v325;
    v5 = *v325;
  }
  if ((v5 & 0x100) != 0)
    goto LABEL_259;
LABEL_263:
  v159 = *v3;
  if ((*v3 & 0x1000) == 0)
    goto LABEL_267;
  memset((char *)&v326[1] + 8, 0, 56);
  *(_QWORD *)&v326[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
  *(_DWORD *)(a2 + 16) = 1;
  *(_QWORD *)&v326[1] = (gleVStateProgram_GetAttrib(a2, 2) << 48) | 0x19C800;
  v160 = *(unsigned __int16 *)(a2 + 1704);
  if ((_DWORD)v160 == 0xFFFF)
  {
    v161 = *(__int16 *)(a2 + 2000);
    v160 = *(unsigned __int16 *)(a2 + 2000);
    *(_WORD *)(a2 + 1704) = v161;
    *(_WORD *)(a2 + 4 * v161 + 1694) = 3;
    *(_WORD *)(a2 + 2000) = v161 + 1;
  }
  *((_QWORD *)&v326[0] + 1) = ((v160 << 48) | 0x72679000) + 0x2000;
  result = (unint64_t *)(*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v326);
  v159 = *v3;
  if ((*v3 & 0x1000000000000) != 0)
  {
    memset((char *)&v326[1] + 8, 0, 56);
    *(_QWORD *)&v326[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
    *(_DWORD *)(a2 + 16) = 1;
    *(_QWORD *)&v326[1] = (gleVStateProgram_GetAttrib(a2, 2) << 48) | 0x19C800;
    v166 = *(unsigned __int16 *)(a2 + 1708);
    if ((_DWORD)v166 == 0xFFFF)
    {
      v167 = *(__int16 *)(a2 + 2000);
      v166 = *(unsigned __int16 *)(a2 + 2000);
      *(_WORD *)(a2 + 1708) = v167;
      *(_WORD *)(a2 + 4 * v167 + 1694) = 4;
      *(_WORD *)(a2 + 2000) = v167 + 1;
    }
    *((_QWORD *)&v326[0] + 1) = ((v166 << 48) | 0x72679000) + 0x2000;
    result = (unint64_t *)(*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v326);
    v163 = v3[3];
    v162 = v3[4];
    v164 = v3[1];
    v165 = v3[2];
    v159 = *v3;
    if ((*v3 & 0x2000) == 0)
    {
LABEL_276:
      if ((v159 & 0x4000) == 0)
        goto LABEL_277;
      goto LABEL_282;
    }
  }
  else
  {
LABEL_267:
    v163 = v3[3];
    v162 = v3[4];
    v164 = v3[1];
    v165 = v3[2];
    if ((v159 & 0x2000) == 0)
      goto LABEL_276;
  }
  memset((char *)&v326[1] + 8, 0, 56);
  *(_QWORD *)&v326[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
  *(_DWORD *)(a2 + 16) = 1;
  *(_QWORD *)&v326[1] = (gleVStateProgram_GetAttrib(a2, 3) << 48) | 0x19C800;
  v168 = *(unsigned __int16 *)(a2 + 1712);
  if ((_DWORD)v168 == 0xFFFF)
  {
    v169 = *(__int16 *)(a2 + 2000);
    v168 = *(unsigned __int16 *)(a2 + 2000);
    *(_WORD *)(a2 + 1712) = v169;
    *(_WORD *)(a2 + 4 * v169 + 1694) = 5;
    *(_WORD *)(a2 + 2000) = v169 + 1;
  }
  *((_QWORD *)&v326[0] + 1) = ((v168 << 48) | 0x72679000) + 0x2000;
  result = (unint64_t *)(*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v326);
  v159 = *v3;
  if ((*v3 & 0x1000000000000) == 0)
  {
    v163 = v3[3];
    v162 = v3[4];
    v164 = v3[1];
    v165 = v3[2];
    goto LABEL_276;
  }
  memset((char *)&v326[1] + 8, 0, 56);
  *(_QWORD *)&v326[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
  *(_DWORD *)(a2 + 16) = 1;
  *(_QWORD *)&v326[1] = (gleVStateProgram_GetAttrib(a2, 3) << 48) | 0x19C800;
  v170 = *(unsigned __int16 *)(a2 + 1716);
  if ((_DWORD)v170 == 0xFFFF)
  {
    v171 = *(__int16 *)(a2 + 2000);
    v170 = *(unsigned __int16 *)(a2 + 2000);
    *(_WORD *)(a2 + 1716) = v171;
    *(_WORD *)(a2 + 4 * v171 + 1694) = 6;
    *(_WORD *)(a2 + 2000) = v171 + 1;
  }
  *((_QWORD *)&v326[0] + 1) = ((v170 << 48) | 0x72679000) + 0x2000;
  result = (unint64_t *)(*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v326);
  v163 = v3[3];
  v162 = v3[4];
  v164 = v3[1];
  v165 = v3[2];
  v159 = *v3;
  if ((*v3 & 0x4000) == 0)
  {
LABEL_277:
    if ((v159 & 0x800) == 0)
      goto LABEL_513;
    goto LABEL_512;
  }
LABEL_282:
  if ((v162 & 0x40) != 0 || (v164 & 0xC0000000) == 0xC0000000)
  {
    memset(&v326[1], 0, 64);
    *(_QWORD *)&v326[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000A02;
    *(_DWORD *)(a2 + 16) = 2;
    v172 = *(unsigned __int16 *)(a2 + 1900);
    if (v172 == 0xFFFF)
    {
      v176 = *(unsigned __int16 *)(a2 + 2004);
      v177 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1900) = v176;
      v178 = v177 + 1;
      *(_WORD *)(a2 + 2004) = v178;
      v173 = (v176 << 48) | 0x19C840;
      *(_QWORD *)&v326[1] = v173;
      if ((v178 & 0x10000) != 0)
      {
        *(_WORD *)(a2 + 1900) = v178;
        *(_WORD *)(a2 + 2004) = 1;
        v173 = 1689664;
      }
    }
    else
    {
      v173 = (v172 << 48) | 0x19C840;
      *(_QWORD *)&v326[1] = v173;
    }
    *((_QWORD *)&v326[1] + 1) = v173;
    v179 = *(unsigned __int16 *)(a2 + 1946);
    if ((_DWORD)v179 == 0xFFFF)
    {
      v179 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1946) = v179;
      *(_WORD *)(a2 + 2004) = v179 + 1;
    }
    *((_QWORD *)&v326[0] + 1) = (v179 << 48) | 0x72679000;
    (*(void (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v326);
    v180 = *v3;
    memset(&v326[1], 0, 64);
    v181 = 8 * (*(_DWORD *)(a2 + 16) & 7);
    *(_DWORD *)(a2 + 16) = 1;
    if ((v180 & 0x1000000000000000) != 0)
    {
      v184 = 0x100100301;
    }
    else
    {
      *(_QWORD *)&v326[0] = v181 | 0x100100341;
      v182 = *(unsigned __int16 *)(a2 + 1946);
      if (v182 == 0xFFFF)
      {
        v185 = *(unsigned __int16 *)(a2 + 2004);
        v186 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1946) = v185;
        v187 = v186 + 1;
        *(_WORD *)(a2 + 2004) = v187;
        *(_QWORD *)&v326[1] = ((unint64_t)(unsigned __int16)v185 << 48) | 0x19C840;
        if ((v187 & 0x10000) != 0)
        {
          v183 = 0;
          *(_WORD *)(a2 + 1946) = v187;
          *(_WORD *)(a2 + 2004) = 1;
        }
        else
        {
          v183 = v185 << 48;
        }
      }
      else
      {
        v183 = v182 << 48;
        *(_QWORD *)&v326[1] = ((unint64_t)(unsigned __int16)v182 << 48) | 0x19C840;
      }
      *((_QWORD *)&v326[0] + 1) = v183 | 0x72679000;
      (*(void (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v326);
      memset((char *)&v326[1] + 8, 0, 56);
      v181 = 8 * (*(_DWORD *)(a2 + 16) & 7);
      *(_DWORD *)(a2 + 16) = 1;
      v184 = 0x100100381;
    }
    *(_QWORD *)&v326[0] = v181 | v184;
    v188 = *(unsigned __int16 *)(a2 + 1946);
    if ((_DWORD)v188 == 0xFFFF)
    {
      v188 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1946) = v188;
      *(_WORD *)(a2 + 2004) = v188 + 1;
    }
    *(_QWORD *)&v326[1] = (v188 << 48) | 0x19C840;
    v189 = *(unsigned __int16 *)(a2 + 1962);
    if ((_DWORD)v189 == 0xFFFF)
    {
      v189 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1962) = v189;
      *(_WORD *)(a2 + 2004) = v189 + 1;
    }
    *((_QWORD *)&v326[0] + 1) = (v189 << 48) | 0x72679000;
    result = (unint64_t *)(*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v326);
    v162 = v3[4];
    v159 = *v3;
    v164 = v3[1];
  }
  if ((v162 & 0x40) != 0)
  {
    memset((char *)v326 + 8, 0, 72);
    *(_QWORD *)&v326[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
    *(_DWORD *)(a2 + 16) = 3;
    v193 = *(unsigned __int16 *)(a2 + 1962);
    if ((_DWORD)v193 == 0xFFFF)
    {
      v193 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1962) = v193;
      *(_WORD *)(a2 + 2004) = v193 + 1;
    }
    *(_QWORD *)&v326[1] = (v193 << 48) | 0x19C840;
    v194 = *(unsigned __int16 *)(a2 + 1648);
    if (v194 == 0xFFFF)
    {
      v196 = *(__int16 *)(a2 + 1998);
      v197 = *(unsigned __int16 *)(a2 + 1998);
      *(_WORD *)(a2 + 1648) = v196;
      *(_WORD *)(a2 + 4 * v196 + 262) = 347;
      v198 = v197 + 1;
      *(_WORD *)(a2 + 1998) = v198;
      *((_QWORD *)&v326[1] + 1) = ((unint64_t)(unsigned __int16)v196 << 48) | 0x15480;
      if ((v198 & 0x10000) != 0)
      {
        v195 = 0;
        *(_WORD *)(a2 + 1648) = v198;
        *(_WORD *)(a2 + 4 * (unsigned __int16)v198 + 262) = 347;
        *(_WORD *)(a2 + 1998) = 1;
      }
      else
      {
        v195 = v196 << 48;
      }
    }
    else
    {
      v195 = v194 << 48;
      *((_QWORD *)&v326[1] + 1) = ((unint64_t)(unsigned __int16)v194 << 48) | 0x15480;
    }
    *(_QWORD *)&v326[2] = v195 | 0xAA80;
    v202 = *(unsigned __int16 *)(a2 + 1954);
    if ((_DWORD)v202 == 0xFFFF)
    {
      v202 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1954) = v202;
      *(_WORD *)(a2 + 2004) = v202 + 1;
    }
    *((_QWORD *)&v326[0] + 1) = (v202 << 48) | 0x72679000;
    (*(void (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v326);
    memset((char *)v326 + 8, 0, 72);
    *(_QWORD *)&v326[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
    *(_DWORD *)(a2 + 16) = 3;
    v203 = *(unsigned __int16 *)(a2 + 1962);
    if ((_DWORD)v203 == 0xFFFF)
    {
      v203 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1962) = v203;
      *(_WORD *)(a2 + 2004) = v203 + 1;
    }
    *(_QWORD *)&v326[1] = (v203 << 48) | 0x19C840;
    v204 = *(unsigned __int16 *)(a2 + 1954);
    if ((_DWORD)v204 == 0xFFFF)
    {
      v204 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1954) = v204;
      *(_WORD *)(a2 + 2004) = v204 + 1;
    }
    *((_QWORD *)&v326[1] + 1) = (v204 << 48) | 0x19C840;
    v205 = *(unsigned __int16 *)(a2 + 1648);
    if ((_DWORD)v205 == 0xFFFF)
    {
      v206 = *(__int16 *)(a2 + 1998);
      v205 = *(unsigned __int16 *)(a2 + 1998);
      *(_WORD *)(a2 + 1648) = v206;
      *(_WORD *)(a2 + 4 * v206 + 262) = 347;
      *(_WORD *)(a2 + 1998) = v206 + 1;
      v204 = *(unsigned __int16 *)(a2 + 1954);
    }
    *(_QWORD *)&v326[2] = ((v205 << 48) | 0x19C840) + 64;
    if ((_DWORD)v204 == 0xFFFF)
    {
      v204 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1954) = v204;
      *(_WORD *)(a2 + 2004) = v204 + 1;
    }
    *((_QWORD *)&v326[0] + 1) = (v204 << 48) | 0x72679000;
    (*(void (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v326);
    memset((char *)&v326[1] + 8, 0, 56);
    v207 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = 1;
    *(_QWORD *)&v326[0] = (8 * (v207 & 7)) | 0x100100341;
    v208 = *(unsigned __int16 *)(a2 + 1954);
    if ((_DWORD)v208 == 0xFFFF)
    {
      v208 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1954) = v208;
      *(_WORD *)(a2 + 2004) = v208 + 1;
    }
    *(_QWORD *)&v326[1] = (v208 << 48) | 0x19C840;
    v209 = *(unsigned __int16 *)(a2 + 1946);
    if ((_DWORD)v209 == 0xFFFF)
    {
      v209 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1946) = v209;
      *(_WORD *)(a2 + 2004) = v209 + 1;
    }
    *((_QWORD *)&v326[0] + 1) = (v209 << 48) | 0x72679000;
    (*(void (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v326);
    memset((char *)v326 + 8, 0, 72);
    *(_QWORD *)&v326[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
    *(_DWORD *)(a2 + 16) = 2;
    v210 = *(unsigned __int16 *)(a2 + 1946);
    if ((_DWORD)v210 == 0xFFFF)
    {
      v210 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1946) = v210;
      *(_WORD *)(a2 + 2004) = v210 + 1;
    }
    *(_QWORD *)&v326[1] = (v210 << 48) | 0x19C840;
    if ((v3[4] & 0x20) != 0)
    {
      v213 = gleVStateProgram_GetAttrib(a2, 6) << 48;
    }
    else
    {
      v211 = *(unsigned __int16 *)(a2 + 1652);
      if ((_DWORD)v211 == 0xFFFF)
      {
        v212 = *(__int16 *)(a2 + 1998);
        v211 = *(unsigned __int16 *)(a2 + 1998);
        *(_WORD *)(a2 + 1652) = v212;
        *(_WORD *)(a2 + 4 * v212 + 262) = 348;
        *(_WORD *)(a2 + 1998) = v212 + 1;
      }
      v213 = ((v211 << 48) | 0x19C840) + 64;
    }
    *((_QWORD *)&v326[1] + 1) = v213;
    v214 = *(unsigned __int16 *)(a2 + 1946);
    if ((_DWORD)v214 == 0xFFFF)
    {
      v214 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1946) = v214;
      *(_WORD *)(a2 + 2004) = v214 + 1;
    }
    *((_QWORD *)&v326[0] + 1) = (v214 << 48) | 0x72679000;
    (*(void (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v326);
    memset((char *)&v326[1] + 8, 0, 56);
    *(_QWORD *)&v326[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000B42;
    *(_DWORD *)(a2 + 16) = 2;
    v215 = *(unsigned __int16 *)(a2 + 1946);
    if ((_DWORD)v215 == 0xFFFF)
    {
      v215 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1946) = v215;
      *(_WORD *)(a2 + 2004) = v215 + 1;
    }
    *(_QWORD *)&v326[1] = (v215 << 48) | 0x19C840;
    v216 = *(unsigned __int16 *)(a2 + 1652);
    if ((_DWORD)v216 == 0xFFFF)
    {
      v217 = *(__int16 *)(a2 + 1998);
      v216 = *(unsigned __int16 *)(a2 + 1998);
      *(_WORD *)(a2 + 1652) = v217;
      *(_WORD *)(a2 + 4 * v217 + 262) = 348;
      *(_WORD *)(a2 + 1998) = v217 + 1;
      v215 = *(unsigned __int16 *)(a2 + 1946);
    }
    *((_QWORD *)&v326[1] + 1) = (v216 << 48) | 0xAA80;
    if ((_DWORD)v215 == 0xFFFF)
    {
      v215 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1946) = v215;
      *(_WORD *)(a2 + 2004) = v215 + 1;
    }
    *((_QWORD *)&v326[0] + 1) = (v215 << 48) | 0x72679000;
    (*(void (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v326);
    memset((char *)&v326[1] + 8, 0, 56);
    *(_QWORD *)&v326[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000B02;
    *(_DWORD *)(a2 + 16) = 2;
    v218 = *(unsigned __int16 *)(a2 + 1946);
    if ((_DWORD)v218 == 0xFFFF)
    {
      v218 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1946) = v218;
      *(_WORD *)(a2 + 2004) = v218 + 1;
    }
    *(_QWORD *)&v326[1] = (v218 << 48) | 0x19C840;
    v219 = *(unsigned __int16 *)(a2 + 1652);
    if ((_DWORD)v219 == 0xFFFF)
    {
      v220 = *(__int16 *)(a2 + 1998);
      v219 = *(unsigned __int16 *)(a2 + 1998);
      *(_WORD *)(a2 + 1652) = v220;
      *(_WORD *)(a2 + 4 * v220 + 262) = 348;
      *(_WORD *)(a2 + 1998) = v220 + 1;
    }
    *((_QWORD *)&v326[1] + 1) = (v219 << 48) | 0x15480;
  }
  else
  {
    if ((v162 & 0x80) == 0)
      goto LABEL_366;
    if ((v162 & 0x800) != 0)
    {
      memset((char *)v326 + 8, 0, 72);
      *(_QWORD *)&v326[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x31000007C2;
      *(_DWORD *)(a2 + 16) = 2;
      if ((v3[4] & 0x20) != 0)
      {
        v201 = gleVStateProgram_GetAttrib(a2, 6) << 48;
      }
      else
      {
        v199 = *(unsigned __int16 *)(a2 + 1652);
        if ((_DWORD)v199 == 0xFFFF)
        {
          v200 = *(__int16 *)(a2 + 1998);
          v199 = *(unsigned __int16 *)(a2 + 1998);
          *(_WORD *)(a2 + 1652) = v200;
          *(_WORD *)(a2 + 4 * v200 + 262) = 348;
          *(_WORD *)(a2 + 1998) = v200 + 1;
        }
        v201 = ((v199 << 48) | 0x19C840) + 64;
      }
      *(_QWORD *)&v326[1] = v201;
      v266 = *(unsigned __int16 *)(a2 + 1664);
      if ((_DWORD)v266 == 0xFFFF)
      {
        v267 = *(__int16 *)(a2 + 1998);
        v266 = *(unsigned __int16 *)(a2 + 1998);
        *(_WORD *)(a2 + 1664) = v267;
        *(_WORD *)(a2 + 4 * v267 + 262) = 351;
        *(_WORD *)(a2 + 1998) = v267 + 1;
      }
      *((_QWORD *)&v326[1] + 1) = (v266 << 48) | 0x15480;
      v268 = *(unsigned __int16 *)(a2 + 1946);
      if ((_DWORD)v268 == 0xFFFF)
      {
        v268 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1946) = v268;
        *(_WORD *)(a2 + 2004) = v268 + 1;
      }
      *((_QWORD *)&v326[0] + 1) = (v268 << 48) | 0x72679000;
      (*(void (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v326);
      memset((char *)&v326[1] + 8, 0, 56);
      *(_QWORD *)&v326[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
      *(_DWORD *)(a2 + 16) = 1;
      v269 = *(unsigned __int16 *)(a2 + 1946);
      if ((_DWORD)v269 == 0xFFFF)
      {
        v269 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1946) = v269;
        *(_WORD *)(a2 + 2004) = v269 + 1;
      }
      *(_QWORD *)&v326[1] = (v269 << 48) | 0x19C840;
      v270 = *(unsigned __int16 *)(a2 + 1700);
      if ((_DWORD)v270 == 0xFFFF)
      {
        v271 = *(__int16 *)(a2 + 2000);
        v270 = *(unsigned __int16 *)(a2 + 2000);
        *(_WORD *)(a2 + 1700) = v271;
        *(_WORD *)(a2 + 4 * v271 + 1694) = 2;
        *(_WORD *)(a2 + 2000) = v271 + 1;
      }
      v223 = (v270 << 48) | 0x72643000;
      goto LABEL_365;
    }
    memset((char *)&v326[1] + 8, 0, 56);
    *(_QWORD *)&v326[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
    *(_DWORD *)(a2 + 16) = 1;
    if ((v3[4] & 0x20) != 0)
    {
      v192 = gleVStateProgram_GetAttrib(a2, 6) << 48;
    }
    else
    {
      v190 = *(unsigned __int16 *)(a2 + 1652);
      if ((_DWORD)v190 == 0xFFFF)
      {
        v191 = *(__int16 *)(a2 + 1998);
        v190 = *(unsigned __int16 *)(a2 + 1998);
        *(_WORD *)(a2 + 1652) = v191;
        *(_WORD *)(a2 + 4 * v191 + 262) = 348;
        *(_WORD *)(a2 + 1998) = v191 + 1;
      }
      v192 = ((v190 << 48) | 0x19C840) + 64;
    }
    *(_QWORD *)&v326[1] = v192;
  }
  v221 = *(unsigned __int16 *)(a2 + 1700);
  if ((_DWORD)v221 == 0xFFFF)
  {
    v222 = *(__int16 *)(a2 + 2000);
    v221 = *(unsigned __int16 *)(a2 + 2000);
    *(_WORD *)(a2 + 1700) = v222;
    *(_WORD *)(a2 + 4 * v222 + 1694) = 2;
    *(_WORD *)(a2 + 2000) = v222 + 1;
  }
  v223 = (v221 << 48) | 0x72643000;
LABEL_365:
  *((_QWORD *)&v326[0] + 1) = v223;
  result = (unint64_t *)(*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v326);
  *(_DWORD *)(a2 + 2032) |= 2u;
  v162 = v3[4];
  v159 = *v3;
  v164 = v3[1];
LABEL_366:
  if ((v162 & 2) != 0)
  {
    v228 = v164 >> 30;
    if (v228 == 2)
    {
      memset((char *)&v326[1] + 8, 0, 56);
      *(_QWORD *)&v326[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
      *(_DWORD *)(a2 + 16) = 1;
      v230 = *(unsigned __int16 *)(a2 + 1900);
      if ((_DWORD)v230 == 0xFFFF)
      {
        v230 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1900) = v230;
        *(_WORD *)(a2 + 2004) = v230 + 1;
      }
      v231 = (v230 << 48) | 0x15440;
    }
    else
    {
      if (v228 == 1)
      {
        memset((char *)&v326[1] + 8, 0, 56);
        *(_QWORD *)&v326[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
        *(_DWORD *)(a2 + 16) = 1;
        *(_QWORD *)&v326[1] = gleVStateProgram_GetAttrib(a2, 5) << 48;
        v229 = *(unsigned __int16 *)(a2 + 1970);
        goto LABEL_383;
      }
      memset((char *)&v326[1] + 8, 0, 56);
      *(_QWORD *)&v326[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
      *(_DWORD *)(a2 + 16) = 1;
      v232 = *(unsigned __int16 *)(a2 + 1962);
      if ((_DWORD)v232 == 0xFFFF)
      {
        v232 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1962) = v232;
        *(_WORD *)(a2 + 2004) = v232 + 1;
      }
      v231 = (v232 << 48) | 0x19C840;
    }
    *(_QWORD *)&v326[1] = v231;
    v229 = *(unsigned __int16 *)(a2 + 1970);
LABEL_383:
    if ((_DWORD)v229 == 0xFFFF)
    {
      v229 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1970) = v229;
      *(_WORD *)(a2 + 2004) = v229 + 1;
    }
    *((_QWORD *)&v326[0] + 1) = (v229 << 48) | 0x72679000;
    (*(void (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v326);
    v233 = v3[4];
    if ((v233 & 1) != 0)
    {
      memset((char *)&v326[1] + 8, 0, 56);
      *(_QWORD *)&v326[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
      *(_DWORD *)(a2 + 16) = 1;
      v234 = *(unsigned __int16 *)(a2 + 1970);
      if ((_DWORD)v234 == 0xFFFF)
      {
        v234 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1970) = v234;
        *(_WORD *)(a2 + 2004) = v234 + 1;
      }
      *(_QWORD *)&v326[1] = (v234 << 48) | 0x19C840;
      v235 = *(unsigned __int16 *)(a2 + 1696);
      if ((_DWORD)v235 == 0xFFFF)
      {
        v236 = *(__int16 *)(a2 + 2000);
        v235 = *(unsigned __int16 *)(a2 + 2000);
        *(_WORD *)(a2 + 1696) = v236;
        *(_WORD *)(a2 + 4 * v236 + 1694) = 1;
        *(_WORD *)(a2 + 2000) = v236 + 1;
      }
      *((_QWORD *)&v326[0] + 1) = (v235 << 48) | 0x72643000;
      (*(void (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v326);
      v233 = v3[4];
    }
    v237 = (v233 >> 2) & 3;
    if (v237 == 2)
    {
      if ((v233 & 0x10) != 0)
      {
        memset(&v326[2], 0, 48);
        *(_QWORD *)&v326[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000B42;
        *(_DWORD *)(a2 + 16) = 2;
        v258 = *(unsigned __int16 *)(a2 + 1970);
        if ((_DWORD)v258 == 0xFFFF)
        {
          v258 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1970) = v258;
          *(_WORD *)(a2 + 2004) = v258 + 1;
        }
        *(_QWORD *)&v326[1] = (v258 << 48) | 0x40;
        v259 = *(unsigned __int16 *)(a2 + 1664);
        if ((_DWORD)v259 == 0xFFFF)
        {
          v260 = *(__int16 *)(a2 + 1998);
          v259 = *(unsigned __int16 *)(a2 + 1998);
          *(_WORD *)(a2 + 1664) = v260;
          *(_WORD *)(a2 + 4 * v260 + 262) = 351;
          *(_WORD *)(a2 + 1998) = v260 + 1;
        }
        *((_QWORD *)&v326[1] + 1) = (v259 << 48) | 0xAA80;
        v244 = *(unsigned __int16 *)(a2 + 1954);
      }
      else
      {
        memset((char *)&v326[1] + 8, 0, 56);
        *(_QWORD *)&v326[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000081;
        *(_DWORD *)(a2 + 16) = 1;
        v243 = *(unsigned __int16 *)(a2 + 1970);
        if ((_DWORD)v243 == 0xFFFF)
        {
          v243 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1970) = v243;
          *(_WORD *)(a2 + 2004) = v243 + 1;
        }
        *(_QWORD *)&v326[1] = (v243 << 48) | 0x40;
        v244 = *(unsigned __int16 *)(a2 + 1954);
      }
      if ((_DWORD)v244 == 0xFFFF)
      {
        v244 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1954) = v244;
        *(_WORD *)(a2 + 2004) = v244 + 1;
      }
      *((_QWORD *)&v326[0] + 1) = (v244 << 48) | 0x72679000;
      (*(void (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v326);
      memset(&v326[2], 0, 48);
      *(_QWORD *)&v326[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
      *(_DWORD *)(a2 + 16) = 2;
      v261 = *(unsigned __int16 *)(a2 + 1954);
      if ((_DWORD)v261 == 0xFFFF)
      {
        v261 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1954) = v261;
        *(_WORD *)(a2 + 2004) = v261 + 1;
      }
      *(_QWORD *)&v326[1] = (v261 << 48) | 0x19C840;
      v262 = *(unsigned __int16 *)(a2 + 1660);
      if ((_DWORD)v262 == 0xFFFF)
      {
        v263 = *(__int16 *)(a2 + 1998);
        v262 = *(unsigned __int16 *)(a2 + 1998);
        *(_WORD *)(a2 + 1660) = v263;
        *(_WORD *)(a2 + 4 * v263 + 262) = 350;
        *(_WORD *)(a2 + 1998) = v263 + 1;
        v261 = *(unsigned __int16 *)(a2 + 1954);
      }
      *((_QWORD *)&v326[1] + 1) = (v262 << 48) | 0x80;
      if ((_DWORD)v261 == 0xFFFF)
      {
        v261 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1954) = v261;
        *(_WORD *)(a2 + 2004) = v261 + 1;
      }
      *((_QWORD *)&v326[0] + 1) = (v261 << 48) | 0x72679000;
      (*(void (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v326);
      memset((char *)&v326[1] + 8, 0, 56);
      v264 = *(_DWORD *)(a2 + 16);
      *(_DWORD *)(a2 + 16) = 1;
      *(_QWORD *)&v326[0] = (8 * (v264 & 7)) | 0x100000401;
      v265 = *(unsigned __int16 *)(a2 + 1954);
      if ((_DWORD)v265 == 0xFFFF)
      {
        v265 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1954) = v265;
        *(_WORD *)(a2 + 2004) = v265 + 1;
      }
      *(_QWORD *)&v326[1] = (v265 << 48) | 0x50;
      goto LABEL_474;
    }
    if (v237 != 1)
    {
      memset(&v326[2], 0, 48);
      *(_QWORD *)&v326[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
      *(_DWORD *)(a2 + 16) = 2;
      v245 = *(unsigned __int16 *)(a2 + 1970);
      if ((_DWORD)v245 == 0xFFFF)
      {
        v245 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1970) = v245;
        *(_WORD *)(a2 + 2004) = v245 + 1;
      }
      *(_QWORD *)&v326[1] = (v245 << 48) | 0x40;
      v246 = *(unsigned __int16 *)(a2 + 1660);
      if ((_DWORD)v246 == 0xFFFF)
      {
        v247 = *(__int16 *)(a2 + 1998);
        v246 = *(unsigned __int16 *)(a2 + 1998);
        *(_WORD *)(a2 + 1660) = v247;
        *(_WORD *)(a2 + 4 * v247 + 262) = 350;
        *(_WORD *)(a2 + 1998) = v247 + 1;
      }
      *((_QWORD *)&v326[1] + 1) = (v246 << 48) | 0xAA80;
      v248 = *(unsigned __int16 *)(a2 + 1954);
      if ((_DWORD)v248 == 0xFFFF)
      {
        v248 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1954) = v248;
        *(_WORD *)(a2 + 2004) = v248 + 1;
      }
      *((_QWORD *)&v326[0] + 1) = (v248 << 48) | 0x72679000;
      (*(void (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v326);
      memset(&v326[1], 0, 64);
      *(_QWORD *)&v326[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
      *(_DWORD *)(a2 + 16) = 2;
      v249 = *(unsigned __int16 *)(a2 + 1954);
      if (v249 == 0xFFFF)
      {
        v272 = *(unsigned __int16 *)(a2 + 2004);
        v273 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1954) = v272;
        v274 = v273 + 1;
        *(_WORD *)(a2 + 2004) = v273 + 1;
        v251 = ((unint64_t)(unsigned __int16)v272 << 48) | 0x19C840;
        *(_QWORD *)&v326[1] = v251;
        if ((v274 & 0x10000) != 0)
        {
          v250 = 0;
          *(_WORD *)(a2 + 1954) = v274;
          *(_WORD *)(a2 + 2004) = 1;
          v251 = 1689664;
        }
        else
        {
          v250 = v272 << 48;
        }
      }
      else
      {
        v250 = v249 << 48;
        v251 = ((unint64_t)(unsigned __int16)v249 << 48) | 0x19C840;
        *(_QWORD *)&v326[1] = v251;
      }
      *((_QWORD *)&v326[1] + 1) = v251;
      *((_QWORD *)&v326[0] + 1) = v250 | 0x72679000;
      (*(void (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v326);
      memset((char *)&v326[1] + 8, 0, 56);
      v288 = *(_DWORD *)(a2 + 16);
      *(_DWORD *)(a2 + 16) = 1;
      *(_QWORD *)&v326[0] = (8 * (v288 & 7)) | 0x100000401;
      v289 = *(unsigned __int16 *)(a2 + 1954);
      if ((_DWORD)v289 == 0xFFFF)
      {
        v289 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1954) = v289;
        *(_WORD *)(a2 + 2004) = v289 + 1;
      }
      *(_QWORD *)&v326[1] = (v289 << 48) | 0x50;
      v255 = *(unsigned __int16 *)(a2 + 1696);
      if ((_DWORD)v255 == 0xFFFF)
      {
        v290 = *(__int16 *)(a2 + 2000);
        v255 = *(unsigned __int16 *)(a2 + 2000);
        *(_WORD *)(a2 + 1696) = v290;
        *(_WORD *)(a2 + 4 * v290 + 1694) = 1;
        *(_WORD *)(a2 + 2000) = v290 + 1;
      }
      v257 = 1919037440;
      goto LABEL_484;
    }
    if ((v233 & 0x10) == 0)
    {
      memset((char *)&v326[1] + 8, 0, 56);
      *(_QWORD *)&v326[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000081;
      *(_DWORD *)(a2 + 16) = 1;
      v238 = *(unsigned __int16 *)(a2 + 1970);
      if ((_DWORD)v238 == 0xFFFF)
      {
        v238 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1970) = v238;
        *(_WORD *)(a2 + 2004) = v238 + 1;
      }
      *(_QWORD *)&v326[1] = (v238 << 48) | 0x40;
      v239 = *(unsigned __int16 *)(a2 + 1954);
      if ((_DWORD)v239 == 0xFFFF)
      {
        v239 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1954) = v239;
        *(_WORD *)(a2 + 2004) = v239 + 1;
      }
      *((_QWORD *)&v326[0] + 1) = (v239 << 48) | 0x72679000;
      (*(void (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v326);
    }
    memset((char *)v326 + 8, 0, 72);
    *(_QWORD *)&v326[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
    *(_DWORD *)(a2 + 16) = 3;
    if ((v3[4] & 0x10) != 0)
    {
      v240 = *(unsigned __int16 *)(a2 + 1970);
      if ((_DWORD)v240 == 0xFFFF)
      {
        v242 = (_WORD *)(a2 + 2004);
        v240 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1970) = v240;
        v241 = 64;
        goto LABEL_456;
      }
      v241 = 64;
    }
    else
    {
      v240 = *(unsigned __int16 *)(a2 + 1954);
      v241 = 1689664;
      if ((_DWORD)v240 == 0xFFFF)
      {
        v242 = (_WORD *)(a2 + 2004);
        v240 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1954) = v240;
        v241 = 1689664;
LABEL_456:
        *v242 = v240 + 1;
      }
    }
    *(_QWORD *)&v326[1] = v241 | (v240 << 48) | 0x10;
    v275 = *(unsigned __int16 *)(a2 + 1656);
    if ((_DWORD)v275 == 0xFFFF)
    {
      v276 = *(__int16 *)(a2 + 1998);
      v275 = *(unsigned __int16 *)(a2 + 1998);
      *(_WORD *)(a2 + 1656) = v276;
      *(_WORD *)(a2 + 4 * v276 + 262) = 349;
      *(_WORD *)(a2 + 1998) = v276 + 1;
    }
    *((_QWORD *)&v326[1] + 1) = (v275 << 48) | 0x1FE80;
    v277 = *(unsigned __int16 *)(a2 + 1660);
    if ((_DWORD)v277 == 0xFFFF)
    {
      v278 = *(__int16 *)(a2 + 1998);
      v277 = *(unsigned __int16 *)(a2 + 1998);
      *(_WORD *)(a2 + 1660) = v278;
      *(_WORD *)(a2 + 4 * v278 + 262) = 350;
      *(_WORD *)(a2 + 1998) = v278 + 1;
    }
    *(_QWORD *)&v326[2] = (v277 << 48) | 0x1FE80;
    v279 = *(unsigned __int16 *)(a2 + 1954);
    if ((_DWORD)v279 == 0xFFFF)
    {
      v279 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1954) = v279;
      *(_WORD *)(a2 + 2004) = v279 + 1;
    }
    *((_QWORD *)&v326[0] + 1) = (v279 << 48) | 0x72679000;
    (*(void (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v326);
    memset(&v326[2], 0, 48);
    *(_QWORD *)&v326[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000B42;
    *(_DWORD *)(a2 + 16) = 2;
    v280 = *(unsigned __int16 *)(a2 + 1954);
    if ((_DWORD)v280 == 0xFFFF)
    {
      v280 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1954) = v280;
      *(_WORD *)(a2 + 2004) = v280 + 1;
    }
    *(_QWORD *)&v326[1] = (v280 << 48) | 0x19C840;
    v281 = *(unsigned __int16 *)(a2 + 1664);
    if ((_DWORD)v281 == 0xFFFF)
    {
      v282 = *(__int16 *)(a2 + 1998);
      v281 = *(unsigned __int16 *)(a2 + 1998);
      *(_WORD *)(a2 + 1664) = v282;
      *(_WORD *)(a2 + 4 * v282 + 262) = 351;
      *(_WORD *)(a2 + 1998) = v282 + 1;
      v280 = *(unsigned __int16 *)(a2 + 1954);
    }
    *((_QWORD *)&v326[1] + 1) = (v281 << 48) | 0xAA80;
    if ((_DWORD)v280 == 0xFFFF)
    {
      v280 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1954) = v280;
      *(_WORD *)(a2 + 2004) = v280 + 1;
    }
    *((_QWORD *)&v326[0] + 1) = (v280 << 48) | 0x72679000;
    (*(void (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v326);
    memset(&v326[2], 0, 48);
    *(_QWORD *)&v326[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000B02;
    *(_DWORD *)(a2 + 16) = 2;
    v283 = *(unsigned __int16 *)(a2 + 1954);
    if ((_DWORD)v283 == 0xFFFF)
    {
      v283 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1954) = v283;
      *(_WORD *)(a2 + 2004) = v283 + 1;
    }
    *(_QWORD *)&v326[1] = (v283 << 48) | 0x19C840;
    v284 = *(unsigned __int16 *)(a2 + 1664);
    if ((_DWORD)v284 == 0xFFFF)
    {
      v285 = *(__int16 *)(a2 + 1998);
      v284 = *(unsigned __int16 *)(a2 + 1998);
      *(_WORD *)(a2 + 1664) = v285;
      *(_WORD *)(a2 + 4 * v285 + 262) = 351;
      *(_WORD *)(a2 + 1998) = v285 + 1;
    }
    *((_QWORD *)&v326[1] + 1) = (v284 << 48) | 0x15480;
LABEL_474:
    v225 = *(unsigned __int16 *)(a2 + 1696);
    if ((_DWORD)v225 == 0xFFFF)
    {
      v286 = *(__int16 *)(a2 + 2000);
      v225 = *(unsigned __int16 *)(a2 + 2000);
      *(_WORD *)(a2 + 1696) = v286;
      *(_WORD *)(a2 + 4 * v286 + 1694) = 1;
      *(_WORD *)(a2 + 2000) = v286 + 1;
    }
    v227 = 1919037440;
    goto LABEL_477;
  }
  if ((v162 & 1) == 0)
    goto LABEL_486;
  v224 = v164 >> 30;
  if (v224 == 3)
  {
    memset((char *)&v326[1] + 8, 0, 56);
    *(_QWORD *)&v326[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
    *(_DWORD *)(a2 + 16) = 1;
    v252 = *(unsigned __int16 *)(a2 + 1962);
    if ((_DWORD)v252 == 0xFFFF)
    {
      v252 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1962) = v252;
      *(_WORD *)(a2 + 2004) = v252 + 1;
    }
    v253 = (v252 << 48) | 0x19C840;
    goto LABEL_420;
  }
  if (v224 != 1)
  {
    memset((char *)&v326[1] + 8, 0, 56);
    *(_QWORD *)&v326[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
    *(_DWORD *)(a2 + 16) = 1;
    v254 = *(unsigned __int16 *)(a2 + 1900);
    if ((_DWORD)v254 == 0xFFFF)
    {
      v254 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1900) = v254;
      *(_WORD *)(a2 + 2004) = v254 + 1;
    }
    v253 = (v254 << 48) | 0x15440;
LABEL_420:
    *(_QWORD *)&v326[1] = v253;
    v255 = *(unsigned __int16 *)(a2 + 1696);
    if ((_DWORD)v255 == 0xFFFF)
    {
      v256 = *(__int16 *)(a2 + 2000);
      v255 = *(unsigned __int16 *)(a2 + 2000);
      *(_WORD *)(a2 + 1696) = v256;
      *(_WORD *)(a2 + 4 * v256 + 1694) = 1;
      *(_WORD *)(a2 + 2000) = v256 + 1;
    }
    v257 = 1919168512;
LABEL_484:
    v287 = v257 | (v255 << 48);
    goto LABEL_485;
  }
  memset((char *)&v326[1] + 8, 0, 56);
  *(_QWORD *)&v326[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
  *(_DWORD *)(a2 + 16) = 1;
  *(_QWORD *)&v326[1] = gleVStateProgram_GetAttrib(a2, 5) << 48;
  v225 = *(unsigned __int16 *)(a2 + 1696);
  if ((_DWORD)v225 == 0xFFFF)
  {
    v226 = *(__int16 *)(a2 + 2000);
    v225 = *(unsigned __int16 *)(a2 + 2000);
    *(_WORD *)(a2 + 1696) = v226;
    *(_WORD *)(a2 + 4 * v226 + 1694) = 1;
    *(_WORD *)(a2 + 2000) = v226 + 1;
  }
  v227 = 1919168512;
LABEL_477:
  v287 = v227 | (v225 << 48);
LABEL_485:
  *((_QWORD *)&v326[0] + 1) = v287;
  result = (unint64_t *)(*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v326);
  v159 = *v3;
  v164 = v3[1];
LABEL_486:
  if ((v159 & 0x4000000000000000) != 0)
  {
    memset((char *)&v326[1] + 8, 0, 56);
    *(_QWORD *)&v326[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
    *(_DWORD *)(a2 + 16) = 1;
    v291 = *(unsigned __int16 *)(a2 + 1900);
    if ((_DWORD)v291 == 0xFFFF)
    {
      v291 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1900) = v291;
      *(_WORD *)(a2 + 2004) = v291 + 1;
    }
    *(_QWORD *)&v326[1] = (v291 << 48) | 0x19C840;
    v292 = *(unsigned __int16 *)(a2 + 1880);
    if ((_DWORD)v292 == 0xFFFF)
    {
      v293 = *(__int16 *)(a2 + 2000);
      v292 = *(unsigned __int16 *)(a2 + 2000);
      *(_WORD *)(a2 + 1880) = v293;
      *(_WORD *)(a2 + 4 * v293 + 1694) = 47;
      *(_WORD *)(a2 + 2000) = v293 + 1;
    }
    *((_QWORD *)&v326[0] + 1) = ((v292 << 48) | 0x72679000) + 0x2000;
    result = (unint64_t *)(*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v326);
    v159 = *v3;
    v164 = v3[1];
  }
  if ((v164 & 0x3F000000) != 0)
  {
    if ((v159 & 0x40) != 0)
    {
      v299 = 0;
      v300 = 1668;
      do
      {
        if (((1 << v299) & *(_DWORD *)((_BYTE *)v325 + 11) & 0x3F) != 0)
        {
          memset(&v326[2], 0, 48);
          *(_QWORD *)&v326[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000A42;
          *(_DWORD *)(a2 + 16) = 2;
          v301 = *(unsigned __int16 *)(a2 + 1900);
          if ((_DWORD)v301 == 0xFFFF)
          {
            v301 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1900) = v301;
            *(_WORD *)(a2 + 2004) = v301 + 1;
          }
          *(_QWORD *)&v326[1] = (v301 << 48) | 0x19C840;
          v302 = *(unsigned __int16 *)(a2 + v300);
          if ((_DWORD)v302 == 0xFFFF)
          {
            v303 = *(__int16 *)(a2 + 1998);
            *(_WORD *)(a2 + v300) = v303;
            v302 = (unsigned __int16)v303;
            *(_WORD *)(a2 + 4 * v303 + 262) = v299 + 352;
            *(_WORD *)(a2 + 1998) = v303 + 1;
          }
          *((_QWORD *)&v326[1] + 1) = ((v302 << 48) | 0x19C840) + 64;
          v304 = (v299 >> 2) + 48;
          v305 = a2 + 4 * v304;
          v306 = *(unsigned __int16 *)(v305 + 1692);
          if ((_DWORD)v306 == 0xFFFF)
          {
            v307 = *(__int16 *)(a2 + 2000);
            v306 = *(unsigned __int16 *)(a2 + 2000);
            *(_WORD *)(v305 + 1692) = v307;
            *(_WORD *)(a2 + 4 * v307 + 1694) = v304;
            *(_WORD *)(a2 + 2000) = v307 + 1;
          }
          *((_QWORD *)&v326[0] + 1) = ((unint64_t)((v299 & 3) == 0) << 18) | (v306 << 48) | ((unint64_t)((v299 & 3) == 1) << 17) | ((unint64_t)((v299 & 3) == 2) << 16) | ((unint64_t)((v299 & 3) == 3) << 15) | 0x72603000;
          result = (unint64_t *)(*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v326);
        }
        ++v299;
        v300 += 4;
      }
      while (v299 != 6);
    }
    else
    {
      v294 = 0;
      v295 = 1;
      do
      {
        v296 = v295;
        if (((*(_DWORD *)((char *)v325 + 11) >> v294) & 1) != 0)
        {
          memset((char *)&v326[1] + 8, 0, 56);
          *(_QWORD *)&v326[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
          *(_DWORD *)(a2 + 16) = 1;
          *(_QWORD *)&v326[1] = (gleVStateProgram_GetAttrib(a2, 58) << 48) | 0x19C800;
          v297 = *(unsigned __int16 *)(a2 + 1884);
          if ((_DWORD)v297 == 0xFFFF)
          {
            v298 = *(__int16 *)(a2 + 2000);
            v297 = *(unsigned __int16 *)(a2 + 2000);
            *(_WORD *)(a2 + 1884) = v298;
            *(_WORD *)(a2 + 4 * v298 + 1694) = 48;
            *(_WORD *)(a2 + 2000) = v298 + 1;
          }
          *((_QWORD *)&v326[0] + 1) = ((v297 << 48) | 0x72679000) + 0x2000;
          result = (unint64_t *)(*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v326);
        }
        v295 = 0;
        v294 = 1;
      }
      while ((v296 & 1) != 0);
    }
  }
  v3 = v325;
  v165 = v325[2];
  v163 = v325[3];
  v159 = *v325;
  v164 = v325[1];
  if ((*v325 & 0x800) != 0)
  {
LABEL_512:
    result = (unint64_t *)gleVStateProgram_LightingStage(v3, a2);
    v165 = v3[2];
    v163 = v3[3];
    v159 = *v3;
    v164 = v3[1];
  }
LABEL_513:
  if ((v159 & 0xFF0000) != 0)
  {
    v308 = BYTE2(v159);
    if (BYTE2(v159))
    {
      v324 = v165 | v163 | HIDWORD(v165) | HIDWORD(v163);
      v309 = 80;
      v310 = 989;
      v311 = 1720;
      memset(v326, 0, sizeof(v326));
      while ((v308 & 1) == 0)
      {
LABEL_533:
        ++v310;
        v311 += 4;
        v309 += 8;
        v318 = v308 > 1;
        v308 >>= 1;
        if (!v318)
        {
          v164 = v325[1];
          goto LABEL_535;
        }
      }
      v312 = v310 + 35;
      v313 = v324 >> (v310 + 35);
      if ((v313 & 0x1010101) != 0)
      {
        if ((v313 & 0x1010101) != 0x1010101)
        {
          memset((char *)&v326[1] + 8, 0, 56);
          *(_QWORD *)&v326[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
          *(_DWORD *)(a2 + 16) = 1;
          *(_QWORD *)&v326[1] = (gleVStateProgram_GetAttrib(a2, (int)v310 - 981) << 48) | 0x19C800;
          v314 = *(unsigned __int16 *)(a2 + 2 * v310);
          if ((_DWORD)v314 == 0xFFFF)
          {
            v314 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 2 * v310) = v314;
            *(_WORD *)(a2 + 2004) = v314 + 1;
          }
          *((_QWORD *)&v326[0] + 1) = ~(v313 << 18) & 0x40000 | (unint64_t)(v314 << 48) | ~(v313 << 9) & 0x20000 | (unint64_t)(~v313 & 0x10000) | ~(v313 >> 9) & 0x8000 | 0x72601000;
          (*(void (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v326);
        }
        if (((1 << v312) & BYTE3(*v325)) == 0)
        {
          result = (unint64_t *)gleVStateProgram_MultMatrix4x4(a2, (int)v310 - 950, v309, (int)v310 - 982, 23, 0, 0, 1, HIBYTE(*v325) & 1);
          goto LABEL_533;
        }
        memset((char *)&v326[1] + 8, 0, 56);
        *(_QWORD *)&v326[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
        *(_DWORD *)(a2 + 16) = 1;
        v315 = *(unsigned __int16 *)(a2 + 2 * v310);
        if ((_DWORD)v315 == 0xFFFF)
        {
          v315 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 2 * v310) = v315;
          *(_WORD *)(a2 + 2004) = v315 + 1;
        }
        *(_QWORD *)&v326[1] = (v315 << 48) | 0x19C840;
        v316 = *(unsigned __int16 *)(a2 + v311);
        if ((_DWORD)v316 != 0xFFFF)
          goto LABEL_527;
      }
      else
      {
        if (((1 << v312) & BYTE3(*v325)) == 0)
        {
          result = (unint64_t *)gleVStateProgram_MultMatrix4x4(a2, (int)v310 - 981, v309, (int)v310 - 982, 23, 1, 0, 1, HIBYTE(*v325) & 1);
          goto LABEL_533;
        }
        memset((char *)&v326[1] + 8, 0, 56);
        *(_QWORD *)&v326[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
        *(_DWORD *)(a2 + 16) = 1;
        *(_QWORD *)&v326[1] = (gleVStateProgram_GetAttrib(a2, (int)v310 - 981) << 48) | 0x19C800;
        v316 = *(unsigned __int16 *)(a2 + v311);
        if ((_DWORD)v316 != 0xFFFF)
          goto LABEL_527;
      }
      v317 = *(__int16 *)(a2 + 2000);
      *(_WORD *)(a2 + v311) = v317;
      v316 = (unsigned __int16)v317;
      *(_WORD *)(a2 + 4 * v317 + 1694) = v310 - 982;
      *(_WORD *)(a2 + 2000) = v317 + 1;
LABEL_527:
      *((_QWORD *)&v326[0] + 1) = ((v316 << 48) | 0x72679000) + 0x2000;
      result = (unint64_t *)(*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v326);
      goto LABEL_533;
    }
  }
LABEL_535:
  if ((v164 & 0xFFFFFFFF00000000) != 0)
  {
    v319 = HIDWORD(v164);
    if (HIDWORD(v164))
    {
      v320 = 0;
      v321 = 1752;
      do
      {
        if ((v319 & 1) != 0)
        {
          memset((char *)&v326[1] + 8, 0, 56);
          *(_QWORD *)&v326[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
          *(_DWORD *)(a2 + 16) = 1;
          *(_QWORD *)&v326[1] = (gleVStateProgram_GetAttrib(a2, v320 + 16) << 48) | 0x19C800;
          v322 = *(unsigned __int16 *)(a2 + v321);
          if ((_DWORD)v322 == 0xFFFF)
          {
            v323 = *(__int16 *)(a2 + 2000);
            v322 = *(unsigned __int16 *)(a2 + 2000);
            *(_WORD *)(a2 + v321) = v323;
            *(_WORD *)(a2 + 4 * v323 + 1694) = v320 + 15;
            *(_WORD *)(a2 + 2000) = v323 + 1;
          }
          *((_QWORD *)&v326[0] + 1) = ((v322 << 48) | 0x72679000) + 0x2000;
          result = (unint64_t *)(*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 2016))(a2, v326);
        }
        ++v320;
        v321 += 4;
        v318 = v319 > 1;
        LODWORD(v319) = v319 >> 1;
      }
      while (v318);
    }
  }
  return result;
}

void gleVStateProgram_AddAttribs(uint64_t a1)
{
  uint64_t v2;
  _DWORD *v3;
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _DWORD *v10;
  unsigned int v11;
  __int128 v12;

  v2 = *(_QWORD *)(a1 + 2024);
  if (v2)
  {
    v3 = (_DWORD *)(v2 + *(int *)(v2 + 8));
    bzero(v3, (8 * *(__int16 *)(a1 + 1996) + 8));
    v4 = *(_WORD *)(a1 + 1996);
    *v3 = v4;
  }
  else
  {
    v3 = 0;
    v4 = *(_WORD *)(a1 + 1996);
  }
  if (v4 >= 1)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      v7 = *(__int16 *)(a1 + 2 * v5 + 22);
      v12 = xmmword_22A97B880;
      DWORD2(v12) = v6;
      switch((int)v7)
      {
        case 1:
          v8 = 0x1000070C0;
          goto LABEL_13;
        case 2:
          v8 = 0x2000070C0;
          goto LABEL_13;
        case 3:
          v8 = 0x3000070C0;
          goto LABEL_13;
        case 4:
          v8 = 0x44000070C0;
          goto LABEL_13;
        case 5:
          v8 = 0x5000070C0;
          goto LABEL_13;
        case 6:
          v8 = 0x6000070C0;
          goto LABEL_13;
        case 7:
          v8 = 0x7000070C0;
          goto LABEL_13;
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
          goto LABEL_12;
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
          v8 = ((unint64_t)(((_BYTE)v7 + 48) & 0x3F) << 32) | 0x100000070C0;
          goto LABEL_13;
        case 48:
        case 49:
          v9 = v7 + 54;
          goto LABEL_11;
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
          v9 = v7 + 46;
          goto LABEL_11;
        case 56:
        case 57:
          v9 = v7 + 48;
LABEL_11:
          v7 = v9 & 0x3F;
LABEL_12:
          v8 = (v7 << 32) | 0x70C0;
          goto LABEL_13;
        case 58:
        case 59:
          v8 = ((unint64_t)(((_BYTE)v7 + 6) & 0x1F) << 32) | 0x38C0;
LABEL_13:
          *(_QWORD *)&v12 = v8;
          break;
        default:
          v8 = 28864;
          break;
      }
      if (*(_QWORD *)a1)
      {
        PPStreamAddAttribBinding(*(_QWORD *)a1, &v12);
      }
      else
      {
        v10 = &v3[v5];
        v10[2] = v10[2] & 0xFFFFC000 | v8 & 0x3F | (v8 >> 2) & 0x3F00 | 0xC0;
        v11 = (v8 >> 10) & 0x1F;
        if (v11 == 14)
        {
          v10[3] = BYTE4(v8) & 0x1F | (32 * (v10[3] >> 5));
        }
        else if (v11 == 28)
        {
          v3[v5 + 3] = v3[v5 + 3] & 0xFFFFFE00 | HIDWORD(v8);
        }
      }
      ++v6;
      v5 += 2;
    }
    while (v6 < *(__int16 *)(a1 + 1996));
  }
}

char *gleVStateProgram_AddParams(char *result)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  __int16 v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v1 = result;
  v22 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)result + 253);
  if (v2)
  {
    v3 = v2 + *(int *)(v2 + 4);
    v4 = *((__int16 *)result + 999);
    v5 = *((_WORD *)result + 999);
    *(_QWORD *)v3 = v4;
    *(_DWORD *)(v3 + 8) = v4;
  }
  else
  {
    v3 = 0;
    v5 = *((_WORD *)result + 999);
  }
  if (v5 >= 1)
  {
    LODWORD(v6) = 0;
    do
    {
      v7 = *(__int16 *)&v1[4 * (int)v6 + 262];
      v20 = xmmword_22A97B890;
      DWORD2(v20) = v6;
      if (v7 - 144 > 0x10)
      {
        switch(v7)
        {
          case 0u:
          case 1u:
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 6u:
          case 7u:
            v13 = ((unint64_t)(v7 & 3) << 42) | ((unint64_t)((v7 >> 2) ^ 1) << 40);
            v14 = 0x100000000FC0;
            goto LABEL_34;
          case 8u:
          case 9u:
          case 0xAu:
          case 0xBu:
          case 0xCu:
          case 0xDu:
          case 0xEu:
          case 0xFu:
            v16 = ((unint64_t)(v7 & 3) << 42) | ((unint64_t)(((v7 >> 2) & 1) == 0) << 40) | 0xFC0;
            goto LABEL_51;
          case 0x10u:
          case 0x11u:
          case 0x12u:
          case 0x13u:
          case 0x14u:
          case 0x15u:
          case 0x16u:
          case 0x17u:
          case 0x18u:
          case 0x19u:
          case 0x1Au:
          case 0x1Bu:
          case 0x1Cu:
          case 0x1Du:
          case 0x1Eu:
          case 0x1Fu:
          case 0x20u:
          case 0x21u:
          case 0x22u:
          case 0x23u:
          case 0x24u:
          case 0x25u:
          case 0x26u:
          case 0x27u:
          case 0x28u:
          case 0x29u:
          case 0x2Au:
          case 0x2Bu:
          case 0x2Cu:
          case 0x2Du:
          case 0x2Eu:
          case 0x2Fu:
            v13 = ((unint64_t)(v7 & 3) << 42) | ((unint64_t)(((v7 >> 2) & 1) == 0) << 40) | ((unint64_t)((v7 + 2032) >> 3) << 32);
            v14 = 0x300000000FC0;
            goto LABEL_34;
          case 0x30u:
          case 0x31u:
          case 0x32u:
          case 0x33u:
          case 0x34u:
          case 0x35u:
          case 0x36u:
          case 0x37u:
          case 0x38u:
          case 0x39u:
          case 0x3Au:
          case 0x3Bu:
          case 0x3Cu:
          case 0x3Du:
          case 0x3Eu:
          case 0x3Fu:
          case 0x40u:
          case 0x41u:
          case 0x42u:
          case 0x43u:
          case 0x44u:
          case 0x45u:
          case 0x46u:
          case 0x47u:
          case 0x48u:
          case 0x49u:
          case 0x4Au:
          case 0x4Bu:
          case 0x4Cu:
          case 0x4Du:
          case 0x4Eu:
          case 0x4Fu:
            v15 = 0x300000000C0;
            if ((v7 & 4) == 0)
              v15 = 0x200000000C0;
            v13 = v15 | ((unint64_t)(v7 & 3) << 42) | ((unint64_t)((v7 + 2000) >> 3) << 32);
            v14 = 0x300000000F00;
            goto LABEL_34;
          case 0x50u:
          case 0x51u:
          case 0x52u:
          case 0x53u:
          case 0x54u:
          case 0x55u:
          case 0x56u:
          case 0x57u:
          case 0x58u:
          case 0x59u:
          case 0x5Au:
          case 0x5Bu:
          case 0x5Cu:
          case 0x5Du:
          case 0x5Eu:
          case 0x5Fu:
          case 0x60u:
          case 0x61u:
          case 0x62u:
          case 0x63u:
          case 0x64u:
          case 0x65u:
          case 0x66u:
          case 0x67u:
          case 0x68u:
          case 0x69u:
          case 0x6Au:
          case 0x6Bu:
          case 0x6Cu:
          case 0x6Du:
          case 0x6Eu:
          case 0x6Fu:
          case 0x70u:
          case 0x71u:
          case 0x72u:
          case 0x73u:
          case 0x74u:
          case 0x75u:
          case 0x76u:
          case 0x77u:
          case 0x78u:
          case 0x79u:
          case 0x7Au:
          case 0x7Bu:
          case 0x7Cu:
          case 0x7Du:
          case 0x7Eu:
          case 0x7Fu:
          case 0x80u:
          case 0x81u:
          case 0x82u:
          case 0x83u:
          case 0x84u:
          case 0x85u:
          case 0x86u:
          case 0x87u:
          case 0x88u:
          case 0x89u:
          case 0x8Au:
          case 0x8Bu:
          case 0x8Cu:
          case 0x8Du:
          case 0x8Eu:
          case 0x8Fu:
            v13 = ((unint64_t)(v7 & 3) << 42) | ((unint64_t)(((v7 >> 2) & 1) == 0) << 40) | ((unint64_t)((v7 + 1968) >> 3) << 32);
            v14 = 0x400000000FC0;
            goto LABEL_34;
          case 0xA0u:
          case 0xA1u:
          case 0xA2u:
          case 0xA3u:
          case 0xA4u:
          case 0xA5u:
          case 0xA6u:
          case 0xA7u:
          case 0xA8u:
          case 0xA9u:
          case 0xAAu:
          case 0xABu:
          case 0xACu:
          case 0xADu:
          case 0xAEu:
          case 0xAFu:
          case 0xB0u:
          case 0xB1u:
          case 0xB2u:
          case 0xB3u:
          case 0xB4u:
          case 0xB5u:
          case 0xB6u:
          case 0xB7u:
          case 0xB8u:
          case 0xB9u:
          case 0xBAu:
          case 0xBBu:
          case 0xBCu:
          case 0xBDu:
          case 0xBEu:
          case 0xBFu:
            v13 = ((unint64_t)(v7 & 3) << 39) | ((unint64_t)(((v7 + 352) >> 2) & 0x7F) << 32);
            v14 = 5568;
            goto LABEL_34;
          case 0xC0u:
          case 0xC1u:
          case 0xC2u:
          case 0xC3u:
          case 0xC4u:
          case 0xC5u:
          case 0xC6u:
          case 0xC7u:
          case 0xC8u:
          case 0xC9u:
          case 0xCAu:
          case 0xCBu:
          case 0xCCu:
          case 0xCDu:
          case 0xCEu:
          case 0xCFu:
          case 0xD0u:
          case 0xD1u:
          case 0xD2u:
          case 0xD3u:
          case 0xD4u:
          case 0xD5u:
          case 0xD6u:
          case 0xD7u:
          case 0xD8u:
          case 0xD9u:
          case 0xDAu:
          case 0xDBu:
          case 0xDCu:
          case 0xDDu:
          case 0xDEu:
          case 0xDFu:
            v13 = ((unint64_t)(v7 & 3) << 39) | ((unint64_t)(((v7 + 320) >> 2) & 0x7F) << 32);
            v14 = 5312;
            goto LABEL_34;
          case 0xE0u:
          case 0xE1u:
          case 0xE2u:
          case 0xE3u:
          case 0xE4u:
          case 0xE5u:
          case 0xE6u:
          case 0xE7u:
          case 0xE8u:
          case 0xE9u:
          case 0xEAu:
          case 0xEBu:
          case 0xECu:
          case 0xEDu:
          case 0xEEu:
          case 0xEFu:
            v13 = ((unint64_t)(v7 & 1) << 40) | ((unint64_t)((v7 + 288) >> 1) << 32);
            v14 = 4544;
            goto LABEL_34;
          case 0xF0u:
          case 0xF1u:
          case 0xF2u:
          case 0xF3u:
          case 0xF4u:
          case 0xF5u:
          case 0xF6u:
          case 0xF7u:
          case 0xF8u:
          case 0xF9u:
          case 0xFAu:
          case 0xFBu:
          case 0xFCu:
          case 0xFDu:
          case 0xFEu:
          case 0xFFu:
            v13 = ((unint64_t)(v7 & 1) << 40) | ((unint64_t)((v7 + 272) >> 1) << 32);
            v14 = 0x200000011C0;
            goto LABEL_34;
          case 0x100u:
          case 0x101u:
          case 0x102u:
          case 0x103u:
          case 0x104u:
          case 0x105u:
          case 0x106u:
          case 0x107u:
          case 0x108u:
          case 0x109u:
          case 0x10Au:
          case 0x10Bu:
          case 0x10Cu:
          case 0x10Du:
          case 0x10Eu:
          case 0x10Fu:
            v13 = ((unint64_t)(v7 & 1) << 40) | ((unint64_t)((v7 + 256) >> 1) << 32);
            v14 = 0x400000011C0;
LABEL_34:
            v16 = v13 | v14;
            goto LABEL_51;
          case 0x110u:
          case 0x111u:
          case 0x112u:
          case 0x113u:
          case 0x114u:
          case 0x115u:
          case 0x116u:
          case 0x117u:
            v17 = (v7 - 16);
            v18 = 4288;
            goto LABEL_50;
          case 0x118u:
          case 0x119u:
          case 0x11Au:
          case 0x11Bu:
          case 0x11Cu:
          case 0x11Du:
          case 0x11Eu:
          case 0x11Fu:
            v17 = (v7 - 24);
            v18 = 0x100000010C0;
            goto LABEL_50;
          case 0x120u:
          case 0x121u:
          case 0x122u:
          case 0x123u:
          case 0x124u:
          case 0x125u:
          case 0x126u:
          case 0x127u:
            v17 = (v7 - 32);
            v18 = 0x200000010C0;
            goto LABEL_50;
          case 0x128u:
          case 0x129u:
          case 0x12Au:
          case 0x12Bu:
          case 0x12Cu:
          case 0x12Du:
          case 0x12Eu:
          case 0x12Fu:
            v17 = (v7 - 40);
            v18 = 0x400000010C0;
            goto LABEL_50;
          case 0x130u:
          case 0x131u:
          case 0x132u:
          case 0x133u:
          case 0x134u:
          case 0x135u:
          case 0x136u:
          case 0x137u:
            v17 = (v7 - 48);
            v18 = 0x600000010C0;
            goto LABEL_50;
          case 0x138u:
          case 0x139u:
          case 0x13Au:
          case 0x13Bu:
          case 0x13Cu:
          case 0x13Du:
          case 0x13Eu:
          case 0x13Fu:
            v17 = (v7 - 56);
            v18 = 0x500000010C0;
            goto LABEL_50;
          case 0x140u:
          case 0x141u:
          case 0x142u:
          case 0x143u:
          case 0x144u:
          case 0x145u:
          case 0x146u:
          case 0x147u:
            v17 = (v7 - 64);
            v18 = 0x700000010C0;
            goto LABEL_50;
          case 0x148u:
          case 0x149u:
          case 0x14Au:
          case 0x14Bu:
          case 0x14Cu:
          case 0x14Du:
          case 0x14Eu:
          case 0x14Fu:
            v17 = (v7 - 72);
            v18 = 0x800000010C0;
            goto LABEL_50;
          case 0x150u:
          case 0x151u:
            v17 = v7 & 1;
            v18 = 0x6000012C0;
            goto LABEL_50;
          case 0x152u:
          case 0x153u:
            v17 = v7 & 1;
            v18 = 4800;
            goto LABEL_50;
          case 0x154u:
          case 0x155u:
            v17 = v7 & 1;
            v18 = 0x2000012C0;
            goto LABEL_50;
          case 0x156u:
          case 0x157u:
            v17 = v7 & 1;
            v18 = 0x8000012C0;
            goto LABEL_50;
          case 0x158u:
          case 0x159u:
            v17 = v7 & 1;
            v18 = 0xA000012C0;
            goto LABEL_50;
          case 0x15Au:
            v16 = 5056;
            goto LABEL_51;
          case 0x15Bu:
            v16 = 7616;
            goto LABEL_51;
          case 0x15Cu:
            v16 = 7360;
            goto LABEL_51;
          case 0x15Du:
            v16 = 6848;
            goto LABEL_51;
          case 0x15Eu:
            v16 = 7104;
            goto LABEL_51;
          case 0x15Fu:
            result = *(char **)v1;
            if (!*(_QWORD *)v1)
              goto LABEL_54;
            v21 = xmmword_22A98A330;
            v19 = *((_QWORD *)result + 16);
            PPStreamAddConstant((uint64_t)result, &v21);
            v16 = v20 & 0xFFFF0000FFFFE0FFLL | ((unint64_t)(unsigned __int16)(*(_DWORD *)(v19 + 16) - 1) << 32) | 0x600;
            goto LABEL_51;
          case 0x160u:
          case 0x161u:
          case 0x162u:
          case 0x163u:
          case 0x164u:
          case 0x165u:
            v17 = (v7 - 96);
            v18 = 6336;
LABEL_50:
            v16 = v18 | (v17 << 32);
LABEL_51:
            *(_QWORD *)&v20 = v16;
            break;
          default:
            break;
        }
        result = *(char **)v1;
        if (*(_QWORD *)v1)
          result = PPStreamAddParamBinding((uint64_t)result, &v20);
LABEL_54:
        if (v3)
          *(_QWORD *)(v3 + 8 * (int)v6 + 16) = v20;
      }
      else
      {
        v8 = 0;
        v9 = 0;
        v10 = 0x30000000000;
        if (v7 < 0x98)
          v10 = 0;
        v11 = 0x20000000000;
        if (v7 < 0x98)
          v11 = 0x10000000000;
        if ((v7 & 4) == 0)
          v10 = v11;
        *(_QWORD *)&v21 = 0;
        *(_QWORD *)&v20 = v10 | ((unint64_t)(v7 & 3) << 42) | 0x600000000FC0;
        do
        {
          DWORD2(v20) = v6 + v9;
          *(_QWORD *)&v20 = v20 & 0xFFFFFF00FFFFFFFFLL | v8;
          if (*(_QWORD *)v1)
            PPStreamAddParamBinding(*(_QWORD *)v1, &v20);
          if (v3)
            *(_QWORD *)(v3 + 16 + 8 * (int)v6 + 8 * v9) = v20;
          ++v9;
          v8 += 0x100000000;
        }
        while (v9 != 11);
        result = *(char **)v1;
        if (*(_QWORD *)v1)
        {
          v12 = ((_DWORD)v6 << 16);
          v6 = (v6 + 10);
          *(_QWORD *)&v21 = v12 | (v6 << 48);
          result = PPStreamAddParamBindingArray((uint64_t)result, &v21);
        }
        else
        {
          LODWORD(v6) = v6 + 10;
        }
      }
      LODWORD(v6) = v6 + 1;
    }
    while ((int)v6 < *((__int16 *)v1 + 999));
  }
  return result;
}

uint64_t *gleVStateProgram_AllocateOutputs(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __int16 v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __int16 v8;
  unint64_t v9;
  unsigned int v10;
  __int16 v11;
  _WORD *v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  _WORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int16 v20;

  v2 = *result;
  if ((*result & 0x1800) == 0
    || (v3 = *(__int16 *)(a2 + 2000),
        *(_WORD *)(a2 + 1704) = v3,
        *(_WORD *)(a2 + 4 * v3 + 1694) = 3,
        v4 = v3 + 1,
        *(_WORD *)(a2 + 2000) = v3 + 1,
        v2 = *result,
        (*result & 0x1000000000000) == 0))
  {
    v5 = result[4];
    v6 = result[1];
    if ((v2 & 0x2000) != 0)
      goto LABEL_7;
LABEL_6:
    if ((v2 & 0x8000000000000800) != 0x8000000000000800)
      goto LABEL_11;
    goto LABEL_7;
  }
  *(_WORD *)(a2 + 1708) = v4;
  *(_WORD *)(a2 + 4 * v4 + 1694) = 4;
  *(_WORD *)(a2 + 2000) = v3 + 2;
  v5 = result[4];
  v2 = *result;
  v6 = result[1];
  if ((*result & 0x2000) == 0)
    goto LABEL_6;
LABEL_7:
  v7 = *(__int16 *)(a2 + 2000);
  *(_WORD *)(a2 + 1712) = v7;
  *(_WORD *)(a2 + 4 * v7 + 1694) = 5;
  v8 = v7 + 1;
  *(_WORD *)(a2 + 2000) = v7 + 1;
  v2 = *result;
  if ((*result & 0x1000000000000) != 0)
  {
    *(_WORD *)(a2 + 1716) = v8;
    *(_WORD *)(a2 + 4 * v8 + 1694) = 6;
    *(_WORD *)(a2 + 2000) = v7 + 2;
    v5 = result[4];
    v2 = *result;
  }
  else
  {
    v5 = result[4];
  }
  v6 = result[1];
LABEL_11:
  if ((v5 & 3) != 0)
  {
    v2 = *(__int16 *)(a2 + 2000);
    *(_WORD *)(a2 + 1696) = v2;
    *(_WORD *)(a2 + 4 * v2 + 1694) = 1;
    *(_WORD *)(a2 + 2000) = v2 + 1;
    LODWORD(v2) = *(_DWORD *)result;
    LODWORD(v9) = *((_DWORD *)result + 3);
  }
  else
  {
    v9 = HIDWORD(v6);
  }
  v10 = BYTE2(v2);
  if (v10)
  {
    v11 = 0;
    v12 = (_WORD *)(a2 + 1720);
    do
    {
      if ((v10 & 1) != 0)
      {
        v13 = *(__int16 *)(a2 + 2000);
        *v12 = v13;
        *(_WORD *)(a2 + 4 * v13 + 1694) = v11 + 7;
        *(_WORD *)(a2 + 2000) = v13 + 1;
      }
      ++v11;
      v12 += 2;
      v14 = v10 > 1;
      v10 >>= 1;
    }
    while (v14);
    LODWORD(v9) = *((_DWORD *)result + 3);
  }
  if ((_DWORD)v9)
  {
    v15 = 0;
    v16 = (_WORD *)(a2 + 1752);
    do
    {
      if ((v9 & 1) != 0)
      {
        v17 = *(__int16 *)(a2 + 2000);
        *v16 = v17;
        *(_WORD *)(a2 + 4 * v17 + 1694) = v15 + 15;
        *(_WORD *)(a2 + 2000) = v17 + 1;
      }
      ++v15;
      v16 += 2;
      v14 = v9 > 1;
      LODWORD(v9) = v9 >> 1;
    }
    while (v14);
  }
  if ((*(_BYTE *)(a2 + 2032) & 1) == 0)
  {
    v18 = *(__int16 *)(a2 + 2000);
    v19 = a2 + 1692;
    *(_WORD *)(a2 + 1692) = v18;
    *(_WORD *)(a2 + 1692 + 4 * v18 + 2) = 0;
    *(_WORD *)(a2 + 1892) = v18 + 1;
    *(_WORD *)(a2 + 1692 + 4 * (__int16)(v18 + 1) + 2) = 50;
    *(_WORD *)(a2 + 1700) = v18 + 2;
    *(_WORD *)(a2 + 1692 + 4 * (__int16)(v18 + 2) + 2) = 2;
    v20 = v18 + 3;
    *(_WORD *)(a2 + 2000) = v18 + 3;
    if ((*result & 0x4000000000000000) != 0)
    {
      *(_WORD *)(a2 + 1880) = v20;
      *(_WORD *)(a2 + 4 * v20 + 1694) = 47;
      v20 = v18 + 4;
    }
    *(_WORD *)(a2 + 1884) = v20;
    *(_WORD *)(v19 + 4 * v20 + 2) = 48;
    *(_WORD *)(a2 + 1888) = v20 + 1;
    *(_WORD *)(v19 + 4 * (__int16)(v20 + 1) + 2) = 49;
    *(_WORD *)(a2 + 2000) = v20 + 2;
  }
  return result;
}

uint64_t gleVStateProgram_GetAttrib(uint64_t a1, signed int a2)
{
  uint64_t v2;
  int v3;
  _WORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v2 = a1 + 4 * a2;
  v5 = *(unsigned __int16 *)(v2 + 20);
  v4 = (_WORD *)(v2 + 20);
  v3 = v5;
  if (*(_QWORD *)a1)
  {
    if (v3 == 0xFFFF)
    {
      v6 = *(__int16 *)(a1 + 1996);
      LOWORD(v3) = *(_WORD *)(a1 + 1996);
      *v4 = v6;
      *(_WORD *)(a1 + 4 * v6 + 22) = a2;
      *(_WORD *)(a1 + 1996) = v6 + 1;
    }
    return (__int16)v3;
  }
  else
  {
    if (v3 == 0xFFFF)
    {
      v8 = *(__int16 *)(a1 + 1996);
      LOWORD(v3) = *(_WORD *)(a1 + 1996);
      *v4 = v8;
      *(_WORD *)(a1 + 4 * v8 + 22) = a2;
      *(_WORD *)(a1 + 1996) = v8 + 1;
    }
    v7 = (__int16)v3;
    v9 = *(_DWORD *)(a1 + 2032);
    if (a2 == 5)
    {
      v9 |= 4u;
      *(_DWORD *)(a1 + 2032) = v9;
    }
    if ((v9 & 1) == 0)
    {
      if (a2 < 0x3C && ((0xFFF00000000FFFFuLL >> a2) & 1) != 0)
        return dword_22A98A520[a2];
      else
        return (a2 - 16);
    }
  }
  return v7;
}

uint64_t gleVStateProgram_LightingStage(unint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  int v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  int v55;
  BOOL v56;
  int v57;
  unsigned int v58;
  _WORD *v59;
  unint64_t v60;
  unint64_t v61;
  int v62;
  unsigned int v63;
  unsigned int v64;
  int v65;
  unsigned int v66;
  unsigned int v67;
  char v68;
  unint64_t i;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  __int16 v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int16 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  int v121;
  int v122;
  int v123;
  _WORD *v124;
  uint64_t v125;
  uint64_t v126;
  __int16 v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  __int16 v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  __int16 v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  unint64_t v152;
  char v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  int v159;
  int v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  __int16 v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  unint64_t v169;
  int v170;
  int v171;
  int v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  __int16 v176;
  uint64_t v177;
  unint64_t v178;
  int v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  __int16 v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  int8x16_t v190;
  int8x16_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  int v196;
  uint64_t v197;
  uint64_t v198;
  int8x16_t v199;
  int8x16_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  int8x16_t v206;
  int8x16_t v207;
  char v208;
  unint64_t v209;
  int v210;
  int v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  __int16 v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  char v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  unint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  unint64_t v247;
  unint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  unint64_t v253;
  int v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  unint64_t v262;
  char v263;
  _WORD *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  unint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  unint64_t v277;
  char v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  unint64_t v282;
  uint64_t v283;
  int v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  unint64_t v293;
  uint64_t v294;
  int v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  unint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  unint64_t v305;
  char v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  int v315;
  uint64_t v316;
  int v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  char v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  int v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  int v345;
  unint64_t j;
  int v347;
  int v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  __int16 v352;
  uint64_t v353;
  uint64_t v354;
  unint64_t k;
  int v356;
  int v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  __int16 v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  unint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  unint64_t v378;
  int v379;
  uint64_t v380;
  int v381;
  int v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  __int16 v386;
  int v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  __int16 v391;
  uint64_t v392;
  uint64_t v393;
  unint64_t m;
  int v395;
  int v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  __int16 v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  unint64_t v407;
  int v408;
  uint64_t v409;
  int v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  __int16 v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  unint64_t n;
  int v419;
  int v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  __int16 v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  unint64_t v431;
  int v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  int v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  __int16 v440;
  uint64_t v441;
  uint64_t v442;
  unint64_t v443;
  int v444;
  int v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  __int16 v449;
  uint64_t v450;
  uint64_t v451;
  unint64_t v452;
  int v453;
  int v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  __int16 v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  unint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  unint64_t v475;
  int v476;
  uint64_t v477;
  int v478;
  int v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  __int16 v483;
  int v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  __int16 v488;
  uint64_t v489;
  uint64_t v490;
  unint64_t v491;
  int v492;
  int v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  __int16 v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  unint64_t v504;
  int v505;
  uint64_t v506;
  int v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  __int16 v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  unint64_t v515;
  int v516;
  int v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  __int16 v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  unint64_t v528;
  int v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  int v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  __int16 v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  unint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  unint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  unint64_t v555;
  int v556;
  uint64_t v557;
  int v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  __int16 v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  unint64_t v570;
  int v571;
  uint64_t v572;
  int v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  __int16 v577;
  uint64_t v578;
  uint64_t v579;
  unint64_t jj;
  int v581;
  int v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  __int16 v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  unint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  unint64_t ii;
  int v600;
  int v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  __int16 v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  unint64_t v616;
  _BOOL4 v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  unint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  int v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  unint64_t v634;
  int v635;
  uint64_t v636;
  int v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  __int16 v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  unint64_t v649;
  int v650;
  uint64_t v651;
  int v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  __int16 v656;
  uint64_t v657;
  uint64_t v658;
  unint64_t v659;
  int v660;
  int v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  __int16 v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  unint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  unint64_t v678;
  int v679;
  int v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  __int16 v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  unint64_t v695;
  unsigned int v696;
  unint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  int v703;
  uint64_t v704;
  uint64_t v705;
  _WORD *v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  int v715;
  uint64_t v716;
  _WORD *v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  int v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  unint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  int v736;
  unint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  int v743;
  uint64_t v744;
  uint64_t v745;
  _WORD *v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  int v755;
  uint64_t v756;
  _WORD *v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  int v764;
  uint64_t v765;
  int v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  int v770;
  uint64_t v771;
  uint64_t v772;
  int v773;
  unsigned __int16 *v774;
  _WORD *v775;
  unint64_t v776;
  int v777;
  int v778;
  BOOL v779;
  int v780;
  uint64_t v781;
  uint64_t v782;
  __int16 v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  int v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  __int16 v794;
  uint64_t v795;
  uint64_t v796;
  __int16 v797;
  uint64_t v798;
  uint64_t v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t v802;
  __int16 v803;
  char v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  __int16 v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  __int16 v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  __int16 v825;
  char v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  __int16 v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  __int16 v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  int v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  int v860;
  uint64_t v861;
  uint64_t v862;
  unint64_t v863;
  uint64_t v864;
  int v865;
  int v866;
  uint64_t v867;
  int v868;
  uint64_t v869;
  uint64_t v870;
  __int16 v871;
  uint64_t v872;
  unint64_t v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  unint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  char v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  int v901;
  uint64_t v902;
  uint64_t v903;
  uint64_t v904;
  char v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  uint64_t v910;
  uint64_t v911;
  uint64_t v912;
  uint64_t v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t v916;
  int v917;
  uint64_t v918;
  __int16 v919;
  uint64_t v920;
  uint64_t v921;
  uint64_t v922;
  __int16 v923;
  uint64_t v924;
  uint64_t v925;
  uint64_t v926;
  uint64_t v927;
  uint64_t v928;
  _WORD *v929;
  uint64_t v930;
  uint64_t v931;
  __int16 v932;
  uint64_t v933;
  int v934;
  uint64_t v935;
  __int16 v936;
  uint64_t v937;
  uint64_t v938;
  __int16 v939;
  uint64_t v940;
  uint64_t v941;
  uint64_t v942;
  uint64_t v943;
  __int16 v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  int v948;
  uint64_t v949;
  uint64_t v950;
  __int16 v951;
  uint64_t v952;
  uint64_t v953;
  uint64_t v954;
  __int16 v955;
  uint64_t v956;
  uint64_t v957;
  uint64_t v958;
  uint64_t v959;
  uint64_t v960;
  _WORD *v961;
  uint64_t v962;
  uint64_t v963;
  __int16 v964;
  uint64_t v965;
  int v966;
  uint64_t v967;
  __int16 v968;
  uint64_t v969;
  uint64_t v970;
  __int16 v971;
  uint64_t v972;
  uint64_t v973;
  uint64_t v974;
  __int16 v975;
  uint64_t v976;
  uint64_t v977;
  __int16 v978;
  uint64_t v979;
  uint64_t v980;
  uint64_t v981;
  uint64_t v982;
  __int16 v983;
  uint64_t v984;
  uint64_t v985;
  uint64_t v986;
  int v987;
  uint64_t v988;
  uint64_t v989;
  uint64_t v990;
  __int16 v991;
  uint64_t v992;
  uint64_t v993;
  uint64_t v994;
  uint64_t v995;
  __int16 v996;
  uint64_t v997;
  uint64_t v998;
  uint64_t v999;
  __int16 v1000;
  uint64_t v1001;
  uint64_t v1002;
  uint64_t v1003;
  uint64_t v1004;
  uint64_t v1005;
  uint64_t v1006;
  uint64_t v1007;
  __int16 v1008;
  uint64_t v1009;
  uint64_t v1010;
  uint64_t v1011;
  int v1012;
  int v1013;
  int v1014;
  uint64_t v1015;
  uint64_t v1016;
  uint64_t v1017;
  __int16 v1018;
  uint64_t v1019;
  uint64_t v1020;
  uint64_t v1021;
  uint64_t v1022;
  __int16 v1023;
  uint64_t v1024;
  uint64_t v1025;
  uint64_t v1026;
  __int16 v1027;
  uint64_t v1028;
  uint64_t v1029;
  uint64_t v1030;
  uint64_t v1031;
  uint64_t v1032;
  uint64_t v1033;
  uint64_t v1034;
  __int16 v1035;
  uint64_t v1036;
  uint64_t v1037;
  uint64_t v1038;
  int v1039;
  uint64_t v1040;
  uint64_t v1041;
  __int16 v1042;
  uint64_t v1043;
  uint64_t v1044;
  uint64_t v1045;
  __int16 v1046;
  int v1047;
  uint64_t v1048;
  uint64_t v1049;
  uint64_t v1050;
  uint64_t v1051;
  uint64_t v1052;
  uint64_t v1053;
  uint64_t v1054;
  uint64_t v1055;
  uint64_t v1056;
  int v1057;
  uint64_t v1058;
  uint64_t v1059;
  uint64_t v1060;
  uint64_t v1061;
  uint64_t v1062;
  int v1063;
  uint64_t v1064;
  uint64_t v1065;
  uint64_t v1066;
  uint64_t v1067;
  uint64_t v1068;
  uint64_t v1069;
  uint64_t v1070;
  uint64_t v1071;
  uint64_t v1072;
  uint64_t v1073;
  uint64_t v1074;
  uint64_t v1075;
  uint64_t v1076;
  uint64_t v1077;
  uint64_t v1078;
  int v1079;
  uint64_t v1080;
  uint64_t v1081;
  uint64_t v1082;
  uint64_t v1083;
  uint64_t v1084;
  int v1085;
  uint64_t v1086;
  uint64_t v1087;
  int v1088;
  int v1089;
  uint64_t v1090;
  uint64_t v1091;
  uint64_t v1092;
  uint64_t v1093;
  BOOL v1094;
  int v1095;
  int v1096;
  uint64_t v1097;
  uint64_t v1098;
  uint64_t v1099;
  uint64_t v1100;
  uint64_t v1101;
  uint64_t v1102;
  uint64_t v1103;
  uint64_t v1104;
  uint64_t v1105;
  uint64_t result;
  unint64_t v1107;
  uint64_t v1108;
  uint64_t v1109;
  uint64_t v1110;
  uint64_t v1111;
  uint64_t v1112;
  uint64_t v1113;
  uint64_t v1114;
  uint64_t v1115;
  uint64_t v1116;
  uint64_t v1117;
  uint64_t v1118;
  uint64_t v1119;
  BOOL v1120;
  unint64_t v1121;
  int v1122;
  unsigned int v1123;
  unint64_t v1124;
  unsigned int v1125;
  int v1126;
  _BOOL4 v1127;
  unsigned int v1128;
  int v1129;
  uint64_t v1130;
  unsigned int v1131;
  int v1132;
  unsigned int v1134;
  int v1135;
  uint64_t v1136;
  int v1137;
  _WORD *v1138;
  BOOL v1139;
  char *v1140;
  uint64_t v1141;
  unint64_t v1142;
  _WORD *v1143;
  uint64_t v1144;
  _OWORD v1145[6];
  uint64_t v1146;

  v1146 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = (*a1 >> 52) & 0xF;
  v1124 = v4 & ((uint64_t)(*a1 << 13) >> 63);
  if (*a1 & 0x2000000000000 | *((unsigned __int8 *)a1 + 8))
  {
    memset((char *)v1145 + 8, 0, 64);
    v5 = 8 * (*(_DWORD *)(a2 + 16) & 7);
    *(_DWORD *)(a2 + 16) = 1;
    v1144 = v5 | 0x100080381;
    v6 = *(unsigned __int16 *)(a2 + 1900);
    if (v6 == 0xFFFF)
    {
      v8 = *(unsigned __int16 *)(a2 + 2004);
      v9 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1900) = v8;
      *(_WORD *)(a2 + 2004) = ++v9;
      *((_QWORD *)&v1145[0] + 1) = ((unint64_t)(unsigned __int16)v8 << 48) | 0x1FE40;
      if ((v9 & 0x10000) != 0)
      {
        v8 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1900) = v8;
        *(_WORD *)(a2 + 2004) = v8 + 1;
      }
      v7 = v8 << 48;
    }
    else
    {
      v7 = v6 << 48;
      *((_QWORD *)&v1145[0] + 1) = ((unint64_t)(unsigned __int16)v6 << 48) | 0x1FE40;
    }
    *(_QWORD *)&v1145[0] = v7 | 0x72609000;
    (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
  }
  v10 = v3 << 12;
  if ((v1124 & 1) != 0)
  {
    memset(v1145, 0, 72);
    v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
    *(_DWORD *)(a2 + 16) = 3;
    v14 = *(unsigned __int16 *)(a2 + 1644);
    if ((_DWORD)v14 == 0xFFFF)
    {
      v15 = *(__int16 *)(a2 + 1998);
      v14 = *(unsigned __int16 *)(a2 + 1998);
      *(_WORD *)(a2 + 1644) = v15;
      *(_WORD *)(a2 + 4 * v15 + 262) = 346;
      *(_WORD *)(a2 + 1998) = v15 + 1;
    }
    *((_QWORD *)&v1145[0] + 1) = ((v14 << 48) | 0x19C840) + 64;
    v16 = *(unsigned __int16 *)(a2 + 1612);
    if ((_DWORD)v16 == 0xFFFF)
    {
      v17 = *(__int16 *)(a2 + 1998);
      v16 = *(unsigned __int16 *)(a2 + 1998);
      *(_WORD *)(a2 + 1612) = v17;
      *(_WORD *)(a2 + 4 * v17 + 262) = 338;
      *(_WORD *)(a2 + 1998) = v17 + 1;
    }
    *(_QWORD *)&v1145[1] = ((v16 << 48) | 0x19C840) + 64;
    *((_QWORD *)&v1145[1] + 1) = (gleVStateProgram_GetAttrib(a2, 2) << 48) | 0x19C800;
    v13 = *(unsigned __int16 *)(a2 + 1904);
LABEL_18:
    if ((_DWORD)v13 != 0xFFFF)
      goto LABEL_20;
    goto LABEL_19;
  }
  if ((v1124 & 2) == 0)
  {
    memset(&v1145[1], 0, 56);
    v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
    *(_DWORD *)(a2 + 16) = 1;
    v11 = *(unsigned __int16 *)(a2 + 1636);
    if ((_DWORD)v11 == 0xFFFF)
    {
      v12 = *(__int16 *)(a2 + 1998);
      v11 = *(unsigned __int16 *)(a2 + 1998);
      *(_WORD *)(a2 + 1636) = v12;
      *(_WORD *)(a2 + 4 * v12 + 262) = 344;
      *(_WORD *)(a2 + 1998) = v12 + 1;
    }
    *((_QWORD *)&v1145[0] + 1) = ((v11 << 48) | 0x19C840) + 64;
    v13 = *(unsigned __int16 *)(a2 + 1904);
    goto LABEL_18;
  }
  memset(v1145, 0, 72);
  v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
  *(_DWORD *)(a2 + 16) = 3;
  v21 = *(unsigned __int16 *)(a2 + 1644);
  if ((_DWORD)v21 == 0xFFFF)
  {
    v22 = *(__int16 *)(a2 + 1998);
    v21 = *(unsigned __int16 *)(a2 + 1998);
    *(_WORD *)(a2 + 1644) = v22;
    *(_WORD *)(a2 + 4 * v22 + 262) = 346;
    *(_WORD *)(a2 + 1998) = v22 + 1;
  }
  *((_QWORD *)&v1145[0] + 1) = ((v21 << 48) | 0x19C840) + 64;
  *(_QWORD *)&v1145[1] = (gleVStateProgram_GetAttrib(a2, 2) << 48) | 0x19C800;
  v23 = *(unsigned __int16 *)(a2 + 1604);
  if ((_DWORD)v23 == 0xFFFF)
  {
    v24 = *(__int16 *)(a2 + 1998);
    v23 = *(unsigned __int16 *)(a2 + 1998);
    *(_WORD *)(a2 + 1604) = v24;
    *(_WORD *)(a2 + 4 * v24 + 262) = 336;
    *(_WORD *)(a2 + 1998) = v24 + 1;
  }
  *((_QWORD *)&v1145[1] + 1) = ((v23 << 48) | 0x19C840) + 64;
  v13 = *(unsigned __int16 *)(a2 + 1904);
  if ((_DWORD)v13 == 0xFFFF)
  {
LABEL_19:
    v13 = *(unsigned __int16 *)(a2 + 2004);
    *(_WORD *)(a2 + 1904) = v13;
    *(_WORD *)(a2 + 2004) = v13 + 1;
  }
LABEL_20:
  v1121 = v4 & (v10 >> 63);
  *(_QWORD *)&v1145[0] = (v13 << 48) | 0x72679000;
  (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
  v18 = *a1;
  if (!(*a1 & 0x2000000000000 | a1[1]))
    goto LABEL_36;
  memset((char *)v1145 + 8, 0, 64);
  v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
  *(_DWORD *)(a2 + 16) = 2;
  v19 = *(unsigned __int16 *)(a2 + 1900);
  if (v19 == 0xFFFF)
  {
    v25 = *(unsigned __int16 *)(a2 + 2004);
    v26 = *(unsigned __int16 *)(a2 + 2004);
    *(_WORD *)(a2 + 1900) = v25;
    *(_WORD *)(a2 + 2004) = ++v26;
    *((_QWORD *)&v1145[0] + 1) = ((unint64_t)(unsigned __int16)v25 << 48) | 0x19C840;
    if ((v26 & 0x10000) != 0)
    {
      v27 = *(unsigned __int16 *)(a2 + 2004);
      v28 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1900) = v27;
      *(_WORD *)(a2 + 2004) = ++v28;
      *(_QWORD *)&v1145[1] = (((unint64_t)(unsigned __int16)v27 << 48) | 0x1FE40) + 16;
      if ((v28 & 0x10000) != 0)
      {
        v27 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1900) = v27;
        *(_WORD *)(a2 + 2004) = v27 + 1;
      }
      v20 = v27 << 48;
      goto LABEL_35;
    }
    v20 = v25 << 48;
  }
  else
  {
    v20 = v19 << 48;
    *((_QWORD *)&v1145[0] + 1) = ((unint64_t)(unsigned __int16)v19 << 48) | 0x19C840;
  }
  *(_QWORD *)&v1145[1] = v20 | 0x1FE50;
LABEL_35:
  *(_QWORD *)&v1145[0] = v20 | 0x72679000;
  (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
  v18 = *a1;
LABEL_36:
  if ((v18 & 0x1000000000000) == 0)
    goto LABEL_56;
  if ((v1121 & 1) != 0)
  {
    memset(v1145, 0, 72);
    v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
    *(_DWORD *)(a2 + 16) = 3;
    v32 = *(unsigned __int16 *)(a2 + 1644);
    if ((_DWORD)v32 == 0xFFFF)
    {
      v33 = *(__int16 *)(a2 + 1998);
      v32 = *(unsigned __int16 *)(a2 + 1998);
      *(_WORD *)(a2 + 1644) = v33;
      *(_WORD *)(a2 + 4 * v33 + 262) = 346;
      *(_WORD *)(a2 + 1998) = v33 + 1;
    }
    *((_QWORD *)&v1145[0] + 1) = ((v32 << 48) | 0x19C840) + 64;
    v34 = *(unsigned __int16 *)(a2 + 1616);
    if ((_DWORD)v34 == 0xFFFF)
    {
      v35 = *(__int16 *)(a2 + 1998);
      v34 = *(unsigned __int16 *)(a2 + 1998);
      *(_WORD *)(a2 + 1616) = v35;
      *(_WORD *)(a2 + 4 * v35 + 262) = 339;
      *(_WORD *)(a2 + 1998) = v35 + 1;
    }
    *(_QWORD *)&v1145[1] = ((v34 << 48) | 0x19C840) + 64;
    v36 = (gleVStateProgram_GetAttrib(a2, 2) << 48) | 0x19C800;
  }
  else
  {
    if ((v1121 & 2) == 0)
    {
      memset(&v1145[1], 0, 56);
      v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
      *(_DWORD *)(a2 + 16) = 1;
      v29 = *(unsigned __int16 *)(a2 + 1640);
      if ((_DWORD)v29 == 0xFFFF)
      {
        v30 = *(__int16 *)(a2 + 1998);
        v29 = *(unsigned __int16 *)(a2 + 1998);
        *(_WORD *)(a2 + 1640) = v30;
        *(_WORD *)(a2 + 4 * v30 + 262) = 345;
        *(_WORD *)(a2 + 1998) = v30 + 1;
      }
      *((_QWORD *)&v1145[0] + 1) = ((v29 << 48) | 0x19C840) + 64;
      v31 = *(unsigned __int16 *)(a2 + 1906);
      goto LABEL_53;
    }
    memset(v1145, 0, 72);
    v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
    *(_DWORD *)(a2 + 16) = 3;
    v37 = *(unsigned __int16 *)(a2 + 1644);
    if ((_DWORD)v37 == 0xFFFF)
    {
      v38 = *(__int16 *)(a2 + 1998);
      v37 = *(unsigned __int16 *)(a2 + 1998);
      *(_WORD *)(a2 + 1644) = v38;
      *(_WORD *)(a2 + 4 * v38 + 262) = 346;
      *(_WORD *)(a2 + 1998) = v38 + 1;
    }
    *((_QWORD *)&v1145[0] + 1) = ((v37 << 48) | 0x19C840) + 64;
    *(_QWORD *)&v1145[1] = (gleVStateProgram_GetAttrib(a2, 2) << 48) | 0x19C800;
    v39 = *(unsigned __int16 *)(a2 + 1608);
    if ((_DWORD)v39 == 0xFFFF)
    {
      v40 = *(__int16 *)(a2 + 1998);
      v39 = *(unsigned __int16 *)(a2 + 1998);
      *(_WORD *)(a2 + 1608) = v40;
      *(_WORD *)(a2 + 4 * v40 + 262) = 337;
      *(_WORD *)(a2 + 1998) = v40 + 1;
    }
    v36 = ((v39 << 48) | 0x19C840) + 64;
  }
  *((_QWORD *)&v1145[1] + 1) = v36;
  v31 = *(unsigned __int16 *)(a2 + 1906);
LABEL_53:
  if ((_DWORD)v31 == 0xFFFF)
  {
    v31 = *(unsigned __int16 *)(a2 + 2004);
    *(_WORD *)(a2 + 1906) = v31;
    *(_WORD *)(a2 + 2004) = v31 + 1;
  }
  *(_QWORD *)&v1145[0] = (v31 << 48) | 0x72679000;
  (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
LABEL_56:
  v41 = *a1;
  if ((*a1 & 0x2000000000000) == 0)
    goto LABEL_66;
  memset((char *)v1145 + 8, 0, 64);
  v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000A02;
  *(_DWORD *)(a2 + 16) = 2;
  v42 = *(unsigned __int16 *)(a2 + 1900);
  if (v42 == 0xFFFF)
  {
    v45 = *(unsigned __int16 *)(a2 + 2004);
    v46 = *(unsigned __int16 *)(a2 + 2004);
    *(_WORD *)(a2 + 1900) = v45;
    v47 = v46 + 1;
    *(_WORD *)(a2 + 2004) = v46 + 1;
    v44 = ((unint64_t)(unsigned __int16)v45 << 48) | 0x19C840;
    *((_QWORD *)&v1145[0] + 1) = v44;
    if ((v47 & 0x10000) != 0)
    {
      v48 = *(unsigned __int16 *)(a2 + 2004);
      v49 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1900) = v48;
      *(_WORD *)(a2 + 2004) = ++v49;
      *(_QWORD *)&v1145[1] = ((unint64_t)(unsigned __int16)v48 << 48) | 0x19C840;
      if ((v49 & 0x10000) != 0)
      {
        v48 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1900) = v48;
        *(_WORD *)(a2 + 2004) = v48 + 1;
      }
      v43 = v48 << 48;
      goto LABEL_65;
    }
    v43 = v45 << 48;
  }
  else
  {
    v43 = v42 << 48;
    v44 = ((unint64_t)(unsigned __int16)v42 << 48) | 0x19C840;
    *((_QWORD *)&v1145[0] + 1) = v44;
  }
  *(_QWORD *)&v1145[1] = v44;
LABEL_65:
  *(_QWORD *)&v1145[0] = v43 | 0x72609000;
  (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
  v41 = *a1;
LABEL_66:
  v50 = BYTE4(v41);
  if ((v41 & 0x800000000000000) != 0)
  {
    if (!BYTE4(v41))
      goto LABEL_1660;
    v54 = 0;
    v55 = 0;
    do
    {
      if ((v50 & 1) != 0)
        *((_DWORD *)&v1145[4] + v54++ + 2) = v55;
      ++v55;
      v56 = v50 >= 2;
      v50 >>= 1;
    }
    while (v56);
    if (!v54)
      goto LABEL_1660;
    v57 = 0;
    v58 = 0;
    v59 = (_WORD *)(a2 + 2004);
    v1136 = a2 + 1924;
    v1130 = a2 + 1932;
    v1138 = (_WORD *)(a2 + 2004);
    while (1)
    {
      v1122 = v57;
      v1123 = v54;
      v1140 = (char *)&v1145[4] + 4 * v58 + 8;
      v60 = v54 - v58 >= 4 ? 4 : v54 - v58;
      v1125 = v58;
      v1142 = v60;
      if (!(_DWORD)v60)
        break;
      v61 = 0;
      v62 = 0;
      v63 = 0;
      v64 = 0;
      v65 = *((_DWORD *)a1 + 2);
      v66 = BYTE1(v65);
      v67 = BYTE2(v65);
      do
      {
        v68 = *(_DWORD *)&v1140[4 * v61];
        v64 |= ((*((_DWORD *)a1 + 2) >> v68) & 1) << v61;
        v63 |= ((v66 >> v68) & 1) << v61;
        v62 |= ((v67 >> v68) & 1) << v61++;
      }
      while (v61 < v60);
      v1120 = (~v64 & 0xF) == 0;
      v1131 = ~v64 & 0xF;
      if (v1131)
      {
        for (i = 0; i < v60; ++i)
        {
          if (((v1131 >> i) & 1) != 0)
          {
            v70 = *(_DWORD *)&v1140[4 * i];
            memset(&v1145[1], 0, 56);
            v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
            *(_DWORD *)(a2 + 16) = 1;
            v71 = v70 + 320;
            v72 = a2 + 4 * (v70 + 320);
            v73 = *(unsigned __int16 *)(v72 + 260);
            if ((_DWORD)v73 == 0xFFFF)
            {
              v74 = *(__int16 *)(a2 + 1998);
              v73 = *(unsigned __int16 *)(a2 + 1998);
              *(_WORD *)(v72 + 260) = v74;
              *(_WORD *)(a2 + 4 * v74 + 262) = v71;
              v75 = (v71 & 0xFFFFFFF0) == 144;
              v76 = v74 + 11;
              if (!v75)
                v76 = v74 + 1;
              *(_WORD *)(a2 + 1998) = v76;
            }
            *((_QWORD *)&v1145[0] + 1) = ((v73 << 48) | 0x19C840) + 64;
            v77 = a2 + 2 * i;
            v78 = *(unsigned __int16 *)(v77 + 1924);
            if ((_DWORD)v78 == 0xFFFF)
            {
              v78 = (unsigned __int16)*v1138;
              *(_WORD *)(v77 + 1924) = v78;
              *v1138 = v78 + 1;
            }
            *(_QWORD *)&v1145[0] = (v78 << 48) | 0x72679000;
            (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
            v60 = v1142;
          }
        }
        v59 = (_WORD *)(a2 + 2004);
      }
      else
      {
        v1131 = 0;
      }
      v1128 = v62 & v64;
      v1134 = v62 & v64 | v63;
      if (v64)
      {
        v79 = 0;
        do
        {
          if (((v64 >> v79) & 1) != 0)
          {
            v80 = *(_DWORD *)&v1140[4 * v79];
            memset((char *)&v1145[1] + 8, 0, 48);
            v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x31000007C2;
            *(_DWORD *)(a2 + 16) = 2;
            v81 = v80 + 320;
            v82 = a2 + 4 * (v80 + 320);
            v83 = *(unsigned __int16 *)(v82 + 260);
            if ((_DWORD)v83 == 0xFFFF)
            {
              v84 = *(__int16 *)(a2 + 1998);
              v83 = *(unsigned __int16 *)(a2 + 1998);
              *(_WORD *)(v82 + 260) = v84;
              *(_WORD *)(a2 + 4 * v84 + 262) = v81;
              v75 = (v81 & 0xFFFFFFF0) == 144;
              v85 = v84 + 11;
              if (!v75)
                v85 = v84 + 1;
              *(_WORD *)(a2 + 1998) = v85;
            }
            *((_QWORD *)&v1145[0] + 1) = ((v83 << 48) | 0x19C840) + 64;
            v86 = *(unsigned __int16 *)(a2 + 1900);
            if ((_DWORD)v86 == 0xFFFF)
            {
              v86 = *(unsigned __int16 *)(a2 + 2004);
              *(_WORD *)(a2 + 1900) = v86;
              *(_WORD *)(a2 + 2004) = v86 + 1;
            }
            *(_QWORD *)&v1145[1] = (v86 << 48) | 0x19C840;
            v87 = a2 + 2 * v79;
            v88 = *(unsigned __int16 *)(v87 + 1924);
            if ((_DWORD)v88 == 0xFFFF)
            {
              v88 = (unsigned __int16)*v59;
              *(_WORD *)(v87 + 1924) = v88;
              *v59 = v88 + 1;
            }
            *(_QWORD *)&v1145[0] = (v88 << 48) | 0x72679000;
            (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
            v60 = v1142;
          }
          ++v79;
        }
        while (v79 < v60);
        v89 = 0;
        v90 = 0;
        do
        {
          if (((v64 >> v89) & 1) != 0)
          {
            memset(v1145, 0, 72);
            v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000A02;
            *(_DWORD *)(a2 + 16) = 2;
            v91 = *(unsigned __int16 *)(v1136 + 2 * v89);
            if (v91 == 0xFFFF)
            {
              v92 = (unsigned __int16)*v59;
              *(_WORD *)(v1136 + 2 * v89) = v92;
              *v59 = v92 + 1;
              v91 = *(unsigned __int16 *)(v1136 + 2 * v89);
              *((_QWORD *)&v1145[0] + 1) = (v92 << 48) | 0x19C840;
              if ((_DWORD)v91 == 0xFFFF)
              {
                v91 = (unsigned __int16)*v59;
                *(_WORD *)(v1136 + 2 * v89) = v91;
                *v59 = v91 + 1;
              }
            }
            else
            {
              *((_QWORD *)&v1145[0] + 1) = (v91 << 48) | 0x19C840;
            }
            *(_QWORD *)&v1145[1] = (v91 << 48) | 0x19C840;
            v93 = *(unsigned __int16 *)(a2 + 1946);
            if (v90)
            {
              if ((_DWORD)v93 == 0xFFFF)
              {
                v93 = *(unsigned __int16 *)(a2 + 2004);
                *(_WORD *)(a2 + 1946) = v93;
                *(_WORD *)(a2 + 2004) = v93 + 1;
              }
              v94 = ((unint64_t)(v89 == 1) << 17) | (v93 << 48) | ((unint64_t)(v89 == 2) << 16) | ((unint64_t)(v89 == 3) << 15) | 0x72601000;
            }
            else
            {
              if ((_DWORD)v93 == 0xFFFF)
              {
                v93 = *(unsigned __int16 *)(a2 + 2004);
                *(_WORD *)(a2 + 1946) = v93;
                *(_WORD *)(a2 + 2004) = v93 + 1;
              }
              v94 = (v93 << 48) | 0x72679000;
            }
            *(_QWORD *)&v1145[0] = v94;
            (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
            v90 = 1;
            v60 = v1142;
          }
          ++v89;
        }
        while (v89 < v60);
        v1126 = 0;
      }
      else
      {
        v1126 = 1;
      }
      v58 = v1125;
      if (!v1125)
        goto LABEL_129;
LABEL_136:
      if ((v1126 & 1) == 0)
      {
        memset(&v1145[1], 0, 56);
        v100 = 8 * (*(_DWORD *)(a2 + 16) & 7);
        *(_DWORD *)(a2 + 16) = 1;
        v1144 = v100 | 0x3100080341;
        v101 = *(unsigned __int16 *)(a2 + 1946);
        if ((_DWORD)v101 == 0xFFFF)
        {
          v101 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1946) = v101;
          *(_WORD *)(a2 + 2004) = v101 + 1;
        }
        *((_QWORD *)&v1145[0] + 1) = (v101 << 48) | 0x19C840;
        v102 = *(unsigned __int16 *)(a2 + 1954);
        if ((_DWORD)v102 == 0xFFFF)
        {
          v102 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1954) = v102;
          *(_WORD *)(a2 + 2004) = v102 + 1;
        }
        *(_QWORD *)&v1145[0] = (v102 << 48) | 0x72679000;
        (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
        v60 = v1142;
      }
      if (!v58 && (*a1 & 0x2000000000000) != 0)
      {
        memset((char *)v1145 + 8, 0, 64);
        v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
        *(_DWORD *)(a2 + 16) = 2;
        v103 = *(unsigned __int16 *)(a2 + 1900);
        if (v103 == 0xFFFF)
        {
          v105 = *(unsigned __int16 *)(a2 + 2004);
          v106 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1900) = v105;
          *(_WORD *)(a2 + 2004) = ++v106;
          *((_QWORD *)&v1145[0] + 1) = ((unint64_t)(unsigned __int16)v105 << 48) | 0x19C840;
          if ((v106 & 0x10000) != 0)
          {
            v105 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1900) = v105;
            *(_WORD *)(a2 + 2004) = v105 + 1;
          }
          v104 = v105 << 48;
        }
        else
        {
          v104 = v103 << 48;
          *((_QWORD *)&v1145[0] + 1) = ((unint64_t)(unsigned __int16)v103 << 48) | 0x19C840;
        }
        *(_QWORD *)&v1145[1] = v104 | 0x1FE40;
        v107 = *(unsigned __int16 *)(a2 + 1942);
        if ((_DWORD)v107 == 0xFFFF)
        {
          v107 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1942) = v107;
          *(_WORD *)(a2 + 2004) = v107 + 1;
        }
        *(_QWORD *)&v1145[0] = (v107 << 48) | 0x72679000;
        (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
        v60 = v1142;
      }
      if ((v1126 & 1) == 0)
      {
        if ((_DWORD)v60)
        {
          v108 = 0;
          v109 = 0;
          v110 = 0;
          v111 = 0;
          v112 = 0;
          do
          {
            if (((v64 >> v112) & 1) != 0)
            {
              memset((char *)&v1145[1] + 8, 0, 48);
              v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
              *(_DWORD *)(a2 + 16) = 2;
              v113 = a2 + 2 * v112;
              v114 = *(unsigned __int16 *)(v113 + 1924);
              if ((_DWORD)v114 == 0xFFFF)
              {
                v114 = (unsigned __int16)*v1138;
                *(_WORD *)(v113 + 1924) = v114;
                *v1138 = v114 + 1;
              }
              *((_QWORD *)&v1145[0] + 1) = (v114 << 48) | 0x19C840;
              v115 = *(unsigned __int16 *)(a2 + 1954);
              if ((_DWORD)v115 == 0xFFFF)
              {
                v115 = *(unsigned __int16 *)(a2 + 2004);
                *(_WORD *)(a2 + 1954) = v115;
                *(_WORD *)(a2 + 2004) = v115 + 1;
              }
              *(_QWORD *)&v1145[1] = v108 | (v115 << 48) | v109 | v110 | v111 | 0x40;
              v116 = *(unsigned __int16 *)(v113 + 1924);
              if ((_DWORD)v116 == 0xFFFF)
              {
                v116 = (unsigned __int16)*v1138;
                *(_WORD *)(v113 + 1924) = v116;
                *v1138 = v116 + 1;
              }
              *(_QWORD *)&v1145[0] = (v116 << 48) | 0x72679000;
              (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
              v60 = v1142;
            }
            ++v112;
            v111 += 0x8000;
            v110 += 0x2000;
            v109 += 2048;
            v108 += 512;
          }
          while (v112 < v60);
        }
        v59 = (_WORD *)(a2 + 2004);
        if (v1128)
        {
          memset((char *)&v1145[1] + 8, 0, 48);
          v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
          *(_DWORD *)(a2 + 16) = 2;
          v117 = *(unsigned __int16 *)(a2 + 1946);
          if ((_DWORD)v117 == 0xFFFF)
          {
            v117 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1946) = v117;
            *(_WORD *)(a2 + 2004) = v117 + 1;
          }
          *((_QWORD *)&v1145[0] + 1) = ((unint64_t)(unsigned __int16)v117 << 48) | 0x19C840;
          v118 = *(unsigned __int16 *)(a2 + 1954);
          if ((_DWORD)v118 == 0xFFFF)
          {
            v118 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1954) = v118;
            *(_WORD *)(a2 + 2004) = v118 + 1;
          }
          *(_QWORD *)&v1145[1] = (v118 << 48) | 0x19C840;
          if ((_DWORD)v117 == 0xFFFF)
          {
            v117 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1946) = v117;
            *(_WORD *)(a2 + 2004) = v117 + 1;
          }
          *(_QWORD *)&v1145[0] = (v117 << 48) | 0x72679000;
          (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
          v119 = v1142;
          if ((_DWORD)v1142)
          {
            v120 = 0;
            v121 = 0;
            do
            {
              if (((v1128 >> v120) & 1) != 0)
              {
                v122 = *(_DWORD *)&v1140[4 * v120];
                memset(&v1145[1], 0, 56);
                v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
                *(_DWORD *)(a2 + 16) = 1;
                v123 = v122 + 312;
                v124 = (_WORD *)(a2 + 4 * (v122 + 312) + 260);
                v125 = (unsigned __int16)*v124;
                if ((_DWORD)v125 == 0xFFFF)
                {
                  v126 = *(__int16 *)(a2 + 1998);
                  v125 = *(unsigned __int16 *)(a2 + 1998);
                  *v124 = v126;
                  *(_WORD *)(a2 + 4 * v126 + 262) = v123;
                  if ((v123 & 0xFFFFFFF0) == 0x90)
                    v127 = v126 + 11;
                  else
                    v127 = v126 + 1;
                  *(_WORD *)(a2 + 1998) = v127;
                }
                *((_QWORD *)&v1145[0] + 1) = ((v125 << 48) | 0x15440) + 64;
                v128 = *(unsigned __int16 *)(a2 + 1954);
                if (v121)
                {
                  if ((_DWORD)v128 == 0xFFFF)
                  {
                    v128 = *(unsigned __int16 *)(a2 + 2004);
                    *(_WORD *)(a2 + 1954) = v128;
                    *(_WORD *)(a2 + 2004) = v128 + 1;
                  }
                  v129 = ((unint64_t)(v120 == 1) << 17) | (v128 << 48) | ((unint64_t)(v120 == 2) << 16) | ((unint64_t)(v120 == 3) << 15) | 0x72601000;
                }
                else
                {
                  if ((_DWORD)v128 == 0xFFFF)
                  {
                    v128 = *(unsigned __int16 *)(a2 + 2004);
                    *(_WORD *)(a2 + 1954) = v128;
                    *(_WORD *)(a2 + 2004) = v128 + 1;
                  }
                  v129 = (v128 << 48) | 0x72679000;
                }
                *(_QWORD *)&v1145[0] = v129;
                (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
                memset(&v1145[1], 0, 56);
                v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
                *(_DWORD *)(a2 + 16) = 1;
                v130 = (unsigned __int16)*v124;
                if ((_DWORD)v130 == 0xFFFF)
                {
                  v131 = *(__int16 *)(a2 + 1998);
                  v130 = *(unsigned __int16 *)(a2 + 1998);
                  *v124 = v131;
                  *(_WORD *)(a2 + 4 * v131 + 262) = v123;
                  if ((v123 & 0xFFFFFFF0) == 0x90)
                    v132 = v131 + 11;
                  else
                    v132 = v131 + 1;
                  *(_WORD *)(a2 + 1998) = v132;
                }
                *((_QWORD *)&v1145[0] + 1) = (v130 << 48) | 0xAA80;
                v133 = *(unsigned __int16 *)(a2 + 1962);
                if (v121)
                {
                  if ((_DWORD)v133 == 0xFFFF)
                  {
                    v133 = *(unsigned __int16 *)(a2 + 2004);
                    *(_WORD *)(a2 + 1962) = v133;
                    *(_WORD *)(a2 + 2004) = v133 + 1;
                  }
                  v134 = ((unint64_t)(v120 == 1) << 17) | (v133 << 48) | ((unint64_t)(v120 == 2) << 16) | ((unint64_t)(v120 == 3) << 15) | 0x72601000;
                }
                else
                {
                  if ((_DWORD)v133 == 0xFFFF)
                  {
                    v133 = *(unsigned __int16 *)(a2 + 2004);
                    *(_WORD *)(a2 + 1962) = v133;
                    *(_WORD *)(a2 + 2004) = v133 + 1;
                  }
                  v134 = (v133 << 48) | 0x72679000;
                }
                *(_QWORD *)&v1145[0] = v134;
                (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
                memset(&v1145[1], 0, 56);
                v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
                *(_DWORD *)(a2 + 16) = 1;
                v135 = (unsigned __int16)*v124;
                if ((_DWORD)v135 == 0xFFFF)
                {
                  v136 = *(__int16 *)(a2 + 1998);
                  v135 = *(unsigned __int16 *)(a2 + 1998);
                  *v124 = v136;
                  *(_WORD *)(a2 + 4 * v136 + 262) = v123;
                  if ((v123 & 0xFFFFFFF0) == 0x90)
                    v137 = v136 + 11;
                  else
                    v137 = v136 + 1;
                  *(_WORD *)(a2 + 1998) = v137;
                }
                *((_QWORD *)&v1145[0] + 1) = (v135 << 48) | 0x80;
                v138 = *(unsigned __int16 *)(a2 + 1970);
                if (v121)
                {
                  if ((_DWORD)v138 == 0xFFFF)
                  {
                    v138 = *(unsigned __int16 *)(a2 + 2004);
                    *(_WORD *)(a2 + 1970) = v138;
                    *(_WORD *)(a2 + 2004) = v138 + 1;
                  }
                  v139 = ((unint64_t)(v120 == 1) << 17) | (v138 << 48) | ((unint64_t)(v120 == 2) << 16) | ((unint64_t)(v120 == 3) << 15) | 0x72601000;
                }
                else
                {
                  if ((_DWORD)v138 == 0xFFFF)
                  {
                    v138 = *(unsigned __int16 *)(a2 + 2004);
                    *(_WORD *)(a2 + 1970) = v138;
                    *(_WORD *)(a2 + 2004) = v138 + 1;
                  }
                  v139 = (v138 << 48) | 0x72679000;
                }
                *(_QWORD *)&v1145[0] = v139;
                (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
                v121 = 1;
                v119 = v1142;
              }
              ++v120;
            }
            while (v120 < v119);
          }
          memset(v1145, 0, 72);
          v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
          *(_DWORD *)(a2 + 16) = 3;
          v140 = *(unsigned __int16 *)(a2 + 1946);
          if ((_DWORD)v140 == 0xFFFF)
          {
            v140 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1946) = v140;
            *(_WORD *)(a2 + 2004) = v140 + 1;
          }
          *((_QWORD *)&v1145[0] + 1) = (v140 << 48) | 0x19C840;
          v141 = *(unsigned __int16 *)(a2 + 1954);
          if ((_DWORD)v141 == 0xFFFF)
          {
            v141 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1954) = v141;
            *(_WORD *)(a2 + 2004) = v141 + 1;
          }
          *(_QWORD *)&v1145[1] = ((unint64_t)(unsigned __int16)v141 << 48) | 0x19C840;
          v142 = *(unsigned __int16 *)(a2 + 1962);
          if ((_DWORD)v142 == 0xFFFF)
          {
            v142 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1962) = v142;
            *(_WORD *)(a2 + 2004) = v142 + 1;
          }
          *((_QWORD *)&v1145[1] + 1) = (v142 << 48) | 0x19C840;
          v59 = (_WORD *)(a2 + 2004);
          if ((_DWORD)v141 == 0xFFFF)
          {
            v141 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1954) = v141;
            *(_WORD *)(a2 + 2004) = v141 + 1;
          }
          *(_QWORD *)&v1145[0] = (v141 << 48) | 0x72679000;
          (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
          memset(v1145, 0, 72);
          v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
          *(_DWORD *)(a2 + 16) = 3;
          v143 = *(unsigned __int16 *)(a2 + 1946);
          if ((_DWORD)v143 == 0xFFFF)
          {
            v143 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1946) = v143;
            *(_WORD *)(a2 + 2004) = v143 + 1;
          }
          *((_QWORD *)&v1145[0] + 1) = (v143 << 48) | 0x19C840;
          v144 = *(unsigned __int16 *)(a2 + 1954);
          if ((_DWORD)v144 == 0xFFFF)
          {
            v144 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1954) = v144;
            *(_WORD *)(a2 + 2004) = v144 + 1;
          }
          *(_QWORD *)&v1145[1] = (v144 << 48) | 0x19C840;
          v145 = *(unsigned __int16 *)(a2 + 1970);
          if ((_DWORD)v145 == 0xFFFF)
          {
            v145 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1970) = v145;
            *(_WORD *)(a2 + 2004) = v145 + 1;
          }
          *((_QWORD *)&v1145[1] + 1) = (v145 << 48) | 0x19C840;
          v146 = *(unsigned __int16 *)(a2 + 1940);
          if ((_DWORD)v146 == 0xFFFF)
          {
            v146 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1940) = v146;
            *(_WORD *)(a2 + 2004) = v146 + 1;
          }
          *(_QWORD *)&v1145[0] = (v146 << 48) | 0x72679000;
          (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
          memset((char *)v1145 + 8, 0, 64);
          v147 = *(_DWORD *)(a2 + 16);
          *(_DWORD *)(a2 + 16) = 1;
          v1144 = (8 * (v147 & 7)) | 0x3100100381;
          v148 = *(unsigned __int16 *)(a2 + 1940);
          if (v148 == 0xFFFF)
          {
            v150 = *(unsigned __int16 *)(a2 + 2004);
            v151 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1940) = v150;
            *(_WORD *)(a2 + 2004) = ++v151;
            *((_QWORD *)&v1145[0] + 1) = ((unint64_t)(unsigned __int16)v150 << 48) | 0x19C840;
            if ((v151 & 0x10000) != 0)
            {
              v150 = *(unsigned __int16 *)(a2 + 2004);
              *(_WORD *)(a2 + 1940) = v150;
              *(_WORD *)(a2 + 2004) = v150 + 1;
            }
            v149 = v150 << 48;
          }
          else
          {
            v149 = v148 << 48;
            *((_QWORD *)&v1145[0] + 1) = ((unint64_t)(unsigned __int16)v148 << 48) | 0x19C840;
          }
          *(_QWORD *)&v1145[0] = v149 | 0x72679000;
          (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
          LODWORD(v60) = v1142;
        }
      }
      if ((_DWORD)v60)
      {
        v152 = 0;
        v153 = 1;
        do
        {
          memset(v1145, 0, 72);
          v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000A02;
          *(_DWORD *)(a2 + 16) = 2;
          v154 = *(unsigned __int16 *)(a2 + 1902);
          if ((_DWORD)v154 == 0xFFFF)
          {
            v154 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1902) = v154;
            *(_WORD *)(a2 + 2004) = v154 + 1;
          }
          *((_QWORD *)&v1145[0] + 1) = (v154 << 48) | 0x19C840;
          v155 = *(unsigned __int16 *)(v1136 + 2 * v152);
          if ((_DWORD)v155 == 0xFFFF)
          {
            v155 = (unsigned __int16)*v59;
            *(_WORD *)(v1136 + 2 * v152) = v155;
            *v59 = v155 + 1;
          }
          *(_QWORD *)&v1145[1] = (v155 << 48) | 0x19C840;
          v156 = *(unsigned __int16 *)(a2 + 1920);
          if ((v153 & 1) != 0)
          {
            if ((_DWORD)v156 == 0xFFFF)
            {
              v156 = *(unsigned __int16 *)(a2 + 2004);
              *(_WORD *)(a2 + 1920) = v156;
              *(_WORD *)(a2 + 2004) = v156 + 1;
            }
            v157 = (v156 << 48) | 0x72679000;
          }
          else
          {
            if ((_DWORD)v156 == 0xFFFF)
            {
              v156 = *(unsigned __int16 *)(a2 + 2004);
              *(_WORD *)(a2 + 1920) = v156;
              *(_WORD *)(a2 + 2004) = v156 + 1;
            }
            v157 = ((unint64_t)(v152 == 1) << 17) | (v156 << 48) | ((unint64_t)(v152 == 2) << 16) | ((unint64_t)(v152 == 3) << 15) | 0x72601000;
          }
          *(_QWORD *)&v1145[0] = v157;
          (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
          v153 = 0;
          ++v152;
          v60 = v1142;
        }
        while (v152 < v1142);
        if (!v63)
          goto LABEL_335;
        v158 = 0;
        v159 = 0;
        do
        {
          if (((v63 >> v158) & 1) != 0)
          {
            v160 = *(_DWORD *)&v1140[4 * v158];
            memset(v1145, 0, 72);
            v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000A02;
            *(_DWORD *)(a2 + 16) = 2;
            v161 = v160 + 328;
            v162 = a2 + 4 * (v160 + 328);
            v163 = *(unsigned __int16 *)(v162 + 260);
            if ((_DWORD)v163 == 0xFFFF)
            {
              v164 = *(__int16 *)(a2 + 1998);
              v163 = *(unsigned __int16 *)(a2 + 1998);
              *(_WORD *)(v162 + 260) = v164;
              *(_WORD *)(a2 + 4 * v164 + 262) = v161;
              v75 = (v161 & 0xFFFFFFF0) == 144;
              v165 = v164 + 11;
              if (!v75)
                v165 = v164 + 1;
              *(_WORD *)(a2 + 1998) = v165;
            }
            *((_QWORD *)&v1145[0] + 1) = ((v163 << 48) | 0x19C840) + 64;
            v166 = *(unsigned __int16 *)(v1136 + 2 * v158);
            if ((_DWORD)v166 == 0xFFFF)
            {
              v166 = (unsigned __int16)*v59;
              *(_WORD *)(v1136 + 2 * v158) = v166;
              *v59 = v166 + 1;
            }
            *(_QWORD *)&v1145[1] = ((v166 << 48) | 0x19C840) + 16;
            v167 = *(unsigned __int16 *)(a2 + 1954);
            if (v159)
            {
              if ((_DWORD)v167 == 0xFFFF)
              {
                v167 = *(unsigned __int16 *)(a2 + 2004);
                *(_WORD *)(a2 + 1954) = v167;
                *(_WORD *)(a2 + 2004) = v167 + 1;
              }
              v168 = ((unint64_t)(v158 == 1) << 17) | (v167 << 48) | ((unint64_t)(v158 == 2) << 16) | ((unint64_t)(v158 == 3) << 15) | 0x72601000;
            }
            else
            {
              if ((_DWORD)v167 == 0xFFFF)
              {
                v167 = *(unsigned __int16 *)(a2 + 2004);
                *(_WORD *)(a2 + 1954) = v167;
                *(_WORD *)(a2 + 2004) = v167 + 1;
              }
              v168 = (v167 << 48) | 0x72679000;
            }
            *(_QWORD *)&v1145[0] = v168;
            (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
            v159 = 1;
            v60 = v1142;
          }
          ++v158;
        }
        while (v158 < v60);
        v169 = 0;
        v170 = 0;
        do
        {
          if (((v63 >> v169) & 1) != 0)
          {
            v171 = *(_DWORD *)&v1140[4 * v169];
            memset(&v1145[1], 0, 56);
            v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
            *(_DWORD *)(a2 + 16) = 1;
            v172 = v171 + 296;
            v173 = a2 + 4 * (v171 + 296);
            v174 = *(unsigned __int16 *)(v173 + 260);
            if ((_DWORD)v174 == 0xFFFF)
            {
              v175 = *(__int16 *)(a2 + 1998);
              v174 = *(unsigned __int16 *)(a2 + 1998);
              *(_WORD *)(v173 + 260) = v175;
              *(_WORD *)(a2 + 4 * v175 + 262) = v172;
              v75 = (v172 & 0xFFFFFFF0) == 144;
              v176 = v175 + 11;
              if (!v75)
                v176 = v175 + 1;
              *(_WORD *)(a2 + 1998) = v176;
            }
            *((_QWORD *)&v1145[0] + 1) = ((v174 << 48) | 0x1FE40) + 64;
            v177 = *(unsigned __int16 *)(a2 + 1946);
            if (v170)
            {
              if ((_DWORD)v177 == 0xFFFF)
              {
                v177 = *(unsigned __int16 *)(a2 + 2004);
                *(_WORD *)(a2 + 1946) = v177;
                *(_WORD *)(a2 + 2004) = v177 + 1;
              }
              v178 = ((unint64_t)(v169 == 1) << 17) | (v177 << 48) | ((unint64_t)(v169 == 2) << 16) | ((unint64_t)(v169 == 3) << 15) | 0x72601000;
            }
            else
            {
              if ((_DWORD)v177 == 0xFFFF)
              {
                v177 = *(unsigned __int16 *)(a2 + 2004);
                *(_WORD *)(a2 + 1946) = v177;
                *(_WORD *)(a2 + 2004) = v177 + 1;
              }
              v178 = (v177 << 48) | 0x72679000;
            }
            *(_QWORD *)&v1145[0] = v178;
            (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
            memset(&v1145[1], 0, 56);
            v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
            *(_DWORD *)(a2 + 16) = 1;
            v179 = v171 + 312;
            v180 = a2 + 4 * (v171 + 312);
            v181 = *(unsigned __int16 *)(v180 + 260);
            if ((_DWORD)v181 == 0xFFFF)
            {
              v182 = *(__int16 *)(a2 + 1998);
              v181 = *(unsigned __int16 *)(a2 + 1998);
              *(_WORD *)(v180 + 260) = v182;
              *(_WORD *)(a2 + 4 * v182 + 262) = v179;
              v75 = (v179 & 0xFFFFFFF0) == 144;
              v183 = v182 + 11;
              if (!v75)
                v183 = v182 + 1;
              *(_WORD *)(a2 + 1998) = v183;
            }
            *((_QWORD *)&v1145[0] + 1) = ((v181 << 48) | 0x1FE40) + 64;
            v184 = *(unsigned __int16 *)(a2 + 1962);
            if (v170)
            {
              if ((_DWORD)v184 == 0xFFFF)
              {
                v184 = *(unsigned __int16 *)(a2 + 2004);
                *(_WORD *)(a2 + 1962) = v184;
                *(_WORD *)(a2 + 2004) = v184 + 1;
              }
              v185 = ((unint64_t)(v169 == 1) << 17) | (v184 << 48) | ((unint64_t)(v169 == 2) << 16) | ((unint64_t)(v169 == 3) << 15) | 0x72601000;
            }
            else
            {
              if ((_DWORD)v184 == 0xFFFF)
              {
                v184 = *(unsigned __int16 *)(a2 + 2004);
                *(_WORD *)(a2 + 1962) = v184;
                *(_WORD *)(a2 + 2004) = v184 + 1;
              }
              v185 = (v184 << 48) | 0x72679000;
            }
            *(_QWORD *)&v1145[0] = v185;
            (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
            v170 = 1;
            v60 = v1142;
          }
          ++v169;
        }
        while (v169 < v60);
      }
      else if (!v63)
      {
        v59 = (_WORD *)(a2 + 2004);
        if ((*a1 & 0x400000000000000) != 0)
          goto LABEL_435;
        if ((*a1 & 0x2000000000000) == 0)
          goto LABEL_402;
        goto LABEL_451;
      }
      if ((v63 & ~v1128) != 0)
      {
        memset(v1145, 0, 72);
        v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000C82;
        *(_DWORD *)(a2 + 16) = 2;
        v186 = *(unsigned __int16 *)(a2 + 1954);
        if ((_DWORD)v186 == 0xFFFF)
        {
          v186 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1954) = v186;
          *(_WORD *)(a2 + 2004) = v186 + 1;
        }
        *((_QWORD *)&v1145[0] + 1) = (v186 << 48) | 0x19C840;
        v187 = *(unsigned __int16 *)(a2 + 1946);
        if ((_DWORD)v187 == 0xFFFF)
        {
          v187 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1946) = v187;
          *(_WORD *)(a2 + 2004) = v187 + 1;
        }
        *(_QWORD *)&v1145[1] = (v187 << 48) | 0x19C840;
        v188 = *(unsigned __int16 *)(a2 + 1940);
        if (v1126)
        {
          if ((_DWORD)v188 == 0xFFFF)
          {
            v188 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1940) = v188;
            *(_WORD *)(a2 + 2004) = v188 + 1;
          }
          v189 = (v188 << 48) | 0x72679000;
        }
        else
        {
          if ((_DWORD)v188 == 0xFFFF)
          {
            v188 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1940) = v188;
            *(_WORD *)(a2 + 2004) = v188 + 1;
          }
          v190 = vandq_s8((int8x16_t)vshlq_u32((uint32x4_t)vdupq_n_s32(v63 & ~v1128), (uint32x4_t)xmmword_22A98A320), (int8x16_t)xmmword_22A97F480);
          *(int8x8_t *)v190.i8 = vorr_s8(*(int8x8_t *)v190.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v190, v190, 8uLL));
          v191.i64[0] = v190.u32[0];
          v191.i64[1] = v190.u32[1];
          v189 = *(_QWORD *)&vorr_s8((int8x8_t)v190.u32[0], (int8x8_t)*(_OWORD *)&vextq_s8(v191, v191, 8uLL)) | (v188 << 48) | 0x72601000;
        }
        *(_QWORD *)&v1145[0] = v189;
        (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
      }
      if ((v1128 & v63) != 0)
      {
        memset(v1145, 0, 72);
        v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000C82;
        *(_DWORD *)(a2 + 16) = 2;
        v192 = *(unsigned __int16 *)(a2 + 1954);
        if ((_DWORD)v192 == 0xFFFF)
        {
          v192 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1954) = v192;
          *(_WORD *)(a2 + 2004) = v192 + 1;
        }
        *((_QWORD *)&v1145[0] + 1) = (v192 << 48) | 0x19C840;
        v193 = *(unsigned __int16 *)(a2 + 1946);
        if (v193 == 0xFFFF)
        {
          v195 = *(unsigned __int16 *)(a2 + 2004);
          v196 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1946) = v195;
          *(_WORD *)(a2 + 2004) = ++v196;
          *(_QWORD *)&v1145[1] = ((unint64_t)(unsigned __int16)v195 << 48) | 0x19C840;
          if ((v196 & 0x10000) != 0)
          {
            v195 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1946) = v195;
            *(_WORD *)(a2 + 2004) = v195 + 1;
          }
          v194 = v195 << 48;
        }
        else
        {
          v194 = v193 << 48;
          *(_QWORD *)&v1145[1] = ((unint64_t)(unsigned __int16)v193 << 48) | 0x19C840;
        }
        *(_QWORD *)&v1145[0] = v194 | 0x72679000;
        (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
        memset((char *)&v1145[1] + 8, 0, 48);
        v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
        *(_DWORD *)(a2 + 16) = 2;
        v197 = *(unsigned __int16 *)(a2 + 1940);
        if ((_DWORD)v197 == 0xFFFF)
        {
          v197 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1940) = v197;
          *(_WORD *)(a2 + 2004) = v197 + 1;
        }
        *((_QWORD *)&v1145[0] + 1) = ((unint64_t)(unsigned __int16)v197 << 48) | 0x19C840;
        v198 = *(unsigned __int16 *)(a2 + 1946);
        if ((_DWORD)v198 == 0xFFFF)
        {
          v198 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1946) = v198;
          *(_WORD *)(a2 + 2004) = v198 + 1;
        }
        *(_QWORD *)&v1145[1] = (v198 << 48) | 0x19C840;
        if ((_DWORD)v197 == 0xFFFF)
        {
          v197 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1940) = v197;
          *(_WORD *)(a2 + 2004) = v197 + 1;
        }
        v199 = vandq_s8((int8x16_t)vshlq_u32((uint32x4_t)vdupq_n_s32(v1128 & v63), (uint32x4_t)xmmword_22A98A320), (int8x16_t)xmmword_22A97F480);
        *(int8x8_t *)v199.i8 = vorr_s8(*(int8x8_t *)v199.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v199, v199, 8uLL));
        v200.i64[0] = v199.u32[0];
        v200.i64[1] = v199.u32[1];
        *(_QWORD *)&v1145[0] = *(_QWORD *)&vorr_s8((int8x8_t)v199.u32[0], (int8x8_t)*(_OWORD *)&vextq_s8(v200, v200, 8uLL)) | (v197 << 48) | 0x72601000;
        (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
      }
      memset((char *)&v1145[1] + 8, 0, 48);
      v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000E02;
      *(_DWORD *)(a2 + 16) = 2;
      v201 = *(unsigned __int16 *)(a2 + 1954);
      if ((_DWORD)v201 == 0xFFFF)
      {
        v201 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1954) = v201;
        *(_WORD *)(a2 + 2004) = v201 + 1;
      }
      *((_QWORD *)&v1145[0] + 1) = (v201 << 48) | 0x19C840;
      v202 = *(unsigned __int16 *)(a2 + 1962);
      v59 = (_WORD *)(a2 + 2004);
      if ((_DWORD)v202 == 0xFFFF)
      {
        v202 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1962) = v202;
        *(_WORD *)(a2 + 2004) = v202 + 1;
      }
      *(_QWORD *)&v1145[1] = (v202 << 48) | 0x19C840;
      v203 = *(unsigned __int16 *)(a2 + 1946);
      if ((_DWORD)v203 == 0xFFFF)
      {
        v203 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1946) = v203;
        *(_WORD *)(a2 + 2004) = v203 + 1;
      }
      *(_QWORD *)&v1145[0] = (v203 << 48) | 0x72679000;
      (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
      memset((char *)&v1145[1] + 8, 0, 48);
      v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
      *(_DWORD *)(a2 + 16) = 2;
      v204 = *(unsigned __int16 *)(a2 + 1940);
      if ((_DWORD)v204 == 0xFFFF)
      {
        v204 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1940) = v204;
        *(_WORD *)(a2 + 2004) = v204 + 1;
      }
      *((_QWORD *)&v1145[0] + 1) = ((unint64_t)(unsigned __int16)v204 << 48) | 0x19C840;
      v205 = *(unsigned __int16 *)(a2 + 1946);
      if ((_DWORD)v205 == 0xFFFF)
      {
        v205 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1946) = v205;
        *(_WORD *)(a2 + 2004) = v205 + 1;
      }
      *(_QWORD *)&v1145[1] = (v205 << 48) | 0x19C840;
      if ((_DWORD)v204 == 0xFFFF)
      {
        v204 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1940) = v204;
        *(_WORD *)(a2 + 2004) = v204 + 1;
      }
      v206 = vandq_s8((int8x16_t)vshlq_u32((uint32x4_t)vdupq_n_s32(v63), (uint32x4_t)xmmword_22A98A320), (int8x16_t)xmmword_22A97F480);
      *(int8x8_t *)v206.i8 = vorr_s8(*(int8x8_t *)v206.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v206, v206, 8uLL));
      v207.i64[0] = v206.u32[0];
      v207.i64[1] = v206.u32[1];
      *(_QWORD *)&v1145[0] = *(_QWORD *)&vorr_s8((int8x8_t)v206.u32[0], (int8x8_t)*(_OWORD *)&vextq_s8(v207, v207, 8uLL)) | (v204 << 48) | 0x72601000;
      (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
      v60 = v1142;
LABEL_335:
      if ((*a1 & 0x400000000000000) != 0)
      {
        if (!(_DWORD)v60)
        {
LABEL_435:
          if ((*a1 & 0x2000000000000) != 0)
          {
            if ((_DWORD)v60)
            {
              v272 = 0;
              do
              {
                memset((char *)&v1145[1] + 8, 0, 48);
                v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x31000007C2;
                *(_DWORD *)(a2 + 16) = 2;
                v273 = a2 + 2 * v272;
                v274 = *(unsigned __int16 *)(v273 + 1932);
                if ((_DWORD)v274 == 0xFFFF)
                {
                  v274 = (unsigned __int16)*v59;
                  *(_WORD *)(v273 + 1932) = v274;
                  *v59 = v274 + 1;
                }
                *((_QWORD *)&v1145[0] + 1) = (v274 << 48) | 0x19C840;
                v275 = *(unsigned __int16 *)(v273 + 1924);
                if ((_DWORD)v275 == 0xFFFF)
                {
                  v275 = (unsigned __int16)*v59;
                  *(_WORD *)(v273 + 1924) = v275;
                  *v59 = v275 + 1;
                }
                *(_QWORD *)&v1145[1] = (v275 << 48) | 0x19C840;
                v276 = *(unsigned __int16 *)(v273 + 1932);
                if ((_DWORD)v276 == 0xFFFF)
                {
                  v276 = (unsigned __int16)*v59;
                  *(_WORD *)(v273 + 1932) = v276;
                  *v59 = v276 + 1;
                }
                *(_QWORD *)&v1145[0] = (v276 << 48) | 0x72679000;
                (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
                ++v272;
              }
              while (v272 < v1142);
              v277 = 0;
              v278 = 1;
              do
              {
                memset(v1145, 0, 72);
                v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000A02;
                *(_DWORD *)(a2 + 16) = 2;
                v279 = *(unsigned __int16 *)(v1130 + 2 * v277);
                if ((_DWORD)v279 == 0xFFFF)
                {
                  v279 = (unsigned __int16)*v59;
                  *(_WORD *)(v1130 + 2 * v277) = v279;
                  *v59 = v279 + 1;
                }
                *((_QWORD *)&v1145[0] + 1) = (v279 << 48) | 0x19C840;
                v280 = *(unsigned __int16 *)(a2 + 1942);
                if ((_DWORD)v280 == 0xFFFF)
                {
                  v280 = *(unsigned __int16 *)(a2 + 2004);
                  *(_WORD *)(a2 + 1942) = v280;
                  *(_WORD *)(a2 + 2004) = v280 + 1;
                }
                *(_QWORD *)&v1145[1] = (v280 << 48) | 0x19C840;
                v281 = *(unsigned __int16 *)(a2 + 1922);
                if ((v278 & 1) != 0)
                {
                  if ((_DWORD)v281 == 0xFFFF)
                  {
                    v281 = *(unsigned __int16 *)(a2 + 2004);
                    *(_WORD *)(a2 + 1922) = v281;
                    *(_WORD *)(a2 + 2004) = v281 + 1;
                  }
                  v282 = (v281 << 48) | 0x72679000;
                }
                else
                {
                  if ((_DWORD)v281 == 0xFFFF)
                  {
                    v281 = *(unsigned __int16 *)(a2 + 2004);
                    *(_WORD *)(a2 + 1922) = v281;
                    *(_WORD *)(a2 + 2004) = v281 + 1;
                  }
                  v282 = ((unint64_t)(v277 == 1) << 17) | (v281 << 48) | ((unint64_t)(v277 == 2) << 16) | ((unint64_t)(v277 == 3) << 15) | 0x72601000;
                }
                *(_QWORD *)&v1145[0] = v282;
                (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
                v278 = 0;
                ++v277;
              }
              while (v277 < v1142);
            }
          }
          else if ((_DWORD)v60)
          {
            v262 = 0;
            v263 = 1;
            v264 = (_WORD *)(a2 + 1932);
            do
            {
              memset(v1145, 0, 72);
              v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x31000007C2;
              *(_DWORD *)(a2 + 16) = 2;
              v265 = (unsigned __int16)*v264;
              if ((_DWORD)v265 == 0xFFFF)
              {
                v265 = (unsigned __int16)*v59;
                *v264 = v265;
                *v59 = v265 + 1;
              }
              *((_QWORD *)&v1145[0] + 1) = (v265 << 48) | 0x15440;
              v266 = (unsigned __int16)*(v264 - 4);
              if ((_DWORD)v266 == 0xFFFF)
              {
                v266 = (unsigned __int16)*v59;
                *(v264 - 4) = v266;
                *v59 = v266 + 1;
              }
              *(_QWORD *)&v1145[1] = (v266 << 48) | 0x15440;
              v267 = *(unsigned __int16 *)(a2 + 1922);
              if ((v263 & 1) != 0)
              {
                if ((_DWORD)v267 == 0xFFFF)
                {
                  v267 = *(unsigned __int16 *)(a2 + 2004);
                  *(_WORD *)(a2 + 1922) = v267;
                  *(_WORD *)(a2 + 2004) = v267 + 1;
                }
                v268 = (v267 << 48) | 0x72679000;
              }
              else
              {
                if ((_DWORD)v267 == 0xFFFF)
                {
                  v267 = *(unsigned __int16 *)(a2 + 2004);
                  *(_WORD *)(a2 + 1922) = v267;
                  *(_WORD *)(a2 + 2004) = v267 + 1;
                }
                v268 = ((unint64_t)(v262 == 1) << 17) | (v267 << 48) | ((unint64_t)(v262 == 2) << 16) | ((unint64_t)(v262 == 3) << 15) | 0x72601000;
              }
              *(_QWORD *)&v1145[0] = v268;
              (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
              v263 = 0;
              ++v262;
              ++v264;
            }
            while (v262 < v1142);
          }
          goto LABEL_517;
        }
        v218 = 0;
        do
        {
          memset((char *)&v1145[1] + 8, 0, 48);
          v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000B82;
          *(_DWORD *)(a2 + 16) = 2;
          v219 = *(unsigned __int16 *)(a2 + 1902);
          if ((_DWORD)v219 == 0xFFFF)
          {
            v219 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1902) = v219;
            *(_WORD *)(a2 + 2004) = v219 + 1;
          }
          *((_QWORD *)&v1145[0] + 1) = (v219 << 48) | 0x19C840;
          v220 = a2 + 2 * v218;
          v221 = *(unsigned __int16 *)(v220 + 1924);
          if ((_DWORD)v221 == 0xFFFF)
          {
            v221 = (unsigned __int16)*v59;
            *(_WORD *)(v220 + 1924) = v221;
            *v59 = v221 + 1;
          }
          *(_QWORD *)&v1145[1] = (v221 << 48) | 0x19C840;
          v222 = *(unsigned __int16 *)(v220 + 1932);
          if ((_DWORD)v222 == 0xFFFF)
          {
            v222 = (unsigned __int16)*v59;
            *(_WORD *)(v220 + 1932) = v222;
            *v59 = v222 + 1;
          }
          *(_QWORD *)&v1145[0] = (v222 << 48) | 0x72679000;
          (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
          ++v218;
        }
        while (v218 < v1142);
        v223 = 966;
        do
        {
          memset(v1145, 0, 72);
          v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000B82;
          *(_DWORD *)(a2 + 16) = 2;
          v224 = *(unsigned __int16 *)(a2 + 1902);
          if ((_DWORD)v224 == 0xFFFF)
          {
            v224 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1902) = v224;
            *(_WORD *)(a2 + 2004) = v224 + 1;
          }
          *((_QWORD *)&v1145[0] + 1) = (v224 << 48) | 0x19C840;
          v225 = *(unsigned __int16 *)(a2 + 2 * v223);
          if (v225 == 0xFFFF)
          {
            v226 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 2 * v223) = v226;
            *(_WORD *)(a2 + 2004) = v226 + 1;
            v225 = *(unsigned __int16 *)(a2 + 2 * v223);
            *(_QWORD *)&v1145[1] = (v226 << 48) | 0x19C840;
            if ((_DWORD)v225 == 0xFFFF)
            {
              v225 = *(unsigned __int16 *)(a2 + 2004);
              *(_WORD *)(a2 + 2 * v223) = v225;
              *(_WORD *)(a2 + 2004) = v225 + 1;
            }
          }
          else
          {
            *(_QWORD *)&v1145[1] = (v225 << 48) | 0x19C840;
          }
          *(_QWORD *)&v1145[0] = (v225 << 48) | 0x72679000;
          (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
          v227 = v223 - 965;
          ++v223;
        }
        while (v227 < v1142);
        v228 = 966;
        while (2)
        {
          memset((char *)v1145 + 8, 0, 64);
          v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x31000007C2;
          *(_DWORD *)(a2 + 16) = 2;
          v229 = *(unsigned __int16 *)(a2 + 2 * v228);
          if (v229 != 0xFFFF)
          {
            *((_QWORD *)&v1145[0] + 1) = (v229 << 48) | 0x19C840;
            goto LABEL_372;
          }
          v230 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 2 * v228) = v230;
          *(_WORD *)(a2 + 2004) = v230 + 1;
          v229 = *(unsigned __int16 *)(a2 + 2 * v228);
          *((_QWORD *)&v1145[0] + 1) = (v230 << 48) | 0x19C840;
          if ((_DWORD)v229 == 0xFFFF)
          {
            v232 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 2 * v228) = v232;
            *(_WORD *)(a2 + 2004) = v232 + 1;
            v229 = *(unsigned __int16 *)(a2 + 2 * v228);
            *(_QWORD *)&v1145[1] = (v232 << 48) | 0x19C840;
            if ((_DWORD)v229 == 0xFFFF)
            {
              v229 = *(unsigned __int16 *)(a2 + 2004);
              *(_WORD *)(a2 + 2 * v228) = v229;
              *(_WORD *)(a2 + 2004) = v229 + 1;
            }
          }
          else
          {
LABEL_372:
            *(_QWORD *)&v1145[1] = (v229 << 48) | 0x19C840;
          }
          *(_QWORD *)&v1145[0] = (v229 << 48) | 0x72679000;
          (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
          v231 = v228 - 965;
          ++v228;
          LODWORD(v60) = v1142;
          if (v231 >= v1142)
            goto LABEL_435;
          continue;
        }
      }
      if ((*a1 & 0x2000000000000) == 0)
      {
        v208 = v1120;
        if (!(_DWORD)v60)
          v208 = 1;
        if ((v208 & 1) == 0)
        {
          v209 = 0;
          do
          {
            if (((v1131 >> v209) & 1) != 0)
            {
              v210 = *(_DWORD *)&v1140[4 * v209];
              memset(&v1145[1], 0, 56);
              v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
              *(_DWORD *)(a2 + 16) = 1;
              v211 = v210 + 304;
              v212 = a2 + 4 * (v210 + 304);
              v213 = *(unsigned __int16 *)(v212 + 260);
              if ((_DWORD)v213 == 0xFFFF)
              {
                v214 = *(__int16 *)(a2 + 1998);
                v213 = *(unsigned __int16 *)(a2 + 1998);
                *(_WORD *)(v212 + 260) = v214;
                *(_WORD *)(a2 + 4 * v214 + 262) = v211;
                v75 = (v211 & 0xFFFFFFF0) == 144;
                v215 = v214 + 11;
                if (!v75)
                  v215 = v214 + 1;
                *(_WORD *)(a2 + 1998) = v215;
              }
              *((_QWORD *)&v1145[0] + 1) = ((v213 << 48) | 0x19C840) + 64;
              v216 = a2 + 2 * v209;
              v217 = *(unsigned __int16 *)(v216 + 1932);
              if ((_DWORD)v217 == 0xFFFF)
              {
                v217 = (unsigned __int16)*v59;
                *(_WORD *)(v216 + 1932) = v217;
                *v59 = v217 + 1;
              }
              *(_QWORD *)&v1145[0] = (v217 << 48) | 0x72679000;
              (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
              v60 = v1142;
            }
            ++v209;
          }
          while (v209 < v60);
        }
LABEL_402:
        if ((v1126 & 1) != 0)
          goto LABEL_503;
        memset((char *)&v1145[1] + 8, 0, 48);
        v244 = 8 * (*(_DWORD *)(a2 + 16) & 7);
        *(_DWORD *)(a2 + 16) = 2;
        v1144 = v244 | 0x3100011042;
        v245 = *(unsigned __int16 *)(a2 + 1904);
        if ((_DWORD)v245 == 0xFFFF)
        {
          v245 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1904) = v245;
          *(_WORD *)(a2 + 2004) = v245 + 1;
        }
        *((_QWORD *)&v1145[0] + 1) = (v245 << 48) | 0x19C840;
        *(_QWORD *)&v1145[1] = 2560163840;
        v246 = *(unsigned __int16 *)(a2 + 1946);
        if ((_DWORD)v246 == 0xFFFF)
        {
          v246 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1946) = v246;
          *(_WORD *)(a2 + 2004) = v246 + 1;
        }
        *(_QWORD *)&v1145[0] = (v246 << 48) | 0x72679000;
        (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
        v247 = v1142;
        if ((_DWORD)v1142)
        {
          v248 = 0;
          do
          {
            if (((v64 >> v248) & 1) != 0)
            {
              memset((char *)&v1145[1] + 8, 0, 48);
              v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x31000007C2;
              *(_DWORD *)(a2 + 16) = 2;
              v249 = *(unsigned __int16 *)(a2 + 1946);
              if ((_DWORD)v249 == 0xFFFF)
              {
                v249 = *(unsigned __int16 *)(a2 + 2004);
                *(_WORD *)(a2 + 1946) = v249;
                *(_WORD *)(a2 + 2004) = v249 + 1;
              }
              *((_QWORD *)&v1145[0] + 1) = (v249 << 48) | 0x19C840;
              v250 = a2 + 2 * v248;
              v251 = *(unsigned __int16 *)(v250 + 1924);
              if ((_DWORD)v251 == 0xFFFF)
              {
                v251 = (unsigned __int16)*v1138;
                *(_WORD *)(v250 + 1924) = v251;
                *v1138 = v251 + 1;
              }
              *(_QWORD *)&v1145[1] = (v251 << 48) | 0x19C840;
              v252 = *(unsigned __int16 *)(v250 + 1932);
              if ((_DWORD)v252 == 0xFFFF)
              {
                v252 = (unsigned __int16)*v1138;
                *(_WORD *)(v250 + 1932) = v252;
                *v1138 = v252 + 1;
              }
              *(_QWORD *)&v1145[0] = (v252 << 48) | 0x72679000;
              (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
              v247 = v1142;
            }
            ++v248;
          }
          while (v248 < v247);
          v253 = 0;
          v254 = 0;
          do
          {
            if (((v64 >> v253) & 1) != 0)
            {
              memset(v1145, 0, 72);
              v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000A02;
              *(_DWORD *)(a2 + 16) = 2;
              v255 = *(unsigned __int16 *)(v1130 + 2 * v253);
              if (v255 == 0xFFFF)
              {
                v256 = (unsigned __int16)*v1138;
                *(_WORD *)(v1130 + 2 * v253) = v256;
                *v1138 = v256 + 1;
                v255 = *(unsigned __int16 *)(v1130 + 2 * v253);
                *((_QWORD *)&v1145[0] + 1) = (v256 << 48) | 0x19C840;
                if ((_DWORD)v255 == 0xFFFF)
                {
                  v255 = (unsigned __int16)*v1138;
                  *(_WORD *)(v1130 + 2 * v253) = v255;
                  *v1138 = v255 + 1;
                }
              }
              else
              {
                *((_QWORD *)&v1145[0] + 1) = (v255 << 48) | 0x19C840;
              }
              *(_QWORD *)&v1145[1] = (v255 << 48) | 0x19C840;
              v257 = *(unsigned __int16 *)(a2 + 1946);
              if (v254)
              {
                if ((_DWORD)v257 == 0xFFFF)
                {
                  v257 = *(unsigned __int16 *)(a2 + 2004);
                  *(_WORD *)(a2 + 1946) = v257;
                  *(_WORD *)(a2 + 2004) = v257 + 1;
                }
                v258 = ((unint64_t)(v253 == 1) << 17) | (v257 << 48) | ((unint64_t)(v253 == 2) << 16) | ((unint64_t)(v253 == 3) << 15) | 0x72601000;
              }
              else
              {
                if ((_DWORD)v257 == 0xFFFF)
                {
                  v257 = *(unsigned __int16 *)(a2 + 2004);
                  *(_WORD *)(a2 + 1946) = v257;
                  *(_WORD *)(a2 + 2004) = v257 + 1;
                }
                v258 = (v257 << 48) | 0x72679000;
              }
              *(_QWORD *)&v1145[0] = v258;
              (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
              v254 = 1;
              v247 = v1142;
            }
            ++v253;
          }
          while (v253 < v247);
        }
        memset((char *)v1145 + 8, 0, 64);
        v259 = 8 * (*(_DWORD *)(a2 + 16) & 7);
        *(_DWORD *)(a2 + 16) = 1;
        v1144 = v259 | 0x3100080341;
        v260 = *(unsigned __int16 *)(a2 + 1946);
        if (v260 == 0xFFFF)
        {
          v294 = *(unsigned __int16 *)(a2 + 2004);
          v295 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1946) = v294;
          *(_WORD *)(a2 + 2004) = ++v295;
          *((_QWORD *)&v1145[0] + 1) = ((unint64_t)(unsigned __int16)v294 << 48) | 0x19C840;
          if ((v295 & 0x10000) != 0)
          {
            v294 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1946) = v294;
            *(_WORD *)(a2 + 2004) = v294 + 1;
          }
          v261 = v294 << 48;
        }
        else
        {
          v261 = v260 << 48;
          *((_QWORD *)&v1145[0] + 1) = ((unint64_t)(unsigned __int16)v260 << 48) | 0x19C840;
        }
        *(_QWORD *)&v1145[0] = v261 | 0x72679000;
        (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
        v60 = v1142;
        if ((_DWORD)v1142)
        {
          v296 = 0;
          v297 = 0;
          v298 = 0;
          v299 = 0;
          v300 = 0;
          do
          {
            if (((v64 >> v300) & 1) != 0)
            {
              memset((char *)&v1145[1] + 8, 0, 48);
              v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
              *(_DWORD *)(a2 + 16) = 2;
              v301 = a2 + 2 * v300;
              v302 = *(unsigned __int16 *)(v301 + 1932);
              if ((_DWORD)v302 == 0xFFFF)
              {
                v302 = (unsigned __int16)*v1138;
                *(_WORD *)(v301 + 1932) = v302;
                *v1138 = v302 + 1;
              }
              *((_QWORD *)&v1145[0] + 1) = (v302 << 48) | 0x19C840;
              v303 = *(unsigned __int16 *)(a2 + 1946);
              if ((_DWORD)v303 == 0xFFFF)
              {
                v303 = *(unsigned __int16 *)(a2 + 2004);
                *(_WORD *)(a2 + 1946) = v303;
                *(_WORD *)(a2 + 2004) = v303 + 1;
              }
              *(_QWORD *)&v1145[1] = v296 | (v303 << 48) | v297 | v298 | v299 | 0x40;
              v304 = *(unsigned __int16 *)(v301 + 1932);
              if ((_DWORD)v304 == 0xFFFF)
              {
                v304 = (unsigned __int16)*v1138;
                *(_WORD *)(v301 + 1932) = v304;
                *v1138 = v304 + 1;
              }
              *(_QWORD *)&v1145[0] = (v304 << 48) | 0x72679000;
              (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
              v60 = v1142;
            }
            ++v300;
            v299 += 0x8000;
            v298 += 0x2000;
            v297 += 2048;
            v296 += 512;
          }
          while (v300 < v60);
LABEL_503:
          if ((_DWORD)v60)
          {
            v305 = 0;
            v306 = 1;
            do
            {
              memset(v1145, 0, 72);
              v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000A02;
              *(_DWORD *)(a2 + 16) = 2;
              v307 = *(unsigned __int16 *)(a2 + 1902);
              if ((_DWORD)v307 == 0xFFFF)
              {
                v307 = *(unsigned __int16 *)(a2 + 2004);
                *(_WORD *)(a2 + 1902) = v307;
                *(_WORD *)(a2 + 2004) = v307 + 1;
              }
              *((_QWORD *)&v1145[0] + 1) = (v307 << 48) | 0x19C840;
              v308 = *(unsigned __int16 *)(v1130 + 2 * v305);
              if ((_DWORD)v308 == 0xFFFF)
              {
                v308 = (unsigned __int16)*v1138;
                *(_WORD *)(v1130 + 2 * v305) = v308;
                *v1138 = v308 + 1;
              }
              *(_QWORD *)&v1145[1] = (v308 << 48) | 0x19C840;
              v309 = *(unsigned __int16 *)(a2 + 1922);
              if ((v306 & 1) != 0)
              {
                if ((_DWORD)v309 == 0xFFFF)
                {
                  v309 = *(unsigned __int16 *)(a2 + 2004);
                  *(_WORD *)(a2 + 1922) = v309;
                  *(_WORD *)(a2 + 2004) = v309 + 1;
                }
                v310 = (v309 << 48) | 0x72679000;
              }
              else
              {
                if ((_DWORD)v309 == 0xFFFF)
                {
                  v309 = *(unsigned __int16 *)(a2 + 2004);
                  *(_WORD *)(a2 + 1922) = v309;
                  *(_WORD *)(a2 + 2004) = v309 + 1;
                }
                v310 = ((unint64_t)(v305 == 1) << 17) | (v309 << 48) | ((unint64_t)(v305 == 2) << 16) | ((unint64_t)(v305 == 3) << 15) | 0x72601000;
              }
              *(_QWORD *)&v1145[0] = v310;
              (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
              v306 = 0;
              ++v305;
            }
            while (v305 < v1142);
          }
          goto LABEL_517;
        }
        goto LABEL_517;
      }
      if ((_DWORD)v60)
      {
        v233 = 0;
        do
        {
          memset((char *)&v1145[1] + 8, 0, 48);
          v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x31000007C2;
          *(_DWORD *)(a2 + 16) = 2;
          v234 = *(unsigned __int16 *)(a2 + 1942);
          if ((_DWORD)v234 == 0xFFFF)
          {
            v234 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1942) = v234;
            *(_WORD *)(a2 + 2004) = v234 + 1;
          }
          *((_QWORD *)&v1145[0] + 1) = (v234 << 48) | 0x19C840;
          v235 = a2 + 2 * v233;
          v236 = *(unsigned __int16 *)(v235 + 1924);
          if ((_DWORD)v236 == 0xFFFF)
          {
            v236 = (unsigned __int16)*v59;
            *(_WORD *)(v235 + 1924) = v236;
            *v59 = v236 + 1;
          }
          *(_QWORD *)&v1145[1] = (v236 << 48) | 0x19C840;
          v237 = *(unsigned __int16 *)(v235 + 1932);
          if ((_DWORD)v237 == 0xFFFF)
          {
            v237 = (unsigned __int16)*v59;
            *(_WORD *)(v235 + 1932) = v237;
            *v59 = v237 + 1;
          }
          *(_QWORD *)&v1145[0] = (v237 << 48) | 0x72679000;
          (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
          ++v233;
        }
        while (v233 < v1142);
        v238 = 0;
        v239 = 1;
        do
        {
          memset(v1145, 0, 72);
          v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000A02;
          *(_DWORD *)(a2 + 16) = 2;
          v240 = *(unsigned __int16 *)(v1130 + 2 * v238);
          if (v240 == 0xFFFF)
          {
            v241 = (unsigned __int16)*v59;
            *(_WORD *)(v1130 + 2 * v238) = v241;
            *v59 = v241 + 1;
            v240 = *(unsigned __int16 *)(v1130 + 2 * v238);
            *((_QWORD *)&v1145[0] + 1) = (v241 << 48) | 0x19C840;
            if ((_DWORD)v240 == 0xFFFF)
            {
              v240 = (unsigned __int16)*v59;
              *(_WORD *)(v1130 + 2 * v238) = v240;
              *v59 = v240 + 1;
            }
          }
          else
          {
            *((_QWORD *)&v1145[0] + 1) = (v240 << 48) | 0x19C840;
          }
          *(_QWORD *)&v1145[1] = (v240 << 48) | 0x19C840;
          v242 = *(unsigned __int16 *)(a2 + 1946);
          if ((v239 & 1) != 0)
          {
            if ((_DWORD)v242 == 0xFFFF)
            {
              v242 = *(unsigned __int16 *)(a2 + 2004);
              *(_WORD *)(a2 + 1946) = v242;
              *(_WORD *)(a2 + 2004) = v242 + 1;
            }
            v243 = (v242 << 48) | 0x72679000;
          }
          else
          {
            if ((_DWORD)v242 == 0xFFFF)
            {
              v242 = *(unsigned __int16 *)(a2 + 2004);
              *(_WORD *)(a2 + 1946) = v242;
              *(_WORD *)(a2 + 2004) = v242 + 1;
            }
            v243 = ((unint64_t)(v238 == 1) << 17) | (v242 << 48) | ((unint64_t)(v238 == 2) << 16) | ((unint64_t)(v238 == 3) << 15) | 0x72601000;
          }
          *(_QWORD *)&v1145[0] = v243;
          (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
          v239 = 0;
          ++v238;
        }
        while (v238 < v1142);
      }
LABEL_451:
      memset((char *)v1145 + 8, 0, 64);
      v269 = 8 * (*(_DWORD *)(a2 + 16) & 7);
      *(_DWORD *)(a2 + 16) = 1;
      v1144 = v269 | 0x3100080341;
      v270 = *(unsigned __int16 *)(a2 + 1946);
      if (v270 == 0xFFFF)
      {
        v283 = *(unsigned __int16 *)(a2 + 2004);
        v284 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1946) = v283;
        *(_WORD *)(a2 + 2004) = ++v284;
        *((_QWORD *)&v1145[0] + 1) = ((unint64_t)(unsigned __int16)v283 << 48) | 0x19C840;
        if ((v284 & 0x10000) != 0)
        {
          v283 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1946) = v283;
          *(_WORD *)(a2 + 2004) = v283 + 1;
        }
        v271 = v283 << 48;
      }
      else
      {
        v271 = v270 << 48;
        *((_QWORD *)&v1145[0] + 1) = ((unint64_t)(unsigned __int16)v270 << 48) | 0x19C840;
      }
      *(_QWORD *)&v1145[0] = v271 | 0x72679000;
      (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
      if ((_DWORD)v1142)
      {
        v285 = 0;
        v286 = 0;
        v287 = 0;
        v288 = 0;
        v289 = 966;
        do
        {
          memset((char *)&v1145[1] + 8, 0, 48);
          v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
          *(_DWORD *)(a2 + 16) = 2;
          v290 = *(unsigned __int16 *)(a2 + 2 * v289);
          if ((_DWORD)v290 == 0xFFFF)
          {
            v290 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 2 * v289) = v290;
            *(_WORD *)(a2 + 2004) = v290 + 1;
          }
          *((_QWORD *)&v1145[0] + 1) = (v290 << 48) | 0x19C840;
          v291 = *(unsigned __int16 *)(a2 + 1946);
          if ((_DWORD)v291 == 0xFFFF)
          {
            v291 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1946) = v291;
            *(_WORD *)(a2 + 2004) = v291 + 1;
          }
          *(_QWORD *)&v1145[1] = v285 | (v291 << 48) | v286 | v287 | v288 | 0x40;
          v292 = *(unsigned __int16 *)(a2 + 2 * v289);
          if ((_DWORD)v292 == 0xFFFF)
          {
            v292 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 2 * v289) = v292;
            *(_WORD *)(a2 + 2004) = v292 + 1;
          }
          *(_QWORD *)&v1145[0] = (v292 << 48) | 0x72679000;
          (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
          v288 += 0x8000;
          v287 += 0x2000;
          v286 += 2048;
          v285 += 512;
          v293 = v289 - 965;
          ++v289;
          LODWORD(v60) = v1142;
        }
        while (v293 < v1142);
        goto LABEL_503;
      }
LABEL_517:
      if ((*a1 & 0x1000000000000) == 0)
        goto LABEL_529;
      memset(v1145, 0, 72);
      v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000F83;
      *(_DWORD *)(a2 + 16) = 3;
      v311 = *(unsigned __int16 *)(a2 + 1920);
      if ((_DWORD)v311 == 0xFFFF)
      {
        v311 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1920) = v311;
        *(_WORD *)(a2 + 2004) = v311 + 1;
      }
      *((_QWORD *)&v1145[0] + 1) = (v311 << 48) | 0x19C840;
      v312 = *(unsigned __int16 *)(a2 + 1922);
      if (v312 == 0xFFFF)
      {
        v314 = *(unsigned __int16 *)(a2 + 2004);
        v315 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1922) = v314;
        *(_WORD *)(a2 + 2004) = ++v315;
        *(_QWORD *)&v1145[1] = (((unint64_t)(unsigned __int16)v314 << 48) | 0x19C840) + 16;
        if ((v315 & 0x10000) != 0)
        {
          v316 = *(unsigned __int16 *)(a2 + 2004);
          v317 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1922) = v316;
          *(_WORD *)(a2 + 2004) = ++v317;
          *((_QWORD *)&v1145[1] + 1) = ((unint64_t)(unsigned __int16)v316 << 48) | 0x19C840;
          if ((v317 & 0x10000) != 0)
          {
            v316 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1922) = v316;
            *(_WORD *)(a2 + 2004) = v316 + 1;
          }
          v313 = v316 << 48;
          goto LABEL_528;
        }
        v313 = v314 << 48;
      }
      else
      {
        v313 = v312 << 48;
        *(_QWORD *)&v1145[1] = (((unint64_t)(unsigned __int16)v312 << 48) | 0x19C840) + 16;
      }
      *((_QWORD *)&v1145[1] + 1) = v313 | 0x19C840;
LABEL_528:
      *(_QWORD *)&v1145[0] = v313 | 0x72679000;
      (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
LABEL_529:
      memset((char *)&v1145[1] + 8, 0, 48);
      v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000B42;
      *(_DWORD *)(a2 + 16) = 2;
      v318 = *(unsigned __int16 *)(a2 + 1922);
      if ((_DWORD)v318 == 0xFFFF)
      {
        v318 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1922) = v318;
        *(_WORD *)(a2 + 2004) = v318 + 1;
      }
      *((_QWORD *)&v1145[0] + 1) = (v318 << 48) | 0x19C840;
      v319 = *(unsigned __int16 *)(a2 + 1664);
      if ((_DWORD)v319 == 0xFFFF)
      {
        v320 = *(__int16 *)(a2 + 1998);
        v319 = *(unsigned __int16 *)(a2 + 1998);
        *(_WORD *)(a2 + 1664) = v320;
        *(_WORD *)(a2 + 4 * v320 + 262) = 351;
        *(_WORD *)(a2 + 1998) = v320 + 1;
        v318 = *(unsigned __int16 *)(a2 + 1922);
      }
      *(_QWORD *)&v1145[1] = (v319 << 48) | 0xAA80;
      if ((_DWORD)v318 == 0xFFFF)
      {
        v318 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1922) = v318;
        *(_WORD *)(a2 + 2004) = v318 + 1;
      }
      *(_QWORD *)&v1145[0] = (v318 << 48) | 0x72679000;
      (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
      if ((*a1 & 0x1000000000000) != 0)
      {
        memset(v1145, 0, 72);
        v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000F83;
        *(_DWORD *)(a2 + 16) = 3;
        v325 = *(unsigned __int16 *)(a2 + 1920);
        if ((_DWORD)v325 == 0xFFFF)
        {
          v325 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1920) = v325;
          *(_WORD *)(a2 + 2004) = v325 + 1;
        }
        *((_QWORD *)&v1145[0] + 1) = (v325 << 48) | 0x19C840;
        v326 = *(unsigned __int16 *)(a2 + 1632);
        if ((_DWORD)v326 == 0xFFFF)
        {
          v327 = *(__int16 *)(a2 + 1998);
          v326 = *(unsigned __int16 *)(a2 + 1998);
          *(_WORD *)(a2 + 1632) = v327;
          *(_WORD *)(a2 + 4 * v327 + 262) = 343;
          *(_WORD *)(a2 + 1998) = v327 + 1;
        }
        *(_QWORD *)&v1145[1] = (v326 << 48) | 0x80;
        v328 = *(unsigned __int16 *)(a2 + 1628);
        if ((_DWORD)v328 == 0xFFFF)
        {
          v329 = *(__int16 *)(a2 + 1998);
          v328 = *(unsigned __int16 *)(a2 + 1998);
          *(_WORD *)(a2 + 1628) = v329;
          *(_WORD *)(a2 + 4 * v329 + 262) = 342;
          *(_WORD *)(a2 + 1998) = v329 + 1;
        }
        *((_QWORD *)&v1145[1] + 1) = (v328 << 48) | 0x80;
        v330 = *(unsigned __int16 *)(a2 + 1946);
        if ((_DWORD)v330 == 0xFFFF)
        {
          v330 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1946) = v330;
          *(_WORD *)(a2 + 2004) = v330 + 1;
        }
        *(_QWORD *)&v1145[0] = (v330 << 48) | 0x72679000;
        (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
        memset((char *)&v1145[1] + 8, 0, 48);
        v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000E02;
        *(_DWORD *)(a2 + 16) = 2;
        v322 = *(unsigned __int16 *)(a2 + 1922);
        if ((_DWORD)v322 == 0xFFFF)
        {
          v322 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1922) = v322;
          *(_WORD *)(a2 + 2004) = v322 + 1;
        }
        *((_QWORD *)&v1145[0] + 1) = ((unint64_t)(unsigned __int16)v322 << 48) | 0x19C840;
        v331 = *(unsigned __int16 *)(a2 + 1946);
        if ((_DWORD)v331 == 0xFFFF)
        {
          v331 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1946) = v331;
          *(_WORD *)(a2 + 2004) = v331 + 1;
        }
        *(_QWORD *)&v1145[1] = (v331 << 48) | 0x19C840;
        if ((_DWORD)v322 == 0xFFFF)
        {
          v322 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1922) = v322;
          *(_WORD *)(a2 + 2004) = v322 + 1;
        }
      }
      else
      {
        memset((char *)&v1145[1] + 8, 0, 48);
        v321 = *(_DWORD *)(a2 + 16);
        *(_DWORD *)(a2 + 16) = 2;
        v1144 = (8 * (v321 & 7)) | 0x100000E02;
        v322 = *(unsigned __int16 *)(a2 + 1922);
        if ((_DWORD)v322 == 0xFFFF)
        {
          v322 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1922) = v322;
          *(_WORD *)(a2 + 2004) = v322 + 1;
        }
        *((_QWORD *)&v1145[0] + 1) = (v322 << 48) | 0x19C840;
        v323 = *(unsigned __int16 *)(a2 + 1628);
        if ((_DWORD)v323 == 0xFFFF)
        {
          v324 = *(__int16 *)(a2 + 1998);
          v323 = *(unsigned __int16 *)(a2 + 1998);
          *(_WORD *)(a2 + 1628) = v324;
          *(_WORD *)(a2 + 4 * v324 + 262) = 342;
          *(_WORD *)(a2 + 1998) = v324 + 1;
          v322 = *(unsigned __int16 *)(a2 + 1922);
        }
        *(_QWORD *)&v1145[1] = (v323 << 48) | 0x80;
        if ((_DWORD)v322 == 0xFFFF)
        {
          v322 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1922) = v322;
          *(_WORD *)(a2 + 2004) = v322 + 1;
        }
      }
      *(_QWORD *)&v1145[0] = (v322 << 48) | 0x72679000;
      (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
      memset(v1145, 0, 72);
      v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000F83;
      *(_DWORD *)(a2 + 16) = 3;
      v332 = *(unsigned __int16 *)(a2 + 1920);
      if (v332 == 0xFFFF)
      {
        v334 = *(unsigned __int16 *)(a2 + 2004);
        v335 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1920) = v334;
        *(_WORD *)(a2 + 2004) = ++v335;
        *((_QWORD *)&v1145[0] + 1) = (((unint64_t)(unsigned __int16)v334 << 48) | 0x19C840) + 16;
        if ((v335 & 0x10000) != 0)
        {
          v334 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1920) = v334;
          *(_WORD *)(a2 + 2004) = v334 + 1;
        }
        v333 = v334 << 48;
      }
      else
      {
        v333 = v332 << 48;
        *((_QWORD *)&v1145[0] + 1) = (((unint64_t)(unsigned __int16)v332 << 48) | 0x19C840) + 16;
      }
      *(_QWORD *)&v1145[1] = v333 | 0x19C840;
      v336 = *(unsigned __int16 *)(a2 + 1664);
      if ((_DWORD)v336 == 0xFFFF)
      {
        v337 = *(__int16 *)(a2 + 1998);
        v336 = *(unsigned __int16 *)(a2 + 1998);
        *(_WORD *)(a2 + 1664) = v337;
        *(_WORD *)(a2 + 4 * v337 + 262) = 351;
        *(_WORD *)(a2 + 1998) = v337 + 1;
      }
      *((_QWORD *)&v1145[1] + 1) = (v336 << 48) | 0xAA80;
      v338 = *(unsigned __int16 *)(a2 + 1916);
      if ((_DWORD)v338 == 0xFFFF)
      {
        v338 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1916) = v338;
        *(_WORD *)(a2 + 2004) = v338 + 1;
      }
      *(_QWORD *)&v1145[0] = (v338 << 48) | 0x72679000;
      (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
      if ((*a1 & 0x1000000000000) != 0)
      {
        memset(v1145, 0, 72);
        v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000F83;
        *(_DWORD *)(a2 + 16) = 3;
        v339 = *(unsigned __int16 *)(a2 + 1920);
        if (v339 == 0xFFFF)
        {
          v341 = *(unsigned __int16 *)(a2 + 2004);
          LODWORD(v339) = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1920) = v341;
          *(_WORD *)(a2 + 2004) = v339 + 1;
          *((_QWORD *)&v1145[0] + 1) = ((unint64_t)(unsigned __int16)v341 << 48) | 0x19C840;
          if ((((_DWORD)v339 + 1) & 0x10000) != 0)
          {
            v341 = *(unsigned __int16 *)(a2 + 2004);
            LODWORD(v339) = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1920) = v341;
            *(_WORD *)(a2 + 2004) = v341 + 1;
          }
          v340 = v341 << 48;
        }
        else
        {
          v340 = v339 << 48;
          *((_QWORD *)&v1145[0] + 1) = ((unint64_t)(unsigned __int16)v339 << 48) | 0x19C840;
        }
        *(_QWORD *)&v1145[1] = v340 | 0x19C850;
        v342 = *(unsigned __int16 *)(a2 + 1664);
        if ((_DWORD)v342 == 0xFFFF)
        {
          v343 = *(__int16 *)(a2 + 1998);
          v342 = *(unsigned __int16 *)(a2 + 1998);
          *(_WORD *)(a2 + 1664) = v343;
          *(_WORD *)(a2 + 4 * v343 + 262) = 351;
          *(_WORD *)(a2 + 1998) = v343 + 1;
        }
        *((_QWORD *)&v1145[1] + 1) = (v342 << 48) | 0xAA80;
        if ((_DWORD)v339 == 0xFFFF)
        {
          v344 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1920) = v344;
          *(_WORD *)(a2 + 2004) = v344 + 1;
          v340 = v344 << 48;
        }
        *(_QWORD *)&v1145[0] = v340 | 0x72679000;
        (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
      }
      v345 = v1142;
      if ((v1124 & 6) == 6)
      {
        if ((_DWORD)v1142)
        {
          for (j = 0; j < v1142; ++j)
          {
            v347 = *(_DWORD *)&v1140[4 * j];
            memset((char *)&v1145[1] + 8, 0, 48);
            v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
            *(_DWORD *)(a2 + 16) = 2;
            v348 = v347 + 272;
            v349 = a2 + 4 * (v347 + 272);
            v350 = *(unsigned __int16 *)(v349 + 260);
            if ((_DWORD)v350 == 0xFFFF)
            {
              v351 = *(__int16 *)(a2 + 1998);
              v350 = *(unsigned __int16 *)(a2 + 1998);
              *(_WORD *)(v349 + 260) = v351;
              *(_WORD *)(a2 + 4 * v351 + 262) = v348;
              v75 = (v348 & 0xFFFFFFF0) == 144;
              v352 = v351 + 11;
              if (!v75)
                v352 = v351 + 1;
              *(_WORD *)(a2 + 1998) = v352;
            }
            *((_QWORD *)&v1145[0] + 1) = ((v350 << 48) | 0x19C840) + 64;
            *(_QWORD *)&v1145[1] = (gleVStateProgram_GetAttrib(a2, 2) << 48) | 0x19C800;
            v353 = a2 + 2 * j;
            v354 = *(unsigned __int16 *)(v353 + 1946);
            if ((_DWORD)v354 == 0xFFFF)
            {
              v354 = (unsigned __int16)*v1138;
              *(_WORD *)(v353 + 1946) = v354;
              *v1138 = v354 + 1;
            }
            *(_QWORD *)&v1145[0] = (v354 << 48) | 0x72679000;
            (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
          }
          for (k = 0; k < v1142; ++k)
          {
            v356 = *(_DWORD *)&v1140[4 * k];
            memset((char *)&v1145[1] + 8, 0, 48);
            v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
            *(_DWORD *)(a2 + 16) = 2;
            v357 = v356 + 280;
            v358 = a2 + 4 * (v356 + 280);
            v359 = *(unsigned __int16 *)(v358 + 260);
            if ((_DWORD)v359 == 0xFFFF)
            {
              v360 = *(__int16 *)(a2 + 1998);
              v359 = *(unsigned __int16 *)(a2 + 1998);
              *(_WORD *)(v358 + 260) = v360;
              *(_WORD *)(a2 + 4 * v360 + 262) = v357;
              v75 = (v357 & 0xFFFFFFF0) == 144;
              v361 = v360 + 11;
              if (!v75)
                v361 = v360 + 1;
              *(_WORD *)(a2 + 1998) = v361;
            }
            *((_QWORD *)&v1145[0] + 1) = ((v359 << 48) | 0x19C840) + 64;
            *(_QWORD *)&v1145[1] = (gleVStateProgram_GetAttrib(a2, 2) << 48) | 0x19C800;
            v362 = a2 + 2 * k;
            v363 = *(unsigned __int16 *)(v362 + 1962);
            if ((_DWORD)v363 == 0xFFFF)
            {
              v363 = (unsigned __int16)*v1138;
              *(_WORD *)(v362 + 1962) = v363;
              *v1138 = v363 + 1;
            }
            *(_QWORD *)&v1145[0] = (v363 << 48) | 0x72679000;
            (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
          }
          v364 = 0;
          v365 = 0;
          v366 = 0;
          v367 = 0;
          v368 = 0;
          do
          {
            memset(v1145, 0, 72);
            v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
            *(_DWORD *)(a2 + 16) = 3;
            v369 = *(unsigned __int16 *)(a2 + 1916);
            if ((_DWORD)v369 == 0xFFFF)
            {
              v369 = *(unsigned __int16 *)(a2 + 2004);
              *(_WORD *)(a2 + 1916) = v369;
              *(_WORD *)(a2 + 2004) = v369 + 1;
            }
            *((_QWORD *)&v1145[0] + 1) = v364 | (v369 << 48) | v365 | v366 | v367 | 0x40;
            v370 = a2 + 2 * v368;
            v371 = *(unsigned __int16 *)(v370 + 1962);
            if ((_DWORD)v371 == 0xFFFF)
            {
              v371 = (unsigned __int16)*v1138;
              *(_WORD *)(v370 + 1962) = v371;
              *v1138 = v371 + 1;
            }
            *(_QWORD *)&v1145[1] = (v371 << 48) | 0x19C840;
            v372 = *(unsigned __int16 *)(v370 + 1946);
            if (v372 == 0xFFFF)
            {
              v373 = (unsigned __int16)*v1138;
              *(_WORD *)(v370 + 1946) = v373;
              *v1138 = v373 + 1;
              v372 = *(unsigned __int16 *)(v370 + 1946);
              *((_QWORD *)&v1145[1] + 1) = (v373 << 48) | 0x19C840;
              if ((_DWORD)v372 == 0xFFFF)
              {
                v372 = (unsigned __int16)*v1138;
                *(_WORD *)(v370 + 1946) = v372;
                *v1138 = v372 + 1;
              }
            }
            else
            {
              *((_QWORD *)&v1145[1] + 1) = (v372 << 48) | 0x19C840;
            }
            *(_QWORD *)&v1145[0] = (v372 << 48) | 0x72679000;
            (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
            ++v368;
            v367 += 0x8000;
            v366 += 0x2000;
            v365 += 2048;
            v364 += 512;
            v345 = v1142;
          }
          while (v368 < v1142);
        }
      }
      else if ((v1124 & 2) != 0)
      {
        if ((_DWORD)v1142)
        {
          for (m = 0; m < v1142; ++m)
          {
            v395 = *(_DWORD *)&v1140[4 * m];
            memset((char *)&v1145[1] + 8, 0, 48);
            v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
            *(_DWORD *)(a2 + 16) = 2;
            v396 = v395 + 272;
            v397 = a2 + 4 * (v395 + 272);
            v398 = *(unsigned __int16 *)(v397 + 260);
            if ((_DWORD)v398 == 0xFFFF)
            {
              v399 = *(__int16 *)(a2 + 1998);
              v398 = *(unsigned __int16 *)(a2 + 1998);
              *(_WORD *)(v397 + 260) = v399;
              *(_WORD *)(a2 + 4 * v399 + 262) = v396;
              v75 = (v396 & 0xFFFFFFF0) == 144;
              v400 = v399 + 11;
              if (!v75)
                v400 = v399 + 1;
              *(_WORD *)(a2 + 1998) = v400;
            }
            *((_QWORD *)&v1145[0] + 1) = ((v398 << 48) | 0x19C840) + 64;
            *(_QWORD *)&v1145[1] = (gleVStateProgram_GetAttrib(a2, 2) << 48) | 0x19C800;
            v401 = a2 + 2 * m;
            v402 = *(unsigned __int16 *)(v401 + 1946);
            if ((_DWORD)v402 == 0xFFFF)
            {
              v402 = (unsigned __int16)*v1138;
              *(_WORD *)(v401 + 1946) = v402;
              *v1138 = v402 + 1;
            }
            *(_QWORD *)&v1145[0] = (v402 << 48) | 0x72679000;
            (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
          }
          v403 = 0;
          v404 = 0;
          v405 = 0;
          v406 = 0;
          v407 = 0;
          do
          {
            v408 = *(_DWORD *)&v1140[4 * v407];
            memset(v1145, 0, 72);
            v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
            *(_DWORD *)(a2 + 16) = 3;
            v409 = *(unsigned __int16 *)(a2 + 1916);
            if ((_DWORD)v409 == 0xFFFF)
            {
              v409 = *(unsigned __int16 *)(a2 + 2004);
              *(_WORD *)(a2 + 1916) = v409;
              *(_WORD *)(a2 + 2004) = v409 + 1;
            }
            *((_QWORD *)&v1145[0] + 1) = v403 | (v409 << 48) | v404 | v405 | v406 | 0x40;
            v410 = 2 * v408 + 240;
            v411 = a2 + 4 * v410;
            v412 = *(unsigned __int16 *)(v411 + 260);
            if ((_DWORD)v412 == 0xFFFF)
            {
              v413 = *(__int16 *)(a2 + 1998);
              v412 = *(unsigned __int16 *)(a2 + 1998);
              *(_WORD *)(v411 + 260) = v413;
              *(_WORD *)(a2 + 4 * v413 + 262) = v410;
              v75 = (v410 & 0xFFFFFFF0) == 144;
              v414 = v413 + 11;
              if (!v75)
                v414 = v413 + 1;
              *(_WORD *)(a2 + 1998) = v414;
            }
            *(_QWORD *)&v1145[1] = ((v412 << 48) | 0x19C840) + 64;
            v415 = a2 + 2 * v407;
            v416 = *(unsigned __int16 *)(v415 + 1946);
            if (v416 == 0xFFFF)
            {
              v417 = (unsigned __int16)*v1138;
              *(_WORD *)(v415 + 1946) = v417;
              *v1138 = v417 + 1;
              v416 = *(unsigned __int16 *)(v415 + 1946);
              *((_QWORD *)&v1145[1] + 1) = (v417 << 48) | 0x19C840;
              if ((_DWORD)v416 == 0xFFFF)
              {
                v416 = (unsigned __int16)*v1138;
                *(_WORD *)(v415 + 1946) = v416;
                *v1138 = v416 + 1;
              }
            }
            else
            {
              *((_QWORD *)&v1145[1] + 1) = (v416 << 48) | 0x19C840;
            }
            *(_QWORD *)&v1145[0] = (v416 << 48) | 0x72679000;
            (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
            ++v407;
            v406 += 0x8000;
            v405 += 0x2000;
            v404 += 2048;
            v403 += 512;
            v345 = v1142;
          }
          while (v407 < v1142);
        }
      }
      else if ((v1124 & 4) != 0)
      {
        if ((_DWORD)v1142)
        {
          for (n = 0; n < v1142; ++n)
          {
            v419 = *(_DWORD *)&v1140[4 * n];
            memset((char *)&v1145[1] + 8, 0, 48);
            v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
            *(_DWORD *)(a2 + 16) = 2;
            v420 = v419 + 280;
            v421 = a2 + 4 * (v419 + 280);
            v422 = *(unsigned __int16 *)(v421 + 260);
            if ((_DWORD)v422 == 0xFFFF)
            {
              v423 = *(__int16 *)(a2 + 1998);
              v422 = *(unsigned __int16 *)(a2 + 1998);
              *(_WORD *)(v421 + 260) = v423;
              *(_WORD *)(a2 + 4 * v423 + 262) = v420;
              v75 = (v420 & 0xFFFFFFF0) == 144;
              v424 = v423 + 11;
              if (!v75)
                v424 = v423 + 1;
              *(_WORD *)(a2 + 1998) = v424;
            }
            *((_QWORD *)&v1145[0] + 1) = ((v422 << 48) | 0x19C840) + 64;
            *(_QWORD *)&v1145[1] = (gleVStateProgram_GetAttrib(a2, 2) << 48) | 0x19C800;
            v425 = a2 + 2 * n;
            v426 = *(unsigned __int16 *)(v425 + 1962);
            if ((_DWORD)v426 == 0xFFFF)
            {
              v426 = (unsigned __int16)*v1138;
              *(_WORD *)(v425 + 1962) = v426;
              *v1138 = v426 + 1;
            }
            *(_QWORD *)&v1145[0] = (v426 << 48) | 0x72679000;
            (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
          }
          v427 = 0;
          v428 = 0;
          v429 = 0;
          v430 = 0;
          v431 = 0;
          do
          {
            v432 = *(_DWORD *)&v1140[4 * v431];
            memset(v1145, 0, 72);
            v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
            *(_DWORD *)(a2 + 16) = 3;
            v433 = *(unsigned __int16 *)(a2 + 1916);
            if ((_DWORD)v433 == 0xFFFF)
            {
              v433 = *(unsigned __int16 *)(a2 + 2004);
              *(_WORD *)(a2 + 1916) = v433;
              *(_WORD *)(a2 + 2004) = v433 + 1;
            }
            *((_QWORD *)&v1145[0] + 1) = v427 | (v433 << 48) | v428 | v429 | v430 | 0x40;
            v434 = a2 + 2 * v431;
            v435 = *(unsigned __int16 *)(v434 + 1962);
            if ((_DWORD)v435 == 0xFFFF)
            {
              v435 = (unsigned __int16)*v1138;
              *(_WORD *)(v434 + 1962) = v435;
              *v1138 = v435 + 1;
            }
            *(_QWORD *)&v1145[1] = (v435 << 48) | 0x19C840;
            v436 = 2 * v432 + 224;
            v437 = a2 + 4 * v436;
            v438 = *(unsigned __int16 *)(v437 + 260);
            if ((_DWORD)v438 == 0xFFFF)
            {
              v439 = *(__int16 *)(a2 + 1998);
              v438 = *(unsigned __int16 *)(a2 + 1998);
              *(_WORD *)(v437 + 260) = v439;
              *(_WORD *)(a2 + 4 * v439 + 262) = v436;
              v75 = (v436 & 0xFFFFFFF0) == 144;
              v440 = v439 + 11;
              if (!v75)
                v440 = v439 + 1;
              *(_WORD *)(a2 + 1998) = v440;
            }
            *((_QWORD *)&v1145[1] + 1) = ((v438 << 48) | 0x19C840) + 64;
            v441 = a2 + 2 * v431;
            v442 = *(unsigned __int16 *)(v441 + 1946);
            if ((_DWORD)v442 == 0xFFFF)
            {
              v442 = (unsigned __int16)*v1138;
              *(_WORD *)(v441 + 1946) = v442;
              *v1138 = v442 + 1;
            }
            *(_QWORD *)&v1145[0] = (v442 << 48) | 0x72679000;
            (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
            ++v431;
            v430 += 0x8000;
            v429 += 0x2000;
            v428 += 2048;
            v427 += 512;
            v345 = v1142;
          }
          while (v431 < v1142);
        }
      }
      else if ((_DWORD)v1142)
      {
        v374 = 0;
        v375 = 0;
        v376 = 0;
        v377 = 0;
        v378 = 0;
        do
        {
          v379 = *(_DWORD *)&v1140[4 * v378];
          memset(v1145, 0, 72);
          v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
          *(_DWORD *)(a2 + 16) = 3;
          v380 = *(unsigned __int16 *)(a2 + 1916);
          if ((_DWORD)v380 == 0xFFFF)
          {
            v380 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1916) = v380;
            *(_WORD *)(a2 + 2004) = v380 + 1;
          }
          *((_QWORD *)&v1145[0] + 1) = v374 | (v380 << 48) | v375 | v376 | v377 | 0x40;
          v381 = 2 * v379;
          v382 = v381 + 240;
          v383 = a2 + 4 * (v381 + 240);
          v384 = *(unsigned __int16 *)(v383 + 260);
          if ((_DWORD)v384 == 0xFFFF)
          {
            v385 = *(__int16 *)(a2 + 1998);
            v384 = *(unsigned __int16 *)(a2 + 1998);
            *(_WORD *)(v383 + 260) = v385;
            *(_WORD *)(a2 + 4 * v385 + 262) = v382;
            v75 = (v382 & 0xFFFFFFF0) == 144;
            v386 = v385 + 11;
            if (!v75)
              v386 = v385 + 1;
            *(_WORD *)(a2 + 1998) = v386;
          }
          *(_QWORD *)&v1145[1] = ((v384 << 48) | 0x19C840) + 64;
          v387 = v381 + 224;
          v388 = a2 + 4 * (v381 + 224);
          v389 = *(unsigned __int16 *)(v388 + 260);
          if ((_DWORD)v389 == 0xFFFF)
          {
            v390 = *(__int16 *)(a2 + 1998);
            v389 = *(unsigned __int16 *)(a2 + 1998);
            *(_WORD *)(v388 + 260) = v390;
            *(_WORD *)(a2 + 4 * v390 + 262) = v387;
            v75 = (v387 & 0xFFFFFFF0) == 144;
            v391 = v390 + 11;
            if (!v75)
              v391 = v390 + 1;
            *(_WORD *)(a2 + 1998) = v391;
          }
          *((_QWORD *)&v1145[1] + 1) = ((v389 << 48) | 0x19C840) + 64;
          v392 = a2 + 2 * v378;
          v393 = *(unsigned __int16 *)(v392 + 1946);
          if ((_DWORD)v393 == 0xFFFF)
          {
            v393 = (unsigned __int16)*v1138;
            *(_WORD *)(v392 + 1946) = v393;
            *v1138 = v393 + 1;
          }
          *(_QWORD *)&v1145[0] = (v393 << 48) | 0x72679000;
          (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
          ++v378;
          v377 += 0x8000;
          v376 += 0x2000;
          v375 += 2048;
          v374 += 512;
          v345 = v1142;
        }
        while (v378 < v1142);
      }
      if ((*a1 & 0x1000000000000) != 0)
      {
        if ((v1121 & 6) == 6)
        {
          if (v345)
          {
            v443 = 0;
            do
            {
              v444 = *(_DWORD *)&v1140[4 * v443];
              memset((char *)&v1145[1] + 8, 0, 48);
              v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
              *(_DWORD *)(a2 + 16) = 2;
              v445 = v444 + 272;
              v446 = a2 + 4 * (v444 + 272);
              v447 = *(unsigned __int16 *)(v446 + 260);
              if ((_DWORD)v447 == 0xFFFF)
              {
                v448 = *(__int16 *)(a2 + 1998);
                v447 = *(unsigned __int16 *)(a2 + 1998);
                *(_WORD *)(v446 + 260) = v448;
                *(_WORD *)(a2 + 4 * v448 + 262) = v445;
                v75 = (v445 & 0xFFFFFFF0) == 144;
                v449 = v448 + 11;
                if (!v75)
                  v449 = v448 + 1;
                *(_WORD *)(a2 + 1998) = v449;
              }
              *((_QWORD *)&v1145[0] + 1) = ((v447 << 48) | 0x19C840) + 64;
              *(_QWORD *)&v1145[1] = (gleVStateProgram_GetAttrib(a2, 2) << 48) | 0x19C800;
              v450 = a2 + 2 * v443;
              v451 = *(unsigned __int16 *)(v450 + 1954);
              if ((_DWORD)v451 == 0xFFFF)
              {
                v451 = (unsigned __int16)*v1138;
                *(_WORD *)(v450 + 1954) = v451;
                *v1138 = v451 + 1;
              }
              *(_QWORD *)&v1145[0] = (v451 << 48) | 0x72679000;
              (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
              ++v443;
            }
            while (v443 < v1142);
            v452 = 0;
            do
            {
              v453 = *(_DWORD *)&v1140[4 * v452];
              memset((char *)&v1145[1] + 8, 0, 48);
              v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
              *(_DWORD *)(a2 + 16) = 2;
              v454 = v453 + 280;
              v455 = a2 + 4 * (v453 + 280);
              v456 = *(unsigned __int16 *)(v455 + 260);
              if ((_DWORD)v456 == 0xFFFF)
              {
                v457 = *(__int16 *)(a2 + 1998);
                v456 = *(unsigned __int16 *)(a2 + 1998);
                *(_WORD *)(v455 + 260) = v457;
                *(_WORD *)(a2 + 4 * v457 + 262) = v454;
                v75 = (v454 & 0xFFFFFFF0) == 144;
                v458 = v457 + 11;
                if (!v75)
                  v458 = v457 + 1;
                *(_WORD *)(a2 + 1998) = v458;
              }
              *((_QWORD *)&v1145[0] + 1) = ((v456 << 48) | 0x19C840) + 64;
              *(_QWORD *)&v1145[1] = (gleVStateProgram_GetAttrib(a2, 2) << 48) | 0x19C800;
              v459 = a2 + 2 * v452;
              v460 = *(unsigned __int16 *)(v459 + 1970);
              if ((_DWORD)v460 == 0xFFFF)
              {
                v460 = (unsigned __int16)*v1138;
                *(_WORD *)(v459 + 1970) = v460;
                *v1138 = v460 + 1;
              }
              *(_QWORD *)&v1145[0] = (v460 << 48) | 0x72679000;
              (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
              ++v452;
            }
            while (v452 < v1142);
            v461 = 0;
            v462 = 0;
            v463 = 0;
            v464 = 0;
            v465 = 0;
            do
            {
              memset(v1145, 0, 72);
              v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
              *(_DWORD *)(a2 + 16) = 3;
              v466 = *(unsigned __int16 *)(a2 + 1920);
              if ((_DWORD)v466 == 0xFFFF)
              {
                v466 = *(unsigned __int16 *)(a2 + 2004);
                *(_WORD *)(a2 + 1920) = v466;
                *(_WORD *)(a2 + 2004) = v466 + 1;
              }
              *((_QWORD *)&v1145[0] + 1) = v461 | (v466 << 48) | v462 | v463 | v464 | 0x40;
              v467 = a2 + 2 * v465;
              v468 = *(unsigned __int16 *)(v467 + 1970);
              if ((_DWORD)v468 == 0xFFFF)
              {
                v468 = (unsigned __int16)*v1138;
                *(_WORD *)(v467 + 1970) = v468;
                *v1138 = v468 + 1;
              }
              *(_QWORD *)&v1145[1] = (v468 << 48) | 0x19C840;
              v469 = *(unsigned __int16 *)(v467 + 1954);
              if (v469 == 0xFFFF)
              {
                v470 = (unsigned __int16)*v1138;
                *(_WORD *)(v467 + 1954) = v470;
                *v1138 = v470 + 1;
                v469 = *(unsigned __int16 *)(v467 + 1954);
                *((_QWORD *)&v1145[1] + 1) = (v470 << 48) | 0x19C840;
                if ((_DWORD)v469 == 0xFFFF)
                {
                  v469 = (unsigned __int16)*v1138;
                  *(_WORD *)(v467 + 1954) = v469;
                  *v1138 = v469 + 1;
                }
              }
              else
              {
                *((_QWORD *)&v1145[1] + 1) = (v469 << 48) | 0x19C840;
              }
              *(_QWORD *)&v1145[0] = (v469 << 48) | 0x72679000;
              (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
              ++v465;
              v464 += 0x8000;
              v463 += 0x2000;
              v462 += 2048;
              v461 += 512;
            }
            while (v465 < v1142);
          }
        }
        else if ((v1121 & 2) != 0)
        {
          if (v345)
          {
            v491 = 0;
            do
            {
              v492 = *(_DWORD *)&v1140[4 * v491];
              memset((char *)&v1145[1] + 8, 0, 48);
              v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
              *(_DWORD *)(a2 + 16) = 2;
              v493 = v492 + 272;
              v494 = a2 + 4 * (v492 + 272);
              v495 = *(unsigned __int16 *)(v494 + 260);
              if ((_DWORD)v495 == 0xFFFF)
              {
                v496 = *(__int16 *)(a2 + 1998);
                v495 = *(unsigned __int16 *)(a2 + 1998);
                *(_WORD *)(v494 + 260) = v496;
                *(_WORD *)(a2 + 4 * v496 + 262) = v493;
                v75 = (v493 & 0xFFFFFFF0) == 144;
                v497 = v496 + 11;
                if (!v75)
                  v497 = v496 + 1;
                *(_WORD *)(a2 + 1998) = v497;
              }
              *((_QWORD *)&v1145[0] + 1) = ((v495 << 48) | 0x19C840) + 64;
              *(_QWORD *)&v1145[1] = (gleVStateProgram_GetAttrib(a2, 2) << 48) | 0x19C800;
              v498 = a2 + 2 * v491;
              v499 = *(unsigned __int16 *)(v498 + 1954);
              if ((_DWORD)v499 == 0xFFFF)
              {
                v499 = (unsigned __int16)*v1138;
                *(_WORD *)(v498 + 1954) = v499;
                *v1138 = v499 + 1;
              }
              *(_QWORD *)&v1145[0] = (v499 << 48) | 0x72679000;
              (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
              ++v491;
            }
            while (v491 < v1142);
            v500 = 0;
            v501 = 0;
            v502 = 0;
            v503 = 0;
            v504 = 0;
            do
            {
              v505 = *(_DWORD *)&v1140[4 * v504];
              memset(v1145, 0, 72);
              v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
              *(_DWORD *)(a2 + 16) = 3;
              v506 = *(unsigned __int16 *)(a2 + 1920);
              if ((_DWORD)v506 == 0xFFFF)
              {
                v506 = *(unsigned __int16 *)(a2 + 2004);
                *(_WORD *)(a2 + 1920) = v506;
                *(_WORD *)(a2 + 2004) = v506 + 1;
              }
              *((_QWORD *)&v1145[0] + 1) = v500 | (v506 << 48) | v501 | v502 | v503 | 0x40;
              v507 = 2 * v505 + 241;
              v508 = a2 + 4 * v507;
              v509 = *(unsigned __int16 *)(v508 + 260);
              if ((_DWORD)v509 == 0xFFFF)
              {
                v510 = *(__int16 *)(a2 + 1998);
                v509 = *(unsigned __int16 *)(a2 + 1998);
                *(_WORD *)(v508 + 260) = v510;
                *(_WORD *)(a2 + 4 * v510 + 262) = v507;
                v75 = (v507 & 0xFFFFFFF0) == 144;
                v511 = v510 + 11;
                if (!v75)
                  v511 = v510 + 1;
                *(_WORD *)(a2 + 1998) = v511;
              }
              *(_QWORD *)&v1145[1] = ((v509 << 48) | 0x19C840) + 64;
              v512 = a2 + 2 * v504;
              v513 = *(unsigned __int16 *)(v512 + 1954);
              if (v513 == 0xFFFF)
              {
                v514 = (unsigned __int16)*v1138;
                *(_WORD *)(v512 + 1954) = v514;
                *v1138 = v514 + 1;
                v513 = *(unsigned __int16 *)(v512 + 1954);
                *((_QWORD *)&v1145[1] + 1) = (v514 << 48) | 0x19C840;
                if ((_DWORD)v513 == 0xFFFF)
                {
                  v513 = (unsigned __int16)*v1138;
                  *(_WORD *)(v512 + 1954) = v513;
                  *v1138 = v513 + 1;
                }
              }
              else
              {
                *((_QWORD *)&v1145[1] + 1) = (v513 << 48) | 0x19C840;
              }
              *(_QWORD *)&v1145[0] = (v513 << 48) | 0x72679000;
              (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
              ++v504;
              v503 += 0x8000;
              v502 += 0x2000;
              v501 += 2048;
              v500 += 512;
            }
            while (v504 < v1142);
          }
        }
        else if ((v1121 & 4) != 0)
        {
          if (v345)
          {
            v515 = 0;
            do
            {
              v516 = *(_DWORD *)&v1140[4 * v515];
              memset((char *)&v1145[1] + 8, 0, 48);
              v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
              *(_DWORD *)(a2 + 16) = 2;
              v517 = v516 + 280;
              v518 = a2 + 4 * (v516 + 280);
              v519 = *(unsigned __int16 *)(v518 + 260);
              if ((_DWORD)v519 == 0xFFFF)
              {
                v520 = *(__int16 *)(a2 + 1998);
                v519 = *(unsigned __int16 *)(a2 + 1998);
                *(_WORD *)(v518 + 260) = v520;
                *(_WORD *)(a2 + 4 * v520 + 262) = v517;
                v75 = (v517 & 0xFFFFFFF0) == 144;
                v521 = v520 + 11;
                if (!v75)
                  v521 = v520 + 1;
                *(_WORD *)(a2 + 1998) = v521;
              }
              *((_QWORD *)&v1145[0] + 1) = ((v519 << 48) | 0x19C840) + 64;
              *(_QWORD *)&v1145[1] = (gleVStateProgram_GetAttrib(a2, 2) << 48) | 0x19C800;
              v522 = a2 + 2 * v515;
              v523 = *(unsigned __int16 *)(v522 + 1970);
              if ((_DWORD)v523 == 0xFFFF)
              {
                v523 = (unsigned __int16)*v1138;
                *(_WORD *)(v522 + 1970) = v523;
                *v1138 = v523 + 1;
              }
              *(_QWORD *)&v1145[0] = (v523 << 48) | 0x72679000;
              (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
              ++v515;
            }
            while (v515 < v1142);
            v524 = 0;
            v525 = 0;
            v526 = 0;
            v527 = 0;
            v528 = 0;
            do
            {
              v529 = *(_DWORD *)&v1140[4 * v528];
              memset(v1145, 0, 72);
              v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
              *(_DWORD *)(a2 + 16) = 3;
              v530 = *(unsigned __int16 *)(a2 + 1920);
              if ((_DWORD)v530 == 0xFFFF)
              {
                v530 = *(unsigned __int16 *)(a2 + 2004);
                *(_WORD *)(a2 + 1920) = v530;
                *(_WORD *)(a2 + 2004) = v530 + 1;
              }
              *((_QWORD *)&v1145[0] + 1) = v524 | (v530 << 48) | v525 | v526 | v527 | 0x40;
              v531 = a2 + 2 * v528;
              v532 = *(unsigned __int16 *)(v531 + 1970);
              if ((_DWORD)v532 == 0xFFFF)
              {
                v532 = (unsigned __int16)*v1138;
                *(_WORD *)(v531 + 1970) = v532;
                *v1138 = v532 + 1;
              }
              *(_QWORD *)&v1145[1] = (v532 << 48) | 0x19C840;
              v533 = 2 * v529 + 225;
              v534 = a2 + 4 * v533;
              v535 = *(unsigned __int16 *)(v534 + 260);
              if ((_DWORD)v535 == 0xFFFF)
              {
                v536 = *(__int16 *)(a2 + 1998);
                v535 = *(unsigned __int16 *)(a2 + 1998);
                *(_WORD *)(v534 + 260) = v536;
                *(_WORD *)(a2 + 4 * v536 + 262) = v533;
                v75 = (v533 & 0xFFFFFFF0) == 144;
                v537 = v536 + 11;
                if (!v75)
                  v537 = v536 + 1;
                *(_WORD *)(a2 + 1998) = v537;
              }
              *((_QWORD *)&v1145[1] + 1) = ((v535 << 48) | 0x19C840) + 64;
              v538 = a2 + 2 * v528;
              v539 = *(unsigned __int16 *)(v538 + 1954);
              if ((_DWORD)v539 == 0xFFFF)
              {
                v539 = (unsigned __int16)*v1138;
                *(_WORD *)(v538 + 1954) = v539;
                *v1138 = v539 + 1;
              }
              *(_QWORD *)&v1145[0] = (v539 << 48) | 0x72679000;
              (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
              ++v528;
              v527 += 0x8000;
              v526 += 0x2000;
              v525 += 2048;
              v524 += 512;
            }
            while (v528 < v1142);
          }
        }
        else if (v345)
        {
          v471 = 0;
          v472 = 0;
          v473 = 0;
          v474 = 0;
          v475 = 0;
          do
          {
            v476 = *(_DWORD *)&v1140[4 * v475];
            memset(v1145, 0, 72);
            v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
            *(_DWORD *)(a2 + 16) = 3;
            v477 = *(unsigned __int16 *)(a2 + 1920);
            if ((_DWORD)v477 == 0xFFFF)
            {
              v477 = *(unsigned __int16 *)(a2 + 2004);
              *(_WORD *)(a2 + 1920) = v477;
              *(_WORD *)(a2 + 2004) = v477 + 1;
            }
            *((_QWORD *)&v1145[0] + 1) = v471 | (v477 << 48) | v472 | v473 | v474 | 0x40;
            v478 = 2 * v476;
            v479 = v478 + 241;
            v480 = a2 + 4 * (v478 + 241);
            v481 = *(unsigned __int16 *)(v480 + 260);
            if ((_DWORD)v481 == 0xFFFF)
            {
              v482 = *(__int16 *)(a2 + 1998);
              v481 = *(unsigned __int16 *)(a2 + 1998);
              *(_WORD *)(v480 + 260) = v482;
              *(_WORD *)(a2 + 4 * v482 + 262) = v479;
              v75 = (v479 & 0xFFFFFFF0) == 144;
              v483 = v482 + 11;
              if (!v75)
                v483 = v482 + 1;
              *(_WORD *)(a2 + 1998) = v483;
            }
            *(_QWORD *)&v1145[1] = ((v481 << 48) | 0x19C840) + 64;
            v484 = v478 + 225;
            v485 = a2 + 4 * (v478 + 225);
            v486 = *(unsigned __int16 *)(v485 + 260);
            if ((_DWORD)v486 == 0xFFFF)
            {
              v487 = *(__int16 *)(a2 + 1998);
              v486 = *(unsigned __int16 *)(a2 + 1998);
              *(_WORD *)(v485 + 260) = v487;
              *(_WORD *)(a2 + 4 * v487 + 262) = v484;
              v75 = (v484 & 0xFFFFFFF0) == 144;
              v488 = v487 + 11;
              if (!v75)
                v488 = v487 + 1;
              *(_WORD *)(a2 + 1998) = v488;
            }
            *((_QWORD *)&v1145[1] + 1) = ((v486 << 48) | 0x19C840) + 64;
            v489 = a2 + 2 * v475;
            v490 = *(unsigned __int16 *)(v489 + 1954);
            if ((_DWORD)v490 == 0xFFFF)
            {
              v490 = (unsigned __int16)*v1138;
              *(_WORD *)(v489 + 1954) = v490;
              *v1138 = v490 + 1;
            }
            *(_QWORD *)&v1145[0] = (v490 << 48) | 0x72679000;
            (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
            ++v475;
            v474 += 0x8000;
            v473 += 0x2000;
            v472 += 2048;
            v471 += 512;
          }
          while (v475 < v1142);
        }
      }
      memset(v1145, 0, 72);
      v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000F83;
      *(_DWORD *)(a2 + 16) = 3;
      v540 = *(unsigned __int16 *)(a2 + 1916);
      if ((_DWORD)v540 == 0xFFFF)
      {
        v540 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1916) = v540;
        *(_WORD *)(a2 + 2004) = v540 + 1;
      }
      *((_QWORD *)&v1145[0] + 1) = ((v540 << 48) | 0x19C840) + 16;
      v541 = *(unsigned __int16 *)(a2 + 1922);
      if ((_DWORD)v541 == 0xFFFF)
      {
        v541 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1922) = v541;
        *(_WORD *)(a2 + 2004) = v541 + 1;
      }
      *(_QWORD *)&v1145[1] = (v541 << 48) | 0x19C840;
      v542 = *(unsigned __int16 *)(a2 + 1664);
      if ((_DWORD)v542 == 0xFFFF)
      {
        v543 = *(__int16 *)(a2 + 1998);
        v542 = *(unsigned __int16 *)(a2 + 1998);
        *(_WORD *)(a2 + 1664) = v543;
        *(_WORD *)(a2 + 4 * v543 + 262) = 351;
        *(_WORD *)(a2 + 1998) = v543 + 1;
      }
      *((_QWORD *)&v1145[1] + 1) = (v542 << 48) | 0xAA80;
      v544 = *(unsigned __int16 *)(a2 + 1918);
      if ((_DWORD)v544 == 0xFFFF)
      {
        v544 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1918) = v544;
        *(_WORD *)(a2 + 2004) = v544 + 1;
      }
      *(_QWORD *)&v1145[0] = (v544 << 48) | 0x72679000;
      (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
      v545 = *a1;
      if ((*a1 & 0x1000000000000) != 0)
      {
        memset(v1145, 0, 72);
        v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000F83;
        *(_DWORD *)(a2 + 16) = 3;
        v546 = *(unsigned __int16 *)(a2 + 1920);
        if ((_DWORD)v546 == 0xFFFF)
        {
          v546 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1920) = v546;
          *(_WORD *)(a2 + 2004) = v546 + 1;
        }
        *((_QWORD *)&v1145[0] + 1) = ((v546 << 48) | 0x19C840) + 16;
        v547 = *(unsigned __int16 *)(a2 + 1922);
        if ((_DWORD)v547 == 0xFFFF)
        {
          v547 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1922) = v547;
          *(_WORD *)(a2 + 2004) = v547 + 1;
        }
        *(_QWORD *)&v1145[1] = (v547 << 48) | 0x19C840;
        v548 = *(unsigned __int16 *)(a2 + 1664);
        if ((_DWORD)v548 == 0xFFFF)
        {
          v549 = *(__int16 *)(a2 + 1998);
          v548 = *(unsigned __int16 *)(a2 + 1998);
          *(_WORD *)(a2 + 1664) = v549;
          *(_WORD *)(a2 + 4 * v549 + 262) = 351;
          *(_WORD *)(a2 + 1998) = v549 + 1;
          v547 = *(unsigned __int16 *)(a2 + 1922);
        }
        *((_QWORD *)&v1145[1] + 1) = (v548 << 48) | 0xAA80;
        if ((_DWORD)v547 == 0xFFFF)
        {
          v547 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1922) = v547;
          *(_WORD *)(a2 + 2004) = v547 + 1;
        }
        *(_QWORD *)&v1145[0] = (v547 << 48) | 0x72679000;
        (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
        v545 = *a1;
      }
      v550 = v1142;
      if ((v545 & 0x8000000000000000) != 0)
      {
        if (v1124 >= 8)
        {
          if ((_DWORD)v1142)
          {
            for (ii = 0; ii < v1142; ++ii)
            {
              v600 = *(_DWORD *)&v1140[4 * ii];
              memset((char *)&v1145[1] + 8, 0, 48);
              v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
              *(_DWORD *)(a2 + 16) = 2;
              v601 = v600 + 288;
              v602 = a2 + 4 * (v600 + 288);
              v603 = *(unsigned __int16 *)(v602 + 260);
              if ((_DWORD)v603 == 0xFFFF)
              {
                v604 = *(__int16 *)(a2 + 1998);
                v603 = *(unsigned __int16 *)(a2 + 1998);
                *(_WORD *)(v602 + 260) = v604;
                *(_WORD *)(a2 + 4 * v604 + 262) = v601;
                v75 = (v601 & 0xFFFFFFF0) == 144;
                v605 = v604 + 11;
                if (!v75)
                  v605 = v604 + 1;
                *(_WORD *)(a2 + 1998) = v605;
              }
              *((_QWORD *)&v1145[0] + 1) = ((v603 << 48) | 0x19C840) + 64;
              *(_QWORD *)&v1145[1] = (gleVStateProgram_GetAttrib(a2, 2) << 48) | 0x19C800;
              v606 = a2 + 2 * ii;
              v607 = *(unsigned __int16 *)(v606 + 1962);
              if ((_DWORD)v607 == 0xFFFF)
              {
                v607 = (unsigned __int16)*v1138;
                *(_WORD *)(v606 + 1962) = v607;
                *v1138 = v607 + 1;
              }
              *(_QWORD *)&v1145[0] = (v607 << 48) | 0x72679000;
              (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
            }
            v608 = 0;
            v609 = 0;
            v610 = 0;
            v611 = 0;
            v612 = 981;
            do
            {
              memset(v1145, 0, 72);
              v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
              *(_DWORD *)(a2 + 16) = 2;
              v613 = *(unsigned __int16 *)(a2 + 1918);
              if ((_DWORD)v613 == 0xFFFF)
              {
                v613 = *(unsigned __int16 *)(a2 + 2004);
                *(_WORD *)(a2 + 1918) = v613;
                *(_WORD *)(a2 + 2004) = v613 + 1;
              }
              *((_QWORD *)&v1145[0] + 1) = v608 | (v613 << 48) | v609 | v610 | v611 | 0x40;
              v614 = *(unsigned __int16 *)(a2 + 2 * v612);
              if (v614 == 0xFFFF)
              {
                v615 = *(unsigned __int16 *)(a2 + 2004);
                *(_WORD *)(a2 + 2 * v612) = v615;
                *(_WORD *)(a2 + 2004) = v615 + 1;
                v614 = *(unsigned __int16 *)(a2 + 2 * v612);
                *(_QWORD *)&v1145[1] = (v615 << 48) | 0x19C840;
                if ((_DWORD)v614 == 0xFFFF)
                {
                  v614 = *(unsigned __int16 *)(a2 + 2004);
                  *(_WORD *)(a2 + 2 * v612) = v614;
                  *(_WORD *)(a2 + 2004) = v614 + 1;
                }
              }
              else
              {
                *(_QWORD *)&v1145[1] = (v614 << 48) | 0x19C840;
              }
              *(_QWORD *)&v1145[0] = (v614 << 48) | 0x72679000;
              (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
              v611 += 0x8000;
              v610 += 0x2000;
              v609 += 2048;
              v608 += 512;
              v616 = v612 - 980;
              ++v612;
              v550 = v1142;
            }
            while (v616 < v1142);
          }
        }
        else if ((_DWORD)v1142)
        {
          v566 = 0;
          v567 = 0;
          v568 = 0;
          v569 = 0;
          v570 = 0;
          do
          {
            v571 = *(_DWORD *)&v1140[4 * v570];
            memset((char *)&v1145[1] + 8, 0, 48);
            v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
            *(_DWORD *)(a2 + 16) = 2;
            v572 = *(unsigned __int16 *)(a2 + 1918);
            if ((_DWORD)v572 == 0xFFFF)
            {
              v572 = *(unsigned __int16 *)(a2 + 2004);
              *(_WORD *)(a2 + 1918) = v572;
              *(_WORD *)(a2 + 2004) = v572 + 1;
            }
            *((_QWORD *)&v1145[0] + 1) = v566 | (v572 << 48) | v567 | v568 | v569 | 0x40;
            v573 = 2 * v571 + 256;
            v574 = a2 + 4 * v573;
            v575 = *(unsigned __int16 *)(v574 + 260);
            if ((_DWORD)v575 == 0xFFFF)
            {
              v576 = *(__int16 *)(a2 + 1998);
              v575 = *(unsigned __int16 *)(a2 + 1998);
              *(_WORD *)(v574 + 260) = v576;
              *(_WORD *)(a2 + 4 * v576 + 262) = v573;
              v75 = (v573 & 0xFFFFFFF0) == 144;
              v577 = v576 + 11;
              if (!v75)
                v577 = v576 + 1;
              *(_WORD *)(a2 + 1998) = v577;
            }
            *(_QWORD *)&v1145[1] = ((v575 << 48) | 0x19C840) + 64;
            v578 = a2 + 2 * v570;
            v579 = *(unsigned __int16 *)(v578 + 1962);
            if ((_DWORD)v579 == 0xFFFF)
            {
              v579 = (unsigned __int16)*v1138;
              *(_WORD *)(v578 + 1962) = v579;
              *v1138 = v579 + 1;
            }
            *(_QWORD *)&v1145[0] = (v579 << 48) | 0x72679000;
            (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
            ++v570;
            v569 += 0x8000;
            v568 += 0x2000;
            v567 += 2048;
            v566 += 512;
            v550 = v1142;
          }
          while (v570 < v1142);
        }
      }
      else if (v1124 >= 8)
      {
        if ((_DWORD)v1142)
        {
          for (jj = 0; jj < v1142; ++jj)
          {
            v581 = *(_DWORD *)&v1140[4 * jj];
            memset((char *)&v1145[1] + 8, 0, 48);
            v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
            *(_DWORD *)(a2 + 16) = 2;
            v582 = v581 + 288;
            v583 = a2 + 4 * (v581 + 288);
            v584 = *(unsigned __int16 *)(v583 + 260);
            if ((_DWORD)v584 == 0xFFFF)
            {
              v585 = *(__int16 *)(a2 + 1998);
              v584 = *(unsigned __int16 *)(a2 + 1998);
              *(_WORD *)(v583 + 260) = v585;
              *(_WORD *)(a2 + 4 * v585 + 262) = v582;
              v75 = (v582 & 0xFFFFFFF0) == 144;
              v586 = v585 + 11;
              if (!v75)
                v586 = v585 + 1;
              *(_WORD *)(a2 + 1998) = v586;
            }
            *((_QWORD *)&v1145[0] + 1) = ((v584 << 48) | 0x19C840) + 64;
            *(_QWORD *)&v1145[1] = (gleVStateProgram_GetAttrib(a2, 2) << 48) | 0x19C800;
            v587 = a2 + 2 * jj;
            v588 = *(unsigned __int16 *)(v587 + 1962);
            if ((_DWORD)v588 == 0xFFFF)
            {
              v588 = (unsigned __int16)*v1138;
              *(_WORD *)(v587 + 1962) = v588;
              *v1138 = v588 + 1;
            }
            *(_QWORD *)&v1145[0] = (v588 << 48) | 0x72679000;
            (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
          }
          v589 = 0;
          v590 = 0;
          v591 = 0;
          v592 = 0;
          v593 = 0;
          do
          {
            memset(v1145, 0, 72);
            v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
            *(_DWORD *)(a2 + 16) = 3;
            v594 = *(unsigned __int16 *)(a2 + 1918);
            if ((_DWORD)v594 == 0xFFFF)
            {
              v594 = *(unsigned __int16 *)(a2 + 2004);
              *(_WORD *)(a2 + 1918) = v594;
              *(_WORD *)(a2 + 2004) = v594 + 1;
            }
            *((_QWORD *)&v1145[0] + 1) = v589 | (v594 << 48) | v590 | v591 | v592 | 0x40;
            v595 = a2 + 2 * v593;
            v596 = *(unsigned __int16 *)(v595 + 1962);
            if ((_DWORD)v596 == 0xFFFF)
            {
              v596 = (unsigned __int16)*v1138;
              *(_WORD *)(v595 + 1962) = v596;
              *v1138 = v596 + 1;
            }
            *(_QWORD *)&v1145[1] = (v596 << 48) | 0x19C840;
            v597 = *(unsigned __int16 *)(v595 + 1946);
            if (v597 == 0xFFFF)
            {
              v598 = (unsigned __int16)*v1138;
              *(_WORD *)(v595 + 1946) = v598;
              *v1138 = v598 + 1;
              v597 = *(unsigned __int16 *)(v595 + 1946);
              *((_QWORD *)&v1145[1] + 1) = (v598 << 48) | 0x19C840;
              if ((_DWORD)v597 == 0xFFFF)
              {
                v597 = (unsigned __int16)*v1138;
                *(_WORD *)(v595 + 1946) = v597;
                *v1138 = v597 + 1;
              }
            }
            else
            {
              *((_QWORD *)&v1145[1] + 1) = (v597 << 48) | 0x19C840;
            }
            *(_QWORD *)&v1145[0] = (v597 << 48) | 0x72679000;
            (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
            ++v593;
            v592 += 0x8000;
            v591 += 0x2000;
            v590 += 2048;
            v589 += 512;
            v550 = v1142;
          }
          while (v593 < v1142);
        }
      }
      else if ((_DWORD)v1142)
      {
        v551 = 0;
        v552 = 0;
        v553 = 0;
        v554 = 0;
        v555 = 0;
        do
        {
          v556 = *(_DWORD *)&v1140[4 * v555];
          memset(v1145, 0, 72);
          v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
          *(_DWORD *)(a2 + 16) = 3;
          v557 = *(unsigned __int16 *)(a2 + 1918);
          if ((_DWORD)v557 == 0xFFFF)
          {
            v557 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1918) = v557;
            *(_WORD *)(a2 + 2004) = v557 + 1;
          }
          *((_QWORD *)&v1145[0] + 1) = v551 | (v557 << 48) | v552 | v553 | v554 | 0x40;
          v558 = 2 * v556 + 256;
          v559 = a2 + 4 * v558;
          v560 = *(unsigned __int16 *)(v559 + 260);
          if ((_DWORD)v560 == 0xFFFF)
          {
            v561 = *(__int16 *)(a2 + 1998);
            v560 = *(unsigned __int16 *)(a2 + 1998);
            *(_WORD *)(v559 + 260) = v561;
            *(_WORD *)(a2 + 4 * v561 + 262) = v558;
            v75 = (v558 & 0xFFFFFFF0) == 144;
            v562 = v561 + 11;
            if (!v75)
              v562 = v561 + 1;
            *(_WORD *)(a2 + 1998) = v562;
          }
          *(_QWORD *)&v1145[1] = ((v560 << 48) | 0x19C840) + 64;
          v563 = a2 + 2 * v555;
          v564 = *(unsigned __int16 *)(v563 + 1946);
          if (v564 == 0xFFFF)
          {
            v565 = (unsigned __int16)*v1138;
            *(_WORD *)(v563 + 1946) = v565;
            *v1138 = v565 + 1;
            v564 = *(unsigned __int16 *)(v563 + 1946);
            *((_QWORD *)&v1145[1] + 1) = (v565 << 48) | 0x19C840;
            if ((_DWORD)v564 == 0xFFFF)
            {
              v564 = (unsigned __int16)*v1138;
              *(_WORD *)(v563 + 1946) = v564;
              *v1138 = v564 + 1;
            }
          }
          else
          {
            *((_QWORD *)&v1145[1] + 1) = (v564 << 48) | 0x19C840;
          }
          *(_QWORD *)&v1145[0] = (v564 << 48) | 0x72679000;
          (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
          ++v555;
          v554 += 0x8000;
          v553 += 0x2000;
          v552 += 2048;
          v551 += 512;
          v550 = v1142;
        }
        while (v555 < v1142);
      }
      if ((*a1 & 0x1000000000000) != 0)
      {
        if ((*a1 & 0x8000000000000000) != 0)
        {
          v59 = (_WORD *)(a2 + 2004);
          if (v1121 >= 8)
          {
            if (!(_DWORD)v550)
            {
LABEL_927:
              v1129 = 0;
              v617 = 0;
              goto LABEL_928;
            }
            v678 = 0;
            do
            {
              v679 = *(_DWORD *)&v1140[4 * v678];
              memset((char *)&v1145[1] + 8, 0, 48);
              v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
              *(_DWORD *)(a2 + 16) = 2;
              v680 = v679 + 288;
              v681 = a2 + 4 * (v679 + 288);
              v682 = *(unsigned __int16 *)(v681 + 260);
              if ((_DWORD)v682 == 0xFFFF)
              {
                v683 = *(__int16 *)(a2 + 1998);
                v682 = *(unsigned __int16 *)(a2 + 1998);
                *(_WORD *)(v681 + 260) = v683;
                *(_WORD *)(a2 + 4 * v683 + 262) = v680;
                v75 = (v680 & 0xFFFFFFF0) == 144;
                v684 = v683 + 11;
                if (!v75)
                  v684 = v683 + 1;
                *(_WORD *)(a2 + 1998) = v684;
              }
              *((_QWORD *)&v1145[0] + 1) = ((v682 << 48) | 0x19C840) + 64;
              *(_QWORD *)&v1145[1] = (gleVStateProgram_GetAttrib(a2, 2) << 48) | 0x19C800;
              v685 = a2 + 2 * v678;
              v686 = *(unsigned __int16 *)(v685 + 1970);
              if ((_DWORD)v686 == 0xFFFF)
              {
                v686 = (unsigned __int16)*v1138;
                *(_WORD *)(v685 + 1970) = v686;
                *v1138 = v686 + 1;
              }
              *(_QWORD *)&v1145[0] = (v686 << 48) | 0x72679000;
              (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
              ++v678;
            }
            while (v678 < v1142);
            v687 = 0;
            v688 = 0;
            v689 = 0;
            v690 = 0;
            v691 = 985;
            do
            {
              memset(v1145, 0, 72);
              v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
              *(_DWORD *)(a2 + 16) = 2;
              v692 = *(unsigned __int16 *)(a2 + 1922);
              if ((_DWORD)v692 == 0xFFFF)
              {
                v692 = *(unsigned __int16 *)(a2 + 2004);
                *(_WORD *)(a2 + 1922) = v692;
                *(_WORD *)(a2 + 2004) = v692 + 1;
              }
              *((_QWORD *)&v1145[0] + 1) = v687 | (v692 << 48) | v688 | v689 | v690 | 0x40;
              v693 = *(unsigned __int16 *)(a2 + 2 * v691);
              if (v693 == 0xFFFF)
              {
                v694 = *(unsigned __int16 *)(a2 + 2004);
                *(_WORD *)(a2 + 2 * v691) = v694;
                *(_WORD *)(a2 + 2004) = v694 + 1;
                v693 = *(unsigned __int16 *)(a2 + 2 * v691);
                *(_QWORD *)&v1145[1] = (v694 << 48) | 0x19C840;
                if ((_DWORD)v693 == 0xFFFF)
                {
                  v693 = *(unsigned __int16 *)(a2 + 2004);
                  *(_WORD *)(a2 + 2 * v691) = v693;
                  *(_WORD *)(a2 + 2004) = v693 + 1;
                }
              }
              else
              {
                *(_QWORD *)&v1145[1] = (v693 << 48) | 0x19C840;
              }
              *(_QWORD *)&v1145[0] = (v693 << 48) | 0x72679000;
              (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
              v690 += 0x8000;
              v689 += 0x2000;
              v688 += 2048;
              v687 += 512;
              v695 = v691 - 984;
              ++v691;
              v550 = v1142;
            }
            while (v695 < v1142);
          }
          else
          {
            if (!(_DWORD)v550)
              goto LABEL_927;
            v645 = 0;
            v646 = 0;
            v647 = 0;
            v648 = 0;
            v649 = 0;
            do
            {
              v650 = *(_DWORD *)&v1140[4 * v649];
              memset((char *)&v1145[1] + 8, 0, 48);
              v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
              *(_DWORD *)(a2 + 16) = 2;
              v651 = *(unsigned __int16 *)(a2 + 1922);
              if ((_DWORD)v651 == 0xFFFF)
              {
                v651 = *(unsigned __int16 *)(a2 + 2004);
                *(_WORD *)(a2 + 1922) = v651;
                *(_WORD *)(a2 + 2004) = v651 + 1;
              }
              *((_QWORD *)&v1145[0] + 1) = v645 | (v651 << 48) | v646 | v647 | v648 | 0x40;
              v652 = 2 * v650 + 257;
              v653 = a2 + 4 * v652;
              v654 = *(unsigned __int16 *)(v653 + 260);
              if ((_DWORD)v654 == 0xFFFF)
              {
                v655 = *(__int16 *)(a2 + 1998);
                v654 = *(unsigned __int16 *)(a2 + 1998);
                *(_WORD *)(v653 + 260) = v655;
                *(_WORD *)(a2 + 4 * v655 + 262) = v652;
                v75 = (v652 & 0xFFFFFFF0) == 144;
                v656 = v655 + 11;
                if (!v75)
                  v656 = v655 + 1;
                *(_WORD *)(a2 + 1998) = v656;
              }
              *(_QWORD *)&v1145[1] = ((v654 << 48) | 0x19C840) + 64;
              v657 = a2 + 2 * v649;
              v658 = *(unsigned __int16 *)(v657 + 1970);
              if ((_DWORD)v658 == 0xFFFF)
              {
                v658 = (unsigned __int16)*v1138;
                *(_WORD *)(v657 + 1970) = v658;
                *v1138 = v658 + 1;
              }
              *(_QWORD *)&v1145[0] = (v658 << 48) | 0x72679000;
              (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
              ++v649;
              v648 += 0x8000;
              v647 += 0x2000;
              v646 += 2048;
              v645 += 512;
              v550 = v1142;
            }
            while (v649 < v1142);
          }
        }
        else
        {
          v59 = (_WORD *)(a2 + 2004);
          if (v1121 >= 8)
          {
            if (!(_DWORD)v550)
              goto LABEL_927;
            v659 = 0;
            do
            {
              v660 = *(_DWORD *)&v1140[4 * v659];
              memset((char *)&v1145[1] + 8, 0, 48);
              v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
              *(_DWORD *)(a2 + 16) = 2;
              v661 = v660 + 288;
              v662 = a2 + 4 * (v660 + 288);
              v663 = *(unsigned __int16 *)(v662 + 260);
              if ((_DWORD)v663 == 0xFFFF)
              {
                v664 = *(__int16 *)(a2 + 1998);
                v663 = *(unsigned __int16 *)(a2 + 1998);
                *(_WORD *)(v662 + 260) = v664;
                *(_WORD *)(a2 + 4 * v664 + 262) = v661;
                v75 = (v661 & 0xFFFFFFF0) == 144;
                v665 = v664 + 11;
                if (!v75)
                  v665 = v664 + 1;
                *(_WORD *)(a2 + 1998) = v665;
              }
              *((_QWORD *)&v1145[0] + 1) = ((v663 << 48) | 0x19C840) + 64;
              *(_QWORD *)&v1145[1] = (gleVStateProgram_GetAttrib(a2, 2) << 48) | 0x19C800;
              v666 = a2 + 2 * v659;
              v667 = *(unsigned __int16 *)(v666 + 1970);
              if ((_DWORD)v667 == 0xFFFF)
              {
                v667 = (unsigned __int16)*v1138;
                *(_WORD *)(v666 + 1970) = v667;
                *v1138 = v667 + 1;
              }
              *(_QWORD *)&v1145[0] = (v667 << 48) | 0x72679000;
              (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
              ++v659;
            }
            while (v659 < v1142);
            v668 = 0;
            v669 = 0;
            v670 = 0;
            v671 = 0;
            v672 = 0;
            do
            {
              memset(v1145, 0, 72);
              v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
              *(_DWORD *)(a2 + 16) = 3;
              v673 = *(unsigned __int16 *)(a2 + 1922);
              if ((_DWORD)v673 == 0xFFFF)
              {
                v673 = *(unsigned __int16 *)(a2 + 2004);
                *(_WORD *)(a2 + 1922) = v673;
                *(_WORD *)(a2 + 2004) = v673 + 1;
              }
              *((_QWORD *)&v1145[0] + 1) = v668 | (v673 << 48) | v669 | v670 | v671 | 0x40;
              v674 = a2 + 2 * v672;
              v675 = *(unsigned __int16 *)(v674 + 1970);
              if ((_DWORD)v675 == 0xFFFF)
              {
                v675 = (unsigned __int16)*v1138;
                *(_WORD *)(v674 + 1970) = v675;
                *v1138 = v675 + 1;
              }
              *(_QWORD *)&v1145[1] = (v675 << 48) | 0x19C840;
              v676 = *(unsigned __int16 *)(v674 + 1954);
              if (v676 == 0xFFFF)
              {
                v677 = (unsigned __int16)*v1138;
                *(_WORD *)(v674 + 1954) = v677;
                *v1138 = v677 + 1;
                v676 = *(unsigned __int16 *)(v674 + 1954);
                *((_QWORD *)&v1145[1] + 1) = (v677 << 48) | 0x19C840;
                if ((_DWORD)v676 == 0xFFFF)
                {
                  v676 = (unsigned __int16)*v1138;
                  *(_WORD *)(v674 + 1954) = v676;
                  *v1138 = v676 + 1;
                }
              }
              else
              {
                *((_QWORD *)&v1145[1] + 1) = (v676 << 48) | 0x19C840;
              }
              *(_QWORD *)&v1145[0] = (v676 << 48) | 0x72679000;
              (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
              ++v672;
              v671 += 0x8000;
              v670 += 0x2000;
              v669 += 2048;
              v668 += 512;
              v550 = v1142;
            }
            while (v672 < v1142);
          }
          else
          {
            if (!(_DWORD)v550)
              goto LABEL_927;
            v630 = 0;
            v631 = 0;
            v632 = 0;
            v633 = 0;
            v634 = 0;
            do
            {
              v635 = *(_DWORD *)&v1140[4 * v634];
              memset(v1145, 0, 72);
              v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
              *(_DWORD *)(a2 + 16) = 3;
              v636 = *(unsigned __int16 *)(a2 + 1922);
              if ((_DWORD)v636 == 0xFFFF)
              {
                v636 = *(unsigned __int16 *)(a2 + 2004);
                *(_WORD *)(a2 + 1922) = v636;
                *(_WORD *)(a2 + 2004) = v636 + 1;
              }
              *((_QWORD *)&v1145[0] + 1) = v630 | (v636 << 48) | v631 | v632 | v633 | 0x40;
              v637 = 2 * v635 + 257;
              v638 = a2 + 4 * v637;
              v639 = *(unsigned __int16 *)(v638 + 260);
              if ((_DWORD)v639 == 0xFFFF)
              {
                v640 = *(__int16 *)(a2 + 1998);
                v639 = *(unsigned __int16 *)(a2 + 1998);
                *(_WORD *)(v638 + 260) = v640;
                *(_WORD *)(a2 + 4 * v640 + 262) = v637;
                v75 = (v637 & 0xFFFFFFF0) == 144;
                v641 = v640 + 11;
                if (!v75)
                  v641 = v640 + 1;
                *(_WORD *)(a2 + 1998) = v641;
              }
              *(_QWORD *)&v1145[1] = ((v639 << 48) | 0x19C840) + 64;
              v642 = a2 + 2 * v634;
              v643 = *(unsigned __int16 *)(v642 + 1954);
              if (v643 == 0xFFFF)
              {
                v644 = (unsigned __int16)*v1138;
                *(_WORD *)(v642 + 1954) = v644;
                *v1138 = v644 + 1;
                v643 = *(unsigned __int16 *)(v642 + 1954);
                *((_QWORD *)&v1145[1] + 1) = (v644 << 48) | 0x19C840;
                if ((_DWORD)v643 == 0xFFFF)
                {
                  v643 = (unsigned __int16)*v1138;
                  *(_WORD *)(v642 + 1954) = v643;
                  *v1138 = v643 + 1;
                }
              }
              else
              {
                *((_QWORD *)&v1145[1] + 1) = (v643 << 48) | 0x19C840;
              }
              *(_QWORD *)&v1145[0] = (v643 << 48) | 0x72679000;
              (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
              ++v634;
              v633 += 0x8000;
              v632 += 0x2000;
              v631 += 2048;
              v630 += 512;
              v550 = v1142;
            }
            while (v634 < v1142);
          }
        }
      }
      v1129 = 0;
      v617 = v550 != 0;
      if (v1134)
      {
        v59 = (_WORD *)(a2 + 2004);
        if (!(_DWORD)v550)
          goto LABEL_928;
        v618 = 0;
        v619 = 0;
        v620 = 0;
        v621 = 0;
        v622 = 0;
        do
        {
          if (((v1134 >> v622) & 1) != 0)
          {
            memset(v1145, 0, 72);
            v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
            *(_DWORD *)(a2 + 16) = 3;
            v623 = *(unsigned __int16 *)(a2 + 1940);
            if ((_DWORD)v623 == 0xFFFF)
            {
              v623 = *(unsigned __int16 *)(a2 + 2004);
              *(_WORD *)(a2 + 1940) = v623;
              *(_WORD *)(a2 + 2004) = v623 + 1;
            }
            *((_QWORD *)&v1145[0] + 1) = v618 | (v623 << 48) | v619 | v620 | v621 | 0x40;
            v624 = a2 + 2 * v622;
            v625 = *(unsigned __int16 *)(v624 + 1946);
            if ((_DWORD)v625 == 0xFFFF)
            {
              v625 = (unsigned __int16)*v1138;
              *(_WORD *)(v624 + 1946) = v625;
              *v1138 = v625 + 1;
            }
            *(_QWORD *)&v1145[1] = (v625 << 48) | 0x19C840;
            v626 = *(unsigned __int16 *)(a2 + 1904);
            if (v626 == 0xFFFF)
            {
              v628 = *(unsigned __int16 *)(a2 + 2004);
              v629 = *(unsigned __int16 *)(a2 + 2004);
              *(_WORD *)(a2 + 1904) = v628;
              *(_WORD *)(a2 + 2004) = ++v629;
              *((_QWORD *)&v1145[1] + 1) = ((unint64_t)(unsigned __int16)v628 << 48) | 0x19C840;
              if ((v629 & 0x10000) != 0)
              {
                v628 = *(unsigned __int16 *)(a2 + 2004);
                *(_WORD *)(a2 + 1904) = v628;
                *(_WORD *)(a2 + 2004) = v628 + 1;
              }
              v627 = v628 << 48;
            }
            else
            {
              v627 = v626 << 48;
              *((_QWORD *)&v1145[1] + 1) = ((unint64_t)(unsigned __int16)v626 << 48) | 0x19C840;
            }
            *(_QWORD *)&v1145[0] = v627 | 0x72679000;
            (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
            v550 = v1142;
          }
          ++v622;
          v621 += 0x8000;
          v620 += 0x2000;
          v619 += 2048;
          v618 += 512;
        }
        while (v622 < v550);
        v617 = 1;
        v1129 = 1;
      }
      v59 = (_WORD *)(a2 + 2004);
LABEL_928:
      v696 = ~v1134 & 0xF;
      if (!v696)
        v617 = 0;
      v1127 = v617;
      if (v617)
      {
        v697 = 0;
        do
        {
          if (((v696 >> v697) & 1) != 0)
          {
            memset(v1145, 0, 72);
            v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x31000007C2;
            *(_DWORD *)(a2 + 16) = 2;
            v698 = a2 + 2 * v697;
            v699 = *(unsigned __int16 *)(v698 + 1946);
            if ((_DWORD)v699 == 0xFFFF)
            {
              v699 = (unsigned __int16)*v59;
              *(_WORD *)(v698 + 1946) = v699;
              *v59 = v699 + 1;
            }
            *((_QWORD *)&v1145[0] + 1) = (v699 << 48) | 0x19C840;
            v700 = *(unsigned __int16 *)(a2 + 1904);
            if (v700 == 0xFFFF)
            {
              v702 = *(unsigned __int16 *)(a2 + 2004);
              v703 = *(unsigned __int16 *)(a2 + 2004);
              *(_WORD *)(a2 + 1904) = v702;
              *(_WORD *)(a2 + 2004) = ++v703;
              *(_QWORD *)&v1145[1] = ((unint64_t)(unsigned __int16)v702 << 48) | 0x19C840;
              if ((v703 & 0x10000) != 0)
              {
                v702 = *(unsigned __int16 *)(a2 + 2004);
                *(_WORD *)(a2 + 1904) = v702;
                *(_WORD *)(a2 + 2004) = v702 + 1;
              }
              v701 = v702 << 48;
            }
            else
            {
              v701 = v700 << 48;
              *(_QWORD *)&v1145[1] = ((unint64_t)(unsigned __int16)v700 << 48) | 0x19C840;
            }
            *(_QWORD *)&v1145[0] = v701 | 0x72679000;
            (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
            v550 = v1142;
          }
          ++v697;
        }
        while (v697 < v550);
      }
      if ((*a1 & 0x8000000000000000) != 0)
      {
        if (v1129)
        {
          v704 = 0;
          v705 = -v1125;
          v706 = (_WORD *)(a2 + 2 * v705 + 1962);
          while (((v1134 >> v704) & 1) == 0)
          {
LABEL_961:
            if (++v704 >= v550)
              goto LABEL_965;
          }
          if (v704 == v705)
          {
            memset((char *)&v1145[1] + 8, 0, 48);
            v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
            *(_DWORD *)(a2 + 16) = 2;
            v707 = *(unsigned __int16 *)(a2 + 1940);
            if ((_DWORD)v707 == 0xFFFF)
            {
              v707 = *(unsigned __int16 *)(a2 + 2004);
              *(_WORD *)(a2 + 1940) = v707;
              *(_WORD *)(a2 + 2004) = v707 + 1;
            }
            *((_QWORD *)&v1145[0] + 1) = ((unint64_t)-v1125 << 9) | (v707 << 48) | ((unint64_t)-v1125 << 11) | ((unint64_t)-v1125 << 13) | ((unint64_t)-v1125 << 15) | 0x40;
            v708 = (unsigned __int16)*v706;
            if ((_DWORD)v708 == 0xFFFF)
            {
              v708 = (unsigned __int16)*v1138;
              *v706 = v708;
              *v1138 = v708 + 1;
            }
            *(_QWORD *)&v1145[1] = (v708 << 48) | 0x19C840;
            v709 = *(unsigned __int16 *)(a2 + 1908);
            if ((_DWORD)v709 != 0xFFFF)
              goto LABEL_953;
          }
          else
          {
            memset(v1145, 0, 72);
            v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
            *(_DWORD *)(a2 + 16) = 3;
            v711 = *(unsigned __int16 *)(a2 + 1940);
            if ((_DWORD)v711 == 0xFFFF)
            {
              v711 = *(unsigned __int16 *)(a2 + 2004);
              *(_WORD *)(a2 + 1940) = v711;
              *(_WORD *)(a2 + 2004) = v711 + 1;
            }
            *((_QWORD *)&v1145[0] + 1) = (v711 << 48) | (v704 << 9) | (v704 << 11) | (v704 << 13) | (v704 << 15) | 0x40;
            v712 = a2 + 2 * v704;
            v713 = *(unsigned __int16 *)(v712 + 1962);
            if ((_DWORD)v713 == 0xFFFF)
            {
              v713 = (unsigned __int16)*v1138;
              *(_WORD *)(v712 + 1962) = v713;
              *v1138 = v713 + 1;
            }
            *(_QWORD *)&v1145[1] = (v713 << 48) | 0x19C840;
            v714 = *(unsigned __int16 *)(a2 + 1908);
            if (v714 != 0xFFFF)
            {
              v710 = v714 << 48;
              *((_QWORD *)&v1145[1] + 1) = ((unint64_t)(unsigned __int16)v714 << 48) | 0x19C840;
              goto LABEL_960;
            }
            v709 = *(unsigned __int16 *)(a2 + 2004);
            v715 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1908) = v709;
            *(_WORD *)(a2 + 2004) = ++v715;
            *((_QWORD *)&v1145[1] + 1) = ((unint64_t)(unsigned __int16)v709 << 48) | 0x19C840;
            if ((v715 & 0x10000) == 0)
            {
LABEL_953:
              v710 = v709 << 48;
LABEL_960:
              *(_QWORD *)&v1145[0] = v710 | 0x72679000;
              (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
              v550 = v1142;
              goto LABEL_961;
            }
          }
          v709 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1908) = v709;
          *(_WORD *)(a2 + 2004) = v709 + 1;
          goto LABEL_953;
        }
LABEL_965:
        v59 = (_WORD *)(a2 + 2004);
        if (v1127)
        {
          v716 = 0;
          v717 = (_WORD *)(a2 + 2 * -v1125 + 1962);
          while (((v696 >> v716) & 1) == 0)
          {
LABEL_979:
            if (++v716 >= v550)
              goto LABEL_983;
          }
          if (v1122 == v716)
          {
            memset(&v1145[1], 0, 56);
            v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
            *(_DWORD *)(a2 + 16) = 1;
            v718 = (unsigned __int16)*v717;
            if ((_DWORD)v718 == 0xFFFF)
            {
              v718 = (unsigned __int16)*v1138;
              *v717 = v718;
              *v1138 = v718 + 1;
            }
            *((_QWORD *)&v1145[0] + 1) = (v718 << 48) | 0x19C840;
            v719 = *(unsigned __int16 *)(a2 + 1908);
            if ((_DWORD)v719 == 0xFFFF)
            {
LABEL_972:
              v719 = *(unsigned __int16 *)(a2 + 2004);
              *(_WORD *)(a2 + 1908) = v719;
              *(_WORD *)(a2 + 2004) = v719 + 1;
            }
LABEL_973:
            v720 = v719 << 48;
          }
          else
          {
            memset(v1145, 0, 72);
            v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x31000007C2;
            *(_DWORD *)(a2 + 16) = 2;
            v721 = a2 + 2 * v716;
            v722 = *(unsigned __int16 *)(v721 + 1962);
            if ((_DWORD)v722 == 0xFFFF)
            {
              v722 = (unsigned __int16)*v1138;
              *(_WORD *)(v721 + 1962) = v722;
              *v1138 = v722 + 1;
            }
            *((_QWORD *)&v1145[0] + 1) = (v722 << 48) | 0x19C840;
            v723 = *(unsigned __int16 *)(a2 + 1908);
            if (v723 == 0xFFFF)
            {
              v719 = *(unsigned __int16 *)(a2 + 2004);
              v724 = *(unsigned __int16 *)(a2 + 2004);
              *(_WORD *)(a2 + 1908) = v719;
              *(_WORD *)(a2 + 2004) = ++v724;
              *(_QWORD *)&v1145[1] = ((unint64_t)(unsigned __int16)v719 << 48) | 0x19C840;
              if ((v724 & 0x10000) != 0)
                goto LABEL_972;
              goto LABEL_973;
            }
            v720 = v723 << 48;
            *(_QWORD *)&v1145[1] = ((unint64_t)(unsigned __int16)v723 << 48) | 0x19C840;
          }
          *(_QWORD *)&v1145[0] = v720 | 0x72679000;
          (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
          v550 = v1142;
          goto LABEL_979;
        }
      }
LABEL_983:
      if ((*a1 & 0x1000000000000) != 0)
      {
        if (v1129)
        {
          v725 = 0;
          v726 = 0;
          v727 = 0;
          v728 = 0;
          v729 = 0;
          do
          {
            if (((v1134 >> v729) & 1) != 0)
            {
              memset(v1145, 0, 72);
              v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
              *(_DWORD *)(a2 + 16) = 3;
              v730 = *(unsigned __int16 *)(a2 + 1940);
              if ((_DWORD)v730 == 0xFFFF)
              {
                v730 = *(unsigned __int16 *)(a2 + 2004);
                *(_WORD *)(a2 + 1940) = v730;
                *(_WORD *)(a2 + 2004) = v730 + 1;
              }
              *((_QWORD *)&v1145[0] + 1) = v725 | (v730 << 48) | v726 | v727 | v728 | 0x40;
              v731 = a2 + 2 * v729;
              v732 = *(unsigned __int16 *)(v731 + 1954);
              if ((_DWORD)v732 == 0xFFFF)
              {
                v732 = (unsigned __int16)*v1138;
                *(_WORD *)(v731 + 1954) = v732;
                *v1138 = v732 + 1;
              }
              *(_QWORD *)&v1145[1] = (v732 << 48) | 0x19C840;
              v733 = *(unsigned __int16 *)(a2 + 1906);
              if (v733 == 0xFFFF)
              {
                v735 = *(unsigned __int16 *)(a2 + 2004);
                v736 = *(unsigned __int16 *)(a2 + 2004);
                *(_WORD *)(a2 + 1906) = v735;
                *(_WORD *)(a2 + 2004) = ++v736;
                *((_QWORD *)&v1145[1] + 1) = ((unint64_t)(unsigned __int16)v735 << 48) | 0x19C840;
                if ((v736 & 0x10000) != 0)
                {
                  v735 = *(unsigned __int16 *)(a2 + 2004);
                  *(_WORD *)(a2 + 1906) = v735;
                  *(_WORD *)(a2 + 2004) = v735 + 1;
                }
                v734 = v735 << 48;
              }
              else
              {
                v734 = v733 << 48;
                *((_QWORD *)&v1145[1] + 1) = ((unint64_t)(unsigned __int16)v733 << 48) | 0x19C840;
              }
              *(_QWORD *)&v1145[0] = v734 | 0x72679000;
              (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
              v550 = v1142;
            }
            ++v729;
            v728 += 0x8000;
            v727 += 0x2000;
            v726 += 2048;
            v725 += 512;
          }
          while (v729 < v550);
        }
        v59 = (_WORD *)(a2 + 2004);
        if (v1127)
        {
          v737 = 0;
          do
          {
            if (((v696 >> v737) & 1) != 0)
            {
              memset(v1145, 0, 72);
              v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x31000007C2;
              *(_DWORD *)(a2 + 16) = 2;
              v738 = a2 + 2 * v737;
              v739 = *(unsigned __int16 *)(v738 + 1954);
              if ((_DWORD)v739 == 0xFFFF)
              {
                v739 = (unsigned __int16)*v1138;
                *(_WORD *)(v738 + 1954) = v739;
                *v1138 = v739 + 1;
              }
              *((_QWORD *)&v1145[0] + 1) = (v739 << 48) | 0x19C840;
              v740 = *(unsigned __int16 *)(a2 + 1906);
              if (v740 == 0xFFFF)
              {
                v742 = *(unsigned __int16 *)(a2 + 2004);
                v743 = *(unsigned __int16 *)(a2 + 2004);
                *(_WORD *)(a2 + 1906) = v742;
                *(_WORD *)(a2 + 2004) = ++v743;
                *(_QWORD *)&v1145[1] = ((unint64_t)(unsigned __int16)v742 << 48) | 0x19C840;
                if ((v743 & 0x10000) != 0)
                {
                  v742 = *(unsigned __int16 *)(a2 + 2004);
                  *(_WORD *)(a2 + 1906) = v742;
                  *(_WORD *)(a2 + 2004) = v742 + 1;
                }
                v741 = v742 << 48;
              }
              else
              {
                v741 = v740 << 48;
                *(_QWORD *)&v1145[1] = ((unint64_t)(unsigned __int16)v740 << 48) | 0x19C840;
              }
              *(_QWORD *)&v1145[0] = v741 | 0x72679000;
              (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
              v550 = v1142;
            }
            ++v737;
          }
          while (v737 < v550);
        }
        if ((*a1 & 0x8000000000000000) != 0)
        {
          if (v1129)
          {
            v744 = 0;
            v745 = -v1125;
            v746 = (_WORD *)(a2 + 2 * v745 + 1970);
            while (((v1134 >> v744) & 1) == 0)
            {
LABEL_1029:
              if (++v744 >= v550)
                goto LABEL_1033;
            }
            if (v744 == v745)
            {
              memset((char *)&v1145[1] + 8, 0, 48);
              v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
              *(_DWORD *)(a2 + 16) = 2;
              v747 = *(unsigned __int16 *)(a2 + 1940);
              if ((_DWORD)v747 == 0xFFFF)
              {
                v747 = *(unsigned __int16 *)(a2 + 2004);
                *(_WORD *)(a2 + 1940) = v747;
                *(_WORD *)(a2 + 2004) = v747 + 1;
              }
              *((_QWORD *)&v1145[0] + 1) = ((unint64_t)-v1125 << 9) | (v747 << 48) | ((unint64_t)-v1125 << 11) | ((unint64_t)-v1125 << 13) | ((unint64_t)-v1125 << 15) | 0x40;
              v748 = (unsigned __int16)*v746;
              if ((_DWORD)v748 == 0xFFFF)
              {
                v748 = (unsigned __int16)*v1138;
                *v746 = v748;
                *v1138 = v748 + 1;
              }
              *(_QWORD *)&v1145[1] = (v748 << 48) | 0x19C840;
              v749 = *(unsigned __int16 *)(a2 + 1910);
              if ((_DWORD)v749 != 0xFFFF)
                goto LABEL_1021;
            }
            else
            {
              memset(v1145, 0, 72);
              v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
              *(_DWORD *)(a2 + 16) = 3;
              v751 = *(unsigned __int16 *)(a2 + 1940);
              if ((_DWORD)v751 == 0xFFFF)
              {
                v751 = *(unsigned __int16 *)(a2 + 2004);
                *(_WORD *)(a2 + 1940) = v751;
                *(_WORD *)(a2 + 2004) = v751 + 1;
              }
              *((_QWORD *)&v1145[0] + 1) = (v751 << 48) | (v744 << 9) | (v744 << 11) | (v744 << 13) | (v744 << 15) | 0x40;
              v752 = a2 + 2 * v744;
              v753 = *(unsigned __int16 *)(v752 + 1970);
              if ((_DWORD)v753 == 0xFFFF)
              {
                v753 = (unsigned __int16)*v1138;
                *(_WORD *)(v752 + 1970) = v753;
                *v1138 = v753 + 1;
              }
              *(_QWORD *)&v1145[1] = (v753 << 48) | 0x19C840;
              v754 = *(unsigned __int16 *)(a2 + 1910);
              if (v754 != 0xFFFF)
              {
                v750 = v754 << 48;
                *((_QWORD *)&v1145[1] + 1) = ((unint64_t)(unsigned __int16)v754 << 48) | 0x19C840;
                goto LABEL_1028;
              }
              v749 = *(unsigned __int16 *)(a2 + 2004);
              v755 = *(unsigned __int16 *)(a2 + 2004);
              *(_WORD *)(a2 + 1910) = v749;
              *(_WORD *)(a2 + 2004) = ++v755;
              *((_QWORD *)&v1145[1] + 1) = ((unint64_t)(unsigned __int16)v749 << 48) | 0x19C840;
              if ((v755 & 0x10000) == 0)
              {
LABEL_1021:
                v750 = v749 << 48;
LABEL_1028:
                *(_QWORD *)&v1145[0] = v750 | 0x72679000;
                (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
                v550 = v1142;
                goto LABEL_1029;
              }
            }
            v749 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1910) = v749;
            *(_WORD *)(a2 + 2004) = v749 + 1;
            goto LABEL_1021;
          }
LABEL_1033:
          v59 = (_WORD *)(a2 + 2004);
          if (v1127)
          {
            v756 = 0;
            v757 = (_WORD *)(a2 + 2 * -v1125 + 1970);
            while (((v696 >> v756) & 1) == 0)
            {
LABEL_1047:
              if (++v756 >= v550)
                goto LABEL_1051;
            }
            if (v1122 == v756)
            {
              memset(&v1145[1], 0, 56);
              v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
              *(_DWORD *)(a2 + 16) = 1;
              v758 = (unsigned __int16)*v757;
              if ((_DWORD)v758 == 0xFFFF)
              {
                v758 = (unsigned __int16)*v1138;
                *v757 = v758;
                *v1138 = v758 + 1;
              }
              *((_QWORD *)&v1145[0] + 1) = (v758 << 48) | 0x19C840;
              v759 = *(unsigned __int16 *)(a2 + 1910);
              if ((_DWORD)v759 == 0xFFFF)
              {
LABEL_1040:
                v759 = *(unsigned __int16 *)(a2 + 2004);
                *(_WORD *)(a2 + 1910) = v759;
                *(_WORD *)(a2 + 2004) = v759 + 1;
              }
LABEL_1041:
              v760 = v759 << 48;
            }
            else
            {
              memset(v1145, 0, 72);
              v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x31000007C2;
              *(_DWORD *)(a2 + 16) = 2;
              v761 = a2 + 2 * v756;
              v762 = *(unsigned __int16 *)(v761 + 1970);
              if ((_DWORD)v762 == 0xFFFF)
              {
                v762 = (unsigned __int16)*v1138;
                *(_WORD *)(v761 + 1970) = v762;
                *v1138 = v762 + 1;
              }
              *((_QWORD *)&v1145[0] + 1) = (v762 << 48) | 0x19C840;
              v763 = *(unsigned __int16 *)(a2 + 1910);
              if (v763 == 0xFFFF)
              {
                v759 = *(unsigned __int16 *)(a2 + 2004);
                v764 = *(unsigned __int16 *)(a2 + 2004);
                *(_WORD *)(a2 + 1910) = v759;
                *(_WORD *)(a2 + 2004) = ++v764;
                *(_QWORD *)&v1145[1] = ((unint64_t)(unsigned __int16)v759 << 48) | 0x19C840;
                if ((v764 & 0x10000) != 0)
                  goto LABEL_1040;
                goto LABEL_1041;
              }
              v760 = v763 << 48;
              *(_QWORD *)&v1145[1] = ((unint64_t)(unsigned __int16)v763 << 48) | 0x19C840;
            }
            *(_QWORD *)&v1145[0] = v760 | 0x72679000;
            (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
            v550 = v1142;
            goto LABEL_1047;
          }
        }
      }
LABEL_1051:
      v58 = v1125 + 4;
      v57 = v1122 - 4;
      v54 = v1123;
      if (v1125 + 4 >= v1123)
        goto LABEL_1665;
    }
    v64 = 0;
    v63 = 0;
    v1134 = 0;
    v1120 = 0;
    v1131 = 15;
    v1126 = 1;
    v1128 = 0;
    if (v58)
      goto LABEL_136;
LABEL_129:
    if ((*a1 & 0x2000000000000) != 0)
    {
      memset((char *)v1145 + 8, 0, 64);
      v95 = 8 * (*(_DWORD *)(a2 + 16) & 7);
      *(_DWORD *)(a2 + 16) = 1;
      v1144 = v95 | 0x100080341;
      v96 = *(unsigned __int16 *)(a2 + 1900);
      if (v96 == 0xFFFF)
      {
        v98 = *(unsigned __int16 *)(a2 + 2004);
        v99 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1900) = v98;
        *(_WORD *)(a2 + 2004) = ++v99;
        *((_QWORD *)&v1145[0] + 1) = ((unint64_t)(unsigned __int16)v98 << 48) | 0x1FE40;
        if ((v99 & 0x10000) != 0)
        {
          v98 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1900) = v98;
          *(_WORD *)(a2 + 2004) = v98 + 1;
        }
        v97 = v98 << 48;
      }
      else
      {
        v97 = v96 << 48;
        *((_QWORD *)&v1145[0] + 1) = ((unint64_t)(unsigned __int16)v96 << 48) | 0x1FE40;
      }
      *(_QWORD *)&v1145[0] = v97 | 0x72609000;
      (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
      v60 = v1142;
    }
    goto LABEL_136;
  }
  if ((v41 & 0x2000000000000) != 0)
  {
    memset((char *)v1145 + 8, 0, 64);
    v51 = 8 * (*(_DWORD *)(a2 + 16) & 7);
    *(_DWORD *)(a2 + 16) = 1;
    v1144 = v51 | 0x100080341;
    v52 = *(unsigned __int16 *)(a2 + 1900);
    if (v52 == 0xFFFF)
    {
      v765 = *(unsigned __int16 *)(a2 + 2004);
      v766 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1900) = v765;
      *(_WORD *)(a2 + 2004) = ++v766;
      *((_QWORD *)&v1145[0] + 1) = ((unint64_t)(unsigned __int16)v765 << 48) | 0x1FE40;
      if ((v766 & 0x10000) != 0)
      {
        v765 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1900) = v765;
        *(_WORD *)(a2 + 2004) = v765 + 1;
      }
      v53 = v765 << 48;
    }
    else
    {
      v53 = v52 << 48;
      *((_QWORD *)&v1145[0] + 1) = ((unint64_t)(unsigned __int16)v52 << 48) | 0x1FE40;
    }
    *(_QWORD *)&v1145[0] = v53 | 0x72609000;
    (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
    memset((char *)v1145 + 8, 0, 64);
    v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
    *(_DWORD *)(a2 + 16) = 2;
    v767 = *(unsigned __int16 *)(a2 + 1900);
    if (v767 == 0xFFFF)
    {
      v769 = *(unsigned __int16 *)(a2 + 2004);
      v770 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1900) = v769;
      *(_WORD *)(a2 + 2004) = ++v770;
      *((_QWORD *)&v1145[0] + 1) = ((unint64_t)(unsigned __int16)v769 << 48) | 0x19C840;
      if ((v770 & 0x10000) != 0)
      {
        v769 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1900) = v769;
        *(_WORD *)(a2 + 2004) = v769 + 1;
      }
      v768 = v769 << 48;
    }
    else
    {
      v768 = v767 << 48;
      *((_QWORD *)&v1145[0] + 1) = ((unint64_t)(unsigned __int16)v767 << 48) | 0x19C840;
    }
    *(_QWORD *)&v1145[1] = v768 | 0x1FE40;
    v771 = *(unsigned __int16 *)(a2 + 1942);
    if ((_DWORD)v771 == 0xFFFF)
    {
      v771 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1942) = v771;
      *(_WORD *)(a2 + 2004) = v771 + 1;
    }
    *(_QWORD *)&v1145[0] = (v771 << 48) | 0x72679000;
    (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
  }
  if (!v50)
  {
LABEL_1660:
    memset(&v1145[1], 0, 56);
    v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
    *(_DWORD *)(a2 + 16) = 1;
    v1097 = *(unsigned __int16 *)(a2 + 1664);
    if ((_DWORD)v1097 == 0xFFFF)
    {
      v1098 = *(__int16 *)(a2 + 1998);
      v1097 = *(unsigned __int16 *)(a2 + 1998);
      *(_WORD *)(a2 + 1664) = v1098;
      *(_WORD *)(a2 + 4 * v1098 + 262) = 351;
      *(_WORD *)(a2 + 1998) = v1098 + 1;
    }
    *((_QWORD *)&v1145[0] + 1) = (v1097 << 48) | 0xAA80;
    v1099 = *(unsigned __int16 *)(a2 + 1908);
    if ((_DWORD)v1099 == 0xFFFF)
    {
      v1099 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1908) = v1099;
      *(_WORD *)(a2 + 2004) = v1099 + 1;
    }
    *(_QWORD *)&v1145[0] = (v1099 << 48) | 0x72679000;
    (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
    goto LABEL_1665;
  }
  v772 = 0;
  v773 = 0;
  v1135 = 0;
  v774 = (unsigned __int16 *)(a2 + 1348);
  v775 = (_WORD *)(a2 + 1288);
  do
  {
    if ((v50 & 1) == 0)
      goto LABEL_1653;
    v1143 = v775;
    v1141 = v772;
    v776 = a1[1];
    v777 = (1 << v773);
    v778 = v777 & (v776 >> 16);
    if (v778)
      v779 = (v777 & v776) != 0;
    else
      v779 = 0;
    v1139 = v779;
    v780 = v773 + 320;
    v1132 = v777 & v776;
    if ((v777 & v776) == 0)
    {
      memset(&v1145[1], 0, 56);
      v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
      *(_DWORD *)(a2 + 16) = 1;
      v792 = v774[96];
      if ((_DWORD)v792 == 0xFFFF)
      {
        v793 = *(__int16 *)(a2 + 1998);
        v792 = *(unsigned __int16 *)(a2 + 1998);
        v774[96] = v793;
        *(_WORD *)(a2 + 4 * v793 + 262) = v773 + 320;
        v75 = (v780 & 0xFFFFFFF0) == 144;
        v794 = v793 + 11;
        if (!v75)
          v794 = v793 + 1;
        *(_WORD *)(a2 + 1998) = v794;
      }
      *((_QWORD *)&v1145[0] + 1) = ((v792 << 48) | 0x19C840) + 64;
      v795 = *(unsigned __int16 *)(a2 + 1924);
      if ((_DWORD)v795 != 0xFFFF)
        goto LABEL_1120;
      v795 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1924) = v795;
      goto LABEL_1119;
    }
    memset((char *)&v1145[1] + 8, 0, 48);
    v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x31000007C2;
    *(_DWORD *)(a2 + 16) = 2;
    v781 = v774[96];
    if ((_DWORD)v781 == 0xFFFF)
    {
      v782 = *(__int16 *)(a2 + 1998);
      v781 = *(unsigned __int16 *)(a2 + 1998);
      v774[96] = v782;
      *(_WORD *)(a2 + 4 * v782 + 262) = v773 + 320;
      v75 = (v780 & 0xFFFFFFF0) == 144;
      v783 = v782 + 11;
      if (!v75)
        v783 = v782 + 1;
      *(_WORD *)(a2 + 1998) = v783;
    }
    *((_QWORD *)&v1145[0] + 1) = ((v781 << 48) | 0x19C840) + 64;
    v784 = *(unsigned __int16 *)(a2 + 1900);
    if ((_DWORD)v784 == 0xFFFF)
    {
      v784 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1900) = v784;
      *(_WORD *)(a2 + 2004) = v784 + 1;
    }
    *(_QWORD *)&v1145[1] = (v784 << 48) | 0x19C840;
    v785 = *(unsigned __int16 *)(a2 + 1924);
    if ((_DWORD)v785 == 0xFFFF)
    {
      v785 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1924) = v785;
      *(_WORD *)(a2 + 2004) = v785 + 1;
    }
    *(_QWORD *)&v1145[0] = (v785 << 48) | 0x72679000;
    (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
    gleVStateProgram_NormalizeVector(a2, 12, 12, 23, 27);
    if (v778)
    {
      memset((char *)&v1145[1] + 8, 0, 48);
      v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
      *(_DWORD *)(a2 + 16) = 2;
      v786 = *(unsigned __int16 *)(a2 + 1946);
      if ((_DWORD)v786 == 0xFFFF)
      {
        v786 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1946) = v786;
        *(_WORD *)(a2 + 2004) = v786 + 1;
      }
      *((_QWORD *)&v1145[0] + 1) = ((unint64_t)(unsigned __int16)v786 << 48) | 0x19C840;
      v787 = *(unsigned __int16 *)(a2 + 1954);
      if ((_DWORD)v787 == 0xFFFF)
      {
        v787 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1954) = v787;
        *(_WORD *)(a2 + 2004) = v787 + 1;
      }
      *(_QWORD *)&v1145[1] = (v787 << 48) | 0x19C840;
      if ((_DWORD)v786 == 0xFFFF)
      {
        v786 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1946) = v786;
        *(_WORD *)(a2 + 2004) = v786 + 1;
      }
      *(_QWORD *)&v1145[0] = (v786 << 48) | 0x72679000;
      (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
      memset(v1145, 0, 72);
      v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
      *(_DWORD *)(a2 + 16) = 3;
      v788 = *(unsigned __int16 *)(a2 + 1946);
      if ((_DWORD)v788 == 0xFFFF)
      {
        v788 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1946) = v788;
        *(_WORD *)(a2 + 2004) = v788 + 1;
      }
      *((_QWORD *)&v1145[0] + 1) = (v788 << 48) | 0x19C840;
      v789 = v773 + 312;
      v790 = v774[80];
      if (v790 == 0xFFFF)
      {
        v796 = *(__int16 *)(a2 + 1998);
        v774[80] = v796;
        *(_WORD *)(a2 + 4 * v796 + 262) = v789;
        if ((v789 & 0xFFFFFFF0) == 0x90)
          v797 = 11;
        else
          v797 = 1;
        *(_WORD *)(a2 + 1998) = v796 + v797;
        *(_QWORD *)&v1145[1] = (((unint64_t)(unsigned __int16)v796 << 48) | 0x15440) + 64;
        if ((_DWORD)v796 == -1)
        {
          v796 = *(__int16 *)(a2 + 1998);
          v774[80] = v796;
          *(_WORD *)(a2 + 4 * v796 + 262) = v789;
          *(_WORD *)(a2 + 1998) = v796 + v797;
        }
        v791 = v796 << 48;
      }
      else
      {
        v791 = v790 << 48;
        *(_QWORD *)&v1145[1] = (((unint64_t)(unsigned __int16)v790 << 48) | 0x15440) + 64;
      }
      *((_QWORD *)&v1145[1] + 1) = v791 | 0xAA80;
      v798 = *(unsigned __int16 *)(a2 + 1954);
      if ((_DWORD)v798 == 0xFFFF)
      {
        v798 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1954) = v798;
        *(_WORD *)(a2 + 2004) = v798 + 1;
      }
      *(_QWORD *)&v1145[0] = (v798 << 48) | 0x72679000;
      (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
      memset(v1145, 0, 72);
      v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
      *(_DWORD *)(a2 + 16) = 3;
      v799 = *(unsigned __int16 *)(a2 + 1946);
      if ((_DWORD)v799 == 0xFFFF)
      {
        v799 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1946) = v799;
        *(_WORD *)(a2 + 2004) = v799 + 1;
      }
      *((_QWORD *)&v1145[0] + 1) = (v799 << 48) | 0x19C840;
      v800 = *(unsigned __int16 *)(a2 + 1954);
      if ((_DWORD)v800 == 0xFFFF)
      {
        v800 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1954) = v800;
        *(_WORD *)(a2 + 2004) = v800 + 1;
      }
      *(_QWORD *)&v1145[1] = (v800 << 48) | 0x19C840;
      v801 = v774[80];
      if ((_DWORD)v801 == 0xFFFF)
      {
        v802 = *(__int16 *)(a2 + 1998);
        v801 = *(unsigned __int16 *)(a2 + 1998);
        v774[80] = v802;
        *(_WORD *)(a2 + 4 * v802 + 262) = v789;
        if ((v789 & 0xFFFFFFF0) == 0x90)
          v803 = v802 + 11;
        else
          v803 = v802 + 1;
        *(_WORD *)(a2 + 1998) = v803;
        v800 = *(unsigned __int16 *)(a2 + 1954);
      }
      *((_QWORD *)&v1145[1] + 1) = (v801 << 48) | 0x80;
      if ((_DWORD)v800 == 0xFFFF)
      {
        v800 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1954) = v800;
        *(_WORD *)(a2 + 2004) = v800 + 1;
      }
      *(_QWORD *)&v1145[0] = (v800 << 48) | 0x72679000;
      (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
      memset(&v1145[1], 0, 56);
      v804 = *(_DWORD *)(a2 + 16);
      *(_DWORD *)(a2 + 16) = 1;
      v1144 = (8 * (v804 & 7)) | 0x100100381;
      v805 = *(unsigned __int16 *)(a2 + 1954);
      if ((_DWORD)v805 == 0xFFFF)
      {
        v805 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1954) = v805;
        *(_WORD *)(a2 + 2004) = v805 + 1;
      }
      *((_QWORD *)&v1145[0] + 1) = (v805 << 48) | 0x19C840;
      v795 = *(unsigned __int16 *)(a2 + 1940);
      if ((_DWORD)v795 != 0xFFFF)
        goto LABEL_1120;
      v795 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1940) = v795;
LABEL_1119:
      *(_WORD *)(a2 + 2004) = v795 + 1;
LABEL_1120:
      *(_QWORD *)&v1145[0] = (v795 << 48) | 0x72679000;
      (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
    }
    memset((char *)&v1145[1] + 8, 0, 48);
    v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000A02;
    *(_DWORD *)(a2 + 16) = 2;
    v806 = *(unsigned __int16 *)(a2 + 1902);
    if ((_DWORD)v806 == 0xFFFF)
    {
      v806 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1902) = v806;
      *(_WORD *)(a2 + 2004) = v806 + 1;
    }
    *((_QWORD *)&v1145[0] + 1) = (v806 << 48) | 0x19C840;
    v807 = *(unsigned __int16 *)(a2 + 1924);
    if ((_DWORD)v807 == 0xFFFF)
    {
      v807 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1924) = v807;
      *(_WORD *)(a2 + 2004) = v807 + 1;
    }
    *(_QWORD *)&v1145[1] = (v807 << 48) | 0x19C840;
    v808 = *(unsigned __int16 *)(a2 + 1912);
    if ((_DWORD)v808 == 0xFFFF)
    {
      v808 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1912) = v808;
      *(_WORD *)(a2 + 2004) = v808 + 1;
    }
    *(_QWORD *)&v1145[0] = (v808 << 48) | 0x72679000;
    (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
    v1137 = BYTE1(v776) >> v773;
    if ((v1137 & 1) != 0)
    {
      memset(&v1145[1], 0, 56);
      v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
      *(_DWORD *)(a2 + 16) = 1;
      v809 = v774[112];
      if ((_DWORD)v809 == 0xFFFF)
      {
        v810 = *(__int16 *)(a2 + 1998);
        v809 = *(unsigned __int16 *)(a2 + 1998);
        v774[112] = v810;
        *(_WORD *)(a2 + 4 * v810 + 262) = v773 + 328;
        v811 = v810 + 11;
        if (((v773 + 328) & 0xFFFFFFF0) != 0x90)
          v811 = v810 + 1;
        *(_WORD *)(a2 + 1998) = v811;
      }
      *((_QWORD *)&v1145[0] + 1) = ((v809 << 48) | 0x19C840) + 64;
      v812 = *(unsigned __int16 *)(a2 + 1946);
      if ((_DWORD)v812 == 0xFFFF)
      {
        v812 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1946) = v812;
        *(_WORD *)(a2 + 2004) = v812 + 1;
      }
      *(_QWORD *)&v1145[0] = (v812 << 48) | 0x72679000;
      (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
      memset((char *)&v1145[1] + 8, 0, 48);
      v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000A02;
      *(_DWORD *)(a2 + 16) = 2;
      v813 = *(unsigned __int16 *)(a2 + 1946);
      if ((_DWORD)v813 == 0xFFFF)
      {
        v813 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1946) = v813;
        *(_WORD *)(a2 + 2004) = v813 + 1;
      }
      *((_QWORD *)&v1145[0] + 1) = (v813 << 48) | 0x19C840;
      v814 = *(unsigned __int16 *)(a2 + 1924);
      if ((_DWORD)v814 == 0xFFFF)
      {
        v814 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1924) = v814;
        *(_WORD *)(a2 + 2004) = v814 + 1;
      }
      *(_QWORD *)&v1145[1] = ((v814 << 48) | 0x19C840) + 16;
      v815 = *(unsigned __int16 *)(a2 + 1954);
      if ((_DWORD)v815 == 0xFFFF)
      {
        v815 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1954) = v815;
        *(_WORD *)(a2 + 2004) = v815 + 1;
      }
      *(_QWORD *)&v1145[0] = (v815 << 48) | 0x72679000;
      (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
      memset((char *)&v1145[1] + 8, 0, 48);
      v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000C82;
      *(_DWORD *)(a2 + 16) = 2;
      v816 = *(unsigned __int16 *)(a2 + 1954);
      if (v1139)
      {
        if ((_DWORD)v816 == 0xFFFF)
        {
          v816 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1954) = v816;
          *(_WORD *)(a2 + 2004) = v816 + 1;
        }
        *((_QWORD *)&v1145[0] + 1) = (v816 << 48) | 0x19C840;
        v817 = v774[48];
        if ((_DWORD)v817 == 0xFFFF)
        {
          v818 = *(__int16 *)(a2 + 1998);
          v817 = *(unsigned __int16 *)(a2 + 1998);
          v774[48] = v818;
          *(_WORD *)(a2 + 4 * v818 + 262) = v773 + 296;
          v819 = v818 + 11;
          if (((v773 + 296) & 0xFFFFFFF0) != 0x90)
            v819 = v818 + 1;
          *(_WORD *)(a2 + 1998) = v819;
        }
        *(_QWORD *)&v1145[1] = ((v817 << 48) | 0x1FE40) + 64;
        v820 = *(unsigned __int16 *)(a2 + 1946);
        if ((_DWORD)v820 == 0xFFFF)
        {
          v820 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1946) = v820;
          *(_WORD *)(a2 + 2004) = v820 + 1;
        }
        *(_QWORD *)&v1145[0] = (v820 << 48) | 0x72679000;
        (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
        memset((char *)&v1145[1] + 8, 0, 48);
        v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
        *(_DWORD *)(a2 + 16) = 2;
        v821 = *(unsigned __int16 *)(a2 + 1940);
        if ((_DWORD)v821 == 0xFFFF)
        {
          v821 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1940) = v821;
          *(_WORD *)(a2 + 2004) = v821 + 1;
        }
        *((_QWORD *)&v1145[0] + 1) = ((unint64_t)(unsigned __int16)v821 << 48) | 0x19C840;
        v822 = *(unsigned __int16 *)(a2 + 1946);
        if ((_DWORD)v822 == 0xFFFF)
        {
          v822 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1946) = v822;
          *(_WORD *)(a2 + 2004) = v822 + 1;
        }
        *(_QWORD *)&v1145[1] = (v822 << 48) | 0x19C840;
      }
      else
      {
        if ((_DWORD)v816 == 0xFFFF)
        {
          v816 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1954) = v816;
          *(_WORD *)(a2 + 2004) = v816 + 1;
        }
        *((_QWORD *)&v1145[0] + 1) = (v816 << 48) | 0x19C840;
        v823 = v774[48];
        if ((_DWORD)v823 == 0xFFFF)
        {
          v824 = *(__int16 *)(a2 + 1998);
          v823 = *(unsigned __int16 *)(a2 + 1998);
          v774[48] = v824;
          *(_WORD *)(a2 + 4 * v824 + 262) = v773 + 296;
          v825 = v824 + 11;
          if (((v773 + 296) & 0xFFFFFFF0) != 0x90)
            v825 = v824 + 1;
          *(_WORD *)(a2 + 1998) = v825;
        }
        *(_QWORD *)&v1145[1] = ((v823 << 48) | 0x1FE40) + 64;
        v821 = *(unsigned __int16 *)(a2 + 1940);
      }
      if ((_DWORD)v821 == 0xFFFF)
      {
        v821 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1940) = v821;
        *(_WORD *)(a2 + 2004) = v821 + 1;
      }
      *(_QWORD *)&v1145[0] = (v821 << 48) | 0x72679000;
      (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
      if ((*a1 & 0x2000000000000000) != 0)
      {
        memset(&v1145[1], 0, 56);
        v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
        *(_DWORD *)(a2 + 16) = 1;
        v835 = v774[80];
        if ((_DWORD)v835 == 0xFFFF)
        {
          v836 = *(__int16 *)(a2 + 1998);
          v835 = *(unsigned __int16 *)(a2 + 1998);
          v774[80] = v836;
          *(_WORD *)(a2 + 4 * v836 + 262) = v773 + 312;
          v837 = v836 + 11;
          if (((v773 + 312) & 0xFFFFFFF0) != 0x90)
            v837 = v836 + 1;
          *(_WORD *)(a2 + 1998) = v837;
        }
        *((_QWORD *)&v1145[0] + 1) = ((v835 << 48) | 0x19C840) + 64;
        v838 = *(unsigned __int16 *)(a2 + 1954);
        if ((_DWORD)v838 == 0xFFFF)
        {
          v838 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1954) = v838;
          *(_WORD *)(a2 + 2004) = v838 + 1;
        }
        *(_QWORD *)&v1145[0] = (v838 << 48) | 0x72609000;
        (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
        memset((char *)v1145 + 8, 0, 64);
        v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000041;
        *(_DWORD *)(a2 + 16) = 1;
        v839 = *(unsigned __int16 *)(a2 + 1954);
        if (v839 == 0xFFFF)
        {
          v841 = *(unsigned __int16 *)(a2 + 2004);
          v842 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1954) = v841;
          *(_WORD *)(a2 + 2004) = ++v842;
          *((_QWORD *)&v1145[0] + 1) = ((unint64_t)(unsigned __int16)v841 << 48) | 0x19C840;
          if ((v842 & 0x10000) != 0)
          {
            v841 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1954) = v841;
            *(_WORD *)(a2 + 2004) = v841 + 1;
          }
          v840 = v841 << 48;
        }
        else
        {
          v840 = v839 << 48;
          *((_QWORD *)&v1145[0] + 1) = ((unint64_t)(unsigned __int16)v839 << 48) | 0x19C840;
        }
        *(_QWORD *)&v1145[0] = v840 | 0x72611000;
        (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
        memset((char *)&v1145[1] + 8, 0, 48);
        v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
        *(_DWORD *)(a2 + 16) = 2;
        v832 = *(unsigned __int16 *)(a2 + 1940);
        if ((_DWORD)v832 == 0xFFFF)
        {
          v832 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1940) = v832;
          *(_WORD *)(a2 + 2004) = v832 + 1;
        }
        *((_QWORD *)&v1145[0] + 1) = ((unint64_t)(unsigned __int16)v832 << 48) | 0x19C840;
        v843 = *(unsigned __int16 *)(a2 + 1954);
        if ((_DWORD)v843 == 0xFFFF)
        {
          v843 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1954) = v843;
          *(_WORD *)(a2 + 2004) = v843 + 1;
        }
        v834 = (v843 << 48) | 0x15440;
      }
      else
      {
        memset((char *)&v1145[1] + 8, 0, 48);
        v826 = *(_DWORD *)(a2 + 16);
        *(_DWORD *)(a2 + 16) = 2;
        v1144 = (8 * (v826 & 7)) | 0x100000E02;
        v827 = *(unsigned __int16 *)(a2 + 1954);
        if ((_DWORD)v827 == 0xFFFF)
        {
          v827 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1954) = v827;
          *(_WORD *)(a2 + 2004) = v827 + 1;
        }
        *((_QWORD *)&v1145[0] + 1) = (v827 << 48) | 0x19C840;
        v828 = v774[80];
        if ((_DWORD)v828 == 0xFFFF)
        {
          v829 = *(__int16 *)(a2 + 1998);
          v828 = *(unsigned __int16 *)(a2 + 1998);
          v774[80] = v829;
          *(_WORD *)(a2 + 4 * v829 + 262) = v773 + 312;
          v830 = v829 + 11;
          if (((v773 + 312) & 0xFFFFFFF0) != 0x90)
            v830 = v829 + 1;
          *(_WORD *)(a2 + 1998) = v830;
        }
        *(_QWORD *)&v1145[1] = ((v828 << 48) | 0x1FE40) + 64;
        v831 = *(unsigned __int16 *)(a2 + 1946);
        if ((_DWORD)v831 == 0xFFFF)
        {
          v831 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1946) = v831;
          *(_WORD *)(a2 + 2004) = v831 + 1;
        }
        *(_QWORD *)&v1145[0] = (v831 << 48) | 0x72679000;
        (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
        memset((char *)&v1145[1] + 8, 0, 48);
        v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
        *(_DWORD *)(a2 + 16) = 2;
        v832 = *(unsigned __int16 *)(a2 + 1940);
        if ((_DWORD)v832 == 0xFFFF)
        {
          v832 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1940) = v832;
          *(_WORD *)(a2 + 2004) = v832 + 1;
        }
        *((_QWORD *)&v1145[0] + 1) = ((unint64_t)(unsigned __int16)v832 << 48) | 0x19C840;
        v833 = *(unsigned __int16 *)(a2 + 1946);
        if ((_DWORD)v833 == 0xFFFF)
        {
          v833 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1946) = v833;
          *(_WORD *)(a2 + 2004) = v833 + 1;
        }
        v834 = (v833 << 48) | 0x19C840;
      }
      *(_QWORD *)&v1145[1] = v834;
      if ((_DWORD)v832 == 0xFFFF)
      {
        v832 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1940) = v832;
        *(_WORD *)(a2 + 2004) = v832 + 1;
      }
      *(_QWORD *)&v1145[0] = (v832 << 48) | 0x72679000;
      (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
    }
    if ((*a1 & 0x400000000000000) == 0)
    {
      if ((*a1 & 0x2000000000000) != 0)
      {
        memset((char *)&v1145[1] + 8, 0, 48);
        v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x31000007C2;
        *(_DWORD *)(a2 + 16) = 2;
        v847 = *(unsigned __int16 *)(a2 + 1942);
        if ((_DWORD)v847 == 0xFFFF)
        {
          v847 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1942) = v847;
          goto LABEL_1217;
        }
      }
      else
      {
        if (!v1132)
        {
          memset(&v1145[1], 0, 56);
          v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
          *(_DWORD *)(a2 + 16) = 1;
          v869 = v774[64];
          if ((_DWORD)v869 == 0xFFFF)
          {
            v870 = *(__int16 *)(a2 + 1998);
            v869 = *(unsigned __int16 *)(a2 + 1998);
            v774[64] = v870;
            *(_WORD *)(a2 + 4 * v870 + 262) = v773 + 304;
            v871 = v870 + 11;
            if (((v773 + 304) & 0xFFFFFFF0) != 0x90)
              v871 = v870 + 1;
            *(_WORD *)(a2 + 1998) = v871;
          }
          *((_QWORD *)&v1145[0] + 1) = ((v869 << 48) | 0x19C840) + 64;
          v872 = *(unsigned __int16 *)(a2 + 1932);
          if ((_DWORD)v872 == 0xFFFF)
          {
            v872 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1932) = v872;
            *(_WORD *)(a2 + 2004) = v872 + 1;
          }
          *(_QWORD *)&v1145[0] = (v872 << 48) | 0x72679000;
          (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
LABEL_1223:
          memset((char *)&v1145[1] + 8, 0, 48);
          v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000A02;
          *(_DWORD *)(a2 + 16) = 2;
          v856 = *(unsigned __int16 *)(a2 + 1902);
          if ((_DWORD)v856 == 0xFFFF)
          {
            v856 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1902) = v856;
            *(_WORD *)(a2 + 2004) = v856 + 1;
          }
          v857 = 1689664;
          *((_QWORD *)&v1145[0] + 1) = (v856 << 48) | 0x19C840;
          v858 = *(unsigned __int16 *)(a2 + 1932);
          if ((_DWORD)v858 == 0xFFFF)
          {
            v858 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1932) = v858;
LABEL_1260:
            *(_WORD *)(a2 + 2004) = v858 + 1;
            goto LABEL_1261;
          }
          goto LABEL_1261;
        }
        memset((char *)&v1145[1] + 8, 0, 48);
        v844 = 8 * (*(_DWORD *)(a2 + 16) & 7);
        *(_DWORD *)(a2 + 16) = 2;
        v1144 = v844 | 0x3100011042;
        v845 = *(unsigned __int16 *)(a2 + 1904);
        if ((_DWORD)v845 == 0xFFFF)
        {
          v845 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1904) = v845;
          *(_WORD *)(a2 + 2004) = v845 + 1;
        }
        *((_QWORD *)&v1145[0] + 1) = (v845 << 48) | 0x19C840;
        *(_QWORD *)&v1145[1] = 2560163840;
        v846 = *(unsigned __int16 *)(a2 + 1946);
        if ((_DWORD)v846 == 0xFFFF)
        {
          v846 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1946) = v846;
          *(_WORD *)(a2 + 2004) = v846 + 1;
        }
        *(_QWORD *)&v1145[0] = (v846 << 48) | 0x72679000;
        (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
        memset((char *)&v1145[1] + 8, 0, 48);
        v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x31000007C2;
        *(_DWORD *)(a2 + 16) = 2;
        v847 = *(unsigned __int16 *)(a2 + 1946);
        if ((_DWORD)v847 == 0xFFFF)
        {
          v847 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1946) = v847;
LABEL_1217:
          *(_WORD *)(a2 + 2004) = v847 + 1;
        }
      }
      *((_QWORD *)&v1145[0] + 1) = (v847 << 48) | 0x19C840;
      v854 = *(unsigned __int16 *)(a2 + 1924);
      if ((_DWORD)v854 == 0xFFFF)
      {
        v854 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1924) = v854;
        *(_WORD *)(a2 + 2004) = v854 + 1;
      }
      *(_QWORD *)&v1145[1] = (v854 << 48) | 0x19C840;
      v855 = *(unsigned __int16 *)(a2 + 1932);
      if ((_DWORD)v855 == 0xFFFF)
      {
        v855 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1932) = v855;
        *(_WORD *)(a2 + 2004) = v855 + 1;
      }
      *(_QWORD *)&v1145[0] = (v855 << 48) | 0x72679000;
      (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
      gleVStateProgram_NormalizeVector(a2, 16, 16, 23, 23);
      goto LABEL_1223;
    }
    memset((char *)&v1145[1] + 8, 0, 48);
    v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000B82;
    *(_DWORD *)(a2 + 16) = 2;
    v848 = *(unsigned __int16 *)(a2 + 1902);
    if ((_DWORD)v848 == 0xFFFF)
    {
      v848 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1902) = v848;
      *(_WORD *)(a2 + 2004) = v848 + 1;
    }
    *((_QWORD *)&v1145[0] + 1) = (v848 << 48) | 0x19C840;
    v849 = *(unsigned __int16 *)(a2 + 1924);
    if ((_DWORD)v849 == 0xFFFF)
    {
      v849 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1924) = v849;
      *(_WORD *)(a2 + 2004) = v849 + 1;
    }
    *(_QWORD *)&v1145[1] = (v849 << 48) | 0x19C840;
    v850 = *(unsigned __int16 *)(a2 + 1932);
    if ((_DWORD)v850 == 0xFFFF)
    {
      v850 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1932) = v850;
      *(_WORD *)(a2 + 2004) = v850 + 1;
    }
    *(_QWORD *)&v1145[0] = (v850 << 48) | 0x72679000;
    (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
    memset(v1145, 0, 72);
    v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000B82;
    *(_DWORD *)(a2 + 16) = 2;
    v851 = *(unsigned __int16 *)(a2 + 1902);
    if ((_DWORD)v851 == 0xFFFF)
    {
      v851 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1902) = v851;
      *(_WORD *)(a2 + 2004) = v851 + 1;
    }
    *((_QWORD *)&v1145[0] + 1) = (v851 << 48) | 0x19C840;
    v852 = *(unsigned __int16 *)(a2 + 1932);
    if (v852 == 0xFFFF)
    {
      v859 = *(unsigned __int16 *)(a2 + 2004);
      v860 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1932) = v859;
      *(_WORD *)(a2 + 2004) = ++v860;
      *(_QWORD *)&v1145[1] = ((unint64_t)(unsigned __int16)v859 << 48) | 0x19C840;
      if ((v860 & 0x10000) != 0)
      {
        v859 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1932) = v859;
        *(_WORD *)(a2 + 2004) = v859 + 1;
      }
      v853 = v859 << 48;
    }
    else
    {
      v853 = v852 << 48;
      *(_QWORD *)&v1145[1] = ((unint64_t)(unsigned __int16)v852 << 48) | 0x19C840;
    }
    *(_QWORD *)&v1145[0] = v853 | 0x72679000;
    (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
    memset((char *)v1145 + 8, 0, 64);
    v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x31000007C2;
    *(_DWORD *)(a2 + 16) = 2;
    v861 = *(unsigned __int16 *)(a2 + 1932);
    if (v861 != 0xFFFF)
    {
      v862 = v861 << 48;
      v863 = ((unint64_t)(unsigned __int16)v861 << 48) | 0x19C840;
      *((_QWORD *)&v1145[0] + 1) = v863;
LABEL_1244:
      *(_QWORD *)&v1145[1] = v863;
      goto LABEL_1245;
    }
    v864 = *(unsigned __int16 *)(a2 + 2004);
    v865 = *(unsigned __int16 *)(a2 + 2004);
    *(_WORD *)(a2 + 1932) = v864;
    v866 = v865 + 1;
    *(_WORD *)(a2 + 2004) = v865 + 1;
    v863 = ((unint64_t)(unsigned __int16)v864 << 48) | 0x19C840;
    *((_QWORD *)&v1145[0] + 1) = v863;
    if ((v866 & 0x10000) == 0)
    {
      v862 = v864 << 48;
      goto LABEL_1244;
    }
    v867 = *(unsigned __int16 *)(a2 + 2004);
    v868 = *(unsigned __int16 *)(a2 + 2004);
    *(_WORD *)(a2 + 1932) = v867;
    *(_WORD *)(a2 + 2004) = ++v868;
    *(_QWORD *)&v1145[1] = ((unint64_t)(unsigned __int16)v867 << 48) | 0x19C840;
    if ((v868 & 0x10000) != 0)
    {
      v867 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1932) = v867;
      *(_WORD *)(a2 + 2004) = v867 + 1;
    }
    v862 = v867 << 48;
LABEL_1245:
    *(_QWORD *)&v1145[0] = v862 | 0x72679000;
    (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
    v873 = *a1;
    memset((char *)&v1145[1] + 8, 0, 48);
    v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x31000007C2;
    *(_DWORD *)(a2 + 16) = 2;
    v874 = *(unsigned __int16 *)(a2 + 1932);
    if ((v873 & 0x2000000000000) != 0)
    {
      if ((_DWORD)v874 == 0xFFFF)
      {
        v874 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1932) = v874;
        *(_WORD *)(a2 + 2004) = v874 + 1;
      }
      *((_QWORD *)&v1145[0] + 1) = ((unint64_t)(unsigned __int16)v874 << 48) | 0x19C840;
      v875 = *(unsigned __int16 *)(a2 + 1924);
      if ((_DWORD)v875 == 0xFFFF)
      {
        v875 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1924) = v875;
        *(_WORD *)(a2 + 2004) = v875 + 1;
      }
      *(_QWORD *)&v1145[1] = (v875 << 48) | 0x19C840;
      if ((_DWORD)v874 == 0xFFFF)
      {
        v874 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1932) = v874;
        *(_WORD *)(a2 + 2004) = v874 + 1;
      }
      *(_QWORD *)&v1145[0] = (v874 << 48) | 0x72679000;
      (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
      memset((char *)&v1145[1] + 8, 0, 48);
      v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000A02;
      *(_DWORD *)(a2 + 16) = 2;
      v876 = *(unsigned __int16 *)(a2 + 1932);
      if ((_DWORD)v876 == 0xFFFF)
      {
        v876 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1932) = v876;
        *(_WORD *)(a2 + 2004) = v876 + 1;
      }
      v857 = 1689664;
      *((_QWORD *)&v1145[0] + 1) = (v876 << 48) | 0x19C840;
      v858 = *(unsigned __int16 *)(a2 + 1942);
      if ((_DWORD)v858 == 0xFFFF)
      {
        v858 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1942) = v858;
        goto LABEL_1260;
      }
    }
    else
    {
      if ((_DWORD)v874 == 0xFFFF)
      {
        v874 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1932) = v874;
        *(_WORD *)(a2 + 2004) = v874 + 1;
      }
      v857 = 87104;
      *((_QWORD *)&v1145[0] + 1) = (v874 << 48) | 0x15440;
      v858 = *(unsigned __int16 *)(a2 + 1924);
      if ((_DWORD)v858 == 0xFFFF)
      {
        v858 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1924) = v858;
        *(_WORD *)(a2 + 2004) = v858 + 1;
      }
    }
LABEL_1261:
    *(_QWORD *)&v1145[1] = v857 | (v858 << 48);
    v877 = *(unsigned __int16 *)(a2 + 1912);
    if ((_DWORD)v877 == 0xFFFF)
    {
      v877 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1912) = v877;
      *(_WORD *)(a2 + 2004) = v877 + 1;
    }
    *(_QWORD *)&v1145[0] = (v877 << 48) | 0x72621000;
    (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
    v878 = *a1;
    if ((*a1 & 0x2000000000000000) != 0)
    {
      memset(&v1145[1], 0, 56);
      v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
      *(_DWORD *)(a2 + 16) = 1;
      v879 = *(unsigned __int16 *)(a2 + 1628);
      if ((_DWORD)v879 == 0xFFFF)
      {
        v880 = *(__int16 *)(a2 + 1998);
        v879 = *(unsigned __int16 *)(a2 + 1998);
        *(_WORD *)(a2 + 1628) = v880;
        *(_WORD *)(a2 + 4 * v880 + 262) = 342;
        *(_WORD *)(a2 + 1998) = v880 + 1;
      }
      *((_QWORD *)&v1145[0] + 1) = (v879 << 48) | 0x80;
      v881 = *(unsigned __int16 *)(a2 + 1912);
      if ((_DWORD)v881 == 0xFFFF)
      {
        v881 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1912) = v881;
        *(_WORD *)(a2 + 2004) = v881 + 1;
      }
      *(_QWORD *)&v1145[0] = (v881 << 48) | 0x72609000;
      (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
      v878 = *a1;
    }
    if ((v878 & 0x1000000000000) != 0)
    {
      memset(&v1145[1], 0, 56);
      v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
      *(_DWORD *)(a2 + 16) = 1;
      v882 = *(unsigned __int16 *)(a2 + 1912);
      if ((_DWORD)v882 == 0xFFFF)
      {
        v882 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1912) = v882;
        *(_WORD *)(a2 + 2004) = v882 + 1;
      }
      *((_QWORD *)&v1145[0] + 1) = ((v882 << 48) | 0x19C840) + 16;
      v883 = *(unsigned __int16 *)(a2 + 1914);
      if ((_DWORD)v883 == 0xFFFF)
      {
        v883 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1914) = v883;
        *(_WORD *)(a2 + 2004) = v883 + 1;
      }
      *(_QWORD *)&v1145[0] = (v883 << 48) | 0x72679000;
      (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
      v878 = *a1;
      if ((*a1 & 0x2000000000000000) != 0)
      {
        memset(&v1145[1], 0, 56);
        v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
        *(_DWORD *)(a2 + 16) = 1;
        v884 = *(unsigned __int16 *)(a2 + 1632);
        if ((_DWORD)v884 == 0xFFFF)
        {
          v885 = *(__int16 *)(a2 + 1998);
          v884 = *(unsigned __int16 *)(a2 + 1998);
          *(_WORD *)(a2 + 1632) = v885;
          *(_WORD *)(a2 + 4 * v885 + 262) = 343;
          *(_WORD *)(a2 + 1998) = v885 + 1;
        }
        *((_QWORD *)&v1145[0] + 1) = (v884 << 48) | 0x80;
        v886 = *(unsigned __int16 *)(a2 + 1914);
        if ((_DWORD)v886 == 0xFFFF)
        {
          v886 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1914) = v886;
          *(_WORD *)(a2 + 2004) = v886 + 1;
        }
        *(_QWORD *)&v1145[0] = (v886 << 48) | 0x72609000;
        (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
        v878 = *a1;
      }
    }
    if ((v878 & 0x2000000000000000) != 0)
    {
      memset((char *)v1145 + 8, 0, 64);
      v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000041;
      *(_DWORD *)(a2 + 16) = 1;
      v896 = *(unsigned __int16 *)(a2 + 1912);
      if (v896 != 0xFFFF)
      {
        v895 = v896 << 48;
        *((_QWORD *)&v1145[0] + 1) = ((unint64_t)(unsigned __int16)v896 << 48) | 0x19C840;
        goto LABEL_1307;
      }
      v900 = *(unsigned __int16 *)(a2 + 2004);
      v901 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1912) = v900;
      *(_WORD *)(a2 + 2004) = ++v901;
      *((_QWORD *)&v1145[0] + 1) = ((unint64_t)(unsigned __int16)v900 << 48) | 0x19C840;
      if ((v901 & 0x10000) != 0)
      {
LABEL_1305:
        v900 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1912) = v900;
        *(_WORD *)(a2 + 2004) = v900 + 1;
      }
      v895 = v900 << 48;
      goto LABEL_1307;
    }
    memset((char *)&v1145[1] + 8, 0, 48);
    v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000B42;
    *(_DWORD *)(a2 + 16) = 2;
    v887 = *(unsigned __int16 *)(a2 + 1912);
    if ((_DWORD)v887 == 0xFFFF)
    {
      v887 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1912) = v887;
      *(_WORD *)(a2 + 2004) = v887 + 1;
    }
    *((_QWORD *)&v1145[0] + 1) = (v887 << 48) | 0x19C240;
    v888 = *(unsigned __int16 *)(a2 + 1664);
    if ((_DWORD)v888 == 0xFFFF)
    {
      v889 = *(__int16 *)(a2 + 1998);
      v888 = *(unsigned __int16 *)(a2 + 1998);
      *(_WORD *)(a2 + 1664) = v889;
      *(_WORD *)(a2 + 4 * v889 + 262) = 351;
      *(_WORD *)(a2 + 1998) = v889 + 1;
    }
    *(_QWORD *)&v1145[1] = (v888 << 48) | 0xAA80;
    if ((_DWORD)v887 == 0xFFFF)
    {
      v887 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1912) = v887;
      *(_WORD *)(a2 + 2004) = v887 + 1;
    }
    *(_QWORD *)&v1145[0] = (v887 << 48) | 0x72679000;
    (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
    memset((char *)&v1145[1] + 8, 0, 48);
    v890 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = 2;
    v1144 = (8 * (v890 & 7)) | 0x100000E02;
    v891 = *(unsigned __int16 *)(a2 + 1912);
    if ((_DWORD)v891 == 0xFFFF)
    {
      v891 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1912) = v891;
      *(_WORD *)(a2 + 2004) = v891 + 1;
    }
    *((_QWORD *)&v1145[0] + 1) = ((unint64_t)(unsigned __int16)v891 << 48) | 0x40;
    v892 = *(unsigned __int16 *)(a2 + 1628);
    if ((_DWORD)v892 == 0xFFFF)
    {
      v893 = *(__int16 *)(a2 + 1998);
      v892 = *(unsigned __int16 *)(a2 + 1998);
      *(_WORD *)(a2 + 1628) = v893;
      *(_WORD *)(a2 + 4 * v893 + 262) = 342;
      *(_WORD *)(a2 + 1998) = v893 + 1;
    }
    *(_QWORD *)&v1145[1] = (v892 << 48) | 0x80;
    if ((_DWORD)v891 == 0xFFFF)
    {
      v891 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1912) = v891;
      *(_WORD *)(a2 + 2004) = v891 + 1;
    }
    *(_QWORD *)&v1145[0] = (v891 << 48) | 0x72611000;
    (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
    memset(v1145, 0, 72);
    v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000F83;
    *(_DWORD *)(a2 + 16) = 3;
    v894 = *(unsigned __int16 *)(a2 + 1912);
    if (v894 == 0xFFFF)
    {
      v897 = *(unsigned __int16 *)(a2 + 2004);
      LODWORD(v894) = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1912) = v897;
      *(_WORD *)(a2 + 2004) = v894 + 1;
      *((_QWORD *)&v1145[0] + 1) = ((unint64_t)(unsigned __int16)v897 << 48) | 0xAA50;
      if ((((_DWORD)v894 + 1) & 0x10000) != 0)
      {
        v897 = *(unsigned __int16 *)(a2 + 2004);
        LODWORD(v894) = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1912) = v897;
        *(_WORD *)(a2 + 2004) = v897 + 1;
      }
      v895 = v897 << 48;
    }
    else
    {
      v895 = v894 << 48;
      *((_QWORD *)&v1145[0] + 1) = ((unint64_t)(unsigned __int16)v894 << 48) | 0xAA50;
    }
    *(_QWORD *)&v1145[1] = v895 | 0x19C840;
    v898 = *(unsigned __int16 *)(a2 + 1664);
    if ((_DWORD)v898 == 0xFFFF)
    {
      v899 = *(__int16 *)(a2 + 1998);
      v898 = *(unsigned __int16 *)(a2 + 1998);
      *(_WORD *)(a2 + 1664) = v899;
      *(_WORD *)(a2 + 4 * v899 + 262) = 351;
      *(_WORD *)(a2 + 1998) = v899 + 1;
    }
    *((_QWORD *)&v1145[1] + 1) = (v898 << 48) | 0xAA80;
    if ((_DWORD)v894 == 0xFFFF)
      goto LABEL_1305;
LABEL_1307:
    *(_QWORD *)&v1145[0] = v895 | 0x72679000;
    (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
    if ((*a1 & 0x1000000000000) == 0)
      goto LABEL_1334;
    if ((*a1 & 0x2000000000000000) == 0)
    {
      memset((char *)&v1145[1] + 8, 0, 48);
      v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000B42;
      *(_DWORD *)(a2 + 16) = 2;
      v902 = *(unsigned __int16 *)(a2 + 1914);
      if ((_DWORD)v902 == 0xFFFF)
      {
        v902 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1914) = v902;
        *(_WORD *)(a2 + 2004) = v902 + 1;
      }
      *((_QWORD *)&v1145[0] + 1) = (v902 << 48) | 0x19C240;
      v903 = *(unsigned __int16 *)(a2 + 1664);
      if ((_DWORD)v903 == 0xFFFF)
      {
        v904 = *(__int16 *)(a2 + 1998);
        v903 = *(unsigned __int16 *)(a2 + 1998);
        *(_WORD *)(a2 + 1664) = v904;
        *(_WORD *)(a2 + 4 * v904 + 262) = 351;
        *(_WORD *)(a2 + 1998) = v904 + 1;
        v902 = *(unsigned __int16 *)(a2 + 1914);
      }
      *(_QWORD *)&v1145[1] = (v903 << 48) | 0xAA80;
      if ((_DWORD)v902 == 0xFFFF)
      {
        v902 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1914) = v902;
        *(_WORD *)(a2 + 2004) = v902 + 1;
      }
      *(_QWORD *)&v1145[0] = (v902 << 48) | 0x72679000;
      (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
      memset((char *)&v1145[1] + 8, 0, 48);
      v905 = *(_DWORD *)(a2 + 16);
      *(_DWORD *)(a2 + 16) = 2;
      v1144 = (8 * (v905 & 7)) | 0x100000E02;
      v906 = *(unsigned __int16 *)(a2 + 1914);
      if ((_DWORD)v906 == 0xFFFF)
      {
        v906 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1914) = v906;
        *(_WORD *)(a2 + 2004) = v906 + 1;
      }
      *((_QWORD *)&v1145[0] + 1) = (v906 << 48) | 0x40;
      v907 = *(unsigned __int16 *)(a2 + 1632);
      if ((_DWORD)v907 == 0xFFFF)
      {
        v908 = *(__int16 *)(a2 + 1998);
        v907 = *(unsigned __int16 *)(a2 + 1998);
        *(_WORD *)(a2 + 1632) = v908;
        *(_WORD *)(a2 + 4 * v908 + 262) = 343;
        *(_WORD *)(a2 + 1998) = v908 + 1;
        v906 = *(unsigned __int16 *)(a2 + 1914);
      }
      *(_QWORD *)&v1145[1] = (v907 << 48) | 0x80;
      if ((_DWORD)v906 == 0xFFFF)
      {
        v906 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1914) = v906;
        *(_WORD *)(a2 + 2004) = v906 + 1;
      }
      *(_QWORD *)&v1145[0] = (v906 << 48) | 0x72611000;
      (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
      memset(v1145, 0, 72);
      v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000F83;
      *(_DWORD *)(a2 + 16) = 3;
      v909 = *(unsigned __int16 *)(a2 + 1914);
      if (v909 == 0xFFFF)
      {
        v913 = *(unsigned __int16 *)(a2 + 2004);
        v909 = v913;
        *(_WORD *)(a2 + 1914) = v913;
        *(_WORD *)(a2 + 2004) = v913 + 1;
        *((_QWORD *)&v1145[0] + 1) = ((unint64_t)(unsigned __int16)v913 << 48) | 0xAA50;
        if ((((_DWORD)v913 + 1) & 0x10000) != 0)
        {
          v913 = *(unsigned __int16 *)(a2 + 2004);
          v909 = v913;
          *(_WORD *)(a2 + 1914) = v913;
          *(_WORD *)(a2 + 2004) = v913 + 1;
        }
        v910 = v913 << 48;
      }
      else
      {
        v910 = v909 << 48;
        *((_QWORD *)&v1145[0] + 1) = ((unint64_t)(unsigned __int16)v909 << 48) | 0xAA50;
      }
      *(_QWORD *)&v1145[1] = v910 | 0x19C840;
      v914 = *(unsigned __int16 *)(a2 + 1664);
      if ((_DWORD)v914 == 0xFFFF)
      {
        v915 = *(__int16 *)(a2 + 1998);
        v914 = *(unsigned __int16 *)(a2 + 1998);
        *(_WORD *)(a2 + 1664) = v915;
        *(_WORD *)(a2 + 4 * v915 + 262) = 351;
        *(_WORD *)(a2 + 1998) = v915 + 1;
        v909 = *(unsigned __int16 *)(a2 + 1914);
      }
      *((_QWORD *)&v1145[1] + 1) = (v914 << 48) | 0xAA80;
      if ((_DWORD)v909 != 0xFFFF)
        goto LABEL_1332;
LABEL_1331:
      v909 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1914) = v909;
      *(_WORD *)(a2 + 2004) = v909 + 1;
LABEL_1332:
      v912 = v909 << 48;
      goto LABEL_1333;
    }
    memset((char *)v1145 + 8, 0, 64);
    v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000041;
    *(_DWORD *)(a2 + 16) = 1;
    v911 = *(unsigned __int16 *)(a2 + 1914);
    if (v911 == 0xFFFF)
    {
      v909 = *(unsigned __int16 *)(a2 + 2004);
      v1013 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1914) = v909;
      *(_WORD *)(a2 + 2004) = ++v1013;
      *((_QWORD *)&v1145[0] + 1) = ((unint64_t)(unsigned __int16)v909 << 48) | 0x19C840;
      if ((v1013 & 0x10000) == 0)
        goto LABEL_1332;
      goto LABEL_1331;
    }
    v912 = v911 << 48;
    *((_QWORD *)&v1145[0] + 1) = ((unint64_t)(unsigned __int16)v911 << 48) | 0x19C840;
LABEL_1333:
    *(_QWORD *)&v1145[0] = v912 | 0x72679000;
    (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
LABEL_1334:
    if ((v1124 & 6) == 6)
    {
      memset((char *)&v1145[1] + 8, 0, 48);
      v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
      *(_DWORD *)(a2 + 16) = 2;
      v916 = *v774;
      v917 = v1141;
      if ((_DWORD)v916 == 0xFFFF)
      {
        v918 = *(__int16 *)(a2 + 1998);
        v916 = *(unsigned __int16 *)(a2 + 1998);
        *v774 = v918;
        *(_WORD *)(a2 + 4 * v918 + 262) = v773 + 272;
        v919 = v918 + 11;
        if (((v773 + 272) & 0xFFFFFFF0) != 0x90)
          v919 = v918 + 1;
        *(_WORD *)(a2 + 1998) = v919;
      }
      *((_QWORD *)&v1145[0] + 1) = ((v916 << 48) | 0x19C840) + 64;
      *(_QWORD *)&v1145[1] = (gleVStateProgram_GetAttrib(a2, 2) << 48) | 0x19C800;
      v920 = *(unsigned __int16 *)(a2 + 1946);
      if ((_DWORD)v920 == 0xFFFF)
      {
        v920 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1946) = v920;
        *(_WORD *)(a2 + 2004) = v920 + 1;
      }
      *(_QWORD *)&v1145[0] = (v920 << 48) | 0x72679000;
      (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
      memset((char *)&v1145[1] + 8, 0, 48);
      v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
      *(_DWORD *)(a2 + 16) = 2;
      v921 = v774[16];
      if ((_DWORD)v921 == 0xFFFF)
      {
        v922 = *(__int16 *)(a2 + 1998);
        v921 = *(unsigned __int16 *)(a2 + 1998);
        v774[16] = v922;
        *(_WORD *)(a2 + 4 * v922 + 262) = v773 + 280;
        v923 = v922 + 11;
        if (((v773 + 280) & 0xFFFFFFF0) != 0x90)
          v923 = v922 + 1;
        *(_WORD *)(a2 + 1998) = v923;
      }
      *((_QWORD *)&v1145[0] + 1) = ((v921 << 48) | 0x19C840) + 64;
      *(_QWORD *)&v1145[1] = (gleVStateProgram_GetAttrib(a2, 2) << 48) | 0x19C800;
      v924 = *(unsigned __int16 *)(a2 + 1962);
      if ((_DWORD)v924 == 0xFFFF)
      {
        v924 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1962) = v924;
        *(_WORD *)(a2 + 2004) = v924 + 1;
      }
      *(_QWORD *)&v1145[0] = (v924 << 48) | 0x72679000;
      (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
      memset(v1145, 0, 72);
      v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
      *(_DWORD *)(a2 + 16) = 3;
      v925 = *(unsigned __int16 *)(a2 + 1912);
      if ((_DWORD)v925 == 0xFFFF)
      {
        v925 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1912) = v925;
        *(_WORD *)(a2 + 2004) = v925 + 1;
      }
      *((_QWORD *)&v1145[0] + 1) = (v925 << 48) | 0xAA40;
      v926 = *(unsigned __int16 *)(a2 + 1962);
      if ((_DWORD)v926 == 0xFFFF)
      {
        v926 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1962) = v926;
        *(_WORD *)(a2 + 2004) = v926 + 1;
      }
      v927 = (v926 << 48) | 0x19C840;
      goto LABEL_1375;
    }
    v917 = v1141;
    if ((v1124 & 2) == 0)
    {
      if ((v1124 & 4) != 0)
      {
        memset((char *)&v1145[1] + 8, 0, 48);
        v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
        *(_DWORD *)(a2 + 16) = 2;
        v969 = v774[16];
        if ((_DWORD)v969 == 0xFFFF)
        {
          v970 = *(__int16 *)(a2 + 1998);
          v969 = *(unsigned __int16 *)(a2 + 1998);
          v774[16] = v970;
          *(_WORD *)(a2 + 4 * v970 + 262) = v773 + 280;
          v971 = v970 + 11;
          if (((v773 + 280) & 0xFFFFFFF0) != 0x90)
            v971 = v970 + 1;
          *(_WORD *)(a2 + 1998) = v971;
        }
        *((_QWORD *)&v1145[0] + 1) = ((v969 << 48) | 0x19C840) + 64;
        *(_QWORD *)&v1145[1] = (gleVStateProgram_GetAttrib(a2, 2) << 48) | 0x19C800;
        v972 = *(unsigned __int16 *)(a2 + 1962);
        if ((_DWORD)v972 == 0xFFFF)
        {
          v972 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1962) = v972;
          *(_WORD *)(a2 + 2004) = v972 + 1;
        }
        *(_QWORD *)&v1145[0] = (v972 << 48) | 0x72679000;
        (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
        memset(v1145, 0, 72);
        v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
        *(_DWORD *)(a2 + 16) = 3;
        v973 = *(unsigned __int16 *)(a2 + 1912);
        if ((_DWORD)v973 == 0xFFFF)
        {
          v973 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1912) = v973;
          *(_WORD *)(a2 + 2004) = v973 + 1;
        }
        *((_QWORD *)&v1145[0] + 1) = (v973 << 48) | 0xAA40;
        v974 = *(unsigned __int16 *)(a2 + 1962);
        if ((_DWORD)v974 == 0xFFFF)
        {
          v974 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1962) = v974;
          *(_WORD *)(a2 + 2004) = v974 + 1;
        }
        *(_QWORD *)&v1145[1] = (v974 << 48) | 0x19C840;
        v933 = (unsigned __int16)*(v1143 - 66);
        if ((_DWORD)v933 == 0xFFFF)
        {
          v934 = v1141 + 224;
          v935 = *(__int16 *)(a2 + 1998);
          v933 = *(unsigned __int16 *)(a2 + 1998);
          *(v1143 - 66) = v935;
          v936 = 2 * v773 + 224;
LABEL_1421:
          *(_WORD *)(a2 + 4 * v935 + 262) = v936;
          v75 = (v934 & 0xFFFFFFF0) == 144;
          v975 = v935 + 11;
          if (!v75)
            v975 = v935 + 1;
          *(_WORD *)(a2 + 1998) = v975;
        }
      }
      else
      {
        memset(v1145, 0, 72);
        v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
        *(_DWORD *)(a2 + 16) = 3;
        v928 = *(unsigned __int16 *)(a2 + 1912);
        if ((_DWORD)v928 == 0xFFFF)
        {
          v928 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1912) = v928;
          *(_WORD *)(a2 + 2004) = v928 + 1;
        }
        *((_QWORD *)&v1145[0] + 1) = (v928 << 48) | 0xAA40;
        v929 = v1143;
        v930 = (unsigned __int16)*(v1143 - 34);
        if ((_DWORD)v930 == 0xFFFF)
        {
          v931 = *(__int16 *)(a2 + 1998);
          v930 = *(unsigned __int16 *)(a2 + 1998);
          *(v1143 - 34) = v931;
          *(_WORD *)(a2 + 4 * v931 + 262) = v1141 + 240;
          v932 = v931 + 11;
          if ((((_DWORD)v1141 + 240) & 0xFFFFFFF0) != 0x90)
            v932 = v931 + 1;
          *(_WORD *)(a2 + 1998) = v932;
          v929 = v1143;
        }
        *(_QWORD *)&v1145[1] = ((v930 << 48) | 0x19C840) + 64;
        v933 = (unsigned __int16)*(v929 - 66);
        if ((_DWORD)v933 == 0xFFFF)
        {
          v934 = v1141 + 224;
          v935 = *(__int16 *)(a2 + 1998);
          v933 = *(unsigned __int16 *)(a2 + 1998);
          *(v1143 - 66) = v935;
          v936 = v1141 + 224;
          goto LABEL_1421;
        }
      }
      *((_QWORD *)&v1145[1] + 1) = ((v933 << 48) | 0x19C840) + 64;
      v947 = *(unsigned __int16 *)(a2 + 1946);
      if ((_DWORD)v947 != 0xFFFF)
        goto LABEL_1379;
LABEL_1378:
      v947 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1946) = v947;
      *(_WORD *)(a2 + 2004) = v947 + 1;
      goto LABEL_1379;
    }
    memset((char *)&v1145[1] + 8, 0, 48);
    v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
    *(_DWORD *)(a2 + 16) = 2;
    v937 = *v774;
    if ((_DWORD)v937 == 0xFFFF)
    {
      v938 = *(__int16 *)(a2 + 1998);
      v937 = *(unsigned __int16 *)(a2 + 1998);
      *v774 = v938;
      *(_WORD *)(a2 + 4 * v938 + 262) = v773 + 272;
      v939 = v938 + 11;
      if (((v773 + 272) & 0xFFFFFFF0) != 0x90)
        v939 = v938 + 1;
      *(_WORD *)(a2 + 1998) = v939;
    }
    *((_QWORD *)&v1145[0] + 1) = ((v937 << 48) | 0x19C840) + 64;
    *(_QWORD *)&v1145[1] = (gleVStateProgram_GetAttrib(a2, 2) << 48) | 0x19C800;
    v940 = *(unsigned __int16 *)(a2 + 1946);
    if ((_DWORD)v940 == 0xFFFF)
    {
      v940 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1946) = v940;
      *(_WORD *)(a2 + 2004) = v940 + 1;
    }
    *(_QWORD *)&v1145[0] = (v940 << 48) | 0x72679000;
    (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
    memset(v1145, 0, 72);
    v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
    *(_DWORD *)(a2 + 16) = 3;
    v941 = *(unsigned __int16 *)(a2 + 1912);
    if ((_DWORD)v941 == 0xFFFF)
    {
      v941 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1912) = v941;
      *(_WORD *)(a2 + 2004) = v941 + 1;
    }
    *((_QWORD *)&v1145[0] + 1) = (v941 << 48) | 0xAA40;
    v942 = (unsigned __int16)*(v1143 - 34);
    if ((_DWORD)v942 == 0xFFFF)
    {
      v943 = *(__int16 *)(a2 + 1998);
      v942 = *(unsigned __int16 *)(a2 + 1998);
      *(v1143 - 34) = v943;
      *(_WORD *)(a2 + 4 * v943 + 262) = 2 * v773 + 240;
      v944 = v943 + 11;
      if ((((_DWORD)v1141 + 240) & 0xFFFFFFF0) != 0x90)
        v944 = v943 + 1;
      *(_WORD *)(a2 + 1998) = v944;
    }
    v927 = ((v942 << 48) | 0x19C840) + 64;
LABEL_1375:
    *(_QWORD *)&v1145[1] = v927;
    v945 = *(unsigned __int16 *)(a2 + 1946);
    if (v945 != 0xFFFF)
    {
      v946 = v945 << 48;
      *((_QWORD *)&v1145[1] + 1) = ((unint64_t)(unsigned __int16)v945 << 48) | 0x19C840;
      goto LABEL_1380;
    }
    v947 = *(unsigned __int16 *)(a2 + 2004);
    v948 = *(unsigned __int16 *)(a2 + 2004);
    *(_WORD *)(a2 + 1946) = v947;
    *(_WORD *)(a2 + 2004) = ++v948;
    *((_QWORD *)&v1145[1] + 1) = ((unint64_t)(unsigned __int16)v947 << 48) | 0x19C840;
    if ((v948 & 0x10000) != 0)
      goto LABEL_1378;
LABEL_1379:
    v946 = v947 << 48;
LABEL_1380:
    *(_QWORD *)&v1145[0] = v946 | 0x72679000;
    (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
    if ((*a1 & 0x1000000000000) == 0)
      goto LABEL_1445;
    if ((v1121 & 6) == 6)
    {
      memset((char *)&v1145[1] + 8, 0, 48);
      v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
      *(_DWORD *)(a2 + 16) = 2;
      v949 = *v774;
      if ((_DWORD)v949 == 0xFFFF)
      {
        v950 = *(__int16 *)(a2 + 1998);
        v949 = *(unsigned __int16 *)(a2 + 1998);
        *v774 = v950;
        *(_WORD *)(a2 + 4 * v950 + 262) = v773 + 272;
        v951 = v950 + 11;
        if (((v773 + 272) & 0xFFFFFFF0) != 0x90)
          v951 = v950 + 1;
        *(_WORD *)(a2 + 1998) = v951;
      }
      *((_QWORD *)&v1145[0] + 1) = ((v949 << 48) | 0x19C840) + 64;
      *(_QWORD *)&v1145[1] = (gleVStateProgram_GetAttrib(a2, 2) << 48) | 0x19C800;
      v952 = *(unsigned __int16 *)(a2 + 1954);
      if ((_DWORD)v952 == 0xFFFF)
      {
        v952 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1954) = v952;
        *(_WORD *)(a2 + 2004) = v952 + 1;
      }
      *(_QWORD *)&v1145[0] = (v952 << 48) | 0x72679000;
      (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
      memset((char *)&v1145[1] + 8, 0, 48);
      v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
      *(_DWORD *)(a2 + 16) = 2;
      v953 = v774[16];
      if ((_DWORD)v953 == 0xFFFF)
      {
        v954 = *(__int16 *)(a2 + 1998);
        v953 = *(unsigned __int16 *)(a2 + 1998);
        v774[16] = v954;
        *(_WORD *)(a2 + 4 * v954 + 262) = v773 + 280;
        v955 = v954 + 11;
        if (((v773 + 280) & 0xFFFFFFF0) != 0x90)
          v955 = v954 + 1;
        *(_WORD *)(a2 + 1998) = v955;
      }
      *((_QWORD *)&v1145[0] + 1) = ((v953 << 48) | 0x19C840) + 64;
      *(_QWORD *)&v1145[1] = (gleVStateProgram_GetAttrib(a2, 2) << 48) | 0x19C800;
      v956 = *(unsigned __int16 *)(a2 + 1970);
      if ((_DWORD)v956 == 0xFFFF)
      {
        v956 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1970) = v956;
        *(_WORD *)(a2 + 2004) = v956 + 1;
      }
      *(_QWORD *)&v1145[0] = (v956 << 48) | 0x72679000;
      (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
      memset(v1145, 0, 72);
      v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
      *(_DWORD *)(a2 + 16) = 3;
      v957 = *(unsigned __int16 *)(a2 + 1914);
      if ((_DWORD)v957 == 0xFFFF)
      {
        v957 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1914) = v957;
        *(_WORD *)(a2 + 2004) = v957 + 1;
      }
      *((_QWORD *)&v1145[0] + 1) = (v957 << 48) | 0xAA40;
      v958 = *(unsigned __int16 *)(a2 + 1970);
      if ((_DWORD)v958 == 0xFFFF)
      {
        v958 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1970) = v958;
        *(_WORD *)(a2 + 2004) = v958 + 1;
      }
      v959 = (v958 << 48) | 0x19C840;
      goto LABEL_1439;
    }
    if ((v1121 & 2) == 0)
    {
      if ((v1121 & 4) != 0)
      {
        memset((char *)&v1145[1] + 8, 0, 48);
        v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
        *(_DWORD *)(a2 + 16) = 2;
        v1040 = v774[16];
        if ((_DWORD)v1040 == 0xFFFF)
        {
          v1041 = *(__int16 *)(a2 + 1998);
          v1040 = *(unsigned __int16 *)(a2 + 1998);
          v774[16] = v1041;
          *(_WORD *)(a2 + 4 * v1041 + 262) = v773 + 280;
          v1042 = v1041 + 11;
          if (((v773 + 280) & 0xFFFFFFF0) != 0x90)
            v1042 = v1041 + 1;
          *(_WORD *)(a2 + 1998) = v1042;
        }
        *((_QWORD *)&v1145[0] + 1) = ((v1040 << 48) | 0x19C840) + 64;
        *(_QWORD *)&v1145[1] = (gleVStateProgram_GetAttrib(a2, 2) << 48) | 0x19C800;
        v1043 = *(unsigned __int16 *)(a2 + 1970);
        if ((_DWORD)v1043 == 0xFFFF)
        {
          v1043 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1970) = v1043;
          *(_WORD *)(a2 + 2004) = v1043 + 1;
        }
        *(_QWORD *)&v1145[0] = (v1043 << 48) | 0x72679000;
        (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
        memset(v1145, 0, 72);
        v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
        *(_DWORD *)(a2 + 16) = 3;
        v1044 = *(unsigned __int16 *)(a2 + 1914);
        if ((_DWORD)v1044 == 0xFFFF)
        {
          v1044 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1914) = v1044;
          *(_WORD *)(a2 + 2004) = v1044 + 1;
        }
        *((_QWORD *)&v1145[0] + 1) = (v1044 << 48) | 0xAA40;
        v1045 = *(unsigned __int16 *)(a2 + 1970);
        if ((_DWORD)v1045 == 0xFFFF)
        {
          v1045 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1970) = v1045;
          *(_WORD *)(a2 + 2004) = v1045 + 1;
        }
        *(_QWORD *)&v1145[1] = (v1045 << 48) | 0x19C840;
        v965 = (unsigned __int16)*(v1143 - 64);
        if ((_DWORD)v965 == 0xFFFF)
        {
          v966 = v917 + 225;
          v967 = *(__int16 *)(a2 + 1998);
          v965 = *(unsigned __int16 *)(a2 + 1998);
          *(v1143 - 64) = v967;
          v968 = 2 * v773 + 225;
LABEL_1550:
          *(_WORD *)(a2 + 4 * v967 + 262) = v968;
          v75 = (v966 & 0xFFFFFFF0) == 144;
          v1046 = v967 + 11;
          if (!v75)
            v1046 = v967 + 1;
          *(_WORD *)(a2 + 1998) = v1046;
        }
      }
      else
      {
        memset(v1145, 0, 72);
        v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
        *(_DWORD *)(a2 + 16) = 3;
        v960 = *(unsigned __int16 *)(a2 + 1914);
        if ((_DWORD)v960 == 0xFFFF)
        {
          v960 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1914) = v960;
          *(_WORD *)(a2 + 2004) = v960 + 1;
        }
        *((_QWORD *)&v1145[0] + 1) = (v960 << 48) | 0xAA40;
        v961 = v1143;
        v962 = (unsigned __int16)*(v1143 - 32);
        if ((_DWORD)v962 == 0xFFFF)
        {
          v963 = *(__int16 *)(a2 + 1998);
          v962 = *(unsigned __int16 *)(a2 + 1998);
          *(v1143 - 32) = v963;
          *(_WORD *)(a2 + 4 * v963 + 262) = v917 + 241;
          v964 = v963 + 11;
          if (((v917 + 241) & 0xFFFFFFF0) != 0x90)
            v964 = v963 + 1;
          *(_WORD *)(a2 + 1998) = v964;
          v961 = v1143;
        }
        *(_QWORD *)&v1145[1] = ((v962 << 48) | 0x19C840) + 64;
        v965 = (unsigned __int16)*(v961 - 64);
        if ((_DWORD)v965 == 0xFFFF)
        {
          v966 = v917 + 225;
          v967 = *(__int16 *)(a2 + 1998);
          v965 = *(unsigned __int16 *)(a2 + 1998);
          *(v1143 - 64) = v967;
          v968 = v917 + 225;
          goto LABEL_1550;
        }
      }
      *((_QWORD *)&v1145[1] + 1) = ((v965 << 48) | 0x19C840) + 64;
      v986 = *(unsigned __int16 *)(a2 + 1954);
      if ((_DWORD)v986 != 0xFFFF)
        goto LABEL_1443;
      goto LABEL_1442;
    }
    memset((char *)&v1145[1] + 8, 0, 48);
    v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
    *(_DWORD *)(a2 + 16) = 2;
    v976 = *v774;
    if ((_DWORD)v976 == 0xFFFF)
    {
      v977 = *(__int16 *)(a2 + 1998);
      v976 = *(unsigned __int16 *)(a2 + 1998);
      *v774 = v977;
      *(_WORD *)(a2 + 4 * v977 + 262) = v773 + 272;
      v978 = v977 + 11;
      if (((v773 + 272) & 0xFFFFFFF0) != 0x90)
        v978 = v977 + 1;
      *(_WORD *)(a2 + 1998) = v978;
    }
    *((_QWORD *)&v1145[0] + 1) = ((v976 << 48) | 0x19C840) + 64;
    *(_QWORD *)&v1145[1] = (gleVStateProgram_GetAttrib(a2, 2) << 48) | 0x19C800;
    v979 = *(unsigned __int16 *)(a2 + 1954);
    if ((_DWORD)v979 == 0xFFFF)
    {
      v979 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1954) = v979;
      *(_WORD *)(a2 + 2004) = v979 + 1;
    }
    *(_QWORD *)&v1145[0] = (v979 << 48) | 0x72679000;
    (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
    memset(v1145, 0, 72);
    v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
    *(_DWORD *)(a2 + 16) = 3;
    v980 = *(unsigned __int16 *)(a2 + 1914);
    if ((_DWORD)v980 == 0xFFFF)
    {
      v980 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1914) = v980;
      *(_WORD *)(a2 + 2004) = v980 + 1;
    }
    *((_QWORD *)&v1145[0] + 1) = (v980 << 48) | 0xAA40;
    v981 = (unsigned __int16)*(v1143 - 32);
    if ((_DWORD)v981 == 0xFFFF)
    {
      v982 = *(__int16 *)(a2 + 1998);
      v981 = *(unsigned __int16 *)(a2 + 1998);
      *(v1143 - 32) = v982;
      *(_WORD *)(a2 + 4 * v982 + 262) = 2 * v773 + 241;
      v983 = v982 + 11;
      if (((v917 + 241) & 0xFFFFFFF0) != 0x90)
        v983 = v982 + 1;
      *(_WORD *)(a2 + 1998) = v983;
    }
    v959 = ((v981 << 48) | 0x19C840) + 64;
LABEL_1439:
    *(_QWORD *)&v1145[1] = v959;
    v984 = *(unsigned __int16 *)(a2 + 1954);
    if (v984 == 0xFFFF)
    {
      v986 = *(unsigned __int16 *)(a2 + 2004);
      v987 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1954) = v986;
      *(_WORD *)(a2 + 2004) = ++v987;
      *((_QWORD *)&v1145[1] + 1) = ((unint64_t)(unsigned __int16)v986 << 48) | 0x19C840;
      if ((v987 & 0x10000) == 0)
      {
LABEL_1443:
        v985 = v986 << 48;
        goto LABEL_1444;
      }
LABEL_1442:
      v986 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1954) = v986;
      *(_WORD *)(a2 + 2004) = v986 + 1;
      goto LABEL_1443;
    }
    v985 = v984 << 48;
    *((_QWORD *)&v1145[1] + 1) = ((unint64_t)(unsigned __int16)v984 << 48) | 0x19C840;
LABEL_1444:
    *(_QWORD *)&v1145[0] = v985 | 0x72679000;
    (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
LABEL_1445:
    if ((*a1 & 0x8000000000000000) == 0)
    {
      if (v1124 >= 8)
      {
        memset((char *)&v1145[1] + 8, 0, 48);
        v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
        *(_DWORD *)(a2 + 16) = 2;
        v998 = v774[32];
        if ((_DWORD)v998 == 0xFFFF)
        {
          v999 = *(__int16 *)(a2 + 1998);
          v998 = *(unsigned __int16 *)(a2 + 1998);
          v774[32] = v999;
          *(_WORD *)(a2 + 4 * v999 + 262) = v773 + 288;
          v1000 = v999 + 11;
          if (((v773 + 288) & 0xFFFFFFF0) != 0x90)
            v1000 = v999 + 1;
          *(_WORD *)(a2 + 1998) = v1000;
        }
        *((_QWORD *)&v1145[0] + 1) = ((v998 << 48) | 0x19C840) + 64;
        *(_QWORD *)&v1145[1] = (gleVStateProgram_GetAttrib(a2, 2) << 48) | 0x19C800;
        v1001 = *(unsigned __int16 *)(a2 + 1962);
        if ((_DWORD)v1001 == 0xFFFF)
        {
          v1001 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1962) = v1001;
          *(_WORD *)(a2 + 2004) = v1001 + 1;
        }
        *(_QWORD *)&v1145[0] = (v1001 << 48) | 0x72679000;
        (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
        memset(v1145, 0, 72);
        v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
        *(_DWORD *)(a2 + 16) = 3;
        v1002 = *(unsigned __int16 *)(a2 + 1912);
        if ((_DWORD)v1002 == 0xFFFF)
        {
          v1002 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1912) = v1002;
          *(_WORD *)(a2 + 2004) = v1002 + 1;
        }
        *((_QWORD *)&v1145[0] + 1) = (v1002 << 48) | 0x15440;
        v1003 = *(unsigned __int16 *)(a2 + 1962);
        if ((_DWORD)v1003 == 0xFFFF)
        {
          v1003 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1962) = v1003;
          *(_WORD *)(a2 + 2004) = v1003 + 1;
        }
        v992 = (v1003 << 48) | 0x19C840;
      }
      else
      {
        memset(v1145, 0, 72);
        v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
        *(_DWORD *)(a2 + 16) = 3;
        v988 = *(unsigned __int16 *)(a2 + 1912);
        if ((_DWORD)v988 == 0xFFFF)
        {
          v988 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1912) = v988;
          *(_WORD *)(a2 + 2004) = v988 + 1;
        }
        *((_QWORD *)&v1145[0] + 1) = (v988 << 48) | 0x15440;
        v989 = (unsigned __int16)*(v1143 - 2);
        if ((_DWORD)v989 == 0xFFFF)
        {
          v990 = *(__int16 *)(a2 + 1998);
          v989 = *(unsigned __int16 *)(a2 + 1998);
          *(v1143 - 2) = v990;
          *(_WORD *)(a2 + 4 * v990 + 262) = 2 * v773 + 256;
          v991 = v990 + 11;
          if (((v917 + 256) & 0xFFFFFFF0) != 0x90)
            v991 = v990 + 1;
          *(_WORD *)(a2 + 1998) = v991;
        }
        v992 = ((v989 << 48) | 0x19C840) + 64;
      }
      *(_QWORD *)&v1145[1] = v992;
      v1004 = *(unsigned __int16 *)(a2 + 1946);
      if (v1004 != 0xFFFF)
      {
        v1005 = v1004 << 48;
        *((_QWORD *)&v1145[1] + 1) = ((unint64_t)(unsigned __int16)v1004 << 48) | 0x19C840;
        goto LABEL_1494;
      }
      v997 = *(unsigned __int16 *)(a2 + 2004);
      v1012 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1946) = v997;
      *(_WORD *)(a2 + 2004) = ++v1012;
      *((_QWORD *)&v1145[1] + 1) = ((unint64_t)(unsigned __int16)v997 << 48) | 0x19C840;
      if ((v1012 & 0x10000) == 0)
        goto LABEL_1493;
      v997 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1946) = v997;
      goto LABEL_1492;
    }
    memset((char *)&v1145[1] + 8, 0, 48);
    v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
    *(_DWORD *)(a2 + 16) = 2;
    if (v1124 < 8)
    {
      v993 = *(unsigned __int16 *)(a2 + 1912);
      if ((_DWORD)v993 == 0xFFFF)
      {
        v993 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1912) = v993;
        *(_WORD *)(a2 + 2004) = v993 + 1;
      }
      *((_QWORD *)&v1145[0] + 1) = (v993 << 48) | 0x15440;
      v994 = (unsigned __int16)*(v1143 - 2);
      if ((_DWORD)v994 == 0xFFFF)
      {
        v995 = *(__int16 *)(a2 + 1998);
        v994 = *(unsigned __int16 *)(a2 + 1998);
        *(v1143 - 2) = v995;
        *(_WORD *)(a2 + 4 * v995 + 262) = 2 * v773 + 256;
        v996 = v995 + 11;
        if (((v917 + 256) & 0xFFFFFFF0) != 0x90)
          v996 = v995 + 1;
        *(_WORD *)(a2 + 1998) = v996;
      }
      *(_QWORD *)&v1145[1] = ((v994 << 48) | 0x19C840) + 64;
      v997 = *(unsigned __int16 *)(a2 + 1962);
      if ((_DWORD)v997 != 0xFFFF)
        goto LABEL_1493;
LABEL_1491:
      v997 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1962) = v997;
LABEL_1492:
      *(_WORD *)(a2 + 2004) = v997 + 1;
      goto LABEL_1493;
    }
    v1006 = v774[32];
    if ((_DWORD)v1006 == 0xFFFF)
    {
      v1007 = *(__int16 *)(a2 + 1998);
      v1006 = *(unsigned __int16 *)(a2 + 1998);
      v774[32] = v1007;
      *(_WORD *)(a2 + 4 * v1007 + 262) = v773 + 288;
      v1008 = v1007 + 11;
      if (((v773 + 288) & 0xFFFFFFF0) != 0x90)
        v1008 = v1007 + 1;
      *(_WORD *)(a2 + 1998) = v1008;
    }
    *((_QWORD *)&v1145[0] + 1) = ((v1006 << 48) | 0x19C840) + 64;
    *(_QWORD *)&v1145[1] = (gleVStateProgram_GetAttrib(a2, 2) << 48) | 0x19C800;
    v1009 = *(unsigned __int16 *)(a2 + 1962);
    if ((_DWORD)v1009 == 0xFFFF)
    {
      v1009 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1962) = v1009;
      *(_WORD *)(a2 + 2004) = v1009 + 1;
    }
    *(_QWORD *)&v1145[0] = (v1009 << 48) | 0x72679000;
    (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
    memset(v1145, 0, 72);
    v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
    *(_DWORD *)(a2 + 16) = 2;
    v1010 = *(unsigned __int16 *)(a2 + 1912);
    if ((_DWORD)v1010 == 0xFFFF)
    {
      v1010 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1912) = v1010;
      *(_WORD *)(a2 + 2004) = v1010 + 1;
    }
    *((_QWORD *)&v1145[0] + 1) = (v1010 << 48) | 0x15440;
    v1011 = *(unsigned __int16 *)(a2 + 1962);
    if (v1011 != 0xFFFF)
    {
      v1005 = v1011 << 48;
      *(_QWORD *)&v1145[1] = ((unint64_t)(unsigned __int16)v1011 << 48) | 0x19C840;
      goto LABEL_1494;
    }
    v997 = *(unsigned __int16 *)(a2 + 2004);
    v1014 = *(unsigned __int16 *)(a2 + 2004);
    *(_WORD *)(a2 + 1962) = v997;
    *(_WORD *)(a2 + 2004) = ++v1014;
    *(_QWORD *)&v1145[1] = ((unint64_t)(unsigned __int16)v997 << 48) | 0x19C840;
    if ((v1014 & 0x10000) != 0)
      goto LABEL_1491;
LABEL_1493:
    v1005 = v997 << 48;
LABEL_1494:
    *(_QWORD *)&v1145[0] = v1005 | 0x72679000;
    (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
    if ((*a1 & 0x1000000000000) == 0)
      goto LABEL_1560;
    if ((*a1 & 0x8000000000000000) != 0)
    {
      memset((char *)&v1145[1] + 8, 0, 48);
      v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
      *(_DWORD *)(a2 + 16) = 2;
      if (v1121 >= 8)
      {
        v1033 = v774[32];
        if ((_DWORD)v1033 == 0xFFFF)
        {
          v1034 = *(__int16 *)(a2 + 1998);
          v1033 = *(unsigned __int16 *)(a2 + 1998);
          v774[32] = v1034;
          *(_WORD *)(a2 + 4 * v1034 + 262) = v773 + 288;
          v1035 = v1034 + 11;
          if (((v773 + 288) & 0xFFFFFFF0) != 0x90)
            v1035 = v1034 + 1;
          *(_WORD *)(a2 + 1998) = v1035;
        }
        *((_QWORD *)&v1145[0] + 1) = ((v1033 << 48) | 0x19C840) + 64;
        *(_QWORD *)&v1145[1] = (gleVStateProgram_GetAttrib(a2, 2) << 48) | 0x19C800;
        v1036 = *(unsigned __int16 *)(a2 + 1970);
        if ((_DWORD)v1036 == 0xFFFF)
        {
          v1036 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1970) = v1036;
          *(_WORD *)(a2 + 2004) = v1036 + 1;
        }
        *(_QWORD *)&v1145[0] = (v1036 << 48) | 0x72679000;
        (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
        memset(v1145, 0, 72);
        v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
        *(_DWORD *)(a2 + 16) = 2;
        v1037 = *(unsigned __int16 *)(a2 + 1914);
        if ((_DWORD)v1037 == 0xFFFF)
        {
          v1037 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1914) = v1037;
          *(_WORD *)(a2 + 2004) = v1037 + 1;
        }
        *((_QWORD *)&v1145[0] + 1) = (v1037 << 48) | 0x15440;
        v1038 = *(unsigned __int16 *)(a2 + 1970);
        if (v1038 != 0xFFFF)
        {
          v1032 = v1038 << 48;
          *(_QWORD *)&v1145[1] = ((unint64_t)(unsigned __int16)v1038 << 48) | 0x19C840;
          goto LABEL_1559;
        }
        v1024 = *(unsigned __int16 *)(a2 + 2004);
        v1047 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1970) = v1024;
        *(_WORD *)(a2 + 2004) = ++v1047;
        *(_QWORD *)&v1145[1] = ((unint64_t)(unsigned __int16)v1024 << 48) | 0x19C840;
        if ((v1047 & 0x10000) == 0)
          goto LABEL_1558;
      }
      else
      {
        v1020 = *(unsigned __int16 *)(a2 + 1914);
        if ((_DWORD)v1020 == 0xFFFF)
        {
          v1020 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1914) = v1020;
          *(_WORD *)(a2 + 2004) = v1020 + 1;
        }
        *((_QWORD *)&v1145[0] + 1) = (v1020 << 48) | 0x15440;
        v1021 = (unsigned __int16)*v1143;
        if ((_DWORD)v1021 == 0xFFFF)
        {
          v1022 = *(__int16 *)(a2 + 1998);
          v1021 = *(unsigned __int16 *)(a2 + 1998);
          *v1143 = v1022;
          *(_WORD *)(a2 + 4 * v1022 + 262) = 2 * v773 + 257;
          v1023 = v1022 + 11;
          if (((v917 + 257) & 0xFFFFFFF0) != 0x90)
            v1023 = v1022 + 1;
          *(_WORD *)(a2 + 1998) = v1023;
        }
        *(_QWORD *)&v1145[1] = ((v1021 << 48) | 0x19C840) + 64;
        v1024 = *(unsigned __int16 *)(a2 + 1970);
        if ((_DWORD)v1024 != 0xFFFF)
          goto LABEL_1558;
      }
      v1024 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1970) = v1024;
      goto LABEL_1557;
    }
    if (v1121 >= 8)
    {
      memset((char *)&v1145[1] + 8, 0, 48);
      v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
      *(_DWORD *)(a2 + 16) = 2;
      v1025 = v774[32];
      if ((_DWORD)v1025 == 0xFFFF)
      {
        v1026 = *(__int16 *)(a2 + 1998);
        v1025 = *(unsigned __int16 *)(a2 + 1998);
        v774[32] = v1026;
        *(_WORD *)(a2 + 4 * v1026 + 262) = v773 + 288;
        v1027 = v1026 + 11;
        if (((v773 + 288) & 0xFFFFFFF0) != 0x90)
          v1027 = v1026 + 1;
        *(_WORD *)(a2 + 1998) = v1027;
      }
      *((_QWORD *)&v1145[0] + 1) = ((v1025 << 48) | 0x19C840) + 64;
      *(_QWORD *)&v1145[1] = (gleVStateProgram_GetAttrib(a2, 2) << 48) | 0x19C800;
      v1028 = *(unsigned __int16 *)(a2 + 1970);
      if ((_DWORD)v1028 == 0xFFFF)
      {
        v1028 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1970) = v1028;
        *(_WORD *)(a2 + 2004) = v1028 + 1;
      }
      *(_QWORD *)&v1145[0] = (v1028 << 48) | 0x72679000;
      (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
      memset(v1145, 0, 72);
      v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
      *(_DWORD *)(a2 + 16) = 3;
      v1029 = *(unsigned __int16 *)(a2 + 1914);
      if ((_DWORD)v1029 == 0xFFFF)
      {
        v1029 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1914) = v1029;
        *(_WORD *)(a2 + 2004) = v1029 + 1;
      }
      *((_QWORD *)&v1145[0] + 1) = (v1029 << 48) | 0x15440;
      v1030 = *(unsigned __int16 *)(a2 + 1970);
      if ((_DWORD)v1030 == 0xFFFF)
      {
        v1030 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1970) = v1030;
        *(_WORD *)(a2 + 2004) = v1030 + 1;
      }
      v1019 = (v1030 << 48) | 0x19C840;
    }
    else
    {
      memset(v1145, 0, 72);
      v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
      *(_DWORD *)(a2 + 16) = 3;
      v1015 = *(unsigned __int16 *)(a2 + 1914);
      if ((_DWORD)v1015 == 0xFFFF)
      {
        v1015 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1914) = v1015;
        *(_WORD *)(a2 + 2004) = v1015 + 1;
      }
      *((_QWORD *)&v1145[0] + 1) = (v1015 << 48) | 0x15440;
      v1016 = (unsigned __int16)*v1143;
      if ((_DWORD)v1016 == 0xFFFF)
      {
        v1017 = *(__int16 *)(a2 + 1998);
        v1016 = *(unsigned __int16 *)(a2 + 1998);
        *v1143 = v1017;
        *(_WORD *)(a2 + 4 * v1017 + 262) = 2 * v773 + 257;
        v1018 = v1017 + 11;
        if (((v917 + 257) & 0xFFFFFFF0) != 0x90)
          v1018 = v1017 + 1;
        *(_WORD *)(a2 + 1998) = v1018;
      }
      v1019 = ((v1016 << 48) | 0x19C840) + 64;
    }
    *(_QWORD *)&v1145[1] = v1019;
    v1031 = *(unsigned __int16 *)(a2 + 1954);
    if (v1031 == 0xFFFF)
    {
      v1024 = *(unsigned __int16 *)(a2 + 2004);
      v1039 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1954) = v1024;
      *(_WORD *)(a2 + 2004) = ++v1039;
      *((_QWORD *)&v1145[1] + 1) = ((unint64_t)(unsigned __int16)v1024 << 48) | 0x19C840;
      if ((v1039 & 0x10000) != 0)
      {
        v1024 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1954) = v1024;
LABEL_1557:
        *(_WORD *)(a2 + 2004) = v1024 + 1;
      }
LABEL_1558:
      v1032 = v1024 << 48;
      goto LABEL_1559;
    }
    v1032 = v1031 << 48;
    *((_QWORD *)&v1145[1] + 1) = ((unint64_t)(unsigned __int16)v1031 << 48) | 0x19C840;
LABEL_1559:
    *(_QWORD *)&v1145[0] = v1032 | 0x72679000;
    (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
LABEL_1560:
    memset(v1145, 0, 72);
    v1048 = 8 * (*(_DWORD *)(a2 + 16) & 7);
    if (((v1139 | v1137) & 1) != 0)
    {
      v1144 = v1048 | 0x3100000FC3;
      *(_DWORD *)(a2 + 16) = 3;
      v1049 = *(unsigned __int16 *)(a2 + 1940);
      if ((_DWORD)v1049 == 0xFFFF)
      {
        v1049 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1940) = v1049;
        *(_WORD *)(a2 + 2004) = v1049 + 1;
      }
      *((_QWORD *)&v1145[0] + 1) = (v1049 << 48) | 0x19C840;
      v1050 = *(unsigned __int16 *)(a2 + 1946);
      if ((_DWORD)v1050 == 0xFFFF)
      {
        v1050 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1946) = v1050;
        *(_WORD *)(a2 + 2004) = v1050 + 1;
      }
      *(_QWORD *)&v1145[1] = (v1050 << 48) | 0x19C840;
      v1051 = *(unsigned __int16 *)(a2 + 1904);
      if (v1051 == 0xFFFF)
      {
        v1056 = *(unsigned __int16 *)(a2 + 2004);
        v1057 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1904) = v1056;
        *(_WORD *)(a2 + 2004) = ++v1057;
        *((_QWORD *)&v1145[1] + 1) = ((unint64_t)(unsigned __int16)v1056 << 48) | 0x19C840;
        if ((v1057 & 0x10000) != 0)
        {
          v1056 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1904) = v1056;
          *(_WORD *)(a2 + 2004) = v1056 + 1;
        }
        v1052 = v1056 << 48;
      }
      else
      {
        v1052 = v1051 << 48;
        *((_QWORD *)&v1145[1] + 1) = ((unint64_t)(unsigned __int16)v1051 << 48) | 0x19C840;
      }
      *(_QWORD *)&v1145[0] = v1052 | 0x72679000;
      (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
      if ((*a1 & 0x8000000000000000) != 0)
      {
        if (v1135)
        {
          memset(v1145, 0, 72);
          v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
          *(_DWORD *)(a2 + 16) = 3;
          v1058 = *(unsigned __int16 *)(a2 + 1940);
          if ((_DWORD)v1058 == 0xFFFF)
          {
            v1058 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1940) = v1058;
            *(_WORD *)(a2 + 2004) = v1058 + 1;
          }
          *((_QWORD *)&v1145[0] + 1) = (v1058 << 48) | 0x19C840;
          v1059 = *(unsigned __int16 *)(a2 + 1962);
          if ((_DWORD)v1059 == 0xFFFF)
          {
            v1059 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1962) = v1059;
            *(_WORD *)(a2 + 2004) = v1059 + 1;
          }
          *(_QWORD *)&v1145[1] = (v1059 << 48) | 0x19C840;
          v1060 = *(unsigned __int16 *)(a2 + 1908);
          if (v1060 != 0xFFFF)
          {
            v1061 = v1060 << 48;
            *((_QWORD *)&v1145[1] + 1) = ((unint64_t)(unsigned __int16)v1060 << 48) | 0x19C840;
LABEL_1602:
            *(_QWORD *)&v1145[0] = v1061 | 0x72679000;
            (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
            goto LABEL_1603;
          }
          v1069 = *(unsigned __int16 *)(a2 + 2004);
          v1088 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1908) = v1069;
          *(_WORD *)(a2 + 2004) = ++v1088;
          *((_QWORD *)&v1145[1] + 1) = ((unint64_t)(unsigned __int16)v1069 << 48) | 0x19C840;
          if ((v1088 & 0x10000) == 0)
            goto LABEL_1601;
          goto LABEL_1600;
        }
        memset((char *)&v1145[1] + 8, 0, 48);
        v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
        *(_DWORD *)(a2 + 16) = 2;
        v1066 = *(unsigned __int16 *)(a2 + 1940);
        if ((_DWORD)v1066 == 0xFFFF)
        {
          v1066 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1940) = v1066;
          *(_WORD *)(a2 + 2004) = v1066 + 1;
        }
        *((_QWORD *)&v1145[0] + 1) = (v1066 << 48) | 0x19C840;
        v1067 = *(unsigned __int16 *)(a2 + 1962);
        if ((_DWORD)v1067 == 0xFFFF)
        {
          v1067 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1962) = v1067;
          *(_WORD *)(a2 + 2004) = v1067 + 1;
        }
        *(_QWORD *)&v1145[1] = (v1067 << 48) | 0x19C840;
        goto LABEL_1599;
      }
    }
    else
    {
      v1144 = v1048 | 0x31000007C2;
      *(_DWORD *)(a2 + 16) = 2;
      v1053 = *(unsigned __int16 *)(a2 + 1946);
      if ((_DWORD)v1053 == 0xFFFF)
      {
        v1053 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1946) = v1053;
        *(_WORD *)(a2 + 2004) = v1053 + 1;
      }
      *((_QWORD *)&v1145[0] + 1) = (v1053 << 48) | 0x19C840;
      v1054 = *(unsigned __int16 *)(a2 + 1904);
      if (v1054 == 0xFFFF)
      {
        v1062 = *(unsigned __int16 *)(a2 + 2004);
        v1063 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1904) = v1062;
        *(_WORD *)(a2 + 2004) = ++v1063;
        *(_QWORD *)&v1145[1] = ((unint64_t)(unsigned __int16)v1062 << 48) | 0x19C840;
        if ((v1063 & 0x10000) != 0)
        {
          v1062 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1904) = v1062;
          *(_WORD *)(a2 + 2004) = v1062 + 1;
        }
        v1055 = v1062 << 48;
      }
      else
      {
        v1055 = v1054 << 48;
        *(_QWORD *)&v1145[1] = ((unint64_t)(unsigned __int16)v1054 << 48) | 0x19C840;
      }
      *(_QWORD *)&v1145[0] = v1055 | 0x72679000;
      (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
      if ((*a1 & 0x8000000000000000) != 0)
      {
        if (v1135)
        {
          memset(v1145, 0, 72);
          v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x31000007C2;
          *(_DWORD *)(a2 + 16) = 2;
          v1064 = *(unsigned __int16 *)(a2 + 1962);
          if ((_DWORD)v1064 == 0xFFFF)
          {
            v1064 = *(unsigned __int16 *)(a2 + 2004);
            *(_WORD *)(a2 + 1962) = v1064;
            *(_WORD *)(a2 + 2004) = v1064 + 1;
          }
          *((_QWORD *)&v1145[0] + 1) = (v1064 << 48) | 0x19C840;
          v1065 = *(unsigned __int16 *)(a2 + 1908);
          if (v1065 != 0xFFFF)
          {
            v1061 = v1065 << 48;
            *(_QWORD *)&v1145[1] = ((unint64_t)(unsigned __int16)v1065 << 48) | 0x19C840;
            goto LABEL_1602;
          }
          v1069 = *(unsigned __int16 *)(a2 + 2004);
          v1089 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1908) = v1069;
          *(_WORD *)(a2 + 2004) = ++v1089;
          *(_QWORD *)&v1145[1] = ((unint64_t)(unsigned __int16)v1069 << 48) | 0x19C840;
          if ((v1089 & 0x10000) == 0)
          {
LABEL_1601:
            v1061 = v1069 << 48;
            goto LABEL_1602;
          }
LABEL_1600:
          v1069 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1908) = v1069;
          *(_WORD *)(a2 + 2004) = v1069 + 1;
          goto LABEL_1601;
        }
        memset(&v1145[1], 0, 56);
        v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
        *(_DWORD *)(a2 + 16) = 1;
        v1068 = *(unsigned __int16 *)(a2 + 1962);
        if ((_DWORD)v1068 == 0xFFFF)
        {
          v1068 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1962) = v1068;
          *(_WORD *)(a2 + 2004) = v1068 + 1;
        }
        *((_QWORD *)&v1145[0] + 1) = (v1068 << 48) | 0x19C840;
LABEL_1599:
        v1069 = *(unsigned __int16 *)(a2 + 1908);
        if ((_DWORD)v1069 != 0xFFFF)
          goto LABEL_1601;
        goto LABEL_1600;
      }
    }
LABEL_1603:
    v775 = v1143;
    if ((*a1 & 0x1000000000000) == 0)
    {
      v1135 = 1;
      v772 = v1141;
      goto LABEL_1653;
    }
    memset(v1145, 0, 72);
    v1070 = 8 * (*(_DWORD *)(a2 + 16) & 7);
    if (((v1139 | v1137) & 1) != 0)
    {
      v1144 = v1070 | 0x3100000FC3;
      *(_DWORD *)(a2 + 16) = 3;
      v1071 = *(unsigned __int16 *)(a2 + 1940);
      if ((_DWORD)v1071 == 0xFFFF)
      {
        v1071 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1940) = v1071;
        *(_WORD *)(a2 + 2004) = v1071 + 1;
      }
      *((_QWORD *)&v1145[0] + 1) = (v1071 << 48) | 0x19C840;
      v1072 = *(unsigned __int16 *)(a2 + 1954);
      v772 = v1141;
      if ((_DWORD)v1072 == 0xFFFF)
      {
        v1072 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1954) = v1072;
        *(_WORD *)(a2 + 2004) = v1072 + 1;
      }
      *(_QWORD *)&v1145[1] = (v1072 << 48) | 0x19C840;
      v1073 = *(unsigned __int16 *)(a2 + 1906);
      if (v1073 == 0xFFFF)
      {
        v1078 = *(unsigned __int16 *)(a2 + 2004);
        v1079 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1906) = v1078;
        *(_WORD *)(a2 + 2004) = ++v1079;
        *((_QWORD *)&v1145[1] + 1) = ((unint64_t)(unsigned __int16)v1078 << 48) | 0x19C840;
        if ((v1079 & 0x10000) != 0)
        {
          v1078 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1906) = v1078;
          *(_WORD *)(a2 + 2004) = v1078 + 1;
        }
        v1074 = v1078 << 48;
      }
      else
      {
        v1074 = v1073 << 48;
        *((_QWORD *)&v1145[1] + 1) = ((unint64_t)(unsigned __int16)v1073 << 48) | 0x19C840;
      }
      *(_QWORD *)&v1145[0] = v1074 | 0x72679000;
      (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
      if ((*a1 & 0x8000000000000000) == 0)
        goto LABEL_1652;
      if (!v1135)
      {
        memset((char *)&v1145[1] + 8, 0, 48);
        v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000882;
        *(_DWORD *)(a2 + 16) = 2;
        v1090 = *(unsigned __int16 *)(a2 + 1940);
        if ((_DWORD)v1090 == 0xFFFF)
        {
          v1090 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1940) = v1090;
          *(_WORD *)(a2 + 2004) = v1090 + 1;
        }
        *((_QWORD *)&v1145[0] + 1) = (v1090 << 48) | 0x19C840;
        v1091 = *(unsigned __int16 *)(a2 + 1970);
        if ((_DWORD)v1091 == 0xFFFF)
        {
          v1091 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1970) = v1091;
          *(_WORD *)(a2 + 2004) = v1091 + 1;
        }
        *(_QWORD *)&v1145[1] = (v1091 << 48) | 0x19C840;
        goto LABEL_1648;
      }
      memset(v1145, 0, 72);
      v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000FC3;
      *(_DWORD *)(a2 + 16) = 3;
      v1080 = *(unsigned __int16 *)(a2 + 1940);
      if ((_DWORD)v1080 == 0xFFFF)
      {
        v1080 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1940) = v1080;
        *(_WORD *)(a2 + 2004) = v1080 + 1;
      }
      *((_QWORD *)&v1145[0] + 1) = (v1080 << 48) | 0x19C840;
      v1081 = *(unsigned __int16 *)(a2 + 1970);
      if ((_DWORD)v1081 == 0xFFFF)
      {
        v1081 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1970) = v1081;
        *(_WORD *)(a2 + 2004) = v1081 + 1;
      }
      *(_QWORD *)&v1145[1] = (v1081 << 48) | 0x19C840;
      v1082 = *(unsigned __int16 *)(a2 + 1910);
      if (v1082 == 0xFFFF)
      {
        v1093 = *(unsigned __int16 *)(a2 + 2004);
        v1095 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1910) = v1093;
        *(_WORD *)(a2 + 2004) = ++v1095;
        *((_QWORD *)&v1145[1] + 1) = ((unint64_t)(unsigned __int16)v1093 << 48) | 0x19C840;
        if ((v1095 & 0x10000) == 0)
          goto LABEL_1650;
LABEL_1649:
        v1093 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1910) = v1093;
        *(_WORD *)(a2 + 2004) = v1093 + 1;
LABEL_1650:
        v1083 = v1093 << 48;
        goto LABEL_1651;
      }
      v1083 = v1082 << 48;
      *((_QWORD *)&v1145[1] + 1) = ((unint64_t)(unsigned __int16)v1082 << 48) | 0x19C840;
    }
    else
    {
      v1144 = v1070 | 0x31000007C2;
      *(_DWORD *)(a2 + 16) = 2;
      v1075 = *(unsigned __int16 *)(a2 + 1954);
      if ((_DWORD)v1075 == 0xFFFF)
      {
        v1075 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1954) = v1075;
        *(_WORD *)(a2 + 2004) = v1075 + 1;
      }
      *((_QWORD *)&v1145[0] + 1) = (v1075 << 48) | 0x19C840;
      v1076 = *(unsigned __int16 *)(a2 + 1906);
      v772 = v1141;
      if (v1076 == 0xFFFF)
      {
        v1084 = *(unsigned __int16 *)(a2 + 2004);
        v1085 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1906) = v1084;
        *(_WORD *)(a2 + 2004) = ++v1085;
        *(_QWORD *)&v1145[1] = ((unint64_t)(unsigned __int16)v1084 << 48) | 0x19C840;
        if ((v1085 & 0x10000) != 0)
        {
          v1084 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1906) = v1084;
          *(_WORD *)(a2 + 2004) = v1084 + 1;
        }
        v1077 = v1084 << 48;
      }
      else
      {
        v1077 = v1076 << 48;
        *(_QWORD *)&v1145[1] = ((unint64_t)(unsigned __int16)v1076 << 48) | 0x19C840;
      }
      *(_QWORD *)&v1145[0] = v1077 | 0x72679000;
      (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
      if ((*a1 & 0x8000000000000000) == 0)
        goto LABEL_1652;
      if (!v1135)
      {
        memset(&v1145[1], 0, 56);
        v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
        *(_DWORD *)(a2 + 16) = 1;
        v1092 = *(unsigned __int16 *)(a2 + 1970);
        if ((_DWORD)v1092 == 0xFFFF)
        {
          v1092 = *(unsigned __int16 *)(a2 + 2004);
          *(_WORD *)(a2 + 1970) = v1092;
          *(_WORD *)(a2 + 2004) = v1092 + 1;
        }
        *((_QWORD *)&v1145[0] + 1) = (v1092 << 48) | 0x19C840;
LABEL_1648:
        v1093 = *(unsigned __int16 *)(a2 + 1910);
        if ((_DWORD)v1093 == 0xFFFF)
          goto LABEL_1649;
        goto LABEL_1650;
      }
      memset(v1145, 0, 72);
      v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x31000007C2;
      *(_DWORD *)(a2 + 16) = 2;
      v1086 = *(unsigned __int16 *)(a2 + 1970);
      if ((_DWORD)v1086 == 0xFFFF)
      {
        v1086 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1970) = v1086;
        *(_WORD *)(a2 + 2004) = v1086 + 1;
      }
      *((_QWORD *)&v1145[0] + 1) = (v1086 << 48) | 0x19C840;
      v1087 = *(unsigned __int16 *)(a2 + 1910);
      if (v1087 == 0xFFFF)
      {
        v1093 = *(unsigned __int16 *)(a2 + 2004);
        v1096 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1910) = v1093;
        *(_WORD *)(a2 + 2004) = ++v1096;
        *(_QWORD *)&v1145[1] = ((unint64_t)(unsigned __int16)v1093 << 48) | 0x19C840;
        if ((v1096 & 0x10000) == 0)
          goto LABEL_1650;
        goto LABEL_1649;
      }
      v1083 = v1087 << 48;
      *(_QWORD *)&v1145[1] = ((unint64_t)(unsigned __int16)v1087 << 48) | 0x19C840;
    }
LABEL_1651:
    *(_QWORD *)&v1145[0] = v1083 | 0x72679000;
    (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
LABEL_1652:
    v1135 = 1;
    v775 = v1143;
LABEL_1653:
    ++v773;
    v772 += 2;
    v774 += 2;
    v775 += 4;
    v1094 = v50 > 1;
    v50 >>= 1;
  }
  while (v1094);
  if (!v1135)
    goto LABEL_1660;
LABEL_1665:
  memset(&v1145[1], 0, 56);
  v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
  *(_DWORD *)(a2 + 16) = 1;
  if ((v1124 & 4) != 0)
  {
    *((_QWORD *)&v1145[0] + 1) = (gleVStateProgram_GetAttrib(a2, 2) << 48) | 0x19C800;
    v1102 = *(unsigned __int16 *)(a2 + 1904);
  }
  else
  {
    v1100 = *(unsigned __int16 *)(a2 + 1636);
    if ((_DWORD)v1100 == 0xFFFF)
    {
      v1101 = *(__int16 *)(a2 + 1998);
      v1100 = *(unsigned __int16 *)(a2 + 1998);
      *(_WORD *)(a2 + 1636) = v1101;
      *(_WORD *)(a2 + 4 * v1101 + 262) = 344;
      *(_WORD *)(a2 + 1998) = v1101 + 1;
    }
    *((_QWORD *)&v1145[0] + 1) = ((v1100 << 48) | 0x19C840) + 64;
    v1102 = *(unsigned __int16 *)(a2 + 1904);
  }
  if ((_DWORD)v1102 == 0xFFFF)
  {
    v1102 = *(unsigned __int16 *)(a2 + 2004);
    *(_WORD *)(a2 + 1904) = v1102;
    *(_WORD *)(a2 + 2004) = v1102 + 1;
  }
  *(_QWORD *)&v1145[0] = (v1102 << 48) | 0x72609000;
  (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
  memset(&v1145[1], 0, 56);
  v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
  *(_DWORD *)(a2 + 16) = 1;
  v1103 = *(unsigned __int16 *)(a2 + 1904);
  if ((_DWORD)v1103 == 0xFFFF)
  {
    v1103 = *(unsigned __int16 *)(a2 + 2004);
    *(_WORD *)(a2 + 1904) = v1103;
    *(_WORD *)(a2 + 2004) = v1103 + 1;
  }
  *((_QWORD *)&v1145[0] + 1) = (v1103 << 48) | 0x19C840;
  v1104 = *(unsigned __int16 *)(a2 + 1704);
  if ((_DWORD)v1104 == 0xFFFF)
  {
    v1105 = *(__int16 *)(a2 + 2000);
    v1104 = *(unsigned __int16 *)(a2 + 2000);
    *(_WORD *)(a2 + 1704) = v1105;
    *(_WORD *)(a2 + 4 * v1105 + 1694) = 3;
    *(_WORD *)(a2 + 2000) = v1105 + 1;
  }
  *(_QWORD *)&v1145[0] = ((v1104 << 48) | 0x72679000) + 0x2000;
  result = (*(uint64_t (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
  v1107 = *a1;
  if ((*a1 & 0x8000000000000000) != 0)
  {
    memset(&v1145[1], 0, 56);
    v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
    *(_DWORD *)(a2 + 16) = 1;
    v1108 = *(unsigned __int16 *)(a2 + 1908);
    if ((_DWORD)v1108 == 0xFFFF)
    {
      v1108 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1908) = v1108;
      *(_WORD *)(a2 + 2004) = v1108 + 1;
    }
    *((_QWORD *)&v1145[0] + 1) = (v1108 << 48) | 0x19C840;
    v1109 = *(unsigned __int16 *)(a2 + 1712);
    if ((_DWORD)v1109 == 0xFFFF)
    {
      v1110 = *(__int16 *)(a2 + 2000);
      v1109 = *(unsigned __int16 *)(a2 + 2000);
      *(_WORD *)(a2 + 1712) = v1110;
      *(_WORD *)(a2 + 4 * v1110 + 1694) = 5;
      *(_WORD *)(a2 + 2000) = v1110 + 1;
    }
    *(_QWORD *)&v1145[0] = ((v1109 << 48) | 0x72679000) + 0x2000;
    result = (*(uint64_t (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
    v1107 = *a1;
  }
  if ((v1107 & 0x1000000000000) != 0)
  {
    memset(&v1145[1], 0, 56);
    v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
    *(_DWORD *)(a2 + 16) = 1;
    if ((v1121 & 4) != 0)
    {
      *((_QWORD *)&v1145[0] + 1) = (gleVStateProgram_GetAttrib(a2, 2) << 48) | 0x19C800;
      v1113 = *(unsigned __int16 *)(a2 + 1906);
    }
    else
    {
      v1111 = *(unsigned __int16 *)(a2 + 1640);
      if ((_DWORD)v1111 == 0xFFFF)
      {
        v1112 = *(__int16 *)(a2 + 1998);
        v1111 = *(unsigned __int16 *)(a2 + 1998);
        *(_WORD *)(a2 + 1640) = v1112;
        *(_WORD *)(a2 + 4 * v1112 + 262) = 345;
        *(_WORD *)(a2 + 1998) = v1112 + 1;
      }
      *((_QWORD *)&v1145[0] + 1) = ((v1111 << 48) | 0x19C840) + 64;
      v1113 = *(unsigned __int16 *)(a2 + 1906);
    }
    if ((_DWORD)v1113 == 0xFFFF)
    {
      v1113 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1906) = v1113;
      *(_WORD *)(a2 + 2004) = v1113 + 1;
    }
    *(_QWORD *)&v1145[0] = (v1113 << 48) | 0x72609000;
    (*(void (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
    memset(&v1145[1], 0, 56);
    v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
    *(_DWORD *)(a2 + 16) = 1;
    v1114 = *(unsigned __int16 *)(a2 + 1906);
    if ((_DWORD)v1114 == 0xFFFF)
    {
      v1114 = *(unsigned __int16 *)(a2 + 2004);
      *(_WORD *)(a2 + 1906) = v1114;
      *(_WORD *)(a2 + 2004) = v1114 + 1;
    }
    *((_QWORD *)&v1145[0] + 1) = (v1114 << 48) | 0x19C840;
    v1115 = *(unsigned __int16 *)(a2 + 1708);
    if ((_DWORD)v1115 == 0xFFFF)
    {
      v1116 = *(__int16 *)(a2 + 2000);
      v1115 = *(unsigned __int16 *)(a2 + 2000);
      *(_WORD *)(a2 + 1708) = v1116;
      *(_WORD *)(a2 + 4 * v1116 + 1694) = 4;
      *(_WORD *)(a2 + 2000) = v1116 + 1;
    }
    *(_QWORD *)&v1145[0] = ((v1115 << 48) | 0x72679000) + 0x2000;
    result = (*(uint64_t (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
    if ((*a1 & 0x8000000000000000) != 0)
    {
      memset(&v1145[1], 0, 56);
      v1144 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x3100000001;
      *(_DWORD *)(a2 + 16) = 1;
      v1117 = *(unsigned __int16 *)(a2 + 1910);
      if ((_DWORD)v1117 == 0xFFFF)
      {
        v1117 = *(unsigned __int16 *)(a2 + 2004);
        *(_WORD *)(a2 + 1910) = v1117;
        *(_WORD *)(a2 + 2004) = v1117 + 1;
      }
      *((_QWORD *)&v1145[0] + 1) = (v1117 << 48) | 0x19C840;
      v1118 = *(unsigned __int16 *)(a2 + 1716);
      if ((_DWORD)v1118 == 0xFFFF)
      {
        v1119 = *(__int16 *)(a2 + 2000);
        v1118 = *(unsigned __int16 *)(a2 + 2000);
        *(_WORD *)(a2 + 1716) = v1119;
        *(_WORD *)(a2 + 4 * v1119 + 1694) = 6;
        *(_WORD *)(a2 + 2000) = v1119 + 1;
      }
      *(_QWORD *)&v1145[0] = ((v1118 << 48) | 0x72679000) + 0x2000;
      return (*(uint64_t (**)(uint64_t, uint64_t *))(a2 + 2016))(a2, &v1144);
    }
  }
  return result;
}

uint64_t gleVStateProgram_MultMatrix4x4(uint64_t a1, signed int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9)
{
  uint64_t v16;
  uint64_t Attrib;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  int v22;
  _WORD *v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  _WORD *v40;
  uint64_t v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  _WORD *v56;
  uint64_t v57;
  uint64_t v58;
  __int16 v59;
  uint64_t v60;
  uint64_t v61;
  __int16 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  _WORD *v72;
  uint64_t v73;
  uint64_t v74;
  __int16 v75;
  uint64_t v76;
  uint64_t v77;
  __int16 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _WORD *v86;
  uint64_t v87;
  uint64_t v88;
  __int16 v89;
  uint64_t v90;
  uint64_t v91;
  __int16 v92;
  _WORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  _WORD *v99;
  uint64_t v100;
  uint64_t v101;
  __int16 v102;
  uint64_t v103;
  uint64_t v104;
  __int16 v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  _WORD *v113;
  uint64_t v114;
  uint64_t v115;
  __int16 v116;
  uint64_t v117;
  uint64_t v118;
  __int16 v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  _WORD *v126;
  uint64_t v127;
  uint64_t v128;
  __int16 v129;
  uint64_t v130;
  uint64_t v131;
  __int16 v132;
  uint64_t v133;
  uint64_t v134;
  int v136;
  uint64_t v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  uint64_t v142;

  v142 = 0;
  v141 = 0u;
  v140 = 0u;
  v139 = 0u;
  v138 = 0u;
  v16 = 8 * (*(_DWORD *)(a1 + 16) & 7);
  if (a9)
  {
    v137 = v16 | 0x3100000A42;
    *(_DWORD *)(a1 + 16) = 2;
    if (a6)
    {
      Attrib = (unsigned __int16)gleVStateProgram_GetAttrib(a1, a2);
      v18 = 1689600;
    }
    else
    {
      v21 = a1 + 2 * a2;
      LODWORD(Attrib) = *(unsigned __int16 *)(v21 + 1900);
      if ((_DWORD)Attrib == 0xFFFF)
      {
        LODWORD(Attrib) = *(unsigned __int16 *)(a1 + 2004);
        *(_WORD *)(v21 + 1900) = Attrib;
        *(_WORD *)(a1 + 2004) = Attrib + 1;
      }
      Attrib = Attrib;
      v18 = 1689664;
    }
    *((_QWORD *)&v138 + 1) = v18 | (Attrib << 48);
    v22 = a3 + 7;
    v23 = (_WORD *)(a1 + 4 * (a3 + 7) + 260);
    v24 = (unsigned __int16)*v23;
    if (a7)
    {
      if ((_DWORD)v24 == 0xFFFF)
      {
        v25 = *(__int16 *)(a1 + 1998);
        v24 = *(unsigned __int16 *)(a1 + 1998);
        *v23 = v25;
        *(_WORD *)(a1 + 4 * v25 + 262) = v22;
        v26 = (v22 & 0xFFFFFFF0) == 144;
        v27 = v25 + 11;
        if (!v26)
          v27 = v25 + 1;
        *(_WORD *)(a1 + 1998) = v27;
      }
      v28 = ((v24 << 48) | 0x19C840) + 65;
      *(_WORD *)(a1 + 2002) = 1;
    }
    else
    {
      if ((_DWORD)v24 == 0xFFFF)
      {
        v29 = *(__int16 *)(a1 + 1998);
        v24 = *(unsigned __int16 *)(a1 + 1998);
        *v23 = v29;
        *(_WORD *)(a1 + 4 * v29 + 262) = v22;
        v26 = (v22 & 0xFFFFFFF0) == 144;
        v30 = v29 + 11;
        if (!v26)
          v30 = v29 + 1;
        *(_WORD *)(a1 + 1998) = v30;
      }
      v28 = ((v24 << 48) | 0x19C840) + 64;
    }
    *(_QWORD *)&v139 = v28;
    if (a8)
    {
      v31 = a1 + 4 * a4;
      v32 = *(unsigned __int16 *)(v31 + 1692);
      v33 = 1918939136;
      if ((_DWORD)v32 == 0xFFFF)
      {
        v34 = *(__int16 *)(a1 + 2000);
        v32 = *(unsigned __int16 *)(a1 + 2000);
        *(_WORD *)(v31 + 1692) = v34;
        *(_WORD *)(a1 + 4 * v34 + 1694) = a4;
        *(_WORD *)(a1 + 2000) = v34 + 1;
      }
    }
    else
    {
      v35 = a1 + 2 * a4;
      v32 = *(unsigned __int16 *)(v35 + 1900);
      v33 = 1918930944;
      if ((_DWORD)v32 == 0xFFFF)
      {
        v32 = *(unsigned __int16 *)(a1 + 2004);
        *(_WORD *)(v35 + 1900) = v32;
        *(_WORD *)(a1 + 2004) = v32 + 1;
      }
    }
    *(_QWORD *)&v138 = v33 | (v32 << 48);
    (*(void (**)(uint64_t, uint64_t *))(a1 + 2016))(a1, &v137);
    v142 = 0;
    v140 = 0u;
    v141 = 0u;
    v138 = 0u;
    v139 = 0u;
    v137 = (8 * (*(_DWORD *)(a1 + 16) & 7)) | 0x3100000A42;
    *(_DWORD *)(a1 + 16) = 2;
    if (a6)
    {
      v36 = (unsigned __int16)gleVStateProgram_GetAttrib(a1, a2);
      v37 = 1689600;
    }
    else
    {
      v38 = a1 + 2 * a2;
      LODWORD(v36) = *(unsigned __int16 *)(v38 + 1900);
      if ((_DWORD)v36 == 0xFFFF)
      {
        LODWORD(v36) = *(unsigned __int16 *)(a1 + 2004);
        *(_WORD *)(v38 + 1900) = v36;
        *(_WORD *)(a1 + 2004) = v36 + 1;
      }
      v36 = v36;
      v37 = 1689664;
    }
    *((_QWORD *)&v138 + 1) = v37 | (v36 << 48);
    v39 = a3 + 6;
    v40 = (_WORD *)(a1 + 4 * (a3 + 6) + 260);
    v41 = (unsigned __int16)*v40;
    if (a7)
    {
      if ((_DWORD)v41 == 0xFFFF)
      {
        v42 = *(__int16 *)(a1 + 1998);
        v41 = *(unsigned __int16 *)(a1 + 1998);
        *v40 = v42;
        *(_WORD *)(a1 + 4 * v42 + 262) = v39;
        v26 = (v39 & 0xFFFFFFF0) == 144;
        v43 = v42 + 11;
        if (!v26)
          v43 = v42 + 1;
        *(_WORD *)(a1 + 1998) = v43;
      }
      v44 = ((v41 << 48) | 0x19C840) + 65;
      *(_WORD *)(a1 + 2002) = 1;
    }
    else
    {
      if ((_DWORD)v41 == 0xFFFF)
      {
        v45 = *(__int16 *)(a1 + 1998);
        v41 = *(unsigned __int16 *)(a1 + 1998);
        *v40 = v45;
        *(_WORD *)(a1 + 4 * v45 + 262) = v39;
        v26 = (v39 & 0xFFFFFFF0) == 144;
        v46 = v45 + 11;
        if (!v26)
          v46 = v45 + 1;
        *(_WORD *)(a1 + 1998) = v46;
      }
      v44 = ((v41 << 48) | 0x19C840) + 64;
    }
    *(_QWORD *)&v139 = v44;
    if (a8)
    {
      v47 = a1 + 4 * a4;
      v48 = *(unsigned __int16 *)(v47 + 1692);
      v49 = 1918971904;
      if ((_DWORD)v48 == 0xFFFF)
      {
        v50 = *(__int16 *)(a1 + 2000);
        v48 = *(unsigned __int16 *)(a1 + 2000);
        *(_WORD *)(v47 + 1692) = v50;
        *(_WORD *)(a1 + 4 * v50 + 1694) = a4;
        *(_WORD *)(a1 + 2000) = v50 + 1;
      }
    }
    else
    {
      v51 = a1 + 2 * a4;
      v48 = *(unsigned __int16 *)(v51 + 1900);
      v49 = 1918963712;
      if ((_DWORD)v48 == 0xFFFF)
      {
        v48 = *(unsigned __int16 *)(a1 + 2004);
        *(_WORD *)(v51 + 1900) = v48;
        *(_WORD *)(a1 + 2004) = v48 + 1;
      }
    }
    *(_QWORD *)&v138 = v49 | (v48 << 48);
    (*(void (**)(uint64_t, uint64_t *))(a1 + 2016))(a1, &v137);
    v142 = 0;
    v140 = 0u;
    v141 = 0u;
    v138 = 0u;
    v139 = 0u;
    v137 = (8 * (*(_DWORD *)(a1 + 16) & 7)) | 0x3100000A42;
    *(_DWORD *)(a1 + 16) = 2;
    if (a6)
    {
      v52 = (unsigned __int16)gleVStateProgram_GetAttrib(a1, a2);
      v53 = 1689600;
    }
    else
    {
      v54 = a1 + 2 * a2;
      LODWORD(v52) = *(unsigned __int16 *)(v54 + 1900);
      if ((_DWORD)v52 == 0xFFFF)
      {
        LODWORD(v52) = *(unsigned __int16 *)(a1 + 2004);
        *(_WORD *)(v54 + 1900) = v52;
        *(_WORD *)(a1 + 2004) = v52 + 1;
      }
      v52 = v52;
      v53 = 1689664;
    }
    *((_QWORD *)&v138 + 1) = v53 | (v52 << 48);
    v55 = a3 + 5;
    v56 = (_WORD *)(a1 + 4 * (a3 + 5) + 260);
    v57 = (unsigned __int16)*v56;
    if (a7)
    {
      if ((_DWORD)v57 == 0xFFFF)
      {
        v58 = *(__int16 *)(a1 + 1998);
        v57 = *(unsigned __int16 *)(a1 + 1998);
        *v56 = v58;
        *(_WORD *)(a1 + 4 * v58 + 262) = v55;
        v26 = (v55 & 0xFFFFFFF0) == 144;
        v59 = v58 + 11;
        if (!v26)
          v59 = v58 + 1;
        *(_WORD *)(a1 + 1998) = v59;
      }
      v60 = ((v57 << 48) | 0x19C840) + 65;
      *(_WORD *)(a1 + 2002) = 1;
    }
    else
    {
      if ((_DWORD)v57 == 0xFFFF)
      {
        v61 = *(__int16 *)(a1 + 1998);
        v57 = *(unsigned __int16 *)(a1 + 1998);
        *v56 = v61;
        *(_WORD *)(a1 + 4 * v61 + 262) = v55;
        v26 = (v55 & 0xFFFFFFF0) == 144;
        v62 = v61 + 11;
        if (!v26)
          v62 = v61 + 1;
        *(_WORD *)(a1 + 1998) = v62;
      }
      v60 = ((v57 << 48) | 0x19C840) + 64;
    }
    *(_QWORD *)&v139 = v60;
    if (a8)
    {
      v63 = a1 + 4 * a4;
      v64 = *(unsigned __int16 *)(v63 + 1692);
      v65 = 1919037440;
      if ((_DWORD)v64 == 0xFFFF)
      {
        v66 = *(__int16 *)(a1 + 2000);
        v64 = *(unsigned __int16 *)(a1 + 2000);
        *(_WORD *)(v63 + 1692) = v66;
        *(_WORD *)(a1 + 4 * v66 + 1694) = a4;
        *(_WORD *)(a1 + 2000) = v66 + 1;
      }
    }
    else
    {
      v67 = a1 + 2 * a4;
      v64 = *(unsigned __int16 *)(v67 + 1900);
      v65 = 1919029248;
      if ((_DWORD)v64 == 0xFFFF)
      {
        v64 = *(unsigned __int16 *)(a1 + 2004);
        *(_WORD *)(v67 + 1900) = v64;
        *(_WORD *)(a1 + 2004) = v64 + 1;
      }
    }
    *(_QWORD *)&v138 = v65 | (v64 << 48);
    (*(void (**)(uint64_t, uint64_t *))(a1 + 2016))(a1, &v137);
    v142 = 0;
    v140 = 0u;
    v141 = 0u;
    v138 = 0u;
    v139 = 0u;
    v137 = (8 * (*(_DWORD *)(a1 + 16) & 7)) | 0x3100000A42;
    *(_DWORD *)(a1 + 16) = 2;
    if (a6)
    {
      v68 = (unsigned __int16)gleVStateProgram_GetAttrib(a1, a2);
      v69 = 1689600;
    }
    else
    {
      v70 = a1 + 2 * a2;
      LODWORD(v68) = *(unsigned __int16 *)(v70 + 1900);
      if ((_DWORD)v68 == 0xFFFF)
      {
        LODWORD(v68) = *(unsigned __int16 *)(a1 + 2004);
        *(_WORD *)(v70 + 1900) = v68;
        *(_WORD *)(a1 + 2004) = v68 + 1;
      }
      v68 = v68;
      v69 = 1689664;
    }
    *((_QWORD *)&v138 + 1) = v69 | (v68 << 48);
    v71 = a3 + 4;
    v72 = (_WORD *)(a1 + 4 * (a3 + 4) + 260);
    v73 = (unsigned __int16)*v72;
    if (a7)
    {
      if ((_DWORD)v73 == 0xFFFF)
      {
        v74 = *(__int16 *)(a1 + 1998);
        v73 = *(unsigned __int16 *)(a1 + 1998);
        *v72 = v74;
        *(_WORD *)(a1 + 4 * v74 + 262) = v71;
        v26 = (v71 & 0xFFFFFFF0) == 144;
        v75 = v74 + 11;
        if (!v26)
          v75 = v74 + 1;
        *(_WORD *)(a1 + 1998) = v75;
      }
      v76 = ((v73 << 48) | 0x19C840) + 65;
      *(_WORD *)(a1 + 2002) = 1;
    }
    else
    {
      if ((_DWORD)v73 == 0xFFFF)
      {
        v77 = *(__int16 *)(a1 + 1998);
        v73 = *(unsigned __int16 *)(a1 + 1998);
        *v72 = v77;
        *(_WORD *)(a1 + 4 * v77 + 262) = v71;
        v26 = (v71 & 0xFFFFFFF0) == 144;
        v78 = v77 + 11;
        if (!v26)
          v78 = v77 + 1;
        *(_WORD *)(a1 + 1998) = v78;
      }
      v76 = ((v73 << 48) | 0x19C840) + 64;
    }
    *(_QWORD *)&v139 = v76;
    if (a8)
    {
      v79 = a1 + 4 * a4;
      v80 = *(unsigned __int16 *)(v79 + 1692);
      v81 = 1919168512;
      if ((_DWORD)v80 == 0xFFFF)
      {
        v82 = *(__int16 *)(a1 + 2000);
        v80 = *(unsigned __int16 *)(a1 + 2000);
        *(_WORD *)(v79 + 1692) = v82;
        *(_WORD *)(a1 + 4 * v82 + 1694) = a4;
LABEL_164:
        *(_WORD *)(a1 + 2000) = v82 + 1;
        goto LABEL_168;
      }
      goto LABEL_168;
    }
    v83 = a1 + 2 * a4;
    v80 = *(unsigned __int16 *)(v83 + 1900);
    v81 = 1919160320;
LABEL_166:
    if ((_DWORD)v80 == 0xFFFF)
    {
      v80 = *(unsigned __int16 *)(a1 + 2004);
      *(_WORD *)(v83 + 1900) = v80;
      *(_WORD *)(a1 + 2004) = v80 + 1;
    }
    goto LABEL_168;
  }
  v137 = v16 | 0x3100000882;
  *(_DWORD *)(a1 + 16) = 2;
  if (a6)
  {
    v20 = gleVStateProgram_GetAttrib(a1, a2) << 48;
  }
  else
  {
    v84 = a1 + 2 * a2;
    v85 = *(unsigned __int16 *)(v84 + 1900);
    if ((_DWORD)v85 == 0xFFFF)
    {
      v85 = *(unsigned __int16 *)(a1 + 2004);
      *(_WORD *)(v84 + 1900) = v85;
      *(_WORD *)(a1 + 2004) = v85 + 1;
    }
    v20 = (v85 << 48) | 0x40;
  }
  *((_QWORD *)&v138 + 1) = v20;
  v86 = (_WORD *)(a1 + 4 * a3 + 260);
  v87 = (unsigned __int16)*v86;
  if (a7)
  {
    if ((_DWORD)v87 == 0xFFFF)
    {
      v88 = *(__int16 *)(a1 + 1998);
      v87 = *(unsigned __int16 *)(a1 + 1998);
      *v86 = v88;
      *(_WORD *)(a1 + 4 * v88 + 262) = a3;
      v89 = v88 + 11;
      if ((a3 & 0xFFFFFFF0) != 0x90)
        v89 = v88 + 1;
      *(_WORD *)(a1 + 1998) = v89;
    }
    v90 = ((v87 << 48) | 0x19C840) + 65;
    *(_WORD *)(a1 + 2002) = 1;
  }
  else
  {
    if ((_DWORD)v87 == 0xFFFF)
    {
      v91 = *(__int16 *)(a1 + 1998);
      v87 = *(unsigned __int16 *)(a1 + 1998);
      *v86 = v91;
      *(_WORD *)(a1 + 4 * v91 + 262) = a3;
      v92 = v91 + 11;
      if ((a3 & 0xFFFFFFF0) != 0x90)
        v92 = v91 + 1;
      *(_WORD *)(a1 + 1998) = v92;
    }
    v90 = ((v87 << 48) | 0x19C840) + 64;
  }
  *(_QWORD *)&v139 = v90;
  v93 = (_WORD *)(a1 + 2 * a5 + 1900);
  v94 = (unsigned __int16)*v93;
  if ((_DWORD)v94 == 0xFFFF)
  {
    v94 = *(unsigned __int16 *)(a1 + 2004);
    *v93 = v94;
    *(_WORD *)(a1 + 2004) = v94 + 1;
  }
  v81 = 1919389696;
  *(_QWORD *)&v138 = (v94 << 48) | 0x72679000;
  (*(void (**)(uint64_t, uint64_t *))(a1 + 2016))(a1, &v137);
  v142 = 0;
  v140 = 0u;
  v141 = 0u;
  v138 = 0u;
  v139 = 0u;
  v137 = (8 * (*(_DWORD *)(a1 + 16) & 7)) | 0x3100000FC3;
  *(_DWORD *)(a1 + 16) = 3;
  if (a6)
  {
    v95 = (unsigned __int16)gleVStateProgram_GetAttrib(a1, a2);
    v96 = 43520;
  }
  else
  {
    v97 = a1 + 2 * a2;
    LODWORD(v95) = *(unsigned __int16 *)(v97 + 1900);
    if ((_DWORD)v95 == 0xFFFF)
    {
      LODWORD(v95) = *(unsigned __int16 *)(a1 + 2004);
      *(_WORD *)(v97 + 1900) = v95;
      *(_WORD *)(a1 + 2004) = v95 + 1;
    }
    v95 = v95;
    v96 = 43584;
  }
  *((_QWORD *)&v138 + 1) = v96 | (v95 << 48);
  v98 = a3 + 1;
  v99 = (_WORD *)(a1 + 4 * (a3 + 1) + 260);
  v100 = (unsigned __int16)*v99;
  if (a7)
  {
    if ((_DWORD)v100 == 0xFFFF)
    {
      v101 = *(__int16 *)(a1 + 1998);
      v100 = *(unsigned __int16 *)(a1 + 1998);
      *v99 = v101;
      *(_WORD *)(a1 + 4 * v101 + 262) = v98;
      v26 = (v98 & 0xFFFFFFF0) == 144;
      v102 = v101 + 11;
      if (!v26)
        v102 = v101 + 1;
      *(_WORD *)(a1 + 1998) = v102;
    }
    v103 = ((v100 << 48) | 0x19C840) + 65;
    *(_WORD *)(a1 + 2002) = 1;
  }
  else
  {
    if ((_DWORD)v100 == 0xFFFF)
    {
      v104 = *(__int16 *)(a1 + 1998);
      v100 = *(unsigned __int16 *)(a1 + 1998);
      *v99 = v104;
      *(_WORD *)(a1 + 4 * v104 + 262) = v98;
      v26 = (v98 & 0xFFFFFFF0) == 144;
      v105 = v104 + 11;
      if (!v26)
        v105 = v104 + 1;
      *(_WORD *)(a1 + 1998) = v105;
    }
    v103 = ((v100 << 48) | 0x19C840) + 64;
  }
  v136 = a8;
  *(_QWORD *)&v139 = v103;
  v106 = (unsigned __int16)*v93;
  v107 = a4;
  if (v106 == 0xFFFF)
  {
    v108 = *(unsigned __int16 *)(a1 + 2004);
    *v93 = v108;
    *(_WORD *)(a1 + 2004) = v108 + 1;
    v106 = (unsigned __int16)*v93;
    *((_QWORD *)&v139 + 1) = (v108 << 48) | 0x19C840;
    if ((_DWORD)v106 == 0xFFFF)
    {
      v106 = *(unsigned __int16 *)(a1 + 2004);
      *v93 = v106;
      *(_WORD *)(a1 + 2004) = v106 + 1;
    }
  }
  else
  {
    *((_QWORD *)&v139 + 1) = (v106 << 48) | 0x19C840;
  }
  v109 = 87040;
  *(_QWORD *)&v138 = (v106 << 48) | 0x72679000;
  (*(void (**)(uint64_t, uint64_t *))(a1 + 2016))(a1, &v137);
  v142 = 0;
  v140 = 0u;
  v141 = 0u;
  v138 = 0u;
  v139 = 0u;
  v137 = (8 * (*(_DWORD *)(a1 + 16) & 7)) | 0x3100000FC3;
  *(_DWORD *)(a1 + 16) = 3;
  if (a6)
  {
    v110 = (unsigned __int16)gleVStateProgram_GetAttrib(a1, a2);
  }
  else
  {
    v111 = a1 + 2 * a2;
    LODWORD(v110) = *(unsigned __int16 *)(v111 + 1900);
    if ((_DWORD)v110 == 0xFFFF)
    {
      LODWORD(v110) = *(unsigned __int16 *)(a1 + 2004);
      *(_WORD *)(v111 + 1900) = v110;
      *(_WORD *)(a1 + 2004) = v110 + 1;
    }
    v110 = v110;
    v109 = 87104;
  }
  *((_QWORD *)&v138 + 1) = v109 | (v110 << 48);
  v112 = a3 + 2;
  v113 = (_WORD *)(a1 + 4 * (a3 + 2) + 260);
  v114 = (unsigned __int16)*v113;
  if (a7)
  {
    if ((_DWORD)v114 == 0xFFFF)
    {
      v115 = *(__int16 *)(a1 + 1998);
      v114 = *(unsigned __int16 *)(a1 + 1998);
      *v113 = v115;
      *(_WORD *)(a1 + 4 * v115 + 262) = v112;
      v26 = (v112 & 0xFFFFFFF0) == 144;
      v116 = v115 + 11;
      if (!v26)
        v116 = v115 + 1;
      *(_WORD *)(a1 + 1998) = v116;
    }
    v117 = ((v114 << 48) | 0x19C840) + 65;
    *(_WORD *)(a1 + 2002) = 1;
  }
  else
  {
    if ((_DWORD)v114 == 0xFFFF)
    {
      v118 = *(__int16 *)(a1 + 1998);
      v114 = *(unsigned __int16 *)(a1 + 1998);
      *v113 = v118;
      *(_WORD *)(a1 + 4 * v118 + 262) = v112;
      v26 = (v112 & 0xFFFFFFF0) == 144;
      v119 = v118 + 11;
      if (!v26)
        v119 = v118 + 1;
      *(_WORD *)(a1 + 1998) = v119;
    }
    v117 = ((v114 << 48) | 0x19C840) + 64;
  }
  *(_QWORD *)&v139 = v117;
  v120 = (unsigned __int16)*v93;
  if (v120 == 0xFFFF)
  {
    v121 = *(unsigned __int16 *)(a1 + 2004);
    *v93 = v121;
    *(_WORD *)(a1 + 2004) = v121 + 1;
    v120 = (unsigned __int16)*v93;
    *((_QWORD *)&v139 + 1) = (v121 << 48) | 0x19C840;
    if ((_DWORD)v120 == 0xFFFF)
    {
      v120 = *(unsigned __int16 *)(a1 + 2004);
      *v93 = v120;
      *(_WORD *)(a1 + 2004) = v120 + 1;
    }
  }
  else
  {
    *((_QWORD *)&v139 + 1) = (v120 << 48) | 0x19C840;
  }
  *(_QWORD *)&v138 = (v120 << 48) | 0x72679000;
  (*(void (**)(uint64_t, uint64_t *))(a1 + 2016))(a1, &v137);
  v142 = 0;
  v140 = 0u;
  v141 = 0u;
  v138 = 0u;
  v139 = 0u;
  v137 = (8 * (*(_DWORD *)(a1 + 16) & 7)) | 0x3100000FC3;
  *(_DWORD *)(a1 + 16) = 3;
  if (a6)
  {
    v122 = (unsigned __int16)gleVStateProgram_GetAttrib(a1, a2);
    v123 = 130560;
  }
  else
  {
    v124 = a1 + 2 * a2;
    LODWORD(v122) = *(unsigned __int16 *)(v124 + 1900);
    if ((_DWORD)v122 == 0xFFFF)
    {
      LODWORD(v122) = *(unsigned __int16 *)(a1 + 2004);
      *(_WORD *)(v124 + 1900) = v122;
      *(_WORD *)(a1 + 2004) = v122 + 1;
    }
    v122 = v122;
    v123 = 130624;
  }
  *((_QWORD *)&v138 + 1) = v123 | (v122 << 48);
  v125 = a3 + 3;
  v126 = (_WORD *)(a1 + 4 * (a3 + 3) + 260);
  v127 = (unsigned __int16)*v126;
  if (a7)
  {
    if ((_DWORD)v127 == 0xFFFF)
    {
      v128 = *(__int16 *)(a1 + 1998);
      v127 = *(unsigned __int16 *)(a1 + 1998);
      *v126 = v128;
      *(_WORD *)(a1 + 4 * v128 + 262) = v125;
      v26 = (v125 & 0xFFFFFFF0) == 144;
      v129 = v128 + 11;
      if (!v26)
        v129 = v128 + 1;
      *(_WORD *)(a1 + 1998) = v129;
    }
    v130 = ((v127 << 48) | 0x19C840) + 65;
    *(_WORD *)(a1 + 2002) = 1;
  }
  else
  {
    if ((_DWORD)v127 == 0xFFFF)
    {
      v131 = *(__int16 *)(a1 + 1998);
      v127 = *(unsigned __int16 *)(a1 + 1998);
      *v126 = v131;
      *(_WORD *)(a1 + 4 * v131 + 262) = v125;
      v26 = (v125 & 0xFFFFFFF0) == 144;
      v132 = v131 + 11;
      if (!v26)
        v132 = v131 + 1;
      *(_WORD *)(a1 + 1998) = v132;
    }
    v130 = ((v127 << 48) | 0x19C840) + 64;
  }
  *(_QWORD *)&v139 = v130;
  v133 = (unsigned __int16)*v93;
  if ((_DWORD)v133 == 0xFFFF)
  {
    v133 = *(unsigned __int16 *)(a1 + 2004);
    *v93 = v133;
    *(_WORD *)(a1 + 2004) = v133 + 1;
  }
  *((_QWORD *)&v139 + 1) = (v133 << 48) | 0x19C840;
  if (!v136)
  {
    v83 = a1 + 2 * v107;
    v80 = *(unsigned __int16 *)(v83 + 1900);
    goto LABEL_166;
  }
  v134 = a1 + 4 * v107;
  v80 = *(unsigned __int16 *)(v134 + 1692);
  v81 = 1919397888;
  if ((_DWORD)v80 == 0xFFFF)
  {
    v82 = *(__int16 *)(a1 + 2000);
    v80 = *(unsigned __int16 *)(a1 + 2000);
    *(_WORD *)(v134 + 1692) = v82;
    *(_WORD *)(a1 + 4 * v82 + 1694) = v107;
    goto LABEL_164;
  }
LABEL_168:
  *(_QWORD *)&v138 = v81 | (v80 << 48);
  return (*(uint64_t (**)(uint64_t, uint64_t *))(a1 + 2016))(a1, &v137);
}

uint64_t gleVStateProgram_MultMatrix3x3(uint64_t a1, int a2, int a3, int a4, int a5, int a6)
{
  uint64_t v10;
  uint64_t v11;
  _WORD *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  __int16 v16;
  uint64_t v17;
  _WORD *v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  _WORD *v26;
  uint64_t v27;
  int v28;
  _WORD *v29;
  uint64_t v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  int v37;
  _WORD *v38;
  uint64_t v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  uint64_t v46;
  _WORD *v47;
  uint64_t v48;
  __int16 v49;
  uint64_t v50;
  _WORD *v51;
  uint64_t v52;
  int v53;
  _WORD *v54;
  uint64_t v55;
  uint64_t v56;
  __int16 v57;
  uint64_t v58;
  uint64_t v59;
  __int16 v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  _WORD *v64;
  uint64_t v65;
  uint64_t v66;
  __int16 v67;
  uint64_t v68;
  uint64_t v69;
  __int16 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;

  v79 = 0;
  v78 = 0u;
  v77 = 0u;
  v76 = 0u;
  v10 = 8 * (*(_DWORD *)(a1 + 16) & 7);
  if (a6)
  {
    v74 = v10 | 0x3100000A02;
    *(_DWORD *)(a1 + 16) = 2;
    *((_QWORD *)&v75 + 1) = ((gleVStateProgram_GetAttrib(a1, 1) << 48) | 0x19C880) - 128;
    v11 = a2 + 4;
    v12 = (_WORD *)(a1 + 4 * v11 + 260);
    v13 = (unsigned __int16)*v12;
    if (a5)
    {
      if ((_DWORD)v13 == 0xFFFF)
      {
        v14 = *(__int16 *)(a1 + 1998);
        v13 = *(unsigned __int16 *)(a1 + 1998);
        *v12 = v14;
        *(_WORD *)(a1 + 4 * v14 + 262) = v11;
        v15 = (v11 & 0xFFFFFFF0) == 144;
        v16 = v14 + 11;
        if (!v15)
          v16 = v14 + 1;
        *(_WORD *)(a1 + 1998) = v16;
      }
      v17 = ((v13 << 48) | 0x19C880) + 1;
      *(_WORD *)(a1 + 2002) = 1;
    }
    else
    {
      if ((_DWORD)v13 == 0xFFFF)
      {
        v24 = *(__int16 *)(a1 + 1998);
        v13 = *(unsigned __int16 *)(a1 + 1998);
        *v12 = v24;
        *(_WORD *)(a1 + 4 * v24 + 262) = v11;
        v15 = (v11 & 0xFFFFFFF0) == 144;
        v25 = v24 + 11;
        if (!v15)
          v25 = v24 + 1;
        *(_WORD *)(a1 + 1998) = v25;
      }
      v17 = (v13 << 48) | 0x19C880;
    }
    *(_QWORD *)&v76 = v17;
    v26 = (_WORD *)(a1 + 2 * a3 + 1900);
    v27 = (unsigned __int16)*v26;
    if ((_DWORD)v27 == 0xFFFF)
    {
      v27 = *(unsigned __int16 *)(a1 + 2004);
      *v26 = v27;
      *(_WORD *)(a1 + 2004) = v27 + 1;
    }
    *(_QWORD *)&v75 = ((v27 << 48) | 0x72679000) - 229376;
    (*(void (**)(uint64_t, uint64_t *))(a1 + 2016))(a1, &v74);
    v79 = 0;
    v77 = 0u;
    v78 = 0u;
    v76 = 0u;
    v74 = (8 * (*(_DWORD *)(a1 + 16) & 7)) | 0x3100000A02;
    *(_DWORD *)(a1 + 16) = 2;
    *((_QWORD *)&v75 + 1) = (gleVStateProgram_GetAttrib(a1, 1) << 48) | 0x19C800;
    v28 = a2 + 5;
    v29 = (_WORD *)(a1 + 4 * (a2 + 5) + 260);
    v30 = (unsigned __int16)*v29;
    if (a5)
    {
      if ((_DWORD)v30 == 0xFFFF)
      {
        v31 = *(__int16 *)(a1 + 1998);
        v30 = *(unsigned __int16 *)(a1 + 1998);
        *v29 = v31;
        *(_WORD *)(a1 + 4 * v31 + 262) = v28;
        v15 = (v28 & 0xFFFFFFF0) == 144;
        v32 = v31 + 11;
        if (!v15)
          v32 = v31 + 1;
        *(_WORD *)(a1 + 1998) = v32;
      }
      v33 = ((v30 << 48) | 0x19C880) + 1;
      *(_WORD *)(a1 + 2002) = 1;
    }
    else
    {
      if ((_DWORD)v30 == 0xFFFF)
      {
        v34 = *(__int16 *)(a1 + 1998);
        v30 = *(unsigned __int16 *)(a1 + 1998);
        *v29 = v34;
        *(_WORD *)(a1 + 4 * v34 + 262) = v28;
        v15 = (v28 & 0xFFFFFFF0) == 144;
        v35 = v34 + 11;
        if (!v15)
          v35 = v34 + 1;
        *(_WORD *)(a1 + 1998) = v35;
      }
      v33 = (v30 << 48) | 0x19C880;
    }
    *(_QWORD *)&v76 = v33;
    v36 = (unsigned __int16)*v26;
    if ((_DWORD)v36 == 0xFFFF)
    {
      v36 = *(unsigned __int16 *)(a1 + 2004);
      *v26 = v36;
      *(_WORD *)(a1 + 2004) = v36 + 1;
    }
    *(_QWORD *)&v75 = (v36 << 48) | 0x72621000;
    (*(void (**)(uint64_t, uint64_t *))(a1 + 2016))(a1, &v74);
    v79 = 0;
    v77 = 0u;
    v78 = 0u;
    v76 = 0u;
    v74 = (8 * (*(_DWORD *)(a1 + 16) & 7)) | 0x3100000A02;
    *(_DWORD *)(a1 + 16) = 2;
    *((_QWORD *)&v75 + 1) = (gleVStateProgram_GetAttrib(a1, 1) << 48) | 0x19C800;
    v37 = a2 + 6;
    v38 = (_WORD *)(a1 + 4 * (a2 + 6) + 260);
    v39 = (unsigned __int16)*v38;
    if (a5)
    {
      if ((_DWORD)v39 == 0xFFFF)
      {
        v40 = *(__int16 *)(a1 + 1998);
        v39 = *(unsigned __int16 *)(a1 + 1998);
        *v38 = v40;
        *(_WORD *)(a1 + 4 * v40 + 262) = v37;
        v15 = (v37 & 0xFFFFFFF0) == 144;
        v41 = v40 + 11;
        if (!v15)
          v41 = v40 + 1;
        *(_WORD *)(a1 + 1998) = v41;
      }
      v42 = ((v39 << 48) | 0x19C880) + 1;
      *(_WORD *)(a1 + 2002) = 1;
    }
    else
    {
      if ((_DWORD)v39 == 0xFFFF)
      {
        v43 = *(__int16 *)(a1 + 1998);
        v39 = *(unsigned __int16 *)(a1 + 1998);
        *v38 = v43;
        *(_WORD *)(a1 + 4 * v43 + 262) = v37;
        v15 = (v37 & 0xFFFFFFF0) == 144;
        v44 = v43 + 11;
        if (!v15)
          v44 = v43 + 1;
        *(_WORD *)(a1 + 1998) = v44;
      }
      v42 = (v39 << 48) | 0x19C880;
    }
    *(_QWORD *)&v76 = v42;
    v45 = (unsigned __int16)*v26;
    v46 = 1918996480;
    if ((_DWORD)v45 == 0xFFFF)
    {
      v47 = (_WORD *)(a1 + 2004);
      v45 = *(unsigned __int16 *)(a1 + 2004);
      *v26 = v45;
LABEL_84:
      *v47 = v45 + 1;
    }
  }
  else
  {
    v74 = v10 | 0x3100000882;
    *(_DWORD *)(a1 + 16) = 2;
    *((_QWORD *)&v75 + 1) = gleVStateProgram_GetAttrib(a1, 1) << 48;
    v19 = (_WORD *)(a1 + 4 * a2 + 260);
    v20 = (unsigned __int16)*v19;
    if (a5)
    {
      if ((_DWORD)v20 == 0xFFFF)
      {
        v21 = *(__int16 *)(a1 + 1998);
        v20 = *(unsigned __int16 *)(a1 + 1998);
        *v19 = v21;
        *(_WORD *)(a1 + 4 * v21 + 262) = a2;
        v22 = v21 + 11;
        if ((a2 & 0xFFFFFFF0) != 0x90)
          v22 = v21 + 1;
        *(_WORD *)(a1 + 1998) = v22;
      }
      v23 = ((v20 << 48) | 0x19C880) + 1;
      *(_WORD *)(a1 + 2002) = 1;
    }
    else
    {
      if ((_DWORD)v20 == 0xFFFF)
      {
        v48 = *(__int16 *)(a1 + 1998);
        v20 = *(unsigned __int16 *)(a1 + 1998);
        *v19 = v48;
        *(_WORD *)(a1 + 4 * v48 + 262) = a2;
        v49 = v48 + 11;
        if ((a2 & 0xFFFFFFF0) != 0x90)
          v49 = v48 + 1;
        *(_WORD *)(a1 + 1998) = v49;
      }
      v23 = (v20 << 48) | 0x19C880;
    }
    v50 = a2;
    *(_QWORD *)&v76 = v23;
    v51 = (_WORD *)(a1 + 2 * a4 + 1900);
    v52 = (unsigned __int16)*v51;
    if ((_DWORD)v52 == 0xFFFF)
    {
      v52 = *(unsigned __int16 *)(a1 + 2004);
      *v51 = v52;
      *(_WORD *)(a1 + 2004) = v52 + 1;
    }
    v46 = 1919389696;
    *(_QWORD *)&v75 = (v52 << 48) | 0x72679000;
    (*(void (**)(uint64_t, uint64_t *))(a1 + 2016))(a1, &v74);
    v79 = 0;
    v78 = 0u;
    v77 = 0u;
    v76 = 0u;
    v75 = 0u;
    v74 = (8 * (*(_DWORD *)(a1 + 16) & 7)) | 0x3100000FC3;
    *(_DWORD *)(a1 + 16) = 3;
    *((_QWORD *)&v75 + 1) = (gleVStateProgram_GetAttrib(a1, 1) << 48) | 0xAA00;
    v53 = v50 + 1;
    v54 = (_WORD *)(a1 + 4 * (v50 + 1) + 260);
    v55 = (unsigned __int16)*v54;
    if (a5)
    {
      if ((_DWORD)v55 == 0xFFFF)
      {
        v56 = *(__int16 *)(a1 + 1998);
        v55 = *(unsigned __int16 *)(a1 + 1998);
        *v54 = v56;
        *(_WORD *)(a1 + 4 * v56 + 262) = v53;
        v15 = (v53 & 0xFFFFFFF0) == 144;
        v57 = v56 + 11;
        if (!v15)
          v57 = v56 + 1;
        *(_WORD *)(a1 + 1998) = v57;
      }
      v58 = ((v55 << 48) | 0x19C880) + 1;
      *(_WORD *)(a1 + 2002) = 1;
    }
    else
    {
      if ((_DWORD)v55 == 0xFFFF)
      {
        v59 = *(__int16 *)(a1 + 1998);
        v55 = *(unsigned __int16 *)(a1 + 1998);
        *v54 = v59;
        *(_WORD *)(a1 + 4 * v59 + 262) = v53;
        v15 = (v53 & 0xFFFFFFF0) == 144;
        v60 = v59 + 11;
        if (!v15)
          v60 = v59 + 1;
        *(_WORD *)(a1 + 1998) = v60;
      }
      v58 = (v55 << 48) | 0x19C880;
    }
    *(_QWORD *)&v76 = v58;
    v61 = (unsigned __int16)*v51;
    if (v61 == 0xFFFF)
    {
      v62 = *(unsigned __int16 *)(a1 + 2004);
      *v51 = v62;
      *(_WORD *)(a1 + 2004) = v62 + 1;
      v61 = (unsigned __int16)*v51;
      *((_QWORD *)&v76 + 1) = (v62 << 48) | 0x19C840;
      if ((_DWORD)v61 == 0xFFFF)
      {
        v61 = *(unsigned __int16 *)(a1 + 2004);
        *v51 = v61;
        *(_WORD *)(a1 + 2004) = v61 + 1;
      }
    }
    else
    {
      *((_QWORD *)&v76 + 1) = (v61 << 48) | 0x19C840;
    }
    *(_QWORD *)&v75 = (v61 << 48) | 0x72679000;
    (*(void (**)(uint64_t, uint64_t *))(a1 + 2016))(a1, &v74);
    v79 = 0;
    v77 = 0u;
    v78 = 0u;
    v75 = 0u;
    v76 = 0u;
    v74 = (8 * (*(_DWORD *)(a1 + 16) & 7)) | 0x3100000FC3;
    *(_DWORD *)(a1 + 16) = 3;
    *((_QWORD *)&v75 + 1) = (gleVStateProgram_GetAttrib(a1, 1) << 48) | 0x15400;
    v63 = v50 + 2;
    v64 = (_WORD *)(a1 + 4 * (v50 + 2) + 260);
    v65 = (unsigned __int16)*v64;
    if (a5)
    {
      if ((_DWORD)v65 == 0xFFFF)
      {
        v66 = *(__int16 *)(a1 + 1998);
        v65 = *(unsigned __int16 *)(a1 + 1998);
        *v64 = v66;
        *(_WORD *)(a1 + 4 * v66 + 262) = v63;
        v15 = (v63 & 0xFFFFFFF0) == 144;
        v67 = v66 + 11;
        if (!v15)
          v67 = v66 + 1;
        *(_WORD *)(a1 + 1998) = v67;
      }
      v68 = ((v65 << 48) | 0x19C880) + 1;
      *(_WORD *)(a1 + 2002) = 1;
    }
    else
    {
      if ((_DWORD)v65 == 0xFFFF)
      {
        v69 = *(__int16 *)(a1 + 1998);
        v65 = *(unsigned __int16 *)(a1 + 1998);
        *v64 = v69;
        *(_WORD *)(a1 + 4 * v69 + 262) = v63;
        v15 = (v63 & 0xFFFFFFF0) == 144;
        v70 = v69 + 11;
        if (!v15)
          v70 = v69 + 1;
        *(_WORD *)(a1 + 1998) = v70;
      }
      v68 = (v65 << 48) | 0x19C880;
    }
    *(_QWORD *)&v76 = v68;
    v71 = (unsigned __int16)*v51;
    if ((_DWORD)v71 == 0xFFFF)
    {
      v71 = *(unsigned __int16 *)(a1 + 2004);
      *v51 = v71;
      *(_WORD *)(a1 + 2004) = v71 + 1;
    }
    *((_QWORD *)&v76 + 1) = (v71 << 48) | 0x19C840;
    v72 = a1 + 2 * a3;
    v45 = *(unsigned __int16 *)(v72 + 1900);
    if ((_DWORD)v45 == 0xFFFF)
    {
      v47 = (_WORD *)(a1 + 2004);
      v45 = *(unsigned __int16 *)(a1 + 2004);
      *(_WORD *)(v72 + 1900) = v45;
      goto LABEL_84;
    }
  }
  *(_QWORD *)&v75 = v46 | (v45 << 48);
  return (*(uint64_t (**)(uint64_t, uint64_t *))(a1 + 2016))(a1, &v74);
}

uint64_t gleVStateProgram_NormalizeVector(uint64_t a1, int a2, int a3, int a4, int a5)
{
  _WORD *v8;
  uint64_t v9;
  uint64_t v10;
  _WORD *v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _WORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = ((8 * (*(_DWORD *)(a1 + 16) & 7)) | 0x3100000882) + 384;
  *(_DWORD *)(a1 + 16) = 2;
  v8 = (_WORD *)(a1 + 2 * a2 + 1900);
  v9 = (unsigned __int16)*v8;
  if (v9 == 0xFFFF)
  {
    v10 = *(unsigned __int16 *)(a1 + 2004);
    *v8 = v10;
    *(_WORD *)(a1 + 2004) = v10 + 1;
    v9 = (unsigned __int16)*v8;
    *(_QWORD *)&v24 = (v10 << 48) | 0x19C840;
    if ((_DWORD)v9 == 0xFFFF)
    {
      v9 = *(unsigned __int16 *)(a1 + 2004);
      *v8 = v9;
      *(_WORD *)(a1 + 2004) = v9 + 1;
    }
  }
  else
  {
    *(_QWORD *)&v24 = (v9 << 48) | 0x19C840;
  }
  *((_QWORD *)&v24 + 1) = (v9 << 48) | 0x19C840;
  v11 = (_WORD *)(a1 + 2 * a4 + 1900);
  v12 = (unsigned __int16)*v11;
  if ((_DWORD)v12 == 0xFFFF)
  {
    v12 = *(unsigned __int16 *)(a1 + 2004);
    *v11 = v12;
    *(_WORD *)(a1 + 2004) = v12 + 1;
  }
  v23 = (v12 << 48) | 0x72679000;
  (*(void (**)(uint64_t, uint64_t *))(a1 + 2016))(a1, &v22);
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v13 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 16) = 1;
  v22 = (8 * (v13 & 7)) | 0x100080341;
  v14 = (unsigned __int16)*v11;
  if ((_DWORD)v14 == 0xFFFF)
  {
    v14 = *(unsigned __int16 *)(a1 + 2004);
    *v11 = v14;
    *(_WORD *)(a1 + 2004) = v14 + 1;
  }
  *(_QWORD *)&v24 = (v14 << 48) | 0x19C840;
  v15 = (_WORD *)(a1 + 2 * a5 + 1900);
  v16 = (unsigned __int16)*v15;
  if ((_DWORD)v16 == 0xFFFF)
  {
    v16 = *(unsigned __int16 *)(a1 + 2004);
    *v15 = v16;
    *(_WORD *)(a1 + 2004) = v16 + 1;
  }
  v23 = (v16 << 48) | 0x72679000;
  (*(void (**)(uint64_t, uint64_t *))(a1 + 2016))(a1, &v22);
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = (8 * (*(_DWORD *)(a1 + 16) & 7)) | 0x3100000882;
  *(_DWORD *)(a1 + 16) = 2;
  v17 = (unsigned __int16)*v8;
  if ((_DWORD)v17 == 0xFFFF)
  {
    v17 = *(unsigned __int16 *)(a1 + 2004);
    *v8 = v17;
    *(_WORD *)(a1 + 2004) = v17 + 1;
  }
  *(_QWORD *)&v24 = (v17 << 48) | 0x19C840;
  v18 = (unsigned __int16)*v15;
  if ((_DWORD)v18 == 0xFFFF)
  {
    v18 = *(unsigned __int16 *)(a1 + 2004);
    *v15 = v18;
    *(_WORD *)(a1 + 2004) = v18 + 1;
  }
  *((_QWORD *)&v24 + 1) = (v18 << 48) | 0x19C840;
  v19 = a1 + 2 * a3;
  v20 = *(unsigned __int16 *)(v19 + 1900);
  if ((_DWORD)v20 == 0xFFFF)
  {
    v20 = *(unsigned __int16 *)(a1 + 2004);
    *(_WORD *)(v19 + 1900) = v20;
    *(_WORD *)(a1 + 2004) = v20 + 1;
  }
  v23 = (v20 << 48) | 0x72679000;
  return (*(uint64_t (**)(uint64_t, uint64_t *))(a1 + 2016))(a1, &v22);
}

char *glpCallFragmentStateToLLVMIR(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD *a4, _QWORD *a5, _DWORD *a6)
{
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  __int16 v15;
  __int16 v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  _WORD *v20;
  int v21;
  int v22;
  _DWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  char v31;
  uint64_t v32;
  BOOL v33;
  char *v34;
  char *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v40;
  int v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _OWORD v51[2];
  __int128 v52;
  _BYTE v53[28];
  __int128 v54;
  __int128 v55;
  __int128 v56;
  char v57;

  v55 = 0u;
  v56 = 0u;
  *(_OWORD *)&v53[12] = 0u;
  v54 = 0u;
  v40 = 0u;
  v41 = 0;
  *(_QWORD *)&v11 = -1;
  *((_QWORD *)&v11 + 1) = -1;
  v50 = v11;
  v51[0] = v11;
  *(_QWORD *)&v53[14] = -1;
  *(_OWORD *)v53 = v11;
  v52 = v11;
  v51[1] = v11;
  v49 = v11;
  v48 = v11;
  v47 = v11;
  v46 = v11;
  v45 = v11;
  v44 = v11;
  v43 = v11;
  v42 = v11;
  v12 = *(_QWORD *)a1;
  DWORD2(v56) = (*(_QWORD *)a1 >> 38) & 8 | 1;
  *((_QWORD *)&v40 + 1) = &v57;
  BYTE12(v54) = BYTE3(v12) & 1;
  WORD6(v50) = 4096;
  LOWORD(v51[0]) = 4097;
  WORD2(v51[0]) = 4098;
  *(_QWORD *)&v55 = gleFStateProgram_LLVMAddOperation;
  *((_QWORD *)&v55 + 1) = a1;
  gleFStateProgram_Start((uint64_t *)a1, (uint64_t)&v40);
  if ((BYTE8(v56) & 1) != 0)
  {
    gleFStateProgram_AllocateAttribs((uint64_t *)a1, (uint64_t)&v40);
    v13 = *(_QWORD *)a1;
    if ((*(_QWORD *)a1 & 0x40000) != 0)
    {
      v16 = WORD2(v54);
      WORD4(v51[0]) = WORD2(v54);
      *((_WORD *)v51 + 2 * SWORD2(v54) + 5) = 0;
      WORD2(v54) = v16 + 1;
      if ((v13 & 0x200) == 0)
        goto LABEL_12;
      WORD4(v52) = v16 + 1;
      *((_WORD *)v51 + 2 * (__int16)(v16 + 1) + 5) = 8;
      v15 = v16 + 2;
      goto LABEL_7;
    }
    if ((v13 & 0x20000) == 0)
    {
      v14 = WORD2(v54);
      WORD4(v51[0]) = WORD2(v54);
      *((_WORD *)v51 + 2 * SWORD2(v54) + 5) = 0;
      v15 = v14 + 1;
LABEL_7:
      WORD2(v54) = v15;
      goto LABEL_12;
    }
    v17 = 0;
    v18 = BYTE1(v13);
    v19 = WORD2(v54);
    v20 = (_WORD *)v51 + 4;
    do
    {
      if (((v18 >> v17) & 1) != 0)
      {
        *v20 = v19;
        *((_WORD *)v51 + 2 * (__int16)v19++ + 5) = v17;
        WORD2(v54) = v19;
      }
      ++v17;
      v20 += 2;
    }
    while (v17 != 8);
  }
LABEL_12:
  if ((BYTE8(v56) & 1) == 0)
    gleFStateProgram_AllocateAttribs((uint64_t *)a1, (uint64_t)&v40);
  gleFStateProgram_Core(a1, (uint64_t)&v40);
  gleFStateProgram_End(a1, (uint64_t)&v40);
  v21 = 8 * SWORD1(v54) + 64;
  v22 = v21 + gleAttribBindingSize((__int16)v54);
  v23 = malloc_type_malloc(v22, 0x7081ABB9uLL);
  if (!v23)
    goto LABEL_31;
  v24 = v23;
  *(_QWORD *)v23 = 0x3000000030;
  v23[2] = v21;
  v23[3] = v22;
  v23[4] = 0;
  *((_QWORD *)v23 + 3) = 0;
  *(_QWORD *)&v56 = v23;
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD *)a1 & 1 ^ 0x100000001;
  if ((*(_QWORD *)a1 & 0x2000000) != 0)
    v26 = 1;
  v27 = 4 * v26;
  if ((BYTE8(v56) & 2) == 0)
    v27 = 0;
  v28 = 8 * v26;
  if ((BYTE8(v56) & 4) == 0)
    v28 = 0;
  v29 = v27 | v28;
  if ((v25 & 0x40) != 0)
    v29 |= 0x2000000020uLL;
  if ((v25 & 0xE0000) == 0)
  {
    v30 = BYTE1(v25);
    if (BYTE1(v25))
    {
      v31 = 0;
      do
      {
        v32 = 0x10000000100 << v31;
        if ((v30 & 1) == 0)
          v32 = 0;
        v29 |= v32;
        ++v31;
        v33 = v30 > 1;
        v30 >>= 1;
      }
      while (v33);
    }
  }
  *((_QWORD *)v23 + 4) = (unint64_t)((v25 & 0xFF00000000) != 0) << 9;
  *(_QWORD *)(v56 + 40) = v29;
  gleFStateProgram_AddParams((char *)&v40);
  gleFStateProgram_AddAttribs((int *)a1, (uint64_t)&v40);
  v34 = (char *)malloc_type_malloc(0x50uLL, 0x7081ABB9uLL);
  if (!v34)
LABEL_31:
    abort();
  v35 = v34;
  *(_QWORD *)v34 = 0x20000004CLL;
  *(_OWORD *)(v34 + 8) = *(_OWORD *)a1;
  v36 = *(_OWORD *)(a1 + 16);
  v37 = *(_OWORD *)(a1 + 32);
  v38 = *(_OWORD *)(a1 + 48);
  *((_QWORD *)v34 + 9) = *(_QWORD *)(a1 + 64);
  *(_OWORD *)(v34 + 56) = v38;
  *(_OWORD *)(v34 + 40) = v37;
  *(_OWORD *)(v34 + 24) = v36;
  gleCopyParamBindings((_QWORD *)((char *)v24 + *((unsigned int *)v24 + 1)), a2);
  *a4 = v24[4];
  *a5 = v24[5];
  *a6 = *((_DWORD *)v24 + 4);
  free(v24);
  return v35;
}

unsigned __int16 *glpFragmentStateToPPStream(uint64_t a1, _QWORD *a2, _QWORD *a3, _DWORD *a4, _DWORD *a5)
{
  __int128 v9;
  _DWORD **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  BOOL v17;
  uint64_t v20;
  unsigned __int16 *Stream;
  int v24;
  _DWORD **v25;
  _BYTE v26[28];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _OWORD v32[6];
  _BYTE v33[36];
  uint64_t v34;
  char *(*v35)(uint64_t *, uint64_t);
  __int128 v36;
  uint64_t v37;
  __int128 v38;

  v24 = 0;
  v36 = 0u;
  *(_OWORD *)v26 = 0u;
  *(_OWORD *)&v33[20] = 0u;
  v34 = 0;
  v37 = 0;
  *(_QWORD *)&v33[14] = -1;
  *(_QWORD *)&v9 = -1;
  *((_QWORD *)&v9 + 1) = -1;
  *(_OWORD *)v33 = v9;
  v32[5] = v9;
  v32[4] = v9;
  v32[3] = v9;
  v32[2] = v9;
  v32[1] = v9;
  v32[0] = v9;
  v31 = v9;
  v30 = v9;
  v29 = v9;
  v28 = v9;
  v27 = v9;
  *(_OWORD *)&v26[12] = v9;
  v10 = (_DWORD **)PPStreamCreate();
  v25 = v10;
  *(_WORD *)v10 = -30716;
  v35 = gleFStateProgram_AddPPStreamOperation;
  if ((*(_BYTE *)(a1 + 2) & 1) != 0)
    PPStreamAddOption((uint64_t)v10, 12);
  gleFStateProgram_Start((uint64_t *)a1, (uint64_t)&v25);
  gleFStateProgram_Core(a1, (uint64_t)&v25);
  gleFStateProgram_End(a1, (uint64_t)&v25);
  gleFStateProgram_AddAttribs((int *)a1, (uint64_t)&v25);
  gleFStateProgram_AddParams((char *)&v25);
  if (*(__int16 *)&v33[32] >= 1)
  {
    v11 = 0;
    if (BYTE3(v34))
      v12 = 3;
    else
      v12 = 1;
    v13 = 174;
    do
    {
      v14 = *(unsigned __int16 *)&v26[v13 - 8];
      *(_QWORD *)&v38 = v12;
      *((_QWORD *)&v38 + 1) = v11;
      if ((_DWORD)v14 == 8)
      {
        *(_QWORD *)&v38 = 1793;
      }
      else if (v14 <= 7)
      {
        *(_QWORD *)&v38 = v12 | (v14 << 33) | 0x4C0;
      }
      PPStreamAddOutputBinding((uint64_t)v25, &v38);
      ++v11;
      v13 += 4;
    }
    while (v11 < *(__int16 *)&v33[32]);
  }
  if (*(_WORD *)&v33[34])
  {
    v15 = 0;
    v16 = BYTE3(v34);
    do
    {
      if (v16)
        v17 = v15 == *(__int16 *)&v33[20];
      else
        v17 = 1;
      if (v17 || v15 == *(__int16 *)&v33[18] || v15 == *(__int16 *)&v33[16])
        v20 = 193;
      else
        v20 = 195;
      *(_QWORD *)&v38 = v20;
      *((_QWORD *)&v38 + 1) = v15;
      PPStreamAddTempUsage((uint64_t)v25, &v38);
      ++v15;
    }
    while (v15 < *(__int16 *)&v33[34]);
  }
  Stream = PPStreamGetStream((uint64_t)v25, &v24);
  PPStreamFree(v25);
  *a2 = *((_QWORD *)Stream + 1);
  *a3 = *((_QWORD *)Stream + 2);
  *a4 = PPStreamTokenGetProgramOptions((uint64_t)Stream);
  *a5 = PPStreamTokenIsTrivialPassThrough((uint64_t)Stream);
  return Stream;
}

char *gleFStateProgram_AddPPStreamOperation(uint64_t *a1, uint64_t a2)
{
  return PPStreamAddOperation(*a1, a2, 0);
}

uint64_t *gleFStateProgram_Start(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  BOOL v4;
  unint64_t v5;
  float v6;
  uint64_t v7;
  unint64_t v8;
  float v9;
  float v10;
  float v11;
  unsigned int v12;
  float v13;
  float v14;
  float v15;
  uint64_t v16;

  v2 = *result;
  v4 = (*result & 0x20000000000) == 0 && gEnablePrecision != 0;
  *(_BYTE *)(a2 + 251) = v4;
  if ((v2 & 0xFF00) != 0)
  {
    v5 = *((unsigned __int8 *)result + 1);
    v6 = 0.0;
    v7 = 1;
    do
    {
      if (((v5 >> (v7 - 1)) & 1) != 0)
      {
        v8 = result[v7];
        if ((v8 & 0x70000000) == 0x50000000)
        {
          v9 = v6;
          switch((v8 >> 21) & 0xF)
          {
            case 0u:
            case 1u:
            case 2u:
              v9 = v6 + 1.0;
              break;
            case 3u:
            case 8u:
            case 9u:
            case 0xAu:
              v9 = v6 + 2.0;
              break;
            case 4u:
              v9 = (float)(v6 + 1.0) + (float)(v6 + 1.0);
              break;
            case 5u:
            case 6u:
              v9 = (float)(v6 + 1.0) * 12.0;
              break;
            default:
              break;
          }
          switch((v8 >> 50) & 0xF)
          {
            case 0uLL:
            case 1uLL:
            case 2uLL:
              v6 = v6 + 1.0;
              break;
            case 3uLL:
            case 8uLL:
            case 9uLL:
            case 0xAuLL:
              v6 = v6 + 2.0;
              break;
            case 4uLL:
              v6 = (float)(v6 + 1.0) + (float)(v6 + 1.0);
              break;
            case 5uLL:
            case 6uLL:
              v6 = (float)(v6 + 1.0) * 12.0;
              break;
            default:
              break;
          }
          v10 = (float)v9;
          v11 = (float)v6;
          if (v10 >= v11)
            v11 = v10;
          v12 = (v8 >> 25) & 3;
          v13 = v11 + v11;
          if (v12 == 2)
            v14 = v11 * 4.0;
          else
            v14 = v11 + v11;
          if (v12 == 1)
            v14 = v11;
          v15 = (float)v14;
          v16 = (v8 >> 54) & 3;
          if ((_DWORD)v16 == 2)
            v13 = v11 * 4.0;
          if ((_DWORD)v16 != 1)
            v11 = v13;
          v6 = (float)v11;
          if (v15 >= v6)
            v6 = v15;
        }
        else
        {
          v6 = v6 + 1.0;
        }
      }
    }
    while (v5 >> v7++);
    if (v6 > 48.0)
      *(_BYTE *)(a2 + 251) = 0;
  }
  return result;
}

uint64_t gleFStateProgram_Core(uint64_t result, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v16;
  unsigned int v17;
  BOOL v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  BOOL v22;
  BOOL v23;
  uint64_t v24;
  unsigned int v32;
  uint64_t v33;
  _WORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  int v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  unsigned int v139;
  uint64_t *v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  _BOOL4 v145;
  uint64_t v146;
  uint64_t v147;
  unsigned int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t (**v151)();
  int v152;
  __int16 v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  int v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  _OWORD v176[6];

  v3 = (uint64_t *)result;
  v4 = *(_QWORD *)result;
  if ((*(_QWORD *)result & 0x20000) != 0)
  {
    v33 = 0;
    v34 = (_WORD *)(a2 + 172);
    do
    {
      if ((((unint64_t)*v3 >> 8 >> v33) & 1) != 0)
      {
        memset((char *)&v176[1] + 8, 0, 56);
        if (*(_BYTE *)(a2 + 251))
          v35 = 0x3100180000;
        else
          v35 = 0x3100080000;
        *(_QWORD *)&v176[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | v35 | 1;
        *(_DWORD *)(a2 + 16) = 1;
        v36 = (unsigned __int16)*(v34 - 68);
        if ((_DWORD)v36 == 0xFFFF)
        {
          v37 = *(__int16 *)(a2 + 240);
          v36 = *(unsigned __int16 *)(a2 + 240);
          *(v34 - 68) = v37;
          *(_WORD *)(a2 + 4 * v37 + 22) = v33 + 4;
          *(_WORD *)(a2 + 240) = v37 + 1;
        }
        *(_QWORD *)&v176[1] = (v36 << 48) | 0x19C800;
        v38 = (unsigned __int16)*v34;
        if ((_DWORD)v38 == 0xFFFF)
        {
          v39 = *(__int16 *)(a2 + 244);
          v38 = *(unsigned __int16 *)(a2 + 244);
          *v34 = v39;
          *(_WORD *)(a2 + 4 * v39 + 174) = v33;
          *(_WORD *)(a2 + 244) = v39 + 1;
        }
        *((_QWORD *)&v176[0] + 1) = ((v38 << 48) | 0x72679000) + 0x2000;
        result = (*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 256))(a2, v176);
      }
      ++v33;
      v34 += 2;
    }
    while (v33 != 8);
    goto LABEL_135;
  }
  if ((v4 & 0x40000) == 0)
  {
    if ((v4 & 0x80000) == 0)
    {
      v5 = BYTE1(v4);
      if (!BYTE1(v4))
        goto LABEL_135;
      v6 = (v4 >> 8) & 0x7F;
      if (!v6)
      {
        v32 = 7;
        goto LABEL_210;
      }
      v7 = 128;
      v8 = 8;
      v9 = v5;
      while (1)
      {
        v10 = v9;
        v9 = v6;
        if ((v10 & v7) != 0)
        {
          v11 = v3[v8];
          v12 = (v11 >> 28) & 7;
          if (v12 == 5)
          {
            v16 = v11 & 0x1F;
            v17 = (v11 >> 5) & 0x1F;
            v18 = v16 == 3 || v17 == 3;
            v19 = (v11 >> 10) & 0x1F;
            v20 = v18 || v19 == 3;
            v21 = HIDWORD(v11) & 0x1F;
            v22 = v20 || (_DWORD)v21 == 3;
            result = (v11 >> 37) & 0x1F;
            v23 = v22 || (_DWORD)result == 3;
            v24 = (v11 >> 42) & 0x1F;
            if (!v23
              && v24 <= 5
              && result <= 5
              && v21 <= 5
              && v19 <= 5
              && v17 <= 5
              && v16 <= 5
              && (_DWORD)v24 != 3)
            {
LABEL_52:
              v32 = v8 - 1;
              if ((v32 & 0x80000000) != 0)
                goto LABEL_135;
LABEL_210:
              v137 = v32;
              v138 = 4 * v32 + 84;
              while (2)
              {
                v139 = v5 >> (v137 + 1);
                if (((v5 >> v137) & 1) == 0)
                  goto LABEL_269;
                v140 = &v3[v137];
                v141 = v140[1];
                v142 = (v141 >> 59) & 7;
                v143 = (v141 >> 28) & 7;
                if (v143 == 1)
                {
                  v145 = v142 < 4;
                  if (!v139)
                    goto LABEL_225;
                }
                else if (v143 == 3)
                {
                  v145 = (v141 & 0x3000000000000000) == 0x1000000000000000 || v142 == 5;
                  if (!v139)
                  {
LABEL_225:
                    if ((*(_BYTE *)v3 & 0x48) != 0)
                      break;
                    *(_BYTE *)(a2 + 248) = 1;
                    *(_BYTE *)(a2 + 250) = 0;
                    if (!v145)
                    {
LABEL_234:
                      v150 = *(unsigned __int16 *)(a2 + 210);
                      if ((_DWORD)v150 == 0xFFFF)
                      {
                        v150 = *(unsigned __int16 *)(a2 + 246);
                        *(_WORD *)(a2 + 210) = v150;
                        *(_WORD *)(a2 + 246) = v150 + 1;
                      }
                      gleStateProgram_TextureSampleOp(v3, a2, (v150 << 48) | 0x72679000, v137);
                      if (v143 == 5)
                      {
                        memset(v176, 0, 80);
                        v152 = v140[1] & 0x1F;
                        switch(v152)
                        {
                          case 0:
                            if (*(unsigned __int16 *)(a2 + 210) != 0xFFFF)
                              goto LABEL_267;
                            v153 = *(_WORD *)(a2 + 246);
                            *(_WORD *)(a2 + 210) = v153;
                            goto LABEL_258;
                          case 1:
                            if (*(unsigned __int16 *)(a2 + v138) != 0xFFFF)
                              goto LABEL_267;
                            v155 = *(__int16 *)(a2 + 242);
                            *(_WORD *)(a2 + v138) = v155;
                            *(_WORD *)(a2 + 4 * v155 + 86) = v137;
                            goto LABEL_266;
                          case 2:
                            goto LABEL_259;
                          case 3:
                            if (*(_BYTE *)(a2 + 249))
                            {
                              if (*(unsigned __int16 *)(a2 + 208) == 0xFFFF)
                              {
                                v153 = *(_WORD *)(a2 + 246);
                                *(_WORD *)(a2 + 208) = v153;
LABEL_258:
                                *(_WORD *)(a2 + 246) = v153 + 1;
                              }
                            }
                            else
                            {
LABEL_259:
                              if (*(unsigned __int16 *)(a2 + 24) == 0xFFFF)
                              {
                                v156 = *(__int16 *)(a2 + 240);
                                *(_WORD *)(a2 + 24) = v156;
                                *(_WORD *)(a2 + 4 * v156 + 22) = 1;
                                *(_WORD *)(a2 + 240) = v156 + 1;
                              }
                            }
LABEL_267:
                            __asm { BR              X10 }
                            return result;
                          case 4:
                            if (*(unsigned __int16 *)(a2 + 160) == 0xFFFF)
                            {
                              v157 = *(__int16 *)(a2 + 242);
                              *(_WORD *)(a2 + 160) = v157;
                              *(_WORD *)(a2 + 4 * v157 + 86) = 19;
                              *(_WORD *)(a2 + 242) = v157 + 1;
                            }
                            goto LABEL_267;
                          case 5:
                            if (*(unsigned __int16 *)(a2 + 164) != 0xFFFF)
                              goto LABEL_267;
                            v155 = *(__int16 *)(a2 + 242);
                            *(_WORD *)(a2 + 164) = v155;
                            *(_WORD *)(a2 + 4 * v155 + 86) = 20;
LABEL_266:
                            *(_WORD *)(a2 + 242) = v155 + 1;
                            goto LABEL_267;
                          default:
                            v154 = *(unsigned __int16 *)(a2 + 222);
                            if ((_DWORD)v154 == 0xFFFF)
                            {
                              v154 = *(unsigned __int16 *)(a2 + 246);
                              *(_WORD *)(a2 + 222) = v154;
                              *(_WORD *)(a2 + 246) = v154 + 1;
                            }
                            gleStateProgram_TextureSampleOp(v3, a2, (v154 << 48) | 0x72679000, v152 - 6);
                            if (*(unsigned __int16 *)(a2 + 222) != 0xFFFF)
                              goto LABEL_267;
                            v153 = *(_WORD *)(a2 + 246);
                            *(_WORD *)(a2 + 222) = v153;
                            goto LABEL_258;
                        }
                      }
                      switch(v142)
                      {
                        case 0uLL:
                          v151 = &gleStateProgram_ApplyFuncsA;
                          break;
                        case 1uLL:
                          v151 = &gleStateProgram_ApplyFuncsL;
                          break;
                        case 2uLL:
                          v151 = &gleStateProgram_ApplyFuncsLA;
                          break;
                        case 3uLL:
                          v151 = &gleStateProgram_ApplyFuncsI;
                          break;
                        case 4uLL:
                          v151 = &gleStateProgram_ApplyFuncsRGB;
                          break;
                        default:
                          v151 = &gleStateProgram_ApplyFuncsRGBA;
                          break;
                      }
                      result = ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))v151[v143])(v3, a2, v137);
                      v139 = v5 >> (v137 + 1);
LABEL_268:
                      *(_WORD *)(a2 + 249) = 257;
LABEL_269:
                      v138 += 4;
                      ++v137;
                      if (!v139)
                        goto LABEL_135;
                      continue;
                    }
LABEL_227:
                    if (*(_BYTE *)(a2 + 248))
                    {
                      v146 = *(unsigned __int16 *)(a2 + 172);
                      v147 = 1919397888;
                      v148 = v5 >> (v137 + 1);
                      if ((_DWORD)v146 == 0xFFFF)
                      {
                        v149 = *(__int16 *)(a2 + 244);
                        v146 = *(unsigned __int16 *)(a2 + 244);
                        *(_WORD *)(a2 + 172) = v149;
                        *(_WORD *)(a2 + 172 + 4 * v149 + 2) = 0;
                        *(_WORD *)(a2 + 244) = v149 + 1;
                      }
                    }
                    else
                    {
                      v148 = v5 >> (v137 + 1);
                      v146 = *(unsigned __int16 *)(a2 + 208);
                      v147 = 1919389696;
                      if ((_DWORD)v146 == 0xFFFF)
                      {
                        v146 = *(unsigned __int16 *)(a2 + 246);
                        *(_WORD *)(a2 + 208) = v146;
                        *(_WORD *)(a2 + 246) = v146 + 1;
                        v147 = 1919389696;
                      }
                    }
                    result = gleStateProgram_TextureSampleOp(v3, a2, v147 | (v146 << 48), v137);
                    v139 = v148;
                    goto LABEL_268;
                  }
                }
                else
                {
                  v145 = 0;
                  if (!v139)
                    goto LABEL_225;
                }
                break;
              }
              if (!v145)
                goto LABEL_234;
              goto LABEL_227;
            }
          }
          else if (v12 == 3)
          {
            v13 = v11 & 0x3000000000000000;
            v14 = v11 & 0x3800000000000000;
            if (v13 == 0x1000000000000000 || v14 == 0x2800000000000000)
              goto LABEL_52;
          }
        }
        v7 = 1 << (v8 - 2);
        v6 = v9 & ~v7;
        --v8;
        if (!v6)
          goto LABEL_52;
      }
    }
    *(_BYTE *)(a2 + 248) = 1;
    memset(&v176[2], 0, 48);
    v41 = 8 * (*(_DWORD *)(a2 + 16) & 7);
    if (*(_BYTE *)(a2 + 251))
      v42 = 0x3100188000;
    else
      v42 = 0x3100088000;
    *(_DWORD *)(a2 + 16) = 2;
    *(_QWORD *)&v176[0] = v41 | 0x1082 | v42;
    v43 = *(unsigned __int16 *)(a2 + 36);
    if ((_DWORD)v43 == 0xFFFF)
    {
      v44 = *(__int16 *)(a2 + 240);
      v43 = *(unsigned __int16 *)(a2 + 240);
      *(_WORD *)(a2 + 36) = v44;
      *(_WORD *)(a2 + 4 * v44 + 22) = 4;
      *(_WORD *)(a2 + 240) = v44 + 1;
    }
    *(_QWORD *)&v176[1] = (v43 << 48) | 0x19C800;
    *((_QWORD *)&v176[1] + 1) = 2;
    v45 = *(unsigned __int16 *)(a2 + 210);
    if ((_DWORD)v45 == 0xFFFF)
    {
      v45 = *(unsigned __int16 *)(a2 + 246);
      *(_WORD *)(a2 + 210) = v45;
      *(_WORD *)(a2 + 246) = v45 + 1;
    }
    *((_QWORD *)&v176[0] + 1) = (v45 << 48) | 0x72679000;
    (*(void (**)(uint64_t, _OWORD *))(a2 + 256))(a2, v176);
    memset((char *)v176 + 8, 0, 72);
    if (*(_BYTE *)(a2 + 251))
      v46 = 0x3000180000;
    else
      v46 = 0x3000080000;
    v47 = v46 & 0xFFFFFFFFFFFFFFC7 | (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x13C1;
    *(_DWORD *)(a2 + 16) = 1;
    v48 = *(unsigned __int16 *)(a2 + 210);
    if ((_DWORD)v48 == 0xFFFF)
    {
      v48 = *(unsigned __int16 *)(a2 + 246);
      *(_WORD *)(a2 + 210) = v48;
      *(_WORD *)(a2 + 246) = v48 + 1;
    }
    *(_QWORD *)&v176[1] = (v48 << 48) | 0x1FE50;
    *(_QWORD *)&v176[0] = v47;
    (*(void (**)(uint64_t, _OWORD *))(a2 + 256))(a2, v176);
    memset((char *)&v176[1] + 8, 0, 56);
    v49 = 0x3100080000;
    if (*(_BYTE *)(a2 + 251))
      v49 = 0x3100180000;
    *(_QWORD *)&v176[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | v49 | 1;
    *(_DWORD *)(a2 + 16) = 1;
    v50 = *(unsigned __int16 *)(a2 + 24);
    if ((_DWORD)v50 == 0xFFFF)
    {
      v51 = *(__int16 *)(a2 + 240);
      v50 = *(unsigned __int16 *)(a2 + 240);
      *(_WORD *)(a2 + 24) = v51;
      *(_WORD *)(a2 + 4 * v51 + 22) = 1;
      *(_WORD *)(a2 + 240) = v51 + 1;
    }
    *(_QWORD *)&v176[1] = (v50 << 48) | 0x19C800;
    v52 = *(unsigned __int16 *)(a2 + 172);
    if ((_DWORD)v52 == 0xFFFF)
    {
      v53 = *(__int16 *)(a2 + 244);
      v52 = *(unsigned __int16 *)(a2 + 244);
      *(_WORD *)(a2 + 172) = v53;
      *(_WORD *)(a2 + 172 + 4 * v53 + 2) = 0;
      *(_WORD *)(a2 + 244) = v53 + 1;
    }
LABEL_134:
    *((_QWORD *)&v176[0] + 1) = ((v52 << 48) | 0x72679000) + 0x2000;
    result = (*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 256))(a2, v176);
    goto LABEL_135;
  }
  *(_BYTE *)(a2 + 248) = 1;
  v40 = *(_QWORD *)result;
  if ((*(_QWORD *)result & 0x100) != 0)
  {
    memset(&v176[2], 0, 48);
    v54 = 8 * (*(_DWORD *)(a2 + 16) & 7);
    if (*(_BYTE *)(a2 + 251))
      v55 = 0x3100188000;
    else
      v55 = 0x3100088000;
    *(_DWORD *)(a2 + 16) = 2;
    *(_QWORD *)&v176[0] = v54 | 0x1082 | v55;
    v56 = *(unsigned __int16 *)(a2 + 36);
    if ((_DWORD)v56 == 0xFFFF)
    {
      v57 = *(__int16 *)(a2 + 240);
      v56 = *(unsigned __int16 *)(a2 + 240);
      *(_WORD *)(a2 + 36) = v57;
      *(_WORD *)(a2 + 4 * v57 + 22) = 4;
      *(_WORD *)(a2 + 240) = v57 + 1;
    }
    *(_QWORD *)&v176[1] = (v56 << 48) | 0x19C800;
    *((_QWORD *)&v176[1] + 1) = 2;
    if ((*(_BYTE *)(result + 1) & 0x10) != 0)
    {
      v58 = *(unsigned __int16 *)(a2 + 210);
      v59 = 1919389696;
      if ((_DWORD)v58 == 0xFFFF)
      {
        v58 = *(unsigned __int16 *)(a2 + 246);
        *(_WORD *)(a2 + 210) = v58;
        *(_WORD *)(a2 + 246) = v58 + 1;
        v59 = 1919389696;
      }
    }
    else
    {
      v58 = *(unsigned __int16 *)(a2 + 172);
      v59 = 1919397888;
      if ((_DWORD)v58 == 0xFFFF)
      {
        v60 = *(__int16 *)(a2 + 244);
        v58 = *(unsigned __int16 *)(a2 + 244);
        *(_WORD *)(a2 + 172) = v60;
        *(_WORD *)(a2 + 172 + 4 * v60 + 2) = 0;
        *(_WORD *)(a2 + 244) = v60 + 1;
      }
    }
    *((_QWORD *)&v176[0] + 1) = v59 | (v58 << 48);
    result = (*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 256))(a2, v176);
    v40 = *v3;
    if ((*v3 & 0x200) == 0)
    {
LABEL_68:
      if ((v40 & 0x400) == 0)
        goto LABEL_69;
LABEL_109:
      memset((char *)&v176[1] + 8, 0, 56);
      if (*(_BYTE *)(a2 + 251))
        v68 = 0x3100180000;
      else
        v68 = 0x3100080000;
      *(_QWORD *)&v176[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | v68 | 1;
      *(_DWORD *)(a2 + 16) = 1;
      v69 = *(unsigned __int16 *)(a2 + 24);
      if ((_DWORD)v69 == 0xFFFF)
      {
        v70 = *(__int16 *)(a2 + 240);
        v69 = *(unsigned __int16 *)(a2 + 240);
        *(_WORD *)(a2 + 24) = v70;
        *(_WORD *)(a2 + 4 * v70 + 22) = 1;
        *(_WORD *)(a2 + 240) = v70 + 1;
      }
      *(_QWORD *)&v176[1] = (v69 << 48) | 0x19C800;
      v71 = *(unsigned __int16 *)(a2 + 172);
      if ((_DWORD)v71 == 0xFFFF)
      {
        v72 = *(__int16 *)(a2 + 244);
        v71 = *(unsigned __int16 *)(a2 + 244);
        *(_WORD *)(a2 + 172) = v72;
        *(_WORD *)(a2 + 172 + 4 * v72 + 2) = 0;
        *(_WORD *)(a2 + 244) = v72 + 1;
      }
      *((_QWORD *)&v176[0] + 1) = ((v71 << 48) | 0x72679000) + 0x2000;
      result = (*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 256))(a2, v176);
      v40 = *v3;
      if ((*v3 & 0x800) == 0)
      {
LABEL_70:
        if ((v40 & 0x1000) == 0)
          goto LABEL_135;
LABEL_125:
        memset(&v176[2], 0, 48);
        if (*(_BYTE *)(a2 + 251))
          v78 = 0x3100180000;
        else
          v78 = 0x3100080000;
        *(_QWORD *)&v176[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x882 | v78;
        *(_DWORD *)(a2 + 16) = 2;
        v79 = *(unsigned __int16 *)(a2 + 40);
        if ((_DWORD)v79 == 0xFFFF)
        {
          v80 = *(__int16 *)(a2 + 240);
          v79 = *(unsigned __int16 *)(a2 + 240);
          *(_WORD *)(a2 + 40) = v80;
          *(_WORD *)(a2 + 4 * v80 + 22) = 5;
          *(_WORD *)(a2 + 240) = v80 + 1;
        }
        *(_QWORD *)&v176[1] = (v79 << 48) | 0x19C800;
        v81 = *(unsigned __int16 *)(a2 + 210);
        if ((_DWORD)v81 == 0xFFFF)
        {
          v81 = *(unsigned __int16 *)(a2 + 246);
          *(_WORD *)(a2 + 210) = v81;
          *(_WORD *)(a2 + 246) = v81 + 1;
        }
        *((_QWORD *)&v176[1] + 1) = (v81 << 48) | 0x19C840;
        v52 = *(unsigned __int16 *)(a2 + 172);
        if ((_DWORD)v52 == 0xFFFF)
        {
          v82 = *(__int16 *)(a2 + 244);
          v52 = *(unsigned __int16 *)(a2 + 244);
          *(_WORD *)(a2 + 172) = v82;
          *(_WORD *)(a2 + 172 + 4 * v82 + 2) = 0;
          *(_WORD *)(a2 + 244) = v82 + 1;
        }
        goto LABEL_134;
      }
      goto LABEL_117;
    }
  }
  else if ((v40 & 0x200) == 0)
  {
    goto LABEL_68;
  }
  memset(&v176[2], 0, 48);
  v61 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 2;
  *(_QWORD *)&v176[0] = (8 * (v61 & 7)) | 0x3100089082;
  v62 = *(unsigned __int16 *)(a2 + 36);
  if ((_DWORD)v62 == 0xFFFF)
  {
    v63 = *(__int16 *)(a2 + 240);
    v62 = *(unsigned __int16 *)(a2 + 240);
    *(_WORD *)(a2 + 36) = v63;
    *(_WORD *)(a2 + 4 * v63 + 22) = 4;
    *(_WORD *)(a2 + 240) = v63 + 1;
  }
  v64 = (v62 << 48) | 0x19C800;
  v65 = 2;
  if ((*v3 & 0x400) == 0)
    v65 = 0x100000002;
  *(_QWORD *)&v176[1] = v64;
  *((_QWORD *)&v176[1] + 1) = v65;
  v66 = *(unsigned __int16 *)(a2 + 204);
  if ((_DWORD)v66 == 0xFFFF)
  {
    v67 = *(__int16 *)(a2 + 244);
    v66 = *(unsigned __int16 *)(a2 + 244);
    *(_WORD *)(a2 + 204) = v67;
    *(_WORD *)(a2 + 4 * v67 + 174) = 8;
    *(_WORD *)(a2 + 244) = v67 + 1;
  }
  *((_QWORD *)&v176[0] + 1) = ((v66 << 48) | 0x72679000) + 0x2000;
  result = (*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 256))(a2, v176);
  v40 = *v3;
  if ((*v3 & 0x400) != 0)
    goto LABEL_109;
LABEL_69:
  if ((v40 & 0x800) == 0)
    goto LABEL_70;
LABEL_117:
  memset((char *)&v176[1] + 8, 0, 56);
  if (*(_BYTE *)(a2 + 251))
    v73 = 0x3100180000;
  else
    v73 = 0x3100080000;
  *(_QWORD *)&v176[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | v73 | 1;
  *(_DWORD *)(a2 + 16) = 1;
  v74 = *(unsigned __int16 *)(a2 + 40);
  if ((_DWORD)v74 == 0xFFFF)
  {
    v75 = *(__int16 *)(a2 + 240);
    v74 = *(unsigned __int16 *)(a2 + 240);
    *(_WORD *)(a2 + 40) = v75;
    *(_WORD *)(a2 + 4 * v75 + 22) = 5;
    *(_WORD *)(a2 + 240) = v75 + 1;
  }
  *(_QWORD *)&v176[1] = (v74 << 48) | 0x19C800;
  v76 = *(unsigned __int16 *)(a2 + 172);
  if ((_DWORD)v76 == 0xFFFF)
  {
    v77 = *(__int16 *)(a2 + 244);
    v76 = *(unsigned __int16 *)(a2 + 244);
    *(_WORD *)(a2 + 172) = v77;
    *(_WORD *)(a2 + 172 + 4 * v77 + 2) = 0;
    *(_WORD *)(a2 + 244) = v77 + 1;
  }
  *((_QWORD *)&v176[0] + 1) = ((v76 << 48) | 0x72679000) + 0x2000;
  result = (*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 256))(a2, v176);
  if ((*v3 & 0x1000) != 0)
    goto LABEL_125;
LABEL_135:
  v83 = *v3;
  if ((*v3 & 8) == 0)
  {
    if ((v83 & 0x40) == 0)
      return result;
LABEL_157:
    *(_BYTE *)(a2 + 248) = 1;
    *(_BYTE *)(a2 + 250) = 0;
    gleStateProgram_CheckDestInit(a2);
    v94 = *v3;
    if ((*v3 & 0x80) != 0)
    {
LABEL_280:
      memset((char *)v176 + 8, 0, 72);
      if (*(_BYTE *)(a2 + 251))
        v164 = 0x3100180000;
      else
        v164 = 0x3100080000;
      *(_QWORD *)&v176[0] = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0xF03 | v164;
      *(_DWORD *)(a2 + 16) = 3;
      if ((*(_BYTE *)v3 & 0x80) != 0)
      {
        v165 = *(unsigned __int16 *)(a2 + 32);
        if ((_DWORD)v165 == 0xFFFF)
        {
          v167 = *(__int16 *)(a2 + 240);
          v165 = *(unsigned __int16 *)(a2 + 240);
          *(_WORD *)(a2 + 32) = v167;
          *(_WORD *)(a2 + 4 * v167 + 22) = 3;
          *(_WORD *)(a2 + 240) = v167 + 1;
        }
        v166 = 43520;
      }
      else
      {
        v165 = *(unsigned __int16 *)(a2 + 228);
        v166 = 1689664;
        if ((_DWORD)v165 == 0xFFFF)
        {
          v165 = *(unsigned __int16 *)(a2 + 246);
          *(_WORD *)(a2 + 228) = v165;
          *(_WORD *)(a2 + 246) = v165 + 1;
          v166 = 1689664;
        }
      }
      *(_QWORD *)&v176[1] = v166 | (v165 << 48);
      if (*(_BYTE *)(a2 + 249))
      {
        v168 = *(unsigned __int16 *)(a2 + 208);
        v169 = 1689664;
        if ((_DWORD)v168 == 0xFFFF)
        {
          v168 = *(unsigned __int16 *)(a2 + 246);
          *(_WORD *)(a2 + 208) = v168;
          *(_WORD *)(a2 + 246) = v168 + 1;
          v169 = 1689664;
        }
      }
      else
      {
        v168 = *(unsigned __int16 *)(a2 + 24);
        v169 = 1689600;
        if ((_DWORD)v168 == 0xFFFF)
        {
          v170 = *(__int16 *)(a2 + 240);
          v168 = *(unsigned __int16 *)(a2 + 240);
          *(_WORD *)(a2 + 24) = v170;
          *(_WORD *)(a2 + 4 * v170 + 22) = 1;
          *(_WORD *)(a2 + 240) = v170 + 1;
        }
      }
      *((_QWORD *)&v176[1] + 1) = v169 | (v168 << 48);
      v171 = *(unsigned __int16 *)(a2 + 156);
      if ((_DWORD)v171 == 0xFFFF)
      {
        v172 = *(__int16 *)(a2 + 242);
        v171 = *(unsigned __int16 *)(a2 + 242);
        *(_WORD *)(a2 + 156) = v172;
        *(_WORD *)(a2 + 4 * v172 + 86) = 18;
        *(_WORD *)(a2 + 242) = v172 + 1;
      }
      *(_QWORD *)&v176[2] = ((v171 << 48) | 0x19C840) + 64;
      if (*(_BYTE *)(a2 + 248))
      {
        v173 = *(unsigned __int16 *)(a2 + 172);
        v174 = 1918906368;
        if ((_DWORD)v173 == 0xFFFF)
        {
          v175 = *(__int16 *)(a2 + 244);
          v173 = *(unsigned __int16 *)(a2 + 244);
          *(_WORD *)(a2 + 172) = v175;
          *(_WORD *)(a2 + 172 + 4 * v175 + 2) = 0;
          *(_WORD *)(a2 + 244) = v175 + 1;
        }
      }
      else
      {
        v173 = *(unsigned __int16 *)(a2 + 208);
        v174 = 1918898176;
        if ((_DWORD)v173 == 0xFFFF)
        {
          v173 = *(unsigned __int16 *)(a2 + 246);
          *(_WORD *)(a2 + 208) = v173;
          *(_WORD *)(a2 + 246) = v173 + 1;
        }
      }
      *((_QWORD *)&v176[0] + 1) = v174 | (v173 << 48) | 0x70000;
      result = (*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 256))(a2, v176);
      *(_WORD *)(a2 + 249) = 257;
      return result;
    }
    v95 = (v94 >> 1) & 3;
    if (v95 == 2)
    {
      if ((v94 & 0x20) == 0)
      {
        memset((char *)&v176[1] + 8, 0, 56);
        v103 = *(_DWORD *)(a2 + 16);
        *(_DWORD *)(a2 + 16) = 1;
        *(_QWORD *)&v176[0] = (8 * (v103 & 7)) | 0x3100080081;
        v104 = *(unsigned __int16 *)(a2 + 32);
        if ((_DWORD)v104 == 0xFFFF)
        {
          v105 = *(__int16 *)(a2 + 240);
          v104 = *(unsigned __int16 *)(a2 + 240);
          *(_WORD *)(a2 + 32) = v105;
          *(_WORD *)(a2 + 4 * v105 + 22) = 3;
          *(_WORD *)(a2 + 240) = v105 + 1;
        }
        *(_QWORD *)&v176[1] = v104 << 48;
        v106 = *(unsigned __int16 *)(a2 + 228);
        if ((_DWORD)v106 == 0xFFFF)
        {
          v106 = *(unsigned __int16 *)(a2 + 246);
          *(_WORD *)(a2 + 228) = v106;
          *(_WORD *)(a2 + 246) = v106 + 1;
        }
        *((_QWORD *)&v176[0] + 1) = (v106 << 48) | 0x72679000;
        (*(void (**)(uint64_t, _OWORD *))(a2 + 256))(a2, v176);
      }
      memset((char *)v176 + 8, 0, 72);
      v107 = *(_DWORD *)(a2 + 16);
      *(_DWORD *)(a2 + 16) = 2;
      *(_QWORD *)&v176[0] = (8 * (v107 & 7)) | 0x3100080882;
      if ((*(_BYTE *)v3 & 0x20) != 0)
      {
        v128 = *(unsigned __int16 *)(a2 + 32);
        if ((_DWORD)v128 == 0xFFFF)
        {
          v129 = *(__int16 *)(a2 + 240);
          v128 = *(unsigned __int16 *)(a2 + 240);
          *(_WORD *)(a2 + 32) = v129;
          *(_WORD *)(a2 + 4 * v129 + 22) = 3;
          *(_WORD *)(a2 + 240) = v129 + 1;
        }
        v109 = v128 << 48;
      }
      else
      {
        v108 = *(unsigned __int16 *)(a2 + 228);
        if ((_DWORD)v108 == 0xFFFF)
        {
          v108 = *(unsigned __int16 *)(a2 + 246);
          *(_WORD *)(a2 + 228) = v108;
          *(_WORD *)(a2 + 246) = v108 + 1;
        }
        v109 = (v108 << 48) | 0x19C840;
      }
      *(_QWORD *)&v176[1] = v109;
      v130 = *(unsigned __int16 *)(a2 + 152);
      if ((_DWORD)v130 == 0xFFFF)
      {
        v131 = *(__int16 *)(a2 + 242);
        v130 = *(unsigned __int16 *)(a2 + 242);
        *(_WORD *)(a2 + 152) = v131;
        *(_WORD *)(a2 + 4 * v131 + 86) = 17;
        *(_WORD *)(a2 + 242) = v131 + 1;
      }
      *((_QWORD *)&v176[1] + 1) = (v130 << 48) | 0x80;
      v132 = *(unsigned __int16 *)(a2 + 228);
      if ((_DWORD)v132 == 0xFFFF)
      {
        v132 = *(unsigned __int16 *)(a2 + 246);
        *(_WORD *)(a2 + 228) = v132;
        *(_WORD *)(a2 + 246) = v132 + 1;
      }
      *((_QWORD *)&v176[0] + 1) = (v132 << 48) | 0x72679000;
      (*(void (**)(uint64_t, _OWORD *))(a2 + 256))(a2, v176);
      memset(&v176[1], 0, 64);
      v133 = *(_DWORD *)(a2 + 16);
      *(_DWORD *)(a2 + 16) = 1;
      *(_QWORD *)&v176[0] = (8 * (v133 & 7)) | 0x100080401;
      if ((*(_BYTE *)v3 & 0x20) != 0)
        *(_QWORD *)&v176[0] = (8 * (v133 & 7)) | 0x80100080401;
    }
    else
    {
      if (v95 == 1)
      {
        if ((v94 & 0x20) == 0)
        {
          memset((char *)&v176[1] + 8, 0, 56);
          v96 = *(_DWORD *)(a2 + 16);
          *(_DWORD *)(a2 + 16) = 1;
          *(_QWORD *)&v176[0] = (8 * (v96 & 7)) | 0x3100080081;
          v97 = *(unsigned __int16 *)(a2 + 32);
          if ((_DWORD)v97 == 0xFFFF)
          {
            v98 = *(__int16 *)(a2 + 240);
            v97 = *(unsigned __int16 *)(a2 + 240);
            *(_WORD *)(a2 + 32) = v98;
            *(_WORD *)(a2 + 4 * v98 + 22) = 3;
            *(_WORD *)(a2 + 240) = v98 + 1;
          }
          *(_QWORD *)&v176[1] = v97 << 48;
          v99 = *(unsigned __int16 *)(a2 + 228);
          if ((_DWORD)v99 == 0xFFFF)
          {
            v99 = *(unsigned __int16 *)(a2 + 246);
            *(_WORD *)(a2 + 228) = v99;
            *(_WORD *)(a2 + 246) = v99 + 1;
          }
          *((_QWORD *)&v176[0] + 1) = (v99 << 48) | 0x72679000;
          (*(void (**)(uint64_t, _OWORD *))(a2 + 256))(a2, v176);
        }
        memset((char *)v176 + 8, 0, 72);
        v100 = *(_DWORD *)(a2 + 16);
        *(_DWORD *)(a2 + 16) = 3;
        *(_QWORD *)&v176[0] = (8 * (v100 & 7)) | 0x83100080FC3;
        if ((*(_BYTE *)v3 & 0x20) != 0)
        {
          v120 = *(unsigned __int16 *)(a2 + 32);
          if ((_DWORD)v120 == 0xFFFF)
          {
            v121 = *(__int16 *)(a2 + 240);
            v120 = *(unsigned __int16 *)(a2 + 240);
            *(_WORD *)(a2 + 32) = v121;
            *(_WORD *)(a2 + 4 * v121 + 22) = 3;
            *(_WORD *)(a2 + 240) = v121 + 1;
          }
          v102 = v120 << 48;
        }
        else
        {
          v101 = *(unsigned __int16 *)(a2 + 228);
          if ((_DWORD)v101 == 0xFFFF)
          {
            v101 = *(unsigned __int16 *)(a2 + 246);
            *(_WORD *)(a2 + 228) = v101;
            *(_WORD *)(a2 + 246) = v101 + 1;
          }
          v102 = (v101 << 48) | 0x19C840;
        }
        *(_QWORD *)&v176[1] = v102 | 0x10;
        v122 = *(unsigned __int16 *)(a2 + 148);
        if ((_DWORD)v122 == 0xFFFF)
        {
          v123 = *(__int16 *)(a2 + 242);
          v122 = *(unsigned __int16 *)(a2 + 242);
          *(_WORD *)(a2 + 148) = v123;
          *(_WORD *)(a2 + 4 * v123 + 86) = 16;
          *(_WORD *)(a2 + 242) = v123 + 1;
        }
        *((_QWORD *)&v176[1] + 1) = ((v122 << 48) | 0x1FE40) + 64;
        v124 = *(unsigned __int16 *)(a2 + 152);
        if ((_DWORD)v124 == 0xFFFF)
        {
          v125 = *(__int16 *)(a2 + 242);
          v124 = *(unsigned __int16 *)(a2 + 242);
          *(_WORD *)(a2 + 152) = v125;
          *(_WORD *)(a2 + 4 * v125 + 86) = 17;
          *(_WORD *)(a2 + 242) = v125 + 1;
        }
        *(_QWORD *)&v176[2] = ((v124 << 48) | 0x1FE40) + 64;
        v126 = *(unsigned __int16 *)(a2 + 228);
        if ((_DWORD)v126 == 0xFFFF)
        {
          v126 = *(unsigned __int16 *)(a2 + 246);
          *(_WORD *)(a2 + 228) = v126;
          *(_WORD *)(a2 + 246) = v126 + 1;
        }
        v127 = (v126 << 48) | 0x72679000;
        goto LABEL_279;
      }
      memset(&v176[2], 0, 48);
      v110 = *(_DWORD *)(a2 + 16);
      *(_DWORD *)(a2 + 16) = 2;
      *(_QWORD *)&v176[0] = (8 * (v110 & 7)) | 0x3100080882;
      v111 = *(unsigned __int16 *)(a2 + 32);
      if ((_DWORD)v111 == 0xFFFF)
      {
        v112 = *(__int16 *)(a2 + 240);
        v111 = *(unsigned __int16 *)(a2 + 240);
        *(_WORD *)(a2 + 32) = v112;
        *(_WORD *)(a2 + 4 * v112 + 22) = 3;
        *(_WORD *)(a2 + 240) = v112 + 1;
      }
      *(_QWORD *)&v176[1] = v111 << 48;
      v113 = *(unsigned __int16 *)(a2 + 152);
      if ((_DWORD)v113 == 0xFFFF)
      {
        v114 = *(__int16 *)(a2 + 242);
        v113 = *(unsigned __int16 *)(a2 + 242);
        *(_WORD *)(a2 + 152) = v114;
        *(_WORD *)(a2 + 4 * v114 + 86) = 17;
        *(_WORD *)(a2 + 242) = v114 + 1;
      }
      *((_QWORD *)&v176[1] + 1) = (v113 << 48) | 0xAA80;
      v115 = *(unsigned __int16 *)(a2 + 228);
      if ((_DWORD)v115 == 0xFFFF)
      {
        v115 = *(unsigned __int16 *)(a2 + 246);
        *(_WORD *)(a2 + 228) = v115;
        *(_WORD *)(a2 + 246) = v115 + 1;
      }
      *((_QWORD *)&v176[0] + 1) = (v115 << 48) | 0x72679000;
      (*(void (**)(uint64_t, _OWORD *))(a2 + 256))(a2, v176);
      memset(&v176[1], 0, 64);
      v116 = *(_DWORD *)(a2 + 16);
      *(_DWORD *)(a2 + 16) = 2;
      *(_QWORD *)&v176[0] = (8 * (v116 & 7)) | 0x3100080882;
      v117 = *(unsigned __int16 *)(a2 + 228);
      if (v117 == 0xFFFF)
      {
        v134 = *(unsigned __int16 *)(a2 + 246);
        v135 = *(unsigned __int16 *)(a2 + 246);
        *(_WORD *)(a2 + 228) = v134;
        v136 = v135 + 1;
        *(_WORD *)(a2 + 246) = v135 + 1;
        v119 = ((unint64_t)(unsigned __int16)v134 << 48) | 0x19C840;
        *(_QWORD *)&v176[1] = v119;
        if ((v136 & 0x10000) != 0)
        {
          v118 = 0;
          *(_WORD *)(a2 + 228) = v136;
          *(_WORD *)(a2 + 246) = 1;
          v119 = 1689664;
        }
        else
        {
          v118 = v134 << 48;
        }
      }
      else
      {
        v118 = v117 << 48;
        v119 = ((unint64_t)(unsigned __int16)v117 << 48) | 0x19C840;
        *(_QWORD *)&v176[1] = v119;
      }
      *((_QWORD *)&v176[1] + 1) = v119;
      *((_QWORD *)&v176[0] + 1) = v118 | 0x72679000;
      (*(void (**)(uint64_t, _OWORD *))(a2 + 256))(a2, v176);
      memset(&v176[1], 0, 64);
      v158 = *(_DWORD *)(a2 + 16);
      *(_DWORD *)(a2 + 16) = 1;
      *(_QWORD *)&v176[0] = (8 * (v158 & 7)) | 0x100080401;
    }
    v159 = *(unsigned __int16 *)(a2 + 228);
    if (v159 == 0xFFFF)
    {
      v161 = *(unsigned __int16 *)(a2 + 246);
      v162 = *(unsigned __int16 *)(a2 + 246);
      *(_WORD *)(a2 + 228) = v161;
      v163 = v162 + 1;
      *(_WORD *)(a2 + 246) = v163;
      *(_QWORD *)&v176[1] = ((unint64_t)(unsigned __int16)v161 << 48) | 0x50;
      if ((v163 & 0x10000) != 0)
      {
        v160 = 0;
        *(_WORD *)(a2 + 228) = v163;
        *(_WORD *)(a2 + 246) = 1;
      }
      else
      {
        v160 = v161 << 48;
      }
    }
    else
    {
      v160 = v159 << 48;
      *(_QWORD *)&v176[1] = ((unint64_t)(unsigned __int16)v159 << 48) | 0x50;
    }
    v127 = v160 | 0x72679000;
LABEL_279:
    *((_QWORD *)&v176[0] + 1) = v127;
    (*(void (**)(uint64_t, _OWORD *))(a2 + 256))(a2, v176);
    goto LABEL_280;
  }
  *(_BYTE *)(a2 + 248) = (*v3 & 0x40) == 0;
  if ((v83 & 0x40) == 0)
    *(_BYTE *)(a2 + 250) = 0;
  gleStateProgram_CheckDestInit(a2);
  memset((char *)v176 + 8, 0, 72);
  v84 = 1572864;
  if (!*(_BYTE *)(a2 + 251))
    v84 = 0x80000;
  v85 = v84 & 0xFFFFFFFFFFFFFFC7 | (8 * (*(_DWORD *)(a2 + 16) & 7));
  *(_QWORD *)&v176[0] = v85 | 0x31000007C2;
  *(_DWORD *)(a2 + 16) = 2;
  if ((*(_BYTE *)v3 & 0x10) != 0)
    *(_QWORD *)&v176[0] = v85 | 0x831000007C2;
  if (*(_BYTE *)(a2 + 249))
  {
    v86 = *(unsigned __int16 *)(a2 + 208);
    v87 = 1689664;
    if ((_DWORD)v86 == 0xFFFF)
    {
      v86 = *(unsigned __int16 *)(a2 + 246);
      *(_WORD *)(a2 + 208) = v86;
      *(_WORD *)(a2 + 246) = v86 + 1;
      v87 = 1689664;
    }
  }
  else
  {
    v86 = *(unsigned __int16 *)(a2 + 24);
    v87 = 1689600;
    if ((_DWORD)v86 == 0xFFFF)
    {
      v88 = *(__int16 *)(a2 + 240);
      v86 = *(unsigned __int16 *)(a2 + 240);
      *(_WORD *)(a2 + 24) = v88;
      *(_WORD *)(a2 + 4 * v88 + 22) = 1;
      *(_WORD *)(a2 + 240) = v88 + 1;
    }
  }
  *(_QWORD *)&v176[1] = v87 | (v86 << 48);
  v89 = *(unsigned __int16 *)(a2 + 28);
  if ((_DWORD)v89 == 0xFFFF)
  {
    v90 = *(__int16 *)(a2 + 240);
    v89 = *(unsigned __int16 *)(a2 + 240);
    *(_WORD *)(a2 + 28) = v90;
    *(_WORD *)(a2 + 4 * v90 + 22) = 2;
    *(_WORD *)(a2 + 240) = v90 + 1;
  }
  *((_QWORD *)&v176[1] + 1) = (v89 << 48) | 0x19C800;
  if (*(_BYTE *)(a2 + 248))
  {
    v91 = *(unsigned __int16 *)(a2 + 172);
    v92 = 1918906368;
    if ((_DWORD)v91 == 0xFFFF)
    {
      v93 = *(__int16 *)(a2 + 244);
      v91 = *(unsigned __int16 *)(a2 + 244);
      *(_WORD *)(a2 + 172) = v93;
      *(_WORD *)(a2 + 172 + 4 * v93 + 2) = 0;
      *(_WORD *)(a2 + 244) = v93 + 1;
    }
  }
  else
  {
    v91 = *(unsigned __int16 *)(a2 + 208);
    v92 = 1918898176;
    if ((_DWORD)v91 == 0xFFFF)
    {
      v91 = *(unsigned __int16 *)(a2 + 246);
      *(_WORD *)(a2 + 208) = v91;
      *(_WORD *)(a2 + 246) = v91 + 1;
    }
  }
  *((_QWORD *)&v176[0] + 1) = v92 | (v91 << 48) | 0x70000;
  result = (*(uint64_t (**)(uint64_t, _OWORD *))(a2 + 256))(a2, v176);
  *(_WORD *)(a2 + 249) = 257;
  if ((*v3 & 0x40) != 0)
    goto LABEL_157;
  return result;
}

uint64_t gleFStateProgram_End(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v10 = 0u;
  if (!*(_BYTE *)(a2 + 248))
  {
    *(_BYTE *)(a2 + 248) = 1;
    if ((*(_BYTE *)(result + 2) & 2) == 0)
    {
      v3 = 1689600;
      v13 = 0uLL;
      v14 = 0uLL;
      v11 = 0uLL;
      v12 = 0uLL;
      if (*(_BYTE *)(a2 + 251))
        v4 = 0x3100180000;
      else
        v4 = 0x3100080000;
      *(_QWORD *)&v10 = v4 & 0xFFFFFFFFFFFFFFC7 | (8 * (*(_DWORD *)(a2 + 16) & 7)) | 1;
      *(_DWORD *)(a2 + 16) = 1;
      if (*(_BYTE *)(a2 + 249))
      {
        v5 = *(unsigned __int16 *)(a2 + 208);
        v3 = 1689664;
        if ((_DWORD)v5 == 0xFFFF)
        {
          v5 = *(unsigned __int16 *)(a2 + 246);
          *(_WORD *)(a2 + 208) = v5;
          *(_WORD *)(a2 + 246) = v5 + 1;
        }
      }
      else
      {
        v5 = *(unsigned __int16 *)(a2 + 24);
        if ((_DWORD)v5 == 0xFFFF)
        {
          v6 = *(__int16 *)(a2 + 240);
          v5 = *(unsigned __int16 *)(a2 + 240);
          *(_WORD *)(a2 + 24) = v6;
          *(_WORD *)(a2 + 4 * v6 + 22) = 1;
          *(_WORD *)(a2 + 240) = v6 + 1;
        }
      }
      *(_QWORD *)&v11 = v3 | (v5 << 48);
      v7 = *(unsigned __int16 *)(a2 + 172);
      if ((_DWORD)v7 == 0xFFFF)
      {
        v8 = *(__int16 *)(a2 + 244);
        v7 = *(unsigned __int16 *)(a2 + 244);
        *(_WORD *)(a2 + 172) = v8;
        *(_WORD *)(a2 + 172 + 4 * v8 + 2) = 0;
        *(_WORD *)(a2 + 244) = v8 + 1;
      }
      *((_QWORD *)&v10 + 1) = (v7 << 48) | 0x7267B000;
      result = (*(uint64_t (**)(uint64_t, __int128 *))(a2 + 256))(a2, &v10);
    }
    *(_BYTE *)(a2 + 250) = 1;
  }
  if ((*(_BYTE *)(a2 + 280) & 1) == 0)
  {
    v9 = **(_QWORD **)(*(_QWORD *)a2 + 104);
    if (v9)
      *(_QWORD *)(v9 + 24) |= 0x4000uLL;
  }
  return result;
}

void gleFStateProgram_AddAttribs(int *a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  _DWORD *v7;
  unsigned int v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  _DWORD *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;

  v4 = *(unsigned __int8 *)(a2 + 251);
  v5 = *a1;
  v6 = *(_QWORD *)(a2 + 272);
  if (v6)
  {
    v7 = (_DWORD *)(v6 + *(int *)(v6 + 8));
    v8 = gleAttribBindingSize(*(__int16 *)(a2 + 240));
    bzero(v7, v8);
    v9 = *(_WORD *)(a2 + 240);
    *v7 = v9;
  }
  else
  {
    v7 = 0;
    v9 = *(_WORD *)(a2 + 240);
  }
  if (v9 >= 1)
  {
    v10 = 0;
    v11 = 0;
    v12 = (unint64_t)(v5 & 1) << 8;
    v13 = 195;
    if (!v4)
      v13 = 193;
    v14 = v13 | 0x800;
    v15 = v13 & 3 | 0x2C08;
    v16 = v13 & 3 | 0x3040;
    v27 = v13;
    v28 = v13 | 0x3000;
    v29 = v13 | 0xC00;
    do
    {
      v17 = *(__int16 *)(a2 + 2 * v10 + 22);
      *(_QWORD *)&v30 = 0;
      *((_QWORD *)&v30 + 1) = v11;
      switch(v17)
      {
        case 0:
          *(_QWORD *)&v30 = 1217;
          v18 = 1217;
          goto LABEL_23;
        case 1:
          v19 = (*(_QWORD *)a1 >> 10) & 0x8000;
          v20 = v14 | v12;
          goto LABEL_12;
        case 2:
          v19 = (*(_QWORD *)a1 >> 10) & 0x8000;
          v20 = v12 | v29;
LABEL_12:
          v18 = v20 | v19;
          break;
        case 3:
          v18 = 0x500007041;
          break;
        case 12:
          *(_QWORD *)&v30 = v16;
          v18 = v16;
          goto LABEL_23;
        case 13:
          *(_QWORD *)&v30 = v15;
          v18 = v15;
          goto LABEL_23;
        case 14:
          v22 = (*(_QWORD *)a1 >> 10) & 0x8000;
          v23 = v14 | v12;
          goto LABEL_21;
        case 15:
          v22 = (*(_QWORD *)a1 >> 10) & 0x8000;
          v23 = v29 | v12;
LABEL_21:
          v18 = v23 | v22 | 0x100000000;
          break;
        default:
          v21 = v28;
          if (((1 << (v17 - 4)) & a1[1]) == 0)
            v21 = v27 | ((unint64_t)(((_BYTE)v17 + 4) & 0x3F) << 32) | 0x7000;
          v18 = v21 & 0x3FFFFFFEF8 | 1;
          break;
      }
      *(_QWORD *)&v30 = v18;
LABEL_23:
      if (*(_QWORD *)a2)
      {
        PPStreamAddAttribBinding(*(_QWORD *)a2, &v30);
      }
      else
      {
        v7[v10 + 2] = (v18 >> 2) & 0x3F00 | v7[v10 + 2] & 0xFFFFC000 | v18;
        v24 = (v18 >> 10) & 0x1F;
        if (v24 > 0xD)
        {
          if (v24 != 14)
          {
            if (v24 == 28)
              v7[v10 + 3] = v7[v10 + 3] & 0xFFFFFE00 | HIDWORD(v18);
            goto LABEL_34;
          }
          v25 = &v7[v10];
          v26 = BYTE4(v18) & 0x1F | (32 * (v25[3] >> 5));
        }
        else
        {
          if (v24 != 2 && v24 != 3)
            goto LABEL_34;
          v25 = &v7[v10];
          v26 = BYTE4(v18) & 1 | (2 * (v25[3] >> 1));
        }
        v25[3] = v26;
      }
LABEL_34:
      ++v11;
      v10 += 2;
    }
    while (v11 < *(__int16 *)(a2 + 240));
  }
}

char *gleFStateProgram_AddParams(char *result)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v1 = result;
  v15 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)result + 34);
  if (v2)
  {
    v3 = v2 + *(int *)(v2 + 4);
    v4 = *((__int16 *)result + 121);
    v5 = *((_WORD *)result + 121);
    *(_QWORD *)v3 = v4;
    *(_DWORD *)(v3 + 8) = v4;
  }
  else
  {
    v3 = 0;
    v5 = *((_WORD *)result + 121);
  }
  if (v5 >= 1)
  {
    v6 = 0;
    if (result[251])
      v7 = 195;
    else
      v7 = 193;
    v8 = 86;
    do
    {
      v9 = *(unsigned __int16 *)&v1[v8];
      *(_QWORD *)&v13 = v7;
      *((_QWORD *)&v13 + 1) = v6;
      if (v9 > 7)
      {
        if ((v9 & 0xFFF8) == 8)
        {
          v10 = v7 | ((unint64_t)(((_BYTE)v9 + 120) & 0x7F) << 32) | 0x1700;
        }
        else
        {
          switch(v9)
          {
            case 0x10u:
              v10 = 6849;
              break;
            case 0x11u:
              v10 = 7105;
              break;
            case 0x12u:
              v10 = v7 | 0x1900;
              break;
            case 0x13u:
              result = *(char **)v1;
              if (!*(_QWORD *)v1)
                goto LABEL_16;
              v14 = xmmword_22A98A6C0;
              goto LABEL_28;
            case 0x14u:
              result = *(char **)v1;
              if (!*(_QWORD *)v1)
                goto LABEL_16;
              v14 = 0uLL;
LABEL_28:
              v11 = *((_QWORD *)result + 16);
              PPStreamAddConstant((uint64_t)result, &v14);
              v10 = v13 & 0xFFFF0000FFFFE0FFLL | ((unint64_t)(unsigned __int16)(*(_DWORD *)(v11 + 16) - 1) << 32) | 0x600;
              break;
            case 0x15u:
              result = *(char **)v1;
              if (!*(_QWORD *)v1)
                goto LABEL_16;
              v14 = xmmword_22A98A6C0;
              v12 = *((_QWORD *)result + 16);
              PPStreamAddConstant((uint64_t)result, &v14);
              v10 = v13 & 0xFFFF0000FFFFE0F8 | ((unint64_t)(unsigned __int16)(*(_DWORD *)(v12 + 16) - 1) << 32) | 0x601;
              break;
            default:
              goto LABEL_14;
          }
        }
      }
      else
      {
        v10 = v7 | ((unint64_t)(v9 & 0x7F) << 32) | 0x1600;
      }
      *(_QWORD *)&v13 = v10;
LABEL_14:
      result = *(char **)v1;
      if (*(_QWORD *)v1)
        result = PPStreamAddParamBinding((uint64_t)result, &v13);
LABEL_16:
      if (v3)
        *(_QWORD *)(v3 + 16 + 8 * v6) = v13;
      ++v6;
      v8 += 4;
    }
    while (v6 < *((__int16 *)v1 + 121));
  }
  return result;
}

uint64_t *gleFStateProgram_AllocateAttribs(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;
  _WORD *v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  int v14;
  __int16 v15;
  uint64_t v16;
  unsigned int v17;
  __int16 v18;
  _WORD *v19;
  BOOL v20;
  unsigned int v21;
  char v22;
  uint64_t v23;

  v2 = *result;
  if ((*result & 0x20000) != 0)
  {
    if ((v2 & 0x40) != 0)
    {
      v7 = *(__int16 *)(a2 + 240);
      *(_WORD *)(a2 + 32) = v7;
      *(_WORD *)(a2 + 4 * v7 + 22) = 3;
      *(_WORD *)(a2 + 240) = v7 + 1;
    }
    v8 = 0;
    v9 = (_WORD *)(a2 + 36);
    do
    {
      if (((1 << v8) & *((_BYTE *)result + 1)) != 0)
      {
        v10 = *(__int16 *)(a2 + 240);
        *v9 = v10;
        *(_WORD *)(a2 + 4 * v10 + 22) = v8 + 4;
        *(_WORD *)(a2 + 240) = v10 + 1;
      }
      ++v8;
      v9 += 2;
    }
    while (v8 != 8);
  }
  else if ((v2 & 0x40000) != 0)
  {
    if ((v2 & 0x400) != 0)
    {
      v11 = *(__int16 *)(a2 + 240);
      *(_WORD *)(a2 + 24) = v11;
      *(_WORD *)(a2 + 4 * v11 + 22) = 1;
      v12 = v11 + 1;
      *(_WORD *)(a2 + 240) = v11 + 1;
      v2 = *result;
      if ((*result & 0x1000000) != 0)
      {
        *(_WORD *)(a2 + 76) = v12;
        *(_WORD *)(a2 + 4 * v12 + 22) = 14;
        *(_WORD *)(a2 + 240) = v11 + 2;
        v2 = *result;
      }
    }
    if ((v2 & 0x300) != 0)
    {
      v13 = *(__int16 *)(a2 + 240);
      *(_WORD *)(a2 + 36) = v13;
      *(_WORD *)(a2 + 4 * v13 + 22) = 4;
      *(_WORD *)(a2 + 240) = v13 + 1;
      v2 = *result;
    }
    if ((v2 & 0x1800) != 0)
    {
      LOWORD(v14) = *(_WORD *)(a2 + 240);
      *(_WORD *)(a2 + 40) = v14;
      v15 = 5;
LABEL_38:
      *(_WORD *)(a2 + 4 * (__int16)v14 + 22) = v15;
      *(_WORD *)(a2 + 240) = v14 + 1;
    }
  }
  else
  {
    if ((v2 & 0x80000) != 0)
    {
      v16 = *(__int16 *)(a2 + 240);
      *(_WORD *)(a2 + 24) = v16;
      *(_WORD *)(a2 + 4 * v16 + 22) = 1;
      LOWORD(v14) = v16 + 1;
      *(_WORD *)(a2 + 240) = v16 + 1;
      if ((*((_BYTE *)result + 3) & 1) != 0)
      {
        *(_WORD *)(a2 + 76) = v14;
        *(_WORD *)(a2 + 4 * (__int16)v14 + 22) = 14;
        LOWORD(v14) = v16 + 2;
      }
      *(_WORD *)(a2 + 36) = v14;
      v15 = 4;
      goto LABEL_38;
    }
    v3 = *(__int16 *)(a2 + 240);
    *(_WORD *)(a2 + 24) = v3;
    *(_WORD *)(a2 + 4 * v3 + 22) = 1;
    v4 = v3 + 1;
    *(_WORD *)(a2 + 240) = v3 + 1;
    v5 = *result;
    if ((*result & 0x1000000) != 0)
    {
      *(_WORD *)(a2 + 76) = v4;
      *(_WORD *)(a2 + 4 * (__int16)v4 + 22) = 14;
      v4 = (unsigned __int16)v3 + 2;
      *(_WORD *)(a2 + 240) = v3 + 2;
      v5 = *result;
    }
    if ((v5 & 8) != 0)
    {
      *(_WORD *)(a2 + 28) = v4;
      *(_WORD *)(a2 + 4 * (__int16)v4 + 22) = 2;
      v6 = v4 + 1;
      *(_WORD *)(a2 + 240) = v4 + 1;
      v5 = *result;
      if ((*result & 0x1000000) != 0)
      {
        *(_WORD *)(a2 + 80) = v6;
        *(_WORD *)(a2 + 4 * v6 + 22) = 15;
        v4 += 2;
        *(_WORD *)(a2 + 240) = v4;
        v5 = *result;
      }
      else
      {
        ++v4;
      }
    }
    v17 = BYTE1(v2);
    if ((v5 & 0x40) != 0)
    {
      *(_WORD *)(a2 + 32) = v4;
      *(_WORD *)(a2 + 4 * (__int16)v4 + 22) = 3;
      v14 = v4 + 1;
      *(_WORD *)(a2 + 240) = v4 + 1;
    }
    else
    {
      v14 = v4;
    }
    if (v17)
    {
      v18 = 0;
      v19 = (_WORD *)(a2 + 36);
      do
      {
        if ((v17 & 1) != 0)
        {
          *v19 = v14;
          *(_WORD *)(a2 + 4 * (__int16)v14++ + 22) = v18 + 4;
          *(_WORD *)(a2 + 240) = v14;
        }
        ++v18;
        v19 += 2;
        v20 = v17 > 1;
        v17 >>= 1;
      }
      while (v20);
    }
    if ((*(_BYTE *)(a2 + 280) & 1) != 0 && *(_BYTE *)(a2 + 252))
    {
      *(_WORD *)(a2 + 72) = v14;
      v15 = 13;
      goto LABEL_38;
    }
  }
  if ((*(_BYTE *)(a2 + 280) & 1) != 0)
  {
    v21 = *((unsigned __int8 *)result + 1);
    if (*((_BYTE *)result + 1))
    {
      v22 = 0;
      do
      {
        if ((v21 & 1) != 0 && ((1 << v22) & *(unsigned __int8 *)(*(_QWORD *)(a2 + 264) + 4)) != 0)
        {
          v23 = *(__int16 *)(a2 + 240);
          *(_WORD *)(a2 + 68) = v23;
          *(_WORD *)(a2 + 4 * v23 + 22) = 12;
          *(_WORD *)(a2 + 240) = v23 + 1;
        }
        ++v22;
        v20 = v21 > 1;
        v21 >>= 1;
      }
      while (v20);
    }
  }
  return result;
}

uint64_t gleStateProgram_TextureSampleOp(uint64_t *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _WORD *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _WORD *v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;

  v4 = a1[a4 + 1];
  v5 = 0;
  switch(HIBYTE(v4) & 7)
  {
    case 1:
      goto LABEL_14;
    case 2:
      v5 = 1;
      goto LABEL_14;
    case 3:
      v9 = (v4 & 0x4000000000000000) == 0;
      v5 = 5;
      v10 = 2;
      goto LABEL_12;
    case 4:
      v9 = (v4 & 0x4000000000000000) == 0;
      v5 = 6;
      v10 = 3;
      goto LABEL_12;
    case 5:
      v9 = (v4 & 0x4000000000000000) == 0;
      v5 = 7;
      v10 = 4;
LABEL_12:
      if (v9)
        v5 = v10;
LABEL_14:
      v11 = 0x3100000002;
      v12 = *a1;
      v13 = 4288;
      if ((int)v4 < 0)
        v13 = 4224;
      v14 = (int)v4 < 0;
      v15 = 4352;
      v16 = 4416;
      if (v14)
        v16 = 4352;
      if ((v12 & 0x10000000000) != 0)
        v17 = 3;
      else
        v17 = 2;
      if ((v12 & 0x10000000000) != 0)
        v11 = 0x3100000003;
      else
        v15 = 4224;
      if ((v12 & 0x10000000000) != 0)
        v18 = v16;
      else
        v18 = v13;
      if (((1 << a4) & BYTE4(v12)) == 0)
        v15 = v18;
      v39 = 0;
      v38 = 0u;
      v37 = 0u;
      v36 = 0u;
      v35 = 0u;
      v19 = v11 | (8 * (*(_DWORD *)(a2 + 16) & 7)) | v15;
      *(_DWORD *)(a2 + 16) = v17;
      v20 = v19;
      v34 = v19 | 0x88000;
      v21 = *a1;
      if ((*a1 & 0x10) != 0)
      {
        v20 = v19;
        v34 = v19 | 0x80000088000;
      }
      v22 = a2 + 4 * (a4 + 4);
      v25 = *(unsigned __int16 *)(v22 + 20);
      v24 = (_WORD *)(v22 + 20);
      v23 = v25;
      if (v25 == 0xFFFF)
      {
        v26 = *(__int16 *)(a2 + 240);
        v23 = *(unsigned __int16 *)(a2 + 240);
        *v24 = v26;
        *(_WORD *)(a2 + 4 * v26 + 22) = a4 + 4;
        *(_WORD *)(a2 + 240) = v26 + 1;
        v21 = *a1;
      }
      *((_QWORD *)&v35 + 1) = ((v23 << 48) | 0x19C880) - 128;
      if ((v21 & 0x10000000000) != 0)
      {
        v27 = a4 + 8;
        v28 = a2 + 4 * v27;
        v31 = *(unsigned __int16 *)(v28 + 84);
        v30 = (_WORD *)(v28 + 84);
        v29 = v31;
        if (v31 == 0xFFFF)
        {
          v32 = *(__int16 *)(a2 + 242);
          v29 = *(unsigned __int16 *)(a2 + 242);
          *v30 = v32;
          *(_WORD *)(a2 + 4 * v32 + 86) = v27;
          *(_WORD *)(a2 + 242) = v32 + 1;
        }
        *(_QWORD *)&v36 = (v29 << 48) | 0x19C880;
      }
      *(&v34 + (v20 & 7) + 1) = *(&v34 + (v20 & 7) + 1) & 0xFFFFFF80FFFFFFE0 | ((unint64_t)(a4 & 0x7F) << 32) | v5;
      break;
    default:
      v39 = 0;
      v38 = 0u;
      v37 = 0u;
      v36 = 0u;
      if (*(_BYTE *)(a2 + 251))
        v6 = 0x3100180000;
      else
        v6 = 0x3100080000;
      v34 = v6 & 0xFFFFFFFFFFFFFFC7 | (8 * (*(_DWORD *)(a2 + 16) & 7)) | 1;
      *(_DWORD *)(a2 + 16) = 1;
      v7 = *(unsigned __int16 *)(a2 + 164);
      if ((_DWORD)v7 == 0xFFFF)
      {
        v8 = *(__int16 *)(a2 + 242);
        v7 = *(unsigned __int16 *)(a2 + 242);
        *(_WORD *)(a2 + 164) = v8;
        *(_WORD *)(a2 + 4 * v8 + 86) = 20;
        *(_WORD *)(a2 + 242) = v8 + 1;
      }
      *((_QWORD *)&v35 + 1) = (v7 << 48) | 0x19C880;
      break;
  }
  *(_QWORD *)&v35 = a3;
  return (*(uint64_t (**)(uint64_t, unint64_t *))(a2 + 256))(a2, &v34);
}

uint64_t gleStateProgram_A_MODULATE(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  gleStateProgram_CheckDestInit(a2);
  v17 = 0;
  v16 = 0u;
  v15 = 0u;
  v14 = 0u;
  v13 = 0u;
  if (*(_BYTE *)(a2 + 251))
    v3 = 0x3100180000;
  else
    v3 = 0x3100080000;
  v12 = v3 & 0xFFFFFFFFFFFFFFC7 | (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x882;
  *(_DWORD *)(a2 + 16) = 2;
  if (*(_BYTE *)(a2 + 249))
  {
    v4 = *(unsigned __int16 *)(a2 + 208);
    v5 = 1689664;
    if ((_DWORD)v4 == 0xFFFF)
    {
      v4 = *(unsigned __int16 *)(a2 + 246);
      *(_WORD *)(a2 + 208) = v4;
      *(_WORD *)(a2 + 246) = v4 + 1;
      v5 = 1689664;
    }
  }
  else
  {
    v4 = *(unsigned __int16 *)(a2 + 24);
    v5 = 1689600;
    if ((_DWORD)v4 == 0xFFFF)
    {
      v6 = *(__int16 *)(a2 + 240);
      v4 = *(unsigned __int16 *)(a2 + 240);
      *(_WORD *)(a2 + 24) = v6;
      *(_WORD *)(a2 + 4 * v6 + 22) = 1;
      *(_WORD *)(a2 + 240) = v6 + 1;
    }
  }
  *((_QWORD *)&v13 + 1) = v5 | (v4 << 48);
  v7 = *(unsigned __int16 *)(a2 + 210);
  if ((_DWORD)v7 == 0xFFFF)
  {
    v7 = *(unsigned __int16 *)(a2 + 246);
    *(_WORD *)(a2 + 210) = v7;
    *(_WORD *)(a2 + 246) = v7 + 1;
  }
  v8 = 1918898176;
  *(_QWORD *)&v14 = (v7 << 48) | 0x19C840;
  if (*(_BYTE *)(a2 + 248))
  {
    v9 = *(unsigned __int16 *)(a2 + 172);
    v8 = 1918906368;
    if ((_DWORD)v9 == 0xFFFF)
    {
      v10 = *(__int16 *)(a2 + 244);
      v9 = *(unsigned __int16 *)(a2 + 244);
      *(_WORD *)(a2 + 172) = v10;
      *(_WORD *)(a2 + 172 + 4 * v10 + 2) = 0;
      *(_WORD *)(a2 + 244) = v10 + 1;
    }
  }
  else
  {
    v9 = *(unsigned __int16 *)(a2 + 208);
    if ((_DWORD)v9 == 0xFFFF)
    {
      v9 = *(unsigned __int16 *)(a2 + 246);
      *(_WORD *)(a2 + 208) = v9;
      *(_WORD *)(a2 + 246) = v9 + 1;
    }
  }
  *(_QWORD *)&v13 = v8 | (v9 << 48) | 0x8000;
  return (*(uint64_t (**)(uint64_t, unint64_t *))(a2 + 256))(a2, &v12);
}

uint64_t gleStateProgram_A_REPLACE(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  gleStateProgram_CheckDestInit(a2);
  v14 = 0;
  v13 = 0u;
  v12 = 0u;
  v11 = 0u;
  v10 = 0u;
  if (*(_BYTE *)(a2 + 251))
    v3 = 0x3100180000;
  else
    v3 = 0x3100080000;
  v9 = v3 & 0xFFFFFFFFFFFFFFC7 | (8 * (*(_DWORD *)(a2 + 16) & 7)) | 1;
  *(_DWORD *)(a2 + 16) = 1;
  v4 = *(unsigned __int16 *)(a2 + 210);
  if ((_DWORD)v4 == 0xFFFF)
  {
    v4 = *(unsigned __int16 *)(a2 + 246);
    *(_WORD *)(a2 + 210) = v4;
    *(_WORD *)(a2 + 246) = v4 + 1;
  }
  v5 = 1918898176;
  *((_QWORD *)&v10 + 1) = (v4 << 48) | 0x19C840;
  if (*(_BYTE *)(a2 + 248))
  {
    v6 = *(unsigned __int16 *)(a2 + 172);
    v5 = 1918906368;
    if ((_DWORD)v6 == 0xFFFF)
    {
      v7 = *(__int16 *)(a2 + 244);
      v6 = *(unsigned __int16 *)(a2 + 244);
      *(_WORD *)(a2 + 172) = v7;
      *(_WORD *)(a2 + 172 + 4 * v7 + 2) = 0;
      *(_WORD *)(a2 + 244) = v7 + 1;
    }
  }
  else
  {
    v6 = *(unsigned __int16 *)(a2 + 208);
    if ((_DWORD)v6 == 0xFFFF)
    {
      v6 = *(unsigned __int16 *)(a2 + 246);
      *(_WORD *)(a2 + 208) = v6;
      *(_WORD *)(a2 + 246) = v6 + 1;
    }
  }
  *(_QWORD *)&v10 = v5 | (v6 << 48) | 0x8000;
  return (*(uint64_t (**)(uint64_t, unint64_t *))(a2 + 256))(a2, &v9);
}

uint64_t gleStateProgram_CheckDestInit(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  if (!*(_BYTE *)(result + 250))
  {
    v1 = 1689600;
    v13 = 0;
    v12 = 0u;
    v11 = 0u;
    v10 = 0u;
    v9 = 0u;
    if (*(_BYTE *)(result + 251))
      v2 = 0x3100180000;
    else
      v2 = 0x3100080000;
    v8 = v2 & 0xFFFFFFFFFFFFFFC7 | (8 * (*(_DWORD *)(result + 16) & 7)) | 1;
    *(_DWORD *)(result + 16) = 1;
    if (*(_BYTE *)(result + 249))
    {
      v3 = *(unsigned __int16 *)(result + 208);
      v1 = 1689664;
      if ((_DWORD)v3 == 0xFFFF)
      {
        v3 = *(unsigned __int16 *)(result + 246);
        *(_WORD *)(result + 208) = v3;
        *(_WORD *)(result + 246) = v3 + 1;
      }
    }
    else
    {
      v3 = *(unsigned __int16 *)(result + 24);
      if ((_DWORD)v3 == 0xFFFF)
      {
        v4 = *(__int16 *)(result + 240);
        v3 = *(unsigned __int16 *)(result + 240);
        *(_WORD *)(result + 24) = v4;
        *(_WORD *)(result + 4 * v4 + 22) = 1;
        *(_WORD *)(result + 240) = v4 + 1;
      }
    }
    v5 = 1919389696;
    *((_QWORD *)&v9 + 1) = v1 | (v3 << 48);
    if (*(_BYTE *)(result + 248))
    {
      v6 = *(unsigned __int16 *)(result + 172);
      v5 = 1919397888;
      if ((_DWORD)v6 == 0xFFFF)
      {
        v7 = *(__int16 *)(result + 244);
        v6 = *(unsigned __int16 *)(result + 244);
        *(_WORD *)(result + 172) = v7;
        *(_WORD *)(result + 172 + 4 * v7 + 2) = 0;
        *(_WORD *)(result + 244) = v7 + 1;
      }
    }
    else
    {
      v6 = *(unsigned __int16 *)(result + 208);
      if ((_DWORD)v6 == 0xFFFF)
      {
        v6 = *(unsigned __int16 *)(result + 246);
        *(_WORD *)(result + 208) = v6;
        *(_WORD *)(result + 246) = v6 + 1;
      }
    }
    *(_QWORD *)&v9 = v5 | (v6 << 48);
    return (*(uint64_t (**)(uint64_t, unint64_t *))(result + 256))(result, &v8);
  }
  return result;
}

uint64_t gleStateProgram_RGB_MODULATE(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  gleStateProgram_CheckDestInit(a2);
  v17 = 0;
  v16 = 0u;
  v15 = 0u;
  v14 = 0u;
  v13 = 0u;
  if (*(_BYTE *)(a2 + 251))
    v3 = 0x3100180000;
  else
    v3 = 0x3100080000;
  v12 = v3 & 0xFFFFFFFFFFFFFFC7 | (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x882;
  *(_DWORD *)(a2 + 16) = 2;
  if (*(_BYTE *)(a2 + 249))
  {
    v4 = *(unsigned __int16 *)(a2 + 208);
    v5 = 1689664;
    if ((_DWORD)v4 == 0xFFFF)
    {
      v4 = *(unsigned __int16 *)(a2 + 246);
      *(_WORD *)(a2 + 208) = v4;
      *(_WORD *)(a2 + 246) = v4 + 1;
      v5 = 1689664;
    }
  }
  else
  {
    v4 = *(unsigned __int16 *)(a2 + 24);
    v5 = 1689600;
    if ((_DWORD)v4 == 0xFFFF)
    {
      v6 = *(__int16 *)(a2 + 240);
      v4 = *(unsigned __int16 *)(a2 + 240);
      *(_WORD *)(a2 + 24) = v6;
      *(_WORD *)(a2 + 4 * v6 + 22) = 1;
      *(_WORD *)(a2 + 240) = v6 + 1;
    }
  }
  *((_QWORD *)&v13 + 1) = v5 | (v4 << 48);
  v7 = *(unsigned __int16 *)(a2 + 210);
  if ((_DWORD)v7 == 0xFFFF)
  {
    v7 = *(unsigned __int16 *)(a2 + 246);
    *(_WORD *)(a2 + 210) = v7;
    *(_WORD *)(a2 + 246) = v7 + 1;
  }
  v8 = 1918898176;
  *(_QWORD *)&v14 = (v7 << 48) | 0x19C840;
  if (*(_BYTE *)(a2 + 248))
  {
    v9 = *(unsigned __int16 *)(a2 + 172);
    v8 = 1918906368;
    if ((_DWORD)v9 == 0xFFFF)
    {
      v10 = *(__int16 *)(a2 + 244);
      v9 = *(unsigned __int16 *)(a2 + 244);
      *(_WORD *)(a2 + 172) = v10;
      *(_WORD *)(a2 + 172 + 4 * v10 + 2) = 0;
      *(_WORD *)(a2 + 244) = v10 + 1;
    }
  }
  else
  {
    v9 = *(unsigned __int16 *)(a2 + 208);
    if ((_DWORD)v9 == 0xFFFF)
    {
      v9 = *(unsigned __int16 *)(a2 + 246);
      *(_WORD *)(a2 + 208) = v9;
      *(_WORD *)(a2 + 246) = v9 + 1;
    }
  }
  *(_QWORD *)&v13 = v8 | (v9 << 48) | 0x70000;
  return (*(uint64_t (**)(uint64_t, unint64_t *))(a2 + 256))(a2, &v12);
}

uint64_t gleStateProgram_RGB_BLEND(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _WORD *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  gleStateProgram_CheckDestInit(a2);
  v24 = 0;
  v23 = 0u;
  v22 = 0u;
  v21 = 0u;
  v20 = 0u;
  if (*(_BYTE *)(a2 + 251))
    v5 = 0x3100180000;
  else
    v5 = 0x3100080000;
  v19 = v5 & 0xFFFFFFFFFFFFFFC7 | (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0xF03;
  *(_DWORD *)(a2 + 16) = 3;
  v6 = *(unsigned __int16 *)(a2 + 210);
  if ((_DWORD)v6 == 0xFFFF)
  {
    v6 = *(unsigned __int16 *)(a2 + 246);
    *(_WORD *)(a2 + 210) = v6;
    *(_WORD *)(a2 + 246) = v6 + 1;
  }
  v7 = 1689664;
  *((_QWORD *)&v20 + 1) = (v6 << 48) | 0x19C840;
  v8 = a2 + 4 * a3;
  v11 = *(unsigned __int16 *)(v8 + 84);
  v10 = (_WORD *)(v8 + 84);
  v9 = v11;
  if (v11 == 0xFFFF)
  {
    v12 = *(__int16 *)(a2 + 242);
    v9 = *(unsigned __int16 *)(a2 + 242);
    *v10 = v12;
    *(_WORD *)(a2 + 4 * v12 + 86) = a3;
    *(_WORD *)(a2 + 242) = v12 + 1;
  }
  *(_QWORD *)&v21 = ((v9 << 48) | 0x19C840) + 64;
  if (*(_BYTE *)(a2 + 249))
  {
    v13 = *(unsigned __int16 *)(a2 + 208);
    if ((_DWORD)v13 == 0xFFFF)
    {
      v13 = *(unsigned __int16 *)(a2 + 246);
      *(_WORD *)(a2 + 208) = v13;
      *(_WORD *)(a2 + 246) = v13 + 1;
    }
  }
  else
  {
    v13 = *(unsigned __int16 *)(a2 + 24);
    v7 = 1689600;
    if ((_DWORD)v13 == 0xFFFF)
    {
      v14 = *(__int16 *)(a2 + 240);
      v13 = *(unsigned __int16 *)(a2 + 240);
      *(_WORD *)(a2 + 24) = v14;
      *(_WORD *)(a2 + 4 * v14 + 22) = 1;
      *(_WORD *)(a2 + 240) = v14 + 1;
    }
  }
  v15 = 1918898176;
  *((_QWORD *)&v21 + 1) = v7 | (v13 << 48);
  if (*(_BYTE *)(a2 + 248))
  {
    v16 = *(unsigned __int16 *)(a2 + 172);
    v15 = 1918906368;
    if ((_DWORD)v16 == 0xFFFF)
    {
      v17 = *(__int16 *)(a2 + 244);
      v16 = *(unsigned __int16 *)(a2 + 244);
      *(_WORD *)(a2 + 172) = v17;
      *(_WORD *)(a2 + 172 + 4 * v17 + 2) = 0;
      *(_WORD *)(a2 + 244) = v17 + 1;
    }
  }
  else
  {
    v16 = *(unsigned __int16 *)(a2 + 208);
    if ((_DWORD)v16 == 0xFFFF)
    {
      v16 = *(unsigned __int16 *)(a2 + 246);
      *(_WORD *)(a2 + 208) = v16;
      *(_WORD *)(a2 + 246) = v16 + 1;
    }
  }
  *(_QWORD *)&v20 = v15 | (v16 << 48) | 0x70000;
  return (*(uint64_t (**)(uint64_t, unint64_t *))(a2 + 256))(a2, &v19);
}

uint64_t gleStateProgram_RGB_REPLACE(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  gleStateProgram_CheckDestInit(a2);
  v14 = 0;
  v13 = 0u;
  v12 = 0u;
  v11 = 0u;
  v10 = 0u;
  if (*(_BYTE *)(a2 + 251))
    v3 = 0x3100180000;
  else
    v3 = 0x3100080000;
  v9 = v3 & 0xFFFFFFFFFFFFFFC7 | (8 * (*(_DWORD *)(a2 + 16) & 7)) | 1;
  *(_DWORD *)(a2 + 16) = 1;
  v4 = *(unsigned __int16 *)(a2 + 210);
  if ((_DWORD)v4 == 0xFFFF)
  {
    v4 = *(unsigned __int16 *)(a2 + 246);
    *(_WORD *)(a2 + 210) = v4;
    *(_WORD *)(a2 + 246) = v4 + 1;
  }
  v5 = 1918898176;
  *((_QWORD *)&v10 + 1) = (v4 << 48) | 0x19C840;
  if (*(_BYTE *)(a2 + 248))
  {
    v6 = *(unsigned __int16 *)(a2 + 172);
    v5 = 1918906368;
    if ((_DWORD)v6 == 0xFFFF)
    {
      v7 = *(__int16 *)(a2 + 244);
      v6 = *(unsigned __int16 *)(a2 + 244);
      *(_WORD *)(a2 + 172) = v7;
      *(_WORD *)(a2 + 172 + 4 * v7 + 2) = 0;
      *(_WORD *)(a2 + 244) = v7 + 1;
    }
  }
  else
  {
    v6 = *(unsigned __int16 *)(a2 + 208);
    if ((_DWORD)v6 == 0xFFFF)
    {
      v6 = *(unsigned __int16 *)(a2 + 246);
      *(_WORD *)(a2 + 208) = v6;
      *(_WORD *)(a2 + 246) = v6 + 1;
    }
  }
  *(_QWORD *)&v10 = v5 | (v6 << 48) | 0x70000;
  return (*(uint64_t (**)(uint64_t, unint64_t *))(a2 + 256))(a2, &v9);
}

uint64_t gleStateProgram_RGB_ADD(_BYTE *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  gleStateProgram_CheckDestInit(a2);
  v19 = 0;
  v18 = 0u;
  v17 = 0u;
  v16 = 0u;
  v15 = 0u;
  v4 = 1572864;
  if (!*(_BYTE *)(a2 + 251))
    v4 = 0x80000;
  v5 = v4 & 0xFFFFFFFFFFFFFFC7 | (8 * (*(_DWORD *)(a2 + 16) & 7));
  v14 = v5 | 0x31000007C2;
  *(_DWORD *)(a2 + 16) = 2;
  if ((*a1 & 0x10) != 0)
    v14 = v5 | 0x831000007C2;
  v6 = *(unsigned __int16 *)(a2 + 210);
  if ((_DWORD)v6 == 0xFFFF)
  {
    v6 = *(unsigned __int16 *)(a2 + 246);
    *(_WORD *)(a2 + 210) = v6;
    *(_WORD *)(a2 + 246) = v6 + 1;
  }
  v7 = 1689664;
  *((_QWORD *)&v15 + 1) = (v6 << 48) | 0x19C840;
  if (*(_BYTE *)(a2 + 249))
  {
    v8 = *(unsigned __int16 *)(a2 + 208);
    if ((_DWORD)v8 == 0xFFFF)
    {
      v8 = *(unsigned __int16 *)(a2 + 246);
      *(_WORD *)(a2 + 208) = v8;
      *(_WORD *)(a2 + 246) = v8 + 1;
    }
  }
  else
  {
    v8 = *(unsigned __int16 *)(a2 + 24);
    v7 = 1689600;
    if ((_DWORD)v8 == 0xFFFF)
    {
      v9 = *(__int16 *)(a2 + 240);
      v8 = *(unsigned __int16 *)(a2 + 240);
      *(_WORD *)(a2 + 24) = v9;
      *(_WORD *)(a2 + 4 * v9 + 22) = 1;
      *(_WORD *)(a2 + 240) = v9 + 1;
    }
  }
  v10 = 1918898176;
  *(_QWORD *)&v16 = v7 | (v8 << 48);
  if (*(_BYTE *)(a2 + 248))
  {
    v11 = *(unsigned __int16 *)(a2 + 172);
    v10 = 1918906368;
    if ((_DWORD)v11 == 0xFFFF)
    {
      v12 = *(__int16 *)(a2 + 244);
      v11 = *(unsigned __int16 *)(a2 + 244);
      *(_WORD *)(a2 + 172) = v12;
      *(_WORD *)(a2 + 172 + 4 * v12 + 2) = 0;
      *(_WORD *)(a2 + 244) = v12 + 1;
    }
  }
  else
  {
    v11 = *(unsigned __int16 *)(a2 + 208);
    if ((_DWORD)v11 == 0xFFFF)
    {
      v11 = *(unsigned __int16 *)(a2 + 246);
      *(_WORD *)(a2 + 208) = v11;
      *(_WORD *)(a2 + 246) = v11 + 1;
    }
  }
  *(_QWORD *)&v15 = v10 | (v11 << 48) | 0x70000;
  return (*(uint64_t (**)(uint64_t, uint64_t *))(a2 + 256))(a2, &v14);
}

uint64_t gleStateProgram_RGBA_MODULATE(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v22 = 0;
  v21 = 0u;
  v20 = 0u;
  v19 = 0u;
  v18 = 0u;
  if (*(_BYTE *)(a2 + 251))
    v8 = 0x3100180000;
  else
    v8 = 0x3100080000;
  v17 = v8 & 0xFFFFFFFFFFFFFFC7 | (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x882;
  *(_DWORD *)(a2 + 16) = 2;
  if (*(_BYTE *)(a2 + 249))
  {
    v9 = *(unsigned __int16 *)(a2 + 208);
    v10 = 1689664;
    if ((_DWORD)v9 == 0xFFFF)
    {
      v9 = *(unsigned __int16 *)(a2 + 246);
      *(_WORD *)(a2 + 208) = v9;
      *(_WORD *)(a2 + 246) = v9 + 1;
      v10 = 1689664;
    }
  }
  else
  {
    v9 = *(unsigned __int16 *)(a2 + 24);
    v10 = 1689600;
    if ((_DWORD)v9 == 0xFFFF)
    {
      v11 = *(__int16 *)(a2 + 240);
      v9 = *(unsigned __int16 *)(a2 + 240);
      *(_WORD *)(a2 + 24) = v11;
      *(_WORD *)(a2 + 4 * v11 + 22) = 1;
      *(_WORD *)(a2 + 240) = v11 + 1;
    }
  }
  *((_QWORD *)&v18 + 1) = v10 | (v9 << 48);
  v12 = *(unsigned __int16 *)(a2 + 210);
  if ((_DWORD)v12 == 0xFFFF)
  {
    v12 = *(unsigned __int16 *)(a2 + 246);
    *(_WORD *)(a2 + 210) = v12;
    *(_WORD *)(a2 + 246) = v12 + 1;
  }
  v13 = 1919389696;
  *(_QWORD *)&v19 = (v12 << 48) | 0x19C840;
  if (*(_BYTE *)(a2 + 248))
  {
    v14 = *(unsigned __int16 *)(a2 + 172);
    v13 = 1919397888;
    if ((_DWORD)v14 == 0xFFFF)
    {
      v15 = *(__int16 *)(a2 + 244);
      v14 = *(unsigned __int16 *)(a2 + 244);
      *(_WORD *)(a2 + 172) = v15;
      *(_WORD *)(a2 + 172 + 4 * v15 + 2) = 0;
      *(_WORD *)(a2 + 244) = v15 + 1;
    }
  }
  else
  {
    v14 = *(unsigned __int16 *)(a2 + 208);
    if ((_DWORD)v14 == 0xFFFF)
    {
      v14 = *(unsigned __int16 *)(a2 + 246);
      *(_WORD *)(a2 + 208) = v14;
      *(_WORD *)(a2 + 246) = v14 + 1;
    }
  }
  *(_QWORD *)&v18 = v13 | (v14 << 48);
  return (*(uint64_t (**)(uint64_t, unint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a2 + 256))(a2, &v17, a3, a4, a5, a6, a7, a8);
}

uint64_t gleStateProgram_RGBA_BLEND(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _WORD *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v33 = 0;
  v32 = 0u;
  v31 = 0u;
  v30 = 0u;
  v29 = 0u;
  if (*(_BYTE *)(a2 + 251))
    v5 = 0x3100180000;
  else
    v5 = 0x3100080000;
  v28 = v5 & 0xFFFFFFFFFFFFFFC7 | (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x882;
  *(_DWORD *)(a2 + 16) = 2;
  if (*(_BYTE *)(a2 + 249))
  {
    v6 = *(unsigned __int16 *)(a2 + 208);
    if ((_DWORD)v6 == 0xFFFF)
    {
      v6 = *(unsigned __int16 *)(a2 + 246);
      *(_WORD *)(a2 + 208) = v6;
      *(_WORD *)(a2 + 246) = v6 + 1;
    }
    v7 = (v6 << 48) | 0x40;
  }
  else
  {
    v8 = *(unsigned __int16 *)(a2 + 24);
    if ((_DWORD)v8 == 0xFFFF)
    {
      v9 = *(__int16 *)(a2 + 240);
      v8 = *(unsigned __int16 *)(a2 + 240);
      *(_WORD *)(a2 + 24) = v9;
      *(_WORD *)(a2 + 4 * v9 + 22) = 1;
      *(_WORD *)(a2 + 240) = v9 + 1;
    }
    v7 = v8 << 48;
  }
  *((_QWORD *)&v29 + 1) = v7 | 0x1FE00;
  v10 = *(unsigned __int16 *)(a2 + 210);
  if ((_DWORD)v10 == 0xFFFF)
  {
    v10 = *(unsigned __int16 *)(a2 + 246);
    *(_WORD *)(a2 + 210) = v10;
    *(_WORD *)(a2 + 246) = v10 + 1;
  }
  v11 = 1918898176;
  *(_QWORD *)&v30 = (v10 << 48) | 0x1FE40;
  if (*(_BYTE *)(a2 + 248))
  {
    v12 = *(unsigned __int16 *)(a2 + 172);
    v13 = 1918906368;
    if ((_DWORD)v12 == 0xFFFF)
    {
      v14 = *(__int16 *)(a2 + 244);
      v12 = *(unsigned __int16 *)(a2 + 244);
      *(_WORD *)(a2 + 172) = v14;
      *(_WORD *)(a2 + 172 + 4 * v14 + 2) = 0;
      *(_WORD *)(a2 + 244) = v14 + 1;
    }
  }
  else
  {
    v12 = *(unsigned __int16 *)(a2 + 208);
    v13 = 1918898176;
    if ((_DWORD)v12 == 0xFFFF)
    {
      v12 = *(unsigned __int16 *)(a2 + 246);
      *(_WORD *)(a2 + 208) = v12;
      *(_WORD *)(a2 + 246) = v12 + 1;
      v13 = 1918898176;
    }
  }
  *(_QWORD *)&v29 = v13 | (v12 << 48) | 0x8000;
  (*(void (**)(uint64_t, unint64_t *))(a2 + 256))(a2, &v28);
  v33 = 0;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  if (*(_BYTE *)(a2 + 251))
    v15 = 0x3100180000;
  else
    v15 = 0x3100080000;
  v28 = (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0xF03 | v15;
  *(_DWORD *)(a2 + 16) = 3;
  v16 = *(unsigned __int16 *)(a2 + 210);
  if ((_DWORD)v16 == 0xFFFF)
  {
    v16 = *(unsigned __int16 *)(a2 + 246);
    *(_WORD *)(a2 + 210) = v16;
    *(_WORD *)(a2 + 246) = v16 + 1;
  }
  v17 = 1689664;
  *((_QWORD *)&v29 + 1) = (v16 << 48) | 0x19C840;
  v18 = a2 + 4 * a3;
  v21 = *(unsigned __int16 *)(v18 + 84);
  v20 = (_WORD *)(v18 + 84);
  v19 = v21;
  if (v21 == 0xFFFF)
  {
    v22 = *(__int16 *)(a2 + 242);
    v19 = *(unsigned __int16 *)(a2 + 242);
    *v20 = v22;
    *(_WORD *)(a2 + 4 * v22 + 86) = a3;
    *(_WORD *)(a2 + 242) = v22 + 1;
  }
  *(_QWORD *)&v30 = ((v19 << 48) | 0x19C840) + 64;
  if (*(_BYTE *)(a2 + 249))
  {
    v23 = *(unsigned __int16 *)(a2 + 208);
    if ((_DWORD)v23 == 0xFFFF)
    {
      v23 = *(unsigned __int16 *)(a2 + 246);
      *(_WORD *)(a2 + 208) = v23;
      *(_WORD *)(a2 + 246) = v23 + 1;
    }
  }
  else
  {
    v23 = *(unsigned __int16 *)(a2 + 24);
    v17 = 1689600;
    if ((_DWORD)v23 == 0xFFFF)
    {
      v24 = *(__int16 *)(a2 + 240);
      v23 = *(unsigned __int16 *)(a2 + 240);
      *(_WORD *)(a2 + 24) = v24;
      *(_WORD *)(a2 + 4 * v24 + 22) = 1;
      *(_WORD *)(a2 + 240) = v24 + 1;
    }
  }
  *((_QWORD *)&v30 + 1) = v17 | (v23 << 48);
  if (*(_BYTE *)(a2 + 248))
  {
    v25 = *(unsigned __int16 *)(a2 + 172);
    v11 = 1918906368;
    if ((_DWORD)v25 == 0xFFFF)
    {
      v26 = *(__int16 *)(a2 + 244);
      v25 = *(unsigned __int16 *)(a2 + 244);
      *(_WORD *)(a2 + 172) = v26;
      *(_WORD *)(a2 + 172 + 4 * v26 + 2) = 0;
      *(_WORD *)(a2 + 244) = v26 + 1;
    }
  }
  else
  {
    v25 = *(unsigned __int16 *)(a2 + 208);
    if ((_DWORD)v25 == 0xFFFF)
    {
      v25 = *(unsigned __int16 *)(a2 + 246);
      *(_WORD *)(a2 + 208) = v25;
      *(_WORD *)(a2 + 246) = v25 + 1;
    }
  }
  *(_QWORD *)&v29 = v11 | (v25 << 48) | 0x70000;
  return (*(uint64_t (**)(uint64_t, unint64_t *))(a2 + 256))(a2, &v28);
}

uint64_t gleStateProgram_RGBA_ADD(_BYTE *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  v26 = 0;
  v25 = 0u;
  v24 = 0u;
  v23 = 0u;
  v22 = 0u;
  v3 = 1572864;
  if (!*(_BYTE *)(a2 + 251))
    v3 = 0x80000;
  v4 = v3 & 0xFFFFFFFFFFFFFFC7 | (8 * (*(_DWORD *)(a2 + 16) & 7));
  v21 = v4 | 0x31000007C2;
  *(_DWORD *)(a2 + 16) = 2;
  if ((*a1 & 0x10) != 0)
    v21 = v4 | 0x831000007C2;
  v5 = *(unsigned __int16 *)(a2 + 210);
  if ((_DWORD)v5 == 0xFFFF)
  {
    v5 = *(unsigned __int16 *)(a2 + 246);
    *(_WORD *)(a2 + 210) = v5;
    *(_WORD *)(a2 + 246) = v5 + 1;
  }
  *((_QWORD *)&v22 + 1) = (v5 << 48) | 0x19C840;
  if (*(_BYTE *)(a2 + 249))
  {
    v6 = *(unsigned __int16 *)(a2 + 208);
    v7 = 1689664;
    if ((_DWORD)v6 == 0xFFFF)
    {
      v6 = *(unsigned __int16 *)(a2 + 246);
      *(_WORD *)(a2 + 208) = v6;
      *(_WORD *)(a2 + 246) = v6 + 1;
      v7 = 1689664;
    }
  }
  else
  {
    v6 = *(unsigned __int16 *)(a2 + 24);
    v7 = 1689600;
    if ((_DWORD)v6 == 0xFFFF)
    {
      v8 = *(__int16 *)(a2 + 240);
      v6 = *(unsigned __int16 *)(a2 + 240);
      *(_WORD *)(a2 + 24) = v8;
      *(_WORD *)(a2 + 4 * v8 + 22) = 1;
      *(_WORD *)(a2 + 240) = v8 + 1;
    }
  }
  v9 = 1918898176;
  *(_QWORD *)&v23 = v7 | (v6 << 48);
  if (*(_BYTE *)(a2 + 248))
  {
    v10 = *(unsigned __int16 *)(a2 + 172);
    v11 = 1918906368;
    if ((_DWORD)v10 == 0xFFFF)
    {
      v12 = *(__int16 *)(a2 + 244);
      v10 = *(unsigned __int16 *)(a2 + 244);
      *(_WORD *)(a2 + 172) = v12;
      *(_WORD *)(a2 + 172 + 4 * v12 + 2) = 0;
      *(_WORD *)(a2 + 244) = v12 + 1;
    }
  }
  else
  {
    v10 = *(unsigned __int16 *)(a2 + 208);
    v11 = 1918898176;
    if ((_DWORD)v10 == 0xFFFF)
    {
      v10 = *(unsigned __int16 *)(a2 + 246);
      *(_WORD *)(a2 + 208) = v10;
      *(_WORD *)(a2 + 246) = v10 + 1;
      v11 = 1918898176;
    }
  }
  *(_QWORD *)&v22 = v11 | (v10 << 48) | 0x70000;
  (*(void (**)(uint64_t, unint64_t *))(a2 + 256))(a2, &v21);
  v26 = 0;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  if (*(_BYTE *)(a2 + 251))
    v13 = 0x3100180000;
  else
    v13 = 0x3100080000;
  v21 = v13 & 0xFFFFFFFFFFFFFFC7 | (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0x882;
  *(_DWORD *)(a2 + 16) = 2;
  if (*(_BYTE *)(a2 + 249))
  {
    v14 = *(unsigned __int16 *)(a2 + 208);
    v15 = 1689664;
    if ((_DWORD)v14 == 0xFFFF)
    {
      v14 = *(unsigned __int16 *)(a2 + 246);
      *(_WORD *)(a2 + 208) = v14;
      *(_WORD *)(a2 + 246) = v14 + 1;
      v15 = 1689664;
    }
  }
  else
  {
    v14 = *(unsigned __int16 *)(a2 + 24);
    v15 = 1689600;
    if ((_DWORD)v14 == 0xFFFF)
    {
      v16 = *(__int16 *)(a2 + 240);
      v14 = *(unsigned __int16 *)(a2 + 240);
      *(_WORD *)(a2 + 24) = v16;
      *(_WORD *)(a2 + 4 * v16 + 22) = 1;
      *(_WORD *)(a2 + 240) = v16 + 1;
    }
  }
  *((_QWORD *)&v22 + 1) = v15 | (v14 << 48);
  v17 = *(unsigned __int16 *)(a2 + 210);
  if ((_DWORD)v17 == 0xFFFF)
  {
    v17 = *(unsigned __int16 *)(a2 + 246);
    *(_WORD *)(a2 + 210) = v17;
    *(_WORD *)(a2 + 246) = v17 + 1;
  }
  *(_QWORD *)&v23 = (v17 << 48) | 0x19C840;
  if (*(_BYTE *)(a2 + 248))
  {
    v18 = *(unsigned __int16 *)(a2 + 172);
    v9 = 1918906368;
    if ((_DWORD)v18 == 0xFFFF)
    {
      v19 = *(__int16 *)(a2 + 244);
      v18 = *(unsigned __int16 *)(a2 + 244);
      *(_WORD *)(a2 + 172) = v19;
      *(_WORD *)(a2 + 172 + 4 * v19 + 2) = 0;
      *(_WORD *)(a2 + 244) = v19 + 1;
    }
  }
  else
  {
    v18 = *(unsigned __int16 *)(a2 + 208);
    if ((_DWORD)v18 == 0xFFFF)
    {
      v18 = *(unsigned __int16 *)(a2 + 246);
      *(_WORD *)(a2 + 208) = v18;
      *(_WORD *)(a2 + 246) = v18 + 1;
    }
  }
  *(_QWORD *)&v22 = v9 | (v18 << 48) | 0x8000;
  return (*(uint64_t (**)(uint64_t, unint64_t *))(a2 + 256))(a2, &v21);
}

uint64_t gleStateProgram_I_BLEND(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _WORD *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v27 = 0;
  v26 = 0u;
  v25 = 0u;
  v24 = 0u;
  v23 = 0u;
  if (*(_BYTE *)(a2 + 251))
    v8 = 0x3100180000;
  else
    v8 = 0x3100080000;
  v22 = v8 & 0xFFFFFFFFFFFFFFC7 | (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0xF03;
  *(_DWORD *)(a2 + 16) = 3;
  v9 = *(unsigned __int16 *)(a2 + 210);
  if ((_DWORD)v9 == 0xFFFF)
  {
    v9 = *(unsigned __int16 *)(a2 + 246);
    *(_WORD *)(a2 + 210) = v9;
    *(_WORD *)(a2 + 246) = v9 + 1;
  }
  v10 = 1689664;
  *((_QWORD *)&v23 + 1) = (v9 << 48) | 0x19C840;
  v11 = a2 + 4 * (int)a3;
  v14 = *(unsigned __int16 *)(v11 + 84);
  v13 = (_WORD *)(v11 + 84);
  v12 = v14;
  if (v14 == 0xFFFF)
  {
    v15 = *(__int16 *)(a2 + 242);
    v12 = *(unsigned __int16 *)(a2 + 242);
    *v13 = v15;
    *(_WORD *)(a2 + 4 * v15 + 86) = a3;
    *(_WORD *)(a2 + 242) = v15 + 1;
  }
  *(_QWORD *)&v24 = ((v12 << 48) | 0x19C840) + 64;
  if (*(_BYTE *)(a2 + 249))
  {
    v16 = *(unsigned __int16 *)(a2 + 208);
    if ((_DWORD)v16 == 0xFFFF)
    {
      v16 = *(unsigned __int16 *)(a2 + 246);
      *(_WORD *)(a2 + 208) = v16;
      *(_WORD *)(a2 + 246) = v16 + 1;
    }
  }
  else
  {
    v16 = *(unsigned __int16 *)(a2 + 24);
    v10 = 1689600;
    if ((_DWORD)v16 == 0xFFFF)
    {
      v17 = *(__int16 *)(a2 + 240);
      v16 = *(unsigned __int16 *)(a2 + 240);
      *(_WORD *)(a2 + 24) = v17;
      *(_WORD *)(a2 + 4 * v17 + 22) = 1;
      *(_WORD *)(a2 + 240) = v17 + 1;
    }
  }
  v18 = 1919389696;
  *((_QWORD *)&v24 + 1) = v10 | (v16 << 48);
  if (*(_BYTE *)(a2 + 248))
  {
    v19 = *(unsigned __int16 *)(a2 + 172);
    v18 = 1919397888;
    if ((_DWORD)v19 == 0xFFFF)
    {
      v20 = *(__int16 *)(a2 + 244);
      v19 = *(unsigned __int16 *)(a2 + 244);
      *(_WORD *)(a2 + 172) = v20;
      *(_WORD *)(a2 + 172 + 4 * v20 + 2) = 0;
      *(_WORD *)(a2 + 244) = v20 + 1;
    }
  }
  else
  {
    v19 = *(unsigned __int16 *)(a2 + 208);
    if ((_DWORD)v19 == 0xFFFF)
    {
      v19 = *(unsigned __int16 *)(a2 + 246);
      *(_WORD *)(a2 + 208) = v19;
      *(_WORD *)(a2 + 246) = v19 + 1;
    }
  }
  *(_QWORD *)&v23 = v18 | (v19 << 48);
  return (*(uint64_t (**)(uint64_t, unint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a2 + 256))(a2, &v22, a3, a4, a5, a6, a7, a8);
}

uint64_t gleStateProgram_I_ADD(_BYTE *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v17 = 0;
  v16 = 0u;
  v15 = 0u;
  v14 = 0u;
  v13 = 0u;
  v2 = 1572864;
  if (!*(_BYTE *)(a2 + 251))
    v2 = 0x80000;
  v3 = v2 & 0xFFFFFFFFFFFFFFC7 | (8 * (*(_DWORD *)(a2 + 16) & 7));
  v12 = v3 | 0x31000007C2;
  *(_DWORD *)(a2 + 16) = 2;
  if ((*a1 & 0x10) != 0)
    v12 = v3 | 0x831000007C2;
  v4 = *(unsigned __int16 *)(a2 + 210);
  if ((_DWORD)v4 == 0xFFFF)
  {
    v4 = *(unsigned __int16 *)(a2 + 246);
    *(_WORD *)(a2 + 210) = v4;
    *(_WORD *)(a2 + 246) = v4 + 1;
  }
  v5 = 1689664;
  *((_QWORD *)&v13 + 1) = (v4 << 48) | 0x19C840;
  if (*(_BYTE *)(a2 + 249))
  {
    v6 = *(unsigned __int16 *)(a2 + 208);
    if ((_DWORD)v6 == 0xFFFF)
    {
      v6 = *(unsigned __int16 *)(a2 + 246);
      *(_WORD *)(a2 + 208) = v6;
      *(_WORD *)(a2 + 246) = v6 + 1;
    }
  }
  else
  {
    v6 = *(unsigned __int16 *)(a2 + 24);
    v5 = 1689600;
    if ((_DWORD)v6 == 0xFFFF)
    {
      v7 = *(__int16 *)(a2 + 240);
      v6 = *(unsigned __int16 *)(a2 + 240);
      *(_WORD *)(a2 + 24) = v7;
      *(_WORD *)(a2 + 4 * v7 + 22) = 1;
      *(_WORD *)(a2 + 240) = v7 + 1;
    }
  }
  v8 = 1919389696;
  *(_QWORD *)&v14 = v5 | (v6 << 48);
  if (*(_BYTE *)(a2 + 248))
  {
    v9 = *(unsigned __int16 *)(a2 + 172);
    v8 = 1919397888;
    if ((_DWORD)v9 == 0xFFFF)
    {
      v10 = *(__int16 *)(a2 + 244);
      v9 = *(unsigned __int16 *)(a2 + 244);
      *(_WORD *)(a2 + 172) = v10;
      *(_WORD *)(a2 + 172 + 4 * v10 + 2) = 0;
      *(_WORD *)(a2 + 244) = v10 + 1;
    }
  }
  else
  {
    v9 = *(unsigned __int16 *)(a2 + 208);
    if ((_DWORD)v9 == 0xFFFF)
    {
      v9 = *(unsigned __int16 *)(a2 + 246);
      *(_WORD *)(a2 + 208) = v9;
      *(_WORD *)(a2 + 246) = v9 + 1;
    }
  }
  *(_QWORD *)&v13 = v8 | (v9 << 48);
  return (*(uint64_t (**)(uint64_t, uint64_t *))(a2 + 256))(a2, &v12);
}

uint64_t gleStateProgram_RGBA_DECAL(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  gleStateProgram_CheckDestInit(a2);
  v20 = 0;
  v19 = 0u;
  v18 = 0u;
  v17 = 0u;
  v16 = 0u;
  if (*(_BYTE *)(a2 + 251))
    v3 = 0x3100180000;
  else
    v3 = 0x3100080000;
  v15 = v3 & 0xFFFFFFFFFFFFFFC7 | (8 * (*(_DWORD *)(a2 + 16) & 7)) | 0xF03;
  *(_DWORD *)(a2 + 16) = 3;
  v4 = *(unsigned __int16 *)(a2 + 210);
  if (v4 == 0xFFFF)
  {
    v6 = *(unsigned __int16 *)(a2 + 246);
    v7 = *(unsigned __int16 *)(a2 + 246);
    *(_WORD *)(a2 + 210) = v6;
    *(_WORD *)(a2 + 246) = ++v7;
    *((_QWORD *)&v16 + 1) = ((unint64_t)(unsigned __int16)v6 << 48) | 0x1FE40;
    if ((v7 & 0x10000) != 0)
    {
      v6 = *(unsigned __int16 *)(a2 + 246);
      *(_WORD *)(a2 + 210) = v6;
      *(_WORD *)(a2 + 246) = v6 + 1;
    }
    v5 = v6 << 48;
  }
  else
  {
    v5 = v4 << 48;
    *((_QWORD *)&v16 + 1) = ((unint64_t)(unsigned __int16)v4 << 48) | 0x1FE40;
  }
  v8 = 1689664;
  *(_QWORD *)&v17 = v5 | 0x19C840;
  if (*(_BYTE *)(a2 + 249))
  {
    v9 = *(unsigned __int16 *)(a2 + 208);
    if ((_DWORD)v9 == 0xFFFF)
    {
      v9 = *(unsigned __int16 *)(a2 + 246);
      *(_WORD *)(a2 + 208) = v9;
      *(_WORD *)(a2 + 246) = v9 + 1;
    }
  }
  else
  {
    v9 = *(unsigned __int16 *)(a2 + 24);
    v8 = 1689600;
    if ((_DWORD)v9 == 0xFFFF)
    {
      v10 = *(__int16 *)(a2 + 240);
      v9 = *(unsigned __int16 *)(a2 + 240);
      *(_WORD *)(a2 + 24) = v10;
      *(_WORD *)(a2 + 4 * v10 + 22) = 1;
      *(_WORD *)(a2 + 240) = v10 + 1;
    }
  }
  v11 = 1918898176;
  *((_QWORD *)&v17 + 1) = v8 | (v9 << 48);
  if (*(_BYTE *)(a2 + 248))
  {
    v12 = *(unsigned __int16 *)(a2 + 172);
    v11 = 1918906368;
    if ((_DWORD)v12 == 0xFFFF)
    {
      v13 = *(__int16 *)(a2 + 244);
      v12 = *(unsigned __int16 *)(a2 + 244);
      *(_WORD *)(a2 + 172) = v13;
      *(_WORD *)(a2 + 172 + 4 * v13 + 2) = 0;
      *(_WORD *)(a2 + 244) = v13 + 1;
    }
  }
  else
  {
    v12 = *(unsigned __int16 *)(a2 + 208);
    if ((_DWORD)v12 == 0xFFFF)
    {
      v12 = *(unsigned __int16 *)(a2 + 246);
      *(_WORD *)(a2 + 208) = v12;
      *(_WORD *)(a2 + 246) = v12 + 1;
    }
  }
  *(_QWORD *)&v16 = v11 | (v12 << 48) | 0x70000;
  return (*(uint64_t (**)(uint64_t, unint64_t *))(a2 + 256))(a2, &v15);
}

void glpPrimitiveTypeToLLVMType_cold_1(unsigned int a1)
{
  char *v1;

  v1 = glpPrimitiveTypeToString(a1);
  printf("unhandled primitive type: %s\n", v1);
  abort();
}

void _glpSetCrashLogMessage_cold_1(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *MEMORY[0x24BDAC8D0];
  v1 = 136315138;
  v2 = a1;
  _os_log_fault_impl(&dword_22A850000, MEMORY[0x24BDACB70], OS_LOG_TYPE_FAULT, "%s", (uint8_t *)&v1, 0xCu);
}

uint64_t appendTypeName_cold_1(uint64_t a1, uint64_t a2)
{
  return glpStringBufferAppendString(a2, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

unsigned __int8 *__cdecl CC_SHA1(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x24BDAC320](data, *(_QWORD *)&len, md);
}

int CC_SHA256_Final(unsigned __int8 *md, CC_SHA256_CTX *c)
{
  return MEMORY[0x24BDAC360](md, c);
}

int CC_SHA256_Init(CC_SHA256_CTX *c)
{
  return MEMORY[0x24BDAC368](c);
}

int CC_SHA256_Update(CC_SHA256_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x24BDAC370](c, data, *(_QWORD *)&len);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x24BDBB820](theArray);
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x24BDBB860](theArray, idx);
}

CFStringRef CFBundleGetIdentifier(CFBundleRef bundle)
{
  return (CFStringRef)MEMORY[0x24BDBBAC0](bundle);
}

CFBundleRef CFBundleGetMainBundle(void)
{
  return (CFBundleRef)MEMORY[0x24BDBBAD8]();
}

uint64_t CFCopySearchPathForDirectoriesInDomains()
{
  return MEMORY[0x24BDBBC70]();
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x24BDBC298](cf);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x24BDBC600](theString, buffer, bufferSize, *(_QWORD *)&encoding);
}

CFStringRef CFURLCopyFileSystemPath(CFURLRef anURL, CFURLPathStyle pathStyle)
{
  return (CFStringRef)MEMORY[0x24BDBC798](anURL, pathStyle);
}

void *__cdecl IOSurfaceGetBaseAddressOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return (void *)MEMORY[0x24BDD8BA8](buffer, planeIndex);
}

size_t IOSurfaceGetBytesPerRowOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x24BDD8BE0](buffer, planeIndex);
}

uint64_t IOSurfaceGetSeedOfPlane()
{
  return MEMORY[0x24BDD8CA8]();
}

uint64_t IOSurfaceLockPlane()
{
  return MEMORY[0x24BDD8D10]();
}

uint64_t IOSurfaceUnlockPlane()
{
  return MEMORY[0x24BDD8DD8]();
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x24BDAC730](a1, *(_QWORD *)&a2);
}

__darwin_ct_rune_t ___tolower_l(__darwin_ct_rune_t a1, locale_t a2)
{
  return MEMORY[0x24BDAC790](*(_QWORD *)&a1, a2);
}

int *__error(void)
{
  return (int *)MEMORY[0x24BDAC7D0]();
}

int __maskrune_l(__darwin_ct_rune_t a1, unint64_t a2, locale_t a3)
{
  return MEMORY[0x24BDAC840](*(_QWORD *)&a1, a2, a3);
}

uint64_t __memcpy_chk()
{
  return MEMORY[0x24BDAC848]();
}

uint64_t __strcpy_chk()
{
  return MEMORY[0x24BDAC900]();
}

uint64_t __strlcat_chk()
{
  return MEMORY[0x24BDAC908]();
}

uint64_t __strncat_chk()
{
  return MEMORY[0x24BDAC918]();
}

uint64_t __strncpy_chk()
{
  return MEMORY[0x24BDAC920]();
}

void _longjmp(jmp_buf a1, int a2)
{
  MEMORY[0x24BDACAF8](a1, *(_QWORD *)&a2);
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB88](dso, log, type, format, buf, *(_QWORD *)&size);
}

int _setjmp(jmp_buf a1)
{
  return MEMORY[0x24BDACC48](a1);
}

void abort(void)
{
  MEMORY[0x24BDAD008]();
}

float acosf(float a1)
{
  float result;

  MEMORY[0x24BDAD110](a1);
  return result;
}

float asinf(float a1)
{
  float result;

  MEMORY[0x24BDAD190](a1);
  return result;
}

float atan2f(float a1, float a2)
{
  float result;

  MEMORY[0x24BDAD228](a1, a2);
  return result;
}

float atanf(float a1)
{
  float result;

  MEMORY[0x24BDAD230](a1);
  return result;
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

float cosf(float a1)
{
  float result;

  MEMORY[0x24BDADBE8](a1);
  return result;
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x24BDADE98](predicate, block);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x24BDADED0](label, attr);
}

void dispatch_release(dispatch_object_t object)
{
  MEMORY[0x24BDADF10](object);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x24BDADFE8](queue, block);
}

int dladdr(const void *a1, Dl_info *a2)
{
  return MEMORY[0x24BDAE058](a1, a2);
}

float exp2f(float a1)
{
  float result;

  MEMORY[0x24BDAE280](a1);
  return result;
}

float expf(float a1)
{
  float result;

  MEMORY[0x24BDAE288](a1);
  return result;
}

int fclose(FILE *a1)
{
  return MEMORY[0x24BDAE2E0](a1);
}

int fprintf_l(FILE *a1, locale_t a2, const char *a3, ...)
{
  return MEMORY[0x24BDAE430](a1, a2, a3);
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

uint64_t fscache_close()
{
  return MEMORY[0x24BDE2C30]();
}

uint64_t fscache_element_get_data()
{
  return MEMORY[0x24BDE2C38]();
}

uint64_t fscache_find_and_retain()
{
  return MEMORY[0x24BDE2C40]();
}

uint64_t fscache_insert_and_retain()
{
  return MEMORY[0x24BDE2C50]();
}

uint64_t fscache_open()
{
  return MEMORY[0x24BDE2C58]();
}

uint64_t fscache_release()
{
  return MEMORY[0x24BDE2C68]();
}

uint64_t fscache_remove_and_release()
{
  return MEMORY[0x24BDE2C70]();
}

FILE *__cdecl funopen(const void *a1, int (__cdecl *a2)(void *, char *, int), int (__cdecl *a3)(void *, const char *, int), fpos_t (__cdecl *a4)(void *, fpos_t, int), int (__cdecl *a5)(void *))
{
  return (FILE *)MEMORY[0x24BDAE580](a1, a2, a3, a4, a5);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x24BDAE590](__ptr, __size, __nitems, __stream);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x24BDAE5F0](a1);
}

uint8_t *__cdecl getsectiondata(const mach_header_64 *mhp, const char *segname, const char *sectname, unint64_t *size)
{
  return (uint8_t *)MEMORY[0x24BDAE748](mhp, segname, sectname, size);
}

uint64_t glgConvertPixelWidthToBlocks()
{
  return MEMORY[0x24BDE2DE8]();
}

uint64_t glgConvertType()
{
  return MEMORY[0x24BDE2DF0]();
}

uint64_t glgGetCompressedBlockBytes()
{
  return MEMORY[0x24BDE2E08]();
}

uint64_t glgGetCompressedBlockHeight()
{
  return MEMORY[0x24BDE2E10]();
}

uint64_t glgGetCompressedImageBytes()
{
  return MEMORY[0x24BDE2E20]();
}

uint64_t glgGetPixelSize()
{
  return MEMORY[0x24BDE2E28]();
}

uint64_t glgProcessPixelsWithProcessor()
{
  return MEMORY[0x24BDE2E30]();
}

float log2f(float a1)
{
  float result;

  MEMORY[0x24BDAEAE0](a1);
  return result;
}

float logf(float a1)
{
  float result;

  MEMORY[0x24BDAEAF8](a1);
  return result;
}

void longjmp(jmp_buf a1, int a2)
{
  MEMORY[0x24BDAEB00](a1, *(_QWORD *)&a2);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED70](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED78](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED88](ptr, size, type_id);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x24BDAEE78](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x24BDAEEA8](__b, *(_QWORD *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
  MEMORY[0x24BDAEEB0](__b, __pattern16, __len);
}

int mkdir(const char *a1, mode_t a2)
{
  return MEMORY[0x24BDAEF28](a1, a2);
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x24BDAEFA8](a1, a2, *(_QWORD *)&a3, *(_QWORD *)&a4, *(_QWORD *)&a5, a6);
}

int mprotect(void *a1, size_t a2, int a3)
{
  return MEMORY[0x24BDAEFC8](a1, a2, *(_QWORD *)&a3);
}

int msync(void *a1, size_t a2, int a3)
{
  return MEMORY[0x24BDAEFE0](a1, a2, *(_QWORD *)&a3);
}

int munmap(void *a1, size_t a2)
{
  return MEMORY[0x24BDAEFF0](a1, a2);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x24BDAF460](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x24BDAF488](lock);
}

float powf(float a1, float a2)
{
  float result;

  MEMORY[0x24BDAF690](a1, a2);
  return result;
}

int printf(const char *a1, ...)
{
  return MEMORY[0x24BDAF6A8](a1);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x24BDAF8D0](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x24BDAF8E0](a1);
}

void qsort(void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
  MEMORY[0x24BDAFA18](__base, __nel, __width, __compar);
}

void qsort_b(void *__base, size_t __nel, size_t __width, void *__compar)
{
  MEMORY[0x24BDAFA20](__base, __nel, __width, __compar);
}

int setjmp(jmp_buf a1)
{
  return MEMORY[0x24BDAFD30](a1);
}

float sinf(float a1)
{
  float result;

  MEMORY[0x24BDAFE20](a1);
  return result;
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x24BDAFE40](__str, __size, __format);
}

int snprintf_l(char *a1, size_t a2, locale_t a3, const char *a4, ...)
{
  return MEMORY[0x24BDAFE48](a1, a2, a3, a4);
}

int sprintf_l(char *a1, locale_t a2, const char *a3, ...)
{
  return MEMORY[0x24BDAFE68](a1, a2, a3);
}

int sscanf(const char *a1, const char *a2, ...)
{
  return MEMORY[0x24BDAFEA0](a1, a2);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x24BDAFEA8](a1, a2);
}

char *__cdecl strcat(char *__s1, const char *__s2)
{
  return (char *)MEMORY[0x24BDAFEE0](__s1, __s2);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x24BDAFEF0](__s1, __s2);
}

char *__cdecl strcpy(char *__dst, const char *__src)
{
  return (char *)MEMORY[0x24BDAFF00](__dst, __src);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x24BDAFF40](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x24BDAFF68](__s1, __s2, __n);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x24BDAFF70](__dst, __src, __n);
}

char *__cdecl strndup(const char *__s1, size_t __n)
{
  return (char *)MEMORY[0x24BDAFF78](__s1, __n);
}

double strtod_l(const char *a1, char **a2, locale_t a3)
{
  double result;

  MEMORY[0x24BDAFFD8](a1, a2, a3);
  return result;
}

float strtof_l(const char *a1, char **a2, locale_t a3)
{
  float result;

  MEMORY[0x24BDAFFE8](a1, a2, a3);
  return result;
}

uint64_t strtol_l(const char *a1, char **a2, int a3, locale_t a4)
{
  return MEMORY[0x24BDB0008](a1, a2, *(_QWORD *)&a3, a4);
}

uint64_t strtoll_l(const char *a1, char **a2, int a3, locale_t a4)
{
  return MEMORY[0x24BDB0018](a1, a2, *(_QWORD *)&a3, a4);
}

unint64_t strtoul_l(const char *a1, char **a2, int a3, locale_t a4)
{
  return MEMORY[0x24BDB0038](a1, a2, *(_QWORD *)&a3, a4);
}

uint64_t sysconf(int a1)
{
  return MEMORY[0x24BDB00F0](*(_QWORD *)&a1);
}

void syslog(int a1, const char *a2, ...)
{
  MEMORY[0x24BDB0128](*(_QWORD *)&a1, a2);
}

float tanf(float a1)
{
  float result;

  MEMORY[0x24BDB0140](a1);
  return result;
}

int vsnprintf_l(char *a1, size_t a2, locale_t a3, const char *a4, va_list a5)
{
  return MEMORY[0x24BDB0450](a1, a2, a3, a4, a5);
}

